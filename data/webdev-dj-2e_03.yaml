- en: 3\. URL Mapping, Views, and Templates
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. URL映射、视图和模板
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: 'This chapter introduces you to three core concepts of Django: **views**, **templates**,
    and **URL mapping**. You will start by exploring the two main types of views in
    Django: **function-based views** and **class-based views**. Next, you will learn
    the basics of Django template language and template inheritance. Using these concepts,
    you will create a page to display the list of all the books in the **Bookr** application.
    You will also create another page to display the details, review comments, and
    ratings of books.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您介绍了Django的三个核心概念：**视图**、**模板**和**URL映射**。您将从探索Django中的两种主要视图类型开始：**基于函数的视图**和**基于类的视图**。接下来，您将学习Django模板语言和模板继承的基础知识。使用这些概念，您将创建一个页面来显示**Bookr**应用程序中所有书籍的列表。您还将创建另一个页面来显示书籍的详细信息、评论和评分。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the previous chapter, we were introduced to databases, and we learned how
    to store, retrieve, update, and delete records from a database. We also learned
    how to create Django models and apply database migrations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了数据库，并学习了如何从数据库中存储、检索、更新和删除记录。我们还学习了如何创建Django模型并应用数据库迁移。
- en: However, these database operations alone cannot display the application's data
    to a user. We need a way to display all the stored information in a meaningful
    way to the user; for example, displaying all the books present in our Bookr application's
    database, in a browser, in a presentable format. This is where Django views, templates,
    and URL mapping come into play. Views are the part of a Django application that
    takes in a web request and provides a web response. For example, a web request
    could be a user trying to view a website by entering the website address, and
    a web response could be the web site's home page loading in the user's browser.
    Views are one of the most important parts of a Django application, where the application
    logic is written. This application logic controls interactions with the database,
    such as creating, reading, updating, or deleting records from the database. It
    also controls how the data can be displayed to the user. This is done with the
    help of Django HTML templates, which we will explore in detail in a later section.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仅凭这些数据库操作本身并不能将应用程序的数据展示给用户。我们需要一种方法，以有意义的方式将所有存储的信息展示给用户；例如，在我们的Bookr应用程序数据库中显示所有现有的书籍，在浏览器中以可展示的格式。这就是Django视图、模板和URL映射发挥作用的地方。视图是Django应用程序的一部分，它接收网络请求并提供网络响应。例如，一个网络请求可能是一个用户通过输入网站地址来尝试查看网站，而一个网络响应可能是网站的主页在用户的浏览器中加载。视图是Django应用程序最重要的部分之一，应用程序逻辑在这里被编写。这种应用程序逻辑控制与数据库的交互，例如创建、读取、更新或从数据库中删除记录。它还控制数据如何展示给用户。这是通过Django
    HTML模板来实现的，我们将在后面的章节中详细探讨。
- en: Django views can be broadly classified into two types, **function-based views**
    and **class-based views**. In this chapter, we will learn about function-based
    views in Django.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Django视图可以大致分为两种类型，**基于函数的视图**和**基于类的视图**。在本章中，我们将学习Django中的基于函数的视图。
- en: Note
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In this chapter, we will learn only about function-based views. Class-based
    views, which is a more advanced topic, will be discussed in detail in *Chapter 11*,
    *Advanced Templating and Class-Based Views*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将仅学习关于基于函数的视图。更高级的基于类的视图将在第11章“高级模板和基于类的视图”中详细讨论。
- en: Function-Based Views
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于函数的视图
- en: 'As the name implies, function-based views are implemented as Python functions.
    To understand how they work, consider the following snippet, which shows a simple
    view function named `home_page`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，基于函数的视图是以Python函数的形式实现的。为了理解它们是如何工作的，考虑以下代码片段，它展示了一个名为`home_page`的简单视图函数：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The view function defined here, named `home_page`, takes a `request` object
    as an argument and returns an `HttpResponse` object having the `Welcome to my
    Website` message. The advantage of using function-based views is that, since they
    are implemented as simple Python functions, they are easier to learn and also
    easily readable for other programmers. The major disadvantage of function-based
    views is that the code cannot be re-used and made as concise as class-based views
    for generic use cases.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里定义的视图函数，名为`home_page`，接受一个`request`对象作为参数，并返回一个包含`Welcome to my Website`消息的`HttpResponse`对象。使用基于函数的视图的优势在于，由于它们是以简单的Python函数实现的，因此更容易学习和阅读。基于函数的视图的主要缺点是，代码不能被重用，并且对于通用用例来说，不能像基于类的视图那样简洁。
- en: Class-Based Views
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于类的视图
- en: 'As the name implies, class-based views are implemented as Python classes. Using
    the principles of class inheritance, these classes are implemented as subclasses
    of Django''s generic view classes. Unlike function-based views, where all the
    view logic is expressed explicitly in a function, Django''s generic view classes
    come with various pre-built properties and methods that can provide shortcuts
    to writing clean, reusable views. This property comes in handy quite often during
    web development; for example, developers often need to render an HTML page without
    needing any data inserted from the database, or any customization specific to
    the user. In this case, it is possible to simply inherit from Django''s `TemplateView`,
    and specify the path of the HTML file. The following is an example of a class-based
    view that can display the same message as in the function-based view example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，基于类的视图是以 Python 类的形式实现的。利用类继承的原则，这些类被实现为 Django 通用视图类的子类。与所有视图逻辑都明确表达在函数中的基于函数的视图不同，Django
    的通用视图类提供了各种预构建的属性和方法，可以提供编写干净、可重用视图的快捷方式。这个特性在 Web 开发中非常有用；例如，开发者经常需要渲染一个 HTML
    页面，而不需要从数据库中插入任何数据，或者任何针对特定用户的定制化。在这种情况下，可以简单地继承 Django 的 `TemplateView`，并指定 HTML
    文件的路径。以下是一个可以显示与基于函数的视图示例中相同信息的基于类的视图示例：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding code snippet, `HomePage` is a class-based view inheriting
    Django''s `TemplateView` from the `django.views.generic` module. The class attribute
    `template_name` defines the template to render when the view is invoked. For the
    template, we add an HTML file to our `templates` folder with the following content:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`HomePage` 是一个继承自 `django.views.generic` 模块的 Django `TemplateView`
    的基于类的视图。类属性 `template_name` 定义了在视图被调用时要渲染的模板。对于模板，我们在 `templates` 文件夹中添加了一个包含以下内容的
    HTML 文件：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is a very basic example of class-based views, which will be explored further
    in *Chapter 11*, *Advanced Templating and Class-Based Views*. The major advantage
    of using class-based views is that fewer lines of code need to be used to implement
    the same functionality as compared to function-based views. Also, by inheriting
    Django's generic views, we can keep the code concise and avoid the duplication
    of code. However, a disadvantage of class-based views is that the code is often
    less readable for someone new to Django, which means that learning about it is
    usually a longer process, as compared to function-based views.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基于类的视图的非常基础的例子，将在第 11 章 *高级模板和基于类的视图* 中进一步探讨。使用基于类的视图的主要优势是，与基于函数的视图相比，实现相同功能所需的代码行数更少。此外，通过继承
    Django 的通用视图，我们可以使代码更加简洁，避免代码重复。然而，基于类的视图的一个缺点是，对于 Django 新手来说，代码通常不太易读，这意味着学习它通常是一个更长的过程，与基于函数的视图相比。
- en: URL Configuration
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: URL 配置
- en: 'Django views cannot work on their own in a web application. When a web request
    is made to the application, Django''s URL configuration takes care of routing
    the request to the appropriate view function to process the request. A typical
    URL configuration in the `urls.py` file in Django looks like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Django 视图不能独立在 Web 应用程序中工作。当向应用程序发起 Web 请求时，Django 的 URL 配置负责将请求路由到适当的视图函数以处理请求。Django
    中 `urls.py` 文件中的典型 URL 配置如下所示：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `urlpatterns` is the variable defining the list of URL paths, and `'url-path/'`
    defines the path to match.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`urlpatterns` 是定义 URL 路径列表的变量，`'url-path/'` 定义了要匹配的路径。
- en: '`views.my_view` is the view function to invoke when there is a URL match, and
    `name=''my-view''` is the name of the view function used to refer to the view.
    There may be a situation wherein, elsewhere in the application, we want to get
    the URL of this view. We wouldn''t want to hardcode the value, as it would then
    have to be specified twice in the codebase. Instead, we can access the URL by
    using the name of the view, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`views.my_view` 是在 URL 匹配时调用的视图函数，`name=''my-view''` 是用于引用视图的视图函数的名称。可能存在这样的情况，在应用程序的其他地方，我们想要获取这个视图的
    URL。我们不想硬编码这个值，因为这会导致在代码库中需要指定两次。相反，我们可以通过使用视图的名称来访问 URL，如下所示：'
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If needed, we can also use a regular expression in a URL path to match string
    patterns using `re_path()`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，我们还可以在 URL 路径中使用正则表达式，通过 `re_path()` 匹配字符串模式：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, `name` refers to the pattern name, which can be any Python regular expression
    pattern, and this needs to be matched before calling the defined view function.
    You can also pass parameters from the URL into the view itself, for example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`name` 指的是模式名称，它可以是指定的任何 Python 正则表达式模式，并且在调用定义的视图函数之前需要匹配。你也可以将参数从 URL
    传递到视图本身，例如：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding example, `<int:id>` tells Django to look for URLs that contain
    an integer at this position in the string, and to assign the value of that integer
    to the `id` argument. This means that if the user navigates to `/url-path/14/`,
    the `id=14` keyword argument is passed to the view. This is often useful when
    a view needs to look up a specific object in the database and return corresponding
    data. For example, suppose we had a `User` model, and we wanted the view to display
    the user's name.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，`<int:id>` 告诉 Django 查找字符串中此位置的整数 URL，并将该整数的值分配给 `id` 参数。这意味着如果用户导航到
    `/url-path/14/`，则将 `id=14` 关键字参数传递给视图。这在视图需要查找数据库中的特定对象并返回相应数据时非常有用。例如，假设我们有一个
    `User` 模型，我们希望视图显示用户的姓名。
- en: 'The view could be written as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 视图可以编写如下：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When the user accesses `/url-path/14/`, the preceding view is called, and the
    argument `id=14` is passed into the function.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户访问 `/url-path/14/` 时，调用前面的视图，并将 `id=14` 参数传递给函数。
- en: 'Here is the typical workflow when a URL such as `http://0.0.0.0:8000/url-path/`
    is invoked using a web browser:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用网络浏览器调用类似于 `http://0.0.0.0:8000/url-path/` 的 URL 时，这是典型的流程：
- en: 'An HTTP request would be made to the running application for the URL path.
    Upon receiving the request, it reaches for the `ROOT_URLCONF` setting present
    in the `settings.py` file:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将对运行中的应用程序的 URL 路径发起 HTTP 请求。在收到请求后，它会查找 `settings.py` 文件中存在的 `ROOT_URLCONF`
    设置：
- en: '[PRE8]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This determines the URL configuration file to be used first. In this case, it
    is the URL file present in the project directory `project_name/urls.py`.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这确定了首先使用的 URL 配置文件。在这种情况下，它是项目目录 `project_name/urls.py` 中存在的 URL 文件。
- en: Next, Django goes through the list named `urlpatterns`, and once it matches
    the `url-path/` with the path present in the URL `http://0.0.0.0:8000/url-path/`,
    it invokes the corresponding view function.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，Django 会遍历名为 `urlpatterns` 的列表，一旦它与 URL `http://0.0.0.0:8000/url-path/`
    中的路径匹配，它就会调用相应的视图函数。
- en: URL configuration is sometimes also referred to as URL conf or URL mapping,
    and these terms are often used interchangeably. To understand views and URL mapping
    better, let's start with a simple exercise.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: URL 配置有时也被称为 URL conf 或 URL 映射，这些术语通常可以互换使用。为了更好地理解视图和 URL 映射，让我们从简单的练习开始。
- en: 'Exercise 3.01: Implementing a Simple Function-Based View'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.01：实现基于函数的简单视图
- en: 'In this exercise, we will write a very basic function-based view and use the
    associated URL configuration to display the message `Welcome to Bookr!` in a web
    browser. We will also tell the user how many books we have in the database:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将编写一个非常基本的基于函数的视图，并使用相关的 URL 配置在浏览器中显示消息 `Welcome to Bookr!`。我们还将告诉用户我们数据库中有多少本书：
- en: 'First, ensure that `ROOT_URLCONF` in `bookr/settings.py` is pointing to the
    project''s URL file by adding in the following command:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，确保 `bookr/settings.py` 中的 `ROOT_URLCONF` 指向项目的 URL 文件，通过添加以下命令：
- en: '[PRE9]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open the `bookr/reviews/views.py` file and add the following code snippet:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `bookr/reviews/views.py` 文件并添加以下代码片段：
- en: '[PRE10]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: First, we import the `HttpResponse` class from the `django.http` module. Next,
    we define the `welcome_view` function, which can display the message `Welcome
    to Bookr!` in a web browser. The request object is a function parameter that carries
    the HTTP `request` object. The next line defines the `message` variable, which
    contains HTML that displays the header, followed by a line that counts the number
    of books available in the database.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们从 `django.http` 模块导入 `HttpResponse` 类。接下来，我们定义 `welcome_view` 函数，该函数可以在浏览器中显示消息
    `Welcome to Bookr!`。请求对象是一个函数参数，它携带 HTTP `request` 对象。下一行定义了 `message` 变量，它包含显示标题的
    HTML，然后是一行统计数据库中可用的书籍数量。
- en: In the last line, we return an `HttpResponse` object with the string associated
    with the message variable. When the `welcome_view` view function is called, it
    will display the message `Welcome to Bookr! 2 Books and counting` in the web browser.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在最后一行，我们返回一个与消息变量关联的 `HttpResponse` 对象。当调用 `welcome_view` 视图函数时，它将在浏览器中显示消息
    `Welcome to Bookr! 2 Books and counting`。
- en: 'Now, create the URL mapping to call the newly created view function. Open the
    project URL file, `bookr/urls.py`, and add the list of `urlpatterns` as follows:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建URL映射以调用新创建的视图函数。打开项目URL文件，`bookr/urls.py`，并按照以下方式添加`urlpatterns`列表：
- en: '[PRE11]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first line in the list of `urlpatterns`, that is, `path('admin/', admin.site.urls)`
    routes to the admin URLs if `admin/` is present in the URL path (for example,
    `http://0.0.0.0:8000/admin`).
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`urlpatterns`列表中的第一行，即`path(''admin/'', admin.site.urls)`，如果URL路径中存在`admin/`，则路由到管理URL（例如，`http://0.0.0.0:8000/admin`）。'
- en: Similarly, consider the second line, `path('', include('reviews.urls'))`. Here,
    the path mentioned is an empty string, `''`. If the URL does not have any specific
    path after `http://hostname:port-number/` (for example, `http://0.0.0.0:8000/`),
    it includes the `urlpatterns` present in `review.urls`.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似地，考虑第二行，`path('', include('reviews.urls'))`。在这里，提到的路径是一个空字符串`''`。如果URL在`http://hostname:port-number/`（例如，`http://0.0.0.0:8000/`）之后没有特定的路径，它将包含`review.urls`中存在的`urlpatterns`。
- en: The `include` function is a shortcut that allows you to combine URL configurations.
    It is common to keep one URL configuration per application in your Django project.
    Here, we've created a separate URL configuration for the `reviews` app and have
    added it to our project-level URL configuration.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`include`函数是一个快捷方式，允许您组合URL配置。在您的Django项目中，通常每个应用程序都保留一个URL配置。在这里，我们为`reviews`应用程序创建了一个单独的URL配置，并将其添加到我们的项目级URL配置中。'
- en: 'Since we do not have the URL module `reviews.urls` yet, create a file called
    `bookr/reviews/urls.py`, and add the following lines of code:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们还没有`reviews.urls` URL模块，创建一个名为`bookr/reviews/urls.py`的文件，并添加以下代码行：
- en: '[PRE12]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we have used an empty string again for the URL path. So, when the URL
    `http://0.0.0.0:8000/` is invoked, after getting routed from `bookr/urls.py` into
    `bookr/reviews/urls.py`, this pattern invokes the `welcome_view` view function.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们再次使用了空字符串作为URL路径。因此，当URL `http://0.0.0.0:8000/`被调用时，从`bookr/urls.py`路由到`bookr/reviews/urls.py`后，这个模式将调用`welcome_view`视图函数。
- en: 'After making changes to the two files, we have the necessary URL configuration
    ready to call the `welcome_view` view. Now, start the Django server with `python
    manage.py runserver` and type in `http://0.0.0.0:8000` or `http://127.0.0.1:8000`
    in your web browser. You should be able to see the message `Welcome to Bookr!`:![Figure
    3.1: Displaying "Welcome to Bookr!" and the number of books on the home page'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对两个文件进行修改后，我们已经准备好了必要的URL配置，以便调用`welcome_view`视图。现在，使用`python manage.py runserver`启动Django服务器，并在您的网页浏览器中输入`http://0.0.0.0:8000`或`http://127.0.0.1:8000`。您应该能看到消息`欢迎使用Bookr!`：![图3.1：显示“欢迎使用Bookr!”和主页上的书籍数量
- en: '](img/B15509_03_01.jpg)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15509_03_01.jpg)'
- en: 'Figure 3.1: Displaying "Welcome to Bookr!" and the number of books on the home
    page'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1：显示“欢迎使用Bookr!”和主页上的书籍数量
- en: Note
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If there is no URL match, Django invokes error handling, such as displaying
    a `404 Page not found` message or something similar.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有URL匹配，Django将调用错误处理，例如显示`404页面未找到`消息或类似的内容。
- en: In this exercise, we learned how to write a basic view function and do the associated
    URL mapping. We have created a web page that displays a simple message to the
    user and reports how many books are currently in our database.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们学习了如何编写基本的视图函数和相关的URL映射。我们创建了一个网页，向用户显示一条简单的消息，并报告我们数据库中当前有多少本书。
- en: However, the astute reader will have noticed that it doesn't look very nice
    to have HTML code sitting inside our Python function as in the preceding example.
    As our views get bigger, this will become even more unsustainable. Therefore,
    we now turn our attention to where our HTML code is supposed to be – inside templates.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，细心的读者会注意到，像前面的例子那样，将HTML代码放在我们的Python函数中看起来并不美观。随着视图变大，这将会变得更加不可持续。因此，我们现在将注意力转向HTML代码应该所在的地方——在模板中。
- en: Templates
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板
- en: 'In *Exercise 3.01*, *Implementing a Simple Function-Based View*, we saw how
    to create a view, do the URL mapping, and display a message in the browser. But
    if you recall, we hardcoded the HTML message `Welcome to Bookr!` in the view function
    itself and returned an `HttpResponse` object, as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在*练习3.01*，*实现基于简单函数的视图*中，我们看到了如何创建视图，进行URL映射，并在浏览器中显示消息。但如果你还记得，我们在视图函数本身中硬编码了HTML消息`欢迎使用Bookr!`，并返回了一个`HttpResponse`对象，如下所示：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Hardcoding of HTML inside Python modules is not a good practice, because as
    the content to be rendered in a web page increases, so does the amount of HTML
    code we need to write for it. Having a lot of HTML code among Python code can
    make the code hard to read and maintain in the long run.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python模块中硬编码HTML不是一种好的做法，因为随着要在网页中渲染的内容增加，我们需要为其编写的HTML代码量也会增加。在Python代码中包含大量的HTML代码可能会使代码在长期内难以阅读和维护。
- en: For this reason, Django templates provide us with a better way to write and
    manage HTML templates. Django's templates not only work with static HTML content
    but also dynamic HTML templates.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Django模板为我们提供了一种更好的方式来编写和管理HTML模板。Django的模板不仅与静态HTML内容一起工作，还与动态HTML模板一起工作。
- en: 'Django''s template configuration is done in the `TEMPLATES` variable present
    in the `settings.py` file. This is how the default configuration looks:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Django的模板配置是在`settings.py`文件中存在的`TEMPLATES`变量中完成的。这是默认配置的外观：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s go through each keyword present in the preceding snippet:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一分析前面代码片段中出现的每个关键字：
- en: '`''BACKEND'': ''django.template.backends.django.DjangoTemplates''`: This refers
    to the template engine to be used. A template engine is an API used by Django
    to work with HTML templates. Django is built with Jinja2 and the `DjangoTemplates`
    engine. The default configuration is the `DjangoTemplates` engine and Django template
    language. However, this can be changed to use a different one if required, such
    as Jinja2 or any other third-party template engine. For our Bookr application
    though, we will leave this configuration as it is.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''BACKEND'': ''django.template.backends.django.DjangoTemplates''`：这指的是要使用的模板引擎。模板引擎是Django用来与HTML模板工作的API。Django是用Jinja2和`DjangoTemplates`引擎构建的。默认配置是`DjangoTemplates`引擎和Django模板语言。然而，如果需要，这可以更改为使用不同的一个，例如Jinja2或任何其他第三方模板引擎。但是，对于我们的Bookr应用程序，我们将保持这个配置不变。'
- en: '`''DIRS'': []`: This refers to the list of directories where Django searches
    for the templates in the given order.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''DIRS'': []`：这指的是Django在给定顺序中搜索模板的目录列表。'
- en: '`''APP_DIRS'': True`: This tells the Django template engine whether it should
    look for templates in the installed apps defined under `INSTALLED_APPS` in the
    `settings.py` file. The default option for this is `True`.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''APP_DIRS'': True`：这告诉Django模板引擎是否应该在`settings.py`文件中定义的`INSTALLED_APPS`下安装的应用中查找模板。这个选项的默认值是`True`。'
- en: '`''OPTIONS''`: This is a dictionary containing template engine-specific settings.
    Inside this dictionary, there is a default list of context processors, which helps
    the Python code to interact with templates to create and render dynamic HTML templates.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''OPTIONS''`：这是一个包含模板引擎特定设置的字典。在这个字典中，有一个默认的上下文处理器列表，它帮助Python代码与模板交互以创建和渲染动态HTML模板。'
- en: 'The current default settings are mostly fine for our purposes. However, in
    the next exercise, we will create a new directory for our templates, and we will
    need to specify the location of this folder. For example, if we have a directory
    called `my_templates`, we need to specify its location by adding it to the `TEMPLATES`
    settings as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的默认设置对于我们来说大多数情况下都是合适的。然而，在下一个练习中，我们将为我们的模板创建一个新的目录，并且我们需要指定这个文件夹的位置。例如，如果我们有一个名为`my_templates`的目录，我们需要通过将其添加到`TEMPLATES`设置中来指定其位置，如下所示：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`BASE_DIR` is the directory path to the project folder. This is defined in
    the `settings.py` file. The `os.path.join()` method joins the project directory
    with the `templates` directory, returning the full path for the templates directory.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`BASE_DIR`是项目文件夹的目录路径。这定义在`settings.py`文件中。`os.path.join()`方法将项目目录与`templates`目录连接起来，返回模板目录的完整路径。'
- en: 'Exercise 3.02: Using Templates to Display a Greeting Message'
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.02：使用模板显示问候消息
- en: 'In this exercise, we will create our first Django template, and, just as we
    did in the previous exercise, we will display the `Welcome to Bookr!` message
    using the templates:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建我们的第一个Django模板，就像我们在上一个练习中所做的那样，我们将使用模板显示`Welcome to Bookr!`消息：
- en: 'Create a directory called `templates` in the `bookr` project directory and
    inside it, create a file called `base.html`. The directory structure should look
    like *Figure 3.2*:![Figure 3.2: Directory structure for bookr'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`bookr`项目目录下创建一个名为`templates`的目录，并在其中创建一个名为`base.html`的文件。目录结构应类似于*图3.2*：![图3.2:
    bookr的目录结构'
- en: '](img/B15509_03_02.jpg)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15509_03_02.jpg)'
- en: 'Figure 3.2: Directory structure for bookr'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图3.2: bookr的目录结构'
- en: Note
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: When the default configuration is used, that is when `DIRS` is an empty list,
    Django searches for templates present only in the app folders' `template` directory
    (the `reviews/templates` folder in the case of a book review application). Since
    we included the new template directory in the main project directory, Django's
    template engine would not be able to find the directory unless the directory is
    included in the `'DIRS'` list.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用默认配置时，即`DIRS`为空列表时，Django只会在应用程序文件夹的`template`目录中搜索模板（在书评应用程序的情况下是`reviews/templates`文件夹）。由于我们将新的模板目录包含在主项目目录中，除非将目录包含在`DIRS`列表中，否则Django的模板引擎将无法找到该目录。
- en: 'Add the folder to the `TEMPLATES` settings:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件夹添加到`TEMPLATES`设置中：
- en: '[PRE16]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the following lines of code into the `base.html` file:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码行添加到`base.html`文件中：
- en: '[PRE17]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is simple HTML that displays the message `Welcome to Bookr!` in the header.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这只是一个简单的HTML，用于在页眉中显示消息`欢迎使用Bookr!`。
- en: 'Modify the code inside `bookr/reviews/views.py` so that it looks as follows:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`bookr/reviews/views.py`中的代码，使其如下所示：
- en: '[PRE18]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Since we have already configured the `'templates'` directory in the `TEMPLATES`
    configuration, `base.html` is available for use for the template engine. The code
    renders the file `base.html` using the imported `render` method from the `django.shortcuts`
    module.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们已经在`TEMPLATES`配置中配置了`'templates'`目录，因此`base.html`可用于模板引擎。代码使用从`django.shortcuts`模块导入的`render`方法渲染文件`base.html`。
- en: 'Save the files, run `python manage.py runserver`, and open the `http://0.0.0.0:8000/`
    or `http://127.0.0.1:8000/` URL to check the newly added template loading in the
    browser:![Figure 3.3: Displaying "Welcome to Bookr!" on the home page'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件，运行`python manage.py runserver`，然后打开`http://0.0.0.0:8000/`或`http://127.0.0.1:8000/`
    URL以检查浏览器中新添加的模板加载情况：![图3.3：在主页上显示“欢迎使用Bookr!”]
- en: '](img/B15509_03_03.jpg)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15509_03_03.jpg)'
- en: 'Figure 3.3: Displaying "Welcome to Bookr!" on the home page'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3：在主页上显示“欢迎使用Bookr!”
- en: In this exercise, we created an HTML template and used Django templates and
    views to return the message `Welcome to Bookr!`. Next, we will learn about the
    Django template language, which can be used to render the application's data along
    with HTML templates.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们创建了一个HTML模板，并使用Django模板和视图返回消息`欢迎使用Bookr!`。接下来，我们将学习Django模板语言，它可以用来渲染应用程序的数据以及HTML模板。
- en: Django Template Language
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django模板语言
- en: Django templates not only return static HTML templates but can also add dynamic
    application data while generating the templates. Along with data, we can also
    include some programmatic elements in the templates. All of these put together
    form the basics of **Django's template language**. This section looks at some
    of the basic parts of the Django template language.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Django模板不仅返回静态HTML模板，还可以在生成模板时添加动态应用程序数据。除了数据，我们还可以在模板中包含一些程序性元素。所有这些加在一起构成了**Django模板语言**的基础。本节将探讨Django模板语言的一些基本部分。
- en: Template Variables
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模板变量
- en: 'A template variable is represented in between two curly braces, as shown here:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 模板变量用两个花括号表示，如下所示：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When this is present in the template, the value carried by the variables will
    be replaced in the template. Template variables help in adding the application''s
    data into the templates:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当模板中存在此内容时，变量的值将在模板中被替换。模板变量有助于将应用程序的数据添加到模板中：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Template Tags
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模板标签
- en: 'A tag is similar to a programmatic control flow, such as an `if` condition
    or a `for` loop. A tag is represented between two curly braces and percentage
    signs, as shown. Here is an example of a `for` loop iterating over a list using
    template tags:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 标签类似于程序性控制流，例如`if`条件或`for`循环。标签用两个花括号和百分号表示。以下是一个使用模板标签遍历列表的`for`循环示例：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Unlike Python programming, we also add the end of the control flow by adding
    the `end` tag, such as `{% endfor %}`. This can be used along with template variables
    to display the elements in the list, as shown here:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与Python编程不同，我们通过添加`end`标签来添加控制流的结束，例如`{% endfor %}`。这可以与模板变量一起使用，以显示列表中的元素，如下所示：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Comments
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: 'Comments in the Django template language can be written as shown here; anything
    in-between `{% comment %}` and `{% endcomment %}` will be commented out:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Django模板语言中的注释可以按照以下方式编写；在`{% comment %}`和`{% endcomment %}`之间的任何内容都将被注释掉：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Filters
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过滤器
- en: 'Filters can be used to modify a variable to represent it in a different format.
    The syntax for a filter is a variable separated from the filter name using a pipe
    (`|`) symbol:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器可以用来修改一个变量，以不同的格式表示它。过滤器的语法是使用管道（`|`）符号将变量与过滤器名称分开：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here are some examples of built-in filters:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些内置过滤器的示例：
- en: '`{{ variable|lower }}`: This converts the variable string into lowercase.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{{ variable|lower }}`：这会将变量字符串转换为小写。'
- en: '`{{ variable|title}}`: This converts the first letter of every word into uppercase.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{{ variable|title}}`：这会将每个单词的首字母转换为大写。'
- en: Let's use the concepts we have learned up till now to develop the book review application.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用到目前为止学到的概念来开发书评应用。
- en: 'Exercise 3.03: Displaying a List of Books and Reviews'
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.03：显示书籍和评论列表
- en: 'In this exercise, we will create a web page that can display a list of all
    books, their ratings, and the number of reviews present in the book review application.
    For this, we will be using some features of the Django template language such
    as variables and template tags to pass the book review application data into the
    templates to display meaningful data on the web page:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个可以显示所有书籍、它们的评分和书评应用中现有评论数量的网页。为此，我们将使用Django模板语言的一些功能，如变量和模板标签，将书评应用数据传递到模板中，以在网页上显示有意义的数据：
- en: 'Create a file called `utils.py` under `bookr/reviews/utils.py` and add the
    following code:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`bookr/reviews/utils.py`下创建一个名为`utils.py`的文件，并添加以下代码：
- en: '[PRE25]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This is a helper method that will be used to calculate the average rating of
    a book.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个将用于计算书籍平均评分的帮助方法。
- en: 'Remove all the code present inside `bookr/reviews/views.py` and add the following
    code to it:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`bookr/reviews/views.py`中现有的所有代码，并添加以下代码到其中：
- en: '[PRE26]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This is a view to display the list of books for the book review application.
    The first three lines import Django modules, model classes, and the helper method
    we just added.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个用于显示书评应用中书籍列表的视图。前五行导入Django模块、模型类和刚刚添加的帮助方法。
- en: Here, `books_list` is the view method. In this method, we start by querying
    the list of all books. Next, for every book, we calculate the average rating and
    the number of reviews posted. All this information for each book is appended to
    a list called `book_list` as a list of dictionaries. This list is then added to
    a dictionary named context and is passed to the render function.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`books_list`是视图方法。在这个方法中，我们首先查询所有书籍的列表。接下来，对于每一本书，我们计算平均评分和发布的评论数量。每本书的所有这些信息都作为字典列表附加到名为`book_list`的列表中。然后，这个列表被添加到名为context的字典中，并传递给渲染函数。
- en: The render function takes three parameters, the first one being the request
    object that was passed into the view, the second being the HTML template `books_list.html`,
    which will display the list of books, and the third is context, which we pass
    to the template.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染函数有三个参数，第一个是传递给视图的请求对象，第二个是HTML模板`books_list.html`，它将显示书籍列表，第三个是上下文，我们将其传递给模板。
- en: Since we have passed `book_list` as a part of the context, the template will
    be using this to render the list of books using template tags and template variables.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们已经将`book_list`作为上下文的一部分传递，因此模板将使用它来使用模板标签和模板变量渲染书籍列表。
- en: 'Create the `book_list.html` file in the path `bookr/reviews/templates/reviews/books_list.html`
    and add the following HTML code in the file:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在路径`bookr/reviews/templates/reviews/books_list.html`中创建名为`book_list.html`的文件，并在文件中添加以下HTML代码：
- en: '[PRE27]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This is a simple HTML template with template tags and variables iterating over
    `book_list` to display the list of books.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个简单的HTML模板，包含模板标签和变量，用于迭代`book_list`以显示书籍列表。
- en: 'In `bookr/reviews/urls.py`, add the following URL pattern to invoke the `books_list`
    view:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`bookr/reviews/urls.py`中，添加以下URL模式以调用`books_list`视图：
- en: '[PRE28]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This does the URL mapping for the `books_list` view function.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这为`books_list`视图函数执行URL映射。
- en: 'Save all the modified files and wait for the Django service to restart. Open
    `http://0.0.0.0:8000/books/` in the browser, and you should see something similar
    to *Figure 3.4*:![Figure 3.4: List of books present in the book review application'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有修改过的文件，等待Django服务重启。在浏览器中打开`http://0.0.0.0:8000/books/`，你应该会看到类似于*图3.4*的内容：![图3.4：书评应用中现有的书籍列表
- en: '](img/B15509_03_04.jpg)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15509_03_04.jpg)'
- en: 'Figure 3.4: List of books present in the book review application'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4：书评应用中现有的书籍列表
- en: In this exercise, we created a view function, created templates, and also did
    the URL mapping, which can display a list of all books present in the application.
    Although we were able to display a list of books using a single template, next,
    let's explore a bit about how to work with multiple templates in an application
    that has common or similar code.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们创建了一个视图函数，创建了模板，并进行了URL映射，可以显示应用中所有现有书籍的列表。虽然我们能够使用单个模板显示书籍列表，但接下来，让我们探讨一下如何在具有公共或相似代码的应用程序中处理多个模板。
- en: Template Inheritance
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板继承
- en: As we build the project, the number of templates will increase. It is highly
    probable that when we design the application, some of the pages will look similar
    and have common HTML code for certain features. Using template inheritance, we
    can inherit the common HTML code into other HTML files. This is similar to class
    inheritance in Python, where the parent class has all the common code, and the
    child class has those extras that are unique to the child's requirement.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们构建项目，模板的数量将会增加。在设计和应用时，某些页面可能会看起来相似，并且具有某些功能的公共HTML代码。使用模板继承，我们可以将公共HTML代码继承到其他HTML文件中。这类似于Python中的类继承，其中父类包含所有公共代码，而子类包含那些满足子类需求的独特代码。
- en: 'For example, let''s consider the following to be a parent template that is
    named `base.html`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们考虑以下内容为一个名为`base.html`的父模板：
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following is an example of a child template:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个子模板的示例：
- en: '[PRE30]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the preceding snippet, the line `{% extends ''base.html'' %}` extends the
    template from `base.html`, which is the parent template. After extending from
    the parent template, any HTML code in-between the block content will be displayed
    along with the parent template. Once the child template is rendered, here is how
    it looks in the browser:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，行`{% extends 'base.html' %}`扩展了来自`base.html`的模板，这是父模板。在从父模板扩展后，任何在块内容之间的HTML代码都将与父模板一起显示。一旦子模板被渲染，这就是它在浏览器中的样子：
- en: '![Figure 3.5: Greeting message after extending the base.html template'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.5：扩展base.html模板后的问候信息'
- en: '](img/B15509_03_05.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B15509_03_05.jpg]'
- en: 'Figure 3.5: Greeting message after extending the base.html template'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5：扩展base.html模板后的问候信息
- en: Template Styling with Bootstrap
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Bootstrap进行模板样式化
- en: We have seen how to display all the books using views, templates, and URL mapping.
    Although we were able to display all the information in the browser, it would
    be even better if we could add some styling and make the web page look better.
    For this, we can add a few elements of **Bootstrap**. Bootstrap is an open-source
    **Cascading Style Sheets** (**CSS**) framework that is particularly good for designing
    responsive pages that work across desktop and mobile browsers.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用视图、模板和URL映射来显示所有书籍。虽然我们能够在浏览器中显示所有信息，但如果我们能添加一些样式并使网页看起来更好，那就更好了。为此，我们可以添加一些**Bootstrap**元素。Bootstrap是一个开源的**层叠样式表**（**CSS**）框架，特别适合设计适用于桌面和移动浏览器的响应式页面。
- en: 'Using Bootstrap is simple. First, you need to add the Bootstrap CSS to your
    HTML. You can experiment yourself by creating a new file called `example.html`.
    Populate it with the following code and open it in a browser:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Bootstrap很简单。首先，你需要将Bootstrap CSS添加到你的HTML中。你可以通过创建一个名为`example.html`的新文件来自行实验。在文件中填充以下代码，并在浏览器中打开它：
- en: '[PRE31]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The Bootstrap CSS link in the preceding code adds the bootstrap CSS library
    to your page. This means that certain HTML element types and classes will inherit
    their styles from Bootstrap. For example, if you add the `btn-primary` class to
    the class of a button, the button will be rendered as blue with white text. Try
    adding the following between `<body>` and `</body>`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码中的Bootstrap CSS链接将bootstrap CSS库添加到你的页面中。这意味着某些HTML元素类型和类将继承其样式来自Bootstrap。例如，如果你将`btn-primary`类添加到按钮的类中，按钮将被渲染为蓝色带白色文字。尝试在`<body>`和`</body>`之间添加以下内容：
- en: '[PRE32]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You will see that the title and button are both styled nicely, using Bootstrap''s
    default styles:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到标题和按钮都被Bootstrap的默认样式优雅地样式化：
- en: '![Figure 3.6: Display after applying Bootstrap'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.6：应用Bootstrap后的显示效果'
- en: '](img/B15509_03_06.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B15509_03_06.jpg]'
- en: 'Figure 3.6: Display after applying Bootstrap'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6：应用Bootstrap后的显示效果
- en: 'This is because in the Bootstrap CSS code, it specifies the color of the `btn-primary`
    class with the following code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为在Bootstrap CSS代码中，它使用以下代码指定了`btn-primary`类的颜色：
- en: '[PRE33]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You can see that using third-party CSS libraries such as Bootstrap allows you
    to quickly create nicely styled components without needing to write too much CSS.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，使用像Bootstrap这样的第三方CSS库，你可以快速创建样式优美的组件，而不需要编写太多的CSS。
- en: Note
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'We recommend that you explore Bootstrap further with their tutorial here: [https://getbootstrap.com/docs/4.4/getting-started/introduction/](https://getbootstrap.com/docs/4.4/getting-started/introduction/).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议你进一步探索Bootstrap，请参考他们的教程：[https://getbootstrap.com/docs/4.4/getting-started/introduction/](https://getbootstrap.com/docs/4.4/getting-started/introduction/)。
- en: 'Exercise 3.04: Adding Template Inheritance and a Bootstrap Navigation Bar'
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.04：添加模板继承和Bootstrap导航栏
- en: 'In this exercise, we will use template inheritance to inherit the template
    elements from a base template and re-use them in the `book_list` template to display
    the list of books. We will also use certain elements of Bootstrap in the base
    HTML file to add a navigation bar to the top of our page. The bootstrap code for
    `base.html` was taken from [https://getbootstrap.com/docs/4.4/getting-started/introduction/](https://getbootstrap.com/docs/4.4/getting-started/introduction/)
    and [https://getbootstrap.com/docs/4.4/components/navbar/](https://getbootstrap.com/docs/4.4/components/navbar/):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用模板继承从基本模板继承模板元素，并在`book_list`模板中重新使用它们来显示图书列表。我们还将使用基本HTML文件中的某些Bootstrap元素，在页面顶部添加一个导航栏。`base.html`中的Bootstrap代码来自[https://getbootstrap.com/docs/4.4/getting-started/introduction/](https://getbootstrap.com/docs/4.4/getting-started/introduction/)和[https://getbootstrap.com/docs/4.4/components/navbar/](https://getbootstrap.com/docs/4.4/components/navbar/)：
- en: 'Open the `base.html` file from the location `bookr/templates/base.html`. Remove
    any existing code and replace it with the following code:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`bookr/templates/base.html`的位置打开`base.html`文件。删除任何现有的代码，并用以下代码替换：
- en: '[PRE34]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This is a `base.html` file with all the Bootstrap elements for styling and the
    navigation bar.
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个包含所有Bootstrap元素以进行样式化和导航栏的`base.html`文件。
- en: 'Next, open the template at `bookr/reviews/templates/reviews/books_list.html`,
    remove all the existing code, and replace it with the following code:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开位于`bookr/reviews/templates/reviews/books_list.html`的模板，删除所有现有的代码，并用以下代码替换：
- en: '[PRE35]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This template has been configured to inherit the `base.html` file and it has
    also been added with a few styling elements to display the list of books. The
    part of the template that helps in inheriting the `base.html` file is as follows:'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此模板已配置为继承`base.html`文件，并且还添加了一些样式元素来显示图书列表。帮助继承`base.html`文件的模板部分如下：
- en: '[PRE36]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'After adding the two new templates, open either of the URLs `http://0.0.0.0:8000/books/`
    or `http://127.0.0.1:8000/books/` in your web browser to see the books list page,
    which should now look neatly formatted:![Figure 3.7: Neatly formatted book list
    page'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加了两个新模板后，在您的网络浏览器中打开以下任一URL `http://0.0.0.0:8000/books/` 或 `http://127.0.0.1:8000/books/`，以查看图书列表页面，现在它应该看起来格式整洁：![图3.7：格式整洁的图书列表页面
- en: '](img/B15509_03_07.jpg)'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15509_03_07.jpg)'
- en: 'Figure 3.7: Neatly formatted book list page'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7：格式整洁的图书列表页面
- en: In this exercise, we added some styling into the application using Bootstrap
    and we also used template inheritance while we displayed the list of books from
    the book review application. So far, we have worked extensively on displaying
    all the books present in the application. In the next activity, you will display
    details and reviews of an individual book.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们使用Bootstrap在应用程序中添加了一些样式，并且在显示图书评论应用程序中的图书列表时，我们还使用了模板继承。到目前为止，我们已经广泛地工作了，以显示应用程序中所有存在的图书。在下一个活动中，你将显示单个图书的详细信息及评论。
- en: 'Activity 3.01: Implement the Book Details View'
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动三.01：实现图书详细信息视图
- en: 'In this activity, you will implement a new view, template, and URL mapping,
    to display these details of a book: title, publisher, publication date, and overall
    rating. In addition to these details, the page should also display all the review
    comments, specifying the name of the commenter and the dates on which the comments
    were written and (if applicable) modified. The following steps will help you complete
    this activity:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，你将实现一个新的视图、模板和URL映射，以显示以下图书的详细信息：标题、出版社、出版日期和总体评分。除了这些详细信息外，页面还应显示所有评论，指定评论者的姓名和评论被撰写及（如适用）修改的日期。以下步骤将帮助你完成这个活动：
- en: Create a book details endpoint that extends the base template.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个图书详细信息端点，它扩展了基本模板。
- en: Create a book details view that takes a specific book's primary key as the argument
    and returns an HTML page listing the book's details and any associated reviews.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个书籍详细视图，它接受特定书籍的主键作为参数，并返回一个HTML页面，列出书籍的详细信息以及任何相关的评论。
- en: Do the required URL mapping in `urls.py`. The book details view URL should be
    `http://0.0.0.0:8000/books/1/` (where `1` will represent the `ID` of the book
    being accessed). You can use the `get_object_or_404` method to retrieve the book
    with the given primary key.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `urls.py` 中进行所需的URL映射。书籍详细视图的URL应该是 `http://0.0.0.0:8000/books/1/`（其中 `1`
    将代表正在访问的书籍的 `ID`）。你可以使用 `get_object_or_404` 方法检索具有给定主键的书籍。
- en: Note
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The `get_object_or_404` function is a useful shortcut for retrieving an instance
    based on its primary key. You could also do this using the .`get()` method described
    in *Chapter 2*, *Models and Migrations*, `Book.objects.get(pk=pk)`. However, `get_object_or_404`
    has the added advantage of returning an `HTTP 404 Not Found` response if the object
    does not exist. If we simply use `get()` and someone attempts to access an object
    that does not exist, our Python code will hit an exception and return an `HTTP
    500 Server Error` response. This is undesirable because it looks as though our
    server has failed to handle the request correctly.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`get_object_or_404` 函数是一个用于根据其主键检索实例的有用快捷方式。你也可以使用*第2章*中描述的 .`get()` 方法，即 `Book.objects.get(pk=pk)`。然而，`get_object_or_404`
    有一个额外的优点，即如果对象不存在，它会返回一个 `HTTP 404 Not Found` 响应。如果我们仅仅使用 `get()`，并且有人尝试访问一个不存在的对象，我们的Python代码将引发异常，并返回一个
    `HTTP 500 Server Error` 响应。这是不可取的，因为它看起来好像我们的服务器未能正确处理请求。'
- en: 'At the end of the activity, you should be able to click the `Reviews` button
    on the book list page and get the detail view of the book. The detail view should
    have all the details displayed in the following screenshot:![Figure 3.8: Page
    displaying the book details'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 活动结束时，你应该能够点击书单页面上的“评论”按钮，并获取书籍的详细视图。详细视图应显示以下截图中的所有详细信息：![图3.8：显示书籍详细信息的页面
- en: '](img/B15509_03_08.jpg)'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15509_03_08.jpg)'
- en: 'Figure 3.8: Page displaying the book details'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8：显示书籍详细信息的页面
- en: Note
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to this activity can be found at [http://packt.live/2Nh1NTJ](http://packt.live/2Nh1NTJ).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 该活动的解决方案可在[http://packt.live/2Nh1NTJ](http://packt.live/2Nh1NTJ)找到。
- en: Summary
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered the core infrastructure required to handle an HTTP request
    to our website. The request is first mapped via URL patterns to an appropriate
    view. Parameters from the URL are also passed into the view to specify the object
    displayed on the page. The view is responsible for compiling any necessary information
    to display on the website, and then passes this dictionary through to a template
    that renders the information as HTML code that can be returned as a response to
    the user. We covered both class- and function-based views and learned about the
    Django template language and template inheritance. We created two new pages for
    the book review application, one displaying all the books present and the other
    being the book details view page. In the next chapter, we will learn about Django
    admin and superuser, registering models, and performing CRUD operations using
    the admin site.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了处理对我们的网站进行HTTP请求所需的核心基础设施。请求首先通过URL模式映射到适当的视图。URL中的参数也会传递到视图中，以指定页面上显示的对象。视图负责编译任何必要的信息以显示在网站上，然后将此字典传递给模板，该模板将信息渲染为HTML代码，可以作为对用户的响应返回。我们介绍了基于类和基于函数的视图，并学习了Django模板语言和模板继承。我们为书评应用程序创建了两个新页面，一个显示所有书籍，另一个是书籍详细视图页面。在下一章中，我们将学习Django管理后台和超级用户，注册模型，以及使用管理后台执行CRUD操作。
