- en: Data Extraction Using Web-Based APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基于Web的API进行数据提取
- en: Web-based APIs allow users to interact with information on the web. API deals
    directly with data that's in a formatted pattern easy to use and maintain. Some
    APIs also require user authentication before they can provide data to the user.
    This chapter will cover the use of Python and some web APIs to interact with,
    and extract data from, the available API. Generally, APIs provide data in an exchangeable
    document format, such as JSON, CSV, and XML.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Web的API允许用户与网络上的信息进行交互。API直接处理格式化模式易于使用和维护的数据。有些API在向用户提供数据之前还需要用户身份验证。本章将介绍使用Python和一些Web
    API与可用API进行交互和提取数据。通常，API以可交换的文档格式（如JSON、CSV和XML）提供数据。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to web APIs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web API简介
- en: Accessing web APIs using the Python programming language
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python编程语言访问Web API
- en: Processing and extracting data via web APIs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Web API处理和提取数据
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'A web browser (Google Chrome or Mozilla Firefox) is required for this chapter.
    We will be using the following Python libraries:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要使用Web浏览器（Google Chrome或Mozilla Firefox）。我们将使用以下Python库：
- en: '`requests`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requests`'
- en: '`json`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json`'
- en: '`collections`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collections`'
- en: If these libraries don't exist on your current Python setup, refer to [Chapter
    2](b9919ebf-2d5c-4721-aa76-5c1378262473.xhtml), *Python and the Web – Using urllib
    and Requests*, in the *Setting things up* section to learn how to download them.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些库在您当前的Python设置中不存在，请参考[第2章](b9919ebf-2d5c-4721-aa76-5c1378262473.xhtml)，*Python和Web-使用urllib和Requests*，在*设置事项*部分了解如何下载它们。
- en: The code files for this chapter are available in this book's GitHub repository: [https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter07](https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter07).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可在本书的GitHub存储库中找到：[https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter07](https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter07)。
- en: Introduction to web APIs
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web API简介
- en: '**A web-based application programming information**, or **web-based API**,
    is an interface provided by a website to return information for the request that''s
    received. A web API (or API) is actually a web service that''s provided by websites
    to users or third-party web applications or automated scripts in order to share
    and exchange information.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于Web的应用程序编程信息**或**基于Web的API**是网站提供的接口，用于返回接收到的请求的信息。Web API（或API）实际上是网站为用户或第三方Web应用程序或自动化脚本提供的Web服务，以便共享和交换信息。'
- en: Generally, this is a **user interface** (**UI**) that's processed via a web
    browser for retrieving certain information from requests that have been made to
    a website or web server. Websites with large amount of information of any type
    can provide a web API to their user, which facilitates information sharing.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这是通过Web浏览器处理的**用户界面**（UI），用于从已向网站或Web服务器发出的请求中检索特定信息。具有任何类型大量信息的网站可以为其用户提供Web
    API，以便进行信息共享。
- en: API in the field of software applications is known for its set of facilities,
    such as methods and libraries, which can be used to further enhance, build, or
    develop applications. This is also known as a developer API.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件应用领域，API以其一组设施（如方法和库）而闻名，可用于进一步增强、构建或开发应用程序。这也被称为开发者API。
- en: Web APIs are not dependent on any programming languages. They enable easy access
    to web-based information in a raw format, and usually return a structured response
    in JSON, XML, or CSV format.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Web API不依赖于任何编程语言。它们使得以原始格式轻松访问基于Web的信息，并通常以JSON、XML或CSV格式返回结构化响应。
- en: They work on the HTTP principle (request and response cycle), but accept only
    sets of a predefined format of requests and parameters to generate a response.
    In terms of security concerns, many APIs also provide authentication tools, such
    as an API key, which is required to make a request to a website.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 它们遵循HTTP原则（请求和响应循环），但只接受预定义格式的请求和参数集以生成响应。在安全方面，许多API还提供身份验证工具，如API密钥，这是向网站发出请求所必需的。
- en: REST and SOAP
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST和SOAP
- en: API is a service that's provided by web servers that are based on software architecture
    or principles. **Simple Object Access Protocol **(**SOAP**) and **Representational
    State Transfer** (**REST**)are methods for accessing web services. While REST
    is an architecture, SOAP is a protocol based on web standards. We will be dealing
    with the REST API in upcoming sections.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: API是由基于软件架构或原则的Web服务器提供的服务。**简单对象访问协议**（**SOAP**）和**表述状态转移**（**REST**）是访问Web服务的方法。虽然REST是一种架构，但SOAP是基于Web标准的协议。我们将在接下来的部分中处理REST
    API。
- en: REST
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST
- en: REST ([https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm](https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm)) is
    a style of software architecture based on a set of defining and addressing network
    principles. REST is a software architecture, not a set of standards. REST uses
    standard HTTP protocol and methods such as `GET`, `POST`, `PUT`, and `DELETE` to
    provide services. It is stateless, multilayered, and also supports caching.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: REST（[https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm](https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm)）是一种基于一组定义和解决网络原则的软件架构风格。REST是一种软件架构，而不是一组标准。REST使用标准的HTTP协议和方法，如`GET`、`POST`、`PUT`和`DELETE`来提供服务。它是无状态的、多层的，也支持缓存。
- en: Web APIs are generally classed as RESTful web services; they provide an interface
    to the user and other resources for communication. RESTful web services (REST
    APIs or web APIs) ([https://restfulapi.net/](https://restfulapi.net/)) is the
    service provided by the web for adapting to the REST architecture.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Web API通常被归类为RESTful Web服务；它们为用户和其他资源提供通信接口。RESTful Web服务（REST API或Web API）（[https://restfulapi.net/](https://restfulapi.net/)）是Web提供的适应REST架构的服务。
- en: Services that are provided via REST don't need to be adapted to the new standards,
    development, or frameworks. Most of the time, it will be using a GET request,
    along with query strings that have been issued to APIs, searching for their response.
    HTTP status codes ([https://restfulapi.net/http-status-codes/](https://restfulapi.net/http-status-codes/))
    (404, 200, 304) are often tracked to determine the response of an API. Responses
    can also be obtained in various formats, such as JSON, XML, and CSV.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过REST提供的服务无需适应新的标准、开发或框架。大多数情况下，它将使用GET请求，以及已发出到API的查询字符串，搜索其响应。通常会跟踪HTTP状态码（[https://restfulapi.net/http-status-codes/](https://restfulapi.net/http-status-codes/)）（404、200、304）以确定API的响应。响应也可以以JSON、XML和CSV等各种格式获取。
- en: In terms of choosing between REST and SOAP, REST is more easy and efficient
    when it comes to processing compared to SOAP, and is being provided to the public
    by a large number of websites.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择REST和SOAP之间，REST在处理方面比SOAP更容易和高效，并且被许多网站提供给公众。
- en: SOAP
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SOAP
- en: '**SOAP** ([https://www.w3.org/TR/soap/is](https://www.w3.org/TR/soap/is)) is
    a set of standards specified by W3C and also represents alternative to REST when
    it comes to web services. SOAP uses HTTP and **SMTP** (**Simple Mail Transfer
    Protocol**), and is used to exchange documents over the internet, as well as via
    remote procedures.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP（[https://www.w3.org/TR/soap/is](https://www.w3.org/TR/soap/is)）是由W3C指定的一组标准，也是Web服务中与REST相对应的选择。SOAP使用HTTP和SMTP（简单邮件传输协议），用于在互联网上交换文档，以及通过远程过程。
- en: SOAP uses XML as a messaging service and is also known as an XML-based protocol.
    SOAP requests contain XML documents (with an envelope and body) that describes
    the methods and parameters that are sent to a server. The server will execute
    the method that's received, along with parameters, and send an SOAP response back
    to the program initiating the request.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP使用XML作为消息服务，也被称为基于XML的协议。SOAP请求包含描述发送到服务器的方法和参数的XML文档（带有信封和正文）。服务器将执行接收到的方法，以及参数，并将SOAP响应发送回发起请求的程序。
- en: SOAP is highly extensible and includes built-in error handling. It also works
    with other protocols, such as SMTP. SOAP is also independent to platforms and
    programming languages, and is mostly implemented in distributed enterprise environments.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP具有高度的可扩展性，并包括内置的错误处理。它还与其他协议（如SMTP）一起工作。SOAP也独立于平台和编程语言，并且主要在分布式企业环境中实现。
- en: Benefits of web APIs
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web API的好处
- en: Day by day, information requirements are growing, along with their availability
    across the web. Information sources, their availability, facilities, and technologies
    to share and exchange have become a global demand. The API is one of the preferred
    data sources and can be used to retrieve data.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 信息需求与其在网络上的可用性一天比一天增长。信息来源、其可用性、设施和共享和交换技术已成为全球需求。API是首选的数据来源之一，可用于检索数据。
- en: API is not only a way of communicating with a user via a web browser – you can
    also use systems. APIs allow communication between systems and devices, such as
    mobiles, despite their underlying system or programming languages. Many mobile
    apps generate requests to certain APIs and display related information that has
    been retrieved from responses. APIs are not just a simple service for retrieving
    data; they are used to exchange and process information and even communicate between
    systems across different platforms and services.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: API不仅是通过Web浏览器与用户进行通信的一种方式-您还可以使用系统。API允许系统和设备之间的通信，例如移动设备，尽管它们的基础系统或编程语言不同。许多移动应用程序会向某些API发出请求，并显示从响应中检索到的相关信息。API不仅是用于检索数据的简单服务；它们用于交换和处理信息，甚至在不同平台和服务之间进行系统间通信。
- en: 'From a web scraping perspective, responses or data that''s available through
    APIs are preferred over data that''s retrieved using scraping scripts. This is
    due to the following reasons:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从网络抓取的角度来看，通过API可用的响应或数据优于使用抓取脚本检索的数据。这是由于以下原因：
- en: An API's returned data is completely specific to the requests being performed,
    along with the filters or parameters that have been applied to it.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API返回的数据完全特定于正在执行的请求，以及已应用于它的过滤器或参数。
- en: Tasks such as parsing HTML or XML using Python libraries, such as `BeautifulSoup`,
    `pyquery`*,* and `lxml`, isn't always required.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python库（如BeautifulSoup、pyquery和lxml）解析HTML或XML并不总是必需的。
- en: The format of the data is structured and easy to handle.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据的格式是结构化的，易于处理。
- en: Data cleaning and processing for final listings will be more easy or might not
    be required.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据清理和处理最终列表将更容易或可能不需要。
- en: There will be significant reductions in processing time (compared to coding,
    analyzing the web, and applying XPath and CSS selectors to retrieve data).
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与编码、分析网页并应用XPath和CSS选择器来检索数据相比，处理时间会显著减少。
- en: They are easy to process.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们易于处理。
- en: 'There are also certain factors to be considered before adapting completely
    to the web API from a scraping point of view, including the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在完全从抓取的角度转向Web API之前，还有一些因素需要考虑，包括以下内容：
- en: Not all websites provide users with access to web APIs.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并非所有网站都向用户提供访问Web API的权限。
- en: Responses from APIs are specific to the set of predefined parameters. This might
    restrict the exact requests based on requirements that can be made, and restrict
    the availability of data to be obtained immediately.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API的响应是特定于预定义参数集的。这可能限制基于需求可以进行的确切请求，并限制立即获取的数据的可用性。
- en: Responses that are returned are limited to a certain volume, such as the number
    of records returned per request and the maximum number of requests allowed.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回的响应受限于一定的数量，例如每个请求返回的记录数以及允许的最大请求数量。
- en: Although data will be available in a structured format, it can be distributed
    across key-value pairs, which might require some additional merging tasks.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管数据将以结构化格式可用，但它可能分布在键值对中，这可能需要一些额外的合并任务。
- en: Given these points, we can see that the web API is the preferred choice for
    obtaining information from websites.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这些观点，我们可以看到web API是从网站获取信息的首选选择。
- en: Accessing web API and data formats
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问web API和数据格式
- en: In this section, we will be exploring various APIs that are available on the
    web, send requests to them, and receive responses, before explaining how they
    work via the Python programming language.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨在web上可用的各种API，向它们发送请求并接收响应，然后解释它们如何通过Python编程语言工作。
- en: 'Let''s consider the following sample URL, `https://www.someexampledomain.com`.
    The API it provides comes with parameters, locators, and authentication. By using
    these, we can access the following resources:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下示例URL，`https://www.someexampledomain.com`。它提供的API带有参数，定位器和身份验证。通过使用这些，我们可以访问以下资源：
- en: '`https://api.someexampledomain.com `'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://api.someexampledomain.com `'
- en: '`https://api.someexampledomain.com/resource?key1=value1&key2=value2`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://api.someexampledomain.com/resource?key1=value1&key2=value2`'
- en: '`https://api.someexampledomain.com/resource?api_key=ACCESS_KEY&key1=value1&key2=value2`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://api.someexampledomain.com/resource?api_key=ACCESS_KEY&key1=value1&key2=value2`'
- en: '`https://api.someexampledomain.com/resource/v1/2019/01`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://api.someexampledomain.com/resource/v1/2019/01`'
- en: 'Parameters or collections of key-value pairs are actually sets of predefined
    variables that are provided by the web. Usually, the API provides some sort of
    documentation or basic guidelines regarding its usage, HTTP methods, available
    keys and types, or permitted values that the key can receive, along with other
    information on the features that are supported by the API, as shown in the following
    screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 参数或键值对的集合实际上是由web提供的预定义变量集。通常，API提供有关其用法、HTTP方法、可用键和类型或允许键接收的值的基本指南或文档，以及有关API支持的功能的其他信息，如下图所示：
- en: '![](assets/79440f5c-2a15-4d38-9fdd-7b7ccef19261.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/79440f5c-2a15-4d38-9fdd-7b7ccef19261.png)'
- en: API details and links from https://sunrise-sunset.org/api
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 来自https://sunrise-sunset.org/api的API详细信息和链接
- en: End users and systems can only use the API with the features and functions that
    the provider permits.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最终用户和系统只能使用提供者允许的API功能和功能。
- en: 'The following a number of actual API links and example calls that show the
    formats and parameters that are used in URLs:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些实际API链接和示例调用，显示了URL中使用的格式和参数：
- en: '[http://api.walmartlabs.com/v1/reviews/33093101?apiKey={apiKey}&lsPublisherId={Your
    LinkShare Publisher Id}&format=json](https://developer.walmartlabs.com/docs/read/Reviews_Api)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://api.walmartlabs.com/v1/reviews/33093101?apiKey={apiKey}&lsPublisherId={Your
    LinkShare Publisher Id}&format=json](https://developer.walmartlabs.com/docs/read/Reviews_Api)'
- en: '[https://api.nasa.gov/neo/rest/v1/feed?start_date=START_DATE&end_date=END_DATE&api_key=API_KEY](https://api.nasa.gov/api.html#NeoWS)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://api.nasa.gov/neo/rest/v1/feed?start_date=START_DATE&end_date=END_DATE&api_key=API_KEY](https://api.nasa.gov/api.html#NeoWS)'
- en: '[https://api.sunrise-sunset.org/json?lat=36.7201600&lng=-4.4203400&date=today](https://api.sunrise-sunset.org/json?lat=36.7201600&lng=-4.4203400&date=today)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://api.sunrise-sunset.org/json?lat=36.7201600&lng=-4.4203400&date=today](https://api.sunrise-sunset.org/json?lat=36.7201600&lng=-4.4203400&date=today)'
- en: '[https://api.twitter.com/1.1/search/tweets.json?q=nasa&result_type=popular](https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://api.twitter.com/1.1/search/tweets.json?q=nasa&result_type=popular](https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets)'
- en: '[http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo](http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo](http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo)'
- en: '[http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo](http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo](http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo)'
- en: '[https://api.nytimes.com/svc/mostpopular/v2/viewed/1.json?api-key=yourkey](https://api.nytimes.com/svc/mostpopular/v2/viewed/1.json?api-key=yourkey)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://api.nytimes.com/svc/mostpopular/v2/viewed/1.json?api-key=yourkey](https://api.nytimes.com/svc/mostpopular/v2/viewed/1.json?api-key=yourkey)'
- en: '[https://maps.googleapis.com/maps/api/staticmap?center=Brooklyn+Bridge,New+York,NY&zoom=13&size=600x300&maptype=roadmap
    markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7Clabel:C%7C40.718217,-73.998284&key=YOUR_API_KEY](https://developers.google.com/maps/documentation/maps-static/intro#quick_example)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://maps.googleapis.com/maps/api/staticmap?center=Brooklyn+Bridge,New+York,NY&zoom=13&size=600x300&maptype=roadmap
    markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7Clabel:C%7C40.718217,-73.998284&key=YOUR_API_KEY](https://developers.google.com/maps/documentation/maps-static/intro#quick_example)'
- en: Parameters such as `key`, `api_key`, `apiKey` and `api-key` are required for
    security and tracking measures and need to be obtained before you process any
    API requests.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 参数，如`key`，`api_key`，`apiKey`和`api-key`，是为了安全和跟踪措施而需要的，并且在处理任何API请求之前需要获得。
- en: The API links and example calls in this section are linked to the resources
    they are listed on. For example,[ https://api.twitter.com/1.1/search/tweets.json?q=nasa&result_type=popular](https://api.twitter.com/1.1/search/tweets.json?q=nasa&result_type=popular) is
    listed on [https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets](https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的API链接和示例调用与它们所列出的资源相关联。例如，[https://api.twitter.com/1.1/search/tweets.json?q=nasa&result_type=popular](https://api.twitter.com/1.1/search/tweets.json?q=nasa&result_type=popular)在[https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets](https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets)上列出。
- en: Making requests to the web API using a web browser
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用web浏览器向web API发出请求
- en: Obtaining information about the parameters to be applied through query strings
    and obtaining the API key, if required, is the preliminary step in gaining API
    access. Most of the public or free APIs are quite straightforward and easy to
    manage in comparison to developer APIs that are provided by Google, Twitter, and
    Facebook.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 获取通过查询字符串应用的参数信息和获取API密钥（如果需要）是获得API访问权限的初步步骤。与由Google、Twitter和Facebook提供的开发者API相比，大多数公共或免费API都非常简单易懂。
- en: API requests can be made by using a web browser. However, in this section, we
    will try to display some general cases that can be encountered while accessing
    APIs, while also exhibiting some important properties of the RESTful API.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: API请求可以通过Web浏览器进行。但是，在这一部分，我们将尝试展示访问API时可能遇到的一些常见情况，同时展示RESTful API的一些重要属性。
- en: Case 1 – accessing a simple API (request and response)
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例1 - 访问简单的API（请求和响应）
- en: In this section, we will be using the following URL: [https://api.sunrise-sunset.org/json?lat=27.717245&lng=85.323959&date=2019-03-04](https://api.sunrise-sunset.org/json?lat=27.717245&lng=85.323959&date=2019-03-04).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用以下URL：[https://api.sunrise-sunset.org/json?lat=27.717245&lng=85.323959&date=2019-03-04](https://api.sunrise-sunset.org/json?lat=27.717245&lng=85.323959&date=2019-03-04)。
- en: 'Let''s process a request through a simple API in order to obtain the sunrise
    and sunset timings (available in UTC) for Kathmandu, Nepal. Query strings require
    values for `lat` (latitude), `lng` (longitude), and `date` for the chosen location. As
    we can see in the following screenshot, the response that we obtained is in JSON
    format (formatted using a browser extension), and its a successful request was
    verified by using a browser-based developer tool with Request Method and HTTP
    Status Code (`200`, that is, `OK` or `Success`):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个简单的API处理一个请求，以获取尼泊尔加德满都的日出和日落时间（以UTC时间为准）。查询字符串需要为所选位置的`lat`（纬度）、`lng`（经度）和`date`提供值。如下面的截图所示，我们获得的响应是以JSON格式（使用浏览器扩展格式化）返回的，通过使用基于浏览器的开发者工具验证了成功的请求方法和HTTP状态码（`200`，即`OK`或`成功`）：
- en: '![](assets/54ee6161-e2db-4047-a9e0-a6278f6a6825.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/54ee6161-e2db-4047-a9e0-a6278f6a6825.png)'
- en: Response from https://api.sunrise-sunset.org/json?lat=27.717245&lng=85.323959&date=2019-03-04 with
    Status Code
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 来自[https://api.sunrise-sunset.org/json?lat=27.717245&lng=85.323959&date=2019-03-04](https://api.sunrise-sunset.org/json?lat=27.717245&lng=85.323959&date=2019-03-04)的响应状态码
- en: 'The response is returned in a raw format or JSON format, as shown in the following
    code. The JSON response, when obtained normally, is processed using the Python
    `json` library. In the following code, the API request has been processed using
    the `requests` library. `requests` provide various features for dealing with HTTP;
    for example, the HTTP status code can be obtained by using `status_code`. Headers
    are obtained by using `headers`. Here, we are interested in `status_code` and
    `headers`, and, in particular, `Content-Type`, so that we can plan further processing
    and the use of libraries that might be required:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 响应以原始格式或JSON格式返回，如下面的代码所示。当正常获取JSON响应时，可以使用Python的`json`库进行处理。在下面的代码中，API请求已经使用`requests`库进行处理。`requests`提供了处理HTTP的各种功能；例如，可以使用`status_code`获取HTTP状态码。可以使用`headers`获取头信息。在这里，我们对`status_code`和`headers`特别感兴趣，特别是`Content-Type`，以便我们可以计划进一步处理和可能需要使用的库：
- en: '[PRE0]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As we can see, `status_code`is `200` (that is, `OK`) and `Content-Type` is
    of the JSON type. This gives us confirmation that we can use JSON-related libraries
    to move forward. However, in this case, we are using the `json()` function from
    the `requests` library, which reduces our dependence on extra libraries and converts
    the response object into a `dict` object. With the `dict` we received, we can
    access the desired elements by using a `key:value` pair:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，`status_code`是`200`（即`OK`），`Content-Type`是JSON类型。这给了我们确认，我们可以使用与JSON相关的库继续前进。但是，在这种情况下，我们使用了`requests`库中的`json()`函数，这减少了我们对额外库的依赖，并将响应对象转换为`dict`对象。通过收到的`dict`，我们可以使用`key:value`对访问所需的元素：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Case 2 – demonstrating status codes and informative responses from the API
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例2 - 展示API的状态码和信息响应
- en: In this section, we will be using the following URL: [https://api.twitter.com/1.1/search/tweets.json?q=](https://api.twitter.com/1.1/search/tweets.json?q=).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用以下URL：[https://api.twitter.com/1.1/search/tweets.json?q=](https://api.twitter.com/1.1/search/tweets.json?q=)。
- en: In this section, we will be processing an API request from Twitter. The URL
    to be requested is [https://api.twitter.com/1.1/search/tweets.json?q=](https://api.twitter.com/1.1/search/tweets.json?q=).
    By using this URL, we can easily identify that the query string, `q`, is empty,
    and that the value that's expected by the Twitter API is not provided. The complete
    URL should have been something along the lines of [https://api.twitter.com/1.1/search/tweets.json?q=nasa&result_type=popular](https://api.twitter.com/1.1/search/tweets.json?q=nasa&result_type=popular).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将处理来自Twitter的API请求。要请求的URL是[https://api.twitter.com/1.1/search/tweets.json?q=](https://api.twitter.com/1.1/search/tweets.json?q=)。通过使用这个URL，我们可以很容易地确定查询字符串`q`是空的，Twitter
    API期望的值没有提供。完整的URL应该是类似于[https://api.twitter.com/1.1/search/tweets.json?q=nasa&result_type=popular](https://api.twitter.com/1.1/search/tweets.json?q=nasa&result_type=popular)。
- en: 'The response that was returned was for an incomplete API call, and can be seen
    in the following screenshot, along with the HTTP status code (`400` or `Bad Request`)
    and a message that was returned by the API stating errors with "message" : "Bad
    Authentication data". For more information on the Twitter API''s Search option,
    please refer to [https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets](https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的响应是不完整的API调用，如下面的截图所示，还有HTTP状态码（`400`或`Bad Request`）以及API返回的消息，指出了“message”：“Bad
    Authentication data”的错误。有关Twitter API的搜索选项的更多信息，请参阅[https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets](https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets)：
- en: '![](assets/f65a7397-c1e0-49bb-8491-7f0fa1d67053.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f65a7397-c1e0-49bb-8491-7f0fa1d67053.png)'
- en: Incomplete request made to Twitter API
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 向Twitter API发出的不完整请求
- en: The response that was returned by Twitter API is actually information, not an
    error. Such informative responses make the API more scalable and easy to debug
    when they're used by other resources. It's also an appreciated characteristic
    of RESTful web services. This kind of information can be easily overcome by deploying
    API parameters and other requirements.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter API返回的响应实际上是信息，而不是错误。这种信息性的响应使API在被其他资源使用时更具可伸缩性和易于调试。这也是RESTful web服务的一个受欢迎的特性。这种信息可以通过部署API参数和其他要求轻松地克服。
- en: 'The following code will make a request to Twitter with an empty query string
    and identify the responses:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将使用空查询字符串向Twitter发出请求并识别响应：
- en: '[PRE2]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code uses the `json` Python library to load the decoded `jsonResult` that
    was obtained by using the `loads()` function. We can also use `json()` from `requests`,
    as we did in case 1\. `jsonFinal` is now a Python dictionary object and can be
    explored so that we can find its `''key:value''`. The final output is as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码使用`json` Python库加载了使用`loads()`函数获得的解码`jsonResult`。我们也可以像在案例1中那样使用`requests`中的`json()`。`jsonFinal`现在是一个Python字典对象，可以被探索，以便我们可以找到它的`'key:value'`。最终输出如下：
- en: '[PRE3]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Case 3 – demonstrating RESTful API cache functionality
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例3 - 展示RESTful API缓存功能
- en: In this section, we will be using the following URL: [https://api.github.com/](https://api.github.com/).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用以下URL：[https://api.github.com/](https://api.github.com/)。
- en: 'GitHUb ([https://github.com/](https://github.com/)) is a place for developers
    and their code repositories. The GitHub API is quite famous among developers,
    all of which come from various programming backgrounds. As we can see in the following
    screenshot, the response is obtained in JSON. The request was a success since
    the HTTP status code that was returned was `200`, that is, `OK` or `Success`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: GitHUb（[https://github.com/](https://github.com/)）是开发人员及其代码存储库的地方。GitHub API在开发人员中非常有名，他们都来自不同的编程背景。正如我们在下面的截图中所看到的，响应是以JSON格式获得的。由于返回的HTTP状态码是`200`，即`OK`或`成功`，因此请求是成功的：
- en: '![](assets/0d2c1add-f32e-4612-85cb-40bced919ec5.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0d2c1add-f32e-4612-85cb-40bced919ec5.png)'
- en: Response from https://api.github.com with HTTP Status Code 200
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 来自https://api.github.com的响应，HTTP状态码为200
- en: As you can see, we made a basic call to [https://api.github.com](https://api.github.com).
    The content that was returned contains links for the API, along with some parameters
    to be supplied for specific calls, such as `{/gist_id}`, `{/target}`, and `{query}`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们对[https://api.github.com](https://api.github.com)进行了基本调用。返回的内容包含API的链接，以及一些参数供特定调用使用，例如`{/gist_id}`，`{/target}`和`{query}`。
- en: 'Let''s send a request to the API again, but this time without any changes or
    updates in the parameter values. The content that we will receive will be similar
    to the previous response, but there will be a difference in the HTTP `Status Code`;
    that is, we will get `304 Not Modified` in comparison to 200 `OK`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次向API发送请求，但这次参数值没有任何更改或更新。我们将收到的内容与之前的响应类似，但HTTP`状态码`将有所不同；也就是说，与200`OK`相比，我们将获得`304未修改`：
- en: '![](assets/0d428fad-bd13-4bcf-8561-05a4dd29ed89.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0d428fad-bd13-4bcf-8561-05a4dd29ed89.png)'
- en: HTTP Status code 304 for https://api.github.com
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: https://api.github.com的HTTP状态码304
- en: 'This HTTP status code (`304` or `Not Modified`) demonstrates REST''s caching
    functionality. Since the response doesn''t have any updates or updated content,
    the client-side caching functionality comes into play. This helps with processing
    time, as well as bandwidth time and usage. The cache is one of the important properties
    of RESTful web services. The following is the Python code revealing the cache
    property of the RESTful API, which was obtained by passing external headers that
    were supplied to the `headers` parameter while making a request with `requests.get()`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个HTTP状态码（`304`或`未修改`）展示了REST的缓存功能。由于响应没有任何更新或更新的内容，客户端缓存功能开始发挥作用。这有助于处理时间，以及带宽时间和使用。缓存是RESTful
    web服务的重要属性之一。以下是Python代码，显示了RESTful API的缓存属性，通过传递外部标头，这些标头被提供给`headers`参数，同时使用`requests.get()`发出请求获得：
- en: '[PRE4]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`requests` is used to call `url` twice in the code. We can also see that the
    second request has been supplied with `etag` for header information, that is, `If-None-Match`.
    This particular header checks for the response header that was obtained using
    the `ETag` key as an HTTP Response Header. `ETag` is used for tracking purposes
    and normally identifies the resources that exist. This exhibits the cache ability.
    For more information on `ETag`, please refer to [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`requests`在代码中两次调用`url`。我们还可以看到第二个请求已经提供了`etag`作为头信息，即`If-None-Match`。这个特定的头部检查使用`ETag`键作为HTTP响应头获得的响应头。`ETag`用于跟踪目的，通常标识存在的资源。这展示了缓存能力。有关`ETag`的更多信息，请参阅[https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag)。'
- en: '`ETag` is collected from `results.headers` and forwarded with second request
    that was made by obtaining HTTP `Status Code: 304`. The following code shows the
    output:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`ETag`是从`results.headers`中收集的，并且随着获得HTTP`状态码：304`的第二个请求一起转发。以下代码显示了输出：'
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this section, we have learned about various APIs, accessing them via the
    use of features, and demonstrated a number of important concepts that are relevant
    to web scraping methods. In the next section, we will be scraping data with the
    use of APIs.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经学习了各种API，通过使用功能访问它们，并演示了与网页抓取方法相关的一些重要概念。在下一节中，我们将使用API来抓取数据。
- en: Web scraping using APIs
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用API进行网页抓取
- en: In this section, we will be requesting APIs and collecting the required data
    through them. Technically, data that's obtained through an API isn't similar to
    performing a scraping activity since we can't only extract data that's required
    from the API and process it further.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将请求API并通过它们收集所需的数据。从技术上讲，通过API获取的数据并不类似于进行爬取活动，因为我们不能仅从API中提取所需的数据并进一步处理它。
- en: Example 1 – searching and collecting university names and URLs
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例1 - 搜索和收集大学名称和URL
- en: In this example, we will be using an API provided by HIPO ([https://hipolabs.com/](https://hipolabs.com/))
    to search for universities: [http://universities.hipolabs.com/search?name=Wales](http://universities.hipolabs.com/search?name=Wales).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用HIPO提供的API（[https://hipolabs.com/](https://hipolabs.com/)）来搜索大学：[http://universities.hipolabs.com/search?name=Wales](http://universities.hipolabs.com/search?name=Wales)。
- en: 'This API uses a query parameter called `name`, which will look for a university
    name. We will also provide an additional parameter, `country`, with country names
    such as United States, and United Kingdom. This API can be requested from the
    following URLs, while more information can be found at [https://github.com/hipo/university-domains-list](https://github.com/hipo/university-domains-list):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个API使用一个名为`name`的查询参数，它将寻找大学名称。我们还将提供一个额外的参数`country`，其中包括美国和英国等国家名称。可以从以下URL请求此API，更多信息可以在[https://github.com/hipo/university-domains-list](https://github.com/hipo/university-domains-list)找到：
- en: '[http://universities.hipolabs.com](http://universities.hipolabs.com)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://universities.hipolabs.com](http://universities.hipolabs.com)'
- en: '[http://universities.hipolabs.com/search?name=Wales](http://universities.hipolabs.com/search?name=Wales)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://universities.hipolabs.com/search?name=Wales](http://universities.hipolabs.com/search?name=Wales)'
- en: '[http://universities.hipolabs.com/search?name=Medicine&country=United Kingdom](http://universities.hipolabs.com/search?name=Medicine&country=United%20Kingdom)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://universities.hipolabs.com/search?name=Medicine&country=United Kingdom](http://universities.hipolabs.com/search?name=Medicine&country=United%20Kingdom)'
- en: 'Let''s import the required libraries and use the `readUrl()` function to request
    the API and return the JSON response, as shown in the following code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导入所需的库并使用`readUrl()`函数来请求API并返回JSON响应，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With the JSON response returned, the required values can be retrieved with
    the keys and index that we have found, as shown in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 通过返回的JSON响应，可以使用我们找到的键和索引检索所需的值，如下面的屏幕截图所示：
- en: '![](assets/3d7a222c-075d-4d78-9049-aa13a01f34cc.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3d7a222c-075d-4d78-9049-aa13a01f34cc.png)'
- en: JSON (formatted) obtained from the API
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 从API中获取的JSON（格式化）
- en: '`name` and `url` are traversed and appended to `dataSet`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`和`url`被遍历并附加到`dataSet`中：'
- en: '[PRE7]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The final output is as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最终输出如下：
- en: '[PRE8]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Example 2 – scraping information from GitHub events
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例2 - 从GitHub事件中获取信息
- en: In this example, we will be collecting information regarding `type` (type of
    event), `created_at` (date of event created), `id` (event identification code),
    and `repo` (repository name) across pages. We will be using the following URL: [https://api.github.com/events](https://api.github.com/events).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将收集关于`type`（事件类型）、`created_at`（事件创建日期）、`id`（事件标识代码）和`repo`（存储库名称）的信息。我们将使用以下URL：[https://api.github.com/events](https://api.github.com/events)。
- en: GitHub `Events` lists public activities that have been performed within the
    past 90 days. These events are provided in pages, with 30 items per page, and
    a maximum of 300 being shown. Various sections exist inside events, all of which
    reveal the description about the `actor`, `repo`, `org`, `created_at`, `type`,
    and more.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub“事件”列出了过去90天内执行的公共活动。这些事件以页面形式提供，每页30个项目，最多显示300个。事件中存在各种部分，所有这些部分都揭示了关于`actor`、`repo`、`org`、`created_at`、`type`等的描述。
- en: For more details, please refer to the following link: [https://developer.github.com/v3/activity/events/](https://developer.github.com/v3/activity/events/).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息，请参阅以下链接：[https://developer.github.com/v3/activity/events/](https://developer.github.com/v3/activity/events/)。
- en: 'Here is the code we will be using:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将要使用的代码：
- en: '[PRE9]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding code gives us the following output:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码给出了以下输出：
- en: '[PRE10]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `Counter` class from the `collections` Python module is used to obtain
    the individual count of elements from `eventTypes`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`collections` Python模块中的`Counter`类用于获取`eventTypes`中元素的个体计数：'
- en: '[PRE11]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: APIs provide several benefits, all of which we have covered in this chapter.
    RESTful web services are growing in demand and will contribute to data requests
    and responses in the future more than ever before. Structured, easy access, parameter-based
    filters make APIs more convenient to use, and are excellent at saving time.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: API提供了几个好处，我们在本章中都已经涵盖了。RESTful Web服务的需求正在增长，并且将来会比以往更多地促进数据请求和响应。结构化、易访问、基于参数的过滤器使API更方便使用，并且在节省时间方面表现出色。
- en: In the next chapter, we will be learning about Selenium and how to use it to
    scrape data from the web.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习Selenium以及如何使用它从网络上爬取数据。
- en: Further reading
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Fielding, Roy Thomas. *Architectural Styles and the Design of Network-based
    Software Architectures*. Doctoral dissertation, University of California, Irvine,
    2000
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fielding, Roy Thomas. *Architectural Styles and the Design of Network-based
    Software Architectures*. Doctoral dissertation, University of California, Irvine,
    2000
- en: REST: [https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm](https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm)
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST：[https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm](https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm)
- en: SOAP: [https://www.w3.org/TR/soap/](https://www.w3.org/TR/soap/)
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOAP：[https://www.w3.org/TR/soap/](https://www.w3.org/TR/soap/)
- en: A simple SOAP client: [https://www.ibm.com/developerworks/xml/library/x-soapcl/index.html](https://www.ibm.com/developerworks/xml/library/x-soapcl/index.html)
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个简单的SOAP客户端：[https://www.ibm.com/developerworks/xml/library/x-soapcl/index.html](https://www.ibm.com/developerworks/xml/library/x-soapcl/index.html)
- en: RESTful API HTTP Status Codes: [https://restfulapi.net/http-status-codes/](https://restfulapi.net/http-status-codes/)
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RESTful API HTTP状态码：[https://restfulapi.net/http-status-codes/](https://restfulapi.net/http-status-codes/)
- en: '304 Not Modified: What It Is and How to Fix It: [https://airbrake.io/blog/http-errors/304-not-modified](https://airbrake.io/blog/http-errors/304-not-modified)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 304 未修改：是什么以及如何修复它：[https://airbrake.io/blog/http-errors/304-not-modified](https://airbrake.io/blog/http-errors/304-not-modified)
- en: ETag: [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ETag：[https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag)
- en: Types of Numeric Data: [https://www.stat.berkeley.edu/~spector/extension/python/notes/node22.html](https://www.stat.berkeley.edu/~spector/extension/python/notes/node22.html)
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字数据类型：[https://www.stat.berkeley.edu/~spector/extension/python/notes/node22.html](https://www.stat.berkeley.edu/~spector/extension/python/notes/node22.html)
