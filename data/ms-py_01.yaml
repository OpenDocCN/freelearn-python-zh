- en: Chapter 1. Getting Started – One Environment per Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。入门-每个项目一个环境
- en: 'There is one aspect of the Python philosophy that always has been, and always
    will be, the most important in the entire language—readability, or Pythonic code.
    This book will help you master writing Python the way it was meant to be: readable,
    beautiful, explicit, and as simple as possible. In short, it will be Pythonic
    code. That is not to say that complicated subjects will not be covered. Naturally,
    they will, but whenever the philosophy of Python is at stake, you will be warned
    when and where the technique is justified.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python哲学的一个方面一直以来都是最重要的，也将永远如此——可读性，或者说Pythonic代码。这本书将帮助你掌握编写Python的方式：可读、美观、明确，尽可能简单。简而言之，它将是Pythonic代码。这并不是说复杂的主题不会被涵盖。当然会，但每当Python的哲学受到影响时，你将被警告何时何地使用这种技术是合理的。
- en: 'Most of the code within this book will function on both Python 2 and Python
    3, but the main target is Python 3\. There are three reasons for doing this:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大部分代码将在Python 2和Python 3上运行，但主要目标是Python 3。这样做有三个原因：
- en: Python 3 was released in 2008, which is a very long time in the rapidly changing
    software world. It's not a new thing anymore, it's stable, it's usable, and, most
    importantly, it's the future.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 3于2008年发布，这在快速变化的软件世界中已经是很长的时间了。它不再是新鲜事物，而是稳定的、可用的，最重要的是，它是未来。
- en: Development for Python 2 effectively stopped in 2009\. Certain features have
    been backported from Python 3 to Python 2, but any new development will be for
    Python 3 first.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 2的开发在2009年基本停止了。某些功能已经从Python 3回溯到Python 2，但任何新的开发都将首先针对Python 3。
- en: Python 3 has become mature. While I have to admit that Python 3.2 and older
    versions still had a few small issues that made it hard to write code that functions
    on both Python 2 and 3, Python 3.3 did improve greatly in that aspect, and I consider
    it mature. This is evidenced by the marginally modified syntax in Python 3.4 and
    3.5 and a lot of very useful features, which are covered in this book.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 3已经成熟。我必须承认，Python 3.2和更早版本仍存在一些小问题，这使得很难编写能在Python 2和3上运行的代码，但Python
    3.3在这方面有了很大的改进，我认为它已经成熟。这一点可以从Python 3.4和3.5中略有修改的语法以及许多非常有用的功能得到证实，这些都在本书中有所涵盖。
- en: To summarize, Python 3 is an improvement over Python 2\. I have been a skeptic
    for a very long time myself, but I do not see any reason not to use Python 3 for
    new projects, and even porting existing projects to Python 3 is generally possible
    with only minor changes. With cool new features such as `async with` in Python
    3.5, you will want to upgrade just to try it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，Python 3是对Python 2的改进。我自己也是长期的怀疑论者，但我没有看到不使用Python 3进行新项目的理由，甚至将现有项目迁移到Python
    3通常只需要进行一些小的更改。有了Python 3.5中的`async with`等新功能，你会想要升级来尝试一下。
- en: This first chapter will show you how to properly set up an environment, create
    a new isolated environment, and make sure you get similar results when running
    the same code on different machines. Most Python programmers are already using
    `virtualenv` to create virtual Python environments, but the `venv` command, introduced
    in Python 3.3, is a very nice alternative. It is essentially a clone of the `virtualenv`
    package but is slightly simpler and bundled with Python. While its usage is mostly
    analogous to `virtualenv`, there are a few changes that are interesting to know.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章将向你展示如何正确设置环境，创建一个新的隔离环境，并确保在不同的机器上运行相同代码时获得类似的结果。大多数Python程序员已经在使用`virtualenv`创建虚拟Python环境，但在Python
    3.3中引入的`venv`命令是一个非常好的替代方案。它本质上是`virtualenv`包的一个克隆，但稍微简单一些，并且与Python捆绑在一起。虽然它的使用方法大部分类似于`virtualenv`，但有一些有趣的变化值得知道。
- en: Secondly, we will discuss the `pip` command. The `pip` command is automatically
    installed when using `venv` through the `ensurepip` package, a package introduced
    in Python 3.4\. This package automatically bootstraps `pip` into an existing Python
    library while maintaining independent versions of Python and `pip`. Before Python
    3.4, `venv` came without `pip` and had to be installed manually.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们将讨论`pip`命令。使用`ensurepip`包通过`venv`自动安装`pip`命令，这是在Python 3.4中引入的一个包。这个包会在现有的Python库中自动引导`pip`，同时保持独立的Python和`pip`版本。在Python
    3.4之前，`venv`没有`pip`，需要手动安装。
- en: Finally, we will discuss how packages created with `distutils` can be installed.
    While pure Python packages are generally easy to install, it can get challenging
    when C modules are involved.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将讨论如何安装使用`distutils`创建的包。纯Python包通常很容易安装，但涉及C模块时可能会有挑战。
- en: 'In this chapter, the following topics are covered:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下主题：
- en: Creating a virtual Python environment using `venv`
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`venv`创建虚拟Python环境
- en: Bootstrapping pip using `ensurepip`
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ensurepip`引导pip的引导
- en: Installing packages based on `distutils` (C/C++) with `pip`
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`pip`基于`distutils`（C/C++）安装包
- en: Creating a virtual Python environment using venv
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用venv创建虚拟Python环境
- en: Most Python programmers are already be familiar with `venv` or `virtualenv`,
    but even if you're not, it's never too late to start using it. The `venv` module
    is designed to isolate your Python environments so that you can install packages
    specific to your current project without polluting your global namespace. For
    example, having a filename such as `sys.py` in your current directory can seriously
    break your code if you expect to have the standard Python `sys` library—your local
    sys libraries will be imported before the global one, effectively hiding the system
    library. In addition, because the packages are installed locally, you don't need
    system (root/administrator) access to install them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Python程序员可能已经熟悉`venv`或`virtualenv`，但即使你不熟悉，现在开始使用也不算晚。`venv`模块旨在隔离你的Python环境，这样你就可以安装特定于当前项目的包，而不会污染全局命名空间。此外，由于包是本地安装的，你不需要系统（root/administrator）访问权限来安装它们。
- en: The result is that you can make sure you have exactly the same version of a
    package on both your local development machine and production machines without
    interfering with other packages. For example, there are many Django packages around
    that require specific versions of the Django project. Using `venv`, you can easily
    install Django 1.4 for project A and Django 1.8 for project B without them ever
    knowing that there are different versions installed in other environments. By
    default, the environments are even configured in such a way that the global packages
    are not visible. The benefit of this is that to get an exact list of all installed
    packages within the environment, simply a `pip freeze` will suffice. The downside
    is that some of the heavier packages (for example, `numpy`) will have to be installed
    in every separate environment. Needless to say, which choice is the best for your
    project depends on the project. For most projects, I would keep the default setting
    of not having the global packages, but when messing around with projects that
    have lots of C/C++ extensions, it would be convenient to simply enable the global
    site packages. The reason is simple; if you do not have a compiler available,
    installing the package locally can be difficult, while the global install has
    an executable for Windows or an installable package for Linux/Unix available.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，您可以确保在本地开发机器和生产机器上具有完全相同版本的软件包，而不会干扰其他软件包。例如，有许多Django软件包需要Django项目的特定版本。使用`venv`，您可以轻松地为项目A安装Django
    1.4，为项目B安装Django 1.8，而它们永远不会知道其他环境中安装了不同的版本。默认情况下，甚至配置了这样的环境，以便全局软件包不可见。这样做的好处是，要获得环境中安装的所有软件包的确切列表，只需`pip
    freeze`即可。缺点是，一些较重的软件包（例如`numpy`）将必须在每个单独的环境中安装。不用说，哪种选择对您的项目最好取决于项目。对于大多数项目，我会保持默认设置，即不具有全局软件包，但是在处理具有大量C/C++扩展的项目时，简单地启用全局站点软件包会很方便。原因很简单；如果您没有编译器可用，安装软件包可能会很困难，而全局安装对于Windows有可执行文件，对于Linux/Unix有可安装软件包可用。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `venv` module ([https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html))
    can be seen as a slightly simplified version of the `virtualenv` tool ([https://virtualenv.pypa.io/](https://virtualenv.pypa.io/)),
    which has been bundled with Python since version 3.3 (refer to PEP 0405 -- Python
    Virtual Environments: [https://www.python.org/dev/peps/pep-0405/](https://www.python.org/dev/peps/pep-0405/)).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`venv`模块（[https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)）可以看作是`virtualenv`工具（[https://virtualenv.pypa.io/](https://virtualenv.pypa.io/)）的一个略微简化的版本，自Python
    3.3版本以来已经捆绑在一起（参见PEP 0405 -- Python虚拟环境：[https://www.python.org/dev/peps/pep-0405/](https://www.python.org/dev/peps/pep-0405/)）。'
- en: The `virtualenv` package can generally be used as a drop-in replacement for
    `venv`, which is especially relevant for older Python versions (below 3.3) that
    do not come bundled with `venv`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`virtualenv`包通常可以用作`venv`的替代品，特别是对于不捆绑`venv`的较旧的Python版本（3.3以下）来说，这一点尤为重要。'
- en: Creating your first venv
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建您的第一个venv
- en: 'Creating an environment is quite easy. The basic command comes down to `pyvenv
    PATH_TO_THE_NEW_VIRTUAL_ENVIRONMENT`, so let''s give it a try. Note that this
    command works on Linux, Unix, and Mac; the Windows command will follow shortly:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建环境非常容易。基本命令是`pyvenv PATH_TO_THE_NEW_VIRTUAL_ENVIRONMENT`，所以让我们试一试。请注意，此命令适用于Linux、Unix和Mac；Windows命令将很快跟进：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some Ubuntu releases (notably 14.04 LTS) maim the Python installation by not
    including the full `pyvenv` package with `ensurepip`. The standard workaround
    is to call `pyvenv --without-pip test_env`, which requires a manual `pip` installation
    through the `get_pip.py` file available on the `pip` home page.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一些Ubuntu版本（特别是14.04 LTS）通过不在`ensurepip`中包含完整的`pyvenv`包来削弱Python安装。标准的解决方法是调用`pyvenv
    --without-pip test_env`，这需要通过`pip`主页上提供的`get_pip.py`文件手动安装`pip`。
- en: This creates an environment called `test_venv`, and the second line activates
    the environment.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`test_venv`的环境，第二行激活该环境。
- en: 'On Windows, everything is slightly different but similar overall. By default,
    the `pyvenv` command won''t be in your PATH, so running the command is slightly
    different. The three options are as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，一切都略有不同，但总体上是相似的。默认情况下，`pyvenv`命令不会在您的PATH中，因此运行该命令略有不同。三个选项如下：
- en: Add the `Python\Tools\Scripts\` directory to your PATH
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`Python\Tools\Scripts\`目录添加到您的PATH
- en: 'Run the module:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行模块：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the script directly:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接运行脚本：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For convenience, I would recommend that you add the `Scripts` directory to your
    PATH anyhow, since many other applications/scripts (such as `pip`) will be installed
    there as well.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，我建议您无论如何将`Scripts`目录添加到您的PATH，因为许多其他应用程序/脚本（如`pip`）也将安装在那里。
- en: 'Here is the full example for Windows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Windows的完整示例：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When using Windows PowerShell, the environment can be activated by using `test_venv\Scripts\Activate.ps1`
    instead. Note that you really do need backslashes here.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Windows PowerShell时，可以通过使用`test_venv\Scripts\Activate.ps1`来激活环境。请注意，这里确实需要反斜杠。
- en: venv arguments
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: venv参数
- en: So far, we have just created a plain and regular `venv`, but there are a few,
    really useful flags for customizing your `venv` specifically to your needs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是创建了一个普通的和常规的`venv`，但是有一些非常有用的标志可以根据您的需求定制您的`venv`。
- en: 'First, let''s look at the `venv` help:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下`venv`的帮助：
- en: '| Parameter | Description |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `--system-site-packages` | It gives the virtual environment access to the
    `system-site-packages` directory |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `--system-site-packages` | 它使虚拟环境可以访问`system-site-packages`目录 |'
- en: '| `--symlinks` | Try to use `symlinks` rather than copies when symlinks are
    not the default for the platform |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `--symlinks` | 尝试在平台不默认使用符号链接时使用`symlinks`而不是副本 |'
- en: '| `--copies` | Try to use copies rather than symlinks even when symlinks are
    the default for the platform |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `--copies` | 尝试使用副本而不是符号链接，即使符号链接是平台的默认值 |'
- en: '| `--clear` | Delete the contents of the environment directory, if it exists,
    before environment creation |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `--clear` | 在环境创建之前删除环境目录的内容，如果存在的话 |'
- en: '| `--upgrade` | Upgrade the environment directory to use this version of Python,
    assuming that Python has been upgraded in-place |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `--upgrade` | 升级环境目录以使用Python的这个版本，假设Python已经被原地升级 |'
- en: '| `--without-pip` | This skips installing or upgrading pip in the virtual environment
    (`pip` is bootstrapped by default) |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `--without-pip` | 这将跳过在虚拟环境中安装或升级pip（pip默认情况下是引导的）|'
- en: The most important argument to note is `--system-site-packages`, which enables
    the global site packages within the environment. This means that if you have a
    package installed in your global Python version, it will be available within your
    environment as well. However, if you try to update it to a different version,
    it will be installed locally. Whenever possible, I would recommend disabling the
    `--system-site-packages` flag because it gives you a simple environment without
    too many variables. A simple update of the system packages could break your virtual
    environment otherwise, but worse, there is no way to know which packages are needed
    locally and which ones are just installed for other purposes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要注意的最重要的参数是`--system-site-packages`，它可以在环境中启用全局站点包。这意味着如果你在全局Python版本中安装了一个包，它也将在你的环境中可用。但是，如果你尝试将其更新到不同的版本，它将被安装在本地。在可能的情况下，我建议禁用`--system-site-packages`标志，因为它可以为你提供一个简单的环境，而不会有太多的变量。否则，简单地更新系统包可能会破坏你的虚拟环境，更糟糕的是，没有办法知道哪些包是本地需要的，哪些只是为其他目的安装的。
- en: To enable this for an existing environment, you can simply run the environment
    creation command again, but this time adding the `--system-site-packages` flag
    to enable the global site packages.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要为现有环境启用这个功能，你可以简单地再次运行环境创建命令，但这次加上`--system-site-packages`标志以启用全局站点包。
- en: To disable it again, you can simply run the environment creation command without
    the flag. This will keep the locally (within the environment) installed packages
    available but will remove the global packages from your Python scope.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要再次禁用它，你可以简单地运行环境创建命令，不带标志。这将保留在环境中安装的本地包，但会从你的Python范围中删除全局包。
- en: Tip
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When using `virtualenvwrapper`, this can also be done with the `toggleglobalsitepackages`
    command from within the activated environment.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`virtualenvwrapper`时，也可以通过在激活的环境中使用`toggleglobalsitepackages`命令来完成这个操作。
- en: The `--symlinks` and `--copies` arguments can generally be ignored, but it is
    important to know the difference. These arguments decide whether the files will
    be copied from the base python directory or whether they will be symlinked.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`--symlinks`和`--copies`参数通常可以忽略，但了解它们的区别很重要。这些参数决定文件是从基本Python目录复制还是创建符号链接。'
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Symlinks are a Linux/Unix/Mac thing; instead of copying a file it creates a
    symbolic link that tells the system where to find the actual file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 符号链接是Linux/Unix/Mac的东西；它不是复制文件，而是创建一个符号链接，告诉系统在哪里找到实际的文件。
- en: By default, `venv` will try to symlink the files, and if that fails, it will
    fall back to copying. Since Windows Vista and Python 3.2, this is also supported
    on Windows, so unless you're using a very old system, you will most likely be
    using symlinks in your environment. The benefit of symlinks is that it saves disk
    space and stays in sync with your Python installation. The downside is that if
    your system's Python version undergoes an upgrade, it can break the packages installed
    within your environment, but that can easily be fixed by reinstalling the packages
    using `pip`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`venv`会尝试创建符号链接，如果失败，它会退而使用复制。自从Windows Vista和Python 3.2以来，这在Windows上也得到支持，所以除非你使用的是一个非常旧的系统，你很可能会在你的环境中使用符号链接。符号链接的好处是它节省了磁盘空间，并且与你的Python安装保持同步。缺点是，如果你的系统的Python版本升级了，它可能会破坏你的环境中安装的包，但这可以通过使用`pip`重新安装包来轻松解决。
- en: Finally, the `--upgrade` argument is useful if your system Python version has
    been upgraded in-place. The most common use case for this argument is for repairing
    broken environments after upgrading the system Python with a copied (as opposed
    to symlinked) environment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`--upgrade`参数在系统Python版本被原地升级后非常有用。这个参数的最常见用法是在使用复制（而不是符号链接）环境后修复损坏的环境。
- en: Differences between virtualenv and venv
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: virtualenv和venv之间的区别
- en: Since the `venv` module is essentially a simpler version of `virtualenv`, they
    are mostly the same, but some things are different. Also, since `virtualenv` is
    a package that is distributed separately from Python, it does have some advantages.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`venv`模块本质上是`virtualenv`的一个简化版本，它们大部分是相同的，但有些地方是不同的。此外，由于`virtualenv`是一个与Python分开分发的包，它确实有一些优势。
- en: 'The following are the advantages of `venv` over `virtualenv`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`venv`相对于`virtualenv`的优势：
- en: '`venv` is distributed with Python 3.3 and above, so no separate install is
    needed'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`venv`随Python 3.3及以上版本一起分发，因此不需要单独安装'
- en: '`venv` is simple and straightforward with no features besides the bare necessities'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`venv`简单直接，除了基本必需品之外没有其他功能'
- en: 'Advantages of `virtualenv` over `venv`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`virtualenv`相对于`venv`的优势：'
- en: '`virtualenv` is distributed outside of Python, so it can be updated separately.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virtualenv`是在Python之外分发的，因此可以单独更新。'
- en: '`virtualenv` works on old Python versions, but Python 2.6 or a higher version
    is recommended. However, Python 2.5 support is possible with older versions (1.9.x
    or lower).'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virtualenv`适用于旧的Python版本，但建议使用Python 2.6或更高版本。然而，使用较旧版本（1.9.x或更低版本）可以支持Python
    2.5。'
- en: It supports convenient wrappers, such as `virtualenvwrapper` ([http://virtualenvwrapper.readthedocs.org/](http://virtualenvwrapper.readthedocs.org/))
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持方便的包装器，比如`virtualenvwrapper` ([http://virtualenvwrapper.readthedocs.org/](http://virtualenvwrapper.readthedocs.org/))
- en: In short, if `venv` is enough for you, use it. If you are using an old Python
    version or want some extra convenience, such as `virtualenvwrapper`, use `virtualenv`
    instead. Both projects essentially do the same thing, and efforts have been made
    to easily switch between them. The biggest and most significant difference between
    the two is the wide variety of Python versions that `virtualenv` supports.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，如果`venv`对您足够了，就使用它。如果您使用的是旧版本的Python或需要一些额外的便利，比如`virtualenvwrapper`，则使用`virtualenv`。这两个项目本质上是做同样的事情，并且已经努力使它们之间易于切换。两者之间最大和最显著的区别是`virtualenv`支持的Python版本的种类。
- en: Bootstrapping pip using ensurepip
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ensurepip引导pip
- en: Slowly, the `pip` package manager has been replacing `easy_install` since its
    introduction in 2008\. Since Python 3.4, it has even become the default and is
    bundled with Python. Since Python 3.4 onward, it is installed by default within
    both the regular Python environment and that of `pyvenv`; before that, a manual
    install is required. To automatically install `pip` in Python 3.4 and above, the
    `ensurepip` library is used. This is a library that handles automatic installation
    and/or upgrades of `pip`, so it is at least as recent as the one bundled with
    `ensurepip`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 自2008年推出以来，`pip`软件包管理器一直在逐渐取代`easy_install`。自Python 3.4以来，它甚至已成为默认选项，并与Python捆绑在一起。从Python
    3.4开始，它默认安装在常规Python环境和`pyvenv`中；在此之前，需要手动安装。要在Python 3.4及以上版本自动安装`pip`，需要使用`ensurepip`库。这是一个处理`pip`的自动安装和/或升级的库，因此至少与`ensurepip`捆绑的版本一样新。
- en: ensurepip usage
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ensurepip用法
- en: The usage of `ensurepip` is fairly straightforward. Just run python `-m ensurepip`
    to guarantee a `pip` version or python `-m ensurepip --upgrade` to make sure that
    `pip` will be at least the version that is bundled with `ensurepip`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ensurepip`非常简单。只需运行python `-m ensurepip`来保证`pip`的版本，或者运行python `-m ensurepip
    --upgrade`来确保`pip`至少是与`ensurepip`捆绑的版本一样新。
- en: In addition to installing the regular `pip` shortcut, this will also install
    the `pipX` and `pipX.Y` links, which allow you to select a specific Python version.
    When using Python 2 and Python 3 simultaneously, this allows you to install packages
    within Python 2 and Python 3 with `pip2` and `pip3`, respectively. This means
    that if you use python `-m ensurepip` on Python 3.5 you will get `pip`, `pip3`,
    and `pip3.5` commands installed in your environment.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 除了安装常规的`pip`快捷方式外，这还将安装`pipX`和`pipX.Y`链接，允许您选择特定的Python版本。当同时使用Python 2和Python
    3时，这允许您使用`pip2`和`pip3`在Python 2和Python 3中安装软件包。这意味着如果您在Python 3.5上使用python `-m
    ensurepip`，您将在您的环境中安装`pip`、`pip3`和`pip3.5`命令。
- en: Manual pip install
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动pip安装
- en: 'The `ensurepip` package is great if you are using Python 3.4 or above. Below
    that, however, you need to install `pip` manually. Actually, this is surprisingly
    easy. It involves just two steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Python 3.4或更高版本，`ensurepip`软件包非常好。然而，在此之下，您需要手动安装`pip`。实际上，这非常容易。只需要两个步骤：
- en: 'Download the `get-pip.py` file: [https://bootstrap.pypa.io/get-pip.py](https://bootstrap.pypa.io/get-pip.py).'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载`get-pip.py`文件：[https://bootstrap.pypa.io/get-pip.py](https://bootstrap.pypa.io/get-pip.py)。
- en: 'Execute the `get-pip.py` file: python `get-pip.py`.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`get-pip.py`文件：python `get-pip.py`。
- en: Tip
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If the `ensurepip` command fails due to permission errors, it can be useful
    to supply the `--user` argument. This allows you to install `pip` inside the user
    `specific site packages` directory, so root/admin access is not required.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`ensurepip`命令由于权限错误而失败，提供`--user`参数可能会有用。这允许您在用户特定的站点包目录中安装`pip`，因此不需要root/admin访问权限。
- en: Installing C/C++ packages
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装C/C++软件包
- en: Most Python packages are purely Python and blissfully easy to install, just
    as a simple `pip install packagename` does the trick. However, there are cases
    where compilation is involved and installation goes from a simple pip install
    to searching for hours to see which dependencies are needed to install a certain
    package.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Python软件包纯粹是Python，并且安装起来非常容易，只需简单的`pip install packagename`就可以了。然而，有些情况涉及到编译，安装不再是简单的pip
    install，而是需要搜索几个小时以查看安装某个软件包所需的依赖关系。
- en: The specific error message will differ as per the project and environment, but
    there is a common pattern in these errors, and understanding what you are looking
    at can help a lot when searching for a solution.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 特定的错误消息会根据项目和环境而异，但这些错误中有一个共同的模式，了解您所看到的内容可以在寻找解决方案时提供很大帮助。
- en: 'For example, when installing `pillow` on a standard Ubuntu machine, you''ll
    get a few pages full of errors, warnings, and other messages that end like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在标准的Ubuntu机器上安装`pillow`时，您会得到几页错误、警告和其他消息，最后是这样的：
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Upon seeing messages like these, you might be tempted to search for one of
    the lines such as `x86_64-linux-gnu-gcc: error: build/temp.linux-x86_64-3.4/libImaging/Jpeg2KDecode.o:
    No such file or directory`. While this might give you some relevant results, most
    likely it will not. The trick with installations like these is to scroll up until
    you see messages about missing headers. Here is an example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '看到这样的消息后，您可能会想要搜索其中的一行，比如`x86_64-linux-gnu-gcc: error: build/temp.linux-x86_64-3.4/libImaging/Jpeg2KDecode.o:
    No such file or directory`。虽然这可能会给您一些相关的结果，但很可能不会。在这种安装中的技巧是向上滚动，直到看到有关缺少头文件的消息。这是一个例子：'
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The key message here is that `Python.h` is missing. These are part of the Python
    headers and are needed for the compilation of most C/C++ packages within Python.
    Depending on the operating system, the solutions will vary—unfortunately. So,
    I recommend that you skip all parts of this paragraph that are not relevant for
    your case.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键消息是缺少`Python.h`。这些是Python头文件的一部分，需要用于Python中大多数C/C++软件包的编译。根据操作系统的不同，解决方案也会有所不同，不幸的是。因此，我建议您跳过本段中与您的情况无关的部分。
- en: Debian and Ubuntu
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Debian和Ubuntu
- en: 'In Debian and Ubuntu, the package to be installed is `python3-dev` or `python2-dev`
    if you''re still using Python 2\. The command to execute is as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian和Ubuntu中，要安装的软件包是`python3-dev`或`python2-dev`（如果您仍在使用Python 2）。要执行的命令如下：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'However, this installs the development headers only. If you want the compiler
    and other headers bundled with the install, then the `build-dep` command is also
    very useful. Here is an example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这只安装了开发头文件。如果您希望编译器和其他头文件与安装捆绑在一起，那么`build-dep`命令也非常有用。以下是一个示例：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Red Hat, CentOS, and Fedora
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Red Hat、CentOS和Fedora
- en: 'Red Hat, CentOS, and Fedora are rpm-based distros that use the `yum` package
    manager to install the requirements. Most development headers are available through
    `<package-name>-devel` and are easily installable as such. To install the Python
    3 development headers, use this line:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Red Hat、CentOS和Fedora是基于rpm的发行版，它们使用`yum`软件包管理器来安装所需的软件。大多数开发头文件都可以通过`<package-name>-devel`获得，并且可以轻松安装。要安装Python
    3开发头文件，请使用以下命令：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To make sure you have all the requirements such as development headers and
    compilers to build packages such as Python, the `yum-builddep` command is available:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保您具有构建软件包（如Python）所需的所有要求，例如开发头文件和编译器，`yum-builddep`命令是可用的：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: OS X
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OS X
- en: The install procedure on OS X consists of three steps before the actual package
    can be installed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际安装软件包之前，OS X上的安装过程包括三个步骤。
- en: First, you have to install Xcode. This can be done through the OS X App Store
    at [https://itunes.apple.com/en/app/xcode/id497799835?mt=12](https://itunes.apple.com/en/app/xcode/id497799835?mt=12).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要安装Xcode。这可以通过OS X App Store完成，网址为[https://itunes.apple.com/en/app/xcode/id497799835?mt=12](https://itunes.apple.com/en/app/xcode/id497799835?mt=12)。
- en: 'Then you have to install the Xcode command-line tools:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要安装Xcode命令行工具：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, you need to install the **Homebrew** package manager. The steps are
    available at [http://brew.sh/](http://brew.sh/), but the install command is as
    follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您需要安装**Homebrew**软件包管理器。步骤可在[http://brew.sh/](http://brew.sh/)找到，但安装命令如下：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Other package managers, such as `Macports`, are also possible, but `Homebrew`
    is currently the OS X package manager with the most active development and community.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 其他软件包管理器，如`Macports`，也是可能的，但`Homebrew`目前是OS X上开发和社区最活跃的软件包管理器。
- en: 'Once all of these steps have been completed, you should have a working Homebrew
    installation. The working of `Homebrew` can be verified using the `brew doctor`
    command. If there are no major errors in the output, then you should be ready
    to install your first packages through brew. Now we simply need to install Python
    and we''re done:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些步骤后，您应该有一个可用的Homebrew安装。可以使用`brew doctor`命令验证`Homebrew`的工作情况。如果输出中没有主要错误，那么您应该准备通过brew安装您的第一个软件包。现在我们只需要安装Python，就完成了：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Windows
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows
- en: On Windows, manual compilation of C Python packages is generally a non-trivial
    task to say the least. Most packages have been written with Linux/Unix systems
    in mind (OS X falls under the Unix category), and Windows is a nice-to-have for
    developers. The result is that packages are difficult to compile on Windows because
    there are few people testing them and many of the libraries require manual installation,
    making it a very tedious task. So, unless you really have to, try and stay away
    from manually compiling Python packages on Windows. Most packages are available
    as installable binary downloads with a bit of searching, and there are alternatives
    such as Anaconda that include binary packages for most important C Python packages.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，手动编译C Python软件包通常是一个非常不容易的任务。大多数软件包都是针对Linux/Unix系统编写的（OS X属于Unix类别），而Windows对开发人员来说只是一个附带的功能。结果是，由于测试软件包的人很少，许多库需要手动安装，因此在Windows上编译软件包非常繁琐。因此，除非您确实必须这样做，否则请尽量避免在Windows上手动编译Python软件包。大多数软件包都可以通过一些搜索获得可安装的二进制下载，并且还有诸如Anaconda之类的替代方案，其中包括大多数重要的C
    Python软件包的二进制软件包。
- en: If you still feel inclined to manually compile C Python packages, then there
    is another option, and it is generally an easier alternative. The Cygwin project
    ([http://cygwin.com/](http://cygwin.com/)) attempts to make Linux applications
    run natively on Windows. This is generally an easier solution than making packages
    work with Visual Studio.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仍然倾向于手动编译C Python软件包，那么还有另一种选择，通常是更简单的替代方案。Cygwin项目（[http://cygwin.com/](http://cygwin.com/)）试图使Linux应用程序在Windows上原生运行。这通常是一个比让软件包与Visual
    Studio配合工作更容易的解决方案。
- en: If you do wish to take the Visual Studio path, I would like to point you towards
    [Chapter 14](ch14.html "Chapter 14. Extensions in C/C++, System Calls, and C/C++
    Libraries"), *Extensions in C/C++, System Calls, and C/C++ Libraries*, which covers
    manual writing of C/C++ extensions and some information on which Visual Studio
    versions you need for your Python version.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您确实希望选择Visual Studio路径，我想指向[第14章](ch14.html "第14章。C/C++扩展、系统调用和C/C++库")，*C/C++扩展、系统调用和C/C++库*，其中涵盖了手动编写C/C++扩展以及有关您的Python版本所需的Visual
    Studio版本的一些信息。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: With the inclusion of packages such as `pip` and `venv`, I feel that Python
    3 has become a complete package that should suit most people. Beyond legacy applications,
    there is no real reason not to choose Python 3 anymore. The initial Python 3 release
    in 2008 was definitely a bit raw compared to the well-rounded Python 2.6 version
    released the same year, but a lot has changed in that aspect. The last major Python
    2 release was Python 2.7, which was released in 2010; within the software world,
    that is a very, very long time. While Python 2.7 still receives maintenance, it
    will not receive any of the amazing new features that Python 3 is getting—features
    such as Unicode strings by default, `dict` generators ([Chapter 6](ch06.html "Chapter 6. Generators
    and Coroutines – Infinity, One Step at a Time"), *Generators and Coroutines –
    Infinity, One Step at a Time*), and `async` methods ([Chapter 7](ch07.html "Chapter 7. Async
    IO – Multithreading without Threads"), *Async IO – Multithreading without Threads*).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 随着`pip`和`venv`等包的加入，我觉得Python 3已经成为一个完整的包，应该适合大多数人。除了遗留应用程序外，再也没有理由不选择Python
    3了。2008年初版的Python 3相比于同年发布的成熟的Python 2.6版本确实有些粗糙，但在这方面已经发生了很多变化。最后一个重要的Python
    2版本是Python 2.7，发布于2010年；在软件世界中，这是非常非常长的时间。虽然Python 2.7仍然在接受维护，但它将不会获得Python 3正在获得的任何惊人的新功能——比如默认的Unicode字符串、`dict`生成器（[第6章](ch06.html
    "第6章. 生成器和协程-无限，一步一步")，*生成器和协程-无限，一步一步*）以及`async`方法（[第7章](ch07.html "第7章. 异步IO-无需线程的多线程")，*异步IO-无需线程的多线程*）。
- en: After finishing this chapter, you should be able to create a clean and recreatable
    virtual environment and know where to look if an installation of C/C++ packages
    fails.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您应该能够创建一个干净且可重现的虚拟环境，并知道如果C/C++包的安装失败应该去哪里查找。
- en: 'Here are the most important notes for this chapter:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章最重要的笔记如下：
- en: For a clean and simple environment, use `venv`. If compatibility with Python
    2 is needed, use `virtualenv`.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了创建一个干净简洁的环境，请使用`venv`。如果需要与Python 2兼容，请使用`virtualenv`。
- en: If C/C++ packages fail to install, look for the error about missing includes.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果C/C++包安装失败，请查找有关缺少包含文件的错误。
- en: The next chapter covers the Python style guide, which rules are important, and
    why they matter. Readability is one of the most important aspects of the Python
    philosophy, and you will learn methods and styles for writing cleaner and more
    readable Python code.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍Python风格指南，重要的规则以及它们的重要性。可读性是Python哲学中最重要的方面之一，您将学习编写更干净、更易读的Python代码的方法和风格。
