- en: Chapter 4. Glyph Lefkowitz
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章　Glyph Lefkowitz
- en: '![Glyph Lefkowitz](img/B08180_08_01.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![Glyph Lefkowitz](img/B08180_08_01.jpg)'
- en: Glyph Lefkowitz is an American software engineer who has worked on numerous
    open source projects. Previous roles include senior software engineer at Apple,
    and today he works at Pilot.com, a bookkeeping service for start-ups. Glyph is
    the original founder of Twisted, a network programming framework written in Python.
    He continues to maintain Twisted and play an active role in the Twisted community.
    In 2009, Glyph was made a fellow of the Python Software Foundation (PSF). The
    PSF awarded Glyph its Community Service Award for contributions to the Python
    language in 2017.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Glyph Lefkowitz是一位美国软件工程师，曾参与过许多开源项目。他之前担任过苹果公司的资深软件工程师，现在在Pilot.com工作，这是一家为初创企业提供簿记服务的公司。Glyph是Python网络编程框架Twisted的原始创始人。他继续维护Twisted，并在Twisted社区中扮演着积极的角色。2009年，Glyph被选为Python软件基金会（PSF）的会员。2017年，PSF授予Glyph其社区服务奖，以表彰他对Python语言的贡献。
- en: '**Discussion themes: v2.7/v3.x, Python''s future, diversity.**'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**讨论主题：v2.7/v3.x，Python的未来，多样性。**'
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Catch up with Glyph Lefkowitz here: @glyph**'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**在这里了解Glyph Lefkowitz：@glyph**'
- en: '**Mike Driscoll**: So how did you end up becoming a programmer?'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mike Driscoll**：那么你是如何成为程序员的呢？'
- en: '**Glyph Lefkowitz**: Well, my programming path was somewhat circuitous. I started
    off programming as a kid, but I do not have the stereotypical story of learning
    BASIC, then Perl. There wasn''t a linear progression, or some professional aspiration
    that I had to do programming.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**Glyph Lefkowitz**：嗯，我的编程之路有些曲折。我从小就开始编程，但我的学习经历并不是典型的从BASIC到Perl的过程。没有线性进步，也没有我必须从事编程的专业抱负。'
- en: I just wanted to make games like Zork when I was a kid. My dad is a professional
    programmer, so he tried to teach me APL. I did not take to programming quickly.
    I learned how to assign variables and that was it. I had no idea what variable
    assignment meant. That was where I stayed for about five years.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是想在我小时候制作像Zork那样的游戏。我的父亲是一位专业程序员，所以他试图教我APL。我没有很快地接受编程。我学会了如何分配变量，就这些。我不知道变量分配意味着什么。这就是我在那里停留了大约五年的原因。
- en: Then I learned HyperCard and I started to get the notion of control flow and
    loops. I tried to make video games with it. The whole time, for my entire childhood,
    I was trying to avoid learning to program. I was always looking for non-programmer
    stuff to do, because I was terrible at math.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我学习了HyperCard，并开始理解控制流和循环的概念。我试图用它制作视频游戏。在整个童年时期，我都在试图避免学习编程。我总是寻找非编程的事情来做，因为我数学很差。
- en: '**Glyph Lefkowitz: ''The whole time, for my entire childhood, I was trying
    to avoid learning to program.''**'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Glyph Lefkowitz**：“在整个童年时期，我都在试图避免学习编程。”'
- en: So after a while, HyperCard sort of got limiting. I got SuperCard and at some
    point, I learned what a variable was and how to make programs that would actually
    operate on data structures. Then I learned C++. Once I understood the power inherent
    in programming, after years of trying to avoid it, then I really got into it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以过了一段时间，HyperCard开始显得有些局限。我得到了SuperCard，在某个时候，我学会了什么是变量以及如何编写实际操作数据结构的程序。然后我学习了C++。在我尝试避免编程多年之后，一旦我理解了编程固有的力量，我就真正地投入进去了。
- en: '**Glyph Lefkowitz: ''Once I understood the power inherent in programming, after
    years of trying to avoid it, then I really got into it.''**'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Glyph Lefkowitz**：“一旦我理解了编程固有的力量，在我尝试避免它多年之后，我就真正地投入进去了。”'
- en: I learned Java, I learned Perl, I learned Lisp and I learned Scheme, all in
    high school. I taught a programming class at my high school, so I got really into
    it by the time I was about 17\. But it was quite a slog on the way up there.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我在高中时学习了Java、Perl、Lisp和Scheme。我在高中教了一门编程课，所以在大约17岁时，我就非常热衷于编程了。但在这条路上，我经历了不少艰辛。
- en: '**Driscoll**: So how did that end up pushing you from all those other languages
    into Python?'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：那么，这是如何让你从所有那些其他语言转向Python的呢？'
- en: '**Lefkowitz**: Well, by the time I started my professional career, I''d sort
    of settled on Java.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Lefkowitz**：嗯，当我开始我的职业生涯时，我差不多已经决定使用Java了。'
- en: I had some really terrible experiences with the proprietary runtime, particularly
    for macOS, that shipped with Java. So I had professional experience with the runtimes
    being really bad. Basically, there was a bug in the windowing system that the
    application I was working on kind of leaned on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我在使用Java时遇到了一些非常糟糕的体验，尤其是对于macOS的专有运行时，因为应用程序我正在工作的依赖了那个窗口系统，存在一个bug。
- en: The application could not be rearchitected to avoid tickling this bug, because
    the bug was connected with leaking large amounts of memory. So effectively the
    project that I was on died and I lost the job. I ended up being unemployed for
    a couple of months and as a result of that experience I thought well, screw Java,
    I'm not doing that anymore, mainly because of the runtime issues.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个错误与大量内存泄漏有关，因此无法重新架构应用程序以避免触发这个错误。因此，我参与的项目实际上失败了，我失去了工作。我最终失业了几个月，因为这个经历，我想，去他的Java，我再也不做了，主要是因为运行时的问题。
- en: '**Glyph Lefkowitz: ''I ended up being unemployed for a couple of months and
    as a result of that experience I thought well, screw Java.''**'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨：**“我最终失业了几个月，因为这个经历，我想，去他的Java。”**'
- en: My very first reaction was to see what GNU had on offer for a Java compiler.
    I thought maybe I could do Java, but not touch the runtime stuff, because it was
    just too buggy. The conclusion from that was rapidly that none of that stuff worked.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我的第一反应是看看GNU为Java编译器提供了什么。我想也许我可以做Java，但不需要接触运行时，因为它的错误太多。从那个结论中迅速得出的是，那些东西都不起作用。
- en: So at the same time, my hobby project, which does exist to this day, was this
    online text-based game which I had written in Java. A tremendous amount of the
    work that I had done in Java was building up these hash tables full of objects
    with run methods.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我的业余项目，这个项目至今仍然存在，是一个我用Java编写的基于文本的在线游戏。我在Java中做的大量工作就是构建这些充满具有运行方法的对象的哈希表。
- en: There were then arguments to the run methods, which I would inject into them
    with reflection. The whole idea was that you were supposed to wire the game together
    at runtime. It was kind of user-programmable, but in a more restricted way.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后还有运行方法的参数，我会通过反射将它们注入其中。整个想法是在运行时将游戏连接起来。它有点用户可编程，但方式更加受限。
- en: '**Driscoll**: So how did this game work?'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔：**“那么这个游戏是如何运作的？”'
- en: '**Lefkowitz**: You would have a set of building blocks that were somewhat constrained,
    so that if you made something, it could have game consequences and not just flavor
    text that it would print. So almost all of the code in the Java version was this
    tremendous amount of ceremony, associated with dynamically composing objects,
    out of other objects that might be arbitrary collections.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**莱夫科维茨：**“你会有一套相对受限的构建块，这样如果你做了什么，它会产生游戏后果，而不仅仅是打印出来的风味文本。所以Java版本中的几乎所有代码都是与动态组合对象有关的大量仪式，这些对象可能是任意集合的其他对象。”'
- en: I reimplemented the whole thing in Python and I realized that you didn't need
    to do any of that stuff. Objects in Python were just these dynamic collections
    of things, that you could arbitrarily add attributes to and retrieve attributes
    from. You could look into other dicts and all that stuff.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我用Python重新实现了整个系统，并意识到你不需要做任何那些事情。Python中的对象只是这些动态的事物集合，你可以随意添加属性并从中检索属性。你可以查看其他字典以及所有那些东西。
- en: '**Glyph Lefkowitz: ''I reimplemented the entire thing, which was about 25,000
    lines of Java in 800 lines of Python, and I thought it was a much better program.''**'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨：**“我重新实现了整个系统，大约有25,000行Java代码，压缩到了800行Python代码，我认为这是一个更好的程序。”**'
- en: So I reimplemented the entire thing, which was about 25,000 lines of Java in
    800 lines of Python, and I thought it was a much better program. Now granted,
    what I had implemented in Java was a crummy version of the Python object model,
    so it was particularly easy to implement.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我重新实现了整个系统，大约有25,000行Java代码，压缩到了800行Python代码，我认为这是一个更好的程序。现在，当然，我在Java中实现的是一个糟糕的Python对象模型版本，所以实现起来特别容易。
- en: One of my interests that has endured over many years is composability and the
    ability to automatically assemble. I want the ability to make programs self-symmetric,
    so that you can have a large number of implementations of the similar interface
    and compose them automatically. Python's metaprogramming facilities were in this
    wonderful sweet spot between say Lisp or Scheme, where there was so much power
    that nothing was compatible. No two people would write the same object model in
    those languages.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我多年来一直保持的兴趣之一是可组合性和自动组装的能力。我希望能够使程序具有自对称性，这样就可以拥有大量类似接口的实现，并能够自动组合它们。Python的元编程设施位于Lisp或Scheme等语言之间的美妙甜点，那里有如此多的力量，以至于没有任何东西是兼容的。没有人会用同样的对象模型来编写那些语言。
- en: At the other end, with something like Java, everything was very standardized,
    but it didn't matter, because everything was also really tedious. You couldn't
    automatically pull things together and everything was very verbose, so it wasn't
    worth trying to do any metaprogramming.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一端，使用类似Java这样的语言，一切都非常标准化，但这并不重要，因为一切也都非常枯燥。你无法自动地将事物组合在一起，而且一切都非常冗长，所以尝试进行任何元编程都不值得。
- en: Python is standard enough that things work together, but flexible and high-level
    enough that you get almost as much power as Lisp macros. So that's why I've stuck
    with it ever since, although because I know a bunch of other languages, I periodically
    venture into them. But Python is definitely my main language that I've built my
    career on.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Python足够标准化，事物可以协同工作，但足够灵活和高级，以至于你几乎可以得到像Lisp宏一样多的功能。这就是为什么我自从那时起就一直坚持使用它，尽管因为我了解很多其他语言，所以我时不时地会尝试它们。但Python绝对是我建立职业生涯的主要语言。
- en: '**Glyph Lefkowitz: ''Python is definitely my main language that I''ve built
    my career on.''**'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨说：“Python绝对是我建立职业生涯的主要语言。’**”'
- en: '**Driscoll**: Are you actually a core Python developer? I wasn''t able to discover
    that information.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你真的是Python的核心开发者吗？我无法发现这个信息。'
- en: '**Lefkowitz**: I''m not. I have attended a bunch of core Python developer events,
    because Twisted is a pretty high-profile Python project.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**莱夫科维茨**：我不是。我参加过很多核心Python开发者活动，因为Twisted是一个相当高调的Python项目。'
- en: I went to a language summit a couple of years ago and I have triage permissions
    on the bug tracker. I'm on the Python security response team to provide a library
    perspective on this stuff. I also worked with Guido van Rossum a fair amount on
    asyncio getting integrated into the standard library. For instance, providing
    feedback on that and the experiences I've had with Twisted.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前我去参加了一个语言峰会，我在bug跟踪器上有分类权限。我是Python安全响应团队的一员，负责从库的角度提供对这个问题的看法。我还与吉多·范罗苏姆合作了很多，帮助asyncio集成到标准库中。例如，提供反馈以及我在Twisted上的经验。
- en: So I'm peripheral to Python core development, but not a member of the core team.
    I never really had the desire to get involved. I basically already spend way more
    time than I probably should doing volunteer open source development, to be adding
    to that by doing Python core stuff. A lot of people use Python professionally
    and want to give back, but I already give back.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我对Python核心开发只是外围的，而不是核心团队的一员。我从未真正有参与的欲望。我基本上已经花了很多时间，可能比应该花的时间还要多，来做志愿者开源开发，通过做Python核心工作来增加这一点。很多人在专业上使用Python并希望回馈，但我已经做出了贡献。
- en: '**Driscoll**: So, now we''re talking about Twisted, could you tell me about
    how Twisted came about and what inspired you to write it?'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：所以，现在我们正在谈论Twisted，你能告诉我Twisted是如何产生的以及是什么启发了你编写它吗？'
- en: '**Lefkowitz**: Well, it came about originally because of that very same video
    game that I was telling you about before. I started off in Python rewriting the
    Java version of the server that I had been working on.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**莱夫科维茨**：嗯，它最初是由于那个我之前告诉你的同样的视频游戏。我开始用Python重写我一直在工作的Java服务器版本。'
- en: The concurrency of that server was very heavily based on threads, because there
    were multiple players walking around and multiple autonomous agents doing various
    things. So there was just a big mess of threads in Java. There was no other way
    to do it and the whole ecosystem was kind of oriented around using lots of threads.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务器的并发性非常依赖于线程，因为有很多玩家在四处走动，有很多自主代理在做各种事情。所以在Java中，线程一团糟。没有其他方法可以做到这一点，整个生态系统都是围绕使用大量线程来构建的。
- en: '**Glyph Lefkowitz: ''There was a time... when the term massively multithreaded
    was like a boast that projects would make.''**'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨说：“曾经有过一个时期……当‘大规模多线程’这个词听起来像是项目的一个夸耀。’**”'
- en: In fact, I'll never forget this, there was a time, in the late 1990s and very
    early 2000s, when *massively multithreaded* was like a boast that projects would
    make. This was something positive that they were claiming about their project.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我永远不会忘记，在20世纪90年代末和21世纪初，*大规模多线程*就像是一个项目会吹嘘的夸耀。这是他们对项目的一个积极声明。
- en: 'We had a similar type of architecture and it was a giant mess. There were tons
    and tons of horrible bugs that were the result of the incorrect management of
    threads. I don''t remember exactly how I discovered it, but basically originally
    there were three threads for every connection: the reader thread, the writer thread
    and the logic thread.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有类似类型的架构，但它一团糟。有成千上万的糟糕错误是由于线程管理不当造成的。我不记得我是如何发现这个问题的，但基本上最初每个连接都有三个线程：读取线程、写入线程和逻辑线程。
- en: My friend James Knight rewrote the client/server protocol for this game. I believe
    that when he rewrote it, he condensed down those three threads into a single thread
    per player, by using the select module.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我的朋友詹姆斯·奈特重新编写了这款游戏的客户端/服务器协议。我相信当他重新编写时，他通过使用select模块将三个线程合并为每个玩家一个线程。
- en: '**Driscoll**: What did this development mean for you?'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里科尔**：这次开发对你意味着什么？'
- en: '**Lefkowitz**: I looked at the client/server protocol and I realized that there
    were multiple things I wanted to know about, that I might be able to do with a
    socket.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**莱夫科维茨**：我研究了客户端/服务器协议，并意识到我想要了解的有很多，我可能可以通过套接字来实现。'
- en: '**Glyph Lefkowitz: ''Once I found out about the select module, I read about
    it and it completely changed my conception of how programs worked.''**'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨**：“一旦我了解到select模块，我就去阅读它，这完全改变了我对程序工作方式的看法。”'
- en: So once I found out about the `select` module, I read about it and it completely
    changed my conception of how programs worked. As I mentioned before, my early
    introduction to programming was HyperCard, so I had this intuitive notion that
    the computer is idle and waiting for something to happen.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 所以一旦我了解到`select`模块，我就去阅读它，这完全改变了我对程序工作方式的看法。正如我之前提到的，我早期的编程接触是HyperCard，所以我有一个直观的想法，即计算机是空闲的，等待发生某事。
- en: '**Driscoll**: Where did you go from there?'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里科尔**：从那里你做了什么？'
- en: '**Lefkowitz**: So, after messing around with the `select` module for a day
    or two, I realized that you could have something that was on data received, or
    on connection started, and do something.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**莱夫科维茨**：所以，在玩弄`select`模块一两天后，我意识到你可以在接收到数据或连接开始时做些事情。'
- en: That was much more natural to me, because I had been using threads to sort of
    emulate this, but never felt really comfortable. At that time, I didn't have a
    good intuition about what happened when we started up a program. It started threads
    in the background, or something concurrent was happening, but I didn't really
    understand how the parallelism worked.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这对我来说更加自然，因为我之前一直在尝试用线程来模拟这种效果，但从未感到真正舒适。当时，我对启动程序时会发生什么并没有很好的直觉。程序会在后台启动线程，或者发生一些并发事件，但我并没有真正理解并行工作是如何进行的。
- en: With `select`, you could see the parallelism because multiple connections would
    come in. Then there would just be multiple objects that I had instantiated and
    that had methods on them, which I was calling from this event loop. So building
    that up from the bottom gave me a much better understanding of how concurrency
    worked.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`select`，你可以看到并行性，因为会有多个连接进来。然后就会有多个我实例化的对象，它们上面有方法，我从这个事件循环中调用这些方法。所以从底层构建这些给了我关于并发工作方式更好的理解。
- en: From there, the idea was that the game would be what these days you call an
    alternate reality game. It would be reaching out via various protocols to send
    you emails or send you text messages. This really dates the whole thing, because
    the web server was not the first thing I did and it was not really clear that
    the web thing was going to catch on.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从那时起，想法是这款游戏将是如今所说的“替代现实游戏”。它将通过各种协议发送电子邮件或短信与你联系。这确实让整个事情显得有些过时，因为当时我并没有首先考虑建立网站服务器，而且并不清楚网络这一块是否会流行起来。
- en: '**Glyph Lefkowitz: ''The web was just a really slow and buggy native client
    that crashed a lot.''**'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨**：“网络只是一个非常慢且充满错误的本地客户端，经常崩溃。”'
- en: For us, the Twisted development team, the web was just a really slow and buggy
    native client that crashed a lot. We could write native clients in Python that
    would do exactly what we wanted. Security, of course, was not nearly the concern
    that it is today, so it wasn't as clear that we needed sandboxing. To be fair,
    browser security was also terrible at the time, but it was not like we were really
    thinking about that. So that's how the project got built up into the multi-protocol
    Hydra that it is.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们Twisted开发团队来说，网络只是一个非常慢且充满错误的本地客户端，经常崩溃。我们可以在Python中编写本地客户端，它们会做我们想要的一切。当然，安全性并不是像今天那样令人担忧的问题，所以并不那么明显我们需要沙箱。公平地说，当时的浏览器安全性也很糟糕，但我们并没有真正考虑这一点。所以，项目就这样发展成了一个多协议的Hydra。
- en: One of the reasons that Twisted existed in the form where it had this big standard
    library built in, was that we really wanted developers to rewrite their protocols
    in such a way that you did not need threads to speak to them. I still feel this
    way to a large extent today.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Twisted之所以以这种形式存在，其中内置了一个庞大的标准库，其中一个原因是，我们真的希望开发者以这种方式重写他们的协议，这样你就不需要线程来与之通信。我至今仍然这样认为。
- en: '**Driscoll**: What lessons did you learn from the first Twisted releases?'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你从第一个Twisted版本中学到了什么教训？'
- en: '**Lefkowitz**: Well, one lesson was that each time you made an object persistent,
    you were basically making a vow to support it for the rest of your natural life.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**莱夫科维茨**：嗯，一个教训是，每次你使一个对象持久化时，你基本上是在承诺支持它直到你生命的尽头。'
- en: '**Glyph Lefkowitz: ''One lesson was that each time you made an object persistent,
    you were basically making a vow to support it for the rest of your natural life.''**'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨**：“每次你使一个对象持久化时，你基本上是在承诺支持它直到你生命的尽头。”'
- en: So we had all of these really crummy little classes that were dumb implementation
    details. They were exactly the kind of thing you would imagine if you got a bunch
    of bored 19-year-olds to write a bunch of production-critical server infrastructure.
    That's what we were doing and we ended up creating this very odd situation where
    we had these server files which were like dozens of dead objects from previous
    versions of the software.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有一系列真正糟糕的小课程，它们是愚蠢的实现细节。这正是一群无聊的19岁年轻人编写大量生产关键服务器基础设施时可能会想象到的事情。我们就是这样做的，最终我们陷入了一种非常奇怪的情况，我们有了这些服务器文件，它们就像是软件前几个版本中的几十个死对象。
- en: We didn't know the files were in there because `pickle` has no way to visualize
    your object graph, or show you what's going on. So the main web server for Twistedmatrix.com,
    up until around 2009, was this 45 MB `pickle` file. We didn't know why it was
    so big, but that was how you would run it. You would just fire up a Python interpreter
    to run the reactor. We were living five to ten years in the future, but that wasn't
    necessarily always a good thing.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不知道文件在那里，因为`pickle`没有方法可视化你的对象图，或者显示你在做什么。所以，直到大约2009年，Twistedmatrix.com的主要网络服务器是一个45MB的`pickle`文件。我们不知道为什么它这么大，但这就是你运行它的方式。你只需要启动一个Python解释器来运行反应器。我们生活在五到十年后的未来，但这并不一定总是好事。
- en: '**Driscoll**: What problems did you run into?'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你遇到了什么问题？'
- en: '**Lefkowitz**: We were sometimes trying to do things that were really bad decisions,
    because there was no tooling associated with them.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**莱夫科维茨**：我们有时试图做一些真正糟糕的决定，因为与它们相关的工具不足。'
- en: There was no supporting ecosystem, so we assumed that we could do something
    alternative that was not keeping all of our config and plain text files. We thought
    we could then somehow handwave all the benefits of version control and text diffing,
    and all the log processing tools would somehow arrive in our ecosystem, but they
    never did. So we've been trying to do less weird for the sake of weird in the
    last five to ten years of the project, which is still less than half its lifetime.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 没有支持性的生态系统，所以我们假设我们可以做一些替代方案，而不需要保留所有的配置和平文文件。我们以为我们可以以某种方式挥挥手，忽略版本控制和文本差异的所有好处，所有日志处理工具会以某种方式进入我们的生态系统，但它们从未这样做。因此，在过去五到十年中，我们一直在努力让项目变得不那么奇怪，但这仍然不到其寿命的一半。
- en: '**Glyph Lefkowitz: ''We''ve been trying to do less weird for the sake of weird
    in the last five to ten years of the project.''**'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨**：“在过去五到十年中，我们一直在努力让项目变得不那么奇怪，只是为了奇怪。”'
- en: '**Driscoll**: So you mentioned that you were helping with the `asyncio` and
    other library changes related to that. How do you see those changes affecting
    Twisted?'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 所以你提到你在帮助进行 `asyncio` 以及与之相关的其他库的更改。你认为这些更改会如何影响 Twisted？'
- en: '**Lefkowitz**: I actually wrote an article on my blog about this a while back.
    At the time, a vocal minority of Python users, who really didn''t like Twisted
    to begin with, sort of rejoiced that the library changes would finally kill Twisted,
    because there would be no reason to use it anymore.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**Lefkowitz**: 我实际上在我博客上写了一篇关于这个话题的文章。当时，Python 用户中有一小部分人，一开始就不喜欢 Twisted，他们很高兴看到库的更改最终会终结
    Twisted，因为再也没有理由使用它了。'
- en: '**Glyph Lefkowitz: ''A vocal minority of Python users, who really didn''t like
    Twisted to begin with, sort of rejoiced that the library changes would finally
    kill Twisted.''**'
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Glyph Lefkowitz: ''Python 用户中有一小部分人，一开始就不喜欢 Twisted，他们很高兴看到库的更改最终会终结 Twisted。''**'
- en: What I predicted at the time, and I think this prediction has largely borne
    out, was that sanctioning event-driven concurrency in the standard library, and
    saying this is the way that Python does concurrency, would prompt a lot of new
    interest in Twisted.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我当时预测的，我认为这个预测在很大程度上已经得到证实，就是在标准库中批准事件驱动的并发，并说这是 Python 处理并发的正确方式，将会激发对 Twisted
    的新兴趣。
- en: The whole Python stack has really been converging on this idea of event-driven
    concurrency being the right way to do things. Previously, Twisted had to be a
    good server framework that you could use to deploy your applications. It also
    had to be a good GUI client framework, that you could use to write direct line
    apps and desktop apps.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 整个 Python 堆栈实际上已经趋向于这个观点：事件驱动并发是做事的正确方式。以前，Twisted 必须是一个好的服务器框架，你可以用它来部署你的应用程序。它还必须是一个好的
    GUI 客户端框架，你可以用它来编写直接行应用程序和桌面应用程序。
- en: Twisted needed to be a solid implementation of a bunch of design patterns, but
    it also had to be its own little standard library. It had to paper over a bunch
    of issues in the Python standard library that had a really slow release cycle
    and you couldn't necessarily depend on for the applications.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Twisted 需要是一个大量设计模式的稳固实现，但它也必须是一个自己的小标准库。它必须弥补 Python 标准库中的许多问题，这些问题有非常缓慢的发布周期，并且你无法保证它们适用于应用程序。
- en: '**Glyph Lefkowitz: ''This tool appeared to be proselytizing to them before
    it was solving their problems.''**'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Glyph Lefkowitz: ''这个工具在他们遇到问题之前，似乎是在向他们传教。''**'
- en: The sort of breaking point that Twisted reached, was that it also had to be
    this messenger for event-driven networking. People would come to Twisted wanting
    some feature, and then you would first have to sell them on the idea that async
    was a good idea at all. What this resulted in was that people would show up to
    Twisted with no shared expectations and no background. This tool appeared to be
    proselytizing to them before it was solving their problems.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Twisted 达到的某种断裂点，是它还必须成为事件驱动网络的消息传递者。人们会带着一些功能需求来到 Twisted，然后你必须首先说服他们异步确实是一个好主意。这导致的结果是，人们带着没有共享的期望和背景来到
    Twisted。这个工具在他们遇到问题之前，似乎是在向他们传教。
- en: In order to live in the Twisted ecosystem to some extent, to get the real benefits
    of it, you would have to start converting your code over to this async model,
    and that was a bunch of work. If you didn't know how it worked and it wasn't intuitive
    to you, it would be baffling. You would not be in a frame of mind where you'd
    be interested in hearing about it.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在一定程度上生活在 Twisted 生态系统之中，以获得其实际的好处，你将不得不开始将你的代码转换为这种异步模型，而这需要大量的工作。如果你不了解它是如何工作的，并且它对你来说不直观，那么你会感到困惑。你不会处于一个愿意了解它的心态。
- en: So the interesting thing is that even people who are stuck on Python 2.7, and
    will be for the next decade, show up to Twisted nowadays.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所以有趣的是，甚至那些还停留在 Python 2.7 上，并且将在接下来的十年里继续这样做的人，现在也开始出现在 Twisted 中。
- en: '**Driscoll**: Why are people stuck on Python 2.7?'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 为什么人们还停留在 Python 2.7 上？'
- en: '**Lefkowitz**: People kind of know that the standard library, like Python,
    has moved on. It''s all event-driven now, it''s all async, and they can''t use
    `asyncio` because they''re in a large corporate code base.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**Lefkowitz**: 人们多少知道标准库，就像 Python 一样，已经继续发展了。现在一切都是事件驱动的，都是异步的，他们不能使用 `asyncio`，因为他们在一个大型企业代码库中。'
- en: Initially the transition from Python 2 to Python 3 was, frankly, mismanaged.
    The core team, despite warnings from concerned users like myself, just didn't
    comprehend the scale of their own creation. They underestimated the migration
    effort by several orders of magnitude.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从Python 2到Python 3的过渡，坦白说，管理得并不好。核心团队，尽管像我这样的关心用户提出了警告，但并没有理解他们自己创造的规模。他们低估了迁移工作的难度。
- en: '**Glyph Lefkowitz: ''Initially the transition from Python 2 to Python 3 was,
    frankly, mismanaged.''**'
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨：**“起初，从Python 2到Python 3的过渡，坦白说，管理得并不好。”'
- en: The long life of Python 2 is a consequence of their responsible management of
    that mistake. The Python development team saw that users were not upgrading, and
    worked hard to understand why and to address the issues of big Python users. So
    it's not ideal, but it's significantly better than the alternative, which was
    for Python 3 to become Perl 6.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Python 2的长期存在是他们对此错误负责管理的后果。Python开发团队看到用户没有升级，并努力了解原因，并解决大型Python用户的问题。所以它不是理想的，但比替代方案好得多，即Python
    3变成Perl 6。
- en: '**Driscoll**: What''s your opinion of Python 3?'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔：**“你对Python 3有什么看法？”'
- en: '**Lefkowitz**: I''m in Python 3 in my day job now and I love it. After much
    blood, sweat and tears, I think it actually is a better programming language than
    Python 2 was. I think that it resolves a lot of inconsistencies.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**莱夫科维茨：**“我现在在日常工作中使用Python 3，并且非常喜欢它。经过许多血汗和泪水，我认为它实际上是一种比Python 2更好的编程语言。我认为它解决了许多不一致性。”'
- en: Most improvements should mirror quality of life issues and the really interesting
    stuff going on in Python is all in the ecosystem. I absolutely cannot wait for
    a PyPy 3.5, because one of the real downsides of using Python 3 at work is that
    I now have to deal with the fact that all of my code is 20 times slower.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数改进应该反映生活质量问题和Python生态系统中真正有趣的事情。我迫不及待地想要PyPy 3.5，因为在工作中使用Python 3的一个真正缺点是，我现在必须处理我的所有代码慢20倍的事实。
- en: When I do stuff for the Twisted ecosystem, and I run stuff on Twisted's infrastructure,
    we use Python 2.7 as a language everywhere, but we use PyPy as the runtime. It
    is just unbelievably fast! If you're running services, then they can run with
    a tenth of the resources.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当我为Twisted生态系统做事情，并在Twisted的基础设施上运行东西时，我们在所有地方都使用Python 2.7作为语言，但我们使用PyPy作为运行时。它快得令人难以置信！如果你在运行服务，那么它们可以用十分之一的资源运行。
- en: A PyPy process will take 80 MB of memory, but once you're running that it will
    actually take more memory per interpreter, but less memory per object. So if you're
    doing any Python stuff at scale, I think PyPy is super interesting.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: PyPy进程将占用80 MB的内存，但一旦运行起来，每个解释器实际上会占用更多的内存，但每个对象占用的内存会更少。所以如果你在进行任何大规模的Python开发，我认为PyPy非常有趣。
- en: One of my continued bits of confusion about the Python community is that there's
    this thing out there which, for Python 2 anyway, just makes all of your code 20
    times faster. This wasn't really super popular, in fact PyPy download stats still
    show that it's not as popular as Python 3, and Python 3 is really experiencing
    a huge uptick in popularity.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我对Python社区持续感到困惑的一点是，有一种东西（至少对于Python 2来说），可以让你的代码快20倍。这并不特别受欢迎，实际上PyPy的下载统计仍然显示它不如Python
    3受欢迎，而Python 3的受欢迎程度实际上正在大幅上升。
- en: '**Glyph Lefkowitz: ''The lack of viable Python 3 implementation for PyPy is
    starting to hurt it quite a bit.''**'
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨：**“PyPy缺乏可行的Python 3实现开始对其造成相当大的伤害。”'
- en: I do think that given that the uptake in popularity has happened, the lack of
    a viable Python 3 implementation for PyPy is starting to hurt it quite a bit.
    But it was around and very fast for a long time before Python 3 had even hit 10%
    of PyPy's downloads. So I keep wanting to predict that this is the year of PyPy
    on the desktop, but it just never seems to happen.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实认为，鉴于其受欢迎程度的提升，PyPy缺乏可行的Python 3实现开始对其造成相当大的伤害。但在Python 3下载量甚至达到PyPy的10%之前，PyPy已经存在并且运行得非常快。所以我一直想预测这是PyPy在桌面上的年份，但它似乎从未发生。
- en: '**Driscoll**: Why do you think PyPy has not taken off on the server?'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔：**“你认为为什么PyPy在服务器上没有流行起来？”'
- en: '**Lefkowitz**: I''m still not quite sure why, because especially for companies
    with significant infrastructure spend, it could save them literally millions of
    dollars a year to run.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**莱夫科维茨：**“我仍然不太确定原因，因为特别是对于在基础设施上投入巨大的公司来说，它每年可以节省数百万美元。”'
- en: You can tell companies that they will save millions of dollars a year if they
    rewrite all of their code. The problem is they would be taking a huge security
    risk, blowing up the size of their development team and making no feature progress
    in two years. That's a bad trade-off and I can see why you wouldn't want to do
    that.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以告诉公司，如果他们重写所有代码，每年可以节省数百万美元。问题是，他们会承担巨大的安全风险，扩大他们的开发团队规模，并且在两年内没有任何新功能的进展。这是一个糟糕的权衡，我明白为什么你不想这么做。
- en: With PyPy we say, "Why is that not the future? We just dropped in this new interpreter."
    There are reasons that we can't use it, such as that the scientific Python community's
    tooling does not work on PyPy yet. But that's actually the exception rather than
    the rule, and even NumPy programs largely work on PyPy. I wrote some OpenGL stuff
    last year that uses PyPy extensively and doing that was really interesting.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PyPy 我们会说，“为什么那不是未来？我们只是加入了这个新的解释器。”我们不能使用它的原因有很多，比如科学 Python 社区的工具在 PyPy
    上还不能工作。但实际上，这只是一个例外而不是规则，甚至 NumPy 程序在 PyPy 上也大多能工作。我去年写了一些大量使用 PyPy 的 OpenGL 代码，做这件事真的很有趣。
- en: '**Driscoll**: What do you like about PyPy?'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你喜欢 PyPy 的哪些方面？'
- en: '**Lefkowitz**: You write an OpenGL program using CPython and it''s struggling
    to stay at 50 frames per second. You do the same thing in PyPy and it''s 300,
    400 or 500 frames per second, not breaking a sweat and not taking up CPU.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**莱夫科维茨**：你用 CPython 编写 OpenGL 程序时，它很难保持在每秒 50 帧的速度。你在 PyPy 中做同样的事情，它可以达到每秒
    300、400 或 500 帧，毫不费力，而且不占用 CPU。'
- en: '**Glyph Lefkowitz: ''Where I would like to see Python go is for it to adopt
    more advanced technology.''**'
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨**：“我希望 Python 前进的方向是采用更多先进的技术。”'
- en: Where I would like to see Python go is for it to adopt more advanced technology,
    but for some reason we've collectively lagged behind. Another thing that I think
    will be critical for determining where Python goes is to what extent we can get
    away from *pip* as a tool for users to install applications.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望 Python 前进的方向是采用更多先进的技术，但不知何故，我们集体落后了。我认为决定 Python 前进方向的关键因素之一是我们能在多大程度上摆脱
    *pip* 作为用户安装应用的工具。
- en: I think that we need a better story for how you write cross-platform GUI code,
    even if it's really basic. For instance, `tkinter` is bad enough that people just
    don't use it. We need a better story for how you package applications.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为我们需要一个更好的故事来描述如何编写跨平台的 GUI 代码，即使它非常基础。例如，`tkinter` 已经足够糟糕，以至于人们根本不使用它。我们需要一个更好的故事来描述如何打包应用。
- en: I want to make an app that I can upload to the App Store, even before we start
    talking about mobile. There are all the issues of resource constraints that come
    along with that. I want to compile my app and put it on someone else's computer,
    but it is way too hard to do that right now.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我想制作一个我可以上传到 App Store 的应用，甚至在谈论移动之前。随之而来的是所有资源限制的问题。我想编译我的应用并将其放在别人的电脑上，但现在做这件事太难了。
- en: '**Driscoll**: Do you see making apps becoming easier?'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你看到制作应用变得更容易了吗？'
- en: '**Lefkowitz**: I''m encouraged by projects like pybee/briefcase, and I think
    that they''re starting to finally gain some traction.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**莱夫科维茨**：我对 pybee/briefcase 这样的项目感到鼓舞，我认为它们终于开始取得一些进展。'
- en: They're a very small project with very big problems in front of them. But they're
    also very determined and committed, with real experience of navigating those issues.
    This is evidenced by Pythonista, the iOS Python app, which uses their code.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 他们是一个规模很小的项目，面前却有着非常大的问题。但他们也非常坚定和投入，有着解决这些问题的实际经验。这可以从 Pythonista 这个 iOS Python
    应用中看出，它使用了他们的代码。
- en: I think that the story around building and integrating Python programs is getting
    better all the time. I am optimistic that within the next five years, it won't
    be unusual to see apps that are fully written in Python, rather than the small
    handful of examples that we have now.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为围绕构建和集成 Python 程序的故事一直在不断改进。我乐观地认为，在未来五年内，看到完全用 Python 编写的应用将不再罕见，而不是我们现在所拥有的少数几个例子。
- en: It would be a shame if the only way you could realistically get Python code
    from one computer to another was Docker. Python should be on your Mac, it should
    be on your Android, it should be on your Linux box, it should be in the cloud
    and it should be on your Raspberry Pi. In particular, with the emergence of the
    Internet of Things, I really wish more of those things were running Python web
    servers.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果唯一能够从一台计算机到另一台计算机实际获取Python代码的方式是Docker，那将是一件遗憾的事情。Python应该在你的Mac上，应该在你的Android上，应该在你的Linux机器上，应该在云中，应该在你的Raspberry
    Pi上。特别是随着物联网的出现，我真的希望更多的事情都在运行Python网络服务器。
- en: '**Glyph Lefkowitz: ''The mission is Python on every port, and we really feel
    like that''s an important mission.''**'
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨：**“任务是在每个端口上运行Python，我们真的觉得这是一个重要的任务。”'
- en: The mission is Python on every port, and we really feel like that's an important
    mission. So many services, the things that people actually use to talk to edge
    network devices such as Nginx, Apache, XM and BIND, are also in C.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 任务是在每个端口上运行Python，我们真的觉得这是一个重要的任务。许多服务，人们实际上用来与边缘网络设备（如Nginx、Apache、XM和BIND）通信的东西，也都在C语言中。
- en: We're writing all of our application code in these high-level languages. The
    things that are actually pulling the bytes off the wire and handing them to your
    application, then parsing them, are all barely-maintained C programs from 20 years
    ago. This is a real danger.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在用这些高级语言编写所有我们的应用程序代码。实际上从线路上提取字节并将其交给应用程序，然后解析它们的所有程序，都是20年前勉强维护的C程序。这是一个真正的危险。
- en: So the idea is that you can't do crypto in Python. Crypto primitives need to
    be in C, but those are a tiny part of a security application. Higher-level cryptographic
    constructions can (and really should) absolutely be assembled in Python, where
    you're dealing with composing multiple cryptographic primitives into a workable
    whole. Doing that composition in C is dangerous and error-prone.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，想法是你在Python中不能进行加密。加密原语需要用C语言编写，但它们只是安全应用程序的一小部分。高级加密构造可以在Python中（而且确实应该）完全组装，在那里你正在处理将多个加密原语组合成一个可行的整体。在C中进行这种组合是危险的且容易出错。
- en: In many cases, you have to drop down to a sublayer, but you have to write crypto
    primitives in a language where you can tell the underlying hardware to take fixed
    lengths of time to do things. So it has to be completely data input independent.
    It also has to be extremely fast, because you don't want to be paying a huge overhead
    to encrypt things. You just need to encrypt them no matter what.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，你必须降级到子层，但你必须用一种语言编写加密原语，这样你就可以告诉底层硬件以固定的时间长度来完成事情。因此，它必须完全独立于数据输入。它还必须非常快，因为你不希望为加密事物支付巨大的开销。你只需要加密它们即可。
- en: '**Driscoll**: Do you think that the Python language is here to stay?'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔：**你认为Python语言会一直存在吗？'
- en: '**Lefkowitz**: Wow, that''s an interesting question! I think that many languages
    that have had the lifetime that Python has had, have sort of slowly faded into
    legacy status.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**莱夫科维茨：**哇，这是一个有趣的问题！我认为许多寿命与Python相当的语言，都逐渐淡化为遗产状态。'
- en: Overall, I think one of the places that the Python language is going is forwards.
    It's still an unbelievably vibrant community and it's still growing. It was growing
    slowly at the beginning and it's growing slowly now, but it has been consistently
    growing over years and years. I think this is interesting because there are a
    lot of languages that have been gigantic flashes in the pan. Ruby was hugely popular
    for a while and then its popularity really plummeted with Rails losing popularity.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，我认为Python语言正在向前发展。它仍然是一个非常活跃的社区，并且仍在增长。它在开始时增长缓慢，现在也在缓慢增长，但多年来一直在持续增长。我认为这很有趣，因为有很多语言曾经是巨大的流星。Ruby曾经非常流行，但随着Rails的流行度下降，其受欢迎程度急剧下降。
- en: '**Glyph Lefkowitz: ''I think Python is going to have a much longer life than
    previous generations of languages.''**'
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨：**“我认为Python的生命周期将比之前的语言长得多。”'
- en: I think Python is going to have a much longer life than previous generations
    of languages, which were in their heyday super-hot technology, and then faded
    away with the next generation of stuff. I think Python is becoming its own next
    generation. Ironically, I think that Python 3 is a very small part of that.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为Python的生命周期将比之前那一代超级热门技术、然后随着下一代技术的出现而逐渐消失的语言长得多。我认为Python正在成为自己的下一代。具有讽刺意味的是，我认为Python
    3只是其中的一小部分。
- en: 'One thing that I really hope happens, and I think it''s another one that hasn''t
    yet, is Python in the browser. Skulpt, Pyjs, PyPy.js, and a bunch of other projects
    have kind of got things that are good proofs of concept, but again nobody''s sitting
    down and going: "I''m a new Python programmer and I want to do a frontend Python
    app. What do I do?"'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常希望发生的一件事，我认为这还没有发生，就是 Python 在浏览器中的应用。Skulpt、Pyjs、PyPy.js 以及其他一些项目已经提供了一些好的概念证明，但再次没有人坐下来想：“我是一个新的
    Python 程序员，我想做一个前端 Python 应用。我该怎么做？”
- en: 'The answer to that is inevitably that the thing that actually lets you do what
    you want to do is only on Git master in this one project. You''ve got to check
    it out and check out another project. When you ask the question: "Well, why can''t
    I `pip` install this?" The answer is: "We''re kind of still working on it and
    it''s not fully done."'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对此的回答不可避免的是，真正让你能够做你想做的事情的东西只在这个项目的 Git master 上。你必须检出它，检出另一个项目。当你问：“嗯，为什么我不能
    `pip` 安装这个？”时，答案是：“我们还在努力工作，它还没有完成。”
- en: '**Glyph Lefkowitz: ''I do think that Python will certainly keep growing in
    a variety of different backend capacities.''**'
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Glyph Lefkowitz: ''我认为 Python 将会在各种不同的后端能力上持续增长。''**'
- en: The answer should just be, of course, that you can *pip* install it and it shouldn't
    be harder than that. So that's where I hope the community will go, but I do think
    that Python will certainly keep growing in a variety of different backend capacities.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 答案当然是，你可以使用 *pip* 安装它，而且不应该比这更难。所以我希望社区会朝这个方向发展，但我确实认为 Python 将会在各种不同的后端能力上持续增长。
- en: I also think that where we're headed as a language and an ecosystem is towards
    greater diversity. It's going to take us to some surprising places that I can't
    predict, but I would say that it looks like Python is going to be around for a
    really long time. I think that for now, where Python's going is data science.
    There are obviously a lot of people interested in data science right now.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我还认为，作为一门语言和生态系统，我们将走向更加多样化的方向。它将带我们走向一些我无法预测的令人惊讶的地方，但我可以说，Python 很可能将长期存在。我认为现在
    Python 的方向是数据科学。显然，现在有很多人对数据科学感兴趣。
- en: '**Driscoll**: Python is being used a lot in the AI and machine learning boom.
    Why do you think this is?'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: Python 在人工智能和机器学习的热潮中被广泛使用。你认为这是为什么？'
- en: '**Lefkowitz**: AI is a bit of a catch-all term that tends to mean whatever
    the most advanced areas in current computer science research are.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**Lefkowitz**: 人工智能是一个有点笼统的术语，通常意味着当前计算机科学研究中最先进领域的任何东西。'
- en: There was a time when the basic graph-traversal stuff that we take for granted
    was considered AI. At that time, Lisp was the big AI language, just because it
    was higher-level than average and easier for researchers to do quick prototypes
    with. I think Python has largely replaced it in the general sense because, in
    addition to being similarly high-level, it has an excellent third-party library
    ecosystem, and a great integration story for operating system facilities.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经有一段时间，我们视为理所当然的基本图遍历技术被认为是人工智能。在那个时期，Lisp 是主要的 AI 语言，因为它比平均水平更高，研究人员更容易用它快速进行原型设计。我认为
    Python 在广义上已经很大程度上取代了它，因为除了具有类似的高级特性外，它还有一个出色的第三方库生态系统，以及操作系统设施的优秀集成故事。
- en: Lispers will object, so I should make it clear that I'm not making a precise
    statement about Python's position in a hierarchy of expressiveness, just saying
    that both Python and Lisp are in the same class of language, with things like
    garbage collection, memory safety, modules, namespaces and high-level data structures.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Lisp 程序员可能会反对，所以我应该明确指出，我并不是在精确地陈述 Python 在表达性层次结构中的位置，只是说 Python 和 Lisp 都属于同一类语言，具有垃圾回收、内存安全、模块、命名空间和高级数据结构等特点。
- en: In the more specific sense of machine learning, which is what more people mean
    when they say AI these days, I think there are more specific answers. The existence
    of NumPy and its accompanying ecosystem allows for a very research-friendly mix
    of high-level stuff, with very high-performance number-crunching. Machine learning
    is nothing if not very intense number-crunching.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在更具体的机器学习意义上，这是现在人们说 AI 时所指的，我认为有更具体的答案。NumPy 及其伴随的生态系统允许进行非常研究友好的高级功能与非常高性能的数值计算相结合。如果没有非常密集的数值计算，机器学习就什么也不是。
- en: '**Glyph Lefkowitz: ''The Python community''s focus on providing friendly introductions...
    to non-programmers, has really increased its adoption in the sister disciplines
    of data science and scientific computing.''**'
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Glyph Lefkowitz**：''Python社区专注于为非程序员提供友好的介绍...这实际上极大地增加了其在数据科学和科学计算等姊妹学科中的采用。'''
- en: The Python community's focus on providing friendly introductions and ecosystem
    support to non-programmers, has really increased its adoption in the sister disciplines
    of data science and scientific computing. Countless working statisticians, astronomers,
    biologists, and business analysts have become Python programmers and have improved
    the tooling. Programming is fundamentally a social activity and Python's community
    has acknowledged this more than any other language except JavaScript.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Python社区专注于为非程序员提供友好的介绍和生态系统支持，这实际上极大地增加了其在数据科学和科学计算等姊妹学科中的采用。无数的统计学家、天文学家、生物学家和商业分析师都成为了Python程序员，并改进了工具。编程本质上是一种社会活动，Python社区比任何其他语言（除了JavaScript）都更认可这一点。
- en: Machine learning is a particularly integration-heavy discipline, in the sense
    that any AI/machine learning system is going to need to ingest large amounts of
    data from real-world sources as training data, or system input, so Python's broad
    library ecosystem means that it is often well-positioned to access and transform
    that data.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习是一个特别需要集成的学科，从任何AI/机器学习系统都需要从现实世界来源摄取大量数据作为训练数据或系统输入的角度来看，Python广泛的库生态系统意味着它通常处于良好的位置来访问和转换这些数据。
- en: '**Driscoll**: What could be done to make Python a better language for AI and
    machine learning?'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：为了使Python成为更适合AI和机器学习的语言，我们可以做些什么？'
- en: '**Lefkowitz**: Using more PyPy. Right now, the data science/machine learning
    ecosystem in Python is very focused around the CPython runtime, which is unfortunate.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**Lefkowitz**：使用更多的PyPy。目前，Python中的数据科学/机器学习生态系统非常专注于CPython运行时，这是不幸的。'
- en: This means that new tools are often created without testing on PyPy, which means
    that when they have performance bottlenecks, rewrites of core logic in C (or,
    if you're lucky, Cython) are an inevitable part of any significant project.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着新工具往往在没有在PyPy上进行测试的情况下创建，这意味着当它们出现性能瓶颈时，核心逻辑在C（或者如果你幸运的话，是Cython）中的重写是任何重大项目的必然部分。
- en: '**Glyph Lefkowitz: ''Right now the data science/machine learning ecosystem
    in Python is very focused around the CPython runtime, which is unfortunate.''**'
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Glyph Lefkowitz**：''目前Python中的数据科学/机器学习生态系统非常专注于CPython运行时，这是不幸的。'''
- en: This is largely a social problem and the technical challenges preventing some
    parts of the current Python AI/machine learning infrastructure from running, or
    running well, on PyPy are not significant in terms of the resources they would
    take to fix if their maintainers cared. But, from the perspective of someone uninvolved
    with those projects, who is starting a project and trying to use PyPy, it's just
    one inscrutable failure after another in some code you don't know anything about.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这在很大程度上是一个社会问题，当前Python AI/机器学习基础设施在某些部分无法运行或运行良好的技术挑战，如果其维护者关心，所需修复的资源并不显著。但是，从那些项目无关的旁观者角度来看，谁在启动一个项目并尝试使用PyPy，这只是一些你一无所知的代码中一个接一个无法解释的失败。
- en: This is true in several fields of Python's application and I just wish that
    more folks would think of Python as a language that can be very fast, and competitive
    with Java or even C++, and plan accordingly when evaluating their testing matrix.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这在Python应用的几个领域都是真的，我只希望更多的人能将Python视为一种可以非常快速且与Java或甚至C++竞争的语言，并在评估他们的测试矩阵时相应地规划。
- en: '**Glyph Lefkowitz: ''I just wish that more folks would think of Python as a
    language that can be very fast, and competitive with Java or even C++.''**'
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Glyph Lefkowitz**：''我只希望更多的人能将Python视为一种可以非常快速且与Java或甚至C++竞争的语言。'''
- en: '**Driscoll**: What changes would you like to see in future Python releases?'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：你希望在未来Python版本中看到哪些变化？'
- en: '**Lefkowitz**: My main wish is for there to be some good defaults for getting
    new projects set up.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**Lefkowitz**：我的主要愿望是希望有一些好的默认设置来为新项目设置。'
- en: For example, today you have to know that when you install Python, you also need
    to install `pip`, and then you also need to create a `virtualenv`, but all of
    these steps are optional. You also have to hand-create a `setup.py` to describe
    your project, then learn about building wheels, specifying dependencies and so
    on.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，今天你必须知道，当你安装Python时，你还需要安装`pip`，然后你还需要创建一个`virtualenv`，但所有这些步骤都是可选的。你还需要手动创建一个`setup.py`来描述你的项目，然后学习如何构建wheel，指定依赖项等等。
- en: What I'd like to see is Python presenting an integrated view of best practices,
    that makes it harder to get lost in the weeds of installing stuff. This could
    be just having a `new project` button, so that a Python project would look like
    any other kind of document to a user just getting started. Also, Python could
    look more like an app, even if that app required lots of command-line use.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望看到Python展示一个最佳实践的集成视图，使得用户在安装东西时更难迷失。这可以只是一个“新建项目”按钮，这样Python项目对刚开始的用户来说就像任何其他类型的文档一样。此外，Python可以更像是一个应用程序，即使这个应用程序需要大量的命令行使用。
- en: Secondary to that, I'd like to see tools that make it easier for library authors
    to protect private implementation details from accidental breakage. For example,
    you can import the stuff that the library has imported, rather than importing
    the stuff that the library is trying to define. Right now, upgrading Python libraries
    is extra risky, because every single user of every library might have made a mistake
    like this and be depending on a bug.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我希望看到一些工具，使库的作者更容易保护私有实现细节免受意外破坏。例如，你可以导入库导入的内容，而不是导入库试图定义的内容。目前，升级Python库风险很大，因为每个库的每个用户都可能犯这样的错误，并依赖于这个错误。
- en: The tool that I want to make it easy for users to create projects would benefit
    a lot from coming with the language, but this type of boundary enforcement around
    modules would have to be built into the language. It would be extremely hard to
    build it in the ecosystem.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要制作的工具，让用户能够轻松创建项目，将极大地受益于与语言的结合，但这种模块边界强制措施必须内置于语言中。在生态系统内构建它将极其困难。
- en: '**Driscoll**: So what do you think is the best thing about the Python community?'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：那么你认为Python社区最好的是什么？'
- en: '**Lefkowitz**: One of the things that I think is really good is the commitment
    to diversity. A lot of people think that this is a political thing or that there
    are different factions for pro-diversity and anti-diversity. Diversity is almost
    seen as taking away from the technical stuff somehow.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**莱夫科维茨**：我认为真正好的是对于多元化的承诺。很多人认为这是一件政治性的事情，或者认为有支持多元化和反对多元化的不同派别。多元化几乎被视为以某种方式削弱了技术性。'
- en: I can just share my own personal journey to becoming interested in diversity
    and social justice. I looked around a Twisted project and I said, "Why are we
    100% dudes? What is going on here? What have we done to shut women out of this
    project?"
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以分享我个人的经历，从对多元化和社会正义感兴趣开始。我环顾了一下Twisted项目，我说：“为什么我们这里100%都是男性？这里发生了什么？我们做了什么让女性远离这个项目？”
- en: '**Glyph Lefkowitz: ''We were clearly missing out on half the talent the world
    had to offer.''**'
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨**：“我们显然错失了世界上半数的人才。”'
- en: I felt bad, but also that we were clearly missing out on half the talent the
    world had to offer in just the most obvious way. We were also all white and there
    are lots of people of color who also have talent to offer. They weren't showing
    up. So there's certainly a degree of altruistic impulses, but I also think that
    many people inside the Python community have accepted that this is a real skills
    gap issue.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我感到很抱歉，但我们显然在以最明显的方式错失了世界上半数的人才。我们所有人都是白人，而有色人种中也有许多有才华的人。他们没有出现。所以，确实存在一定程度的利他主义冲动，但我认为Python社区内部许多人已经接受这是一个真正的技能差距问题。
- en: If we don't get a diverse group of people working on our stuff, and getting
    involved in our community, then we're not going to make software that's useful
    to a lot of the world. We're going to be missing out on a lot of talent and we're
    going to be missing out on a lot of interesting voices that will challenge us,
    and make us a more interesting community.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们无法吸引到多元化的团队来参与我们的项目，并融入我们的社区，那么我们就不可能开发出对世界上的大多数人都有用的软件。我们将错失大量的人才，也将错失许多有趣的见解，这些见解将挑战我们，使我们的社区更加有趣。
- en: '**Glyph Lefkowitz: ''If we don''t get a diverse group of people working on
    our stuff... then we''re not going to make software that''s useful.''**'
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨：**“如果我们不能让不同背景的人参与到我们的工作中来……那么我们不会开发出有用的软件。”'
- en: So when we talked earlier about the technical directions that the Python community
    has been moving in, those directions are aided by this pursuit of diversity. I
    believe that one of the reasons that Python is popular in life sciences is that
    it has a different demographic breakdown than the rest of the tech industry. I
    think Python has made real inroads there, in large part because people look at
    the Python community and are not scared off. It's not an intimidating or exclusionary
    type of environment.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当我们之前讨论Python社区正在移动的技术方向时，这些方向得益于对多样性的追求。我相信Python在生命科学中受欢迎的部分原因是因为它的人口结构与其他科技行业不同。我认为Python在这方面取得了真正的突破，很大程度上是因为人们看到Python社区时并不感到害怕。它不是一个令人畏惧或排斥的环境。
- en: '**Glyph Lefkowitz: ''The Python community is not perfect. We still have a long
    way to go.''**'
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨：**“Python社区并不完美。我们还有很长的路要走。”'
- en: Now that said, I felt a little weird commenting on this because I also feel
    that the Python community is not perfect. We still have a long way to go. The
    tech industry overall is highlighting women, just because that's the most obvious
    demographic disparity, but there are also lots of other underrepresented groups.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我觉得评论这一点有点奇怪，因为我也有同样的感觉，即Python社区并不完美。我们还有很长的路要走。整个科技行业都在突出女性，因为这是最明显的人口差异，但还有很多其他代表性不足的群体。
- en: When you look at the representation of women throughout the software industry,
    you've got about 25 to 30%, depending on how it's measured. Then you look at the
    open source community and it's more like 5% women, which is a lot better than
    it was a couple of years ago, when it was about 1%.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当你观察整个软件行业中女性的代表情况时，大约有25%到30%，具体取决于如何衡量。然后你看开源社区，女性比例大约是5%，这比几年前好多了，那时大约只有1%。
- en: The Python community is considerably better than that, but still when you look
    at people who are actively participating in projects, it's not even really hitting
    the industry average, let alone the overall demographic average.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Python社区在这方面做得相当好，但当你看那些积极参与项目的人时，它甚至没有达到行业平均水平，更不用说整体人口平均水平了。
- en: '**Driscoll**: How can the Python community encourage more diversity?'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里科：**Python社区如何鼓励更多多样性？'
- en: '**Lefkowitz**: I think we still have a long way to go, but the fact that the
    Python community has, in the large part, acknowledged the real problem that''s
    affecting a lot of aspects of technology is important. Diversity is an issue that''s
    affecting the culture around technology.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**莱夫科维茨：**“我们认为我们还有很长的路要走，但Python社区在很大程度上已经承认了影响技术许多方面的真正问题，这是重要的。多样性是影响技术文化的一个问题。”'
- en: '**Glyph Lefkowitz: ''Diversity is an issue that''s affecting the culture around
    technology.''**'
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨：**“多样性是影响技术文化的一个问题。”'
- en: You have other communities, like Clojure or Erlang, which have fantastic technology
    on offer, but they don't really care about the diversity problem. You can see
    that reflected in a monoculture among their thinking and the lack of success becoming
    more popular.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你还有其他社区，比如Clojure或Erlang，它们提供了一些非常棒的技术，但它们并不真正关心多样性问题。你可以在它们的思维单一化和缺乏成功变得流行中看到这一点。
- en: I think a community which is largely following in Python's footsteps is Rust.
    Despite it being extremely low-level and somewhat tedious to write, they do have
    some great ideas in that language. As a result of being more inclusive and thoughtful
    about the way the community is organized, Rust is skyrocketing in popularity from
    very far down on the list of languages.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为在很大程度上效仿Python的社区是Rust。尽管它非常底层且编写起来有些繁琐，但它们确实在那个语言中有一些很好的想法。由于更加包容并深思熟虑地组织社区，Rust的受欢迎程度从列表的底部飙升。
- en: '**Glyph Lefkowitz: ''I think that the inclusiveness of the Python community
    is definitely the best thing about it.''**'
  id: totrans-154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**莱夫科维茨：**“我认为Python社区的包容性绝对是它最好的地方。”'
- en: So I think that the inclusiveness of the Python community is definitely the
    best thing about it. That is not just a comment on its political orientation,
    but a comment on its ability to produce interesting technology in the future.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我认为Python社区的包容性绝对是它最好的地方。这不仅仅是对其政治倾向的评论，也是对其未来产生有趣技术能力的评论。
- en: I think that Python has endured by being friendly. It's open to lots of people
    from new and different communities. I don't know how to predict the future really,
    because it's going to depend on who shows up next.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为Python之所以能够持续发展，是因为它对很多人都很友好。它欢迎来自新社区和不同社区的人们。我真的不知道如何预测未来，因为这将取决于接下来会出现谁。
- en: '**Driscoll**: Thank you, Glyph Lefkowitz.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 谢谢，Glyph Lefkowitz。'
