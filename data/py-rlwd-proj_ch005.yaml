- en: Chapter 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章
- en: 'Project Zero: A Template for Other Projects'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 项目零：其他项目的模板
- en: This is a book of projects. To make each project a good portfolio piece, we’ll
    treat each project as an enterprise software product. You can build something
    that could be posted to a company’s (or organization’s) internal repository.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本项目书。为了使每个项目成为一份优秀的投资组合作品，我们将每个项目视为一个企业级软件产品。你可以构建可以发布到公司（或组织）内部存储库的东西。
- en: For this book, we’ll define some standards that will apply to all of these projects.
    The standards will identify deliverables as a combination of files, modules, applications,
    notebooks, and documentation files. While each enterprise is unique, the standards
    described here are consistent with my experience as a consultant with a variety
    of enterprises.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，我们将定义一些标准，这些标准将适用于所有这些项目。这些标准将确定可交付成果为文件、模块、应用程序、笔记本和文档文件的组合。虽然每个企业都是独特的，但这里描述的标准与我在各种企业作为顾问的经验是一致的。
- en: We want to draw an informal boundary to avoid some of the steps required to
    post to the PyPI website. Our emphasis is on a product with test cases and enough
    documentation to explain what it does. We don’t want to go all the way to creating
    a project in PyPI. This allows us to avoid the complications of a build system
    and the associated `pyproject.toml` file.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想划出一个非正式的界限，以避免发布到PyPI网站所需的一些步骤。我们的重点是具有测试用例和足够文档来解释其功能的产品。我们不希望完全创建一个PyPI项目。这使我们能够避免构建系统的复杂性以及相关的`pyproject.toml`文件。
- en: These projects are not intended to produce generic, reusable modules. They’re
    applications specific to a problem domain and a dataset. While these are specific
    solutions, we don’t want to discourage anyone who feels motivated to generalize
    a project into something generic and reusable.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这些项目不是为了产生通用、可重用的模块。它们是特定于问题域和数据集的应用程序。虽然这些都是特定解决方案，但我们不想阻止任何感到有动力将项目推广为通用和可重用的人。
- en: 'This chapter will show the general outline of each project. Then we’ll look
    at the set of deliverables. This chapter ends with project zero – an initial project
    that will serve as a template for others. We’ll cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将展示每个项目的总体概述。然后我们将查看可交付成果的集合。本章以项目零结束——一个作为其他项目模板的初始项目。我们将涵盖以下主题：
- en: An overview of the software quality principles that we’ll try to emphasize.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对我们将尝试强调的软件质量原则的概述。
- en: A suggested approach to completing the project as a sequence of project sprints.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成项目作为一系列项目冲刺的建议方法。
- en: A general overview of the list of deliverables for each project.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个项目可交付成果列表的一般概述。
- en: Some suggested tools. These aren’t required, and some readers may have other
    choices.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些建议的工具。这些不是必需的，一些读者可能有其他选择。
- en: A sample project to act as a template for subsequent projects.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为后续项目模板的样本项目。
- en: We’ll start with an overview of some characteristics of high-quality software.
    The idea is to establish some standards for the deliverables of each project.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从高质量软件的一些特性概述开始。目的是为每个项目的可交付成果建立一些标准。
- en: 1.1 On quality
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1 关于质量
- en: It helps to have a clear definition of expectations. For these expectations,
    we’ll rely on the ISO 25010 standard to define quality goals for each project.
    For more details, see [https://iso25000.com/index.php/en/iso-25000-standards/iso-25010](https://iso25000.com/index.php/en/iso-25000-standards/iso-25010).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个清晰的期望定义是有帮助的。对于这些期望，我们将依赖ISO 25010标准来定义每个项目的质量目标。更多详情，请参阅[https://iso25000.com/index.php/en/iso-25000-standards/iso-25010](https://iso25000.com/index.php/en/iso-25000-standards/iso-25010)。
- en: 'The ISO/IEC 25010:2011 standard describes **Systems and software** **Quality
    Requirements and Evaluation** (**SQuaRE**). This standard provides eight characteristics
    of software. These characteristics are as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ISO/IEC 25010:2011标准描述了**系统和软件** **质量要求和评估**（**SQuaRE**）。本标准提供了软件的八个特性。这些特性如下：
- en: '**Functional suitability**. Does it do what we need? It is complete, correct,
    and appropriate for the user’s expressed (and implied) needs? This is the focus
    of each project’s description.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能性适宜性**。它是否做了我们需要的？它是完整的、正确的，并且适合用户表达（和暗示）的需求？这是每个项目描述的重点。'
- en: '**Performance efficiency**. Does it work quickly? Does it use the minimum resources?
    Does it have enough capacity to meet the user’s needs? We won’t address this deeply
    in this book. We’ll talk about writing performance tests and ways to address performance
    concerns.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能效率**. 它是否工作得快？它是否使用最少的资源？它是否有足够的容量来满足用户的需求？我们不会在这里深入讨论这个问题。我们将讨论编写性能测试和解决性能问题的方法。'
- en: '**Compatibility**. Does it co-exist with other software? Does it properly interoperate
    with other applications? To an extent, Python can help assure an application interoperates
    politely with other applications. We’ll emphasize this compatibility issue in
    our choices of file formats and communication protocols.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**兼容性**. 它能否与其他软件共存？它是否能够正确地与其他应用程序交互？在一定程度上，Python可以帮助确保应用程序与其他应用程序礼貌地交互。我们将强调我们在选择文件格式和通信协议时的兼容性问题。'
- en: '**Usability**. There are a number of sub-characteristics that help us understand
    usability. Many of the projects in this book focus on the **command-line interface**
    (**CLI**) to assure a bare minimum of learnability, operability, error protection,
    and accessibility. A few projects will include a web services API, and others
    will make use of the GUI interface of JupyterLab to provide interactive processing.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性**. 有许多子特性有助于我们理解可用性。本书中的许多项目都专注于命令行界面（CLI），以确保最低限度的可学习性、可操作性、错误保护和可访问性。一些项目将包括网络服务API，而其他项目将利用JupyterLab的GUI界面提供交互式处理。'
- en: '**Reliability**. Is it available when the users want it? Can we detect and
    repair problems? We need to make sure we have all of the parts and pieces so we
    can use the software. We also need to make sure we have a complete set of tests
    to confirm that it will work.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性**. 当用户需要时它是否可用？我们能否检测和修复问题？我们需要确保我们拥有所有必要的部件和组件，以便我们可以使用该软件。我们还需要确保我们有一套完整的测试来确认它将正常工作。'
- en: '**Security**. As with usability, this is a deep topic. We’ll address some aspects
    of security in one of the projects. The remaining projects will use a CLI permitting
    us to rely on the operating system’s security model.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**. 就像可用性一样，这是一个深奥的话题。我们将在一个项目中讨论一些安全性的方面。其余的项目将使用命令行界面（CLI），这样我们就可以依赖操作系统的安全模型。'
- en: '**Maintainability**. Can we diagnose problems? Can we extend it? We’ll look
    at documentation and test cases as essential for maintainability. We’ll also leverage
    a few additional project files to make sure our project can be downloaded and
    extended by others.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可维护性**. 我们能否诊断问题？我们能否扩展它？我们将把文档和测试案例视为维护的关键。我们还将利用一些额外的项目文件，以确保我们的项目可以被他人下载和扩展。'
- en: '**Portability**. Can we move to a new Python version? New hardware? This is
    very important. The Python ecosystem is rapidly evolving. Since all of the libraries
    and packages are in a constant state of change, we need to be able to define precisely
    what packages our project depends on, and confirm that it works with a new candidate
    set of packages.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可移植性**. 我们能否迁移到新的Python版本？新的硬件？这非常重要。Python生态系统正在快速发展。由于所有库和包都处于不断变化的状态，我们需要能够精确地定义我们的项目依赖于哪些包，并确认它与新候选包集兼容。'
- en: Two of these characteristics (Compatibility and Portability) are features of
    Python. A wise choice of interfaces assures that these characteristics are met.
    These are sometimes described as architectural decisions since they influence
    how multiple applications work together.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个特性（兼容性和可移植性）是Python的特性。明智的接口选择确保这些特性得到满足。这些有时被描述为架构决策，因为它们影响多个应用程序如何协同工作。
- en: For Security, we will rely on the operating system. Similarly, for Usability,
    we’ll limit ourselves to CLI applications, relying on long-standing design principles.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于安全性，我们将依赖操作系统。同样，对于可用性，我们将限制自己使用命令行界面（CLI）应用程序，依赖长期的设计原则。
- en: The idea of Performance is something we won’t emphasize here. We will point
    out places where large data sets will require some careful design. The choice
    of data structure and algorithm is a separate subject area. Our objective in this
    book is to expose you to projects that can provide the stimulus for a deeper study
    of performance issues.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 性能的概念在这里我们不会强调。我们将指出在处理大数据集时需要仔细设计的地方。数据结构和算法的选择是另一个独立的话题。本书的目标是向您展示可以激发对性能问题进行深入研究的项目。
- en: Three of these quality characteristics — Functional suitability, Reliability,
    and Maintainability — are the real focus of these projects. These seem to be essential
    elements of good software design. These are the places where you can demonstrate
    your Python programming skills.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个质量特性——功能性适宜性、可靠性和可维护性——是这些项目的真正焦点。这些似乎是良好软件设计的必要元素。这些是你可以展示你的Python编程技能的地方。
- en: 'Another view is available from **The Twelve-Factor App** ( [https://12factor.net](https://12factor.net)).
    This is narrowly focused on web applications. The concepts provide deeper insights
    and more concrete technical guidance into the quality characteristics shown above:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个视角来自**《十二要素应用》**（[https://12factor.net](https://12factor.net)）。这个视角主要关注Web应用程序。这些概念提供了对上述质量特性的更深入见解和更具体的技术指导：
- en: Codebase. ”One codebase tracked in revision control, many deploys.” We’ll use
    **Git** and **GitHub** or perhaps one of the other version managers supported
    by **sourceforge**.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码库。 “在一个代码库中进行版本控制，进行多次部署。” 我们将使用**Git**和**GitHub**或可能使用**sourceforge**支持的另一个版本管理器。
- en: Dependencies. ”Explicitly declare and isolate dependencies.” Traditionally,
    a Python `requirements.txt` file was used for this. In this book, we’ll move forward
    to using a `pyproject.toml` file.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 依赖项。 “明确声明并隔离依赖项。” 传统上，Python的`requirements.txt`文件用于此目的。在这本书中，我们将继续使用`pyproject.toml`文件。
- en: Config. ”Store config in the environment.” We won’t emphasize this, but Python
    offers numerous ways to handle configuration files.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置。 “将配置存储在环境中。” 我们不会强调这一点，但Python提供了多种处理配置文件的方法。
- en: Backing services. ”Treat backing services as attached resources.” We touch on
    this in a few places. How storage, messages, mail, or caching work isn’t something
    we’ll examine deeply.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 后备服务。 “将后备服务视为附加资源。” 我们在几个地方提到了这一点。存储、消息、邮件或缓存的工作方式不是我们将深入研究的内容。
- en: Build, release, run. ”Strictly separate build and run stages.” For command-line
    applications, this means we should deploy the application into a ”production”
    environment to use the high-value data and produce the results that the enterprise
    needs. We want to avoid running things in our desktop development environment.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建、发布、运行。 “严格分离构建和运行阶段。” 对于命令行应用程序来说，这意味着我们应该将应用程序部署到“生产”环境以使用高价值数据并产生企业所需的结果。我们希望避免在我们的桌面开发环境中运行这些应用程序。
- en: Processes. ”Execute the app as one or more stateless processes.” CLI applications
    tend to be structured this way without making any additional effort.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进程。 “以一个或多个无状态进程执行应用程序。” CLI应用程序通常无需额外努力就按这种方式构建。
- en: Port binding. ”Export services via port binding.” We won’t emphasize this; it’s
    very specific to web services.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 端口绑定。 “通过端口绑定导出服务。” 我们不会强调这一点；它非常特定于Web服务。
- en: Concurrency. ”Scale out via the process model.” This is a subject for the interested
    reader who wants to process very large data sets. We won’t emphasize it in the
    main text. We will suggest some of these topics in the ”Extras” section of some
    chapters.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并发。 “通过进程模型进行扩展。” 这是感兴趣读者想要处理非常大的数据集的主题。我们不会在正文中进行强调。我们将在某些章节的“额外内容”部分建议一些这些主题。
- en: Disposability. ”Maximize robustness with fast startup and graceful shutdown.”
    CLI applications tend to be structured this way, also.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可用性。 “通过快速启动和优雅关闭最大化鲁棒性。” CLI应用程序也倾向于以这种方式构建。
- en: Dev/prod parity. ”Keep development, staging, and production as similar as possible.”
    While we won’t emphasize this deeply, our intent with CLI applications is to expose
    the distinctions between development and production with command-line arguments,
    shell environment variables, and configuration files.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发/生产一致性。 “尽可能保持开发、测试和生产环境的相似性。” 虽然我们不会深入强调这一点，但我们的CLI应用程序的意图是通过命令行参数、shell环境变量和配置文件来揭示开发和生产之间的区别。
- en: Logs. ”Treat logs as event streams.” We will suggest applications write logs,
    but we won’t provide more detailed guidance in this book.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日志。 “将日志视为事件流。” 我们将建议应用程序记录日志，但在这本书中不会提供更详细的指导。
- en: Admin processes. ”Run admin/management tasks as one-off processes.” A few of
    the projects will require some additional administrative programming. These will
    be built as deliverable CLI applications, complete with an acceptance test suite.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理进程。 “将管理/管理任务作为一次性进程运行。” 一些项目将需要一些额外的管理编程。这些将作为可交付的CLI应用程序构建，包括完整的验收测试套件。
- en: Our objective is to provide project descriptions and lists of deliverables that
    try to conform to these quality standards. As we noted earlier, each enterprise
    is unique, and some organizations will fall short of these standards, while some
    will exceed them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是提供项目描述和交付物清单，这些清单试图符合这些质量标准。正如我们之前提到的，每个企业都是独特的，一些组织可能无法达到这些标准，而一些组织可能会超过它们。
- en: 1.1.1 More Reading on Quality
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.1.1 关于质量的更多阅读
- en: In addition to the ISO standard, the IEEE 1061 standard also covers software
    quality. While it has been inactive since 2020, it contains some good ideas. The
    standard is focused on quality *metrics*, which dives deeply into the idea of
    analyzing software for quality factors.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了ISO标准之外，IEEE 1061标准也涵盖了软件质量。虽然它自2020年以来一直处于不活跃状态，但它包含了一些好想法。该标准侧重于质量**指标**，深入分析了软件质量因素。
- en: It can also help to read [https://en.wikipedia.org/wiki/ISO/IEC_9126](https://en.wikipedia.org/wiki/ISO/IEC_9126)
    for some background on the origins of the ISO standard.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读以下链接以了解ISO标准的起源背景可能会有所帮助：[https://en.wikipedia.org/wiki/ISO/IEC_9126](https://en.wikipedia.org/wiki/ISO/IEC_9126)。
- en: 'When doing more reading on this topic, it can help to recognize the following
    three terms:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究这个主题时，识别以下三个术语可能会有所帮助：
- en: '**Factors** are an external view of the software. They reflect the user’s understanding.
    Some of the underlying quality characteristics are not directly visible to users.
    Maintainability, for example, may appear to users as a reliability or usability
    problem because the software is difficult to repair or extend.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**因素**是软件的外部视角。它们反映了用户的理解。一些基本的质量特性对用户来说可能并不直接可见。例如，可维护性可能看起来像是可靠性或可用性问题，因为软件难以修复或扩展。'
- en: '**Criteria** come from an internal view of the software. Quality criteria are
    the focus of the project’s deliverables. Our project code should reflect the eight
    quality characteristics listed above.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准**来自软件的内部视角。质量标准是项目交付物的焦点。我们的项目代码应该反映上述列出的八个质量特性。'
- en: '**Metrics** are how we can control the factors that are seen by the user. We
    won’t emphasize quality metrics. In some cases, tools like **pylint** provide
    tangible measurements of static code quality. This isn’t a comprehensive tool
    for software quality in general, but it provides an easy starting point for a
    few key metrics related to complexity and maintainability.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标**是我们如何控制用户所见因素的方法。我们不会强调质量指标。在某些情况下，像**pylint**这样的工具可以提供静态代码质量的实质性度量。这并不是一般软件质量的全面工具，但它为与复杂性和可维护性相关的几个关键指标提供了一个简单的起点。'
- en: Given these standards for high-quality software, we can turn our attention to
    the sequence of steps for building these files. We’ll suggest a sequence of stages
    you can follow.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定了高质量软件的标准之后，我们可以将注意力转向构建这些文件的步骤顺序。我们将建议一个你可以遵循的阶段顺序。
- en: 1.2 Suggested project sprints
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2 建议的项目冲刺
- en: We hesitate to provide a detailed step-by-step process for building software.
    For more experienced developers, our sequence of steps may not match their current
    practices. For less experienced developers, the suggested process can help by
    providing a rational order in which the deliverables can be built.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们犹豫是否提供构建软件的详细分步过程。对于更有经验的开发者，我们的步骤顺序可能不符合他们的当前实践。对于经验较少的开发者，建议的过程可以通过提供一个合理的顺序来帮助构建交付物。
- en: There was a time when a ”statement of work” with a detailed list of specific
    tasks was a central part of a software development effort. This was often part
    of a ”waterfall” methodology where requirements flowed to analysts who wrote specifications
    that flowed down to designers who wrote high-level designs that flowed down to
    coders. This wasn’t a great way to build software, and has been largely supplanted
    by Agile methods. For more information on Agility, see [https://agilemanifesto.org](https://agilemanifesto.org).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经有一段时间，一份包含详细具体任务列表的“工作说明书”是软件开发工作的一个核心部分。这通常是“瀑布”方法的一部分，其中需求流向分析师，他们编写规范，然后规范流向设计师，设计师编写高级设计，最后流向编码者。这不是构建软件的好方法，已经被敏捷方法在很大程度上取代。有关敏捷的更多信息，请参阅[https://agilemanifesto.org](https://agilemanifesto.org)。
- en: The Agile approach lets us examine a project both as a series of steps to be
    completed, as well as a collection of deliverables that need to be created. We’ll
    describe the steps first, avoiding too much emphasis on details. We’ll revisit
    the deliverables, and in those sections, dive a little more deeply into what the
    final product needs to be.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷方法让我们既能将项目视为一系列要完成的步骤，也能将其视为需要创建的一系列交付物。我们首先描述步骤，避免过多强调细节。我们将重新访问交付物，在这些部分中，我们将更深入地探讨最终产品需要是什么。
- en: The suggested approach follows the ”Agile Unified Process” ( [https://www.methodsandtools.com/archive/archive.php?id=21](https://www.methodsandtools.com/archive/archive.php?id=21)),
    which has four general phases. We’ll subdivide one of the phases to distinguish
    two important kinds of deliverables.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 建议的方法遵循“敏捷统一流程”（[https://www.methodsandtools.com/archive/archive.php?id=21](https://www.methodsandtools.com/archive/archive.php?id=21)），它有四个一般阶段。我们将细分其中一个阶段以区分两种重要的交付物。
- en: 'We suggest tackling each project in the following five phases:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议将每个项目分为以下五个阶段：
- en: Inception. Ready the tools. Organize the project directory and virtual environment.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动阶段。准备工具。组织项目目录和虚拟环境。
- en: 'Elaboration, part 1: Define done. This is implemented as acceptance test cases.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 详细阐述，第一部分：定义完成。这通过验收测试用例来实现。
- en: 'Elaboration, part 2: Define components and some tests. This is implemented
    as unit test cases for components that need to be built.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 详细阐述，第二部分：定义组件和一些测试。这通过为需要构建的组件实现单元测试用例来实现。
- en: Construction. Build the software.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建。构建软件。
- en: 'Transition. Final cleanup: make sure all tests pass and the documentation is
    readable.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过渡阶段。最终清理：确保所有测试通过，文档可读。
- en: These efforts don’t proceed in a simple linear fashion. It’s often necessary
    to iterate between elaboration and construction to create features separately.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些努力并不是以简单的线性方式进行。通常需要在详细阐述和构建之间迭代，以分别创建功能。
- en: It often works as shown in [*Figure 1.1*](#1.1).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 它通常如[*图1.1*](#1.1)所示。
- en: '![Figure 1.1: Development Phases and Cycles ](img/file4.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1：开发阶段和周期](img/file4.jpg)'
- en: 'Figure 1.1: Development Phases and Cycles'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：开发阶段和周期
- en: This figure provides a very coarse overview of the kinds of activities we’ll
    discuss below. The important concept is iterating between the elaboration and
    construction phases. It’s difficult to fully design a project before constructing
    all of the code. It’s easier to design a little, construct a little, and refactor
    as needed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此图提供了一个非常粗略的概述，我们将讨论以下活动。重要概念是在详细阐述和构建阶段之间迭代。在构建所有代码之前，很难完全设计一个项目。设计一点，构建一点，根据需要重构，会更容易。
- en: 'For a complex project, there may be a series of transitions to production.
    Often a ”minimally viable product” will be created to demonstrate some of the
    concepts. This will be followed by products with more features or features better
    focused on the user. Ideally, it will have both kinds of enhancements: more features
    and a better focus on the user’s needs.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于复杂项目，可能会有一系列过渡到生产的步骤。通常，会创建一个“最小可行产品”来展示一些概念。随后将会有更多功能或更专注于用户需求的产品。理想情况下，它将具有这两种改进：更多功能和更好地关注用户需求。
- en: We’ll look at each of these four phases in a little more detail, starting with
    the inception phases.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更详细地查看这四个阶段，从启动阶段开始。
- en: 1.2.1 Inception
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.2.1 启动阶段
- en: Start the inception phase by creating the parent directory for the project,
    then some commonly-used sub-directories (`docs`, `notebooks`, `src`, `tests`).
    There will be some top-level files (`README.md`, `pyproject.toml`, and `tox.ini`).
    The list of expected directories and files is described in more detail in [*List
    of deliverables*](#x1-260003), later in this chapter. We’ll look at the contents
    of each of these files and directories in the [*Deliverables*](#x1-310003) section.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建项目的父目录开始启动阶段，然后是一些常用的子目录（`docs`、`notebooks`、`src`、`tests`）。将有一些顶级文件（`README.md`、`pyproject.toml`和`tox.ini`）。预期目录和文件的列表在本书的[交付物列表](#x1-260003)中描述得更详细。我们将在[交付物](#x1-310003)部分查看这些文件和目录的内容。
- en: It helps to capture any initial ideas in the `README.md` file. Later, this will
    be refactored into more formal documentation. Initially, it’s the perfect place
    to keep notes and reminders.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在`README.md`文件中捕捉任何初始想法很有帮助。稍后，这将被重构为更正式的文档。最初，这是记录笔记和提醒的完美地方。
- en: 'Build a fresh, new virtual environment for the project. Each project should
    have its own virtual environment. Environments are essentially free: it’s best
    to build them to reflect any unique aspects of each project.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为项目构建一个全新的虚拟环境。每个项目都应该有自己的虚拟环境。环境基本上是免费的：最好构建它们以反映每个项目的独特方面。
- en: Here’s a **conda** command that can be used to build an environment.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个可以用来构建环境的**conda**命令。
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: An important part of inception is to start the documentation for the project.
    This can be done using the Sphinx tool.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 启动阶段的一个重要部分是为项目开始编写文档。这可以使用Sphinx工具完成。
- en: 'While Sphinx is available from the **Conda Forge**, this version lags behind
    the version available from the **PyPI** repository. Because of this lag, it’s
    best to install Sphinx using **PIP**:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然**Conda Forge**提供了Sphinx，但这个版本落后于**PyPI**存储库中可用的版本。由于这个滞后，最好使用**PIP**安装Sphinx：
- en: '[PRE1]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After installing Sphinx, it helps to initialize and publish the documentation
    for the project. Starting this permits publishing and sharing the design ideas
    as the work progresses. In the `docs` directory, do the following steps:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Sphinx后，初始化和发布项目的文档很有帮助。开始这个过程允许在工作的过程中发布和共享设计想法。在`docs`目录中，执行以下步骤：
- en: Run the `sphinx-quickstart` command to populate the documentation. See [https://www.sphinx-doc.org/en/master/usage/quickstart.html#setting-up-the-documentation-sources](https://www.sphinx-doc.org/en/master/usage/quickstart.html#setting-up-the-documentation-sources).
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`sphinx-quickstart`命令以填充文档。请参阅[https://www.sphinx-doc.org/en/master/usage/quickstart.html#setting-up-the-documentation-sources](https://www.sphinx-doc.org/en/master/usage/quickstart.html#setting-up-the-documentation-sources)。
- en: 'Update the `index.rst` table of contents (TOC) with two entries: “overview”
    and “API”. These are sections that will be in separate files.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`index.rst`的目录（TOC）以包含两个条目：“概述”和“API”。这些是将在单独的文件中出现的部分。
- en: 'Write an `overview.rst` document with the definition of done: what will be
    accomplished. This should cover the core ”Who-What-When-Where-Why” of the project.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`overview.rst`文档，其中包含完成的定义：将要完成什么。这应该涵盖项目的核心“谁-什么-何时-何地-为什么”。
- en: Put a title in the API document, and a `..`` todo::` note to yourself. You’ll
    add to this document as you add modules to your project.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在API文档中添加一个标题，并添加一个`.. todo::`笔记给自己。随着你向项目中添加模块，你将添加到这份文档中。
- en: During Elaboration, you’ll update the the `index.rst` to add sections for architecture
    and design decisions.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在详细说明阶段，你将更新`index.rst`以添加架构和设计决策的部分。
- en: During Construction, as you create code, you’ll add to the API section.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在建设过程中，当你编写代码时，你将添加到API部分。
- en: 'During Transition, you’ll add to the `index.rst` with some ”How” sections:
    How to test it, and how to use it.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在过渡阶段，你将在`index.rst`中添加一些“如何”部分：如何测试它，以及如何使用它。
- en: With this as the starting point, the `make`` html` command will build a documentation
    set in HTML. This can be shared with stakeholders to assure there’s a clear, common
    understanding of the project.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以此为起点，`make html`命令将构建一个HTML格式的文档集。这可以与利益相关者共享，以确保对项目有一个清晰、共同的理解。
- en: With a skeleton directory and some initial places to record ideas and decisions,
    it makes sense to start elaborating on the initial goal to and decide what will
    be built, and how it will work.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在有了骨架目录和一些记录想法和决策的初始位置后，开始详细阐述初始目标，并决定将构建什么，以及它将如何工作，是有意义的。
- en: '1.2.2 Elaboration, part 1: define done'
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.2.2 详细说明，第1部分：定义完成
- en: It helps to have a clear definition of ”done.” This guides the construction
    effort toward a well-defined goal. It helps to have the definition of done written
    out as a formal, automated test suite. For this, the Gherkin language is helpful.
    The **behave** tool can execute the Gherkin feature to evaluate the application
    software. An alternative to Gherkin is using the **pytest** tool with the **pytest-bdd**
    plug-in to run the acceptance tests.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个清晰的“完成”定义很有帮助。这有助于将建设努力引导到一个明确的目标。将“完成”的定义写成正式的、自动化的测试套件很有帮助。为此，Gherkin语言很有用。**behave**工具可以执行Gherkin功能来评估应用程序软件。Gherkin的替代方案是使用**pytest**工具与**pytest-bdd**插件来运行验收测试。
- en: The two big advantages of Gherkin are the ability to structure the feature descriptions
    into scenarios and write the descriptions in English (or any other natural language).
    Framing the expected behavior into discrete operating scenarios forces us to think
    clearly about how the application or module is used. Writing in English (or other
    natural languages) makes it easier to share definitions with other people to confirm
    our understanding. It also helps to keep the definition of done focused on the
    problem domain without devolving into technical considerations and programming.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Gherkin的两个主要优点是能够将功能描述结构化到场景中，并以英语（或任何其他自然语言）编写描述。将预期的行为框架化到离散的操作场景中，迫使我们清晰地思考应用程序或模块的使用方式。用英语（或其他自然语言）编写使得与其他人共享定义以确认我们的理解变得更容易。它还有助于将完成的定义集中在问题域上，而不会陷入技术考虑和编程。
- en: 'Each scenario can have three steps: Given, When, and Then. The Given step defines
    a context. The When step defines an action or a request of the software. The Then
    step defines the expected results. These step definitions can be as complex as
    needed, often involving multiple clauses joined with `And`. Examples can be provided
    in tables to avoid copying and pasting a scenario with a different set of values.
    A separate module provides Python implementations for the English-language step
    text.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每个场景可以有三个步骤：Given、When和Then。Given步骤定义一个上下文。When步骤定义一个动作或软件的请求。Then步骤定义预期的结果。这些步骤定义可以像需要的那样复杂，通常涉及多个由`And`连接的子句。可以通过表格提供示例，以避免复制和粘贴具有不同值集的场景。一个单独的模块提供英语步骤文本的Python实现。
- en: See [https://behave.readthedocs.io/en/stable/gherkin.html#gherkin-feature-testing-language](https://behave.readthedocs.io/en/stable/gherkin.html#gherkin-feature-testing-language)
    for numerous examples of scenarios written in Gherkin.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[https://behave.readthedocs.io/en/stable/gherkin.html#gherkin-feature-testing-language](https://behave.readthedocs.io/en/stable/gherkin.html#gherkin-feature-testing-language)，了解使用Gherkin编写的场景的多个示例。
- en: Start this part of elaboration by creating a `tests/features/project.feature`
    file based on the overview description. Don’t use a boring name like `project`.
    A complex project may have multiple features, so the feature file names should
    reflect the features.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建一个基于概述描述的`tests/features/project.feature`文件来开始这一部分的详细阐述。不要使用像`project`这样的无聊名称。一个复杂的项目可能有多个功能，因此功能文件名称应反映功能。
- en: To use **pytest**, write one (or more) acceptance test scripts in the `tests`
    directory.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用**pytest**，在`tests`目录中编写一个（或多个）验收测试脚本。
- en: The features are supported by **steps**. These steps are in modules in the `tests/steps`
    directory. A `tests/steps/hw_cli.py` module provides the necessary Python definitions
    for the steps in the feature file. The names of the modules don’t matter; we suggest
    something like `hw_cli` because it implements the steps for a hello-world command-line
    interface.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 功能由**步骤**支持。这些步骤位于`tests/steps`目录中的模块中。一个`tests/steps/hw_cli.py`模块为功能文件中的步骤提供了必要的Python定义。模块的名称不重要；我们建议使用类似`hw_cli`的名称，因为它实现了hello-world命令行界面的步骤。
- en: The underlying mechanism is used by the **Behave** tool are function decorators.
    These match text from the feature file to define the function that implements
    that step. These can have wildcard-matching to permit flexibility in wording.
    The decorator can also parse out parameter values from the text.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**Behave**工具使用的底层机制是函数装饰器。这些装饰器将功能文件中的文本与定义实现该步骤的函数相匹配。这些装饰器可以进行通配符匹配，以允许在措辞上具有灵活性。装饰器还可以从文本中解析出参数值。'
- en: A `tests/environment.py` file is required, but it can be empty for simple tests.
    This file provides a testing context, and is where some functions used by the
    **Behave** tool to control test setup and teardown are defined.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一个`tests/environment.py`文件，但对于简单的测试来说，它可以保持为空。此文件提供测试上下文，并定义了**Behave**工具用于控制测试设置和拆卸的一些函数。
- en: As soon as scenarios have been written, it makes sense to run the **Behave**
    tool to see the acceptance test fail. Initially, this lets you debug the step
    definitions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编写了场景，运行**Behave**工具查看验收测试失败是有意义的。最初，这让你能够调试步骤定义。
- en: For this application, the steps must properly execute the application program
    and capture the output file. Because the application doesn’t exist yet, a test
    failure at this point is expected.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用程序，步骤必须正确执行应用程序程序并捕获输出文件。因为应用程序尚不存在，所以在这个阶段预期会出现测试失败。
- en: The feature files with the application scenarios are a working definition of
    done. When the test suite runs, it will show whether or not the software works.
    Starting with features that fail to work means the rest of the construction phase
    will be debugging the failures and fixing the software until the application passes
    the acceptance test suite.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 包含应用程序场景的特征文件是完成工作的一个工作定义。当测试套件运行时，它将显示软件是否工作。从无法工作的特性开始意味着其余的构建阶段将是调试失败并修复软件，直到应用程序通过验收测试套件。
- en: In [*Project 0 – Hello World with test cases*](#x1-280005) we’ll look at an
    example of a Gherkin-language feature, the matching step definitions, and a `tox.ini`
    to run the test suite.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*项目 0 – 带测试用例的 Hello World*](#x1-280005)中，我们将查看一个 Gherkin 语言特性的示例，匹配步骤定义，以及一个用于运行测试套件的`tox.ini`文件。
- en: '1.2.3 Elaboration, part 2: define components and tests'
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.2.3 细化，第二部分：定义组件和测试
- en: The acceptance test suite is often relatively ”coarse” – the tests exercise
    the application as a whole, and avoid internal error conditions or subtle edge
    cases. The acceptance test suite rarely exercises all of the individual software
    components. Because of this, it can be difficult to debug problems in complex
    applications without detailed unit tests for each unit — each package, module,
    class, and function.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 验收测试套件通常相对“粗糙”——测试会整个地锻炼应用程序，并避免内部错误条件或微妙的边缘情况。验收测试套件很少会锻炼所有单个软件组件。正因为如此，如果没有每个单元的详细单元测试，调试复杂应用程序中的问题可能会很困难——每个包、模块、类和函数。
- en: After writing the general acceptance test suite, it helps to do two things.
    First, start writing some skeleton code that’s likely to solve the problem. The
    class or function will contain a docstring explaining the idea. Optionally, it
    can have a body of the `pass` statement. After writing this skeleton, the second
    step is to expand on the docstring ideas by writing unit tests for the components.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写通用的验收测试套件之后，做两件事会有帮助。首先，开始编写一些可能解决问题的骨架代码。这个类或函数将包含一个文档字符串来解释想法。可选地，它可以包含一个`pass`语句的主体。编写这个骨架之后，第二步是通过编写组件的单元测试来扩展文档字符串中的想法。
- en: 'Let’s assume we’ve written a scenario with a step that will execute an application
    named `src/hello_world.py`. We can create this file and include a skeleton class
    definition like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经编写了一个包含将执行名为`src/hello_world.py`的应用程序的步骤的场景。我们可以创建这个文件，并包含如下骨架类定义：
- en: '[PRE2]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This example shows a class with a design idea. This needs to be expanded with
    a clear statement of expected behaviors. Those expectations should take the form
    of unit tests for this class.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了一个具有设计想法的类。这需要通过一个明确的行为声明来扩展。这些期望应该以这个类的单元测试的形式出现。
- en: Once some skeletons and tests are written, the **pytest** tool can be used to
    execute those tests.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编写了一些骨架和测试，就可以使用**pytest**工具来执行这些测试。
- en: The unit tests will likely fail because the skeleton code is incomplete or doesn’t
    work. In the cases where tests are complete, but classes don’t work, you’re ready
    to start the construction phase.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试可能会失败，因为骨架代码不完整或不工作。在测试完整但类不工作的情况下，你就可以开始构建阶段了。
- en: In the cases where the design isn’t complete, or the tests are fragmentary,
    it makes sense to remain in the elaboration phase for those classes, modules,
    or functions. Once the tests are understood, construction has a clear and achievable
    goal.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计不完整或测试不完整的情况下，对于这些类、模块或函数，保持细化阶段是有意义的。一旦测试被理解，构建就有了一个清晰和可实现的目标。
- en: We don’t always get the test cases right the first time, we must change them
    as we learn. We rarely get the working code right the first time. If the test
    cases come first, they make sure we have a clear goal.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不总是第一次就能得到正确的测试用例，我们必须随着学习的深入而改变它们。我们很少第一次就能得到正确的代码。如果测试用例先出现，它们确保我们有明确的目标。
- en: In some cases, the design may not be easy to articulate without first writing
    some ”spike solution” to explore an alternative. Once the spike works, it makes
    sense to write tests to demonstrate the code works.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，如果没有先编写一些“试探性解决方案”来探索替代方案，可能难以清晰地表达设计。一旦试探性解决方案工作正常，编写测试来证明代码正常工作是有意义的。
- en: See [http://www.extremeprogramming.org/rules/spike.html](http://www.extremeprogramming.org/rules/spike.html)
    for more on creating spike solutions.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于创建试探性解决方案的信息，请参阅[http://www.extremeprogramming.org/rules/spike.html](http://www.extremeprogramming.org/rules/spike.html)。
- en: At this point, you have an idea of how the software will be designed. The test
    cases are a way to formalize the design into a goal. It’s time to begin construction.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经对软件的设计有了概念。测试用例是将设计形式化为目标的一种方式。现在是开始构建的时候了。
- en: 1.2.4 Construction
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.2.4 构建阶段
- en: The construction phase finishes the class and function (and module and package)
    definitions started in the elaboration phase. In some cases, test cases will need
    to be added as the definitions expand.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 构建阶段完成了在细化阶段开始类和函数（以及模块和包）的定义。在某些情况下，随着定义的扩展，可能需要添加测试用例。
- en: As we get closer to solving the problem, the number of tests passed will grow.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们越来越接近解决问题，通过测试的数量将会增加。
- en: The number of tests may also grow. It’s common to realize the sketch of a class
    definition is incomplete and requires additional classes to implement the **State**
    or **Strategy** design pattern. As another example, we may realize subclasses
    are required to handle special cases. This new understanding will change the test
    suite.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的数量也可能增加。通常，我们会意识到类定义的草图是不完整的，需要额外的类来实现**状态**或**策略**设计模式。作为另一个例子，我们可能意识到需要子类来处理特殊情况。这种新的理解将改变测试套件。
- en: When we look at our progress over several days, we should see that the number
    of tests pass approaches the total number of tests.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看几天内的进展时，我们应该看到通过测试的数量接近总测试数量。
- en: How many tests do we need? There are strong opinions here. For the purposes
    of showing high-quality work, tests that exercise 100% of the code are a good
    starting point. For some industries, a more strict rule is to cover 100% of the
    logic paths through the code. This higher standard is often used for applications
    like robotics and health care where the consequences of a software failure may
    involve injury or death.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要多少测试？这里有很多不同的意见。为了展示高质量的工作，测试覆盖100%的代码是一个好的起点。对于某些行业，一个更严格的规则是覆盖代码中100%的逻辑路径。这个更高的标准通常用于像机器人技术和医疗保健这样的应用，在这些应用中，软件故障的后果可能涉及伤害或死亡。
- en: 1.2.5 Transition
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.2.5 过渡
- en: For enterprise applications, there is a transition from the development team
    to formal operations. This usually means a deployment into a production environment
    with the real user community and their data.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于企业应用，从开发团队到正式运维有一个过渡。这通常意味着将部署到具有真实用户社区及其数据的实际生产环境中。
- en: 'In organizations with good Continuous Integration/Continuous Deployment (CI/CD)
    practices, there will be a formalized execution of the `tox` command to make sure
    everything works: all the tests pass.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在拥有良好持续集成/持续部署（CI/CD）实践的组织中，将正式执行`tox`命令以确保一切正常：所有测试都通过。
- en: In some enterprises, the `make`` html` command will also be run to create the
    documentation.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些企业中，还会运行`make html`命令来创建文档。
- en: Often, the technical operations team will need specific topics in the documentation
    and the `README.md` file. Operations staff may have to diagnose and troubleshoot
    problems with hundreds of applications, and they will need very specific advice
    in places where they can find it immediately. We won’t emphasize this in this
    book, but as we complete our projects, it’s important to think that our colleagues
    will be using this software, and we want their work life to be pleasant and productive.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，技术运维团队需要文档和`README.md`文件中的特定主题。运维人员可能需要诊断和解决数百个应用程序的问题，他们需要非常具体的建议，以便他们可以立即找到。我们在这本书中不会强调这一点，但当我们完成我们的项目时，重要的是要考虑我们的同事将使用这个软件，我们希望他们的工作生活愉快且富有成效。
- en: The final step is to post your project to your public repository of choice.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将您的项目发布到您选择的公共仓库。
- en: You have completed part of your portfolio. You’ll want potential business partners
    or hiring managers or investors to see this and recognize your level of skill.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经完成了您的一部分作品集。您希望潜在的商业伙伴、招聘经理或投资者看到这一点，并认识到您的技能水平。
- en: We can view a project as a sequence of steps. We can also view a project as
    a deliverable set of files created by those steps. In the next section, we’ll
    look over the deliverables in a little more detail.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将一个项目视为一系列步骤的序列。我们也可以将一个项目视为由这些步骤创建的文件集的交付成果。在下一节中，我们将更详细地查看这些交付成果。
- en: 1.3 List of deliverables
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3 交付成果清单
- en: We’ll take another look at the project, this time from the view of what files
    will be created. This will parallel the outline of the activities shown in the
    previous section.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次审视项目，这次是从创建哪些文件的角度来看。这将与上一节中显示的活动概述相平行。
- en: 'The following outline shows many of the files in a completed project:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下大纲展示了完成项目中的许多文件：
- en: 'The documentation in the `docs` directory. There will be other files in there,
    but you’ll be focused on the following files:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docs`目录中的文档。那里将会有其他文件，但你的重点将放在以下文件上：'
- en: The Sphinx `index.rst` starter file with references to overview and API sections.
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sphinx的`index.rst`起始文件，其中包含对概述和API部分的引用。
- en: An `overview.rst` section with a summary of the project.
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含项目总结的`overview.rst`部分。
- en: An `api.rst` section with `..`` automodule::` commands to pull in documentation
    from the application.
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含`..`` automodule::`命令的`api.rst`部分，用于从应用程序中提取文档。
- en: A set of test cases in the `tests` directory.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests`目录中的一组测试用例。'
- en: 'Acceptance tests aimed at Behave (or the **pytest-bdd** plug-in for Gherkin).
    When using Behave, there will be two sub-directories: a `features` directory and
    a `steps` directory. Additionally, there will be an `environment.py` file.'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对Behave（或Gherkin的**pytest-bdd**插件）的验收测试。当使用Behave时，将会有两个子目录：一个`features`目录和一个`steps`目录。此外，还将有一个`environment.py`文件。
- en: Unit test modules written with the **pytest** framework. These all have a name
    that starts with `test_` to make them easy for **pytest** to find. Ideally, the
    **Coverage** tool is used to assure 100% of the code is exercised.
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**pytest**框架编写的单元测试模块。这些模块的名称都以`test_`开头，以便**pytest**能够轻松找到它们。理想情况下，使用**Coverage**工具来确保100%的代码被测试。
- en: The final code in the `src` directory. For some of the projects, a single module
    will be sufficient. Other projects will involve a few modules. (Developers familiar
    with Java or C++ often create too many modules here. The Python concept of *module*
    is more akin to the Java concept of *package*. It’s not common Python practice
    to put each class definition into a separate module file.)
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`目录中的最终代码。对于一些项目，一个模块就足够了。其他项目可能需要几个模块。（熟悉Java或C++的开发者在这里通常会创建太多的模块。Python中的*module*概念更接近Java中的*package*概念。将每个类定义放入单独的模块文件中并不是常见的Python实践。）'
- en: Any JupyterLab notebooks can be in the `notebooks` folder. Not all projects
    use JupyterLab notebooks, so this folder can be omitted if there are no notebooks.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何JupyterLab笔记本都可以放在`notebooks`文件夹中。并非所有项目都使用JupyterLab笔记本，因此如果没有笔记本，可以省略此文件夹。
- en: A few other project files are in the top-level directory.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些其他项目文件位于顶级目录中。
- en: A `tox.ini` file should be used to run the **pytest** and **behave** test suites.
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该使用`tox.ini`文件来运行**pytest**和**behave**测试套件。
- en: The `pyproject.toml` provides a number of pieces of information about the project.
    This includes a detailed list of packages and version numbers to be installed
    to run the project, as well as the packages required for development and testing.
    With this in place, the **tox** tool can then build virtual environments using
    the `requirements.txt` or the **pip-tools** tool to test the project. As a practical
    matter, this will also be used by other developers to create their working desktop
    environment.
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyproject.toml`提供了有关项目的许多信息。这包括运行项目所需安装的详细包和版本列表，以及开发测试所需的包。有了这些信息，**tox**工具就可以使用`requirements.txt`或**pip-tools**工具来构建虚拟环境并测试项目。实际上，这也会被其他开发者用来创建他们的工作桌面环境。'
- en: An `environment.yml` can help other developers use **conda** to create their
    environment. This will repeat the contents of `requirements-dev.txt`. For a small
    team, it isn’t helpful. In larger enterprise work groups, however, this can help
    others join your project.
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`environment.yml`文件可以帮助其他开发者使用**conda**创建他们的环境。这将重复`requirements-dev.txt`的内容。对于小型团队来说，这可能没有帮助。然而，在大型企业工作团队中，这可以帮助其他人加入你的项目。
- en: Also, a `README.md` (or `README.rst`) with a summary is essential. In many cases,
    this is the first thing people look at; it needs to provide an ”elevator pitch”
    for the project (see [https://www.atlassian.com/team-playbook/plays/elevator-pitch](https://www.atlassian.com/team-playbook/plays/elevator-pitch)).
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，一个包含总结的`README.md`（或`README.rst`）文件是必不可少的。在许多情况下，这是人们首先查看的内容；它需要为项目提供一个“电梯演讲”（见[https://www.atlassian.com/team-playbook/plays/elevator-pitch](https://www.atlassian.com/team-playbook/plays/elevator-pitch))）。
- en: See [https://github.com/cmawer/reproducible-model](https://github.com/cmawer/reproducible-model)
    for additional advice on structuring complex projects.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 有关结构复杂项目的额外建议，请参阅[https://github.com/cmawer/reproducible-model](https://github.com/cmawer/reproducible-model)。
- en: We’ve presented the files in this order to encourage following an approach of
    writing documentation first. This is followed by creating test cases to assure
    the documentation will be satisfied by the programming.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按照这个顺序呈现文件，是为了鼓励首先编写文档的方法。这之后是创建测试用例，以确保文档能够满足编程需求。
- en: We’ve looked at the development activities and a review of the products to be
    created. In the next section, we’ll look at some suggested development tools.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经研究了开发活动和将要创建的产品审查。在下一节中，我们将探讨一些建议的开发工具。
- en: 1.4 Development tool installation
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.4 开发工具安装
- en: Many of the projects in this book are focused on data analysis. The tooling
    for data analysis is often easiest to install with the **conda** tool. This isn’t
    a requirement, and readers familiar with the **PIP** tool will often be able to
    build their working environments without the help of the **conda** tool.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的许多项目都专注于数据分析。数据分析的工具通常最容易通过 **conda** 工具安装。这不是必需的，熟悉 **PIP** 工具的读者通常能够在没有
    **conda** 工具的帮助下构建他们的工作环境。
- en: 'We suggest the following tools:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议以下工具：
- en: '**Conda** for installing and configuring each project’s unique virtual environment.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Conda** 用于安装和配置每个项目的独特虚拟环境。'
- en: '**Sphinx** for writing documentation.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sphinx** 用于编写文档。'
- en: '**Behave** for acceptance tests.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Behave** 用于验收测试。'
- en: '**Pytest** for unit tests. The **pytest-cov** plug-in can help to compute test
    coverage.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pytest** 用于单元测试。**pytest-cov** 插件可以帮助计算测试覆盖率。'
- en: '**Pip-Tool** for building a few working files from the `pyproject.toml` project
    definition.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pip-Tool** 用于从 `pyproject.toml` 项目定义中构建一些工作文件。'
- en: '**Tox** for running the suite of tests.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tox** 用于运行测试套件。'
- en: '**Mypy** for static analysis of the type annotations.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mypy** 用于类型注解的静态分析。'
- en: '**Flake8** for static analysis of code, in general, to make sure it follows
    a consistent style.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Flake8** 用于代码的静态分析，以确保遵循一致的风格。'
- en: One of the deliverables is the `pyproject.toml` file. This has all of the metadata
    about the project in a single place. It lists packages required by the application,
    as well as the tools used for development and testing. It helps to pin exact version
    numbers, making it easier for someone to rebuild the virtual environment.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 可交付成果之一是 `pyproject.toml` 文件。它将项目的所有元数据集中在一个地方。它列出了应用程序所需的包，以及用于开发和测试的工具。它有助于锁定确切的版本号，使得某人更容易重建虚拟环境。
- en: Some Python tools — like PIP — work with files derived from the `pyproject.toml`
    file. The **pip-tools** creates these derived files from the source information
    in the TOML file.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Python 工具（如 PIP）与从 `pyproject.toml` 文件派生出的文件一起工作。**pip-tools** 从 TOML 文件中的源信息创建这些派生文件。
- en: For example, we might use the following output to extract the development tools
    information from `pyproject.toml` and write it to `requirements-dev.txt`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可能会使用以下输出从 `pyproject.toml` 中提取开发工具信息并将其写入 `requirements-dev.txt`。
- en: '[PRE3]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It’s common practice to then use the `requirements-dev.txt` to install packages
    like this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 通常的做法是使用 `requirements-dev.txt` 安装类似这样的包：
- en: '[PRE4]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will try to install all of the named packages, pulled from the community
    `conda-forge` channel.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这将尝试安装所有命名的包，从社区 `conda-forge` 频道拉取。
- en: 'Another alternative is to use PIP like this:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个替代方案是像这样使用 PIP：
- en: '[PRE5]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This environment preparation is an essential ingredient in each project’s inception
    phase. This means the `pyproject.toml` is often the first deliverable created.
    From this, the `requirements-dev.txt` is extracted to build environments.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这种环境准备是每个项目启动阶段的一个关键组成部分。这意味着 `pyproject.toml` 经常是第一个创建的可交付成果。从这个文件中，可以提取 `requirements-dev.txt`
    来构建环境。
- en: To make the preceding steps and deliverables more specific, we’ll walk through
    an initial project. This project will help show how the remaining projects should
    be completed.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使前面的步骤和可交付成果更加具体，我们将通过一个初始项目进行讲解。这个项目将有助于展示剩余项目应该如何完成。
- en: 1.5 Project 0 – Hello World with test cases
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.5 项目 0 – 带测试用例的“Hello World”
- en: This is our first project. This project will demonstrate the pattern for all
    of the book’s projects. It will include these three elements.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的第一个项目。这个项目将展示本书所有项目的模式。它将包括以下三个要素。
- en: '**Description**: The description section will set out a problem, and why a
    user needs software to solve it. In some projects, the description will have very
    specific details. Other projects will require more imagination to create a solution.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：描述部分将阐述一个问题，以及为什么用户需要软件来解决它。在某些项目中，描述将包含非常具体的信息。在其他项目中，可能需要更多的想象力来创造解决方案。'
- en: '**Approach**: The approach section will offer some guidance on architectural
    and design choices. For some projects there are trade-offs, and an **Extras**
    section will explore some of the other choices.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法**：方法部分将提供一些关于架构和设计选择的指导。对于某些项目，存在权衡，**额外**部分将探讨一些其他选择。'
- en: '**Deliverables**: The deliverables section lists the expectations for the final
    application or module. It will often provide a few Gherkin feature definitions.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可交付成果**：可交付成果部分列出了最终应用程序或模块的期望。它通常会提供一些Gherkin功能定义。'
- en: For this initial project, the description isn’t going to be very complicated.
    Similarly, the approach part of this first project will be brief. We’ll dwell
    on the deliverables with some additional technical discussion.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个初步项目，描述不会很复杂。同样，这个第一个项目的“方法”部分也将简短。我们将对可交付成果进行一些额外的技术讨论。
- en: 1.5.1 Description
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.5.1 描述
- en: The problem the users need to solve is how best to bring new developers on board.
    A good onboarding process helps our users by making new members of the team as
    productive as quickly as possible. Additionally, a project like this can be used
    for experienced members to introduce them to new tools.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 用户需要解决的问题是如何最好地将新开发者引入团队。一个良好的入职流程通过使新成员尽快变得高效来帮助我们的用户。此外，这样的项目还可以用于让经验丰富的成员了解新工具。
- en: We need to guide our team members in installing the core set of development
    tools, creating a working module, and then displaying their completed work at
    the end of a sprint. This first project will use the most important tools and
    assure that everyone has a common understanding of the tools and the deliverables.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要指导我们的团队成员安装核心开发工具集，创建一个可工作的模块，并在冲刺结束时展示他们的完成工作。这个第一个项目将使用最重要的工具，并确保每个人都对工具和可交付成果有一个共同的理解。
- en: Each developer will build a project to create a small application. This application
    will have a command-line interface (CLI) to write a cheerful greeting.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 每个开发者都将构建一个项目来创建一个小型应用程序。这个应用程序将有一个命令行界面（CLI）来编写愉快的问候语。
- en: 'The expectations are shown in the following example:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了期望：
- en: '[PRE6]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This example shows how running the application with a command-line parameter
    of `--who`` "world"` produces a response on the console.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例展示了如何通过命令行参数`--who` "world"运行应用程序，在控制台上产生响应。
- en: 1.5.2 Approach
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.5.2 方法
- en: 'For this project, the objective is to create a Python application module. The
    module will need several internal functions. The functions can be combined into
    a class, if that seems more appropriate. The functions are these:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，目标是创建一个Python应用程序模块。该模块需要几个内部函数。如果看起来更合适，可以将这些函数组合成一个类。这些函数包括：
- en: A function to parse the command-line options. This will use the `argparse` module.
    The default command-line argument values are available in `sys.argv`.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于解析命令行选项的函数。这将使用`argparse`模块。默认的命令行参数值可以在`sys.argv`中找到。
- en: A function to write a cheerful greeting. This is, perhaps, only a single line
    of code.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于编写愉快问候语的函数。这可能只是一行代码。
- en: An overall function with an obvious name like `main()` to get the options and
    write the greeting.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个具有明显名称（如`main()`）的整体函数，用于获取选项并编写问候语。
- en: The module, as a whole, will have the function (or class) definitions. It will
    also have an `if`` __name__`` ==`` "__main__":` block. This block will guard the
    evaluation of the expression `main()` to make the module easier to unit test.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 整个模块将包含函数（或类）定义。它还将包含一个`if __name__ == "__main__":`块。这个块将保护对表达式`main()`的评估，使模块更容易进行单元测试。
- en: This is quite a bit of engineering for a simple problem. Some might call it
    over-engineering. The idea is to create something with enough complexity that
    more than one unit test case is required.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个简单的问题来说，这需要相当多的工程。有些人可能会称之为过度设计。目的是创建一个足够复杂的系统，以至于需要多个单元测试用例。
- en: 1.5.3 Deliverables
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.5.3 可交付成果
- en: 'As noted above in [*List of deliverables*](#x1-260003), there are a number
    of deliverable files for projects in general. Here are the suggested files for
    this project:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述在[*可交付成果列表*](#x1-260003)，对于一般项目，有许多可交付成果文件。以下是本项目的建议文件：
- en: '`README.md` summarizes the project.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md` 总结了项目。'
- en: '`pyproject.toml` defines the project, including development tools, test tools,
    and other dependencies.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyproject.toml` 定义了项目，包括开发工具、测试工具和其他依赖项。'
- en: '`docs` contains the documentation. As described above, this should be built
    by the `sphinx-quickstart` tool and should contain at least an overview and an
    API section.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docs` 包含文档。如上所述，这应由 `sphinx-quickstart` 工具构建，并应包含至少概述和 API 部分。'
- en: '`tests` contains test cases; the files include the following:'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests` 包含测试用例；文件包括以下内容：'
- en: '`test_hw.py` contains unit tests for the module’s functions or classes.'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test_hw.py` 包含模块的函数或类的单元测试。'
- en: '`features/hello_world.feature` has an overall acceptance test as a collection
    of scenarios.'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`features/hello_world.feature` 包含作为场景集合的整体验收测试。'
- en: '`steps/hw_cli.py` has Python definitions for the steps in the scenarios.'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`steps/hw_cli.py` 包含了场景中步骤的 Python 定义。'
- en: '`environment.py` contains functions to control **behave**’s test setup and
    teardown. For simple projects, it may be empty.'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`environment.py` 包含控制 **behave** 测试设置和拆卸的函数。对于简单的项目，它可能为空。'
- en: '`tox.ini` configuration for the **tox** tool to run the complete test suite.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tox.ini` 配置用于运行完整测试套件的 **tox** 工具。'
- en: '`src` contains the `hello_world.py` module.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src` 包含 `hello_world.py` 模块。'
- en: We’ll look at a few of these files in detail in the following sub-sections.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下子节中详细查看这些文件中的几个。
- en: The pyproject.toml project file
  id: totrans-203
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: pyproject.toml 项目文件
- en: The `pyproject.toml` file contains a great deal of project metadata in a single
    location. The minimal content of this file is a description of the ”build-system”
    used to build and install the package.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyproject.toml` 文件在单个位置包含大量项目元数据。此文件的最小内容是用于构建和安装包的 “build-system” 描述。'
- en: 'For the purposes of this book, we can use the following two lines to define
    the build system:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书的目的，我们可以使用以下两行来定义构建系统：
- en: '[PRE7]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This specifies the use of the `setuptools` module to create a “wheel” with the
    project’s code. The `pyproject.toml` doesn’t need to define the distribution package
    in any more detail. This book doesn’t emphasize the creation of a distribution
    package or the management of packages with the Python Package Index, PyPI.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了使用 `setuptools` 模块创建包含项目代码的 “wheel”。`pyproject.toml` 不需要进一步详细定义分发包。本书不强调创建分发包或使用
    Python 包索引 PyPI 管理包。
- en: 'The rest of this file should have information about the project. You can include
    a section like the following:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件的其余部分应包含有关项目的信息。您可以包含以下类似的部分：
- en: '[PRE8]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Clearly, you’ll want to update the `authors` section with your information.
    You may be using a newer version of Python and may need to change the `requires-python`
    string to specify the minimum version required for your unique solution.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，您将想要更新 `authors` 部分以包含您的信息。您可能正在使用较新的 Python 版本，可能需要更改 `requires-python`
    字符串以指定您独特解决方案所需的最小版本。
- en: 'The `[project]` section needs three other pieces of information:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`[project]` 部分需要其他三块信息：'
- en: The packages required to execute your application.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行您的应用程序所需的包。
- en: Any packages or tools required to test your application.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何测试您的应用程序所需的包或工具。
- en: Any packages or tools required to develop your application.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发您的应用程序所需的任何包或工具。
- en: 'These three dependencies are organized as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个依赖项组织如下：
- en: '[PRE9]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `dependencies` line lists the dependencies required to execute the application.
    Some projects — like this one — rely on the standard library, and nothing more
    needs to be added. The `[project.optional-dependencies]` section contains two
    lists of additional packages: those required for development, and those required
    for testing.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`dependencies` 行列出了执行应用程序所需的依赖项。一些项目——比如这个项目——依赖于标准库，无需添加更多内容。`[project.optional-dependencies]`
    部分包含两个额外的包列表：开发所需的包和测试所需的包。'
- en: Note that we’ve put specific version numbers in this file so that we can be
    absolutely certain what packages will be used. As these packages evolve, we’ll
    need to test newer versions and upgrade the dependencies.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在该文件中放置了特定的版本号，以确保我们绝对确定将使用哪些包。随着这些包的发展，我们需要测试新版本并升级依赖项。
- en: If you see the version numbers in this book are behind the current state of
    the art on PyPI or Conda-Forge, feel free to use up-to-date versions.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在本书中看到的版本号落后于 PyPI 或 Conda-Forge 上的当前技术水平，请随意使用最新版本。
- en: It helps to use the **pip-compile** command. This is installed as part of **pip-tools**.
    This command create extract files from the `pyproject.toml` file for use by **pip**
    or **conda**.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**pip-compile**命令很有帮助。该命令作为**pip-tools**的一部分安装。此命令从`pyproject.toml`文件中创建提取文件，供**pip**或**conda**使用。
- en: For developers, we often want to install all of the ”extras.” This usually means
    executing the following command to create a `requirements-dev.txt` file that can
    be used to build a development environment.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发者来说，我们通常希望安装所有的“额外”组件。这通常意味着执行以下命令以创建一个`requirements-dev.txt`文件，该文件可以用来构建开发环境。
- en: '[PRE10]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In order to run the **tox** tool, it’s common to also create a testing-only
    subset of the required packages and tools. Use the following command:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行**tox**工具，通常还会创建一个仅包含所需包和工具的测试子集。使用以下命令：
- en: '[PRE11]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This creates the `requirements.txt` to be used to detect manage virtual environments
    used by **tox** for testing.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建用于检测和管理**tox**测试所使用的虚拟环境的`requirements.txt`文件。
- en: The docs directory
  id: totrans-226
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 文档目录
- en: 'As noted above in [*Suggested project sprints*](#x1-200002) this directory
    should be built with `sphinx-quickstart`. After the initial set of files is created,
    make the following changes:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述在[*建议的项目冲刺*](#x1-200002)中，此目录应使用`sphinx-quickstart`构建。在创建初始文件集之后，进行以下更改：
- en: Add a `api.rst` file as a placeholder for the Sphinx-generated API documentation.
    This will use the `..`` automodule::` directive to extract documentation from
    your application.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个`api.rst`文件作为Sphinx生成的API文档的占位符。这将使用`.. automodule::`指令从您的应用程序中提取文档。
- en: Add a `overview.rst` file with an overview of the project.
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个`overview.rst`文件，概述项目。
- en: Update the `index.rst` to include these two new files in the table of contents.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`index.rst`更新为在目录表中包含这两个新文件。
- en: Update the `conf.py` to append the `src` directory to `sys.path`. Also, the
    `sphinx.ext.autodoc` extension needs to be added to the `extensions` setting in
    this file.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`conf.py`更新为将`src`目录添加到`sys.path`中。此外，还需要将`sphinx.ext.autodoc`扩展添加到该文件中的`extensions`设置。
- en: The `make`` html` command in the `docs` directory can be used to build the documentation.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在`docs`目录中的`make html`命令可以用来构建文档。
- en: The tests/features/hello_world.feature file
  id: totrans-233
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`tests/features/hello_world.feature`文件'
- en: The `features` directory will have Gherkin-language definitions of the features.
    Each feature file will contain one or more scenarios. For larger projects, these
    files often start with statements lifted from problem descriptions or architectural
    overviews that are later refined into more detailed steps to describe an application’s
    behavior.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`features`目录将包含功能的Gherkin语言定义。每个功能文件将包含一个或多个场景。对于较大的项目，这些文件通常以从问题描述或架构概述中提取的语句开始，这些语句后来被细化成更详细的步骤来描述应用程序的行为。'
- en: 'For this project, one of the feature files should be `features/hello_world.feature`.
    The contents of this file should include a description of the feature and at least
    one scenario. It would look like the following example:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此项目，其中一个功能文件应该是`features/hello_world.feature`。此文件的 内容应包括功能的描述和至少一个场景。它看起来像以下示例：
- en: '[PRE12]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There’s no `Given` step in this scenario; there’s no initialization or preparation
    required. Each of the steps has only a single clause, so there are no `And` steps,
    either.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在此场景中没有`Given`步骤；没有初始化或准备要求。每个步骤只有一个子句，因此也没有`And`步骤。
- en: 'This example doesn’t precisely match the example in the description. There
    are two possible reasons for this: one of the two examples is wrong, or, more
    charitably, this example hints at a second feature.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例与描述中的示例不完全匹配。有两个可能的原因：两个示例中的一个可能是错误的，或者，更宽容地说，此示例暗示了第二个功能。
- en: The idea implied by this example is there’s a default behavior when no `--who`
    command-line option is provided. This suggests that a second scenario — one with
    the `--who` option should be added for this feature.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例所暗示的想法是，如果没有提供`--who`命令行选项，则存在默认行为。这表明应该为该功能添加第二个场景——一个带有`--who`选项的场景。
- en: The tests/steps/hw_cli.py module
  id: totrans-240
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`tests/steps/hw_cli.py`模块'
- en: 'The `steps` directory contains modules that define the natural-language phrases
    in the feature files. In the `hello_world.feature` file the `When` and `Then`
    steps had phrases written out in plain English:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`steps`目录包含定义功能文件中自然语言短语的模块。在`hello_world.feature`文件中，`When`和`Then`步骤用纯英语写出了短语：'
- en: We run the command ”`python`` src/hello_world.py`”
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们运行命令”`python src/hello_world.py`”
- en: Output has ”`Hello,`` World!`”
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出为”`Hello, World!`”
- en: The `steps/hw_cli.py` module will map the step’s phrases to Python functions.
    It works by using decorators and pattern-matching to specify the type of step
    (`@given`, `@when`, or `@then`) and the text to match. The presence of `{parameter}`
    in the text will match the text and provide the value matched to the step function
    as an argument. The function names are irrelevant and are often `step_impl()`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`steps/hw_cli.py`模块将步骤的短语映射到Python函数。它通过使用装饰器和模式匹配来指定步骤的类型（`@given`、`@when`或`@then`）以及要匹配的文本。文本中存在`{parameter}`将匹配文本并提供作为参数匹配到步骤函数的值。函数名称无关紧要，通常为`step_impl()`。'
- en: Generally, the `@given` steps will accumulate parameter values in the test context
    object. Best practices suggest there should be only one `@when` step; this will
    perform the required operation. For this project, it will run the application
    and gather the output files. The `@then` steps can use `assert` statements to
    compare actual results against the expected results shown in the feature file.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`@given`步骤将在测试上下文对象中累积参数值。最佳实践建议只有一个`@when`步骤；这将执行所需操作。对于这个项目，它将运行应用程序并收集输出文件。`@then`步骤可以使用`assert`语句将实际结果与特征文件中显示的预期结果进行比较。
- en: 'Here’s how the `steps/hw_cli.py` module might look:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`steps/hw_cli.py`模块可能的样子：
- en: '[PRE13]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This assumes a relatively small output file that can be collected in memory.
    For a larger file, it would make sense for the `@when` step to create a temporary
    file and save the file object in the context. The `@then` step can read and close
    this file. The `tempfile` module is handy for creating files that will be deleted
    when closed.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设有一个相对较小的输出文件，可以被收集到内存中。对于较大的文件，让`@when`步骤创建一个临时文件并将文件对象保存在上下文中是有意义的。`@then`步骤可以读取并关闭这个文件。`tempfile`模块对于创建在关闭时会被删除的文件很有用。
- en: An alternative is to create a `Path` object and save this object in the context.
    The `@when` step can write output to this path. The `@then` step can read and
    examine the contents of the file named by the `Path` object.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是创建一个`Path`对象并将其保存在上下文中。`@when`步骤可以将输出写入此路径。`@then`步骤可以读取并检查由`Path`对象命名的文件的
    内容。
- en: When a test step detects a problem with an `assert` statement, it may not finish
    completely. The approach of using a `Path` object requires some care to be sure
    the temporary files are deleted. The `environment.py` module can define an `after_scenario(context,`` scenario)`
    function to remove temporary files.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试步骤检测到`assert`语句的问题时，它可能不会完全完成。使用`Path`对象的方法需要小心以确保临时文件被删除。`environment.py`模块可以定义一个`after_scenario(context,
    scenario)`函数来删除临时文件。
- en: The tests/environment.py file
  id: totrans-251
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`tests/environment.py`文件'
- en: This module will contain some function definitions used by **behave**. For this
    project, it will be empty. The module must be present; a module docstring is appropriate
    to explain that it’s empty.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块将包含一些**behave**使用的函数定义。对于这个项目，它将是空的。模块必须存在；一个模块文档字符串适合解释它是空的。
- en: The `tests/steps` module for this example will have examples that can be refactored
    into two potentially reusable functions for executing an application and checking
    the output from an application for specific text. This additional design effort
    isn’t part of this project. You may find it helpful to do this refactoring after
    completing several of these projects.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，`tests/steps`模块将包含可以重构为两个可能可重用函数的示例，用于执行应用程序和检查应用程序输出的特定文本。这项额外的设计工作不包含在这个项目中。你可能会在完成几个这样的项目后找到这样做很有帮助。
- en: Once the features, steps, and environment are in place, the **behave** program
    can be used to test the application. If there’s no application module, the tests
    will fail. Creating a skeleton application module in the `src` directory will
    allow the test case to execute and fail because the output isn’t what was expected.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦特性、步骤和环境就绪，就可以使用**behave**程序来测试应用程序。如果没有应用程序模块，测试将失败。在`src`目录中创建一个骨架应用程序模块将允许测试用例执行并失败，因为输出不是预期的。
- en: The tests/test_hw.py unit tests
  id: totrans-255
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`tests/test_hw.py`单元测试'
- en: A unit test can be implemented as a **pytest** function that uses a fixture,
    `capsys`, to capture the system output. The unit test case expects the application
    to have a `main()` function that parses the command-line options.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试可以作为使用`capsys`固定装置的**pytest**函数实现，该固定装置用于捕获系统输出。单元测试用例期望应用程序有一个解析命令行选项的`main()`函数。
- en: 'Here’s one suggested unit test function:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个建议的单元测试函数：
- en: '[PRE14]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note the test for the `main()` function provides an explicit empty list of argument
    values. It is essential to override any value for `sys.argv` that might be present
    when **pytest** is running.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 注意对`main()`函数的测试提供了一个显式的空参数值列表。在**pytest**运行时，覆盖任何可能存在的`sys.argv`值是必要的。
- en: 'The `hello_world` module is imported by this test. There are two important
    consequences of this import:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试导入`hello_world`模块。此导入有两个重要的后果：
- en: The `src/hello_world.py` module must have an `if`` __name__`` ==`` "__main__":`
    section. A simple Python script (without this section) will execute completely
    when imported. This can make testing difficult.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/hello_world.py`模块必须有一个`if`` __name__`` ==`` "__main__":`部分。一个简单的Python脚本（没有这个部分）在导入时将完全执行。这可能会使测试变得困难。'
- en: The `src` directory must be part of the `PYTHONPATH` environment variable. This
    is handled by the `tox.ini` file.
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`目录必须是`PYTHONPATH`环境变量的一部分。这由`tox.ini`文件处理。'
- en: This test will tolerate additional output in addition to the required cheerful
    greeting. It might make sense to use something like `"Hello,`` World!"`` ==`` out.strip()`.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试将容忍除所需的愉快问候语外的额外输出。使用类似`"Hello,`` World!"`` ==`` out.strip()``的东西可能是有意义的。
- en: The implementation details of the `main()` function are opaque to this test.
    This `main()` function could create an instance of a class; it could use a static
    method of a class, also.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`main()`函数的实现细节对此测试来说是透明的。这个`main()`函数可以创建一个类的实例；它也可以使用类的静态方法。'
- en: The src/tox.ini file
  id: totrans-265
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: The src/tox.ini file
- en: Now that the tests exist, we can run them. The **tox** (and **nox**) tools are
    ideal for running a suite of tests.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在测试已经存在，我们可以运行它们。**tox**（和**nox**）工具非常适合运行一系列测试。
- en: 'Here’s an example `tox.ini` file:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例`tox.ini`文件：
- en: '[PRE15]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This file lists the tools used for testing: **pip-tools**, **pytest**, and
    **behave**. It provides the setting for the `PYTHONPATH`. The `commands_pre` will
    prepare the the virtual environment using the **pip-sync** command that is part
    of the **pip-tools** package. The given sequence of commands defines the test
    suite.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件列出了用于测试的工具：**pip-tools**、**pytest**和**behave**。它提供了`PYTHONPATH`的设置。`commands_pre`将使用**pip-tools**包中的**pip-sync**命令准备虚拟环境。给定的命令序列定义了测试套件。
- en: The src/hello_world.py file
  id: totrans-270
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: The src/hello_world.py file
- en: This is the desired application module. The test framework is helpful to confirm
    that it really does work, and — more importantly — it meets the definition of
    done provided in the `*.feature` files.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这是期望的应用模块。测试框架有助于确认它确实可以工作，并且——更重要的是——它符合`*.feature`文件中提供的完成定义。
- en: As we noted above, the unit tests will import this app as a module. The acceptance
    test, in contrast, will run the app. This means the `if`` __name__`` ==`` "__main__":`
    section is essential.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们上面提到的，单元测试将把这个应用作为模块导入。相比之下，验收测试将运行应用。这意味着`if`` __name__`` ==`` "__main__":`部分是必不可少的。
- en: 'For a small application like this, the real work of the application should
    be encapsulated in a `main()` function. This allows the main module to end with
    the following snippet:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这样一个小型应用程序，应用程序的实际工作应该封装在一个`main()`函数中。这允许主模块以以下片段结束：
- en: '[PRE16]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This assures that the module will not take off and start running when imported.
    It will only do useful work when invoked from the command line.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保了模块在导入时不会起飞并开始运行。它只有在从命令行调用时才会执行有用的工作。
- en: 1.5.4 Definition of done
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.5.4 完成定义
- en: This project is tested by running the `tox` command.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目通过运行`tox`命令进行测试。
- en: 'When all of the tests execute, the output will look like this:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有测试执行完毕时，输出将如下所示：
- en: '[PRE17]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This output has elided the details from **pytest** and **behave**. The output
    from the **tox** tool is the important summary `py:`` OK`. This tells us all the
    tests passed.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出省略了来自**pytest**和**behave**的详细信息。**tox**工具的输出是重要的总结`py:`` OK`。这告诉我们所有测试都通过了。
- en: 'Once this is complete, we can run the following to create the API documentation:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，我们可以运行以下命令来创建API文档：
- en: '[PRE18]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'It can help to wrap the two commands with `()` so the `cd`` docs` command doesn’t
    leave the console session in the `docs` directory. Some developers prefer to have
    two windows open: one in the top-level directory to run the **tox** tool and one
    in the `docs` subdirectory to run the **make** commands for the **sphinx** tool.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`()`将两个命令包裹起来可能会有所帮助，这样`cd`` docs`命令就不会离开`docs`目录的会话。一些开发者更喜欢打开两个窗口：一个在顶级目录中运行**tox**工具，另一个在`docs`子目录中运行**sphinx**工具的**make**命令。
- en: 1.6 Summary
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.6 总结
- en: 'In this chapter, we’ve looked at the following topics:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了以下主题：
- en: An overview of the software quality principles that we’ll try to emphasize.
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将尝试强调的软件质量原则概述。
- en: A suggested approach to completing the project as a sequence of project sprints.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成项目作为一系列项目冲刺的建议方法。
- en: A general overview of the list of deliverables for each project.
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个项目交付物列表的一般概述。
- en: The tools suggested for creating these examples.
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议用于创建这些示例的工具。
- en: A sample project to act as a template for subsequent projects.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个作为后续项目模板的示例项目。
- en: After creating this initial project, the next chapter will look at the general
    collection of projects. The idea is to create a complete data analysis tool set
    with a number of closely-related projects.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建这个初始项目之后，下一章将探讨一般的项目集合。目标是创建一个包含多个紧密相关项目的完整数据分析工具集。
- en: 1.7 Extras
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.7 额外内容
- en: Here are some ideas for you to add to this project.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些想法供您添加到这个项目中。
- en: 1.7.1 Static analysis - mypy, flake8
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.7.1 静态分析 - mypy, flake8
- en: 'There are several common static analysis tools that are as essential as automated
    testing:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种常见的静态分析工具，与自动化测试一样重要：
- en: '**mypy** checks type annotations to be sure the functions and classes will
    interact properly.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mypy**检查类型注解，以确保函数和类将正确交互。'
- en: '**flake8** does other syntax checks to make sure the code avoids some of the
    more common Python mistakes.'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**flake8**执行其他语法检查，以确保代码避免了一些常见的Python错误。'
- en: '**black** can be used to check the formatting to make sure it follows the recommended
    style. The `black` application can also be used to reformat a new file.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**black**可用于检查格式，以确保其遵循推荐的风格。`black`应用程序还可以用于重新格式化新文件。'
- en: '**isort** can be used to put a long collection of `import` statements into
    a consistent order.'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**isort**可用于将长序列的`import`语句放入一致的顺序。'
- en: Once the application passes the functional tests in the `*.feature` files, these
    additional non-functional tests can be applied. These additional tests are often
    helpful for spotting more nuanced problems that can make a program difficult to
    adapt or maintain.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序通过了`*.feature`文件中的功能测试，可以应用这些额外的非功能性测试。这些额外的测试通常有助于发现更细微的问题，这些问题可能会使程序难以适应或维护。
- en: 1.7.2 CLI features
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.7.2 CLI功能
- en: The command-language interface permits a single option, the `--who` option,
    to provide a name.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 命令语言界面允许一个选项，即`--who`选项，提供名称。
- en: It makes sense to add a scenario to exercise this option.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个场景来练习此选项是有意义的。
- en: What should happen with the `--who` is provided without a value? Is the following
    appropriate?
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有提供`--who`的值，会发生什么？以下做法是否合适？
- en: '[PRE19]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Should the help be extended to clarify what’s required?
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 是否应该扩展帮助说明以阐明所需内容？
- en: 'Consider adding the following scenarios (and the implementing code):'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑添加以下场景（及其实现代码）：
- en: Add a scenario for the `--help` option, which is provided automatically by the
    `argparse` module.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`--help`选项添加一个场景，该选项由`argparse`模块自动提供。
- en: Add a scenario for the `--who` with no value error.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`--who`无值错误添加一个场景。
- en: 1.7.3 Logging
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.7.3 日志记录
- en: Consider a more complex application where additional debugging output might
    be helpful. For this, it’s common to add a `--verbose` option to set the logging
    level to `logging.DEBUG` instead of a default level of `logging.INFO`.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个更复杂的应用程序，其中可能需要额外的调试输出。为此，通常会在`--verbose`选项中设置日志级别为`logging.DEBUG`，而不是默认的`logging.INFO`级别。
- en: 'Adding this option requires adding logging capabilities. Consider making the
    following changes to this module:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此选项需要添加日志功能。考虑对此模块进行以下更改：
- en: Import the `logging` module and create a global logger for the application.
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入`logging`模块并创建一个全局日志记录器用于应用程序。
- en: Update the `main()` function to set the logger’s level based on the options.
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`main()`函数，根据选项设置日志记录器的级别。
- en: 'Update the `__name__`` ==`` "__main__":` block to have two lines: `logging.basicConfig()`
    and `main()`. It’s best to keep logging configuration isolated from the rest of
    the application processing.'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`__name__ == "__main__"`块，使其包含两行：`logging.basicConfig()`和`main()`。最好将日志配置与应用程序的其他处理部分隔离。
- en: 1.7.4 Cookiecutter
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.7.4 Cookiecutter
- en: The `cookiecutter` project (see [https://cookiecutter.readthedocs.io/en/stable/](https://cookiecutter.readthedocs.io/en/stable/))
    is a way to build a template project. This can help team members get started by
    sharing a single template. As tool versions or solution architectures change,
    additional cookie-cutter templates can be developed and used.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`cookiecutter` 项目（见 [https://cookiecutter.readthedocs.io/en/stable/](https://cookiecutter.readthedocs.io/en/stable/)）是一种构建模板项目的方法。这可以通过共享单个模板来帮助团队成员开始工作。随着工具版本或解决方案架构的变化，可以开发和使用额外的
    cookie-cutter 模板。'
- en: There are thousands of cookie-cutter templates available. It can be difficult
    to locate one that’s suitably simple. It may be better to create your own and
    add to it as new concepts are introduced in later chapters.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的 cookie-cutter 模板有成千上万。找到适合的简单模板可能很困难。可能更好的做法是创建自己的模板，并在后续章节中引入新概念时不断添加到其中。
