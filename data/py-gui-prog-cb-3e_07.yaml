- en: Storing Data in Our MySQL Database via Our GUI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过我们的 GUI 将数据存储在我们的 MySQL 数据库中
- en: In this chapter, we will learn how to install and use a MySQL database and connect
    it to our GUI.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何安装和使用 MySQL 数据库，并将其连接到我们的 GUI。
- en: MySQL is a full-fledged **Structured Query Language** (**SQL**) database server
    and comes with a very nice GUI of its own so that we can view and work with the
    data. We will create a database, insert data into our database, and then see how
    we can modify, read, and delete data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 是一个完整的 **结构化查询语言**（**SQL**）数据库服务器，并自带一个非常好的 GUI，以便我们可以查看和使用数据。我们将创建一个数据库，将数据插入到我们的数据库中，然后看看我们如何修改、读取和删除数据。
- en: Data storage in a SQL database is essential for software programs written in
    Python. All of our data currently only exists in memory and we want to make it
    persistent so that we do not lose our data once we close our running Python program.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用 Python 编写的软件程序，数据存储在 SQL 数据库中是必不可少的。我们目前的所有数据都仅存在于内存中，我们希望使其持久化，这样我们关闭正在运行的
    Python 程序时就不会丢失数据。
- en: Here, you will learn how to increase your programming skills by adding SQL to
    your programming toolbox.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将学习如何通过将 SQL 添加到您的编程工具箱中来提高您的编程技能。
- en: The first recipe in this chapter will show you how to install the free MySQL
    Community Edition.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第一个菜谱将向您展示如何安装免费的 MySQL Community Edition。
- en: After successfully connecting to a running instance of our MySQL server, we
    will design and create a database that will accept a book title, which could be
    our own journal or a quote we found somewhere on the internet. We will require
    a page number for the book, which could be blank (`NULL` in SQL terms), and then
    we will `insert` the quote we like from a book, journal, website, or a friend
    into our MySQL database using our GUI, which we built using Python 3.7 or later.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功连接到我们的 MySQL 服务器的一个运行实例之后，我们将设计和创建一个数据库，该数据库将接受一个书名，这可能是我们的个人日记或我们在互联网上找到的引言。我们将需要一个页码，对于书籍来说，这可能为空白（在
    SQL 术语中为 `NULL`），然后我们将使用我们的 GUI（使用 Python 3.7 或更高版本构建）将我们从书籍、期刊、网站或朋友那里喜欢的引言`插入`到我们的
    MySQL 数据库中。
- en: We will insert, modify, delete, and display our favorite quotes using our Python
    GUI to issue these SQL commands and to display the data.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过我们的 Python GUI 发出这些 SQL 命令并显示数据，来插入、修改、删除和显示我们最喜欢的引言。
- en: '**CRUD** is a database term you may have come across before that is an abbreviation
    for the four basic SQL commands, that is, **Create**, **Read**, **Update**, and
    **Delete**.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**CRUD** 是您可能之前遇到过的数据库术语，它是四个基本 SQL 命令的缩写，即 **创建**、**读取**、**更新**和**删除**。'
- en: 'Here is an overview of the Python modules for this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是本章 Python 模块的概述：
- en: '![](img/091c7ddf-a884-48d2-9c64-6a1670500746.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/091c7ddf-a884-48d2-9c64-6a1670500746.png)'
- en: 'In this chapter, we will enhance our Python GUI by connecting the GUI to a
    MySQL database. We will cover the following recipes:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过将 GUI 连接到 MySQL 数据库来增强我们的 Python GUI。我们将涵盖以下菜谱：
- en: Installing and connecting to a MySQL server from Python
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Python 安装并连接到 MySQL 服务器
- en: Configuring the MySQL database connection
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 MySQL 数据库连接
- en: Designing the Python GUI database
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计 Python GUI 数据库
- en: Using the SQL INSERT command
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SQL INSERT 命令
- en: Using the SQL UPDATE command
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SQL UPDATE 命令
- en: Using the SQL DELETE command
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SQL DELETE 命令
- en: Storing and retrieving data from our MySQL database
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从我们的 MySQL 数据库存储和检索数据
- en: Using MySQL Workbench
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 MySQL Workbench
- en: Installing and connecting to a MySQL server from Python
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Python 安装并连接到 MySQL 服务器
- en: Before we can connect to a MySQL database, we have to connect to the *MySQL
    server*. In order to do this, we need to know the IP address of the MySQL server
    as well as the port it is listening on.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够连接到 MySQL 数据库之前，我们必须连接到 *MySQL 服务器*。为了做到这一点，我们需要知道 MySQL 服务器的 IP 地址以及它监听的端口。
- en: We also have to be a registered user with a password in order to be *authenticated*
    by the MySQL server.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须是一个注册用户，并有一个密码，以便能够被 MySQL 服务器**认证**。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have access to a running MySQL server instance, as well as
    have administrator privileges in order to create databases and tables.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要能够访问一个正在运行的 MySQL 服务器实例，并且拥有创建数据库和表的管理员权限。
- en: How to do it…
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Let''s look at how to install and connect to a MySQL server from Python:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何从 Python 安装和连接到 MySQL 服务器：
- en: Download the MySQL Installer.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 MySQL 安装程序。
- en: There is a free MySQL Community Edition available from the official MySQL website.
    You can download and install it on your local PC from [http://dev.mysql.com/downloads/windows/installer/](http://dev.mysql.com/downloads/windows/installer/).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的 MySQL 网站上有一个免费的 MySQL 社区版。你可以从 [http://dev.mysql.com/downloads/windows/installer/](http://dev.mysql.com/downloads/windows/installer/)
    下载并安装到你的本地 PC 上。
- en: 'Run the installation:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序：
- en: '![](img/6bd7fce8-d50d-4c4f-bab1-3cb1945e0e29.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6bd7fce8-d50d-4c4f-bab1-3cb1945e0e29.png)'
- en: 'Choose a password for the `root` user and, optionally, add more users:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `root` 用户选择一个密码，并且可选地添加更多用户：
- en: '![](img/db517531-4e77-4790-8d75-fcb2631d2f56.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/db517531-4e77-4790-8d75-fcb2631d2f56.png)'
- en: 'Verify that you have the `\Python37\Lib\site-packages\mysql\connector` folder:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证你是否拥有 `\Python37\Lib\site-packages\mysql\connector` 文件夹：
- en: '![](img/d083fd30-4b6b-46c9-9a0a-6ff232363cfa.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d083fd30-4b6b-46c9-9a0a-6ff232363cfa.png)'
- en: 'Open the `mysqlsh.exe` executable and double-click on it to run it:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `mysqlsh.exe` 可执行文件，双击它以运行：
- en: '![](img/1bea928e-099f-48f6-a50d-2f50385a75d9.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1bea928e-099f-48f6-a50d-2f50385a75d9.png)'
- en: Type `\sql` in the prompt to get into `SQL` mode.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符中输入 `\sql` 以进入 `SQL` 模式。
- en: 'In the `MySql>` prompt, type `SHOW DATABASES`. Then, press *Enter*:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MySql>` 提示符中，输入 `SHOW DATABASES`。然后，按 *Enter*：
- en: '![](img/c82df31f-8056-439b-9bfc-ea9814ecddf9.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c82df31f-8056-439b-9bfc-ea9814ecddf9.png)'
- en: 'Create a new Python module and save it as `MySQL_connect.py`:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Python 模块并将其保存为 `MySQL_connect.py`：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If running the preceding code results in the following output, then we have
    successfully connected:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果运行前面的代码产生以下输出，那么我们就已成功连接：
- en: '![](img/20469916-e961-456b-b486-3ece472ff007.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/20469916-e961-456b-b486-3ece472ff007.png)'
- en: Let's go behind the scenes to understand the code better.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解代码，以便更好地理解它。
- en: How it works…
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: First, we downloaded and then installed the MySQL version that matches our operating
    system.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们下载并安装了与我们的操作系统匹配的 MySQL 版本。
- en: During the installation process, you will choose a password for the `root` user,
    and you can also add more users. I recommend that you add yourself as a DB Admin and
    choose a password as well.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，你将为 `root` 用户选择一个密码，你也可以添加更多用户。我建议你添加自己作为 DB Admin 并选择一个密码。
- en: In this chapter, we are using the latest MySQL Community Server release, that
    is, 8.0.16.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用的是最新的 MySQL 社区服务器版本，即 8.0.16。
- en: '**SQL** stands for **Structured Query Language** and is sometimes pronounced **sequel**. It
    uses a **Set** mathematical approach, which is based on mathematics and **set
    theory**. You can find out more at [https://en.wikipedia.org/wiki/Set_theory](https://en.wikipedia.org/wiki/Set_theory).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL** 代表 **结构化查询语言**，有时发音为 **sequel**。它使用 **集合** 数学方法，该方法基于数学和 **集合理论**。你可以在
    [https://en.wikipedia.org/wiki/Set_theory](https://en.wikipedia.org/wiki/Set_theory)
    上了解更多信息。'
- en: In order to connect to MySQL, we may need to install a special Python connector
    driver. This driver will allow us to talk to the MySQL server from Python. There
    is a freely available driver on the MySQL website ([http://dev.mysql.com/doc/connector-python/en/index.html](http://dev.mysql.com/doc/connector-python/en/index.html))
    and it comes with a very nice online tutorial.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了连接到 MySQL，我们可能需要安装一个特殊的 Python 连接器驱动程序。这个驱动程序将允许我们从 Python 与 MySQL 服务器通信。MySQL
    网站上有一个免费可用的驱动程序 ([http://dev.mysql.com/doc/connector-python/en/index.html](http://dev.mysql.com/doc/connector-python/en/index.html))，并且它附带了一个非常好的在线教程。
- en: When I did a brand new installation of the latest version of MySQL, the Python
    connector was automatically installed. Therefore, you may not have to install
    it after all. It is good to know, though, just in case you run into any issues
    and need to install it yourself.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当我安装最新版本的 MySQL 的新安装时，Python 连接器会自动安装。因此，你可能根本不需要安装它。不过，了解这一点是好的，以防你遇到任何问题并需要自己安装它。
- en: One way to verify that we have installed the correct driver and that it lets
    Python talk to MySQL is by looking into the Python `site-packages` directory. If
    your `site-packages` directory has a new** `MySQL`** folder that contains a `connector`
    subfolder, the installation was successful. We did this in *step 4*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 验证我们已经安装了正确的驱动程序，并且它能让 Python 与 MySQL 通信的一种方法是查看 Python 的 `site-packages` 目录。如果你的
    `site-packages` 目录中有一个新的**`MySQL`**文件夹，其中包含一个 `connector` 子文件夹，则安装成功。我们在 *步骤 4*
    中做了这件事。
- en: In *step 5*, we verified that our MySQL server installation actually worked
    by using the MySQL Shell*.*
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 5* 中，我们通过使用 MySQL Shell*.* 验证了我们的 MySQL 服务器安装实际上是否工作。
- en: Your path might be different, especially if you are on macOS or Linux: `<path
    to>\Program Files\MySQL\MySQL Shell 8.0\bin`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你的路径可能不同，尤其是如果你使用的是 macOS 或 Linux：`<path to>\Program Files\MySQL\MySQL Shell
    8.0\bin`。
- en: Next, we verified that we can achieve the same results using Python 3.7.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们验证了我们可以使用 Python 3.7 实现相同的结果。
- en: Replace the placeholder bracketed names, that is, `<adminUser>` and `<adminPwd>`, with
    the real credentials you are using in your MySQL installation.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 将占位符括号中的名称，即`<adminUser>`和`<adminPwd>`，替换为您在 MySQL 安装中使用的真实凭据。
- en: We have to be able to connect to the MySQL server. By default, we are in JavaScript `JS` mode.
    We can change that by typing `\sql` in the prompt to get into `SQL` mode. Now,
    we can use `SQL` commands. We did this in *steps 6* and *7*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须能够连接到 MySQL 服务器。默认情况下，我们处于 JavaScript `JS` 模式。我们可以通过在提示符中键入 `\sql` 来切换到
    `SQL` 模式。现在，我们可以使用 `SQL` 命令。我们在*步骤 6*和*步骤 7*中这样做过。
- en: If you are unable to connect to the MySQL server via the *Command Shell* or
    the Python `mysqlclient`, then something probably went wrong during the installation.
    If this is the case, try uninstalling MySQL, rebooting your PC, and then running
    the installation again.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您无法通过*命令行*或 Python 的 `mysqlclient` 连接到 MySQL 服务器，那么在安装过程中可能出了些问题。如果是这种情况，请尝试卸载
    MySQL，重新启动您的 PC，然后再次运行安装程序。
- en: In order to connect our GUI to a MySQL server, we need to be able to connect
    to the server with administrative privileges. We also need to do this if we want
    to create our own database. If the database already exists, then we just need
    the authorization rights to connect, insert, update, and delete data. We will
    create a new database on a MySQL server in the next recipe.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的 GUI 连接到 MySQL 服务器，我们需要能够以管理员权限连接到服务器。如果我们想创建自己的数据库，我们也需要这样做。如果数据库已经存在，那么我们只需要连接、插入、更新和删除数据的授权权限。我们将在下一个配方中在
    MySQL 服务器上创建一个新的数据库。
- en: Configuring the MySQL database connection
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 MySQL 数据库连接
- en: In the previous recipe, we used the shortest way to connect to a MySQL server,
    that is, by hardcoding the credentials that are required for authentication in
    the `connect` method. While this is a fast approach for early development, we
    definitely do not want to expose our MySQL server credentials to anyone. Instead,
    we want to *grant* permission to specific users so that they can access databases,
    tables, views, and related database commands.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个配方中，我们使用了连接到 MySQL 服务器的最短方式，即通过在 `connect` 方法中硬编码认证所需的凭据。虽然这是一种早期开发中快速的方法，但我们绝对不希望将我们的
    MySQL 服务器凭据暴露给任何人。相反，我们希望*授权*特定用户，以便他们可以访问数据库、表、视图和相关数据库命令。
- en: A much safer way to be authenticated by a MySQL server is by storing the credentials
    in a configuration file, which is what we will do in this recipe. We will use
    our configuration file to connect to the MySQL server and then create our own
    database on the MySQL server.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将凭据存储在配置文件中来由 MySQL 服务器进行认证是一种更安全的方法，这正是我们在本配方中要做的。我们将使用我们的配置文件来连接到 MySQL
    服务器，然后在 MySQL 服务器上创建自己的数据库。
- en: We will use this database in all of the recipes in this chapter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的所有配方中使用此数据库。
- en: Getting ready
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Access to a running MySQL server with administrator privileges is required to
    run the code shown in this recipe.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 运行本配方中所示代码需要具有管理员权限的运行 MySQL 服务器访问权限。
- en: The previous recipe shows how to install the free *Community Edition* of MySQL
    server. The administrator privileges will allow you to implement this recipe.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个配方展示了如何安装 MySQL 服务器的免费 *社区版*。管理员权限将允许您实施此配方。
- en: How to do it…
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let''s look at how to perform this recipe:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何执行此配方：
- en: 'First, we will create a dictionary in the same module where the `MySQL_connect.py` code
    is. Sequentially, we will do the following:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将在与 `MySQL_connect.py` 代码相同的模块中创建一个字典。然后，我们将按顺序执行以下操作：
- en: Open `MySQL_connect.py` and save it as `MySQL_connect_with_dict.py`.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MySQL_connect.py` 并将其保存为 `MySQL_connect_with_dict.py`。
- en: 'Add the following code to the module:'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向模块中添加以下代码：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Write the following code below `dbConfig`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `dbConfig` 下方写下以下代码：
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the code to make sure it works.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码以确保其正常工作。
- en: 'Create a new module, `GuiDBConfig.py`, and place the following code in it:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的模块，`GuiDBConfig.py`，并将以下代码放入其中：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, open `MySQL_connect_with_dict.py` and save it as `MySQL_connect_import_dict.py`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `MySQL_connect_with_dict.py` 并将其保存为 `MySQL_connect_import_dict.py`。
- en: 'Import `GuiDBConfig` and unpack the dictionary, as shown here:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `GuiDBConfig` 并解包字典，如下所示：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a new Python module and save it as `MySQL_create_DB.py`. Next, add the
    following code:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Python 模块并将其保存为 `MySQL_create_DB.py`。接下来，添加以下代码：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Execute `MySQL_create_DB.py` twice:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `MySQL_create_DB.py` 两次：
- en: '![](img/e64575b2-bc11-4b77-bbcc-dc9b4bb8ae77.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e64575b2-bc11-4b77-bbcc-dc9b4bb8ae77.png)'
- en: 'Create a new Python module and save it as `MySQL_show_DBs.py`. Then, add the
    following code:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Python模块并将其保存为`MySQL_show_DBs.py`。然后，添加以下代码：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Running the preceding code gives us the following output:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行前面的代码会给我们以下输出：
- en: '![](img/7fbef986-163d-4f9e-83e3-7a344e6aa673.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7fbef986-163d-4f9e-83e3-7a344e6aa673.png)'
- en: Let's go behind the scenes to understand the code better.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解代码以更好地理解它。
- en: How it works…
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, we created a dictionary and saved our connection credentials in the Python
    dictionary.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建了一个字典，并将连接凭据保存在Python字典中。
- en: 'Next, in the `connect` method, we unpacked the dictionary values. Take a look
    at the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`connect`方法中，我们解包了字典值。看看以下代码：
- en: '[PRE7]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Instead of using this code, we use `(**dbConfig)`, which achieves the same thing
    but is shorter.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是使用此代码，而是使用`(**dbConfig)`，它达到相同的效果但更简洁。
- en: This results in the same successful connection to the MySQL server, but the
    difference is that the connection method no longer exposes any mission-critical
    information.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致与MySQL服务器成功建立相同的连接，但不同之处在于连接方法不再暴露任何关键任务信息。
- en: A database server is critical to your mission. You will realize this once you
    have lost your valuable data and can't find any recent backup!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库服务器对你的任务至关重要。一旦你失去了宝贵的资料，而且找不到任何最近的备份，你就会意识到这一点！
- en: Please note that placing the same username, password, database, and so on into
    a dictionary in the same Python module does not eliminate the risk of having the
    credentials seen by anyone perusing the code.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，将相同的用户名、密码、数据库等放入同一Python模块的字典中并不能消除凭据被任何查看代码的人看到的危险。
- en: In order to increase database security, we had to move the dictionary into its
    own Python module. We called the new Python module `GuiDBConfig.py`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高数据库安全性，我们必须将字典移动到它自己的Python模块中。我们称新的Python模块为`GuiDBConfig.py`。
- en: We then imported this module and unpacked the credentials, as we did previously.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们导入了此模块，并解包了凭据，就像我们之前做的那样。
- en: Once we placed this module into a secure place, separated from the rest of the
    code, we achieved a better level of security for our MySQL data.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将此模块放置在安全的地方，与代码的其他部分分离，我们就为我们的MySQL数据实现了更高的安全级别。
- en: Now that we know how to connect to MySQL and have administrator privileges,
    we could create our own database by issuing SQL commands.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何连接到MySQL并拥有管理员权限，我们可以通过发出SQL命令来创建自己的数据库。
- en: In order to execute commands to MySQL, we created a cursor object from the connection
    object.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行对MySQL的命令，我们从一个连接对象中创建了一个游标对象。
- en: A cursor is usually a pointer to a specific row in a database table that we
    can move up or down the table, but here, we used it to create the database itself. We
    wrapped the Python code into a `try...except` block and used the built-in error
    codes of MySQL to tell us if anything went wrong.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 光标通常是指向数据库表中特定行的指针，我们可以将其在表中上下移动，但在这里，我们用它来创建数据库本身。我们将Python代码封装在`try...except`块中，并使用MySQL的内置错误代码来告诉我们是否发生了错误。
- en: We can verify that this block works by executing the database-creating code
    twice. The first time, it will create a new database in MySQL, and the second
    time, it will print out an error message stating that this database already exists.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行两次数据库创建代码来验证此块是否工作。第一次，它将在MySQL中创建一个新的数据库，第二次，它将打印出一个错误消息，指出该数据库已存在。
- en: We can verify which databases exist by executing the `SHOW DATABASES` command
    using the very same cursor object syntax. Instead of issuing the `CREATE DATABASE` command,
    we create a cursor and use it to execute the `SHOW DATABASES` command, the result
    of which we fetch and print to the console output.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用相同的游标对象语法执行`SHOW DATABASES`命令来验证哪些数据库存在。我们不是发出`CREATE DATABASE`命令，而是创建一个游标并使用它来执行`SHOW
    DATABASES`命令，然后将结果检索并打印到控制台输出。
- en: We retrieve the results by calling the `fetchall` method on the cursor object.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在游标对象上调用`fetchall`方法来检索结果。
- en: Running the `MySQL_show_DBs.py` code shows us which databases currently exist
    in our MySQL server instance. As we saw from the output, MySQL ships with several
    built-in databases, such as `information_schema`. We successfully created our
    own `guidb` database, which is shown in the output. All of the other databases
    that were illustrated come shipped with MySQL.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`MySQL_show_DBs.py`代码显示我们MySQL服务器实例中当前存在的数据库。正如我们从输出中看到的那样，MySQL自带了几个内置数据库，例如`information_schema`。我们成功创建了我们的`guidb`数据库，如输出所示。所有其他展示的数据库都是MySQL自带。
- en: Note how, even though we specified the database when we created it in mixed-case
    letters as GuiDB, the `SHOW DATABASES` command shows all the existing databases
    in MySQL in lowercase and displays our database as `guidb`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，尽管我们在创建时将其指定为混合大小写的 GuiDB，但 `SHOW DATABASES` 命令显示 MySQL 中所有现有数据库均为小写，并显示我们的数据库为
    `guidb`。
- en: 'The physical MySQL files are stored on the hard drive according to the `my.ini`
    file, which, on a Windows 10 installation, may be located at `C:\ProgramData\MySQL\MySQL
    Server 8.0`. Within this `.ini` file, you can find the following configuration
    path to the `Data` folder:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 物理MySQL文件根据 `my.ini` 文件存储在硬盘上，在 Windows 10 安装中，可能位于 `C:\ProgramData\MySQL\MySQL
    Server 8.0`。在此 `.ini` 文件中，您可以找到以下指向 `Data` 文件夹的配置路径：
- en: '`# Path to the database root`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 数据库根路径`'
- en: '`datadir=C:/ProgramData/MySQL/MySQL Server 8.0/Data`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`datadir=C:/ProgramData/MySQL/MySQL Server 8.0/Data`'
- en: Let's move on to the next recipe.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到下一个菜谱。
- en: Designing the Python GUI database
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计 Python GUI 数据库
- en: Before we start creating tables and inserting data into them, we have to design
    the database. Unlike changing local Python variable names, changing a database
    `schema` once it has been created and loaded with data is not that easy.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始创建表并将数据插入其中之前，我们必须设计数据库。与更改本地 Python 变量名不同，一旦创建并加载了数据，更改数据库 `schema` 就不是那么容易了。
- en: We would have to `DROP` the table, which means we would lose all the data that
    was in the table. So, before dropping a table, we would have to extract the data,
    save the data in a temporary table or other data format, and then `DROP` the table,
    recreate it, and finally reimport the original data.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不得不 `DROP` 表，这意味着我们会丢失表中所有的数据。因此，在删除表之前，我们必须提取数据，将数据保存到临时表或其他数据格式中，然后 `DROP`
    表，重新创建它，并最终重新导入原始数据。
- en: I hope you are getting the picture of how tedious this could be.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您已经明白了这可能会多么繁琐。
- en: Designing our GUI MySQL database means that we need to think about what we want
    our Python application to do with it and then choose names for our tables that
    match the intended purpose.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 设计我们的 GUI MySQL 数据库意味着我们需要考虑我们的 Python 应用程序将如何使用它，然后为我们的表选择符合预期目的的名称。
- en: Getting ready
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be working with the MySQL database we created in the previous recipe,
    *Configuring the MySQL database connection*. A running instance of MySQL is necessary
    and the two previous recipes show you how to install MySQL, all the necessary
    additional drivers, and how to create the database we are using in this chapter.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在前一个菜谱中创建的 MySQL 数据库，*配置 MySQL 数据库连接*。需要一个正在运行的 MySQL 实例，前两个菜谱展示了如何安装 MySQL、所有必要的附加驱动程序以及如何创建本章中使用的数据库。
- en: How to do it…
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In this recipe, we are starting with the `GUI_TCP_IP.py` file from the previous
    chapter. We will move the widgets from our Python GUI between the two tabs we
    created in the previous recipes in order to organize our Python GUI so that it
    can connect to a MySQL database. Let''s take a look at how can we complete this
    recipe:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们从上一章的 `GUI_TCP_IP.py` 文件开始。我们将把我们的 Python GUI 中的小部件从上一个菜谱中创建的两个标签页之间移动，以便组织我们的
    Python GUI，使其能够连接到 MySQL 数据库。让我们看看如何完成这个菜谱：
- en: Open `GUI_TCP_IP.py` and save it as `GUI_MySQL.py`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `GUI_TCP_IP.py` 并将其保存为 `GUI_MySQL.py`。
- en: Download the full code from the Packt website.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Packt 网站下载完整代码。
- en: 'Use a tool such as WinMerge to compare the two versions of the GUI:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 WinMerge 等工具比较两个版本的 GUI：
- en: '![](img/1f6f6a0a-d639-42c8-a600-072efa9f2606.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f6f6a0a-d639-42c8-a600-072efa9f2606.png)'
- en: 'Run the code located in `GUI_MySQL.py`. You will observe the following output:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行位于 `GUI_MySQL.py` 中的代码。您将观察到以下输出：
- en: '![](img/7c3cd175-f427-43e6-9563-28e8e4b672da.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c3cd175-f427-43e6-9563-28e8e4b672da.png)'
- en: Now, open `MySQL_create_DB.py` and save it as `MySQL_show_DB.py`.
  id: totrans-128
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `MySQL_create_DB.py` 并将其保存为 `MySQL_show_DB.py`。
- en: 'Replace the `try...catch` block with the following code:'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `try...catch` 块替换为以下代码：
- en: '[PRE8]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run the code and observe the output:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并观察输出：
- en: '![](img/a6f5483e-7c1d-49af-afea-0e86089212ff.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6f5483e-7c1d-49af-afea-0e86089212ff.png)'
- en: Create a module similar to `GUI_MySQL_class.py`.
  id: totrans-133
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个类似于 `GUI_MySQL_class.py` 的模块。
- en: 'Add and run the following code:'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加并运行以下代码：
- en: '[PRE9]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the following code, which is located in `GUI_MySQL_class.py`:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码，该代码位于 `GUI_MySQL_class.py` 中：
- en: '![](img/ab793279-6230-47b1-9cc3-36c8bba03fb0.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab793279-6230-47b1-9cc3-36c8bba03fb0.png)'
- en: 'Open Command Prompt and navigate to `mysql.exe`:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符并导航到 `mysql.exe`：
- en: '![](img/febf4679-11a0-432b-ac52-8dd229220fa0.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/febf4679-11a0-432b-ac52-8dd229220fa0.png)'
- en: 'Run `mysql.exe`:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `mysql.exe`：
- en: '![](img/2d4ab9b4-4c92-4b96-a679-a37e00d17c1a.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2d4ab9b4-4c92-4b96-a679-a37e00d17c1a.png)'
- en: 'Enter the `SHOW COLUMNS FROM books;` command:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`SHOW COLUMNS FROM books;`命令：
- en: '![](img/28969003-6ce6-491b-a714-63118f960a67.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/28969003-6ce6-491b-a714-63118f960a67.png)'
- en: 'Create a second table by running the following code:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下代码创建第二个表：
- en: '[PRE10]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Execute the `SHOW TABLES` command:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`SHOW TABLES`命令：
- en: '![](img/ac9e3ca0-c47c-4cb8-8776-8bfc68d305bb.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ac9e3ca0-c47c-4cb8-8776-8bfc68d305bb.png)'
- en: 'Execute the `SHOW COLUMNS` command:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`SHOW COLUMNS`命令：
- en: '![](img/87dd9c12-e39f-453e-b0d4-cfc4a8dc62fa.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/87dd9c12-e39f-453e-b0d4-cfc4a8dc62fa.png)'
- en: 'Execute `SHOW COLUMNS` again with `pprint`:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次执行`SHOW COLUMNS`命令：
- en: '![](img/de29f1b3-2496-400b-a30c-400908c4774c.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/de29f1b3-2496-400b-a30c-400908c4774c.png)'
- en: Let's go behind the scenes to understand the code better.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解代码，以更好地理解它。
- en: How it works…
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We started with the `GUI_TCP_IP.py` file from the previous chapter and reorganized
    the widgets.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从上一章的`GUI_TCP_IP.py`文件开始，重新组织了小部件。
- en: We renamed several widgets and separated the code that accesses the MySQL data
    to what used to be named **Tab 1**, and we moved the unrelated widgets to what
    we named **Tab 2** in the previous recipes. We also adjusted some internal Python
    variable names so that we can understand our code better.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重命名了几个小部件，并将访问MySQL数据的代码分离到之前命名为**Tab 1**的部分，并将无关的小部件移动到之前命名为**Tab 2**的部分。我们还调整了一些内部Python变量名，以便我们更好地理解我们的代码。
- en: Code readability is a coding virtue and not a waste of time.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可读性是一种编程美德，而不是浪费时间。
- en: The refactored module is close to 400 lines of Python code and it would take
    too many pages to show the entire code here. On Windows, we can use a tool called **WinMerge** to
    compare different Python code modules. I am sure there are similar tools for macOS
    and Linux.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 重构的模块接近400行Python代码，在这里展示整个代码会占用太多页面。在Windows上，我们可以使用一个名为**WinMerge**的工具来比较不同的Python代码模块。我确信macOS和Linux也有类似的工具。
- en: WinMerge is a great tool for comparing different Python (and other) code modules
    on Windows. We can use it to look at the differences between code modules. You
    can download it for free from [https://sourceforge.net/projects/winmerge](https://sourceforge.net/projects/winmerge/).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: WinMerge 是一个在Windows上比较不同Python（和其他）代码模块的出色工具。我们可以用它来查看代码模块之间的差异。您可以从[https://sourceforge.net/projects/winmerge](https://sourceforge.net/projects/winmerge/)免费下载它。
- en: 'Our refactored Python GUI now looks as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重构的Python GUI现在看起来如下：
- en: '![](img/eeef71d3-13ca-461c-8c63-8fbfd0182aa3.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eeef71d3-13ca-461c-8c63-8fbfd0182aa3.png)'
- en: We renamed the first tab MySQL and created two `LabelFrame` widgets of `tkinter`.
    We labeled the one on the top `Python Database`, which contains two labels and
    six `tkinter` Entry widgets, as well as three buttons, which we aligned in four
    rows and three columns using the `tkinter` grid layout manager. We will enter
    book titles and pages into the Entry widgets. Clicking the buttons will result
    in either inserting, retrieving, or modifying book quotations. The `LabelFrame` widget at
    the bottom has a label of Book Quotation and the `ScrolledText` widget that is
    part of this frame will display our books and quotations.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将第一个标签重命名为MySQL，并创建了两个`LabelFrame`小部件。我们称顶部的为`Python Database`，它包含两个标签和六个`tkinter`
    Entry小部件，以及三个按钮，我们使用`tkinter`网格布局管理器将它们排列成四行三列。我们将输入书名和页数到Entry小部件中。点击按钮将导致插入、检索或修改书籍引用。底部的`LabelFrame`小部件的标签为“Book
    Quotation”，而这个框架中的`ScrolledText`小部件将显示我们的书籍和引用。
- en: Then, we created two SQL tables to hold our data. The first will hold the data
    for the book title and book page, which will then join with the second table,
    which will hold the book quote. We will link the two tables together via *primary
    key to foreign key relationships*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了两个SQL表来存储我们的数据。第一个将存储书名和书页数据，然后将与第二个表连接，该表将存储书籍引用。我们将通过*主键到外键关系*将两个表链接在一起。
- en: 'So, let''s create the first database table now. Before we do that, let''s verify
    that our database does, indeed, have no tables. According to the online MySQL
    documentation, the command to view the tables that exist in a database is as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建第一个数据库表。在我们这样做之前，让我们验证一下我们的数据库确实没有表。根据在线MySQL文档，查看数据库中存在的表的命令如下：
- en: '[PRE11]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It is important to note that, in the preceding syntax, arguments in square brackets,
    such as `FULL`, are optional, while arguments in curly braces, such as `FROM`,
    are required for the `SHOW TABLES` command. The pipe symbol between `FROM` and `IN` means
    that the MySQL syntax requires one or the other.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，在前面的语法中，方括号中的参数，如`FULL`，是可选的，而花括号中的参数，如`FROM`，对于`SHOW TABLES`命令是必需的。`FROM`和`IN`之间的管道符号表示MySQL语法要求使用其中一个或另一个。
- en: When we execute the SQL command in `MySQL_show_DB.py`, we get the expected result,
    which is an empty tuple showing us that our database currently has no tables.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在`MySQL_show_DB.py`中执行SQL命令时，我们得到预期的结果，即一个空元组，显示我们的数据库目前没有表。
- en: We can also select the database by executing the `USE <DB>` command. By doing
    this, we don't have to pass it into the `SHOW TABLES` command because we have
    already selected the database we want to talk to.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过执行`USE <DB>`命令来选择数据库。通过这样做，我们不需要将它传递给`SHOW TABLES`命令，因为我们已经选择了我们想要与之通信的数据库。
- en: All the SQL code is located in `GUI_MySQL_class.py` and we import this into
    `GUI_MySQL.py`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的SQL代码都位于`GUI_MySQL_class.py`中，我们将它导入到`GUI_MySQL.py`中。
- en: Now that we know how to verify that our database has no tables, we create some.
    After creating two tables, we verify that they have truly made it into our database
    by using the same commands as before.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经知道如何验证我们的数据库中没有表，我们就创建一些。在创建两个表之后，我们使用之前的相同命令来验证它们确实已经进入我们的数据库。
- en: Doing this, we created the first table, named `Books`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们创建了第一个表，命名为`Books`。
- en: We can verify that the table has been created in our database by executing the
    `cursor.execute("SHOW TABLES FROM guidb")` command.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行`cursor.execute("SHOW TABLES FROM guidb")`命令来验证表是否已经创建在我们的数据库中。
- en: The result is no longer an empty tuple but a tuple that contains a tuple, showing
    the `books` table we just created.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 结果不再是空元组，而是一个包含元组的元组，显示了刚刚创建的`books`表。
- en: We can use the MySQL command-line client to view the columns in our table. In
    order to do this, we have to log in as the *root* user. We also have to append
    a **semicolon** to the end of the command.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用MySQL命令行客户端查看我们表中的列。为了做到这一点，我们必须以*root*用户登录。我们还需要在命令的末尾添加一个**分号**。
- en: On Windows, you simply double-click the MySQL command-line client shortcut,
    which is automatically installed during the MySQL installation.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，你只需双击MySQL命令行客户端快捷方式，该快捷方式在MySQL安装期间自动安装。
- en: 'If you don''t have a shortcut on your desktop, you can find the executable
    at the following path for a typical default installation:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你桌面上没有快捷方式，你可以找到典型默认安装的可执行文件在以下路径：
- en: '[PRE12]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Without a shortcut to run the MySQL client, you have to pass it some parameters:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 没有运行MySQL客户端的快捷方式，你必须传递给它一些参数：
- en: '`C:\Program Files\MySQL\MySQL Server 8.0\bin\mysql.exe`'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\Program Files\MySQL\MySQL Server 8.0\bin\mysql.exe`'
- en: '`-u root`'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-u root`'
- en: '`-p`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-p`'
- en: If double-clicking creates an error, make sure you use the `-u` and `-p` options.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果双击创建错误，请确保你使用`-u`和`-p`选项。
- en: Either double-clicking the shortcut or using the command line with the full
    path to the executable and passing in the required parameters will bring up the
    MySQL command-line client, which prompts you to enter the password for the root
    user.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动MySQL命令行客户端，无论是通过双击快捷方式还是使用带有完整路径的可执行文件的命令行并传递所需参数，都会提示你输入root用户的密码。
- en: If you remember the password you assigned to the root user during the installation,
    you can then run the `SHOW COLUMNS FROM books;` command. This will display the
    columns of our `books` table from our `guidb` database.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记得你在安装期间为root用户分配的密码，那么你可以运行`SHOW COLUMNS FROM books;`命令。这将显示我们`guidb`数据库中`books`表的列。
- en: When executing commands in the MySQL client, the syntax is not Pythonic, as
    it requires a trailing semicolon to complete the statement.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL客户端中执行命令时，语法不是Python式的，因为它需要一个尾随的分号来完成语句。
- en: Next, we created the second table, which will store the book and journal quotations.
    We created it by writing similar code to what we used to create the first table.
    We verified that we now have two tables by running the same SQL command.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建了第二个表，它将存储书籍和期刊引用。我们通过编写与创建第一个表时类似的代码来创建它。通过运行相同的SQL命令，我们验证了我们现在有两个表。
- en: 'We can see the columns by executing the SQL command using Python:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用Python执行SQL命令来查看列：
- en: '[PRE13]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Using the MySQL client might present the data in a better format than Command
    Prompt. We can also use Python's pretty print (`pprint`) feature for this.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MySQL客户端可能比命令提示符更好地显示数据格式。我们还可以使用Python的pretty print (`pprint`)功能来完成此操作。
- en: The MySQL client still shows our columns in a clearer format, which can be seen
    when you run this client.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL客户端仍然以更清晰的格式显示我们的列，您可以在运行此客户端时看到这一点。
- en: We designed our Python GUI database and refactored our GUI in preparation to
    use our new database. Then, we created a MySQL database and created two tables
    within it.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设计了我们的Python GUI数据库，并重构了我们的GUI，为使用新的数据库做准备。然后，我们创建了一个MySQL数据库，并在其中创建了两个表。
- en: We verified that the tables made it into our database by using both Python and
    the MySQL client that ships with the MySQL server.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用Python和MySQL服务器附带MySQL客户端，验证了表已成功添加到我们的数据库中。
- en: In the next recipe, we will insert data into our tables.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个菜谱中，我们将向我们的表中插入数据。
- en: Using the SQL INSERT command
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SQL INSERT命令
- en: This recipe presents the entire Python code that shows you how to create and
    drop MySQL databases and tables, as well as how to display the existing databases,
    tables, columns, and data of our MySQL instance.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱展示了整个Python代码，展示了如何创建和删除MySQL数据库和表，以及如何显示MySQL实例的现有数据库、表、列和数据。
- en: After creating the database and tables, we will insert data into the two tables
    we will create in this recipe.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建数据库和表之后，我们将向本章中创建的两个表中插入数据。
- en: We are using a *primary key* to *foreign key* relationship to connect the data
    of the two tables.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用主键到外键的关系来连接两个表的数据。
- en: We will go into detail about how this works in the following two recipes, where
    we will modify and delete the data in our MySQL database.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的两个菜谱中详细介绍这是如何工作的，我们将修改和删除MySQL数据库中的数据。
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe builds on the MySQL database we created in the previous recipe,
    *Designing the Python GUI database*, and also shows you how to drop and recreate
    the GuiDB.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱基于我们在上一个菜谱中创建的MySQL数据库，*设计Python GUI数据库*，并展示了如何删除和重新创建GuiDB。
- en: Dropping the database, of course, deletes all the data the database has in its
    tables, so we'll show you how to reinsert that data as well.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 删除数据库当然会删除数据库表中所有的数据，因此我们将向您展示如何重新插入这些数据。
- en: How to do it…
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The entire code in the `GUI_MySQL_class.py` module is present in the code folder
    for this chapter, which you can download from [https://github.com/PacktPublishing/Python-GUI-Programming-Cookbook-Third-Edition](https://github.com/PacktPublishing/Python-GUI-Programming-Cookbook-Third-Edition).
    Let''s go through these steps sequentially:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`GUI_MySQL_class.py`模块中的所有代码都位于本章的代码文件夹中，您可以从[https://github.com/PacktPublishing/Python-GUI-Programming-Cookbook-Third-Edition](https://github.com/PacktPublishing/Python-GUI-Programming-Cookbook-Third-Edition)下载。让我们按顺序进行这些步骤：'
- en: Download the code for this chapter.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载本章的代码。
- en: 'Open `GUI_MySQL_class.py` and look at the class methods:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_MySQL_class.py`并查看类方法：
- en: '[PRE14]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Running the preceding code (including the full implementation of the code) creates
    the following tables and data in the database we created.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行前面的代码（包括代码的完整实现）将在我们创建的数据库中创建以下表和数据。
- en: 'Open Command Prompt and execute the two `SELECT *` statements:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符并执行两个`SELECT *`语句：
- en: '![](img/6c11fa1e-274e-4a1d-b81f-80fabcf857c6.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6c11fa1e-274e-4a1d-b81f-80fabcf857c6.png)'
- en: Let's go behind the scenes to understand the code better.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解代码，以更好地理解它。
- en: How it works…
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `GUI_MySQL_class.py` code creates the database, adds tables to it, and then
    inserts data into the two tables we created.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`GUI_MySQL_class.py`代码创建数据库，向其中添加表，然后向两个我们创建的表中插入数据。'
- en: Here, we outline the code without showing all the implementation details in
    order to preserve space because it would take too many pages to show the entire
    code.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们概述了代码，而没有展示所有实现细节，以节省空间，因为展示整个代码需要太多页面。
- en: We created a MySQL database, connected to it, and then created two tables that
    hold the data for a favorite book or journal quotation.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个MySQL数据库，连接到它，然后创建了两个表，用于存储喜欢的书籍或期刊引文的数据。
- en: We distributed the data between two tables because the quotations tend to be
    rather large, while the book titles and book page numbers are very short. By doing
    this, we can increase the efficiency of our database.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在两个表中分配了数据，因为引文往往相当长，而书名和书页码非常短。通过这样做，我们可以提高数据库的效率。
- en: In SQL database language, separating data into separate tables is called *normalization*.
    One of the most important things you need to do while using a SQL database is
    to segregate data into related tables, also known as **relationships**.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL数据库语言中，将数据分离到单独的表中称为*规范化*。在使用SQL数据库时，你需要做的最重要的事情之一是将数据分离到相关的表中，也称为**关系**。
- en: Let's move on to the next recipe.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到下一个菜谱。
- en: Using the SQL UPDATE command
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SQL的`UPDATE`命令
- en: This recipe will use the code from the previous recipe, *Using the SQL INSERT
    command*, explain it in more detail, and then extend the code to update the data.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱将使用上一个菜谱中的代码，即*使用SQL的`INSERT`命令*，更详细地解释它，然后扩展代码以更新数据。
- en: In order to update the data that we previously inserted into our MySQL database
    tables, we need to use the SQL `UPDATE` command.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更新我们之前插入到MySQL数据库表中的数据，我们需要使用SQL的`UPDATE`命令。
- en: Getting ready
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe builds on the previous recipe, *Using the SQL INSERT command*, so
    read and study the previous recipe in order to follow the code in this recipe,
    where we will modify the existing data.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱建立在之前的菜谱*使用SQL的`INSERT`命令*的基础上，所以请阅读并学习之前的菜谱，以便跟随这个菜谱中的代码，我们将修改现有数据。
- en: How to do it…
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s take a look at how we can use the `SQL UPDATE` command:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们如何使用`SQL UPDATE`命令：
- en: 'First, we will display the data to be modified by running the following Python
    to the MySQL command. Sequentially, we perform the following steps:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将通过运行以下Python到MySQL命令来显示要修改的数据。然后，我们按顺序执行以下步骤：
- en: Open `GUI_MySQL_class.py`.
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_MySQL_class.py`。
- en: 'Look at the `showData` method:'
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看看`showData`方法：
- en: '[PRE15]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Running the preceding code gives us the following output:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行前面的代码给出了以下输出：
- en: '![](img/0c766ac7-e8b1-4826-9b52-f1f83830152a.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c766ac7-e8b1-4826-9b52-f1f83830152a.png)'
- en: 'Look at the `updateGOF` method:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看看`updateGOF`方法：
- en: '[PRE16]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the method located in `GUI_MySQL_class.py`:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行位于`GUI_MySQL_class.py`中的方法：
- en: '![](img/dab36cb7-f38f-4f70-9ad2-855665695ffc.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dab36cb7-f38f-4f70-9ad2-855665695ffc.png)'
- en: 'Add the following code and run it:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码并运行：
- en: '[PRE17]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Open a MySQL client window and run the `SELECT *` statements:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开MySQL客户端窗口并运行`SELECT *`语句：
- en: '![](img/61f1631f-cf20-4237-a2b8-d3ba0d17f5b8.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61f1631f-cf20-4237-a2b8-d3ba0d17f5b8.png)'
- en: Let's go behind the scenes to understand the code better.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解代码以更好地理解它。
- en: How it works…
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, we opened `GUI_MySQL_class.py` or typed the code that was shown in our
    own module and ran it.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们打开了`GUI_MySQL_class.py`文件或者在我们自己的模块中输入显示的代码并运行它。
- en: We may not agree with the *Gang of Four*, so let's change their famous programming
    quote.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能不同意**四人帮**的观点，所以让我们改变他们著名的编程名言。
- en: The Gang of Four are the four authors who created the world-famous book called *Design
    Patterns*, which strongly influenced our entire software industry to recognize,
    think, and code using software *design patterns*.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 四人帮是四位创建了世界著名的《设计模式》这本书的作者，这本书强烈影响了我们整个软件行业，使我们认识到、思考和用软件*设计模式*进行编码。
- en: We did this by updating our database of favorite quotes. First, we retrieved
    the primary key value by searching for the book title. Then, we passed that value
    into our search for the quote.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过更新我们最喜欢的引言数据库来做到这一点。首先，我们通过搜索书名来检索主键值。然后，我们将该值传递到我们的引言搜索中。
- en: Now that we know the primary key of the quote, we can update the quote by executing
    the SQL `UPDATE` command.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了引言的主键，我们可以通过执行SQL的`UPDATE`命令来更新引言。
- en: Before we ran the code, our title with `Book_ID = 1` was related via a *primary* *key* to *foreign
    key* relationship to the quotation in the `Books_Book_ID` column of the quotation
    table. This is the original quotation from the *Design Patterns* book.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行代码之前，我们的`Book_ID = 1`的标题通过一个*主键*与引言表中的`Books_Book_ID`列的*外键*关系相关联。这是来自*设计模式*书的原始引言。
- en: In *step 5*, we updated the quotation related to this ID via the SQL `UPDATE` command.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤5*中，我们通过SQL的`UPDATE`命令更新了与该ID相关的引言。
- en: None of the IDs have changed, but the quotation that is now associated with `Book_ID
    = 1` has changed, as can be seen in the second MySQL client window.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 没有ID发生变化，但现在与`Book_ID = 1`关联的引言已经改变，如第二个MySQL客户端窗口所示。
- en: In this recipe, we retrieved the existing data from our database and database
    tables that we created in the previous recipes. We inserted data into the tables
    and updated our data using the SQL `UPDATE` command.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们从数据库中检索了我们之前菜谱中创建的数据库表中的现有数据。我们使用SQL的`UPDATE`命令向表中插入数据并更新我们的数据。
- en: Let's move on to the next recipe.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到下一个菜谱。
- en: Using the SQL DELETE command
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SQL DELETE命令
- en: In this recipe, we will use the SQL `DELETE` command to delete the data we created
    in the previous recipe, *Using the SQL UPDATE command*.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用SQL `DELETE`命令来删除之前在*使用SQL UPDATE命令*中创建的数据。
- en: While deleting data might sound trivial at first, once we get a rather large
    database design in production, things might not be that easy any more.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '打开`GUI_MySQL_class.py`并查看`def createTables(self): ...`：'
- en: Because we have designed our GUI database by *relating* two tables via a *primary*
    to *foreign key relation*, when we delete certain data, we do not end up with
    *orphan records* because this database design takes care of *cascading* deletes.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Getting ready
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虽然删除数据一开始可能看起来很简单，但一旦我们在生产环境中有一个相当大的数据库设计，事情可能就不会那么简单了。
- en: This recipe uses the MySQL database, tables, and the data that was inserted
    into those tables from the previous recipe, *Using the SQL UPDATE command*. In
    order to demonstrate how to create orphan records, we will have to change the
    design of one of our database tables.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱使用了MySQL数据库、表以及之前菜谱中插入到这些表中的数据，*使用SQL UPDATE命令*。为了演示如何创建孤立记录，我们不得不更改我们数据库中的一个表的设计。
- en: Changing the design to intentionally create a poor design is for demonstration
    purposes only and is not the recommended way of designing a database.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 故意将设计改为糟糕的设计只是为了演示目的，并不是设计数据库的推荐方式。
- en: How to do it…
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'If we create our `quotations` table without a *foreign key relationship* to
    the `books` table, we can end up with orphan records. Take a look at the following
    steps:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在将数据插入到`books`和`quotations`表之后，如果我们执行一个`DELETE`语句，我们只删除了`Book_ID = 1`的书籍，而与之相关的`Books_Book_ID
    = 1`的引文却被留下了。
- en: 'Open `GUI_MySQL_class.py` and look at `def createTablesNoFK(self): ...`:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们深入了解代码以更好地理解它。
- en: '[PRE18]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the SQL command:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下SQL命令：
- en: '[PRE19]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the two `SELECT *` commands:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下两个`SELECT *`命令：
- en: '![](img/407b6af1-6518-472b-bcd3-dcc64502cb1f.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/407b6af1-6518-472b-bcd3-dcc64502cb1f.png)'
- en: 'Open `GUI_MySQL_class.py` and look at `def createTables(self): ...`:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为我们通过将两个表通过*主键到外键关系*关联起来设计了我们的GUI数据库，当我们删除某些数据时，我们不会得到孤立记录，因为这种数据库设计会处理*级联删除*。
- en: '[PRE20]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the `showData()` method:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`showData()`方法：
- en: '![](img/e4e60106-2a4c-4b52-95f4-35c92fa93afd.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e4e60106-2a4c-4b52-95f4-35c92fa93afd.png)'
- en: 'Run the `deleteRecord()` method, followed by the `showData()` method:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`deleteRecord()`方法，然后执行`showData()`方法：
- en: '[PRE21]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding code results in the following output:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述代码将产生以下输出：
- en: '![](img/76aba897-d5dd-46a6-ae17-9ce02a0c9364.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/76aba897-d5dd-46a6-ae17-9ce02a0c9364.png)'
- en: Let's go behind the scenes to understand the code better.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过仅使用两个数据库表来保持我们的数据库设计简单。
- en: How it works…
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果我们不将`quotations`表与`books`表建立外键关系，我们可能会得到孤立记录。请看以下步骤：
- en: We kept our database design simple by using only two database tables.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 准备工作
- en: While this works when we delete data, there is always a chance of us ending
    up with orphan records. What this means is that we delete data in one table but
    somehow do not delete the related data in another SQL table. Here, we started
    by intentionally showing how **orphan records** can be created.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们删除数据时，虽然这看起来很简单，但如果我们有一个相当大的数据库设计在生产环境中，事情可能不会那么简单。
- en: After inserting data into the `books` and `quotations` tables, if we execute
    a `DELETE` statement, we are only deleting the book with `Book_ID = 1`, while
    the related quotation with `Books_Book_ID = 1` is left behind.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '打开`GUI_MySQL_class.py`并查看`def createTablesNoFK(self): ...`：'
- en: This is an **orphaned record**. A book record that has a `Book_ID` of `1` no
    longer exists.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 **孤立的记录**。一本`Book_ID`为`1`的书籍记录已不再存在。
- en: This situation can cause **data corruption**, which we can avoid by using *cascading* deletes.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况可能会导致 **数据损坏**，我们可以通过使用 **级联** 删除来避免这种情况。
- en: We prevented this in the creation of the tables by adding certain database *constraints*.
    When we created the table that holds the quotations in a previous recipe, we created
    our `quotations` table with a *foreign* *key* **constraint** that explicitly references
    the *primary key* of the books table, linking the two.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在创建表时通过添加某些数据库 **约束** 来防止这种情况。当我们创建之前菜谱中保存引文的`quotations`表时，我们创建了一个带有 **外键** **约束** 的`quotations`表，该约束明确引用了书籍表的 **主键**，将两者联系起来。
- en: The `FOREIGN KEY` relationship includes the `ON DELETE CASCADE` attribute, which
    basically tells our MySQL server to delete the related records in this table when
    the records that this foreign key relates to are deleted.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`FOREIGN KEY`关系包括`ON DELETE CASCADE`属性，这基本上告诉我们的MySQL服务器，当与这个外键相关的记录被删除时，要删除此表中的相关记录。'
- en: Because of this design, no *orphan* records will be left behind, which is what
    we want.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这种设计，不会留下任何*孤立的*记录，这正是我们想要的。
- en: In MySQL, we have to specify `ENGINE=InnoDB` on both of the related tables in
    order to use *primary key* to *foreign key* relationships.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL中，我们必须在相关的两个表中指定`ENGINE=InnoDB`，才能使用*主键*与*外键*关系。
- en: The `showData()` method shows us that we have two records that are related via *primary
    key* to *foreign key* relationships.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`showData()`方法显示我们有两条记录，它们通过*主键*与*外键*关系相关联。'
- en: When we now delete a record in the `books` table, we expect the related record
    in the `quotations` table to also be deleted by a cascading delete.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们现在在`books`表中删除一条记录时，我们期望`quotations`表中的相关记录也会通过级联删除被删除。
- en: After executing the commands to delete and show records, we got the new results.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 执行删除和显示记录的命令后，我们得到了新的结果。
- en: The famous design patterns are gone from our database of favorite quotations.
    This is meant as a joke—I personally highly value the famous design patterns.
    However, Python's *duck typing* is a very cool feature indeed!
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最喜欢的引言数据库中的著名设计模式已经消失了。这只是一个玩笑——我个人非常重视著名的设计模式。然而，Python的*鸭子类型*确实是一个非常酷的特性！
- en: We triggered *cascading* deletes in this recipe by designing our database in
    a solid fashion via *primary key* to *foreign key* relationships with *cascading*
    deletes.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 通过通过设计我们的数据库，通过*主键*到*外键*关系以及*级联删除*，我们在这个菜谱中触发了*级联*删除。
- en: This keeps our data sane and integral.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这保持了我们的数据健全和完整。
- en: In the next recipe, we will use the code of our `GUI_MySQL_class.py` module
    from our Python GUI.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个菜谱中，我们将使用我们的Python GUI中的`GUI_MySQL_class.py`模块的代码。
- en: Storing and retrieving data from our MySQL database
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从我们的MySQL数据库存储和检索数据
- en: We will use our Python GUI to insert data into our MySQL database tables. We
    already refactored the GUI we built in the previous recipes in preparation for
    connecting and using a database.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们的Python GUI将数据插入到我们的MySQL数据库表中。我们已经重构了在之前的菜谱中构建的GUI，为连接和使用数据库做准备。
- en: We will use two textbox Entry widgets, into which we can type the book or journal
    title and the page number. We will also use a `ScrolledText` widget to type our
    favorite book quotations into, which we will then store in our MySQL database.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用两个文本框输入控件，我们可以在这里输入书籍或期刊的标题和页码。我们还将使用一个`ScrolledText`控件来输入我们喜欢的书籍引言，然后将其存储在我们的MySQL数据库中。
- en: Getting ready
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will build on the MySQL database and tables we created in the previous
    recipes of this chapter.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱将基于我们在本章前面的菜谱中创建的MySQL数据库和表。
- en: How to do it…
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We will insert, retrieve, and modify our favorite quotations using our Python
    GUI. We refactored the MySQL tab of our GUI in preparation for this. Let''s look
    at how we can deal with this:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们的Python GUI插入、检索和修改我们最喜欢的引言。我们重构了GUI的MySQL标签，为连接和使用数据库做准备。让我们看看我们如何处理这个问题：
- en: Open `GUI_MySQL.py`.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_MySQL.py`。
- en: 'Running the code in this file shows us our GUI:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此文件中的代码显示我们的GUI：
- en: '![](img/078657a7-58ac-4f94-b2a1-612d22ff8584.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/078657a7-58ac-4f94-b2a1-612d22ff8584.png)'
- en: Open `GUI_MySQL.py`.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_MySQL.py`。
- en: 'Notice the `insertQuote()` method, as shown here:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意这里显示的`insertQuote()`方法：
- en: '[PRE22]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run `GUI_MySQL.py`, enter a quotation, and click the Insert Quote button:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`GUI_MySQL.py`，输入一个引言，然后点击插入引言按钮：
- en: '![](img/fe1f64c5-5902-46f4-8fa1-0d22868b7fca.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fe1f64c5-5902-46f4-8fa1-0d22868b7fca.png)'
- en: 'Click Get Quotes:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击获取引言：
- en: '![](img/8e3e3a20-018e-41ab-b8dc-48f3000ae4a2.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8e3e3a20-018e-41ab-b8dc-48f3000ae4a2.png)'
- en: 'Open `GUI_MySQL.py` and look at the `getQuote` method and button:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_MySQL.py`并查看`getQuote`方法和按钮：
- en: '[PRE23]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Open `GUI_MySQL.py` and look at `self.mySQL` and `showBooks()`:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_MySQL.py`并查看`self.mySQL`和`showBooks()`：
- en: '[PRE24]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Let's go over how this recipe works.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下这个菜谱是如何工作的。
- en: How it works…
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In order to make the buttons in `GUI_MySQL.py` do something, we connect them
    to *callback functions*, like we have done many times in this book. We display the
    data in the `ScrolledText` widget, below the buttons.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让`GUI_MySQL.py`中的按钮执行某些操作，我们将它们连接到*回调函数*，就像我们在本书中多次做的那样。我们在按钮下方显示`ScrolledText`控件中的数据。
- en: In order to do this, we import the `GUI_MySQL_class.py` module. The entire code
    that talks to our MySQL server instance and database resides in this module, which
    is a form of *encapsulating* the code in the spirit of **object-oriented programming** (**OOP**).
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们导入了 `GUI_MySQL_class.py` 模块。与我们的 MySQL 服务器实例和数据库通信的所有代码都驻留在该模块中，这是一种在**面向对象编程**（**OOP**）精神中**封装**代码的形式。
- en: We connect the Insert Quote button to the `insertQuote()` method callback.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将“插入引文”按钮连接到 `insertQuote()` 方法回调。
- en: When we run our code, we can insert data from our Python GUI into our MySQL
    database.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行我们的代码时，我们可以将我们的 Python GUI 中的数据插入到我们的 MySQL 数据库中。
- en: After entering a book title and book page, as well as a quote from the book,
    we *insert* the data into our database by clicking the Insert Quote button.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入书名、书页以及书中的引文后，我们通过点击“插入引文”按钮将数据*插入*到我们的数据库中。
- en: Our current design allows for titles, pages, and a quotation. We can also insert
    our favorite quotations from movies. While a movie does not have pages, we can
    use the page column to insert the approximate time when the quotation occurred
    within the movie.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的设计允许标题、页码和引文。我们还可以插入我们喜欢的电影引文。虽然电影没有页码，但我们可以使用页码列来插入引文在电影中发生的大致时间。
- en: After inserting the data, we verified that it made it into our two MySQL tables
    by clicking the Get Quotes button, which then displayed the data we inserted into
    our two MySQL database tables, as shown in the screenshot in *step 6*.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在插入数据后，我们通过点击“获取引文”按钮来验证它是否已进入我们的两个 MySQL 表，然后显示了我们在两个 MySQL 数据库表中插入的数据，如*步骤
    6*中的截图所示。
- en: Clicking the Get Quotes button invokes the callback method we associated with
    the button click event. This gives us the data that we display in our `ScrolledText` widget.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“获取引文”按钮将调用我们与按钮点击事件关联的回调方法。这为我们提供了我们在 `ScrolledText` 小部件中显示的数据。
- en: We used the `self.mySQL` class instance attribute to invoke the `showBooks()` method,
    which is a part of the `MySQL` class we imported.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `self.mySQL` 类实例属性来调用 `showBooks()` 方法，这是我们在导入的 `MySQL` 类中的一部分。
- en: In this recipe, we imported the Python module we wrote, which contains all of
    the coding logic that we need so that we can connect to our MySQL database. It
    also knows how to insert, update, and delete data.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们导入了我们编写的 Python 模块，其中包含我们连接到 MySQL 数据库所需的全部编码逻辑。它也知道如何插入、更新和删除数据。
- en: Now, we have connected our Python GUI to this SQL logic.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经将我们的 Python GUI 连接到这个 SQL 逻辑。
- en: Let's move on to the next recipe.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续下一个食谱。
- en: Using MySQL Workbench
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MySQL Workbench
- en: MySQL has a very nice GUI that we can download for free. It's called **MySQL
    Workbench**.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 提供了一个非常棒的免费 GUI，我们可以下载。它被称为**MySQL Workbench**。
- en: In this recipe, we will successfully install Workbench and then use it to run
    SQL queries against the GuiDB we created in the previous recipes.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将成功安装 Workbench，然后使用它来运行针对我们在之前的食谱中创建的 GuiDB 的 SQL 查询。
- en: Getting ready
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to use this recipe, you will need MySQL database we developed in the
    previous recipes. You will also need a running MySQL server.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用这个食谱，你需要我们在之前的食谱中开发的 MySQL 数据库。你还需要一个正在运行的 MySQL 服务器。
- en: How to do it…
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: We can download MySQL Workbench from the official MySQL website: [https://dev.mysql.com/downloads/workbench/](https://dev.mysql.com/downloads/workbench/).
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从官方 MySQL 网站下载 MySQL Workbench：[https://dev.mysql.com/downloads/workbench/](https://dev.mysql.com/downloads/workbench/).
- en: 'Let''s look at how we can perform this recipe:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们如何执行这个食谱：
- en: Download the MySQL Workbench installer.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 MySQL Workbench 安装程序。
- en: 'Click the Download button:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下载”按钮：
- en: '![](img/f2444dbf-254f-4edd-9a21-cc857d41ac3f.png)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f2444dbf-254f-4edd-9a21-cc857d41ac3f.png)'
- en: 'Run the installation:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装：
- en: '![](img/37eb643e-43c6-4508-9bc0-dca474c08265.png)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/37eb643e-43c6-4508-9bc0-dca474c08265.png)'
- en: 'Click Next > until the installation is complete:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步 >”直到安装完成：
- en: '![](img/917bc1d4-303f-46db-80c2-bd5e7d348a28.png)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/917bc1d4-303f-46db-80c2-bd5e7d348a28.png)'
- en: 'Open MySQL Workbench:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 MySQL Workbench：
- en: '![](img/694dd086-b49f-48b4-a201-41021583c02a.png)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/694dd086-b49f-48b4-a201-41021583c02a.png)'
- en: 'Select our `guidb`:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的 `guidb`：
- en: '![](img/d63470b9-0344-49b5-b3d7-aaaf7eeb4f32.png)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d63470b9-0344-49b5-b3d7-aaaf7eeb4f32.png)'
- en: 'Write and execute some SQL commands:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写并执行一些 SQL 命令：
- en: '![](img/d238e2d0-41f7-41d9-85f8-41ab0d700229.png)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d238e2d0-41f7-41d9-85f8-41ab0d700229.png)'
- en: Let's go behind the scenes to understand the code better.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解代码以更好地理解它。
- en: How it works…
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: When you installed MySQL, if you had the required components already installed
    on your PC, you may already have MySQL Workbench installed. If you do not have
    Workbench installed, *steps 1* to *3* show you how to install MySQL Workbench.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 当您安装 MySQL 时，如果您已经在您的 PC 上安装了所需的组件，您可能已经安装了 MySQL Workbench。如果您没有安装 Workbench，*步骤
    1* 到 *3* 将向您展示如何安装 MySQL Workbench。
- en: MySQL Workbench is a GUI in itself, very similar to the one we developed in
    the previous recipes. It does come with some additional features that are specific
    to working with MySQL. `8.0 CE` in the installer window is an abbreviation for
    version **8.0 Community Edition**.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL Workbench 本身就是一个图形用户界面，与我们在前面的菜谱中开发的非常相似。它确实包含了一些特定于与 MySQL 一起工作的附加功能。安装窗口中的
    `8.0 CE` 是版本 **8.0 社区版** 的缩写。
- en: When you start up MySQL Workbench, it will prompt you to connect. Use the **root**
    user and password you created for it. MySQL Workbench is smart enough to recognize
    that you're running a MySQL server and the port it is listening on.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动 MySQL Workbench 时，它将提示您连接。使用您为其创建的 **root** 用户和密码。MySQL Workbench 足够智能，能够识别您正在运行
    MySQL 服务器以及它监听的端口。
- en: Once you are successfully logged in to your MySQL server instance, you can select
    the `guidb` we created.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦成功登录到您的 MySQL 服务器实例，您可以选择我们创建的 `guidb`。
- en: We can find our `guidb` underneath the SCHEMAS label.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 **SCHEMAS** 标签下找到我们的 `guidb`。
- en: In some literature and products, databases are often called **SCHEMAS**. Schematics
    refer to the structure and layout of a database. Personally, coming from Microsoft
    SQL Server, I am used to referring to them simply as *databases*.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些文献和产品中，数据库通常被称为 **SCHEMAS**。图示指的是数据库的结构和布局。我个人来自 Microsoft SQL Server，习惯于简单地称它们为
    **数据库**。
- en: 'We can type SQL commands into the Query Editor and execute our commands by
    clicking the lightning bolt icon. It is the button toward the top right, as shown
    in the following screenshot:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在查询编辑器中输入 SQL 命令，并通过点击闪电图标来执行我们的命令。它位于右上角，如以下截图所示：
- en: '![](img/06581eae-e542-4c78-ad53-83cab2248d5e.png)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/06581eae-e542-4c78-ad53-83cab2248d5e.png)'
- en: We can see the results in the Result Grid. We can click on the different tabs
    to see the different results.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在结果网格中看到结果。我们可以点击不同的选项卡来查看不同的结果。
- en: Now, we can connect to our MySQL database via the MySQL Workbench GUI. We can
    execute the same SQL commands we issued before and get the same results that we
    did when we executed them in our Python GUI.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过 MySQL Workbench 图形用户界面连接到我们的 MySQL 数据库。我们可以执行之前发出的相同 SQL 命令，并获得与我们在
    Python 图形用户界面中执行它们时相同的结果。
- en: There's more…
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: With the knowledge we have gained throughout the recipes within this and the
    preceding chapters, we are now well positioned to create our own GUIs written
    in Python, all of which can connect and talk to MySQL databases.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在本章和前几章的菜谱中获得的全部知识，我们现在已经准备好创建自己的 Python 编写的 GUI，所有这些 GUI 都可以连接并与 MySQL 数据库进行通信。
