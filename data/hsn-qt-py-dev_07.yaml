- en: Using QWidget and Main Window
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用QWidget和主窗口
- en: From this chapter onward, the graphical elements of a GUI application will be
    explored. The methods relating to these visual objects and other functionality will
    be considered. When a developer starts to build the GUI, they need to fill this
    application with different graphical objects, including frames, labels, fields,
    buttons, and many more control elements. In this chapter, we will be covering
    the basic fields for graphical components or the places when they can be visualized.
    In Qt/C++, the `QtWidgets` class commonly provides this functionality and is available
    with the PyQt5 and PySide2 Python bindings.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章开始，我们将探讨GUI应用程序的图形元素。将考虑与这些视觉对象和其他功能相关的这些方法。当开发者开始构建GUI时，他们需要用不同的图形对象填充此应用程序，包括框架、标签、字段、按钮以及许多其他控制元素。在本章中，我们将介绍图形组件的基本字段或它们可以可视化的地方。在Qt/C++中，`QtWidgets`类通常提供此功能，并且通过PyQt5和PySide2
    Python绑定可用。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: '`QWidget`'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QWidget`'
- en: '`QMainWindow`'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QMainWindow`'
- en: QWidget
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`QWidget`'
- en: 'This class is the base class for all the user interface objects provided by
    the `QtWidgets` module. As was explained in the PySide2 documentation ([https://doc.qt.io/qtforpython/PySide2/QtWidgets/QWidget.html](https://doc.qt.io/qtforpython/PySide2/QtWidgets/QWidget.html)),
    this is the atom of the user interface. This class has the following inheritance
    scheme:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类是`QtWidgets`模块提供的所有用户界面对象的基类。正如PySide2文档（[https://doc.qt.io/qtforpython/PySide2/QtWidgets/QWidget.html](https://doc.qt.io/qtforpython/PySide2/QtWidgets/QWidget.html)）中解释的那样，这是用户界面的原子。此类具有以下继承方案：
- en: '![](img/12b460d7-bf1c-4dc9-b3a3-b7f68a40c835.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/12b460d7-bf1c-4dc9-b3a3-b7f68a40c835.png)'
- en: 'It also has a parent for almost all graphical elements, additional widgets,
    and so on. The declaration syntax is as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 它几乎也是几乎所有图形元素、附加小部件等的父元素。声明语法如下：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Functions of QWidget
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QWidget的功能
- en: '`QWidget` inherits `QObject` and `QPaintDevice` and improves functionality
    by means of the following functions.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`QWidget`继承自`QObject`和`QPaintDevice`，并通过以下函数增强了功能。'
- en: set
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions that are related to the setting of the parameters/properties
    in relation to the widget, including the setting of style, width, or functionality:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与小部件相关的设置参数/属性的功能，包括设置样式、宽度或功能：
- en: '`widget.setAcceptDrops(bool)`:If this is set to `True`, the widget will accept
    the drop event.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setAcceptDrops(bool)`: 如果设置为`True`，则小部件将接受拖放事件。'
- en: '`widget.setAccessibleDescription("description")`: This provides an accessible
    description for this widget.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setAccessibleDescription("description")`: 这为该小部件提供可访问的描述。'
- en: '`widget.setAccessibleName("Name")`: This provides an accessible name for this
    widget.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setAccessibleName("Name")`: 这为该小部件提供可访问的名称。'
- en: '`widget.setAttribute(QtCore.Qt.WidgetAttribute, bool)`: This sets the attribute
    on this widget if the second parameter is `True`; otherwise, it clears the attribute.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setAttribute(QtCore.Qt.WidgetAttribute, bool)`: 如果第二个参数为`True`，则在此小部件上设置属性；否则，清除属性。'
- en: '`widget.setAutoFillBackground(bool)`: If the parameter is `True`, the widget''s
    background will be filled automatically.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setAutoFillBackground(bool)`: 如果参数为`True`，则小部件的背景将自动填充。'
- en: '`widget.setBackgroundRole(QtGui.QPalette.ColorRole)`: This sets the background
    role of the widget to the parameter role of the `QtGui.QPalette.ColorRole` type.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setBackgroundRole(QtGui.QPalette.ColorRole)`: 这将设置小部件的背景角色为`QtGui.QPalette.ColorRole`类型的参数角色。'
- en: '`widget.setBaseSize(QtCore.QSize)`: This sets the widget''s base size to the
    parameter of the `QtCore.QSize` type.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setBaseSize(QtCore.QSize)`: 这将小部件的基本大小设置为`QtCore.QSize`类型的参数。'
- en: '`widget.setBaseSize(basew, baseh)`: This sets the widget''s base size to parameters
    where `basew` (base width) and `baseh` (base height) are integer values.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setBaseSize(basew, baseh)`: 这将小部件的基本大小设置为参数，其中`basew`（基本宽度）和`baseh`（基本高度）是整数值。'
- en: '`widget.setContentsMargins(QtCore.QMargins)`: This sets the margins of the
    `QtCore.QMargins` type around the widget''s contents.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setContentsMargins(QtCore.QMargins)`: 这将设置围绕小部件内容的`QtCore.QMargins`类型的边距。'
- en: '`widget.setContentsMargins(left, top, right, bottom)`: This sets the margins
    as integer values for each side around the widget''s contents.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setContentsMargins(left, top, right, bottom)`: 这将设置围绕小部件内容的边距为每一边的整数值。'
- en: '`widget.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy)`: This sets the context
    menu policy for this widget, which means how this widget displays a context menu.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy)`: 这将设置此小部件的上下文菜单策略，即此小部件如何显示上下文菜单。'
- en: '`widget.setCursor(QtGui.QCursor)`: This sets the current cursor of the `QtGui.QCursor`
    type—the widget''s cursor.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setCursor(QtGui.QCursor)`: 这将为 `QtGui.QCursor` 类型的当前光标设置小部件的光标。'
- en: '`widget.setDisabled(bool)`: If the parameter is `True`, this disables the widget
    input events; otherwise, the input events are enabled.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setDisabled(bool)`: 如果参数为 `True`，则禁用小部件输入事件；否则，输入事件被启用。'
- en: '`widget.setEnabled(bool)`: If the parameter is `True`, this enables widget
    input events that were disabled.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setEnabled(bool)`: 如果参数为 `True`，则启用已禁用的小部件输入事件。'
- en: '`widget.setFixedHeight(h)`: This sets a fixed height with the integer value
    `h` (height of the widget); the height of the widget will not change in the layout
    system.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setFixedHeight(h)`: 这将使用整数值 `h`（小部件的高度）设置固定高度；小部件的高度在布局系统中不会改变。'
- en: '`widget.setFixedWidth(w)`: This sets a fixed width with the integer value `w` (width
    of the widget); the width of the widget will not change in the layout system.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setFixedWidth(w)`: 这将使用整数值 `w`（小部件的宽度）设置固定宽度；小部件的宽度在布局系统中不会改变。'
- en: '`widget.setFixedSize(QtCore.QSize)`: This sets the widget''s fixed size of
    the `QtCore.QSize` type; the size of the widget will not change in the layout
    system.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setFixedSize(QtCore.QSize)`: 这将为小部件设置 `QtCore.QSize` 类型的固定大小；小部件的大小在布局系统中不会改变。'
- en: '`widget.setFixedSize(w, h)`: This sets the widget''s fixed size with integer
    values as `w` (width) and `h` (height); the size of the widget will not change
    in the layout system.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setFixedSize(w, h)`: 这将使用整数值 `w`（宽度）和 `h`（高度）设置小部件的固定大小；小部件的大小在布局系统中不会改变。'
- en: '`widget.setFocus()`: This sets the keyboard input focus to this widget if this
    widget, or one of its parents, is the active window.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setFocus()`: 如果此小部件或其父级之一是活动窗口，则将键盘输入焦点设置到此小部件。'
- en: '`widget.setFocus(QtCore.Qt.FocusReason)`: This sets the keyboard input focus
    to this widget if this widget, or one of its parents, is the active window. The
    reason for the `QtCore.Qt.FocusReason` type being used is to provide an explanation
    regarding what caused the widget to achieve focus.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setFocus(QtCore.Qt.FocusReason)`: 如果此小部件或其父级之一是活动窗口，则将键盘输入焦点设置到此小部件。使用
    `QtCore.Qt.FocusReason` 类型的原因是提供有关导致小部件获得焦点的解释。'
- en: '`widget.setFocusPolicy(QtCore.Qt.FocusPolicy)`: This sets the widget''s focus
    policy; that is, the way the widget accepts keyboard focus.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setFocusPolicy(QtCore.Qt.FocusPolicy)`: 这将为小部件设置焦点策略；即小部件接受键盘焦点的方式。'
- en: '`widget.setFocusProxy(QtWidgets.QWidget)`: This sets the widget''s focus proxy
    to the parameter of the `QtWidgets.QWidget` type.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setFocusProxy(QtWidgets.QWidget)`: 这将为小部件设置 `QtWidgets.QWidget` 类型的焦点代理。'
- en: '`widget.setFont(QtGui.QFont)`: This sets the widget''s font.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setFont(QtGui.QFont)`: 这将为小部件设置字体。'
- en: '`widget.setForegroundRole(QtGui.QPalette.ColorRole)`: This sets the foreground
    role of the widget to the role in the parameter.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setForegroundRole(QtGui.QPalette.ColorRole)`: 这将为小部件设置前景角色为参数中的角色。'
- en: '`widget.setGeometry(QtCore.QRect)`: This sets the widget''s geometry relative
    to its parent, excluding the window frame.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setGeometry(QtCore.QRect)`: 这将为小部件设置相对于其父级的位置，不包括窗口框架。'
- en: '`widget.setGeometry(x, y, w, h)`: This sets the widget''s geometry relative
    to its parent, excluding the window frame, with the parameters `x` (*x* axis),
    `y` (*y* axis), `w` (width), and `h` (height).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setGeometry(x, y, w, h)`: 这将为小部件设置相对于其父级的位置，不包括窗口框架，参数为 `x`（*x* 轴），`y`（*y*
    轴），`w`（宽度）和 `h`（高度）。'
- en: '`widget.setGraphicsEffect(QtWidgets.QGraphicsEffect)`: This sets the widget''s
    graphics effect.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setGraphicsEffect(QtWidgets.QGraphicsEffect)`: 这将为小部件设置图形效果。'
- en: '`widget.setHidden(bool)`: If this parameter is `True`, it sets the widget as
    hidden.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setHidden(bool)`: 如果此参数为 `True`，则将小部件设置为隐藏。'
- en: '`widget.setInputMethodHints(QtCore.Qt.InputMethodHints)`: This sets the input
    method hints that the widget will have.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setInputMethodHints(QtCore.Qt.InputMethodHints)`: 这将设置小部件将拥有的输入法提示。'
- en: '`widget.setLayout(QtWidgets.QLayout)`: This sets the layout manager for this
    widget. The widget can only have one layout manager. If setting a new one, the
    previous version needs to be deleted.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setLayout(QtWidgets.QLayout)`: 这将为该小部件设置布局管理器。小部件只能有一个布局管理器。如果设置新的，则需要删除之前的版本。'
- en: '`widget.setLayoutDirection(QtCore.Qt.LayoutDirection)`: This sets the layout
    direction for this widget.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setLayoutDirection(QtCore.Qt.LayoutDirection)`: 这将为该小部件设置布局方向。'
- en: '`widget.setLocale(QtCore.QLocale)`: This sets the locale for this widget.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setLocale(QtCore.QLocale)`: 这将为该小部件设置区域设置。'
- en: '`widget.setMask(QtGui.QBitmap)`: This only sets the pixels of the widget, for
    which a bitmap parameter has a corresponding 1 bit, to be visible.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setMask(QtGui.QBitmap)`: 这仅设置小部件的像素，对于具有位图参数的位图，相应的位为 1，设置为可见。'
- en: '`widget.setMask(QtGui.QRegion)`: This only sets the parts of the widget that
    overlap the region parameter to be visible.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setMask(QtGui.QRegion)`: 这仅设置与区域参数重叠的小部件部分为可见。'
- en: '`widget.setMaximumHeight(maxh)`: This sets the maximum height of the widget
    with the integer value, `maxh` (the maximum height).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setMaximumHeight(maxh)`: 这使用整数值 `maxh`（最大高度）为此小部件设置最大高度。'
- en: '`widget.setMaximumWidth(maxw)`: This sets the maximum width of the widget with
    the integer value**,** `maxw` (the maximum width).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setMaximumWidth(maxw)`: 这使用整数值 `maxw`（最大宽度）为此小部件设置最大宽度。'
- en: '`widget.setMaximumSize(QtCore.QSize)`: This sets the widget''s maximum size
    to the parameter of the `QtCore.QSize` type.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setMaximumSize(QtCore.QSize)`: 这将小部件的最大尺寸设置为 `QtCore.QSize` 类型的参数。'
- en: '`widget.setMaximumSize(maxw, maxh)`: This sets the widget''s maximum size,
    with integer values as `maxw`, the maximum width, and `maxh`—the maximum height—parameters.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setMaximumSize(maxw, maxh)`: 这使用整数值作为 `maxw`，即最大宽度，和 `maxh`——最大高度——参数设置小部件的最大尺寸。'
- en: '`widget.setMinimumHeight(minh)`: This sets the minimum height of the widget
    with an integer value of `minh`, the minimum height.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setMinimumHeight(minh)`: 这使用整数值 `minh` 设置小部件的最小高度，即最小高度。'
- en: '`widget.setMinimumWidth(minw)`: This sets the minimum width of the widget with
    an integer value of `minw`, the minimum width.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setMinimumWidth(minw)`: 这使用整数值 `minw`（最小宽度）为此小部件设置最小宽度。'
- en: '`widget.setMinimumSize(QtCore.QSize)`: This sets the widget''s minimum size
    to the parameter of the `QtCore.QSize` type.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setMinimumSize(QtCore.QSize)`: 这将小部件的最小尺寸设置为 `QtCore.QSize` 类型的参数。'
- en: '`widget.setMinimumSize(minw, minh)`: This sets the widget''s minimum size with
    integer values as `minw`, the minimum width, and `minh`—the minimum height—parameters.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setMinimumSize(minw, minh)`: 这使用整数值作为 `minw`，即最小宽度，和 `minh`——最小高度——参数设置小部件的最小尺寸。'
- en: '`widget.setMouseTracking(bool)`: If this parameter is `True`, it sets the mouse
    tracking that''s available for this widget.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setMouseTracking(bool)`: 如果此参数为 `True`，则为此小部件设置可用的鼠标跟踪。'
- en: '`widget.setPalette(QtGui.QPalette)`: This sets the widget''s palette that is
    used by the widget''s style when rendering standard components.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setPalette(QtGui.QPalette)`: 这为此小部件设置在渲染标准组件时使用的调色板。'
- en: '`widget.setParent(QtWidgets.QWidget)`: This sets the parent from the parameter
    of the `QtWidgets.QWidget` type for this widget.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setParent(QtWidgets.QWidget)`: 这将为此小部件设置 `QtWidgets.QWidget` 类型的参数作为父级。'
- en: '`widget.setParent(QtWidgets.QWidget, QtCore.Qt.WindowFlags)`: This sets the
    parent from the first parameter of the `QtWidgets.QWidget` type for this widget,
    with flags as the second parameter.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setParent(QtWidgets.QWidget, QtCore.Qt.WindowFlags)`: 这为此小部件设置父级，使用
    `QtWidgets.QWidget` 类型的第一个参数，并使用标志作为第二个参数。'
- en: '`widget.setShortcutAutoRepeat(id, bool)`: If the second parameter is `True`,
    the auto-repeat of the shortcut with the given `id` is enabled; otherwise, it
    is disabled.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setShortcutAutoRepeat(id, bool)`: 如果第二个参数为 `True`，则启用具有给定 `id` 的快捷键的自动重复；否则，将其禁用。'
- en: '`widget.setShortcutEnabled(id, bool)`: If the second parameter is `True`, the
    shortcut with the given `id` is enabled; otherwise, it is disabled.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setShortcutEnabled(id, bool)`: 如果第二个参数为 `True`，则启用具有给定 `id` 的快捷键；否则，将其禁用。'
- en: '`widget.setSizeIncrement(QtCore.QSize)`: This sets the size increment of the
    `QtCore.QSize` type for this widget, or the steps by means of which the size will
    change when the user resizes the window.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setSizeIncrement(QtCore.QSize)`: 这为此小部件设置 `QtCore.QSize` 类型的尺寸增量，或用户调整窗口大小时尺寸变化的步长。'
- en: '`widget.setSizeIncrement(w, h)`: This sets the size increment with `w`, the width,
    and `h`, the height, parameters for this widget, or the steps by means of which
    the size will change when the user resizes the window.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setSizeIncrement(w, h)`: 这使用 `w`，即宽度，和 `h`，即高度，参数为此小部件设置尺寸增量，或用户调整窗口大小时尺寸变化的步长。'
- en: '`widget.setSizePolicy(QtWidgets.QSizePolicy)`: This sets the size policy of
    the `QtWidgets.QSizePolicy` type for this widget.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setSizePolicy(QtWidgets.QSizePolicy)`: 这为此小部件设置 `QtWidgets.QSizePolicy`
    类型的尺寸策略。'
- en: '`widget.setSizePolicy(horizontal, vertical)`: This sets the size policy with
    `horizontal`, of the `QtWidgets.QSizePolicy.Policy` type, and `vertical`, of the `QtWidgets.QSizePolicy.Policy`
    type, for this widget.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setSizePolicy(horizontal, vertical)`: 这将为该小部件设置 `horizontal`，为 `QtWidgets.QSizePolicy.Policy`
    类型的 `vertical`，以及 `QtWidgets.QSizePolicy.Policy` 类型的 `vertical`。'
- en: '`widget.setStatusTip("Status tip")`: This sets the widget''s status tip.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setStatusTip("Status tip")`: 这将为小部件设置状态提示。'
- en: '`widget.setStyle(QtWidgets.QStyle)`: This sets the widget''s GUI style of the
    `QtWidgets.QStyle` type as styling.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setStyle(QtWidgets.QStyle)`: 这将为小部件的 GUI 风格设置 `QtWidgets.QStyle` 类型的样式。'
- en: '`widget.setStyleSheet("{property: value;}")`: This sets the widget''s style
    sheet, which contains a textual description of customizations to the widget''s
    style.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setStyleSheet("{property: value;}")`: 这将为小部件设置样式表，其中包含对小部件样式的自定义描述。'
- en: '`widget.setTabletTracking(bool)`: If this parameter is `True`, tablet tracking
    will be enabled, or the widget will receive tablet move events even while hovering
    in proximity; otherwise, it is `False`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setTabletTracking(bool)`: 如果此参数为 `True`，则启用平板电脑跟踪，或者即使在小部件附近悬停时，小部件也会接收平板电脑移动事件；否则，它为
    `False`。'
- en: '`widget.setTabOrder(QtWidgets.QWidget, QtWidgets.QWidget)`: This incorporates
    the widget of the second parameter after the widget of the first parameter in
    the focus order.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setTabOrder(QtWidgets.QWidget, QtWidgets.QWidget)`: 这将在第一个参数的小部件之后将第二个参数的小部件纳入焦点顺序。'
- en: '`widget.setToolTip("Tool tip")`: This sets the tooltip for this widget.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setToolTip("Tool tip")`: 这将为该小部件设置工具提示。'
- en: '`widget.setToolTipDuration(msec)`: This sets the duration for the tooltip—the
    time in `msec` (milliseconds) as an integer value when the tooltip will be visible.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setToolTipDuration(msec)`: 这将为工具提示设置持续时间——当工具提示可见时的时间以 `msec`（毫秒）的整数值表示。'
- en: '`widget.setUpdatesEnabled(bool)`: If this parameter is `True`, the widget''s
    updates are enabled, the widget receives paint events, and has a system background.
    By default, updates are enabled.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setUpdatesEnabled(bool)`: 如果此参数为 `True`，则启用小部件的更新，小部件接收绘图事件，并具有系统背景。默认情况下，更新是启用的。'
- en: '`widget.setVisible(bool)`: If this parameter is `True`, the widget will be
    visible if it was previously invisible; otherwise, the widget will be invisible.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setVisible(bool)`: 如果此参数为 `True`，则小部件将可见，如果它之前是不可见的；否则，小部件将不可见。'
- en: '`widget.setWhatsThis("What''s this")`: This sets the widget''s *what''s this*
    help text.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setWhatsThis("What''s this")`: 这将为小部件设置 *这是什么* 帮助文本。'
- en: '`widget.setWindowFilePath("File/path/to/the/widget")`: This sets the file path
    associated with this widget.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setWindowFilePath("File/path/to/the/widget")`: 这将为该小部件设置关联的文件路径。'
- en: '`widget.setWindowFlag(QtCore.Qt.WindowType, bool)`: This sets the window flag
    of the `QtCore.Qt.WindowType` type on this widget if the second parameter is `True`;
    otherwise, it clears the flag.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setWindowFlag(QtCore.Qt.WindowType, bool)`: 如果第二个参数为 `True`，则在此小部件上设置
    `QtCore.Qt.WindowType` 类型的窗口标志；否则，清除标志。'
- en: '`widget.setWindowFlags(QtCore.Qt.WindowFlags)`: This sets the window flags
    on this widget.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setWindowFlags(QtCore.Qt.WindowFlags)`: 这将为小部件设置窗口标志。'
- en: '`widget.setWindowIcon(QtGui.QIcon)`: This sets the icon for the window of this
    widget.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setWindowIcon(QtGui.QIcon)`: 这将为该小部件的窗口设置图标。'
- en: '`widget.setWindowIconText("Icon text")`: This sets the icon''s text for the
    window of this widget.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setWindowIconText("Icon text")`: 这将为该小部件窗口的图标设置文本。'
- en: '`widget.setWindowModality(QtCore.Qt.WindowModality)`: This sets the behavior
    of a modal window, or which windows are blocked by the modal widget.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setWindowModality(QtCore.Qt.WindowModality)`: 这将设置模态窗口的行为，或者哪些窗口被模态小部件阻塞。'
- en: '`widget.setWindowModified(bool)`: If this parameter is `True`, it sets the
    window as modified.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setWindowModified(bool)`: 如果此参数为 `True`，则将窗口设置为已修改。'
- en: '`widget.setWindowOpacity(float)`: This sets opacity in relation to the widget''s
    window, where `0.0` is a completely transparent window, and `1.0` is a completely
    opaque window.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setWindowOpacity(float)`: 这将设置与窗口相关的不透明度，其中 `0.0` 是完全透明的窗口，而 `1.0`
    是完全不透明的窗口。'
- en: '`widget.setWindowRole(unicode)`: This sets Unicode string as the window''s
    role to role; this only makes sense for Windows running on X11.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setWindowRole(unicode)`: 这将为窗口设置 Unicode 字符串作为角色；这对于在 X11 上运行的 Windows
    有意义。'
- en: '`widget.setWindowState(QtCore.Qt.WindowStates)`: This sets the window state,
    such as `QtCore.Qt.WindowMinimized`, `QtCore.Qt.WindowMaximized`, `QtCore.Qt.WindowFullScreen`,
    or `QtCore.Qt.WindowActive`.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setWindowState(QtCore.Qt.WindowStates)`: 这将设置窗口状态，例如 `QtCore.Qt.WindowMinimized`、`QtCore.Qt.WindowMaximized`、`QtCore.Qt.WindowFullScreen`
    或 `QtCore.Qt.WindowActive`。'
- en: '`widget.setWindowTitle("Window Title")`: This sets the title for the widget''s
    window.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.setWindowTitle("Window Title")`: 这为小部件的窗口设置标题。'
- en: is/has
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is/has
- en: 'These are functions that return a Boolean value (`bool`) related to the widget
    states, for example, to check the current state:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回与小部件状态相关的布尔值（`bool`）的函数，例如，检查当前状态：
- en: '`widget.isActiveWindow()`: This returns `True` if the widget''s window is the
    active window.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isActiveWindow()`: 这返回`True`，如果小部件的窗口是活动窗口。'
- en: '`widget.isAncestorOf(QtWidgets.QWidget)`: This returns `True` if the widget
    is a parent for the child parameter.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isAncestorOf(QtWidgets.QWidget)`: 这返回`True`，如果小部件是子参数的父级。'
- en: '`widget.isEnabled()`: This returns `True` if the widget is enabled.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isEnabled()`: 这返回`True`，如果小部件被启用。'
- en: '`widget.isEnabledTo(QtWidgets.QWidget)`: This returns `True` if this widget
    would become enabled, if the parameter of the parent widget within the same window
    were to be enabled.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isEnabledTo(QtWidgets.QWidget)`: 这返回`True`，如果此小部件将变为启用状态，如果同一窗口内父小部件的参数被启用。'
- en: '`widget.isFullScreen()`: This returns `True` if the widget is shown in `fullscreen`
    mode; otherwise, it returns `False`.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isFullScreen()`: 这返回`True`，如果小部件以全屏模式显示；否则，返回`False`。'
- en: '`widget.isHidden()`: This returns `True` if the widget is hidden; otherwise,
    it returns` `False`.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isHidden()`: 这返回`True`，如果小部件被隐藏；否则，返回`False`。'
- en: '`widget.isLeftToRight()`: This returns `True` if the widget has a left-to-right
    direction.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isLeftToRight()`: 这返回`True`，如果小部件具有从左到右的方向。'
- en: '`widget.isMaximized()`: This returns `True` if the widget''s window is maximized.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isMaximized()`: 这返回`True`，如果小部件的窗口已最大化。'
- en: '`widget.isMinimized()`: This returns `True` if the widget''s window is minimized.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isMinimized()`: 这返回`True`，如果小部件的窗口已最小化。'
- en: '`widget.isModal()`: This returns `True` if the widget''s window is a modal
    widget.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isModal()`: 这返回`True`，如果小部件的窗口是模态小部件。'
- en: '`widget.isRightToLeft()`: This returns `True` if the widget has a right-to-left
    direction.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isRightToLeft()`: 这返回`True`，如果小部件具有从右到左的方向。'
- en: '`widget.isTopLevel()`: This returns `True` if the widget is a top-level window.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isTopLevel()`: 这返回`True`，如果小部件是顶级窗口。'
- en: '`widget.isVisible()`: This returns `True` if the widget is visible.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isVisible()`: 这返回`True`，如果小部件是可见的。'
- en: '`widget.isVisibleTo(QtWidgets.QWidget)`: This returns `True` if the widget
    would become visible, if the parameter of the parent widget within the same window
    were to be shown.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isVisibleTo(QtWidgets.QWidget)`: 这返回`True`，如果小部件将变为可见的，如果同一窗口内父小部件的参数将被显示。'
- en: '`widget.isWindow()`: This returns `True` if the widget is the independent window;
    otherwise, it returns `False`.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isWindow()`: 这返回`True`，如果小部件是独立窗口；否则，返回`False`。'
- en: '`widget.isWindowModified()`: This returns `True` if the window content has
    unsaved changes.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.isWindowModified()`: 这返回`True`，如果窗口内容有未保存的更改。'
- en: '`widget.hasFocus()`: This returns `True` or `False` depending on whether the
    widget keyboard has input focus or not.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.hasFocus()`: 这根据小部件键盘是否有输入焦点返回`True`或`False`。'
- en: '`widget.hasHeightForWidth()`: If the widget''s preferred height depends on
    its width, it will return `True`; otherwise, it returns `False`.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.hasHeightForWidth()`: 如果小部件的首选高度取决于其宽度，它将返回`True`；否则，返回`False`。'
- en: '`widget.hasMouseTracking()`: This returns `True` if mouse tracking is enabled
    for the widget; otherwise, it returns `False`.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.hasMouseTracking()`: 这返回`True`，如果为小部件启用了鼠标跟踪；否则，返回`False`。'
- en: '`widget.hasTabletTracking()`: This returns `True` if tablet tracking is enabled
    or the widget receives tablet move events, even while hovering in the proximity;
    otherwise, it returns `False`.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.hasTabletTracking()`: 这返回`True`，如果启用了平板电脑跟踪或小部件接收平板电脑移动事件，即使悬停在附近；否则，返回`False`。'
- en: window
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: window
- en: 'These are functions that make changes to the current widget visualization,
    such as closing and hiding:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是更改当前小部件可视化的函数，例如关闭和隐藏：
- en: '`widget.close()`: This closes the widget and returns `True`.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.close()`: 这将关闭小部件并返回`True`。'
- en: '`widget.hide()`: This hides the widget.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.hide()`: 这隐藏小部件。'
- en: '`widget.show()`: This shows the widget and its child.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.show()`: 这显示小部件及其子小部件。'
- en: '`widget.showFullScreen()`: This shows the widget in full-screen mode.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.showFullScreen()`: 这以全屏模式显示小部件。'
- en: '`widget.showMaximized()`: This shows the widget in maximized mode.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.showMaximized()`: 这以最大化模式显示小部件。'
- en: '`widget.showMinimized()`: This shows the widget in minimized mode.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.showMinimized()`: 这以最小化模式显示小部件。'
- en: '`widget.showNormal()`: This shows the widget in normal mode.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.showNormal()`: 这以正常模式显示小部件。'
- en: '`widget.move(QtCore.QPoint)`: This moves the widget to the position of the
    `QtCore.QPoint` type.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.move(QtCore.QPoint)`: 这会将小部件移动到 `QtCore.QPoint` 类型的位置。'
- en: '`widget.move(x, y)`: This moves the widget to the position of the `x` (*X*
    axis) or `y` (*Y* axis) parameters.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.move(x, y)`: 这会将小部件移动到 `x` (*X* 轴) 或 `y` (*Y* 轴) 参数的位置。'
- en: '`widget.resize(QtCore.QSize)`: This resizes the widget with the parameter of
    the `QtCore.QSize` type.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.resize(QtCore.QSize)`: 这会使用 `QtCore.QSize` 类型的参数调整小部件的大小。'
- en: '`widget.resize(w, h)`: This resizes the widget with `w` (width) and `h` (height)
    parameters as integer values.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.resize(w, h)`: 这会使用 `w`（宽度）和 `h`（高度）参数作为整数值调整小部件的大小。'
- en: '`widget.scroll(dx, dy)`: This scrolls the widget, including its children, by
    `dx` pixels to the right, and `dy` pixels downward. `dx` and `dy` may be negative.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.scroll(dx, dy)`: 这会滚动小部件及其子部件，向右移动 `dx` 像素，向下移动 `dy` 像素。`dx` 和 `dy`
    可以为负值。'
- en: '`widget.scroll(dx, dy, QtCore.QRect)`: This scrolls the rectangle of the widget,
    excluding its children, by `dx` pixels to the right, and `dy` pixels downward. `dx`
    and `dy` may be negative.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.scroll(dx, dy, QtCore.QRect)`: 这会滚动小部件的矩形，不包括其子部件，向右移动 `dx` 像素，向下移动
    `dy` 像素。`dx` 和 `dy` 可以为负值。'
- en: functional
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that are related to returns of the current values of the
    widget, changes in functionality, and so on:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与小部件当前值返回、功能变化等相关函数：
- en: '`widget.acceptDrops()`: This returns `True` or `False`; `True` if the widget
    accepts the drop event.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.acceptDrops()`: 这返回 `True` 或 `False`；如果为 `True`，则小部件接受拖放事件。'
- en: '`widget.accessibleDescription()`: This returns a Unicode string—the widget''s
    description.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.accessibleDescription()`: 这返回一个 Unicode 字符串——小部件的描述。'
- en: '`widget.accessibleName()`: This returns a Unicode string—the widget''s name.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.accessibleName()`: 这返回一个 Unicode 字符串——小部件的名称。'
- en: '`widget.actions()`: This returns a list with actions as the `QtCore.QList`
    type of the `QtWidgets.QAction` types—the widget''s actions.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.actions()`: 这返回一个列表，其中包含作为 `QtWidgets.QAction` 类型的 `QtCore.QList` 类型的操作——小部件的操作。'
- en: '`widget.activateWindow()`: This sets the top-level widget containing this widget
    as the active window.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.activateWindow()`: 这会将包含此小部件的最顶层小部件设置为活动窗口。'
- en: '`widget.addAction(QtWidgets.QAction)`: This adds action to the widget''s list
    of actions.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.addAction(QtWidgets.QAction)`: 这会将操作添加到小部件的操作列表中。'
- en: '`widget.addActions([QtWidgets.QAction])`: This adds actions to the widget''s
    list of actions.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.addActions([QtWidgets.QAction])`: 这会将操作添加到小部件的操作列表中。'
- en: '`widget.adjustSize()`: This adjusts the size of the widget to fit its contents.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.adjustSize()`: 这会调整小部件的大小以适应其内容。'
- en: '`widget.autoFillBackground()`: This returns `True` or `False`; if `True`, the
    background is filled automatically.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.autoFillBackground()`: 这返回 `True` 或 `False`；如果为 `True`，则背景会自动填充。'
- en: '`widget.backgroundRole()`: This returns the color role of the `QtGui.QPalette.ColorRole`
    type—the widget''s background role.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.backgroundRole()`: 这返回 `QtGui.QPalette.ColorRole` 类型的颜色角色——小部件的背景角色。'
- en: '`widget.baseSize()`: This returns the base size of the `QtCore.QSize` type—the
    widget''s base size.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.baseSize()`: 这返回 `QtCore.QSize` 类型的基本大小——小部件的基本大小。'
- en: '`widget.childAt(QtCore.QPoint)`: This returns the widget child at the point
    position.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.childAt(QtCore.QPoint)`: 这返回小部件在点位置上的子小部件。'
- en: '`widget.childAt(x, y)`: This returns the widget''s child at the position by
    `x` (*X* axis) or `y` (*Y* axis) in the coordinate system of the widget.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.childAt(x, y)`: 这返回小部件在坐标系中由 `x` (*X* 轴) 或 `y` 轴的位置的子小部件。'
- en: '`widget.childrenRect()`: This returns a rectangle of the `QtCore.QRect` type—the
    widget''s children bounding rectangle.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.childrenRect()`: 这返回一个 `QtCore.QRect` 类型的矩形——小部件子部件的边界矩形。'
- en: '`widget.childrenRegion()`: This returns a region of the `QtGui.QRegion` type—the
    combined region occupied by the widget''s children.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.childrenRegion()`: 这返回一个 `QtGui.QRegion` 类型的区域——小部件子部件占用的合并区域。'
- en: '`widget.clearFocus()`: This takes the widget''s keyboard input focus.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.clearFocus()`: 这会移除小部件的键盘输入焦点。'
- en: '`widget.clearMask()`: This removes the mask set by `QtWidgets.QWidget.setMask()`.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.clearMask()`: 这会移除由 `QtWidgets.QWidget.setMask()` 设置的掩码。'
- en: '`widget.contentsMargins()`: This returns margins of the `QtCore.QMargins` type—the
    widget''s contents margins.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.contentsMargins()`: 这返回 `QtCore.QMargins` 类型的边距——小部件的内容边距。'
- en: '`widget.contentsRect()`: This returns an area of the `QtCore.QRect` type—an
    area inside the widget''s margins.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.contentsRect()`: 这返回一个 `QtCore.QRect` 类型的区域——小部件边距内的区域。'
- en: '`widget.contextMenuPolicy()`: This returns the context menu policy of the `QtCore.Qt.ContextMenuPolicy`
    type; in other words, how the widget shows a context menu.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.contextMenuPolicy()`: 这返回`QtCore.Qt.ContextMenuPolicy`类型的小部件上下文菜单策略；换句话说，小部件如何显示上下文菜单。'
- en: '`widget.create(0, True, True)`: This creates a new window with the first parameter,
    window (type `QtGui.WId`), the second parameter, `initializeWindow` (type `QtCore.bool`),
    and the third parameter, `destroyOldWindow` (type `QtCore.bool`).'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.create(0, True, True)`: 这使用第一个参数窗口（类型`QtGui.WId`），第二个参数`initializeWindow`（类型`QtCore.bool`）和第三个参数`destroyOldWindow`（类型`QtCore.bool`）创建一个新窗口。'
- en: '`widget.create(0, True, True)`: This creates a new window with the first parameter,
    window (type `sip.voidptr`), the second parameter, `initializeWindow` (type `bool`),
    and the third parameter, `destroyOldWindow` (type `bool`).'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.create(0, True, True)`: 这使用第一个参数窗口（类型`sip.voidptr`），第二个参数`initializeWindow`（类型`bool`）和第三个参数`destroyOldWindow`（类型`bool`）创建一个新窗口。'
- en: '`widget.createWinId()`: This is the window system identifier, which means that
    it is known to the windowing system.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.createWinId()`: 这是窗口系统标识符，这意味着它为窗口系统所知。'
- en: '`widget.createWindowContainer(QtGui.QWindow, None, QtCore.Qt.WindowFlags)`:
    This creates the window container with the first parameter, window (type `QtGui.QWindow`),
    the second, parent (type `QtWidgets.QWidget`), and the third, flags (type `QtCore.Qt.WindowFlags`).'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.createWindowContainer(QtGui.QWindow, None, QtCore.Qt.WindowFlags)`:
    这使用第一个参数窗口（类型`QtGui.QWindow`），第二个参数父元素（类型`QtWidgets.QWidget`）和第三个参数标志（类型`QtCore.Qt.WindowFlags`）创建窗口容器。'
- en: '`widget.cursor()`: This returns the current cursor of the `QtGui.QCursor` type—the
    widget''s cursor.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.cursor()`: 这返回当前`QtGui.QCursor`类型的光标，即小部件的光标。'
- en: '`widget.destroy(True, True)`: This frees up window system resources and destroys
    the widget window with the first parameter, `destroyWindow`, and the second, `destroySubWindows`.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.destroy(True, True)`: 这将释放窗口系统资源，并使用第一个参数`destroyWindow`和第二个参数`destroySubWindows`销毁小部件窗口。'
- en: '`widget.effectiveWinId()`: This returns the identifier of the `QtGui.WId` type
    or `sip.voidptr` for PyQt5—the widget''s effective window system identifier.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.effectiveWinId()`: 这返回`QtGui.WId`类型的标识符或PyQt5的`sip.voidptr`——小部件的有效窗口系统标识符。'
- en: '`widget.ensurePolished()`: The widget and its children have been polished;
    they will have a proper font and palette.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.ensurePolished()`: 小部件及其子小部件已被抛光；它们将具有适当的字体和调色板。'
- en: '`widget.find(QtGui.WId)`: This returns the pointer to the widget of the `QtWidgets.QWidget`
    type with a window ID.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.find(QtGui.WId)`: 这返回指向具有窗口ID的`QtWidgets.QWidget`类型小部件的指针。'
- en: '`widget.focusNextChild()`: This returns `True` if it can find a new widget
    that gives the keyboard focus.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.focusNextChild()`: 如果它能找到一个新的小部件来提供键盘焦点，则返回`True`。'
- en: '`widget.focusNextPrevChild(bool)`: This returns `True` if it can find a new
    widget that gives the keyboard focus. If the parameter is `True`, it searches
    forward; if `False`, it searches backward.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.focusNextPrevChild(bool)`: 如果它能找到一个新的小部件来提供键盘焦点，则返回`True`。如果参数为`True`，则向前搜索；如果为`False`，则向后搜索。'
- en: '`widget.focusPolicy()`: This returns the widget''s focus policy of the `QtCore.Qt.FocusPolicy`
    type, the way the widget accepts keyboard focus.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.focusPolicy()`: 这返回小部件的`QtCore.Qt.FocusPolicy`类型焦点策略，即小部件接受键盘焦点的方式。'
- en: '`widget.focusPreviousChild()`: This returns `True` if it can find a new widget
    that gives the keyboard focus.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.focusPreviousChild()`: 如果它能找到一个新的小部件来提供键盘焦点，则返回`True`。'
- en: '`widget.focusProxy()`: This returns the focus proxy, or `0` if the focus proxy
    does not exist.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.focusProxy()`: 这返回焦点代理，如果焦点代理不存在，则返回`0`。'
- en: '`widget.focusWidget()`: This returns the widget''s last child of the `QtWidgets.QWidget`
    type that had been called on with the `widget.setFocus()` function.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.focusWidget()`: 这返回了使用`widget.setFocus()`函数调用的`QtWidgets.QWidget`类型的最后一个子小部件。'
- en: '`widget.font()`: This returns the font of the `QtGui.QFont` type that is currently
    set in relation to the widget.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.font()`: 这返回当前设置在相关小部件中的`QtGui.QFont`类型的字体。'
- en: '`widget.fontInfo()`: This returns the font information of the `QtGui.QFontInfo`
    type for the widget''s current font.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.fontInfo()`: 这返回小部件当前字体类型的`QtGui.QFontInfo`字体信息。'
- en: '`widget.fontMetrics()`: This returns the font metrics of the `QtGui.QFontMetrics`
    type for the widget''s current font.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.fontMetrics()`: 这返回小部件当前字体类型的`QtGui.QFontMetrics`字体度量。'
- en: '`widget.foregroundRole()`: This returns the foreground role of the `QtGui.QPalette.ColorRole`
    type—the widget''s foreground role.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.foregroundRole()`: 这返回小部件的前景角色，类型为`QtGui.QPalette.ColorRole`——小部件的前景角色。'
- en: '`widget.frameGeometry()`: This returns the geometry of the `QtCore.QRect` type—the
    widget''s geometry relative to its parent, including the window frame.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.frameGeometry()`: 这返回了 `QtCore.QRect` 类型的几何形状——小部件相对于其父级的几何形状，包括窗口框架。'
- en: '`widget.frameSize()`: This returns the size of the `QtCore.QSize` type—the
    widget''s size, including the window frame.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.frameSize()`: 这返回 `QtCore.QSize` 类型的尺寸——小部件的尺寸，包括窗口框架。'
- en: '`widget.geometry()`: This returns the geometry of the `QtCore.QRect` type—the
    widget''s geometry relative to its parent, excluding the window frame.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.geometry()`: 这返回 `QtCore.QRect` 类型的几何形状——小部件相对于其父级的几何形状，不包括窗口框架。'
- en: '`widget.getContentsMargins()`: This returns four integer values for the widget''s
    content margins for the left, top, right, and bottom sides.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.getContentsMargins()`: 这返回四个整数值，用于小部件的内容边距的左侧、顶部、右侧和底部。'
- en: '`widget.grab(QtCore.QRect(QtCore.QPoint(0,0), QtCore.QSize(-1,-1)))`: This
    renders the widget into a pixmap of the `QtGui.QPixmap` type, restricted by the
    rectangle parameter.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.grab(QtCore.QRect(QtCore.QPoint(0,0), QtCore.QSize(-1,-1)))`: 这将小部件渲染为
    `QtGui.QPixmap` 类型的位图，受矩形参数限制。'
- en: '`widget.grabGesture(QtCore.Qt.GestureType, QtCore.Qt.GestureFlags)`: This subscribes
    the widget to a gesture of the first parameter with flags (the second parameter).'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.grabGesture(QtCore.Qt.GestureType, QtCore.Qt.GestureFlags)`: 这将小部件订阅到具有标志（第二个参数）的第一个参数的手势。'
- en: '`widget.grabKeyboard()`: This grabs the keyboard input. The widget will receive
    all the keyboard events.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.grabKeyboard()`: 这捕获键盘输入。小部件将接收所有键盘事件。'
- en: '`widget.grabMouse()`: This grabs the mouse input. The widget will receive all
    the mouse events.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.grabMouse()`: 这捕获鼠标输入。小部件将接收所有鼠标事件。'
- en: '`widget.grabMouse(QtGui.QCursor)`: This grabs the mouse input and changes the
    cursor shape. The widget will receive all the mouse events.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.grabMouse(QtGui.QCursor)`: 这捕获鼠标输入并更改光标形状。小部件将接收所有鼠标事件。'
- en: '`widget.grabShortcut(QtGui.QKeySequence, QtCore.Qt.ShortcutContext)`: This adds
    a shortcut to Qt''s shortcut system that watches for the given key sequence (the
    first parameter) in the given context (the second parameter).'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.grabShortcut(QtGui.QKeySequence, QtCore.Qt.ShortcutContext)`: 这向 Qt
    的快捷键系统添加了一个快捷键，该快捷键在给定上下文（第二个参数）中监视给定的键序列（第一个参数）。'
- en: '`widget.graphicsEffect()`: This returns a pointer of the `QtWidgets.QGraphicsEffect`
    type—the widget''s graphics effect.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.graphicsEffect()`: 这返回 `QtWidgets.QGraphicsEffect` 类型的指针——小部件的图形效果。'
- en: '`widget.graphicsProxyWidget()`: This returns the proxy widget of the `QtWidgets.QGraphicsProxyWidget`
    type for the corresponding embedded widget in the graphics view.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.graphicsProxyWidget()`: 这返回对应于图形视图中嵌入小部件的 `QtWidgets.QGraphicsProxyWidget`
    类型代理小部件。'
- en: '`widget.height()`: This returns the height of the widget, excluding the window
    frame.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.height()`: 这返回小部件的高度，不包括窗口框架。'
- en: '`widget.heightForWidth(width)`: This returns the preferred height for this
    widget, given the `width`.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.heightForWidth(width)`: 这在给定 `width` 的情况下返回此小部件的首选高度。'
- en: '`widget.inputMethodHints()`: This returns input method hints of the `QtCore.Qt.InputMethodHints`
    type that the widget has.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.inputMethodHints()`: 这返回了小部件的 `QtCore.Qt.InputMethodHints` 类型的输入方法提示。'
- en: '`widget.inputMethodQuery(QtCore.Qt.InputMethodQuery)`: In regards to the input,
    widgets are used to query a set of properties of the widget to be able to support
    complex input method operations, in order to support surrounding text and reconversions.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.inputMethodQuery(QtCore.Qt.InputMethodQuery)`: 关于输入，小部件用于查询要支持复杂输入方法操作的小部件的属性集，以便支持周围文本和重新转换。'
- en: '`widget.insertAction(QtWidgets.QAction, QtWidgets.QAction)`: This inserts an
    action (the second parameter) before another action (the first parameter) in the
    widget action list.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.insertAction(QtWidgets.QAction, QtWidgets.QAction)`: 这在小部件动作列表中在另一个动作（第一个参数）之前插入一个动作（第二个参数）。'
- en: '`widget.insertActions(QtWidgets.QAction, [QtWidgets.QAction])`: This inserts
    actions (the second parameter) before other actions (the first parameter) in the
    widget action list.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.insertActions(QtWidgets.QAction, [QtWidgets.QAction])`: 这在小部件动作列表中在另一个动作（第一个参数）之前插入动作（第二个参数）。'
- en: '`widget.internalWinId()`: This returns the window system identifier.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.internalWinId()`: 这返回窗口系统标识符。'
- en: '`widget.keyboardGrabber()`: This returns the widget of the `QtWidgets.QWidget`
    type that is currently grabbing the keyboard input.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.keyboardGrabber()`: 这返回当前捕获键盘输入的 `QtWidgets.QWidget` 类型的小部件。'
- en: '`widget.layout()`: This returns the layout manager of this widget.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.layout()`: 这返回此小部件的布局管理器。'
- en: '`widget.layoutDirection()`: This returns the direction of the layout manager
    of this widget.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.layoutDirection()`: 这返回了此`widget`布局管理器的方向。'
- en: '`widget.locale()`: This returns the widget''s locale of the `QtCore.QLocale`
    type.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.locale()`: 这返回了`widget`的`QtCore.QLocale`类型的区域设置。'
- en: '`widget.lower()`: This lowers the widget to the bottom of the parent widget''s
    stack.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.lower()`: 这将`widget`降低到父`widget`堆栈的底部。'
- en: '`widget.mapFrom(QtWidgets.QWidget, QtCore.QPoint)`: This represents a translation
    of the coordinate `pos` (the second parameter) from the coordinate system of the
    parent to the widget''s coordinate system.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.mapFrom(QtWidgets.QWidget, QtCore.QPoint)`: 这表示将坐标`pos`（第二个参数）从父坐标系统转换为`widget`的坐标系统。'
- en: '`widget.mapFromGlobal(QtCore.QPoint)`: This represents a translation of the
    global screen coordinate `pos` (the parameter) to the widget''s coordinate system.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.mapFromGlobal(QtCore.QPoint)`: 这表示将全局屏幕坐标`pos`（参数）转换为`widget`的坐标系统。'
- en: '`widget.mapFromParent(QtCore.QPoint)`: This represents a translation of the
    parent coordinate `pos` (the parameter) to the widget''s coordinate system.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.mapFromParent(QtCore.QPoint)`: 这表示将父坐标`pos`（参数）转换为`widget`的坐标系统。'
- en: '`widget.mapTo(QtWidgets.QWidget, QtCore.QPoint)`: This represents a translation of
    the widget''s coordinate `pos` (the second parameter) to the parent coordinate
    system.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.mapTo(QtWidgets.QWidget, QtCore.QPoint)`: 这表示将`widget`的坐标`pos`（第二个参数）转换为父坐标系统。'
- en: '`widget.mapToGlobal(QtCore.QPoint)`: This represents a translation of the widget''s
    coordinate `pos` (the parameter) to the global screen coordinates.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.mapToGlobal(QtCore.QPoint)`: 这表示将`widget`的坐标`pos`（参数）转换为全局屏幕坐标。'
- en: '`widget.mapToParent(QPoint)`: This represents a translation of the widget''s
    coordinate `pos` (the parameter) to the coordinate in the parent widget.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.mapToParent(QPoint)`: 这表示将`widget`的坐标`pos`（参数）转换为父`widget`中的坐标。'
- en: '`widget.mask()`: This returns the region of the `QtGui.QRegion` type as the
    mask that''s currently set on a widget.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.mask()`: 这返回了当前设置在`widget`上的`QtGui.QRegion`类型的区域作为掩码。'
- en: '`widget.maximumHeight()`: This returns the maximum height of the integer type
    that''s available for this widget.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.maximumHeight()`: 这返回了此`widget`可用的整数类型的最大高度。'
- en: '`widget.maximumSize()`: This returns the maximum size of the `QtCore.QSize`
    type that''s available for this widget.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.maximumSize()`: 这返回了此`widget`可用的`QtCore.QSize`类型的最大尺寸。'
- en: '`widget.maximumWidth()`: This returns the maximum width of the integer type
    that''s available for this widget.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.maximumWidth()`: 这返回了此`widget`可用的整数类型的最大宽度。'
- en: '`widget.minimumHeight()`: This returns the minimum height of the integer type
    that''s available for this widget.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.minimumHeight()`: 这返回了此`widget`可用的整数类型的最小高度。'
- en: '`widget.minimumSize()`: This returns the minimum size of the `QtCore.QSize`
    type that''s available for this widget.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.minimumSize()`: 这返回了此`widget`可用的`QtCore.QSize`类型的最小尺寸。'
- en: '`widget.minimumSizeHint()`: This returns the minimum size hint of the `QtCore.QSize`
    type that''s available for this widget.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.minimumSizeHint()`: 这返回了此`widget`可用的`QtCore.QSize`类型的最小尺寸提示。'
- en: '`widget.minimumWidth()`: This returns the minimum width of the integer type
    that''s available for this widget.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.minimumWidth()`: 这返回了此`widget`可用的整数类型的最小宽度。'
- en: '`widget.metric(QtGui.QPaintDevice.PaintDeviceMetric)`: This returns the metric
    information with the paint device metric parameter.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.metric(QtGui.QPaintDevice.PaintDeviceMetric)`: 这返回了带有绘图设备度量参数的度量信息。'
- en: '`widget.mouseGrabber()`: This returns the widget of the `QtWidgets.QWidget`
    type that is currently grabbing the mouse input.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.mouseGrabber()`: 这返回了当前正在抓取鼠标输入的`QtWidgets.QWidget`类型的`widget`。'
- en: '`widget.nativeParentWidget()`: This returns the native parent of the `QtWidgets.QWidget`
    type for this widget.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.nativeParentWidget()`: 这返回了此`widget`的`QtWidgets.QWidget`类型的本地父级。'
- en: '`widget.nextInFocusChain()`: This returns the next widget of the `QtWidgets.QWidget`
    type in this widget''s focus chain.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.nextInFocusChain()`: 这返回了在此`widget`的焦点链中的下一个`QtWidgets.QWidget`类型的`widget`。'
- en: '`widget.normalGeometry()`: This returns the widget''s geometry of the `QtCore.QRect`
    type as it will appear when shown as a `normal` (not `maximized` or `fullscreen`)
    top-level widget.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.normalGeometry()`: 这返回了`widget`的`QtCore.QRect`类型的几何形状，当作为`normal`（非`maximized`或`fullscreen`）顶级`widget`显示时将出现。'
- en: '`widget.overrideWindowFlags(QtCore.Qt.WindowFlags)`: This changes the window
    flags for the widget without telling the window system.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.overrideWindowFlags(QtCore.Qt.WindowFlags)`: 这更改了`widget`的窗口标志，而不通知窗口系统。'
- en: '`widget.overrideWindowState(QtCore.Qt.WindowStates)`: This changes the window
    state on child widgets.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.overrideWindowState(QtCore.Qt.WindowStates)`: 这会更改子小部件的窗口状态。'
- en: '`widget.palette()`: This returns the widget''s palette that is used by the
    widget''s style when rendering standard components.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.palette()`: 这返回小部件的调色板，该调色板在小部件绘制标准组件时由小部件的样式使用。'
- en: '`widget.parentWidget()`: This returns the parent widget of the `QtWidgets.QWidget`
    type of this widget.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.parentWidget()`: 这返回此小部件的 `QtWidgets.QWidget` 类型的父小部件。'
- en: '`widget.pos()`: This returns the position of the widget of the `QtCore.QPoint`
    type within its parent widget.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.pos()`: 这返回小部件在父小部件内的 `QtCore.QPoint` 类型的位置。'
- en: '`widget.previousInFocusChain()`: This returns the previous widget of the `QtWidgets.QWidget`
    type in this widget''s focus chain.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.previousInFocusChain()`: 这返回在此小部件焦点链中的 `QtWidgets.QWidget` 类型的上一个小部件。'
- en: '`widget.raise_()`: This raises the widget to the top of the parent widget''s
    stack.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.raise_()`: 这会将小部件提升到父小部件堆栈的顶部。'
- en: '`widget.rect()`: This returns the internal widget''s geometry of the `QtCore.QRect`
    type, excluding any window frame.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.rect()`: 这返回内部小部件的 `QtCore.QRect` 类型的几何形状，不包括任何窗口框架。'
- en: '`widget.releaseKeyboard()`: This releases the keyboard grab.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.releaseKeyboard()`: 这将释放键盘捕获。'
- en: '`widget.releaseMouse()`: This releases the mouse grab.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.releaseMouse()`: 这将释放鼠标捕获。'
- en: '`widget.releaseShortcut(id)`: This removes the shortcut with the given `id`
    as an integer value from the shortcut system.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.releaseShortcut(id)`: 这将从快捷方式系统中移除具有给定 `id` 作为整数值的快捷方式。'
- en: '`widget.removeAction(QtWidgets.QAction)`: This removes the action passed in
    the parameter from the widget''s action list.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.removeAction(QtWidgets.QAction)`: 这将从小部件的动作列表中移除通过参数传入的动作。'
- en: '`widget.render(QtGui.QPaintDevice, QtCore.QPoint, QtGui.QRegion, QtWidgets.QWidget.RenderFlags)`:
    This renders the `sourceRegion` (the third parameter) of this widget in the target
    (the first parameter) using `RenderFlags` (the fourth parameter), and starts at
    `targetOffset` (the second parameter) in the target.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.render(QtGui.QPaintDevice, QtCore.QPoint, QtGui.QRegion, QtWidgets.QWidget.RenderFlags)`:
    这将在目标（第一个参数）中使用 `RenderFlags`（第四个参数）渲染此小部件的 `sourceRegion`（第三个参数），并在目标中的 `targetOffset`（第二个参数）开始。'
- en: '`widget.render(QtGui.QPainter, QtCore.QPoint, QtGui.QRegion, QtWidgets.QWidget.RenderFlags)`:
    This renders the widget in the painter device (`QtGui.QPainter.device()`) with
    the `sourceRegion` (the third parameter) of this widget using `renderFlags` (the
    fourth parameter) and starts at `targetOffset` (the second parameter).'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.render(QtGui.QPainter, QtCore.QPoint, QtGui.QRegion, QtWidgets.QWidget.RenderFlags)`:
    这将在画家设备 (`QtGui.QPainter.device()`) 中使用 `sourceRegion`（此小部件的第三个参数）和 `renderFlags`（第四个参数）渲染小部件，并从
    `targetOffset`（第二个参数）开始。'
- en: '`widget.repaint()`: This repaints the widget using the `QtWidgets.QWidget.paintEvent()`
    method.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.repaint()`: 这将使用 `QtWidgets.QWidget.paintEvent()` 方法重新绘制小部件。'
- en: '`widget.repaint(QtCore.QRect)`: This repaints the rectangle inside the widget.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.repaint(QtCore.QRect)`: 这将在小部件内部重新绘制矩形。'
- en: '`widget.repaint(QtGui.QRegion)`: This repaints the region inside the widget.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.repaint(QtGui.QRegion)`: 这将在小部件内部重新绘制区域。'
- en: '`widget.repaint(x, y, w, h)`: This repaints the rectangle with `x` (*x* axis)
    or `y` (*y* axis) and the `w` (width) and `h` (height) integer values inside the
    widget.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.repaint(x, y, w, h)`: 这将在小部件内部重新绘制具有 `x`（*x* 轴）或 `y`（*y* 轴）和 `w`（宽度）以及
    `h`（高度）整数值的矩形。'
- en: '`widget.restoreGeometry(QtCore.QByteArray)`: This restores the geometry and
    state of top-level widgets stored in the byte array geometry, and returns `True`
    if successful, otherwise `False`.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.restoreGeometry(QtCore.QByteArray)`: 这将恢复存储在字节数组几何形状中的顶级小部件的几何形状和状态，如果成功则返回
    `True`，否则返回 `False`。'
- en: '`widget.saveGeometry()`: This saves the current geometry and state for top-level
    widgets.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.saveGeometry()`: 这将保存顶级小部件的当前几何形状和状态。'
- en: '`widget.size()`: This returns the size of the `QtCore.QSize` type—the widget''s
    size, excluding the window frame.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.size()`: 这返回 `QtCore.QSize` 类型的尺寸——小部件的尺寸，不包括窗口框架。'
- en: '`widget.sizeHint()`: This returns the size of the `QtCore.QSize` type—the widget''s
    recommended size.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.sizeHint()`: 这返回 `QtCore.QSize` 类型的尺寸——小部件的推荐大小。'
- en: '`widget.sizeIncrement()`: This returns the size of the `QtCore.QSize` type—the
    widget''s increment size—or steps by means of which the size will change when
    the user resizes the window.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.sizeIncrement()`: 这返回 `QtCore.QSize` 类型的尺寸——小部件的增量大小，或者通过这些增量来改变当用户调整窗口大小时的大小。'
- en: '`widget.sizePolicy()`: This returns the size policy of the `QtWidgets.QSizePolicy`
    type—the widget''s size policy.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.sizePolicy()`: 这返回 `QtWidgets.QSizePolicy` 类型的尺寸策略——小部件的尺寸策略。'
- en: '`widget.stackUnder(QtWidgets.QWidget)`: This places the widget under a parameter
    in the parent widget''s stack.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.stackUnder(QtWidgets.QWidget)`: 这将小部件放置在父小部件堆栈中的参数下。'
- en: '`widget.statusTip()`: This returns the status tip for this widget as Unicode
    string.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.statusTip()`: 这返回小部件的状态提示作为Unicode字符串。'
- en: '`widget.style()`: This returns the widget''s GUI style of the `QtWidgets.QStyle`
    type.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.style()`: 这返回小部件的`QtWidgets.QStyle`类型的GUI样式。'
- en: '`widget.styleSheet()`: This returns Unicode string that represents the style
    sheet of the widget.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.styleSheet()`: 这返回表示小部件样式表的Unicode字符串。'
- en: '`widget.testAttribute(QtCore.Qt.WidgetAttribute)`: This returns `True` if the
    attribute in the parameter is set on this widget; otherwise, it returns `False`.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.testAttribute(QtCore.Qt.WidgetAttribute)`: 如果参数中的属性在此小部件上设置，则返回`True`；否则，返回`False`。'
- en: '`widget.toolTip()`: This returns the tool tip for this widget as Unicode string.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.toolTip()`: 这返回此小部件的工具提示作为Unicode字符串。'
- en: '`widget.toolTipDuration()`: This returns the duration for the tool tip of the
    widget, and the time in milliseconds as an integer value when the tool tip will
    be visible.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.toolTipDuration()`: 这返回小部件工具提示的持续时间，并以毫秒为单位的整数值表示工具提示何时可见。'
- en: '`widget.topLevelWidget()`: This returns the top-level widget of this widget.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.topLevelWidget()`: 这返回此小部件的最高级小部件。'
- en: '`widget.underMouse()`: This returns `True` if the widget is under the mouse
    cursor; otherwise, it returns `False`.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.underMouse()`: 如果小部件位于鼠标光标下，则返回`True`；否则，返回`False`。'
- en: '`widget.ungrabGesture(QtCore.Qt.GestureType)`: This unsubscribes the widget
    from a given gesture parameter.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.ungrabGesture(QtCore.Qt.GestureType)`: 这将取消订阅小部件给定的手势参数。'
- en: '`widget.unsetCursor()`: This unsets the widget''s cursor.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.unsetCursor()`: 这将取消设置小部件的光标。'
- en: '`widget.unsetLayoutDirection()`: This unsets the layout direction of the widget.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.unsetLayoutDirection()`: 这将取消设置小部件的布局方向。'
- en: '`widget.unsetLocale()`: This unsets the widget''s locale.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.unsetLocale()`: 这将取消设置小部件的区域设置。'
- en: '`widget.update()`: This updates the widget, unless updates are disabled or
    the widget is hidden.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.update()`: 这将更新小部件，除非更新被禁用或小部件被隐藏。'
- en: '`widget.update(QtGui.QRegion)`: This updates the widget when the region (specified
    in the parameter) inside the widget is repainted.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.update(QtGui.QRegion)`: 当小部件内部指定参数的区域被重绘时，这将更新小部件。'
- en: '`widget.update(QtCore.QRect)`: This updates the widget as a rectangle in the
    parameter inside the widget.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.update(QtCore.QRect)`: 这将更新小部件作为参数内部的小部件中的矩形。'
- en: '`widget.update(x, y, w, h)`: This updates a rectangle with the parameters as
    `x` (*x* axis) and `y` (*y* axis) and `w` (width), and `h` (height) inside the
    widget.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.update(x, y, w, h)`: 这将更新一个矩形，参数为`x`（*x*轴）和`y`（*y*轴）以及`w`（宽度）和`h`（高度）在小部件内部。'
- en: '`widget.updateGeometry()`: The layout system will be notified that the widget
    has changed and may need to change geometry.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.updateGeometry()`: 布局系统将通知小部件已更改，可能需要更改几何形状。'
- en: '`widget.updateMicroFocus()`: This updates the widget''s micro focus.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.updateMicroFocus()`: 这将更新小部件的微焦点。'
- en: '`widget.updatesEnabled()`: This returns `True` if the updates for this widget
    are enabled.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.updatesEnabled()`: 如果此小部件的更新被启用，则返回`True`。'
- en: '`widget.visibleRegion()`: This returns the unobscured region of the `QtGui.QRegion`
    type where paint events can occur.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.visibleRegion()`: 这返回未遮挡的`QtGui.QRegion`类型区域，其中可以发生绘制事件。'
- en: '`widget.whatsThis()`: This returns the *what''s this* help text of the widget
    as Unicode string.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.whatsThis()`: 这返回小部件的“这是什么”帮助文本作为Unicode字符串。'
- en: '`widget.winId()`: This returns the widget''s window system identifier of the
    `QtGui.WId` type.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.winId()`: 这返回小部件的`QtGui.WId`类型窗口系统标识符。'
- en: '`widget.width()`: This returns the widget''s width, excluding the window frame.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.width()`: 这返回小部件的宽度，不包括窗口框架。'
- en: '`widget.window()`: This returns the window for this widget.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.window()`: 这返回此小部件的窗口。'
- en: '`widget.windowFilePath()`: This returns the file path associated with this
    widget as Unicode string.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.windowFilePath()`: 这返回与该小部件关联的文件路径作为Unicode字符串。'
- en: '`widget.windowFlags()`: This returns the window flags of the `QtCore.Qt.WindowFlags`
    type that''s used by this widget.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.windowFlags()`: 这返回此小部件使用的`QtCore.Qt.WindowFlags`类型窗口标志。'
- en: '`widget.windowHandle()`: This returns the associated window of the `QtGui.QWindow`
    type, if this is a native widget.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.windowHandle()`: 如果这是一个本地小部件，则返回关联的`QtGui.QWindow`类型窗口。'
- en: '`widget.windowIcon()`: This returns the widget''s window icon of the `QtGui.QIcon`
    type.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.windowIcon()`: 这返回小部件的`QtGui.QIcon`类型窗口图标。'
- en: '`widget.windowIconText()`: This returns the widget''s window icon text as Unicode
    string.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.windowIconText()`: 这返回部件的窗口图标文本，作为Unicode字符串。'
- en: '`widget.windowModality()`: This returns which windows are blocked by the modal
    widget.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.windowModality()`: 这返回哪些窗口被模态部件阻塞。'
- en: '`widget.windowOpacity()`: This returns window opacity as a float value from
    `0.0` (completely transparent) to `1.0` (completely opaque).'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.windowOpacity()`: 这返回窗口的不透明度，以浮点值表示，从`0.0`（完全透明）到`1.0`（完全不透明）。'
- en: '`widget.windowRole()`: This returns the window''s role as Unicode string.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.windowRole()`: 这返回窗口的角色，作为Unicode字符串。'
- en: '`widget.windowState()`: This returns the current window state of the `QtCore.Qt.WindowStates`
    type.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.windowState()`: 这返回当前窗口状态，为`QtCore.Qt.WindowStates`类型。'
- en: '`widget.windowTitle()`: This returns the widget''s window title as Unicode
    string.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.windowTitle()`: 这返回部件的窗口标题，作为Unicode字符串。'
- en: '`widget.windowType()`: This returns the widget''s window type of the `QtCore.Qt.WindowType`
    type.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.windowType()`: 这返回部件的窗口类型，为`QtCore.Qt.WindowType`类型。'
- en: '`widget.x()`: This returns the *x* axis coordinate of the widget relative to
    its parent, including the window frame.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.x()`: 这返回部件相对于其父级的*x*轴坐标，包括窗口框架。'
- en: '`widget.y()`: This returns the *y* axis coordinate of the widget relative to
    its parent, including the window frame.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.y()`: 这返回部件相对于其父级的*y*轴坐标，包括窗口框架。'
- en: events
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'These are functions that are related to events such as event handlers, and
    so on:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与事件处理程序等事件相关的函数：
- en: '`widget.actionEvent(QtGui.QActionEvent)`: This event handler is called with
    event parameters when the widget''s actions are changed.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.actionEvent(QtGui.QActionEvent)`: 当部件的动作发生变化时，这个事件处理器会使用事件参数被调用。'
- en: '`widget.closeEvent(QtGui.QCloseEvent)`: This event handler is called with event
    parameters when it receives a window close request for a top-level widget from
    the window system.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.closeEvent(QtGui.QCloseEvent)`: 当窗口系统收到顶级部件的窗口关闭请求时，这个事件处理器会使用事件参数被调用。'
- en: '`widget.changeEvent(QtCore.QEvent)`: This handles state changes in the widget.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.changeEvent(QtCore.QEvent)`: 这处理部件的状态变化。'
- en: '`widget.contextMenuEvent(QtGui.QContextMenuEvent)`: This is the event handler
    that''s designed to receive widget context menu events.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.contextMenuEvent(QtGui.QContextMenuEvent)`: 这是一个设计用来接收部件上下文菜单事件的处理器。'
- en: '`widget.dragEnterEvent(QtGui.QDragEnterEvent)`: This event handler is called
    with event parameters when the mouse enters the widget and a drag operation is
    in progress.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.dragEnterEvent(QtGui.QDragEnterEvent)`: 当鼠标进入部件并且有拖动操作进行时，这个事件处理器会使用事件参数被调用。'
- en: '`widget.dragLeaveEvent(QtGui.QDragLeaveEvent)`: This event handler is called
    with event parameters when the mouse leaves the widget and a drag operation is
    in progress.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.dragLeaveEvent(QtGui.QDragLeaveEvent)`: 当鼠标离开部件并且有拖动操作进行时，这个事件处理器会使用事件参数被调用。'
- en: '`widget.dragMoveEvent(QtGui.QDragMoveEvent)`: This event handler is called
    with event parameters when certain conditions occur, such as the cursor entering
    or moving within the widget, the modifier key being pressed on the keyboard while
    the widget has focus, and when a drag operation is in progress.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.dragMoveEvent(QtGui.QDragMoveEvent)`: 当某些条件发生时，例如光标进入或移动到部件内，在部件有焦点时按下修改键，以及拖动操作正在进行时，这个事件处理器会使用事件参数被调用。'
- en: '`widget.dropEvent(QtGui.QDropEvent)`: The event handler is called with event
    parameters when the drag is dropped on the widget.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.dropEvent(QtGui.QDropEvent)`: 当拖动操作在部件上释放时，事件处理程序会使用事件参数被调用。'
- en: '`widget.enterEvent(QtCore.QEvent)`: This is the event handler that''s designed to
    receive the widget''s enter events that are passed with event parameters, and
    are sent to the widget when the mouse cursor enters the widget.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.enterEvent(QtCore.QEvent)`: 这是一个设计用来接收部件进入事件的处理器，这些事件通过事件参数传递，并且当鼠标光标进入部件时发送给部件。'
- en: '`widget.event(QtCore.QEvent)`: This receives events to the object and should
    return `True` if the event is recognized and processed.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.event(QtCore.QEvent)`: 这接收对象的事件，并且如果事件被识别并处理，则应返回`True`。'
- en: '`widget.focusOutEvent(QtGui.QFocusEvent)`: This is the event handler that''s
    designed to receive the widget''s keyboard focus events that are passed with event
    parameters when the focus is lost.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.focusOutEvent(QtGui.QFocusEvent)`: 这是一个设计用来接收部件键盘焦点事件的处理器，当焦点丢失时，会通过事件参数传递。'
- en: '`widget.focusInEvent(QtGui.QFocusEvent)`: This is the event handler that''s
    designed to receive the widget''s keyboard focus events that are passed with event
    parameters when the focus is received.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.focusInEvent(QtGui.QFocusEvent)`: 这是一个设计用来接收小部件键盘焦点事件的处理器，当焦点被接收时，事件参数会随事件传入。'
- en: '`widget.hideEvent(QtGui.QHideEvent)`: This is the event handler that''s designed
    to receive the widget''s hide events, with the hide event passed in the parameter.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.hideEvent(QtGui.QHideEvent)`: 这是一个设计用来接收小部件隐藏事件的处理器，隐藏事件通过参数传入。'
- en: '`widget.inputMethodEvent(QtGui.QInputMethodEvent)`: This is the event handler
    that''s designed to receive input method composition events, with the input method
    event passed in the parameter.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.inputMethodEvent(QtGui.QInputMethodEvent)`: 这是一个设计用来接收输入法组合事件的处理器，输入法事件通过参数传入。'
- en: '`widget.keyPressEvent(QtGui.QKeyEvent)`: This is the event handler that''s
    designed to receive key press events for the widget, with the key event passed
    in the parameter.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.keyPressEvent(QtGui.QKeyEvent)`: 这是一个设计用来接收小部件按键事件的处理器，按键事件通过参数传入。'
- en: '`widget.keyReleaseEvent(QtGui.QKeyEvent)`: This is the event handler that''s
    designed to receive key release events for the widget, with the key event passed
    in the parameter.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.keyReleaseEvent(QtGui.QKeyEvent)`: 这是一个设计用来接收小部件按键释放事件的处理器，按键事件通过参数传入。'
- en: '`widget.leaveEvent(QtCore.QEvent)`: This is the event handler that''s designed
    to receive leave events for the widget, with the event passed in the parameter.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.leaveEvent(QtCore.QEvent)`: 这是一个设计用来接收小部件离开事件的处理器，事件通过参数传入。'
- en: '`widget.moveEvent(QtGui.QMoveEvent)`: This is the event handler that''s designed
    to receive widget move events for the widget, with the mouse event passed in the
    parameter.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.moveEvent(QtGui.QMoveEvent)`: 这是一个设计用来接收小部件移动事件的处理器，鼠标事件通过参数传入。'
- en: '`widget.mouseMoveEvent(QtGui.QMouseEvent)`: This is the event handler that''s
    designed to receive mouse move events for the widget, with the mouse event passed
    in the parameter.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.mouseMoveEvent(QtGui.QMouseEvent)`: 这是一个设计用来接收小部件鼠标移动事件的处理器，鼠标事件通过参数传入。'
- en: '`widget.mousePressEvent(QtGui.QMouseEvent)`: This is the event handler that''s
    designed to receive mouse press events for the widget, with the mouse event passed
    in the parameter.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.mousePressEvent(QtGui.QMouseEvent)`: 这是一个设计用来接收小部件鼠标按下事件的处理器，鼠标事件通过参数传入。'
- en: '`widget.mouseReleaseEvent(QtGui.QMouseEvent)`: This is the event handler that''s
    designed to receive mouse release events for the widget, with the mouse event
    passed in the parameter.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.mouseReleaseEvent(QtGui.QMouseEvent)`: 这是一个设计用来接收小部件鼠标释放事件的处理器，鼠标事件通过参数传入。'
- en: '`widget.mouseDoubleClickEvent(QtGui.QMouseEvent)`: This is the event handler
    that''s designed to receive double-click mouse events for the widget, with the
    mouse event passed in the parameter.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.mouseDoubleClickEvent(QtGui.QMouseEvent)`: 这是一个设计用来接收小部件双击鼠标事件的处理器，鼠标事件通过参数传入。'
- en: '`widget.paintEvent(QtGui.QPaintEvent)`: This is the event handler that''s designed
    to receive paint events for the widget, with the paint event passed in the parameter.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.paintEvent(QtGui.QPaintEvent)`: 这是一个设计用来接收小部件绘制事件的处理器，绘制事件通过参数传入。'
- en: '`widget.resizeEvent(QtGui.QResizeEvent)`: This is the event handler that''s
    designed to receive widget resize events for the widget, with the resize event
    passed in the parameter.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.resizeEvent(QtGui.QResizeEvent)`: 这是一个设计用来接收小部件尺寸变化事件的处理器，尺寸变化事件通过参数传入。'
- en: '`widget.showEvent(QtGui.QShowEvent)`: This is the event handler that''s designed
    to receive widget show events for the widget, with the show event passed in the
    parameter.'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.showEvent(QtGui.QShowEvent)`: 这是一个设计用来接收小部件显示事件的处理器，显示事件通过参数传入。'
- en: '`widget.tabletEvent(QtGui.QTabletEvent)`: This is the event handler that''s
    designed to receive tablet events for the widget, with the tablet event passed
    in the parameter.'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.tabletEvent(QtGui.QTabletEvent)`: 这是一个设计用来接收小部件平板事件处理的处理器，平板事件通过参数传入。'
- en: '`widget.wheelEvent(QtGui.QWheelEvent)`: This is the event handler that''s designed
    to receive mouse wheel events for the widget, with the wheel event passed in the
    parameter.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.wheelEvent(QtGui.QWheelEvent)`: 这是一个设计用来接收小部件鼠标滚轮事件的处理器，滚轮事件通过参数传入。'
- en: signals
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signals for the `QWidget` class are as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`QWidget` 类可用的信号如下：'
- en: '`widget.customContextMenuRequested(QtCore.QPoint)`: This signal is emitted
    when the user has requested a context menu on the widget.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.customContextMenuRequested(QtCore.QPoint)`: 当用户在控件上请求上下文菜单时，会发出此信号。'
- en: '`widget.windowIconChanged(QtGui.QIcon)`: This signal is emitted when the window''s
    icon has changed, with the new icon as the parameter.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.windowIconChanged(QtGui.QIcon)`: 当窗口的图标更改时，会发出此信号，新图标作为参数。'
- en: '`widget.windowIconTextChanged("Icon text")`: This signal is emitted when the
    window''s icon text has changed, with the new icon text as the parameter.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.windowIconTextChanged("Icon text")`: 当窗口的图标文本更改时，会发出此信号，新图标文本作为参数。'
- en: '`widget.windowTitleChanged("Window Title")`: This signal is emitted when the
    window''s title text has changed, with the new window title as the parameter.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget.windowTitleChanged("Window Title")`: 当窗口的标题文本更改时，会发出此信号，新窗口标题作为参数。'
- en: QWidget example
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QWidget示例
- en: 'Understanding the methods of the `QWidget` class is very important, because
    these methods are very useful and commonly used with almost all elements that
    are implemented by the GUI developer with both PySide2 and PyQt5 bindings. This
    class is inherited by all graphical components, including buttons, labels, frames,
    and text fields. We will not add or test all of the methods we described previously
    to the application, because this will only be partially implemented and explained
    in this book. For now, let''s just add some of them to the widget class from the `u_style.py`
    file for demonstration purposes. First of all, set the icon to the widget window.
    For this, create a folder named `Icons/` in both the `App/App_PySide2` and `App/App_PyQt5` directories
    and insert your favorite image in this folder. Then, add the following lines to
    improve the widget to both the PyQt5 and PySide2 `u_style.py` files:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 理解QWidget类的这些方法非常重要，因为这些方法非常实用且在几乎所有的由GUI开发者使用PySide2和PyQt5绑定实现的元素中都被广泛使用。这个类被所有图形组件继承，包括按钮、标签、框架和文本字段。我们不会将之前描述的所有方法都添加到应用程序中，因为这只会部分实现并在本书中解释。现在，让我们仅为了演示目的，从`u_style.py`文件中将其中一些添加到控件类中。首先，将图标设置为控件窗口。为此，在`App/App_PySide2`和`App/App_PyQt5`目录中创建一个名为`Icons/`的文件夹，并将你喜欢的图片插入此文件夹。然后，将以下行添加到PyQt5和PySide2的`u_style.py`文件中以提高控件：
- en: '[PRE1]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, the widget's window has an icon and is slightly transparent.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，窗口的控件已有一个图标并且略微透明。
- en: QMainWindow
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QMainWindow
- en: 'This class provides the main window that can be implemented with GUI applications.
    The `QMainWindow` has either a **single document interface** (**SDI**) or **multiple
    document interface** (**MDI**) that can be created by adding `QMdiArea` as the
    central widget. The most popular examples of MDI applications are the **GNU Image
    Manipulation Program** (**GIMP**) and Photoshop, which represent similarly displayed
    documents (Windows) instead of one (SDI). In both the SDI and MDI types of application,
    the central widget needs to be added. The declaration syntax for the main window
    in the application is as follows:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 此类提供了可以用于GUI应用程序的主窗口。QMainWindow具有**单文档界面**（SDI）或**多文档界面**（MDI），可以通过添加`QMdiArea`作为中央控件来创建。MDI应用程序中最受欢迎的例子是**GNU图像处理程序**（GIMP）和Photoshop，它们代表类似显示的文档（窗口）而不是一个（SDI）。在SDI和MDI类型的应用程序中，都需要添加中央控件。应用程序中主窗口的声明语法如下：
- en: '[PRE2]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Functions of the QMainWindow class
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QMainWindow类的函数
- en: The `QMainWindow` class inherits `QWidget` and improves functionality by means
    of the following functions.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`QMainWindow`类继承自`QWidget`，并通过以下函数增强了功能。'
- en: add
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加
- en: 'These are functions related to the addition of elements to the main window,
    such as the addition of a dock widget or toolbar:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与向主窗口添加元素相关的函数，例如添加一个停靠小部件或工具栏：
- en: '`main_window.addDockWidget(QtCore.Qt.DockWidgetArea, QtWidgets.QDockWidget,
    QtCore.Qt.Orientation)`: This will add the second parameter dock widget to the
    area of the first parameter in the direction specified by the third orientation
    parameter.'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.addDockWidget(QtCore.Qt.DockWidgetArea, QtWidgets.QDockWidget,
    QtCore.Qt.Orientation)`: 这会将第二个参数的停靠小部件添加到第一个参数指定的区域，并按照第三个方向参数指定的方向添加。'
- en: '`main_window.addDockWidget(QtCore.Qt.DockWidgetArea, QtWidgets.QDockWidget)`:
    This will add the dock widget of the second parameter to the area specified in
    the first parameter.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.addDockWidget(QtCore.Qt.DockWidgetArea, QtWidgets.QDockWidget)`:
    这会将第二个参数的停靠小部件添加到第一个参数指定的区域。'
- en: '`main_window.addToolBar("Title")`: This method creates a `QtWidgets.QToolBar`
    object, setting the title, and inserts it into the top toolbar area.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.addToolBar("Title")`: 此方法创建一个`QtWidgets.QToolBar`对象，设置标题，并将其插入到顶部工具栏区域。'
- en: '`main_window.addToolBar(QtWidgets.QToolBar)`: This will add a toolbar to the
    main window.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.addToolBar(QtWidgets.QToolBar)`: 这将在主窗口中添加一个工具栏。'
- en: '`main_window.addToolBar(QtCore.Qt.ToolBarArea, QtWidgets.QToolBar)`: This will
    add the toolbar (the second parameter) to the specified area (the first parameter) in
    the main window.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.addToolBar(QtCore.Qt.ToolBarArea, QtWidgets.QToolBar)`: 这将在主窗口的指定区域（第一个参数）中添加工具栏（第二个参数）。'
- en: '`main_window.addToolBarBreak(QtCore.Qt.ToolBarArea)`: This will add the toolbar
    break to the given area after objects that are present.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.addToolBarBreak(QtCore.Qt.ToolBarArea)`: 这将在现有对象之后将工具栏分隔符添加到指定区域。'
- en: set
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions related to the setting of the parameters/properties in
    relation to the main window, including the setting of style, size, or functionality:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与主窗口参数/属性设置相关的函数，包括设置样式、大小或功能：
- en: '`main_window.setAnimated(bool)`: If the parameter is `True`, this sets the
    main window as animated.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.setAnimated(bool)`: 如果参数为`True`，则设置主窗口为动画。'
- en: '`main_window.setCentralWidget(QtWidgets.QWidget)`: This sets the central widget
    specified in the parameter for this main window.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.setCentralWidget(QtWidgets.QWidget)`: 这将为该主窗口设置参数中指定的中央小部件。'
- en: '`main_window.setCorner(QtCore.Qt.Corner, QtCore.Qt.DockWidgetArea)`: This sets
    the dock widget area (the second parameter) to occupy the corner (the first parameter).'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.setCorner(QtCore.Qt.Corner, QtCore.Qt.DockWidgetArea)`: 这将设置停靠小部件区域（第二个参数）以占据角落（第一个参数）。'
- en: '`main_window.setDockNestingEnabled(bool)`: If the parameter is `True`, this
    stipulates that docks can be nested.'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.setDockNestingEnabled(bool)`: 如果参数为`True`，则规定停靠可以嵌套。'
- en: '`main_window.setDockOptions(QtWidgets.QMainWindow.DockOptions)`: This sets
    the docking behavior of this main window.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.setDockOptions(QtWidgets.QMainWindow.DockOptions)`: 这将设置此主窗口的停靠行为。'
- en: '`main_window.setDocumentMode(bool)`: If the parameter is `True`, this sets
    the document mode to the tab bar of this main window (for tabbed dock widgets).'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.setDocumentMode(bool)`: 如果参数为`True`，则将文档模式设置为该主窗口的选项卡栏（用于选项卡停靠小部件）。'
- en: '`main_window.setIconSize(QtCore.QSize)`: This sets the icon size of the toolbar
    icons for this main window.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.setIconSize(QtCore.QSize)`: 这将为该主窗口的工具栏图标设置图标大小。'
- en: '`main_window.setMenuBar(QtWidgets.QMenuBar)`: This sets the menu bar specified
    in the parameter for this main window.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.setMenuBar(QtWidgets.QMenuBar)`: 这将为该主窗口设置参数中指定的菜单栏。'
- en: '`main_window.setMenuWidget(QtWidgets.QWidget)`: This sets the menu bar of the
    `QtWidgets.QWidget` type for this main window.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.setMenuWidget(QtWidgets.QWidget)`: 这将为该主窗口设置`QtWidgets.QWidget`类型的菜单栏。'
- en: '`main_window.setStatusBar(QtWidgets.QStatusBar)`: This sets the status bar
    for this main window.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.setStatusBar(QtWidgets.QStatusBar)`: 这将设置此主窗口的状态栏。'
- en: '`main_window.setTabPosition(QtCore.Qt.DockWidgetAreas, QtWidgets.QTabWidget.TabPosition)`:
    This sets the tab position for the dock widget areas (the first parameter) to
    the tab position (the second parameter).'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.setTabPosition(QtCore.Qt.DockWidgetAreas, QtWidgets.QTabWidget.TabPosition)`:
    这将为停靠小部件区域（第一个参数）设置选项卡位置（第二个参数）。'
- en: '`main_window.setTabShape(QtWidgets.QTabWidget.TabShape)`: This sets the tab
    shape that will be used with tabbed dock widgets for this main window.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.setTabShape(QtWidgets.QTabWidget.TabShape)`: 这将为该主窗口的选项卡停靠小部件设置将使用的选项卡形状。'
- en: '`main_window.setToolButtonStyle(QtCore.Qt.ToolButtonStyle)`: This sets the
    style of toolbar buttons for this main window.'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.setToolButtonStyle(QtCore.Qt.ToolButtonStyle)`: 这将为该主窗口设置工具栏按钮的样式。'
- en: '`main_window.setUnifiedTitleAndToolBarOnMac(bool)`: This sets the unified title
    and toolbar look on macOS.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.setUnifiedTitleAndToolBarOnMac(bool)`: 这将为macOS设置统一的标题和工具栏外观。'
- en: is
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is
- en: 'These are functions that return a Boolean value (`bool`) related to the main
    window states, for example, to check the current state:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回一个布尔值（`bool`），与主窗口状态相关，例如，检查当前状态：
- en: '`main_window.isAnimated()`: This returns `True` if the dock widgets and toolbars
    are animated.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.isAnimated()`: 如果停靠小部件和工具栏是动画的，则返回`True`。'
- en: '`main_window.isDockNestingEnabled()`: This returns `True` if the docks can
    be nested.'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.isDockNestingEnabled()`: 如果停靠可以嵌套，则返回`True`。'
- en: functional
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the main window, changes in functionality, and so on:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与主窗口当前值返回、功能变化等相关联的函数：
- en: '`main_window.centralWidget()`: This returns the central widget of the `QtWidgets.QWidget`
    type for this main window.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.centralWidget()`: 这返回此主窗口的`QtWidgets.QWidget`类型的中央小部件。'
- en: '`main_window.corner(QtCore.Qt.Corner)`: This returns the dock widget area that
    occupies the area specified in the parameter corner of the `QtCore.Qt.Corner`
    type.'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.corner(QtCore.Qt.Corner)`: 这返回由`QtCore.Qt.Corner`类型的参数`corner`指定的区域所占据的停靠小部件区域。'
- en: '`main_window.createPopupMenu()`: This returns a popup menu of the `QtWidgets.QMenu`
    type for this main window.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.createPopupMenu()`: 这返回此主窗口的`QtWidgets.QMenu`类型的弹出菜单。'
- en: '`main_window.dockOptions()`: This returns the docking behavior of the `QtWidgets.QMainWindow.DockOptions`
    type for this main window.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.dockOptions()`: 这返回此主窗口的`QtWidgets.QMainWindow.DockOptions`类型的停靠行为。'
- en: '`main_window.dockWidgetArea(QtWidgets.QDockWidget)`: This returns the dock
    widget area of the `QtCore.Qt.DockWidgetArea` type for the dock widget of the
    main window.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.dockWidgetArea(QtWidgets.QDockWidget)`: 这返回主窗口停靠小部件的`QtCore.Qt.DockWidgetArea`类型的停靠小部件区域。'
- en: '`main_window.documentMode()`: This returns `True` if the tab bar for tabbed
    dock widgets is set to document mode.'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.documentMode()`: 这返回`True`，如果选项卡式停靠小部件的标签栏设置为文档模式。'
- en: '`main_window.iconSize()`: This returns the size of toolbar icons of the `QtCore.QSize`
    type in this main window.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.iconSize()`: 这返回此主窗口工具栏图标的`QtCore.QSize`类型的大小。'
- en: '`main_window.insertToolBar(QtWidgets.QToolBar, QtWidgets.QToolBar)`: This inserts
    the toolbar (the second parameter) before the toolbar (the first parameter).'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.insertToolBar(QtWidgets.QToolBar, QtWidgets.QToolBar)`: 这在第一个参数指定的工具栏之前插入第二个参数指定的工具栏。'
- en: '`main_window.insertToolBarBreak(QtWidgets.QToolBar)`: This inserts a toolbar
    break before the toolbar specified in the parameter.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.insertToolBarBreak(QtWidgets.QToolBar)`: 这在参数指定的工具栏之前插入工具栏分隔符。'
- en: '`main_window.menuBar()`: This returns the menu bar of the `QtWidgets.QMenuBar`
    type for the main window.'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.menuBar()`: 这返回主窗口的`QtWidgets.QMenuBar`类型的菜单栏。'
- en: '`main_window.menuWidget()`: This returns the menu bar of the `QtWidgets.QWidget`
    type for the main window.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.menuWidget()`: 这返回主窗口的`QtWidgets.QWidget`类型的菜单栏。'
- en: '`main_window.removeDockWidget(QtWidgets.QDockWidget)`: This removes the dock
    widget from the main window layout and hides it.'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.removeDockWidget(QtWidgets.QDockWidget)`: 这从主窗口布局中移除停靠小部件并隐藏它。'
- en: '`main_window.removeToolBar(QtWidgets.QToolBar)`: This removes the toolbar from
    the main window layout and hides it.'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.removeToolBar(QtWidgets.QToolBar)`: 这从主窗口布局中移除工具栏并隐藏它。'
- en: '`main_window.removeToolBarBreak(QtWidgets.QToolBar)`: This removes the toolbar
    break before the toolbar specified in the parameter.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.removeToolBarBreak(QtWidgets.QToolBar)`: 这移除参数指定的工具栏之前的工具栏分隔符。'
- en: '`main_window.resizeDocks([QtWidgets.QDockWidget], [int], QtCore.Qt.Orientation)`:
    This resizes the dock widgets specified in the first parameter with sizes in pixels
    from the second parameter and a third orientation parameter.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.resizeDocks([QtWidgets.QDockWidget], [int], QtCore.Qt.Orientation)`:
    这根据第二个参数中的像素大小和第三个方向参数调整第一个参数指定的停靠小部件的大小。'
- en: '`main_window.restoreDockWidget(QtWidgets.QDockWidget)`: This restores the state
    of the dock widget with the `QtWidgets.QMainWindow.restoreState()` function and
    returns `True` if the state was restored; otherwise, it returns `False`.'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.restoreDockWidget(QtWidgets.QDockWidget)`: 这使用`QtWidgets.QMainWindow.restoreState()`函数恢复停靠小部件的状态，如果状态已恢复则返回`True`，否则返回`False`。'
- en: '`main_window.restoreState(QtCore.QByteArray,0)`: This restores the state of
    the toolbars and dock widgets for this main window with the version as the second
    parameter of the integer value type that will be compared with the number stored
    in state. If they do not match the function, they return `False`, otherwise `True`.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.restoreState(QtCore.QByteArray,0)`: 这使用作为整数类型第二个参数的版本与存储在状态中的数字进行比较来恢复此主窗口的工具栏和停靠小部件的状态。如果不匹配，函数返回`False`，否则返回`True`。'
- en: '`main_window.saveState(0)`: This saves the current state of the toolbars and
    dock widgets for this main window. The version number of the parameter as an integer
    value will be stored as part of the data.'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.saveState(0)`: 这保存此主窗口的工具栏和停靠小部件的当前状态。参数的版本号作为整数值将作为数据的一部分存储。'
- en: '`main_window.splitDockWidget(QtWidgets.QDockWidget, QtWidgets.QDockWidget,
    QtCore.Qt.Orientation)`: This splits the space covered by the widget (the first
    parameter) into two parts, moves the first dock widget into the first part, and
    moves the second dock widget (the second parameter) into the second part, with
    orientation from the third parameter that specifies how the space will be divided.'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.splitDockWidget(QtWidgets.QDockWidget, QtWidgets.QDockWidget,
    QtCore.Qt.Orientation)`: 这将部件（第一个参数）覆盖的空间分成两部分，将第一个停靠部件移动到第一部分，并将第二个停靠部件（第二个参数）移动到第二部分，第三参数指定了空间如何分割的方向。'
- en: '`main_window.statusBar()`: This returns the status bar of `QtWidgets.QStatusBar`
    for this main window.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.statusBar()`: 这返回了此主窗口的 `QtWidgets.QStatusBar` 状态栏。'
- en: '`main_window.tabifiedDockWidgets(QtWidgets.QDockWidget)`: This returns the
    dock widgets that are tabified together with dock widgets in the parameter.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.tabifiedDockWidgets(QtWidgets.QDockWidget)`: 这返回与参数中的停靠部件一起选项卡化的停靠部件。'
- en: '`main_window.tabifyDockWidget(QtWidgets.QDockWidget, QtWidgets.QDockWidget)`:
    This moves the dock widget in the second parameter on top of the dock widget from
    the first parameter and creates a tabbed docked area in the main window.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.tabifyDockWidget(QtWidgets.QDockWidget, QtWidgets.QDockWidget)`:
    这会将第二个参数中的停靠部件移动到第一个参数中的停靠部件之上，并在主窗口中创建一个选项卡式停靠区域。'
- en: '`main_window.tabPosition(QtCore.Qt.DockWidgetArea)`: This returns the tab position
    for the area specified in the parameter.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.tabPosition(QtCore.Qt.DockWidgetArea)`: 这返回了参数中指定的区域的选项卡位置。'
- en: '`main_window.tabShape()`: This returns the tab shape of the `QtWidgets.QTabWidget.TabShape`
    type that is used with tabbed dock widgets.'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.tabShape()`: 这返回了与选项卡式停靠部件一起使用的 `QtWidgets.QTabWidget.TabShape`
    类型的选项卡形状。'
- en: '`main_window.takeCentralWidget()`: This removes the central widget of the main
    window.'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.takeCentralWidget()`: 这会移除主窗口的中心部件。'
- en: '`main_window.toolBarArea(QtWidgets.QToolBar)`: This returns the toolbar area
    of the `QtCore.Qt.ToolBarArea` type for the specified parameter.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.toolBarArea(QtWidgets.QToolBar)`: 这返回指定参数的 `QtCore.Qt.ToolBarArea`
    类型的工具栏区域。'
- en: '`main_window.toolBarBreak(QtWidgets.QToolBar)`: This returns `True` if the
    toolbar has a break before the toolbar specified in the parameter.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.toolBarBreak(QtWidgets.QToolBar)`: 如果工具栏在指定的参数之前有一个断点，则返回 `True`。'
- en: '`main_window.toolButtonStyle()`: This returns the tool button style of the
    `QtCore.Qt.ToolButtonStyle` type.'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.toolButtonStyle()`: 这返回 `QtCore.Qt.ToolButtonStyle` 类型的工具按钮样式。'
- en: '`main_window.unifiedTitleAndToolBarOnMac()`: This returns `True` if the main
    window uses the unified title and toolbar look on macOS.'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.unifiedTitleAndToolBarOnMac()`: 如果主窗口在 macOS 上使用统一的标题和工具栏外观，则返回
    `True`。'
- en: events
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'These are functions that are related to the events, such as event handlers:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与事件相关的函数，例如事件处理程序：
- en: '`main_window.contextMenuEvent(QtGui.QContextMenuEvent)`: This is the `QWidget`
    event handler, which is designed to receive main window context menu events.'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.contextMenuEvent(QtGui.QContextMenuEvent)`: 这是 `QWidget` 事件处理程序，它被设计用来接收主窗口的上下文菜单事件。'
- en: '`main_window.event(QtCore.QEvent)`: This is the `QtCore.QObject` function,
    which receives events to the object and should return `True` if the event is recognized
    and processed.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.event(QtCore.QEvent)`: 这是 `QtCore.QObject` 函数，它接收对象的事件，如果事件被识别并处理，则应返回
    `True`。'
- en: signals
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signals of the `QMainWindow` class are as follows:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`QMainWindow` 类的可用的信号如下：'
- en: '`main_window.iconSizeChanged(QtCore.QSize)`: This signal is emitted when the
    window''s icon size has changed, with the new icon size that was passed in the
    parameter.'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.iconSizeChanged(QtCore.QSize)`: 当窗口的图标大小发生变化时，会发出此信号，并传递了新的图标大小作为参数。'
- en: '`main_window.tabifiedDockWidgetActivated(QtWidgets.QDockWidget)`: This signal
    is emitted when the tabified dock widget is activated by selecting the tab, with
    the tabified dock widget that was passed in the parameter.'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.tabifiedDockWidgetActivated(QtWidgets.QDockWidget)`: 当通过选择选项卡激活选项卡化的停靠部件时，会发出此信号，并传递了选项卡化的停靠部件作为参数。'
- en: '`main_window.toolButtonStyleChanged(QtCore.Qt.ToolButtonStyle)`: This signal
    is emitted when the style that was used for tool buttons in the window is changed,
    and the new tool button style is passed in the parameter.'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_window.toolButtonStyleChanged(QtCore.Qt.ToolButtonStyle)`: 当窗口中工具按钮使用的样式发生变化时，会发出此信号，并将新的工具按钮样式作为参数传递。'
- en: QMainWindow example
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QMainWindow 示例
- en: 'The `QMainWindow` class provides a way to realize the application in a more
    comprehensive manner. In this way, we will reorganize the classes of the created
    app with the main window instead of the widget that was described. To demonstrate
    this, let''s create a file named `u_window.py` in both the `App/App_PySide2` and
    `App/App_PyQt5` directories, and add `import` statements to these lines:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`QMainWindow`类提供了一种更全面实现应用程序的方法。这样，我们将使用主窗口而不是之前描述的小部件来重新组织创建的应用程序中的类。为了演示这一点，让我们在`App/App_PySide2`和`App/App_PyQt5`目录中创建一个名为`u_window.py`的文件，并向这些行添加`import`语句：'
- en: 'Add the following code to the PyQt5 `u_window.py` file:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到PyQt5的`u_window.py`文件中：
- en: '[PRE3]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following code to the PySide2 `u_window.py` file:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到PySide2的`u_window.py`文件中：
- en: '[PRE4]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the case of both PySide2 and PyQt5, add the main window class, `UWindow`,
    to the `u_window.py` file:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PySide2和PyQt5的情况下，将主窗口类`UWindow`添加到`u_window.py`文件中：
- en: '[PRE5]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we're adding the `UWindow` class that inherits from the `QWin` class,
    which, in turn, implements the `QMainWindow` class of the `QtWidgets` module.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了从`QWin`类继承的`UWindow`类，而`QWin`类又实现了`QtWidgets`模块的`QMainWindow`类。
- en: 'Add the menu bar to the `UWindow` class:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将菜单栏添加到`UWindow`类中：
- en: '[PRE6]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This menu bar contains menu items that contain the actions (selection points).
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜单栏包含包含操作的菜单项（选择点）。
- en: 'Add the tab widget of the main application window to the `UWindow` class, set
    the central widget and status bar, and complete the file:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将主应用程序窗口的标签控件添加到`UWindow`类中，设置中心小部件和状态栏，并完成文件：
- en: '[PRE7]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The central widget of the main window is a tab widget that contains three widgets
    for each tab. At the bottom of the application window is the status bar.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 主窗口的中心小部件是一个包含每个标签三个小部件的标签控件。在应用程序窗口的底部是状态栏。
- en: 'Now, we need to add some lines to the `u_style.py` files:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要向`u_style.py`文件中添加一些行：
- en: 'In the `u_style.py` file (for both PySide2 and PyQt5), insert new classes with
    lines before the `UWid` class and then add new colors to the file:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`u_style.py`文件（适用于PySide2和PyQt5）中，在`UWid`类之前插入新类，然后向文件中添加新的颜色：
- en: '[PRE8]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is a list with new RGBA colors that will be used in the application.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个包含将在应用程序中使用的新的RGBA颜色的列表。
- en: 'Then, add the main window styling class:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加主窗口样式类：
- en: '[PRE9]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will add commonly used properties to the main window.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为主窗口添加常用属性。
- en: 'Now, add the menu bar styling class:'
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加菜单栏样式类：
- en: '[PRE10]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The menu bar is in the top panel of the main application window.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单栏位于主应用程序窗口的顶部面板中。
- en: 'Add the styling class for the menus in the menu bar:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向菜单栏中的菜单添加样式类：
- en: '[PRE11]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The menus are the popup lists that appear if the menu bar option is clicked.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单是在点击菜单栏选项时出现的弹出列表。
- en: 'Now, add the tab widget styling class:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加标签控件样式类：
- en: '[PRE12]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The tab widget is a central widget of the application window. The `setStyleSheet()`
    method realizes the styling of the various elements of this tab widget.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 标签控件是应用程序窗口的中心小部件。`setStyleSheet()`方法实现了此标签控件各个元素的风格。
- en: 'Add the status bar styling class:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加状态栏样式类：
- en: '[PRE13]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This status bar will complete the application window at the bottom. We need
    to add this main window to the `u_app.py` files.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 这个状态栏将完成应用程序窗口底部的布局。我们需要将这个主窗口添加到`u_app.py`文件中。
- en: 'Change the line in the `import` statements and the line of the `UApp` class:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`import`语句和`UApp`类的行：
- en: '[PRE14]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The main class of the `UApp` application inherits the `UWindow` class. Now,
    we can see the basis of the application main window in the GUI representation. In
    both PySide2 and PyQt5 apps, the result will be the same:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '`UApp`应用程序的主类继承自`UWindow`类。现在，我们可以在GUI表示中看到应用程序主窗口的基础。在PySide2和PyQt5应用程序中，结果将是相同的：'
- en: '![](img/8c41c8b8-6f7f-4b78-b33e-c4ffc9fdbf12.png)'
  id: totrans-419
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8c41c8b8-6f7f-4b78-b33e-c4ffc9fdbf12.png)'
- en: The preceding screenshot shows the application's main window.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了应用程序的主窗口。
- en: Summary
  id: totrans-421
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter involved a detailed consideration of the two main classes of both
    the PySide2 and PyQt5 libraries: `QWidget` and `QMainWindow`. A description of
    the methods of these classes is very important because this is the basis for creating
    graphical components for GUI applications. Almost all the classes that the developer
    will use when building the application, provided with PySide2 and PyQt5 frameworks,
    are inherited by the `QWidget` class. On the other hand, the `QMainWindow` class
    provides a more comprehensive way to create the modern GUI.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 本章详细考虑了PySide2和PyQt5库的两个主要类：`QWidget`和`QMainWindow`。这些类的描述非常重要，因为这构成了创建GUI应用程序图形组件的基础。几乎开发者在构建应用程序时将使用的所有类，只要是由PySide2和PyQt5框架提供的，都是继承自`QWidget`类的。另一方面，`QMainWindow`类提供了一种更全面的方式来创建现代GUI。
- en: The next chapter will continue to explore the graphical elements that inherit
    the `QWidget` class.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将继续探讨继承自`QWidget`类的图形元素。
