- en: Chapter 5. Loops and Logic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。循环和逻辑
- en: In the previous chapter, you learned how to use logic, such as `if`, `elif`,
    and `else`, to help design programs that could respond to user input in many ways.
    Also, you learned how to use the `while` and `for` loops. In this chapter, we
    will build our first mini game, called **Higher** or **Lower**. The game is a
    number guessing game, and we will use it to combine logic and loops to make a
    game that responds to many user requests.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何使用逻辑，例如 `if`、`elif` 和 `else`，来帮助设计能够以多种方式响应用户输入的程序。你还学习了如何使用 `while`
    和 `for` 循环。在本章中，我们将构建我们的第一个迷你游戏，称为 **Higher** 或 **Lower**。这个游戏是一个数字猜谜游戏，我们将用它来结合逻辑和循环，制作一个能够响应用户许多请求的游戏。
- en: Tip
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remember to save your work frequently so that you can make corrections to your
    code!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 记得经常保存你的工作，这样你就可以对你的代码进行修改！
- en: Higher or Lower
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Higher 或 Lower
- en: Higher or Lower is a numbers guessing game. In this game, the computer chooses
    a random number, and the user tries to guess what number the computer has chosen.
    There are many different ways to build this game, and many versions of this game
    have been built by different people.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Higher 或 Lower 是一个数字猜谜游戏。在这个游戏中，计算机选择一个随机数字，用户尝试猜测计算机选择了哪个数字。有很多人不同的方式来构建这个游戏，很多人已经构建了不同版本的这个游戏。
- en: 'Our version of the game will have two levels:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的游戏版本将有两个难度级别：
- en: An easy level
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单难度
- en: A hard level
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 困难难度
- en: The computer will first choose a random, secret number between `1` and `100`.
    In the easy level, the user will get unlimited chances to guess the correct number.
    In the hard level, the user will only get three chances to guess the correct number,
    and then they will lose the game.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机将首先在 `1` 和 `100` 之间选择一个随机、秘密的数字。在简单难度下，用户将有无限的机会猜测正确的数字。在困难难度下，用户只有三次猜测正确数字的机会，然后他们将输掉游戏。
- en: This game can be coded in different ways and still work well—this is one of
    the most awesome things about writing code. However, we will focus on writing
    code that uses a `while` loop for the easy version and a `for` loop for the hard
    version. This will let us practice our loops and build a game that has different
    levels of challenge.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个游戏可以用不同的方式编写，并且仍然可以很好地工作——这是编写代码最酷的事情之一。然而，我们将专注于编写使用 `while` 循环的简单版本和 `for`
    循环的困难版本的代码。这将让我们练习我们的循环，并构建一个具有不同挑战级别的游戏。
- en: To be successful in this chapter, follow each section step by step, and make
    sure that you understand what is happening before moving on to the next section.
    Test your code by running your program when you are instructed in the text so
    that you learn how things work. At the end of this chapter, you will have your
    first fully functioning game!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本章中取得成功，请按步骤逐节进行，确保在进入下一节之前理解正在发生的事情。按照文本中的指示运行你的程序以测试你的代码，这样你可以了解事物是如何工作的。在本章结束时，你将拥有你的第一个完全功能性的游戏！
- en: Game file set up
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏文件设置
- en: When you start to think about a small game such as Higher or Lower, you can
    write some of your code like an outline for a book, that is, you can use comments
    to place all of the logic in your code, even if you are not certain how exactly
    the code works. In our file, we need to set up code for the easy version and hard
    version, a function to start the game, and a function to end the game.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始思考像 Higher 或 Lower 这样的小型游戏时，你可以像写一本书的大纲一样编写一些代码，也就是说，你可以使用注释将所有逻辑放置在你的代码中，即使你不确定代码是如何工作的。在我们的文件中，我们需要为简单版本和困难版本设置代码，一个用于开始游戏的函数和一个用于结束游戏的函数。
- en: 'To start planning the game, you need to keep your coding tools ready:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始规划游戏，你需要准备好你的编码工具：
- en: Open up your Notepad++ (Windows) or jEdit (Mac/Linux) to write the code
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开你的 Notepad++（Windows）或 jEdit（Mac/Linux）来编写代码
- en: Open up your command prompt (Windows) or terminal (Mac/Linux), and navigate
    to your project folder
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开你的命令提示符（Windows）或终端（Mac/Linux），导航到你的项目文件夹
- en: Open up your Python shell so that you can test code while you are working
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开你的 Python 命令行，这样你可以在工作时测试代码
- en: In your text editor, make a new file, and save it with the name `higher_lower.py`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的文本编辑器中创建一个新文件，并将其保存为 `higher_lower.py`。
- en: 'Then, write comments for the easy version. Single line comments in the Python
    code start with a pound sign or hashtag:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为简单版本编写注释。Python 代码中的单行注释以井号或磅符号开头：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Write the following comments in your file, leaving some spaces between each
    comment line, and then save your work:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的文件中写下以下注释，并在每行注释之间留出一些空格，然后保存你的工作：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Take a look at the following screenshot of what this will look like in your
    text editor:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下截图，了解这将在你的文本编辑器中看起来是什么样子：
- en: '![Game file set up](img/B04681_05_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![游戏文件设置](img/B04681_05_01.jpg)'
- en: Importing libraries
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入库
- en: 'For this Higher or Lower game, we will import the `random` library. This library
    has functions that we will use to choose a `random` number to start each game.
    Starting with a `random` number each time means that the game experience will
    be new for the player because they need to guess a different number each time
    they play. To import a Python library, we use the `import` statement and the name
    of the library. In your code file, replace `# imported libraries go here` and
    comment with the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个高低游戏，我们将导入 `random` 库。这个库包含我们将用于选择每个游戏开始时 `random` 数字的函数。每次都以 `random` 数字开始意味着游戏体验对于玩家来说将是新的，因为他们每次玩游戏时都需要猜测一个不同的数字。要导入
    Python 库，我们使用 `import` 语句和库的名称。在你的代码文件中，将 `# imported libraries go here` 替换并注释掉以下内容：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Importing the `random` library allows us access to many functions that create
    `random` numbers and strings in different ways. There are even ways to create
    secure strings and numbers that would work well if you have to write a password-making
    program!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 `random` 库允许我们访问许多以不同方式创建 `random` 数字和字符串的函数。甚至有创建安全字符串和数字的方法，如果你需要编写密码生成程序，这将非常适用！
- en: Setting and initializing global variables
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置和初始化全局变量
- en: Now that we have imported the library that we need, we will set our global variables.
    As a reminder, a global variable is a variable that can be used anywhere throughout
    the code file. Global variables are helpful, as we saw with our calculator, because
    we can use them to define the status or state of a program and change the state
    of the program in different functions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经导入了所需的库，我们将设置我们的全局变量。提醒一下，全局变量是可以在整个代码文件中使用的变量。正如我们在计算器中看到的那样，全局变量非常有用，因为我们可以使用它们来定义程序的状态或状态，并在不同的函数中改变程序的状态。
- en: 'For example, in our calculator, we had a global variable called `calc_on`.
    In this Higher or Lower game, we will have a few global variables that we set.
    Replace `# global variables go here` and comment with these lines:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们的计算器中，我们有一个名为 `calc_on` 的全局变量。在这个高低游戏中，我们将设置一些全局变量。将 `# global variables
    go here` 替换并注释掉以下这些行：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `game_on` variable keeps running the program. The `guesses` variable states
    how many guesses users will get. The `secret` variable is the number that the
    computer chooses at `random`, and it changes every time the game restarts.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`game_on` 变量持续运行程序。`guesses` 变量表示用户将获得的猜测次数。`secret` 变量是计算机随机选择的数字，每次游戏重新开始时都会改变。'
- en: These global variables are different than the ones we used for the previous
    chapter, though. These global variables are set to equal `None`. Why? Well, setting
    the global variables equal to none simply allows them to be reset from `None`
    or zero each time that they are called in the program. You will take a look at
    the places where we call global variables into a function, and then reset the
    value.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些全局变量与之前章节中使用的不同。这些全局变量被设置为等于 `None`。为什么？好吧，将全局变量设置为 `None` 简单地允许它们在程序中每次被调用时从
    `None` 或零重置。你将查看我们调用全局变量的地方，然后重置其值。
- en: What is a Boolean?
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是布尔值？
- en: 'We are going to be using the words **True** and **False** to help run our game
    programs in both the easy and difficult versions of the game. In computer programming,
    in most languages, these words have a special name: **Boolean**. What is a Boolean?'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 **True** 和 **False** 这两个词来帮助运行游戏的简单和困难版本。在计算机编程中，在大多数语言中，这些词有一个特殊的名称：**布尔值**。什么是布尔值？
- en: 'A Boolean can only have two values: true or false. Booleans are helpful when
    there are only these two possibilities for a variable. For example, a game can
    be on or off. We have a global variable called `game_on`. If this variable is
    set to `True`, it means that our game is running. If it is set to `False`, it
    means that our game has stopped.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值只能有两个值：true 或 false。当变量只有这两种可能性时，布尔值非常有用。例如，一个游戏可以是开启或关闭的。我们有一个名为 `game_on`
    的全局变量。如果这个变量设置为 `True`，则表示我们的游戏正在运行。如果它设置为 `False`，则表示我们的游戏已经停止。
- en: In [Chapter 4](ch04.html "Chapter 4. Making Decisions – Python Control Flows"),
    *Making Decisions – Python Control Flows*, you learned about how the comparison
    of two statements can print out the `True` or `False` statements. In this chapter,
    we are going to use the `True` and `False` conditions to control whether our program
    is running or not.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章。做出决策 – Python控制流")中，*做出决策 – Python控制流*，你学习了如何比较两个语句可以打印出`True`或`False`语句。在本章中，我们将使用`True`和`False`条件来控制程序是否运行。
- en: Building the easy version
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建简单版本
- en: Now that we have set up our global variables and imported our library, we can
    work on the logic needed to make the easy version of our game. This block of code
    tells the computer what to do if the user decides to play the easy version of
    the game.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了全局变量并导入了我们的库，我们可以着手编写实现游戏简单版本的逻辑。这段代码告诉计算机，如果用户决定玩游戏的简单版本，它应该做什么。
- en: 'First, we need to name and define the function:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要命名并定义函数：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It is good to name your function so that you remember what it does. After naming
    the function, the first thing we need is the information from our global variables.
    We will set the global variables in this function for the secret variable. We
    bring in these variables as the first two lines in the function, and we have to
    type `global` in front of the names of the variable:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 给你的函数起一个名字，这样你就能记住它做什么。在命名函数后，我们首先需要的是来自全局变量的信息。我们将在这个函数中设置秘密变量的全局变量。我们在函数的前两行引入这些变量，并且必须在变量名前键入`global`：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We have reset the `secret` global variable from `None` to an integer between
    `0` and `99` using `int (random.randrange(0,100)`). This means that when the game
    starts, a number between `0` and `99` will be selected as the secret number that
    the user must guess. Now, we need to create what people call the *win condition*.
    In other words, we need to program what winning and losing means. Let's think
    this through.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用`int(random.randrange(0,100))`将`secret`全局变量从`None`重置为一个介于`0`和`99`之间的整数。这意味着当游戏开始时，将选择一个介于`0`和`99`之间的数字作为用户必须猜测的秘密数字。现在，我们需要创建人们所说的*胜利条件*。换句话说，我们需要编程来定义胜利和失败的含义。让我们来思考这个问题。
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Can you talk through what it means to win the game and lose it? Can you draw
    a diagram? Try it yourself before copying the code!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你能解释一下赢得游戏和输掉游戏的意义吗？你能画一个图吗？在复制代码之前，先自己试一试！
- en: Hopefully, you attempted to figure out how the game will work before you looked
    at this section of the book. Solving difficult problems is a key part of building
    games, and problem solving is a skill that is developed with practice. So, we
    will now write the code that decides whether the player wins or loses.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你在查看这本书的这一部分之前，已经尝试去理解游戏是如何运作的。解决困难问题是构建游戏的关键部分，而解决问题的能力是通过实践培养的。因此，我们现在将编写决定玩家是赢还是输的代码。
- en: 'The win condition in the easy version of the game is that the user guesses
    the correct number in as many guesses as they need. To keep our game running,
    we are going to use a `while` loop, which we learned about in [Chapter 4](ch04.html
    "Chapter 4. Making Decisions – Python Control Flows"), *Making Decisions – Python
    Control Flows*. `while` loops are helpful when we are running a loop but we do
    not know how many times we need the loop to run. Our `while` loop will run as
    long as `game_on = True`. For the easy game, we are going to assume that `game_on`
    is `True`. We will write the function for `game_on` later:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏简单版本的胜利条件是用户在所需次数的猜测中猜对了正确的数字。为了使游戏继续进行，我们将使用我们在[第4章](ch04.html "第4章。做出决策
    – Python控制流")中学习的`while`循环。`while`循环在我们不知道循环需要运行多少次时非常有用。我们的`while`循环将在`game_on
    = True`的情况下运行。对于简单游戏，我们将假设`game_on`是`True`。我们稍后会编写`game_on`函数：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We have written the code to set a number and run the game. Now, we need to
    put some commands into the `while` loop so that it knows what to do. The first
    thing that we want the user to do is make a guess at the number, so we need to
    use the `raw_input()` function to get information from the user. We will add this
    input line to our function:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经编写了设置数字并运行游戏的代码。现在，我们需要在`while`循环中添加一些命令，以便它知道该做什么。我们首先希望用户猜测数字，因此我们需要使用`raw_input()`函数从用户那里获取信息。我们将添加这一输入行到我们的函数中：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Look at the last line of code that we added. The variable `guess` is set equal
    to the user's input. We are using `int()` to turn the user input from a string
    into a number because the game is generating random numbers, *NOT* random strings.
    We want to compare numbers to numbers. In fact, we *HAVE* to compare numbers to
    numbers. The program will not work if you do not add `int()` around the `raw_input()`
    function. Make sure you understand what the last line of code means before moving
    forward.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 看看我们添加的最后一行代码。变量 `guess` 被设置为用户的输入。我们使用 `int()` 将用户输入从字符串转换为数字，因为游戏正在生成随机数字，*而不是*
    随机字符串。我们想要比较数字与数字。实际上，我们*必须*比较数字与数字。如果不添加 `int()` 在 `raw_input()` 函数周围，程序将无法工作。在继续前进之前，确保你理解最后一行代码的含义。
- en: 'Also, you may notice that there is an extra space after the period in the raw
    input statement: `guess = int(input(''Guess a number. ''))`. Adding a space after
    the period and before the end of the string will tell the computer to print an
    extra space so that it will be easier for the user to read their code. See the
    following screenshots that show the difference the space makes.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可能注意到在原始输入语句中句号后有一个额外的空格：`guess = int(input('Guess a number. '))`。在句号后和字符串末尾之间添加一个空格将告诉计算机打印一个额外的空格，这样用户阅读代码会更容易。请参见以下截图，它们显示了空格带来的差异。
- en: 'Here is the code with no extra space:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是没有额外空格的代码：
- en: '![Building the easy version](img/B04681_05_02.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![构建简单版本](img/B04681_05_02.jpg)'
- en: 'Notice that the output is easier to read when we add an extra space after the
    period:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当我们句号后添加一个额外的空格时，输出更容易阅读：
- en: '![Building the easy version](img/B04681_05_03.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![构建简单版本](img/B04681_05_03.jpg)'
- en: Compare numbers
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较数字
- en: 'Our next lines of code involve decision making. We have to tell the computer
    what to do if the user gets the number too high or too low. We also have to tell
    the computer what to do when the user wins. To tell the computer what to do, we
    can perform three steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的代码行涉及决策。我们必须告诉计算机如果用户猜的数字太高或太低时该怎么做。我们还必须告诉计算机当用户获胜时该怎么做。为了告诉计算机该怎么做，我们可以执行以下三个步骤：
- en: Compare the user guess to the secret computer number.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户猜测与秘密计算机数字进行比较。
- en: Output instructions to the user based on whether they guessed too high, too
    low, or just right.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据用户猜得太高、太低还是刚好，向用户输出指示。
- en: 'To compare numbers, we will use the comparison operators that we learned about
    in [Chapter 4](ch04.html "Chapter 4. Making Decisions – Python Control Flows"),
    *Making Decisions – Python Control Flows*. We will need three operators: greater
    than (`>`), less than (`<`), and equal to (`==`).'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要比较数字，我们将使用我们在[第4章](ch04.html "第4章。做出决策 – Python 控制流")中学习的比较运算符，*做出决策 – Python
    控制流*。我们需要三个运算符：大于 (`>`)、小于 (`<`) 和等于 (`==`)。
- en: Because there are three possible choices, we need to use `if`, `elif`, and `else`
    to tell the computer what possible things can happen.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 因为有三个可能的选择，我们需要使用 `if`、`elif` 和 `else` 来告诉计算机可能发生的事情。
- en: 'First, let''s explain the logic using words. Then, we can convert this into
    code. It is good to learn to think through these problems before you start coding.
    This helps you know what outcome to expect:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们用语言解释一下逻辑。然后，我们可以将其转换为代码。在开始编码之前学会思考这些问题是很好的。这有助于你知道可以期待什么结果：
- en: '`if` the user''s number is less than the secret computer number, print `Your
    guess is too low`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if` 用户输入的数字小于秘密计算机数字，打印 `你的猜测太低了`'
- en: Or `else` (`elif`), if the user's number is higher than the secret computer
    number, print `Your guess is too high`
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者 `else` (`elif`)，如果用户的数字高于秘密计算机数字，打印 `你的猜测太高了`
- en: Or `else`, if the user's number is the same as the secret computer number, then
    we print `You win!`
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者 `else`，如果用户的数字与秘密计算机数字相同，则打印 `你赢了！`
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Can you draw, write, or imagine how this code will work before looking at the
    next section?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看下一部分之前，你能画出、写出或想象出这段代码将如何工作吗？
- en: 'Now that you have thought about the logic of the next section, here is what
    the code looks like once it is added to the function:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经思考了下一部分的逻辑，下面是代码添加到函数后看起来是什么样子：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We have seven new lines of code that we are adding for each possibility that
    the user can enter:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为用户可能输入的每个可能性添加了七行新的代码：
- en: '*If the user guess is too high*, the user must enter another number, and the
    while `loop` returns to run the code again'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如果用户猜测太高*，用户必须输入另一个数字，并且 `while` 循环返回再次运行代码'
- en: '*If the user guess is too low*, then the user must enter another number, and
    the `while` loop returns to run the code again'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如果用户猜测的数字太低*，则用户必须输入另一个数字，并且`while`循环将返回再次运行代码'
- en: Note
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Since this is the easy version, the `while` loop will run until the user finally
    guesses the correct number no matter how many incorrect guesses the user makes.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于这是简单版本，`while`循环将一直运行，直到用户最终猜到正确的数字，无论用户犯了多少次错误。
- en: '*When the user guess is the same as the computer number*, then the program
    prints `You win!` and calls a function called `play_again()`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*当用户猜测的数字与计算机的数字相同时*，程序将打印`You win!`并调用名为`play_again()`的函数'
- en: play_again()
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: play_again()
- en: There is a function called `play_again()` that we added to the end of the `difficulty_level_easy()`
    function. We are calling one function inside of another, which we have done earlier.
    However, we have to make this `play_again()` function because it doesn't exist
    yet.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`difficulty_level_easy()`函数的末尾添加了一个名为`play_again()`的函数。我们在另一个函数内部调用了一个函数，我们之前已经这样做过。然而，我们必须创建这个`play_again()`函数，因为它还不存在。
- en: 'The `play_again()` function will ask the users whether they want to play the
    game again and then make a decision about running the program. When the `while`
    loop finally runs the `play_again()` function, it ends the loop of code in the
    `difficulty_level_easy()` function and goes on to run its own code. In the next
    section of the chapter, we will create the functions needed to start, stop, and
    play again:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`play_again()`函数将询问用户是否想再次玩游戏，然后决定是否运行程序。当`while`循环最终运行`play_again()`函数时，它将结束`difficulty_level_easy()`函数中的代码循环，并继续运行其自己的代码。在下一章的下一部分，我们将创建启动、停止和再次玩游戏的函数：'
- en: '![play_again()](img/B04681_05_04.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![play_again()](img/B04681_05_04.jpg)'
- en: Start, stop, play again
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始、停止、再次玩
- en: 'So, if you are here, it is because you built the easy version of the game,
    and you want to test it out, play it, and see whether it actually works. If you
    try running the code right now, one of two things will happen: if it is perfect,
    then nothing will happen. If you have a problem in your code, you will get an
    error message. Either way, you cannot run the program with the code as it is right
    now because your program has no way to start itself!'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你在这里，是因为你构建了游戏的简单版本，并想测试它，玩一玩，看看它是否真的能工作。如果你现在尝试运行代码，两种情况之一会发生：如果它是完美的，那么什么也不会发生。如果你在代码中有问题，你会得到一个错误信息。无论如何，你现在不能运行程序，因为你的程序没有启动自己的方法！
- en: 'Let''s build some helper functions that will start our code and allow us to
    play the game again. We will write two helper functions: `start_game()` and `play_again()`.
    We can end the loop and change the `game_on` Boolean to `False` at the end of
    the `start_game()` and `play_again()` functions.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一些辅助函数，这些函数将启动我们的代码，并允许我们再次玩游戏。我们将编写两个辅助函数：`start_game()`和`play_again()`。我们可以在`start_game()`和`play_again()`函数的末尾结束循环，并将`game_on`布尔值更改为`False`。
- en: start_game()
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: start_game()
- en: 'In your `higher_lower.py` file, where you wrote the `# function to start game`
    comment, write this instead:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`higher_lower.py`文件中，在写了`# function to start game`注释的地方，写上以下内容：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We have defined the function that will start our game. The next step is to
    invoke (use) our `game_on` global variable, and then set the variable to `True`.
    This tells the function that the game is in the `on` state:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经定义了一个函数，它将启动我们的游戏。下一步是调用（使用）我们的`game_on`全局变量，并将变量设置为`True`。这告诉函数游戏处于`开启`状态：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once we tell the computer to start, we need the user to tell the computer what
    they want to do. Using the `raw_input()` function, we are ready to get information
    from our player. We will make a variable called `level`. That variable will take
    input from the user. We will give the user three choices: easy, hard, or quit.
    Add the following lines of code in your file, and make sure to save your work:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们告诉计算机开始，我们需要用户告诉计算机他们想做什么。使用`raw_input()`函数，我们准备好从我们的玩家那里获取信息。我们将创建一个名为`level`的变量。该变量将从用户那里获取输入。我们将给用户三个选择：简单、困难或退出。在你的文件中添加以下代码行，并确保保存你的工作：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that we have information from the user stored in the `level` variable, we
    can use it to inform the comparison operators, and we can use the `if`/`elif`
    logic to make a decision about what to do in our program.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将用户的信息存储在`level`变量中，我们可以使用它来通知比较运算符，并且我们可以使用`if`/`elif`逻辑来决定在程序中做什么。
- en: 'Here are some examples:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些例子：
- en: If the user types `easy`, then the computer will run the `difficulty_level_easy()`
    function
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户输入`easy`，则计算机将运行`difficulty_level_easy()`函数
- en: Or else (`elif`), if the user types `hard`, then the computer will run the hard
    version of the game (`difficulty_level_hard() function`)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者（`elif`），如果用户输入`hard`，则计算机将运行游戏的困难版本（`difficulty_level_hard()`函数）
- en: Or else (`elif`), if the user decides to quit, then we will stop the program
    from running by changing the Boolean of `game_on` to equal `False`
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者（`elif`），如果用户决定退出，我们将通过将`game_on`布尔值设置为`False`来停止程序运行
- en: 'Adding logic for the computer to start the correct game based on the user choice
    will take six new lines of code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为计算机根据用户选择启动正确的游戏添加逻辑需要六行新的代码：
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: An important thing to notice about the last line of code is that we changed
    the `game_on` global variable to `False`, causing the program to end. Also, notice
    how our `start_game()` function calls the other functions inside of it. So, the
    `difficulty_level_easy()` function that we made starts to run when someone types
    easy.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 关于最后一行代码的一个重要注意事项是我们将全局变量`game_on`更改为`False`，导致程序结束。注意我们的`start_game()`函数如何调用其内部的其他函数。因此，当我们输入`easy`时，我们制作的`difficulty_level_easy()`函数开始运行。
- en: play_again()
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: play_again()
- en: The last helper function is the `play_again()` function. This function, which
    we used at the end of the `difficulty_level_easy()` function, allows the user
    to make a choice of whether to play again or not. By now, you are probably starting
    to see a pattern with regard to what we do with information from `raw_input` in
    order to help the computer make choices. We use `if`, `elif`, and `else` to compare
    the user's choice to a set of choices that we have programmed. Then, we program
    the result of the choice to be what we want.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个辅助函数是`play_again()`函数。这个函数，我们在`difficulty_level_easy()`函数的末尾使用，允许用户选择是否再玩一次。到现在，你可能开始看到我们如何使用`raw_input`中的信息来帮助计算机做出选择。我们使用`if`、`elif`和`else`来比较用户的选项与我们已编程的选项集。然后，我们编程选择的后果为我们想要的结果。
- en: 'For the `play_again()` function, the user will be asked whether they would
    like to play again. We will prompt the user to type `Yes` or `No`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`play_again()`函数，用户将被询问是否想要再玩一次。我们将提示用户输入`Yes`或`No`：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With our program, we are only accepting two user choices so that we can use
    `if` and `else` to explain what should happen. If the user types `Yes`, then the
    `start_game()` function will run and our program will continue. If the user types
    `No`, then the `game_on` variable will be set to `False` and the program will
    stop. So, we will add four more lines of code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的程序中，我们只接受两个用户选择，这样我们就可以使用`if`和`else`来解释应该发生什么。如果用户输入`Yes`，则`start_game()`函数将运行，我们的程序将继续。如果用户输入`No`，则`game_on`变量将被设置为`False`，程序将停止。因此，我们将添加四行更多的代码：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Play testing
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 游戏测试
- en: 'Once you have made the `play_again()` function, you only need to add one more
    line of code to test the easy version of your game! The last line of your code
    file will be calling the `start_game()` function. Add this code to the bottom
    of your game file:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你编写了`play_again()`函数，你只需要再添加一行代码来测试你游戏的简单版本！你的代码文件最后一行将调用`start_game()`函数。将以下代码添加到你的游戏文件底部：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Once the `start_game()` line is added, you will be able to test the easy version
    of your game. Now is a good point to stop, save, and test. Play the game many
    times to make sure you fully understand how it works. Ask others to play it as
    well.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了`start_game()`行，你将能够测试你游戏的简单版本。现在是停止、保存和测试的好时机。多次玩游戏以确保你完全理解它的工作原理。也可以请其他人来玩。
- en: You might decide to change some of the input questions to add humor to make
    them funny or get different results. It is up to you to test your code changes
    and to make sure they work!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能决定更改一些输入问题以增加幽默感，使它们变得有趣或得到不同的结果。测试你的代码更改并确保它们工作，这取决于你！
- en: '![Play testing](img/B04681_05_05.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![游戏测试](img/B04681_05_05.jpg)'
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Save your work and test your code! Go to your terminal and navigate to your
    project folder.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的工作并测试你的代码！前往你的终端并导航到你的项目文件夹。
- en: 'When you type the following code line, your code should begin to run inside
    of your command prompt or terminal. To test the code, make sure you answer `easy`
    so that you can run the version of the code that you have made:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入以下代码行时，你的代码应该开始在命令提示符或终端中运行。为了测试代码，确保你输入`easy`，这样你就可以运行你制作的代码版本：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![Play testing](img/B04681_05_06.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![游戏测试](img/B04681_05_06.jpg)'
- en: Building the hard version
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建困难版本
- en: The hard version of the game uses exactly the same *win conditions* as the easy
    version of the game. There is only one difference.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏的困难版本与简单版本的*胜利条件*完全相同。只有一个区别。
- en: '*The hard version only allows the player to make three guesses before it resets
    the game!* Therefore, we can use a `for` loop to define that we only want the
    program to run three times if the player does not guess the correct number.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*困难版本只允许玩家在游戏重置之前进行三次猜测！因此，我们可以使用`for`循环来定义，如果玩家没有猜出正确的数字，程序只运行三次。*'
- en: 'First, we will define the function for the hard version of the game:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将定义游戏的困难版本函数：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we will add our global variables. In the hard version of the game, we
    need to use the global variable `guesses`, which we will set to three for this
    program:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加全局变量。在游戏的困难版本中，我们需要使用全局变量`guesses`，我们将将其设置为`3`，用于这个程序：
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, we need to create the logic. Here, we will use a `for` loop so that our
    loop only runs the number of times that we wish it to run. So, we will add a line
    of code that says `i` in `range (guesses)`, which means that for every number
    in the range of numbers of guesses, run our code.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建逻辑。在这里，我们将使用`for`循环，这样我们的循环只运行我们希望它运行的次数。所以，我们将添加一行代码，即`i in range(guesses)`，这意味着对于猜测数范围内的每一个数字，运行我们的代码。
- en: 'First, let''s add this line of code, and then we will go over each part:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们添加这一行代码，然后我们将逐一讲解每个部分：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The letter `i` is used to mean one single number. The word `range` is used to
    tell the computer to go over the total number of `guesses`, which we set to `3`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 字母`i`用来表示一个单独的数字。单词`range`用来告诉计算机遍历猜测的总数，我们将其设置为`3`。
- en: Next, we will write the code to get user input, compare the user number to the
    secret computer number, and use the `if`/`elif` logic to print output messages
    to the user and run the loop again.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写代码以获取用户输入，将用户数字与秘密计算机数字进行比较，并使用`if`/`elif`逻辑向用户打印输出消息并再次运行循环。
- en: Before you copy the code of the `for` loop into your program, figure out if
    you can write, draw, or explain how the `for` loop will work differently than
    the `while` loop did. If you can understand the differences, you will learn a
    lot more about how your `for` loop works.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在你将`for`循环的代码复制到你的程序之前，想想你能否写出、画出或解释`for`循环将如何与`while`循环的工作方式不同。如果你能理解这些差异，你将学会更多关于你的`for`循环是如何工作的知识。
- en: Comparing numbers – the hard version
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较数字 – 困难版本
- en: 'What exactly is the logic when using a `for` loop instead of a `while` loop?
    As we noted earlier, the `for` loop is more defined to run a specific number of
    times. So, with our for `i` in `range(guesses)`, we are really saying this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`for`循环而不是`while`循环的逻辑究竟是什么？正如我们之前提到的，`for`循环更适合运行特定次数的操作。所以，在我们的`for i in
    range(guesses)`中，我们实际上是在说：
- en: For the first guess, do this thing
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于第一次猜测，做这件事
- en: For the second guess, do this thing
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于第二次猜测，做这件事
- en: For the third guess, if the player is still incorrect, stop the `for` loop,
    print the message, and run the `play_again()` function
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于第三次猜测，如果玩家仍然猜错，停止`for`循环，打印消息，并运行`play_again()`函数
- en: 'Now that you have a better concept of the logic, let''s add these lines of
    code to the `for` loop in our `difficulty_level_hard()` function:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对逻辑有了更好的理解，让我们将这些代码行添加到`difficulty_level_hard()`函数中的`for`循环里：
- en: '[PRE20]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As you can see, in the first line of code beneath the `for` loop, we use a `raw_input()`
    function that we assign to the variable `guess` to get information from the user.
    Then, we make *win conditions* for the hard version of the game. In this case,
    if `i` (the number of `guesses`) is equal to `2`, then the game restarts. This
    is because the range function we are using starts counting from `zero`, so the
    three computer numbers are `0`, `1`, and `2`. The first two lines of our `for`
    loop use a comparison operator (`==`) to check whether the user has had too many
    guesses. If the user *HAS* tried too many times, then the loop ends and the `Game
    over. Too many guesses` message is printed.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，在`for`循环下面的第一行代码中，我们使用了一个`raw_input()`函数，并将其分配给变量`guess`以从用户那里获取信息。然后，我们为游戏的困难版本设置*胜利条件*。在这种情况下，如果`i`（猜测次数）等于`2`，则游戏重新开始。这是因为我们使用的`range`函数从`0`开始计数，所以计算机的三个数字是`0`、`1`和`2`。我们的`for`循环的前两行使用比较运算符（`==`）来检查用户是否猜得太多次。如果用户*已经尝试了太多次数*，则循环结束，并打印出“游戏结束。猜测次数过多”的消息。
- en: We have decided what happens if the user has too many guesses in the `for` loop.
    Now, we will define what happens if a player is too high or too low in terms of
    their guess. We use the same comparison operators of greater than (`>`), less
    than (`<`), and equal to (`==`) that we used in the easy version, and we print
    a message if the user is too high or too low.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经决定了如果用户在`for`循环中猜得太多次会发生什么。现在，我们将定义如果玩家猜得太高或太低会发生什么。我们使用与简单版本中相同的比较运算符，即大于（`>`）、小于（`<`）和等于（`==`），如果用户猜得太高或太低，我们会打印一条消息。
- en: 'Notice that we call the `play_again()` function twice. We offer the user the
    chance to `play_again()` if they lose by guessing too many times or when they
    win. Losing and winning are both times when the `for` loop will stop running,
    so we need to make sure we have added the `play_again()` function after both of
    these conditions:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们调用了两次`play_again()`函数。我们给用户机会`play_again()`，如果他们因为猜得太多次而输掉，或者赢了。输和赢都是`for`循环停止运行的时候，所以我们需要确保我们在这两个条件之后都添加了`play_again()`函数：
- en: '![Comparing numbers – the hard version](img/B04681_05_07.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![比较数字 – 困难版本](img/B04681_05_07.jpg)'
- en: Play test the whole program!
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试整个程序！
- en: 'Now you get to see exactly how you did! Go to your terminal and run your program
    again by typing the following command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到你做得怎么样了！前往你的终端，通过输入以下命令再次运行你的程序：
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'First, make sure that the program works. If you get errors right away, double-check
    your code to make sure it does not have any problems, such as:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保程序能正常工作。如果你立即遇到错误，请仔细检查你的代码，确保它没有问题，例如：
- en: spacing or indents
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空格或缩进
- en: typos
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错别字
- en: syntax (punctuation)
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法（标点符号）
- en: 'These are some common problems that people have with their programs. Usually,
    you will get an error message called `Trace` or `stacktrace` that will tell you
    what line in your code is causing the problem. Here is an example of what happens
    when the user types the word `three` instead of the number `3`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是人们在他们的程序中遇到的一些常见问题。通常，你会得到一个名为`Trace`或`stacktrace`的错误信息，它会告诉你代码中的哪一行导致了问题。以下是一个用户输入单词`three`而不是数字`3`时发生的情况的例子：
- en: '![Play test the whole program!](img/B04681_05_08.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![测试整个程序！](img/B04681_05_08.jpg)'
- en: 'There are some things called *test cases* that you will want to try before
    letting other people play your game. Good programmers need to think about how
    their program works, and they also need to think about the things a user can do
    that might break the program. The following are some tests you can run. Some might
    break your program:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在让其他人玩游戏之前，你可能会想尝试一些称为*测试用例*的东西。优秀的程序员需要考虑他们的程序是如何工作的，他们还需要考虑用户可能会做的可能会破坏程序的事情。以下是一些你可以运行的测试。有些可能会破坏你的程序：
- en: Does your game work in both the easy *AND* the hard version?
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的游戏在简单*和*困难版本中都能工作吗？
- en: What happens if you type `quit`?
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你输入`quit`会发生什么？
- en: What happens if you enter a number higher than 99?
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你输入一个大于99的数字会发生什么？
- en: What happens when you type the word `three` instead of the number `3`?
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你输入单词`three`而不是数字`3`时会发生什么？
- en: Can you force the program to print errors (there are ways to make your program
    have errors, so be creative)? If so, notice your error messages, and think about
    how to prevent errors.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你能强迫程序打印错误信息吗（有让程序出错的方法，所以要有创意）？如果是这样，注意你的错误信息，并思考如何防止错误。
- en: There are some errors that you might not understand, and that is okay. You can
    always perform an Internet search to look up the error message and check what
    other people have learned about it.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到一些你不理解的错误，这是正常的。你总是可以执行网络搜索来查找错误信息，并查看其他人对此有何了解。
- en: 'Once you have tested the game and feel ready to share it, ask others to play
    it and watch as they interact with your game. Ask yourself some questions while
    you watch your user play:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你测试了游戏并觉得准备好分享它，请其他人来玩并观察他们如何与你的游戏互动。在你观察用户玩游戏的同时，问自己一些问题：
- en: What was easy for the user to understand?
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户容易理解的是什么？
- en: What was hard for the user to understand?
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户难以理解的是什么？
- en: What errors did the user make?
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户犯了什么错误？
- en: How could I change the game code to make the game better?
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我该如何修改游戏代码来使游戏变得更好？
- en: 'As a programmer, you will learn how to be a creative problem solver. If you
    see something in this program that you want to rewrite, you should try it! Keep
    a backup copy of your working code, and then start to experiment with some different
    options. Some examples you can use are as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，你将学习如何成为一个有创造力的问题解决者。如果你在这个程序中看到你想重写的东西，你应该试试！保留你工作代码的备份副本，然后开始尝试一些不同的选项。以下是一些你可以使用的示例：
- en: Make the range of the hard program larger so that it is more difficult for the
    user to guess correctly (`0, 1000`)
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将困难程序的取值范围扩大，以便用户更难猜对正确答案（`0, 1000`）
- en: Add your own personal touch to each message
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给每条消息添加你自己的个人风格
- en: Add a variable to take the username and print it
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个变量来获取用户名并打印它
- en: 'Each of the preceding examples are ways in which you can challenge yourself
    and take the program further! Check your program against the following screenshot,
    and figure out whether you can answer some quick questions about what you learned
    in this chapter:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 上述每个示例都是你可以挑战自己并进一步扩展程序的方式！将你的程序与以下截图进行对比，并找出你是否能回答一些关于本章所学内容的快速问题：
- en: '![Play test the whole program!](img/B04681_05_09.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![测试整个程序！](img/B04681_05_09.jpg)'
- en: A quick task for you
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个快速的任务给你
- en: Q1\. What is a Boolean?
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 布尔值是什么？
- en: A statement that is either `True` or `False`
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个要么是`True`要么是`False`的语句
- en: A statement with many possible outcomes
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具有许多可能结果的语句
- en: Used as a variable name
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用作变量名
- en: Used as a place
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用作占位符
- en: Q2\. Why are global variables helpful?
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. 为什么全局变量很有用？
- en: They are limited to what they can do
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们的功能是有限的
- en: They can be used in any function in the file where they are set
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们可以在设置它们的文件中的任何函数中使用
- en: They can be changed inside the function
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们可以在函数内部更改
- en: Choice 2 and 3
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择2和3
- en: Q3\. `for` loops are similar to `while` loops. How is a `for` loop different
    from a `while` loop?
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Q3. `for`循环与`while`循环类似。`for`循环与`while`循环有什么不同？
- en: '`for` loops are used to loop a specified number of times'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`for`循环用于循环指定次数'
- en: '`for` loops are used only for text'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`for`循环仅用于文本'
- en: '`for` loops are used only for numbers'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`for`循环仅用于数字'
- en: '`for` loops can only work with dictionaries'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`for`循环只能与字典一起使用'
- en: Q4\. What would be a good time to use a `while` loop in a game?
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Q4. 在游戏中何时使用`while`循环是一个好时机？
- en: To run a game a specified number of times
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行指定次数的游戏
- en: To run a game forever
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 永远运行游戏
- en: To keep a game going while a certain condition is true
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当某个条件为真时保持游戏进行
- en: To end the game
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结束游戏
- en: Q5\. What symbol is used to write comments in the code that are not a part of
    the code?
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Q5. 在代码中，用于编写非代码部分的符号是什么？
- en: '?'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '?'
- en: '*'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*'
- en: ()
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ()
- en: '#'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '#'
- en: Summary
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to build a game using loops and logic. The game,
    Higher or Lower, has an easy version and a difficult version. Input from the player
    is used by the game to make decisions about what code will run next.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用循环和逻辑构建游戏。这个游戏，高低游戏，有简单版本和困难版本。游戏使用玩家的输入来决定接下来将运行什么代码。
- en: In the next chapter, we will learn about how to work with some data, including
    how to store and retrieve information. These skills will help us to learn how
    to do things such as ask for player names, include player names in our games,
    and store scores in the program. All of these skills are important to build a
    complete and interesting game experience.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何处理一些数据，包括如何存储和检索信息。这些技能将帮助我们学习如何做一些事情，比如请求玩家姓名，在我们的游戏中包含玩家姓名，并在程序中存储分数。所有这些技能对于构建一个完整且有趣的游戏体验都至关重要。
