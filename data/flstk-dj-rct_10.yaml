- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: User Profiles
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户个人资料
- en: A social media application should allow users to consult other user profiles.
    From another view, it should also allow an authenticated user to edit their information,
    such as their last name, first name, and avatar.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个社交媒体应用应允许用户查看其他用户的个人资料。从另一个角度来看，它还应允许认证用户编辑他们的信息，例如他们的姓氏、名字和头像。
- en: 'In this chapter, we will focus on adding CRUD features on the user side. We’ll
    build a page to visualize a user profile and a page that allows a user to edit
    their information. This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于在用户端添加CRUD功能。我们将构建一个页面来可视化用户个人资料，并构建一个允许用户编辑他们信息的页面。本章将涵盖以下主题：
- en: Listing profiles on the home page
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主页上列出个人资料
- en: Displaying user information on their profile page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在个人资料页面上显示用户信息
- en: Editing user information
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑用户信息
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Make sure to have VS Code and an updated browser installed and configured on
    your machine. You can find all the code files used in this chapter at [https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap10](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap10).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的机器上已安装并配置了VS Code和更新的浏览器。您可以在[https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap10](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap10)找到本章中使用的所有代码文件。
- en: Listing profiles on the home page
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在主页上列出个人资料
- en: 'Before building the pages and components to display user information and allow
    user information modification, we need to add a component to list some profiles
    on the home page like so:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建显示用户信息和允许修改用户信息的页面和组件之前，我们需要在主页上添加一个组件来列出一些个人资料，如下所示：
- en: '![Figure 10.1 – Listing profiles](img/Figure_10.01_B18221.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – 列出个人资料](img/Figure_10.01_B18221.jpg)'
- en: Figure 10.1 – Listing profiles
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 列出个人资料
- en: 'Follow these steps to add the component for listing profiles on the home page:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加主页上列出个人资料的组件：
- en: In the `src/components` file, create a new directory called `profile`. This
    directory will contain the code for all components related to users or profiles.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件中，创建一个名为`profile`的新目录。这个目录将包含所有与用户或个人资料相关的组件代码。
- en: 'In the newly created directory, create a file called `ProfileCard.jsx` and
    add the following content:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的目录中，创建一个名为`ProfileCard.jsx`的文件，并添加以下内容：
- en: src/components/profile/ProfileCard.jsx
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/profile/ProfileCard.jsx
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `ProfileCard` component will be used to display information about a profile
    and redirect the user to the profile page.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProfileCard`组件将被用来显示个人资料信息并重定向用户到个人资料页面。'
- en: 'Next, we will add the code logic concerning the navigation to the profile page
    and the props object destructuration:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加有关导航到个人资料页面和props对象解构的代码逻辑：
- en: src/components/profile/ProfileCard.jsx
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/profile/ProfileCard.jsx
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, we retrieved the user object from the props and we also
    added a function to handle the navigation to the user profile.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们从props中检索了用户对象，并添加了一个处理导航到用户个人资料页面的函数。
- en: 'Next, let’s write the JSX that will display information to the user:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们编写将向用户显示信息的JSX：
- en: src/components/profile/ProfileCard.jsx
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/profile/ProfileCard.jsx
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `ProfileCard` component is written. We can now import it into the `Home.jsx`
    page and use it. But before that, we need to retrieve five profiles from the API
    and loop through the results to have the wanted display:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProfileCard`组件已经编写完成。我们现在可以将其导入到`Home.jsx`页面并使用它。但在那之前，我们需要从API中检索五个个人资料，并遍历结果以实现所需的显示：'
- en: src/pages/Home.jsx
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/Home.jsx
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code, the profiles are only shown if the `profiles.data` object
    is not null or undefined. This is why we are writing the `profiles.data && profiles.data.results.map()`
    inline JSX condition.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，只有当`profiles.data`对象不为null或undefined时，才会显示个人资料。这就是为什么我们编写了`profiles.data
    && profiles.data.results.map()`内联JSX条件。
- en: Once it’s done, reload the home page and you’ll have a new component available,
    listing a maximum of five profiles.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，重新加载主页，您将有一个新的组件可用，最多列出五个个人资料。
- en: Try to click on the **See Profile** button. You will be redirected to a white
    page. This is normal because we haven’t written routing for the **Profile** page
    yet.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试点击**查看个人资料**按钮。您将被重定向到一个空白页面。这是正常的，因为我们还没有为**个人资料**页面编写路由。
- en: 'In the next section, we will be creating components to display information
    about a profile, like so:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将创建用于显示个人资料信息的组件，如下所示：
- en: '![Figure 10.2 – The user profile page](img/Figure_10.02_B18221.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – 用户个人资料页面](img/Figure_10.02_B18221.jpg)'
- en: Figure 10.2 – The user profile page
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 用户资料页面
- en: 'We will also allow the user to edit their information, like so:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也将允许用户编辑他们的信息，如下所示：
- en: '![Figure 10.3 – The user edit form and page](img/Figure_10.03_B18221.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3 – 用户编辑表单和页面](img/Figure_10.03_B18221.jpg)'
- en: Figure 10.3 – The user edit form and page
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 用户编辑表单和页面
- en: Displaying user information on their profile page
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在他们的资料页面上显示用户信息
- en: In this section, we will create a profile page to display user information.
    We will build a component to display user details and the posts concerning this
    user, but also we will create a page displaying a form for editing user information.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个资料页面来显示用户信息。我们将构建一个组件来显示用户详情和与该用户相关的帖子，同时我们还将创建一个显示编辑用户信息表单的页面。
- en: 'Before starting to build the user profile page, we have to create some components.
    On the profile page, we are not only displaying information but also the list
    of posts created by the user. Let’s start by writing the `ProfileDetails.jsx`
    component (*Figure 10**.4*):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始构建用户资料页面之前，我们必须创建一些组件。在资料页面上，我们不仅显示信息，还显示用户创建的帖子列表。让我们先编写`ProfileDetails.jsx`组件（*图10*.4）：
- en: '![Figure 10.4 – The ProfileDetails component](img/Figure_10.04_B18221.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4 – ProfileDetails组件](img/Figure_10.04_B18221.jpg)'
- en: Figure 10.4 – The ProfileDetails component
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – ProfileDetails组件
- en: 'Here’s the wireframe to help you with the structure of the component:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是帮助您了解组件结构的线框图：
- en: '![Figure 10.5 – The wireframe of the ProfileDetails component](img/Figure_10.05_B18221.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图10.5 – ProfileDetails组件的线框图](img/Figure_10.05_B18221.jpg)'
- en: Figure 10.5 – The wireframe of the ProfileDetails component
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 – ProfileDetails组件的线框图
- en: In the `ProfileDetails` component, we are displaying some avatars. At this point
    of the project, it’s time to get rid of the `randomAvatar` function. It has been
    useful up until this point of the project, but we are making a lot of requests
    and some state change within the application just calls the function again that
    returns another random image, which is not something a user of the application
    might want to see.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ProfileDetails`组件中，我们正在显示一些头像。在这个项目阶段，是时候摆脱`randomAvatar`函数了。它在这个项目阶段一直很有用，但我们正在发出很多请求，应用程序中的某些状态变化只是再次调用该函数，返回另一个随机图像，这不是应用程序用户可能希望看到的。
- en: Let’s start using the value of the avatar field on the user object but before
    that, we have to configure Django to deal with media upload and the avatar field
    on the user object.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用用户对象上的头像字段值，但在那之前，我们必须配置Django以处理媒体上传和用户对象上的头像字段。
- en: The social media application uses the `avatar` field, which represents a link
    to a file that the browser can make a request on and receive the image. Django
    supports file uploading; we just need to add some configuration to make it effective.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 社交媒体应用程序使用`avatar`字段，它代表一个浏览器可以发出请求并接收图像的文件链接。Django支持文件上传；我们只需添加一些配置使其生效。
- en: 'Inside the `settings.py` file of the project, add the following lines at the
    end of the project:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的`settings.py`文件中，在项目末尾添加以下行：
- en: CoreRoot/settings.py
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: CoreRoot/settings.py
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `MEDIA_URL` setting allows us to write the URL that will be used to retrieve
    uploaded files. The `MEDIA_ROOT` setting tells Django where to stock the files
    and also checks the upload files when returning the URL of a file. In the case
    of this project, an avatar field will have this URL, for example: `http://localhost:8000/media/user_8380ca50-ad0f-4141-88ef-69dc9b0707ad/avatar-rogemon.png`.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEDIA_URL`设置允许我们编写用于检索上传文件的URL。`MEDIA_ROOT`设置告诉Django在哪里存储文件，并在返回文件URL时检查上传文件。在本项目中，头像字段将具有此URL，例如：`http://localhost:8000/media/user_8380ca50-ad0f-4141-88ef-69dc9b0707ad/avatar-rogemon.png`。'
- en: 'For this configuration to work, you will need to create a directory called
    `uploads` at the root of the Django project. You will also need to install the
    Pillow library, which contains all the basic tools for image processing functionality:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使此配置生效，您需要在Django项目的根目录下创建一个名为`uploads`的目录。您还需要安装Pillow库，它包含所有基本的图像处理功能工具：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After that, let’s slightly modify the avatar field on the user model. Inside
    the `core/user/models.py`, add a function before the `UserManager` manager class:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，让我们稍微修改一下用户模型中的头像字段。在`core/user/models.py`文件中，在`UserManager`管理类之前添加一个函数：
- en: core/user/models.py
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: core/user/models.py
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This function will help re-write the path for the upload of a file. Instead
    of going directly into the `uploads` directory, the avatar is stocked according
    to a user. It can help with the better organization of files in your system. After
    adding the function, we can tell Django to use it for the default upload path:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将帮助重写文件上传的路径。而不是直接进入 `uploads` 目录，头像将根据用户存储。这可以帮助更好地组织系统中的文件。在添加此函数后，我们可以告诉
    Django 使用它作为默认上传路径：
- en: core/user/models.py
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: core/user/models.py
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In Django, the `ImageField` field is used to store image files in a database.
    It is a subclass of `FileField`, which is a generic field for storing files, so
    it has all the attributes of `FileField` as well as some additional attributes
    specific to images. The `upload_to` attribute specifies the directory where the
    image files will be stored.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Django 中，`ImageField` 字段用于在数据库中存储图像文件。它是 `FileField` 的子类，`FileField` 是用于存储文件的通用字段，因此它具有
    `FileField` 的所有属性以及一些特定于图像的附加属性。`upload_to` 属性指定了图像文件将存储的目录。
- en: 'Now, run the `makemigrations` command and make sure to migrate the changes
    to the database:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行 `makemigrations` 命令，并确保将更改迁移到数据库中：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With this configuration done, our API can accept avatar uploading for the user.
    However, some users won’t have an avatar and we have been handling it pretty badly
    from the frontend side. Let’s set up a default avatar that will be used for users
    without an avatar.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此配置后，我们的 API 可以接受用户上传头像。然而，一些用户可能没有头像，而我们从前端处理这个问题的方式相当糟糕。让我们设置一个默认头像，用于没有头像的用户。
- en: Configuring the default avatar
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置默认头像
- en: 'To configure the default avatar, follow these steps:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置默认头像，请按照以下步骤操作：
- en: 'In the `settings.py` file of the Django project, add the following line at
    the end of the file:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Django 项目的 `settings.py` 文件中，在文件末尾添加以下行：
- en: CoreRoot/settings.py
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: CoreRoot/settings.py
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The avatar image looks as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 头像图片如下所示：
- en: '![](img/Figure_10.06_B18221.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_10.06_B18221.jpg)'
- en: 'Image 10.6: The default image'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图像 10.6：默认图片
- en: 'Once you have added `DEFAULT_AVATAR_URL` to the `settings.py` file, we will
    slightly modify the `UserSerializer` representation method to return the `DEFAULT_AVATAR_URL`
    value by default if the avatar field is none:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你将 `DEFAULT_AVATAR_URL` 添加到 `settings.py` 文件中，我们将稍微修改 `UserSerializer` 的表示方法，以便在头像字段为空时默认返回
    `DEFAULT_AVATAR_URL` 值：
- en: Core/user/serializers.py
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Core/user/serializers.py
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let’s explain what we are doing in the preceding code block. First, we need
    to check whether the avatar value exists. If that’s not the case, we will return
    the default avatar. By default, Django doesn’t return the actual route of the
    file with the domain. That’s why in this case, if we are in a development environment,
    we return an absolute URL of the avatar. In the last part of this book, we will
    deploy the application on a production server, then we will use **AWS S3** for
    file storing.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释一下前面代码块中我们在做什么。首先，我们需要检查头像值是否存在。如果不存在，我们将返回默认头像。默认情况下，Django 不返回带有域的实际文件路径。这就是为什么在这种情况下，如果我们处于开发环境，我们将返回头像的绝对
    URL。在本书的最后一部分，我们将部署应用程序到生产服务器，然后我们将使用 **AWS S3** 进行文件存储。
- en: With the fix done on the backend, we can confidently modify the frontend application
    by now including the avatar field. It’s quite simple and a little bit of refactoring.
    Remove the `randomAvatar` function code from the React application and replace
    the values with `user.avatar`, `post.author.avatar`, or `comment.author.avatar`,
    depending on the file and the component.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端完成修复后，我们现在可以放心地修改前端应用程序，包括头像字段。这相当简单，只需要一点重构。从 React 应用程序中删除 `randomAvatar`
    函数代码，并用 `user.avatar`、`post.author.avatar` 或 `comment.author.avatar` 替换值，具体取决于文件和组件。
- en: With those small configurations done, check the **Home** page; you should have
    a similar result.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成那些小配置后，检查**主页**；你应该会有一个类似的结果。
- en: '![Figure 10.7 – The Home page with a default avatar](img/Figure_10.07_B18221.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 10.7 – 带有默认头像的主页](img/Figure_10.07_B18221.jpg)'
- en: Figure 10.7 – The Home page with a default avatar
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图像 10.7 – 带有默认头像的主页
- en: Great! Let’s move to creating the **Profile** page so that our Django application
    is ready to accept file uploads.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！让我们继续创建**个人资料**页面，以便我们的 Django 应用程序准备好接受文件上传。
- en: Writing the ProfileDetails component
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写 ProfileDetails 组件
- en: 'To create the `ProfileDetails` component, we have to create the file that will
    contain the code for this component, add the logic for the navigation, write the
    UI (JSX), and import the component on the **Profile** page:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建`ProfileDetails`组件，我们必须创建包含此组件代码的文件，添加导航逻辑，编写UI（JSX），并在**个人资料**页面上导入组件：
- en: 'In the `src/components/profile` directory, create a new file called `ProfileDetail.jsx`.
    This file will contain the code for the `ProfileDetails` component:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components/profile`目录下，创建一个名为`ProfileDetail.jsx`的新文件。这个文件将包含`ProfileDetails`组件的代码：
- en: src/components/profile/ProfileDetails.jsx
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/profile/ProfileDetails.jsx
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here, we just need to destruct the props object to retrieve the user object,
    declare the navigate variable to use the `useNagivate` Hook, and finally handle
    the case when the user object is undefined or null:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们只需要解构props对象来检索用户对象，声明navigate变量以使用`useNagivate`钩子，并最终处理用户对象为undefined或null的情况：
- en: src/components/profile/ProfileDetaisl.jsx
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/profile/ProfileDetaisl.jsx
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can confidently write the JSX logic now:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以自信地编写JSX逻辑：
- en: src/components/profile/ProfileDetails.jsx
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/profile/ProfileDetails.jsx
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now that the component is written, create a new file called `Profile.jsx` in
    the `src/pages` directory. This file will contain the code and logic for the **Profile**
    page:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在组件编写完毕，请在`src/pages`目录下创建一个名为`Profile.jsx`的新文件。这个文件将包含**个人资料**页面的代码和逻辑：
- en: src/pages/Profile.jsx
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/Profile.jsx
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let’s add the fetching logic for the user and the user posts. No need to create
    another `Post` component as the same `Post` component from `src/components/Post.jsx`
    will be used to list posts created by the profile:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加获取用户和用户帖子的逻辑。不需要创建另一个`Post`组件，因为`src/components/Post.jsx`中的相同`Post`组件将被用来列出由个人资料创建的帖子：
- en: src/pages/Profile.jsx
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/Profile.jsx
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once it’s done, we can now write the UI logic:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们现在可以编写UI逻辑：
- en: src/pages/Profile.jsx
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/Profile.jsx
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Great! Let’s now register this page in the `App.js` file:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太好了！现在让我们在`App.js`文件中注册这个页面：
- en: src/App.js
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: src/App.js
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let’s not forget to add `Link` to the profile in the `Navbar.jsx` file:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记在`Navbar.jsx`文件中添加`链接`：
- en: src/components/Navbar.jsx
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/Navbar.jsx
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Great! You can now click on the **See Profile** button or directly on the drop-down
    menu of the navigation bar to go to the profile page:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太好了！你现在可以点击**查看个人资料**按钮或直接点击导航栏的下拉菜单来访问个人资料页面：
- en: '![Figure 10.8 – A random profile page](img/Figure_10.08_B18221.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图10.8 – 一个随机的个人资料页面](img/Figure_10.08_B18221.jpg)'
- en: Figure 10.8 – A random profile page
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8 – 一个随机的个人资料页面
- en: With the profile page ready, we can move on to create the page that will contain
    the form to edit user information.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在个人资料页面准备就绪后，我们可以继续创建包含编辑用户信息表单的页面。
- en: Editing user information
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑用户信息
- en: The `useUserActions` Hook by adding a new method to edit user information via
    the API. Then, we will create the form to edit user information. Lastly, we will
    integrate the editing form component on the `EditUser` page.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为`useUserActions`钩子添加一个新方法来编辑用户信息通过API。然后，我们将创建一个用于编辑用户信息的表单。最后，我们将编辑表单组件集成到`EditUser`页面上。
- en: Let’s start by adding a new method to the `useUserActions` Hook.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从向`useUserActions`钩子添加一个新方法开始。
- en: Adding the edit method to useUserActions
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向useUserActions添加编辑方法
- en: 'In the `src/hooks/user.actions.js` file, we will add another method to the
    `useUserActions` Hook. This function will handle the `patch` request to the API.
    As we are saving a user object in `localStorage`, we will update the value of
    the object if the request succeeds:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/hooks/user.actions.js`文件中，我们将向`useUserActions`钩子添加另一个方法。这个函数将处理对API的`patch`请求。由于我们在`localStorage`中保存用户对象，如果请求成功，我们将更新对象的值：
- en: src/hooks/user.actions.js
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: src/hooks/user.actions.js
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: With the `edit` function written, we can confidently move to create the form
    used to edit user information.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写了`edit`函数之后，我们可以自信地开始创建用于编辑用户信息的表单。
- en: The UpdateProfileForm component
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UpdateProfileForm组件
- en: 'In the `src/components/UpdateProfileForm.jsx`, create a file called `UpdateProfileForm.jsx`.
    This file will contain the code for the component used to edit user information:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/components/UpdateProfileForm.jsx`中，创建一个名为`UpdateProfileForm.jsx`的文件。这个文件将包含用于编辑用户信息的组件的代码：
- en: src/components/UpdateProfileForm.jsx
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/UpdateProfileForm.jsx
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let’s start by retrieving the user object from the props and adding the Hooks
    needed for the form handling:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从从props中检索用户对象并添加处理表单所需的钩子开始：
- en: src/components/UpdateProfileForm.jsx
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/UpdateProfileForm.jsx
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The next step is to write the `handleSubmit` method. This method should handle
    the validity of the form, the request to update the information, and also what
    to display according to the result:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是编写`handleSubmit`方法。此方法应处理表单的有效性、更新信息的请求以及根据结果显示的内容：
- en: src/components/UpdateProfileForm.jsx
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/UpdateProfileForm.jsx
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As we are going to include a file in the data sent to the server, we are using
    a `FormData` object. A `FormData` object is a common way to create a bundle of
    data that will be sent to a server. It provides a simple and easy way to construct
    a set of **key/value** pairs, representing the name of the form fields and their
    value.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在发送到服务器的数据中包含一个文件，我们正在使用`FormData`对象。`FormData`对象是创建将发送到服务器的数据包的常用方式。它提供了一个简单且易于构造一组**键/值**对的方法，代表表单字段的名称及其值。
- en: 'In the case of our project, we will need to pass the data in the data variable
    to the `formData` object:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们项目的案例中，我们需要将数据变量中的数据传递给`formData`对象：
- en: src/components/UpdateProfileForm.jsx
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/UpdateProfileForm.jsx
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `Object` constructor provides a `keys` method that returns the list of
    keys in a JavaScript object. We then use the `forEach` method to loop through
    the `keys` array, check if `data[key]` value is not null, and then we append the
    values from the data object to the `formData` object. We also need to add a case
    for the avatar field:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object`构造函数提供了一个`keys`方法，它返回JavaScript对象中的键列表。然后我们使用`forEach`方法遍历`keys`数组，检查`data[key]`的值是否不为null，然后将数据对象中的值追加到`formData`对象中。我们还需要为头像字段添加一个情况：'
- en: src/components/UpdateProfileForm.jsx
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/UpdateProfileForm.jsx
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can now move to the edit action:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以转到编辑操作：
- en: src/components/UpdateProfileForm.jsx
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/UpdateProfileForm.jsx
- en: '[PRE25]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Nothing complicated here. It’s like what we used to do for other requests on
    the API. Let’s move to the form now. The form will contain fields for the avatar
    such as the first name, the last name, and the bio. These fields are the only
    information the user will update. Let’s start by writing the avatar field first:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么复杂的。就像我们以前在API上的其他请求中所做的那样。现在让我们转到表单。表单将包含头像字段，如名字、姓氏和个人简介。这些字段是用户唯一需要更新的信息。让我们先编写头像字段：
- en: src/components/UpdateProfileForm.jsx
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/UpdateProfileForm.jsx
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Great! Let’s add the fields for the last name and first name:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！让我们添加姓氏和名字的字段：
- en: src/components/UpdateProfileForm.jsx
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/UpdateProfileForm.jsx
- en: '[PRE27]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, let us add the bio field and the submit button:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们添加个人简介字段和提交按钮：
- en: src/components/UpdateProfileForm.jsx
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/UpdateProfileForm.jsx
- en: '[PRE28]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Great! The `UpdateProfileForm` component is written and we can use it to create
    the `EditProfile.jsx` page.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！`UpdateProfileForm`组件已经编写完成，我们可以使用它来创建`EditProfile.jsx`页面。
- en: Creating the EditProfile page
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建编辑个人资料页面
- en: 'Inside the `src/pages/` directory, create a new file called `EditProfile.jsx`.
    This file will contain the code for the page that will display the form to edit
    information about the user:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/pages/`目录下，创建一个名为`EditProfile.jsx`的新文件。此文件将包含显示编辑用户信息的表单的页面代码：
- en: src/pages/EditProfile.jsx
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/EditProfile.jsx
- en: '[PRE29]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'With the needed imports added, we can now add the fetching logic and the UI:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了所需的导入后，我们现在可以添加获取逻辑和UI：
- en: src/pages/EditProfile.jsx
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/EditProfile.jsx
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the `EditProfile` function, we are planning to retrieve the `profileId`
    that will be used to fetch the up-to-date user information and pass the response
    to the `UpdateProfileForm` component. Naturally, we are returning the `App.js`
    file:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在`EditProfile`函数中，我们计划检索将用于获取最新用户信息的`profileId`，并将响应传递给`UpdateProfileForm`组件。自然地，我们返回`App.js`文件：
- en: src/App.jsx
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: src/App.jsx
- en: '[PRE31]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now, go to your profile and click on the **Edit** button. Change the information
    and add an avatar image to make sure everything is working.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，前往您的个人资料并点击**编辑**按钮。更改信息并添加头像图片以确保一切正常工作。
- en: The React application is nearly done. We have CRUD operations for authentication,
    posts, comments, and new users. Now, it’s time to focus on the quality and maintainability
    of our components.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: React应用程序几乎完成了。我们已经实现了认证、帖子、评论和新用户的CRUD操作。现在，是时候关注我们组件的质量和可维护性了。
- en: Summary
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we added CRUD operations for the user in the React application.
    We explored how powerful and simple it is to handle media uploading in Django
    and how to create a form that can accept file uploads to a remote server. We have
    also added new components to the React application for better navigation and exploration
    of other profiles. We are done implementing most features of our application.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在 React 应用程序中为用户添加了 CRUD 操作。我们探讨了在 Django 中处理媒体上传的强大和简单性，以及如何创建一个可以接受文件上传到远程服务器的表单。我们还为
    React 应用程序添加了新的组件，以实现更好的导航和探索其他个人资料。我们已完成应用程序大多数功能的实现。
- en: In the next chapter, we will learn how to write tests for a React frontend application.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何为 React 前端应用程序编写测试。
- en: Questions
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is a `formData` object?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 `formData` 对象？
- en: What is the `MEDIA_URL` setting usage in Django?
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Django 中的 `MEDIA_URL` 设置用途是什么？
- en: What is the `MEDIA_ROOT` setting usage in Django?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Django 中的 `MEDIA_ROOT` 设置用途是什么？
