- en: '*Chapter 1*: Fundamentals of Computer Science'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第1章*：计算机科学基础'
- en: The world of computer science is a broad and complex one. Not only is it constantly
    changing and evolving, but the components we consider part of computer science
    are also adapting and adjusting. The computational thinking process allows us
    to tackle any problem presented with purpose and focus. No matter what the problem
    is, we can break it down, find patterns that will help us find solutions, generalize
    our solutions, and design algorithms that can help us provide solutions to the
    problems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机科学的世界是一个广阔而复杂的世界。它不仅不断变化和发展，而且我们认为是计算机科学的组成部分也在不断适应和调整。计算思维过程使我们能够有目的地和专注地解决任何问题。无论问题是什么，我们都可以将其分解，找到可以帮助我们找到解决方案的模式，概括我们的解决方案，并设计可以帮助我们提供解决方案的算法。
- en: Throughout this book, we will be looking at the computational thinking process
    carefully, tackling problems in multiple areas and using the Python programming
    language and associated libraries and packages to create algorithms that help
    us solve these problems. Before moving into the problems, however, we will explore
    some of the important computer science concepts that will help us navigate the
    rest of the book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将仔细研究计算思维过程，解决多个领域的问题，并使用Python编程语言及相关库和包来创建算法，帮助我们解决这些问题。然而，在进入问题之前，我们将探讨一些重要的计算机科学概念，这些概念将帮助我们导航本书的其余部分。
- en: 'In this chapter, we will explore the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: Introduction to computer science
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机科学简介
- en: Theoretical computer science
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理论计算机科学
- en: Systems software
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统软件
- en: Computing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算
- en: Data types and structures
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类型和结构
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need the latest version of Python to run the codes in this chapter.
    You will find the full source code used in this chapter here: [https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter01](https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter01)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要最新版本的Python来运行本章中的代码。您可以在此处找到本章使用的完整源代码：[https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter01](https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter01)
- en: Introduction to computer science
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算机科学简介
- en: When looking for a definition of computer science, you will encounter multiple
    variations, but all state that computer science encompasses all aspects of computers
    and computing concepts, including hardware and software. In computer science,
    hardware design is learned in courses offered in engineering or computer engineering,
    for the most part. The software side of computer science includes operating systems
    and applications, among other programming areas. For the purposes of this book,
    we will be concentrating on the software side of computer science.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当寻找计算机科学的定义时，您会遇到多种变体，但所有都指出计算机科学涵盖了计算机和计算概念的所有方面，包括硬件和软件。在计算机科学中，硬件设计主要在工程或计算机工程课程中学习。计算机科学的软件方面包括操作系统和应用程序等编程领域。在本书中，我们将集中在计算机科学的软件方面。
- en: In this chapter, we'll look at some of the basic definitions, theories, and
    systems that are important as we delve deeper into the computational thinking
    world. Once we have identified key areas and defined the concepts, we will be
    ready to move on to the applications and real-world challenges we face in an ever-changing
    tech world while also exploring the elements of computational thinking and the
    Python programming capabilities that can help us tackle these challenges.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究一些基本的定义、理论和系统，这些对我们深入计算思维世界至关重要。一旦我们确定了关键领域并定义了概念，我们就准备好进入应用和现实世界中面临的挑战，同时探索计算思维的要素和可以帮助我们应对这些挑战的Python编程能力。
- en: The wide range of topics available in computer science can be both daunting
    and exciting and it is ever evolving. Some of these topics include game design,
    operating systems, applications for mobile or desktop devices, the programming
    of robots, and much more. Constant and consistent breakthroughs in computers and
    computing provide new and exciting opportunities, much of which are unknown to
    us. Having a basic understanding of the systems behind computer science can help
    us interact with technology and tackle problems more efficiently.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机科学中提供的广泛主题范围既令人望而生畏又令人兴奋，它不断发展。其中一些主题包括游戏设计、操作系统、移动或桌面设备的应用程序、机器人编程等。计算机和计算领域的不断突破为我们提供了新的和令人兴奋的机会，其中许多是我们所不知道的。对计算机科学背后的系统有基本的了解可以帮助我们更有效地与技术互动并解决问题。
- en: Learning about computers and the binary system
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习计算机和二进制系统
- en: All computers store information as **binary** data. The binary system reads
    all information as a switch, which can be on or off, 0 or 1\. The binary system
    is a base-2 system. You'll need a basic understanding of binary numbers and the
    binary system to progress in computer science.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所有计算机都将信息存储为**二进制**数据。二进制系统将所有信息视为开关，可以是开或关，0或1。二进制系统是一个基于2的系统。您需要对二进制数字和二进制系统有基本的了解，才能在计算机科学中取得进展。
- en: 'The binary system translates all data so that it can be stored as strings using
    only two numbers: 0 and 1\. Data is stored in computers using bits. A **bit**
    (which stands for **binary digit**) is the smallest unit of data you can find
    in a computer, that is, a 0 or a 1.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制系统将所有数据转换为字符串，只使用两个数字：0和1。数据在计算机中使用比特存储。**比特**（代表**二进制数字**）是计算机中可以找到的最小数据单元，即0或1。
- en: 'When counting in the binary system, the first two numbers are 0 (or 00) and
    1 (or 01), much like in the base-10 number system we use in everyday life. If
    we were to continue counting in binary, our next number would be 10\. Let''s compare
    the first three numbers in the base-10 system and the binary system before we
    learn how to convert from one to the other:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在二进制系统中计数时，前两个数字是0（或00）和1（或01），就像我们在日常生活中使用的十进制数系统一样。如果我们继续以二进制计数，下一个数字将是10。在学习如何从一个系统转换为另一个系统之前，让我们比较一下十进制系统和二进制系统中的前三个数字：
- en: '![Figure 1.1 – Base-10 and binary comparison'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.1-十进制和二进制比较'
- en: '](image/Figure_01.01_B15413.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_01.01_B15413.jpg)'
- en: Figure 1.1 – Base-10 and binary comparison
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1-十进制和二进制比较
- en: 'The next number in the base-10 system would be 3\. In the binary system, the
    next number would be 11, which is read as *one one*. The first 10 numbers in the
    base-10 and binary systems are shown as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制系统中的下一个数字将是3。在二进制系统中，下一个数字将是11，读作“一一”。十进制和二进制系统中的前10个数字如下所示：
- en: '![Figure 1.2 – Base-10 and binary comparison (cont''d)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.2-十进制和二进制比较（续）'
- en: '](image/Figure_01.02_B15413.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_01.02_B15413.jpg)'
- en: Figure 1.2 – Base-10 and binary comparison (cont'd)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2-十进制和二进制比较（续）
- en: As mentioned, the binary system is a base-2 system. This means that each digit
    of the base-10 system is paired with a power of 2, so we use those powers to convert
    between numbers. Understanding how to convert from base-2 to base-10 and vice
    versa can help us have a better understanding of the relationship between numbers
    in the different systems.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，二进制系统是一个基于2的系统。这意味着十进制系统的每个数字都与2的幂配对，因此我们使用这些幂来在数字之间进行转换。了解如何从二进制转换为十进制，反之亦然，可以帮助我们更好地理解不同系统中数字之间的关系。
- en: Converting from binary to base-10
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从二进制转换为十进制
- en: 'We will start with an example to convert from a binary number to a base-10
    number. Take the number 101101\. To convert the number, each digit is multiplied
    by the corresponding base-2 power. The binary number given has 6 digits, so the
    powers of 2 we will use are 5, 4, 3, 2, 1, and 0\. This means the number is converted
    as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个示例开始，将二进制数转换为十进制数。取数字101101。要转换该数字，每个数字都乘以相应的基数2的幂。给定的二进制数字有6位，因此我们将使用的2的幂是5、4、3、2、1和0。这意味着数字转换如下：
- en: '![](image/Formula_B15413_01_001.jpg)![](image/Formula_B15413_01_002.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Formula_B15413_01_001.jpg)![](image/Formula_B15413_01_002.jpg)'
- en: The binary number 101101 is equivalent to 45 in the base-10 system. In everyday
    life, we write numbers in base-10, so we understand the number 45 as written.
    However, our computers convert this information into binary to be able to process
    it, so the number becomes the binary number 101101 so that it can be easily read
    by the computer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制数101101相当于十进制系统中的45。在日常生活中，我们以十进制书写数字，因此我们理解45这个数字的书写方式。然而，我们的计算机将这些信息转换为二进制以便能够处理它，因此该数字变成了二进制数101101，以便计算机能够轻松读取。
- en: Converting from base-10 to binary
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从十进制转换为二进制
- en: Again, let's start with an example to demonstrate the process of converting
    from a base-10 number to a binary number. Take the number 591\. To convert the
    base-10 number to binary, we have to divide the number by 2 iteratively. If the
    result has no remainder, we insert a 0 (if it is the first number) or insert a
    0 to the left of the existing numbers.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，让我们从一个示例开始，以演示从十进制数转换为二进制数的过程。取数字591。要将十进制数转换为二进制数，我们必须迭代地将数字除以2。如果结果没有余数，我们插入0（如果是第一个数字）或在现有数字的左侧插入0。
- en: If the result has a remainder of 1, we insert a 1 (if it is the first number)
    or insert a 1 to the left of the existing numbers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果有余数1，我们插入1（如果是第一个数字）或在现有数字的左侧插入1。
- en: When we divide 591 by 2, the result is 295 with a remainder of 1\. That means
    our right-most number, which is our first number, is 1.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将591除以2时，结果是295，余数为1。这意味着我们最右边的数字，也就是我们的第一个数字，是1。
- en: Now divide 295 by 2\. The result is 147 with a remainder of 1\. So, we insert
    a 1 to the left of the 1\. Our number is now 11.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将295除以2。结果是147，余数为1。因此，我们在1的左侧插入1。我们的数字现在是11。
- en: 'Now divide 147 by 2\. The result is 73 with a remainder of 1\. Our result is
    now 111\. Now we''ll carry out further divisions:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将147除以2。结果是73，余数为1。我们的结果现在是111。现在我们将进行进一步的除法：
- en: '![](image/Formula_B15413_01_003.png) with a remainder of 1\. Our number is
    now 1111.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![](image/Formula_B15413_01_003.png)余数为1。我们的数字现在是1111。'
- en: '![](image/Formula_B15413_01_004.png) with no remainder. Our number is now 01111.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![](image/Formula_B15413_01_004.png)没有余数。我们的数字现在是01111。'
- en: '![](image/Formula_B15413_01_005.png) with no remainder. Our number is now 001111.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![](image/Formula_B15413_01_005.png)没有余数。我们的数字现在是001111。'
- en: '![](image/Formula_B15413_01_006.png) with a remainder of 1\. Our number is
    now 1001111.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![](image/Formula_B15413_01_006.png)余数为1。我们的数字现在是1001111。'
- en: '![](image/Formula_B15413_01_007.png) with no remainder. Our number is now 01001111.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![](image/Formula_B15413_01_007.png)没有余数。我们的数字现在是01001111。'
- en: '![](image/Formula_B15413_01_008.png) with no remainder. Our number is now 001001111.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![](image/Formula_B15413_01_008.png)没有余数。我们的数字现在是001001111。'
- en: '![](image/Formula_B15413_01_009.png) with a remainder of 1\. Our number is
    now 1001001111.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![](image/Formula_B15413_01_009.png)余数为1。我们的数字现在是1001001111。'
- en: The number 591 in base-10 is equivalent to the number 1001001111 in the binary
    system.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制中的数字591相当于二进制系统中的数字1001001111。
- en: 'Another way to convert the number is to use a table for the divisions:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种转换数字的方法是使用表格进行除法：
- en: '![Table 1.1 – Conversion of the base-10 number 591 to binary'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![表1.1-将十进制数591转换为二进制'
- en: '](image/B15413_Table_1.1.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15413_Table_1.1.jpg)'
- en: Table 1.1 – Conversion of the base-10 number 591 to binary
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.1-将十进制数591转换为二进制
- en: Using the table, take the numbers from the right-most column and write them
    starting with the last row from bottom to top. The result is 1001001111.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用表格，取最右边一列的数字，并从底部到顶部开始写下这些数字。结果是1001001111。
- en: Learning how to convert numbers is only a small piece of converting data to
    binary, but it is an important piece. All information, including letters and symbols,
    must be converted to binary in order to be read by a computer. **ASCII** (which
    stands for **American Standard Code for Information Exchange**) is a protocol
    that has been adopted universally to convert information. That said, some of the
    protocol is obsolete, so other protocols use ASCII as a base to expand on its
    capabilities. Unicode is a widely used 16-bit character set that is based on ASCII.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何转换数字只是将数据转换为二进制的一小部分，但它是一个重要的部分。所有信息，包括字母和符号，都必须转换为二进制才能被计算机读取。**ASCII**（代表**美国信息交换标准代码**）是一个被普遍采用的协议，用于转换信息。也就是说，该协议的一些部分已经过时，因此其他协议使用ASCII作为基础来扩展其功能。Unicode是一个广泛使用的基于ASCII的16位字符集。
- en: As discussed, in this section, we learned that information must be encoded or
    converted in order for a computer to read it. Multiple systems and protocols exist,
    but for now, we will move on to computer science theory. However, revisiting binary,
    ASCII, and Unicode as you work through problems can be helpful.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如讨论的，在本节中，我们了解到信息必须被编码或转换才能被计算机读取。存在多个系统和协议，但现在我们将继续讨论计算机科学理论。然而，在解决问题时，回顾二进制、ASCII和Unicode可能会有所帮助。
- en: Understanding theoretical computer science
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解理论计算机科学
- en: While you don't need to be a master mathematician to love computer science,
    these two subjects are intrinsically tied. Computer science, particularly programming,
    uses algorithms, which are algebraic in nature. We will explore algorithms in
    depth later on, but again, the important point here is that they are mathematical.
    The logical processes stem from the philosophical nature and history of mathematics.
    Now, if mathematical topics are not to your liking, don't despair. The logical
    processes needed to become a programmer and developer can be used without having
    to learn higher mathematics. Knowing higher mathematics just simplifies some concepts
    for those who have that background.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你不需要成为数学大师才能喜欢计算机科学，但这两个学科是内在联系的。计算机科学，特别是编程，使用的是代数性质的算法。我们将在后面深入探讨算法，但重要的是它们是数学的。逻辑过程源自数学的哲学性质和历史。现在，如果数学主题不是你的菜，不要绝望。成为程序员和开发人员所需的逻辑过程可以在不学习更高数学的情况下使用。了解更高的数学只是为那些具有这方面背景的人简化了一些概念。
- en: '**Theoretical computer science** includes multiple theories and topics. Some
    of the topics and theories are listed as follows, but keep in mind that other
    topics are also included in theoretical computer science that may not be discussed
    in this book. A short description and explanation for each of the theories or
    terms listed as follows are included for your review:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**理论计算机科学**包括多个理论和主题。以下列出了一些主题和理论，但请记住，理论计算机科学中还包括其他可能在本书中未讨论的主题。以下列出的每个理论或术语都包括简短的描述和解释供您审阅：'
- en: Algorithms
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算法
- en: Coding theory
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码理论
- en: Computational biology
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算生物学
- en: Data structures
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据结构
- en: Cryptography
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码学
- en: Information theory
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息理论
- en: Machine learning
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习
- en: Automata theory
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动机理论
- en: Formal language theory
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 形式语言理论
- en: Symbolic computation
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符号计算
- en: Computational geometry
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算几何
- en: Computational number theory
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算数论
- en: We will look at the aforementioned theories in the following sections.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中看一下上述的理论。
- en: Algorithms
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算法
- en: An algorithm is a set of instructions that a computer can read. Algorithms provide
    the rules or instructions in a way that means a computer can logically process
    the information provided as input and create an output. In most books, you are
    introduced to the algorithm and programming by creating the *Hello World!* program.
    I won't make this book the exception.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 算法是计算机可以读取的一组指令。算法以一种计算机可以逻辑处理提供的输入信息并创建输出的方式提供规则或指令。在大多数书籍中，你是通过创建*Hello World!*程序来介绍算法和编程的。我不会让这本书成为例外。
- en: 'In Python, the code would require that we print the message to the screen.
    Because the Python language is easy to learn and to read, many, if not most, of
    the code strives to be logical. So, in order to print a message to the screen,
    we use the `print()` command. Here is the code we''d use:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，代码需要打印消息到屏幕上。因为Python语言易学易读，许多代码都力求逻辑。因此，为了将消息打印到屏幕上，我们使用`print()`命令。以下是我们将使用的代码：
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Similarly, we could use the code given as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以使用以下给出的代码：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Python reads both *"* and *'* as the same thing when it comes to strings.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到字符串时，Python将*"*和*'*视为相同的东西。
- en: 'The result of the preceding code looks like the following screenshot when we
    run the algorithm:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行算法时，前面代码的结果如下截图所示：
- en: '![Figure 1.3 – The ''Hello World!'' Python program'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.3 – ''Hello World!'' Python程序'
- en: '](image/Figure_01.03_B15413.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_01.03_B15413.jpg)'
- en: Figure 1.3 – The 'Hello World!' Python program
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – 'Hello World!' Python程序
- en: Don't worry, we'll discuss the Python programming language later on in [*Chapter
    2*](B15413_02_Final_SK_ePub.xhtml#_idTextAnchor043), *Elements of Computational
    Thinking*, and more in depth in *Part 2*, *Applying Python and Computational Thinking*,
    starting in [*Chapter 8*](B15413_08_Final_SK_ePub.xhtml#_idTextAnchor114), *Introduction
    to Python*, as well.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 别担心，我们将在[*第2章*](B15413_02_Final_SK_ePub.xhtml#_idTextAnchor043)后面讨论Python编程语言，*计算思维要素*，以及在*第2部分*，*应用Python和计算思维*中更深入地讨论，从[*第8章*](B15413_08_Final_SK_ePub.xhtml#_idTextAnchor114)开始，*Python简介*。
- en: While lengthy, the discussion on algorithms is critically important to this
    book and to your progression with Python. Consequently, we will be covering this
    in-depth exploration of algorithms in [*Chapter 2*](B15413_02_Final_SK_ePub.xhtml#_idTextAnchor043),
    *Elements of Computational Thinking*, and [*Chapter 3*](B15413_03_Final_SK_ePub.xhtml#_idTextAnchor056),
    *Understanding Algorithms and Algorithmic Thinking*, of this book, as algorithms
    are a key element of the computational thinking process.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管讨论算法很长，但对于本书和你学习Python的进展至关重要。因此，我们将在本书的[*第2章*](B15413_02_Final_SK_ePub.xhtml#_idTextAnchor043)——*计算思维要素*和[*第3章*](B15413_03_Final_SK_ePub.xhtml#_idTextAnchor056)——*理解算法和算法思维*中深入探讨算法，因为算法是计算思维过程的关键要素。
- en: 'Important Note:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '重要提示:'
- en: '[*Chapter 2*](B15413_02_Final_SK_ePub.xhtml#_idTextAnchor043), *Elements of
    Computational Thinking*, will focus on the computational thinking process itself,
    which has four elements: **decomposition**, **pattern recognition, pattern generalization
    and abstraction**, and **algorithm design**. As you can see, that last element
    is algorithm design, so we will need to get more acquainted with what an algorithm
    is and how we can create them so that you can then implement and design algorithms
    when solving problems with Python. [*Chapter 3*](B15413_03_Final_SK_ePub.xhtml#_idTextAnchor056),
    *Understanding Algorithms and Algorithmic Thinking*, will focus on a deeper understanding
    of algorithm definition as well as an introduction to the design process.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第2章*](B15413_02_Final_SK_ePub.xhtml#_idTextAnchor043)——*计算思维要素*将专注于计算思维过程本身，它有四个要素：**分解**、**模式识别、模式概括和抽象**和**算法设计**。正如你所看到的，最后一个要素是算法设计，因此我们需要更加了解算法是什么以及如何创建它们，这样你就可以在用Python解决问题时实施和设计算法。[*第3章*](B15413_03_Final_SK_ePub.xhtml#_idTextAnchor056)——*理解算法和算法思维*将专注于更深入地理解算法定义以及设计过程的介绍。'
- en: We'll look at coding theory next.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将看编码理论。
- en: Coding theory
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码理论
- en: 'Coding theory is also sometimes known as algebraic coding theory. When working
    with code and coding theory, there are three areas that are studied: **data compression**,
    **error correction**, and **cryptography**. We will cover these in more detail
    in the following sections.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 编码理论有时也被称为代数编码理论。在处理代码和编码理论时，有三个研究领域：**数据压缩**、**错误校正**和**密码学**。我们将在接下来的章节中更详细地介绍这些内容。
- en: Data compression
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据压缩
- en: The importance of data compression cannot be understated. Data compression allows
    us to store the maximum amount of information while taking up the least amount
    of space. In other words, data compression uses the fewest number of bits to store
    the data.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 数据压缩的重要性不容忽视。数据压缩使我们能够在占用最少空间的情况下存储最大量的信息。换句话说，数据压缩使用最少的位来存储数据。
- en: 'Important Note:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：
- en: Remember that a **bit** is the smallest unit of data you can find in a computer,
    that is, a 0 or a 1, while a group of bits is called a **byte**. One byte usually
    has 8 bits. We use bytes as a unit of measurement for the size of the memory of
    a computer, storage device, such as a memory card or external drive, and more.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，**比特**是计算机中最小的数据单位，即0或1，而一组比特称为**字节**。一个字节通常有8个比特。我们使用字节作为计算机内存、存储设备（如存储卡或外部驱动器）等大小的度量单位。
- en: 'As our technology and storage capacities have grown and improved, our ability
    to store additional data has as well. Historically, computers had **kilobytes**
    or **megabytes** of storage when first introduced into households, but they currently
    have **gigabytes** and **terabytes** worth of storage. The conversions for each
    of the storage units are shown as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术和存储容量的增长和改善，我们存储额外数据的能力也在增加。从历史上看，当计算机首次进入家庭时，它们通常只有**千字节**或**兆字节**的存储空间，但现在它们拥有**千兆字节**和**太字节**的存储空间。各种存储单位的换算如下所示：
- en: '![Figure 1.4 – Byte conversions'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.4 – 字节转换'
- en: '](image/Figure_01.04_B15413.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_01.04_B15413.jpg)'
- en: Figure 1.4 – Byte conversions
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – 字节转换
- en: 'If you look for information online, you may find that some sources state that
    there are 1,024 gigabytes in a terabyte. That is a binary conversion. In the decimal
    system, or base-10 system, there are 1,000 gigabytes per terabyte. To understand
    conversion better, it is important to understand the prefixes that apply to the
    base-10 system and the prefixes that apply to the binary system:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在网上寻找信息，可能会发现一些来源声称一太字节等于1,024千兆字节。这是一个二进制换算。在十进制系统或十进制系统中，一太字节等于1,000千兆字节。要更好地理解换算，重要的是要了解适用于十进制系统和二进制系统的前缀：
- en: '![Table 1.2 – Base-10 and binary prefixes with values'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![表1.2 – 带值的十进制和二进制前缀'
- en: '](image/B15413_Table_1.2.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15413_Table_1.2.jpg)'
- en: Table 1.2 – Base-10 and binary prefixes with values
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.2 – 带值的十进制和二进制前缀
- en: As mentioned, the goal is always to use the least amount of bits for the largest
    amount of data possible. Therefore, we compress, or reduce, the size of data in
    order to use less storage.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，目标始终是尽量使用最少的位来存储尽量多的数据。因此，我们压缩或减少数据的大小，以便使用更少的存储空间。
- en: So, *why is data compression so important?* Let's go back in time to 2000\.
    Back then, a laptop computer on sale for about $1,000 had about 64 MB of **RAM**
    (**Random Access Memory**) and 6 GB of hard drive memory. A photograph on our
    digital phones takes anywhere from 2 to 5 megabytes of memory when we use its
    actual size. That means our computers couldn't store many (and in some cases any)
    of the modern pictures we take now. Data compression advances allow us to store
    more memory, create better games and applications, and much more, as we can have
    better graphics and additional information or code without having to worry as
    much about the amount of memory they use.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，*数据压缩为什么如此重要呢？*让我们回到2000年。那时，一台售价约1000美元的笔记本电脑大约有64MB的**RAM**（随机存取存储器）和6GB的硬盘内存。我们手机上的一张照片在使用其实际大小时需要2到5兆字节的内存。这意味着我们的计算机无法存储现在拍摄的许多（在某些情况下是任何）现代照片。数据压缩的进步使我们能够存储更多内存，创建更好的游戏和应用程序，以及更多，因为我们可以拥有更好的图形和额外的信息或代码，而无需太担心它们使用的内存量。
- en: Error correction
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 错误更正
- en: In computer science, errors are a fact of life. We make mistakes in our processes,
    our algorithms, our designs, and everything in between. Error correction, also
    known as error handling, is the process a computer goes through to automatically
    correct an error or multiple errors, which happens when digital data is incorrectly
    transmitted.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中，错误是生活中的一个事实。我们在我们的过程、算法、设计和各种其他方面都会犯错误。错误更正，也称为错误处理，是计算机自动纠正错误或多个错误的过程，这种错误发生在数字数据被错误传输时。
- en: An **Error Correction Code** (**ECC**) can help us analyze data transmissions.
    ECC locates and corrects transmission errors. In computers, ECC is built into
    a storage space that can identify common internal data corruption problems. For
    example, ECC can help read broken codes, such as a missing piece of a **QR** (**Quick
    Response**) code. A type of ECC is a **hamming code**. A hamming code is a binary
    linear code that can detect up to two-bit errors.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误更正码**（**ECC**）可以帮助我们分析数据传输。ECC可以定位和纠正传输错误。在计算机中，ECC内置在一个可以识别常见内部数据损坏问题的存储空间中。例如，ECC可以帮助读取损坏的代码，比如**QR**（快速响应）代码的缺失部分。一种ECC是**汉明码**。汉明码是一种二进制线性码，可以检测最多两位错误。'
- en: 'Important Note:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明：
- en: Hamming codes are named after Richard Wesley Hamming, who discovered them in
    1950\. Hamming was a mathematician who worked with coding as related to telecommunications
    and computer engineering.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 汉明码是以1950年发现它们的理查德·韦斯利·汉明命名的。汉明是一位数学家，他在与电信和计算机工程相关的编码方面进行了研究。
- en: Another type of ECC is a **parity** bit. A parity bit checks the status of data
    and determines whether any data has been lost or overwritten. Error correction
    is important for all software developed, as any updates, changes, or upgrades
    can lead to corruption of the entire program or parts of the program or software.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种ECC是**奇偶校验**位。奇偶校验位检查数据的状态，并确定是否有任何数据丢失或被覆盖。错误更正对所有开发的软件都很重要，因为任何更新、更改或升级都可能导致整个程序或部分程序或软件的损坏。
- en: Cryptography
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 密码学
- en: '**Cryptography** is used in computer science to hide code. In cryptography,
    information or data is written so that it is unreadable by anyone other than the
    intended recipient of the message. In simple terms, cryptography takes readable
    text or information and converts it into unreadable text or information.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**密码学**用于计算机科学中隐藏代码。在密码学中，信息或数据被编写成只有消息的预期接收者才能阅读的形式。简单来说，密码学将可读文本或信息转换为不可读的文本或信息。'
- en: When we think about cryptography now, we tend to think of **encryption** of
    data. Coders encrypt data by converting it into code that cannot be seen by unauthorized
    users. However, cryptography has been around for centuries, that is, it pre-dates
    computers. Historically, the first uses of cryptography were found around 1900
    BC in a tomb in Egypt. Atypical or unusual hieroglyphs were mixed with common
    hieroglyphs at various parts of the tomb.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们现在考虑密码学时，我们往往会想到数据的**加密**。编码者通过将数据转换为未经授权用户无法看到的代码来加密数据。然而，密码学已经存在了几个世纪，即它早于计算机。历史上，密码学的第一个用途可以追溯到公元前1900年左右的埃及一座墓穴中。在墓穴的各个部分，常见的象形文字与非典型或不寻常的象形文字混合在一起。
- en: The reason for the unusual hieroglyphs is unknown, but the messages were hidden
    from others with their use. Later on, cryptography would be used to communicate
    in secret by governments and spies, in times of war and peace. Nowadays, cryptography
    is used to encrypt data, as our information exists in digital format, so protecting
    sensitive information, such as banking, demographic, or personal data is important.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 非典型的象形文字的原因是未知的，但这些信息被隐藏起来，不让其他人看到。后来，密码学被用于在战争和和平时期的政府和间谍之间进行秘密通信。如今，密码学被用于加密数据，因为我们的信息存在于数字格式中，因此保护敏感信息，如银行、人口统计或个人数据，是很重要的。
- en: We will be further exploring the topics of coding theory through some of the
    problems presented throughout this book.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过本书中提出的一些问题进一步探讨编码理论的主题。
- en: Computational biology
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算生物学
- en: '**Computational biology** is the area of theoretical computer science that
    focuses on the study of biological data and bioinformatics. **Bioinformatics**
    is a science that allows us to collect biological data and analyze it. An example
    of bioinformatics is the collection and analysis of genetic codes. In the study
    of biology, large quantities of data are explored and recorded.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**计算生物学**是理论计算机科学的一个领域，专注于生物数据和生物信息学的研究。**生物信息学**是一门科学，允许我们收集生物数据并对其进行分析。生物信息学的一个例子是收集和分析基因密码。在生物学研究中，大量数据被探索和记录。'
- en: Studies can be wide-ranging in topics and interdisciplinary. For example, a
    genetic study may include data from an entire state, an entire race, or an entire
    country. Some areas within computational biology include molecules, cells, tissues,
    and organisms. Computational biology allows us to study the composition of these
    things, from the most basic level to the larger organism. Bioinformatics and computational
    biology provide a structure for experimental studies in these areas, create predictions
    and comparisons, and provide a way to develop and test theories.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 研究可以涉及各种各样的主题和跨学科。例如，遗传研究可能包括来自整个州、整个种族或整个国家的数据。计算生物学的一些领域包括分子、细胞、组织和生物体。计算生物学使我们能够研究这些事物的组成，从最基本的水平到更大的生物体。生物信息学和计算生物学为这些领域的实验研究提供了一个结构，创建了预测和比较，并提供了一种发展和测试理论的方式。
- en: Computational thinking and coding allow us to process that data and analyze
    it. In this book, problems presented will allow us to explore ways in which we
    can use Python in conjunction with computational thinking to find solutions to
    complex problems, including those in computational biology.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 计算思维和编码使我们能够处理和分析这些数据。在本书中，所提出的问题将使我们能够探索如何使用Python结合计算思维来解决复杂问题，包括计算生物学中的问题。
- en: Data structures
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据结构
- en: In coding theory, we use data structures to collect and organize data. The goal
    is to prepare the data so that we can perform operations efficiently and effectively.
    Data structures can be primitive or abstract. Software has built-in data structures,
    which are the primitive data structures, or we can define them using our programming
    language. A primitive data structure is pre-defined. Some primitive data structures
    include integers, characters (**char**), and Boolean structures. Examples of abstract
    or user-defined data structures include arrays and two-dimensional arrays, stacks,
    trees and binary trees, linked lists, queues, and more.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在编码理论中，我们使用数据结构来收集和组织数据。目标是准备数据，以便我们可以高效和有效地执行操作。数据结构可以是原始的或抽象的。软件具有内置的数据结构，这些是原始的数据结构，或者我们可以使用编程语言定义它们。原始数据结构是预定义的。一些原始数据结构包括整数、字符（**char**）和布尔结构。抽象或用户定义的数据结构的示例包括数组和二维数组、栈、树和二叉树、链表、队列等。
- en: User-defined data structures have different characteristics. For example, they
    can be linear or non-linear, homogeneous or non-homogeneous, and static or dynamic.
    If we need to arrange data in a linear sequence, we can use an array, which is
    a linear data structure. If our data is not linear, we can use non-linear data
    structures, such as graphs. When we have data that is of a similar type, we use
    homogeneous data structures.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的数据结构具有不同的特征。例如，它们可以是线性的或非线性的，均匀的或非均匀的，静态的或动态的。如果我们需要将数据排列成线性序列，我们可以使用数组，这是一种线性数据结构。如果我们的数据不是线性的，我们可以使用非线性数据结构，例如图形。当我们有相似类型的数据时，我们使用均匀的数据结构。
- en: Keep in mind that an array, for example, is both a linear and homogeneous data
    structure. Non-homogeneous or heterogeneous data structures have dissimilar data.
    An example of a non-homogeneous data structure a user can create is a class. The
    difference between a static and a dynamic data structure is that the size of a
    static structure is fixed, while a dynamic structure is flexible in size. To build
    a better understanding of data structures, we will explore them through problem
    solving using the computational thinking elements throughout this book. We will
    revisit data structures again very briefly at the end of this chapter, as they
    relate to data types, which are discussed then.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，例如，数组既是线性的又是均匀的数据结构。非均匀或异质数据结构具有不同的数据。用户可以创建的非均匀数据结构的一个例子是类。静态和动态数据结构的区别在于静态结构的大小是固定的，而动态结构的大小是灵活的。为了更好地理解数据结构，我们将通过本书中的计算思维元素来解决问题，再次简要地回顾数据结构，因为它们与数据类型有关，那时会讨论。
- en: Information theory
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信息理论
- en: '**Information theory** is defined as a mathematical study that allows for the
    coding of information so that it can be transmitted through computer circuits
    or telecommunications channels. The information is transmitted through sequences
    that may contain symbols, impulses, and even radio signals.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**信息理论**被定义为一种数学研究，允许对信息进行编码，以便通过计算机电路或电信信道进行传输。信息通过可能包含符号、脉冲甚至无线电信号的序列进行传输。'
- en: 'In information theory, computer scientists study the quantification of information,
    data storage, and information communication. Information can be either analog
    or digital in information theory. **Analog data** refers to information represented
    by an analog signal. In turn, an analog signal is a continuous wave that changes
    over a given time period. A **digital signal** displays data as binary, that is,
    as a discrete wave. We represent analog waves as sine waves and digital waves
    as square waves. The following graph shows the sine curve as a function of value
    over time:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在信息理论中，计算机科学家研究信息的量化、数据存储和信息通信。信息在信息理论中可以是模拟的或数字的。**模拟数据**指的是由模拟信号表示的信息。反过来，模拟信号是随着给定时间段的连续波动。**数字信号**将数据显示为二进制，即离散波。我们将模拟波表示为正弦波，将数字波表示为方波。以下图显示了正弦曲线作为时间值的函数：
- en: '![Figure 1.5 – Analog signal'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.5 – 模拟信号'
- en: '](image/Figure_01.05_B15413.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: （图像/Figure_01.05_B15413.jpg）
- en: Figure 1.5 – Analog signal
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 – 模拟信号
- en: 'An analog signal is described by the key elements of a sine wave: amplitude,
    period, frequency, and phase shift:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟信号由正弦波的关键元素描述：振幅、周期、频率和相移：
- en: The **amplitude** is the height of the curve from its center. A sine curve repeats
    infinitely.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**振幅**是曲线从中心到其高度的高度。正弦曲线无限重复。'
- en: The **period** refers to the length of one cycle of the sine curve, that is,
    the length of the curve before it starts to repeat.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**周期**指的是正弦曲线的一个周期的长度，即曲线在开始重复之前的长度。'
- en: 'The **frequency** and the period of the sine curve have an inverse relationship:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正弦曲线的**频率**和周期呈反比关系：
- en: '![](image/Formula_B15413_01_010.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Formula_B15413_01_010.jpg)'
- en: 'In relation to the inverse relationship, we can also say:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 与反比关系相关，我们也可以说：
- en: '![](image/Formula_B15413_01_011.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Formula_B15413_01_011.jpg)'
- en: 'The **phase shift** of a sine curve is how much the curve shifts from 0\. This
    is shown in the following graph:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正弦曲线的**相移**是曲线从0处的偏移量。这在下图中显示：
- en: '![Figure 1.6 – Phase shift examples'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.6 - 相移示例'
- en: '](image/Figure_01.06_B15413.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_01.06_B15413.jpg)'
- en: Figure 1.6 – Phase shift examples
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 - 相移示例
- en: 'In contrast, digital signal graphs look like bar graphs or histograms. They
    only have two data points, 0 or 1, so they look like boxy hills and valleys:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，数字信号图看起来像条形图或直方图。它们只有两个数据点，0或1，所以它们看起来像是方盒状的山丘和山谷：
- en: '![Figure 1.7 – Digital signal'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.7 - 数字信号'
- en: '](image/Figure_01.07_B15413.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_01.07_B15413.jpg)'
- en: Figure 1.7 – Digital signal
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 - 数字信号
- en: '**Digital signals** have finite sets of discrete data. A dataset is discrete
    in that it contains individual and distinct data points. For analog signals, the
    data is continuous and infinite. When working with computer science, both types
    of signals are important and useful. We will explore digital signals in some of
    the applications in later problems throughout the book, and specifically in the
    problems presented in [*Chapter 16*](B15413_16_Final_SK_ePub.xhtml#_idTextAnchor219),
    *Advanced Applied Computational Thinking Problems*.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**数字信号**具有有限的离散数据集。数据集是离散的，因为它包含单独和不同的数据点。对于模拟信号，数据是连续的和无限的。在计算机科学中，这两种类型的信号都很重要和有用。我们将在本书的后续问题中探索数字信号，并特别在[*第16章*](B15413_16_Final_SK_ePub.xhtml#_idTextAnchor219)中，*高级应用计算思维问题*中探索数字信号的应用。'
- en: Automata theory
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动机理论
- en: '**Automata theory** is one of the most fascinating topics in theoretical computer
    science. It refers to the study of machines and how calculations can be completed
    in the most reliable and efficient way. Automata theory involves the physical
    aspects of simple machines as well as logical processing. So, *what exactly is
    automata used for and how does it work?*'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动机理论**是理论计算机科学中最迷人的话题之一。它涉及研究机器以及如何以最可靠和高效的方式完成计算。自动机理论涉及简单机器的物理方面以及逻辑处理。那么，*自动机到底用于什么，它是如何工作的呢？*'
- en: Automata are devices that use predetermined conditions to respond to outside
    input. When you look at your thermostat, you're working with an automata. You
    set the temperature you want and the thermostat reacts to an outside source to
    gather information and adjust the temperatures accordingly.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 自动机是使用预定条件来响应外部输入的设备。当你看你的恒温器时，你正在使用一个自动机。你设置你想要的温度，恒温器会对外部来源进行信息收集并相应地调整温度。
- en: Another example of automata are surgical robots. These robots can improve the
    outcomes of surgeries for patients and are being improved upon constantly. Since
    the goal of automata theory is to make machines that are reliable and efficient,
    it is a critical piece in the development of artificial intelligence and smart
    robotic machines such as surgical robots.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 自动机的另一个例子是外科手术机器人。这些机器人可以改善患者的手术结果，并不断得到改进。由于自动机理论的目标是制造可靠和高效的机器，它是人工智能和智能机器（如外科手术机器人）发展中的关键部分。
- en: Formal language theory
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 形式语言理论
- en: '**Formal language theory** is often tied to automata theory in computer science.
    Formal language is the study of the syntax, grammar, vocabulary, and everything
    involving a formal language. In computer science, formal language refers to the
    logical processing and syntax of computer programming languages. With regard to
    automata, the machines process the formal language to perform the tasks or code
    provided for it.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**形式语言理论**在计算机科学中通常与自动机理论联系在一起。形式语言是研究语法、语法、词汇和一切涉及形式语言的学科。在计算机科学中，形式语言指的是计算机编程语言的逻辑处理和语法。关于自动机，机器处理形式语言以执行为其提供的任务或代码。'
- en: Symbolic computation
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 符号计算
- en: '**Symbolic computation** is a branch of computational mathematics that deals
    with computer algebra. The terms *symbolic computation* and *computer algebra*
    are sometimes used interchangeably. Some programming software and languages are
    focused on the symbolic computations of mathematics formulas. Programs using symbolic
    computation perform operations such as polynomial factorization, simplifying algebraic
    functions or expressions, finding the greatest common divisor of polynomials,
    and more.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**符号计算**是计算数学的一个分支，涉及计算代数。术语*符号计算*和*计算代数*有时可以互换使用。一些编程软件和语言专注于数学公式的符号计算。使用符号计算的程序执行诸如多项式因式分解、简化代数函数或表达式、找到多项式的最大公约数等操作。'
- en: In this book, we will use computer algebra and symbolic computation when solving
    some real-world problems presented. Python allows us to not only perform the mathematical
    computations that may be required for problems, but also explore graphical representations
    or models that result from those computations. As we explore solutions to real-world
    problems, we will need to use various libraries or extensions to the Python programming
    language. More on that throughout *Part 2*, *Applying Python and Computational
    Thinking*, of this book, where we will explore the Python programming language
    in greater detail.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，当解决一些现实世界中出现的问题时，我们将使用计算机代数和符号计算。Python允许我们不仅执行可能需要的数学计算，还可以探索由这些计算产生的图形表示或模型。当我们探索解决现实世界的问题时，我们将需要使用Python编程语言的各种库或扩展。在本书的*第2部分*，*应用Python和计算思维*中，我们将更详细地探索Python编程语言。
- en: Computational geometry
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算几何
- en: Like symbolic computation, **computational geometry** lives in the branch of
    computer science that deals with computational mathematics. The algorithms we
    study in computational geometry are those that can be expressed with geometry.
    The analysis of the data is done with geometric figures, geometric analysis, data
    structures that follow geometric patterns, and more. The input and output of problems
    that require computational geometry are geometric.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 像符号计算一样，**计算几何**存在于处理计算数学的计算机科学分支中。我们在计算几何中研究的算法是可以用几何表达的。对数据的分析是通过几何图形，几何分析，遵循几何模式的数据结构等进行的。需要计算几何的问题的输入和输出是几何的。
- en: When thinking of geometry, we often revert to the figures we mostly associate
    with that branch of mathematics, such as polygons, triangles, and circles. That
    said, when we look at computational geometry, some of the algorithms are those
    that can be expressed by points, lines, other geometric figures, or those that
    follow a geometric pattern. Triangulation falls under this branch of computer
    science.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑几何时，我们经常会回到我们最常与数学分支相关联的图形，如多边形、三角形和圆。也就是说，当我们看计算几何时，一些算法是可以用点、线、其他几何图形或遵循几何模式的算法来表达的。三角测量属于计算机科学的这一分支。
- en: Triangulation of data is important for applications such as optical 3D measuring
    systems. We triangulate GPS signals to locate a phone, for example, which is used
    in law enforcement.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的三角测量对于光学3D测量系统等应用非常重要。我们三角测量GPS信号来定位手机，例如，这在执法中使用。
- en: There are many uses of triangulation in modern times, some of which we'll explore
    through real and relevant problems presented in this book.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代，三角测量有许多用途，其中一些我们将通过本书中提出的真实和相关问题进行探讨。
- en: Computational number theory
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算数论
- en: '**Number theory** is the branch of mathematics that studies integers and their
    properties. **Computational number theory** then is the study of algorithms used
    to solve problems in number theory. Part of the study of number theory is primality
    testing.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**数论**是研究整数及其性质的数学分支。**计算数论**是用于解决数论问题的算法的研究。数论研究的一部分是素性测试。'
- en: Algorithms created to determine whether input or output is prime have been used
    for many purposes. One of the most critically important uses and applications
    of primality testing and number theory is for encryption purposes. As our lives
    have moved to saving everything electronically, our most personal information,
    such as banking information, family information, and even social security numbers,
    live in some code or algorithm. It is important to encrypt such information so
    others cannot use or access it. Computational number theory and cryptography are
    intrinsically tied, as you will be able to explore later.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 用于确定输入或输出是否为素数的算法已被用于许多目的。素性测试和数论的一个最重要的用途和应用是用于加密目的。随着我们的生活转移到电子保存，我们最个人的信息，如银行信息、家庭信息，甚至社会安全号码，都存在某种代码或算法中。重要的是加密这样的信息，以便他人无法使用或访问。计算数论和密码学是内在联系的，您稍后将能够探索。
- en: Some of the theories presented are meant to help you understand how intertwined
    computer science theories are, their applications, and their relevance to what
    we do each day.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一些理论旨在帮助您了解计算机科学理论是如何交织在一起的，它们的应用以及它们与我们每天所做的工作的相关性。
- en: In this section, we learned about theoretical computer science. We also learned
    about its various theories.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们学习了关于理论计算机科学的知识。我们还学习了它的各种理论。
- en: Throughout this book, we will be using computational thinking (discussed further
    in [*Chapter 2*](B15413_02_Final_SK_ePub.xhtml#_idTextAnchor043), *Elements of
    Computational Thinking*) to help us tackle problems, from the most basic applications
    to some complex analyses, by defining and designing adequate algorithms that use
    these theories. Theoretical computer science is used to study a system's software,
    which we will explore next.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用计算思维（在[*第2章*](B15413_02_Final_SK_ePub.xhtml#_idTextAnchor043)中进一步讨论，*计算思维的要素*）来帮助我们解决问题，从最基本的应用到一些复杂的分析，通过定义和设计使用这些理论的适当算法。理论计算机科学用于研究系统软件，我们将在下一节中探讨。
- en: Learning about a system's software
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习系统软件
- en: '**System''s software** is used to perform multiple functions and communicate
    between the **operating system** (**OS**) of a computer, peripherals such as a
    keyboard and mouse, and firmware, which is permanently saved to a device and is
    needed for its operation, among other functions. These are part of the two main
    types of software: **system software** and **application software**.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统软件**用于执行多个功能，并在计算机的**操作系统**（**OS**）、外围设备（如键盘和鼠标）和固件之间进行通信。固件是永久保存在设备上并且需要用于其操作的软件，这些是两种主要类型的软件的一部分：**系统软件**和**应用软件**。'
- en: System software allows a computer to communicate between the hardware and the
    applications. Think of a smartphone. The phone is composed in its most basic form
    of the hardware, which includes the battery, cameras, memory, screen, and all
    the physical components and peripherals. The OS allows those components to be
    used by applications.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 系统软件允许计算机在硬件和应用程序之间进行通信。想想智能手机。手机在其最基本的形式中由硬件组成，包括电池、相机、内存、屏幕和所有物理组件和外围设备。操作系统允许应用程序使用这些组件。
- en: Take the camera application of a phone. The system's software lets the application
    communicate with the phone to use the camera to take a picture, edit it, save
    it, and share it. A computer's OS also allows the hardware to communicate with
    programs. A design program will use the mouse or other peripheral that can be
    used to draw, create, use a touchscreen if available, and more.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 手机的相机应用程序。系统软件让应用程序与手机通信，使用相机拍照，编辑，保存和分享照片。计算机的操作系统也允许硬件与程序通信。设计程序将使用鼠标或其他外围设备来绘制，创建，使用触摸屏（如果可用）等。
- en: If we do not know our system's software, we cannot create applications that
    can communicate effectively with our hardware, creating errors that can range
    from critical, or rendering a peripheral useless, to minor, where some components
    may work, say taking a picture, but others may not, such as saving or sharing
    the picture. The system's software is created in a way that provides us with the
    easiest, most efficient way to communicate between the hardware and applications.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不了解系统的软件，就无法创建能够有效与我们的硬件通信的应用程序，从而产生从关键错误到使外围设备无用的错误，或者是一些组件可能工作，比如拍照，但其他可能不工作，比如保存或分享照片的次要错误。系统软件是以一种方式创建的，以便为我们提供在硬件和应用程序之间进行最简单、最有效的通信方式。
- en: Operating systems
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作系统
- en: The OS performs multiple tasks. If you recall, error handling is part of an
    OS that checks for the most common possible errors in order to fix them without
    creating a larger problem or rendering an application worthless. Error handling
    is one of the operating system's most important tasks. In addition, the OS is
    responsible for the security of your computer or device. If you have a smartphone,
    you know that many updates to the OS are done in order to fix a security problem
    or to prevent a security breach. The OS is responsible for only allowing an authorized
    user to interact with the content that is stored in the device.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统执行多个任务。如果您回忆一下，错误处理是操作系统的一部分，它检查最常见的可能错误，以便在不造成更大问题或使应用程序变得毫无价值的情况下修复它们。错误处理是操作系统最重要的任务之一。此外，操作系统负责计算机或设备的安全。如果您有智能手机，您会知道许多操作系统的更新是为了解决安全问题或防止安全漏洞。操作系统负责只允许授权用户与设备中存储的内容进行交互。
- en: In addition to security and error handling, an OS is responsible for allocating
    memory for files and organizing them. When we save and delete a file or program,
    the memory that had been used is now free. However, there may be something saved
    immediately before and immediately after. The OS allocates and reallocates memory
    in order to maintain the best performance possible by the device. Memory management
    not only refers to user-saved files, but also to the RAM.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 除了安全和错误处理，操作系统还负责为文件分配内存并对其进行组织。当我们保存和删除文件或程序时，之前使用的内存现在是空闲的。但是，可能会有一些东西在之前和之后立即保存。操作系统通过分配和重新分配内存来维护设备的最佳性能。内存管理不仅指用户保存的文件，还指RAM。
- en: The file management of a device is also run by the OS. The OS will allocate
    the information as a filesystem, breaking the information into directories that
    are easily accessed by the user and by the device. The filesystem is responsible
    for keeping track of where files are, both from the OS and from the user, the
    settings for access to the device, which are evolving constantly, and how to access
    the files and understand the status of the files. Access to devices has changed
    in recent years.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 设备的文件管理也由操作系统运行。操作系统将信息分配为文件系统，将信息分成用户和设备轻松访问的目录。文件系统负责跟踪文件的位置，包括来自操作系统和用户的文件，不断发展的设备访问设置，以及如何访问文件和了解文件状态。近年来，对设备的访问方式发生了变化。
- en: While computers typically use a username and password, many devices can now
    be accessed through a fingerprint, a numerical or alpha-numerical passcode, facial
    recognition, images, paths, and more. As any of these topics evolve, the OS evolves
    as well and needs to be updated or recreated. The operating system is also responsible
    for allowing communication between the applications and the device.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然计算机通常使用用户名和密码，但现在许多设备可以通过指纹、数字或字母数字密码、面部识别、图像、路径等进行访问。随着这些主题的发展，操作系统也需要更新或重新创建。操作系统还负责允许应用程序与设备之间的通信。
- en: Application software
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用软件
- en: '**Application software** refers to software applications that perform a particular
    task. Think of the applications, or apps, that you can access from a mobile device.
    There are hundreds of types of applications, such as static games that live on
    the device, games that allow you to play with others remotely, news applications,
    e-book readers, fitness training apps, alarms, clocks, music, and so much more!
    Applications always perform some form of task, be it for personal use, business
    use, or educational use.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 应用软件是指执行特定任务的软件应用程序。想想你可以从移动设备访问的应用程序或应用。有数百种类型的应用程序，例如设备上的静态游戏，允许您远程与他人玩游戏的游戏，新闻应用程序，电子书阅读器，健身训练应用程序，闹钟，时钟，音乐等等！应用程序总是执行某种形式的任务，无论是个人使用、商业使用还是教育使用。
- en: Application software has multiple functions. You may find suites for productivity,
    such as **Microsoft** (**Office**) and **Google** products. When we need to do
    research on the internet, we use applications called browsers, which allow us
    to access the information and index the information so that we can access it.
    These browsers include **Google Chrome**, **Safari**, **Firefox**, **Edge**, **Opera**,
    and others. Browsers are used by both mobile devices and computers. Keep in mind
    that the purpose of an app is to perform a specific task for the end user.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 应用软件具有多个功能。您可能会发现用于生产力的套件，例如**Microsoft**（**Office**）和**Google**产品。当我们需要在互联网上进行研究时，我们使用称为浏览器的应用程序，它们允许我们访问信息并对信息进行索引，以便我们可以访问它。这些浏览器包括**Google
    Chrome**、**Safari**、**Firefox**、**Edge**、**Opera**等。浏览器既可用于移动设备，也可用于计算机。请记住，应用程序的目的是为最终用户执行特定任务。
- en: 'Important Note:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：
- en: 'As an aside, applications have grown exponentially since computers became household
    tools and phones started being used for other things rather than just for calling
    others. Early computers were used for just that: computing, or calculating mathematical
    analyses and tasks. That''s one of the reasons it is so important to have an understanding
    of the development and history of computer science. Since we cannot completely
    predict future uses of computer science and system software, the more we know
    about them, the more we will be able to create and adapt when technological advances
    happen.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，自从计算机成为家庭工具并且手机开始被用于除了打电话之外的其他用途以来，应用程序已经呈指数级增长。早期的计算机只用于计算数学分析和任务。这就是为什么了解计算机科学的发展和历史如此重要的原因之一。由于我们无法完全预测计算机科学和系统软件的未来用途，我们对它们了解得越多，就越能在技术进步发生时创造和适应。
- en: In this section, we learned about the system's software. We also learned about
    OS software and application software. For the purposes of this book, some applications
    will be more important as we sort through some of the problems presented, such
    as databases, productivity software, enterprise resource planning, and educational
    software.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了系统软件。我们还了解了操作系统软件和应用软件。对于本书的目的，一些应用程序将更为重要，因为我们在解决一些问题时需要排序，例如数据库、生产力软件、企业资源规划和教育软件。
- en: In the next section, we'll learn about computing.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习计算。
- en: Understanding computing
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解计算
- en: 'In computer science, **computing** refers to the activities that computers
    perform in order to communicate, manage, and process information. Computing is
    usually divided into four main areas: **algorithms**, **architecture**, **programming
    languages**, and **theory**.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中，**计算**指的是计算机执行以进行通信、管理和处理信息的活动。计算通常分为四个主要领域：**算法**、**架构**、**编程语言**和**理论**。
- en: Since, we've discussed theory and algorithms in previous sections, we will now
    focus on defining architecture and programming languages.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在之前的部分中已经讨论了理论和算法，现在我们将专注于定义架构和编程语言。
- en: Architecture
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 架构
- en: '**Computer architecture** refers to the set of instructions that interact with
    computer systems. In more basic terms, the architecture includes the instructions
    that allow software and hardware to interact. Computer architecture has three
    main subcategories: **Instruction Set Architecture** (**ISA**), **Microarchitecture**,
    and **System Design**.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**计算机架构**指的是与计算机系统交互的指令集。更基本的说，架构包括允许软件和硬件交互的指令。计算机架构有三个主要的子类别：**指令集架构**（**ISA**）、**微架构**和**系统设计**。'
- en: Instruction Set Architecture (ISA)
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指令集架构（ISA）
- en: 'The ISA is the boundary that exists between the hardware and the software.
    It is classified in multiple ways, but two common ones are **complex instruction
    set computer** (**CISC**) and **reduced instruction set computer** (**RISC**).
    These are defined as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: ISA是硬件和软件之间存在的边界。它以多种方式分类，但两种常见的是**复杂指令集计算机**（**CISC**）和**精简指令集计算机**（**RISC**）。它们的定义如下：
- en: '**CISC**: This is a computer that has explicit instructions for many tasks,
    such as simple mathematical operations, and loading something from memory. CISC
    includes everything that is not included in RISC.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CISC**：这是一种具有许多任务的显式指令的计算机，例如简单的数学运算和从内存加载内容。CISC包括RISC中不包括的所有内容。'
- en: '**RISC**: This is a computer with an architecture that has reduced **cycles
    per instruction** (**CPI**).'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RISC**：这是一种具有减少**每条指令周期**（**CPI**）的架构的计算机。'
- en: CISC tries to complete instructions with fewer steps, while RISC only uses simple
    instructions. CISC is multi-step, while RISC is single-step, performing one task
    at a time. The CISC process includes the instructions, the microcode conversion,
    microinstructions, and execution. By contrast, RISC includes instructions and
    execution.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: CISC试图用更少的步骤完成指令，而RISC只使用简单的指令。CISC是多步的，而RISC是单步的，一次执行一个任务。CISC过程包括指令、微码转换、微指令和执行。相比之下，RISC包括指令和执行。
- en: 'In CISC, **microcode** conversion refers to the interpretation of the language
    at a lower level. It takes into consideration the hardware resources to create
    microinstructions. **Microinstructions** are single instructions in microcode.
    After microcode creates the microinstructions, the microinstructions can be executed.
    The following diagram shows the process for both RISC and CISC:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在CISC中，**微码**转换指的是在较低级别解释语言。它考虑硬件资源来创建微指令。**微指令**是微码中的单个指令。微码创建微指令后，可以执行微指令。以下图表显示了RISC和CISC的过程：
- en: '![Figure 1.8 – Difference between RISC and CISC'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.8 - RISC和CISC之间的差异'
- en: '](image/Figure_01.08_B15413.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_01.08_B15413.jpg)'
- en: Figure 1.8 – Difference between RISC and CISC
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8 - RISC和CISC之间的差异
- en: Both RISC and CISC are necessary for computer programmers. There are advantages
    and disadvantages to having a single-step process (RISC) versus a multi-step process
    (CISC). RISC reduces the cycles per instruction, doing one thing at a time. CISC
    reduces the instructions in a program, but at the cost of cycles per instruction.
    Depending on what our needs are, we can choose the best path to take.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: RISC和CISC对计算机程序员来说都是必不可少的。单步过程（RISC）与多步过程（CISC）相比有优势和劣势。RISC减少了每条指令的周期，一次只做一件事。CISC减少了程序中的指令，但以每条指令的周期为代价。根据我们的需求，我们可以选择最佳路径。
- en: Programming languages
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程语言
- en: 'Programming languages are the way we write instructions for computers and other
    devices. Different languages are used depending on what is needed, ease of use,
    and much more. Examples of programming languages include the following:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言是我们为计算机和其他设备编写指令的方式。根据需要、易用性等因素，使用不同的语言。编程语言的例子包括以下内容：
- en: '**Ruby** and **Python**: Ruby is a programming language mostly used for web
    applications. Ruby is stable and easy to use; however, many developers choose
    to use Python over Ruby because Python is faster. Although Ruby has not been as
    popular and had some performance issues, the language is very much alive in 2019
    and continues to grow. Python, on the other hand, is widely used for multiple
    purposes, such as web applications, user interface applications, and websites,
    among others. We will explore Python in greater depth later on in this book.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ruby和Python：Ruby是主要用于Web应用程序的编程语言。Ruby稳定且易于使用；然而，许多开发人员选择使用Python而不是Ruby，因为Python更快。尽管Ruby并不像Python那样受欢迎并且存在一些性能问题，但该语言在2019年仍然非常活跃并持续增长。另一方面，Python被广泛用于多种用途，如Web应用程序、用户界面应用程序和网站等。我们将在本书的后面更深入地探讨Python。
- en: '**C**: The C languages are a critically important part of computer science,
    as C was the first language used and is still the most widely used language. C
    has been around since 1972, when Dennis Ritchie invented it, but it has been used
    by others since 1978, when it was first published. While other languages have
    grown in popularity since, C is still used in 2019\. Some of its uses include
    operating systems, hardware drivers, and applications, among others. C is a base-level
    language, which means it requires almost no abstraction.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C：C语言是计算机科学的一个非常重要的部分，因为C是第一种使用的语言，仍然是最广泛使用的语言。C自1972年以来一直存在，当时Dennis Ritchie发明了它，但自1978年首次发布以来就被其他人使用。尽管其他语言自那时以来变得更受欢迎，但C在2019年仍在使用。它的一些用途包括操作系统、硬件驱动程序和应用程序等。C是一种基本级别的语言，这意味着它几乎不需要抽象。
- en: '**C++**: C++ was developed by Bjarne Stroustrup as an extension of C in 1985\.
    The goal of the language was to add object-oriented capabilities. The language
    is still widely used both in conjunction with the C language in operating systems
    and for other software. C++ is an intermediate-level programming language.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++：C++是由Bjarne Stroustrup于1985年作为C的扩展开发的。该语言的目标是添加面向对象的能力。该语言仍然广泛用于操作系统和其他软件中与C语言一起使用。C++是一种中级编程语言。
- en: '**C#**: C# (C sharp) is a high-level programming language. Much like C++, it
    has object-oriented capabilities and is an extension of the C programming language.
    One of the main differences between C++ and C# is that C++ uses machine code while
    C# uses bytecode. Machine code can be executed directly by a computer. Bytecode
    has to be compiled, so it is considered a low-level code that needs to be interpreted.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C#：C#（C sharp）是一种高级编程语言。与C++类似，它具有面向对象的能力，并且是C编程语言的扩展。C++和C#之间的主要区别之一是C++使用机器代码，而C#使用字节码。机器代码可以直接由计算机执行。字节码必须被编译，因此被认为是需要解释的低级代码。
- en: '**Swift**: The Swift programming language was developed by **Apple Inc.** in
    2014\. As programming languages go, Swift is one of the newest. Apple released
    it as an open source programming language with **version 2.2**, which was released
    in 2015\. The language is considered to be a general-purpose and compiled programming
    language.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swift：Swift编程语言是由**苹果公司**于2014年开发的。就编程语言而言，Swift是最新的之一。苹果在2015年发布了**2.2版本**作为开源编程语言。该语言被认为是一种通用和编译的编程语言。
- en: '**Scratch**: Scratch was developed as a visual programming, block-coding language
    in 2002 by **MIT Media Lab**. As a block programming language, it is used extensively
    in schools to teach students of all ages how to code. Scratch is now adapted for
    multiple uses, including some robotic applications, such as Vex Code, incorporating
    machine learning and artificial intelligence, and much more. It is compatible
    with popular classroom peripherals such as the **Makey Makey**, which is a circuit
    that interacts with the computer and can be fully controlled with a Scratch program.
    While it is popular for educational purposes, the power of the programming language
    cannot be understated and the language itself and its functionalities continue
    to grow.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scratch：Scratch于2002年由**麻省理工学院媒体实验室**开发为一种视觉编程、块编码语言。作为一种块编程语言，它在学校中被广泛用于教授各个年龄段的学生如何编码。Scratch现在适用于多种用途，包括一些机器人应用程序，如Vex
    Code，结合了机器学习和人工智能等。它与**Makey Makey**等流行的课堂外设兼容，这是一种与计算机交互并可以完全由Scratch程序控制的电路。虽然它在教育目的上很受欢迎，但编程语言的强大和其功能本身仍在不断增长。
- en: '**Java** and **JavaScript**: JavaScript is a scripting language that is used
    only within browsers. It is used in the making of websites and web applications.
    Java, on the other hand, is a general-purpose programming language. JavaScript
    helps us make websites animated or add interactive functionalities to them. Contrastingly,
    Java is compiled into bytecode and is widely used in the development of Android
    devices and applications.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java和JavaScript：JavaScript是一种仅在浏览器中使用的脚本语言。它用于制作网站和Web应用程序。另一方面，Java是一种通用编程语言。JavaScript帮助我们使网站动画化或为其添加交互功能。相比之下，Java被编译为字节码，并且广泛用于开发Android设备和应用程序。
- en: '**PHP**: PHP is otherwise known as **Hypertext Preprocessor**. Much like Java,
    it is a general-purpose programming language. It is widely available, as it is
    open source. PHP is used in website design and applications and is considered
    to be easy to learn, yet has many advanced features. PHP can also be used to write
    desktop applications.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP：PHP又称为**超文本预处理器**。与Java类似，它是一种通用编程语言。它是开源的，因此广泛可用。PHP用于网站设计和应用程序，并被认为易于学习，但具有许多高级功能。PHP也可以用于编写桌面应用程序。
- en: '**SQL**: SQL, or **structured query language**, is a programming language used
    to interact with data. SQL is domain-specific. It has been around for almost as
    long as C, making its first appearance in 1974\. The main importance of SQL is
    that it can interact with databases, where other languages are not able to do
    so.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL：SQL，或**结构化查询语言**，是一种用于与数据交互的编程语言。SQL是特定领域的。它自1974年首次出现以来几乎与C一样重要。SQL的主要重要性在于它可以与数据库交互，而其他语言无法做到这一点。
- en: In computational thinking, we use many different programming languages, depending
    on what our goals are, what information we have or need, and what our application
    or software requirements are. Choosing a language is dependent on not just our
    knowledge of the language, but the possible functionalities of the language.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算思维中，我们使用许多不同的编程语言，这取决于我们的目标是什么，我们有或需要什么信息，以及我们的应用程序或软件要求是什么。选择一种语言不仅取决于我们对语言的了解，还取决于语言的可能功能。
- en: We will get to work more extensively with Python in this book because of its
    open source nature, ease of use, and the large number of applications it can be
    used for. However, Python is not the only option. Knowing about other languages
    is important, especially for developers.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Python具有开放源代码的特性、易于使用以及可以用于大量应用程序，我们将在本书中更广泛地使用Python。然而，Python并不是唯一的选择。了解其他语言也很重要，特别是对于开发人员来说。
- en: In this section, we learned about computing and a few of its areas, namely,
    architecture and programming languages. We also learned about the ISA and its
    types, along with an introduction to various programming languages. In the next
    section, we'll look at data types and structures.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了计算和它的一些领域，即架构和编程语言。我们还学习了ISA及其类型，以及对各种编程语言的介绍。在下一节中，我们将看看数据类型和结构。
- en: Learning about data types and structures
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习数据类型和结构
- en: 'In computer science, data types and structures are two distinct things:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中，数据类型和结构是两个不同的东西：
- en: A **data type** is a basic classification. Some data types include integers,
    float, and strings.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据类型**是一种基本分类。一些数据类型包括整数、浮点数和字符串。'
- en: '**Data structures** use multiple types of data types. They can organize the
    information into the memory and determine how we access the information.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据结构**使用多种数据类型。它们可以将信息组织到内存中，并确定我们如何访问信息。'
- en: Let's look at these in more detail in the following sections.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的部分更详细地看一下这些。
- en: Data types
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据类型
- en: As mentioned, data types are basic classifications. They are variables that
    are used throughout a program and can only exist with one classification. There
    are different classes of data type. We will focus on **primitive** and **abstract**
    data types for now, but we will revisit this topic as we move through problems
    and design solutions.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，数据类型是基本分类。它们是程序中使用的变量，只能存在一个分类。有不同类的数据类型。我们现在将重点关注**原始**和**抽象**数据类型，但随着我们解决问题和设计解决方案，我们将重新讨论这个话题。
- en: 'Primitive data types include **byte**, **short**, **int**, **long**, **float**,
    **double**, **Boolean**, and **char**:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 原始数据类型包括**字节**、**短整型**、**整型**、**长整型**、**浮点型**、**双精度浮点型**、**布尔型**和**字符型**：
- en: A **byte** can store numbers from -128 to 127\. While these numbers can be stored
    as integers, or **int**, a byte uses less storage, so if we know the number is
    between those values, we can use a byte data type instead.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**字节**可以存储-128到127的数字。虽然这些数字可以存储为整数，或**int**，但字节使用的存储空间更少，所以如果我们知道数字在这些值之间，我们可以使用字节数据类型。
- en: A **short** is a number between -32,768 and 32,767.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**短整型**是-32,768到32,767之间的数字。'
- en: An integer, **int**, is used to store numbers between -2,147,483,648 and 2,147,483,647.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数**int**用于存储-2,147,483,648到2,147,483,647之间的数字。
- en: '**Long** is used to store numbers from -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**长整型**用于存储-9,223,372,036,854,775,808到9,223,372,036,854,775,807的数字。'
- en: A **float** allows us to save a decimal number.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浮点数**允许我们保存小数。'
- en: Decimal numbers can also be saved as **double**, which has more precision than
    a float.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十进制数也可以保存为**双精度浮点型**，它比浮点数具有更高的精度。
- en: '**Boolean** values are data types that are either `True` or `False`. So, a
    variable can be saved such that when its value is printed, the result will be
    saved as true or false.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布尔**值是数据类型，要么是`True`，要么是`False`。因此，可以保存变量，以便在打印其值时，结果将保存为真或假。'
- en: '**Char** is used to save a variable as a single character.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符**用于将变量保存为单个字符。'
- en: We'll look at data structures in the next section.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中研究数据结构。
- en: Data structures
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据结构
- en: As mentioned under the *Coding theory* section earlier in this chapter, data
    structures are used to collect and organize data in the most efficient and effective
    way possible. Data structures can be primitive, such as the built-in data structures
    in software, or abstract. Primitive data structures can also be defined using
    programming languages, but they are pre-defined. Some of the primitive data structures
    include the data types listed in the previous section, such as **chars** and **Boolean**
    structures.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章前面的*编码理论*部分所述，数据结构用于以最有效和最有效的方式收集和组织数据。数据结构可以是原始的，例如软件中的内置数据结构，也可以是抽象的。原始数据结构也可以使用编程语言定义，但它们是预定义的。一些原始数据结构包括前一节中列出的数据类型，如**字符**和**布尔**结构。
- en: '**Abstract data types** (**ADTs**) include the information for the structure
    and design of data types. Abstract data structures include arrays and two-dimensional
    arrays, stacks, trees and binary trees, linked lists, queues, and more, as mentioned
    in the *Coding theory* section earlier in this chapter. Lists can contain multiple
    instances of the same data values. These lists are countable, so we can find how
    many elements are in the list, reorder them, remove items, add items, and so on.
    Lists are widely used as linked lists, arrays, or dynamic arrays:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**抽象数据类型**（**ADTs**）包括数据类型的结构和设计信息。抽象数据结构包括数组和二维数组、栈、树和二叉树、链表、队列等，正如本章前面的*编码理论*部分所述。列表可以包含相同数据值的多个实例。这些列表是可计数的，因此我们可以找到列表中有多少元素，重新排序它们，删除项目，添加项目等。列表广泛用作链表、数组或动态数组：'
- en: A **linked list** means that each data element in the list is connected, or
    points, to the next one, regardless of where they are stored within the memory.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链表**意味着列表中的每个数据元素都连接或指向下一个数据元素，无论它们存储在内存的何处。'
- en: An **array** is ordered. The elements are read in order to be able to make sense.
    Think of an array as reading this sentence. You don't read the sentence as "*array
    an think reading as this of sentence.*" We read the sentence in order, from left
    to right, not in a jumbled order.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数组**是有序的。元素按顺序读取以便理解。把数组想象成阅读这个句子。你不会把句子读成“*数组一个思考阅读作为这的句子*”。我们按顺序从左到右读句子，而不是混乱的顺序。'
- en: '**Dynamic arrays** can be resized, which is important when choosing a data
    type.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态数组**可以调整大小，这在选择数据类型时很重要。'
- en: A **stack** ADT is a collection of elements and has two operations – push and
    pop. A push is used to add an element to the collection while a pop removes the
    most recent element.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**栈** ADT是元素的集合，有两个操作 - 推入和弹出。推入用于向集合中添加元素，而弹出则移除最近的元素。'
- en: A **queue** ADT is a linear data structure. As with a stack, we can add or remove
    elements. However, in a queue ADT, the point of deletion and the point of insertion
    are done at two different ends.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**队列** ADT是一种线性数据结构。与栈类似，我们可以添加或移除元素。但是，在队列ADT中，删除和插入的点在两个不同的端点进行。'
- en: As mentioned before, the data structures are concrete implementations of data
    types. How we add or remove elements from a collection, for example, is the data
    structure.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，数据结构是数据类型的具体实现。例如，我们如何向集合中添加或移除元素就是数据结构。
- en: This can all be slightly confusing, but we will be learning more about them
    through examples in later chapters. For now, understanding the definitions and
    simple examples is enough.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能有点令人困惑，但我们将通过后面章节中的示例来更多地了解它们。目前，理解定义和简单示例就足够了。
- en: Summary
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have learned some fundamentals of computer science in this chapter. We looked
    at how to convert from binary to base-10\. We also explored topics and theories
    in theoretical computer science. We learned about computing and data types and
    structures. These sections will allow us to understand the computational thinking
    process and how to tackle all types of problems presented, starting in [*Chapter
    2*](B15413_02_Final_SK_ePub.xhtml#_idTextAnchor043), *Elements of Computational
    Thinking*, of this book.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们学习了一些计算机科学的基础知识。我们学习了如何将二进制转换为十进制。我们还探讨了理论计算机科学中的主题和理论。我们学习了关于计算和数据类型以及数据结构的知识。这些部分将帮助我们理解计算思维过程以及如何解决各种问题，从本书的第二章《计算思维要素》开始。
- en: As we delve deeper into the computational thinking world and process, we will
    need to revisit some of the content of this chapter as we look at problems, search
    for the best way to solve them, and make decisions about how to write the algorithms.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们深入研究计算思维世界和过程，我们需要重新审视本章的一些内容，因为我们要解决问题，寻找最佳解决方案，并决定如何编写算法。
- en: Problems may have an infinite number of ways to be solved using algorithms.
    Understanding how processes work and which data structures are most suitable for
    our problems is imperative in creating the best solutions. Identifying the data
    types needed for the algorithms and how computers read data will only help us
    in writing the most effective and efficient algorithms.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 问题可能有无数种使用算法解决的方法。了解过程如何工作以及哪种数据结构最适合我们的问题对于创建最佳解决方案至关重要。确定算法所需的数据类型以及计算机如何读取数据只会帮助我们编写最有效和高效的算法。
- en: In the next chapter, we will learn about the computational thinking process
    and how to break down problems in order to design our algorithmic solutions.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习计算思维过程以及如何分解问题以设计我们的算法解决方案。
