- en: Unit Testing of GoPiGo3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GoPiGo3的单元测试
- en: 'After finishing the assembly of the hardware, in this chapter, you will get
    familiar with how GoPiGo3 works using the JupyterLab environment, a friendly interface
    that takes the structure of a notebook composed of human-readable paragraphs followed
    by Python code snippets. You will produce two versions of each test program: the
    JupyterLab notebook and the pure Python script.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成硬件组装后，在本章中，您将通过JupyterLab环境熟悉GoPiGo3的工作方式，这是一个友好的界面，它采用由人类可读段落和Python代码片段组成的笔记本结构。您将为每个测试程序产生两个版本：JupyterLab笔记本和纯Python脚本。
- en: Using these programming tools, you will test each sensor/actuator individually
    and check that they're working properly while learning about the technology behind
    each of them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些编程工具，您将单独测试每个传感器/执行器，并检查它们是否正常工作，同时了解每个技术背后的知识。
- en: 'We will be covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Getting started with Python programming under the user-friendly environment
    Jupyterlab
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Jupyterlab友好的环境中开始Python编程
- en: 'Testing the robot perception: distance sensor, line follower, and 2D'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试机器人感知：距离传感器、循线传感器和2D
- en: 'Testing the robot actuation: motors and encoders'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试机器人动作：电机和编码器
- en: If you follow the practical exercises, you'll learn how the different packages
    (sensors, motors, and so on) build up the whole robot, what is measured with sensors,
    and how to systematically test sensors and actuators at the unit level.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遵循实际练习，您将了解不同的包（传感器、电机等）如何构建整个机器人，传感器测量了什么，以及如何系统地测试传感器和执行器。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code for the first section, *Getting started with Python and Jupyterlab*,
    is included within the image of *DexterOS*, the custom operating system supplied
    by the manufacturer of GoPiGo3\. In [Chapter 1](9bb411d1-934c-4497-aad4-7ad770d3783c.xhtml)*, Assembling
    the Robot*, we explained how to get this image and burn it to an SD card. This
    was explained in the *Quick hardware testing* section in the *Getting started
    with DexterOS* sub-section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分的代码，*Python和Jupyterlab入门*，包含在GoPiGo3制造商提供的自定义操作系统 *DexterOS* 的图像中。在[第1章](9bb411d1-934c-4497-aad4-7ad770d3783c.xhtml)*组装机器人*中，我们解释了如何获取此图像并将其烧录到SD卡中。这已在*快速硬件测试*部分和*DexterOS入门*子部分的*入门*部分中解释。
- en: The code for this chapter is in the GitHub repository of the book, located at
    [https://github.com/PacktPublishing/Hands-On-ROS-for-Robotics-Programming/tree/master/Chapter2_Unit_Tests. ](https://github.com/PacktPublishing/Hands-On-ROS-for-Robotics-Programming/tree/master/Chapter2_Unit_Tests)At
    the beginning of the *Unit testing of sensors and drives* section, we explain
    how to clone the code locally in the Raspberry Pi.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码位于本书的GitHub仓库中，位于[https://github.com/PacktPublishing/Hands-On-ROS-for-Robotics-Programming/tree/master/Chapter2_Unit_Tests.](https://github.com/PacktPublishing/Hands-On-ROS-for-Robotics-Programming/tree/master/Chapter2_Unit_Tests)在*单元测试传感器和驱动器*部分的开始，我们解释了如何在Raspberry
    Pi上本地克隆代码。
- en: Getting started with Python and JupyterLab
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Jupyterlab友好的环境中开始Python编程
- en: '**JupyterLab** is a very extensive tool in the Python community because it
    lets you write a program as if you were solving a mathematics problem in a school
    class. That is to say, you write the heading, then the problem statement and the
    initial data. After this declaration, you write a paragraph explaining the operation
    that you are going to perform, and then you write the Python line(s) that perform
    such operation in a *code cell*. For every operation you repeat the same steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**JupyterLab** 是Python社区中的一个非常全面的工具，因为它允许您编写程序，就像在学校课堂上解决数学问题一样。也就是说，您编写标题，然后是问题陈述和初始数据。在此声明之后，您编写一个段落来解释您将要执行的操作，然后编写执行该操作的Python行（代码单元格）。对于每个操作，您重复相同的步骤：'
- en: A human-readable paragraph explaining the next operation, which is formatted
    with the well-known *markdown syntax* [https://commonmark.org/help/](https://commonmark.org/help/).
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个人类可读的段落解释下一个操作，该段落使用众所周知的 *markdown语法* 格式化。[https://commonmark.org/help/](https://commonmark.org/help/)
- en: A code cell with the lines of Python that perform the operation.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含执行操作的Python代码行的代码单元格。
- en: Repeat steps 1 and 2 for every code snippet that perform a single operation.
    The final one will provide the solution to the problem..
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对每个执行单个操作的代码片段重复步骤1和2。最后一个将提供问题的解决方案。
- en: 'Here''s a self-explaining example for reading the distance sensor of GoPiGo3:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个自解释的示例，用于读取GoPiGo3的距离传感器：
- en: '![](img/c8c23cb7-4fd9-4da5-84a8-a8c43a474b81.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8c23cb7-4fd9-4da5-84a8-a8c43a474b81.png)'
- en: Next, we are going to explain how to launch JupyterLab for GoPiGo3.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将解释如何为 GoPiGo3 启动 JupyterLab。
- en: Launching JupyterLab for GoPiGo3
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动 GoPiGo3 的 JupyterLab
- en: 'In DexterOS, you have two lessons that explain both Jupyter notebooks and controlling
    the robot with Python:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DexterOS 中，你有两个课程解释了 Jupyter 笔记本和用 Python 控制机器人：
- en: 'You can access them by navigating to `http://mygopigo.com` or `http://10.10.10.10`,
    and click on LEARN, then Lessons in Python:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过访问 `http://mygopigo.com` 或 `http://10.10.10.10` 来访问它们，然后点击 LEARN，然后点击 Python
    中的课程：
- en: '![](img/c4b8cba5-bd1c-4606-8156-2005494a8a57.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4b8cba5-bd1c-4606-8156-2005494a8a57.png)'
- en: 'The JupyterLab environment is then launched, and in the left part of the window
    you will see two files:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后启动 JupyterLab 环境，在窗口的左侧你会看到两个文件：
- en: '`1_Moving_Around.ipynb` is a Jupyter notebook that explains step-by-step how
    to move the robot forward and rotate it. Follow the instructions given in the
    notebook to execute the commands.'
  id: totrans-24
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1_Moving_Around.ipynb` 是一个 Jupyter 笔记本，逐步解释了如何让机器人前进和旋转。按照笔记本中的说明执行命令。'
- en: '`2_The_Environment.ipynb` is another example that explains how to deal with
    JupyterLab: run a cell, stop the execution, and so on. If you got stuck in the
    previous notebook, follow this one and return to the first afterward.'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2_The_Environment.ipynb` 是另一个例子，解释了如何处理 JupyterLab：运行一个单元、停止执行等等。如果你在前一个笔记本中遇到了困难，请按照这个笔记本操作，然后返回到第一个笔记本。'
- en: 'Now let''s try `1_Moving_Around.ipynb`. The following command makes the robot
    go forward 10 cm:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们尝试 `1_Moving_Around.ipynb`。以下命令使机器人前进 10 厘米：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you prefer to work in inches, use this command:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你更喜欢用英寸工作，使用这个命令：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you execute both in the same code cell, you will notice a small gap before
    the execution of the second command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你同时在同一个代码单元中执行这两个命令，你会在执行第二个命令之前注意到一个小间隙：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now let''s perform a physical test with the robot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们用机器人进行一次物理测试：
- en: 'Mark a sign on the floor in the starting point, drive 10 cm forward and 10
    cm backward and find how precise the motion is:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在起点在地面上做一个标记，向前开 10 厘米，向后开 10 厘米，看看运动有多精确：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You should find that it returns exactly to the starting point. Errors that we
    measured with a micrometer (three times) were +1.29 mm, -0.76 mm, and +2.16 mm.
    Positive means that it passed over the starting point when driving back, and negative
    means that it did not arrive at the starting point.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会发现它准确地回到了起点。我们用千分尺测量的误差（测量了三次）分别是 +1.29 毫米、-0.76 毫米和 +2.16 毫米。正数表示在倒车时它通过了起点，而负数表示它没有到达起点。
- en: 'If you add the distances (10 cm + 10 inches = 35.4 cm) into one forward command,
    and then make another command for moving back the same distance, the errors we
    measured were (again, we did it three times) -0.01 mm, -1.40 mm, and -0.72 mm:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你将距离相加（10 厘米 + 10 英寸 = 35.4 厘米）并放入一个向前命令中，然后发出另一个命令以相同的距离后退，我们测量的误差是（我们再次进行了三次测量）-0.01
    毫米、-1.40 毫米和 -0.72 毫米：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can see that the pause caused by using two commands introduces an error
    that is in the order of 1 mm. Using only one command for forward and one for backward
    substantially reduces the error.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，使用两个命令引入的暂停引入了一个大约 1 毫米的错误。仅使用一个命令向前和一个命令向后可以显著减少错误。
- en: 'We can perform a similar test for turning:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以对转向进行类似的测试：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Other useful commands are as follows:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他有用的命令如下：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To stop the robot, use this command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要停止机器人，使用这个命令：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It is crucial to note that software flow may not be compatible with robot physics.
    Try this sequence and observe what GoPiGo3 does:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 非常重要的是要注意，软件流程可能与机器人物理不兼容。尝试这个序列并观察 GoPiGo3 的表现：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It seems that only the last line is executed, which is `my_gopigo.left()`.
    What is actually happening is that the commands execute so quickly (a few milliseconds
    each) that the robot''s inertia does not allow enough time for GoPiGo to move
    forward, backward, or right. Remove the last line to check it: the only command
    you see physically executed is now `my_gopigo.right()`.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎只有最后一行被执行，即 `my_gopigo.left()`。实际上发生的情况是，命令执行得非常快（每次几毫秒），机器人的惯性不允许 GoPiGo
    有足够的时间向前、向后或向右移动。移除最后一行来检查它：现在你看到的唯一实际执行的命令是 `my_gopigo.right()`。
- en: One of the most challenging issues when programming a robot is understanding
    its dynamics, because something that may seem to be a software bug may be an unexpected
    physical response of the robot. So, prior to developing the software, you must
    make sure you understand the physics of the problem, including its mass (inertia),
    friction forces, the maximum load on the motors, the power supply limit, and the
    battery level. The list of variables coming from the physical world can be endless,
    and you should apply your knowledge of mechanics and electricity to successfully
    develop functional software.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在为机器人编程时，最具挑战性的问题之一是理解其动力学，因为可能看起来像是软件错误的东西，可能是机器人意外物理反应。因此，在开发软件之前，您必须确保您理解问题的物理原理，包括其质量（惯性）、摩擦力、电机上的最大负载、电源限制和电池水平。来自物理世界的变量列表可能是无限的，您应该应用您的力学和电学知识来成功开发功能软件。
- en: 'A possible solution for this simple case is to specify in the sequence the
    distance or angle you want it to move:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个简单案例的一个可能解决方案是在序列中指定您想要它移动的距离或角度：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To save your work in DexterOS, you have to do it from the `~/.lessons_python`
    folder. This is owned by `pi:users`, while the DexterOS user is `jupyter` (issue
    the `$ whoami` command in a terminal or just see it in the prompt). Go one level
    above in the tree, and create a folder there with any name you wish. Then save
    your changes in that location with File | Save Notebook As....
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 DexterOS 中保存您的作品，您必须从 `~/.lessons_python` 文件夹中进行。这个文件夹属于 `pi:users`，而 DexterOS
    用户是 `jupyter`（在终端中输入 `$ whoami` 命令或在提示符中查看）。在树中向上移动一级，并创建一个您想要的任何名称的文件夹。然后使用文件
    | 另存为... 在该位置保存您的更改。
- en: Hardware testing
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件测试
- en: 'To access these notebooks in DexterOS outside of the LEARN environment, navigate
    to [http://mygopigo.com](http://mygopigo.com/) or `http://10.10.10.10`, and click
    on Code in Python. JupyterLab will be launched:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 LEARN 环境之外访问 DexterOS 中的这些笔记本，请导航到 [http://mygopigo.com](http://mygopigo.com/)
    或 `http://10.10.10.10`，然后点击 Python 中的代码。JupyterLab 将启动：
- en: '![](img/e6cd7f57-e741-4fdc-85ec-25dbde6eac35.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6cd7f57-e741-4fdc-85ec-25dbde6eac35.png)'
- en: 'In the file manager view on the left side of the screen, you will find these
    two notebooks:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕左侧的文件管理器视图中，您将找到这两个笔记本：
- en: 'One of them is `First Ride Around.ipynb`, whichprovides a widget to drive the
    robot with a visual panel:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其中一个是 `First Ride Around.ipynb`，它提供了一个用于通过视觉面板控制机器人的小部件：
- en: '![](img/bbd195b6-163a-44d5-831d-b2a51b8d2f57.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bbd195b6-163a-44d5-831d-b2a51b8d2f57.png)'
- en: The other notebook is `Hardware Testing.ipynb`, which runs specific tests for
    batteries, LEDs, and encoders. What we should expect in terms of GoPiGo3's behavior
    is addressed in the following subsection.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个笔记本是 `Hardware Testing.ipynb`，它为电池、LED灯和编码器运行特定的测试。以下小节中讨论了我们对 GoPiGo3 行为的预期。
- en: Testing battery, LEDs, and motors/encoders
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试电池、LED灯和电机/编码器
- en: Open the notebook and go through each cell to understand what it does.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开笔记本并逐个检查每个单元，以了解其功能。
- en: Battery level
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电池水平
- en: 'The following command reads and displays the current battery voltage*.* It
    should be above 9 V for GoPiGo3 to work properly. When the batteries are not charged
    enough, you will lose the Wi-Fi connection with the robot and you will have to
    recharge them or replace them with new batteries:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令读取并显示当前电池电压*.* 对于 GoPiGo3 正常工作，这个值应该高于 9 V。当电池电量不足时，您将失去与机器人的 Wi-Fi 连接，您必须充电或更换新电池：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, we will look at hardware information and voltage levels.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看硬件信息和电压水平。
- en: Hardware information and current voltage levels
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件信息和当前电压水平
- en: 'The next block of commands prints information of the manufacturer, hardware
    and firmware versions, and battery levels. The following relates to the output:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个命令块将打印制造商信息、硬件和固件版本以及电池水平。以下与输出相关：
- en: '*Battery voltage* is the same as before. The measurement gives a slightly different
    value, 9.294V, and it is OK.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*电池电压* 与之前相同。测量给出略有不同的值，9.294V，这是正常的。'
- en: '*5V voltage* is that of the power supply to the Raspberry Pi through its GPIO.
    GoPiGo red board has a power regulator that transforms the 9V raw input to a regulated
    5V. If the batteries are properly charged, this value should be very close to
    5V as shown here:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*5V 电压* 是通过 GPIO 向 Raspberry Pi 提供电源的电压。GoPiGo 红色电路板有一个电源调节器，将 9V 的原始输入转换为稳定的
    5V。如果电池充电良好，这个值应该非常接近 5V，如所示：'
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Next, we will check the LEDs and blinkers.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将检查 LED灯和闪烁灯。
- en: LEDs and blinkers
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LED灯和闪烁灯
- en: 'There are two LEDs on top of the board that simulate GoPiGo3''s eyes. By running
    the following block of code, they will change their color:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 板上顶部有两个LED灯，模拟GoPiGo3的眼睛。通过运行以下代码块，它们将改变颜色：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The blinkers are two small red LEDs underneath the red board at the front.
    The following code makes them blink 5 times:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 闪烁灯是位于前面红色板下方的两个小红灯。以下代码使它们闪烁5次：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Check it visually, and be aware that no message appears in the console.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 视觉检查，并注意控制台不会显示任何消息。
- en: Motors and encoders test
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电机和编码器测试
- en: 'The following cell will run for approximately 5 seconds and will report encoder
    readings:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个单元格将运行大约5秒，并将报告编码器读数：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And these are the results:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是结果：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We should see the message at the end telling if the test has passed. Do not
    worry at the moment about understanding the numbers: it is an internal test in
    which GoPiGo3 checks itself and reports whether it passed or failed.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到最后的消息，告诉我们测试是否通过。目前不必担心理解这些数字：这是一个GoPiGo3自我检查并报告是否通过或失败的内测。
- en: 'If it''s successful, you can go ahead with the following test. GoPiGo3 will
    drive forward for 10 cm and the output value at the end should be approximately
    10. Should this test fail, you can stop the robot by clicking the red **Stop**
    button at the top:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，你可以继续进行以下测试。GoPiGo3将向前行驶10厘米，最后的输出值应该大约是10。如果这个测试失败，你可以通过点击顶部红色的**停止**按钮来停止机器人：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If everything goes well, you will obtain this message:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你将获得以下消息：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Again, should this test fail you can stop the robot by pressing the red **Stop**
    button at the top. After these basic tests, we have enough understanding of GoPiGo3's
    hardware and software to perform the unit testing, which is the main goal of this
    chapter.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，如果这个测试失败，你可以通过按顶部红色的**停止**按钮来停止机器人。在这些基本测试之后，我们对GoPiGo3的硬件和软件有了足够的了解，可以执行单元测试，这是本章的主要目标。
- en: Unit testing of sensors and drives
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传感器和驱动单元测试
- en: 'In this section, we will run some simple scripts in Python by using Jupyter
    Notebooks. From a terminal in your laptop, clone the book repository and go into
    the `Chapter2_Unit_Tests` folder to access the files for this chapter:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过使用Jupyter Notebooks在Python中运行一些简单的脚本。从你的笔记本电脑中的终端，克隆书籍仓库并进入`Chapter2_Unit_Tests`文件夹以访问本章的文件：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: For completeness, we have included the notebooks used in the previous section
    inside the `lessons_GettingStarted` folder.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整性，我们在`lessons_GettingStarted`文件夹中包含了上一节使用的笔记本。
- en: Quick start with sensors and motors
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用传感器和电机快速入门
- en: 'To enter the Python environment of your robot, switch on the red board and
    connect to the *GoPiGo* Wi-Fi network from your laptop. Then, visit the following
    URL in the browser:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要进入机器人的Python环境，打开红色板，并从你的笔记本电脑连接到*GoPiGo* Wi-Fi网络。然后，在浏览器中访问以下URL：
- en: '`http://10.10.10.10/python`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://10.10.10.10/python`'
- en: In JupyterLab, focus on the left-hand side, where the file storage is shown.
    To run any of the examples, you will have to manually upload to the location where
    you want to place it in the robot storage. Create a folder named  `Chapter2_Unit_Tests`and
    upload the required files. We will indicate at the beginning of each exercise
    which file we will use.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在JupyterLab中，关注左侧，那里显示了文件存储。要运行任何示例，你必须手动上传到你想在机器人存储中放置的位置。创建一个名为`Chapter2_Unit_Tests`的文件夹并上传所需的文件。我们将在每个练习的开始处指出我们将使用哪个文件。
- en: Driving around
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 驱动绕行
- en: 'The files in this sub-section are in the `./Chapter2_Unit_Tests/drivingAround` folder of
    the repository. You can upload them one by one. Afterward, launch a shell session
    in JupyterLab by opening a launcher tab:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本小节中的文件位于仓库的`./Chapter2_Unit_Tests/drivingAround`文件夹中。你可以逐个上传它们。之后，在JupyterLab中通过打开启动器标签页启动一个shell会话：
- en: 'Select the Terminal icon from the tab, as shown in the following screenshot:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从标签页中选择终端图标，如图所示：
- en: '![](img/19f1b176-6d0b-4600-9925-74a082473008.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19f1b176-6d0b-4600-9925-74a082473008.png)'
- en: 'Execute the scripts from the terminal by changing to their location:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过更改到它们的目录来从终端执行脚本：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The first script is `1-easyMotors.py`, and it plays a very simple sequence:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个脚本是`1-easyMotors.py`，它执行一个非常简单的序列：
- en: Move the motors forward for 1 second.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 电机向前移动1秒。
- en: Stop the motors for 1 second.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 电机停止1秒。
- en: Drive the robot for 50 cm and then stop.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 驱动机器人50厘米然后停止。
- en: Turn right for 1 second.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向右转1秒。
- en: Turn left for 1 second.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向左转1秒。
- en: Stop.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止。
- en: 'You can see the first part of the script in the following code listing, which
    shows the commands to move forward for 1 second, and then stop for another second:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下代码列表中看到脚本的第一个部分，它显示了前进1秒然后停止1秒的命令：
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The second part is shown here, and it includes the commands to drive forward
    50 cm, then turn right for 1 second, and then turn left for 1 second:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分如下所示，它包括前进50厘米，然后向右转1秒，然后向左转1秒的命令：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The next script is `2-driveSquare.py`, and it does what it says: it draws a
    square on the floor. If we use a `for` loop that makes a 90º rotation after each
    30 cm drive, we get a program with very few lines:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个脚本是 `2-driveSquare.py`，它做了它所说的：它在地板上画一个正方形。如果我们使用一个`for`循环，在每次驱动30厘米后进行90度旋转，我们得到一个行数非常少的程序：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `3-circularMoves.py` Python script makes GoPiGo3 travel a semicircle in
    one direction, and then in the opposite, returning to the starting point:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`3-circularMoves.py` Python脚本使GoPiGo3在一个方向上走半圆，然后在相反方向上走，返回起点：'
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The program `4-drawEight.py`combines arcs and straight paths to draw an 8 shape
    on the floor:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 程序 `4-drawEight.py` 将弧线和直线路径结合起来，在地板上绘制一个8形状：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, the program `5-accelerateForward.py` illustrates how to accelerate
    the robot. The sequence is pretty simple:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，程序 `5-accelerateForward.py` 展示了如何加速机器人。这个序列相当简单：
- en: Set an initial speed and an end speed.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置初始速度和结束速度。
- en: Calculate a step by dividing the interval between them by 20.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将它们之间的间隔除以20来计算步长。
- en: Run a loop that increases the speed in the step value in each iteration.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行一个循环，每次迭代增加步进值。
- en: Perform one iteration every 0.1 seconds.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每0.1秒执行一次迭代。
- en: 'After 2 seconds, GoPiGo3 will reach the end speed and will stop:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2秒后，GoPiGo3将达到最大速度并停止：
- en: '[PRE25]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Let's now test all of the sensors with which we have equipped the robot.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来测试我们为机器人配备的所有传感器。
- en: Distance sensor
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 距离传感器
- en: To communicate with the sensors, we will use the DI-sensors Python library [https://github.com/DexterInd/DI_Sensors](https://github.com/DexterInd/DI_Sensors).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与传感器通信，我们将使用DI-sensors Python库 [https://github.com/DexterInd/DI_Sensors](https://github.com/DexterInd/DI_Sensors)。
- en: First of all, we need to revise the port connections. This is what we will review
    now.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要修改端口连接。这就是我们现在要回顾的内容。
- en: Check port connections
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查端口连接
- en: 'The following diagram should be of great help when connecting sensors to GoPiGo3
    ports, in order to make sure that the hardware is correctly wired:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表在连接传感器到GoPiGo3端口时应非常有帮助，以确保硬件正确布线：
- en: '![](img/112f7869-1ea5-484f-9787-b236220fef92.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/112f7869-1ea5-484f-9787-b236220fef92.png)'
- en: 'Image courtesy: Dexter Industries: https://gopigo3.readthedocs.io/en/master/_images/gpg3_ports.jpg'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：Dexter Industries： https://gopigo3.readthedocs.io/en/master/_images/gpg3_ports.jpg
- en: 'From the previous chapter, you should remember the purpose of each port:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 从上一章，你应该记得每个端口的用途：
- en: Ports **AD1** and **AD2** are general-purpose *input/output* ports.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AD1**和**AD2**是通用*输入/输出*端口。'
- en: Ports **SERVO1** and **SERVO2** are the servo controller ports.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SERVO1**和**SERVO2**是伺服控制器端口。'
- en: The **I2C** ports are where you connect *I2C-enabled* devices.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**I2C**端口是您连接*I2C启用*设备的地方。'
- en: The **SERIAL** port is where you can connect *UART-enabled* devices.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**串行**端口是您可以连接*UART启用*设备的地方。'
- en: 'Given this description, check that sensors are connected as we described in
    the first chapter:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个描述，检查传感器是否按照我们在第一章中描述的方式连接：
- en: The **Distance sensor** should be plugged into **I2C-1**, the I2C port on the
    left side of GoPiGo3.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**距离传感器**应该插入到**I2C-1**，GoPiGo3左侧的I2C端口。'
- en: The Servo package should be connected to **SERVO1**.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 伺服包应该连接到**SERVO1**。
- en: The **Line follower** should be plugged into **I2C-2**, the I2C port on the
    right side.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线跟踪器**应该插入到**I2C-2**，GoPiGo3右侧的I2C端口。'
- en: The **IMU** sensor should be connected to **AD1** (on the left side).
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IMU**传感器应该连接到**AD1**（在左侧）。'
- en: Distance sensor unit test
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 距离传感器单元测试
- en: Although you have connected the distance sensor to the **I2C-1** port, be aware
    that GoPiGo3 software libraries will not require you to specify in the script
    which of the two ports you are using. It will be automatically detected.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您已经将距离传感器连接到**I2C-1**端口，但请注意，GoPiGo3软件库不会要求您在脚本中指定您使用的是两个端口中的哪一个。它将自动检测。
- en: 'The files for testing are located in the `./Chapter2_Unit_Tests/DI-distance` folder of
    the repository. You can upload them one by one to DexterOS:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 测试文件位于存储库的 `./Chapter2_Unit_Tests/DI-distance` 文件夹中。您可以逐个上传到DexterOS：
- en: '`di-distance_cm.py`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`di-distance_cm.py`'
- en: '`di-distance-easygopigo_mm.py`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`di-distance-easygopigo_mm.py`'
- en: 'Afterward, open a shell session in JupyterLab by opening a launcher window
    and selecting the terminal icon from it. Execute the scripts from the terminal
    by moving to their location:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开启动器窗口并从中选择终端图标，在JupyterLab中打开一个shell会话。通过移动到它们的位置来在终端中执行脚本：
- en: '[PRE26]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The first script is `di-distance_cm.py`. It takes a reading at a fixed time
    rate:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个脚本是`di-distance_cm.py`。它以固定的时间速率读取数据：
- en: '[PRE27]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The publishing interval is 0.1 seconds, as specified in the line `sleep(0.1)`.
    The detailed specification of the distance sensor API can be found at [https://di-sensors.readthedocs.io/en/master/api-basic.html#easydistancesensor](https://di-sensors.readthedocs.io/en/master/api-basic.html#easydistancesensor).
    The `my_sensor.read()` method provides the distance in centimeters, but there
    are an other two methods if you prefer to use other units:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 发布间隔为0.1秒，如`sleep(0.1)`行中指定。距离传感器API的详细说明可在[https://di-sensors.readthedocs.io/en/master/api-basic.html#easydistancesensor](https://di-sensors.readthedocs.io/en/master/api-basic.html#easydistancesensor)找到。`my_sensor.read()`方法提供厘米距离，但如果你更喜欢使用其他单位，还有另外两种方法：
- en: '`my_sensor.read_mm()` is for millimeters.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_sensor.read_mm()`用于毫米。'
- en: '`my_sensor.read_inch()` is for inches.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_sensor.read_inch()`用于英寸。'
- en: 'The second script, `di-distance-easygopigo_mm.py`, imports the GoPiGo3 library
    as per [https://github.com/DexterInd/GoPiGo3](https://github.com/DexterInd/GoPiGo3),
    which implicitly includes the sensor library, [https://github.com/DexterInd/DI_Sensors](https://github.com/DexterInd/DI_Sensors).
    You can see that it uses the same class methods to take readings. In this case,
    the function that reads the distance in millimeters is used:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个脚本`di-distance-easygopigo_mm.py`按照[https://github.com/DexterInd/GoPiGo3](https://github.com/DexterInd/GoPiGo3)导入GoPiGo3库，这隐式地包含了传感器库[https://github.com/DexterInd/DI_Sensors](https://github.com/DexterInd/DI_Sensors)。你可以看到它使用相同的类方法来读取数据。在这种情况下，使用的是读取毫米距离的函数：
- en: '[PRE28]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'For completeness, we have included in the folder of this chapter the two libraries:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整性，我们已将这两个库包含在本章的文件夹中：
- en: '`easysensors.py` for the sensors'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`easysensors.py`用于传感器'
- en: '`easygopigo3.py` for the robots'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`easygopigo3.py`用于机器人'
- en: 'If you inspect the latter, you will see this `import` line at the beginning
    of the file:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查后者，你将在文件开头看到这条`import`行：
- en: '[PRE29]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This way, we can incorporate the DI sensors you need to increase the perception
    capabilities of your robot. Let's go through an example to better understand the
    libraries provided by Dexter Industries.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们可以将所需的DI传感器集成到你的机器人中，以增加其感知能力。让我们通过一个例子来更好地理解Dexter Industries提供的库。
- en: GoPiGo3 API library
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GoPiGo3 API库
- en: 'The main class of the robot is `GoPiGo3`, and you can see the class structure
    in the following diagram. The **easysensors** library is imported (inherited)
    by the `EasyGoPiGo3`class, and so has access to all sensor methods. The class
    structure is shown in the following diagram:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人的主要类是`GoPiGo3`，你可以在以下图中看到类结构。`easysensors`库被`EasyGoPiGo3`类（继承）导入，因此可以访问所有传感器方法。类结构在以下图中展示：
- en: '![](img/64a7a7d3-b3ea-40f2-abe7-c754fa52aa5e.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/64a7a7d3-b3ea-40f2-abe7-c754fa52aa5e.png)'
- en: 'Image courtesy: Dexter Industries: https://gopigo3.readthedocs.io/en/master/_images/inheritance-e4cb3d2ae1367b2d98aab1a112a1c8e1b7cd9e47.png'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：Dexter Industries：https://gopigo3.readthedocs.io/en/master/_images/inheritance-e4cb3d2ae1367b2d98aab1a112a1c8e1b7cd9e47.png
- en: A summarized table with all the functions of the class is available at [https://gopigo3.readthedocs.io/en/master/api-basic/structure.html#functions-short-list](https://gopigo3.readthedocs.io/en/master/api-basic/structure.html#functions-short-list).
    The API library is covered in detail at [https://gopigo3.readthedocs.io/en/master/api-basic/easygopigo3.html](https://gopigo3.readthedocs.io/en/master/api-basic/easygopigo3.html)
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含该类所有功能的总结表格可在[https://gopigo3.readthedocs.io/en/master/api-basic/structure.html#functions-short-list](https://gopigo3.readthedocs.io/en/master/api-basic/structure.html#functions-short-list)找到。API库的详细内容可在[https://gopigo3.readthedocs.io/en/master/api-basic/easygopigo3.html](https://gopigo3.readthedocs.io/en/master/api-basic/easygopigo3.html)找到。
- en: 'Hence, using the `easygopigo3.py` library, you create an instance of your robot
    and initialize the sensors you need. For example, the distance sensor is initiated
    with this method of the class:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用`easygopigo3.py`库，你可以创建你的机器人实例并初始化所需的传感器。例如，距离传感器通过以下类方法进行初始化：
- en: '[PRE30]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In our script, this is accomplished in three lines:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的脚本中，这是通过三行实现的：
- en: '[PRE31]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the first line, you import the `easygopigo3` library. In the second line,
    you instantiate a robot object, and in the third line, you initialize the distance
    sensor. Then you are ready to acquire data from the sensor:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，您导入`easygopigo3`库。在第二行，您实例化一个机器人对象，在第三行，您初始化距离传感器。然后，您就可以从传感器获取数据了：
- en: '[PRE32]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In short, if you use the `easygopigo3.py` library, *the top-level object is
    the robot itself*. On the other hand, if you were using the sensors in a custom
    project that doesn't deal with GoPiGo, the top-level object is yet to be created
    unless you already have the corresponding library available. If you don't, it
    is your task to define a class that represents that entity (a weather station,
    for example) and import the DI sensors library. This is the topic of the next
    sub-section.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，如果您使用`easygopigo3.py`库，**顶层对象是机器人本身**。另一方面，如果您在一个不涉及GoPiGo的自定义项目中使用传感器，顶层对象尚未创建，除非您已经有了相应的库。如果没有，您需要定义一个表示该实体（例如气象站）的类，并导入DI传感器库。这是下一小节的主题。
- en: DI sensors API library
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DI传感器API库
- en: 'Each sensor type has its own class and methods. In the `./Chapter2_Unit_Tests/DI-distance/di-distance_cm.py` script,
    we were using the DI-sensors library. The class structure is shown in the following
    screenshot and explained at [https://di-sensors.readthedocs.io/en/master/structure.html#library-structure](https://di-sensors.readthedocs.io/en/master/structure.html#library-structure):'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 每种传感器类型都有自己的类和方法。在`./Chapter2_Unit_Tests/DI-distance/di-distance_cm.py`脚本中，我们使用了DI-sensors库。类结构在以下屏幕截图中有显示，并在[https://di-sensors.readthedocs.io/en/master/structure.html#library-structure](https://di-sensors.readthedocs.io/en/master/structure.html#library-structure)中进行了说明：
- en: '![](img/4f7277c6-10ae-4f61-b525-128cd404e13c.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4f7277c6-10ae-4f61-b525-128cd404e13c.png)'
- en: 'Image courtesy: Dexter Industries: https://di-sensors.readthedocs.io/en/master/_images/inheritance-a8243413ad98ddae26cdf121c775ad137c7f2e30.png'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由Dexter Industries提供：https://di-sensors.readthedocs.io/en/master/_images/inheritance-a8243413ad98ddae26cdf121c775ad137c7f2e30.png
- en: 'Summarized tables with methods for all DI sensors are shown at [https://di-sensors.readthedocs.io/en/master/structure.html#functions-short-list](https://di-sensors.readthedocs.io/en/master/structure.html#functions-short-list).
    You will find two alternatives of usage for each sensor:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 所有DI传感器的总结表格方法显示在[https://di-sensors.readthedocs.io/en/master/structure.html#functions-short-list](https://di-sensors.readthedocs.io/en/master/structure.html#functions-short-list)。您将找到每个传感器的两种使用方法：
- en: The **easy methods** – prepended with the `easy`prefix – are for quick usage
    and provide top-level functionalities. You can see the syntax on the right-hand
    side of the preceding diagram.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单方法**——以`easy`前缀开头——是为了快速使用，并提供顶层功能。您可以在前一个图例的右侧看到语法。'
- en: The **advanced methods** without the `easy` prefix are for developer use and
    provide low-level control.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有带`easy`前缀的**高级方法**是供开发者使用的，并提供低级控制。
- en: 'The distance sensor is managed with the following class:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 距离传感器由以下类管理：
- en: '[PRE33]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In our script,the sensor is initialized as follows::'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '在我们的脚本中，传感器初始化如下:: '
- en: '[PRE34]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The preceding lines are described as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的行描述如下：
- en: On the first line, you import the class of the distance sensor. Be aware that
    you need to import just the `EasyDistanceSensor` class from `di_sensors.easy_distance_sensor`.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一行，您导入距离传感器的类。请注意，您只需要从`di_sensors.easy_distance_sensor`导入`EasyDistanceSensor`类。
- en: On the second line, you instantiate the distance sensor object with the `Easy` class.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二行，您使用`Easy`类实例化距离传感器对象。
- en: 'Then you are ready to acquire data from the sensor:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您就可以从传感器获取数据了：
- en: '[PRE35]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Compare with the case of not using the `easy` option. The syntax is similar,
    the only difference being the removal of the `_easy` and `Easy` prefixes:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 与不使用`easy`选项的情况进行比较。语法类似，唯一的区别是去除了`_easy`和`Easy`前缀：
- en: '[PRE36]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The same scheme will apply to the other sensors we will cover later, specifically,
    the line follower and the IMU.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的方案将适用于我们稍后要介绍的其他传感器，特别是线跟踪器和IMU。
- en: Servo package
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 伺服包
- en: 'The servo package consists of a **Pulse Width Modulation** (**PWM**) servomotor.
    It is controlled in an open loop by applying a voltage that produces a proportional
    rotation of the motor shaft in a 180° amplitude coverage. In the following image
    there is a small rod that lets us visualize the rotation. In our GoPiGo3 assembly,
    we will see rotating the distance sensor:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服包由一个**脉冲宽度调制**（**PWM**）伺服电机组成。它通过施加产生电机轴在180°幅度范围内的成比例旋转的电压进行开环控制。在下面的图像中有一个小杆，使我们能够可视化旋转。在我们的GoPiGo3组装中，我们将看到旋转距离传感器：
- en: '![](img/bff8792a-e5b6-45d2-a7f3-6d260758da89.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bff8792a-e5b6-45d2-a7f3-6d260758da89.png)'
- en: 'Image courtesy: Dexter Industries: https://www.dexterindustries.com/wp-content/uploads/2017/06/GoPiGo3-Servo-Assembly-11-600x338.jpg'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：Dexter Industries：https://www.dexterindustries.com/wp-content/uploads/2017/06/GoPiGo3-Servo-Assembly-11-600x338.jpg
- en: The servo package is part of the GoPiGo3 API library described in the *Distance
    sensor unit test* section. Its API methods are detailed at [https://gopigo3.readthedocs.io/en/master/api-basic/sensors.html#servo](https://gopigo3.readthedocs.io/en/master/api-basic/sensors.html#servo).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服包是描述在 *距离传感器单元测试* 部分的 GoPiGo3 API 库的一部分。它的 API 方法在 [https://gopigo3.readthedocs.io/en/master/api-basic/sensors.html#servo](https://gopigo3.readthedocs.io/en/master/api-basic/sensors.html#servo)
    中详细说明。
- en: Next, we will carry out some unit tests to check that it rotates properly. Since
    we have mounted the distance sensor with the servo package, we can measure the
    distance to obstacles in a 180º field of view by rotating the servo. In the test,
    we will also calibrate the actual field of view your robot will be able to cover.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将执行一些单元测试来检查它是否能够正确旋转。由于我们已经将距离传感器与伺服包一起安装，我们可以通过旋转伺服来测量 180º 视场内的障碍物距离。在测试中，我们还将校准机器人能够覆盖的实际视场。
- en: Servo package unit test
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 伺服包单元测试
- en: 'The test consists of placing the distance sensor with respect to the servomotor
    shaft in an angular position that covers the entire front view of GoPiGo3, from
    left to right. All the explanations and code are in a Jupyter notebook located
    at `./Chapter2_Unit_Tests/DI-servo_package/servoCalibration.ipynb`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 测试包括将距离传感器相对于伺服电机轴放置在一个角度位置，这个位置覆盖了 GoPiGo3 的整个前方视图，从左到右。所有的解释和代码都在位于 `./Chapter2_Unit_Tests/DI-servo_package/servoCalibration.ipynb`
    的 Jupyter 笔记本中：
- en: 'First, we create the servo object from the `EasyGoPiGo3` class. To do this,
    we need to import the library and instantiate `GoPiGo3`:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们从 `EasyGoPiGo3` 类创建伺服对象。为此，我们需要导入库并实例化 `GoPiGo3`：
- en: '[PRE37]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Then we initiate the servo:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们初始化伺服：
- en: '[PRE38]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We check that we are able to fully rotate the servo. You should have unmounted
    the sensor to prevent collisions with the robot''s chassis:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们检查我们是否能够完全旋转伺服。你应该已经卸下传感器以防止与机器人底盘碰撞：
- en: '[PRE39]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then, move the servo to the middle of the interval, 90º, and attach the sensor
    so that it faces forward:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将伺服移动到区间的中间，90º，并将传感器安装好，使其朝向前方：
- en: '[PRE40]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Adjust the angle so that the sensor faces exactly forward. In our case, this
    angle is 95°. You should find out what yours is:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整角度，使传感器正好朝向前方。在我们的例子中，这个角度是 95°。你应该找出你自己的角度：
- en: '[PRE41]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Once we have checked the reference position, let''s set up the actual limits.
    To do that, find the angles that preclude any interference with the sensor by
    the robot chassis. In our case, these angles are 30º and 160º. Again, you should
    find what yours are:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们检查了参考位置，让我们设置实际限制。为此，找到防止机器人底盘干扰传感器的角度。在我们的例子中，这些角度是 30º 和 160º。同样，你应该找出你自己的角度：
- en: '[PRE42]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: That's all for the setup of the servo package with sensor distance.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就完成了带有距离传感器的伺服包的设置。
- en: For advanced users, there is another API library, **gopigo3**, that provides
    low-level access to the hardware in order for you to take full control of it.
    Although covering such low-level programming is not in the scope of the book,
    you are provided with a Python script, `Servo.py`, that briefly illustrates the
    usage of one of its methods. This script sets the rotation in terms of *counts*
    instead of *rotation angle*. We perform a loop when the counts go from 1000 to
    2001.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 对于高级用户，还有一个 API 库，**gopigo3**，它提供了对硬件的低级访问，以便您能够完全控制它。尽管本书的范围不包括低级编程，但您提供了一个
    Python 脚本，`Servo.py`，简要说明了其方法的使用。此脚本以 *计数* 而不是 *旋转角度* 来设置旋转。我们执行一个循环，当计数从 1000
    到 2001 时。
- en: This way, you have access to the full resolution of the servomotor, and you
    should have an idea of the size of the rotation steps it can provide.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，您就可以访问伺服电机的全部分辨率，并且应该对它能够提供的旋转步长的大小有一个概念。
- en: Line follower
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪线
- en: As mentioned in the first chapter, the line follower is composed of six pairs
    of emitter-receivers to sense six aligned points on the floor in order to determine
    how decentered the robot is with respect to the black line it will be following.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如第一章所述，跟踪线由六个发射器-接收器对组成，用于感应地板上的六个对齐点，以确定机器人相对于它将跟随的黑线的偏离程度。
- en: The line follower is also part of the GoPiGo3 API library. Its methods are detailed
    at [https://di-sensors.readthedocs.io/en/master/api-basic.html#easylinefollower](https://di-sensors.readthedocs.io/en/master/api-basic.html#easylinefollower).
    The unit test we are going to perform consists of validating that the sensor can
    tell which side of a black line the robot is.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 线路跟随器也是 GoPiGo3 API 库的一部分。其方法在[https://di-sensors.readthedocs.io/en/master/api-basic.html#easylinefollower](https://di-sensors.readthedocs.io/en/master/api-basic.html#easylinefollower)中有详细说明。我们将进行的单元测试包括验证传感器能否告知机器人位于黑色线哪一侧。
- en: Line follower unit test
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线路跟随器单元测试
- en: The Jupyter notebook for the test is `./CH2-uniTests/di-lineFollower/lineFollower_libraries.ipynb`.
    This notebook also shows you both the easy library, `di_sensors.easy_line_follower`,
    and the advanced version, `di_sensors.line_follower`, in action.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用的 Jupyter 笔记本是`./CH2-uniTests/di-lineFollower/lineFollower_libraries.ipynb`。这个笔记本还展示了简单的库，`di_sensors.easy_line_follower`，以及高级版本，`di_sensors.line_follower`，的实际应用。
- en: 'When the sensor reports *center*, this is because the robot is well centered
    on the black line, as shown in the next image. This means that the two external
    emitter-receiver pairs report *white*, while the pairs between them report *black*:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 当传感器报告**中心**时，这是因为机器人在黑色线路上很好地居中，如下一张图片所示。这意味着两个外部发射器-接收器对报告**白色**，而它们之间的对报告**黑色**：
- en: '![](img/c6db1ce0-ec37-449c-ad10-38d40b8b1ac5.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c6db1ce0-ec37-449c-ad10-38d40b8b1ac5.png)'
- en: 'When the sensor reports *left*, it means that the line is slightly to the left
    of the robot, as shown in the following photo. This means that the left-most pair
    reports *black*, the central ones *black*, and the rest *white*:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 当传感器报告**左侧**时，这意味着线路稍微在机器人左侧，如下一张照片所示。这意味着最左侧的对报告**黑色**，中间的对**黑色**，其余的对**白色**：
- en: '![](img/22e7c9e2-97d0-4b17-acf4-488e0250178f.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/22e7c9e2-97d0-4b17-acf4-488e0250178f.png)'
- en: 'If the robot ends up completely off the line, all the pairs report *white* and
    the line follower throws *white* overall. The opposite is also true: if all the
    pairs report *black*, it may be because the black line is too wide or the robot
    has been placed on a dark surface.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果机器人完全偏离了线路，所有对都会报告**白色**，线路跟随器总体上也会报告**白色**。反之亦然：如果所有对都报告**黑色**，可能是因为黑色线条太宽或者机器人被放置在了一个暗色的表面上。
- en: Inertial Measurement Unit (IMU)
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不惯性测量单元（IMU）
- en: 'With the supplied IMU, we have the following sensors:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 使用提供的惯性测量单元（IMU），我们有以下传感器：
- en: Magnetometer, three axes
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁力计，三轴
- en: Gyroscope, three axes
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 惯性测量单元（IMU），三轴
- en: Accelerometer, three axes
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加速度计，三轴
- en: As explained in the previous chapter, with these three sensors – once their
    calibration setup is complete – it is possible to obtain the absolute orientation
    of the robot in the 3D space, quantified in terms of Euler angles. Additionally,
    we also have the temperature because the DI IMU ships with a temperature sensor.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，有了这三个传感器——一旦完成校准设置——就可以获得机器人在3D空间中的绝对方向，用欧拉角来量化。此外，我们还有温度，因为 DI IMU 配备了温度传感器。
- en: IMU unit test
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IMU 单元测试
- en: The Jupyter notebook for the test is `./Chapter2_Unit_Tests/DI-IMU/IMU_reading.ipynb`.
    The corresponding DI sensor API library is documented at [https://di-sensors.readthedocs.io/en/master/examples/imu.html](https://di-sensors.readthedocs.io/en/master/examples/imu.html).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用的 Jupyter 笔记本是`./Chapter2_Unit_Tests/DI-IMU/IMU_reading.ipynb`。相应的 DI 传感器
    API 库在[https://di-sensors.readthedocs.io/en/master/examples/imu.html](https://di-sensors.readthedocs.io/en/master/examples/imu.html)上有文档说明。
- en: When running the notebook, you can check that the reported Euler angles are
    OK.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行笔记本时，你可以检查报告的欧拉角是否正确。
- en: Raspberry Pi
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Raspberry Pi
- en: Pi is an essential perception device for any robot. Take into account that about
    80% of the perception data that the human brain processes comes from vision. In
    this section, we are only going to test that Pi is able to take photos to check
    that it works properly. In *[Chapter 10](https://cdp.packtpub.com/hands_on_ros_for_robotics_programming/wp-admin/post.php?post=33&action=edit), Applying
    Machine Learning in Robotics*, we will use object recognition algorithms on images
    captured by the camera. Hence, the robot will exhibit smarter behavior and will
    be able to recognize colors, shapes, faces, and so on.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Pi 是任何机器人不可或缺的感知设备。考虑到大约80%的人类大脑处理的感觉数据来自视觉。在本节中，我们只将测试 Pi 是否能够拍照以检查其是否正常工作。在*[第10章](https://cdp.packtpub.com/hands_on_ros_for_robotics_programming/wp-admin/post.php?post=33&action=edit)，在机器人学中应用机器学习*，我们将使用相机捕获的图像上的对象识别算法。因此，机器人将表现出更智能的行为，能够识别颜色、形状、面孔等等。
- en: Pi unit test
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pi 单元测试
- en: The Jupyter notebook for the test is `./Chapter2_Unit_Tests/PiCamera/Taking_Photos.ipynb`.
    This simple example takes a photo and creates a histogram, that is, a chart showing
    how many colors and the amount of each color that is present in the image.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的 Jupyter 笔记本位于 `./Chapter2_Unit_Tests/PiCamera/Taking_Photos.ipynb`。这个简单的例子拍摄照片并创建直方图，即显示图像中每种颜色的数量和每种颜色的数量的图表。
- en: 'So, let''s take an image with few colors to make it easier to understand the
    information from the histogram. The following photo, taken with the GoPiGo3 ,
    has the characteristics we need:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们拍摄一张颜色较少的照片，以便更容易理解直方图的信息。以下是用 GoPiGo3 拍摄的照片，具有我们需要的特征：
- en: '![](img/968ed72c-ad85-41e9-a1f1-d20db6c041f6.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/968ed72c-ad85-41e9-a1f1-d20db6c041f6.png)'
- en: 'This is accomplished with the following code snippet:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过以下代码片段实现：
- en: 'First, we take the photo. Then we convert it to a JPG image format and save
    it, and, finally, we show the result on the screen:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们拍照。然后将其转换为 JPG 图像格式并保存，最后在屏幕上显示结果：
- en: '[PRE43]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Finally, we draw the histogram with this simple command:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们用这个简单的命令绘制直方图：
- en: '[PRE44]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'And this is the result:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '![](img/8c1d340e-d957-489c-8842-a74eae31dbb3.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8c1d340e-d957-489c-8842-a74eae31dbb3.png)'
- en: 'You may see that colors are concentrated into three points. The scale of the
    *x* axis goes from 0 (black) to 768 (white). This interval is explained by taking
    into account that 24-bit RGB pixels have values that go up to 768\. Let''s see
    what each vertical line means:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会看到颜色集中在三个点上。*x* 轴的刻度从 0（黑色）到 768（白色）。这个区间是通过考虑 24 位 RGB 像素值可以高达 768 来解释的。让我们看看每根垂直线代表什么：
- en: The line at *x* = 0 represents the zones that are black.
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 *x* = 0 的线上表示的是黑色区域。
- en: The line at *x* = 525 represents the more shiny area, which is the light bulb.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 *x* = 525 的线上表示的是更闪亮的区域，即灯泡。
- en: Finally, it is easy to infer that *x* = 250 corresponds to the lighter areas
    around the monitor, which appear to have a gray tone.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，很容易推断出 *x* = 250 对应的是显示器周围的较亮区域，看起来有灰色调。
- en: With this last test, we have validated that our robot has all of its sensors
    and drives working properly and we are ready to proceed to the next step, building
    functional behaviors.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这次最后的测试，我们验证了我们的机器人所有的传感器和驱动器都工作正常，我们准备进入下一步，构建功能行为。
- en: GoPiGo3 projects
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GoPiGo3 项目
- en: The official GoPiGo3 software hosted on Github at [https://github.com/DexterInd/GoPiGo3](https://github.com/DexterInd/GoPiGo3)
    provides several interesting projects. At this point, we recommend you clone the
    repository and upload some of these projects to the robot running DexterOS. The
    projects are located in this folder of the repository: [https://github.com/DexterInd/GoPiGo3/tree/master/Projects](https://github.com/DexterInd/GoPiGo3/tree/master/Projects).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Github 上托管的官方 GoPiGo3 软件提供了几个有趣的项目。[https://github.com/DexterInd/GoPiGo3](https://github.com/DexterInd/GoPiGo3)。在这个阶段，我们建议你克隆仓库并将其中的一些项目上传到运行
    DexterOS 的机器人。项目位于仓库的这个文件夹中：[https://github.com/DexterInd/GoPiGo3/tree/master/Projects](https://github.com/DexterInd/GoPiGo3/tree/master/Projects)。
- en: 'You can try, for example, the *Basic Robot Control *project, located at [https://github.com/DexterInd/GoPiGo3/tree/master/Projects/BasicRobotControl](https://github.com/DexterInd/GoPiGo3/tree/master/Projects/BasicRobotControl).
    You have the means to get full control of the drives, LEDs, and blinkers using
    the keys of your wireless keyboard that''s connected to the robot:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试，例如，位于 [https://github.com/DexterInd/GoPiGo3/tree/master/Projects/BasicRobotControl](https://github.com/DexterInd/GoPiGo3/tree/master/Projects/BasicRobotControl)
    的 *基本机器人控制* 项目。你拥有使用连接到机器人的无线键盘的按键来完全控制驱动器、LED 和闪烁灯的方法：
- en: '[PRE45]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Up to this point, you may argue that the method we have used to put new files
    in the robot is tedious. We have used DexterOS so that you be able to start quickly,
    without having to deal with Linux issues.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能认为我们用来将新文件放入机器人的方法很繁琐。我们使用了 DexterOS，这样你就可以快速开始，无需处理 Linux 问题。
- en: From the next chapter, we will use Ubuntu 16.04 on your laptop and a full Linux
    desktop, Ubuntu 18.04, inside GoPiGo3 . This will allow the robot to connect to
    the internet, and this will let you clone repositories directly into the robot.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 从下一章开始，我们将在你的笔记本电脑上使用 Ubuntu 16.04 和 GoPiGo3 内部的完整 Linux 桌面，Ubuntu 18.04。这将使机器人能够连接到互联网，并允许你直接将仓库克隆到机器人中。
- en: Summary
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we have familiarized ourselves with the GoPiGo3 Python environment
    by running simple programs that allow us to test robot sensors and actuators.
    We have checked them one by one in what is formally known as *unit testing*. This
    has served two goals: getting started with Python programming and functionally
    validating your robot hardware.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过运行允许我们测试机器人传感器和执行器的简单程序，熟悉了GoPiGo3的Python环境。我们按照正式的*单元测试*方法逐一检查了它们。这实现了两个目标：开始Python编程和功能验证您的机器人硬件。
- en: Next, we will leave the robot for one chapter, and we will discuss the core
    software concepts of ROS that we will later use to program GoPiGo3.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将把机器人放到下一章，我们将讨论ROS的核心软件概念，这是我们稍后用来编程GoPiGo3的。
- en: Questions
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: If you have this sequence of Python commands, what will GoPiGo3 do?
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你有这个Python命令序列，GoPiGo3会做什么？
- en: '[PRE46]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: A) It will drive 10 cm forward and then turn 90º to the right
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: A) 它将向前行驶10厘米，然后向右转90度
- en: B) It will drive 10 cm forward and then turn 90º to the left
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: B) 它将向前行驶10厘米，然后向左转90度
- en: '**C**) It will turn 90º'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '**C**) 它将转90度'
- en: What is the battery level required for GoPiGo3 to work properly?
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GoPiGo3正常工作所需的电池电量是多少？
- en: '**A**) Slightly above 9V is enough.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '**A**) 略高于9V就足够了。'
- en: B) 5V, the same that the Raspberry Pi needs.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: B) 5V，与Raspberry Pi所需的电压相同。
- en: C) There is no minimum. If the voltage is low, the robot will drive slowly.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: C) 没有最小值。如果电压低，机器人将缓慢行驶。
- en: Which set of commands will make GoPiGo3 draw a right angle arc 60 cm in diameter?
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪组命令将使GoPiGo3绘制直径为60厘米的直角圆弧？
- en: A) `gpg.orbit(90, 60)` **B**) `gpg.orbit(90, 30)` C) `gpg.orbit(180, 30)`
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: A) `gpg.orbit(90, 60)` **B**) `gpg.orbit(90, 30)` **C**) `gpg.orbit(180, 30)`
- en: 'What combination of the six sensor signals of the line follower does not correspond
    to GoPiGo3 being to the right of the black line? (w: white, b: black)'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '线跟踪器的六个传感器信号中哪一种组合不对应于GoPiGo3位于黑色线右侧？（w: 白色，b: 黑色）'
- en: '**A**) b-b-b-b-w'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**A**) b-b-b-b-w'
- en: B) w-b-b-b-w
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: B) w-b-b-b-w
- en: C) b-b-b-w-w
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: C) b-b-b-w-w
- en: If you have a histogram of an image that consists of two vertical lines of equal
    height at *x* = 0 and *x* = 768, given that the color range of *x* is from 0 to
    768, what colors are present in the image?
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有一个图像直方图，它由在*x* = 0和*x* = 768处的两条等高垂直线组成，且*x*的颜色范围是从0到768，那么图像中存在哪些颜色？
- en: A) Gray, because it is the result of mixing black and white in equal proportions.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: A) 灰色，因为它是以相等比例混合黑色和白色所得的结果。
- en: '**B**) Half of the image is black and the other half is white.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '**B**) 图像的一半是黑色，另一半是白色。'
- en: C) It is not possible to get a histogram like that.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: C) 不可能得到这样的直方图。
- en: Further reading
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To delve deeper into the technical aspects of GoPiGo3, you have very detailed
    information in the official guides listed here:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入了解GoPiGo3的技术细节，您可以在以下官方指南中找到非常详细的信息：
- en: Dexter Industries GoPiGo3 Documentation: [https://gopigo3.readthedocs.io](https://gopigo3.readthedocs.io)
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dexter Industries GoPiGo3 文档：[https://gopigo3.readthedocs.io](https://gopigo3.readthedocs.io)
- en: Dexter Industries DI-Sensors Documentation: [https://di-sensors.readthedocs.io](https://di-sensors.readthedocs.io)
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dexter Industries DI-Sensors 文档：[https://di-sensors.readthedocs.io](https://di-sensors.readthedocs.io)
- en: Pi camera documentation: [https://picamera.readthedocs.io/](https://picamera.readthedocs.io/)
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pi相机文档：[https://picamera.readthedocs.io/](https://picamera.readthedocs.io/)
