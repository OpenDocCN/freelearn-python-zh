- en: IoT Visualization and Automation Platforms
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网可视化和自动化平台
- en: In the previous chapter, we looked at alternative approaches to structuring
    a Python program that interfaces with electronics. This included an event loop
    approach, two thread-based approaches showing the use of callbacks and a publisher-subscriber
    model, and an asynchronous I/O approach.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了与电子设备接口的Python程序结构的替代方法。这包括事件循环方法，两种基于线程的方法，显示回调和发布-订阅模型的使用，以及异步I/O方法。
- en: In this chapter, we will be discussing IoT and automation platforms that you
    can use with your Raspberry Pi. The terms *IoT platform* and a*utomation platform*
    are very broad concepts, so for the purpose of this chapter, what I mean by these
    terms is any software service – cloud-based or locally installable – that provides
    you with a ready-made ecosystem to create powerful, flexible, and fun IoT-based
    projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论您可以与树莓派一起使用的物联网和自动化平台。术语*物联网平台*和*自动化平台*是非常广泛的概念，因此在本章中，我所指的是任何软件服务-基于云或本地安装-为您提供一个现成的生态系统，以创建强大，灵活和有趣的物联网项目。
- en: Our primary focus will be on the **If-This-Then-That** (**IFTTT**) automation
    platform, which I suspect many of you will have some familiarity with, and the
    ThingSpeak platform for data visualization. I have chosen these two services because
    they both offer a free pricing tier and allow us to create and explore simple
    demonstrations and examples that you can build upon. However, besides these, I'll
    also discuss a few other IoT and automation platforms that I have experience with
    that will allow you to build even more powerful IoT solutions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主要重点将放在**If-This-Then-That**（**IFTTT**）自动化平台上，我怀疑你们中的许多人对此都有一些了解，并且ThingSpeak平台用于数据可视化。我选择了这两个服务，因为它们都提供免费的定价层，并且允许我们创建和探索简单的演示和示例，您可以在此基础上构建。但是，除此之外，我还将讨论一些我有经验的其他物联网和自动化平台，这些平台将使您能够构建更强大的物联网解决方案。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Triggering an IFTTTApplet from your Raspberry Pi
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从树莓派触发IFTTT Applet
- en: Actioning your Raspberry Pi from an IFTTT Applet
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从IFTTT Applet操作您的树莓派
- en: Visualizing data with the ThingSpeak platform
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ThingSpeak平台可视化数据
- en: Other IoT and automation platforms for further exploration
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他物联网和自动化平台供进一步探索
- en: Let's get started!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To perform the exercises in this chapter, you will need the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行本章的练习，您将需要以下物品：
- en: Raspberry Pi 4 Model B
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派4型B
- en: Raspbian OS Buster (with a desktop and recommended software)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspbian OS Buster（带桌面和推荐软件）
- en: Python version 3.5 at a minimum
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python版本至少为3.5
- en: These requirements are what the code examples in this book are based on. It's
    reasonable to expect that the code examples should work without modification on
    a Raspberry Pi 3 Model B or a different version of Raspbian OS, as long as your
    Python version is 3.5 or higher.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些要求是本书中代码示例的基础。可以合理地期望代码示例应该可以在树莓派3型B或不同版本的Raspbian OS上无需修改即可工作，只要您的Python版本是3.5或更高。
- en: You will find this chapter's source code in the `chapter13` folder in this book's
    GitHub repository, which is available here: [https://github.com/PacktPublishing/Practical-Python-Programming-for-IoT](https://github.com/PacktPublishing/Practical-Python-Programming-for-IoT).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本书的GitHub存储库的`chapter13`文件夹中找到本章的源代码，该存储库位于此处：[https://github.com/PacktPublishing/Practical-Python-Programming-for-IoT](https://github.com/PacktPublishing/Practical-Python-Programming-for-IoT)。
- en: 'You will need to execute the following commands in a Terminal to set up a virtual
    environment and install the Python libraries required for the code in this chapter:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在终端中执行以下命令来设置虚拟环境并安装本章代码所需的Python库：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following dependencies will be installed from `requirements.txt`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下依赖项将从`requirements.txt`中安装：
- en: '**PiGPIO**: The PiGPIO GPIO library ([https://pypi.org/project/pigpio](https://pypi.org/project/pigpio))'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PiGPIO**：PiGPIO GPIO库（[https://pypi.org/project/pigpio](https://pypi.org/project/pigpio)）'
- en: '**The Paho MQTT library**:[https://pypi.org/project/paho-mqtt](https://pypi.org/project/paho-mqtt)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Paho MQTT库**：[https://pypi.org/project/paho-mqtt](https://pypi.org/project/paho-mqtt)'
- en: '**The Requests HTTP library**: [https://pypi.org/project/requests](https://pypi.org/project/requests)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Requests HTTP库**：[https://pypi.org/project/requests](https://pypi.org/project/requests)'
- en: '**The PiGPIO-based DHT library**: [https://pypi.org/project/pigpio-dht](https://pypi.org/project/pigpio-dht)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于PiGPIO的DHT库**：[https://pypi.org/project/pigpio-dht](https://pypi.org/project/pigpio-dht)'
- en: 'The electronic components we will need for this chapter''s exercises are as
    follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章练习所需的电子元件如下：
- en: 1 x DHT11 (lower accuracy) or a DHT22 (higher accuracy) temperature and humidity
    sensor
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x DHT11（较低精度）或DHT22（较高精度）温湿度传感器
- en: 1 x red LED
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x 红色LED
- en: 'Resistors:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电阻：
- en: 1 x 200Ω resistor
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x 200Ω 电阻
- en: 1 x 10kΩ resistor (optional)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x 10kΩ 电阻（可选）
- en: Triggering an IFTTT Applet from your Raspberry Pi
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从树莓派触发IFTTT Applet
- en: Many of you may already be familiar with the **If-This-Than-That** (**IFTTT**)
    web service ([ifttt.com](https://ifttt.com)), where you can create simple workflow
    automation chains called *Applets.* An Applet responds to changes in one web service
    (the *This),* which then triggers an action on another web service (the *That).*
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中的许多人可能已经熟悉**If-This-Than-That**（**IFTTT**）网络服务（[ifttt.com](https://ifttt.com)），在那里您可以创建称为*Applets*的简单工作流自动化链。Applet响应一个网络服务的更改（*This*），然后触发另一个网络服务的操作（*That*）。
- en: Here are some common examples of Applet configurations (called *Recipes):*
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些Applet配置（称为*Recipes）的常见示例：
- en: Send yourself an email whenever a particular Twitter hashtag is published.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当特定的Twitter标签发布时，向自己发送电子邮件。
- en: Turn a smart light bulb on or off at a certain time of the day.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一天的特定时间打开或关闭智能灯泡。
- en: Open your internet-connected garage door using your phone's GPS when you are
    approaching your house.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您接近您的房子时，使用手机的GPS打开您的联网车库门。
- en: Log how long you spend in the office in a spreadsheet.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在电子表格中记录您在办公室的时间。
- en: '...and thousands upon thousands of other examples!'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '...以及成千上万的其他示例！'
- en: As we will learn in this section and the next, our Raspberry Pi can assume the
    role of both the *This* or the *That,* to either trigger an Applet or perform
    an action in response to a triggered Applet.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在本节和下一节中学到的那样，我们的Raspberry Pi可以承担*This*或*That*的角色，以触发Applet或响应触发的Applet执行操作。
- en: 'The following is a visual representation of what we will cover in this section;
    that is, making our Raspberry Pi assume the *This* role in an IFTTT workflow:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将在本节中涵盖的内容的可视化表示；即，使我们的Raspberry Pi承担IFTTT工作流程中*This*角色：
- en: '![](assets/4303aaf0-acc8-4520-89a8-3d9784ccfd72.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4303aaf0-acc8-4520-89a8-3d9784ccfd72.png)'
- en: Figure 13.1 – Raspberry Pi assuming the *This* role in an IFTTT Applet workflow
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1 - Raspberry Pi在IFTTT Applet工作流程中承担*This*角色
- en: Our forthcoming Python example will monitor the current temperature (the *This),*
    and at a specific temperature will request a special IFTTT Webhook URL. This URL
    request triggers our Applet, which then sends out an email (the *That).* We will
    discuss Webhooks in greater detail shortly when we build our first IFTTT Applet.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将介绍的Python示例将监视当前温度（*This*），并在特定温度时请求特殊的IFTTT Webhook URL。此URL请求将触发我们的Applet，然后发送电子邮件（*That*）。在构建我们的第一个IFTTT
    Applet时，我们将很快更详细地讨论Webhooks。
- en: First, we need to create and test our example circuit, which we will do next.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建和测试我们的示例电路，接下来我们将这样做。
- en: Creating the temperature monitoring circuit
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建温度监测电路
- en: For this example, we will be reusing the DHT11/DHT22 temperature circuit we created
    in [Chapter 9](a77d6d94-a71a-4d7e-a66f-7c552af5b051.xhtml), *Measuring Temperature,
    Humidity, and Light Levels*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将重用我们在[第9章](a77d6d94-a71a-4d7e-a66f-7c552af5b051.xhtml)中创建的DHT11/DHT22温度电路，*测量温度、湿度和光照水平*。
- en: 'Here is what we need to do:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的是：
- en: Build the circuit illustrated in *Figure 9.2*.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建*图9.2*中所示的电路。
- en: Connect the data pin to GPIO 24 (in [Chapter 9](a77d6d94-a71a-4d7e-a66f-7c552af5b051.xhtml), *Measuring
    Temperature, Humidity, and Light Levels*, we used GPIO 21, but we will use GPIO
    21 for a LED later in this chapter).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据引脚连接到GPIO 24（在[第9章](a77d6d94-a71a-4d7e-a66f-7c552af5b051.xhtml)中，*测量温度、湿度和光照水平*，我们使用了GPIO
    21，但我们将在本章后面使用GPIO 21来控制LED）。
- en: Once you have built your circuit, we can continue and build our first IFTTT
    Applet.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您建立了电路，我们就可以继续并构建我们的第一个IFTTT Applet。
- en: Creating and configuring an IFTTT Applet
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和配置IFTTT Applet
- en: To create our IFTTT Applet, there are many steps that we need to follow. Many
    of these steps are simple and generic, irrespective of the type of Applet you
    are creating. While we will step through these generic steps, we won't go into
    them in great detail, as I am sure you will be more than capable of understanding
    what is going on during the process. Instead, what we will focus on is the unique
    steps and sections of IFTTT that relate to integrating our Raspberry Pi.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的IFTTT Applet，我们需要遵循许多步骤。这些步骤中的许多步骤都很简单和通用，无论您创建的Applet类型如何。虽然我们将逐步介绍这些通用步骤，但我们不会详细介绍它们，因为我相信您完全能够理解在过程中发生了什么。相反，我们将专注于与集成我们的Raspberry
    Pi相关的IFTTT的独特步骤和部分。
- en: Please note that the [https://ifttt.com/](https://ifttt.com/) free pricing tier
    limits the number of Applet that you can have active at once. At the time of writing,
    the maximum was three active Applets. We will be creating four Applets in this
    and the next chapter combined, so you will need to archive at least one Applet
    on IFTTT as you work through the next chapter in order to stay on the IFTTT free
    pricing tier.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[https://ifttt.com/](https://ifttt.com/)免费定价层限制了您可以同时拥有的Applet数量。在撰写本文时，最大值为三个活动Applet。在本章和下一章中，我们将创建四个Applet，因此您需要在进行下一章时至少将一个Applet存档到IFTTT上，以保持在IFTTT免费定价层上。
- en: 'Here are the steps we need to follow:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们需要遵循的步骤：
- en: Log into or create your IFTTT account. If you do not already have an IFTTT account,
    please visit [ifttt.com/join](https://ifttt.com/join) and follow the on-screen
    instructions.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录或创建您的IFTTT帐户。如果您还没有IFTTT帐户，请访问[ifttt.com/join](https://ifttt.com/join)并按照屏幕上的说明操作。
- en: We are performing these steps on the IFTTT website, [ifttt.com](https://ifttt.com).
    The process to follow for the IFTTT phone and tablet apps will be different.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在IFTTT网站[ifttt.com](https://ifttt.com)上执行这些步骤。IFTTT手机和平板应用程序的操作流程将不同。
- en: 'Once logged into IFTTT, click on your profile avatar icon (shown highlighted
    with a square in the following screenshot) to reveal a menu:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到IFTTT后，点击您的个人资料头像图标（在下图中用方框标出）以显示菜单：
- en: '![](assets/aca6a0a4-f02a-409d-9068-981bfae1cdec.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aca6a0a4-f02a-409d-9068-981bfae1cdec.png)'
- en: Figure 13.2 – Profile avatar icon
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2 - 个人资料头像图标
- en: 'Next, click the Create option in the profile menu, as shown here:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击个人资料菜单中的创建选项，如下所示：
- en: '![](assets/18671e75-d293-46b0-a70a-75bd2ce5ee9a.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/18671e75-d293-46b0-a70a-75bd2ce5ee9a.png)'
- en: Figure 13.3 – Profile menu
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3 - 个人资料菜单
- en: 'The next page you will be presented with will be the Create your own page.
    Here, click the + icon between the words If and This:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来您将看到的页面是创建您自己的页面。在这里，点击*If*和*This*之间的+图标：
- en: '![](assets/cce74029-b626-47db-8ec3-84e62a9d75d7.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cce74029-b626-47db-8ec3-84e62a9d75d7.png)'
- en: Figure 13.4 – The Create your own page – part 1
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4 - 创建您自己的页面 - 第1部分
- en: 'Now, you will be asked to Choose a service. The service we need to choose to
    integrate with our Raspberry Pi is called the WebHook service, as shown here:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将被要求选择一个服务。我们需要选择的服务与我们的Raspberry Pi集成的服务称为WebHook服务，如下所示：
- en: '![](assets/f1863ed6-d765-4f21-a827-94f71cfc1e2e.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f1863ed6-d765-4f21-a827-94f71cfc1e2e.png)'
- en: Figure 13.5 – The Choose a service page
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5 - 选择服务页面
- en: Once you have found and identified the Webhook service, click on the Webhooks icon
    to continue.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到并识别Webhook服务后，点击Webhooks图标继续。
- en: 'The next page you will be presented with will be the Choose a trigger page,
    as shown in the following screenshot. Here, click on the Receive a web request
    option:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来您将看到的页面是选择触发器页面，如下截图所示。在这里，点击接收Web请求选项：
- en: '![](assets/e029b47f-c7ee-4e05-afc5-88ad678d28d1.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e029b47f-c7ee-4e05-afc5-88ad678d28d1.png)'
- en: Figure 13.6 – The Choose trigger page
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.6 - 选择触发器页面
- en: 'Next, you will be presented with the Complete trigger fields page, as shown
    here:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将看到完成触发字段页面，如下所示：
- en: '![](assets/a291b7c9-1176-4712-ae9a-7c7afdea76a2.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a291b7c9-1176-4712-ae9a-7c7afdea76a2.png)'
- en: Figure 13.7 – The Complete trigger fields page
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.7 - 完成触发字段页面
- en: The Event Name field is of importance for our Raspberry Pi integration. In the
    Python code that we will cover shortly, we must ensure that the event name that's
    used by the code matches what we type into this page. For our example, we are
    naming our event RPITemperature.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 事件名称对于我们的树莓派集成非常重要。在我们即将介绍的Python代码中，我们必须确保代码中使用的事件名称与我们在此页面中输入的名称匹配。在我们的示例中，我们将事件命名为RPITemperature。
- en: After entering RPITemperature into the Event Name box, click the Create trigger
    button to continue.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“事件名称”框中输入RPITemperature，然后点击“创建触发器”按钮继续。
- en: A Webhooks's Event Name is its unique identifier (for your IFTTT account). If
    you are creating many Webhooks, then you will need to use a different Event Name
    to distinguish between them.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Webhook的事件名称是其唯一标识符（用于您的IFTTT帐户）。如果您创建了许多Webhooks，则需要使用不同的事件名称来区分它们。
- en: 'Next, you will be presented with the Create Your Own page once more. This time,
    you''ll see that the *This* is now the Webhook icon:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将再次看到“创建您自己”的页面。这一次，您会发现*This*现在是Webhook图标：
- en: '![](assets/07bdc6ca-6d2d-41d5-9e1b-4b8994cd02c1.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/07bdc6ca-6d2d-41d5-9e1b-4b8994cd02c1.png)'
- en: Figure 13.8 – The Create your own page – part 2
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.8 - 创建您自己的页面 - 第2部分
- en: We are now halfway through configuring our IFTTT Applet. Now that we have configured
    our Webhook trigger, we need to configure our action, which will be to send an
    email. After creating the emailing action, we will revisit the Webhook trigger
    and discover the URL and parameters that are used to trigger this Webhook event.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了配置IFTTT Applet的一半。现在我们已经配置了Webhook触发器，我们需要配置我们的动作，即发送电子邮件。创建电子邮件动作后，我们将重新访问Webhook触发器，并发现用于触发此Webhook事件的URL和参数。
- en: 'Next, click on the + icon between the words Then and That. You will see the
    Choose action service page. On this page, search for Email and click on the Email
    icon:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在“然后”和“那个”之间点击“+”图标。您将看到选择动作服务页面。在此页面上，搜索电子邮件并点击电子邮件图标：
- en: '![](assets/14538a8c-4390-4199-b5dd-9f73f088bd69.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/14538a8c-4390-4199-b5dd-9f73f088bd69.png)'
- en: Figure 13.9 – The Choose action service page
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.9 - 选择动作服务页面
- en: 'When you see the Choose action page shown in the following screenshot, select
    the Send me an email option:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您看到下图所示的选择动作页面时，请选择“发送电子邮件”选项：
- en: '![](assets/799fbea2-585f-403b-a4a5-2cda1e63da1a.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/799fbea2-585f-403b-a4a5-2cda1e63da1a.png)'
- en: Figure 13.10 – The Choose action page
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.10 - 选择动作页面
- en: 'Next, you will be presented with the Complete action fields page. Please fill
    in the Subject and Body text fields, as shown in the following screenshot. You
    will find an example email that was produced by this action later in this chapter:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将看到完成动作字段页面。请填写主题和正文文本字段，如下截图所示。您将在本章后面找到此动作生成的示例电子邮件：
- en: '![](assets/57b62fb0-15af-476e-8523-0fa8d854dd08.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/57b62fb0-15af-476e-8523-0fa8d854dd08.png)'
- en: Figure 13.11 – The Complete action fields page
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.11 - 完成动作字段页面
- en: In the preceding screenshot, you will notice that some of the text is surrounded
    by gray boxes; for example, Value1 and OccuredAt. These are known as *ingredients* and
    are replaced dynamically when the Applet is triggered. As we will see shortly
    in code, we will be replacing the Value1, Value2, and Value3 ingredients with
    the current temperature, humidity, and a message, respectively.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，您会注意到一些文本被灰色框包围；例如，“Value1”和“OccuredAt”。这些被称为*ingredients*，在触发Applet时会动态替换。正如我们很快将在代码中看到的那样，我们将用当前温度、湿度和消息分别替换Value1、Value2和Value3。
- en: When you have filled in the Subject and Body text fields, click the Create action
    button.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写主题和正文文本字段后，点击“创建动作”按钮。
- en: 'Finally, click on the Finish button on the Review and finish page, as shown
    here:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在审查和完成页面上点击“完成”按钮，如下所示：
- en: '![](assets/602b06fa-867c-4d9f-a717-da370163fbf1.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/602b06fa-867c-4d9f-a717-da370163fbf1.png)'
- en: Figure 13.12 – The Review and finish page
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.12 - 审查和完成页面
- en: Congratulations! You've just created an IFTTT Applet that sends an email when
    we trigger it using our Raspberry Pi. But how do we do that? That's what we will
    learn about in the next section.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您刚刚创建了一个IFTTT Applet，当我们使用树莓派触发它时，它会发送一封电子邮件。但是我们如何做到的呢？这就是我们将在下一节中了解的内容。
- en: Triggering an IFTTT Webhook
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 触发IFTTT Webhook
- en: Now that we have created our IFTTT Applet, we need to take a few more steps
    to learn how to trigger our Webhook. These steps boil down to knowing where to
    navigate to within IFTTT to discover your unique Webhook URL.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的IFTTT Applet，我们需要采取一些步骤来学习如何触发我们的Webhook。这些步骤归结为知道在IFTTT中导航到哪里以发现您的唯一Webhook
    URL。
- en: 'Here are the steps we need to follow:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们需要遵循的步骤：
- en: 'First, we need to navigate to the Webhooks page. There are a couple of ways
    we can do this, and I''ll leave it up to you which route you take:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要导航到Webhooks页面。我们可以通过几种方式来做到这一点，我会让您自行决定采取哪种方式：
- en: Navigate your web browser to the Webhook services URL; that is, [ifttt.com/maker_webhook](https://ifttt.com/maker_webhooks).
  id: totrans-101
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的网络浏览器导航到Webhook服务URL；即[ifttt.com/maker_webhook](https://ifttt.com/maker_webhooks)。
- en: 'Alternatively, the navigation steps to take to get to this web page are as
    follows:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，导航到此网页的步骤如下：
- en: Click on the profile avatar icon (as shown previously in *Figure 13.2*).
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击个人资料头像图标（如*图13.2*中所示）。
- en: In the menu that appears, choose the My Services item (refer to *Figure 13.3*).
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的菜单中，选择“My Services”项目（参见*图13.3*）。
- en: On the page that appears, find and click on the Webhooks item.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的页面上，找到并点击“Webhooks”项目。
- en: 'Irrespective of the path you take, you will see the page shown in the following
    screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您选择哪条路径，您将看到下图所示的页面：
- en: '![](assets/390f2005-f5f8-47c4-aaa7-b1482c3c38a1.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/390f2005-f5f8-47c4-aaa7-b1482c3c38a1.png)'
- en: Figure 13.13 – The Webhooks page
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.13 - Webhooks页面
- en: 'Click on the Documentation button located in the top-right corner of the page.
    You will be presented with the Webhook documentation page shown here:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击页面右上角的Documentation按钮。您将看到这里显示的Webhook文档页面：
- en: '![](assets/92fa1db0-2d3f-4e77-b4cf-0c0649f71b8c.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/92fa1db0-2d3f-4e77-b4cf-0c0649f71b8c.png)'
- en: Figure 13.14 – The Webhook documentation pagePlease note that in the preceding
    example page, I have filled in the {Event} and JSON Body fields so that they can
    be referenced during our discussion. Your fields will be initially empty.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.14 - Webhook文档页面请注意，在前面的示例页面中，我已经填写了{Event}和JSON Body字段，以便在我们的讨论中引用它们。您的字段将最初为空。
- en: 'This page holds the key pieces of information that we need in order to integrate
    this Webhook trigger with our Raspberry Pi. Here are the key parts of this page:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面包含了我们需要的关键信息，以便将这个Webhook触发与我们的Raspberry Pi集成。这个页面的关键部分如下：
- en: '**Your key**: This is your account''s Webhook API key and forms part of your
    unique Webhook URL.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**您的密钥**：这是您的帐户的Webhook API密钥，并且是您独特的Webhook URL的一部分。'
- en: '**GET or POST request URL**: Your unique Webhook URL. The unique combination
    of your API key and Event Name is what associates the URL with a triggerable IFTTT
    event. To integrate with our Raspberry Pi, this is the URL we need to construct
    and request. We''ll cover this shortly in code.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GET或POST请求URL**：您独特的Webhook URL。您的API密钥和事件名称的独特组合是将URL与可触发的IFTTT事件关联起来的。要与我们的Raspberry
    Pi集成，这是我们需要构建和请求的URL。我们将很快在代码中介绍这一点。'
- en: '**Event name**: The name of the event you want to trigger.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件名称**：您想触发的事件的名称。'
- en: '**JSON body**: Each triggerable Webhook can contain a maximum of three data
    parameters presented in JSON format, and they must be named value1, value2, and
    value3.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON主体**：每个可触发的Webhook可以包含最多三个以JSON格式呈现的数据参数，它们必须命名为value1、value2和value3。'
- en: '**cURL command-line example**: Run this example in a Terminal to trigger the
    RPITemperature event (and you will receive an email).'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cURL命令行示例**：在终端中运行此示例以触发RPITemperature事件（您将收到一封电子邮件）。'
- en: '**The Test It button**: Clicking this button will trigger the RPITemperature
    event (and you will receive an email).'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试按钮**：单击此按钮将触发RPITemperature事件（您将收到一封电子邮件）。'
- en: Now that we have created our IFTTT Applet and discovered where to find the Webhook
    URL and how it is constructed, we can now delve into the Python code that will
    trigger our IFTTT Applet.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了IFTTT Applet，并发现了在哪里找到Webhook URL以及它是如何构建的，我们现在可以深入研究将触发我们的IFTTT Applet的Python代码。
- en: Triggering an IFTTT Applet in Python
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Python中触发IFTTT Applet
- en: We're about to explore a simple application based around the DHT 11/DHT 22 circuits
    and code we first saw in [Chapter 9](a77d6d94-a71a-4d7e-a66f-7c552af5b051.xhtml),
    *Measuring Temperature, Humidity, and Light Levels*. You can find this code in
    the `chapter13/ifttt_dht_trigger_email.py` file.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要探索一个简单的应用程序，基于我们在[第9章](a77d6d94-a71a-4d7e-a66f-7c552af5b051.xhtml)中首次看到的DHT
    11/DHT 22电路和代码，*测量温度、湿度和光照水平*。您可以在`chapter13/ifttt_dht_trigger_email.py`文件中找到这段代码。
- en: 'This code will monitor the temperature using a DHT 11 or DHT 22 sensor, and
    if a pre-configured high or low threshold is breached, the code will invoke your
    IFTTT Webhook URL, which will then send you an email, similar to the one shown
    in the following screenshot. This corresponds to the email subject and body text
    you configured in the previous section, in *step 13*:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将使用DHT 11或DHT 22传感器监视温度，如果违反了预先配置的高温或低温阈值，代码将调用您的IFTTT Webhook URL，然后会像下面的截图中显示的那样给您发送一封电子邮件。这对应于您在*步骤13*中配置的电子邮件主题和正文文本：
- en: '![](assets/fb5055c7-3127-4f1a-87a2-3a4b5b73c826.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fb5055c7-3127-4f1a-87a2-3a4b5b73c826.png)'
- en: Figure 13.15 – Example IFTTT email
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.15 - 示例IFTTT电子邮件
- en: 'Before we can run our sample application code, there are a few configuration
    steps we need to perform. Let''s take a look:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行示例应用程序代码之前，我们需要执行一些配置步骤。让我们来看一下：
- en: Open the `chapter13/ifttt_dht_trigger_email.py` file for editing.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`chapter13/ifttt_dht_trigger_email.py`文件进行编辑。
- en: 'Locate the following segment of code indicated by lines (1) and (2). Confirm
    that your DHT sensor is connected to the appropriate GPIO pin and that the correct
    DHT11 or DHT22 instance is being used based on the sensor that you have:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到由第（1）和（2）行表示的以下代码段。确认您的DHT传感器连接到适当的GPIO引脚，并且根据您拥有的传感器使用正确的DHT11或DHT22实例：
- en: '[PRE1]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, locate the following segments of code, indicated by lines (3), (4), and
    (5), and update the `USE_DEGREES_CELSIUS`, `HIGH_TEMP_TRIGGER`, and `LOW_TEMP_TRIGGER` variables
    to values that make sense in your location:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，找到以下代码段，由行（3）、（4）和（5）表示，并将`USE_DEGREES_CELSIUS`，`HIGH_TEMP_TRIGGER`和`LOW_TEMP_TRIGGER`变量更新为在您的位置有意义的值：
- en: '[PRE2]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Your IFTTT Applet will be triggered and send an email when the temperature reaches `HIGH_TEMP_TRIGGER` degrees
    or drops to `LOW_TEMP_TRIGGER` degrees. The reason for high and low temperature
    triggers is to create a small temperature buffer to prevent the code triggering
    multiple emails if the temperature were to oscillate above and below a single
    value.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当温度达到`HIGH_TEMP_TRIGGER`度或降至`LOW_TEMP_TRIGGER`度时，您的IFTTT Applet将被触发并发送电子邮件。设置高温和低温触发的原因是为了创建一个小的温度缓冲区，以防止代码在温度在单个值以上下波动时触发多封电子邮件。
- en: 'Next, locate the following section of code starting at line (6) and update
    the details shown – specifically your IFTTT API key, which we identified in the
    previous section in *step 2*:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，找到从第6行开始的以下代码部分，并更新显示的详细信息 - 特别是您在上一节中识别的IFTTT API密钥，在*步骤2*中：
- en: '[PRE3]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'That''s all our configuration done. You''ll notice line (7), which is where
    we construct the IFTTT Webhook URL using our API key and event name:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们所有的配置。您会注意到第7行，这是我们使用我们的API密钥和事件名称构建IFTTT Webhook URL的地方：
- en: '[PRE4]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The remaining code in the file polls the DHT11 or DHT22 sensor, compares the
    reading to the `HIGH_TEMP_TRIGGER` and `HIGH_TEMP_TRIGGER` values, and if the
    temperature has been breached, constructs a `requests` object and calls the IFTTT
    Webhook URL to trigger your Applet. We will not cover that code here since it
    should be self-explanatory based on your previous experience with the DHT11/DHT22
    sensors and the Python `requests` library.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中的其余代码轮询DHT11或DHT22传感器，将读数与`HIGH_TEMP_TRIGGER`和`HIGH_TEMP_TRIGGER`值进行比较，如果温度已超过，构造一个`requests`对象并调用IFTTT
    Webhook URL来触发您的Applet。我们不会在这里涵盖该代码，因为根据您之前使用DHT11/DHT22传感器和Python `requests`库的经验，这应该是不言自明的。
- en: 'With our code configured, it''s time to run the program in a Terminal. You
    will receive an output similar to the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好我们的代码后，是时候在终端中运行程序了。您将收到类似以下的输出：
- en: '[PRE5]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Our example here also shows the IFTTT Applet being triggered when the temperature
    goes above 20 degrees.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例还显示了当温度超过20度时触发IFTTT Applet。
- en: This now completes our IFTTT example using our Raspberry Pi in the *This* role
    to trigger an IFTTT Applet. The basic process we covered illustrates how easy
    this is to achieve! We sent an email, but you can follow the same overall process
    to create other IFTTT recipes that trigger other actions, such as turning on smart
    lights and appliances, adding rows to Google spreadsheets, and creating a Facebook
    post. You might like to check out [https://ifttt.com/discover](https://ifttt.com/discover)
    for a host of ideas and possibilities. Remember that from our perspective and
    our learning, it's a *Webhook* trigger we can use from our Raspberry Pi to action
    ideas like these. Have fun!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们使用我们的树莓派在*This*角色中触发IFTTT Applet完成了我们的IFTTT示例。我们所涵盖的基本流程说明了实现这一点有多容易！我们发送了一封电子邮件，但您可以按照相同的整体流程创建其他触发其他操作的IFTTT配方，例如打开智能灯和电器，向Google电子表格添加行，以及创建Facebook帖子。您可能想要查看[https://ifttt.com/discover](https://ifttt.com/discover)以获取各种想法和可能性。请记住，从我们的角度和我们的学习来看，这是一个*Webhook*触发器，我们可以从我们的树莓派中使用它来实现这些想法。玩得开心！
- en: Next, we will look at the opposite scenario to see how we can action our Raspberry
    Pi.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看相反的情况，看看我们如何操作我们的树莓派。
- en: Actioning your Raspberry Pi from an IFTTT Applet
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从IFTTT Applet中操作您的树莓派
- en: The previous section taught us how to trigger an IFTTT Applet from our Raspberry
    Pi. In this section, we will learn how to action our Raspberry Pi from an IFTTT
    Applet.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节教会了我们如何从我们的树莓派触发IFTTT Applet。在本节中，我们将学习如何从IFTTT Applet中操作我们的树莓派。
- en: For our example, we will create an IFTTT Applet that will trigger when an email
    is received. We'll use the subject of this email to control an LED that is connected
    to a GPIO pin.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将创建一个IFTTT Applet，当收到电子邮件时将触发该Applet。我们将使用此电子邮件的主题来控制连接到GPIO引脚的LED。
- en: 'We will be using an IFTTT Webhook service, as we did previously, only this
    time the Webhook service will be installed on the *That* side of our Applet and
    will request a URL that we specify. This basic idea is illustrated in the following
    diagram:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用IFTTT Webhook服务，就像以前一样，只是这次Webhook服务将安装在我们Applet的*That*一侧，并且将请求我们指定的URL。这个基本想法在下图中有所说明：
- en: '![](assets/518422de-c428-4537-a648-6b1f34f80280.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/518422de-c428-4537-a648-6b1f34f80280.png)'
- en: Figure 13.16 – Raspberry Pi assuming the *That* role in an IFTTT Applet
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.16 - 树莓派在IFTTT Applet中扮演*That*角色
- en: Let's look at two possible methods we can use with the IFTTT Webhook service
    to request a URL that can then be seen by our Raspberry Pi's Python code.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们可以使用的两种可能的方法，通过IFTTT Webhook服务请求一个URL，然后可以被我们的树莓派的Python代码看到。
- en: '**Method 1 – using the dweet.io service as an intermediary**'
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**方法1 - 使用dweet.io服务作为中介**'
- en: One method to integrate the IFTTT with our Raspberry Pi is to use the dweet.io
    service. We covered dweet.io, along with Python examples, in [Chapter 2](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml),
    *Getting Started with Python and IoT*.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 将IFTTT与我们的树莓派集成的一种方法是使用dweet.io服务。我们在[第2章](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml)中介绍了dweet.io以及Python示例，*使用Python和物联网入门*。
- en: 'In brief, here is how we will use dweet.io alongside IFTTT and our Python code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们将如何在IFTTT Webhook中使用dweet.io以及我们的Python代码：
- en: In our IFTTT Webhook, we'll use a dweet.io URL to publish a dweet (containing
    an instruction to turn the LED on, off, or make it blink).
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的IFTTT Webhook中，我们将使用dweet.io URL发布一个dweet（包含打开、关闭或使LED闪烁的指令）。
- en: Our Raspberry Pi will run Python code to retrieve the dweet published by the
    IFTTT Webhook.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的树莓派将运行Python代码来检索IFTTT Webhook发布的dweet。
- en: Our code will then control the LED based on the command specified in the dweet.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们的代码将根据dweet中指定的命令控制LED。
- en: This is the method we will use for our example. The advantage of this method
    is that we do not need to worry about configuring firewalls and port forwarding
    rules on your router. Plus, it means we can run the example in environments –
    for example, at work – where router configurations may not be practical or even
    possible.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们示例中将要使用的方法。这种方法的优势在于我们无需担心在路由器上配置防火墙和端口转发规则。此外，这意味着我们可以在工作环境等环境中运行示例，而在这些环境中，路由器配置可能不切实际甚至不可能。
- en: The code that we will be using for this dweet.io-based integration can be found
    in the `chapter13/dweet_led.py` file, which is an exact copy of the `chapter02/dweet_led.py` file
    from [Chapter 2](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml), *Getting Started
    with Python and IoT*.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`chapter13/dweet_led.py`文件中使用此基于dweet.io的集成的代码，该文件是[第2章](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml)中`chapter02/dweet_led.py`文件的精确副本，*使用Python和物联网入门*。
- en: '**Method 2 – creating a Flask-RESTful service**'
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**方法2 - 创建Flask-RESTful服务**'
- en: To use this method, we would need to create a RESTful service, similar to what
    we did in [Chapter 3](b9f3d19f-a490-4752-ac4a-5607496dc3d9.xhtml), *Networking
    with RESTful APIs and Web Socket Services Using Flask* (the code that can be found
    in `chapter02/flask_api_server.py`, which changes the brightness of a LED (rather
    than setting it to on/off/blinking), would be a great starting point).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这种方法，我们需要创建一个类似于我们在[第3章](b9f3d19f-a490-4752-ac4a-5607496dc3d9.xhtml)中所做的RESTful服务，*使用Flask进行RESTful
    API和Web套接字服务*（`chapter02/flask_api_server.py`中的代码，它改变LED的亮度（而不是设置为开/关/闪烁），将是一个很好的起点）。
- en: We would also need to expose our Raspberry Pi to the public internet, which
    would require us to open a port and create a port forwarding rule in our local
    firewall or router. Then, together with our public IP (or domain name), we could
    construct a URL and use this directly with the IFTTT Webhook service.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将我们的树莓派暴露到公共互联网，这将需要我们在本地防火墙或路由器中打开一个端口并创建一个端口转发规则。然后，连同我们的公共IP（或域名），我们可以构建一个URL，并直接将其与IFTTT
    Webhook服务一起使用。
- en: For prototyping ideas and creating demos, a simple alternative to opening up
    firewalls and creating port forwarding rules could be to use a service such as
    Local Tunnels ([localtunnel.github.io/www](https://localtunnel.github.io/www/))
    or ngrok ([ngrok.com](https://ngrok.com/)), which can help you expose a device
    to the internet.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对于原型设计和创建演示，一个简单的替代方法是使用本地隧道（[localtunnel.github.io/www](https://localtunnel.github.io/www/)）或ngrok（[ngrok.com](https://ngrok.com/)）这样的服务，而不是打开防火墙和创建端口转发规则，这些服务可以帮助您将设备暴露到互联网上。
- en: Since this method requires configuration and setup on your end that is beyond
    what we can practically do as part of this chapter, we will stick with the dweet.io
    approach shown in the previous section.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这种方法需要您进行配置和设置，这超出了我们作为本章的一部分可以实际完成的范围，因此我们将坚持使用前一节中显示的dweet.io方法。
- en: Next, we will create a circuit that we can use with our second IFTTT Applet,
    which we will build shortly.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个电路，我们可以在第二个IFTTT Applet中使用，我们将很快构建它。
- en: Creating the LED circuit
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建LED电路
- en: Our forthcoming example will require an LED, as well as a series resistor connected
    to a GPIO pin (GPIO 21, for our example). I'm confident that, given the number
    of times we've built LED circuits already in this book, you could wire this up
    on your own with no problems! (And in case you do need a reminder, see *Figure
    2.7 *in [Chapter 2](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml), *Getting Started
    with Python and IoT.*)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将介绍的示例将需要一个LED，以及连接到GPIO引脚（对于我们的示例是GPIO 21）的一系列电阻。我相信，考虑到我们在本书中已经多次构建了LED电路，你可以毫无问题地自己完成这个连接！（如果你需要提醒，请参见[第2章](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml)中的*图2.7*，*使用Python和物联网入门*）
- en: Keep the DHT 11/DHT 22 circuit you created for our first IFTTT Applet example
    because we will reuse this circuit again later in this chapter.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 保留您为我们第一个IFTTT Applet示例创建的DHT 11/DHT 22电路，因为我们将在本章后面再次重用此电路。
- en: When you have your circuit ready, we will continue and run our sample program.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的电路准备好后，我们将继续并运行我们的示例程序。
- en: Running the IFTTT and LED Python program
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行IFTTT和LED Python程序
- en: In this section, we will run our program and obtain a unique thing name and
    URL for use with the dweet.io service.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将运行我们的程序，并获取用于dweet.io服务的唯一物名称和URL。
- en: 'Here are the steps to follow:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是要遵循的步骤：
- en: 'Run the code that can be found in the `chapter13/dweet_led.py` file in a Terminal.
    You will receive an output similar to the following (your *thing name* and therefore
    your URLs will be different):'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行`chapter13/dweet_led.py`文件中的代码。您将收到类似以下内容的输出（您的*物名称*和因此您的URL将不同）：
- en: '[PRE6]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we mentioned previously, `chapter13/dweet_led.py` is an exact copy of the
    same program we discussed in [Chapter 2](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml),
    *Getting Started with Python and IoT*. If you need more context around how this
    program works, please revisit that chapter and the code discussion contained therein.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，`chapter13/dweet_led.py`是我们在[第2章](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml)中讨论的相同程序的精确副本，*使用Python和物联网入门*。如果您需要更多关于这个程序如何工作的上下文，请重新阅读那一章和其中包含的代码讨论。
- en: Keep your Terminal open with the program running as we will need to copy one
    of the URLs in the next section. We'll also need the program running to test our
    upcoming integration.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持终端打开并运行程序，因为我们将需要在下一节中复制其中一个URL。我们还需要运行程序来测试我们即将进行的集成。
- en: Next, we will create another IFTTT Applet to integrate with this program via
    dweet.io.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建另一个IFTTT Applet，通过dweet.io与该程序集成。
- en: Creating the IFTTT Applet
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建IFTTT Applet
- en: We are about to create another IFTTT Applet. The overall process is very similar
    to the one we followed for the Applet we created previously, except our Raspberry
    Pi (via Webhook integration) will be at the *That* end of the Applet, as shown
    in *Figure 13.16.*
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将创建另一个IFTTT Applet。整个过程与我们之前创建的Applet非常相似，只是我们的树莓派（通过Webhook集成）将位于Applet的*That*端，如*图13.16*所示。
- en: 'Here are the steps we need to follow to create our next Applet. I''ve left
    out many of the common screenshots this time around due to their similarity with
    our previous IFTTT Applet creation process:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们需要遵循的步骤来创建我们的下一个Applet。由于它们与我们之前创建的IFTTT Applet过程非常相似，这次我省略了许多常见的屏幕截图：
- en: Once logged into IFTTT, click on your profile avatar icon and select Create
    from the drop-down menu.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到IFTTT后，点击个人资料头像图标，然后从下拉菜单中选择创建。
- en: On the If + This Then Than page, press the + icon.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在If + This Then Than页面上，点击+图标。
- en: In the Choose a service page, search for and select the Email service.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选择服务”页面上，搜索并选择“电子邮件”服务。
- en: On the Choose trigger page, select Send IFTTT an email tagged (make sure it's
    the option with the word in it *tagged).*
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择触发器页面上，选择发送带标签的IFTTT电子邮件（确保选项中包含这个词*tagged)。
- en: 'On the next page, enter LED as the Tag input and click the Create trigger button:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页中，输入LED作为标签输入，然后点击创建触发器按钮：
- en: '![](assets/9872195c-9014-4066-82d4-be7c02ba6851.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9872195c-9014-4066-82d4-be7c02ba6851.png)'
- en: Figure 13.17 – The Complete trigger fields page
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.17 - 完成触发字段页面
- en: On the If <email icon> This Then + Than page, press the + icon.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在If <email icon> This Then + Than页面上，点击+图标。
- en: On the Choose action service page, search for and select the Webhooks service.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择操作服务页面上，搜索并选择Webhooks服务。
- en: Next, on the Choose action page, select Make a web request.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在选择操作页面上，选择进行网络请求。
- en: 'The next page you''ll come across is called Complete action fields. This is
    where we''ll use the dweet URL that our program printed to the Terminal in the
    previous section:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来你会遇到的页面叫做“完成操作字段”。这是我们将使用上一节中程序打印到终端的dweet URL的地方：
- en: '![](assets/25679560-23f0-4fd6-a3ac-186c87fd8f50.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/25679560-23f0-4fd6-a3ac-186c87fd8f50.png)'
- en: Figure 13.18 – The Complete action fields page
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.18 - 完成操作字段页面
- en: 'Here are the sub-steps you need to follow to complete the fields on this page:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您需要遵循的子步骤，以完成此页面上的字段：
- en: Copy the On URL from your Terminal (for example, `https://dweet.io/dweet/for/749b5e60?state=on`
    – noting that your *thing name* will be different).
  id: totrans-192
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端复制On URL（例如，`https://dweet.io/dweet/for/749b5e60?state=on` - 注意您的*thing name*将不同）。
- en: Paste this URL into the IFTTT URL field.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此URL粘贴到IFTTT URL字段中。
- en: In the URL field, delete the word on (so the URL is now https://dweet.io/dweet/for/749b5e60?state=).
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在URL字段中，删除单词on（所以URL现在是https://dweet.io/dweet/for/749b5e60?state=）。
- en: Click the Add ingredient button (under the URL field) and choose Subject (so
    that the URL is now https://dweet.io/dweet/for/749b5e60?state={{Subject}}).
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加成分按钮（在URL字段下），选择主题（使URL现在为https://dweet.io/dweet/for/749b5e60?state={{Subject}}）。
- en: The other fields can be left as their default values.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他字段可以保留为默认值。
- en: 'Click the Create action button:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建操作按钮：
- en: '![](assets/6c62931d-4dd8-4985-b603-25fccede7dfe.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6c62931d-4dd8-4985-b603-25fccede7dfe.png)'
- en: Figure 13.19 – The Complete action fields page
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.19 - 完成操作字段页面
- en: Finally, on the Review and finish page, click the Finish button.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在“审查和完成”页面上，点击“完成”按钮。
- en: Well done! We've now created our second Applet. Next, we will use this Applet
    to control our LED by sending an email instructing the LED to turn on, off, or
    blink.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我们现在创建了第二个Applet。接下来，我们将使用这个Applet通过发送电子邮件来控制我们的LED，指示LED打开、关闭或闪烁。
- en: Controlling the LED from an email
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从电子邮件控制LED
- en: Now that we have created our Applet to control our LED using an email, it's
    time to test out the integration.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个Applet来通过电子邮件控制LED，是时候测试集成了。
- en: 'Here are the steps to create the email:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建电子邮件的步骤：
- en: Make sure the program in the `chapter13/dweet_led.py` file is still running
    in your Terminal.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保`chapter13/dweet_led.py`文件中的程序仍在终端中运行。
- en: Open your favorite email program and create a new email.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您喜欢的电子邮件程序并创建新邮件。
- en: Use `trigger@applet.ifttt.com` as the email's To address.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`trigger@applet.ifttt.com`作为电子邮件的收件人地址。
- en: When sending a trigger email to IFTTT, it must come from the same email address
    that you use with IFTTT (you can visit [https://ifttt.com/settings](https://ifttt.com/settings) to
    check your email address).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 当向IFTTT发送触发电子邮件时，它必须来自您在IFTTT中使用的相同电子邮件地址（您可以访问[https://ifttt.com/settings](https://ifttt.com/settings)来检查您的电子邮件地址）。
- en: 'As the subject, use one of the following to control the LED:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为主题，使用以下内容之一来控制LED：
- en: '`#LED On`'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#LED On`'
- en: '`#LED Off`'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#LED Off`'
- en: '`#LED Blink`'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#LED Blink`'
- en: 'IFTTT strips off the #LED tag, so our `dweet_led.py` program only receives
    the text On, Off, or Blink. The leading space is stripped off in our Python code.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: IFTTT会去掉#LED标签，因此我们的`dweet_led.py`程序只会收到打开、关闭或闪烁的文本。在我们的Python代码中，前导空格被去掉。
- en: 'The following screenshot shows an example email that will make the LED blink:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个使LED闪烁的示例电子邮件：
- en: '![](assets/052d8aed-d735-4e38-8e56-1d389ac4afd4.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/052d8aed-d735-4e38-8e56-1d389ac4afd4.png)'
- en: 13.20 – Trigger email example
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 13.20 - 触发电子邮件示例
- en: Send the email.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发送电子邮件。
- en: Wait a moment and the LED will change state.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等一会儿，LED将改变状态。
- en: Now that we've learned how to control our LED via email using IFTTT, let's quickly
    cover a few troubleshooting tips.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何通过电子邮件使用IFTTT来控制我们的LED，让我们快速介绍一些故障排除技巧。
- en: IFTTT troubleshooting
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IFTTT故障排除
- en: 'If your IFTTT Applets do not appear to be triggering and actioning, here are
    a few troubleshooting avenues for you to explore and try:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的IFTTT Applets似乎没有触发和执行操作，这里有一些故障排除途径供您探索和尝试：
- en: 'In `dweet_led.py`, try the following:'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`dweet_led.py`中，尝试以下操作：
- en: Turn on debug logging; for example, `logger.setLevel(logging.DEBUG)`.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开调试日志记录；例如，`logger.setLevel(logging.DEBUG)`。
- en: Change the dweet retrieval method located near the end of the source file. If
    you are using `stream_dweets_forever()`, try `poll_dweets_forever()` instead,
    since it is more resilient to transient connectivity issues.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改源文件末尾附近的dweet检索方法。如果您正在使用`stream_dweets_forever()`，请尝试改用`poll_dweets_forever()`，因为它对瞬时连接问题更具弹性。
- en: 'On the IFTTT website, you can inspect the activity log for any Applet by doing
    the following:'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在IFTTT网站上，您可以通过以下方式检查任何Applet的活动日志：
- en: Navigating to the My Services option under the profile menu
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到个人资料菜单下的我的服务选项
- en: Selecting a service (for example, Webhooks)
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个服务（例如，Webhooks）
- en: Selecting the Applet you want to inspect
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要检查的Applet
- en: Clicking the Settings button
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击设置按钮
- en: Clicking the View activity button and/or trying the Check now button
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击查看活动按钮和/或尝试立即检查按钮
- en: 'You can also check the following IFTTT resources:'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以查看以下IFTTT资源：
- en: '*Common errors and troubleshooting tips*, available at [https://help.ifttt.com/hc/en-us/articles/115010194547-Common-errors-and-troubleshooting-tips](https://help.ifttt.com/hc/en-us/articles/115010194547-Common-errors-and-troubleshooting-tips)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*常见错误和故障排除提示*，请访问[https://help.ifttt.com/hc/en-us/articles/115010194547-Common-errors-and-troubleshooting-tips](https://help.ifttt.com/hc/en-us/articles/115010194547-Common-errors-and-troubleshooting-tips)'
- en: '*Troubleshooting Applets & Services*, available at [https://help.ifttt.com/hc/en-us/categories/115001569887-Troubleshooting-Applets-Services](https://help.ifttt.com/hc/en-us/categories/115001569887-Troubleshooting-Applets-Services).'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*故障排除Applets & Services*，请访问[https://help.ifttt.com/hc/en-us/categories/115001569887-Troubleshooting-Applets-Services](https://help.ifttt.com/hc/en-us/categories/115001569887-Troubleshooting-Applets-Services)。'
- en: IFTTT also has a *Best Practices* page available at [https://help.ifttt.com/hc/en-us/categories/115001569787-Best-Practices](https://help.ifttt.com/hc/en-us/categories/115001569787-Best-Practices) where
    you can learn more about the platform.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: IFTTT还有一个*最佳实践*页面，您可以在[https://help.ifttt.com/hc/en-us/categories/115001569787-Best-Practices](https://help.ifttt.com/hc/en-us/categories/115001569787-Best-Practices)上了解更多关于该平台的信息。
- en: As we discussed in the *Triggering an IFTTT Applet from your Raspberry Pi* section,
    for IFTTT *triggers,* you can adopt the same overall process we just covered for
    actioning your Raspberry Pi from any IFTTT recipe. Again, check out [https://ifttt.com/discover](https://ifttt.com/discover)
    for some ideas, and this time, remember that from our perspective, we use a *Webhook*
    action in our IFTTT recipes to control our Raspberry Pi. Here's an example – use
    Google Assistant to voice control your Raspberry Pi! Oh, wait a moment – we'll
    be doing this in the next chapter, [Chapter 14](fe8f7330-0472-437e-ab91-9b920d9edb98.xhtml),
    *Tying It All Together – An IoT Christmas Tree*!
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论了*从树莓派触发IFTTT Applet*部分之后，对于IFTTT *触发器*，您可以采用我们刚刚介绍的相同的整体流程来执行您的树莓派，以便从任何IFTTT配方中采取行动。再次查看[https://ifttt.com/discover](https://ifttt.com/discover)以获取一些想法，这一次，请记住，从我们的角度来看，我们在IFTTT配方中使用*Webhook*操作来控制我们的树莓派。这里有一个例子-使用Google助手语音控制您的树莓派！哦，等一下-我们将在下一章[第14章](fe8f7330-0472-437e-ab91-9b920d9edb98.xhtml)中做到这一点-将所有内容联系在一起-物联网圣诞树！
- en: We've now explored how to integrate our Raspberry Pi with IFTTT in two ways
    – as the *This* role to trigger an Applet and in the *That* role, whereby we can
    action our Raspberry Pi from a triggered Applet. Next, we will look at a way to
    create an IoT dashboard that we can use to visualize data.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了如何以两种方式将我们的树莓派与IFTTT集成-作为*This*角色来触发Applet，以及在*That*角色中，我们可以从触发的Applet中执行我们的树莓派。接下来，我们将看一种方法来创建一个物联网仪表板，我们可以用来可视化数据。
- en: Visualizing data with the ThingSpeak platform
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ThingSpeak平台可视化数据
- en: We have just learned how to create simple automation using the IFTTT platform.
    In this section, we will integrate with the ThingSpeak platform to visually display
    temperature and humidity data that we'll collect using our DHT 11 or DHT 22 sensors.
    We will be using the DHT 11/DHT 22 circuit we created earlier in this chapter.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚学习了如何使用IFTTT平台创建简单的自动化。在本节中，我们将与ThingSpeak平台集成，以可视化显示我们将使用DHT 11或DHT 22传感器收集的温度和湿度数据。我们将使用我们在本章前面创建的DHT
    11/DHT 22电路。
- en: ThingSpeak ([thingspeak.com](https://thingspeak.com)) is a data visualization,
    aggregation, and analysis platform. We will be focusing on the data visualization
    aspect, and specifically on how to integrate our Raspberry Pi into this platform.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: ThingSpeak([thingspeak.com](https://thingspeak.com))是一个数据可视化、聚合和分析平台。我们将专注于数据可视化方面，特别是如何将我们的树莓派集成到该平台中。
- en: I've chosen ThingSpeak for our example in this section for a couple of reasons
    – it's simple and easy to set up and integrate with, and for simple data visualizations
    like the ones we will be doing, it's free. There are many other visualization
    platforms available, and they all have their own unique features, pricing structures,
    and complexities. I've included a few suggestions in the *Other IoT and automation
    platforms for further exploration* section for you to explore.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择在本节中以ThingSpeak为例的原因有几个-它简单易用，并且对于我们将要做的简单数据可视化来说，它是免费的。还有许多其他可用的可视化平台，它们都有自己独特的功能、定价结构和复杂性。我在*其他物联网和自动化平台供进一步探索*部分中包含了一些建议供您探索。
- en: If you wish to explore the aggregation and analysis features in more depth,
    you can find many quality examples, tutorials, and documentation by just searching
    for ThingSpeak. As a suggestion, start your investigation at [https://au.mathworks.com/help/thingspeak](https://au.mathworks.com/help/thingspeak).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望更深入地探索聚合和分析功能，您可以通过搜索ThingSpeak找到许多优质的示例、教程和文档。作为建议，从[https://au.mathworks.com/help/thingspeak](https://au.mathworks.com/help/thingspeak)开始您的调查。
- en: 'An example of the dashboard we will be creating can be seen in the following
    screenshot. Notice the Channel Settings and API Keys items shown in the Tab bar
    – we will be referring to these tabs shortly:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下面的屏幕截图中看到我们将要创建的仪表板的一个示例。请注意标签栏中显示的通道设置和API密钥项目-我们将很快提到这些标签：
- en: '![](assets/305142c2-ad8f-41e8-862f-11f3a9a9361f.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/305142c2-ad8f-41e8-862f-11f3a9a9361f.png)'
- en: Figure 13.21 – The ThingSpeak channel dashboard
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.21-ThingSpeak通道仪表板
- en: Our first stop before we can integrate our Raspberry Pi and send data to ThingSpeak
    is to configure the platform for our integration.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以集成我们的树莓派并将数据发送到ThingSpeak之前，我们的第一站是为我们的集成配置平台。
- en: Configuring the ThinkSpeak platform
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置ThinkSpeak平台
- en: 'Configuring ThinkSpeak is relatively simple – in fact, it''s one of the most
    straightforward platforms in its class I have come across. Here are the steps
    that we need to follow:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 配置ThinkSpeak相对简单-事实上，这是我遇到的同类平台中最简单的之一。以下是我们需要遵循的步骤：
- en: First, you will need to create a ThingSpeak account for yourself. Visit their
    website, [thingspeak.com](https://thingspeak.com), and click on the Sign Up button.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要为自己创建一个ThingSpeak账户。访问他们的网站[thingspeak.com](https://thingspeak.com)，然后点击“注册”按钮。
- en: Once you have created your ThinkSpeak account and logged into the platform,
    you should land on the My Channels page; that is, [https://thingspeak.com/channels](https://thingspeak.com/channels).
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您创建了ThinkSpeak账户并登录到平台，您应该会登陆到“我的通道”页面；也就是[https://thingspeak.com/channels](https://thingspeak.com/channels)。
- en: In the ThingSpeak ecosystem, a *channel* is a virtual place where we store our
    data, dashboards, and visualizations. It's analogous to a workspace.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在ThingSpeak生态系统中，*通道*是我们存储数据、仪表板和可视化的虚拟位置。这类似于一个工作区。
- en: 'Next, we need to create a new channel by clicking on the New Channel button:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要点击“新通道”按钮创建一个新通道：
- en: '![](assets/d34b6031-bbfc-4569-bcbb-f8f95f37d3ba.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d34b6031-bbfc-4569-bcbb-f8f95f37d3ba.png)'
- en: Figure 13.22 – ThingSpeak channel configuration
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.22-ThingSpeak通道配置
- en: 'On the New Channel page, enter the following details:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在新通道页面上，输入以下详细信息：
- en: Name: `Environmental Data` (or any name of your choice)
  id: totrans-255
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`环境数据`（或您选择的任何名称）
- en: 'Field1: `temperature`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段1：`温度`
- en: 'Field2: `humidity`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段2：`湿度`
- en: You can leave all the other fields as their default values.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将所有其他字段保留为默认值。
- en: If you need to review or change your channel settings later, they can be found
    on the Channel Settings tab, as shown previously in *Figure 13.19.*
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以后需要查看或更改通道设置，可以在通道设置选项卡中找到，如*图13.19.*中所示。
- en: Once you have filled in the fields, scroll to the bottom of the page and click
    the Save Channel button. You will be presented with a page similar to the one
    pictured in *Figure 13.19*, except it will be blank with no data.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写完字段后，滚动到页面底部，然后单击“保存通道”按钮。您将看到一个类似于*图13.19*的页面，只是没有数据，是空白的。
- en: 'To add the two gauges seen in *Figure 13.19*, to this page, do the following:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 要在*图13.19*中看到的两个表中添加两个表，请执行以下操作：
- en: Press the Add Widgets button.
  id: totrans-262
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按“添加小部件”按钮。
- en: Select the Gauge icon and press Next.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“仪表”图标，然后按“下一步”。
- en: In the Configure widget parameters dialog, type in a name for the gauge (for
    example, `temperature`) and select the appropriate field number (Field1 for temperature,
    Field2 for humidity, respectively).
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“配置小部件参数”对话框中，输入仪表的名称（例如`温度`），并选择适当的字段编号（温度为Field1，湿度为Field2）。
- en: You can adjust and experiment with the other parameters as you desire to set
    max/min ranges, coloring, and other display properties for your gauge.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以根据需要调整和实验其他参数，以设置仪表的最大/最小范围、颜色和其他显示属性。
- en: Repeat the process for the second gauge.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为第二个表重复该过程。
- en: Don't worry if the gauges (or charts) display Field value unavailable. This
    is correct since we have not sent any temperature or humidity data to ThingSpeak
    yet.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仪表（或图表）显示“字段值不可用”，不要担心。这是正确的，因为我们还没有向ThingSpeak发送任何温度或湿度数据。
- en: 'Now, it''s time to obtain an API key and channel ID, which we will need in
    order to configure our forthcoming Python code. Click on to the API Keys tab:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候获取API密钥和通道ID了，我们需要这些信息来配置即将到来的Python代码。点击API密钥选项卡：
- en: '![](assets/71b5fdb4-937a-4b6a-8dc4-fc7b4f0bf64e.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/71b5fdb4-937a-4b6a-8dc4-fc7b4f0bf64e.png)'
- en: Figure 13.21 – The API Keys tab
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.21 - API密钥选项卡
- en: 'Here is the information we need to collect for our Python program:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的Python程序需要收集的信息：
- en: Write API Key (because we will be *writing* data to the platform)
  id: totrans-272
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写API密钥（因为我们将向平台*写入*数据）
- en: Channel ID (this is listed on all ThinkSpeak pages, near the top)
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通道ID（这在所有ThinkSpeak页面上都有，靠近顶部）
- en: Now that we have created and configured a simple ThinkSpeak channel and collected
    our API key and Channel ID, we can move onto our Python code.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建并配置了一个简单的ThinkSpeak通道，并收集了我们的API密钥和通道ID，我们可以继续进行Python代码。
- en: Configuring and running the ThinkSpeak Python program
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置和运行ThinkSpeak Python程序
- en: 'We have provided two sample programs that integrate with ThinkSpeak. They are
    as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了两个样本程序，可以与ThinkSpeak集成。它们如下：
- en: '`chapter13/thingspeak_dht_mqtt.py`: An example that uses MQTT to send data
    into a ThinkSpeak channel.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chapter13/thingspeak_dht_mqtt.py`：一个使用MQTT将数据发送到ThinkSpeak通道的示例。'
- en: '`chapter13/thingspeak_dht_http.py`: An example that uses the Python requests
    library to make RESTful API calls that send data to a ThinkSpeak channel.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chapter13/thingspeak_dht_http.py`：一个使用Python请求库进行RESTful API调用，将数据发送到ThinkSpeak通道的示例。'
- en: 'The core concepts of these two programs were discussed in earlier chapters.
    For your reference, they are as follows:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个程序的核心概念在早期章节中已经讨论过。供您参考，它们如下：
- en: '**MQTT**: We discussed the Paho-MQTT library in [Chapter 4](6947b564-6182-4ec9-998a-37f636c0bce6.xhtml),
    *Networking with MQTT, Python, and the Mosquitto MQTT Broker*. A key difference
    for this chapter is that we are using the Paho-MQTT *simplifying client wrapper* to
    publish MQTT messages instead of a full life cycle example.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MQTT**：我们在[第4章](6947b564-6182-4ec9-998a-37f636c0bce6.xhtml)中讨论了Paho-MQTT库，*使用MQTT、Python和Mosquitto
    MQTT代理进行网络通信*。本章的一个关键区别是，我们使用Paho-MQTT *简化客户端包装器*来发布MQTT消息，而不是完整的生命周期示例。'
- en: We covered RESTful APIs and the requests library in [Chapter 2](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml),
    *Getting Started with Python and IoT.*
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在[第2章](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml)中介绍了RESTful API和请求库，*Python和物联网入门*。
- en: The code related to the DHT 11/DHT 22 temperature and humidity sensor was covered
    in [Chapter 9](a77d6d94-a71a-4d7e-a66f-7c552af5b051.xhtml), *Measuring Temperature,
    Humidity, and Light Levels*.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关DHT 11/DHT 22温湿度传感器的代码在[第9章](a77d6d94-a71a-4d7e-a66f-7c552af5b051.xhtml)中已经涵盖了，*测量温度、湿度和光照水平*。
- en: 'Let''s configure these programs, run them, and see the data appear in ThingSpeak.
    We''ll walk through the example code provided in `chapter13/thingspeak_dht_mqtt.py`;
    however, the overall process will be the same for `chapter13/thingspeak_dht_http.py`:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们配置这些程序，运行它们，并在ThingSpeak中看到数据。我们将演示`chapter13/thingspeak_dht_mqtt.py`中提供的示例代码；但是，对于`chapter13/thingspeak_dht_http.py`，整个过程都是相同的：
- en: Open the `chapter13/thingspeak_dht_mqtt.py` file for editing.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`chapter13/thingspeak_dht_mqtt.py`文件进行编辑。
- en: 'Near the top of the file, identify the following code starting at line (1)
    and confirm your DHT sensor is connected to the correct GPIO pin and that the
    correct sensor instance is enabled in code:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部附近，找到以下代码，从第（1）行开始，并确认您的DHT传感器连接到正确的GPIO引脚，并且正确的传感器实例在代码中启用：
- en: '[PRE7]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, identify the following code segment starting at line (2) and update it
    with your ThingSpeak write API key, Channel ID, and time zone. Note that `CHANNEL_ID` is
    only used in the MQTT integration (so it does not appear in the `thingspeak_dht_http.py` file):'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，找到以下代码段，从第（2）行开始，并使用您的ThingSpeak写API密钥、通道ID和时区进行更新。请注意，`CHANNEL_ID`仅在MQTT集成中使用（因此它不会出现在`thingspeak_dht_http.py`文件中）：
- en: '[PRE8]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Save your file and run the program. You should receive an output similar to
    the following:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并运行程序。您应该会收到类似以下内容的输出：
- en: '[PRE9]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Within seconds, you should see your data appear on your ThingSpeak dashboard!
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几秒钟后，您应该会在ThingSpeak仪表板上看到您的数据出现！
- en: Congratulations! With that, you have created a ThingSpeak dashboard to visualize data
    that's been collected by your Raspberry Pi. Visualizing data is a frequent requirement
    for many monitoring IoT projects, whether it be simple indicator displays such
    as gauges or producing historic graphs to visualize trends. How you approach visualization
    for your data all depends on your requirements; however, the one thing that's
    common to all these requirements is that there are many ready-to-go services such
    as ThingSpeak to help you achieve this as an alternative to custom coding dashboard
    and visualization applications yourself.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！通过这样，你已经创建了一个 ThingSpeak 仪表板来可视化树莓派收集的数据。对于许多监控物联网项目来说，可视化数据是一个经常的需求，无论是简单的指示器显示，比如表盘，还是生成历史图表来可视化趋势。你如何处理数据的可视化完全取决于你的需求；然而，所有这些需求共同的一点是，有许多现成的服务，如
    ThingSpeak，可以帮助你实现这一点，而不是自己定制编码仪表板和可视化应用。
- en: Now, I will conclude this chapter with a brief discussion of other popular IoT
    platforms that you may like to explore and use in your future projects.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将用一个简短的讨论来结束这一章，讨论一些其他流行的物联网平台，你可能会喜欢在未来的项目中探索和使用。
- en: Other IoT and automation platforms for further exploration
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他物联网和自动化平台供进一步探索
- en: So far in this chapter, we have seen IFTTT and ThingSpeak in action, as well
    as how to integrate them with our Raspberry Pi. We saw how to use IFTTT to create
    simple workflows and how we can visualize data with ThingSpeak – two very different
    ideas, but nonetheless, they are both IoT platforms.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，我们已经看到了 IFTTT 和 ThingSpeak 的运作方式，以及如何将它们与我们的树莓派集成。我们看到了如何使用 IFTTT
    创建简单的工作流程，以及如何使用 ThingSpeak 可视化数据——两个非常不同的想法，但它们都是物联网平台。
- en: Both these platforms are immensely powerful and offer a wide range of features
    and possibilities beyond what we can cover in a single chapter, so I do encourage
    you to seek out their documentation and examples to advance your learning.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个平台都非常强大，并提供了广泛的功能和可能性，超出了我们在一个章节中所能涵盖的范围，所以我鼓励你查阅它们的文档和示例，以提升你的学习。
- en: There are many other IoT platforms, applications, and frameworks that are available.
    This section will provide a short, curated list based on my experience. They all
    fit in nicely with this book's Python- and Raspberry Pi-based themes.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他可用的物联网平台、应用程序和框架。本节将根据我的经验提供一个简短的策划清单。它们都与本书的 Python 和树莓派主题很好地契合。
- en: '**Zapier**'
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Zapier**'
- en: We've already seen IFFF in action. IFTTT is more consumer-focused in terms of
    the services that it supports, plus as we have seen, we are limited to a single
    *This* trigger and a single *That* action.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了 IFTTT 的运作方式。在支持的服务方面，IFTTT 更加面向消费者，而且正如我们所见，我们受限于单个 *This* 触发器和单个 *That*
    动作。
- en: Zappier is very similar in principle to IFTTT, but with a more business-orientated
    focus, including a range of services and integrations not available with IFTTT
    (there will be services and integrations that are unique to IFTTT also). Furthermore,
    Zapier is also capable of much more complex workflows for triggering events and
    actions.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: Zappier 在原则上与 IFTTT 非常相似，但更加注重商业，包括一系列服务和集成，这些在 IFTTT 中不可用（IFTTT 也有独特的服务和集成）。此外，Zapier
    还能够触发事件和动作的更复杂工作流程。
- en: You will find it relatively simple to reimplement our two IFTTT examples from
    this chapter in Zappier.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现重新实现本章中我们的两个 IFTTT 示例在 Zappier 中相对简单。
- en: Website: [https://zapier.com](https://zapier.com).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 网站：[https://zapier.com](https://zapier.com)。
- en: '**IFTTT platform**'
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**IFTTT 平台**'
- en: In this chapter, we used IFTTT as an end user and performed our integrations
    using Webhooks. If you are a business wishing to create gadgets you want to expose
    as first-class IFTTT services, then you should check out the IFTTT platform.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用 IFTTT 作为最终用户，并使用 Webhooks 进行集成。如果你是一家希望创建作为一流 IFTTT 服务公开的小工具的企业，那么你应该了解一下
    IFTTT 平台。
- en: Website: [https://platform.ifttt.com](https://platform.ifttt.com).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 网站：[https://platform.ifttt.com](https://platform.ifttt.com)。
- en: '**ThingsBoard IoT platform**'
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**ThingsBoard 物联网平台**'
- en: ThingsBoard is an open source IoT platform that you can download and host on
    your Raspberry Pi. On the surface, it will allow you to build dashboards and data
    visualizations, just as we did in ThingSpeak. Compared to ThingSpeak, you will
    find that ThingsBoard has a steeper learning curve when it comes to creating your
    first dashboard; however, you will also find that it offers a more extensive set
    of widgets and customization options. Plus, unlike ThingSpeak, which can only
    consume data, ThingsBoard allows you to embed controls into a dashboard that lets
    you interact with your Raspberry Pi using MQTT.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: ThingsBoard 是一个开源的物联网平台，你可以在树莓派上下载和托管。从表面上看，它将允许你构建仪表板和数据可视化，就像我们在 ThingSpeak
    中所做的那样。与 ThingSpeak 相比，你会发现 ThingsBoard 在创建你的第一个仪表板时有一个更陡的学习曲线；然而，你也会发现它提供了更广泛的小部件和自定义选项。此外，与只能消耗数据的
    ThingSpeak 不同，ThingsBoard 允许你将控件嵌入到仪表板中，让你使用 MQTT 与你的树莓派进行交互。
- en: From experience, working your way through the ThingsBoard documentation and
    tutorials (many are available as videos) is a must if you want to learn how to
    use this platform since on your first visit to its UI, it's not immediately obvious
    what you need to do.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 根据经验，如果你想学习如何使用这个平台，那么你必须仔细阅读 ThingsBoard 的文档和教程（许多都是视频），因为在你第一次访问其用户界面时，不会立即明显你需要做什么。
- en: 'Here are a few specific resources from their website:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是他们网站上的一些具体资源：
- en: Raspberry Pi installation instructions: [https://thingsboard.io/docs/user-guide/install/rpi](https://thingsboard.io/docs/user-guide/install/rpi)
    (don't worry if it says Raspberry Pi 3; it will still work on a 4)
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派安装说明：[https://thingsboard.io/docs/user-guide/install/rpi](https://thingsboard.io/docs/user-guide/install/rpi)（不用担心它说的是树莓派
    3；它在 4 上也能运行）
- en: Getting started guide: [https://thingsboard.io/docs/getting-started-guides/helloworld](https://thingsboard.io/docs/getting-started-guides/helloworld)
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入门指南：[https://thingsboard.io/docs/getting-started-guides/helloworld](https://thingsboard.io/docs/getting-started-guides/helloworld)
- en: While there are no Python-specific examples in the getting started guide, there
    are Mosquito MQTT examples and cURL examples that demonstrate the RESTful API.
    A suggestion would be to use the two ThingSpeak code examples presented in this
    chapter as a starting point and adopt them to use the ThingBoard-specific MQTT
    and/or RESTful APIs.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在入门指南中没有Python特定的示例，但有Mosquito MQTT示例和cURL示例，演示了RESTful API。建议使用本章中提供的两个ThingSpeak代码示例作为起点，并采用它们来使用ThingBoard特定的MQTT和/或RESTful
    API。
- en: 'Website: [https://thingsboard.io](https://thingsboard.io).'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 网站：[https://thingsboard.io](https://thingsboard.io)。
- en: '**Home Assistant**'
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Home Assistant**'
- en: Home Assistant is a pure Python home automation suite. Out of the box, Home
    Assistant can connect with a wide range of internet-enabled devices such as lights,
    doors, fridges, and coffee machines – to mention only a few.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: Home Assistant是一个纯Python家庭自动化套件。Home Assistant可以与各种互联网设备连接，如灯、门、冰箱和咖啡机 - 仅举几例。
- en: Home Assistant gets a mention here, not only because it is built with Python,
    but because it allows us to integrate directly with the host Raspberry Pi's GPIO
    pins, as well as with a remote Raspberry Pi's GPIO pins using PiGPIO's remote
    GPIO feature. Plus, there are MQTT and RESTful API integration options available.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: Home Assistant在这里得到提及，不仅因为它是用Python构建的，而且因为它允许我们直接与主机树莓派的GPIO引脚集成，以及使用PiGPIO的远程GPIO功能与远程树莓派的GPIO引脚集成。此外，还有MQTT和RESTful
    API集成选项。
- en: While simple in concept and end user operation, there is a highish learning
    curve (and a fair amount of experimentation needed) when it comes to configuring
    Home Assistant since most of the integrations are performed by manually editing
    **YAML Ain't Markup Language** (**YAML**) files directly.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在概念和最终用户操作上很简单，但是在配置Home Assistant时存在较高的学习曲线（需要相当多的实验），因为大多数集成是通过直接编辑**YAML
    Ain't Markup Language**（**YAML**）文件来完成的。
- en: 'In relation to GPIO integrations, I have selected some resources from their
    website to get you started. I recommend reading the glossary first as it will
    help you better understand the Home Assistant terminology and therefore help you
    better understand other parts of the documentation:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 关于GPIO集成，我从他们的网站上选择了一些资源来帮助您入门。我建议先阅读术语表，因为这将帮助您更好地理解Home Assistant的术语，从而帮助您更好地理解文档的其他部分：
- en: 'Installation: There are a variety of ways that Home Assistant can be installed.
    For testing the platform and building a GPIO integration, I suggest the "Virtual
    Environment" option, documented at [https://www.home-assistant.io/docs/installation/virtualenv](https://www.home-assistant.io/docs/installation/virtualenv).'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装：Home Assistant可以以多种方式安装。为了测试平台并构建GPIO集成，我建议选择“虚拟环境”选项，文档位于[https://www.home-assistant.io/docs/installation/virtualenv](https://www.home-assistant.io/docs/installation/virtualenv)。
- en: Glossary: [https://www.home-assistant.io/docs/glossary](https://www.home-assistant.io/docs/glossary).
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 术语表：[https://www.home-assistant.io/docs/glossary](https://www.home-assistant.io/docs/glossary)。
- en: Available Raspberry Pi integrations: [https://www.home-assistant.io/integrations/#search/Raspberry%20Pi](https://www.home-assistant.io/integrations/#search/Raspberry%20Pi).
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用的树莓派集成：[https://www.home-assistant.io/integrations/#search/Raspberry%20Pi](https://www.home-assistant.io/integrations/#search/Raspberry%20Pi)。
- en: 'Website: [https://www.home-assistant.io](https://www.home-assistant.io).'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 网站：[https://www.home-assistant.io](https://www.home-assistant.io)。
- en: '**Amazon Web Services (AWS)**'
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**亚马逊网络服务（AWS）**'
- en: Another suggestion is Amazon Web Services, specifically two services – IoT Core
    and Elastic Beanstalk. These options will provide you with immense flexibility
    and a near-endless number of options when it comes to creating IoT applications.
    IoT Core is Amazon's IoT platform where you can create dashboards, workflows,
    and integrations, while Elastic Beanstalk is their cloud platform where you can
    host your own programs – including Python – in the cloud.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个建议是亚马逊网络服务，具体来说是两项服务 - IoT Core和Elastic Beanstalk。这些选项将为您提供巨大的灵活性和几乎无穷无尽的选择，当涉及到创建物联网应用程序时。IoT
    Core是亚马逊的物联网平台，您可以在其中创建仪表板、工作流和集成，而Elastic Beanstalk是他们的云平台，您可以在其中托管自己的程序 - 包括Python
    - 在云中。
- en: Amazon Web Services is an advanced development platform, so you will need to
    invest weeks into learning how it works and how to build and deploy applications
    using it, but I can promise you that you will learn a lot during the process!
    Plus, their documentation and tutorials are very high quality.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊网络服务是一个先进的开发平台，因此您需要投入几周的时间来学习它的工作原理，以及如何使用它构建和部署应用程序，但我可以向您保证，在这个过程中您会学到很多！此外，他们的文档和教程质量非常高。
- en: 'Amazon IoT Core: [https://aws.amazon.com/iot-core](https://aws.amazon.com/iot-core).'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊物联网核心：[https://aws.amazon.com/iot-core](https://aws.amazon.com/iot-core)。
- en: 'Amazon Elastic Beanstalk: [https://aws.amazon.com/elasticbeanstalk](https://aws.amazon.com/elasticbeanstalk).'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊弹性Beanstalk：[https://aws.amazon.com/elasticbeanstalk](https://aws.amazon.com/elasticbeanstalk)。
- en: '**Microsoft Azure, IBM Watson, and Google Cloud**'
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Microsoft Azure、IBM Watson和Google Cloud**'
- en: Finally, I do want to mention these other IT giants, who all offer their own
    cloud and IoT platforms. My suggestion regarding AWS is purely due to my more
    in-depth experience with this platform. The comparative platforms offered by Microsoft,
    IBM, and Google are also high quality and backed with excellent documentation
    and tutorials, so if your personal preference is with one of these providers,
    you are still in good hands.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我想提一下其他IT巨头，他们都提供自己的云和物联网平台。我之所以建议AWS，纯粹是因为我对这个平台有更深入的经验。微软、IBM和谷歌提供的比较平台也是高质量的，并且有着优秀的文档和教程支持，因此如果您个人偏好于这些提供商中的一个，您仍然是安全的。
- en: Summary
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored and learned how to use our Raspberry Pi with both
    the IFTTT and ThinkSpeak IoT platforms. We created two IFTTT examples where our
    Raspberry Pi performed the *This* role in an IFTTT Applet to start an IFTTT workflow.
    We also saw how to use our Raspberry Pi in the *That* role so that it can be actioned
    by an IFTTT Applet. Next, we covered an example of how to integrate with the ThinkSpeak
    IoT platform to visualize temperature and humidity data collected by our Raspberry
    Pi. Finally, we discussed other IoT platform options that you may like to investigate
    and experiment with.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨并学习了如何将我们的Raspberry Pi与IFTTT和ThinkSpeak IoT平台一起使用。我们创建了两个IFTTT示例，其中我们的Raspberry
    Pi在IFTTT Applet中执行了*This*角色，以启动IFTTT工作流程。我们还看到了如何将我们的Raspberry Pi用作*That*角色，以便它可以被IFTTT
    Applet执行。接下来，我们介绍了如何与ThinkSpeak IoT平台集成，以可视化由我们的Raspberry Pi收集的温度和湿度数据的示例。最后，我们讨论了您可能希望调查和实验的其他IoT平台选项。
- en: We certainly only covered the basics of what is possible with visualization
    and automation platforms in this chapter. I encourage you to seek our further
    IFTTT examples and ideas you can experiment with, and also explore the other platforms
    that we mentioned. And remember, while every platform will be different and have
    its own integration considerations, the commonly accepted standards to achieve
    integration boil down to RESTful APIs and MQTT, both of which you now have experience
    with!
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们确实只涵盖了可视化和自动化平台可能性的基础知识。我鼓励你寻找更多的IFTTT示例和你可以尝试的想法，并探索我们提到的其他平台。请记住，虽然每个平台都会有所不同并且有自己的集成考虑，但通常接受的实现集成的标准是RESTful
    API和MQTT，这两者你现在都有经验了！
- en: In the next chapter, we will cover a comprehensive end-to-end example to pull
    together many of the concepts and examples that we have covered throughout this
    book.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将涵盖一个全面的端到端示例，汇集了本书中涵盖的许多概念和示例。
- en: Questions
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'As we conclude this chapter, here is a list of questions for you to test your
    knowledge regarding this chapter''s material. You will find the answers in the
    *Assessments* section of the *Appendix*:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们结束本章，这里有一些问题供你测试对本章材料的了解。你将在*附录*的*评估*部分找到答案：
- en: With our first IFTTT Applet, where we monitored the temperature, why did we
    use a different high and low temperature value to trigger our Applet and send
    an email?
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的第一个IFTTT Applet中，我们监测温度时为什么使用了不同的高温和低温值来触发我们的Applet并发送电子邮件？
- en: What was the advantage of using an intermediary service such as dweet.io with
    our IFTTT Webhook service?
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用像dweet.io这样的中介服务与我们的IFTTT Webhook服务有什么优势？
- en: What are some of the core differences between IFTTT and Zapier?
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IFTTT和Zapier之间的一些核心区别是什么？
- en: Can you control your Raspberry Pi from a ThingSpeak dashboard?
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能从ThingSpeak仪表板控制你的Raspberry Pi吗？
- en: In relation to data, what is the limitation of the IFTTT Webhook service when
    used as an action (that is, on the *That* side of an applet)?
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于数据，当IFTTT Webhook服务用作动作（即applet的*That*一侧）时有什么限制？
- en: You want to prototype the switching on and off of an over-the-counter smart
    light bulb based on a Raspberry Pi's GPIO pin state. What platforms could you
    use?
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你想要原型化基于Raspberry Pi的GPIO引脚状态来开关柜台智能灯泡。你可以使用哪些平台？
