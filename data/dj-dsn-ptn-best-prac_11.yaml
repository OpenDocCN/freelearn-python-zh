- en: Chapter 11. Production-ready
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。生产就绪
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Picking a web stack
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择Web堆栈
- en: Hosting approaches
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管方法
- en: Deployment tools
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署工具
- en: Monitoring
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控
- en: Performance tips
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能提示
- en: So, you have developed and tested a fully functional web application in Django.
    Deploying this application can involve a diverse set of activities from choosing
    your hosting provider to performing installations. Even more challenging could
    be the tasks of maintaining a production site working without interruptions and
    handling unexpected bursts in traffic.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您已经在Django中开发和测试了一个完全功能的Web应用程序。部署此应用程序可能涉及从选择托管提供商到执行安装等多种活动。更具挑战性的可能是保持生产站点在没有中断的情况下运行，并处理意外的流量突发情况。
- en: The discipline of system administration is vast. Hence, this chapter will cover
    a lot of ground. However, given the limited space, we will attempt to familiarize
    you with the various aspects of building a production environment.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 系统管理的学科是广泛的。因此，本章将涵盖很多内容。然而，鉴于空间有限，我们将尝试让您熟悉构建生产环境的各个方面。
- en: Production environment
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产环境
- en: Although, most of us intuitively understand what a production environment is,
    it is worthwhile to clarify what it really means. A production environment is
    simply one where end users use your application. It should be available, resilient,
    secure, responsive, and must have abundant capacity for current (and future) needs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们大多数人直觉上理解生产环境是什么，但值得澄清它的真正含义。生产环境只是最终用户使用您的应用程序的地方。它应该是可用的、有弹性的、安全的、响应迅速的，并且必须具有当前（和未来）需求的充足容量。
- en: Unlike a development environment, the chance of real business damage due to
    any issues in a production environment is high. Hence, before moving to production,
    the code is moved to various testing and acceptance environments in order to get
    rid of as many bugs as possible. For easy traceability, every change made to the
    production environment must be tracked, documented, and made accessible to everyone
    in the team.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与开发环境不同，生产环境中出现任何问题可能会导致真正的业务损失。因此，在进入生产环境之前，代码会被移动到各种测试和验收环境，以尽可能消除尽可能多的错误。为了方便追踪，对生产环境所做的每一次更改都必须进行跟踪、记录并向团队中的每个人提供访问权限。
- en: As an upshot, there must be no development performed directly on the production
    environment. In fact, there is no need to install development tools, such as a
    compiler or debugger in production. The presence of any additional software increases
    the attack surface of your site and could pose a security risk.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，绝对不应该直接在生产环境中进行开发。事实上，生产环境中不需要安装开发工具，如编译器或调试器。任何额外软件的存在都会增加您站点的攻击面，并可能构成安全风险。
- en: Most web applications are deployed on sites with extremely low downtime, say,
    large data centers running 24/7/365\. By designing for failure, even if an internal
    component fails, there is enough redundancy to prevent the entire system crashing.
    This concept of avoiding a **single point of** **failure** (**SPOF**) can be applied
    at every level—hardware or software.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Web应用程序部署在几乎没有停机时间的站点上，比如全年无休运行的大型数据中心。通过设计以应对故障，即使内部组件出现故障，也有足够的冗余来防止整个系统崩溃。这种避免**单点故障**（**SPOF**）的概念可以应用于每个层面——硬件或软件。
- en: Hence, it is crucial which collection of software you choose to run in your
    production environment.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，选择在生产环境中运行的软件集合至关重要。
- en: Choosing a web stack
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择Web堆栈
- en: So far, we have not discussed the stack on which your application will be running
    on. Even though we are talking about it at the very end, it is best not to postpone
    such decisions to the later stages of the application lifecycle. Ideally, your
    development environment must be as close as possible to the production environment
    to avoid the "but it works on my machine" argument.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有讨论您的应用程序将在其上运行的堆栈。尽管我们在最后才谈论它，但最好不要将这样的决定推迟到应用程序生命周期的后期阶段。理想情况下，您的开发环境必须尽可能接近生产环境，以避免“但它在我的机器上运行”这种论点。
- en: By a web stack, we refer to the set of technologies that are used to build a
    web application. It is usually depicted as a series of components, such as OS,
    database, and web server, all piled on top of one another. Hence, it is referred
    to as a stack.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Web堆栈，我们指的是用于构建Web应用程序的一组技术。它通常被描述为一系列组件，如操作系统、数据库和Web服务器，都堆叠在一起。因此，它被称为堆栈。
- en: We will mainly focus on open source solutions here because they are widely used.
    However, various commercial applications can also be used if they are more suited
    to your needs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要将关注开源解决方案，因为它们被广泛使用。但是，如果它们更适合您的需求，也可以使用各种商业应用程序。
- en: Components of a stack
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆栈的组件
- en: 'A production Django web stack is built using several kinds of application (or
    layers, depending on your terminology). While constructing your web stack, some
    of the choices you might need to make are as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 生产Django Web堆栈是使用多种应用程序（或层，根据您的术语）构建的。在构建Web堆栈时，您可能需要做出以下选择：
- en: 'Which OS and distribution? For example: Debian, Red Hat, or OpenBSD.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择哪种操作系统和发行版？例如：Debian，Red Hat或OpenBSD。
- en: 'Which WSGI server? For example: Gunicorn, uWSGI.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择哪种WSGI服务器？例如：Gunicorn，uWSGI。
- en: 'Which web server? For example: Apache, Nginx.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择哪种Web服务器？例如：Apache，Nginx。
- en: 'Which database? For example: PostgreSQL, MySQL, or Redis.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择哪种数据库？例如：PostgreSQL，MySQL或Redis。
- en: 'Which caching system? For example: Memcached, Redis.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择哪种缓存系统？例如：Memcached，Redis。
- en: 'Which process control and monitoring system? For example: Upstart, Systemd,
    or Supervisord.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择哪种进程控制和监控系统？例如：Upstart，Systemd或Supervisord。
- en: 'How to store static media? For example: Amazon S3, CloudFront.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何存储静态媒体？例如：Amazon S3，CloudFront。
- en: There could be several more, and these choices are not mutually exclusive either.
    Some use several of these applications in tandem. For example, username availability
    might be looked up on Redis, while the primary database might be PostgreSQL.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可能还有其他几种选择，这些选择也不是互斥的。有些人同时使用这些应用程序。例如，用户名的可用性可能在 Redis 上查找，而主数据库可能是 PostgreSQL。
- en: There is no 'one size fits all' answer when it comes to selecting your stack.
    Different components have different strengths and weaknesses. Choose them only
    after careful consideration and testing. For instance, you might have heard that
    Nginx is a popular choice for a web server, but you might actually need Apache's
    rich ecosystem of modules or options.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择堆栈时，没有一个“一刀切”的答案。不同的组件有不同的优势和劣势。只有经过慎重考虑和测试后才选择它们。例如，你可能听说过 Nginx 是一个流行的
    Web 服务器选择，但你实际上可能需要 Apache 的丰富模块或选项。
- en: Sometimes, the selection of the stack is based on various non-technical reasons.
    Your organization might have standardized on a particular operating system, say,
    Debian for all its servers. Or your cloud hosting provider might support only
    a limited set of stacks.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，选择堆栈是基于各种非技术原因的。你的组织可能已经将特定的操作系统，比如 Debian，作为所有服务器的标准。或者你的云托管提供商可能只支持有限的堆栈。
- en: Hence, how you choose to host your Django application is one of the key factors
    in determining your production setup.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你选择如何托管你的 Django 应用程序是确定你的生产设置的关键因素之一。
- en: Hosting
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管
- en: When it comes to hosting, you need to make sure whether to go for a hosting
    platform such as Heroku or not. If you do not know much about managing a server
    or do not have anyone with that knowledge in your team, then a hosting platform
    is a convenient option.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在托管方面，你需要确保是否选择像 Heroku 这样的托管平台。如果你不太了解如何管理服务器，或者团队中没有人具备这方面的知识，那么托管平台是一个方便的选择。
- en: Platform as a service
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平台即服务
- en: A Platform as a Service (PaaS) is defined as a cloud service where the solution
    stack is already provided and managed for you. Popular platforms for Django hosting
    include Heroku, PythonAnywhere, and Google App Engine.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 平台即服务（PaaS）被定义为一个云服务，其中解决方案堆栈已经为你提供和管理。Django 托管的热门平台包括 Heroku、PythonAnywhere
    和 Google App Engine。
- en: In most cases, deploying a Django application should be as simple as selecting
    the services or components of your stack and pushing out your source code. You
    do not have to perform any system administration or setup yourself. The platform
    is entirely managed.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，部署 Django 应用程序应该就像选择堆栈的服务或组件，然后推送你的源代码一样简单。你不需要进行任何系统管理或自己设置。平台完全由管理。
- en: Like most cloud services, the infrastructure can also scale on demand. If you
    need an additional database server or more RAM on a server, it can be easily provisioned
    from a web interface or the command line. The pricing is primarily based on your
    usage.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数云服务一样，基础设施也可以根据需求进行扩展。如果你需要额外的数据库服务器或者服务器上的更多内存，可以很容易地从 Web 界面或命令行进行配置。定价主要基于你的使用情况。
- en: The bottom line with such hosting platforms is that they are very easy to set
    up and ideal for smaller projects. They tend to be more expensive as your user
    base grows.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些托管平台的底线是它们非常容易设置，非常适合较小的项目。随着用户群体的增长，它们往往会变得更加昂贵。
- en: Another downside is that your application might get tied to a platform or become
    difficult to port. For instance, Google App Engine is used to support only a non-relational
    database, which means you need to use `django-nonrel`, a fork of Django. This
    limitation is now somewhat mitigated with Google Cloud SQL.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个缺点是，你的应用程序可能会与某个平台绑定，或者变得难以移植。例如，Google App Engine 只支持非关系型数据库，这意味着你需要使用 `django-nonrel`，这是
    Django 的一个分支。现在，谷歌云 SQL 已经在一定程度上缓解了这个限制。
- en: Virtual private servers
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟专用服务器
- en: A **virtual private server** (**VPS**) is a virtual machine hosted in a shared
    environment. From the developer's perspective, it would seem like a dedicated
    machine (hence, the word private) preloaded with an operating system. You will
    need to install and set up the entire stack yourself, though many VPS providers
    such as WebFaction and DigitalOcean offer easier Django setups.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟专用服务器（VPS）是在共享环境中托管的虚拟机。从开发者的角度来看，它看起来像是一个预装有操作系统的专用机器（因此称为私有）。你需要自己安装和设置整个堆栈，尽管许多
    VPS 提供商，比如 WebFaction 和 DigitalOcean，提供了更简单的 Django 设置。
- en: If you are a beginner and can spare some time, I highly recommend this approach.
    You would be given root access, and you can build the entire stack yourself. You
    will not only understand how various pieces of the stack come together but also
    have full control in fine-tuning each individual component.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个初学者，并且可以抽出一些时间，我强烈推荐这种方法。你将获得 root 访问权限，可以构建整个堆栈。你不仅会理解堆栈的各个部分是如何组合在一起的，还可以完全控制每个单独组件的微调。
- en: Compared to a PaaS, a VPS might work out to be more value for money, especially
    for high-traffic sites. You might be able to run several sites from the same server
    as well.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与 PaaS 相比，VPS 可能会更有性价比，特别是对于高流量的网站。你可能还可以从同一台服务器上运行多个站点。
- en: Other hosting approaches
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他托管方法
- en: Even though hosting on a platform or VPS are by far the two most popular hosting
    options, there are plenty of other options. If you are interested in maximizing
    performance, you can opt for a bare metal server with colocation from providers,
    such as Rackspace.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在平台或 VPS 上托管是迄今为止最流行的两种托管选项，但还有很多其他选择。如果你想最大化性能，你可以选择从提供商（比如 Rackspace）那里获得裸金属服务器的托管。
- en: On the lighter end of the hosting spectrum, you can save the cost by hosting
    multiple applications within Docker containers. Docker is a tool to package your
    application and dependencies in a virtual container. Compared to traditional virtual
    machines, a Docker container starts up faster and has minimal overheads (since
    there is no bundled operating system or hypervisor).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在托管光谱的较轻端，您可以通过在Docker容器中托管多个应用程序来节省成本。Docker是一种将应用程序和依赖项打包到虚拟容器中的工具。与传统虚拟机相比，Docker容器启动更快，开销更小（因为没有捆绑的操作系统或hypervisor）。
- en: Docker is ideal for hosting micro services-based applications. It is becoming
    as ubiquitous as virtualization with almost every PaaS and VPS provider supporting
    them. It is also a great development platform since Docker containers encapsulate
    the entire application state and can be directly deployed to production.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Docker非常适合托管基于微服务的应用程序。它正变得像虚拟化一样普遍，几乎每个PaaS和VPS提供商都支持它们。它也是一个很好的开发平台，因为Docker容器封装了整个应用程序状态，可以直接部署到生产环境。
- en: Deployment tools
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署工具
- en: Once you have zeroed in on your hosting solution, there could be several steps
    in your deployment process, from running regression tests to spawning background
    services.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您确定了您的托管解决方案，您的部署过程中可能会有几个步骤，从运行回归测试到生成后台服务。
- en: The key to a successful deployment process is automation. Since deploying applications
    involve a series of well-defined steps, it can be rightly approached as a programming
    problem. Once you have an automated deployment in place, you do not have to worry
    about deployments for fear of missing a step.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的部署过程的关键是自动化。由于部署应用程序涉及一系列明确定义的步骤，因此可以正确地将其视为一个编程问题。一旦您有了自动化的部署，您就不必担心部署，以免错过任何步骤。
- en: In fact, deployments should be painless and as frequent as required. For example,
    the Facebook team can release code to production up to twice a day. Considering
    Facebook's enormous user base and code base, this is an impressive feat, yet,
    it becomes necessary as emergency bug fixes and patches need to be deployed as
    soon as possible.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，部署应该是无痛的，并且可以根据需要频繁进行。例如，Facebook团队可以每天发布代码到生产环境多达两次。考虑到Facebook庞大的用户群和代码库，这是一个令人印象深刻的壮举，然而，由于紧急错误修复和补丁需要尽快部署，这变得必要。
- en: A good deployment process is also idempotent. In other words, even if you accidentally
    run the deployment tool twice, the actions should not be executed twice (or rather
    it should leave it in the same state).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个良好的部署过程也是幂等的。换句话说，即使您意外地运行了部署工具两次，操作也不应该执行两次（或者它应该保持在相同的状态）。
- en: Let's take a look at some of the popular tools for deploying Django applications.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些用于部署Django应用程序的流行工具。
- en: Fabric
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fabric
- en: Fabric is favored among Python web developers for its simplicity and ease of
    use. It expects a file named `fabfile.py` that defines all the actions (for deployment
    or otherwise) in your project. Each of these actions can be a local or remote
    shell command. The remote host is connected via SSH.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric在Python Web开发者中备受青睐，因为它简单易用。它期望一个名为`fabfile.py`的文件，定义项目中的所有操作（部署或其他）。这些操作可以是本地或远程shell命令。远程主机通过SSH连接。
- en: The key strength of Fabric is its ability to run commands on a set of remote
    hosts. For instance, you can define a `web` group that contains the hostnames
    of all web servers in production. You can run a Fabric action only against these
    web servers by specifying the web group name on the command line.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric的关键优势在于其能够在一组远程主机上运行命令。例如，您可以定义一个包含生产环境中所有Web服务器主机名的`web`组。您可以通过在命令行上指定web组名称来仅针对这些Web服务器运行Fabric操作。
- en: To illustrate the tasks involved in deploying a site using Fabric, let's take
    a look at a typical deployment scenario.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明使用Fabric部署站点涉及的任务，让我们看一个典型的部署场景。
- en: Typical deployment steps
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 典型的部署步骤
- en: Imagine that you have a medium-sized web application deployed on a single web
    server. Git has been chosen as the version control and collaboration tool. A central
    repository that is shared with all users has been created in the form of a bare
    Git tree.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您在单个Web服务器上部署了一个中等规模的Web应用程序。Git被选择为版本控制和协作工具。一个与所有用户共享的中央仓库已经以裸Git树的形式创建。
- en: 'Let''s assume that your production server has been fully set up. When you run
    your Fabric deployment command, say, `fab deploy`, the following scripted sequence
    of actions take place:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的生产服务器已经完全设置好。当您运行Fabric部署命令，比如`fab deploy`时，以下脚本化的一系列操作会发生：
- en: Run all tests locally.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地运行所有测试。
- en: Commit all local changes to Git.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交所有本地更改到Git。
- en: Push to a remote central Git repository.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推送到远程中央Git仓库。
- en: Resolve merge conflicts, if any.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决合并冲突（如果有）。
- en: Collect the static files (CSS, images).
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集静态文件（CSS，图像）。
- en: Copy the static files to the static file server.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将静态文件复制到静态文件服务器。
- en: At remote host, pull changes from a central Git repository.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在远程主机上，从中央Git仓库拉取更改。
- en: At remote host, run (database) migrations.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在远程主机上，运行（数据库）迁移。
- en: At remote host, touch `app.wsgi` to restart WSGI server.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在远程主机上，触发`app.wsgi`以重新启动WSGI服务器。
- en: The entire process is automatic and should be completed in a few seconds. By
    default, if any step fails, then the deployment gets aborted. Though not explicitly
    mentioned, there would be checks to ensure that the process is idempotent.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 整个过程是自动的，应该在几秒钟内完成。默认情况下，如果任何步骤失败，则部署将中止。尽管没有明确提到，但会有检查确保该过程是幂等的。
- en: Note that Fabric is not yet compatible with Python 3, though the developers
    are in the process of porting it. In the meantime, you can run Fabric in a Python
    2.x virtual environment or check out similar tools, such as PyInvoke.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Fabric目前还不兼容Python 3，尽管开发人员正在进行移植。与此同时，您可以在Python 2.x虚拟环境中运行Fabric，或者查看类似的工具，比如PyInvoke。
- en: Configuration management
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置管理
- en: Managing multiple servers in different states can be hard with Fabric. Configuration
    management tools such as Chef, Puppet, or Ansible try to bring a server to a certain
    desired state.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Fabric在不同状态下管理多个服务器可能很困难。Chef、Puppet或Ansible等配置管理工具试图将服务器带到特定的期望状态。
- en: Unlike Fabric, which requires the deployment process to be specified in an imperative
    manner, these configuration-management tools are declarative. You just need to
    define the final state you want the server to be in, and it will figure out how
    to get there.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 与需要以命令方式指定部署过程的Fabric不同，这些配置管理工具是声明性的。你只需要定义你希望服务器达到的最终状态，它就会找出如何达到那个状态。
- en: For example, if you want to ensure that the Nginx service is running at startup
    on all your web servers, then you need to define a server state having the Nginx
    service both running and starting on boot. On the other hand, with Fabric, you
    need to specify the exact steps to install and configure Nginx to reach such a
    state.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想确保Nginx服务在所有的Web服务器上启动时运行，那么你需要定义一个服务器状态，其中Nginx服务既在运行又在启动时启动。另一方面，使用Fabric，你需要指定确切的步骤来安装和配置Nginx以达到这种状态。
- en: One of the most important advantages of configuration-management tools is that
    they are idempotent by default. Your servers can go from an unknown state to a
    known state, resulting in easier server configuration management and reliable
    deployment.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理工具最重要的优势之一是它们默认是幂等的。你的服务器可以从一个未知状态变为已知状态，从而实现更容易的服务器配置管理和可靠的部署。
- en: Among configuration-management tools, Chef and Puppet enjoy wide popularity
    since they were one of the earliest tools in this category. However, their roots
    in Ruby can make them look a bit unfamiliar to the Python programmer. For such
    folks, we have Salt and Ansible as excellent alternatives.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置管理工具中，Chef和Puppet因为是这一类别中最早的工具之一，所以受到了广泛的欢迎。然而，它们在Ruby中的根源可能会让Python程序员感到有些陌生。对于这样的人来说，我们有Salt和Ansible作为很好的替代品。
- en: Configuration-management tools have a considerable learning curve compared to
    simpler tools, such as Fabric. However, they are essential tools for creating
    reliable production environments and are certainly worth learning.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与简单的工具（如Fabric）相比，配置管理工具有相当大的学习曲线。然而，它们是创建可靠的生产环境的必要工具，绝对值得学习。
- en: Monitoring
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控
- en: Even a medium-sized website can be extremely complex. Django might be one of
    the hundreds of applications and services running and interacting with each other.
    In the same way that the heart beat and other vital signs can be constantly monitored
    to assess the health of the human body, so are various metrics collected, analyzed,
    and presented in most production systems.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是一个中等规模的网站也可能非常复杂。Django可能是数百个应用程序和服务之一，它们运行并相互交互。与人体的心跳和其他生命体征可以不断监测以评估人体健康的方式相同，大多数生产系统中也会收集、分析和呈现各种指标。
- en: While logging keeps track of various events, such as arrival of a web request
    or an exception, monitoring usually refers to collecting key information periodically,
    such as memory utilization or network latency. However, differences get blurred
    at application level, such as, while monitoring database query performance, which
    might very well be collected from logs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然日志记录各种事件，比如Web请求的到达或异常，监控通常是指定期收集关键信息，比如内存利用率或网络延迟。然而，在应用程序级别，差异变得模糊，比如，监控数据库查询性能，这很可能是从日志中收集的。
- en: Monitoring also helps with the early detection of problems. Unusual patterns,
    such as spikes or a gradually increasing load, can be signs of bigger underlying
    problems, such as a memory leak. A good monitoring system can alert site owners
    of problems before they happen.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 监控还有助于早期发现问题。异常模式，比如突然上升或逐渐增加的负载，可能是更大潜在问题的迹象，比如内存泄漏。一个良好的监控系统可以在问题发生之前提醒网站所有者。
- en: Monitoring tools usually need a backend service (sometimes called *agents*)
    to collect the statistics, and a frontend service to display dashboards or generate
    reports. Popular data collection backends include StatsD and Monit. This data
    can be passed to frontend tools, such as Graphite.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 监控工具通常需要一个后端服务（有时称为*代理*）来收集统计数据，以及一个前端服务来显示仪表板或生成报告。流行的数据收集后端包括StatsD和Monit。这些数据可以传递给前端工具，比如Graphite。
- en: There are several hosted monitoring tools, such as New Relic and Status.io,
    which are easier to set up and use.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些托管的监控工具，比如New Relic和Status.io，更容易设置和使用。
- en: Measuring performance is another important role of monitoring. As we will soon
    see, any proposed optimization must be carefully measured and monitored before
    getting implemented.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 性能测量是监控的另一个重要作用。正如我们将很快看到的，任何提出的优化在实施之前都必须经过仔细的测量和监控。
- en: Performance
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能
- en: Performance is a feature. Studies show how slow sites have an adverse effect
    on users, and therefore, revenue. For instance, tests at Amazon in 2007 revealed
    that for every 100 ms increase in load time of [amazon.com](http://amazon.com),
    the sales decreased by 1 percent.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 性能是一个特性。研究表明，网站速度慢对用户和收入都有不利影响。例如，2007年在亚马逊进行的测试显示，[amazon.com](http://amazon.com)每增加100毫秒的加载时间，销售额就会减少1%。
- en: Reassuringly, several high-performance web applications such as Disqus and Instagram
    have been built on Django. At Disqus, in 2013, they could handle 1.5 million concurrently
    connected users, 45,000 new connections per second, 165,000 messages/second, with
    less than 0.2 seconds latency end-to-end.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 令人放心的是，一些高性能的Web应用程序，如Disqus和Instagram，都是基于Django构建的。在Disqus，2013年，他们可以处理150万个并发连接用户，每秒新建45000个连接，每秒发送165000条消息，端到端延迟不到0.2秒。
- en: 'The key to improving performance is finding where the bottlenecks are. Rather
    than relying on guesswork, it is always recommended that you measure and profile
    your application to identify these performance bottlenecks. As Lord Kelvin would
    say:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 改善性能的关键是找出瓶颈所在。与其依赖猜测，建议您始终测量和分析您的应用程序，以确定这些性能瓶颈。正如开尔文勋爵所说：
- en: '*If you can''t measure it, you can''t improve it.*'
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*如果你不能测量它，你就不能改善它。*'
- en: In most web applications, the bottlenecks are likely to be at the browser or
    the database end rather than within Django. However, to the user, the entire application
    needs to be responsive.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数Web应用程序中，瓶颈可能在浏览器端或数据库端，而不是在Django内部。但是，对于用户来说，整个应用程序都需要响应。
- en: 'Let''s take a look at some of the ways to improve the performance of a Django
    application. Due to widely differing techniques, the tips are split into two parts:
    frontend and backend.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些改善Django应用程序性能的方法。由于技术差异很大，这些建议被分成了两部分：前端和后端。
- en: Frontend performance
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前端性能
- en: 'Django programmers might quickly overlook frontend performance because it deals
    with understanding how the client-side, usually a browser, works. However, to
    quote Steve Souders'' study of Alexa-ranked top 10 websites:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Django程序员可能会快速忽视前端性能，因为它涉及了解客户端，通常是浏览器，的工作原理。然而，引用Steve Souders对Alexa排名前10的网站的研究：
- en: '*80-90% of the end-user response time is spent on the frontend. Start there.     > *'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*80-90%的最终用户响应时间都花在了前端。从那里开始。*'
- en: A good starting point for frontend optimization would be to check your site
    with Google Page Speed or Yahoo! YSlow (commonly used as browser plugins). These
    tools will rate your site and recommend various best practices, such as minimizing
    the number of HTTP requests or gzipping the content.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 前端优化的一个很好的起点是使用Google Page Speed或Yahoo! YSlow（通常用作浏览器插件）检查您的网站。这些工具将对您的网站进行评分，并推荐各种最佳实践，比如最小化HTTP请求的数量或对内容进行gzip压缩。
- en: As a best practice, your static assets, such as images, style sheets, and JavaScript
    files must not be served through Django. Rather a static file server, cloud storages
    such as Amazon S3 or a **content** **delivery network** (**CDN**) should serve
    them for better performance.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最佳实践，您的静态资产，如图像、样式表和JavaScript文件，不应通过Django提供。而是应该由静态文件服务器、云存储（如Amazon S3）或内容传递网络（CDN）为其提供更好的性能。
- en: 'Even then, Django can help you improve frontend performance in a number of
    ways:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 即使如此，Django可以帮助您以多种方式改善前端性能：
- en: '**Cache infinitely with** `CachedStaticFilesStorage`: The fastest way to load
    static assets is to leverage the browser cache. By setting a long caching time,
    you can avoid re-downloading the same asset again and again. However, the challenge
    is to know when not to use the cache when the content changes.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“CachedStaticFilesStorage”无限缓存：加载静态资产的最快方法是利用浏览器缓存。通过设置长时间的缓存时间，您可以避免反复下载相同的资产。但是，挑战在于知道何时不使用缓存当内容发生变化时。
- en: '`CachedStaticFilesStorage` solves this elegantly by appending the asset''s
    MD5 hash to its filename. This way, you can extend the TTL of the cache for these
    files infinitely.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: “CachedStaticFilesStorage”通过将资产的MD5哈希附加到其文件名中来优雅地解决了这个问题。这样，您可以无限扩展这些文件的缓存TTL。
- en: To use this, set the `STATICFILES_STORAGE` to `CachedStaticFilesStorage` or,
    if you have a custom storage, inherit from `CachedFilesMixin`. Also, it is best
    to configure your caches to use the local memory cache backend to perform the
    static filename to its hashed name lookup.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个功能，将“STATICFILES_STORAGE”设置为“CachedStaticFilesStorage”，或者如果您有自定义存储，可以继承“CachedFilesMixin”。此外，最好配置缓存以使用本地内存缓存后端来执行静态文件名到其哈希名称的查找。
- en: '**Use a static asset manager**: An asset manager can preprocess your static
    assets to minify, compress, or concatenate them, thereby reducing their size and
    minimizing requests. It can also preprocess them enabling you to write them in
    other languages, such as **CoffeeScript** and **Syntactically awesome stylesheets**
    (**Sass**). There are several Django packages that offer static asset management
    such as `django-pipeline` or `webassets`.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用静态资产管理器**：资产管理器可以预处理您的静态资产，对它们进行缩小、压缩或合并，从而减小它们的大小并减少请求。它还可以对它们进行预处理，使您能够用其他语言编写它们，比如CoffeeScript和Sass。有几个Django包提供了静态资产管理，比如“django-pipeline”或“webassets”。'
- en: Backend performance
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后端性能
- en: The scope of backend performance improvements covers your entire server-side
    web stack, including database queries, template rendering, caching, and background
    jobs. You will want to extract the highest performance from them, since it is
    entirely within your control.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 后端性能改进的范围涵盖了整个服务器端Web堆栈，包括数据库查询、模板渲染、缓存和后台作业。您将希望从中获得最高的性能，因为这完全在您的控制范围内。
- en: For quick and easy profiling needs, `django-debug-toolbar` is quite handy. We
    can also use Python profiling tools, such as the `hotshot` module for detailed
    analysis. In Django, you can use one of the several profiling middleware snippets
    to display the output of hotshot in the browser.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于快速和简单的分析需求，“django-debug-toolbar”非常方便。我们还可以使用Python分析工具，比如“hotshot”模块进行详细分析。在Django中，您可以使用几个分析中间件片段之一来在浏览器中显示hotshot的输出。
- en: A recent live-profiling solution is `django-silk`. It stores all the requests
    and responses in the configured database, allowing aggregated analysis over an
    entire user session, say, to find the worst-performing views. It can also profile
    any piece of Python code by adding a decorator.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最近的实时分析解决方案是“django-silk”。它将所有请求和响应存储在配置的数据库中，允许在整个用户会话中进行聚合分析，比如查找性能最差的视图。它还可以通过添加装饰器来对任何Python代码进行分析。
- en: As before, we will take a look at some of the ways to improve backend performance.
    However, considering they are vast topics in themselves, they have been grouped
    into sections. Many of these have already been covered in the previous chapters
    but have been summarized here for easy reference.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，我们将看一些改善后端性能的方法。但是，考虑到它们本身是广泛的主题，它们已被分成了几个部分。这些方法中的许多已经在前几章中进行了介绍，但在这里进行了总结以便易于参考。
- en: Templates
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模板
- en: As the documentation suggests, you should enable the cached template loader
    in production. This avoids the overhead of reparsing and recompiling the templates
    each time it needs to be rendered. The cached template is compiled the first time
    it is needed and then stored in memory. Subsequent requests for the same template
    are served from memory.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如文档建议的那样，应在生产中启用缓存模板加载程序。这样可以避免每次需要呈现时重新解析和重新编译模板的开销。缓存模板在首次需要时编译，然后存储在内存中。对相同模板的后续请求将从内存中提供。
- en: If you find that another templating language such as Jinja2 renders your page
    significantly faster, then it is quite easy to replace the built-in Django template
    language. There are several libraries that can integrate Django and Jinja2, such
    as `django-jinja`. Django 1.8 is expected to support multiple templating engines
    out of the box.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发现其他模板语言（如 Jinja2）呈现页面的速度明显更快，则可以很容易地替换内置的 Django 模板语言。有几个库可以集成 Django 和 Jinja2，如
    `django-jinja`。预计 Django 1.8 将默认支持多个模板引擎。
- en: Database
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库
- en: 'Sometimes, the Django ORM can generate inefficient SQL code. There are several
    optimization patterns to improve this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，Django ORM 可以生成低效的 SQL 代码。有几种优化模式可以改善这一点：
- en: '**Reduce database hits with** `select_related`: If you are using a `OneToOneField`
    or a Foreign Key relationship, in forward direction, for a large number of objects,
    then `select_related()` can perform a SQL join and reduce the number of database
    hits.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用** `select_related` **减少数据库访问次数**：如果您在大量对象上使用了 `OneToOneField` 或外键关系，可以使用
    `select_related()` 执行 SQL 连接并减少数据库访问次数。'
- en: '**Reduce database hits with** `prefetch_related`: For accessing a `ManyToManyField`
    method or, a Foreign Key relation, in reverse direction, or a Foreign Key relation
    in a large number of objects, consider using `prefetch_related` to reduce the
    number of database hits.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用** `prefetch_related` **减少数据库访问次数**：对于访问`ManyToManyField` 方法或反向的外键关系，或大量对象中的外键关系，请考虑使用
    `prefetch_related` 来减少数据库访问次数。'
- en: '**Fetch only needed fields with values or** `values_list`: You can save time
    and memory usage by limiting queries to return only the needed fields and skip
    model instantiation using `values()` or `values_list()`.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用** `values()` **或** `values_list` **仅获取所需字段的值**：通过限制查询仅返回所需字段并跳过模型实例化，可以节省时间和内存使用。'
- en: '**Denormalize models**: Selective denormalization improves performance by reducing
    joins at the cost of data consistency. It can also be used for precomputing values,
    such as the sum of fields or the active status report into an extra column. Compared
    to using annotated values in queries, denormalized fields are often simpler and
    faster.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**去规范化模型**：选择性去规范化通过减少连接来提高性能，但会牺牲数据一致性。它也可以用于预先计算值，比如字段的总和或活动状态报告到额外的列中。与在查询中使用注释值相比，去规范化字段通常更简单更快。'
- en: '**Add an Index**: If a non-primary key gets searched a lot in your queries,
    consider setting that field''s `db_index` to True in your model definition.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加索引**：如果在查询中经常搜索非主键字段，请考虑在模型定义中将该字段的 `db_index` 设置为 True。'
- en: '**Create, update, and delete multiple rows at once**: Multiple objects can
    be operated upon in a single database query with the `bulk_create()`, `update()`,
    and `delete()` methods. However, they come with several important caveats such
    as skipping the `save()` method on that model. So, read the documentation carefully
    before using them.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一次创建、更新和删除多行**：可以使用 `bulk_create()`、`update()` 和 `delete()` 方法在单个数据库查询中操作多个对象。但是，它们有一些重要的注意事项，比如跳过该模型上的
    `save()` 方法。因此，在使用它们之前，请仔细阅读文档。'
- en: As a last resort, you can always fine-tune the raw SQL statements using proven
    database performance expertise. However, maintaining the SQL code can be painful
    over time.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的手段，您始终可以使用经过验证的数据库性能专业知识微调原始 SQL 语句。但是，随着时间的推移，维护 SQL 代码可能会很痛苦。
- en: Caching
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缓存
- en: Any computation that takes time can take advantage of caching and return precomputed
    results faster. However, the problem is stale data or, often, quoted as one of
    the hardest things in computer science, cache invalidation. This is commonly spotted
    when, despite refreshing the page, a YouTube video's view count doesn't change.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 任何需要时间的计算都可以利用缓存，并更快地返回预先计算的结果。但是，问题在于过期数据，或者经常被引用为计算机科学中最难的事情之一，即缓存失效。这通常在刷新页面后，YouTube
    视频的观看次数不会改变时被发现。
- en: Django has a flexible cache system that allows you to cache anything from a
    template fragment to an entire site. It allows a variety of pluggable backends
    such as file-based or data-based backed storage.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Django 有一个灵活的缓存系统，允许您从模板片段到整个站点进行缓存。它允许各种可插拔的后端，如基于文件或基于数据的后端存储。
- en: Most production systems use a memory-based caching system such as Redis or Memcached.
    This is purely because volatile memory is many orders of magnitude faster than
    disk-based storage.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数生产系统使用基于内存的缓存系统，如 Redis 或 Memcached。这纯粹是因为易失性内存比基于磁盘的存储快得多。
- en: Such cache stores are ideal for storing frequently used but ephemeral data,
    like user sessions.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的缓存存储非常适合存储频繁使用但短暂的数据，比如用户会话。
- en: Cached session backend
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 缓存会话后端
- en: 'By default, Django stores its user session in the database. This usually gets
    retrieved for every request. To improve performance, the session data can be stored
    in memory by changing the `SESSION_ENGINE` setting. For instance, add the following
    in `settings.py` to store the session data in your cache:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Django 将用户会话存储在数据库中。通常会为每个请求检索。为了提高性能，可以通过更改 `SESSION_ENGINE` 设置将会话数据存储在内存中。例如，可以在
    `settings.py` 中添加以下内容来将会话数据存储在缓存中：
- en: '[PRE0]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Since some cache storages can evict stale data leading to the loss of session
    data, it is preferable to use Redis or Memcached as the session store, with memory
    limits high enough to support the maximum number of active user sessions.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一些缓存存储可能会清除过期数据导致会话数据丢失，最好使用 Redis 或 Memcached 作为会话存储，内存限制足够支持最大数量的活动用户会话。
- en: Caching frameworks
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 缓存框架
- en: For basic caching strategies, it might be easier to use a caching framework.
    Two popular ones are `django-cache-machine` and `django-cachalot`. They can handle
    common scenarios, such as automatically caching results of queries to avoid database
    hits every time you perform a read.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基本的缓存策略，使用缓存框架可能更容易。两个流行的框架是`django-cache-machine`和`django-cachalot`。它们可以处理常见的情况，比如自动缓存查询结果，以避免每次执行读取时都要访问数据库。
- en: The simplest of these is Django-cachalot, a successor of Johnny Cache. It requires
    very little configuration. It is ideal for sites that have multiple reads and
    infrequent writes (that is, the vast majority of applications), it caches all
    Django ORM read queries in a consistent manner.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 其中最简单的是Django-cachalot，它是Johnny Cache的后继者。它需要非常少的配置。它非常适合那些有多次读取和不经常写入的站点（也就是绝大多数应用程序），它以一致的方式缓存所有Django
    ORM读取查询。
- en: Caching patterns
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 缓存模式
- en: Once your site starts getting heavy traffic, you will need to start exploring
    several caching strategies throughout your stack. Using Varnish, a caching server
    that sits between your users and Django, many of your requests might not even
    hit the Django server.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的站点开始受到大量访问，您将需要开始在整个堆栈中探索几种缓存策略。使用Varnish，一个位于用户和Django之间的缓存服务器，您的许多请求甚至可能根本不会到达Django服务器。
- en: Varnish can make pages load extremely fast (sometimes, hundreds of times faster
    than normal). However, if used improperly, it might serve static pages to your
    users. Varnish can be easily configured to recognize dynamic pages or dynamic
    parts of a page such as a shopping cart.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Varnish可以使页面加载速度极快（有时比正常快数百倍）。然而，如果使用不当，它可能会向用户提供静态页面。Varnish可以很容易地配置为识别动态页面或页面的动态部分，比如购物车。
- en: '**Russian doll caching**, popular in the Rails community, is an interesting
    template cache-invalidation pattern. Imagine a user''s timeline page with a series
    of posts each containing a nested list of comments. In fact, the entire page can
    be considered as several nested lists of content. At each level, the rendered
    template fragment gets cached.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**俄罗斯套娃缓存**，在Rails社区很受欢迎，是一种有趣的模板缓存失效模式。想象一个用户的时间线页面，其中包含一系列帖子，每个帖子都包含一个嵌套的评论列表。事实上，整个页面可以被视为几个嵌套的内容列表。在每个级别上，渲染的模板片段都被缓存。'
- en: So, if a new comment gets added to a post, only the associated post and timeline
    caches get invalidated. Notice that we first invalidate the cache content directly
    outside the changed content and move progressively until at the outermost content.
    The dependencies between models need to be tracked for this pattern to work.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果对帖子添加了新评论，只有相关的帖子和时间线缓存会失效。请注意，我们首先使缓存内容在更改内容之外直接失效，然后逐渐移动到最外层的内容。对于这种模式的工作，需要跟踪模型之间的依赖关系。
- en: Another common caching pattern is to cache forever. Even after the content changes,
    the user might get served stale data from the cache. However, an asynchronous
    job, such as, a Celery job, also gets triggered to update the cache. You can also
    periodically warm the cache at a certain interval to refresh the content.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常见的缓存模式是永久缓存。即使内容发生变化，用户也可能从缓存中获取到过时的数据。然而，也会触发异步作业，比如Celery作业，来更新缓存。您还可以定期在一定的时间间隔内预热缓存以刷新内容。
- en: Essentially, a successful caching strategy identifies the static and dynamic
    parts of a site. For many sites, the dynamic parts are the user-specific data
    when you are logged in. If this is separated from the generally available public
    content, then implementing caching becomes easier.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，成功的缓存策略确定了站点的静态和动态部分。对于许多站点来说，动态部分是用户登录时的用户特定数据。如果这些数据与通常可用的公共内容分开，那么实施缓存就变得更容易。
- en: Don't treat caching as integral to the working of your site. The site must fall
    back to a slower but working state even if the caching system breaks down.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 不要把缓存视为站点工作的一部分。即使缓存系统崩溃，站点也必须退回到一个速度较慢但可工作的状态。
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Cranos**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**Cranos**'
- en: It was six in the morning and the S.H.I.M. building was surrounded by a grey
    fog. Somewhere inside, a small conference room had been designated the "War Room."
    For the last three hours, the SuperBook team had been holed up here diligently
    executing their pre-go-live plan.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 清晨六点，S.H.I.M.大楼被一层灰蒙蒙的雾气所包围。在某个地方，一个小会议室被指定为“作战室”。在过去的三个小时里，SuperBook团队一直在这里努力执行他们的上线前计划。
- en: 'More than 30 users had logged on the IRC chat room #superbookgolive from various
    parts of the world. The chat log was projected on a giant whiteboard. When the
    last item was struck off, Evan glanced at Steve. Then, he pressed a key triggering
    the deployment process.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 来自世界各地的30多名用户已经登录到IRC聊天室#superbookgolive。聊天记录被投影在一个巨大的白板上。当最后一项被划掉时，埃文看了史蒂夫一眼。然后，他按下了一个键，触发了部署过程。
- en: The room fell silent as the script output kept scrolling off the wall. One error,
    Steve thought—just one error can potentially set them back by hours. Several seconds
    later, the command prompt reappeared. It was live! The team erupted in joy. Leaping
    from their chairs they gave high-fives to each other. Some were crying tears of
    happiness. After weeks of uncertainty and hard work, it all seemed surreal.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本输出不断从墙上滚动时，房间里变得一片寂静。史蒂夫想，只要有一个错误，他们就有可能被拖回数小时。几秒钟后，命令提示符重新出现了。它是活的！团队中爆发出了欢乐。他们从椅子上跳起来，互相高五。有些人因为幸福而流泪。经过数周的不确定和辛苦工作，一切都显得不真实。
- en: However, the celebrations were short-lived. A loud explosion from above shook
    the entire building. Steve knew the second breach had begun. He shouted to Evan,
    "Don't turn on the beacon until you get my message," and sprinted out of the room.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，庆祝活动很快就结束了。楼上传来一声巨响，整栋建筑都震动了。史蒂夫知道第二次入侵已经开始。他对埃文喊道：“在收到我的消息之前不要打开信标”，然后冲出了房间。
- en: As Steve hurried up the stairway to the rooftop, he heard the sound of footsteps
    above him. It was Madam O. She opened the door and flung herself in. He could
    hear her screaming "No!" and a deafening blast shortly after that.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当史蒂夫匆匆赶上楼梯到达屋顶时，他听到楼上脚步声。那是欧小姐。她打开门，扑了进来。他听到她尖叫着“不！”然后不久后是一声震耳欲聋的爆炸声。
- en: By the time he reached the rooftop, he saw Madam O sitting with her back against
    the wall. She clutched her left arm and was wincing in pain. Steve slowly peered
    around the wall. At a distance, a tall bald man seemed to be working on something
    with the help of two robots.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当他到达屋顶时，他看到奥小姐靠在墙上坐着。她抱着左臂，面部带着疼痛的表情。史蒂夫慢慢地探头向墙后张望。远处，一个高个秃头男子似乎正在和两个机器人一起忙碌着。
- en: '"He looks like…." Steve broke off, unsure of himself.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: “他看起来像……”史蒂夫停顿了，不确定自己。
- en: '"Yes, it is Hart. Rather I should say he is Cranos now."'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: “是的，哈特。不如说现在他是克拉诺斯了。”
- en: '"What?"'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: “什么？”
- en: '"Yes, a split personality. A monster that laid hidden in Hart''s mind for years.
    I tried to help him control it. Many years back, I thought I had stopped it from
    ever coming back. However, all this stress took a toll on him. Poor thing, if
    only I could get near him."'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: “是的，一个分裂的人格。一个隐藏在哈特心中多年的怪物。我曾试图帮他控制它。多年前，我以为我已经阻止它再次出现。然而，所有这些压力对他造成了影响。可怜的家伙，要是我能靠近他就好了。”
- en: Poor thing indeed—he nearly tried to kill her. Steve took out his mobile and
    sent out a message to turn on the beacon. He had to improvise.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 可怜的家伙，他几乎试图杀了她。史蒂夫掏出手机，发送了一条消息打开信标。他必须临时应对。
- en: With his hands high in the air and fingers crossed, he stepped out. The two
    robots immediately aimed directly at him. Cranos motioned them to stop.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 他双手高举，交叉着手指，走了出去。两个机器人立刻对准了他。克拉诺斯示意它们停下。
- en: '"Well, who do we have here? Mr. SuperBook himself. Did I crash into your launch
    party, Steve?"'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: “噢，我们这里是谁？超级书先生本人。我撞上了你的发布派对，史蒂夫？”
- en: '"It was our launch, Hart."'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: “这是我们的启动，哈特。”
- en: '"Don''t call me that," growled Cranos. "That guy was a fool. He wrote the Sentinel
    code but he never understood its potential. I mean, just look at what Sentinels
    can do—unravel every cryptographic algorithm known to man. What happens when it
    enters an intergalactic network?"'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: “别叫我那个，”克拉诺斯咆哮道。“那家伙是个傻瓜。他写了哨兵代码，但他从来没有理解它的潜力。我是说，看看哨兵能做什么——解开人类已知的每个密码算法。当它进入星际网络时会发生什么？”
- en: The hint was not lost on Steve. "SuperBook?" he asked slowly.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 史蒂夫没有错过这个暗示。“超级书？”他慢慢地问道。
- en: Cranos let out a malicious grin. Behind him, the robots were busy wiring into
    S.H.I.M.'s core network. "While your SuperBook users will be busy playing SuperVille,
    the tentacles of Sentinel will spread into new unsuspecting worlds. Critical systems
    of every intelligent species will be sabotaged. The Supers will have to bow to
    a new intergalactic supervillain—Cranos."
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 克拉诺斯露出了一丝邪恶的笑容。在他身后，机器人们正忙着连接到S.H.I.M.的核心网络。“当你们的超级书用户忙着玩超级城市时，哨兵的触手将扩展到新的毫无戒备的世界。每个智慧物种的关键系统都将受到破坏。超级英雄们将不得不向一个新的星际超级恶棍——克拉诺斯屈服。”
- en: As Cranos was delivering this extended monologue, Steve noticed a movement in
    the corner of his eyes. It was Acorn, the super-intelligent squirrel, scurrying
    along the right edge of the rooftop. He also spotted Hexa hovering strategically
    on the other side. He nodded at them.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 克拉诺斯正在发表这篇长篇演说时，史蒂夫注意到他眼角的动静。那是松鼠阿科恩，一只超级聪明的松鼠，在屋顶的右边沿匆匆而过。他还看到赫克萨在另一边策略性地盘旋。他向他们点了点头。
- en: Hexa levitated a garbage bin and flung it towards the robots. Acorn distracted
    them with high-pitched whistles. "Kill them all!" Cranos said irritably. As he
    turned to watch his intruders, Steve fished out his phone, dialed into FaceTime
    and held it towards Cranos.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 赫克萨悬浮着一个垃圾箱，朝机器人扔了过去。阿科恩用尖锐的口哨声分散了它们的注意力。“杀了他们！”克拉诺斯恼怒地说道。当他转身看向入侵者时，史蒂夫掏出手机，拨通了FaceTime，把它对准了克拉诺斯。
- en: '"Say hello to your old friend, Cranos," said Steve.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: “向你的老朋友克拉诺斯问好，”史蒂夫说道。
- en: Cranos turned to face the phone and the screen revealed Madam O's face. With
    a smile, she muttered under her breath, "Taradiddle Bumfuzzle!"
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 克拉诺斯转身面对电话，屏幕上显示出奥小姐的脸。微笑着，她低声嘀咕道：“胡言乱语！”
- en: The expression on Cranos' face changed instantly. The seething anger disappeared.
    He now looked like a man they had once known.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 克拉诺斯脸上的表情瞬间改变。那股愤怒消失了。他现在看起来像他们曾经认识的那个人。
- en: '"What happened?" asked Hart confused.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: “发生了什么？”哈特困惑地问道。
- en: '"We thought we had lost you," said Madam O over the phone. "I had to use hypnotic
    trigger words to bring you back."'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: “我们以为我们失去了你，”奥小姐在电话那头说道。“我不得不使用催眠触发词才能把你带回来。”
- en: Hart took a moment to survey the scene around him. Then, he slowly smiled and
    nodded at her.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 哈特花了一会儿时间环顾了一下他周围的场景。然后，他慢慢地微笑着对她点了点头。
- en: '----------------------------------------------------'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '----------------------------------------------------'
- en: '**One Year Later**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**一年后**'
- en: Who would have guessed Acorn would turn into an intergalactic singing sensation
    in less than a year? His latest album "Acorn Unplugged" debuted at the top of
    Billboard's Top 20 chart. He had thrown a grand party in his new white mansion
    overlooking a lake. The guest list included superheroes, pop stars, actors, and
    celebrities of all sorts.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 谁能想到阿科恩会在不到一年的时间里成为一个星际歌唱偶像？他的最新专辑《阿科恩的原声演唱》登上了公告牌排行榜的榜首。他在俯瞰湖泊的新白色豪宅举办了一场盛大的派对。来宾名单上包括了超级英雄、流行歌手、演员和各种名人。
- en: '"So, there was a singer in you after all," said Captain Obvious holding a martini.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: “所以，你果然是个歌手，”显而易见队长端着一杯马天尼说道。
- en: '"I guess there was," replied Acorn. He looked dazzling in a golden tuxedo with
    all sorts of bling-bling.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: “我想是的，”阿科恩回答道。他穿着一套金色礼服，闪闪发光。
- en: Steve appeared with Hexa in tow—who looked ravishing in a flowing silver gown.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 史蒂夫带着赫克萨出现了，她穿着一条流动的银色长裙，看起来迷人极了。
- en: '"Hey Steve, Hexa.... It has been a while. Is SuperBook still keeping you late
    at work, Steve?"'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: “嘿，史蒂夫，赫克萨……好久不见了。超级书还让你加班到很晚吗，史蒂夫？”
- en: '"Not so much these days. Knock on wood," replied Hexa with a smile.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: “这些天没怎么发生。碰碰木头，”赫克萨微笑着回答。
- en: '"Ah, you guys did a fantastic job. I owe a lot to SuperBook. My first single,
    ''Warning: Contains Nuts'', was a huge hit in the Tucana galaxy. They watched
    the video on SuperBook more than a billion times!"'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: “啊，你们做得太棒了。我对超级书欠了很多。我的第一支单曲《警告：含坚果》在Tucana星系大获成功。他们在超级书上观看了视频超过十亿次！”
- en: '"I am sure every other superhero has a good thing to say about SuperBook too.
    Take Blitz. His AskMeAnything interview won back the hearts of his fans. They
    were thinking that he was on experimental drugs all this time. It was only when
    he revealed that his father was Hurricane that his powers made sense."'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: “我相信每个其他超级英雄也对SuperBook有好话要说。拿Blitz来说，他的AskMeAnything采访赢得了粉丝们的心。他们一直以为他一直在用实验药物。直到他透露他的父亲是飓风时，他的能力才有意义。”
- en: '"By the way, how is Hart doing these days?"'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: “顺便问一下，哈特最近怎么样？”
- en: '"Much better," said Steve. "He got professional help. The sentinels were handed
    back to S.H.I.M. They are developing a new quantum cryptographic algorithm that
    will be much more secure."'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: “好多了，”史蒂夫说。“他得到了专业的帮助。哨兵被交还给了S.H.I.M。他们正在开发一种新的量子密码算法，这将更加安全。”
- en: '"So, I guess we are safe until the next supervillain shows up," said Captain
    Obvious hesitantly.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: “所以，我猜我们在下一个超级恶棍出现之前是安全的，”显而易见船长犹豫地说道。
- en: '"Hey, at least the beacon works," said Steve, and the crowd burst into laughter.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: “嘿，至少信标起作用了，”史蒂夫说，人群爆发出笑声。
- en: Summary
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this final chapter, we looked at various approaches to make your Django application
    stable, reliable, and fast. In other words, to make it production-ready. While
    system administration might be an entire discipline in itself, a fair knowledge
    of the web stack is essential. We explored several hosting options, including
    PaaS and VPS.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这最后一章中，我们探讨了各种方法来使您的Django应用程序稳定、可靠和快速。换句话说，使其达到生产就绪状态。虽然系统管理可能是一个完整的学科，但对Web堆栈的基本了解是必不可少的。我们探讨了几种托管选项，包括PaaS和VPS。
- en: We also looked at several automated deployment tools and a typical deployment
    scenario. Finally, we covered several techniques to improve frontend and backend
    performance.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还研究了几种自动化部署工具和典型的部署场景。最后，我们介绍了几种改进前端和后端性能的技术。
- en: The most important milestone of a website is finishing and taking it to production.
    However, it is by no means the end of your development journey. There will be
    new features, alterations, and rewrites.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 网站最重要的里程碑是完成并将其投入生产。然而，这绝不是您开发之旅的终点。将会有新的功能、修改和重写。
- en: Every time you revisit the code, use the opportunity to take a step back and
    find a cleaner design, identify a hidden pattern, or think of a better implementation.
    Other developers, or sometimes your future self, will thank you for it.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 每次重新访问代码时，利用机会退一步，找到更清晰的设计，识别隐藏的模式，或者考虑更好的实现方式。其他开发人员，有时甚至是您未来的自己，会因此而感谢您。
