- en: Some Preliminaries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些准备工作
- en: To make the design issues in the rest of the book clearer, we need to look at
    some of our motivational problems. One of these is the game of Blackjack. Specifically,
    we're interested in simulating strategies for playing Blackjack. We don't want
    to endorse gambling. Indeed, a bit of study will show that the game is stacked
    heavily against the player. This should reveal that most casino gambling is little
    more than a tax on the innumerate.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使本书其余部分的设计问题更加清晰，我们需要看一些我们的动机问题。其中之一是二十一点游戏。具体来说，我们对模拟玩二十一点的策略感兴趣。我们不想支持赌博。事实上，稍微研究一下就会发现这个游戏对玩家的不利程度非常高。这应该揭示出大多数赌场赌博只不过是对不识数的人的一种税收。
- en: Simulation, however, was one of the early problem domains for object-oriented
    programming. This is an area where object-oriented programming works out particularly
    elegantly. For more information, see [http://en.wikipedia.org/wiki/Simula](http://en.wikipedia.org/wiki/Simula).
    Also see *An Introduction to Programming* in Simula by *Rob Pooley*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，模拟是面向对象编程的早期问题领域之一。这是一个面向对象编程特别优雅的领域。有关更多信息，请参见[http://en.wikipedia.org/wiki/Simula](http://en.wikipedia.org/wiki/Simula)。还请参见*Rob
    Pooley*的《Simula编程简介》。
- en: This chapter will provide some background in tools that are essential for writing
    complete Python programs and packages. We'll use these tools in later chapters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍一些编写完整Python程序和包所必需的工具。我们将在后面的章节中使用这些工具。
- en: We'll make use of the `timeit` module to compare various object-oriented designs
    to see which has better performance. It's important to weigh objective evidence
    along with the more subjective consideration of how well the code seems to reflect
    the problem domain.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用`timeit`模块来比较各种面向对象设计，以查看哪种性能更好。重要的是要权衡客观证据和代码如何反映问题领域的主观考虑。
- en: We'll look at the object-oriented use of the `unittest` and `doctest` modules.
    These are essential ingredients in writing software that are known to actually
    work.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将研究`unittest`和`doctest`模块的面向对象使用。这些是编写已知实际有效的软件的基本要素。
- en: A good object-oriented design should be clear and understandable. In order to
    assure that it is understood and used as well as maintained properly, writing
    Pythonic documentation is essential. Docstrings in modules, classes, and methods
    are very important. We'll touch on RST markup here and cover it in depth in [Chapter
    18](ch18.html "Chapter 18. Quality and Documentation"), *Quality and Documentation*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个良好的面向对象设计应该清晰易懂。为了确保它被正确理解和使用以及维护，编写Pythonic文档是必不可少的。模块、类和方法中的文档字符串非常重要。我们将在这里简要介绍RST标记，并在[第18章](ch18.html
    "第18章. 质量和文档")*质量和文档*中深入讨论。
- en: Apart from this, we'll address the **Integrated Development Environment** (**IDE**)
    question. A common question regards the *best* IDE for Python development.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们将讨论**集成开发环境**（**IDE**）的问题。一个常见的问题是关于Python开发的*最佳*IDE。
- en: Finally, we'll introduce the concepts behind Python's special method names.
    The subject of special methods fills the first seven chapters. Here, we'll provide
    some background that may be of help in understanding [Part 1](pt01.html "Part 1. Pythonic
    Classes via Special Methods"), *Pythonic Classes via Special Methods*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将介绍Python特殊方法名称背后的概念。特殊方法的主题填满了前七章。在这里，我们将提供一些背景知识，可能有助于理解[第一部分](pt01.html
    "第1部分. 通过特殊方法创建Python类")*通过特殊方法创建Python类*。
- en: We will try to avoid digressing into the foundations of Python object-oriented
    programming. We're assuming that you've already read the *Python 3 Object Oriented
    Programming* book by *Packt Publishing*. We don't want to repeat things that have
    been thoroughly stated elsewhere. In this book, we will focus solely on Python
    3.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尽量避免陷入Python面向对象编程的基础知识。我们假设您已经阅读了*Packt Publishing*的《Python 3面向对象编程》。我们不想重复已经在其他地方详细说明的事情。在本书中，我们将专注于Python
    3。
- en: We'll refer to a number of common, object-oriented design patterns. We'll try
    to avoid repeating the presentation in Packt's *Learning Python Design Patterns*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涉及一些常见的面向对象设计模式。我们将尽量避免重复Packt的《学习Python设计模式》中的内容。
- en: About casino Blackjack
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于赌场二十一点
- en: If you're unfamiliar with the casino game of Blackjack, here's an overview.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对赌场二十一点游戏不熟悉，这里有一个概述。
- en: The objective is to accept cards from the dealer to create a hand that has a
    point total that is between the dealer's total and 21.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是接受来自庄家的牌，以创建一个点数总和介于庄家总和和21之间的手。
- en: The number cards (2 to 10) have point values equal to the number. The face cards
    (jack, queen, and king) are worth 10 points. The ace is worth either 11 points
    or one point. When using an ace as 11 points, the value of the hand is *soft*.
    When using an ace as one point, the value is *hard*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 数字牌（2到10）的点数等于数字本身。花牌（J、Q和K）值为10点。A可以是11点或1点。当A作为11点时，手的值是*soft*。当A作为1点时，值是*hard*。
- en: A hand with an ace and seven, therefore, has a hard total of 8 and a soft total
    of 18.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一手有一张A和一张7的牌，硬总数为8，软总数为18。
- en: There are four two-card combinations that total twenty-one. These are all called
    *blackjack* even though only one of the four combinations involves a jack.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种两张牌的组合总数为21。尽管其中只有一种组合涉及到J，但它们都被称为*blackjack*。
- en: Playing the game
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 玩游戏
- en: 'The game of Blackjack can vary from casino to casino, but the outline is similar.
    The mechanics of play work as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 赌场二十一点游戏可能因赌场而异，但大纲是相似的。玩法的机制如下：
- en: First, the player and dealer each get two cards. The player, of course, knows
    the value of both of their cards. They're dealt face up in a casino.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，玩家和庄家各发两张牌。玩家当然知道他们两张牌的价值。在赌场里，它们是正面朝上发的。
- en: One of the dealer's cards is face up and the other is face down. The player
    therefore knows a little bit about the dealer's hand, but not everything.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 庄家的一张牌是正面朝上的，另一张是正面朝下的。因此，玩家对庄家的手有一些了解，但并非全部。
- en: If the dealer has an ace showing, there's a 4:13 chance that the hidden card
    is worth 10 and the dealer has 21\. The player can elect to make an additional
    insurance bet.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果庄家展示了一张A牌，那么隐藏的牌价值为10且庄家有21点的概率是4:13。玩家可以选择额外投保。
- en: Next, the player can elect to either receive cards or stop receiving cards.
    These two most common choices are called **hit** or **stand**.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，玩家可以选择要么接收牌要么停止接收牌。这两个最常见的选择被称为**拿牌**或**停牌**。
- en: There are some additional choices too. If the player's cards match, the hand
    can be split. This is an additional bet, and the two hands are played separately.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有一些额外的选择。如果玩家的牌匹配，手可以分开。这是一个额外的赌注，两手分开玩。
- en: Finally, the players can double their bet before taking one last card. This
    is called **doubling down**. If the player's cards total 10 or 11, this is a common
    bet to make.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，玩家可以在拿最后一张牌之前加倍下注。这被称为**加倍**。如果玩家的牌总数为10或11，这是一个常见的赌注。
- en: 'The final evaluation of the hand works as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 手的最终评估如下：
- en: If the player went over 21, the hand is a bust, the player loses, and the dealer's
    facedown card is irrelevant.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果玩家超过21点，手就爆了，玩家输了，庄家的脸朝下的牌就不重要了。
- en: If the player's total is 21 or under, then the dealer takes cards according
    to a simple, fixed rule. The dealer must hit a hand that totals less than 18\.
    The dealer must stand on a hand that totals 18 or more. There are some small variations
    here that we can ignore for the moment.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果玩家的总数是21或以下，那么庄家根据一个简单的固定规则拿牌。庄家必须打一个小于18的手。庄家必须站在一个总数为18或更多的手上。这里有一些小的变化，我们暂时可以忽略。
- en: If the dealer goes bust, the player wins.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果庄家爆了，玩家赢了。
- en: If both the dealer and player are 21 or under, the hands are compared to see
    if the player has won or lost.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果庄家和玩家都是21或以下，那么比较手来看玩家是赢了还是输了。
- en: The amounts of the final payoffs aren't too relevant for now. For a more accurate
    simulation of various play and betting strategies, the payoffs will matter quite
    a bit.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最终赔偿的金额现在并不太重要。为了更准确地模拟各种玩法和投注策略，赔偿将非常重要。
- en: Blackjack player strategies
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 21点玩家策略
- en: 'In the case of Blackjack (which is different from a game such as Roulette),
    there are actually two kinds of strategies that the player must use, as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在21点的情况下（这与轮盘等游戏不同），玩家实际上必须使用两种策略，如下：
- en: 'A strategy to decide what game play to make: take insurance, hit, stand, split,
    or double down.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定游戏玩法的策略：投保、拿牌、停牌、分牌或加倍。
- en: A strategy to decide what amount to bet. A common statistical fallacy leads
    players to raise and lower their bets in an attempt to preserve their winnings
    and minimize their losses. Any software to emulate casino games must also emulate
    these more complex betting strategies. These are interesting algorithms that are
    often stateful and lead to the learning of some advanced Python programming techniques.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定下注金额的策略。一个常见的统计谬误导致玩家提高和降低他们的赌注，试图保留他们的赢利并最小化他们的损失。任何模拟赌场游戏的软件也必须模拟这些更复杂的投注策略。这些是有趣的算法，通常是有状态的，并导致学习一些高级的Python编程技术。
- en: These two sets of strategies are the prime examples of the **STRATEGY** design
    pattern.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这两套策略是**策略**设计模式的主要示例。
- en: Object design for simulating Blackjack
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于模拟21点的对象设计
- en: We'll use elements of the game like the player hand and card as examples of
    object modeling. However, we won't design the entire simulation. We'll focus on
    elements of this game because they have some nuance but aren't terribly complex.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用玩家手和卡作为对象建模的示例。但我们不会设计整个模拟。我们将专注于这个游戏的元素，因为它们有一些微妙之处，但并不是非常复杂。
- en: 'We have a simple container: one hand object will contain zero or more card
    objects.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个简单的容器：一个手对象将包含零个或多个卡对象。
- en: We'll take a look at the subclasses of `Card` for `NumberCard`, `FaceCard`,
    and `Ace`. We'll take a look at a wide variety of ways to define this simple class
    hierarchy. Because the hierarchy is so small (and simple), we can easily try a
    number of implementation alternatives.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看`Card`的子类`NumberCard`、`FaceCard`和`Ace`。我们将查看定义这个简单类层次结构的各种方法。因为层次结构如此之小（和简单），我们可以很容易地尝试多种实现替代方案。
- en: We'll take a look at a variety of ways to implement the player's hand. This
    is a simple collection of cards with some additional features.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一些实现玩家手的方法。这是一个简单的卡片集合，带有一些额外的功能。
- en: We also need to look at the player as a whole. A player will have a sequence
    of hands as well as a betting strategy and a Blackjack play strategy. This is
    a rather complex composite object.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要把玩家作为一个整体来看。玩家将有一系列手，以及一个投注策略和一个21点游戏策略。这是一个相当复杂的复合对象。
- en: We'll also take a quick look at the deck of cards that cards are shuffled and
    dealt from.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将快速查看洗牌和发牌的牌组。
- en: Performance – the timeit module
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能- timeit模块
- en: We'll make use of the `timeit` module to compare the actual performance of different
    object-oriented designs and Python constructs. The `timeit` module contains a
    number of functions. The one we'll focus on is named `timeit`. This function creates
    a `Timer` object for some statement. It can also include some setup code that
    prepares the environment. It then calls the `timeit()` method of `Timer` to execute
    the setup just once and the target statement repeatedly. The return value is the
    time required to run the statement.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用`timeit`模块来比较不同面向对象设计和Python构造的实际性能。`timeit`模块包含许多函数。我们将专注的是名为`timeit`的函数。这个函数为某个语句创建一个`Timer`对象。它还可以包括一些设置代码，准备环境。然后调用`Timer`的`timeit()`方法来执行设置一次，目标语句重复执行。返回值是运行语句所需的时间。
- en: The default count is 100,000\. This provides a meaningful time that averages
    out other OS-level activity on the computer that is performing the measurement.
    For complex or long-running statements, a lower count may be prudent.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 默认计数为100,000。这提供了一个有意义的时间，可以平均出计算机上执行测量的其他操作系统级活动。对于复杂或长时间运行的语句，较低的计数可能更为谨慎。
- en: 'The following is a simple interaction with `timeit`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与`timeit`的简单交互：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt Publishing books you have
    purchased from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you have purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中购买的所有Packt Publishing图书下载示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接将文件发送到您的电子邮件。
- en: The statement `obj.method()` is provided to `timeit()` as a string. The setup
    is the class definition and is provided as a string as well. It's important to
    note that everything required by the statement must be in the setup. This includes
    all imports as well as all variable definitions and object creation. Everything.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 语句`obj.method()`被提供给`timeit()`作为一个字符串。设置是类定义，也被提供为一个字符串。重要的是要注意语句所需的一切都必须在设置中。这包括所有的导入以及所有的变量定义和对象创建。一切。
- en: It can take a few tries to get the setup complete. When using interactive Python,
    we often lose track of global variables and imports that have scrolled off the
    top of the terminal window. This example showed that 100,000 method calls that
    do nothing take 0.198 seconds.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 完成设置可能需要几次尝试。在使用交互式Python时，我们经常会忘记全局变量和已经滚动到终端窗口顶部的导入。这个例子表明，执行100,000次什么都不做的方法调用需要0.198秒。
- en: 'The following is another example of using `timeit`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是另一个使用`timeit`的例子：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This shows us that a do-nothing function call is slightly less expensive than
    a do-nothing method invocation. The overhead in this case is almost 44 percent.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们，一个无用的函数调用比一个无用的方法调用稍微便宜一些。在这种情况下的开销几乎是44%。
- en: In some cases, OS overheads may be a measurable component of the performance.
    These tend to vary based on factors that are hard to control. We can use the `repeat()`
    function instead of the `timeit()` function in this module. It will collect multiple
    samples of the basic timing to allow further analysis of OS effects on performance.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，操作系统开销可能是性能的一个可测量的组成部分。这些往往会根据难以控制的因素而变化。在这种情况下，我们可以使用这个模块中的`repeat()`函数来代替`timeit()`函数。它将收集基本时间的多个样本，以便进一步分析操作系统对性能的影响。
- en: For our purposes, the `timeit()` function will provide all the feedback we need
    to measure the various object-oriented design considerations objectively.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，`timeit()`函数将提供我们需要客观衡量各种面向对象设计考虑的反馈。
- en: Testing – unittest and doctest
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试-单元测试和doctest
- en: Unit testing is absolutely essential. If there's no automated test to show a
    particular element functionality, then the feature doesn't really exist. Put another
    way, it's not done until there's a test that shows that it's done.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试绝对是必不可少的。如果没有自动化测试来展示特定元素的功能，那么这个功能实际上并不存在。换句话说，直到有一个测试表明它已经完成，它才算完成。
- en: We'll touch, tangentially, on testing. If we were to delve into testing each
    object-oriented design feature, the book would be twice as big as it is. Omitting
    the details of testing has the disadvantage that it makes good unit tests seem
    optional. They're emphatically not optional.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将间接地涉及测试。如果我们要深入研究每个面向对象设计特性的测试，这本书将比现在的两倍还要大。省略测试的细节的缺点是，它使得良好的单元测试看起来是可选的。它们绝对不是可选的。
- en: Tip
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Unit testing is essential**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**单元测试是必不可少的**'
- en: When in doubt, design the tests first. Fit the code to the test cases.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有疑问，首先设计测试。将代码适应测试用例。
- en: Python offers two built-in testing frameworks. Most applications and libraries
    will make use of both. The general wrapper for all testing is the `unittest` module.
    In addition, many public API docstrings will have examples that can be found and
    used by the `doctest` module. Also, `unittest` can incorporate modules of `doctest`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了两个内置的测试框架。大多数应用程序和库都会同时使用这两个框架。所有测试的通用包装器是`unittest`模块。此外，许多公共API文档字符串都会有可以通过`doctest`模块找到并使用的示例。此外，`unittest`可以包含`doctest`模块。
- en: 'One lofty ideal is that every class and function has at least a unit test.
    More importantly, visible classes, functions, and modules will have `doctest`
    too. There are other lofty ideals: 100 percent code coverage, 100 percent logic
    path coverage, and so on.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一个崇高的理想是每个类和函数至少有一个单元测试。更重要的是，可见的类、函数和模块也将有`doctest`。还有其他崇高的理想：100%的代码覆盖率，100%的逻辑路径覆盖率等等。
- en: Pragmatically, some classes don't need testing. A class created by `namedtuple()`,
    for example, doesn't really need a unit test, unless you don't trust the `namedtuple()`
    implementation in the first place. If you don't trust your Python implementation,
    you can't really write applications with it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从实际角度来看，有些类不需要测试。例如，由`namedtuple()`创建的类实际上不需要单元测试，除非您不信任`namedtuple()`的实现。如果您不信任您的Python实现，那么您实际上不能用它来编写应用程序。
- en: Generally, we want to develop the test cases first and then write code that
    fits these test cases. The test cases formalize the API for the code. This book
    will reveal numerous ways to write code that has the same interface. This is important.
    Once we've defined an interface, there are still numerous candidate implementations
    that fit the interface. One set of tests should apply to several different object-oriented
    designs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们希望首先开发测试用例，然后编写符合这些测试用例的代码。测试用例为代码规范化了API。这本书将揭示许多编写具有相同接口的代码的方法。这很重要。一旦我们定义了一个接口，仍然有许多候选实现适合这个接口。一组测试应该适用于几种不同的面向对象设计。
- en: 'One general approach to using the `unittest` tools is to create at least three
    parallel directories for your project as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`unittest`工具的一般方法是为项目创建至少三个并行目录，如下所示：
- en: '`myproject`: This directory is the final package that will be installed in
    `lib/site-packages` for your package or application. It has an `__init__.py` package,
    and we''ll put our files in here for each module.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myproject`：这个目录是最终将安装在`lib/site-packages`中的包或应用程序。它有一个`__init__.py`包，我们将把我们的文件放在这里的每个模块中。'
- en: '`test`: This directory has the test scripts. In some cases, the scripts will
    parallel the modules. In some cases, the scripts may be larger and more complex
    than the modules themselves.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`测试`：此目录包含测试脚本。在某些情况下，脚本将与模块并行。在某些情况下，脚本可能比模块本身更大更复杂。'
- en: '`doc`: This directory has other documentation. We''ll touch on this in the
    next section as well as in [Chapter 18](ch18.html "Chapter 18. Quality and Documentation"),
    *Quality and Documentation*.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doc`：这个目录有其他文档。我们将在下一节以及[第18章](ch18.html "第18章。质量和文档")中涉及到这个。*质量和文档*。'
- en: In some cases, we'll want to run the same test suite on multiple candidate classes
    so that we can be sure that each candidate works. There's no point in doing `timeit`
    comparisons on code that doesn't actually work.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们希望在多个候选类上运行相同的测试套件，以确保每个候选类都有效。对于实际上不起作用的代码进行`timeit`比较是没有意义的。
- en: Unit testing and technology spikes
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试和技术尖峰
- en: 'As part of object-oriented design, we''ll often create technology spike modules
    that look like the code shown in this section. We''ll break it down into three
    sections. First, we have the overall abstract test as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 作为面向对象设计的一部分，我们经常会创建类似于本节中所示代码的技术尖峰模块。我们将其分为三个部分。首先，我们有以下总体抽象测试：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This abstract `TestCase` subclass defines a few tests that we're expecting a
    class to pass. The actual object being tested is omitted. It's referenced as `self.object`,
    but no definition is provided, making this `TestCase` subclass abstract. A `setUp()`
    method is required by each concrete subclass.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个抽象的`TestCase`子类定义了一些我们期望一个类通过的测试。被测试的实际对象被省略了。它被引用为`self.object`，但没有提供定义，使得这个`TestCase`子类是抽象的。每个具体子类都需要一个`setUp()`方法。
- en: 'The following are three concrete `TestAccess` subclasses that will exercise
    three different kinds of objects:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是三个具体的`TestAccess`子类，它们将测试三种不同类型的对象：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The subclasses of the `TestAccess` classes each provide the required `setUp()`
    method. Each method builds a different kind of object for testing. One is an instance
    of an otherwise empty class. The second is an instance of `types.SimpleNamespace`.
    The third is an instance of `object`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestAccess`类的子类分别提供了所需的`setUp()`方法。每个方法构建了不同类型的对象进行测试。一个是一个否则为空的类的实例。第二个是`types.SimpleNamespace`的实例。第三个是`object`的实例。'
- en: In order to run these tests, we'll need to build a suite that doesn't allow
    us to run the `TestAccess` abstract test.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行这些测试，我们需要构建一个套件，该套件不允许我们运行`TestAccess`抽象测试。
- en: 'The following is the rest of the spike:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是剩下的尖峰：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We now have concrete evidence that the `object` class can't be used the same
    way the `types.SimpleNamespace` class can be used. Further, we have a simple test
    class that we can use to demonstrate other designs that work (or don't work.)
    The tests, for example, demonstrate that `types.SimpleNamespace` behaves like
    an otherwise empty class.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了具体证据，即`object`类不能像`types.SimpleNamespace`类一样使用。此外，我们有一个简单的测试类，我们可以用它来演示其他有效（或无效）的设计。例如，测试表明`types.SimpleNamespace`的行为类似于一个否则为空的类。
- en: We have omitted numerous details of potential unit test cases. We'll look at
    testing in depth in [Chapter 15](ch15.html "Chapter 15. Designing for Testability"),
    *Designing for Testability*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们省略了许多潜在的单元测试案例的细节。我们将在[第15章](ch15.html "第15章。可测试性设计")中深入研究测试，*可测试性设计*。
- en: Docstrings – RST markup and documentation tools
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档字符串 - RST标记和文档工具
- en: All Python code should have docstrings at the module, class, and method levels.
    Not every single method requires a docstring. Some method names are really well
    chosen, and little more needs to be said about them. Most times, however, documentation
    is essential for clarity.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Python代码都应该在模块、类和方法级别有文档字符串。并不是每个方法都需要有文档字符串。有些方法名选择得非常好，对它们几乎不需要多说。然而，大多数情况下，文档对于清晰度是必不可少的。
- en: Python documentation is often written using **ReStructured Text** (**RST**)
    markup.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Python文档通常使用**ReStructured Text**（**RST**）标记编写。
- en: Throughout the code examples in the book, however, we'll omit docstrings. It
    keeps the book to a reasonable size. This gap has the disadvantage that it makes
    docstrings seem optional. They're emphatically not optional.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在本书的代码示例中，我们将省略文档字符串。这样可以使书的大小保持在合理范围内。这种做法的缺点是，它使得文档字符串看起来是可选的。它们绝对不是可选的。
- en: We'll emphasize this again. *Docstrings are essential*.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次强调。*文档字符串是必不可少的*。
- en: 'The docstring material is used by Python in the following three ways:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Python使用文档字符串的材料有以下三种方式：
- en: The internal `help()` function displays the docstrings
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部的`help()`函数显示文档字符串
- en: The `doctest` tool can find examples in docstrings and run them as test cases
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doctest`工具可以在文档字符串中找到示例并将其作为测试用例运行'
- en: External tools such as **Sphinx** and **epydoc** can produce elegant documentation
    extracts
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部工具如**Sphinx**和**epydoc**可以生成优雅的文档摘录
- en: 'Because of the relative simplicity of RST, it''s quite easy to write good docstrings.
    We''ll take a look at documentation and the expected markup in detail in [Chapter
    18](ch18.html "Chapter 18. Quality and Documentation"), *Quality and Documentation*.
    For now, however, we''ll provide a quick example of what a docstring might look
    like:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于RST的相对简单，编写良好的文档字符串非常容易。然而，我们将在[第18章](ch18.html "第18章。质量和文档")中详细介绍文档和预期的标记，*质量和文档*。但是，现在，我们将提供一个文档字符串可能看起来像的快速示例：
- en: '[PRE5]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This shows RST markup for parameters and return values. It includes an additional
    note about a profound limitation. It also includes the `doctest` output that can
    be used to validate the implementation using the `doctest` tool. There are numerous
    markup features that can be used to provide additional structure and semantic
    information.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了参数和返回值的RST标记。它包括了一个关于深刻限制的额外说明。它还包括了可以用来验证实现的`doctest`工具的`doctest`输出。有许多标记特性可以用来提供额外的结构和语义信息。
- en: The IDE question
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IDE问题
- en: A common question regards the *best* IDE for Python development. The short answer
    is that the IDE choice doesn't matter at all. The number of development environments
    that support Python is vast.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的问题是关于Python开发的*最佳*IDE。简短的答案是，IDE的选择一点都不重要。支持Python的开发环境数量是庞大的。
- en: All the examples in this book show interactive examples from the Python `>>>`
    prompt. Running examples interactively makes a profound statement. Well-written
    Python should be simple enough to run from the command line.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有示例都显示了Python `>>>`提示符下的交互式示例。交互式运行示例发出了一个深刻的声明。写得好的Python应该足够简单，可以从命令行运行。
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We should be able to demonstrate a design at the `>>>` prompt.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该能够在`>>>`提示符下展示一个设计。
- en: Exercising code from the `>>>` prompt is an important quality test for Python
    design complexity. If the classes or functions are too complex, then there's no
    easy way to exercise it from the `>>>` prompt. For some complex classes, we may
    need to provide appropriate mock objects to permit easy, interactive use.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从`>>>`提示符下运行代码是Python设计复杂性的一个重要质量测试。如果类或函数太复杂，那么就没有简单的方法可以从`>>>`提示符下运行它。对于一些复杂的类，我们可能需要提供适当的模拟对象，以便轻松地进行交互使用。
- en: About special method names
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于特殊方法名
- en: Python has multiple layers of implementation. We're interested in just two of
    them.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Python有多个实现层。我们只对其中的两个感兴趣。
- en: On the surface, we have Python's source text. This source text is a mixture
    of a traditional object-oriented notation and procedural function call notation.
    The postfix object-oriented notation includes `object.method()` or `object.attribute`
    constructs. The prefix notation involves `function(object)` constructs that are
    more typical of procedural programming languages. We also have an infix notation
    such as `object+other`. Plus, of course, some statements such as `for` and `with`
    invoke object methods.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在表面上，我们有Python的源文本。这个源文本是传统面向对象的符号和过程式函数调用符号的混合。后缀面向对象的符号包括`object.method()`或`object.attribute`构造。前缀符号涉及`function(object)`构造，这更典型于过程式编程语言。我们还有中缀符号，比如`object+other`。当然，还有一些语句，比如`for`和`with`，调用对象方法。
- en: The presence of `function(object)` prefix constructs leads some programmers
    to question the "purity" of Python's object orientation. It's not clear that a
    fastidiously strict adherence to the `object.method()` notation is necessary or
    even helpful. Python uses a mixture of prefix and suffix notations. The prefix
    notations are stand-ins for special method suffix notations. The presence of the
    prefix, infix, and postfix notations is based on choices of expressiveness and
    esthetics. One goal of well-written Python is that it should read more or less
    like English. Underneath the hood, the syntax variations are implemented consistently
    by Python's special methods.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`function(object)`前缀构造的存在导致一些程序员质疑Python的对象导向的“纯度”。不清楚是否严格遵守`object.method()`符号是必要的，甚至有帮助。Python使用了前缀和后缀符号的混合。前缀符号是特殊方法后缀符号的替身。前缀、中缀和后缀符号的存在是基于表达和美学的选择。写得好的Python的一个目标是它应该读起来更像英语。在底层，语法变化是由Python的特殊方法一致地实现的。'
- en: Everything in Python is an object. This is unlike Java or C++ where there are
    "primitive" types that avoid the object paradigm. Every Python object offers an
    array of special methods that provide implementation details for the surface features
    of the language. We might, for example, write `str(x)` in an application program.
    This prefix surface notation is implemented as `x.__str__()` under the hood.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的一切都是对象。这与Java或C++不同，那里有避免对象范式的“原始”类型。每个Python对象都提供了一系列特殊方法，用于提供语言表面特性的实现细节。例如，我们可能在应用程序中写`str(x)`。这个前缀表面符号是作为`x.__str__()`在底层实现的。
- en: A construct such as `a+b` may be implemented as `a.__add__(b)` or `b.__radd__(a)`
    depending on the type of compatibility rules that were built into the class definitions
    for objects `a` and `b`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如`a+b`这样的构造可能被实现为`a.__add__(b)`或`b.__radd__(a)`，这取决于内置到对象`a`和`b`的类定义中的兼容性规则。
- en: The mapping between surface syntax and the implementation of special methods
    is emphatically not a trivial rewrite from `function(x)` to `x.__function__()`.
    There are numerous language features that have interesting special methods to
    support that feature. Some special methods have default implementations inherited
    from the base class, `object`, while other special methods have no default implementation
    and will raise an exception.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 表面语法和特殊方法的实现之间的映射绝对不是从`function(x)`到`x.__function__()`的简单重写。有许多语言特性具有有趣的特殊方法来支持该特性。一些特殊方法具有从基类`object`继承的默认实现，而其他特殊方法没有默认实现，并将引发异常。
- en: Throughout [Part 1](pt01.html "Part 1. Pythonic Classes via Special Methods"),
    *Pythonic Classes via Special Methods*, we'll introduce the special methods and
    show how we can implement these special methods to provide seamless integration
    between Python and our class definitions.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1部分](pt01.html "第1部分. 通过特殊方法实现Pythonic类")中，*通过特殊方法实现Pythonic类*，我们将介绍特殊方法，并展示如何实现这些特殊方法，以提供Python和我们的类定义之间的无缝集成。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'We''ve looked at one of our sample problem domains: the casino game of Blackjack.
    We like it because it has some algorithmic complexity, but isn''t too sophisticated
    or esoteric. We''ve also introduced three important modules that we''ll be using
    throughout the book:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过我们的一个示例问题领域：21点赌场游戏。我们喜欢它是因为它具有一定的算法复杂性，但并不太复杂或玄妙。我们还介绍了三个重要的模块，这些模块将贯穿整本书的使用。
- en: The `timeit` module is something we'll use to compare performance of alternative
    implementations
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeit`模块是我们将用来比较替代实现性能的工具。'
- en: The `unittest` and `doctest` modules will be used to confirm that our software
    works correctly
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unittest`和`doctest`模块将被用来确认我们的软件是否正确工作。'
- en: We've also looked at some of the ways we'll add documentation to our Python
    programs. We'll be using docstrings in modules, classes, and functions. To save
    space, not every example will show the docstrings. In spite of this, they should
    be considered as essential.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看了一些我们将如何为我们的Python程序添加文档的方式。我们将在模块、类和函数中使用文档字符串。为了节省空间，不是每个示例都会显示文档字符串。尽管如此，它们应该被视为必不可少的。
- en: The use of an **integrated development environment** (**IDE**) isn't essential.
    Any IDE or text editor that works for you will be fine for advanced Python development.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**集成开发环境**（**IDE**）并非必需。任何适合您的IDE或文本编辑器都可以用于高级Python开发。'
- en: The eight chapters which follow will address different subsets of the special
    method names. These are about how we'll create our own Python programming that
    integrates seamlessly with the built-in library modules.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的八章将涉及特殊方法名称的不同子集。这些方法是关于我们如何创建与内置库模块无缝集成的Python编程。
- en: In the next chapter, we'll focus on the `__init__()` method and the various
    ways we can use it. The `__init__()` method is profound because initialization
    is the first big step in an object's life; every object must be initialized properly
    to work properly. More important than that, the argument values for `__init__()`
    can take on many forms. We'll look at a variety of ways to design `__init__()`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于`__init__()`方法以及我们可以使用它的各种方式。`__init__()`方法很重要，因为初始化是对象生命周期中的第一步；每个对象必须被正确初始化才能正常工作。比这更重要的是，`__init__()`的参数值可以采用多种形式。我们将探讨多种设计`__init__()`的方式。
