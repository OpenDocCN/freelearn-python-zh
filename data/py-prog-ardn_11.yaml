- en: Chapter 11. Tweet-a-PowerStrip
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。推文电源条带
- en: Smart power management units or strips are part of some of the most popular
    IoT subdomains, smart homes and smart grids. Nowadays, smart power strips are
    commercially available and provide a large number of features, such as remote
    access, smart power usage, and power management. In this project, we are going
    to create a smart DIY power strip that can be controlled remotely using status
    messages posted on Twitter, the popular social media website ([http://www.twitter.com](http://www.twitter.com)).
    These messages are also known as **tweets**. Basically, just like you can control
    sensors remotely using a web browser, you can control them by sending a tweet.
    We've already worked with low-power sensors in the previous project, so let's
    work with AC appliances in this project. We will be implementing the same project
    development methods that we utilized in the previous project. This chapter avoids
    additional explanations about the process and sticks only to the details associated
    with the project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 智能电源管理单元或条带是某些最受欢迎的物联网子领域的一部分，如智能家居和智能电网。如今，智能电源条带在商业上可用，并提供大量功能，如远程访问、智能电力使用和电力管理。在本项目中，我们将创建一个可以通过在Twitter上发布的状态消息远程控制的智能DIY电源条带，Twitter是一个流行的社交媒体网站（[http://www.twitter.com](http://www.twitter.com)）。这些消息也被称为**推文**。基本上，就像您可以使用网页浏览器远程控制传感器一样，您也可以通过发送推文来控制它们。我们在上一个项目中已经与低功耗传感器合作过，所以在这个项目中让我们处理交流电器。我们将实施与上一个项目中使用的相同的项目开发方法。本章避免对过程的额外解释，仅关注与项目相关的细节。
- en: Project overview
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: This project requires the development of a smart power strip using Arduino and
    Python, while the control inputs to the strips are tweets. Although we are only
    enabling remote access to the power strip, there are a large number of additional
    features that can be implemented in future to elevate this DIY project to a commercial
    product.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目需要使用Arduino和Python开发智能电源条带，而条带的控制输入是推文。尽管我们只启用了电源条带的远程访问功能，但未来可以实施大量其他功能，将这个DIY项目提升为商业产品。
- en: 'The major goals we want to achieve in this project are as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本项目中想要实现的主要目标是以下这些：
- en: The user should be able to turn the individual power ports on and off using
    customized tweets
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户应能够使用定制的推文开关各个电源端口
- en: The user should be able to check the status of the power ports using Twitter
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户应能够通过Twitter检查电源端口的状况
- en: Project requirements
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目需求
- en: 'Here are the initial project requirements, derived from the goals:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是初始项目需求，来源于目标：
- en: The system should have 110V (or 220V) AC power ports interfaced with relays.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统应具有与继电器接口的110V（或220V）交流电源端口。
- en: An Arduino-based unit should be able to control these relays, ultimately controlling
    the appliance connected through the power ports.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Arduino的单元应能够控制这些继电器，最终控制通过电源端口连接的电器
- en: The system should be able to decode the tweets sent by the user and convert
    them into appropriate control messages for Arduino.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统应能够解码用户发送的推文，并将它们转换为Arduino的适当控制消息
- en: The Python-based program that processes the tweets should then publish these
    messages so that Arduino can complete those actions using the relays.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Python的程序处理推文后，应发布这些消息，以便Arduino可以使用继电器完成这些操作。
- en: To sum up, the relays should be controlled in a near real-time manner using
    the tweets sent by the user.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总结来说，应使用用户发送的推文以近乎实时的方式控制继电器。
- en: The system should also understand keywords to check the status of the relays
    and automatically tweet the status. The system should process a tweet only once
    and should be able to remember the last tweet processed.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统还应理解关键词以检查继电器的状态，并自动推文状态。系统应仅处理一次推文，并能够记住最后处理的推文。
- en: Note
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**110V versus 220V AC power**'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**110V与220V交流电源**'
- en: 'Depending on the country, your AC power supply may have voltage ratings of
    110/120V or 220/240V. Although the circuit diagram used by this project mentions
    a 110V AC power supply, the same circuit should also work for a 220V power supply.
    If you are using a 220V supply, check out the following notes before moving forward:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据国家不同，您的交流电源可能具有110/120V或220/240V的电压等级。尽管本项目使用的电路图提到了110V交流电源，但相同的电路也适用于220V电源。如果您使用220V电源，在继续之前请查看以下注意事项：
- en: Ensure that the appliances you are trying to operate, such as fans, lights,
    and so on, are rated for similar AC power
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您要操作的电器，如风扇、灯具等，适用于类似的交流电源
- en: You have to ensure that the relays used by the project are compatible with your
    AC power supply
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须确保项目使用的继电器与您的交流电源兼容
- en: Arduino works on a DC power supply, and it is not affected by any variation
    in AC power
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino使用直流电源供电，不受交流电源任何变化的影响
- en: System architecture
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统架构
- en: From the preceding requirements, let's sketch the architecture of the Tweet-a-PowerStrip
    system. The system architecture tries to utilize the hardware components and software
    tools you learned in the previous chapters, while having a relay component as
    the only exceptional component. As you can see in the architecture in the following
    diagram, we are employing the relay to control various home appliances. These
    appliances are usually powered by a common 110V AC power supply available in each
    home. Instead of controlling a single appliance, we are implementing a four-channel
    relay to control at least four appliances, such as a lamp, a fan, a toaster, and
    a coffee machine.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的要求来看，让我们绘制Tweet-a-PowerStrip系统的架构图。系统架构试图利用您在前面章节中学到的硬件组件和软件工具，同时将继电器组件作为唯一的例外。如您在以下架构图中看到的，我们正在使用继电器来控制各种家用电器。这些电器通常由每个家庭都有的通用110V交流电源供电。我们不是控制单个电器，而是实现了一个四通道继电器，以控制至少四个电器，如灯、风扇、烤面包机和咖啡机。
- en: '![System architecture](img/5938OS_11_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![系统架构](img/5938OS_11_01.jpg)'
- en: The relay is controlled using the digital pins of the Arduino Uno board, which
    utilizes the Ethernet Shield to connect to your home network. A computation unit
    that may consist of a computer, a Raspberry Pi, or a server, uses Python and its
    supporting libraries to access tweets. The computation unit also deploys a Mosquitto
    broker. This broker handles the topics from the Python program and Arduino to
    control the relays. The user can post tweets containing keywords from any platform,
    such as a phone or a browser, and the tweets are ultimately captured by the computation
    unit.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该继电器通过Arduino Uno板上的数字引脚进行控制，该板使用以太网盾连接到您的家庭网络。一个可能由计算机、树莓派或服务器组成的计算单元，使用Python及其支持库来访问推文。计算单元还部署了一个Mosquitto代理。这个代理处理来自Python程序和Arduino的议题，以控制继电器。用户可以从任何平台（如手机或浏览器）发布包含关键词的推文，最终这些推文会被计算单元捕获。
- en: Required hardware components
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 所需硬件组件
- en: 'This project will require the following hardware components throughout the
    development and the deployment stages:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个开发和部署阶段，该项目将需要以下硬件组件：
- en: '| Component | Amount | Website/note |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 组件 | 数量 | 网站/备注 |'
- en: '| --- | --- | --- |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Arduino Uno | 1 | [https://www.sparkfun.com/products/11021](https://www.sparkfun.com/products/11021)
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| Arduino Uno | 1 | [https://www.sparkfun.com/products/11021](https://www.sparkfun.com/products/11021)
    |'
- en: '| Arduino Ethernet Shield | 1 | [https://www.sparkfun.com/products/9026](https://www.sparkfun.com/products/9026)
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| Arduino以太网盾 | 1 | [https://www.sparkfun.com/products/9026](https://www.sparkfun.com/products/9026)
    |'
- en: '| Relay (four-channel, Arduino-compatible) | 1 | [http://www.amazon.com/JBtek-Channel-Module-Arduino-Raspberry/dp/B00KTEN3TM/](http://www.amazon.com/JBtek-Channel-Module-Arduino-Raspberry/dp/B00KTEN3TM/)
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 继电器（四通道，Arduino兼容） | 1 | [http://www.amazon.com/JBtek-Channel-Module-Arduino-Raspberry/dp/B00KTEN3TM/](http://www.amazon.com/JBtek-Channel-Module-Arduino-Raspberry/dp/B00KTEN3TM/)
    |'
- en: '| PowerSwitch Tail | 4 | [http://www.powerswitchtail.com/](http://www.powerswitchtail.com/)Alternative
    to relay |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| PowerSwitch Tail | 4 | [http://www.powerswitchtail.com/](http://www.powerswitchtail.com/)继电器的替代品
    |'
- en: '| Power strip | Optional |   |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 电源插座 | 可选 |   |'
- en: '| Breadboard | 1 | For development stage |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 面包板 | 1 | 用于开发阶段 |'
- en: '| USB cable for Arduino | 1 | For development stage |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| Arduino USB线 | 1 | 用于开发阶段 |'
- en: '| Arduino power supply | 1 | For deployment stage |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| Arduino电源 | 1 | 用于部署阶段 |'
- en: '| Electric tape | As per requirements |   |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 电胶带 | 根据需求 |   |'
- en: '| Connection wires | As per requirements |   |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 连接线 | 根据需求 |   |'
- en: Relays
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 继电器
- en: 'As you can see in the following image, we are introducing a new hardware component
    that was not utilized in any of the previous chapters—a relay:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在以下图片中看到的，我们引入了一个新的硬件组件，它在前面的章节中没有被使用——一个继电器：
- en: '![Relays](img/5938OS_11_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![继电器](img/5938OS_11_02.jpg)'
- en: This is an electromagnetic device that uses electricity to be operated as a
    switch. A typical relay contains three contacts on the high-power side, **normally
    connected** (**NC**), **common** (**C**), and **normally open** (**NO**). The
    other side (the control side) of the relay requires an activation voltage to toggle
    the connection from common-NC to common-NO. This action demonstrates the switch
    functionalities for the connection on the high-power side. We'll use Arduino-compatible
    relays from manufacturers such as Keyes or SainSmart. These relays are available
    in single-, two- or four-channel configurations. On the high-power side, the relays
    support up to 250V, 10A AC power or 30V, 10A DC power. The relays are controlled
    using 5V DC on the low-power side, which is provided using the digital I/O pins
    of the Arduino board.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种电磁设备，通过使用电力作为开关来操作。一个典型的继电器在高压侧有三个触点，**通常连接**（**NC**），**公共**（**C**），和**通常断开**（**NO**）。继电器的另一侧（控制侧）需要激活电压来切换连接从公共-NC到公共-NO。这个动作展示了高压侧连接的开关功能。我们将使用来自Keyes或SainSmart等制造商的Arduino兼容继电器。这些继电器有单通道、双通道或四通道配置。在高压侧，继电器支持高达250V，10A交流电或30V，10A直流电。继电器通过低功率侧的5V直流电控制，该电压由Arduino板上的数字I/O引脚提供。
- en: PowerSwitch Tail
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PowerSwitch Tail
- en: 'Working with AC power can be hazardous if you haven''t dealt with it previously
    or if you are not familiar with the necessary precautions and measurements. If
    you are not comfortable with working with open relays or connecting AC power to
    them, there is another device that you can use to replace the relay—the PowerSwitch
    Tail, a safely enclosed box that contains optically isolated solid-state relays
    and provides a convenient way to interface your AC appliance with the Arduino
    board. The following is an image of the PowerSwitch Tail, which can be obtained
    from its official website ([http://www.powerswitchtail.com/](http://www.powerswitchtail.com/)):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前没有处理过交流电或者不熟悉必要的预防措施和测量，那么与交流电一起工作可能会有危险。如果你不习惯于处理开启的继电器或将交流电连接到它们，你可以使用另一种设备来替换继电器——PowerSwitch
    Tail，这是一个安全封装的盒子，包含光隔离固态继电器，并提供了一种方便的方式将你的交流电器与Arduino板连接起来。以下是PowerSwitch Tail的图片，可以从其官方网站[http://www.powerswitchtail.com/](http://www.powerswitchtail.com/)获取：
- en: '![PowerSwitch Tail](img/5938OS_11_16.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![PowerSwitch Tail](img/5938OS_11_16.jpg)'
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are dealing with a 220V/240V power supply, the PowerSwitch Tail website
    also provides an assembly kit for 200V to 240V power supply, at [http://www.powerswitchtail.com/Pages/PowerSwitchTail240vackit.aspx](http://www.powerswitchtail.com/Pages/PowerSwitchTail240vackit.aspx).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你处理的是220V/240V电源，PowerSwitch Tail网站还提供适用于200V至240V电源的组装套件，可在[http://www.powerswitchtail.com/Pages/PowerSwitchTail240vackit.aspx](http://www.powerswitchtail.com/Pages/PowerSwitchTail240vackit.aspx)找到。
- en: It is really easy to assemble the kit from the guidelines provided at [http://www.powerswitchtail.com/Documents/PSSRTK%20Instructions.pdf](http://www.powerswitchtail.com/Documents/PSSRTK%20Instructions.pdf).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 根据提供的[http://www.powerswitchtail.com/Documents/PSSRTK%20Instructions.pdf](http://www.powerswitchtail.com/Documents/PSSRTK%20Instructions.pdf)指南，组装这套设备非常简单。
- en: For this project, you will need four of these devices to replace the four-channel
    relay that we are going to use. As you can see in the following diagram, one end
    of the Tail goes into the regular power port, while you need to connect your appliance
    to the other port. Meanwhile, you can use the three control inputs to control
    the relay. We are using one of the digital I/O pins of the Arduino board to send
    the control signal to the Tail. When going ahead with the Tails instead of the
    relays, make sure that you make necessary amendments to the upcoming hardware
    design.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你需要四个这样的设备来替换我们即将使用的四通道继电器。正如以下图所示，Tail的一端插入常规电源端口，而你需要将你的设备连接到另一个端口。同时，你可以使用三个控制输入来控制继电器。我们正在使用Arduino板上的一个数字I/O引脚将控制信号发送到Tail。当使用Tail而不是继电器时，请确保对即将到来的硬件设计进行必要的修改。
- en: '![PowerSwitch Tail](img/5938OS_11_17.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![PowerSwitch Tail](img/5938OS_11_17.jpg)'
- en: User experience flow
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户体验流程
- en: 'From the system architecture we have created, what should the **user experience**
    (**UX**) flow while working with the Tweet-a-PowerStrip be? We have divided the
    UX into two separate sections: controlling the power to the appliances, and checking
    the status of the power strip.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们创建的系统架构来看，在使用Tweet-a-PowerStrip时，用户体验（UX）流程应该是什么？我们将UX分为两个独立的部分：控制电器电源和检查电源插座的状态。
- en: 'In the first UX flow design, as displayed in the following diagram, the user
    begins by sending a tweet containing the name of the appliance (#fan, #lamp, #toaster,
    or #coffee) and the control command (#on or #off). The system should be able to
    handle the tweet from the point of parsing until the appliance has behaved as
    asked for. The system should also provide a hassle-free experience for the user,
    where the user doesn''t have to perform any further actions than simply sending
    tweets.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个UX流程设计中，如以下图所示，用户首先发送包含设备名称（#风扇、#灯、#烤面包机或#咖啡）和控制命令（#开或#关）的推文。系统应该能够从解析推文到设备按请求行为处理整个流程。系统还应为用户提供无障碍体验，用户只需发送推文，无需执行任何其他操作。
- en: '![User experience flow](img/5938OS_11_04.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![用户体验流程](img/5938OS_11_04.jpg)'
- en: 'Similarly, the user should be able to post **#status #check** tweets and simply
    obtain the status report posted back by the system. The system should handle checking
    the status of the power ports, publishing it to the computation unit, and posting
    a tweet with the message without any additional input from the user.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '同样，用户应该能够发布**#状态 #检查**推文，并简单地获取系统发布的状态报告。系统应处理检查电源端口的状态，将其发布到计算单元，并发布带有消息的推文，而无需用户任何额外的输入。'
- en: 'The following diagram shows the UX flow for checking the system status:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了检查系统状态的UX流程：
- en: '![User experience flow](img/5938OS_11_05.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![用户体验流程](img/5938OS_11_05.jpg)'
- en: Development and deployment stages
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发和部署阶段
- en: According to the architecture, we require two main development stages to complete
    the project. The first stage, which interacts with the appliance through the relays,
    is developed using Arduino. This unit subscribes to the topics associated with
    the appliances, and once it receives an appropriate message, it executes the action
    on the relay level. In the second stage, we deal with the individual tweets, where
    we parse the tweets from the Twitter account, check for duplicates, decode actions
    from the messages, and also post tweets with status reports. During these development
    stages, we are going to use a breadboard and jumper wires to test the Arduino
    and Python programs. At this stage, the project is still not ready to deploy as
    a portable unit for daily usage.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 根据架构，我们需要两个主要开发阶段来完成项目。第一个阶段，通过与继电器交互来与设备交互，使用Arduino进行开发。该单元订阅与设备相关的主题，一旦接收到适当的消息，它就会在继电器级别执行动作。在第二个阶段，我们处理单个推文，从Twitter账户解析推文，检查重复项，从消息中解码动作，并发布带有状态报告的推文。在这些开发阶段中，我们将使用面包板和跳线来测试Arduino和Python程序。在这个阶段，项目还没有准备好作为便携式单元用于日常使用。
- en: The deployment stage contains tasks of creating a PCB for the breadboard connections
    and insulating wires to avoid any electric hazard. You can also buy or create
    an enclosure box to isolate the open hardware from physical contact. As the development
    stage contains everything that is required to convert the project into its working
    state, we are not going to dive deep into the deployment stage. You can perform
    addition deployment tasks according to your personal requirements.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 部署阶段包括创建面包板连接的PCB和绝缘电线以避免任何电气危险的任务。你也可以购买或创建一个外壳箱来隔离开放硬件与物理接触。由于开发阶段包含将项目转换为工作状态所需的一切，我们不会深入探讨部署阶段。你可以根据个人需求执行额外的部署任务。
- en: Let's start from the hardware design stage and develop the physical section
    of the smart power strip using Arduino.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从硬件设计阶段开始，使用Arduino开发智能电源插座的物理部分。
- en: Stage 1 – a smart power strip with Arduino and relays
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阶段1 – 带有Arduino和继电器的智能电源插座
- en: The hardware of Tweet-a-PowerStrip contains Arduino as the main controller unit
    that interfaces with the relays and the Ethernet Shield to communicate with the
    computation unit. The Arduino code implements the MQTT client, using the `PubSubClient`
    library to publish and subscribe to the topics. Although we are using some example
    appliances to control the use of the relay, you can select any other appliance
    you own. You can also use a commercial power strip instead of an individual power
    plug.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Tweet-a-PowerStrip的硬件包含Arduino作为主控制器单元，它通过继电器和以太网盾与计算单元通信。Arduino代码实现了MQTT客户端，使用`PubSubClient`库发布和订阅主题。尽管我们使用了一些示例设备来控制继电器的使用，但你也可以选择你拥有的任何其他设备。你也可以使用商业电源插座而不是单个电源插头。
- en: Hardware design
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件设计
- en: 'While assembling the hardware components, as displayed in the following diagram,
    make sure you are precise in connecting the appliances with the AC power plugs.
    One wire of the AC plug is directly connected to the appliance, while the other
    is connected between the C and NO ports of the relay. We have connected the control
    side of the relay to the digital pin of our Arduino. As we are using a four-channel
    relay, we will have to utilize four digital IO pins from the Arduino board. Complete
    the remaining connections as shown here:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在组装硬件组件时，如以下图所示，确保您在连接电器与交流电源插头时非常精确。交流插头的一根线直接连接到电器，而另一根线连接到继电器的C和NO端口之间。我们已经将继电器的控制端连接到我们的Arduino的数字引脚。由于我们使用的是四通道继电器，我们不得不利用Arduino板上的四个数字IO引脚。按照此处所示完成剩余的连接：
- en: '![Hardware design](img/5938OS_11_06.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![硬件设计](img/5938OS_11_06.jpg)'
- en: Connecting the hardware unit is fairly simple, but requires a lot of precision
    because it involves high-power AC connections.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 连接硬件单元相对简单，但需要很高的精度，因为它涉及到高功率的交流连接。
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You should cover the open 110V AC power cords going to the relay and the appliance
    with electric tape to avoid any type of electrical hazard. Keeping these live
    wires open can be really dangerous due to the large amount of current being carried
    by them. In the deployment stage, a plastic cover or a box around the relay unit
    can also be helpful in covering the live power wires.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该用绝缘胶带覆盖通往继电器和电器的110V交流电源线，以避免任何类型的电气危险。由于这些电线携带大量电流，保持这些电线裸露是非常危险的。在部署阶段，围绕继电器单元的塑料盖或盒子也可以帮助覆盖裸露的电源线。
- en: 'Once you are ready with the connections, connect the Arduino board to your
    computer using a USB port, as shown in the following image:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成了连接，请使用USB端口将Arduino板连接到您的计算机，如图所示：
- en: '![Hardware design](img/5938OS_11_07.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![硬件设计](img/5938OS_11_07.jpg)'
- en: The Arduino code
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Arduino代码
- en: 'The Arduino sketch for this section is located in the folder containing the
    chapter code with the `Arduino_powerstrip.ino` filename. You can open the file
    in the Arduino IDE to explore the code. As usual, you will have to change the
    IP addresses of the device and the Mosquitto server to the appropriate IP addresses,
    while also changing the MAC address of the Ethernet Shield. The following code
    snippet shows the declaration of the Arduino pins and their roles in the main
    function, `setup()`. Make sure that you are using the same pin numbers that you
    have used to connect the relay. Alternatively, you can change the appliance name
    to that of the appliance you are using. Also, make sure whatever changes you make
    in the variable names should be reflected in the entire code to avoid any compilation
    errors:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的Arduino草图位于包含章节代码的文件夹中，文件名为`Arduino_powerstrip.ino`。您可以在Arduino IDE中打开该文件以探索代码。像往常一样，您必须将设备的IP地址和Mosquitto服务器的IP地址更改为适当的IP地址，同时更改以太网盾的MAC地址。以下代码片段显示了Arduino引脚的声明及其在主函数`setup()`中的作用，请确保您使用的是连接继电器时使用的相同引脚编号。或者，您可以将电器名称更改为您使用的电器名称。此外，请确保您对变量名称所做的任何更改都反映在整个代码中，以避免任何编译错误：
- en: '[PRE0]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the `setup()` function, the code also subscribes to the appropriate MQTT
    channels so that it can receive messages from the Mosquitto broker as soon as
    they are available. As you can see, we are also subscribing to the `PowerStrip/statuscheck`
    channel to deal with the status report:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在`setup()`函数中，代码还订阅了适当的MQTT通道，以便它可以在消息可用时立即从Mosquitto代理接收消息。如您所见，我们还在订阅`PowerStrip/statuscheck`通道以处理状态报告：
- en: '[PRE1]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the `callback()` function, we use the `if` statement to match the topic
    with the appropriate `digitalWrite()` action. As you can see, we are setting up
    `HIGH` and `LOW` statuses for the digital pin when the program receives `on` and
    `off` messages, respectively (for that appliance). With this action, we are also
    changing the state of the Boolean variable associated with the appliance, which
    will be helpful in retrieving the status of the port. The same process is then
    repeated for all appliances:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在`callback()`函数中，我们使用`if`语句来匹配主题与适当的`digitalWrite()`动作。如您所见，当程序接收到`on`和`off`消息时（针对该电器），我们正在为数字引脚设置`HIGH`和`LOW`状态。通过这个动作，我们还改变了与电器关联的布尔变量的状态，这将有助于检索端口的状况。然后，对所有的电器重复相同的过程：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When the system receives a `get` message that is associated with the status
    check, the program creates a message using the Boolean variables that we toggled
    earlier. The program then publishes the status to the `PowerStrip/statusreport`
    channel:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统接收到与状态检查相关的`get`消息时，程序使用我们之前切换过的布尔变量创建一条消息。然后程序将状态发布到`PowerStrip/statusreport`通道：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Just as we did in the previous project, you can set up the code to periodically
    send `keep alive` messages to avoid the termination of the connection with the
    Mosquitto broker. Once you are ready with the code, connect the Ethernet cable,
    compile the code, and then upload it to your Arduino. Your Arduino should be in
    receiving mode now, and it will wait for the message from the subscribed channels.
    As we discussed in the previous the project, you need to ensure that your Mosquitto
    broker is running on the server IP address you specified in the Arduino code.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一个项目中做的那样，你可以设置代码定期发送`keep alive`消息以避免与Mosquitto代理的连接终止。一旦代码准备就绪，连接以太网电缆，编译代码，然后将它上传到你的Arduino。现在你的Arduino应该处于接收模式，并等待来自订阅通道的消息。正如我们在上一个项目中讨论的那样，你需要确保你的Mosquitto代理正在运行在Arduino代码中指定的服务器IP地址上。
- en: Stage 2 – the Python code to process tweets
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二阶段 – 处理推文的Python代码
- en: As the user is interacting with the system at the level of the Twitter application,
    we do not require a deployable computation or control unit for this project. Due
    to this, we can just use any computer capable of hosting Python and Mosquitto
    as the computation unit. You still need to ensure that the unit is always on and
    connected to the Internet, otherwise the system will not work as expected. For
    simplicity, you can deploy the system on the Raspberry-Pi-based control center
    that you developed in the previous project, or even on the Amazon AWS server.
    For the development stage, let's start with the regular computer that you have
    been using all along. We are assuming that this computer has the Mosquitto broker
    installed and running. Note down the IP address of this unit, as you will need
    it in the Arduino code that you developed in the previous section.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户是在Twitter应用程序的级别与系统交互，我们不需要为这个项目部署可部署的计算或控制单元。因此，我们只需使用任何能够托管Python和Mosquitto的计算机作为计算单元即可。你仍然需要确保该单元始终开启并连接到互联网，否则系统将无法按预期工作。为了简单起见，你可以将系统部署在你之前项目开发过的基于Raspberry-Pi的控制中心上，甚至可以部署在Amazon
    AWS服务器上。对于开发阶段，让我们从你一直使用的普通计算机开始。我们假设这台计算机已经安装并运行了Mosquitto代理。记下这个单元的IP地址，因为你将在之前章节开发的Arduino代码中需要它。
- en: Python software flow
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python软件流程
- en: The Python code deals with two services during execution, the Twitter API to
    get or post tweets and the Mosquitto broker to relay messages to the hardware
    unit. The program begins by parsing the latest tweet from the user account and
    checking whether it has been utilized in the previous action or not. This avoids
    any command duplication, as the frequency of new tweets is significantly lower
    than the frequency of the program loop. Once the code finds a new tweet with the
    appropriate keywords to perform operations on the appliance (or appliances), it
    publishes the message to the Mosquitto broker. If the tweet contains a message
    to check the status, the code requests the status from your Arduino and posts
    a new tweet with the status after receiving it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Python代码在执行过程中处理两个服务，分别是用于获取或发布推文的Twitter API和用于将消息中继到硬件单元的Mosquitto代理。程序首先解析用户账户的最新推文，并检查它是否在之前的操作中被使用过。这样可以避免任何命令重复，因为新推文的频率远低于程序循环的频率。一旦代码找到包含适当关键词的新推文，可以用来对设备（或设备组）进行操作，它就会将消息发布到Mosquitto代理。如果推文包含检查状态的指令，代码会从你的Arduino请求状态，并在收到状态后发布一条新的推文。
- en: 'The following diagram shows the detailed program flow of the computation unit:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了计算单元的详细程序流程：
- en: '![Python software flow](img/5938OS_11_08.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![Python软件流程](img/5938OS_11_08.jpg)'
- en: You can change the program flow to accommodate any other feature you want to
    add at the Python level. The logic behind identifying and toggling the appliance
    can be improvised to accommodate more complex tweet text.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以更改程序流程以适应你想要在Python级别添加的任何其他功能。识别和切换设备背后的逻辑可以根据更复杂的推文文本进行改进。
- en: Setting up the Twitter application
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Twitter应用程序
- en: 'We are assuming that you have a Twitter account by now. If you don''t, you
    can create a new account just for this project to avoid changes to your own profile.
    With the introduction of the latest APIs, Twitter requires you to authenticate
    using OAuth before accessing any information from your account. To do that, you
    will have to create a Twitter app using your account. Execute the following steps
    in order to create a new Twitter app for this project:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您现在已经有了一个Twitter账户。如果没有，您可以只为这个项目创建一个新账户，以避免更改您自己的个人资料。随着最新API的引入，Twitter要求您在访问账户中的任何信息之前使用OAuth进行身份验证。为此，您将需要使用您的账户创建一个Twitter应用程序。按照以下步骤创建此项目的新的Twitter应用程序：
- en: Log in to your Twitter account and open the [https://apps.twitter.com](https://apps.twitter.com)
    address in your web browser.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录您的Twitter账户，并在您的网络浏览器中打开[https://apps.twitter.com](https://apps.twitter.com)地址。
- en: Click on the **Create New App** icon on the page, and you will be directed to
    a page asking for your application details, as displayed in the following screenshot:![Setting
    up the Twitter application](img/5938OS_11_09.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面上点击**创建新应用程序**图标，您将被引导到一个页面，要求您提供应用程序详细信息，如下面的截图所示：![设置Twitter应用程序](img/5938OS_11_09.jpg)
- en: Fill in all the required details (marked with red asterisks) and continue to
    the next page. Ensure that your application name is unique, as Twitter asks for
    a unique application name.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写所有必需的详细信息（用红色星号标记），然后继续到下一页。请确保您的应用程序名称是唯一的，因为Twitter要求应用程序名称必须是唯一的。
- en: Once your application is created, you can click on the **API Keys** tab and
    find the consumer key (**API key**) and consumer secret (**API secret**) for your
    app. Save this information in a safe place, as you will need them to authenticate
    with the Twitter API.![Setting up the Twitter application](img/5938OS_11_11.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您的应用程序创建完成，您可以在**API密钥**标签页中点击，找到您应用程序的消费者密钥（**API密钥**）和消费者密钥（**API密钥**）。请将此信息保存在安全的地方，因为您将需要它们来通过Twitter
    API进行身份验证。![设置Twitter应用程序](img/5938OS_11_11.jpg)
- en: As the UX of the Tweet-a-PowerStrip project requires the system to automatically
    send the system status, we need read-and-write access to our application. Go to
    the **Permissions** tab, select the **Read and Write** option, and save it for
    the changes to take effect.![Setting up the Twitter application](img/5938OS_11_10.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于Tweet-a-PowerStrip项目的用户体验要求系统自动发送系统状态，我们需要对我们的应用程序有读写访问权限。转到**权限**标签页，选择**读取和写入**选项，并保存更改以生效。![设置Twitter应用程序](img/5938OS_11_10.jpg)
- en: Once you are done with setting up the permissions for the application, go back
    to the API keys tab and click on the **Create Access Token** icon to generate
    a new access token for this application. After a while, you should be able to
    see the access token on the same page, as displayed in this screenshot:![Setting
    up the Twitter application](img/5938OS_11_18.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您完成了设置应用程序权限，返回到API密钥标签页，并点击**创建访问令牌**图标以生成此应用程序的新访问令牌。一段时间后，您应该能在同一页面上看到访问令牌，如下面的截图所示：![设置Twitter应用程序](img/5938OS_11_18.jpg)
- en: Save the **Access token** and **Access token secret** information. Your application
    is now ready for use and can help you to authenticate with the Twitter API.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存**访问令牌**和**访问令牌密钥**信息。您的应用程序现在可以使用了，并且可以帮助您通过Twitter API进行身份验证。
- en: Now let's move on to the Python code.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续到Python代码部分。
- en: The Python code
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python代码
- en: 'Before you jump into the code, you are required to install the Twitter library
    for Python. Use the Setuptools or `pip` to install the library using the following
    command. We are assuming that you already have the latest `paho_mqtt` library
    installed on your computer:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在您开始编写代码之前，您需要安装Python的Twitter库。使用Setuptools或`pip`通过以下命令安装库。我们假设您已经在您的计算机上安装了最新的`paho_mqtt`库：
- en: '[PRE4]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The Python code for this section is located in the code folder with the `PythonTweetAPowerStrip.py`
    filename. Open the code in your IDE and start exploring it. The code contains
    two parallel threads to handle the tweets and the Mosquitto library separately.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的Python代码位于代码文件夹中，文件名为`PythonTweetAPowerStrip.py`。在您的IDE中打开代码，并开始探索它。该代码包含两个并行线程，分别处理推文和Mosquitto库。
- en: 'As you can see in the following code snippet, we are using the `Api` class
    from the `python-twitter` library to establish a connection with the Twitter API.
    We are using the `consumer key`, `consumer secret`, `access token key`, and `access
    token secret` values for this authentication. Once the authentication is established,
    the `Api` class can be used to get the latest status from the timeline using the
    `GetHomeTimeline()` function call, and to post the new status using the `PostUpdate()`
    function call. The `GetHomeTimeline()` function gives an array of statuses from
    the user; we need the latest status, which can be fetched using `statuses[0]`
    (the first element of the array):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下代码片段所示，我们正在使用`python-twitter`库中的`Api`类与Twitter API建立连接。我们使用`consumer key`、`consumer
    secret`、`access token key`和`access token secret`值进行此认证。一旦建立认证，就可以使用`Api`类通过`GetHomeTimeline()`函数调用来获取时间线上的最新状态，以及通过`PostUpdate()`函数调用来发布新状态。`GetHomeTimeline()`函数返回用户的状态数组；我们需要获取最新状态，可以使用`statuses[0]`（数组的第一个元素）来获取：
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once we have retrieved the latest tweet, we need to make sure that we haven''t
    used that tweet already. So we save the latest tweet ID in a global variable,
    as well as in a file in case we need to run the code again:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们检索到最新的推文，我们需要确保我们没有使用过那条推文。因此，我们将最新的推文ID保存到全局变量中，以及在一个文件中，以防我们需要再次运行代码：
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We retrieve the ID of the previous tweet from the `lastTweetID.txt` file to
    match with the latest ID. If it doesn''t match, we update the `lastTweetID.txt`
    file with the latest ID for the next loop:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从`lastTweetID.txt`文件中检索上一条推文的ID，以与最新ID进行匹配。如果不匹配，我们将最新ID更新到`lastTweetID.txt`文件中，以便下一次循环：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once we have identified the latest unique tweet, we use the Python string operation
    to decode the keywords for the appliance and power commands. As you can see in
    the following code snippet, the keyword we are looking for in the tweeted text
    to access the fan is `#fan`. Once we have identified that the message is directed
    to the fan, we check for action keywords such as `#on` and `#off`, and then take
    the associated action of publishing the message to the Mosquitto broker. We repeat
    this action for all the appliances connected to the system. Your Arduino takes
    an action using the published message, and completes the UX flow for the controlled
    appliances:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确定了最新的唯一推文，我们使用Python字符串操作来解码设备和控制命令的关键字。如以下代码片段所示，我们在推文文本中寻找的关键字以访问风扇是`#fan`。一旦我们确定消息是针对风扇的，我们检查动作关键字，如`#on`和`#off`，然后执行将消息发布到Mosquitto代理的相关动作。我们对所有连接到系统的设备重复此动作。你的Arduino使用发布的消息采取行动，并完成控制设备的用户体验流程：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Similarly, when the code receives an update from the `PowerStrip/statusreport`
    topic, it obtains the status from the message payload and posts it as a new tweet
    to the user timeline of that Twitter account. This completes the UX flow for the
    status check using Twitter:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当代码从`PowerStrip/statusreport`主题接收到更新时，它从消息有效负载中获取状态，并将其作为新推文发布到该Twitter账户的用户时间线。这完成了使用Twitter进行状态检查的用户体验流程：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Testing and troubleshooting
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试和故障排除
- en: 'Testing can simply be performed by posting the `#fan #on` status to the Twitter
    account used in this project. You should be able to see the fan turning on by
    using the command shown here:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '测试可以通过将`#fan #on`状态发布到本项目使用的Twitter账户来简单进行。你应该能够通过以下命令看到风扇开启：'
- en: '![Testing and troubleshooting](img/5938OS_11_12.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![测试和故障排除](img/5938OS_11_12.jpg)'
- en: 'Similarly, send the `#fan #off` status to turn off the fan. You may find some
    lagging, as the loop used to retrieve the tweets is set with a delay of a minute.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '同样，发送`#fan #off`状态来关闭风扇。你可能会发现一些延迟，因为用于检索推文的循环被设置为每分钟延迟。'
- en: '![Testing and troubleshooting](img/5938OS_11_13.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![测试和故障排除](img/5938OS_11_13.jpg)'
- en: 'To access the status of the system, post the `#status #get` status to the account,
    and you will be able to see the system status automatically posted by the computation
    unit.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '要访问系统状态，将`#status #get`状态发布到账户，你将能够看到计算单元自动发布的系统状态。'
- en: '![Testing and troubleshooting](img/5938OS_11_14.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![测试和故障排除](img/5938OS_11_14.jpg)'
- en: The tweet shown in the following screenshot is generated using the Tweet-a-PowerStrip
    unit. It displays the status of all the connected appliances.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示的推文是使用Tweet-a-PowerStrip单元生成的。它显示了所有连接的设备的状态。
- en: '![Testing and troubleshooting](img/5938OS_11_15.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![测试和故障排除](img/5938OS_11_15.jpg)'
- en: 'While working with the system, you will want to either avoid the following
    scenarios or troubleshoot them:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用系统时，您可能希望避免以下场景或对其进行故障排除：
- en: '`''Twitter rate limit exceed'' error`: Twitter imposes a limit on the number
    of requests you can make to their public API. If you are requesting the API too
    often (this often occurs when you reduce the sleep time between consecutive queries),
    your application will exit with an exception. To avoid this, set a longer sleep
    time in the Python program loop before requesting the API again. There is a trade-off
    between the frequency of requests and the response time of your appliances. You
    can learn about this limitation at [http://dev.twitter.com/rest/public/rate-limiting](http://dev.twitter.com/rest/public/rate-limiting)
    and adjust your request interval accordingly. Once you have received this error,
    you will have to wait for some time (approximately 10 to 15 minutes) before making
    requests to the Twitter API again.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''Twitter速率限制超出''错误`：Twitter对其公共API的请求数量有限制。如果您请求API过于频繁（这通常发生在您减少连续查询之间的睡眠时间时），您的应用程序将异常退出。为了避免这种情况，在请求API之前，在Python程序循环中设置更长的睡眠时间。请求频率和电器响应时间之间存在权衡。您可以在[http://dev.twitter.com/rest/public/rate-limiting](http://dev.twitter.com/rest/public/rate-limiting)上了解此限制，并相应地调整请求间隔。一旦收到此错误，您将不得不等待一段时间（大约10到15分钟）才能再次向Twitter
    API发送请求。'
- en: '`''Read-only application cannot post'' error`: This error will only occur if
    you forgot to change the permissions on your application to **Read and Write**
    from **Read only**. Make sure that you have performed this change. Also, Twitter
    takes some time for the changes to take effect.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''只读应用程序无法发布''错误`：此错误仅会在您忘记将应用程序的权限从**只读**更改为**读和写**时发生。请确保您已执行此更改。此外，Twitter需要一些时间来使更改生效。'
- en: Extending the project with additional features
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过添加额外功能扩展项目
- en: 'The current system can be expanded to include multiple features:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当前系统可以扩展以包括多个功能：
- en: You can start saving the time duration in which a particular appliance was on
    or off, and then provide a detailed analysis to the user. You can also use this
    information to calculate the energy being expended by these appliances.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以开始记录特定电器开启或关闭的时间段，并向用户提供详细的分析。您还可以使用这些信息来计算这些电器消耗的能量。
- en: You can utilize the current measurement sensors to calculate the power load
    at each port. Combining it with the time the device was on, you can calculate
    very comprehensive power usage to further improve power management.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以利用当前的测量传感器来计算每个端口的电力负载。结合设备开启的时间，您可以计算出非常全面的电力使用情况，以进一步改善电力管理。
- en: You can use the system clock with the motion sensor to intelligently turn off
    the appliance during nights and periods of no activity.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用系统时钟和运动传感器在夜间和无活动期间智能地关闭电器。
- en: The Tweet-a-PowerStrip project can be interfaced with the remote home monitoring
    system that we developed in the previous project, in order to obtain useful information
    from other sensors being used in the same house.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tweet-a-PowerStrip项目可以与我们在上一个项目中开发的远程家庭监控系统接口，以便从同一房屋中使用的其他传感器获取有用信息。
- en: One of the modifications you can easily implement is to utilize Twitter's private
    messages instead of its tweets to control the appliances. This will extend the
    access permissions of your system to other trusted Twitter accounts. For security
    reasons, you should tighten the access level and only let approved people post
    such messages to your account.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以轻松实现的修改之一是利用Twitter的私信而不是其推文来控制电器。这将扩展您系统的访问权限，使其能够访问其他受信任的Twitter账户。出于安全原因，您应该提高访问级别，并仅允许经过批准的人向您的账户发布此类消息。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You have now successfully completed two different IoT projects using just two
    base technologies, Arduino and Python. With the current project, it is obvious
    that it is very easy to interface any other technology, tool, or API with Arduino
    and Python. The project development methodology we used in these two projects
    will also help you with your DIY projects and other future products. Happy prototyping!
    And happy coding!
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已成功使用仅两种基础技术，Arduino和Python，完成了两个不同的物联网项目。随着当前项目，很明显，将任何其他技术、工具或API与Arduino和Python接口非常容易。我们在这些两个项目中使用的项目开发方法也将帮助您进行DIY项目和未来的其他产品。祝您原型制作愉快！祝您编码愉快！
