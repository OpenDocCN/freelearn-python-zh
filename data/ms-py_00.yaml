- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Python is a language that is easy to learn and both powerful and convenient
    from the start. Mastering Python, however, is a completely different question.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种易于学习的语言，从一开始就非常强大和方便。然而，精通Python是一个完全不同的问题。
- en: Every programming problem you will encounter has at least several possible solutions
    and/or paradigms to apply within the vast possibilities of Python. This book will
    not only illustrate a range of different and new techniques but also explain where
    and when a method should be applied.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你将遇到的每个编程问题都至少有几种可能的解决方案和/或范式可以应用于Python的广泛可能性之内。本书不仅将说明一系列不同和新的技术，还将解释何时何地应该应用某种方法。
- en: This book is not a beginner's guide to Python 3\. It is a book that can teach
    you about the more advanced techniques possible within Python. Specifically targeting
    Python 3.5 and up, it also demonstrates several Python 3.5-only features such
    as async def and await statements.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书不是Python 3的初学者指南。它是一本可以教你Python中更高级技术的书。具体针对Python 3.5及以上版本，还演示了一些Python
    3.5独有的特性，比如async def和await语句。
- en: As a Python programmer with many years of experience, I will attempt to rationalize
    the choices made in this book with relevant background information. These rationalizations
    are in no way strict guidelines, however. Several of these cases boil down to
    personal style in the end. Just know that they stem from experience and are, in
    many cases, the solutions recommended by the Python community.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名有多年经验的Python程序员，我将尝试用相关背景信息来理性地解释本书中所做的选择。然而，这些理性化并不是严格的指导方针。其中几个案例归根结底是个人风格的问题。只需知道它们源自经验，并且在许多情况下是Python社区推荐的解决方案。
- en: Some of the references in this book might not be obvious to you if you are not
    a fan of Monty Python. This book extensively uses spam and eggs instead of foo
    and bar in code samples. To provide some background information, I recommend watching
    the "Spam" sketch by Monty Python. It is positively silly!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的一些参考对你来说可能不明显，如果你不是蒙提·派森的粉丝。本书在代码示例中广泛使用spam和eggs而不是foo和bar。为了提供一些背景信息，我建议观看蒙提·派森的“垃圾食品”小品。它非常愚蠢！
- en: What this book covers
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖内容
- en: '[Chapter 1](ch01.html "Chapter 1. Getting Started – One Environment per Project"),
    *Getting Started – One Environment per Project*, introduces virtual Python environments
    using virtualenv or venv to isolate the packages in your Python projects.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 《第1章》《入门-每个项目一个环境》介绍了使用virtualenv或venv来隔离Python项目中的包的虚拟Python环境。
- en: '[Chapter 2](ch02.html "Chapter 2. Pythonic Syntax, Common Pitfalls, and Style
    Guide"), *Pythonic Syntax, Common Pitfalls, and Style Guide*, explains what Pythonic
    code is and how to write code that is Pythonic and adheres to the Python philosophy.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 《第2章》《Pythonic语法，常见陷阱和风格指南》解释了Pythonic代码是什么，以及如何编写符合Python哲学的Pythonic代码。
- en: '[Chapter 3](ch03.html "Chapter 3. Containers and Collections – Storing Data
    the Right Way"), *Containers and Collections – Storing Data the Right Way*, is
    where we use the many containers and collections bundled with Python to create
    code that is fast and readable.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 《第3章》《容器和集合-正确存储数据》是我们使用Python捆绑的许多容器和集合来创建快速且可读的代码的地方。
- en: '[Chapter 4](ch04.html "Chapter 4. Functional Programming – Readability Versus
    Brevity"), *Functional Programming – Readability Versus Brevity*, covers functional
    programming techniques such as list/dict/set comprehensions and lambda statements
    that are available in Python. Additionally, it illustrates their similarities
    with the mathematical principles involved.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 《第4章》《函数式编程-可读性与简洁性》涵盖了Python中可用的列表/字典/集合推导和lambda语句等函数式编程技术。此外，它还说明了它们与涉及的数学原理的相似之处。
- en: '[Chapter 5](ch05.html "Chapter 5. Decorators – Enabling Code Reuse by Decorating"),
    *Decorators – Enabling Code Reuse by Decorating*, explains not only how to create
    your own function/class decorators, but also how internal decorators such as property,
    staticmethod, and classmethod work.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 《第5章》《装饰器-通过装饰实现代码重用》不仅解释了如何创建自己的函数/类装饰器，还解释了内部装饰器（如property，staticmethod和classmethod）的工作原理。
- en: '[Chapter 6](ch06.html "Chapter 6. Generators and Coroutines – Infinity, One
    Step at a Time"), *Generators and Coroutines – Infinity, One Step at a Time*,
    shows how generators and coroutines can be used to lazily evaluate structures
    of infinite size.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 《第6章》《生成器和协程-无限，一步一步》展示了生成器和协程如何用于惰性评估无限大小的结构。
- en: '[Chapter 7](ch07.html "Chapter 7. Async IO – Multithreading without Threads"),
    *Async IO – Multithreading without Threads*, demonstrates the usage of asynchronous
    functions using async def and await so that external resources no longer stall
    your Python processes.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 《第7章》《异步IO-无需线程的多线程》演示了使用async def和await的异步函数的用法，以便外部资源不再阻塞Python进程。
- en: '[Chapter 8](ch08.html "Chapter 8. Metaclasses – Making Classes (Not Instances)
    Smarter"), *Metaclasses – Making Classes (Not Instances) Smarter*, goes deeper
    into the creation of classes and how class behavior can be completely modified.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 《第8章》《元类-使类（而不是实例）更智能》深入探讨了类的创建以及如何完全修改类的行为。
- en: '[Chapter 9](ch09.html "Chapter 9. Documentation – How to Use Sphinx and reStructuredText"),
    *Documentation – How to Use Sphinx and reStructuredText*, shows how you can make
    Sphinx automatically document your code with very little effort. Additionally,
    it shows how the Napoleon syntax can be used to document function arguments in
    a way that is legible both in the code and the documentation.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[第9章](ch09.html "第9章。文档-如何使用Sphinx和reStructuredText")，“文档-如何使用Sphinx和reStructuredText”，展示了如何使用Sphinx自动记录你的代码，几乎不费吹灰之力。此外，它还展示了如何使用Napoleon语法来记录函数参数，这种方式在代码和文档中都很清晰。'
- en: '[Chapter 10](ch10.html "Chapter 10. Testing and Logging – Preparing for Bugs"),
    *Testing and Logging – Preparing for Bugs*, explains how code can be tested and
    how logging can be added to enable easy debugging in case bugs occur at a later
    time.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html "第10章。测试和日志-为错误做准备")，“测试和日志-为错误做准备”，解释了如何测试代码以及如何添加日志以便在以后出现错误时进行轻松调试。'
- en: '[Chapter 11](ch11.html "Chapter 11. Debugging – Solving the Bugs"), *Debugging
    – Solving the Bugs*, demonstrates several methods of hunting down bugs with the
    use of tracing, logging, and interactive debugging.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[第11章](ch11.html "第11章。调试-解决错误")，“调试-解决错误”，演示了使用跟踪、日志和交互式调试来追踪错误的几种方法。'
- en: '[Chapter 12](ch12.html "Chapter 12. Performance – Tracking and Reducing Your
    Memory and CPU Usage"), *Performance – Tracking and Reducing Your Memory and CPU
    Usage*, shows several methods of measuring and improving CPU and memory usage.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[第12章](ch12.html "第12章。性能-跟踪和减少内存和CPU使用")，“性能-跟踪和减少内存和CPU使用”，展示了几种测量和改进CPU和内存使用的方法。'
- en: '[Chapter 13](ch13.html "Chapter 13. Multiprocessing – When a Single CPU Core
    Is Not Enough"), *Multiprocessing – When a Single CPU Core Is Not Enough*, illustrates
    that the multiprocessing library can be used to execute your code, not just on
    multiple processors but even on multiple machines.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[第13章](ch13.html "第13章。多处理-当单个CPU核心不够用时")，“多处理-当单个CPU核心不够用时”，说明了多处理库可以用于执行代码，不仅可以在多个处理器上执行，甚至可以在多台机器上执行。'
- en: '[Chapter 14](ch14.html "Chapter 14. Extensions in C/C++, System Calls, and
    C/C++ Libraries"), *Extensions in C/C++, System Calls, and C/C++ Libraries*, covers
    the calling of C/C++ functions for both interoperability and performance using
    Ctypes, CFFI, and native C/C++.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[第14章](ch14.html "第14章。C/C++扩展、系统调用和C/C++库")，“C/C++扩展、系统调用和C/C++库”，涵盖了调用C/C++函数以实现互操作性和性能的方法，使用Ctypes、CFFI和本地C/C++。'
- en: '[Chapter 15](ch15.html "Chapter 15. Packaging – Creating Your Own Libraries
    or Applications"), *Packaging – Creating Your Own Libraries or Applications*,
    demonstrates the usage of setuptools and setup.py to build and deploy packages
    on the Python Package Index (PyPI).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[第15章](ch15.html "第15章。打包-创建自己的库或应用程序")，“打包-创建自己的库或应用程序”，演示了使用setuptools和setup.py在Python包索引（PyPI）上构建和部署软件包。'
- en: What you need for this book
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你需要这本书
- en: The only hard requirement for this book is a Python interpreter. A Python 3.5
    or newer interpreter is recommended, but many of the code examples will function
    in older Python versions, such as 2.7, with a simple from __future__ import print_statement
    added at the top of the file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的唯一硬性要求是Python解释器。建议使用Python 3.5或更新的解释器，但许多代码示例也可以在旧版本的Python中运行，比如2.7，在文件顶部添加一个简单的from
    __future__ import print_statement。
- en: Additionally, [Chapter 14](ch14.html "Chapter 14. Extensions in C/C++, System
    Calls, and C/C++ Libraries"), *Extensions in C/C++, System Calls, and C/C++ Libraries*
    requires a C/C++ compiler, such as GCC, Visual Studio, or XCode. A Linux machine
    is by far the easiest to execute the C/C++ examples, but these should function
    on Windows and OS X machines without too much effort as well.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，[第14章](ch14.html "第14章。C/C++扩展、系统调用和C/C++库")，“C/C++扩展、系统调用和C/C++库”需要C/C++编译器，如GCC、Visual
    Studio或XCode。Linux机器是执行C/C++示例最简单的机器，但在Windows和OS X机器上也应该可以轻松执行。
- en: Who this book is for
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书是为谁准备的
- en: If you are beyond the absolute Python beginner level, then this book is for
    you. Even if you are already an expert Python programmer, I guarantee that you
    will find some useful techniques and insights in this book.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经超越了绝对的Python初学者水平，那么这本书适合你。即使你已经是一名专业的Python程序员，我保证你会在这本书中找到一些有用的技巧和见解。
- en: At the very least, it will allow Python 2 programmers to learn a lot more about
    the new features introduced in Python 3, and specifically Python 3.5.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，它将允许Python 2程序员更多地了解Python 3中引入的新功能，特别是Python 3.5。
- en: Basic proficiency in Python is required as the installation of Python interpreters
    and the basic Python syntax are not covered.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 需要基本的Python熟练，因为Python解释器的安装和基本的Python语法没有涵盖。
- en: Conventions
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，你会发现许多文本样式，用来区分不同类型的信息。以下是一些这些样式的例子和它们的含义解释。
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "It
    should be noted that the `type()` function has another use as well."'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码单词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter句柄显示如下：“应该注意，`type()`函数还有另一个用途。”
- en: 'A block of code is set as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Any command-line input or output is written as follows where the >>> indicate
    the Python console and the # indicates a regular Linux/Unix shell:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都写成如下形式，其中>>>表示Python控制台，#表示常规的Linux/Unix shell：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear in a box like this.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要提示以这样的方式出现在一个框中。
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Tips and tricks appear like this.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 提示和技巧看起来像这样。
