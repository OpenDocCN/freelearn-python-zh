- en: Chapter 13. Conditional Expressions and the Operator Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章.条件表达式和操作模块
- en: Functional programming emphasizes lazy or non-strict ordering of operations.
    The idea is to allow the compiler or runtime to do as little work as possible
    to compute the answer. Python tends to impose strict ordering on evaluations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程强调操作的惰性或非严格顺序。其思想是允许编译器或运行时尽可能少地计算答案。Python倾向于对评估施加严格顺序。
- en: For example, we used the Python `if`, `elif`, and `else` statements. They're
    clear and readable, but they imply a strict ordering on the evaluation of the
    conditions. We can, to an extent, free ourselves from the strict ordering here,
    and develop a limited kind of non-strict conditional statement. It's not clear
    if this is helpful but it shows some alternative ways to express an algorithm
    in a functional style.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们使用了Python的`if`、`elif`和`else`语句。它们清晰易读，但暗示了对条件评估的严格顺序。在这里，我们可以在一定程度上摆脱严格的顺序，并开发一种有限的非严格条件语句。目前还不清楚这是否有帮助，但它展示了一些以函数式风格表达算法的替代方式。
- en: The first part of this chapter will look at ways we can implement non-strict
    evaluation. This is a tool that's interesting because it can lead to performance
    optimizations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第一部分将探讨我们可以实现非严格评估的方法。这是一个有趣的工具，因为它可以导致性能优化。
- en: In the previous chapters, we looked at a number of higher-order functions. In
    some cases, we used these higher-order functions to apply fairly sophisticated
    functions to collections of data. In other cases, we applied simple functions
    to collections of data.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们看了一些高阶函数。在某些情况下，我们使用这些高阶函数将相当复杂的函数应用于数据集合。在其他情况下，我们将简单的函数应用于数据集合。
- en: 'Indeed, in many cases, we wrote tiny `lambda` objects to apply a single Python
    operator to a function. For example, we can use the following to define a `prod()`
    function:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在许多情况下，我们编写了微小的`lambda`对象来将单个Python运算符应用于函数。例如，我们可以使用以下内容来定义`prod()`函数：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The use of the `lambda x,y: x*y` parameter seems a bit wordy for multiplication.
    After all, we just want to use the multiplication operator, `*`. Can we simplify
    the syntax? The answer is yes; the `operator` module provides us with definitions
    of the built-in operators.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '使用`lambda x,y: x*y`参数似乎有点冗长，用于乘法。毕竟，我们只想使用乘法运算符`*`。我们能简化语法吗？答案是肯定的；`operator`模块为我们提供了内置运算符的定义。'
- en: There are a number of features of the `operator` module that lead to some simplification
    and potential clarification to create higher-order functions. While important
    conceptually, the `operator` module isn't as interesting as it initially appears.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`operator`模块的一些特性导致了一些简化和潜在的澄清，以创建高阶函数。尽管在概念上很重要，但`operator`模块并不像最初看起来那么有趣。'
- en: Evaluating conditional expressions
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估条件表达式
- en: Python imposes relatively strict ordering on expressions; the notable exceptions
    are the short-circuit operators, `and` and `or`. It imposes very strict ordering
    on statement evaluation. This makes it challenging to find different ways to avoid
    this strict evaluation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python对表达式施加了相对严格的顺序；显著的例外是短路运算符`and`和`or`。它对语句评估施加了非常严格的顺序。这使得寻找避免这种严格评估的不同方式变得具有挑战性。
- en: It turns out that evaluating condition expressions is one way in which we can
    experiment with non-strict ordering of statements. We'll examine some ways to
    refactor the `if` and `else` statements to explore this aspect of non-strict evaluation
    in Python.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，评估条件表达式是我们可以尝试非严格顺序语句的一种方式。我们将研究一些重构`if`和`else`语句的方法，以探索Python中这种非严格评估的方面。
- en: The Python `if`, `elif`, and `else` statements are evaluated in a strict order
    from first to last. Ideally, a language might relax this rule so that an optimizing
    compiler can find a faster order for evaluating the conditional expressions. The
    idea is for us to write the expressions in an order that makes sense to a reader,
    even if the actual evaluation order is non-strict.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`if`、`elif`和`else`语句是按从头到尾的严格顺序进行评估的。理想情况下，一种语言可能会放松这个规则，以便优化编译器可以找到更快的顺序来评估条件表达式。这个想法是让我们按照读者理解的顺序编写表达式，即使实际的评估顺序是非严格的。
- en: Lacking an optimizing compiler, this concept is a bit of a stretch for Python.
    Nonetheless, we do have alternative ways to express conditions that involve the
    evaluation of functions instead of the execution of imperative statements. This
    can allow you to make some rearrangement at runtime.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 缺乏优化编译器，这个概念对Python来说有点牵强。尽管如此，我们确实有替代的方式来表达涉及函数评估而不是执行命令式语句的条件。这可以让您在运行时进行一些重新排列。
- en: 'Python does have a conditional `if` and `else` expression. This expression
    form can be used when there''s a single condition. When we have multiple conditions,
    however, it can get awkwardly complex: we''d have to carefully nest the subexpressions.
    We might wind up with a command, as follows, which is rather difficult to comprehend:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python确实有条件`if`和`else`表达式。当只有一个条件时，可以使用这种表达式形式。然而，当有多个条件时，可能会变得非常复杂：我们必须小心地嵌套子表达式。我们可能最终会得到一个命令，如下所示，这是相当难以理解的：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can use dictionary keys and the `lambda` objects to create a very complex
    set of conditions. Here''s a way to express the factorial function as expressions:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用字典键和`lambda`对象来创建一组非常复杂的条件。以下是一种表达阶乘函数的方法：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This rewrites the conventional `if`, `elif`, `elif`, and `else` sequence of
    statements into a single expression. We've decomposed it into two steps to make
    what's happening slightly clearer.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这将传统的`if`、`elif`、`elif`和`else`语句序列重写为单个表达式。我们将其分解为两个步骤，以使发生的事情稍微清晰一些。
- en: 'In the first step, we''ll evaluate the various conditions. One of the given
    conditions will evaluate to `True`, the others should all evaluate to `False`.
    The resulting dictionary will have two items in it: a `True` key with a `lambda`
    object and a `False` key with a `lambda` object. We''ll select the `True` item
    and assign it to the `f` variable.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们将评估各种条件。给定条件中的一个将评估为`True`，其他条件应该都评估为`False`。生成的字典中将有两个项目：一个具有`True`键和一个`lambda`对象，另一个具有`False`键和一个`lambda`对象。我们将选择`True`项目并将其分配给变量`f`。
- en: We used lambdas as the values in this mapping so that the value expressions
    aren't evaluated when the dictionary is built. We want to evaluate just one of
    the value expressions. The `return` statement evaluates the one expression associated
    with the `True` condition.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在此映射中使用lambda作为值，以便在构建字典时不评估值表达式。我们只想评估一个值表达式。`return`语句评估与`True`条件相关联的一个表达式。
- en: Exploiting non-strict dictionary rules
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用非严格的字典规则
- en: A dictionary's keys have no order. If we try to create a dictionary with multiple
    items that share a common key value, we'll only have one item in the resulting
    `dict` object. It's not clear which of the duplicated key values will be preserved,
    and it shouldn't matter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 字典的键没有顺序。如果我们尝试创建一个具有共同键值的多个项目的字典，那么在生成的`dict`对象中只会有一个项目。不清楚哪个重复的键值将被保留，也不重要。
- en: 'Here''s a situation where we explicitly don''t care which of the duplicated
    keys is preserved. We''ll look at a degenerate case of the `max()` function, it
    simply picks the largest of two values:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个明确不关心哪个重复键被保留的情况。我们将看一个`max()`函数的退化情况，它只是选择两个值中的最大值：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the case where `a == b`, both items in the dictionary will have a key of
    the `True` condition. Only one of the two will actually be preserved. Since the
    answer is the same, it doesn't matter which is kept and which is treated as a
    duplicate and overwritten.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在`a == b`的情况下，字典中的两个项目都将具有`True`条件的键。实际上只有两者中的一个会被保留。由于答案是相同的，保留哪个并将哪个视为重复并覆盖并不重要。
- en: Filtering true conditional expressions
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤真条件表达式
- en: We have a number of ways of determining which expression is `True`. In the previous
    example, we loaded the keys into a dictionary. Because of the way the dictionary
    is loaded, only one value will be preserved with a key of `True`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有多种方法来确定哪个表达式是`True`。在前面的示例中，我们将键加载到字典中。由于字典的加载方式，只有一个值将保留具有`True`键的值。
- en: 'Here''s another variation to this theme, written using the `filter()` function:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用`filter()`函数编写的这个主题的另一个变体：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We defined the alternatives as a sequence of `condition` and `function` pairs.
    When we apply the `filter()` function using the `itemgetter(0)` parameter, we'll
    select those pairs with a `True` condition. Of those which are `True`, we'll select
    the first item in the iterable created by the `filter()` function. The selected
    condition is assigned to the `c` variable, the selected function is assigned to
    the `f` variable. We can ignore the condition (it will be `True`), and we can
    evaluate the `filter()` function.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将替代方案定义为`condition`和`function`对的序列。当我们使用`filter()`函数并使用`itemgetter(0)`参数时，我们将选择那些具有`True`条件的对。在那些`True`的对中，我们将选择`filter()`函数创建的可迭代对象中的第一个项目。所选条件分配给变量`c`，所选函数分配给变量`f`。我们可以忽略条件（它将是`True`），并且可以评估`filter()`函数。
- en: As with the previous example, we used lambdas to defer evaluation of the functions
    until after the conditions have been evaluated.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的示例一样，我们使用lambda来推迟对函数的评估，直到条件被评估之后。
- en: 'This `semifact()` function is also called **double factorial**. The definition
    of the semifactorial is similar to the definition of factorial. The important
    difference is that it is the product of alternate numbers instead of all numbers.
    For example, take a look at the following formulas:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`semifact()`函数也被称为**双阶乘**。半阶乘的定义类似于阶乘的定义。重要的区别是它是交替数字的乘积而不是所有数字的乘积。例如，看一下以下公式：
- en: '![Filtering true conditional expressions](graphics/B03652_13_01.jpg) , and
    ![Filtering true conditional expressions](graphics/B03652_13_02.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![过滤真条件表达式](graphics/B03652_13_01.jpg)和![过滤真条件表达式](graphics/B03652_13_02.jpg)'
- en: Using the operator module instead of lambdas
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`operator`模块而不是lambda
- en: 'When using the `max()`, `min()`, and `sorted()` functions, we have an optional
    `key=` parameter. The function provided as an argument value modifies the behavior
    of the higher-order function. In many cases, we used simple lambda forms to pick
    items from a tuple. Here are two examples we heavily relied on:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`max()`、`min()`和`sorted()`函数时，我们有一个可选的`key=`参数。作为参数值提供的函数修改了高阶函数的行为。在许多情况下，我们使用简单的lambda形式来从元组中选择项目。以下是我们严重依赖的两个示例：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: These match built-in functions in other functional programming languages.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些与其他函数式编程语言中的内置函数相匹配。
- en: We don't really need to write these functions. There's a version available in
    the `operator` module which describes these functions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上不需要编写这些函数。`operator`模块中有一个版本描述了这些函数。
- en: 'Here''s some sample data we can work with:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些我们可以使用的示例数据：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is the annual cheese consumption. We used this example in [Chapter 2](ch02.html
    "Chapter 2. Introducing Some Functional Features"), *Introducing Some Functional
    Features* and [Chapter 9](ch09.html "Chapter 9. More Itertools Techniques"), *More
    Itertools Techniques*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是年度奶酪消费量。我们在[第2章](ch02.html "第2章。介绍一些功能特性")和[第9章](ch09.html "第9章。更多的迭代工具技术")中使用了这个示例，*介绍一些功能特性*和*更多的迭代工具技术*。
- en: 'We can locate the data point with minimal cheese using the following commands:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令找到具有最小奶酪的数据点：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `operator` module gives us an alternative to pick particular elements from
    a tuple. This saves us from using a `lambda` variable to pick the second item.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`operator`模块为我们提供了从元组中选择特定元素的替代方法。这样可以避免使用`lambda`变量来选择第二个项目。'
- en: 'Instead of defining our own `fst()` and `snd()` functions, we can use the `itemgetter(0)`
    and the `itemgetter(1)` parameters, as shown in the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`itemgetter(0)`和`itemgetter(1)`参数，而不是定义自己的`fst()`和`snd()`函数，如下所示：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `itemgetter()` function relies on the special method, `__getitem__()`, to
    pick items out of a tuple (or list) based on their index position.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`itemgetter()`函数依赖于特殊方法`__getitem__()`，根据它们的索引位置从元组（或列表）中挑选项目。'
- en: Getting named attributes when using higher-order functions
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在使用高阶函数时获取命名属性
- en: 'Let''s look at a slightly different collection of data. Let''s say we were
    working with namedtuples instead of anonymous tuples. We have two ways to locate
    the range of cheese consumption shown as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下稍微不同的数据集合。假设我们使用的是命名元组而不是匿名元组。我们有两种方法来定位奶酪消耗量的范围，如下所示：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can use lambda forms or we can use the `attrgetter()` function, as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用lambda形式，也可以使用`attrgetter()`函数，如下所示：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: What's important here is that with a `lambda` object, the attribute name is
    expressed as a token in the code. With the `attrgetter()` function, the attribute
    name is a character string. This could be a parameter, which allows us to be considerably
    flexible.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这里重要的是，使用`lambda`对象时，属性名称在代码中表示为一个标记。而使用`attrgetter()`函数时，属性名称是一个字符串。这可以是一个参数，这使我们可以相当灵活。
- en: Starmapping with operators
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用运算符的星形映射
- en: 'The `itertools.starmap()` function can be applied to an operator and a sequence
    of pairs of values. Here''s an example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`itertools.starmap()`函数可以应用于运算符和一系列值对。这里有一个例子：'
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `itertools.zip_longest()` function will create a sequence of pairs such
    as the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`itertools.zip_longest()`函数将创建一对序列，如下所示：'
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'It does this because we provided two sequences: the `[]` brackets and the `range(4)`
    parameter. The `fillvalue` parameter will be used when the shorter sequence runs
    out of data.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 它之所以这样做，是因为我们提供了两个序列：`[]`括号和`range(4)`参数。当较短的序列用尽数据时，`fillvalue`参数将被使用。
- en: When we use the `starmap()` function, each pair becomes the argument to the
    given function. In this case, we provided the `operator.pow()` function, which
    is the `**` operator. We've calculated values for `[60**0, 60**1, 60**2, 60**3]`.
    The value of the `d` variable is `[1, 60, 3600, 216000]`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`starmap()`函数时，每对都成为给定函数的参数。在这种情况下，我们提供了`operator.pow()`函数，即`**`运算符。我们计算了`[60**0,
    60**1, 60**2, 60**3]`的值。变量`d`的值是`[1, 60, 3600, 216000]`。
- en: The `starmap()` function is useful when we have a sequence of tuples. We have
    a tidy equivalence between the `map(f, x, y)` and `starmap(f, zip(x,y))` functions.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`starmap()`函数在我们有一系列元组时非常有用。`map(f, x, y)`和`starmap(f, zip(x,y))`函数之间有一个整洁的等价关系。'
- en: 'Here''s a continuation of the preceding example of the `itertools.starmap()`
    function:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`itertools.starmap()`函数的前面例子的延续：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We've zipped together two sequences of four values. We used the `starmap()`
    function with the `operator.truediv()` function, which is the `/` operator. This
    will compute a sequence of fractions that we sum. The sum is really an approximation
    of ![Starmapping with operators](graphics/B03652_13_03.jpg)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将两个四个值的序列压缩在一起。我们使用了`starmap()`函数和`operator.truediv()`函数，即`/`运算符。这将计算出一个我们求和的分数序列。总和实际上是![Starmapping
    with operators](graphics/B03652_13_03.jpg)的近似值。
- en: 'Here''s a simpler version that uses the `map(f, x, y)` function instead of
    the `starmap(f, zip(x,y))` function:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更简单的版本，它使用`map(f, x, y)`函数，而不是`starmap(f, zip(x,y))`函数：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this example, we effectively converted a base `60` fractional value to base
    `10`. The sequence of values in the `d` variable are the appropriate denominators.
    A technique similar to the one explained earlier in this section can be used to
    convert other bases.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有效地将一个基数为`60`的分数值转换为基数为`10`。变量`d`中的值是适当的分母。可以使用类似本节前面解释的技术来转换其他基数。
- en: Some approximations involve potentially infinite sums (or products). These can
    be evaluated using similar techniques explained previously in this section. We
    can leverage the `count()` function in the `itertools` module to generate an arbitrary
    number of terms in an approximation. We can then use the `takewhile()` function
    to only use values that contribute a useful level of precision to the answer.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一些近似涉及潜在无限的和（或积）。可以使用本节前面解释的类似技术来评估这些近似。我们可以利用`itertools`模块中的`count()`函数来生成近似中任意数量的项。然后我们可以使用`takewhile()`函数，只使用对答案有用精度水平的值。
- en: 'Here''s an example of a potentially infinite sequence:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个潜在无限序列的例子：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `num` variable is a potentially infinite sequence of numerators, based on
    a factorial function. The `den` variable is a potentially infinite sequence of
    denominators, based on the semifactorial (sometimes called the double factorial)
    function.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`num`变量是一个基于阶乘函数的潜在无限序列的分子。`den`变量是一个基于半阶乘（有时称为双阶乘）函数的潜在无限序列的分母。'
- en: To create terms, we used the `map()` function to apply the `operators.truediv()`
    function, the `/` operator, to each pair of values. We wrapped this in a `takewhile()`
    function so that we only take values while the fraction is greater than some relatively
    small value; in this case, ![Starmapping with operators](graphics/B03652_13_05.jpg).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建项，我们使用`map()`函数将`operators.truediv()`函数（即`/`运算符）应用于每对值。我们将其包装在`takewhile()`函数中，这样我们只取值，而分数大于某个相对较小的值；在这种情况下，![Starmapping
    with operators](graphics/B03652_13_05.jpg)。
- en: This is a series expansion based on 4 arctan(1)=![Starmapping with operators](graphics/B03652_13_03.jpg).
    The expansion is ![Starmapping with operators](graphics/B03652_13_04.jpg)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是基于4 arctan(1)=![Starmapping with operators](graphics/B03652_13_03.jpg)的级数展开。展开式是![Starmapping
    with operators](graphics/B03652_13_04.jpg)
- en: An interesting variation to the series expansion theme is to replace the `operator.truediv()`
    function with the `fractions.Fraction()` function. This will create exact rational
    values that don't suffer from the limitations of floating-point approximations.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 系列展开主题的一个有趣变化是用`fractions.Fraction()`函数替换`operator.truediv()`函数。这将创建精确的有理值，不会受到浮点近似的限制。
- en: All of the Python operators are available in the `operators` module. This includes
    all of the bit-fiddling operators as well as the comparison operators. In some
    cases, a generator expression may be more succinct or expressive than a rather
    complex-looking `starmap()` function with a function that represents an operator.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`operators`模块中包含所有Python运算符。这包括所有位操作运算符以及比较运算符。在某些情况下，生成器表达式可能比看起来相当复杂的`starmap()`函数与表示运算符的函数更简洁或更表达。'
- en: 'The issue is that the `operator` module provides only a single operator, essentially
    a shorthand for `lambda`. We can use the `operator.add` method instead of the
    `add=lambda a,b: a+b` method. If we have more complex expressions, then the `lambda`
    object is the only way to write them.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '问题在于`operator`模块只提供了一个运算符，基本上是`lambda`的简写。我们可以使用`operator.add`方法代替`add=lambda
    a,b: a+b`方法。如果我们有更复杂的表达式，那么`lambda`对象是编写它们的唯一方法。'
- en: Reducing with operators
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用运算符进行缩减
- en: 'We''ll look at one more way that we might try to use the operator definitions.
    We can use them with the built-in `functools.reduce()` function. The `sum()` function,
    for example, can be defined as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一种我们可能尝试使用运算符定义的方式。我们可以将它们与内置的`functools.reduce()`函数一起使用。例如，`sum()`函数可以定义如下：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We created a partially evaluated version of the `reduce()` function with the
    first argument supplied. In this case, it's the `+` operator, implemented via
    the `operator.add()` function.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个部分求值版本的`reduce()`函数，并提供了第一个参数。在这种情况下，它是`+`运算符，通过`operator.add()`函数实现。
- en: 'If we have a requirement for a similar function that computes a product, we
    can define it like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要一个类似的计算乘积的函数，我们可以这样定义：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This follows the pattern shown in the preceding example. We have a partially
    evaluated `reduce()` function with the first argument of `*` operator, as implemented
    by the `operator.mul()` function.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这遵循了前面示例中所示的模式。我们有一个部分求值的`reduce()`函数，第一个参数是`*`运算符，由`operator.mul()`函数实现。
- en: It's not clear whether we can do similar things with too many of the other operators.
    We might be able to find a use for the `operator.concat()` function as well as
    the `operator.and()` and `operator.or()` functions.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 目前尚不清楚我们是否可以对其他运算符进行类似的操作。我们可能也能够找到`operator.concat()`函数以及`operator.and()`和`operator.or()`函数的用途。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `and()` and `or()` functions are the bit-wise `&` and `/` operators. If
    we want the proper Boolean operators, we have to use the `all()` and `any()` functions
    instead of the `reduce()` function.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`and()`和`or()`函数是位运算符`&`和`/`。如果我们想要正确的布尔运算符，我们必须使用`all()`和`any()`函数，而不是`reduce()`函数。'
- en: 'Once we have a `prod()` function, this means that the factorial can be defined
    as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了`prod()`函数，这意味着阶乘可以定义如下：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This has the advantage of being succinct: it provides a single line definition
    of factorial. It also has the advantage of not relying on recursion but has the
    potential of running afoul Python''s stack limit.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这有一个简洁的优势：它提供了一个阶乘的单行定义。它还有一个优势，不依赖于递归，但有可能触发Python的堆栈限制。
- en: It's not clear that this has any dramatic advantages over the many alternatives
    we have in Python. The concept of building a complex function from primitive pieces
    like the `partial()` and `reduce()` functions, and the `operator` module is very
    elegant. In most cases, though, the simple functions in the `operator` module
    aren't very helpful; we'll almost always want to use more complex lambdas.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 目前尚不清楚这是否比我们在Python中拥有的许多替代方案具有明显优势。从原始部分构建复杂函数的概念，如`partial()`和`reduce()`函数以及`operator`模块非常优雅。然而，在大多数情况下，`operator`模块中的简单函数并不是很有用；我们几乎总是希望使用更复杂的lambda。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at alternatives to the `if`, `elif`, and `else` statement
    sequence. Ideally, using a conditional expression allows some optimization to
    be done. Pragmatically, Python doesn't optimize, so there's little tangible benefit
    to the more exotic ways to handle conditions.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了替代`if`、`elif`和`else`语句序列的方法。理想情况下，使用条件表达式可以进行一些优化。从实用的角度来看，Python并不进行优化，因此处理条件的更奇特方式几乎没有实质性的好处。
- en: We also looked at how we can use the `operator` module with higher order functions
    like `max()`, `min()`, `sorted()`, and `reduce()`. Using operators can save us
    from having to create a number of small lambdas.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看了如何使用`operator`模块与`max()`、`min()`、`sorted()`和`reduce()`等高阶函数。使用运算符可以避免我们创建许多小的lambda函数。
- en: In the next chapter, we'll look at the `PyMonad` library to express a functional
    programming concept directly in Python. We don't require monads generally because
    Python is an imperative programming language under the hood.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究`PyMonad`库，直接在Python中表达函数式编程概念。通常情况下，我们不需要单子，因为Python在底层是一种命令式编程语言。
- en: Some algorithms might be expressed more clearly with monads than with stateful
    variable assignments. We'll look at an example where monads lead to a succinct
    expression of a rather complex set of rules. Most importantly, the `operator`
    module shows off many functional programming techniques.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一些算法可能通过单子比通过有状态的变量赋值更清晰地表达。我们将看一个例子，其中单子导致对一组相当复杂的规则进行简洁的表达。最重要的是，`operator`模块展示了许多函数式编程技术。
