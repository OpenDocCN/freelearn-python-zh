- en: Chapter 6. Building an Interactive Crime Map
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。构建交互式犯罪地图
- en: Our first project notably lacked any sort of long term memory. Although we worked
    around the issues using cookies to simulate long-term storage, we also saw the
    limitations of these. In this project, we'll build an interactive crime map that
    allows users to tag locations with details of witnessed or experienced criminal
    activities. As we want to keep the data for the long term and make it available
    to many users, we cannot rely on our users' local and temporary storage.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个项目明显缺乏任何形式的长期存储。虽然我们通过使用cookie来模拟长期存储来解决问题，但我们也看到了这些方法的局限性。在这个项目中，我们将构建一个交互式犯罪地图，允许用户标记见证或经历的犯罪活动的位置细节。由于我们希望长期保留数据并使其对许多用户可用，我们不能依赖于用户的本地和临时存储。
- en: Therefore, the first step to our project will be setting up a MySQL database
    on our VPS and linking this to a new Flask web application. We'll use the Google
    Maps API to allow users to view our map and add new markers to it (in which each
    marker represents a crime).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们项目的第一步将是在我们的VPS上设置一个MySQL数据库，并将其与一个新的Flask Web应用程序进行链接。我们将使用Google Maps
    API允许用户查看我们的地图并向其添加新的标记（其中每个标记代表一种犯罪）。
- en: We'll also have some more advanced user input than in our previous project,
    allowing users to filter their view of the map and add fairly complex data to
    the map. Therefore, we'll have a stronger focus on input validation and sanitization.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新项目将具有比我们以前的项目更高级的用户输入，允许用户过滤他们对地图的视图，并向地图添加相当复杂的数据。因此，我们将更加关注输入验证和净化。
- en: Our goal for the project is a web page containing an interactive map. The user
    should be able to submit new crimes by choosing a location for the map and entering
    a date, category, and description of the crime. The user should also be able to
    view all the previously recorded crimes as icons on the map and more details about
    any specific crime by selecting the relevant icon from the map. The point of the
    map is to be able to easily view areas with high crime rates as well as to assist
    investigators in detecting patterns and trends in crime.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们项目的目标是创建一个包含交互地图的网页。用户应该能够通过选择地图上的位置并输入犯罪的日期、类别和描述来提交新的犯罪。用户还应该能够查看地图上以图标形式记录的所有先前记录的犯罪，并通过选择地图上相关图标来查看任何特定犯罪的更多细节。地图的目的是能够轻松查看犯罪率高的地区，以及帮助调查人员发现犯罪的模式和趋势。
- en: A substantial chunk of this chapter is devoted to setting up a MySQL database
    on our VPS and creating a database for the crime data. This will be followed by
    us setting up a basic page containing a map and text box. We'll see how to link
    Flask to MySQL by storing data entered into the text box in our database.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的相当大一部分内容都是关于在我们的VPS上设置MySQL数据库并为犯罪数据创建数据库。接下来我们将设置一个包含地图和文本框的基本页面。我们将看到如何通过将输入到文本框中的数据存储到我们的数据库中，将Flask与MySQL进行链接。
- en: As in the previous project, we'll avoid the frameworks and automation tools
    that we'd almost certainly use in a "real-world" project. As we will focus on
    learning, a lower level of abstraction is useful. Therefore, we won't be using
    **Object-relational Mapping** (**ORM**) for our database queries or a JavaScript
    framework for user input and interaction. This means that there will be some laborious
    writing of SQL and vanilla JavaScript, but it's important to fully understand
    why the tools and frameworks exist and what problems they solve, before diving
    in and using them blindly.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一个项目一样，我们将避免在“现实世界”项目中几乎肯定会使用的框架和自动化工具。由于我们将专注于学习，较低级别的抽象是有用的。因此，我们不会为我们的数据库查询使用对象关系映射（ORM），也不会为用户输入和交互使用JavaScript框架。这意味着会有一些繁琐的SQL和纯JavaScript编写，但在盲目使用这些工具和框架之前，充分理解它们存在的原因以及它们解决的问题是非常重要的。
- en: 'In this chapter, we''ll cover:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Setting up a new Git repository
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置一个新的Git存储库
- en: Understanding relational databases
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解关系数据库
- en: Installing and configuring MySQL on our VPS
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的VPS上安装和配置MySQL
- en: Creating our Crime Map database in MySQL
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL中创建我们的犯罪地图数据库
- en: Creating a basic database web application
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个基本的数据库Web应用程序
- en: Setting up a new Git repository
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置一个新的Git存储库
- en: 'We''ll create a new Git repository for our new code base as, although some
    of the setup will be similar, our new project should be completely unrelated to
    our first one. If you need more help with this step, head back to [Chapter 1](ch01.html
    "Chapter 1. Hello, World!"), *Hello, World!*, and follow the detailed instructions
    in the *Installing and using Git* section. If you feel confident, check whether
    you can do this just with the following summary:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们的新代码库创建一个新的Git存储库，因为尽管一些设置将是相似的，但我们的新项目应该与我们的第一个项目完全无关。如果您需要更多关于此步骤的帮助，请返回到[第1章](ch01.html
    "第1章。你好，世界！")，“你好，世界！”并按照“安装和使用Git”部分中的详细说明进行操作。如果您感到自信，请检查您是否可以仅使用以下摘要完成此操作：
- en: Head over to the website for Bitbucket, GitHub, or whichever hosting platform
    you used for the first project. Log in and create a new repository
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前往Bitbucket、GitHub或您用于第一个项目的任何托管平台的网站。登录并创建一个新的存储库
- en: Name your repository `crimemap` and take note of the URL you're given
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的存储库命名为`crimemap`并记下您收到的URL
- en: 'On your local machine, fire up a terminal and run the following commands:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的本地计算机上，打开终端并运行以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We'll leave this repository empty for now as we need to set up a database on
    our VPS. Once we have the database installed, we'll come back here to set up our
    Flask project.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将暂时将此存储库保留为空，因为我们需要在我们的VPS上设置一个数据库。一旦我们安装了数据库，我们将回到这里设置我们的Flask项目。
- en: Understanding relational databases
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解关系数据库
- en: 'In its simplest form, a relational database management system, such as MySQL,
    is a glorified spreadsheet program, such as Microsoft Excel. We use it to store
    data in rows and columns. Every row is a "*thing*" and every column is a specific
    piece of information about the "*thing"* in the relevant row. I put "*thing*"
    in inverted commas because we''re not limited to storing objects. In fact, the
    most common example of a thing, both in the real world and in explaining databases,
    is data about people. A basic database storing information about customers of
    an e-commerce website could look something similar to the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在其最简单的形式中，关系数据库管理系统，如MySQL，就是一个类似于Microsoft Excel的高级电子表格程序。我们用它来以行和列的形式存储数据。每一行都是一个“*thing*”，每一列都是有关相关行中“*thing*”的特定信息。我在“*thing*”中加了引号，因为我们不仅仅局限于存储对象。事实上，在现实世界和解释数据库中，关于人的数据是最常见的“*thing*”。一个关于电子商务网站客户信息的基本数据库可能看起来类似于以下内容：
- en: '| ID | First name | Surname | E-mail address | Telephone |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| ID | 名 | 姓 | 电子邮件地址 | 电话 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| 1 | Frodo | Baggins | `fbaggins@example.com` | +1 111 111 1111 |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 弗罗多 | 巴金斯 | `fbaggins@example.com` | +1 111 111 1111 |'
- en: '| 2 | Bilbo | Baggins | `bbaggins@example.com` | +1 111 111 1010 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 比尔博 | 巴金斯 | `bbaggins@example.com` | +1 111 111 1010 |'
- en: '| 3 | Samwise | Gamgee | `sgamgee@example.com` | +1 111 111 1001 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 山姆怀斯 | 甘吉 | `sgamgee@example.com` | +1 111 111 1001 |'
- en: If we look from the left to the right in a single row, we will get all the information
    about one person. If we look in a single column from the top to the bottom, we
    will get one piece of information (for example, an e-mail address) for everyone.
    Both can be useful; if we want to add a new person or contact a specific person,
    we will probably be interested in a specific row. If we want to send a newsletter
    to all our customers, we will just be interested in the e-mail column.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从左到右查看单行，我们将得到有关一个人的所有信息。如果我们从上到下查看单列，我们将得到每个人的一条信息（例如，电子邮件地址）。这两种方式都很有用；如果我们想要添加一个新的人或联系特定的人，我们可能会对特定行感兴趣。如果我们想向所有客户发送通讯，我们只对电子邮件列感兴趣。
- en: So, why can't we just use spreadsheets instead of databases then? Well, if we
    take the example of an e-commerce store further, we will quickly see the limitations.
    If we want to store a list of all the items we have on offer, we can create another
    table similar to the preceding with columns such as `Item name`, `Description`,
    `Price`, and `Quantity in stock`. Our model continues to be useful; however, now,
    if we want to store a list of all the items Frodo has ever purchased, there's
    no good place to put the data. We could add 1,000 columns to our customer table
    (as seen earlier), such as `Purchase 1`, `Purchase 2`, and so on until `Purchase
    1000`, and hope that Frodo never buys more than 1,000 items. This is neither scalable
    nor easy to work with. How do we get the description for the item Frodo purchased
    last Tuesday? Do we just store the `name` item in our new column? What happens
    with items that don't have unique names?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么我们不能只使用电子表格而不是数据库呢？嗯，如果我们进一步考虑电子商务店的例子，我们很快就会看到限制。如果我们想要存储我们提供的所有物品的清单，我们可以创建另一个类似于前面的表，其中包含`Item
    name`、`Description`、`Price`和`Quantity in stock`等列。我们的模型仍然很有用；然而，现在，如果我们想要存储弗罗多曾经购买的所有物品的清单，就没有一个合适的地方来存放这些数据。我们可以在我们的客户表中添加1000列（如前所示），比如`Purchase
    1`、`Purchase 2`，一直到`Purchase 1000`，并希望弗罗多永远不会购买超过1000件物品。这既不可扩展，也不容易处理。我们如何获取弗罗多上周二购买的物品的描述？我们只是将`name`项存储在我们的新列中吗？那些没有唯一名称的物品会发生什么？
- en: Soon, we will realize that we need to think about it backwards. Instead of storing
    the items purchased by a person in the `Customers` table, we need to create a
    new table called `Orders`, and store a reference to the customer in every order.
    Thus, an order "knows" which customer it belongs to, but a customer has no inherent
    knowledge of which orders belong to him/her.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 很快，我们会意识到我们需要反向思考。我们需要创建一个名为`Orders`的新表，将每个订单中购买的物品存储在`Customers`表中，同时在每个订单中存储对客户的引用。因此，一个订单“知道”它属于哪个客户，但客户本身并不知道属于他/她的订单。
- en: While our model still fits into a spreadsheet at a push, as we grow our data
    model and size, our spreadsheet becomes more cumbersome. We need to do complicated
    queries, such as "I want to see all items that are in stock, have been ordered
    at least once in the last six months, and cost more than $10".
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们的模型仍然可以勉强放入电子表格中，但随着我们的数据模型和规模的增长，我们的电子表格变得更加繁琐。我们需要进行复杂的查询，比如“我想看到所有库存中的物品，过去六个月至少被订购一次，并且价格超过10美元的物品”。
- en: Enter **Relational Database Management Systems** (**RDBMS**). They've been around
    for decades and are a tried-and-tested way of solving a common problem (such as
    storing data with complicated relations in an organized and accessible manner).
    We won't touch on their full capabilities in our Crime Map (in fact, we could
    probably store our data in a text file if we needed to), but if you're interested
    in building web applications, you will need a database at some point. So, let's
    start small and add the powerful MySQL tool to our growing toolbox.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 进入**关系数据库管理系统**（**RDBMS**）。它们已经存在了几十年，是一种经过验证的解决常见问题的方法（例如以有组织和可访问的方式存储具有复杂关系的数据）。我们不会在我们的犯罪地图中涉及它们的全部功能（事实上，如果需要，我们可能可以将我们的数据存储在文本文件中），但如果你有兴趣构建Web应用程序，你将在某个时候需要一个数据库。因此，让我们从小处着手，将强大的MySQL工具添加到我们不断增长的工具箱中。
- en: I highly recommend that you learn more about databases! If the you experience
    in building our current project takes your fancy, go read and learn about databases.
    The history of RDBMS is interesting, and the complexities and subtleties of normalization
    and database varieties (including NoSQL databases, which we'll see some of in
    our next project) deserve more study time than we can devote to them in a book
    that focuses on Python web development.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议您了解更多关于数据库的知识！如果您对构建我们当前项目的经验感兴趣，那就去阅读和学习关于数据库的知识吧。关系数据库管理系统的历史很有趣，而规范化和数据库种类的复杂性和微妙性（包括我们下一个项目中将会看到的NoSQL数据库）值得更多的学习时间，而这本书专注于Python
    web开发，我们无法花太多时间在这方面。
- en: Installing and configuring MySQL on our VPS
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的VPS上安装和配置MySQL
- en: Installing and configuring MySQL is an extremely common task. You can, therefore,
    find it in prebuilt images or in scripts that build entire *stacks* for you. A
    common stack is called the **LAMP stack**, which stands for **Linux**, **Apache**,
    **MySQL**, and **PHP**, and many VPS providers provide a one-click LAMP stack
    image.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和配置MySQL是一个非常常见的任务。因此，您可以在预构建的镜像或为您构建整个*stacks*的脚本中找到它。一个常见的stack被称为**LAMP
    stack**，代表**Linux**，**Apache**，**MySQL**和**PHP**，许多VPS提供商提供一键式的LAMP stack镜像。
- en: As we will use Linux and have already installed Apache manually, after installing
    MySQL, we'll be very close to the traditional LAMP stack; we will just use the
    P for Python instead of PHP. In keeping with our goal of "education first", we'll
    install MySQL manually, and configure it through the command line instead of installing
    a GUI control panel. If you've used MySQL before, feel free to set it up as you
    see fit.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用Linux并且已经手动安装了Apache，在安装MySQL后，我们将非常接近传统的LAMP stack；我们只是使用P代替PHP。为了符合我们“教育第一”的目标，我们将手动安装MySQL，并通过命令行进行配置，而不是安装GUI控制面板。如果您以前使用过MySQL，请随意按照您的意愿进行设置。
- en: '**MySQL and Git**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL和Git
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Keep in mind that neither our setup of MySQL nor the data we store in it is
    part of our Git repository. Be careful as any mistakes made at a database level,
    including misconfiguration or deleting data, will be harder to undo.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们的MySQL设置和我们存储在其中的数据都不是我们Git存储库的一部分。任何在数据库级别上的错误，包括错误配置或删除数据，都将更难以撤消。
- en: Installing MySQL on our VPS
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在我们的VPS上安装MySQL
- en: 'Installing MySQL on our server is quite straightforward. SSH into your VPS
    and run the following commands:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的服务器上安装MySQL非常简单。通过SSH登录到您的VPS并运行以下命令：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see an interface prompting you for a root password for MySQL. Enter
    a password and repeat it where prompted. Once the installation is complete, you
    can get a live SQL shell by typing the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个界面提示您输入MySQL的root密码。在提示时输入密码并重复输入。安装完成后，您可以通过输入以下内容获得一个实时的SQL shell：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Then, enter the password you chose earlier when prompted. We could create a
    database and schema using this shell, but we'd rather do this through Python;
    so, type `quit` and hit the *Enter* key to terminate the MySQL shell if you opened
    it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在提示时输入您之前选择的密码。我们可以使用这个shell创建数据库和模式，但我们宁愿通过Python来做这件事；所以，如果您打开了MySQL shell，请输入`quit`并按下*Enter*键来终止它。
- en: Installing Python drivers for MySQL
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为MySQL安装Python驱动程序
- en: 'As we want to use Python to talk to our database, we need to install another
    package. There are two main MySQL connectors for Python: *PyMySQL* and *MySQLdb*.
    The first is preferable from a simplicity and ease-of-use point of view. It is
    a pure Python library, which means that it has no dependencies. MySQLdb is a C
    extension and therefore has some dependencies, but it is a bit faster in theory.
    They work very similarly once installed. We''ll use PyMySQL in our examples throughout
    this chapter.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们想要使用Python来访问我们的数据库，我们需要安装另一个软件包。Python有两个主要的MySQL连接器：*PyMySQL*和*MySQLdb*。从简单性和易用性的角度来看，第一个更可取。它是一个纯Python库，这意味着它没有依赖性。MySQLdb是一个C扩展，因此有一些依赖性，但理论上它会更快一些。一旦安装，它们的工作方式非常相似。在本章的示例中，我们将使用PyMySQL。
- en: 'To install it, run (while still on your VPS) the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装它，请在您的VPS上运行以下命令：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating our Crime Map database in MySQL
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MySQL中创建我们的犯罪地图数据库
- en: Some knowledge of SQL's syntax will be useful for the rest of this chapter,
    but you should be able to follow either way. The first thing we need to do is
    create a database for our web application. If you're comfortable using a command-line
    editor, you can create the following scripts directly on the VPS as this can make
    them easier to debug and we won't run them locally. However, developing over an
    SSH session is far from ideal; so, I recommend that you write them locally and
    use Git to transfer them to the server before running.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对SQL语法的一些了解将对本章的其余部分有所帮助，但您应该能够跟上。我们需要做的第一件事是为我们的Web应用程序创建一个数据库。如果您习惯使用命令行编辑器，您可以直接在VPS上创建以下脚本，这样可以更容易调试，而且我们不会在本地运行它们。然而，在SSH会话中进行开发远非理想；因此，我建议您在本地编写它们，并使用Git在运行之前将它们传输到服务器上。
- en: This may make debugging a bit frustrating, so be extra careful in writing these
    scripts. If you want, you can get them directly from the code bundle that comes
    with this book. In this case, you simply need to populate the user and password
    fields in the `dbconfig.py` file. correctly, and everything should work.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会使调试有点令人沮丧，因此在编写这些脚本时要特别小心。如果您愿意，您可以直接从本书附带的代码包中获取它们。在这种情况下，您只需要正确填写`dbconfig.py`文件中的用户和密码字段，一切都应该正常工作。
- en: Creating a database setup script
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个数据库设置脚本
- en: 'In the `crimemap` directory in which we initialized our Git repository at the
    beginning of the chapter, create a python file called `db_setup.py` containing
    the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开始时我们初始化Git存储库的`crimemap`目录中，创建一个名为`db_setup.py`的Python文件，其中包含以下代码：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let's take a look at what this code does. First, we imported the `PyMySQL` library
    we just installed. We also imported `dbconfig`, which we'll create locally in
    a bit and populate with the database credentials (we don't want to store these
    in our repository). Then, we will create a connection to our database using `localhost`
    (because our database is installed on the same machine as our code) and the credentials
    that don't exist yet.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这段代码做了什么。首先，我们导入了刚刚安装的`PyMySQL`库。我们还导入了`dbconfig`，稍后我们将在本地创建并填充数据库凭据（我们不希望将这些凭据存储在我们的存储库中）。然后，我们将使用`localhost`（因为我们的数据库安装在与我们的代码相同的机器上）和尚不存在的凭据创建到我们的数据库的连接。
- en: Now that we have connection to our database, we can get a cursor. You can think
    of a cursor a bit like the blinking object in your word processor that indicates
    where text will appear when you start typing. A database cursor is an object that
    points to a place in the database where we want to create, read, update, or delete
    data. Once we start dealing with database operations, there are various exceptions
    that could occur. We'll always want to close our connection to the database, so
    we will create a cursor (and do all the subsequent operations) inside a `try`
    block with `connection.close()` in a `finally` block (the `finally` block will
    get executed whether or not the `try` block succeeds).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经连接到我们的数据库，我们可以获取一个游标。您可以将游标想象成文字处理器中的闪烁对象，指示当您开始输入时文本将出现的位置。数据库游标是一个指向数据库中我们想要创建、读取、更新或删除数据的位置的对象。一旦我们开始处理数据库操作，就会出现各种异常。我们始终希望关闭与数据库的连接，因此我们将在`try`块中创建一个游标（并执行所有后续操作），并在`finally`块中使用`connection.close()`（`finally`块将在`try`块成功与否时执行）。
- en: The cursor is also a resource, so we'll grab one and use it in a `with:` block
    so that it'll automatically be closed when we're done with it. With the setup
    done, we can start executing the SQL code.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 游标也是一个资源，所以我们将获取一个并在`with:`块中使用它，这样当我们完成后它将自动关闭。设置完成后，我们可以开始执行SQL代码。
- en: When we call the `cursor.execute()` function, the SQL code we will pass in will
    be run using the database engine, and the cursor will be populated with results
    if they are appropriate. We'll discuss later how we can read and write data using
    the cursor and the `execute()` function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用`cursor.execute()`函数时，我们将传入的SQL代码将使用数据库引擎运行，并且如果适当的话，游标将被填充结果。我们将在后面讨论如何使用游标和`execute()`函数读取和写入数据。
- en: Creating the database
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建数据库
- en: SQL reads similarly to English, so it's normally quite straightforward to work
    out what the existing SQL code does, even if it's a bit trickier to write new
    code. Our first SQL statement creates a `crimemap` database if it doesn't already
    exist (this means that if we come back to this script, we can leave this line
    in without deleting the entire database every time). We will create our first
    SQL statement as a string and use the `sql` variable to store it. Then, we will
    execute the statement using the cursor we created.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: SQL读起来与英语类似，因此通常很容易弄清楚现有的SQL代码的作用，即使编写新代码可能有点棘手。我们的第一个SQL语句将创建一个`crimemap`数据库（如果尚不存在），这意味着如果我们回到这个脚本，我们可以保留这行而不必每次删除整个数据库。我们将把我们的第一个SQL语句作为一个字符串创建，并使用`sql`变量来存储它。然后，我们将使用我们创建的游标执行该语句。
- en: Looking at our table columns
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看我们的表列
- en: 'Now that we know we have a database, we can create a table. The table will
    store the data for all the crimes that we record, with each crime in a row of
    the table. Therefore, we need several columns. Each column can be seen in our
    `create table` statement along with the type of data that will be stored in this
    column. To break these down, we have:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道我们有一个数据库，我们可以创建一个表。该表将存储我们记录的所有犯罪的数据，每起犯罪在表的一行中。因此，我们需要几列。我们的`create table`语句中可以看到每列以及将存储在该列中的数据类型。为了解释这些，我们有：
- en: '**id**: This is a unique number that''s automatically recorded for every crime
    we have. We don''t need to worry too much about this field as MySQL will automatically
    insert it for us every time we add new crime data—starting at 1 and incrementing
    as required.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**id**：这是一个唯一的数字，对于我们记录的每一起犯罪都会自动记录。我们不需要太担心这个字段，因为MySQL会在我们每次添加新的犯罪数据时自动插入它，从1开始递增。'
- en: '**Latitude and longitude**: These fields will be used to store the location
    of each crime. We will specify `(10, 6)` after the floats which means that each
    float can be up to 10 digits and up to 6 digits can be after the decimal point.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纬度和经度**：这些字段将用于存储每起犯罪的位置。在浮点数后面我们将指定`(10, 6)`，这意味着每个浮点数最多可以有10位数字，小数点后最多可以有6位数字。'
- en: '**Date**: This is the date and time of the crime.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日期**：这是犯罪的日期和时间。'
- en: '**Category**: We will define several categories to classify different types
    of crime. This will help in filtering the crimes later. `VARCHAR(50)` means that
    this will be data of variable length and up to 50 characters long.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类别**：我们将定义几个类别来对不同类型的犯罪进行分类。这将有助于以后过滤犯罪。`VARCHAR(50)`表示这将是可变长度的数据，最长为50个字符。'
- en: '**Description**: This is similar to `Category` but with a maximum of 1000 characters.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：这类似于`类别`，但最多为1000个字符。'
- en: '**Updated_at**: This is another field that we don''t need to worry about. MySQL
    will set this to the current time when we insert the data or edit it. This could
    be useful if we want to, for example, remove a bunch of data that was inserted
    by mistake at a specific time.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Updated_at**：这是另一个我们不需要担心的字段。当我们插入数据或编辑数据时，MySQL会将其设置为当前时间。例如，如果我们想要删除特定时间错误插入的一堆数据，这可能会很有用。'
- en: Indexing and committing
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引和提交
- en: The last line of our `create table` query specifies our `id` column as a *primary
    key*. This means that it'll be indexed (and therefore, we'll be able to find data
    very efficiently if we use it when we query our database), and will have various
    other useful properties, such as enforced existence and uniqueness.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们`create table`查询的最后一行指定了我们的`id`列为*主键*。这意味着它将被索引（因此，如果我们在查询我们的数据库时使用它，我们将能够非常有效地找到数据），并且将具有各种其他有用的属性，比如强制存在和唯一性。
- en: Once we define this more complicated piece of SQL, we will execute it as well
    in the following line. Then, we will commit our changes to the database. Think
    of this as saving our changes; if we close the connection without the commit,
    our changes will be discarded.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了这个更复杂的SQL片段，我们将在下一行执行它。然后，我们将提交我们对数据库的更改。把这看作是保存我们的更改；如果我们在没有提交的情况下关闭连接，我们的更改将被丢弃。
- en: '**SQL Commit**:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL提交**：'
- en: Tip
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Forgetting to commit changes is a common error of SQL beginners. If you get
    to a point where your database doesn't behave as expected and you can't figure
    out why, check whether you forgot a commit somewhere in your code.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 忘记提交更改是SQL初学者的常见错误。如果您到达一个点，您的数据库表现不如预期，并且您无法弄清楚原因，检查一下您的代码中是否忘记了提交。
- en: Using the database setup script
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数据库设置脚本
- en: 'Save our script locally and push it to the repository. Refer to the following
    commands in this sequence:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的脚本保存在本地并推送到存储库。请参考以下命令的顺序：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'SSH to your VPS and clone the new repository to your /var/www directory using
    the following commands:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下命令SSH到您的VPS，并将新存储库克隆到您的/var/www目录：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adding credentials to our setup script
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向我们的设置脚本添加凭据
- en: 'Now, we still don''t have the credentials that our script relies on. We''ll
    do two things before using our setup script:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们仍然没有我们的脚本依赖的凭据。在使用设置脚本之前，我们将做两件事：
- en: Create the `dbconfig.py` file with a database and password
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`dbconfig.py`文件，其中包含数据库和密码
- en: Add this file to `.gitignore` to prevent it from being added to our repository
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将此文件添加到`.gitignore`中，以防止它被添加到我们的存储库中
- en: 'Create and edit the `dbconfig.py` file directly on your VPS using `nano`, as
    follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在您的VPS上直接创建和编辑`dbconfig.py`文件：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, type the following using the password you chose when you installed MySQL:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用您在安装MySQL时选择的密码输入以下内容：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Save it by hitting *Ctrl* + *X* and entering *Y* when prompted.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Ctrl* + *X*保存，并在提示时输入*Y*。
- en: 'Now, use similar `nano` commands to create, edit, and save `.gitignore`, which
    should contain the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用类似的`nano`命令来创建、编辑和保存`.gitignore`，其中应包含以下内容：
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The first line prevents our `dbconfig` file from being added to our Git repository,
    which helps prevent an unauthorized use of our database password. The second line
    prevents compiled Python files from being added to the repository as these are
    simply runtime optimizations and are relevant to our project.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行防止我们的`dbconfig`文件被添加到Git存储库中，这有助于防止未经授权使用我们的数据库密码。第二行防止编译的Python文件被添加到存储库中，因为这些只是运行时优化，并且与我们的项目相关。
- en: Running our database setup script
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行我们的数据库设置脚本
- en: 'With this done, you can run:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您可以运行：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Assuming everything goes smoothly, you should now have a database with a table
    to store crimes. Python will output any SQL errors, allowing you to debug if necessary.
    If you make changes to the script from the server, run the same `git add`, `git
    commit`, and `git push` commands that you did from your local machine.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一切顺利，现在你应该有一个用于存储犯罪的表的数据库。Python将输出任何SQL错误，允许您在必要时进行调试。如果您从服务器对脚本进行更改，请运行与您从本地机器运行的相同的`git
    add`、`git commit`和`git push`命令。
- en: '**git status:**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: git状态：
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can run `git status` from the terminal (make sure you are in your repository
    directory) to see a summary of the files that are committed. You could use this
    now (before `git push`) to make sure that you didn't commit the `dbconfig` file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从终端运行`git status`（确保您在存储库目录中）来查看已提交文件的摘要。您现在可以使用这个（在`git push`之前）来确保您没有提交`dbconfig`文件。
- en: This concludes our preliminary database setup! Now, we can create a basic Flask
    project that uses our database.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们的初步数据库设置！现在，我们可以创建一个使用我们的数据库的基本Flask项目。
- en: Creating a basic database web application
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个基本的数据库Web应用程序
- en: 'We will start by building a skeleton of our Crime Map application. It''ll be
    a basic Flask application with a single page that:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先构建我们的犯罪地图应用程序的框架。它将是一个基本的Flask应用程序，只有一个页面：
- en: Displays all the data in the `crimes` table of our database
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示我们的数据库中`crimes`表中的所有数据
- en: Allows users to input data and stores this data in the database
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户输入数据并将这些数据存储在数据库中
- en: Has a **Clear** button that deletes all the previously input data
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个**清除**按钮，可以删除之前输入的所有数据
- en: Although what we will store and display can't really be described as *crime
    data* yet, we'll store it in the `crimes` table that we created earlier. We'll
    just use the `description` field for now, ignoring all the other ones.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们将存储和显示的内容现在还不能真正被描述为*犯罪数据*，但我们将把它存储在我们之前创建的`crimes`表中。我们现在只使用`description`字段，忽略所有其他字段。
- en: The process of setting up the Flask application is very similar to what we did
    before. We will separate out the database logic into a separate file, leaving
    our main `crimemap.py` file for the Flask setup and routing.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Flask应用程序的过程与我们之前所做的非常相似。我们将把数据库逻辑分离到一个单独的文件中，留下我们的主要`crimemap.py`文件用于Flask设置和路由。
- en: Setting up our directory structure
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置我们的目录结构
- en: 'On your local machine, change to the `crimemap` directory. If you created the
    database setup script on the server or made any changes to it there, make sure
    to sync the changes locally. Then, create the `templates` directory and touch
    the files we will use by running the following commands (or using the GUI file
    explorer if you prefer):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的本地机器上，切换到`crimemap`目录。如果您在服务器上创建了数据库设置脚本或对其进行了任何更改，请确保将更改同步到本地。然后，通过运行以下命令（或者如果您愿意，使用GUI文件浏览器）创建`templates`目录并触摸我们将使用的文件：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Looking at our application code
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看我们的应用程序代码
- en: 'Add the following code to the `crimemap.py` file. This contains nothing unexpected
    and should all be familiar from our Headlines project. The only thing to point
    out is the `DBHelper()` class, which we''ll consider the code for next. We will
    simply create a global `DBHelper` instance right after initializing our application
    and then use it in the relevant methods to grab data from the database, insert
    data into the database, or delete all data from the database:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`crimemap.py`文件中。这里没有什么意外的内容，应该都是我们在Headlines项目中熟悉的。唯一需要指出的是`DBHelper()`类，我们将在下一步考虑它的代码。我们将在初始化应用程序后简单地创建一个全局的`DBHelper`实例，然后在相关方法中使用它来从数据库中获取数据，将数据插入数据库，或者从数据库中删除所有数据：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Looking at our SQL code
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看我们的SQL代码
- en: 'There''s a little bit more SQL to learn from our database helper code. Add
    the following code to the `dbhelper.py` file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的数据库辅助代码中还有一些SQL需要学习。将以下代码添加到`dbhelper.py`文件中：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As in our setup script, we need to make a connection with our database and then
    get a cursor from our connection in order to do anything meaningful. Again, we
    will do all our operations in `try:` `finally:` blocks in order to ensure that
    the connection is closed.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在我们的设置脚本中一样，我们需要与数据库建立连接，然后从连接中获取一个游标以执行有意义的操作。同样，我们将在`try:` `finally:`块中执行所有操作，以确保连接被关闭。
- en: In our helper, we will consider three of the four main database operations.
    **CRUD** (**Create, Read, Update,** and **Delete**) describes the basic database
    operations. We will either create and insert new data, read the existing data,
    modify the existing data, or delete the existing data. We have no need to update
    data in our basic app, but creating, reading, and deleting are certainly useful.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的辅助程序中，我们将考虑四个主要数据库操作中的三个。**CRUD**（**创建，读取，更新**和**删除**）描述了基本的数据库操作。我们要么创建和插入新数据，读取现有数据，修改现有数据，或者删除现有数据。在我们的基本应用程序中，我们不需要更新数据，但创建，读取和删除肯定是有用的。
- en: Reading data
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 读取数据
- en: Let's start with reading, assuming that there is some data already in our database.
    In SQL, this is done using the `SELECT` statement; we will choose which data we
    want to retrieve based on a set of conditions. In our case, the query in the `get_all_inputs`
    function is `SELECT description FROM crimes;`. We'll take a look a bit later at
    how to refine a `SELECT` query, but this one just grabs the `description` field
    for every row in our `crimes` table. This is similar to the example we talked
    about at the beginning of this chapter, in which we wanted to send out a newsletter
    and needed the e-mail address of each of our customers. Here, we want the description
    of each of our crimes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从阅读开始，假设我们的数据库中已经有一些数据了。在SQL中，这是使用`SELECT`语句来完成的；我们将根据一组条件选择要检索的数据。在我们的情况下，`get_all_inputs`函数中的查询是`SELECT
    description FROM crimes;`。稍后我们会看一下如何完善`SELECT`查询，但这个查询只是获取我们`crimes`表中每一行的`description`字段。这类似于我们在本章开头讨论的例子，那时我们想要发送一封新闻简报，需要每个客户的电子邮件地址。在这里，我们想要每个犯罪的描述。
- en: Once the cursor executes the query, it will point to the beginning of a data
    structure containing the results. We will perform `fetchall()` on our cursor,
    which transforms our results set to a list so that we can pass them back to our
    application code. (If you've used generators in Python, it may help to think of
    a database cursor as a generator. It knows how to iterate over the data but doesn't
    itself contain all the data).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦游标执行了查询，它将指向一个包含结果的数据结构的开头。我们将在游标上执行`fetchall()`，将我们的结果集转换为列表，以便我们可以将它们传回我们的应用程序代码。（如果你在Python中使用了生成器，可能会觉得数据库游标就像一个生成器。它知道如何遍历数据，但它本身并不包含所有数据）。
- en: Inserting data
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插入数据
- en: Next up is our `add_input()` function. This takes the data input by the user
    and *inserts* it into the database. Creating data in SQL is done using the `INSERT`
    keyword. Our query (assuming `foobar` is our passed in data) is `INSERT into crimes
    (description) VALUES ('foobar')`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是我们的`add_input()`函数。这个函数会获取用户输入的数据，并将其插入数据库中。在SQL中，使用`INSERT`关键字来创建数据。我们的查询（假设`foobar`是我们传入的数据）是`INSERT
    into crimes (description) VALUES ('foobar')`。
- en: This may look overcomplicated for what it actually does, but remember that we're
    still dealing with a single field (description). We'll discuss later how `INSERT`
    is designed to accept multiple but arbitrary columns, which can all be named in
    the first set of brackets, and then matching values for each of these, which are
    given in the second set of brackets, after `VALUES`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来比实际做的事情要复杂，但请记住，我们仍然只处理一个字段（描述）。我们稍后会讨论`INSERT`是如何设计来接受多个但是任意列的，这些列可以在第一组括号中命名，然后为每个列提供匹配的值，在`VALUES`之后的第二组括号中给出。
- en: As we made changes to the database, we will need to *commit* our connection
    to make these permanent.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们对数据库进行了更改，我们需要*提交*我们的连接以使这些更改永久化。
- en: Deleting data
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除数据
- en: Finally, we will take a look at how concise a `DELETE` statement in SQL can
    be. `DELETE FROM crimes` wipes all the data from our `crimes` database. We'll
    consider later how to make this keyword behave less like a nuke by specifying
    conditions to delete only some data.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将看一下SQL中`DELETE`语句有多简洁。`DELETE FROM crimes`会清除我们`crimes`数据库中的所有数据。稍后我们会考虑如何通过指定条件来删除部分数据，使这个关键字的行为不那么像核武器。
- en: Again, this makes changes to our database, so we need to commit these.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，这会对我们的数据库进行更改，所以我们需要提交这些更改。
- en: If all the new SQL commands seem to be a lot to take in, go play around with
    them for a bit in an online sandbox or even in our own live SQL shell that we
    discussed how to access earlier. You'll find that SQL comes quite naturally after
    a while as most of its keywords are taken from a natural language, and it uses
    very few symbols.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有新的SQL命令似乎太多了，那就去在线沙盒或者我们之前讨论过如何访问的实时SQL shell中玩一下。你会发现，SQL在一段时间后会变得非常自然，因为它的大部分关键词都来自自然语言，而且它使用的符号非常少。
- en: Finally, let's take a look at our HTML template.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们来看一下我们的HTML模板。
- en: Creating our view code
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的视图代码
- en: Python and SQL are fun to write, and they are indeed the main part of our application.
    However, at the moment, we have a house without doors or windows; the difficult
    and impressive bit is done, but it's unusable. Let's add a few lines of HTML to
    allow the world to interact without the code we wrote.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Python和SQL编写起来很有趣，它们确实是我们应用程序的主要部分。但是，目前我们有一个没有门或窗户的房子；困难和令人印象深刻的部分已经完成，但它是不可用的。让我们添加一些HTML代码，以便世界可以与我们编写的代码进行交互。
- en: 'In `templates/home.html`, add the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在`templates/home.html`中，添加以下内容：
- en: '[PRE14]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There's nothing we haven't seen before. Here, we had a form with a single text
    input to add data to our database by calling the `/add` function of our app, and
    directly below it, we looped through all the existing data and displayed each
    piece within `<p>` tags.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有我们以前没有见过的东西。在这里，我们有一个带有单个文本输入的表单，通过调用我们应用程序的`/add`函数向我们的数据库添加数据，并且直接在其下面，我们循环遍历所有现有数据，并在`<p>`标签中显示每个片段。
- en: Running the code on our VPS
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在我们的VPS上运行代码
- en: 'Finally, we need to make our code accessible to the world. This means pushing
    it to our `git` repo, pulling it onto the VPS, and configuring Apache to serve
    it. Run the following commands locally:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要使我们的代码对世界可访问。这意味着将其推送到我们的`git`存储库，将其拉到VPS上，并配置Apache进行服务。在本地运行以下命令：
- en: '[PRE15]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, on your VPS, run the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在您的VPS上运行以下命令：
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we need a `.wsgi` file to link Python to Apache, which can be created
    by running the following command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一个`.wsgi`文件将Python链接到Apache，可以通过运行以下命令创建：
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `.wsgi` file should contain the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`.wsgi`文件应包含以下内容：'
- en: '[PRE18]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, hit *Ctrl* + *X* and then enter *Y* when prompted to save.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按下*Ctrl* + *X*，然后在提示保存时输入*Y*。
- en: 'We also need to create a new Apache `.conf` file, and to set this as the default
    (instead of `headlines`, the `.conf` file that is our current default). Run the
    following commands to create the file:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建一个新的Apache`.conf`文件，并将其设置为默认文件（而不是`headlines`，即我们当前默认的`.conf`文件）。运行以下命令创建文件：
- en: '[PRE19]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, add the following code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加以下代码：
- en: '[PRE20]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This is so similar to the `headlines.conf` file we created for our previous
    project that you might find it easier to just copy the previous one and substitute
    as necessary.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们为以前的项目创建的`headlines.conf`文件非常相似，您可能会发现最好只需复制以前的文件并根据需要进行替换。
- en: 'Finally, we need to deactivate the old site and activate the new one, as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要停用旧站点并激活新站点，如下所示：
- en: '[PRE21]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, everything should be working. If you copied the code out manually, it's
    almost certain that there's a bug or two to deal with. Don't be discouraged by
    this; remember that debugging is expected to be a large part of development! If
    necessary, run `tail –f /var/log/apache2/error.log` while you load the site to
    note any errors. If this fails, add some print statements to `crimemap.py` and
    `dbhelper.py` to narrow down where things are breaking.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一切应该都正常工作。如果您手动复制了代码，几乎可以肯定会有一两个bug需要处理。不要因此而感到沮丧；记住调试预计将成为开发的一个重要部分！如有必要，运行`tail
    –f /var/log/apache2/error.log`，同时加载站点以注意任何错误。如果失败，请在`crimemap.py`和`dbhelper.py`中添加一些打印语句，以缩小故障位置。
- en: 'Once everything works, you should be able to see a web page with a single text
    input. When you submit text through the input, you should see the text displayed
    on the page, as in the example that follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都正常工作后，您应该能够看到一个带有单个文本输入的网页。当您通过输入提交文本时，您应该能够在页面上看到文本显示，就像以下示例一样：
- en: '![Running the code on our VPS](img/B04312_06_01.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![在我们的VPS上运行代码](img/B04312_06_01.jpg)'
- en: Note how the data we get from the database is a tuple, so it is surrounded by
    brackets and has a trailing comma. This is because we selected only a single field,
    `'description'`, from our `crimes` table, while we could, in theory, be dealing
    with many columns for each crime (and soon we will do so).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们从数据库获取的数据是一个元组，因此它被括号括起来，并且有一个尾随逗号。这是因为我们只从我们的`crimes`表中选择了一个字段，`'description'`，而在理论上，我们可能会处理每个犯罪的许多列（很快我们将这样做）。
- en: Mitigating against SQL injection
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 减轻SQL注入
- en: Our application contains a fatal flaw. We take input from our users and insert
    it into our SQL statements using Python string formatting. This works well when
    the user enters a normal alphanumeric string as expected, but if the user is malicious,
    they can actually inject their own SQL code and take control of our database.
    Although SQL injection is an old attack and most modern technology automatically
    mitigates against it, there are still dozens of attacks against major corporations
    every year in which passwords or financial data are leaked due to a SQL injection
    vulnerability. We'll take a moment to discuss what an SQL injection is and how
    to prevent it.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序存在一个致命缺陷。我们从用户那里获取输入，并使用Python字符串格式化将其插入到我们的SQL语句中。当用户输入正常的字母数字字符串时，这样做效果很好，但是如果用户是恶意的，他们实际上可以注入自己的SQL代码并控制我们的数据库。尽管SQL注入是一种古老的攻击方式，大多数现代技术都会自动减轻其影响，但每年仍然有数十起针对主要公司的攻击，其中由于SQL注入漏洞而泄漏了密码或财务数据。我们将花一点时间讨论什么是SQL注入以及如何防止它。
- en: Injecting SQL into our database application
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向我们的数据库应用程序注入SQL
- en: 'Navigate to our web application and hit the **clear** link to remove any saved
    inputs. Now, in the input, type `Bobby` and click on the **Submit** button. The
    page should now look similar to the following image:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 转到我们的Web应用程序，点击**清除**链接以删除任何保存的输入。现在，在输入框中输入`Bobby`，然后点击**提交**按钮。页面现在应该类似于以下图片：
- en: '![Injecting SQL into our database application](img/B04312_06_02.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![向我们的数据库应用程序注入SQL](img/B04312_06_02.jpg)'
- en: 'In this input, now type:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在此输入中，现在键入：
- en: '`''); DELETE FROM crimes; --`'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`''); DELETE FROM crimes; --`'
- en: All characters are important here.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 所有字符在这里都很重要。
- en: 'The input needs to start with a single quote followed by a close bracket, followed
    by a semicolon, and then followed by the delete statement, another semicolon,
    a space, and finally two hyphens. You might expect to see a second line when the
    page refreshes, listing this strange-looking string beneath the **Bobby** output,
    but instead, you''ll see a blank page that looks similar to the screenshot that
    follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 输入需要以单引号开头，后跟一个闭括号，然后是一个分号，然后是删除语句，另一个分号，一个空格，最后是两个破折号。当页面刷新时，您可能期望看到第二行，列出这个看起来奇怪的字符串，位于**Bobby**输出下面，但实际上，您将看到一个空白页面，看起来类似于下面的屏幕截图：
- en: '![Injecting SQL into our database application](img/B04312_06_03.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![向我们的数据库应用程序注入SQL](img/B04312_06_03.jpg)'
- en: 'This is weird, right? Let''s take a look at what happened. In our `DBHelper`
    class, our insert statements have the following line:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这很奇怪，对吧？让我们看看发生了什么。在我们的`DBHelper`类中，我们的插入语句有以下行：
- en: '[PRE22]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This means that the user''s input gets added into the SQL code just before
    we run the code on the database. When we put the strange-looking input that we
    used previously into the placeholder of the SQL statement, we will get the following
    string:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着用户的输入会在我们运行代码之前添加到SQL代码中。当我们将之前使用的看起来奇怪的输入放入SQL语句的占位符中时，我们将得到以下字符串：
- en: '[PRE23]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: These are two SQL statements instead of one. We closed off the `INSERT` statement
    with an empty value and then deleted everything in the `crimes` table with the
    `DELETE` statement. The two hyphens at the end form an SQL comment so that the
    extra close quotation mark and bracket don't cause any syntax errors. When we
    input our data, we inserted a blank row into our database and then deleted all
    the data from the `crimes` table!
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这是两个SQL语句而不是一个。我们用一个空值关闭了`INSERT`语句，然后用`DELETE`语句删除了`crimes`表中的所有内容。末尾的两个破折号形成了一个SQL注释，这样额外的闭引号和括号就不会引起任何语法错误。当我们输入我们的数据时，我们向数据库插入了一个空行，然后删除了`crimes`表中的所有数据！
- en: Of course, a creative attacker could run any SQL statement in place of the `DELETE`
    statement that we chose. They could drop an entire table (refer to [https://xkcd.com/327/](https://xkcd.com/327/)
    for a humorous example), or they could run a select statement to bypass a database
    login function. Alternatively, if you store credit card information, a similar
    attack could be used to fetch the data and display it to the attacker. In general,
    we don't want the users of our web application to be able to run arbitrary code
    on our database!
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，一个有创造力的攻击者可以在我们选择的`DELETE`语句的位置运行任何SQL语句。他们可以删除整个表（参考[https://xkcd.com/327/](https://xkcd.com/327/)中的一个幽默的例子），或者他们可以运行一个选择语句来绕过数据库登录功能。或者，如果您存储信用卡信息，类似的攻击可以用来获取数据并将其显示给攻击者。总的来说，我们不希望我们的Web应用程序的用户能够在我们的数据库上运行任意代码！
- en: Mitigating against SQL injection
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 防止SQL注入
- en: Mitigating against SQL injection involves sanitizing user inputs and making
    sure that if the user inputs special characters that might be interpreted as SQL
    syntax, these characters are ignored. There are different ways to do this, and
    we'll use a simple one provided automatically by our Python SQL library. For more
    comprehensive information on this topic, take a look at [https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 防范SQL注入涉及对用户输入进行消毒，并确保如果用户输入可能被解释为SQL语法的特殊字符，则忽略这些字符。有不同的方法可以做到这一点，我们将使用我们的Python
    SQL库自动提供的一个简单方法。有关此主题的更全面信息，请参阅[https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)。
- en: 'In the `dbhelper.py` file, change the `add_input()` method to read as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dbhelper.py`文件中，将`add_input()`方法更改为以下内容：
- en: '[PRE24]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `%s` token that we used here is a string placeholder similar to `%d`, which
    is used in normal Python strings as a placeholder and an older alternative to
    braces. However, instead of using Python's `str.format()` function, we will pass
    the string and values that we want to insert into the placeholders to the PyMySQL
    `cursor.execute()` function. This will now automatically escape all characters
    that are meaningful to SQL so that we don't have to worry about them being executed.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用的`%s`标记是一个字符串占位符，类似于`%d`，它在普通Python字符串中用作占位符，也是大括号的旧替代方法。但是，我们不会使用Python的`str.format()`函数，而是将要插入到占位符中的字符串和值传递给PyMySQL的`cursor.execute()`函数。这将自动转义所有对SQL有意义的字符，这样我们就不必担心它们被执行。
- en: 'Now, if you try the inputs again, you''ll see them displayed as expected-special
    characters and all-as in the screenshot that follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您再次尝试输入，您将看到它们按预期显示-包括特殊字符-如下面的屏幕截图所示：
- en: '![Mitigating against SQL injection](img/B04312_06_04.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![防范SQL注入](img/B04312_06_04.jpg)'
- en: In the final chapter of this book, we'll briefly talk about ORM techniques that
    can provide even stronger mitigation against SQL injection attacks. While it might
    seem to be a simple problem that we've solved by escaping some special characters,
    it can actually become quite subtle. Tools such as **sqlmap** ([http://sqlmap.org/](http://sqlmap.org/))
    can try hundreds of different variants on the same idea (that is, the idea of
    inputting special characters against a database) until one gets unexpected results
    and a vulnerability is found. Remember that for your application to be secure,
    it has to be protected against every possible vulnerability; for it to be insecure,
    it only has to be vulnerable to one.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后一章中，我们将简要讨论可以提供更强大防范SQL注入攻击的ORM技术。虽然似乎我们通过转义一些特殊字符解决了一个简单的问题，但实际上可能会变得相当微妙。诸如**sqlmap**（[http://sqlmap.org/](http://sqlmap.org/)）之类的工具可以尝试对相同的想法（即输入特殊字符针对数据库）进行数百种不同的变体，直到找到意外的结果并发现漏洞。请记住，为了使您的应用程序安全，它必须受到对每种可能的漏洞的保护；而要使其不安全，它只需要对一个漏洞进行攻击。
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: That's it for the introduction to our Crime Map project. We discussed how to
    install a MySQL database on our VPS and how to hook it up to Flask. We looked
    at creating, reading, updating, and deleting data, and we created a basic database
    web application that can accept user input and display it back again. We finished
    off by looking at the SQL injection vulnerability and how to protect ourselves
    against it.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们犯罪地图项目介绍的全部内容。我们讨论了如何在我们的VPS上安装MySQL数据库以及如何将其连接到Flask。我们看了看如何创建、读取、更新和删除数据，并创建了一个基本的数据库Web应用程序，可以接受用户输入并再次显示出来。最后，我们看了看SQL注入漏洞以及如何保护自己免受其影响。
- en: Next up, we'll add a Google Maps widget and some better aesthetics.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一个谷歌地图小部件和一些更好的美学设计。
