- en: 'Section 2: Designing and Operating a Single Service – Creating a Docker Container'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2节：设计和操作单个服务-创建Docker容器
- en: This section follows the creation of a single microservice across three chapters.
    It starts by presenting an individual REST service implemented in Python, continues
    with all the requisite steps to implement the service as a self-contained Docker
    container, and creates a pipeline to ensure that the service always complies with
    high quality standards.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本节跨越三章，跟踪了单个微服务的创建过程。它从介绍在Python中实现的单个REST服务开始，继续完成将服务实现为一个独立的Docker容器的所有必要步骤，并创建管道以确保服务始终符合高质量标准。
- en: The first chapter of this section describes the implementation of a single service,
    following the example presented in the first section. It describes the API interface
    to be implemented and it uses Python to generate a full-fledged microservice,
    using tools such as Flask and SQLAlchemy to improve the ease of development. The
    service includes a testing strategy.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的第一章描述了实现单个服务的过程，按照第一节中提出的示例进行。它描述了要实现的API接口，并使用Python生成了一个成熟的微服务，使用Flask和SQLAlchemy等工具来提高开发的便利性。该服务包括一个测试策略。
- en: The second chapter of this section shows how to encapsulate the microservice
    in a Docker container so that the code can be executed immutably through the software
    life cycle. Basic Docker usage, such as building and running containers, using
    environment variables, and how to execute testing, is introduced. The process
    of sharing containers incorporated into a public registry is also described.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的第二章展示了如何将微服务封装在Docker容器中，以便代码可以在软件生命周期中以不可变的方式执行。介绍了基本的Docker使用方法，如构建和运行容器，使用环境变量以及如何执行测试。还描述了将容器共享到公共注册表的过程。
- en: The third chapter of this section delves into checking automatically that any
    new code introduced in the container follows basic quality guidelines, including
    passing all the tests. It presents continuous integration practices and demonstrates
    how to create a pipeline in the cloud with Travis CI that will be integrated into
    a GitHub repository. How to push the resulting container automatically into a
    registry is also covered in this chapter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的第三章深入探讨了自动检查容器中引入的任何新代码是否符合基本质量准则，包括通过所有测试。它介绍了持续集成实践，并演示了如何在Travis CI中在云中创建一个管道，并将其集成到GitHub存储库中。本章还涵盖了如何自动将生成的容器推送到注册表中。
- en: 'This section comprises the following chapters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包括以下章节：
- en: '[Chapter 2](8f5b60ee-fa8e-42ff-aa6c-fb27d4bd574a.xhtml), *Creating a REST Service
    with Python*'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](8f5b60ee-fa8e-42ff-aa6c-fb27d4bd574a.xhtml)，*使用Python创建REST服务*'
- en: '[Chapter 3](05dd2141-e113-43a2-8bd9-26fb97057913.xhtml), *Build, Run, and Test
    Your Service Using Docker*'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](05dd2141-e113-43a2-8bd9-26fb97057913.xhtml)，*使用Docker构建、运行和测试您的服务*'
- en: '[Chapter 4](872309f3-42ba-493c-8595-af1e610af61a.xhtml), *Creating a Pipeline
    and Workflow*'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](872309f3-42ba-493c-8595-af1e610af61a.xhtml)，*创建管道和工作流程*'
