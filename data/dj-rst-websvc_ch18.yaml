- en: Automating Tests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化测试
- en: 'In this chapter, we will add some automated testing to our RESTful Web Services
    and we will execute the tests within a test database. We won''t cover all the
    tests that we should write for our complex RESTful Web Service. However, we will
    follow the first steps and we will gain an understanding of:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为我们的RESTful Web服务添加一些自动化测试，并在测试数据库中执行这些测试。我们不会涵盖我们应该为我们的复杂RESTful Web服务编写的所有测试。然而，我们将遵循第一步，并了解以下内容：
- en: Getting ready for unit testing with pytest
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备使用pytest进行单元测试
- en: Writing unit tests for a RESTful Web Service
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为RESTful Web服务编写单元测试
- en: Discovering and running unit tests with pytest
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用pytest发现和运行单元测试
- en: Writing new unit tests to improve tests' code coverage
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写新的单元测试以改进测试代码覆盖率
- en: Running new unit tests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行新的单元测试
- en: Getting ready for unit testing with pytest
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备使用pytest进行单元测试
- en: So far, we have been writing code to add features to our RESTful Web Service
    and configuring many settings for the Django REST framework. We used command-line
    and GUI tools to understand how all the pieces worked together and to check the
    results of diverse HTTP requests. Now, we will write unit tests that will allow
    us to make sure that our RESTful Web Service will work as expected. Before we
    can start writing unit tests, it is necessary to install many additional packages
    in our virtual environment. Make sure you quit Django's development server. Remember
    that you just need to press *Ctrl* + *C* in the terminal or go to the Command
    Prompt window in which it is running. First, we will make some changes to work
    with a single version of our RESTful Web Service.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在编写代码为我们的RESTful Web服务添加功能，并为Django REST框架配置许多设置。我们使用命令行和GUI工具来了解所有组件是如何协同工作的，以及检查各种HTTP请求的结果。现在，我们将编写单元测试，以确保我们的RESTful
    Web服务按预期工作。在我们开始编写单元测试之前，有必要在我们的虚拟环境中安装许多额外的包。确保你关闭Django的开发服务器。记住，你只需在终端中按*Ctrl*
    + *C*，或者转到正在运行的命令提示符窗口。首先，我们将对代码进行一些修改，以便与我们的RESTful Web服务的单个版本一起工作。
- en: 'This way, it will be easier to focus on tests for a single version in our examples.
    Replace the code in the `urls.py` file in the `restful01/restful01` folder, specifically,
    the `restful01/restful01/urls.py` file. The file defines the root URL configurations,
    and therefore, we want to include only the URL patterns for the first version
    of our web service. The code file for the sample is included in the `hillar_django_restful_10_01`
    folder, in the `restful01/restful01/urls.py` file:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做，我们就可以更容易地专注于示例中单个版本的测试。替换`restful01/restful01`文件夹中的`urls.py`文件中的代码，具体来说，是`restful01/restful01/urls.py`文件。该文件定义了根URL配置，因此我们只想包含我们网络服务第一版本的URL模式。示例代码文件包含在`hillar_django_restful_10_01`文件夹中的`restful01/restful01/urls.py`文件中：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will install the following Python packages in our virtual environment:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的虚拟环境中安装以下Python包：
- en: '`pytest`: This is a very popular Python unit test framework that makes testing
    easy and reduces boilerplate code'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest`：这是一个非常流行的Python单元测试框架，它使测试变得简单，并减少了样板代码'
- en: '`pytest-django`: This `pytest` plugin allows us to easily use and configure
    the features provided by `pytest` in our Django tests'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-django`：这个`pytest`插件允许我们轻松地在Django测试中使用和配置`pytest`提供的功能'
- en: Notice that we won't be working with Django's `manage.pytest` command. We will
    work with `pytest` instead. However, in case you don't want to work with `pytest`,
    most of the things you will learn can be easily adapted to any other test framework.
    In fact, the code is compatible with `nose` in case you decide to use the most
    common, yet a bit outdated, configuration for testing with the Django REST framework.
    Nowadays, `pytest` is the preferred unit test framework for Python.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们不会使用Django的`manage.pytest`命令。我们将使用`pytest`。然而，如果你不想使用`pytest`，你将学到的大部分内容可以轻松地适应任何其他测试框架。实际上，如果你的代码与`nose`兼容，你可以选择使用最常见但略过时的配置来测试Django
    REST框架。如今，`pytest`是Python首选的单元测试框架。
- en: 'Run the following command to install the `pytest` package:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令来安装`pytest`包：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The last lines for the output will indicate that the `pytest` package and its
    required packages have been successfully installed:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的最后几行将指示`pytest`包及其所需包已成功安装：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We just need to run the following command to install the `pytest-django` package:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需运行以下命令来安装`pytest-django`包：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The last lines for the output will indicate that the `pytest-django` package
    has been successfully installed:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的最后几行将指示`pytest-django`包已成功安装：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, go to the `restful01` folder that contains the `manage.py` file and create
    a new file named `pytest.ini`. Write the following code in this new file. The
    following lines show the code for this file that specifies the Django settings
    module (`restful01.settings`) and the pattern that `pytest` will use to locate
    the Python files, the declare tests. The code file for the sample is included
    in the `hillar_django_restful_10_01` folder in the `restful01/pytest.ini` file:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到包含`manage.py`文件的`restful01`文件夹，创建一个名为`pytest.ini`的新文件。在这个新文件中写入以下代码。以下行显示了此文件的代码，指定了Django设置模块（`restful01.settings`）和`pytest`将用于定位Python文件、声明测试的模式。示例的代码文件包含在`hillar_django_restful_10_01`文件夹中的`restful01/pytest.ini`文件中：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Whenever we execute pytest to run tests, the test runner will check the following
    to find test definitions:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们执行pytest来运行测试时，测试运行器将检查以下内容以找到测试定义：
- en: Python files named `tests.py`
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名为`tests.py`的Python文件
- en: Python files whose name starts with the `test_` prefix
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以`test_`前缀开始的Python文件
- en: Python files whose name ends with the `_tests` suffix
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以`_tests`后缀结尾的Python文件
- en: 'In [Chapter 9](dj-rst-websvc_ch17.html), *Applying Throttling Rules and Versioning
    Management*, we configured throttling rules for our RESTful Web Service. We want
    to run our tests considering the throttling rules. In fact, we should write tests
    to make sure that the throttling rules are working OK. We will be running requests
    many times, and therefore, the low values we used for the throttling rules might
    complicate running all the requests required by our tests. Hence, we will increase
    the values for the throttling rules to simplify our testing samples. Open the
    `restful01/restful01/settings.py` file that declares module-level variables that
    define the configuration of Django for the `restful01` project. We will make some
    changes to this Django settings file. Replace the code for the highlighted lines
    included in the `REST_FRAMEWORK` dictionary. The following lines show the new
    declaration of the `REST_FRAMEWORK` dictionary. The code file for the sample is
    included in the `hillar_django_restful_10_01` folder in the `restful01/restful01/settings.py`
    file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](dj-rst-websvc_ch17.html)，*应用节流规则和版本管理*中，我们为我们的RESTful Web Service配置了节流规则。我们希望在考虑节流规则的情况下运行我们的测试。实际上，我们应该编写测试来确保节流规则正常工作。我们将多次运行请求，因此，我们为节流规则使用的低值可能会使所有测试所需的请求复杂化。因此，我们将增加节流规则的值以简化我们的测试样本。打开声明Django项目`restful01`配置的模块级变量的`restful01/restful01/settings.py`文件。我们将对此Django设置文件进行一些修改。替换`REST_FRAMEWORK`字典中包含的突出显示行的代码。以下行显示了`REST_FRAMEWORK`字典的新声明。示例的代码文件包含在`hillar_django_restful_10_01`文件夹中的`restful01/restful01/settings.py`文件中：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We increased the number of requests per hour that we can execute in each of
    the throttling rates configurations. This way, we will be able to run our tests
    without issues.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们增加了每个节流速率配置中每小时可以执行的请求数量。这样，我们将能够无问题地运行我们的测试。
- en: In this case, we are using the same settings file for our tests in order to
    avoid running additional steps and repeating test settings. However, in most cases,
    we would create a specific Django configuration file for testing.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用相同的设置文件来运行我们的测试，以避免运行额外的步骤和重复测试设置。然而，在大多数情况下，我们会为测试创建一个特定的Django配置文件。
- en: Writing unit tests for a RESTful Web Service
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为RESTful Web Service编写单元测试
- en: 'Now, we will write our first round of unit tests related to the drone category
    class based views: `DroneCategoryList` and `DroneCategoryDetail`. Open the existing
    `restful01/drones/tests.py` file and replace the existing code with the following
    lines that declare many `import` statements and the `DroneCategoryTests` class.
    The code file for the sample is included in the `hillar_django_restful_10_01`
    folder in the `restful01/drones/tests.py` file:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写与无人机类别类视图相关的第一轮单元测试：`DroneCategoryList`和`DroneCategoryDetail`。打开现有的`restful01/drones/tests.py`文件，并用以下行替换现有的代码，这些行声明了许多`import`语句和`DroneCategoryTests`类。示例的代码文件包含在`hillar_django_restful_10_01`文件夹中的`restful01/drones/tests.py`文件中：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `DroneCategoryTests` class is a subclass of the `rest_framework.test.APITestCase`
    superclass and declares the `post_drone_category` method that receives the desired
    `name` for the new drone category as an argument.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`DroneCategoryTests` 类是 `rest_framework.test.APITestCase` 超类的子类，并声明了一个接收新无人机类别所需
    `name` 作为参数的 `post_drone_category` 方法。'
- en: This method builds the URL and the data dictionary to compose and send an HTTP
    `POST` request to the view associated with the `views.DroneCategoryList.name`
    name (`dronecategory-list`) and returns the response generated by this request.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法构建 URL 和数据字典，以组合并发送一个 HTTP `POST` 请求到与 `views.DroneCategoryList.name` 名称（`dronecategory-list`）关联的视图，并返回此请求生成的响应。
- en: 'The code uses the `self.client` attribute to access the `APIClient` instance
    that allows us to easily compose and send HTTP requests for testing our RESTful
    Web Service that uses the Django REST framework. For this test, the code calls
    the `post` method with the built `url`, the `data` dictionary, and the desired
    format for the data: `''json''`.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 代码使用 `self.client` 属性来访问 `APIClient` 实例，这使得我们可以轻松地组合并发送 HTTP 请求来测试使用 Django
    REST 框架的 RESTful Web 服务。对于这个测试，代码使用构建的 `url`、`data` 字典和所需的数据格式 `'json'` 调用 `post`
    方法。
- en: Many test methods will call the `post_drone_category` method to create a new
    drone category and then compose and send other HTTP requests to the RESTful Web
    Service. For example, we will need a drone category to post a new drone.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 许多测试方法将调用 `post_drone_category` 方法来创建一个新的无人机类别，然后组合并发送其他 HTTP 请求到 RESTful Web
    服务。例如，我们需要一个无人机类别来发布一个新的无人机。
- en: 'The `test_post_and_get_drone_category` method tests whether we can create a
    new `DroneCategory` and then retrieve it. The method calls the `post_drone_category`
    method and then calls `assert` many times to check for the following expected
    results:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`test_post_and_get_drone_category` 方法测试我们是否可以创建一个新的 `DroneCategory` 并然后检索它。该方法调用
    `post_drone_category` 方法，然后多次调用 `assert` 来检查以下预期的结果：'
- en: The `status_code` attribute for the response is equal to HTTP 201 Created (`status.HTTP_201_CREATED`)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 响应的 `status_code` 属性等于 HTTP 201 已创建（`status.HTTP_201_CREATED`）
- en: The total number of `DroneCategory` objects retrieved from the database is `1`
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从数据库中检索到的 `DroneCategory` 对象总数为 `1`
- en: The value of the `name` attribute for the retrieved `DroneCategory` object is
    equal to the `new_drone_category_name` variable passed as a parameter to the `post_drone_category`
    method
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取的 `DroneCategory` 对象的 `name` 属性值等于传递给 `post_drone_category` 方法的参数 `new_drone_category_name`
    变量
- en: The previously coded tests make sure that we can create a new drone category
    with the RESTful Web Service, it is persisted in the database, and the serializer
    does its job as expected. The drone category is a very simple entity because it
    just has a primary key and a name. Now, we will add more test methods that will
    allow us to cover more scenarios related to drone categories.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 之前编写的测试确保我们可以通过 RESTful Web 服务创建一个新的无人机类别，它在数据库中持久化，序列化器按预期工作。无人机类别是一个非常简单的实体，因为它只有一个主键和一个名称。现在，我们将添加更多的测试方法，以便我们可以覆盖更多与无人机类别相关的场景。
- en: 'Add the `test_post_existing_drone_category_name` method to the recently created
    `DroneCategoryTests` class in the `restful01/drones/tests.py` file. The code file
    for the sample is included in the `hillar_django_restful_10_01` folder in the
    `restful01/drones/tests.py` file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `test_post_existing_drone_category_name` 方法添加到最近创建的 `DroneCategoryTests` 类中，位于
    `restful01/drones/tests.py` 文件。示例代码文件包含在 `hillar_django_restful_10_01` 文件夹中，位于
    `restful01/drones/tests.py` 文件：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The new method tests whether the unique constraint for the drone category name
    works as expected and doesn't make it possible for us to create two drone categories
    with the same name. The second time we compose and send an HTTP `POST` request
    with a duplicate drone name, we must receive an HTTP `400 Bad Request` status
    code (`status.HTTP_400_BAD_REQUEST`).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法测试无人机类别名称的唯一约束是否按预期工作，并且不允许我们创建具有相同名称的两个无人机类别。当我们第二次组合并发送具有重复无人机名称的 HTTP
    `POST` 请求时，我们必须收到 HTTP `400 Bad Request` 状态码（`status.HTTP_400_BAD_REQUEST`）。
- en: 'Add the `test_filter_drone_category_by_name` method to the `DroneCategoryTests`
    class in the `restful01/drones/tests.py` file. The code file for the sample is
    included in the `hillar_django_restful_10_01` folder in the `restful01/drones/tests.py`
    file:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `test_filter_drone_category_by_name` 方法添加到 `restful01/drones/tests.py` 文件中的
    `DroneCategoryTests` 类。示例代码文件包含在 `hillar_django_restful_10_01` 文件夹中，位于 `restful01/drones/tests.py`
    文件：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The new method tests whether we can filter a drone category by name, and therefore,
    checks the usage of the filter field we have configured for the `DroneCategoryList`
    class-based view. The code creates two drone categories and then calls the `django.utils.http.urlencode`
    function to build an encoded URL from the `filter_by_name` dictionary. This dictionary
    includes the field name as a key and the desired string for the field as a value.
    In this case, `drone_category_name1` is equal to `'Hexacopter'`, and therefore,
    the encoded URL saved in the `url` variable will be `'name=Hexacopter'`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法测试我们是否可以通过名称过滤无人机类别，因此检查了我们为 `DroneCategoryList` 类视图配置的过滤器字段的使用。代码创建了两个无人机类别，然后调用
    `django.utils.http.urlencode` 函数从 `filter_by_name` 字典构建编码后的 URL。此字典将字段名称作为键，将字段所需的字符串作为值。在这种情况下，`drone_category_name1`
    等于 `'Hexacopter'`，因此，保存到 `url` 变量的编码 URL 将是 `'name=Hexacopter'`。
- en: After the call to `self.client.get` with the built URL to retrieve the filtered
    list of drone categories, the method verifies the data included in the response
    JSON body by inspecting the `data` attribute for the response. The second line
    that calls `assert` checks whether the value for `count` is equal to `1` and the
    next lines verify whether the `name` key for the first element in the `results`
    array is equal to the value hold in the `drone_category_name1` variable. The code
    is easy to read and understand.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 `self.client.get` 并使用构建的 URL 获取过滤后的无人机类别列表后，该方法通过检查响应的 `data` 属性来验证响应 JSON
    体内的数据。调用 `assert` 的第二行检查 `count` 的值是否等于 `1`，接下来的几行验证 `results` 数组中第一个元素的 `name`
    键是否等于 `drone_category_name1` 变量中保存的值。代码易于阅读和理解。
- en: 'Add the `test_get_drone_categories_collection` method to the `DroneCategoryTests`
    class in the `restful01/drones/tests.py` file. The code file for the sample is
    included in the `hillar_django_restful_10_01` folder in the `restful01/drones/tests.py`
    file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `test_get_drone_categories_collection` 方法添加到 `restful01/drones/tests.py` 文件中的
    `DroneCategoryTests` 类。示例代码文件包含在 `hillar_django_restful_10_01` 文件夹中，位于 `restful01/drones/tests.py`
    文件内：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The method tests whether we can retrieve the drone categories collection. First,
    the code creates a new drone category and then makes an HTTP `GET` request to
    retrieve the drones collection. The lines that call `assert` check that the results
    include the only created and persisted drone and that its name is equal to the
    name used for the call to the `POST` method to create the new drone category.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法测试我们是否可以检索无人机类别集合。首先，代码创建一个新的无人机类别，然后发送一个 HTTP `GET` 请求以检索无人机集合。调用 `assert`
    的代码行检查结果是否只包含创建并持久化的无人机，并且其名称等于用于调用 `POST` 方法创建新无人机类别的名称。
- en: 'Add the `test_update_drone_category` method to the `DroneCategoryTests` class
    in the `restful01/drones/tests.py` file. The code file for the sample is included
    in the `hillar_django_restful_10_01` folder in the `restful01/drones/tests.py`
    file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `test_update_drone_category` 方法添加到 `restful01/drones/tests.py` 文件中的 `DroneCategoryTests`
    类。示例代码文件包含在 `hillar_django_restful_10_01` 文件夹中，位于 `restful01/drones/tests.py`
    文件内：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The new method tests whether we can update a single field for a drone category.
    First, the code creates a new drone category and then makes an HTTP `PATCH` request
    to update the name field for the previously persisted drone category. The lines
    that call `assert` check that the returned status code is `HTTP 200 OK` and that
    the value of the `name` key in the response body is equal to the new name that
    we specified in the HTTP `PATCH` request.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法测试我们是否可以更新无人机类别的单个字段。首先，代码创建一个新的无人机类别，然后发送一个 HTTP `PATCH` 请求来更新先前持久化的无人机类别的名称字段。调用
    `assert` 的代码行检查返回的状态码是否为 `HTTP 200 OK`，以及响应体中 `name` 键的值是否等于我们在 HTTP `PATCH` 请求中指定的新名称。
- en: 'Add the `test_get_drone_category` method to the `DroneCategoryTests` class
    in the `restful01/drones/tests.py` file. The code file for the sample is included
    in the `hillar_django_restful_10_01` folder in the `restful01/drones/tests.py`
    file:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `test_get_drone_category` 方法添加到 `restful01/drones/tests.py` 文件中的 `DroneCategoryTests`
    类。示例代码文件包含在 `hillar_django_restful_10_01` 文件夹中，位于 `restful01/drones/tests.py`
    文件内：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The new method tests whether we can retrieve a single category with an HTTP
    `GET` request. First, the code creates a new drone category and then makes an
    HTTP `GET` request to retrieve the previously persisted drone category. The lines
    that call `assert` check that the returned status code is `HTTP 200 OK` and that
    the value of the `name` key in the response body is equal to the name that we
    specified in the HTTP `POST` request that created the drone category.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 新的方法测试我们是否可以通过 HTTP `GET` 请求检索单个类别。首先，代码创建一个新的无人机类别，然后发送 HTTP `GET` 请求以检索之前持久化的无人机类别。调用
    `assert` 的行检查返回的状态码是否为 `HTTP 200 OK`，以及响应体中 `name` 键的值是否等于我们在创建无人机类别时在 HTTP `POST`
    请求中指定的名称。
- en: Each test method that requires a specific condition in the database must execute
    all the necessary code to generate the required data. For example, in order to
    update the name for an existing drone category, it was necessary to create a new
    drone category before making the HTTP `PATCH` request to update it. Pytest and
    the Django REST framework will execute each test method without data from the
    previously executed test methods in the database, that is, each test will run
    with a database cleansed of data from the previous tests.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每个需要在数据库中满足特定条件的测试方法都必须执行所有必要的代码以生成所需的数据。例如，为了更新现有无人机类别的名称，在向其发送 HTTP `PATCH`
    请求以更新之前，必须先创建一个新的无人机类别。Pytest 和 Django REST 框架将在没有来自先前执行测试方法的数据的情况下执行每个测试方法，也就是说，每个测试都将使用清除先前测试数据的数据库运行。
- en: Discovering and running unit tests with pytest
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 pytest 发现和运行单元测试
- en: 'Now, go to the `restful01` folder that contains the `manage.py` file, with
    the virtual environment activated, and run the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在虚拟环境激活的情况下，进入包含 `manage.py` 文件的 `restful01` 文件夹，并运行以下命令：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `pytest` command and the Django REST framework will perform the following
    actions:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest` 命令和 Django REST 框架将执行以下操作：'
- en: Create a clean test database name `test_drones`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `test_drones` 的干净测试数据库。
- en: Run all the migrations required for the database.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行数据库所需的全部迁移。
- en: Discover the tests that have to be executed based on the settings specified
    in the `pytest.ini` file.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据在 `pytest.ini` 文件中指定的设置发现需要执行的测试。
- en: Run all the methods whose name starts with the `test_` prefix in the `DroneCategoryTests`
    class and display the results. We declared this class in the `tests.py` file and
    it matches the pattern specified for the `python_files` setting in the `pytest.ini`
    file.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `DroneCategoryTests` 类中以 `test_` 前缀开头的所有方法，并显示结果。我们在 `tests.py` 文件中声明了这个类，并且它与
    `pytest.ini` 文件中 `python_files` 设置指定的模式相匹配。
- en: Drop the test database named `test_drones`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除名为 `test_drones` 的测试数据库。
- en: It is very important to know that the tests won't make changes to the database
    we have been using when working with our RESTful Web Service. Notice that the
    test database name is `test_drones` and the database name that we have been using
    with Django's development server is `drones`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的是要知道，在处理我们的 RESTful Web 服务时，测试不会对我们一直在使用的数据库进行更改。注意，测试数据库的名称是 `test_drones`，而我们与
    Django 开发服务器一起使用的数据库名称是 `drones`。
- en: 'The following screenshot shows a sample output generated by the `pytest` command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用 `pytest` 命令生成的示例输出：
- en: '![](img/6cc2cb23-d8d3-44a7-856e-86f7d770a77f.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6cc2cb23-d8d3-44a7-856e-86f7d770a77f.png)'
- en: 'The output indicated that the test runner collected and executed six tests
    and all of them passed. However, the output didn''t show the names of the tests
    that passed. Hence, we will run `pytest` again with the `-v` option to increase
    verbosity. Run the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 输出指示测试运行器收集并执行了六个测试，并且所有测试都通过了。然而，输出没有显示通过测试的测试名称。因此，我们将再次使用 `-v` 选项运行 `pytest`
    以增加输出详细程度。运行以下命令：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following screenshot shows a sample output generated by the `pytest` command
    with the increased verbosity:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用增加详细程度的 `pytest` 命令生成的示例输出：
- en: '![](img/158cd88e-eaef-4ad7-b999-28c4563d5bed.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/158cd88e-eaef-4ad7-b999-28c4563d5bed.png)'
- en: 'We enabled verbose mode, and therefore, the new output displayed the full test
    names. Pytest displays the following information for each discovered and executed
    test: the Python file that defines it, the class name, and the method, such as
    the following line:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启用了详细模式，因此新的输出显示了完整的测试名称。Pytest 为每个发现和执行的测试显示以下信息：定义它的 Python 文件、类名和方法，例如以下行：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The line indicates that the `test_filter_drone_category_by_name` test method
    declared in the `DroneCategoryTests` class, within the `drones/tests.py` module
    has been executed, passed, and its execution represents 16% of the discovered
    tests.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这条线表示在`drones/tests.py`模块中`DroneCategoryTests`类中声明的`test_filter_drone_category_by_name`测试方法已被执行、通过，并且其执行代表了发现的测试的16%。
- en: The verbose mode makes it possible to know the specific tests that have been
    executed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 详细模式使得可以知道已经执行的具体测试。
- en: 'Some of the test methods include calls to the `print` function. By default,
    pytest captures both the `stdout` and `stderr` and only shows the captured content
    for the tests that fail. Sometimes, it is useful for us to see the results of
    calls to the `print` function while `pytest` runs the tests. We will run `pytest`
    again with `-s` option combined with the `-v` option to disable capturing and
    increase verbosity. Notice that the `-s` option is a shortcut that is equivalent
    to the `-capture=no` option. Run the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一些测试方法包括对`print`函数的调用。默认情况下，pytest捕获`stdout`和`stderr`，并且只为失败的测试显示捕获的内容。有时，在pytest运行测试时查看`print`函数的调用结果是有用的。我们将再次运行pytest，使用`-s`选项与`-v`选项结合，以禁用捕获并增加详细程度。请注意，`-s`选项是一个快捷方式，等同于`-capture=no`选项。运行以下命令：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following screenshot shows a sample output for the previous command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了之前命令的示例输出：
- en: '![](img/32a2544d-1693-4676-8db5-6e8b6bba9390.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/32a2544d-1693-4676-8db5-6e8b6bba9390.png)'
- en: 'The new output displayed the results of each call to the `print` function.
    In addition, we will notice that there are two messages displayed that are printed
    by Django, one line before the first test runs and another line after the last
    test finishes its execution:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 新的输出显示了每次调用`print`函数的结果。此外，我们还会注意到显示了两条由Django打印的消息，一条在第一个测试运行前的一行，另一条在最后一个测试执行完成后的一行：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These messages indicate that Django created the test database before running
    the first test and drops the database after all the tests have been executed.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些消息表明Django在运行第一个测试之前创建了测试数据库，并在所有测试执行完毕后删除了数据库。
- en: 'The `test_filter_drone_category_by_name` test method declared in the `DroneCategoryTests`
    class has the following two calls to the `print` function:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在`DroneCategoryTests`类中声明的`test_filter_drone_category_by_name`测试方法有两个调用`print`函数：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The previous output shows the results of the two calls to the `print` function.
    First, the tests output display the value of the `url` variable with the composed
    URL and then the output shows the response of the call to `self.client.get` as
    a string:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的输出显示了两次调用`print`函数的结果。首先，测试输出显示了`url`变量的值和组合的URL，然后输出显示了调用`self.client.get`的响应作为字符串：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this case, the output is clear. However, as you might notice in the previous
    screenshot, the output generated by the other print statements is shown at the
    right-hand side of the test method name that was executed and it is not so clear.
    Hence, whenever we want to provide helpful output for tests, it is always a good
    idea to make sure we start with a new line (`'n'`) and provide some context for
    the output we are displaying.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，输出是清晰的。然而，正如你可能在前面的截图中所注意到的，其他打印语句生成的输出显示在执行测试方法名称的右侧，这并不那么清晰。因此，每当我们要为测试提供有用的输出时，始终确保我们从一个新行（`'n'`）开始，并为我们要显示的输出提供一些上下文。
- en: 'Now, we will replace the line that calls the `print` function in the `test_post_and_get_drone_category`
    method for the `DroneCategoryTests` class in the `restful01/drones/tests.py` file.
    The code file for the sample is included in the `hillar_django_restful_10_02`
    folder in the `restful01/drones/tests.py` file. The replaced line is highlighted:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将替换`restful01/drones/tests.py`文件中`DroneCategoryTests`类的`test_post_and_get_drone_category`方法中调用`print`函数的行。示例代码文件包含在`hillar_django_restful_10_02`文件夹中，位于`restful01/drones/tests.py`文件。被替换的行被突出显示：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the following command to execute pytest again with the `-s` and `-v` options
    combined:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令再次执行pytest，并使用`-s`和`-v`选项结合：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following screenshot shows a sample output for the previous command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了之前命令的示例输出：
- en: '![](img/1260c896-8211-407c-8ba3-3bbe651a3f2d.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1260c896-8211-407c-8ba3-3bbe651a3f2d.png)'
- en: The edits made in the call to the print statement that added a new line before
    and after the output made it easier to read the output. The generated output is
    highlighted in the previous screenshot. It is very important to take this formatting
    into account when working with `pytest`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在打印语句的调用中对输出添加新行之前和之后所做的编辑使得输出更容易阅读。生成的输出在之前的屏幕截图中被突出显示。在处理 `pytest` 时考虑这种格式非常重要。
- en: Writing new unit tests to improve the tests' code coverage
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写新的单元测试以改进测试的代码覆盖率
- en: 'Our first round of unit tests was related to the drone category class-based
    views: `DroneCategoryList` and `DroneCategoryDetail`. Now, we will write a second
    round of unit tests related to the pilot class-based views: `PilotList` and `PilotDetail`.
    The new tests will be a bit more complex because we will have to work with authenticated
    requests.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一轮单元测试与无人机类别基于类的视图相关：`DroneCategoryList` 和 `DroneCategoryDetail`。现在，我们将编写第二轮与飞行员基于类的视图相关的单元测试：`PilotList`
    和 `PilotDetail`。新的测试将更加复杂，因为我们必须处理认证请求。
- en: In [*Chapter 8*](dj-rst-websvc_ch17.html), *Securing the API with Authentication
    and Permissions*, we configured authentication and permission policies for the
    class-based views that work with the `Pilot` model. We overrode the values for
    the `authentication_classes` and `permission_classes` class attributes for the
    `PilotDetail` and `PilotList` classes. In order to create, read, update, or delete
    pilots, we have to provide an authentication token. Hence, we will write tests
    to make sure that an unauthenticated request cannot perform operations related
    to pilots. In addition, we want to make sure that an authenticated request with
    a token can create a new pilot and then retrieve it.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 8 章*](dj-rst-websvc_ch17.html)，*使用身份验证和权限保护 API*，我们为与 `Pilot` 模型一起工作的基于类的视图配置了身份验证和权限策略。我们覆盖了
    `PilotDetail` 和 `PilotList` 类的 `authentication_classes` 和 `permission_classes`
    类属性值。为了创建、读取、更新或删除飞行员，我们必须提供身份验证令牌。因此，我们将编写测试以确保未认证的请求无法执行与飞行员相关的操作。此外，我们还想确保带有令牌的认证请求可以创建新的飞行员并检索它。
- en: 'Open the `restful01/drones/tests.py` file and add the following lines after
    the last line that declares the imports, before the declaration of the `DroneCategoryTests`
    class:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `restful01/drones/tests.py` 文件，在声明导入的最后一行之后、`DroneCategoryTests` 类声明之前添加以下行：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the following code to the existing `restful01/drones/tests.py` file to
    create the new `PilotTests` class. The code file for the sample is included in
    the `hillar_django_restful_10_02` folder in the `restful01/drones/tests.py` file:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的 `restful01/drones/tests.py` 文件中，以创建新的 `PilotTests` 类。示例代码文件包含在 `hillar_django_restful_10_02`
    文件夹中的 `restful01/drones/tests.py` 文件中：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `PilotTests` class is a subclass of the `rest_framework.test.APITestCase`
    superclass and declares the `post_pilot` method that receives the desired `name`
    and `gender` for the new pilot as arguments.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`PilotTests` 类是 `rest_framework.test.APITestCase` 超类的子类，并声明了 `post_pilot` 方法，该方法接收新飞行员所需的
    `name` 和 `gender` 参数。'
- en: This method builds the URL and the data dictionary to compose and send an HTTP
    `POST` request to the view associated with the `views.PilotList.name` name (`pilot-list`)
    and returns the response generated by this request.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法构建 URL 和数据字典，以向与 `views.PilotList.name` 名称（`pilot-list`）关联的视图发送 HTTP `POST`
    请求，并返回此请求生成的响应。
- en: Many test methods will call the `post_pilot` method to create a new pilot and
    then compose and send other HTTP requests to the RESTful Web Service. Notice that
    the `post_pilot` method doesn't configure authentication credentials, and therefore,
    we will be able to call this method for unauthenticated or authenticated users.
    We already know that unauthenticated users shouldn't be able to post a pilot,
    and a test will call this method without a token and make sure no pilot is persisted
    in the database.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 许多测试方法将调用 `post_pilot` 方法来创建新的飞行员，然后向 RESTful Web 服务发送其他 HTTP 请求。请注意，`post_pilot`
    方法没有配置身份验证凭据，因此我们可以为未认证或认证用户调用此方法。我们已经知道未认证的用户不应能够发布飞行员，测试将调用此方法而不使用令牌，并确保没有飞行员被保存在数据库中。
- en: 'The `create_user_and_set_token_credentials` method executes the following actions:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`create_user_and_set_token_credentials` 方法执行以下操作：'
- en: Creates a Django user with a call to the `User.objects.create_user` method.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `User.objects.create_user` 方法创建 Django 用户。
- en: Creates a token for the previously created Django user with a call to the `Token.objects.create`
    method.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Token.objects.create` 方法为之前创建的 Django 用户创建一个令牌。
- en: Includes the token generated for the Django user as the value for the `Authorization`
    HTTP header key with the `'Token '` string as a prefix for the token. The last
    line calls the `self.client.credentials` method to set the generated HTTP header
    as the value for the `HTTP_AUTHORIZATION` named argument.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将为Django用户生成的令牌作为`Authorization` HTTP头键的值，并在令牌前加上`'Token '`字符串作为前缀。最后一行调用`self.client.credentials`方法将生成的HTTP头设置为`HTTP_AUTHORIZATION`命名参数的值。
- en: Remember that the `self.client` attribute allows us to access the `APIClient`
    instance.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`self.client`属性允许我们访问`APIClient`实例。
- en: Whenever a test wants to perform an HTTP request with a token, the code will
    call the `create_user_and_set_token_credentials` method. In order to clean up
    the credentials configured for the `APIClient` instance saved in `self.client`,
    it is necessary to call the `self.client.credentials()` method without arguments.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 每当测试想要使用令牌执行HTTP请求时，代码将调用`create_user_and_set_token_credentials`方法。为了清理保存在`self.client`中的`APIClient`实例配置的凭证，必须调用不带参数的`self.client.credentials()`方法。
- en: 'The `test_post_and_get_pilot` method tests the following path:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`test_post_and_get_pilot`方法测试以下路径：'
- en: We can create a new `Pilot` with an HTTP `POST` request that has an appropriate
    authentication token
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过带有适当认证令牌的HTTP `POST`请求创建一个新的`Pilot`。
- en: We can retrieve the recently created `Pilot` with an HTTP `GET` request that
    has an appropriate authentication token
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过带有适当认证令牌的HTTP `GET`请求检索最近创建的`Pilot`。
- en: We cannot retrieve the recently created `Pilot` with an unauthenticated HTTP
    `GET` request
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们无法使用未经认证的HTTP `GET`请求检索最近创建的`Pilot`。
- en: 'The code calls the `create_user_and_set_token_credentials` method and then
    calls the `post_pilot` method. Then, the code calls `assert` many times to check
    for the following expected results:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 代码调用了`create_user_and_set_token_credentials`方法，然后调用了`post_pilot`方法。接着，代码多次调用`assert`来检查以下预期的结果：
- en: The `status_code` attribute for the response is equal to HTTP 201 Created (`status.HTTP_201_CREATED`)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 响应的`status_code`属性等于HTTP 201已创建（`status.HTTP_201_CREATED`）。
- en: The total number of `Pilot` objects retrieved from the database is `1`
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从数据库中检索到的`Pilot`对象总数为`1`。
- en: The value of the `name`, `gender`, and `races_count` attributes for the retrieved
    `Pilot` object is equal to the values passed as parameters to the `post_pilot`
    method
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检索到的`Pilot`对象的`name`、`gender`和`races_count`属性值等于传递给`post_pilot`方法的参数值。
- en: 'Then, the code calls the `self.client.get` with the built URL to retrieve the
    previously persisted pilot. This request will use the same credentials applied
    to the HTTP `POST` request, and therefore, the new request is authenticated by
    a valid token. The method verifies the data included in the response JSON body
    by inspecting the `data` attribute for the response. The code calls `assert` twice
    to check for the following expected results:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码使用构建的URL调用`self.client.get`来检索之前持久化的飞行员。这个请求将使用应用于HTTP `POST`请求的相同凭证，因此新的请求通过有效的令牌进行认证。该方法通过检查响应的`data`属性来验证响应JSON体中包含的数据。代码两次调用`assert`来检查以下预期的结果：
- en: The `status_code` attribute for the response is equal to HTTP 201 Created (`status.HTTP_201_CREATED`)
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 响应的`status_code`属性等于HTTP 201已创建（`status.HTTP_201_CREATED`）。
- en: The value of the `name` key in the response body is equal to the `name` that
    we specified in the HTTP `POST` request
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 响应体中`name`键的值等于我们在HTTP `POST`请求中指定的`name`。
- en: Then, the code calls the `self.client.credentials` method without arguments
    to clean up the credentials and calls the `self.client.get` method again with
    the same built URL, this time, without a token. Finally, the code calls assert
    to check that the status_code attribute for the response is equal to HTTP 401
    Unauthorized (`status.HTTP_401_UNAUTHORIZED`).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码不带参数调用`self.client.credentials`方法来清理凭证，并再次调用带有相同构建URL的`self.client.get`方法，这次没有令牌。最后，代码调用`assert`来检查响应的`status_code`属性是否等于HTTP
    401未授权（`status.HTTP_401_UNAUTHORIZED`）。
- en: The previously coded test makes sure that we can create a new pilot with the
    RESTful Web Service and the appropriate authentication requirement we configured,
    the pilot is persisted in the database, and the serializer does its job as expected.
    In addition, unauthenticated users aren't able to access a pilot.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 之前编写的测试确保我们可以使用RESTful Web Service和配置的适当认证要求创建一个新的飞行员，飞行员被保存在数据库中，序列化器按预期工作。此外，未经认证的用户无法访问飞行员。
- en: 'Add the `test_try_to_post_pilot_without_token` method to the recently created
    `DroneCategoryTests` class in the `restful01/drones/tests.py` file. The code file
    for the sample is included in the `hillar_django_restful_10_02` folder in the
    `restful01/drones/tests.py` file:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `test_try_to_post_pilot_without_token` 方法添加到最近创建的 `DroneCategoryTests` 类中，该类位于
    `restful01/drones/tests.py` 文件中。示例代码文件包含在 `restful01/drones/tests.py` 文件中的 `hillar_django_restful_10_02`
    文件夹内：
- en: '[PRE24]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The new method tests that the combination of permission and authentication
    classes configured for the `PilotList` class doesn''t make it possible for an
    unauthenticated HTTP `POST` request to create a pilot. The code calls the `post_pilot`
    method without configuring any credentials, and therefore the request runs without
    authentication. Then, the code calls `assert` twice to check for the following
    expected results:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法测试了为 `PilotList` 类配置的权限和认证类组合不会使未经认证的 HTTP `POST` 请求能够创建飞行员。代码在未配置任何凭证的情况下调用
    `post_pilot` 方法，因此请求未进行身份验证。然后，代码调用 `assert` 两次以检查以下预期结果：
- en: The `status_code` attribute for the response is equal to HTTP 401 Unauthorized
    (`status.HTTP_401_UNAUTHORIZED`)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 响应的 `status_code` 属性等于 HTTP 401 未授权 (`status.HTTP_401_UNAUTHORIZED`)
- en: The total number of `Pilot` objects retrieved from the database is `0` because
    the received data to create a new pilot wasn't processed
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从数据库中检索到的 `Pilot` 对象总数为 `0`，因为用于创建新飞行员的接收数据尚未处理
- en: We have increased the scenarios covered by our tests. We should write more tests
    related to pilots. However, with all the examples provided, you will have the
    necessary information to write all the tests required to make sure that each new
    version of a RESTful Web Service developed with Django and the Django REST framework
    works as expected.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经增加了测试覆盖的场景。我们应该编写更多与飞行员相关的测试。然而，通过提供的所有示例，您将拥有编写所有测试所需的信息，以确保使用 Django 和
    Django REST 框架开发的每个 RESTful Web 服务的每个新版本都能按预期工作。
- en: Running unit tests again with pytest
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 再次使用 pytest 运行单元测试
- en: 'Now, go to the `restful01` folder that contains the `manage.py` file, with
    the virtual environment activated, and run the following command to execute `pytest`
    again with the `-v` option to increase verbosity:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在激活了虚拟环境的情况下，转到包含 `manage.py` 文件的 `restful01` 文件夹，并运行以下命令再次执行 `pytest`，使用
    `-v` 选项以增加详细程度：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this case, pytest will run all the methods whose name starts with the `test_`
    prefix in both the `DroneCategoryTests` and `PilotTests` classes and display the
    results.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，pytest 将运行 `DroneCategoryTests` 和 `PilotTests` 类中所有以 `test_` 前缀开头的方法，并显示结果。
- en: 'The following screenshot shows a sample output generated for the new execution
    of the `pytest` command with the increased verbosity:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用增加的详细程度执行新的 `pytest` 命令生成的示例输出：
- en: '![](img/e539bf0a-53d0-45f4-8402-5f08dc821699.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e539bf0a-53d0-45f4-8402-5f08dc821699.png)'
- en: We enabled verbose mode again, and therefore, the output displayed the full
    test names that the `test_post_and_get_pilot` and `test_try_to_post_pilot_without_token
    test methods` passed.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次启用了详细模式，因此输出显示了 `test_post_and_get_pilot` 和 `test_try_to_post_pilot_without_token`
    测试方法通过的完整测试名称。
- en: We should continue writing tests related to pilots, drone categories, drones, and
    competitions. It is extremely important that we cover all the scenarios for our
    RESTful Web Service. Automated tests will make it possible for us to make sure
    that each new version of our RESTful Web Service will work as expected after it
    is deployed to production.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该继续编写与飞行员、无人机类别、无人机和比赛相关的测试。确保我们的 RESTful Web 服务覆盖所有场景至关重要。自动化测试将使我们能够确保在部署到生产环境后，我们的
    RESTful Web 服务的每个新版本都能按预期工作。
- en: We built RESTful Web Services with Django, the Django REST framework, and Python
    3.6\. We learned to design a RESTful Web Service from scratch, starting with the
    requirements, and to run some of the necessary tests to make sure our web service
    runs as expected. We learned to work with different command-line and GUI tools
    to make our development tests easy. We understood many features included in the
    Django REST framework and how to configure them.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Django、Django REST 框架和 Python 3.6 构建了 RESTful Web 服务。我们学习了从头开始设计 RESTful
    Web 服务，从需求开始，并运行了一些必要的测试以确保我们的 Web 服务按预期运行。我们学习了使用不同的命令行和 GUI 工具来简化我们的开发测试。我们了解了
    Django REST 框架中包含的许多功能以及如何配置它们。
- en: 'Now, we are ready to create RESTful Web Services with Django and the Django
    REST framework. We will definitely need to dive deep into additional features,
    packages, and configurations. We definitely have a great baseline to develop our
    next RESTful Web Service with the most versatile programming language: Python.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备好使用 Django 和 Django REST framework 创建 RESTful Web 服务了。我们肯定需要深入研究额外的功能、包和配置。我们肯定有一个很好的基础，用最灵活的编程语言：Python，来开发我们的下一个
    RESTful Web 服务。
- en: Test your knowledge
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: Let's see whether you can answer the following questions correctly.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看你是否能正确回答以下问题。
- en: 'In a subclass of `APITestCase`, `self.client` is:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `APITestCase` 子类中，`self.client` 是：
- en: The `APITestCase` instance that allows us to easily compose and send HTTP requests
    for testing
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许我们轻松组合和发送 HTTP 请求进行测试的 `APITestCase` 实例
- en: The `APITestClient` instance that allows us to easily compose and send HTTP
    requests for testing
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许我们轻松组合和发送 HTTP 请求进行测试的 `APITestClient` 实例
- en: The `APIClient` instance that allows us to easily compose and send HTTP requests
    for testing
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许我们轻松组合和发送 HTTP 请求进行测试的 `APIClient` 实例
- en: Which of the following lines clean up the credentials of a method within a subclass
    of `APITestCase`?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪行清理了 `APITestCase` 子类中方法的身份验证信息？
- en: '`self.client.credentials()`'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`self.client.credentials()`'
- en: '`self.client.clean_credentials()`'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`self.client.clean_credentials()`'
- en: '`self.client.credentials = {}`'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`self.client.credentials = {}`'
- en: Which of the following methods for `self.client` in a method within a subclass
    of `APITestCase` allows us to make an HTTP POST request?
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `APITestCase` 子类中的方法中，以下哪个方法允许我们发起 HTTP POST 请求？
- en: '`http_post`'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`http_post`'
- en: '`make_http_post_request`'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`make_http_post_request`'
- en: '`post`'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`post`'
- en: Which of the following methods for self.client in a method within a subclass
    of `APITestCase` allows us to make an HTTP GET request?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `APITestCase` 子类中的方法中，以下哪个方法允许我们发起 HTTP GET 请求？
- en: '`http_get`'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`http_get`'
- en: '`make_http_get_request`'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`make_http_get_request`'
- en: '`get`'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`get`'
- en: Which of the following methods for `self.client` in a method within a subclass
    of `APITestCase` allows us to make an HTTP PATCH request?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `APITestCase` 子类中的方法中，以下哪个方法允许我们发起 HTTP PATCH 请求？
- en: '`http_patch`'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`http_patch`'
- en: '`make_http_patch_request`'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`make_http_patch_request`'
- en: '`patch`'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`patch`'
- en: The rights answers are included in the [Appendix](https://cdp.packtpub.com/django_restful_web_services__/wp-admin/post.php?post=44&action=edit#post_454), *Solutions*.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 正确答案包含在[附录](https://cdp.packtpub.com/django_restful_web_services__/wp-admin/post.php?post=44&action=edit#post_454)中，*解决方案*。
- en: Summary
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned to write unit tests for our RESTful Web Service.
    We installed the necessary packages and made the appropriate configurations to
    work with the modern and popular pytest unit test framework. Then, we wrote our
    first round of unit tests for the RESTful Web Service related to different scenarios
    with drone categories.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，我们学习了如何为我们的 RESTful Web 服务编写单元测试。我们安装了必要的包，并进行了适当的配置，以便与流行的 pytest 单元测试框架一起工作。然后，我们为与无人机类别相关的不同场景编写了第一轮单元测试。 '
- en: We worked with the different options for the pytest command to discover and
    run unit tests in the default mode, the increase verbosity mode, and the disable
    capture mode. We understood how to combine pytest with the testing classed provided
    by the Django REST framework.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 pytest 命令的不同选项来发现和运行默认模式、增加详细模式和无捕获模式的单元测试。我们了解了如何将 pytest 与 Django REST
    framework 提供的测试类结合使用。
- en: Finally, we wrote additional unit tests for the RESTful Web Service related
    to different scenarios with pilots and the token authentication requirements for
    specific requests. We are able to continue adding tests for our RESTful Web Service
    with all the things we have learned.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们为与飞行员相关的不同场景以及特定请求的令牌身份验证要求编写了额外的单元测试。我们能够继续添加我们 RESTful Web 服务的测试，使用我们所学的所有内容。
- en: Now, it is your turn. You can start developing RESTful Web Services with Django, 
    Django REST framework, and Python 3.6.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，轮到你了。你可以开始使用 Django、Django REST framework 和 Python 3.6 开发 RESTful Web 服务。
