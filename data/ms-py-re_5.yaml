- en: Chapter 5. Performance of Regular Expressions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。正则表达式的性能
- en: Up to this point, we worried about learning how to leverage a feature or obtain
    a result without caring too much about how fast the process would be. Our only
    goals were correctness and readability.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们担心学习如何利用一个功能或获得一个结果，而不太关心过程的速度。我们的唯一目标是正确性和可读性。
- en: In this chapter, we are going to steer towards a completely different concern—performance.
    However, we will find that often an improvement in performance will result in
    degradation of readability. When we are modifying something to make it faster,
    we are probably making it easier for the machine to understand, and therefore,
    we are probably compromising on human readability.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将转向一个完全不同的关注点——性能。然而，我们会发现，通常性能的提高会导致可读性的降低。当我们修改某些东西以使其更快时，我们可能正在使机器更容易理解，因此，我们可能正在牺牲人类的可读性。
- en: 'On December 4, 1974, Donald Knuth, the author of the famous book *The Art of
    Computer Programming*, wrote the paper *Structured Programming* with `go-to` statements.
    This well-known quote is extracted from the paper:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 1974年12月4日，著名书籍《计算机程序设计艺术》的作者唐纳德·克努斯写了一篇名为“结构化编程”的论文，其中包含了`go-to`语句。这个著名的引用摘自这篇论文：
- en: '*"Programmers waste enormous amounts of time thinking about, or worrying about,
    the speed of noncritical parts of their programs, and these attempts at efficiency
    actually have a strong negative impact when debugging and maintenance are considered.
    We should forget about small efficiencies, say about 97% of the time: premature
    optimization is the root of all evil. Yet we should not pass up our opportunities
    in that critical 3%."*'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “程序员们浪费了大量时间思考或担心程序中非关键部分的速度，而这些对效率的努力实际上在调试和维护时产生了很大的负面影响。我们应该忘记小的效率，大约97%的时间：过早的优化是万恶之源。然而，我们不应该放弃在关键的3%中的机会。”
- en: That said, we should be careful about what we optimize. Probably, for a regular
    expression used to validate an e-mail address of a form, we should have more interest
    in readability than in performance. On the other hand, if we are writing a regular
    expression to be used in batch processing of huge historical files, we should
    be more interested in the performance.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我们应该谨慎考虑我们要优化什么。也许，对于用于验证电子邮件地址的正则表达式，我们应该更关注可读性而不是性能。另一方面，如果我们正在编写一个用于批处理大型历史文件的正则表达式，我们应该更关注性能。
- en: The most commonly used approach for optimization is to first write, then measure,
    and only then optimize that critical 3 percent. So, in this chapter, first we
    are going to learn how to measure and analyze the regular expressions, and then
    follow on with optimization techniques.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的优化方法是先编写，然后测量，然后优化关键的3%。因此，在本章中，我们首先要学习如何测量和分析正则表达式，然后再进行优化技术。
- en: Benchmarking regular expressions with Python
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python对正则表达式进行基准测试
- en: In order to benchmark our regex, we're going to measure the time a regex takes
    to execute. It's important to test them with different inputs, because with small
    inputs almost every regex is fast enough. However, with longer ones it can be
    a completely different beast, as we will see later in the section *Backtracking*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对我们的正则表达式进行基准测试，我们将测量正则表达式执行所需的时间。重要的是要用不同的输入来测试它们，因为对于小输入，几乎每个正则表达式都足够快。然而，对于更长的输入，情况可能完全不同，正如我们将在*回溯*部分中看到的那样。
- en: 'First, we''re going to create a small function to help us with this task:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个小函数来帮助我们完成这个任务：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So, we can test a regex using the following code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以使用以下代码测试正则表达式：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Python comes with a built-in profiler [http://docs.python.org/2/library/profile.html](http://docs.python.org/2/library/profile.html)
    that we can also use to measure the time and the number of calls, among other
    things:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Python自带了一个内置的分析器[http://docs.python.org/2/library/profile.html](http://docs.python.org/2/library/profile.html)，我们也可以用它来测量时间和调用次数等：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can see the output in the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下截图中看到输出：
- en: '![Benchmarking regular expressions with Python](graphics/3156OS_05_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![使用Python对正则表达式进行基准测试](graphics/3156OS_05_01.jpg)'
- en: Profiling output
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 分析输出
- en: 'Let''s see another useful technique that is going to help when you want to
    see what''s going on under the hook of your regex. It''s something that we''ve
    seen before in [Chapter 2](ch02.html "Chapter 2. Regular Expressions with Python"),
    *Regular Expressions with Python*, the flag DEBUG. Recall that it gives us information
    about how the pattern is compiled. For example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一种有用的技术，当你想要查看正则表达式下的情况时，这将会有所帮助。这是我们在[第2章](ch02.html "第2章。使用Python进行正则表达式")中已经见过的东西，*使用Python进行正则表达式*，标志DEBUG。回想一下，它为我们提供了有关模式如何编译的信息。例如：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we can see three `max_repeat` conditions from `1` to `4294967295`, two
    of them inside another `max_repeat`. Think about them as nested loops, as you're
    probably thinking this is a bad smell. In fact, this will lead you to a **catastrophic
    backtracking**, something that we'll see later.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到三个`max_repeat`条件从`1`到`4294967295`，其中两个嵌套在另一个`max_repeat`中。把它们想象成嵌套循环，你可能会觉得这是一种不好的迹象。事实上，这将导致**灾难性的回溯**，这是我们稍后会看到的。
- en: The RegexBuddy tool
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RegexBuddy工具
- en: Among the different tools available for better productivity while writing regular
    expressions, **RegexBuddy** ([http://www.regexbuddy.com/](http://www.regexbuddy.com/))
    by Just Great Software Co. Ltd. is outstanding.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写正则表达式时，有许多不同的工具可用于提高生产力，其中**RegexBuddy**([http://www.regexbuddy.com/](http://www.regexbuddy.com/))由Just
    Great Software Co. Ltd.开发的工具非常出色。
- en: The mastermind behind Just Great Software is Jan Goyvaerts, the same person
    who is behind **Regular-Expressions.info** ([http://www.regular-expressions.info/](http://www.regular-expressions.info/)),
    one of the most well-known references on the Internet for regular expressions.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Just Great Software的幕后推手是Jan Goyvaerts，也是**Regular-Expressions.info**([http://www.regular-expressions.info/](http://www.regular-expressions.info/))的幕后人物，这是互联网上最著名的正则表达式参考之一。
- en: 'With RegexBuddy, we can use a visual interface for building, testing, and debugging
    regular expressions. The debug feature is almost unique, and provides a great
    mechanism to understand how the regular expression engine is working behind the
    scenes. In the following screenshot, we can see RegexBuddy debugging the execution
    of a regular expression:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用RegexBuddy，我们可以使用可视化界面构建、测试和调试正则表达式。调试功能几乎是独一无二的，并提供了一个很好的机制来理解正则表达式引擎在幕后的工作方式。在下面的截图中，我们可以看到RegexBuddy调试正则表达式的执行：
- en: '![The RegexBuddy tool](graphics/3156OS_05_02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![RegexBuddy工具](graphics/3156OS_05_02.jpg)'
- en: RegexBuddy debugging a regular expression
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: RegexBuddy调试正则表达式
- en: It does have other features, such as a library of commonly used regular expressions
    and a code generator for different programming environments.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 它确实具有其他功能，例如常用正则表达式库和不同编程环境的代码生成器。
- en: Although it has a couple of downsides, its license is proprietary and the only
    build available is for Windows. However, the execution on Linux using the **wine
    emulator** is supported.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它有一些缺点，但它的许可证是专有的，唯一可用的构建是Windows。然而，可以使用**wine模拟器**在Linux上执行。
- en: Understanding the Python regex engine
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Python正则表达式引擎
- en: The `re` module uses a backtracking regular expression engine; although, in
    the very well-known book *Mastering Regular Expressions* by *Jeffrey E. F. Friedl*,
    it is classified as **Nondeterministic Finite Automata** (**NFA**) type. Also,
    according to *Tim Peters* ([https://mail.python.org/pipermail/tutor/2006-January/044335.html](https://mail.python.org/pipermail/tutor/2006-January/044335.html)),
    the module is not purely NFA.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`re`模块使用回溯正则表达式引擎；尽管在*Jeffrey E. F. Friedl*的著名书籍*《精通正则表达式》*中，它被归类为**非确定性有限自动机**（**NFA**）类型。此外，根据*Tim
    Peters*（[https://mail.python.org/pipermail/tutor/2006-January/044335.html](https://mail.python.org/pipermail/tutor/2006-January/044335.html)），该模块并非纯粹的NFA。'
- en: 'These are the most common characteristics of the algorithm:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是算法的最常见特征：
- en: It supports "lazy quantifiers" such as `*?`, `+?`, and `??`.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持“懒惰量词”，如`*?`、`+?`和`??`。
- en: It matches the first coincidence, even though there are longer ones in the string.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它匹配第一个匹配项，即使在字符串中有更长的匹配项。
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This also means that order is important.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着顺序很重要。
- en: The algorithm tracks only one transition at one step, which means that the engine
    checks one character at a time.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该算法一次只跟踪一个转换，这意味着引擎一次只检查一个字符。
- en: Backreferences and capturing parentheses are supported.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持反向引用和捕获括号。
- en: '**Backtracking** is the ability to remember the last successful position so
    that it can go back and retry if needed'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回溯**是记住上次成功位置的能力，以便在需要时可以返回并重试'
- en: In the worst case, complexity is exponential O(*C^n*). We'll see this later
    in *Backtracking*.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在最坏的情况下，复杂度是指数级的O(*C^n*)。我们稍后会在*回溯*中看到这一点。
- en: Backtracking
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回溯
- en: 'As we''ve mentioned before, backtracking allows going back and repeating the
    different paths of the regular expression. It does so by remembering the last
    successful position. This applies to alternation and quantifiers. Let''s see an
    example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，回溯允许返回并重复正则表达式的不同路径。它通过记住上次成功的位置来实现。这适用于交替和量词。让我们看一个例子：
- en: '![Backtracking](graphics/3156OS_05_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![回溯](graphics/3156OS_05_03.jpg)'
- en: Backtracking
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 回溯
- en: As you can see in the preceding figure, the regex engine tries to match one
    character at a time until it fails, and then starts again with the next path it
    can retry.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在上图中看到的，正则表达式引擎尝试一次匹配一个字符，直到失败，然后从下一个可以重试的路径开始重新开始。
- en: The regex used in the figure is a perfect example of the importance of how the
    regex is built. In this case, the expression can be rebuilt as `spa(in|niard)`
    so that the regex engine doesn't have to go back to the start of the string in
    order to retry the second alternative.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在图中使用的正则表达式是如何构建正则表达式的重要性的完美例子。在这种情况下，表达式可以重建为`spa(in|niard)`，这样正则表达式引擎就不必返回到字符串的开头来重试第二个选择。
- en: This leads us to something called a catastrophic backtracking; a well-known
    problem with backtracking that can give you several problems ranging from slow
    regex to a crash with a stack overflow.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了一种称为灾难性回溯的东西；这是回溯的一个众所周知的问题，它可能会给你带来从缓慢的正则表达式到堆栈溢出的崩溃等多种问题。
- en: In the previous example, you can see that the behavior grows not only with the
    input but also with different paths in the regex, so the algorithm can be exponential
    O(*C^n*). With this in mind, it's easy to understand why we can end up with a
    stack overflow. The problem arises when the regex fails to match the string. Let's
    benchmark a regex with a technique we've seen previously so that we can understand
    the problem better.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，你可以看到行为不仅随着输入而增长，而且随着正则表达式中不同的路径而增长，因此算法可能是指数级的O(*C^n*)。有了这个想法，就很容易理解为什么我们最终可能会遇到堆栈溢出的问题。当正则表达式无法匹配字符串时，问题就出现了。让我们用之前见过的技术来对正则表达式进行基准测试，以便更好地理解问题。
- en: 'First, let''s try a simple regex:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们尝试一个简单的正则表达式：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, the text we''re trying to match is always going to fail as
    there is no `c` at the end. Let''s test it with different inputs:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们试图匹配的文本总是会失败，因为末尾没有`c`。让我们用不同的输入进行测试：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The behavior of this regex looks as if it is quadratic. But why? What's happening
    here? The problem is that `(a+)` starts greedy, so it tries to get as many `a`
    characters as possible. After that, it fails to match the `c`, that is, it backtracks
    to the second `a`, and continues consuming `a` characters until it fails to match
    `c`. And then, it tries the whole process again (backtracks) starting with the
    second `a` character.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正则表达式的行为看起来像是二次的。但是为什么？这里发生了什么？问题在于`(a+)`是贪婪的，所以它试图尽可能多地获取`a`字符。之后，它无法匹配`c`，也就是说，它回溯到第二个`a`，并继续消耗`a`字符，直到无法匹配`c`。然后，它再次尝试整个过程（回溯），从第二个`a`字符开始。
- en: 'Let''s see another example, in this case with an exponential behavior:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子，这次是指数级的行为：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As you can see, the behavior is exponential, which can lead to catastrophic
    scenarios. Finally, let''s see what happens when the regex has a match:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这种行为是指数级的，可能导致灾难性的情况。最后，让我们看看当正则表达式有匹配时会发生什么：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Optimization recommendations
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化建议
- en: In the following sections, we will find a number of recommendations that could
    be applied to improve regular expressions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将找到一些可以应用于改进正则表达式的建议。
- en: The best tool will always be common sense, and common sense will need to be
    used even while following these recommendations. It has to be understood when
    the recommendation is applicable and when it is not. For instance, the recommendation
    **don't be greedy** cannot be used in all the cases.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的工具始终是常识，即使在遵循这些建议时，也需要使用常识。必须理解建议何时适用，何时不适用。例如，建议“不要贪婪”并不适用于所有情况。
- en: Reuse compiled patterns
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重用编译模式
- en: We have learned in [Chapter 2](ch02.html "Chapter 2. Regular Expressions with
    Python"), *Regular Expressions with Python*, that to use a regular expression
    we have to convert it from its string representation to a compiled form as `RegexObject`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第2章](ch02.html "第2章。使用Python进行正则表达式")中学到，要使用正则表达式，我们必须将其从字符串表示形式转换为编译形式，即`RegexObject`。
- en: This compilation takes some time. If we are using the rest of the module operations
    instead of using the compile function to avoid the creation of the `RegexObject`,
    we should understand that the compilation is executed anyway and a number of compiled
    `RegexObject` are cached automatically.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这种编译需要一些时间。如果我们使用模块操作的其余部分而不是使用编译函数来避免创建`RegexObject`，我们应该明白编译仍然会执行，并且一些编译的`RegexObject`会自动缓存。
- en: However, when we are compiling, that cache won't back us. Every single compile
    execution will consume an amount of time that perhaps could be negligible for
    a single execution, but it's definitely relevant if many executions are performed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们进行编译时，缓存不会支持我们。每次编译执行都会消耗一定的时间，对于单次执行来说可能可以忽略不计，但如果执行多次则肯定是相关的。
- en: 'Let''s see the difference between reusing and not reusing the compiled patterns
    in the following example:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在以下示例中重用和不重用编译模式的区别：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Extract common parts in alternation
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在交替中提取公共部分
- en: Alternation is always a performance risk in regular expressions. When using
    them in a sort of NFA implementation, in Python, we should extract any common
    part outside of the alternation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在正则表达式中，交替总是存在性能风险。在Python中使用NFA实现时，我们应该将任何公共部分提取到交替之外。
- en: 'For instance, if we have `/(Hello`![Extract common parts in alternation](graphics/inlinemedia.jpg)`World|Hello`![Extract
    common parts in alternation](graphics/inlinemedia.jpg)`Continent|Hello`![Extract
    common parts in alternation](graphics/inlinemedia.jpg)`Country,)/`,we could easily
    extract `Hello`![Extract common parts in alternation](graphics/inlinemedia.jpg)
    with the following expression: `/Hello`![Extract common parts in alternation](graphics/inlinemedia.jpg)`(World|Continent|Country)/`.
    This would enable our engine to just check `Hello`![Extract common parts in alternation](graphics/inlinemedia.jpg)
    once, and it will not go back to recheck for each possibility. In the following
    example, we can see the difference on execution:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有`/(Hello`![在交替中提取公共部分](graphics/inlinemedia.jpg)`World|Hello`![在交替中提取公共部分](graphics/inlinemedia.jpg)`Continent|Hello`![在交替中提取公共部分](graphics/inlinemedia.jpg)`Country,)/`，我们可以很容易地用以下表达式提取`Hello`![在交替中提取公共部分](graphics/inlinemedia.jpg)：`/Hello`![在交替中提取公共部分](graphics/inlinemedia.jpg)`(World|Continent|Country)/`。这将使我们的引擎只检查一次`Hello`![在交替中提取公共部分](graphics/inlinemedia.jpg)，而不会回头重新检查每种可能性。在下面的示例中，我们可以看到执行上的差异：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Shortcut to alternation
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交替的快捷方式
- en: Ordering in alternation is relevant, each of the different options present in
    the alternation will be checked one by one, from left to right. This can be used
    in favor of performance.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在交替中的顺序很重要，交替中的每个不同选项都将逐个检查，从左到右。这可以用来提高性能。
- en: If we place the more likely options at the beginning of the alternation, more
    checks will mark the alternation as matched sooner.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将更有可能的选项放在交替的开头，更多的检查将更早地标记交替为匹配。
- en: For instance, we know that the more common colors of cars are white and black.
    If we are writing a regular expression to accept some colors, we should put white
    and black first as those are more likely to appear. We can frame the regex like
    this `/(white|black|red|blue|green)/`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们知道汽车的常见颜色是白色和黑色。如果我们要编写一个接受一些颜色的正则表达式，我们应该将白色和黑色放在前面，因为这些更有可能出现。我们可以将正则表达式写成这样`/(white|black|red|blue|green)/`。
- en: 'For the rest of the elements, if they have the very same odds of appearing,
    it could be favorable to put the shortest ones before the longer ones:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其余的元素，如果它们出现的几率完全相同，将较短的放在较长的前面可能是有利的：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Use non-capturing groups when appropriate
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在适当的时候使用非捕获组
- en: Capturing groups will consume some time for each group defined in an expression.
    This time is not very important, but it is still relevant if we are executing
    a regular expression several times.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获组将为表达式中定义的每个组消耗一些时间。这个时间并不是很重要，但如果我们多次执行正则表达式，它仍然是相关的。
- en: Sometimes, we use groups but we might not be interested in the result, for instance,
    when using alternation. If that is the case, we can save some execution time of
    the engine by marking that group as non-capturing, for example, `(?:person|company)`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们使用组，但可能对结果不感兴趣，例如在使用交替时。如果是这种情况，我们可以通过将该组标记为非捕获来节省引擎的一些执行时间，例如`(?:person|company)`。
- en: Be specific
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具体化
- en: When the patterns we define are very specific, the engine can help us perform
    quick integrity checks before the actual pattern matching is executed.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们定义的模式非常具体时，引擎可以在实际模式匹配之前帮助我们执行快速的完整性检查。
- en: For instance, if we pass the expression `/\w{15}/` to the engine to match it
    against the text `hello`, the engine could decide to check whether the input string
    is actually at least 15 characters long instead of matching the expression.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们将表达式`/\w{15}/`传递给引擎，以匹配文本`hello`，引擎可能决定检查输入字符串是否实际上至少有15个字符长，而不是匹配表达式。
- en: Don't be greedy
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要贪心
- en: We've studied about quantifiers in [Chapter 1](ch01.html "Chapter 1. Introducing
    Regular Expressions"), *Introducing Regular Expressions*, and we learned the difference
    between greedy and reluctant quantifiers. We also found that the quantifiers are
    greedy by default.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第1章](ch01.html "第1章。介绍正则表达式")*介绍正则表达式*中学习了量词，并了解了贪婪和勉强量词之间的区别。我们还发现量词默认是贪婪的。
- en: What does this mean in terms of performance? It means that the engine will always
    try to catch as many characters as possible, and then reduce the scope step-by-step
    until the matching is done. This could potentially make the regular expression
    slow if the match is typically short. Keep in mind, however, that this is only
    applicable if the match is usually short.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这在性能方面意味着什么？这意味着引擎将始终尝试尽可能多地捕获字符，然后逐步缩小范围，直到匹配完成。如果匹配通常很短，这可能使正则表达式变慢。然而，请记住，这仅适用于匹配通常很短的情况。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this final chapter, we have started learning the relevance of optimization
    and why we should avoid premature optimization by measuring. Then, we jumped into
    the topic of measuring by learning different mechanisms to measure the time of
    execution for our regular expressions. Later, we found out about the RegexBuddy
    tool that can help us to understand how the engine is doing its work and aiding
    us in pinpointing the performance problems.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这最后一章中，我们开始学习优化的相关性，以及为什么我们应该避免过早的优化。然后，我们深入了解了通过学习不同的机制来测量正则表达式的执行时间。后来，我们了解了RegexBuddy工具，它可以帮助我们了解引擎是如何工作的，并帮助我们找出性能问题。
- en: Later on, we understood how to see the engine working behind the scenes. We
    learned some theory of the engine design and how it's easy to fall in a common
    pitfall—the catastrophic backtracking.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，我们了解了如何看到引擎在幕后的工作。我们学习了一些引擎设计的理论，以及如何容易陷入常见的陷阱——灾难性的回溯。
- en: Finally, we reviewed different general recommendations to improve the performance
    of our regular expressions.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们回顾了不同的一般建议，以改善我们的正则表达式的性能。
