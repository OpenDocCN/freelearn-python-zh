- en: Chapter 3. Getting Creative with PDF Files and Documents
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 用PDF文件和文档发挥创意
- en: Word documents and PDF files are some of the most used file formats by business
    professionals. Want to send an invoice to you customer or send a set of requirements
    to your vendor, businesses often end up using PDF files and documents for their
    needs. Let's see how we can work with these file formats in Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Word文档和PDF文件是商业专业人士最常用的文件格式之一。你想向客户发送发票或向供应商发送一组需求，企业通常会使用PDF文件和文档来满足他们的需求。让我们看看如何在Python中处理这些文件格式。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Extracting data from PDF files
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从PDF文件中提取数据
- en: Creating and copying PDF documents
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和复制PDF文档
- en: Manipulating PDFs (adding header/footer, merge, split, delete)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作PDF（添加页眉/页脚，合并，拆分，删除）
- en: Automating generation of payslips for finance department
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动生成财务部门的工资条
- en: Reading Word documents
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取Word文档
- en: Writing data into Word documents (adding headings, images, tables)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据写入Word文档（添加标题，图片，表格）
- en: Generating personalized new hire orientation for HR team in an automated way
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以自动化的方式为HR团队生成个性化的新员工入职培训
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the previous few chapters, we looked at working with CSV files and then extended
    our scope to learn about working with Excel worksheets. While CSV files are in
    a simple text format, Excel files are available in binary format.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们研究了如何处理CSV文件，然后扩展了我们的范围来学习如何处理Excel工作表。虽然CSV文件是简单的文本格式，但Excel文件是二进制格式。
- en: 'In this chapter, we will discuss two more binary file formats: `.pdf` and `.docx`.
    You''ll build knowledge on generating and reading PDF files, copying them and
    even manipulating them to build your own header and footer formats. Do you know
    you could merge many PDF files with a simple Python recipe?'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论另外两种二进制文件格式：`.pdf`和`.docx`。你将建立关于生成和读取PDF文件、复制它们甚至操作它们以构建自己的页眉和页脚格式的知识。你知道你可以通过简单的Python食谱合并多个PDF文件吗？
- en: This chapter also takes you on a journey of working with Word documents. It
    helps you build knowledge on reading and writing data into Word files. Adding
    tables, images, charts, you name it and this chapter covers it. Sounds interesting?
    Then this chapter is definitely for you!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还将带你了解如何处理Word文档。它帮助你建立关于读取和将数据写入Word文件的知识。添加表格、图片、图表，你想要的这里都有。听起来很有趣？那么这一章绝对适合你！
- en: 'Specifically, we will focus on the following Python modules in this chapter:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中，我们将重点关注以下Python模块：
- en: '`PyPDF2` ([https://pythonhosted.org/PyPDF2/](https://pythonhosted.org/PyPDF2/))'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PyPDF2` ([https://pythonhosted.org/PyPDF2/](https://pythonhosted.org/PyPDF2/))'
- en: '`fpdf` ([https://pyfpdf.readthedocs.io/](https://pyfpdf.readthedocs.io/))'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fpdf` ([https://pyfpdf.readthedocs.io/](https://pyfpdf.readthedocs.io/))'
- en: '`python-docx` ([http://python-docx.readthedocs.io/en/latest/](http://python-docx.readthedocs.io/en/latest/))'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python-docx` ([http://python-docx.readthedocs.io/en/latest/](http://python-docx.readthedocs.io/en/latest/))'
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While you'll learn about the majority of operations supported by `.pdf` and `.docx`
    files in this chapter, we won't be able to cover them in their entirety. I'd recommend
    you to try out the remaining APIs from the libraries discussed in this chapter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在本章中你将学习到`.pdf`和`.docx`文件所支持的多数操作，但我们无法全面涵盖它们。我建议你尝试本章讨论的库中剩余的API。
- en: Extracting data from PDF files
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从PDF文件中提取数据
- en: '**PDF** (**Portable Document Format**) is a file format used to store data
    in documents agnostic to application software, hardware, and operating systems
    (hence the name, portable). PDF documents are fixed-layout flat files that include
    text and graphics and contain information needed to display the content. This
    recipe will show you how to extract information from PDF files and use the reader
    object.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**PDF**（**便携式文档格式**）是一种用于在文档中存储数据，与应用程序软件、硬件和操作系统无关的文件格式（因此得名，便携）。PDF文档是固定布局的平面文件，包含文本和图形，并包含显示内容所需的信息。这个食谱将向你展示如何从PDF文件中提取信息并使用阅读器对象。'
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To step through this recipe, you will need to install Python v2.7\. To work
    with PDF files, we have `PyPDF2`, a nice module that can be installed with the
    following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要逐步执行此食谱，你需要安装Python v2.7。要处理PDF文件，我们有`PyPDF2`，这是一个很好的模块，可以使用以下命令安装：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Already installed the module? So, let's get started!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 已经安装了模块？那么，让我们开始吧！
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: On your Linux/Mac computer, go to Terminal and use Vim or choose your favorite
    editor.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的Linux/Mac计算机上，前往终端并使用Vim或选择你喜欢的编辑器。
- en: We start by downloading an existing PDF file from the Internet. Let's download
    the `diveintopython.pdf` file.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先从互联网上下载一个现有的PDF文件。让我们下载`diveintopython.pdf`文件。
- en: Note
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can search for this file on the Internet and easily obtain it. You'll also
    get the file if you download the code samples for this book.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在互联网上搜索这个文件并轻松获取它。如果你下载了这本书的代码示例，你也会得到这个文件。
- en: 'Now, let''s write the Python code for creating a PDF file reader object:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们编写创建PDF文件读取对象的Python代码：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of the preceding code snippet is as follows:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码片段的输出如下：
- en: '![How to do it...](img/image_04_001.jpg)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_001.jpg)'
- en: 'That''s good; we now have a reader object of the PDF file. Let''s move on to
    see what we can achieve with this object, based on the following Python code:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这很好；我们现在有了PDF文件的读者对象。让我们继续看看我们可以用这个对象做什么，基于以下Python代码：
- en: '[PRE2]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output of the preceding code snippet is shown in the following screenshot.
    See how we use the `PdfFileReader` object to get the metadata of the file:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码片段的输出如下所示。看看我们是如何使用`PdfFileReader`对象来获取文件元数据的：
- en: '![How to do it...](img/image_04_002.jpg)'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_002.jpg)'
- en: 'OK, that''s neat! But we''d like to extract the contents of the file, wouldn''t we?
    Let''s go ahead and look at how to achieve this with a simple code snippet:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，这很整洁！但我们都想提取文件的内容，不是吗？让我们继续看看如何通过一个简单的代码片段来实现这一点：
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So, what are we doing in the preceding code? I guess, the `print` statement
    is obvious. Yes, we read the first page of the `diveintopython` book. The following screenshot
    shows the contents of the first page of the `diveintopython` book:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 那么，我们在前面的代码中做了什么？我猜，`print`语句很明显。是的，我们读取了`diveintopython`书的首页。以下屏幕截图显示了`diveintopython`书的第一页内容：
- en: '![How to do it...](img/image_04_003.jpg)'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_003.jpg)'
- en: The contents are partial (as I couldn't fit the entire page in a screenshot),
    but as you can see, the contents are not in the same format as in the PDF file.
    This is a shortcoming with the text extract of the PDF file. Even though not 100%,
    we can still get the PDF file contents with decent accuracy.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 内容是部分性的（因为我无法将整个页面放入截图），但正如你所见，内容格式与PDF文件中的格式不同。这是PDF文件文本摘录的一个缺点。尽管不是100%，但我们仍然可以以相当高的准确性获取PDF文件的内容。
- en: 'Let''s do one more interesting operation with the `PdfFileReader` object. How
    about getting the book outline with it? Yes, this is easily achievable in Python:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们用`PdfFileReader`对象做另一个有趣的操作。用它来获取书籍大纲怎么样？是的，这在Python中很容易实现：
- en: '[PRE4]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the preceding code example can be seen in the following screenshot.
    As you can see, we get the complete outline of the book. In the beginning, we
    see the introduction of `Dive Into Python` and `Table of Contents`. Then we get
    the names of all the chapters, starting from `Chapter 1` to `Chapter 18`, and
    also the appendix, from `Appendix A` to `Appendix H`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码示例的输出可以在以下屏幕截图中看到。正如你所见，我们得到了书的完整大纲。一开始，我们看到`Dive Into Python`的介绍和`目录`。然后我们得到了从`第一章`到`第十八章`的所有章节名称，以及从`附录A`到`附录H`的附录：
- en: '![How to do it...](img/image_04_004.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_004.jpg)'
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the first code snippet, we used the `PdfFileReader` class from the `PyPDF2`
    module to generate an object. This object opens up the possibilities of reading
    and extracting information from the PDF file.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个代码片段中，我们使用了`PyPDF2`模块中的`PdfFileReader`类来生成一个对象。这个对象打开了从PDF文件中读取和提取信息的大门。
- en: In the next code snippet, we used the `PdfFileReader` object to get the metadata
    of the file. We got the book details, such as the number of pages in the book,
    the book**'**s title, and also the name of the author.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个代码片段中，我们使用了`PdfFileReader`对象来获取文件元数据。我们得到了书籍的详细信息，例如书的页数、书的标题以及作者的名字。
- en: In the third example, we used the reader object that was created from the `PdfFileReader`
    class and pointed to the first page of the `diveintopython` book. This creates
    a `page` object represented by the `page` variable. We then used the `page` object
    and read the contents of the page with the `extractText()` method.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三个例子中，我们使用了从`PdfFileReader`类创建的读者对象，并指向`diveintopython`书的首页。这创建了一个由`page`变量表示的`page`对象。然后我们使用了`page`对象，并通过`extractText()`方法读取页面的内容。
- en: Finally, in the last code snippet of this recipe, we used the `getOutlines()`
    method to retrieve the book's outline as an array. The outline not only returns
    the topic's titles but also returns the subtopics under the main topic. In our
    example though, we filtered the subtopics and just printed the main outline of
    the book as seen in the screenshot.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在这个菜谱的最后一段代码中，我们使用了 `getOutlines()` 方法来检索书籍的大纲作为一个数组。大纲不仅返回主题的标题，还返回主主题下的子主题。在我们的例子中，我们过滤了子主题，只打印了如图所示的书籍主大纲。
- en: There's more...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Cool, so we looked at multiple things that we could achieve with `PdfFileReader`.
    You learnt about reading the file metadata, reading the outline, browsing to a
    given page in a PDF file, and extracting the text information. All this is great,
    but hey, we'd like to create new PDF files, right?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷，所以我们已经查看了一些可以使用 `PdfFileReader` 实现的功能。你学习了如何读取文件元数据，读取大纲，浏览 PDF 文件中的指定页面，以及提取文本信息。所有这些都很棒，但是嘿，我们还想创建新的
    PDF 文件，对吧？
- en: Creating and copying PDF documents
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和复制 PDF 文档
- en: Working with PDFs adds more value when you can create them from scratch programmatically.
    Let's see how we can create our own PDF files in this section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PDFs 添加更多价值，当你能够从零开始以编程方式创建它们时。让我们看看在本节中我们如何创建自己的 PDF 文件。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will continue to use the `PyPDF2` module for this recipe and will deal with
    its `PdfFileWriter` and `PdfFileMerger` classes. We will also use another module, `fpdf`,
    to demonstrate adding content to PDF files. We will talk about this later in the
    recipe.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用 `PyPDF2` 模块来完成这个菜谱，并将处理其 `PdfFileWriter` 和 `PdfFileMerger` 类。我们还将使用另一个模块
    `fpdf` 来演示向 PDF 文件中添加内容。我们将在菜谱的后面讨论这个问题。
- en: How to do it...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We can create a PDF file in multiple ways; in this example, we copy the contents
    of an old file to generate a new PDF file. We start by taking an existing PDF--`Exercise.pdf`.
    The following screenshot shows the contents of this file. It contains two pages;
    the first page is a technical exercise and the second page gives possible hints
    for the solution of the exercise, as shown in the following screenshot:![How to
    do it...](img/image_04_005.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过多种方式创建 PDF 文件；在这个例子中，我们复制旧文件的内容来生成新的 PDF 文件。我们首先取一个现有的 PDF 文件--`Exercise.pdf`。下面的截图显示了该文件的内容。它包含两页；第一页是一个技术练习，第二页给出了练习解决方案的可能提示，如图所示：![如何做到这一点...](img/image_04_005.jpg)
- en: 'We will create a new PDF file by reading `Exercise.pdf` and writing the contents
    of the first page of the exercise into the new file. We will also add a blank
    page to the newly created PDF file. Let''s start by writing some code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过读取 `Exercise.pdf` 并将练习的第一页内容写入新文件来创建一个新的 PDF 文件。我们还将向新创建的 PDF 文件中添加一个空白页。让我们先写一些代码：
- en: '[PRE5]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding code, we import the appropriate classes from the `PyPDF2` module.
    As we need to read the `Exercise.pdf` file and then write the contents into a new
    PDF file, we will need both the `PdfFileReader` and `PdfFileWriter` classes. We
    then go ahead and open the exercise file in read mode with the `open()` method
    and create a reader object, `infile`. Later, we instantiate `PdfFileWriter` and
    create an object, `outfile`, which will be used to write the contents to the new
    file.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们从 `PyPDF2` 模块中导入了适当的类。由于我们需要读取 `Exercise.pdf` 文件并将内容写入新的 PDF 文件，我们需要
    `PdfFileReader` 和 `PdfFileWriter` 类。然后我们使用 `open()` 方法以读取模式打开练习文件，并创建一个名为 `infile`
    的读取对象。稍后，我们实例化 `PdfFileWriter` 并创建一个名为 `outfile` 的对象，该对象将用于将内容写入新文件。
- en: Let's move on and add a blank page to the `outfile` object using the `addBlankPage()`
    method. The page dimensions are typically 8.5 x 11 inches, but in this case, we
    need to convert them into units, which is 612 x 792 point.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们继续前进，并使用 `addBlankPage()` 方法向 `outfile` 对象中添加一个空白页。页面的尺寸通常是 8.5 x 11 英寸，但在这个例子中，我们需要将它们转换为点单位，即
    612 x 792 点。
- en: Tip
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '*Point* is a desktop publishing point also known as PostScript point. 100 point=1.38
    inch.'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*点* 是桌面出版点，也称为 PostScript 点。100 点 = 1.38 英寸。'
- en: 'Next, we read the contents of the first page of `Exercise.pdf` with the `getPage()`
    method. Once we have the page object `p`, we pass this object to the writer object.
    The writer object uses the `addPage()` method to add the contents to the new file:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用 `getPage()` 方法读取 `Exercise.pdf` 的第一页内容。一旦我们有了页面对象 `p`，我们就将这个对象传递给写入对象。写入对象使用
    `addPage()` 方法将内容添加到新文件中：
- en: '[PRE6]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: So far, we have created an output PDF file object `outfile`, but haven't yet
    created the file.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了一个输出 PDF 文件对象 `outfile`，但还没有创建文件。
- en: 'OK, cool! Now we have the writer object and the contents to be written into
    the new PDF file. So, we create a new PDF file with the `open()` method and use
    the writer object to write the contents and generate the new PDF, `myPdf.pdf` (this
    is where the PDF file is available on the file system for us to view). The following code
    achieves this. Here, `f` is the file handle of the newly created PDF file:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，太棒了！现在我们有了写入对象和要写入新PDF文件的内容。因此，我们使用`open()`方法创建一个新的PDF文件，并使用写入对象写入内容，生成新的PDF文件`myPdf.pdf`（这是PDF文件在文件系统上的可用位置，我们可以查看）。以下代码实现了这一点。在这里，`f`是新创建的PDF文件的文件句柄：
- en: '[PRE7]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The following screenshot shows the contents of the newly created PDF file. As
    you can see, the first page is the blank page and the second page contains the
    contents of the first page of the `Exercise.pdf` file. Sweet, isn't it!
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了新创建的PDF文件的内容。正如你所见，第一页是空白页，第二页包含了`Exercise.pdf`文件的第一页内容。太棒了，不是吗！
- en: '![How to do it...](img/image_04_006.jpg)'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_006.jpg)'
- en: 'But hey, we always need to create a PDF file from scratch! Yes, there is another
    way to create a PDF file. For this we will install a new module `fpdf` using the
    following command:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是，嘿，我们总是需要从头开始创建一个PDF文件！是的，还有另一种创建PDF文件的方法。为此，我们将使用以下命令安装一个新的模块`fpdf`：
- en: '[PRE8]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s look at a very basic example, as given in the following code snippet:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看以下代码片段中给出的一个非常基本的例子：
- en: '[PRE9]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, we instantiate the `FPDF()` class from the `fpdf` module and
    create an object, `pdf`, which essentially represents the PDF file. While creating
    the object, we also define the default format of the PDF file, which is `letter`.
    The `fpdf` module supports multiple formats, such as `A3`, `A4`, `A5`, `Letter`,
    and `Legal`.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，我们从`fpdf`模块实例化`FPDF()`类并创建一个对象，`pdf`，它本质上代表了PDF文件。在创建对象时，我们还定义了PDF文件的默认格式，即`letter`。`fpdf`模块支持多种格式，例如`A3`、`A4`、`A5`、`Letter`和`Legal`。
- en: 'Next, we start inserting content into the file. But hey, the file is still
    empty, so before we write content, we use the `add_page()` method to insert a
    new page and also set the font using the `set_font()` method. We have set the
    font to `Arial` and its size to `12`:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们开始将内容插入到文件中。但是，嘿，文件仍然是空的，所以在我们写入内容之前，我们使用`add_page()`方法插入一个新页面，并使用`set_font()`方法设置字体。我们将字体设置为`Arial`，大小为`12`：
- en: '[PRE10]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we actually start writing content to the file with the `cell()` method.
    Cell is a rectangular area that contains some text. So, as you can see in the
    following code, we add a new line, `Welcome to Automate It!`, and follow it up
    with another line, `Created by Chetan`. There are a few things that you must have
    observed. 200 x 10 is the height x width of the cell. The `ln=1` designates a
    new line and `align=C` aligns the text to the center of the page. You may get
    into issues when adding long text to a cell, but the `fpdf` module has a `multi_cell()`
    method, which automatically breaks long lines of text with the available effective
    page width. You can always calculate the page width:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们实际上开始使用`cell()`方法将内容写入文件。单元格是一个包含一些文本的矩形区域。所以，正如你在以下代码中所见，我们添加了一行新内容`欢迎来到自动化！`，然后紧接着又添加了一行`由Chetan创建`。你必须注意一些事情。200
    x 10是单元格的高度和宽度。`ln=1`指定了新的一行，`align=C`将文本对齐到页面中心。当你向单元格添加长文本时可能会遇到问题，但`fpdf`模块有一个`multi_cell()`方法，它可以自动使用可用的有效页面宽度断开长文本行。你总是可以计算出页面宽度：
- en: '[PRE11]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output of the preceding code is a PDF file with contents as shown in the
    following screenshot:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码的输出是一个包含以下截图所示内容的PDF文件：
- en: '![How to do it...](img/image_04_007.jpg)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_007.jpg)'
- en: Manipulating PDFs (adding header/footer, merge, split, delete)
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作PDF（添加页眉/页脚、合并、拆分、删除）
- en: Ever wondered if you could merge PDF files programatically in a few seconds?
    Or could update header and footer of many PDF files in a jiffy? In this recipe,
    lets move on to do some interesting and most frequently performed operations on
    PDF files in this recipe.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否想过能否在几秒钟内以编程方式合并PDF文件？或者能否迅速更新许多PDF文件的头和尾？在这个菜谱中，让我们继续做一些有趣且最常执行的操作，即对PDF文件进行操作。
- en: Getting ready
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the `PyPDF2` and `fpdf` modules that were installed
    for the earlier recipes.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用为早期菜谱安装的`PyPDF2`和`fpdf`模块。
- en: How to do it...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s start by working with the `PdfFileMerge` class of the `PyPDF2`. We use
    this class to merge multiple PDF files. The following code example does exactly
    the same:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从使用`PyPDF2`的`PdfFileMerge`类开始工作。我们使用这个类来合并多个PDF文件。以下代码示例做了完全相同的事情：
- en: '[PRE12]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you run the preceding piece of code, it will generate a new file, `output.pdf`,
    which would have merged multiple PDF files. Open the `output.pdf` file and see
    for yourself.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你运行前面的代码片段，它将生成一个新的文件，`output.pdf`，该文件将合并多个PDF文件。打开`output.pdf`文件并亲自查看。
- en: 'That was cool! Now, how about adding a header and footer to a PDF file. Let''s
    invoke the example from the previous recipe where we used the `fpdf` module to
    generate a PDF file (`automateit.pdf`). Now, what if we have to create a similar
    file with header and footer information? The following code does exactly that:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 那真酷！现在，我们来看看如何给PDF文件添加页眉和页脚。让我们调用前面菜谱中使用的`fpdf`模块来生成PDF文件（`automateit.pdf`）。现在，如果我们需要创建一个带有页眉和页脚信息的类似文件，怎么办？下面的代码正是这样做的：
- en: '[PRE13]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output of the preceding code snippet can be viewed in the following screenshot.
    Look how we''re able to manipulate the header and footer of our PDF document:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面代码片段的输出可以在下面的屏幕截图中查看。看看我们如何能够操纵我们的PDF文档的页眉和页脚：
- en: '![How to do it...](img/image_04_008.jpg)'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_008.jpg)'
- en: Wow! That was nice; now, let's quickly cover some more operations. Remember
    we added a blank page to the `myPdf.pdf` file in the previous recipe? What if
    I want to remove blank pages from PDF files?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哇！真不错；现在，让我们快速覆盖一些其他操作。记得我们在前面的菜谱中向`myPdf.pdf`文件添加了一个空白页？如果我想从PDF文件中移除空白页怎么办？
- en: '[PRE14]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you run the Python code and look at the contents of `myPdf_wo_blank.pdf`,
    you will just see one page and the blank page would be removed.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你运行Python代码并查看`myPdf_wo_blank.pdf`的内容，你将只会看到一页，空白页将被移除。
- en: 'Now, what if we want to add specific meta information to our file? We should
    be able to easily edit the metadata for a PDF file with the following code in
    Python:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们想向我们的文件添加特定的元信息怎么办？我们应该能够轻松地使用以下Python代码编辑PDF文件的元数据：
- en: '[PRE15]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The output of the preceding code can be seen in the following screenshot. See
    how we were successful in adding edited metadata to our PDF file.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面代码的输出可以在下面的屏幕截图中看到。看看我们如何成功地将编辑后的元数据添加到我们的PDF文件中。
- en: '![How to do it...](img/image_04_009.jpg)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_009.jpg)'
- en: 'Another good option to have from a development perspective is the ability to
    rotate a page in a PDF file. Yes, we could do that as well using the `PyPDF2`
    module. The following code rotates the first page of `Exercise.pdf` anticlockwise
    by `90` degrees:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从开发角度来看，另一个很好的选项是能够在PDF文件中旋转页面。是的，我们也可以使用`PyPDF2`模块做到这一点。以下代码将`Exercise.pdf`的第一页逆时针旋转`90`度：
- en: '[PRE16]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following screenshot shows how the file looks when rotated anticlockwise:'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了文件逆时针旋转后的样子：
- en: '![How to do it...](img/image_04_010.jpg)'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_010.jpg)'
- en: How it works...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the first code snippet, we created an object of the `PdfFileMerger` class,
    called `merger`. We then went through all the files in the current working directory
    and selected all the files with the `.pdf` extension using Python's list comprehension.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个代码片段中，我们创建了`PdfFileMerger`类的对象，命名为`merger`。然后我们遍历当前工作目录中的所有文件，并使用Python的列表推导式选择所有扩展名为`.pdf`的文件。
- en: We then sorted the files and ran a loop to pick up one file at a time, read
    it, and append it to the `merger` object.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先对文件进行了排序，并运行了一个循环，一次选择一个文件，读取它，并将其追加到`merger`对象中。
- en: 'Once all the files were merged, we used the `write()` method of the `merger`
    object to generate a single merged file: `output.pdf`.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有文件都合并完成，我们就使用了`merger`对象的`write()`方法来生成一个单独的合并文件：`output.pdf`。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this example, we didn't have to create a file handle for the `output.pdf`
    file. The merger internally handles it and generates a nice PDF file.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们不需要为`output.pdf`文件创建文件句柄。合并器内部处理它，并生成一个漂亮的PDF文件。
- en: 'In the second code snippet, we performed multiple operations:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个代码片段中，我们执行了多个操作：
- en: We inherited the standard `FPDF` class and wrote our own class, `PDF`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们继承了标准的`FPDF`类，并编写了自己的类，`PDF`。
- en: We overrode two methods--`header()` and `footer()`--to define how the header
    and footer should look when we create a new PDF file with our PDF class.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们重写了两个方法--`header()`和`footer()`--来定义当我们使用PDF类创建新的PDF文件时，页眉和页脚应该看起来是什么样子。
- en: In the `footer()` method, we added page numbers to every page. The page numbers
    are in `Italics` with font size `8` and in `Arial` font. We also centered them and
    set them to appear 15 mm above the bottom of the page.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`footer()`方法中，我们为每一页添加了页码。页码以`斜体`形式显示，字体大小为`8`，使用`Arial`字体。我们还将其居中，并设置为在页面底部上方15毫米处显示。
- en: In the `header()` method, we created the header cell and positioned it to the
    extreme right. The title of the header is `Automate It` and it is in `Arial` and
    `Bold` with font size `15`. The title is also centered in the context of the cell.
    Lastly, we added a line break of 20 pixels below the header.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`header()`方法中，我们创建了标题单元格并将其定位到最右侧。标题为`Automate It`，字体为`Arial`和加粗，字号为`15`。标题也在单元格的上下文中居中。最后，我们在标题下方添加了20像素的换行。
- en: We then created our own PDF with the page format set to `A5`.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建了自己的PDF文件，页面格式设置为`A5`。
- en: The contents of the PDF will be `This is my new line. Line number is <line_no>` with
    the font set to `Times` and the font size being `12`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PDF的内容将是`This is my new line. Line number is <line_no>`，字体设置为`Times`，字号为`12`。
- en: The generated PDF looks like the following screenshot. Note that the page is
    of `A5` size; hence, only 15 lines could be added to the page. If it had been
    of letter size, it would have accommodated at least 20 lines on a page.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成的PDF看起来如下截图所示。注意，页面大小为`A5`，因此页面只能添加15行。如果它是信纸大小，那么它至少可以容纳一页上的20行。
- en: In the third code example of this recipe, `getContents()` does the critical
    task of checking whether a given page has any content. So, when we start reading
    the old PDF file, we check the content of the page. If there is no content, the
    page is ignored and is not added to the new PDF file.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱的第三个代码示例中，`getContents()`执行了检查给定页面是否有内容的临界任务。因此，当我们开始读取旧的PDF文件时，我们会检查页面的内容。如果没有内容，该页面将被忽略，不会添加到新的PDF文件中。
- en: In the fourth snippet, we added the metadata information to our PDF file using
    the `addMetadata()` method. The `addMetadata()` method takes a key value pair
    as arguments, where we can pass the attributes that need to be modified for the
    PDF file. In our example, we used the method to add the `/edited` metadata field
    to the PDF file.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在第四个代码片段中，我们使用`addMetadata()`方法将元数据信息添加到我们的PDF文件中。`addMetadata()`方法接受一个键值对作为参数，其中我们可以传递需要修改的PDF文件属性。在我们的例子中，我们使用该方法将`/edited`元数据字段添加到PDF文件中。
- en: For the final example, I think the rest of the code is self-explanatory, except
    the use of `rotateCounterClockwise()`, which actually rotates the page. We could
    use `rotateClockwise()` to rotate the page in a clockwise direction as well.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最后的例子，我认为代码的其他部分都是不言自明的，除了`rotateCounterClockwise()`的使用，它实际上会旋转页面。我们也可以使用`rotateClockwise()`将页面顺时针旋转。
- en: There's more...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: You learned about reading and writing PDF files and also understood many ways
    of manipulating PDF files. It's now time to put things into perspective with a
    real-life example.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学习了如何读取和写入PDF文件，并且了解了多种操作PDF文件的方法。现在是时候用一个现实生活中的例子来将这些知识应用到实践中了。
- en: Automating generation of payslips for finance department
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化财务部门的工资单生成
- en: Let's take an example of an organization use case, where the Finance Manager
    of the company wants to make the payslip generation process quicker. He realizes
    that not only is the task mundane but also consumes a lot of time. With more employees
    expected to join the company, it's going to get harder. He chooses to automate
    the process and approaches you. How can you help?
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个组织用例为例，其中公司的财务经理希望使工资单生成过程更快。他意识到这项任务不仅单调乏味，而且耗时。随着更多员工预期加入公司，这将变得更加困难。他选择自动化这个过程，并找到你。你该如何帮助？
- en: Well, with what you learnt throughout the chapter, I bet this will be a piece
    of cake for you! Let's work on it.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，通过本章所学的内容，我敢打赌这对你们来说将是一件轻而易举的事情！让我们着手解决这个问题。
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We don't need any special modules for this example. All the modules that have
    been installed as part of the previous recipes are enough for us, don't you think?
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我们不需要任何特殊的模块。之前菜谱中安装的所有模块对我们来说已经足够了，你不这么认为吗？
- en: How to do it...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Let's first think of a payslip template. What does a payslip contain?
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先考虑一个工资单模板。工资单包含什么内容？
- en: Employee information
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 员工信息
- en: Payments from the company
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司的支付
- en: Deductions (tax paid to government)
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扣除（支付给政府的税款）
- en: Total payment made
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总支付金额
- en: So we need to get the employee information, add tables for payments and deductions,
    and add an entry for the total salary paid for the month.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要获取员工信息，添加支付和扣除的表格，并添加一个月支付的总工资条目。
- en: 'The code implementation for this scenario could be as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个场景的代码实现可能如下所示：
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is how the payslip looks with the header, footer, and payslip details:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这是带有标题、页脚和工资单详情的工资单的外观：
- en: '![How to do it...](img/image_04_011.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_011.jpg)'
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We first got the employee data in the dictionary `employee_data`. Now, in a real
    scenario, it could be from the employee table and would be retrieved with an SQL
    query. We wrote our own `PaySlip` class, which is inherited from the `FPDF` class,
    and defined our own header and footer.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在字典`employee_data`中获取了员工数据。在现实场景中，它可能来自员工表，并且将通过SQL查询检索。我们编写了自己的`PaySlip`类，它继承自`FPDF`类，并定义了自己的页眉和页脚。
- en: We then wrote our own method to generate the payslip. This includes the header
    at the top with the company name (in this case, say **Google**) and the period
    for which the payslip is. We also added the **Employee Id** and **Employee Name**.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们编写了自己的方法来生成工资条。这包括顶部的页眉，包含公司名称（在这个例子中，比如说**谷歌**）和工资条适用的期间。我们还添加了**员工ID**和**员工姓名**。
- en: Now, this is interesting. We created an HTML document that generates a table
    and adds the payment, tax, and total salary information to the payslip with the
    `add_html()` method.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这很有趣。我们创建了一个HTML文档，使用`add_html()`方法生成一个表格，并将支付、税费和总工资信息添加到工资条中。
- en: In the end, we added all this information to the PDF file with the `output()`
    method and named the payslip as `payslip_<employee_id>`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`output()`方法将所有这些信息添加到PDF文件中，并将工资条命名为`payslip_<employee_id>`。
- en: There's more...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Even though we coded the example alright, do you think something is missing?
    Yeah, we didn''t encrypt the PDF. It''s always a great idea to secure the payslip
    with a password, so that nobody apart from the employee is able to view it. The
    following code will help us encrypt the file. In this example, we encrypt `Exercise.pdf`,
    secure it with the password, `P@$$w0rd`, and rename it to `EncryptExercise.pdf`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们编写了示例代码，但您认为有什么遗漏吗？是的，我们没有加密PDF。用密码保护工资条总是一个好主意，这样除了员工外，没有人能够查看它。以下代码将帮助我们加密文件。在这个例子中，我们加密了`Exercise.pdf`，用密码`P@$$w0rd`保护，并将其重命名为`EncryptExercise.pdf`：
- en: '[PRE18]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we open the secured file, it will ask you for the password:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开受保护的文件，它将要求您输入密码：
- en: '![There''s more...](img/image_04_012.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/image_04_012.jpg)'
- en: Well, that's an awesome solution! Your finance manager will be happy I must
    say! Wondering how do I decrypt the secure file? I'll leave that to you; it's
    fairly straightforward. Read the documentation.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这是一个很棒的解决方案！我相信您的财务经理会很高兴！想知道如何解密受保护的文件吗？我将把它留给你；这相当直接。阅读文档说明。
- en: We have come to the end of this section on working with PDF files. PDF files
    essentially store data in a binary format and support multiple operations as we
    discussed. In the next section we start working with the documents (`.docx`) and
    appreciate what they can offer!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达了关于处理PDF文件的部分的结尾。PDF文件本质上以二进制格式存储数据，并支持我们讨论的多个操作。在下一节中，我们将开始处理文档（`.docx`）并欣赏它们能提供什么！
- en: Reading Word documents
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读Word文档
- en: As you might be aware, Microsoft Office started providing a new extension to
    Word documents, which is `.docx`, from Office 2007 onwards. With this change,
    documents moved to XML-based file formats (Office Open XML) with ZIP compression.
    Microsoft made this change when the business community asked for an open file
    format that could help with transferring data across applications. So, let's begin
    our journey with DOCX files!
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，从Office 2007开始，Microsoft Office开始为Word文档提供一个新的扩展名，即`.docx`。随着这一变化，文档转移到基于XML的文件格式（Office
    Open XML）并使用ZIP压缩。当商业社区要求一个开放文件格式以帮助在不同应用程序之间传输数据时，Microsoft做出了这一改变。因此，让我们从DOCX文件开始我们的旅程！
- en: Getting ready
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we will use the `python-docx` module to read Word documents.
    The `python-docx` is a comprehensive module that performs both read and write
    operations on Word documents. Let''s install this module with our favorite tool,
    `pip`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`python-docx`模块来读取Word文档。`python-docx`是一个综合模块，它可以在Word文档上执行读取和写入操作。让我们用我们最喜欢的工具`pip`安装这个模块：
- en: '[PRE19]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How to do it...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We start by creating our own Word document. It's the same exercise as we saw
    in the previous section while working with PDF files. Except for the fact that
    we have added a table to it and stored it as `WExercise.docx`. It looks as follows:![How
    to do it...](img/image_04_013.jpg)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先创建了自己的Word文档。这与我们在处理PDF文件时看到的上一个部分中的练习相同。除了我们向其中添加了一个表格并将其存储为`WExercise.docx`之外。它看起来如下：![如何操作...](img/image_04_013.jpg)
- en: 'Let''s now go ahead and read the document `WExercise.docx` file. The following code
    will help us in getting the object that points to the `WExercise.docx` file:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们继续读取 `WExercise.docx` 文件。以下代码将帮助我们获取指向 `WExercise.docx` 文件的对象：
- en: '[PRE20]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output of the preceding code is shown in the following screenshot. Reading
    a Word document is conceptually pretty similar to reading a file in Python. Just
    like how we created a file handle using the `open()` method, we create a document
    handle in this code snippet:'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码的输出在下面的屏幕截图中显示。阅读 Word 文档在概念上与在 Python 中读取文件非常相似。就像我们使用 `open()` 方法创建文件句柄一样，在这个代码片段中我们创建了一个文档句柄：
- en: '![How to do it...](img/image_04_014.jpg)'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_014.jpg)'
- en: 'Now, if we want to get the basic information about a document, we can use the
    document object, `doc`, from the preceding code. For instance, if we want to retrieve
    the title of a document, we can do that with the following code. If you look at
    the code carefully, we use the `paragraphs` object to get the text. Paragraphs
    are the lines present in the document. Assuming that the title of the document
    is the first line of the document, we get the `0` index for the paragraphs in
    the document and call the `text` attribute to get the text of the title:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们想获取文档的基本信息，我们可以使用前面代码中的文档对象 `doc`。例如，如果我们想检索文档的标题，我们可以使用以下代码。如果你仔细查看代码，我们会使用
    `paragraphs` 对象来获取文本。段落是文档中的行。假设文档的标题是文档的第一行，我们获取文档中段落的 `0` 索引并调用 `text` 属性来获取标题的文本：
- en: '[PRE21]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Notice in the following screenshot how we print the title of our exercise document:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意以下屏幕截图中的输出，我们如何打印练习文档的标题：
- en: '![How to do it...](img/image_04_015.jpg)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_015.jpg)'
- en: 'Wow, that''s cool! Let''s go ahead and read other attributes of the Word document
    that we care about. Let''s use the same `doc` object:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哇，这太酷了！让我们继续并读取 Word 文档中我们关心的其他属性。让我们使用相同的 `doc` 对象：
- en: '[PRE22]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output of the preceding code is shown in the following screenshot. The
    author of the document is `Chetan Giridhar`. As you may have observed, it was
    created on July 2nd at 4:24 am. Also, note that the document has been changed
    five times, as this is the fifth revision of the document:'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码的输出在下面的屏幕截图中显示。文档的作者是 `Chetan Giridhar`。正如你可能已经观察到的，它是在 7 月 2 日早上 4:24 创建的。此外，请注意文档已被修改了五次，这是文档的第五次修订：
- en: '![How to do it...](img/image_04_016.jpg)'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_016.jpg)'
- en: 'Well, I will get more audacious now and read the table down there in the document.
    The `python-docx` module is awesome for reading tables. Look at the following
    code snippet:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好吧，我现在将变得更加大胆，并读取文档中的表格。`python-docx` 模块非常适合读取表格。看看下面的代码片段：
- en: '[PRE23]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding example, we used the `tables` object to read the tables in
    the document. Since we have only one table throughout the document, we get the
    first index with `tables[0]` and store the object in the `table` variable.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们使用 `tables` 对象来读取文档中的表格。由于整个文档中只有一个表格，我们使用 `tables[0]` 获取第一个索引并将对象存储在
    `table` 变量中。
- en: Each table contains rows and columns and they can be accessed with `table.rows`
    or `table.columns`. We used the `table.rows` to get the number of rows in the
    table.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个表格都包含行和列，并且可以使用 `table.rows` 或 `table.columns` 访问它们。我们使用 `table.rows` 来获取表格中的行数。
- en: Next, we iterated over all the rows and read the text in the cell with `table.rows[index].cells[index].paragraphs[0].text`.
    We needed the `paragraphs` object as this contains the actual text of the cell.
    (We again used the 0^(th) index, as the assumption is that every cell has only
    one line of data.)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们遍历所有行，并使用 `table.rows[index].cells[index].paragraphs[0].text` 读取单元格中的文本。我们需要
    `paragraphs` 对象，因为它包含单元格的实际文本。（我们再次使用了第 0 个索引，因为假设每个单元格只有一行数据。）
- en: From the first `for` loop, you'd identify that we're reading all three rows
    but reading the first cell in every row. Essentially, we're reading the column
    values.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从第一个 `for` 循环中，你可以识别出我们在读取所有三行，但读取每行的第一个单元格。本质上，我们正在读取列值。
- en: The output of the preceding code snippet shows all the columns with their values:![How
    to do it...](img/image_04_017.jpg)
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述代码片段的输出显示了所有列及其值：![如何做...](img/image_04_017.jpg)
- en: Nice! So, we're now experts in reading a Word document. But what's the use if
    we cant write data into a Word document? Let's look at how to write or create
    a `.docx` document in the next recipe.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太棒了！所以，我们现在已经成为阅读 Word 文档的专家。但如果我们不能将数据写入 Word 文档，那又有什么用呢？让我们看看如何在下一个菜谱中写入或创建
    `.docx` 文档。
- en: Writing data into Word documents (adding headings, images, tables)
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据写入Word文档（添加标题、图片、表格）
- en: Reading files is a breeze with the `python-docx` module. Now, let's shift our
    focus to writing Word documents. We'll perform multiple operations with documents
    in this section.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`python-docx`模块读取文件非常简单。现在，让我们将注意力转向编写Word文档。在本节中，我们将对文档执行多个操作。
- en: Getting ready
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the same fantastic Python module, `python-docx`.
    We don't need to spend much time on the setup. Let's get started!
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用相同的出色的Python模块，`python-docx`。我们不需要在设置上花费太多时间。让我们开始吧！
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We start with a very basic operation of creating a `.docx` file and then to
    add a heading to it. The following code performs this operation:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从创建一个`.docx`文件并添加一个标题到它开始。以下代码执行了这个操作：
- en: '[PRE24]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This is how the document looks:'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文档看起来就是这样：
- en: '![How to do it...](img/image_04_018.jpg)'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/image_04_018.jpg)'
- en: If you look at the screenshot, you will see a new document being created with
    a string in it. Observe how the screenshot indicates it is styled as a **Title**
    text. How did we achieve this? Do you see `0` in the third line of our Python
    code? It talks about the heading type and styles the text accordingly. The `0`
    indicates title; `1` and `2` indicate text with **Heading 1** or **Heading 2**.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你查看截图，你会看到一个包含字符串的新文档正在创建。观察截图是如何指示它被格式化为**标题**文本的。我们是如何做到这一点的？你在我们的Python代码的第三行看到`0`了吗？它谈论的是标题类型，并相应地格式化文本。`0`表示标题；`1`和`2`表示带有**标题
    1**或**标题 2**的文本。
- en: 'Let''s move ahead and add a new line to the document. We decorate the string
    with some words in bold and some in italics:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们继续前进，并在文档中添加一行新内容。我们用一些粗体字和一些斜体字装饰了这个字符串：
- en: '[PRE25]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The document now looks as shown in the following screenshot. Observe the line
    added in the **Normal** style. Some words in the text are bold and few of them
    are in italics:![How to do it...](img/image_04_019.jpg)
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文档现在看起来如下所示。观察添加的**正常**样式的行。文本中的一些词是粗体的，少数是斜体的：![如何做到这一点...](img/image_04_019.jpg)
- en: 'OK, good. Let''s add another subtopic to our document. See the following code
    implementation. Here, we create a subtopic with style **Heading 1** and add a
    new line under this topic:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，很好。让我们给我们的文档添加另一个子主题。看看下面的代码实现。在这里，我们创建了一个带有**标题 1**样式的子主题，并在该主题下添加了一行新内容：
- en: '[PRE26]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The document now looks as shown in the following screenshots. When taking the
    screenshot, I had clicked on the line with **Heading 1** that shows up in the
    screenshot. Note how the subtopic is styled as a bullet point:![How to do it...](img/image_04_020.jpg)
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文档现在看起来如下所示。在截图时，我点击了截图中的**标题 1**行。注意子主题是如何被格式化为项目符号的：![如何做到这一点...](img/image_04_020.jpg)
- en: 'There''s often a need to include images in the documents. Now that''s really,
    really, easy. Check out the following code for this step:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经常需要在文档中包含图片。现在这真的非常简单。查看以下代码来完成这一步：
- en: '[PRE27]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If you run the Python code on your interpreter, you will see that the document
    now contains a nice Python logo. Please note that I had clicked on the image before
    taking the screenshot to catch your attention, so it''s not done by the library:'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你在你自己的解释器上运行Python代码，你会看到文档现在包含了一个漂亮的Python标志。请注意，我在截图之前点击了图片以吸引你的注意，所以这不是由库完成的：
- en: '![How to do it...](img/image_04_021.jpg)'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/image_04_021.jpg)'
- en: 'Last but not least, we may also want to add tables to our document, right?
    Let''s do that. The following code demonstrates adding tables to the DOCX file:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们可能还想在我们的文档中添加表格，对吧？让我们这么做。以下代码演示了如何向DOCX文件添加表格：
- en: '[PRE28]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The following screenshot shows how the complete document looks along with the
    table. Nice!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了完整的文档以及表格的外观。真不错！
- en: '![How to do it...](img/image_04_022.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/image_04_022.jpg)'
- en: How it works...
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the first code snippet, we created the `document` object from the `Document` class.
    We then used this object to add a new heading, which contains the text `Hi this
    is a nice text document`. I know this is not a text document but just a string.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个代码片段中，我们从`Document`类创建了`document`对象。然后我们使用这个对象添加了一个新的标题，其中包含文本`Hi this is
    a nice text document`。我知道这并不是一个文本文档，而只是一个字符串。
- en: In the second example, adding a new line is done with the `add_paragraph()`
    method (remember, `paragraphs` was used to read the lines from the word document
    in the previous section). And how did we get the styling? That is possible with
    the `add_run()` method by setting the attributes `bold` and `italic` to `true`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个例子中，添加新行是通过`add_paragraph()`方法完成的（记住，在上一节中使用了`paragraphs`来从Word文档中读取行）。那么我们是如何得到样式的呢？可以通过设置`add_run()`方法的属性`bold`和`italic`为`true`来实现。
- en: In the fourth example, we just used the `add_image()` method to add the picture
    to the document. We could also set the height and width of the image in inches.
    To do this, we imported a new class, `Inches`, and set the width of the image
    to 1.25 inches. Simple and neat!
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在第四个例子中，我们只是使用了`add_image()`方法将图片添加到文档中。我们还可以设置图片的高度和宽度为英寸。为此，我们导入了一个新的类`Inches`，并将图片的宽度设置为1.25英寸。简单又整洁！
- en: 'In the final example, we added a table to the document by performing the following steps:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后的例子中，我们通过以下步骤将表格添加到文档中：
- en: We started by creating a table object with the `add_table()` method. We configured
    the table to contain one row and three columns. We also styled the table to be
    a grid table.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先使用`add_table()`方法创建了一个表格对象。我们配置了表格包含一行和三列。我们还对表格进行了样式设置，使其成为一个网格表格。
- en: As we saw in the previous section, the `table` object has the `rows` and `columns` objects.
    We used these to fill in the table with the dictionary `data`.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们在上一节中看到的，`table`对象有`rows`和`columns`对象。我们使用这些对象来填充表格中的字典`data`。
- en: Then we added a heading to the table. Heading is the first row of the table
    and, hence, we used `table.rows[0]` to fill the data in it. We filled the first
    column by `Id`, the second by `Items`, and the third by `Price`.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们在表格中添加了一个标题。标题是表格的第一行，因此我们使用了`table.rows[0]`来填充其中的数据。我们通过`Id`填充了第一列，通过`Items`填充了第二列，通过`Price`填充了第三列。
- en: After the heading, we added a new row and filled the cells of this row from
    the data dictionary.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标题之后，我们添加了一行新行，并从数据字典中填充了这一行的单元格。
- en: If you look at the screenshot, the document now has one table added to it, where
    ID is `1`, item is `apple` and price is `50`.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你看看截图，文档现在添加了一个表格，其中ID为`1`，项目为`apple`，价格为`50`。
- en: There's more...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: What you learnt in the preceding section were straightforward, frequently done,
    day-to-day operations of writing into DOCX files. We could perform many more operations
    programmatically as we are used to doing manually on word documents. Let's now
    bring the learning together in a business use case.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中你所学到的都是直接、经常做的、日常的将数据写入DOCX文件的操作。我们可以以编程方式执行更多操作，就像我们习惯在Word文档上手动操作一样。现在让我们将所学知识结合到一个商业案例中。
- en: Generating personalized new hire orientation for HR team in an automated way
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以自动化的方式为HR团队生成个性化的新员工入职培训
- en: As the HR manager of your company, you are responsible for new hire orientation.
    You see that, every month, you have at least 15-20 new employees joining your
    organization. Once they complete a month in the company, you have to take them
    through your company policies in an orientation program.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 作为你们公司的HR经理，你负责新员工的入职培训。你看到每个月至少有15-20名新员工加入你们组织。一旦他们在公司完成一个月的工作，你就必须通过入职培训向他们介绍公司的政策。
- en: For this, you need to send them a personalized document with new hire orientation
    details. Getting the details of employees one by one from the database is tedious;
    on top of that, you have to filter for employees who are due for orientation,
    based on different departments.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个目的，你需要给他们发送一份包含新员工入职培训详细信息的个性化文档。从数据库中逐个获取员工的详细信息是繁琐的；更不用说，你还得根据不同的部门筛选出即将进行入职培训的员工。
- en: All this is time-consuming and you feel this process can be easily automated.
    Let's see how we can use the knowledge we have acquired so far in this chapter
    to automate this process.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都很耗时，你觉得这个过程可以很容易地自动化。让我们看看我们如何利用本章学到的知识来自动化这个过程。
- en: Getting ready
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use `python-docx`, which has been so helpful in our
    previous recipes. So, we need not install any new modules.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用`python-docx`，这在我们的前一个菜谱中非常有帮助。因此，我们不需要安装任何新的模块。
- en: How to do it...
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let's first split the problem. First, we need to collect the employees who are
    due for orientation. Next, we need to know their department and look at the schedule
    template based on the department. Once these details are available, we need to
    put this together in a document.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先分解问题。首先，我们需要收集需要参加入职培训的员工。接下来，我们需要知道他们的部门并查看基于部门的日程模板。一旦有了这些细节，我们需要将这些信息整理成文档。
- en: 'Look at the code implementation for this scenario:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看此场景的代码实现：
- en: '[PRE29]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If you run this code snippet, this is how your document will look with all the
    relevant details about the orientation. Cool! But how did it work? We will see
    that in the *How it works* section.![How to do it...](img/image_04_023.jpg)
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您运行此代码片段，您的文档将呈现有关入职的所有相关细节。酷！但它是如何工作的？我们将在*如何工作*部分中看到。![如何操作...](img/image_04_023.jpg)
- en: How it works...
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the preceding code, we have a prefilled dictionary, `employee_data`, which contains
    employee information. This dictionary also contains information on whether an
    employee is due for orientation or not. We also have the `agenda` dictionary that
    acts as a template for different sessions based on the department. We have manually
    added all this data in Python dictionaries in this example, but in the real world,
    it needs to be pulled from your organization's database.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们有一个预填充的字典`employee_data`，其中包含员工信息。此字典还包含有关员工是否需要参加入职培训的信息。我们还有一个`agenda`字典，它根据部门作为不同会议的模板。在这个例子中，我们手动将这些数据添加到Python字典中，但在现实世界中，需要从您组织的数据库中提取这些数据。
- en: Next, we write a `generate_document()` method that takes `employee_data` and
    `agenda`. It iterates through all the employees and checks if a given employee
    is due for orientation and starts writing the document. First it adds a title,
    then follows up with a personalized address to the employee, and then shifts down
    to the sessions the employee needs to attend based on his or her department.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们编写一个`generate_document()`方法，该方法接受`employee_data`和`agenda`。它遍历所有员工并检查是否有员工需要参加入职培训，然后开始编写文档。首先添加标题，然后是针对员工的个性化致辞，然后根据员工的部门调整到需要参加的会议。
- en: In the end, all the text is saved as a document with the name, `orientation_<emp_id>.docx` file.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，所有文本都保存为名为`orientation_<emp_id>.docx`的文档文件。
- en: That was cool! Imagine the time you saved. How happy are you as a HR manager?
    You acquired some new skills and quickly applied them for the benefit of your
    team. Awesome!
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 那真是太酷了！想象一下您节省的时间。作为人力资源经理，您有多高兴？您获得了一些新技能，并迅速将其应用到团队的利益中。太棒了！
- en: We have come to the end of this chapter on reading, writing, and manipulating
    PDF files and documents. Hope you enjoyed it and learnt many new things that you
    can apply to your work at office or at school! Of course you could do more; I
    highly encourage you to try out these modules and have fun with them.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了关于读取、编写和操作PDF文件和文档的章节。希望您喜欢它，并学到了许多可以应用到您在办公室或学校工作中的应用新知识！当然，您可以做得更多；我强烈鼓励您尝试这些模块，并享受其中的乐趣。
