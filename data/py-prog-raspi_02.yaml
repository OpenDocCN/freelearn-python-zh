- en: Arithmetic Operations, Loops, and Blinky Lights
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 算术运算、循环和闪烁的LED灯
- en: In the previous chapter, we discussed printing a line of text on the screen.
    In this chapter, we will review arithmetic operations and variables in Python.
    We will also discuss strings and accepting user inputs in Python. You will learn
    about the Raspberry Pi's GPIO and its features and write code in Python that makes
    an LED blink using the Raspberry Pi's GPIO. We will also discuss a practical application
    of controlling the Raspberry Pi's GPIO.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了如何在屏幕上打印一行文本。在本章中，我们将回顾Python中的算术运算和变量。我们还将讨论字符串和Python中的用户输入。你将了解Raspberry
    Pi的GPIO及其特性，并使用Python编写代码，通过Raspberry Pi的GPIO使LED闪烁。我们还将讨论控制Raspberry Pi的GPIO的实际应用。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Arithmetic operations in Python
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python中的算术运算
- en: Bitwise operators in Python
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python中的位运算符
- en: Logical operators in Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python中的逻辑运算符
- en: Data types and variables in Python
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python中的数据类型和变量
- en: Loops in Python
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python中的循环
- en: Raspberry Pi Zero's GPIO interface.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi Zero的GPIO接口。
- en: Hardware required for this chapter
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本章所需的硬件
- en: In this chapter, we will be discussing examples where we will be controlling
    the Raspberry Pi's GPIO. We will need a breadboard, jumper wires, LEDs, and some
    resistors (330 or 470 Ohms) to discuss these examples.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论控制Raspberry Pi的GPIO的示例。我们将需要面包板、跳线、LED和一些电阻（330或470欧姆）来讨论这些示例。
- en: We will also need some optional hardware that we will discuss in the last section
    of this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一些可选的硬件，这些将在本章的最后部分讨论。
- en: Arithmetic operations
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 算术运算
- en: 'Python enables performing all the standard arithmetic operations. Let''s launch
    the Python interpreter and learn more:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Python能够执行所有标准的算术运算。让我们启动Python解释器，了解更多信息：
- en: '**Addition**: Two numbers can be added using the `+` operand. The result is
    printed on the screen. Try the following example using the python interpreter:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加法**：可以使用`+`运算符将两个数相加。结果将在屏幕上打印出来。尝试使用Python解释器运行以下示例：'
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Subtraction**: Two numbers can be added using the `-` operand:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减法**：可以使用`-`运算符将两个数相减：'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Multiplication**: Two numbers can be multiplied as follows:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**乘法**：两个数可以按照以下方式相乘：'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Division**: Two numbers can be divided as follows:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**除法**：两个数可以按照以下方式相除：'
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Modulus operator**: In Python, the modulus operator (`%`) returns the remainder
    of a division operation:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**取模运算符**：在Python中，取模运算符（`%`）返回除法操作的余数：'
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The **floor operator** (`//`) is the opposite of the modulus operator. This
    operator returns the floor of the quotient, that is, the integer result, and discards
    the fractions:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地板运算符**（`//`）是取模运算符的相反数。此运算符返回商的整数部分，即整数结果，并丢弃小数部分：'
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Bitwise operators in Python
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的位运算符
- en: In Python, it is possible to perform bit-level operations on numbers. This is
    especially helpful while parsing information from certain sensors. For example,
    Some sensors share their output at a certain frequency. When a new data point
    is available, a certain bit is set indicating that the data is available. Bitwise
    operators can be used to check whether a particular bit is set before retrieving
    the datapoint from the sensor.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，可以对数字执行位级操作。这在解析来自某些传感器的信息时特别有用。例如，某些传感器以一定频率共享它们的输出。当有新的数据点可用时，某个位被设置，表示数据可用。位运算符可以用来检查在从传感器检索数据点之前，特定的位是否被设置。
- en: If you are interested in a deep dive on bitwise operators, we recommend getting
    started at [https://en.wikipedia.org/wiki/Bitwise_operation](https://en.wikipedia.org/wiki/Bitwise_operation).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对位运算符的深入探讨感兴趣，我们建议从[https://en.wikipedia.org/wiki/Bitwise_operation](https://en.wikipedia.org/wiki/Bitwise_operation)开始。
- en: 'Consider the numbers `3` and `2` whose binary equivalents are `011` and `010`,
    respectively. Let''s take a look at different operators that perform the operation
    on every bit of the number:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑数字`3`和`2`，它们的二进制表示分别为`011`和`010`。让我们看看不同的运算符，它们会对数字的每一位执行操作：
- en: '**The AND operator**: The AND operator is used to perform the AND operation
    on two numbers. Try this using the Python interpreter:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与运算符**：与运算符用于对两个数执行与运算。尝试使用Python解释器运行以下示例：'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is equivalent to the following AND operation:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于以下与运算：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**The OR operator**: The OR operator is used to perform the OR operation on
    two numbers as follows:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**或运算符**：或运算符用于对两个数执行或运算，如下所示：'
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is equivalent to the following OR operation:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于以下或运算：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**The NOT operator**: The NOT operator flips the bits of a number. see the
    following example:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NOT 运算符**：NOT 运算符翻转数字的位。参见以下示例：'
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding example, the bits are flipped, that is, `1` as `0` and `0`
    as `1`. So, the binary representation of `1` is `0001` and when the bitwise NOT
    operation is performed, the result is `1110`. The interpreter returns the result
    as `-2` because negative numbers are stored as their *two's complement*. The two's
    complement of `1` is `-2`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，位被反转，即 `1` 变为 `0`，`0` 变为 `1`。因此，数字 `1` 的二进制表示为 `0001`，当执行位非操作时，结果是 `1110`。解释器将结果返回为
    `-2`，因为负数是以它们的 *二进制补码* 存储的。`1` 的二进制补码是 `-2`。
- en: For a better understanding of two's complement and so on, we recommend reading
    the following articles, [https://wiki.python.org/moin/BitwiseOperators](https://wiki.python.org/moin/BitwiseOperators)
    and [https://en.wikipedia.org/wiki/Two's_complement](https://en.wikipedia.org/wiki/Two's_complement).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解二进制补码等内容，我们推荐阅读以下文章，[https://wiki.python.org/moin/BitwiseOperators](https://wiki.python.org/moin/BitwiseOperators)
    和 [https://en.wikipedia.org/wiki/Two's_complement](https://en.wikipedia.org/wiki/Two's_complement).
- en: '**The XOR operator**: An exclusive OR operation can be performed as follows:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XOR 运算符**：可以按以下方式执行排他或操作：'
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Left shift operator**: The left shift operator enables shifting the bits
    of a given value to the left by the desired number of places. For example, bit
    shifting the number `3` to the left gives us the number `6`. The binary representation
    of the number `3` is `0011`. Left shifting the bits by one position will give
    us `0110`, that is, the number `6`:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**左移运算符**：左移运算符可以将给定值的位向左移动所需的位数。例如，将数字 `3` 向左移位得到数字 `6`。数字 `3` 的二进制表示为 `0011`。将位左移一位将得到
    `0110`，即数字 `6`：'
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Right shift operator**: The right shift operator enables shifting the bits
    of a given value to the right by the desired number of places. Launch the command-line
    interpreter and try this yourself. What happens when you bit shift the number
    `6` to the right by one position?'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**右移运算符**：右移运算符可以将给定值的位向右移动所需的位数。启动命令行解释器并亲自尝试。当你将数字 `6` 向右移一位时会发生什么？'
- en: Logical operators
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逻辑运算符
- en: '**Logical operators** are used to check different conditions and execute the
    code accordingly. For example, detecting a button interfaced to the Raspberry
    Pi''s GPIO being pressed and executing a specific task as a consequence. Let''s
    discuss the basic logical operators:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**逻辑运算符**用于检查不同的条件并相应地执行代码。例如，检测连接到树莓派 GPIO 的按钮是否被按下，并执行相应的特定任务。让我们讨论基本的逻辑运算符：'
- en: '**EQUAL**: The EQUAL (`==`) operator is used to compare if two values are equal:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**等于 (==)**: 等于 (`==`) 运算符用于比较两个值是否相等：'
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**NOT EQUAL**: The NOT EQUAL (`!=`) operator compares two values and returns
    `True` if they are not equal:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不等于 (!=)**: 不等于 (`!=`) 运算符比较两个值，如果它们不相等，则返回 `True`：'
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**GREATER THAN**: This operator (`>`) returns `True` if one value is greater
    than the other value:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大于 (>)**: 此运算符 (`>`) 如果一个值大于另一个值，则返回 `True`：'
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**LESS THAN**: This operator compares two values and returns `True` if one
    value is smaller than the other:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小于 (<)**: 此运算符比较两个值，如果其中一个值小于另一个值，则返回 `True`：'
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**GREATER THAN OR EQUAL TO (>=)**: This operator compares two values and returns
    `True` if one value is greater/bigger than or equal to the other value:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大于等于 (>=)**: 此运算符比较两个值，如果其中一个值大于或等于另一个值，则返回 `True`：'
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**LESS THAN OR EQUAL TO (<=)**: This operator compares two values and returns
    `True` if one value is smaller than or equal to the other value:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小于等于 (<=)**: 此运算符比较两个值，如果其中一个值小于或等于另一个值，则返回 `True`：'
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Data types and variables in Python
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的数据类型和变量
- en: In Python, **variables** are used to store a result or a value in the computer's
    memory during the execution of a program. Variables enable easy access to a specific
    location on the computer's memory and enables writing user-readable code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，**变量**用于在程序执行期间在计算机内存中存储结果或值。变量使得轻松访问计算机内存的特定位置，并允许编写用户可读的代码。
- en: For example, let's consider a scenario where a person wants a new ID card from
    an office or a university. The person would be asked to fill out an application
    form with relevant information, including their name, department, and emergency
    contact information. The form would have the requisite fields. This would enable
    the office manager to refer to the form while creating a new ID card.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们考虑一个场景，一个人想要从办公室或大学获得新的身份证。这个人将被要求填写一份包含相关信息的申请表，包括他们的姓名、部门和紧急联系人信息。表格将包含必要的字段。这将使办公室经理在创建新的身份证时能够参考表格。
- en: Similarly, variables simplify code development by providing means to store information
    in the computer's memory. It would be very difficult to write code if one had
    to write code keeping the storage memory map in mind. For example, it is easier
    to use the variable called name rather than a specific memory address like `0x3745092`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，变量通过提供在计算机内存中存储信息的方法简化了代码开发。如果必须记住存储内存映射来编写代码，这将非常困难。例如，使用名为name的变量而不是像`0x3745092`这样的特定内存地址要容易得多。
- en: 'There are different kinds of data types in Python. Let''s review the different
    data types:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Python中有不同种类的数据类型。让我们回顾一下不同的数据类型：
- en: 'In general, names, street addresses, and so on are a combination of alphanumeric
    characters. In Python, they are stored as *strings*. Strings in Python are represented
    and stored in variables as follows:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常，名称、街道地址等是由字母数字字符组合而成的。在Python中，它们被存储为*字符串*。Python中的字符串如下表示和存储在变量中：
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Numbers* in Python could be stored as follows:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python中的*数字*可以存储如下：
- en: '[PRE20]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Python also enables storing *boolean* variables. For example, a person''s organ
    donor status can be either as `True` or `False`:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python还允许存储*布尔*变量。例如，一个人的器官捐赠状态可以是`True`或`False`：
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It is possible to *assign* values to multiple variables at the same time:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以同时*分配*多个变量的值：
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'A variable may be *deleted* as follows:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量可以被*删除*如下：
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: There are other data types in Python, including lists, tuples, and dictionaries.
    We will discuss this in detail in the next chapter.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Python中还有其他数据类型，包括列表、元组和字典。我们将在下一章中详细讨论。
- en: Reading inputs from the user
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从用户读取输入
- en: In the previous chapter, we printed something on the screen for the user. Now,
    we will discuss a simple program where we ask the user to enter two numbers and
    the program returns the sum of two numbers. For now, we are going to pretend that
    the user always provides a valid input.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们在屏幕上打印了一些内容供用户查看。现在，我们将讨论一个简单的程序，其中我们要求用户输入两个数字，程序返回两个数字的和。现在，我们将假装用户总是提供有效的输入。
- en: 'In Python, user input to a Python program can be provided using the `input()`
    function ([https://docs.python.org/3/library/functions.html#input](https://docs.python.org/3/library/functions.html#input)):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，可以使用`input()`函数向Python程序提供用户输入（[https://docs.python.org/3/library/functions.html#input](https://docs.python.org/3/library/functions.html#input)）：
- en: '[PRE24]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the preceding example, we are making use of the `input()` function to seek
    the user''s input of the number. The `input()` function takes the prompt `("Enter
    the first number: ")` as an argument and returns the user input. In this example,
    the user input is stored in the variable, `var`. In order to add two numbers,
    we make use of the `input()` function to request user to provide two numbers as
    input:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们正在使用`input()`函数来获取用户输入的数字。`input()`函数将提示`("请输入第一个数字：")`作为参数，并返回用户输入。在这个例子中，用户输入存储在变量`var`中。为了将两个数字相加，我们使用`input()`函数请求用户输入两个数字：
- en: '[PRE25]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We are making use of the `input()` function to seek user input on two numbers.
    In this case, the user number is stored in `var1` and `var2`, respectively.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用`input()`函数来获取用户输入的两个数字。在这种情况下，用户输入的数字分别存储在`var1`和`var2`中。
- en: The user input is a string. We need to convert them into integers before adding
    them. We can convert a string to an integer using the `int()` function ([https://docs.python.org/3/library/functions.html#int](https://docs.python.org/3/library/functions.html#int)).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入是一个字符串。在将它们相加之前，我们需要将它们转换为整数。我们可以使用`int()`函数将字符串转换为整数（[https://docs.python.org/3/library/functions.html#int](https://docs.python.org/3/library/functions.html#int)）。
- en: The `int()` function takes the string as an argument and returns the converted
    integer. The converted integers are added and stored in the variable, `total`.
    The preceding example is available for download along with this chapter as `input_function.py`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`int()`函数将字符串作为参数，并返回转换后的整数。转换后的整数被添加并存储在变量`total`中。前面示例作为本章的附件可供下载，文件名为`input_function.py`。'
- en: If the user input is invalid, the `int()` function will throw an exception indicating
    that an error has occurred. Hence, we assumed that user inputs are valid in this
    example. In a later chapter, we will discuss catching exceptions that are caused
    by invalid inputs.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户输入无效，`int()`函数将抛出异常，指示发生错误。因此，在这个例子中，我们假设用户输入是有效的。在后面的章节中，我们将讨论由无效输入引起的异常的捕获。
- en: 'The following snapshot shows the program output:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下快照显示了程序输出：
- en: '![](img/image_02_001.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_001.png)'
- en: The input_function.py output
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: input_function.py的输出
- en: The formatted string output
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化字符串输出
- en: 'Let''s revisit the example discussed in the previous section. We printed the
    result as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾前面章节中讨论的示例。我们按照以下方式打印结果：
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In Python, it is possible to format a string to display the result. In the
    earlier example, we make use of `%d` to indicate that it is a placeholder for
    an integer variable. This enables printing the string with the integer. Along
    with the string that is passed an argument to the `print()` function, the variable
    that needs to be printed is also passed an argument. In the earlier example, the
    variables are passed using the `%` operator. It is also possible to pass multiple
    variables:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，可以将字符串格式化以显示结果。在早期示例中，我们使用`%d`来表示这是一个整数变量的占位符。这允许我们打印包含整数的字符串。除了传递给`print()`函数的字符串参数外，还需要传递需要打印的变量作为参数。在早期示例中，变量是通过`%`运算符传递的。也可以传递多个变量：
- en: '[PRE27]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'It is also possible to format a string as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以按照以下方式格式化字符串：
- en: '[PRE28]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The str.format() method
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: str.format()方法
- en: The `format()` method enables formatting the string using braces (`{}`) as placeholders.
    In the preceding example, we use `total` as a placeholder and use the format method
    of the string class to fill each place holder.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`format()`方法允许使用花括号（`{}`）作为占位符来格式化字符串。在前面示例中，我们使用`total`作为占位符，并使用字符串类的格式化方法填充每个占位符。'
- en: An exercise for the reader
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读者练习
- en: Make use of the `format()` method to format a string with more than one variable.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`format()`方法格式化包含多个变量的字符串。
- en: 'Let''s build a console/command-line application that takes inputs from the
    user and print it on the screen. Let''s create a new file named `input_test.py`,
    (available along with this chapter''s downloads) take some user inputs and print
    them on the screen:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个控制台/命令行应用程序，该程序从用户那里获取输入并在屏幕上打印。让我们创建一个名为`input_test.py`的新文件（与本章的下载内容一起提供），获取一些用户输入并在屏幕上打印它们：
- en: '[PRE29]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Execute the program and see what happens:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 执行程序并查看结果：
- en: '![](img/image_02_002.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_002.png)'
- en: The input_test.py output
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: input_test.py的输出
- en: The preceding example is available for download along with this chapter as `input_test.py`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例作为本章的附件可供下载，文件名为`input_test.py`。
- en: Another exercise for the reader
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一个读者练习
- en: Repeat the earlier example using the string formatting techniques.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串格式化技术重复前面的示例。
- en: Concatenating strings
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串连接
- en: In the preceding example, we printed the user inputs in combination with another
    string. For example, we took the user input `name` and printed the sentence as
    `My name is Sai`. The process of appending one string to another is called **concatenation**.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将用户输入与另一个字符串结合打印。例如，我们获取用户输入的`name`并打印句子`My name is Sai`。将一个字符串附加到另一个字符串的过程称为**连接**。
- en: 'In Python, strings can be concatenated by adding `+` between two strings:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，可以在两个字符串之间添加`+`来连接字符串：
- en: '[PRE30]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'It is possible to concatenate two strings, but it is not possible to concatenate
    an integer. Let''s consider the following example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 可以连接两个字符串，但不能连接一个整数。让我们考虑以下示例：
- en: '[PRE31]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'It would throw an error implying that integers and strings cannot be combined:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将会抛出一个错误，表示整数和字符串不能组合：
- en: '![](img/image_02_003.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_003.png)'
- en: An exception
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 异常
- en: 'It is possible to convert an integer to string and concatenate it to another
    string:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将整数转换为字符串，并将其连接到另一个字符串：
- en: '[PRE32]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This would give the following result:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出以下结果：
- en: '![](img/image_02_004.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_004.png)'
- en: Loops in Python
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的循环
- en: Sometimes, a specific task has to be repeated several times. In such cases,
    we could use **loops**. In Python, there are two types of loops, namely the `for`
    loop and `while` loop. Let's review them with specific examples.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，特定的任务需要重复执行多次。在这种情况下，我们可以使用 **循环**。在 Python 中，有两种类型的循环，即 `for` 循环和 `while`
    循环。让我们通过具体的例子来回顾它们。
- en: A for loop
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`for` 循环'
- en: 'In Python, a `for` loop is used to execute a task for *n* times. A for loop
    iterates through each element of a sequence. This sequence could be a dictionary,
    list, or any other iterator. For example, let''s discuss an example where we execute
    a loop:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，`for` 循环用于执行 *n* 次的任务。`for` 循环遍历序列中的每个元素。这个序列可以是字典、列表或任何其他迭代器。例如，让我们讨论一个执行循环的例子：
- en: '[PRE33]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the preceding example, the `print` statement is executed 10 times:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，`print` 语句执行了 10 次：
- en: '![](img/image_02_005.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_005.png)'
- en: 'In order to execute the `print` task 10 times, the `range()` function ([https://docs.python.org/2/library/functions.html#range](https://docs.python.org/2/library/functions.html#range))
    was used. The `range` function generates a list of numbers for a start and stop
    values that are passed as an arguments to the function. In this case, `0` and
    `10` are passed as arguments to the `range()` function. This returns a list containing
    numbers from `0` to `9`. The `for` loop iterates through the code block for each
    element in steps of 1\. The `range` function can also generate a list of numbers
    in steps of 2\. This is done by passing the start value, stop value, and the step
    value as arguments to the `range()` function:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行 `print` 任务 10 次，使用了 `range()` 函数 ([https://docs.python.org/2/library/functions.html#range](https://docs.python.org/2/library/functions.html#range))。`range`
    函数根据传递给函数的起始值和停止值生成一个数字列表。在这种情况下，`0` 和 `10` 被传递给 `range()` 函数作为参数。这返回一个包含从 `0`
    到 `9` 的数字的列表。`for` 循环以 1 为步长遍历代码块中的每个元素。`range` 函数还可以通过将起始值、停止值和步长值作为参数传递给 `range()`
    函数来生成一个步长为 2 的数字列表：
- en: '[PRE34]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In this example, `0` is the start value, `20` is the stop value, and `2` is
    the step value. This generates a list of 10 numbers in steps of two:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`0` 是起始值，`20` 是停止值，`2` 是步长值。这生成了一个步长为两的 10 个数字列表：
- en: '![](img/image_02_006.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_006.png)'
- en: 'The `range` function can be used to count down from a given number. Let''s
    say we would like to count down from `10` to `1`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`range` 函数可以用来从给定数字开始倒计时。比如说，我们想要从 `10` 倒计时到 `1`：'
- en: '[PRE35]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output would be something like:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 输出可能类似于：
- en: '![](img/image_02_007.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_007.png)'
- en: The general syntax of the `range` function is `range(start, stop, step_count)`.
    It generates a sequence of numbers from `start` to `n-1` where `n` is the stop
    value.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`range` 函数的一般语法是 `range(start, stop, step_count)`。它生成从 `start` 到 `n-1` 的数字序列，其中
    `n` 是停止值。'
- en: Indentation
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩进
- en: 'Note the *indentation* in the `for` loop block:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `for` 循环块中的 *缩进*：
- en: '[PRE36]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Python executes the block of code under the `for` loop statement. It is one
    of the features of the Python programming language. It executes any piece of code
    under the `for` loop as long as it has same level of indentation:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Python 执行 `for` 循环语句下的代码块。这是 Python 编程语言的一个特性。只要代码具有相同的缩进级别，Python 就会执行 `for`
    循环下的任何代码：
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The indentation has the following two uses:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 缩进有以下两个用途：
- en: It makes the code readable
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使代码更易读
- en: It helps us identify the block of code to be executed in a loop
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它帮助我们识别循环中要执行的代码块
- en: It is important to pay attention to indentation in Python as it directly affects
    how a piece of code is executed.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，注意缩进非常重要，因为它直接影响到代码的执行方式。
- en: Nested loops
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套循环
- en: 'In Python, it is possible to implement *a loop within a loop.* For example,
    let''s say we have to print `x` and `y` coordinates of a map. We can use nested
    loops to implement this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，可以在循环中实现 *嵌套循环*。例如，假设我们需要打印地图的 `x` 和 `y` 坐标。我们可以使用嵌套循环来实现这一点：
- en: '[PRE38]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The expected output is:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的输出是：
- en: '![](img/image_02_008.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_008.png)'
- en: 'Be careful about code indentation in nested loops as it may throw errors. Consider
    the following example:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌套循环中注意代码缩进，因为它可能会引发错误。考虑以下示例：
- en: '[PRE39]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The Python interpreter would throw the following error:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Python 解释器会抛出以下错误：
- en: '[PRE40]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This is visible in the following screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这在以下屏幕截图中可见：
- en: '![](img/image_02_009.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_009.png)'
- en: Hence, it is important to pay attention to indentation in Python (especially
    nested loops) to successfully execute the code. IDLE's text editor automatically
    indents code as you write them. This should aid with understanding indentation
    in Python.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在 Python 中注意缩进（尤其是嵌套循环）对于成功执行代码非常重要。IDLE 的文本编辑器在您编写代码时会自动缩进。这应该有助于理解 Python
    中的缩进。
- en: A while loop
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当循环
- en: '`while` loops are used when a specific task is supposed to be executed until
    a specific condition is met. `while` loops are commonly used to execute code in
    an infinite loop. Let''s look at a specific example where we would like to print
    the value of `i` from `0` to `9`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要执行一个特定任务直到满足特定条件时，使用 `while` 循环。`while` 循环通常用于执行无限循环中的代码。让我们看看一个具体的例子，我们想要打印
    `i` 的值从 `0` 到 `9`：
- en: '[PRE41]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Inside the `while` loop, we increment `i` by `1` for every iteration. The value
    of `i` is incremented as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `while` 循环内部，我们每次迭代都会将 `i` 增加 `1`。`i` 的值增加如下：
- en: '[PRE42]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This is equivalent to `i = i+1`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于 `i = i+1`。
- en: 'This example would execute the code until the value of `i` is less than 10\.
    It is also possible to execute something in an infinite loop:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子将执行代码，直到 `i` 的值小于 10。也可能在无限循环中执行某些操作：
- en: '[PRE43]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The execution of this infinite loop can be stopped by pressing *Ctrl* + *C*
    on your keyboard.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过按键盘上的 *Ctrl* + *C* 来停止这个无限循环的执行。
- en: 'It is also possible to have nested `while` loops:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 也可能有嵌套的 `while` 循环：
- en: '[PRE44]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Similar to `for` loops, `while` loops also rely on the indented code block to
    execute a piece of code.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `for` 循环类似，`while` 循环也依赖于缩进的代码块来执行一段代码。
- en: Python enables printing a combination of strings and integers as long as they
    are presented as arguments to the `print` function separated by commas. In the
    earlier-mentioned example, `The value of i,j is`, `i` are arguments to the `print`
    function. You will learn more about functions and arguments in the next chapter.
    This feature enables formatting the output string to suit our needs.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Python 允许打印字符串和整数的组合，只要它们作为逗号分隔的参数传递给 `print` 函数。在前面提到的例子中，`The value of i,j
    is`，`i` 是 `print` 函数的参数。您将在下一章中了解更多关于函数和参数的内容。这个特性使得可以格式化输出字符串以满足我们的需求。
- en: Raspberry Pi's GPIO
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Raspberry Pi 的 GPIO
- en: 'The Raspberry Pi Zero comes with a 40-pin GPIO header. Out of these 40 pins,
    we can use 26 pins either to read inputs (from sensors) or control outputs. The
    other pins are power supply pins (**5V**, **3.3V**, and **Ground** pins):'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi Zero 配备了一个 40 引脚的 GPIO 头。在这 40 个引脚中，我们可以使用 26 个引脚来读取输入（来自传感器）或控制输出。其余的引脚是电源引脚（**5V**、**3.3V**
    和 **地**引脚）：
- en: '![](img/image_02_010.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_010.png)'
- en: 'Raspberry Pi Zero GPIO mapping (source: https://www.raspberrypi.org/documentation/usage/gpio-plus-and-raspi2/README.md)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi Zero GPIO 映射（来源：https://www.raspberrypi.org/documentation/usage/gpio-plus-and-raspi2/README.md）
- en: We can use up to 26 pins of the Raspberry Pi's GPIO to interface appliances
    and control them. But, there are certain pins that have an alternative function,
    which will be discussed in the later chapters.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Raspberry Pi 的 GPIO 的最多 26 个引脚来接口电器并控制它们。但是，某些引脚具有替代功能，这将在后续章节中讨论。
- en: The earlier image shows the mapping of the Raspberry Pi's GPIO pins. The numbers
    in the circle correspond to the pin numbers on the Raspberry Pi's processor. For
    example, GPIO pin **2** (second pin from the left on the bottom row) corresponds
    to the GPIO pin **2** on the Raspberry Pi's processor and not the physical pin
    location on the GPIO header.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 早期图像显示了 Raspberry Pi 的 GPIO 引脚映射。圆圈中的数字对应于 Raspberry Pi 处理器上的引脚编号。例如，GPIO 引脚
    **2**（底部一行的左侧第二个引脚）对应于 Raspberry Pi 处理器上的 GPIO 引脚 **2**，而不是 GPIO 头上的物理引脚位置。
- en: In the beginning, it might be confusing to try and understand the pin mapping.
    Keep a GPIO pin handout (available for download along with this chapter) for your
    reference. It takes some time to get used to the GPIO pin mapping of the Raspberry
    Pi Zero.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在一开始，尝试理解引脚映射可能会感到困惑。请保留一份 GPIO 引脚清单（与本章一起提供下载）以供参考。熟悉 Raspberry Pi Zero 的 GPIO
    引脚映射需要一些时间。
- en: The Raspberry Pi Zero's GPIO pins are 3.3V tolerant, that is, if a voltage greater
    than 3.3V is applied to the pin, it may permanently damage the pin. When set to
    *high*, the pins are set to 3.3V and 0V when the pins are set to low.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi Zero 的 GPIO 引脚可以承受 3.3V 电压，也就是说，如果施加的电压大于 3.3V，可能会永久损坏引脚。当设置为 *高*
    时，引脚被设置为 3.3V 和 0V；当引脚被设置为 *低* 时。
- en: Blinky lights
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 闪烁灯
- en: Let's discuss an example where we make use of the Raspberry Pi Zero's GPIO.
    We will interface an LED to the Raspberry Pi Zero and make it blink *on* and *off*
    with a 1-second interval.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一个使用 Raspberry Pi Zero 的 GPIO 的例子。我们将连接一个 LED 到 Raspberry Pi Zero，并使其以
    1 秒的间隔闪烁打开和关闭。
- en: 'Let''s wire up the Raspberry Pi zero to get started:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们连接 Raspberry Pi zero 来开始：
- en: '![](img/image_02_011.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_011.png)'
- en: Blinky schematic generated using Fritzing
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Fritzing 生成的 Blinky 电路图
- en: In the preceding schematic, the GPIO pin 2 is connected to the anode (the longest
    leg) of the LED. The cathode of the LED is connected to the ground pin of the
    Raspberry Pi Zero. A 330 Ohm current limiting resistor is also used to limit the
    flow of the current.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的电路图中，GPIO 引脚 2 连接到 LED 的阳极（最长的腿）。LED 的阴极连接到 Raspberry Pi Zero 的地线引脚。还使用了一个
    330 欧姆的限流电阻来限制电流的流动。
- en: '![](img/image_02_012.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_012.png)'
- en: Breadboard connections to the Raspberry Pi Zero
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Raspberry Pi Zero 的面包板连接
- en: Code
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码
- en: We will make use of the `python3-gpiozero` library ([https://gpiozero.readthedocs.io/en/v1.3.1/](https://gpiozero.readthedocs.io/en/v1.3.1/)).
    The **Raspbian Jessie** OS image comes with the pre-installed library. It is very
    simple to use, and it is the best option to get started as a beginner. It supports
    a standard set of devices that helps us get started easily.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `python3-gpiozero` 库 ([https://gpiozero.readthedocs.io/en/v1.3.1/](https://gpiozero.readthedocs.io/en/v1.3.1/))。Raspbian
    Jessie 操作系统镜像预装了该库。它非常简单易用，对于初学者来说是最好的入门选择。它支持一组标准设备，帮助我们轻松开始。
- en: 'For example, in order to interface an LED, we need to import the `LED` class
    from the `gpiozero` library:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了连接一个 LED，我们需要从 `gpiozero` 库中导入 `LED` 类：
- en: '[PRE45]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We will be turning the LED *on* and *off* at a 1-second interval. In order
    to do so, we will be *importing* the `time` library. In Python, we need to import
    a library to make use of it. Since we interfaced the LED to the GPIO pin 2, let''s
    make a mention of that in our code:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以 1 秒的间隔打开和关闭 LED。为了做到这一点，我们将导入 `time` 库。在 Python 中，我们需要导入一个库才能使用它。由于我们将
    LED 连接到 GPIO 引脚 2，让我们在代码中提及这一点：
- en: '[PRE46]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We just created a variable named `led` and defined that we will be making use
    of GPIO pin 2 in the `LED` class. Let's make use of a `while` loop to turn the
    LED on and off with a 1-second interval.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了一个名为 `led` 的变量，并在 `LED` 类中定义了我们将会使用 GPIO 引脚 2。让我们使用一个 `while` 循环以 1 秒的间隔来打开和关闭
    LED。
- en: 'The `gpiozero` library''s LED class comes with functions named `on()` and `off()`
    to set the GPIO pin 2 to high and low, respectively:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`gpiozero` 库的 LED 类包含名为 `on()` 和 `off()` 的函数，分别用于将 GPIO 引脚 2 设置为高电平和低电平：'
- en: '[PRE47]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: In Python's time library, there is a `sleep` function that enables introducing
    a 1-second delay between turning on/off the LED. This is executed in an infinite
    loop! We just built a practical example using the Raspberry Pi Zero.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 的 time 库中，有一个 `sleep` 函数，可以在打开/关闭 LED 之间引入 1 秒的延迟。这是在一个无限循环中执行的！我们刚刚使用
    Raspberry Pi Zero 建立了一个实际示例。
- en: 'Putting all the code together in a file named `blinky.py` (available for download
    along with this book), run the code from the command-line terminal (alternatively,
    you may use IDLE3):'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有代码合并到一个名为 `blinky.py` 的文件中（与本书一起提供下载），从命令行终端运行代码（或者，您也可以使用 IDLE3）：
- en: '[PRE48]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The applications of GPIO control
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GPIO 控制的应用
- en: Now that we have implemented our first example, let's discuss some possible
    applications of being able to control the GPIO. We could use the Raspberry Pi's
    GPIO to control the lights in our homes. We will make use of the same example
    to control a table lamp!
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经实现了第一个示例，让我们讨论一下能够控制 GPIO 的可能应用。我们可以使用 Raspberry Pi 的 GPIO 来控制家里的灯光。我们将使用相同的示例来控制台灯！
- en: 'There is a product called the **PowerSwitch Tail II** ([http://www.powerswitchtail.com/Pages/default.aspx](http://www.powerswitchtail.com/Pages/default.aspx))
    that enables interfacing AC appliances like a table lamp to a Raspberry Pi. The
    PowerSwitch Tail comes with control pins (that can take a 3.3V high signal) that
    could be used to turn on/off a lamp. The switch comes with the requisite circuitry/protection
    to interface it directly to a Raspberry Pi Zero:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为 **PowerSwitch Tail II** 的产品 ([http://www.powerswitchtail.com/Pages/default.aspx](http://www.powerswitchtail.com/Pages/default.aspx))，它可以将交流电器（如台灯）连接到
    Raspberry Pi。PowerSwitch Tail 配有控制引脚（可以接收 3.3V 高电平信号），可以用来打开/关闭灯。开关配备了必要的电路/保护，可以直接连接到
    Raspberry Pi Zero：
- en: '![](img/image_02_013.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_013.png)'
- en: The Pi Zero interfaced to the PowerSwitch Tail II
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Pi Zero 连接到 PowerSwitch Tail II
- en: Let's take the same example from the previous section and connect the GPIO pin
    2 to the **+in** pin of the PowerSwitch Tail. Let's connect the ground pin of
    the Raspberry Pi Zero's GPIO header to the PowerSwitch Tail's **-in** pain. The
    PowerSwitch Tail should be connected to the AC mains. The lamp should be connected
    to the AC output of the switch. If we use the same piece of code and connect a
    lamp to the PowerSwitch Tail, we should be able to turn on/off with a 1-second
    interval.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们拿上一节中的相同例子，将 GPIO 引脚 2 连接到 PowerSwitch Tail 的 **+in** 引脚。让我们将 Raspberry Pi
    Zero GPIO 头的接地引脚连接到 PowerSwitch Tail 的 **-in** 引脚。PowerSwitch Tail 应该连接到交流电源。灯应该连接到开关的交流输出。如果我们使用相同的代码并将灯连接到
    PowerSwitch Tail，我们应该能够以 1 秒的间隔开关灯。
- en: '![](img/image_02_014.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_02_014.png)'
- en: PowerSwitch Tail II connected to a Raspberry Pi Zero
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: PowerSwitch Tail II 连接到 Raspberry Pi Zero
- en: This appliance control using the LED blinking code is just an example. It is
    not recommended to turn on/off a table lamp at such short intervals. In future
    chapters, we will make use of the Raspberry Pi Zero's GPIO to control appliances
    from anywhere on the Internet.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 LED 闪烁代码进行家电控制只是一个示例。不建议在如此短的时间内开关台灯。在未来的章节中，我们将利用 Raspberry Pi Zero 的 GPIO
    从互联网上的任何地方控制家电。
- en: Summary
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we reviewed the integers, boolean, and string data types as
    well as arithmetic operations and logical operators in Python. We also discussed
    accepting user inputs and loops. We introduced ourselves to the Raspberry Pi Zero's
    GPIO and discussed an LED blinking example. We took the same example to control
    a table lamp!
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了 Python 中的整数、布尔和字符串数据类型，以及算术运算和逻辑运算符。我们还讨论了接受用户输入和循环。我们介绍了 Raspberry
    Pi Zero 的 GPIO 并讨论了一个 LED 闪烁示例。我们用同样的例子来控制台灯！
- en: Have you heard of the chat application named *Slack*? How about controlling
    a table lamp at home from your laptop at work? If that piques your interest, work
    with us toward that over the next few chapters.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你听说过名为 *Slack* 的聊天应用吗？或者从你的工作笔记本电脑上控制家里的台灯？如果你对此感兴趣，那么在接下来的几章中，我们可以一起努力实现这个目标。
