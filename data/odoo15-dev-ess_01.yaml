- en: '[*Chapter 4*](B16119_04_Final_PD_ePub.xhtml#_idTextAnchor119): Extending Modules'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第4章*](B16119_04_Final_PD_ePub.xhtml#_idTextAnchor119)：扩展模块'
- en: One of Odoo's most powerful capabilities is being able to add features without
    directly touching the code of the extended modules. This allows for clean feature
    extensions that are isolated in their own code components. Extending modules can
    be achieved through inheritance mechanisms, which work as modification layers
    on top of existing objects. These modifications can happen at every level – including
    the model, view, and business logic levels. Instead of directly modifying an existing
    module, we will create a new module by adding a layer on top of the existing one
    with the intended modifications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo最强大的功能之一是能够在不直接接触扩展模块的代码的情况下添加功能。这允许进行干净的特性扩展，这些扩展在它们自己的代码组件中是隔离的。扩展模块可以通过继承机制实现，这些机制作为现有对象上的修改层工作。这些修改可以在每个级别发生——包括模型、视图和业务逻辑级别。我们不会直接修改现有的模块，而是通过在现有模块上添加一个包含预期修改的层来创建一个新的模块。
- en: The previous chapter guided us through creating a new app from scratch. In this
    chapter, we will learn how to create modules that extend existing apps or modules
    and use existing core or community features.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 上一章引导我们从头开始创建一个新应用。在本章中，我们将学习如何创建扩展现有应用或模块的模块，并使用现有的核心或社区功能。
- en: 'To achieve this, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将涵盖以下主题：
- en: Learning project – extending the Library app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习项目 – 扩展图书馆应用
- en: Adding a new field to an existing model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向现有模型添加新字段
- en: Extending models using classic in-place extension
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用经典就地扩展扩展模型
- en: More model inheritance mechanisms
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多的模型继承机制
- en: Extending views and data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展视图和数据
- en: Extending web pages
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展网页
- en: 'By the end of this chapter, you should be able to create Odoo modules that
    extend existing apps. You will be able to add modifications to any of the several
    application components: models, views, business logic code, web page controllers,
    and web page templates.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该能够创建扩展现有应用的Odoo模块。你将能够向任何几个应用组件添加修改：模型、视图、业务逻辑代码、网页控制器和网页模板。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you will need an Odoo server that you can command from a terminal
    session.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要一个可以从终端会话中控制的Odoo服务器。
- en: The code in this chapter depends on the code that we created in [*Chapter 3*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072),
    *Your First Odoo Application*. You should have that code in your add-ons path
    and have a database with the `library_app` module installed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码依赖于我们在[*第3章*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072)，*您的第一个Odoo应用*中创建的代码。你应该在你的附加组件路径中拥有那段代码，并且有一个安装了`library_app`模块的数据库。
- en: This chapter adds the `library_member` add-on module to our project. The corresponding
    code can be found in this book's GitHub repository, [https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials),
    in the `ch04` directory.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将`library_member`附加模块添加到我们的项目中。相应的代码可以在本书的GitHub仓库中找到，[https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials)，在`ch04`目录下。
- en: Learning project – extending the Library app
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习项目 – 扩展图书馆应用
- en: In [*Chapter 3*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072), *Your First
    Odoo Application*, we created the initial module for the `library_member`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072)，*您的第一个Odoo应用*中，我们为`library_member`创建了初始模块。
- en: 'These are the features we must provide:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们必须提供的功能：
- en: Library books can be available to be borrowed or not. This information should
    be shown in the book form and on the website's catalog page.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图书馆书籍可以是可借阅的，也可以不是。这项信息应该在书籍表单和网站目录页面上显示。
- en: Some library member master data, along with the library card number, plus personal
    data, such as name, address, and email.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些图书馆成员主数据，包括图书馆卡号，以及个人数据，如姓名、地址和电子邮件。
- en: We would like to provide members with the messaging and social features that
    are available on the borrowing form, including the planned activities widget,
    to allow for better collaboration.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望向成员提供在借阅表上可用的消息和社交功能，包括计划活动小部件，以实现更好的协作。
- en: Later, we plan to introduce a feature that allows members to borrow books from
    the library, but this is outside our scope for now. This will happen gradually
    throughout the next few chapters.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们计划引入一个允许成员从图书馆借阅书籍的功能，但这个功能目前不在我们的范围内。这将在接下来的几章中逐步实现。
- en: Books
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 书籍
- en: 'The following is a summary of the technical changes we must introduce to books:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们必须引入到书籍中的技术变更总结：
- en: Add an `Is Available?` field. For now, it will be managed manually, but this
    can be automated later.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个“是否可用？”字段。目前，它将由人工管理，但以后可以自动化。
- en: Extend the ISBN validation logic to also support the older 10-digit ISBN format.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展ISBN验证逻辑以也支持旧的10位数字ISBN格式。
- en: Extend the web catalog page to identify unavailable books and to allow the user
    to only filter through available books.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展网络目录页面以识别不可用的书籍，并允许用户仅过滤可用的书籍。
- en: Members
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会员
- en: 'The following is a summary of the technical changes to introduce to library
    members:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是必须引入到图书馆会员中的技术变更总结：
- en: Add a new model to store the person's name, card number, and contact information,
    such as email and address.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个新的模型来存储个人的姓名、卡号和联系信息，例如电子邮件和地址。
- en: Add the social discussion and planned activities features.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加社交讨论和计划活动功能。
- en: 'To start working on this extension module, we should create the `library_member`
    directory alongside `library_app` and add two files—an empty `__init__.py` file
    and a `__manifest__.py` file with the following content:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始工作在这个扩展模块上，我们应该在`library_app`旁边创建`library_member`目录，并添加两个文件——一个空的`__init__.py`文件和一个包含以下内容的`__manifest__.py`文件：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, we are ready to start working on the features. Our first task is a frequent
    and simple request – adding a new field to an existing model. This happens to
    be a great way to introduce Odoo's inheritance mechanisms.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备好开始工作在功能上了。我们的首要任务是一个频繁且简单的请求——向现有模型添加新字段。这恰好是介绍Odoo继承机制的好方法。
- en: Adding a new field to an existing model
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向现有模型添加新字段
- en: Our first task is to add the `is_available` Boolean field to the book model.
    For now, this will be a simple editable field, but at a later stage, we can imagine
    changing it to be automatic, based on books that have been borrowed and returned.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的首要任务是向书籍模型添加`is_available`布尔字段。目前，这将是一个简单的可编辑字段，但稍后我们可以想象将其改为自动，基于已借出和归还的书籍。
- en: To extend an existing model, we must use a Python class with the `_inherit`
    attribute, identifying the model being extended. The new class inherits all of
    the features of the parent Odoo model, and we only need to declare the modifications
    to introduce. We can think of this type of inheritance as getting a reference
    for the existing model and making in-place changes to it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要扩展现有的模型，我们必须使用具有`_inherit`属性的Python类，以标识正在扩展的模型。新类继承父Odoo模型的所有功能，我们只需要声明要引入的修改。我们可以将这种继承视为获取现有模型的引用并在其上进行原地更改。
- en: Adding new fields with the in-place model extension
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过原地模型扩展添加新字段
- en: Extending models is done through Python classes by using the Odoo-specific inheritance
    mechanism that's declared using the `_inherit` class attribute. This `_inherit`
    class attribute identifies the model to be extended. The declared calls capture
    all the features of the inherited Odoo model and are ready for the modifications
    to introduce to be declared.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Odoo特定的继承机制，通过Python类扩展模型，该机制通过`_inherit`类属性声明。这个`_inherit`类属性标识了要扩展的模型。声明的调用捕获了继承的Odoo模型的所有功能，并准备好声明要引入的修改。
- en: 'The coding style guidelines recommend having a Python file for each model,
    so we will add a `library_member/models/library_book.py` file that extends the
    original model. Let''s start by adding the `__init__.py` code files that are needed
    for that file to be included in the module:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 编码风格指南建议为每个模型创建一个Python文件，因此我们将添加一个`library_member/models/library_book.py`文件，该文件扩展原始模型。让我们先添加所需的`__init__.py`代码文件，以便该文件包含在模块中：
- en: 'Add the `library_member/__init__.py` file, making the code that''s in the `models`
    subdirectory known:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`library_member/__init__.py`文件，使`models`子目录中的代码可知：
- en: '[PRE1]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the `library_member/models/__init__.py` file, importing the used code files
    inside that subdirectory:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`library_member/models/__init__.py`文件，导入该子目录中使用的代码文件：
- en: '[PRE2]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create the `library_member/models/library_book.py` file by extending the `library.book`
    model:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过扩展`library.book`模型创建`library_member/models/library_book.py`文件：
- en: '[PRE3]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we used the `_inherit` class attribute to declare the model to extend.
    Notice that we didn't use any other class attributes, not even `_name`. This is
    not needed unless we want to make changes to any of them.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了`_inherit`类属性来声明要扩展的模型。请注意，我们没有使用任何其他类属性，甚至没有使用`_name`。这不是必需的，除非我们想要对它们进行更改。
- en: Tip
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: '`_name` is the model identifier; what happens if we try to change it? This
    is allowed, and doing so creates a new model that is a copy of the inherited one.
    This is called **prototype inheritance** and it will be discussed later in this
    chapter, in the *Copying models with prototype inheritance* section.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`_name` 是模型标识符；如果我们尝试更改它会发生什么？这是允许的，这样做会创建一个新的模型，它是继承模型的副本。这被称为 **原型继承**，将在本章的
    *使用原型继承复制模型* 部分中进一步讨论。'
- en: We can think of this as getting a reference to a model definition living in
    a central registry and making in-place changes to it. This can include adding
    fields, modifying existing fields, modifying model class attributes, or adding
    methods with new business logic.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其视为获取一个位于中央注册表中的模型定义的引用，并对其进行原地更改。这可以包括添加字段、修改现有字段、修改模型类属性或添加具有新业务逻辑的方法。
- en: To add the new model fields to the database tables, we must install the add-on
    module. If everything goes as expected, the newly added fields should be visible
    if we go to the `library.book` model.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要将新的模型字段添加到数据库表中，我们必须安装附加模块。如果一切按预期进行，当我们转到 `library.book` 模型时，新添加的字段应该是可见的。
- en: Adding a field to the Form view
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向表单视图添加字段
- en: Forms, lists, and search views are defined using XML data structures. To extend
    views, we need a way to modify the XML. This means locating XML elements and then
    introducing modifications at those points.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 表单、列表和搜索视图是使用 XML 数据结构定义的。要扩展视图，我们需要一种修改 XML 的方法。这意味着定位 XML 元素，然后在那些点进行修改。
- en: The XML data record for inherited views is similar to the ones for regular views,
    with an additional `inherit_id` attribute for referring to the view being extended.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 继承视图的 XML 数据记录与常规视图的类似，但有一个额外的 `inherit_id` 属性，用于引用要扩展的视图。
- en: We are going to extend the book view to add the `is_available` field.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展书籍视图以添加 `is_available` 字段。
- en: The first thing we need to do is find the XML ID for the view to be extended.
    We can find that by looking up the view in the `library_app.view_form_book`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是找到要扩展的视图的 XML ID。我们可以通过在 `library_app.view_form_book` 中查找视图来找到它。
- en: While we're there, we should also locate the XML element to insert the changes.
    We will choose to add the `Is Available?` field after the `ISBN` field. The element
    to use can usually be identified by its `name` attribute. In this case, it's `<field
    name="isbn" />`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们到达那里时，我们还应该定位要插入更改的 XML 元素。我们将选择在 `ISBN` 字段之后添加 `Is Available?` 字段。要使用的元素通常可以通过其
    `name` 属性来识别。在这种情况下，它是 `<field name="isbn" />`。
- en: 'When adding the XML file to extend the `Partner` views, `views/book_view.xml`,
    it should have the following content:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当将 XML 文件添加到扩展 `Partner` 视图时，`views/book_view.xml`，它应该具有以下内容：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The inheritance-specific elements are highlighted in the preceding code. The
    `inherit_id` record field identifies the view to be extended while using the `ref`
    attribute to refer to its external identifier.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，突出显示了继承特定的元素。`inherit_id` 记录字段标识了要扩展的视图，同时使用 `ref` 属性来引用其外部标识符。
- en: The `arch` field contains the element for declaring the extension point to use,
    the `<field>` element with `name="isbn"`, and the position of the new elements
    to add, which is `position="after"` in this case. Inside the extension elements,
    we have the XML to add, which is the `is_available` field in this case.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`arch` 字段包含声明要使用的扩展点的元素，即具有 `name="isbn"` 的 `<field>` 元素，以及要添加的新元素的位置，在这种情况下是
    `position="after"`。在扩展元素内部，我们有要添加的 XML，在这种情况下是 `is_available` 字段。'
- en: 'This is what the book form will look like after creating this extension:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此扩展后，书籍表单将看起来如下：
- en: '![Figure 4.1 – The book form with the "Is Available?" field added'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.1 – The book form with the "Is Available?" field added'
- en: '](img/Figure_4.1_B16119.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.1 – The book form with the "Is Available?" field added'
- en: Figure 4.1 – The book form with the "Is Available?" field added
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 添加了 "Is Available?" 字段的书籍表单
- en: We just went through the inheritance basics and added a new field for the model
    and view layers. Next, we will learn more about the model extension approach we
    used; that is, classic inheritance.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚了解了继承的基本知识，并为模型和视图层添加了新的字段。接下来，我们将学习更多关于我们使用的模型扩展方法；即，经典继承。
- en: Extending models using classic in-place extension
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用经典原地扩展扩展模型
- en: We can think of the classic model inheritance as an in-place extension. When
    a Python class with the `_inherit` attribute is declared, it gets a reference
    to the corresponding model definition, to then add extensions to it. The model
    definition is stored in the Odoo model registry and is available for us to add
    further modifications to it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将经典模型继承视为原地扩展。当声明具有 `_inherit` 属性的 Python 类时，它将获得对应模型定义的引用，然后向其中添加扩展。模型定义存储在
    Odoo 模型注册表中，我们可以对其进行进一步修改。
- en: 'Now, let''s learn how to use this for frequent extension use cases: modifying
    the attributes of an existing field and extending Python methods to add or modify
    business logic.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何使用它来处理频繁的扩展用例：修改现有字段的属性和扩展 Python 方法以添加或修改业务逻辑。
- en: Incrementally modifying existing fields
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逐步修改现有字段
- en: When we're extending a model, existing fields can be modified incrementally.
    This means that we only need to define the field attributes to change or add.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们扩展模型时，现有字段可以逐步修改。这意味着我们只需要定义要更改或添加的字段属性。
- en: 'We will make two changes to the book fields that were created in the `library_app`
    module:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对在 `library_app` 模块中创建的书籍字段进行两项更改：
- en: On the `isbn` field, add a help tooltip explaining that we support both 10-
    and 13-digit ISBNs, with the latter being implemented in the following section.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `isbn` 字段上，添加一个帮助工具提示，说明我们支持 10 位和 13 位 ISBN，后者将在下一节中实现。
- en: On the `publisher_id` field, add a database index to it to make searching on
    it more efficient.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `publisher_id` 字段上，添加数据库索引以提高搜索效率。
- en: 'We should edit the `library_member/models/library_book.py` file and add the
    following lines to the `library.book` model:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该编辑 `library_member/models/library_book.py` 文件，并将以下行添加到 `library.book` 模型中：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This modifies the fields with the specified attributes, leaving all the other
    attributes that were not explicitly mentioned unmodified.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这修改了具有指定属性的字段，而未明确提及的所有其他属性保持不变。
- en: 'Once we upgrade the module, going to the book form and hovering the mouse pointer
    over the ISBN field will show the tooltip message that was added to the field.
    The effect of `index=True` is harder to notice, but it can be seen in the field
    definition, which can be accessed from the **Developer Tools** menu by choosing
    the **View Fields** option, or from the **Settings** | **Technical** | **Database
    Structure** | **Models** menu:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们升级模块，转到书籍表单并将鼠标指针悬停在 ISBN 字段上，将显示添加到字段的工具提示消息。`index=True` 的影响较难察觉，但可以在字段定义中看到，这可以通过选择
    **开发者工具** 菜单中的 **查看字段** 选项或从 **设置** | **技术** | **数据库结构** | **模型** 菜单访问：
- en: '![Figure 4.2 – The Publisher field with the index enabled'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.2 – The Publisher field with the index enabled]'
- en: '](img/Figure_4.2_B16119.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.2_B16119.jpg]'
- en: Figure 4.2 – The Publisher field with the index enabled
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 启用索引的出版商字段
- en: Extending Python methods to add features to the business logic
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展 Python 方法以添加功能到业务逻辑
- en: The business logic that's coded in Python methods can also be extended. For
    this, Odoo uses the Python object inheritance mechanism to extend the inherited
    class behavior.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 编码在 Python 方法中的业务逻辑也可以扩展。为此，Odoo 使用 Python 对象继承机制来扩展继承类的行为。
- en: As a practical example, we will extend the library book ISBN validation logic.
    The logic provided by the base Library app validates modern 13-digit ISBNs. But
    some older titles might come with a 10-digit ISBN. The `_check_isbn()` method
    should be extended to also validate these cases.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作为实际示例，我们将扩展图书馆书籍 ISBN 验证逻辑。基础图书馆应用程序提供的逻辑验证现代 13 位 ISBN。但一些较老的标题可能带有 10 位 ISBN。`_check_isbn()`
    方法应该扩展以验证这些情况。
- en: 'Edit the `library_member/models/library_book.py` file by adding the following
    code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加以下代码来编辑 `library_member/models/library_book.py` 文件：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To extend a method, in the inherited class, we define a method with the same
    name – `_check_isbn()`, in this case. This method should, at some point, use `super()`
    to call the corresponding method that was implemented in the parent class. In
    this example, the particular code that was used was `super()._check_isbn()`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要扩展一个方法，在继承的类中，我们定义一个具有相同名称的方法 – `_check_isbn()`，在这种情况下。此方法应该在某个点上使用 `super()`
    来调用在父类中实现的相关方法。在这个例子中，所使用的特定代码是 `super()._check_isbn()`。
- en: In this method extension, we added our logic before the `super()` call, running
    the parent class code. It checks whether the ISBN is 10 digits long. In that case,
    the added ISBN-10 validation logic is executed. Otherwise, it falls back to the
    original ISBN checking logic, handling the 13-digit case.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方法扩展中，我们在调用`super()`之前添加了我们的逻辑，运行父类代码。它检查ISBN是否为10位长。如果是这样，将执行添加的ISBN-10验证逻辑。否则，它将回退到原始ISBN检查逻辑，处理13位的情况。
- en: 'We can try this, or even better, write a test case. Here is an example of a
    10-digit ISBN: the original ISBN of William Golding''s *Lord of the Flies* is
    0-571-05686-5.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试这样做，或者更好的方法是编写一个测试用例。以下是一个10位ISBN的示例：威廉·戈尔丁的《蝇王》原始ISBN为0-571-05686-5。
- en: Changes in Odoo 11
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 11中的变更
- en: In Odoo 11, the Python version that was used changed from *2.7* to *3.5* or
    later. Python 3 has breaking changes and is not fully compatible with Python 2\.
    In particular, the `super()` syntax was simplified in Python 3\. For previous
    Odoo versions that use Python 2, `super()` needs two arguments – the class name
    and `self`; for example, `super(Book, self)._check_isbn()`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo 11中，所使用的Python版本从*2.7*更改为*3.5*或更高版本。Python 3有破坏性变更，并且与Python 2不完全兼容。特别是，Python
    3中`super()`语法被简化了。对于之前使用Python 2的Odoo版本，`super()`需要两个参数——类名和`self`；例如，`super(Book,
    self)._check_isbn()`。
- en: Classic inheritance is the most frequently used extension mechanism. But Odoo
    provides additional extension approaches that are useful in other cases. We will
    explore those next.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 经典继承是最常用的扩展机制。但Odoo提供了其他情况下有用的附加扩展方法。我们将在下一部分探讨这些方法。
- en: More model inheritance mechanisms
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多模型继承机制
- en: The previous section discussed **classic inheritance**, which can be seen as
    an *in-place extension*. This is the most frequently used approach, but the Odoo
    framework also supports a few other extension mechanisms that are useful in other
    cases.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节讨论了**经典继承**，这可以被视为一种*原地扩展*。这是最常用的方法，但Odoo框架还支持一些其他情况下有用的扩展机制。
- en: 'These are delegation inheritance, prototype inheritance, and the use of mixins:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是委派继承、原型继承和混入的使用：
- en: '`User` record embeds a `Partner` record, so that a `User` record has all the
    fields available for the `Partner` records, plus the fields specific to the `User`
    records. It is used through the `_inherits` attribute.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`User`记录嵌入一个`Partner`记录，因此`User`记录具有所有可用于`Partner`记录的字段，再加上特定于`User`记录的字段。它通过`_inherits`属性使用。'
- en: '`_inherit` with the model to copy and the `_name` attribute with the identifier
    for the new model to be created.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`_inherit`指定要复制的模型和`_name`属性指定新模型的标识符。
- en: '`mail.thread` model, which is provided by the `mail` add-on module. It implements
    the chatter and messaging features that are available in several models throughout
    Odoo, such as *Partners* and *Sales Quotations*. A `mixin` class is constructed
    from `Models.abstract`, instead of `Models.model`, and is used with `_inherit`.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由`mail`附加模块提供的`mail.thread`模型。它实现了Odoo中多个模型中可用的聊天和消息功能，例如*合作伙伴*和*销售报价*。从`Models.abstract`而不是`Models.model`构建了一个`mixin`类，并使用`_inherit`。
- en: The next few sections explore these possibilities in more detail.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几节将更详细地探讨这些可能性。
- en: Embedding models using delegation inheritance
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用委派继承嵌入模型
- en: '**Delegation inheritance** allows us to reuse data structures, without duplication
    in the database. It embeds an instance of the delegated model inside the inheriting
    model.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**委派继承**允许我们重用数据结构，而无需在数据库中进行重复。它将委派模型的一个实例嵌入到继承模型中。'
- en: Note
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To be technically precise, delegation inheritance is not real object inheritance;
    instead, it is object composition, where some features of an object are delegated
    to, or provided by, a second object.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在技术上精确，委派继承不是真正的对象继承；相反，它是对象组合，其中某些对象特性被委派给或由第二个对象提供。
- en: 'Note the following about delegation:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 关于委派，请注意以下内容：
- en: Creating a new model record also creates and links a delegated model record.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的模型记录也会创建和链接一个委派模型记录。
- en: Fields from the delegated model that don't exist in the inheriting model are
    available for read and write operations, behaving like related computed fields.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在继承模型中不存在的委派模型字段在读写操作中可用，表现得像相关计算字段。
- en: For example, for the User model, each record contains a Partner record, so the
    fields you find on a Partner will be available, plus a few fields that are specific
    to users.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于用户模型，每个记录都包含一个合作伙伴记录，因此你将在合作伙伴上找到的字段将可用，再加上一些特定于用户的字段。
- en: For the Library project, we want to add a **Library Members** model. Members
    will be able to borrow books and have a library card to be used when borrowing.
    Member master data should include the card number, plus some personal information,
    such as email and address. The Partner model already supports contact and address
    information, so it's best to reuse it, rather than duplicating the data structures.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于图书馆项目，我们希望添加一个**图书馆成员**模型。成员将能够借阅书籍并拥有用于借阅的图书馆卡。成员主数据应包括卡号，以及一些个人信息，如电子邮件和地址。合作伙伴模型已经支持联系和地址信息，因此最好重用它，而不是复制数据结构。
- en: 'To add the Partner fields to the Library Member model using delegation inheritance,
    follow these steps:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用委托继承将合作伙伴字段添加到图书馆成员模型中，请按照以下步骤操作：
- en: 'The Python file that will be used to implement inheritance must be imported.
    Edit `library_member/model/__init__.py` by adding the following highlighted line:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用于实现继承的Python文件导入。通过添加以下高亮行编辑`library_member/model/__init__.py`：
- en: '[PRE7]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, add the Python file describing the new Library Member model, `library_member/models/library_member.py`,
    which contains the following code:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加描述新图书馆成员模型的Python文件，`library_member/models/library_member.py`，其中包含以下代码：
- en: '[PRE8]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: from odoo import fields, models
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from odoo import fields, models
- en: 'class Member(models.Model):'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'class Member(models.Model):'
- en: _name = "library.member"
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _name = "library.member"
- en: _description = "Library Member"
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _description = "Library Member"
- en: '_inherits = {"res.partner": "partner_id"}'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '_inherits = {"res.partner": "partner_id"}'
- en: card_number = fields.Char()
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: card_number = fields.Char()
- en: partner_id = fields.Many2one(
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: partner_id = fields.Many2one(
- en: '"res.partner",'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"res.partner",'
- en: ondelete="cascade",
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ondelete="cascade",
- en: required=True)
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: required=True)
- en: '[PRE9]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To add the security ACLs, create the `library_member/security/ir.model.access.csv`
    file with this content:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加安全ACL，创建包含以下内容的`library_member/security/ir.model.access.csv`文件：
- en: '[PRE10]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To add the menu item, create the `library_member/views/library_menu.xml` file
    with the following code:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加菜单项，创建包含以下代码的`library_member/views/library_menu.xml`文件：
- en: '[PRE11]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To add the views, create the `library_member/views/member_view.xml` file with
    the following code:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加视图，创建包含以下代码的`library_member/views/member_view.xml`文件：
- en: '[PRE12]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, we should edit the manifest to declare these three new files:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们应该编辑清单以声明这三个新文件：
- en: '[PRE13]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If everything was entered correctly, after a module upgrade, we should be able
    to work with the new Library Member model.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切输入正确，在模块升级后，我们应该能够使用新的图书馆成员模型。
- en: Copying models with prototype inheritance
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制具有原型继承的模型
- en: Classic inheritance uses the `_inherit` attribute to extend a model. Since the
    `_name` attribute is not modified, it effectively performs an in-place modification
    on the same model.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 经典继承使用`_inherit`属性来扩展模型。由于没有修改`_name`属性，它实际上在同一个模型上执行原地修改。
- en: If the `_name` attribute is also modified, along with `_inherit`, we get a new
    model that is a copy of the inherited one. This new model can then have features
    added to it that are specific to it and won't be added to the parent model. The
    copied model is independent of the parent model, which will be unaffected by its
    modifications. It has its own database table and data. The official documentation
    calls this **prototype inheritance**.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同时修改了`_name`属性和`_inherit`，我们将得到一个新的模型，它是继承模型的副本。然后，这个新模型可以添加一些特定于它的功能，而不会添加到父模型中。复制的模型独立于父模型，其修改不会影响父模型。它有自己的数据库表和数据。官方文档称这为**原型继承**。
- en: In practice, there is little benefit in using `_inherit` to copy a model. Instead,
    delegation inheritance is preferred, since it reuses data structures without duplicating
    them.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，使用`_inherit`复制模型的好处很少。相反，首选委托继承，因为它重用数据结构而不复制它们。
- en: Things become more interesting when we use inheritance from multiple parents.
    For this, `_inherit` will be a list of model names, instead of a single name.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用多父类继承时，事情变得更有趣。为此，`_inherit`将是一个模型名称列表，而不是单个名称。
- en: This can be used to mix several models into one. It allows us to have a model
    proposing features to be reused several times. This pattern is widely used with
    abstract mixin classes. This will be discussed in detail in the next section.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用来将多个模型混合到一个模型中。它允许我们有一个模型提出要重复使用的功能。这种模式通常与抽象混合类一起使用。这将在下一节中详细讨论。
- en: Reusing model features using mixin classes
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用混合类重用模型功能
- en: Setting the `_inherit` attribute with a list of model names will inherit the
    features from those models. Most of the time, this is done to leverage mixin classes.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模型名称列表设置`_inherit`属性将继承那些模型的功能。大多数情况下，这是为了利用混入类。
- en: A `models.AbstractModel`, with no actual representation in the database, instead
    of `models.Model`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一个没有在数据库中实际表示的`models.AbstractModel`，而不是`models.Model`。
- en: 'The Odoo standard add-ons propose several useful mixins. Searching the code
    for `models.AbstractModel` will reveal them. What''s noteworthy, and probably
    the two most widely used, are these mixins, which are provided by the Discuss
    app (the `mail` add-on module):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo标准插件提出了几个有用的混入类。在代码中搜索`models.AbstractModel`将揭示它们。值得注意的是，可能是最广泛使用的两个混入类，这些混入类由Discuss应用（`mail`插件模块）提供：
- en: The `mail.thread` mixin provides features for the message board, also known
    as **chatter**, which can be found at the bottom or right-hand side of many document
    forms, along with the logic regarding messages and notifications.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mail.thread`混入类为消息板（也称为**聊天**）提供功能，这在许多文档表单的底部或右侧都可以找到，包括有关消息和通知的逻辑。'
- en: The `mail.activity.mixin` mixin provides *activities*, which are also exposed
    through the chatter discussion widget, to define and plan to-do tasks.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mail.activity.mixin`混入类提供**活动**，这些活动也通过聊天讨论小部件公开，用于定义和计划待办任务。'
- en: Changes in Odoo 11
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Odoo 11的变化
- en: The *activities* mixin is a new feature that was introduced in Odoo 11 and is
    not available in earlier versions.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**活动**混入类是Odoo 11中引入的新功能，在早期版本中不可用。'
- en: Chatter and activities are widely used features, and in the next section, we
    will take a moment to demonstrate how to add them.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天和活动是广泛使用的功能，在下一节中，我们将花一点时间演示如何添加它们。
- en: Adding message chatter and activities to a model
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向模型添加消息聊天和活动
- en: 'We will now add the message chatter and activity mixins to the **Library Members**
    model. This is what is needed to add them:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将向**图书馆成员**模型添加消息聊天和活动混入类。这是添加它们的所需步骤：
- en: Add the dependency to the add-on module that's providing the mixin models; that
    is, `mail`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将依赖项添加到提供混入模型的插件模块；即`mail`。
- en: Inherit the `mail.thread` and `mail.activity.mixin` mixin classes.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继承`mail.thread`和`mail.activity.mixin`混入类。
- en: Add fields to the `Form` view.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`Form`视图添加字段。
- en: 'Let''s check the preceding steps in detail:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细检查前面的步骤：
- en: 'To add the dependency to the `mail` add-on, edit the `__manifest__.py` file:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将依赖项添加到`mail`插件，编辑`__manifest__.py`文件：
- en: '[PRE14]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To inherit the mixin classes, edit the `library_member/models/library_member.py`
    file to add the following highlighted text:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要继承混入类，编辑`library_member/models/library_member.py`文件，添加以下高亮文本：
- en: '[PRE15]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we must add the relevant fields to `Library Member Form`. Edit the
    `library_member/views/member_view.xml` file by adding the following highlighted
    code:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们必须将相关字段添加到`Library Member Form`。通过添加以下高亮代码编辑`library_member/views/member_view.xml`文件：
- en: '[PRE16]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As we can see, the `mail` module not only provides fields for the followers,
    activities, and messages, but it also provides specific web client widgets for
    them, all of which are being used here.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，`mail`模块不仅为关注者、活动和消息提供字段，还提供特定的Web客户端小部件，所有这些都在这里被使用。
- en: 'Once the module has been upgraded, the **Library Members** form should look
    like this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模块升级，**图书馆成员**表单应该看起来像这样：
- en: '![Figure 4.3 – The Library Members form view'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.3 – 图书馆成员表单视图'
- en: '](img/Figure_4.3_B16119.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.3_B16119.jpg)'
- en: Figure 4.3 – The Library Members form view
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 – 图书馆成员表单视图
- en: Note that the mixins alone don't cause any changes to be made to access security,
    including record rules. In some cases, there are record rules in place, limiting
    what records are accessible to each user. For example, if we want users to only
    view records they are followers of, a record rule for that must be explicitly
    added.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，混入类本身不会对访问安全造成任何变化，包括记录规则。在某些情况下，已经存在记录规则，限制了每个用户可访问的记录。例如，如果我们想用户只能查看他们是关注者的记录，必须显式添加该记录规则。
- en: The `mail.thread` model includes a field for listing the follower `message_partner_ids`.
    To implement the followers' access rules, a `[('message_partner_ids', 'in', [user.partner_id.id])]`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`mail.thread`模型包含一个用于列出关注者`message_partner_ids`的字段。为了实现关注者的访问规则，需要添加`[(''message_partner_ids'',
    ''in'', [user.partner_id.id])]`。'
- en: With that, we've seen how to extend modules at the model and logic layers. The
    next step is to extend the views to reflect the changes that were made in the
    model layer.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些，我们已经看到了如何在模型和逻辑层扩展模块。下一步是扩展视图，以反映在模型层所做的更改。
- en: Extending views and data
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展视图和数据
- en: Views and other data components can also be modified by an extension module.
    For views, the case is usually to add features. The view presentation structure
    is defined with XML. To extend this XML, we must locate the node to extend and
    then declare the action to perform there, such as inserting additional XML elements.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 视图和其他数据组件也可以通过扩展模块进行修改。对于视图，通常的情况是添加功能。视图的表示结构是用 XML 定义的。要扩展此 XML，我们必须找到要扩展的节点，然后声明在那里执行的操作，例如插入额外的
    XML 元素。
- en: The other data elements represent records that were written to the database.
    Extension modules can write on them to change some values.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 其他数据元素代表写入数据库的记录。扩展模块可以写入它们以更改某些值。
- en: Extending views
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展视图
- en: Views are defined using XML and are stored in the architecture field, `arch`.
    To extend a view, we must locate the node where the extension will take place,
    and then perform the intended change, such as adding XML elements.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是用 XML 定义的，并存储在架构字段 `arch` 中。要扩展视图，我们必须找到扩展将发生的位置的节点，然后执行预期的更改，例如添加 XML 元素。
- en: Odoo provides a simplified notation to extend XML by using the XML tag we want
    to match –  `<field>`, for example – with one or more distinctive attributes to
    match, such as `name`. Then, we must add the `position` attribute to declare the
    kind of modification to make.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 提供了一种简化的表示法，通过使用我们想要匹配的 XML 标签——例如 `<field>` ——以及一个或多个具有匹配功能的独特属性，如 `name`，来扩展
    XML。然后，我们必须添加 `position` 属性来声明要进行的修改类型。
- en: 'Recovering the example we used earlier in this chapter, to add additional content
    after the `isbn` field, we can use the following code:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复我们在本章前面使用的示例，要在 `isbn` 字段之后添加额外内容，我们可以使用以下代码：
- en: '[PRE17]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Any XML element and attribute can be used to select the node to use as the extension
    point, except for `string` attributes. The values of string attributes are translated
    into the user's active language during view generation, so they can't be reliably
    used as node selectors.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 XML 元素和属性都可以用来选择作为扩展点的节点，除了 `string` 属性。字符串属性的值在视图生成期间被转换为用户的活跃语言，因此它们不能可靠地用作节点选择器。
- en: 'The extension operation to perform is declared with the `position` attribute.
    Several operations are allowed, as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行扩展操作是通过 `position` 属性声明的。允许执行以下几种操作：
- en: '`inside` (the default): Appends the content inside the selected node. The node
    should be a container, such as `<group>` or `<page>`.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inside`（默认）：在所选节点内追加内容。节点应该是容器，例如 `<group>` 或 `<page>`。'
- en: '`after`: Adds the content after the selected node.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`after`：在所选节点之后添加内容。'
- en: '`before`: Adds the content before the selected node.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`before`：在所选节点之前添加内容。'
- en: '`replace`: Replaces the selected node. If it''s used with empty content, it
    deletes the element. Since Odoo 10, it also allows you to wrap an element with
    other markups by using `$0` in the content to represent the element being replaced;
    for example, `<field name="name" position="replace"><h1>$0</h1></field>`.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`replace`：替换所选节点。如果它与空内容一起使用，则删除该元素。自 Odoo 10 以来，它还允许您使用内容中的 `$0` 来包装元素，以表示被替换的元素；例如，`<field
    name="name" position="replace"><h1>$0</h1></field>`。'
- en: '`attributes`: Modifies the attribute values for the matched element. The content
    should have one or more `<attribute name="attr-name">value<attribute>` elements,
    such as `<attribute name="invisible">True></attribute>`. If it''s used with no
    body, such as in `<attribute name="invisible"/>`, the attribute is removed from
    the selected element.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attributes`：修改匹配元素的属性值。内容应包含一个或多个 `<attribute name="attr-name">value<attribute>`
    元素，例如 `<attribute name="invisible">True</attribute>`。如果没有主体使用，例如 `<attribute name="invisible"/>`，则从所选元素中删除该属性。'
- en: Tip
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: While `position="replace"` allows us to delete XML elements, this should be
    avoided. It can break based on modules that may be using the deleted node as an
    extension point to add other elements. As an alternative, consider leaving the
    element and making it invisible instead.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然 `position="replace"` 允许我们删除 XML 元素，但应避免使用。它可能会因为使用被删除节点作为扩展点来添加其他元素的模块而损坏。作为替代方案，考虑保留该元素并使其不可见。
- en: Moving XML nodes to a different location
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 XML 节点移动到不同的位置
- en: Except for the `attributes` operation, the preceding locators can be combined
    with a child element with `position="move"`. The effect is to move the child locator
    target node to the parent locator's target position.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`attributes`操作外，前面的定位器可以与具有`position="move"`的子元素组合。其效果是将子定位器目标节点移动到父定位器目标位置。
- en: Changes in Odoo 12
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 12中的更改
- en: The `position="move"` child locator is new in Odoo 12 and is not available in
    previous versions.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`position="move"`子定位器是Odoo 12中的新功能，在之前的版本中不可用。'
- en: 'Here is an example of moving `my_field` from its current location to the position
    after `target_field`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将`my_field`从当前位置移动到`target_field`之后位置的示例：
- en: '[PRE18]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The other view types, such as list and search views, also have an `arch` field
    and can be extended in the same way as form views can.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 其他视图类型，如列表和搜索视图，也有`arch`字段，并且可以像表单视图一样进行扩展。
- en: Using XPath to select XML extension points
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用XPath选择XML扩展点
- en: In some cases, we may not have an attribute with a unique value to use as the
    XML node selector. This can happen when the element to select does not have a
    `name` attribute, as is often the case for `<group>`, `<notebook>`, or `<page>`
    view elements. Another case is when there are several elements with the same `name`
    attribute, as in the case of Kanban QWeb views, where the same field can be included
    more than once in the same XML template.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们可能没有具有唯一值的属性可以用来作为XML节点选择器。当要选择的元素没有`name`属性时，这种情况可能发生，例如对于`<group>`、`<notebook>`或`<page>`视图元素。另一种情况是当有多个元素具有相同的`name`属性时，例如在Kanban
    QWeb视图中，相同的字段可以在同一个XML模板中包含多次。
- en: For these cases, we need a more sophisticated way to locate the XML element
    to extend. Being XML, **XPath expressions** are the natural way to locate elements.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些情况，我们需要一种更复杂的方法来定位要扩展的XML元素。作为XML，**XPath表达式**是定位元素的自然方式。
- en: For example, taking the book form view we defined in the previous chapter, an
    XPath expression for locating the `<field name="isbn">` element is `//field[@name]='isbn'`.
    This expression finds `<field>` elements with a `name` attribute equal to `isbn`.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以我们在上一章中定义的书籍表单视图为例，定位`<field name="isbn">`元素的XPath表达式是`//field[@name]='isbn'`。这个表达式找到具有`name`属性等于`isbn`的`<field>`元素。
- en: 'The XPath equivalent to the book form view extension that we created in the
    previous section would be as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 之前章节中创建的书籍表单视图扩展的XPath等价表达式如下：
- en: '[PRE19]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'More information on the supported XPath syntax can be found in the official
    Python documentation: [https://docs.python.org/3/library/xml.etree.elementtree.html#supported-xpath-syntax](https://docs.python.org/3/library/xml.etree.elementtree.html#supported-xpath-syntax).'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于支持的XPath语法的详细信息可以在官方Python文档中找到：[https://docs.python.org/3/library/xml.etree.elementtree.html#supported-xpath-syntax](https://docs.python.org/3/library/xml.etree.elementtree.html#supported-xpath-syntax)。
- en: If an XPath expression matches multiple elements, only the first one will be
    selected as the target for an extension. Therefore, they should be made as specific
    as possible using unique attributes. Using the `name` attribute is the easiest
    way to ensure that we find the elements we want to use as an extension point.
    Thus, it is important to have these unique identifiers in the XML elements of
    the views we create.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果XPath表达式匹配多个元素，则只有第一个元素将被选为目标进行扩展。因此，应该尽可能使用唯一的属性使其尽可能具体。使用`name`属性是确保我们找到作为扩展点的元素的最简单方法。因此，在我们的创建的视图的XML元素中拥有这些唯一的标识符非常重要。
- en: Modifying existing data
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改现有数据
- en: Regular data records can also be *extended*, which, in practice, means writing
    over existing values. For this, we just need to identify the record to write on,
    as well as the fields and values to update. XPath expressions are not needed since
    we are not modifying XML `arch` structures, as we do for views.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 常规数据记录也可以被*扩展*，在实践中，这意味着覆盖现有值。为此，我们只需要识别要写入的记录以及要更新的字段和值。由于我们不是像视图那样修改XML `arch`结构，所以不需要XPath表达式。
- en: 'The `<record id="x" model="y">` data loading elements perform an insert or
    update operation on model `y`: if record `x` does not exist, it is created; otherwise,
    it is updated/written over.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`<record id="x" model="y">`数据加载元素在模型`y`上执行插入或更新操作：如果记录`x`不存在，则创建它；否则，更新/覆盖它。'
- en: Records in other modules can be accessed using the `<module>.<identifier>` global
    identifier, so a module can update a record that's been created by another module.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`<module>.<identifier>`全局标识符访问其他模块中的记录，因此一个模块可以更新由另一个模块创建的记录。
- en: Tip
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: The dot (`.`) is reserved to separate the module name from the object identifier.
    So, it can't be used in identifier names. Instead, use the underscore (`_`) character.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 点号（`.`）被保留用于分隔模块名称和对象标识符。因此，它不能用于标识符名称。相反，使用下划线（`_`）字符。
- en: As an example, we will change the name of the User security group to `Librarian`.
    The record to modify was created in the `library_app` module, with the `library_app.library_group_user`
    identifier.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将把用户安全组的名称改为`Librarian`。要修改的记录是在`library_app`模块中创建的，具有`library_app.library_group_user`标识符。
- en: 'To do this, we will add the `library_member/security/library_security.xml`
    file, along with the following code:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们将添加`library_member/security/library_security.xml`文件，以及以下代码：
- en: '[PRE20]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note that we used a `<record>` element, writing only to the `name` field. You
    can think of this as a write operation in this field.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用了`<record>`元素，只写入`name`字段。你可以将这视为在这个字段上的写操作。
- en: Tip
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: When using a `<record>` element, we can select the fields we want to write on,
    but the same is not true for shortcut elements, such as `<menuitem>` and `<act_window>`.
    These need all of the attributes to be provided and missing any of them will set
    the corresponding field to an empty value. However, you can use `<record>` to
    set a value on a field that was created through a shortcut element.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`<record>`元素时，我们可以选择我们想要写入的字段，但对于快捷元素，如`<menuitem>`和`<act_window>`，则不是这样。这些元素需要提供所有属性，缺少任何一个都会将相应的字段设置为空值。然而，你可以使用`<record>`来设置通过快捷元素创建的字段的值。
- en: Don't forget to add the `library_member/security/library_security.xml` file
    to the `data` key in the manifest file. Having done this and upgraded the module,
    we should see the name change in the user groups.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将`library_member/security/library_security.xml`文件添加到清单文件的`data`键中。完成此操作并升级模块后，我们应该在用户组中看到名称更改。
- en: Extending views allows you to introduce modifications to the backend presentation
    layer. But the same can be done to the frontend web presentation layer. This is
    what we will address in the next section.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展视图允许你在后端表示层引入修改。但同样也可以在前端Web表示层进行。这就是我们将在下一节中讨论的内容。
- en: Extending web pages
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展Web页面
- en: Extensibility is a key design choice for the Odoo framework, and the Odoo web
    components are no exception. So, Odoo web controllers and templates can be also
    extended.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性是Odoo框架的关键设计选择，Odoo Web组件也不例外。因此，Odoo Web控制器和模板也可以扩展。
- en: The Library app that we created in the previous [*Chapter 3*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072),
    *Your First Odoo Application*, provided a book catalog page that now needs to
    be improved.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章[*第3章*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072)，*您的第一个Odoo应用程序*中创建的图书馆应用程序提供了一个需要改进的图书目录页面。
- en: 'We will extend it to leverage the book availability information that was added
    by the Library Members module:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展它以利用图书馆成员模块添加的图书可用性信息：
- en: On the controller side, we will add support to a query string parameter to filter
    only the available books; that is, `/library/books?available=1`.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控制器方面，我们将添加对查询字符串参数的支持，以仅过滤可用的图书；即`/library/books?available=1`。
- en: On the template side, we will specify the books that are not available.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模板方面，我们将指定不可用的图书。
- en: Let's start extending the web controller.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始扩展Web控制器。
- en: Extending the web controllers
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展Web控制器
- en: '**Web controllers** are responsible for handling web requests and rendering
    the page to return as a response. They should focus on presentation logic, not
    deal with business logic, which should be incorporated into model methods instead.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '**Web控制器**负责处理Web请求并将页面渲染为响应。它们应该专注于表示逻辑，而不是处理业务逻辑，这些逻辑应该被整合到模型方法中。'
- en: Supporting additional parameters or even URL routes is web presentation-specific
    and something appropriate for a web controller to deal with.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 支持额外的参数甚至URL路由是Web表示特定的，并且适合Web控制器处理。
- en: The `/library/books` endpoint will be extended here to support a query string
    parameter, `available=1`, which we will use to filter the catalog of books so
    that it only displays the available titles.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这里将扩展`/library/books`端点以支持查询字符串参数`available=1`，我们将使用它来过滤图书目录，以便只显示可用的标题。
- en: To extend an existing controller, we need to import the original object that
    created it, declare a Python class based on it, and then implement the class method
    holding the additional logic.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要扩展现有的控制器，我们需要导入创建它的原始对象，基于它声明一个Python类，然后实现包含额外逻辑的类方法。
- en: 'The code to extend the controller should be added to the `library_member/controllers/main.py`
    file, as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展控制器的代码应该添加到`library_member/controllers/main.py`文件中，如下所示：
- en: '[PRE21]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The steps to add the controller code are as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 添加控制器代码的步骤如下：
- en: Add the `library_member/controllers/main.py` file, ensuring it contains the
    preceding code.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`library_member/controllers/main.py`文件，确保它包含前面的代码。
- en: 'Make this new Python file known to the module by adding the controller''s subdirectory
    to the `library_member/__init__.py` file:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将控制器的子目录添加到`library_member/__init__.py`文件中，使这个新的Python文件为模块所知：
- en: '[PRE22]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the `library_member/controllers/__init__.py` file with the following line
    of code:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`library_member/controllers/__init__.py`文件，并包含以下代码行：
- en: '[PRE23]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: After this, accessing `http://localhost:8069/library/books?available=1` should
    only show us the books with the `Is Available?` field checked.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之后，访问`http://localhost:8069/library/books?available=1`应该只会显示`Is Available?`字段被勾选的书籍。
- en: Now, let's review the controller extension code to understand how it works.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回顾控制器扩展代码，以了解它是如何工作的。
- en: The controller to extend, `Books`, was originally declared by the `library_app`
    module, in the `controllers/main.py` file. So, to get a reference to it, we need
    to import `odoo.addons.library_app.controllers.main`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 要扩展的控制器`Books`最初是由`library_app`模块在`controllers/main.py`文件中声明的。因此，要获取对其的引用，我们需要导入`odoo.addons.library_app.controllers.main`。
- en: This is different from models, where we have a central registry available where
    we can get a reference to any model class, such as `self.env['library.book']`,
    without knowing the particular file that's implementing it. We don't have such
    a registry for controllers, and we need to know the module and file implementing
    the controller to be able to extend it.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这与模型不同，我们有一个中央注册表可用，我们可以从中获取对任何模型类的引用，例如`self.env['library.book']`，而无需知道实现它的特定文件。我们没有为控制器提供这样的注册表，我们需要知道实现控制器的模块和文件才能扩展它。
- en: Then, the `BooksExtended` class is declared based on the original one, `Books`.
    The identifier name that's used for this class is not relevant. It is used as
    a vehicle to reference the original class and extend it.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，基于原始的`Books`类声明了`BooksExtended`类。用于此类的标识符名称并不重要。它被用作引用原始类并扩展它的工具。
- en: Next, we (re)define the controller method to be extended, which is `list()`
    in this case. It needs to be decorated with at least the simple `@http.route()`
    for its route to be kept active. If it's used like this, with no arguments, it
    will preserve the routes that are defined by the parent class. But we could also
    add parameters to this `@http.route()` decorator to replace and redefine the class
    routes.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们（重新）定义要扩展的控制器方法，在本例中是`list()`方法。它至少需要用简单的`@http.route()`进行装饰，以保持其路由活跃。如果这样使用，没有参数，它将保留父类定义的路由。但我们也可以向这个`@http.route()`装饰器添加参数，以替换和重新定义类的路由。
- en: The `list()` method has a `**kwargs` argument, which captures all the parameters
    in the `kwargs` dictionary. These are the parameters that are given in the URL,
    such as `?available=1`.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`list()`方法有一个`**kwargs`参数，它捕获`kwargs`字典中的所有参数。这些是在URL中给出的参数，例如`?available=1`。'
- en: Tip
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Using a `**kwargs` argument that sweeps all the given arguments is not required,
    but it makes our URL tolerant to unexpected URL arguments. If we choose to specify
    particular arguments, if different ones are set, the page will fail immediately
    and return an **internal error** when trying to call the corresponding controller.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个`**kwargs`参数来遍历所有给定的参数不是必需的，但它使我们的URL对意外的URL参数具有容错性。如果我们选择指定特定的参数，如果设置了不同的参数，当尝试调用相应的控制器时，页面将立即失败并返回一个**内部错误**。
- en: The code for the `list()` method starts by calling the corresponding parent
    class method using `super()`. This returns the `Response` object that was computed
    by the parent method, including the attributes and the template to render, `template`,
    and the context to use when rendering, `qcontext`. But the HTML is yet to be generated.
    This will only happen when the controller finishes running. So, it is possible
    to change the `Response` attributes before the final rendering is done.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`list()`方法的代码首先使用`super()`调用相应的父类方法。这返回由父方法计算出的`Response`对象，包括属性和要渲染的模板`template`以及渲染时使用的上下文`qcontext`。但HTML尚未生成。这只有在控制器运行完成后才会发生。因此，在最终渲染之前，可以更改`Response`的属性。'
- en: The method checks `kwargs` for a non-empty value in the `available` key. If
    it is found, the non-available books are filtered out, and `qcontext` is updated
    with this recordset. So, when the controller's processing completes, the HTML
    will be rendered using the updated book's recordset, which will only include available
    books.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法检查 `kwargs` 中 `available` 键的非空值。如果找到，则过滤掉不可用的书籍，并使用此记录集更新 `qcontext`。因此，当控制器处理完成后，将使用更新后的书籍记录集渲染
    HTML，这将仅包括可用的书籍。
- en: Extending QWeb templates
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展 QWeb 模板
- en: Web page templates are XML documents, just like the other Odoo view types, and
    selector expressions can be used, as we do for other view types, such as forms.
    QWeb templates are usually more complex since they include more HTML elements,
    so most of the time, the more versatile `XPath` expressions are needed.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 网页模板是 XML 文档，就像其他 Odoo 视图类型一样，可以使用选择器表达式，就像我们对其他视图类型（如表单）所做的那样。QWeb 模板通常更复杂，因为它们包含更多的
    HTML 元素，所以大多数时候需要更通用的 `XPath` 表达式。
- en: To modify the actual presentation of the web page, we should extend the QWeb
    template being used. As an example of this, we will extend `library_app.book_list_template`
    to add visual information about the books that are not available.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改网页的实际呈现方式，我们应该扩展正在使用的 QWeb 模板。作为一个例子，我们将扩展 `library_app.book_list_template`
    以添加关于不可用书籍的视觉信息。
- en: A QWeb extension is a `<template>` element that uses the additional `inherit_id`
    attribute to identify the QWeb template to extend. It is `library_app.book_list_template`
    in this case.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: QWeb 扩展是一个使用额外的 `inherit_id` 属性来标识要扩展的 QWeb 模板的 `<template>` 元素。在这种情况下是 `library_app.book_list_template`。
- en: 'Follow these steps:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'Add the `library_member/views/book_list_template.xml` file, along with the
    following code:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `library_member/views/book_list_template.xml` 文件以及以下代码添加进去：
- en: '[PRE24]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Declare this additional data file in the add-on manifest; that is, `library_member/__manifest__.py`:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件清单中声明此额外数据文件；即 `library_member/__manifest__.py`：
- en: '[PRE25]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'After this, accessing `http://localhost:8069/library/books` should show the
    additional (not available) visual information on the books that are not available.
    Here is what the web page will look like:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，访问 `http://localhost:8069/library/books` 应该会显示不可用书籍的额外（不可用）视觉信息。以下是网页将呈现的样子：
- en: '![Figure 4.4 – Books list web page with availability information'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.4 – 带有可用性信息的书籍列表网页'
- en: '](img/Figure_4.4_B16119.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.4_B16119.jpg)'
- en: Figure 4.4 – Books list web page with availability information
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 带有可用性信息的书籍列表网页
- en: This completes our review of how to extend each type of Odoo component, from
    the data model to the user interface elements.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们对如何扩展每种 Odoo 组件的审查，从数据模型到用户界面元素。
- en: Summary
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Extensibility is a key feature of the Odoo framework. We can build add-on modules
    that change or add features to other existing add-ons at the several layers needed
    to implement features in Odoo. With this, our projects will be able to reuse and
    extend third-party add-on modules in a clean and modular way.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性是 Odoo 框架的关键特性。我们可以在 Odoo 中构建插件模块，这些模块可以在多个层上更改或添加功能，以实现 Odoo 中的功能。这样，我们的项目将能够以干净和模块化的方式重用和扩展第三方插件模块。
- en: At the model layer, we use the `_inherit` model attribute to get a reference
    to an existing model and then make in-place modifications to it. The field objects
    inside the model also support incremental definitions so that we can *redeclare*
    an existing field, providing only the attributes to change.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型层，我们使用 `_inherit` 模型属性来获取对现有模型的引用，然后对其进行原地修改。模型内的字段对象也支持增量定义，这样我们就可以*重新声明*一个现有字段，只需提供要更改的属性。
- en: Additional model inheritance mechanisms allow you to reuse data structures and
    business logic. Delegation inheritance, which is activated with the `delegate=True`
    attribute on a many-to-one relationship field (or the old-style `inherits` model
    attribute), makes all the fields from the related model available and reuses its
    data structure. Prototype inheritance, which uses `_inherit` with additional models,
    allows you to copy features (data structure definitions and methods) from other
    models and enables the use of abstract mixin classes, providing a set of reusable
    features, such as document discussion messages and followers.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 附加的模型继承机制允许您重用数据结构和业务逻辑。通过在多对一关系字段上的`delegate=True`属性（或旧式的`inherits`模型属性）激活的委托继承，使得相关模型的所有字段都可用，并重用其数据结构。原型继承，通过使用`_inherit`与附加模型，允许您从其他模型复制功能（数据结构定义和方法），并启用抽象混入类的使用，提供一系列可重用功能，例如文档讨论消息和关注者。
- en: At the view layer, the view structures are defined using XML, and extensions
    can be made by locating an XML element (using XPath or the Odoo simplified syntax)
    and providing the XML fragment to add. Other data records that are created by
    a module can also be modified by extension modules by simply referencing the corresponding
    complete XML ID and performing a write operation on the intended fields.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图层，视图结构使用XML定义，可以通过定位XML元素（使用XPath或Odoo简化的语法）并提供要添加的XML片段来进行扩展。由模块创建的其他数据记录也可以通过扩展模块通过简单地引用相应的完整XML
    ID并在目标字段上执行写操作来修改。
- en: At the business logic layer, extensions can be made with the same mechanism
    that's used for model extension and redeclaring the methods to extend. Inside
    them, the `super()` Python function is used to call the code of the inherited
    method, and our additional code can run before or after that.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在业务逻辑层，可以通过与模型扩展和重新声明方法以扩展相同的方式添加扩展。在这些扩展中，使用`super()` Python函数来调用继承方法的代码，并且我们的附加代码可以在那之前或之后运行。
- en: For the frontend web pages, the presentation logic in controllers can be extended
    in a similar way to model methods, and the web templates are also views with XML
    structures, so these can be extended in the same way as the other view types.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前端网页，控制器中的表示逻辑可以以类似于模型方法的方式扩展，并且Web模板也是具有XML结构的视图，因此它们可以以与其他视图类型相同的方式进行扩展。
- en: In the next chapter, we will dive deeper into models and explore everything
    they can offer us.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地探讨模型，并探索它们能为我们提供的一切。
- en: Further reading
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following are some additional references to the official documentation,
    which can provide useful information regarding module extensions and inheritance
    mechanisms:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些指向官方文档的附加参考，这些文档可以提供有关模块扩展和继承机制的有用信息：
- en: 'Model inheritance: [https://www.odoo.com/documentation/15.0/developer/reference/backend/orm.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/orm.html)'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型继承：[https://www.odoo.com/documentation/15.0/developer/reference/backend/orm.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/orm.html)
- en: 'View inheritance: [https://www.odoo.com/documentation/15.0/developer/reference/backend/views.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/views.html)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图继承：[https://www.odoo.com/documentation/15.0/developer/reference/backend/views.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/views.html)
- en: 'Web controllers: [https://www.odoo.com/documentation/15.0/developer/reference/backend/http.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/http.html)'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web控制器：[https://www.odoo.com/documentation/15.0/developer/reference/backend/http.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/http.html)
