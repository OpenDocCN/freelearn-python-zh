- en: 'Chapter 4: Working with the Database'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：与数据库一起工作
- en: This chapter does not aim to teach you how to interact with a database using
    Django or to create migrations—I assume you already have those minimal skills.
    This chapter instead will show you how to work with real situations where a Channels
    instance interacts recurrently with models.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是不教你如何使用Django与数据库交互或创建迁移——我假设你已经具备这些基本技能。本章将展示如何在现实场景中与Channels实例反复交互的模型进行工作。
- en: Unless the application is only powered by external APIs, having a database is
    an elementary requirement in any modern web development. The needs can range from
    functionality as simple as storing plain text in an orderly fashion, to an authentication
    system, to managing a complex structure of connections between users. In other
    words, you must connect to a database if you want to build a practical project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除非应用程序仅由外部API供电，否则在任何现代Web开发中，拥有数据库是一个基本要求。需求范围可以从简单地以有序方式存储纯文本，到认证系统，再到管理用户之间复杂连接结构。换句话说，如果你想构建一个实用的项目，你必须连接到数据库。
- en: 'Fortunately, Django is compatible with the most popular relational databases:
    PostgreSQL, MariaDB, MySQL, Oracle, and SQLite. And if that’s not enough, we can
    also connect to other possibilities thanks to extensions created by the community:
    **CockroachDB**, **Firebird**, **Google Cloud Spanner**, and **Microsoft SQL Server**.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Django与最流行的关系型数据库兼容：PostgreSQL、MariaDB、MySQL、Oracle和SQLite。而且如果还不够，我们还可以通过社区创建的扩展连接到其他可能性：**CockroachDB**、**Firebird**、**Google
    Cloud Spanner**和**Microsoft SQL Server**。
- en: 'We are going to focus on creating a real-time app that manages a database.
    We will learn how to perform the minimum functionalities of **BREAD**: **Browse-Read-Edit-Add-Delete**,
    including simple pagination. And what better example than to create a social network?
    The information should be saved, sorted, and displayed to all users with as little
    delay as possible. If there is a very slow response, then we have failed to offer
    a real-time system and have achieved a boring email system.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于创建一个实时应用程序来管理数据库。我们将学习如何执行**BREAD**的最小功能：**浏览-读取-编辑-添加-删除**，包括简单的分页。还有什么比创建一个社交网络更好的例子吗？信息应该尽可能少地延迟保存、排序和显示给所有用户。如果响应非常慢，那么我们就未能提供一个实时系统，而是一个无聊的电子邮件系统。
- en: For didactic reasons, we will create an anarchist social network. Any visitor,
    without prior registration, will be able to manipulate the data of any user. If
    you find it unsafe, you can create a disclaimer page invoking human kindness and
    suggest not to change other people’s content or wait for the next chapters where
    we will incorporate a complete registration and identification system.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了教学目的，我们将创建一个无政府主义社交网络。任何访客，无需预先注册，都将能够操纵任何用户的数据。如果你觉得不安全，可以创建一个免责声明页面，呼吁人性，并建议不要更改他人的内容或等待下一章，我们将加入一个完整的注册和身份验证系统。
- en: 'We’ll cover the following topics in the chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Inserting information into the database
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将信息插入数据库
- en: Rendering database information
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染数据库信息
- en: Limiting queries with a pager
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用分页器限制查询
- en: Deleting rows from a database
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中删除行
- en: Updating rows in a database
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新数据库中的行
- en: In addition, we will incorporate some CSS lines to enhance the visual impact,
    and we will take all the logic to the backend, leaving only the responsibility
    of managing events on the client side.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将加入一些CSS代码以增强视觉效果，并将所有逻辑移至后端，只留下客户端管理事件的责任。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'We will build on all the accumulated knowledge from the previous chapters.
    If you want to start with a template, you can use the following structure, which
    I will use for future projects:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将基于前几章积累的所有知识。如果你想从一个模板开始，可以使用以下结构，我将在未来的项目中使用：
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template)'
- en: 'Inside you will find a sample project that is already prepared with different
    points that we have touched upon in the previous chapters:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你将找到一个样本项目，该项目已经准备好包含我们在前几章中提到的不同点：
- en: Integration with Docker
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Docker集成
- en: Minimum structure for working with Channels
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与通道一起工作的最小结构
- en: Connection to the database with PostgreSQL
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PostgreSQL连接到数据库
- en: An HTML home page
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个HTML主页
- en: A minimal JavaScript file that connects to Channels
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个连接到Channels的最小JavaScript文件
- en: 'For this project, I created a fork of the template and made some minor changes.
    You can use either of the two templates, although I recommend the fork for simple
    aesthetics. You can download it from here: [https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_1](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_1).
    I have changed the project name to `social_network` and the app to `website`.
    I have also renamed the consumer to `SocialNetworkConsumer`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我创建了一个模板的分支并做了一些小的修改。您可以使用这两个模板中的任何一个，尽管我推荐使用分支以获得简单的美学。您可以从这里下载它：[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_1](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_1)。我已经将项目名称改为
    `social_network`，应用改为 `website`。我还将消费者重命名为 `SocialNetworkConsumer`。
- en: 'Finally, a schema has been added to the database, or model, called `Message`
    in `app/website/models.py`, which we will use to manage all the messages created
    by users:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，数据库或模型中已添加了一个名为 `Message` 的模式，位于 `app/website/models.py`，我们将使用它来管理用户创建的所有消息：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The fields included are minimal: `author` to store the author’s name, `text`
    for the text of the message, and `created_at` to have the creation date for later
    sorting.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的字段是最少的：`author` 用于存储作者姓名，`text` 用于消息文本，`created_at` 用于记录创建日期，以便稍后排序。
- en: 'To set up the project, you must use Docker:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置项目，您必须使用Docker：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Open your favorite browser to enter `http://social-network.localhost`. You should
    find the following result.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您喜欢的浏览器，输入 `http://social-network.localhost`。您应该找到以下结果。
- en: '![Figure 4.1 – Displaying a static HTML page on the domain http://social-network.localhost'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.1 – 在域名 http://social-network.localhost 上显示静态HTML页面'
- en: '](img/Figure_4.01_B18321.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.1 – 在域名 http://social-network.localhost 上显示静态HTML页面](img/Figure_4.01_B18321.jpg)'
- en: Figure 4.1 – Displaying a static HTML page on the domain http://social-network.localhost
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – 在域名 http://social-network.localhost 上显示静态HTML页面
- en: Visually it is too... minimalistic. But it contains all the elementary pieces
    to work with.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从视觉上看，它过于...简约。但它包含了所有与工作相关的基本元素。
- en: Next, we will start building the application step by step, touching on the whole
    flow of editing the `Message` table or querying it afterward.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将逐步构建应用程序，涉及编辑 `Message` 表或之后查询整个流程。
- en: Inserting information into the database
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将信息插入数据库
- en: 'We are now ready with an almost empty project but perfectly configured with
    Channels, rendering a simple static HTML. The first step is to `INSERT` or save
    new information in the database. For this, we need a minimum of HTML. We are going
    to include a form with two fields: `name` and `message`. We will also leave a
    space to show the future messages that we list.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了一个几乎空的项目，但配置了Channels，渲染了一个简单的静态HTML。第一步是在数据库中 `INSERT` 或保存新信息。为此，我们需要最少的HTML。我们将包括一个包含两个字段的表单：`name`
    和 `message`。我们还将留出一个空间来显示我们列出的未来消息。
- en: Create an HTML file in `app/website/templates/index.html` with the following
    content.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app/website/templates/index.html` 中创建一个HTML文件，内容如下。
- en: 'First, we will incorporate a CSS file and a JavaScript file. For the moment,
    we incorporate the files in the headers:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将引入一个CSS文件和一个JavaScript文件。目前，我们将文件包含在标题中：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, in order to have the host and the scheme (HTTP or HTTPS), we must incorporate
    it as a dataset that we will later collect in the JavaScript. We have added a
    form box and another one to list messages, which we will not use for the time
    being:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了拥有主机和方案（HTTP或HTTPS），我们必须将其作为一个数据集包含在内，我们将在JavaScript中稍后收集它。我们已添加一个表单框和另一个用于列出消息的表单，目前我们不会使用它：
- en: '[PRE25]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following will be the HTML form we will use to capture and save the new
    messages. JavaScript will be in charge, in the future, of retrieving all the information:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将使用的HTML表单来捕获和保存新消息。在未来，JavaScript将负责检索所有信息：
- en: '[PRE29]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We’ll then define a place to list all messages received from the database.
    We will also include buttons to paginate the results in blocks of five elements:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将定义一个地方来列出从数据库接收到的所有消息。我们还将包括按钮，以五元素为一组分页显示结果：
- en: '[PRE62]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Inside `/static/css/main.css`, we will add some minimal styles to feel like
    we are in the 21st century:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/static/css/main.css` 文件中，我们将添加一些最小化样式，以便感觉我们身处21世纪：
- en: '[PRE75]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'We add typography that brightens things up for the eye a bit. Helvetica goes
    well with everything, but you are free to use whatever you like. You won’t hurt
    Django’s feelings:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一些字体，使视觉效果更加明亮。Helvetica与所有东西都很搭配，但您可以使用您喜欢的任何字体。您不会伤害Django的感情：
- en: '[PRE79]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Some of the improvements we added are to correct the margin of the body and
    to center the content with `container`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加的一些改进包括纠正正文边距和将内容居中于`container`：
- en: '[PRE83]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'We’ll also style the buttons so they don’t look like they’re from the 90s:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将对按钮进行样式设计，使其看起来不像90年代的产品：
- en: '[PRE92]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'And we use a less retro look for forms or elements. Design should not be in
    conflict with backend work:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了一种不那么复古的外观来设计表单或元素。设计不应与后端工作冲突：
- en: '[PRE103]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'If you pull up Docker, and you enter `http://social-network.localhost`, you
    will find the following page:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您启动Docker，并输入`http://social-network.localhost`，您将找到以下页面：
- en: '![Figure 4.2 – The form for entering a new message with CSS styles'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.2 – 带有CSS样式的输入新消息的表单'
- en: '](img/Figure_4.02_B18321.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.02_B18321.jpg](img/Figure_4.02_B18321.jpg)'
- en: Figure 4.2 – The form for entering a new message with CSS styles
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.2 – 带有CSS样式的输入新消息的表单
- en: Feel free to add whatever you need, and even a CSS framework.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 随意添加您需要的任何内容，甚至是一个CSS框架。
- en: 'Now we are going to include the JavaScript events to send the form data to
    the consumer. We will create a new file in `/static/js/index.js` with the following
    content:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将包括JavaScript事件，将表单数据发送到消费者。我们将在`/static/js/index.js`中创建一个新文件，内容如下：
- en: '[PRE142]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'In the variable section, we capture all the HTML elements that we need to capture
    all events and create a `WebSockets` connection. The `sendData` function is used
    to send messages to the backend, and `sendNewMessage` is executed when we click
    on the **Submit** button. The JSON will always be sent with the following structure:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在变量部分，我们捕获所有需要捕获所有事件的HTML元素，并创建一个`WebSockets`连接。`sendData`函数用于向后端发送消息，而`sendNewMessage`在点击**提交**按钮时执行。JSON将始终以以下结构发送：
- en: '[PRE200]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: 'We modify the consumer to receive the information and save it. Edit `app/website/consumers.py`
    with the following content:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们修改消费者以接收信息并保存它。使用以下内容编辑`app/website/consumers.py`：
- en: '[PRE204]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: You can see that the client is added to a room when connecting and removed when
    disconnecting. In [*Chapter 5*](B18321_05_ePub.xhtml#_idTextAnchor106), *Separating
    Communication in Rooms*, we will talk in depth about the possibilities of rooms,
    but for now, we will group all users in a single room with the name *broadcast*.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，当连接时，客户端被添加到房间中，当断开连接时被移除。在[*第5章*](B18321_05_ePub.xhtml#_idTextAnchor106)
    *分离房间中的通信*中，我们将深入讨论房间的可能性，但现在，我们将所有用户分组到一个名为*broadcast*的单个房间中。
- en: When an action with the text `'add message'` is received, we directly create
    a new message with the information we are sending from the frontend.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 当接收到文本为`'add message'`的操作时，我们直接使用从前端发送的信息创建一个新的消息。
- en: We already stored information! Although we can’t see it or sort it at the moment.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经存储了信息！尽管我们目前无法看到或排序它。
- en: 'All the code up to this point can be found in the following repository, which
    is the first part of the activity:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止的所有代码都可以在以下存储库中找到，这是活动的第一部分：
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_2](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_2)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_2](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_2)'
- en: In the next section, we will print all the messages we have saved directly in
    HTML via WebSockets.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过WebSockets直接以HTML格式打印我们保存的所有消息。
- en: Rendering database information
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染数据库信息
- en: We have already built a form that sends a new message to the backend via a WebSockets
    connection, which we capture in the consumer and then store in the database.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经构建了一个表单，通过WebSockets连接将新消息发送到后端，我们在消费者中捕获它，然后将其存储在数据库中。
- en: Now we’re going to get all the messages from the database, render them with
    Django’s template engine, send the HTML to the client over the connection we kept,
    and inject the content into the appropriate frontend element.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将获取数据库中的所有消息，使用Django的模板引擎渲染它们，通过我们保持的连接将HTML发送到客户端，并将内容注入到适当的前端元素中。
- en: 'Create the HTML template that will generate all the message blocks in the path
    `/app/website/templates/components/_list-messages.html` with the content:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/app/website/templates/components/_list-messages.html` 路径下创建一个 HTML 模板，该模板将生成所有消息块，其内容如下：
- en: '[PRE241]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: At the moment, the **Edit** and **Delete** buttons are for decoration. Later,
    we will give them their functionality.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，**编辑**和**删除**按钮仅用于装饰。稍后，我们将赋予它们功能。
- en: 'Edit the consumer, which is in `app/website/consumers.py`, to include an action
    that returns messages:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `app/website/consumers.py` 中的消费者，以包括一个返回消息的操作：
- en: '[PRE260]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: 'When the frontend sends us the `''list messages''` action or creates a WebSockets
    connection, we will execute the `send_list_messages()` function. The backend will
    get all the messages, render the HTML, and send the messages to the frontend.
    Inside the function, we are performing a query to get all the messages in descending
    order, an elementary action if you have worked with models before. The important
    thing happens in the next snippet:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 当前端发送 `'list messages'` 动作或创建 WebSockets 连接时，我们将执行 `send_list_messages()` 函数。后端将获取所有消息，渲染
    HTML，并将消息发送到前端。在函数内部，我们执行一个查询以按降序获取所有消息，如果你之前已经与模型工作过，这是一个基本操作。重要的是下一部分的内容：
- en: '[PRE325]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: When sending information to a group, it will always be done asynchronously so
    as not to block the main thread, but when communicating with the database, it
    must be synchronous. How can both types of logic coexist? By turning `self.channel_layer.group_send()`
    into a synchronous function thanks to `async_to_sync()`.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 当向一个组发送信息时，它将始终异步执行，以避免阻塞主线程，但与数据库通信时必须同步。这两种类型的逻辑如何共存？通过将 `self.channel_layer.group_send()`
    转换为同步函数，这得益于 `async_to_sync()`。
- en: '`self.channel_layer.group_send()` is an unusual function. Its first argument
    must be the name of the room where you want to send the information, which in
    our case will be `self.room_name`, which is declared at the beginning of the consumer.
    And the second argument must have a dictionary where `type` is the name of the
    function to execute (if you have `_`, it must be replaced with a dot), and the
    rest of the keys are the information that we want to pass to the function. Inside
    `send_html`, we capture the previous information with `event[]`. And finally,
    we send the data to the client in the same way as in [*Chapter 3*](B18321_03_ePub.xhtml#_idTextAnchor055),
    *Adding WebSockets to Django*, with `send_json()`.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`self.channel_layer.group_send()` 是一个不寻常的函数。它的第一个参数必须是您想要发送信息到的房间名称，在我们的例子中将是
    `self.room_name`，它在消费者开始时声明。第二个参数必须有一个字典，其中 `type` 是要执行函数的名称（如果有 `_`，则必须替换为点），其余的键是我们想要传递给函数的信息。在
    `send_html` 函数内部，我们使用 `event[]` 捕获先前信息。最后，我们以与 [*第3章*](B18321_03_ePub.xhtml#_idTextAnchor055)
    中相同的方式，即通过 `send_json()`，将数据发送到客户端，该章节是 *将 WebSockets 添加到 Django*。'
- en: When we want to inject HTML, we will send the `html` key with the rendered HTML
    and `selector` to tell JavaScript where to inject it. The backend will decide
    what and where each element should go.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要注入 HTML 时，我们将发送 `html` 键和渲染的 HTML，以及 `selector` 来告诉 JavaScript 将其注入的位置。后端将决定每个元素应该放在哪里。
- en: 'When viewing the browser, we will find the messages that we have been adding,
    as shown in *Figure 4.3* :'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 当在浏览器中查看时，我们将找到我们添加的消息，如图 *图4.3* 所示：
- en: '![Figure 4.3 – All messages we have saved in the database are displayed'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.3 – 我们在数据库中保存的所有消息都显示出来]'
- en: '](img/Figure_4.03_B18321.jpg)'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.03_B18321.jpg](img/Figure_4.03_B18321.jpg)'
- en: Figure 4.3 – All messages we have saved in the database are displayed
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.3 – 我们在数据库中保存的所有消息都显示出来
- en: 'All the code up to this point can be found at the following link:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止的所有代码都可以在以下链接中找到：
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_3](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_3)'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_3](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_3)'
- en: What would happen if we were to display hundreds or thousands of messages per
    user? The performance and memory consequences would be catastrophic. We must avoid
    fireworks by limiting the number of messages that can be displayed. Therefore,
    we will limit it to five messages per page and add some buttons to navigate between
    each slice. Let’s see that in the next section.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们为每个用户显示数百或数千条消息会发生什么？性能和内存后果将是灾难性的。我们必须通过限制可以显示的消息数量来避免烟花。因此，我们将将其限制为每页五条消息，并添加一些按钮来在各个切片之间导航。让我们在下一节中看看这个。
- en: Limiting queries with a pager
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用分页器限制查询
- en: We can add and list messages from the database. But we must limit the amount
    of information a user can see. A good practice is to provide the user with a pager
    to move through all the data.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从数据库中添加和列出消息。但我们必须限制用户可以看到的信息量。一个好的做法是提供一个分页器，以便用户可以浏览所有数据。
- en: 'Follow the given steps to add a simple pager:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加简单的分页器：
- en: 'Modify the template `/app/website/templates/components/_list-messages.html`
    to add a simple pager divided into two buttons (forward and back):'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改模板 `/app/website/templates/components/_list-messages.html`，添加一个简单的分页器，分为两个按钮（前进和后退）：
- en: '[PRE334]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: With `data-page="{{ page }}"`, we are giving JavaScript a counter with the page
    we are on. We will use this data to create a new event that will trigger an action
    indicating whether we want to go to the next page or back.
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `data-page="{{ page }}"`，我们向 JavaScript 提供了一个计数器，表示我们所在的页面。我们将使用这个数据来创建一个新事件，该事件将触发一个动作，指示我们是否想要转到下一页或返回。
- en: The conditional `{% if page ! = 1 %}` is used to avoid showing the back button
    if we are on the first page.
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件 `{% if page ! = 1 %}` 用于避免在第一页时显示后退按钮。
- en: The conditional `{% if page ! = total_pages %}` ignores the rendering of the
    forward button if we are on the last page.
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件 `{% if page ! = total_pages %}` 忽略了在最后一页时渲染前进按钮。
- en: 'We add to the consumer (`/app/website/consumers.py`) a slice system for `send_list_messages()`:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们向消费者（`/app/website/consumers.py`）添加了 `send_list_messages()` 的切片系统：
- en: '[PRE335]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: The variable `max_messages_per_page = 5` has been added to indicate the number
    of items per page.
  id: totrans-419
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量 `max_messages_per_page = 5` 已被添加，用于表示每页的项目数量。
- en: The `'list messages'` action now collects and passes to the `send_list_messages`
    function the page to be displayed.
  id: totrans-420
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''list messages''` 动作现在收集并将要显示的页面传递给 `send_list_messages` 函数。'
- en: We have updated `send_list_messages`. We allow you to indicate the page to be
    displayed, we calculate the query slices, and we give `render_to_string` the `messages`
    with the slice, `page`, and `total_pages` variables, which we use to know if we
    are on the last page.
  id: totrans-421
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已更新 `send_list_messages`。我们允许你指定要显示的页面，我们计算查询切片，并将带有切片、`page` 和 `total_pages`
    变量的 `messages` 传递给 `render_to_string`，这样我们就可以知道我们是否在最后一页。
- en: 'In `/static/js/index.js`, add the two JavaScript functions (`goToNextPage`
    and `goToPreviousPage`) that will take care of the page-turning. Actually, they
    just use an action with the request to list the messages but in another slice:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/static/js/index.js` 中，添加两个 JavaScript 函数（`goToNextPage` 和 `goToPreviousPage`），它们将负责翻页。实际上，它们只是使用带有请求列表消息的操作，但在另一个切片中：
- en: '[PRE336]'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: 'And where do we add the listeners for the buttons to execute the functions?
    Inside the `"message"` event of `WebSockets`. Why? Every time the message section
    is updated, all the HTML is deleted and recreated with what is received from the
    backend. The events disappear with every update. We have to reassign them. After
    redrawing the messages, we will assign the listeners:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们在哪里添加按钮的监听器以执行函数？在 `WebSockets` 的 `"message"` 事件中。为什么？每次消息部分更新时，所有的 HTML
    都会被删除并重新创建，从后端接收的内容。事件会随着每次更新而消失。我们必须重新分配它们。在重新绘制消息后，我们将分配监听器：
- en: '[PRE337]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: Go ahead, create as many messages as you want – at least six – to check how
    the pager does its job properly.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试创建尽可能多的消息（至少六条）以检查分页器是否正常工作。
- en: '![Figure 4.4 – We display the first page of messages'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.4 – 我们显示消息的第一页'
- en: '](img/Figure_4.04_B18321.jpg)'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.04_B18321.jpg)'
- en: Figure 4.4 – We display the first page of messages
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 我们显示消息的第一页
- en: If we turn the page by clicking on the **Next** button, the next block of messages
    will be rendered.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们通过点击**下一页**按钮翻页，将渲染下一块消息。
- en: '![Figure 4.5 – We display the last page of messages'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.5 – 我们显示消息的最后一页'
- en: '](img/Figure_4.05_B18321.jpg)'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.05_B18321.jpg)'
- en: Figure 4.5 – We display the last page of messages
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 我们显示消息的最后一页
- en: 'All the code up to this point can be found at the following link:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止的所有代码都可以在以下链接中找到：
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_4](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_4)'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '[Building SPAs with Django and HTML Over-the-Wire 社交网络步骤 4](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_4)'
- en: The next target will be to delete messages with the `WebSockets` an action with
    the instruction to delete messages with the concrete `id` of a message—we will
    be as precise as a sniper.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个目标是使用 `WebSockets` 删除消息，这是一个带有删除具有具体消息 `id` 的消息的指令的动作——我们将像狙击手一样精确。
- en: Deleting rows from a database
  id: totrans-437
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库中删除行
- en: In the previous sections, we managed to build a system where we could add new
    messages, list them, and paginate them. But so far, we are unable to delete anything.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们成功构建了一个系统，可以添加新消息、列出它们并进行分页。但到目前为止，我们无法删除任何内容。
- en: 'The way the project is structured, it is really quick to implement:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的结构使得实现起来非常快：
- en: 'We check in `/app/website/templates/components/_list-messages.html` that we
    are adding to each button a dataset with the `id`. We do this task when we list
    the messages; we must be aware of the source where the `id` that we will use comes
    from to know which message we must delete:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/app/website/templates/components/_list-messages.html` 中，我们检查是否为每个按钮添加了一个带有
    `id` 的数据集。我们在列出消息时执行此任务；我们必须知道我们将使用的 `id` 的来源，以便知道要删除哪个消息：
- en: '[PRE338]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: 'In `/static/js/index.js`, add the `deleteMessage` function. We will capture
    the dataset with the id and send it to the consumer with the action `"delete message"`.
    In addition, we will add each listener after the listener of the pager. Let’s
    not forget the reason for this positioning: all events must be reassigned after
    every change or new backend message with HTML that we inject:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/static/js/index.js` 文件中，添加 `deleteMessage` 函数。我们将使用 ID 捕获数据集，并通过动作 `"delete
    message"` 发送到消费者。此外，我们将在分页器的监听器之后添加每个监听器。让我们不要忘记这个位置的原因：每次更改或注入 HTML 的新后端消息后，所有事件都必须重新分配：
- en: '[PRE339]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: 'Now, edit `/app/website/consumers.py` with the action `''delete message''`:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用动作 `'delete message'` 编辑 `/app/website/consumers.py`：
- en: '[PRE340]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: With `Message.objects.get(id=data['id']).delete()`, we delete the message directly
    from the `id` sent to us by the frontend. Finally, we update the list of messages
    from all clients with `self.send_list_messages()`.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Message.objects.get(id=data['id']).delete()`，我们直接从前端发送给我们的 `id` 删除消息。最后，我们使用
    `self.send_list_messages()` 更新所有客户端的消息列表。
- en: 'All the code up to this point can be found at the following link:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止的所有代码都可以在以下链接中找到：
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_5](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_5)'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '[Building SPAs with Django and HTML Over-the-Wire 社交网络步骤 5](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_5)'
- en: We have finished creating the functionality to delete rows in the database.
    We are now able to selectively delete messages. In the next part of the exercise,
    we will finish building the social network by adding the ability to modify an
    existing message. And with this new feature, we will have all the letters of BREAD.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了创建数据库中删除行的功能。现在，我们可以选择性地删除消息。在练习的下一部分，我们将通过添加修改现有消息的能力来完成构建社交网络。有了这个新功能，我们将拥有所有
    BREAD 的字母。
- en: Updating rows in a database
  id: totrans-450
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新数据库中的行
- en: In this last part of the exercise, we will finish building the social network
    by adding a form to modify the information.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习的最后部分，我们将通过添加一个表单来修改信息来完成构建社交网络。
- en: 'All the finished code can be found at the following link:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 所有完成的代码都可以在以下链接中找到：
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_6](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_6)'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '[Building SPAs with Django and HTML Over-the-Wire 社交网络步骤 6](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_6)'
- en: 'Let’s start:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始：
- en: 'Create a new HTML component, in `/app/website/templates/components/_edit-message.html`,
    with the following content:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/app/website/templates/components/_edit-message.html` 中创建一个新的 HTML 组件，内容如下：
- en: '[PRE341]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: The HTML component is practically the same as when we create a message, except
    for the detail that we store the `id` of the message to be modified in a dataset
    that we host in the `<form>` tag with `data-id="{{ message.id }}"` and that we
    fill in all the fields.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: HTML组件在创建消息时几乎相同，只是细节上有所不同，我们将要修改的消息的`id`存储在一个我们托管在`<form>`标签中的数据集中，使用`data-id="{{
    message.id }}"`进行填充，并填写所有字段。
- en: 'Create an action requesting the edit form in the consumer:'
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在消费者中创建一个请求编辑表单的操作：
- en: '[PRE342]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: 'This action will only render and send the previous component so that the user
    can edit the following information:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作仅渲染并发送前一个组件，以便用户可以编辑以下信息：
- en: '[PRE343]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: 'Now, in the consumer, add the action to collect the information from the form,
    update the database, and render the list of messages:'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在消费者中添加操作以从表单收集信息、更新数据库并渲染消息列表：
- en: '[PRE344]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: 'The entire integrated consumer, including the update action, will look like
    this:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 整个集成消费者，包括更新操作，将看起来像这样：
- en: '[PRE345]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: We create the necessary events in the frontend to request the form, collect
    the information, and send it.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在前端创建了必要的事件，以请求表单、收集信息并发送它。
- en: 'We connect to the channel and collect the form fields where users can write
    new messages:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 我们连接到频道并收集用户可以写入新消息的表单字段：
- en: '[PRE346]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: 'We use minimal and essential functions such as sending new information, showing
    the form to update, sending information to update, deleting a specific element,
    and pagination management:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用最小化和基本的功能，如发送新信息、显示更新表单、发送更新信息、删除特定元素和分页管理：
- en: '[PRE347]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: 'The most important event that receives information from the backend is "`message`".
    Every time we receive new data, we print it and recapture all events. Without
    this constant re-assignment, we would lose all events on every new rendering or
    redrawing of HTML:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 接收来自后端信息的最重要的事件是"`message`"。每次我们收到新数据时，我们都会打印它并重新捕获所有事件。如果没有这个持续的重新分配，我们将在每次新的渲染或HTML重绘中丢失所有事件：
- en: '[PRE348]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: 'All of the preceding code is the final version of JavaScript:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 所有前面的代码都是JavaScript的最终版本：
- en: The function `displayUpdateForm` has been added to ask the consumer to draw
    the edit form in the same place where the message is located.
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已添加`displayUpdateForm`函数，用于要求消费者在消息所在的位置绘制编辑表单。
- en: The `updateMessage` function has been created to send new information to the
    consumer in order to update the message.
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已创建`updateMessage`函数，用于将新信息发送到消费者以更新消息。
- en: Button listeners are included for updating right after the paging and deleting
    events.
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含了按钮监听器，以便在分页和删除事件后立即更新。
- en: '![Figure 4.6 – The edit form is displayed when you click on edit'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.6 – 点击编辑时显示编辑表单](img/Figure_4.06_B18321.jpg)'
- en: '](img/Figure_4.06_B18321.jpg)'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.06_B18321.jpg](img/Figure_4.06_B18321.jpg)'
- en: Figure 4.6 – The edit form is displayed when you click on edit
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6 – 点击编辑时显示编辑表单
- en: We did it! The BREAD is complete. We can now spread it with butter and let it
    be consumed by as many customers as possible.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做到了！BREAD已经完成。我们现在可以把它涂上黄油，让它尽可能多地被顾客消费。
- en: Remember to open the exercise with different browsers to appreciate the magic
    of synchronization. Every action of any user will be visualized by the rest.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 记得用不同的浏览器打开练习，以欣赏同步的魔法。任何用户的任何操作都将被其他人可视化。
- en: Summary
  id: totrans-482
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have been able to connect a consumer to a database to manage its information
    and reply with new rendered HTML structures that we have injected. Gradually,
    a very basic real-time social network has been built to insert messages, list
    them, filter them, update them, and delete them. The frontend has a simple role
    – handling events, sending data, and receiving HTML via WebSockets.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经能够将消费者连接到数据库以管理其信息，并通过注入新的渲染HTML结构来回复。逐渐地，一个非常基本的实时社交网络被建立起来，用于插入消息、列出消息、过滤消息、更新消息和删除消息。前端有一个简单的角色——处理事件、发送数据和通过WebSockets接收HTML。
- en: 'Currently, there are several limitations related to group discrimination. When
    an action is performed, it is propagated to all users, meaning all actions have
    an impact on all visitors at the same time. Basically, that’s a good thing that
    we want it to happen, but not in all flows. Do I want everyone to update their
    message listings when a new message is inserted? Yes, of course – and when editing
    or deleting. Although it should be avoided for certain actions that should be
    private. At the moment, if one user changes page, everyone changes page. That’s
    why we are going to delve into the possibilities offered by the Channels Rooms:
    a mechanism that allows us to send data to a specific client or a group defined
    by us. With this technique, we can go a step further by incorporating private
    rooms or information limited to certain customers.'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，与群体歧视相关的限制有几个。当一个动作被执行时，它会传播到所有用户，意味着所有动作都会同时影响所有访客。基本上，这是好事，我们希望它发生，但并非在所有流程中。当插入新消息时，我想让每个人都更新他们的消息列表吗？当然，是的——当编辑或删除时也是如此。尽管应该避免某些应该私有的动作。目前，如果一个用户更改页面，所有人都会更改页面。这就是我们要深入研究频道房间提供的可能性的原因：一种允许我们向特定的客户端或我们定义的特定组发送数据的机制。使用这种技术，我们可以通过整合私人房间或仅限于某些客户的信息来更进一步。
- en: In the next chapter, we will deal with the different techniques for creating
    rooms and their optimal management. All the knowledge acquired about a database
    will help us to create a simple chat that will allow us to maintain private conversations
    between two clients, restrict groups, or broadcast to all those connected.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论创建房间和它们最佳管理的不同技术。关于数据库所获得的所有知识将帮助我们创建一个简单的聊天工具，这将允许我们在两个客户之间保持私密对话，限制群组，或向所有连接的用户广播。
