- en: Chapter 8. Testing Web Application Frontends using Twill
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章。使用 Twill 测试 Web 应用程序前端
- en: '*We haven''t talked at all about testing user interfaces. Mostly because graphical
    user interfaces are not very amenable to being checked by automated testing tools
    (it can be difficult to feed input to the system and difficult to disentangle
    all of the units involved). However, web applications are an exception to that
    rule, and their importance keeps increasing.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们还没有讨论过测试用户界面。主要是因为图形用户界面不太适合通过自动化测试工具进行检查（向系统输入输入可能很困难，而且很难解开所有涉及的单元）。然而，Web
    应用程序是这一规则的例外，并且它们的重要性一直在增加。*'
- en: 'In this chapter, we shall:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Learn to use Twill to script interactions with web sites
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用 Twill 编写与网站交互的脚本
- en: Learn how run Twill scripts from inside a testing framework
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何在测试框架内部运行 Twill 脚本
- en: Learn how to integrate Twill operations directly into unittest tests
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何将 Twill 操作直接集成到 unittest 测试中
- en: So let's get on with it!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们开始吧！
- en: Installing Twill
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Twill
- en: You can find Twill in the Python Package Index at [http://pypi.python.org/pypi/twill/](http://pypi.python.org/pypi/twill/).
    At the time of writing, the latest version can be directly downloaded from [http://darcs.idyll.org/~t/projects/twill-0.9.tar.gz](http://darcs.idyll.org/~t/projects/twill-0.9.tar.gz).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 Python 包索引中找到 Twill，网址为 [http://pypi.python.org/pypi/twill/](http://pypi.python.org/pypi/twill/)。在撰写本文时，最新版本可以直接从
    [http://darcs.idyll.org/~t/projects/twill-0.9.tar.gz](http://darcs.idyll.org/~t/projects/twill-0.9.tar.gz)
    下载。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Windows users will need to use an archiving program which understands Tar and
    GZip formats, such as 7-Zip ([http://www.7-zip.org/](http://www.7-zip.org/)) to
    extract the files.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 用户需要使用一个理解 Tar 和 GZip 格式的存档程序，例如 7-Zip ([http://www.7-zip.org/](http://www.7-zip.org/))
    来提取文件。
- en: 'Once you have the files unpacked, you can install them by opening a command
    prompt, changing to the `twill-0.9` directory, and running:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦解压了文件，您可以通过打开命令提示符，切换到 `twill-0.9` 目录，并运行以下命令来安装它们：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: or, if you can't write to Python's `site-packages` directory,
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您无法写入 Python 的 `site-packages` 目录，
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you're using a version of Python older than 2.6, you won't be able to do
    a `--user` installation, which means you'll need to have write access to the Python
    installation's `site-packages` directory.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是低于 2.6 版本的 Python，您将无法执行 `--user` 安装，这意味着您需要具有对 Python 安装 `site-packages`
    目录的写入权限。
- en: Exploring the Twill language
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Twill 语言
- en: Now that you've installed Twill, you can open a shell program that lets you
    interactively explore its language and capabilities. We'll go through some of
    the most useful ones here.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经安装了 Twill，您可以打开一个允许您交互式探索其语言和功能的 shell 程序。我们在这里将介绍其中一些最有用的功能。
- en: Time for action – browsing the web with Twill
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候使用 Twill 浏览网页了
- en: We'll take Twill for a spin, using its interactive interpreter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Twill 的交互式解释器来试用 Twill。
- en: 'Start the interactive Twill interpreter:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动交互式 Twill 解释器：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may notice a couple of warnings about the deprecated `md5` module when you
    start Twill. You may safely ignore them.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您启动 Twill 时，您可能会注意到关于已弃用的 `md5` 模块的几个警告。您可以安全地忽略它们。
- en: Get a list of Twill commands. You can get further information about a specific
    command by typing `help <command>` at the prompt.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 Twill 命令列表。您可以在提示符下输入 `help <command>` 来获取有关特定命令的更多信息。
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Time for action – browsing the web with Twill](img/8846_08_01.jpg)'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![是时候使用 Twill 浏览网页了](img/8846_08_01.jpg)'
- en: Tell Twill to go to a web site. Although `slashdot.org` is used in this example,
    the reader is encouraged to try out other sites as well.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉 Twill 去访问一个网站。尽管在这个例子中使用了 `slashdot.org`，但鼓励读者尝试其他网站。
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Twill will print out a couple of lines indicating that it is now browsing [http://slashdot.org/](http://slashdot.org/).
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Twill 将会打印出几行信息，表明它现在正在浏览 [http://slashdot.org/](http://slashdot.org/)。
- en: Check that the web server returned a 'no error' code (which is to say, `code
    200`). We could just as easily check for other codes—for example, making sure
    that our interface returned an error when asked to do something invalid.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 Web 服务器是否返回了 '无错误' 状态码（也就是说，`code 200`）。我们同样可以检查其他状态码——例如，确保我们的界面在请求执行无效操作时返回错误。
- en: '[PRE5]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Follow a link, which is specified by providing a regular expression. If you're
    not comfortable with regular expressions—or even if you are—you're usually fine
    by just specifying enough of the link text to identify the one that you want to
    follow. After following the link, check the code again to make sure it worked.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跟随一个链接，通过提供正则表达式来指定。如果你不熟悉正则表达式——甚至如果你熟悉——通常只需指定足够的链接文本来识别你想要跟随的那个链接就足够了。在跟随链接后，再次检查代码以确保它已成功执行。
- en: '[PRE6]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Fill in a form field. This fills the first field of the second form with the
    word **monkey**. At the time of this writing, the second form is a search form,
    and the first field is the search box. If the page layout were to change, this
    example wouldn't be correct any more.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写一个表单字段。这将第二个表单的第一个字段填入单词 **monkey**。在撰写本文时，第二个表单是一个搜索表单，第一个字段是搜索框。如果页面布局发生变化，这个例子可能就不再正确了。
- en: '[PRE7]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can also refer to forms and form fields by name (if they have names). The
    specific form used here doesn't have a name, but the field does. The following
    sets the value of the same field as the command in step 6, this time to the value
    **aardvark**.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以通过名称（如果它们有名称）来引用表单和表单字段。这里使用的特定表单没有名称，但字段有。以下设置与第 6 步中的命令相同的字段值，这次设置为 **aardvark**。
- en: '[PRE8]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we can submit the form. This moves Twill to a new working URL, as well as
    sending information to the server.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以提交表单。这将 Twill 移动到新的工作 URL，并向服务器发送信息。
- en: '[PRE9]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once again, we want to make sure that the server returned the expected code.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次强调，我们想确保服务器返回了预期的代码。
- en: '[PRE10]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Does the page contain what we expect? We can check with the `find` command.
    In this case, we'll be checking two things. The first is whether the word **aardvark**
    appears within the code of the result page. With the system currently in place
    on [slashdot.org](http://slashdot.org), we can expect that it will. The second
    check, for the word **Elephant** is probably going to fail.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面是否包含我们预期的内容？我们可以使用 `find` 命令来检查。在这种情况下，我们将检查两件事。第一是单词 **aardvark** 是否出现在结果页面的代码中。根据目前
    [slashdot.org](http://slashdot.org) 上的系统，我们可以预期它会。第二个检查，对于单词 **Elephant**，很可能会失败。
- en: '[PRE11]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Time for action – browsing the web with Twill](img/8846_08_02.jpg)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 使用 Twill 浏览网页](img/8846_08_02.jpg)'
- en: '*What just happened?*'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We used Twill to browse to [slashdot.org](http://slashdot.org), navigated into
    the **Science** section, searched for **aardvark**, and then checked to see if
    the resulting page contained the words **aardvark** and **Elephant**. Of what
    use it that?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Twill 浏览到 [slashdot.org](http://slashdot.org)，进入 **科学** 部分，搜索 **aardvark**，然后检查结果页面是否包含单词
    **aardvark** 和 **Elephant**。这有什么用？
- en: We're not limited to goofing around on [slashdot.org](http://slashdot.org).
    We can use the Twill language to describe any interaction between a web browser
    and a web server. That means, we can use it to describe the expected behavior
    of our own web applications. If we can describe expected behavior, we can write
    tests.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅限于在 [slashdot.org](http://slashdot.org) 上胡闹。我们可以使用 Twill 语言来描述浏览器和网站之间的任何交互。这意味着，我们可以用它来描述我们自己的网络应用程序的预期行为。如果我们能描述预期行为，我们就可以编写测试。
- en: It would be nice to be able to store the commands in a file though, so that
    we can automate the tests. Like any good interpreter, Twill will let us do that.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然能够将命令存储在文件中会很好，这样我们就可以自动化测试。像任何好的解释器一样，Twill 会允许我们这样做。
- en: Time for action – Twill scripting
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – Twill 脚本
- en: We'll write a Twill script that checks whether a site obeys the same interface
    that we used for interacting with [slashdot.org](http://slashdot.org), and then
    applies it to a few different web sites to see what happens.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个 Twill 脚本，检查网站是否遵循与我们用于与 [slashdot.org](http://slashdot.org) 交互相同的接口，然后将其应用于几个不同的网站以查看会发生什么。
- en: 'Create a file called `slashdot.twill` containing the following code:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `slashdot.twill` 的文件，包含以下代码：
- en: '[PRE12]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, we'll run that script on [http://slashdot.org/](http://slashdot.org/) and
    see whether it works.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将在 [http://slashdot.org/](http://slashdot.org/) 上运行该脚本，看看它是否工作。
- en: '[PRE13]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Time for action – Twill scripting](img/8846_08_03.jpg)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – Twill 脚本](img/8846_08_03.jpg)'
- en: All right, that worked nicely. So, let's see if `espn.com` works the same way
    as `slashdot.org` did.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好吧，这工作得很好。那么，让我们看看 `espn.com` 是否与 `slashdot.org` 以相同的方式工作。
- en: '[PRE14]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Time for action – Twill scripting](img/8846_08_04.jpg)'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – Twill 脚本](img/8846_08_04.jpg)'
- en: '*What just happened?*'
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: By storing the Twill commands in a file, we were able to run them as an automated
    test. That's definitely a step forward for testing our web-based applications.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将Twill命令存储在文件中，我们能够将其作为自动化测试运行。这无疑是测试我们的基于Web的应用程序的一大进步。
- en: 'The `-u` command line option that we passed to `twill-sh` is very useful: it
    has the same effect as a `go` command at the start of the file, but of course
    we can change it every time we run the script. This is particularly helpful if
    you''re not sure what the base URL for your web app will end up being.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传递给`twill-sh`的`-u`命令行选项非常有用：它具有与文件开头`go`命令相同的效果，但当然我们可以在每次运行脚本时更改它。如果你不确定你的Web应用程序的基础URL将是什么，这尤其有帮助。
- en: Twill commands
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Twill命令
- en: Twill has a number of commands, and so far we've only covered a few of them.
    In this section you'll find a brief discussion of each of Twill's commands.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Twill有许多命令，到目前为止我们只介绍了一些。在本节中，你将找到对Twill每个命令的简要讨论。
- en: help
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: help
- en: 'The `help` command prints out a list of all of Twill''s commands, or tells
    you the details of a specific command. For example, to get the details of the
    `add_auth` command, you should type:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`help`命令会打印出Twill的所有命令列表，或者告诉你特定命令的详细信息。例如，要获取`add_auth`命令的详细信息，你应该输入：'
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![help](img/8846_08_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![help](img/8846_08_05.jpg)'
- en: Tip
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you want to know the detailed syntax of any of the other commands, use the
    `help` command to get that information.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解其他任何命令的详细语法，请使用`help`命令来获取这些信息。
- en: setglobal
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: setglobal
- en: 'The `setglobal` command assigns a value to a variable name. These variable
    names can then be used as parameters of later commands. Thus, if you tell Twill
    to:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`setglobal`命令为变量名分配一个值。然后这些变量名可以用作后续命令的参数。因此，如果你告诉Twill：'
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Twill will set the global variable target to the value `http://www.example.org/`.
    You would then be able to say:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Twill会将全局变量target设置为`http://www.example.org/`的值。然后你就可以说：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: to tell Twill to go to `http://www.example.org/`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉Twill转到`http://www.example.org/`。
- en: 'Variable values can also be inserted into text strings by surrounding the variable
    name with `${ and }`, so that:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 变量值也可以通过将变量名用`${`和`}`包围插入到文本字符串中，如下所示：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: tells Twill to go to `http://www.example.org/example.html`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉Twill转到`http://www.example.org/example.html`。
- en: setlocal
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: setlocal
- en: The `setlocal` command behaves generally like the `setglobal` command, with
    one significant difference; variables bound with `setlocal` only exist while Twill
    is executing the same script file (or, technically, interactive session) in which
    they were bound. Once Twill switches to a new script, local variables are forgotten
    until execution returns to the original script.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`setlocal`命令的行为通常与`setglobal`命令类似，但有一个显著的区别；使用`setlocal`绑定的变量仅在Twill执行与它们绑定的相同脚本文件（或技术上，交互式会话）时存在。一旦Twill切换到新的脚本，局部变量就会被遗忘，直到执行返回到原始脚本。'
- en: add_auth
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: add_auth
- en: 'The `add_auth` command lets you log in to a site protected by the Basic Authentication
    scheme of HTTP. The command takes four parameters, in this order: `realm`, `URI`,
    `username`, and `password`. The username and password are what a user would type
    in to gain access to the site. The URI is a prefix for all of the web addresses
    where you want the authentication to be applied: if you pass `http://example.com/`
    as the URI, the username and password might be used to login to any page on `example.com`.
    The realm is an arbitrary text string chosen by the server, which must be included
    in any authorization. If you''re testing your own web app, you should already
    know what it is.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_auth`命令允许你通过HTTP的基本认证方案登录受保护的网站。该命令接受四个参数，顺序如下：`realm`、`URI`、`username`和`password`。用户名和密码是用户为了获得对网站的访问权限而输入的。URI是你想要应用认证的所有Web地址的前缀：如果你传递`http://example.com/`作为URI，用户名和密码可能被用来登录`example.com`上的任何页面。领域是服务器选择的一个任意文本字符串，它必须包含在任何授权中。如果你正在测试自己的Web应用程序，你应该已经知道它是什麼。'
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find out all about HTTP Basic Authentication at [http://tools.ietf.org/html/rfc2617#section-2](http://tools.ietf.org/html/rfc2617#section-2).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://tools.ietf.org/html/rfc2617#section-2](http://tools.ietf.org/html/rfc2617#section-2)找到有关HTTP基本认证的所有信息。
- en: 'So, to log in to the example realm on example.com with the username of `testuser`
    and the password of `12345`, you would use the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要登录到example.com上的示例领域，用户名为`testuser`，密码为`12345`，你会使用以下命令：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: add_extra_header
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: add_extra_header
- en: 'By using `add_extra_header`, you can include any arbitrary HTTP header into
    all subsequent requests that Twill makes. The command takes two parameters: the
    name of the header field to be added, and the value to be assigned to the header
    field.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`add_extra_header`，你可以将任何任意HTTP头部包含到Twill后续发出的所有请求中。该命令接受两个参数：要添加的头部字段名称和分配给头部字段的值。
- en: You need to keep in mind that HTTP allows the same header to exist multiple
    times in the same request, and to have different values each time. If you tell
    Twill
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要记住，HTTP允许在同一个请求中存在相同的头部多次，并且每次有不同的值。如果你告诉Twill
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: then there will be two 'moose' headers sent in each request, with different
    values.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 那么每个请求中都会发送两个'moose'头部，具有不同的值。
- en: clear_extra_headers
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: clear_extra_headers
- en: The `clear_extra_headers` command removes all of the previously defined extra
    headers from future requests. Removed headers can be re-added later.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`clear_extra_headers`命令从未来的请求中删除之前定义的所有额外头部。删除的头部可以在以后重新添加。'
- en: show_extra_headers
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: show_extra_headers
- en: The `show_extra_headers` command prints out a list of all of the currently added
    extra headers, along with their values.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`show_extra_headers`命令打印出所有当前添加的额外头部及其值。'
- en: agent
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: agent
- en: You can make Twill masquerade as a different web browser, by using the `agent`
    command. You can use any user agent string as the parameter. At the time of this
    writing, [http://user-agent-string.info/](http://user-agent-string.info/) was
    a useful resource for finding the user agent strings used by web browsers.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`agent`命令使Twill伪装成不同的网页浏览器。你可以使用任何用户代理字符串作为参数。在撰写本文时，[http://user-agent-string.info/](http://user-agent-string.info/)是一个有用的资源，可以找到网页浏览器使用的用户代理字符串。
- en: back
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: back
- en: The `back` command works just as the back button on a web browser would, returning
    to the most recent URL in Twill's history.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`back`命令的工作方式与网页浏览器上的后退按钮相同，它会返回到Twill历史记录中最新的URL。'
- en: clear_cookies
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: clear_cookies
- en: The `clear_cookies` command causes Twill to forget all of its currently stored
    cookies.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`clear_cookies`命令会导致Twill忘记其当前存储的所有cookies。'
- en: code
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: code
- en: The `code` command checks that the HTTP response code from the previous navigation
    command was the expected value. The value that means 'success' is `200`. `404`
    means that the page wasn't found, `401` means that a login is required before
    you can browse the page, `301` and `302` are redirects, and so on.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`code`命令检查上一个导航命令的HTTP响应代码是否是预期的值。表示“成功”的值是`200`。`404`表示页面未找到，`401`表示在浏览页面之前需要登录，`301`和`302`是重定向，等等。'
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find a complete list of official HTTP response codes at [http://tools.ietf.org/html/rfc2616#section-6.1.1.](http://tools.ietf.org/html/rfc2616#section-6.1.1.)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://tools.ietf.org/html/rfc2616#section-6.1.1.](http://tools.ietf.org/html/rfc2616#section-6.1.1.)找到官方HTTP响应代码的完整列表。
- en: config
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: config
- en: The `config` command lets you modify the behavior of the Twill interpreter.
    It takes a configuration parameter name and an integer value as parameters, and
    Twill modifies its behavior according to the values given to the configuration
    variable.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`config`命令允许你修改Twill解释器的行为。它接受配置参数名称和整数值作为参数，Twill根据配置变量的值修改其行为。'
- en: 'For a complete list of current configuration variables, type:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取当前配置变量的完整列表，请输入：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: debug
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: debug
- en: 'The `debug` command causes Twill to output trace information as it operates.
    At the time of writing, there were three different kinds of debug trace available:
    HTTP, commands, and handling of the HTTP-EQUIV refresh tag.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`debug`命令会导致Twill在操作时输出跟踪信息。在撰写本文时，有三种不同的调试跟踪可用：HTTP、命令和HTTP-EQUIV刷新标签的处理。'
- en: 'If you tell Twill to:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你告诉Twill：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: then whenever Twill performs an HTTP operation, you'll see a printout of the
    request and response lines, along with the HTTP header fields that were returned
    with the response.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当Twill执行HTTP操作时，你会看到请求和响应行以及随响应返回的HTTP头部字段。
- en: The `debug commands 1` command isn't useful when you're interacting directly
    with the Twill interpreter, but if you place it in a Twill script, it will cause
    Twill to print out each command as it executes, so that you can see what the script
    is doing.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`debug commands 1`命令在直接与Twill解释器交互时没有用，但如果你将其放在Twill脚本中，它将导致Twill在执行每个命令时打印出来，这样你就可以看到脚本在做什么。'
- en: If you tell Twill to
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你告诉Twill：
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: then it will print out extra information whenever it runs across a page with
    a `<META HTTP-EQUIV="refresh"...>` tag in the header.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当它遇到带有`<META HTTP-EQUIV="refresh"...>`标签的页面时，它将打印出额外信息。
- en: echo
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: echo
- en: The `echo` command is useful if you want your Twill scripts to output information,
    but don't find that any of the `debug` subcommands really does what you want.
    Whatever parameters you pass to `echo`, are printed to the screen.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo` 命令在你想要你的 Twill 脚本输出信息，但又觉得任何 `debug` 子命令都没有真正达到你的目的时很有用。你传递给 `echo`
    的任何参数都会打印到屏幕上。'
- en: exit
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: exit
- en: The `exit` command causes the Twill interpreter to terminate. It takes an error
    code—which is just an integer, with 0 normally being interpreted as 'no error'—as
    an optional parameter. Even if you pass a non-zero value to `exit`, Twill will
    print out that the script succeeded, after all of the commands that it ran executed
    correctly, including `exit`. The error code is only meaningful if the program
    that executed Twill uses it, so in many cases it will be ignored completely.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`exit` 命令会导致 Twill 解释器终止。它接受一个错误代码——它只是一个整数，通常将 0 解释为 ''无错误''——作为可选参数。即使你向
    `exit` 传递非零值，Twill 也会在所有它运行的命令执行正确后打印出脚本成功，包括 `exit`。错误代码仅在执行 Twill 的程序使用它时才有意义，所以在许多情况下它将被完全忽略。'
- en: extend_with
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extend_with
- en: The `extend_with` command is a mechanism for customizing the Twill interpreter.
    It imports a Python module, and adds any functions in it as new Twill commands.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`extend_with` 命令是自定义 Twill 解释器的一种机制。它导入一个 Python 模块，并将其中任何函数添加为新的 Twill 命令。'
- en: find
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: find
- en: The `find` command searches the current page for text that matches a regular
    expression. Python's regular expression syntax is described in the online docs
    at [http://docs.python.org/library/re.html#regular­expression­syntax](http://docs.python.org/library/re.html#regular­expression­syntax),
    but for our purposes it's enough to know that if you type a word, `find` will
    look for it.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`find` 命令在当前页面中搜索与正则表达式匹配的文本。Python 的正则表达式语法在在线文档 [http://docs.python.org/library/re.html#regular-expression-syntax](http://docs.python.org/library/re.html#regular-expression-syntax)
    中描述，但就我们的目的而言，只需知道如果你输入一个单词，`find` 将会查找它。'
- en: The `find` command also accepts an optional second parameter. This parameter
    is a text string representing options controlling how the search is performed.
    If the string contains the letter `i` then the search is case-insensitive, meaning
    that capital and lowercase letters match with each other. The letters `m` and
    `s` mean to use 'MULTILINE' and 'DOTALL' modes, respectively. These modes are
    described in the above documentation.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`find` 命令还接受一个可选的第二个参数。该参数是一个表示控制搜索如何执行的选项的文本字符串。如果字符串包含字母 `i`，则搜索是不区分大小写的，这意味着大写和小写字母可以相互匹配。字母
    `m` 和 `s` 分别表示使用 ''MULTILINE'' 和 ''DOTALL'' 模式。这些模式在上面的文档中有描述。'
- en: The find command also binds the matched text to the local variable name `__match__`,
    so that you can refer to it in later commands, just as if it had been set by `setlocal`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`find` 命令还将匹配的文本绑定到局部变量名 `__match__`，这样你就可以在后续命令中引用它，就像它已经被 `setlocal` 设置过一样。'
- en: notfind
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: notfind
- en: The `notfind` command works like the `find` command, except that if it finds
    a match for the regular expression, it fails. If it does not find a match, it
    succeeds.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`notfind` 命令与 `find` 命令类似，但如果有正则表达式的匹配项，它会失败。如果没有找到匹配项，它会成功。'
- en: follow
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: follow
- en: The `follow` command searches the current page for a link that matches a regular
    expression, and goes to the linked address. Using `follow` is like clicking on
    a link in a normal web browser.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`follow` 命令在当前页面中搜索与正则表达式匹配的链接，并转到链接地址。使用 `follow` 就像在普通网页浏览器中点击链接一样。'
- en: Unlike the `find` command, the follow command does not accept regular expression
    flags, and does not bind the `__match__` name. It just goes where the hyperlink
    points it.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `find` 命令不同，`follow` 命令不接受正则表达式标志，也不绑定 `__match__` 名称。它只是跟随超链接指向的地方。
- en: formaction
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: formaction
- en: 'The `formaction` command lets you change the address to which a form will be
    submitted. It takes two parameters: an identifier for the form you want to change,
    and the URL that you want the form submitted to.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`formaction` 命令允许你更改表单提交的地址。它接受两个参数：你想要更改的表单的标识符，以及你想要表单提交到的 URL。'
- en: 'For example, the following HTML would produce a form that would be submitted
    to the current URL, because that is the default when the `action` attribute is
    omitted from the `form` tag:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下 HTML 会生成一个表单，该表单将被提交到当前 URL，因为当 `form` 标签中省略了 `action` 属性时，这是默认行为：
- en: '[PRE24]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: After executing this `formaction` command,
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此 `formaction` 命令后，
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'it would be as if the form had been written:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 就好像表单已经被写入：
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: formclear
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: formclear
- en: The `formclear` command resets a form to its initial state, meaning that data
    entered by other commands get forgotten.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`formclear` 命令将表单重置为其初始状态，这意味着其他命令输入的数据将被遗忘。'
- en: formfile
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: formfile
- en: 'The `formfile` command fills in a value for an `<input type="file">` form field.
    It has three required parameters: the form''s name or number, the field''s name
    or number, and the filename of the file. Optionally, a fourth parameter can be
    added which specifies the mime content type of the file.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`formfile` 命令为 `<input type="file">` 表单字段填充值。它有三个必需的参数：表单的名称或编号、字段的名称或编号以及文件的文件名。可选地，可以添加第四个参数，指定文件的
    mime 内容类型。'
- en: form value
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: form value
- en: 'The `formvalue` command fills in values for HTML form fields. It accepts three
    parameters: the form''s name or number, the field''s name or number, and the value
    to be assigned. We used `formvalue` in the example Twill script above.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`formvalue` 命令为 HTML 表单字段填充值。它接受三个参数：表单的名称或编号、字段的名称或编号以及要分配的值。我们在上面的示例 Twill
    脚本中使用了 `formvalue`。'
- en: getinput
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: getinput
- en: The `getinput` command allows Twill scripts to be interactive. The command accepts
    one parameter, a prompt that will be displayed to the user. After printing the
    prompt, Twill waits for the user to type something and hit enter, after which
    whatever the user typed is stored in the local variable called `__input__`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`getinput` 命令允许 Twill 脚本具有交互性。该命令接受一个参数，即将在用户界面显示的提示。在打印提示后，Twill 等待用户输入一些内容并按回车键，之后用户输入的内容将被存储在名为
    `__input__` 的本地变量中。'
- en: getpassword
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: getpassword
- en: The `getpassword` command works mostly like `getinput`. The differences are
    that `getpassword` does not display the text that the user types, and that the
    text is bound to the local variable name `__password__` after being input.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`getpassword` 命令的工作方式与 `getinput` 类似。不同之处在于 `getpassword` 不会显示用户输入的文本，并且输入的文本在输入后绑定到本地变量名称
    `__password__`。'
- en: go
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: go
- en: The `go` command directs Twill to go to a new URL and load the page at that
    address. Unlike `follow`, go doesn't care what links exist on the current page.
    Using `go` is like typing an address into the address bar of a normal web browser.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`go` 命令指示 Twill 前往新的 URL 并加载该地址的页面。与 `follow` 不同，`go` 不关心当前页面上的链接。使用 `go` 就像在普通网络浏览器的地址栏中输入地址一样。'
- en: info
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: info
- en: The `info` command prints some general information about the page that Twill
    is currently browsing. This information includes the URL, the HTTP code, the MIME
    content-type of the page, the title, and the number of forms on the page.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`info` 命令打印 Twill 当前浏览的页面的一些一般信息。这些信息包括 URL、HTTP 状态码、页面的 MIME 内容类型、标题以及页面上的表单数量。'
- en: save_cookies
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: save_cookies
- en: 'The `save_cookies` command saves a copy of any cookies that Twill is currently
    aware of. These cookies can be re-loaded later. The command takes a single parameter:
    the file name in which to store the cookies.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`save_cookies` 命令保存 Twill 当前知道的任何 cookies 的副本。这些 cookies 可以稍后重新加载。该命令接受一个参数：存储
    cookies 的文件名。'
- en: load_cookies
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: load_cookies
- en: 'The `load_cookies` command replaces any cookies that Twill currently knows
    about with the cookies stored in a file. It takes a single parameter: the filename
    of the cookie file to load.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`load_cookies` 命令用文件中存储的 cookies 替换 Twill 当前知道的任何 cookies。它接受一个参数：要加载的 cookie
    文件名。'
- en: show_cookies
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: show_cookies
- en: The `show_cookies` command will print out any cookies currently aware of.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`show_cookies` 命令将打印出 Twill 当前知道的任何 cookies。'
- en: redirect_error
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: redirect_error
- en: The `redirect_error` command causes all of Twill's error messages to be stored
    in a file instead of being printed to the screen. It takes a single parameter
    representing the file name in which to store the errors.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`redirect_error` 命令会导致 Twill 的所有错误消息被存储在文件中，而不是打印到屏幕上。它接受一个参数，表示存储错误的文件名。'
- en: redirect_output
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: redirect_output
- en: The `redirect_output` command causes Twill to save all of its normal output
    to a file, instead of printing it to the screen. It takes a single parameter representing
    the file name in which to store the output.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`redirect_output` 命令会导致 Twill 将所有正常输出保存到文件中，而不是打印到屏幕上。它接受一个参数，表示存储输出的文件名。'
- en: This is not a command that will be of much use in an interactive Twill shell.
    It can be useful in scripts and tests.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个在交互式 Twill 壳中非常有用的命令。它在脚本和测试中可能很有用。
- en: reset_error
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: reset_error
- en: The `reset_error` command undoes the effect of `redirect_error`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`reset_error` 命令撤销 `redirect_error` 的效果。'
- en: reset_output
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: reset_output
- en: The `reset_output` command undoes the effect of `redirect_output`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`reset_output` 命令撤销 `redirect_output` 的效果。'
- en: reload
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: reload
- en: The `reload` command reloads the current URL, just as the reload or refresh
    button on a normal web browser would.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`reload` 命令重新加载当前 URL，就像正常网络浏览器中的重新加载或刷新按钮一样。'
- en: reset_browser
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: reset_browser
- en: The `reset_browser` command destroys all of the state information pertaining
    to the current Twill session. It has the same effect as stopping Twill and then
    starting it up again.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`reset_browser` 命令销毁与当前 Twill 会话相关的所有状态信息。它具有停止 Twill 然后再次启动的效果。'
- en: run
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: run
- en: The `run` command executes an arbitrary Python statement. The only parameter
    is the Python statement to execute. If the statement contains spaces, it must
    be placed within quotes, so Twill doesn't mistake it for multiple parameters.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`run` 命令执行任意的 Python 语句。唯一的参数是要执行的 Python 语句。如果语句包含空格，则必须将其放在引号内，这样 Twill 就不会将其误认为是多个参数。'
- en: runfile
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: runfile
- en: The runfile command executes a Twill script that's stored in a separate file.
    The executed script will have its own local namespace (c.f. the `setlocal` command),
    and will share the global namespace (c.f. `setglobal`)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`runfile` 命令执行存储在单独文件中的 Twill 脚本。执行后的脚本将有自己的局部命名空间（参看 `setlocal` 命令），并且将与全局命名空间共享（参看
    `setglobal`）'
- en: save_html
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: save_html
- en: The `save_html` command saves the HTML content of the current page into a file.
    It accepts a filename to save into as an optional parameter. If no filename is
    specified, Twill will choose for itself based on the URL of the data being saved.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`save_html` 命令将当前页面的 HTML 内容保存到文件中。它接受一个可选参数，指定要保存的文件名。如果没有指定文件名，Twill 将根据要保存的数据的
    URL 自行选择。'
- en: show
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: show
- en: The `show` command prints out the HTML content of the current page. This can
    be useful in an interactive session for getting a handle on what Twill is seeing,
    and it can occasionally be useful in a test script if you want to make sure that
    a page has precisely specified content.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`show` 命令打印出当前页面的 HTML 内容。在交互式会话中，这可以用来了解 Twill 看到了什么，偶尔在测试脚本中也有用，如果您想确保页面具有精确指定的内容。'
- en: showforms
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: showforms
- en: The `showforms` command prints out a list of all of the forms in the current
    page. Each form has a printout containing the form's number (and name, if it has
    a name), along with the numbers, names, types, ids, and current values for each
    field.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`showforms` 命令会打印出当前页面中所有表单的列表。每个表单都有一个包含表单编号（以及如果有名称则还包括名称）的打印输出，以及每个字段的编号、名称、类型、id和当前值。'
- en: showhistory
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: showhistory
- en: The `showhistory` command prints out a list of all of the URLs previously visited
    in the current Twill session, in order from oldest to most recent.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`showhistory` 命令按顺序从最老到最新打印出当前 Twill 会话中访问过的所有 URL。'
- en: showlinks
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: showlinks
- en: The `showlinks` command prints out a (potentially quite long) list of the links
    in the current page. This can be helpful for figuring out what you need to type
    into the `follow` command, or just for general debugging.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`showlinks` 命令会打印出当前页面中的链接列表（可能相当长）。这有助于确定需要输入到 `follow` 命令中的内容，或者只是用于一般的调试。'
- en: sleep
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sleep
- en: The `sleep` command can be used to inject pauses in the execution of a Twill
    script. It accepts one optional parameter specifying the number of seconds to
    pause before continuing to execute the script. If the time is not specified, it
    defaults to one second.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`sleep` 命令可以在 Twill 脚本的执行中注入暂停。它接受一个可选参数，指定在继续执行脚本之前暂停的秒数。如果没有指定时间，则默认为 一秒。'
- en: submit
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: submit
- en: The `submit` command submits the form containing the field most recently changed
    by the `formvalue` command. It accepts one optional parameter specifying which
    `submit` button to use, specified in the same way a field would be specified for
    the `formvalue` command. If the `submit` button is not specified, the first one
    in the form is used.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`submit` 命令提交由 `formvalue` 命令最近更改的字段的表单。它接受一个可选参数，指定要使用的 `submit` 按钮，其指定方式与为
    `formvalue` 命令指定的字段相同。如果没有指定 `submit` 按钮，则使用表单中的第一个。'
- en: tidy_ok
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tidy_ok
- en: If you have HTML Tidy ([http://tidy.sourceforge.net/](http://tidy.sourceforge.net/))
    installed, the `tidy_ok` command will use it to check whether the current page's
    code is correct. If you put `tidy_ok` in a script and the current page does not
    meet Tidy's standards of correctness, the script will be considered a failure.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已安装 HTML Tidy ([http://tidy.sourceforge.net/](http://tidy.sourceforge.net/))，则
    `tidy_ok` 命令将使用它来检查当前页面的代码是否正确。如果您在脚本中放置 `tidy_ok` 并当前页面不符合 Tidy 的正确性标准，则脚本将被视为失败。
- en: title
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: title
- en: The `title` command accepts a regular expression as its only parameter, and
    tries to match the current page's title against the regular expression. If they
    don't match, the `title` command fails. Used in a script file, this will cause
    the entire script to be considered a failure if the title does not match.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`title` 命令接受一个正则表达式作为其唯一参数，并尝试将当前页面的标题与正则表达式匹配。如果它们不匹配，`title` 命令将失败。在脚本文件中使用时，如果标题不匹配，这将导致整个脚本被视为失败。'
- en: url
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: url
- en: The `url` command accepts a regular expression as it's only parameter, and tries
    to match the current page's URL against the regular expression. If they don't
    match, the `url` command fails, and causes the script it's part of to fail. If
    the regular expression does match the URL, the local variable `__match__` is bound
    to the matching part of the URL.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`url` 命令接受一个正则表达式作为其唯一参数，并尝试将当前页面的 URL 与正则表达式匹配。如果它们不匹配，`url` 命令将失败，并导致它所属的脚本失败。如果正则表达式与
    URL 匹配，局部变量 `__match__` 将绑定到匹配的 URL 部分。'
- en: Pop quiz – the Twill language
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速问答 – Twill 语言
- en: Which form is submitted when you use the `submit` command?
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你使用 `submit` 命令时，会提交哪种表单？
- en: Which command would you use to check that an error message is not on the page?
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会用哪个命令来检查错误消息是否在页面上？
- en: When you're executing a Twill script and a command fails, what happens?
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你执行 Twill 脚本且命令失败时，会发生什么？
- en: Have a go hero – browsing the web with Twill
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄 – 使用 Twill 浏览网页
- en: Open up a Twill interactive shell, use it to search Google, follow one of the
    links in the search result, and navigate around the linked site. While you're
    doing that, try to get some hands on experience with as many of the Twill commands
    as you can.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个 Twill 交互式壳，使用它来搜索 Google，跟随搜索结果中的一个链接，并在链接的网站上导航。当你这样做的时候，尽量尝试使用尽可能多的 Twill
    命令来获得一些实际操作经验。
- en: Calling Twill scripts from tests
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从测试中调用 Twill 脚本
- en: While it's nice to be able to use `twill-sh` to execute a bunch of Twill scripts
    as a form of automated testing, we'd really like to be able to run the Twill scripts
    as part of our normal test suite. Fortunately, it's fairly easy to do so. There
    are two nice ways to run Twill scripts from Python code, and you can choose whichever
    better suits your needs.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `twill-sh` 能够执行多个 Twill 脚本作为自动化测试的一种形式是件好事，但我们更希望能够在我们的正常测试套件中运行 Twill 脚本。幸运的是，这样做相当简单。有两种很好的方法可以从
    Python 代码中运行 Twill 脚本，你可以选择更适合你需求的一种。
- en: Time for action – running Twill script files
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行 Twill 脚本文件的时间 – 运行 Twill 脚本文件
- en: The first way is to store the Twill script in a separate file, and then use
    the `twill.parse.execute_file` function to run it.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是将 Twill 脚本存储在单独的文件中，然后使用 `twill.parse.execute_file` 函数来运行它。
- en: 'Place the following code into a file called `fail.twill`:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码放入一个名为 `fail.twill` 的文件中：
- en: '[PRE27]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Naturally, this script will fail, but go ahead and run it with `twill-sh` to
    see for yourself.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自然，这个脚本会失败，但请用 `twill-sh` 运行它，亲自看看。
- en: '[PRE28]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now to run the script from Python. Pull up an interactive Python shell and
    do the following:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在从 Python 运行脚本。打开一个交互式 Python 壳，执行以下操作：
- en: '[PRE29]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![Time for action – running Twill script files](img/8846_08_06.jpg)'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![执行 Twill 脚本文件的时间 – 运行 Twill 脚本文件](img/8846_08_06.jpg)'
- en: Simple as that, we ran the script from inside Python code. That would work equally
    well in doctest, unittest, or in nose-specific test code.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简单到这种程度，我们从 Python 代码内部运行了脚本。这在 doctest、unittest 或 nose 特定的测试代码中同样有效。
- en: Notice that what the Twill shell would report as an error, execute_file reports
    as a `twill.errors.TwillAssertionError` exception. That integrates nicely with
    the automated testing tools we've discussed previously.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，Twill 壳会报告为错误的，execute_file 会报告为 `twill.errors.TwillAssertionError` 异常。这很好地与之前讨论过的自动化测试工具集成在一起。
- en: '*What just happened?*'
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: With just a couple of lines of code, we executed a Twill script that was stored
    in a separate file, and received any errors that it encountered as Python exceptions.
    This is ideal for situations where you have a pre-existing Twill script, and just
    want a way to have it run alongside the rest of your test suite. It's also convenient
    if you want to automatically generate the Twill script, or if you simply want
    to keep different languages in different files.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 只用几行代码，我们就执行了一个存储在单独文件中的 Twill 脚本，并接收到了它遇到的任何错误作为 Python 异常。这对于你有一个现有的 Twill
    脚本，只想让它与你的测试套件一起运行的情况非常理想。如果你想要自动生成 Twill 脚本，或者你只是想将不同的语言保存在不同的文件中，这也非常方便。
- en: Time for action – running Twill script strings
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行 Twill 脚本字符串的时间
- en: The second way to run a Twill script from inside Python code is to store the
    script in a string.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Python 代码内部运行 Twill 脚本的第二种方式是将脚本存储在字符串中。
- en: 'Open up an interactive Python interpreter and type the following commands:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个交互式 Python 解释器，并输入以下命令：
- en: '[PRE30]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The result will be just the same as when we executed a file containing those
    commands.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将与执行包含这些命令的文件相同。
- en: Note
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice the `no_reset = False` parameter that we passed to `execute_string`.
    We need that because if we leave it out, Twill will assume that all of our calls
    to `execute_string` should be executed, as if they were all part of the same browser
    session. We don't want that because we want our tests to be separated from each
    other. `execute_file` will make the opposite assumption, so, we don't need to
    pass it a `no_reset` parameter (although we could).
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意我们传递给 `execute_string` 的 `no_reset = False` 参数。我们需要它，因为如果我们省略它，Twill 将假设我们所有的
    `execute_string` 调用都应该执行，就像它们都是同一个浏览器会话的一部分一样。我们不想这样，因为我们希望我们的测试彼此分离。`execute_file`
    将做出相反的假设，因此我们不需要传递 `no_reset` 参数（尽管我们可以）。
- en: '*What just happened?*'
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: This time, the script was embedded directly into the Python code as a string
    constant. This is desirable when the Twill script is seen as simply being another
    way to write part of a test, rather than a separate thing in itself.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，脚本被直接嵌入到 Python 代码中作为一个字符串常量。当 Twill 脚本被视为编写测试部分的一种方式，而不是一个独立的事物时，这是所希望的。
- en: A nifty trick
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个巧妙的技巧
- en: If you're using Python 2.4 or greater, you can define a function decorator that
    makes it simple to write Twill tests as Python functions.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Python 2.4 或更高版本，你可以定义一个函数装饰器，这使得将 Twill 测试编写为 Python 函数变得简单。
- en: '[PRE31]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you put that code in a Python module (here called `twill_decorator`) and
    then import `twill_test` into your testing code, you can write Twill tests like
    so:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将这段代码放入一个 Python 模块（这里称为 `twill_decorator`）中，然后导入 `twill_test` 到你的测试代码中，你可以这样编写
    Twill 测试：
- en: '[PRE32]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: When you use Nose or unittest to run that test module, the `test_slashdot` function
    will automatically execute the Twill script in its document string, and report
    any errors as test failures. You don't have to remember to pass `no_reset = False`,
    or any of the other details of running Twill from a string.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 Nose 或 unittest 运行该测试模块时，`test_slashdot` 函数将自动执行其文档字符串中的 Twill 脚本，并将任何错误报告为测试失败。你不需要记住传递
    `no_reset = False` 或运行 Twill 从字符串的任何其他细节。
- en: Integrating Twill operations into unittest tests
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Twill 操作集成到 unittest 测试中
- en: So far, our unit tests have treated each Twill script as a single operation
    that produces either a success or a failure. What if we want to, say, download
    an HTML page, perform some assertions about relationships between its content
    and a database, then follow a link to another page?
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的单元测试将每个 Twill 脚本视为一个产生成功或失败的单个操作。如果我们想下载一个 HTML 页面，对其内容与数据库之间的关系进行一些断言，然后跟随链接到另一个页面，会怎样呢？
- en: We can do this sort of thing by accessing Twill's browser object directly from
    our test code. The browser object has methods similar to the commands of the Twill
    language, so this should seem fairly familiar.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过直接从测试代码中访问 Twill 的浏览器对象来做这样的事情。浏览器对象具有类似于 Twill 语言命令的方法，所以这应该看起来相当熟悉。
- en: Time for action – using Twill's browser object
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 使用 Twill 的浏览器对象
- en: Here we see how to access the browser object directly, and use it to interact
    with the web.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到如何直接访问浏览器对象，并使用它来与网络交互。
- en: 'Place the following code into a Python test module:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码放入一个 Python 测试模块中：
- en: '[PRE33]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Run the test module using `nosetests`. If Slashdot hasn't changed their interface
    since this was written, then the test will pass. If they have, the test will probably
    fail.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `nosetests` 运行测试模块。如果 Slashdot 自从本文编写以来没有更改其界面，那么测试将通过。如果他们已经更改，测试可能会失败。
- en: '*What just happened?*'
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: Instead of using the Twill language to describe the interaction with a web site,
    we used Twill as a library that we could call from our test code. This allowed
    us to interleave Twill operations with unittest assertions. We could have included
    any other operations that we needed, as well. Using this technique, our tests
    can treat the web as just one more source of data that they can access.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是使用 Twill 语言来描述与网站的交互，而是将 Twill 作为我们可以从测试代码中调用的库。这允许我们将 Twill 操作与 unittest
    断言交织在一起。我们还可以包括任何其他我们需要的操作。使用这种技术，我们的测试可以将网络视为它们可以访问的更多数据源之一。
- en: It's important to notice the differences between the Twill language and the
    methods available on the browser object. For example, where the Twill language
    has a `show` command that prints out the HTML of the current page, the browser
    has a `get_html` method that returns the HTML of the current page.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意Twill语言和浏览器对象上可用的方法之间的差异。例如，Twill语言有一个`show`命令，用于打印当前页面的HTML，而浏览器有一个`get_html`方法，用于返回当前页面的HTML。
- en: Pay special attention to the interactions with the form, at the end of the test.
    These interactions use a form object, which can be retrieved by calling the browser
    object's `get_form` method.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试的最后，特别关注与表单的交互。这些交互使用表单对象，可以通过调用浏览器对象的`get_form`方法来检索。
- en: The `set_value` method of a form object accepts the new value for the control
    as the first parameter, and then has a number of keyword arguments that can be
    used to specify which control should take on that value. The most useful of these
    arguments are `name`, as used above, and `nr`, which selects the control by number.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 表单对象的`set_value`方法接受控制的新值作为第一个参数，然后有多个关键字参数可以用来指定哪个控件应该采用该值。其中最有用的参数是`name`，如上所述，以及`nr`，它通过数字选择控件。
- en: In order for `submit` to work, it should be preceded by a call to the `clicked`
    method targeting one of the controls of the form (it doesn't matter which).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`submit`方法工作，它应该由一个调用`clicked`方法的目标表单控件（无论哪个）的方法来 precede。
- en: Browser methods
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器方法
- en: 'T he browser object retrieved with `twill.get_browser()` has the following
    useful methods:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`twill.get_browser()`获取的浏览器对象具有以下有用的方法：
- en: '`go`'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go`'
- en: '`reload`'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reload`'
- en: '`back`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`back`'
- en: '`get_code`'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_code`'
- en: '`get_html`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_html`'
- en: '`get_title`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_title`'
- en: '`get_url`'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_url`'
- en: '`find_link`'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find_link`'
- en: '`follow_link`'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`follow_link`'
- en: '`set_agent_string`'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set_agent_string`'
- en: '`get_all_forms`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_all_forms`'
- en: '`get_form`'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_form`'
- en: '`get_form_field`'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_form_field`'
- en: '`clicked`'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clicked`'
- en: '`submit`'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`submit`'
- en: '`save_cookies`'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save_cookies`'
- en: '`load_cookies`'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`load_cookies`'
- en: '`clear_cookies`'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clear_cookies`'
- en: 'Many of those work just as the related Twill command, except that you pass
    the parameters as strings into a method call [e.g. `browser.save_cookies(''cookies.txt'')`].
    A few of them behave differently, though, or don''t have a Twill language equivalent,
    so we''ll go into more detail about those now:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 许多这些方法与相关的Twill命令工作方式相同，除了你将参数作为字符串传递给方法调用[例如`browser.save_cookies('cookies.txt')`]。尽管如此，有一些方法的行为不同，或者没有Twill语言的等效项，所以我们现在将更详细地介绍这些方法：
- en: get_code
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: get_code
- en: T he `get_code` method returns the HTTP code for the current page. It doesn't
    do any comparisons between the code and an expected value. If you want to raise
    an exception if the code isn't `200`, you need to do it yourself.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_code`方法返回当前页面的HTTP代码。它不会在代码和预期值之间进行任何比较。如果你想如果代码不是`200`就抛出异常，你需要自己来做。'
- en: get_html
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: get_html
- en: T he `get_html` method returns the HTML for the current page as a Python string.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_html`方法返回当前页面的HTML作为Python字符串。'
- en: get_title
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: get_title
- en: T he `get_title` method returns the title of the current page as a Python string.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_title`方法返回当前页面的标题作为Python字符串。'
- en: get_url
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: get_url
- en: T he `get_url` method returns the URL of the current page as a Python string.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_url`方法返回当前页面的URL作为Python字符串。'
- en: find_link
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: find_link
- en: T he `find_link` method searches for a link whose URL, text or name matches
    matches the regular expression that was passed in as a parameter. If it finds
    such a link, it returns an object representing that link. If no such link exists,
    `find_link` returns `None`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_link`方法搜索一个URL、文本或名称与传入的参数匹配的链接。如果找到这样的链接，它将返回表示该链接的对象。如果没有这样的链接，`find_link`返回`None`。'
- en: A link object has a number of useful attributes. If you have a link object named
    `link`, then `link.attrs` is a list of `(name, value)` tuples, `link.text` is
    the text appearing between the `<a>` and `</a>` tags, and `link.absolute_url`
    is the address to which the link points.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 链接对象具有许多有用的属性。如果你有一个名为`link`的链接对象，那么`link.attrs`是一个包含`(name, value)`元组的列表，`link.text`是出现在`<a>`和`</a>`标签之间的文本，而`link.absolute_url`是链接指向的地址。
- en: follow_link
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: follow_link
- en: T he `follow_link` method takes a link object as a parameter, and goes to the
    address represented by the link. If you have a URL in the form of a string, rather
    than a link object, you should use the `go` method instead.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`follow_link`方法接受一个链接对象作为参数，并跳转到链接表示的地址。如果你有一个字符串形式的URL而不是链接对象，你应该使用`go`方法。'
- en: get_all_forms
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: get_all_forms
- en: T he `get_all_forms` method returns a list of form objects representing all
    forms appearing in the page. If there are any form controls on the page that aren't
    inside of `<form>` tags, a special form object will be created to contain them,
    and will be the first element of the list.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_all_forms` 方法返回一个表示页面中所有表单的表单对象列表。如果页面上有不在 `<form>` 标签内的表单控件，将创建一个特殊的表单对象来包含它们，并且将成为列表的第一个元素。'
- en: get_form
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: get_form
- en: T he `get_form` method takes a regular expression as a parameter, and searches
    for a form whose id, name or number matches. If it finds such a form, it returns
    a form object representing it.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_form` 方法接受一个正则表达式作为参数，并搜索一个其 id、name 或编号匹配的表单。如果找到这样的表单，它将返回一个表示该表单的表单对象。'
- en: A form object has several useful attributes. If you have a form object called
    `form`, then `form.name` is the name of the form if it has a name, `form.method`
    is the form's method (usually 'GET' or 'POST'), `form.action` is the URL to which
    the form should be submitted, `form.enctype` is the content type to use when encoding
    the form for transmission, and `form.attrs` is a dictionary of attributes applied
    to the form.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 表单对象有几个有用的属性。如果你有一个名为 `form` 的表单对象，那么 `form.name` 是表单的名称（如果有），`form.method`
    是表单的方法（通常是 'GET' 或 'POST'），`form.action` 是表单应该提交到的 URL，`form.enctype` 是编码表单用于传输的内容类型，而
    `form.attrs` 是应用于表单的属性字典。
- en: 'A form object also has methods that help you manipulate its contents. Notable
    among these are `form.get_value`, `form.set_value`, `form.clear`, `form.clear_all`,
    and `form.add_file`. All of these methods except for `clear_all` target a specific
    control within the form. You tell it which control to target by passing one or
    more of the following keyword arguments to the method: `name`, `type`, `kind`,
    `id`, `nr`, and `label`. The `nr` keyword is short for ''number''. If no control
    matches all of the specified parameters, an `_mechanize_dist.ClientForm.ControlNotFoundError`
    exception will be raised.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 表单对象还有帮助您操作其内容的方法。其中最值得注意的是 `form.get_value`、`form.set_value`、`form.clear`、`form.clear_all`
    和 `form.add_file`。除了 `clear_all` 之外的所有这些方法都针对表单中的特定控件。您可以通过向方法传递一个或多个以下关键字参数来指定要针对哪个控件：`name`、`type`、`kind`、`id`、`nr`
    和 `label`。`nr` 关键字是 'number' 的简称。如果没有控件匹配所有指定的参数，将引发 `_mechanize_dist.ClientForm.ControlNotFoundError`
    异常。
- en: The `set_value` and `add_file` methods accept a value or a filename, respectively,
    as their first parameters. The `get_value` method returns the current value of
    the selected control. The `clear` method returns a control to its default value.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`set_value` 和 `add_file` 方法分别接受一个值或一个文件名作为它们的第一个参数。`get_value` 方法返回所选控件的当前值。`clear`
    方法将控件返回到其默认值。'
- en: get_form_field
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: get_form_field
- en: The `get_form_field` method takes a form object as its first parameter and a
    regular expression as its second. If precisely one of the form's controls has
    an id, name or index that matches the regular expression, an object representing
    that control is returned.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_form_field` 方法接受一个表单对象作为其第一个参数，一个正则表达式作为其第二个参数。如果表单的控件中恰好有一个 id、name 或
    index 与正则表达式匹配，则返回表示该控件的对象。'
- en: For the most part this is not needed, because the form object's methods are
    more flexible ways to manipulate form controls. Its primary use is to provide
    input to the `clicked` method.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，这并不是必需的，因为表单对象的方法是更灵活地操作表单控件的方式。它的主要用途是向 `clicked` 方法提供输入。
- en: clicked
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: clicked
- en: T he `clicked` method exists to keep the browser object appraised about which
    part of the page is the current focus. In particular, this tells it which form
    to submit when the `submit` method is called.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`clicked` 方法存在是为了让浏览器对象了解当前页面的哪个部分是当前焦点。特别是，当调用 `submit` 方法时，它会告诉浏览器应该提交哪个表单。'
- en: 'The `clicked` method takes two parameters: the form object that will become
    the focus, and the specific control within the form where the click should be
    registered.'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`clicked` 方法接受两个参数：将成为焦点的表单对象，以及表单中应该注册点击的具体控件。'
- en: It is usually simplest to pass `None` as the specific control. You may, however,
    pass a control object (as returned by `get_form_field`). If this control object
    represents a submit control, that control becomes the new default to use when
    submitting the form. The initial default is the first submit control in the form.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 通常最简单的方法是将 `None` 作为特定控件传递。然而，你也可以传递一个控件对象（由 `get_form_field` 返回）。如果这个控件对象代表一个提交控件，那么该控件将成为提交表单时使用的新默认控件。初始默认值是表单中的第一个提交控件。
- en: submit
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: submit
- en: T he `submit` method submits the last-clicked form, as per its `action` and
    `method`. You may optionally pass a `fieldname` parameter representing which submit
    control to use for the submission. If it exists, this parameter will be passed
    to `get_form_field` to find the appropriate submit control. If you don't pass
    a `fieldname` to the method, the default submit control will be used.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`submit` 方法提交最后点击的表单，按照其 `action` 和 `method` 属性。你可以选择性地传递一个 `fieldname` 参数，表示要使用哪个提交控件进行提交。如果存在，此参数将被传递给
    `get_form_field` 以找到适当的提交控件。如果你没有向该方法传递 `fieldname`，则将使用默认的提交控件。'
- en: Pop quiz – browser methods
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突击测验 – 浏览器方法
- en: How do you indicate which form object you want to retrieve when you call `get_form`?
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你调用 `get_form` 时，如何指示你想要检索哪个表单对象？
- en: What does the `clicked` method do?
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`clicked` 方法的作用是什么？'
- en: How does the `get_code` method differ from the `code` command?
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`get_code` 方法与 `code` 命令有何不同？'
- en: Summary
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We learned a lot in this chapter about Twill, and how to use it to write tests
    for web applications.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学到了很多关于 Twill 的知识，以及如何使用它来编写 Web 应用程序的测试。
- en: 'Specifically, we covered:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们涵盖了：
- en: The Twill language
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twill 语言
- en: Invoking Twill scripts from Python tests
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Python 测试中调用 Twill 脚本
- en: Integrating Twill's capabilities as a library into Python testing code
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Twill 的功能作为库集成到 Python 测试代码中
- en: Now that we've learned about testing web applications, we're ready to move on
    to talking about integration testing and system testing – which is the topic of
    the next chapter.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了测试 Web 应用程序，我们可以继续讨论集成测试和系统测试——这是下一章的主题。
