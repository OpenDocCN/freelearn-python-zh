- en: Chapter 1. Django and Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Django和模式
- en: 'In this chapter, we will talk about the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Why Django?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择Django？
- en: The story of Django
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django的故事
- en: How Django works
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django的工作原理
- en: What is a Pattern?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是模式？
- en: Well-known pattern collections
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 知名的模式集合
- en: Patterns in Django
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django中的模式
- en: According to Bowei Gai's "World Startup Report," there were more than 136,000
    Internet firms across the world in 2013, with more than 60,000 in America alone.
    Of these, 87 US companies are valued more than 1 billion dollars. Another study
    says that of 12,000 people aged between 18 and 30 in 27 countries, more than two-thirds
    see opportunities in becoming an entrepreneur.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 根据盖博伟的“世界初创企业报告”，2013年全球有超过136,000家互联网公司，仅美国就有超过60,000家。其中，87家美国公司的估值超过10亿美元。另一项研究表明，在27个国家的12,000名18至30岁的人中，超过三分之二看到了成为企业家的机会。
- en: This entrepreneurial boom in digital startups is primarily due to the tools
    and technologies of startups becoming cheap and ubiquitous. Creating a fully fledged
    web application takes a lot less time than it used to, thanks to powerful frameworks.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这种数字初创企业的繁荣主要归功于初创企业的工具和技术变得廉价和普遍。现在，创建一个完整的网络应用所需的时间比以前少得多，这要归功于强大的框架。
- en: With a gentle learning curve, even first-time programmers can learn to create
    web applications easily. However, soon they would keep solving the same problems
    others have been facing again and again. This is where understanding patterns
    can really help save their time.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是第一次编程的人也可以轻松学习创建网络应用，因为它的学习曲线很平缓。然而，很快他们会一遍又一遍地解决其他人一直在面对的相同问题。这就是理解模式可以真正帮助节省时间的地方。
- en: Why Django?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Django？
- en: Every web application is different, like a piece of handcrafted furniture. You
    will rarely find a mass-produced one meeting all your needs perfectly. Even if
    you start with a basic requirement, such as a blog or a social network, your needs
    will slowly grow, and you can easily end up with a lot of half-baked solutions
    duct-taped onto a once-simple cookie cutter solution.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网络应用都是不同的，就像手工制作的家具一样。你很少会找到一个完全符合你需求的大规模生产的产品。即使你从一个基本需求开始，比如一个博客或一个社交网络，你的需求会慢慢增长，你很容易最终得到很多临时解决方案粗制滥造地贴在一个曾经简单的模板解决方案上。
- en: This is why web frameworks such as Django or Rails have become extremely popular.
    Frameworks speed up development and have all the best practices baked in. However,
    they are also flexible enough to give you access to just enough plumbing for the
    job. Today, web frameworks are ubiquitous and most programming languages have
    at least one end-to-end framework similar to Django.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么像Django或Rails这样的网络框架变得极其受欢迎。框架可以加快开发速度，并且内置了所有最佳实践。然而，它们也足够灵活，可以让你获得足够的工具来完成工作。如今，网络框架是无处不在的，大多数编程语言都至少有一个类似Django的端到端框架。
- en: Python probably has more web frameworks than most programming languages. A quick
    look at **PyPi** (**Python Package Index**) brings up an amazing 13,021 packages
    related to frameworks. For Django, the total is 5,467 packages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python可能比大多数编程语言都有更多的网络框架。快速浏览Python包索引（PyPi）会发现有惊人的13021个与框架相关的包。对于Django来说，总共有5467个包。
- en: The Python wiki lists over 54 active web frameworks with the most popular ones
    being Django, Flask, Pyramid, and Zope. Python also has a wide diversity in frameworks.
    The compact `Bottle` micro web-framework is just one Python file that has no dependencies
    and is surprisingly capable of creating a simple web application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Python维基列出了超过54个活跃的网络框架，其中最受欢迎的是Django、Flask、Pyramid和Zope。Python的框架也具有广泛的多样性。紧凑的`Bottle`微型网络框架只有一个Python文件，没有依赖性，但却能够出人意料地创建一个简单的网络应用。
- en: Despite these abundant options, Django has emerged as a big favorite by a wide
    margin. [Djangosites.org](http://Djangosites.org) lists over 4,700 sites written
    in Django, including famous success stories such as Instagram, Pinterest, and
    Disqus.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有这么多的选择，Django已经成为了绝大多数人的首选。[Djangosites.org](http://Djangosites.org)列出了超过4700个使用Django编写的网站，包括著名的成功案例，如Instagram、Pinterest和Disqus。
- en: As the official description says, Django ([https://djangoproject.com](https://djangoproject.com))
    is a high-level Python web framework that encourages rapid development and clean,
    pragmatic design. In other words, it is a complete web framework with batteries
    included, just like Python.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如官方描述所说，Django（[https://djangoproject.com](https://djangoproject.com)）是一个高级的Python网络框架，鼓励快速开发和清晰的实用设计。换句话说，它是一个完整的网络框架，就像Python一样，内置了所有必要的功能。
- en: The out-of-the-box admin interface, one of Django's unique features, is extremely
    helpful for early data entry and testing. Django's documentation has been praised
    for being extremely well-written for an open source project.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 开箱即用的管理界面是Django的独特功能之一，对于早期数据输入和测试非常有帮助。Django的文档因为非常适合开源项目而受到赞扬。
- en: Finally, Django has been battle-tested in several high traffic websites. It
    has an exceptionally sharp focus on security with protection against common attacks
    such as **Cross-site scripting** (**XSS**) and **Cross-site request forgery**
    (**CSRF**).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Django在几个高流量网站上经过了实战测试。它在安全方面有着异常的关注，可以防范常见攻击，如跨站脚本（XSS）和跨站请求伪造（CSRF）。
- en: Although in theory, you can use Django to build any kind of web application,
    it might not be the best for every use case. For example, to build a real-time
    interface for web-based chat, you might want to use Tornado, while the rest of
    your web app can still be done in Django. Choose the right tool for the job.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管理论上你可以使用Django构建任何类型的网络应用，但它可能并不适合每种情况。例如，要构建基于实时聊天的网络界面，你可能会想使用Tornado，而你的网络应用的其余部分仍然可以使用Django完成。选择合适的工具来完成工作。
- en: Some of the built-in features, such as the admin interface, might sound odd
    if you are used to other web frameworks. To understand the design of Django, let's
    find out how it came into being.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一些内置功能，比如管理界面，如果你习惯于其他网络框架，可能会听起来有些奇怪。为了理解Django的设计，让我们找出它是如何诞生的。
- en: The story of Django
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django的故事
- en: When you look at the Pyramids of Egypt, you would think that such a simple and
    minimal design must have been quite obvious. In truth, they are products of 4,000
    years of architectural evolution. Step Pyramids, the initial (and clunky) design,
    had six rectangular blocks of decreasing size. It took several iterations of architectural
    and engineering improvements until the modern, glazing, and long-lasting limestone
    structures were invented.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看着埃及金字塔时，你可能会认为这样简单而简约的设计一定是相当明显的。事实上，它们是4000年建筑演变的产物。阶梯金字塔，最初（而且笨重）的设计，有六个尺寸递减的矩形块。经过几次建筑和工程改进，直到现代、玻璃化和持久的石灰石结构被发明出来。
- en: Looking at Django you might get a similar feeling. So, elegantly built, it must
    have been flawlessly conceived. On the contrary, it was the result of rewrites
    and rapid iterations in one of the most high-pressure environments imaginable—a
    newsroom!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 看着Django，你可能会有类似的感觉。如此优雅地构建，一定是毫无瑕疵地构想出来的。相反，它是在一个想象得到的最高压力环境中的重写和快速迭代的结果 -
    一个新闻编辑室！
- en: In the fall of 2003, two programmers, Adrian Holovaty and Simon Willison, working
    at the Lawrence Journal-World newspaper, were working on creating several local
    news websites in Kansas. These sites, including [LJWorld.com](http://LJWorld.com),
    [Lawrence.com](http://Lawrence.com), and [KUsports.com](http://KUsports.com)—like
    most news sites were not just content-driven portals chock-full of text, photos,
    and videos, but they also constantly tried to serve the needs of the local Lawrence
    community with applications, such as a local business directory, events calendar,
    classifieds, and so on.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 2003年秋天，两名程序员Adrian Holovaty和Simon Willison在劳伦斯报纸Journal-World工作，致力于在堪萨斯州创建几个当地新闻网站。这些网站，包括[LJWorld.com](http://LJWorld.com)，[Lawrence.com](http://Lawrence.com)和[KUsports.com](http://KUsports.com)
    - 像大多数新闻网站一样，不仅是充满文本、照片和视频的内容驱动门户，而且还不断试图满足劳伦斯社区的需求，例如当地商业目录、活动日历、分类广告等。
- en: A framework is born
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个框架诞生了
- en: This, of course, meant lots of work for Simon, Adrian, and later Jacob Kaplan
    Moss who had joined their team; with very short deadlines, sometimes with only
    a few hours' notice. Since it was the early days of web development in Python,
    they had to write web applications mostly from scratch. So, to save precious time,
    they gradually refactored out the common modules and tools into something called
    "The CMS."
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这意味着对Simon、Adrian和后来加入他们团队的Jacob Kaplan Moss来说，有很多工作；有很短的截止日期，有时只有几个小时的通知。由于当时Python的网络开发还处于早期阶段，他们不得不大部分从头开始编写网络应用程序。因此，为了节省宝贵的时间，他们逐渐将常见的模块和工具重构为名为“The
    CMS”的东西。
- en: Eventually, the content management parts were spun off into a separate project
    called the Ellington CMS, which went on to become a successful commercial CMS
    product. The rest of "The CMS" was a neat underlying framework that was general
    enough to be used to build web applications of any kind.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，内容管理部分被分拆成一个名为Ellington CMS的独立项目，后来成为一个成功的商业CMS产品。剩下的“CMS”是一个干净的基础框架，通用到足以用来构建任何类型的网络应用程序。
- en: By July 2005, this web development framework was released as Django (pronounced
    Jang-Oh) under an open source **Berkeley Software Distribution** (**BSD**) license.
    It was named after the legendary jazz guitarist Django Reinhardt. And the rest,
    as they say, is history.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 2005年7月，这个网页开发框架以Django（发音为Jang-Oh）的形式发布，采用了开源的**伯克利软件分发**（**BSD**）许可证。它以传奇爵士吉他手Django
    Reinhardt的名字命名。剩下的，就像他们说的那样，就成了历史。
- en: Removing the magic
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 去除魔法
- en: Due to its humble origins as an internal tool, Django had a lot of Lawrence
    Journal-World-specific oddities. To make Django truly general purpose, an effort
    dubbed "Removing the Lawrence" was already underway.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它作为内部工具的起源谦逊，Django有很多劳伦斯Journal-World特有的怪癖。为了使Django真正通用，一个名为“去除劳伦斯”的努力已经在进行中。
- en: However, the most significant refactoring effort that Django developers had
    to undertake was called "Removing the Magic." This ambitious project involved
    cleaning up all the warts Django had accumulated over the years, including a lot
    of magic (an informal term for implicit features) and replacing them with a more
    natural and explicit Pythonic code. For example, the model classes used to be
    imported from a magic module called `django.models.*`, rather than directly importing
    them from the `models.py` module they were defined in.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Django开发人员必须进行的最重要的重构工作被称为“去除魔法”。这个雄心勃勃的项目涉及清理Django多年来积累的所有瑕疵，包括很多魔法（隐含功能的非正式术语），并用更自然和明确的Python代码替换它们。例如，模型类曾经是从一个名为`django.models.*`的魔法模块导入的，而不是直接从它们定义的`models.py`模块导入。
- en: At that time, Django had about a hundred thousand lines of code, and it was
    a significant rewrite of the API. On May 1, 2006, these changes, almost the size
    of a small book, were integrated into Django's development version trunk and released
    as Django release 0.95\. This was a significant step toward the Django 1.0 milestone.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，Django有大约十万行代码，这是API的重大重写。2006年5月1日，这些变化，几乎相当于一本小书的大小，被整合到Django的开发版本主干中，并作为Django
    0.95版本发布。这是迈向Django 1.0里程碑的重要一步。
- en: Django keeps getting better
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django不断变得更好
- en: Every year, conferences called **DjangoCons** are held across the world for
    Django developers to meet and interact with each other. They have an adorable
    tradition of giving a semi-humorous keynote on "why Django sucks." This could
    be a member of the Django community, or someone who works on competing web frameworks
    or just any notable personality.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每年，全球各地都会举行名为**DjangoCons**的会议，供Django开发人员相互交流。他们有一个可爱的传统，即在“为什么Django糟糕”上发表半幽默的主题演讲。这可能是Django社区的成员，或者是在竞争的网络框架上工作的人，或者只是任何知名人士。
- en: 'Over the years, it is amazing how Django developers took these criticisms positively
    and mitigated them in subsequent releases. Here is a short summary of the improvements
    corresponding to what once used to be a shortcoming in Django and the release
    they were resolved in:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，令人惊讶的是Django开发人员如何积极地接受这些批评，并在随后的版本中加以缓解。以下是对应于Django曾经的缺点的改进的简要总结以及它们所解决的版本：
- en: New form-handling library (Django 0.96)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的表单处理库（Django 0.96）
- en: Decoupling admin from models (Django 1.0)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将管理界面与模型解耦（Django 1.0）
- en: Multiple database support (Django 1.2)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多数据库支持（Django 1.2）
- en: Managing static files better (Django 1.3)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好地管理静态文件（Django 1.3）
- en: Better time zone support (Django 1.4)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好的时区支持（Django 1.4）
- en: Customizable user model (Django 1.5)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可定制的用户模型（Django 1.5）
- en: Better transaction handling (Django 1.6)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好的事务处理（Django 1.6）
- en: Built-in database migrations (Django 1.7)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置数据库迁移（Django 1.7）
- en: Over time, Django has become one of most idiomatic Python codebases in public
    domain. Django source code is also a great place to learn a Python web framework's
    architecture.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，Django已成为公共领域中最符合Python习惯的代码库之一。Django源代码也是学习Python web框架架构的好地方。
- en: How does Django work?
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django是如何工作的？
- en: To truly appreciate Django, you will need to peek under the hood and see the
    various moving parts inside. This can be both enlightening and overwhelming. If
    you are already familiar with this, you might want to skip this section.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正欣赏Django，您需要窥探一下内部，看看其中的各种组成部分。这既可以启发，也可能令人不知所措。如果您已经熟悉这一点，您可能想跳过本节。
- en: '![How does Django work?](img/6644OS_01_01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Django是如何工作的？](img/6644OS_01_01.jpg)'
- en: How web requests are processed in a typical Django application
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 典型Django应用程序中的Web请求是如何处理的
- en: 'The preceding figure shows the simplified journey of a web request from a visitor''s
    browser to your Django application and back. The numbered paths are as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图显示了来自访问者浏览器的Web请求到达您的Django应用程序并返回的简化旅程。编号路径如下：
- en: The browser sends the request (essentially, a string of bytes) to your web server.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器将请求（基本上是一串字节）发送到您的Web服务器。
- en: Your web server (say, Nginx) hands over the request to a WSGI server (say, uWSGI)
    or directly serves a file (say, a CSS file) from the filesystem.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的Web服务器（比如Nginx）将请求交给WSGI服务器（比如uWSGI），或者直接从文件系统中提供文件（比如CSS文件）。
- en: Unlike a web server, WSGI servers can run Python applications. The request populates
    a Python dictionary called `environ` and, optionally, passes through several layers
    of middleware, ultimately reaching your Django application.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与web服务器不同，WSGI服务器可以运行Python应用程序。请求填充了一个名为`environ`的Python字典，并且可以通过多层中间件，最终到达您的Django应用程序。
- en: URLconf contained in the `urls.py` of your application selects a view to handle
    the request based on the requested URL. The request has turned into `HttpRequest`—a
    Python object.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序的`urls.py`中包含的URLconf根据请求的URL选择一个视图来处理请求。请求已经转换为`HttpRequest`——一个Python对象。
- en: 'The selected view typically does one or more of the following things:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所选视图通常会执行以下一项或多项操作：
- en: 5a. Talks to a database via the models
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 5a. 通过模型与数据库进行交谈
- en: 5b. Renders HTML or any other formatted response using templates
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 5b. 使用模板呈现HTML或任何其他格式化响应
- en: 5c. Returns a plain text response (not shown)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 5c. 返回纯文本响应（未显示）
- en: 5d. Raises an exception
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 5d. 引发异常
- en: The `HttpResponse` object gets rendered into a string, as it leaves the Django
    application.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`HttpResponse`对象在离开Django应用程序时被渲染为一个字符串。'
- en: A beautifully rendered web page is seen in your user's browser.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户浏览器中看到了一个精美的网页。
- en: Though certain details are omitted, this representation should help you appreciate
    Django's high-level architecture. It also show the roles played by the key components,
    such as models, views, and templates. Many of Django's components are based on
    several well-known design patterns.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管省略了某些细节，但这种表示应该有助于您欣赏Django的高级架构。它还展示了关键组件（如模型、视图和模板）所扮演的角色。Django的许多组件都基于几种众所周知的设计模式。
- en: What is a Pattern?
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '什么是模式？ '
- en: What is common between the words "Blueprint," "Scaffolding," and "Maintenance"?
    These software development terms have been borrowed from the world of building
    construction and architecture. However, one of the most influential terms comes
    from a treatise on architecture and urban planning written in 1977 by the leading
    Austrian architect Christopher Alexander and his team consisting of Murray Silverstein,
    Sara Ishikawa, and several others.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: “蓝图”、“脚手架”和“维护”之间有什么共同之处？这些软件开发术语都是从建筑施工和建筑领域借来的。然而，最有影响力的术语之一来自于1977年奥地利著名建筑师克里斯托弗·亚历山大及其团队（包括Murray
    Silverstein、Sara Ishikawa等人）撰写的一部关于建筑和城市规划的专著。
- en: 'The term "Pattern" came in vogue after their seminal work, *A Pattern Language:
    Towns, Buildings, Construction* (volume 2 in a five-book series) based on the
    astonishing insight that users know about their buildings more than any architect
    ever could. A pattern refers to an everyday problem and its proposed but time-tested
    solution.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: “模式”这个术语在他们的开创性作品《模式语言：城镇、建筑、建筑》（五卷系列中的第二卷）之后开始流行，该作品基于一个惊人的洞察力，即用户对他们的建筑了解比任何建筑师都要多。模式指的是日常问题及其提议但经过时间考验的解决方案。
- en: In the book, Christopher Alexander states that "Each pattern describes a problem,
    which occurs over and over again in our environment, and then describes the core
    of the solution to that problem in such a way that you can use this solution a
    million times over, without ever doing it the same way twice."
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在书中，克里斯托弗·亚历山大（Christopher Alexander）指出：“每个模式描述了一个在我们的环境中反复出现的问题，然后以这样一种方式描述了这个问题的核心解决方案，以至于您可以一百万次使用这个解决方案，而不必重复两次。”
- en: For example, the Wings Of Light pattern describes how people prefer buildings
    with more natural lighting and suggests arranging the building so that it is composed
    of wings. These wings should be long and narrow, never more than 25 feet wide.
    Next time you enjoy a stroll through the long well-lit corridors of an old university,
    be grateful to this pattern.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，光之翼模式描述了人们更喜欢有更多自然光线的建筑，并建议安排建筑物以由翼组成。这些翼应该是长而窄的，绝不超过25英尺宽。下次你在一所古老大学的长长明亮的走廊上散步时，要感谢这种模式。
- en: Their book contained 253 such practical patterns, from the design of a room
    to the design of entire cities. Most importantly, each of these patterns gave
    a name to an abstract problem and together formed a *pattern language*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 他们的书包含了253种这样的实用模式，从房间设计到整个城市的设计。最重要的是，这些模式中的每一个都给了一个抽象问题一个名称，并共同形成了一个“模式语言”。
- en: Remember when you first came across the word *déjà vu*? You probably thought
    "Wow, I never knew that there was a word for that experience." Similarly, architects
    were not only able to identify patterns in their environment but could also, finally,
    name them in a way that their peers could understand.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得当你第一次遇到“ déjà vu”这个词吗？你可能会想“哇，我从来不知道有一个词来描述那种经历。”同样，建筑师不仅能够在他们的环境中识别模式，而且最终还能以一种同行能够理解的方式来命名它们。
- en: In the world of software, the term *design pattern* refers to a general repeatable
    solution to a commonly occurring problem in software design. It is a formalization
    of best practices that a developer can use. Like in the world of architecture,
    the pattern language has proven to be extremely helpful to communicate a certain
    way of solving a design problem to other programmers.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件世界中，术语“设计模式”指的是软件设计中常见问题的一般可重复解决方案。它是开发人员可以使用的最佳实践的正式化。就像在建筑世界一样，模式语言已被证明对于向其他程序员传达解决设计问题的某种方式非常有帮助。
- en: There are several collections of design patterns but some have been considerably
    more influential than the others.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种设计模式的集合，但有些比其他的影响力更大。
- en: Gang of Four Patterns
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 四人帮模式
- en: 'One of the earliest efforts to study and document design patterns was a book
    titled *Design Patterns: Elements of Reusable Object-Oriented Software* by Erich
    Gamma, Richard Helm, Ralph Johnson, and John Vlissides, who later became known
    as the **Gang of Four** (**GoF**). This book is so influential that many consider
    the 23 design patterns in the book as fundamental to software engineering itself.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 早期研究和记录设计模式的努力之一是一本名为《设计模式：可复用面向对象软件的元素》的书，作者是Erich Gamma、Richard Helm、Ralph
    Johnson和John Vlissides，后来被称为四人帮（GoF）。这本书影响深远，以至于许多人认为书中的23种设计模式对软件工程本身是基本的。
- en: In reality, the patterns were written primarily for object-oriented programming
    languages, and it had code examples in C++ and Smalltalk. As we will see shortly,
    many of these patterns might not be even required in other programming languages
    with better higher-order abstractions such as Python.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这些模式主要是针对面向对象编程语言编写的，并且它在C++和Smalltalk中有代码示例。正如我们将很快看到的，许多这些模式在其他具有更好高阶抽象的编程语言中甚至可能不需要。
- en: 'The 23 patterns have been broadly classified by their type as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这23种模式已经被广泛分类为以下类型：
- en: '**Creational Patterns**: These include Abstract Factory, Builder Pattern, Factory
    Method, Prototype Pattern, and Singleton Pattern'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模式：这些包括抽象工厂、生成器模式、工厂方法、原型模式和单例模式
- en: '**Structural Patterns**: These include Adapter Pattern, Bridge Pattern, Composite
    Pattern, Decorator Pattern, Facade Pattern, Flyweight Pattern, and Proxy Pattern'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构模式：这些包括适配器模式、桥接模式、组合模式、装饰器模式、外观模式、享元模式和代理模式
- en: '**Behavioral Patterns**: These include Chain of Responsibility, Command Pattern,
    Interpreter Pattern, Iterator Pattern, Mediator Pattern, Memento Pattern, Observer
    Pattern, State Pattern, Strategy Pattern, Template Pattern, and Visitor Pattern'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行为模式：这些包括责任链模式、命令模式、解释器模式、迭代器模式、中介者模式、备忘录模式、观察者模式、状态模式、策略模式、模板模式和访问者模式
- en: 'While a detailed explanation of each pattern would be beyond the scope of this
    book, it would be interesting to identify some of these patterns in Django itself:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然详细解释每种模式超出了本书的范围，但在Django本身中识别一些这些模式是很有趣的：
- en: '| GoF Pattern | Django Component | Explanation |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| GoF模式 | Django组件 | 解释 |'
- en: '| --- | --- | --- |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Command Pattern | HttpRequest | This encapsulates a request in an object
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 命令模式 | HttpRequest | 这将请求封装在一个对象中 |'
- en: '| Observer pattern | Signals | When one object changes state, all its listeners
    are notified and updated automatically |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 观察者模式 | 信号 | 当一个对象改变状态时，所有监听器都会被通知并自动更新 |'
- en: '| Template Method | Class-based generic views | Steps of an algorithm can be
    redefined by subclassing without changing the algorithm''s structure |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 模板方法 | 基于类的通用视图 | 可以通过子类化重新定义算法的步骤而不改变算法的结构 |'
- en: While these patterns are mostly of interest to those studying the internals
    of Django, the pattern under which Django itself can be classified under—is a
    common question.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些模式大多是对研究Django内部感兴趣的人来说，Django本身可以归类的模式是一个常见的问题。
- en: Is Django MVC?
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django是MVC吗？
- en: '**Model-View-Controller** (**MVC**) is an architectural pattern invented by
    Xerox PARC in the 70s. Being the framework used to build user interfaces in Smalltalk,
    it gets an early mention in the GoF book.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 模型-视图-控制器（MVC）是70年代由施乐PARC发明的一种架构模式。作为构建Smalltalk用户界面的框架，它在《Gang of Four》一书中早早地被提及。
- en: Today, MVC is a very popular pattern in web application frameworks. Beginners
    often ask the question—is Django an MVC framework?
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，MVC是Web应用程序框架中非常流行的模式。初学者经常问这样的问题：Django是一个MVC框架吗？
- en: The answer is both yes and no. The MVC pattern advocates the decoupling of the
    presentation layer from the application logic. For instance, while designing an
    online game website API, you might present a game's high scores table as an HTML,
    XML, or comma-separated (CSV) file. However, its underlying model class would
    be designed independent of how the data would be finally presented.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 答案既是肯定的，也是否定的。MVC模式倡导将表示层与应用程序逻辑解耦。例如，在设计在线游戏网站API时，您可能会将游戏的高分榜呈现为HTML、XML或逗号分隔（CSV）文件。但是，其底层模型类将独立设计，不受数据最终呈现方式的影响。
- en: MVC is very rigid about what models, views, and controllers do. However, Django
    takes a much more practical view to web applications. Due to the nature of the
    HTTP protocol, each request for a web page is independent of any other request.
    Django's framework is designed like a pipeline to process each request and prepare
    a response.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: MVC对模型、视图和控制器的功能非常严格。然而，Django对Web应用程序采取了更加实用的观点。由于HTTP协议的性质，对Web页面的每个请求都是独立的。Django的框架被设计成一个处理每个请求并准备响应的管道。
- en: Django calls this the **Model-Template-View** (**MTV**) architecture. There
    is separation of concerns between the database interfacing classes (Model), request-processing
    classes (View), and a templating language for the final presentation (Template).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Django将其称为**模型-模板-视图**（**MTV**）架构。数据库接口类（模型）、请求处理类（视图）和最终呈现的模板语言（模板）之间存在关注点的分离。
- en: If you compare this with the classic MVC—"Model" is comparable to Django's Models,
    "View" is usually Django's Templates, and "Controller" is the framework itself
    that processes an incoming HTTP request and routes it to the correct view function.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将此与经典的MVC进行比较——“模型”可与Django的模型相媲美，“视图”通常是Django的模板，“控制器”是处理传入的HTTP请求并将其路由到正确视图函数的框架本身。
- en: If this has not confused you enough, Django prefers to name the callback function
    to handle each URL a "view" function. This is, unfortunately, not related to the
    MVC pattern's idea of a View.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这还没有让您困惑，Django更倾向于将处理每个URL的回调函数命名为“视图”函数。不幸的是，这与MVC模式中“视图”的概念无关。
- en: Fowler's Patterns
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fowler的模式
- en: In 2002, Martin Fowler wrote *Patterns* *of Enterprise Application Architecture*,
    which described 40 or so patterns he often encountered while building enterprise
    applications.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 2002年，Martin Fowler写了《企业应用架构模式》，描述了他在构建企业应用程序时经常遇到的40多种模式。
- en: Unlike the GoF book, which described design patterns, Fowler's book was about
    architectural patterns. Hence, they describe patterns at a much higher level of
    abstraction and are largely programming language agnostic.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 与GoF书不同，Fowler的书是关于架构模式的。因此，它们以更高的抽象级别描述模式，并且在很大程度上与编程语言无关。
- en: 'Fowler''s patterns are organized as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Fowler的模式组织如下：
- en: '**Domain Logic Patterns**: These include Domain Model, Transaction Script,
    Service Layer , and Table Module'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**领域逻辑模式**：包括领域模型、事务脚本、服务层和表模块'
- en: '**Data Source Architectural Patterns**: These include Row Data Gateway, Table
    Data Gateway, Data Mapper, and Active Record'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据源架构模式**：包括行数据网关、表数据网关、数据映射器和活动记录'
- en: '**Object-Relational Behavioral Patterns**: These include Identity Map, Unit
    of Work, and Lazy Load'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象关系行为模式**：包括身份映射、工作单元和延迟加载'
- en: '**Object-Relational Structural Patterns**: These include Foreign Key Mapping,
    Mapping, Dependent Mapping, Association Table Mapping, Identity Field, Serialized
    LOB, Embedded Value, Inheritance Mappers, Single Table Inheritance, Concrete Table
    Inheritance, and Class Table Inheritance'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象关系结构模式**：包括外键映射、映射、依赖映射、关联表映射、标识字段、序列化LOB、嵌入值、继承映射器、单表继承、具体表继承和类表继承'
- en: '**Object-Relational Metadata Mapping Patterns**: These include Query Object,
    Metadata Mapping, and Repository'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象关系元数据映射模式**：包括查询对象、元数据映射和存储库'
- en: '**Web Presentation Patterns**: These include Page Controller, Front Controller,
    Model View Controller, Transform View, Template View, Application Controller,
    and Two-Step View'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web演示模式**：包括页面控制器、前端控制器、模型视图控制器、转换视图、模板视图、应用程序控制器和两步视图'
- en: '**Distribution Patterns**: These include Data Transfer Object and Remote Facade'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分发模式**：包括数据传输对象和远程外观'
- en: '**Offline Concurrency Patterns**: These include Coarse Grained Lock, Implicit
    Lock, Optimistic Offline Lock, and Pessimistic Offline Lock'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**离线并发模式**：包括粗粒度锁、隐式锁、乐观离线锁和悲观离线锁'
- en: '**Session State Patterns**: These include Database Session State, Client Session
    State, and Server Session State'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话状态模式**：包括数据库会话状态、客户端会话状态和服务器会话状态'
- en: '**Base Patterns**: These include Mapper, Gateway, Layer Supertype, Registry,
    Value Object, Separated Interface, Money, Plugin, Special Case, Service Stub,
    and Record Set'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基本模式**：包括映射器、网关、层超类型、注册表、值对象、分离接口、货币、插件、特殊情况、服务存根和记录集'
- en: Almost all of these patterns would be useful to know while architecting a Django
    application. In fact, Fowler's website at [http://martinfowler.com/eaaCatalog/](http://martinfowler.com/eaaCatalog/)
    has an excellent catalog of these patterns. I highly recommend that you check
    them out.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有这些模式在设计Django应用程序时都会很有用。事实上，Fowler的网站[http://martinfowler.com/eaaCatalog/](http://martinfowler.com/eaaCatalog/)上有这些模式的优秀目录。我强烈建议您查看一下。
- en: 'Django also implements a number of these patterns. The following table lists
    a few of them:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Django还实现了许多这些模式。以下表格列出了其中的一些：
- en: '| Fowler Pattern | Django Component | Explanation |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| Fowler模式 | Django组件 | 解释 |'
- en: '| --- | --- | --- |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Active Record | Django Models | Encapsulates the database access, and adds
    domain logic on that data |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 活动记录 | Django模型 | 封装数据库访问，并在该数据上添加领域逻辑 |'
- en: '| Class Table Inheritance | Model Inheritance | Each entity in the hierarchy
    is mapped to a separate table |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 类表继承 | 模型继承 | 层次结构中的每个实体都映射到一个单独的表中 |'
- en: '| Identity Field | Id Field | Saves a database ID field in an object to maintain
    identity |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 身份字段 | ID字段 | 在对象中保存数据库ID字段以维护身份 |'
- en: '| Template View | Django Templates | Renders into HTML by embedding markers
    in HTML |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 模板视图 | Django模板 | 通过在HTML中嵌入标记呈现为HTML |'
- en: Are there more patterns?
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多的模式吗？
- en: 'Yes, of course. Patterns are discovered all the time. Like living beings, some
    mutate and form new patterns: take, for instance, MVC variants such as **Model–view–presenter**
    (**MVP**), **Hierarchical model–view–controller** (**HMVC**), or **Model View
    ViewModel** (**MVVM**).'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，当然。模式一直在不断被发现。就像生物一样，有些会变异并形成新的模式：例如，MVC的变体，如**模型-视图-呈现者**（**MVP**）、**分层模型-视图-控制器**（**HMVC**）或**模型视图视图模型**（**MVVM**）。
- en: Patterns also evolve with time as better solutions to known problems are identified.
    For example, Singleton pattern was once considered to be a design pattern but
    now is considered to be an Anti-pattern due to the shared state it introduces,
    similar to using global variables. An **Anti-pattern** can be defined as commonly
    reinvented but a bad solution to a problem.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 模式也随着时间的推移而发展，因为对已知问题的更好解决方案被识别出来。例如，单例模式曾经被认为是一种设计模式，但现在被认为是一种反模式，因为它引入了共享状态，类似于使用全局变量。**反模式**可以被定义为常常被重新发明的，但是一个糟糕的解决方案。
- en: 'Some of the other well-known books which catalog patterns are *Pattern-Oriented
    Software Architecture* (known as **POSA**) by Buschmann, Meunier, Rohnert, Sommerlad,
    and Sta; *Enterprise Integration Patterns* by Hohpe and Woolf; and *The Design
    of Sites: Patterns, Principles, and Processes for Crafting a Customer-Centered
    Web Experience* by Duyne, Landay, and Hong.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一些其他众所周知的模式目录书籍包括Buschmann、Meunier、Rohnert、Sommerlad和Sta的*面向模式的软件架构*（称为**POSA**）；Hohpe和Woolf的*企业集成模式*；以及Duyne、Landay和Hong的*网站设计：为打造以客户为中心的网页体验而编织的模式、原则和流程*。
- en: Patterns in this book
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书中的模式
- en: This book will cover Django-specific design and architecture patterns, which
    would be useful to a Django developer. The upcoming sections will describe how
    each pattern will be presented.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将涵盖Django特定的设计和架构模式，这对Django开发人员很有用。接下来的章节将描述每个模式将如何呈现。
- en: '**Pattern name**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**模式名称**'
- en: 'The heading is the pattern name. If it is a well-known pattern, the commonly
    used name is used; otherwise, a terse, self-descriptive name has been chosen.
    Names are important, as they help in building the pattern vocabulary. All patterns
    will have the following parts:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 标题是模式名称。如果是一个众所周知的模式，就使用常用的名称；否则，选择一个简洁的、自我描述的名称。名称很重要，因为它有助于建立模式词汇。所有模式都将包括以下部分：
- en: '**Problem**: This briefly mentions the problem.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：这简要提到了问题。'
- en: '**Solution**: This summarizes the proposed solution(s).'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：这总结了提出的解决方案。'
- en: '**Problem Details**: This elaborates the context of the problem and possibly
    gives an example.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题详情**：这详细阐述了问题的背景，并可能给出一个例子。'
- en: '**Solution Details**: This explains the solution(s) in general terms and provides
    a sample Django implementation.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案详情**：这以一般术语解释了解决方案，并提供了一个Django实现的示例。'
- en: Criticism of Patterns
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对模式的批评
- en: 'Despite their near universal usage, Patterns have their share of criticism
    too. The most common arguments against them are as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它们几乎被普遍使用，但模式也有它们的批评。最常见的反对意见如下：
- en: '**Patterns compensate for the missing language features**: Peter Norvig found
    that 16 of the 23 patterns in Design Patterns were ''invisible or simpler'' in
    Lisp. Considering Python''s introspective facilities and first-class functions,
    this might as well be the case for Python too.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式弥补了缺失的语言特性**：Peter Norvig发现《设计模式》中的23个模式中有16个在Lisp中是“不可见或更简单的”。考虑到Python的内省能力和一级函数，这对Python来说也可能是这样。'
- en: '**Patterns repeat best practices**: Many patterns are essentially formalizations
    of best practices such as separation of concerns and could seem redundant.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式重复最佳实践**：许多模式本质上是对最佳实践的形式化，比如关注点分离，可能看起来是多余的。'
- en: '**Patterns can lead to over-engineering**: Implementing the pattern might be
    less efficient and excessive compared to a simpler solution.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式可能导致过度工程化**：实现模式可能比更简单的解决方案效率低且过度。'
- en: How to use Patterns
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用模式
- en: 'While some of the previous criticisms are quite valid, they are based on how
    patterns are misused. Here is some advice that can help you understand how best
    to use design patterns:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然之前的一些批评是相当合理的，但它们是基于模式被误用的情况。以下是一些建议，可以帮助你了解如何最好地使用设计模式：
- en: Don't implement a pattern if your language supports a direct solution
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的语言支持直接解决方案，就不要实现模式
- en: Don't try to retro-fit everything in terms of patterns
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要试图用模式的术语来适配一切
- en: Use a pattern only if it is the most elegant solution in your context
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在你的上下文中它是最优雅的解决方案时才使用模式
- en: Don't be afraid to create new patterns
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要害怕创建新的模式
- en: Best practices
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: In addition to design patterns, there might be a recommended approach to solving
    a problem. In Django, as with Python, there might be several ways to solve a problem
    but one idiomatic approach among those.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 除了设计模式，可能还有一种推荐的解决问题的方法。在Django中，与Python一样，可能有几种解决问题的方法，但其中一种是惯用的方法。
- en: Python Zen and Django's design philosophy
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python之禅和Django的设计哲学
- en: Generally, the Python community uses the term 'Pythonic' to describe a piece
    of idiomatic code. It typically refers to the principles laid out in 'The Zen
    of Python'. Written like a poem, it is extremely useful to describe such a vague
    concept.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，Python社区使用术语“Pythonic”来描述一段惯用的代码。它通常指的是《Python之禅》中阐述的原则。这本书像一首诗一样写成，对于描述这样一个模糊的概念非常有用。
- en: Tip
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Try entering `import this` in a Python prompt to view 'The Zen of Python'.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在Python提示符中输入`import this`来查看《Python之禅》。
- en: Furthermore, Django developers have crisply documented their design philosophies
    while designing the framework at [https://docs.djangoproject.com/en/dev/misc/design-philosophies/](https://docs.djangoproject.com/en/dev/misc/design-philosophies/).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Django开发人员在设计框架时已经清晰地记录了他们的设计理念，网址为[https://docs.djangoproject.com/en/dev/misc/design-philosophies/](https://docs.djangoproject.com/en/dev/misc/design-philosophies/)。
- en: While the document describes the thought process behind how Django was designed,
    it is also useful for developers using Django to build applications. Certain principles
    such as **Don't Repeat Yourself** (**DRY**), **loose coupling**, and **tight cohesion**
    can help you write more maintainable and idiomatic Django applications.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然该文档描述了Django设计背后的思维过程，但对于使用Django构建应用程序的开发人员也是有用的。某些原则，如“不要重复自己”（DRY）、“松耦合”和“紧凑性”可以帮助您编写更易维护和成熟的Django应用程序。
- en: 'Django or Python best practices suggested by this book would be formatted in
    the following manner:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 本书建议的Django或Python最佳实践将以以下方式格式化：
- en: Tip
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Best Practice**:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践：
- en: Use BASE_DIR in settings.py and avoid hard-coding directory names.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在settings.py中使用BASE_DIR，并避免硬编码目录名称。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at why people choose Django over other web frameworks,
    its interesting history, and how it works. We also examined design patterns, popular
    pattern collections, and best practices.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了人们为什么选择Django而不是其他Web框架，它有趣的历史以及它的工作原理。我们还研究了设计模式、流行的模式集合和最佳实践。
- en: In the next chapter, we will take a look at the first few steps in the beginning
    of a Django project such as gathering requirements, creating mockups, and setting
    up the project.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下Django项目开始阶段的前几个步骤，比如收集需求、创建模型和设置项目。
