- en: Chapter 4. Documentation and Best Practices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 文档和最佳实践
- en: 'So far, the focus was on developing the code and getting the first release
    out the door. We have not talked about another vital aspect of application development,
    the documentation and coding standards. Although the code base is still quite
    manageable, before it is too late, we should learn techniques to improve code
    readability. In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的重点是开发代码和推出第一个版本。我们还没有谈到应用开发的另一个重要方面，即文档和编码标准。尽管代码库仍然相当易于管理，但在为时已晚之前，我们应该学习提高代码可读性的技术。在本章中，我们将涵盖以下主题：
- en: Understanding the basics of the **reStructuredText** (**RST**) format and how
    to use it for writing docstrings
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 **reStructuredText** （**RST**） 格式的基础以及如何使用它来编写文档字符串
- en: Learning how to create HTML documentation for the code using the **Sphinx**
    document generator
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用 **Sphinx** 文档生成器为代码创建 HTML 文档
- en: Covering some important coding standards for writing the Python code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 涵盖一些重要的编码标准以编写 Python 代码
- en: Using **Pylint** to evaluate how well we are doing in following these guidelines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **Pylint** 来评估我们遵循这些指南的情况
- en: As you can guess from the preceding topics, we are taking a short break from
    coding to learn these very important concepts.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从前面的话题中可以猜到的，我们暂时从编码中抽身，学习这些非常重要的概念。
- en: '![Documentation and Best Practices](img/B05034_04_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![文档和最佳实践](img/B05034_04_01.jpg)'
- en: '| *If you are well aware of the code, you might find documentation unnecessary.
    But imagine you are assigned a different project that has a big code base with
    very little documentation. How will you feel? Of course, you will have to review
    the code anyway to get familiar with it. But your productivity will take a blow
    if it is not well documented. The time you spend understanding such code also
    depends on how well it has been written. This is where the coding standard aspect
    comes into the picture.* |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| *如果你对代码非常熟悉，你可能会觉得文档是不必要的。但想象一下，你被分配了一个拥有大量代码库但文档很少的不同项目。你会怎么想？当然，你无论如何都要审查代码以熟悉它。但如果代码没有很好地记录，你的生产力将会受到打击。你花费在理解这种代码上的时间也取决于它编写得有多好。这就是编码标准方面发挥作用的地方。*
    |'
- en: In summary, never ignore coding standards and documentation. Make sure you follow
    these guidelines while the code is being developed. It is also important to maintain
    the documentation and not to over document. Let's start by learning techniques
    to create good documentation for a Python project.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，永远不要忽视编码标准和文档。确保在代码开发过程中遵循这些指南。维护文档并不过度文档化也很重要。让我们从学习为 Python 项目创建良好文档的技术开始。
- en: Documenting the code
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录代码
- en: There are, broadly, three levels of documentation. At the top, you have project-
    or **distribution-level documentation**. It is intended to give high-level information
    on a project, such as installation instructions, licensing terms, and so on. In
    [Chapter 3](ch03.html "Chapter 3. Modularize, Package, Deploy!"), *Modularize,
    Package, Deploy!*, you already had a flavor of this documentation. We created
    the `README` and `LICENSE` files to go along with the distribution. Additionally,
    you can add more files to make the documentation comprehensive, such as `INSTALL`,
    `TODO`, `RELEASENOTES`, `CREDITS`, and so on.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 广义上，有三种级别的文档。在顶部，你有项目或 **分发级别文档**。它的目的是提供关于项目的高级信息，例如安装说明、许可条款等。在 [第三章](ch03.html
    "第三章。模块化、打包、部署！") 中，*模块化、打包、部署！*，你已经感受到了这种文档的滋味。我们创建了 `README` 和 `LICENSE` 文件来配合分发。此外，你可以添加更多文件以使文档更全面，例如
    `INSTALL`、`TODO`、`RELEASENOTES`、`CREDITS` 等。
- en: The second level is the **API-level documentation**. It summarizes how a function,
    method, class, or module should be used. Python docstrings, which we will learn
    next, are used to generate API-level documentation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第二级是 **API 级文档**。它总结了如何使用函数、方法、类或模块。我们将在下一节学习的 Python 文档字符串用于生成 API 级文档。
- en: The third level of documentation is in the form of **code comments**. Such comments
    help explain how a piece of code works.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第三级文档是以 **代码注释** 的形式存在的。这样的注释有助于解释代码是如何工作的。
- en: '**Sphinx** is a document generation tool for Python that is used to create
    project- and API-level documentations. In this chapter, we will use Sphinx to
    create API-level documentation from the docstrings. But, before jumping into this
    topic, let''s first understand what docstrings in Python are.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sphinx** 是一个用于 Python 的文档生成工具，用于创建项目和 API 级别的文档。在本章中，我们将使用 Sphinx 从文档字符串创建
    API 级别的文档。但在深入这个主题之前，让我们首先了解 Python 中的文档字符串是什么。'
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Python Enhancement Proposals (PEPs)** provide a way to propose and document
    various design standards for the Python language. There are several PEPs, and
    each one is identified by a permanent number. For example, *PEP 8*, *PEP 257*,
    *PEP 287*, and so on.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python 增强提案 (PEPs)** 提供了一种提出和记录 Python 语言各种设计标准的方法。有几个 PEPs，每个都有一个永久编号。例如，*PEP
    8*，*PEP 257*，*PEP 287* 等等。'
- en: '*PEP 257* documents the guidelines to write docstrings, whereas *PEP 287* provides
    information on the reStructuredText docstring format (more on the reStructuredText
    format later in the chapter).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*PEP 257* 记录了编写文档字符串的指南，而 *PEP 287* 提供了关于 reStructuredText 文档字符串格式的信息（关于 reStructuredText
    格式的更多内容将在本章后面介绍）。'
- en: The purpose of this chapter is not to repeat what is already documented by these
    PEPs. We will refer to these guidelines whenever appropriate in the sections to
    follow. For a comprehensive understanding of these and other PEPs, check out [https://www.python.org/dev/peps](https://www.python.org/dev/peps).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的不是重复这些 PEPs 已经记录的内容。在接下来的章节中，我们会适当参考这些指南。为了全面理解这些和其他 PEPs，请查看 [https://www.python.org/dev/peps](https://www.python.org/dev/peps)。
- en: Docstrings
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档字符串
- en: 'A docstring or document string is a string literal used to describe a class,
    method, function, or module. The purpose of a docstring is to briefly describe
    features of the code. It is different than a comment that elaborates details on
    the internal working of a piece of code. It can be accessed using the built-in
    attribute, `__doc__`. Let''s write an example to illustrate this concept. Open
    the Python interpreter and write the following trivial function:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 文档字符串或文档字符串是一个用于描述类、方法、函数或模块的字符串字面量。文档字符串的目的是简要描述代码的功能。它与详细阐述代码内部工作原理的注释不同。它可以通过内置属性
    `__doc__` 访问。让我们写一个例子来说明这个概念。打开 Python 解释器并编写以下简单的函数：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s see what the `__doc__` attribute for this function stores:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个函数的 `__doc__` 属性存储了什么：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `__doc__` attribute for the function is an empty string as we have not
    written any documentation for this function. Now let''s write a docstring for
    the function and print this attribute again:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的 `__doc__` 属性是一个空字符串，因为我们还没有为这个函数编写任何文档。现在让我们为这个函数编写一个文档字符串，并再次打印这个属性：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `__doc__` attribute now shows the docstring for the function. As can be
    seen, a docstring is represented differently than a comment. It is surrounded
    by triple double quotes (recommended style), `"""Return a special number"""`,
    or triple single quotes, `'''Return a special number'''`, and is written as the
    first statement of that class, method, function, or module.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的 `__doc__` 属性显示了函数的文档字符串。如所见，文档字符串的表示方式与注释不同。它被三重双引号（推荐风格）`"""Return a special
    number"""` 或三重单引号 `'''Return a special number'''` 所包围，并作为该类、方法、函数或模块的第一个语句编写。
- en: Tip
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**PEP 257**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**PEP 257**'
- en: The simple example shown in the previous code is that of a single-line docstring.
    Similarly, you can have multi-line docstrings. Review the PEP 257 convention ([https://www.python.org/dev/peps/pep-0257](https://www.python.org/dev/peps/pep-0257))
    for further details.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 之前代码中显示的简单示例是单行文档字符串。同样，你也可以有多行文档字符串。查看 PEP 257 规范 ([https://www.python.org/dev/peps/pep-0257](https://www.python.org/dev/peps/pep-0257))
    以获取更多详细信息。
- en: To generate effective documentation using Sphinx, the docstring should be written
    in a markup language known as reStructuredText. Let's understand the basics of
    this format next.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Sphinx 生成有效的文档，文档字符串应该用一种称为 reStructuredText 的标记语言编写。让我们了解这种格式的基础知识。
- en: Introduction to reStructuredText
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: reStructuredText 简介
- en: '**reStructuredText** (**RST**), defines a simple markup syntax, mainly for
    Python documentation. It is a part of the Python documentation processing system
    called **docutils** ([http://docutils.sourceforge.net/index.html](http://docutils.sourceforge.net/index.html)).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**reStructuredText** （**RST**）定义了一种简单的标记语法，主要用于 Python 文档。它是 Python 文档处理系统的一部分，称为
    **docutils** ([http://docutils.sourceforge.net/index.html](http://docutils.sourceforge.net/index.html))。'
- en: Tip
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**RST**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**RST**'
- en: Does this sound familiar? In [Chapter 3](ch03.html "Chapter 3. Modularize, Package,
    Deploy!"), *Modularize, Package, Deploy*, without much elaboration, we created
    a `README` file with the RST format. In that chapter, refer to the section *Prepare
    the distribution* for more information. This section will give you a bare minimum
    introduction to the RST syntax. For further reading, comprehensive documentation
    is available at [http://docutils.sourceforge.net/rst.html](http://docutils.sourceforge.net/rst.html).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来熟悉吗？在 [第 3 章](ch03.html "第 3 章。模块化、打包、部署！") 中，没有太多解释，我们创建了一个 RST 格式的 `README`
    文件。在该章中，参考 *准备分发* 部分以获取更多信息。本节将向您提供一个关于 RST 语法的最低限度介绍。有关进一步阅读，完整的文档可在 [http://docutils.sourceforge.net/rst.html](http://docutils.sourceforge.net/rst.html)
    获取。
- en: Let's review some of the most frequently used features of RST.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下 RST 最常用的功能。
- en: Section headings
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部分标题
- en: 'To distinguish a section title from the rest of the text, it is decorated with
    an underline created using any one of the non-alpha numeric characters, such as
    `~~~~`, `====`, `–---`, or `####`. The decorated underline should be of the same
    length (or longer) as the heading text, as shown in the following example header:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了区分部分标题和其余文本，它被使用任何非字母数字字符（如 `~~~~`、`====`、`–---` 或 `####`）创建的下划线装饰。装饰的下划线应与标题文本的长度相同（或更长），如下例标题所示：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, dashes (`---`) are used to decorate the heading. Suppose this is considered
    as the *Heading 1* style in the document; any subsequent use of this decorator
    will result in the same style. In the following screenshot, the RST syntax is
    shown in the left column; the right column shows how it will be displayed in a
    browser:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，破折号 (`---`) 用于装饰标题。假设这被认为是文档中的 *标题 1* 样式；任何后续使用此装饰器都将产生相同的样式。在下面的屏幕截图中，RST
    语法显示在左侧列；右侧列显示了在浏览器中的显示方式：
- en: '![Section headings](img/B05034_04_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![部分标题](img/B05034_04_02.jpg)'
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Try it yourself!**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试看！**'
- en: You can use online RST editors, such as [http://rst.ninjs.org](http://rst.ninjs.org),
    to quickly test how your RST file will be processed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用在线 RST 编辑器，如 [http://rst.ninjs.org](http://rst.ninjs.org)，快速测试您的 RST 文件将如何被处理。
- en: Paragraphs
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 段落
- en: 'To create a paragraph, simply write one. When done, leave at least one blank
    line at the end of it. Also, if you indent a paragraph in the RST file, it will
    appear as an indented block in the browser. Here is the RST syntax to write two
    paragraphs:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个段落，只需写一个。完成后，在段落末尾至少留一个空白行。此外，如果在 RST 文件中缩进一个段落，它将在浏览器中显示为缩进的块。以下是写两个段落的
    RST 语法：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As an exercise, use any online RST editor and see how it will appear in a web
    browser.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作为练习，使用任何在线 RST 编辑器，看看它将在网页浏览器中如何显示。
- en: Text styles
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本样式
- en: You can apply a different text style inside a paragraph or to the body text.
    Decorate the text with double asterisks to make it appear bold, for example, `**bold_text**`.
    Similarly, a single asterisk decoration, `*italics_text*`, is used for *italics*
    style.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在段落内部或正文文本中应用不同的文本样式。使用双星号装饰文本以使其显示为粗体，例如，`**粗体文本**`。同样，单个星号装饰 `*斜体文本*` 用于
    *斜体* 样式。
- en: Code snippets
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码片段
- en: 'RST provides various directives to process formatted document blocks. The `code-block`
    directive is specified with syntax, for example, `.. code-block::`. Note that
    there is a space between the word `code-block` and the two preceding dots. The
    `code-block` directive can be specified along with the code language to construct
    a literal block. In the sample RST shown next, we have specified Python as the
    code language:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: RST 提供了各种指令来处理格式化的文档块。`code-block` 指令通过语法指定，例如，`.. code-block::`。请注意，在单词 `code-block`
    和前面的两个点之间有一个空格。`code-block` 指令可以与代码语言一起指定来构建一个文本块。在下面的 RST 示例中，我们指定了 Python 作为代码语言：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The argument to the `code-block` directive is specified as `python`. It tells
    the document generator that it is Python syntax. Additionally, note that there
    should be a blank line after the directive before writing the actual code. You
    can also use the `code` directive, `.. code::`, to represent a piece of code.
    For the syntax highlighting, a Python package called **Pygments** is required.
    We'll talk more on this later, when we learn about the Sphinx document generator.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`code-block` 指令的参数指定为 `python`。它告诉文档生成器这是 Python 语法。此外，请注意，在编写实际代码之前，指令之后应该有一个空白行。你也可以使用
    `code` 指令，`.. code::`，来表示一段代码。对于语法高亮，需要一个名为 **Pygments** 的 Python 包。我们将在学习 Sphinx
    文档生成器时进一步讨论这个问题。'
- en: Mathematical equations
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数学公式
- en: 'The `math` directive is used to write mathematical equation. Note that you
    need to leave a blank space before and after the mathematical equation block.
    The following syntax (the left column) is one way to represent a mathematical
    formula. The right column shows how it will be displayed in a web browser:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`math`指令用于编写数学方程。请注意，您需要在数学方程块前后留出空白空间。以下语法（左侧列）是表示数学公式的一种方式。右侧列显示了它在网页浏览器中的显示方式：'
- en: '![Mathematical equations](img/B05034_04_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![数学方程](img/B05034_04_03.jpg)'
- en: Bullets and numbering
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表和编号
- en: 'Bullets can be added using any of the following characters: `*`, `+`, or `-`.
    It is required to have at least one blank line, immediately before the first bullet
    and immediately after the last bullet item:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下任何字符添加项目符号：`*`、`+`或`-`。要求在第一个项目符号之前和最后一个项目符号之后至少有一个空白行：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Similarly, you can specify a numbered list, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，您可以指定编号列表，如下所示：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Key things to remember**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**需要记住的关键事项**'
- en: The RST syntax requires you to leave blank lines between different style blocks.
    For example, when you write a code snippet, a mathematical equation, or a paragraph,
    you need one blank line before and after these documentation blocks. RST is indentation
    sensitive.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: RST语法要求您在不同样式块之间留出空白行。例如，当您编写代码片段、数学方程或段落时，您需要在这些文档块前后各留一个空白行。RST对缩进敏感。
- en: Dosctrings using RST
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用RST的文档字符串
- en: To generate nice-looking documentation for our application, we need to first
    write docstrings in the RST format. The *PEP 287* proposes guidelines to write
    docstrings using the RST format. For a comprehensive description, check out [https://www.python.org/dev/peps/pep-0287](https://www.python.org/dev/peps/pep-0287).
    Here, we will discuss some of the most important things to remember when you write
    docstrings. To illustrate the concept, let's write a docstring for the `wargame/hut.py`
    module. The documentation is also provided in the supplementary code for the chapter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成我们应用程序的漂亮文档，我们首先需要用RST格式编写文档字符串。*PEP 287*提出了使用RST格式编写文档字符串的指南。有关全面描述，请查看[https://www.python.org/dev/peps/pep-0287](https://www.python.org/dev/peps/pep-0287)。在这里，我们将讨论您编写文档字符串时需要记住的一些最重要的要点。为了说明这个概念，让我们为`wargame/hut.py`模块编写一个文档字符串。文档也提供了该章节的补充代码。
- en: 'The following code screenshot has a sample class-level docstring for the `Hut`
    class:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码截图显示了`Hut`类的示例类级别文档字符串：
- en: '![Dosctrings using RST](img/B05034_04_09.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![使用RST的文档](img/B05034_04_09.jpg)'
- en: 'Let''s review this syntax now:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在回顾一下这个语法：
- en: The documentation standard recommends a one-line summary separated by a blank
    line before the next descriptive block.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档标准建议在下一描述块之前留有一行总结，并留有空白行。
- en: The `:arg` fields describe the input arguments for this class, as given in the
    `__init__` method. You can also use the `:param` field for this.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:arg`字段描述了此类输入参数，如`__init__`方法中给出的。您也可以使用`:param`字段。'
- en: 'The `:ivar` field is used to describe the instance variables for the class.
    You can, optionally, specify the type of the instance variable on the same line,
    for example:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:ivar`字段用于描述类的实例变量。您可以选择在相同行上指定实例变量的类型，例如：'
- en: '[PRE8]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When Sphinx generates the HTML documentation, the instance variable type will
    be displayed next to its name. It will also try to create a link to that type.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当Sphinx生成HTML文档时，实例变量类型将显示在其名称旁边。它还会尝试创建对该类型的链接。
- en: The `.. seealso::` field directive is used to reference anything related to
    this class that you feel is important.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.. seealso::`字段指令用于引用与该类相关的任何重要内容。'
- en: The `:py:meth:` field is used for cross-referencing methods. Note that the method
    name should be bound by the back quotes (symbol `` ` ``).
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:py:meth:`字段用于交叉引用方法。请注意，方法名称应由反引号（符号`` ` ``）括起来。'
- en: Observe that we have not written any docstring for the `__init__` method. The
    guidelines suggest that you either write a docstring for the class or for its
    `__init__` method. For simplicity, let's follow the style just illustrated, where
    the docstring is written at the class level.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意我们没有为`__init__`方法编写任何文档字符串。指南建议您为类或其`__init__`方法编写文档字符串。为了简单起见，让我们遵循刚才展示的风格，即在类级别编写文档字符串。
- en: Tip
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When Sphinx generates the documentation, by default, it ignores the docstring
    for the `__init__` method. You can change this default behavior using the `autodoc-skip-member`
    event inside `conf.py`. For more information, check out [http://sphinx-doc.org/ext/autodoc.html#skipping-members](http://sphinx-doc.org/ext/autodoc.html#skipping-members).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Sphinx 生成文档时，默认情况下，它会忽略 `__init__` 方法的文档字符串。您可以使用 `conf.py` 中的 `autodoc-skip-member`
    事件来更改此默认行为。有关更多信息，请参阅 [http://sphinx-doc.org/ext/autodoc.html#skipping-members](http://sphinx-doc.org/ext/autodoc.html#skipping-members)。
- en: Sphinx-generated HTML documentation for the `Hut` class will appear as shown
    in the following screenshot. You will learn how to create such documentation shortly!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Sphinx 生成的 `Hut` 类的 HTML 文档将如图所示。您将很快学会如何创建这样的文档！
- en: '![Dosctrings using RST](img/B05034_04_10.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![使用 RST 的文档字符串](img/B05034_04_10.jpg)'
- en: What was just presented should serve as a basic example. There is a lot more
    that you can do with RST and Sphinx. The following table lists some of the most
    commonly used features (directives, information fields, and syntax) to write docstrings.
    Use these fields in the same way as illustrated in the preceding example. For
    comprehensive documentation, visit the Sphinx website ([http://sphinx-doc.org](http://sphinx-doc.org)).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 刚才展示的内容应作为一个基本示例。您可以使用 RST 和 Sphinx 做很多事情。下表列出了编写文档字符串时最常用的功能（指令、信息字段和语法）。请像前例中所示那样使用这些字段。要获取全面文档，请访问
    Sphinx 网站 ([http://sphinx-doc.org](http://sphinx-doc.org))。
- en: '| Information field or directive | Description |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 信息字段或指令 | 描述 |'
- en: '| --- | --- |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `:param` | Parameter description. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `:param` | 参数描述。|'
- en: '| `:arg` | Used to describe input arguments. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `:arg` | 用于描述输入参数。|'
- en: '| `:key` | Keyword description. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `:key` | 关键字描述。|'
- en: '| `:type` | Type of the parameter or argument, for example, `int`, `string`,
    and so on. You can also use the alternate syntax, for example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '| `:type` | 参数或参数的类型，例如，`int`，`string` 等。您也可以使用替代语法，例如：'
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `:ivar` or `:var` | Any variable description. Generally used for instance
    variables. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `:ivar` 或 `:var` | 任何变量描述。通常用于实例变量。|'
- en: '| `:vartype` | Variable type description. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `:vartype` | 变量类型描述。|'
- en: '|'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`:py:meth:`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:py:meth:`'
- en: '`:py:func:`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:py:func:`'
- en: '`:py:class:`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:py:class:`'
- en: '`:py:attr:`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:py:attr:`'
- en: '| Syntax to cross-reference a Python method, function, class, or attribute
    receptively. For example, `` :py:meth:`MyClassA.method_a` `` will be shown as
    `MyClassA.method_a()`. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 用于交叉引用 Python 方法、函数、类或属性的语法。例如，`` :py:meth:`MyClassA.method_a` `` 将显示为 `MyClassA.method_a()`。|'
- en: '| `.. code::` | Any code samples can be included here. The section under this
    directive is processed as a code block by the Sphinx document generator. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `.. code::` | 可以在此处包含任何代码示例。此指令下的部分将由 Sphinx 文档生成器作为代码块处理。|'
- en: '| `.. todo::` | Use this directive to list the TODO items. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `.. todo::` | 使用此指令列出 TODO 项。|'
- en: '| `.. note::` | Document anything worthy of mentioning using the notes directive.
    |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `.. note::` | 使用笔记指令记录任何值得注意的内容。|'
- en: '| `.. warning::` | Directive to write warnings in the docstring. The warning
    block will be generally rendered with a light red background. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `.. warning::` | 用于在文档字符串中写入警告的指令。警告块通常以浅红色背景显示。|'
- en: '| `.. seealso::` | Use this directive to reference anything (a method, a function,
    and so on) related to the code for which you are writing the docstring. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `.. seealso::` | 使用此指令引用与您正在编写的文档字符串相关的代码（方法、函数等）。|'
- en: Docstring formatting styles
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档字符串格式化样式
- en: In this chapter, we will only use the default RST format to write the docstrings.
    Various projects follow their own convention to write docstrings. Many of these
    styles are compatible with the Sphinx document generator.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将仅使用默认的 RST 格式来编写文档字符串。各种项目遵循自己的约定来编写文档字符串。许多这些样式与 Sphinx 文档生成器兼容。
- en: 'The *Google Python Style Guide* ([https://google.github.io/styleguide/pyguide.html](https://google.github.io/styleguide/pyguide.html))
    will be briefly discussed here. This style is widely used because of the simplicity
    it offers. It will become obvious when you see the following code screenshot.
    It is the same docstring we wrote for the `Hut` class, rewritten using the *Google
    Python Style Guide*:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里将简要讨论 *Google Python 风格指南* ([https://google.github.io/styleguide/pyguide.html](https://google.github.io/styleguide/pyguide.html))。这种风格因其简洁性而被广泛使用。您将在下面的代码截图中看到这一点。这是我们为
    `Hut` 类编写的相同文档字符串，使用 *Google Python 风格指南* 重新编写：
- en: '![Docstring formatting styles](img/B05034_04_11.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![文档字符串格式化样式](img/B05034_04_11.jpg)'
- en: For this to work with Sphinx, you need to install **napoleon**, an extension
    for Sphinx. It is essentially a pre-processor that parses and converts the Google
    style docstrings into the RST format. Check out [https://pypi.python.org/pypi/sphinxcontrib-napoleon/](https://pypi.python.org/pypi/sphinxcontrib-napoleon/)
    for installation instructions for napoleon. Examples on the Google Python documentation
    style can be found on the napoleon documentation page, [http://sphinxcontrib-napoleon.readthedocs.org](http://sphinxcontrib-napoleon.readthedocs.org).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与Sphinx一起使用，您需要安装**napoleon**，这是Sphinx的一个扩展。它本质上是一个预处理器，可以将Google风格的文档字符串解析并转换为RST格式。有关napoleon的安装说明，请查看[https://pypi.python.org/pypi/sphinxcontrib-napoleon/](https://pypi.python.org/pypi/sphinxcontrib-napoleon/)。有关Google
    Python文档风格的示例，可以在napoleon文档页面上找到，[http://sphinxcontrib-napoleon.readthedocs.org](http://sphinxcontrib-napoleon.readthedocs.org)。
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The **Numpy** style of documentation is another popular style used within the
    Python community. It is also supported by the napoleon extension. Check out [http://sphinxcontrib-napoleon.readthedocs.org](http://sphinxcontrib-napoleon.readthedocs.org)
    for further details.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**Numpy**风格的文档是Python社区中另一种流行的风格。它也由napoleon扩展支持。有关更多详细信息，请查看[http://sphinxcontrib-napoleon.readthedocs.org](http://sphinxcontrib-napoleon.readthedocs.org)。'
- en: Automatically creating docstring stubs
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动创建文档字符串占位符
- en: This is bit of an advanced topic, mainly because it needs some background in
    using command-line tools such as **patch**.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相对高级的话题，主要是因为它需要一些使用命令行工具（如**patch**）的背景知识。
- en: In many situations, you do not even have the basic docstrings written for the
    functions, methods, and classes. Or, you might be following a Google docstring
    style but now you would like to switch to a different one, say a basic RST style.
    The open source tool **pyment** is meant for such scenarios. It can be used to
    create or update docstrings and also to convert between some common formatting
    styles, such as RST, Google docstring, and **numpydoc**.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，您甚至没有为函数、方法和类编写基本的文档字符串。或者，您可能正在遵循Google文档字符串风格，但现在您想切换到不同的风格，比如基本的RST风格。开源工具**pyment**就是为了这样的场景而设计的。它可以用来创建或更新文档字符串，也可以在RST、Google文档字符串和**numpydoc**等一些常见格式化风格之间进行转换。
- en: Tip
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Read it again…the tool's name is "pyment" and not "payment" (not to be confused
    with the Python package `Pygment`). This tool is available on GitHub ([https://github.com/dadadel/pyment](https://github.com/dadadel/pyment)).
    It was not available on the PyPi website at the time this chapter was written.
    So you might not be able to install it using the pip `$pip install pyment` command.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 再读一遍……工具的名称是"pyment"，而不是"payment"（不要与Python包`Pygment`混淆）。此工具可在GitHub上找到（[https://github.com/dadadel/pyment](https://github.com/dadadel/pyment)）。在撰写本章时，它不在PyPi网站上提供。因此，您可能无法使用`pip
    install pyment`命令安装它。
- en: 'As pyment is not available using pip, the installation instructions are different.
    Follow the install instructions on the GitHub project homepage ([https://github.com/dadadel/pyment](https://github.com/dadadel/pyment)).
    The alternative install instructions, which do not require the use of Git, are
    provided here:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于pyment无法使用pip安装，安装说明不同。请遵循GitHub项目主页上的安装说明（[https://github.com/dadadel/pyment](https://github.com/dadadel/pyment)）。这里提供了不使用Git的替代安装说明：
- en: Download the ZIP archive of pyment from the project homepage.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目主页下载pyment的ZIP存档。
- en: Extract this ZIP file to some folder, for example, `pyment-master`.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此ZIP文件解压到某个文件夹中，例如，`pyment-master`。
- en: 'Open the command prompt and execute the following commands:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符并执行以下命令：
- en: '[PRE10]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The last command should install pyment in the same directory where you have
    the Python executable. Depending on where your Python is installed, you may need
    to execute the preceding command as an administrator. After the installation,
    run this tool from the command line as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一条命令应该在包含Python可执行文件的同一目录下安装pyment。根据Python的安装位置，您可能需要以管理员身份执行前面的命令。安装完成后，按照以下方式从命令行运行此工具：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This generates a patch file called `hut.py.patch` where the basic docstring
    stubs are written.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个名为`hut.py.patch`的补丁文件，其中包含基本的文档字符串占位符。
- en: Tip
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Here, it is important to note that pyment will only create a basic docstring
    stub. It is our responsibility to fill in the blanks. Put another way, we should
    further improve these docstrings by writing the appropriate summary of the function
    or method—a one-liner on what each input argument (if any) does and so on.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，重要的是要注意，pyment 只会创建基本的文档字符串占位符。填写空白是我们的责任。换句话说，我们应该通过编写适当的函数或方法的总结来进一步改进这些文档字符串——关于每个输入参数（如果有的话）做了什么等的简短一行。
- en: 'Next, you are expected to merge this patch with the main file, `hut.py`. On
    Linux, use the following `patch` command (check out [https://en.wikipedia.org/wiki/Patch_(Unix)](https://en.wikipedia.org/wiki/Patch_(Unix))
    for more details) to merge the generated docstrings with the main file:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你预计要将这个补丁与主文件 `hut.py` 合并。在 Linux 上，使用以下 `patch` 命令（查看 [https://en.wikipedia.org/wiki/Patch_(Unix)](https://en.wikipedia.org/wiki/Patch_(Unix))
    获取更多详细信息) 将生成的文档字符串与主文件合并：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Windows users**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows 用户**'
- en: 'The `patch` command described here is a Unix command. On Windows, patching
    a file might not be straightforward. Here are a few options that can be used to
    apply a patch:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这里描述的 `patch` 命令是一个 Unix 命令。在 Windows 上，修补文件可能不是那么直接。以下是一些可以用来应用补丁的选项：
- en: '**Gnu utilities for win32**: This will also install a bunch of other utility
    tools commonly seen on the Unix platform. Use the `patch.exe` executable to apply
    patches. You can check out these utilities at ([http://unxutils.sourceforge.net](http://unxutils.sourceforge.net)).'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gnu utilities for win32**：这将还会安装一些在 Unix 平台上常见的其他实用工具。使用 `patch.exe` 可执行文件来应用补丁。你可以在
    [http://unxutils.sourceforge.net](http://unxutils.sourceforge.net) 查看这些工具。'
- en: '**python-patch**: Check out this cross-platform Python utility at [https://github.com/techtonik/python-patch](https://github.com/techtonik/python-patch).'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**python-patch**：查看这个跨平台的 Python 工具 [https://github.com/techtonik/python-patch](https://github.com/techtonik/python-patch)。'
- en: '**TortoiseMerge**: It is a GUI tool used to apply patches ([https://tortoisesvn.net/docs/release/TortoiseMerge_en/tmerge-dug.html](https://tortoisesvn.net/docs/release/TortoiseMerge_en/tmerge-dug.html)).'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TortoiseMerge**：这是一个用于应用补丁的 GUI 工具 ([https://tortoisesvn.net/docs/release/TortoiseMerge_en/tmerge-dug.html](https://tortoisesvn.net/docs/release/TortoiseMerge_en/tmerge-dug.html))。'
- en: With this, the `hut.py` module should show the basic docstring stubs. We have
    developed a basic understanding on creating docstrings. Let's take the documentation
    to the next level using Sphinx.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，`hut.py` 模块应该会显示基本的文档字符串占位符。我们已经对创建文档字符串有了基本理解。让我们使用 Sphinx 将文档提升到下一个层次。
- en: Generating documentation with Sphinx
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Sphinx 生成文档
- en: Sphinx is the *de facto* standard document generation tool for Python. Do not
    confuse it with a docstring. A docstring is something you write to summarize the
    behavior of an object. For example, a class docstring typically lists instance
    variables and public methods depending on your project's documentation guideline.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Sphinx 是 Python 的**事实标准**文档生成工具。不要将其与文档字符串混淆。文档字符串是你用来总结对象行为的内容。例如，类的文档字符串通常根据你的项目文档指南列出实例变量和公共方法。
- en: Sphinx uses such docstrings, or any RST file, to create nice-looking documentation.
    It can generate documentation in various output formats, such as HTML, PDF, and
    so on. Let's follow a step-by-step approach to generate API documentation in HTML
    format with Sphinx.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Sphinx 使用这样的文档字符串或任何 RST 文件来创建看起来很棒的文档。它可以生成各种输出格式的文档，如 HTML、PDF 等。让我们一步一步地使用
    Sphinx 生成 HTML 格式的 API 文档。
- en: Step 1 – Installing Sphinx using pip
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 1 步 – 使用 pip 安装 Sphinx
- en: 'Sphinx can be installed using pip, as shown in the following command line:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Sphinx 可以使用 pip 安装，如下所示命令行：
- en: '[PRE13]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: pip is the package manager used to install Python packages. Refer to [Chapter
    1](ch01.html "Chapter 1. Developing Simple Applications"), *Developing Simple
    Applications* for more information on pip.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: pip 是用于安装 Python 包的包管理器。有关 pip 的更多信息，请参阅 [第 1 章](ch01.html "第 1 章。开发简单应用程序")，*开发简单应用程序*。
- en: This creates four executable scripts, `sphinx-autogen`, `sphinx-apidoc`, `sphinx-build`,
    and `sphinx-quickstart`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这会创建四个可执行脚本，`sphinx-autogen`、`sphinx-apidoc`、`sphinx-build` 和 `sphinx-quickstart`。
- en: Tip
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: On Linux, these executable are placed at the same location as your Python executable.
    For instance, if Python is available as `/usr/bin/python`, Sphinx executables
    can be accessed from the same location. On Windows OS, the Sphinx executables
    are put in the `Scripts` directory. It is the same directory where you have `pip.exe`.
    Refer to [Chapter 1](ch01.html "Chapter 1. Developing Simple Applications"), *Developing
    Simple Applications* for further details.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，这些可执行文件放置在与你的 Python 可执行文件相同的位置。例如，如果 Python 可用为 `/usr/bin/python`，则
    Sphinx 可执行文件可以从相同的位置访问。在 Windows OS 上，Sphinx 可执行文件放在 `Scripts` 目录中。这是你放置 `pip.exe`
    的同一目录。有关更多详细信息，请参阅[第 1 章](ch01.html "第 1 章。开发简单应用程序")*开发简单应用程序*。
- en: 'For syntax highlighting the code, Sphinx uses a tool called **Pygments** ([http://pygments.org](http://pygments.org)).
    Install this package using pip, if it is not already provided in your Python distribution:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了代码的语法高亮显示，Sphinx 使用一个名为 **Pygments** 的工具([http://pygments.org](http://pygments.org))。如果它尚未包含在你的
    Python 发行版中，请使用 pip 安装此包：
- en: '[PRE14]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Step 2 – cd to the source directory
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2 – 切换到源目录
- en: 'In [Chapter 3](ch03.html "Chapter 3. Modularize, Package, Deploy!"), *Modularize,
    Package, Deploy*, we created a Python package by the name of `wargame`, containing
    all the modules. Open a terminal window and `cd` to this directory. The directory
    contents are shown in the following screenshot of the terminal window:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 3 章](ch03.html "第 3 章。模块化、打包、部署！")*模块化、打包、部署*中，我们创建了一个名为 `wargame` 的 Python
    包，其中包含所有模块。打开一个终端窗口并 `cd` 到此目录。目录内容如下所示：
- en: '![Step 2 – cd to the source directory](img/B05034_04_04.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 – 切换到源目录](img/B05034_04_04.jpg)'
- en: Step 3 – Running sphinx-quickstart
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3 – 运行 sphinx-quickstart
- en: 'As the name suggests, this script will get you started with Sphinx. It sets
    up a directory where the documentation files will be placed and also creates a
    default configuration file, `conf.py`. Run the following command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，此脚本将帮助你开始使用 Sphinx。它设置一个目录，文档文件将放置于此，并创建一个默认配置文件 `conf.py`。运行以下命令：
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When you run this tool, it will ask you several questions to complete the basic
    setup. Choose the default answers for most of the questions by pressing the *return*
    key on Mac or *Enter* key for other systems. We will customize the answers for
    a few questions, shown next. The first prompt asks for the directory to place
    the documentation in. We will create a new directory called `docs` for this purpose:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行此工具时，它将询问你几个问题以完成基本设置。在 Mac 上按 *return* 键或在其他系统上按 *Enter* 键选择大多数问题的默认答案。我们将为几个问题定制答案，如下所示。第一个提示要求输入放置文档的目录。我们将为此目的创建一个名为
    `docs` 的新目录：
- en: '[PRE16]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The last answer enables the `autodoc` extension of Sphinx. This extension will
    help us create the documentation from the docstrings created earlier. Leave the
    rest of the questions with the default answers. In the end, `sphinx-quickstart`
    prints the following summary information:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个答案启用了 Sphinx 的 `autodoc` 扩展。此扩展将帮助我们创建从之前创建的 docstrings 生成的文档。将其他问题保留为默认答案。最后，`sphinx-quickstart`
    打印以下摘要信息：
- en: '![Step 3 – Running sphinx-quickstart](img/B05034_04_05.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 – 运行 sphinx-quickstart](img/B05034_04_05.jpg)'
- en: 'The directory structure created by this script is shown in the next screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本创建的目录结构如下所示：
- en: '![Step 3 – Running sphinx-quickstart](img/B05034_04_06.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 – 运行 sphinx-quickstart](img/B05034_04_06.jpg)'
- en: The generated `Makefile` (Linux/Mac) and `make.bat` (Windows OS) will be used
    in the final section of this topic, *Step 6 – Building the documentation*. The
    `docs/source` directory is where we need to put all the RST files (or the documentation
    source files). By default, it creates an empty `index.rst` file. It also contains
    a file, `conf.py`, which will be discussed next.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 `Makefile`（Linux/Mac）和 `make.bat`（Windows OS）将在本主题的最后一部分使用，即*步骤 6 – 构建文档*。`docs/source`
    目录是我们需要放置所有 RST 文件（或文档源文件）的地方。默认情况下，它会创建一个空的 `index.rst` 文件。它还包含一个名为 `conf.py`
    的文件，接下来将对其进行讨论。
- en: Step 4 – Updating conf.py
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4 – 更新 conf.py
- en: 'The `sphinx-quickstart` script creates a build configuration file, `conf.py`.
    Here, it is located at `docs/source/conf.py`. This is the file where all the customization
    for Sphinx is defined. For example, you can specify which Sphinx extensions to
    use while generating the documentation. In the previous step, we enabled the `autodoc`
    extension to include the documentation from docstrings. It is represented in `conf.py`
    as:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`sphinx-quickstart` 脚本创建了一个构建配置文件，`conf.py`。这里，它位于 `docs/source/conf.py`。这是定义所有
    Sphinx 定制的文件。例如，你可以在生成文档时指定要使用的 Sphinx 扩展。在上一个步骤中，我们启用了 `autodoc` 扩展以包含来自 docstrings
    的文档。它在 `conf.py` 中的表示如下：'
- en: '[PRE17]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To take care of some warnings related to the `.. todo::` directive, add the
    following to the `extensions` list (you can also specify this during `sphinx-quickstart`):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理与 `.. todo::` 指令相关的某些警告，将以下内容添加到 `extensions` 列表中（你也可以在 `sphinx-quickstart`
    中指定此内容）：
- en: '[PRE18]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We just need to make a small change in this file. As our source code is not
    in the `docs` directory, we will need to add an appropriate path to avoid import
    errors while generating the documentation. Uncomment the following line of code.
    You should find this line immediately after the `import` statements:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要对这个文件进行一点小的修改。由于我们的源代码不在 `docs` 目录下，我们需要添加一个适当的路径，以避免在生成文档时出现导入错误。取消以下代码行的注释。你应该在这个
    `import` 语句之后立即找到这一行：
- en: '[PRE19]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You also need specify the full path to the directory containing the `wargame`
    package on your system. An example is shown in the following code:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要指定包含系统上 `wargame` 包的目录的完整路径。以下代码是一个示例：
- en: '[PRE20]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Step 5 – Running sphinx-apidoc
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 5 – 运行 sphinx-apidoc
- en: 'Now, it is time to create the documentation source files (RST files) using
    the `sphinx-apidoc` tool. This tool uses the `autodoc` extension to extract the
    documentation from the docstrings. The syntax is as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候使用 `sphinx-apidoc` 工具创建文档源文件（RST 文件）了。此工具使用 `autodoc` 扩展从 docstrings 中提取文档。其语法如下：
- en: '[PRE21]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the terminal window, run the following commands (make sure you are in the
    `docs` directory, using `cd`, before running the following command):'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端窗口中，运行以下命令（在运行以下命令之前，请确保你位于 `docs` 目录中，使用 `cd` 命令进入该目录）：
- en: '[PRE22]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `-o` argument specifies the output directory where the generated RST files
    will be placed. In this case, the output directory is the directory by the name
    of `source`. This is a counterintuitive name, but remember that the `source` directory
    is where we keep the documentation source files. In the next step, these files
    will be used to create the final output (such as HTML files). The second argument
    represents the directory path where we have the Python code. In this case, the
    directory path is specified relative to the current working directory. Alternatively,
    you can also specify the full path, for example:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`-o` 参数指定了生成的 RST 文件将被放置的输出目录。在这种情况下，输出目录是以 `source` 命名的目录。这个名字可能有点令人费解，但请记住，`source`
    目录是我们存放文档源文件的目录。在下一步中，这些文件将被用来创建最终的输出（例如 HTML 文件）。第二个参数代表包含 Python 代码的目录路径。在这种情况下，目录路径是相对于当前工作目录指定的。你也可以指定完整的路径，例如：'
- en: '[PRE23]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The command-line output after running this tool is shown next:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此工具后的命令行输出如下所示：
- en: '![Step 5 – Running sphinx-apidoc](img/B05034_04_07.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 – 运行 sphinx-apidoc](img/B05034_04_07.jpg)'
- en: Tip
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: As an exercise, review the auto-generated file, `source/wargame.rst`. It contains
    the `automodule` directive of the `autodoc` extension. For further details, refer
    to the Sphinx documentation ([http://sphinx-doc.org/ext/autodoc.html](http://sphinx-doc.org/ext/autodoc.html)).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一项练习，检查自动生成的文件 `source/wargame.rst`。它包含 `autodoc` 扩展的 `automodule` 指令。有关更多详细信息，请参阅
    Sphinx 文档 ([http://sphinx-doc.org/ext/autodoc.html](http://sphinx-doc.org/ext/autodoc.html))。
- en: Step 6 – Building the documentation
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 6 – 构建文档
- en: The previous step created all the raw material we will need to create nice-looking
    documentation! There are two ways to create HTML documentation. The first option
    makes use of the `sphinx-build` tool and the other option uses the `Makefile`
    we created earlier. Let's discuss these options next.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 上一步已经创建了所有我们需要创建美观文档的原始材料！创建 HTML 文档有两种方式。第一种方式是使用 `sphinx-build` 工具，另一种方式是使用我们之前创建的
    `Makefile`。接下来让我们讨论这些选项。
- en: Using sphinx-build
  id: totrans-184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 sphinx-build
- en: 'The `sphinx-build` tool makes it trivial to generate the final documentation.
    Run the following command while it is still in the `docs` directory:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `sphinx-build` 工具可以轻松地生成最终的文档。在仍然位于 `docs` 目录下时，运行以下命令：
- en: '[PRE24]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The first argument is the source directory where we have all the RST files,
    and the second argument is the directory where the final HTML documentation will
    be created. Open the `docs/build/index.html` file in a web browser and navigate
    through the links to view the documentation!
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是我们拥有所有 RST 文件的源目录，第二个参数是最终 HTML 文档将被创建的目录。在网页浏览器中打开 `docs/build/index.html`
    文件，通过链接导航以查看文档！
- en: '![Using sphinx-build](img/B05034_04_08.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![使用 sphinx-build](img/B05034_04_08.jpg)'
- en: Using Makefile
  id: totrans-189
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 Makefile
- en: 'An alternative to `sphinx-build` is to use the `Makefile` (or `make.bat`) created
    in *Step 3 – Running sphinx-quickstart*. On Linux, type the following commands
    (first move to the `docs/source` directory using `cd`):'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`sphinx-build` 的一个替代方案是使用在 *步骤 3 – 运行 sphinx-quickstart* 中创建的 `Makefile`（或
    `make.bat`）。在 Linux 上，输入以下命令（首先使用 `cd` 命令移动到 `docs/source` 目录）：'
- en: '[PRE25]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The last command creates HTML documentation in the `docs/build` directory.
    If you are using Windows OS, use `make.bat`, for example:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个命令在 `docs/build` 目录中创建 HTML 文档。如果你使用 Windows 操作系统，使用 `make.bat`，例如：
- en: '[PRE26]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now that you have learned how to write good documentation, let's proceed further
    and see what guidelines should you follow while writing your Python code.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何编写良好的文档，让我们进一步了解在编写 Python 代码时应遵循哪些指南。
- en: Python coding standards
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 编码标准
- en: Coding standards serve as guidelines to write good quality code. Complying with
    these standards can have a significant impact on code readability, and in general
    on the life of the code.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 编码标准作为编写高质量代码的指南。遵守这些标准可以对代码的可读性产生重大影响，并且在一般情况下对代码的生命周期产生影响。
- en: Tip
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**PEP 8 Style Guide for Python Code**'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python 代码的 PEP 8 风格指南**'
- en: The *PEP 8* convention provides a style guide for writing Python code. If you
    are working on a project that follows its own set of coding conventions, rather
    than enforcing the *PEP 8* standards, you should adhere to the project-specific
    conventions. What matters the most is consistency. For any new project, you are
    strongly recommended to use the *PEP 8* style guide. In this section, we will
    cover a bare minimum set of guidelines that you should be aware of. For a comprehensive
    overview, check out [https://www.python.org/dev/peps/pep-0008](https://www.python.org/dev/peps/pep-0008).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '*PEP 8* 规范为编写 Python 代码提供了一个风格指南。如果你在一个遵循自己编码规范的项目上工作，而不是强制执行 *PEP 8* 标准，你应该遵守项目特定的规范。最重要的是一致性。对于任何新的项目，强烈建议使用
    *PEP 8* 风格指南。在本节中，我们将介绍你应该了解的最基本的指南集合。对于全面的概述，请查看 [https://www.python.org/dev/peps/pep-0008](https://www.python.org/dev/peps/pep-0008)。'
- en: 'The following table lists some of the important guidelines documented in *PEP
    8* to write Python code:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了在 *PEP 8* 中记录的一些编写 Python 代码的重要指南：
- en: '| PEP 8 Style Guide For Python Code | Details |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| Python 代码的 PEP 8 风格指南 | 详情 |'
- en: '| --- | --- |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Use four spaces per indentation level | This can be set as a preference in
    most Python editors. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| 每个缩进级别使用四个空格 | 这可以在大多数 Python 编辑器中设置为偏好设置。 |'
- en: '| Use spaces instead of tabs for indenting | Mixed use of tabs and spaces is
    not allowed in Python 3\. Most editors have an option to convert tabs to spaces.
    |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| 使用空格而不是制表符进行缩进 | Python 3 中不允许混合使用制表符和空格。大多数编辑器都有一个选项将制表符转换为空格。 |'
- en: '| Limit maximum line length to 79 characters | This may vary across projects.
    Some projects follow a limit of 80 characters. The illustrations in this book
    use an 80-column limit. Most editors will give you an option to draw a line at
    a specified column that serves as a visual indication. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| 限制最大行长度为 79 个字符 | 这可能因项目而异。一些项目遵循 80 个字符的限制。本书中的插图使用 80 列限制。大多数编辑器都会提供一个选项，在指定的列处绘制一条线，作为视觉指示。
    |'
- en: '| Put all `import` statements at the top of the file | Don''t put `import`
    statements inside the class or function bodies. Bring those out and put them at
    the top. |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| 将所有 `import` 语句放在文件顶部 | 不要在类或函数体内放置 `import` 语句。将它们移出来并放在顶部。 |'
- en: '| One `import` statement per line | An exception to this guideline is that,
    if you are importing multiple objects from a single module, it is OK to use a
    single import for all. The following imports are acceptable:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '| 每行一个 `import` 语句 | 此指南的一个例外是，如果你从一个模块中导入多个对象，可以使用单个导入。以下导入是可以接受的：'
- en: '[PRE27]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '|'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Module names | Try to keep these short. They should be all lowercase. For
    example:`attackoftheorcs.py` |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| 模块名称 | 尽量保持简短。它们应该是全部小写。例如:`attackoftheorcs.py` |'
- en: '| Class names | Use **UpperCamelCase** with the first letter of every word
    capitalized. For example:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '| 类名 | 使用 **UpperCamelCase**，每个单词的首字母大写。例如：'
- en: '[PRE28]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '|'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Function and method names | These should be in all lowercase; use underscores
    if it improves readability. For example:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '| 函数和方法名称 | 应该全部小写；如果可以提高可读性，则使用下划线。例如：'
- en: '[PRE29]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Avoid the following style: `showGameMission` (**lowerCamelCase**). Use such
    names only if you are working on a project that uses this convention. This might
    surprise you if you are coming from a different programming background, such as
    C++. Using underscores in the method and function names is the Pythonic way. |'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 避免以下风格：`showGameMission`（**小驼峰式**）。仅在您正在从事使用此约定的项目时使用此类名称。如果您来自不同的编程背景，如C++，这可能会让您感到惊讶。在方法和函数名称中使用下划线是Python的方式。
    |
- en: '| Comparing with `None` | Always compare a variable against `None` like this:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '| 与`None`比较 | 总是像这样将变量与`None`进行比较：'
- en: '[PRE30]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Or like this:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 或者像这样：
- en: '[PRE31]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Never compare it like this:`if my_var == None` OR `my_var != None` |
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要像这样比较：`if my_var == None` 或 `my_var != None` |
- en: '| Exceptions:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '| 异常：'
- en: When catching an exception, specify the exception type instead of just using
    the bare `except` clause.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在捕获异常时，指定异常类型而不是仅使用裸`except`子句。
- en: Use the `Exception` class to derive exceptions instead of using the `BaseException`
    class.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Exception`类来派生异常，而不是使用`BaseException`类。
- en: Avoid writing a lot of code inside a single `try` clause; doing so makes it
    difficult to isolate the bugs.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免在单个`try`子句中编写大量代码；这样做会使隔离错误变得困难。
- en: '| Refer to [Chapter 2](ch02.html "Chapter 2. Dealing with Exceptions"), *Dealing
    with Exceptions*, which discusses some of these guidelines. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| 参考第2章[处理异常](ch02.html "第2章。处理异常")，讨论了这些指南的一些内容。 |'
- en: '| Public and non-public attributes:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '| 公共和非公共属性：'
- en: Non-public attributes should have a leading underscore.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非公共属性应该以一个前导下划线开头。
- en: When in doubt, make attributes non-public.
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当不确定时，将属性设置为非公共的。
- en: '| As discussed in[Chapter 1](ch01.html "Chapter 1. Developing Simple Applications"),
    *Developing Simple Applications*, Python does not enforce any rule to make non-public
    attributes inaccessible to the outside world. However, a good practice is to refrain
    from using non-public attributes outside the scope. If you are unsure whether
    it should be scoped as public or non-public, as a starter, make it non-public.
    Later, change it to a public attribute if necessary. Refer to [Chapter 5,](ch05.html
    "Chapter 5. Unit Testing and Refactoring") *Unit Testing and Refactoring*, where
    we discuss the testing strategies for a non-public method, `_occupy_huts`. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| 如第1章[开发简单应用程序](ch01.html "第1章。开发简单应用程序")中所述，Python不会强制执行任何规则来使非公共属性对外部世界不可访问。然而，一个好的做法是在作用域之外避免使用非公共属性。如果你不确定它应该被定义为公共还是非公共，作为一个起点，让它成为非公共的。以后，如果需要，可以将其更改为公共属性。请参考第5章[单元测试和重构](ch05.html
    "第5章。单元测试和重构")，其中我们讨论了非公共方法`_occupy_huts`的测试策略。 |'
- en: As mentioned earlier, this is just a representative sample of the comprehensive
    *PEP 8* guidelines. Read the *PEP 8* documentation for further details.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这只是一个全面*PEP 8*指南的代表性样本。请阅读*PEP 8*文档以获取更多详细信息。
- en: Code analysis – How well are we doing?
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码分析 – 我们做得怎么样？
- en: In this section, we will talk about tools that help to detect coding standard
    violations.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论帮助检测编码标准违规的工具。
- en: '![Code analysis – How well are we doing?](img/B05034_04_12.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![代码分析 – 我们做得怎么样？](img/B05034_04_12.jpg)'
- en: '| *Good to have you back, Sir Foo! You''ve been awfully quiet, hope you are
    following along. You* *have raised a valid concern. Developers might get overwhelmed
    while trying to adhere to so many guidelines. Initially, it could appear like
    a challenge but practice should make you perfect. That said, there is still a
    likelihood that you will forget a guideline. Luckily, there are tools available
    that not only detect coding standard violations, but also inspect the code for
    errors. Some tools also try to reformat the code to adhere to coding standards.
    Let''s learn that next.* |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| 欢迎回来，Sir Foo！你一直很安静，希望你在认真听讲。你* *提出了一个有效的担忧。开发者们在试图遵守这么多指南时可能会感到不知所措。最初，这可能看起来像是一个挑战，但练习应该会使你变得完美。话虽如此，你仍然有可能忘记一个指南。幸运的是，有一些工具不仅可以检测编码标准违规，还可以检查代码中的错误。一些工具还试图重新格式化代码以符合编码标准。让我们接下来学习这一点。*
    |'
- en: Code analysis using IDE
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用IDE进行代码分析
- en: 'Some popular Python **integrated development environments** (**IDEs**) were
    listed in [Chapter 1](ch01.html "Chapter 1. Developing Simple Applications"),
    *Developing Simple Applications*. Before looking at any of the inspection tools
    discussed next, start with your IDE. Many IDEs come well equipped with code inspection
    and reformatting tools. For example, PyCharm Community Edition has excellent support
    for code inspections. The following screenshot shows some options offered under
    the **Code** menu:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章. 开发简单应用程序") *开发简单应用程序*中列出了一些流行的Python **集成开发环境**（**IDE**）。在查看以下讨论的任何检查工具之前，请先从您的IDE开始。许多IDE都配备了代码检查和重排工具。例如，PyCharm
    Community Edition对代码检查提供了出色的支持。以下截图显示了**代码**菜单下提供的一些选项：
- en: '![Code analysis using IDE](img/B05034_04_13.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![使用IDE进行代码分析](img/B05034_04_13.jpg)'
- en: Using an IDE with a good code analysis tool has a major advantage. It can help
    you detect the problems as you write the code. The tool can continuously monitor
    the code for common coding violations and show a visual indication of the error
    or warning next to the code. Typically, this indication appears just how a spellchecker
    shows spelling mistakes in a word processor. These timely indications help immensely
    in addressing common coding mistakes right when they occur.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 使用具有良好代码分析工具的IDE具有主要优势。它可以帮助您在编写代码时检测问题。该工具可以持续监控代码以查找常见的编码违规，并在代码旁边显示错误或警告的视觉指示。通常，这种指示会像拼写检查器在文字处理器中显示拼写错误一样出现。这些及时的指示在解决常见编码错误时非常有帮助。
- en: Pylint
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pylint
- en: '**Pylint** is a tool that inspects the code for errors and also warns you about
    coding standard violations. It is integrated with several IDEs (check out [http://docs.pylint.org/ide-integration](http://docs.pylint.org/ide-integration)
    for a list of IDEs and editors where Pylint is either available or can be installed
    as a plugin). We will see how to use Pylint as a command-line tool. First, install
    it using pip—depending on your Python installation, you might need administrative
    access in order to install it:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pylint**是一个检查代码错误并警告您关于编码标准违规的工具。它与几个IDE集成（有关Pylint可用或可作为插件安装的IDE和编辑器的列表，请参阅[http://docs.pylint.org/ide-integration](http://docs.pylint.org/ide-integration)）。我们将看到如何将Pylint用作命令行工具。首先，使用pip安装它——根据您的Python安装，您可能需要管理员权限才能安装它：'
- en: '[PRE32]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This installs `pylint` (or `pylint.exe` on Windows) at the same location where
    you have Python executable. Now, you should be able to use this tool from the
    command line. On Linux, the syntax is as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您有Python可执行文件的位置安装`pylint`（或在Windows上的`pylint.exe`）。现在，您应该能够从命令行使用此工具。在Linux上，语法如下：
- en: '[PRE33]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Where `module_name.py` is the file you want to check for errors and coding style
    problems. When you run `pylint` from the command line, it prints a detailed report
    of the analysis. This report has information on coding style, warnings, errors,
    and refactoring needs. In the end, it rates your code on a scale out of 10.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`module_name.py`是您想要检查错误和编码风格问题的文件。当您从命令行运行`pylint`时，它会打印出详细的分析报告。此报告包含有关编码风格、警告、错误和重构需求的信息。最后，它根据10分制对您的代码进行评分。
- en: 'You can also customize the default settings to fit to your project needs. This
    is done using a configuration file. On Linux, run the following command in a terminal:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以自定义默认设置以适应项目需求。这是通过配置文件完成的。在Linux上，请在终端中运行以下命令：
- en: '[PRE34]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This creates a default template for your Pylint configuration and saves it in
    your `$HOME` directory (`~/.pylintrc`). Even on Windows OS, this file can be created
    in your user's home directory Alternatively, you can specify the `PYLINTRC` environment
    variable, which holds the complete path to the file.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的`$HOME`目录（`~/.pylintrc`）中创建一个默认的Pylint配置模板并保存。即使在Windows操作系统上，此文件也可以在您的用户主目录中创建。或者，您也可以指定`PYLINTRC`环境变量，它包含文件的完整路径。
- en: Pylint in action
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pylint的实际应用
- en: It is time for some action. Run the Pylint code analysis on the `wargame/hut.py`
    file. Recall that in an earlier section, *Dosctrings using RST*, we added a class-level
    docstring. That's pretty much the documentation we have for this file. Pylint
    will not like this so be prepared to get beaten up!
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候采取一些行动了。对`wargame/hut.py`文件运行Pylint代码分析。回想一下，在早期部分*使用RST的文档字符串*中，我们添加了一个类级别的文档字符串。这就是我们对这个文件的文档。Pylint可能不会喜欢这样，所以请准备好接受“打击”！
- en: '[PRE35]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The last command prints a detailed report on the command line. Let''s see what
    we have got. The following screenshot shows the final report—the code has been
    rated **5.00** out of **10** points:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个命令会在命令行上打印详细的报告。让我们看看我们得到了什么。以下截图显示了最终的报告——代码被评为 **5.00** 分，满分 **10** 分：
- en: '![Pylint in action](img/B05034_04_14.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![Pylint 在行动](img/B05034_04_14.jpg)'
- en: 'That''s pretty bad! Let''s look at where we can improve by reviewing the report
    Pylint has generated. In the report, it complains about an `import` error. Well,
    there is nothing wrong with the imports. Clearly, it is missing the Python directory
    `PATH`. This can be fixed by editing the `.pythonrc` file. Look for a commented
    line that reads `init-hook` (it should appear near the beginning of the file).
    Uncomment it and write the following code:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当糟糕！让我们通过审查 Pylint 生成的报告来找出我们可以改进的地方。在报告中，它抱怨一个 `import` 错误。嗯，导入没有问题。显然，缺少
    Python 目录 `PATH`。这可以通过编辑 `.pythonrc` 文件来修复。查找一个注释行，内容为 `init-hook`（它应该出现在文件的开头附近）。取消注释它并写入以下代码：
- en: '[PRE36]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Replace `/path/to/wargame` with the actual path on your system to the `wargame`
    directory. With this change, rerun Pylint on this file. The new evaluation is
    shown next:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `/path/to/wargame` 替换为系统上 `wargame` 目录的实际路径。进行此更改后，重新运行 Pylint 对此文件进行检查。新的评估结果如下：
- en: '![Pylint in action](img/B05034_04_15.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![Pylint 在行动](img/B05034_04_15.jpg)'
- en: Not bad! Just fixing the import error has already improved the score by **2.50**
    points. Let's review the generated report one more time. At the beginning of the
    report, Pylint lists all the issues present in the file. In this case, it complains
    about missing docstrings for the module and the methods of the class. The other
    thing it is not happy about is the `import` statement, `from __future__ import
    print_function`, as the first line of the module.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 还不错！仅仅修复导入错误就已经使分数提高了 **2.50** 分。让我们再次审查生成的报告。在报告的开头，Pylint 列出了文件中存在的所有问题。在这种情况下，它抱怨模块和类方法的文档字符串缺失。它不高兴的另一点是模块的第一行
    `import` 语句，即 `from __future__ import print_function`。
- en: Tip
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**PEP 236 convention**'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**PEP 236 规范**'
- en: Although the `__future__` `import` statement must appear as the first line,
    the exception to this rule is a module docstring. A module docstring can be written
    before writing a `__future__` `import` statement. Review the *PEP 236* convention
    ([https://www.python.org/dev/peps/pep-0236](https://www.python.org/dev/peps/pep-0236))
    for more information.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `__future__` `import` 语句必须作为第一行出现，但此规则的例外是模块文档字符串。模块文档字符串可以在写入 `__future__`
    `import` 语句之前编写。有关更多信息，请参阅 *PEP 236* 规范 ([https://www.python.org/dev/peps/pep-0236](https://www.python.org/dev/peps/pep-0236))。
- en: 'We can easily fix both these issues. A reworked module docstring along with
    the rearranged `__future__ import` statement is shown in the following code screenshot:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松修复这两个问题。以下代码截图显示了重新工作的模块文档字符串以及重新排列的 `__future__ import` 语句：
- en: '![Pylint in action](img/B05034_04_16.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![Pylint 在行动](img/B05034_04_16.jpg)'
- en: 'Let''s see how are we doing by running Pylint again after this change:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过再次运行 Pylint 来看看我们做得怎么样：
- en: '![Pylint in action](img/B05034_04_17.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![Pylint 在行动](img/B05034_04_17.jpg)'
- en: Yey! We have got full points for this module! Follow the similar process to
    improve the rest of the code. As an exercise, add the docstrings for the class
    methods. You can also download `wargame/hut.py` from the supplementary material
    for this chapter, which already has all the docstrings written.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 哈哈！我们在这个模块上得到了满分！按照类似的过程改进其余的代码。作为练习，为类方法添加文档字符串。你也可以从本章的补充材料中下载`wargame/hut.py`，其中已经写好了所有的文档字符串。
- en: PEP8 and AutoPEP8
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PEP8 和 AutoPEP8
- en: '**pep8** is another tool that inspects the code to check whether it confirms
    to the *PEP 8* coding style guide. It can be installed using pip as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '**PEP 8** 是另一个检查代码是否遵循 *PEP 8* 编码风格指南的工具。可以使用以下方式使用 pip 安装：'
- en: '[PRE37]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To know how to use pep8, visit the project page ([https://pypi.python.org/pypi/pep8](https://pypi.python.org/pypi/pep8)).
    There is another handy tool called **autopep8** that will automatically reformat
    the code to confirm to the style recommended by *PEP 8* guidelines. This tool
    can also be installed using pip:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何使用 pep8，请访问项目页面 ([https://pypi.python.org/pypi/pep8](https://pypi.python.org/pypi/pep8))。还有一个叫做
    **autopep8** 的实用工具，它会自动重新格式化代码，以符合 *PEP 8* 指南推荐的风格。此工具也可以使用 pip 安装：
- en: '[PRE38]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note that this tool requires pep8 to be installed. Check out [https://pypi.python.org/pypi/autopep8](https://pypi.python.org/pypi/autopep8)
    for more information and usage examples.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此工具需要安装 pep8。有关更多信息和使用示例，请参阅 [https://pypi.python.org/pypi/autopep8](https://pypi.python.org/pypi/autopep8)。
- en: Exercise
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'In this chapter, you learned how to document code, use Sphinx to generate documentation,
    and analyze the code using tools such as Pylint. Here is an exercise that covers
    these three aspects:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何编写代码文档，使用 Sphinx 生成文档，以及使用 Pylint 等工具分析代码。以下是一个涵盖这三个方面的练习：
- en: Download the code illustrated in [Chapter 3](ch03.html "Chapter 3. Modularize,
    Package, Deploy!"), *Modularize, Package, Deploy* (you can also use your own Python
    code instead).
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载 [第 3 章](ch03.html "第 3 章。模块化、打包、部署！") 中展示的代码，*模块化、打包、部署*（你也可以使用你自己的 Python
    代码代替）。
- en: Write docstrings for this code (be sure to write docstrings at module, class,
    and method/function levels). You can use the default RST format to write the docstring
    or choose the *Google Python Style Guide*.
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为此代码编写文档字符串（确保在模块、类和方法/函数级别编写文档字符串）。你可以使用默认的 RST 格式来编写文档字符串，或者选择 *Google Python
    风格指南*。
- en: Generate an HTML documentation using Sphinx.
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Sphinx 生成 HTML 文档。
- en: Run code analysis, using Pylint or any other tool, to fix coding errors and
    style problems.
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行代码分析，使用 Pylint 或任何其他工具，以修复编码错误和风格问题。
- en: The supporting code for this chapter is already documented to an extent. You
    can use this code as a reference and also try to improve the existing documentation
    further.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的支持代码已经达到一定程度的文档化。你可以使用此代码作为参考，并尝试进一步改进现有的文档。
- en: Summary
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You learned how to document the code using the RST format. The chapter introduced
    the Sphinx document generator that was used to create an HTML documentation for
    our application code. You also learned about some important Python coding standards
    that helped improve readability. Finally, we saw how to check our application
    code for errors and style violations using code analysis.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了如何使用 RST 格式编写代码文档。本章介绍了用于为我们的应用程序代码创建 HTML 文档的 Sphinx 文档生成器。你还了解了一些重要的 Python
    编码标准，这些标准有助于提高可读性。最后，我们看到了如何使用代码分析来检查我们的应用程序代码中的错误和风格违规。
- en: In an ideal world, you wish your code fully confirms to the coding convention.
    Often, that is not the case for various reasons, ranging from new team members
    to tight project deadlines. Sometimes, to make it compliant with the coding standards,
    you will need to refactor it at a later stage. While doing so, you will also need
    to make sure no functionality gets broken. This is accomplished by writing unit
    tests. We will study these inter-related aspects in the next chapter.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想的世界里，你希望你的代码完全符合编码规范。然而，由于各种原因，从新团队成员到紧张的项目截止日期，这通常并不成立。有时，为了使其符合编码标准，你需要在稍后的阶段重构它。在此过程中，你还需要确保没有功能被破坏。这是通过编写单元测试来实现的。我们将在下一章研究这些相互关联的方面。
