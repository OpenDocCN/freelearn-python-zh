- en: Making a Gardener Robot
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作一个园艺机器人
- en: All right my friends, you have understood some of the basics of input and output;
    now it's the time to make something to which we can hand over some of our daily
    responsibilities. This robot might not really look like a robot, but trust me,
    it will make your life easier. Most of all the plants in your garden will be blessing
    you for making it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好朋友们，你们已经理解了一些输入和输出的基础知识；现在是我们动手做一些可以移交我们日常责任的事情的时候了。这个机器人可能看起来并不像机器人，但请相信我，它会让你生活得更轻松。最重要的是，你花园里的植物会因为它的存在而感激你。
- en: 'We will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Working with solenoids
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与电磁铁一起工作
- en: Making the robot
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作机器人
- en: Making it more intelligent
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使其更加智能化
- en: Making it truly intelligent
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使其真正智能化
- en: Working with solenoids
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与电磁铁一起工作
- en: What we are going to make is an automation system that will water your plants
    whenever they need it. So technically, once it is set up, you don't really have
    to worry ever about watering your green creatures. Whether you are at your home,
    at the office, or on a vacation, this will keep doing its job no matter what.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要制作的是一个自动化系统，它将在植物需要时自动浇水。所以从技术上讲，一旦设置好，你就不必再担心给你的绿色生物浇水了。无论你是在家、在办公室还是度假，它都会继续完成它的任务。
- en: 'Now, you must be wondering how it will water the plants, so let me tell you,
    for every problem in this world, there exists a solution. In our case, that solution
    is called a solenoid valve. What it essentially does is switch the flow of liquids.
    There are various solenoid valves available in the market; some of the identifying
    features are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能想知道它是如何浇水的，让我告诉你，在这个世界上，每个问题都有一个解决方案。在我们的案例中，这个解决方案就是电磁阀。它本质上做的是切换液体的流动。市场上有很多种电磁阀；以下是一些识别特征：
- en: '**Size**: They come in various sizes such as half an inch, three quarters of
    an inch, 1 inch, and so on. This basically will determine the flow rate of the
    solenoid valve.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尺寸**：它们有各种尺寸，如半英寸、3/4英寸、1英寸等。这基本上将决定电磁阀的流量。'
- en: '**Medium**: Whether it is meant for fluid, gas, vapor, and so on.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**介质**：无论是用于流体、气体、蒸汽等。'
- en: '**Normal condition**:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正常状态**：'
- en: '**Normally opened**: This valve will allow the flow of liquids in the off state—when
    no power is supplied to the valve'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常开状态**：此阀门在关闭状态下允许液体流动——当没有电源供应到阀门时'
- en: '**Normally closed**: This valve will stop the flow of liquids in the off state—when
    no power is supplied to the valve'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常闭状态**：此阀门在关闭状态下阻止液体流动——当没有电源供应到阀门时'
- en: '**Number of ways**: A simple valve will have an inlet and an outlet. So, when
    it is open, it will allow the liquid to flow from the inlet to the outlet. However,
    there can be other types of valve such as a three-way valve which might have two
    outlets and one inlet. It would regulate where the flow of the liquid would happen.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方式数量**：一个简单的阀门将有一个进口和一个出口。所以当它打开时，它将允许液体从进口流向出口。然而，可能还有其他类型的阀门，如三通阀，可能有两个出口和一个进口。它将调节液体的流动方向。'
- en: There can be some more specifics in terms of the valves as well, but for now
    that's all we need to know. One thing to notice about the solenoid valve is that
    these valves can either be opened or closed. Achieving any state in between or
    controlling flow via these valves is not possible. For this we can use a servo
    valve or motor valve. But as of now, we don't need it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 关于阀门，还有一些更具体的信息，但就目前而言，我们只需要知道这些。关于电磁阀需要注意的一点是，这些阀门可以是开启的或关闭的。通过这些阀门实现任何中间状态或控制流量是不可能的。为此，我们可以使用伺服阀或电机阀。但到目前为止，我们不需要它。
- en: What we will be using in this chapter is a half inch valve for water/fluid,
    which is normally closed. When you look closely at this valve you will see that
    it operates at 12 volts and the current consumption is close to 1 amp. This is
    a lot of current for Raspberry Pi. The upper limit of current that Raspberry Pi
    can provide per pin is about 50 milliamp. So if we connect this valve to Raspberry
    Pi then it's surely not going to work.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们将使用一个半英寸的水/流体阀门，它处于常闭状态。当你仔细观察这个阀门时，你会看到它的工作电压为12伏，电流消耗接近1安培。这对于Raspberry
    Pi来说电流很大。Raspberry Pi每个引脚可以提供的电流上限约为50毫安。所以如果我们把这个阀门连接到Raspberry Pi上，那么它肯定不会工作。
- en: What do we do now? The answer to this question is a relay. The basic job of
    a relay is to re-lay the circuits. Basically, it's an electronically controlled
    switch. The basic job of a relay is to switch devices that have a higher current/voltage
    consumption than what can be given by a controlling unit on and off. This is a
    fairly simple device, as you can see in the diagram. There are two circuits. One
    is depicted in blue, which is a low voltage and low current circuit. This circuit
    is powering up a coil. The other circuit is depicted in red and black. This circuit
    is a high voltage, high current circuit.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在该做什么？这个问题的答案是继电器。继电器的基本作用是重新布线电路。基本上，它是一个电子控制的开关。继电器的基本作用是开关那些消耗电流/电压高于控制单元所能提供的设备。这是一个相当简单的设备，如你在图中所见。有两个电路。一个是蓝色的，代表低压和低电流电路。这个电路正在为线圈供电。另一个电路是红色和黑色的。这个电路是高压和高电流电路。
- en: 'In the initial stages, as you can see, the high voltage high current circuit
    is not complete and the oven will not work:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始阶段，如你所见，高压高电流电路是不完整的，烤箱将不会工作：
- en: '![](img/1e6f2d09-44b6-4c2e-ac23-dbb12b07c4be.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1e6f2d09-44b6-4c2e-ac23-dbb12b07c4be.png)'
- en: 'Now, in this second diagram, you can see that the blue circuit is connected
    to the 5V power source and that the coil is energized. Whenever a coil gets energized,
    it forms an electromagnet and attracts the metal leaf of the high power circuit
    to make the circuit complete, hence powering up the oven:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在这第二个图中，你可以看到蓝色电路连接到5伏电源，线圈被激活。每当线圈被激活时，它就会形成一个电磁铁，吸引高压电路的金属叶片，使电路完整，从而为烤箱供电：
- en: '![](img/77a0901e-d747-48fc-8c17-66fae48d452d.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/77a0901e-d747-48fc-8c17-66fae48d452d.png)'
- en: This is how a solenoid works. The consumption of the coil is hardly a few milliamps,
    hence it is very easy to actuate a coil via a micro-controller. This in turn makes
    a contact between the final circuit.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是电磁阀的工作原理。线圈的消耗几乎不到几毫安，因此通过微控制器很容易激活线圈。这反过来又会在最终电路中形成接触。
- en: 'There are various kinds of relays available on the market; some of the identifying
    features are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有多种类型的继电器可供选择；以下是一些识别特征：
- en: '**Max output voltage**: The maximum voltage that it can handle'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大输出电压**：它能处理的最大电压'
- en: '**Maximum output current**: The maximum current that it can bear for any output
    device connected to it'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大输出电流**：它能承受的最大电流，适用于连接到其上的任何输出设备'
- en: '**Signal voltage**: The voltage that it requires switch the components on or
    off'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信号电压**：它所需的电压以切换组件的开或关'
- en: '**Normal condition**:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正常状态**:'
- en: '**Normal off**: This will not allow any current to flow until the time the
    signal is not received'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正常关闭**：在没有接收到信号之前，它不会允许任何电流流动'
- en: '**Normal on**: It will allow the current to flow until the time the signal
    is not received'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正常开启**：它将允许电流流动，直到接收到信号为止'
- en: Now, coming back to our gardening robot, the solenoid attached to it will be
    working on 1 amp and 12V, so any relay which can supply equal to or more than
    1 amp and 12V would work.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到我们的园艺机器人，附在其上的电磁阀将在1安培和12伏的电压下工作，因此任何能够提供等于或超过1安培和12伏的继电器都可以使用。
- en: Commonly, the relays available on the market are 120V and 12 amp DC. One important
    thing to remember is that there will be two separate ratings for AC and DC voltage
    and current. As our solenoid will be working at 12V, we will only be considering
    the DC upper limit.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，市场上可用的继电器是120伏和12安培直流电。需要记住的一个重要事项是，对于交流和直流电压和电流将有两个不同的额定值。由于我们的电磁阀将在12伏下工作，我们只考虑直流上限。
- en: Making the robot
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作机器人
- en: 'Now, let''s get down to making the robot. Firstly, you need to make the water
    connection from the tap to the solenoid and from the solenoid to the sprinkler.
    You also have to make the connection, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始制作机器人。首先，你需要从水龙头连接到电磁阀，再从电磁阀连接到喷头。你还需要按照以下方式建立连接：
- en: '![](img/74d7c234-cb59-4298-8f3c-c83a270ebc2f.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/74d7c234-cb59-4298-8f3c-c83a270ebc2f.png)'
- en: 'Now let''s start programming. We will be interfacing a soil moisture sensor
    in this robot. The job of this sensor is to determine the amount of water in the
    soil. By determining this, we can understand if the garden needs water or not.
    This soil moisture sensor is an analogue sensor, hence we will be using an ADC
    to convert the analogue reading to Pi-understandable digital values. So let''s
    get going:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始编程。在这个机器人中，我们将连接一个土壤湿度传感器。这个传感器的任务是确定土壤中的水分量。通过确定这一点，我们可以了解花园是否需要浇水。这个土壤湿度传感器是一个模拟传感器，因此我们将使用ADC将模拟读数转换为Pi可理解的数字值。那么，让我们开始吧：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Before you run this code, let''s understand what it is actually doing:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在你运行此代码之前，让我们先了解一下它实际上在做什么：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`moisture_percentage = 20` is the percentage that will act as a threshold;
    if the moisture level in the soil becomes less than 20% then your garden needs
    water. It is this condition that your robot will keep looking for; once this condition
    is met then appropriate action can be taken. This percentage can also be changed
    to `30`, `40`, or any other value as per your garden''s needs:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`moisture_percentage = 20` 是作为阈值的百分比；如果土壤中的水分低于20%，那么你的花园就需要浇水。机器人会持续寻找这个条件；一旦这个条件满足，就可以采取适当的行动。这个百分比也可以根据你花园的需要改为
    `30`、`40` 或其他任何值：'
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The ADC is a 16-bit device—there are 16 binary digits that can represent a
    value. Hence, the value can be between `0` and `2^(15)` or, in other words, between
    `0` and `32768`. Now, it is simple math that for every percentage of moisture
    the ADC will give the following reading: `32768/100`, or `327.68`. Hence, to find
    out the percentage of moisture in the soil, we would have to divide the actual
    value given by the ADC by `327.68`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: ADC 是一个16位设备——有16个二进制位可以表示一个值。因此，值可以在 `0` 和 `2^(15)` 之间，换句话说，在 `0` 和 `32768`
    之间。现在，这是一个简单的数学问题，对于每个水分百分比，ADC 会给出以下读数：`32768/100`，或者说 `327.68`。因此，为了找出土壤中的水分百分比，我们需要将ADC给出的实际值除以
    `327.68`。
- en: The rest of the code is fairly simple and, once you go through it, it won't
    be very hard for you to understand.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的代码相当简单，一旦你通过了它，理解起来就不会太难。
- en: Making it more intelligent
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使其更加智能
- en: Congratulations on making your first robot! But did you notice one problem?
    The robot we made was continuously looking for a moisture value and, as soon as
    it noticed that the moisture value was low, it suddenly pumped water and made
    sure that the humidity of the soil was always more than 20%. However, this is
    not required. In general, we water the garden once or twice a day. If we water
    it more then it might not be good for the plants.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你制作了你的第一个机器人！但你注意到一个问题吗？我们制作的机器人持续寻找水分值，一旦它注意到水分值低，就突然浇水，确保土壤的湿度总是超过20%。然而，这并不是必要的。一般来说，我们每天给花园浇水一两次。如果我们浇得太多，可能对植物不利。
- en: So, let's go ahead and make it slightly more intelligent and make it water the
    plants only when the moisture level is low at a certain time. This time, we won't
    need to make any changes to the hardware; we simply need to tweak the code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们继续前进，让它变得更加智能，只在特定时间水分低时给植物浇水。这次，我们不需要对硬件做任何修改；我们只需要调整代码。
- en: 'Let''s go ahead and upload the following code, and then see what exactly happens:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续上传以下代码，然后看看究竟发生了什么：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This code might look a little alien to you, but trust me, it is as simple as
    it can get. Let''s see what''s happening step by step:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码可能看起来有点陌生，但请相信我，它尽可能简单。让我们一步一步地看看发生了什么：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This line of code is importing daytime instances from the date time library.
    This is a library which is by default in Python. All we need to do is to call
    it. Now, what it does is that without any hustle and bustle, it helps us determine
    the time within our code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码是从日期时间库中导入白天实例。这是一个默认在Python中存在的库。我们只需要调用它。现在，它所做的是，无需任何繁琐，帮助我们确定代码中的时间：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are several times when we have to do something over and over again. These
    sets of code can be a few repetitive lines or multiple pages of code. Hence, rewriting
    that code doesn't make sense at all. We can create a function. In this function,
    we can define what will happen whenever it is called. Here in this line, we have
    created a function by the name of `check_moisture()`; now, whenever this function
    is called within a program, there will be a set of activities that will be performed.
    The set of activities that will be performed is defined by the user. So, whenever
    we write `def`, then it means that we are defining a function; thereafter, we
    write the name of the function that needs to be defined.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有几次我们不得不一遍又一遍地做同样的事情。这些代码集可能只是一些重复的行，也可能是多页的代码。因此，重写这些代码完全没有意义。我们可以创建一个函数。在这个函数中，我们可以定义每次调用它时会发生什么。在这里的这一行，我们创建了一个名为`check_moisture()`的函数；现在，每当这个函数在程序中被调用时，将执行一系列活动。要执行的活动集由用户定义。所以，每当我们写`def`时，这意味着我们正在定义一个函数；之后，我们写需要定义的函数的名称。
- en: 'Once done, then whatever we write in the indentation following it will be done
    once the function is called. Do remember that whenever we call or define a function,
    it is denoted by an open and a closed `()` bracket at the end of the name of the
    function:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，那么在它之后的缩进中写下的任何内容都将在函数被调用时执行。一定要记住，每当我们调用或定义一个函数时，它都由函数名称末尾的开放和闭合括号`()`表示：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`adc.get_last_result()` is a function of `adc`. The activity it does is to
    simply take the result from the pin defined earlier (pin number `0`) and fetch
    the reading to a variable `moisture_value`. So, after the line `moisture_value`
    will be the reading of the pin number `0` of the ADC or, in other words, the reading
    of the moisture sensor:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`adc.get_last_result()`是`adc`的一个函数。它的活动就是简单地从之前定义的引脚（引脚号`0`）获取结果并将其读取到变量`moisture_value`中。所以，在`moisture_value`这一行之后，将是ADC引脚号`0`的读取值，换句话说，就是湿度传感器的读取值：'
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The code `datetime` is an instance and a method of `.now()`. What this function
    does is that it updates the time. Now, the `date time.now()` has updated all the
    parameters of date and time which includes the hours, minutes, seconds, and even
    the date. It is up to us whether we want all of it or any specific part of the
    date and time. At present, we want to put the value of hours in the variable `H`,
    hence we are using a `.strftime(''%H'')` method. `strftime` stands for string
    format of time. So whatever value it outputs is in string format. `(''%H'') `
    means that it will give us the value of the hours only. Similarly, we can also
    get the time in minutes by using `(''%M'')` and `(''%S)`. We can also get the
    value of the date, month, and year with the following syntax:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime`代码是一个实例和`.now()`方法的一部分。这个函数所做的就是更新时间。现在，`datetime.now()`已经更新了日期和时间的所有参数，包括小时、分钟、秒，甚至日期。是否要全部或任何特定部分的日期和时间取决于我们。目前，我们想要将小时值放入变量`H`中，因此我们使用了`.strftime(''%H'')`方法。`strftime`代表时间字符串格式。所以它输出的任何值都是字符串格式。`(''%H'')`意味着它只会给我们小时值。同样，我们也可以使用`(''%M'')`和`(''%S'')`来获取分钟和秒的时间。我们还可以使用以下语法获取日期、月份和年份的值：'
- en: For getting the date:  `('%d')`
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取日期：`('%d')`
- en: For getting the month: `('%m')`
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取月份：`('%m')`
- en: For getting the year:  `('%Y')`
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取年份：`('%Y')`
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding condition, we are checking if the time is 7 o'clock or not;
    further, we are also checking if the time is less than or equal to 10 minutes
    or not. So this piece of code will only run the statement in the `if` statement
    when the time is `7` hours and between `0` and `10` minutes.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的条件中，我们正在检查时间是否是7点钟；进一步，我们还在检查时间是否小于或等于10分钟。因此，这段代码只有在时间是`7`小时且在`0`到`10`分钟之间时，才会运行`if`语句中的语句。
- en: One thing to particularly note is that we have used an `and` between both the
    conditions, hence it will only run the code inside it once both the statements
    are absolutely true. There are some other statements we can use inside it, as
    well, such as `or`, in which case it will run the code if either of the statements
    is true.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 特别要注意的一点是，我们在两个条件之间使用了`and`，因此只有当两个语句都绝对为真时，它才会运行其中的代码。我们还可以在它里面使用一些其他语句，例如`or`，在这种情况下，如果任一语句为真，它就会运行代码。
- en: 'If we replace `and` with `or` in this `if` statement, then it will run the
    code for every 0 to 10 minutes of every hour and will run the code continuously
    for the entire time between 7:00 a.m. and 7:59 a.m.:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在这个`if`语句中将`and`替换为`or`，那么它将每小时从0到10分钟运行代码，并且在整个7:00 a.m.到7:59 a.m.的时间段内连续运行代码：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you may remember, previously we defined a function by the name of `check_moisture()`.
    While defining that function, we had also defined the set of activities that would
    happen every time this function is called.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所记，我们之前定义了一个名为`check_moisture()`的函数。在定义该函数时，我们还定义了每次调用此函数时都会发生的一系列活动。
- en: Now is the time to call that function. As soon as the program reaches this end
    of the code, it will execute the set of activities that was earlier defined in
    the function.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是调用该函数的时候了。一旦程序到达代码的这部分，它将执行之前在函数中定义的一系列活动。
- en: So there we have it. Now, as soon as you run this code, it will wait for the
    time defined by you in the program. Once the specific time has been reached, then
    it will check for the moisture. If the moisture is less than the set value then
    it will start to water the plants until the time the moisture reaches above that
    threshold.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就是我们要做的。现在，当你运行这段代码时，它将等待你在程序中定义的时间。一旦达到特定的时间，它将检查湿度。如果湿度低于设定的值，它将开始给植物浇水，直到湿度达到那个阈值以上。
- en: Making it truly intelligent
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使其真正智能化
- en: Amazing work! We have started building things that are smarter than us by ourselves.
    But now we want to take it a step further and make it even smarter than us—that's
    what robots are here for. Not only to do what we do but to do all that in a better
    way.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们已经开始自己构建比我们更智能的东西了。但现在我们想要更进一步，让它比我们更智能——这就是机器人的作用所在。不仅要做我们做的事情，而且要以更好的方式完成所有这些事情。
- en: So, what can we improve? Well, we do not require a lot of water on a chilly
    winter day, but when it's summertime we need way more than what we drink in winter.
    The same thing happens with plants as well.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们可以改进什么？嗯，在寒冷的冬天，我们不需要很多水，但到了夏天，我们需要的水比冬天我们喝的水多得多。植物也是一样。
- en: In winter, the amount of water they need is way less. Furthermore, even the
    rate of evaporation of water in the soil is slower. Hence, in both the conditions,
    we need to supply varying amounts of water to the garden. The question is, how
    do we do that?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在冬天，它们需要的水量要少得多。此外，土壤中水分的蒸发速率也较慢。因此，在这两种情况下，我们需要为花园提供不同数量的水。问题是，我们如何做到这一点？
- en: Well, firstly, to know if it's hot or cold outside we require a sensor. We will
    be using a sensor named DHT11\. It is a cheap yet robust sensor that gives us
    the readings of both the temperature and humidity. The best part is, it is super
    cheap at a rate of around $2.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，首先，要知道外面是热还是冷，我们需要一个传感器。我们将使用一个名为DHT11的传感器。它是一个既便宜又坚固的传感器，可以为我们提供温度和湿度的读数。最好的部分是，它的价格非常便宜，大约2美元。
- en: It has four pins. But if you presume that it will work to I2C protocols, then
    you would be wrong. It has its own data transfer methodology. It is good to have
    one single protocol for all the sensors, but often you will also find that there
    are various sensors or devices which work on a different or an altogether new
    protocol. DHT11 is one such sensor. In this case, we have the choice of either
    understanding the entire methodology of communication or to simply get the library
    from the manufacturer and use it at our disposal. At present we will be opting
    for the latter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 它有四个引脚。但如果你认为它会使用I2C协议，那么你就错了。它有自己的数据传输方法。对于所有传感器来说，有一个单一的协议是好的，但通常你也会发现有许多传感器或设备使用不同的或全新的协议。DHT11就是这样一种传感器。在这种情况下，我们有两种选择：要么理解整个通信方法，要么简单地从制造商那里获取库并在我们手中使用它。目前我们将选择后者。
- en: 'Now let''s see what the pins of the DHT11 look like:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看DHT11的引脚是什么样的：
- en: '![](img/6042d3ce-84a3-453b-8933-b8acf88a677b.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6042d3ce-84a3-453b-8933-b8acf88a677b.png)'
- en: What you can see here is that there is only one signal pin which will do all
    the communication digitally. There are two pins for power and one of the pin is
    not in use. I.e. there is no significant purpose of the pin. It might be there
    just for soldering or for future use. This sensor works on a 5V supply and only
    needs a few milliamps, hence we can simply power it up by using Raspberry Pi.
    Now, for the data communication, we will connect the signal pin to GPIO pin number
    `4`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这里可以看到，只有一个信号引脚，它将进行所有的数字通信。有两个电源引脚，其中一个未使用。也就是说，这个引脚没有显著的作用。它可能只是为了焊接或未来使用。这个传感器在5V供电下工作，只需要几毫安，所以我们可以直接通过树莓派给它供电。现在，对于数据通信，我们将信号引脚连接到GPIO引脚编号`4`。
- en: Before we start writing the code, let's first install the libraries for the
    communication between DHT11 and Raspberry Pi. We have done this before with the
    library of ADS1115, but in this one there are a few little tricks that we need
    to take care of. So let's get started.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写代码之前，让我们首先安装DHT11和树莓派之间通信的库。我们之前已经用ADS1115库做过这件事，但在这个例子中，有一些小技巧需要我们注意。所以，让我们开始吧。
- en: 'Firstly, we need to make sure that the operating system of your Raspberry Pi
    is up to date. So connect Raspberry Pi to the internet, open the command prompt
    in Raspberry Pi, and type the following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要确保你的树莓派的操作系统是最新的。所以将树莓派连接到互联网，在树莓派上打开命令提示符，并输入以下命令：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This command will update the raspbian OS of your Raspberry Pi automatically. Then
    go ahead and type in this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将自动更新你的树莓派Raspbian操作系统。然后继续输入以下内容：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In this command, we are installing the following packages:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令中，我们正在安装以下包：
- en: '`build-essential`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build-essential`'
- en: '`python-dev`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python-dev`'
- en: '`python-openssl`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python-openssl`'
- en: You must be wondering why we are installing all of these. Well, to cut a long
    story short, these are the dependencies for the library that we are about to install
    for the communication of DHT11\. We will not be able to use the library if these
    packages are not installed on Raspberry Pi.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道为什么我们要安装所有这些。简而言之，这些都是我们即将安装的用于DHT11通信的库的依赖项。如果这些包没有安装在树莓派上，我们将无法使用这个库。
- en: 'Finally, we have to install the library; this is a generic library in which
    the function of communicating with the DHT11 sensor is also available. This should
    suffice for our needs of easy communication. Here is the command to install it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须安装库；这是一个通用的库，其中也包含了与DHT11传感器通信的功能。这应该能满足我们简单通信的需求。以下是安装它的命令：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'All right then, we are good to go. Our system is ready to talk to DHT11\. Let''s
    first just see if what we have done up until now works the way we want. To do
    that, connect the DHT11 as follows; you can leave the rest of the components such
    as the solenoid and the soil humidity sensor connected as they are. They should
    not interfere. Now upload the the following code in Pi:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，我们可以开始了。我们的系统已经准备好与DHT11通信。让我们首先看看到目前为止我们所做的是否按预期工作。要做到这一点，按照以下方式连接DHT11；你可以让其他组件，如电磁阀和土壤湿度传感器保持连接，它们不应该干扰。现在，将以下代码上传到Pi：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once you upload this code, you will see readings of the sensor on your screen.
    This code is simply providing you with the raw readings of the sensor. This code
    is super simple and everything written here will be well understood by you, except
    for a few lines of the code, which are:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦上传此代码，你将在屏幕上看到传感器的读数。这个代码只是简单地为你提供传感器的原始读数。这个代码非常简单，这里写的所有内容你都会理解，除了几行代码，它们是：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this line of the code, we are importing the `Adafruit_DHT` library in our
    code. This is the same library that will be used to communicate with the DHT11
    sensor:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行代码中，我们正在将`Adafruit_DHT`库导入到我们的代码中。这是我们将用来与DHT11传感器通信的相同库：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There are different versions of DHT available, such as DHT11, DHT22, and so
    on. We need to tell the program which sensor we are using. Hence, we have allotted
    a value to the variable sensor. Later, you will see how we will be using it:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: DHT有不同版本，如DHT11、DHT22等。我们需要告诉程序我们使用的是哪个传感器。因此，我们给变量sensor分配了一个值。稍后，你会看到我们将如何使用它：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In this line, we are assigning the value `4` to a variable called `pin`. This
    variable will be used to tell the program on which pin of the Raspberry Pi we
    have connected the DHT11:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行，我们将值`4`赋给一个名为`pin`的变量。这个变量将被用来告诉程序我们在树莓派上连接了DHT11的哪个引脚：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this line, we are using a method of the `Adafruit` library named `Adafruit_DHT.read_retry()`.
    Now, what this does is that it reads the DHT sensor and gives the reading of the
    sensor to the variables `humidity` and `temperature`. One thing to note is that
    the DHT11 gives a reading which is updated every 2 seconds. Hence, the readings
    that you will be receiving will be refresh after every 2 seconds.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行，我们使用`Adafruit`库的一个名为`Adafruit_DHT.read_retry()`的方法。现在，这个方法读取DHT传感器，并将传感器的读数提供给变量`humidity`和`temperature`。有一点要注意的是，DHT11每2秒更新一次读数。因此，你将接收到的读数将在每2秒刷新一次。
- en: 'Once this code is through, then we can be sure that the sensor is working the
    way we want. Finally, the time has come to integrate all of the sensors together
    and make an entirely intelligent robot. As the solenoid, humidity sensor, and
    temperature sensors are already connected, all we need to do is to upload the
    code over to Pi and see the magic:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这段代码完成，我们就可以确信传感器正在按照我们的预期工作。最后，整合所有传感器并制作一个完全智能的机器人的时候到了。由于电磁阀、湿度传感器和温度传感器已经连接，我们所需做的就是将代码上传到树莓派，见证魔法：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Pretty long code, right? It might look so, but once you write it line by line,
    you will certainly understand that it might be longer than all the code we have
    written so far, but it''s anything but complex. You might have understood most
    of the program, however let me explain a few new things that we have used here:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 代码看起来很长，对吧？虽然看起来是这样，但一旦你一行一行地写出来，你肯定会理解，尽管它可能比我们迄今为止写的所有代码都要长，但它并不复杂。你可能已经理解了程序的大部分内容，然而，让我解释一下我们在这里使用的一些新事物：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this line, we are defining a function named `check_moisture()`. Previously,
    if you remember, while we were making the function `check_moisture`, we were basically
    checking if the moisture value was either more or less than 20%. What if we have
    to check the moisture for 30%, 40%, and 50%? Would we make a separate function
    for that?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行，我们定义了一个名为`check_moisture()`的函数。如果你记得，当我们创建`check_moisture`函数时，我们基本上是在检查湿度值是否大于或小于20%。如果我们需要检查30%、40%和50%的湿度呢？我们会为那个单独创建一个函数吗？
- en: Obviously not! What we do is we pass an argument to the function,  an argument
    is basically a variable placed within the brackets of the function. Now we can
    assign values to this variable for, for example, `check_moisture(30)`—now the
    value of the `m` will be `30` during the time that function is executing. Then
    again, if you call it as `check_moisture(40)` then the value of that `m` would
    be `40`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 显然不是！我们做的是向函数传递一个参数，参数基本上是放在函数括号内的一个变量。现在我们可以为这个变量赋值，例如，`check_moisture(30)`——在函数执行期间，`m`的值将是`30`。然后，如果你调用它为`check_moisture(40)`，那么那个`m`的值将是`40`。
- en: 'Now, as you can see, we are comparing values of `m` throughout the function:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，正如你所看到的，我们在整个函数中比较`m`的值：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `if` statement will be checking the value of the `m` which is assigned while
    calling the function. This makes our job very easy and simple.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句将检查在调用函数时分配的`m`的值。这使得我们的工作变得非常简单和容易。'
- en: 'Let''s see what the rest of the program is doing:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看程序的其他部分在做什么：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Every time the desired time is reached it will go ahead and check for the temperature.
    If the temperature is less than `15` it will call the function `check_moisture `
    with the value of the argument as `20`. Hence, if the moisture is less than 20%,
    then the water will be fed to the garden:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 每当达到期望的时间时，它将检查温度。如果温度低于`15`，它将使用参数值为`20`调用`check_moisture`函数。因此，如果湿度低于20%，那么水将被输送到花园：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `elif` or the `else if` statement is used after an `if` statement. This
    in common words means that if the previous `if` statement is not true, then it
    will check for this `if` statement. So, in the preceding line it will check if
    the temperature is between `15` and `28` degrees Celsius. If that is true, then
    it will check the moisture of the soil. The argument to the function is `30` in
    this line. Hence, it will check if the moisture is less than `30`. If so, then
    it will supply the water to the garden:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在`if`语句之后使用`elif`或`else if`语句。用通俗的话说，这意味着如果之前的`if`语句不成立，那么它将检查这个`if`语句。所以，在前面的行中，它会检查温度是否在`15`到`28`摄氏度之间。如果是真的，那么它会检查土壤的湿度。这一行函数的参数是`30`。因此，它会检查湿度是否小于`30`。如果是这样，那么它将给花园供水：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Similarly, in this line of code we are checking the temperature, and if it is
    equal to or more than `28` degrees Celsius then it will pass the value `40` as
    an argument to the function `check_moisture`. Hence this time it will check for
    moisture if it is `28` or more than that.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，在这行代码中我们正在检查温度，如果它等于或超过`28`摄氏度，那么它将把值`40`作为参数传递给函数`check_moisture`。因此这次它将检查如果温度是`28`摄氏度或更高的话，是否需要检查湿度。
- en: As you can see, now the system will be checking the ambient temperature and,
    based on that, the amount of water to the plants is regulated. The best part is
    that it is consistent and will provide the right amount of water needed by the
    plants.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，现在系统将检查环境温度，并根据这个温度来调节植物所需的水量。最好的部分是，它是一致的，并且会提供植物所需的确切水量。
- en: The values mentioned in this entire chapter are simply assumed values. I would
    strongly recommend to tweak it based on where you live and what kind of plants
    you have in your garden to get the best out of the system.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中提到的所有数值仅仅是假设值。我强烈建议您根据自己的居住地以及您花园中种植的植物类型进行调整，以获得系统最佳效果。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered certain topics such as solenoid integration and
    soil humidity sensors to build a robot that waters your backyard garden automatically.
    Next up, we will cover the basics of motors.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了某些主题，例如螺线管集成和土壤湿度传感器，以构建一个能够自动灌溉您后院花园的机器人。接下来，我们将介绍电机的基础知识。
