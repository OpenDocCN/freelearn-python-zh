- en: Chapter 5. Improving the User Experience of Our Headlines Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。改进我们的头条项目的用户体验
- en: Wealthy business people who have to constantly make a good impression to keep
    up profitable relations sometimes employ personal assistants to study their acquaintances.
    The PA then stands behind the wealthy person at social events and whispers a few
    choice words to him or her about someone who is approaching to converse. The words
    have to be succinct but informative, such as "Paul Smith. One child, Jill. Recently
    travelled, Mauritius". Now, our business person can pretend that whoever has approached
    is a dear friend and talk all about his children and travels at some length without
    having the faintest clue of who the person actually is. This makes other people
    feel important and liked, and this can help our hypothetical millionaire become
    even richer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 富有的商人们为了不断给人留下良好印象以保持有利可图的关系，有时会雇佣个人助理来研究他们的熟人。然后，个人助理会站在社交活动中富有的人的身后，对即将接触的人耳语几句关键的话。这些话必须简洁但具有信息量，比如“保罗·史密斯。一个孩子，吉尔。最近去了毛里求斯”。现在，我们的商人可以假装接近的人是一个亲密的朋友，并且长篇大论地谈论他的孩子和旅行，而实际上并不知道这个人是谁。这会让其他人觉得重要和受欢迎，这有助于我们假设的百万富翁变得更加富有。
- en: Why is this relevant to web applications? Well, we want to do exactly the same
    thing. Users of our site who feel important and remembered are more likely to
    come back, so we need a digital PA to make the user feel as though we've taken
    the time and effort to remember who they are and what they like. We could build
    a database of our users to store what currency conversions they usually calculate
    and which cities' weather they are interested in and then display these to them
    by default. The issue with this strategy is that we'd need them to identify themselves
    with every visit, and most users would find the extra step of entering a username,
    and possibly a password, tedious and off-putting.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这与Web应用程序相关呢？好吧，我们想做的就是这样。我们网站的用户觉得重要和被记住，更有可能回来，所以我们需要一个数字助理，让用户觉得我们花了时间和精力来记住他们是谁以及他们喜欢什么。我们可以建立一个用户数据库，存储他们通常计算的货币转换和他们感兴趣的城市天气，然后默认显示给他们。这种策略的问题在于我们需要他们在每次访问时进行身份识别，而大多数用户会觉得输入用户名，可能还有密码，这一额外步骤很烦人。
- en: Enter HTTP cookies. These sly little things will lurk on our users' computers
    and act as digital PAs for us when our users make a second visit to our site,
    giving us information that we've acquired before but haven't bothered to remember.
    This sounds pretty underhand. At one point, the European Union thought this way
    and attempted to regulate the use of cookies, but they are everywhere and are
    simple and useful, and the regulation attempts were a bit underwhelming (take
    a look at [http://silktide.com/the-stupid-cookie-law-is-dead-at-last/](http://silktide.com/the-stupid-cookie-law-is-dead-at-last/)).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 输入HTTP cookie。这些狡猾的小东西将潜伏在我们用户的计算机上，在用户第二次访问我们的网站时，充当我们的数字助理，给我们提供我们以前获得但没有记住的信息。这听起来相当不光彩。有一段时间，欧盟也是这么认为的，并试图对cookie的使用进行监管，但它们无处不在，简单而有用，监管尝试有点令人失望（请看[http://silktide.com/the-stupid-cookie-law-is-dead-at-last/](http://silktide.com/the-stupid-cookie-law-is-dead-at-last/)）。
- en: In their simplest form, cookies are simply key-value pairs that we store on
    our users' machines and ask their browser to automatically send back to us whenever
    they visit our site. The pros of this are that we don't have to keep and maintain
    a database and we don't have to explicitly ask users to tell us who they are.
    However, the cons are that we don't have control of the information and if a user
    changes computers, web browsers, or even just deletes our cookies, we'll no longer
    be able to identify him or her. Cookies are, therefore, perfect for an application
    such as the one we've built; it's not the end of the world if a user has to click
    a few times to get back to the media, currency, and weather information he or
    she searched for the last time, but it's nice if we can remember previous choices
    and display these automatically.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在最简单的形式中，cookie只是我们存储在用户计算机上的键值对，并要求他们的浏览器在访问我们的网站时自动发送给我们。这样做的好处是我们不必保留和维护数据库，也不必明确要求用户告诉我们他们是谁。然而，缺点是我们无法控制这些信息，如果用户更换计算机、Web浏览器，甚至只是删除我们的cookie，我们将无法再识别他或她。因此，cookie非常适合我们构建的应用程序；如果用户不得不点击几次才能回到上次搜索的媒体、货币和天气信息，这并不是世界末日，但如果我们能记住以前的选择并自动显示这些信息，那就很好。
- en: While we're on the topic of user experience (or UX as it's often referred to),
    our site looks as though it was made in the 1980s. We'll have a stronger focus
    on aesthetics in later chapters, but for now we'll also take a look at how to
    add some basic layout and colors to our site. As we're focusing on functionality
    and simplicity, it'll still be far from "modern-looking", but we'll add some building
    blocks to our toolkit that we'll use more carefully later on. We'll use **Cascading
    Style Sheets** (normally just called **CSS**) to achieve this. CSS is a great
    tool to enable a further separation of concerns; we have already mainly separated
    our logic (that is, our Python script) from our content (that is, our HTML templates).
    Now, we'll take a look at how CSS can help us separate our formatting (that is,
    the color, font, layout, and so on) from the rest of our content, such as the
    static text in our template files.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论用户体验（通常称为UX）时，我们的网站看起来好像是上世纪80年代制作的。我们将在后面的章节中更加注重美学，但现在我们也将看看如何向我们的网站添加一些基本的布局和颜色。因为我们专注于功能和简单性，所以它仍然远非“现代化”，但我们将向我们的工具包添加一些基本组件，以便以后更加谨慎地使用。我们将使用层叠样式表（通常简称为CSS）来实现这一点。CSS是一个很好的工具，可以进一步分离关注点；我们已经主要将逻辑（即我们的Python脚本）与内容（即我们的HTML模板）分开。现在，我们将看看CSS如何帮助我们将格式（颜色、字体、布局等）与我们的其他内容（例如模板文件中的静态文本）分开。
- en: Now that we've had an overview of cookies and CSS, we'll get to looking at implementing
    them in Flask. This is the final chapter of our first project, and by the end
    of it, we'll have a Headlines application that includes cookies and CSS.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经概述了cookies和CSS，我们将开始研究如何在Flask中实现它们。这是我们第一个项目的最后一章，到最后，我们将拥有一个包括cookies和CSS的Headlines应用程序。
- en: 'In this chapter, we''ll look at the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究以下主题：
- en: Adding cookies to our Headlines application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向我们的Headlines应用程序添加cookies
- en: Adding CSS to our Headlines application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向我们的Headlines应用程序添加CSS
- en: Adding cookies to our Headlines application
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的Headlines应用程序添加cookies
- en: Our application, at this point, has a couple of issues. Let's imagine a user,
    Bob, who lives in Seattle. Bob visits our site and sees the defaults for BBC,
    London, and conversion of GBP to USD. Bob wants to see the weather for Seattle,
    so he types `Seattle` into the **Weather search** bar and hits Enter. He glances
    at the returned weather and feels pretty depressed that it's cold and raining
    as usual, so he looks away from the weather further down the page and sees the
    BBC headlines. He would prefer CNN headlines, so he selects this publication from
    the drop-down menu and hits **Submit**. He reads through a couple of headlines
    before realizing that current affairs are even duller and more depressing than
    the weather. So, his eyes move back to the top of the page again to cheer himself
    up. He's confused; since changing his publication preference, the weather has
    defaulted back to London, where the weather is even worse! He closes our application
    and doesn't come back. If he were to come back, everything would display the defaults
    again.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们的应用程序有一些问题。让我们想象一个名叫鲍勃的用户，他住在西雅图。鲍勃访问我们的网站，看到了BBC，伦敦和将GBP转换为USD的默认值。鲍勃想要看到西雅图的天气，所以他在**天气搜索**栏中输入`西雅图`并按下回车键。他浏览返回的天气，感到很沮丧，因为天气一如既往地寒冷和下雨，所以他从页面底部的天气中看向BBC的头条新闻。他更喜欢CNN的头条新闻，所以他从下拉菜单中选择了这个出版物并点击**提交**。他读了几条头条新闻后意识到时事新闻甚至比天气更沉闷和令人沮丧。所以，他的眼睛再次移回页面顶部来振作自己。他感到困惑；自从更改了他的出版物偏好后，天气又默认回到了伦敦，那里的天气甚至更糟糕！他关闭了我们的应用程序，不再回来。如果他回来，一切都会再次显示默认值。
- en: 'The two immediate problems are:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 两个直接问题是：
- en: Not remembering our users' choices even while they stay on our site
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使用户在我们的网站上停留，也不记住用户的选择
- en: Not remembering our users' choices after they close our site and revisit at
    a later stage
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户关闭我们的网站并在以后重新访问时不记住用户的选择
- en: Let's fix both of these issues.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解决这两个问题。
- en: Using cookies with Flask
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Flask处理cookies
- en: Cookies, as introduced earlier, can be thought of as key-value pairs that we
    may or may not receive by default from return visitors. We need to change our
    app so that when a user makes choices, we create or update their cookie to reflect
    these changes, and when a user requests our site, we check to see whether a cookie
    exists and read as much of the unspecified information from this as possible.
    First, we'll look at how to set cookies and have our user's browser automatically
    remember information, and then we'll look at retrieving the information that we
    previously used cookies to store.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，cookies可以被视为我们可能或可能不会从返回访客那里收到的键值对。我们需要改变我们的应用程序，这样当用户做出选择时，我们创建或更新他们的cookie以反映这些更改，当用户请求我们的网站时，我们检查是否存在cookie，并尽可能多地从中读取未指定的信息。首先，我们将看看如何设置cookies并让用户的浏览器自动记住信息，然后我们将看看如何检索我们以前使用cookies存储的信息。
- en: Setting cookies in Flask
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Flask中设置cookies
- en: 'Flask makes dealing with cookies as easy as ever. First, we need a couple more
    imports; we''ll use the `datetime` library from Python to set the lifespan of
    our soon-to-exist cookies, and we''ll use Flask''s `make_response()` function
    to create a response object that we can set cookies on. Add the following two
    lines to your imports section in the `headlines.py` file:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Flask使处理cookies变得非常容易。首先，我们需要更多的导入；我们将使用Python的`datetime`库来设置即将存在的cookies的寿命，我们将使用Flask的`make_response()`函数来创建一个响应对象，我们可以在其上设置cookies。在`headlines.py`文件的导入部分中添加以下两行：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Earlier, we were simply rendering our template with the custom arguments and
    then returning it to our users' web browsers. In order to set cookies, we need
    an extra step. First, we'll create a response object with our new `make_response()`
    function and then set our cookie using this object. Finally, we'll return the
    entire response, which includes the rendered template and the cookies.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们只是用自定义参数渲染我们的模板，然后将其返回给用户的网络浏览器。为了设置cookies，我们需要额外的步骤。首先，我们将使用新的`make_response()`函数创建一个响应对象，然后使用这个对象设置我们的cookie。最后，我们将返回整个响应，其中包括渲染的模板和cookies。
- en: 'Substitute the last line of our `home()` function in `headlines.py` with the
    following lines:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下行替换`headlines.py`中`home()`函数的最后一行：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is quite a big change from the simple return statement we had, so let's
    break it down a bit. First, we will wrap a `make_response()` call around our `render_template()`
    call instead of returning the rendered template directly. This means that our
    Jinja templates will be rendered, and all the placeholders will be replaced with
    the correct values, but instead of returning this response directly to our users,
    we will load it into a variable so that we can make some more additions to it.
    Once we have this response object, we will create a `datetime` object with a value
    of 365 days from today's date. Then, we will do a series of `set_cookie()` calls
    on our `response` object, saving all the user's selections (or refreshing the
    previous defaults) and setting the expiry time to a year from the time the cookie
    was set using our `datetime` object.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们之前简单的返回语句相比是一个相当大的改变，所以让我们来详细分析一下。首先，我们将在我们的`render_template()`调用周围包装一个`make_response()`调用，而不是直接返回渲染的模板。这意味着我们的Jinja模板将被渲染，所有的占位符将被替换为正确的值，但是我们不会直接将这个响应返回给用户，而是将它加载到一个变量中，以便我们可以对它进行一些更多的添加。一旦我们有了这个响应对象，我们将创建一个值为今天日期后365天的`datetime`对象。然后，我们将在我们的`response`对象上进行一系列的`set_cookie()`调用，保存所有用户的选择（或刷新以前的默认值），并将到期时间设置为从设置cookie的时间开始的一年，使用我们的`datetime`对象。
- en: Finally, we will return our `response` object, which contains the HTML for the
    rendered template, and our four cookie values. On loading the page, our user's
    browser will save the four cookies, and we'll be able to retrieve the values if
    the same user visits our application again.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将返回包含渲染模板的HTML和我们的四个cookie值的`response`对象。在加载页面时，用户的浏览器将保存这四个cookies，如果同一用户再次访问我们的应用程序，我们将能够检索这些值。
- en: Retrieving cookies in Flask
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Flask中检索cookies
- en: 'Remembering the information is not much good if we don''t do anything with
    it. We now set cookies as the final step before we send a response to our users.
    However, we need to check for the saved cookies when a user sends us a request.
    If you remember how we got named arguments from Flask''s request object, you could
    probably guess how to get saved cookies. The following line will get the cookie
    named `publication` if it exists:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不对信息进行任何处理，那么记住这些信息也没有太大的意义。在向用户发送响应之前，我们现在将cookies设置为最后一步。然而，当用户向我们发送请求时，我们需要检查保存的cookies。如果你还记得我们如何从Flask的请求对象中获取命名参数，你可能猜到如何获取保存的cookies。如果存在，以下行将获取名为`publication`的cookie：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is simple, right? The only tricky part is getting our fallback logic correct.
    We still want explicit requests to take the highest priority; that is, if a user
    enters text or selects a value from a drop-down menu, this will be what he or
    she wants irrespective of what we expect from previous visits. If there is no
    explicit request, we will look in the cookies to check whether we can grab a default
    from there. Finally, if we still have nothing, we will use our hardcoded defaults.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，对吧？唯一棘手的部分是正确获取我们的回退逻辑。我们仍然希望显式请求具有最高优先级；也就是说，如果用户输入文本或从下拉菜单中选择一个值，这将是他或她想要的，而不管我们对以前的访问期望如何。如果没有显式请求，我们将查看cookies，以检查是否可以从中获取默认值。最后，如果我们仍然没有任何内容，我们将使用我们硬编码的默认值。
- en: Writing the fallback logic to check for cookies
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写回退逻辑以检查cookies
- en: 'Let''s just implement this logic for `publication` first. Add a new `if` block
    to our publication logic in the `home()` function of `headlines.py` to make it
    match the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们只为`publication`实现这个逻辑。在`headlines.py`的`home()`函数中的publication逻辑中添加一个新的`if`块，使其匹配以下内容：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, we will look in the GET arguments, fall back if necessary on the saved
    cookies, and finally fall back on our default value. Let's take a look at this
    working. Open your web browser and navigate to `localhost:5000`. Search for `Fox`
    in the **Publication** search bar and wait for the page to reload with Fox News
    headlines. Now, close your browser, reopen it, and load `localhost:5000` again.
    This time, you should see the Fox headlines without having to search for them,
    as in the following screenshot.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将查看GET参数，必要时回退到保存的cookies，最后回退到我们的默认值。让我们看看这个工作。打开你的网络浏览器，导航到`localhost:5000`。在**Publication**搜索栏中搜索`Fox`，等待页面重新加载，显示Fox
    News的头条新闻。现在，关闭你的浏览器，重新打开它，再次加载`localhost:5000`。这次，你应该看到Fox的头条新闻，而不需要再搜索它们，就像下面的截图一样。
- en: Note that there is no `publication` argument in the URL, and yet the headlines
    themselves are now from Fox News.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，URL中没有`publication`参数，但是头条新闻现在是来自Fox News。
- en: '![Writing the fallback logic to check for cookies](img/B04312_05_01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![编写回退逻辑以检查cookies](img/B04312_05_01.jpg)'
- en: Retrieving the cookies for other data
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检索其他数据的cookies
- en: We have basic cookies working for our publication, but we still want to read
    the cookies we potentially saved for weather and currency options. We could simply
    add the same if statement to each section of our code, substituting `city`, `currency_from`,
    and `currency_to` for `publication` as relevant, but making the same changes in
    many parts of our code is a strong sign that we need to do some refactoring.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的publication有基本的cookies工作，但我们仍然希望读取我们可能为天气和货币选项保存的cookies。我们可以简单地在代码的每个部分添加相同的if语句，将`city`、`currency_from`和`currency_to`替换为相关的`publication`，但是在代码的许多部分进行相同的更改是我们需要进行一些重构的明显迹象。
- en: 'Let''s create a `get_value_with_fallback()` function instead that implements
    our fallback logic on a more abstract level. Add the new function to the `headlines.py`
    file and call it from the `home()` function, as shown here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`get_value_with_fallback()`函数，它在更抽象的层面上实现了我们的回退逻辑。将新函数添加到`headlines.py`文件中，并从`home()`函数中调用它，如下所示：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, we should be able to submit the forms in any order and have all our options
    remembered as we would expect. Also, whenever we visit our site, it will automatically
    be configured with our most recently used options. Give it a go! You should be
    able to search for currency, weather, and headlines; then, close your browser;
    and revisit the site. The inputs you used most recently should appear by default.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该能够以任何顺序提交表单，并且所有的选项都能被记住，就像我们期望的那样。此外，每当我们访问我们的网站时，它都会自动配置为我们最近使用的选项。试一试吧！您应该能够搜索货币、天气和头条新闻；然后关闭浏览器；再次访问网站。您最近使用的输入应该默认显示出来。
- en: In the following screenshot, we can see that no arguments are passed in the
    URL, and yet we are displaying weather data for Port Elizabeth in South Africa;
    currency data from the **Chinese Yuan** (**CNY**) to **Saint Helena Pound** (**SHP**);
    and headlines from Fox News.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们可以看到URL中没有传递任何参数，但我们正在显示南非伊丽莎白港的天气数据；从**人民币**（**CNY**）到**圣赫勒拿镑**（**SHP**）的货币数据；以及来自福克斯新闻的头条新闻。
- en: '![Retrieving the cookies for other data](img/B04312_05_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![检索其他数据的cookies](img/B04312_05_02.jpg)'
- en: Adding CSS to our Headlines application
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的Headlines应用程序添加CSS
- en: Our site remains pretty bare. There's a lot of white and some black. Most users
    prefer color, animations, borders, margins, and so on. As mentioned before, we're
    not really going to focus on aesthetics now, but we'll add some basic colors and
    styles.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的网站仍然相当简陋。有很多白色和一些黑色。大多数用户更喜欢颜色、动画、边框、边距等。如前所述，我们现在不会真正关注美学，但我们会添加一些基本的颜色和样式。
- en: External, internal, and inline CSS
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外部、内部和内联CSS
- en: There are a few ways that CSS can be added to a web page. The best way is to
    keep it completely separate from the HTML and save it in an external file, which
    is included in the HTML in a `<link>` element. This is sometimes referred to as
    the *external CSS*. The worst way is called *inline CSS*. Using the inline method,
    CSS is defined on a per element basis; this is considered bad practice as any
    changes to style require trawling through HTML to find the relevant sections.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: CSS可以以几种方式添加到网页中。最好的方法是将其与HTML完全分开，并将其保存在一个外部文件中，该文件在HTML中通过`<link>`元素包含。这有时被称为*外部CSS*。最糟糕的方法被称为*内联CSS*。使用内联方法，CSS是根据每个元素定义的；这被认为是不好的做法，因为对样式的任何更改都需要在HTML中查找相关部分。
- en: Furthermore, many elements on a page often have the same or at least related
    styles to maintain color schemes and styles throughout the site. Using inline
    styles, therefore, often leads to a lot of code repetition, which we know to avoid.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，页面上的许多元素通常具有相同或至少相关的样式，以保持整个站点的颜色方案和样式。因此，使用内联样式通常会导致大量的代码重复，我们知道要避免这种情况。
- en: For this project, we'll take a middle ground. We'll keep our CSS defined in
    our `.html` template files, but we'll define it all in a single place. This is
    because we haven't yet looked at how Flask handles files by convention, so keeping
    all our code in one place is simpler for now.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们将采取一个折中的方法。我们将保持我们在`.html`模板文件中定义的CSS，但我们将把它们都定义在一个地方。这是因为我们还没有看过Flask如何按照惯例处理文件，所以现在把所有的代码放在一个地方更简单。
- en: Adding our first CSS
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加我们的第一个CSS
- en: CSS is quite straightforward; we will describe elements of our page by type,
    ID, class, and so on and define a number of properties for these, such as color,
    layout, padding, fonts, and so on. CSS is designed to *cascade*, that is, if we
    don't specify for a more specific element, it'll automatically inherit properties
    defined for a more general element. We'll go through the CSS itself fairly quickly,
    so if you've never heard of it before and would like to know more about it, now
    is the opportune moment to take a break and go through some CSS-specific resources.
    There are a lot of them online that a quick search will reveal; if you enjoyed
    the W3Schools HTML tutorial we mentioned earlier, you can find a similar CSS one
    here at [http://www.w3schools.com/css/](http://www.w3schools.com/css/). Alternatively,
    dive in the deep end with the examples and brief explanations that follow!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: CSS非常简单；我们将通过类型、ID、类等描述页面的元素，并为这些元素定义许多属性，如颜色、布局、填充、字体等。CSS被设计为*级联*，也就是说，如果我们没有为更具体的元素指定属性，它将自动继承为更一般的元素定义的属性。我们将快速浏览CSS本身，所以如果您以前从未听说过它，并且想了解更多关于它的信息，现在是一个适当的时机休息一下，查看一些特定于CSS的资源。在线有很多这样的资源，一个快速搜索就会揭示出来；如果您喜欢我们之前提到的W3Schools
    HTML教程，您可以在这里找到类似的CSS教程[http://www.w3schools.com/css/](http://www.w3schools.com/css)。或者，通过接下来的示例和简要解释来深入了解！
- en: 'First, let''s add a better header to our site. We''ll add a tagline beneath
    our top level heading, and surround it with a new `<div>` tag so that we can modify
    the entire header in the upcoming CSS. Modify the start of the `home.html` template
    to look as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们为我们的网站添加一个更好的标题。我们将在顶级标题下方添加一个标语，并用一个新的`<div>`标签将其包围起来，以便我们可以在即将到来的CSS中修改整个标题。修改`home.html`模板的开头如下所示：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `<div>` tag doesn't do anything by itself, and you can think of it as a
    container. We can use it to group logically related elements into the same element,
    which is very useful for CSS as we can then style all of the elements in a `<div>`
    tag at once.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`<div>`标签本身并没有做任何事情，您可以将其视为一个容器。我们可以使用它将逻辑相关的元素分组到同一个元素中，这对于CSS非常有用，因为我们可以一次性地为`<div>`标签中的所有元素设置样式。'
- en: 'CSS should be added into the `<head>` section of our template inside a `<style>`
    tag. Underneath the `<title>` tag in our `home.html` template, add the following
    code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: CSS应该添加到我们模板的`<head>`部分中的`<style>`标签中。在我们的`home.html`模板中的`<title>`标签下面，添加以下代码：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We defined the styles explicitly for three elements: the outer `<html>` element,
    the `<body>` element, and any element with an `id="header"` attribute. As all
    of our elements are within our `<html>` element, the font cascades automatically
    down everywhere (although it could still be overwritten explicitly by subelements).
    We set everything in our body element (which contains all the visible items of
    the page) to have a maximum width of 900 pixels. The `margin: 0 auto;` line means
    that there will be no margin at the top and bottom of the body, and an automatic
    margin on the left- and right-hand sides. This has the effect of centering everything
    on the page. The `background: white;` and `background: lightgrey;` lines mean
    that we''ll have a centered main element with a light grey background inside the
    larger window, which is white. Finally, our defined header `div` will have a lightsteelblue
    background. Save the page with the added styles and refresh to see the effect.
    It should look similar to the following image:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '我们明确定义了三个元素的样式：外部`<html>`元素，`<body>`元素和具有`id="header"`属性的任何元素。由于我们所有的元素都在`<html>`元素内部，字体会自动向下级元素级联（尽管仍然可以被子元素显式覆盖）。我们将页面中所有可见项包含在`<body>`元素中，并将其最大宽度设置为900像素。`margin:
    0 auto;`表示`<body>`顶部和底部没有边距，左右两侧有自动边距。这会使页面上的所有内容居中。`background: white;`和`background:
    lightgrey;`表示我们将在较大的窗口内有一个居中的主要元素，其背景为浅灰色，而窗口本身为白色。最后，我们定义的头部`div`将具有浅钢蓝色的背景。保存添加样式的页面并刷新以查看效果。它应该看起来类似于以下图片：'
- en: '![Adding our first CSS](img/B04312_05_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![添加我们的第一个CSS](img/B04312_05_03.jpg)'
- en: Let's take a look at how we can improve the aesthetics in the next section.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在下一节中改善美学。
- en: '**Browsers and caching**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**浏览器和缓存**'
- en: Tip
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Browsers often cache content that doesn't change often locally in order to display
    pages more quickly the next time you visit them. This is not ideal for development
    as you want to see the changes as you make them. If your styles don't seem to
    be doing what you'd expect, clear your browser's cache and try again. This can
    be done on most browsers by pressing *Ctrl* + *Shift* + *ESC* and selecting the
    relevant options from the menu that pops up.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器通常会在本地缓存不经常更改的内容，以便在下次访问页面时更快地显示页面。这对开发来说并不理想，因为您希望在进行更改时看到更改。如果您的样式似乎没有达到您的预期，请清除浏览器的缓存，然后重试。在大多数浏览器上，可以通过按下*Ctrl*
    + *Shift* + *ESC*并从弹出的菜单中选择相关选项来完成此操作。
- en: Adding padding to our CSS
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向我们的CSS添加填充
- en: This is slightly more interesting than black on white, but it's still pretty
    ugly. One problem is that the text is right up against the margin of the color
    without any breathing room. We can fix this using *CSS padding*, which moves everything
    over from the top, right, bottom, left, or any combination by specified amounts.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这比白色背景上的黑色略有趣，但仍然相当丑陋。一个问题是文本紧贴着颜色的边缘，没有任何空间。我们可以使用*CSS填充*来解决这个问题，它可以通过指定的数量从顶部、右侧、底部、左侧或任何组合移动所有内容。
- en: We could add padding directly to our `<body>` tag as we want a nice left-hand
    side buffer for all the text. If you try this, you'll see the immediate issue;
    the padding will affect everything, including our `<div>` header and the `<hr>`
    tag that separates it from the rest of our content, which means that there will
    be a weird stripe of grey that isn't what we want. We'll fix the issue in a way
    that you'll soon use for nearly everything CSS-related—just add more divs! We
    need a *main* `<div>` header around all our subheadings and an inner header div
    so that we can pad the text in our header without padding the background color
    or the separator.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接向我们的`<body>`标签添加填充，因为我们希望所有文本都有一个漂亮的左侧缓冲区。如果您尝试这样做，您会看到一个直接的问题；填充会影响所有内容，包括我们的`<div>`头部和将其与其余内容分隔开的`<hr>`标签，这意味着会有一条我们不想要的奇怪的灰色条纹。我们将以一种您很快会用于几乎所有与CSS相关的事情的方式来解决这个问题——只需添加更多的div！我们需要一个*main*`<div>`头部，围绕所有的子标题和一个内部头部div，这样我们就可以填充头部的文本，而不填充背景颜色或分隔符。
- en: Adding more styles to our CSS
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在我们的CSS中添加更多样式
- en: 'Add the following sections to your CSS to define left-hand side padding for
    our main and inner header divs and update the `#header` section to include some
    top padding:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下部分添加到您的CSS中，为我们的主要和内部头部div定义左侧填充，并更新`#header`部分以包括一些顶部填充：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Adding the div tags to the template file
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将div标签添加到模板文件
- en: 'Now, let''s add the divs themselves; the template code in `home.html` should
    be updated to look as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加div本身；`home.html`中的模板代码应更新为如下所示：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Styling our inputs
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为我们的输入添加样式
- en: 'This makes the layout a bit more pleasant to look at because the text doesn''t
    look like it''s trying to sneak off the edge. The next major pain point is our
    input elements, which are very boring. Let''s add some style to them as well.
    At the bottom of the CSS we have so far, add the following text:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得布局看起来更加愉悦，因为文本看起来不像是试图溜走。接下来的一个主要问题是我们的输入元素，它们非常无聊。让我们也为它们添加一些样式。在我们迄今为止的CSS底部，添加以下文本：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The first section styles our text input and select (that is, drop-down) elements.
    The text color is grey, it has a border that is of the same color as our heading,
    and we will make them a little bit bigger than the default ones we had before
    using height and line height. We also need to adjust the margins to make the text
    fit in the new size more naturally (if you''re curious, leave out the margin line
    at the bottom of the first section and look at the result.) The second and third
    sections are to style our **Submit** buttons; one to define how they usually look
    and the other to define how they look when the mouse moves over them. Again, save
    these changes and refresh the page to see how they look. You should see something
    similar to the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分样式化了我们的文本输入和选择（即下拉）元素。文本颜色是灰色，它有一个与我们标题相同颜色的边框，我们将通过高度和行高使它们比以前的默认值稍微大一点。我们还需要调整边距，使文本更自然地适应新的大小（如果你感兴趣，可以在第一部分的底部留出边距行，看看结果）。第二和第三部分是为了美化我们的**提交**按钮；一个是定义它们通常的外观，另一个是定义当鼠标移动到它们上面时的外观。再次保存这些更改并刷新页面，看看它们的外观。你应该看到类似以下截图的东西。
- en: '![Styling our inputs](img/B04312_05_04.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![美化我们的输入](img/B04312_05_04.jpg)'
- en: The final result will still not win any design awards, but at least you've learned
    the basics of CSS. One of the most frustrating parts of designing web pages is
    that each browser interprets CSS slightly differently (or in some cases, very
    differently). Cross-browser testing and validation is every web developer's arch
    nemesis, and in later chapters, we'll look at some tools and frameworks that can
    be used to mitigate the issues that arise from this potential lack of consistency.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果仍然不会赢得任何设计奖，但至少你已经学会了CSS的基础知识。设计网页最令人沮丧的部分之一是，每个浏览器对CSS的解释略有不同（或在某些情况下，差异很大）。跨浏览器测试和验证是每个网页开发人员的死敌，在后面的章节中，我们将看一些工具和框架，可以用来减轻由于潜在的不一致性而引起的问题。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We've made our site a bit more user-friendly in this chapter, both in terms
    of functionality (by remembering our users' choices through cookies) and aesthetics
    (using CSS). We'll come back to both of these topics in later projects, in which
    we'll use cookies to allow users to log in and some more advanced CSS. This is
    the end of our Headlines project; we have a functioning Headlines application
    that displays news, weather, and currency information.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使我们的网站在功能上更加用户友好（通过使用cookie记住用户的选择）和美观（使用CSS）。在以后的项目中，我们将回到这两个主题，其中我们将使用cookie允许用户登录和一些更高级的CSS。这是我们Headlines项目的结束；我们有一个可以显示新闻、天气和货币信息的Headlines应用程序。
- en: 'In the next chapter, we''ll start building a new project: an interactive crime
    map.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始建立一个新项目：一个交互式犯罪地图。
