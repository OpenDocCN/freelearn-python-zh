- en: '22'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '22'
- en: Point of Sale
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 销售点
- en: Point of Sale is a fully integrated application that allows you to sell products
    (online or offline) with any device. It also automatically registers product moves
    in your stock, gives you real-time statistics, and consolidations across all shops.
    In this chapter, we will see how to modify the Point of Sale application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 销售点（Point of Sale）是一个完全集成的应用程序，它允许您使用任何设备在线或离线销售产品。它还会自动记录您库存中的产品移动，提供实时统计数据，并跨所有商店进行合并。在本章中，我们将了解如何修改销售点应用程序。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Adding custom JavaScript/SCSS files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加自定义JavaScript/SCSS文件
- en: Adding an action button to the keyboard
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向键盘添加动作按钮
- en: Making RPC calls
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行RPC调用
- en: Modifying the Point of Sale screen UI
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改销售点屏幕UI
- en: Modifying existing business logic
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改现有业务逻辑
- en: Modifying customer
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改客户
- en: Note
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Point of Sale application is mostly written in JavaScript. This chapter
    is written assuming that you have a basic knowledge of JavaScript. This chapter
    also uses the OWL framework, so if you are unaware of these JavaScript terms,
    check out [*Chapter 16*](B20997_16.xhtml#_idTextAnchor929), *The Odoo Web* *Library
    (OWL)*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 销售点应用程序主要使用JavaScript编写。本章假设您具备基本的JavaScript知识。本章还使用了OWL框架，如果您不熟悉这些JavaScript术语，请参阅[*第16章*](B20997_16.xhtml#_idTextAnchor929)，*Odoo
    Web库（OWL）*。
- en: Throughout this chapter, we will be using an add-on module called `point_of_sale_customization`.
    This `point_of_sale_customization` module will have a dependency on `point_of_sale`,
    as we are going to do customization in the Point of Sale application. To get started
    with this point quickly, we have prepared an initial `point_of_sale_customization`
    module, and you can grab it from the `Chapter22/00_initial_module/point_of_sale_customization`
    directory in the GitHub repository of this book.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一个名为`point_of_sale_customization`的附加模块。由于我们将在销售点应用程序中进行定制，因此`point_of_sale_customization`模块将依赖于`point_of_sale`模块。为了快速开始，我们已经准备了一个初始的`point_of_sale_customization`模块，您可以从本书的GitHub仓库中的`Chapter22/00_initial_module/point_of_sale_customization`目录中获取它。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All the code used in this chapter can be downloaded from the following GitHub
    repository: [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter22](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter22).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有代码都可以从以下GitHub仓库下载：[https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter22](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter22)。
- en: Adding custom JavaScript/SCSS files
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加自定义JavaScript/SCSS文件
- en: The Point of Sale app uses different asset bundles to manage JavaScript and
    style sheet files. In this recipe, we will learn how to add **SCSS** and **JavaScript**
    files to the Point of Sale asset bundle.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 销售点应用程序使用不同的资产包来管理JavaScript和样式表文件。在本食谱中，我们将学习如何将**SCSS**和**JavaScript**文件添加到销售点资产包中。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First, we will load an SCSS style sheet and a JavaScript file into the Point
    of Sale application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将加载一个SCSS样式表和一个JavaScript文件到销售点应用程序中。
- en: How to do it…
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To load assets into the Point of Sale application, follow these steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要将资产加载到销售点应用程序中，请按照以下步骤操作：
- en: 'Add a new SCSS file at `point_of_sale_customization/static/src/scss/point_of_sale_customization.scss`
    and insert the following code:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`point_of_sale_customization/static/src/scss/point_of_sale_customization.scss`中添加一个新的SCSS文件，并插入以下代码：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add a JavaScript file at `point_of_sale_customization/static/src/js/point_of_sale_customization.js`
    and add the following:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`point_of_sale_customization/static/src/js/point_of_sale_customization.js`中添加一个JavaScript文件，并添加以下内容：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Register these JavaScript and SCSS files in the `point_of_sale assets`:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`point_of_sale assets`中注册这些JavaScript和SCSS文件。
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Install the `point_of_sale_customization` module.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`point_of_sale_customization`模块。
- en: '![Figure 22.1 – Installing the POS Customization module](img/B20997_22_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图22.1 – 安装POS定制模块](img/B20997_22_01.jpg)'
- en: Figure 22.1 – Installing the POS Customization module
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.1 – 安装POS定制模块
- en: To see your changes in action, start the new session from the **Point of Sale
    |** **Dashboard** menu.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看您的更改效果，请从**销售点 |** **仪表板**菜单启动新会话。
- en: How it works…
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: So far, we have loaded one JavaScript file and one SCSS file into the Point
    of Sale application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经将一个JavaScript文件和一个SCSS文件加载到销售点应用程序中。
- en: 'In *step 1*, we changed the background color of the pricing label of the product
    card. After installing the `point_of_sale_customization` module, you will be able
    to see changes to the pricing labels:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，我们更改了产品卡片定价标签的背景颜色。安装`point_of_sale_customization`模块后，您将能够看到定价标签的变化：
- en: '![Figure 22.2 – The updated price labels](img/B20997_22_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图22.2 – 更新的价格标签](img/B20997_22_02.jpg)'
- en: Figure 22.2 – The updated price labels
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.2 – 更新的价格标签
- en: 'In *step 2*, we added the JavaScript file. In it, we added the log to the console.
    In order to see the message, you will need to open your browser’s developer tools.
    In the **Console** tab, you will see the following log. This shows that your JavaScript
    file has loaded successfully. Right now, we have only added the log to the JavaScript
    file, but in upcoming recipes, we will add more to it:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，我们添加了JavaScript文件。在其中，我们向控制台添加了日志。为了看到消息，您需要打开浏览器开发者工具。在**控制台**标签页中，您将看到以下日志。这表明您的JavaScript文件已成功加载。目前，我们只向JavaScript文件中添加了日志，但在未来的菜谱中，我们将添加更多内容：
- en: '![Figure 22.3 – JavaScript loaded (the log in the console)](img/B20997_22_03.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图22.3 – JavaScript已加载（控制台中的日志）](img/B20997_22_03.jpg)'
- en: Figure 22.3 – JavaScript loaded (the log in the console)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.3 – JavaScript已加载（控制台中的日志）
- en: 'In *step 3*, we added the JavaScript file and the SCSS file, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤3*中，我们添加了JavaScript文件和SCSS文件，如下所示：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There’s more…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Odoo also has an add-on module for Point of Sale solutions for restaurants.
    Note that this Point of Sale restaurant module is just an extension of the Point
    of Sale application. If you want to do customization in the restaurant module,
    you will need to add your JavaScript and SCSS files to the same `point_of_sale._assets_pos`
    asset bundle.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo还为餐厅提供了销售点解决方案的附加模块。请注意，这个销售点餐厅模块只是销售点应用程序的扩展。如果您想在餐厅模块中进行定制，您需要将您的JavaScript和SCSS文件添加到相同的`point_of_sale._assets_pos`资产包中。
- en: Adding an action button to the keyboard
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加操作按钮到键盘
- en: As we discussed in the previous point, the Point of Sale application is designed
    in such a way that it works offline. Thanks to this, the code structure of the
    Point of Sale application is different from the remaining Odoo applications. The
    code base of the Point of Sale app is largely written with JavaScript and provides
    different utilities for customization. At this point, we will use one such utility
    and create an action button at the top of the keyboard panel.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，销售点应用程序的设计使其能够离线工作。正因为如此，销售点应用程序的代码结构与剩余的Odoo应用程序不同。销售点应用程序的代码库主要使用JavaScript编写，并为定制提供了不同的实用工具。在此阶段，我们将使用这样一个实用工具，并在键盘面板顶部创建一个操作按钮。
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Here, we will use the `point_of_sale_customization` module created in the *Adding
    custom JavaScript/SCSS files* recipe. We will add a button at the top of the keyboard
    panel. This button will be a shortcut to apply a discount to the order lines.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用在*添加自定义JavaScript/SCSS文件*菜谱中创建的`point_of_sale_customization`模块。我们将在键盘面板顶部添加一个按钮。此按钮将是一个将折扣应用于订单行的快捷方式。
- en: How to do it…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to add a 5% discount action button to the keyboard panel
    for the Point of Sale application:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤将5%折扣操作按钮添加到销售点应用程序的键盘面板：
- en: 'Add the following code to the `/static/src/js/point_of_sale_customization.js`
    file, which will define the action button:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`/static/src/js/point_of_sale_customization.js`文件中，这将定义操作按钮：
- en: '[PRE4]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the QWeb template for the button to the `/``static/src/xml/point_of_sale_customization.xml`
    file:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮的QWeb模板添加到`/static/src/xml/point_of_sale_customization.xml`文件中：
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add a new SCSS file at `point_of_sale_customization/static/src/scss/point_of_sale_customization.scss`
    and insert the following code:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`point_of_sale_customization/static/src/scss/point_of_sale_customization.scss`中添加一个新的SCSS文件，并插入以下代码：
- en: '[PRE6]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Register the QWeb template in the manifest file as follows:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式在清单文件中注册QWeb模板：
- en: '[PRE7]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Update the `point_of_sale_customization` module to apply the changes. After
    that, you will be able to see a **5%Discount** button above the calculator:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`point_of_sale_customization`模块以应用更改。之后，您将能够在计算器上方看到**5%折扣**按钮：
- en: '![Figure 22.4 – The discount button](img/B20997_22_04.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图22.4 – 折扣按钮](img/B20997_22_04.jpg)'
- en: Figure 22.4 – The discount button
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.4 – 折扣按钮
- en: After clicking this, the discount will be applied to the selected order line.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 点击此按钮后，折扣将应用于所选订单行。
- en: How it works..
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In Odoo v17, code based on the Odoo Point of Sale application is completely
    rewritten using the OWL framework. You can learn more about the OWL framework
    in [*Chapter 16*](B20997_16.xhtml#_idTextAnchor929), *The Odoo Web* *Library (OWL)*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo v17中，基于Odoo销售点应用程序的代码完全使用OWL框架重写。您可以在[*第16章*](B20997_16.xhtml#_idTextAnchor929)，*Odoo
    Web库（OWL）*中了解更多关于OWL框架的信息。
- en: To create the action button in the Point of Sale application, you will need
    to *extend* `Component`. Now, `Component` is defined in `@odoo/owl namespace`,
    so to use it in your code, you will need to import it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要在销售点应用程序中创建动作按钮，您需要*扩展*`Component`。现在，`Component`在`@odoo/owl`命名空间中定义，因此要在您的代码中使用它，您需要导入它。
- en: In *step 1*, we imported `Component` from `@odoo/owl`. Then, we created `PosDiscountButton`
    by extending `Component`. In *step 1*, we also imported `ProductScreen` from `@point_of_sale/app/screens/product_screen/product_screen`
    and `usePos` `from @point_of_sale/app/store/pos_hook`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 1*中，我们从`@odoo/owl`中导入了`Component`。然后，我们通过扩展`Component`创建了`PosDiscountButton`。在*步骤
    1*中，我们还从`@point_of_sale/app/screens/product_screen/product_screen`导入了`ProductScreen`，以及从`@point_of_sale/app/store/pos_hook`导入了`usePos`。
- en: Now, `ProductScreen` is used to add a button to the Point of Sale screen via
    the `addControlButton` method.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`ProductScreen`通过`addControlButton`方法被用来在销售点屏幕上添加一个按钮。
- en: '`Component` has some built-in utilities that give access to useful information
    such as order details and the Point of Sale configuration. You can access it via
    the `this.pos =` `usePos()` variable.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`Component`提供了一些内置工具，可以访问有用的信息，例如订单详情和销售点配置。您可以通过`this.pos = usePos()`变量来访问它。'
- en: In our example, we have accessed the current order information via the `this.pos.get_order()`
    method. Then, we used the `set_discount()` method to set a 5% discount.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们通过`this.pos.get_order()`方法访问了当前订单信息。然后，我们使用`set_discount()`方法设置了5%的折扣。
- en: In *step 2* and *step 3*, we added the OWL template, which will be rendered
    over the Point of Sale keyboard. If you wish to learn more about this, please
    refer to [*Chapter 16*](B20997_16.xhtml#_idTextAnchor929), *The Odoo Web* *Library
    (OWL)*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 2*和*步骤 3*中，我们添加了OWL模板，该模板将在销售点键盘上渲染。如果您想了解更多信息，请参阅[*第16章*](B20997_16.xhtml#_idTextAnchor929)，*Odoo
    Web库（OWL）*。
- en: There’s more…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `addControlButton()` method supports one more parameter, which is `condition`.
    This parameter is used to hide/show the button based on some condition. The value
    of this parameter is a function that returns a Boolean. Based on the returned
    value, the Point of Sale system will hide or show the button.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`addControlButton()`方法支持一个额外的参数，即`condition`。此参数用于根据某些条件隐藏/显示按钮。此参数的值是一个返回布尔值的函数。根据返回值，销售点系统将隐藏或显示按钮。'
- en: 'Take a look at the following example for more information:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个更详细的示例：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Making RPC calls
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行RPC调用
- en: Though the Point of Sale application works offline, it is still possible to
    make RPC calls to the server. The RPC call can be used for any operation; you
    can use it for CRUD operations, or to perform an action on the server.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然销售点应用程序可以离线工作，但仍有可能向服务器发出RPC调用。RPC调用可用于任何操作；您可以使用它进行CRUD操作，或在服务器上执行操作。
- en: Now, we will make an RPC call to fetch information about a customer’s last five
    orders.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将进行RPC调用以获取关于客户最后五笔订单的信息。
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Now, we will use the `point_of_sale_customization` module created for the **Adding
    an action** button in the keyboard recipe. We will define the action button. When
    the user clicks on the action button, we will make an RPC call to fetch the order
    information and display it on the popup.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用为键盘配方中的**添加动作**按钮创建的`point_of_sale_customization`模块。我们将定义动作按钮。当用户点击动作按钮时，我们将发出RPC调用以获取订单信息并在弹出窗口中显示它。
- en: How to do it...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Follow these steps to display the last five orders for the selected customer:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤显示所选客户的最后五笔订单：
- en: 'Add the following code to the `/static/src/js/point_of_sale_customization.js`
    file; this will add a new action button to fetch and display the information about
    the last five orders when a user clicks on the button:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`/static/src/js/point_of_sale_customization.js`文件中；这将添加一个新动作按钮，当用户点击按钮时，将获取并显示最后五笔订单的信息：
- en: '[PRE9]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the `onClick` function to the `PosLastOrders` component to manage button
    clicks:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`onClick`函数添加到`PosLastOrders`组件中，以管理按钮点击：
- en: '[PRE10]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the QWeb template for the button to the `/``static/src/xml/point_of_sale_customization.xml`
    file:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮的QWeb模板添加到`/static/src/xml/point_of_sale_customization.xml`文件中：
- en: '[PRE11]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Update the `point_of_sale_customization` module to apply the changes. After
    that, you will be able to see the **Last orders** button above the keyboard panel.
    When this button is clicked, a popup will be displayed with the order information:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`point_of_sale_customization`模块以应用更改。之后，你将能够在键盘面板上方看到**最后订单**按钮。当点击此按钮时，将显示一个包含订单信息的弹出窗口：
- en: '![Figure 22.5 – The last five orders of a customer](img/B20997_22_05.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图22.5 – 客户的最后五笔订单](img/B20997_22_05.jpg)'
- en: Figure 22.5 – The last five orders of a customer
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.5 – 客户的最后五笔订单
- en: If no previous orders are found, a warning will be displayed instead of an order
    list.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有找到以前的订单，将显示警告信息而不是订单列表。
- en: How it works…
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *step 1*, we created the action button. If you want to learn more about the
    action button, refer to the *Adding an action button to the keyboard* recipe in
    this chapter.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，我们创建了操作按钮。如果你想了解更多关于操作按钮的信息，请参阅本章中的*将操作按钮添加到键盘*配方。
- en: Before going into the technical details, let’s understand what we wanted to
    accomplish with this action button. Once clicked, we want to display information
    for the last five orders for the selected customer. There will be a few cases
    where the customer is not selected, or customers have no previous orders. In such
    cases, we want to show a popup with an appropriate message. The RPC utility is
    available with the `this.pos.orm.call` attribute of the component.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解技术细节之前，让我们了解我们希望通过此操作按钮实现什么。一旦点击，我们希望显示所选客户的最后五笔订单的信息。将有一些情况是未选择客户，或者客户没有以前的订单。在这种情况下，我们希望显示一个带有适当信息的弹出窗口。RPC实用工具可通过组件的`this.pos.orm.call`属性使用。
- en: In *step 2*, we added the click-handler function. On clicking the action button,
    the click-handler function will be called. This function will make the RPC call
    the server to fetch the order information.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，我们添加了点击处理函数。点击操作按钮时，将调用点击处理函数。此函数将调用服务器上的RPC以获取订单信息。
- en: We used the `this.pos.orm.call()` method to make RPC calls.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`this.pos.orm.call()`方法来进行RPC调用。
- en: Then, we used the `search_read` method to fetch data through RPC. We passed
    the customer domain to filter the orders. We also passed `limit` keyword arguments
    to fetch only five orders. `this.pos.orm.call()` is an asynchronous method and
    returns a `Promise` object, so to handle the result, you can use the `await` keyword.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用了`search_read`方法通过RPC获取数据。我们传递了客户域以过滤订单。我们还传递了`limit`关键字参数以获取仅五个订单。`this.pos.orm.call()`是一个异步方法，返回一个`Promise`对象，因此要处理结果，你可以使用`await`关键字。
- en: Note
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The RPC call does not work in offline mode. If you have a good internet connection
    and you do not use offline mode frequently, you can use RPCs.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: RPC调用在离线模式下不起作用。如果你有一个良好的互联网连接并且不经常使用离线模式，你可以使用RPC。
- en: Although the Odoo Point of Sale application works offline, a few operations,
    such as creating or updating a customer, require an internet connection, as those
    features use RPC to call internally.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Odoo销售点应用程序可以在离线模式下工作，但一些操作，如创建或更新客户，需要互联网连接，因为这些功能使用RPC进行内部调用。
- en: We displayed the previous order information in the popup. We used `SelectionPopup`,
    which is used to display a selectable list; we used it to show the last five orders.
    We also used `ErrorPopup` to display a warning message when a customer is not
    selected or no previous orders were found.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在弹出窗口中显示了以前的订单信息。我们使用了`SelectionPopup`，它用于显示可选择的列表；我们用它来显示最后五笔订单。我们还使用了`ErrorPopup`来在未选择客户或找不到以前的订单时显示警告信息。
- en: In *step 3*, we added the QWeb template for the action button. The Point of
    Sale application will render this template to display the action button.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤3*中，我们为操作按钮添加了QWeb模板。销售点应用程序将渲染此模板以显示操作按钮。
- en: There’s more…
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There are plenty of other pop-up utilities. For example, `NumberPopup` is used
    to take a number input from the user. Refer to the files in the `@point_of_sale/app/utils/input_popups/number_popup`
    directory to see all these utilities. The `NumberPopup` module is probably a custom
    component or utility function to handle number input popups within a POS application.
    Depending on the context, this module could be responsible for displaying a pop-up
    dialog to input numerical data in a user-friendly way, such as for entering quantities
    or prices in a retail system. Use the following code to open a number popup:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他的弹出工具。例如，`NumberPopup`用于从用户那里获取数字输入。请参阅`@point_of_sale/app/utils/input_popups/number_popup`目录中的文件，以查看所有这些工具。`NumberPopup`模块可能是一个自定义组件或用于处理POS应用程序中数字输入弹出的实用函数。根据上下文，此模块可能负责以用户友好的方式显示弹出对话框输入数值数据，例如在零售系统中输入数量或价格。使用以下代码打开数字弹出窗口：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Modifying the Point of Sale screen UI
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改销售点屏幕UI
- en: The UI of the Point of Sale application is written with the OWL QWeb template.
    In this recipe, we will learn how you can modify UI elements in the Point of Sale
    application.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 销售点应用程序的UI是用OWL QWeb模板编写的。在本教程中，我们将学习如何修改销售点应用程序中的UI元素。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will use the `point_of_sale_customization` module created
    in the *Making RPC calls* recipe. We will modify the UI of the product card and
    display the profit margin per product.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将使用在*制作RPC调用*教程中创建的`point_of_sale_customization`模块。我们将修改产品卡片的UI并显示每个产品的利润率。
- en: How to do it…
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to display the profit margin on the product card:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在产品卡片上显示利润率：
- en: 'Add the following code to the `/models/pos_session.py` file to fetch the extra
    field for the product’s actual price:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`/models/pos_session.py`文件中，以获取产品的实际价格额外字段：
- en: '[PRE13]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following code to `/static/src/xml/point_of_sale_customization.xml`
    in order to display a profit margin product card:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`/static/src/xml/point_of_sale_customization.xml`中，以显示具有利润率的产品卡片：
- en: '[PRE14]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following style sheet to style the margin text:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下样式表来设置利润率文本的样式：
- en: '[PRE15]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Update the `point_of_sale_customization` module to apply the changes. After
    that, you will be able to see the profit margin on the product card:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`point_of_sale_customization`模块以应用更改。之后，您将能够在产品卡片上看到利润率：
- en: '![Figure 22.6 – The profit margins for products](img/B20997_22_06.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图22.6 – 产品的利润率](img/B20997_22_06.jpg)'
- en: Figure 22.6 – The profit margins for products
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.6 – 产品的利润率
- en: If the product cost is not set on a product, then the product card will not
    display a profit margin, so make sure you set the product cost.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有设置产品的成本，则产品卡片将不会显示利润率，因此请确保您设置了产品成本。
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we want to use the `standard_price` field as the purchase cost
    of the product. This field is not loaded by default in Point of Sale applications.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们希望使用`standard_price`字段作为产品的采购成本。这个字段在销售点应用程序中默认不加载。
- en: In *step 1*, we added the `standard_price` field for the `product.product` model.
    After this, the product data will have one more field – `standard_price`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 1*中，我们为`product.product`模型添加了`standard_price`字段。在此之后，产品数据将多出一个字段 – `standard_price`。
- en: In *step 2*, we extended the default product card template. You will need to
    use the `t- inherit` attribute to extend the existing **QWeb** template.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 2*中，我们扩展了默认的产品卡片模板。您需要使用`t-inherit`属性来扩展现有的**QWeb**模板。
- en: Then, you need to use XPath to select the element on which you want to perform
    the operation. If you want to learn more about XPaths, refer to the *Changing
    existing views – view inheritance* recipe in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要使用XPath来选择要执行操作的元素。如果您想了解更多关于XPath的信息，请参阅[*第9章*](B20997_09.xhtml#_idTextAnchor446)，*后端视图*中的*更改现有视图
    – 视图继承*教程。
- en: To fetch the product sale price, we used the `product` properties sent from
    the parent OWL component. Then, we calculated the margin by using the product
    price and product cost. If you want to learn more about this, please refer to
    [*Chapter 16*](B20997_16.xhtml#_idTextAnchor929), *The Odoo Web* *Library (OWL)*.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取产品销售价格，我们使用了从父OWL组件发送的`product`属性。然后，我们通过使用产品价格和产品成本来计算利润率。如果您想了解更多信息，请参阅[*第16章*](B20997_16.xhtml#_idTextAnchor929)，*Odoo
    Web库（OWL）*。
- en: In *step 3*, we added the style sheet to modify the position of the margin element.
    This will add a background color to the margin element and place it under the
    price pill.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 3*中，我们添加了样式表来修改边距元素的定位。这将给边距元素添加一个背景色，并将其放置在价格药丸下方。
- en: Modifying existing business logic
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改现有业务逻辑
- en: In the previous recipes, we saw how to fetch data through an RPC and how to
    modify the UI of the Point of Sale application. In this recipe, we will see how
    you can modify or extend the existing business logic.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的食谱中，我们看到了如何通过RPC获取数据以及如何修改销售点应用的用户界面。在这个食谱中，我们将看到如何修改或扩展现有的业务逻辑。
- en: Getting ready
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will use the `point_of_sale_customization` module created
    in the *Modifying the Point of Sale screen UI* recipe, which is where we fetched
    the purchase price of a product and displayed the product margin. Now, in this
    recipe, we will show a warning to the user if they sell the product below the
    product margin.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用在*修改销售点屏幕UI*食谱中创建的`point_of_sale_customization`模块，在那里我们获取了产品的购买价格并显示了产品利润。现在，在这个食谱中，我们将向用户显示一个警告，如果他们以低于产品利润的价格出售产品。
- en: How to do it…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Most of the business logic of the Point of Sale application is written in JavaScript,
    so we just need to make changes to it to achieve the goal of this recipe. Add
    the following code to `/static/src/js/point_of_sale_customization.js` to show
    a warning when the user sells a product below the purchase price:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 销售点应用的业务逻辑大部分是用JavaScript编写的，所以我们只需对其进行修改即可实现本食谱的目标。将以下代码添加到`/static/src/js/point_of_sale_customization.js`以在用户以低于购买价格出售产品时显示警告：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Update the `point_of_sale_customization` module to apply the changes. After
    the update, add the discount on the order line in such a way that the product
    price becomes less than the purchase price. A popup will appear with the following
    warning:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`point_of_sale_customization`模块以应用更改。更新后，以这种方式在订单行中添加折扣，使产品价格低于购买价格。将出现一个包含以下警告的弹出窗口：
- en: '![Figure 22.7– A warning on a big discount](img/B20997_22_07.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 22.7– 大折扣的警告](img/B20997_22_07.jpg)'
- en: Figure 22.7– A warning on a big discount
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22.7– 大折扣的警告
- en: Note that when you set the product price below the actual cost, a warning will
    be displayed, and it will continue to pop up every time you take an action, such
    as when you change the quantity for the product order.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当你将产品价格设置低于实际成本时，会显示一个警告，并且每次你采取行动时（例如，当你更改产品订单的数量时），它都会继续弹出。
- en: How it works...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Point of Sale component register provides an `extend` method to make changes
    to an existing function. Internally, it monkey-patches the actual component definition.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 销售点组件注册提供了一个`extend`方法来修改现有函数。内部，它通过猴子补丁实际组件定义。
- en: In our example, we modified the `_setValue()` method. The `_setValue()` method
    of `ProductScreen` is called whenever the user makes a change to the order line.
    We wanted to show a warning if the user sets the product price below the product
    cost. So, we defined a new `_setValue()` method and called the `super` method;
    this will make sure that whatever actions the user performs are applied. After
    the call to the `super` method, we wrote our logic, which checks whether the product
    sale price is higher than the actual cost of the product. If not, we then show
    a warning to the user.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们修改了`_setValue()`方法。每当用户更改订单行时，`ProductScreen`的`_setValue()`方法就会被调用。我们希望如果用户将产品价格设置低于产品成本时显示一个警告。因此，我们定义了一个新的`_setValue()`方法并调用了`super`方法；这将确保用户执行的所有操作都会被应用。在调用`super`方法之后，我们编写了我们的逻辑，该逻辑检查产品销售价格是否高于产品的实际成本。如果不是，我们就会向用户显示一个警告。
- en: Note
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Using `super` can break things if it’s not used carefully. If the method is
    inherited from several files, you must call the `super` method; otherwise, it
    will skip the logic in the subsequent inheritance. This sometimes leads to a broken
    internal data state.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用不当，`super`可能会破坏某些东西。如果该方法是从几个文件中继承的，你必须调用`super`方法；否则，它将跳过后续继承中的逻辑。这有时会导致内部数据状态损坏。
- en: We placed our business logic after the default implementation (`super`) is called.
    If you want to write business logic before the default implementation, you can
    do so by moving the `super` call to the end of the function.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在调用默认实现（`super`）之后放置了我们的业务逻辑。如果你想在默认实现之前编写业务逻辑，你可以通过将`super`调用移到函数末尾来实现。
- en: Modifying customer receipts
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改客户收据
- en: When you customize a Point of Sale application, a common request you get from
    customers is to modify customer receipts. In this recipe, you will learn how to
    modify customer receipts.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当您定制销售点应用程序时，客户通常会要求修改客户收据。在本配方中，您将学习如何修改客户收据。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will use the `point_of_sale_customization` module created
    in the *Modifying existing business logic* recipe. We will add one line to the
    Point of Sale receipt to show how much money the customer saved in the order.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将使用在*修改现有业务逻辑*配方中创建的`point_of_sale_customization`模块。我们将向销售点收据添加一行，以显示客户在订单中节省了多少钱。
- en: How to do it…
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to modify a customer receipt in the Point of Sale application:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤修改销售点应用程序中的客户收据：
- en: 'Add the following code to the `/static/src/js/point_of_sale_customization.js`
    file. This will add extra data to the receipt environment:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`/static/src/js/point_of_sale_customization.js`文件中。这将向收据环境添加额外的数据：
- en: '[PRE17]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the following code to `/static/src/xml/point_of_sale_customization.xml`.
    This will extend the default receipt template and add our customization:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`/static/src/xml/point_of_sale_customization.xml`文件中。这将扩展默认的收据模板并添加我们的定制：
- en: '[PRE18]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Update the `point_of_sale_customization` module to apply the changes. After
    that, add a product with the discount and check the receipt; you will see one
    extra line in the receipt:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`point_of_sale_customization`模块以应用更改。之后，添加一个带有折扣的产品并检查收据；您将在收据中看到一行额外的内容：
- en: '![Figure 22.8 – The updated receipt](img/B20997_22_08.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图22.8 – 更新的收据](img/B20997_22_08.jpg)'
- en: Figure 22.8 – The updated receipt
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.8 – 更新的收据
- en: The receipt will not display the **Amount saved** screen if it is zero or negative.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果金额为零或负数，收据将不会显示**节省金额**屏幕。
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: There is nothing new in this recipe. We just updated the receipt by using the
    previous recipes.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方中没有任何新内容。我们只是通过使用之前的配方更新了收据。
- en: In *step 1*, we overrode the `export_for_printing()` function to send more data
    to the receipt environment. Whatever you are sending from the `export_for_printing()`
    method will be available in the QWeb template of the receipt. We compared the
    product’s base price with the product price in the receipt to calculate how much
    money the customer saved. We sent this data to the receipt environment via the
    `saved_amount` key.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，我们覆盖了`export_for_printing()`函数以向收据环境发送更多数据。从`export_for_printing()`方法发送的任何内容都将可在收据的QWeb模板中使用。我们比较了产品的基准价格与收据中的产品价格，以计算客户节省了多少钱。我们通过`saved_amount`键将此数据发送到收据环境。
- en: In *step 2*, we modified the default QWeb template of the receipt. The template
    name of the actual receipt is `OrderReceipt`, so we used it as a value in the
    `t-inherit` attribute. In *step 1*, we’d already sent the information needed to
    modify the receipt. In the QWeb template, we get the saved amount in the `props.data.saved_amount`
    key, so we just add one more `<div>` element before the footer. This will print
    the saved amount in the receipt. If you want to learn more about overriding, refer
    to the *Modifying the Point of Sale screen* *UI* recipe.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，我们修改了收据的默认QWeb模板。实际收据的模板名称是`OrderReceipt`，因此我们将其用作`t-inherit`属性的值。在*步骤1*中，我们已经发送了修改收据所需的信息。在QWeb模板中，我们在`props.data.saved_amount`键中获取保存的金额，所以我们只需在页脚之前添加一个额外的`<div>`元素。这将打印出收据中的节省金额。如果您想了解更多关于覆盖的信息，请参阅*修改销售点屏幕*
    *UI* 烹饪配方。
