- en: Memory Models and Operations on Atomic Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存模型和原子类型的操作
- en: The considerations that need to be made during concurrent programming processes,
    and the problems that follow, are all connected to the way in which Python manages
    its memory. A deep understanding of how variables and values are stored and referenced
    in Python, therefore, would not only help to pinpoint the low-level bugs that
    cause the concurrent program to malfunction but also helps to optimize the concurrent
    codes. In this chapter, we will take an in-depth look into the Python memory model
    as well as its atomic types, specifically their places in the Python concurrency
    ecosystem.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 并发编程过程中需要考虑的问题以及随之而来的问题，都与Python管理其内存的方式有关。因此，对Python中变量和值的存储和引用方式有深入的了解，不仅有助于找出导致并发程序故障的低级错误，还有助于优化并发代码。在本章中，我们将深入研究Python内存模型以及其原子类型，特别是它们在Python并发生态系统中的位置。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The Python memory model, its components that support memory allocation on various
    levels, and the general philosophy in managing memory in Python
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python内存模型，支持不同层次上的内存分配的组件，以及在Python中管理内存的一般理念
- en: The definition of atomic operations, the roles they play in concurrent programming,
    and how to use them in Python
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原子操作的定义，它们在并发编程中的作用，以及如何在Python中使用它们
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the technical requirements for this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求如下：
- en: Have Python 3 installed on your computer
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在计算机上安装Python 3
- en: Download the GitHub repository at [https://github.com/PacktPublishing/Mastering-Concurrency-in-Python](https://github.com/PacktPublishing/Mastering-Concurrency-in-Python)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://github.com/PacktPublishing/Mastering-Concurrency-in-Python](https://github.com/PacktPublishing/Mastering-Concurrency-in-Python)下载GitHub存储库
- en: During this chapter, we will be working with the subfolder titled `Chapter17`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用名为`Chapter17`的子文件夹进行工作
- en: Check out the following video to see the Code in Action: [http://bit.ly/2AiToVy](http://bit.ly/2AiToVy)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码实际操作：[http://bit.ly/2AiToVy](http://bit.ly/2AiToVy)
- en: Python memory model
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python内存模型
- en: You might remember the brief discussion on the method of memory management in
    Python in [Chapter 15](0e30892f-4bb1-4196-93c5-5df1d57428b8.xhtml), *The Global
    Interpreter Lock*. In this section, we will look at the Python memory model in
    greater depth by comparing its memory management mechanism to those of Java and
    C++ and discuss how it relates to the practices of concurrent programming in Python.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得在《全局解释器锁》[第15章](0e30892f-4bb1-4196-93c5-5df1d57428b8.xhtml)中对Python内存管理方法的简要讨论。在本节中，我们将通过将其内存管理机制与Java和C++的内存管理机制进行比较，并讨论它与Python并发编程实践的关系，更深入地了解Python内存模型。
- en: The components of Python memory manager
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python内存管理器的组件
- en: Data in Python is stored in memory in a particular way. To gain an in-depth
    understanding on a high level, regarding how data is handled in concurrent programs,
    we first need to dive deep into the theoretical structure of Python memory allocation.
    In this section, we will discuss how data is allocated in a private heap, and
    the handling of this data via the **Python memory manager***—*an overarching entity
    that ensures the integrity of the data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的数据以特定方式存储在内存中。为了深入了解并发程序中数据的处理方式，我们首先需要深入了解Python内存分配的理论结构。在本节中，我们将讨论数据如何在私有堆中分配，以及通过**Python内存管理器**处理这些数据——这是一个确保数据完整性的总体实体。
- en: The Python memory manager consists of a number of components that interact with
    different entities and support different functionalities. For example, one component
    handles the allocation of memory at a low level by interacting with the memory
    manager of the operating system that Python is running on; it is called the **raw
    memory allocator**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Python内存管理器由许多组件组成，这些组件与不同的实体进行交互并支持不同的功能。例如，一个组件通过与Python运行的操作系统的内存管理器进行交互，处理低级内存的分配；它被称为**原始内存分配器**。
- en: 'On the higher levels, there are also a number of other memory allocators that
    interact with the aforementioned private heap of objects and values. These components
    of the Python memory manager handle object-specific allocations that execute memory
    operations that are specific to the given data and object types: integers have
    to be handled and managed by a different allocator to one that manages strings,
    or one for dictionaries or tuples. As storing and reading instructions varies
    between these data types, these different object-specific memory allocators are
    implemented to gain additional speed while sacrificing some processing space.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在更高的层次上，还有许多其他内存分配器与前述的对象和值的私有堆进行交互。Python内存管理器的这些组件处理特定于对象的分配，执行特定于给定数据和对象类型的内存操作：整数必须由不同的分配器处理和管理，以便处理字符串的分配器或处理字典或元组的分配器。由于这些数据类型之间的存储和读取指令不同，因此实现了这些不同的特定于对象的内存分配器，以获得额外的速度，同时牺牲一些处理空间。
- en: One step lower than the aforementioned raw memory allocator are the system allocators
    from the standard C library (assuming that the Python interpreter under consideration
    is CPython). Sometimes known as general-purpose allocators, these written-in-C
    entities are responsible for helping the raw memory allocator interact with the
    memory manager of the operating system.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述原始内存分配器的下一步是来自标准C库的系统分配器（假设考虑的Python解释器是CPython）。有时被称为通用分配器，这些用C语言编写的实体负责帮助原始内存分配器与操作系统的内存管理器进行交互。
- en: 'The entire model of the Python memory manager described previously can be illustrated
    by the following diagram:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 前面描述的Python内存管理器的整个模型可以用以下图示表示：
- en: '![](assets/24811f24-5c55-448f-bea1-fecc4ca01cc0.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/24811f24-5c55-448f-bea1-fecc4ca01cc0.png)'
- en: Python memory manager components
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Python内存管理器组件
- en: Memory model as a labeled directed graph
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存模型作为一个带标签的有向图
- en: We have learned about the general process of memory allocation in Python, so
    in this section, let's think about how data is stored and referenced in Python.
    Many programmers often think about the memory model in Python as one object graph
    with a label at each node and the edges are directed—in short, it is a labeled
    directed object graph. This memory model was first put into use with the second
    oldest computer programming language, **Lisp** (previously known as LISP).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了Python中的内存分配的一般过程，因此在本节中，让我们思考Python中数据是如何存储和引用的。许多程序员经常将Python中的内存模型想象为一个带有每个节点标签的对象图，边是有向的——简而言之，它是一个带标签的有向对象图。这种内存模型最初是在第二古老的计算机编程语言**Lisp**（以前称为LISP）中使用的。
- en: 'It is often thought of as a directed graph because its memory model keeps track
    of its data and variables via nothing but pointers: the value of every variable
    is a pointer, and this point can be pointing to a symbol, a number, or a subroutine.
    So, these pointers are the directed edges in the object graph, and the actual
    values (symbols, numbers, subroutines) are the nodes in the graph. The following
    diagram is a simplification of the Lisp memory model in its early stages:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它通常被认为是一个有向图，因为它的内存模型通过指针来跟踪其数据和变量：每个变量的值都是一个指针，这个指针可以指向一个符号、一个数字或一个子程序。因此，这些指针是对象图中的有向边，而实际值（符号、数字、子程序）是图中的节点。以下图表是Lisp内存模型早期阶段的简化：
- en: '![](assets/09d714f4-5438-4c69-9731-f4a2c5b29b54.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/09d714f4-5438-4c69-9731-f4a2c5b29b54.png)'
- en: Lisp memory model as an object graph
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Lisp内存模型作为对象图
- en: With this object-graph memory model come a number of advantageous characteristics
    for memory management. First of all, the model offers a significant degree of
    flexibility in terms of reusability; it is possible, and in fact quite easy, to
    write a data structure or a set of instructions for one kind of data type or object
    and then also reuse it on other kinds. In contrast, C is a programming language
    that utilizes a different memory model that does not offer this flexibility, and
    its programmers are usually required to spend a significant amount of time rewriting
    the same data structures and algorithms for different kinds of data types and
    objects.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这种对象图内存模型带来了许多有利的内存管理特性。首先，该模型在可重用性方面提供了相当大的灵活性；可以编写一个数据结构或一组指令，用于一种数据类型或对象，然后在其他类型上重用它是可能的，而且实际上相当容易。相比之下，C是一种利用不同内存模型的编程语言，不提供这种灵活性，其程序员通常需要花费大量时间为不同类型的数据结构和算法重写相同的代码。
- en: Another form of flexibility that this memory model provides is the fact that
    every object can be referenced by any number of pointers (or ultimately variables)
    and therefore be mutated by any of them. We have already seen the effect of this
    characteristic in a sample Python program in [Chapter 15](0e30892f-4bb1-4196-93c5-5df1d57428b8.xhtml), *The
    Global Interpreter Lock*, if two variables reference the same (mutable) object
    (achieved when one variable is assigned to another) and one successfully mutates
    the object via its reference, then the change will also be reflected through the
    reference of the second variable.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这种内存模型提供的另一种灵活性是，每个对象可以被任意数量的指针（或最终变量）引用，因此可以被任何一个变量改变。我们已经在[第15章](0e30892f-4bb1-4196-93c5-5df1d57428b8.xhtml)中的一个Python程序示例中看到了这种特性的影响，《全局解释器锁》，如果两个变量引用相同的（可变）对象（通过将一个变量赋值给另一个变量实现），并且一个成功通过其引用改变了对象，那么这种改变也将通过第二个变量的引用反映出来。
- en: As also discussed in [Chapter 15](0e30892f-4bb1-4196-93c5-5df1d57428b8.xhtml), *The
    Global Interpreter Lock*, this is not similar to the memory management in C++.
    For example, as when a variable (that is not a pointer or a reference) is assigned
    with a specific value, the programming language will copy that specific value
    to the memory location that contains the original variable. Additionally, when
    a variable is assigned with another variable, the memory location of the latter
    will be copied to that of the former; no further connection between these two
    variables is maintained after the assignment.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[第15章](0e30892f-4bb1-4196-93c5-5df1d57428b8.xhtml)中讨论的那样，《全局解释器锁》，这与C++中的内存管理不同。例如，当一个变量（不是指针或引用）被赋予特定值时，编程语言将该特定值复制到包含原始变量的内存位置。此外，当一个变量被赋予另一个变量时，后者的内存位置将被复制到前者的内存位置；在赋值后，这两个变量之间不再保持任何连接。
- en: However, some argue that this can, in fact, be a disadvantage in programming,
    especially concurrent programming, as uncoordinated attempts to mutate a shared
    object can lead to undesirable results. As experienced Python programmers, you
    might have also noticed that type errors (when a variable expected to be one specific
    type is referencing an object of a different, noncompatible type) are quite common
    in Python programming. This is also a direct result of this memory model, because,
    again, a reference pointer can point to anything.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有人认为这实际上可能是编程中的一个缺点，特别是在并发编程中，因为未经协调的尝试去改变共享对象可能导致不良结果。作为经验丰富的Python程序员，你可能也注意到在Python编程中类型错误（当一个变量期望是一个特定类型，但引用了一个不同的、不兼容类型的对象）是相当常见的。这也是这种内存模型的直接结果，因为引用指针可以指向任何东西。
- en: In the context of concurrency
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在并发的背景下
- en: With the theoretical basics of the Python memory model in mind, how can we expect
    it to affect the ecosystem of Python concurrent programming? Fortunately, the
    Python memory model works in favor of concurrent programming in the sense that
    it allows thinking and reasoning about concurrency that is easier and more intuitive. Specifically,
    Python implements its memory model and executes its program instructions in the
    same way that we conventionally expect it to.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑Python内存模型的理论基础时，我们可以期待它如何影响Python并发编程的生态系统？幸运的是，Python内存模型在某种程度上有利于并发编程，因为它允许更容易和更直观地思考和推理并发。具体来说，Python实现了其内存模型，并以我们通常期望的方式执行其程序指令。
- en: To understand this advantage that Python possesses, let's first consider concurrency
    in the Java programming language. To achieve better performance in terms of speed
    in concurrent programs (specifically multithreading programs), Java allows CPUs
    to rearrange the order in which given operations included in Java code are to
    be executed. The rearrangement, however, is made in an arbitrary way so that we
    cannot easily reason the order of execution from just the sequential ordering
    of the code when multiple threads are executing. This leads to the fact that if
    a concurrent program in Java executes in a way that is not intended, the developer
    would need to spend a significant amount of time determining the order of execution
    of the program to pinpoint the bug in their program.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解Python具有的这一优势，让我们首先考虑Java编程语言中的并发。为了在并发程序（特别是多线程程序）中获得更好的性能，Java允许CPU重新排列Java代码中包含的给定操作的执行顺序。然而，重新排列是以任意的方式进行的，因此我们不能仅通过代码的顺序来推断多个线程执行时的执行顺序。这导致了如果Java中的并发程序以意外的方式执行，开发人员需要花费大量时间确定程序的执行顺序，以找出程序中的错误。
- en: Unlike Java, Python has its memory model structured in a way that maintains
    the sequential consistency of its instructions. This means that the order in which
    the instructions are arranged in the Python code specifies the order of their
    execution—no arbitrary rearrangement of the code and, therefore, no surprising
    behavior from the concurrent programs. However, since the rearrangement in Java
    concurrency is implemented in order to achieve better speed for the programs,
    this means that Python is sacrificing its performance to keep its execution simpler
    and more intuitive.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与Java不同，Python的内存模型结构化，保持了其指令的顺序一致性。这意味着Python代码中指令的排列顺序指定了它们的执行顺序——没有代码的任意重新排列，因此并发程序不会出现意外行为。然而，由于Java并发中的重新排列是为了提高程序的速度，这意味着Python为了保持其执行更简单和更直观而牺牲了性能。
- en: Atomic operations in Python
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的原子操作
- en: Another important topic regarding memory management is atomic operations. In
    this subsection, we will be exploring the definition of being atomic in programming,
    the roles that atomic operations have in the context of concurrent programming,
    and finally how to use atomic operations in Python programs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 关于内存管理的另一个重要主题是原子操作。在本小节中，我们将探讨编程中原子性的定义，原子操作在并发编程上下文中的作用，以及如何在Python程序中使用原子操作。
- en: What does it mean to be atomic?
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是原子性？
- en: Let's first examine the actual characteristic of being atomic. If an operation
    is atomic in a concurrent program, then it cannot be interrupted by other entities
    in the program during its execution; an atomic operation can also be called linearizable,
    indivisible, or uninterruptible. Given the nature of race conditions and how common
    they are in concurrent programs, it is quite intuitive to conclude that atomicity
    is a desirable characteristic of a program, as it guarantees the integrity of
    the shared data, and protects it from uncoordinated mutations.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们来检查原子性的实际特征。如果在并发程序中，一个操作是原子的，那么在其执行过程中不能被程序中的其他实体中断；原子操作也可以被称为可线性化、不可分割或不可中断的。鉴于竞争条件的性质以及它们在并发程序中的普遍存在，很容易得出原子性是程序的一个理想特征，因为它保证了共享数据的完整性，并保护它免受不协调的变化。
- en: The term "atomic" refers to the fact that an atomic operation appears instantaneous
    to the rest of the program that it is in. This means that the operation has to
    be executed in a continuous, uninterrupted manner. The most common method of implementing
    atomicity, as you could probably guess, is via mutual exclusion, or locks. Locks,
    as we have seen, require interactions with a shared resource to take place one
    thread or process at a time, thus protecting those interactions of one thread/process
    from being interrupted and potentially corrupted by other competing threads or
    processes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '"原子"一词指的是原子操作对于其所在的程序来说是瞬时的。这意味着操作必须以连续、不间断的方式执行。实现原子性的最常见方法，你可能已经猜到了，是通过互斥或锁。正如我们所见，锁需要一个线程或进程一次与共享资源进行交互，从而保护这些线程/进程的交互不会被其他竞争的线程或进程中断和潜在地破坏。'
- en: If a programmer allows some of the operations in their concurrent program to
    be nonatomic, they would also need to allow those operations to be careful and
    flexible (in the sense of interacting and mutating data) enough so that no errors
    should result from them being interrupted by other operations. If, however, irregular
    and erroneous behaviors were to take place when these operations are interrupted
    during their execution, it would be quite difficult for the programmer to actually
    reproduce and debug those behaviors.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序员允许其并发程序中的一些操作是非原子的，他们还需要允许这些操作足够小心和灵活（在与数据交互和变异的意义上），以便它们不会因为被其他操作中断而产生错误。然而，如果这些操作在执行过程中出现不规则和错误的行为，程序员将很难重现和调试这些行为。
- en: The GIL reconsidered
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GIL重新考虑
- en: One of the major elements in the context of Python atomic operations is, of
    course, the GIL; there are additionally common misconceptions as well as complexities
    regarding the role the GIL plays in atomic operations.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python原子操作的上下文中，一个主要元素当然是GIL；此外还存在一些关于GIL在原子操作中扮演的角色的常见误解和复杂性。
- en: For example, as reading about the definition of atomic operations, some tend
    to argue that all operations in Python are actually atomic, as the GIL actually
    requires threads to execute in a coordinated manner, with only one being able
    to run at any given point. This is, in fact, a false statement. The requirement
    of the GIL that only one thread can execute Python code at a given time does not
    lead to the atomicity of all Python operations; one operation can still be interrupted
    by another, and errors can still result from the mishandling and corruption of
    shared data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，关于原子操作的定义，有些人倾向于认为Python中的所有操作实际上都是原子的，因为GIL实际上要求线程以协调的方式执行，每次只能有一个线程能够运行。事实上，这是一个错误的说法。GIL要求只有一个线程可以在任何给定时间执行Python代码，并不意味着所有Python操作都是原子的；一个操作仍然可以被另一个操作中断，并且错误仍然可能由于对共享数据的错误处理和破坏而导致。
- en: At a lower level, the Python interpreter handles the switching between threads
    in a Python concurrent program. This process is done with respect to bytecode
    instructions, which are compiled Python code that are interpretable and executable
    by machines. Specifically, Python maintains a fixed frequency specifying how often
    the interpreter should switch between one active thread to another and this frequency
    can be set using the built-in `sys.setswitchinterval()` method. Any nonatomic
    operation can be interrupted during its execution by this thread switching event.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在更低的层面上，Python解释器处理Python并发程序中的线程切换。这个过程是根据字节码指令进行的，这些字节码指令是可解释和可执行的Python代码。具体来说，Python维护一个固定的频率，指定解释器应该多久切换一次活动线程到另一个线程，这个频率可以使用内置的`sys.setswitchinterval()`方法进行设置。任何非原子操作都可以在执行过程中被线程切换事件中断。
- en: In Python 2, the default value for this frequency is 1,000 bytecode instructions,
    which means that after a thread has successfully executed 1,000 bytecode instructions,
    the Python interpreter will look for other active threads that are waiting to
    be executed. If there is at least one other waiting thread, the interpreter will
    have the currently running thread to release the GIL and have the waiting thread
    acquire it and thus start the execution of the latter thread.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 2中，这个频率的默认值是1,000个字节码指令，这意味着在一个线程成功执行了1,000个字节码指令后，Python解释器将寻找其他等待执行的活动线程。如果至少有一个其他等待的线程，解释器将要求当前运行的线程释放GIL，并让等待的线程获取它，从而开始执行后者的线程。
- en: In Python 3, the frequency is fundamentally different. The unit used for the
    frequency is now time-based, specifically in seconds. With the default value of
    15 milliseconds, this frequency specifies that if a thread has been executing
    for at least the amount of time equal to the threshold, then the thread switching
    event (together with the releasing and acquiring of the GIL) will take place as
    soon as the thread finishes the execution of the current bytecode instruction.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3中，频率基本上是不同的。现在，频率的单位是基于时间的，具体来说是以秒为单位。默认值为15毫秒，这个频率指定如果一个线程至少执行了等于阈值的时间量，那么线程切换事件（以及GIL的释放和获取）将在线程完成当前字节码指令的执行后立即发生。
- en: Innate atomicity in Python
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的固有原子性
- en: As mentioned previously, an operation can be interrupted during its execution
    if the thread executing it has passed its executing limit (for example, 15 milliseconds
    in Python 3 by default), at which point the operation has to finish its current
    bytecode instruction and give back the GIL to another thread that is waiting.
    This means that the thread-switching event only takes place between bytecode instructions.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，如果执行操作的线程已经超过了执行限制（例如，在Python 3中默认为15毫秒），则操作在执行过程中可以被中断，此时操作必须完成当前的字节码指令，并将GIL交还给另一个等待的线程。这意味着线程切换事件只会发生在字节码指令之间。
- en: There are operations in Python that can be executed in one single bytecode instruction
    and are therefore atomic in nature without the help of external mechanisms, such
    as mutual exclusion. Specifically, if an operation in a thread completes its execution
    in one single bytecode, it cannot be interrupted by the thread-switching event
    as the event only takes place after the current bytecode instruction is completed.
    This characteristic of innate atomicity is very useful, as it allows the operations
    that have it to execute their instructions freely even if no synchronization method
    is being utilized, while still guaranteeing that they will not be interrupted
    and have their data corrupted.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Python中有一些操作可以在一个单一的字节码指令中执行，因此在没有外部机制的帮助下是原子性的，比如互斥。具体来说，如果线程中的操作在一个单一的字节码中完成执行，它就不能被线程切换事件中断，因为事件只会在当前字节码指令完成后才会发生。这种固有原子性的特征非常有用，因为它允许具有这种特性的操作自由地执行其指令，即使没有使用同步方法，同时仍然保证它们不会被中断并且数据不会被破坏。
- en: Atomic versus nonatomic
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原子与非原子
- en: It is important to note that it can be surprising for programmers to learn which
    operations in Python are atomic and which are not. Some might assume that since
    simple operations take less bytecode than complex ones, the simpler an operation
    is, the more likely it is to be innately atomic. However, this is not the case,
    and the only way to determine with certainty which operations are atomic in nature
    is to perform further analyses.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，对程序员来说，了解Python中哪些操作是原子的，哪些不是，可能会令人惊讶。有些人可能会认为，由于简单操作所需的字节码比复杂操作少，因此操作越简单，就越有可能是固有原子的。然而，事实并非如此，确定哪些操作在本质上是原子的唯一方法是进行进一步的分析。
- en: 'According to the documentation of Python 3 (which can be found via this link:
    [docs.python.org/3/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe](https://docs.python.org/3/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe)),
    some examples of innately atomic operations include the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Python 3的文档（可以通过此链接找到：[docs.python.org/3/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe](https://docs.python.org/3/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe)），一些天生的原子操作的例子包括以下内容：
- en: Appending a predefined object to a list
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将预定义对象附加到列表
- en: Extending a list with another list
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用另一个列表扩展列表
- en: Fetching an element from a list
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从列表中获取元素
- en: '"Popping" from a list'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从列表中“弹出”
- en: Sorting a list
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对列表进行排序
- en: Assigning a variable to another variable
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将变量分配给另一个变量
- en: Assigning a variable to an attribute of an object
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将变量分配给对象的属性
- en: Creating a new entry for a dictionary
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为字典创建一个新条目
- en: Updating a dictionary with another dictionary
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用另一个字典更新字典
- en: 'Some operations that are not innately atomic include the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一些不是天生原子的操作包括以下内容：
- en: Incrementing an integer, including using `+=`
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递增整数，包括使用`+=`
- en: Updating an element in a list by referencing another element in that list
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过引用列表中的另一个元素更新列表中的元素
- en: Updating an entry in a dictionary via referencing another entry in that dictionary
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过引用字典中的另一个条目更新字典中的条目
- en: Simulation in Python
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的模拟
- en: 'Let''s analyze the difference between an atomic operation and a nonatomic one
    in an actual Python concurrent program. If you already have the code for this
    book downloaded from the GitHub page, go ahead and navigate to the `Chapter17`
    folder. For this example, we are considering the `Chapter17/example1.py` file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析实际Python并发程序中原子操作和非原子操作之间的区别。如果您已经从GitHub页面下载了本书的代码，请转到`Chapter17`文件夹。对于本例，我们考虑`Chapter17/example1.py`文件：
- en: '[PRE0]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: First of all, we are resetting the thread-switching frequency of the Python
    interpreter to 0.000001 seconds—this is to have the thread switching event take
    place more often than usual and thus amplify any race condition that might be
    in our program.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将Python解释器的线程切换频率重置为0.000001秒——这是为了使线程切换事件比平常更频繁，从而放大我们程序中可能存在的任何竞争条件。
- en: The gist of the program is to increment a simple global counter (`n`) with 1,000
    separate threads, each incrementing the counter once via the `foo()` function.
    Since the counter was originally initialized as `0`, if the program executed correctly,
    we would have that counter holding the value of 1,000 at the end of the program.
    However, we know that the increment operator that we are using in the `foo()`
    function (`+=`) is not an atomic operation, which means it can be interrupted
    by a thread-switching event when applied on a global variable.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的要点是使用1,000个单独的线程递增一个简单的全局计数器（`n`），每个线程通过`foo()`函数递增一次计数器。由于计数器最初被初始化为`0`，如果程序正确执行，我们将在程序结束时得到计数器的值为1,000。然而，我们知道我们在`foo()`函数中使用的递增运算符（`+=`）不是原子操作，这意味着当应用于全局变量时，它可能会被线程切换事件中断。
- en: 'After running the script multiple times, we can observe that there is, in fact,
    a race condition existing in our code. This is illustrated by incorrect values
    of the counter that are less than 1,000\. For example, the following is an output
    I obtained:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在多次运行脚本后，我们可以观察到实际上存在我们代码中的竞争条件。这可以通过计数器的不正确值小于1,000来说明。例如，以下是我得到的一个输出：
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is consistent with what we have previously discussed, that is, since the
    `+=` operator is not atomic, it would need other synchronization mechanisms to
    ensure the integrity of the data that it interacts with from multiple threads
    concurrently. Let's now simulate the same experiment with an operation that we
    know is atomic, specifically **appending a predefined object to a list**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们之前讨论的一致，即，由于`+=`运算符不是原子的，它需要其他同步机制来确保它与多个线程同时交互的数据的完整性。现在让我们用我们知道是原子的操作来模拟相同的实验，具体来说是**将预定义对象附加到列表**。
- en: 'In the `Chapter17/example2.py` file, we have the following code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Chapter17/example2.py`文件中，我们有以下代码：
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Instead of a global counter, we now have a global list that was originally empty.
    The new `foo()` function now takes this global list and appends the integer `1`
    to it. In the rest of the program, we are still creating and running 1,000 separate
    threads, each of which calls the `foo()` function once. At the end of the program,
    we will print out the length of the global list to see if the list has been successfully
    mutated 1,000 times. Specifically, if the length of the list is less than 1,000,
    we will know that there is a race condition in our code, similar to what we saw
    in the previous example.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们不再有一个全局计数器，而是一个最初为空的全局列表。新的`foo()`函数现在获取这个全局列表并将整数`1`附加到它上。在程序的其余部分，我们仍然创建和运行1,000个单独的线程，每个线程调用`foo()`函数一次。在程序结束时，我们将打印出全局列表的长度，以查看列表是否成功地变异了1,000次。具体来说，如果列表的长度小于1,000，我们将知道我们的代码中存在竞争条件，类似于我们在上一个例子中看到的情况。
- en: 'As the `list.append()` method is an atomic operation, however, it is guaranteed
    that there is no race condition when the threads call the `foo()` function and
    interact with the global list. This is illustrated by the length of the list at
    the end of the program. No matter how many times we run the program, the list
    will always have a length of 1,000:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`list.append()`方法是一个原子操作，因此，当线程调用`foo()`函数并与全局列表交互时，可以保证没有竞争条件。这可以通过程序结束时列表的长度来说明。无论我们运行程序多少次，列表的长度始终为1,000：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Even though some operations in Python are innately atomic, it can be quite difficult
    to tell whether a given operation is atomic on its own or not. Since the application
    of nonatomic operations on shared data can lead to race conditions and thus erroneous
    results, it is always recommended that programmers utilize synchronization mechanisms
    to ensure the integrity of the shared data within a concurrent program.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Python中有一些本质上是原子的操作，但很难判断一个给定的操作是否本身是原子的。由于在共享数据上应用非原子操作可能导致竞争条件和错误的结果，因此建议程序员始终利用同步机制来确保并发程序中共享数据的完整性。
- en: Summary
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have examined the underlying structure of the Python memory
    model, as well as how the language manages its values and variables in a concurrent
    programming context. Given the way memory management in Python is structured and
    implemented, the reasoning for the behaviors of a concurrent program can be significantly
    easier than doing the same in another programming language. The ease in understanding
    and debugging concurrent programs in Python, however, also comes with a decrease
    in performance.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们已经研究了Python内存模型的基本结构，以及语言在并发编程环境中如何管理其值和变量。鉴于Python中内存管理的结构和实现方式，与其他编程语言相比，理解并发程序的行为可能会更容易得多。然而，在Python中理解和调试并发程序的便利性也伴随着性能的降低。
- en: Atomic operations are instructions that cannot be interrupted during their execution.
    Atomicity is a desirable characteristic of concurrent operations, as it guarantees
    the safety of data shared across different threads. While there are operations
    in Python that are innately atomic, synchronization mechanisms such as locking
    are always recommended to guarantee the atomicity of a given operation.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 原子操作是在执行过程中不能被中断的指令。原子性是并发操作的一个理想特征，因为它保证了在不同线程之间共享的数据的安全性。虽然Python中有一些本质上是原子的操作，但始终建议使用锁定等同步机制来保证给定操作的原子性。
- en: In the next chapter, we will be looking into how to build a concurrent server
    from scratch. Through this process, we will learn more about implementing communication
    protocols as well as applying concurrency to an existing Python application.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何从头开始构建一个并发服务器。通过这个过程，我们将更多地了解如何实现通信协议以及将并发应用到现有的Python应用程序中。
- en: Questions
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the main components of the Python memory manager?
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python内存管理器的主要组成部分是什么？
- en: How does the Python memory model resemble a labeled directed graph?
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python内存模型如何类似于带标签的有向图？
- en: What are the advantages and disadvantages of the Python memory model in terms
    of developing concurrent applications in Python?
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就Python内存模型在开发Python并发应用程序方面的优缺点是什么？
- en: What is an atomic operation, and why is it desirable in concurrent programming?
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是原子操作，为什么在并发编程中是可取的？
- en: Give three examples of innately atomic operations in Python.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给出Python中本质上是原子操作的三个例子。
- en: Further reading
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information you can refer the following links:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，您可以参考以下链接：
- en: '*The memory models that underlie programming languages* ([http://canonical.org/~kragen/memory-models/](http://canonical.org/~kragen/memory-models/)),K.
    J. Sitaker'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*支持编程语言的内存模型* ([http://canonical.org/~kragen/memory-models/](http://canonical.org/~kragen/memory-models/)),
    K. J. Sitaker'
- en: '*Grok the GIL: How to write fast and thread-safe Python* ([opensource.com/article/17/4/grok-gil](https://opensource.com/article/17/4/grok-gil)), A.
    Jesse Jiryu Davis'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*理解GIL：如何编写快速和线程安全的Python* ([opensource.com/article/17/4/grok-gil](https://opensource.com/article/17/4/grok-gil)),
    A. Jesse Jiryu Davis'
- en: '*Thread Synchronization Mechanisms in Python* ([http://effbot.org/zone/thread-synchronization.htm#atomic-operations](http://effbot.org/zone/thread-synchronization.htm#atomic-operations)),
    Fredrik Lundh'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Python中的线程同步机制* ([http://effbot.org/zone/thread-synchronization.htm#atomic-operations](http://effbot.org/zone/thread-synchronization.htm#atomic-operations)),
    Fredrik Lundh'
- en: '*Memory* *Management* ([https://docs.python.org/3/c-api/memory.html](https://docs.python.org/3/c-api/memory.html)), Python
    Documentation'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*内存* *管理* ([https://docs.python.org/3/c-api/memory.html](https://docs.python.org/3/c-api/memory.html)),
    Python文档'
- en: '*Concurrency* ([jython.org/jythonbook/en/1.0/Concurrency](http://www.jython.org/jythonbook/en/1.0/Concurrency.html)), Jython
    Documentation'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*并发* ([jython.org/jythonbook/en/1.0/Concurrency](http://www.jython.org/jythonbook/en/1.0/Concurrency.html)),
    Jython文档'
- en: '*Memory management in Python* ([anubnair.wordpress.com/2014/09/30/memory-management-in-python/](https://anubnair.wordpress.com/2014/09/30/memory-management-in-python/)), Anu
    B Nair'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Python内存管理* ([anubnair.wordpress.com/2014/09/30/memory-management-in-python/](https://anubnair.wordpress.com/2014/09/30/memory-management-in-python/)),
    Anu B Nair'
