- en: Cloud Computing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云计算
- en: '*Cloud computing* is the distribution of computing services, such as servers,
    storage resources, databases, networks, software, analysis, and intelligence,
    via the internet (*the cloud*). The purpose of this chapter is to provide an overview
    of the main cloud computing technologies in relation to the Python programming
    language.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*云计算*是通过互联网（*云*）分发计算服务（如服务器、存储资源、数据库、网络、软件、分析和智能）的分布。本章的目的是提供与Python编程语言相关的主要云计算技术的概述。'
- en: 'First, we will describe the PythonAnywhere platform, with which we will deploy
    Python applications on the cloud. In the context of cloud computing, two emerging
    technologies will be identified: containers and serverless technologies.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将描述PythonAnywhere平台，我们将使用该平台在云上部署Python应用程序。在云计算的背景下，将确定两种新兴技术：容器和无服务器技术。
- en: '*Containers* represent the new approach to the virtualization of resources,
    and the *serverless *technologies represent a step forward in the field of cloud
    services because they can speed up the release of applications.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*容器*代表了资源虚拟化的新方法，而*无服务器*技术代表了云服务领域的一大步，因为它们可以加快应用程序的发布。'
- en: In fact, you do not have to worry about the provisioning, the servers, or the
    infrastructure configurations. You only have to create functions (namely, Lambda
    functions) that can operate independently from the applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你不必担心配置、服务器或基础设施配置。你只需要创建可以独立于应用程序运行的功能（即Lambda函数）。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: What is cloud computing?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是云计算？
- en: Understanding the cloud computing architecture
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解云计算架构
- en: Developing web applications with PythonAnywhere
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PythonAnywhere开发Web应用程序
- en: Dockerizing a Python application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Python应用程序Docker化
- en: Introducing serverless computing
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍无服务器计算
- en: We will also see how to take advantage of the *AWS Lambda* framework for the
    development of Python applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将看到如何利用*AWS Lambda*框架来开发Python应用程序。
- en: What is cloud computing?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是云计算？
- en: Cloud computing is a computational model for the distribution of services based
    on a set of resources, such as virtual processing, mass memory, and networking,
    which can be dynamically aggregated and activated as platforms to run applications,
    satisfying appropriate levels of service and optimizing the efficiency of resource
    use.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算是基于一组资源（如虚拟处理、大量内存和网络）的服务分发计算模型，这些资源可以作为运行应用程序的平台动态聚合和激活，满足适当的服务水平并优化资源使用的效率。
- en: This can be acquired and released quickly with minimum management effort or
    interaction with the service provider. This cloud model is composed of five essential
    characteristics, three service models, and four deployment models.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过最少的努力或与服务提供商的交互快速获取和释放。这种云模型由五个基本特征、三种服务模型和四种部署模型组成。
- en: 'In particular, the five essential characteristics are as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，五个基本特征如下：
- en: '**Free and on-demand access**: This allows users to access—through *user friendly*
    interfaces—the services offered by the provider without human interaction.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**免费和按需访问**：这允许用户通过*用户友好的*界面访问提供商提供的服务，而无需人工交互。'
- en: '**Ubiquitous access to the network**: Resources are available throughout the
    network and can be accessed—via standard devices—such as *smartphones*, *tablets*,
    and *personal computers*.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络无处不在的访问**：资源遍布整个网络，可以通过标准设备（如*智能手机*、*平板电脑*和*个人电脑*）访问。'
- en: '**Quick elasticity**: This is the ability of the cloud to increase or reduce
    the resources assigned in a rapid and automatic way, such as making it seem that
    they are infinite to the user. This provides great scalability to the system.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速弹性**：这是云能够快速自动增加或减少分配的资源的能力，例如，让用户感觉它们似乎是无限的。这为系统提供了极大的可伸缩性。'
- en: '**Measured service**: Cloud systems constantly monitor the resources offered
    and optimize them automatically based on the estimated use. In this way, the customer
    only pays for the resources that are actually used in that particular session.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测量服务**：云系统持续监控提供的资源，并根据估计的使用量自动优化它们。这样，客户只为该特定会话实际使用的资源付费。'
- en: '**Resource sharing**: The provider provides its resources through a multi-tenant
    model so that they can be assigned and reassigned dynamically, based on the customer''s
    request, and used by multiple consumers:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源共享**：提供商通过多租户模型提供其资源，以便可以根据客户请求动态分配和重新分配，并由多个消费者使用：'
- en: '![](img/2ada1f6c-31da-4700-aa33-d72e0da304a4.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ada1f6c-31da-4700-aa33-d72e0da304a4.png)'
- en: Cloud computing main features
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算的主要特点
- en: However, there are many definitions of cloud computing, each of which has different
    interpretations and meanings. The *National Institute of Standards and Technology* (**NIST**)
    has tried to provide a detailed and official explanation ([https://csrc.nist.gov/publications/detail/sp/800-145/final](https://csrc.nist.gov/publications/detail/sp/800-145/final)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，云计算有许多定义，每个定义都有不同的解释和含义。美国国家标准与技术研究院（**NIST**）试图提供详细和官方的解释（[https://csrc.nist.gov/publications/detail/sp/800-145/final](https://csrc.nist.gov/publications/detail/sp/800-145/final)）。
- en: Another feature (not listed in the definition of NIST, but which is the basis
    of cloud computing) is the concept of virtualization. This is the possibility
    of executing multiple *OSes* on the same physical resources, guaranteeing numerous
    advantages, such as scalability, cost reduction, and greater speed in providing
    new resources to customers.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个特性（虽然在NIST的定义中没有列出，但它是云计算的基础）是虚拟化的概念。这是在相同的物理资源上执行多个*操作系统*的可能性，保证了众多优势，如可扩展性、成本降低和向客户提供新资源时的速度更快。
- en: 'The most common approaches to virtualization are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最常见的虚拟化方法：
- en: Containers
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器
- en: Virtual machines
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机
- en: Both solutions have almost the same advantages as far as the isolation of applications
    is concerned, but they work at different levels of virtualization because the
    containers virtualize the OS and the virtual machines virtualize the hardware. This
    means that the containers are more portable and efficient.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序隔离方面，这两种解决方案几乎具有相同的优势，但它们在虚拟化的不同级别上工作，因为容器虚拟化了操作系统，而虚拟机虚拟化了硬件。这意味着容器更易于移植和高效。
- en: The most common application for virtualizing through containers is Docker. We
    will go through a brief introduction to this framework and we will see how to
    containerize (or dockerize) a Python application.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过容器进行虚拟化的最常见应用是Docker。我们将简要介绍这个框架，并了解如何容器化（或dockerize）一个Python应用程序。
- en: Understanding the cloud computing architecture
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解云计算架构
- en: 'The architecture of cloud computing refers to a series of components and sub-components
    that make up the structure of the system. Typically, it can be grouped into the
    two main sections of *F**rontend* and *B**ackend*:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算的架构指的是构成系统结构的组件和子组件的系列。通常，它可以分为两个主要部分：*前端*和*后端*：
- en: '![](img/ee53b3a7-0361-4d4e-a48a-b3e8ec8f6bb3.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee53b3a7-0361-4d4e-a48a-b3e8ec8f6bb3.png)'
- en: Cloud computing architecture
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算架构
- en: Each section has a very specific meaning and scope and is linked to the other
    via a virtual network or an internet network.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每个部分都有非常具体的意义和范围，并通过虚拟网络或互联网网络相互连接。
- en: The *Frontend* refers to the part of the cloud computing system that is visible
    to the user, which is realized through a series of interfaces and applications
    that allow the consumer to access the cloud system. Different cloud computing
    systems have different UIs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*前端*指的是云计算系统中用户可以看到的部分，它通过一系列接口和应用来实现，允许消费者访问云系统。不同的云计算系统有不同的用户界面。'
- en: The *Backend* is the part that is not visible to the customer. This section
    contains all the resources that allow the provider to provide cloud computing
    services such as servers, storage systems, and virtual machines. The idea behind
    the creation of the backend is to entrust the management of the entire system
    to a single central server, which will, therefore, have to constantly monitor
    traffic and user requests, perform access control, and implement communication
    protocols.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*后端*是用户看不到的部分。这部分包含所有允许提供商提供云计算服务的资源，如服务器、存储系统和虚拟机。后端创建背后的理念是将整个系统的管理委托给单个中央服务器，因此它将不得不不断监控流量和用户请求，执行访问控制，并实施通信协议。'
- en: Among the various components of this architecture, the most important is the
    Hypervisor, also called the*Virtual Machine Manager*. This is a firmware that
    allocates resources dynamically and also allows you to share a single instance
    among multiple users. In short, this is the program that realizes virtualization,
    which is one of the main attributes of cloud computing.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个架构的各个组件中，最重要的是虚拟机管理程序，也称为*虚拟机管理器*。这是一种固件，它可以动态分配资源，并允许您在多个用户之间共享单个实例。简而言之，这是实现虚拟化的程序，这是云计算的主要属性之一。
- en: After providing a definition of cloud computing and explaining the essential
    features, we'll introduce the *service models* in which cloud computing services
    can be provided.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供云计算的定义并解释其基本特性之后，我们将介绍云计算服务可以提供的*服务模型*。
- en: Service models
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务模型
- en: 'The cloud computing services offered by the providers fall into three broad
    categories:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 提供商提供的云计算服务可以分为三大类：
- en: '**S**oftware as a Service (SaaS)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**S**oftware as a Service (SaaS)'
- en: '**P**latform as a Service (PaaS)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**P**latform as a Service (PaaS)'
- en: '**I**nfrastructure as a Service (IaaS)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**I**nfrastructure as a Service (IaaS)'
- en: This classification led to the definition of a scheme that takes the name of
    the **SPI** model (see the **bold** initials in the previous list). Sometimes
    it is called the cloud computing stack, as these categories are based on each
    other.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分类导致了名为**SPI**模型（参见前文列表中的**粗体**首字母）的方案的定义。有时它被称为云计算堆栈，因为这些类别是相互依赖的。
- en: A detailed description of each of these levels will now be given, following
    a top-down approach.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将按自上而下的方法详细描述这些各个层次。
- en: SaaS
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SaaS
- en: A SaaS provider provides users with software applications on-demand, which are
    accessible through any internet device, such as a web browser. Furthermore, the
    provider hosts the software application and the underlying infrastructure, relieving
    the customer from the burden of management and maintenance activities such as
    software updates and the application of security patches.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS提供商向用户提供按需的软件应用程序，这些应用程序可以通过任何互联网设备访问，例如网络浏览器。此外，提供商托管软件应用程序和底层基础设施，从而减轻了客户在软件更新和安全补丁应用等方面的管理和维护负担。
- en: There are many advantages of using this model for both the user and the provider.
    For the user, there is a considerable reduction in management costs, and for the
    provider, they have more control over the traffic, thus allowing them to avoid
    any overloads. An example of SaaS is any web-based email service, such as **Gmail**,
    **Outlook**, **Salesforce**and **Yahoo!**.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种模型对用户和提供商都有许多优点。对于用户来说，管理成本有相当大的降低，而对于提供商来说，他们可以更好地控制流量，从而避免任何过载。SaaS的一个例子是任何基于网络的电子邮件服务，例如**Gmail**、**Outlook**、**Salesforce**和**Yahoo!**。
- en: PaaS
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PaaS
- en: Unlike SaaS, this service refers to the entire development environment of an
    application, not just its use. So, the PaaS solution provides a cloud platform
    that is accessible through a web browser for the development, testing, distribution,
    and management of software applications. Furthermore, the provider provides web-based
    interfaces, a multi-tenant architecture, and communication tools in order to allow
    developers to create applications in a simpler way. This supports the entire life
    cycle of the software and also favoring the cooperation.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与SaaS不同，这种服务指的是应用程序的整个开发环境，而不仅仅是它的使用。因此，PaaS解决方案提供了一个可以通过网络浏览器访问的云平台，用于软件应用的开发、测试、分发和管理。此外，提供商提供基于网络的界面、多租户架构和通信工具，以便开发者能够以更简单的方式创建应用程序。这支持软件的整个生命周期，并有利于合作。
- en: Examples of PaaS are **Microsoft Azure Services**, **Google App Engine**,and
    **Amazon Web Services**.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: PaaS的例子包括**Microsoft Azure Services**、**Google App Engine**和**Amazon Web Services**。
- en: IaaS
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IaaS
- en: IaaS is a model that offers the computing infrastructure as an on-demand service.
    You can, therefore, purchase virtual machines, on which you can run your own software,
    storage resources (with the possibility of rapidly increasing or reducing the
    storage capacity based on your needs), networks, and OS by paying based on what
    you actually use. A dynamic infrastructure of this type adds greater scalability,
    while also significantly reducing costs.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: IaaS是一种提供计算基础设施作为按需服务的模型。因此，您可以购买虚拟机，在这些虚拟机上运行自己的软件，存储资源（根据您的需求，可以快速增加或减少存储容量），网络和操作系统，通过支付实际使用的费用来使用它们。这种类型的动态基础设施增加了更大的可伸缩性，同时也显著降低了成本。
- en: This model is used both by small emerging companies that do not have large capital
    to invest and by established companies seeking to streamline their hardware architecture.
    The range of IaaS sellers is very wide, including **Amazon Web Services**, **IBM**,
    and **Oracle**.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模型被既没有大量资本投资的小型新兴公司，也由寻求简化其硬件架构的成熟公司使用。IaaS销售商的范围非常广泛，包括 **Amazon Web Services**、**IBM**
    和 **Oracle**。
- en: Distribution models
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布模型
- en: 'Cloud computing architectures are not all the same. In fact, there are four
    different distribution models:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算架构并非都是相同的。事实上，有四种不同的分布模型：
- en: '**The public cloud**'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公有云**'
- en: '****The private cloud****'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****私有云****'
- en: '**The cloud community**'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云社区**'
- en: '**The hybrid cloud**'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合云**'
- en: Public cloud
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公有云
- en: This distribution model is open to all, both individual users and companies.
    Typically, the public cloud runs in a data center owned by the service provider
    that handles hardware, software, and other support infrastructure. In this way,
    the user is exempt from any maintenance activities/expenses.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分布模型对所有用户开放，包括个人用户和公司。通常，公有云运行在服务提供商拥有的数据中心中，该数据中心处理硬件、软件和其他支持基础设施。这样，用户可以免除任何维护活动/费用。
- en: Private cloud
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**私有云**'
- en: Also known as *internal clouds*, private clouds offer the same advantages as
    public clouds, but provide greater control over data and processes. This model
    is presented as a cloud infrastructure that works exclusively for a company and
    is therefore managed and hosted within the borders of the given company. Clearly,
    the organization that uses it can extend its architecture to any group that it
    is linked to by a business relationship.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 也称为*内部云*，私有云提供与公有云相同的优势，但提供对数据和流程的更大控制。这种模式被呈现为一个仅为公司工作的云基础设施，因此它在该公司的范围内进行管理和托管。显然，使用它的组织可以将其架构扩展到与其有商业关系的任何群体。
- en: By adopting this type of solution, possible problems concerning the violation
    of sensitive data and industrial espionage are avoided without neglecting the
    possibility of using a simplified, configurable, and high-performing working provisioning
    system. Precisely for this reason, in recent years, the number of companies that
    use the private cloud has increased significantly.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用这种类型的解决方案，可以避免涉及敏感数据违规和工业间谍活动的问题，同时也不忽视使用简化、可配置和性能高的工作配置系统。正因为如此，近年来，使用私有云的公司数量显著增加。
- en: Cloud community
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云社区
- en: Conceptually, this model describes a shared infrastructure that is implemented
    and managed by several companies with common interests. This type of solution
    is rarely used because sharing the responsibilities and management activities
    among the various members of the community could become complicated.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，这种模型描述了一个由多个具有共同利益的公司实施和管理的共享基础设施。这种类型的解决方案很少使用，因为将责任和管理活动在社区的不同成员之间进行分配可能会变得复杂。
- en: Hybrid cloud
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合云
- en: NIST defines this as the result of the composition of the three implementation
    models mentioned previously (the private, public, and community clouds), trying
    to take the advantages of each of the three in order to make up for where the
    others are weaker. The clouds used remain distinct entities, and this can cause
    a lack of operational consistency. Therefore, companies that adopt this model
    have the task of guaranteeing, through proprietary technologies, the interoperability
    of their servers, optimizing them for the specific roles they must play.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: NIST将其定义为之前提到的三种实施模型（私有云、公有云和社区云）的组合结果，试图取其三者之长，以弥补其他方面的不足。所使用的云仍然是独立的实体，这可能导致操作一致性不足。因此，采用这种模式的公司有责任通过专有技术确保其服务器的互操作性，并针对它们必须扮演的具体角色进行优化。
- en: A feature that distinguishes the hybrid cloud from all others is the cloudburst
    or the possibility of being able to dynamically transfer excess traffic from the
    private cloud to the public cloud in the presence of large peak demand.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 混合云与所有其他云的区别在于其云爆发或在大规模峰值需求下能够动态地将私有云中的多余流量转移到公有云中的可能性。
- en: This implementation model is adopted by those companies that intend to share
    their software applications while retaining their sensitive data in internal clouds.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这种实施模型被那些打算共享其软件应用但保留其敏感数据在内部云中的公司采用。
- en: Cloud computing platforms
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云计算平台
- en: 'Cloud computing platforms are sets of software and technologies that enable
    the delivery of resources in the cloud (on-demand, scalable, and virtualized resources). Among
    the most popular platforms are those of Google and, of course, the milestone of
    cloud computing: **Amazon Web Services** (**AWS**). Both support Python as a development
    language.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算平台是一组软件和技术，能够提供云中的资源（按需、可扩展和虚拟化资源）。在最受欢迎的平台中，包括谷歌的以及云计算的里程碑：**亚马逊网络服务**（**AWS**）。两者都支持Python作为开发语言。
- en: However, in the next recipe, we will focus on PythonAnywhere, which is a cloud
    platform developed specifically for the deployment of web applications in the
    Python programming language.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在下一个菜谱中，我们将专注于PythonAnywhere，这是一个专门为在Python编程语言中部署Web应用而开发的云平台。
- en: Developing web applications with PythonAnywhere
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PythonAnywhere开发Web应用
- en: PythonAnywhere is an online hosting development and service environment based
    on the Python programming language. Once registered on the site, you will be directed
    to the dashboard, which includes an advanced shell and text editor that is made
    entirely with HTML code. With this, you can create, modify, and execute your own
    scripts.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: PythonAnywhere是基于Python编程语言的在线托管开发和服务环境。一旦在网站上注册，您将被引导到仪表板，其中包括一个完全用HTML代码制作的先进外壳和文本编辑器。有了这个，您可以创建、修改和执行自己的脚本。
- en: Moreover, this development environment also allows you to choose which version
    of Python to work with. In this, a simple wizard helps us to preconfigure an application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这个开发环境还允许您选择要使用的Python版本。在这里，一个简单的向导帮助我们预先配置应用程序。
- en: Getting ready
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's first see how to get login credentials to the site.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看如何获取网站的登录凭证。
- en: 'The following screenshot shows the various types of subscriptions, and also,
    the possibility of obtaining a free account (please go to [https://www.pythonanywhere.com/registration/register/beginner/](https://www.pythonanywhere.com/registration/register/beginner/)):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了各种订阅类型，以及获得免费账户的可能性（请访问[https://www.pythonanywhere.com/registration/register/beginner/](https://www.pythonanywhere.com/registration/register/beginner/)）：
- en: '![](img/4696816c-2cbe-451c-869b-2f40d7795d20.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4696816c-2cbe-451c-869b-2f40d7795d20.png)'
- en: 'PythonAnywhere: Registration page'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 'PythonAnywhere: 注册页面'
- en: Once access to the site has been obtained (it is recommended that you create
    a beginner account), we log in. Given that the Python shells that are integrated
    into the browsers are very useful, especially for beginners and for introductory
    programming courses, they are certainly not new from a technological point of
    view.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦获得网站访问权限（建议创建一个初学者账户），我们便登录。鉴于集成到浏览器中的Python外壳非常实用，尤其是对于初学者和入门级编程课程，它们在技术层面上当然不是新事物。
- en: 'Instead, the added value of PythonAnywhere is perceived as soon as you log
    in by accessing the personal dashboard:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，PythonAnywhere的增值服务在登录后通过访问个人仪表板即可感知：
- en: '![](img/1154438e-ea7b-4dd5-aa09-ddb777bdf822.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1154438e-ea7b-4dd5-aa09-ddb777bdf822.png)'
- en: 'PythonAnywhere: Dashboard'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 'PythonAnywhere: 仪表板'
- en: 'Through the personal dashboard, we can choose which version of Python to run
    between 2.7 and 3.7, with or without the IPython interface:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过个人仪表板，我们可以在2.7到3.7之间选择要运行的Python版本，是否带有IPython界面：
- en: '![](img/e36f1f2e-0d04-4b54-88d6-6dbe567056e9.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e36f1f2e-0d04-4b54-88d6-6dbe567056e9.png)'
- en: 'PythonAnywhere: Console view'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 'PythonAnywhere: 控制台视图'
- en: 'The number of consoles that can be used varies according to the type of subscription
    you have. In our case, having made a beginner account, we can use two Python consoles at
    most. Once selecting a Python shell, such as version 3.5, the following view should
    open on the web browser:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的控制台数量根据您的订阅类型而有所不同。在我们的例子中，由于我们创建了一个初学者账户，我们最多可以使用两个Python控制台。一旦选择了一个Python外壳，例如版本3.5，以下视图应该在浏览器中打开：
- en: '![](img/53465f5a-186d-489c-9eab-fa193e4199c4.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53465f5a-186d-489c-9eab-fa193e4199c4.png)'
- en: 'PythonAnywhere: Python shell'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'PythonAnywhere: Python外壳'
- en: In the following section, we want to show you how to use PythonAnywhere to write
    a simple web application.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们想向您展示如何使用PythonAnywhere编写一个简单的Web应用。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s have a look at the following steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下步骤：
- en: 'On the Dashboard, open the Web tab:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仪表板上，打开Web选项卡：
- en: '![](img/688c7c96-c296-42e7-8da8-aefc386aff11.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/688c7c96-c296-42e7-8da8-aefc386aff11.png)'
- en: 'PythonAnywhere: Web app view'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 'PythonAnywhere: 网页应用视图'
- en: 'The interface tells us that we don''t have a web application yet. By selecting
    Add a new web app, the following view opens. It tells us that our applications will
    have the following web address: [loginname.pythonanywhere.com](http://loginname.pythonanywhere.com)
    (for this example, the web address of the application will be [giazax.pythonanywhere.com](http://giazax.pythonanywhere.com)):'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 界面告诉我们我们还没有网络应用。通过选择“添加新网络应用”，将打开以下视图。它告诉我们我们的应用将具有以下网络地址：[loginname.pythonanywhere.com](http://loginname.pythonanywhere.com)（在这个例子中，应用的网址将是
    [giazax.pythonanywhere.com](http://giazax.pythonanywhere.com)）：
- en: '![](img/db5b64c1-b102-47f4-b7f2-1eb5d8a79800.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db5b64c1-b102-47f4-b7f2-1eb5d8a79800.png)'
- en: 'PythonAnywhere: Web app wizard'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 'PythonAnywhere: 网络应用向导'
- en: 'When we click on Next, we can select the Python web framework we want to use:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们点击“下一步”时，我们可以选择我们想要使用的 Python 网络框架：
- en: '![](img/c2d207f8-18c7-4def-a938-e7528ea75290.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2d207f8-18c7-4def-a938-e7528ea75290.png)'
- en: 'PythonAnywhere: Web framework wizard'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 'PythonAnywhere: 网络框架向导'
- en: 'We select Flask as a web framework, and then click on Next to choose which
    Python version we want to use, as shown here:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们选择 Flask 作为网络框架，然后点击“下一步”以选择我们想要使用的 Python 版本，如图所示：
- en: '![](img/e70bb841-e4bc-44ea-a3c1-6409acbcbf73.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e70bb841-e4bc-44ea-a3c1-6409acbcbf73.png)'
- en: 'PythonAnywhere: Web framework wizard'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 'PythonAnywhere: 网络框架向导'
- en: Flask is a micro-framework for Python that is easy to install and use, and is
    used by companies such as Pinterest and LinkedIn.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 是一个易于安装和使用的 Python 微型框架，被 Pinterest 和 LinkedIn 等公司使用。
- en: If you don't know what a framework for creating web applications is, then you
    can imagine a set of programs with the aim of facilitating the creation of web
    services such as web servers and APIs. More information on Flask can be found
    at [http://flask.pocoo.org/docs/1.0/](http://flask.pocoo.org/docs/1.0/).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不知道什么是创建网络应用的框架，那么你可以想象一组旨在简化创建网络服务（如网络服务器和 APIs）的程序。有关 Flask 的更多信息，请参阅 [http://flask.pocoo.org/docs/1.0/](http://flask.pocoo.org/docs/1.0/)。
- en: 'In the preceding screenshot, we select Python 3.5 for Flask 1.0.2, then let''s
    click on Next to enter the path for a Python file to use in order to hold the
    Flask application. Here, the default file is selected:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们为 Flask 1.0.2 选择 Python 3.5，然后点击“下一步”以输入用于存储 Flask 应用的 Python 文件的路径。在这里，默认文件被选中：
- en: '![](img/cf31fec4-6cf0-4ff9-ad1c-214ce6194f2a.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf31fec4-6cf0-4ff9-ad1c-214ce6194f2a.png)'
- en: 'PythonAnywhere: Flask project definition'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 'PythonAnywhere: Flask 项目定义'
- en: 'When we click on Next for the final time, the following screen is displayed,
    which summarizes the web application''s configuration parameters:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们最后一次点击“下一步”时，将显示以下屏幕，它总结了网络应用的配置参数：
- en: '![](img/c3ca51d3-dc99-44e5-99bb-5c5196be8342.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3ca51d3-dc99-44e5-99bb-5c5196be8342.png)'
- en: 'PythonAnywhere: Configuration page for giazax.pythonanywhere.com'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'PythonAnywhere: giazax.pythonanywhere.com 的配置页面'
- en: Now, let's see what happens with this.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看会发生什么。
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the address bar of the web browser, type the URL of our web application,
    in our case, `https://giazax.pythonanywhere.com/`. The site shows a simple welcome
    phrase:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页浏览器的地址栏中，输入我们网络应用的 URL，在我们的例子中，`https://giazax.pythonanywhere.com/`。网站显示了一个简单的欢迎语：
- en: '![](img/5e9035b6-5b9d-421d-8aa0-3c6ecb2b0dec.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e9035b6-5b9d-421d-8aa0-3c6ecb2b0dec.png)'
- en: giazax.pythonanywhere.com site page
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: giazax.pythonanywhere.com 网站页面
- en: 'The source code for this application can be seen by selecting Go to directory
    in correspondence with the Source code label:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择与“源代码”标签对应的“进入目录”，可以看到此应用的源代码：
- en: '![](img/df75e642-d6d0-48a7-8f8c-ed458c70f4dd.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df75e642-d6d0-48a7-8f8c-ed458c70f4dd.png)'
- en: 'PythonAnywhere: Configuration page'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 'PythonAnywhere: 配置页面'
- en: 'Here, it is possible to analyze the files that make up the web application:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以分析构成网络应用的文件：
- en: '![](img/9d75d76e-4bb5-4a18-b904-3aabf59b9158.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d75d76e-4bb5-4a18-b904-3aabf59b9158.png)'
- en: 'PythonAnywhere: Project site repository'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 'PythonAnywhere: 项目站点仓库'
- en: 'It is also possible to upload new files and possibly modify the contents. Here,
    we select the `flask_app.py` file of our first web application. The content looks
    like a minimal Flask application:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以上传新文件并可能修改内容。在这里，我们选择我们的第一个网络应用的 `flask_app.py` 文件。内容看起来像是一个最小的 Flask 应用：
- en: '[PRE0]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `route()` decorator is used by Flask to define the URL that should trigger
    the `hello_world` function. This simple function returns the message displayed
    in the web browser.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 使用 `route()` 装饰器来定义应该触发 `hello_world` 函数的 URL。这个简单的函数返回在网页浏览器中显示的消息。
- en: There's more...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The PythonAnywhere shell is made with HTML, making it virtually portable across
    multiple platforms and browsers, including Apple's mobile versions. It is possible
    to keep several shells open (in variable numbers according to the chosen account
    profile), share them with other users, or terminate them as needed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: PythonAnywhere的shell是用HTML制作的，这使得它几乎可以在多个平台和浏览器上便携，包括苹果的移动版本。您可以根据选择的账户配置文件保持多个shell打开（变量数量的shell），与其他用户共享，或根据需要终止它们。
- en: PythonAnywhere has a rather advanced text editor with syntax coloring and automatic
    indentation, through which you can create, modify, and execute your own scripts.
    The files are stored in a storage area of varying size depending on the profile
    of the account, but if there is not enough space or if you wanted a more fluid
    integration with the filesystem of your PC, then PythonAnywhere allows you to
    use a Dropbox account, making your shared folder accessible on the popular storage
    service.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: PythonAnywhere有一个相当先进的文本编辑器，具有语法高亮和自动缩进功能，通过它可以创建、修改和执行自己的脚本。文件存储在根据账户配置不同大小的存储区域中，但如果空间不足或您希望与PC的文件系统有更流畅的集成，那么PythonAnywhere允许您使用Dropbox账户，使您的共享文件夹在流行的存储服务上可访问。
- en: Each shell can contain a WSGI script that corresponds to a specific URL. It
    is also possible to start a bash shell from which to invoke Git and interact with
    the filesystem. Finally, as we have seen, there is a wizard available that allows
    us to preconfigure a **Django** and **web2py** or Flask application.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 每个shell可以包含一个与特定URL对应的WSGI脚本。也可以从bash shell启动，用于调用Git并与文件系统交互。最后，正如我们所看到的，有一个向导可供我们预先配置**Django**和**web2py**或Flask应用程序。
- en: Furthermore, there is the possibility of exploiting a **MySQL** database, which
    is a series of cron jobs that allows us to execute certain scripts periodically.
    Therefore, we will get the true essence of PythonAnywhere*:* deployment of web
    applications at the speed of light.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有利用**MySQL**数据库的可能性，这是一个允许我们定期执行某些脚本的cron作业系列。因此，我们将获得PythonAnywhere的真正精髓：以光速部署Web应用程序。
- en: '*PythonAnywhere* relies completely on the **Amazon EC2** infrastructure, so
    there should be no reason not to trust the service. For this reason, it is strongly
    recommended for those who think of making a personal use. The beginner account
    offers more resources than the corresponding one on **Heroku** ([https://www.heroku.com/](https://www.heroku.com/)),
    the deployment is simpler than on **OpenShift** ([https://www.openshift.com/](https://www.openshift.com/)),
    and the whole system is generally much more flexible than **Google App Engine**
    ([https://cloud.google.com/appengine/](https://cloud.google.com/appengine/)).'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*PythonAnywhere*完全依赖于**Amazon EC2**基础设施，因此没有理由不信任该服务。因此，强烈推荐那些考虑个人使用的人。入门账户提供的资源比**Heroku**([https://www.heroku.com/](https://www.heroku.com/))上的相应账户更多，部署比**OpenShift**([https://www.openshift.com/](https://www.openshift.com/))简单，整个系统通常比**Google
    App Engine**([https://cloud.google.com/appengine/](https://cloud.google.com/appengine/))更加灵活。'
- en: See also
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The main resources on PythonAnywhere can be found here: [https://www.pythonanywhere.com](https://www.pythonanywhere.com).
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PythonAnywhere的主要资源可以在这里找到：[https://www.pythonanywhere.com](https://www.pythonanywhere.com)。
- en: For web programming via Python, PythonAnywhere supports **Django** ([https://www.djangoproject.com/](https://www.djangoproject.com/))
    and **web2py** ([http://www.web2py.com/](http://www.web2py.com/)), in addition
    to **Flask**.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于通过Python进行Web编程，PythonAnywhere支持**Django**([https://www.djangoproject.com/](https://www.djangoproject.com/))和**web2py**([http://www.web2py.com/](http://www.web2py.com/))，除了**Flask**。
- en: As with **Flask**, it is recommended that you visit these sites for information
    on how to work with these libraries.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 与**Flask**类似，建议您访问这些网站获取如何使用这些库的信息。
- en: Dockerizing a Python application
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Python应用程序容器化
- en: Containers are virtualization environments. They include everything that the
    software needs, namely libraries, dependencies, filesystems, and network interfaces.
    Unlike classic virtual machines, all the aforementioned elements share the kernel
    with the machine they are running on. In this way, the impact on the use of the
    resources of the host node is greatly reduced.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是虚拟化环境。它们包括软件所需的一切，即库、依赖项、文件系统和网络接口。与经典虚拟机不同，上述所有元素与它们运行的机器共享内核。这样，对主机节点资源的使用影响大大降低。
- en: This makes the container a very attractive technology in terms of scalability,
    performance, and isolation. Containers are not young technology; they had success
    with the launch of Docker in 2013\. Since then, they have completely revolutionized
    the standards used for application development and management.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得容器在可扩展性、性能和隔离性方面成为一种非常吸引人的技术。容器不是一种新技术；它们在2013年Docker发布时取得了成功。从那时起，它们彻底改变了用于应用程序开发和管理的标准。
- en: Docker is a container platform based on the implementation of **Linux Containers **(**LXC**),
    which extends the functionality of this technology with the ability to manage
    containers as self-contained images, and adds additional tools for coordinating
    their life cycle and saving their state.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个基于**Linux容器**（**LXC**）实现的容器平台，它通过将容器作为自包含的镜像来管理其功能，并添加了额外的工具来协调它们的生命周期和保存它们的状态。
- en: The idea of containerization is precisely to allow a given application to be
    executed on any type of system since all its dependencies are already included
    in the container itself.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化的想法正是允许特定的应用程序在任何类型的系统上执行，因为所有依赖项都已经包含在容器本身中。
- en: In this way, the application becomes highly portable and can be easily tested
    and deployed on any type of environment, both on-premises and, above all, in the
    cloud.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式，应用程序变得高度便携，可以轻松地在任何类型的环境中进行测试和部署，无论是在本地还是在云中。
- en: Now, let's see how to dockerize a Python application using Docker.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用Docker将Python应用程序docker化。
- en: Getting ready
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The Docker team''s intuition was to take the concept of a container and build
    an ecosystem around it that would simplify its use. This ecosystem includes a
    series of tools:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Docker团队的想法是将容器概念作为核心，并围绕它构建一个生态系统，以简化其使用。这个生态系统包括一系列工具：
- en: Docker engine ([https://www.docker.com/products/docker-engine](https://www.docker.com/products/docker-engine))
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker引擎 ([https://www.docker.com/products/docker-engine](https://www.docker.com/products/docker-engine))
- en: Docker toolbox ([https://docs.docker.com/toolbox/](https://docs.docker.com/toolbox/))
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker工具箱 ([https://docs.docker.com/toolbox/](https://docs.docker.com/toolbox/))
- en: Swarm ([https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/))
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swarm ([https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/))
- en: Kitematic ([https://kitematic.com/](https://kitematic.com/))
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kitematic ([https://kitematic.com/](https://kitematic.com/))
- en: Installing Docker for Windows
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Docker for Windows
- en: 'The installation is quite simple: once you have downloaded the installer ([https://docs.docker.com/docker-for-windows/install/](https://docs.docker.com/docker-for-windows/install/)),
    just run it and you''re done. The installation process is generally very linear.
    The only thing that needs attention is the final phase of the installation, in
    which it might be required to enable Hyper-V features. If so, then we accept and
    restart the machine.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程相当简单：一旦下载了安装程序([https://docs.docker.com/docker-for-windows/install/](https://docs.docker.com/docker-for-windows/install/))，只需运行它即可完成。安装过程通常是线性的。唯一需要注意的只是安装的最后阶段，可能需要启用Hyper-V功能。如果是这样，那么我们接受并重新启动机器。
- en: Once the computer is restarted, the Docker icon should appear in the system
    tray in the bottom right of the screen.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机重启后，Docker图标应该出现在屏幕右下角的系统托盘中。
- en: 'Open Command Prompt or the PowerShell console and check whether everything
    is okay by executing the `docker version` command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令提示符或PowerShell控制台，通过执行`docker version`命令来检查一切是否正常：
- en: '[PRE1]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The most interesting part of the output is the subdivision that is made between
    the client and the server. The client is our local Windows system, while the server
    is the Linux virtual machine that Docker instantiated behind the scenes. The parts
    communicate with each other thanks to the API layer, as mentioned in the introduction
    of this recipe.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中最有趣的部分是客户端和服务器之间的细分。客户端是我们的本地Windows系统，而服务器是Docker在幕后实例化的Linux虚拟机。这些部分通过介绍中提到的API层相互通信。
- en: Now, let's see how to containerize (or dockerize) a simple Python application.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何将一个简单的Python应用程序容器化（或docker化）。
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s imagine we want to deploy the following Python application, which we
    call `dockerize.py`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设我们想要部署以下Python应用程序，我们称之为`dockerize.py`：
- en: '[PRE2]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The example application uses the `Flask` module. It implements a simple web
    application at the localhost address, `5000`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 示例应用程序使用了`Flask`模块。它在一个本地的`5000`地址上实现了一个简单的Web应用程序。
- en: 'The first step is to create the following text file, with the extension of `.py`,
    which we will call `Dockerfile.py`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建以下文本文件，文件扩展名为`.py`，我们将称之为`Dockerfile.py`：
- en: '[PRE3]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The directives listed in the previous code perform the following tasks:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 之前代码中列出的指令执行以下任务：
- en: '`FROM python: alpine3.7` instructs Docker to use Python version 3.7.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FROM python: alpine3.7`指令指示Docker使用Python 3.7版本。'
- en: '`COPY` copies the application into the container image.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COPY`将应用程序复制到容器镜像中。'
- en: '`WORKDIR` sets the working directory (`WORKDIR`).'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WORKDIR`设置工作目录（`WORKDIR`）。'
- en: The `RUN` instruction calls the `pip` installer, pointing to the `requirements.txt` file.
    It contains the list of dependencies that the application must execute (in our
    case the only dependence is `flask`).
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RUN`指令调用`pip`安装器，指向`requirements.txt`文件。它包含应用程序必须执行（在我们的案例中，唯一的依赖是`flask`）的依赖项列表。'
- en: The `EXPOSE` directive exposes to the port that is used by Flask.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EXPOSE`指令将端口暴露给Flask使用的端口。'
- en: 'So, in summary, we have written three files:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总结一下，我们编写了三个文件：
- en: 'The application to be containerized: `dockerize.py`'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要容器化的应用程序：`dockerize.py`
- en: '`Dockerfile`'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dockerfile`'
- en: The dependency list file
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖项列表文件
- en: 'So, we need to create an image of the `dockerize.py` application:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要创建`dockerize.py`应用程序的镜像：
- en: '[PRE4]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will tag the `my-python-app` image and build it.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为`my-python-app`镜像打上标签并构建它。
- en: How it works...
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'After the `my-python-app` image is built, you can run it as a container:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建了`my-python-app`镜像之后，你可以将其作为容器运行：
- en: '[PRE5]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The application is then started as a container, after which the name parameter
    sends the name to the container and the `-p` parameter maps the `5000` host port to
    the container port of `5000`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将应用程序作为容器启动，之后名称参数将名称发送到容器，`-p`参数将主机的`5000`端口映射到容器的`5000`端口。
- en: 'Next, you need to open your web browser, then on the address bar, type `localhost:
    5000`. If everything worked the right way, then you should see the following web
    page:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，你需要打开你的网络浏览器，然后在地址栏中输入`localhost: 5000`。如果一切正常，你应该会看到以下网页：'
- en: '![](img/bbba23ab-e0cf-4174-9c0e-63b7b8a520b6.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bbba23ab-e0cf-4174-9c0e-63b7b8a520b6.png)'
- en: Docker application
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Docker应用程序
- en: Docker runs the `dockerize.py` container by using the `run` command, and the
    result is a web application. The image contains the instructions necessary for
    the operation of the container.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Docker通过使用`run`命令运行`dockerize.py`容器，结果是一个网络应用程序。该镜像包含容器操作所需的指令。
- en: The correlation between container and image can be understood by referring to
    the object-oriented programming paradigm by associating the image with a class and
    the container with the class instance.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将镜像与类关联，将容器与类实例关联，可以通过面向对象编程范式来理解容器和镜像之间的关系。
- en: 'It is useful to recap what happens when we create an instance of a container:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 有用的是回顾一下我们创建容器实例时发生的情况：
- en: The image of the container is (if not already present) unloaded locally.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器镜像（如果尚未存在）将在本地卸载。
- en: An environment in which to start the container is created.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个启动容器的环境。
- en: A message is printed on the screen.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 屏幕上打印了一条消息。
- en: The previously created environment is then abandoned.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后丢弃之前创建的环境。
- en: This all takes place in a few seconds and with a simple, intuitive, and readable
    command.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都在几秒钟内完成，使用简单、直观且易于阅读的命令。
- en: There's more...
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Apparently, containers and virtual machines seem to be very similar concepts.
    But although these two solutions have common characteristics, they are profoundly
    different technologies, in the same way, that we must start thinking about how
    the architectures of our applications are different. We can create a container
    with our monolithic application inside, but in this way, we will not fully exploit
    the strength of the containers, and therefore, of Docker.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，容器和虚拟机似乎是非常相似的概念。但尽管这两种解决方案有共同的特征，它们是深刻不同的技术，就像我们必须开始思考我们应用程序的架构是如何不同的。我们可以创建一个包含我们的单体应用程序的容器，但这样，我们将无法充分利用容器（以及Docker）的优势。
- en: A possible software architecture suitable for a container infrastructure is
    the classic microservice architecture. The idea is to break down the application
    into many small components—each with their own specific task—that are able to
    exchange messages and cooperate with each other. The deployment of these components
    will then take place individually, in the form of many containers.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于容器基础设施的可能软件架构是经典的微服务架构。其理念是将应用程序分解成许多小的组件——每个组件都有其特定的任务——能够交换消息并相互协作。这些组件的部署将以许多容器的形式单独进行。
- en: 'A scenario that can be handled with microservices is absolutely impractical
    with a virtual machine since every new virtual machine instantiated would require
    a good expenditure of energy for the host machine. Containers, on the other hand,
    are very light, since they carry out completely different virtualization from
    that practiced by virtual machines:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可以用微服务处理的场景，用虚拟机处理则完全不切实际，因为每个新实例化的虚拟机都会要求主机机器消耗大量的能量。另一方面，容器非常轻量，因为它们执行的是与虚拟机完全不同的虚拟化：
- en: '![](img/f52f2b34-c17f-4138-80f4-e59f1fc1210e.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f52f2b34-c17f-4138-80f4-e59f1fc1210e.png)'
- en: Microservice architecture in virtual machine and Docker implementation
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机中的微服务架构和 Docker 实现
- en: In virtual machines, a tool called a **Hypervisor** takes care of reserving
    (statically or dynamically) a certain amount of resources from the host OS to
    be dedicated to one or more OSes, called **guests** or **hosts**. A guest OS will
    be completely isolated from the host OS. This mechanism is very expensive in terms
    of resources, so the idea of combining a microservice with a virtual machine is
    completely impossible.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟机中，一个名为 **Hypervisor** 的工具负责从主机操作系统预留（静态或动态）一定数量的资源，以专门用于一个或多个称为 **guests**
    或 **hosts** 的操作系统。客户操作系统将完全隔离于主机操作系统。这种机制在资源方面非常昂贵，因此将微服务与虚拟机结合起来的想法是完全不可能的。
- en: Containers, on the other hand, make a completely different contribution to the
    issue. The isolation is much blander and all the running containers share the
    same kernel as the underlying OS. Hypervisor overhead completely disappears, and
    a single host can host hundreds of containers.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 与此相反，容器对问题的贡献完全不同。隔离性更加平淡无奇，所有运行的容器都与底层操作系统共享相同的内核。虚拟机管理程序的开销完全消失，单个主机可以托管数百个容器。
- en: 'When we ask Docker to run a container from its image, it must be present on
    the local disk, otherwise Docker will warn us of the problem (with a message reading
    Unable to find image ''hello-world: latest'' locally) and will download it autonomously.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '当我们要求 Docker 从其镜像运行一个容器时，它必须存在于本地磁盘上，否则 Docker 会警告我们问题（显示无法在本地找到 ''hello-world:
    latest'' 镜像的消息）并自动下载它。'
- en: 'To find out which images were downloaded from Docker on our computer, we use
    the `docker images` command:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 要找出我们计算机上从 Docker 下载了哪些镜像，我们使用 `docker images` 命令：
- en: '[PRE6]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The repository is a container of related images. For example, the dockerize
    repository contains various versions of the dockerize image. In the Docker world,
    the term **tag** is more correctly used to express the concept of image versioning.
    In the preceding code example, the image has been tagged as the latest and is
    the only tag available for the dockerize repository.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库是相关镜像的容器。例如，dockerize 仓库包含 dockerize 镜像的各种版本。在 Docker 世界中，术语 **tag** 更准确地用来表达镜像版本化的概念。在先前的代码示例中，镜像已被标记为最新版本，并且是
    dockerize 仓库中唯一的标记。
- en: 'The latest tag is the default tag: whenever we refer to a repository without
    specifying the tag name, Docker will implicitly refer to the latest tag, and if
    this does not exist, then an error will be shown. Therefore, as a best practice,
    the repository tag form would be preferable as it allows greater predictability
    regarding the content of the image, avoiding possible conflicts between containers
    and errors due to the lack of the latest tag.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 最新标记是默认标记：当我们提到仓库而没有指定标记名称时，Docker 会隐式地引用最新标记，如果这个标记不存在，则会显示错误。因此，作为一个最佳实践，仓库标记形式会更可取，因为它允许对镜像内容的预测性更高，避免容器之间可能出现的冲突以及由于缺少最新标记而导致的错误。
- en: See also
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Containertechnology is a very broad concept that can be explored by consulting
    numerous articles and examples of applications on the web. However, before starting
    this long and difficult journey, it is advisable to start from the website ([https://www.docker.com/](https://www.docker.com/)),
    which is complete and fully informative.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 容器技术是一个非常广泛的概念，可以通过查阅网络上的众多文章和应用程序示例来探索。然而，在开始这段漫长而艰难的旅程之前，建议从网站 ([https://www.docker.com/](https://www.docker.com/))
    开始，该网站内容全面，信息丰富。
- en: In the next section, we will examine the main features of serverless computing,
    whose main goal is to make it easier for a software developer to compose code
    that is designed to run on a cloud platform.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨无服务器计算的主要功能，其主要目标是使软件开发者更容易编写旨在在云平台上运行的代码。
- en: Introducing serverless computing
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍无服务器计算
- en: In recent years, a new service model named **Function as a Service** (**FaaS**) has
    been developed, which is also known as **serverless computing**.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在近年来，一种名为 **函数即服务** (**FaaS**) 的新服务模型得到了发展，它也被称为 **无服务器计算**。
- en: Serverless computing is a cloud computing paradigm that allows the execution
    of applications without worrying about problems related to the underlying infrastructure.
    The term **serverless** could be misleading; in fact, it could be thought that
    this model does not foresee the use of processing servers. In reality, it indicates
    that the provisioning, scalability, and management of the servers on which the
    applications are executed are administered automatically and in a completely transparent
    manner for the developer. Everything is possible thanks to a new architecture
    model called **serverless**.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器计算是一种云计算范式，允许在不担心与底层基础设施相关问题的前提下执行应用程序。术语 **无服务器** 可能具有误导性；实际上，可能会认为这种模型没有预见处理服务器的使用。实际上，它表明应用程序执行的服务的配置、可伸缩性和管理都是自动进行的，并且对开发者来说是完全透明的。所有这一切都得益于一个名为
    **无服务器** 的新架构模型。
- en: 'The first FaaS model dates back to **Amazon**, when the **AWS Lambda** service
    was released in 2014\. Over time, other alternatives were added to the Amazon
    solution, which were developed by other major vendors such as **Microsoft**, with
    its **Azure Functions**, and by **IBM** and **Google**, with their own **Cloud
    Functions**. There are also valid open source solutions: among the most commonly
    used, we have **Apache OpenWhisk**, which is used by **IBM** on **Bluemix** for
    its serverless offering, but also **OpenLambda** and **IronFunctions**, with the
    latter being based on Docker''s container technology.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 FaaS 模型可以追溯到 **Amazon**，当时在 2014 年发布了 **AWS Lambda** 服务。随着时间的推移，亚马逊解决方案中添加了其他替代方案，这些替代方案由其他主要供应商开发，例如拥有
    **Azure Functions** 的 **Microsoft**，以及 **IBM** 和 **Google**，它们分别拥有自己的 **Cloud
    Functions**。还有有效的开源解决方案：在常用的解决方案中，我们有 **Apache OpenWhisk**，它被 **IBM** 在 **Bluemix**
    上用于其无服务器产品，还有 **OpenLambda** 和 **IronFunctions**，后者基于 Docker 的容器技术。
- en: In this recipe, we see how to implement a serverless Python function via **AWS
    Lambda**.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们看到了如何通过 **AWS Lambda** 实现无服务器 Python 函数。
- en: Getting ready
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: AWS is a whole class of cloud services offered and administered through a common
    interface. The common interface through which the services are offered in the
    AWS web console is reachable at [https://console.aws.amazon.com/](https://console.aws.amazon.com/).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 是通过一个通用界面提供和管理的整个类别的云服务。[https://console.aws.amazon.com/](https://console.aws.amazon.com/)
    是 AWS 网络控制台中提供服务的通用界面可访问的地址。
- en: This type of service is charged. However, for the first year, a *free tier* is
    available. This a set of services use the minimum amount of resources and can
    be used for free to both evaluate the services and for the development of applications.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此类服务是收费的。然而，在第一年，提供 *免费层*。这是一个使用最少资源的服务集，可以免费用于评估服务和开发应用程序。
- en: For details on how to create a free account with AWS, please refer to the official
    Amazon documentation at [https://aws.amazon.com](https://aws.amazon.com/).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何创建 AWS 免费账户的详细信息，请参阅官方亚马逊文档[https://aws.amazon.com](https://aws.amazon.com/)。
- en: In these sections, we will outline the basics of running code in AWS Lambda
    without having to provision or manage any servers. We will show how to create
    a `Hello World` function in Lambda by using the AWS Lambda console. We will also
    explain how to manually call up the Lambda function by using sample event data
    and how to interpret the output parameters. All the operations shown in this tutorial
    can be performed as part of the free plan at [https://aws.amazon.com/free](https://aws.amazon.com/free).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些部分中，我们将概述在 AWS Lambda 中运行代码的基本知识，而无需配置或管理任何服务器。我们将展示如何使用 AWS Lambda 控制台创建
    `Hello World` 函数。我们还将解释如何使用示例事件数据手动调用 Lambda 函数以及如何解释输出参数。本教程中所示的所有操作都可以作为免费计划的一部分在
    [https://aws.amazon.com/free](https://aws.amazon.com/free) 上执行。
- en: How to do it...
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s have a look at the following steps:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下步骤：
- en: 'The first thing to do is log in to the Lambda console ([https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)).
    Then, you need to locate and select Lambda under compute in order to open the
    AWS Lambda console (which is highlighted in green in the following screenshot):'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首件事是登录 Lambda 控制台（[https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)）。然后，您需要找到并选择计算下的
    Lambda 以打开 AWS Lambda 控制台（如下面的截图所示，以绿色突出显示）：
- en: '![](img/e9d3929c-8fd7-49e4-ad1f-2f8a4f35040c.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9d3929c-8fd7-49e4-ad1f-2f8a4f35040c.png)'
- en: 'AWS: Selecting a Lambda service'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: AWS：选择 Lambda 服务
- en: 'Then, in the AWS Lambda console, select Get Started Now and then create a Lambda
    function:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在 AWS Lambda 控制台中，选择立即开始，然后创建 Lambda 函数：
- en: '![](img/320f0ad3-408b-4960-9122-c930eb52b466.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/320f0ad3-408b-4960-9122-c930eb52b466.png)'
- en: 'AWS: Lambda start page'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: AWS：Lambda 启动页面
- en: In the filter box, type `hello-world-python` and select the hello-world-pythonblueprint.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在过滤器框中，键入 `hello-world-python` 并选择 hello-world-python 蓝图。
- en: 'Now we need to configure the Lambda function. The following list shows the
    configurations and provides example values:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要配置 Lambda 函数。以下列表显示了配置并提供示例值：
- en: '**Configure function**:'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置函数**：'
- en: '**Name**: Enter the name of the function here. For this tutorial, enter `hello-world-python`.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：在此处输入函数的名称。对于本教程，请输入 `hello-world-python`。'
- en: '**Description**: Here, you can enter a brief description of the function. This
    box is pre-filled with the phrase A starter AWS Lambda Function.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：在这里，您可以输入函数的简要描述。此框预先填充了短语“一个入门 AWS Lambda 函数”。'
- en: '**Runtime**: At the moment, it is possible to write the code of the Lambda
    function in Java, Node.js, and Python 2.7, 3.6, and 3.7\. For this tutorial, set
    up Python 2.7 as a runtime.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时**：目前，可以编写 Lambda 函数的代码，包括 Java、Node.js 和 Python 2.7、3.6 和 3.7。对于本教程，设置
    Python 2.7 作为运行时。'
- en: '**Lambda function code**:'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Lambda 函数代码**：'
- en: As you can see in the following screenshot, it is possible to review the Python
    sample code.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如您在以下截图中所见，可以查看 Python 示例代码。
- en: '**Lambda function handler and role**:'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Lambda 函数处理程序和角色**：'
- en: 'Handler: You can specify a method in which AWS Lambda can start executing the
    code. AWS Lambda provides event data as input to the handler, which will process
    the events. In this example, Lambda identifies the event from the example code,
    so the field will be compiled with lambda_function.lambda_handler.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序：您可以为 AWS Lambda 指定一个启动执行代码的方法。AWS Lambda 将事件数据作为输入提供给处理程序，处理程序将处理这些事件。在此示例中，Lambda
    从示例代码中识别事件，因此该字段将编译为 lambda_function.lambda_handler。
- en: 'Role: Click on the drop-down menu and select Basic Execution Role:'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色：单击下拉菜单并选择基本执行角色：
- en: '![](img/7743d286-d524-4125-9c76-5b27e8bb07ed.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7743d286-d524-4125-9c76-5b27e8bb07ed.png)'
- en: AWS Configure function page
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 配置函数页面
- en: 'At this point, it is necessary to create a role for execution (named IAM Role)
    with the necessary authorizations to be interpreted by AWS Lambda as the executor
    of the Lambda function. By clicking Allow, the Configure function page will be
    returned, and the lambda_basic_execution function will be selected:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，有必要创建一个执行角色（命名为 IAM 角色）并具有 AWS Lambda 作为 Lambda 函数执行者所需的授权。通过点击允许，将返回配置函数页面，并选择
    lambda_basic_execution 函数：
- en: '![](img/6a8575e9-23f0-41ac-952d-67f44104f573.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a8575e9-23f0-41ac-952d-67f44104f573.png)'
- en: 'AWS: Role summary page'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: AWS：角色摘要页面
- en: 'The console saves the code in a compressed file, which represents the distribution
    package. The console then loads the distribution package into AWS Lambda to create
    the Lambda function:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制台将代码保存为压缩文件，该文件代表分发包。然后，控制台将分发包加载到 AWS Lambda 中以创建 Lambda 函数：
- en: '![](img/60142c8f-cb80-4dc5-9fa2-cb8761f5164b.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60142c8f-cb80-4dc5-9fa2-cb8761f5164b.png)'
- en: 'AWS: Lambda review page'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: AWS：Lambda审查页面
- en: 'It is now possible to test the functions, check the results, and display the
    logs:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以测试函数，检查结果，并显示日志：
- en: 'To run our first Lambda function, click on Test:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行我们的第一个Lambda函数，请点击测试：
- en: '![](img/1731dab3-8c0f-4dcd-8550-ecc283af3b75.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1731dab3-8c0f-4dcd-8550-ecc283af3b75.png)'
- en: 'AWS: Lambda testing page'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: AWS：Lambda测试页面
- en: Enter an event in the pop-up editor to test the function.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出编辑器中输入一个事件以测试该函数。
- en: 'Select Hello World from the Sample event template list on the Input test event
    page:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在输入测试事件页面上从示例事件模板列表中选择Hello World：
- en: '![](img/58d60050-f25e-4828-a340-6059c227b0ac.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/58d60050-f25e-4828-a340-6059c227b0ac.png)'
- en: 'AWS: Lambda template'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: AWS：Lambda模板
- en: Click Save and test. Then, AWS Lambda will perform the function on your behalf.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 点击保存并测试。然后，AWS Lambda将代表你执行该函数。
- en: How it works...
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When execution is complete, it is possible to see the results in the console:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 执行完成后，可以在控制台中查看结果：
- en: The Execution result section documents the correct execution of the function.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行结果部分记录了函数的正确执行。
- en: The Summary section shows the most important information reported in the Log
    output section.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摘要部分显示了日志输出部分报告的最重要信息。
- en: 'The Log output section shows the logs generated by the Lambda function execution:'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志输出部分显示了Lambda函数执行生成的日志：
- en: '![](img/12d7eb67-8089-4f9f-b9b1-9a75ab4becdd.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/12d7eb67-8089-4f9f-b9b1-9a75ab4becdd.png)'
- en: 'AWS: Execution results'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: AWS：执行结果
- en: There's more...
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: '**AWS Lambda** monitors the functions and generates parameter reports automatically
    via **Amazon CloudWatch** (see the following screenshot). To simplify the monitoring
    of the code during execution, AWS Lambda automatically tracks the number of requests,
    the latency per request, and the number of requests with errors, publishing the
    associated parameters:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS Lambda** 监控函数，并通过 **Amazon CloudWatch** 自动生成参数报告（见以下截图）。为了简化执行期间的代码监控，AWS
    Lambda自动跟踪请求数量、每个请求的延迟和错误请求的数量，并发布相关参数：'
- en: '![](img/66a850ce-0883-45ed-ab46-5a2eb89214fb.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/66a850ce-0883-45ed-ab46-5a2eb89214fb.png)'
- en: What is a Lambda function?
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Lambda函数？
- en: A Lambda function contains code that a developer wants to execute in response
    to certain events. The developer takes care of configuring this code and specifying
    the requirements in terms of resources within the console of the reference provider.
    Everything else, including the sizing of resources, is managed automatically by
    the provider, based on the workload required.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda函数包含开发者在响应某些事件时想要执行的一段代码。开发者负责配置此代码，并在参考提供商的控制台中指定资源要求。其他所有事情，包括资源的大小，都由提供商根据所需的工作量自动管理。
- en: Why serverless?
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择无服务器？
- en: 'The benefits of serverless computing are as follows:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器计算的好处如下：
- en: '**No infrastructure management:** Developers can focus on the product to be
    built rather than on the operation and management of runtime servers.'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无需基础设施管理：** 开发者可以专注于要构建的产品，而不是运行时服务器的操作和管理。'
- en: '**Automatic scalability**: The resources are automatically recalibrated to
    cope with any type of workload, without requiring a configuration for scaling,
    but reacting to real-time events.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动可伸缩性**： 资源会自动调整以应对任何类型的工作量，无需进行可伸缩性配置，而是对实时事件做出反应。'
- en: '**Resource use optimization:** Since the processing and storage resources are
    dynamically allocated, it is no longer necessary to invest in excess capacity
    in advance.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源使用优化：** 由于处理和存储资源是动态分配的，因此不再需要在事先投资过剩的容量。'
- en: '**Cost reduction**: In traditional cloud computing, payment of running resources
    is expected even when they are not actually used. In the serverless case, the
    applications are event-driven, meaning that when the application code is not running,
    no cost is charged, so you won''t have to pay for unused resources.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本降低**： 在传统云计算中，即使资源未被实际使用，也需要支付运行资源的费用。在无服务器的情况下，应用程序是事件驱动的，这意味着当应用程序代码未运行时，不会产生费用，因此你不需要为未使用的资源付费。'
- en: '**High availability:** The services that manage the infrastructure and the
    application guarantee high availability and fault tolerance.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用性**： 管理基础设施和应用程序的服务保证高可用性和容错性。'
- en: '**Time to Market improvement:** The elimination of infrastructure management
    charges allows developers to focus on product quality and bring the code to production
    faster.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上市时间改进：** 消除基础设施管理费用使开发者能够专注于产品质量，并更快地将代码投入生产。'
- en: Possible problems and limitations
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可能的问题和限制
- en: 'There are some cons to take into consideration when evaluating the adoption
    of serverless computing:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估采用无服务器计算时，有一些缺点需要考虑：
- en: '**Possible loss of performance:** If the code is not used very frequently,
    then latency problems may occur in its execution. These are prominent in comparison
    to cases in which it is in continuous execution on a server, a virtual machine,
    or a container. This happens because (contrary to what occurs when using autoscaling
    policies) with the serverless model, the cloud provider often deallocates resources
    completely if the code is not used. This implies that if the runtime takes some
    time to start, then additional latency is inevitably created in the initial start
    phase.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可能的性能损失**：如果代码不是非常频繁地使用，那么在执行过程中可能会出现延迟问题。与在服务器、虚拟机或容器上持续执行的情况相比，这些问题更为突出。这是因为（与使用自动扩展策略时发生的情况相反）在无服务器模型中，如果代码未被使用，云提供商通常会完全释放资源。这意味着如果启动时间需要一些时间，那么在初始启动阶段不可避免地会创建额外的延迟。'
- en: '**Stateless mode**: Serverless functions operate in stateless mode. This means
    that if you want to add logic to save some elements, such as parameters to pass
    as arguments to a different function, then you need to add a persistent storage
    component to the application flow and link the events to each other. For example,
    Amazon provides an additional tool called **AWS Step Functions**, which coordinates
    and manages the status of all microservices and distributed components of serverless
    applications.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态模式**：无服务器函数以无状态模式运行。这意味着如果您想添加逻辑来保存一些元素，例如将参数作为参数传递给不同函数，那么您需要向应用程序流程中添加一个持久存储组件并将事件相互链接。例如，亚马逊提供了一个名为
    **AWS Step Functions** 的额外工具，它协调和管理无服务器应用程序的所有微服务和分布式组件的状态。'
- en: '**Limit to resources:** Serverless computing is not suitable for some types
    of workloads or use cases, particularly with high-performance ones and for the
    limits on the use of resources that are imposed by the cloud provider (for example,
    AWS limits the number of concurrent runs of Lambda functions). These are both
    due to the difficulty in provisioning the number of desired servers in a limited
    and fixed period of time.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源限制**：无服务器计算不适合某些类型的工作负载或用例，尤其是高性能类型和云提供商强加的资源使用限制（例如，AWS 限制了 Lambda 函数并发运行的数量）。这两者都是由于在有限和固定的时间内难以提供所需服务器数量的困难。'
- en: '**Debugging and monitoring:** If you rely on non-open source solutions, then
    the developers will depend on vendors for debugging and monitoring applications,
    and therefore, will not be able to diagnose any problems in detail by using additional
    profilers or debuggers. Thus, they will have to rely on the tools provided by
    their respective providers.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试和监控**：如果您依赖于非开源解决方案，那么开发人员将依赖于供应商进行应用程序的调试和监控，因此，他们无法通过使用额外的分析器或调试器来详细诊断任何问题。因此，他们必须依赖于各自提供商提供的工具。'
- en: See also
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: As we have seen, the reference point for working with serverless architectures
    is the AWS framework ([https://aws.amazon.com/](https://aws.amazon.com/)). At
    the preceding URL, you can find a lot of information and tutorials, including
    the example described in this section.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，与无服务器架构一起工作的参考点是 AWS 框架([https://aws.amazon.com/](https://aws.amazon.com/))。在先前的网址上，您可以找到大量信息和教程，包括本节中描述的示例。
