- en: Introduction to Asynchronous Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步编程介绍
- en: In this chapter, we will introduce readers to the formal definition of asynchronous
    programming. We will be discussing the basic idea behind asynchronous processing,
    the differences between asynchronous programming and other programming models
    that we have seen, and the reason why asynchronous programming is such a major
    factor in concurrency.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向读者介绍异步编程的正式定义。我们将讨论异步处理背后的基本思想，异步编程与我们所见过的其他编程模型之间的区别，以及为什么异步编程在并发中如此重要。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The concept of asynchronous programming
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步编程的概念
- en: The key differences between asynchronous programming and other programming models
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步编程与其他编程模型之间的关键区别
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following is a list of prerequisites for this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的先决条件列表：
- en: You must have Python 3 installed on your computer
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的计算机上必须安装Python 3
- en: Download the GitHub repository from [https://github.com/PacktPublishing/Mastering-Concurrency-in-Python](https://github.com/PacktPublishing/Mastering-Concurrency-in-Python)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[https://github.com/PacktPublishing/Mastering-Concurrency-in-Python](https://github.com/PacktPublishing/Mastering-Concurrency-in-Python)下载GitHub存储库
- en: During this chapter, we will be working with the subfolder titled `Chapter09`,
    so make sure that you have it at the ready
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用名为`Chapter09`的子文件夹，所以确保你已经准备好了它
- en: Check out the following video to see the Code in Action: [http://bit.ly/2DF700L](http://bit.ly/2DF700L)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码实际运行情况：[http://bit.ly/2DF700L](http://bit.ly/2DF700L)
- en: A quick analogy
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个快速的类比
- en: Asynchronous programming is a model of programming that focuses on coordinating
    different tasks in an application. Its goal is to ensure that the application
    finishes executing those tasks in the smallest amount of time possible. From this
    perspective, asynchronous programming is about switching from one task to another
    when it is appropriate to create overlapping between waiting and processing time,
    and from there, shorten the total time taken to finish the whole program.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 异步编程是一种专注于协调应用程序中不同任务的编程模型。它的目标是确保应用程序在最短的时间内完成执行这些任务。从这个角度来看，异步编程是关于在适当时刻从一个任务切换到另一个任务，以创建等待和处理时间之间的重叠，并从而缩短完成整个程序所需的总时间。
- en: 'To understand the underlying idea of asynchronous programming, let''s consider
    a quick, real-life analogy. Imagine a scenario in which you are cooking a three-course
    meal that contains the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解异步编程的基本思想，让我们考虑一个快速的现实生活类比。想象一下，你正在烹饪一顿包括以下菜肴的三道菜：
- en: An appetizer that will take 2 minutes of preparation and 3 minutes of cooking/waiting
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要2分钟准备和3分钟烹饪/等待的开胃菜
- en: A main course that will take 5 minutes of preparation and 10 minutes of cooking/waiting
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要5分钟准备和10分钟烹饪/等待的主菜
- en: A dessert that will take 3 minutes of preparation and 5 minutes of cooking/waiting
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要3分钟准备和5分钟烹饪/等待的甜点
- en: Now, considering the order in which the courses finish cooking, your goal is
    to determine a way to produce the three courses that will take the least amount
    of time. For example, if we are cooking the courses in a sequential way, we will
    finish the appetizer first, which will take 5 minutes, then we will move on to
    the main course, which will take 15 minutes, and then finally the dessert, which
    will take 8 minutes, respectively. In total, the whole meal will take 28 minutes
    to finish.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑菜肴完成烹饪的顺序，你的目标是确定生产三道菜所需的最短时间。例如，如果我们按顺序烹饪菜肴，我们将首先完成开胃菜，需要5分钟，然后我们将转向主菜，需要15分钟，最后是甜点，需要8分钟。总共，整顿饭需要28分钟完成。
- en: 'The key to finding a quicker way to go about this is to **overlap** the cooking/waiting
    time of one course with the preparation time of another. Since you will not be
    occupied while waiting for the food that has already been prepared for cooking,
    this time could be saved by preparing the food for another dish. For example,
    improvements could be achieved through the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 找到更快的方法的关键是**重叠**一个菜的烹饪/等待时间与另一个菜的准备时间。由于在等待已经准备好烹饪的食物时你不会被占用，这段时间可以通过准备另一道菜的食物来节省。例如，可以通过以下步骤实现改进：
- en: 'Preparing the appetizer: 2 minutes.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备开胃菜：2分钟。
- en: 'Preparing the main course while waiting for the appetizer to cook: 5 minutes.
    The appetizer will have finished during this step.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在等待开胃菜烹饪时准备主菜：5分钟。在这一步中，开胃菜将完成。
- en: 'Preparing and cooking the dessert while waiting for the main course to cook:
    8 minutes. The dessert will have finished during this step, and the main course
    will have 2 minutes of cooking remaining.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在等待主菜烹饪时准备和烹饪甜点：8分钟。在这一步骤中，甜点将完成，主菜还有2分钟的烹饪时间。
- en: 'Waiting for the main course to finish cooking: 2 minutes. The main course will
    have cooking finished during this step.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待主菜烹饪完成：2分钟。在这一步中，主菜将烹饪完成。
- en: 'By overlapping the time, we have saved a significant amount of time cooking
    the three meals, which now takes only 17 minutes in total, compared to 28 minutes
    if we had done this in the sequential way. However, there is obviously more than
    one way to decide which dish we should start first, and which dish should be cooked
    second and last. Another variation of the cooking order could be as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过重叠时间，我们节省了大量烹饪三餐的时间，现在总共只需要17分钟，而如果按顺序进行的话，需要28分钟。然而，显然有多种方式来决定我们应该先开始哪道菜，哪道菜应该第二个和最后一个烹饪。烹饪顺序的另一个变化可能如下：
- en: 'Preparing the main course: 5 minutes.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备主菜：5分钟。
- en: 'Preparing the appetizer while waiting for the main course to cook: 2 minutes.
    The main course will have 8 minutes of cooking left.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在等待主菜烹饪时准备开胃菜：2分钟。主菜还有8分钟的烹饪时间。
- en: 'Preparing the dessert while waiting for the appetizer and the main course to
    cook: 3 minutes. The appetizer will have finished during this step, and the main
    course will have 5 minutes of cooking left.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在等待开胃菜和主菜烹饪的时候准备甜点：3分钟。在这一步骤中，开胃菜将已经完成，主菜还有5分钟的烹饪时间。
- en: 'Waiting for the main course and the dessert to finish cooking: 5 minutes. Both
    the main course and the dessert will have finished during this step.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待主菜和甜点烹饪完成：5分钟。在这一步骤中，主菜和甜点都已经完成。
- en: 'This time, it only takes 15 minutes in total to produce the whole meal. As
    we can see, different variations of the cooking order might result in a different
    total cooking time. Finding the best order to execute and switch between tasks
    in a program is the main idea behind asynchronous programming: instead of executing
    all of the instructions of that program in a sequential way, we coordinate those
    instructions so that we can create overlapped waiting and processing times and
    finally achieve a better execution time.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，制作整顿饭只需要15分钟。我们可以看到，不同的烹饪顺序可能导致不同的总烹饪时间。找到在程序中执行和切换任务的最佳顺序是异步编程的主要思想：而不是以顺序方式执行该程序的所有指令，我们协调这些指令，以便我们可以创建重叠的等待和处理时间，并最终实现更好的执行时间。
- en: Asynchronous versus other programming models
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步与其他编程模型
- en: Asynchronous programming is one of the major concepts in concurrency specifically,
    and in programming in general. However, it is quite a complex concept that can
    be considerably challenging for us to sometimes differentiate it from other programming
    models. In this section, we will be comparing asynchronous programming with synchronous
    programming and other concurrent programming models that we have seen (that is,
    threading and multiprocessing).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 异步编程是并发特别是编程的一个重要概念，但它是一个相当复杂的概念，有时我们很难将其与其他编程模型区分开来。在本节中，我们将比较异步编程与同步编程以及我们已经看到的其他并发编程模型（即线程和多进程）。
- en: Asynchronous versus synchronous programming
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步与同步编程
- en: 'Again, asynchronous programming is fundamentally different from synchronous
    programming because of its task-switching nature. In synchronous programming,
    the instructions of a program are executed sequentially: a task has to have finished
    executing before the next task in the program starts processing. With asynchronous
    programming, if the current task takes significant time to finish, you have the
    option to specify a time during the task at which the execution is switched to
    another task. As we have observed, doing this would result in potential improvements
    in the execution time of the whole program.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，异步编程与同步编程在本质上是不同的，因为它具有任务切换的特性。在同步编程中，程序的指令是按顺序执行的：一个任务必须在下一个任务开始处理之前执行完毕。而在异步编程中，如果当前任务需要花费很长时间才能完成，您可以选择在任务执行期间指定一个时间，将执行切换到另一个任务。正如我们所观察到的，这样做可能会导致整个程序的执行时间有所改善。
- en: One common example of asynchronous programming is the interaction between a
    server and a client during an HTTP request. If HTTP requests were synchronous,
    clients would have to wait after making a request until receiving the response
    from the server. Imagine a scenario in which your browser would hang every time
    you go to a new link or start playing a video until the actual data returns from
    the server. This would be extremely inconvenient and inefficient for HTTP communication.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 异步编程的一个常见示例是服务器和客户端在HTTP请求期间的交互。如果HTTP请求是同步的，客户端将不得不在发出请求后等待，直到从服务器接收到响应。想象一下，每次您转到新链接或开始播放视频时，浏览器都会挂起，直到实际数据从服务器返回。这对HTTP通信来说将是极其不便和低效的。
- en: A better approach is asynchronous communication, where the client is free to
    continue working, and when data from the requests made returns from the server
    is when the client will be notified and proceed to process that data. Asynchronous
    programming is so common in web development that a whole programming model called
    **AJAX** (short for **Asynchronous JavaScript and XML**) is now used in almost
    every website. Additionally, if you have used common libraries in JavaScript such
    as jQuery or Node.js, chances are you have worked with, or at least heard the
    term **callback**, which simply means a function that can be passed to another
    function to execute later in the future. Switching back and forth between the
    execution of functions is the main idea of asynchronous programming, and we will
    actually analyze an advanced example of callback usage in [Chapter 18](2198114d-2ca1-464f-93df-a29b05807928.xhtml),* Building
    a Server from Scratch*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的方法是异步通信，客户端可以自由继续工作，当来自服务器的请求数据返回时，客户端将收到通知并继续处理数据。异步编程在Web开发中非常常见，一个名为**AJAX**（**异步JavaScript和XML**的缩写）的整个编程模型现在几乎在每个网站上都在使用。此外，如果您使用过JavaScript中的常见库，如jQuery或Node.js，那么您可能已经使用过或至少听说过**回调**这个术语，它简单地意味着可以传递给另一个函数以便将来执行的函数。在函数执行之间来回切换是异步编程的主要思想，我们将在[第18章](2198114d-2ca1-464f-93df-a29b05807928.xhtml)中实际分析回调使用的高级示例，*从头开始构建服务器*。
- en: 'The following diagram further illustrates the difference between synchronous
    and asynchronous client-server communication:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表进一步说明了同步和异步客户端-服务器通信之间的区别。
- en: '![](assets/2ba8b96a-5449-47e6-9f20-5680fb42a540.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2ba8b96a-5449-47e6-9f20-5680fb42a540.png)'
- en: Differences between synchronous and asynchronous HTTP requests
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 同步和异步HTTP请求之间的区别
- en: Asynchronous programming is, of course, not limited to HTTP requests. Tasks
    that involve general network communication, software data processing, interaction
    with databases, and so on all take advantage of asynchronous programming. Contrary
    to synchronous programming, asynchronous programming provides responsiveness for
    users by preventing the program from hanging while waiting for data. Therefore,
    it is a great tool to implement in programs that deal with a large amount of data.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，异步编程不仅限于HTTP请求。涉及一般网络通信、软件数据处理、与数据库交互等任务都可以利用异步编程。与同步编程相反，异步编程通过防止程序在等待数据时挂起来为用户提供响应性。因此，它是在处理大量数据的程序中实现的一个很好的工具。
- en: Asynchronous versus threading and multiprocessing
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步与线程和多进程
- en: While providing somewhat similar benefits to those that threading and multiprocessing
    provide, asynchronous programming is fundamentally different from these two programming
    models, especially in the Python programming language.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然异步编程在某种程度上提供了与线程和多进程相似的好处，但它在Python编程语言中与这两种编程模型有根本的不同。
- en: 'As we know, in multiprocessing, multiple copies of our main program—together
    with its instructions and variables—are created and executed independently across
    different cores. Threads, which are also known as lightweight processes, operate
    on the same basis: although the code is not executed in separate cores, independent
    portions of the code that are executed in separate threads do not interact with
    one another either.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，在多进程中，我们的主程序的多个副本连同其指令和变量被创建并独立地在不同的核心上执行。线程，也被称为轻量级进程，也是基于同样的原理：虽然代码不是在单独的核心中执行，但在单独的线程中执行的独立部分也不会相互交互。
- en: Asynchronous programming, on the other hand, keeps all of the instructions of
    a program in the same thread and process. The main idea behind asynchronous programming
    is to have a single executor to switch from one task to another if it is more
    efficient (in terms of execution time) to simply wait for the first task while
    processing the second. This means that asynchronous programming will not take
    advantage of the multiple cores that a system might have.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，异步编程将程序的所有指令都保留在同一个线程和进程中。异步编程的主要思想是，如果从一个任务切换到另一个任务更有效（从执行时间的角度来看），那么就简单地等待第一个任务的同时处理第二个任务。这意味着异步编程不会利用系统可能具有的多个核心。
- en: An example in Python
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的一个例子
- en: While we will go into more depth regarding how asynchronous programming can
    be implemented in Python and the main tools we will be using, including the `asyncio`
    module, let's consider how asynchronous programming can improve the execution
    time of our Python programs.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们将更深入地讨论如何在Python中实现异步编程以及我们将使用的主要工具，包括“asyncio”模块，让我们考虑一下异步编程如何改善我们的Python程序的执行时间。
- en: 'Let''s take a look at the `Chapter09/example1.py` file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下“Chapter09/example1.py”文件：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we have our familiar prime-checking `is_prime()` function, which takes
    in an integer and prints out a message indicating whether that input is a prime
    number or not. In our main program, we call `is_prime()` on three different numbers.
    We are also keeping track of how much time it takes for our program to process
    all three numbers.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有我们熟悉的质数检查“is_prime（）”函数，它接受一个整数并打印出一个消息，指示该输入是否是质数。在我们的主程序中，我们对三个不同的数字调用“is_prime（）”。我们还跟踪了程序处理所有三个数字所花费的时间。
- en: 'Once you execute the script, your output should be similar to the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您执行脚本，您的输出应该类似于以下内容：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You have probably noticed that the program took quite some time to process the
    first input. Because of the way the `is_prime()` function is implemented, if the
    input of the prime number is large, then it takes `is_prime()` longer to process
    it. So, since we have a large prime number as the first input, our Python program
    will hang for a significant amount of time before printing out the output. This
    typically creates a non-responsive feel for our program, which is not desirable
    in both software engineering and web development.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，程序花了相当长的时间来处理第一个输入。由于“is_prime（）”函数的实现方式，如果输入的质数很大，那么“is_prime（）”处理它的时间就会更长。因此，由于我们的第一个输入是一个很大的质数，我们的Python程序在打印输出之前将会hang一段时间。这通常会给我们的程序带来一种不响应的感觉，这在软件工程和Web开发中都是不可取的。
- en: 'To improve the responsiveness of the program, we will take advantage of the
    `asyncio` module, which has been implemented in the `Chapter09/example2.py` file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改善程序的响应性，我们将利用“asyncio”模块，该模块已经在“Chapter09/example2.py”文件中实现：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will go into the details of this code in the next chapter. For now, simply
    run the script, and you will see an improvement in responsiveness in the printed
    output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章详细介绍这段代码。现在，只需运行脚本，您将看到打印输出的响应性有所改善：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Specifically, while `9637529763296797` (our largest input) was being processed,
    the program decided to switch to the next inputs. Therefore, the results for `427920331`
    and `157` were returned before it, hence improving the responsiveness of the program.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，当处理“9637529763296797”（我们的最大输入）时，程序决定切换到下一个输入。因此，在它之前返回了“427920331”和“157”的结果，从而提高了程序的响应性。
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Asynchronous programming is a programming model that is based on task coordination
    through task switching. It is different from traditional sequential (or synchronous)
    programming since it creates an overlap between processing and waiting time, which
    provides potential improvements in speed. Asynchronous programming is also different
    from threading and multiprocessing, as it only takes place within one single thread
    in one single process.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 异步编程是一种基于任务协调和任务切换的编程模型。它与传统的顺序（或同步）编程不同，因为它在处理和等待时间之间创建了重叠，从而提高了速度。异步编程也不同于线程和多进程，因为它只发生在一个单一线程和一个单一进程中。
- en: Asynchronous programming is mostly used to improve the responsiveness of a program.
    When a large input takes a significant amount of time to process, the sequential
    version of a program will appear to be hanging, while the asynchronous program
    will move to other less heavy tasks. This allows small inputs to finish executing
    first and help the program to be more responsive.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 异步编程主要用于改善程序的响应性。当一个大输入需要花费大量时间来处理时，顺序版本的程序会出现挂起的情况，而异步程序会转移到其他较轻的任务。这允许小输入先完成执行，并帮助程序更具响应性。
- en: In the next chapter, we will learn about the main structure of an asynchronous
    program and look into the `asyncio` module and its functionalities in more detail.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习异步程序的主要结构，并更详细地了解`asyncio`模块及其功能。
- en: Questions
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the idea behind asynchronous programming?
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步编程背后的理念是什么？
- en: How is asynchronous programming different from synchronous programming?
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步编程与同步编程有何不同？
- en: How is asynchronous programming different from threading and multiprocessing?
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步编程与线程和多进程有何不同？
- en: Further reading
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information, you can refer to the following links:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，您可以参考以下链接：
- en: '*Parallel Programming with Python*, by Jan Palach, Packt Publishing Ltd, 2014'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《使用Python进行并行编程》，作者Jan Palach，Packt Publishing Ltd，2014
- en: '*Python Parallel Programming Cookbook*, by Giancarlo Zaccone, Packt Publishing
    Ltd, 2015'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《Python并行编程食谱》，作者Giancarlo Zaccone，Packt Publishing Ltd，2015
- en: '*RabbitMQ Cookbook*, by Sigismondo Boschi and Gabriele Santomaggio, Packt Publishing
    Ltd, 2013'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《RabbitMQ Cookbook》，作者Sigismondo Boschi和Gabriele Santomaggio，Packt Publishing
    Ltd，2013
