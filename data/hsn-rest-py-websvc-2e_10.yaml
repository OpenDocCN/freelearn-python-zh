- en: Developing RESTful APIs with Tornado 5.1.1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Tornado 5.1.1 开发 RESTful API
- en: 'In this chapter, we will work with Tornado 5.1.1 to create a RESTful Web API.
    We will start working with this lightweight web framework. We will look at the
    following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 Tornado 5.1.1 创建一个 RESTful Web API。我们将开始使用这个轻量级 Web 框架。我们将查看以下内容：
- en: Design a RESTful API to interact with slow sensors and actuators
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计一个用于与慢速传感器和执行器交互的 RESTful API
- en: Understand the tasks performed by each HTTP method
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解每个 HTTP 方法执行的任务
- en: Set up a virtual environment with Tornado 5.1.1
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Tornado 5.1.1 设置虚拟环境
- en: Create classes that represent a drone
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建表示无人机的类
- en: Write request handlers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写请求处理器
- en: Map URL patterns to request handlers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 URL 模式映射到请求处理器
- en: Make HTTP requests to the Tornado API
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 Tornado API 发送 HTTP 请求
- en: Work with command-line tools—`curl` and `httpie`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行工具——`curl` 和 `httpie`
- en: Work with GUI tools—Postman and others
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GUI 工具——Postman 和其他工具
- en: Designing a RESTful API to interact with slow sensors and actuators
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计一个用于与慢速传感器和执行器交互的 RESTful API
- en: Imagine that we have to create a RESTful API to control a drone, also known
    as a **UAV** (short for **Unmanned Aerial Vehicle**). The drone is an IoT device
    that interacts with many sensors and actuators, including digital electronic speed
    controllers linked to engines, propellers, and servomotors.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们必须创建一个 RESTful API 来控制无人机，也称为 **UAV**（即 **Unmanned Aerial Vehicle**）。无人机是一个物联网设备，与许多传感器和执行器交互，包括与发动机、螺旋桨和伺服电机连接的数字电子速度控制器。
- en: The IoT device has limited resources, and therefore we have to use a lightweight
    web framework. Our API doesn't need to interact with a database. We don't need
    a heavyweight web framework such as Django, with all its features and its integrated
    ORM. We want to be able to process many requests without blocking the web server.
    We need the web server to provide us with nice scalability ...
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网设备资源有限，因此我们必须使用轻量级 Web 框架。我们的 API 不需要与数据库交互。我们不需要像 Django 这样具有所有功能和集成 ORM
    的重型 Web 框架。我们希望能够处理许多请求而不阻塞 Web 服务器。我们需要 Web 服务器为我们提供良好的可伸缩性 ...
- en: Understanding the tasks performed by each HTTP method
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解每个 HTTP 方法执行的任务
- en: Let's consider that `http://localhost:8888/hexacopters/1` is the URL that identifies
    the hexacopter for our drone.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 `http://localhost:8888/hexacopters/1` 是识别我们无人机六旋翼机的 URL。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We have to compose and send an HTTP request with the HTTP verb (`PATCH`) and
    request URL (`http://localhost:8888/hexacopters/1`) to set the hexacopter''s status
    and motor speed in RPMs. In addition, we have to provide the JSON key-value pairs
    with the necessary field name and the value to specify the desired speed. As a
    result of the request, the server will validate the provided values for the field,
    make sure that it is a valid speed, and make the necessary calls to adjust the
    speed with an asynchronous execution. After the speed for the hexacopter is set,
    the server will return an HTTP `200 OK` status code and a JSON body with the recently
    updated hexacopter values serialized to JSON:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须使用 HTTP 动词 (`PATCH`) 和请求 URL (`http://localhost:8888/hexacopters/1`) 编写并发送一个
    HTTP 请求，以设置六旋翼机的状态和电机转速（以 RPM 为单位）。此外，我们必须提供包含必要字段名称和值的 JSON 键值对，以指定所需的速度。请求的结果是，服务器将验证提供的字段值，确保它是一个有效的速度，并以异步执行的方式调用必要的操作来调整速度。在设置六旋翼机的速度后，服务器将返回一个
    HTTP `200 OK` 状态码和一个包含最近更新的六旋翼机值序列化为 JSON 的 JSON 主体：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We have to compose and send an HTTP request with the HTTP verb (`GET`) and
    request URL (`http://localhost:8888/hexacopter/1`) to retrieve the current values
    for the hexacopter. The server will make the necessary calls to retrieve the status
    and the speed for the hexacopter with an asynchronous execution. As a result of
    the request, the server will return an HTTP `200 OK` status code and a JSON body
    with the serialized key-value pairs that specify the status and speed for the
    hexacopter. If a number different than `1` is specified, the server will return
    just an HTTP `404 Not Found` status:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须使用 HTTP 动词 (`GET`) 和请求 URL (`http://localhost:8888/hexacopter/1`) 编写并发送一个
    HTTP 请求，以检索六旋翼机的当前值。服务器将以异步执行的方式调用必要的操作来检索六旋翼机的状态和速度。请求的结果是，服务器将返回一个 HTTP `200
    OK` 状态码和一个包含序列化键值对的 JSON 主体，这些键值对指定了六旋翼机的状态和速度。如果指定的数字不同于 `1`，服务器将仅返回一个 HTTP `404
    Not Found` 状态：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We have to compose and send an HTTP request with the HTTP verb (`PATCH`) and
    request URL (`http://localhost:8888/led/{id}`) to set the brightness level for
    a specific LED whose `id` matches the specified numeric value in the place where
    `{id}` is written. For example, if we use the request URL `http://localhost:8888/led/1`,
    the server will set the brightness level for the LED whose `id` matches `1`. In
    addition, we have to provide the JSON key-value pairs with the necessary field
    name and the value to specify the desired brightness level. As a result of the
    request, the server will validate the provided values for the field, making sure
    that it is a valid brightness level and making the necessary calls to adjust the
    brightness level with an asynchronous execution. After the brightness level for
    the LED is set, the server will return a `200 OK` status code and a JSON body
    with the recently updated LED values serialized to JSON:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须使用 HTTP 动词 (`PATCH`) 和请求 URL (`http://localhost:8888/led/{id}`) 编写并发送一个
    HTTP 请求，以设置特定 LED 的亮度级别，其 `id` 与 `{id}` 位置中指定的数值匹配。例如，如果我们使用请求 URL `http://localhost:8888/led/1`，服务器将为与
    `1` 匹配的 LED 设置亮度级别。此外，我们必须提供包含必要字段名称和值的 JSON 键值对，以指定所需的亮度级别。作为请求的结果，服务器将验证提供的字段值，确保它是一个有效的亮度级别，并以异步执行的方式调用必要的操作来调整亮度级别。在设置
    LED 的亮度级别后，服务器将返回一个 `200 OK` 状态码和一个包含最近更新的 LED 值序列化为 JSON 的 JSON 主体：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We have to compose and send an HTTP request with the HTTP verb (`GET`) and
    request URL (`http://localhost:8888/led/{id}`) to retrieve the current values
    for the LED whose `id` matches the specified numeric value in the place where
    `{id}` is written. For example, if we use the request URL `http://localhost:8888/led/1`,
    the server will retrieve the LED whose `id` matches `1`, that is, the green LED.
    The server will make the necessary calls to retrieve the values for the LED with
    an asynchronous execution. As a result of the request, the server will return
    an HTTP `200 OK` status code and a JSON body with the serialized key-value pairs
    that specify the values for the LED. If no LED matches the specified `id`, the
    server will just return an HTTP `404 Not Found` status:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须使用 HTTP 动词 (`GET`) 和请求 URL (`http://localhost:8888/led/{id}`) 编写并发送一个 HTTP
    请求，以检索与 `{id}` 位置中指定的数值匹配的 LED 的当前值。例如，如果我们使用请求 URL `http://localhost:8888/led/1`，服务器将检索与
    `1` 匹配的 LED，即绿色 LED。服务器将以异步执行的方式调用必要的操作来检索 LED 的值。作为请求的结果，服务器将返回一个 HTTP `200 OK`
    状态码和一个包含序列化键值对的 JSON 主体，这些键值对指定了 LED 的值。如果没有 LED 与指定的 `id` 匹配，服务器将仅返回一个 HTTP `404
    Not Found` 状态：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We have to compose and send an HTTP request with the HTTP verb (`GET`) and
    request URL (`http://localhost:8888/altimeter/1?unit=feet`) to retrieve the current
    value for the altimeter in feet. The server will make the necessary calls to retrieve
    the value for the altimeter with an asynchronous execution. As a result of the
    request, the server will return an HTTP `200 OK` status code and a JSON body with
    the serialized key-value pairs that specify the value for the altimeter. If a
    number different than `1` is specified, the server will return just an HTTP `404
    Not Found` status:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须使用 HTTP 动词 (`GET`) 和请求 URL (`http://localhost:8888/altimeter/1?unit=feet`)
    编写并发送一个 HTTP 请求，以检索以英尺为单位的当前高度计值。服务器将以异步执行的方式调用必要的操作来检索高度计的值。作为请求的结果，服务器将返回一个
    HTTP `200 OK` 状态码和一个包含序列化键值对的 JSON 主体，这些键值对指定了高度计的值。如果指定的数字不是 `1`，服务器将仅返回一个 HTTP
    `404 Not Found` 状态：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If we want to retrieve the value for the altimeter in meters, we have to compose
    and send an HTTP request with the HTTP verb (`GET`) and request URL (`http://localhost:8888/altimeter/1?unit=meters`).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想检索以米为单位的高度计值，我们必须使用 HTTP 动词 (`GET`) 和请求 URL (`http://localhost:8888/altimeter/1?unit=meters`)
    编写并发送一个 HTTP 请求。
- en: Setting up a virtual environment with Tornado 5.1.1
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Tornado 5.1.1 设置虚拟环境
- en: In [Chapter 1](dbf75cef-4962-4e40-8192-03873b774c48.xhtml), *Developing RESTful
    APIs and Microservices with Flask 1.0.2*, we learned that throughout this book
    we are going to work with the lightweight virtual environments introduced and
    improved in Python 3.4\. Now, we will follow many steps to create a new lightweight
    virtual environment to work with Tornado 5.1.1\. It is highly recommended to read
    the section named *Working with lightweight virtual environments* in [Chapter
    1](dbf75cef-4962-4e40-8192-03873b774c48.xhtml), *Developing RESTful APIs and Microservices
    with Flask 1.0.2*, if you don't have experience with lightweight virtual environments
    in modern Python. The chapter includes all the detailed explanations about the
    effects of the steps we are going to follow.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 1 章](dbf75cef-4962-4e40-8192-03873b774c48.xhtml)，*使用 Flask 1.0.2 开发 RESTful
    API 和微服务*，我们了解到在这本书中，我们将使用 Python 3.4 中引入并改进的轻量级虚拟环境。现在，我们将遵循许多步骤来创建一个新的轻量级虚拟环境，以便与
    Tornado 5.1.1 一起工作。如果您对现代 Python 中的轻量级虚拟环境没有经验，强烈建议您阅读 [第 1 章](dbf75cef-4962-4e40-8192-03873b774c48.xhtml)，*使用
    Flask 1.0.2 开发 RESTful API 和微服务* 中名为 *使用轻量级虚拟环境* 的部分。该章节包含了关于我们将遵循的步骤的所有详细解释。
- en: The following ...
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 ...
- en: Creating classes that represent a drone
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建表示无人机的类
- en: 'We will create the following classes that we will use to represent the different
    components of a drone:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下类，这些类将用于表示无人机的不同组件：
- en: '| Class name | Description |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 类名 | 描述 |'
- en: '| `HexacopterStatus` | This class stores status data for the hexacopter |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `HexacopterStatus` | 这个类存储六旋翼无人机的状态数据 |'
- en: '| `Hexacopter` | This class represents a hexacopter |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `Hexacopter` | 这个类表示一个六旋翼无人机 |'
- en: '| `LightEmittingDiode` | This class represents an LED connected to the drone
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `LightEmittingDiode` | 这个类表示连接到无人机的 LED |'
- en: '| `Altimeter` | This class represents the altimeter that measures the current
    altitude for the drone |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `Altimeter` | 这个类表示用于测量无人机当前高度的气压计 |'
- en: '| `Drone` | This class represents the drone with its different sensors and
    actuators |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `Drone` | 这个类表示带有不同传感器和执行器的无人机 |'
- en: In a real-life example, these classes would interact with a library that interacts
    with sensors and actuators. In order to keep our example simple, we will make
    calls to `time.sleep` to simulate interactions that take some time to write values
    to interfaces with sensors and actuators. We will use the same procedure to simulate
    interactions that take some time to retrieve values from interfaces with sensors.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际生活中，这些类将与与传感器和执行器交互的库进行交互。为了使我们的示例简单，我们将调用 `time.sleep` 来模拟需要一些时间将值写入传感器和执行器接口的交互。我们将使用相同的程序来模拟需要一些时间从传感器和执行器接口检索值的交互。
- en: First, we will create the `Hexacopter` class, which we will use to represent
    the hexacopter, and a `HexacopterStatus` class, which we will use to store status
    data for the hexacopter.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建 `Hexacopter` 类，我们将使用它来表示六旋翼无人机，以及一个 `HexacopterStatus` 类，我们将使用它来存储六旋翼无人机的状态数据。
- en: 'Create a new Python file named `drone.py` in the root folder of the virtual
    environment (`Tornado01`). The following lines show all the necessary imports
    for the classes that we will create and the code that declares the `Hexacopter`
    and `HexacopterStatus` classes in this file. The code file for the sample is included
    in the `restful_python_2_10_01` folder, in the `Django01/drone.py` file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟环境（`Tornado01`）的根目录下创建一个名为 `drone.py` 的新 Python 文件。以下行显示了我们将创建的类所需的全部导入，以及在此文件中声明
    `Hexacopter` 和 `HexacopterStatus` 类的代码。示例的代码文件包含在 `restful_python_2_10_01` 文件夹中，位于
    `Django01/drone.py` 文件：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `HexacopterStatus` class just declares a constructor, the `__init__` method.
    This method receives many arguments and uses them to initialize the attributes
    with the same names: `motor_speed` and `is_turned_on`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`HexacopterStatus` 类仅声明了一个构造函数，即 `__init__` 方法。该方法接收许多参数，并使用它们以相同的名称初始化属性：`motor_speed`
    和 `is_turned_on`。'
- en: 'The `Hexacopter` class declares two class attributes that specify the minimum
    and maximum speed values for its motor: `MIN_MOTOR_SPEED` and `MAX_MOTOR_SPEED`.
    The constructor, the `__init__` method, initializes the `_motor_speed` attribute
    with the `MIN_MOTOR_SPEED` value and sets the `_is_turned_on` attribute to `False`.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`Hexacopter` 类声明了两个类属性，用于指定其电机的最小和最大速度值：`MIN_MOTOR_SPEED` 和 `MAX_MOTOR_SPEED`。构造函数，即
    `__init__` 方法，将 `_motor_speed` 属性初始化为 `MIN_MOTOR_SPEED` 值，并将 `_is_turned_on` 属性设置为
    `False`。'
- en: The `motor_speed` property getter, the `motor_speed` method that has the `@property`
    decorator, returns the value of the `_motor_speed` attribute. The `motor_speed`
    property setter, which is the `motor_speed` method that has the `@motor_speed.setter`
    decorator, checks whether the value for the `value` argument is in the valid range.
    If the validation fails, the method raises a `ValueError` exception. Otherwise,
    the method sets the value of the `_motor_speed` attribute with the received value
    and sets the value for the `_is_turned_on` attribute to `True` if the `motor_speed`
    property is greater than `0`. Finally, the method calls `sleep` to simulate that
    it takes two seconds to complete these operations.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`motor_speed` 属性获取器，带有 `@property` 装饰器的 `motor_speed` 方法，返回 `_motor_speed`
    属性的值。`motor_speed` 属性设置器，即带有 `@motor_speed.setter` 装饰器的 `motor_speed` 方法，检查 `value`
    参数的值是否在有效范围内。如果验证失败，该方法将引发 `ValueError` 异常。否则，该方法使用接收到的值设置 `_motor_speed` 属性的值，并且如果
    `motor_speed` 属性大于 `0`，则将 `_is_turned_on` 属性的值设置为 `True`。最后，该方法调用 `sleep` 来模拟完成这些操作需要两秒钟。'
- en: The `is_turned_on` property getter, the `is_turned_on` method that has the `@property`
    decorator, returns the value of the `_is_turned_on` attribute. The `status` property
    getter calls `sleep` to simulate that it takes three seconds to retrieve the hexacopter
    status and then returns a `HexacopterStatus` instance initialized with the `motor_speed`
    and `turned_on` property values.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`is_turned_on` 属性获取器，带有 `@property` 装饰器的 `is_turned_on` 方法，返回 `_is_turned_on`
    属性的值。`status` 属性获取器调用 `sleep` 来模拟获取六旋翼飞行器状态需要三秒钟，然后返回一个使用 `motor_speed` 和 `turned_on`
    属性值初始化的 `HexacopterStatus` 实例。'
- en: 'Stay in the `drones.py` file in the root folder for the virtual environment
    (`Tornado01`). Add the following lines to declare a `LightEmittingDiode` class
    that we will use to represent each LED. The code file for the sample is included
    in the `restful_python_2_10_01` folder, in the `Django01/drone.py` file:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 保持位于虚拟环境根目录下的 `drones.py` 文件（`Tornado01`）。添加以下行以声明我们将用于表示每个 LED 的 `LightEmittingDiode`
    类。示例代码文件包含在 `restful_python_2_10_01` 文件夹中，位于 `Django01/drone.py` 文件中：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `LightEmittingDiode` class declares two class attributes that specify the
    minimum and maximum brightness level values for an LED: `MIN_BRIGHTNESS_LEVEL`
    and `MAX_BRIGHTNESS_LEVEL`. The constructor, the `__init__` method, initializes
    the `_brightness_level` attribute with the `MIN_BRIGHTNESS_LEVEL` and the `id`
    and `description` attributes with the values received in the arguments with the
    same names.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`LightEmittingDiode` 类声明了两个类属性，用于指定 LED 的最小和最大亮度级别值：`MIN_BRIGHTNESS_LEVEL`
    和 `MAX_BRIGHTNESS_LEVEL`。构造函数，即 `__init__` 方法，使用 `MIN_BRIGHTNESS_LEVEL` 初始化 `_brightness_level`
    属性，并使用与同名参数接收的值初始化 `id` 和 `description` 属性。'
- en: The `brightness_level` property getter, the `brightness_level` method that has
    the `@property` decorator, calls `sleep` to simulate it taking `1` second to retrieve
    the brightness level for the wired LED, and then returns the value of the `_brightness_level`
    attribute.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`brightness_level` 属性获取器，带有 `@property` 装饰器的 `brightness_level` 方法，调用 `sleep`
    来模拟获取有线 LED 的亮度级别需要 `1` 秒，然后返回 `_brightness_level` 属性的值。'
- en: The `brightness_level` property setter, the `brightness_level` method that has
    the `@brightness_level.setter` decorator, checks whether the value for the `value`
    argument is in the valid range. If the validation fails, the method raises a `ValueError`
    exception. Otherwise, the method calls `sleep` to simulate it taking two seconds
    to set the new brightness level and finally sets the value of the `_brightness_level`
    attribute with the received value.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`brightness_level` 属性设置器，带有 `@brightness_level.setter` 装饰器的 `brightness_level`
    方法，检查 `value` 参数的值是否在有效范围内。如果验证失败，该方法将引发 `ValueError` 异常。否则，该方法调用 `sleep` 来模拟设置新的亮度级别需要两秒钟，并最终使用接收到的值设置
    `_brightness_level` 属性的值。'
- en: 'Stay in the `drones.py` file in the root folder for the virtual environment
    (`Tornado01`). Add the following lines to declare an `Altimeter` class that we
    will use to represent the altimeter. The code file for the sample is included
    in the `restful_python_2_10_01` folder, in the `Django01/drone.py` file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 保持位于虚拟环境根目录下的 `drones.py` 文件（`Tornado01`）。添加以下行以声明我们将用于表示高度计的 `Altimeter` 类。示例代码文件包含在
    `restful_python_2_10_01` 文件夹中，位于 `Django01/drone.py` 文件中：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `Altimeter` class declares an `altitude` property setter that calls `sleep`
    to simulate it taking one second to retrieve the altitude from the altimeter,
    and finally generates a random integer from `0` to `3000` (inclusive) and returns
    it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`Altimeter` 类声明了一个 `altitude` 属性设置器，它调用 `sleep` 来模拟从高度计获取高度需要一秒钟的时间，并最终生成一个从
    `0` 到 `3000`（包含）的随机整数并返回它。'
- en: 'Stay in the `drones.py` file in the root folder for the virtual environment
    (`Tornado01`). Add the following lines to declare a `Drone` class, which we will
    use to represent the drone with its sensors and actuators. The code file for the
    sample is included in the `restful_python_2_10_01` folder, in the `Django01/drone.py`
    file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 保持在虚拟环境（`Tornado01`）根目录下的 `drones.py` 文件中。添加以下行以声明一个 `Drone` 类，我们将使用它来表示具有其传感器和执行器的无人机。示例的代码文件包含在
    `restful_python_2_10_01` 文件夹中的 `Django01/drone.py` 文件中：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `Drone` class just declares a constructor, the `__init__` method, which
    creates instances of the previously declared classes that represent the different
    components for the drone. The `leds` attribute saves a dictionary that has a key-value
    pair for each `LightEmittingDiode` instance with its `id` and its instance.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`Drone` 类仅声明了一个构造函数，即 `__init__` 方法，该方法创建了代表无人机不同组件的先前声明的类的实例。`leds` 属性保存了一个字典，其中每个
    `LightEmittingDiode` 实例都有一个键值对，包含其 `id` 和其实例。'
- en: Writing request handlers
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写请求处理程序
- en: 'The main building blocks for a RESTful API in Tornado are subclasses of the
    `tornado.web.RequestHandler` class, that is, the base class for HTTP request handlers
    in Tornado. We just need to perform the following tasks to build our RESTful API
    that interacts with a drone:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Tornado 中，RESTful API 的主要构建块是 `tornado.web.RequestHandler` 类的子类，即 Tornado
    中 HTTP 请求处理程序的基础类。我们只需执行以下任务即可构建与无人机交互的 RESTful API：
- en: Create a subclass of the `RequestHandler` class and declare the methods for
    each supported HTTP verb
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `RequestHandler` 类的子类，并声明每个支持的 HTTP 动词的方法
- en: Override the methods to handle HTTP requests
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 覆盖方法以处理 HTTP 请求
- en: Map the URL patterns to each subclass of the `RequestHandler` superclass in
    the `tornado.web.Application` instance that represents the Tornado web application
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 URL 模式映射到代表 Tornado 网络应用的 `tornado.web.Application` 实例中的 `RequestHandler`
    超类的每个子类
- en: 'We will create the following subclasses of the `RequestHandler` class:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下 `RequestHandler` 类的子类：
- en: '| Class name | Description |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 类名 | 描述 |'
- en: '| `HexacopterHandler` | This class processes the HTTP ... |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `HexacopterHandler` | 此类处理 HTTP ... |'
- en: Mapping URL patterns to request handlers
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 URL 模式映射到请求处理程序
- en: 'The following table shows the method of our previously created HTTP handler
    classes that we want to be executed for each combination of HTTP verb and scope:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了我们的先前创建的 HTTP 处理程序类的方法，我们希望为每个 HTTP 动词和作用域的组合执行：
- en: '| HTTP verb | Scope | Class and method |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| HTTP 动词 | 范围 | 类和方法 |'
- en: '| `GET` | Altimeter | `AltimeterHandler.get` |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | Altimeter | `AltimeterHandler.get` |'
- en: '| `GET` | Hexacopter | `HexacopterHandler.get` |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | Hexacopter | `HexacopterHandler.get` |'
- en: '| `PATCH` | Hexacopter | `HexacopterHandler.patch` |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `PATCH` | Hexacopter | `HexacopterHandler.patch` |'
- en: '| `GET` | LED | `LedHandler.get` |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | LED | `LedHandler.get` |'
- en: '| `PATCH` | LED | `LedHandler.patch` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `PATCH` | LED | `LedHandler.patch` |'
- en: If the request results in the invocation of an HTTP handler class with an unsupported
    HTTP method, Tornado will return a response with the HTTP `405 Method Not Allowed`
    status code.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求导致调用一个不支持 HTTP 方法的 HTTP 处理程序类，Tornado 将返回一个带有 HTTP `405 Method Not Allowed`
    状态码的响应。
- en: 'Now, we must map URL patterns to our previously coded subclasses of the `RequestHandler`
    superclass. Stay in the `drone_service.py` file in the root folder for the virtual
    environment (`Tornado01`). Add the following lines to declare the `Application`
    class and the `__main__` method. The code file for the sample is included in the
    `restful_python_2_10_01` folder, in the `Django01/drone_service.py` file:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须将 URL 模式映射到我们之前编写的 `RequestHandler` 超类的子类。保持在虚拟环境（`Tornado01`）根目录下的 `drone_service.py`
    文件中。添加以下行以声明 `Application` 类和 `__main__` 方法。示例的代码文件包含在 `restful_python_2_10_01`
    文件夹中的 `Django01/drone_service.py` 文件中：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The code declares an `Application` class as a subclass of the `tornado.web.Application`
    superclass. This class overrides the inherited constructor, that is, the `__init__`
    method. The constructor declares the `handlers` list that maps URL patterns to
    synchronous request handlers and then calls the inherited constructor with the
    list as one of its arguments. The `handlers` list is composed of a regular expression
    (`regexp`) and a `tornado.web.RequestHandler` subclass (`request_class`).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 代码声明一个`Application`类，作为`tornado.web.Application`超类的子类。这个类覆盖了继承的构造函数，即`__init__`方法。构造函数声明了`handlers`列表，该列表将URL模式映射到同步请求处理器，然后调用继承的构造函数，将列表作为其参数之一。`handlers`列表由一个正则表达式（`regexp`）和一个`tornado.web.RequestHandler`子类（`request_class`）组成。
- en: Then, the `main` method creates an instance of the `Application` class and calls
    the `application.listen` method to build an HTTP server for the application with
    the defined rules on the specified port. In this case, the code specifies `8888`
    as the port, saved in the `port` variable, which is the default port for Tornado
    HTTP servers.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`main`方法创建`Application`类的实例，并调用`application.listen`方法，在指定的端口上为应用程序构建一个遵循定义规则的HTTP服务器。在这种情况下，代码将`8888`指定为端口号，保存在`port`变量中，这是Tornado
    HTTP服务器的默认端口号。
- en: Then, the code registers and starts a periodic callback, named `periodic_callback`,
    that will be executed every 500 milliseconds by the `IOLoop` to make it possible
    to use *Ctrl* + *C* to stop the HTTP server. This code will be useful for the
    second version of our API. However, we write it now to avoid editing the code
    later.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码注册并启动一个名为`periodic_callback`的周期性回调，该回调将由`IOLoop`每500毫秒执行一次，以便可以使用*Ctrl*
    + *C*来停止HTTP服务器。这段代码对于我们的API的第二版将很有用。然而，我们现在就写出来以避免以后修改代码。
- en: Finally, the code calls the `tornado_ioloop.start` method to start the server. This
    server was created with the previous call to the `application.listen` method.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，代码调用`tornado_ioloop.start`方法来启动服务器。这个服务器是通过之前的`application.listen`方法创建的。
- en: Making HTTP requests to the Tornado API
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向Tornado API发送HTTP请求
- en: 'Now, we can run the `drone_service.py` script, which launches the development
    server for Tornado 5.1.1 to compose and send HTTP requests to our unsecured and
    simple web API. Execute the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以运行`drone_service.py`脚本，该脚本启动Tornado 5.1.1的开发服务器，以便编写和发送HTTP请求到我们的非安全简单Web
    API。执行以下命令：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following lines show the output after we execute the previous command.
    The Tornado HTTP development server is listening on port `8888`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了执行之前命令后的输出。Tornado HTTP开发服务器正在端口`8888`上监听：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With the previous command, we will start the Tornado HTTP server and it will
    listen on every interface on port `8888`. Thus, if we want to make HTTP requests
    to our API from other computers or devices connected to our LAN, we don't need
    any additional configurations.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前的命令，我们将启动Tornado HTTP服务器，它将在端口`8888`上的每个接口上监听。因此，如果我们想从连接到我们的局域网的其它计算机或设备向我们的API发送HTTP请求，我们不需要任何额外的配置。
- en: If you decide to compose and send HTTP requests from ...
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定从...编写和发送HTTP请求...
- en: Working with command-line tools - curl and httpie
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行工具 - curl和httpie
- en: We will start composing and sending HTTP requests with the `curl` and HTTPie
    command-line tools, which we introduced in [Chapter 1](dbf75cef-4962-4e40-8192-03873b774c48.xhtml),
    *Developing RESTful APIs and Microservices with Flask 1.0.2*, in the section named
    *Working with command-line tools - curl and httpie*. Make sure you read this section
    before executing the next examples.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始使用`curl`和HTTPie命令行工具编写和发送HTTP请求，这些工具我们在[第1章](dbf75cef-4962-4e40-8192-03873b774c48.xhtml)中介绍，在名为*使用命令行工具
    - curl和httpie*的部分。在执行下一个示例之前，请确保您已经阅读了这一部分。
- en: 'Whenever we compose HTTP requests with the command line, we will use two versions
    of the same command: the first one with HTTPie and the second one with `curl`.
    This way, you will be able to use the most convenient for you.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们使用命令行编写HTTP请求时，我们将使用两个版本的相同命令：第一个使用HTTPie，第二个使用`curl`。这样，您就可以使用最方便的一种。
- en: 'Make sure you leave the Tornado 5.1.1 development server running. Don''t close
    the Terminal or Command Prompt that is running this development server. Open a
    new Terminal in macOS or Linux, or a Command Prompt in Windows, activate the virtual
    environment we have been using, and run the following command. We will compose
    and send an HTTP `PATCH` request to turn on the hexacopter and set its motor speed
    to `50` RPMs. The code file for the sample is included in the `restful_python_2_10_01`
    folder, in the `Tornado01/cmd/cmd1101.txt` file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您让 Tornado 5.1.1 开发服务器继续运行。不要关闭运行此开发服务器的终端或命令提示符。在 macOS 或 Linux 中打开一个新的终端，或在
    Windows 中打开一个命令提示符，激活我们一直在使用的虚拟环境，并运行以下命令。我们将组合并发送一个 HTTP `PATCH` 请求来打开六旋翼机并将其电机速度设置为
    `50` RPM。示例代码文件包含在 `restful_python_2_10_01` 文件夹中，位于 `Tornado01/cmd/cmd1101.txt`
    文件：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_10_01` folder, in the `Tornado01/cmd/cmd1102.txt`
    file:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 `curl` 命令。示例代码文件包含在 `restful_python_2_10_01` 文件夹中，位于 `Tornado01/cmd/cmd1102.txt`
    文件：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The previous commands will compose and send the HTTP request `PATCH http://localhost:8888/hexacopters/1`
    with the following JSON key-value pair:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将组合并发送带有以下 JSON 键值对的 HTTP 请求 `PATCH http://localhost:8888/hexacopters/1`：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The request specifies `/hexacopters/1`, and therefore Tornado will iterate over
    the list of tuples with regular expressions and request classes, and will match
    the `'/hexacopters/([0-9]+)'` regular expression. Tornado will create an instance
    of the `HexacopterHandler` class and run the `HexacopterHandler.patch` method
    with `1` as the value for the `id` argument.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请求指定了 `/hexacopters/1`，因此 Tornado 将遍历包含正则表达式和请求类的元组列表，并匹配正则表达式 `'/hexacopters/([0-9]+)'`。Tornado
    将创建 `HexacopterHandler` 类的实例，并以 `1` 作为 `id` 参数的值调用 `HexacopterHandler.patch` 方法。
- en: 'As the HTTP verb for the request is `PATCH`, Tornado calls the `patch` method.
    If the hexacopter''s speed is successfully set, the method returns an HTTP `200
    OK` status code and the key-value pairs with the speed and status for the recently
    updated hexacopter serialized to JSON in the response body. The following lines
    show an example response for the HTTP request:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于请求的 HTTP 动词是 `PATCH`，Tornado 调用 `patch` 方法。如果成功设置了六旋翼机的速度，该方法将返回 HTTP `200
    OK` 状态码，并在响应体中将速度和状态作为键值对序列化为 JSON 格式。以下行显示了 HTTP 请求的示例响应：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we will write a command to compose and send an HTTP `GET` request to retrieve
    the status and the motor speed for the hexacopter. Run the following command.
    The code file for the sample is included in the `restful_python_2_10_01` folder,
    in the `Tornado01/cmd/cmd1103.txt` file:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个命令来组合并发送一个 HTTP `GET` 请求以检索六旋翼机的状态和电机速度。运行以下命令。示例代码文件包含在 `restful_python_2_10_01`
    文件夹中，位于 `Tornado01/cmd/cmd1103.txt` 文件：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_10_01` folder, in the `Tornado01/cmd/cmd1104.txt`
    file:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 `curl` 命令。示例代码文件包含在 `restful_python_2_10_01` 文件夹中，位于 `Tornado01/cmd/cmd1104.txt`
    文件：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The previous commands will compose and send the following HTTP request: `GET
    http://localhost:8888/hexacopters/1`. The request specifies `/hexacopters/1`,
    and therefore it will match the `''/hexacopters/([0-9]+)''` regular expression
    and run the `HexacopterHandler.get` method with `1` as the value for the `id`
    argument. As the HTTP verb for the request is `GET`, Tornado calls the `get` method.
    The method retrieves the hexacopter''s status and generates a JSON response with
    the key-value pairs.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将组合并发送以下 HTTP 请求：`GET http://localhost:8888/hexacopters/1`。请求指定了 `/hexacopters/1`，因此它将匹配正则表达式
    `'/hexacopters/([0-9]+)'` 并以 `1` 作为 `id` 参数的值调用 `HexacopterHandler.get` 方法。由于请求的
    HTTP 动词是 `GET`，Tornado 调用 `get` 方法。该方法检索六旋翼机的状态并生成包含键值对的 JSON 响应。
- en: 'The following lines show an example response for the HTTP request. The first
    lines show the HTTP response headers, including the status (`200 OK`) and the
    content type (`application/json`). After the HTTP response headers, we can see
    the details for the hexacopter''s status in the JSON response:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了 HTTP 请求的示例响应。前几行显示了 HTTP 响应头，包括状态（`200 OK`）和内容类型（`application/json`）。在
    HTTP 响应头之后，我们可以在 JSON 响应中看到六旋翼机状态的详细信息：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After we run the two requests, we will see the following lines in the window
    that is running the Tornado HTTP server. The output shows the results of executing
    the print statements that describe when the code started setting or retrieving
    information, and when it finished:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行两个请求之后，将在运行 Tornado HTTP 服务器的窗口中看到以下几行。输出显示了执行描述代码开始设置或检索信息以及完成时的打印语句的结果：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The different methods we coded in the request handler classes end up calling
    `time.sleep` to simulate the operations taking some time with the hexacopter.
    In this case, our code is running with a synchronous execution, and therefore
    each time we compose and send a request, the Tornado server is blocked until the
    operation with the hexacopter finishes and the method sends the response. We will
    create a new version of this API that will use an asynchronous execution later,
    and will understand the advantages of Tornado's non-blocking features. However,
    first, we will understand how the synchronous version of the API works.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在请求处理类中编写的不同方法最终都会调用 `time.sleep` 来模拟与六旋翼飞行器操作需要花费一些时间。在这种情况下，我们的代码以同步执行运行，因此每次我们组合并发送请求时，Tornado
    服务器都会被阻塞，直到与六旋翼飞行器的操作完成并且方法发送响应。我们将在稍后创建这个 API 的新版本，它将使用异步执行，并理解 Tornado 非阻塞特性的优势。然而，首先，我们将了解
    API 的同步版本是如何工作的。
- en: 'The following screenshot shows two Terminal windows side by side on macOS.
    The Terminal window on the left-hand side is running the Tornado HTTP server and
    displays the messages printed in the methods that process the HTTP requests. The
    Terminal window on the right-hand side is running `http` commands to generate
    the HTTP requests. It is a good idea to use a similar configuration to check the
    output while we compose and send the HTTP requests:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 macOS 上并排的两个终端窗口。左侧的终端窗口正在运行 Tornado HTTP 服务器，并显示处理 HTTP 请求的方法中打印的消息。右侧的终端窗口正在运行
    `http` 命令以生成 HTTP 请求。在我们组合并发送 HTTP 请求时，使用类似的配置来检查输出是一个好主意：
- en: '![](img/f0848a1c-faa5-48a8-b90e-5fcb8a853cff.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/f0848a1c-faa5-48a8-b90e-5fcb8a853cff.png)'
- en: 'Now, we will write a command to compose and send an HTTP request to retrieve
    a hexacopter that doesn''t exist. Remember that we just have one hexacopter in
    our drone. Run the following command to try to retrieve the status for a hexacopter
    with an invalid `id`. We must make sure that the utilities display the headers
    as part of the response to see the returned status code. The code file for the
    sample is included in the `restful_python_2_10_01` folder, in the `Tornado01/cmd/cmd1105.txt`
    file:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个命令来组合并发送一个 HTTP 请求以检索一个不存在的六旋翼飞行器。记住，我们只有一个六旋翼飞行器在我们的无人机中。运行以下命令尝试检索一个具有无效
    `id` 的六旋翼飞行器的状态。我们必须确保工具显示响应的一部分作为头部信息，以查看返回的状态码。示例代码文件包含在 `restful_python_2_10_01`
    文件夹中，位于 `Tornado01/cmd/cmd1105.txt` 文件：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_10_01` folder, in the `Tornado01/cmd/cmd1106.txt`
    file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 `curl` 命令。示例代码文件包含在 `restful_python_2_10_01` 文件夹中，位于 `Tornado01/cmd/cmd1106.txt`
    文件：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The previous commands will compose and send the following HTTP request: `GET
    http://localhost:8888/hexacopters/5`. The request is the same as the previous
    one we have analyzed, with a different number for the `id` parameter. The server
    will run the `HexacopterHandler.get` method with `5` as the value for the `id`
    argument. The `id` is not equal to `1`, and therefore the code will return an
    HTTP `404 Not Found` status code. The following lines show an example header response
    for the HTTP request:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将组合并发送以下 HTTP 请求：`GET http://localhost:8888/hexacopters/5`。请求与之前我们分析过的请求相同，只是
    `id` 参数的数字不同。服务器将运行 `HexacopterHandler.get` 方法，将 `5` 作为 `id` 参数的值。`id` 不等于 `1`，因此代码将返回
    HTTP `404 Not Found` 状态码。以下几行显示了 HTTP 请求的一个示例响应头：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, we will write a command to compose and send an HTTP `GET` request to retrieve
    the altitude from the altimeter included in the drone, expressed in meters. Run
    the following command. The code file for the sample is included in the `restful_python_2_10_01`
    folder, in the `Tornado01/cmd/cmd1107.txt` file:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个命令来组合并发送一个 HTTP `GET` 请求以从无人机中包含的高度计检索高度，以米为单位。运行以下命令。示例代码文件包含在 `restful_python_2_10_01`
    文件夹中，位于 `Tornado01/cmd/cmd1107.txt` 文件：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_10_01` folder, in the `Tornado01/cmd/cmd1108.txt`
    file:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 `curl` 命令。示例的代码文件包含在 `restful_python_2_10_01` 文件夹中，位于 `Tornado01/cmd/cmd1108.txt`
    文件：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The previous commands will compose and send the following HTTP request: `GET
    http://localhost:8888/altimeters/1?unit=meters`. The request specifies `/altimeters/1`,
    and therefore it will match the `''/altimeters/([0-9]+)''` regular expression
    and run the `AltimeterHandler.get` method with `1` as the value for the `id` argument.
    As the HTTP verb for the request is `GET`, Tornado calls the `get` method. The
    method will retrieve the value for the unit query parameter, retrieve the altimeter''s
    altitude in feet, convert it to meters, and generate a JSON response with the
    key-value pairs.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将编写并发送以下 HTTP 请求：`GET http://localhost:8888/altimeters/1?unit=meters`。请求指定了
    `/altimeters/1`，因此它将匹配 `'/altimeters/([0-9]+)'` 正则表达式，并使用 `1` 作为 `id` 参数的值调用 `AltimeterHandler.get`
    方法。由于请求的 HTTP 动词是 `GET`，Tornado 调用 `get` 方法。该方法将检索单位查询参数的值，检索气压计的海拔高度（以英尺为单位），将其转换为米，并生成包含键值对的
    JSON 响应。
- en: 'The following lines show an example response for the HTTP request:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了 HTTP 请求的一个示例响应：
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, we will write a command to compose and send an HTTP `GET` request to retrieve
    the altitude from the altimeter included in the drone, expressed in the default
    unit: feet. Run the following command. The code file for the sample is included
    in the `restful_python_2_10_01` folder, in the `Tornado01/cmd/cmd1109.txt` file:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个命令来编写并发送一个 HTTP `GET` 请求，以检索无人机中包含的气压计的高度，以默认单位英尺表示。运行以下命令。示例的代码文件包含在
    `restful_python_2_10_01` 文件夹中，位于 `Tornado01/cmd/cmd1109.txt` 文件：
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_10_01` folder, in the `Tornado01/cmd/cmd1110.txt`
    file:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 `curl` 命令。示例的代码文件包含在 `restful_python_2_10_01` 文件夹中，位于 `Tornado01/cmd/cmd1110.txt`
    文件：
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The previous commands will compose and send the following HTTP request: `GET
    http://localhost:8888/altimeters/1`. The request specifies `/altimeters/1`, and
    therefore it will match the `''/altimeters/([0-9]+)''` regular expression and
    run the `AltimeterHandler.get` method with `1` as the value for the `id` argument.
    As the HTTP verb for the request is `GET`, Tornado calls the `get` method. In
    this case, there is no unit query parameter, and therefore the method will retrieve
    the altimeter''s altitude in feet and generate a JSON response with the key-value
    pairs.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将编写并发送以下 HTTP 请求：`GET http://localhost:8888/altimeters/1`。请求指定了 `/altimeters/1`，因此它将匹配
    `'/altimeters/([0-9]+)'` 正则表达式，并使用 `1` 作为 `id` 参数的值调用 `AltimeterHandler.get` 方法。由于请求的
    HTTP 动词是 `GET`，Tornado 调用 `get` 方法。在这种情况下，没有单位查询参数，因此该方法将检索气压计的海拔高度（以英尺为单位），并生成包含键值对的
    JSON 响应。
- en: 'The following lines show an example response for the HTTP request:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了 HTTP 请求的一个示例响应：
- en: '[PRE29]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Notice that the altitude value is a random number generated each time we require
    it.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，海拔值是每次我们要求它时生成的随机数。
- en: Working with GUI tools - Postman and others
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用图形用户界面工具 - Postman 及其他
- en: 'So far, we have been working with two terminal-based or command-line tools
    to compose and send HTTP requests to our Django development server: cURL and HTTPie.
    Now, we will work with one of the GUI tools we used when composing and sending
    HTTP requests to the Flask development server in [Chapter 1](dbf75cef-4962-4e40-8192-03873b774c48.xhtml),
    *Developing RESTful APIs and Microservices with Flask 1.0.2*. In case you skipped
    this chapter, make sure you check the installation instructions in the section
    named *Working with GUI tools - Postman and others*.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用两个基于终端或命令行的工具来编写并发送 HTTP 请求到我们的 Django 开发服务器：cURL 和 HTTPie。现在，我们将使用我们在
    [第 1 章](dbf75cef-4962-4e40-8192-03873b774c48.xhtml) 中编写并发送 HTTP 请求到 Flask 开发服务器时使用的图形用户界面工具之一：*使用
    Flask 1.0.2 开发 RESTful API 和微服务*。如果你跳过了这一章，请确保检查名为 *使用图形用户界面工具 - Postman 及其他*
    的部分中的安装说明。
- en: Once you launch Postman, make sure you close the modal that provides shortcuts
    to common tasks. Select the GET request in the + new drop-down menu in the upper-left
    corner of the Postman main window. ...
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动 Postman，请确保关闭提供常见任务快捷方式的模态窗口。在 Postman 主窗口的左上角，选择 + 新的下拉菜单中的 GET 请求 ...
- en: Running unit tests with pytest and checking testing coverage
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 pytest 运行单元测试并检查测试覆盖率
- en: 'Now, we will use the `pytest` command to run tests and measure their code coverage.
    Make sure you run the command in the Terminal or Command Prompt window in which
    you have activated the virtual environment, and that you are located within its
    root folder (`Tornado01`). Run the following command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`pytest`命令来运行测试并测量它们的代码覆盖率。请确保您在激活了虚拟环境的终端或命令提示符窗口中运行该命令，并且您位于其根文件夹（`Tornado01`）内。运行以下命令：
- en: '[PRE30]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The test runner will execute all the functions defined in `tests.py` that start
    with the `test_` prefix, and will display the results. We use the `-v` option
    to instruct `pytest` to print the test function names and statuses in verbose
    mode. The `--cov` option turns on test coverage report generation with the use
    of the `pytest-cov` plugin.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 测试运行器将执行在`tests.py`中定义的所有以`test_`前缀开始的函数，并将显示结果。我们使用`-v`选项来指示`pytest`以详细模式打印测试函数名称和状态。`--cov`选项通过使用`pytest-cov`插件来开启测试覆盖率报告生成。
- en: 'The following lines show the sample output:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了示例输出：
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The output provides details that the test runner discovered and executed one
    test, which passed. The output displays the module and function names for each
    method in the `test_views` module that started with the `test_` prefix and represented
    a test to be executed.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 输出提供了测试运行器发现并执行了一个测试，该测试通过。输出显示了`test_views`模块中每个以`test_`前缀开始的函数的模块和函数名称，这些函数代表要执行的测试。
- en: The test code coverage measurement report provided by the `coverage` package,
    in combination with the `pytest-cov` plugin, uses the code analysis tools and
    the tracing hooks included in the Python standard library to determine which lines
    of code are executable and which of these lines have been executed. The report
    provides a table with the columns we examined in [Chapter 4](59ca9314-9d32-4507-b260-7f38c82798f2.xhtml),
    *Testing and Deploying an API in a Microservice with Flask*, in the section named
    *Running unit tests with pytest and checking testing coverage*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 由`coverage`包提供的测试代码覆盖率测量报告，结合`pytest-cov`插件，使用Python标准库中包含的代码分析工具和跟踪钩子来确定哪些代码行是可执行的，以及这些行中的哪些已被执行。报告提供了一个表格，其中包含了我们在[第4章](59ca9314-9d32-4507-b260-7f38c82798f2.xhtml)，“使用Flask在微服务中测试和部署API”，在名为“使用pytest运行单元测试并检查测试覆盖率”的部分中检查的列。
- en: We definitely have a very low coverage for the `async_drone_service.py` and
    `drone.py` modules, based on the measurements shown in the report. In fact, we
    just wrote one test related to LEDs, and therefore it makes sense that the coverage
    has to be improved. We didn't create tests related to other hexacopter resources.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 根据报告中显示的测量结果，我们确实在`async_drone_service.py`和`drone.py`模块中具有非常低的覆盖率。实际上，我们只编写了一个与LED相关的测试，因此提高覆盖率是有意义的。我们没有创建与其他六旋翼资源相关的测试。
- en: 'Now, run the `coverage` command with the `-m` command-line option to display
    the line numbers of the missing statements in a new `Missing` column:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用带有`-m`命令行选项的`coverage`命令来显示在新的`Missing`列中遗漏语句的行号：
- en: '[PRE32]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The command will use the information from the last execution and will display
    the missing statements and the missing branches. The next lines show a sample
    output that corresponds to the previous execution of the unit tests. A dash (`-`)
    is used to indicate a range of lines that were missed. For example, `107-109`
    means that lines `107` and `109` were missing statements. A dash followed by a
    greater than sign (`->`) indicates that the branch from the line before `->` to
    the line after it was missed. For example, `61->62` means that the branch from
    line `61` to line `62` was missed:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将使用上次执行的信息，并显示遗漏的语句和遗漏的分支。下一行显示了与之前单元测试执行相对应的示例输出。破折号（`-`）用于表示遗漏行的范围。例如，`107-109`表示第107行和第109行缺少语句。破折号后跟一个大于号（`->`）表示从`->`之前的行到其后的行之间的分支被遗漏。例如，`61->62`表示从第61行到第62行的分支被遗漏：
- en: '[PRE33]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, run the following command to get annotated HTML listings detailing missed
    lines. The command won''t produce any output:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行以下命令以获取详细说明遗漏行的注释HTML列表。该命令不会产生任何输出：
- en: '[PRE34]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Open the `index.html` HTML file generated in the `htmlcov` folder with your
    web browser. The following screenshot shows an example report coverage generated
    in HTML format:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您的网络浏览器打开在`htmlcov`文件夹中生成的`index.html` HTML文件。以下截图显示了以HTML格式生成的示例报告覆盖率：
- en: '![](img/958a3197-7bfd-4bf5-aa07-81806eb54aa0.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/958a3197-7bfd-4bf5-aa07-81806eb54aa0.png)'
- en: Click or tap `async_drone_service.py` and the web browser will render a web
    page that displays the statements that were run, the missing ones, the excluded,
    and the partially executed with different colors. We can click or tap on the run,
    missing, excluded, and partial buttons to show or hide the background color that
    represents the status for each line of code. By default, the missing lines of
    code will be displayed with a pink background, and those partially executed will
    be displayed with a yellow background­­[­­]. Thus, we must write unit tests that
    target these lines of code to improve our test coverage.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 点击或轻触`async_drone_service.py`，网页浏览器将渲染一个显示已运行、缺失、排除和部分执行的语句的网页，不同颜色表示。我们可以点击或轻触运行、缺失、排除和部分按钮来显示或隐藏代表每行代码状态的背景颜色。默认情况下，缺失的代码行将以粉色背景显示，部分执行的将以黄色背景显示[－]。因此，我们必须编写针对这些代码行的单元测试来提高我们的测试覆盖率。
- en: 'The following screenshot shows the buttons with the summary:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个截图显示了带有总结的按钮：
- en: '![](img/63db9824-4440-4190-8a3a-011e7013235d.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63db9824-4440-4190-8a3a-011e7013235d.png)'
- en: 'The next screenshot shows the highlighted missing lines and the partially evaluated
    branches for some lines of code in the `async_drone_service.py` module:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个截图显示了`async_drone_service.py`模块中一些代码行的突出显示的缺失行和部分评估的分支：
- en: '![](img/bb9ce674-14ed-4293-9059-b352ddf91fb0.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb9ce674-14ed-4293-9059-b352ddf91fb0.png)'
- en: Test your knowledge
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: 'Let''s see whether you can answer the following questions correctly:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看你是否能正确回答以下问题：
- en: Which of the following methods allows us to set the HTTP status code for a response
    in a subclass of `tornado.web.RequestHandler`?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个方法允许我们在`tornado.web.RequestHandler`的子类中设置HTTP状态码？
- en: '`self.write_status`'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`self.write_status`'
- en: '`self.__cls__.write_status_code`'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`self.__cls__.write_status_code`'
- en: '`self.set_satus`'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`self.set_satus`'
- en: Which of the following methods allows us to write the response in a subclass
    of `tornado.web.RequestHandler`?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个方法允许我们在`tornado.web.RequestHandler`的子类中写入响应？
- en: '`self.write_response`'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`self.write_response`'
- en: '`self.write`'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`self.write`'
- en: '`self.set_response`'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`self.set_response`'
- en: The main building blocks for a RESTful API in Tornado are subclasses of which
    of the following classes?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Tornado中RESTful API的主要构建块是以下哪个类的子类？
- en: '`tornado.web.GenericHandler`'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`tornado.web.GenericHandler`'
- en: '`tornado.web.RequestHandler`'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`tornado.web.RequestHandler`'
- en: '`tornado.web.IncomingHTTPRequestHandler`'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`tornado.web.IncomingHTTPRequestHandler`'
- en: If we just want to support the `GET` and `PATCH` methods, we can override the
    `SUPPORTED_METHODS` class ...
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们只想支持`GET`和`PATCH`方法，我们可以覆盖`SUPPORTED_METHODS`类...
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we designed a RESTful API to interact with slow sensors and
    actuators. We defined the requirements for our API and understood the tasks performed
    by each HTTP method. We set up a virtual environment with Tornado.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们设计了一个RESTful API来与慢速传感器和执行器交互。我们定义了API的要求，并理解了每个HTTP方法执行的任务。我们使用Tornado设置了虚拟环境。
- en: We created the classes that represent a drone and wrote code to simulate the
    slow I/O operations that are called for each HTTP request method. We wrote classes
    that represent request handlers and process the different HTTP requests, and we
    configured the URL patterns to route URLs to request handlers and their methods.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了代表无人机类的类，并编写了代码来模拟每个HTTP请求方法所需的慢速I/O操作。我们编写了代表请求处理器的类，处理不同的HTTP请求，并配置了URL模式将URL路由到请求处理器及其方法。
- en: Finally, we started the Tornado development server and we used command-line
    tools to compose and send HTTP requests to our RESTful API, and analyzed how each
    HTTP request was processed in our code. We also worked with GUI tools to compose
    and send HTTP requests. We realized that each HTTP request takes some time to
    provide a response due to the simulation of slow I/O operations.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们启动了Tornado开发服务器，并使用命令行工具向我们的RESTful API组合并发送HTTP请求，分析了我们的代码中每个HTTP请求的处理方式。我们还使用GUI工具组合并发送HTTP请求。我们意识到，由于模拟慢速I/O操作，每个HTTP请求都需要一些时间来提供响应。
- en: Now that we understand the basics of Tornado to create RESTful APIs, we will
    take advantage of the non-blocking features, combined with asynchronous operations
    in Tornado, in a new version of the API for which we will write units tests, which
    are the topic of the next chapter.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Tornado的基本知识来创建RESTful API，我们将利用非阻塞特性，结合Tornado中的异步操作，在API的新版本中，我们将编写单元测试，这是下一章的主题。
