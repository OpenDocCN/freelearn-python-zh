- en: Chapter 3. Day-to-day Coding Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。日常编码工具
- en: In this chapter, we will go through the coding tools that are essential during
    a normal day of work for a Python programmer in Visual Studio.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍对于Visual Studio中Python程序员日常工作中必不可少的编码工具。
- en: First we will analyze how to handle projects and solutions in Visual Studio,
    and then we will go through the refactoring of functionalities. Finally, we will
    go through the debugger functions that are available.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将分析如何在Visual Studio中处理项目和解决方案，然后我们将介绍功能重构。最后，我们将介绍可用的调试器功能。
- en: Project handling
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目处理
- en: One of the most important and useful features of Visual Studio is the solution
    and project handling. Since the whole workflow is integrated into the IDE, the
    developer does not have the burden of dealing with files, working paths, and libraries.
    All of these can be managed directly in the IDE with the powerful Visual Studio
    user interface.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio最重要的有用功能之一是解决方案和项目处理。由于整个工作流程都集成到IDE中，开发者无需处理文件、工作路径和库。所有这些都可以通过强大的Visual
    Studio用户界面直接在IDE中管理。
- en: Before we dig into the tools in detail, we will first take a look at the Visual
    Studio lingo relating to project handling. The two main concepts used in this
    chapter are the solution and the project.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们详细探讨工具之前，我们首先将查看与项目处理相关的Visual Studio术语。本章中使用的两个主要概念是解决方案和项目。
- en: Solution
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: A solution is essentially a container of projects that are bundled together
    to cover a unique scope. The projects can be referenced to each other and they
    can be of different types. For example, in a solution, you can mix a Python project
    with a C++ project while referencing the output of the project in the Python solution
    to use it as an external library. A solution also provides a way to group the
    whole code base of work in a single file/folder structure. You can then insert
    and manage the grouping in the versioning tool of your choice to share it quickly.
    A Visual Studio solution is also capable of maintaining shared configurations
    for the inner projects, while handing different commands and operations during
    different events (i.e. during the build of the solution).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案本质上是一个包含项目的容器，这些项目被捆绑在一起以覆盖一个独特的范围。项目可以相互引用，并且它们可以是不同类型的。例如，在一个解决方案中，你可以混合一个Python项目和一个C++项目，同时将Python解决方案中项目的输出用作外部库。解决方案还提供了一种将整个工作代码库分组到单个文件/文件夹结构中的方法。然后你可以将分组插入并管理到你选择的版本控制工具中，以便快速共享。Visual
    Studio解决方案还能够维护内部项目的共享配置，同时在不同的事件（即解决方案构建期间）处理不同的命令和操作。
- en: Project
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目
- en: A project is the classical definition of a bunch of files written in the same
    language and which covers a single scope. The types of projects can range from
    a website to a library or a console application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 项目是经典的一组文件的定义，这些文件是用相同的语言编写的，并且覆盖单个范围。项目的类型可以从网站到库或控制台应用程序不等。
- en: 'Visual Studio projects for Python contain the environment definition: where
    to target the code, the references to external libraries, and the search paths
    that the compiler has to search in the libraries. The last one is particularly
    important since PTVS does not use the computer''s PythonPath environment variable.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio中的Python项目包含环境定义：代码的目标位置、外部库的引用以及编译器必须在库中搜索的搜索路径。最后一个尤其重要，因为PTVS不使用计算机的PythonPath环境变量。
- en: The deliberate and useful feature of ignoring system-wide settings allows you
    to reference different libraries in different projects for different Python versions.
    Furthermore, the dependency list in the code brings the added bonus of an easier
    debugging process and also provides an easy setup of a new development environment
    on other computers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略系统设置的有意且实用的功能允许你在不同的项目中为不同的Python版本引用不同的库。此外，代码中的依赖列表还带来了调试过程更容易和在新计算机上设置新开发环境更简单的额外好处。
- en: PTVS offers preconfigured Python projects called project templates, as we have
    seen in [Chapter 1](ch01.html "Chapter 1. Introduction to PTVS"), *Introduction
    to PTVS*, which take care of creating the right project structure so that the
    developer can focus on the code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: PTVS提供了预配置的Python项目，称为项目模板，正如我们在[第1章](ch01.html "第1章。PTVS简介")中看到的，它负责创建正确的项目结构，以便开发者可以专注于代码。
- en: Let's take a look at the actual tools that will handle solutions and projects.
    The most important and powerful one is the **Solution Explorer** window tool.
    This tool gives a complete view of the solution composition and the files and
    configurations available in each project.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看实际处理解决方案和项目的工具。其中最重要且功能最强大的是**解决方案资源管理器**窗口工具。此工具提供了对解决方案组成以及每个项目中可用的文件和配置的完整视图。
- en: '![Project](img/8687OS_03_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![项目](img/8687OS_03_01.jpg)'
- en: To add something or to perform actions on a Solution or a Project, select the
    Solution or Project node in the tree-view
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加内容或对解决方案或项目执行操作，请选择树视图中的解决方案或项目节点
- en: 'By now, you should already know how to navigate through the code using this
    tool, as we learned in [Chapter 2](ch02.html "Chapter 2. Python Tools in Visual
    Studio"), *Python Tools in Visual Studio*. The **Solution Explorer** window tool
    also provides file handling capabilities, giving us the ability to add or remove
    files directly in the project structure. Just select a folder item in the project
    structure to insert a new file. To add something in the project root, select the
    project item in **Solution Explorer**, right-click to open the contextual menu,
    and go into the **Add** submenu as shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该已经知道如何使用这个工具在代码中导航，正如我们在[第2章](ch02.html "第2章。Visual Studio中的Python工具")“Visual
    Studio中的Python工具”中学到的那样。**解决方案资源管理器**窗口工具还提供了文件处理功能，使我们能够直接在项目结构中添加或删除文件。只需在项目结构中选择一个文件夹项即可插入新文件。要向项目根目录添加内容，请选择**解决方案资源管理器**中的项目项，右键单击以打开上下文菜单，然后进入**添加**子菜单，如图下截图所示：
- en: '![Project](img/8687OS_03_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![项目](img/8687OS_03_02.jpg)'
- en: 'Here, you can choose to add either **New Item**, **Existing Item**, or **New
    Folder**. If you choose to add **New Item**, the **Add New Item** window will
    show up as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以选择添加**新项**、**现有项**或**新文件夹**。如果你选择添加**新项**，将显示**添加新项**窗口，如下所示：
- en: '![Project](img/8687OS_03_03.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![项目](img/8687OS_03_03.jpg)'
- en: From here, you can create a new item from the various types that are available
    in the project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你可以从项目中的各种类型创建新项。
- en: If instead you want to add an existing file to the selected folder, select the
    **Add existing item** option from the contextual add menu. This will open a standard
    Windows browse file window; from here, you can navigate through the filesystem
    and select the file that you want to add to the selected folder. A copy of that
    file will be added to the folder.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要将现有文件添加到所选文件夹中，请从上下文添加菜单中选择**添加现有项**选项。这将打开一个标准的Windows浏览文件窗口；从这里，你可以通过文件系统导航并选择要添加到所选文件夹中的文件。该文件的副本将被添加到文件夹中。
- en: To delete a file, just select the item in the project list and select the **Delete**
    menu item from the contextual menu.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除文件，只需在项目列表中选择项，然后从上下文菜单中选择**删除**菜单项。
- en: '![Project](img/8687OS_03_04.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![项目](img/8687OS_03_04.jpg)'
- en: The file contextual menu in the Solution Explorer window offers lots of functions
    on file, like "Delete", "Rename" and others
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案资源管理器**窗口中的文件上下文菜单提供了许多关于文件的功能，如“删除”、“重命名”等'
- en: 'Now that we have more confidence in **Solution Explorer**, let''s dig a little
    deeper into the Python-specific options that **Solution Explorer** offers. In
    the following sections, you will learn more about the configuration of a Python
    project: the environment, the references, and the search path.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对**解决方案资源管理器**更有信心了，让我们深入探讨**解决方案资源管理器**提供的Python特定选项。在以下章节中，你将了解有关Python项目配置的更多信息：环境、引用和搜索路径。
- en: Specifying Python environments
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定Python环境
- en: 'It''s possible to specifically define a Python environment version for a project
    instead of using the default Python version installed on the machine. This is
    particularly important for projects that we work on with other developers. By
    default, Visual Studio uses the default Python version installed on the machine
    when starting a new project. To link a project to a given Python version (environment),
    right-click on the **Python Environment** item in **Solution Explorer** to see
    the contextual menu. This is shown in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能为项目特别定义一个Python环境版本，而不是使用机器上安装的默认Python版本。这对于我们与其他开发者一起工作的项目尤为重要。默认情况下，Visual
    Studio在启动新项目时使用机器上安装的默认Python版本。要将项目链接到特定的Python版本（环境），请右键单击**解决方案资源管理器**中的**Python环境**项以查看上下文菜单。如图下截图所示：
- en: '![Specifying Python environments](img/8687OS_03_05.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![指定Python环境](img/8687OS_03_05.jpg)'
- en: The Python Environments contextual menu in the Solution Explorer window
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案资源管理器窗口中的Python环境上下文菜单
- en: This contextual menu provides various functionalities such as adding or removing
    a Python environment and linking the project to either a virtual Python environment
    or an existing one. The last two options are very useful when you need to have
    a project running in a completely isolated environment space on the machine. The
    project can then be run with all of its dependencies and libraries in an isolated
    place, without interfering with the existing Python installations and Python path
    configurations on the machine.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个上下文菜单提供了添加或删除Python环境以及将项目链接到虚拟Python环境或现有环境的功能。最后两个选项在需要在一个完全隔离的环境空间中运行项目时非常有用。项目可以在一个隔离的地方运行，其中包含所有依赖项和库，而不会干扰机器上现有的Python安装和Python路径配置。
- en: Creating a virtual environment in Visual Studio is straightforward. Click on
    either **Add Virtual Environment** or **Add Existing Virtual Environment** and
    follow a few steps to complete the setup.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中创建虚拟环境非常简单。点击**添加虚拟环境**或**添加现有虚拟环境**，然后按照几个步骤完成设置。
- en: 'As an example, we will create a virtual environment for our project. Clicking
    on **Add Virtual Environment** will show the following modal window:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将为我们的项目创建一个虚拟环境。点击**添加虚拟环境**将显示以下模态窗口：
- en: '![Specifying Python environments](img/8687OS_03_06.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![指定Python环境](img/8687OS_03_06.jpg)'
- en: You can define the name of the virtual environment and the targeted Python version
    in this window. Once the **Create** button is pressed, Visual Studio will create
    the virtual environment. As a nifty bonus, if the necessary Python libraries are
    not installed on the machine—essentially `pip`, `setuptools`, and `virtualEnv`—PTVS
    will take care of this by downloading and installing them. Like other generic
    Python packages, they will be installed in the system-defined `site-packages`
    folder.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这个窗口中定义虚拟环境名称和目标Python版本。一旦按下**创建**按钮，Visual Studio将创建虚拟环境。作为一项实用的额外功能，如果机器上没有安装必要的Python库——本质上包括`pip`、`setuptools`和`virtualEnv`——PTVS将通过下载和安装它们来处理这个问题。像其他通用Python包一样，它们将被安装在系统定义的`site-packages`文件夹中。
- en: 'To link a project to a given Python version, just click on the **Add Python
    Environment** option in the contextual menu and the following helper box will
    show up:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要将项目链接到特定的Python版本，只需在上下文菜单中点击**添加Python环境**选项，然后会出现以下辅助框：
- en: '![Specifying Python environments](img/8687OS_03_07.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![指定Python环境](img/8687OS_03_07.jpg)'
- en: This helper box shows a list of the Python versions installed on the machine
    and which are available for you to choose. Once a Python version is selected,
    the reference will show up in **Solution Explorer**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个辅助框显示了机器上安装的Python版本列表以及你可以选择的版本。一旦选择了Python版本，引用将显示在**解决方案资源管理器**中。
- en: '![Specifying Python environments](img/8687OS_03_08.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![指定Python环境](img/8687OS_03_08.jpg)'
- en: The **References** item elements in a project provide the ability to tightly
    link a library in your project or reference to packages compiled in the .pyd files
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 项目中的**引用**项元素提供了紧密链接项目中的库或引用到`.pyd`文件中编译的包的能力
- en: 'Right-click on the **Reference** option and then click on **Add Reference**
    to bring up the following helper window:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 右键点击**引用**选项，然后点击**添加引用**以弹出以下辅助窗口：
- en: '![Specifying Python environments](img/8687OS_03_09.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![指定Python环境](img/8687OS_03_09.jpg)'
- en: 'We will focus on the **Projects** tab, which shows all the other projects in
    your solution. If you wish to use another library project to handle a subscope
    of the application, select the desired project and click on **OK**. This creates
    a reference in your project. You can find the list of references under the reference
    option in the **Solution** **Explorer** window:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将关注**项目**选项卡，它显示了你的解决方案中的所有其他项目。如果你希望使用另一个库项目来处理应用程序的子范围，请选择所需的项目并点击**确定**。这将创建项目中的一个引用。你可以在**解决方案资源管理器**窗口下的引用选项中找到引用列表：
- en: '![Specifying Python environments](img/8687OS_03_10.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![指定Python环境](img/8687OS_03_10.jpg)'
- en: Defining Search Paths
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义搜索路径
- en: 'The **Search Paths** functionality basically tells Visual Studio where to search
    for additional libraries that will be used in the project. You can reference a
    folder in the system or a `.zip` file that contains the libraries:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**搜索路径**功能基本上告诉Visual Studio在哪里搜索项目中将使用的附加库。你可以引用系统中的一个文件夹或包含库的`.zip`文件：'
- en: '![Defining Search Paths](img/8687OS_03_11.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![定义搜索路径](img/8687OS_03_11.jpg)'
- en: The Search Path contextual menu, with the "Add Folder" and "Add Zip Archive"
    options
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索路径上下文菜单，包含“添加文件夹”和“添加ZIP存档”选项
- en: 'Once the folder of the `.zip` file is selected, you can find the libraries
    in the window:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了`.zip`文件的文件夹，您可以在窗口中找到库：
- en: '![Defining Search Paths](img/8687OS_03_12.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![定义搜索路径](img/8687OS_03_12.jpg)'
- en: Refactoring
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构
- en: Refactoring is one of the biggest advancements in modern IDEs. It significantly
    cuts down on time and reduces the margin of error by the way in which it handles
    changes in the code and automated operations. Visual Studio comes with great out-of-the-box
    refactoring functionalities such as renaming and the creating method from a selected
    piece of code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 重构是现代IDE中最大的进步之一。它通过处理代码更改和自动操作的方式显著减少了时间并降低了错误率。Visual Studio附带了一些出色的开箱即用的重构功能，如重命名和从所选代码片段创建方法。
- en: 'The renaming functionality can really help with potential errors in code, such
    as when changing the name of an element. There might be instances in the codebase
    where the old name is still used. Let''s have a look at the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 重命名功能可以真正帮助解决代码中的潜在错误，例如更改元素名称时。在代码库中可能存在仍然使用旧名称的实例。让我们看看以下代码：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this code, there's a class, `foo`, that has a method called `bar`. If `bar`
    is renamed, it will create an error by referencing to a nonexistent method.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，有一个名为`foo`的类，其中有一个名为`bar`的方法。如果重命名`bar`，它将通过引用一个不存在的方法来创建错误。
- en: 'Visual Studio''s refactoring functionality helps the renaming process by taking
    all the references of the element into account. Select the element that you wish
    to demand and then access the refactoring function in the code contextual menu
    by right-clicking on it:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio的重构功能通过考虑元素的 所有引用来帮助重命名过程。选择您希望重命名的元素，然后通过右键单击它访问代码上下文菜单中的重构功能：
- en: '![Refactoring](img/8687OS_03_13.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![重构](img/8687OS_03_13.jpg)'
- en: Access refactoring function by right clicking on the element
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过右键单击元素访问重构功能
- en: 'Select the **Rename** function to start the two-step process:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**重命名**功能以启动两步过程：
- en: '![Refactoring](img/8687OS_03_14.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![重构](img/8687OS_03_14.jpg)'
- en: You are prompted to enter a new name for the element. There's also a checkbox
    that permits you to preview the references of the element to be renamed. When
    the checkbox is unchecked, all the references that are found will be renamed;
    you will not be able to preview which references are going to be renamed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被提示输入元素的新的名称。还有一个复选框允许您预览要重命名的元素的引用。当复选框未选中时，所有找到的引用都将被重命名；您将无法预览哪些引用将被重命名。
- en: '![Refactoring](img/8687OS_03_15.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![重构](img/8687OS_03_15.jpg)'
- en: In a situation where you wish to preview the reference change, a preview window
    will be shown. As shown in the preceding screenshot, in this window all references
    of the old element name can be found at the top panel and the code preview will
    be at the bottom. All the files of the project will be analyzed to refactor the
    element correctly. A checkbox near each reference provides the option to activate
    the refactoring of that reference. Clicking on the **Apply** button will rename
    the element and all the selected references.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在您希望预览引用更改的情况下，将显示一个预览窗口。如图所示，在此窗口中，旧元素名称的所有引用都可以在顶部面板找到，代码预览将在底部。将分析项目中的所有文件以正确重构元素。每个引用旁边都有一个复选框，提供激活该引用重构的选项。单击**应用**按钮将重命名元素和所有选定的引用。
- en: 'The other refactoring function is **Extract** **Method**. This comes in handy
    when you wish to reuse a piece of code somewhere else as a function or a method.
    Visual Studio can generate it as a function/method. As an example, refer to the
    following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重构功能是**提取** **方法**。当您希望将一段代码作为函数或方法在其他地方重用时，它非常有用。Visual Studio可以将其生成为一个函数/方法。例如，参考以下截图：
- en: '![Refactoring](img/8687OS_03_16.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![重构](img/8687OS_03_16.jpg)'
- en: 'In the code, the highlighted code aims to create a generic method that calculates
    the sum of two elements. Select the code and then select **Extract Method** from
    the **Refactor** submenu in the contextual menu. This brings up the **Extract
    Method** dialog box, which is shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，高亮的代码旨在创建一个通用方法，用于计算两个元素的和。选择代码，然后从上下文菜单中的**重构**子菜单中选择**提取方法**。这将弹出**提取方法**对话框，如下截图所示：
- en: '![Refactoring](img/8687OS_03_17.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![重构](img/8687OS_03_17.jpg)'
- en: In the **Extract Method** window, you can define the name of the method in the
    **New method name** field and provide a path for the method to be created in the
    **Extract to** field. A **Preview** panel also shows the generated code. Click
    on **OK** to create the new method based on the selected code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在**提取方法**窗口中，你可以在**新方法名称**字段中定义方法的名称，并在**提取到**字段中提供创建方法的路由。一个**预览**面板也显示了生成的代码。点击**确定**根据所选代码创建新方法。
- en: Debugging
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: Visual Studio offers a large set of debugging tools; PTVS inherits a lot of
    them, which helps Python developers to debug code by using step-by-step execution,
    runtime variable watch capabilities, breakpoints, and the ability to see where
    the code fails during a debugging session.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio提供了一套庞大的调试工具；PTVS继承了其中许多工具，这有助于Python开发者通过逐步执行、运行时变量监视功能、断点和在调试会话中查看代码失败位置的能力来调试代码。
- en: 'The ability to see where the code breaks can significantly speed up the debugging
    session. In the following screenshot, we can see an example of an untracked exception:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 能够看到代码中断的位置可以显著加快调试会话的速度。在下面的屏幕截图中，我们可以看到一个未跟踪异常的示例：
- en: '![Debugging](img/8687OS_03_18.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![调试](img/8687OS_03_18.jpg)'
- en: An example of error dialog box during debugging a Python application
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 调试Python应用程序时的错误对话框示例
- en: When you run the code, Visual Studio will stop the execution because it detects
    the raised exception of a problematic code. It highlights the exact point where
    the error occurred while also suggesting ways to fix it—even if right now Visual
    Studio may not suggest useful solutions for the problem.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行代码时，Visual Studio会停止执行，因为它检测到有问题的代码引发的异常。它突出显示了错误发生的确切位置，同时建议修复方法——即使现在Visual
    Studio可能不会为问题提供有用的解决方案。
- en: The debugging process is not only about understanding where exceptions are raised,
    but also to understand what happens in the code when it is not behaving as expected.
    This is where step-by-step execution and breakpoints come in handy.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 调试过程不仅关乎理解异常在哪里被引发，还关乎理解代码在不符合预期行为时发生了什么。这就是逐步执行和断点派上用场的地方。
- en: Using breakpoints
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用断点
- en: A breakpoint is a point that you can define in the code to stop the execution.
    Visual Studio has made it very simple to set a breakpoint. It allows better visibility
    of the content of variables and it follows the flow of the code. A breakpoint
    can be set by clicking in the gutter of the code window, which will bring up a
    red circle. Select **Insert Breakpoint** in the **Breakpoint** submenu in the
    code contextual menu.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 断点是你可以在代码中定义的一个点，用于停止执行。Visual Studio使设置断点变得非常简单。它允许更好地查看变量的内容，并遵循代码的流程。可以通过在代码窗口的空白处单击来设置断点，这将弹出一个红色圆圈。在代码的上下文菜单中的**断点**子菜单中选择**插入断点**。
- en: 'Once the breakpoint is set, you can see it in the code window as shown in the
    following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了断点，你可以在代码窗口中看到它，如下面的屏幕截图所示：
- en: '![Using breakpoints](img/8687OS_03_19.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![使用断点](img/8687OS_03_19.jpg)'
- en: 'Now that the breakpoint is set, if you run the application, Visual Studio will
    stop its execution precisely at the breakpoint while following the flow of the
    code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在断点已设置，如果你运行应用程序，Visual Studio将精确地在断点处停止执行，同时遵循代码的流程：
- en: '![Using breakpoints](img/8687OS_03_20.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![使用断点](img/8687OS_03_20.jpg)'
- en: Indicated that line 29 as the breakpoint
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 指定第29行为断点
- en: The IDE puts the caret on the first column of the line of code in which we set
    the breakpoint. When hovering around the variables in that context, we can see
    the current value of the variable.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: IDE将光标放在我们设置断点的代码行的第一列。当在该上下文中悬停在变量周围时，我们可以看到变量的当前值。
- en: Utilizing watch entries
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用监视条目
- en: 'We can also create a watch entry on a variable in order to see how the value
    of a variable changes during the program flow. To watch a variable, right-click
    on it during the debugging process and click on **Add Watch** in the contextual
    menu. The variable will be added into the **Watch** window as shown in the following
    screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在变量上创建监视条目，以便在程序流程中查看变量的值如何变化。要监视一个变量，在调试过程中右键单击它，并在上下文菜单中点击**添加监视**。变量将被添加到如下所示的**监视**窗口中：
- en: '![Utilizing watch entries](img/8687OS_03_21.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![利用监视条目](img/8687OS_03_21.jpg)'
- en: 'Besides the `watch` variable, it is also possible to see all the variables
    in the current scope from the **Locals** tab:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`监视`变量外，还可以从**局部变量**选项卡中查看当前作用域中的所有变量：
- en: '![Utilizing watch entries](img/8687OS_03_22.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![利用监视条目](img/8687OS_03_22.jpg)'
- en: 'Once a breakpoint has been hit, it''s possible to use one of the following
    three functions to move on in the program flow: `Step Into`, `Step Over`, and
    `Step Out`. These functions are accessible through the **Debug** menu or the buttons
    available in the toolbar. Alternatively, you can also use `Run to Cursor` (*Ctrl*
    + *F10*) to run through the program until you reach where the cursor is:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦遇到断点，可以使用以下三个函数之一来继续程序流程：`Step Into`、`Step Over`和`Step Out`。这些函数可以通过**调试**菜单或工具栏中的按钮访问。或者，你也可以使用`Run
    to Cursor`（*Ctrl* + *F10*）来运行程序直到达到光标所在位置：
- en: '![Utilizing watch entries](img/8687OS_03_23.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![利用监视条目](img/8687OS_03_23.jpg)'
- en: '`Step Into`: This executes the next statement and stops. If the next statement
    is a call to a function, the debugger will stop at the first line of the function
    being called entering the function.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Step Into`: 这将执行下一个语句并停止。如果下一个语句是调用一个函数，调试器将在被调用函数的第一行停止，进入函数。'
- en: '`Step Over`: This executes the next statement. However, if the next statement
    is a function, calling it will not go into it. It''s useful when you are not willing
    to follow the entire program flow of the function.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Step Over`: 这将执行下一个语句。然而，如果下一个语句是调用一个函数，调用它将不会进入该函数。当你不愿意跟随函数的整个程序流程时，这很有用。'
- en: '`Step Out`: This executes the code until the end of the current function. It''s
    useful when you do not wish to go through the entire program flow of the current
    function.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Step Out`: 这将执行代码直到当前函数的末尾。当你不想遍历当前函数的整个程序流程时，这很有用。'
- en: If you wish to just continue the execution of the program flow without going
    into a single line of code at the time, just press the **Continue** button in
    the toolbar or *F5*. If there are other breakpoints in your code, the execution
    will continue through all of them until the last one.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想继续程序流程的执行而不进入代码的每一行，只需在工具栏中按**继续**按钮或*F5*。如果你的代码中还有其他断点，执行将继续通过所有断点直到最后一个。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced the tools for day-to-day coding. You are now
    familiar with browsing through the code with **Solution Explorer** and the flexible
    setting of Python environments. You also learned about the more efficient refactoring
    and debugging process and that setting up breakpoints and watching entries helps
    you trace exactly where the code breaks.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了日常编码的工具。你现在熟悉了使用**解决方案资源管理器**浏览代码以及灵活设置Python环境。你还了解了更高效的重构和调试过程，以及设置断点和监视条目如何帮助你精确追踪代码的断点位置。
- en: In the next chapter, we will explore how to harness the powerful Visual Studio
    IDE and the tools available to speed up Django development.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何利用强大的Visual Studio IDE和可用的工具来加速Django开发。
