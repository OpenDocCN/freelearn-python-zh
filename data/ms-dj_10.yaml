- en: Chapter 10. Generic Views
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。通用视图
- en: 'Here again is a recurring theme of this book: at its worst, web development
    is boring and monotonous. So far, we''ve covered how Django tries to take away
    some of that monotony at the model and template layers, but web developers also
    experience this boredom at the view level.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这里再次出现了本书的一个重要主题：在最糟糕的情况下，Web开发是乏味和单调的。到目前为止，我们已经介绍了Django如何在模型和模板层减轻了一些单调，但Web开发人员在视图层也会经历这种乏味。
- en: Django's *generic views* were developed to ease that pain.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Django的*通用视图*是为了减轻这种痛苦而开发的。
- en: They take certain common idioms and patterns found in view development and abstract
    them so that you can quickly write common views of data without having to write
    too much code. We can recognize certain common tasks, like displaying a list of
    objects, and write code that displays a list of any object.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 它们采用了在视图开发中发现的某些常见习语和模式，并对它们进行抽象，以便您可以快速编写常见的数据视图，而无需编写太多代码。我们可以识别出某些常见任务，比如显示对象列表，并编写显示任何对象列表的代码。
- en: 'Then the model in question can be passed as an extra argument to the URLconf.
    Django ships with generic display views to do the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以将相关模型作为URLconf的额外参数传递。Django附带了用于执行以下操作的通用显示视图：
- en: Display list and detail pages for a single object. If we were creating an application
    to manage conferences, then a `TalkListView` and a `RegisteredUserListView` would
    be examples of list views. A single talk page is an example of what we call a
    detail view.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示单个对象的列表和详细页面。如果我们正在创建一个管理会议的应用程序，那么`TalkListView`和`RegisteredUserListView`将是列表视图的示例。单个讲话页面是我们称之为详细视图的示例。
- en: Present date-based objects in year/month/day archive pages, associated detail,
    and latest pages.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在年/月/日归档页面、相关详细信息和最新页面中呈现基于日期的对象。
- en: Allow users to create, update, and delete objects-with or without authorization.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户创建、更新和删除对象-无论是否授权。
- en: Taken together, these views provide easy interfaces to perform the most common
    tasks developers encounter when displaying database data in views. Finally, display
    views are only one part of Django's comprehensive class-based view system. For
    a full introduction and detailed description of the other class-based views Django
    provides, see [Appendix C](apc.xhtml "Appendix C. Generic View Reference"), *Generic
    View Reference*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些视图一起提供了执行开发人员在视图中显示数据库数据时遇到的最常见任务的简单界面。最后，显示视图只是Django全面基于类的视图系统的一部分。有关Django提供的其他基于类的视图的完整介绍和详细描述，请参阅[附录C](apc.xhtml
    "附录C. 通用视图参考")，*通用视图参考*。
- en: Generic views of objects
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象的通用视图
- en: Django's generic views really shine when it comes to presenting views of your
    database content. Because it's such a common task, Django comes with a handful
    of built-in generic views that make generating list and detail views of objects
    incredibly easy.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及呈现数据库内容的视图时，Django的通用视图确实表现出色。因为这是一个常见的任务，Django附带了一些内置的通用视图，使生成对象的列表和详细视图变得非常容易。
- en: 'Let''s start by looking at some examples of showing a list of objects or an
    individual object. We''ll be using these models:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些显示对象列表或单个对象的示例开始。我们将使用这些模型：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now we need to define a view:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要定义一个视图：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally hook that view into your urls:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后将该视图挂接到您的URL中：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That's all the Python code we need to write. We still need to write a template,
    however. We could explicitly tell the view which template to use by adding a `template_name`
    attribute to the view, but in the absence of an explicit template Django will
    infer one from the object's name. In this case, the inferred template will be
    `books/publisher_list.html`-the books part comes from the name of the app that
    defines the model, while the "publisher" bit is just the lowercased version of
    the model's name.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们需要编写的所有Python代码。但是，我们仍然需要编写一个模板。但是，我们可以通过向视图添加`template_name`属性来明确告诉视图使用哪个模板，但在没有显式模板的情况下，Django将从对象的名称中推断一个模板。在这种情况下，推断的模板将是`books/publisher_list.html`-books部分来自定义模型的定义应用程序的名称，而“publisher”部分只是模型名称的小写版本。
- en: 'Thus, when (for example) the `APP_DIRS` option of a `DjangoTemplates` backend
    is set to True in `TEMPLATES`, a template location could be: `/path/to/project/books/templates/books/publisher_list.html`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当（例如）在`TEMPLATES`中将`DjangoTemplates`后端的`APP_DIRS`选项设置为True时，模板位置可以是：`/path/to/project/books/templates/books/publisher_list.html`
- en: 'This template will be rendered against a context containing a variable called
    `object_list` that contains all the publisher objects. A very simple template
    might look like the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模板将根据包含名为`object_list`的变量的上下文进行渲染，该变量包含所有发布者对象。一个非常简单的模板可能如下所示：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That's really all there is to it. All the cool features of generic views come
    from changing the attributes set on the generic view. [Appendix C](apc.xhtml "Appendix C. Generic
    View Reference"), *Generic View Reference*, documents all the generic views and
    their options in detail; the rest of this document will consider some of the common
    ways you might customize and extend generic views.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是全部。通用视图的所有很酷的功能都来自于更改通用视图上设置的属性。[附录C](apc.xhtml "附录C. 通用视图参考")，*通用视图参考*，详细记录了所有通用视图及其选项；本文档的其余部分将考虑您可能定制和扩展通用视图的一些常见方法。
- en: Making "friendly" template contexts
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建“友好”的模板上下文
- en: 'You might have noticed that our sample publisher list template stores all the
    publishers in a variable named `object_list`. While this works just fine, it isn''t
    all that "friendly" to template authors: they have to "just know" that they''re
    dealing with publishers here.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到我们的示例发布者列表模板将所有发布者存储在名为`object_list`的变量中。虽然这样做完全没问题，但对于模板作者来说并不是很“友好”：他们必须“知道”他们在这里处理的是发布者。
- en: In Django, if you're dealing with a model object, this is already done for you.
    When you are dealing with an object or queryset, Django populates the context
    using the lower cased version of the model class' name. This is provided in addition
    to the default `object_list` entry, but contains exactly the same data, that is `publisher_list`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django中，如果您正在处理模型对象，则已为您完成此操作。 当您处理对象或查询集时，Django使用模型类名称的小写版本填充上下文。 除了默认的`object_list`条目之外，这是额外提供的，但包含完全相同的数据，即`publisher_list`。
- en: 'If this still isn''t a good match, you can manually set the name of the context
    variable. The `context_object_name` attribute on a generic view specifies the
    context variable to use:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这仍然不是一个很好的匹配，您可以手动设置上下文变量的名称。 通用视图上的`context_object_name`属性指定要使用的上下文变量：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Providing a useful `context_object_name` is always a good idea. Your co-workers
    who design templates will thank you.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 提供有用的`context_object_name`始终是一个好主意。 设计模板的同事会感谢您。
- en: Adding extra context
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加额外的上下文
- en: Often you simply need to present some extra information beyond that provided
    by the generic view. For example, think of showing a list of all the books on
    each publisher detail page. The `DetailView` generic view provides the publisher
    to the context, but how do we get additional information in that template?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您只需要提供一些通用视图提供的信息之外的额外信息。 例如，考虑在每个出版商详细页面上显示所有书籍的列表。 `DetailView`通用视图提供了出版商的上下文，但是我们如何在模板中获取额外的信息呢？
- en: 'The answer is to subclass `DetailView` and provide your own implementation
    of the `get_context_data` method. The default implementation simply adds the object
    being displayed to the template, but you can override it to send more:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是子类化`DetailView`并提供您自己的`get_context_data`方法的实现。 默认实现只是将要显示的对象添加到模板中，但您可以重写它以发送更多内容：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Generally, `get_context_data` will merge the context data of all parent classes
    with those of the current class. To preserve this behavior in your own classes
    where you want to alter the context, you should be sure to call `get_context_data`
    on the super class. When no two classes try to define the same key, this will
    give the expected results.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`get_context_data`将合并当前类的所有父类的上下文数据。 要在您自己的类中保留此行为，其中您想要更改上下文，您应该确保在超类上调用`get_context_data`。
    当没有两个类尝试定义相同的键时，这将产生预期的结果。
- en: However, if any class attempts to override a key after parent classes have set
    it (after the call to super), any children of that class will also need to explicitly
    set it after super if they want to be sure to override all parents. If you're
    having trouble, review the method resolution order of your view.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果任何类尝试在父类设置它之后覆盖键（在调用super之后），那么该类的任何子类在super之后也需要显式设置它，如果他们想确保覆盖所有父类。 如果您遇到问题，请查看视图的方法解析顺序。
- en: Viewing subsets of objects
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看对象的子集
- en: 'Now let''s take a closer look at the `model` argument we''ve been using all
    along. The `model` argument, which specifies the database model that the view
    will operate upon, is available on all the generic views that operate on a single
    object or a collection of objects. However, the `model` argument is not the only
    way to specify the objects that the view will operate upon-you can also specify
    the list of objects using the `queryset` argument:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更仔细地看看我们一直在使用的`model`参数。 `model`参数指定视图将操作的数据库模型，在操作单个对象或一组对象的所有通用视图上都可用。
    但是，`model`参数不是指定视图将操作的对象的唯一方法-您还可以使用`queryset`参数指定对象的列表：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Specifying `model = Publisher` is really just shorthand for saying `queryset
    = Publisher.objects.all()`. However, by using `queryset` to define a filtered
    list of objects you can be more specific about the objects that will be visible
    in the view. To pick a simple example, we might want to order a list of books
    by publication date, with the most recent first:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 指定`model = Publisher`实际上只是简写为`queryset = Publisher.objects.all()`。 但是，通过使用`queryset`来定义对象的过滤列表，您可以更具体地了解视图中将可见的对象。
    举个简单的例子，我们可能想要按出版日期对书籍列表进行排序，最新的排在前面：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'That''s a pretty simple example, but it illustrates the idea nicely. Of course,
    you''ll usually want to do more than just reorder objects. If you want to present
    a list of books by a particular publisher, you can use the same technique:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的例子，但它很好地说明了这个想法。 当然，您通常希望做的不仅仅是重新排序对象。 如果要显示特定出版商的书籍列表，可以使用相同的技术：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice that along with a filtered `queryset`, we're also using a custom template
    name. If we didn't, the generic view would use the same template as the "vanilla"
    object list, which might not be what we want.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，除了过滤的`queryset`之外，我们还使用了自定义模板名称。 如果没有，通用视图将使用与“普通”对象列表相同的模板，这可能不是我们想要的。
- en: Also notice that this isn't a very elegant way of doing publisher-specific books.
    If we want to add another publisher page, we'd need another handful of lines in
    the URLconf, and more than a few publishers would get unreasonable. We'll deal
    with this problem in the next section.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，这不是一个非常优雅的处理特定出版商书籍的方法。 如果我们想要添加另一个出版商页面，我们需要在URLconf中添加另外几行，而且超过几个出版商将变得不合理。
    我们将在下一节中解决这个问题。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you get a 404 when requesting `/books/acme/`, check to ensure you actually
    have a Publisher with the name 'ACME Publishing'. Generic views have an `allow_empty`
    parameter for this case.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在请求`/books/acme/`时收到404错误，请检查确保您实际上有一个名称为'ACME Publishing'的出版商。 通用视图具有`allow_empty`参数用于此情况。
- en: Dynamic filtering
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态过滤
- en: Another common need is to filter down the objects given in a list page by some
    key in the URL. Earlier we hard-coded the publisher's name in the URLconf, but
    what if we wanted to write a view that displayed all the books by some arbitrary
    publisher?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的需求是通过URL中的某个键来过滤列表页面中给定的对象。 早些时候，我们在URLconf中硬编码了出版商的名称，但是如果我们想编写一个视图，显示某个任意出版商的所有书籍怎么办？
- en: Handily, the `ListView` has a `get_queryset()` method we can override. Previously,
    it has just been returning the value of the `queryset` attribute, but now we can
    add more logic. The key part to making this work is that when class-based views
    are called, various useful things are stored on `self`; as well as the request
    (`self.request`), this includes the positional (`self.args`) and name-based (`self.kwargs`)
    arguments captured according to the URLconf.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 方便的是，`ListView` 有一个我们可以重写的 `get_queryset()` 方法。以前，它只是返回 `queryset` 属性的值，但现在我们可以添加更多逻辑。使这项工作的关键部分是，当调用基于类的视图时，各种有用的东西都存储在
    `self` 上；除了请求（`self.request`）之外，还包括根据 URLconf 捕获的位置参数（`self.args`）和基于名称的参数（`self.kwargs`）。
- en: 'Here, we have a URLconf with a single captured group:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个带有单个捕获组的 URLconf：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we''ll write the `PublisherBookList` view itself:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写 `PublisherBookList` 视图本身：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As you can see, it''s quite easy to add more logic to the queryset selection;
    if we wanted, we could use `self.request.user` to filter using the current user,
    or other more complex logic. We can also add the publisher into the context at
    the same time, so we can use it in the template:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，向查询集选择添加更多逻辑非常容易；如果我们想的话，我们可以使用 `self.request.user` 来使用当前用户进行过滤，或者其他更复杂的逻辑。我们还可以同时将发布者添加到上下文中，这样我们可以在模板中使用它：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Performing extra work
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行额外的工作
- en: 'The last common pattern we''ll look at involves doing some extra work before
    or after calling the generic view. Imagine we had a `last_accessed` field on our
    `Author` model that we were using to keep track of the last time anybody looked
    at that author:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一下最后一个常见模式，它涉及在调用通用视图之前或之后做一些额外的工作。想象一下，我们在我们的 `Author` 模型上有一个 `last_accessed`
    字段，我们正在使用它来跟踪任何人最后一次查看该作者的时间：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The generic `DetailView` class, of course, wouldn''t know anything about this
    field, but once again we could easily write a custom view to keep that field updated.
    First, we''d need to add an author detail bit in the URLconf to point to a custom
    view:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，通用的 `DetailView` 类不会知道这个字段，但我们可以再次轻松地编写一个自定义视图来保持该字段更新。首先，我们需要在 URLconf 中添加一个作者详细信息，指向一个自定义视图：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then we''d write our new view-`get_object` is the method that retrieves the
    object-so we simply override it and wrap the call:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们会编写我们的新视图 - `get_object` 是检索对象的方法 - 所以我们只需重写它并包装调用：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The URLconf here uses the named group `pk`-this name is the default name that
    `DetailView` uses to find the value of the primary key used to filter the queryset.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的 URLconf 使用了命名组 `pk` - 这个名称是 `DetailView` 用来查找用于过滤查询集的主键值的默认名称。
- en: If you want to call the group something else, you can set `pk_url_kwarg` on
    the view. More details can be found in the reference for `DetailView.`
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想给组起一个别的名字，你可以在视图上设置 `pk_url_kwarg`。更多细节可以在 `DetailView` 的参考中找到。
- en: What's next?
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来呢？
- en: In this chapter, we looked at only a couple of the generic views Django ships
    with, but the general ideas presented here apply pretty closely to any generic
    view. [Appendix C](apc.xhtml "Appendix C. Generic View Reference"), *Generic View
    Reference*, covers all the available views in detail, and it's recommended reading
    if you want to get the most out of this powerful feature.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们只看了 Django 预装的一些通用视图，但这里提出的一般思想几乎适用于任何通用视图。附录 C，通用视图参考，详细介绍了所有可用的视图，如果你想充分利用这一强大功能，建议阅读。
- en: This concludes the section of this book devoted to advanced usage of models,
    templates and views. The following chapters cover a range of functions that are
    very common in modern commercial websites. We will start with a subject essential
    to building interactive websites-user management.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了本书专门讨论模型、模板和视图的高级用法的部分。接下来的章节涵盖了现代商业网站中非常常见的一系列功能。我们将从构建交互式网站至关重要的主题开始 -
    用户管理。
