- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Adding Internationalization to Your Shop
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将国际化添加到您的商店
- en: In the previous chapter, you added a coupon system to your shop and built a
    product recommendation engine.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您为您的商店添加了优惠券系统并构建了一个产品推荐引擎。
- en: In this chapter, you will learn how internationalization and localization work.
    By making your application accessible in multiple languages, you can serve a wider
    range of users. Additionally, by adapting your application to local formatting
    conventions such as date or number formatting, you improve its usability. By translating
    and localizing your application, you will make it more intuitive for users from
    different cultural backgrounds and increase user engagement.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习国际化与本地化的工作原理。通过使您的应用程序支持多种语言，您可以服务更广泛的用户。此外，通过适应本地格式约定，如日期或数字格式，您可以提高其可用性。通过翻译和本地化您的应用程序，您将使其对来自不同文化背景的用户更加直观，并增加用户参与度。
- en: 'This chapter will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Preparing your project for internationalization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为项目准备国际化
- en: Managing translation files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理翻译文件
- en: Translating Python code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻译Python代码
- en: Translating templates
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻译模板
- en: Using Rosetta to manage translations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Rosetta管理翻译
- en: Translating URL patterns and using a language prefix in URLs
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻译URL模式和使用URL中的语言前缀
- en: Allowing users to switch language
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户切换语言
- en: Translating models using `django-parler`
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`django-parler`翻译模型
- en: Using model translations with the ORM
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ORM进行模型翻译
- en: Adapting views to use translations
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适配视图以使用翻译
- en: Using the localized form fields of `django-localflavor`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`django-localflavor`的本地化表单字段
- en: Functional overview
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能概述
- en: '*Figure 11.1* shows a representation of the views, templates, and functionalities
    that will be built in this chapter:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*图11.1*显示了本章将构建的视图、模板和功能表示：'
- en: '![](img/B21088_11_01.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_11_01.png)'
- en: 'Figure 11.1: Diagram of the functionalities built in Chapter 11'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1：第11章构建的功能图
- en: In this chapter, you will implement internationalization in your project and
    translate templates, URLs, and models. You will add language selection links to
    the header of your site and create language-specific URLs. You will modify the
    `product_list` and `product_detail` views of the `shop` application to retrieve
    `Category` and `Product` objects by their translated slugs. You will also add
    a localized postal code field to the form used in the `order_create` view.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将在项目中实现国际化并翻译模板、URL和模型。您将在网站页眉中添加语言选择链接并创建特定语言的URL。您将修改`shop`应用程序的`product_list`和`product_detail`视图，通过其翻译的别名检索`Category`和`Product`对象。您还将向`order_create`视图中使用的表单添加一个本地化邮政编码字段。
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter11](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter11).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在[https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter11](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter11)找到。
- en: All the Python modules used in this chapter are included in the `requirements.txt`
    file in the source code that comes with this chapter. You can follow the instructions
    to install each Python module below, or you can install all the requirements at
    once with the command `python -m pip install -r requirements.txt`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有Python模块都包含在本章提供的源代码中的`requirements.txt`文件中。您可以按照以下说明安装每个Python模块，或者可以使用命令`python
    -m pip install -r requirements.txt`一次性安装所有依赖。
- en: Internationalization with Django
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Django进行国际化
- en: 'Django offers full internationalization and localization support. It allows
    you to translate your application into multiple languages, and it handles locale-specific
    formatting for dates, times, numbers, and time zones. Let’s clarify the difference
    between internationalization and localization:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了完整的国际化与本地化支持。它允许您将应用程序翻译成多种语言，并处理日期、时间、数字和时区等特定地区的格式。让我们明确国际化与本地化的区别：
- en: '**Internationalization** (frequently abbreviated to **i18n**) is the process
    of adapting software for the potential use of different languages and locales
    so that it isn’t hardwired to a specific language or locale.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**国际化**（通常缩写为**i18n**）是指适应软件以适应不同语言和地区的潜在使用，使其不会硬编码到特定的语言或地区。'
- en: '**Localization** (abbreviated to **l10n**) is the process of actually translating
    the software and adapting it to a particular locale. Django itself is translated
    into more than 50 languages using its internationalization framework.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地化**（缩写为 **l10n**）是将软件实际翻译并适应特定区域的过程。Django 本身使用其国际化框架翻译成50多种语言。'
- en: The internationalization framework allows you to easily mark strings for translation,
    both in Python code and in your templates. It relies on the GNU `gettext` toolset
    to generate and manage message files. A **message file** is a plain text file
    that represents a language. It contains a part, or all, of the translation strings
    found in your application and their respective translations for a single language.
    Message files have the `.po` extension. Once the translation is done, message
    files are compiled to offer rapid access to translated strings. The compiled translation
    files have the `.mo` extension.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 国际化框架允许您轻松地为字符串标记翻译，无论是在 Python 代码中还是在您的模板中。它依赖于 GNU `gettext` 工具集来生成和管理消息文件。**消息文件**是一个纯文本文件，代表一种语言。它包含应用程序中找到的翻译字符串及其相应翻译的某个部分或全部。消息文件具有
    `.po` 扩展名。一旦完成翻译，消息文件将被编译以提供对翻译字符串的快速访问。编译后的翻译文件具有 `.mo` 扩展名。
- en: Let’s review the settings that Django provides for internationalization and
    localization.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾 Django 为国际化和本地化提供的设置。
- en: Internationalization and localization settings
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 国际化和本地化设置
- en: 'Django provides several settings for internationalization. The following settings
    are the most relevant ones:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Django 为国际化提供了几个设置。以下设置是最相关的：
- en: '`USE_I18N`: A Boolean that specifies whether Django’s translation system is
    enabled. This is `True` by default.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`USE_I18N`: 一个布尔值，指定 Django 的翻译系统是否启用。默认情况下为 `True`。'
- en: '`USE_TZ`: A Boolean that specifies whether datetimes are time-zone-aware. When
    you create a project with the `startproject` command, this is set to `True`.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`USE_TZ`: 一个布尔值，指定日期时间是否具有时区意识。使用 `startproject` 命令创建项目时，此设置为 `True`。'
- en: '`LANGUAGE_CODE`: The default language code for the project. This is in the
    standard language ID format, for example, `en-us` for American English or `en-gb`
    for British English. This setting requires `USE_I18N` to be set to `True` in order
    to take effect. You can find a list of valid language IDs at `http://www.i18nguy.com/unicode/language-identifiers.html`.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LANGUAGE_CODE`: 项目的默认语言代码。这是标准语言 ID 格式，例如，`en-us` 代表美国英语或 `en-gb` 代表英国英语。此设置需要将
    `USE_I18N` 设置为 `True` 才能生效。您可以在 `http://www.i18nguy.com/unicode/language-identifiers.html`
    找到有效语言 ID 的列表。'
- en: '`LANGUAGES`: A tuple that contains available languages for the project. They
    come in two tuples with a **language code** and a **language name**. You can see
    the list of available languages at `django.conf.global_settings`. When you choose
    which languages your site will be available in, you set `LANGUAGES` to a subset
    of that list.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LANGUAGES`: 包含项目可用语言的元组。它们以两个元组的形式出现，包含 **语言代码** 和 **语言名称**。您可以在 `django.conf.global_settings`
    中查看可用语言的列表。当您选择您的网站将支持的语言时，将 `LANGUAGES` 设置为该列表的子集。'
- en: '`LOCALE_PATHS`: A list of directories where Django looks for message files
    containing translations for the project.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOCALE_PATHS`: Django 查找包含项目翻译消息文件的目录列表。'
- en: '`TIME_ZONE`: A string that represents the time zone for the project. This is
    set to `''UTC''` when you create a new project using the `startproject` command.
    You can set it to any other time zone, such as `''Europe/Madrid''`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIME_ZONE`: 表示项目时区的字符串。使用 `startproject` 命令创建新项目时，此设置为 `''UTC''`。您可以将其设置为任何其他时区，例如
    `''Europe/Madrid''`。'
- en: These are some of the internationalization and localization settings available.
    You can find the full list at [https://docs.djangoproject.com/en/5.0/ref/settings/#globalization-i18n-l10n](https://docs.djangoproject.com/en/5.0/ref/settings/#globalization-i18n-l10n).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些可用的国际化和本地化设置。您可以在 [https://docs.djangoproject.com/en/5.0/ref/settings/#globalization-i18n-l10n](https://docs.djangoproject.com/en/5.0/ref/settings/#globalization-i18n-l10n)
    找到完整的列表。
- en: After reviewing the most important settings for internationalization and localization,
    let’s learn how we can create translations for our application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查了国际化和本地化最重要的设置之后，让我们学习如何为我们的应用程序创建翻译。
- en: Internationalization management commands
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 国际化管理命令
- en: 'Django includes the following management commands to manage translations:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Django 包含以下管理命令来管理翻译：
- en: '`makemessages`: This runs over the source tree to find all the strings marked
    for translation and creates or updates the `.po` message files in the `locale`
    directory. A single `.po` file is created for each language.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`makemessages`：这个命令会遍历源代码树，找到所有标记为翻译的字符串，并在`locale`目录中创建或更新`.po`消息文件。每种语言都会创建一个单独的`.po`文件。'
- en: '`compilemessages`: This compiles the existing `.po` message files to `.mo`
    files, which are used to retrieve translations.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compilemessages`：这个命令将现有的`.po`消息文件编译成`.mo`文件，这些文件用于检索翻译。'
- en: Django relies on the `gettext` toolkit to generate and compile translation files.
    Let’s review how to install it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Django依赖于`gettext`工具包来生成和编译翻译文件。让我们回顾一下如何安装它。
- en: Installing the gettext toolkit
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装`gettext`工具包
- en: 'You will need the `gettext` toolkit to be able to create, update, and compile
    message files. Most Linux distributions include the `gettext` toolkit. If you
    are using macOS, the simplest way to install it is via Homebrew, at [https://brew.sh/](https://brew.sh/),
    with the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要`gettext`工具包来创建、更新和编译消息文件。大多数Linux发行版都包含`gettext`工具包。如果你使用macOS，最简单的方法是通过Homebrew安装它，在[https://brew.sh/](https://brew.sh/)，使用以下命令：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You might also need to force-link it with the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还需要使用以下命令强制链接：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you are using Windows, follow the steps at [https://docs.djangoproject.com/en/5.0/topics/i18n/translation/#gettext-on-windows](https://docs.djangoproject.com/en/5.0/topics/i18n/translation/#gettext-on-windows).
    You can download a precompiled `gettext` binary installer for Windows from [https://mlocati.github.io/articles/gettext-iconv-windows.html](https://mlocati.github.io/articles/gettext-iconv-windows.html).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Windows，请遵循[https://docs.djangoproject.com/en/5.0/topics/i18n/translation/#gettext-on-windows](https://docs.djangoproject.com/en/5.0/topics/i18n/translation/#gettext-on-windows)中的步骤。你可以从[https://mlocati.github.io/articles/gettext-iconv-windows.html](https://mlocati.github.io/articles/gettext-iconv-windows.html)下载预编译的`gettext`二进制安装程序。
- en: Once you have installed the `gettext` toolkit, you are all set to start translating
    your project. First, you need to understand the steps needed to translate your
    project and how Django determines the user’s language.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了`gettext`工具包，你就可以开始翻译你的项目了。首先，你需要了解翻译项目所需的步骤以及Django如何确定用户的语言。
- en: How to add translations to a Django project
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何向Django项目添加翻译
- en: 'Let’s explore the process of internationalizing your project. Here are the
    steps needed to translate a Django project:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索国际化项目的过程。以下是翻译Django项目所需的步骤：
- en: Mark the strings for translation in your Python code and your templates.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的Python代码和模板中标记需要翻译的字符串。
- en: Run the `makemessages` command to create or update message files that include
    all the translation strings from your code.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`makemessages`命令以创建或更新包含所有翻译字符串的消息文件。
- en: Translate the strings contained in the message files.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 翻译消息文件中包含的字符串。
- en: Compile the message files using the `compilemessages` management command.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`compilemessages`管理命令编译消息文件。
- en: We will follow this process to add translations to our project throughout this
    chapter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循这个过程在本章中为我们的项目添加翻译。
- en: Next, you are going to learn how Django determines the language of the current
    user.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将学习Django如何确定当前用户的语言。
- en: How Django determines the current language
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django如何确定当前语言
- en: 'Django comes with a middleware that determines the current language based on
    the request data. This is the `LocaleMiddleware` middleware that resides in `django.middleware.locale.LocaleMiddleware`,
    which performs the following tasks:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Django附带一个中间件，根据请求数据确定当前语言。这是位于`django.middleware.locale.LocaleMiddleware`的`LocaleMiddleware`中间件，它执行以下任务：
- en: If you are using `i18n_patterns`, that is, you are using translated URL patterns,
    it looks for a language prefix in the requested URL to determine the current language.
    You will learn to translate URL patterns in the *Translating URL patterns section*.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是`i18n_patterns`，即你使用的是翻译过的URL模式，它会查找请求URL中的语言前缀以确定当前语言。你将在*翻译URL模式部分*中学习如何翻译URL模式。
- en: If no language prefix is found, it looks for an existing `LANGUAGE_SESSION_KEY`
    in the current user’s session.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有找到语言前缀，它会在当前用户的会话中查找现有的`LANGUAGE_SESSION_KEY`。
- en: If the language is not set in the session, it looks for an existing cookie with
    the current language. A custom name for this cookie can be provided in the `LANGUAGE_COOKIE_NAME`
    setting. By default, the name for this cookie is `django_language`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果会话中没有设置语言，它将查找包含当前语言的现有cookie。可以在`LANGUAGE_COOKIE_NAME`设置中提供此cookie的自定义名称。默认情况下，此cookie的名称为`django_language`。
- en: If no cookie is found, it looks for the `Accept-Language` HTTP header of the
    request.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果找不到cookie，它将查找请求的`Accept-Language` HTTP头。
- en: If the `Accept-Language` header does not specify a language, Django uses the
    language defined in the `LANGUAGE_CODE` setting.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`Accept-Language`头没有指定语言，Django将使用`LANGUAGE_CODE`设置中定义的语言。
- en: By default, Django will use the language defined in the `LANGUAGE_CODE` setting
    unless you are using `LocaleMiddleware`. The process described here only applies
    when using this middleware.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Django将使用`LANGUAGE_CODE`设置中定义的语言，除非您正在使用`LocaleMiddleware`。这里描述的过程仅适用于使用此中间件的情况。
- en: We can also let users change their language. You will learn about how to implement
    a language selector in the section *Allowing users to switch language*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以让用户更改他们的语言。您将在*允许用户切换语言*部分了解如何实现语言选择器。
- en: Let’s start by configuring our project for internationalization.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从配置我们的项目以进行国际化开始。
- en: Preparing your project for internationalization
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您的项目准备国际化
- en: 'We will prepare our project to use different languages. We are going to create
    an English and a Spanish version for the online shop:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将准备我们的项目以使用不同的语言。我们将为在线商店创建英语和西班牙语版本：
- en: 'Edit the `settings.py` file of your project and add the following `LANGUAGES`
    setting to it. Place it next to the `LANGUAGE_CODE` setting:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑您的项目的`settings.py`文件，并向其中添加以下`LANGUAGES`设置。将其放置在`LANGUAGE_CODE`设置旁边：
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `LANGUAGES` setting contains two tuples that consist of a language code
    and a name. Language codes can be locale-specific, such as `en-us` or `en-gb`,
    or generic, such as `en`. With this setting, you specify that your application
    will only be available in English and Spanish. If you don’t define a custom `LANGUAGES`
    setting, the site will be available in all the languages that Django is translated
    into.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`LANGUAGES`设置包含两个元组，由语言代码和名称组成。语言代码可以是区域特定的，如`en-us`或`en-gb`，也可以是通用的，如`en`。通过此设置，您指定应用程序将仅提供英语和西班牙语。如果您没有定义自定义的`LANGUAGES`设置，则站点将提供Django翻译成所有语言。'
- en: 'Make your `LANGUAGE_CODE` setting look like the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让您的`LANGUAGE_CODE`设置看起来像以下这样：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add `''django.middleware.locale.LocaleMiddleware''` to the `MIDDLEWARE` setting.
    Make sure that this middleware comes after `SessionMiddleware` because `LocaleMiddleware`
    needs to use session data. It also has to be placed before `CommonMiddleware`
    because the latter needs an active language to resolve the requested URL. The
    `MIDDLEWARE` setting should now look like the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将`'django.middleware.locale.LocaleMiddleware'`添加到`MIDDLEWARE`设置中。确保这个中间件在`SessionMiddleware`之后，因为`LocaleMiddleware`需要使用会话数据。它还必须放在`CommonMiddleware`之前，因为后者需要一个有效的语言来解析请求的URL。`MIDDLEWARE`设置现在应该看起来像以下这样：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The order of middleware classes is very important because each middleware can
    depend on data set by another middleware that was executed previously. Middleware
    is applied for requests in order of appearance in `MIDDLEWARE`, and in reverse
    order for responses.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件类的顺序非常重要，因为每个中间件都可能依赖于之前执行的其他中间件设置的数据。中间件按照`MIDDLEWARE`中出现的顺序应用于请求，对于响应则按相反的顺序。
- en: 'Create the following directory structure inside the main project directory,
    next to the `manage.py` file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在主项目目录内，在`manage.py`文件旁边创建以下目录结构：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `locale` directory is the place where message files for your application
    will reside.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`locale`目录是您的应用程序消息文件存放的地方。'
- en: 'Edit the `settings.py` file again and add the following setting to it:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 再次编辑`settings.py`文件，并向其中添加以下设置：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `LOCALE_PATHS` setting specifies the directories where Django has to look
    for translation files. Locale paths that appear first have the highest precedence.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`LOCALE_PATHS`设置指定了Django必须查找翻译文件的目录。首先出现的区域路径具有最高优先级。'
- en: When you use the `makemessages` command from your project directory, message
    files will be generated in the `locale/` path you created. However, for applications
    that contain a `locale/` directory, message files will be generated in that directory.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当您从项目目录中使用`makemessages`命令时，将在您创建的`locale/`路径下生成消息文件。然而，对于包含`locale/`目录的应用程序，消息文件将在该目录下生成。
- en: Your project is now configured for internationalization. Next, you will learn
    how to translate strings in your Python code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您的项目现在已配置为国际化。接下来，您将学习如何在Python代码中翻译字符串。
- en: Translating Python code
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 翻译Python代码
- en: 'We will explore various methods to handle translations within Python code.
    We will cover the following methods:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨在Python代码中处理翻译的各种方法。我们将涵盖以下方法：
- en: '**Standard translations**'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准翻译**'
- en: '**Lazy translations**: Executed when the value is accessed rather than when
    the function is called.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟翻译**：在访问值时执行，而不是在调用函数时。'
- en: '**Translations including variables**: Used to interpolate variables within
    strings that are to be translated.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包含变量的翻译**：用于在要翻译的字符串中插入变量。'
- en: '**Plural forms in translations**: Techniques to manage translations that depend
    on numerical quantities that might affect the string being translated.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**翻译中的复数形式**：管理依赖于可能影响要翻译的字符串的数值的技术。'
- en: For translating literals in your Python code, you can mark strings for translation
    using the `gettext()` function included in `django.utils.translation`. This function
    translates the message and returns a string. The convention is to import this
    function as a shorter alias named `_` (the underscore character).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于翻译Python代码中的字面量，您可以使用包含在`django.utils.translation`中的`gettext()`函数标记字符串以进行翻译。此函数翻译消息并返回一个字符串。惯例是将此函数导入为简短的别名`_`（下划线字符）。
- en: You can find all the documentation about translations at [https://docs.djangoproject.com/en/5.0/topics/i18n/translation/](https://docs.djangoproject.com/en/5.0/topics/i18n/translation/).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.djangoproject.com/en/5.0/topics/i18n/translation/](https://docs.djangoproject.com/en/5.0/topics/i18n/translation/)找到有关翻译的所有文档。
- en: Let’s review the different translation methods for Python strings.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下Python字符串的不同翻译方法。
- en: Standard translations
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准翻译
- en: 'The following code shows how to mark a string for translation:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何标记字符串以进行翻译：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This method allows you to apply translations to most strings within your Python
    code by using the `gettext()` function, aliased as `_` for convenience.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法允许您通过使用`gettext()`函数（为方便起见别名为`_`）将翻译应用于Python代码中的大多数字符串。
- en: Lazy translations
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 延迟翻译
- en: Django includes **lazy** versions for all of its translation functions, which
    have the suffix `_lazy()`. When using the lazy functions, strings are translated
    when the value is accessed, rather than when the function is called (this is why
    they are translated **lazily**). The lazy translation functions come in handy
    when the strings marked for translation are in paths that are executed when modules
    are loaded.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Django为其所有翻译函数都包含**延迟**版本，这些版本具有后缀`_lazy()`。当使用延迟函数时，字符串在访问值时进行翻译，而不是在调用函数时（这就是为什么它们是**延迟翻译**的）。当标记为翻译的字符串位于在模块加载时执行的路径中时，延迟翻译函数非常有用。
- en: A common example where lazy translations are beneficial is in the `settings.py`
    file of your project, where immediate translation is not practical because the
    settings must be defined before the translation system is fully ready.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟翻译的一个常见示例是在项目的`settings.py`文件中，在那里立即翻译不切实际，因为必须在翻译系统完全准备就绪之前定义设置。
- en: Using `gettext_lazy()` instead of `gettext()` means that strings are translated
    when the value is accessed. Django offers a lazy version for all translation functions.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`gettext_lazy()`而不是`gettext()`意味着字符串在访问值时进行翻译。Django为所有翻译函数提供了一种延迟版本。
- en: Translations including variables
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含变量的翻译
- en: 'The strings marked for translation can include placeholders to include variables
    in the translations. The following code is an example of a translation string
    with a placeholder:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 标记为翻译的字符串可以包含占位符以在翻译中包含变量。以下代码是一个包含占位符的翻译字符串的示例：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: By using placeholders, you can reorder the text variables. For example, an English
    translation of the previous example might be *today is April 14*, while the Spanish
    one might be *hoy es 14 de Abril*. Always use string interpolation instead of
    positional interpolation when you have more than one parameter for the translation
    string. By doing so, you will be able to reorder the placeholder text.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用占位符，您可以重新排序文本变量。例如，上一个示例的英文翻译可能是“今天是4月14日”，而西班牙语的翻译可能是“今天是4月14日”。当翻译字符串有多个参数时，始终使用字符串插值而不是位置插值。这样做，您将能够重新排序占位符文本。
- en: Plural forms in translations
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 翻译中的复数形式
- en: 'For plural forms, Django provides `ngettext()` and `ngettext_lazy()`. These
    functions translate singular and plural forms, depending on an argument that indicates
    the number of objects. The following example shows how to use them:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于复数形式，Django提供了`ngettext()`和`ngettext_lazy()`函数。这些函数根据表示对象数量的参数翻译单数和复数形式。以下示例展示了如何使用它们：
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, if `count` is `1`, `ngettext()` will use the first string and
    output `there is 1 product`. For any other number, it will use the second string,
    appropriately outputting, for example, `there are 5 products`. This allows for
    more accurate and grammatically correct translations in languages where pluralization
    rules are essential.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，如果`count`是`1`，`ngettext()`将使用第一个字符串并输出`there is 1 product`。对于任何其他数字，它将使用第二个字符串，适当地输出，例如，`there
    are 5 products`。这允许在需要复数规则的语种中进行更准确和语法正确的翻译。
- en: Now that you know the basics of translating literals in your Python code, it’s
    time to apply translations to your project.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了在Python代码中翻译字面量的基础知识，是时候将翻译应用到你的项目中了。
- en: Translating your own code
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将自己的代码翻译成其他语言
- en: 'First, we will translate the language names. To do this, you can follow these
    instructions:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将翻译语言名称。为此，你可以按照以下说明操作：
- en: 'Edit the `settings.py` file of your project, import the `gettext_lazy()` function,
    and change the `LANGUAGES` setting, as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑你的项目的`settings.py`文件，导入`gettext_lazy()`函数，并更改`LANGUAGES`设置，如下所示：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, you use the `gettext_lazy()` function instead of `gettext()` to avoid
    a circular import, thus translating the languages’ names when they are accessed.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你使用`gettext_lazy()`函数而不是`gettext()`函数，以避免循环导入，从而在访问时翻译语言名称。
- en: 'Open the shell and run the following command from your project directory:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的项目目录中打开shell，并运行以下命令：
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should see the following output:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到以下输出：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Take a look at the `locale/` directory. You should see a file structure like
    the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下`locale/`目录。你应该会看到以下文件结构：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A `.po` message file has been created for each language.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为每种语言创建了一个`.po`消息文件。
- en: 'Open `es/LC_MESSAGES/django.po` with a text editor. At the end of the file,
    you should be able to see the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开`es/LC_MESSAGES/django.po`。在文件末尾，你应该能看到以下内容：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Each translation string is preceded by a comment showing details about the
    file and the line where it was found. Each translation includes two strings:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 每个翻译字符串前面都有一个注释，显示有关文件和找到该行的详细信息。每个翻译包括两个字符串：
- en: '`msgid`: The translation string as it appears in the source code.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msgid`：源代码中出现的翻译字符串。'
- en: '`msgstr`: The language translation, which is empty by default. This is where
    you have to enter the actual translation for the given string.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msgstr`：语言翻译，默认为空。这是你需要输入给定字符串的实际翻译的地方。'
- en: 'Fill in the `msgstr` translations for the given `msgid` string, as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式填写给定`msgid`字符串的`msgstr`翻译：
- en: '[PRE15]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Save the modified message file, open the shell, and run the following command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 保存修改后的消息文件，打开shell，并运行以下命令：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If everything goes well, you should see an output like the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该会看到以下输出：
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output gives you information about the message files that are being compiled.
    Take a look at the `locale` directory of the `myshop` project again. You should
    see the following files:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 输出会给你关于正在编译的消息文件的信息。再次查看`myshop`项目的`locale`目录。你应该会看到以下文件：
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can see that a `.mo` compiled message file has been generated for each language.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，为每种语言都生成了一个`.mo`编译的消息文件。
- en: 'Now that you have translated the language names, let’s translate the model
    field names that are displayed on the site:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经翻译了语言名称，让我们翻译网站上显示的模型字段名称：
- en: 'Edit the `models.py` file of the `orders` application, and add names marked
    for translation to the `Order` model fields, as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`orders`应用程序的`models.py`文件，并将标记为翻译的名称添加到`Order`模型字段中，如下所示：
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You have added names for the fields that are displayed when a user places a
    new order. These are `first_name`, `last_name`, `email`, `address`, `postal_code`,
    and `city`. Remember that you can also use the `verbose_name` attribute to name
    the fields.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经添加了当用户放置新订单时显示的字段名称。这些是`first_name`、`last_name`、`email`、`address`、`postal_code`和`city`。记住，你也可以使用`verbose_name`属性来命名字段。
- en: 'Create the following directory structure inside the `orders` application directory:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在`orders`应用程序目录内创建以下目录结构：
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: By creating a `locale` directory, the translation strings of this application
    will be stored in a message file in this directory instead of the main messages
    file. In this way, you can generate separate translation files for each application.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建一个 `locale` 目录，此应用程序的翻译字符串将存储在此目录中的消息文件中，而不是主消息文件中。这样，您可以为每个应用程序生成单独的翻译文件。
- en: 'Open the shell from the project directory and run the following command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 从项目目录打开 shell 并运行以下命令：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You should see the following output:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE22]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Open the `locale/es/LC_MESSAGES/django.po` file of the `order` application
    using a text editor. You will see the translation strings for the `Order` model.
    Fill in the following `msgstr` translations for the given `msgid` strings:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开 `order` 应用程序的 `locale/es/LC_MESSAGES/django.po` 文件。您将看到 `Order` 模型的翻译字符串。为给定的
    `msgid` 字符串填写以下 `msgstr` 翻译：
- en: '[PRE23]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: After you have finished adding the translations, save the file.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在您完成添加翻译后，保存文件。
- en: Besides a text editor, you can use Poedit to edit translations. Poedit is a
    piece of software for editing translations that uses `gettext`. It is available
    for Linux, Windows, and macOS. You can download Poedit from [https://poedit.net/](https://poedit.net/).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 除了文本编辑器外，您还可以使用 Poedit 来编辑翻译。Poedit 是一款使用 `gettext` 的翻译编辑软件，适用于 Linux、Windows
    和 macOS。您可以从 [https://poedit.net/](https://poedit.net/) 下载 Poedit。
- en: 'Let’s also translate the forms of your project. The `OrderCreateForm` of the
    `orders` application does not have to be translated. That’s because it is a `ModelForm`
    and uses the `verbose_name` attribute of the `Order` model fields for the form
    field labels. You are going to translate the forms of the `cart` and `coupons`
    applications:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也翻译您项目的表单。`orders` 应用程序的 `OrderCreateForm` 不需要翻译。这是因为它是一个 `ModelForm`，并使用
    `Order` 模型字段的 `verbose_name` 属性作为表单字段标签。您将翻译 `cart` 和 `coupons` 应用程序的表单：
- en: 'Edit the `forms.py` file inside the `cart` application directory and add a
    `label` attribute to the `quantity` field of the `CartAddProductForm`. Then, mark
    this field for translation, as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `cart` 应用程序目录内的 `forms.py` 文件，并将 `label` 属性添加到 `CartAddProductForm` 的 `quantity`
    字段。然后，按照以下方式标记此字段以进行翻译：
- en: '[PRE24]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Edit the `forms.py` file of the `coupons` application and translate the `CouponApplyForm`
    form, as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `coupons` 应用程序的 `forms.py` 文件，并按照以下方式翻译 `CouponApplyForm` 表单：
- en: '[PRE25]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You have added a label to the `code` field and marked it for translation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经为 `code` 字段添加了一个标签，并标记了它以进行翻译。
- en: You have finished marking Python strings for translation. Next, you will learn
    how to mark text for translation in templates.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经完成了对 Python 字符串的标记以进行翻译。接下来，您将学习如何在模板中标记文本以进行翻译。
- en: Translating templates
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 翻译模板
- en: Django offers the `{% translate %}` and `{% blocktranslate %}` template tags
    to translate the strings using templates. In order to use the translation template
    tags, you have to add `{% load i18n %}` to the top of your template to load them.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Django 提供了 `{% translate %}` 和 `{% blocktranslate %}` 模板标签来使用模板进行字符串翻译。为了使用翻译模板标签，您必须在模板顶部添加
    `{% load i18n %}` 来加载它们。
- en: The {% translate %} template tag
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`{% translate %}` 模板标签'
- en: 'The `{% translate %}` template tag allows you to mark a literal for translation.
    Internally, Django executes `gettext()` on the given text. This is how to mark
    a string for translation in a template:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`{% translate %}` 模板标签允许您标记一个文字以进行翻译。内部，Django 对给定文本执行 `gettext()`。这是在模板中标记字符串以进行翻译的方法：'
- en: '[PRE26]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can use `as` to store the translated content in a variable that you can
    use throughout your template. The following example stores the translated text
    in a variable called `greeting`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `as` 将翻译内容存储在一个变量中，这样您就可以在整个模板中使用它。以下示例将翻译文本存储在一个名为 `greeting` 的变量中：
- en: '[PRE27]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `{% translate %}` tag is useful for simple translation strings, but it can’t
    handle content for translation that includes variables.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`{% translate %}` 标签对于简单的翻译字符串很有用，但它无法处理包含变量的翻译内容。'
- en: The {% blocktranslate %} template tag
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`{% blocktranslate %}` 模板标签'
- en: 'The `{% blocktranslate %}` template tag allows you to mark content that includes
    literals and variable content, using placeholders. The following example shows
    you how to use the `{% blocktranslate %}` tag, including a `name` variable in
    the content for translation:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`{% blocktranslate %}` 模板标签允许您使用占位符标记包含文字和变量内容的文本。以下示例展示了如何使用 `{% blocktranslate
    %}` 标签，包括在内容中为翻译添加一个 `name` 变量：'
- en: '[PRE28]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can use `with` to include template expressions, such as accessing object
    attributes or applying template filters to variables. You always have to use placeholders
    for these. You can’t access expressions or object attributes inside the `blocktrans`
    block. The following example shows you how to use `with` to include an object
    attribute to which the `capfirst` filter has been applied:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `with` 来包含模板表达式，例如访问对象属性或对变量应用模板过滤器。你总是必须为这些使用占位符。你无法在 `blocktrans` 块内访问表达式或对象属性。以下示例展示了如何使用
    `with` 来包含一个应用了 `capfirst` 过滤器的对象属性：
- en: '[PRE29]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Use the `{% blocktranslate %}` tag instead of `{% translate %}` when you need
    to include variable content in your translation string.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要将变量内容包含在翻译字符串中时，使用 `{% blocktranslate %}` 标签而不是 `{% translate %}`。
- en: Now that you are familiar with the translation template tags, let’s put them
    to use.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了翻译模板标签，让我们来使用它们。
- en: Translating the shop templates
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 翻译商店模板
- en: 'Edit the `shop/base.html` template of the `shop` application. Make sure that
    you load the `i18n` tag at the top of the template and mark the strings for translation,
    as follows. The new code is highlighted in bold:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `shop/base.html` 模板。确保你在模板顶部加载 `i18n` 标签，并按照以下方式标记字符串为翻译。新的代码以粗体显示：
- en: '[PRE30]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Make sure that no template tag is split across multiple lines.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 确保不要将模板标签拆分到多行。
- en: 'Notice the `{% blocktranslate %}` tag to display the cart’s summary. The cart’s
    summary was previously as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意显示购物车摘要的 `{% blocktranslate %}` 标签。购物车摘要之前如下所示：
- en: '[PRE31]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You changed it, and now you use `{% blocktranslate with ... %}` to set up the
    placeholder `total` with the value of `cart.get_total_price` (the object method
    called here). You also use `count`, which allows you to set a variable for counting
    objects for Django to select the right plural form. You set the `items` variable
    to count objects with the value of `total_items`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经更改了它，现在你使用 `{% blocktranslate with ... %}` 来设置占位符 `total`，其值为 `cart.get_total_price`（这里调用的是对象方法）。你同样使用了
    `count`，这允许你为 Django 设置一个计数对象的变量，以便选择正确的复数形式。你将 `items` 变量设置为计数具有 `total_items`
    值的对象。
- en: 'This allows you to set a translation for the singular and plural forms, which
    you separate with the `{% plural %}` tag within the `{% blocktranslate %}` block.
    The resulting code is:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许你在 `{% blocktranslate %}` 块内使用 `{% plural %}` 标签来设置单数和复数形式的翻译，你通过这个标签来分隔它们。生成的代码如下：
- en: '[PRE32]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, edit the `shop/product/detail.html` template of the `shop` application
    and add `i18n` to the `{% load %}` tag:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编辑 `shop/product/detail.html` 模板，并添加 `i18n` 到 `{% load %}` 标签中：
- en: '[PRE33]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note that `{% load %}` allows you to load all template tags at once by including
    the modules separated by spaces. In this case, we load the `i18n` and `static`
    modules that contain template tags.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `{% load %}` 允许你通过包含由空格分隔的模块一次性加载所有模板标签。在这种情况下，我们加载了包含模板标签的 `i18n` 和 `static`
    模块。
- en: 'Then, find the following line:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，找到以下行：
- en: '[PRE34]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Replace it with the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换它：
- en: '[PRE35]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, find the following line:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，找到以下行：
- en: '[PRE36]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Replace it with the following:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换它：
- en: '[PRE37]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, translate the `orders` application template. Edit the `orders/order/create.html`
    template of the `orders` application and mark the text for translation, as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，翻译 `orders` 应用程序模板。编辑 `orders/order/create.html` 模板，并按照以下方式标记文本为翻译：
- en: '[PRE38]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Make sure that no template tag is split across multiple lines. Take a look
    at the following files in the code that accompanies this chapter to see how the
    strings have been marked for translation:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 确保不要将模板标签拆分到多行。查看伴随本章节的代码中的以下文件，以了解字符串是如何标记为翻译的：
- en: 'The `shop` application: Template `shop/product/list.html`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shop` 应用程序：模板 `shop/product/list.html`'
- en: 'The `orders` application: Template `orders/order/pdf.html`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orders` 应用程序：模板 `orders/order/pdf.html`'
- en: 'The `cart` application: Template `cart/detail.html`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cart` 应用程序：模板 `cart/detail.html`'
- en: 'The `payments` application: Templates `payment/process.html`, `payment/completed.html`,
    and `payment/canceled.html`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`payments` 应用程序：模板 `payment/process.html`、`payment/completed.html` 和 `payment/canceled.html`'
- en: Remember that you can find the source code for this chapter at [https://github.com/PacktPublishing/Django-5-by-Example/tree/master/Chapter11](https://github.com/PacktPublishing/Django-5-by-Example/tree/master/Chapter11).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以在这个章节的源代码在 [https://github.com/PacktPublishing/Django-5-by-Example/tree/master/Chapter11](https://github.com/PacktPublishing/Django-5-by-Example/tree/master/Chapter11)
    找到。
- en: 'Let’s update the message files to include the new translation strings:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新消息文件以包含新的翻译字符串：
- en: 'Open the shell and run the following command:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 打开shell并运行以下命令：
- en: '[PRE39]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `.po` files are inside the `locale` directory of the `myshop` project, and
    you’ll see that the `orders` application now contains all the strings that you
    marked for translation.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`.po`文件位于`myshop`项目的`locale`目录中，您会看到`orders`应用程序现在包含了您标记为翻译的所有字符串。'
- en: Edit the `.po` translation files of the project and the `orders` application,
    and include Spanish translations in `msgstr`. You can also use the translated
    `.po` files in the source code that accompanies this chapter.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑项目的`.po`翻译文件和`orders`应用程序，并在`msgstr`中包含西班牙语翻译。您还可以在伴随本章节的源代码中使用翻译后的`.po`文件。
- en: 'Run the following command to compile the translation files:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以编译翻译文件：
- en: '[PRE40]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You will see the following output:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '[PRE41]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: A `.mo` file containing compiled translations has been generated for each `.po`
    translation file.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个`.po`翻译文件生成了一个包含编译翻译的`.mo`文件。
- en: Now, you have edited `.po` files with a text editor or by using Poedit. Next,
    we are going to use a Django application to edit translations directly within
    the browser.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经使用文本编辑器或Poedit编辑了`.po`文件。接下来，我们将使用Django应用程序直接在浏览器中编辑翻译。
- en: Using the Rosetta translation interface
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Rosetta翻译界面
- en: Rosetta is a third-party application that allows you to edit translations directly
    in the browser, using the same interface as the Django administration site. Rosetta
    makes it easy to edit `.po` files, and it updates compiled translation files.
    This eliminates the need to download and upload translation files, and it supports
    collaborative editing by multiple users.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Rosetta是一个第三方应用程序，允许您使用与Django管理站点相同的界面直接在浏览器中编辑翻译。Rosetta使编辑`.po`文件变得容易，并更新编译的翻译文件。这消除了下载和上传翻译文件的需要，并支持多用户协作编辑。
- en: 'Let’s integrate Rosetta into your project:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将Rosetta集成到您的项目中：
- en: 'Install Rosetta via `pip` using this command:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令通过`pip`安装Rosetta：
- en: '[PRE42]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Then, add `''rosetta''` to the `INSTALLED_APPS` setting in your project’s `settings.py`
    file, as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将`'rosetta'`添加到项目`settings.py`文件中的`INSTALLED_APPS`设置，如下所示：
- en: '[PRE43]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'You need to add Rosetta’s URLs to your main URL configuration. Edit the main
    `urls.py` file of your project and add the following URL pattern highlighted in
    bold:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将Rosetta的URL添加到您的主URL配置中。编辑项目的主`urls.py`文件并添加以下加粗的URL模式：
- en: '[PRE44]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Make sure you place it before the `shop.urls` pattern to prevent an undesired
    pattern match.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将其放置在`shop.urls`模式之前，以防止不希望的匹配模式。
- en: Open `http://127.0.0.1:8000/admin/` and log in as a superuser. Then, navigate
    to `http://127.0.0.1:8000/rosetta/` in your browser. In the **Filter** menu, click
    **THIRD PARTY** to display all the available message files, including those that
    belong to the `orders` application.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`http://127.0.0.1:8000/admin/`并以超级用户身份登录。然后，在浏览器中导航到`http://127.0.0.1:8000/rosetta/`。在**过滤器**菜单中，点击**第三方**以显示所有可用的消息文件，包括属于`orders`应用程序的文件。
- en: 'You should see a list of existing languages, as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个现有语言的列表，如下所示：
- en: '![](img/B21088_11_02.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_11_02.png)'
- en: 'Figure 11.2: The Rosetta administration interface'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2：Rosetta管理界面
- en: 'Click the **Myshop** link in the **Spanish** section to edit the Spanish translations.
    You should see a list of translation strings, as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在**西班牙语**部分点击**Myshop**链接来编辑西班牙语翻译。您应该看到一个翻译字符串列表，如下所示：
- en: '![](img/B21088_11_03.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_11_03.png)'
- en: 'Figure 11.3: Editing Spanish translations using Rosetta'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3：使用Rosetta编辑西班牙语翻译
- en: You can enter the translations in the **SPANISH** column. The **OCCURRENCE(S)**
    column displays the files and lines of code where each translation string was
    found.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在**西班牙语**列中输入翻译。**出现次数**列显示每个翻译字符串被找到的文件和代码行。
- en: 'Translations that include placeholders will appear as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 包含占位符的翻译将如下所示：
- en: '![](img/B21088_11_04.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_11_04.png)'
- en: 'Figure 11.4: Translations including placeholders'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4：包含占位符的翻译
- en: 'Rosetta uses a different background color to display placeholders. When you
    translate content, make sure that you keep placeholders untranslated. For example,
    take the following string:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Rosetta使用不同的背景颜色来显示占位符。在翻译内容时，请确保您保留占位符未翻译。例如，以下字符串：
- en: '[PRE45]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'It can be translated into Spanish as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以被翻译成西班牙语如下：
- en: '[PRE46]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: You can take a look at the source code that comes with this chapter to use the
    same Spanish translations for your project.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看本章附带源代码，以使用相同的西班牙语翻译为您的项目。
- en: When you finish editing translations, click the **Save and translate next block**
    button to save the translations to the `.po` file. Rosetta compiles the message
    file when you save translations, so there is no need for you to run the `compilemessages`
    command. However, Rosetta requires write access to the `locale` directories to
    write the message files. Make sure that the directories have valid permissions.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成翻译编辑后，点击**保存并翻译下一块**按钮将翻译保存到`.po`文件。Rosetta在保存翻译时编译消息文件，因此你不需要运行`compilemessages`命令。然而，Rosetta需要写入`locale`目录的权限来写入消息文件。确保目录具有有效的权限。
- en: If you want other users to be able to edit translations, open `http://127.0.0.1:8000/admin/auth/group/add/`
    in your browser and create a new group named `translators`. Then, access `http://127.0.0.1:8000/admin/auth/user/`
    to edit the users to whom you want to grant permissions so that they can edit
    translations. When editing a user, under the **Permissions** section, add the
    `translators` group to the **Chosen Groups** for each user. Rosetta is only available
    to superusers or users who belong to the `translators` group.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望其他用户能够编辑翻译，请在浏览器中打开`http://127.0.0.1:8000/admin/auth/group/add/`并创建一个名为`translators`的新组。然后，访问`http://127.0.0.1:8000/admin/auth/user/`来编辑你想要授予权限以编辑翻译的用户。在编辑用户时，在**权限**部分，为每个用户将`translators`组添加到**选择的组**。Rosetta仅对超级用户或属于`translators`组的用户可用。
- en: You can read Rosetta’s documentation at [https://django-rosetta.readthedocs.io/](https://django-rosetta.readthedocs.io/).
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://django-rosetta.readthedocs.io/](https://django-rosetta.readthedocs.io/)阅读Rosetta的文档。
- en: When you add new translations to your production environment, if you serve Django
    with a real web server, you will have to reload your server after running the
    `compilemessages` command, or after saving the translations with Rosetta, for
    any changes to take effect.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当你向生产环境添加新翻译时，如果你使用真实Web服务器运行Django，你必须在运行`compilemessages`命令或使用Rosetta保存翻译后重新加载服务器，以便任何更改生效。
- en: When editing translations, a translation can be marked as *fuzzy*. Let’s review
    what fuzzy translations are.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑翻译时，可以将翻译标记为*模糊的*。让我们回顾一下模糊翻译是什么。
- en: Fuzzy translations
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模糊翻译
- en: When editing translations in Rosetta, you can see a **FUZZY** column. This is
    not a Rosetta feature; it is provided by `gettext`. If the **FUZZY** flag is active
    for a translation, it will not be included in the compiled message files. This
    flag marks translation strings that need to be reviewed by a translator. When
    `.po` files are updated with new translation strings, it is possible that some
    translation strings will automatically be flagged as fuzzy. This happens when
    `gettext` finds some `msgid` that has been slightly modified. `gettext` pairs
    it with what it thinks was the old translation and flags it as fuzzy for review.
    The translator should then review the fuzzy translations, remove the **FUZZY**
    flag, and compile the translation file again.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在Rosetta编辑翻译时，你可以看到一个**FUZZY**列。这不是Rosetta的功能；它是由`gettext`提供的。如果翻译的**FUZZY**标志处于激活状态，则它将不会包含在编译的消息文件中。此标志标记需要翻译员审查的翻译字符串。当`.po`文件更新为新翻译字符串时，某些翻译字符串可能会自动标记为模糊。这发生在`gettext`发现某些`msgid`被略微修改时。`gettext`将其与它认为的旧翻译配对，并将其标记为模糊以供审查。然后，翻译员应审查模糊翻译，移除**FUZZY**标志，并再次编译翻译文件。
- en: You have translated your project’s interface, but internationalization doesn’t
    stop there. You can also translate URL patterns, offering custom URLs tailored
    for each supported language.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经翻译了项目界面，但国际化并不止于此。你还可以翻译URL模式，为每种支持的语言提供定制的URL。
- en: URL patterns for internationalization
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国际化的URL模式
- en: 'Django offers internationalization capabilities for URLs. It includes two main
    features for internationalized URLs:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: Django为URL提供了国际化功能。它包括两个主要功能用于国际化URL：
- en: '**A language prefix in URL patterns**: Adding a language prefix to URLs to
    serve each language version under a different base URL'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL模式中的语言前缀**：在URL中添加语言前缀，以便在不同的基本URL下提供每种语言版本'
- en: '**Translated URL patterns**: Translating URL patterns so that every URL is
    different for each language'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**翻译后的URL模式**：翻译URL模式，使每个URL针对每种语言都不同'
- en: One reason for translating URLs is to optimize your site for search engines.
    By adding a language prefix to your patterns, you will be able to index a URL
    for each language instead of a single URL for all of them. Furthermore, by translating
    URLs into each language, you will provide search engines with URLs that will rank
    better for each language.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译URL的一个原因是为了优化您的网站以适应搜索引擎。通过在您的模式中添加语言前缀，您将能够为每种语言索引一个URL，而不是为所有语言索引一个单一的URL。此外，通过将URL翻译成每种语言，您将为搜索引擎提供在每种语言中排名更好的URL。
- en: Adding a language prefix to URL patterns
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在URL模式中添加语言前缀
- en: Django allows you to add a language prefix to your URL patterns. For example,
    the English version of your site can be served by a path starting with `/en/`,
    and the Spanish version under `/es/`. To use languages in URL patterns, you have
    to use the `LocaleMiddleware` provided by Django. The framework will use it to
    identify the current language from the requested URL. Previously, you added it
    to the `MIDDLEWARE` setting of your project, so you don’t need to do it now.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: Django允许您在URL模式中添加语言前缀。例如，您网站的英文版本可以通过以`/en/`开头的路径提供服务，而西班牙语版本在`/es/`下。要使用URL模式中的语言，您必须使用Django提供的`LocaleMiddleware`。框架将使用它从请求的URL中识别当前语言。之前，您已将其添加到项目的`MIDDLEWARE`设置中，因此现在您不需要再这样做。
- en: 'Let’s add a language prefix to your URL patterns:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在URL模式中添加一个语言前缀：
- en: 'Edit the main `urls.py` file of the `myshop` project and add `i18n_patterns()`,
    as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`myshop`项目的主体`urls.py`文件，并添加`i18n_patterns()`，如下所示：
- en: '[PRE47]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: You can combine non-translatable standard URL patterns and patterns under `i18n_patterns`
    so that some patterns include a language prefix and others don’t. However, it’s
    better to use translated URLs only to avoid the possibility that a carelessly
    translated URL matches a non-translated URL pattern.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将不可翻译的标准URL模式和`i18n_patterns`下的模式结合起来，以便某些模式包含语言前缀，而其他模式则不包含。然而，最好只使用翻译的URL，以避免不小心翻译的URL与非翻译的URL模式匹配的可能性。
- en: Run the development server and open `http://127.0.0.1:8000/` in your browser.
    Django will perform the steps described in the *How Django determines the current
    language* section to determine the current language, and it will redirect you
    to the requested URL, including the language prefix. Take a look at the URL in
    your browser; it should now look like `http://127.0.0.1:8000/en/`. The current
    language is the one set by the `Accept-Language` header of your browser if it
    is Spanish or English; otherwise, it is the default `LANGUAGE_CODE` (English)
    defined in your settings.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 运行开发服务器并在您的浏览器中打开`http://127.0.0.1:8000/`。Django将执行*如何确定当前语言*部分中描述的步骤以确定当前语言，并将您重定向到请求的URL，包括语言前缀。查看您浏览器中的URL；现在它应该看起来像`http://127.0.0.1:8000/en/`。当前语言是您的浏览器`Accept-Language`头中设置的语言，如果是西班牙语或英语；否则，它是您设置中定义的默认`LANGUAGE_CODE`（英语）。
- en: You have added a language prefix to your URLs, generating a different URL for
    each language available. This helps you to index different versions in search
    engines.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经为您的URL添加了语言前缀，为每种可用的语言生成不同的URL。这有助于您在搜索引擎中索引不同的版本。
- en: Next, we are going to translate URL patterns so that we can add fully translated
    URLs to our site.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将翻译URL模式，以便我们可以将完全翻译的URL添加到我们的网站上。
- en: Translating URL patterns
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 翻译URL模式
- en: 'Django supports translated strings in URL patterns. You can use a different
    translation for each language for a single URL pattern. You can mark URL patterns
    for translation in the same way you would with literals, using the `gettext_lazy()`
    function. To do this, follow these steps:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Django支持在URL模式中使用翻译字符串。您可以为单个URL模式使用不同的翻译。您可以使用与字面量相同的方式标记需要翻译的URL模式，使用`gettext_lazy()`函数。为此，请按照以下步骤操作：
- en: 'Edit the main `urls.py` file of the `myshop` project and add translation strings
    to the regular expressions of the URL patterns for the `cart`, `orders`, `payment`,
    and `coupons` applications, as follows:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`myshop`项目的主体`urls.py`文件，并为`cart`、`orders`、`payment`和`coupons`应用的URL模式正则表达式添加翻译字符串，如下所示：
- en: '[PRE48]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Edit the `urls.py` file of the `orders` application and mark the `order_create`
    URL pattern for translation, as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`orders`应用的`urls.py`文件，并标记`order_create` URL模式为翻译，如下所示：
- en: '[PRE49]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Edit the `urls.py` file of the `payment` application and change the code to
    the following:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`payment`应用的`urls.py`文件，并将代码更改为以下内容：
- en: '[PRE50]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Note that these URL patterns will include a language prefix because they are
    included under `i18n_patterns()` in the main `urls.py` file of the project. This
    will make each URL pattern have a different URI for each available language, one
    starting with `/en/`, another one with `/es/`, and so on. However, we need a single
    URL for Stripe to notify events, and we need to avoid language prefixes in the
    `webhook` URL.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些URL模式将包括语言前缀，因为它们包含在项目的`main `urls.py`文件中的`i18n_patterns()`下。这将使每个URL模式对于每种可用语言都有一个不同的URI，一个以`/en/`开头，另一个以`/es/`开头，依此类推。然而，我们需要一个用于Stripe通知事件的单个URL，并且我们需要在`webhook`
    URL中避免语言前缀。
- en: 'Remove the `webhook` URL pattern from the `urls.py` file of the `payment` application.
    The file should now look like the following:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 从`payment`应用的`urls.py`文件中删除`webhook` URL模式。文件现在应如下所示：
- en: '[PRE51]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Then, add the following `webhook` URL pattern to the main `urls.py` file of
    the `myshop` project. The new code is highlighted in bold:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将以下`webhook` URL模式添加到`myshop`项目的`main `urls.py`文件中。新的代码以粗体显示：
- en: '[PRE52]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: We have added the `webhook` URL pattern to `urlpatterns` outside of `i18n_patterns()`
    to ensure we maintain a single URL for Stripe event notifications.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将`webhook` URL模式添加到`urlpatterns`之外，以确保我们保持Stripe事件通知的单个URL。
- en: You don’t need to translate the URL patterns of the `shop` application, as they
    are built with variables and do not include any other literals.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要翻译`shop`应用的URL模式，因为它们是用变量构建的，不包含任何其他文字。
- en: 'Open the shell and run the next command to update the message files with the
    new translations:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 打开shell并运行以下命令以更新消息文件中的新翻译：
- en: '[PRE53]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Make sure the development server is running with the following command:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 确保开发服务器正在以下命令下运行：
- en: '[PRE54]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Open `http://127.0.0.1:8000/en/rosetta/` in your browser and click the **Myshop**
    link under the **Spanish** section. Click on **UNTRANSLATED ONLY** to only see
    the strings that have not been translated yet. Now, you will see the URL patterns
    for translation, as shown in *Figure 11.5*:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开`http://127.0.0.1:8000/en/rosetta/`并点击**西班牙语**部分下的**Myshop**链接。点击**仅未翻译**以仅查看尚未翻译的字符串。现在，您将看到翻译的URL模式，如图*图11.5*所示：
- en: '![](img/B21088_11_05.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_11_05.png)'
- en: 'Figure 11.5: URL patterns for translation in the Rosetta interface'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5：Rosetta界面中的翻译URL模式
- en: 'Add a different translation string for each URL. Don’t forget to include a
    slash character, `/`, at the end of each URL, as shown in *Figure 11.6*:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个URL添加不同的翻译字符串。不要忘记在每个URL的末尾包括一个斜杠字符`/`，如图*图11.6*所示：
- en: '![](img/B21088_11_06.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_11_06.png)'
- en: 'Figure 11.6: Spanish translations for URL patterns in the Rosetta interface'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6：Rosetta界面中的URL模式西班牙语翻译
- en: When you have finished, click **SAVE AND TRANSLATE NEXT BLOCK**.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，点击**保存并翻译下一块**。
- en: 'Then, click on **FUZZY ONLY**. You will see translations that have been flagged
    as fuzzy because they were paired with the old translation of a similar original
    string. In the case displayed in *Figure 11.7*, the translations are incorrect
    and need to be corrected:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击**仅模糊**。您将看到被标记为模糊的翻译，因为这些翻译与类似原始字符串的旧翻译配对。在*图11.7*中显示的情况下，翻译是错误的，需要更正：
- en: '![](img/B21088_11_07.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_11_07.png)'
- en: 'Figure 11.7: Fuzzy translations in the Rosetta interface'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7：Rosetta界面中的模糊翻译
- en: 'Enter the correct text for the fuzzy translations. Rosetta will automatically
    uncheck the **FUZZY** select box when you enter new text for a translation. When
    you have finished, click **SAVE AND TRANSLATE NEXT BLOCK**:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 为模糊翻译输入正确的文本。当您为翻译输入新文本时，Rosetta将自动取消选中**模糊**选择框。完成输入后，点击**保存并翻译下一块**：
- en: '![](img/B21088_11_08.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_11_08.png)'
- en: 'Figure 11.8: Correcting fuzzy translations in the Rosetta interface'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8：在Rosetta界面中更正模糊翻译
- en: You can now go back to `http://127.0.0.1:8000/en/rosetta/files/third-party/`
    and edit the Spanish translation for the `orders` application as well.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以回到`http://127.0.0.1:8000/en/rosetta/files/third-party/`并编辑`orders`应用的西班牙语翻译。
- en: After translating the strings into Spanish, our site will be available in two
    languages. You have already learned how Django determines the current language.
    However, users may wish to switch languages. Let’s create the functionality that
    allows users to change their language preference.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在将字符串翻译成西班牙语后，我们的网站将提供两种语言。您已经学习了Django如何确定当前语言。然而，用户可能希望切换语言。让我们创建允许用户更改语言偏好的功能。
- en: Allowing users to switch language
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 允许用户切换语言
- en: Since you are serving content that is available in multiple languages, you should
    let your users switch the site’s language. You are going to add a language selector
    to your site. The language selector will consist of a list of available languages
    displayed using links.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你提供的内容支持多种语言，你应该允许用户切换网站的语种。你将向你的网站添加一个语言选择器。语言选择器将包含一个显示链接的可用语言列表。
- en: 'Edit the `shop/base.html` template of the `shop` application and locate the
    following lines:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `shop/base.html` 模板中的 `shop` 应用程序，并定位以下行：
- en: '[PRE55]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Replace them with the following code:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 将它们替换为以下代码：
- en: '[PRE56]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Make sure that no template tag is split into multiple lines.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 确保没有任何模板标签被拆分成多行。
- en: 'This is how you build your language selector:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是构建你的语言选择器的方式：
- en: You load the internationalization tags using `{% load i18n %}`.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你使用 `{% load i18n %}` 加载国际化标签。
- en: You use the `{% get_current_language %}` tag to retrieve the current language.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你使用 `{% get_current_language %}` 标签来检索当前语言。
- en: You get the languages defined in the `LANGUAGES` setting using the `{% get_available_languages
    %}` template tag.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过使用 `{% get_available_languages %}` 模板标签来获取在 `LANGUAGES` 设置中定义的语言。
- en: You use the tag `{% get_language_info_list %}` to provide easy access to the
    language attributes.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你使用 `{% get_language_info_list %}` 标签来提供对语言属性的便捷访问。
- en: You build an HTML list to display all available languages, and you add a `selected`
    class attribute to the currently active language.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你构建一个 HTML 列表来显示所有可用语言，并给当前活动的语言添加一个 `selected` 类属性。
- en: 'In the code for the language selector, you used the template tags provided
    by `i18n`, based on the languages available in the settings of your project. Now,
    open `http://127.0.0.1:8000/` in your browser and take a look. You should see
    the language selector in the top right-hand corner of the site, as follows:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在语言选择器的代码中，你使用了由 `i18n` 提供的模板标签，基于你项目设置中的可用语言。现在，在你的浏览器中打开 `http://127.0.0.1:8000/`
    并查看。你应该在网站右上角看到语言选择器，如下所示：
- en: '![](img/B21088_11_09.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_11_09.png)'
- en: 'Figure 11.9: The product list page, including a language selector in the site
    header'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9：产品列表页面，包括网站页眉中的语言选择器
- en: 'Images in this chapter:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的图片：
- en: '*Green tea*: Photo by Jia Ye on Unsplash'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '*绿茶*：由 Jia Ye 在 Unsplash 上拍摄的照片'
- en: '*Red tea*: Photo by Manki Kim on Unsplash'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '*红茶*：由 Manki Kim 在 Unsplash 上拍摄的照片'
- en: '*Tea powder*: Photo by Phuong Nguyen on Unsplash'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '*茶粉*：由 Phuong Nguyen 在 Unsplash 上拍摄的照片'
- en: Users can now effortlessly switch to their preferred language by selecting from
    the options available in the language selector.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 用户现在可以通过选择语言选择器中提供的选项轻松切换到他们喜欢的语言。
- en: Translating models with django-parler
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 django-parler 翻译模型
- en: Django does not include built-in support to translate models. To manage content
    in multiple languages, you can either develop a custom solution or opt for a third-party
    module that facilitates model translation. There are several third-party applications
    available, each employing a unique method for storing and retrieving translations.
    One of these applications is `django-parler`. This module provides a very effective
    approach for translating models and integrates smoothly with Django’s administration
    site.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: Django 不包括内置的模型翻译支持。要管理多语言内容，你可以开发一个自定义解决方案，或者选择一个促进模型翻译的第三方模块。有几种第三方应用程序可用，每种应用程序都采用独特的方法来存储和检索翻译。其中之一是
    `django-parler`。此模块为翻译模型提供了一种非常有效的方法，并且与 Django 的管理站点无缝集成。
- en: '`django-parler` generates a separate database table for each model that contains
    translations. This table includes all the translated fields and a foreign key
    for the original object that the translation belongs to. It also contains a language
    field, since each row stores the content for a single language.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-parler` 为每个包含翻译的模型生成一个单独的数据库表。此表包括所有翻译字段以及一个外键，指向翻译所属的原始对象。它还包含一个语言字段，因为每一行存储的是单一语言的内容。'
- en: The `django-parler` package has not received updates for several years. Despite
    this, many developers continue to use it because of its proven effectiveness in
    facilitating model translations.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-parler` 包已经好几年没有更新了。尽管如此，许多开发者仍然继续使用它，因为它在促进模型翻译方面的有效性得到了证明。'
- en: Installing django-parler
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 django-parler
- en: 'Install `django-parler` via `pip` using the following command:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令通过 `pip` 安装 `django-parler`：
- en: '[PRE57]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Edit the `settings.py` file of your project and add `''parler''` to the `INSTALLED_APPS`
    setting, as follows:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑你的项目中的 `settings.py` 文件，并将 `'parler'` 添加到 `INSTALLED_APPS` 设置中，如下所示：
- en: '[PRE58]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Also, add the following code to your settings:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将以下代码添加到你的设置中：
- en: '[PRE59]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This setting defines the available languages, `en` and `es`, for `django-parler`.
    You specify the default language, `en`, and indicate that `django-parler` should
    not hide untranslated content.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 此设置定义了`django-parler`可用的语言，`en`和`es`，对于`django-parler`。您指定默认语言`en`，并指示`django-parler`不应隐藏未翻译的内容。
- en: Parler is now activated in our project. Let’s add translation capabilities to
    our model fields.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: Parler现在已在我们的项目中激活。让我们为我们的模型字段添加翻译功能。
- en: Translating model fields
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 翻译模型字段
- en: 'Let’s add translations to your product catalog. `django-parler` provides a
    `TranslatableModel` model class and a `TranslatedFields` wrapper to translate
    model fields. You can follow these instructions:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为您的产品目录添加翻译。`django-parler`提供了一个`TranslatableModel`模型类和一个`TranslatedFields`包装器来翻译模型字段。您可以按照以下说明操作：
- en: 'Edit the `models.py` file inside the `shop` application directory and add the
    following import:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`shop`应用程序目录内的`models.py`文件并添加以下导入：
- en: '[PRE60]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Then, modify the `Category` model to make the `name` and `slug` fields translatable,
    as follows:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，修改`Category`模型，使`name`和`slug`字段可翻译，如下所示：
- en: '[PRE61]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The `Category` model now inherits from `TranslatableModel` instead of `models.Model`,
    and both the `name` and `slug` fields are included in the `TranslatedFields` wrapper.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`Category`模型现在从`models.Model`继承，而不是从`TranslatableModel`继承，并且`name`和`slug`字段都包含在`TranslatedFields`包装器中。'
- en: 'Edit the `Product` model to add translations for the `name`, `slug`, and `description`
    fields, as follows:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`Product`模型以添加`name`、`slug`和`description`字段的翻译，如下所示：
- en: '[PRE62]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '`django-parler` manages translations by generating another model for each translatable
    model. In the following schema, you can see the fields of the `Product` model
    and what the generated `ProductTranslation` model will look like:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-parler`通过为每个可翻译模型生成另一个模型来管理翻译。在以下架构中，您可以查看`Product`模型的字段以及生成的`ProductTranslation`模型将是什么样子：'
- en: '![](img/B21088_11_10.png)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_11_10.png)'
- en: 'Figure 11.10: The Product model and related ProductTranslation model generated
    by django-parler'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.10：由django-parler生成的产品模型和相关产品翻译模型
- en: The `ProductTranslation` model generated by `django-parler` includes the `name`,
    `slug`, and `description` translatable fields, a `language_code` field, and a
    `ForeignKey` for the master `Product` object. There is a one-to-many relationship
    from `Product` to `ProductTranslation`. A `ProductTranslation` object will exist
    for each available language of each `Product` object.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-parler`生成的`ProductTranslation`模型包括`name`、`slug`和`description`可翻译字段、一个`language_code`字段以及指向主`Product`对象的`ForeignKey`。从`Product`到`ProductTranslation`存在一对一的关系。每个`Product`对象将存在一个对应每种可用语言的`ProductTranslation`对象。'
- en: Since Django uses a separate table for translations, there are some Django features
    that you can’t use. It is not possible to use a default order with a translated
    field. You can filter by translated fields in queries, but you can’t include a
    translatable field in the `ordering Meta` options. Also, you can’t use indexes
    for the fields that are translated, as these fields will not exist in the original
    model because they will reside in the translation model.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Django使用单独的表来存储翻译，因此您无法使用一些Django功能。无法使用带有翻译字段的默认排序。您可以在查询中按翻译字段进行筛选，但不能在`ordering
    Meta`选项中包含可翻译字段。此外，您不能为翻译字段使用索引，因为这些字段将不会存在于原始模型中，因为它们将位于翻译模型中。
- en: 'Edit the `models.py` file of the `shop` application and comment out the `ordering`
    and `indexes` attributes of the `Category Meta` class:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`shop`应用程序的`models.py`文件并取消注释`Category Meta`类的`ordering`和`indexes`属性：
- en: '[PRE63]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'You also have to comment out the `ordering` and attribute of the `Product Meta`
    class and the indexes that refer to the translated fields. Comment out the following
    lines of the `Product Meta` class:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 您还必须取消注释`Product Meta`类的`ordering`属性和引用翻译字段的索引。取消注释以下`Product Meta`类的行：
- en: '[PRE64]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: You can read more about the `django-parler` module’s compatibility with Django
    at [https://django-parler.readthedocs.io/en/latest/compatibility.html](https://django-parler.readthedocs.io/en/latest/compatibility.html).
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以阅读有关`django-parler`模块与Django兼容性的更多信息，请参阅[https://django-parler.readthedocs.io/en/latest/compatibility.html](https://django-parler.readthedocs.io/en/latest/compatibility.html)。
- en: Let’s continue by integrating the translatable models into the administration
    site.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续将可翻译模型集成到管理站点中。
- en: Integrating translations into the administration site
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将翻译集成到管理站点
- en: '`django-parler` integrates seamlessly with the Django administration site.
    This allows you to easily edit different translations of your objects through
    the user-friendly admin interface. It includes a `TranslatableAdmin` class that
    overrides the `ModelAdmin` class provided by Django to manage model translations.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-parler`与Django管理站点无缝集成。这允许您通过用户友好的管理界面轻松编辑对象的多种翻译。它包括一个`TranslatableAdmin`类，该类覆盖了Django提供的`ModelAdmin`类以管理模型翻译。'
- en: 'Edit the `admin.py` file of the `shop` application and add the following import
    to it:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`shop`应用的`admin.py`文件，并向其中添加以下导入：
- en: '[PRE65]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Modify the `CategoryAdmin` and `ProductAdmin` classes to inherit from `TranslatableAdmin`
    instead of `ModelAdmin`. The `django-parler` module doesn’t support the `prepopulated_fields`
    attribute, but it does support the `get_prepopulated_fields()` method that provides
    the same functionality. Let’s change this accordingly. Edit the `admin.py` file
    to make it look like the following:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 将`CategoryAdmin`和`ProductAdmin`类修改为从`TranslatableAdmin`继承，而不是从`ModelAdmin`继承。`django-parler`模块不支持`prepopulated_fields`属性，但它支持`get_prepopulated_fields()`方法，该方法提供相同的功能。让我们相应地进行更改。编辑`admin.py`文件，使其看起来如下：
- en: '[PRE66]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: You have adapted the administration site to work with the new translated models.
    You can now sync the database with the model changes that you made.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 您已将管理站点调整为与新的翻译模型一起工作。您现在可以同步数据库，以与您所做的模型更改保持一致。
- en: Creating migrations for model translations
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模型翻译的迁移
- en: 'To create migrations, follow these instructions:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建迁移，请按照以下说明操作：
- en: 'Open the shell and run the following command to create a new migration for
    the model translations:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并运行以下命令以创建模型翻译的新迁移：
- en: '[PRE67]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'You will see the following output:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '[PRE68]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: This migration automatically includes the `CategoryTranslation` and `ProductTranslation`
    models created dynamically by `django-parler`. It’s important to note that this
    migration deletes the previous existing fields from your models.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 此迁移自动包括由`django-parler`动态创建的`CategoryTranslation`和`ProductTranslation`模型。请注意，此迁移会删除模型中先前存在的字段。
- en: This means that you will lose that data and need to set your categories and
    products again on the administration site after running it.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您将丢失这些数据，在运行它之后需要在管理站点上重新设置类别和产品。
- en: 'Edit the file `migrations/0002_translations.py` of the `shop` application and
    identify the two occurrences of the following line:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`shop`应用的`migrations/0002_translations.py`文件，并识别以下行的两个出现：
- en: '[PRE69]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Replace those occurrences with the following:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些出现替换为以下内容：
- en: '[PRE70]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: This is a fix for a minor issue found in the `django-parler` version you are
    using. This change is necessary to prevent the migration from failing when applying
    it. This issue is related to creating translations for existing fields in the
    model and shall be fixed in newer `django-parler` versions.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 这是针对您使用的`django-parler`版本中发现的微小问题的修复。此更改是必要的，以防止在应用迁移时迁移失败。此问题与在模型中创建现有字段的翻译有关，应在较新的`django-parler`版本中得到修复。
- en: 'Run the following command to apply the migration:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以应用迁移：
- en: '[PRE71]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'You will see an output that ends with the following line:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个以以下行为结尾的输出：
- en: '[PRE72]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Your models are now synchronized with the database.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 您的模型现在与数据库同步。
- en: 'Run the development server using the following command:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行开发服务器：
- en: '[PRE73]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Open `http://127.0.0.1:8000/en/admin/shop/category/` in your browser. You will
    see that existing categories lost their name and slug, due to deleting those fields
    and using the translatable models generated by `django-parler` instead. You will
    just see a dash under each column, like in *Figure 11.11*:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://127.0.0.1:8000/en/admin/shop/category/`。您将看到由于删除了这些字段并使用由`django-parler`生成的可翻译模型，现有的类别失去了名称和slug。您将只看到每列下的破折号，如*图11.11*所示：
- en: '![](img/B21088_11_11.png)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_11_11.png)'
- en: 'Figure 11.11: The category list on the Django administration site after creating
    the translation models'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.11：创建翻译模型后在Django管理站点上的类别列表
- en: 'Click on the dash under the category name to edit it. You will see that the
    **Change category** page includes two different tabs, one for English and one
    for Spanish translations:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 点击类别名称下的破折号以编辑它。您将看到**更改类别**页面包括两个不同的选项卡，一个用于英语翻译，一个用于西班牙语翻译：
- en: '![](img/B21088_11_12.png)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_11_12.png)'
- en: 'Figure 11.12: The category edit form, including the language tabs added by
    django-parler'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.12：包括由django-parler添加的语言选项卡的类别编辑表单
- en: 'Make sure that you fill in a name and slug for all existing categories. When
    you edit a category, enter the English details and click on **Save and continue
    editing**. Then, click on **Spanish**, add the Spanish translation for the fields,
    and click on **SAVE**:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 确保为所有现有类别填写一个名称和 slug。当您编辑一个类别时，输入英语详情并点击 **保存并继续编辑**。然后，点击 **西班牙语**，为字段添加西班牙语翻译，并点击
    **保存**：
- en: '![](img/B21088_11_13.png)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_11_13.png)'
- en: 'Figure 11.13: The Spanish translation of the category edit form'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13：类别编辑表单的西班牙语翻译
- en: Make sure to save the changes before switching between the language tabs.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 在切换语言选项卡之间确保保存更改。
- en: After you complete the data for existing categories, open `http://127.0.0.1:8000/en/admin/shop/product/`
    and edit each of the products, providing an English and Spanish name, a slug,
    and a description.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 完成现有类别的数据后，打开 `http://127.0.0.1:8000/en/admin/shop/product/` 并编辑每个产品，提供英语和西班牙语名称、slug
    和描述。
- en: Once the translations are in place, the next step will be to explore how to
    interact with the translated fields through the Django ORM.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦翻译就绪，下一步将是探索如何通过 Django ORM 与翻译字段交互。
- en: Using translations in QuerySets
  id: totrans-390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 QuerySets 中使用翻译
- en: 'Let’s take a look at how to work with translations in QuerySets. Run the following
    command to open the Python shell:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在 QuerySets 中处理翻译。运行以下命令以打开 Python shell：
- en: '[PRE74]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Let’s take a look at how you can retrieve and query translation fields. To
    get the object with translatable fields translated into a specific language, you
    can use Django’s `activate()` function, as follows:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何检索和查询翻译字段。要获取具有可翻译字段的特定语言的对象，您可以使用 Django 的 `activate()` 函数，如下所示：
- en: '[PRE75]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Another way to do this is by using the `language()` manager provided by `django-parler`,
    as follows:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用 `django-parler` 提供的 `language()` 管理器，如下所示：
- en: '[PRE76]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'When you access translated fields, they are resolved using the current language.
    You can set a different current language for an object to access that specific
    translation, as follows:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问翻译字段时，它们将使用当前语言进行解析。您可以为对象设置不同的当前语言以访问特定的翻译，如下所示：
- en: '[PRE77]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'When performing a QuerySet using `filter()`, you can filter using the related
    translation objects with the `translations__` syntax, as follows:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `filter()` 执行 QuerySet 时，您可以使用 `translations__` 语法通过相关翻译对象进行过滤，如下所示：
- en: '[PRE78]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Let’s apply what we have learned to our views.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将所学知识应用到我们的视图中。
- en: Adapting views for translations
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整视图以进行翻译
- en: 'Let’s adapt the product catalog views:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调整产品目录视图：
- en: 'Edit the `views.py` file of the `shop` application and add the following code
    highlighted in bold to the `product_list` view:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `shop` 应用程序的 `views.py` 文件，并在 `product_list` 视图中添加以下加粗显示的代码：
- en: '[PRE79]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Then, edit the `product_detail` view and add the following code highlighted
    in bold:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，编辑 `product_detail` 视图，并添加以下加粗显示的代码：
- en: '[PRE80]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: The `product_list` and `product_detail` views are now adapted to retrieve objects
    using translated fields.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`product_list` 和 `product_detail` 视图现在已调整以使用翻译字段检索对象。'
- en: 'Run the development server with the following command:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行开发服务器：
- en: '[PRE81]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Open `http://127.0.0.1:8000/es/` in your browser. You should see the product
    list page, including all products translated into Spanish:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开 `http://127.0.0.1:8000/es/`。您应该看到产品列表页面，包括所有翻译成西班牙语的产品：
- en: '![](img/B21088_11_14.png)'
  id: totrans-412
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_11_14.png)'
- en: 'Figure 11.14: The Spanish version of the product list page'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.14：产品列表页面的西班牙语版本
- en: 'Now, each product’s URL is built using the `slug` field translated into the
    current language. For example, the URL for a product in Spanish is `http://127.0.0.1:8000/es/2/te-rojo/`,
    whereas, in English, the URL is `http://127.0.0.1:8000/en/2/red-tea/`. If you
    navigate to a product details page, you will see the translated URL and the contents
    of the selected language, as shown in the following example:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每个产品的URL都是使用当前语言的 `slug` 字段构建的。例如，西班牙语产品的URL是 `http://127.0.0.1:8000/es/2/te-rojo/`，而在英语中，URL是
    `http://127.0.0.1:8000/en/2/red-tea/`。如果您导航到产品详情页面，您将看到翻译后的URL和所选语言的內容，如下例所示：
- en: '![](img/B21088_11_15.png)'
  id: totrans-415
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_11_15.png)'
- en: 'Figure 11.15: The Spanish version of the product details page'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.15：产品详情页面的西班牙语版本
- en: If you want to know more about `django-parler`, you can find the full documentation
    at [https://django-parler.readthedocs.io/en/latest/](https://django-parler.readthedocs.io/en/latest/).
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于 `django-parler` 的信息，您可以在 [https://django-parler.readthedocs.io/en/latest/](https://django-parler.readthedocs.io/en/latest/)
    找到完整的文档。
- en: You have learned how to translate Python code, templates, URL patterns, and
    model fields. To complete the internationalization and localization process, you
    need to use localized formatting for dates, times, and numbers as well.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学习了如何翻译Python代码、模板、URL模式和模型字段。为了完成国际化区域化过程，您还需要使用日期、时间和数字的区域化格式。
- en: Format localization
  id: totrans-419
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式区域化
- en: To enhance user experience, it’s important to present dates, times, and numbers
    in formats that align with the user’s locale. Adapting your site to the data formats
    familiar to users in various regions significantly improves its accessibility.
    Since Django 5.0, localized formatting of data is always enabled. Django displays
    numbers and dates using the format of the current locale.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提升用户体验，将日期、时间和数字以与用户区域设置一致的方式呈现非常重要。将您的网站调整为适应不同地区用户熟悉的数据格式，可以显著提高其可访问性。自Django
    5.0以来，数据区域化格式化始终是启用的。Django使用当前区域设置的格式显示数字和日期。
- en: 'Django tries to use a locale-specific format whenever it outputs a value in
    a template. *Figure 11.16* shows the format localization for decimal numbers in
    the English and Spanish versions of the site:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: Django试图在模板中输出值时使用区域特定的格式。*图11.16*显示了网站英文和西班牙语文本中十进制数字的格式区域化：
- en: '![](img/B21088_11_16.png)'
  id: totrans-422
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_11_16.png)'
- en: 'Figure 11.16: Format localization in English and Spanish'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.16：英文和西班牙语文本中的格式区域化
- en: Decimal numbers in the English version are displayed with a dot separator for
    decimal places, while in the Spanish version, a comma is used as the separator.
    This is due to the locale formats specified for the `en` and `es` locales by Django.
    You can take a look at the English formatting configuration at [https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/en/formats.py](https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/en/formats.py)
    and the Spanish formatting configuration at [https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/es/formats.py](https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/es/formats.py).
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 英语文本中的十进制数字使用点作为小数分隔符显示，而在西班牙语文本中，使用逗号作为分隔符。这是由于Django为`en`和`es`区域设置的格式。您可以在[https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/en/formats.py](https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/en/formats.py)查看英文格式配置，并在[https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/es/formats.py](https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/es/formats.py)查看西班牙语文本格式配置。
- en: By default, Django applies the format localization for each locale. However,
    there might be cases for which you don’t want to use localized values. This is
    especially relevant when outputting JavaScript or JSON, which has to provide a
    machine-readable format.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Django为每个区域设置应用格式区域化。但是，可能存在您不想使用区域化值的情况。这尤其适用于输出JavaScript或JSON，它们必须提供机器可读的格式。
- en: 'Django offers a `{% localize %}` template tag that allows you to turn on/off
    localization for template fragments. This gives you control over localized formatting.
    You will have to load the `l10n` (localization) tags to be able to use this template
    tag. The following is an example of how to turn localization on and off in a template:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了一个`{% localize %}`模板标签，允许您为模板片段打开/关闭区域化。这为您提供了对区域化格式的控制。您必须加载`l10n`（区域化）标签才能使用此模板标签。以下是在模板中打开和关闭区域化的示例：
- en: '[PRE82]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Django also offers the `localize` and `unlocalize` template filters to force
    or avoid the localization of a value. These filters can be applied as follows:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: Django还提供了`localize`和`unlocalize`模板过滤器，可以强制或避免对值进行区域化。这些过滤器可以按以下方式应用：
- en: '[PRE83]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: You can also create custom format files to specify locale formatting. You can
    find further information about format localization at [https://docs.djangoproject.com/en/5.0/topics/i18n/formatting/](https://docs.djangoproject.com/en/5.0/topics/i18n/formatting/).
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以创建自定义格式文件来指定区域设置格式。您可以在[https://docs.djangoproject.com/en/5.0/topics/i18n/formatting/](https://docs.djangoproject.com/en/5.0/topics/i18n/formatting/)找到有关格式区域设置的更多信息。
- en: Next, you will learn how to create localized form fields.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将学习如何创建区域化表单字段。
- en: Using django-localflavor to validate form fields
  id: totrans-432
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用django-localflavor验证表单字段
- en: '`django-localflavor` is a third-party module that contains a collection of
    utilities, such as form fields or model fields, that are specific for each country.
    It’s very useful for validating local regions, local phone numbers, identity card
    numbers, social security numbers, and so on. The package is organized into a series
    of modules named after ISO 3166 country codes. Follow these instructions to set
    it up:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-localflavor`是一个第三方模块，包含一系列特定于每个国家的实用工具，如表单字段或模型字段。它对于验证本地区域、本地电话号码、身份证号码、社会保险号码等非常有用。该软件包组织成一系列以ISO
    3166国家代码命名的模块。按照以下说明进行设置：'
- en: 'Install `django-localflavor` using the following command:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装`django-localflavor`：
- en: '[PRE84]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Edit the `settings.py` file of your project and add `localflavor` to the `INSTALLED_APPS`
    setting, as follows:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑您项目的`settings.py`文件，并将`localflavor`添加到`INSTALLED_APPS`设置中，如下所示：
- en: '[PRE85]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'You are going to add the United States zip code field so that a valid United
    States zip code is required to create a new order. Edit the `forms.py` file of
    the `orders` application and make it look like the following:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 您将添加美国邮政编码字段，以便创建新订单时必须输入有效的美国邮政编码。编辑`orders`应用的`forms.py`文件，使其看起来如下所示：
- en: '[PRE86]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: You import the `USZipCodeField` field from the `us` package of `localflavor`
    and use it for the `postal_code` field of the `OrderCreateForm` form.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 您从`localflavor`的`us`包中导入`USZipCodeField`字段，并将其用于`OrderCreateForm`表单的`postal_code`字段。
- en: 'Run the development server with the following command:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行开发服务器：
- en: '[PRE87]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Open `http://127.0.0.1:8000/en/orders/create/` in your browser. Fill in all
    the fields, enter a three-letter zip code, and then submit the form. You will
    get the following validation error, which is raised by `USZipCodeField`:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开`http://127.0.0.1:8000/en/orders/create/`。填写所有字段，输入三位字母的邮政编码，然后提交表单。您将得到以下验证错误，这是由`USZipCodeField`引发的：
- en: '[PRE88]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '*Figure 11.17* shows the form validation error:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '*图11.17* 展示了表单验证错误：'
- en: '![](img/B21088_11_17.png)'
  id: totrans-446
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_11_17.png)'
- en: 'Figure 11.17: The validation error for an invalid US zip code'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.17：无效美国邮政编码的验证错误
- en: This is just a brief example of how to use a custom field from `localflavor`
    in your own project for validation purposes. The local components provided by
    `localflavor` are very useful for adapting your application to specific countries.
    You can read the `django-localflavor` documentation and see all the available
    local components for each country at [https://django-localflavor.readthedocs.io/en/latest/](https://django-localflavor.readthedocs.io/en/latest/).
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个如何在自己的项目中使用`localflavor`中的自定义字段进行验证的简要示例。`localflavor`提供的本地组件对于使您的应用程序适应特定国家非常有用。您可以阅读`django-localflavor`文档，查看每个国家可用的所有本地组件，请参阅[https://django-localflavor.readthedocs.io/en/latest/](https://django-localflavor.readthedocs.io/en/latest/)。
- en: Expanding your project using AI
  id: totrans-449
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AI扩展您的项目
- en: In this section, you are presented with a task to extend your project, accompanied
    by a sample prompt for ChatGPT to assist you. To engage with ChatGPT, visit [https://chat.openai.com/](https://chat.openai.com/).
    If this is your first interaction with ChatGPT, you can revisit the *Expanding
    your project using AI* section in *Chapter 3, Extending Your Blog Application*.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将面临一个扩展您项目的任务，并附有ChatGPT的示例提示以供协助。要参与ChatGPT，请访问[https://chat.openai.com/](https://chat.openai.com/)。如果您是第一次与ChatGPT互动，您可以回顾*第3章，扩展您的博客应用程序*中的*使用AI扩展您的项目*部分。
- en: In this project example, we have implemented an online shop. We have added orders,
    payments, and a coupon system. Now, another typical feature of e-commerce platforms
    is managing shipping costs. Let’s consider adding a weight attribute to products
    and implementing shipping costs based on the total weight of the items shipped.
    Use ChatGPT to help you implement shipping costs for products, making them dependent
    on the product’s weight. Ensure that Stripe charges the correct amount, including
    the calculated shipping costs. You can use the prompt provided at [https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter11/prompts/task.md](https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter11/prompts/task.md).
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目示例中，我们已经实现了一个在线商店。我们添加了订单、支付和优惠券系统。现在，电子商务平台的另一个典型功能是管理运费。让我们考虑为产品添加重量属性，并基于运输物品的总重量实现运费。使用ChatGPT帮助您实现基于产品重量的运费，确保Stripe收取正确的金额，包括计算出的运费。您可以使用提供的提示[https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter11/prompts/task.md](https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter11/prompts/task.md)。
- en: Use ChatGPT as a debugging companion. If you find yourself stuck on a particularly
    stubborn bug, describe the problem and the context. It can provide a fresh perspective,
    often prompting you to consider angles you might have overlooked, leading to quicker
    problem resolution.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 将 ChatGPT 作为调试伴侣使用。如果你发现自己卡在一个特别顽固的bug上，描述问题及其上下文。它可以从一个全新的角度提供帮助，通常能促使你考虑可能忽略的角度，从而更快地解决问题解决。
- en: Summary
  id: totrans-453
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned the basics of the internationalization and localization
    of Django projects. You marked code and template strings for translation, and
    you discovered how to generate and compile translation files. You also installed
    Rosetta in your project to manage translations through a web interface. You translated
    URL patterns, and you created a language selector to allow users to switch the
    language of the site. Then, you used `django-parler` to translate models, and
    you used `django-localflavor` to validate localized form fields.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了 Django 项目的国际化本地化的基础知识。你为代码和模板字符串标记了翻译，并发现了如何生成和编译翻译文件。你还将在项目中安装 Rosetta
    以通过 Web 界面管理翻译。你翻译了 URL 模式，并创建了一个语言选择器，允许用户切换站点的语言。然后，你使用 `django-parler` 翻译模型，并使用
    `django-localflavor` 验证本地化表单字段。
- en: In the next chapter, you will start a new Django project that will consist of
    an e-learning platform. You will learn how to use model inheritance to implement
    polymorphism, and you will lay the foundations for a flexible content management
    system. You will create the application models, and you will learn how to create
    and apply fixtures to provide initial data for the models. You will build a custom
    model field and use it in your models. You will also build authentication views
    for your new application.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将开始一个新的 Django 项目，该项目将包括一个在线学习平台。你将学习如何使用模型继承来实现多态性，并为一个灵活的内容管理系统打下基础。你将创建应用程序模型，并学习如何创建和应用
    fixtures 为模型提供初始数据。你将构建自定义模型字段并在模型中使用它。你还将为你的新应用程序构建身份验证视图。
- en: Additional resources
  id: totrans-456
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他资源
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源提供了与本章所涵盖主题相关的额外信息：
- en: 'The source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter11](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter11)'
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的源代码：[https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter11](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter11)
- en: 'A list of valid language IDs: [http://www.i18nguy.com/unicode/language-identifiers.html](http://www.i18nguy.com/unicode/language-identifiers.html)'
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效语言 ID 的列表：[http://www.i18nguy.com/unicode/language-identifiers.html](http://www.i18nguy.com/unicode/language-identifiers.html)
- en: 'A list of internationalization and localization settings: [https://docs.djangoproject.com/en/5.0/ref/settings/#globalization-i18n-l10n](https://docs.djangoproject.com/en/5.0/ref/settings/#globalization-i18n-l10n)'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际化和本地化设置的列表：[https://docs.djangoproject.com/en/5.0/ref/settings/#globalization-i18n-l10n](https://docs.djangoproject.com/en/5.0/ref/settings/#globalization-i18n-l10n)
- en: 'Homebrew package manager: [https://brew.sh/](https://brew.sh/)'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Homebrew 软件包管理器：[https://brew.sh/](https://brew.sh/)
- en: 'Installing `gettext` on Windows: [https://docs.djangoproject.com/en/5.0/topics/i18n/translation/#gettext-on-windows](https://docs.djangoproject.com/en/5.0/topics/i18n/translation/#gettext-on-windows)'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 `gettext`：[https://docs.djangoproject.com/en/5.0/topics/i18n/translation/#gettext-on-windows](https://docs.djangoproject.com/en/5.0/topics/i18n/translation/#gettext-on-windows)
- en: 'Precompiled `gettext` binary installer for Windows: [https://mlocati.github.io/articles/gettext-iconv-windows.html](https://mlocati.github.io/articles/gettext-iconv-windows.html)'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 的预编译 `gettext` 二进制安装程序：[https://mlocati.github.io/articles/gettext-iconv-windows.html](https://mlocati.github.io/articles/gettext-iconv-windows.html)
- en: 'Documentation about translations: [https://docs.djangoproject.com/en/5.0/topics/i18n/translation/](https://docs.djangoproject.com/en/5.0/topics/i18n/translation/)'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于翻译的文档：[https://docs.djangoproject.com/en/5.0/topics/i18n/translation/](https://docs.djangoproject.com/en/5.0/topics/i18n/translation/)
- en: 'Poedit translation file editor: [https://poedit.net/](https://poedit.net/)'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Poedit 翻译文件编辑器：[https://poedit.net/](https://poedit.net/)
- en: 'Documentation for Django Rosetta: [https://django-rosetta.readthedocs.io/](https://django-rosetta.readthedocs.io/)'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django Rosetta 文档：[https://django-rosetta.readthedocs.io/](https://django-rosetta.readthedocs.io/)
- en: 'The `django-parler` module’s compatibility with Django: [https://django-parler.readthedocs.io/en/latest/compatibility.html](https://django-parler.readthedocs.io/en/latest/compatibility.html)'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django-parler` 模块与 Django 的兼容性：[https://django-parler.readthedocs.io/en/latest/compatibility.html](https://django-parler.readthedocs.io/en/latest/compatibility.html)'
- en: 'Documentation for `django-parler`: [https://django-parler.readthedocs.io/en/latest/](https://django-parler.readthedocs.io/en/latest/)'
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django-parler` 的文档：[https://django-parler.readthedocs.io/en/latest/](https://django-parler.readthedocs.io/en/latest/)'
- en: 'Django formatting configuration for the English locale: [https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/en/formats.py](https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/en/formats.py)'
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英语地区的 Django 格式化配置：[https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/en/formats.py](https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/en/formats.py)
- en: 'Django formatting configuration for the Spanish locale: [https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/es/formats.py](https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/es/formats.py)'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 西班牙语地区的 Django 格式化配置：[https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/es/formats.py](https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/es/formats.py)
- en: 'Django format localization: [https://docs.djangoproject.com/en/5.0/topics/i18n/formatting/](https://docs.djangoproject.com/en/5.0/topics/i18n/formatting/)'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 格式本地化：[https://docs.djangoproject.com/en/5.0/topics/i18n/formatting/](https://docs.djangoproject.com/en/5.0/topics/i18n/formatting/)
- en: 'Documentation for `django-localflavor`: [https://django-localflavor.readthedocs.io/en/latest/](https://django-localflavor.readthedocs.io/en/latest/)'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django-localflavor` 的文档：[https://django-localflavor.readthedocs.io/en/latest/](https://django-localflavor.readthedocs.io/en/latest/)'
