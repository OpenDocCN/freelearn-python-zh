- en: Deploying on the AWS Platform
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS平台上部署
- en: In the previous chapter, we saw one of the platforms for our application, which
    is called Docker. It can isolate your application, and can be used to respond
    to your application request from the customer. During the course of this chapter,
    we will introduce you to the cloud platform, especially AWS (Amazon Cloud Services),
    which mainly deals with the IaaS (Infrastructure) and **PaaS** (**Platform as
    a Service**) Services. We will also look at how we can build up infrastructure,
    and deploy our application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了我们应用程序的一个平台，名为Docker。它可以隔离您的应用程序，并可用于响应来自客户的应用程序请求。在本章中，我们将向您介绍云平台，特别是AWS（亚马逊云服务），主要涉及IaaS（基础设施）和PaaS（平台即服务）服务。我们还将看看如何构建基础设施并部署我们的应用程序。
- en: 'This chapter includes the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括以下主题：
- en: Introducing AWS and its services
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍AWS及其服务
- en: Building application infrastructure using Terraform/CloudFormation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Terraform/CloudFormation构建应用程序基础设施
- en: '**Continuous Deployment** using Jenkins'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jenkins进行持续部署
- en: Getting started with Amazon Web Services (AWS)
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用亚马逊云服务（AWS）
- en: '**Amazon Web Services** (**AWS**) is a secure cloud platform. It has various
    offerings in IaaS as well as PaaS, including computing power, database storage,
    and content delivery, which help in scaling applications, and also grows our business
    across the globe. AWS is a public cloud, and as per the cloud computing concepts,
    it provides all its resources in an on-demand delivery with a pay-as-you-go plan.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊云服务（AWS）是一个安全的云平台。它在IaaS和PaaS方面提供各种服务，包括计算能力、数据库存储和内容传递，有助于扩展应用程序，并在全球范围内发展我们的业务。AWS是一个公共云，根据云计算概念，它以按需交付和按使用量付费的方式提供所有资源。
- en: You can read more about AWS and its services at [https://aws.amazon.com/](https://aws.amazon.com/).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://aws.amazon.com/](https://aws.amazon.com/)了解更多关于AWS及其服务的信息。
- en: 'As specified previously in [Chapter 1](part0023.html#LTSU0-4022ecb0f8ea4b719ffb742bf2a6a072),
    *Introducing Cloud Native Architecture and Microservices*, you need to create
    an AWS account to start using the services. You can use the following link to
    create an account:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[第1章](part0023.html#LTSU0-4022ecb0f8ea4b719ffb742bf2a6a072)中指定的，*介绍云原生架构和微服务*，您需要创建一个AWS账户才能开始使用这些服务。您可以使用以下链接创建一个账户：
- en: '[https://medium.com/appliedcode/setup-aws-account-1727ce89353e](https://medium.com/appliedcode/setup-aws-account-1727ce89353e)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://medium.com/appliedcode/setup-aws-account-1727ce89353e](https://medium.com/appliedcode/setup-aws-account-1727ce89353e)'
- en: 'Once you are logged in, you will see the following screen, which showcases
    the AWS and its categories. A few of the services are in the beta stage. We will
    be using some of the services related to **compute** and **networking** to build
    an infrastructure for our application:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，您将看到以下屏幕，其中展示了AWS及其类别。一些服务处于测试阶段。我们将使用与计算和网络相关的一些服务来构建我们应用程序的基础设施：
- en: '![](img/00159.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00159.jpeg)'
- en: 'Some of the commonly used AWS services for applications are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常用的AWS应用服务如下：
- en: '**EC2 (Elastic compute cloud)**: This is a compute offering from AWS, which,
    in simply put, offers a server.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2（弹性计算云）：这是AWS提供的计算服务，简单来说，它提供了一个服务器。
- en: '**ECS (Elastic Container Services)**: This is similar to the Docker services
    on top of a public cloud, that is, Amazon. It manages Docker on top of an EC2
    machine only. Instead of creating a Docker cluster on-premises, you can easily
    set it up in the Amazon cloud within a few minutes, and with less overhead.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS（弹性容器服务）：这类似于位于公共云（即亚马逊）上的Docker服务。它仅在EC2机器上管理Docker。您可以在亚马逊云中轻松设置Docker集群，而不是在本地创建Docker集群，而且开销更小。
- en: '**EBS (Elasticbeanstalk)**: This is a PaaS offering where you just need to
    upload your code, and specify how much infrastructure (basically, app server (EC2))
    is required. EBS will take care of creating the machines, and deploy the code
    on it as well.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EBS（弹性Beanstalk）：这是一个PaaS服务，您只需上传代码，并指定需要多少基础设施（基本上是应用服务器（EC2））。EBS将负责创建机器，并在其上部署代码。
- en: '**S3 (Simple storage service)**: This is a storage service offered by AWS where
    we usually keep our application data or static content, which could be used for
    static website hosting. We will be using it for Continuous Deployment.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S3（简单存储服务）：这是AWS提供的存储服务，我们通常将应用程序数据或静态内容存储在其中，可用于静态网站托管。我们将用它进行持续部署。
- en: '**Glacier**: This is another storage service, which is mainly used for backup,
    as it is less costly, and hence, has a slow data storing and retrieving capability
    as compared to S3.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Glacier：这是另一个存储服务，主要用于备份，因为成本较低，因此数据存储和检索能力较慢，与S3相比。
- en: '**VPC (Virtual Private Network)**: This is a networking service which gives
    you control over your resources'' accessibility. We will be using this service
    to keep our infrastructure. This service is very useful for securing our application
    service and database services, and exposes only selective resources, which are
    required, to the outside world.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VPC（虚拟专用网络）：这是一个网络服务，可以让您控制资源的可访问性。我们将使用此服务来保护我们的基础设施。此服务非常有用，可用于保护我们的应用程序服务和数据库服务，并仅向外部世界公开所需的选择性资源。
- en: '**CloudFront**: This is a content delivery service which distributes your content
    in S3 across the globe, and makes sure it is quickly retrievable irrespective
    of the location of the request source.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFront：这是一个内容传递服务，可以在全球范围内分发您在S3中的内容，并确保无论请求源的位置如何，都可以快速检索到。
- en: '**CloudFormation**: This gives developers and system administrators an easy
    way to create and manage a collection of related AWS resources, such as provisioning,
    and updating them in the form of code. We will be using this service to build
    our infrastructure.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation：这为开发人员和系统管理员提供了一种简单的方式来创建和管理一组相关的AWS资源，例如以代码形式进行配置和更新。我们将使用此服务来构建我们的基础设施。
- en: '**CloudWatch**: This service keeps track of the activity of your resources.
    It also keeps track of any activity on your AWS account in the form of logs, which
    is useful for identifying any suspicious activity or account compromise.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CloudWatch**：此服务跟踪您的资源活动。它还以日志的形式跟踪AWS账户上的任何活动，这对于识别任何可疑活动或账户被盗非常有用。'
- en: '**IAM (Identity and Access Management)**: This service, as the name suggests,
    is very useful for managing users on the AWS account, and to provide them roles/privileges
    as per their usage and requirement.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IAM（身份和访问管理）**：这项服务正如其名，非常有用于管理AWS账户上的用户，并根据他们的使用和需求提供角色/权限。'
- en: '**Route 53**: This is a highly available and scalable cloud DNS Cloud service.
    We can either migrate our Domain from any other Registrar such as GoDaddy, and
    others to Route 53, or purchase the Domain AWS.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Route 53**：这是一个高可用和可扩展的云DNS云服务。我们可以将我们的域名从其他注册商（如GoDaddy等）迁移到Route 53，或者购买AWS的域名。'
- en: There are many more services offered by AWS that can't be covered in this chapter.
    If you are interested and would like to explore other services, you can go through
    the AWS product list ([https://aws.amazon.com/products/](https://aws.amazon.com/products/)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: AWS提供了许多其他服务，本章无法涵盖。如果您有兴趣并希望探索其他服务，可以查看AWS产品列表（[https://aws.amazon.com/products/](https://aws.amazon.com/products/)）。
- en: We will be using most of the aforementioned AWS services. Let's begin by building
    our infrastructure on AWS as per our application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用大部分前述的AWS服务。让我们开始按照我们的应用程序在AWS上构建基础设施。
- en: Building application infrastructure on AWS
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS上构建应用程序基础设施
- en: At this stage of our application, the system architect or a DevOps guy comes
    into the picture, and suggests different infrastructure plans which are secure
    and efficient enough to handle application requests, and are cost effective as
    well.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序的这个阶段，系统架构师或DevOps人员进入画面，并提出不同的基础设施计划，这些计划既安全又高效，足以处理应用程序请求，并且成本效益高。
- en: 'As far as our application is concerned, we will build its infrastructure the
    same as shown in the following image:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 就我们的应用程序而言，我们将按照以下图像构建其基础设施：
- en: '![](img/00160.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00160.jpeg)'
- en: We will follow the preceding architecture diagram for our application, which
    includes a few of AWS services such as EC2, VPC, Route 53, and so on.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照前述的应用程序架构图为我们的应用程序构建基础设施，其中包括一些AWS服务，如EC2、VPC、Route 53等。
- en: 'There are three different ways by which you can provision your resources on
    the AWS cloud, which are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种不同的方式可以在AWS云上配置您的资源，分别是：
- en: '**Management console**: This is the user interface which we have already logged
    into, and can be used to launch resources on the cloud. (Check this link for your
    reference: [https://console.aws.amazon.com/console/](https://console.aws.amazon.com/console/home?region=us-east-1))'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理控制台**：这是我们已经登录的用户界面，可以用于在云上启动资源。（查看此链接以供参考：[https://console.aws.amazon.com/console/](https://console.aws.amazon.com/console/home?region=us-east-1)）'
- en: '**Programmatically**: We may use a couple of programming languages such as
    Python, Ruby, and the like to create resources, for which different development
    tools have been created by AWS, like Codecom. Also, you can use SDK to create
    your resources based on your preferred choice of language. You can check [https://aws.amazon.com/tools/](https://aws.amazon.com/tools/)
    for more information.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编程方式**：我们可以使用一些编程语言，如Python、Ruby等来创建资源，为此AWS创建了不同的开发工具，如Codecom。此外，您可以使用SDK根据您喜欢的语言创建资源。您可以查看[https://aws.amazon.com/tools/](https://aws.amazon.com/tools/)
    了解更多信息。'
- en: '**AWS CLI (Command-line interface)**: It is an open source tool built on top
    of SDK for Python which offers commands to interact with the AWS resources. You
    can check the link at: [http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html)
    to understand its working, and the steps to set this up on your system.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI（命令行界面）：它是建立在Python SDK之上的开源工具，提供与AWS资源交互的命令。您可以查看链接：[http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html)
    了解其工作原理，并了解在您的系统上设置此工具的步骤。
- en: Creating resources is pretty easy and straightforward, so we won't be covering
    that, but you can check the AWS documentation ([https://aws.amazon.com/documentation/](https://aws.amazon.com/documentation/))
    to do so.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建资源非常简单直接，所以我们不会涵盖这一点，但您可以查看AWS文档（[https://aws.amazon.com/documentation/](https://aws.amazon.com/documentation/)）来了解如何操作。
- en: I will show you how to build your infrastructure using Terraform and an AWS-based
    service called CloudFormation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我将向您展示如何使用Terraform和名为CloudFormation的基于AWS的服务构建基础设施。
- en: Generating authentication keys
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成身份验证密钥
- en: Authentication is an important feature for any product or platform to check
    the authenticity of a user who is trying to access and perform operations on the
    product, and also to keep the system secure. Since here we are going to access
    the AWS account using APIs, we need authorization keys to validate our request.
    Now, an important AWS service enters the picture called **IAM** (**Identity and
    Access Management**).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证是任何产品或平台的重要功能，用于检查试图访问产品并执行操作的用户的真实性，同时保持系统安全。由于我们将使用API访问AWS账户，我们需要授权密钥来验证我们的请求。现在，一个重要的AWS服务进入了叫做**IAM**（身份和访问管理）的画面。
- en: In IAM, we define the  users and generate access/secret keys, and also assign
    roles based on the resources which we want to access using it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在IAM中，我们定义用户并生成访问/密钥，并根据我们想要使用它访问的资源分配角色。
- en: It is highly recommended NEVER to generate access/secrets keys as the root user,
    because it will have, by default, full access over your account.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议永远不要以根用户身份生成访问/密钥，因为默认情况下它将对您的账户拥有完全访问权限。
- en: 'The following are the steps to create a user, and to generate access/secret
    keys:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建用户和生成访问/密钥的步骤：
- en: 'Go to [https://console.aws.amazon.com/iam/home?region=us-east-1#/home](https://console.aws.amazon.com/iam/home?region=us-east-1#/home);
    you should see the following screen:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://console.aws.amazon.com/iam/home?region=us-east-1#/home](https://console.aws.amazon.com/iam/home?region=us-east-1#/home)；您应该看到以下屏幕：
- en: '![](img/00161.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00161.jpeg)'
- en: 'Now, click on the third option, named Users, in the left pane. If your account
    is new, you will see no users. Now, let''s create a new user--for that, click
    on the Add user button in the right pane:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击左窗格中的第三个选项，名为用户。如果您的帐户是新的，您将看不到用户。现在，让我们创建一个新用户--为此，请点击右窗格中的“添加用户”按钮：
- en: '![](img/00162.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00162.jpeg)'
- en: 'Once you click on the Add user button, a new page will load and ask for the
    username and the way you want your user to access the account. If you are going
    to use this user, for example, `manish`, only for programmatic purposes, in that
    case, I recommend that you uncheck the AWS Management Console access box so that
    the user doesn''t need to log in using the AWS management console. Check the following
    screenshot for reference:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您点击“添加用户”按钮，将加载一个新页面，并要求输入用户名以及您希望用户访问帐户的方式。例如，如果您打算仅将此用户“manish”用于编程目的，那么建议您取消选中AWS管理控制台访问框，以便用户无需使用AWS管理控制台登录。参考以下截图：
- en: '![](img/00163.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00163.jpeg)'
- en: 'Once you are done, click on the Next: Permissions button on the bottom-right
    side of the screen. Next, you need to select the permission you want to give to
    this user, which we call the IAM Policies. That means now, the user should be
    able to access the resources as per the policy defined, and also the kind of operations
    allowed for the user on the resources. For now, we add the Power User Access policy
    to this user.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，点击屏幕右下方的“下一步：权限”按钮。接下来，您需要选择要授予此用户的权限，我们称之为IAM策略。这意味着现在用户应该能够根据定义的策略访问资源，以及用户在资源上允许的操作类型。现在，我们向此用户添加“Power
    User Access”策略。
- en: 'Internally, Power User Access will have a policy in the JSON format, something
    like this:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内部，Power User Access将具有JSON格式的策略，类似于这样：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For more information about the IAM policy, read the documentation at the following
    link: [http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html](http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有关IAM策略的更多信息，请阅读以下链接中的文档：[http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html](http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html)
- en: 'Readers who have been using Microsoft Active Directory can integrate AD with
    IAM easily using the AD connector. For more info, read the article given at this
    link: [https://aws.amazon.com/blogs/security/how-to-connect-your-on-premises-active-directory-to-aws-using-ad-connector/](https://aws.amazon.com/blogs/security/how-to-connect-your-on-premises-active-directory-to-aws-using-ad-connector/)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Microsoft Active Directory的读者可以使用AD连接器轻松地将AD与IAM集成。有关更多信息，请阅读以下链接中提供的文章：[https://aws.amazon.com/blogs/security/how-to-connect-your-on-premises-active-directory-to-aws-using-ad-connector/](https://aws.amazon.com/blogs/security/how-to-connect-your-on-premises-active-directory-to-aws-using-ad-connector/)
- en: 'Consider the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下截图：
- en: '![](img/00164.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00164.jpeg)'
- en: 'Once you have added the policies to the user, click on the Next: Review button
    on the bottom-right side of the screen to move forward.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您为用户添加了策略，请点击屏幕右下方的“下一步：审查”按钮以继续。
- en: 'The next screen will ask you to review it, and once you are sure, you can click
    on the Create user button to create the user:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个屏幕将要求您进行审查，一旦确定，您可以点击“创建用户”按钮来创建用户：
- en: '![](img/00165.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00165.jpeg)'
- en: 'Once you click on the Create user button, the user will be created, and the
    policy will be attached to it. You will now see the following screen which has
    auto-generated the access key as well as the secret key, which you need to keep
    safe and NEVER ever share with anyone:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您点击“创建用户”按钮，用户将被创建，并且策略将附加到用户上。您现在将看到以下屏幕，其中自动生成了访问密钥和秘密密钥，您需要保密，并且绝对不与任何人分享：
- en: '![](img/00166.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00166.jpeg)'
- en: 'Now that our access/secret key has been generated, it''s time to build our
    application infrastructure on AWS. We will use the following tools to do so:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的访问/秘密密钥已生成，是时候在AWS上构建我们的应用程序基础架构了。我们将使用以下工具来实现：
- en: '**Terraform**: This is an open-source tool for building infrastructure on different
    cloud platforms'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terraform：这是一个用于在不同云平台上构建基础架构的开源工具
- en: '**CloudFormation**: These are AWS services to build application infrastructure
    using the AWS resources'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CloudFormation**：这些是使用AWS资源构建应用程序基础架构的AWS服务'
- en: Terraform - a tool to build infrastructure as code
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Terraform - 一个构建基础架构的工具
- en: Terraform is a tool for building, managing, and versioning infrastructure over
    different cloud platforms such as AWS, Azure, and so on. It can manage the low-level
    components of the infrastructure such as compute, storage, networking, and others.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform是一个用于在不同云平台（如AWS、Azure等）上构建、管理和版本化基础架构的工具。它可以管理基础架构的低级组件，如计算、存储、网络等。
- en: In Terraform, we specify the configuration files which describe the resources
    specification for the infrastructure of the application. Terraform describes the
    execution plan, and the desired state to be achieved. Then it starts building
    the resources as per specification, and keeps track of the current state of infrastructure
    after build up, always performing incremental execution if the configuration changes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在Terraform中，我们指定描述应用程序基础架构的资源规范的配置文件。Terraform描述执行计划和要实现的期望状态。然后，它根据规范开始构建资源，并在构建后跟踪基础架构的当前状态，始终执行增量执行，如果配置发生更改。
- en: 'The following are a few features of Terraform:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Terraform的一些特点：
- en: Terraform describes your data center onto a blueprint, which can be versioned
    and can be managed into code.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terraform将您的数据中心描述为蓝图，可以进行版本控制，并可以管理为代码。
- en: Terraform provides you the execution plan before actual implementation, which
    helps you to match the execution plan with the desired result.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terraform在实际实施之前为您提供执行计划，这有助于您将执行计划与期望结果进行匹配。
- en: Terraform helps you architect all your resources and parallelize your resources
    creation. It gives you an insight into the dependencies on the resources, and
    also makes sure that the dependencies are fulfilled before resources creation.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terraform可以帮助您设计所有资源并并行创建资源。它可以让您了解资源之间的依赖关系，并确保在创建资源之前满足这些依赖关系。
- en: With its insight capability, it gives more control to the developer over the
    revisions to be performed over the infrastructure with less human errors.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 凭借其洞察力，它可以让开发人员更好地控制基础架构的修改，减少人为错误。
- en: 'In Terraform, we consider every service in AWS in terms of the resources which
    need to be created, so we need to provide its mandatory attributes for its creation.
    Now, let''s begin by creating the resources:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在Terraform中，我们将AWS中的每项服务都视为需要创建的资源，因此我们需要为其创建提供其创建所需的强制属性。现在，让我们开始创建资源：
- en: Firstly, we need to create **VPC** (**Virtual Private Cloud**) in which we will
    launch all the other resources.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建**VPC**（虚拟私有云），在其中启动所有其他资源。
- en: 'Note: We will need to create all the files with the `.tf` file extension as
    per convention.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：根据约定，我们需要按照`.tf`文件扩展名创建所有文件。
- en: 'So, let''s create an empty `main.tf` file. Add the following code, which will
    set the access and secret key of the service provider for authentication:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所以，让我们创建一个空的`main.tf`文件。添加以下代码，用于设置服务提供商的访问和秘钥以进行身份验证：
- en: '[PRE1]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see in the preceding code, there is a value like `${var.aws_region}`.
    Actually, it is a convention to keep all your values in a separate file called
    `variables.tf`, so we do this here. Let''s change the `variables.tf` file with
    the following content:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如您在前面的代码中所看到的，有一个值`${var.aws_region}`。实际上，这是一个约定，将所有值保存在一个名为`variables.tf`的单独文件中，所以我们在这里这样做。让我们用以下内容更改`variables.tf`文件：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we need to create the VPC resource, so let''s add this code to `main.tf`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建VPC资源，所以让我们将以下代码添加到`main.tf`中：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We have used one variable, which needs to be defined in `variables.tf` as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用了一个变量，需要在`variables.tf`中定义如下：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once the VPC resource is defined, we need to create a subnet which will be
    associated with the EC2 machine, Elastic Load Balancer, or other resources. So,
    add the following code to `main.tf`:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦定义了VPC资源，我们需要创建一个子网，该子网将与EC2机器、弹性负载均衡器或其他资源关联。因此，将以下代码添加到`main.tf`中：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Since we want our resources to be accessible from the internet, we need to create
    an internet gateway, and associate it with our subnet so that the resources created
    inside it are accessible over the internet.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们希望我们的资源可以从互联网访问，因此我们需要创建一个互联网网关，并将其与我们的子网关联，以便其中创建的资源可以通过互联网访问。
- en: 'Note: We can create multiple subnets to secure the network of our resources.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：我们可以创建多个子网来保护我们资源的网络。
- en: 'Add this code to `main.tf`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`main.tf`中：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we need to make sure that the subnet where you will be launching your
    EC2 machine provides a public address to the machines. This can be achieved by
    adding the code given next to your `main.tf`:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要确保您将启动EC2机器的子网为机器提供公共地址。这可以通过将下面给出的代码添加到您的`main.tf`中来实现：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once this is configured, it's time to begin with the creation of the app server
    and the MongoDB server.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦配置完成，就该开始创建应用服务器和MongoDB服务器了。
- en: Initially, we need to create the dependent resources, such as the security group,
    without which, EC2 cannot be launched.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最初，我们需要创建依赖资源，例如安全组，否则无法启动EC2。
- en: 'Add the following code to `main.tf` to create the security group resource:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`main.tf`中以创建安全组资源：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this security group, we open ports `22` and `5000` only in order to ssh and
    access our application.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个安全组中，我们只打开`22`和`5000`端口，以便进行ssh和访问我们的应用程序。
- en: 'Next, we need to add/create ssh key-pairs, which you can generate on your local
    machine and upload to AWS, or can get it generated from the AWS console as well.
    In our case, I have generated an ssh key on my local machine using the `ssh-keygen`
    command. Now to create an ssh-key pairs resource in AWS, add this code to `main.tf`:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加/创建ssh密钥对，您可以在本地机器上生成并上传到AWS，也可以从AWS控制台生成。在我们的情况下，我使用`ssh-keygen`命令在本地机器上生成了一个ssh密钥。现在，为了在AWS中创建ssh密钥对资源，将以下代码添加到`main.tf`中：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following code snippet to `variables.tf` to provide parameters to the
    variables:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码片段到`variables.tf`文件中以为变量提供参数：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now that we have created dependent resources, it''s time to create the app
    server (that is, EC2 machine). So, add the following code snippet to `main.tf`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了依赖资源，是时候创建应用服务器（即EC2机器）了。因此，将以下代码片段添加到`main.tf`中：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We have used a couple of variables in the EC2 configuration as well, so we
    need to add the variable values in the `variables.tf` file:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在EC2配置中使用了一些变量，因此需要在`variables.tf`文件中添加变量值：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Great! Now our app server resource configuration is ready. Now, we have added
    the app server configuration, and next, we need to add a similar setting for the
    MongoDB server, which is needed for keeping our data. Once both are ready, we
    will create ELB (which will be the user's point of application access), and then
    attach the app servers to ELB.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在我们的应用服务器资源配置已经准备好了。现在，我们已经添加了应用服务器配置，接下来，我们需要为MongoDB服务器添加类似的设置，这对于保存我们的数据是必要的。一旦两者都准备好了，我们将创建ELB（这将是用户应用访问的入口点），然后将应用服务器附加到ELB。
- en: Let's move on to add the configuration for the MongoDB server.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加MongoDB服务器的配置。
- en: Configuring the MongoDB server
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置MongoDB服务器
- en: 'Add following code to `main.tf` for the creation of a security group for the
    MongoDB server:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为MongoDB服务器的创建添加以下代码到`main.tf`：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we need to add the configuration for the MongoDB server. Also notice
    that in the following configuration, we provision the server with the MongoDB
    installation at the time of creation of the EC2 machine:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为MongoDB服务器添加配置。还要注意，在以下配置中，我们在创建EC2机器时提供了MongoDB安装的服务器：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: One last resource which still needs to be configured is the Elastic Load Balancer,
    which will balance the customer requests to provide high availability.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然需要配置的最后一个资源是弹性负载均衡器，它将平衡客户请求以提供高可用性。
- en: Configuring the Elastic Load balancer
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置弹性负载均衡器
- en: 'Firstly, we need to create a security group resource for our ELB by adding
    this code to `main.tf`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要通过将以下代码添加到`main.tf`来为我们的ELB创建安全组资源：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we need to add the following configuration for creating the ELB resources,
    and to add the app server into it as well:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要添加以下配置来创建ELB资源，并将应用服务器添加到其中：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, we are all set for our first run of the Terraform configuration.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好运行Terraform配置了。
- en: 'Our infrastructure configuration is ready to be deployed. It is a good practice
    to use the following command to understand the execution plan:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的基础设施配置已准备就绪，可以部署了。使用以下命令来了解执行计划是一个很好的做法：
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output of the last command should be similar to the following screenshot:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个命令的输出应该类似于以下截图：
- en: '![](img/00167.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00167.jpeg)'
- en: 'If you don''t see any errors, you can execute the following command for actual
    creation of the resource:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有看到任何错误，您可以执行以下命令来实际创建资源：
- en: '[PRE18]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output should look something like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该看起来像这样：
- en: '![](img/00168.jpeg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00168.jpeg)'
- en: 'Currently, we don''t have the domain registered with us, but if we have the
    domain name registered and configured in Route 53, we need to create an additional
    resource in `main.tf` to add an entry for our application. We can do so by using
    the following code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们还没有与我们注册的域，但如果我们已经在Route 53中注册并配置了域名，我们需要在`main.tf`中创建一个额外的资源，为我们的应用添加一个条目。我们可以使用以下代码来实现：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: That's all we need to do. Also, another quick, and the most crucial, way of
    making your infrastructure high available is to create an auto scaling service,
    based on server metric usage (CPU or memory). We provide conditions which decides
    whether we need to scale our infrastructure up or down  so that our application
    performance should see less latency.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要做的一切。另外，使您的基础设施高度可用的另一种快速且最关键的方法是创建一个基于服务器指标使用（CPU或内存）的自动扩展服务。我们提供条件来决定是否需要扩展我们的基础设施，以便我们的应用性能应该看到更少的延迟。
- en: In order to do so , you can check the Terraform documentation at [https://www.terraform.io/docs/providers/aws/r/autoscaling_group.html](https://www.terraform.io/docs/providers/aws/r/autoscaling_group.html).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，您可以在[https://www.terraform.io/docs/providers/aws/r/autoscaling_group.html](https://www.terraform.io/docs/providers/aws/r/autoscaling_group.html)查看Terraform文档。
- en: Currently, our application is not deployed, we will be using the Code Deploy
    service to deploy our application using continuous delivery which we will discuss
    in a later part of this chapter.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的应用尚未部署，我们将使用Code Deploy服务使用持续交付来部署我们的应用，我们将在本章的后面部分讨论。
- en: Before that, let's see how we can create the same setup using a Cloud Platform
    Service called **CloudFormation**, provided by AWS.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前，让我们看看如何使用AWS提供的名为**CloudFormation**的云平台服务创建相同的设置。
- en: CloudFormation - an AWS tool for building infrastructure using code
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloudFormation - 使用代码构建基础设施的AWS工具
- en: CloudFormation is an AWS service, which works in a similar fashion to Terraform.
    However, in CloudFormation, we don't need the access/secret keys. Instead, we
    need to create an IAM role, which will have the required access to launch all
    the resources  needed to architect our application.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation是AWS的一个服务，它的工作方式类似于Terraform。但是，在CloudFormation中，我们不需要访问/秘钥。相反，我们需要创建一个IAM角色，该角色将具有启动所需的所有资源的访问权限，以构建我们的应用。
- en: You can write your CloudFormation configuration using the YAML or JSON format.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用YAML或JSON格式编写您的CloudFormation配置。
- en: Let's begin our infrastructure setup using CloudFormation by building the VPC,
    where we will create a VPC with, a public and a private subnet.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用CloudFormation开始我们的基础设施设置，构建VPC，在那里我们将创建一个VPC，一个公共子网和一个私有子网。
- en: 'Let''s create a new file, `vpc.template`, with the VPC and subnet''s (public
    and private) configurations as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新文件`vpc.template`，其中VPC和子网（公共和私有）的配置如下：
- en: '[PRE20]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The preceding configuration is written in the JSON format to give you an understanding
    of the JSON configuration. Also, we need to specify the configuration for routing
    the table and internet gateway as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置是以JSON格式编写的，以便让您了解JSON配置。此外，我们还需要指定路由表和互联网网关的配置如下：
- en: '[PRE21]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now that we have the configuration available, it's time to create a stack for
    the VPC from the AWS console.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了可用的配置，是时候从AWS控制台为VPC创建一个堆栈了。
- en: The VPC stack on AWS
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS上的VPC堆栈
- en: 'Perform the following steps to create a stack for the VPC from the AWS console:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤，从AWS控制台为VPC创建一个堆栈：
- en: 'Go to [https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new](https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new) to
    create a new stack using CloudFormation. You should see a screen as shown in this
    screenshot:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new](https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new)使用CloudFormation创建一个新的堆栈。您应该看到一个如此截图所示的屏幕：
- en: '![](img/00169.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00169.jpeg)'
- en: Provide the path for your template file, and click on the Next button.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 提供模板文件的路径，然后点击“下一步”按钮。
- en: 'In the next window, we need to specify Stack name, which is the unique identifier
    for our stack, as follows:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个窗口中，我们需要指定堆栈名称，这是我们堆栈的唯一标识符，如下所示：
- en: '![](img/00170.jpeg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00170.jpeg)'
- en: Provide the stack name, and click on Next.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 提供堆栈名称，然后点击“下一步”。
- en: 'The next screen is optional; in case we want to set up **SNS** (**Notification
    service**), or add IAM roles for it, we need to add it here:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个屏幕是可选的；如果我们想设置**SNS**（**通知服务**）或为其添加IAM角色，我们需要在这里添加它：
- en: '![](img/00171.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00171.jpeg)'
- en: If you want to enable Notifications and the IAM role, add the details, and click
    on Next.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要启用通知和IAM角色，请添加详细信息，然后点击“下一步”。
- en: 'The next screen is for reviewing the details, and to make sure they are correct
    for creating the stack:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个屏幕是用于审查细节，并确保它们正确以创建堆栈：
- en: '![](img/00172.jpeg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00172.jpeg)'
- en: Once ready, click on Create to initiate the stack creation. At the time of creation,
    you can check the events to know the status of your resource's creation.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好后，点击“创建”来启动堆栈创建。在创建时，您可以检查事件以了解资源创建的状态。
- en: 'You should see a screen similar to this one:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到一个类似于这样的屏幕：
- en: '![](img/00173.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00173.jpeg)'
- en: In the preceding screen, you will be able to see the progress of the stack,
    and in case some errors occur, you can identify them using these events.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕上，您将能够看到堆栈的进度，如果出现错误，您可以使用这些事件来识别它们。
- en: Once our VPC stack is ready, we need to create the EC2, ELB, and autoscaling
    resources in our VPC. We will use the YAML format to give you an overview of how
    to write the configuration in the YAML format.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的VPC堆栈准备好，我们需要在我们的VPC中创建EC2、ELB和自动缩放资源。我们将使用YAML格式来为您提供如何以YAML格式编写配置的概述。
- en: You can find the complete code at `<path of repository>`. We will use the `main.yml`
    file, which has the details about the VPC and the subnet where you need to launch
    the instance.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`<repository路径>`找到完整的代码。我们将使用`main.yml`文件，其中包含有关您需要启动实例的VPC和子网的详细信息。
- en: 'In order to launch the stack, go to the following link:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了启动堆栈，请转到以下链接：
- en: '[https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new](https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new](https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new)'
- en: 'There will be one change in the launch configuration--instead of specifying
    values in the file, we will specify it in the AWS console at the time of providing
    the details as shown:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动配置中将会有一个变化--不再在文件中指定值，而是在提供细节的时候在AWS控制台中指定，如下所示：
- en: '![](img/00174.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00174.jpeg)'
- en: 'Refer to the following screenshot to provide the instance details in which
    you want to deploy your application:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考以下截图，提供您想要部署应用程序的实例细节：
- en: '![](img/00175.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00175.jpeg)'
- en: 'Once you have provided all the details in the preceding screen, scroll down
    to the next section, where it will ask for the ELB details, as shown in the next
    screenshot:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您在上一个屏幕中提供了所有的细节，向下滚动到下一部分，在那里它将要求ELB的细节，如下一张截图所示：
- en: '![](img/00176.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00176.jpeg)'
- en: The remaining steps remain the same for creating the AWS CloudFormation stack.
    In order to add the MongoDB server, we need to add the configuration for the EC2
    machine in `main.yml`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的步骤对于创建AWS CloudFormation堆栈来说是一样的。为了添加MongoDB服务器，我们需要在`main.yml`中添加EC2机器的配置。
- en: 'Creating the configuration in AWS CloudFormation is straightforward, as AWS
    provides a couple of templates which we use as a reference to create our template.
    The following is the link for the templates:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS CloudFormation中创建配置是很简单的，因为AWS提供了一些模板，我们可以用作创建我们的模板的参考。以下是模板的链接：
- en: "[https://aws.amazon.com/cloudformation/aws-cloudformation-templates/\uFEFF\
    ](https://aws.amazon.com/cloudformation/aws-cloudformation-templates/)"
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: "[https://aws.amazon.com/cloudformation/aws-cloudformation-templates/\uFEFF\
    ](https://aws.amazon.com/cloudformation/aws-cloudformation-templates/)"
- en: That's all we have for building the infrastructure; it's time for our application
    to be deployed on the app servers.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们为构建基础设施所做的一切；现在是我们的应用程序在应用服务器上部署的时候了。
- en: Continuous Deployment for a cloud native application
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生应用程序的持续部署
- en: 'In the previous section, we successfully set up the infrastructure, but we
    are yet to deploy the application. Also, we need to make sure that further deployment
    should be taken care of using Continuous Deployment. Since we have our development
    environment in our local machine, we don''t need to set up the continuous integration
    cycle. However, for large-scale companies where many developers work collaboratively,
    we need to set up a separate pipeline for Continuous Integration using Jenkins.
    In our case, we only need Continuous Deployment. Our Continuous Deployment pipeline
    would be something like this:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分，我们成功地设置了基础设施，但我们还没有部署应用程序。此外，我们需要确保进一步的部署应该使用持续部署来处理。由于我们的开发环境在本地机器上，我们不需要设置持续集成周期。然而，对于许多开发人员协作工作的大型公司，我们需要使用Jenkins设置一个单独的持续集成管道。在我们的情况下，我们只需要持续部署。我们的持续部署管道将是这样的：
- en: '![](img/00177.jpeg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00177.jpeg)'
- en: How it works
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: It starts with the developer pushing new code to the main branch of its version
    control system (in our case, it's GitHub). As soon as the new code is pushed,
    the Jenkins **GitHub plugin** detects the change as per its defined job, and triggers
    the **Jenkins job** to deploy the new code to its infrastructure. Jenkins then
    communicates with **Code Deploy** to trigger the code to the Amazon EC2 machine.
    Since we need to make sure that our deployment is successful, we can set up a
    notification section, which will notify us of the status of deployment so that
    it can reverted back if needed.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 它从开发人员将新代码推送到其版本控制系统的主分支开始（在我们的情况下，它是GitHub）。一旦新代码被推送，Jenkins的GitHub插件根据其定义的工作检测到更改，并触发Jenkins作业将新代码部署到其基础设施。然后Jenkins与Code
    Deploy通信，触发代码到Amazon EC2机器。由于我们需要确保我们的部署是成功的，我们可以设置一个通知部分，它将通知我们部署的状态，以便在需要时可以回滚。
- en: Implementation of the Continuous Deployment pipeline
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续部署管道的实施
- en: Let's first configure our AWS service beginning with Code Deploy, which will
    help us to deploy the application on the available app servers.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先从配置AWS服务开始，从Code Deploy开始，这将帮助我们在可用的应用服务器上部署应用程序。
- en: 'Initially, when you switch to the code deploy service ([https://us-west-1.console.aws.amazon.com/codedeploy/](https://us-west-1.console.aws.amazon.com/codedeploy/)),
    you should see the following screen:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最初，当您切换到代码部署服务时（[https://us-west-1.console.aws.amazon.com/codedeploy/](https://us-west-1.console.aws.amazon.com/codedeploy/)），您应该会看到以下屏幕：
- en: '![](img/00178.jpeg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00178.jpeg)'
- en: The preceding screenshot is the introduction page for Code Deploy, which showcases
    its capabilities.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图是Code Deploy的介绍页面，展示了其功能。
- en: Click on the Get Started Now button in the middle of the page to move forward.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面中间的“立即开始”按钮以继续前进。
- en: Next, you should see the following screen, which will recommend you to deploy
    a sample application, which is fine for the initial stage. But since we have already
    built up our infrastructure, in that case, we need to select Custom Deployment--
    this will skip the walkthrough. So, select the option, and click on Next.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您应该看到以下屏幕，该屏幕将建议您部署一个示例应用程序，这对于初始阶段来说是可以的。但是由于我们已经建立了基础设施，在这种情况下，我们需要选择自定义部署--这将跳过演练。因此，选择该选项，然后单击“下一步”。
- en: '![](img/00179.jpeg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00179.jpeg)'
- en: Click on Skip Walkthrough to move forward.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“跳过演练”以继续前进。
- en: In the next wizard screen, there are a couple of sections which need to be reviewed.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个向导屏幕中，有几个需要审查的部分。
- en: 'The first section will ask you to Create application--you need to provide a
    user-defined Application name and Deployment group name, which is mandatory, as
    it becomes the identifier for your application:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分将要求您创建应用程序--您需要提供用户定义的应用程序名称和部署组名称，这是强制性的，因为它成为您的应用程序的标识符：
- en: '![](img/00180.jpeg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00180.jpeg)'
- en: 'Scroll down to the next section, which talks about the type of deployment you
    want for your application. There are two methods, which are defined as follows:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到下一部分，该部分讨论您希望为应用程序选择的部署类型。有两种方法，定义如下：
- en: '**Blue/green deployment**: In this type, during deployment, new instances are
    launched and new code is deployed to it, and if its health check is fine, it is
    replaced with the old one, and old instances are then terminated. This is recommended
    for the production environment, where customers can''t afford downtime.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蓝/绿部署**：在这种类型中，在部署过程中，会启动新实例并向其部署新代码，如果其健康检查正常，则会替换为旧实例，然后旧实例将被终止。这适用于生产环境，客户无法承受停机时间。'
- en: '**In-place deployment**: In this deployment type, new code is deployed directly
    into the existing instances. In this deployment, each instance is taken offline
    for updates.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原地部署**：在这种部署类型中，新代码直接部署到现有实例中。在此部署中，每个实例都会脱机进行更新。'
- en: We will go with **In-place deployment**, but the choice changes with the use
    case and product owner's decision. Say, for example, applications like Uber or
    Facebook, which can't afford a downtime at the time of deployment, will go for
    the Blue/green deployment, which will give them high availability.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将选择**原地部署**，但选择会随着用例和产品所有者的决定而改变。例如，像Uber或Facebook这样的应用程序，在部署时无法承受停机时间，将选择蓝/绿部署，这将为它们提供高可用性。
- en: '![](img/00181.jpeg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00181.jpeg)'
- en: 'Let''s move on to the next section, which talks about the infrastructure where
    the application is going to be deployed. We will specify the instances and ELB
    details as shown in this screenshot:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们继续下一节，讨论应用程序将要部署的基础设施。我们将指定实例和ELB的详细信息，如此屏幕截图所示：
- en: '![](img/00182.jpeg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00182.jpeg)'
- en: 'In the next segment, we will define the way to deploy the application. For
    example, suppose you have 10 instances. You may want to deploy the application
    on all these instances at one time, or one at a time, or half at a time. We will
    go with the default option, that is, `CodeDeployDefault.OneAtATime`:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一部分中，我们将定义部署应用程序的方式。例如，假设您有10个实例。您可能希望一次在所有这些实例上部署应用程序，或者一次一个，或者一次一半。我们将使用默认选项，即`CodeDeployDefault.OneAtATime`：
- en: '![](img/00183.jpeg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00183.jpeg)'
- en: In this section, we also need to specify a Service role, which is needed by
    Code Deploy to perform operations on your AWS resources, more specifically, on
    EC2 and ELB.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们还需要指定一个服务角色，Code Deploy需要该角色来在您的AWS资源上执行操作，更具体地说是在EC2和ELB上。
- en: 'In order to understand more about service role creation, go to the AWS documentation
    at this link: [http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create.html](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create.html)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多有关服务角色创建的信息，请转到此链接的AWS文档：[http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create.html](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create.html)
- en: Once you have provided the required information, click on Create Application.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供所需信息后，点击“创建应用程序”。
- en: 'You will see the following screen once your application is ready:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的应用程序准备就绪，您将看到以下屏幕：
- en: '![](img/00184.jpeg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00184.jpeg)'
- en: Now we are all set for deployment. All we need to create is a job in Jenkins,
    and add a post-built section with the CodeDeploy details.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好部署。我们只需要在Jenkins中创建一个作业，并添加一个带有CodeDeploy详细信息的后置构建部分。
- en: 'The creation of a job is similar to what we explained in the previous chapter.
    The following few changes are needed though:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 作业的创建类似于我们在上一章中解释的内容。但是需要进行以下几个更改：
- en: Firstly, we need to make sure we have installed a few Jenkins plugins, namely,
    AWS CodeDeploy Plugin for Jenkins, Git plugin, GitHub plugin, and so on.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要确保已安装了一些Jenkins插件，即AWS CodeDeploy Plugin for Jenkins，Git插件，GitHub插件等。
- en: 'Once you have installed the plugins, you should see new actions in the post-build
    actions list, as shown in the following screenshot:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装了插件后，您应该在后置构建操作列表中看到新的操作，如下面的屏幕截图所示：
- en: '![](img/00185.jpeg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00185.jpeg)'
- en: 'Next, you need to select the Deploy an application to AWS CodeDeploy action.
    A new section will be added, and we need to provide the details of the CodeDeploy
    application we created in the AWS console, as shown in this screenshot:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要选择“部署应用程序到AWS CodeDeploy”操作。将添加一个新部分，我们需要提供在AWS控制台中创建的CodeDeploy应用程序的详细信息，如此屏幕截图所示：
- en: '![](img/00186.jpeg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00186.jpeg)'
- en: We also need to provide access/secret keys which we created at the beginning
    of this chapter in the section, *Generating authentication keys*. This is needed,
    as Jenkins, after packaging the application, needs to upload it to S3 and instruct
    CodeDeploy to deploy the latest build from the specified bucket.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要提供在本章开头部分创建的访问/秘钥，即*生成认证密钥*。这是必要的，因为Jenkins在打包应用程序后需要将其上传到S3，并指示CodeDeploy从指定的存储桶部署最新构建。
- en: That's all we need to do. Now our Jenkins job is ready to deploy the application.
    Try it out, and it should work as smooth as butter.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的就是这些。现在我们的Jenkins作业已经准备好部署应用程序了。试一下，应该会像黄油一样顺利。
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter is very interesting in various ways. Firstly, you got the basic
    understanding about AWS services, and how to make the most out of them. Next,
    we explored the architecture of our application on the AWS cloud, which will shape
    your views on architecture designing for different application/products that you
    might plan to create in the future. We also made use of Terraform, which is a
    third-party tool used to build infrastructure on AWS as code. Finally, we deployed
    our application, and created a continuous pipeline for deployment using Jenkins.
    In the next chapter, we will explore another cloud platform owned by Microsoft--Microsoft
    Azure. Stay alive, and get ready to explore Azure in the coming chapter. See you
    there!
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章在各个方面都非常有趣。首先，你对AWS服务有了基本的了解，以及如何充分利用它们。接下来，我们探讨了我们在AWS云上应用程序的架构，这将塑造你对未来可能计划创建的不同应用程序/产品的架构设计的看法。我们还使用了Terraform，这是一个第三方工具，用于将基础架构构建为AWS代码。最后，我们部署了我们的应用程序，并使用Jenkins创建了一个持续的部署流水线。在下一章中，我们将探索微软拥有的另一个云平台--Microsoft
    Azure。保持活力，准备好在接下来的章节中探索Azure。到时见！
