- en: '*Chapter 6*: Designing Solutions and Solution Processes'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：设计解决方案和解决方案过程'
- en: In this chapter, we will design **solutions** to multiple problems, using previously
    learned content, such as **analysis** of the problem and the **computational thinking
    process**. We will incorporate **logical processing** to create visual representations
    of the decision process that will guide our algorithm design. Visual representations
    discussed include **diagrams**, **flow charts**, and other helpful processes.
    In this chapter, we will learn about the key elements of solution design; how
    to create, use, and apply diagrams in our solution processing and design; and
    we will look at applying the solution design process to various problems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用先前学到的内容，如问题的分析和计算思维过程，来设计**解决方案**。我们将结合**逻辑处理**来创建决策过程的视觉表示，以指导我们的算法设计。讨论的视觉表示包括**图表**、**流程图**和其他有用的过程。在本章中，我们将学习解决方案设计的关键要素；如何创建、使用和应用图表来处理和设计解决方案；我们将看看如何将解决方案设计过程应用于各种问题。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Designing solutions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计解决方案
- en: Diagramming solutions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制解决方案
- en: Creating solutions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建解决方案
- en: In order to further our knowledge of algorithms and solution design, we need
    to look more closely at the frontend of problems. We will begin by discussing
    the process of designing solutions in depth.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步了解算法和解决方案设计，我们需要更仔细地研究问题的前端。我们将从深入讨论设计解决方案的过程开始。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need the latest version of Python to run the codes in this chapter.
    You will find the full source code used in this chapter here: [https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter06](https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter06)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要最新版本的Python来运行本章中的代码。您可以在此处找到本章中使用的完整源代码：[https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter06](https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter06)
- en: Designing solutions
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计解决方案
- en: When we are designing solutions, we often use a **design thinking model**, even
    if we don't always realize it. Design thinking is described by different models,
    but we'll be looking at the five-step model that is most commonly seen when using
    design thinking.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们设计解决方案时，我们经常使用**设计思维模型**，即使我们并不总是意识到。设计思维由不同的模型描述，但我们将看到最常见的五步模型。
- en: 'In conjunction with computational thinking, the design thinking process can
    help us evolve our ideas before we start diagramming solutions. It should be noted
    that we don''t go through the design thinking process linearly, much like in computational
    thinking. Think about the steps in computational thinking:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与计算思维结合，设计思维过程可以帮助我们在开始绘制解决方案之前发展我们的想法。需要注意的是，我们不像在计算思维中那样线性地进行设计思维过程。想想计算思维的步骤：
- en: Problem decomposition
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题分解
- en: Pattern recognition
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式识别
- en: Abstraction
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象
- en: Algorithm design
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算法设计
- en: We have defined all these steps in previous chapters, most recently in the introduction
    to [*Chapter 5*](B15413_05_Final_SK_ePub.xhtml#_idTextAnchor082), *Exploring Problem
    Analysis*. Looking at them again, we know that we can go back to the decomposition
    as we're writing and designing the algorithm. That's what we mean by non-linear
    processes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的章节中定义了所有这些步骤，最近是在[*第5章*](B15413_05_Final_SK_ePub.xhtml#_idTextAnchor082)的介绍中，*探索问题分析*。再次看到它们，我们知道在编写和设计算法时可以返回到分解。这就是我们所说的非线性过程。
- en: 'The design thinking model works the same way. It was designed by the Hasso-Plattner
    Institute of Design at Stanford University. The main steps of the model include
    the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 设计思维模型也是如此。它是由斯坦福大学哈索-普拉特纳设计学院设计的。该模型的主要步骤包括以下内容：
- en: '**Empathize**: Understand the problem from the audience or stakeholder perspective.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共情**：从受众或利益相关者的角度理解问题。'
- en: '**Define**: Identify the objectives, the decisions that need to be made, any
    biases introduced, and any details pertaining to the problem.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义**：确定目标、需要做出的决策、引入的任何偏见以及与问题相关的任何细节。'
- en: '**Ideate**: Brainstorm ideas, which go with the diagramming we''ll be doing
    in the next section of this chapter.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构思**：进行头脑风暴，与我们将在本章的下一节中进行的图表化工作相呼应。'
- en: '**Prototype**: Design the algorithm solution and check it often.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原型**：设计算法解决方案并经常检查它。'
- en: '**Test**: Check your algorithm often throughout the process and go back to
    previous steps as needed.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：在整个过程中经常检查您的算法，并根据需要返回到以前的步骤。'
- en: 'As you can see, I''ve adapted the design thinking model to align more with
    a computational thinking process. The main goal when we''re using these models
    and combining them is to break down the harder problems into simpler chunks so
    we can solve and design the best algorithms. This does not take the place of computational
    thinking. It simply provides a better idea of how we can address the process.
    The following diagram can help demonstrate how the process may work:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我已经调整了设计思维模型，使其更符合计算思维过程。当我们使用这些模型并将它们结合在一起时，主要目标是将更难的问题分解为更简单的部分，以便我们可以设计和解决最佳算法。这并不取代计算思维。它只是提供了更好的想法，让我们了解如何处理这个过程。以下图表可以帮助演示这个过程可能如何工作：
- en: '![Figure 6.1 – Design thinking model'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1 - 设计思维模型'
- en: '](image/Figure_6.1_B15413.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.1_B15413.jpg)'
- en: Figure 6.1 – Design thinking model
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 - 设计思维模型
- en: As you can see, rather than using the linear model most frequently shown, the
    preceding model shows the process as *cyclical*. That said, going back to *empathize*
    can happen from any point, so going back and forth between these steps is the
    best way to use the design thinking model.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，与最常见的线性模型不同，前面的模型将过程显示为*循环*。也就是说，回到*共情*可以发生在任何时候，因此在这些步骤之间来回移动是使用设计思维模型的最佳方式。
- en: Let's take a look at a scenario where we are using design thinking in conjunction
    with computational thinking.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个场景，在这个场景中，我们将设计思维与计算思维结合使用。
- en: Problem 1 - A marketing survey
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1-营销调查
- en: 'Let''s say you''re working with a marketing firm and they ask you to put together
    a survey to gather feedback about a website. Here are some of the steps you may
    go through:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在与一家营销公司合作，他们要求您设计一份调查，以收集有关网站的反馈。以下是您可能要经历的一些步骤：
- en: '**Identifying stakeholders**: This includes the people you''ll survey as well
    as the people who will use the information after the survey, for example.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**确定利益相关者**：这包括您将调查的人员以及调查后将使用信息的人员，例如。'
- en: '**Identifying questions**: This is where you define what information you hope
    to find from the survey.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**确定问题**：这是您定义希望从调查中获得的信息的地方。'
- en: '**Designing the survey**: This includes not only the questions you identified
    but the aesthetics of what the survey will look like.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设计调查**：这不仅包括您确定的问题，还包括调查的美学外观。'
- en: '**Information gathering**: This is where you decide how you will communicate
    with the people who will fill out the survey, such as email, a link on a website,
    or similar.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**信息收集**：这是您决定如何与将填写调查的人沟通的地方，例如电子邮件、网站上的链接或类似方式。'
- en: '**Data analysis**: You can write a Python algorithm to help you with data analysis,
    including creating tables and graphs based on the data collected.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据分析**：您可以编写Python算法来帮助您进行数据分析，包括根据收集的数据创建表格和图表。'
- en: '**Data sharing**: This is where you will plan the visuals, reports, and data
    presentation to the original stakeholders.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据共享**：这是您将计划向最初的利益相关者展示的可视化、报告和数据呈现的地方。'
- en: 'Let''s be clear: this is an oversimplification of the process. But let''s say
    you realize you need to include another group for the survey. Say you were only
    initially getting feedback from students at a school but realized you wanted to
    add teachers and parents. Well, then you would go back to *step 1* and identify
    in which ways the rest of your information would be affected. You may want to
    change the look of the survey or add a different one for adults versus children.
    You may need to add questions that are for only one group, which affects your
    decision-making in the algorithm for the survey.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们明确一点：这是对过程的过度简化。但是假设您意识到需要为调查增加另一组。比如，最初只从学校的学生那里获得反馈，但后来意识到您想要增加教师和家长。那么，您将回到*步骤1*，确定您的其他信息将受到哪些影响。您可能想要改变调查的外观，或者为成年人和儿童添加不同的调查。您可能需要添加只针对某一组的问题，这会影响您在调查算法中的决策。
- en: Now let's take a look at these steps within the *design thinking* process.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看*设计思维*过程中的这些步骤。
- en: 'For our problem, identifying the stakeholders and questions are part of *steps
    1*, *2*, and *3* of the design thinking model: *empathize*, *define*, and *ideate*.
    Building the algorithm is both part of *prototype* and *test*, which are *steps
    4* and *5*. Adding people to the survey takes us back to *steps 1–3*. And the
    cycle repeats until we have a working algorithm for our scenarios. Throughout
    the computational thinking model and using its elements, you''ll use the design
    thinking process embedded within. It''s a natural part of the decision-making
    process.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的问题，确定利益相关者和问题是*设计思维*模型的*步骤1*、*2*和*3*的一部分：*共情*、*定义*和*构思*。构建算法既是*原型*和*测试*的一部分，也是*步骤4*和*5*。将人员添加到调查中会让我们回到*步骤1-3*。循环重复，直到我们为我们的情景拥有一个可行的算法。在整个计算思维模型中，并使用其中的元素，您将使用嵌入其中的设计思维过程。这是决策过程的自然部分。
- en: Now that we've looked at the design thinking model, let's take a look at how
    to visually represent the decision-making using diagramming solutions.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过设计思维模型，让我们来看看如何使用图解解决方案来直观地表示决策过程。
- en: Diagramming solutions
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图解解决方案
- en: When we are designing algorithms, we often use diagrams and flowcharts to help
    us analyze the process and visually see where our decisions are made. These diagrams
    allow us to create better algorithms. You'll remember that we created a flowchart
    in [*Chapter 5*](B15413_05_Final_SK_ePub.xhtml#_idTextAnchor082), *Exploring Problem
    Analysis*, when we were building a store (*Figure 5.1* and *Figure 5.2*).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们设计算法时，我们经常使用图表和流程图来帮助我们分析过程，并直观地看到我们的决策是在哪里做出的。这些图表使我们能够创建更好的算法。您会记得，在[*第5章*](B15413_05_Final_SK_ePub.xhtml#_idTextAnchor082)中，当我们正在建立一个商店时，我们创建了一个流程图(*图5.1*和*图5.2*)。
- en: The process of creating these diagrams varies by developer or coder. For example,
    I usually create a brainstorm for the problem, then a flowchart from that information.
    To look at that process, let's go back to our survey problem from earlier in this
    chapter. Look at the following brainstorm. It is not complete, as you can add
    a lot of sub-topics. This brainstorm assumes we are surveying stakeholders to
    evaluate and share feedback on a school website.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这些图表的过程因开发人员或编码人员而异。例如，我通常会为问题创建头脑风暴，然后从中制作流程图。为了了解这个过程，让我们回到本章前面的调查问题。看看以下头脑风暴。它并不完整，因为您可以添加许多子主题。这个头脑风暴假设我们正在调查利益相关者，以评估和分享对学校网站的反馈。
- en: '![Figure 6.2 – Brainstorm diagram'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.2 -头脑风暴图'
- en: '](image/Figure_6.02_B15413.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.02_B15413.jpg)'
- en: Figure 6.2 – Brainstorm diagram
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 -头脑风暴图
- en: As you can see from the diagram, there are many considerations to be made. The
    actual survey design may be provided to us as programmers or we may take part
    in designing the survey. If we have the survey, our brainstorm may look different,
    as we navigate through the questions and decide how to best place them within
    the algorithm. This is part of the empathizing process. We are looking at our
    information from multiple angles, from multiple stakeholders' perspectives, and
    deciding how we'll write an algorithm to help us get to where we need. The purpose
    of an informal diagram such as the brainstorm is that it allows us to begin organizing
    ideas before trying to create a more detailed and organized flowchart. When we
    work on the diagram, we are defining and ideating our algorithm. That's why it's
    important to sketch out our plans before beginning to code directly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从图表中可以看出，有许多考虑要做。实际的调查设计可能由我们作为程序员提供，或者我们可能参与设计调查。如果我们有了调查，我们的头脑风暴可能会有所不同，因为我们在问题中导航，并决定如何最好地将它们放置在算法中。这是共情过程的一部分。我们从多个角度、多个利益相关者的角度来看待我们的信息，并决定如何编写算法来帮助我们达到我们的目标。头脑风暴这样的非正式图表的目的是让我们在尝试创建更详细和有组织的流程图之前开始组织想法。当我们工作在图表上时，我们正在定义和构思我们的算法。这就是为什么在开始直接编码之前勾画出我们的计划是很重要的。
- en: With regard to flowcharts, we saw a few in the last chapter when discussing
    the creation of a store in Python. Now let's take a look at a flowchart for decision-making
    based on some decisions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 关于流程图，当我们讨论在Python中创建商店时，上一章中我们看到了一些流程图。现在让我们看一下基于一些决策的决策流程图。
- en: 'It is important to note that surveys can be difficult to create from scratch.
    Part of the reason is that there may be questions that depend on each other. For
    example, let''s say you ask the user to state whether they approve of the color
    choices or not. If they do, you can move on. But if they don''t, you may want
    to provide other color schemes for review. That question would only appear for
    those who choose the **No** option. Our flowchart could be rather complicated
    if we were to tackle all the information for our brainstorm, so we''ll focus on
    a few questions within the *Look* category of the brainstorm. Take a look at the
    following flowchart:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，从零开始创建调查可能是困难的。部分原因是可能有依赖于彼此的问题。例如，假设你要求用户说明他们是否赞成颜色选择。如果他们赞成，你可以继续。但如果他们不赞成，你可能想提供其他颜色方案供审查。这个问题只会出现在选择**否**选项的人身上。如果我们要处理头脑风暴的所有信息，我们的流程图可能会相当复杂，所以我们将专注于头脑风暴的*外观*类别中的一些问题。看一下下面的流程图：
- en: '![Figure 6.3 – Flowchart for one element of the survey'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3 - 调查的一个元素的流程图'
- en: '](image/Figure_6.3_B15413.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.3_B15413.jpg)'
- en: Figure 6.3 – Flowchart for one element of the survey
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 - 调查的一个元素的流程图
- en: 'As you can see from the flowchart, some things are not clearly visible, such
    as what happens when you complete one question, where you go after each decision,
    and so on. When I create flowcharts, I sometimes add arrows to help me see what
    happens after each step. The following flowchart shows some of the arrows added:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从流程图中可以看出，有些事情并不清晰，比如完成一个问题后会发生什么，每个决定后你会去哪里等等。当我创建流程图时，有时会添加箭头来帮助我看到每个步骤之后会发生什么。下面的流程图显示了添加的一些箭头：
- en: '![Figure 6.4 – Flowchart with arrows'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 - 带箭头的流程图'
- en: '](image/Figure_6.4_B15413.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.4_B15413.jpg)'
- en: Figure 6.4 – Flowchart with arrows
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 - 带箭头的流程图
- en: As can be seen from the preceding flowchart, not all arrows are added, but look
    closely at **Color Scheme**. If a user approves of the color scheme, then they
    go directly to the **Fonts** section. If they don't, they are shown options. Assuming
    one option is shown at a time, then the user would go to **Fonts** after they
    choose one they like. It is also possible to add a prompt that asks the user if
    they'd like to see the options again, which would bring them back to the **Alt
    option 1**. Arrows can be added to show those details.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的流程图可以看出，并非所有箭头都被添加，但要仔细看**颜色方案**。如果用户同意颜色方案，那么他们直接进入**字体**部分。如果他们不同意，他们会被显示选项。假设一次只显示一个选项，那么用户在选择喜欢的选项后会进入**字体**部分。还可以添加提示，询问用户是否想再次查看选项，这会将他们带回**备选方案1**。箭头可以被添加以显示这些细节。
- en: It all depends on what is easiest for you as a developer and programmer to understand
    yourself. Think of these as your journal notes if you were a writer. The way you
    organize your ideas can be personal, just make sure your end result and algorithm
    can be easily used by the people it is intended for.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这完全取决于作为开发人员和程序员的你自己最容易理解的方式。如果你是作家，把这些当作你的日记笔记。你组织想法的方式可能是个人的，只要确保你的最终结果和算法可以被意图使用的人轻松使用。
- en: Now let's take a look at how to put everything together and create solutions
    to some problems.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何将所有内容整合在一起，并为一些问题设计解决方案。
- en: Creating solutions
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建解决方案
- en: When we are presented with problems, we want to create solutions that address
    the information we have been provided, with an algorithm that provides everything
    needed and that is easily understood by the user. In this section, we'll take
    the content we've been learning in this chapter in order to design solutions to
    problems.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们面对问题时，我们希望创建解决方案，解决我们所提供的信息，并提供一切所需并且易于用户理解的算法。在本节中，我们将利用本章学到的内容来设计解决问题的解决方案。
- en: 'As we create these solutions using our brainstorms and flowcharts, we should
    be considering the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用我们的头脑风暴和流程图创建这些解决方案时，我们应该考虑以下内容：
- en: '*Does the solution we have planned address the problem?*'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我们计划的解决方案是否解决了问题？*'
- en: '*Does the solution design show a clear path for the algorithm to be successful?*'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*解决方案设计是否显示了算法成功的清晰路径？*'
- en: 'And if the answers to those questions are yes, then we can start coding the
    solution. Remember, we need to test the algorithm as often as we can. Here are
    some things to keep in mind when writing the algorithm:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对这些问题的答案是“是”，那么我们可以开始编写解决方案。请记住，我们需要尽可能经常地测试算法。在编写算法时，请记住以下几点：
- en: Add comments to identify sections you may need to go back to and that clearly
    help to identify and define your variables, dictionaries, functions, and any key
    components.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加注释以标识您可能需要返回的部分，并清楚地帮助识别和定义您的变量、字典、函数和任何关键组件。
- en: Check that you don't have any errors, such as those discussed in [*Chapter 5*](B15413_05_Final_SK_ePub.xhtml#_idTextAnchor082)*,
    Exploring Problem Analysis*.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查一下您是否有任何错误，比如[*第5章*](B15413_05_Final_SK_ePub.xhtml#_idTextAnchor082)*中讨论的那些错误*，探索问题分析。
- en: Run your program as often as possible to test for errors.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能经常运行您的程序以测试错误。
- en: For the solution process, we're going to use a slightly different problem than
    the survey we were working on earlier in the chapter. We will tackle components
    you can use for that problem as we go through this book, such as adding images,
    showing graphics, and more. But for now, let's stick with some more basic Python
    in order to practice the process of creating a solution.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于解决方案过程，我们将使用一个与本章早期工作的调查略有不同的问题。随着我们在本书中的学习，我们将解决您可以用于该问题的组件，比如添加图像、显示图形等。但是现在，让我们继续使用一些更基本的Python来练习创建解决方案的过程。
- en: Problem 2 - Pizza order
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题2 - 比萨订单
- en: 'I know – food. But it''s one of the best ways to demonstrate logic and algorithm
    creation, so bear with me. Let''s say we have a pizzeria. We sell only one type
    of crust because we''re a specialty kind of place. We sell two different sizes
    of pizza: personal and family. There are two sauce options: marinara and garlic
    cream. There are three cheese options: no cheese, regular cheese, and extra cheese.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道 - 食物。但这是演示逻辑和算法创建的最佳方式之一，所以请耐心等待。假设我们有一家比萨店。我们只卖一种类型的面团，因为我们是一种特色的地方。我们有两种不同尺寸的比萨：个人和家庭。有两种酱料选项：番茄酱和大蒜奶油。有三种奶酪选项：无奶酪、普通奶酪和额外奶酪。
- en: 'There are five toppings to choose from (I''m limiting those because we''re
    just learning the process): mushrooms, pepperoni, Italian sausage, onions, and
    peppers. And no, we''re not putting olives anywhere near my pizzeria.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 选择的五种配料有：蘑菇、意大利辣香肠、洋葱和辣椒。不，我们的比萨店不会放橄榄。
- en: Let's break down that problem. We want an algorithm to capture the options chosen
    by the user to order their pizza. Things we're not going to take into consideration
    right now are cost and additional items in the order, such as an additional pizza,
    beverages, desserts, and so on.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解决这个问题。我们希望有一个算法来捕捉用户选择的比萨订单选项。我们现在不考虑成本和订单中的其他项目，比如额外的比萨、饮料、甜点等。
- en: 'Here''s what we know:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们知道的：
- en: '**Size**: personal or family'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尺寸**：个人或家庭'
- en: '**Sauce**: marinara or garlic cream'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**酱料**：番茄酱或大蒜奶油'
- en: '**Cheese**: no cheese, regular cheese, extra cheese'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**奶酪**：无奶酪、普通奶酪、额外奶酪'
- en: '**Toppings**: mushrooms, pepperoni, Italian sausage, onions, peppers'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配料**：蘑菇、意大利辣香肠、洋葱、辣椒'
- en: 'Now that we have that, let''s look at a flowchart with the information:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了这些，让我们看一下带有信息的流程图：
- en: '![Figure 6.5 – Flowchart for pizzeria decision-making'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.5 - 比萨店决策流程图'
- en: '](image/Figure_6.5_B15413.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.5_B15413.jpg)'
- en: Figure 6.5 – Flowchart for pizzeria decision-making
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 - 比萨店决策流程图
- en: As you can see, the figure shows a fairly *linear decision-making process* for
    this particular problem. One thing we haven't considered is asking the user if
    they wish to make any changes. That may need to happen at each step. Say you changed
    your mind while choosing cheese to go for a marinara instead of a garlic cream
    sauce. You'll need to have a way to go back, so we'll need to keep that in mind
    as we create the algorithm.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，该图显示了这个特定问题的一个相当*线性决策过程*。我们还没有考虑的一件事是询问用户是否希望进行任何更改。这可能需要在每个步骤中发生。比如在选择奶酪时改变主意，改为选择番茄酱而不是大蒜奶油酱。您需要有一种方法可以返回，因此我们需要在创建算法时牢记这一点。
- en: Keep in mind that we're sticking to text codes currently, so we'll use input
    from the user in numbers and letters for now. However, there are ways to incorporate
    Python into more robust algorithms that incorporate images, buttons, and more.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们目前仅使用文本代码，因此我们现在将使用用户的数字和字母输入。但是，有办法将Python整合到更强大的算法中，这些算法包括图像、按钮等。
- en: 'Take a look at the following snippet from the algorithm:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下算法中的以下代码片段：
- en: ch6_pizzeria.py
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ch6_pizzeria.py
- en: '[PRE0]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice in the snippet that we defined the size and the sauce first. I will reiterate
    here that there are other ways to tackle this particular logic process. For example,
    we can save some of the variables to dictionaries and work with arrays. For now,
    we're using what we've learned so far to create our algorithms, but we'll get
    a chance to learn about other approaches later in this book.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在代码片段中，我们首先定义了尺寸和酱料。我在这里重申，有其他处理这个特定逻辑过程的方法。例如，我们可以将一些变量保存到字典中，并使用数组。目前，我们正在使用到目前为止学到的知识来创建我们的算法，但是在本书的后面，我们将有机会了解其他方法。
- en: The preceding snippet has a final choice of cheese. Regardless of the option
    here, we need to make decisions on toppings. That will need to happen twice since
    we'll need it for both yes and no.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段有最终的奶酪选择。无论选择哪个选项，我们都需要对配料做出决定。这将需要发生两次，因为我们需要为“是”和“否”都需要。
- en: 'Take a look at the following snippet with those options, which is a continuation
    of the preceding code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码片段，这是前面代码的延续：
- en: ch6_Pizzeria.py
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ch6_Pizzeria.py
- en: '[PRE1]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see from the snippet, we only worked with mushrooms. The output
    for this particular code after choosing family size, garlic sauce, regular cheese,
    and mushrooms looks as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从代码片段中看到的，我们只使用了蘑菇。在选择家庭尺寸、大蒜酱、普通奶酪和蘑菇后，这个特定代码的输出如下：
- en: '[PRE2]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using the code provided and taking a look at the output, try to put together
    the rest of the code for the remaining four ingredients. And I guess that if you
    are creating your own pizza, you're welcome to change the options provided here.
    Just keep the olives to yourself.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用提供的代码并查看输出，尝试组合其余四种配料的代码。我猜，如果您正在制作自己的比萨饼，欢迎您更改这里提供的选项。只需将橄榄留给自己。
- en: 'Now, as mentioned before, we may need to go back and make changes. Let''s take
    a look at a snippet that does that for you:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如前所述，我们可能需要返回并进行更改。让我们看一段为您做到这一点的代码片段：
- en: ch6_Pizzeria2.py
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ch6_Pizzeria2.py
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see from the snippet of code, there is a decision that needs to
    be made about the changes needed. If yes, then we present the questions again.
    If no, then we print the choices for the user. Take a look at the following output
    with the fully run program:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 从代码片段中可以看出，需要对所需的更改进行决策。如果是，则再次提出问题。如果不是，则为用户打印选项。查看完整运行程序的以下输出：
- en: '[PRE4]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As shown in the code, the questions were asked twice because we made a change
    in our options. Depending on how often you want to ask that question, you'll need
    to continue to repeat some of this code. There are ways to simplify that, so we'll
    go over those options in more depth in our Python language program chapter ([*Chapter
    8*](B15413_08_Final_SK_ePub.xhtml#_idTextAnchor114), *Introduction to Python*)
    and later chapters.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如代码所示，问题被问了两次，因为我们在选项中做了更改。根据您想要问这个问题的频率，您需要继续重复部分代码。有简化的方法，我们将在Python语言程序章节（第8章，Python简介）和后续章节中更深入地讨论这些选项。
- en: Before we move on, let's take a look at one more problem to go through the design
    process again.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们再看一个问题，重新经历一遍设计过程。
- en: Problem 3 - Delays and Python
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题3 - 延迟和Python
- en: 'One of my first problems in Python was to create an algorithm that would react
    differently depending on the color chosen. This is similar to what you''d have
    if you were creating a traffic light. Each light has a different delay. So let''s
    create an algorithm that addresses that. We''ll make it a user-chosen color between
    green, yellow, and red, just to keep the traffic light theme. So let''s put some
    assumptions together:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我在Python中遇到的第一个问题之一是创建一个根据所选颜色而有不同反应的算法。这类似于如果您正在创建交通灯时会遇到的情况。每个灯的延迟都不同。所以让我们创建一个解决这个问题的算法。我们将使其成为用户选择的颜色，介于绿色、黄色和红色之间，只是为了保持交通灯的主题。因此，让我们做一些假设：
- en: Green will mean a 5-second delay
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绿色将意味着5秒的延迟
- en: Yellow will mean a 2-second delay
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黄色将意味着2秒的延迟
- en: Red will mean a 4-second delay
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 红色将意味着4秒的延迟
- en: 'There''s no reason for these specific delays; I just wanted to keep them all
    under 5 seconds. Now, let''s say that we''re playing a game and the user has to
    choose a color. If they choose yellow or red, they''ll get a delay and then will
    be asked again. The goal is to get a *You win! You can go now* message from the
    program. So let''s create a flowchart for this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特定延迟没有特定的原因；我只是想让它们都在5秒以内。现在，假设我们正在玩一个游戏，用户必须选择一种颜色。如果他们选择黄色或红色，他们将会有延迟，然后会再次被问及。目标是从程序中获得“您赢了！您现在可以走了”的消息。因此，让我们为此创建一个流程图：
- en: '![Figure 6.6 – Flowchart for traffic light game'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.6 - 交通灯游戏的流程图'
- en: '](image/Figure_6.6_B15413.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.6_B15413.jpg)'
- en: Figure 6.6 – Flowchart for traffic light game
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 - 交通灯游戏的流程图
- en: As you can see from the flowchart, the game restarts if you choose yellow or
    red. Now that we have the basics of what the game will look like, we have to code
    it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 从流程图中可以看出，如果选择黄色或红色，游戏将重新开始。现在我们已经了解了游戏的基本情况，我们需要编写代码。
- en: 'Important Note:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：
- en: To be able to use delays, we'll need to import the `time` library. Use the code
    `import time` to do so. To include a delay, we use the code `time.sleep()`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够使用延迟，我们需要导入`time`库。使用代码`import time`来做到这一点。要包含延迟，我们使用代码`time.sleep()`。
- en: 'Let''s take a look at a snippet of our code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一段代码片段：
- en: ch6_sleep.py
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: ch6_sleep.py
- en: '[PRE5]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, the algorithm contains some of the code we''ve looked at in
    previous chapters when talking about loops, Boolean statements, and more. This
    particular code returns to the beginning for three rounds if the user has not
    won the game. We used an `if-elif-else` statement to go through the color scenarios.
    The output of the game playing three rounds looks as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，该算法包含了我们在之前章节中讨论循环、布尔语句等时看到的一些代码。如果用户没有赢得游戏，这段特定代码将在三轮后返回到开头。我们使用`if-elif-else`语句来处理颜色情况。游戏进行三轮的输出如下：
- en: '[PRE6]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see from the game output, all three rounds were played. Each delay
    happened according to the statement, which you'll have to test for yourself since
    I can't show time delays with text.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 从游戏输出中可以看出，所有三轮都已经玩过了。每个延迟都按照陈述发生，您需要自己测试，因为我无法用文本显示时间延迟。
- en: Having the flowchart made creating this algorithm simpler than if I'd started
    coding as soon as I'd read the problem. It's important to get used to fleshing
    out the processes you'll need prior to writing your algorithms. Designing solutions
    can be a long and tedious process, but the more organized we are at the start,
    the better our algorithms will be.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 制作流程图使得创建这个算法比我一开始读问题后立即编写代码更简单。在编写算法之前，习惯于详细阐述您需要的过程非常重要。设计解决方案可能是一个漫长而乏味的过程，但我们在开始时越有条理，我们的算法就会越好。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we discussed how to design, diagram, and create solutions
    to problems. We went over the non-linear process of design thinking in order to
    understand how to best design solutions. The design thinking model is a five-step
    process: **Empathize**, **Define**, **Ideate**, **Prototype**, and **Test**. Using
    this five-step process within the computational thinking process can help us to
    avoid many problems and pitfalls.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何设计、绘制和创建解决问题的解决方案。我们讨论了设计思维的非线性过程，以了解如何最好地设计解决方案。设计思维模型是一个五步过程：**共情**，**定义**，**构思**，**原型**和**测试**。在计算思维过程中使用这个五步过程可以帮助我们避免许多问题和陷阱。
- en: We also created brainstorms and flowcharts to establish the decision-making
    process of our algorithms to solve problems.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了头脑风暴和流程图，以建立我们的算法决策过程来解决问题。
- en: In the next chapter, we will use our knowledge of algorithm design and designing
    solutions in order to identify challenges within solutions and debug programs.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将利用我们对算法设计和解决方案设计的知识，来识别解决方案中的挑战并调试程序。
