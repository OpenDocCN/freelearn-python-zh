- en: Chapter 4. Creating Controllers with Blueprints
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。使用蓝图创建控制器
- en: The final piece of the **Model View Controller** (**MVC**) equation is controllers.
    We have already seen the basic usage of the view functions in our `main.py` file.
    Now, the more complex and powerful versions will be introduced, and we will turn
    our disparate view functions in cohesive wholes. We will also discuss the internals
    of how Flask handles the lifetime of an HTTP request and advanced ways to define
    Flask views.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**模型视图控制器**（**MVC**）方程的最后一部分是控制器。我们已经在`main.py`文件中看到了视图函数的基本用法。现在，我们将介绍更复杂和强大的版本，并将我们零散的视图函数转化为统一的整体。我们还将讨论Flask如何处理HTTP请求的生命周期以及定义Flask视图的高级方法。'
- en: Request setup, teardown, and application globals
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求设置、拆卸和应用全局
- en: 'In some cases, a request-specific variable is needed across all view functions
    and needs to be accessed from the template as well. To achieve this, we can use
    Flask''s decorator function `@app.before_request` and the object `g`. The function
    `@app.before_request` is executed every time before a new request is made. The
    Flask object `g` is a thread-safe store of any data that needs to be kept for
    each specific request. At the end of the request, the object is destroyed, and
    a new object is spawned at the start of a new request. For example, the following
    code checks whether the Flask `session` variable contains an entry for a logged
    in user; if it exists, it adds the `User` object to `g`:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，需要跨所有视图函数访问特定于请求的变量，并且还需要从模板中访问。为了实现这一点，我们可以使用Flask的装饰器函数`@app.before_request`和对象`g`。函数`@app.before_request`在每次发出新请求之前执行。Flask对象`g`是每个特定请求需要保留的任何数据的线程安全存储。在请求结束时，对象被销毁，并在新请求开始时生成一个新对象。例如，以下代码检查Flask
    `session`变量是否包含已登录用户的条目；如果存在，它将`User`对象添加到`g`中：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Multiple functions can be decorated with `@app.before_request`, and they all
    will be executed before the requested view function is executed. There also exists
    a decorator `@app.teardown_request`, called after the end of every request. Keep
    in mind that this method of handling user logins is meant as an example and is
    not secure. The recommend method is covered in [Chapter 6](ch06.html "Chapter 6. Securing
    Your App"), *Securing Your App*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 多个函数可以使用`@app.before_request`进行装饰，并且它们都将在请求的视图函数执行之前执行。还存在一个名为`@app.teardown_request`的装饰器，它在每个请求结束后调用。请记住，这种处理用户登录的方法只是一个示例，不安全。推荐的方法在[第6章](ch06.html
    "第6章。保护您的应用") *保护您的应用*中有介绍。
- en: Error pages
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误页面
- en: 'Displaying a browser''s default error pages to the end user is jarring as the
    user loses all context of your app, and they must hit the *back* button to return
    to your site. To display your own templates when an error is returned with the
    Flask `abort()` function, use the `errorhandler` decorator function:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 向最终用户显示浏览器的默认错误页面会让用户失去应用的所有上下文，他们必须点击*返回*按钮才能返回到您的站点。要在使用Flask的`abort()`函数返回错误时显示自己的模板，可以使用`errorhandler`装饰器函数：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `errorhandler` is also useful to translate internal server errors and HTTP
    500 code into user-friendly error pages. The `app.errorhandler()` function may
    take either one or many HTTP status codes to define which code it will act on.
    The returning of a tuple instead of just an HTML string allows you to define the
    HTTP status code of the `Response` object. By default, this is set to `200`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`errorhandler`还可用于将内部服务器错误和HTTP 500代码转换为用户友好的错误页面。`app.errorhandler()`函数可以接受一个或多个HTTP状态码，以定义它将处理哪个代码。返回元组而不仅仅是HTML字符串允许您定义`Response`对象的HTTP状态代码。默认情况下，这被设置为`200`。'
- en: Class-based views
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于类的视图
- en: In most Flask apps, views are handled by functions. However, when many views
    share common functionality or there are pieces of code that could be broken out
    into separate functions, it would be useful to implement our views as classes
    to take advantage of inheritance.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数Flask应用中，视图由函数处理。但是，当许多视图共享公共功能或有代码片段可以拆分为单独的函数时，将视图实现为类以利用继承将非常有用。
- en: 'For example, if we have views that render a template, we could create a generic
    view class that keeps our code *DRY*:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有渲染模板的视图，我们可以创建一个通用的视图类，以保持我们的代码*DRY*：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first thing to note about this code is the `dispatch_request()` function
    in our view class. This is the function in our view that acts as the normal view
    function and returns an HTML string. The `app.add_url_rule()` function mimics
    the `app.route()` function as it ties a route to a function call. The first argument
    defines the route of the function, and the `view_func` parameter defines the function
    that handles the route. The `View.as_view()` method is passed to the `view_func`
    parameter because it transforms the `View` class into a view function. The first
    argument defines the name of the view function, so functions such as `url_for()`
    can route to it. The remaining parameters are passed to the `__init__` function
    of the `View` class.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此代码的第一件事是我们视图类中的`dispatch_request()`函数。这是我们视图中充当普通视图函数并返回HTML字符串的函数。`app.add_url_rule()`函数模仿`app.route()`函数，因为它将路由与函数调用绑定在一起。第一个参数定义了函数的路由，`view_func`参数定义了处理路由的函数。`View.as_view()`方法传递给`view_func`参数，因为它将`View`类转换为视图函数。第一个参数定义了视图函数的名称，因此诸如`url_for()`之类的函数可以路由到它。其余参数传递给`View`类的`__init__`函数。
- en: 'Like the normal view functions, HTTP methods other than `GET` must be explicitly
    allowed for the `View` class. To allow other methods, a class variable containing
    the list of named methods must be added:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与普通的视图函数一样，除了`GET`之外的HTTP方法必须明确允许`View`类。要允许其他方法，必须添加一个包含命名方法列表的类变量：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Method class views
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法类视图
- en: 'Often, when functions handle multiple HTTP methods, the code can become difficult
    to read due to large sections of code nested within `if` statements:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当函数处理多个HTTP方法时，由于大量代码嵌套在`if`语句中，代码可能变得难以阅读：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This can be solved with the `MethodView` class. `MethodView` allows each method
    to be handled by a different class method to separate concerns:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过`MethodView`类来解决。`MethodView`允许每个方法由不同的类方法处理以分离关注点：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Blueprints
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蓝图
- en: In Flask, a **blueprint** is a method of extending an existing Flask app. Blueprints
    provide a way of combining groups of views with common functionality and allow
    developers to break their app down into different components. In our architecture,
    blueprints will act as our *controllers*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Flask中，**蓝图**是扩展现有Flask应用程序的一种方法。蓝图提供了一种将具有共同功能的视图组合在一起的方式，并允许开发人员将其应用程序分解为不同的组件。在我们的架构中，蓝图将充当我们的*控制器*。
- en: 'Views are registered to a blueprint; a separate template and static folder
    can be defined for it, and when it has all the desired content on it, it can be
    registered on the main Flask app to add blueprint content. A blueprint acts much
    like a Flask app object, but is not actually a self-contained app. This is how
    Flask extensions provide view functions. To get an idea of what blueprints are,
    here is a very simple example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 视图被注册到蓝图中；可以为其定义一个单独的模板和静态文件夹，并且当它具有所有所需的内容时，可以在主Flask应用程序上注册蓝图内容。蓝图的行为很像Flask应用程序对象，但实际上并不是一个独立的应用程序。这就是Flask扩展提供视图函数的方式。为了了解蓝图是什么，这里有一个非常简单的例子：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The blueprint takes two required parameters—the name of the blueprint and the
    name of the package—that are used internally in Flask; passing `__name__` to it
    will suffice.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝图需要两个必需参数——蓝图的名称和包的名称——这些参数在Flask内部使用；将`__name__`传递给它就足够了。
- en: The other parameters are optional and define where the blueprint will look for
    files. Because `templates_folder` was specified, the blueprint will not look in
    the default template folder, and the route will render `templates/example/home.html`
    and not `templates/home.html`. The `url_prefix` option automatically adds the
    provided URI to the start of every route in the blueprint. So, the URL for the
    home view is actually `/example/`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 其他参数是可选的，并定义蓝图将在哪里查找文件。因为指定了`templates_folder`，蓝图将不会在默认模板文件夹中查找，并且路由将呈现`templates/example/home.html`而不是`templates/home.html`。`url_prefix`选项会自动将提供的URI添加到蓝图中的每个路由的开头。因此，主页视图的URL实际上是`/example/`。
- en: 'The `url_for()` function will now have to be told which blueprint the requested
    route is in:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`url_for()`函数现在必须告知所请求的路由位于哪个蓝图中：'
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Also, the `url_for()` function will now have to be told whether the view is
    being rendered from within the same blueprint:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`url_for()`函数现在必须告知视图是否在同一个蓝图中呈现：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `url_for()` function will also look for static files in the specified static
    folder.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`url_for()`函数还将在指定的静态文件夹中查找静态文件。'
- en: 'To add the blueprint to our app:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要将蓝图添加到我们的应用程序中：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s transform our current app to one that uses blueprints. We will first
    need to define our blueprint before all of our routes:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将我们当前的应用程序转换为使用蓝图的应用程序。我们首先需要在所有路由之前定义我们的蓝图：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, because the templates folder was defined, we need to move all of our templates
    into a subfolder of the templates folder named blog. Next, all of our routes need
    to have the `@app.route` changed to `@blog_blueprint.route`, and any class view
    assignments now need to be registered to `blog_blueprint`. Remember that `url_for()`
    function calls in the templates will also have to be changed to have a period
    prepended to then to indicate that the route is in the same blueprint.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，因为模板文件夹已经定义，我们需要将所有模板移到模板文件夹的子文件夹中，命名为blog。接下来，我们所有的路由需要将`@app.route`改为`@blog_blueprint.route`，并且任何类视图分配现在需要注册到`blog_blueprint`。记住，模板中的`url_for()`函数调用也需要更改为在路由前加上一个句点以指示该路由在同一个蓝图中。
- en: 'At the end of the file, right before the `if __name__ == ''__main__'':` statement,
    add the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件末尾，在`if __name__ == '__main__':`语句之前，添加以下内容：
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now all of our content is back on the app, which is registered under the blueprint.
    Because our base app no longer has any views, let''s add a redirect on the base
    URL:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们所有的内容都回到了应用程序中，该应用程序在蓝图下注册。因为我们的基本应用程序不再具有任何视图，让我们在基本URL上添加一个重定向：
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Why blog and not `blog_blueprint`? Because blog is the name of the blueprint
    and the name is what Flask uses internally for routing. `blog_blueprint` is the
    name of the variable in the Python file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么是blog而不是`blog_blueprint`？因为blog是蓝图的名称，而名称是Flask在内部用于路由的。`blog_blueprint`是Python文件中的变量名称。
- en: Summary
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We now have our app working inside a blueprint, but what does this give us?
    Let's say that we wanted to add a photo sharing function to our site; we would
    be able to group all the view functions into one blueprint with its own templates,
    static folder, and URL prefix without any fear of disrupting the functionality
    of the rest of the site. In the next chapter, blueprints will be made even more
    powerful by separating them into different files after upgrading our file and
    code structure.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在的应用程序在一个蓝图中运行，但这给了我们什么？假设我们想要在我们的网站上添加一个照片分享功能；我们可以将所有视图函数分组到一个蓝图中，该蓝图具有自己的模板、静态文件夹和URL前缀，而不会担心破坏网站其余部分的功能。在下一章中，通过升级我们的文件和代码结构，蓝图将变得更加强大，通过将它们分离成不同的文件。
