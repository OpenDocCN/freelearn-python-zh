- en: Chapter 7. AJAX and RESTful APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。AJAX和RESTful API
- en: In this chapter, we will use Flask-Restless to create a RESTful API for the
    blogging app. A RESTful API is a way of accessing your blog programmatically,
    by providing highly structured data that represents your blog. Flask-Restless
    works very well with our SQLAlchemy models and also handles complex tasks such
    as serialization and result filtering. We will use our REST API to build an AJAX-powered
    commenting feature for our blog entries. By the end of this chapter, you will
    be able to create easily-configurable APIs for your SQLAlchemy models, and you'll
    make and respond to AJAX requests in your Flask app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Flask-Restless为博客应用创建一个RESTful API。RESTful API是以编程方式访问您的博客的一种方式，通过提供代表您的博客的高度结构化的数据。Flask-Restless非常适用于我们的SQLAlchemy模型，并且还处理复杂的任务，如序列化和结果过滤。我们将使用我们的REST
    API为博客条目构建一个基于AJAX的评论功能。在本章结束时，您将能够为您的SQLAlchemy模型创建易于配置的API，并在您的Flask应用中进行AJAX请求的创建和响应。
- en: 'In this chapter we shall:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Create a model to store comments on blog entries
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个模型来存储博客条目上的评论
- en: Install Flask-Restless
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Flask-Restless
- en: Create a RESTful API for the comment model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为评论模型创建一个RESTful API
- en: Build a frontend for communicating with our API using Ajax
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个用于使用Ajax与我们的API进行通信的前端
- en: Creating a comment model
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建评论模型
- en: Before we start creating our API, we need to create a database model for the
    resource that we wish to share. The API we are building will be used to create
    and retrieve comments using AJAX, so our model will contain all the fields that
    would be relevant for storing an unauthenticated user's comment on one of our
    entries.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始创建API之前，我们需要为我们希望共享的资源创建一个数据库模型。我们正在构建的API将用于使用AJAX创建和检索评论，因此我们的模型将包含存储未经身份验证用户在我们条目中的评论的所有相关字段。
- en: 'For our purposes, the following fields should be sufficient:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，以下字段应该足够：
- en: '`name`, the name of the person making the comment'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`，发表评论的人的姓名'
- en: '`email`, the e-mail address of the person commenting, which we will use solely
    to display an image of them from **Gravatar**'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`，评论者的电子邮件地址，我们将仅使用它来显示他们在**Gravatar**上的图片'
- en: '`URL`, the URL to the commenters blog'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`URL`，评论者博客的URL'
- en: '`ip_address`, the IP address of the commenter'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ip_address`，评论者的IP地址'
- en: '`body`, the actual comment'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`body`，实际评论'
- en: '`status`, one of either `Public`, `Spam,` or `Deleted`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`status`，其中之一是`Public`，`Spam`或`Deleted`'
- en: '`created_timestamp`, the timestamp with which the comment was created'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created_timestamp`，评论创建的时间戳'
- en: '`entry_id`, the ID of blog entry the comment relates to'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_id`，评论相关的博客条目的ID'
- en: 'Lets begin coding by creating the Comment model definition in our app''s `models.py`
    module:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过在我们的应用程序的`models.py`模块中创建`Comment`模型定义来开始编码：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After adding the `Comment` model definition, we need to set up the SQLAlchemy
    relationship between the `Comment` and `Entry` models. As you will recall, we
    did this once before when setting up the relationship between `User` and `Entry`
    via the entries relationship. We will do this for `Comment` by adding a comments
    attribute to the `Entry` model.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '在添加`Comment`模型定义之后，我们需要设置`Comment`和`Entry`模型之间的SQLAlchemy关系。您会记得，我们在设置`User`和`Entry`之间的关系时曾经做过一次，通过entries关系。我们将通过在`Entry`模型中添加一个comments属性来为`Comment`做这个。 '
- en: 'Below the `tags` relationship, add the following code to the `Entry` model
    definition:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在`tags`关系下面，添加以下代码到`Entry`模型定义中：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We've specified the relationship as `lazy='dynamic'`, which, as you will recall
    from [Chapter 5](ch05.html "Chapter 5. Authenticating Users"), *Authenticating
    Users*, means that the `comments` attribute on any given `Entry` instance will
    be a filterable query.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经指定了关系为`lazy='dynamic'`，正如您从[第5章](ch05.html "第5章。验证用户")*验证用户*中所记得的那样，这意味着在任何给定的`Entry`实例上，`comments`属性将是一个可过滤的查询。
- en: Creating a schema migration
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模式迁移
- en: 'In order to start using our new model, we need to update our database schema.
    Using the `manage.py` helper, create a schema migration for the `Comment` model:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始使用我们的新模型，我们需要更新我们的数据库模式。使用`manage.py`助手，为`Comment`模型创建一个模式迁移：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then apply the migration by running `upgrade`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过运行`upgrade`来应用迁移：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `Comment` model is now ready to use! At this point, if we were implementing
    comments using regular Flask views, we might create a comments blueprint and start
    writing a view to handle the comment creation. However, we will be exposing the
    comments using a REST API and create them using AJAX directly from the front-end.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comment`模型现在已经准备好使用了！在这一点上，如果我们使用常规的Flask视图来实现评论，我们可能会创建一个评论蓝图并开始编写一个视图来处理评论的创建。然而，我们将使用REST
    API公开评论，并直接从前端使用AJAX创建它们。'
- en: Installing Flask-Restless
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Flask-Restless
- en: 'With our model in place, we are now ready to install Flask-Restless, a third-party
    Flask extension that makes it simple to build RESTful APIs for your SQLAlchemy
    models. After ensuring that you have activated the blog app''s virtual environment,
    install Flask-Restless using `pip`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们的模型，我们现在准备安装Flask-Restless，这是一个第三方Flask扩展，可以简单地为您的SQLAlchemy模型构建RESTful
    API。确保您已经激活了博客应用的虚拟环境后，使用`pip`安装Flask-Restless：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can verify if the extension is installed by opening up the interactive interpreter
    and getting the version that is installed. Don't forget, your exact version number
    may differ.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过打开交互式解释器并获取已安装的版本来验证扩展是否已安装。不要忘记，您的确切版本号可能会有所不同。
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now that we have Flask-Restless installed, let's configure it to work with our
    application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Flask-Restless，让我们配置它以使其与我们的应用程序一起工作。
- en: Setting up Flask-Restless
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Flask-Restless
- en: 'Like other Flask extensions, we will begin in the `app.py` module by configuring
    an object that will manage our new API. In Flask-Restless, this object is called
    an `APIManager` and it will allow us to create RESTful endpoints for our SQLAlchemy
    models. Add the following lines to `app.py`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 像其他Flask扩展一样，我们将从`app.py`模块开始，通过配置一个将管理我们新API的对象。在Flask-Restless中，这个对象称为`APIManager`，它将允许我们为我们的SQLAlchemy模型创建RESTful端点。将以下行添加到`app.py`：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Because the API will depend on both our Flask API object and our `Comment` model,
    we need to make sure that we don't create any circular module dependencies. We
    can avoid introducing circular imports by creating a new module, `api.py,` at
    the root of the app directory.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 因为API将依赖于我们的Flask API对象和我们的“Comment”模型，所以我们需要确保我们不创建任何循环模块依赖关系。我们可以通过在应用程序目录的根目录下创建一个新模块“api.py”来避免引入循环导入。
- en: 'Let''s start with the bare minimum to see what Flask-Restless provides out-of-the-box.
    Add the following code to `api.py`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最基本的开始，看看Flask-Restless提供了什么。在`api.py`中添加以下代码：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The code in `api.py` calls the `create_api()` method on our `APIManager` object.
    This method will populate our app with additional URL routes and view code that,
    together, constitute a RESTful API. The methods parameter indicates that we will
    allow only `GET` and `POST` requests (meaning comments can be read or created,
    but not edited or deleted).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: “api.py”中的代码调用了我们的“APIManager”对象上的“create_api()”方法。这个方法将用额外的URL路由和视图代码填充我们的应用程序，这些代码一起构成了一个RESTful
    API。方法参数指示我们只允许“GET”和“POST”请求（意味着评论可以被读取或创建，但不能被编辑或删除）。
- en: 'The final action is to import the new API module in `main.py`, the entry-point
    into our application. We are importing the module purely for its side-effects,
    registering the URL routes. Add the following code to `main.py`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的操作是在`main.py`中导入新的API模块，这是我们应用程序的入口点。我们导入模块纯粹是为了它的副作用，注册URL路由。在`main.py`中添加以下代码：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Making API requests
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发出API请求
- en: 'In one terminal, start up the development server. In another terminal, let''s
    see what happens when we make a `GET` request to our API endpoint (note there
    is no trailing forward slash):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个终端中，启动开发服务器。在另一个终端中，让我们看看当我们向我们的API端点发出“GET”请求时会发生什么（注意没有尾随的斜杠）：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There are no comments in the database, so no objects have been serialized and
    returned to us. However, there is some interesting metadata that tells us how
    many objects are there in the database, what page we are on, and how many total
    pages of comments exist.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库中没有评论，所以没有对象被序列化和返回给我们。然而，有一些有趣的元数据告诉我们数据库中有多少对象，我们在哪一页，以及有多少总页的评论存在。
- en: 'Let''s create a new comment by POSTing some JSON data to our API (I will assume
    that the first entry in your database has an id of `1`). We will use `curl` to
    submit a `POST` request containing a JSON-encoded representation of a new comment:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向我们的API POST一些JSON数据来创建一个新的评论（我将假设你的数据库中的第一个条目的id为“1”）。我们将使用`curl`提交一个包含新评论的JSON编码表示的`POST`请求：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Assuming that no typos were made, the API will respond with the following data,
    confirming the creation of the new `Comment`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 假设没有拼写错误，API将以以下数据回应，确认新的“Comment”的创建：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, all the data we POSTed is included in the response, in addition
    to the rest of the field data, such as the new comment's id and timestamps. Surprisingly,
    even the corresponding `Entry` object has been serialized and included in the
    response.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们POST的所有数据都包含在响应中，除了其余的字段数据，比如新评论的id和时间戳。令人惊讶的是，甚至相应中已经序列化并包含了相应的“Entry”对象。
- en: 'Now that we have a comment in the database, let''s try making another `GET`
    request to our API as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在数据库中有了一个评论，让我们尝试向我们的API发出另一个`GET`请求：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first object contains exactly the same data that was returned to us when
    we made the `POST` request. In addition, the surrounding metadata has changed
    to reflect the fact that there is now one comment in the database.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个对象包含了当我们进行“POST”请求时返回给我们的完全相同的数据。此外，周围的元数据已经改变，以反映数据库中现在有一个评论的事实。
- en: Creating comments using AJAX
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AJAX创建评论
- en: In order to allow users to post comments, we first need a way to capture their
    input, which we will do by creating a `Form` class with `wtforms`. This form should
    allow users to enter their name, email address, an optional URL, and their comment.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许用户发表评论，我们首先需要一种捕获他们输入的方法，我们将通过使用“wtforms”创建一个“Form”类来实现这一点。这个表单应该允许用户输入他们的姓名、电子邮件地址、一个可选的URL和他们的评论。
- en: 'In the forms module in the entries blueprint, add the following form definition:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在条目蓝图的表单模块中，添加以下表单定义：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You may be wondering why we are specifying validators, since the API will be
    handling the POSTed data. We do this because Flask-Restless does not provide validation,
    but it does provide a hook where we can perform validation. In this way, we can
    leverage WTForms validation inside our REST API.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想为什么我们要指定验证器，因为API将处理POST的数据。我们这样做是因为Flask-Restless不提供验证，但它提供了一个我们可以执行验证的钩子。这样，我们就可以在我们的REST
    API中利用WTForms验证。
- en: 'In order to use the form in the entry detail page, we need to pass the form
    into the context when rendering the detail template. Open the entries blueprint
    and import the new `CommentForm`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在条目详细页面使用表单，我们需要在渲染详细模板时将表单传递到上下文中。打开条目蓝图并导入新的`CommentForm`：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then modify the `detail` view to pass a form instance into the context. We
    will pre-populate the `entry_id` hidden field with the value of the requested
    entry:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后修改“详细”视图，将一个表单实例传递到上下文中。我们将使用请求的条目的值预填充“entry_id”隐藏字段：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'With the form now in the detail template context, all that is left is to render
    the form. Create an empty template in `entries/templates/entries/includes/` named
    `comment_form.html` and add the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在表单已经在详细模板上下文中，剩下的就是渲染表单。在`entries/templates/entries/includes/`中创建一个空模板，命名为`comment_form.html`，并添加以下代码：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The interesting thing to note is that we are not using the `form_field` macro
    for the `entry_id` field. This is because we do not want the comment form to display
    a label for a field that will not be visible to the user. Instead, we will initialize
    the form with this value.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，我们没有使用`form_field`宏来处理`entry_id`字段。这是因为我们不希望评论表单显示一个对用户不可见的字段的标签。相反，我们将用这个值初始化表单。
- en: 'Lastly, we need to include the comment form in the `detail.html` template.
    Below the entry body, add the following markup:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要在“detail.html”模板中包含评论表单。在条目正文下面，添加以下标记：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Using the development server, try navigating to the detail page for any entry.
    You should see a comment form:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用开发服务器，尝试导航到任何条目的详细页面。你应该会看到一个评论表单：
- en: '![Creating comments using AJAX](img/1709_07_01.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![使用AJAX创建评论](img/1709_07_01.jpg)'
- en: AJAX form submissions
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AJAX表单提交
- en: To simplify making AJAX requests, we are going to use the jQuery library. Feel
    free to substitute another JavaScript library if you prefer but, since jQuery
    is so ubiquitous (and plays nicely with Bootstrap), we will be using it for this
    section. If you have been following along with the code up to this point, jQuery
    should already be included on all pages. Now we need to create a JavaScript file
    to handle the comment submission.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化进行AJAX请求，我们将使用jQuery库。如果你愿意，可以随意替换为其他JavaScript库，但是由于jQuery如此普遍（并且与Bootstrap兼容），我们将在本节中使用它。如果你一直在跟着代码进行开发，那么jQuery应该已经包含在所有页面中。现在我们需要创建一个JavaScript文件来处理评论提交。
- en: 'Create a new file in `statics/js/` named `comments.js` and add the following
    JavaScript code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在`statics/js/`中创建一个名为`comments.js`的新文件，并添加以下JavaScript代码：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `comments.js` code handles POSTing the form data, serialized as JSON, to
    the REST API. It also handles taking the API response and displaying either a
    success or an error message.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`comments.js`代码处理将表单数据序列化为JSON后，提交到REST API。它还处理API响应，并显示成功或错误消息。'
- en: 'In the `detail.html` template, we simply need to include our script and bind
    the submit handler. Add the following block override to the detail template:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '在`detail.html`模板中，我们只需要包含我们的脚本并绑定提交处理程序。在详细模板中添加以下块覆盖： '
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Go ahead and try submitting a comment or two.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 试着提交一两条评论。
- en: Validating data in the API
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在API中验证数据
- en: Unfortunately for us, our API is not performing any type of validation on the
    incoming data. In order to validate the `POST` data, we need to use a hook provided
    by Flask-Restless. Flask-Restless calls these hooks request preprocessors and
    postprocessors.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们的API没有对传入数据进行任何类型的验证。为了验证`POST`数据，我们需要使用Flask-Restless提供的一个钩子。Flask-Restless将这些钩子称为请求预处理器和后处理器。
- en: 'Let''s take a look at how to use the POST preprocessor to perform some validation
    on our comment data. Start by opening `api.py` and making the following changes:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用POST预处理器对评论数据进行一些验证。首先打开`api.py`并进行以下更改：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Our API will now validate the submitted comment using the validation logic from
    our `CommentForm`. We do this by specifying a preprocessor for the `POST` method.
    The `POST` preprocessor, which we've implemented as `post_preprocessor`, accepts
    the deserialized `POST` data as an argument. We can then feed that data into our
    `CommentForm` and call it's `validate()` method. In the event where validation
    fails, we will raise a `ProcessingException`, signaling to Flask-Restless that
    this data was unprocessable and returning a `400` Bad Request response.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的API现在将使用来自`CommentForm`的验证逻辑来验证提交的评论。我们通过为`POST`方法指定一个预处理器来实现这一点。我们已经实现了`post_preprocessor`作为`POST`预处理器，它接受反序列化的`POST`数据作为参数。然后我们可以将这些数据传递给我们的`CommentForm`并调用它的`validate()`方法。如果验证失败，我们将引发一个`ProcessingException`，向Flask-Restless发出信号，表明这些数据无法处理，并返回一个`400`
    Bad Request响应。
- en: 'In the following screenshot, I have not supplied the **Comment** field, which
    is required. I receive an error message when I try to submit the comment:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我没有提供必需的**评论**字段。当我尝试提交评论时，我收到了一个错误消息：
- en: '![Validating data in the API](img/1709_07_02.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![在API中验证数据](img/1709_07_02.jpg)'
- en: Preprocessors and postprocessors
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预处理器和后处理器
- en: 'We just looked at an example of using the `POST` method preprocessor with Flask-Restless.
    In the following table, you can see the other hooks that are available:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看了一个使用Flask-Restless的`POST`方法预处理器的示例。在下表中，你可以看到其他可用的钩子：
- en: '| Method name | Description | Preprocessor arguments | Postprocessor arguments
    |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 方法名称 | 描述 | 预处理器参数 | 后处理器参数 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `GET_SINGLE` | Retrieve a single object by primary key | `instance_id`, the
    primary key of the object | `result`, the dictionary representation of the object
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `GET_SINGLE` | 通过主键检索单个对象 | `instance_id`，对象的主键 | `result`，对象的字典表示 |'
- en: '| `GET_MANY` | Retrieve multiple objects | `search_params`, a dictionary of
    search parameters used to filter the result set | `result`, the representation
    of the object''s`search_params` |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `GET_MANY` | 检索多个对象 | `search_params`，用于过滤结果集的搜索参数字典 | `result`，对象的`search_params`表示
    |'
- en: '| `PUT_SINGLE` | Update a single object by primary key | `instance_id`data,
    a dictionary of data used to update the object | `result`, the dictionary representation
    of the updated object |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `PUT_SINGLE` | 通过主键更新单个对象 | `instance_id`数据，用于更新对象的数据字典 | `result`，更新后对象的字典表示
    |'
- en: '| `PUT_MANY` | Update multiple objects | `search_params`, a dictionary of search
    parameters used to determine which objects to update.data, a dictionary of data
    used to update the object. | `query`, a SQLAlchemy query representing the objects
    to be updated.`data``search_params` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `PUT_MANY` | 更新多个对象 | `search_params`，用于确定要更新哪些对象的搜索参数字典。data，用于更新对象的数据字典。
    | `query`，表示要更新的对象的SQLAlchemy查询。`data``search_params` |'
- en: '| `POST` | Create a new instance | `data`, the dictionary of data to populate
    the new object | `result`, a dictionary representation of the new object |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `POST` | 创建新实例 | `data`，用于填充新对象的数据字典 | `result`，新对象的字典表示 |'
- en: '| `DELETE` | Delete an instance by primary key | `instance_id`, the primary
    key of the object to be deleted | `was_deleted`, a boolean value indicating whether
    the object was deleted |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE` | 通过主键删除实例 | `instance_id`，要删除的对象的主键 | `was_deleted`，一个布尔值，指示对象是否已被删除
    |'
- en: Loading comments using AJAX
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AJAX加载评论
- en: Now that we are able to create validated comments using AJAX, let's use the
    API to retrieve the list of comments and display them beneath the blog entry.
    To do this, we will read the values from the API and dynamically create DOM elements
    to display the comments. As you might recall from the earlier API responses we
    examined, there is quite a bit of private information being returned, including
    the entire serialized representation of each comment's associated `Entry`. For
    our purposes, this information is redundant and will furthermore waste bandwidth.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够使用AJAX创建经过验证的评论，让我们使用API来检索评论列表，并在博客条目下方显示它们。为此，我们将从API中读取值，并动态创建DOM元素来显示评论。您可能还记得我们之前检查的API响应中返回了相当多的私人信息，包括每条评论相关联的整个序列化表示的`Entry`。对于我们的目的来说，这些信息是多余的，而且还会浪费带宽。
- en: 'Let''s begin by doing a bit of additional configuration to our comments endpoint
    to restrict the `Comment` fields we return. In `api.py`, make the following addition
    to the call to `api.create_api()`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先对评论端点进行一些额外的配置，以限制我们返回的“Comment”字段。在`api.py`中，对`api.create_api()`的调用进行以下添加：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Requesting the list of comments now gives us a more manageable response that
    doesn''t leak implementation details or private data:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在请求评论列表会给我们一个更易管理的响应，不会泄露实现细节或私人数据：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: A nice feature would be to display an avatar next to a user's comment. Gravatar,
    a free avatar service, allows users to associate their e-mail address with an
    image. We will use the commenter's e-mail address to display their associated
    avatar (if one exists). If the user has not created an avatar, an abstract pattern
    will be shown instead.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的功能是在用户的评论旁边显示一个头像。Gravatar是一个免费的头像服务，允许用户将他们的电子邮件地址与图像关联起来。我们将使用评论者的电子邮件地址来显示他们关联的头像（如果存在）。如果用户没有创建头像，将显示一个抽象图案。
- en: 'Let''s add a method on the `Comment` model to generate the URL for a user''s
    Gravatar image. Open `models.py` and add the following method to `Comment`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`Comment`模型上添加一个方法来生成用户Gravatar图像的URL。打开`models.py`并向`Comment`添加以下方法：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You will also need to be sure to import `hashlib` and `urllib` at the top of
    the models module.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要确保在模型模块的顶部导入`hashlib`和`urllib`。
- en: 'If we attempt to include Gravatar in the list of columns, Flask-Restless will
    raise an exception because `gravatar` is actually a method. Luckily, Flask-Restless
    provides a way to include the results of method calls when serializing objects.
    In `api.py`, make the following addition to the `create_api()` call:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试在列的列表中包括Gravatar，Flask-Restless会引发异常，因为`gravatar`实际上是一个方法。幸运的是，Flask-Restless提供了一种在序列化对象时包含方法调用结果的方法。在`api.py`中，对`create_api()`的调用进行以下添加：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Go ahead and try fetching the list of comments. You should now see the Gravatar
    URL included in the serialized response.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 继续尝试获取评论列表。现在你应该看到Gravatar URL包含在序列化响应中。
- en: Retrieving the list of comments
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检索评论列表
- en: 'We now need to return to our JavaScript file and add code to retrieve the list
    of comments. We will do this by passing in a search filter to the API, which will
    retrieve only the comments that are associated with the requested blog entry.
    Search queries are expressed as a list of filters, each filter specifying the
    following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要返回到我们的JavaScript文件，并添加代码来检索评论列表。我们将通过向API传递搜索过滤器来实现这一点，API将仅检索与请求的博客条目相关联的评论。搜索查询被表示为一系列过滤器，每个过滤器指定以下内容：
- en: Name of the column
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列的名称
- en: Operation (for example, equals)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作（例如，等于）
- en: Value to search for
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要搜索的值
- en: 'Open `comments.js` and add the following code after the line that begins:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`comments.js`并在以下行之后添加以下代码：
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, near the bottom of the file, export the load function alongside the `bindHandler`
    export as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在文件底部附近，导出`load`函数以及`bindHandler`导出，如下所示：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The new JavaScript code that we added makes an AJAX request to the API for comments
    associated with a given Entry. If no comments exist, a message is displayed indicating
    no comments have been made yet. Otherwise, the entries are rendered as a list
    below the `Entry` body.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加的新JavaScript代码会向API发出AJAX请求，以获取与给定条目相关联的评论。如果没有评论存在，将显示一条消息，指示尚未发表评论。否则，条目将作为列表呈现在“Entry”正文下方。
- en: 'The final task left is to call `Comments.load()` in the details template when
    the page is rendered. Open `detail.html` and add the following highlighted code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的任务是在页面呈现时在详细模板中调用`Comments.load()`。打开`detail.html`并添加以下突出显示的代码：
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After making a couple comments, the comment list looks as seen in the following
    image:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在发表了一些评论之后，评论列表看起来如下图所示：
- en: '![Retrieving the list of comments](img/1709_07_03.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![检索评论列表](img/1709_07_03.jpg)'
- en: As an exercise, see if you can write code to render any new comment that is
    POSTed by the user. You will recall that, when a comment is successfully created,
    the new data will be returned as a JSON object.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 作为练习，看看你是否能够编写代码来呈现用户发表的任何新评论。您会记得，当成功创建评论时，新数据将作为JSON对象返回。
- en: Reading more
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读更多
- en: 'Flask-Restless supports a number of configuration options that, in the interests
    of space, could not be covered in this chapter. The search filters are a very
    powerful tool, and we only scratched the surface of what is possible. Additionally,
    the pre and postprocessing hooks can be used to implement a number of interesting
    features such as the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-Restless支持许多配置选项，由于篇幅原因，本章未能涵盖。搜索过滤器是一个非常强大的工具，我们只是触及了可能性的表面。此外，预处理和后处理钩子可以用于实现许多有趣的功能，例如以下功能：
- en: Authentication, which can be implemented in the preprocessor
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在预处理器中实现的身份验证
- en: Default filters for `GET_MANY`, which could be used to restrict the list of
    comments to those that are public, for instance
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET_MANY`的默认过滤器，可以用于限制评论列表，例如只显示公开的评论'
- en: Adding custom or calculated values to the serialized response
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向序列化响应添加自定义或计算值
- en: Modifying incoming `POST` values to set default values on the model instance
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改传入的`POST`值以在模型实例上设置默认值
- en: If REST API is a key component in your application, I strongly suggest spending
    time reading the Flask-Restless documentation. The documentation can be found
    online at [https://flask-restless.readthedocs.org/en/latest/](https://flask-restless.readthedocs.org/en/latest/).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果REST API是您的应用程序中的关键组件，我强烈建议花时间阅读Flask-Restless文档。文档可以在网上找到：[https://flask-restless.readthedocs.org/en/latest/](https://flask-restless.readthedocs.org/en/latest/)。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we added a simple REST API to our app using the Flask-Restless
    extension. We then used JavaScript and Ajax to integrate our frontend with the
    API, allowing users to view and post new comments, all without writing a single
    line of view code.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用Flask-Restless扩展为我们的应用程序添加了一个简单的REST API。然后，我们使用JavaScript和Ajax将我们的前端与API集成，允许用户查看和发布新评论，而无需编写一行视图代码。
- en: In our next chapter, we will work on creating apps that are testable and find
    ways to improve our code for this purpose. This will also allow us to verify that
    the code we have written is doing what we would like it to do; nothing more, nothing
    less. Automating this will give you confidence and ensure that the RESTful API
    is working as expected.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将致力于创建可测试的应用程序，并找到改进我们代码的方法。这也将使我们能够验证我们编写的代码是否按照我们的意愿进行操作；不多，也不少。自动化这一过程将使您更有信心，并确保RESTful
    API按预期工作。
