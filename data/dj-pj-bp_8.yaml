- en: Appendix A. Development Environment Setup Details and Debugging Techniques
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A.开发环境设置详细信息和调试技巧
- en: This appendix will go into further detail about the Django development environment
    setup that we have been using throughout the book. We will look into the details
    of the setup, and I will explain each of the steps that we took. I will also show
    you a technique for debugging Django applications. For this appendix, we will
    assume that the project we are setting up is the Blueblog project from the first
    chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录将更详细地介绍我们在整本书中一直在使用的Django开发环境设置。我们将深入了解设置的细节，并解释我们采取的每个步骤。我还将向您展示一种调试Django应用程序的技术。在本附录中，我们将假设我们正在设置的项目是第一章中的Blueblog项目。
- en: 'We will start our project by first creating a root directory for it and then
    `cd` into the directory so that all our commands are run inside it:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个根目录，然后`cd`到该目录，以便所有命令都在其中运行：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There is no technical reason for this. I just prefer to keep all the files related
    to a project in one directory as it makes things easier to organize when you have
    to add further files related to a project, such as designs and other documentation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这没有技术原因。我只是喜欢将与项目相关的所有文件放在一个目录中，因为当您必须添加与项目相关的其他文件（如设计和其他文档）时，这样做会更容易组织。
- en: Next, we will create a virtual environment to use for the project. Virtual environments
    are a feature that allow you to create lightweight installations of Python so
    that each of your projects can have its own installation of all the libraries
    that it uses. This is useful when you are working on multiple projects at the
    same time and each project requires a separate version of some library. For example,
    at work, I once had to work on two projects at the same time. One required Django
    1.4; the other required Django 1.9\. If I hadn't used virtual environments, it
    would have been very difficult to keep both versions of Django at the same time.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个虚拟环境用于该项目。虚拟环境是一个功能，允许您创建Python的轻量级安装，以便每个项目都可以拥有自己使用的所有库的安装。当您同时在多个项目上工作，并且每个项目需要某个库的单独版本时，这将非常有用。例如，在工作中，我曾经不得不同时处理两个项目。一个需要Django
    1.4；另一个需要Django 1.9。如果我没有使用虚拟环境，将很难同时保留Django的两个版本。
- en: Virtual environments also allow you to keep your Python environment clean, which
    is very important when you are finally ready to deploy your application to a production
    server. When deploying your application to a server, you need to be able to accurately
    reproduce the same Python environment you had in your development machine. If
    you don't use a separate virtual environment for each project, you will need to
    figure out exactly which Python libraries your project uses and then only install
    those on the production server. With a virtual environment, you no longer need
    to spend time figuring out which of the installed Python libraries are related
    to your project. You can just create a list of all the libraries installed in
    the virtual environment and install them on the production server, confident that
    you won't miss out on anything or install anything extra that you don't use.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境还可以让您保持Python环境的清洁，这在最终准备将应用程序部署到生产服务器时非常重要。当将应用程序部署到服务器时，您需要能够准确地复制与开发机器中相同的Python环境。如果您不为每个项目使用单独的虚拟环境，您将需要准确确定项目使用的Python库，然后仅在生产服务器上安装这些库。有了虚拟环境，您不再需要花时间弄清楚安装的Python库中哪些与您的项目相关。您只需创建虚拟环境中安装的所有库的列表，并在生产服务器上安装它们，确信您不会错过任何内容或安装任何多余的内容。
- en: If you want to read more about virtual environments, you can read the official
    documentation at [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于虚拟环境的信息，可以阅读官方文档[https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)。
- en: 'To create the virtual environment, we use the `pyvenv` command:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建虚拟环境，我们使用`pyvenv`命令：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This creates a new environment inside the `blueblogEnv` folder. Once we have
    created the environment, we activate it:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`blueblogEnv`文件夹内创建一个新的环境。创建环境后，我们激活它：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Activating the environment makes sure that any Python commands we run or any
    libraries we install will use the activated environment. Next, we install Django
    in our new environment and start our project:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 激活环境可以确保我们运行的任何Python命令或我们安装的任何库都将使用激活的环境。接下来，在我们的新环境中安装Django并启动我们的项目：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This creates a directory called `src` that holds our Django project. You can
    name the directory anything you want; this is just the convention I prefer.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`src`的目录，其中包含我们的Django项目。您可以将目录命名为任何您喜欢的名称；这只是我喜欢的约定。
- en: And that's all there is to the setup of our development environment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们开发环境的设置。
- en: Using pdb to debug Django views
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pdb调试Django视图
- en: 'You will often come across problems in your Django applications that are not
    immediately clear. When I get stuck with a tough bug, especially when it''s inside
    a Django view, I use the Python debugger, which is built into Python, to step
    through my view code and debug the problem. To do so, you''ll need to put this
    line of code into your view right before the point where you think the problem
    exists:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django应用程序中，您经常会遇到一些不太清楚的问题。当我遇到棘手的错误，特别是在Django视图中时，我会使用Python调试器来逐步执行我的视图代码并调试问题。为此，您需要在认为问题存在的地方的视图中放入这行代码：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then, the next time you load the page associated with that view, you'll see
    that your browser appears to not load anything. This is because your Django application
    is now paused. If you look in the console where you ran the `runserver` command,
    you should see a prompt for `pdb`. In the prompt, you can type the name of any
    variable available in the current Python scope (usually the scope of the view
    that you are debugging) and it will print the current value of that variable.
    You can also run a bunch of other debugging commands. For a complete list of available
    features, take a look at the documentation for the Python debugger at [https://docs.python.org/3/library/pdb.html](https://docs.python.org/3/library/pdb.html).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，下次加载与该视图相关的页面时，你会发现你的浏览器似乎没有加载任何内容。这是因为你的Django应用现在已经暂停了。如果你在运行`runserver`命令的控制台中查看，你应该会看到一个`pdb`的提示。在提示符中，你可以输入当前Python范围内（通常是你正在调试的视图的范围）可用的任何变量的名称，它会打印出该变量的当前值。你还可以运行一系列其他调试命令。要查看可用功能的完整列表，请查看Python调试器的文档[https://docs.python.org/3/library/pdb.html](https://docs.python.org/3/library/pdb.html)。
- en: A good Stack Overflow question with useful answers that lists some other debugging
    techniques is [http://stackoverflow.com/questions/1118183/how-to-debug-in-django-the-good-way](http://stackoverflow.com/questions/1118183/how-to-debug-in-django-the-good-way).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的Stack Overflow问题，列出了一些其他有用的答案和调试技巧，链接是[http://stackoverflow.com/questions/1118183/how-to-debug-in-django-the-good-way](http://stackoverflow.com/questions/1118183/how-to-debug-in-django-the-good-way)。
- en: Developing on Windows
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上开发
- en: If you are going to be using the Windows operating system while reading this
    book, please note that a couple of things will need to be done differently. Firstly,
    all the instructions provided in this book assume a Linux/Mac OS X environment,
    and some commands may not work as is. The most important change is how Windows
    handles file paths. On a Linux/OS X environment, paths are written with a forward
    slash. All the paths mentioned in the book are formatted similarly, for example,
    `PROJECT_DIR/main/settings.py`. When referring to these paths on Windows, you
    will need to change the forward slashes to backslashes. This path will become
    `PROJECT_DIR\main\settings.py`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在阅读本书时要使用Windows操作系统，请注意有一些事情需要做出不同的处理。首先，本书中提供的所有指令都是基于Linux/Mac OS X环境的，有些指令可能无法直接使用。最重要的变化是Windows如何处理文件路径。在Linux/OS
    X环境中，路径是用正斜杠写的。书中提到的所有路径都是类似格式的，例如，`PROJECT_DIR/main/settings.py`。在Windows上引用这些路径时，你需要将正斜杠改为反斜杠。这个路径将变成`PROJECT_DIR\main\settings.py`。
- en: Secondly, while Python is normally included with or easily installed on Linux/OS
    X, you will need to follow the instructions at `https://www.python.org/downloads/windows/`
    to install it on Windows. After you have Python installed, you can install Django
    using the instructions at [https://docs.djangoproject.com/en/stable/howto/windows/](https://docs.djangoproject.com/en/stable/howto/windows/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，虽然Python通常包含在Linux/OS X中，或者很容易安装，但你需要按照`https://www.python.org/downloads/windows/`上的说明在Windows上安装Python。安装了Python之后，你可以按照[https://docs.djangoproject.com/en/stable/howto/windows/](https://docs.djangoproject.com/en/stable/howto/windows/)上的说明安装Django。
- en: There are a few other things that will need to be modified for Windows. I have
    mentioned these in the book as they have come up, but I might have missed something.
    If so, a search on Google will usually lead you to an answer. If not, you can
    always look me up on Twitter at `@theonejb` and I'll do my best to help you.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些其他的东西需要在Windows上进行修改。我在书中提到了这些，但可能会漏掉一些。如果是这样，通过谷歌搜索通常会找到答案。如果找不到，你可以在Twitter上找到我，我的用户名是`@theonejb`，我会尽力帮助你。
