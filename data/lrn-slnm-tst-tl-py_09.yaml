- en: Chapter 9. Advanced Techniques of Selenium WebDriver
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章 Selenium WebDriver 高级技术
- en: So far in the book, we have seen how to set up Selenium WebDriver for testing
    web applications and some of the important features and APIs for locating and
    interacting with various elements in the browser.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书中我们已看到如何设置 Selenium WebDriver 以测试 Web 应用程序，以及一些用于在浏览器中定位和与各种元素交互的重要特性和
    API。
- en: In this chapter, we will explore some of the advanced APIs of Selenium WebDriver.
    These features come in handy when you're testing fairly complex applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 Selenium WebDriver 的一些高级 API。当测试相对复杂的应用程序时，这些功能非常有用。
- en: 'In this chapter, you will learn more about:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解更多关于：
- en: Creating tests that simulate keyboard or mouse events using the `Actions` class
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Actions` 类创建模拟键盘或鼠标事件的测试
- en: Simulating mouse operations such as drag-and-drop and double-click
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟鼠标操作，如拖放和双击
- en: Running JavaScript code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 JavaScript 代码
- en: Capturing screenshots and movies of test runs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获测试运行的截图和视频
- en: Handling browser navigation and cookies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理浏览器导航和 Cookie
- en: Methods for performing keyboard and mouse actions
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行键盘和鼠标操作的方法
- en: The Selenium WebDriver's advanced user interactions API allows us to perform
    operations from simple keyboard and mouse events to complex mouse events such
    as drag-and-drop, pressing a hotkey combination, holding a key, and performing
    mouse operations. This is accomplished by using the `ActionChains` class in the
    Selenium WebDriver Python API.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 的高级用户交互 API 允许我们执行从简单的键盘和鼠标事件到复杂的鼠标事件（如拖放、按下快捷键组合、按住键和执行鼠标操作）的操作。这是通过使用
    Selenium WebDriver Python API 中的 `ActionChains` 类来实现的。
- en: 'Here is a list of the important methods supported by the `ActionChains` class
    for performing keyboard and mouse events:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 `ActionChains` 类支持执行键盘和鼠标事件的重要方法列表：
- en: '| Method | Description | Argument | Example |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 | 参数 | 示例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `click(on_element=None)` | This method performs the click operation. | `on_element`:
    This is the element to click. If `None`, clicks on the current mouse position.
    | `click(main_link)` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `click(on_element=None)` | 此方法执行点击操作。 | `on_element`: 这是点击的元素。如果为 `None`，则在当前鼠标位置点击。
    | `click(main_link)` |'
- en: '| `click_and_hold(on_element=None)` | This method holds down the left mouse
    button on an element. | `on_element`: This is the element to click and hold down
    the mouse button. If `None`, clicks on current mouse position. | `click_and_hold(gmail_link)`
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `click_and_hold(on_element=None)` | 此方法在元素上按下鼠标左键。 | `on_element`: 这是点击并按下鼠标按钮的元素。如果为
    `None`，则在当前鼠标位置点击。 | `click_and_hold(gmail_link)` |'
- en: '| `double_click(on_element=None)` | This method performs a double-click on
    an element. | `on_element`: This is the element to double-click. If `None`, clicks
    on current mouse position. | `double_click(info_box)` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `double_click(on_element=None)` | 此方法在元素上执行双击操作。 | `on_element`: 这是双击的元素。如果为
    `None`，则在当前鼠标位置点击。 | `double_click(info_box)` |'
- en: '| `drag_and_drop(source, target)` | This method performs the drag-and-drop
    operation. | `source`: This is the element to mouse down.`target`: The element
    to mouse up. | `drag_and_drop(img, canvas)` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `drag_and_drop(source, target)` | 此方法执行拖放操作。 | `source`: 这是鼠标按下时要拖动的元素。`target`:
    鼠标释放的元素。 | `drag_and_drop(img, canvas)` |'
- en: '| `key_down(value, element=None)` | This method sends a key press only, without
    releasing it. This should only be used with modifier keys (such as the *Ctrl*,
    *Alt*, and *Shift* keys). | `key`: This is the modifier key to send. Values are
    defined in the `Keys` class.`target`: The element to send keys. If `None`, sends
    a key to current focused element. | `key_down(Keys.SHIFT)\ send_keys(''n'')\ key_up(Keys.SHIFT)`
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `key_down(value, element=None)` | 此方法仅发送按键，不释放它。这应仅与修饰键（如 *Ctrl*、*Alt* 和
    *Shift* 键）一起使用。 | `key`: 这是要发送的修饰键。值在 `Keys` 类中定义。`target`: 发送键的元素。如果为 `None`，则发送到当前聚焦的元素。
    | `key_down(Keys.SHIFT)\ send_keys(''n'')\ key_up(Keys.SHIFT)` |'
- en: '| `key_up(value, element=None)` | This method releases a modifier key. | `key`:
    This is the modifier key to send. Values are defined in the `Keys` class.`target`:
    This is the element to send keys. If `None`, sends a key to current focused element.
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `key_up(value, element=None)` | 此方法释放一个修饰键。 | `key`: 这是要发送的修饰键。值在 `Keys`
    类中定义。`target`: 这是发送键的元素。如果为 `None`，则发送到当前聚焦的元素。 |'
- en: '| `move_to_element(to_element)` | This method moves the mouse to the middle
    of an element. | `to_element`: This is the element to move to. | `move_to_element(gmail_link)`
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `move_to_element(to_element)` | 这个方法将鼠标移动到元素的中间。 | `to_element`: 这是需要移动到的元素。
    | `move_to_element(gmail_link)` |'
- en: '| `perform()` | This method performs all stored actions. |   | `perform()`
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `perform()` | 这个方法执行所有存储的动作。 |   | `perform()` |'
- en: '| `release(on_element=None)` | This method releases a held mouse button. |
    `on_element`: This is the element to mouse up | `release(banner_img)` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `release(on_element=None)` | 这个方法释放一个按住的鼠标按钮。 | `on_element`: 这是鼠标释放的元素。
    | `release(banner_img)` |'
- en: '| `send_keys(keys_to_send)` | This method sends keys to an element that has
    current focus. | `keys_to_send`: This is the keys to send | `send_keys("hello")`
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `send_keys(keys_to_send)` | 这个方法向具有当前焦点的元素发送按键。 | `keys_to_send`: 这是需要发送的按键
    | `send_keys("hello")` |'
- en: '| `send_keys_to_element(element, keys_to_send)` | This method sends keys to
    an element. | `element`: This is the element to send keys.`keys_to_send`: The
    keys to send. | `send_keys_to_element(firstName, "John")` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `send_keys_to_element(element, keys_to_send)` | 这个方法向一个元素发送按键。 | `element`:
    这是需要发送按键的元素。`keys_to_send`: 需要发送的按键。 | `send_keys_to_element(firstName, "John")`
    |'
- en: For a detailed list visit [http://selenium.googlecode.com/git/docs/api/py/webdriver/selenium.webdriver.common.action_chains.html](http://selenium.googlecode.com/git/docs/api/py/webdriver/selenium.webdriver.common.action_chains.html).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 详细列表请访问 [http://selenium.googlecode.com/git/docs/api/py/webdriver/selenium.webdriver.common.action_chains.html](http://selenium.googlecode.com/git/docs/api/py/webdriver/selenium.webdriver.common.action_chains.html)。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `Interactions` API is not supported on Safari. Also, there are limitations
    for certain events on various browsers. For more details, refer to [https://code.google.com/p/selenium/wiki/AdvancedUserInteractions](https://code.google.com/p/selenium/wiki/AdvancedUserInteractions).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Safari 上不支持 `Interactions` API。此外，在各个浏览器上对某些事件也有限制。更多详情请参阅 [https://code.google.com/p/selenium/wiki/AdvancedUserInteractions](https://code.google.com/p/selenium/wiki/AdvancedUserInteractions)。
- en: Keyboard actions
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 键盘操作
- en: 'Let''s create a test that demonstrates how to use the keyboard actions such
    as pressing a hot key combination. In the sample app when we press the *Shift*
    + *N* key combination, a label will change its color, as shown in the following
    code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个测试来演示如何使用键盘操作，例如按下快捷键组合。在示例应用中，当我们按下 *Shift* + *N* 键组合时，标签的颜色会改变，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can perform a hotkey press operation using the `ActionChains` class. In
    this example, we used a combination of `key_down()`, `send_key()`, and `key_up()`
    methods to perform *Shift* + *N* key press as if a real user has pressed these
    keys:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `ActionChains` 类执行快捷键按下操作。在这个例子中，我们使用 `key_down()`、`send_key()` 和 `key_up()`
    方法的组合来执行 *Shift* + *N* 键的按下，就像真实用户按下这些键一样：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `ActionChains` class requires the `driver` instance to be passed. We can
    then arrange the sequence of events by calling the available methods and executing
    the action calling the `perform()` method.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`ActionChains` 类需要传递 `driver` 实例。然后我们可以通过调用可用方法并执行调用 `perform()` 方法的动作来安排事件序列。'
- en: The mouse movement
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 鼠标移动
- en: Here is another example that calls the mouse move event by calling the `move_to_element()`
    method of the `ActionChains` class. This is equivalent to the `onMouseOver` event.
    The `move_to_element()` method will move the mouse cursor from its current location
    to the supplied element.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个示例，通过调用 `ActionChains` 类的 `move_to_element()` 方法来调用鼠标移动事件。这相当于 `onMouseOver`
    事件。`move_to_element()` 方法会将鼠标光标从当前位置移动到指定的元素。
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The double_click method
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 双击方法
- en: 'We can double-click on an element by calling the `double_click()` method of
    the `ActionChains` class in the following way:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用 `ActionChains` 类的 `double_click()` 方法来双击一个元素，如下所示：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The drag_and_drop method
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拖放方法
- en: 'In Selenium WebDriver, we can perform the drag-and-drop operation by calling
    the `drag_and_drop()` method of the `ActionChains` class. This method requires
    the source element that will be dragged, and the target element where the source
    element will be dropped. Here is an example of the `drag_and_drop` method:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Selenium WebDriver 中，我们可以通过调用 `ActionChains` 类的 `drag_and_drop()` 方法来执行拖放操作。这个方法需要指定将被拖动的源元素和目标元素，这里是一个
    `drag_and_drop` 方法的示例：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Executing JavaScript
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行 JavaScript
- en: We can execute JavaScript code through Selenium WebDriver using the methods
    available from the `WebDriver` class. This is useful when we cannot perform certain
    operations using the Selenium WebDriver API or we want to test the JavaScript
    code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`WebDriver`类中提供的方法来执行JavaScript代码。当我们无法使用Selenium WebDriver API执行某些操作或我们想要测试JavaScript代码时，这非常有用。
- en: 'The WebDriver class provides the following methods to execute JavaScript code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebDriver`类提供了以下方法来执行JavaScript代码：'
- en: '| Method | Description | Argument | Example |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 | 参数 | 示例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `execute_async_script(script, *args)` | This method asynchronously executes
    JavaScript in the current window/frame. | `script`: This is the JavaScript code`args`:
    This is any arguments for the JavaScript code | `driver.execute_async_script("return
    document.title")` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `execute_async_script(script, *args)` | 此方法在当前窗口/框架中异步执行JavaScript。 | `script`:
    这是JavaScript代码`args`: 这是JavaScript代码的任何参数 | `driver.execute_async_script("return
    document.title")` |'
- en: '| `execute_script(script, *args)` | This method synchronously executes JavaScript
    in the current window/frame. | `script`: This is the JavaScript code`args`: This
    is any arguments for the JavaScript code | `driver.execute_script("return document.title")`
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `execute_script(script, *args)` | 此方法在当前窗口/框架中同步执行JavaScript。 | `script`:
    这是JavaScript代码`args`: 这是JavaScript代码的任何参数 | `driver.execute_script("return document.title")`
    |'
- en: 'Let''s create a test with a utility method, which highlights the elements before
    performing actions on these elements by using the JavaScript methods:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个使用实用方法的测试，该方法在执行这些元素的操作之前，通过使用JavaScript方法突出显示这些元素：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can execute the JavaScript code by calling the `execute_script` method of
    the `WebDriver` class, as shown in the following example. We can also pass arguments
    to the JavaScript code through this method. In this example, we are modifying
    the border style for a moment and reverting that change back. This will highlight
    the given element with green border during the execution. It is useful to know
    which step is being executed on screen:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用`WebDriver`类的`execute_script`方法来执行JavaScript代码，如下面的示例所示。我们还可以通过此方法将参数传递给JavaScript代码。在这个例子中，我们暂时修改边框样式，然后撤销这个更改。这将突出显示执行期间给定的元素，以绿色边框显示。了解屏幕上正在执行哪个步骤非常有用：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Capturing screenshots of failures
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获失败的截图
- en: 'Capturing screenshots during the test run comes very handy when you want to
    communicate failures to the developers. It also helps in debugging tests or creating
    evidence of the test run. Selenium WebDriver comes with built-in methods to capture
    screenshots during the test run. The `WebDriver` class provides the following
    methods to capture and save a screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试运行期间捕获截图，当您想要将失败通知开发者时非常有用。它还有助于调试测试或创建测试运行的证据。Selenium WebDriver自带在测试运行期间捕获截图的方法。`WebDriver`类提供了以下方法来捕获和保存截图：
- en: '| Method | Description | Argument | Example |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 | 参数 | 示例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `Save_screenshot(filename)` | This method gets the screenshot of the current
    window and saves the image to the specified file. | `filename`: This is the path/name
    of the file to which the screenshot will be saved | `Driver.save_screenshot("homepage.png")`
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `Save_screenshot(filename)` | 此方法获取当前窗口的截图，并将图像保存到指定的文件中。 | `filename`: 这是截图将保存到的文件路径/名称
    | `Driver.save_screenshot("homepage.png")` |'
- en: '| `get_screenshot_as_base64()` | This method gets the screenshot of the current
    window as a base64 encoded string, which is useful in embedding images in HTML.
    |   | `driver.get_screenshot_as_base64()` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `get_screenshot_as_base64()` | 此方法获取当前窗口的截图，并以base64编码的字符串形式返回，这在将图像嵌入HTML中非常有用。
    |   | `driver.get_screenshot_as_base64()` |'
- en: '| `get_screenshot_as_file(filename)` | This method gets the screenshot of the
    current window. It returns `False` if there is any IOError, else returns `Tr`
    `ue`. It uses full paths in your filename. | `filename`: This is the path/name
    of the file to which the screenshot will be saved | `driver.get_screenshot_as_file(''/results/screenshots/HomePage.png'')`
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `get_screenshot_as_file(filename)` | 此方法获取当前窗口的截图。如果发生任何IO错误，则返回`False`，否则返回`True`。它使用完整的文件名路径。
    | `filename`: 这是截图将保存到的文件路径/名称 | `driver.get_screenshot_as_file(''/results/screenshots/HomePage.png'')`
    |'
- en: '| `get_screenshot_as_png()` | This method gets the screenshot of the current
    window as binary data. |   | `driver.get_screenshot_as_png()` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `get_screenshot_as_png()` | 此方法获取当前窗口的截图作为二进制数据。 |   | `driver.get_screenshot_as_png()`
    |'
- en: Let's create a test that captures a screenshot when it leads to failure. In
    this example, we'll locate an element that should be present on the application's
    home page. However, if the test doesn't find this element, it will throw `NoSuchElementException`
    and take a screenshot of the page displayed in the browser window, which we can
    use for debugging or sending to a developer as evidence.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个测试，当它导致失败时捕获屏幕截图。在这个例子中，我们将定位到应用程序主页上应该存在的元素。然而，如果测试找不到这个元素，它将抛出 `NoSuchElementException`
    并捕获浏览器窗口中显示的页面截图，我们可以将其用于调试或作为证据发送给开发者。
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this example, when the test doesn''t find the promotion banner element,
    it takes a screenshot using the `save_screenshot()` method. We need to pass the
    path and name of the file to which the resulting image will be saved, as shown:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，当测试找不到促销横幅元素时，它将使用 `save_screenshot()` 方法进行截图。我们需要传递要保存结果的文件路径和名称，如下所示：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: While capturing and saving the screenshot, it is recommended to use unique names
    for the image files such as including a timestamp and also using the **Portable
    Network** **Graphics** (**PNG**) format for highest compression of the file, which
    also results in minimal file size.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在捕获和保存屏幕截图时，建议为图像文件使用独特的名称，例如包括时间戳，并使用 **便携式网络** **图形** (**PNG**) 格式以实现文件的最高压缩，这也会导致文件大小最小化。
- en: Recording a video of the test run
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 录制测试运行的视频
- en: Similar to capturing screenshots, recording a video of the test run helps in
    recording complete test sessions in a visual way. We can watch the recorded video
    to understand what happens during the test run. This can be used as evidence for
    other project stakeholders as well, or can also be used as demos.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 与捕获屏幕截图类似，录制测试运行的视频有助于以可视化的方式记录完整的测试会话。我们可以观看录制的视频来了解测试运行期间发生了什么。这也可以作为其他项目利益相关者的证据，或者也可以用作演示。
- en: Selenium WebDriver does not have built-in features to record video. Recording
    a video of the test run can be achieved by using a Python library called `Castro`
    separately. It was created by Jason Huggin, the creator of Selenium.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 没有内置的视频录制功能。可以通过使用名为 `Castro` 的 Python 库来单独录制测试运行的视频。它是由
    Selenium 的创造者 Jason Huggin 创建的。
- en: Castro is based on a cross-platform screen recording tool named **Pyvnc2swf**
    (refer to [http://www.unixuser.org/~euske/vnc2swf/pyvnc2swf.html](http://www.unixuser.org/~euske/vnc2swf/pyvnc2swf.html)).
    It captures the screen where the tests are running using the VNC protocol and
    generates a **Shockwave Flash** (**SWF**) movie file.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Castro 基于名为 **Pyvnc2swf** 的跨平台屏幕录制工具（参考 [http://www.unixuser.org/~euske/vnc2swf/pyvnc2swf.html](http://www.unixuser.org/~euske/vnc2swf/pyvnc2swf.html)）。它使用
    VNC 协议捕获测试运行的屏幕，并生成 **Shockwave Flash** (**SWF**) 电影文件。
- en: Castro also allows recording sessions from a remote machine using the VNC protocol.
    It needs a VNC program installed on the machine to record the videos. Before installing
    Castro we need PyGame library to be installed. The PyGame package cannot be installed
    with pip command and we need to get PyGame installer from [http://www.pygame.org/download.shtml](http://www.pygame.org/download.shtml).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Castro 还允许使用 VNC 协议从远程机器录制会话。需要在该机器上安装 VNC 程序来录制视频。在安装 Castro 之前，我们需要安装 PyGame
    库。PyGame 包不能通过 pip 命令安装，我们需要从 [http://www.pygame.org/download.shtml](http://www.pygame.org/download.shtml)
    获取 PyGame 安装程序。
- en: 'We can install Castro using `pip` with the following command line:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令行使用 `pip` 安装 Castro：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We also need to install or enable VNC on the desktop, where the tests will be
    executed. On Windows, we need to install a VNC program. **TightVNC** ([http://www.tightvnc.com/](http://www.tightvnc.com/))
    will be a good choice. Install the TightVNC server and viewer on Windows.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在将要执行测试的桌面上安装或启用 VNC。在 Windows 上，我们需要安装一个 VNC 程序。**TightVNC** ([http://www.tightvnc.com/](http://www.tightvnc.com/))
    将是一个不错的选择。在 Windows 上安装 TightVNC 服务器和查看器。
- en: On Ubuntu, go to **Settings** | **Preference** | **Remote Desktop** and check
    the **Allow other users to view your** **desktop** checkbox. For Mac, we can install
    the Vine VNC server from [http://www.testplant.com/products/vine/](http://www.testplant.com/products/vine/)
    or enable **Remote Desktop** from **System Preferences**.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上，前往 **设置** | **首选项** | **远程桌面** 并勾选 **允许其他用户查看您的** **桌面** 复选框。对于 Mac，我们可以从
    [http://www.testplant.com/products/vine/](http://www.testplant.com/products/vine/)
    安装 Vine VNC 服务器或从 **系统偏好设置** 中启用 **远程桌面**。
- en: 'Let''s capture a video recording of the search test case that we created in
    the earlier chapters, as shown in the following code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们捕捉一下我们在前几章中创建的搜索测试用例的视频录制，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To create a new video recording session, we need to create an Castro object
    and initialize the instance with the path and name of the capture file as an argument
    to the constructor. Screen capture is started with the `start()` method, which
    will record the entire screen until the `stop` method is called. Testing with
    the `setUp()` method is the best way to initialize the Castro instance and start
    the recording as shown in the following example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的视频录制会话，我们需要创建一个Castro对象，并用构造函数的参数初始化实例，该参数是捕获文件的路径和名称。屏幕捕获通过`start()`方法开始，它将记录整个屏幕，直到调用`stop`方法。使用`setUp()`方法进行测试是初始化Castro实例并开始录制的最佳方式，如下面的示例所示：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To stop the recording, call the `stop()` method. Again, the `teadDown()` method
    is a good place to call this method so that we can capture the entire test case,
    as shown in the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止录制，请调用`stop()`方法。同样，`tearDown()`方法是一个调用此方法的好地方，这样我们就可以捕捉整个测试用例，如下面的代码所示：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If there are multiple tests in a class, we can initialize and stop the recording
    in the class level using the `setUp()` and `teardown()` methods instead of creating
    a new file for each test.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个类中有多个测试，我们可以使用`setUp()`和`tearDown()`方法在类级别初始化和停止录制，而不是为每个测试创建一个新的文件。
- en: Handling pop-up windows
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理弹出窗口
- en: Testing pop-up windows involves identifying a pop-up window by its name attribute
    or window handle, switching the driver context to the desired pop-up window and
    then executing steps on the pop-up window, and finally switching back to the parent
    window.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 测试弹出窗口涉及通过其名称属性或窗口句柄来识别弹出窗口，切换驱动程序上下文到所需的弹出窗口，然后在该弹出窗口上执行步骤，最后切换回父窗口。
- en: When we create an instance of the browser from our tests, it is a parent window
    and any subsequent windows that are created from the parent window are called
    child windows or pop-up windows. We can work with any child window as long as
    it belongs to the current WebDriver context.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从测试中创建浏览器实例时，它是一个父窗口，并且从父窗口创建的任何后续窗口都被称为子窗口或弹出窗口。只要它属于当前的WebDriver上下文，我们就可以与任何子窗口一起工作。
- en: 'Here is an example of a pop-up window:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个弹出窗口的例子：
- en: '![Handling pop-up windows](img/3506OS_09_01.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![处理弹出窗口](img/3506OS_09_01.jpg)'
- en: 'Create a new test class `PopupWindowTest` with the test method `test_popup_window()`
    as shown in the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的测试类`PopupWindowTest`，其中包含测试方法`test_popup_window()`，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Before the context is moved to the child window, we can save the handle of
    the parent window using the `current_window_handle` property. We will use this
    value later to switch back to the parent window from the child window. We can
    switch to the child window by using its name or window handle by calling the `switch_to.window()`
    method of the `WebDriver` class. In this example, we are using the name of the
    window, as shown:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在上下文移动到子窗口之前，我们可以使用`current_window_handle`属性保存父窗口的句柄。我们将在稍后使用此值从子窗口切换回父窗口。我们可以通过调用`WebDriver`类的`switch_to.window()`方法使用其名称或窗口句柄来切换到子窗口。在这个例子中，我们使用窗口的名称，如下所示：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After performing actions and checking on the help window, we can close it by
    calling the `close()` method and switch back to the parent window, as shown:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行操作并检查帮助窗口后，我们可以通过调用`close()`方法来关闭它，并切换回父窗口，如下所示：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Managing cookies
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理Cookie
- en: 'Cookies are important for any web applications to store information on the
    user''s computer for a better user experience. Cookies are used to store user
    preferences, login information, and various other details of the client. The Selenium
    WebDriver API provides various methods to manage these cookies during testing.
    We can read cookie values, add cookies, and delete cookies during the test. This
    can be used to test how the application reacts when cookies are manipulated. The
    `WebDriver` class provides the following methods to manage cookies:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Cookie对于任何Web应用程序来说都很重要，因为它可以在用户的计算机上存储信息，从而提供更好的用户体验。Cookie用于存储用户偏好、登录信息和客户端的详细信息。Selenium
    WebDriver API提供了各种方法在测试期间管理这些Cookie。我们可以在测试期间读取Cookie值、添加Cookie和删除Cookie。这可以用来测试应用程序在Cookie被操作时的反应。`WebDriver`类提供了以下方法来管理Cookie：
- en: '| Method | Description | Argument | Example |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 | 参数 | 示例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `add_cookie(cookie_dict)` | This method adds a cookie to the current session
    | `cookie_dict`: This is a dictionary containing a cookie name and value pair
    | `driver.add_cookie({"foo","bar"})` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `add_cookie(cookie_dict)` | 此方法将 cookie 添加到当前会话 | `cookie_dict`: 这是一个包含 cookie
    名称和值对的字典 | `driver.add_cookie({"foo","bar"})` |'
- en: '| `delete_all_cookies()` | This method deletes all the cookies from the current
    session |   | `driver.delete_all_cookies()` |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `delete_all_cookies()` | 此方法删除当前会话中的所有 cookies |   | `driver.delete_all_cookies()`
    |'
- en: '| `delete_cookie(name)` | This method deletes a single cookie with the specified
    name | `name`: This is the name of the cookie to be deleted | `driver.delete_cookie("foo")`
    |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `delete_cookie(name)` | 此方法删除指定名称的单个 cookie | `name`: 这是要删除的 cookie 的名称 |
    `driver.delete_cookie("foo")` |'
- en: '| `get_cookie(name)` | This method gets a single cookie by the name and returns
    the dictionary for the cookie if found, none, if not | `name`: This is the name
    of the cookie to search | `driver.get_cookie("foo")` |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `get_cookie(name)` | 此方法通过名称获取单个 cookie，如果找到则返回 cookie 的字典，如果没有找到则返回 none
    | `name`: 这是搜索 cookie 的名称 | `driver.get_cookie("foo")` |'
- en: '| `get_cookies()` | This method gets a set of dictionaries corresponding to
    cookies from the current session |   | `driver.get_cookies()` |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `get_cookies()` | 此方法获取与当前会话中 cookies 对应的一组字典 |   | `driver.get_cookies()`
    |'
- en: 'Here is an example that validates a cookie created to store the language selected
    by the user on the demo application''s home page:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例，验证了用于存储用户在演示应用程序主页上选择的语言的 cookie：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We can retrieve the value of the cookie using the `get_cookie()` method of the
    `WebDriver` class. We need to pass the name of the cookie. This method returns
    a dictionary.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `WebDriver` 类的 `get_cookie()` 方法检索 cookie 的值。我们需要传递 cookie 的名称。此方法返回一个字典。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about advanced features of Selenium WebDriver API
    for handling the keyboard and mouse events, capturing screenshots, recording videos,
    and handling cookies.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了 Selenium WebDriver API 的高级功能，用于处理键盘和鼠标事件、捕获截图、录制视频和处理 cookies。
- en: We used the `ActionChains` class to perform various keyboard and mouse operations.
    These features are very useful when dealing with applications that heavily use
    keyboard and mouse actions.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 `ActionChains` 类来执行各种键盘和鼠标操作。当处理大量使用键盘和鼠标动作的应用程序时，这些功能非常有用。
- en: You saw how to run JavaScript code from your tests. This is a very powerful
    feature while dealing with applications that use Ajax and we can use the underlying
    JavaScript API from our scripts.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到了如何在测试中运行 JavaScript 代码。当处理使用 Ajax 的应用程序时，这是一个非常强大的功能，我们可以从脚本中使用底层的 JavaScript
    API。
- en: You captured screenshots for errors during test runs and also recorded a test
    session. This helps in debugging the tests as well as creating evidences for test
    runs.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你在测试运行期间捕获了错误截图，并记录了测试会话。这有助于调试测试，并为测试运行创建证据。
- en: Finally, you learned about the browser navigation methods and cookies.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你学习了关于浏览器导航方法和 cookies 的内容。
- en: In the next chapter, you will learn how to integrate our tests with other tools
    such as Continuous Integration tools to run the tests as part of the build process.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何将我们的测试与其他工具集成，例如持续集成工具，以便将测试作为构建过程的一部分运行。
