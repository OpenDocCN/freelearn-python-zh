- en: The Global Interpreter Lock
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局解释器锁
- en: One of the major players in Python concurrent programming is the **Global Interpreter
    Lock** (**GIL**). In this chapter, we will cover the definition and purposes of
    the GIL, and how it affects concurrent Python applications. The problems that
    the GIL poses for Python concurrent systems and the controversy around its implementation
    will also be discussed. Finally, we will mention some thoughts on how Python programmers
    and developers should think about, and interact with, the GIL.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python并发编程中的主要参与者之一是全局解释器锁（GIL）。在本章中，我们将介绍GIL的定义和目的，以及它对并发Python应用程序的影响。还将讨论GIL对Python并发系统造成的问题以及其实施引起的争议。最后，我们将提到一些关于Python程序员和开发人员应该如何思考和与GIL交互的想法。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: 'A brief introduction to the GIL: what gave rise to it, and the problems it
    causes'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对GIL的简要介绍：它是如何产生的，以及它引起的问题
- en: Efforts in removing/fixing the GIL in Python
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Python中消除/修复GIL的努力
- en: How to effectively work with the GIL in Python concurrent programs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何有效地处理Python并发程序中的GIL
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following is a list of prerequisites for this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的先决条件列表：
- en: Ensure that you have Python 3 installed on your computer
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的计算机上已安装Python 3
- en: Download the GitHub repository at [https://github.com/PacktPublishing/Mastering-Concurrency-in-Python](https://github.com/PacktPublishing/Mastering-Concurrency-in-Python)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://github.com/PacktPublishing/Mastering-Concurrency-in-Python](https://github.com/PacktPublishing/Mastering-Concurrency-in-Python)下载GitHub存储库
- en: During this chapter, we will be working with the subfolder named `Chapter15`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用名为`Chapter15`的子文件夹进行工作
- en: 'Check out the following video to see the Code in Action: [http://bit.ly/2DFDYhC](http://bit.ly/2DFDYhC)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：[http://bit.ly/2DFDYhC](http://bit.ly/2DFDYhC)
- en: An introduction to the Global Interpreter Lock
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局解释器锁简介
- en: 'The GIL is quite popular in the Python concurrent programming community. Designed
    as a lock that will only allow one thread to access and control the Python interpreter
    at any given time, the GIL in Python is often known as the infamous GIL that prevents
    multithreaded programs from reaching their fully optimized speed. In this section,
    we will discuss the concept behind the GIL, and its goals: why it was designed
    and implemented, and how it affected multithreaded programming in Python.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: GIL在Python并发编程社区中非常受欢迎。设计为一种锁，它只允许一个线程在任何给定时间访问和控制Python解释器，Python中的GIL通常被称为臭名昭著的GIL，它阻止多线程程序达到其完全优化的速度。在本节中，我们将讨论GIL背后的概念及其目标：为什么它被设计和实施，以及它如何影响Python中的多线程编程。
- en: An analysis of memory management in Python
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中内存管理的分析
- en: Before we jump into the specifics of the GIL and its effects, let's consider
    the problems that Python core developers encountered during the early days of
    Python, and that gave rise to a need for the GIL. Specifically, there is a significant
    difference between Python programming and programming in other popular languages, in
    terms of managing objects in the memory space.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论GIL及其影响之前，让我们考虑Python核心开发人员在Python早期遇到的问题，以及这些问题引发了对GIL的需求。具体来说，在内存空间中管理对象方面，Python编程与其他流行语言的编程存在显着差异。
- en: For example, in the programming language C++, a variable is actually a location
    in the memory space where a value will be written. This setup leads to the fact
    that, when a non-pointer variable is assigned with a specific value, the programming
    language will effectively copy that specific value to the memory location (that
    is, the variable). Additionally, when a variable is assigned with another variable
    (which is not a pointer), the memory location of the latter will be copied to
    that of the former; no further connection between these two variables will be
    maintained after the assignment.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在编程语言C++中，变量实际上是内存空间中将写入值的位置。这种设置导致了一个事实，即当非指针变量被赋予特定值时，编程语言将有效地将该特定值复制到内存位置（即变量）。此外，当一个变量被赋予另一个变量（不是指针）时，后者的内存位置将被复制到前者的内存位置；在赋值后，这两个变量之间将不再保持任何连接。
- en: On the other hand, Python considers a variable as simply a name, while the actual
    values of its variables are isolated in another region in the memory space. When
    a value is assigned to a variable, the variable is effectively given a reference
    to the location in the memory space of the value (even though the term referencing
    is not used in the same sense as C++ referencing). Memory management in Python
    is therefore fundamentally different from the model of putting a value into a
    memory space that we see in C++.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Python将变量视为简单的名称，而变量的实际值则隔离在内存空间的另一个区域。当一个值被赋给一个变量时，变量实际上被赋予了对该值在内存空间中位置的引用（即使引用这个术语并不像C++中的引用那样使用）。因此，Python中的内存管理与我们在C++中看到的将值放入内存空间的模型根本不同。
- en: This means that when an assignment instruction is executed, Python simply interacts
    with references and switches them around—not the actual values themselves. Also,
    for this reason, multiple variables can be referenced by the same value, and the
    changes made by one variable will be reflected throughout all of the other associated
    variables.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当执行赋值指令时，Python只是与引用交互并将它们切换，而不是实际的值本身。此外，出于这个原因，多个变量可以被同一个值引用，并且一个变量所做的更改将在所有其他相关变量中反映出来。
- en: 'Let''s analyze this feature in Python. If you have already downloaded the code
    for this book from the GitHub page, go ahead and navigate to the `Chapter15` folder. Let''s
    take a look at the `Chapter15/example1.py` file, as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析Python中的这个特性。如果您已经从GitHub页面下载了本书的代码，请转到`Chapter15`文件夹。让我们看一下`Chapter15/example1.py`文件，如下所示：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this example, we are looking at the management of the value `[7]` (a list
    of one element: the integer `7`). We mentioned that values in Python are stored
    independently of variables, and value management in Python simply references variables
    to the appropriate values. The `sys.getrefcount()` method in Python takes in an
    object and returns the counter of all references that the value associated to
    that object has. Here, we are calling `sys.getrefcount()` three times: on the
    actual value, `[7]`; the variable `a` that is assigned with the value; and finally,
    the variable `b` that is assigned with the variable `a`.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在管理值`[7]`（一个元素的列表：整数`7`）。我们提到Python中的值是独立于变量存储的，Python中的值管理只是将变量引用到适当的值。Python中的`sys.getrefcount()`方法接受一个对象并返回与该对象关联的值的所有引用的计数。在这里，我们调用`sys.getrefcount()`三次：在实际值`[7]`上；分配给值的变量`a`；最后，分配给变量`a`的变量`b`。
- en: 'Additionally, we are exploring the process of mutating the value by using a
    variable referenced with it and the resulting values of all of the variables associated
    to that value. Specifically, we are mutating the first element of the list via
    variable `a`, and printing out the values of both `a` and `b`. Run the script,
    and your output should be similar to the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们正在探讨通过使用与之引用的变量来改变值的过程，以及与该值相关联的所有变量的结果值。具体来说，我们通过变量`a`来改变列表的第一个元素，并打印出`a`和`b`的值。运行脚本，你的输出应该类似于以下内容：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see, this output is consistent with what we discussed: for the first `sys.getrefcount()` function
    call, there is only one reference count for the value `[7]`, which is created
    when we directly reference it; when we assign the list to variable `a`, the value
    has two references, since `a` is now associated with the value; finally, when
    `a` is assigned to `b`, `[7]` is additionally referenced by `b`, and the reference
    count is now three.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个输出与我们讨论的一致：对于第一个`sys.getrefcount()`函数调用，值`[7]`只有一个引用计数，当我们直接引用它时创建；当我们将列表分配给变量`a`时，该值有两个引用，因为`a`现在与该值相关联；最后，当`a`分配给`b`时，`[7]`还被`b`引用，引用计数现在是三。
- en: In the output of the second part of the program, we can see that, when we changed
    the value of which variable `a` references, `[7]` was mutated instead of the variable
    `a`. As a result, variable `b`, which was referencing the same value as `a`, also
    had its value changed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序的第二部分输出中，我们可以看到，当我们改变变量`a`引用的值时，`[7]`被改变了，而不是变量`a`。结果，引用与`a`相同的变量`b`的值也被改变了。
- en: 'The following diagram illustrates this process. In Python programs, variables
    (`a` and `b`) simply make references to the actual values (objects), and an assignment
    statement between two variables (for example, `a = b`) instructs Python to have
    the two variables reference the same object (as opposed to copying the actual
    value to another memory location, like in C++):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下图说明了这个过程。在Python程序中，变量（`a`和`b`）只是简单地引用实际值（对象），两个变量之间的赋值语句（例如，`a = b`）指示Python让这两个变量引用相同的对象（而不是将实际值复制到另一个内存位置，就像在C++中一样）：
- en: '![](assets/0f95f237-7e49-418b-96b9-5824aacab7af.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0f95f237-7e49-418b-96b9-5824aacab7af.png)'
- en: Diagram of Python's referencing scheme
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Python引用方案的图示
- en: The problem that the GIL addresses
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GIL解决的问题
- en: Keeping Python's implementation of memory and variable management in mind, we
    can see that references to a given value in Python are constantly changing in
    a program, and keeping track of the reference count for a value is therefore highly
    important.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记Python对内存和变量管理的实现，我们可以看到Python中对给定值的引用在程序中不断变化，因此跟踪值的引用计数非常重要。
- en: Now, applying what you learned in [Chapter 14](d87c597d-2130-4847-9ca9-e12021bc7a0c.xhtml),
    *Race Conditions*, you should know that in a Python concurrent program, this reference
    count is a shared resource that needs protection from race conditions. In other
    words, this reference count is a critical section, which, if handled carelessly,
    will result in an incorrect interpretation of how many variables are referencing
    a particular value. This will cause memory leaks that will make Python programs
    significantly inefficient, and may even release a memory that is actually being
    referenced by some variables, losing that value forever.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，应用你在[第14章](d87c597d-2130-4847-9ca9-e12021bc7a0c.xhtml)中学到的*竞争条件*，你应该知道在Python并发程序中，这个引用计数是一个需要保护免受竞争条件影响的共享资源。换句话说，这个引用计数是一个关键部分，如果处理不慎，将导致对特定值引用的变量数量的错误解释。这将导致内存泄漏，使Python程序显着低效，并且甚至可能释放实际上被一些变量引用的内存，永久丢失该值。
- en: As you learned in the previous chapter, a solution to making sure that race
    conditions will not occur with regard to a particular shared resource is to place
    a lock on that resource, effectively allowing one thread, at the most, to access
    the resource at any given time within a concurrent program. We also discussed
    that, if enough locks are placed in a concurrent program, that program will become
    entirely sequential, and no additional speed will be gained by implementing concurrency.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在上一章中学到的，确保不会发生关于特定共享资源的竞争条件的解决方案是在该资源上放置一个锁，从而在并发程序中最多允许一个线程访问该资源。我们还讨论了，如果在并发程序中放置了足够多的锁，那么该程序将变得完全顺序化，并且通过实现并发性将不会获得额外的速度。
- en: The GIL is a solution to the combination of the two preceding problems, being
    one single lock on the entire execution of Python. The GIL must first be acquired
    by any Python instruction that wants to be executed (CPU-bound tasks), preventing
    a race condition from occurring for any reference count.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: GIL是对前面两个问题的解决方案，是Python整个执行过程中的一个单一锁。任何想要执行的Python指令（CPU密集型任务）必须首先获取GIL，以防止任何引用计数的竞争条件发生。
- en: In the early days of the development of the Python language, other solutions
    to the problem described here were also proposed, but the GIL was the most efficient
    and simple to implement, by far. Since the GIL is a lightweight, overarching lock
    for the entire execution of Python, no other lock needs to be implemented to guarantee
    the integrity of other critical sections, keeping the performance overhead of
    Python programs at a minimum.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python语言开发的早期，也提出了其他解决这个问题的方案，但GIL是迄今为止最有效和最简单实现的。由于GIL是Python整个执行过程的轻量级全局锁，因此不需要实现其他锁来保证其他关键部分的完整性，从而将Python程序的性能开销降到最低。
- en: Problems raised by the GIL
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GIL引发的问题
- en: 'Intuitively, with a lock guarding all CPU-bound tasks in Python, a concurrent
    program will not be able to become fully multithreading. The GIL effectively prevents
    CPU-bound tasks from being executed in parallel across multiple threads. To understand
    the effect of this feature of the GIL, let''s consider an example in Python; navigate
    to `Chapter15/example2.py`, as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 直观地说，由于锁保护了Python中的所有CPU绑定任务，因此并发程序将无法完全实现多线程。GIL有效地阻止了CPU绑定任务在多个线程之间并行执行。为了理解GIL这一特性的影响，让我们来看一个Python中的例子；转到`Chapter15/example2.py`。
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, we are comparing the speed of executing a particular program
    in Python sequentially and concurrently, via multithreading. Specifically, we
    have a function named `countdown()` that simulates a heavy CPU-bound task, which
    takes in a number, `n`, and decrements it until it becomes zero or negative. We
    then call `countdown()` on 50,000,000 once, as a sequential program. Finally,
    we call the function twice, each in a separate thread, on 25,000,000, which is
    exactly half of 50,000,000; this is the multithreading version of the program.
    We are also keeping track of the time it takes for Python to run both the sequential
    program and the multithreading program.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们比较了在Python中顺序执行和并发执行（通过多线程）一个特定程序的速度。具体来说，我们有一个名为`countdown()`的函数，模拟了一个重型CPU绑定任务，它接受一个数字`n`，并将其递减直到变为零或负数。然后，我们将`countdown()`在5000万上顺序执行一次。最后，我们将该函数分别在两个线程中调用，每个线程上执行2500万次，这正好是5000万的一半；这是程序的多线程版本。我们还记录了Python运行顺序程序和多线程程序所需的时间。
- en: 'Theoretically, the multithreading version of the program should take half as
    long as the sequential version, as the task is effectively being split in half
    and run in parallel, via the two threads that we created. However, the output
    produced by the program would suggest otherwise. The following output is what
    I obtained through running the script:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，程序的多线程版本应该比顺序版本快一半，因为任务实际上被分成两半并且通过我们创建的两个线程并行运行。然而，程序产生的输出表明了相反的情况。通过运行脚本，我得到了以下输出：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Contrary to what we predicted, the concurrent version of the countdown took
    almost as long as the sequential version; multithreading did not offer any considerable
    speedup for our program. This is a direct effect of having the GIL guarding CPU-bound
    tasks, as multiple threads are not allowed to run simultaneously. Sometimes, a
    multithreading program can take even longer to complete its execution than its
    sequential counterpart, since there is also the overhead of acquiring and releasing
    the GIL.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们预测的相反，倒计时的并发版本几乎与顺序版本一样长；多线程对我们的程序并没有提供任何显著的加速。这是由于GIL保护CPU绑定任务的直接影响，多个线程不被允许同时运行。有时，多线程程序甚至可能比其顺序对应物更长时间才能完成执行，因为还有获取和释放GIL的开销。
- en: This is undoubtedly a significant problem for multithreading, and for concurrent
    programming in Python in general, because as long as a program contains CPU-bound
    instructions, those instructions will, in fact, be sequential in the execution
    of the program. However, instructions that are not CPU-bound happen outside the
    GIL, and thus, they are not affected by the GIL (for example, I/O-bound instructions).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这无疑是多线程和Python中的并发编程的一个重大问题，因为只要程序包含CPU绑定指令，这些指令实际上会在程序的执行中是顺序的。然而，不是CPU绑定的指令发生在GIL之外，因此不受GIL的影响（例如I/O绑定指令）。
- en: The potential removal of the GIL from Python
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Python中潜在删除GIL
- en: You have learned that the GIL sets a significant constraint on our multithreading
    programs in Python, especially those with CPU-bound tasks. For this reason, many
    Python developers have come to view the GIL in a negative light, and the term
    *"the infamous GIL"* has started to become popular; it is not surprising that
    some have even advocated the complete removal of the GIL from the Python language.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经了解到，GIL对我们在Python中编写的多线程程序产生了重大限制，特别是对于那些包含CPU绑定任务的程序。因此，许多Python开发人员开始对GIL持负面看法，术语“臭名昭著的GIL”开始变得流行；毫不奇怪，一些人甚至主张从Python语言中完全删除GIL。
- en: In fact, multiple attempts to remove the GIL have been made by prominent Python
    users. However, the GIL is so deeply implanted in the implementation of the language,
    and the execution of most libraries and packages that are not thread-safe is so
    significantly dependent on the GIL, that the removal of the GIL will actually
    engender bugs as well as backward incompatibility issues for your Python programs.
    A number of Python developers and researchers tried to completely omit the GIL
    from Python execution, and most existing C extensions, which depend heavily on
    the functionalities of the GIL, stopped working.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，一些知名的Python用户曾多次尝试去除GIL。然而，GIL在语言的实现中根深蒂固，而大多数不支持多线程的库和包的执行都严重依赖于GIL，因此去除GIL实际上会引发Python程序的错误以及向后不兼容性问题。一些Python开发人员和研究人员曾试图完全省略Python执行中的GIL，结果大多数现有的C扩展都无法正常工作，因为它们严重依赖于GIL的功能。
- en: 'Now there are other viable solutions to address the problems that we have discussed;
    in other words, the GIL is in every way replaceable. However, most of these solutions
    contain so many complex instructions that they actually decrease the performance
    of sequential and I/O-bound programs, which are not affected by the GIL. So, these
    solutions will slow down single-threaded or multithreaded I/O programs, which
    actually make up a large percentage of existing Python applications. Interestingly,
    the creator of Python, Guido van Rossum, also commented on this topic in his article,
    *It isn''t Easy to Remove the GIL*:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有其他可行的解决方案来解决我们讨论过的问题；换句话说，GIL在任何情况下都是可以替代的。然而，大多数这些解决方案包含如此复杂的指令，以至于它们实际上会降低顺序和I/O受限程序的性能，而这些程序并不受GIL的影响。因此，这些解决方案将减慢单线程或多线程I/O程序的速度，而这些程序实际上占现有Python应用程序的很大比例。有趣的是，Python的创始人Guido
    van Rossum在他的文章《移除GIL并不容易》中也对这个话题发表了评论：
- en: '*"I''d welcome a set of patches into Py3k only if the performance for a single-threaded
    program (and for a multi-threaded but I/O-bound program) does not decrease."*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我只会欢迎一组补丁进入Py3k，只要单线程程序的性能（以及多线程但I/O受限的程序）不会下降。
- en: Unfortunately, this request has not been achieved by any of the proposed alternatives
    to the GIL. The GIL remains an integral part of the Python language.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，没有任何提出的GIL替代方案实现了这一要求。GIL仍然是Python语言的一个重要部分。
- en: How to work with the GIL
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何处理GIL
- en: There are a few ways to deal with the GIL in your Python applications, which
    will be addressed as follows.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以处理你的Python应用程序中的GIL，将在下文中讨论。
- en: Implementing multiprocessing, rather than multithreading
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施多进程，而不是多线程
- en: This is perhaps the most popular and easiest method to circumvent the GIL and
    achieve optimal speed in a concurrent program. As the GIL only prevents multiple
    threads from executing CPU-bound tasks simultaneously, processes executing over
    multiple cores of a system, each having its own memory space, are completely immune
    to the GIL.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是规避GIL并在并发程序中实现最佳速度的最流行和最简单的方法。由于GIL只阻止多个线程同时执行CPU受限任务，因此在系统的多个核心上执行的进程，每个进程都有自己的内存空间，完全不受GIL的影响。
- en: 'Specifically, considering the preceding countdown example, let''s compare the
    performance of that CPU-bound program when it is sequential, multithreading, and
    multiprocessing. Navigate to the `Chapter15/example3.py` file; the first part
    of the program is identical to what we saw earlier, but at the end we add in an
    implementation of a multiprocessing solution for the problem of counting down
    from 50,000,000, using two separate processes:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，考虑前面的倒计时示例，让我们比较一下当它是顺序的、多线程的和多进程的时候，那个CPU受限程序的性能。导航到`Chapter15/example3.py`文件；程序的第一部分与我们之前看到的是相同的，但在最后，我们添加了一个从5000万开始倒计时的多进程解决方案的实现，使用了两个独立的进程：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After running the program, my output was as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序后，我的输出如下：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There is still a minimal difference in speed between the sequential and multithreading
    versions of the program. However, the multiprocessing version was able to cut
    that speed by almost half in its execution; as discussed in earlier chapters;
    since processes are fairly heavy weight, multiprocessing instructions contain
    significant overhead, which is the reason why the speed of the multiprocessing
    program was not exactly half of the sequential program.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 顺序和多线程版本的程序之间仍然存在微小的速度差异。然而，多进程版本能够将执行速度减少了近一半；正如前几章讨论的那样；由于进程相当沉重，多进程指令包含了显著的开销，这就是为什么多进程程序的速度并不完全是顺序程序的一半的原因。
- en: Getting around the GIL with native extensions
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用本地扩展规避GIL
- en: There are Python native extensions that are written in C/C++, and are therefore
    able to avoid the limitations that the GIL sets out; one example is the most popular
    Python scientific computing package, NumPy. Within these extensions, manual releases
    of the GIL can be made, so that the execution can simply bypass the lock. However,
    these releases need to be implemented carefully and accompanied by the reassertion
    of the GIL before the execution goes back to the main Python execution.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些用C/C++编写的Python本地扩展，因此能够避免GIL设置的限制；一个例子是最流行的Python科学计算包NumPy。在这些扩展中，可以进行GIL的手动释放，以便执行可以简单地绕过锁。然而，这些释放需要谨慎实施，并在执行返回到主Python执行之前伴随着GIL的重新断言。
- en: Utilizing a different Python interpreter
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用不同的Python解释器
- en: The GIL only exists in CPython, which is the most common interpreter for the
    language by far, and is built in C. However, there are other interpreters for
    Python, such as Jython (written in Java) and IronPython (written in C++), that
    can be used to avoid the GIL and its affects on multithreading programs. Keep
    in mind that these interpreters are not as widely used as CPython, and some packages
    and libraries might not be compatible with one or both of them.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: GIL只存在于CPython中，这是迄今为止最常用的语言解释器，它是用C构建的。然而，Python还有其他解释器，比如Jython（用Java编写）和IronPython（用C++编写），可以用来避免GIL及其对多线程程序的影响。请记住，这些解释器并不像CPython那样广泛使用，一些包和库可能与其中一个或两个不兼容。
- en: Summary
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: While the GIL in Python offers a simple and intuitive solution to one of the
    more difficult problems in the language, it also raises a number of problems of
    its own, concerning the ability to run multiple threads in a Python program to
    process CPU-bound tasks. Multiple attempts have been made to remove the GIL from
    the main implementation of Python, but none have been able to achieve it while
    maintaining the effectiveness of processing non-CPU-bound tasks, which are affected
    by the GIL.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Python中的GIL为语言中的一个更难的问题提供了一个简单而直观的解决方案，但它也提出了一些自己的问题，涉及在Python程序中运行多个线程以处理CPU受限任务的能力。已经有多次尝试从Python的主要实现中删除GIL，但没有一次能够在保持处理非CPU受限任务的有效性的同时实现它。
- en: In Python, multiple methods are available to provide options for working with
    the GIL. All in all, while it possesses considerable notoriety among the Python
    programming community, the GIL only affects a certain portion of the Python ecosystem,
    and can be seen as a necessary evil that is too essential to remove from the language.
    Python developers should learn to coexist with the GIL, and work around it in
    their concurrent programs.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，有多种方法可供选择，以提供处理GIL的选项。总的来说，虽然它在Python编程社区中声名显赫，但GIL只影响Python生态系统的一部分，并且可以被视为一种必要的恶，因为它对于从语言中移除来说太重要了。Python开发人员应该学会与GIL共存，并在并发程序中绕过它。
- en: In the last four chapters, we discussed some of the most well-known and common
    problems in concurrent programming in Python. In the last section of the book,
    we will be looking at some of the more advanced functionalities of concurrency
    that Python provides. In the next chapter, you will learn about the design of
    lock-free and lock-based concurrent data structures.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后四章中，我们讨论了Python中并发编程中最著名和常见的一些问题。在本书的最后一节中，我们将研究Python提供的一些更高级的并发功能。在下一章中，您将了解无锁和基于锁的并发数据结构的设计。
- en: Questions
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the differences in memory management between Python and C++?
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python和C++之间的内存管理有哪些区别？
- en: What problem does the GIL solve for Python?
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GIL为Python解决了什么问题？
- en: What problem does the GIL create for Python?
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GIL为Python带来了什么问题？
- en: What are some of the approaches to circumventing the GIL in Python programs?
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Python程序中规避GIL的一些方法是什么？
- en: Further reading
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information, you can refer to the following links:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，您可以参考以下链接：
- en: '*Wh**at is the Python Global Interpreter Lock (GIL)?* ([realpython.com/python-gil/](https://realpython.com/python-gil/)),
    Abhinav Ajitsaria'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《Python全局解释器锁（GIL）是什么？》（[realpython.com/python-gil/](https://realpython.com/python-gil/)），Abhinav
    Ajitsaria
- en: '*The Python GIL Visualized* ([dabeaz.blogspot.com/2010/01/python-gil-visualized](http://dabeaz.blogspot.com/2010/01/python-gil-visualized.html)),
    Dave Beazley'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《Python GIL可视化》（[dabeaz.blogspot.com/2010/01/python-gil-visualized](http://dabeaz.blogspot.com/2010/01/python-gil-visualized.html)），Dave
    Beazley
- en: '*Copy Operations in Python* ([pythontic.com/modules/copy/introduction](https://pythontic.com/modules/copy/introduction))'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《Python中的复制操作》（[pythontic.com/modules/copy/introduction](https://pythontic.com/modules/copy/introduction)）
- en: '*It isn''t Easy to Remove the GIL* ([www.artima.com/weblogs/viewpost.jsp?thread=214235](https://www.artima.com/weblogs/viewpost.jsp?thread=214235)),
    Guido Van Rossum'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《移除GIL并不容易》（[www.artima.com/weblogs/viewpost.jsp?thread=214235](https://www.artima.com/weblogs/viewpost.jsp?thread=214235)），Guido
    Van Rossum
- en: '*Parallel Programming with Python*, by Jan Palach, Packt Publishing Ltd, 2014'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《使用Python进行并行编程》，Jan Palach，Packt Publishing Ltd，2014
- en: '*Learning Concurrency in Python: Build highly efficient, robust, and concurrent
    applications*, Elliot Forbes (2017)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《在Python中学习并发：构建高效、健壮和并发的应用程序》，Elliot Forbes（2017）
