- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Python Entities and API
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python实体和API
- en: Blender expands Python by making the **modules** of its **Application Programming
    Interface** (**API**) available inside the app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Blender通过使其**应用程序编程接口**（**API**）的**模块**在应用程序内部可用来扩展Python。
- en: These modules provide **wrappers** that translate Blender’s internal data into
    Python objects. Comprehensive documentation and an API reference are available
    online and can be reached from inside the application. Plus, there are some extra
    features to help programmers in their journey.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块提供了**包装器**，将Blender的内部数据转换为Python对象。完整的文档和API参考可在网上找到，并可以从应用程序内部访问。此外，还有一些额外的功能可以帮助程序员在他们的旅程中。
- en: Much like the syntax highlight that we have met in [*Chapter 1*](B18375_01.xhtml#_idTextAnchor014),
    some features for developers are common-place in the programming world. Others,
    such as property tooltips and variables display, are specific to Blender.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在[*第一章*](B18375_01.xhtml#_idTextAnchor014)中遇到的语法高亮一样，一些针对开发者的特性在编程世界中很常见。其他特性，如属性工具提示和变量显示，是Blender特有的。
- en: In this chapter, we are going to look at some **snippets**, that is, chunks
    of code, that will help you become confident with the architecture of Blender’s
    API.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将查看一些**代码片段**，即代码块，这将帮助您对Blender的API架构有信心。
- en: Generally, the API is designed to be very friendly to programmers that are already
    experienced with Python, only deviating a few times from the standards.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，API的设计对已经熟悉Python的程序员非常友好，仅在少数情况下偏离标准。
- en: By the end of this chapter, you will be able to inspect Blender objects from
    the Python console and change their properties, use and expand Blender collections,
    and check the current state of the user interaction.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够从Python控制台检查Blender对象并更改其属性，使用和扩展Blender收藏夹，并检查用户交互的当前状态。
- en: 'In this chapter, we are going to become familiar with the following topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将熟悉以下主题：
- en: Features of Python
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python的特性
- en: Blender modules and their structure
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blender模块及其结构
- en: Data and Context Access
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据和上下文访问
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Only Blender is needed to follow along with this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 只需要Blender就可以跟随本章的内容。
- en: Useful features of Python
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python的有用特性
- en: We already met the *Python* elements of the **Scripting** workspace in [*Chapter
    1*](B18375_01.xhtml#_idTextAnchor014). Now we are going to look at some useful
    features that can help us get the most out of them. When it comes to programming,
    automation can speed up the search for attributes and terms. That can happen both
    in the console, through conventional methods such as **autocompletion**, or in
    the interface, via shortcuts that display the Python address of a graphic element.
    Some of these features are already available when Blender starts, while others
    are left for the users to enable.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第一章*](B18375_01.xhtml#_idTextAnchor014)中已经遇到了**脚本**工作区的*Python*元素。现在我们将探讨一些有用的特性，这些特性可以帮助我们充分利用它们。在编程方面，自动化可以加快搜索属性和术语的速度。这可以在控制台通过传统方法如**自动完成**实现，或者在界面中通过显示图形元素Python地址的快捷键实现。其中一些功能在Blender启动时就已经可用，而其他功能则留给用户启用。
- en: Options for developers
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发者选项
- en: 'Developer features are disabled by default. They can be enabled in the **Preferences**
    dialog from the **Edit** menu in the top bar of Blender. We need to select the
    **Interface** tab on the left and look at the first panel: **Display**. Programmers
    usually enable the **Developer Extras** and **Python** **Tooltips** options.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者功能默认禁用。它们可以在Blender顶部栏的**编辑**菜单中的**首选项**对话框中启用。我们需要选择左侧的**界面**选项卡并查看第一个面板：**显示**。程序员通常启用**开发者额外功能**和**Python**
    **工具提示**选项。
- en: Developer Extras
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发者额外功能
- en: '**Developer Extras** adds a right-click menu entry that can display the Python
    source code of the UI in the *Text Editor*. It also shows the geometry index of
    mesh components when the user switches to **Edit Mode**. Among other things, it
    allows the **search bar** to execute operators that cannot be accessed via the
    UI.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发者额外功能**添加了一个右键菜单项，可以在*文本编辑器*中显示UI的Python源代码。当用户切换到**编辑模式**时，它还会显示网格组件的几何索引。此外，它还允许**搜索栏**执行无法通过UI访问的操作员。'
- en: Python tooltips
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python工具提示
- en: Hovering the mouse cursor over an attribute displays a tooltip with a small
    description. If Python tooltips are enabled, information about how to invoke that
    attribute in scripts is displayed as well.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将鼠标光标悬停在属性上会显示一个包含简要描述的工具提示。如果启用了Python工具提示，还会显示如何在脚本中调用该属性的信息。
- en: '![Figure 2.1: Blender’s display preferences](img/Figure_2.1_B18375.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1：Blender的显示首选项](img/Figure_2.1_B18375.jpg)'
- en: 'Figure 2.1: Blender’s display preferences'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1：Blender的显示首选项
- en: 'For instance, in the 3D Viewport, we can press the *N* key to display the **transform
    channels** on the right-hand side of the screen. Leaving the mouse pointer over
    a coordinate, such as **Location:** **X**, for a while will show two additional
    lines in the description:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在3D视图中，我们可以按*N*键来显示屏幕右侧的**变换通道**。将鼠标指针停留在坐标上，例如**位置：** **X**，一段时间将显示描述中的两条附加行：
- en: '![Figure 2.2: Python tooltip of an object location](img/Figure_2.2_B18375.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图2.2：对象位置的Python提示](img/Figure_2.2_B18375.jpg)'
- en: 'Figure 2.2: Python tooltip of an object location'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2：对象位置的Python提示
- en: 'The Python tooltip consists of two lines:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Python提示包含两行：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first line provides the Python name of the attribute; in this case, `location`
    is the `Object` position in space.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行提供了属性的Python名称；在这种情况下，`location`是空间中的`Object`位置。
- en: 'The second line is more specific: the location of this object (`''Cube''`)
    can be reached by typing that line in the console. This is usually referred to
    as the **full data path** of the property or, on some occasions, the **RNA** path.
    The latter term comes from a playful analogy to genetics: if Blender’s internal
    code makes its *DNA*, its *Python* access can be seen as the *RNA* of the application.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行更具体：可以通过在控制台中输入该行来访问此对象（`'Cube'`）的位置。这通常被称为属性的**完整数据路径**，在某些情况下，也称为**RNA**路径。后者来自一个有趣的类比于遗传学：如果Blender的内部代码是其*DNA*，那么其*Python*访问可以看作是应用的*RNA*。
- en: An object’s location is a simple case, other attributes can be more complex.
    Anyway, we can copy data paths to the clipboard following the steps in the next
    subsection.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一个对象的定位是一个简单的情况，其他属性可能更复杂。无论如何，我们可以按照下一小节中的步骤将数据路径复制到剪贴板。
- en: Copying the data path
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复制数据路径
- en: 'Right-clicking on a property opens a *context* menu. Some entries, such as
    **Insert Keyframes** and **Reset to Default Value**, are useful for animation.
    In this section, we will focus on the programming entries, **Copy Data Path**
    and **Copy Full** **Data Path**:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在属性上右键单击将打开一个*上下文*菜单。一些条目，例如**插入关键帧**和**重置为默认值**，对动画很有用。在本节中，我们将重点关注编程条目，**复制数据路径**和**复制完整**
    **数据路径**：
- en: Select an object in the 3D Viewport.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在3D视图中选择一个对象。
- en: If no transform properties are displayed on the right, press *N* to summon the
    **Transform** sidebar.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果右侧没有显示变换属性，请按*N*键召唤**变换**侧边栏。
- en: From the **Item** tab, right-click on the first location channel (**X**), then
    click **Copy Full** **Data Path**.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**选项卡，右键单击第一个位置通道（**X**），然后点击**复制完整** **数据路径**。
- en: '![Figure 2.3: Right-click menu for location X](img/Figure_2.3_B18375.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图2.3：位置X的右键菜单](img/Figure_2.3_B18375.jpg)'
- en: 'Figure 2.3: Right-click menu for location X'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3：位置X的右键菜单
- en: Go to the Python console, press *Ctrl* + *V* to paste, and then press *Enter*.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往Python控制台，按*Ctrl* + *V*粘贴，然后按*Enter*。
- en: 'The console will display the location value for the *X* coordinate:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台将显示*X*坐标的位置值：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The full data path allows to access an attribute and, unless it is a read-only
    property, change its value. We can see how the copied line ends with an index,
    which is due to `location` being a three-dimensional attribute – each index refers
    to an axis of the space:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 完整数据路径允许访问一个属性，除非它是只读属性，否则可以更改其值。我们可以看到复制的行以一个索引结束，这是由于`location`是一个三维属性——每个索引都指空间的一个轴：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Data paths can be convoluted sometimes, but in the next section, we are going
    to look at some console tools that help a lot when looking for the right attribute.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 数据路径有时可能很复杂，但在下一节中，我们将查看一些控制台工具，这些工具在寻找正确的属性时非常有帮助。
- en: Python console’s utilities
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python控制台的实用工具
- en: The *Python console* offers some helpful utilities. Some of them, such as text
    completion and history, are common among programmers’ tools. Others, such as the
    3D representation of variables, are typical of Blender. This section provides
    an overview of how the Python console is used in day-to-day programming.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python控制台*提供了一些有用的工具。其中一些，如文本补全和历史记录，在程序员工具中很常见。其他一些，如变量的3D表示，是Blender特有的。本节概述了Python控制台在日常编程中的应用。'
- en: Autocompletion
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动补全
- en: 'Pressing the *Tab* button while typing in the console suggests a few possible
    ways to complete the line. On top of that, if the current statement is associated
    with internal documentation (`print()`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中输入时按下*Tab*按钮会建议几种完成该行的可能方式。除此之外，如果当前语句与内部文档相关联（例如`print()`：
- en: In Blender, select **Scripting Workspace** in the tabs at the top of the screen,
    as we learned in the *The Scripting Workspace* section, in *First steps with Python*,
    in [*Chapter 1*](B18375_01.xhtml#_idTextAnchor014).
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Blender中，在屏幕顶部的选项卡中选择**脚本工作区**，正如我们在*脚本工作区*部分、*Python的第一步*、[*第1章*](B18375_01.xhtml#_idTextAnchor014)中学到的。
- en: In the Python console, type only `prin`, then press *Tab*.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Python控制台中，只输入`prin`，然后按*Tab*。
- en: The console fills in the missing letters and displays `print(`, with an open
    bracket, and its documentation. Then, it lets the programmer finish the line.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台填写缺失的字母，并显示`print(`，一个开括号及其文档。然后，它让程序员完成该行。
- en: '![Figure 2.4: Autocompletion in the Python console](img/Figure_2.4_B18375.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图2.4：Python控制台中的自动完成](img/Figure_2.4_B18375.jpg)'
- en: 'Figure 2.4: Autocompletion in the Python console'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4：Python控制台中的自动完成
- en: History
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 历史
- en: 'Previous commands executed in Blender’s Python console can be retrieved using
    the up/down arrow keys. This can be tested with any code. Here is an example to
    run in the Python console:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用上下箭头键检索Blender Python控制台中之前执行的命令。这可以通过任何代码进行测试。以下是在Python控制台中运行的示例：
- en: Type `print('Line One')`, then press *Enter*.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`print('Line One')`，然后按*Enter*。
- en: 'Press the *↑* key. The current text will change to the following:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*↑*键。当前文本将更改为以下内容：
- en: '[PRE3]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Delete the last letters and change the line to `print('Line Two')`, then press
    *Enter*.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除最后几个字母，将行更改为`print('Line Two')`，然后按*Enter*。
- en: Press *↑* twice to display `>>> print('Line` `One')` again.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按两次*↑*键以再次显示`>>> print('Line` `One')`。
- en: Alternate between pressing *↓* and *↑* to switch between the two commands.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*↓*和*↑*之间交替按动以在两个命令之间切换。
- en: Multiline input
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多行输入
- en: Snippets consisting of two or more lines can be pasted to the console and executed
    by pressing *Enter* twice.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由两行或更多行组成的代码片段可以粘贴到控制台，并通过按两次*Enter*键执行。
- en: 'Since blank lines mark the end of a snippet, they can make valid code fail
    when present inside indented blocks. Let’s look at a simple example: a condition
    containing two `print` statements separated by a line:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于空白行标记了代码片段的结束，它们可能会使存在于缩进块内的有效代码失败。让我们看看一个简单的例子：一个包含两个`print`语句的条件，这两个语句由一行分隔：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This code works in the *Text Editor* but fails in the *Python console*. Here
    is the output:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码在*文本编辑器*中有效，但在*Python控制台*中失败。以下是输出：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After the first two lines are executed, the indentation of the second `print()`
    is considered wrong.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前两行后，第二行`print()`的缩进被认为是错误的。
- en: 'Blank lines should be replaced with comments (`#`) in every snippet meant for
    the console. The following code will work:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 每个针对控制台设计的代码片段中的空白行都应该用注释（`#`）替换。以下代码将有效：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Displaying 3D variables in the 3D Viewport
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在3D视图中显示3D变量
- en: Variables that represent a 3D point or transformation can be displayed in the
    three-dimensional space. This is made possible by the **Math Vis (Console)** add-on.
    **Add-ons** are Python extensions that can be enabled at need. We are going to
    write our own add-ons in this book. For now, we will see how to enable an add-on
    that ships with Blender.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 表示3D点或变换的变量可以在三维空间中显示。这是通过**Math Vis (Console)**插件实现的。**插件**是Python扩展，可以在需要时启用。本书中我们将编写自己的插件。目前，我们将看看如何启用随Blender一起提供的插件。
- en: Enabling the Math Vis (Console) add-on
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 启用Math Vis (Console)插件
- en: 'Add-ons can be enabled in the preferences:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 插件可以在首选项中启用：
- en: From the top-bar menu, select **Edit |** **Preferences**.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶栏菜单中选择**编辑 |** **首选项**。
- en: Choose the **Add-ons** tab in the left column.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧列中选择**插件**选项卡。
- en: Type `Math Vis` in the search filter marked with the magnifier icon.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在带有放大镜图标标记的搜索过滤器中输入`Math Vis`。
- en: Click the checkbox to the left of the add-on name.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击插件名称左侧的复选框。
- en: Creating 3D variables
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建3D变量
- en: 'Blender provides additional Python types for 3D entities. For instance, coordinates
    can be stored using a `Vector` type. We can store a vector in a variable by typing:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Blender为3D实体提供了额外的Python类型。例如，可以使用`Vector`类型存储坐标。我们可以通过输入以下内容将向量存储在变量中：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since we have enabled the *Math Vis (Console)* add-on, a pink dot followed by
    the variable name will appear in the 3D Viewport.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经启用了*Math Vis (Console)*插件，3D视图中将出现一个粉红色的点，后面跟着变量名。
- en: '![Figure 2.5: Vector coordinates [1.0, 2.0, 3.0], as displayed in the 3D Viewport](img/Figure_2._05_B18375.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5：向量坐标 [1.0, 2.0, 3.0]，如图 3D 视口所示](img/Figure_2._05_B18375.jpg)'
- en: 'Figure 2.5: Vector coordinates [1.0, 2.0, 3.0], as displayed in the 3D Viewport'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5：向量坐标 [1.0, 2.0, 3.0]，如图 3D 视口所示
- en: 'Variables are visualized only when the console is visible, as long as they
    exist. The drawing stops once they are deleted with the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 变量只有在控制台可见时才会可视化，只要它们存在。一旦它们被删除，绘图就会停止，如下所示：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `del` statement is a standard Python command. We should keep in mind that
    it deletes Python variables, not Blender objects.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`del` 语句是标准的 Python 命令。我们应该记住，它删除的是 Python 变量，而不是 Blender 对象。'
- en: 'If we want to delete objects in Blender, we can use Blender’s `delete()` command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在 Blender 中删除对象，我们可以使用 Blender 的 `delete()` 命令：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`ops` in the preceding command stands for `bpy.ops.object.delete()`, this means
    pressing the *X* key or selecting the **Delete** action from the **Object** menu.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令中的 `ops` 代表 `bpy.ops.object.delete()`，这意味着按 *X* 键或从 **对象** 菜单中选择 **删除**
    操作。
- en: 'Types with a geometrical meaning, such as `Vector`, `Matrix`, and `Euler`,
    are mathematical constructs and belong to the `mathutils` module. This module
    is imported into the *console* automatically. There is no need to import it again
    in the console. If we were to use it in a script, we would have to import it from
    the module:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 具有几何意义的类型，如 `Vector`、`Matrix` 和 `Euler`，是数学构造，属于 `mathutils` 模块。此模块会自动导入到 *控制台*
    中。在控制台中不需要再次导入它。如果我们想在脚本中使用它，我们必须从模块中导入：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We are going to explore `mathutils` in the next chapters, when dealing with
    3D objects and elements. In the next section, we’ll get familiar with how Blender
    objects translate into Python.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中探索 `mathutils`，当处理 3D 对象和元素时。在下一节中，我们将熟悉 Blender 对象如何转换为 Python。
- en: Accessing Blender modules
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问 Blender 模块
- en: Blender’s additional modules are available throughout the application and can
    be used via the standard `import` statement. They are available in the Python
    console, the Text Editor, and generally in the scripts that are installed in the
    Blender system and user paths.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 的附加模块在整个应用程序中可用，可以通过标准 `import` 语句使用。它们在 Python 控制台、文本编辑器和通常在 Blender
    系统和用户路径中安装的脚本中可用。
- en: Some modules are very specific; for instance, the `freestyle` module handles
    the settings of the freestyle stylized rendering and cannot be used for any other
    purpose. Others, such as `mathutils`, come into play whenever numbers are concerned.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一些模块非常特定；例如，`freestyle` 模块处理自由风格渲染的设置，不能用于其他目的。其他模块，如 `mathutils`，在涉及数字时都会发挥作用。
- en: Finally, the `bpy` module and its submodules play a bigger role in Blender scripts,
    as they grant access to objects and data.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`bpy` 模块及其子模块在 Blender 脚本中扮演着更重要的角色，因为它们提供了访问对象和数据的能力。
- en: In this section, we will have a closer look at `bpy`, how it is already present
    in the console, and how we can use it in our scripts. We will also learn where
    to find more information about the API and its elements.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更详细地了解 `bpy`，它在控制台中已经存在，以及我们如何在脚本中使用它。我们还将学习如何找到有关 API 及其元素更多信息。
- en: The bpy module
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: bpy 模块
- en: 'In [*Chapter 1*](B18375_01.xhtml#_idTextAnchor014), we copied the lines from
    the console using **Console**->**Copy** from the Python console editor and pasted
    them into a text block. In doing so, we found a few extra lines at the beginning:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第一章*](B18375_01.xhtml#_idTextAnchor014) 中，我们使用 Python 控制台编辑器的 **控制台**->**复制**
    从控制台复制了行，并将它们粘贴到一个文本块中。在这个过程中，我们在开头发现了一些额外的行：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The first line imports `bpy`, the main module of the programming interface.
    Lines two and three import `data` and `context` and assign them, respectively,
    the `D` and `C` letters as convenience shortcuts. This is pointed out in the initial
    screen:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行导入 `bpy`，这是编程接口的主模块。第二行和第三行导入 `data` 和 `context`，并将它们分别分配给 `D` 和 `C` 字母作为便利快捷方式。这最初在屏幕上指出：
- en: '![Figure 2.6: Python console’s convenience variables](img/Figure_2.6_B18375.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6：Python 控制台的便利变量](img/Figure_2.6_B18375.jpg)'
- en: 'Figure 2.6: Python console’s convenience variables'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6：Python 控制台的便利变量
- en: '`data` represents the storage of Blender objects and `context` is the current
    state of the user interaction, such as the selection or the current mode (**Object**,
    **Edit**, **Pose**, etc.).'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`data` 表示 Blender 对象的存储，而 `context` 则是用户交互的当前状态，例如选择或当前模式（**对象**、**编辑**、**姿态**等）。'
- en: Because of their nature, `context` and `data` are always present in Blender
    scripts. The autocompletion gives a glimpse of the other modules. If we type `bpy.`
    and press *Tab*, we’ll get a list of them.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其本质，`context` 和 `data` 总是存在于 Blender 脚本中。自动补全显示了其他模块的概览。如果我们输入 `bpy.` 并按 *Tab*
    键，我们将获得它们的列表。
- en: '![Figure 2.7: bpy’s submodules](img/Figure_2.7_B18375.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7：bpy 的子模块](img/Figure_2.7_B18375.jpg)'
- en: 'Figure 2.7: bpy’s submodules'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7：bpy 的子模块
- en: Each attribute of `bpy` covers a specific aspect of Blender. For instance, `bpy.app`
    contains the properties of the software (executable and version) and `bpy.ops`
    contains the operators, that is, functions that can be invoked in the interface.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`bpy` 的每个属性都涵盖了 Blender 的一个特定方面。例如，`bpy.app` 包含软件的属性（可执行文件和版本），而 `bpy.ops`
    包含操作员，即可以在界面中调用的函数。'
- en: '`bpy` and the other Blender modules contain a multitude of classes, methods,
    and utilities. These entities are documented in the *Python API Reference*, which
    is available online and can be downloaded if needed.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`bpy` 和其他 Blender 模块包含大量的类、方法和实用工具。这些实体在 *Python API 参考文档* 中进行了文档化，该文档可在网上找到，如有需要可以下载。'
- en: API documentation
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 文档
- en: The reference website can be reached via **Help** | **Python API Reference**
    from the top menu bar.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 **帮助** | **Python API 参考文档** 从顶部菜单栏访问参考网站。
- en: '![Figure 2.8: The link to the Python API Reference](img/Figure_2.8_B18375.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8：Python API 参考链接](img/Figure_2.8_B18375.jpg)'
- en: 'Figure 2.8: The link to the Python API Reference'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8：Python API 参考链接
- en: The *Python Help* for the current version will open in the web browser. The
    documentation is generated from the docstrings using software called `help()`
    function.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当前版本的 *Python 帮助* 将在网页浏览器中打开。该文档是通过使用名为 `help()` 函数的软件从 docstrings 生成的。
- en: '![Figure 2.9: Comparison between the help() function and online help for the
    Euler class](img/Figure_2.9_B18375.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9：help() 函数与 Euler 类在线帮助的比较](img/Figure_2.9_B18375.jpg)'
- en: 'Figure 2.9: Comparison between the help() function and online help for the
    Euler class'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9：help() 函数与 Euler 类在线帮助的比较
- en: The online help has the advantage of a search bar and doesn’t take space from
    our Blender session. It contains an index of the available modules and their content.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在线帮助具有搜索栏的优势，并且不会占用我们的 Blender 会话空间。它包含可用模块及其内容的索引。
- en: An API reference is very useful to navigate the various modules and the attributes
    of `bpy`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: API 参考非常有助于导航各种模块和 `bpy` 的属性。
- en: In this chapter, we’ll focus on `bpy.data` and `bpy.context`, leaving the specific
    functionalities of the other modules to the next chapters.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注 `bpy.data` 和 `bpy.context`，将其他模块的具体功能留到下一章介绍。
- en: Accessing Blender data
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问 Blender 数据
- en: All the entities created in the current session are available as part of `bpy.data`.
    They are grouped in categories that follow the `bpy.data.armatures`, `bpy.data.curves`,
    and so on. Each category is a `bpy_collection`, a Blender type that contains more
    elements. Their content can be accessed with indices, like in a Python `list`,
    or with keywords, like in dictionaries.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当前会话中创建的所有实体都作为 `bpy.data` 的一部分可用。它们被分组在遵循 `bpy.data.armatures`、`bpy.data.curves`
    等的类别中。每个类别都是一个 `bpy_collection`，它是 Blender 类型，包含更多元素。它们的内容可以通过索引（如 Python `list`
    中的索引）或通过关键字（如字典中的关键字）访问。
- en: Objects access
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象访问
- en: 'We can use Python to access the objects of a scene. For example, we can query
    the content of Blender’s default scene, which contains a **Cube**, a **Camera**
    and a **Light**:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Python 访问场景中的对象。例如，我们可以查询 Blender 默认场景的内容，该场景包含一个 **立方体**、一个 **相机** 和一个
    **灯光**：
- en: Open or restart Blender and select **Scripting Workspace** in the workspace
    tabs at the top of the screen.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开或重启 Blender，然后在屏幕顶部的标签页中选择 **脚本工作区**。
- en: '![Figure 2.10: The workspace tabs](img/Figure_2.10_B18375.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10：工作区标签页](img/Figure_2.10_B18375.jpg)'
- en: 'Figure 2.10: The workspace tabs'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10：工作区标签页
- en: 'Type `len(bpy.data.objects)` and press *Enter*:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `len(bpy.data.objects)` 并按 *Enter* 键：
- en: '[PRE12]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the Python console, type `bpy.data.objects`, then press *Tab*.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Python 控制台中，输入 `bpy.data.objects`，然后按 *Tab* 键。
- en: '![Figure 2.11: Blender’s default objects](img/Figure_2.11_B18375.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.11：Blender 的默认对象](img/Figure_2.11_B18375.jpg)'
- en: 'Figure 2.11: Blender’s default objects'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11：Blender 的默认对象
- en: It might be confusing at first, since objects of different types all belong
    to `bpy.data.objects`, rather than to `bpy.data.cameras`, `bpy.data.meshes`, and
    `bpy.data.lights`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时可能会感到困惑，因为不同类型的对象都属于 `bpy.data.objects`，而不是 `bpy.data.cameras`、`bpy.data.meshes`
    和 `bpy.data.lights`。
- en: In fact, everything that can be placed and displayed in the 3D Viewport is of
    the `bpy.data.objects` type. An **object** is a generic container in which any
    kind of data, or **datablock**, can be stored. The *object*/*datablock* system
    is a tenet of Blender. We are going to get a better grasp of it in the next chapters.
    For now, we will focus on object-level access.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在3D视图中可以放置和显示的任何内容都是`bpy.data.objects`类型。**对象**是一个通用的容器，可以存储任何类型的数据，或**数据块**。*对象*/*数据块*系统是Blender的一个原则。我们将在下一章中更好地了解它。现在，我们将专注于对象级别的访问。
- en: List-like access
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 列表式访问
- en: 'Like Python lists, individual elements of `bpy_collection` can be accessed
    by appending an index number surrounded by brackets, as in the following example:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 与Python列表一样，`bpy_collection`的各个元素可以通过在括号中添加索引数字来访问，如下例所示：
- en: '[PRE14]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If we know the name of an object we are looking for, we can get it through string
    keywords rather than indices.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们知道我们正在寻找的对象的名称，我们可以通过字符串关键字而不是索引来获取它。
- en: Dict-like access
  id: totrans-140
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字典式访问
- en: 'Besides using their ordinal index, we can access the elements of `bpy.data.objects`
    using their names as keywords, as we do with Python dictionaries:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用它们的序号索引外，我们还可以使用它们的名称作为关键字来访问`bpy.data.objects`的元素，就像我们在Python字典中做的那样：
- en: '[PRE15]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Iterating through collections
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 遍历集合
- en: To execute an expression on all the objects of an aggregate type, we need to
    *iterate* through the collection. **Iteration** describes the action of scrolling
    through the elements. By iterating using loop statements, we can carry the same
    operation on many objects.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要对一个聚合类型中的所有对象执行表达式，我们需要遍历这个集合。**遍历**描述了滚动元素的动作。通过使用循环语句遍历，我们可以在许多对象上执行相同的操作。
- en: List-like looping
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 列表式循环
- en: 'The typical `for element in list` loop works with `bpy_collection`. The following
    snippets print out a list of the existing objects:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的`for element in list`循环与`bpy_collection`一起工作。以下片段打印出现有对象列表：
- en: '[PRE16]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Alternatively, we use the following if we need their collection index as well:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们还需要它们的集合索引，我们可以使用以下方法：
- en: '[PRE17]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Looking at the output, we can see that the elements of `bpy.data.objects` are
    ordered alphabetically:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 查看输出结果，我们可以看到`bpy.data.objects`的元素是按字母顺序排序的：
- en: '[PRE18]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: That implies that renaming the objects changes the order in which they are listed.
    It can be an issue if we rename an element while we are still iterating through
    its collection.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着重命名对象会改变它们在列表中的顺序。如果我们迭代集合时重命名元素，这可能会成为一个问题。
- en: 'For instance, this snippet adds the letter`''z''` in front of the name of the
    first object (**Camera**). That changes its position in the *Outliner* from first
    to last displayed object:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这个片段在第一个对象（**相机**）的名称前添加了字母`'z'`。这改变了它在*大纲视图*中的位置，从第一个显示的对象变为最后一个显示的对象：
- en: '[PRE19]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![Figure 2.12: Before and after renaming – the order of the objects has changed](img/Figure_2._12_B18375.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图2.12：重命名前后的对比 – 对象的顺序已改变](img/Figure_2._12_B18375.jpg)'
- en: 'Figure 2.12: Before and after renaming – the order of the objects has changed'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.12：重命名前后的对比 – 对象的顺序已改变
- en: 'We will experience a reordering issue if we execute the same operation inside
    a loop:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在循环内部执行相同的操作，我们将遇到重新排序的问题：
- en: '[PRE20]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It would be reasonable to end up with `'z'` is repeated for a long span.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`'z'`重复一段很长时间，这是合理的。
- en: '![Figure 2.13: Renaming added way too many “z”s](img/Figure_2._13_B18375.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图2.13：重命名添加了过多的“z”](img/Figure_2._13_B18375.jpg)'
- en: 'Figure 2.13: Renaming added way too many “z”s'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13：重命名添加了过多的“z”
- en: This is a bug in which neither our code nor the application does anything inherently
    wrong.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个错误，我们的代码和应用程序本身并没有做任何本质上的错误。
- en: To understand why that happens, we need to break it down into individual steps.
    Blender renames the first, second, and third objects, then it should stop. But
    since they were renamed, `"Light"` is renamed and put last, so after that, Blender
    proceeds to rename `"zCamera"` to `"zzCamera"`, and the process keeps going.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解为什么会这样，我们需要将其分解成单个步骤。Blender重命名了第一个、第二个和第三个对象，然后它应该停止。但由于它们已经被重命名，"Light"被重命名并放在最后，所以之后，Blender继续将"zCamera"重命名为"zzCamera"，这个过程一直持续下去。
- en: That lasts until the names become too long to be renamed.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这会持续到名称变得过长而无法重命名为止。
- en: Bugs like this can cause software halts and be very hard to find. Whenever our
    script renames the content of a collection, we must make sure that reordering
    is not going to be an issue. We are going to look at some possible workarounds.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的错误可能导致软件停止运行，并且很难找到。每次我们的脚本重命名集合的内容时，我们必须确保重新排序不会成为问题。我们将探讨一些可能的解决方案。
- en: Avoiding reordering via list conversion
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 通过列表转换避免重新排序
- en: The first and easiest way to avoid re-iteration is to convert `bpy_collection`
    into a Python list. Press *Ctrl* + *Z* to undo the renaming.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 避免重复迭代的第一个也是最简单的方法是将`bpy_collection`转换为Python列表。按*Ctrl* + *Z*撤销重命名。
- en: 'Now we will use a slightly different line that converts the collection into
    a pure Python list, via the `list()` method:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用一条略微不同的命令，通过`list()`方法将集合转换为纯Python列表：
- en: '[PRE21]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![Figure 2.14: The objects have been renamed properly](img/Figure_2._14_B18375.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图2.14：对象已被正确重命名](img/Figure_2._14_B18375.jpg)'
- en: 'Figure 2.14: The objects have been renamed properly'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14：对象已被正确重命名
- en: In the next subsection, we’ll see that dictionary methods are also supported.
    They are, among other things, immune to reordering.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一小节中，我们将看到字典方法也得到了支持。它们在许多方面都是不可重新排序的。
- en: Dict-like looping
  id: totrans-173
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类似字典的循环
- en: 'Like in Python dictionaries, the `keys()` method returns all the names present
    in a collection:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Python字典一样，`keys()`方法返回集合中所有存在的名称：
- en: '[PRE22]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Alternatively, we can obtain a list of the objects using the `values()` method:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用`values()`方法获取对象的列表：
- en: '[PRE23]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Lastly, we can iterate both using `items()`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用`items()`迭代：
- en: '[PRE24]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Creating new objects
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新对象
- en: Blender classes purposely lack a `new()` method of their `bpy_collection`. For
    instance, 3D objects are created using `bpy.data.objects.new()`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Blender类故意缺少`bpy_collection`的`new()`方法。例如，3D对象是通过`bpy.data.objects.new()`创建的。
- en: The new() method
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new()方法
- en: 'Adding an object to the scene takes one step with the Blender interface. Doing
    it in Python requires some extra work: the `new()` command stores a new object
    in the memory, but then we need to add it to our scene explicitly.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Blender界面将对象添加到场景中只需一步。在Python中完成此操作需要一些额外的工作：`new()`命令将新对象存储在内存中，但然后我们需要显式地将它添加到我们的场景中。
- en: 'Typing `bpy.data.objects.new` and pressing *Tab* in the Python console displays
    its documentation:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python控制台中输入`bpy.data.objects.new`并按*Tab*键将显示其文档：
- en: '[PRE25]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The new function requires two parameters: the name that we want to give to
    our object and the *datablock* that it’s going to contain. If we don’t have any
    *datablocks* yet, we can create an `None` type to the argument `object_data`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 新函数需要两个参数：我们想要给对象起的名字以及它将要包含的*datablock*。如果我们还没有任何*datablocks*，我们可以为`object_data`参数创建一个`None`类型：
- en: '[PRE26]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `print()` line will confirm that the object has been created. It doesn’t
    show up in the 3D Viewport, but we can check that `bpy.data.objects`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`print()`行将确认对象已被创建。它不会在3D视图中显示，但我们可以检查`bpy.data.objects`。'
- en: '![Figure 2.15: The new Empty shows up in the Python collection](img/Figure_2.15_B18375.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图2.15：新的空对象出现在Python集合中](img/Figure_2.15_B18375.jpg)'
- en: 'Figure 2.15: The new Empty shows up in the Python collection'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.15：新的空对象出现在Python集合中
- en: This object is not part of a 3D scene yet. In order to be part of a scene, objects
    must belong to a **collection**.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象还不是3D场景的一部分。为了成为场景的一部分，对象必须属于一个**集合**。
- en: Object collections
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象集合
- en: 'The term *collection* carries some ambiguity, as we have referred to `bpy_collection`
    as part of data access. `bpy_collection` types, such as `bpy.data.objects`, are
    two distinct concepts:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 术语*集合*有些含糊不清，因为我们把`bpy_collection`称为数据访问的一部分。`bpy_collection`类型，如`bpy.data.objects`，是两个不同的概念：
- en: '**Scene collections** are groups of objects displayed as folders in the **Outliner**.
    They are used to organize 3D objects in the scene.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景集合**是作为文件夹显示在**大纲视图中**的对象组。它们用于在场景中组织3D对象。'
- en: '`bpy_collection` without being part of any scene.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bpy_collection`不是场景的一部分。'
- en: All the scene collections can be accessed in Python using `bpy.data.collections`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 所有场景集合都可以使用`bpy.data.collections`在Python中访问。
- en: 'We are one step away from adding our object to the scene: we need to add `my_empty`
    to a scene collection, using the collection method `link`.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在只需一步就可以将我们的对象添加到场景中：我们需要将`my_empty`添加到场景集合中，使用集合方法`link`。
- en: Linking to the scene
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将对象链接到场景
- en: 'There is only one collection in the default scene, so if we type `bpy.data.collections`
    and press *Tab*, we get it from the autocompletion:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 默认场景中只有一个集合，因此如果我们输入`bpy.data.collections`并按*Tab*键，我们可以通过自动完成获取它：
- en: '[PRE27]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The default collection is named `Collection.objects` attribute. The Python
    line for linking `my_empty` is:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 默认集合命名为`Collection.objects`属性。将`my_empty`链接的Python行是：
- en: '[PRE28]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**My Empty** is now part of the scene and shows up in the outliner.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**我的空对象**现在已成为场景的一部分，并在大纲视图中显示出来。'
- en: '![Figure 2.16: Our Empty sitting along with the other objects](img/Figure_2._16_B18375.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.16：我们的空对象与其他对象一起](img/Figure_2._16_B18375.jpg)'
- en: 'Figure 2.16: Our Empty sitting along with the other objects'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16：我们的空对象与其他对象一起
- en: Removing elements
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除元素
- en: 'Just like we can create new elements with `new()`, we can use the method `remove()`
    from `bpy.data.objects` to remove them. This line removes `my_empty` from blender:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们可以使用 `new()` 创建新元素一样，我们可以使用 `bpy.data.objects` 的 `remove()` 方法来删除它们。这一行将
    `my_empty` 从 Blender 中移除：
- en: '[PRE29]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Collections that link existing objects via `link()`, such as `Collection.objects`,
    have an `unlink()` method for removal:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `link()` 链接现有对象的集合，如 `Collection.objects`，有一个 `unlink()` 方法用于删除：
- en: '[PRE30]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In that case, `bpy.data.objects`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在那种情况下，`bpy.data.objects`。
- en: In this section, we have accessed the Blender objects via Python using `bpy.data`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们通过 Python 使用 `bpy.data` 访问了 Blender 对象。
- en: How would we fetch the current scene if there is more than just one, or the
    current object and active selection?
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有多个场景，或者当前对象和活动选择，我们如何获取当前场景？
- en: We will see how states of user interaction can be tracked in the `bpy.context`
    module.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何在 `bpy.context` 模块中跟踪用户交互的状态。
- en: Understanding the user context
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解用户上下文
- en: The current state of interaction, the current scene, and the selection are available
    via `bpy.context`. Since it depends on the user actions, `bpy.context` is read-only;
    that is, it cannot be changed directly. Anyway, we can affect the state of the
    current activity via *Python*. Rather than changing the attributes of `bpy.context`,
    we must look for the selection and activity properties of Blender’s objects, layers,
    and scenes.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 当前交互状态、当前场景和选择都可以通过 `bpy.context` 获取。由于它依赖于用户操作，`bpy.context` 是只读的；也就是说，不能直接更改。无论如何，我们可以通过
    *Python* 影响当前活动的状态。而不是更改 `bpy.context` 的属性，我们必须查找 Blender 对象、图层和场景的选择和活动属性。
- en: Active scene
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动场景
- en: A `.blend` file, or an unsaved session for that matter, can contain more than
    one **scene**. That differs from the standard in 3D packages, where a saved file
    is equivalent to one scene. If more scenes are available, they can be selected
    from the list menu at the top right of Blender’s header.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `.blend` 文件，或者说是未保存的会话，可以包含多个**场景**。这与 3D 软件包的标准不同，其中保存的文件相当于一个场景。如果有更多场景可用，它们可以从
    Blender 头部右上角的列表菜单中选择。
- en: Each scene can contain any of the objects from `bpy.data.objects`, and one object
    can belong to more than one scene. Changes made to an object in one scene retained
    in the others.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 每个场景都可以包含 `bpy.data.objects` 中的任何对象，一个对象可以属于多个场景。对一个场景中的对象所做的更改将保留在其他场景中。
- en: 'We have seen how to create new objects using `bpy.data.objects.new()`. We can
    create new scenes in the same way, using `bpy.data.scenes.new()`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用 `bpy.data.objects.new()` 创建新对象。我们可以用相同的方式创建新场景，使用 `bpy.data.scenes.new()`：
- en: '[PRE31]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The new scene will then be available in the top-right widget.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 新场景将在右上角的控件中可用。
- en: '![Figure 2.17: Blender scene menu](img/Figure_2._17_B18375.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.17：Blender 场景菜单](img/Figure_2._17_B18375.jpg)'
- en: 'Figure 2.17: Blender scene menu'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.17：Blender 场景菜单
- en: The currently displayed scene is contained in `bpy.context.window`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 当前显示的场景包含在 `bpy.context.window` 中。
- en: 'If we want to create a new scene and make it active, we can assign it to the
    `window.scene` property:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想创建一个新场景并使其成为活动场景，我们可以将其分配给 `window.scene` 属性：
- en: '[PRE32]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'After executing this snippet, the 3D Viewport will switch to a new, empty scene.
    The current scene itself is part of `bpy.context` and can be retrieved via Python
    using `bpy.context.scene`:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码片段后，3D 视口将切换到一个新的空场景。当前场景本身是 `bpy.context` 的一部分，可以通过 Python 使用 `bpy.context.scene`
    来检索：
- en: '[PRE33]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: View Layers
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视图层
- en: '**View Layers** are used to render the objects of a scene separately and put
    them back together using **compositing**. This is done either to speed up the
    rendering process, for instance, rendering the background only once, or for artistic
    necessities. In the UI, View Layers are created in the same way as scenes, using
    the widget on the top bar.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**视图层**用于分别渲染场景中的对象，并通过**合成**将它们重新组合。这样做是为了加快渲染过程，例如，只渲染一次背景，或者出于艺术需求。在 UI
    中，视图层与场景以相同的方式创建，使用顶部栏上的控件。'
- en: 'When creating them in Python, we must keep in mind that they always belong
    to their scene rather than to `bpy.data`. Despite that, if we want to set the
    active layer, we still have to use an attribute of `bpy.context.window`:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中创建它们时，我们必须记住它们始终属于它们的场景，而不是 `bpy.data`。尽管如此，如果我们想设置活动图层，我们仍然必须使用 `bpy.context.window`
    的一个属性：
- en: '[PRE34]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The active layer must belong to the active scene. A statement that tries to
    assign a layer from a different scene to the current window will be ignored. Take
    the following example:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 活动层必须属于活动场景。尝试将来自不同场景的层分配给当前窗口的语句将被忽略。以下是一个示例：
- en: '[PRE35]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Layers can store rendering and pass properties, but also their visibility, activity,
    and selection status. In the next section, we’ll see how a layer stores the **active
    object**.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图层可以存储渲染和通道属性，但也可以存储它们的可见性、活动状态和选择状态。在下一节中，我们将看到图层是如何存储**活动对象**的。
- en: Active object
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动对象
- en: When the user selects an object, that becomes the **active object** of the current
    layer. Its properties are displayed in the interface, and it will be the main
    target of the user actions.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择一个对象时，它将成为当前层的**活动对象**。其属性将在界面中显示，并且将成为用户操作的主要目标。
- en: When Blender opens, a cube is the active object by default. We can see that
    from the **Text Info** in the top-left corner.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 当Blender打开时，默认的活动对象是一个立方体。我们可以从左上角的**Text Info**中看到这一点。
- en: '![Figure 2.18: Blender’s default active object](img/Figure_2._18_B18375.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图2.18：Blender的默认活动对象](img/Figure_2._18_B18375.jpg)'
- en: 'Figure 2.18: Blender’s default active object'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.18：Blender的默认活动对象
- en: 'The active object can be retrieved in multiple places in the API, the most
    immediate being `bpy.context.object`:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在API中可以在多个地方检索活动对象，最直接的是`bpy.context.object`：
- en: '[PRE36]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: All three attributes point to the same object, but since `bpy.context` is read-only,
    only the `view_layer` attribute can be changed programmatically. If more layers
    are present, switching between layers can change the active object. Or we can
    change it using Python by following the next steps.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 所有三个属性都指向同一个对象，但由于`bpy.context`是只读的，因此只能通过程序更改`view_layer`属性。如果有更多图层，切换图层可以更改活动对象。或者我们可以通过以下步骤使用Python来更改它。
- en: Changing the active object
  id: totrans-245
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改活动对象
- en: 'The active object is a property of the active View Layer. With that in mind,
    we can just set the `view_layer.active` attribute to a different object. For instance,
    here is how to pick the camera instead:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 活动对象是活动视图层的属性。考虑到这一点，我们只需将`view_layer.active`属性设置为不同的对象即可。例如，以下是如何选择相机的示例：
- en: Open Blender or revert to the default scene via **File**->**New**->**General**.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Blender或通过**文件**->**新建**->**通用**恢复到默认场景。
- en: Go to the Scripting Workspace.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往脚本工作区。
- en: 'Type the following lines in the Python console and press *Enter*:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Python控制台中输入以下行并按*Enter*键：
- en: '[PRE37]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We can see that the active object has changed from the 3D Viewport, the properties,
    and the status information.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，活动对象已经从3D视图、属性和状态信息中改变。
- en: '![Figure 2.19: Camera is now the active object](img/Figure_2.19_B18375.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图2.19：相机现在是活动对象](img/Figure_2.19_B18375.jpg)'
- en: 'Figure 2.19: Camera is now the active object'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.19：相机现在是活动对象
- en: We can also see that the cube is still selected, and that the camera, despite
    being the active object, isn’t. That’s because the active and selected statuses
    are two distinct concepts. We are going to see, in the next section, how they
    differ, and how we can query and change the current selection.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到立方体仍然被选中，而相机尽管是活动对象，却没有被选中。这是因为活动状态和选中状态是两个不同的概念。在下一节中，我们将看到它们之间的区别，以及如何查询和更改当前选择。
- en: Keep your focus
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 保持专注
- en: The Blender focus policy can be confusing at first. The area under the mouse
    cursor takes the keyboard inputs.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Blender的焦点策略一开始可能会让人困惑。鼠标光标下的区域接收键盘输入。
- en: That’s less of a problem for artists since their tasks usually involve keeping
    the cursor in the area in which they are operating. But it’s different for programmers;
    we might think of typing lines of code for the console only to find out that we
    are triggering shortcuts in the 3D Viewport, or the other way around.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 对于艺术家来说，这并不是一个大问题，因为他们的任务通常涉及保持光标在操作区域。但对于程序员来说则不同；我们可能会认为只为控制台输入代码行，却发现我们在3D视图中触发了快捷键，或者反过来。
- en: Selected objects
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已选对象
- en: 'Let’s select all the objects in the scene by pressing the *A* key in the 3D
    Viewport (**Select | All** from the menu bar). Then, in the console, we type the
    following:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在3D视图中按*A*键（从菜单栏选择**Select | All**）来选择场景中的所有对象。然后，在控制台中，我们输入以下内容：
- en: '[PRE38]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '`selected_objects` is a Python list. Unlike `bpy.data.objects`, it sorts the
    objects by their creation time and not alphabetically. Objects are *never* sorted
    by their selection time; Blender doesn’t keep that information at all. Should
    our tool require selecting objects in a specific sequence, we would have to store
    the order somewhere else.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`selected_objects`是一个Python列表。与`bpy.data.objects`不同，它按创建时间排序，而不是按字母顺序排序。对象*从不*按选择时间排序；Blender根本不保留这些信息。如果我们的工具需要以特定顺序选择对象，我们必须在其他地方存储顺序。'
- en: 'Selecting an object usually makes it the active object of the current layer.
    We can print out which object is active using comparisons against `bpy.context.object`:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个对象通常使其成为当前层的活动对象。我们可以使用与`bpy.context.object`的比较来打印出哪个对象是活动的：
- en: '[PRE39]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Running this snippet with all default objects selected will produce this output:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有默认对象被选中的情况下运行此代码片段将产生以下输出：
- en: '[PRE40]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This pattern is useful whenever we want to propagate a property from the active
    object to the selection. We have already seen that we should not assume that the
    active object is always selected. Inverting the selection unselects the active
    object, but it will remain active. Or there might be no active object at all;
    it can be deleted or set to `None` via the following line:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要从活动对象传播属性到选择集时，这种模式非常有用。我们已经看到，我们不应该假设活动对象总是被选中。反转选择将取消选中活动对象，但它将保持活动状态。或者可能根本就没有活动对象；它可以通过以下行删除或设置为`None`：
- en: '[PRE41]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'A way to check whether the active object belongs to the selection is with the
    `in` operator:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`in`运算符可以检查活动对象是否属于选择集：
- en: '[PRE42]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Even better, we can use the `select_get()` and `select_set()` object properties:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的是，我们可以使用`select_get()`和`select_set()`对象属性：
- en: '[PRE43]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Like the active object, the selection status of an object is stored per View
    Layer. In the next section, we’ll learn how to affect the current selection and
    where it is stored.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 与活动对象一样，每个对象的选择状态都是按视图层存储的。在下一节中，我们将学习如何影响当前选择以及它的存储位置。
- en: Changing selected objects
  id: totrans-273
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改选中的对象
- en: 'The selection status of an object is queried and set using `object.select_get()`
    and `object.select_set()` as, respectively, the `select_set` function works, we
    can start to type it in the Python console, stopping at the parenthesis:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`object.select_get()`和`object.select_set()`查询和设置对象的选择状态，因为`select_set`函数的工作方式，我们可以在Python控制台中开始输入它，直到括号处：
- en: '[PRE44]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Pressing the *Tab* key will display a description of the function and its arguments:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Tab*键将显示函数及其参数的描述：
- en: '[PRE45]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'If no View Layer is given, the selection of the current layer is used. For
    instance, this snippet will deselect all the objects in the current layer:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有指定视图层，则使用当前层的选择集。例如，此代码片段将取消选择当前层中的所有对象：
- en: '[PRE46]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We can create layers dynamically and assign them a different selection. Here
    is a snippet that creates a View Layer where mesh objects are selected, and another
    where cameras are:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以动态创建层并将不同的选择分配给它们。以下是一个创建视图层并选择网格对象和另一个选择相机的代码片段：
- en: '[PRE47]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Selecting is the most immediate way for the user to pick objects from the scene.
    For this reason, `bpy.context` holds a pivotal role and is usually available in
    scripts, or even passed as a Python object.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 选择是用户从场景中挑选对象的最直接方式。因此，`bpy.context`在脚本中起着关键作用，通常可用，甚至作为Python对象传递。
- en: Summary
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how Python can access the content of Blender via `bpy.data`
    and introduced space entities such as vectors. We also saw how to interact with
    the user activity through `bpy.context`, and how read-only attributes of context
    are changed by affecting the status of objects and layers.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了Python如何通过`bpy.data`访问Blender的内容，并介绍了空间实体，如向量。我们还看到了如何通过`bpy.context`与用户活动交互，以及如何通过影响对象和层的状态来改变上下文的只读属性。
- en: In [*Chapter 3*](B18375_03.xhtml#_idTextAnchor049), we will see how to insert
    our routines in our own add-ons and make them ready to install and use in Blender.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B18375_03.xhtml#_idTextAnchor049)中，我们将看到如何将我们的例程插入到自己的插件中，并使其准备好在Blender中安装和使用。
- en: Questions
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which helper utilities are typical of Blender?
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些辅助实用工具是Blender典型的？
- en: How can we store and display space coordinates?
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何存储和显示空间坐标？
- en: Which attribute of `bpy` gives access to all Blender entities?
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bpy`的哪个属性可以访问所有Blender实体？'
- en: Do Python classes of Blender objects have a constructor?
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Blender对象的Python类有构造函数吗？
- en: How do we create new Blender objects?
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何创建新的Blender对象？
- en: What does it mean that an object is active?
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对象活动意味着什么？
- en: Is the active object a property of the Blender scene?
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Blender场景中的活动对象是一个属性吗？
- en: Can we affect the selection using `bpy.context`?
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们能否使用`bpy.context`来影响选择？
- en: Can we affect the selection using `bpy.context.view_layer`?
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们能否使用`bpy.context.view_layer`来影响选择？
