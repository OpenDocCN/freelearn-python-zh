- en: Chapter 9. Routing Recipes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章。路由食谱
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Making cleaner URLs with `routes.py`
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `routes.py` 创建更干净的 URL
- en: Creating a simple router
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的路由器
- en: Adding a URL prefix
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 URL 前缀
- en: Associating applications with domains
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序与域名关联
- en: Omitting the application name
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 省略应用程序名称
- en: Removing application names and controllers from URLs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 URL 中删除应用程序名称和控制器
- en: Replacing underscores with hyphens in URLs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 URL 中将下划线替换为连字符
- en: Mapping `favicons.ico` and `robots.txt`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射 `favicons.ico` 和 `robots.txt`
- en: Using URLs to specify the language
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 URL 指定语言
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: At its core, web2py contains a dispatcher that maps URLs into function calls.
    This mapping is called routing, and it can be configured. This may be necessary
    in order to shorten URLs, or to deploy a web2py application as a replacement for
    a pre-existing application, by not wanting to break old external links. web2py
    comes with two routers, that is, a two-way routing configuration. The old one
    uses regular expressions to match incoming URLs and map them into the app/controller/function.
    The new style router instead uses a more holistic approach.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，web2py 包含一个将 URL 映射到函数调用的分发器。这种映射称为路由，并且可以进行配置。这可能是有必要的，为了缩短 URL，或者将 web2py
    应用程序作为现有应用程序的替代品部署，而不希望破坏旧的外部链接。web2py 随带两个路由器，即双向路由配置。旧的那个使用正则表达式匹配传入的 URL 并将其映射到应用/控制器/函数。而新风格的路由器则采用更全面的方法。
- en: Making cleaner URLs with routes.py
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 routes.py 创建更干净的 URL
- en: In web2py, incoming URLs are, by default, interpreted as`http://domain.com/application/controller/function/arg1/arg2?var1=val1&var2=val2`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 web2py 中，默认情况下，传入的 URL 被解释为 `http://domain.com/application/controller/function/arg1/arg2?var1=val1&var2=val2`。
- en: That is, the first three elements of the URL are interpreted as the web2py application
    name, controller name, and function name, with the remaining path elements saved
    in `request.args` (a **list)**, and the query string saved in `request.vars` (a
    **dictionary)**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 即，URL 的前三个元素被解释为 web2py 应用程序名称、控制器名称和函数名称，剩余的路径元素保存在 `request.args`（一个 **列表**）中，查询字符串保存在
    `request.vars`（一个 **字典**）中。
- en: 'If the incoming URL has fewer than three path elements, then the missing elements
    are filled in using the defaults: `/init/default/index`, or, if there is no application
    named `init`, they are filled using the `welcome` application: `/welcome/default/index`.
    web2py''s `URL()` function creates a URL path (by default, without a scheme or
    domain) from its component parts: application, controller, function, args list,
    and vars dictionary. The results are typically used for `href` links in web pages,
    and for the argument to the redirect function.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传入的 URL 路径元素少于三个，则使用默认值填充缺失的元素：`/init/default/index`，或者如果没有名为 `init` 的应用程序，则使用
    `welcome` 应用程序填充：`/welcome/default/index`。web2py 的 `URL()` 函数从其组成部分创建 URL 路径（默认情况下，没有方案或域名）：应用程序、控制器、函数、参数列表和变量字典。结果通常用于网页中的
    `href` 链接，以及重定向函数的参数。
- en: As part of its routing logic, web2py also supports URL rewriting, in which the
    configuration file, `routes.py`, specifies rules by which `URL()` rewrites the
    URL it generates, and by which web2py interprets the incoming URLs. There are
    two independent rewriting mechanisms, depending on which one is configured in
    `routes.py`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作为其路由逻辑的一部分，web2py 还支持 URL 重写，其中配置文件 `routes.py` 指定 `URL()` 重写它生成的 URL 的规则，以及
    web2py 解释传入的 URL 的规则。有两种独立的重写机制，这取决于在 `routes.py` 中配置的是哪一个。
- en: One uses regular-expression pattern matching to rewrite URL strings, while the
    other uses a routing-parameter dictionary to control the rewriting. We refer to
    these as the **pattern-based router** and the **parameter-based router**, respectively
    (sometimes they are referred to as the old router and the new router, respectively,
    but those terms are not very descriptive, and we will avoid them here).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个使用正则表达式模式匹配来重写 URL 字符串，而另一个使用路由参数字典来控制重写。我们分别称它们为 **基于模式的路由器** 和 **基于参数的路由器**（有时它们分别被称为旧路由器和新路由器，但这些术语描述性不强，我们将避免使用它们）。
- en: An example of usage of the old router is given in the following section. An
    example of usage of the new router is given in the rest of the chapter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分提供了一个旧路由器的使用示例。本章的其余部分提供了一个新路由器的使用示例。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Normally web URLs have a structure like `http://host/app/controller/function/args`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Web URL 的结构如下 `http://host/app/controller/function/args`。
- en: 'Now imagine an application where each user has its own home page. For example:
    `http://host/app/default/home/johndoe`, where `home` is the action that renders
    pages, and `johndoe` is the `request.args(0)` that tells web2py which use we are
    looking for. While this is possible, it would be much better to have URLs that
    look like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一个应用程序，其中每个用户都有自己的主页。例如：`http://host/app/default/home/johndoe`，其中 `home`
    是渲染页面的动作，而 `johndoe` 是 `request.args(0)`，它告诉 web2py 我们正在寻找哪个用户。虽然这是可能的，但拥有如下外观的
    URL 会更好：
- en: '`http://host/johndoe/home`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://host/johndoe/home`。'
- en: This can be done using the web2py pattern-based routing mechanism.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过使用 web2py 的基于模式的路由机制来实现。
- en: We will assume the following minimalist application called `pages`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将假设以下名为 `pages` 的最小化应用程序。
- en: 'In `models/db.py`, add the following code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `models/db.py` 中添加以下代码：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Add the following code and the usual scaffolding files to `controllers/default.py:`
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码和常规脚手架文件添加到 `controllers/default.py` 中：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'We proceed by creating/editing `routes.py` in the main web2py folder, in order
    to implement the following rules:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在主 web2py 文件夹中创建/编辑 `routes.py` 来实现以下规则：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that `$app` is a shortcut for the regular expression `(? P<app>\w+)`, and
    it will match everything not containing slashes. `$username` is a shortcut for
    `(? P<username>\w+)`. Similarly, you can use other variables. `$anything` is special,
    since it corresponds with a different regular expression, `(? P<app>.*)`; that
    is, it will match everything until the end of the URL.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`$app` 是正则表达式 `(? P<app>\w+)` 的快捷方式，它将匹配不包含斜杠的任何内容。`$username` 是 `(? P<username>\w+)`
    的快捷方式。同样，您可以使用其他变量。`$anything` 是特殊的，因为它对应着不同的正则表达式，`(? P<app>.*)`；即，它将匹配直到 URL
    结尾的任何内容。
- en: 'The critical parts of the code are as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的关键部分如下：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These map the request for `home`. We then do the same for the `css` action.
    The rest of the code is not really necessary, but makes sure that you do not accidentally
    break the `admin` and the `appadmin` URLs.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些映射了 `home` 的请求。然后我们对 `css` 动作做同样的处理。其余的代码实际上不是必需的，但它确保您不会意外地破坏 `admin` 和 `appadmin`
    URL。
- en: Creating a simple router
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的路由器
- en: This and the next recipes in this chapter deal with the new parameter-based
    router, which is generally easier to configure, and handles most common re-writing
    tasks effectively. If possible, try to use the parameter-based router, but if
    you need more control for special URL-rewriting tasks, look at the pattern-based
    router.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的此部分和下一部分将处理新的基于参数的路由器，它通常更容易配置，并且有效地处理大多数常见的重写任务。如果可能，请尝试使用基于参数的路由器，但如果您需要更多控制特殊
    URL 重写任务，请查看基于模式的路由器。
- en: 'The starting point for using the parameter-based router is to copy the file
    `router.example.py` to `routes.py`, in the web2py `base` directory. (The file
    `routes.example.py` serves the same purpose for the pattern-based router.) The
    `example` file contains basic documentation for its respective routing systems;
    additional documentation is available online in the web2py book, [Chapter 4](ch04.html
    "Chapter 4. Advanced Forms"),*The Core: URL rewrite and Routes on error..*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基于参数的路由器的起点是将文件 `router.example.py` 复制到 `web2py` 的 `base` 目录中的 `routes.py`。(`routes.example.py`
    文件对于基于模式的路由器也具有相同的作用。)该 `example` 文件包含其各自路由系统的基本文档；更多文档可在 web2py 书籍的在线版本中找到，[第
    4 章](ch04.html "第 4 章。高级表单")*核心：URL 重写和错误路由*。
- en: 'Whenever `routes.py` is changed, you must either restart web2py or, if the
    admin app is available, load the following URL, for the new configuration to take
    effect:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 每当 `routes.py` 发生更改时，您必须重新启动 web2py，或者如果管理员应用程序可用，加载以下 URL，以便新的配置生效：
- en: '`http://yourdomain.com/admin/default/reload_routes`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://yourdomain.com/admin/default/reload_routes`'
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The example routing files contain a set of Python `doctests`. When you make
    a change to the routing configuration, add to or edit the `doctests` in `routes.py`
    to check that your configuration does what you expect.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 示例路由文件包含一组 Python `doctests`。当您更改路由配置时，请向 `routes.py` 中的 `doctests` 添加或编辑，以检查您的配置是否符合预期。
- en: The first problem we want to solve is that we want to eliminate the default
    application and controller from visible URLs, when possible.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要解决的第一个问题是，在可能的情况下，我们想要从可见 URL 中消除默认应用程序和控制器。
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Copy `router.example.py` to `routes.py` in the main web2py folder, and edit
    it as follows. Find the routers `dict:`
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `router.example.py` 复制到主 web2py 文件夹中的 `routes.py`，并按以下方式编辑。找到 `routers` 字典：
- en: '[PRE4]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Change `default_application` from `welcome` to the name of your application.
    If your default controller and function are not named, `default` and `index` respectively,
    then specify those defaults as well:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`default_application`从`welcome`更改为你的应用程序名称。如果你的默认控制器和函数没有命名为`default`和`index`，请指定这些默认值：
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Adding a URL prefix
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加URL前缀
- en: 'Often when you are running web2py under a production server, the same URL may
    be shared by multiple applications or services, and you will need to add an extra
    `PATH_INFO` prefix to identify the web2py service. For example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当你在一个生产服务器上运行web2py时，相同的URL可能被多个应用程序或服务共享，你需要添加一个额外的`PATH_INFO`前缀来识别web2py服务。例如：
- en: '[http://example.com/php/](http://example.com/php)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://example.com/php/](http://example.com/php)'
- en: '[http://example.com/web2py/app/default/index](http://example.com/web2py/app/default/index)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://example.com/web2py/app/default/index](http://example.com/web2py/app/default/index)'
- en: Here, `web2py/` identifies the web2py service, and `php/` identifies a php service,
    and the mapping is performed by the web service. You may want to eliminate the
    extra `web2py/` from the `PATH_INFO`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`web2py/`标识web2py服务，而`php/`标识一个php服务，映射是由网络服务执行的。你可能想从`PATH_INFO`中消除额外的`web2py/`。
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'When you specify `path_prefix`, it is prepended to all URLs generated by `URL()`,
    and stripped from all incoming URLs. For example, if you want your external URLs
    to look like `http://example.com/web2py/app/default/index`, you can do the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当你指定`path_prefix`时，它被添加到由`URL()`生成的所有URL之前，并从所有传入的URL中移除。例如，如果你想你的外部URL看起来像`http://example.com/web2py/app/default/index`，你可以这样做：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Associating applications with domains
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序与域名关联
- en: Often, you want to associate specific domains with specific web2py applications,
    so that incoming URLs directed to specified domains are routed to the appropriate
    application, without needing the application name in the URL. Again, the parametric
    router comes in handy.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你想将特定的域名与特定的web2py应用程序关联起来，以便将指定域名指向的传入URL路由到适当的应用程序，而无需在URL中包含应用程序名称。再次强调，参数化路由器非常有用。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the parameter-based router''s domains feature:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基于参数的路由器的域名功能：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, `domain1.com` and `domain2.com` are being served by the same
    physical host. The configuration specifies that URLs directed to `domain1.com`
    (and in this case, its subdomain `www)` are to be routed to `app1`, and URLs directed
    to `domain2.com` are to be routed to `app2`. If `exclusive_domain` is (optionally)
    set to `True`, then attempts to use the URL to generate a URL referring to `app2`
    in response to a request from a domain other than `domain2.com` (and similarly
    for `app1)`, will fail unless they explicitly supply a host name to URL.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`domain1.com`和`domain2.com`由同一个物理主机提供服务。配置指定了将`domain1.com`（在这种情况下，其子域名`www`）的URL路由到`app1`，将`domain2.com`的URL路由到`app2`。如果`exclusive_domain`（可选）设置为`True`，那么来自除`domain2.com`（以及类似地对于`app1`）之外的域的请求尝试使用URL生成指向`app2`的URL将失败，除非它们明确提供主机名到URL。
- en: 'Notice that you can also use the following, to further configure the paths
    for the two apps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你也可以使用以下方式，进一步配置两个应用的路径：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Omitting the application name
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 省略应用程序名称
- en: If you are using the parametric router, you may want to omit the default application
    name from the visible URLs for static files.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用参数化路由器，你可能想从静态文件的可视URL中省略默认应用程序名称。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'It is simple; you just turn on the `map_static` flag as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单；你只需按照以下方式打开`map_static`标志：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Or, if you''re using an application-specific router dictionary, turn on the
    `map_static` flag for each application (that is, `myapp` in the following example):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你正在使用特定应用程序的路由字典，为每个应用程序（例如以下示例中的`myapp`）打开`map_static`标志：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Removing application name and controllers from URLs
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从URL中移除应用程序名称和控制器
- en: Sometimes, you want to use the parametric router's URL parsing, but you don't
    want to rewrite visible URLs. Again, you can use the parametric router, but disable
    URL rewriting.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你想使用参数化路由器的URL解析，但又不想重写可见的URL。再次强调，你可以使用参数化路由器，但请禁用URL重写。
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Find the router''s `dict` in `routes.py`, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在`routes.py`中找到路由器的`dict`，如下所示：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After finding it, change it to the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 找到它后，将其更改为以下内容：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Setting `applications` and `controllers` to `None` (functions and `languages`
    are set to `None` by default), tells the parametric router not to omit the corresponding
    parts of the visible URL. web2py's default URL parsing is stricter than many applications
    might require, since it assumes that URL components might be used for filenames.
    The parametric router adheres more closely to the HTTP URL RFCs, which makes it
    friendlier to applications that need more exotic characters in their arguments
    or query strings. The `null` router in this recipe, enables this parsing without
    actually rewriting URLs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `applications` 和 `controllers` 设置为 `None`（函数和 `languages` 默认设置为 `None`），告诉参数路由器不要省略可见
    URL 中的相应部分。web2py 的默认 URL 解析比许多应用可能需要的更严格，因为它假设 URL 组件可能用于文件名。参数路由器更紧密地遵循 HTTP
    URL RFCs，这使得它对需要更多异国情调字符在它们的参数或查询字符串中的应用程序更友好。本食谱中的 `null` 路由器启用此解析，而实际上不重写 URL。
- en: Replacing underscores with hyphens in URLs
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 URL 中将下划线替换为破折号
- en: Underscores in URLs can be ugly, and they can be hard to see when the URL is
    underlined, as it often is on web pages. A hyphen is a more visually appealing
    alternative, but you can't, for example, use a hyphen in a function name, because
    it must also be a legal Python identifier. You can use the parametric router and
    to map `-` into `_!`
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: URL 中的下划线可能看起来很丑，当 URL 被下划线时，它们可能很难看到，就像它们通常在网页上那样。破折号是一个更视觉上吸引人的替代品，但你不能在函数名中使用破折号，因为它们还必须是合法的
    Python 标识符。你可以使用参数路由器，将破折号映射为 `_!`
- en: 'The parametric router''s `map_hyphen` flag converts underscores in application,
    controller, and function names to hyphens in the visible URLs, and back to underscores
    when the URL is received. `Args, vars` (query string), and possible language selectors
    are not affected, since hyphens are fine in those fields. As a result, a URL like
    the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 参数路由器的 `map_hyphen` 标志将应用、控制器和函数名称中的下划线转换为可见 URL 中的破折号，并在接收到 URL 时将其转换回下划线。`Args,
    vars`（查询字符串）和可能的语言选择器不受影响，因为破折号在这些字段中是允许的。因此，以下 URL：
- en: '`http://some_controller/some_function`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://some_controller/some_function`'
- en: 'Will appear instead as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示为以下内容：
- en: '`http://some-controller/some-function`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://some-controller/some-function`'
- en: While the internal controller and function names retain their underscores.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然内部控制器和函数名称保留了它们的下划线。
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Turn on the `map_hyphen` flag. In the routers directive, add the following
    code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `map_hyphen` 标志。在路由器指令中添加以下代码：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Mapping favicons.ico and robots.txt
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 映射 favicon.ico 和 robots.txt
- en: Some special files, such as `robots.txt` and `favicon.ico`, are accessed directly
    as the root path of a URL. Therefore, they must be mapped from the `root` folder
    into the `static` folder of the application.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一些特殊文件，如 `robots.txt` 和 `favicon.ico`，作为 URL 的根路径直接访问。因此，它们必须从 `root` 文件夹映射到应用的
    `static` 文件夹中。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'By default, the parameter-based router sets `root_static` as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，基于参数的路由器将 `root_static` 设置如下：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This specifies that the listed files are to be served from the default application's
    static directory.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了要服务的文件来自默认应用的静态目录。
- en: Using URLs to specify the language
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 URL 指定语言
- en: The recipe *Using cookies to set the language*, in [Chapter 2](ch02.html "Chapter 2. Building
    Your First Application"), describes how to save a user language preference in
    a cookie. In this recipe, we describe how to do something similar&mdash;to **store**
    the user language preference in the URL. One advantage to this approach is that
    it's then possible to bookmark a link that includes a language preference.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 2 章](ch02.html "第 2 章。构建您的第一个应用程序")中的“使用 cookies 设置语言”食谱描述了如何将用户语言偏好保存到
    cookie 中。在这个食谱中，我们描述了如何做类似的事情——将用户语言偏好**存储**在 URL 中。这种方法的一个优点是，然后可以保存包含语言偏好的链接。'
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The parametric router supports an optional `language` field in the URL as a
    field following the application name:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 参数路由器支持 URL 中的可选 `language` 字段，作为应用名称之后的字段：
- en: '[http://domain.com/app/lang/controller/function](http://domain.com/app/lang/controller/function)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://domain.com/app/lang/controller/function](http://domain.com/app/lang/controller/function)'
- en: 'The language field is subject to the usual omission rules: the parametric router
    will omit the language designator, if when the default language is used its omission
    does not create ambiguity.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 语言字段遵循常规省略规则：如果使用默认语言，参数路由器将省略语言标识符，如果省略不会造成歧义。
- en: 'URL-based language handling will ordinarily be specified in an application-specific
    parametric router, setting `default_language` and `languages` as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 基于URL的语言处理通常会在特定应用的参数路由器中指定，设置`default_language`和`languages`如下：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To specify a language for outgoing URLs using `URL()`, set `request.lang` to
    one of the supported languages. For incoming requests, `request.lang` will be
    set to the language specified by the incoming URL. As with the language-in-cookie
    recipe, use `T.force` to force the desired translations in a model file, before
    translations are to be used. For example, in your model, you can do the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`URL()`指定出站URL的语言，将`request.lang`设置为支持的任何一种语言。对于入站请求，`request.lang`将被设置为入站URL指定的语言。与语言在cookie中的设置类似，在使用翻译之前，使用`T.force`强制在模型文件中使用所需的翻译。例如，在你的模型中，你可以执行以下操作：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
