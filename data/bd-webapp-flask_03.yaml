- en: Chapter 3. Man, Do I Like Templates!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。天哪，我喜欢模板！
- en: As stated previously, Flask gives you the VC of MVC out-of-the-box. In this
    chapter, we will discuss what Jinja2 is, and how Flask uses Jinja2 to implement
    the View layer and awe you. Be prepared!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Flask为您提供了MVC中的VC。在本章中，我们将讨论Jinja2是什么，以及Flask如何使用Jinja2来实现视图层并让您感到敬畏。做好准备！
- en: What is Jinja2 and how is it coupled with Flask?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jinja2是什么，它如何与Flask耦合在一起？
- en: 'Jinja2 is a library found at [http://jinja.pocoo.org/](http://jinja.pocoo.org/);
    you can use it to produce formatted text with bundled logic. Unlike the Python
    format function, which only allows you to replace markup with variable content,
    you can have a control structure, such as a `for` loop, inside a template string
    and use Jinja2 to parse it. Let''s consider this example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Jinja2是一个库，可以在[http://jinja.pocoo.org/](http://jinja.pocoo.org/)找到；您可以使用它来生成带有捆绑逻辑的格式化文本。与Python格式函数不同，Python格式函数只允许您用变量内容替换标记，您可以在模板字符串中使用控制结构（例如`for`循环），并使用Jinja2进行解析。让我们考虑这个例子：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding code, we have a very simple example where we create a template
    string with a `for` loop control structure ("for tag", for short) that iterates
    over a list variable called `my_list` and prints the element inside a "li HTML
    tag" using curly braces `{{ }}` notation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们有一个非常简单的例子，其中我们创建了一个模板字符串，其中包含一个`for`循环控制结构（简称“for标签”），该结构遍历名为`my_list`的列表变量，并使用大括号`{{
    }}`符号打印“li HTML标签”中的元素。
- en: Notice that you could call `render` in the template instance as many times as
    needed with different key-value arguments, also called the template context. A
    context variable may have any valid Python variable name—that is, anything in
    the format given by the regular expression *[a-zA-Z_][a-zA-Z0-9_]**.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以在模板实例中调用`render`多次，并使用不同的键值参数，也称为模板上下文。上下文变量可以有任何有效的Python变量名——也就是说，任何符合正则表达式*[a-zA-Z_][a-zA-Z0-9_]*格式的内容。
- en: Tip
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For a full overview on regular expressions (**Regex** for short) with Python,
    visit [https://docs.python.org/2/library/re.html](https://docs.python.org/2/library/re.html).
    Also, take a look at this nice online tool for Regex testing [http://pythex.org/](http://pythex.org/).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Python正则表达式（**Regex**简称）的完整概述，请访问[https://docs.python.org/2/library/re.html](https://docs.python.org/2/library/re.html)。还可以查看这个用于正则表达式测试的在线工具[http://pythex.org/](http://pythex.org/)。
- en: A more elaborate example would make use of an environment class instance, which
    is a central, configurable, extensible class that may be used to load templates
    in a more organized way.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更复杂的例子将使用环境类实例，这是一个中央、可配置、可扩展的类，可以以更有组织的方式加载模板。
- en: 'Do you follow where we are going here? This is the basic principle behind Jinja2
    and Flask: it prepares an environment for you, with a few responsive defaults,
    and gets your wheels in motion.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您明白我们要说什么了吗？这是Jinja2和Flask背后的基本原理：它为您准备了一个环境，具有一些响应式默认设置，并让您的轮子转起来。
- en: What can you do with Jinja2?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您可以用Jinja2做什么？
- en: Jinja2 is pretty slick. You can use it with template files or strings; you can
    use it to create formatted text, such as HTML, XML, Markdown, and e-mail content;
    you can put together templates, reuse templates, and extend templates; you can
    even use extensions with it. The possibilities are countless, and combined with
    nice debugging features, auto-escaping, and full unicode support.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Jinja2非常灵活。您可以将其与模板文件或字符串一起使用；您可以使用它来创建格式化文本，例如HTML、XML、Markdown和电子邮件内容；您可以组合模板、重用模板和扩展模板；甚至可以使用扩展。可能性是无穷无尽的，并且结合了良好的调试功能、自动转义和完整的Unicode支持。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Auto-escaping is a Jinja2 configuration where everything you print in a template
    is interpreted as plain text, if not explicitly requested otherwise. Imagine a
    variable *x* has its value set to `<b>b</b>`. If auto-escaping is enabled, `{{
    x }}` in a template would print the string as given. If auto-escaping is off,
    which is the Jinja2 default (Flask's default is on), the resulting text would
    be `b`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 自动转义是Jinja2的一种配置，其中模板中打印的所有内容都被解释为纯文本，除非另有明确要求。想象一个变量*x*的值设置为`<b>b</b>`。如果启用了自动转义，模板中的`{{
    x }}`将打印给定的字符串。如果关闭了自动转义，这是Jinja2的默认设置（Flask的默认设置是开启的），则生成的文本将是`b`。
- en: Let's understand a few concepts before covering how Jinja2 allows us to do our
    coding.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍Jinja2允许我们进行编码之前，让我们先了解一些概念。
- en: 'First, we have the previously mentioned curly braces. Double curly braces are
    a delimiter that allows you to evaluate a variable or function from the provided
    context and print it into the template:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有前面提到的大括号。双大括号是一个分隔符，允许您从提供的上下文中评估变量或函数，并将其打印到模板中：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding example, we see how to use curly braces to evaluate variables
    in your template. First, we evaluate a string and then an integer. Both result
    in a unicode string. If we evaluate a class of our own, we must make sure there
    is a `__unicode__` method defined, as it is called during the evaluation. If a
    `__unicode__` method is not defined, the evaluation falls back to `__str__` and
    `__repr__`, sequentially. This is easy. Furthermore, what if we want to evaluate
    a function? Well, just call it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们看到如何使用大括号来评估模板中的变量。首先，我们评估一个字符串，然后是一个整数。两者都会产生Unicode字符串。如果我们评估我们自己的类，我们必须确保定义了`__unicode__`方法，因为在评估过程中会调用它。如果没有定义`__unicode__`方法，则评估将退回到`__str__`和`__repr__`，依次进行。这很简单。此外，如果我们想评估一个函数怎么办？好吧，只需调用它：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To output the result of a function in a template, just call the function as
    any regular Python function. The function return value will be evaluated normally.
    If you're familiar with Django, you might notice a slight difference here. In
    Django, you do not need the parentheses to call a function, or even pass arguments
    to it. In Flask, the parentheses are *always* needed if you want the function
    return evaluated.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要在模板中输出函数的结果，只需像调用任何常规Python函数一样调用该函数。函数返回值将被正常评估。如果您熟悉Django，您可能会注意到这里有一点不同。在Django中，您不需要使用括号来调用函数，甚至不需要向其传递参数。在Flask中，如果要对函数返回值进行评估，则*始终*需要使用括号。
- en: 'The following two examples show the difference between Jinja2 and Django function
    call in a template:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个示例展示了Jinja2和Django在模板中函数调用之间的区别：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also evaluate Python math operations. Take a look:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以评估Python数学运算。看一下：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Other math operators will also work. You may use the curly braces delimiter
    to access and evaluate lists and dictionaries:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 其他数学运算符也可以使用。您可以使用花括号分隔符来访问和评估列表和字典：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To access a list or dictionary value, just use normal plain Python notation.
    With dictionaries, you can also access a key value using variable access notation,
    which is pretty neat.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问列表或字典值，只需使用普通的Python表示法。对于字典，您还可以使用变量访问表示法访问键值，这非常方便。
- en: 'Besides the curly braces delimiter, Jinja2 also has the curly braces/percentage
    delimiter, which uses the notation `{% stmt %}` and is used to execute statements,
    which may be a control statement or not. Its usage depends on the statement, where
    control statements have the following notation:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 除了花括号分隔符，Jinja2还有花括号/百分比分隔符，它使用`{% stmt %}`的表示法，用于执行语句，这可能是控制语句，也可能不是。它的使用取决于语句，其中控制语句具有以下表示法：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The first tag has the statement name, while the second is the closing tag,
    which has the name of the statement appended with `end` in the beginning. You
    must be aware that a non-control statement *may* not have a closing tag. Let''s
    look at some examples:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个标签具有语句名称，而第二个是闭合标签，其名称在开头附加了`end`。您必须意识到非控制语句*可能*没有闭合标签。让我们看一些例子：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding example is a little more complex than what we have been seeing.
    It uses a control statement `for` loop inside a block statement (you can have
    a statement inside another), which is not a control statement, as it does not
    control execution flow in the template. Inside the `for` loop you see that the
    `i` variable is being printed together with the associated price (defined elsewhere).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子比我们之前看到的要复杂一些。它在块语句中使用了控制语句`for`循环（您可以在另一个语句中有一个语句），这不是控制语句，因为它不控制模板中的执行流程。在`for`循环中，您可以看到`i`变量与关联的价格（在其他地方定义）一起打印出来。
- en: 'A last delimiter you should know is `{# comments go here #}`. It is a multi-line
    delimiter used to declare comments. Let''s see two examples that have the same
    result:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '您应该知道的最后一个分隔符是`{# comments go here #}`。这是一个多行分隔符，用于声明注释。让我们看两个具有相同结果的例子：'
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Both comment delimiters hide the content between `{#` and `#}`. As can been
    seen, this delimiter works for one-line comments and multi-line comments, what
    makes it very convenient.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 两种注释分隔符都隐藏了`{#`和`#}`之间的内容。可以看到，这个分隔符适用于单行注释和多行注释，非常方便。
- en: Control structures
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制结构
- en: We have a nice set of built-in control structures defined by default in Jinja2\.
    Let's begin our studies on it with the `if` statement.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Jinja2中默认定义了一组不错的内置控制结构。让我们从`if`语句开始学习它。
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `if` control statement is beautiful! It behaves just like a `python if`
    statement. As seen in the preceding code, you can use it to compare objects in
    a very easy fashion. "`else`" and "`elif`" are also fully supported.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`控制语句很美妙！它的行为就像`python if`语句一样。如前面的代码所示，您可以使用它以非常简单的方式比较对象。"`else`"和"`elif`"也得到了充分支持。'
- en: You may also have noticed that `true` and `false`, non-capitalized, were used
    together with plain Python Booleans, `True` and `False`. As a design decision
    to avoid confusion, all Jinja2 templates have a lowercase alias for `True`, `False`,
    and `None`. By the way, lowercase syntax is the preferred way to go.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还注意到了`true`和`false`，非大写，与普通的Python布尔值`True`和`False`一起使用。为了避免混淆的设计决策，所有Jinja2模板都有`True`、`False`和`None`的小写别名。顺便说一句，小写语法是首选的方式。
- en: 'If needed, and you should avoid this scenario, you may group comparisons together
    in order to change precedence evaluation. See the following example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要的话，您应该避免这种情况，可以将比较组合在一起以改变优先级评估。请参阅以下示例：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The expected output for the preceding example is `true`, `true`, and `false`.
    The first two lines are pretty straightforward. In the third line, first, `(10<15)`
    is evaluated to `True`, which is a subclass of `int`, where `True == 1`. Then
    `5` < `True` is evaluated, which is certainly false.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前面示例的预期输出是`true`、`true`和`false`。前两行非常直接。在第三行中，首先，`(10<15)`被评估为`True`，它是`int`的子类，其中`True
    == 1`。然后评估`5` < `True`，这显然是假的。
- en: 'The `for` statement is pretty important. One can hardly think of a serious
    Web application that does not have to show a list of some kind at some point.
    The `for` statement can iterate over any iterable instance and has a very simple,
    Python-like syntax:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`语句非常重要。几乎无法想象一个严肃的Web应用程序不必在某个时候显示某种列表。`for`语句可以迭代任何可迭代实例，并且具有非常简单的、类似Python的语法：'
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the first statement, we have the opening tag indicating that we will iterate
    over `my_list` items and each item will be referenced by the name `item`. The
    name `item` will be available inside the `for` loop context only.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个语句中，我们有一个开放标签，指示我们将遍历`my_list`项，每个项将被名称`item`引用。名称`item`仅在`for`循环上下文中可用。
- en: In the second statement, we have an iteration over the key value tuples that
    form `my_dictionary`, which should be a dictionary (if the variable name wasn't
    suggestive enough). Pretty simple, right? The `for` loop also has a few tricks
    in store for you.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个语句中，我们对形成`my_dictionary`的键值元组进行迭代，这应该是一个字典（如果变量名不够具有启发性的话）。相当简单，对吧？`for`循环也为您准备了一些技巧。
- en: 'When building HTML lists, it''s a common requirement to mark each list item
    in alternating colors in order to improve readability or mark the first or/and
    last item with some special markup. Those behaviors can be achieved in a Jinja2
    for-loop through access to a loop variable available inside the block context.
    Let''s see some examples:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建HTML列表时，通常需要以交替颜色标记每个列表项，以改善可读性，或者使用一些特殊标记标记第一个和/或最后一个项目。这些行为可以通过在Jinja2
    for循环中访问块上下文中可用的循环变量来实现。让我们看一些例子：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `for` loop statement, as in Python, also allow the use of `else`, but with
    a slightly different meaning. In Python, when you use `else` with `for`, the `else`
    block is only executed if it was *not* reached through a `break` command like
    this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环语句，就像Python一样，也允许使用`else`，但意义略有不同。在Python中，当您在`for`中使用`else`时，只有在没有通过`break`命令到达`else`块时才会执行`else`块，就像这样：'
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As seen in the preceding code snippet, the `else` block will only be executed
    in a `for` loop if the execution was never broken by a `break` command. With Jinja2,
    the `else` block is executed when the `for` iterable is empty. For example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码片段所示，`else`块只有在`for`循环中从未被`break`命令中断执行时才会执行。使用Jinja2时，当`for`可迭代对象为空时，将执行`else`块。例如：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As we are talking about loops and breaks, there are two important things to
    know: the Jinja2 `for` loop does not support `break` or `continue`. Instead, to
    achieve the expected behavior, you should use loop filtering as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在讨论循环和中断，有两件重要的事情要知道：Jinja2的`for`循环不支持`break`或`continue`。相反，为了实现预期的行为，您应该使用循环过滤，如下所示：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the first tag you see a normal `for` loop together with an `if` condition.
    You should consider that condition as a real list filter, as the index itself
    is only counted per iteration. Run the preceding example and the output will be
    the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个标签中，您会看到一个普通的`for`循环和一个`if`条件。您应该将该条件视为一个真正的列表过滤器，因为索引本身只是在每次迭代中计数。运行前面的示例，输出将如下所示：
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Look at the last observation in the preceding example—in the second tag, do
    you see the dash in `{%-`? It tells the renderer that there should be no empty
    new lines before the tag at each iteration. Try our previous example without the
    dash and compare the results to see what changes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 看看前面示例中的最后一个观察——在第二个标签中，您看到`{%-`中的破折号吗？它告诉渲染器在每次迭代之前不应该有空的新行。尝试我们之前的示例，不带破折号，并比较结果以查看有何变化。
- en: 'We''ll now look at three very important statements used to build templates
    from different files: `block`, `extends`, and `include`.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看看用于从不同文件构建模板的三个非常重要的语句：`block`、`extends`和`include`。
- en: '`block` and `extends` always work together. The first is used to define "overwritable"
    blocks in a template, while the second defines a parent template that has blocks,
    for the current template. Let''s see an example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`block`和`extends`总是一起使用。第一个用于定义模板中的“可覆盖”块，而第二个定义了具有块的当前模板的父模板。让我们看一个例子：'
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Do you see the inheritance happening, between `child.txt` and `parent.txt`?
    `parent.txt` is a simple template with two `block` statements, called `template`
    and `past`. When you render `parent.txt` directly, its blocks are printed "as
    is", because they were not overwritten. In `child.txt`, we extend the `parent.txt`
    template and overwrite all its blocks. By doing that, we can have different information
    in specific parts of a template without having to rewrite the whole thing.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否看到了`child.txt`和`parent.txt`之间的继承？`parent.txt`是一个简单的模板，有两个名为`template`和`past`的`block`语句。当您直接呈现`parent.txt`时，它的块会“原样”打印，因为它们没有被覆盖。在`child.txt`中，我们扩展`parent.txt`模板并覆盖所有其块。通过这样做，我们可以在模板的特定部分中具有不同的信息，而无需重写整个内容。
- en: With `other.txt`, for example, we extend the `child.txt` template and overwrite
    only the block-named template. You can overwrite blocks from a direct parent template
    or from any of its parents.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用`other.txt`，我们扩展`child.txt`模板并仅覆盖命名为block的模板。您可以从直接父模板或任何父模板覆盖块。
- en: If you were defining an `index.txt` page, you could have default blocks in it
    that would be overwritten when needed, saving lots of typing.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在定义一个`index.txt`页面，您可以在其中有默认块，需要时进行覆盖，从而节省大量输入。
- en: Explaining the last example, Python-wise, is pretty simple. First, we create
    a Jinja2 environment (we talked about this earlier) and tell it how to load our
    templates, then we load the desired template directly. We do not have to bother
    telling the environment how to find parent templates, nor do we need to preload
    them.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 解释最后一个示例，就Python而言，非常简单。首先，我们创建了一个Jinja2环境（我们之前谈到过这个），并告诉它如何加载我们的模板，然后直接加载所需的模板。我们不必费心告诉环境如何找到父模板，也不必预加载它们。
- en: 'The `include` statement is probably the easiest statement so far. It allows
    you to render a template inside another in a very easy fashion. Let''s look at
    an example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`include`语句可能是迄今为止最简单的语句。它允许您以非常简单的方式在另一个模板中呈现模板。让我们看一个例子：'
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding example, we render the `joke.txt` template inside `base.txt`.
    As `joke.txt` is rendered inside `base.txt`, it also has full access to the `base.txt`
    context, so `myvar` is printed normally.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们在`base.txt`中呈现`joke.txt`模板。由于`joke.txt`在`base.txt`中呈现，它也可以完全访问`base.txt`上下文，因此`myvar`会正常打印。
- en: 'Finally, we have the `set` statement. It allows you to define variables for
    inside the template context. Its use is pretty simple:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有`set`语句。它允许您在模板上下文中定义变量。它的使用非常简单：
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding example, if `x` was given by a complex calculation or a database
    query, it would make much more sense to have it *cached* in a variable, if it
    is to be reused across the template. As seen in the example, you can also assign
    a value to multiple variables at once.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，如果`x`是通过复杂计算或数据库查询给出的，如果要在模板中重复使用它，将其*缓存*在一个变量中会更有意义。如示例中所示，您还可以一次为多个变量分配一个值。
- en: Macros
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宏
- en: 'Macros are the closest to coding you''ll get inside Jinja2 templates. The macro
    definition and usage are similar to plain Python functions, so it is pretty easy.
    Let''s try an example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 宏是您在Jinja2模板中最接近编码的地方。宏的定义和使用类似于普通的Python函数，因此非常容易。让我们尝试一个例子：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the preceding example, we create a macro that accepts a `name` argument
    and two optional arguments: `value` and `label`. Inside the `macro` block, we
    define what should be output. Notice we can use other statements inside a macro,
    just like a template. In `index.html` we import the input macro from inside `formfield.html`,
    as if `formfield` was a module and input was a Python function using the `import`
    statement. If needed, we could even rename our input macro like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们创建了一个宏，接受一个`name`参数和两个可选参数：`value`和`label`。在`macro`块内，我们定义了应该输出的内容。请注意，我们可以在宏中使用其他语句，就像在模板中一样。在`index.html`中，我们从`formfield.html`中导入输入宏，就好像`formfield`是一个模块，输入是一个使用`import`语句的Python函数。如果需要，我们甚至可以像这样重命名我们的输入宏：
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can also import `formfield` as a module and use it as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将`formfield`作为模块导入并按以下方式使用它：
- en: '[PRE22]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'When using macros, there is a special case where you want to allow any named
    argument to be passed into the macro, as you would in a Python function (for example,
    `**kwargs`). With Jinja2 macros, these values are, by default, available in a
    `kwargs` dictionary that does not need to be explicitly defined in the macro signature.
    For example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用宏时，有一种特殊情况，您希望允许任何命名参数传递到宏中，就像在Python函数中一样（例如，`**kwargs`）。使用Jinja2宏，默认情况下，这些值在`kwargs`字典中可用，不需要在宏签名中显式定义。例如：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see, `kwargs` is available even though you did not define a `kwargs`
    argument in the macro signature.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，即使您没有在宏签名中定义`kwargs`参数，`kwargs`也是可用的。
- en: 'Macros have a few clear advantages over plain templates, that you notice with
    the `include` statement:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 宏在纯模板上具有一些明显的优势，您可以通过`include`语句注意到：
- en: You do not have to worry about variable names in the template using macros
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用宏时，您不必担心模板中的变量名称
- en: You can define the exact required context for a macro block through the macro
    signature
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过宏签名定义宏块的确切所需上下文
- en: You can define a macro library inside a template and import only what is needed
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在模板中定义一个宏库，并仅导入所需的内容
- en: Commonly used macros in a Web application include a macro to render pagination,
    another to render fields, and another to render forms. You could have others,
    but these are pretty common use cases.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序中常用的宏包括用于呈现分页的宏，用于呈现字段的宏，以及用于呈现表单的宏。您可能还有其他用例，但这些是相当常见的用例。
- en: Tip
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Regarding our previous example, it is good practice to use HTTPS (also known
    as, Secure HTTP) to send sensitive information, such as passwords, over the Internet.
    Be careful about that!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们之前的例子，使用HTTPS（也称为安全HTTP）发送敏感信息，如密码，通过互联网是一个良好的做法。要小心！
- en: Extensions
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展
- en: 'Extensions are the way Jinja2 allows you to extend its vocabulary. Extensions
    are not enabled by default, so you can enable an extension only when and if you
    need, and start using it without much trouble:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展是Jinja2允许您扩展其词汇的方式。扩展默认情况下未启用，因此只有在需要时才能启用扩展，并且可以在不太麻烦的情况下开始使用它：
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the preceding code, we have an example where you create an environment with
    two extensions enabled: `do` and `with`. Those are the extensions we will study
    in this chapter.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们有一个示例，其中您创建了一个启用了两个扩展的环境：`do`和`with`。这些是我们将在本章中学习的扩展。
- en: 'As the name suggests, the `do` extension allows you to "do stuff". Inside a
    `do` tag, you''re allowed to execute Python expressions with full access to the
    template context. Flask-Empty, a popular Flask boilerplate available at [https://github.com/italomaia/flask-empty](https://github.com/italomaia/flask-empty)
    uses the `do` extension to update a dictionary in one of its macros, for example.
    Let''s see how we could do the same:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`do`扩展允许您“做一些事情”。在`do`标记内，您可以执行Python表达式，并完全访问模板上下文。Flask-Empty是一个流行的Flask样板，可在[https://github.com/italomaia/flask-empty](https://github.com/italomaia/flask-empty)上找到，它使用`do`扩展来更新其宏之一中的字典。让我们看看我们如何做到这一点：
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the preceding example, we create the `x` variable with a dictionary, then
    we update it with `{3: ''bar''}`. You don''t usually need to use the `do` extension
    but, when you do, a lot of coding is saved.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的例子中，我们使用一个字典创建了`x`变量，然后用`{3: ''bar''}`更新了它。通常情况下，您不需要使用`do`扩展，但是当您需要时，可以节省大量编码。'
- en: 'The `with` extension is also very simple. You use it whenever you need to create
    block scoped variables. Imagine you have a value you need cached in a variable
    for a brief moment; this would be a good use case. Let''s see an example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`with`扩展也非常简单。每当您需要创建块作用域变量时，都可以使用它。想象一下，您有一个需要在变量中缓存一小段时间的值；这将是一个很好的用例。让我们看一个例子：'
- en: '[PRE26]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As seen in the example, `age` exists only inside the `with` block. Also, variables
    set inside a `with` block will only exist inside it. For example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如示例所示，`age`仅存在于`with`块内。此外，在`with`块内设置的变量将仅在其中存在。例如：
- en: '[PRE27]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Filters
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤器
- en: Filters are a marvelous thing about Jinja2! This tool allows you to process
    a constant or variable before printing it to the template. The goal is to implement
    the formatting you want, strictly in the template.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器是Jinja2的一个奇妙之处！这个工具允许您在将常量或变量打印到模板之前对其进行处理。目标是在模板中严格实现您想要的格式。
- en: 'To use a filter, just call it using the pipe operator like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用过滤器，只需使用管道运算符调用它，就像这样：
- en: '[PRE28]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Its name is passed to the **capitalize** filter that processes it and returns
    the capitalized value. To inform arguments to the filter, just call it like a
    function, like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 它的名称被传递给**capitalize**过滤器进行处理，并返回大写的值。要将参数传递给过滤器，只需像调用函数一样调用它，就像这样：
- en: '[PRE29]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `join` filter will join all values from the passed iterable, putting the
    provided argument between them.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`join`过滤器将连接传递的可迭代值，将提供的参数放在它们之间。'
- en: 'Jinja2 has an enormous quantity of available filters by default. That means
    we can''t cover them all here, but we can certainly cover a few. `capitalize`
    and `lower` were seen already. Let''s look at some further examples:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Jinja2默认提供了大量可用的过滤器。这意味着我们无法在这里覆盖它们所有，但我们当然可以覆盖一些。`capitalize`和`lower`已经看到了。让我们看一些进一步的例子：
- en: '[PRE30]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Try the preceding example to see exactly what each filter does.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试前面的例子，以确切了解每个过滤器的作用。
- en: 'After reading this much about Jinja2, you''re probably thinking: "Jinja2 is
    cool but this is a book about Flask. Show me the Flask stuff!". Ok, ok, I can
    do that!'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读了这么多关于Jinja2的内容，您可能会想：“Jinja2很酷，但这是一本关于Flask的书。给我看看Flask的东西！”好的，好的，我可以做到！
- en: Of what we have seen so far, almost everything can be used with Flask with no
    modifications. As Flask manages the Jinja2 environment for you, you don't have
    to worry about creating file loaders and stuff like that. One thing you should
    be aware of, though, is that, because you don't instantiate the Jinja2 environment
    yourself, you can't really pass to the class constructor, the extensions you want
    to activate.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们迄今所见，几乎一切都可以在Flask中使用而无需修改。由于Flask为您管理Jinja2环境，因此您不必担心创建文件加载程序之类的事情。但是，您应该知道的一件事是，由于您不是自己实例化Jinja2环境，因此您实际上无法将要激活的扩展传递给类构造函数。
- en: 'To activate an extension, add it to Flask during the application setup as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活扩展程序，请在应用程序设置期间将其添加到Flask中，如下所示：
- en: '[PRE31]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Messing with the template context
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搞乱模板上下文
- en: As seen in [Chapter 2](ch02.html "Chapter 2. First App, How Hard Could it Be?"),
    *First App, How Hard Could it Be?*, you can use the `render_template` method to
    load a template from the `templates` folder and then render it as a response.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。第一个应用，有多难？")中所见，*第一个应用，有多难？*，您可以使用`render_template`方法从`templates`文件夹加载模板，然后将其呈现为响应。
- en: '[PRE32]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you want to add values to the template context, as seen in some of the examples
    in this chapter, you would have to add non-positional arguments to `render_template`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想向模板上下文添加值，就像本章中的一些示例中所示，您将不得不向`render_template`添加非位置参数：
- en: '[PRE33]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the preceding example, `my_age` would be available in the `index.html` context,
    where `{{ my_age }}` would be translated to 28\. `my_age` could have virtually
    any value you want to exhibit, actually.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，`my_age`将在`index.html`上下文中可用，其中`{{ my_age }}`将被翻译为28。`my_age`实际上可以具有您想要展示的任何值。
- en: 'Now, what if you want *all* your views to have a specific value in their context,
    like a version value—some special code or function; how would you do it? Flask
    offers you the `context_processor` decorator to accomplish that. You just have
    to annotate a function that returns a dictionary and you''re ready to go. For
    example:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您希望*所有*视图在其上下文中具有特定值，例如版本值-一些特殊代码或函数；您该怎么做？Flask为您提供了`context_processor`装饰器来实现这一点。您只需注释一个返回字典的函数，然后就可以开始了。例如：
- en: '[PRE34]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how to render templates using only Jinja2, how control
    statements look and how to use them, how to write a comment, how to print variables
    in a template, how to write and use macros, how to load and use extensions, and
    how to register context processors. I don't know about you, but this chapter felt
    like a lot of information! I strongly advise you to run the experiment with the
    examples. Knowing your way around Jinja2 will save you a lot of headaches.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何仅使用Jinja2呈现模板，控制语句的外观以及如何使用它们，如何编写注释，如何在模板中打印变量，如何编写和使用宏，如何加载和使用扩展，以及如何注册上下文处理器。我不知道您怎么看，但这一章节感觉像是大量的信息！我强烈建议您运行示例进行实验。熟悉Jinja2将为您节省大量麻烦。
- en: Next chapter, we will be studying forms with Flask. Expect a lot of examples
    and complementary code, as forms are the doors you open from your Web application
    to the Web. Most problems arise from the Web, as well as most of your data.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章，我们将学习使用Flask的表单。期待许多示例和补充代码，因为表单是您从Web应用程序打开到Web的大门。大多数问题都来自Web，您的大多数数据也是如此。
