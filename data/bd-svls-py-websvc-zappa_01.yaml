- en: Amazon Web Services for Serverless
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于无服务器的亚马逊网络服务
- en: In this chapter, we are going to learn about Amazon Web Services for managing
    a serverless infrastructure. We will be exploring the AWS workflow to create a
    serverless application. We will learn about the manual process for creating a
    basic serverless application and an automated process using the AWS **CLI** (**command
    line interface**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习关于亚马逊网络服务管理无服务器基础架构。我们将探索AWS工作流程以创建无服务器应用程序。我们将学习手动创建基本无服务器应用程序的过程，以及使用AWS
    CLI进行自动化处理的过程。
- en: 'Topics we will cover in this chapter include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的主题包括：
- en: Transitioning from the traditional server to serverless
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从传统服务器过渡到无服务器
- en: Getting started with AWS Lambda
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用AWS Lambda
- en: How AWS Lambda works
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Lambda的工作原理
- en: Executing a Lambda function
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行Lambda函数
- en: Creating Lambda triggers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Lambda触发器
- en: Creating a serverless RESTful API
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建无服务器RESTful API
- en: AWS Lambda interaction by the AWS CLI
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过AWS CLI与AWS Lambda进行交互
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'There are some technical prerequisites before moving ahead. We are going to
    demonstrate AWS through a web console and the AWS CLI. The following prerequisites
    should be considered:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，有一些技术先决条件。我们将通过Web控制台和AWS CLI演示AWS。应考虑以下先决条件：
- en: All the demonstration has been tested on a Linux machine with Ubuntu 16.04\.
    We have shared the links to each library used in this book. You can get the detailed
    information about the installation and configuration with a specific platform.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有演示都在Ubuntu 16.04的Linux机器上进行了测试。我们已经分享了本书中使用的每个库的链接。您可以获取有关特定平台的安装和配置的详细信息。
- en: We are using open source libraries and software. Hence, for each library, we
    are going to share its official documentation links. You can refer to those links
    for detailed information about a specific library.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用开源库和软件。因此，对于每个库，我们将分享其官方文档链接。您可以参考这些链接以获取有关特定库的详细信息。
- en: Transitioning from traditional server to serverless
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从传统服务器过渡到无服务器
- en: Web hosting has changed drastically since it started. Physical server machines
    were shared among many web applications, and it was a really big challenge when
    it came to scale. It proved to be very expensive for any individual or company
    to afford an entire server machine to host their web application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 自从Web托管开始以来，Web托管发生了巨大变化。物理服务器机器被多个Web应用程序共享，当需要扩展时，这是一个真正的挑战。对于任何个人或公司来说，购买整个服务器机器来托管其Web应用程序都非常昂贵。
- en: But, thanks to **virtualization**, the need for a physical server for any web
    application has been eliminated. Virtualization provides the ability to create
    many virtual servers as opposed to a single physical server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，由于虚拟化，任何Web应用程序都不需要物理服务器。虚拟化提供了创建许多虚拟服务器的能力，而不是单个物理服务器。
- en: Now, the new era of serverless is making the developer's life easier, as we
    can focus our hard work on development instead of investing time and money on
    deployment.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，无服务器的新时代使开发人员的生活变得更加轻松，因为我们可以将辛勤工作集中在开发上，而不是花时间和金钱在部署上。
- en: Amazon introduced **Amazon Elastic Compute Cloud** (**Amazon EC2**) as a cloud
    computing solution. Amazon EC2 makes it possible to create an array of virtual
    servers or instances the Amazon Cloud without investing in hardware. You can scale
    it as per your requirements in terms of networking, computing, and storage.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊推出了亚马逊弹性计算云（Amazon EC2）作为云计算解决方案。亚马逊EC2使得在亚马逊云中创建一系列虚拟服务器或实例成为可能，而无需投资于硬件。您可以根据网络、计算和存储的需求进行扩展。
- en: The serverless approach is nothing but the process of eliminating the manual
    workload of setting up the hosting environment. Cloud service providers provide
    serverless services, and so you never actually own any server. Instead, the cloud
    service provider executes your code in a high-availability infrastructure.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器方法只是消除设置托管环境的手动工作量的过程。云服务提供商提供无服务器服务，因此您实际上从未拥有任何服务器。相反，云服务提供商在高可用性基础设施中执行您的代码。
- en: Getting started with AWS Lambda
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用AWS Lambda
- en: Many cloud service providers introduced different services for the serverless
    infrastructure. Amazon introduced AWS Lambda as a compute service, where you just
    provide your code and AWS Lambda executes the code in a highly scalable infrastructure
    by itself. You don't need to worry about managing the services manually. You need
    to pay for the compute time of your code execution, and there are no charges when
    your code is not running.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 许多云服务提供商为无服务器基础架构引入了不同的服务。亚马逊推出了AWS Lambda作为计算服务，您只需提供代码，AWS Lambda就会在高度可扩展的基础设施中执行代码。您无需担心手动管理服务。您需要支付代码执行的计算时间，当您的代码未运行时则不收费。
- en: AWS Lambda executes the code as needed in response to events such as data storage
    events on an S3 bucket, Amazon DynamoDB events, and HTTP request events via the
    API Gateway. AWS Lambda is able to execute the code based on scheduled time events
    via AWS CloudWatch Events. AWS Lambda supports Python, Node.js, C#, and Java.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda根据需要执行代码，以响应诸如S3存储桶上的数据存储事件、Amazon DynamoDB事件和通过API Gateway的HTTP请求事件等事件。AWS
    Lambda能够根据AWS CloudWatch Events的计划时间事件执行代码。AWS Lambda支持Python、Node.js、C#和Java。
- en: Amazon **Simple Storage Service** (**S3**) is a storage service provided by
    Amazon. It has a simple web interface to store the data. Amazon S3 has associated
    services events that can be used by other services.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊简单存储服务（S3）是亚马逊提供的存储服务。它具有一个简单的Web界面来存储数据。亚马逊S3具有可供其他服务使用的相关服务事件。
- en: How AWS Lambda works
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Lambda的工作原理
- en: You need to write a function, which will be executed by AWS Lambda on your behalf.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要编写一个函数，该函数将由AWS Lambda代表您执行。
- en: AWS Lambda is implemented on a container-based model that supports a runtime
    environment and executes the code as per the Lambda function configuration. When
    the Lambda function is invoked, it launches the container (an execution environment)
    based on the AWS Lambda configuration and enables the basic runtime environment,
    which is required to execute the code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda是基于容器的模型实现的，支持运行时环境，并根据Lambda函数的配置执行代码。当调用Lambda函数时，它会根据AWS Lambda配置启动容器（执行环境），并启用基本的运行时环境，这是执行代码所需的。
- en: 'Let''s start with some practical work:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些实际工作开始：
- en: To create a Lambda function, you must have an AWS account. If you don't have
    an AWS account, then you need to sign up on AWS ([https://aws.amazon.com/](https://aws.amazon.com/))
    by providing some basic contact and payment information, as it's essential information
    required by Amazon.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个Lambda函数，您必须拥有AWS账户。如果您没有AWS账户，那么您需要在AWS上注册（[https://aws.amazon.com/](https://aws.amazon.com/)），提供一些基本的联系和付款信息，因为这是亚马逊所需的基本信息。
- en: 'Go to the Lambda home page ([https://console.aws.amazon.com/lambda/home](https://console.aws.amazon.com/lambda/home)).
    Click on the Create a function button. This will redirect you to the **Create
    function** page, which is described in the next step. Take a look at the following
    screenshot:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Lambda主页（[https://console.aws.amazon.com/lambda/home](https://console.aws.amazon.com/lambda/home)）。单击“创建函数”按钮。这将重定向您到**创建函数**页面，下一步将描述该页面。请查看以下屏幕截图：
- en: '![](img/00005.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00005.jpeg)'
- en: 'AWS provides three different options to create a Lambda function, such as Author
    from scratch, Blueprints, and Serverless Application Repository. We will be using
    the Blueprint option, which has some built-in Lambda functions. We can choose
    these blueprints based on our requirements from the search bar, where you can
    filter by tag and attributes or search by keywords:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS提供了三种不同的选项来创建Lambda函数，比如从头开始创建、蓝图和无服务器应用程序存储库。我们将使用蓝图选项，其中包含一些内置的Lambda函数。我们可以根据搜索栏中的要求选择这些蓝图，您可以通过标签和属性进行过滤，或者通过关键字搜索：
- en: '![](img/00006.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00006.jpeg)'
- en: 'Let''s choose a hello-world-python blueprint. Once we choose the blueprint,
    we need to set up the basic information about the Lambda function. This information
    includes the Lambda function''s Name **and **Role, as shown in the following screenshot:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们选择一个hello-world-python蓝图。一旦我们选择了蓝图，我们需要设置关于Lambda函数的基本信息。这些信息包括Lambda函数的名称和角色，如下面的屏幕截图所示：
- en: '![](img/00007.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00007.jpeg)'
- en: Here, Name will be a unique identification for your Lambda function and Role
    defines the permissions of your Lambda function.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，名称将是您的Lambda函数的唯一标识，而角色定义了您的Lambda函数的权限。
- en: 'There are three options available for creating a role:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种选项可用于创建角色：
- en: Choose an existing role
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择现有角色
- en: Create new role from template(s)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从模板创建新角色
- en: Create a custom role
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义角色
- en: 'Let''s look at them in more detail:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看一下它们：
- en: '**Choose an existing role**: This allows you to select the previously created
    role.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择现有角色**：这允许您选择先前创建的角色。'
- en: '**Create new role from template(s)**: Here, you need to define a role name.
    AWS Lambda provides ready-made built-in role policy templates that have pre-configured
    permissions. These are based on other AWS services-related permissions required
    by the AWS Lambda function. On any role selection, Lambda will automatically add
    the logging permission to CloudWatch (AWS logging service), as this is the basic
    permission required by Lambda.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从模板创建新角色**：在这里，您需要定义一个角色名称。AWS Lambda提供了预先配置的内置角色策略模板，具有预配置的权限。这些权限基于AWS
    Lambda函数所需的其他AWS服务相关权限。在任何角色选择上，Lambda将自动将日志记录权限添加到CloudWatch（AWS日志记录服务），因为这是Lambda所需的基本权限。'
- en: '**Create a custom role**: AWS provides an additional privilege to create a
    customized role to access AWS Lambda. Here, you can define the role based on your
    requirement.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建自定义角色**：AWS提供了额外的权限来创建一个定制的角色来访问AWS Lambda。在这里，您可以根据自己的需求定义角色。'
- en: Let's create the `HelloWorld` Lambda function with some role. Here, I chose
    the S3 object read-only permission policy template.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个带有某些角色的`HelloWorld` Lambda函数。在这里，我选择了S3对象只读权限策略模板。
- en: 'The following screenshot describes the newly created `HelloWorld` Lambda function:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下屏幕截图描述了新创建的`HelloWorld` Lambda函数：
- en: '![](img/00008.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00008.jpeg)'
- en: HelloWorld Lambda function
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: HelloWorld Lambda函数
- en: 'The Lambda function includes three sections:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda函数包括三个部分：
- en: Configuration
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置
- en: Triggers
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发器
- en: Monitoring
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控
- en: Let's look at detailed information about the configuration and monitoring. We
    will have a separate section for triggers.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下关于配置和监控的详细信息。我们将为触发器设置一个单独的部分。
- en: Configuration
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: 'Lambda execution depends on the configuration setting. Configuring the Lambda
    function requires the following details:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda执行取决于配置设置。配置Lambda函数需要以下详细信息：
- en: Function code
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数代码
- en: Environment variables
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量
- en: Tags
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签
- en: Execution role
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行角色
- en: Basic settings
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本设置
- en: Network
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络
- en: Debugging and error handling
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试和错误处理
- en: Function code
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数代码
- en: 'Here, you are required to write the code. The Lambda function has a predefined
    pattern for writing the code. While writing the code, you need to understand the
    context. Lambda provides three kinds of feasibility, which decides your runtime
    execution for the code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您需要编写代码。Lambda函数有一个预定义的编写代码的模式。在编写代码时，您需要理解上下文。Lambda提供了三种可行性，这决定了代码的运行时执行：
- en: '**Code entry type**: This section provides three options to decide the entry
    type for your code, such as editing code inline, uploading a ZIP file, and uploading
    a file from Amazon S3.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码输入类型**：此部分提供了三种选项来决定代码的输入类型，比如内联编辑代码、上传ZIP文件和从Amazon S3上传文件。'
- en: '**Runtime**: This section provides options to decide the runtime programming
    language context for your code, such as Python, C#, NodeJS, and Java.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时**：此部分提供了选项来决定代码的运行时编程语言上下文，比如Python、C#、NodeJS和Java。'
- en: '**Handler**: A handler defines the path to your method/function, such as `<filename>.<method_name>`.
    For example, if you want to execute a function named as a `handler`, which is
    defined in `main.py`, then it would be `main.handler`.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序：处理程序定义了您的方法/函数的路径，例如`<filename>.<method_name>`。例如，如果您想要执行一个名为`handler`的函数，该函数在`main.py`中定义，那么它将是`main.handler`。
- en: Let's get back to our newly created hello world function named `lambda_handler`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们新创建的名为`lambda_handler`的hello world函数。
- en: 'Here, the handler value is defined as `lambda_function.lambda_handler`, where
    `lambda_function.py` is the filename and `lambda_handler` is the method name:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，处理程序的值被定义为`lambda_function.lambda_handler`，其中`lambda_function.py`是文件名，`lambda_handler`是方法名：
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`Lambda_handler` accepts two positional arguments, `event` and `context`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`Lambda_handler`接受两个位置参数，`event`和`context`：'
- en: '`event`: This argument contains event-related information. For example, if
    we configure the Lambda function with Amazon S3 bucket events, then we would get
    S3 bucket information in event arguments, such as bucket name, region, and so
    on.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event`：此参数包含与事件相关的信息。例如，如果我们配置Lambda函数与Amazon S3存储桶事件，那么我们将在事件参数中获得S3存储桶信息，例如存储桶名称，区域等。'
- en: '`context`: This argument contains the context-related information that may
    be required during runtime for code execution.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context`：此参数包含可能在运行时需要的与上下文相关的信息，以供代码执行。'
- en: Environment variables
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境变量
- en: You can set the environment variables in key-value pairs, which can be utilized
    in your code.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以键值对的形式设置环境变量，这些变量可以在您的代码中使用。
- en: Tags
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签
- en: You can use tags for grouping and filtering your Lambda functions. You may have
    multiple Lambda functions with different regions, so tags help make Lambda functions
    more manageable.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用标签对Lambda函数进行分组和过滤。您可能有多个具有不同区域的Lambda函数，因此标签有助于使Lambda函数更易管理。
- en: Execution role
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行角色
- en: As we previously discussed the role and permission while creating the Lambda
    function, Lambda provides the capability to edit the existing role that you chose
    at the time of the Lambda function creation.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，在创建Lambda函数时角色和权限，Lambda提供了编辑您在创建Lambda函数时选择的现有角色的能力。
- en: Basic settings
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本设置
- en: Under basic settings, you can configure the memory and execution timeout. Lambda
    supports memory from 128 MB to 1,536 MB. Timeout execution is in seconds; the
    default timeout execution Lambda supports is 300 seconds. This setting helps you
    to control the code execution performance and cost for your Lambda function.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在基本设置下，您可以配置内存和执行超时。Lambda支持的内存范围从128 MB到1,536 MB。超时执行以秒为单位；Lambda支持的默认超时执行时间为300秒。此设置可帮助您控制Lambda函数的代码执行性能和成本。
- en: Network
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络
- en: In the network section, you can configure the network access to your Lambda
    function.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络部分，您可以配置对Lambda函数的网络访问。
- en: AWS provides a **VPC** (**Virtual Private Cloud**) service to create a virtual
    network, which allows access to AWS services. You can also configure the networking
    as per your requirements.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: AWS提供了**VPC**（虚拟私有云）服务，用于创建允许访问AWS服务的虚拟网络。您还可以根据自己的需求配置网络。
- en: We will discuss the Lambda function with VPC in the upcoming chapters. As of
    now, we will choose No VPC in the network section.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中讨论带有VPC的Lambda函数。目前，我们将在网络部分选择无VPC。
- en: Debugging and error handling
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试和错误处理
- en: AWS Lambda automatically retries the failed asynchronous invocation. But you
    can also configure the **DLQ** (**Dead Letter Queue**), such as the SQS queue
    or SNS topic. To configure the DLQ, the Lambda function must have permission to
    access DLQ resources.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda会自动重试失败的异步调用。但是您也可以配置**DLQ**（死信队列），例如SQS队列或SNS主题。要配置DLQ，Lambda函数必须具有访问DLQ资源的权限。
- en: Now that we understand the configuration, let's go ahead with the execution
    of the Lambda function.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们了解了配置，让我们继续执行Lambda函数。
- en: Let's look at the *Monitoring* section, which describes the activity related
    to our Lambda function. It can be used to analyze the performance of our Lambda
    function execution.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下*监控*部分，它描述了与我们的Lambda函数相关的活动。它可以用于分析我们的Lambda函数执行的性能。
- en: Monitoring
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控
- en: AWS CloudWatch is a monitoring service for AWS resources and manages all activity
    logs. It creates metric data to generate statistical data. CloudWatch enables
    real-time monitoring of AWS resources. It also monitors hardware information related
    to AWS EC2 or RDS database instances and other resources.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudWatch是AWS资源的监控服务，并管理所有活动日志。它创建指标数据以生成统计数据。CloudWatch实现了对AWS资源的实时监控。它还监视与AWS
    EC2或RDS数据库实例以及其他资源相关的硬件信息。
- en: 'Lambda monitoring sections display the last 24 hours'' analytics data related
    to the Lambda function''s activity and performance. The following screenshot shows
    the monitored analytics information about our hello world Lambda function:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda监控部分显示与Lambda函数活动和性能相关的最近24小时的分析数据。以下屏幕截图显示了我们的hello world Lambda函数的监控分析信息：
- en: '![](img/00009.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00009.jpeg)'
- en: Let's move on to the next section, where we are going to look at the Lambda
    function execution.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续下一节，我们将看一下Lambda函数的执行。
- en: Executing the Lambda function
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行Lambda函数
- en: AWS Lambda supports several methods of execution. Let's start with the basic
    execution from its own web console interface. AWS Lambda provides the capability
    to test the function manually, where you can define the test event context. If
    you want to test against some other Amazon services, then there are built-in event
    templates available.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda支持多种执行方法。让我们从其自己的Web控制台界面开始基本执行。AWS Lambda提供了手动测试函数的能力，您可以在其中定义测试事件上下文。如果您想针对其他Amazon服务进行测试，则有内置的事件模板可用。
- en: 'The following screenshot demonstrates the test event creation:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图演示了测试事件的创建：
- en: '![](img/00010.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00010.jpeg)'
- en: As shown in the preceding screenshot, a single Lambda function can have a maximum
    of 10 test events and the test events are persisted, so you can reuse them whenever
    you want to test your Lambda function.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，单个Lambda函数最多可以有10个测试事件，并且测试事件是持久的，因此您可以在需要测试Lambda函数时重复使用它们。
- en: 'I created the test event with the event name as `HelloWorld` and now I am going
    to execute the `HelloWorld` function, when converting the Lambda function as a
    Python microservice, as shown in the following code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用事件名称“HelloWorld”创建了测试事件，现在我将执行“HelloWorld”函数，将Lambda函数转换为Python微服务，如下所示：
- en: '[PRE1]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, we are printing the event data and then returning back to the `Hello
    World` string:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们打印事件数据，然后返回到“Hello World”字符串：
- en: '![](img/00011.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00011.jpeg)'
- en: Lambda manages some information on every request execution, such as a request
    ID and billing information. The Lambda price model is based on the time consumption
    on request processing, whereas the request ID is the unique identification of
    every request.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda在每个请求执行上管理一些信息，例如请求ID和计费信息。Lambda价格模型是基于请求处理的时间消耗，而请求ID是每个请求的唯一标识。
- en: In the Log output, you can see all the print statements output. Now, let's raise
    an error and see how Lambda responds and returns the logs.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在日志输出中，您可以看到所有的打印语句输出。现在，让我们引发一个错误，看看Lambda如何响应并返回日志。
- en: 'We are going to replace the current code with the following snippet:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用以下片段替换当前代码：
- en: '[PRE2]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot is the log snippet of the execution result:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图是执行结果的日志片段：
- en: '![](img/00012.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00012.jpeg)'
- en: Here, Lambda responded with the complete stack trace information and logged
    it as well. You can check the CloudWatch logs, as CloudWatch is preconfigured
    with the AWS Lambda execution.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Lambda以完整的堆栈跟踪信息做出了响应，并将其记录下来。您可以检查CloudWatch日志，因为CloudWatch已预先配置了AWS Lambda执行。
- en: We learned about the Lambda function execution from the Lambda console, and
    now it's time to execute the Lambda function from a schedule trigger. In our project,
    we often need to have a cron job schedule to execute some functionality at a particular
    time period.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从Lambda控制台了解了Lambda函数的执行，现在是时候从计划触发器执行Lambda函数了。在我们的项目中，我们经常需要有一个cron作业计划，在特定时间段执行一些功能。
- en: Lambda triggers will help us to set up the triggers based on events. Let's move
    ahead to introduce the trigger to our hello world function.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda触发器将帮助我们根据事件设置触发器。让我们继续介绍如何向我们的hello world函数引入触发器。
- en: Creating Lambda triggers
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Lambda触发器
- en: The Lambda function can be configured in response to events. AWS provides a
    list of triggers that support lots of events. These triggers belong to their associated
    AWS services.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda函数可以根据事件进行配置。AWS提供了支持许多事件的触发器列表。这些触发器属于它们关联的AWS服务。
- en: You can add a trigger to your Lambda function from the triggers section.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从触发器部分向Lambda函数添加触发器。
- en: 'I am going to slightly modify the hello world Lambda function. Here, we are
    printing the request ID, which is received in the context object as an `aws_request_id`
    attribute. It also prints the timestamp:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我将稍微修改hello world Lambda函数。在这里，我们打印请求ID，该ID作为`aws_request_id`属性在上下文对象中接收。它还打印时间戳：
- en: '![](img/00013.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00013.jpeg)'
- en: Now, we are going to add a trigger to our Lambda function that will execute
    our Lambda function every minute.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将向我们的Lambda函数添加一个触发器，该触发器将每分钟执行我们的Lambda函数。
- en: 'The following screenshot shows the Add trigger flow, where you can easily configure
    any trigger from the left-hand panel with your Lambda function:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了“添加触发器”流程，在这里您可以轻松地从左侧面板配置任何触发器与您的Lambda函数：
- en: '![](img/00014.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00014.jpeg)'
- en: We are going to configure the CloudWatch Events trigger. CloudWatch Events deliver
    near real-time system events that describe the changes in AWS resources.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将配置CloudWatch Events触发器。CloudWatch Events提供描述AWS资源更改的几乎实时系统事件。
- en: You can set up simple event rules with operational events in AWS resources as
    they occur, and you can also schedule automated events that self-trigger based
    on cron or the rate expression.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以设置简单的事件规则，以在发生AWS资源的操作事件时进行操作，并且还可以安排自动事件，根据cron或速率表达式自触发。
- en: The cron and rate expression are two different methods to define a schedule
    expression. The cron expressions have six required fields, such as cron (fields),
    and the rate expressions have two required fields, such as rate (value unit).
    These methods help us to define a schedule expression. You can find detailed information
    at [http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html.](http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: cron和速率表达式是定义计划表达式的两种不同方法。cron表达式有六个必填字段，如cron（字段），而速率表达式有两个必填字段，如速率（值单位）。这些方法帮助我们定义计划表达式。您可以在[http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html](http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html)找到详细信息。
- en: Here, we are going to schedule a rate expression to execute our hello world
    Lambda function every minute. We need to select CloudWatch Events from the triggers
    dropdown.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将安排一个速率表达式，以便每分钟执行我们的hello world Lambda函数。我们需要从触发器下拉菜单中选择CloudWatch Events。
- en: To create the CloudWatch event rule, we are going to create a new rule. We need
    to set up the rule with some required information, such as the rule name, which
    is a unique identifier. So, we are going to name the rule as `hello-world-every-minute`and
    the rule type as either the event pattern or schedule expression. In our case,
    it would be a schedule expression as the rate (1 minute), as shown in the preceding
    screenshot.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建CloudWatch事件规则，我们将创建一个新规则。我们需要使用一些必需的信息设置规则，例如规则名称，这是一个唯一标识符。因此，我们将规则命名为“hello-world-every-minute”，规则类型为事件模式或计划表达式。在我们的情况下，它将是一个计划表达式，速率（1分钟），如前面的屏幕截图所示。
- en: Once we set the trigger and enable it, the scheduled event would get triggered
    as per the schedule expression. Let's see our hello world Lambda logs after five
    minutes.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置了触发器并启用它，按照计划表达式，计划事件将被触发。让我们在五分钟后查看我们的hello world Lambda日志。
- en: 'To view the logs related to any services, you need to do the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看与任何服务相关的日志，您需要执行以下操作：
- en: Open the CloudWatch console at [https://console.aws.amazon.com/cloudwatch/](https://console.aws.amazon.com/cloudwatch/)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://console.aws.amazon.com/cloudwatch/](https://console.aws.amazon.com/cloudwatch/)上打开CloudWatch控制台
- en: In the navigation pane, choose Logs
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航窗格中，选择日志
- en: Select the log group related to the `HelloWorld` Lambda function
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择与`HelloWorld` Lambda函数相关的日志组
- en: 'The following screenshot describes the CloudWatch log access:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图描述了CloudWatch日志访问：
- en: '![](img/00015.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00015.jpeg)'
- en: 'By selecting the `HelloWorld` Lambda function log groups, you see the logging
    activity related to our `HelloWorld` Lambda function. The following screenshot
    shows the logs of the `HelloWorld` function:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择`HelloWorld` Lambda函数日志组，您可以看到与我们的`HelloWorld` Lambda函数相关的日志活动。以下屏幕截图显示了`HelloWorld`函数的日志：
- en: '![](img/00016.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00016.jpeg)'
- en: Here, you can see that our hello world Lambda function is executed exactly every
    minute since the time we have enabled the trigger.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到我们的hello world Lambda函数自从我们启用了触发器以来每分钟执行一次。
- en: Now, let's move ahead to create a serverless RESTful API.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续创建一个无服务器的RESTful API。
- en: Serverless RESTful API
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器RESTful API
- en: Let's understand the microservice scenario where we are going to deploy a serverless
    hello world function that will respond to HTTP events through the API Gateway.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解微服务场景，我们将部署一个无服务器的hello world函数，通过API Gateway响应HTTP事件。
- en: The Amazon API Gateway service enables you to create, manage, and publish a
    RESTful API to interact with AWS resources at any scale. The API Gateway provides
    an interface where you expose the backend through the REST application programming
    interface.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon API Gateway服务使您能够创建、管理和发布与任何规模的AWS资源交互的RESTful API。API Gateway提供了一个接口，通过该接口您可以通过REST应用程序编程接口公开后端。
- en: To enable the AWS serverless infrastructure, the API Gateway plays an important
    role, as it can be configured to execute the Lambda functions.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用AWS无服务器基础设施，API Gateway发挥着重要作用，因为它可以配置为执行Lambda函数。
- en: Now, we are going to configure an API Gateway service to executes the Lambda
    function
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将配置一个API Gateway服务来执行Lambda函数
- en: 'Here is the hello world function:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这是hello world函数：
- en: '![](img/00017.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00017.jpeg)'
- en: When we integrate the AWS Lambda function with the API Gateway, the Lambda function
    must return a dictionary object with the required keys as `statusCode`, `headers`,
    and `body`.  The value of the `body` attribute must be in a JSON string. Hence,
    we converted the Python dictionary into a JSON string.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将AWS Lambda函数与API Gateway集成时，Lambda函数必须返回一个带有所需键的字典对象，如`statusCode`、`headers`和`body`。`body`属性的值必须是JSON字符串。因此，我们将Python字典转换为JSON字符串。
- en: 'It''s time to integrate the API Gateway with the Lambda function. As we have
    seen in our previous discussion about triggers, we are going to add a trigger
    with the API Gateway:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将API Gateway与Lambda函数集成了。正如我们在之前关于触发器的讨论中所看到的，我们将使用API Gateway添加一个触发器：
- en: '![](img/00018.jpeg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00018.jpeg)'
- en: We are going to create an API Gateway service with the name as `LambdaMicroservice`.
    The API Gateway enables you to create and maintain a deployment stage as per your
    requirement.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`LambdaMicroservice`的API Gateway服务。API Gateway使您能够根据需要创建和维护部署阶段。
- en: If you want to secure your API then you have two options—using AWS IAM and opening
    it with the access key, or keeping it as open, making it publicly available.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想保护您的API，那么您有两个选项——使用AWS IAM并使用访问密钥打开它，或者保持它开放，使其公开可用。
- en: AWS **IAM** (**Identity Access Management**) is an AWS cloud service that is helpful
    in creating a secure access credential in order to access AWS cloud services.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: AWS **IAM**（身份访问管理）是AWS云服务，有助于创建安全访问凭据以访问AWS云服务。
- en: 'Opening with the access key feature allows you to generate the key from the
    API Gateway console. In our case, we are going to keep the security open only,
    as we need to access our API publicly:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用访问密钥功能允许您从API Gateway控制台生成密钥。在我们的情况下，我们只会保持安全性开放，因为我们需要公开访问我们的API：
- en: '![](img/00019.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00019.jpeg)'
- en: Once you add and save the changes, the REST API is ready within a few seconds.
    The invoke URL is our REST API endpoint.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加并保存更改，REST API将在几秒钟内准备就绪。调用URL就是我们的REST API端点。
- en: 'Let''s hit the invoke URL using the `curl` command-line tool and see what happens:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`curl`命令行工具访问调用URL并查看发生了什么：
- en: '[PRE3]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That's it. We are done with creating a serverless RESTful API using AWS Lambda
    and the API Gateway. Now, we are going to see how we can interact with the AWS
    services using the AWS CLI.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我们已经使用AWS Lambda和API Gateway创建了一个无服务器的RESTful API。现在，我们将看看如何使用AWS CLI与AWS服务进行交互。
- en: AWS Lambda interaction with theAWS CLI
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Lambda与AWS CLI的交互
- en: The AWS CLI is an open source tool developed on top of AWS SDK for Python using
    the Boto library, which provides commands to interact with AWS services. With
    the very minimum configuration, you can manage any AWS services from the CLI.
    It provides direct access to AWS services and you can develop shell scripts to
    manage your resources.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CLI是在AWS SDK for Python的基础上开发的开源工具，使用Boto库提供与AWS服务交互的命令。通过非常少的配置，您可以从CLI管理任何AWS服务。它提供对AWS服务的直接访问，您可以开发shell脚本来管理您的资源。
- en: 'For example, if you want to upload the file to the S3 bucket, then you can
    do so by just a single command from the CLI:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想将文件上传到S3存储桶，那么您只需通过CLI执行一个命令即可完成：
- en: '[PRE4]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`aws s3 cp` is a shell-like command that performs the multi-part file upload
    operation in order to complete the operation.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`aws s3 cp`是一个类似shell的命令，执行多部分文件上传操作以完成操作。'
- en: It also supports customization for some of the AWS services. You can see the
    list of AWS services supported by `aws-cli` by using the `--help` command.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 它还支持对一些AWS服务进行定制。您可以使用`--help`命令查看`aws-cli`支持的AWS服务列表。
- en: Installing the AWS CLI
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装AWS CLI
- en: '`awscli` is available to as a Python distributor package. You can easily install
    it with the `pip` command, as described in the following code:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`awscli`可用作Python分发包。您可以使用`pip`命令轻松安装它，如下面的代码所述：'
- en: '[PRE5]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here are the prerequisites:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是先决条件：
- en: Python 2 with version 2.6.5+ or Python 3 with version 3.3+
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2的版本为2.6.5+或Python 3的版本为3.3+
- en: Unix, Linux, macOS, or Windows
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unix、Linux、macOS或Windows
- en: Configuring the AWS CLI
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置AWS CLI
- en: '`awscli` directly accesses AWS services but we need to configure and authenticate
    it in order to access AWS services.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`awscli`直接访问AWS服务，但我们需要配置和验证它以访问AWS服务。'
- en: 'Run the `aws configure` command to configure the AWS CLI with your Amazon account:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`aws configure`命令以配置AWS CLI与您的Amazon帐户：
- en: '![](img/00020.jpeg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00020.jpeg)'
- en: 'You can get the AWS access key ID and AWS secret access key from the My Security
    Credentials option, as shown in the following screenshot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从“My Security Credentials”选项中获取AWS访问密钥ID和AWS秘密访问密钥，如下图所示：
- en: '![](img/00021.jpeg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00021.jpeg)'
- en: Let's configure the AWS Lambda function using AWS CLI.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用AWS CLI配置AWS Lambda函数。
- en: Configuring Lambda function with the AWS CLI
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWS CLI配置Lambda函数
- en: Let's configure our hello world Lambda function and triggers using the `awscli
    utility` command.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`awscli实用程序`命令配置我们的hello world Lambda函数和触发器。
- en: The AWS CLI supports all available AWS services. You can see a detailed description
    of the `aws` command using `aws help` and it will also list all the available
    services.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CLI支持所有可用的AWS服务。您可以使用`aws help`查看`aws`命令的详细描述，并列出所有可用的服务。
- en: 'We are interested in Lambda, as we are going to create a Lambda function with
    a simple hello world context:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对Lambda感兴趣，因为我们将创建一个具有简单hello world上下文的Lambda函数：
- en: '[PRE6]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will list a complete description of the Lambda service and all the available
    commands that are required to manage the AWS Lambda service.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出Lambda服务的完整描述以及管理AWS Lambda服务所需的所有可用命令。
- en: Creating a Lambda function
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Lambda函数
- en: Here, we are going to create a new Lambda function with the `aws lambda create-function` command.
    To run this command, we need to pass the required and optional arguments.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用`aws lambda create-function`命令创建一个新的Lambda函数。要运行此命令，我们需要传递必需和可选参数。
- en: Make sure you have a role with permission for the `lambda:CreateFunction` action.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您具有具有`lambda:CreateFunction`操作权限的角色。
- en: Previously, in the AWS Lambda console, we chose the code entry point as inline
    editing. Now, we will be using a ZIP file as a deployment package.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，在AWS Lambda控制台中，我们选择了内联编辑作为代码入口点。现在，我们将使用ZIP文件作为部署包。
- en: Before creating the Lambda function, we should create a Lambda function deployment
    package.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建Lambda函数之前，我们应该创建一个Lambda函数部署包。
- en: This deployment package will be a ZIP file consisting of your code and any dependencies.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 此部署包将是一个ZIP文件，其中包含您的代码和任何依赖项。
- en: 'If your project has some dependencies, then you must install the dependencies
    in the root directive of the project. For example:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的项目有一些依赖关系，则必须在项目的根目录中安装依赖关系。例如：
- en: '[PRE7]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, the `-t` option indicates the target directory.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`-t`选项表示目标目录。
- en: 'Create a simple `lambda_handler` function in a file named as `handler.py`,
    as shown in the following screenshot:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为`handler.py`的文件中创建一个简单的`lambda_handler`函数，如下图所示：
- en: '![](img/00022.jpeg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00022.jpeg)'
- en: 'Now, let''s make a deployment package as a ZIP file consisting of the preceding
    code:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们制作一个ZIP文件作为部署包，其中包含前面的代码：
- en: '![](img/00023.jpeg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00023.jpeg)'
- en: 'Now, we are ready to create the Lambda function. The following screenshot describes
    the command execution:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备创建Lambda函数。以下截图描述了命令执行：
- en: '![](img/00024.jpeg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00024.jpeg)'
- en: 'You can see that, in the AWS Lambda console, the Lambda function immediately
    got created:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，在AWS Lambda控制台中，Lambda函数立即被创建：
- en: '![](img/00025.jpeg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00025.jpeg)'
- en: 'Let''s discuss the required and optional parameters that we used with the `aws
    lambda create-function` command:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论我们在`aws lambda create-function`命令中使用的必需和可选参数：
- en: '`--function-name` (required): The name is self-explanatory. We need to pass
    the Lambda function name that we are intending to create.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--function-name`（必需）：名称不言自明。我们需要传递要创建的Lambda函数的名称。'
- en: '`--role` (required): This is a required parameter where we need to use the
    AWS role ARN as a value. Make sure this role has permissions to create the Lambda
    function.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--role`（必需）：这是一个必需的参数，我们需要将AWS角色ARN用作值。确保此角色具有创建Lambda函数的权限。'
- en: '`--runtime` (required): We need to mention the runtime environment for the
    Lambda function execution. As we mentioned earlier, AWS Lambda supports Python,
    Node.js, C#, and Java. So these are the possible values:'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--runtime`（必需）：我们需要提到Lambda函数执行的运行时环境。正如我们之前提到的，AWS Lambda支持Python、Node.js、C#和Java。因此，这些是可能的值：'
- en: '`python2.7`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python2.7`'
- en: '`python3.6`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python3.6`'
- en: '`nodejs`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nodejs`'
- en: '`nodejs4.3`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nodejs4.3`'
- en: '`nodejs6.10`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nodejs6.10`'
- en: '`nodejs4.3-edge`'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nodejs4.3-edge`'
- en: '`dotnetcore1.0`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnetcore1.0`'
- en: '`java8`'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java8`'
- en: '`--handler` (required): Here, we mention the function path that will be an
    execution entry point by the AWS Lambda. In our case, we used `handler.lambda_function`,
    where the handler is the file that contains the `lambda_function`.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--handler`（必需）：在这里，我们提到将作为AWS Lambda执行入口点的函数路径。在我们的情况下，我们使用了`handler.lambda_function`，其中处理程序是包含`lambda_function`的文件。'
- en: '`--description`: This option lets you add some text description about your
    Lambda function.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--description`：此选项允许您添加有关Lambda函数的一些文本描述。'
- en: '`--zip-file`: This option is used to upload the deployment package file of
    your code from your local environment/machine. Here, you need to add `fileb://` as
    a prefix to your ZIP file path.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--zip-file`：此选项用于从本地环境/计算机上传代码的部署包文件。在这里，您需要在ZIP文件路径前添加`fileb://`作为前缀。'
- en: '`--code`: This option helps you upload the deployment package file from the
    AWS S3 bucket.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--code`：此选项可帮助您从AWS S3存储桶上传部署包文件。'
- en: 'You should pass a string value with a pattern, such as the one shown here:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该传递一个带有模式的字符串值，例如这里所示的一个：
- en: '[PRE8]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There are many other optional parameters available that you can see with the `help`
    command, such as `aws lambda create-function help`*.* You can use them as per
    your requirement.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他可选参数，您可以通过`help`命令查看，例如`aws lambda create-function help`*.* 您可以根据自己的需求使用它们。
- en: Now we will see the Lambda function invocation using the command `$ aws lambda
    invoke`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到使用命令`$ aws lambda invoke`调用Lambda函数。
- en: Invoking the function
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用函数
- en: 'The Lambda CLI provides a command to directly invoke the Lambda function:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda CLI提供了一个命令来直接调用Lambda函数：
- en: '[PRE9]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s look at the parameters:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这些参数：
- en: '`--function-name` (required): This parameter asks for a Lambda function name'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--function-name`（必需）：此参数要求输入Lambda函数名称'
- en: '`outfile` (required): Here, you need to mention a filename where the returned
    output or response by the Lambda function will be stored'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outfile`（必需）：在这里，您需要提到一个文件名，返回的输出或Lambda函数的响应将被存储在那里'
- en: Here are other optional parameters available that you can list by the `help`
    command.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有其他可选参数，您可以通过`help`命令列出。
- en: 'Let''s invoke our recently created `HelloWorldCLI` function:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调用我们最近创建的`HelloWorldCLI`函数：
- en: '![](img/00026.jpeg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00026.jpeg)'
- en: When we invoked the Lambda function, it immediately responded with a status
    code and the Lambda function returned the output data stored in the newly created
    `lambda_output.txt` file by the `lambda invoke` command.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用Lambda函数时，它立即以状态代码做出响应，并且Lambda函数返回的输出数据存储在新创建的`lambda_output.txt`文件中，通过`lambda
    invoke`命令。
- en: Create-event-source-mapping
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建事件源映射
- en: This is a subcommand of the `aws lambda` command and is used to create event
    mapping for your Lambda function.  `$ aws lambda create-event-source-mapping`
    supports only Amazon Kinesis stream and Amazon DynamoDB stream events mapping.
    We will discuss event mapping with the Amazon API Gateway and CloudWatch event
    using Zappa in the upcoming chapters.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`aws lambda`命令的一个子命令，用于为您的Lambda函数创建事件映射。`$ aws lambda create-event-source-mapping`仅支持Amazon
    Kinesis流和Amazon DynamoDB流事件映射。我们将在即将到来的章节中讨论使用Zappa进行Amazon API Gateway和CloudWatch事件的事件映射。
- en: Summary
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the manual process of creating a simple AWS
    Lambda and configuring some triggers against it. Also, we looked at the AWS Lambda
    configuration using the AWS CLI. It's really amazing to implement a serverless
    application. These AWS services play an essential part in creating a serverless
    infrastructure, where you can develop your application and deploy it as serverless.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了创建简单的AWS Lambda的手动过程，并配置了一些触发器。此外，我们还使用AWS CLI查看了AWS Lambda的配置。实现无服务器应用程序真是令人惊讶。这些AWS服务在创建无服务器基础架构中扮演着重要的角色，您可以在其中开发应用程序并将其部署为无服务器。
- en: Questions
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What would be the benefits of being serverless?
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无服务器的好处是什么？
- en: What is the role of Amazon S3 in the serverless infrastructure?
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Amazon S3在无服务器基础架构中的作用是什么？
