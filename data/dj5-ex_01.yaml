- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Building a Blog Application
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 博客应用程序
- en: In this book, you will learn how to build professional-grade web projects using
    Django. This initial chapter will guide you through the essential building blocks
    of a Django application, from installation to deployment. If you haven’t set up
    Django on your machine yet, the *Installing Django* section will walk you through
    the installation process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，你将学习如何使用 Django 构建专业级别的网络项目。本章将引导你了解 Django 应用程序的基本构建块，从安装到部署。如果你还没有在你的机器上设置
    Django，*安装 Django* 部分将指导你完成安装过程。
- en: 'Before starting our first Django project, let’s go over what you are about
    to learn. This chapter will give you a general overview of the framework. It will
    guide you through the different major components to create a fully functional
    web application: models, templates, views, and URLs. You will gain an understanding
    of how Django works and how the different framework components interact.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始第一个 Django 项目之前，让我们回顾一下你将要学习的内容。本章将为你提供一个框架的总体概述。它将引导你了解创建一个完全功能性的网络应用程序的不同主要组件：模型、模板、视图和
    URL。你将了解 Django 的工作原理以及不同的框架组件如何交互。
- en: You will also learn the difference between Django projects and applications,
    and you will learn about the most important Django settings. You will build a
    simple blog application that allows users to navigate through all published posts
    and read individual posts. You will also create a simple administration interface
    to manage and publish posts. In the next two chapters, you will extend the blog
    application with more advanced functionalities.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将了解 Django 项目和应用程序之间的区别，并学习最重要的 Django 设置。你将构建一个简单的博客应用程序，允许用户浏览所有已发布的帖子并阅读单个帖子。你还将创建一个简单的管理界面来管理和发布帖子。在接下来的两章中，你将扩展博客应用程序以添加更多高级功能。
- en: Consider this chapter as your roadmap for constructing a fully-fledged Django
    application. Don’t be concerned if some components or concepts appear unclear
    at first. The different framework components will be explored in detail throughout
    this book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 将本章视为构建完整 Django 应用的路线图。如果某些组件或概念一开始看起来不清楚，请不要担心。本书将详细探讨不同的框架组件。
- en: 'This chapter will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Installing Python
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Python
- en: Creating a Python virtual environment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Python 虚拟环境
- en: Installing Django
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Django
- en: Creating and configuring a Django project
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和配置 Django 项目
- en: Building a Django application
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 Django 应用程序
- en: Designing data models
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计数据模型
- en: Creating and applying model migrations
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和应用模型迁移
- en: Setting up an administration site for your models
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为你的模型设置管理站点
- en: Working with QuerySets and model managers
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 QuerySets 和模型管理器
- en: Building views, templates, and URLs
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 视图、模板和 URL
- en: Understanding the Django request/response cycle
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Django 请求/响应周期
- en: You will start by installing Python on your machine.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你将首先在你的机器上安装 Python。
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter01](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter01).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在[https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter01](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter01)找到。
- en: All Python packages used in this chapter are included in the `requirements.txt`
    file in the source code for the chapter. You can follow the instructions to install
    each Python package in the following sections, or you can install all the requirements
    at once with the command `python -m pip install -r requirements.txt`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有 Python 包都包含在章节源代码中的 `requirements.txt` 文件中。你可以按照以下部分的说明安装每个 Python
    包，或者你可以使用命令 `python -m pip install -r requirements.txt` 一次性安装所有依赖。
- en: Installing Python
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Python
- en: Django 5.0 supports Python 3.10, 3.11, and 3.12\. In the examples in this book,
    we will use Python 3.12.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Django 5.0 支持 Python 3.10、3.11 和 3.12。本书中的示例将使用 Python 3.12。
- en: If you’re using Linux or macOS, you probably have Python installed. If you’re
    using Windows, you can download a Python installer from the [python.org](http://python.org)
    website. You can download Python for your OS from [https://www.python.org/downloads/](https://www.python.org/downloads/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Linux 或 macOS，你可能已经安装了 Python。如果你使用的是 Windows，你可以从 [python.org](http://python.org)
    网站下载 Python 安装程序。你可以从 [https://www.python.org/downloads/](https://www.python.org/downloads/)
    下载适合你操作系统的 Python。
- en: Open the command-line shell prompt of your machine. If you are using macOS,
    press *Command + spacebar* to open Spotlight and write **Terminal** to open `Terminal.app`.
    If you are using Windows, open the **Start** menu and type `powers` into the search
    box. Then, click on the **Windows PowerShell** application to open it. Alternatively,
    you can use the more basic command prompt by typing `cmd` into the search box
    and clicking on the **Command Prompt** application to open it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您机器的命令行 shell 提示符。如果您使用 macOS，请按 *Command + 空格键* 打开 Spotlight，并输入 **Terminal**
    以打开 `Terminal.app`。如果您使用 Windows，请打开 **开始** 菜单，在搜索框中输入 `powers`。然后，单击 **Windows
    PowerShell** 应用程序以打开它。或者，您还可以使用更基本的命令提示符，通过在搜索框中输入 `cmd` 并单击 **Command Prompt**
    应用程序来打开它。
- en: 'Verify that Python 3 is installed on your machine by typing the following command
    in the shell prompt:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 shell 提示符中输入以下命令来验证您的机器上是否已安装 Python 3：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you see the following, then Python 3 is installed on your computer:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到以下内容，则表示您的计算机上已安装 Python 3：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you get an error, try the `python` command instead of `python3`. If you use
    Windows, it’s recommended that you replace `python` with the `py` command.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到错误，请尝试使用 `python` 命令而不是 `python3`。如果您使用 Windows，建议您将 `python` 替换为 `py`
    命令。
- en: If your installed Python version is lower than 3.12, or if Python is not installed
    on your computer, download Python 3.12 from [https://www.python.org/downloads/](https://www.python.org/downloads/)
    and follow the instructions to install it. On the download site, you can find
    Python installers for Windows, macOS, and Linux.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的安装的 Python 版本低于 3.12，或者 Python 没有安装到您的计算机上，请从 [https://www.python.org/downloads/](https://www.python.org/downloads/)
    下载 Python 3.12，并按照说明进行安装。在下载网站上，您可以找到适用于 Windows、macOS 和 Linux 的 Python 安装程序。
- en: Throughout this book, when Python is referenced in the shell prompt, we will
    use the `python` command, though some systems may require using `python3`. If
    you are using Linux or macOS and your system’s Python is Python 2, you will need
    to use `python3` to use the Python 3 version you installed. Note that Python 2
    reached end-of-life in January 2020 and shouldn’t be used anymore.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的整个过程中，当在 shell 提示符中引用 Python 时，我们将使用 `python` 命令，尽管某些系统可能需要使用 `python3`。如果您使用
    Linux 或 macOS，并且您的系统 Python 是 Python 2，您将需要使用 `python3` 来使用您安装的 Python 3 版本。请注意，Python
    2 于 2020 年 1 月达到生命周期的终点，不应再使用。
- en: In Windows, `python` is the Python executable of your default Python installation,
    whereas `py` is the Python launcher. The Python launcher for Windows was introduced
    in Python 3.3\. It detects what Python versions are installed on your machine
    and it automatically delegates to the latest version.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 中，`python` 是您默认 Python 安装的可执行文件，而 `py` 是 Python 启动器。Python 启动器是在 Python
    3.3 中引入的。它会检测您的机器上安装了哪些 Python 版本，并自动委托给最新版本。
- en: If you use Windows, you should use the `py` command. You can read more about
    the Windows Python launcher at [https://docs.python.org/3/using/windows.html#launcher](https://docs.python.org/3/using/windows.html#launcher).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 Windows，应使用 `py` 命令。您可以在 [https://docs.python.org/3/using/windows.html#launcher](https://docs.python.org/3/using/windows.html#launcher)
    阅读有关 Windows Python 启动器的更多信息。
- en: Next, you are going to create a Python environment for your project and install
    the necessary Python libraries.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将为您的项目创建一个 Python 环境，并安装必要的 Python 库。
- en: Creating a Python virtual environment
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Python 虚拟环境
- en: When you write Python applications, you will usually use packages and modules
    that are not included in the standard Python library. You may have Python applications
    that require a different version of the same module. However, only a specific
    version of a module can be installed system-wide. If you upgrade a module version
    for an application, you might end up breaking other applications that require
    an older version of that module.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当您编写 Python 应用程序时，您通常会使用标准 Python 库中未包含的包和模块。您可能有需要不同版本相同模块的 Python 应用程序。然而，只能安装特定版本的模块系统范围。如果您为应用程序升级模块版本，可能会破坏需要该模块旧版本的其它应用程序。
- en: To address this issue, you can use Python virtual environments. With virtual
    environments, you can install Python modules in an isolated location rather than
    installing them system-wide. Each virtual environment has its own Python binary
    and can have its own independent set of installed Python packages in its site-packages
    directory.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，您可以使用 Python 虚拟环境。使用虚拟环境，您可以在隔离的位置安装 Python 模块，而不是在系统范围内安装它们。每个虚拟环境都有自己的
    Python 二进制文件，并且可以在其 site-packages 目录中拥有自己独立的安装 Python 包集合。
- en: Since version 3.3, Python comes with the `venv` library, which provides support
    for creating lightweight virtual environments. By using the Python `venv` module
    to create isolated Python environments, you can use different package versions
    for different projects. Another advantage of using `venv` is that you won’t need
    any administrative privileges to install Python packages.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 自 3.3 版本以来，Python 内置了 `venv` 库，它提供了创建轻量级虚拟环境的支持。通过使用 Python `venv` 模块创建隔离的 Python
    环境，您可以为不同的项目使用不同的包版本。使用 `venv` 的另一个优点是您不需要任何管理员权限来安装 Python 包。
- en: 'If you are using Linux or macOS, create an isolated environment with the following
    command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 Linux 或 macOS，请使用以下命令创建隔离环境：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Remember to use `python3` instead of `python` if your system comes with Python
    2 and you installed Python 3.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的系统自带 Python 2 而您已安装 Python 3，请记住使用 `python3` 而不是 `python`。
- en: 'If you are using Windows, use the following command instead:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 Windows，请使用以下命令代替：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will use the Python launcher in Windows.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 Windows 中使用 Python 启动器。
- en: The previous command will create a Python environment in a new directory named
    `my_env`. Any Python libraries you install while your virtual environment is active
    will go into the `my_env/lib/python3.12/site-packages` directory.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将在名为 `my_env` 的新目录中创建一个 Python 环境。在您的虚拟环境激活期间安装的任何 Python 库都将进入 `my_env/lib/python3.12/site-packages`
    目录。
- en: 'If you are using Linux or macOS, run the following command to activate your
    virtual environment:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 Linux 或 macOS，请运行以下命令以激活您的虚拟环境：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you are using Windows, use the following command instead:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 Windows，请使用以下命令代替：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The shell prompt will include the name of the active virtual environment enclosed
    in parentheses, like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: shell 提示符将包括括号内的活动虚拟环境名称，如下所示：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can deactivate your environment at any time with the `deactivate` command.
    You can find more information about `venv` at [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `deactivate` 命令随时停用您的环境。您可以在 [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)
    找到有关 `venv` 的更多信息。
- en: Installing Django
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Django
- en: If you have already installed Django 5.0, you can skip this section and jump
    directly to the *Creating your first project* section.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了 Django 5.0，您可以跳过本节，直接跳转到 *创建您的第一个项目* 部分。
- en: Django comes as a Python module and thus can be installed in any Python environment.
    If you haven’t installed Django yet, the following is a quick guide to installing
    it on your machine.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Django 作为 Python 模块提供，因此可以安装在任何 Python 环境中。如果您还没有安装 Django，以下是在您的机器上安装 Django
    的快速指南。
- en: Installing Django with pip
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 pip 安装 Django
- en: The `pip` package management system is the preferred method of installing Django.
    Python 3.12 comes with `pip` preinstalled, but you can find `pip` installation
    instructions at [https://pip.pypa.io/en/stable/installation/](https://pip.pypa.io/en/stable/installation/).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip` 软件包管理系统是安装 Django 的首选方法。Python 3.12 预装了 `pip`，但您可以在 [https://pip.pypa.io/en/stable/installation/](https://pip.pypa.io/en/stable/installation/)
    找到 `pip` 安装说明。'
- en: 'Run the following command at the shell prompt to install Django with `pip`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 shell 提示符下运行以下命令以使用 `pip` 安装 Django：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will install Django’s latest 5.0 version in the Python `site-packages`
    directory of your virtual environment.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的虚拟环境的 Python `site-packages` 目录中安装 Django 的最新 5.0 版本。
- en: 'Now we will check whether Django has been successfully installed. Run the following
    command in a shell prompt:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将检查 Django 是否已成功安装。在 shell 提示符下运行以下命令：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you get an output that starts with `5.0`, Django has been successfully installed
    on your machine. If you get the message `No module named Django`, Django is not
    installed on your machine. If you have issues installing Django, you can review
    the different installation options described at [https://docs.djangoproject.com/en/5.0/intro/install/](https://docs.djangoproject.com/en/5.0/intro/install/).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您得到以 `5.0` 开头的输出，则表示 Django 已成功安装在您的机器上。如果您得到消息 `No module named Django`，则表示
    Django 没有安装在您的机器上。如果您在安装 Django 时遇到问题，您可以查看在 [https://docs.djangoproject.com/en/5.0/intro/install/](https://docs.djangoproject.com/en/5.0/intro/install/)
    描述的不同安装选项。
- en: All Python packages used in this chapter are included in the `requirements.txt`
    file in the source code for the chapter, mentioned above. You can follow the instructions
    to install each Python package in the following sections, or you can install all
    requirements at once with the command `pip install -r requirements.txt`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有 Python 包都包含在上文提到的章节源代码中的 `requirements.txt` 文件中。您可以根据以下章节中的说明安装每个 Python
    包，或者使用命令 `pip install -r requirements.txt` 一次性安装所有依赖。
- en: Django overview
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django 概述
- en: Django is a framework consisting of a set of components that solve common web
    development problems. Django components are loosely coupled, which means they
    can be managed independently. This helps separate the responsibilities of the
    different layers of the framework; the database layer knows nothing about how
    the data is displayed, the template system knows nothing about web requests, and
    so on.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Django 是一个由一系列组件组成的框架，用于解决常见的 Web 开发问题。Django 组件松散耦合，这意味着它们可以独立管理。这有助于分离框架不同层的职责；数据库层不知道数据是如何显示的，模板系统不知道
    Web 请求，等等。
- en: Django offers maximum code reusability by following the **DRY** (**don’t repeat
    yourself**) principle. Django also fosters rapid development and allows you to
    use less code by taking advantage of Python’s dynamic capabilities, such as introspection.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Django 通过遵循 **DRY**（**不要重复自己**）原则提供最大程度的代码重用性。Django 还促进了快速开发，并允许您利用 Python
    的动态能力（如反射）使用更少的代码。
- en: You can read more about Django’s design philosophies at [https://docs.djangoproject.com/en/5.0/misc/design-philosophies/](https://docs.djangoproject.com/en/5.0/misc/design-philosophies/).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://docs.djangoproject.com/en/5.0/misc/design-philosophies/](https://docs.djangoproject.com/en/5.0/misc/design-philosophies/)
    了解更多关于 Django 设计理念的信息。
- en: Main framework components
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主框架组件
- en: Django follows the **MTV** (**Model-Template-View**) pattern. It is a slightly
    similar pattern to the well-known **MVC** (**Model-View-Controller**) pattern,
    where the template acts as the view and the framework itself acts as the controller.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Django 遵循 **MTV**（**模型-模板-视图**）模式。它与众所周知的 **MVC**（**模型-视图-控制器**）模式略有相似，其中模板充当视图，而框架本身充当控制器。
- en: 'The responsibilities in the Django MTV pattern are divided as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Django MTV 模式中的职责划分如下：
- en: '**Model**: This defines the logical data structure and is the data handler
    between the database and the view.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：这定义了逻辑数据结构，是数据库和视图之间的数据处理器。'
- en: '**Template**: This is the presentation layer. Django uses a plain-text template
    system that keeps everything that the browser renders.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板**：这是表示层。Django 使用纯文本模板系统，保留了浏览器渲染的所有内容。'
- en: '**View**: This communicates with the database via the model and transfers the
    data to the template for viewing.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：通过模型与数据库通信，并将数据传输到模板进行查看。'
- en: The framework itself acts as the controller. It sends a request to the appropriate
    view, according to the Django **URL** configuration.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 框架本身充当控制器。它根据 Django **URL** 配置向适当的视图发送请求。
- en: When developing any Django project, you will always work with models, views,
    templates, and URLs. In this chapter, you will learn how they fit together.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发任何 Django 项目时，您都将与模型、视图、模板和 URL 一起工作。在本章中，您将学习它们是如何结合在一起的。
- en: The Django architecture
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django 架构
- en: '*Figure 1.1* shows how Django processes requests and how the request/response
    cycle is managed with the different main Django components – URLs, views, models,
    and templates:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1.1* 展示了 Django 如何处理请求以及如何通过不同的主要 Django 组件（URL、视图、模型和模板）管理请求/响应周期：'
- en: '![Diagram  Description automatically generated](img/B21088_01_01.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图解 描述自动生成](img/B21088_01_01.png)'
- en: 'Figure 1.1: The Django architecture'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：Django 架构
- en: 'This is how Django handles HTTP requests and generates responses:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Django 处理 HTTP 请求并生成响应的方式：
- en: A web browser requests a page by its URL and the web server passes the HTTP
    request to Django.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络浏览器通过其 URL 请求页面，并将 HTTP 请求传递给 Django。
- en: Django runs through its configured URL patterns and stops at the first one that
    matches the requested URL.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Django 会遍历其配置的 URL 模式，并在第一个匹配请求 URL 的模式处停止。
- en: Django executes the view that corresponds to the matched URL pattern.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Django 执行与匹配的 URL 模式对应的视图。
- en: The view potentially uses data models to retrieve information from the database.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 视图可能使用数据模型从数据库中检索信息。
- en: Data models provide data definitions and behaviors. They are used to query the
    database.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据模型提供数据定义和行为。它们用于查询数据库。
- en: The view renders a template (usually HTML) to display the data and returns it
    with an HTTP response.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 视图渲染一个模板（通常是HTML）以显示数据，并将其与HTTP响应一起返回。
- en: We will get back to the Django request/response cycle at the end of this chapter
    in the *The request/response cycle* section.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的“请求/响应周期”部分回顾Django的请求/响应周期。
- en: Django also includes hooks in the request/response process, which are called
    middleware. Middleware has been intentionally left out of this diagram for the
    sake of simplicity. You will use middleware in different examples of this book,
    and you will learn how to create custom middleware in *Chapter 17*, *Going Live*.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Django还包括请求/响应过程中的钩子，这些钩子被称为中间件。为了简化，中间件被有意地省略了。你将在本书的不同示例中使用中间件，你将在第17章“上线”中学习如何创建自定义中间件。
- en: We have covered the foundational elements of Django and how it processes requests.
    Let’s explore the new features introduced in Django 5.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了Django的基础元素以及它是如何处理请求的。让我们探索Django 5引入的新特性。
- en: New features in Django 5
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django 5的新特性
- en: 'Django 5 introduces several key features that you will use in the examples
    of this book. This version also deprecates certain features and eliminates previously
    deprecated functionalities. Django 5.0 presents the following new major features:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Django 5引入了几个关键特性，这些特性将在本书的示例中使用。此版本还弃用了一些特性，并消除了之前已弃用的功能。Django 5.0展示了以下新主要特性：
- en: '**Facet filters in the administration site**: Facet filters can be added now
    to the administration site. When enabled, facet counts are displayed for applied
    filters in the admin object list. This feature is presented in the *Added facet
    counts to filters* section of this chapter.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理站点中的分面过滤器**：现在可以将分面过滤器添加到管理站点。启用后，在管理员对象列表中会显示应用过滤器的分面计数。本章节的“添加分面计数到过滤器”部分介绍了这一功能。'
- en: '**Simplified templates for form field rendering**: Form field rendering has
    been simplified with the capability to define field groups with associated templates.
    This aims to make the process of rendering related elements of a Django form field,
    such as labels, widgets, help text, and errors, more streamlined. An example of
    using field groups can be found in the *Creating templates for the comment form*
    section of *Chapter 2, Enhancing Your Blog and Adding Social Features*.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化表单字段渲染的模板**：通过定义具有相关模板的字段组，表单字段渲染已被简化。这旨在使渲染Django表单字段相关元素的过程（如标签、小部件、帮助文本和错误）更加流畅。在*第2章，增强博客和添加社交功能*的“为评论表单创建模板”部分可以找到使用字段组的示例。'
- en: '**Database-computed default values**: Django adds database-computed default
    values. An example of this feature is presented in the *Adding datetime fields*
    section of this chapter.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库计算默认值**：Django添加了数据库计算的默认值。本章的“添加日期时间字段”部分展示了此功能的示例。'
- en: '**Database-generated model fields**: This is a new type of field that enables
    you to create database-generated columns. An expression is used to automatically
    set the field value each time the model is changed. The field value is set using
    the `GENERATED` `ALWAYS` SQL syntax.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库生成的模型字段**：这是一种新类型的字段，允许你创建数据库生成的列。每次模型更改时，都会使用表达式自动设置字段值。字段值使用`GENERATED`
    `ALWAYS` SQL语法设置。'
- en: '**More options for declaring model field choices**: Fields that support choices
    no longer require accessing the `.choices` attribute to access enumeration types.
    A mapping or callable instead of an iterable can be used directly to expand enumeration
    types. Choices with enumeration types in this book have been updated to reflect
    these changes. An instance of this can be found in the *Adding a status field*
    section of this chapter.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声明模型字段选择项的更多选项**：支持选择项的字段不再需要访问`.choices`属性来访问枚举类型。可以直接使用映射或可调用对象而不是可迭代对象来扩展枚举类型。本书中具有枚举类型的选项已被更新以反映这些变化。这种实例可以在本章的“添加状态字段”部分找到。'
- en: Django 5 also comes with some improvements in asynchronous support**. Asynchronous
    Server Gateway Interface** (**ASGI**) support was first introduced in Django 3
    and improved in Django 4.1 with asynchronous handlers for class-based views and
    an asynchronous ORM interface. Django 5 adds asynchronous functions to the authentication
    framework, provides support for asynchronous signal dispatching, and adds asynchronous
    support to multiple built-in decorators.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Django 5 还带来了一些对异步支持方面的改进**。异步服务器网关接口（ASGI**）支持首次在 Django 3 中引入，并在 Django 4.1
    中通过为基于类的视图提供异步处理程序和异步 ORM 接口得到改进。Django 5 为认证框架添加了异步函数，提供了异步信号分发的支持，并将异步支持添加到多个内置装饰器中。
- en: Django 5.0 drops support for Python 3.8 and 3.9.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Django 5.0 停止支持 Python 3.8 和 3.9。
- en: You can read the complete list of changes in the Django 5.0 release notes at
    [https://docs.djangoproject.com/en/5.0/releases/5.0/](https://docs.djangoproject.com/en/5.0/releases/5.0/).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 Django 5.0 版本的发布说明中阅读完整的更改列表，链接为 [https://docs.djangoproject.com/en/5.0/releases/5.0/](https://docs.djangoproject.com/en/5.0/releases/5.0/)。
- en: As a time-based release, there are no drastic changes in Django 5, making it
    straightforward to upgrade Django 4 applications to the 5.0 release.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 作为基于时间的发布，Django 5.0 没有重大变化，这使得将 Django 4 应用程序升级到 5.0 版本变得简单直接。
- en: If you want to quickly upgrade an existing Django project to the 5.0 release,
    you can use the `django-upgrade` tool. This package rewrites the files of your
    project by applying fixers up to a target version. You can find instructions to
    use `django-upgrade` at [https://github.com/adamchainz/django-upgrade](https://github.com/adamchainz/django-upgrade).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想快速将现有的 Django 项目升级到 5.0 版本，可以使用 `django-upgrade` 工具。此包通过应用修复器将您的项目文件重写至目标版本。您可以在
    [https://github.com/adamchainz/django-upgrade](https://github.com/adamchainz/django-upgrade)
    找到使用 `django-upgrade` 的说明。
- en: The `django-upgrade` tool is inspired by the `pyupgrade` package. You can use
    `pyupgrade` to automatically upgrade syntax for newer versions of Python. You
    can find more information about `pyupgrade` at [https://github.com/asottile/pyupgrade](https://github.com/asottile/pyupgrade).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-upgrade` 工具的灵感来源于 `pyupgrade` 包。您可以使用 `pyupgrade` 自动升级 Python 新版本的语法。您可以在
    [https://github.com/asottile/pyupgrade](https://github.com/asottile/pyupgrade)
    找到有关 `pyupgrade` 的更多信息。'
- en: Creating your first project
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个项目
- en: Your first Django project will consist of a blog application. This will offer
    you a solid introduction to Django’s capabilities and functionalities.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您的第一个 Django 项目将包括一个博客应用程序。这将为您提供一个对 Django 的功能和功能的坚实基础介绍。
- en: Blogging is the perfect starting point to build a complete Django project, given
    its wide range of required features, from basic content management to advanced
    functionalities like commenting, post sharing, search, and post recommendations.
    The blog project will be covered in the first three chapters of this book.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 由于博客需要从基本内容管理到评论、帖子分享、搜索和帖子推荐等高级功能在内的广泛功能，因此它是构建完整 Django 项目的完美起点。本书的前三章将涵盖博客项目。
- en: In this chapter, we will start by creating the Django project and a Django application
    for the blog. We will then create our data models and synchronize them to the
    database. Finally, we will create an administration site for the blog, and we
    will build the views, templates, and URLs.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，我们将从创建 Django 项目和博客的 Django 应用程序开始。然后我们将创建我们的数据模型并将它们同步到数据库。最后，我们将为博客创建一个管理站点，并构建视图、模板和
    URL。 '
- en: '*Figure 1.2* shows a representation of the blog application pages that you
    will create:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1.2* 展示了您将创建的博客应用程序页面：'
- en: '![](img/B21088_01_02.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_01_02.png)'
- en: 'Figure 1.2: Diagram of functionalities built in Chapter 1'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：第 1 章内置功能图
- en: The blog application will consist of a list of posts including the post title,
    publishing date, author, a post excerpt, and a link to read the post. The post
    list page will be implemented with the `post_list` view. You will learn how to
    create views in this chapter.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 博客应用程序将包括一系列帖子，包括帖子标题、发布日期、作者、帖子摘要以及阅读帖子的链接。帖子列表页面将通过 `post_list` 视图实现。您将在本章学习如何创建视图。
- en: When readers click on the link of a post in the post list page, they will be
    redirected to a single (detail) view of a post. The detail view will display the
    title, publishing date, author, and the complete post body.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当读者点击帖子列表页面上的帖子链接时，他们将被重定向到单个（详细）视图的帖子。详细视图将显示标题、发布日期、作者和完整的帖子正文。
- en: Let’s start by creating the Django project for our blog. Django provides a command
    that allows you to create an initial project file structure.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建我们的博客 Django 项目开始。Django 提供了一个命令，允许您创建初始项目文件结构。
- en: 'Run the following command in your shell prompt:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 shell 提示符中运行以下命令：
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will create a Django project with the name `mysite`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为 `mysite` 的 Django 项目。
- en: Avoid naming projects after built-in Python or Django modules in order to prevent
    conflicts.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止冲突，请勿将项目命名为内置的 Python 或 Django 模块。
- en: 'Let’s take a look at the generated project structure:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看生成的项目结构：
- en: '[PRE10]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The outer `mysite/` directory is the container for our project. It contains
    the following files:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 外部的 `mysite/` 目录是我们项目的容器。它包含以下文件：
- en: '`manage.py`: This is a command-line utility used to interact with your project.
    You won’t usually need to edit this file.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manage.py`：这是一个用于与项目交互的命令行实用程序。您通常不需要编辑此文件。'
- en: '`mysite/`: This is the Python package for your project, which consists of the
    following files:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysite/`：这是项目的 Python 包，它包含以下文件：'
- en: '`__init__.py`: An empty file that tells Python to treat the `mysite` directory
    as a Python module.'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__.py`：一个空文件，告诉 Python 将 `mysite` 目录视为一个 Python 模块。'
- en: '`asgi.py`: This is the configuration to run your project as an ASGI application
    with ASGI-compatible web servers. ASGI is the emerging Python standard for asynchronous
    web servers and applications.'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asgi.py`：这是配置以 ASGI 兼容的 Web 服务器作为 ASGI 应用程序运行项目的配置。ASGI 是异步 Web 服务器和应用程序的
    Python 标准之一。'
- en: '`settings.py`: This indicates settings and configuration for your project and
    contains initial default settings.'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`settings.py`：这表示项目的设置和配置，并包含初始默认设置。'
- en: '`urls.py`: This is the place where your URL patterns live. Each URL defined
    here is mapped to a view.'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urls.py`：这是您的 URL 模式所在的地方。这里定义的每个 URL 都映射到一个视图。'
- en: '`wsgi.py`: This is the configuration to run your project as a **Web Server
    Gateway Interface** (**WSGI**) application with WSGI-compatible web servers.'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wsgi.py`：这是配置以 WSGI 兼容的 Web 服务器作为 **Web Server Gateway Interface**（**WSGI**）应用程序运行项目的配置。WSGI
    是异步 Web 服务器和应用程序的 Python 标准之一。'
- en: Applying initial database migrations
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用初始数据库迁移
- en: Django applications require a database to store data. The `settings.py` file
    contains the database configuration for your project in the `DATABASES` setting.
    The default configuration is a SQLite3 database. SQLite comes bundled with Python
    3 and can be used in any of your Python applications. SQLite is a lightweight
    database that you can use with Django for development. If you plan to deploy your
    application in a production environment, you should use a full-featured database,
    such as PostgreSQL, MySQL, or Oracle. You can find more information about how
    to get your database running with Django at [https://docs.djangoproject.com/en/5.0/topics/install/#database-installation](https://docs.djangoproject.com/en/5.0/topics/install/#database-installation).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Django应用程序需要一个数据库来存储数据。`settings.py` 文件包含项目在 `DATABASES` 设置中的数据库配置。默认配置是一个 SQLite3
    数据库。SQLite 与 Python 3 一起打包，可以在任何 Python 应用程序中使用。SQLite 是一个轻量级数据库，您可以用它来与 Django
    进行开发。如果您计划在生产环境中部署应用程序，您应该使用功能齐全的数据库，例如 PostgreSQL、MySQL 或 Oracle。您可以在 [https://docs.djangoproject.com/en/5.0/topics/install/#database-installation](https://docs.djangoproject.com/en/5.0/topics/install/#database-installation)
    找到有关如何使用 Django 运行数据库的更多信息。
- en: Your `settings.py` file also includes a list named `INSTALLED_APPS` that contains
    common Django applications that are added to your project by default. We will
    go through these applications later in the *Project settings* section.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 `settings.py` 文件还包括一个名为 `INSTALLED_APPS` 的列表，其中包含默认添加到项目的常见 Django 应用程序。我们将在
    *项目设置* 部分中介绍这些应用程序。
- en: Django applications contain data models that are mapped to database tables.
    You will create your own models in the *Creating the blog data models* section.
    To complete the project setup, you need to create the tables associated with the
    models of the default Django applications included in the `INSTALLED_APPS` setting.
    Django comes with a system that helps you manage database migrations.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Django 应用程序包含映射到数据库表的数据模型。您将在 *创建博客数据模型* 部分中创建自己的模型。为了完成项目设置，您需要创建与 `INSTALLED_APPS`
    设置中包含的默认 Django 应用程序模型关联的表。Django 提供了一个系统，可以帮助您管理数据库迁移。
- en: 'Open the shell prompt and run the following commands:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 shell 提示符并运行以下命令：
- en: '[PRE11]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You will see an output that ends with the following lines:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下行结束的输出：
- en: '[PRE12]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding lines are the database migrations that are applied by Django.
    By applying the initial migrations, the tables for the applications listed in
    the `INSTALLED_APPS` setting are created in the database.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 上述行是Django应用的数据库迁移。通过应用初始迁移，`INSTALLED_APPS`设置中列出的应用程序的表将在数据库中创建。
- en: You will learn more about the `migrate` management command in the *Creating
    and applying migrations* section of this chapter.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本章的*创建和应用迁移*部分了解更多关于`migrate`管理命令的信息。
- en: Running the development server
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行开发服务器
- en: Django comes with a lightweight web server to run your code quickly, without
    needing to spend time configuring a production server. When you run the Django
    development server, it keeps checking for changes in your code. It reloads automatically,
    freeing you from manually reloading it after code changes. However, it might not
    notice some actions, such as adding new files to your project, so you will have
    to restart the server manually in these cases.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Django自带了一个轻量级的Web服务器，可以快速运行你的代码，无需花费时间配置生产服务器。当你运行Django开发服务器时，它会持续检查你的代码中的更改。它会自动重新加载，让你在代码更改后无需手动重新加载。然而，它可能不会注意到某些操作，例如将新文件添加到你的项目中，因此在这些情况下，你必须手动重新启动服务器。
- en: 'Start the development server by typing the following command in the shell prompt:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在shell提示符中输入以下命令来启动开发服务器：
- en: '[PRE13]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should see something like this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似以下内容：
- en: '[PRE14]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, open `http://127.0.0.1:8000/` in your browser. You should see a page stating
    that the project is successfully running, as shown in *Figure 1.3*:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在你的浏览器中打开`http://127.0.0.1:8000/`。你应该会看到一个页面，表明项目已成功运行，如图*图1.3*所示：
- en: '![](img/B21088_01_03.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_01_03.png)'
- en: 'Figure 1.3: The default page of the Django development server'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3：Django开发服务器的默认页面
- en: 'The preceding screenshot indicates that Django is running. If you take a look
    at your console, you will see the `GET` request performed by your browser:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图表明Django正在运行。如果你查看你的控制台，你会看到浏览器执行的`GET`请求：
- en: '[PRE15]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Each HTTP request is logged in the console by the development server. Any error
    that occurs while running the development server will also appear in the console.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 开发服务器会将每个HTTP请求记录在控制台。在运行开发服务器时发生的任何错误也会出现在控制台。
- en: 'You can run the Django development server on a custom host and port or tell
    Django to load a specific settings file, as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以自定义主机和端口运行Django开发服务器，或者告诉Django加载特定的设置文件，如下所示：
- en: '[PRE16]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When you have to deal with multiple environments that require different configurations,
    you can create a different settings file for each environment.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当你必须处理需要不同配置的多个环境时，你可以为每个环境创建不同的设置文件。
- en: This server is only intended for development and is not suitable for production
    use. To deploy Django in a production environment, you should run it as a WSGI
    application using a web server, such as Apache, Gunicorn, or uWSGI, or as an ASGI
    application using a server such as Daphne or Uvicorn. You can find more information
    on how to deploy Django with different web servers at [https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/](https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 此服务器仅适用于开发，不适用于生产使用。要在生产环境中部署Django，你应该将其作为WSGI应用程序使用Web服务器（如Apache、Gunicorn或uWSGI）运行，或者作为ASGI应用程序使用服务器（如Daphne或Uvicorn）。你可以在[https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/](https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/)找到有关如何使用不同Web服务器部署Django的更多信息。
- en: '*Chapter 17*, *Going Live*, explains how to set up a production environment
    for your Django projects.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*第17章*，*上线*，解释了如何为你的Django项目设置生产环境。'
- en: Project settings
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目设置
- en: Let’s open the `settings.py` file and take a look at the configuration of the
    project. There are several settings that Django includes in this file, but these
    are only part of all the available Django settings. You can see all the settings
    and their default values at [https://docs.djangoproject.com/en/5.0/ref/settings/](https://docs.djangoproject.com/en/5.0/ref/settings/).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开`settings.py`文件，看看项目的配置。Django在这个文件中包含了一些设置，但这些只是所有可用Django设置的一部分。你可以在[https://docs.djangoproject.com/en/5.0/ref/settings/](https://docs.djangoproject.com/en/5.0/ref/settings/)看到所有设置及其默认值。
- en: 'Let’s review some of the project settings:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下项目设置：
- en: '`DEBUG` is a Boolean that turns the debug mode of the project on and off. If
    it is set to `True`, Django will display detailed error pages when an uncaught
    exception is thrown by your application. When you move to a production environment,
    remember that you have to set it to `False`. Never deploy a site into production
    with `DEBUG` turned on because you will expose sensitive project-related data.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DEBUG`是一个布尔值，用于开启和关闭项目的调试模式。如果设置为`True`，当你的应用程序抛出未捕获的异常时，Django将显示详细的错误页面。当你迁移到生产环境时，请记住你必须将其设置为`False`。永远不要在生产环境中开启`DEBUG`模式部署网站，因为这会使敏感的项目相关数据暴露。'
- en: '`ALLOWED_HOSTS` is not applied while debug mode is on or when the tests are
    run. Once you move your site to production and set `DEBUG` to `False`, you will
    have to add your domain/host to this setting to allow it to serve your Django
    site.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ALLOWED_HOSTS`在调试模式开启或运行测试时不会应用。一旦你将网站迁移到生产环境并将`DEBUG`设置为`False`，你必须将你的域名/主机添加到这个设置中，以便它能够为你的Django网站提供服务。'
- en: '`INSTALLED_APPS` is a setting you will have to edit for all projects. This
    setting tells Django which applications are active for this site. By default,
    Django includes the following applications:'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSTALLED_APPS`是一个你必须为所有项目编辑的设置。此设置告诉Django哪些应用对此站点是活动的。默认情况下，Django包括以下应用：'
- en: '`django.contrib.admin`: An administration site.'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django.contrib.admin`: 一个管理网站。'
- en: '`django.contrib.auth`: An authentication framework.'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django.contrib.auth`: 一个认证框架。'
- en: '`django.contrib.contenttypes`: A framework for handling content types.'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django.contrib.contenttypes`: 一个处理内容类型的框架。'
- en: '`django.contrib.sessions`: A session framework.'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django.contrib.sessions`: 一个会话框架。'
- en: '`django.contrib.messages`: A messaging framework.'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django.contrib.messages`: 一个消息框架。'
- en: '`django.contrib.staticfiles`: A framework for managing static files, such as
    CSS, JavaScript files, and images.'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django.contrib.staticfiles`: 一个用于管理静态文件（如CSS、JavaScript文件和图像）的框架。'
- en: '`MIDDLEWARE` is a list that contains middleware to be executed.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MIDDLEWARE`是一个包含要执行的中间件的列表。'
- en: '`ROOT_URLCONF` indicates the Python module where the root URL patterns of your
    application are defined.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ROOT_URLCONF`指示定义应用程序根URL模式的Python模块。'
- en: '`DATABASES` is a dictionary that contains the settings for all the databases
    to be used in the project. There must always be a default database. The default
    configuration uses a SQLite3 database.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DATABASES`是一个字典，包含项目中所有数据库的设置。必须始终有一个默认数据库。默认配置使用SQLite3数据库。'
- en: '`LANGUAGE_CODE` defines the default language code for this Django site.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LANGUAGE_CODE`定义了此Django站点的默认语言代码。'
- en: '`USE_TZ` tells Django to activate/deactivate timezone support. Django comes
    with support for timezone-aware datetimes. This setting is set to `True` when
    you create a new project using the `startproject` management command.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`USE_TZ`告诉Django激活/停用时区支持。Django自带对时区感知日期时间的支持。当你使用`startproject`管理命令创建新项目时，此设置设置为`True`。'
- en: Don’t worry if you don’t understand much about what you’re seeing here. You
    will learn more about the different Django settings in the following chapters.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这里看到的内容不太理解，不要担心。你将在接下来的章节中了解更多关于不同的Django设置。
- en: Projects and applications
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目和应用
- en: Throughout this book, you will encounter the terms **project** and **application**
    over and over. In Django, a project is considered a Django installation with some
    settings. An application is a group of models, views, templates, and URLs. Applications
    interact with the framework to provide specific functionalities and may be reused
    in various projects. You can think of a project as your website, which contains
    several applications, such as a blog, wiki, or forum, that can also be used by
    other Django projects.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，你将反复遇到**项目**和**应用**这两个术语。在Django中，一个项目被认为是一个带有一些设置的Django安装。一个应用是一组模型、视图、模板和URL。应用与框架交互以提供特定功能，并且可以在各种项目中重用。你可以将项目视为你的网站，其中包含几个应用，如博客、维基或论坛，这些应用也可以被其他Django项目使用。
- en: '*Figure 1.4* shows the structure of a Django project:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1.4*显示了Django项目的结构：'
- en: '![](img/B21088_01_04.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图1.4](img/B21088_01_04.png)'
- en: 'Figure 1.4: The Django project/application structure'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4：Django项目/应用结构
- en: Creating an application
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个应用
- en: Let’s create our first Django application. We will build a blog application
    from scratch.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的第一个Django应用。我们将从头开始构建一个博客应用。
- en: 'Run the following command in the shell prompt from the project’s root directory:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目根目录的shell提示符中运行以下命令：
- en: '[PRE17]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will create the basic structure of the application, which will look like
    this:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建应用的基本结构，其外观如下：
- en: '[PRE18]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'These files are as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件如下：
- en: '`__init__.py`: This is an empty file that tells Python to treat the `blog`
    directory as a Python module.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__.py`：这是一个空文件，告诉 Python 将 `blog` 目录视为一个 Python 模块。'
- en: '`admin.py`: This is where you register models to include them in the Django
    administration site—using this site is optional.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin.py`：你可以在这里注册模型，以便将它们包含在 Django 管理站点中——使用此站点是可选的。'
- en: '`apps.py`: This includes the main configuration of the `blog` application.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apps.py`：这包括 `blog` 应用程序的主要配置。'
- en: '`migrations`: This directory will contain database migrations of the application.
    Migrations allow Django to track your model changes and synchronize the database
    accordingly. This directory contains an empty `__init__.py` file.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`migrations`：此目录将包含应用程序的数据库迁移。迁移允许 Django 跟踪你的模型更改并相应地同步数据库。此目录包含一个空的 `__init__.py`
    文件。'
- en: '`models.py`: This includes the data models of your application; all Django
    applications need to have a `models.py` file but it can be left empty.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models.py`：这包括应用程序的数据模型；所有 Django 应用程序都需要一个 `models.py` 文件，但它可以是空的。'
- en: '`tests.py`: This is where you can add tests for your application.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests.py`：你可以在这里添加应用程序的测试。'
- en: '`views.py`: The logic of your application goes here; each view receives an
    HTTP request, processes it, and returns a response.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views.py`：应用程序的逻辑在这里；每个视图接收一个 HTTP 请求，处理它，并返回一个响应。'
- en: With the application structure ready, we can start building the data models
    for the blog.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序结构准备就绪后，我们可以开始构建博客的数据模型。
- en: Creating the blog data models
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建博客数据模型
- en: Remember that a Python object is a collection of data and methods. Classes are
    the blueprint for bundling data and functionality together. Creating a new class
    creates a new type of object, allowing you to create instances of that type.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Python 对象是一组数据和方法的集合。类是打包数据和功能蓝图。创建一个新的类创建了一种新的对象类型，允许你创建该类型的实例。
- en: A Django model is a source of information about the behaviors of your data.
    It consists of a Python class that subclasses `django.db.models.Model`. Each model
    maps to a single database table, where each attribute of the class represents
    a database field.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Django 模型是关于你的数据行为的信息来源。它由一个继承自 `django.db.models.Model` 的 Python 类组成。每个模型映射到单个数据库表，其中类的每个属性代表一个数据库字段。
- en: When you create a model, Django will provide you with a practical API to query
    objects in the database easily.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个模型时，Django 将为你提供一个实用的 API，以便轻松查询数据库中的对象。
- en: We will define the database models for our blog application. Then, we will generate
    the database migrations for the models to create the corresponding database tables.
    When applying the migrations, Django will create a table for each model defined
    in the `models.py` file of the application.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们的博客应用程序定义数据库模型。然后，我们将为模型生成数据库迁移以创建相应的数据库表。在应用迁移时，Django 将为应用程序 `models.py`
    文件中定义的每个模型创建一个表。
- en: Creating the Post model
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建文章模型
- en: First, we will define a `Post` model that will allow us to store blog posts
    in the database.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将定义一个 `Post` 模型，这将使我们能够将博客文章存储在数据库中。
- en: 'Add the following lines to the `models.py` file of the `blog` application.
    The new lines are highlighted in bold:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下行添加到 `blog` 应用程序的 `models.py` 文件中。新行以粗体突出显示：
- en: '[PRE19]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This is the data model for blog posts. Posts will have a title, a short label
    called `slug`, and a body. Let’s take a look at the fields of this model:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这是博客文章的数据模型。文章将有一个标题，一个称为 `slug` 的简短标签，以及正文。让我们看看这个模型的字段：
- en: '`title`: This is the field for the post title. This is a `CharField` field
    that translates into a `VARCHAR` column in the SQL database.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`：这是文章标题的字段。这是一个 `CharField` 字段，在 SQL 数据库中转换为 `VARCHAR` 列。'
- en: '`slug`: This is a `SlugField` field that translates into a `VARCHAR` column
    in the SQL database. A slug is a short label that contains only letters, numbers,
    underscores, or hyphens. A post with the title *Django Reinhardt: A legend of
    Jazz* could have a slug like *django-reinhardt-legend-jazz*. We will use the `slug`
    field to build beautiful, SEO-friendly URLs for blog posts in *Chapter 2, Enhancing
    Your Blog with Advanced Features*.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slug`：这是一个 `SlugField` 字段，在 SQL 数据库中转换为 `VARCHAR` 列。slug 是一个只包含字母、数字、下划线或连字符的简短标签。标题为
    *Django Reinhardt: A legend of Jazz* 的文章可能有一个 slug 如 *django-reinhardt-legend-jazz*。我们将在
    *第 2 章，使用高级功能增强博客* 中使用 `slug` 字段来构建美观、SEO 友好的博客文章 URL。'
- en: '`body`: This is the field for storing the body of the post. This is a `TextField`
    field that translates into a `TEXT` column in the SQL database.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`body`: 这是存储帖子主体的字段。这是一个`TextField`字段，在SQL数据库中对应一个`TEXT`列。'
- en: We have also added a `__str__()` method to the model class. This is the default
    Python method to return a string with the human-readable representation of the
    object. Django will use this method to display the name of the object in many
    places, such as the Django administration site.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还向模型类添加了一个`__str__()`方法。这是默认的Python方法，用于返回一个包含对象人类可读表示的字符串。Django将使用此方法在许多地方显示对象的名称，例如Django管理站点。
- en: 'Let’s take a look at how the model and its fields will be translated into a
    database table and columns. The following diagram shows the `Post` model and the
    corresponding database table that Django will create when we synchronize the model
    to the database:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看模型及其字段是如何转换为数据库表和列的。以下图表显示了`Post`模型和Django在将模型同步到数据库时将创建的相应数据库表：
- en: '![](img/B21088_01_05.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_01_05.png)'
- en: 'Figure 1.5: Initial Post model and database table correspondence'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5：初始Post模型和数据库表对应关系
- en: 'Django will create a database column for each of the model fields: `title`,
    `slug`, and `body`. You can see how each field type corresponds to a database
    data type.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Django将为每个模型字段创建一个数据库列：`title`、`slug`和`body`。你可以看到每个字段类型如何对应于数据库数据类型。
- en: By default, Django adds an auto-incrementing primary key field to each model.
    The field type for this field is specified in each application configuration or
    globally in the `DEFAULT_AUTO_FIELD` setting. When creating an application with
    the `startapp` command, the default value for `DEFAULT_AUTO_FIELD` is `BigAutoField`.
    This is a 64-bit integer that automatically increments according to available
    IDs. If you don’t specify a primary key for your model, Django adds this field
    automatically. You can also define one of the model fields to be the primary key
    by setting `primary_key=True` on it.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Django为每个模型添加一个自动递增的主键字段。该字段的类型在每个应用程序配置中指定，或在全局`DEFAULT_AUTO_FIELD`设置中指定。当使用`startapp`命令创建应用程序时，`DEFAULT_AUTO_FIELD`的默认值是`BigAutoField`。这是一个64位的整数，根据可用的ID自动递增。如果你没有为你的模型指定主键，Django会自动添加这个字段。你也可以通过在字段上设置`primary_key=True`来定义模型中的一个字段作为主键。
- en: We will expand the `Post` model with additional fields and behaviors. Once complete,
    we will synchronize it to the database by creating a database migration and applying
    it.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用额外的字段和行为扩展`Post`模型。一旦完成，我们将通过创建数据库迁移并应用它来将其同步到数据库。
- en: Adding datetime fields
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加日期时间字段
- en: We will continue by adding different datetime fields to the `Post` model. Each
    post will be published at a specific date and time. Therefore, we need a field
    to store the publication date and time. We also want to store the date and time
    when the `Post` object was created and when it was last modified.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续通过向`Post`模型添加不同的日期时间字段。每篇帖子将在特定的日期和时间发布。因此，我们需要一个字段来存储发布日期和时间。我们还想存储`Post`对象创建的日期和时间以及最后一次修改的日期和时间。
- en: 'Edit the `models.py` file of the `blog` application to make it look like this;
    the new lines are highlighted in bold:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`blog`应用程序的`models.py`文件，使其看起来像这样；新行以粗体突出显示：
- en: '[PRE20]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We have added a `publish` field to the `Post` model. This is a `DateTimeField`
    field that translates into a `DATETIME` column in the SQL database. We will use
    it to store the date and time when the post was published. We use Django’s `timezone.now`
    method as the default value for the field. Note that we imported the `timezone`
    module to use this method. `timezone.now` returns the current datetime in a timezone-aware
    format. You can think of it as a timezone-aware version of the standard Python
    `datetime.now` method.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经向`Post`模型添加了一个`publish`字段。这是一个`DateTimeField`字段，在SQL数据库中对应一个`DATETIME`列。我们将用它来存储帖子发布的日期和时间。我们使用Django的`timezone.now`方法作为字段的默认值。注意，我们导入了`timezone`模块来使用这个方法。`timezone.now`返回一个时区感知格式的当前日期和时间。你可以将其视为标准Python
    `datetime.now`方法的时区感知版本。
- en: 'Another method to define default values for model fields is using database-computed
    default values. Introduced in Django 5, this feature allows you to use underlaying
    database functions to generate default values. For instance, the following code
    uses the database server’s current date and time as the default for the `publish`
    field:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 定义模型字段默认值的另一种方法是使用数据库计算出的默认值。Django 5引入了这一特性，允许您使用底层数据库函数来生成默认值。例如，以下代码使用数据库服务器的当前日期和时间作为`publish`字段的默认值：
- en: '[PRE21]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: To use database-generated default values, we use the `db_default` attribute
    instead of `default`. In this example, we use the `Now` database function. It
    serves a similar purpose to `default=timezone.now`, but instead of a Python-generated
    datetime, it uses the `NOW()` database function to produce the initial value.
    You can read more about the `db_default` attribute at [https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.Field.db_default](https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.Field.db_default).
    You can find all available database functions at [https://docs.djangoproject.com/en/5.0/ref/models/database-functions/](https://docs.djangoproject.com/en/5.0/ref/models/database-functions/).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用数据库生成的默认值，我们使用`db_default`属性而不是`default`。在这个例子中，我们使用了`Now`数据库函数。它具有与`default=timezone.now`类似的作用，但它使用`NOW()`数据库函数来生成初始值。您可以在[https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.Field.db_default](https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.Field.db_default)了解更多关于`db_default`属性的信息。您可以在[https://docs.djangoproject.com/en/5.0/ref/models/database-functions/](https://docs.djangoproject.com/en/5.0/ref/models/database-functions/)找到所有可用的数据库函数。
- en: 'Let’s continue with the previous version of the field:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续之前的字段版本：
- en: '[PRE22]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Edit the `models.py` file of the `blog` application and add the following lines
    highlighted in bold:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`blog`应用的`models.py`文件，并添加以下加粗的行：
- en: '[PRE23]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We have added the following fields to the `Post` model:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将以下字段添加到`Post`模型中：
- en: '`created`: This is a `DateTimeField` field. We will use it to store the date
    and time when the post was created. By using `auto_now_add`, the date will be
    saved automatically when creating an object.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created`：这是一个`DateTimeField`字段。我们将用它来存储帖子创建的日期和时间。通过使用`auto_now_add`，日期将在创建对象时自动保存。'
- en: '`updated`: This is a `DateTimeField` field. We will use it to store the last
    date and time when the post was updated. By using `auto_now`, the date will be
    updated automatically when saving an object.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updated`：这是一个`DateTimeField`字段。我们将用它来存储帖子最后更新的日期和时间。通过使用`auto_now`，日期将在保存对象时自动更新。'
- en: Utilizing the `auto_now_add` and `auto_now` datetime fields in your Django models
    is highly beneficial for tracking the creation and last modification times of
    objects.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django模型中使用`auto_now_add`和`auto_now`日期时间字段对于跟踪对象的创建和最后修改时间非常有好处。
- en: Defining a default sort order
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义默认排序顺序
- en: Blog posts are typically presented in reverse chronological order, showing the
    newest posts first. For our model, we will define a default ordering. This ordering
    takes effect when retrieving objects from the database unless a specific order
    is indicated in the query.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 博客帖子通常按逆时间顺序展示，首先显示最新的帖子。对于我们的模型，我们将定义一个默认排序顺序。除非查询中指定了特定顺序，否则这种排序将在从数据库检索对象时生效。
- en: 'Edit the `models.py` file of the `blog` application as shown below. The new
    lines are highlighted in bold:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下内容编辑`blog`应用的`models.py`文件。新行已加粗：
- en: '[PRE24]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We have added a `Meta` class inside the model. This class defines metadata for
    the model. We use the `ordering` attribute to tell Django that it should sort
    results by the `publish` field. This ordering will apply by default for database
    queries when no specific order is provided in the query. We indicate descending
    order by using a hyphen before the field name, `-publish`. Posts will be returned
    in reverse chronological order by default.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在模型内部添加了一个`Meta`类。这个类定义了模型的元数据。我们使用`ordering`属性告诉Django应该按`publish`字段排序结果。这种排序将在没有在查询中提供特定顺序的情况下作为数据库查询的默认排序方式。我们通过在字段名前使用连字符来表示降序，即`-publish`。默认情况下，帖子将按逆时间顺序返回。
- en: Adding a database index
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加数据库索引
- en: Let’s define a database index for the `publish` field. This will improve performance
    for query filtering or ordering results by this field. We expect many queries
    to take advantage of this index since we are using the `publish` field to order
    results by default.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为`publish`字段定义一个数据库索引。这将提高通过此字段进行查询过滤或排序结果时的性能。我们预计许多查询将利用此索引，因为我们默认使用`publish`字段来排序结果。
- en: 'Edit the `models.py` file of the `blog` application and make it look like this;
    the new lines are highlighted in bold:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`blog`应用的`models.py`文件，使其看起来如下；新的行以粗体突出显示：
- en: '[PRE25]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We have added the `indexes` option to the model’s `Meta` class. This option
    allows you to define database indexes for your model, which could comprise one
    or multiple fields, in ascending or descending order, or functional expressions
    and database functions. We have added an index for the `publish` field. We use
    a hyphen before the field name to define the index specifically in descending
    order. The creation of this index will be included in the database migrations
    that we will generate later for our blog models.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在模型的`Meta`类中添加了`indexes`选项。此选项允许你为你的模型定义数据库索引，这可能包括一个或多个字段，以升序或降序，或功能表达式和数据库函数。我们为`publish`字段添加了一个索引。我们使用字段名前的连字符来定义特定于降序的索引。此索引的创建将包含在我们稍后为我们的博客模型生成的数据库迁移中。
- en: Index ordering is not supported on MySQL. If you use MySQL for the database,
    a descending index will be created as a normal index.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL不支持索引排序。如果你使用MySQL作为数据库，将创建一个降序索引作为普通索引。
- en: You can find more information about how to define indexes for models at [https://docs.djangoproject.com/en/5.0/ref/models/indexes/](https://docs.djangoproject.com/en/5.0/ref/models/indexes/).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://docs.djangoproject.com/en/5.0/ref/models/indexes/](https://docs.djangoproject.com/en/5.0/ref/models/indexes/)找到有关如何为模型定义索引的更多信息。
- en: Activating the application
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激活应用
- en: We need to activate the `blog` application in the project for Django to keep
    track of the application and be able to create database tables for its models.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在项目中激活`blog`应用，以便Django能够跟踪应用并能够为其模型创建数据库表。
- en: 'Edit the `settings.py` file and add `blog.apps.BlogConfig` to the `INSTALLED_APPS`
    setting. It should look like this; the new lines are highlighted in bold:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`settings.py`文件，并将`blog.apps.BlogConfig`添加到`INSTALLED_APPS`设置中。它应该看起来像这样；新的行以粗体突出显示：
- en: '[PRE26]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `BlogConfig` class is the application configuration. Now Django knows that
    the application is active for this project and will be able to load the application
    models.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`BlogConfig`类是应用配置。现在Django知道该应用对于此项目是激活的，并将能够加载应用模型。'
- en: Adding a status field
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加状态字段
- en: A common functionality for blogs is to save posts as a draft until ready for
    publication. We will add a `status` field to our model that will allow us to manage
    the status of blog posts. We will be using the *Draft* and *Published* statuses
    for posts.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 博客的一个常见功能是在发布之前将帖子保存为草稿。我们将在我们的模型中添加一个`status`字段，以便我们能够管理博客帖子的状态。我们将为帖子使用`Draft`和`Published`状态。
- en: 'Edit the `models.py` file of the `blog` application to make it look as follows.
    The new lines are highlighted in bold:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`blog`应用的`models.py`文件，使其看起来如下。新的行以粗体突出显示：
- en: '[PRE27]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We have defined the enumeration class `Status` by subclassing `models.TextChoices`.
    The available choices for the post status are `DRAFT` and `PUBLISHED`. Their respective
    values are `DF` and `PB`, and their labels or readable names are *Draft* and *Published*.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过子类化`models.TextChoices`定义了枚举类`Status`。帖子状态的可用选项是`DRAFT`和`PUBLISHED`。它们相应的值是`DF`和`PB`，它们的标签或可读名称是*Draft*和*Published*。
- en: Django provides enumeration types that you can subclass to define choices simply.
    These are based on the `enum` object of Python’s standard library. You can read
    more about `enum` at [https://docs.python.org/3/library/enum.html](https://docs.python.org/3/library/enum.html).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了枚举类型，你可以通过子类化来简单地定义选择。这些是基于Python标准库中的`enum`对象。你可以在[https://docs.python.org/3/library/enum.html](https://docs.python.org/3/library/enum.html)了解更多关于`enum`的信息。
- en: Django enumeration types present some modifications over `enum`. You can learn
    about those differences at [https://docs.djangoproject.com/en/5.0/ref/models/fields/#enumeration-types](https://docs.djangoproject.com/en/5.0/ref/models/fields/#enumeration-types).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Django枚举类型相对于`enum`有一些修改。你可以在[https://docs.djangoproject.com/en/5.0/ref/models/fields/#enumeration-types](https://docs.djangoproject.com/en/5.0/ref/models/fields/#enumeration-types)了解这些差异。
- en: We can access `Post.Status.choices` to obtain the available choices, `Post.Status.names`
    to obtain the names of the choices, `Post.Status.labels` to obtain the human-readable
    names, and `Post.Status.values` to obtain the actual values of the choices.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过访问 `Post.Status.choices` 来获取可用的选项，通过 `Post.Status.names` 来获取选项的名称，通过 `Post.Status.labels`
    来获取可读性强的名称，以及通过 `Post.Status.values` 来获取选项的实际值。
- en: We have also added a new `status` field to the model that is an instance of
    `CharField`. It includes a `choices` parameter to limit the value of the field
    to the choices in `Status`. We have also set a default value for the field using
    the `default` parameter. We use `DRAFT` as the default choice for this field.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在模型中添加了一个新的 `status` 字段，它是一个 `CharField` 的实例。它包括一个 `choices` 参数，以限制字段的值只能为
    `Status` 中的选项。我们还使用 `default` 参数为该字段设置了默认值。我们使用 `DRAFT` 作为该字段的默认选项。
- en: It’s a good practice to define choices inside the model class and use the enumeration
    types. This will allow you to easily reference choice labels, values, or names
    from anywhere in your code. You can import the `Post` model and use `Post.Status.DRAFT`
    as a reference for the *Draft* status anywhere in your code.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型类内部定义选项并使用枚举类型是一种良好的实践。这将允许你轻松地在代码的任何地方引用选项标签、值或名称。你可以导入 `Post` 模型并使用 `Post.Status.DRAFT`
    作为代码中任何地方的 *Draft* 状态的引用。
- en: Let’s take a look at how to interact with status choices.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何与状态选项交互。
- en: 'Run the following command in the shell prompt to open the Python shell:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在shell提示符中运行以下命令以打开Python shell：
- en: '[PRE28]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, type the following lines:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，输入以下行：
- en: '[PRE29]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You will obtain the `enum` choices with value-label pairs, like this:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 你将获得具有值-标签对的 `enum` 选项，如下所示：
- en: '[PRE30]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Type the following line:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下行：
- en: '[PRE31]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You will get the human-readable names of the `enum` members, as follows:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到 `enum` 成员的可读性名称，如下所示：
- en: '[PRE32]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Type the following line:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下行：
- en: '[PRE33]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You will get the values of the `enum` members, as follows. These are the values
    that can be stored in the database for the `status` field:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到 `enum` 成员的值，如下所示。这些是可以存储在数据库中 `status` 字段的值：
- en: '[PRE34]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Type the following line:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下行：
- en: '[PRE35]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You will get the names of the choices, like this:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到选项的名称，如下所示：
- en: '[PRE36]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: You can access a specific lookup enumeration member with `Post.Status.PUBLISHED`
    and you can access its `.name` and `.value` properties as well.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `Post.Status.PUBLISHED` 访问特定的查找枚举成员，并且你可以访问它的 `.name` 和 `.value` 属性。
- en: Adding a many-to-one relationship
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加多对一关系
- en: Posts are always written by an author. We will create a relationship between
    users and posts that will indicate which user wrote which posts. Django comes
    with an authentication framework that handles user accounts. The Django authentication
    framework comes in the `django.contrib.auth` package and contains a `User` model.
    To define the relationship between users and posts, we will use the `AUTH_USER_MODEL`
    setting, which points to `auth.User` by default. This setting allows you to specify
    a different user model for your project.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 帖子总是由作者撰写的。我们将创建用户和帖子之间的关系，以指示哪个用户写了哪些帖子。Django附带一个处理用户账户的认证框架。Django认证框架位于
    `django.contrib.auth` 包中，并包含一个 `User` 模型。为了定义用户和帖子之间的关系，我们将使用 `AUTH_USER_MODEL`
    设置，该设置默认指向 `auth.User`。此设置允许你为项目指定不同的用户模型。
- en: 'Edit the `models.py` file of the `blog` application to make it look as follows.
    The new lines are highlighted in bold:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `blog` 应用程序的 `models.py` 文件，使其看起来如下。新行以粗体显示：
- en: '[PRE37]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We have imported the project’s settings and we have added an `author` field
    to the `Post` model. This field defines a many-to-one relationship with the default
    user model, meaning that each post is written by a user, and a user can write
    any number of posts. For this field, Django will create a foreign key in the database
    using the primary key of the related model.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经导入了项目的设置，并在 `Post` 模型中添加了一个 `author` 字段。该字段定义了与默认用户模型的多对一关系，这意味着每篇帖子都是由一个用户撰写的，一个用户可以撰写任意数量的帖子。对于这个字段，Django将在数据库中使用相关模型的键创建一个外键。
- en: The `on_delete` parameter specifies the behavior to adopt when the referenced
    object is deleted. This is not specific to Django; it is a SQL standard. Using
    `CASCADE`, you specify that when the referenced user is deleted, the database
    will also delete all related blog posts. You can take a look at all the possible
    options at [https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.ForeignKey.on_delete](https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.ForeignKey.on_delete).
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`on_delete`参数指定当引用的对象被删除时要采用的行为。这不仅仅适用于Django；这是一个SQL标准。使用`CASCADE`，您指定当引用的用户被删除时，数据库也将删除所有相关的博客文章。您可以在[https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.ForeignKey.on_delete](https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.ForeignKey.on_delete)查看所有可能的选项。'
- en: We use `related_name` to specify the name of the reverse relationship, from
    `User` to `Post`. This will allow us to access related objects easily from a user
    object by using the `user.blog_posts` notation. We will learn more about this
    later.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`related_name`来指定反向关系的名称，从`User`到`Post`。这将使我们能够通过使用`user.blog_posts`的表示法轻松地从用户对象访问相关对象。我们将在稍后了解更多关于这一点。
- en: Django comes with different types of fields that you can use to define your
    models. You can find all field types at [https://docs.djangoproject.com/en/5.0/ref/models/fields/](https://docs.djangoproject.com/en/5.0/ref/models/fields/).
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了不同类型的字段，您可以使用这些字段来定义您的模型。您可以在[https://docs.djangoproject.com/en/5.0/ref/models/fields/](https://docs.djangoproject.com/en/5.0/ref/models/fields/)找到所有字段类型。
- en: The `Post` model is now complete, and we can now synchronize it to the database.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`Post`模型现在已完成，我们现在可以将其同步到数据库。'
- en: Creating and applying migrations
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建并应用迁移
- en: Now that we have a data model for blog posts, we need to create the corresponding
    database table. Django comes with a migration system that tracks the changes made
    to models and enables them to propagate into the database.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了博客文章的数据模型，我们需要创建相应的数据库表。Django提供了一个迁移系统，它跟踪对模型所做的更改，并使它们能够传播到数据库中。
- en: The `migrate` command applies migrations for all applications listed in `INSTALLED_APPS`.
    It synchronizes the database with the current models and existing migrations.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`migrate`命令为`INSTALLED_APPS`中列出的所有应用程序应用迁移。它将数据库与当前模型和现有迁移同步。'
- en: First, we will need to create an initial migration for our `Post` model.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为我们的`Post`模型创建一个初始迁移。
- en: 'Run the following command in the shell prompt from the root directory of your
    project:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在您项目的根目录下从shell提示符运行以下命令：
- en: '[PRE38]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You should get an output similar to the following one:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下类似的输出：
- en: '[PRE39]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Django just created the `0001_initial.py` file inside the `migrations` directory
    of the `blog` application. This migration contains the SQL statements to create
    the database table for the `Post` model and the definition of the database index
    for the `publish` field.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: Django刚刚在`blog`应用的`migrations`目录中创建了`0001_initial.py`文件。这个迁移包含创建`Post`模型数据库表的SQL语句以及为`publish`字段定义的数据库索引。
- en: You can take a look at the file contents to see how the migration is defined.
    A migration specifies dependencies on other migrations and operations to perform
    in the database to synchronize it with model changes.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查看文件内容来了解迁移是如何定义的。迁移指定了对其他迁移的依赖以及要在数据库中执行的操作以同步模型更改。
- en: Let’s take a look at the SQL code that Django will execute in the database to
    create the table for your model. The `sqlmigrate` command takes the migration
    names and returns their SQL without executing it.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Django将在数据库中执行的SQL代码以创建您的模型表。`sqlmigrate`命令接受迁移名称并返回它们的SQL，而不执行它。
- en: 'Run the following command from the shell prompt to inspect the SQL output of
    your first migration:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 从shell提示符运行以下命令以检查您第一次迁移的SQL输出：
- en: '[PRE40]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The output should look as follows:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '[PRE41]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The exact output depends on the database you are using. The preceding output
    is generated for SQLite. As you can see in the output, Django generates the table
    names by combining the application name and the lowercase name of the model (`blog_post`),
    but you can also specify a custom database name for your model in the `Meta` class
    of the model using the `db_table` attribute.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 实际输出取决于您使用的数据库。前面的输出是为SQLite生成的。如您在输出中看到的，Django通过组合应用程序名称和模型的_lowercase_名称（`blog_post`）来生成表名，但您也可以在模型的`Meta`类中使用`db_table`属性为您的模型指定一个自定义数据库名称。
- en: Django creates an auto-incremental `id` column that is used as the primary key
    for each model, but you can also override this by specifying `primary_key=True`
    on one of your model fields. The default `id` column consists of an integer that
    is incremented automatically. This column corresponds to the `id` field that is
    automatically added to your model.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Django会创建一个自动增长的`id`列，该列用作每个模型的键，但你也可以通过在你的模型字段中指定`primary_key=True`来覆盖此设置。默认的`id`列由一个自动增加的整数组成。此列对应于自动添加到你的模型中的`id`字段。
- en: 'The following three database indexes are created:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 以下三个数据库索引被创建：
- en: An index in descending order on the `publish` column. This is the index we explicitly
    defined with the `indexes` option of the model’s `Meta` class.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`publish`列上的降序索引。这是我们通过模型的`Meta`类的`indexes`选项显式定义的索引。
- en: An index on the `slug` column because `SlugField` fields imply an index by default.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`slug`列上的索引，因为`SlugField`字段默认意味着索引。
- en: An index on the `author_id` column because `ForeignKey` fields imply an index
    by default.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`author_id`列上的索引，因为`ForeignKey`字段默认意味着索引。
- en: 'Let’s compare the `Post` model with its corresponding database `blog_post`
    table:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较`Post`模型与其对应的数据库`blog_post`表：
- en: '![Table  Description automatically generated with medium confidence](img/B21088_01_06.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![表格 描述自动生成，置信度中等](img/B21088_01_06.png)'
- en: 'Figure 1.6: Complete Post model and database table correspondence'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6：完整的Post模型和数据库表对应关系
- en: '*Figure 1.6* shows how the model fields correspond to database table columns.'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1.6*显示了模型字段如何对应于数据库表列。'
- en: Let’s sync the database with the new model.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用新模型同步数据库。
- en: 'Execute the following command in the shell prompt to apply the existing migrations:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在shell提示符中执行以下命令以应用现有的迁移：
- en: '[PRE42]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You will get an output that ends with the following line:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下行结束的输出：
- en: '[PRE43]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: We just applied migrations for the applications listed in `INSTALLED_APPS`,
    including the `blog` application. After applying the migrations, the database
    reflects the current status of the models.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚为`INSTALLED_APPS`中列出的应用程序应用了迁移，包括`blog`应用程序。应用迁移后，数据库反映了模型的当前状态。
- en: If you edit the `models.py` file in order to add, remove, or change the fields
    of existing models, or if you add new models, you will have to create a new migration
    using the `makemigrations` command. Each migration allows Django to keep track
    of model changes. Then, you will have to apply the migration using the `migrate`
    command to keep the database in sync with your models.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你编辑`models.py`文件以添加、删除或更改现有模型的字段，或者如果你添加了新模型，你必须使用`makemigrations`命令创建一个新的迁移。每个迁移都允许Django跟踪模型变化。然后，你必须使用`migrate`命令应用迁移，以保持数据库与你的模型同步。
- en: Creating an administration site for models
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为模型创建管理站点
- en: Now that the `Post` model is in sync with the database, we can create a simple
    administration site to manage blog posts.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`Post`模型与数据库同步后，我们可以创建一个简单的管理站点来管理博客文章。
- en: Django comes with a built-in administration interface that is very useful for
    editing content. The Django site is built dynamically by reading the model metadata
    and providing a production-ready interface for editing content. You can use it
    out of the box, configuring how you want your models to be displayed in it.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: Django自带一个非常有用的内置管理界面，用于编辑内容。Django站点通过读取模型元数据并提供一个用于编辑内容的现成接口来动态构建。你可以直接使用它，配置你希望如何在其中显示你的模型。
- en: The `django.contrib.admin` application is already included in the `INSTALLED_APPS`
    setting, so you don’t need to add it.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.contrib.admin`应用程序已经包含在`INSTALLED_APPS`设置中，因此你不需要添加它。'
- en: Creating a superuser
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建超级用户
- en: 'First, you will need to create a user to manage the administration site. Run
    the following command:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要创建一个用户来管理管理站点。运行以下命令：
- en: '[PRE44]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You will see the following output. Enter your desired username, email, and
    password, as follows:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下输出。输入你想要的用户名、电子邮件和密码，如下所示：
- en: '[PRE45]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then, you will see the following success message:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将看到以下成功消息：
- en: '[PRE46]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We just created an administrator user with the highest permissions.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了一个具有最高权限的管理员用户。
- en: The Django administration site
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django管理站点
- en: 'Start the development server with the following command:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令启动开发服务器：
- en: '[PRE47]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Open `http://127.0.0.1:8000/admin/` in your browser. You should see the administration
    login page, as shown in *Figure 1.7*:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开`http://127.0.0.1:8000/admin/`。你应该看到管理登录页面，如图*图1.7*所示：
- en: '![](img/B21088_01_07.png)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B21088_01_07.png](img/B21088_01_07.png)'
- en: 'Figure 1.7: The Django administration site login screen'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7：Django 管理站点登录屏幕
- en: 'Log in using the credentials of the user you created in the preceding step.
    You will see the administration site index page, as shown in *Figure 1.8*:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前一步骤中创建的用户凭据登录。你会看到如图 *图 1.8* 所示的管理站点索引页面：
- en: '![](img/B21088_01_08.png)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_01_08.png)'
- en: 'Figure 1.8: The Django administration site index page'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8：Django 管理站点索引页面
- en: The `Group` and `User` models that you can see in the preceding screenshot are
    part of the Django authentication framework located in `django.contrib.auth`.
    If you click on **Users**, you will see the user you created previously.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中所看到的 `Group` 和 `User` 模型是 Django 认证框架的一部分，位于 `django.contrib.auth`。如果你点击
    **Users**，你会看到你之前创建的用户。
- en: Adding models to the administration site
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将模型添加到管理站点
- en: 'Let’s add your blog models to the administration site. Edit the `admin.py`
    file of the `blog` application and make it look like this; the new lines are highlighted
    in bold:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将你的博客模型添加到管理站点。编辑 `blog` 应用的 `admin.py` 文件，使其看起来像这样；新行以粗体突出显示：
- en: '[PRE48]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now, reload the administration site in your browser. You should see your `Post`
    model on the site, as follows:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在浏览器中重新加载管理站点。你应该会在网站上看到你的 `Post` 模型，如下所示：
- en: '![](img/B21088_01_09.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_01_09.png)'
- en: 'Figure 1.9: The Post model of the blog application included in the Django administration
    site index page'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9：包含在 Django 管理站点索引页面中的博客应用的帖子模型
- en: That was easy, right? When you register a model in the Django administration
    site, you get a user-friendly interface generated by introspecting your models
    that allows you to list, edit, create, and delete objects in a simple way.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，对吧？当你将模型注册到 Django 管理站点时，你将获得一个由 introspecting 你的模型生成的用户友好界面，它允许你以简单的方式列出、编辑、创建和删除对象。
- en: 'Click on the **Add** link beside **Posts** to add a new post. You will note
    the form that Django has generated dynamically for your model, as shown in *Figure
    1.10*:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **Posts** 旁边的 **添加** 链接来添加一个新的帖子。你会注意到 Django 为你的模型动态生成的表单，如图 *图 1.10* 所示：
- en: '![](img/B21088_01_10.png)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_01_10.png)'
- en: 'Figure 1.10: The Django administration site edit form for the Post model'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10：Django 管理站点帖子模型的编辑表单
- en: Django uses different form widgets for each type of field. Even complex fields,
    such as `DateTimeField`, are displayed with an easy interface, such as a JavaScript
    date picker.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: Django 为每种类型的字段使用不同的表单小部件。即使是复杂的字段，如 `DateTimeField`，也使用简单的界面，如 JavaScript 日期选择器来显示。
- en: 'Fill in the form and click on the **SAVE** button. You should be redirected
    to the post list page with a success message and the post you just created, as
    shown in *Figure 1.11*:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 填写表单并点击 **保存** 按钮。你应该会被重定向到帖子列表页面，并显示成功消息和刚刚创建的帖子，如图 *图 1.11* 所示：
- en: '![](img/B21088_01_11.png)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_01_11.png)'
- en: 'Figure 1.11: The Django administration site list view for the Post model with
    an added successfully message'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11：添加成功消息的帖子模型的 Django 管理站点列表视图
- en: Customizing how models are displayed
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义模型显示方式
- en: Now, we will take a look at how to customize the administration site.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看看如何自定义管理站点。
- en: 'Edit the `admin.py` file of your `blog` application and change it, as follows.
    The new lines are highlighted in bold:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑你的 `blog` 应用的 `admin.py` 文件，并按以下方式更改它。新行以粗体突出显示：
- en: '[PRE49]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: We are telling the Django administration site that the model is registered in
    the site using a custom class that inherits from `ModelAdmin`. In this class,
    we can include information about how to display the model on the administration
    site and how to interact with it.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在告诉 Django 管理站点，使用继承自 `ModelAdmin` 的自定义类来注册模型。在这个类中，我们可以包含有关如何在管理站点上显示模型以及如何与之交互的信息。
- en: The `list_display` attribute allows you to set the fields of your model that
    you want to display on the administration object list page. The `@admin.register()`
    decorator performs the same function as the `admin.site.register()` function that
    you replaced, registering the `ModelAdmin` class that it decorates.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_display` 属性允许你设置你希望在管理对象列表页面上显示的模型字段。`@admin.register()` 装饰器执行与替换的 `admin.site.register()`
    函数相同的功能，注册它装饰的 `ModelAdmin` 类。'
- en: Let’s customize the `admin` model with some more options.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用更多选项自定义 `admin` 模型。
- en: 'Edit the `admin.py` file of your `blog` application and change it, as follows.
    The new lines are highlighted in bold:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑你的 `blog` 应用的 `admin.py` 文件，并按以下方式更改它。新行以粗体突出显示：
- en: '[PRE50]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Return to your browser and reload the post list page. Now, it will look like
    this:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 返回你的浏览器并重新加载帖子列表页面。现在，它看起来是这样的：
- en: '![](img/B21088_01_12.png)'
  id: totrans-363
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_01_12.png)'
- en: 'Figure 1.12: The Django administration site custom list view for the Post model'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.12：Django管理站点为帖子模型定制的列表视图
- en: You can see that the fields displayed on the post list page are the ones we
    specified in the `list_display` attribute. The list page now includes a right
    sidebar that allows you to filter the results by the fields included in the `list_filter`
    attribute. Filters for `ForeignKey` fields like `author` are only displayed in
    the sidebar if more than one object exists in the database.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到在帖子列表页面上显示的字段是我们指定的 `list_display` 属性中的字段。列表页面现在包括一个右侧边栏，允许你通过 `list_filter`
    属性中包含的字段过滤结果。对于 `ForeignKey` 字段如 `author` 的过滤器，只有当数据库中存在多个对象时才在侧边栏中显示。
- en: A search bar has appeared on the page. This is because we have defined a list
    of searchable fields using the `search_fields` attribute. Just below the search
    bar, there are navigation links to navigate through a date hierarchy; this has
    been defined by the `date_hierarchy` attribute. You can also see that the posts
    are ordered by **STATUS** and **PUBLISH** columns by default. We have specified
    the default sorting criteria using the `ordering` attribute.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上出现了一个搜索栏。这是因为我们使用 `search_fields` 属性定义了一个可搜索字段列表。在搜索栏下方，有一些导航链接，用于通过 `date_hierarchy`
    属性定义的日期层次结构进行导航；默认情况下，帖子按 **状态** 和 **发布** 列排序。我们使用 `ordering` 属性指定了默认排序标准。
- en: 'Next, click on the **ADD POST** link. You will also note some changes here.
    As you type the title of a new post, the `slug` field is filled in automatically.
    You have told Django to prepopulate the `slug` field with the input of the `title`
    field using the `prepopulated_fields` attribute:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击 **添加帖子** 链接。你也会在这里注意到一些变化。当你输入新帖子的标题时，`slug` 字段会自动填充。你已经告诉Django使用 `prepopulated_fields`
    属性，将 `title` 字段的输入预先填充到 `slug` 字段中：
- en: '![](img/B21088_01_13.png)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_01_13.png)'
- en: 'Figure 1.13: The slug model is now automatically prepopulated as you type in
    the title'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.13：slug模型现在在输入标题时自动预先填充
- en: 'Also, the `author` field is now displayed with a lookup widget, which can be
    much better than an input selection drop-down when you have thousands of users.
    This is achieved with the `raw_id_fields` attribute and it looks like this:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`author` 字段现在显示为查找小部件，当有数千个用户时，这比输入选择下拉列表要好得多。这是通过 `raw_id_fields` 属性实现的，看起来像这样：
- en: '![](img/B21088_01_14.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_01_14.png)'
- en: 'Figure 1.14: The widget to select related objects for the Author field of the
    Post model'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.14：用于选择与帖子模型作者字段相关联的对象的小部件
- en: Adding facet counts to filters
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将面数添加到过滤器中
- en: Django 5.0 introduces facet filters to the administration site, showcasing facet
    counts. These counts indicate the number of objects corresponding to each specific
    filter, making it easier to identify matching objects in the admin changelist
    view. Next, we are going to make sure facet filters are always displayed for the
    `PostAdmin` admin model.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: Django 5.0 将面过滤功能引入到管理站点，展示了面数。这些计数表示对应于每个特定过滤器的对象数量，使得在管理员更改列表视图中识别匹配对象变得更容易。接下来，我们将确保面过滤器始终显示在
    `PostAdmin` 管理模型中。
- en: 'Edit the `admin.py` file of your `blog` application and add the following line
    highlighted in bold:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑你的 `blog` 应用程序的 `admin.py` 文件，并添加以下加粗的行：
- en: '[PRE51]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Create some posts using the administration site and access `http://127.0.0.1:8000/admin/blog/post/`.
    The filters should now include total facet counts, as shown in *Figure 1.15*:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 使用管理站点创建一些帖子，并访问 `http://127.0.0.1:8000/admin/blog/post/`。现在过滤器应包括总面数，如图 *图1.15*
    所示：
- en: '![](img/B21088_01_15.png)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_01_15.png)'
- en: 'Figure 1.15: Status field filters including facet counts'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.15：包括面数的状态字段过滤器
- en: With a few lines of code, we have customized the way the model is displayed
    on the administration site. There are plenty of ways to customize and extend the
    Django administration site; you will learn more about these later in this book.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 通过几行代码，我们已经自定义了模型在管理站点上的显示方式。有大量的方式可以自定义和扩展Django管理站点；你将在本书的后面了解更多关于这些内容。
- en: You can find more information about the Django administration site at [https://docs.djangoproject.com/en/5.0/ref/contrib/admin/](https://docs.djangoproject.com/en/5.0/ref/contrib/admin/).
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://docs.djangoproject.com/en/5.0/ref/contrib/admin/](https://docs.djangoproject.com/en/5.0/ref/contrib/admin/)
    找到有关Django管理站点的更多信息。
- en: Working with QuerySets and managers
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用查询集和管理器进行工作
- en: Now that we have a fully functional administration site to manage blog posts,
    it is a good time to learn how to read and write content to the database programmatically.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个完全功能的管理站点来管理博客文章，这是一个学习如何以编程方式读取和写入数据库内容的好时机。
- en: The Django **object-relational mapper** (**ORM**) is a powerful database abstraction
    API that lets you create, retrieve, update, and delete objects easily. An ORM
    allows you to generate SQL queries using the object-oriented paradigm of Python.
    You can think of it as a way to interact with your database in a Pythonic fashion
    instead of writing raw SQL queries.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: Django 的 **对象关系映射器**（**ORM**）是一个强大的数据库抽象 API，它让你可以轻松地创建、检索、更新和删除对象。ORM 允许你使用
    Python 的面向对象范式生成 SQL 查询。你可以将其视为一种以 Pythonic 方式与数据库交互的方法，而不是编写原始 SQL 查询。
- en: The ORM maps your models to database tables and provides you with a simple Pythonic
    interface to interact with your database. The ORM generates SQL queries and maps
    the results to model objects. The Django ORM is compatible with MySQL, PostgreSQL,
    SQLite, Oracle, and MariaDB.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 将你的模型映射到数据库表中，并为你提供了一个简单的 Pythonic 接口来与数据库交互。ORM 会生成 SQL 查询并将结果映射到模型对象。Django
    ORM 与 MySQL、PostgreSQL、SQLite、Oracle 和 MariaDB 兼容。
- en: Remember that you can define the database of your project in the `DATABASES`
    setting of your project’s `settings.py` file. Django can work with multiple databases
    at a time, and you can program database routers to create custom data routing
    schemes.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以在项目的 `settings.py` 文件的 `DATABASES` 设置中定义你项目的数据库。Django 可以同时与多个数据库一起工作，并且你可以编写数据库路由器来创建自定义的数据路由方案。
- en: Once you have created your data models, Django gives you a free API to interact
    with them. You can find the model API reference of the official documentation
    at [https://docs.djangoproject.com/en/5.0/ref/models/](https://docs.djangoproject.com/en/5.0/ref/models/).
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了你的数据模型，Django 会为你提供一个免费的 API 来与之交互。你可以在官方文档中找到模型 API 参考，链接为 [https://docs.djangoproject.com/en/5.0/ref/models/](https://docs.djangoproject.com/en/5.0/ref/models/)。
- en: The Django ORM is based on QuerySets. A QuerySet is a collection of database
    queries to retrieve objects from your database. You can apply filters to QuerySets
    to narrow down the query results based on given parameters. The QuerySet equates
    to a `SELECT` SQL statement and the filters are limiting SQL clauses such as `WHERE`
    or `LIMIT`.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: Django ORM 基于 QuerySets。QuerySet 是一组数据库查询，用于从你的数据库中检索对象。你可以应用过滤器到 QuerySets
    上，根据给定的参数来缩小查询结果。QuerySet 等同于一个 `SELECT` SQL 语句，而过滤器是限制 SQL 子句，如 `WHERE` 或 `LIMIT`。
- en: Next, you are going to learn how to build and execute QuerySets.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将学习如何构建和执行 QuerySets。
- en: Creating objects
  id: totrans-390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建对象
- en: 'Run the following command in the shell prompt to open the Python shell:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 在 shell 提示符中运行以下命令以打开 Python shell：
- en: '[PRE52]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Then, type the following lines:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，输入以下行：
- en: '[PRE53]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Let’s analyze what this code does.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来分析一下这段代码的功能。
- en: 'First, we are retrieving the `user` object with the username `admin`:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过用户名 `admin` 检索 `user` 对象：
- en: '[PRE54]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The `get()` method allows us to retrieve a single object from the database.
    This method executes a `SELECT` SQL statement behind the scenes. Note that this
    method expects a result that matches the query. If no results are returned by
    the database, this method will raise a `DoesNotExist` exception, and if the database
    returns more than one result, it will raise a `MultipleObjectsReturned` exception.
    Both exceptions are attributes of the model class that the query is being performed
    on.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`get()` 方法允许我们从数据库中检索单个对象。此方法在幕后执行一个 `SELECT` SQL 语句。注意，此方法期望一个与查询匹配的结果。如果数据库没有返回结果，此方法将引发一个
    `DoesNotExist` 异常，如果数据库返回多个结果，它将引发一个 `MultipleObjectsReturned` 异常。这两个异常都是正在执行查询的模型类的属性。'
- en: 'Then, we create a `Post` instance with a custom title, slug, and body, and
    set the user that we previously retrieved as the author of the post:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个具有自定义标题、别名和正文的 `Post` 实例，并将之前检索到的用户设置为帖子的作者：
- en: '[PRE55]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This object is in memory and not persisted to the database; we created a Python
    object that can be used during runtime but is not saved into the database.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 这个对象是在内存中的，并没有持久化到数据库；我们创建了一个可以在运行时使用的 Python 对象，但并没有将其保存到数据库中。
- en: 'Finally, we are saving the `Post` object in the database using the `save()`
    method:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用 `save()` 方法在数据库中保存 `Post` 对象：
- en: '[PRE56]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: This action performs an `INSERT` SQL statement behind the scenes.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作在幕后执行一个 `INSERT` SQL 语句。
- en: 'We created an object in memory first and then persisted it to the database.
    However, you can create the object and persist it to the database in a single
    operation using the `create()` method, as follows:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在内存中创建了一个对象，然后将其持久化到数据库中。然而，你可以使用`create()`方法在单个操作中创建对象并将其持久化到数据库，如下所示：
- en: '[PRE57]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'In certain situations, you might need to fetch an object from the database
    or create it if it’s absent. The `get_or_create()` method facilitates this by
    either retrieving an object or creating it if not found. This method returns a
    tuple with the object retrieved and a Boolean indicating whether a new object
    was created. The following code attempts to retrieve a `User` object with the
    username `user2`, and if it doesn’t exist, it will create one:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能需要从数据库中检索对象或创建它（如果不存在）。`get_or_create()`方法通过检索对象或创建它（如果未找到）来简化此过程。此方法返回一个包含检索到的对象和一个表示是否创建了新对象的布尔值的元组。以下代码尝试检索用户名为`user2`的`User`对象，如果不存在，则创建一个：
- en: '[PRE58]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Updating objects
  id: totrans-409
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新对象
- en: 'Now, change the title of the previous `Post` object to something different
    and save the object again:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将上一个`Post`对象的标题更改为不同的内容，并再次保存对象：
- en: '[PRE59]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This time, the `save()` method performs an `UPDATE` SQL statement.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，`save()`方法执行了一个`UPDATE` SQL 语句。
- en: The changes you make to a model object are not persisted to the database until
    you call the `save()` method.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 你对模型对象所做的更改在调用`save()`方法之前不会持久化到数据库。
- en: Retrieving objects
  id: totrans-414
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检索对象
- en: You already know how to retrieve a single object from the database using the
    `get()` method. We accessed this method using `Post.objects.get()`. Each Django
    model has at least one manager, and the default manager is called `objects`. You
    get a QuerySet object using your model manager.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经知道如何使用`get()`方法从数据库中检索单个对象。我们通过`Post.objects.get()`访问这个方法。每个 Django 模型至少有一个管理器，默认管理器称为`objects`。你可以通过你的模型管理器获取查询集对象。
- en: 'To retrieve all objects from a table, we use the `all()` method on the default
    `objects` manager, like this:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索表中的所有对象，我们使用默认`objects`管理器的`all()`方法，如下所示：
- en: '[PRE60]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'This is how we create a QuerySet that returns all objects in the database.
    Note that this QuerySet has not been executed yet. Django QuerySets are *lazy*,
    which means they are only evaluated when they are forced to. This behavior makes
    QuerySets very efficient. If you don’t assign the QuerySet to a variable but,
    instead, write it directly on the Python shell, the SQL statement of the QuerySet
    is executed because you are forcing it to generate output:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是如何创建一个查询集，该查询集返回数据库中的所有对象。请注意，这个查询集尚未执行。Django 查询集是**懒加载**的，这意味着它们只有在被强制执行时才会被评估。这种行为使得查询集非常高效。如果你没有将查询集分配给变量，而是直接在
    Python 命令行中写入它，那么查询集的 SQL 语句将被执行，因为你正在强制它生成输出：
- en: '[PRE61]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Filtering objects
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤对象
- en: To filter a QuerySet, you can use the `filter()` method of the manager. This
    method allows you to specify the content of a SQL `WHERE` clause by using field
    lookups.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 要过滤查询集，你可以使用管理器的`filter()`方法。此方法允许你通过使用字段查找来指定 SQL `WHERE` 子句的内容。
- en: 'For example, you can use the following to filter `Post` objects by their `title`:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以使用以下方法通过其`标题`过滤`Post`对象：
- en: '[PRE62]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This QuerySet will return all posts with the exact title *Who was Django Reinhardt?*.
    Let’s review the SQL statement generated with this QuerySet. Run the following
    code in the shell:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询集将返回所有标题为*谁是 Django Reinhardt？*的帖子。让我们回顾一下使用此查询集生成的 SQL 语句。在 shell 中运行以下代码：
- en: '[PRE63]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'By printing the `query` attribute of the QuerySet, we can get the SQL produced
    by it:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打印查询集的`query`属性，我们可以获取它产生的 SQL：
- en: '[PRE64]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The generated `WHERE` clause performs an exact match on the `title` column.
    The `ORDER BY` clause specifies the default order defined in the `ordering` attribute
    of the `Post` model’s `Meta` options since we haven’t provided any specific ordering
    in the QuerySet. You will learn about ordering in a bit. Note that the `query`
    attribute is not part of the QuerySet public API.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的`WHERE`子句在`标题`列上执行精确匹配。`ORDER BY`子句指定了在`Post`模型的`Meta`选项中定义的默认顺序，因为我们没有在查询集中提供任何特定的排序。你将在稍后学习有关排序的内容。请注意，`query`属性不是查询集公共
    API 的一部分。
- en: Using field lookups
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用字段查找
- en: 'The previous QuerySet example consists of a filter lookup with an exact match.
    The QuerySet interface provides you with multiple lookup types. Two underscores
    are used to define the lookup type, with the format `field__lookup`. For example,
    the following lookup produces an exact match:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的查询集示例包含一个与精确匹配的过滤器查找。查询集接口为你提供了多种查找类型。使用两个下划线来定义查找类型，格式为 `field__lookup`。例如，以下查找产生一个精确匹配：
- en: '[PRE65]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'When no specific lookup type is provided, the lookup type is assumed to be
    `exact`. The following lookup is equivalent to the previous one:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有提供特定的查找类型时，默认的查找类型是 `exact`。以下查找与上一个查找等效：
- en: '[PRE66]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Let’s take a look at other common lookup types. You can generate a case-insensitive
    lookup with `iexact`:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看其他常见的查找类型。你可以使用 `iexact` 生成不区分大小写的查找：
- en: '[PRE67]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'You can also filter objects using a containment test. The `contains` lookup
    translates to a SQL lookup using the `LIKE` operator:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用包含测试来过滤对象。`contains` 查找转换为使用 `LIKE` 操作符的 SQL 查找：
- en: '[PRE68]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The equivalent SQL clause is `WHERE title LIKE ''%Django%''`. A case-insensitive
    version is also available, named `icontains`:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 相当的 SQL 子句是 `WHERE title LIKE '%Django%'`。还有一个不区分大小写版本，名为 `icontains`：
- en: '[PRE69]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'You can check for a given iterable (often a list, tuple, or another QuerySet
    object) with the `in` lookup. The following example retrieves posts with an `id`
    that is `1` or `3`:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `in` 查找检查给定的可迭代对象（通常是列表、元组或另一个查询集对象）。以下示例检索 `id` 为 `1` 或 `3` 的帖子：
- en: '[PRE70]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The following example shows the greater than (`gt`) lookup:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了大于 (`gt`) 查找：
- en: '[PRE71]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The equivalent SQL clause is `WHERE ID > 3`.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 相当的 SQL 子句是 `WHERE ID > 3`。
- en: 'This example shows the greater than or equal to lookup:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了大于等于查找：
- en: '[PRE72]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'This one shows the less than lookup:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 这一个展示了小于查找：
- en: '[PRE73]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'This shows the less than or equal to lookup:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了小于等于查找：
- en: '[PRE74]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'A case-sensitive/insensitive starts-with lookup can be performed with the `startswith`
    and `istartswith` lookup types, respectively:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `startswith` 和 `istartswith` 查找类型分别执行大小写敏感或不敏感的以...开头的查找：
- en: '[PRE75]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'A case-sensitive/insensitive ends-with lookup can be performed with the `endswith`
    and `iendswith` lookup types, respectively:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `endswith` 和 `iendswith` 查找类型分别执行大小写敏感或不敏感的以...结尾的查找：
- en: '[PRE76]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'There are also different lookup types for date lookups. An exact date lookup
    can be performed as follows:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 对于日期查找，也有不同的查找类型。精确日期查找可以按以下方式执行：
- en: '[PRE77]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'This shows how to filter a `DateField` or `DateTimeField` field by year:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了如何通过年份过滤 `DateField` 或 `DateTimeField` 字段：
- en: '[PRE78]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'You can also filter by month:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以按月份进行过滤：
- en: '[PRE79]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'And you can filter by day:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以按天进行过滤：
- en: '[PRE80]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'You can chain additional lookups to `date`, `year`, `month`, and `day`. For
    example, here is a lookup for a value greater than a given date:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将额外的查找链接到 `date`、`year`、`month` 和 `day`。例如，以下是一个查找大于给定日期的值的查询：
- en: '[PRE81]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'To lookup related object fields, you also use the two-underscores notation.
    For example, to retrieve the posts written by the user with the `admin` username,
    use the following:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找相关对象字段，你也使用双下划线表示法。例如，要检索用户名为 `admin` 的用户撰写的帖子，可以使用以下查询：
- en: '[PRE82]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'You can also chain additional lookups for the related fields. For example,
    to retrieve posts written by any user with a username that starts with `ad`, use
    the following:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以为相关字段链接额外的查找。例如，要检索用户名为 `ad` 开头的任何用户撰写的帖子，可以使用以下查询：
- en: '[PRE83]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'You can also filter by multiple fields. For example, the following QuerySet
    retrieves all posts published in 2024 by the author with the username `admin`:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以按多个字段进行过滤。例如，以下查询集检索了由用户名为 `admin` 的作者在2024年发布的所有帖子：
- en: '[PRE84]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Chaining filters
  id: totrans-471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接过滤器
- en: 'The result of a filtered QuerySet is another QuerySet object. This allows you
    to chain QuerySets together. You can build an equivalent QuerySet to the previous
    one by chaining multiple filters:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤查询集的结果是另一个查询集对象。这允许你将查询集链接在一起。你可以通过链接多个过滤器来构建与上一个查询集等效的查询集：
- en: '[PRE85]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Excluding objects
  id: totrans-474
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排除对象
- en: 'You can exclude certain results from your QuerySet by using the `exclude()`
    method of the manager. For example, you can retrieve all posts published in 2024
    whose titles don’t start with `Why`:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用管理器的 `exclude()` 方法排除查询集中的某些结果。例如，你可以检索所有标题不以 `Why` 开头的2024年发布的帖子：
- en: '[PRE86]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Ordering objects
  id: totrans-477
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序对象
- en: 'The default order is defined in the `ordering` option of the model’s `Meta`.
    You can override the default ordering using the `order_by()` method of the manager.
    For example, you can retrieve all objects ordered by their `title`, as follows:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 默认排序在模型的 `Meta` 选项的 `ordering` 中定义。您可以使用管理器的 `order_by()` 方法覆盖默认排序。例如，您可以按 `title`
    排序检索所有对象，如下所示：
- en: '[PRE87]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Ascending order is implied. You can indicate descending order with a negative
    sign prefix, like this:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，排序是升序的。您可以使用负号前缀来表示降序，如下所示：
- en: '[PRE88]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'You can order by multiple fields. The following example orders objects by `author`
    first and then `title`:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按多个字段排序。以下示例首先按 `author` 排序，然后按 `title` 排序：
- en: '[PRE89]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'To order randomly, use the string `''?''`, as follows:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 要随机排序，请使用字符串 `'?'`，如下所示：
- en: '[PRE90]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Limiting QuerySets
  id: totrans-486
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制 QuerySets
- en: 'You can limit a QuerySet to a certain number of results by using a subset of
    Python’s array-slicing syntax. For example, the following QuerySet limits the
    results to 5 objects:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 Python 数组切片语法的子集来限制 QuerySet 的结果数量。例如，以下 QuerySet 将结果限制为 5 个对象：
- en: '[PRE91]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: This translates to a SQL `LIMIT 5` clause. Note that negative indexing is not
    supported.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 这转换为 SQL 的 `LIMIT 5` 子句。请注意，不支持负索引。
- en: '[PRE92]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: The preceding translates to a SQL `OFFSET 3 LIMIT 6` clause, to return the fourth
    through sixth objects.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码转换为 SQL 的 `OFFSET 3 LIMIT 6` 子句，以返回第四到第六个对象。
- en: 'To retrieve a single object, you can use an index instead of a slice. For example,
    use the following to retrieve the first object of posts in random order:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索单个对象，您可以使用索引而不是切片。例如，使用以下方法检索随机排序的帖子中的第一个对象：
- en: '[PRE93]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Counting objects
  id: totrans-494
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象计数
- en: 'The `count()` method counts the total number of objects matching the QuerySet
    and returns an integer. This method translates to a `SELECT COUNT(*)` SQL statement.
    The following example returns the total number of posts with an `id` lower than
    `3`:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '`count()` 方法计算与 QuerySet 匹配的对象总数，并返回一个整数。此方法转换为 `SELECT COUNT(*)` SQL 语句。以下示例返回
    `id` 小于 `3` 的帖子总数：'
- en: '[PRE94]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Checking if an object exists
  id: totrans-497
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查对象是否存在
- en: 'The `exists()` method allows you to check if a QuerySet contains any results.
    This method returns `True` if the QuerySet contains any items and `False` otherwise.
    For example, you can check if there are any posts with a `title` that starts with
    *Why* using the following QuerySet:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '`exists()` 方法允许您检查 QuerySet 是否包含任何结果。如果 QuerySet 包含任何项目，则此方法返回 `True`，否则返回
    `False`。例如，您可以使用以下 QuerySet 检查是否有任何标题以 *Why* 开头的帖子：'
- en: '[PRE95]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Deleting objects
  id: totrans-500
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除对象
- en: 'If you want to delete an object, you can do it from an object instance using
    the `delete()` method, as follows:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想删除一个对象，可以使用对象实例的 `delete()` 方法，如下所示：
- en: '[PRE96]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Note that deleting objects will also delete any dependent relationships for
    `ForeignKey` objects defined with `on_delete` set to `CASCADE`.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，删除对象也会删除任何与使用 `on_delete` 设置为 `CASCADE` 的 `ForeignKey` 对象定义的依赖关系。
- en: Complex lookups with Q objects
  id: totrans-504
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Q 对象进行复杂查找
- en: Field lookups using `filter()` are joined with a SQL `AND` operator. For example,
    `filter(field1='foo` `', field2='bar')` will retrieve objects where `field1` is
    *foo* **and** `field2` is *bar*. If you need to build more complex queries, such
    as queries with `OR` statements, you can use `Q` objects.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `filter()` 进行字段查找时，会与 SQL 的 `AND` 操作符连接。例如，`filter(field1='foo', field2='bar')`
    将检索 `field1` 为 *foo* 且 `field2` 为 *bar* 的对象。如果您需要构建更复杂的查询，例如包含 `OR` 语句的查询，可以使用
    `Q` 对象。
- en: A `Q` object allows you to encapsulate a collection of field lookups. You can
    compose statements by combining `Q` objects with the `&` (and), `|` (or), and
    `^` (xor) operators.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q` 对象允许您封装一组字段查找。您可以通过将 `Q` 对象与 `&`（与）、`|`（或）和 `^`（异或）运算符组合来构建语句。'
- en: 'For example, the following code retrieves posts with a title that starts with
    the string *who* **or** *why* (case-insensitive):'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码检索标题以字符串 *who* 或 *why*（不区分大小写）开头的帖子：
- en: '[PRE97]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: In this case, we use the `|` operator to build an `OR` statement.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用 `|` 运算符构建一个 `OR` 语句。
- en: You can read more about `Q` objects at [https://docs.djangoproject.com/en/5.0/topics/db/queries/#complex-lookups-with-q-objects](https://docs.djangoproject.com/en/5.0/topics/db/queries/#complex-lookups-with-q-objects).
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://docs.djangoproject.com/en/5.0/topics/db/queries/#complex-lookups-with-q-objects](https://docs.djangoproject.com/en/5.0/topics/db/queries/#complex-lookups-with-q-objects)
    中了解更多关于 `Q` 对象的信息。
- en: When QuerySets are evaluated
  id: totrans-511
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当 QuerySets 被评估时
- en: Creating a QuerySet doesn’t involve any database activity until it is evaluated.
    QuerySets will usually return another unevaluated QuerySet. You can concatenate
    as many filters as you like to a QuerySet, and you will not hit the database until
    the QuerySet is evaluated. When a QuerySet is evaluated, it translates into a
    SQL query to the database.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 创建查询集不会涉及任何数据库活动，直到它被评估。查询集通常会返回另一个未评估的查询集。你可以将任意数量的过滤器连接到一个查询集上，并且只有在查询集被评估时才会访问数据库。当查询集被评估时，它将转换为一个对数据库的
    SQL 查询。
- en: 'QuerySets are only evaluated in the following cases:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 查询集仅在以下情况下才会被评估：
- en: The first time you iterate over them
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一次遍历它们时
- en: When you slice them, for instance, `Post.objects.all()[:3]`
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你切片它们时，例如，`Post.objects.all()[:3]`
- en: When you pickle or cache them
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你序列化或缓存它们时
- en: When you call `repr()` or `len()` on them
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你调用 `repr()` 或 `len()` 时
- en: When you explicitly call `list()` on them
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你显式调用 `list()` 时
- en: When you test them in a statement, such as `bool()`, `or`, `and`, or `if`
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你在语句中测试它们，例如 `bool()`、`or`、`and` 或 `if`
- en: More on QuerySets
  id: totrans-520
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多关于查询集的信息
- en: You will use QuerySets in all the project examples featured in this book. You
    will learn how to generate aggregates over QuerySets in the *Retrieving posts
    by similarity* section of *Chapter 3, Extending Your Blog Application*.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本书的所有项目示例中使用查询集。你将在第 3 章“扩展你的博客应用程序”的“通过相似性检索帖子”部分中学习如何生成查询集的聚合。
- en: You will learn how to optimize QuerySets in the *Optimizing QuerySets that involve
    related objects* section in *Chapter 7, Tracking User Actions*.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在第 7 章“跟踪用户行为”的“优化涉及相关对象的查询集”部分中学习如何优化查询集。
- en: The QuerySet API reference is located at [https://docs.djangoproject.com/en/5.0/ref/models/querysets/](https://docs.djangoproject.com/en/5.0/ref/models/querysets/).
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 查询集 API 参考文档位于 [https://docs.djangoproject.com/en/5.0/ref/models/querysets/](https://docs.djangoproject.com/en/5.0/ref/models/querysets/).
- en: You can read more about making queries with the Django ORM at [https://docs.djangoproject.com/en/5.0/topics/db/queries/](https://docs.djangoproject.com/en/5.0/topics/db/queries/).
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://docs.djangoproject.com/en/5.0/topics/db/queries/](https://docs.djangoproject.com/en/5.0/topics/db/queries/)
    了解更多关于使用 Django ORM 进行查询的信息。
- en: Creating model managers
  id: totrans-525
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模型管理器
- en: The default manager for every model is the `objects` manager. This manager retrieves
    all the objects in the database. However, we can define custom managers for models.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模型的默认管理器是 `objects` 管理器。此管理器检索数据库中的所有对象。然而，我们可以为模型定义自定义管理器。
- en: Let’s create a custom manager to retrieve all posts that have a `PUBLISHED`
    status.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个自定义管理器来检索所有具有 `PUBLISHED` 状态的帖子。
- en: 'There are two ways to add or customize managers for your models: you can add
    extra manager methods to an existing manager or create a new manager by modifying
    the initial QuerySet that the manager returns. The first method provides you with
    a QuerySet notation like `Post.objects.my_manager()`, and the latter provides
    you with a QuerySet notation like `Post.my_manager.all()`.'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的模型添加或自定义管理器有两种方式：你可以向现有管理器添加额外的管理方法，或者通过修改管理器返回的初始查询集来创建一个新的管理器。第一种方法为你提供了一个查询集表示法，如
    `Post.objects.my_manager()`，而后者为你提供了一个查询集表示法，如 `Post.my_manager.all()`。
- en: We will choose the second method to implement a manager that will allow us to
    retrieve posts using the notation `Post.published.all()`.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将选择第二种方法来实现一个管理器，它将允许我们使用 `Post.published.all()` 的表示法检索帖子。
- en: 'Edit the `models.py` file of your `blog` application to add the custom manager,
    as follows. The new lines are highlighted in bold:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑你的 `blog` 应用程序的 `models.py` 文件以添加自定义管理器，如下所示。新行以粗体显示：
- en: '[PRE98]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: The first manager declared in a model becomes the default manager. You can use
    the `Meta` attribute `default_manager_name` to specify a different default manager.
    If no manager is defined in the model, Django automatically creates the `objects`
    default manager for it. If you declare any managers for your model but you want
    to keep the `objects` manager as well, you have to add it explicitly to your model.
    In the preceding code, we have added the default `objects` manager and the `published`
    custom manager to the `Post` model.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型中声明的第一个管理器将成为默认管理器。你可以使用 `Meta` 属性 `default_manager_name` 来指定不同的默认管理器。如果模型中没有定义管理器，Django
    会自动为它创建 `objects` 默认管理器。如果你为你的模型声明了任何管理器，但还想保留 `objects` 管理器，你必须明确将其添加到你的模型中。在前面的代码中，我们已经将默认的
    `objects` 管理器和自定义的 `published` 管理器添加到了 `Post` 模型中。
- en: The `get_queryset()` method of a manager returns the QuerySet that will be executed.
    We have overridden this method to build a custom QuerySet that filters posts by
    their status and returns a successive QuerySet that only includes posts with the
    `PUBLISHED` status.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 管理器的 `get_queryset()` 方法返回将要执行的查询集。我们已重写此方法以构建一个自定义查询集，该查询集通过状态过滤帖子，并返回一个只包含具有
    `PUBLISHED` 状态的帖子的连续查询集。
- en: We have now defined a custom manager for the `Post` model. Let’s test it!
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已为 `Post` 模型定义了一个自定义管理器。让我们测试它！
- en: 'Start the development server again with the following command in the shell
    prompt:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 在 shell 提示符中再次使用以下命令启动开发服务器：
- en: '[PRE99]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Now, you can import the `Post` model and retrieve all published posts whose
    title starts with `Who`, executing the following QuerySet:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以导入 `Post` 模型并检索所有标题以 `Who` 开头的已发布帖子，执行以下查询集：
- en: '[PRE100]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: To obtain results for this QuerySet, make sure to set the `status` field to
    `PUBLISHED` in the `Post` object whose `title` starts with the string *Who*.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 要为这个查询集获取结果，请确保将 `Post` 对象的 `status` 字段设置为 `PUBLISHED`，其 `title` 以字符串 *Who*
    开头。
- en: Building list and detail views
  id: totrans-540
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 list 和 detail 视图
- en: Now that you understand how to use the ORM, you are ready to build the views
    of the `blog` application. A Django view is just a Python function that receives
    a web request and returns a web response. All the logic to return the desired
    response goes inside the view.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何使用 ORM，你就可以构建 `blog` 应用程序的视图了。Django 视图只是一个接收网络请求并返回网络响应的 Python 函数。返回所需响应的所有逻辑都放在视图中。
- en: First, you will create your application views, then you will define a URL pattern
    for each view, and finally, you will create HTML templates to render the data
    generated by the views. Each view will render a template, passing variables to
    it, and will return an HTTP response with the rendered output.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将创建你的应用程序视图，然后你将为每个视图定义一个 URL 模式，最后，你将创建 HTML 模板以渲染视图生成的数据。每个视图将渲染一个模板，向其传递变量，并返回一个包含渲染输出的
    HTTP 响应。
- en: Creating list and detail views
  id: totrans-543
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建列表和详情视图
- en: Let’s start by creating a view to display the list of posts.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先创建一个显示帖子列表的视图。
- en: 'Edit the `views.py` file of the `blog` application and make it look like this;
    the new lines are highlighted in bold:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `blog` 应用程序的 `views.py` 文件，使其看起来像这样；新行以粗体突出显示：
- en: '[PRE101]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: This is our very first Django view. The `post_list` view takes the `request`
    object as the only parameter. This parameter is required by all views.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们非常第一个 Django 视图。`post_list` 视图将 `request` 对象作为唯一参数。所有视图都需要这个参数。
- en: In this view, we retrieve all the posts with the `PUBLISHED` status using the
    `published` manager that we created previously.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个视图中，我们使用之前创建的 `published` 管理器检索所有具有 `PUBLISHED` 状态的帖子。
- en: Finally, we use the `render()` shortcut provided by Django to render the list
    of posts with the given template. This function takes the `request` object, the
    template path, and the context variables to render the given template. It returns
    an `HttpResponse` object with the rendered text (normally HTML code).
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用 Django 提供的 `render()` 快捷方式渲染给定模板的帖子列表。这个函数接受 `request` 对象、模板路径和上下文变量来渲染给定的模板。它返回一个包含渲染文本的
    `HttpResponse` 对象（通常是 HTML 代码）。
- en: The `render()` shortcut takes the request context into account, so any variable
    set by the template context processors is accessible by the given template. Template
    context processors are just callables that set variables into the context. You
    will learn how to use context processors in *Chapter 4*, *Building a Social Website*.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '`render()` 快捷方式会考虑请求上下文，因此任何由模板上下文处理器设置的变量都可以通过给定的模板访问。模板上下文处理器只是将变量设置到上下文中的可调用对象。你将在
    *第4章*，*构建一个社交网站* 中学习如何使用上下文处理器。'
- en: 'Let’s create a second view to display a single post. Add the following function
    to the `views.py` file:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个第二个视图来显示单个帖子。将以下函数添加到 `views.py` 文件中：
- en: '[PRE102]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: This is the `post_detail` view. This view takes the `id` argument of a post.
    In the view, we try to retrieve the `Post` object with the given `id` by calling
    the `get()` method on the `published` manager. We raise an `Http404` exception
    to return an HTTP 404 error if the model `DoesNotExist` exception is raised because
    no result is found.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `post_detail` 视图。这个视图接受一个帖子的 `id` 参数。在视图中，我们尝试通过在 `published` 管理器上调用 `get()`
    方法来检索具有给定 `id` 的 `Post` 对象。如果模型抛出 `DoesNotExist` 异常，因为没有找到结果，我们将引发 `Http404` 异常以返回
    HTTP 404 错误。
- en: Finally, we use the `render()` shortcut to render the retrieved post using a
    template.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用 `render()` 快捷方式使用模板渲染检索到的帖子。
- en: Using the get_object_or_404 shortcut
  id: totrans-555
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 get_object_or_404 快捷方式
- en: Django provides a shortcut to call `get()` on a given model manager and raises
    an `Http404` exception instead of a `DoesNotExist` exception when no object is
    found.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: Django 提供了一个快捷方式来在给定的模型管理器上调用 `get()`，并在找不到对象时引发一个 `Http404` 异常而不是 `DoesNotExist`
    异常。
- en: 'Edit the `views.py` file to import the `get_object_or_404` shortcut and change
    the `post_detail` view, as follows. The new code is highlighted in bold:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `views.py` 文件以导入 `get_object_or_404` 快捷方式，并按如下方式更改 `post_detail` 视图。新的代码以粗体显示：
- en: '[PRE103]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: In the detail view, we now use the `get_object_or_404()` shortcut to retrieve
    the desired post. This function retrieves the object that matches the given parameters
    or an HTTP 404 (not found) exception if no object is found.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 在详情视图中，我们现在使用 `get_object_or_404()` 快捷方式来检索所需的帖子。如果找不到对象，此函数将检索与给定参数匹配的对象或一个
    HTTP 404（未找到）异常。
- en: Adding URL patterns for your views
  id: totrans-560
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为您的视图添加 URL 模式
- en: URL patterns allow you to map URLs to views. A URL pattern is composed of a
    string pattern, a view, and, optionally, a name that allows you to name the URL
    project-wide. Django runs through each URL pattern and stops at the first one
    that matches the requested URL. Then, Django imports the view of the matching
    URL pattern and executes it, passing an instance of the `HttpRequest` class and
    the keyword or positional arguments.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: URL 模式允许您将 URL 映射到视图。一个 URL 模式由一个字符串模式、一个视图以及可选的名称组成，该名称允许您在项目范围内命名 URL。Django
    会遍历每个 URL 模式，并在找到与请求 URL 匹配的第一个模式时停止。然后，Django 导入匹配 URL 模式的视图并执行它，传递 `HttpRequest`
    类的实例和关键字或位置参数。
- en: 'Create a `urls.py` file in the directory of the `blog` application and add
    the following lines to it:'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `blog` 应用程序的目录中创建一个 `urls.py` 文件，并将其中的以下行添加到该文件中：
- en: '[PRE104]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: In the preceding code, you define an application namespace with the `app_name`
    variable. This allows you to organize URLs by application and use the name when
    referring to them. You define two different patterns using the `path()` function.
    The first URL pattern doesn’t take any arguments and is mapped to the `post_list`
    view. The second pattern is mapped to the `post_detail` view and takes only one
    argument `id`, which matches an integer, set by the path converter `int`.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，您使用 `app_name` 变量定义了一个应用程序命名空间。这允许您按应用程序组织 URL，并在引用时使用该名称。您使用 `path()`
    函数定义了两个不同的模式。第一个 URL 模式不接收任何参数，并将其映射到 `post_list` 视图。第二个模式映射到 `post_detail` 视图，并仅接受一个参数
    `id`，它由路径转换器 `int` 匹配的整数。
- en: You use angle brackets to capture the values from the URL. Any value specified
    in the URL pattern as `<parameter>` is captured as a string. You use path converters,
    such as `<int:year>`, to specifically match and return an integer. For example
    `<slug:post>` would specifically match a slug (a string that can only contain
    letters, numbers, underscores, or hyphens). You can see all the path converters
    provided by Django at [https://docs.djangoproject.com/en/5.0/topics/http/urls/#path-converters](https://docs.djangoproject.com/en/5.0/topics/http/urls/#path-converters).
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用尖括号来捕获 URL 中的值。在 URL 模式指定的任何 `<parameter>` 值都会被捕获为一个字符串。您可以使用路径转换器，例如 `<int:year>`，来特别匹配并返回一个整数。例如
    `<slug:post>` 会特别匹配一个缩略词（只能包含字母、数字、下划线或连字符的字符串）。您可以在 Django 提供的所有路径转换器中查看 [https://docs.djangoproject.com/en/5.0/topics/http/urls/#path-converters](https://docs.djangoproject.com/en/5.0/topics/http/urls/#path-converters)。
- en: If using `path()` and converters isn’t sufficient for you, you can use `re_path()`
    instead to define complex URL patterns with Python regular expressions. You can
    learn more about defining URL patterns with regular expressions at [https://docs.djangoproject.com/en/5.0/ref/urls/#django.urls.re_path](https://docs.djangoproject.com/en/5.0/ref/urls/#django.urls.re_path).
    If you haven’t worked with regular expressions before, you might want to take
    a look at *Regular Expression HOWTO*, located at [https://docs.python.org/3/howto/regex.html](https://docs.python.org/3/howto/regex.html),
    first.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 `path()` 和转换器不足以满足您的需求，您可以使用 `re_path()` 来代替，以使用 Python 正则表达式定义复杂的 URL
    模式。您可以在 [https://docs.djangoproject.com/en/5.0/ref/urls/#django.urls.re_path](https://docs.djangoproject.com/en/5.0/ref/urls/#django.urls.re_path)
    了解更多关于使用正则表达式定义 URL 模式的信息。如果您之前没有使用过正则表达式，您可能首先想查看 *正则表达式 HOWTO*，它位于 [https://docs.python.org/3/howto/regex.html](https://docs.python.org/3/howto/regex.html)。
- en: Creating a `urls.py` file for each application is the best way to make your
    applications reusable by other projects.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个应用程序创建一个 `urls.py` 文件是使您的应用程序可以被其他项目重用的最佳方式。
- en: Next, you have to include the URL patterns of the `blog` application in the
    main URL patterns of the project.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要在项目的主要URL模式中包含`blog`应用的URL模式。
- en: 'Edit the `urls.py` file located in the `mysite` directory of your project and
    make it look like the following. The new code is highlighted in bold:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑位于项目`mysite`目录中的`urls.py`文件，并使其看起来如下。新代码以粗体显示：
- en: '[PRE105]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: The new URL pattern defined with `include` refers to the URL patterns defined
    in the `blog` application so that they are included under the `blog/` path. You
    include these patterns under the namespace `blog`. Namespaces have to be unique
    across your entire project. Later, you will refer to your blog URLs easily by
    using the namespace followed by a colon and the URL name, for example, `blog:post_list`
    and `blog:post_detail`. You can learn more about URL namespaces at [https://docs.djangoproject.com/en/5.0/topics/http/urls/#url-namespaces](https://docs.djangoproject.com/en/5.0/topics/http/urls/#url-namespaces).
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`include`定义的新URL模式引用了`blog`应用中定义的URL模式，以便它们在`blog/`路径下包含。您将这些模式包含在`blog`命名空间下。命名空间在整个项目中必须是唯一的。稍后，您可以通过使用命名空间后跟冒号和URL名称来轻松引用您的博客URL，例如`blog:post_list`和`blog:post_detail`。您可以在[https://docs.djangoproject.com/en/5.0/topics/http/urls/#url-namespaces](https://docs.djangoproject.com/en/5.0/topics/http/urls/#url-namespaces)了解更多关于URL命名空间的信息。
- en: Creating templates for your views
  id: totrans-572
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您的视图创建模板
- en: You have created views and URL patterns for the `blog` application. URL patterns
    map URLs to views, and views decide which data gets returned to the user. Templates
    define how the data is displayed; they are usually written in HTML in combination
    with the Django template language. You can find more information about the Django
    template language at [https://docs.djangoproject.com/en/5.0/ref/templates/language/](https://docs.djangoproject.com/en/5.0/ref/templates/language/).
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经为`blog`应用创建了视图和URL模式。URL模式将URL映射到视图，而视图决定哪些数据返回给用户。模板定义了数据的显示方式；它们通常是用HTML结合Django模板语言编写的。您可以在[https://docs.djangoproject.com/en/5.0/ref/templates/language/](https://docs.djangoproject.com/en/5.0/ref/templates/language/)找到有关Django模板语言的更多信息。
- en: Let’s add templates to your application to display posts in a user-friendly
    manner.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向应用中添加模板以以用户友好的方式显示帖子。
- en: 'Create the following directories and files inside your `blog` application directory:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`blog`应用目录内创建以下目录和文件：
- en: '[PRE106]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: The preceding structure will be the file structure for your templates. The `base.html`
    file will include the main HTML structure of the website and divide the content
    into the main content area and a sidebar. The `list.html` and `detail.html` files
    will inherit from the `base.html` file to render the blog post list and detail
    views, respectively.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 上述结构将是您模板的文件结构。`base.html`文件将包含网站的主要HTML结构，并将内容分为主要内容区域和侧边栏。`list.html`和`detail.html`文件将继承自`base.html`文件，分别用于渲染博客文章列表和详情视图。
- en: 'Django has a powerful template language that allows you to specify how data
    is displayed. It is based on *template tags*, *template variables*, and *template
    filters*:'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: Django有一个强大的模板语言，允许您指定数据如何显示。它基于*模板标签*、*模板变量*和*模板过滤器*：
- en: 'Template tags control the rendering of the template and look like this: `{%
    tag %}`.'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板标签控制模板的渲染，其形式如下：`{% tag %}`。
- en: 'Template variables get replaced with values when the template is rendered and
    look like this: `{{ variable }}`.'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板变量在模板渲染时会被替换成相应的值，其形式如下：`{{ variable }}`。
- en: 'Template filters allow you to modify variables for display and look like this:
    `{{ variable|filter }}`.'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板过滤器允许您修改用于显示的变量，其形式如下：`{{ variable|filter }}`。
- en: You can see all the built-in template tags and filters at [https://docs.djangoproject.com/en/5.0/ref/templates/builtins/](https://docs.djangoproject.com/en/5.0/ref/templates/builtins/).
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.djangoproject.com/en/5.0/ref/templates/builtins/](https://docs.djangoproject.com/en/5.0/ref/templates/builtins/)查看所有内置的模板标签和过滤器。
- en: Creating a base template
  id: totrans-583
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基础模板
- en: 'Edit the `base.html` file and add the following code:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`base.html`文件并添加以下代码：
- en: '[PRE107]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '`{% load static %}` tells Django to load the `static` template tags that are
    provided by the `django.contrib.staticfiles` application, which is contained in
    the `INSTALLED_APPS` setting. After loading them, you can use the `{% static %}`
    template tag throughout this template. With this template tag, you can include
    the static files, such as the `blog.css` file, which you will find in the code
    of this example under the `static/` directory of the `blog` application. Copy
    the `static/` directory from the code that comes along with this chapter into
    the same location as your project to apply the CSS styles to the templates. You
    can find the directory’s contents at [https://github.com/PacktPublishing/Django-5-by-example/tree/master/Chapter01/mysite/blog/static](https://github.com/PacktPublishing/Django-5-by-example/tree/master/Chapter01/mysite/blog/static).'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '`{% load static %}` 告诉 Django 加载由 `django.contrib.staticfiles` 应用程序提供的 `static`
    模板标签，该应用程序包含在 `INSTALLED_APPS` 设置中。加载它们后，您可以在整个模板中使用 `{% static %}` 模板标签。使用此模板标签，您可以包含静态文件，例如在
    `blog` 应用的 `static/` 目录下找到的 `blog.css` 文件。将此章节中提供的代码的 `static/` 目录复制到与您的项目相同的位置，以将
    CSS 样式应用到模板中。您可以在 [https://github.com/PacktPublishing/Django-5-by-example/tree/master/Chapter01/mysite/blog/static](https://github.com/PacktPublishing/Django-5-by-example/tree/master/Chapter01/mysite/blog/static)
    找到该目录的内容。'
- en: You can see that there are two `{% block %}` tags. These tell Django that you
    want to define a block in that area. Templates that inherit from this template
    can fill in the blocks with content. You have defined a block called `title` and
    a block called `content`.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到有两个 `{% block %}` 标签。这告诉 Django 您想在那个区域定义一个块。继承此模板的模板可以用内容填充这些块。您定义了一个名为
    `title` 的块和一个名为 `content` 的块。
- en: Creating the post list template
  id: totrans-588
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建帖子列表模板
- en: 'Let’s edit the `post/list.html` file and make it look like the following:'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编辑 `post/list.html` 文件，使其看起来如下：
- en: '[PRE108]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: With the `{% extends %}` template tag, you tell Django to inherit from the `blog/base.html`
    template. Then, you fill the `title` and `content` blocks of the base template
    with content. You iterate through the posts and display their title, date, author,
    and body, including a link in the title to the detail URL of the post. We build
    the URL using the `{% url %}` template tag provided by Django.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `{% extends %}` 模板标签，您告诉 Django 从 `blog/base.html` 模板继承。然后，您将 `title` 和 `content`
    块的内容填充到基本模板中。您遍历帖子并显示它们的标题、日期、作者和正文，包括在标题中链接到帖子的详细 URL。我们使用 Django 提供的 `{% url
    %}` 模板标签构建 URL。
- en: This template tag allows you to build URLs dynamically by their name. We use
    `blog:post_detail` to refer to the `post_detail` URL in the `blog` namespace.
    We pass the required `post.id` parameter to build the URL for each post.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板标签允许您通过名称动态构建 URL。我们使用 `blog:post_detail` 来引用 `blog` 命名空间中的 `post_detail`
    URL。我们传递所需的 `post.id` 参数来为每个帖子构建 URL。
- en: Always use the `{% url %}` template tag to build URLs in your templates instead
    of writing hardcoded URLs. This will make your URLs more maintainable.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 总是在您的模板中使用 `{% url %}` 模板标签来构建 URL，而不是编写硬编码的 URL。这将使您的 URL 更易于维护。
- en: 'In the body of the post, we apply two template filters: `truncatewords` truncates
    the value to the number of words specified, and `linebreaks` converts the output
    into HTML line breaks. You can concatenate as many template filters as you wish;
    each one will be applied to the output generated by the preceding one.'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 在帖子的正文中，我们应用了两个模板过滤器：`truncatewords` 将值截断到指定的单词数，而 `linebreaks` 将输出转换为 HTML
    换行符。您可以连接任意数量的模板过滤器；每个过滤器都将应用于前一个过滤器生成的输出。
- en: Accessing our application
  id: totrans-595
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问我们的应用程序
- en: Change the status of the initial post to **Published**, as shown in *Figure
    1.16*, and create some new posts, also with a **Published** status.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 将初始帖子的状态更改为**已发布**，如图 1.16 所示，并创建一些新的帖子，也设置为**已发布**状态。
- en: '![](img/B21088_01_16.png)'
  id: totrans-597
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_01_16.png)'
- en: 'Figure 1.16: The status field for a published post'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16：已发布帖子的状态字段
- en: 'Open the shell and execute the following command to start the development server:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 shell 并执行以下命令以启动开发服务器：
- en: '[PRE109]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Open `http://127.0.0.1:8000/blog/` in your browser; you will see everything
    running. You should see something like this:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开 `http://127.0.0.1:8000/blog/`；您将看到一切都在运行。您应该看到如下内容：
- en: '![](img/B21088_01_17.png)'
  id: totrans-602
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_01_17.png)'
- en: 'Figure 1.17: The page for the post list view'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17：帖子列表视图的页面
- en: Creating the post detail template
  id: totrans-604
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建帖子详情模板
- en: 'Next, edit the `post/detail.html` file:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编辑 `post/detail.html` 文件：
- en: '[PRE110]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Next, you can return to your browser and click on one of the post titles to
    take a look at the detail view of the post. You should see something like this:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以回到浏览器并点击其中一个帖子标题，查看帖子的详情视图。您应该看到如下内容：
- en: '![](img/B21088_01_18.png)'
  id: totrans-608
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B21088_01_18](img/B21088_01_18.png)'
- en: 'Figure 1.18: The page for the post’s detail view'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.18：帖子详情视图的页面
- en: Take a look at the URL – it should include the auto-generated post ID, like
    `/blog/1/`.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 看看 URL - 它应该包含自动生成的帖子 ID，如 `/blog/1/`。
- en: The request/response cycle
  id: totrans-611
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求/响应周期
- en: 'Let’s review the request/response cycle of Django with the application we built.
    The following schema shows a simplified example of how Django processes HTTP requests
    and generates HTTP responses:'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过我们构建的应用程序来回顾 Django 的请求/响应周期。以下架构展示了 Django 处理 HTTP 请求和生成 HTTP 响应的简化示例：
- en: '![Timeline  Description automatically generated with medium confidence](img/B21088_01_19.png)'
  id: totrans-613
  prefs: []
  type: TYPE_IMG
  zh: '![时间线 描述自动生成，置信度中等](img/B21088_01_19.png)'
- en: 'Figure 1.19: The Django request/response cycle'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.19：Django 的请求/响应周期
- en: 'Let’s review the Django request/response process:'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾 Django 的请求/响应过程：
- en: A web browser requests a page by its URL, for example, `https://domain.com/blog/33/`.
    The web server receives the HTTP request and passes it over to Django.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 网络浏览器通过其 URL 请求页面，例如，`https://domain.com/blog/33/`。Web 服务器接收 HTTP 请求并将其传递给 Django。
- en: Django runs through each URL pattern defined in the URL patterns configuration.
    The framework checks each pattern against the given URL path, in order of appearance,
    and stops at the first one that matches the requested URL. In this case, the pattern
    `/blog/<id>/` matches the path `/blog/33/`.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: Django 遍历在 URL 模式配置中定义的每个 URL 模式。框架按出现顺序将每个模式与给定的 URL 路径进行比较，并在第一个匹配请求 URL 的模式处停止。在这种情况下，模式
    `/blog/<id>/` 匹配路径 `/blog/33/`。
- en: Django imports the view of the matching URL pattern and executes it, passing
    an instance of the `HttpRequest` class and the keyword or positional arguments.
    The view uses the models to retrieve information from the database. Using the
    Django ORM, QuerySets are translated into SQL and executed in the database.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: Django 导入匹配 URL 模式视图，并执行它，传递 `HttpRequest` 类的实例和关键字或位置参数。视图使用模型从数据库检索信息。使用 Django
    ORM，查询集被转换为 SQL 并在数据库中执行。
- en: The view uses the `render()` function to render an HTML template passing the
    `Post` object as a context variable.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 视图使用 `render()` 函数渲染 HTML 模板，并将 `Post` 对象作为上下文变量传递。
- en: The rendered content is returned as a `HttpResponse` object by the view with
    the `text/html` content type by default.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 视图默认以 `text/html` 内容类型返回渲染的内容作为 `HttpResponse` 对象。
- en: You can always use this schema as the basic reference for how Django processes
    requests. This schema doesn’t include Django middleware, for the sake of simplicity.
    You will use middleware in different examples of this book, and you will learn
    how to create custom middleware in *Chapter 17*, *Going Live*.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 您始终可以使用此架构作为 Django 处理请求的基本参考。出于简化的目的，此架构不包括 Django 中间件。您将在本书的不同示例中使用中间件，您将在第
    17 章 *上线* 中学习如何创建自定义中间件。
- en: Management commands used in this chapter
  id: totrans-622
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本章中使用的管理命令
- en: In this chapter, we have introduced a variety of Django management commands.
    You need to get familiar with them, as they will be used often throughout the
    book. Let’s revisit the commands we have covered in this chapter.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了各种 Django 管理命令。您需要熟悉它们，因为它们将在本书的整个过程中被频繁使用。让我们回顾一下本章中我们已涵盖的命令。
- en: 'To create the file structure for a new Django project named `mysite`, we used
    the following command:'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建名为 `mysite` 的新 Django 项目的文件结构，我们使用了以下命令：
- en: '[PRE111]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'To create the file structure for a new Django application named `blog`:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建名为 `blog` 的新 Django 应用程序的文件结构：
- en: '[PRE112]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'To apply all database migrations:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用所有数据库迁移：
- en: '[PRE113]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'To create migrations for the models of the `blog` application:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 `blog` 应用程序的模型创建迁移：
- en: '[PRE114]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'To view the SQL statements that will be executed with the first migration of
    the `blog` application:'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 `blog` 应用程序第一次迁移将执行的 SQL 语句：
- en: '[PRE115]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'To run the Django development server:'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行 Django 开发服务器：
- en: '[PRE116]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'To run the development server specifying host/port and settings file:'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定主机/端口和设置文件运行开发服务器：
- en: '[PRE117]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'To run the Django shell:'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行 Django 壳：
- en: '[PRE118]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'To create a superuser using the Django authentication framework:'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Django 认证框架创建超级用户：
- en: '[PRE119]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: For the full list of available management commands, check out [https://docs.djangoproject.com/en/5.0/ref/django-admin/](https://docs.djangoproject.com/en/5.0/ref/django-admin/).
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可用的管理命令的完整列表，请查看 [https://docs.djangoproject.com/en/5.0/ref/django-admin/](https://docs.djangoproject.com/en/5.0/ref/django-admin/)。
- en: Summary
  id: totrans-643
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned the basics of the Django web framework by creating
    a simple blog application. You designed the data models and applied migrations
    to the database. You also created the views, templates, and URLs for your blog.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你通过创建一个简单的博客应用程序学习了 Django 网络框架的基础知识。你设计了数据模型并将迁移应用到数据库中。你还创建了视图、模板和博客的
    URL。
- en: In the next chapter, you will enhance your blog by creating canonical URLs for
    your posts and building SEO-friendly URLs. You will also learn how to implement
    object pagination and how to build class-based views. You will also create forms
    to let your users recommend posts by email and comment on posts.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将通过为你的帖子创建规范 URL 和构建 SEO 友好的 URL 来增强你的博客。你还将学习如何实现对象分页以及如何构建基于类的视图。你还将创建表单，让用户可以通过电子邮件推荐帖子并评论帖子。
- en: Additional resources
  id: totrans-646
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他资源
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源提供了与本章所涵盖主题相关的额外信息：
- en: 'Source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter01](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter01)'
  id: totrans-648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的源代码：[https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter01](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter01)
- en: 'Download Python: [https://www.python.org/downloads/](https://www.python.org/downloads/)'
  id: totrans-649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载 Python：[https://www.python.org/downloads/](https://www.python.org/downloads/)
- en: 'Windows Python launcher: [https://docs.python.org/3/using/windows.html#launcher](https://docs.python.org/3/using/windows.html#launcher)'
  id: totrans-650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Python 启动器：[https://docs.python.org/3/using/windows.html#launcher](https://docs.python.org/3/using/windows.html#launcher)
- en: 'Python `venv` library for virtual environments: [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)'
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python `venv` 库用于虚拟环境：[https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)
- en: 'Python `pip` installation instructions: at [https://pip.pypa.io/en/stable/installation/](https://pip.pypa.io/en/stable/installation/)'
  id: totrans-652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python `pip` 安装说明：[https://pip.pypa.io/en/stable/installation/](https://pip.pypa.io/en/stable/installation/)
- en: 'Django installation options: [https://docs.djangoproject.com/en/5.0/topics/install/](https://docs.djangoproject.com/en/5.0/topics/install/)'
  id: totrans-653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 安装选项：[https://docs.djangoproject.com/en/5.0/topics/install/](https://docs.djangoproject.com/en/5.0/topics/install/)
- en: 'Django 5.0 release notes: [https://docs.djangoproject.com/en/5.0/releases/5.0/](https://docs.djangoproject.com/en/5.0/releases/5.0/)'
  id: totrans-654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 5.0 版本说明：[https://docs.djangoproject.com/en/5.0/releases/5.0/](https://docs.djangoproject.com/en/5.0/releases/5.0/)
- en: 'The `django-upgrade` tool: [https://github.com/adamchainz/django-upgrade](https://github.com/adamchainz/django-upgrade)'
  id: totrans-655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django-upgrade` 工具：[https://github.com/adamchainz/django-upgrade](https://github.com/adamchainz/django-upgrade)'
- en: 'The `pyupgrade` tool: [https://github.com/asottile/pyupgrade](https://github.com/asottile/pyupgrade)'
  id: totrans-656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyupgrade` 工具：[https://github.com/asottile/pyupgrade](https://github.com/asottile/pyupgrade)'
- en: 'Django’s design philosophies: [https://docs.djangoproject.com/en/5.0/misc/design-philosophies/](https://docs.djangoproject.com/en/5.0/misc/design-philosophies/)'
  id: totrans-657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 的设计理念：[https://docs.djangoproject.com/en/5.0/misc/design-philosophies/](https://docs.djangoproject.com/en/5.0/misc/design-philosophies/)
- en: 'Django model field reference: [https://docs.djangoproject.com/en/5.0/ref/models/fields/](https://docs.djangoproject.com/en/5.0/ref/models/fields/)'
  id: totrans-658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 模型字段参考：[https://docs.djangoproject.com/en/5.0/ref/models/fields/](https://docs.djangoproject.com/en/5.0/ref/models/fields/)
- en: 'Model index reference: [https://docs.djangoproject.com/en/5.0/ref/models/indexes/](https://docs.djangoproject.com/en/5.0/ref/models/indexes/)'
  id: totrans-659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型索引参考：[https://docs.djangoproject.com/en/5.0/ref/models/indexes/](https://docs.djangoproject.com/en/5.0/ref/models/indexes/)
- en: 'Python support for enumerations: [https://docs.python.org/3/library/enum.html](https://docs.python.org/3/library/enum.html)'
  id: totrans-660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 对枚举的支持：[https://docs.python.org/3/library/enum.html](https://docs.python.org/3/library/enum.html)
- en: 'Django model enumeration types: [https://docs.djangoproject.com/en/5.0/ref/models/fields/#enumeration-types](https://docs.djangoproject.com/en/5.0/ref/models/fields/#enumeration-types)'
  id: totrans-661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 模型枚举类型：[https://docs.djangoproject.com/en/5.0/ref/models/fields/#enumeration-types](https://docs.djangoproject.com/en/5.0/ref/models/fields/#enumeration-types)
- en: 'Django settings reference: [https://docs.djangoproject.com/en/5.0/ref/settings/](https://docs.djangoproject.com/en/5.0/ref/settings/)'
  id: totrans-662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 设置参考：[https://docs.djangoproject.com/en/5.0/ref/settings/](https://docs.djangoproject.com/en/5.0/ref/settings/)
- en: 'Database default values for model fields: [https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.Field.db_default](https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.Field.db_default)'
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型字段数据库默认值：[https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.Field.db_default](https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.Field.db_default)
- en: 'Database functions: [https://docs.djangoproject.com/en/5.0/ref/models/database-functions/](https://docs.djangoproject.com/en/5.0/ref/models/database-functions/)'
  id: totrans-664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库函数：[https://docs.djangoproject.com/en/5.0/ref/models/database-functions/](https://docs.djangoproject.com/en/5.0/ref/models/database-functions/)
- en: 'Django administration site: [https://docs.djangoproject.com/en/5.0/ref/contrib/admin/](https://docs.djangoproject.com/en/5.0/ref/contrib/admin/)'
  id: totrans-665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 管理站点：[https://docs.djangoproject.com/en/5.0/ref/contrib/admin/](https://docs.djangoproject.com/en/5.0/ref/contrib/admin/)
- en: 'Model API reference: [https://docs.djangoproject.com/en/5.0/ref/models/](https://docs.djangoproject.com/en/5.0/ref/models/)'
  id: totrans-666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型 API 参考文档：[https://docs.djangoproject.com/en/5.0/ref/models/](https://docs.djangoproject.com/en/5.0/ref/models/)
- en: 'Making queries with the Django ORM: [https://docs.djangoproject.com/en/5.0/topics/db/queries/](https://docs.djangoproject.com/en/5.0/topics/db/queries/)'
  id: totrans-667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Django ORM 进行查询：[https://docs.djangoproject.com/en/5.0/topics/db/queries/](https://docs.djangoproject.com/en/5.0/topics/db/queries/)
- en: 'QuerySet API reference: [https://docs.djangoproject.com/en/5.0/ref/models/querysets/](https://docs.djangoproject.com/en/5.0/ref/models/querysets/)'
  id: totrans-668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QuerySet API 参考文档：[https://docs.djangoproject.com/en/5.0/ref/models/querysets/](https://docs.djangoproject.com/en/5.0/ref/models/querysets/)
- en: 'Complex lookups with Q objects: [https://docs.djangoproject.com/en/5.0/topics/db/queries/#complex-lookups-with-q-objects](https://docs.djangoproject.com/en/5.0/topics/db/queries/#complex-lookups-with-q-objects)'
  id: totrans-669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Q 对象进行复杂查询：[https://docs.djangoproject.com/en/5.0/topics/db/queries/#complex-lookups-with-q-objects](https://docs.djangoproject.com/en/5.0/topics/db/queries/#complex-lookups-with-q-objects)
- en: 'Django URL dispatcher: [https://docs.djangoproject.com/en/5.0/topics/http/urls/](https://docs.djangoproject.com/en/5.0/topics/http/urls/)'
  id: totrans-670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django URL 分派器：[https://docs.djangoproject.com/en/5.0/topics/http/urls/](https://docs.djangoproject.com/en/5.0/topics/http/urls/)
- en: 'Django template language: [https://docs.djangoproject.com/en/5.0/ref/templates/language/](https://docs.djangoproject.com/en/5.0/ref/templates/language/)'
  id: totrans-671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 模板语言：[https://docs.djangoproject.com/en/5.0/ref/templates/language/](https://docs.djangoproject.com/en/5.0/ref/templates/language/)
- en: 'Built-in template tags and filters: [https://docs.djangoproject.com/en/5.0/ref/templates/builtins/](https://docs.djangoproject.com/en/5.0/ref/templates/builtins/)'
  id: totrans-672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置模板标签和过滤器：[https://docs.djangoproject.com/en/5.0/ref/templates/builtins/](https://docs.djangoproject.com/en/5.0/ref/templates/builtins/)
- en: 'Django management commands: [https://docs.djangoproject.com/en/5.0/ref/django-admin/](https://docs.djangoproject.com/en/5.0/ref/django-admin/)'
  id: totrans-673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 管理命令：[https://docs.djangoproject.com/en/5.0/ref/django-admin/](https://docs.djangoproject.com/en/5.0/ref/django-admin/)
- en: 'Static files for the code in this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/master/Chapter01/mysite/blog/static](https://github.com/PacktPublishing/Django-5-by-example/tree/master/Chapter01/mysite/blog/static)'
  id: totrans-674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章代码的静态文件：[https://github.com/PacktPublishing/Django-5-by-example/tree/master/Chapter01/mysite/blog/static](https://github.com/PacktPublishing/Django-5-by-example/tree/master/Chapter01/mysite/blog/static)
- en: Join us on Discord!
  id: totrans-675
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区！
- en: Read this book alongside other users, Django development experts, and the author
    himself. Ask questions, provide solutions to other readers, chat with the author
    via Ask Me Anything sessions, and much more.Scan the QR code or visit the link
    to join the community.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、Django 开发专家以及作者本人一起阅读此书。提问、为其他读者提供解决方案、通过 Ask Me Anything 会话与作者聊天等。扫描二维码或访问链接加入社区。
- en: https://packt.link/Django5ByExample
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: https://packt.link/Django5ByExample
- en: '![](img/QR_Code287089408934129031.png)'
  id: totrans-678
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code287089408934129031.png)'
