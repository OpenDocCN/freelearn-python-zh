- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: GPT with Flask
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Flask 的 GPT
- en: '**GPT**, the latest buzzword of today (which stands for **Generative Pre-trained
    Transformer**), is a state-of-the-art language model developed by **OpenAI**.
    It is based on the Transformer architecture and uses unsupervised learning to
    generate natural language text. GPT was first introduced in 2018 with the release
    of GPT-1, followed by GPT-2 and GPT-3 in 2019 and 2020, respectively.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**GPT**（今天的最新热门词汇，代表**生成预训练转换器**），是由 **OpenAI** 开发的最先进的语言模型。它基于 Transformer
    架构，并使用无监督学习来生成自然语言文本。GPT 首次在 2018 年 GPT-1 发布时推出，随后在 2019 年和 2020 年分别推出了 GPT-2
    和 GPT-3。'
- en: One of the most well-known applications of GPT is text completion, where it
    can generate coherent and grammatically correct sentences based on a given prompt.
    This has led to its use in various writing assistance tools, such as autocomplete
    and auto-correction features in text editors and messaging apps.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: GPT 最著名的应用之一是文本补全，它可以基于给定的提示生成连贯且语法正确的句子。这导致它在各种写作辅助工具中得到应用，例如文本编辑器和消息应用中的自动完成和自动纠错功能。
- en: Another popular application of GPT is in the development of chatbots, such as
    ChatGPT. With its ability to generate natural language responses, GPT can create
    chatbots that simulate human conversation, making them useful for customer service
    and other applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: GPT 的另一个流行应用是在聊天机器人（如 ChatGPT）的开发中。凭借其生成自然语言响应的能力，GPT 可以创建模拟人类对话的聊天机器人，这使得它们在客户服务和其他应用中非常有用。
- en: GPT has also been used for image generation, where it generates images based
    on textual descriptions. This has opened up new possibilities for creative applications
    such as art and design.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: GPT 还被用于图像生成，它根据文本描述生成图像。这为艺术和设计等创意应用开辟了新的可能性。
- en: Information
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: In this chapter, we will touch upon some new terminology that is mostly specific
    to GPT. One of the most important of these new terms would be **prompt**.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要介绍一些主要针对 GPT 的新术语。其中最重要的新术语之一将是 **提示**。
- en: In simple terms, a prompt in GPT is a starting point or a partial sentence that
    is given to the model. It’s like giving a suggestion or a hint to the model so
    that it can generate the rest of the sentence or paragraph based on that hint.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，GPT 中的提示是一个起点或部分句子，它被提供给模型。这就像给模型一个建议或提示，以便它可以根据这个提示生成剩余的句子或段落。
- en: For example, if you want to generate a review for a restaurant, you could start
    with a prompt such as “The food was...” and let GPT generate the rest of the sentence.
    The generated text could be something like “The food was delicious, with a perfect
    balance of spices and flavors. The portions were generous, and the presentation
    was beautiful.”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想为一家餐厅生成评论，你可以从一个提示开始，比如“食物是...”，然后让 GPT 生成剩余的句子。生成的文本可能类似于“食物美味，香料和风味的平衡恰到好处。份量充足，摆盘美观。”
- en: By providing a prompt, you are giving GPT some context to work with and guiding
    it toward generating text that fits that context. This can be useful in various
    natural language processing tasks, such as text completion, summarization, and
    more.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供提示，你为 GPT 提供了一些上下文，并引导它生成符合该上下文的文本。这在各种自然语言处理任务中非常有用，例如文本补全、摘要等。
- en: GPT is a powerful language model that has been applied to various natural language
    processing tasks, such as text completion, chatbots, and image generation. Its
    ability to generate human-like text has made it a valuable tool for developers,
    especially in the Python community who are interested in natural language processing
    and related web applications, such as those developed using Flask.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: GPT 是一种强大的语言模型，已被应用于各种自然语言处理任务，例如文本补全、聊天机器人和图像生成。它生成类似人类文本的能力使其成为开发者的宝贵工具，尤其是对自然语言处理和相关网络应用（如使用
    Flask 开发的应用）感兴趣的 Python 社区成员。
- en: In this chapter, we will look at how to implement GPT for the use cases we have
    mentioned. There can be innumerable other applications of GPT as it is open to
    imagination and creativity, but in this chapter, I will limit it to some basic
    yet powerful examples applicable to web applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何实现 GPT 在我们提到的用例中的应用。GPT 的应用几乎无限，因为它开放于想象力和创造力，但在这章中，我将将其限制于一些适用于网络应用的基本但强大的示例。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Automating text completion using GPT
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GPT 自动化文本补全
- en: Implementing chat using GPT (ChatGPT)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GPT 实现聊天（ChatGPT）
- en: Generating images using GPT
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GPT生成图像
- en: Technical requirements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For all the recipes in this chapter, the following steps are common and mandatory:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章中的所有食谱，以下步骤是常见且必需的：
- en: 'We will use a library called `openai`, which is the official Python library
    provided by OpenAI for working with GPT:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用一个名为`openai`的库，这是OpenAI提供的官方Python库，用于与GPT一起工作：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will also need an API key from the OpenAI website, which is necessary to
    make any API call for using GPT. For this, simply create an account at [platform.openai.com](http://platform.openai.com)
    and then navigate to **Settings** to create your API key. The following is a screenshot
    demonstrating the same:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还需要从OpenAI网站获取一个API密钥，这是使用GPT进行任何API调用的必要条件。为此，只需在[platform.openai.com](http://platform.openai.com)上创建一个账户，然后导航到**设置**以创建您的API密钥。以下是一个展示相同操作的截图：
- en: '![Figure 13.1 – API keys on OpenAI for using GPT](img/B19111_13_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图13.1 – OpenAI上用于GPT的API密钥](img/B19111_13_01.jpg)'
- en: Figure 13.1 – API keys on OpenAI for using GPT
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1 – OpenAI上用于GPT的API密钥
- en: Tip
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Be mindful that GPT by OpenAI is a paid tool and, as of writing this book, there
    is a small grant of 5 USD given with each account for a period of 3 months to
    experiment and get acquainted with the APIs. Once the limit is exhausted, you
    would have to opt for a paid plan. Read more about pricing at [https://openai.com/pricing](https://openai.com/pricing).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，OpenAI的GPT是一个付费工具，并且截至撰写本书时，每个账户都有一笔5美元的小额赠款，为期3个月，用于实验和熟悉API。一旦限额用尽，您将不得不选择付费计划。有关定价的更多信息，请参阅[https://openai.com/pricing](https://openai.com/pricing)。
- en: Automating text completion using GPT
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GPT自动化文本补全
- en: Text completion using GPT involves providing a prompt or starting sentence to
    the model, which then generates a coherent and relevant continuation. GPT’s capabilities
    in this area are impressive, as it can generate complex and contextually relevant
    text with a high degree of accuracy. This makes it an ideal tool for web applications
    that involve writing, such as content creation, auto-correction, and messaging.
    By incorporating GPT’s text completion abilities into these applications, developers
    can enhance the user experience by automating tedious or time-consuming tasks,
    improving the quality of written content, and providing more natural and responsive
    communication.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GPT进行文本补全涉及向模型提供一个提示或起始句子，然后模型生成一个连贯且相关的后续内容。GPT在这个领域的功能令人印象深刻，因为它可以以高精度生成复杂且上下文相关的文本。这使得它成为涉及写作的Web应用的理想工具，如内容创作、自动纠错和消息传递。通过将这些应用中的GPT文本补全能力整合进去，开发者可以通过自动化繁琐或耗时的工作、提高书面内容的质量以及提供更自然和响应式的通信来增强用户体验。
- en: If we talk in the context of an e-commerce website, one of the most important
    features is effective search. In addition to effectiveness, if the search is made
    interactive and intuitive, then it becomes highly engaging for the users. In this
    recipe, we will implement text completion using GPT to build intuitive and user-friendly
    search queries on an e-commerce website.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们谈论电子商务网站的环境，最重要的功能之一是有效的搜索。除了有效性之外，如果搜索变得互动且直观，那么它将非常吸引用户。在这个食谱中，我们将使用GPT实现文本补全，以在电子商务网站上构建直观且用户友好的搜索查询。
- en: Getting ready
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Technical requirements* section at the beginning of this chapter
    for details on setting up GPT.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅本章开头的技术要求部分，以获取有关设置GPT的详细信息。
- en: To demonstrate the complete context of this recipe, I will be using a JavaScript
    library called **Awesomplete** for autocomplete functionality on a demo search
    field. Head over to [https://projects.verou.me/awesomplete/](https://projects.verou.me/awesomplete/)
    to download the static files and learn more about this library.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示这个食谱的完整上下文，我将使用一个名为**Awesomplete**的JavaScript库来在演示搜索字段上实现自动完成功能。前往[https://projects.verou.me/awesomplete/](https://projects.verou.me/awesomplete/)下载静态文件并了解更多关于这个库的信息。
- en: To demonstrate this recipe, we will start with the code base that was developed
    in [*Chapter 4*](B19111_04.xhtml#_idTextAnchor184).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这个食谱，我们将从[*第4章*](B19111_04.xhtml#_idTextAnchor184)中开发的代码库开始。
- en: How to do it…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Follow these steps to perform the setup of autocomplete functionality and then
    use GPT for text completion:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤执行自动完成功能的设置，然后使用GPT进行文本补全：
- en: 'Start by adding the static files from `my_app/templates/base.html`:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将`my_app/templates/base.html`中的静态文件添加到项目中：
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ajax/libs/awesomplete/1.1.5/awesomplete.min.js">
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ajax/libs/awesomplete/1.1.5/awesomplete.min.js">
- en: '[PRE7]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: </script>
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </script>
- en: '[PRE8]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: I have used the link to the static files directly from CDN. You can alternatively
    choose to download these files to your static files folder and refer from there.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我直接从CDN链接到静态文件。你也可以选择将这些文件下载到你的静态文件文件夹中，并从那里引用。
- en: 'Next, add the API key provided by OpenAI to your application configuration
    in `my_app/__init__.py`:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将OpenAI提供的API密钥添加到你的应用程序配置中的`my_app/__init__.py`：
- en: '[PRE9]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, create a new method to handle the user search term and convert it to
    GPT-generated search queries in `my_app/catalog/views.py`:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`my_app/catalog/views.py`中创建一个新的方法来处理用户搜索词并将其转换为GPT生成的搜索查询：
- en: '[PRE10]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding code, first, `openai` is imported. Then a new endpoint is created
    under the `catalog` blueprint with the relative path, `/product-search-gpt`. This
    endpoint serves both `GET` and `POST` requests.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，首先导入`openai`。然后在`catalog`蓝图下创建一个新的端点，相对路径为`/product-search-gpt`。这个端点服务于`GET`和`POST`请求。
- en: On a `GET` request, it will simply render the `product-search-gpt-demo.html`
    template, which we have created to demonstrate this recipe.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GET`请求中，它将简单地渲染我们创建的`product-search-gpt-demo.html`模板，以演示这个食谱。
- en: On a `POST` request, it expects a form field with the name `query`, which is
    then used to make an API request to the `openai.Completion` module with a relevant
    prompt. Look carefully at the prompt where I have specified the `Context` followed
    by the `Operation` that needs to be performed. There is no defined format in which
    you can provide the prompt; it just needs to be something that GPT can understand
    and work upon. The response returned by GPT needs a bit of formatting before it
    can be sent to the JS library for interpretation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在`POST`请求中，它期望有一个名为`query`的表单字段，然后使用这个字段向`openai.Completion`模块发出一个相关的API请求。仔细查看我指定的`Context`之后的`Operation`需要执行的操作。没有定义你可以提供提示的格式；它只需要是GPT可以理解和工作的内容。GPT返回的响应在发送到JS库进行解释之前需要一些格式化。
- en: Information
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: Notice the multiple parameters that have been provided in the API request that
    we made to the `openai.Completion` module. You can read more about all of them
    at [https://platform.openai.com/docs/api-reference/completions/create](https://platform.openai.com/docs/api-reference/completions/create).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们在对`openai.Completion`模块发出的API请求中提供的多个参数。你可以在[https://platform.openai.com/docs/api-reference/completions/create](https://platform.openai.com/docs/api-reference/completions/create)了解更多关于它们的信息。
- en: 'Finally, the template that we referenced in the last step needs to be created.
    Create a new template file at `my_app/templates/product-search-gpt-demo.html`:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要创建在最后一步中引用的模板。在`my_app/templates/product-search-gpt-demo.html`中创建一个新的模板文件：
- en: '[PRE32]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: In the preceding code, I have created a simple HTML form with just one field.
    It is intended to demonstrate the search field on an e-commerce store. Here, you
    can enter any product of choice and the value entered will be sent to GPT to create
    search queries that will help users make more targeted searches.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我创建了一个简单的HTML表单，只有一个字段。它的目的是演示电子商务商店上的搜索字段。在这里，你可以输入任何你选择的产品，输入的值将被发送到GPT以创建帮助用户进行更精确搜索的搜索查询。
- en: How it works…
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Open `http://127.0.0.1:5000/product-search-gpt` in your browser. In the query
    field, enter the product value of choice and see how GPT provides more helpful
    search queries. This is demonstrated in the following screenshot.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开`http://127.0.0.1:5000/product-search-gpt`。在查询字段中输入你选择的产品值，看看GPT如何提供更有帮助的搜索查询。这将在下面的屏幕截图中进行演示。
- en: "![Figure 13.2 – Text completi\uFEFFon using GPT](img/B19111_13_02.jpg)"
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图13.2 – 使用GPT进行文本补全](img/B19111_13_02.jpg)'
- en: Figure 13.2 – Text completion using GPT
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2 – 使用GPT进行文本补全
- en: See also
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Read about the usage and capabilities of text completion using GPT at [https://platform.openai.com/docs/guides/completion/introduction](https://platform.openai.com/docs/guides/completion/introduction)
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://platform.openai.com/docs/guides/completion/introduction](https://platform.openai.com/docs/guides/completion/introduction)了解使用GPT进行文本补全的用法和功能。
- en: Check out the detailed API reference specific to text completion at [https://platform.openai.com/docs/api-reference/completions/create](https://platform.openai.com/docs/api-reference/completions/create)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看针对文本补全的详细API参考[https://platform.openai.com/docs/api-reference/completions/create](https://platform.openai.com/docs/api-reference/completions/create)
- en: Implementing chat using GPT (ChatGPT)
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GPT实现聊天（ChatGPT）
- en: Arguably, chat using GPT, or more popularly, **ChatGPT**, is the most widely
    used application of GPT. Chat using GPT involves using the model to generate natural
    language responses to user input in a conversational setting. GPT’s capabilities
    in this area are impressive, as it can generate coherent and contextually relevant
    responses that simulate human conversation. This makes it an ideal tool for web
    applications that involve chatbots, virtual assistants, or other conversational
    interfaces.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，使用GPT进行的聊天，或者更通俗地说，**ChatGPT**，是GPT最广泛的应用。使用GPT进行聊天涉及在对话环境中使用模型生成对用户输入的自然语言回应。GPT在这一领域的功能令人印象深刻，因为它可以生成连贯且与上下文相关的回应，模拟人类对话。这使得它成为涉及聊天机器人、虚拟助手或其他对话界面的网络应用的理想工具。
- en: With GPT’s ability to generate human-like responses, chatbots developed using
    this technology can provide a more personalized and engaging experience for users.
    By understanding the context of the conversation and providing relevant responses,
    these chatbots can be used for a wide range of applications, such as customer
    service, scheduling appointments, and more.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 利用GPT生成类似人类回应的能力，使用这项技术开发的聊天机器人可以为用户提供更加个性化和吸引人的体验。通过理解对话的上下文并提供相关的回应，这些聊天机器人可以应用于广泛的场景，例如客户服务、预约安排等。
- en: If we talk in the context of an e-commerce website or any web application, one
    of the common features in recent times is chatbots. All businesses want to remain
    connected to their users but, at the same time, might not want to hire many customer
    support executives. In such a scenario, ChatGPT becomes very helpful. I will demonstrate
    this with some basic examples in this recipe.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们谈论电子商务网站或任何网络应用，最近的一个常见功能就是聊天机器人。所有企业都希望与他们的用户保持联系，但同时又可能不想雇佣很多客户支持人员。在这种情况下，ChatGPT变得非常有帮助。我将通过一些基本示例在这个食谱中演示这一点。
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Technical requirements* section at the beginning of this chapter
    for details on setting up GPT.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅本章开头的技术要求部分，以获取设置GPT的详细信息。
- en: We will build this recipe on top of the previous recipe, *Text completion using
    GPT*. Refer to the same for the `openai` configuration settings.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在之前的食谱“使用GPT进行文本补全”的基础上构建这个食谱。请参考该食谱以获取`openai`配置设置。
- en: How to do it…
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现它...
- en: 'Go through the following steps to implement a basic chatbot on your Flask-powered
    web application using ChatGPT:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在你的Flask驱动的网络应用上实现一个基本的聊天机器人使用ChatGPT：
- en: 'First, create a handler to receive user chat messages and respond to them using
    ChatGPT. This should be done in `my_app/catalog/views.py` as follows:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个处理程序来接收用户聊天消息并使用ChatGPT对他们进行回应。这应该在`my_app/catalog/views.py`中完成，如下所示：
- en: '[PRE73]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: In the preceding code, a new endpoint is created under the `catalog` blueprint
    with the relative path, `/chat-gpt`. This endpoint serves both `GET` and `POST`
    requests.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们在`catalog`蓝图下创建了一个新的端点，具有相对路径`/chat-gpt`。此端点服务于`GET`和`POST`请求。
- en: On a `GET` request, it will simply render the `chatgpt-demo.html` template,
    which we have created to demonstrate this recipe.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GET`请求中，它将简单地渲染我们创建来演示此食谱的`ChatGPT-demo.html`模板。
- en: On a `POST` request, it expects a form field with the name `msg`, which should
    refer to the message entered by the user while talking to the chatbot. The message
    is then used to make an API request to the `openai.ChatCompletion` module with
    a relevant set of messages.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在`POST`请求中，它期望一个名为`msg`的表单字段，该字段应引用用户在与聊天机器人交谈时输入的消息。然后，使用相关消息集将消息用于向`openai.ChatCompletion`模块发出API请求。
- en: If you look carefully at the `messages` provided in the `ChatCompletion` API,
    you will notice that the first message has a `system` role. It essentially prepares
    the context for ChatGPT in which it will address the messages from the actual
    user that will be in the `msg` variable.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细查看`ChatCompletion` API提供的`messages`，你会注意到第一条消息有一个`system`角色。它实际上是为ChatGPT准备上下文，其中它将处理实际用户在`msg`变量中的消息。
- en: 'Next, the template that we referenced in the last step needs to be created.
    Create a new template file at `my_app/templates/chatgpt-demo.html`:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建我们在上一步中引用的模板。在`my_app/templates/ChatGPT-demo.html`创建一个新的模板文件：
- en: '[PRE96]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: In the preceding code file, I have created a very simple chatbot using a JS
    list. Here, a simple `textfield` takes the user input and sends it to the API
    endpoint that we created in the first step for GPT to respond.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码文件中，我使用一个JS列表创建了一个非常简单的聊天机器人。在这里，一个简单的`textfield`接收用户输入并将其发送到我们在第一步中为GPT创建的API端点以获得回应。
- en: How it works…
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Open `http://127.0.0.1:5000/chat-gpt` in your browser. In the message field,
    enter the message that you want to send to the chatbot and it will respond with
    a relevant response in the context of an e-commerce website. See the following
    screenshot for a demonstration:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开`http://127.0.0.1:5000/chat-gpt`。在消息字段中，输入您想要发送给聊天机器人的消息，它将在电子商务网站的上下文中给出相关响应。以下截图为演示：
- en: "![Figure 13.3 – Chat assi\uFEFFstant/bot using GPT](img/B19111_13_03.jpg)"
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图13.3 – 使用GPT的聊天助手/机器人](img/B19111_13_03.jpg)'
- en: Figure 13.3 – Chat assistant/bot using GPT
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3 – 使用GPT的聊天助手/机器人
- en: See also
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: Read about the usage and capabilities of ChatGPT at [https://platform.openai.com/docs/guides/chat](https://platform.openai.com/docs/guides/chat)
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://platform.openai.com/docs/guides/chat](https://platform.openai.com/docs/guides/chat)阅读有关ChatGPT的用法和功能
- en: Check out the detailed API reference specific to ChatGPT at [https://platform.openai.com/docs/api-reference/chat](https://platform.openai.com/docs/api-reference/chat)
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看针对ChatGPT的详细API参考，请访问[https://platform.openai.com/docs/api-reference/chat](https://platform.openai.com/docs/api-reference/chat)
- en: Generating images using GPT
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GPT生成图片
- en: '**Image generation** using GPT involves using the model to generate images
    based on textual descriptions. GPT’s capabilities in this area have shown promising
    results, although image generation is not its primary function. By providing a
    textual description, GPT can generate images that attempt to match the given description.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用GPT进行图像生成**涉及使用模型根据文本描述生成图像。GPT在这个领域的功能已经显示出有希望的结果，尽管图像生成不是其主要功能。通过提供文本描述，GPT可以生成尝试匹配给定描述的图像。'
- en: While the quality of the generated images may not be as high as specialized
    image generation models, GPT’s ability to produce visual representations opens
    up new possibilities for creative applications in web development. Possible applications
    include generating placeholder images, creating visual representations based on
    user input, or even assisting in the design process by providing visual suggestions
    based on textual descriptions. However, it’s important to note that for advanced
    image generation tasks, dedicated image generation models such as GANs or VAEs
    are typically preferred.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然生成的图片质量可能不如专门的图像生成模型，但GPT生成视觉表示的能力为网络开发中的创意应用开辟了新的可能性。可能的应用包括生成占位符图片、根据用户输入创建视觉表示，甚至通过提供基于文本描述的视觉建议来协助设计过程。然而，需要注意的是，对于高级图像生成任务，通常更倾向于使用如GANs或VAEs等专门的图像生成模型。
- en: In this recipe, we will generate an image using GPT for a product listing on
    an e-commerce store. With a clear enough prompt, GPT should generate a custom
    image suited to our needs.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用GPT为电子商务商店的产品列表生成图片。只要有足够清晰的提示，GPT应该生成符合我们需求的定制图片。
- en: Getting ready
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Technical requirements* section at the beginning of this chapter
    for details on setting up GPT.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章开头的技术要求部分，了解设置GPT的详细信息。
- en: To demonstrate this recipe, we will start with the code base that was developed
    in [*Chapter 5*](B19111_05.xhtml#_idTextAnchor273).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这个菜谱，我们将从[*第5章*](B19111_05.xhtml#_idTextAnchor273)中开发的代码库开始。
- en: Refer to the first recipe in this chapter, *Text completion using GPT*, for
    the `openai` configuration settings.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章的第一个菜谱，*使用GPT进行文本补全*，以获取`openai`配置设置。
- en: 'We will also be using the `requests` library to download the image. It can
    simply be installed via `pip`:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用`requests`库来下载图片。它可以通过`pip`简单安装：
- en: '[PRE148]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: How to do it…
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Go through the following steps to generate an image while creating the product
    automatically and using the same on the product view page:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建产品时自动生成图片并使用同一图片在产品查看页面上，请按照以下步骤操作：
- en: 'The first change is a very trivial one. In this recipe, we are creating a product
    without uploading the product image as the image will be generated using GPT.
    Hence, the requirement for an `image` field in the product creation form becomes
    obsolete. Accordingly, a new form should be created as follows in `my_app/catalog/models.py`:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个变化是非常微不足道的。在这个菜谱中，我们创建一个产品，而不上传产品图片，因为图片将使用GPT生成。因此，在产品创建表单中的`image`字段的需求变得过时。相应地，应在`my_app/catalog/models.py`中创建以下新表单：
- en: '[PRE149]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: In the preceding code, a new form named `ProductGPTForm` is created with just
    the `price` and `category` fields. The `name` field will be provided by `NameForm`,
    which the newly created form inherits from.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，创建了一个名为 `ProductGPTForm` 的新表单，仅包含 `price` 和 `category` 字段。`name` 字段将由
    `NameForm` 提供，这是新创建的表单所继承的。
- en: 'Next, a new product creation handler and endpoint need to be created that will
    use GPT to generate images in the `my_app/catalog/views.py` file:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，需要在 `my_app/catalog/views.py` 文件中创建一个新的商品创建处理程序和端点，该处理程序将使用 GPT 在 `my_app/catalog/views.py`
    文件中生成图像：
- en: '[PRE157]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: In the preceding code snippet, on a `GET` request, the `product-create-gpt.html`
    template is rendered, which is a newly created template.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，对于 `GET` 请求，渲染了 `product-create-gpt.html` 模板，这是一个新创建的模板。
- en: In the case of a `POST` request, once the form is validated, the relevant data
    for the `name`, `price`, and `category` fields is captured. Then, a request is
    made to GPT using the `create` method of the `openai.Image` module to generate
    an image using the given `prompt`. Notice the other parameters provided to the
    `create()` method – that is, `n` and `size`, which refer to the number of images
    to be generated and the size in pixels, respectively. The `image_url` is captured
    from the response of `create()` and then the image is downloaded using `requests.get()`.
    The downloaded image content is then saved to `UPLOAD_FOLDER`, which is configured
    during the initialization of the application. Then, the rest of the product creation
    continues, as discussed throughout [*Chapter 5*](B19111_05.xhtml#_idTextAnchor273).
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `POST` 请求的情况下，一旦表单经过验证，就会捕获 `name`、`price` 和 `category` 字段的相关数据。然后，使用 `openai.Image`
    模块的 `create` 方法向 GPT 发送请求，使用给定的 `prompt` 生成图像。注意 `create()` 方法提供的其他参数 – 即 `n`
    和 `size`，分别代表要生成的图像数量和像素大小。从 `create()` 的响应中捕获 `image_url`，然后使用 `requests.get()`
    下载图像。下载的图像内容随后保存到在应用程序初始化期间配置的 `UPLOAD_FOLDER`。然后，继续进行商品创建，正如在 [*第 5 章*](B19111_05.xhtml#_idTextAnchor273)
    中讨论的那样。
- en: 'Finally, the template that we referenced in the last step needs to be created.
    Create a new template file at `my_app/templates/product-create-gpt.html`:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要创建在最后一步中引用的模板。在 `my_app/templates/product-create-gpt.html` 创建一个新的模板文件：
- en: '[PRE197]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: The preceding code snippet is a simple HTML form that takes the product name,
    price, and category as input before making a `POST` request for product creation.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段是一个简单的 HTML 表单，在发起商品创建的 `POST` 请求之前，它接受商品名称、价格和类别作为输入。
- en: How it works…
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'First, run your application and create some categories using this URL: `http://127.0.0.1:5000/category-create`.
    Then, head over to `http://127.0.0.1:5000/product-create-gpt` to create a new
    product using the GPT image generation logic that was described earlier in this
    recipe. The screen should look like the following screenshot:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，运行你的应用程序，并使用以下 URL 创建一些类别：`http://127.0.0.1:5000/category-create`。然后，转到 `http://127.0.0.1:5000/product-create-gpt`
    使用前面在本食谱中描述的 GPT 图像生成逻辑创建一个新的商品。屏幕应该看起来像以下截图：
- en: '![Figure 13.4 – Product creation form without image field](img/B19111_13_04.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.4 – 不包含图片字段的商品创建表单](img/B19111_13_04.jpg)'
- en: Figure 13.4 – Product creation form without image field
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.4 – 不包含图片字段的商品创建表单
- en: 'Once you have filled in the details, submit the form and see the image getting
    generated automatically using GPT in accordance with the product name provided.
    Check the following screenshot:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 填写详细信息后，提交表单，并查看根据提供的商品名称自动使用 GPT 生成的图像。查看以下截图：
- en: '![Figure 13.5 – The newly created product with an image generated using GPT](img/B19111_13_05.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.5 – 使用 GPT 生成的图像的新创建商品](img/B19111_13_05.jpg)'
- en: Figure 13.5 – The newly created product with an image generated using GPT
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.5 – 使用 GPT 生成的图像的新创建商品
- en: Important
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: The preceding example is just a demonstration of how to use GPT for image generation.
    The images generated might not be exactly accurate or use exact product logos
    because of image copyright issues. You can choose to be more creative in your
    approach while defining the prompt as per your use cases.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子只是演示了如何使用 GPT 进行图像生成。由于图像版权问题，生成的图像可能不会完全准确或使用确切的商品标志。您可以根据自己的用例在定义 `prompt`
    时更加富有创意。
- en: See also
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: Read about the usage and capabilities of image generation using GPT at [https://platform.openai.com/docs/guides/images/introduction](https://platform.openai.com/docs/guides/images/introduction)
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解使用 GPT 进行图像生成的用法和功能，请参阅 [https://platform.openai.com/docs/guides/images/introduction](https://platform.openai.com/docs/guides/images/introduction)
- en: Check out the detailed API reference specific to GPT image generation at [https://platform.openai.com/docs/api-reference/images](https://platform.openai.com/docs/api-reference/images)
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看针对GPT图像生成的详细API参考，请访问[https://platform.openai.com/docs/api-reference/images](https://platform.openai.com/docs/api-reference/images)
- en: Refer to [*Chapter 5*](B19111_05.xhtml#_idTextAnchor273) to get more details
    and context about product creation APIs and forms
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考第[*第五章*](B19111_05.xhtml#_idTextAnchor273)以获取更多关于产品创建API和表单的详细信息及背景
