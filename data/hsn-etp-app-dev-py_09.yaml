- en: Profiling Applications for Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为性能分析应用程序
- en: Over the course of this book, we have seen how much the performance and scalability
    of an application matters inside an enterprise environment; with this in mind,
    we dedicated a significant portion of the book to understanding how to build an
    application that is not only performant but is also scalable.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的过程中，我们已经看到了应用程序的性能和可扩展性在企业环境中有多么重要；考虑到这一点，我们在本书的相当大部分内容中致力于理解如何构建一个不仅性能良好而且可扩展的应用程序。
- en: So far, we have just seen some best practices for what we can do to build a
    performant and scalable application, but not how to figure out whether a particular
    piece of code in our application is slow and what might be causing it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是看到了一些构建高性能和可扩展应用程序的最佳实践，但并不知道如何找出我们应用程序中特定代码的执行速度慢以及可能导致它的原因。
- en: For any enterprise-grade application, improving its performance and scalability
    is an ongoing process, as the user base of the application keeps growing and the
    application's ...
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何企业级应用程序，提高其性能和可扩展性是一个持续的过程，因为应用程序的用户群不断增长，应用程序的…
- en: Technical requirements
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code listings in this book can be found under `chapter09` directory at [https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python.](https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的代码清单可以在[https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python](https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python)的`chapter09`目录下找到。
- en: The code samples related to the profiling and benchmarking of bugzot sample
    application can be found under the `chapter06` directory itself under the tests
    module of the code base.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与bugzot示例应用程序的性能分析和基准测试相关的代码示例可以在代码库的测试模块下的`chapter06`目录中找到。
- en: 'The code samples can be cloned by running the following command:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下命令克隆代码示例：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This chapter also has some dependencies on third-party Python libraries, which
    can be easily installed by running the following command on your development system:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章还依赖于第三方Python库，可以通过在开发系统上运行以下命令轻松安装：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Behind the scenes of performance bottlenecks
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能瓶颈的幕后
- en: Before an application enters the development phase, there is a thorough discussion
    on what the application is supposed to do, how it will do it, and what kind of
    third-party components the application will need to interact with. Once all of
    this is finalized, the application enters the development phase, where the developers
    are responsible for building the application in such a way that the tasks to be
    performed by the application can be achieved in the most efficient manner possible.
    This efficiency is usually measured in terms of how much time an application takes
    to complete a provided task and how many resources it uses while working on that
    task.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序进入开发阶段之前，会对应用程序应该做什么、如何做以及应用程序需要与之交互的第三方组件的类型进行彻底讨论。一旦所有这些都确定下来，应用程序就进入了开发阶段，在这个阶段，开发人员负责以尽可能高效的方式构建应用程序，以便应用程序执行的任务可以以最有效的方式完成。这种效率通常是以应用程序完成提供的任务所需的时间和应用程序在执行该任务时使用的资源数量来衡量的。
- en: When the application is deployed into production, ...
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序部署到生产环境时，…
- en: Looking at the causes of performance bottlenecks
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看性能瓶颈的原因
- en: 'Usually, performance bottlenecks can be caused by a number of factors, which
    may include shortage of physical resources in the environment where the application
    is deployed or choosing a bad algorithm to process a particular workload when
    a better algorithm was available. Let''s take a look at some of the possible issues
    that may lead to performance bottlenecks in a deployed application:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，性能瓶颈可能是由许多因素引起的，这些因素可能包括部署应用程序的环境中物理资源的短缺，或者在处理特定工作负载时选择了不好的算法，而实际上有更好的算法可用。让我们看看可能导致部署应用程序性能瓶颈的一些可能问题：
- en: '**Not having enough hardware resources:** Initially, most of the bottlenecks
    in performance and scalability are due to poor planning of the hardware resources
    required to run an application. This may happen due to incorrect estimations or
    a sudden unplanned surge in the user base of the application. When this happens,
    the existing hardware resources get stressed and the system slows down.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有足够的硬件资源：** 最初，性能和可扩展性的大部分瓶颈是由于对运行应用程序所需的硬件资源的规划不足。这可能是由于估计不正确或应用程序用户群突然不经意地激增。当这种情况发生时，现有的硬件资源会受到压力，系统会变慢。'
- en: '**Incorrect design choices:** In [Chapter 2](8e39d4d7-6b81-4724-8baa-e09d43c68475.xhtml),* Design
    Patterns – Making a Choice*, we looked at how important design choices are to
    any enterprise-grade application. Constantly allocating new objects for something
    that could have been done through the allocation of a single shared object is
    going to impact the application''s performance by not only stressing the available
    resources but also by causing unnecessary delays due to repeated allocations of
    objects.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不正确的设计选择：** 在[第2章](8e39d4d7-6b81-4724-8baa-e09d43c68475.xhtml)中，*设计模式-做出选择*，我们看到了对于任何企业级应用程序来说，设计选择是多么重要。不断为某些事情分配新对象，而本可以通过分配一个共享对象来完成，这将影响应用程序的性能，不仅会给可用资源带来压力，还会因为重复分配对象而导致不必要的延迟。'
- en: '**Inefficient algorithms:** The places where a large amount of data is being
    processed or the systems that perform a large amount of calculations to generate
    a result may often see degraded performance due to choosing inefficient algorithms.
    A careful study of the availability of alternative algorithms or in-place algorithmic
    optimizations may help boost the performance of the application.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低效的算法：** 在处理大量数据或进行大量计算以生成结果的系统中，由于选择了低效的算法，性能可能会下降。仔细研究可用的替代算法或现场算法优化的可用性可能有助于提高应用程序的性能。'
- en: '**Memory leaks:** In large applications, there could be places where memory
    leaks may happen in an unexpected manner. Although this is difficult in garbage-collected
    languages such as Python, it''s still a possibility. There could be times when
    objects, although no longer in use, still aren''t garbage collected because of
    the way they have been mapped inside the application. Over a longer period of
    runtime, this will cause the available memory to decrease and eventually will
    bring the application to a halt.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存泄漏：** 在大型应用程序中，可能会出现内存泄漏的地方。尽管在Python等垃圾收集语言中这很困难，但仍然有可能发生。有时候，尽管对象不再使用，但由于它们在应用程序中的映射方式，它们仍然没有被垃圾收集。随着运行时间的延长，这将导致可用内存减少，并最终使应用程序停止运行。'
- en: These were a few reasons why performance bottlenecks in a system happen. Fortunately
    for us as software developers, we have a number of tools that can help us pinpoint
    bottlenecks, as well as find things such as memory leaks or even just profile
    the memory usage of individual portions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是系统中性能瓶颈发生的几个原因。对于我们作为软件开发人员来说，幸运的是，我们有许多工具可以帮助我们找出瓶颈，以及发现诸如内存泄漏之类的问题，甚至只是对个别部分的内存使用进行分析。
- en: With this knowledge about why some performance bottlenecks happen, it's time
    for us to move onto learning how to look for these performance bottlenecks in
    an application and then trying to understand some of the ways we can reduce their
    impact.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有了关于为什么会出现性能瓶颈的知识，现在是时候学习如何在应用程序中寻找这些性能瓶颈，然后尝试理解我们可以减少它们影响的一些方法了。
- en: Probing an application for performance issues
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探测应用程序的性能问题
- en: Performance is a critical component of any enterprise-grade application, and
    you cannot afford to have an application that slows down often and impacts the
    business process of the whole organization. Unfortunately, performance issues
    are also one of the most complex issues to understand and debug. This complexity
    arises because there's no standard way to access the performance of a particular
    piece of code inside the application, and because once the application has been
    developed, the complete flow of code needs to be understood so as to pinpoint
    the possible areas that might cause a specific performance issue.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 性能是任何企业级应用程序的关键组成部分，您不能容忍应用程序经常变慢并影响整个组织的业务流程。不幸的是，性能问题也是最难理解和调试的问题之一。这种复杂性是因为没有标准的方法来访问应用程序中特定代码片段的性能，而且一旦应用程序开发完成，就需要理解代码的完整流程，以便找出可能导致特定性能问题的可能区域。
- en: As developers, we can reduce these hardships by building our application in
    such a ...
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，我们可以通过以这种方式构建应用程序来减少这些困难...
- en: Writing performance benchmarks
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写性能基准测试
- en: Let's start with a discussion about how we, as software developers, can build
    the application in a way that helps us flag the performance bottlenecks early
    in the development cycle and how we can make our life easy in terms of debugging
    these bottlenecks.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从讨论开始，讨论我们作为软件开发人员如何构建应用程序，以帮助我们在开发周期的早期阶段标记性能瓶颈，以及如何在调试这些瓶颈方面使我们的生活变得更加轻松。
- en: The first and most important thing we can do during our application development
    cycle is to write benchmark tests for the individual components of our application.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序开发周期中，我们可以做的第一件最重要的事情是为应用程序的各个组件编写基准测试。
- en: Benchmark tests are simple tests that aim to evaluate the performance of a particular
    piece of code by executing it for multiple iterations and averaging the time required
    to execute the code over those iterations. Do you remember hearing the name of
    a library known as Pytest, which we used to write unit tests in [Chapter 8](4d91a05b-243d-4e79-9112-7ca44520c596.xhtml), *Writing
    Testable Code*?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 基准测试是简单的测试，旨在通过多次迭代执行代码并计算这些迭代中执行代码所需的时间的平均值来评估特定代码片段的性能。您还记得听说过一个名为Pytest的库吗？我们在[第8章](4d91a05b-243d-4e79-9112-7ca44520c596.xhtml)中用它来编写单元测试，*编写可测试的代码*吗？
- en: 'We''re going to utilize the same library to help us write our performance benchmark
    tests. But, before we can make Pytest usable for writing benchmark tests, we need
    to make it understand the benchmarking concept, which is very easy with Python,
    specifically because of the availability of a huge Python ecosystem. To make Pytest
    understand the concept of benchmarking, we are going to import a new library known
    as `pytest-benchmark`, which adds benchmarking fixtures to Pytest and allows us
    to write benchmarking tests for our application. To do this, we need to run the
    following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用相同的库来帮助我们编写性能基准测试。但是，在我们可以让Pytest用于编写基准测试之前，我们需要让它理解基准测试的概念，这在Python中非常容易，特别是因为有一个庞大的Python生态系统可用。为了让Pytest理解基准测试的概念，我们将导入一个名为`pytest-benchmark`的新库，它为Pytest添加了基准测试固定装置，并允许我们为我们的应用程序编写基准测试。为此，我们需要运行以下命令：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once we have the library installed, we are ready to write our performance-benchmarking
    tests for our application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装了库，我们就可以为我们的应用程序编写性能基准测试了。
- en: Writing our first benchmark
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写我们的第一个基准测试
- en: 'With the required library installed, it''s time for us to write our first performance
    benchmark. For this, we will use a simple example and then move forward to understand
    how we can write a benchmark test for our application:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 安装所需的库后，现在是时候为我们的第一个性能基准测试编写了。为此，我们将使用一个简单的示例，然后继续了解如何为我们的应用程序编写基准测试：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We have written our first benchmark test. A very simple one indeed, but there
    are quite a few things which we need to understand to see what we are doing here:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经编写了我们的第一个基准测试。确实是一个非常简单的测试，但有很多事情我们需要了解，以便看清我们在这里做什么：
- en: First, as we started writing the benchmark test, we imported ...
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，当我们开始编写基准测试时，我们导入...
- en: Writing an API benchmark
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写API基准测试
- en: With this, we know how to write a simple benchmark. So, how about writing something
    similar for our API? Let's take a look at how we can modify one of our API tests
    that we used to validate the functioning of our index API endpoint and see how
    we can run a benchmark on that.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们知道如何编写一个简单的基准测试。那么，我们如何为我们的API编写类似的东西呢？让我们看看如何修改我们用于验证索引API端点功能的API测试之一，并看看如何在其中运行基准测试。
- en: 'The following code modifies our existing index API test case to include a benchmark
    test for the API:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码修改了我们现有的索引API测试用例，包括API的基准测试：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code, all we did to make the API endpoint benchmark was add
    a new method, known as `test_index_benchmark()`, which takes in two fixtures as
    a parameter. One of the fixtures is responsible for setting up our application
    instance, and the second fixture—the benchmark fixture—is used to run the benchmark
    on the client API endpoint and generate the results.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们只需添加一个名为`test_index_benchmark()`的新方法，它接受两个fixture作为参数。其中一个fixture负责设置我们的应用程序实例，第二个fixture——基准fixture——用于在客户端API端点上运行基准测试并生成结果。
- en: Also, one important thing to note here is how we were able to mix the unit test
    code with the benchmark code so that we do not need to write two different methods
    for each class of the test; all of this is made possible by Pytest, which allows
    us to run the benchmark on the method as well as allow us to validate if the method
    being tested provides a correct result or not through the use of a single testing
    method.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的事情要注意的是，我们如何能够将单元测试代码与基准测试代码混合在一起，这样我们就不需要为每个测试类编写两种不同的方法；所有这些都是由Pytest实现的，它允许我们在方法上运行基准测试，并允许我们通过单个测试方法验证被测试的方法是否提供了正确的结果。
- en: Now we know how to write benchmark tests inside the application. But what if
    we had to debug something that was slow but for which the benchmark operation
    doesn't flags any concern. What can we do here? Fortunately for us, Python provides
    a lot of options that allow us to test for any kind of performance anomalies that
    may happen inside the code. So, let's spend some time looking over them.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何在应用程序中编写基准测试。但是，如果我们需要调试某些慢的东西，但基准操作并没有引发任何关注，我们该怎么办呢？幸运的是，Python提供了许多选项，允许我们测试代码内部可能发生的任何性能异常。因此，让我们花一些时间来了解它们。
- en: Doing component-level performance analysis
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行组件级性能分析
- en: With Python, a lot of facilities come built-in and others can be easily implemented
    with third-party libraries. So, let's take a look at what python has in store
    for us for running component-level performance analysis.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python，许多设施都是内置的，其他设施可以很容易地使用第三方库实现。因此，让我们看看Python为我们提供了哪些用于运行组件级性能分析的功能。
- en: Measuring slow operations with timeit
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用timeit测量慢操作
- en: Python provides a very nice module, known as `timeit`, that we can use to run
    some simple time-analysis tasks on small snippets of code or to understand how
    much time a particular method call is taking.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了一个非常好的模块，称为`timeit`，我们可以使用它来对代码的小片段运行一些简单的时间分析任务，或者了解特定方法调用所花费的时间。
- en: Let's take a look at a simple script that shows us how we can use `timeit` to
    understand how much time a particular method is taking, and then we will understand
    a bit more about how we can use the functionality provided by `timeit` to run
    time-profiling for the applications that we intend to build.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个简单的脚本，向我们展示了如何使用`timeit`来了解特定方法所花费的时间，然后我们将更多地了解如何使用`timeit`提供的功能来运行我们打算构建的应用程序的时间分析。
- en: 'The following code snippet shows a simple use of `timeit` for running timing
    analysis on a method call:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了在方法调用上运行`timeit`进行时间分析的简单用法：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On running this file, we get an output that looks like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此文件后，我们得到的输出如下：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we can see from the preceding example, we can use `timeit` to do a simple
    time analysis for the execution of a given method.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从上面的示例中看到的，我们可以使用`timeit`来对给定方法的执行进行简单的时间分析。
- en: Now, this is handy, but we cannot go on writing multiple setup statements when
    we have to time more than a couple of methods. What should we do here? There should
    be a simple way to achieve this.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这很方便，但是当我们需要对多个方法进行计时时，我们不能一直编写多个设置语句。在这里我们该怎么办呢？应该有一种简单的方法来实现这一点。
- en: So, how about we create a simple decorator that we can use to time our methods
    that may need time profiling.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们可以创建一个简单的装饰器，用于对可能需要时间分析的方法进行计时。
- en: 'Let''s create this simple decorator method. The following example shows us
    how to write a decorator method that we can use later to do time comparisons on
    our methods:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建这个简单的装饰器方法。以下示例向我们展示了如何编写一个装饰器方法，以便以后在我们的方法上进行时间比较：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This was a decorator that we created. Inside the decorator, we take in the function
    that we want to profile as a parameter, along with any of the arguments that were
    passed to it. Now, we initialize the start time for the function, followed by
    a call to the function and then we store the end time of the call once the execution
    of the function returns. Based on this, we calculate the total time it took for
    the function to execute.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个我们创建的装饰器。在装饰器内部，我们将要分析的函数作为参数传入，以及传递给它的任何参数。现在，我们初始化函数的开始时间，然后调用函数，然后在函数返回执行后存储调用的结束时间。基于此，我们计算函数执行所花费的总时间。
- en: 'But how can we use this decorator to profile our methods? The following example
    shows a sample of that:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们如何使用这个装饰器来分析我们的方法呢？以下示例展示了一个示例：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This was very simple and far easier to do than importing individual methods
    again and again for the timing profile.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常简单，比一遍又一遍地导入单个方法进行时间分析要容易得多。
- en: So, our `timeit` method is a very simple method to use and can provide us with
    some basic information about how much time it took for a particular method to
    execute. We can even profile individual statements with these methods. But what
    if we wanted a more detailed explanation of how much time individual statements
    are taking inside a particular method or to understand what exactly is causing
    a given method to slow down? For things such as these, our simple timing solution
    isn't an ideal option. We need something more sophisticated.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的`timeit`方法是一个非常简单的方法，可以为我们提供有关特定方法执行所花费的时间的一些基本信息。我们甚至可以使用这些方法对单个语句进行分析。但是，如果我们想要更详细地了解特定方法内部单个语句花费了多少时间，或者了解是什么导致了给定方法变慢，我们的简单计时解决方案就不是一个理想的选择。我们需要更复杂的东西。
- en: As a matter of fact, Python provides us with some built-in profilers that we
    can use to perform in-depth performance profiling of an application. Let's take
    a look at how we can do this.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，Python为我们提供了一些内置的分析器，我们可以使用它们来对应用程序进行深入的性能分析。让我们看看如何做到这一点。
- en: Profiling with cProfile
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用cProfile进行分析
- en: The Python library provides us with an application profiler which can help ease
    the life of the developers by allowing to easily profile not only the whole application,
    but also the individual components of the application.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Python库为我们提供了一个应用程序分析器，可以通过它轻松地对整个应用程序以及应用程序的各个组件进行分析，从而简化开发人员的工作。
- en: Profile is a built-in code profiler that comes bundled as a module with some
    of the python distributions. The module is able to collect the information about
    the individual method calls that have been made, along with the profiling of any
    of the calls made to third-party functions.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Profile是一个内置的代码分析器，作为一些Python发行版的模块捆绑在一起。该模块能够收集有关已进行的单个方法调用的信息，以及对第三方函数的任何调用进行分析。
- en: Once these details are collected, the module provides us with a host of statistics
    that can help us get a better picture of what's going on inside the component.
    Before we dive into what details are collected and represented, ...
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦收集了这些细节，该模块将为我们提供大量统计信息，可以帮助我们更好地了解组件内部发生了什么。在我们深入了解收集和表示的细节之前，...
- en: Profiling for memory usage with memory_profiler
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用memory_profiler进行内存使用分析
- en: Memory profiling forms a very important aspect of the performance analysis of
    an application. When building an application, there are places where we may implement
    an incorrect mechanism of dealing with the dynamically allocated objects and hence
    may land up in a situation where these objects which are no longer in use are
    still having a reference pointing to them preventing their garbage collection
    by the Garbage Collector.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 内存分析是应用程序性能分析的一个非常重要的方面。在构建应用程序时，有些地方我们可能会实现处理动态分配对象的不正确机制，因此可能会陷入这样一种情况：这些不再使用的对象仍然有一个指向它们的引用，从而阻止了垃圾收集器对它们的回收。
- en: This results in the growth of the application-memory usage over time, causing
    the application to come to a halt once the system runs out of memory that can
    be allocated to the application for performing its regular activities.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致应用程序内存使用随时间增长，导致应用程序在系统耗尽可分配给应用程序执行其常规活动所需的内存时停止运行。
- en: Now, to address these kinds of issues, we don't require a profiler that will
    help us analyze the call stack of the application and provide us details about
    how much time an individual call took. Instead, what we need here is a profiler
    that can tell us about the memory trends of an application, such as how much memory
    individual methods might be consuming and how that memory grows as the application
    continues to run.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了解决这些问题，我们不需要一个能帮助我们分析应用程序调用堆栈并提供有关单个调用花费了多少时间的分析器。相反，我们需要的是一个能告诉我们应用程序的内存趋势的分析器，比如单个方法可能消耗多少内存，以及随着应用程序继续运行，内存如何增长。
- en: 'This is the place where `memory_profiler` comes in, which is a third-party
    module that we can easily include in our application to allow memory profiling.
    But, before we dive into how to use `memory_profiler`, we need to get the module
    into our development environment first. The following line of code fetches the
    required module into our development environment:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`memory_profiler`发挥作用的地方，它是一个第三方模块，我们可以轻松地将其包含在我们的应用程序中以进行内存分析。但是，在深入了解如何使用`memory_profiler`之前，我们需要先将该模块引入我们的开发环境。以下代码行将所需的模块引入我们的开发环境：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once the memory profiler has been fetched into the developer environment, we
    are now ready to get up and running with it. Let's take a look at a sample program
    and see how we can use `memory_profiler` to understand the memory usage patterns
    of our application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦内存分析器被获取到开发环境中，我们现在可以开始使用它了。让我们看一个示例程序，并了解如何使用`memory_profiler`来了解我们应用程序的内存使用模式。
- en: 'The following code snippet shows us an example of how we can use `memory_profiler`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段向我们展示了如何使用`memory_profiler`的示例：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, with the code in place, let's try to understand what we did here.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，代码已经就位，让我们试着理解我们在这里做了什么。
- en: At the start, we imported a decorator known as profile, which is provided by
    the `memory_profiler` library. This decorator is used to notify `memory_profiler`
    of which methods needs to be profiled for the memory usage.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入了一个名为profile的装饰器，它是由`memory_profiler`库提供的。这个装饰器用于通知`memory_profiler`需要对内存使用情况进行分析的方法。
- en: To enable memory profiling for a method, all we need to do is decorate that
    method with the decorator. For example, in our sample application code, we decorated
    the `calc_sum()` method with the decorator.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要为方法启用内存分析，我们只需要使用装饰器装饰该方法。例如，在我们的示例应用程序代码中，我们使用装饰器装饰了`calc_sum()`方法。
- en: 'Now, let''s run our sample code and see what we get as an output by running
    the following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行我们的示例代码，并通过运行以下命令查看输出结果：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once the command is executed, we get the following output:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行了命令，我们会得到以下输出：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As we can see from the preceding output, we got some detailed statistics about
    the memory allocation for the method. The output provided us information about
    how much memory was being used and how much memory increment each of the steps
    caused to the application.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述输出中可以看出，我们得到了有关该方法的内存分配的详细统计信息。输出为我们提供了有关应用程序使用了多少内存以及每个步骤导致应用程序增加了多少内存的信息。
- en: 'Now, let''s take one more example to see how the memory allocation changes
    when one method calls another method. The following code showcases this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们举一个例子，看看当一个方法调用另一个方法时内存分配如何改变。以下代码展示了这一点：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'On executing the preceding code, we get to see the following output:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述代码后，我们得到以下输出：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As we can see, when a call to the `say_hello()` method was made, the call caused
    an increment of 0.1 MB of memory usage. This is quite a handy library in case
    we suspect that there's some memory leak that may be happening somewhere in the
    code.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，当调用`say_hello()`方法时，调用导致内存使用量增加了0.1 MB。如果我们怀疑代码中可能存在内存泄漏，这个库就非常方便。
- en: Collecting live performance data
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集实时性能数据
- en: So far, we have seen how we can use the different profiling tools to profile
    the performance of the application when needed so as to assist us in figuring
    out which portion of the code is causing performance bottlenecks. But how will
    we know whether an operation is taking long than it should?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了在需要时如何使用不同的性能分析工具来分析应用程序的性能，以帮助我们找出代码的哪一部分导致了性能瓶颈。但是，我们如何知道一个操作是否花费的时间比应该花费的时间长？
- en: One of the answers to this could be the slow response times being reported by
    users, but that could have quite a lot of factors behind it, which may involve
    a slowdown at the user end only.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个答案可能是用户报告的响应时间慢，但这可能有很多因素，可能只涉及用户端的减速。
- en: There are a few other mechanisms that we can use to monitor the performance
    issues in our application in real time. So, let's take a look at one of these
    methods, which allows us to gather information about the time taken for individual
    ...
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一些其他机制来实时监控应用程序的性能问题。因此，让我们看看其中一种方法，它允许我们收集有关单个操作所需时间的信息...
- en: Logging performance metrics
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录性能指标
- en: Inside an application, there could be several steps. Each of these steps can
    be profiled for their performance through the use of different tools. One of the
    most basic tools is logging. In this, we collect the execution time of the different
    methods and keep the entry for it inside the log file.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中，可能有几个步骤。可以通过使用不同的工具来分析每个步骤的性能。其中最基本的工具之一是日志记录。在这种情况下，我们收集不同方法的执行时间，并将其记录在日志文件中。
- en: 'The following snippet of code shows a small example of how this can be achieved
    inside the demo application that we built in [Chapter 6](68cb369b-628d-4950-91fd-b165b961c660.xhtml), *Example
    – Building BugZot*:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了如何在我们在[第6章](68cb369b-628d-4950-91fd-b165b961c660.xhtml)中构建的演示应用程序中实现这一点，*示例-构建BugZot*：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This was a simple code and logs the execution time of every API endpoint called
    in a request. What we do here is very minimalistic. We first create a `before_request`
    handler, which initializes a property, `start_time`, in the flask global namespace.
    Once this is done, the request is sent to processing. Once the request has been
    processed, it goes to the `teardown` handler that we have defined.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的代码，记录了请求中调用的每个API端点的执行时间。我们在这里做的非常简单。我们首先创建一个`before_request`处理程序，在flask全局命名空间中初始化一个属性`start_time`。一旦完成这一步，请求就被发送到处理程序。一旦请求被处理，它就会进入我们定义的`teardown`处理程序。
- en: Once the request reaches this `teardown` handler, we calculate the total time
    it took to process the request and log it inside the application logs.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦请求到达这个`teardown`处理程序，我们计算处理请求所需的总时间，并将其记录在应用程序日志中。
- en: This kind of approach allows us to query or process our log files to understand
    how much time every request is taking and which API endpoints are taking the longest
    amount of time.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法允许我们查询或处理我们的日志文件，了解每个请求所需的时间以及哪些API端点花费了最长的时间。
- en: Avoiding performance bottlenecks
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免性能瓶颈
- en: Over the last few sections, we took a look at the different ways we can profile
    our application for different kinds of performance bottlenecks that may involve
    slowdowns to memory leaks. But once we're aware of these issues and why they're
    happening, what other options do we have to prevent them from occurring again?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几个部分中，我们看了一下我们可以对应用程序进行性能分析的不同方式，以便解决可能导致性能下降或内存泄漏的性能瓶颈。但是一旦我们意识到这些问题以及它们发生的原因，我们还有哪些其他选项可以防止它们再次发生呢？
- en: 'Fortunately, we have a couple of helpful guidelines that may help prevent performance
    bottlenecks or can limit the possible impact of these bottlenecks. So, let''s
    take a look at some of these guidelines:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们有一些有用的准则可以帮助防止性能瓶颈，或者可以限制这些瓶颈可能产生的影响。因此，让我们看看其中一些准则：
- en: '**Choosing the correct design patterns:** Design patterns are an important
    choice in the application. For example, a logging object doesn''t need to be reinitialized
    in every submodule of the application ...'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择正确的设计模式：**设计模式在应用程序中是一个重要的选择。例如，日志对象不需要在应用程序的每个子模块中重新初始化...'
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we took a look at how the performance of an application is
    an important aspect of the software's development and what kind of issues usually
    cause performance bottlenecks to appear in the application. Moving forward, we
    took a look at the different ways in which we can profile an application for performance
    issues. This involved, first the writing of benchmark tests for individual components
    as well as the individual APIs and then moving to more specific, component-level
    analysis, where we took a look at different ways of profiling the components.
    These profiling techniques included the use of simple timing profiles of methods
    using the Python `timeit` module, then we moved on to using more sophisticated
    techniques with Python cProfile and covered memory profiling. Another topic we
    took a look at during our journey is the use of logging techniques to help us
    evaluate slow requests whenever we want. Finally, we took a look at some of the
    general principles that can help us to prevent performance bottlenecks inside
    an application.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到应用程序的性能是软件开发中的重要方面，通常会导致应用程序出现性能瓶颈的问题。接下来，我们看了一下我们可以对应用程序进行性能分析的不同方式。首先，这涉及编写单个组件以及单个API的基准测试，然后转向更具体的组件级分析，我们看了不同的组件分析方法。这些分析技术包括使用Python的`timeit`模块对方法进行简单的时间分析，然后我们转向使用更复杂的技术，使用Python
    cProfile并进行内存分析。在我们的旅程中，我们还看了一下使用日志技术来帮助我们评估慢请求的一些主题。最后，我们看了一些通用原则，可以帮助我们预防应用程序内的性能瓶颈。
- en: In the next chapter, we will take a look at how important it is to secure our
    application. If not done, it'll not only pave the way to serious data theft, but
    also a lot of liabilities and can erode the trust of your users.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下保护应用程序的重要性。如果不这样做，不仅会为严重的数据窃取铺平道路，还会产生许多责任，并可能侵蚀用户的信任。
- en: Questions
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What factors can cause a performance bottleneck when the application is deployed?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用部署时可能导致性能瓶颈的因素有哪些？
- en: What are the different ways in which we can run a time profile on a method?
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过哪些不同的方式来对方法进行时间分析？
- en: What may cause a memory leak in Python, which is a garbage-collected language?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么可能导致Python中的内存泄漏，Python是一种垃圾收集语言？
- en: How can we profile an API response and figure out what could be the cause of
    its slowing down?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何对API响应进行分析，找出其减慢的原因？
- en: Can choosing an incorrect design pattern result in a performance bottleneck?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择错误的设计模式会导致性能瓶颈吗？
