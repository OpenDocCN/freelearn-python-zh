- en: Chapter 7. Implementing a Web Application with Python Using Flask
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 使用Flask用Python实现Web应用程序
- en: To ensure prosperity in the process of learning about the Requests module, there
    seems to be nothing more important than an application of all the skills and knowledge
    that you attained until now. So, here we pave the way to apply the expertise you
    have gained till date, by creating a web application with the Flask framework.
    This will give you an in-depth knowledge of developing a practical web application
    and writing test cases for it. We do incline ourselves towards following the best
    practices and a hands-on approach in this process. Let us dive in to learn the
    stuff.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在学习Requests模块的过程中确保繁荣，似乎没有什么比应用你至今所获得的所有技能和知识更重要。因此，我们在这里铺平道路，通过使用Flask框架创建一个网络应用程序来应用你至今所获得的专长。这将使你对开发实际网络应用程序及其测试用例的编写有深入的了解。我们在这一过程中倾向于遵循最佳实践和动手操作的方法。让我们深入其中，学习这些知识。
- en: What is Flask?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Flask？
- en: Flask is a small yet powerful framework for creating web applications with Python.
    It can be called a **micro framework**. It is so small that if you could build
    a good rapport with it, you can understand all of its source code. It is powerful
    because of its goodies called **extensions** and its ability to provide all the
    basic services as a whole. The extensions can be added according to the application's
    requirement. The man behind Flask framework is Armin Ronacher, who released it
    on April 1, 2010.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 是一个轻量级但功能强大的 Python 用于创建 Web 应用的框架。它可以被称作一个 **微框架**。它如此小巧，以至于如果你能与之建立良好的关系，你就能理解它的所有源代码。它之所以强大，是因为它拥有被称为
    **扩展** 的优点，以及它作为一个整体提供所有基本服务的能力。扩展可以根据应用的需求进行添加。Flask 框架背后的开发者是 Armin Ronacher，他于
    2010 年 4 月 1 日发布了它。
- en: 'Flask goodies are as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 的优点如下：
- en: Flask comes up with an inbuilt development server, which assists you in the
    development process and in the testing of programs.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask自带了一个内置的开发服务器，它可以帮助你在开发过程中以及测试程序时。
- en: Error logging is made simple in Flask, with its interactive web-based debugger.
    When executing your code, if any bug has emerged in the way, an error stack trace
    will be shown on the web page, which makes it easy to deal with. This can be achieved
    by setting the flag of `app.debug` to `True`.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Flask 中，错误日志记录变得简单，因为它拥有交互式的基于网页的调试器。当执行你的代码时，如果以某种方式出现了错误，错误堆栈跟踪将会显示在网页上，这使得处理错误变得容易。这可以通过将
    `app.debug` 的标志设置为 `True` 来实现。
- en: With its lightweight nature, Flask is a perfect framework to build RESTful web
    services. The route decorator which helps to bind a function to a URL can take
    the HTTP methods as arguments that pave a way to build API's in an ideal manner.
    In addition, working with JSON data is simple with Flask.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于其轻量级特性，Flask是一个构建RESTful网络服务的完美框架。该路由装饰器可以帮助将一个函数绑定到一个URL，它可以接受HTTP方法作为参数，从而为以理想方式构建API铺平道路。此外，使用Flask处理JSON数据非常简单。
- en: The template support for Flask is served by a flexible template engine called
    **Jinja2**. This makes the process of rendering the templates a smoother task.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask的模板支持由一个名为**Jinja2**的灵活模板引擎提供。这使得渲染模板的过程变得更加顺畅。
- en: The Session object is another goodie which saves the user's session. It stores
    the requests of the user so that the application can remember the different requests
    from the user.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Session对象是另一个好东西，它保存了用户的会话。它存储用户的请求，以便应用程序能够记住用户的不同请求。
- en: Flask uses the **Web Server Gateway Interface** (**WSGI**) protocol while dealing
    with requests from clients and it is 100 % WSGI compliant.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask在处理来自客户端的请求时使用**Web Server Gateway Interface**（**WSGI**）协议，并且完全符合100 %
    WSGI规范。
- en: Getting started with Flask
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask入门
- en: 'We can kick-start our application development with a simple example, which
    gives you an idea of how we program in Python with a flask framework. In order
    to write this program, we need to perform the following steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一个简单的示例来启动我们的应用程序开发，这个示例能让你了解我们如何使用 Flask 框架在 Python 中编程。为了编写这个程序，我们需要执行以下步骤：
- en: Create a WSGI application instance, as every application in Flask needs one
    to handle requests from the client.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个WSGI应用程序实例，因为Flask中的每个应用程序都需要一个来处理来自客户端的请求。
- en: Define a `route` method which associates a URL and the function which handles
    it.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个`route`方法，它将一个URL与其处理的函数关联起来。
- en: Activate the application's server.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活应用程序的服务器。
- en: 'Here is an example which follows the preceding steps to make a simple application:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个按照前面步骤制作简单应用的示例：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding lines of code, we have created a WSGI application instance
    using the Flask's `Flask` class, and then we defined a route which maps the path
    "`/`" and the view function `home` to process the request using a Flask's decorator
    function `Flask.route()`. Next, we used the `app.run()` which tells the server
    to run the code. And at that end, it will result in a web page showing up `"Hello
    Guest!",` when the code is executed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码行中，我们使用 Flask 的 `Flask` 类创建了一个 WSGI 应用实例，然后我们定义了一个路由，将路径 "`/`" 和视图函数 `home`
    映射到使用 Flask 的装饰器函数 `Flask.route()` 处理请求。接下来，我们使用了 `app.run()`，这告诉服务器运行代码。在那一端，当代码执行时，它将显示一个包含
    `"Hello Guest!"` 的网页。
- en: Installing Flask
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Flask
- en: Before initiating the programming process, you will need to install the required
    dependencies. Let's initiate the installation process by creating a virtual environment
    using **virtual environment wrapper**. It's one of the best practices to use a
    virtual environment while creating an application. The virtual environment wrapper
    is a tool which puts all the dependencies of the project in one place.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编程过程之前，您需要安装所需的依赖项。让我们通过使用**虚拟环境包装器**来创建虚拟环境来启动安装过程。在创建应用程序时使用虚拟环境是一种最佳实践。虚拟环境包装器是一个工具，它将项目的所有依赖项放在一个地方。
- en: This practice will mitigate a lot of complications while dealing with different
    projects in your system. In our tutorial the installation and application development
    goes forward using Python version 2.7.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这种实践将减轻你在系统中处理不同项目时遇到的大量复杂性。在我们的教程中，安装和应用开发使用的是 Python 2.7 版本。
- en: 'The following are the steps for setting up the environment:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为设置环境所需的步骤：
- en: 'Install the virtual environment wrapper using `pip`. You may have to use `sudo`
    for administrative privileges:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `pip` 安装虚拟环境包装器。你可能需要使用 `sudo` 以获得管理员权限：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All the installation packages related to virtual environments are placed in
    one folder for the sake of convenience. **Virtualenvwrapper** identifies the directory
    using an environmental variable `WORKON_HOME`. So, set the environmental variable
    to `~/Envs` or anything of your choice.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了方便起见，所有与虚拟环境相关的安装包都放置在一个文件夹中。**Virtualenvwrapper**通过环境变量`WORKON_HOME`来识别该目录。因此，请将环境变量设置为`~/Envs`或您选择的任何名称。
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create the `WORKON_HOME` directory using the following command if it doesn''t
    exist on your local machine:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在您的本地机器上不存在`WORKON_HOME`目录，请使用以下命令创建：
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In order to use the utilities provided by the `virtualenvwrapper,` we need
    to activate the shell script `virtualenvwrapper.sh` as shown in the following
    lines. On Ubuntu machines, we can find this script in the `/usr/local/bin` location:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用`virtualenvwrapper`提供的工具，我们需要激活如下所示的`virtualenvwrapper.sh`壳脚本。在Ubuntu机器上，我们可以在`/usr/local/bin`位置找到此脚本：
- en: '[PRE4]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For the sake of convenience, add the commands in steps 2 and 4 to your shell
    startup file to initialize and activate the `virtualenvwrapper` utilities at your
    terminal's startup.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了方便起见，将步骤2和4中的命令添加到您的shell启动文件中，以便在终端启动时初始化和激活`virtualenvwrapper`工具。
- en: Now, use the `mkvirtualenv` command to create a new virtual environment for
    your project with the name `survey`. Once the `survey` environment is activated
    it gets displayed with the environment name in the closed braces before the shell
    prompt.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用 `mkvirtualenv` 命令为您的项目创建一个名为 `survey` 的新虚拟环境。一旦 `survey` 环境被激活，它就会在 shell
    提示符前的闭合括号中显示环境名称。
- en: '[PRE5]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Installing required packages with pip
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用pip安装所需软件包
- en: We are going to use **Flask-SQLAlchemy** in this project which is a Flask extension
    module that acts as an **Object Relational Mapper** (**ORM**) to interact with
    the database. We will also be using modules like `requests`, `httpretty`, `beautifulsoup`
    in the development of our `survey` application which we will be building in this
    tutorial.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本项目中使用 **Flask-SQLAlchemy**，这是一个作为 **对象关系映射器**（**ORM**）的 Flask 扩展模块，用于与数据库交互。我们还将使用
    `requests`、`httpretty`、`beautifulsoup` 等模块来开发我们的 `survey` 应用程序，该应用程序将在本教程中构建。
- en: 'Now install the following packages with your virtual environment activated:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在请确保你的虚拟环境已激活，然后安装以下包：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Survey – a simple voting application using Flask
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调查 - 使用 Flask 的简单投票应用程序
- en: To create the `survey` application, we are going to follow an approach which
    will give you an easy understanding of the ins and outs of the application and
    also will make this process of developing a joyride.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建`调查`应用程序，我们将采用一种方法，这种方法将使你轻松理解应用程序的方方面面，同时也会让开发过程变得愉快。
- en: Our development procedure drives you through the process of getting you introduced
    to all the functions that the project deals with. And then, we will implement
    each and every function step-by-step. During the development process we will be
    following the **Model-View-Controller** (**MVC**) design pattern, which is popular
    for developing web applications.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的开发流程将引导您逐步了解项目所涉及的所有功能。然后，我们将逐步实现每一个功能。在开发过程中，我们将遵循**模型-视图-控制器**（**MVC**）设计模式，这种模式在开发Web应用中非常流行。
- en: The main aim of the `survey` application is to record the number of responses
    — `'yes'`, `'no'` and `'maybe'` - for the created survey questions.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`调查`应用的主要目的是记录创建的调查问题的回答数量——“是”、“否”和“可能”。'
- en: Basic file structures
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本文件结构
- en: 'For developing a Flask application, we are following a specific structure to
    organize the contents of our application. Here is the file structure of the application
    that we are going to develop:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开发 Flask 应用程序，我们遵循特定的结构来组织应用程序的内容。以下是我们要开发的应用程序的文件结构：
- en: '![Basic file structures](img/B03661_07_01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![基本文件结构](img/B03661_07_01.jpg)'
- en: 'Here is a description of all the files and folders present in our application''s
    file structure:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是关于我们应用程序文件结构中所有文件和文件夹的描述：
- en: '| Name of the File/Folder | Description |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 文件/文件夹名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
- en: '| `__init__.py` | Initializes our project and adds it to the `PYTHONPATH` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `__init__.py` | 初始化我们的项目并将其添加到 `PYTHONPATH` |'
- en: '| `server.py` | Invokes the application development server to startup. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `server.py` | 调用应用程序开发服务器以启动。 |'
- en: '| `survey/__init__.py` | Initializes our application and brings various components
    into one place. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `survey/__init__.py` | 初始化我们的应用程序并将各种组件集中在一起。 |'
- en: '| `survey/app.db` | A `sqlite3` file to store your data |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `survey/app.db` | 一个用于存储数据的 `sqlite3` 文件 |'
- en: '| `survey/models.py` | Defines the models of our application. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `survey/models.py` | 定义了我们应用程序的模型。 |'
- en: '| `survey/templates` | A place to put all the `Jinja2` templates. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `survey/templates` | 一个存放所有 `Jinja2` 模板的地方。 |'
- en: '| `survey/tests.py` | A file in which various test cases related to the app
    are written. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `survey/tests.py` | 一个包含与该应用相关的各种测试用例的文件。 |'
- en: '| `survey/views.py` | Defines the routes of your application. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `survey/views.py` | 定义了您应用程序的路由。 |'
- en: In our Survey application, `survey_project` is the project root. Now, let us
    create all the files and folders with respect to the above file structure and
    place the following contents in the `survey_project/__init__.py` file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的调查应用中，`survey_project` 是项目根目录。现在，让我们根据上述文件结构创建所有文件和文件夹，并将以下内容放置在 `survey_project/__init__.py`
    文件中。
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Building the application
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建应用程序
- en: 'Now, we will introduce you to all the functions of the `survey` application.
    The following is the detailed set of tasks our application is bound to:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将向您介绍`调查`应用的所有功能。以下是我们应用必须执行的一系列详细任务：
- en: Create survey questions
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建调查问题
- en: View list of all questions
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看所有问题列表
- en: View a specific question
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看特定问题
- en: Modify a question
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改问题
- en: Delete a question
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除一个问题
- en: Up-vote a question
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 投票支持一个问题
- en: 'Every question stores information related to a specific survey. The fields
    that a `Question` model (a single definitive source of information about the data)
    contains are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 每个问题都存储与特定调查相关的信息。`问题`模型（关于数据的单一确定信息来源）包含的字段如下：
- en: '`id`: A primary key to identify each question uniquely'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`: 用于唯一标识每个问题的主键'
- en: '`question_text`: Describes the survey'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`question_text`: 描述调查'
- en: '`number_of_yes_votes`: Stores the number of `''yes''` votes polled'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number_of_yes_votes`: 存储投票中 `''yes''` 的数量'
- en: '`number_of_no_votes`: Stores the number of `''no''` votes polled'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number_of_no_votes`: 存储被投票的 `''no''` 票数'
- en: '`number_of_maybe_votes`: Stores the number of `''maybe''` votes polled'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number_of_maybe_votes`: 存储了被调查的 `''maybe''` 票数'
- en: Now, let us start designing the resource holders, what we call URLs, for the
    previously mentioned tasks. These URLs need specific HTTP methods to communicate
    with the server.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始设计资源持有者，也就是我们所说的URL，用于之前提到的任务。这些URL需要特定的HTTP方法来与服务器进行通信。
- en: 'The following table throws a spotlight on how we are going to design the URLs:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格突出了我们将如何设计URL：
- en: '| Task | HTTP method | URL |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | HTTP 方法 | URL |'
- en: '| --- | --- | --- |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| List of all questions | `GET` | `http://[hostname:port]/` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 所有问题的列表 | `GET` | `http://[主机名:端口]/` |'
- en: '| Create a survey question | `POST` | `http://[hostname:port]/questions` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 创建调查问题 | `POST` | `http://[hostname:port]/questions` |'
- en: '| View a specific question | `GET` | `http://[hostname:port]/questions/[question_id]`
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 查看特定问题 | `GET` | `http://[hostname:port]/questions/[question_id]` |'
- en: '| Modify a question | `PUT` | `http://[hostname:port]/questions/[question_id]`
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 修改一个问题 | `PUT` | `http://[hostname:port]/questions/[question_id]` |'
- en: '| Delete a question | `DELETE` | `http://[hostname:port]/questions/[question_id]`
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 删除一个问题 | `DELETE` | `http://[hostname:port]/questions/[question_id]` |'
- en: '| Up-vote a question | `POST` | `http://[hostname:port]/questions/[question_id]/vote`
    |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 投票支持一个问题 | `POST` | `http://[hostname:port]/questions/[question_id]/vote`
    |'
- en: '| Up-vote a question form | `GET` | `http://[hostname:port]/questions/[question_id]/vote`
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 投票支持一个问题 | `GET` | `http://[hostname:port]/questions/[question_id]/vote`
    |'
- en: '| New question form | `GET` | `http://[hostname:port]/questions/new` |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 新问题表单 | `GET` | `http://[hostname:port]/questions/new` |'
- en: Writing models with Flask-SQLAlchemy
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Flask-SQLAlchemy 编写模型
- en: SQLAlchemy is a Python Object Relational Mapper (ORM) and a query toolkit to
    interact with various databases. It provides a set of utilities which includes
    a base class to represent the models and a set of helper classes and functions
    to represent a database.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 是一个 Python 对象关系映射器 (ORM) 以及一个用于与各种数据库交互的查询工具包。它提供了一套实用工具，包括一个基类来表示模型，以及一组辅助类和函数来表示数据库。
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A model is a logical representation of a table in a relational database which
    contains information about data.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 模型是关系数据库中表格的逻辑表示，其中包含有关数据的信息。
- en: Flask-SQLAlchemy is an extension to the Flask framework which adds support to
    SQLAlchemy.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-SQLAlchemy 是 Flask 框架的一个扩展，它增加了对 SQLAlchemy 的支持。
- en: Defining a model
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义一个模型
- en: 'While defining a model with Flask-SQLAlchemy, we need to keep the following
    three steps in mind:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Flask-SQLAlchemy 定义模型时，我们需要牢记以下三个步骤：
- en: Create a database instance.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建数据库实例。
- en: Define a model using the database instance created before.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用之前创建的数据库实例定义一个模型。
- en: Call a method in the database instance to create the tables in the database.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库实例中调用一个方法来创建数据库中的表。
- en: Creating a database instance
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据库实例
- en: In our application, we do need to create a database instance to store the data.
    For that, we need to configure the `'SQLALCHEMY_DATABASE_URI'` attribute in the
    WSGI application instance as shown in the following code. This code should be
    saved in the `survey/__init__.py` file.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们确实需要创建一个数据库实例来存储数据。为此，我们需要在WSGI应用程序实例中配置`'SQLALCHEMY_DATABASE_URI'`属性，如下面的代码所示。此代码应保存在`survey/__init__.py`文件中。
- en: '**__init__.py**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**__init__.py**'
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding lines of code, we created a WSGI application instance using
    the Flask's `Flask` class and configured the `'SQLALCHEMY_DATABASE_URI'` variable.
    Next, we created a database instance called `db` which is used to define models
    and to perform various queries.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码行中，我们使用 Flask 的 `Flask` 类创建了一个 WSGI 应用程序实例，并配置了 `'SQLALCHEMY_DATABASE_URI'`
    变量。接下来，我们创建了一个名为 `db` 的数据库实例，该实例用于定义模型和执行各种查询。
- en: Creating survey models
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建调查模型
- en: In order to store the data related to the `survey` application in the database,
    we should define a model called `Question`. This code lives in `survey/models.py`
    file.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在数据库中存储与`调查`应用相关的数据，我们应该定义一个名为`Question`的模型。这段代码位于`survey/models.py`文件中。
- en: '**models.py**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**models.py**'
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding code, we defined the `Question` model which extends from `db.Model`.
    It contains five fields to store the data related to a specific survey:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们定义了`Question`模型，它继承自`db.Model`。它包含五个字段来存储与特定调查相关的数据：
- en: '`id`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`'
- en: '`question_text`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`question_text`'
- en: '`number_of_yes_votes`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number_of_yes_votes`'
- en: '`number_of_no_votes`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number_of_no_votes`'
- en: '`number_of_maybe_votes`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number_of_maybe_votes`'
- en: 'Now let us go ahead and add a constructor method, which enables us to set the
    instance variables for the `Question` object that we created in the previous lines
    of code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续添加一个构造方法，这样我们就可以为之前代码行中创建的`Question`对象设置实例变量：
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding `__init__()` method takes the `Question` object and its values
    as parameters. Then, it will set the instance variables of the object that we
    passed.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的 `__init__()` 方法接收 `Question` 对象及其值作为参数。然后，它将设置我们传递的对象的实例变量。
- en: Now, we will create a method called `vote()` which increments the counter variables
    for the `'yes'`, `'no'` and `'maybe'` votes.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个名为 `vote()` 的方法，该方法将增加 `'yes'`、`'no'` 和 `'maybe'` 投票的计数器变量。
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding lines of code, we defined a `vote()` method, which takes the
    `Question` object as its first argument and the `vote_type` as its second argument.
    Based on the `vote_type` (`'yes'`, `'no'`, or `'maybe'`), the corresponding `number_of_<vote_type>_votes`
    of the `Question` object that we passed gets incremented.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码行中，我们定义了一个`vote()`方法，它接受`Question`对象作为其第一个参数，并将`vote_type`作为其第二个参数。根据`vote_type`（`'yes'`、`'no'`或`'maybe'`），我们传递的`Question`对象的相应`number_of_<vote_type>_votes`值会增加。
- en: Creating tables in the database
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在数据库中创建表格
- en: Now that we are done with defining the models related to our application using
    the database instance object called `db`, we need to create corresponding tables
    in the databases. For that, we need to call the method `create_all()`, which is
    present in the database instance — `db`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经使用名为 `db` 的数据库实例对象定义了与我们的应用程序相关的模型，接下来我们需要在数据库中创建相应的表。为此，我们需要调用存在于数据库实例——`db`
    中的 `create_all()` 方法。
- en: In our application, we generally call this function before invoking the server
    defined in `runserver.py` file.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用中，我们通常在调用`runserver.py`文件中定义的服务器之前调用这个函数。
- en: Querying database models
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询数据库模型
- en: Now, we have the database models ready. Let us query the data from the database
    using the SQLAlchemy's ORM. We'll perform the basic create, retrieve, update,
    and delete (CRUD) operations on our database instance — `db`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好了数据库模型。让我们使用 SQLAlchemy 的 ORM 从数据库中查询数据。我们将在我们的数据库实例 `db` 上执行基本的创建、检索、更新和删除（CRUD）操作。
- en: 'Before making queries, let us move to our project root directory and fire up
    the Python console to execute the following commands:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行查询之前，让我们先切换到我们的项目根目录，并启动 Python 控制台以执行以下命令：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, let us create a `Question` object in the database. Creating an object
    using SQLAlchemy''s ORM involves three essential steps as shown in the following
    code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在数据库中创建一个`问题`对象。使用 SQLAlchemy 的 ORM 创建对象涉及三个基本步骤，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can see that:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到：
- en: The first step creates a Python object for the model.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一步为模型创建一个 Python 对象。
- en: The next step adds the created Python object to the db's session.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一步是将创建的 Python 对象添加到数据库的会话中。
- en: The last step involves committing the object to the database.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一步是将对象提交到数据库中。
- en: 'Retrieving the objects from the database is very simple using the ORM. The
    following query retrieves all the objects from the database:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ORM从数据库中检索对象非常简单。以下查询从数据库中检索所有对象：
- en: '[PRE14]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We can also retrieve a model object from the database using its primary key.
    If we look at the `Question` model, we have a primary key with the column name
    `id`. Now, let us go ahead and access it.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用主键从数据库中检索模型对象。如果我们查看`Question`模型，我们有一个名为`id`的列作为主键。现在，让我们继续访问它。
- en: '[PRE15]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: It is time to vote a survey. Fetch the object with `id` value `1` and use its
    `vote()` method to increase the number of votes of that choice.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候投票进行调查了。获取`id`值为`1`的对象，并使用其`vote()`方法来增加该选项的投票数。
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let us learn how to delete a record from the database using the `db.session.delete()`
    method as shown in the following code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何使用`db.session.delete()`方法从数据库中删除记录，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you try to access the same object, it will result in the `None` value.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试访问相同的对象，它将导致`None`值。
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Views
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图
- en: A view is a Python function, which receives a web request and sends back a web
    response. The response of a view can be a simple string, web page, the content
    of a file, or anything. Whenever a Flask application gets a request from the client,
    it will look for a `view` function to service it. The view contains the business
    logic which is necessary to process a request.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是一个Python函数，它接收一个网络请求并返回一个网络响应。视图的响应可以是一个简单的字符串、网页、文件内容，或者任何东西。每当Flask应用程序从客户端接收到请求时，它都会寻找一个`视图`函数来处理它。视图包含处理请求所必需的业务逻辑。
- en: In the previous sections, we have created the necessary database models. Now,
    in this section, we will write the `view` functions. Let us create view for every
    resource we mentioned in the previous table, which throws spot light on how we
    are going to design the URLs. All the views should be created in the file `survey/views.py`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们已经创建了必要的数据库模型。现在，在本节中，我们将编写`视图`函数。让我们为前面表格中提到的每个资源创建视图，这将突出我们如何设计URL。所有视图都应该在文件`survey/views.py`中创建。
- en: List of all questions
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 所有问题的列表
- en: 'This view shows all the surveys that we have created in the database. The Flask
    application will invoke this view whenever the client requests the root of the
    application. Add the following code to the `survey/views.py` file:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图显示了数据库中我们创建的所有调查。每当客户端请求应用程序的根目录时，Flask应用程序将调用此视图。请将以下代码添加到`survey/views.py`文件中：
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `@app.route()` decorator maps the path `'/'` and the view function `home()`.
    The `home` view retrieves all the questions from the database using the SQLAlchemy
    ORM and renders a template named `'index.html'` using the `render_template` method.
    The `render_template` method takes the template name and a sequence of arguments
    to return a web page.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`@app.route()` 装饰器将路径 `''/''` 和视图函数 `home()` 进行映射。`home` 视图使用 SQLAlchemy ORM
    从数据库中检索所有问题，并通过 `render_template` 方法渲染名为 `''index.html''` 的模板。`render_template`
    方法接受模板名称和一系列参数，以返回一个网页。'
- en: New survey
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新调查
- en: 'This view returns an HTML web form to create a new survey question. This view
    is called when a user visits the path `/questions/new`. Add the following code
    to the `survey/views.py` file:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图返回一个HTML网页表单以创建新的调查问题。当用户访问路径`/questions/new`时调用此视图。将以下代码添加到`survey/views.py`文件中：
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Creating a new survey
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新的调查
- en: This view creates a new survey in the database and shows the list of available
    questions as a response. This is invoked by the Flask application, when a user
    submits a request to a URL containing `/questions`, using the `POST` method. The
    data to create a new question can be accessed within a view using the `request.form`
    dictionary.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图在数据库中创建一个新的调查，并显示可用的问题列表作为响应。这是由 Flask 应用程序调用的，当用户提交一个包含 `/questions` 的 URL
    的请求，并使用 `POST` 方法时。可以通过 `request.form` 字典在视图中访问创建新问题的数据。
- en: '[PRE21]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Displaying a survey
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展示调查
- en: 'This view shows the requested survey using the `question_id` argument passed
    in the URL. This view gets triggered when a user requests the path `''/questions/<question_id>''`
    with the HTTP `''GET''` verb:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图通过在URL中传递`question_id`参数来显示请求的调查。当用户使用HTTP的`'GET'`动词请求路径`'/questions/<question_id>'`时，此视图会被触发：
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Updating a survey
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新调查
- en: 'This view is used whenever a user wants to modify an existing question. This
    is invoked when a user submits the data to modify the `Question`. We can connect
    with this resource using HTTP''s `''PUT''` method at `''/questions/<question_id>''`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图用于用户想要修改现有问题时。当用户提交数据以修改`Question`时，会调用此视图。我们可以通过HTTP的`'PUT'`方法在`'/questions/<question_id>'`上连接到这个资源：
- en: '[PRE23]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Deleting a survey
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除一个调查
- en: This view is used to delete a specific survey from the database. The specific
    survey is identified based on the `question_id` value passed in the URL. The users
    can access this web page at `'/questions/<question_id>'` using the `'DELETE'`
    HTTP verb. Once the question gets deleted from the database, the user will be
    prompted with a message and a list of available questions.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图用于从数据库中删除特定的调查。特定的调查是根据URL中传递的`question_id`值来识别的。用户可以使用`'DELETE'` HTTP动词在`'/questions/<question_id>'`访问此网页。一旦问题从数据库中删除，用户将收到一条消息和可用问题的列表。
- en: '[PRE24]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: New vote form to caste a vote in a survey
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新投票表用于在调查中投票
- en: This view returns a web page containing a HTML form to vote a particular choice
    in a survey. It can be accessed at `'/questions/<question_id>/vote'`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图返回一个包含 HTML 表单的网页，用于在调查中对特定选项进行投票。它可以通过 `'/questions/<question_id>/vote'`
    访问。
- en: '[PRE25]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Casting a vote to a particular choice in a survey
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在调查中对某个特定选项进行投票
- en: This view is used to cast a new vote to a particular choice in a survey. The
    user has to submit the specific choice to the resource `'/questions/<question_id>/vote'`
    using the `'POST'` method. After the successful casting of a vote, the user is
    redirected to the survey details page.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图用于在调查中对特定选项投新票。用户必须使用 `'POST'` 方法将特定选项提交到资源 `'/questions/<question_id>/vote'`。在成功投票后，用户将被重定向到调查详情页面。
- en: '[PRE26]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Templates
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板
- en: A template is a simple text document which contains block tags or variables.
    **Flask micro-framework** makes use of the `Jinja2` template engine for rendering
    the HTML pages.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 模板是一个包含块标签或变量的简单文本文档。**Flask微框架**使用`Jinja2`模板引擎来渲染HTML页面。
- en: In our application, we use five different templates which includes a `base`
    template—`base.html`. This `base` template is a layout consisting of the common
    elements of all the templates. The four other templates (`index.html`, `show.html`,
    `vote.html` and `new.html`) make use of a concept called **template inheritance**
    provided by the `Jinja2` template engine. It is used to enable those common features
    to get showed up without a redundant code in every template.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用中，我们使用了五种不同的模板，其中包括一个`base`模板——`base.html`。这个`base`模板是一个由所有模板共同元素组成的布局。其他四个模板（`index.html`、`show.html`、`vote.html`和`new.html`）利用了`Jinja2`模板引擎提供的一个称为**模板继承**的概念。它用于使这些共同功能能够在每个模板中显示出来，而无需在每个模板中编写冗余的代码。
- en: The base template
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础模板
- en: 'This template is a skeleton for all the other templates. It contains a common
    navigation menu section and a placeholder to hold the primary content block of
    every page in this application. The `survey/templates/base.html` template will
    contain the following code:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板是所有其他模板的骨架。它包含一个通用的导航菜单部分，以及一个占位符，用于存放本应用中每个页面的主要内容块。`survey/templates/base.html`模板将包含以下代码：
- en: '[PRE27]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The list of questions template
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题列表模板
- en: 'As we need to show the list of questions in a web page, we iterate over the
    `questions` variable using a `for` loop tag and display all the vote counts of
    a specific survey. Add the following to the `survey/templates/index.html` file:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要在网页上展示问题列表，我们使用`for`循环标签遍历`questions`变量，并显示特定调查的所有投票数。请将以下内容添加到`survey/templates/index.html`文件中：
- en: '[PRE28]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Creating a new survey template
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新的调查模板
- en: 'To show an HTML form containing a new survey question, we defined a template
    called `survey/templates/new.html`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示包含一个新调查问题的 HTML 表单，我们定义了一个名为 `survey/templates/new.html` 的模板：
- en: '**new.html**'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**new.html**'
- en: '[PRE29]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Showing the details of a survey template
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展示调查模板的详细信息
- en: 'To display all the details of a survey, create a template in the following
    way. This template also includes a link to the `cast your vote` page. Add the
    following code to the `survey/templates/show.html` file:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示调查的所有详细信息，请按照以下方式创建模板。此模板还包括一个指向`投票`页面的链接。将以下代码添加到`survey/templates/show.html`文件中：
- en: '[PRE30]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Casting a vote template
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 投票模板
- en: 'To cast a vote, we need to display a web page containing a HTML form with a
    survey and its choices. Add the following code to the `survey/templates/vote.html`
    file:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要投票，我们需要显示一个包含带有调查及其选项的HTML表单的网页。将以下代码添加到`survey/templates/vote.html`文件中：
- en: '[PRE31]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Running the survey application
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行调查应用程序
- en: 'Hurray! We succeeded in creating an application which will allow the users
    to create a survey, retrieve a survey, update a survey, delete a survey, and cast
    the vote of a choice for a survey. Perform the following steps for running the
    server:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 欢呼！我们成功创建了一个应用程序，该应用程序将允许用户创建调查、检索调查、更新调查、删除调查，并为调查投出选择票。运行服务器请执行以下步骤：
- en: 'Before running the server, let us go ahead and fill the contents of `server.py`
    with the following code:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行服务器之前，让我们先给`server.py`文件填充以下代码：
- en: '[PRE32]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, let us run the application using the `runserver.py` script as shown in
    the following lines:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用`runserver.py`脚本运行应用程序，如下所示：
- en: '[PRE33]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now, the server is up and running. To access the application on a web browser,
    visit the URL—`http://127.0.0.1:5000/`.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，服务器已启动并运行。要在网页浏览器中访问应用程序，请访问以下网址—`http://127.0.0.1:5000/`.
- en: We are done!
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了！
- en: Writing unit tests to survey applications
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写单元测试以调查应用程序
- en: Creating an application without test cases is half done. Even though you take
    a lot of care while developing the application, there might be a chance of encountering
    errors at some point. Writing test cases will always leave us at a safe point.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个没有测试用例的应用程序就相当于完成了一半。即使你在开发应用程序时非常小心，也可能会在某些时候遇到错误。编写测试用例总能让我们处于一个安全的位置。
- en: 'In this section, we are going to write unit test cases for some tasks in our
    survey application. Add the following test case code to `survey/tests.py` file:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为我们的调查应用中的某些任务编写单元测试用例。将以下测试用例代码添加到`survey/tests.py`文件中：
- en: '[PRE34]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We can see the following from the preceding block of code:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从前面的代码块中看到以下内容：
- en: The initial lines of code import all the necessary modules into the memory.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码的初始行将所有必要的模块导入到内存中。
- en: The `setUp()` method in the `TestSurveyApp` drops all the existing tables and
    creates them for every test case.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TestSurveyApp` 中的 `setUp()` 方法会删除所有现有的表，并为每个测试用例创建它们。'
- en: The `test_defaults` test case will test the defaults of the `Question` object
    that was created. If the defaults do not match the expected inputs, the test case
    fails.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test_defaults` 测试用例将测试创建的 `Question` 对象的默认值。如果默认值与预期输入不匹配，则测试用例失败。'
- en: The `test_votes()` will up-vote a specific choice for a survey and test whether
    the voted choice gets incremented and other choices remain the same.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test_votes()` 函数会对调查中的某个特定选项进行点赞，并测试被点赞的选项是否增加，其他选项是否保持不变。'
- en: The `test_title()` will test whether the title of a response matches with the
    expected title. It uses the `BeautifulSoup` library to access the title from the
    response contents.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test_title()` 函数将测试响应标题是否与预期标题匹配。它使用 `BeautifulSoup` 库从响应内容中访问标题。'
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learnt about the Flask micro-framework and looked at the
    different features of Flask. We also set up a virtual environment using virtualenvwrapper,
    and created a web application using Flask, Flask-SQLAlchemy, and Jinja2\. Finally,
    we wrote unit tests for the developed application.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Flask 微型框架并了解了 Flask 的不同特性。我们还使用 virtualenvwrapper 设置了虚拟环境，并使用 Flask、Flask-SQLAlchemy
    和 Jinja2 创建了一个网络应用程序。最后，我们为开发的应用程序编写了单元测试。
