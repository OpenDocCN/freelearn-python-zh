- en: Chapter 2. Database Structure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 数据库结构
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Using model mixins
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模型混入
- en: Creating a model mixin with URL-related methods
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包含与URL相关方法的模型混入
- en: Creating a model mixin to handle creation and modification dates
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于处理创建和修改日期的模型混入
- en: Creating a model mixin to take care of meta tags
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于处理元标签的模型混入
- en: Creating a model mixin to handle generic relations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于处理通用关系的模型混入
- en: Handling multilingual fields
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理多语言字段
- en: Using migrations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用迁移
- en: Switching from South migrations to Django migrations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从South迁移切换到Django迁移
- en: Changing a foreign key to the many-to-many field
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将外键更改为多对多字段
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: When you start a new app, the first thing to do is create the models that represent
    your database structure. We are assuming that you have previously created Django
    apps or at least, you have read and understood the official Django tutorial. In
    this chapter, we will see a few interesting techniques that make your database
    structure consistent throughout different apps in your project. Then, we will
    see how to create custom model fields in order to handle internationalization
    of your data in the database. At the end of the chapter, we will see how to use
    migrations to change your database structure in the process of development.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当你启动一个新应用时，首先要做的是创建代表你的数据库结构的模型。我们假设你之前已经创建了Django应用，或者至少你已经阅读并理解了官方的Django教程。在本章中，我们将看到一些使你的项目中的不同应用保持数据库结构一致性的有趣技术。然后，我们将看到如何创建自定义模型字段，以便在数据库中处理数据的国际化。本章结束时，我们将看到如何使用迁移在开发过程中更改你的数据库结构。
- en: Using model mixins
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模型混入
- en: In object-oriented languages, such as Python, a mixin class can be viewed as
    an interface with implemented features. When a model extends a mixin, it implements
    the interface and includes all its fields, properties, and methods. Mixins in
    Django models can be used when you want to reuse the generic functionalities in
    different models multiple times.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象的语言，如Python中，混入类可以被视为一个具有实现功能的接口。当一个模型扩展混入时，它实现了该接口，并包括所有其字段、属性和方法。在Django模型中，当你想要在不同模型中多次重用通用功能时，可以使用混入。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First, you will need to create reusable mixins. Some typical examples of mixins
    are given later in this chapter. A good place to keep your model mixins is in
    the `utils` module.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要创建可重用的混入。本章后面将给出一些典型的混入示例。一个存放模型混入的好地方是在`utils`模块中。
- en: Tip
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you create a reusable app that you will share with others, keep the model
    mixins in the reusable app, for example, in the `base.py` file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你创建了一个将与他人共享的可重用应用，请将模型混入放在可重用应用中，例如在`base.py`文件中。
- en: How to do it…
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open the `models.py` file of any Django app, where you want to use the mixins
    and type the following code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你想要使用混入的任何Django应用的`models.py`文件，并输入以下代码：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Django model inheritance supports three types of inheritance: abstract base
    classes, multi-table inheritance, and proxy models. Model mixins are abstract
    model classes with specified fields, properties, and methods. When you create
    a model such as `Idea`, as shown in the preceding example, it inherits all the
    features from `UrlMixin`, `CreationModificationMixin`, and `MetaTagsMixin`. All
    the fields of the abstract classes are saved in the same database table as the
    fields of the extending model. In the following recipes, you will learn how to
    define your model mixins.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Django模型继承支持三种继承类型：抽象基类、多表继承和代理模型。模型混入是具有指定字段、属性和方法的抽象模型类。当你创建一个如`Idea`这样的模型时，如前例所示，它会继承来自`UrlMixin`、`CreationModificationMixin`和`MetaTagsMixin`的所有特性。所有抽象类的字段都保存在与扩展模型相同的数据库表中。在接下来的食谱中，你将学习如何定义你的模型混入。
- en: 'Note that we are using the `@python_2_unicode_compatible` decorator for our
    `Idea` model. As you might remember from the *Making your code compatible with
    both Python 2.7 and Python 3* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Django 1.8"), *Getting Started with Django 1.8*, it''s purpose is
    to make the `__str__()` method compatible with Unicode for both the following
    Python versions: 2.7 and 3.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们为`Idea`模型使用了`@python_2_unicode_compatible`装饰器。你可能还记得在[第一章](ch01.html "第一章
    Django 1.8入门")中“使你的代码兼容Python 2.7和Python 3”食谱中的内容，它的目的是使`__str__()`方法与Unicode兼容，适用于以下两个Python版本：2.7和3。
- en: There's more…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: To learn more about the different types of model inheritance, refer to the official
    Django documentation available at [https://docs.djangoproject.com/en/1.8/topics/db/models/#model-inheritance](https://docs.djangoproject.com/en/1.8/topics/db/models/#model-inheritance).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解不同类型的模型继承类型，请参考在[https://docs.djangoproject.com/en/1.8/topics/db/models/#model-inheritance](https://docs.djangoproject.com/en/1.8/topics/db/models/#model-inheritance)提供的官方
    Django 文档。
- en: See also
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Making your code compatible with both Python 2.7 and Python 3* recipe in
    [Chapter 1](ch01.html "Chapter 1. Getting Started with Django 1.8"), *Getting
    Started with Django 1.8*
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 1 章](ch01.html "第 1 章。开始使用 Django 1.8") 的 *使代码兼容 Python 2.7 和 Python 3*
    菜谱中，*开始使用 Django 1.8*
- en: The *Creating a model mixin with URL-related methods recipe*
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个具有 URL 相关方法的模型混入* 菜谱'
- en: The *Creating a model mixin to handle creation and modification dates* recipe
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个处理创建和修改日期的模型混入* 菜谱'
- en: The *Creating a model mixin to take care of meta tags* recipe
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个处理元标签的模型混入* 菜谱'
- en: Creating a model mixin with URL-related methods
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个具有 URL 相关方法的模型混入
- en: For every model that has its own page, it is good practice to define the `get_absolute_url()`
    method. This method can be used in templates and also in the Django admin site
    to preview the saved object. However, `get_absolute_url()` is ambiguous as it
    returns the URL path instead of the full URL. In this recipe, we will see how
    to create a model mixin that allows you to define either the URL path or the full
    URL by default, generate the other out of the box, and take care of the `get_absolute_url()`
    method that is being set.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个有自己的页面的模型，定义 `get_absolute_url()` 方法是一个好的实践。这个方法可以在模板中使用，也可以在 Django 管理站点中预览保存的对象。然而，`get_absolute_url()`
    是模糊的，因为它返回的是 URL 路径而不是完整的 URL。在这个菜谱中，我们将看到如何创建一个模型混入，允许你默认定义 URL 路径或完整 URL，并自动生成另一个，并处理正在设置的
    `get_absolute_url()` 方法。
- en: Getting ready
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you haven't done it yet, create the `utils` package to save your mixins.
    Then, create the `models.py` file in the `utils` package (alternatively, if you
    create a reusable app, put the mixins in the `base.py` file in your app).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，创建 `utils` 包以保存你的混入。然后，在 `utils` 包中创建 `models.py` 文件（或者，如果你创建了一个可重用的应用，将混入放在你的应用中的
    `base.py` 文件中）。
- en: How to do it…
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Execute the following steps one by one:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 依次执行以下步骤：
- en: 'Add the following content to the `models.py` file of your `utils` package:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到你的 `utils` 包的 `models.py` 文件中：
- en: '[PRE1]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To use the mixin in your app, import it from the `utils` package, inherit the
    mixin in your model class, and define the `get_url_path()` method as follows:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在你的应用中使用混入，从 `utils` 包中导入它，在你的模型类中继承混入，并定义 `get_url_path()` 方法如下：
- en: '[PRE2]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you check this code in the staging or production environment or run a local
    server with a different IP or port than the defaults, set `DEFAULT_WEBSITE_URL`
    in your local settings (without the trailing slash), as follows:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在这个代码的预发布或生产环境中进行检查，或者运行一个与默认 IP 或端口不同的本地服务器，请在你的本地设置中设置 `DEFAULT_WEBSITE_URL`（不带尾随斜杠），如下所示：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The `UrlMixin` class is an abstract model that has three methods: `get_url()`,
    `get_url_path()`, and `get_absolute_url()`. The `get_url()` or `get_url_path()`
    methods are expected to be overwritten in the extended model class, for example,
    `Idea`. You can define `get_url()`, which is the full URL of the object, and then
    `get_url_path()` will strip it to the path. You can also define `get_url_path()`,
    which is the absolute path of the object, and then `get_url()` will prepend the
    website URL to the beginning of the path. The `get_absolute_url()` method will
    mimic the `get_url_path()` method.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`UrlMixin` 类是一个具有三个方法：`get_url()`、`get_url_path()` 和 `get_absolute_url()` 的抽象模型。期望在扩展模型类（例如，`Idea`）中覆盖
    `get_url()` 或 `get_url_path()` 方法。你可以定义 `get_url()`，这是对象的完整 URL，然后 `get_url_path()`
    将将其剥离为路径。你也可以定义 `get_url_path()`，这是对象的绝对路径，然后 `get_url()` 将在路径的开头添加网站 URL。`get_absolute_url()`
    方法将模仿 `get_url_path()` 方法。'
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The rule of thumb is to always overwrite the `get_url_path()` method.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 常规做法是始终覆盖 `get_url_path()` 方法。
- en: In the templates, use `<a href="{{ idea.get_url_path }}">{{ idea.title }}</a>`
    when you need a link of an object in the same website. Use `<a href="{{ idea.get_url
    }}">{{ idea.title }}</a>` for the links in e-mails, RSS feeds, or APIs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板中，当你需要同一网站中对象的链接时，使用 `<a href="{{ idea.get_url_path }}">{{ idea.title }}</a>`。对于电子邮件、RSS
    源或 API 中的链接，使用 `<a href="{{ idea.get_url }}">{{ idea.title }}</a>`。
- en: The default `get_absolute_url()` method will be used in the Django model administration
    for the *View on site* functionality and might also be used by some third-party
    Django apps.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的`get_absolute_url()`方法将在Django模型管理中用于*网站视图*功能，也可能被一些第三方Django应用程序使用。
- en: See also
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Using model mixins* recipe
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用模型混入器*配方'
- en: The *Creating a model mixin to handle creation and modification dates* recipe
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个处理创建和修改日期的模型混入器*配方'
- en: The *Creating a model mixin to take care of meta tags* recipe
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个处理元标签的模型混入器*配方'
- en: The *Creating a model mixin to handle generic relations* recipe
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个处理通用关系的模型混入器*配方'
- en: Creating a model mixin to handle creation and modification dates
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个处理创建和修改日期的模型混入器
- en: It is a common behavior to have timestamps in your models for the creation and
    modification of your model instances. In this recipe, we will see how to create
    a simple model mixin that saves the creation and modification dates and times
    for your model. Using such a mixin will ensure that all the models use the same
    field names for the timestamps and have the same behavior.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型实例的创建和修改中包含时间戳是一种常见的行为。在这个配方中，我们将看到如何创建一个简单的模型混入器，用于保存模型的创建和修改日期和时间。使用这样的混入器将确保所有模型使用相同的字段名来存储时间戳，并且具有相同的行为。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you haven't done this yet, create the `utils` package to save your mixins.
    Then, create the `models.py` file in the `utils` package.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，创建`utils`包以保存你的混入器。然后，在`utils`包中创建`models.py`文件。
- en: How to do it…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Open the `models.py` file of your `utils` package and insert the following
    content there:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的`utils`包中的`models.py`文件，并在其中插入以下内容：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `CreationModificationDateMixin` class is an abstract model, which means
    that extending model classes will create all the fields in the same database table,
    that is, there will be no one-to-one relationships that make the table difficult
    to handle. This mixin has two date-time fields and the `save()` method that will
    be called when saving the extended model. The `save()` method checks whether the
    model has no primary key, which is the case of a new not-yet-saved instance. In
    this case, it sets the creation date to the current date and time. If the primary
    key exists, the modification date is set to the current date and time.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`CreationModificationDateMixin`类是一个抽象模型，这意味着扩展模型类将在同一个数据库表中创建所有字段，也就是说，不会有导致表难以处理的一对一关系。这个混入器有两个日期时间字段和一个在保存扩展模型时将被调用的`save()`方法。`save()`方法检查模型是否有主键，这是新未保存实例的情况。在这种情况下，它将创建日期设置为当前日期和时间。如果存在主键，则将修改日期设置为当前日期和时间。'
- en: Alternatively, instead of the `save()` method, you can use the `auto_now_add`
    and `auto_now` attributes for the created and modified fields, which will add
    creation and modification timestamps automatically.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 作为替代，除了`save()`方法之外，你还可以为创建和修改字段使用`auto_now_add`和`auto_now`属性，这将自动添加创建和修改时间戳。
- en: See also
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Using model mixins* recipe
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用模型混入器*配方'
- en: The *Creating a model mixin to take care of meta tags* recipe
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个处理元标签的模型混入器*配方'
- en: The *Creating a model mixin to handle generic relations* recipe
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个处理通用关系的模型混入器*配方'
- en: Creating a model mixin to take care of meta tags
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个处理元标签的模型混入器
- en: If you want to optimize your site for search engines, you need to not only set
    the semantic markup for each page but also the appropriate meta tags. For maximum
    flexibility, you need to have a way to define specific meta tags for each object,
    which has its own page on your website. In this recipe, we will see how to create
    a model mixin for the fields and methods related to the meta tags.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要优化你的网站以适应搜索引擎，你不仅需要为每个页面设置语义标记，还需要设置适当的元标签。为了获得最大的灵活性，你需要有一种方法来为每个对象定义特定的元标签，每个对象在你的网站上都有自己的页面。在这个配方中，我们将看到如何创建与元标签相关的字段和方法模型混入器。
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As seen in the previous recipes, make sure that you have the `utils` package
    for your mixins. Open the `models.py` file from this package in your favorite
    editor.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几个配方所示，确保你有用于混入器的`utils`包。在你的首选编辑器中打开此包的`models.py`文件。
- en: How to do it…
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Put the following content in the `models.py` file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容放入`models.py`文件中：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This mixin adds four fields to the model that extends from it: `meta_keywords`,
    `meta_description`, `meta_author`, and `meta_copyright`. The methods to render
    the meta tags in HTML are also added.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此混入为其扩展的模型添加了四个字段：`meta_keywords`、`meta_description`、`meta_author`和`meta_copyright`。还添加了在HTML中渲染元标签的方法。
- en: 'If you use this mixin in a model such as `Idea`, which is shown in the first
    recipe of this chapter, then you can put the following in the `HEAD` section of
    your detail page template to render all the meta tags:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在如`Idea`这样的模型中使用此混入，该模型在本章的第一个菜谱中展示，那么您可以在您的详情页模板的`HEAD`部分放入以下内容以渲染所有元标签：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can also render a specific meta tag using the following line:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用以下行来渲染特定的元标签：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you may have noticed from the code snippet, the rendered meta tags are marked
    as safe, that is, they are not escaped and we don't need to use the safe template
    filter. Only the values that come from the database are escaped in order to guarantee
    that the final HTML is well-formed.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从代码片段中注意到的，渲染的元标签被标记为安全，即它们没有被转义，我们不需要使用安全模板过滤器。只有来自数据库的值被转义，以确保最终的HTML格式正确。
- en: See also
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using model mixins* recipe
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用模型混入* 菜谱'
- en: The *Creating a model mixin to handle creation and modification dates* recipe
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个处理创建和修改日期的模型混入* 菜谱'
- en: The *Creating a model mixin to handle generic relations* recipe
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个处理通用关系的模型混入* 菜谱'
- en: Creating a model mixin to handle generic relations
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个处理通用关系的模型混入
- en: Besides normal database relationships such as a foreign-key relationship or
    many-to-many relationship, Django has a mechanism to relate a model to an instance
    of any other model. This concept is called generic relations. For each generic
    relation, there is a content type of the related model that is saved as well as
    the ID of the instance of this model.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除了外键关系或多对多关系等常规数据库关系之外，Django还有一个将模型与任何其他模型的实例相关联的机制。这个概念被称为通用关系。对于每个通用关系，都有一个保存的相关模型的类型以及该模型实例的ID。
- en: In this recipe, we will see how to generalize the creation of generic relations
    in the model mixins.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何在模型混入中泛化通用关系的创建。
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe to work, you need to have the `contenttypes` app installed.
    It should be in the `INSTALLED_APPS` directory by default, as shown in the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个菜谱工作，您需要安装`contenttypes`应用。默认情况下，它应该在`INSTALLED_APPS`目录中，如下所示：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Again, make sure that you have the `utils` package for your model mixins already
    created.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 再次确保您已经为您模型混入创建了`utils`包。
- en: How to do it…
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Open the `models.py` file in the `utils` package in a text editor and insert
    the following content there:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`utils`包中的`models.py`文件，并插入以下内容：
- en: '[PRE9]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following is an example of how to use two generic relationships in your
    app (put this code in `demo_app/models.py`), as shown in the following:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是如何在您的应用中使用两个通用关系的一个示例（将此代码放入`demo_app/models.py`），如下所示：
- en: '[PRE10]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As you can see, this snippet is more complex than the previous ones. The `object_relation_mixin_factory`
    object is not a mixin itself; it is a function that generates a model mixin, that
    is, an abstract model class to extend from. The dynamically created mixin adds
    the `content_type` and `object_id` fields and the `content_object` generic foreign
    key that points to the related instance.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这个片段比之前的更复杂。`object_relation_mixin_factory`对象本身不是一个混入；它是一个生成模型混入的函数，即一个可以从中扩展的抽象模型类。动态创建的混入添加了`content_type`和`object_id`字段以及指向相关实例的`content_object`通用外键。
- en: Why couldn't we just define a simple model mixin with these three attributes?
    A dynamically generated abstract class allows us to have prefixes for each field
    name; therefore, we can have more than one generic relation in the same model.
    For example, the `Like` model, which was shown previously, will have the `content_type`,
    `object_id`, and `content_object` fields for the favorite object and `owner_content_type`,
    `owner_object_id`, and `owner_content_object` for the one (user or institution)
    who liked the object.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们不能只定义一个包含这三个属性的简单模型混入呢？一个动态生成的抽象类允许我们为每个字段名设置前缀；因此，我们可以在同一个模型中拥有多个通用关系。例如，之前展示的`Like`模型将为喜欢的对象添加`content_type`、`object_id`和`content_object`字段，以及为喜欢该对象的（用户或机构）添加`owner_content_type`、`owner_object_id`和`owner_content_object`字段。
- en: The `object_relation_mixin_factory()` function adds a possibility to limit the
    content type choices by the `limit_content_type_choices_to` parameter. The preceding
    example limits the choices for `owner_content_type` only to the content types
    of the `User` and `Institution` models. Also, there is the `limit_object_choices_to`
    parameter that can be used by custom form validation to limit the generic relations
    only to specific objects, for example, the objects with published status.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`object_relation_mixin_factory()` 函数通过 `limit_content_type_choices_to` 参数添加了限制内容类型选择的可能性。前面的例子仅将
    `owner_content_type` 的选择限制为 `User` 和 `Institution` 模型的内容类型。此外，还有一个 `limit_object_choices_to`
    参数，可以用于自定义表单验证，仅将通用关系限制为特定对象，例如具有发布状态的对象。'
- en: See also
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a model mixin with URL-related methods* recipe
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个包含与URL相关方法的模型混入器* 的配方'
- en: The *Creating a model mixin to handle creation and modification dates* recipe
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个用于处理创建和修改日期的模型混入器* 的配方'
- en: The *Creating a model mixin to take care of meta tags* recipe
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个用于处理元标签的模型混入器* 的配方'
- en: The *Implementing the Like widget* recipe in [Chapter 4](ch04.html "Chapter 4. Templates
    and JavaScript"), *Templates and JavaScript*
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章。模板和JavaScript") *模板和JavaScript* 中实现 *实现Like小部件* 的配方
- en: Handling multilingual fields
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理多语言字段
- en: Django uses the internationalization mechanism to translate verbose strings
    in the code and templates. However, it's up to the developer to decide how to
    implement the multilingual content in the models. There are several third-party
    modules that handle translatable model fields; however, I prefer the simple solution
    that will be introduced to you in this recipe.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Django使用国际化机制来翻译代码和模板中的冗长字符串。然而，开发者需要决定如何在模型中实现多语言内容。有几个第三方模块可以处理可翻译的模型字段；然而，我更喜欢在本配方中向您介绍的这个简单解决方案。
- en: 'The advantages of the approach that you will learn about are as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您将了解的方法的优点如下：
- en: It is straightforward to define multilingual fields in the database
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据库中定义多语言字段非常直接
- en: It is simple to use the multilingual fields in database queries
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据库查询中使用多语言字段非常简单
- en: You can use contributed administration to edit models with the multilingual
    fields without additional modifications
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用贡献的行政功能编辑具有多语言字段的模型，而无需额外修改
- en: If you need it, you can easily show all the translations of an object in the
    same template
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要，您可以在同一模板中轻松显示一个对象的全部翻译
- en: You can use database migrations to add or remove languages
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用数据库迁移来添加或删除语言
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Do you have the `utils` package created? You will now need a new `fields.py`
    file for the custom model fields there.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经创建了 `utils` 包吗？您现在需要为那里的自定义模型字段创建一个新的 `fields.py` 文件。
- en: How to do it…
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Execute the following steps to define the multilingual character field and
    multilingual text field:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以定义多语言字符字段和多语言文本字段：
- en: 'Open the `fields.py` file and create the multilingual character field as follows:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `fields.py` 文件，并按照以下方式创建多语言字符字段：
- en: '[PRE11]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the same file, add an analogous multilingual text field. The differing parts
    are highlighted in the following code:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件中，添加一个类似的多语言文本字段。以下代码中突出显示了不同的部分：
- en: '[PRE12]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we''ll consider an example of how to use the multilingual fields in your
    app, as shown in the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将考虑一个如何在您的应用程序中使用多语言字段的示例，如下所示：
- en: 'First, set multiple languages in your settings:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在您的设置中设置多种语言：
- en: '[PRE13]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, create the multilingual fields for your model, as follows:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，按照以下方式为您的模型创建多语言字段：
- en: '[PRE14]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works…
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The example of `Idea` will create a model that is similar to the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`Idea` 的示例将创建一个类似于以下模型的模型：'
- en: '[PRE15]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In addition to this, there will be two properties: `title` and `description`
    that will return the title and description in the currently active language.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还将有两个属性：`title` 和 `description`，它们将返回当前活动语言中的标题和描述。
- en: The `MultilingualCharField` and `MultilingualTextField` fields will juggle the
    model fields dynamically, depending on your `LANGUAGES` setting. They will overwrite
    the `contribute_to_class()` method that is used when the Django framework creates
    the model classes. The multilingual fields dynamically add character or text fields
    for each language of the project. Also, the properties are created in order to
    return the translated value of the currently active language or the main language
    by default.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`MultilingualCharField`和`MultilingualTextField`字段会根据你的`LANGUAGES`设置动态处理模型字段。它们将覆盖Django框架创建模型类时使用的`contribute_to_class()`方法。多语言字段会为项目的每种语言动态添加字符或文本字段。此外，还会创建属性以返回当前活动语言或默认的主语言的翻译值。'
- en: 'For example, you can have the following in the template:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以在模板中有以下内容：
- en: '[PRE16]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will show the text in English, German, French, or Lithuanian, depending
    on the currently selected language. However, it will fall back to English if the
    translation doesn't exist.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这将根据当前选定的语言显示英文、德语、法语或立陶宛语文本。然而，如果翻译不存在，它将回退到英文。
- en: 'Here is another example. If you want to have your `QuerySet` ordered by the
    translated titles in the view, you can define it as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个例子。如果你想在视图中按翻译标题对`QuerySet`进行排序，你可以定义如下：
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Using migrations
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用迁移
- en: It is not true that once you have created your database structure, it won't
    change in the future. As development happens iteratively, you can get updates
    on the business requirements in the development process and you will need to perform
    database schema changes along the way. With the Django migrations, you don't need
    to change the database tables and fields manually, as most of it is done automatically
    using the command-line interface.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 并非一旦创建了你的数据库结构，它就不会在未来改变。随着开发的迭代进行，你可以在开发过程中获取业务需求更新，并且你将需要在过程中执行数据库模式更改。使用Django迁移，你不需要手动更改数据库表和字段，因为大部分操作都是通过命令行界面自动完成的。
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Activate your virtual environment in the command-line tool.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行工具中激活你的虚拟环境。
- en: How to do it…
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To create the database migrations, take a look at the following steps:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建数据库迁移，请查看以下步骤：
- en: 'When you create models in your new `demo_app` app, you need to create an initial
    migration that will create the database tables for your app. This can be done
    using the following command:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在新的`demo_app`应用中创建模型时，你需要创建一个初始迁移，这将为你应用创建数据库表。这可以通过以下命令完成：
- en: '[PRE18]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The first time that you want to create all the tables for your project, run
    the following command:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次创建项目所有表时，运行以下命令：
- en: '[PRE19]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: It executes the usual database synchronization for all apps that have no database
    migrations, and in addition to this, it migrates all apps that have the migrations
    set. Also, run this command when you want to execute the new migrations for all
    your apps.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它执行所有没有数据库迁移的应用的常规数据库同步，并且除了这个之外，它还会迁移所有设置了迁移的应用。此外，当你想要执行所有应用的新的迁移时，也要运行此命令。
- en: 'If you want to execute the migrations for a specific app, run the following
    command:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要执行特定应用的迁移，运行以下命令：
- en: '[PRE20]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you make some changes in the database schema, you have to create a migration
    for that schema. For example, if we add a new subtitle field to the `Idea` model,
    we can create the migration using the following command:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你修改了数据库模式，你必须为该模式创建一个迁移。例如，如果我们向`Idea`模型添加一个新的子标题字段，我们可以使用以下命令创建迁移：
- en: '[PRE21]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To create a data migration that modifies the data in the database table, we
    can use the following command:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个修改数据库表中数据的迁移，我们可以使用以下命令：
- en: '[PRE22]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This creates a skeleton data migration, which you need to modify and add data
    manipulation to it before applying.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建一个数据迁移框架，你需要修改并添加数据操作到它之前应用。
- en: 'To list all the available applied and unapplied migrations, run the following
    command:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出所有可用已应用和未应用的迁移，运行以下命令：
- en: '[PRE23]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The applied migrations will be listed with a `[X]` prefix.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已应用的迁移将带有`[X]`前缀。
- en: 'To list all the available migrations for a specific app, run the following
    command:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出特定应用的可用迁移，运行以下命令：
- en: '[PRE24]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works…
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Django migrations are instruction files for the database migration mechanism.
    The instruction files inform us which database tables to create or remove; which
    fields to add or remove; and which data to insert, update, or delete.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Django迁移是数据库迁移机制的指令文件。指令文件告诉我们哪些数据库表需要创建或删除；哪些字段需要添加或删除；以及哪些数据需要插入、更新或删除。
- en: There are two types of migrations in Django. One is schema migration and the
    other is data migration. Schema migration should be created when you add new models,
    or add or remove fields. Data migration should be used when you want to fill the
    database with some values or massively delete values from the database. Data migrations
    should be created using a command in the command-line tool and then programmed
    in the migration file. Migrations for each app are saved in their `migrations`
    directories. The first migration will be usually called `0001_initial.py`, and
    the other migrations in our example app will be called `0002_subtitle_added.py`
    and `0003_populate_subtitle.py`. Each migration gets a number prefix that is automatically
    incremented. For each migration that is executed, there is an entry that is saved
    in the `django_migrations` database table.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Django中有两种类型的迁移。一种是模式迁移，另一种是数据迁移。在添加新模型或添加或删除字段时应该创建模式迁移。当你想向数据库中填充一些值或从数据库中大量删除值时，应该使用数据迁移。数据迁移应该使用命令行工具中的命令创建，然后在迁移文件中编程。每个应用的迁移都保存在它们的`migrations`目录中。第一个迁移通常被称为`0001_initial.py`，我们示例应用中的其他迁移将被称为`0002_subtitle_added.py`和`0003_populate_subtitle.py`。每个迁移都有一个自动递增的数字前缀。对于每个执行的迁移，都会在`django_migrations`数据库表中保存一个条目。
- en: 'It is possible to migrate back and forth by specifying the number of the migration
    to which we want to migrate to, as shown in the following:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过指定我们想要迁移到的迁移编号来回迁移，如下所示：
- en: '[PRE25]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you want to undo all the migrations for a specific app, you can do so using
    the following command:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要撤销特定应用的全部迁移，可以使用以下命令：
- en: '[PRE26]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Tip
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Do not commit your migrations to version control until you have tested the forward
    and backward migration process and you are sure that they will work well in other
    development and public website environments.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试了前向和反向迁移过程并且确定它们将在其他开发和公共网站环境中良好工作之前，不要将迁移提交到版本控制。
- en: See also
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Handling project dependencies with pip and Including external dependencies
    in your project* recipes in [Chapter 1](ch01.html "Chapter 1. Getting Started
    with Django 1.8"), *Getting Started with Django 1.8*
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。Django 1.8入门")中的*使用pip处理项目依赖和将外部依赖包含在你的项目中*食谱，*Django
    1.8入门*'
- en: The *Changing a foreign key to the many-to-many field* recipe
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将外键更改为多对多字段*食谱'
- en: Switching from South migrations to Django migrations
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从South迁移切换到Django迁移
- en: If you, like me, have been using Django since before database migrations existed
    in the core functionality, that is, before Django 1.7; you have, more than likely,
    used third-party South migrations before. In this recipe, you will learn how to
    switch your project from South migrations to Django migrations.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你像我一样，自从Django核心功能中存在数据库迁移之前（即，在Django 1.7之前）就开始使用Django，那么你很可能之前已经使用过第三方South迁移。在这个食谱中，你将学习如何将你的项目从South迁移切换到Django迁移。
- en: Getting ready
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure that all apps and their South migrations are up to date.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 确保所有应用及其South迁移都是最新的。
- en: How to do it…
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Execute the following steps:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Migrate all your apps to the latest South migrations, as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有应用迁移到最新的South迁移，如下所示：
- en: '[PRE27]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Remove `south` from `INSTALLED_APPS` in the settings.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置中将`south`从`INSTALLED_APPS`中移除。
- en: For each app with South migrations, delete the migration files and only leave
    the `migrations` directories.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个有South迁移的应用，删除迁移文件，只留下`migrations`目录。
- en: 'Create new migration files with the following command:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建新的迁移文件：
- en: '[PRE28]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Fake the initial Django migrations as the database schema has already been
    set correctly:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于数据库模式已经正确设置，可以伪造初始Django迁移：
- en: '[PRE29]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you have any circular foreign keys in the apps (that is, two models in different
    apps pointing to each other with a foreign key or many-to-many relation), separately
    apply the fake initial migrations to these apps:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的应用中存在任何循环外键（即，不同应用中的两个模型通过外键或多对多关系相互指向），请分别对这些应用应用假初始迁移：
- en: '[PRE30]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works…
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: There is no conflict in the database when switching to the new way of dealing
    with the database schema changes as the South migration history is saved in the
    `south_migrationhistory` database table; whereas, the Django migration history
    is saved in the `django_migrations` database table. The only problem are the migration
    files that have different syntax and, therefore, the South migrations need to
    be completely replaced with the Django migrations.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在切换到处理数据库模式更改的新方式时，数据库中没有冲突，因为 South 迁移历史保存在 `south_migrationhistory` 数据库表中；而
    Django 迁移历史保存在 `django_migrations` 数据库表中。唯一的问题是具有不同语法的迁移文件，因此需要将 South 迁移完全替换为
    Django 迁移。
- en: Therefore, at first, we delete the South migration files. Then, the `makemigrations`
    command recognizes the empty `migrations` directories and creates new initial
    Django migrations for each app. Once these migrations are faked, the further Django
    migrations can be created and applied.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先，我们删除 South 迁移文件。然后，`makemigrations` 命令识别空的 `migrations` 目录并为每个应用创建新的初始
    Django 迁移。一旦这些迁移被伪造，就可以创建并应用进一步的 Django 迁移。
- en: See also
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using migrations* recipe
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用迁移* 配方'
- en: The *Changing a foreign key to the many-to-many field* recipe
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将外键更改为多对多字段* 的配方'
- en: Changing a foreign key to the many-to-many field
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将外键更改为多对多字段
- en: This recipe is a practical example of how to change a many-to-one relation to
    many-to-many relation, while preserving the already existing data. We will use
    both schema and data migrations for this situation.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方是一个实际示例，说明如何在保留已存在数据的情况下将多对一关系更改为多对多关系。我们将为此情况使用模式和数据迁移。
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let''s consider that you have the `Idea` model with a foreign key pointing
    to the `Category` model, as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个 `Idea` 模型，其中有一个指向 `Category` 模型的外键，如下所示：
- en: '[PRE31]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The initial migration should be created and executed using the following commands:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 应使用以下命令创建和执行初始迁移：
- en: '[PRE32]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How to do it…
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'The following steps will teach you how to switch from a foreign key relation
    to many-to-many relation, while preserving the already existing data:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导您如何从外键关系到多对多关系进行切换，同时保留已存在的数据：
- en: 'Add a new many-to-many field called `categories`, as follows:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `categories` 的新多对多字段，如下所示：
- en: '[PRE33]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create and run a schema migration in order to add the new field to the database,
    as shown in the following:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将新字段添加到数据库中，请创建并运行一个模式迁移，如下所示：
- en: '[PRE34]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a data migration to copy categories from the foreign key to the many-to-many
    field, as follows:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个数据迁移，将类别从外键复制到多对多字段，如下所示：
- en: '[PRE35]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Open the newly created migration file (`demo_app/migrations/0003_copy_categories.py`)
    and define the forward migration instructions, as shown in the following:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开新创建的迁移文件 (`demo_app/migrations/0003_copy_categories.py`) 并定义正向迁移指令，如下所示：
- en: '[PRE36]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Run the following data migration:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下数据迁移：
- en: '[PRE37]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Delete the foreign key field `category` in the `models.py` file:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `models.py` 文件中删除外键字段 `category`：
- en: '[PRE38]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Create and run a schema migration in order to delete the categories field from
    the database table, as follows:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并运行一个模式迁移，以从数据库表中删除 `categories` 字段，如下所示：
- en: '[PRE39]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How it works…
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: At first, we add a new many-to-many field to the `Idea` model. Then, we copy
    the existing relations from a foreign key relation to the many-to-many relation.
    Lastly, we remove the foreign key relation.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在 `Idea` 模型中添加一个新的多对多字段。然后，我们将现有关系从外键关系到多对多关系复制。最后，我们移除外键关系。
- en: See also
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using migrations* recipe
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用迁移* 配方'
- en: The *Switching from South migrations to Django migrations* recipe
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从 South 迁移切换到 Django 迁移* 配方'
