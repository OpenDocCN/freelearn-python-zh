- en: Indexing different kinds of objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引不同类型的对象
- en: So far, we can search the title and description fields of the `Project` class
    and nothing more. Both lists and items have a description field as well, so it
    would be nice if the simple search query we are using could also look inside lists
    and their items.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只能搜索`Project`类的标题和描述字段，没有更多。列表和项目也有描述字段，所以如果我们的简单搜索查询也能在列表及其项目内部进行搜索，那就很好了。
- en: 'Right now, we are using `IProject` as the context for the search. The `context`
    class annotation does not accept more than one parameter, so we can''t just pass
    `ITodoList` and `ITodoItem` and be done. Here is where the concept of interfaces
    can shine. We can define a general search interface and make all of our objects
    implement it. They don''t even need to provide every attribute:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们使用`IProject`作为搜索的上下文。`context`类注解不接受超过一个参数，所以我们不能只是传递`ITodoList`和`ITodoItem`就完成了。这正是接口概念可以发挥作用的地方。我们可以定义一个通用的搜索接口，并让所有我们的对象实现它。它们甚至不需要提供每个属性：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice how instead of using a schema for the attribute definition, we simply
    use the `Attribute` class from the `interface` package. We are not going to generate
    forms from this interface and it is easy to just describe its attributes without
    worrying about field properties.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们不是使用模式来定义属性，而是简单地使用`interface`包中的`Attribute`类。我们不会从这个接口生成表单，因此只需描述其属性而无需担心字段属性即可轻松完成。
- en: 'Once we define this interface and include all of the attributes that we want
    to be indexed in the catalog, we just declare that every model implements it.
    For example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了这个接口，并将我们希望在目录中索引的所有属性包含在内，我们只需声明每个模型实现它即可。例如：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then, we replace the `context` annotation argument to use it as well. This is
    very powerful, and means that any of the objects that declare themselves to be
    searchable via the `grok.implements(ISearchable)` class annotation will be automatically
    indexed by Grok, or the call to `catalog.searchResults` will take them into account.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将`context`注解参数替换掉，以便也能使用它。这非常强大，意味着任何通过`grok.implements(ISearchable)`类注解声明自己可搜索的对象都将被Grok自动索引，或者`catalog.searchResults`的调用将考虑它们。
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice how we use `ISearchable` as context now and also create all of the remaining
    indexes that we could use. As these indexes will contain references to different
    kinds of models, we add a `content_type` attribute to each model to hold the kind
    of model it represents. As an example, here is the improved `TodoList` class definition.
    We add `ISearchable` to the `grok.implements` declaration, and that's enough to
    make our search view work with todo items as well as projects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们现在使用`ISearchable`作为上下文，并创建了所有剩余的我们可以使用的索引。由于这些索引将包含对不同类型模型的引用，我们在每个模型中添加了一个`content_type`属性来保存它所代表的模型类型。例如，以下是改进的`TodoList`类定义。我们将`ISearchable`添加到`grok.implements`声明中，这样我们的搜索视图就可以同时处理待办事项和项目。
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Again, we are implementing `ISearchable,` which marks the `TodoList` model indexable.
    Then we define `content_type` with the value `list`, so that when a search result
    has multiple types of objects, we can find out if one of them is a list just by
    looking at this attribute. Notice how the rest of the metadata attributes are
    now assigned some value at creation time, via the `__init__` method, so that the
    result display is complete.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们实现了`ISearchable`，这标志着`TodoList`模型可索引。然后我们定义`content_type`为`list`，这样当搜索结果包含多种类型的对象时，我们可以通过查看此属性来找出其中是否有一个是列表。注意，其余的元数据属性现在在创建时通过`__init__`方法分配了一些值，以便结果显示完整。
- en: Finally, the `searchableText` method for full text searches is defined. In this
    case, the code is the same as for the method of the same name in the `Project`
    class, but it could be different, as indeed it is in the `TodoItem` class, which
    is not shown here.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，定义了全文搜索的`searchableText`方法。在这种情况下，代码与`Project`类中同名方法的代码相同，但它可能不同，正如在未在此处显示的`TodoItem`类中所示。
- en: The catalog admin UI
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录管理界面
- en: When your catalog begins to grow, it can be useful to find out how many objects
    it has and how populated each index is. Grok includes a package for performing
    simple introspection into the catalog, which allows us to take a look inside.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的目录开始增长时，找出它有多少对象以及每个索引的填充情况可能很有用。Grok包含一个用于对目录进行简单内省的包，这允许我们查看内部情况。
- en: 'The catalog UI is not integrated into the Grok admin UI. However, we can still
    access the catalog from the Zope side by using a direct URL. Let''s do that. Create
    some projects and lists in the `todo` application and then point your browser
    to: `http://localhost:8080/todo/++etc++site/Catalog/@@advanced.html`. The list
    of project indexes will appear in the browser, along with some statistics, as
    shown in the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 目录UI未集成到Grok管理UI中。但是，我们可以通过使用直接URL从Zope端访问目录。让我们这样做。在`todo`应用程序中创建一些项目和列表，然后通过浏览器访问：`http://localhost:8080/todo/++etc++site/Catalog/@@advanced.html`。浏览器中会显示项目索引列表和一些统计数据，如下面的截图所示：
- en: '![The catalog admin UI](img/7481_06_03.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![目录管理UI](img/7481_06_03.jpg)'
- en: This is the statistics screen of the catalog UI, so we can't do much more here
    than take a look at the numbers, but it does give us a good sense of how our application
    data is stored in the catalog.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是目录UI的统计屏幕，所以我们在这里不能做太多，除了查看数字，但它确实让我们对我们的应用程序数据在目录中的存储有了很好的认识。
- en: There are other tabs, the most important of which is the **Contents** tab, from
    where we can visit the information screens for each of the indexes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有其他标签页，其中最重要的是**内容**标签页，从这里我们可以访问每个索引的信息屏幕。
- en: Types of indexes
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引类型
- en: As we can see from the code of the `ProjectIndexes` class, there is more than
    one kind of index. So far, we have worked with a `text` index, which allows us
    to make full-text searches. However, not all searches are equal; text searches
    allow us to look for words or even fragments of words inside a field value, but
    there are cases where we would need to match a field value exactly or return no
    match at all.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们从`ProjectIndexes`类的代码中可以看到，存在多种索引类型。到目前为止，我们已经使用了一个`文本`索引，它允许我们进行全文搜索。然而，并非所有搜索都是平等的；文本搜索允许我们在字段值内部查找单词或单词片段，但在某些情况下，我们需要精确匹配字段值或完全不匹配。
- en: 'Grok offers three ready-to-use index classes, which are summarized in the following
    table:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Grok提供了三个现成的索引类，以下表格中进行了总结：
- en: '| Index | Description |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 索引 | 描述 |'
- en: '| --- | --- |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Field` | Matches against an entire field. Used for indexing orderable values
    and querying for a range. Supports sorting and limiting the number of results.
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `字段` | 与整个字段匹配。用于索引可排序的值和查询范围。支持排序和限制结果数量。|'
- en: '| `Text` | Supports full-text searches of a field. Queries can include the
    ''and'' and ''or'' Boolean operators. It''s also possible to search for fragments
    of strings by using an asterisk (globbing). |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `文本` | 支持字段的全文本搜索。查询可以包括''and''和''or''布尔运算符。还可以通过使用星号（通配符）来搜索字符串片段。|'
- en: '| `Set` | Supports keyword searches of a field. The index allows searches for
    documents that contain any one set of values; all of a set of values; or between
    a set of values. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `集合` | 支持字段的关键词搜索。该索引允许搜索包含任何一组值、一组值的所有值或一组值之间的文档。|'
- en: 'We are not going to add search options for using the other indexes in our application
    right now, but here are a few examples of how to use them. For the sake of completeness,
    let''s start with the `Text` field:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在不会在我们的应用程序中添加其他索引的搜索选项，但这里有一些使用它们的示例。为了完整性，让我们从`文本`字段开始：
- en: 'Finding objects containing the word ''caveman'' in the title:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在标题中查找包含单词'caveman'的对象：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finding all objects with either ''spear'' or ''club'' in their description:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在描述中查找包含'spear'或'club'的所有对象：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finding objects containing any word starting with ''cave'' in their title (caveman,
    caved, caveat, and so on):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在标题中查找以'cave'开头的任何单词的对象（如caveman、caved、caveat等）：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `Field` index works differently. It''s necessary to always use a tuple
    for the query, even if we are only interested in a single value. If we want all
    of the objects created by the user ''Manager'':'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`字段`索引的工作方式不同。查询时必须始终使用元组，即使我们只对单个值感兴趣。如果我们想找到由用户''Manager''创建的所有对象：'
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'All objects created between March 31, 2009 and today:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年3月31日至今天创建的所有对象：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `Set` index allows us to find matches in lists of values, which is useful
    for finding objects that share some keywords or tags, but do not necessarily have
    the same list of keywords or tags applied to them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`集合`索引允许我们在值列表中找到匹配项，这对于查找具有一些关键词或标签的对象很有用，但这些对象不一定应用了相同的标签列表。'
- en: Summary
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to use a catalog for searching and categorizing
    content. We are now able to add indexes and custom search queries to our applications.
    In the next chapter, we will turn our attention to security.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用目录进行内容的搜索和分类。现在我们能够为我们的应用程序添加索引和自定义搜索查询。在下一章中，我们将关注安全性问题。
