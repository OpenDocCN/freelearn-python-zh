- en: Chapter 9. Model-View-Controller – Compound Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。模型-视图-控制器 – 复合模式
- en: In the previous chapter, we started with an introduction to Template Method
    design pattern, in which subclasses redefine the concrete steps of the algorithm,
    thus achieving flexibility and code reuse. You learned about the Template Method
    and how it is used to construct the algorithm with a sequence of steps. We discussed
    the UML diagram, its pros and cons, learned more about it in the FAQ section,
    and summarized the discussion at the end of the chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们从一个模板方法设计模式的介绍开始，其中子类重新定义了算法的具体步骤，从而实现了灵活性和代码重用。您学习了模板方法及其如何通过一系列步骤构建算法。我们讨论了UML图，其优缺点，在常见问题解答部分对其进行了更多了解，并在本章末尾总结了讨论。
- en: In this chapter, we will talk about Compound patterns. We will get introduced
    to the **Model-View-Controller** (**MVC**) design pattern and discuss how it is
    used in software application development. We will work with a sample use case
    and implement it in Python v3.5.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论复合模式。我们将介绍**模型-视图-控制器**（**MVC**）设计模式，并讨论它在软件开发中的应用。我们将使用一个示例用例，并在Python
    v3.5中实现它。
- en: 'We will cover the following topics in brief in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要介绍以下内容：
- en: An introduction to Compound patterns and the Model-View-Controller
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复合模式与模型-视图-控制器简介
- en: The MVC pattern and its UML diagram
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC模式和它的UML图
- en: A real-world use case with the Python v3.5 code implementation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有Python v3.5代码实现的实际用例
- en: MVC pattern—pros and cons
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC模式——优点和缺点
- en: Frequently asked questions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见问题
- en: At the end of the chapter, we will summarize the entire discussion—consider
    this as a takeaway.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将总结整个讨论——请将此视为一个要点。
- en: An introduction to Compound patterns
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复合模式简介
- en: 'Throughout this book, we explored various design patterns. As we saw, design
    patterns are classified under three main categories: structural, creational, and
    behavioral design patterns. You also learned about each of these with examples.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们探讨了各种设计模式。正如我们所见，设计模式被分为三个主要类别：结构型、创建型和行为型设计模式。您还通过示例学习了这些内容。
- en: However, in software implementation, patterns don't work in isolation. Every
    software design or solution is not implemented with just one design pattern. Actually,
    patterns are often used together and combined to achieve a given design solution.
    As GoF defines, "*a compound pattern combines two or more patterns into a solution
    that solves a recurring or general problem*." A Compound pattern is not a set
    of patterns working together; it is a general solution to a problem.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在软件实现中，模式并不是孤立的。每个软件设计或解决方案并不是仅使用一个设计模式实现的。实际上，模式通常一起使用并组合起来，以实现特定的设计解决方案。正如GoF所定义的，“*复合模式将两个或更多模式结合成一个解决方案，该解决方案解决重复或普遍问题*。”复合模式不是一组一起工作的模式；它是对问题的通用解决方案。
- en: We're now going to look at the Model-View-Controller Compound pattern. It's
    the best example of Compound patterns and has been used in many design solutions
    over the years.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将探讨模型-视图-控制器复合模式。它是复合模式的最佳示例，并且在多年的设计解决方案中得到了应用。
- en: The Model-View-Controller pattern
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型-视图-控制器模式
- en: 'MVC is a software pattern to implement user interfaces and an architecture
    that can be easily modified and maintained. Essentially, the MVC pattern talks
    about separating the application into three essential parts: model, view, and
    controller. These three parts are interconnected and help in separating the ways
    in which information is represented to the way information is presented.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: MVC是一种用于实现用户界面和易于修改和维护的架构的软件模式。本质上，MVC模式讨论的是将应用程序分为三个基本部分：模型、视图和控制器。这三个部分相互关联，有助于将信息表示的方式与信息呈现的方式分开。
- en: 'This is how the MVC pattern works: the model represents the data and business
    logic (how information is stored and queried), view is nothing but the representation
    (how it is presented) of the data, and controller is the glue between the two,
    the one that directs the model and view to behave in a certain way based on what
    a user needs. Interestingly, the view and controller are dependent on the model
    but not the other way round. This is primarily because a user is concerned about
    the data. Models can be worked with independently and this is the key aspect of
    the MVC pattern.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 MVC 模式的工作方式：模型代表数据和业务逻辑（信息如何存储和查询），视图只是数据的表示（如何呈现），控制器是两者之间的粘合剂，它根据用户的需求指导模型和视图以某种方式行为。有趣的是，视图和控制器依赖于模型，但反之则不然。这主要是因为用户关心数据。模型可以独立工作，这是
    MVC 模式的关键方面。
- en: Consider the case of a website. This is one of the classical examples to describe
    the MVC pattern. What happens on a website? You click on a button, a few operations
    happen, and you get to see what you desired. How does this happen?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑网站的情况。这是描述 MVC 模式的经典例子之一。在网站上会发生什么？你点击一个按钮，发生一些操作，然后你看到你想要的内容。这是怎么发生的？
- en: You are the user and you interact with the view. The view is the web page that
    is presented to you. You click on the buttons on the view and it tells the controller
    what needs to be done.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是用户，你与视图交互。视图是你看到的网页。你点击视图上的按钮，它告诉控制器需要做什么。
- en: Controllers take the input from the view and send it to the model. The model
    gets manipulated based on the actions done by the user.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器从视图中获取输入并将其发送到模型。模型根据用户的操作进行操作。
- en: Controllers can also ask the view to change based on the action it receives
    from the user, such as changing the buttons, presenting additional UI elements,
    and so on.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器还可以根据从用户接收到的操作请求视图更改，例如更改按钮、呈现额外的 UI 元素等。
- en: The model notifies the change in state to the view. This can be based on a few
    internal changes or external triggers such as clicking on a button.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型通知视图状态的变化。这可能基于一些内部变化或外部触发器，如点击按钮。
- en: The view then displays the state that it gets directly from the model. For example,
    if a user logs in to the website, he/she might be presented with a dashboard view
    (post login). All the details that need to be populated on the dashboard are given
    by the model to the view.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图随后显示它直接从模型获得的状态。例如，如果用户登录到网站，他们可能会看到一个仪表板视图（登录后）。仪表板上需要填充的所有详细信息都由模型提供给视图。
- en: 'The MVC design pattern works with the following terms—Model, View, Controller
    and the Client:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: MVC 设计模式与以下术语一起工作——模型、视图、控制器和客户端：
- en: '**Model**: This declares a class to store and manipulate data'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：这声明了一个用于存储和操作数据的类'
- en: '**View**: This declares a class to build user interfaces and data displays'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：这声明了一个用于构建用户界面和数据显示的类'
- en: '**Controller**: This declares a class that connects the model and view'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：这声明了一个连接模型和视图的类'
- en: '**User**: This declares a class that requests for certain results based on
    certain actions'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户**：这声明了一个基于某些操作请求特定结果的类'
- en: 'The following image explains the flow of the MVC pattern:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像解释了 MVC 模式的流程：
- en: '![The Model-View-Controller pattern](img/00031.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![模型-视图-控制器模式](img/00031.jpeg)'
- en: 'To talk about the MVC pattern in software development terminologies, let''s
    look into the main classes involved in the MVC pattern:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要在软件开发术语中讨论 MVC 模式，让我们看看 MVC 模式中涉及的主要类：
- en: The `model` class is used to define all the operations that happen on the data
    (such as create, modify, and delete) and provides methods on how to use the data.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`模型`类用于定义在数据上发生的所有操作（如创建、修改和删除），并提供如何使用数据的方法。'
- en: The `view` class is a representation of the user interface. It will have methods
    that help us build web or GUI interfaces based on the context and need of the
    application. It should not contain any logic of its own and just display the data
    that it receives.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`视图`类是用户界面的表示。它将包含帮助我们根据应用程序的上下文和需求构建 Web 或 GUI 界面的方法。它不应包含任何自己的逻辑，只需显示它接收到的数据。'
- en: The `controller` class is used to receive data from the request and send it
    to other parts of the system. It has methods that are used to route requests.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`控制器`类用于接收请求数据并将其发送到系统的其他部分。它包含用于路由请求的方法。'
- en: 'The MVC pattern is used in the following cases:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: MVC 模式在以下情况下使用：
- en: When there is a need to change the presentation without changes in the business
    logic
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当需要更改展示方式而不更改业务逻辑时
- en: Multiple controllers can be used to work with multiple views to change the representation
    on the user interface
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用多个控制器与多个视图一起工作，以更改用户界面的表示。
- en: Once again, the model can be changed without changes in the view as they can
    work independently of each other
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次强调，模型可以改变，而视图不需要改变，因为它们可以独立工作。
- en: 'In short, the main intention of the MVC pattern is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，MVC模式的主要意图如下：
- en: Keeping the data and presentation of the data separate.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持数据和数据展示的分离。
- en: Easy maintenance of the class and implementation.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类和实现的易于维护。
- en: Flexibility to change the way in which data is stored and displayed. Both are
    independent and hence have the flexibility to change.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改数据存储和展示方式的灵活性。两者都是独立的，因此具有更改的灵活性。
- en: Let's look at the model, view, and controller in detail as covered in *Learning
    Python Design Patterns*, *Gennadiy Zlobin*, *Packt Publishing* as well.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看模型、视图和控制层，正如在*学习Python设计模式*、*Gennadiy Zlobin*、*Packt Publishing*中所述。
- en: Model – knowledge of the application
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型 – 应用程序的知识
- en: Model is the cornerstone of an application because it is independent of the
    view and controller. The view and controller in turn are dependent on the model.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 模型是应用程序的基石，因为它独立于视图和控制层。反过来，视图和控制层依赖于模型。
- en: Model also provides data that is requested by the client. Typically, in applications,
    the model is represented by the database tables that store and return information.
    Model has state and methods to change states but is not aware of how the data
    would be seen by the client.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 模型还提供客户端请求的数据。通常，在应用程序中，模型由存储和返回信息的数据库表表示。模型具有改变状态的状态和方法，但不知道数据将如何被客户端看到。
- en: It is critical that the model stays consistent across multiple operations; otherwise,
    the client may get corrupted or display stale data, which is completely undesirable.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 确保模型在多次操作中保持一致性至关重要；否则，客户端可能会被损坏或显示过时的数据，这是完全不可接受的。
- en: As the model is completely independent, developers working on this piece can
    focus on maintenance without the need for the latest view changes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模型完全独立，因此在此部分工作的开发者可以专注于维护，而无需最新的视图更改。
- en: View – the appearance
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图 – 外观
- en: The view is a representation of data on the interface that the client sees.
    The view can be developed independently but should not contain any complex logic.
    Logic should still reside in the controller or model.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是客户端在界面上看到的数据表示。视图可以独立开发，但不应该包含任何复杂逻辑。逻辑仍然应该位于控制器或模型中。
- en: In today's world, views need to be flexible enough and should cater to multiple
    platforms such as desktop, mobiles, tables, and multiple screen sizes.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今世界，视图需要足够灵活，并且应该适应多个平台，如桌面、移动设备、平板电脑和多种屏幕尺寸。
- en: Views should avoid interacting directly with the databases and rely on models
    to get the required data.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 视图应避免直接与数据库交互，并依赖模型获取所需数据。
- en: Controller – the glue
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器 – 粘合剂
- en: The controller, as the name suggests, controls the interaction of the user on
    the interface. When the user clicks on certain elements on the interface, based
    on the interaction (button click or touch), the controller makes a call to the
    model that in turn creates, updates, or deletes the data.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，控制器控制用户在界面上的交互。当用户点击界面上某些元素时，基于交互（按钮点击或触摸），控制器会调用模型，从而创建、更新或删除数据。
- en: Controllers also pass the data to the view that renders the information for
    the user to view on the interface.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器也将数据传递给视图，以便用户可以在界面上查看信息。
- en: The Controller shouldn't make database calls or get involved in presenting the
    data. The controller should act as the glue between the model and view and be
    as thin as possible.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器不应进行数据库调用或参与数据展示。控制器应作为模型和视图之间的粘合剂，尽可能薄。
- en: Let's now get into action and develop one sample app. The Python code shown
    next implements the MVC design pattern. Consider that we want to develop an application
    that tells a user about the marketing services delivered by a cloud company, which
    include e-mail, SMS, and voice facilities.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们开始动手，开发一个示例应用程序。下面的Python代码实现了MVC设计模式。假设我们想要开发一个应用程序，告诉用户云公司提供的营销服务，包括电子邮件、短信和语音设施。
- en: We first develop the `model` class (Model) that defines the services provided
    by the product, namely, e-mail, SMS, and voice. Each of these services have designated
    rates, such as 1,000 e-mails would charge the client $2, and for 1,000 messages,
    the charges are $10, and $15 for 1,000 voice messages. Thus, the model represents
    the data about the product services and prices.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先开发`model`类（模型），该类定义了产品提供的服务，即电子邮件、短信和语音。每个服务都有指定的费率，例如，1000封电子邮件将向客户收取2美元，1000条消息的收费是10美元，1000条语音消息的收费是15美元。因此，模型代表了产品服务和价格的数据。
- en: We then define the `view` class (View) that provides a method to present the
    information back to the client. The methods are `list_services()` and `list_pricing()`;
    as the name suggests, one method is used to print the services offered by the
    product and the other is to list the pricing for the services.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义了`view`类（视图），它提供了一个方法将信息呈现回客户端。这些方法分别是`list_services()`和`list_pricing()`；正如其名所示，一个方法用于打印产品提供的服务，另一个用于列出服务的定价。
- en: We then define the `Controller` class that defines two methods, `get_services()`
    and `get_pricing()`. Each of these methods queries the model and gets the data.
    The data is then fed to the view and thus presented to the client.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义了`Controller`类，该类定义了两个方法，`get_services()`和`get_pricing()`。每个方法都查询模型并获取数据。然后，数据被传递到视图，从而呈现给客户端。
- en: 'The `Client` class instantiates the controller. The `controller` object is
    used to call appropriate methods based on the client''s request:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`Client`类实例化控制器。`controller`对象用于根据客户端的请求调用适当的方法：'
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is the output of the preceding code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为前面代码的输出：
- en: '![Controller – the glue](img/00032.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![控制器 – 粘合剂](img/00032.jpeg)'
- en: A UML class diagram for the MVC design pattern
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC设计模式的UML类图
- en: Let's now understand more about the MVC pattern with the help of the following
    UML diagram.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们借助以下UML图来更深入地了解MVC模式。
- en: 'As we discussed in the previous sections, the MVC pattern has the following
    main participants: the `Model`, `View`, and `Controller` class.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的章节中讨论的那样，MVC模式有以下主要参与者：`Model`（模型）、`View`（视图）和`Controller`（控制器）类。
- en: '![A UML class diagram for the MVC design pattern](img/00033.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![MVC设计模式的UML类图](img/00033.jpeg)'
- en: 'In the UML diagram, we can see three main classes in this pattern:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在UML图中，我们可以看到这个模式中的三个主要类：
- en: 'The `Model` class: This defines the business logic or operations attached to
    certain tasks from the client.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Model`类：这定义了与客户端某些任务相关的业务逻辑或操作。'
- en: 'The `View` class: This defines the view or representation that is viewed by
    the client. The model presents the data to the view based on the business logic.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`View`类：这定义了客户端看到的视图或表示。模型根据业务逻辑向视图呈现数据。'
- en: 'The `Controller` class: This is essentially an interface that is between the
    view and model. When the client takes certain actions, the controller directs
    the query from the view to model.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Controller`类：这本质上是一个介于视图和模型之间的接口。当客户端采取某些操作时，控制器将视图的查询导向模型。'
- en: 'The following is a code example to understand the pattern with all the participants
    involved:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个包含所有参与者的代码示例，以了解该模式：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following is the output of the preceding code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为前面代码的输出：
- en: '![A UML class diagram for the MVC design pattern](img/00034.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![MVC设计模式的UML类图](img/00034.jpeg)'
- en: The MVC pattern in the real world
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现实世界中的MVC模式
- en: 'Our good old web application frameworks are based on the philosophies of MVC.
    Take the example of Django or Rails (Ruby): they structure their projects in the
    Model-View-Controller format except that it is represented as **MTV** (**Model**,
    **Template**, **View**) where the model is the database, templates are the views,
    and controllers are the views/routes.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们那些古老的Web应用程序框架基于MVC的哲学。以Django或Rails（Ruby）为例：它们以Model-View-Controller格式结构化他们的项目，除了它被表示为**MTV**（**Model**，**Template**，**View**）之外，其中模型是数据库，模板是视图，控制器是视图/路由。
- en: As an example, let's take up the Tornado web application framework ([http://www.tornadoweb.org/en/stable/](http://www.tornadoweb.org/en/stable/))
    to develop a single-page app. This application is used to manage a user's tasks
    and the user has permissions to add tasks, update tasks, and delete tasks.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们以Tornado Web应用程序框架（[http://www.tornadoweb.org/en/stable/](http://www.tornadoweb.org/en/stable/)）为例，开发一个单页应用程序。这个应用程序用于管理用户的任务，并且用户有权限添加任务、更新任务和删除任务。
- en: 'Let''s see the design considerations:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看设计考虑因素：
- en: Let's start with the controllers first. In Tornado, controllers have been defined
    as views/app routes. We need to define multiple views such as listing the tasks,
    creating new tasks, closing the tasks, and handling an operation if a request
    could not be served.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们先从控制器开始。在 Tornado 中，控制器已被定义为视图/app 路由。我们需要定义多个视图，例如列出任务、创建新任务、关闭任务以及处理无法提供服务的请求的操作。
- en: We should also define models, the database operations to list, create, or delete
    the tasks.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还应该定义模型，即列出、创建或删除任务的数据库操作。
- en: Finally, the views are represented by templates in Tornado. Based on our app,
    we would need a template to show tasks, create or delete tasks, and also a template
    if a URL is not found.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，在 Tornado 中，视图由模板表示。根据我们的应用程序，我们需要一个模板来显示任务、创建或删除任务，以及如果 URL 未找到的模板。
- en: Modules
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块
- en: 'We will use the following modules for this application:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下模块来构建此应用程序：
- en: Torando==4.3
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Torando==4.3
- en: SQLite3==2.6.0
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite3==2.6.0
- en: 'Let''s start by importing the Python modules in our app:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先在我们的应用程序中导入 Python 模块：
- en: '[PRE2]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following code represents the database operations, essentially, the models
    in MVC. In Tornado, DB operations are performed under different handlers. Handlers
    perform operations on the DB based on the route requested by the user in the web
    app. Here, we talk about the four handlers that we have created in this example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码表示数据库操作，本质上，是 MVC 中的模型。在 Tornado 中，数据库操作是在不同的处理器下执行的。处理器根据用户在 Web 应用中请求的路由在数据库上执行操作。在这里，我们讨论我们在这个示例中创建的四个处理器：
- en: '`IndexHandler`: This returns all the tasks that are stored in the database.
    It returns a dictionary with key tasks. It performs the `SELECT` database operation
    to get these tasks.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IndexHandler`：这返回存储在数据库中的所有任务。它返回一个包含键 tasks 的字典。它执行 `SELECT` 数据库操作以获取这些任务。'
- en: '`NewHandler`: As the name suggests, this is useful to add new tasks. It checks
    whether there is a `POST` call to create a new task and does an `INSERT` operation
    in the DB.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NewHandler`：正如其名所示，这有助于添加新任务。它检查是否有创建新任务的 `POST` 调用并在数据库中执行 `INSERT` 操作。'
- en: '`UpdateHandler`: This is useful in marking a task as complete or reopening
    a given task. In this case, the `UPDATE` database operation occurs to set a task
    with the status as open/closed.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UpdateHandler`：这在标记任务为完成或重新打开指定任务时很有用。在这种情况下，执行 `UPDATE` 数据库操作以设置状态为打开/关闭的任务。'
- en: '`DeleteHandler`: This deletes a given task from the database. Once deleted,
    the task is no more visible in the list of tasks.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DeleteHandler`：这将从数据库中删除指定的任务。一旦删除，任务将不再在任务列表中可见。'
- en: 'We have also developed an `_execute()` method that takes a SQLite query as
    an input and performs the required DB operation. The `_execute()` method does
    the following operations on the SQLite DB:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还开发了一个 `_execute()` 方法，该方法接受一个 SQLite 查询作为输入并执行所需的数据库操作。`_execute()` 方法在 SQLite
    数据库上执行以下操作：
- en: Creating a SQLite DB connection
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 SQLite 数据库连接
- en: Getting the cursor object
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取游标对象
- en: Using the cursor object to make a transaction
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用游标对象进行事务
- en: Committing the query
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交查询
- en: Closing the connection
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭连接
- en: 'Let''s look at the handlers in the Python implementation:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Python 实现中的处理器：
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you look up these methods, you''ll notice something called `self.render()`.
    This essentially represents the views in MVC (templates in the Tornado framework).
    We have three main templates:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看这些方法，你会注意到一个叫做 `self.render()` 的东西。这本质上代表了 MVC 中的视图（在 Tornado 框架中的模板）。我们主要有三个模板：
- en: '`index.html`: This is a template to list all the tasks'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`：这是一个列出所有任务的模板'
- en: '`new.html`: This is the view to create a new task'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new.html`：这是一个创建新任务的视图'
- en: '`base.html`: This is the base template from which other templates are inherited'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base.html`：这是一个基础模板，其他模板都是从它继承的'
- en: 'Consider the following code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码：
- en: '[PRE4]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In Tornado, we also have the application routes that are controllers in MVC.
    We have four application routes in this example:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Tornado 中，我们也有 MVC 中的控制器，即应用路由。在这个示例中，我们有四个应用路由：
- en: '`/`: This is the route to list all the tasks'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/`：这是列出所有任务的路由'
- en: '`/todo/new`: This is the route to create new tasks'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/todo/new`：这是创建新任务的路由'
- en: '`/todo/update`: This is the route to update the task status to open/closed'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/todo/update`：这是将任务状态更新为打开/关闭的路由'
- en: '`/todo/delete`: This is the route to delete a completed task'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/todo/delete`：这是删除已完成任务的路由'
- en: 'The code example is as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 代码示例如下：
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We also have application settings and can start the HTTP web server to run
    the application:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有应用程序设置，并且可以启动 HTTP Web 服务器来运行应用程序：
- en: '[PRE6]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When we run the Python program:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行 Python 程序时：
- en: The server gets started and runs on port `5000`. The appropriate views, templates,
    and controllers have been configured.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器已启动并运行在端口`5000`上。适当的视图、模板和控制器已经配置好。
- en: On browsing `http://localhost:5000/`, we can see the list of tasks. the following
    screenshot shows the output in the browser:![Modules](img/00035.jpeg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览`http://localhost:5000/`时，我们可以看到任务列表。以下屏幕截图显示了浏览器中的输出：![模块](img/00035.jpeg)
- en: We can also add a new task. Once you click on **add**, a new task gets added.
    In the following screenshot, a new task `Write the New Chapter` is added and listed
    in the task list:![Modules](img/00036.jpeg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以添加一个新任务。一旦你点击**添加**，就会添加一个新的任务。在下面的屏幕截图中，添加了一个新的任务`编写新章节`，并在任务列表中列出：![模块](img/00036.jpeg)
- en: 'When we enter the new task and click on the ADD button, the task gets added
    to the list of existing tasks:'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们输入新任务并点击ADD按钮时，任务会被添加到现有任务列表中：
- en: '![Modules](img/00037.jpeg)'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![模块](img/00037.jpeg)'
- en: We can close tasks from the UI as well. For example, we update the **Cook food**
    task and the list gets updated. We can reopen the task if we choose to:![Modules](img/00038.jpeg)
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以从UI关闭任务。例如，我们更新了**做饭**任务，列表也会更新。如果我们选择的话，可以重新打开任务：![模块](img/00038.jpeg)
- en: We can also delete a task. In this case, we delete the first task, **New Task**,
    and the task list will get updated to remove the task:![Modules](img/00039.jpeg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以删除一个任务。在这种情况下，我们删除了第一个任务**新任务**，任务列表将更新以删除该任务：![模块](img/00039.jpeg)
- en: Benefits of the MVC pattern
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC模式的优点
- en: 'The following are the benefits of the MVC pattern:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些MVC模式的优点：
- en: 'With MVC, developers can split the software application into three major parts:
    model, view, and controller. This helps in achieving easy maintenance, enforcing
    loose coupling, and decreasing complexity.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MVC，开发者可以将软件应用分成三个主要部分：模型、视图和控制器。这有助于实现易于维护、强制松散耦合和降低复杂性。
- en: MVC allows independent changes on the frontend without any, or very few, changes
    on the backend logic, and so the development efforts can still run independently.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC允许在前端进行独立更改，而无需在后台逻辑上进行任何或很少的更改，因此开发工作仍然可以独立进行。
- en: On similar lines, models or business logic can be changed without any changes
    in the view.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似地，模型或业务逻辑可以更改，而不会在视图中进行任何更改。
- en: Additionally, the controller can be changed without any impact on views or models.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，控制器可以更改，而不会对视图或模型产生影响。
- en: MVC also helps in hiring people with specific capabilities such as platform
    engineers and UI engineers who can work independently in their field of expertise.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC还有助于招聘具有特定能力的人员，如平台工程师和UI工程师，他们可以在自己的专业领域独立工作。
- en: Frequently asked questions
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: Q1\. Isn't MVC a pattern? Why is it called a Compound pattern?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. MVC不是一个模式吗？为什么它被称为复合模式？
- en: 'A: Compound patterns are essentially groups of patterns put together to solve
    large design problems in software application development. The MVC pattern is
    the most popular and widely used Compound pattern. As it is so widely used and
    reliable, it is treated as a pattern itself.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 'A: 复合模式本质上是由多个模式组合在一起来解决软件应用开发中的大型设计问题。MVC模式是最受欢迎和最广泛使用的复合模式。由于其广泛的使用和可靠性，它被视为一个模式本身。'
- en: Q2\. Is MVC used only in websites?
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. MVC只用于网站吗？
- en: 'A: No, a website is the best example to describe MVC. However, MVC can be used
    in multiple areas such as GUI applications or any other place where you need loose
    coupling and splitting of components in an independent way. Typical examples of
    MVC include blogs, movie database applications, and video streaming web apps.
    While MVC is useful in many places, it''s overkill if you use it for the landing
    pages, marketing content, or quick single-page applications.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 'A: 不，网站是描述MVC的最佳例子。然而，MVC可以用于多个领域，例如GUI应用程序或任何需要以独立方式松散耦合和分割组件的地方。MVC的典型例子包括博客、电影数据库应用程序和视频流网页应用。虽然MVC在许多地方都很实用，但如果用于着陆页、营销内容或快速的单页应用，则可能有些过度。'
- en: Q3\. Can multiple views work with multiple models?
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Q3. 多个视图可以与多个模型一起工作吗？
- en: 'A: Yes, often you''d end up in a situation where the data needs to be collated
    from multiple models and presented in one view. One-to-one mapping is rare in
    today''s web app world.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 'A: 是的，你经常会遇到需要从多个模型中收集数据并在一个视图中展示的情况。在当今的Web应用世界中，一对一映射很少见。'
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We began the chapter by understanding Compound patterns and looked at the Model-View-Controller
    pattern and how it is effectively used in software architecture. We then looked
    at how the MVC pattern is used to ensure loose coupling and maintain a multilayer
    framework for independent task development.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过理解复合模式开始本章，并探讨了模型-视图-控制器（MVC）模式及其在软件架构中的有效应用。然后我们研究了MVC模式是如何被用来确保松散耦合并维护一个用于独立任务开发的分层框架的。
- en: You also learned the pattern with a UML diagram and sample code implementation
    in Python v3.5 along with the explanation. We also covered a section on FAQs that
    would help you get more ideas on the pattern and its possible advantages/disadvantages.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您还学习了与UML图和Python 3.5示例代码实现一起的解释，该模式。我们还涵盖了一个关于常见问题解答（FAQs）的部分，这将帮助您获得更多关于该模式和其可能的优势/劣势的想法。
- en: In the next chapter, we will talk about the Anti patterns. See you there!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论反模式。那里见！
