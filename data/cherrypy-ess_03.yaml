- en: Chapter 3. Overview of CherryPy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 概述CherryPy
- en: In the first chapter we briefly reviewed some aspects of CherryPy; it is now
    time to dig deeper and see how the project is designed and structured. We will
    first go through a basic CherryPy example. Then we will go through the CherryPy
    core, the publishing-object engine, and see how it wraps the HTTP protocol in
    an object-oriented library. Our next step will be to explore the concept of hooking
    into the core, the CherryPy library, and the tool mechanism. We will then review
    how CherryPy handles errors and exceptions and how you can benefit from it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，我们简要回顾了CherryPy的一些方面；现在是时候深入挖掘，看看这个项目是如何设计和构建的。我们首先将通过一个基本的CherryPy示例。然后我们将探讨CherryPy的核心、发布对象引擎，以及它是如何将HTTP协议封装在一个面向对象的库中的。我们的下一步将是探索挂钩到核心、CherryPy库和工具机制的概念。然后我们将回顾CherryPy如何处理错误和异常，以及你如何从中受益。
- en: By the end of this chapter you will have a good overview of the CherryPy library;
    however, it is likely you will need to come back to this chapter during the rest
    of the book in order to fully appreciate it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将对CherryPy库有一个很好的概述；然而，你很可能会在本书的其余部分回到这一章，以便完全理解它。
- en: Vocabulary
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 词汇表
- en: In order to avoid misunderstandings, we need to define a few key words that
    will be used throughout this book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免误解，我们需要定义一些将在整本书中使用的关键词。
- en: '| Keyword | Definition |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 关键词 | 定义 |'
- en: '| --- | --- |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Web server** | A web server is the interface dealing with the HTTP protocol.
    Its goal is to transform incoming HTTP requests into entities that are then passed
    to the application server and also transform information from the application
    server back into HTTP responses. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| **Web服务器** | Web服务器是处理HTTP协议的接口。其目标是将传入的HTTP请求转换为实体，然后传递给应用服务器，并将应用服务器中的信息转换回HTTP响应。|'
- en: '| **Application** | An application is a piece of software that takes a unit
    of information, applies business logic to it, and returns a processed unit of
    information. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| **应用** | 应用是一段软件，它接收一个信息单元，对其应用业务逻辑，并返回一个处理过的信息单元。|'
- en: '| **Application server** | An application server is the component hosting one
    or more applications. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| **应用服务器** | 应用服务器是托管一个或多个应用的组件。|'
- en: '| **Web application server** | A web application server is simply the aggregation
    of a web server and an application server into a single component. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| **Web应用服务器** | Web应用服务器简单地将Web服务器和应用服务器合并为一个组件。|'
- en: CherryPy is a web application server.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy是一个Web应用服务器。
- en: Basic Example
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本示例
- en: To illustrate the CherryPy library we will go through a very basic web application
    allowing a user to leave a note on the main page through an HTML form. The notes
    will be stacked and be rendered in a reverse order of their creation date. We
    will use a session object to store the name of the author of the note.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明CherryPy库，我们将通过一个非常基本的Web应用，允许用户通过HTML表单在主页上留下笔记。笔记将按创建日期的逆序堆叠并渲染。我们将使用会话对象来存储笔记作者的姓名。
- en: '![Basic Example](img/1848_03_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![基本示例](img/1848_03_01.jpg)'
- en: Each note will have a URI attached to itself, of the form `/note/id`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每个笔记都将附有一个URI，形式为`/note/id`。
- en: '![Basic Example](img/1848_03_02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![基本示例](img/1848_03_02.jpg)'
- en: Create a blank file named `note.py` and copy the following source code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`note.py`的空白文件，并复制以下源代码。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Following is the CSS which should be saved in a file named `style.css` and stored
    in the same directory as `note.py`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在名为`style.css`的文件中保存的CSS，该文件应存储在与`note.py`相同的目录中。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the rest of this chapter we will refer to the application to explain CherryPy's
    design.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，我们将通过应用来解释CherryPy的设计。
- en: Built-In HTTP Server
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置HTTP服务器
- en: CherryPy comes with its own web (HTTP) server. The goal of this decision was
    to make CherryPy self-contained and allow users to run a CherryPy application
    within minutes of getting the library. As the name implies, the web server is
    the gateway to a CherryPy application through which all HTTP requests and responses
    have to go. It is therefore up to that layer to handle the low-level TCP sockets
    used to convey the information between the client and the server.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy自带其自己的Web（HTTP）服务器。做出这个决定的目标是使CherryPy成为一个自包含的系统，并允许用户在获得库后几分钟内运行CherryPy应用。正如其名所示，Web服务器是CherryPy应用的入口，所有HTTP请求和响应都必须通过它。因此，该层负责处理客户端和服务器之间传递信息的低级TCP套接字。
- en: It is not compulsory to use the built-in server though and CherryPy is quite
    able to interface itself with other web servers if needed. Throughout this book,
    however, we will only use the default built-in web server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用内置服务器不是强制性的，但如果有需要，CherryPy完全能够与其它Web服务器接口。然而，在这本书中，我们只会使用默认的内置Web服务器。
- en: 'To start the web server you have to make the following call:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动Web服务器，您必须执行以下调用：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Internal Engine
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内部引擎
- en: 'The CherryPy engine is the layer in charge of the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy引擎是负责以下内容的层：
- en: Creating and managing Request and Response objects
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和管理请求和响应对象
- en: The Request is in charge of retrieving and calling the page handler matching
    the Request-URI.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求负责检索和调用与Request-URI匹配的页面处理程序。
- en: The Response object constructs and validates the response before handing it
    back to the underlying server.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应对象在将响应返回给底层服务器之前构建和验证响应。
- en: Controlling, managing, and monitoring the CherryPy process
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制、管理和监控CherryPy进程
- en: 'To start the engine you must issue the following call:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动引擎，您必须发出以下调用：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Configuration
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: CherryPy comes with its own configuration system allowing you to parameterize
    the HTTP server as well as the behavior of the CherryPy engine when processing
    a Request-URI.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy自带配置系统，允许您参数化HTTP服务器以及CherryPy引擎在处理Request-URI时的行为。
- en: The settings can be stored either in a text file with syntax close to the `INI`
    format or in a pure Python dictionary. Choosing between the two is a matter of
    taste as both carry the same information.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 设置可以存储在接近`INI`格式的文本文件中，或者存储在纯Python字典中。选择两者之一将取决于个人喜好，因为它们都携带相同的信息。
- en: 'CherryPy offers two entry points for passing configuration values—globally
    to the server instance through the `cherrypy.config.update()` method and per application
    via the `cherrypy.tree.mount()` method. In addition there is a third scope where
    configuration settings can be applied: per path.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy提供了两个入口点来传递配置值——通过`cherrypy.config.update()`方法全局传递给服务器实例，以及通过`cherrypy.tree.mount()`方法按应用程序传递。此外，还有一个第三个作用域，可以在其中应用配置设置：按路径。
- en: To configure the CherryPy server instance itself you will need to use the `global`
    section of the settings.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置CherryPy服务器实例本身，您需要使用设置的`global`部分。
- en: 'In the `note` application we have defined the following settings:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在`note`应用程序中，我们定义了以下设置：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This could be represented in a file like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在如下文件中表示：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When using a file to store the settings you must use valid Python objects (string,
    integer, Boolean, etc.).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用文件存储设置时，您必须使用有效的Python对象（字符串、整数、布尔值等）。
- en: We define the host and the port on which the server will listen for incoming
    connections.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了服务器将监听传入连接的主机和端口。
- en: Then we indicate to the CherryPy engine that the `/style.css` file is to be
    handled by the `staticfile` tool and also indicate the absolute path of the physical
    file to be served. We will explain in detail what tools are in the following chapters
    but for now imagine them as a way to extend CherryPy's internal features and enhance
    its possibilities.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们指示CherryPy引擎，`/style.css`文件将由`staticfile`工具处理，并也指出了要服务的物理文件的绝对路径。我们将在以下章节中详细解释这些工具是什么，但到目前为止，请想象它们是扩展CherryPy内部功能和增强其可能性的方式。
- en: 'To notify CherryPy of our global settings we need to make the following call:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通知CherryPy我们的全局设置，我们需要执行以下调用：
- en: With a dictionary
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用字典
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With a file
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用文件
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We also have to pass the configuration values to the mounted applications as
    follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须按照以下方式将配置值传递给挂载的应用程序：
- en: With a dictionary
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用字典
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With a file
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用文件
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Although in most cases choosing between a dictionary and a file will be a matter
    of taste, it may happen in some cases that one is better than the other. For instance,
    you may be required to pass complex data or objects to one key of the configuration,
    which cannot be achieved via a text file. On the other hand if the settings are
    to be amendable by the administrator of the application, using an INI file may
    facilitate that task.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在大多数情况下，在字典和文件之间进行选择将取决于个人喜好，但在某些情况下，一种方式可能比另一种方式更好。例如，您可能需要将复杂的数据或对象传递给配置中的一个键，而这无法通过文本文件实现。另一方面，如果设置需要由应用程序管理员修改，使用INI文件可能会简化这项任务。
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that if you configure parts of your application such as we do to serve
    the stylesheet in our Note application, you must make a call to `cherrypy.tree.mount()`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果您像我们在Note应用程序中那样配置应用程序的某些部分（如服务样式表），您必须调用`cherrypy.tree.mount()`。
- en: The last way of configuring your application is by using the `_cp_config` attribute
    on your page handler or as a class attribute of the class containing the page
    handlers, in which case the configuration will prevail for all page handlers.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 配置应用程序的最后一种方式是在页面处理程序或包含页面处理程序的类的`_cp_config`属性上使用，在这种情况下，配置将适用于所有页面处理程序。
- en: In the following code sample, we indicate that all the page handlers of the
    `Root` class will use `gzip` compression except the `hello` page handler.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码示例中，我们表明`Root`类的所有页面处理程序都将使用`gzip`压缩，除了`hello`页面处理程序。
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The call to `quickstart` above is a shortcut for:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的`quickstart`调用是一个快捷方式：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can use this call anytime you only mount one single application on a CherryPy
    server.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在任何时候使用这个调用，只要您只在CherryPy服务器上挂载一个单一的应用程序。
- en: The last important point is that configuration settings are independent of the
    prefix on which the application is mounted. Therefore in the above example even
    though the application could be mounted at `/myapp` instead of `/`, the settings
    would not be different. They would not include the prefix. Therefore consider
    the configuration settings to be relative to the application but independent of
    the prefix used to mount the application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个重要点是，配置设置与应用程序挂载的前缀无关。因此，在上面的例子中，即使应用程序可以挂载在`/myapp`而不是`/`上，设置也不会不同。它们不会包含前缀。因此，请考虑配置设置相对于应用程序，但与挂载应用程序使用的前缀无关。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The prefix where the application is mounted is referred to the `script_name`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序挂载的地址称为`script_name`。
- en: Object Publisher Engine
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象发布器引擎
- en: HTTP servers such as Apache or lighttpd map Request-URIs to paths on the file
    system making them very efficient at handling websites mainly made of static content
    such as images.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP服务器，如Apache或lighttpd，将请求URI映射到文件系统上的路径，这使得它们在处理主要由静态内容（如图片）组成的网站时非常高效。
- en: CherryPy has chosen a completely different approach and uses its own internal
    lookup algorithm to retrieve the handler referred to by the Request-URI. The decision
    made with CherryPy 2.0 was that such a handler would be a Python-callable object
    attached to a tree of published objects. That is the reason why we speak of object
    publishing as the Request-URI maps to a Python object.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy选择了完全不同的方法，并使用其自己的内部查找算法来检索由请求URI引用的处理程序。CherryPy 2.0做出的决定是，这样的处理程序将是一个附加到已发布对象树上的Python可调用对象。这就是我们说对象发布是因为请求URI映射到一个Python对象的原因。
- en: 'CherryPy defines two important concepts:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy定义了两个重要的概念：
- en: '**Published:** A Python object is said to be published when it is attached
    to a tree of objects and the root of this tree is mounted on the CherryPy engine
    server via a call to `cherrypy.tree.mount`.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已发布**：当一个Python对象附加到一个对象树，并且这个树的根通过`cherrypy.tree.mount`调用挂载到CherryPy引擎服务器时，我们说这个Python对象被发布了。'
- en: 'For instance:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the above example the root object is said to be published. By extension the
    admin object, which is an attribute of a published object, is also published.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，根对象被称为已发布。通过扩展，作为已发布对象属性的admin对象也是已发布的。
- en: '**Exposed:** A published object is said to be exposed when it has an attribute
    named `exposed` set to `True`. An exposed object must be Python callable.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公开**：当一个已发布对象有一个名为`exposed`的属性设置为`True`时，我们说这个对象被公开了。一个公开的对象必须是Python可调用的。'
- en: 'Being published is not sufficient for an object to be treated as being a potential
    handler for a URI by CherryPy. A published object must be exposed so that it becomes
    visible to the CherryPy engine. For instance:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于一个对象来说，仅仅被发布是不够的，CherryPy将其视为URI的潜在处理程序。一个已发布对象必须被公开，以便它对CherryPy引擎可见。例如：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example a request to `/dosome` would return a **Not Found** error because
    the method is not exposed even though it belongs to a published object. The reason
    is that the dosome callable object is not exposed to the internal engine as a
    potential match for a URI.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个例子中，对`/dosome`的请求将返回一个**未找到**错误，因为即使该方法属于一个已发布对象，它也没有被公开。原因是`dosome`可调用对象没有被公开给内部引擎作为URI的潜在匹配项。
- en: You can set the `exposed` attribute either manually or by using the `expose`
    decorator provided by CherryPy as we will do throughout this book.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过手动设置或使用CherryPy提供的`expose`装饰器来设置`exposed`属性，正如我们将在本书中做的那样。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An exposed object is usually referred to as a **page handler** by the CherryPy
    community. This is the term we will be using throughout the book.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy社区通常将暴露的对象称为**页面处理程序**。本书中我们将使用这个术语。
- en: For example, in the `Note` application the published objects are `note_app`
    and `author`. The root of the tree is `note_app` and is mounted on the`'/'` prefix.
    Therefore CherryPy will use that tree of objects upon receiving a request for
    any path starting with`'/'`. Had we used a prefix such as `/postit`, the `Note`
    application would have only been served by CherryPy when getting a request starting
    with such a prefix.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在`Note`应用程序中，发布的对象是`note_app`和`author`。树的根是`note_app`，并挂载在`'/'`前缀上。因此，当接收到以`'/'`开头的任何路径的请求时，CherryPy将使用该对象树。如果我们使用前缀如`/postit`，则只有在接收到以该前缀开始的请求时，`Note`应用程序才会由CherryPy提供服务。
- en: It is therefore possible to mount several applications via distinct prefixes.
    CherryPy will call the correct one based on the Request-URI. (As we will explain
    later in the book, two applications mounted via `cherrypy.tree.mount()` are unaware
    of each other. CherryPy makes sure that they don't leak.)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可以通过不同的前缀挂载多个应用程序。CherryPy将根据请求URI调用正确的一个。（正如我们将在本书后面解释的，通过`cherrypy.tree.mount()`挂载的两个应用程序彼此之间是不知道的。CherryPy确保它们不会泄露。）
- en: The following table displays the relationship between a Request-URI and the
    page handler matching the path of the URI as found by CherryPy.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了请求URI与CherryPy找到的URI路径匹配的页面处理程序之间的关系。
- en: '| Request-URI Path | Published Object | Page Handler |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 请求URI路径 | 发布的对象 | 页面处理程序 |'
- en: '| --- | --- | --- |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `/` | `note_app` | `index` |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `/` | `note_app` | `index` |'
- en: '| `/author/` | `note_app.author` | `index` |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `/author/` | `note_app.author` | `index` |'
- en: '| `/author/set` | `note_app.author` | `set` |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `/author/set` | `note_app.author` | `set` |'
- en: '| `/note/1` | `note_app` | `note` |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `/note/1` | `note_app` | `note` |'
- en: The `index()` and `default()` methods are special page handlers for CherryPy.
    The former one matches Request-URIs ending with a slash, similarly to the `index.html`
    file on the Apache server. The latter one is used by CherryPy when no explicit
    page handler is found for a Request-URI. Our `Note` application does not define
    one but the `default` page handler is often used to catch irregular URIs.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`index()`和`default()`方法是CherryPy的特殊页面处理程序。前者与以斜杠结尾的请求URI匹配，类似于Apache服务器上的`index.html`文件。后者在CherryPy找不到显式页面处理程序的请求URI时使用。我们的`Note`应用程序没有定义一个，但`default`页面处理程序通常用于捕获不规则URI。'
- en: You can also notice that the `/note/1` URI, in fact, matches `note(id)`; this
    is because CherryPy supports positional parameters. The bottom line is that CherryPy
    will call the first page handler that has a signature matching the requested URI.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以注意到，`/note/1` URI实际上与`note(id)`匹配；这是因为CherryPy支持位置参数。总之，CherryPy将调用第一个签名与请求URI匹配的页面处理程序。
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'CherryPy treats `/note/1` and `/note?id=1` the same way as long as it finds
    a page handler with the following signature: `note(id)`.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '只要CherryPy找到一个具有以下签名的页面处理程序：`note(id)`，CherryPy就会以相同的方式处理`/note/1`和`/note?id=1`。 '
- en: The following figure is a global overview of the process followed by an HTTP
    request when reaching the CherryPy server.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 下图是HTTP请求到达CherryPy服务器时遵循的流程的全球概述。
- en: '![Object Publisher Engine](img/1848_03_03.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![对象发布引擎](img/1848_03_03.jpg)'
- en: Library
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图书馆
- en: CherryPy comes with a set of modules covering common tasks when building a web
    application such as session management, static resource service, encoding handling,
    or basic caching.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy附带了一套模块，用于构建Web应用程序时的常见任务，例如会话管理、静态资源服务、编码处理或基本缓存。
- en: The Autoreload Feature
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动重载功能
- en: CherryPy is a long-running Python process, meaning that if we modify a Python
    module of the application, it will not be propagated in the existing process.
    Since stopping and restarting the server manually can be a tedious task, the CherryPy
    team has included an autoreload module that restarts the process as soon as it
    detects a modification to a Python module imported by the application. This feature
    is handled via configuration settings.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy是一个长期运行的Python进程，这意味着如果我们修改应用程序的Python模块，它将不会在现有进程中传播。由于手动停止和重新启动服务器可能是一项繁琐的任务，CherryPy团队包含了一个自动重载模块，该模块在检测到应用程序导入的Python模块的修改时立即重新启动进程。此功能通过配置设置处理。
- en: If you need the autoreload module to be enabled while in production you will
    set it up as below. Note the `engine.autoreload_frequency` option that sets the
    number of seconds the autoreloader engine has to wait before checking for new
    changes. It defaults to one second if not present.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要在生产环境中启用自动重新加载模块，您将按照以下方式设置它。注意 `engine.autoreload_frequency` 选项，它设置自动重新加载引擎在检查新更改之前必须等待的秒数。如果不存在，默认为
    1 秒。
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Autoreload is not properly a module but we mention it here as it is a common
    feature offered by the library.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 自动重新加载不是一个真正的模块，但我们在这里提到它，因为它是由库提供的常见功能。
- en: The Caching Module
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存模块
- en: Caching is an important side of any web application as it reduces the load and
    stress of the different servers in action—HTTP, application, and database servers.
    In spite of being highly correlated to the application itself, generic caching
    tools such as the ones provided by this module can help in achieving decent improvements
    in your application's performance.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存是任何 Web 应用程序的重要方面，因为它减少了不同服务器（HTTP、应用程序和数据库服务器）的负载和压力。尽管它与应用程序本身高度相关，但此模块提供的通用缓存工具等可以帮助在应用程序性能上实现相当大的改进。
- en: The CherryPy caching module works at the HTTP server level in the sense that
    it will cache the generated output to be sent to the user agent and will retrieve
    a cached resource based on a predefined key, which defaults to the complete URL
    leading to that resource. The cache is held in the server memory and is therefore
    lost when stopping it. Note that you can also pass your own caching class to handle
    the underlying process differently while keeping the same high-level interface.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy 缓存模块在 HTTP 服务器级别工作，这意味着它会缓存要发送给用户代理的生成输出，并根据预定义的键检索缓存资源，默认为指向该资源的完整
    URL。缓存存储在服务器内存中，因此当停止服务时将丢失。请注意，您还可以传递自己的缓存类来以不同的方式处理底层过程，同时保持相同的高级接口。
- en: The Coverage Module
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖率模块
- en: When building an application it is often beneficial to understand the path taken
    by the application based on the input it processes. This helps to determine potential
    bottlenecks and also see if the application runs as expected. The coverage module
    provided by CherryPy does this and provides a friendly browseable output showing
    the lines of code executed during the run. The module is one of the few that rely
    on a third-party package to run.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建应用程序时，了解应用程序根据其处理的输入所采取的路径通常是有益的。这有助于确定潜在的瓶颈，并查看应用程序是否按预期运行。CherryPy 提供的覆盖率模块就是这样做的，并提供了一个友好的可浏览输出，显示了运行期间执行的代码行。该模块是少数几个依赖第三方包来运行的模块之一。
- en: The Encoding/Decoding Module
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码/解码模块
- en: Publishing over the Web means dealing with the multitude of existing character
    encoding. To one extreme you may only publish your own content using US-ASCII
    without asking for readers' feedback and to the other extreme you may release
    an application such as bulletin board that will handle any kind of charset. To
    help in this task CherryPy provides an encoding/decoding module that filters the
    input and output content based on server or user-agent settings.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Web 发布意味着处理现有的众多字符编码。在一端，您可能只使用 US-ASCII 发布自己的内容，而不需要征求读者的反馈；在另一端，您可能发布一个如公告板之类的应用程序，它可以处理任何类型的
    charset。为了帮助完成这项任务，CherryPy 提供了一个编码/解码模块，该模块根据服务器或用户代理设置过滤输入和输出内容。
- en: The HTTP Module
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP 模块
- en: This module offers a set of classes and functions to handle HTTP headers and
    entities.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块提供了一套类和函数来处理 HTTP 头和实体。
- en: 'For example, to parse the HTTP request line and query string:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了解析 HTTP 请求行和查询字符串：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The Httpauth Module
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Httpauth 模块
- en: This module provides an implementation of the basic and digest authentication
    algorithm as defined in RFC 2617.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块提供了 RFC 2617 中定义的基本和摘要认证算法的实现。
- en: The Profiler Module
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析器模块
- en: This module features an interface to conduct a performance check of the application.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块提供了一个用于对应用程序进行性能检查的接口。
- en: The Sessions Module
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会话模块
- en: The Web is built on top of a stateless protocol, HTTP, which means that requests
    are independent of each other. In spite of that, a user can navigate an e-commerce
    website with the impression that the application more or less follows the way
    he or she would call the store to pass an order. The session mechanism was therefore
    brought to the Web to allow servers to keep track of users' information.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网建立在无状态协议 HTTP 之上，这意味着请求是相互独立的。尽管如此，用户在浏览电子商务网站时会有一种感觉，即应用程序或多或少地遵循他或她打电话给商店下订单的方式。因此，会话机制被引入互联网，以便服务器能够跟踪用户信息。
- en: 'CherryPy''s session module offers a straightforward interface to the application
    developer to store, retrieve, amend, and delete chunks of data from a session
    object. CherryPy comes natively with three different back-end storages for session
    objects:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy 的会话模块为应用程序开发者提供了一个直观的接口，用于存储、检索、修改和删除会话对象中的数据块。CherryPy 内置了三种不同的会话对象后端存储：
- en: '| Back-end type | Advantages | Drawbacks |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 后端类型 | 优点 | 缺点 |'
- en: '| --- | --- | --- |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| RAM | EfficientAccepts any type of objectsNo configuration needed | Information
    lost when server is shutdownMemory consumption can grow fast |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| RAM | 高效接受任何类型的对象无需配置 | 服务器关闭时信息丢失内存消耗可能快速增长 |'
- en: '| File system | Persistence of the informationSimple setup | File system locking
    can be inefficientOnly serializable (via the pickle module) objects can be stored
    |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 文件系统 | 信息持久化简单设置 | 文件系统锁定可能效率低下只能存储可序列化（通过 pickle 模块）的对象 |'
- en: '| Relational database (PostgreSQL built-in support) | Persistence of the informationRobustScalableCan
    be load balanced | Only serializable objects can be storedSetup less straightforward
    |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 关系型数据库（内置 PostgreSQL 支持） | 信息持久化健壮可扩展可进行负载均衡 | 只能存储可序列化的对象设置不太直观 |'
- en: The advantage is that your application will use a high-level interface independent
    of the underlying back end. Therefore, while in early development you may use
    RAM sessions, you can easily switch to the PostgreSQL back end if needed later
    on without modifying your application. Obviously CherryPy allows you to plug and
    use your own back end if needed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 优点是，你的应用程序将使用一个与底层后端无关的高级接口。因此，在早期开发中，你可能使用 RAM 会话，但如果你以后需要，可以轻松切换到 PostgreSQL
    后端，而无需修改你的应用程序。显然，CherryPy 允许你在需要时插入并使用自己的后端。
- en: The Static Module
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态模块
- en: Even the most dynamic application serves static resources such as images or
    CSS. CherryPy provides a module to ease the process of serving those or to even
    serve a complete directory structure. It will handle the underlying HTTP exchanges
    such as the use of the `If-Modified-Since` header, which checks if a resource
    has changed since a given date thus avoiding processing it again unnecessarily.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是最动态的应用程序也需要提供静态资源，如图像或 CSS。CherryPy 提供了一个模块，用于简化提供这些资源或提供完整目录结构的流程。它将处理底层的
    HTTP 交换，例如使用 `If-Modified-Since` 头部，该头部检查资源自给定日期以来是否已更改，从而避免不必要的再次处理。
- en: The Tidy Module
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tidy 模块
- en: Even though as a web application developer you should make sure the content
    generated by your application is clean and valid against standards it may happen
    that you have to serve content over which you do not have full control. In such
    a case CherryPy provides an easy way to filter the outgoing content by using tools
    such as `nsgml` or `tidy`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管作为网络应用程序开发者，你应该确保你应用程序生成的内容是干净且符合标准的，但可能发生你必须提供你无法完全控制的内容。在这种情况下，CherryPy
    提供了一种简单的方法，通过使用 `nsgml` 或 `tidy` 等工具来过滤输出内容。
- en: The Wsgiapp Module
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Wsgiapp 模块
- en: This module allows you to wrap any WSGI application to use as a CherryPy application.
    For more information on WSGI, please refer to[Chapter 4](ch04.html "Chapter 4. CherryPy
    in Depth").
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块允许你将任何 WSGI 应用程序包装为 CherryPy 应用程序。有关 WSGI 的更多信息，请参阅[第 4 章](ch04.html "第 4
    章。CherryPy 深入")。
- en: The XML-RPC Module
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XML-RPC 模块
- en: XML-RPC is a remote procedure call protocol using XML to format messages, transferred
    via HTTP, between an XML-RPC client and XML-RPC server. Basically, a client creates
    an XML document containing the name of the remote method to call and the values
    to be passed and then requests the server using an HTTP POST message. The returned
    HTTP response contains the XML document, as a string, to be processed by the client.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: XML-RPC 是一种使用 XML 格式消息的远程过程调用协议，通过 HTTP 在 XML-RPC 客户端和 XML-RPC 服务器之间传输。基本上，客户端创建一个包含要调用的远程方法名称和要传递的值的
    XML 文档，然后通过 HTTP POST 消息请求服务器。返回的 HTTP 响应包含一个作为字符串的 XML 文档，由客户端进行处理。
- en: The CherryPy xmlrpc module allows you to transform a published object into an
    XML-RPC service. CherryPy will extract, from the incoming XML document, the name
    of the method as well as the values and will apply the same logic as if it was
    a regular URI call, therefore looking for a matching page handler. Then when the
    page handler returns CherryPy wraps the content into a valid XML-RPC response
    and sends it back to the client.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy 的 xmlrpc 模块允许您将发布的对象转换为 XML-RPC 服务。CherryPy 将从传入的 XML 文档中提取方法名称以及值，并将应用与常规
    URI 调用相同的逻辑，因此寻找匹配的页面处理器。然后当页面处理器返回时，CherryPy 将内容包装成有效的 XML-RPC 响应并发送回客户端。
- en: The following code sample defines an XML-RPC service served by CherryPy.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例定义了一个由 CherryPy 提供的 XML-RPC 服务。
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Your XML-RPC client could look like this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 XML-RPC 客户端可能看起来像这样：
- en: '[PRE17]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tools
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具
- en: In the previous sections we have introduced the built-in modules. CherryPy provides
    a **unified interface**, referred as the **tool** interface, to call those modules
    or build and call your own modules.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们介绍了内置模块。CherryPy 提供了一个**统一接口**，称为**工具接口**，用于调用这些模块或构建并调用您自己的模块。
- en: 'Tools can be set up from three different contexts:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 工具可以从三个不同的上下文中设置：
- en: The configuration file or dictionary
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件或字典
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Attached to a particular page handler
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附属于特定的页面处理器
- en: It is not uncommon to decide to add extra processing to an object path matching
    a URI. In that case you might want to use a Python decorator around the page handler.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 决定向匹配 URI 的对象路径添加额外处理并不罕见。在这种情况下，您可能想在页面处理器周围使用 Python 装饰器。
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Making a library call with a higher-level interface
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用高级接口进行库调用
- en: Tools can be applied as regular Python callable objects.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 工具可以作为常规 Python 可调用对象应用。
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The previous line shows how to call the `accept` tool that looks up the provided
    media type within the requested `Accept HTTP` header.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的行显示了如何调用 `accept` 工具，该工具在请求的 `Accept HTTP` 标头中查找提供的媒体类型。
- en: Thanks to that unified interface it is possible to modify the underlying code
    of the tool without having to modify the application level itself.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了统一接口，可以修改工具的底层代码，而无需修改应用程序本身。
- en: Note
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A tool is an interface to extend CherryPy by plugging third-party components
    into the CherryPy engine.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 工具是通过将第三方组件插入 CherryPy 引擎来扩展 CherryPy 的接口。
- en: Error and Exception Handling
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误和异常处理
- en: CherryPy tries hard to help the developer see a web application as close as
    a rich application. This means that from your page handler you may raise a Python
    error or exception as in any other Python application. CherryPy will catch those
    and transform them into HTTP messages depending on the type of errors.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy 尽力帮助开发者将网络应用程序视为与丰富应用程序尽可能接近。这意味着您可以从页面处理器中引发 Python 错误或异常，就像在其他任何
    Python 应用程序中一样。CherryPy 会捕获这些错误并将它们转换为根据错误类型生成的 HTTP 消息。
- en: Note
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that when an exception is raised and not caught by any other part of the
    application, CherryPy will return the corresponding HTTP 500 error code.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当异常被引发且未被应用程序的其他部分捕获时，CherryPy 将返回相应的 HTTP 500 错误代码。
- en: For example, the following example will show the default behavior of CherryPy.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下示例将展示 CherryPy 的默认行为。
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![Error and Exception Handling](img/1848_03_04.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![错误和异常处理](img/1848_03_04.jpg)'
- en: As you can see CherryPy displays the complete traceback of the Python error.
    Although this is useful when developing the application, it might not be relevant
    in production mode. In that case, CherryPy returns simply a default message.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，CherryPy 显示了 Python 错误的完整跟踪信息。虽然这在开发应用程序时很有用，但在生产模式下可能并不相关。在这种情况下，CherryPy
    仅返回默认消息。
- en: '![Error and Exception Handling](img/1848_03_05.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![错误和异常处理](img/1848_03_05.jpg)'
- en: Note
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In development mode you can hide the tracebacks on error by using the `request.show_tracebacks`
    key in the `global` section of the configuration settings.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发模式下，您可以通过在配置设置的“全局”部分中使用 `request.show_tracebacks` 键来隐藏错误时的跟踪信息。
- en: CherryPy returns an HTTP error code 500 when it catches an error that is not
    handled otherwise by the application developer. The HTTP specification defines
    two sets of error codes, client errors in the 4xx range and server errors in the
    5xx range. The client errors indicate that the user agent has sent an invalid
    request (e.g. missing authentication credentials, requested resource not found
    or gone, etc.). The server errors inform the user agent that an event occurred
    that prevented the server fulfilling the request processing.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当 CherryPy 捕获到应用程序开发者未处理的错误时，它会返回 HTTP 错误代码 500。HTTP 规范定义了两套错误代码，4xx 范围内的客户端错误和
    5xx 范围内的服务器错误。客户端错误表示用户代理发送了无效的请求（例如，缺少身份验证凭据、请求的资源未找到或已删除等）。服务器错误通知用户代理发生了事件，阻止服务器完成请求处理。
- en: 'CherryPy provides a simple interface allowing the application developer to
    send the correct error code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy 提供了一个简单的接口，允许应用程序开发者发送正确的错误代码：
- en: '[PRE22]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `HTTPError` error will be trapped by the CherryPy engine, which will in
    turn use the error code and error message of the error as the status and body
    of the HTTP response to be sent.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`HTTPError` 错误将被 CherryPy 引擎捕获，然后它会使用错误代码和错误消息作为要发送的 HTTP 响应的状态和主体。'
- en: When raising that error, CherryPy sets the HTTP response body to the provided
    message and the HTTP header matching the error code defined.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 当引发该错误时，CherryPy 将 HTTP 响应主体设置为提供的信息，并将 HTTP 头部设置为与定义的错误代码匹配。
- en: '[PRE23]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The returned HTTP response will be:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的 HTTP 响应将是：
- en: '[PRE24]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![Error and Exception Handling](img/1848_03_06.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![错误和异常处理](img/1848_03_06.jpg)'
- en: '[PRE25]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![Error and Exception Handling](img/1848_03_07.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![错误和异常处理](img/1848_03_07.jpg)'
- en: You might wonder how to change the layout of the error page returned by CherryPy
    to integrate it with your own application. The way to achieve this is by using
    the configuration system.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道如何更改 CherryPy 返回的错误页面布局，以将其集成到自己的应用程序中。实现这一目标的方法是使用配置系统。
- en: '[PRE26]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `notfound.html` page:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`notfound.html` 页面：'
- en: '[PRE27]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![Error and Exception Handling](img/1848_03_08.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![错误和异常处理](img/1848_03_08.jpg)'
- en: When catching an `HTTPError` error CherryPy looks for an `error_page.xxx` (where
    `xxx` is the HTTP error code used) entry in the configuration for that page handler
    and uses it instead of the default template.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当捕获到 `HTTPError` 错误时，CherryPy 会查找该页面处理器的配置中的 `error_page.xxx`（其中 `xxx` 是使用的
    HTTP 错误代码）条目，并使用它而不是默认模板。
- en: As you can see CherryPy offers a very flexible and yet effective way to use
    your own page template for displaying friendlier error messages.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，CherryPy 提供了一种非常灵活且有效的使用自己的页面模板来显示更友好的错误消息的方法。
- en: Until now we have discussed the high-level handling of errors in CherryPy. However,
    it is possible to modify the internal processing used through the hook API as
    we will see in the next chapter.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了 CherryPy 中错误的高级处理。然而，我们可以通过钩子 API 修改内部处理，正如我们将在下一章中看到的。
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter should have introduced you to some of the core principles of CherryPy,
    HTTP, and the server engine as well as its configuration system. We have also
    briefly discussed the object publisher engine, which allows transparent mapping
    of a URI to an exposed Python object. Finally we briefly reviewed the core modules
    of the CherryPy library that enhance its capacities and the way CherryPy lets
    you handle errors. The next chapter will dive into CherryPy's internal components
    and features as well go into more detail about some topics already covered.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 本章应该已经向您介绍了 CherryPy、HTTP 和服务器引擎的一些核心原则，以及其配置系统。我们还简要讨论了对象发布引擎，它允许将 URI 透明映射到公开的
    Python 对象。最后，我们简要回顾了 CherryPy 库的核心模块，这些模块增强了其功能，以及 CherryPy 让您处理错误的方式。下一章将深入探讨
    CherryPy 的内部组件和功能，并更详细地介绍一些已经讨论过的主题。
