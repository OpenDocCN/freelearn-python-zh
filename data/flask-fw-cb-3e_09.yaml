- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Internationalization and Localization
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国际化和本地化
- en: Web applications are usually not limited to one geographical region or only
    serve people from one linguistic domain. For example, a web application intended
    for users in Europe will be expected to support more than one European language,
    such as German, French, Italian, and Spanish, as well as English. This chapter
    will cover the basics of how to enable support for multiple languages in a Flask
    application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序通常不仅限于一个地理区域，也不只是为来自一个语言领域的人提供服务。例如，旨在为欧洲用户设计的Web应用程序预计将支持多种欧洲语言，例如德语、法语、意大利语和西班牙语，以及英语。本章将介绍如何在Flask应用程序中启用对多种语言的支持。
- en: Adding support for a second language in any web application is a tricky affair.
    It increases the overhead a bit every time some change is made to the application,
    and this increases with the number of languages. There can be a number of things
    that need to be taken care of, apart from just changing the text, depending on
    the language. Some of the major things that need changing are currency, number,
    time, and date formatting.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何Web应用程序中添加对第二种语言的支持是一件棘手的事情。每次对应用程序进行更改时，都会增加一些开销，并且随着语言数量的增加而增加。除了更改文本之外，还需要注意许多其他事情，具体取决于语言。需要更改的一些主要事项包括货币、数字、时间和日期格式。
- en: '**Flask-Babel**, an extension that adds **internationalization** (**i18n**)
    and **localization** (**l10n**) support to any Flask application, provides a number
    of tools and techniques to make this process easy to implement.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**Flask-Babel**，一个为任何Flask应用程序添加**国际化**（**i18n**）和**本地化**（**l10n**）支持的扩展，提供了一些工具和技术，使此过程易于实现。'
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Adding a new language
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新语言
- en: Implementing lazy evaluation and the `gettext`/`ngettext` functions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现延迟评估和`gettext`/`ngettext`函数
- en: Implementing the global language-switching action
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现全局语言切换操作
- en: Adding a new language
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新语言
- en: By default, English is the language for applications built in Flask (and almost
    all web frameworks). In this recipe, we will add a second language to our application
    and add some translations for the display strings used in the application. The
    language displayed to the user will vary depending on the language that is currently
    set in the browser.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Flask（以及几乎所有Web框架）构建的应用程序的语言为英语。在本配方中，我们将向我们的应用程序添加第二种语言，并为应用程序中使用的显示字符串添加一些翻译。显示给用户的语言将取决于浏览器当前设置的语言。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will start with the installation of the `Flask-Babel` extension:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从安装`Flask-Babel`扩展开始：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This extension uses **Babel** and **pytz** to add i18n and l10n support to the
    application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此扩展使用**Babel**和**pytz**为应用程序添加i18n和l10n支持。
- en: We will use our catalog application from [*Chapter 5*](B19111_05.xhtml#_idTextAnchor273),
    *Web Forms* *with WTForms*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用来自[*第5章*](B19111_05.xhtml#_idTextAnchor273)，“*Web表单* *与WTForms*”的目录应用程序。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will use French as the second language. Follow these steps to achieve this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用法语作为第二种语言。按照以下步骤实现此功能：
- en: 'Start with the configuration part by creating an instance of the `Babel` class,
    using the `app` object in `my_app/__init__.py`. We will also specify all the languages
    that will be available here:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从创建`Babel`类的实例开始配置部分，使用`my_app/__init__.py`中的`app`对象。我们还将指定这里将可用的所有语言：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Here, we used `en` and `fr` as the language codes. These refer to English (standard)
    and French (standard), respectively. If we intend to support multiple languages
    that are from the same standard language origin, but differ on the basis of region,
    such as English (US) and English (GB), then we should use codes such as `en-us`
    and `en-gb`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了`en`和`fr`作为语言代码。这些分别代表英语（标准）和法语（标准）。如果我们打算支持来自同一标准语言起源的多种语言，但基于地区不同，例如英语（美国）和英语（英国），那么我们应该使用如`en-us`和`en-gb`之类的代码。
- en: 'The locale of the application depends on the output of the method that is provided
    while initializing the `babel` object:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序的区域设置取决于初始化`babel`对象时提供的方法的输出：
- en: '[PRE8]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding method gets the `accept_languages` header from the request and
    finds the language that best matches the languages we allow.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的方法从请求中获取`accept_languages`头，并找到与我们允许的语言最匹配的语言。
- en: Tip
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can change the language preferences of your browser to test the application’s
    behavior in another language.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以更改浏览器的语言首选项来测试应用程序在另一种语言中的行为。
- en: Earlier, it used to be pretty easy to change the language preferences in the
    browser, but with the locale becoming more ingrained in the OS, it has become
    difficult to do so without changing the global locale of the OS. Hence, if you
    do not want to mess with the language preferences of the browser or your OS, simply
    return the expected language code from the `get_locale()` method.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，更改浏览器中的语言首选项相对容易，但随着地区设置在操作系统中的更加根深蒂固，这样做变得困难，除非更改操作系统的全局地区设置。因此，如果您不想弄乱浏览器的语言首选项或操作系统的语言首选项，只需从
    `get_locale()` 方法返回预期的语言代码即可。
- en: 'Next, create a file in the application folder called `babel.cfg`. The path
    of this file will be `my_app/babel.cfg`, and it will have the following content:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在应用程序文件夹中创建一个名为 `babel.cfg` 的文件。此文件的路径为 `my_app/babel.cfg`，其内容如下：
- en: '[PRE12]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, the first two lines tell `Babel` about the filename patterns that are
    to be searched for marked translatable text.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，前两行告诉 `Babel` 要搜索标记为可翻译文本的文件名模式。
- en: Information
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: In earlier versions of this book, I suggested loading a couple of extensions
    from Jinja2, namely, `jinja2.ext.autoescape` and `jinja2.ext.with_`. But as of
    version 3.1.0 of Jinja, these modules have got built-in support and, hence, there
    is no need to load them separately now.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的早期版本中，我建议加载 Jinja2 的几个扩展，即 `jinja2.ext.autoescape` 和 `jinja2.ext.with_`。但自
    Jinja 3.1.0 版本起，这些模块已经内置了支持，因此现在没有必要单独加载它们。
- en: 'Next, mark some text that is intended to be translated as per the language.
    Let’s start with the first text we see when we start our application, which is
    in `home.html`:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，标记一些需要根据语言进行翻译的文本。让我们从启动应用程序时看到的第一个文本开始，该文本位于 `home.html` 中：
- en: '[PRE14]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, `_` is a shortcut for the `gettext` function provided by Babel to translate
    strings.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`_` 是 Babel 提供的 `gettext` 函数的快捷方式，用于翻译字符串。
- en: 'After this, run the following commands so that the marked text is actually
    available as translated text in our template when it is rendered in the browser:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，运行以下命令，以便在浏览器中渲染模板时，标记的文本实际上作为翻译文本可用：
- en: '[PRE21]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preceding command traverses the content of the files. This command matches
    the patterns in `babel.cfg` and picks out the texts that have been marked as translatable.
    All these texts are placed in the `my_app/messages.pot` file. The following is
    the output of the preceding command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令遍历文件的内容。此命令匹配 `babel.cfg` 中的模式，并挑选出标记为可翻译的文本。所有这些文本都放置在 `my_app/messages.pot`
    文件中。以下为上述命令的输出：
- en: '[PRE23]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the following command to create a `.po` file that will hold the translations
    for the texts to be translated into:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以创建一个 `.po` 文件，该文件将保存要翻译的文本的翻译：
- en: '[PRE24]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This file is created in the specified folder, `my_app/translations`, as `fr/LC_MESSAGES/messages.po`.
    As we add more languages, more folders will be added.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件在指定的文件夹 `my_app/translations` 中创建，名为 `fr/LC_MESSAGES/messages.po`。随着我们添加更多语言，将添加更多文件夹。
- en: 'Now, add translations to the `messages.po` file. This can be performed manually,
    or we can use GUI tools such as Poedit ([http://poedit.net/](http://poedit.net/)).
    Using this tool, the translations will look as in the following screenshot:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，向 `messages.po` 文件中添加翻译。这可以手动完成，或者我们可以使用诸如 Poedit ([http://poedit.net/](http://poedit.net/))
    这样的图形界面工具。使用此工具，翻译将看起来如下截图所示：
- en: '![Figure 9.1 – Poedit screen while editing translations](img/B19111_09_1.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1 – 编辑翻译时的 Poedit 屏幕](img/B19111_09_1.jpg)'
- en: Figure 9.1 – Poedit screen while editing translations
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 – 编辑翻译时的 Poedit 屏幕
- en: 'Manually editing `messages.po` will look as in the following code. Only one
    message translation is shown for demonstration purposes:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 手动编辑 `messages.po` 的样子如下所示。这里仅为了演示目的，只展示了一条消息的翻译：
- en: '[PRE26]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Save the `messages.po` file after the translations have been incorporated and
    run the following command:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将翻译合并到 `messages.po` 文件后保存，并运行以下命令：
- en: '[PRE27]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This will create a `messages.mo` file next to the `message.po` file, which will
    be used by the application to render the translated text.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 `message.po` 文件旁边创建一个 `messages.mo` 文件，该文件将由应用程序用于渲染翻译文本。
- en: Information
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: Sometimes, the messages do not get compiled after running the preceding command.
    This is because the messages might be marked as fuzzy (starting with a `#` symbol).
    These need to be looked into by a human, and the `#` sign has to be removed if
    the message is OK to be updated by the compiler. To bypass this check, add an
    `-f` flag to the preceding `compile` command, as it will force everything to be
    compiled.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在运行前面的命令后，消息没有得到编译。这是因为消息可能被标记为模糊（以 `#` 符号开头）。这些需要由人工检查，如果消息可以由编译器更新，则必须移除
    `#` 符号。为了绕过此检查，请在前面的 `compile` 命令中添加一个 `-f` 标志，因为它将强制编译所有内容。
- en: How it works...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If we run the application with French set as the primary language in the browser
    (or returned as the language of choice from the `get_locale()` method), the home
    page will look as in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中将应用程序的主要语言设置为法语（或从 `get_locale()` 方法返回的语言选择），主页将看起来如下截图所示：
- en: '![Figure 9.2 – Home page in French](img/B19111_09_2.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2 – 法语主页](img/B19111_09_2.jpg)'
- en: Figure 9.2 – Home page in French
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 法语主页
- en: If the primary language is set to a language other than French, then the content
    will be shown in English, which is the default language.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果主要语言设置为除法语以外的其他语言，则内容将以默认语言英语显示。
- en: There’s more…
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Next time, if there is a need to update the translations in our `messages.po`
    file, we do not need to call the `init` command again. Instead, we can run an
    `update` command, which is as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下次，如果需要更新我们的 `messages.po` 文件中的翻译，我们不需要再次调用 `init` 命令。相反，我们可以运行一个 `update` 命令，如下所示：
- en: '[PRE28]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: After this, run the `compile` command as usual.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，像往常一样运行 `compile` 命令。
- en: Information
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: It is often preferable to change the language of a website based on the user
    IP and location (determined from the IP). However, this is, in general, less recommended
    than using the accept-language header as we did in our application.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 根据用户的 IP 地址和位置（从 IP 地址确定）更改网站的语通常更可取，但总的来说，这不如使用我们在应用程序中使用过的 accept-language
    标头推荐。
- en: See also
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to the *Implementing the global language-switching action* recipe later
    in this chapter, which allows the user to change the language directly from the
    application rather than doing it at the browser level.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章后面的 *实现全局语言切换操作* 菜谱，它允许用户直接从应用程序而不是在浏览器级别更改语言。
- en: An important aspect of multiple languages is to be able to format the date,
    time, and currency accordingly. Babel also handles this pretty neatly. I urge
    you to try your hand at this. Refer to the Babel documentation, available at [http://babel.pocoo.org/en/latest/](http://babel.pocoo.org/en/latest/),
    for this.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 多语言的一个重要方面是能够相应地格式化日期、时间和货币。Babel 也处理得相当整洁。我敦促你尝试一下。有关此信息，请参阅 Babel 文档，可在 [http://babel.pocoo.org/en/latest/](http://babel.pocoo.org/en/latest/)
    找到。
- en: Implementing lazy evaluation and the gettext/ngettext functions
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现懒加载和 gettext/ngettext 函数
- en: Lazy evaluation is an evaluation strategy that delays the evaluation of an expression
    until its value is needed; that is, it is a call-when-needed mechanism. In our
    application, there can be several instances of texts that are evaluated later
    while rendering the template. This usually happens when we have texts that are
    marked as translatable outside the request context, so we defer the evaluation
    of these until they are actually needed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 懒加载是一种评估策略，它将表达式的评估延迟到其值需要时；也就是说，它是一个按需调用机制。在我们的应用程序中，可能会有几个文本实例在渲染模板时被延迟评估。这通常发生在我们标记为可翻译的文本位于请求上下文之外时，因此我们推迟这些文本的评估，直到它们实际需要时。
- en: Getting ready
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let’s start with the application from the previous recipe. Now, we want the
    labels in the product and category creation forms to show the translated values.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从上一个菜谱中的应用程序开始。现在，我们希望产品创建表单和分类创建表单中的标签显示翻译后的值。
- en: How to do it…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Follow these steps in order to implement the lazy evaluation of translations:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下步骤实现翻译的懒加载：
- en: 'To mark all the field labels in the product and category forms as translatable,
    make the following changes to `my_app/catalog/models.py`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将产品表单和分类表单中的所有字段标签标记为可翻译，请对 `my_app/catalog/models.py` 进行以下更改：
- en: '[PRE29]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Notice that all the field labels are enclosed within `_()` to be marked for
    translation.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，所有字段标签都被包含在 `_()` 中以标记为需要翻译。
- en: Now, run the `extract` and `update pybabel` commands to update the `messages.po`
    file, and then fill in the relevant translations and run the `compile` command.
    Refer to the previous recipe, *Adding a new language*, for details.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行`extract`和`update pybabel`命令以更新`messages.po`文件，然后填写相关翻译并运行`compile`命令。有关详细信息，请参阅之前的菜谱，*添加新语言*。
- en: 'Now, open the product creation page using the following link: `http://127.0.0.1:5000/product-create`.
    Does it work as expected? No! As most of us would have guessed by now, the reason
    for this behavior is that this text is marked for translation outside the request
    context.'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下链接打开产品创建页面：`http://127.0.0.1:5000/product-create`。它是否按预期工作？不！正如我们现在大多数人都会猜测的那样，这种行为的原因是这段文本在请求上下文之外被标记为需要翻译。
- en: 'To make this work, modify the `import` statement to the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要使此操作生效，修改`import`语句如下：
- en: '[PRE49]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now, we have more text to translate. Let’s say we want to translate the product
    creation flash message content, which looks like this:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们有更多文本需要翻译。假设我们想翻译产品创建的闪存消息内容，其外观如下：
- en: '[PRE50]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'To mark it as translatable, we cannot simply wrap the whole thing inside `_()`
    or `gettext()`. The `gettext()` function supports placeholders, which can be used
    as `%(name)s`. Using this, the preceding code will become something like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其标记为可翻译，我们不能简单地将整个内容包裹在`_()`或`gettext()`中。`gettext()`函数支持占位符，可以使用`%(name)s`作为。使用它，前面的代码将变成类似这样：
- en: '[PRE51]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The resulting translated text for this will be something like `La produit %(name)s
    a` `été créée`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个结果，翻译后的文本将类似于`La produit %(name)s a` `été créée`。
- en: 'There may be cases where we need to manage the translations based on the number
    of items, that is, singular or plural names. This is handled by the `ngettext()`
    method. Let’s take an example where we want to show the number of pages in our
    `products.html` template. For this, add the following code:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可能会有一些情况，我们需要根据项目数量来管理翻译，即单数或复数名称。这由`ngettext()`方法处理。让我们举一个例子，我们想在`products.html`模板中显示页数。为此，添加以下代码：
- en: '[PRE52]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Here, the template will render `page` if there is only one page, and `pages`
    if there is more than one page.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，模板将渲染`page`如果只有一个页面，如果有多个页面则渲染`pages`。
- en: 'It is interesting to note how this translation appears in the `messages.po`
    file:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是要注意这种翻译在`messages.po`文件中的显示方式：
- en: '[PRE54]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: How it works…
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Open the product creation form at `http://127.0.0.1:5000/product-create`. The
    following screenshot shows how it would look with translation to French:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 打开产品创建表单，网址为`http://127.0.0.1:5000/product-create`。以下截图显示了将其翻译成法语后的样子：
- en: "![Figure 9.3 – Form fields translated using l\uFEFFazy evaluation](img/B19111_09_3.jpg)"
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图9.3 – 使用惰性评估翻译的表单字段](img/B19111_09_3.jpg)'
- en: Figure 9.3 – Form fields translated using lazy evaluation
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – 使用惰性评估翻译的表单字段
- en: Implementing the global language-switching action
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现全局语言切换操作
- en: In the previous recipes, we saw that the language changes based on the current
    language preferences in the browser. Now, however, we want a mechanism where we
    can switch the language being used, irrespective of the language in the browser.
    In this recipe, we will understand how to handle changing the language at the
    application level.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的菜谱中，我们看到了语言变化是基于浏览器中的当前语言首选项。然而，现在我们想要一个机制，可以切换正在使用的语言，而不管浏览器的语言如何。在这个菜谱中，我们将了解如何在应用级别处理语言切换。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We start by modifying the application from the last recipe, *Implementing lazy
    evaluation and the gettext/ngettext functions*, to accommodate the changes to
    enable language switching. We will add an extra URL part to all our routes to
    allow us to add the current language. We can just change this language part in
    the URL in order to switch between languages.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从上一个菜谱中修改应用程序，即*实现惰性评估和gettext/ngettext函数*，以适应语言切换的更改。我们将为所有路由添加一个额外的URL部分，以便我们能够添加当前语言。我们只需更改URL中的语言部分即可在语言之间切换。
- en: How to do it…
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Observe the following steps to understand how to implement language switching
    globally:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下步骤以了解如何全局实现语言切换：
- en: First, modify all the URL rules to accommodate an extra URL part. `@catalog.route('/')`
    will become `@catalog.route('/<lang>/')`, and `@catalog.route('/home')` will become
    `@catalog.route('/<lang>/home')`. Similarly, `@catalog.route('/product-search/<int:page>')`
    will become `@catalog.route('/<lang>/product-search/<int:page>')`. The same needs
    to be done for all the URL rules.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，修改所有URL规则以适应额外的URL部分。`@catalog.route('/')`将变为`@catalog.route('/<lang>/')`，而`@catalog.route('/home')`将变为`@catalog.route('/<lang>/home')`。同样，`@catalog.route('/product-search/<int:page>')`将变为`@catalog.route('/<lang>/product-search/<int:page>')`。所有URL规则都需要这样做。
- en: 'Now, add a function that will add the language passed in the URL to the global
    proxy object, `g`:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加一个函数，该函数将URL中传递的语言添加到全局代理对象`g`中：
- en: '[PRE55]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This method will run before each request and add the current language to `g`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将在每个请求之前运行，并将当前语言添加到`g`中。
- en: 'However, this will mean that all the `url_for()` calls in the application need
    to be modified so that an extra parameter called `lang` can be passed. Fortunately,
    there is an easy way out of this, which is as follows:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，这意味着应用程序中所有的`url_for()`调用都需要修改，以便传递一个名为`lang`的额外参数。幸运的是，有一个简单的解决方案，如下所示：
- en: '[PRE61]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: In the preceding code, we first imported `url_for` from `flask` as `flask_url_for`.
    Then, we updated the application context processor to have the `url_for()` function,
    which is a modified version of `url_for()` provided by Flask in order to have
    `lang` as an extra parameter. Also, we used the same `url_for()` method that we
    used in our views.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们首先从`flask`中导入`url_for`作为`flask_url_for`。然后，我们更新了应用程序上下文处理器，使其具有`url_for()`函数，这是Flask提供的修改版`url_for()`，以便将`lang`作为额外参数。我们还使用了在视图中使用的相同`url_for()`方法。
- en: How it works…
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Now, run the application as it is, and you will notice that all the URLs have
    a language part. The following two screenshots show what the rendered templates
    will look like.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，以当前状态运行应用程序，你会注意到所有URL都有一个语言部分。以下两个截图显示了渲染的模板将看起来如何。
- en: 'For English, the following screenshot shows what the home page looks like after
    opening `http://127.0.0.1:5000/en/home`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对于英语，以下截图显示了打开`http://127.0.0.1:5000/en/home`后的首页外观：
- en: '![Figure 9.4 – Home page in English](img/B19111_09_4.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4 – 英语首页](img/B19111_09_4.jpg)'
- en: Figure 9.4 – Home page in English
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – 英语首页
- en: 'For French, just change the URL to `http://127.0.0.1:5000/fr/home`, and the
    home page will look like this:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 对于法语，只需将URL更改为`http://127.0.0.1:5000/fr/home`，首页将看起来像这样：
- en: '![Figure 9.5 – Home page in French](img/B19111_09_5.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5 – 法语首页](img/B19111_09_5.jpg)'
- en: Figure 9.5 – Home page in French
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – 法语首页
- en: There’s more…
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: There is more to l10n than just translating alphabetical languages. Different
    geographies follow different formats for numbers, decimals, currencies, and so
    on. For example, 1.5 million USD would be written as 1,5 Mio USD in Dutch, and
    123.56 in English would be written as 123,56 in French.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: l10n不仅仅是翻译字母语言。不同的地理区域遵循不同的数字、小数、货币等格式。例如，1.5百万美元在荷兰会被写成1,5 Mio USD，而123.56在英语中会被写成123,56在法语中。
- en: 'Babel makes it very easy to implement this kind of formatting. There is a whole
    suite of methods available for this purpose. Some examples follow:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Babel使得实现这种格式化非常容易。为此目的，有一整套方法可供选择。以下是一些示例：
- en: '[PRE72]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: You can read more about this at [https://babel.pocoo.org/en/latest/api/numbers.html#module-babel.numbers](https://babel.pocoo.org/en/latest/api/numbers.html#module-babel.numbers).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://babel.pocoo.org/en/latest/api/numbers.html#module-babel.numbers](https://babel.pocoo.org/en/latest/api/numbers.html#module-babel.numbers)了解更多相关信息。
- en: 'Part 3: Advanced Flask'
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分：高级Flask
- en: Once the web applications are built in Flask, the next question concerns how
    to test applications, followed by deployment, and finally, maintaining them. This
    final part of this book covers these important topics. This is where the book
    moves from being completely development-oriented to focusing on post-development
    activities.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在Flask中构建了Web应用程序，下一个问题就是如何测试应用程序，然后是部署，最后是维护它们。本书的这一部分涵盖了这些重要主题。这是本书从完全面向开发转向关注开发后活动的转折点。
- en: It is very important to test an application by writing unit tests, which allow
    for the introspection of code that has been written and also preemptively identifies
    any issues that might creep into further development of features. Once the application
    is built, you will want to measure the performance of the application in terms
    of clear metrics. [*Chapter 10*](B19111_10.xhtml#_idTextAnchor502) deals with
    these topics, among others.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编写单元测试来测试应用程序非常重要，这不仅可以对已编写的代码进行内省，还可以预先识别可能出现在功能进一步开发中的任何问题。一旦应用程序构建完成，你将希望从清晰的角度来衡量应用程序的性能。[第10章*](B19111_10.xhtml#_idTextAnchor502)讨论了这些主题以及其他内容。
- en: The next couple of chapters focus on various tools and techniques that can be
    leveraged to deploy a Flask web application on different platforms, ranging from
    cloud-native services to bare shell servers. You will read about how to use state-of-the-art
    technologies such as Docker and Kubernetes to effectively deploy your web applications.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几章重点介绍了各种工具和技术，这些工具和技术可以用来在不同的平台上部署Flask网络应用程序，从云原生服务到裸机服务器。你将了解到如何使用最先进的技术，如Docker和Kubernetes，来有效地部署你的网络应用程序。
- en: A new chapter on GPT has been added, which talks about how to integrate this
    cutting-edge technology with Flask for some popular use cases, and how to make
    your applications future-ready with AI.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 新增了一章关于GPT的内容，讨论了如何将这项前沿技术与Flask集成以应对一些常见用例，以及如何通过人工智能使你的应用程序面向未来。
- en: The final chapter is a collection of additional tips and tricks that can be
    used anywhere, based on specific use cases. There are many more such topics, but
    I have covered the ones that I have dealt with most frequently.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一章收集了一些可以在任何特定用例中使用的额外技巧和窍门。还有更多这样的主题，但我主要涵盖了那些我处理得最多的。
- en: 'This part of the book comprises the following chapters:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分的书包括以下章节：
- en: '[*Chapter 10*](B19111_10.xhtml#_idTextAnchor502)*, Debugging, Error Handling,
    and Testing*'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B19111_10.xhtml#_idTextAnchor502)*，调试、错误处理和测试*'
- en: '*Chapter 11, Deployment and Post-Deployment*'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第11章，部署和部署后*'
- en: '[*Chapter 12*](B19111_12.xhtml#_idTextAnchor675)*, Microservices and Containers*'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B19111_12.xhtml#_idTextAnchor675)*，微服务和容器*'
- en: '[*Chapter 13*](B19111_13.xhtml#_idTextAnchor721)*, GPT with Flask*'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B19111_13.xhtml#_idTextAnchor721)*，使用Flask的GPT*'
- en: '[*Chapter 14*](B19111_14.xhtml#_idTextAnchor758)*, Additional Tips and Tricks*'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第14章*](B19111_14.xhtml#_idTextAnchor758)*，额外的技巧和窍门*'
