- en: Chapter 1. Django Testing Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Django测试概述
- en: How do you know when code you have written is working as intended? Well, you
    test it. But how? For a web application, you can test the code by manually bringing
    up the pages of your application in a web browser and verifying that they are
    correct. This involves more than a quick glance to see whether they have the correct
    content, as you must also ensure, for example, that all the links work and that
    any forms work properly. As you can imagine, this sort of manual testing quickly
    becomes impossible to rely on as an application grows beyond a few simple pages.
    For any non-trivial application, automated testing is essential.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您如何知道您编写的代码是否按预期工作？好吧，您测试它。但是如何测试？对于Web应用程序，您可以通过手动在Web浏览器中打开应用程序的页面并验证它们是否正确来测试代码。这不仅涉及快速浏览以查看它们是否具有正确的内容，还必须确保例如所有链接都有效，任何表单都能正常工作等。正如您可以想象的那样，这种手动测试很快就会在应用程序增长到几个简单页面以上时变得不可靠。对于任何非平凡的应用程序，自动化测试是必不可少的。
- en: 'Automated testing of Django applications makes use of the fundamental test
    support built-in to the Python language: doctests and unit tests. When you create
    a new Django application with `manage.py startapp`, one of the generated files
    contains a sample doctest and unit test, intended to jump-start your own test
    writing. In this chapter, we will begin our study of testing Django applications.
    Specifically, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Django应用程序的自动化测试利用了Python语言内置的基本测试支持：doctests和单元测试。当您使用`manage.py startapp`创建一个新的Django应用程序时，生成的文件之一包含一个样本doctest和单元测试，旨在加速您自己的测试编写。在本章中，我们将开始学习测试Django应用程序。具体来说，我们将：
- en: Examine in detail the contents of the sample `tests.py` file, reviewing the
    fundamentals of Python's test support as we do so
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细检查样本`tests.py`文件的内容，同时回顾Python测试支持的基本知识
- en: See how to use Django utilities to run the tests contained in `tests.py`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看如何使用Django实用程序来运行`tests.py`中包含的测试
- en: Learn how to interpret the output of the tests, both when the tests succeed
    and when they fail
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何解释测试的输出，无论测试成功还是失败
- en: Review the effects of the various command-line options that can be used when
    testing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查可以在测试时使用的各种命令行选项的影响
- en: 'Getting started: Creating a new application'
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门：创建一个新应用程序
- en: 'Let''s get started by creating a new Django project and application. Just so
    we have something consistent to work with throughout this book, let''s assume
    we are setting out to create a new market-research type website. At this point,
    we don''t need to decide much about this site except some names for the Django
    project and at least one application that it will include. As `market_research`
    is a bit long, let''s shorten that to `marketr` for the project name. We can use
    `django-admin.py` to create a new Django project:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建一个新的Django项目和应用程序。为了在整本书中有一致的工作内容，让我们假设我们打算创建一个新的市场调研类型的网站。在这一点上，我们不需要对这个网站做出太多决定，只需要为Django项目和至少一个将包含的应用程序取一些名称。由于`market_research`有点长，让我们将其缩短为`marketr`作为项目名称。我们可以使用`django-admin.py`来创建一个新的Django项目：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, from within the new `marketr` directory, we can create a new Django application
    using the `manage.py` utility. One of the core applications for our market research
    project will be a survey application, so we will start by creating it:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从新的`marketr`目录中，我们可以使用`manage.py`实用程序创建一个新的Django应用程序。我们市场调研项目的核心应用程序之一将是一个调查应用程序，因此我们将从创建它开始：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we have the basic skeleton of a Django project and application: a `settings.py`
    file, a `urls.py` file, the `manage.py` utility, and a `survey` directory containing
    `.py` files for models, views, and tests. There is nothing of substance placed
    in the auto-generated models and views files, but in the `tests.py` file there
    are two sample tests: one unit test and one doctest. We will examine each in detail
    next.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了Django项目和应用程序的基本框架：`settings.py`文件，`urls.py`文件，`manage.py`实用程序，以及一个包含模型、视图和测试的`survey`目录。自动生成的模型和视图文件中没有实质性内容，但在`tests.py`文件中有两个样本测试：一个单元测试和一个doctest。接下来我们将详细检查每个测试。
- en: Understanding the sample unit test
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解样本单元测试
- en: 'The unit test is the first test contained in `tests.py`, which begins:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是`tests.py`中包含的第一个测试，它开始于：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The unit test starts by importing `TestCase` from `django.test`. The `django.test.TestCase`
    class is based on Python''s `unittest.TestCase`, so it provides everything from
    the underlying Python `unittest.TestCase` plus features useful for testing Django
    applications. These Django extensions to `unittest.TestCase` will be covered in
    detail in [Chapter 3](ch03.html "Chapter 3. Testing 1, 2, 3: Basic Unit Testing"),
    *Testing 1, 2, 3: Basic Unit Testing* and [Chapter 4](ch04.html "Chapter 4. Getting
    Fancier: Django Unit Test Extensions"), *Getting Fancier: Django Unit Test Extensions*.
    The sample unit test here doesn''t actually need any of that support, but it does
    not hurt to base the sample test case on the Django class anyway.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试从`django.test`中导入`TestCase`开始。`django.test.TestCase`类基于Python的`unittest.TestCase`，因此它提供了来自基础Python`unittest.TestCase`的一切，以及对测试Django应用程序有用的功能。这些对`unittest.TestCase`的Django扩展将在[第3章](ch03.html
    "第3章。测试1, 2, 3：基本单元测试")和[第4章](ch04.html "第4章。变得更花哨：Django单元测试扩展")中详细介绍。这里的样本单元测试实际上并不需要任何支持，但是将样本测试用例基于Django类也没有坏处。
- en: 'The sample unit test then declares a `SimpleTest` class based on Django''s
    `TestCase`, and defines a test method named `test_basic_addition` within that
    class. That method contains a single statement:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，样本单元测试声明了一个基于Django的`TestCase`的`SimpleTest`类，并在该类中定义了一个名为`test_basic_addition`的测试方法。该方法包含一条语句：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you might expect, that statement will cause the test case to report a failure
    unless the two provided arguments are equal. As coded, we'd expect that test to
    succeed. We'll verify that later in this chapter, when we get to actually running
    the tests. But first, let's take a closer look at the sample doctest.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所期望的那样，该语句将导致测试用例报告失败，除非两个提供的参数相等。按照编码的方式，我们期望该测试会成功。我们将在本章稍后验证这一点，当我们实际运行测试时。但首先，让我们更仔细地看一下示例doctest。
- en: Understanding the sample doctest
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解示例doctest
- en: 'The doctest portion of the sample `tests.py` is:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 示例`tests.py`的doctest部分是：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That looks a bit more mysterious than the unit test half. For the sample doctest,
    a special variable, `__test__`, is declared. This variable is set to be a dictionary
    containing one key, `doctest`. This key is set to a string value that resembles
    a docstring containing a comment followed by what looks like a snippet from an
    interactive Python shell session.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来比单元测试部分更神秘。对于示例doctest，声明了一个特殊变量`__test__`。这个变量被设置为包含一个键`doctest`的字典。这个键被设置为一个类似于包含注释后面的字符串值的docstring，后面跟着一个看起来像是交互式Python
    shell会话的片段。
- en: The part that looks like an interactive Python shell session is what makes up
    the doctest. That is, lines that start with `>>>` will be executed (minus the
    `>>>` prefix) during the test, and the actual output produced will be compared
    to the expected output found in the doctest below the line that starts with `>>>`.
    If any actual output fails to match the expected output, the test fails. For this
    sample test, we would expect entering `1 + 1 == 2` in an interactive Python shell
    session to result in the interpreter producing the output `True`, so again it
    looks like this sample test should pass.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来像交互式Python shell会话的部分就是doctest的组成部分。也就是说，以`>>>`开头的行将在测试期间执行（减去`>>>`前缀），并且实际产生的输出将与doctest中以`>>>`开头的行下面找到的预期输出进行比较。如果任何实际输出与预期输出不匹配，则测试失败。对于这个示例测试，我们期望在交互式Python
    shell会话中输入`1 + 1 == 2`会导致解释器产生输出`True`，所以看起来这个示例测试应该通过。
- en: Note that doctests do not have to be defined by using this special `__test__`
    dictionary. In fact, Python's doctest test runner looks for doctests within all
    the docstrings found in the file. In Python, a docstring is a string literal that
    is the first statement in a module, function, class, or method definition. Given
    that, you'd expect snippets from an interactive Python shell session found in
    the comment at the very top of this `tests.py` file to also be run as a doctest.
    This is another thing we can experiment with once we start running these tests,
    which we'll do next.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，doctests不必通过使用特殊的`__test__`字典来定义。实际上，Python的doctest测试运行器会查找文件中所有文档字符串中的doctests。在Python中，文档字符串是模块、函数、类或方法定义中的第一条语句。鉴于此，你会期望在`tests.py`文件顶部的注释中找到的交互式Python
    shell会话片段也会作为doctest运行。这是我们开始运行这些测试后可以尝试的另一件事情。
- en: Running the sample tests
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行示例测试
- en: 'The comment at the top of the sample `tests.py` file states that the two tests:
    `will both pass when you run "manage.py test"`. So let''s see what happens if
    we try that:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 示例`tests.py`文件顶部的注释说明了两个测试：`当你运行"manage.py test"时都会通过`。所以让我们看看如果我们尝试那样会发生什么：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Oops, we seem to have gotten ahead of ourselves here. We created our new Django
    project and application, but never edited the settings file to specify any database
    information. Clearly we need to do that in order to run the tests.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，我们似乎有点超前了。我们创建了新的Django项目和应用程序，但从未编辑设置文件以指定任何数据库信息。显然，我们需要这样做才能运行测试。
- en: But will the tests use the production database we specify in `settings.py`?
    That could be worrisome, since we might at some point code something in our tests
    that we wouldn't necessarily want to do to our production data. Fortunately, it's
    not a problem. The Django test runner creates an entirely new database for running
    the tests, uses it for the duration of the tests, and deletes it at the end of
    the test run. The name of this database is `test_` followed by `DATABASE_NAME`
    specified in `settings.py`. So running tests will not interfere with production
    data.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但测试是否会使用我们在`settings.py`中指定的生产数据库？这可能令人担忧，因为我们可能在某个时候在我们的测试中编写了一些我们不希望对我们的生产数据执行的操作。幸运的是，这不是问题。Django测试运行器为运行测试创建了一个全新的数据库，使用它来运行测试，并在测试运行结束时删除它。这个数据库的名称是`test_`后跟`settings.py`中指定的`DATABASE_NAME`。因此，运行测试不会干扰生产数据。
- en: 'In order to run the sample `tests.py` file, we need to first set appropriate
    values for `DATABASE_ENGINE`, `DATABASE_NAME`, and whatever else may be required
    for the database we are using in `settings.py`. Now would also be a good time
    to add our `survey` application and `django.contrib.admin` to `INSTALLED_APPS`,
    as we will need both of those as we proceed. Once those changes have been made
    to `settings.py`, `manage.py test` works better:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行示例`tests.py`文件，我们需要首先为`DATABASE_ENGINE`、`DATABASE_NAME`和`settings.py`中使用的数据库所需的其他任何内容设置适当的值。现在也是一个好时机将我们的`survey`应用程序和`django.contrib.admin`添加到`INSTALLED_APPS`中，因为我们在继续进行时会需要这两个。一旦这些更改已经在`settings.py`中进行了，`manage.py
    test`就能更好地工作：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'That looks good. But what exactly got tested? Towards the end it says `Ran
    35 tests`, so there were certainly more tests run than the two tests in our simple
    `tests.py` file. The other 33 tests are from the other applications listed by
    default in `settings.py`: auth, content types, sessions, and sites. These Django
    "contrib" applications ship with their own tests, and by default, `manage.py test`
    runs the tests for all applications listed in `INSTALLED_APPS`.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错。但到底测试了什么？在最后，它说`Ran 35 tests`，所以肯定运行了比我们简单的`tests.py`文件中的两个测试更多的测试。其他33个测试来自`settings.py`中默认列出的其他应用程序：auth、content
    types、sessions和sites。这些Django“contrib”应用程序附带了它们自己的测试，并且默认情况下，`manage.py test`会运行`INSTALLED_APPS`中列出的所有应用程序的测试。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that if you do not add `django.contrib.admin` to the `INSTALLED_APPS` list
    in `settings.py`, then `manage.py test` may report some test failures. With Django
    1.1, some of the tests for `django.contrib.auth` rely on `django.contrib.admin`
    also being included in `INSTALLED_APPS` in order for the tests to pass. That inter-dependence
    may be fixed in the future, but for now it is easiest to avoid the possible errors
    by including `django.contrib.admin` in `INTALLED_APPS` from the start. We will
    want to use it soon enough anyway.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您没有将`django.contrib.admin`添加到`settings.py`中的`INSTALLED_APPS`列表中，则`manage.py
    test`可能会报告一些测试失败。对于Django 1.1，`django.contrib.auth`的一些测试依赖于`django.contrib.admin`也包含在`INSTALLED_APPS`中，以便测试通过。这种相互依赖关系可能会在将来得到修复，但是现在最简单的方法是从一开始就将`django.contrib.admin`包含在`INTALLED_APPS`中，以避免可能的错误。无论如何，我们很快就会想要使用它。
- en: 'It is possible to run just the tests for certain applications. To do this,
    specify the application names on the command line. For example, to run only the
    `survey` application tests:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可以仅运行特定应用程序的测试。要做到这一点，在命令行上指定应用程序名称。例如，仅运行`survey`应用程序的测试：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There—`Ran 2 tests` looks right for our sample `tests.py` file. But what about
    all those messages about tables being created and indexes being installed? Why
    were the tables for these applications created when their tests were not going
    to be run? The reason for this is that the test runner does not know what dependencies
    may exist between the application(s) that are going to be tested and others listed
    in `INSTALLED_APPS` that are not going to be tested.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里——`Ran 2 tests`看起来适合我们的样本`tests.py`文件。但是关于创建表和安装索引的所有这些消息呢？为什么这些应用程序的表在不进行测试时被创建？这是因为测试运行程序不知道将要测试的应用程序与`INSTALLED_APPS`中列出的其他不打算进行测试的应用程序之间可能存在的依赖关系。
- en: For example, our survey application could have a model with a `ForeignKey` to
    the `django.contrib.auth User` model, and tests for the survey application may
    rely on being able to add and query `User` entries. This would not work if the
    test runner neglected to create tables for the applications excluded from testing.
    Therefore, the test runner creates the tables for all applications listed in `INSTALLED_APPS`,
    even those for which tests are not going to be run.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们的调查应用程序可能具有一个模型，其中包含对`django.contrib.auth User`模型的`ForeignKey`，并且调查应用程序的测试可能依赖于能够添加和查询`User`条目。如果测试运行程序忽略了对不进行测试的应用程序创建表，这将无法工作。因此，测试运行程序为`INSTALLED_APPS`中列出的所有应用程序创建表，即使不打算运行测试的应用程序也是如此。
- en: We now know how to run tests, how to limit the testing to just the application(s)
    we are interested in, and what a successful test run looks like. But, what about
    test failures? We're likely to encounter a fair number of those in real work,
    so it would be good to make sure we understand the test output when they occur.
    In the next section, then, we will introduce some deliberate breakage so that
    we can explore what failures look like and ensure that when we encounter real
    ones, we will know how to properly interpret what the test run is reporting.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道如何运行测试，如何将测试限制在我们感兴趣的应用程序上，以及成功的测试运行是什么样子。但是，测试失败呢？在实际工作中，我们可能会遇到相当多的失败，因此确保我们了解测试输出在发生时的情况是很重要的。因此，在下一节中，我们将引入一些故意的破坏，以便我们可以探索失败的样子，并确保当我们遇到真正的失败时，我们将知道如何正确解释测试运行的报告。
- en: Breaking things on purpose
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故意破坏事物
- en: 'Let''s start by introducing a single, simple failure. Change the unit test
    to expect that adding `1 + 1` will result in `3` instead of `2`. That is, change
    the single statement in the unit test to be: `self.failUnlessEqual(1 + 1, 3)`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先引入一个单一的简单失败。更改单元测试，期望将`1 + 1`加上`3`而不是`2`。也就是说，更改单元测试中的单个语句为：`self.failUnlessEqual(1
    + 1, 3)`。
- en: 'Now when we run the tests, we will get a failure:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们运行测试时，我们会得到一个失败：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: That looks pretty straightforward. The failure has produced a block of output
    starting with a line of equal signs and then the specifics of the test that has
    failed. The failing method is identified, as well as the class containing it.
    There is a `Traceback` that shows the exact line of code that has generated the
    failure, and the `AssertionError` shows details of the cause of the failure.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来相当简单。失败产生了一块以等号开头的输出，然后是失败的测试的具体内容。失败的方法被识别出来，以及包含它的类。有一个`Traceback`显示了生成失败的确切代码行，`AssertionError`显示了失败原因的细节。
- en: Notice the line above the equal signs—it contains a bunch of dots and one `F`.
    What does that mean? This is a line we overlooked in the earlier test output listings.
    If you go back and look at them now, you'll see there has always been a line with
    some number of dots after the last `Installing index` message. This line is generated
    as the tests are run, and what is printed depends on the test results. `F` means
    a test has failed, dot means a test passed. When there are enough tests that they
    take a while to run, this real-time progress update can be useful to get a sense
    of how the run is going while it is in progress.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意等号上面的那一行——它包含一堆点和一个`F`。这是什么意思？这是我们在早期测试输出列表中忽略的一行。如果你现在回去看一下，你会发现在最后一个`Installing
    index`消息之后一直有一行点的数量。这行是在运行测试时生成的，打印的内容取决于测试结果。`F`表示测试失败，点表示测试通过。当有足够多的测试需要一段时间来运行时，这种实时进度更新可以帮助我们在运行过程中了解运行的情况。
- en: Finally at the end of the test output, we see `FAILED (failures=1)` instead
    of the `OK` we had seen previously. Any test failures make the overall test run
    outcome a failure instead of a success.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在测试输出的末尾，我们看到`FAILED (failures=1)`而不是之前看到的`OK`。任何测试失败都会使整体测试运行的结果变成失败，而不是成功。
- en: 'Next, let''s see what a failing doctest looks like. If we restore the unit
    test back to its original form and change the doctest to expect the Python interpreter
    to respond `True` to `1 + 1 == 3`, running the tests (restricting the tests to
    only the `survey` application this time) will then produce this output:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看一个失败的doctest是什么样子。如果我们将单元测试恢复到其原始形式，并将doctest更改为期望Python解释器对`1 + 1
    == 3`作出`True`的回应，那么运行测试（这次只限制在`survey`应用程序中进行测试）将产生以下输出：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The output from the failing doctest is a little more verbose and a bit less
    straightforward to interpret than the unit test failure. The failing doctest is
    identified as `survey.tests.__test__.doctest`—this means the key `doctest` in
    the `__test__` dictionary defined within the `survey/tests.py` file. The `Traceback`
    portion of the output is not as useful as it was in the unit test case as the
    `AssertionError` simply notes that the doctest failed. Fortunately, details of
    what caused the failure are then provided, and you can see the content of the
    line that caused the failure, what output was expected, and what output was actually
    produced by executing the failing line.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 失败的doctest的输出比单元测试失败的输出稍微冗长，解释起来也没有那么直接。失败的doctest被标识为`survey.tests.__test__.doctest`——这意味着在`survey/tests.py`文件中定义的`__test__`字典中的`doctest`键。输出的`Traceback`部分不像在单元测试案例中那样有用，因为`AssertionError`只是指出doctest失败了。幸运的是，随后提供了导致失败的原因的详细信息，您可以看到导致失败的行的内容，期望的输出以及执行失败行产生的实际输出。
- en: 'Note, though, that the test runner does not pinpoint the line number within
    `tests.py` where the failure occurred. It reports `unknown line number` and `line
    ?` in different portions of the output. Is this a general problem with doctests
    or perhaps a result of the way in which this particular doctest is defined, as
    part of the `__test__` dictionary? We can answer that question by putting a test
    in the docstring at the top of `tests.py`. Let''s restore the sample doctest to
    its original state and change the top of the file to look like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，测试运行器没有准确定位`tests.py`中发生失败的行号。它报告了不同部分的`未知行号`和`第?行`。这是doctest的一般问题还是这个特定doctest的定义方式的结果，作为`__test__`字典的一部分？我们可以通过在`tests.py`顶部的文档字符串中放置一个测试来回答这个问题。让我们将示例doctest恢复到其原始状态，并将文件顶部更改为如下所示：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then when we run the tests we get:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后当我们运行测试时，我们得到：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here line numbers are provided. The `Traceback` portion apparently identifies
    the line above the line where the docstring containing the failing test line begins
    (the docstring starts on `line 1` while the traceback reports `line 0`). The detailed
    failure output identifies the actual line in the file that causes the failure,
    in this case `line 7`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提供了行号。`Traceback`部分显然标识了包含失败测试行的文档字符串开始的行的上面一行（文档字符串从`第1行`开始，而回溯报告`第0行`）。详细的失败输出标识了导致失败的文件中的实际行，本例中为`第7行`。
- en: The inability to pinpoint line numbers is thus a side-effect of defining the
    doctest within the `__test__` dictionary. While it doesn't cause much of a problem
    here, as it is trivial to see what line is causing the problem in our simple test,
    it's something to keep in mind when writing more substantial doctests to be placed
    in the `__test__` dictionary. If multiple lines in the test are identical and
    one of them causes a failure, it may be difficult to identify which exact line
    is causing the problem, as the failure output won't identify the specific line
    number where the failure occurred.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 无法准确定位行号因此是在`__test__`字典中定义doctest的副作用。虽然在我们简单的测试中很容易看出哪一行导致了问题，但在编写更实质性的doctest放置在`__test__`字典中时，这是需要牢记的事情。如果测试中的多行是相同的，并且其中一行导致失败，可能很难确定导致问题的确切行号，因为失败输出不会标识发生失败的具体行号。
- en: So far all of the mistakes we have introduced into the sample tests have involved
    expected output not matching actual results. These are reported as test failures.
    In addition to test failures, we may sometimes encounter test errors. These are
    described next.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在样本测试中引入的所有错误都涉及预期输出与实际结果不匹配。这些被报告为测试失败。除了测试失败，有时我们可能会遇到测试错误。接下来描述这些。
- en: Test errors versus test failures
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试错误与测试失败
- en: 'To see what a test error looks like, let''s remove the failing doctest introduced
    in the previous section and introduce a different kind of mistake into our sample
    unit test. Let''s assume that instead of wanting to test that `1 + 1` equals the
    literal `2`, we want to test that it equals the result of a function, `sum_args`,
    that is supposed to return the sum of its arguments. But we''re going to make
    a mistake and forget to import that function. So change `self.failUnlessEqual`
    to:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 看看测试错误是什么样子，让我们删除上一节介绍的失败的doctest，并在我们的样本单元测试中引入一种不同类型的错误。假设我们想要测试`1 + 1`是否等于文字`2`，而是想要测试它是否等于一个函数`sum_args`的结果，该函数应该返回其参数的总和。但我们会犯一个错误，忘记导入该函数。所以将`self.failUnlessEqual`改为：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now when the tests are run we see:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当运行测试时，我们看到：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The test runner encountered an exception before it even got to the point where
    it could compare `1 + 1` to the return value of `sum_args`, as `sum_args` was
    not imported. In this case, the error is in the test itself, but it would still
    have been reported as an error, not a failure, if the code in `sum_args` was what
    caused a problem. Failures mean actual results didn't match what was expected,
    whereas errors mean some other problem (exception) was encountered during the
    test run. Errors may imply a mistake in the test itself, but don't necessarily
    have to imply that.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 测试运行器在甚至比较`1 + 1`和`sum_args`的返回值之前就遇到了异常，因为`sum_args`没有被导入。在这种情况下，错误在于测试本身，但如果`sum_args`中的代码引起问题，它仍然会被报告为错误，而不是失败。失败意味着实际结果与预期结果不匹配，而错误意味着在测试运行期间遇到了一些其他问题（异常）。错误可能暗示测试本身存在错误，但不一定必须意味着如此。
- en: 'Note that a similar error made in a doctest is reported as a failure, not an
    error. For example, we can change the doctest `1 + 1` line to:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在doctest中发生的类似错误会报告为失败，而不是错误。例如，我们可以将doctest的`1 + 1`行更改为：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If we then run the tests, the output will be:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行测试，输出将是：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Thus, the error versus failure distinction made for unit tests does not necessarily
    apply to doctests. So, if your tests include doctests, the summary of failure
    and error counts printed at the end doesn't necessarily reflect how many tests
    produced unexpected results (unit test failure count) or had some other error
    (unit test error count). However, in any case, neither failures nor errors are
    desired. The ultimate goal is to have zero for both, so if the difference between
    them is a bit fuzzy at times that's not such a big deal. It can be useful though,
    to understand under what circumstances one is reported instead of the other.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于单元测试所做的错误与失败的区分并不一定适用于doctests。因此，如果您的测试包括doctests，则在最后打印的失败和错误计数摘要并不一定反映出产生意外结果的测试数量（单元测试失败计数）或出现其他错误的测试数量（单元测试错误计数）。但是，在任何情况下，都不希望出现失败或错误。最终目标是两者都为零，因此如果它们之间的差异有时有点模糊，那也没什么大不了的。不过，了解在什么情况下报告一个而不是另一个可能是有用的。
- en: We have now seen how to run tests, and what the results look like for both overall
    success and a few failures and errors. Next we will examine the various command
    line options supported by the `manage.py test` command.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了如何运行测试，以及整体成功和一些失败和错误的结果是什么样子。接下来，我们将研究`manage.py test`命令支持的各种命令行选项。
- en: Command line options for running tests
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行测试的命令行选项
- en: 'Beyond specifying the exact applications to test on the command line, what
    other options are there for controlling the behavior of `manage.py` test? The
    easiest way to find out is to try running the command with the option `--help`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在命令行上指定要测试的确切应用程序之外，还有哪些控制`manage.py` test行为的选项？找出的最简单方法是尝试使用`--help`选项运行命令：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s consider each of these in turn (excepting `help`, as we''ve already
    seen what it does):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们依次考虑每个（除了`help`，因为我们已经看到它的作用）：
- en: Verbosity
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 冗长度
- en: 'Verbosity is a numeric value between `0` and `2`. It controls how much output
    the tests produce. The default value is `1`, so the output we have seen so far
    corresponds to specifying `-v 1` or `--verbosity=1`. Setting verbosity to `0`
    suppresses all of the messages about creating the test database and tables, but
    not summary, failure, or error information. If we correct the last doctest failure
    introduced in the previous section and re-run the tests specifying `-v0`, we will
    see:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 冗长度是一个介于`0`和`2`之间的数字值。它控制测试产生多少输出。默认值为`1`，因此到目前为止我们看到的输出对应于指定`-v 1`或`--verbosity=1`。将冗长度设置为`0`会抑制有关创建测试数据库和表的所有消息，但不包括摘要、失败或错误信息。如果我们纠正上一节引入的最后一个doctest失败，并重新运行指定`-v0`的测试，我们将看到：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Setting verbosity to `2` produces a great deal more output. If we fix this
    remaining error and run the tests with verbosity set to its highest level, we
    will see:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将冗长度设置为`2`会产生更多的输出。如果我们修复这个剩下的错误，并将冗长度设置为最高级别运行测试，我们将看到：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '****As you can see, at this level of verbosity the command reports in excruciating
    detail all of what it is doing to set up the test database. In addition to the
    creation of database tables and indexes that we saw earlier, we now see that the
    database setup phase includes:****'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，以这种详细程度，该命令报告了设置测试数据库所做的一切细节。除了我们之前看到的创建数据库表和索引之外，我们现在看到数据库设置阶段包括：
- en: '****Running `post-syncdb` signal handlers. The `django.contrib.auth` application,
    for example, uses this signal to automatically add permissions for models as each
    application is installed. Thus you see messages about permissions being created
    as the `post-syncdb` signal is sent for each application listed in `INSTALLED_APPS`.****'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`post-syncdb`信号处理程序。例如，`django.contrib.auth`应用程序使用此信号在安装每个应用程序时自动添加模型的权限。因此，您会看到有关在为`INSTALLED_APPS`中列出的每个应用程序发送`post-syncdb`信号时创建权限的消息。
- en: '****Running custom SQL for each model that has been created in the database.
    Based on the output, it does not look like any of the applications in `INSTALLED_APPS`
    use custom SQL.****'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为数据库中已创建的每个模型运行自定义SQL。根据输出，似乎`INSTALLED_APPS`中的任何应用程序都没有使用自定义SQL。
- en: '****Loading `initial_data` fixtures. Initial data fixtures are a way to automatically
    pre-populate the database with some constant data. None of the applications we
    have listed in `INSTALLED_APPS` make use of this feature, but a great deal of
    output is produced as the test runner looks for initial data fixtures, which may
    be found under any of several different names. There are messages for each possible
    file that is checked and for whether anything was found. This output might come
    in handy at some point if we run into trouble with the test runner finding an
    initial data fixture (we''ll cover fixtures in detail in [Chapter 3](ch03.html
    "Chapter 3. Testing 1, 2, 3: Basic Unit Testing")), but for now this output is
    not very interesting.****'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载`initial_data` fixtures。初始数据fixtures是一种自动预先填充数据库的常量数据的方法。我们在`INSTALLED_APPS`中列出的任何应用程序都没有使用此功能，但是测试运行程序会产生大量输出，因为它寻找初始数据fixtures，这些fixtures可以在几种不同的名称下找到。对于每个被检查的可能文件以及是否找到任何内容，都会有消息。如果测试运行程序找到初始数据fixtures时遇到问题，这些输出可能会在某个时候派上用场（我们将在[第3章](ch03.html
    "第3章。测试1, 2, 3：基本单元测试")中详细介绍fixtures），但是目前这些输出并不是很有趣。
- en: '****Once the test runner finishes initializing the database, it settles down
    to running the tests. At verbosity level `2`, the line of dots, Fs, and Es we
    saw previously is replaced by a more detailed report of each test as it is run.
    The name of the test is printed, followed by three dots, then the test result,
    which will either be `ok`, `ERROR`, or `FAIL`. If there are any errors or failures,
    the detailed information about why they occurred will be printed at the end of
    the test run. So as you watch a long test run proceeding with verbosity set to
    `2`, you will be able to see what tests are running into problems, but you will
    not get the details of the reasons why they occurred until the run completes.****'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '****一旦测试运行程序完成初始化数据库，它就会开始运行测试。在`2`的冗长级别下，我们之前看到的点、Fs和Es的行会被每个测试的更详细的报告所取代。测试的名称被打印出来，然后是三个点，然后是测试结果，可能是`ok`、`ERROR`或`FAIL`。如果有任何错误或失败，它们发生的详细信息将在测试运行结束时打印出来。因此，当您观看冗长的测试运行时，设置冗长级别为`2`，您将能够看到哪些测试遇到了问题，但直到运行完成，您才能得到它们发生原因的详细信息。'
- en: '****Settings****'
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '****设置****'
- en: '****You can pass the settings option to the `test` command to specify a settings
    file to use instead of the project default one. This can come in handy if you
    want to run tests using a database that''s different from the one you normally
    use (either for speed of testing or to verify your code runs correctly on different
    databases), for example.****'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '****您可以将设置选项传递给`test`命令，以指定要使用的设置文件，而不是项目默认的设置文件。例如，如果要使用与通常使用的数据库不同的数据库运行测试（无论是为了加快测试速度还是验证代码在不同数据库上是否正确运行），则可以派上用场。'
- en: '****Note the help text for this option states that the `DJANGO_SETTINGS_MODULE`
    environment variable will be used to locate the settings file if the settings
    option is not specified on the command line. This is only accurate when the `test`
    command is being run via the `django-admin.py` utility. When using `manage.py
    test`, the `manage.py` utility takes care of setting this environment variable
    to specify the `settings.py` file in the current directory.****'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '****请注意，此选项的帮助文本说明`DJANGO_SETTINGS_MODULE`环境变量将用于定位设置文件，如果未在命令行上指定设置选项。当使用`django-admin.py`实用程序运行`test`命令时，这才是准确的。当使用`manage.py
    test`时，`manage.py`实用程序负责设置此环境变量以指定当前目录中的`settings.py`文件。'
- en: '****Pythonpath****'
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '****Pythonpath****'
- en: '****This option allows you to append an additional directory to the Python
    path used during the test run. It''s primarily of use when using `django-admin.py`,
    where it is often necessary to add the project path to the standard Python path.
    The `manage.py` utility takes care of adding the project path to the Python path,
    so this option is not generally needed when using `manage.py test`.****'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '****此选项允许您在测试运行期间将附加目录追加到Python路径中。当使用`django-admin.py`时，通常需要将项目路径添加到标准Python路径中。`manage.py`实用程序负责将项目路径添加到Python路径中，因此在使用`manage.py
    test`时通常不需要此选项。'
- en: '****Traceback****'
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '****Traceback****'
- en: '****This option is not actually used by the `test` command. It is inherited
    as one of the default options supported by all `django-admin.py` (and `manage.py`)
    commands, but the `test` command never checks for it. Thus you can specify it,
    but it will have no effect.****'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '****实际上，`test`命令并不使用此选项。它作为所有`django-admin.py`（和`manage.py`）命令支持的默认选项之一而被继承，但`test`命令从不检查它。因此，您可以指定它，但它不会产生任何效果。'
- en: '****Noinput****'
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '****Noinput****'
- en: '****This option causes the test runner to not prompt for user input, which
    raises the question: When would the test runner require user input? We haven''t
    encountered that so far. The test runner prompts for input during the test database
    creation if a database with the test database name already exists. For example,
    if you hit *Ctrl* + *C* during a test run, the test database may not be destroyed
    and you may encounter a message like this the next time you attempt to run tests:****'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '****此选项导致测试运行程序不会提示用户输入，这引发了一个问题：测试运行程序何时需要用户输入？到目前为止，我们还没有遇到过。测试运行程序在测试数据库创建期间会提示用户输入，如果测试数据库名称已经存在。例如，如果在测试运行期间按下*Ctrl*
    + *C*，则测试数据库可能不会被销毁，下次尝试运行测试时可能会遇到类似以下消息：'
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '****If `--noinput` is passed on the command line, the prompt is not printed
    and the test runner proceeds as if the user had entered ''yes'' in response. This
    is useful if you want to run the tests from an unattended script and ensure that
    the script does not hang while waiting for user input that will never be entered.****'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '****如果在命令行上传递了`--noinput`，则不会打印提示，并且测试运行程序将继续进行，就好像用户已经输入了''yes''一样。如果要从无人值守脚本运行测试，并确保脚本不会在等待永远不会输入的用户输入时挂起，这将非常有用。'
- en: '****Version****'
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '****版本****'
- en: '****This option reports the version of Django in use and then exits. Thus when
    using `--version` with `manage.py` or `django-admin.py`, you do not actually need
    to specify a subcommand such as `test`. In fact, due to a bug in the way Django
    processes command options, at the time of writing this book, if you do specify
    both `--version` and a subcommand, the version will get printed twice. That will
    likely get fixed at some point.****'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项报告正在使用的Django版本，然后退出。因此，当使用`--version`与`manage.py`或`django-admin.py`一起使用时，实际上不需要指定`test`等子命令。实际上，由于Django处理命令选项的方式存在错误，在撰写本书时，如果同时指定`--version`和子命令，版本将被打印两次。这可能会在某个时候得到修复。
- en: '****# Summary'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '****# 摘要'
- en: 'The overview of Django testing is now complete. In this chapter, we:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Django测试的概述现在已经完成。在本章中，我们：
- en: Looked in detail at the sample `tests.py` file generated when a new Django application
    is created
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细查看了在创建新的Django应用程序时生成的样本`tests.py`文件
- en: Learned how to run the provided sample tests
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何运行提供的样本测试
- en: Experimented with introducing deliberate mistakes into the tests in order to
    see and understand what information is provided when tests fail or encounter errors
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试在测试中引入故意的错误，以查看和理解测试失败或遇到错误时提供的信息
- en: Finally, we examined all of the command line options that may be used with `manage.py
    test`
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们检查了所有可能与`manage.py test`一起使用的命令行选项。
- en: We will continue to build on this knowledge in the next chapter, as we focus
    on doctests in depth.****
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章继续建立这些知识，重点关注深入的doctests。
