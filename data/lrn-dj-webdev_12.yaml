- en: Chapter 12. Using Third-party Packages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。使用第三方软件包
- en: It's time to combine all the theories and principles that we learned so far
    and try to understand how we can utilize third-party packages to achieve lots
    of possible projects, such as the Twitter API, the use of Social Auth, and so
    on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将我们迄今学到的所有理论和原则结合起来，尝试理解我们如何利用第三方软件包来实现许多可能的项目，比如Twitter API的使用，Social
    Auth等等。
- en: 'You will learn the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下主题：
- en: Diving into the world of open source
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入开源世界
- en: Using Social Auth in Django projects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Django项目中使用Social Auth
- en: Building REST APIs in Django
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Django中构建REST API
- en: Apart from the core modules required to build a website using Django and Python,
    we need some third-party packages as well. There are many third-party packages
    freely available over the Internet; you can find many useful packages at [https://www.djangopackages.com/](https://www.djangopackages.com/).
    We will try to use open source third-party packages for our project(s).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用Django和Python构建网站所需的核心模块之外，我们还需要一些第三方软件包。互联网上有许多免费的第三方软件包；您可以在[https://www.djangopackages.com/](https://www.djangopackages.com/)找到许多有用的软件包。我们将尝试为我们的项目使用开源第三方软件包。
- en: Diving into the world of open source
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入开源世界
- en: When we see the word open source, the first question that comes to our mind
    is what does open source actually mean?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们看到开源这个词时，首先浮现在我们脑海中的问题是开源实际上是什么意思？
- en: Well, open source is a term that refers to something whose design is publicly
    accessible and can be modified by anyone as per their need, without requiring
    any prior permission.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，开源是一个指的是设计公开可访问并且可以根据任何人的需要进行修改，而无需事先获得任何许可的术语。
- en: Okay then, let's move on, and dive deep into the aspects of the open source
    world.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么，让我们继续，深入探讨开源世界的各个方面。
- en: What is an open source software?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是开源软件？
- en: Open source software means that the software's source code is publicly accessible,
    thus it can be modified in any possible way. Also, anyone can contribute to the
    source code, which often leads to enhancement of the software.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 开源软件意味着软件的源代码是公开可访问的，因此可以以任何可能的方式进行修改。此外，任何人都可以为源代码做出贡献，这通常会导致软件的增强。
- en: Now, most software users don't ever see source code, which programmers can modify
    to get the result as per their need; this basically means that having the source
    code in the programmer's hand gives them total control over the software.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，大多数软件用户从未看到源代码，程序员可以修改源代码以满足他们的需求；这基本上意味着程序员手中有源代码可以完全控制软件。
- en: A programmer can then move forward with the software either by fixing any bugs
    or by adding any new feature to it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后程序员可以通过修复任何错误或添加任何新功能来继续使用软件。
- en: What's the difference between open source and other software?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开源和其他软件有什么区别？
- en: If the source code is not released for public access, or the code is accessible
    only to the particular group of people who created it, this type of software is
    called **proprietary software** or **closed source software**. Examples of closed
    source software are Microsoft products, such as Microsoft Windows, Word, Excel,
    PowerPoint, Adobe Photoshop, and so on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果源代码没有公开访问，或者代码只对创建它的特定人群可访问，这种类型的软件称为**专有软件**或**闭源软件**。闭源软件的例子包括微软产品，如Microsoft
    Windows，Word，Excel，PowerPoint，Adobe Photoshop等。
- en: To use proprietary software, users must agree (usually by signing a license
    that is displayed the first time they run this software) that they will not do
    anything with the software that the software's authors have not expressly permitted.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用专有软件，用户必须同意（通常是通过签署许可证，该许可证在第一次运行该软件时显示）他们不会对软件进行任何软件作者未明确允许的操作。
- en: Whereas open source software is different. Authors of open source software make
    its code available to others who would like to view that code, copy it, learn
    from it, alter it, or share it. Python and Django programs are examples of open
    source software.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 而开源软件是不同的。开源软件的作者将其代码提供给其他人，希望他们可以查看代码，复制代码，从中学习，修改代码或分享代码。Python和Django程序是开源软件的例子。
- en: Just as there are licenses for proprietary software, open source software also
    has a license, but a much different one. These licenses promote open source development;
    they allow modification and bug fixes to their own source code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 就像专有软件有许可证一样，开源软件也有许可证，但是有很大的不同。这些许可证促进了开源开发；它们允许修改和修复源代码。
- en: Doesn't open source just mean that something is free of charge?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 开源难道不只是指某物是免费的吗？
- en: '*"Open source doesn''t just mean getting access to the source code."* As explained
    by **Open Source Initiative**, it means that anyone should be able to modify the
    source code to suit a programmer''s need.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “开源不仅意味着获得访问源代码。”正如**开源倡议**所解释的那样，这意味着任何人都应该能够修改源代码以满足程序员的需求。
- en: There can be a misconception about what an open source ecosystem can be thought
    of as. Programmers can charge the open source software they create, but that will
    not make any sense, as the person buying it has the full right to modify it and
    distribute it free of cost. Instead of charging for the open source software,
    programmers charge for the services they build around it, such as support, or
    other secondary components that add much value to the original software. Companies
    such as **Red Hat** charge by giving support to their open source Red Hat operating
    system. **Elasticsearch** charges for a component called marvel that monitors
    Elasticsearch, which helps a lot when Elasticsearch runs in production.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开源生态系统可能会有一些误解。程序员可以对他们创建的开源软件收费，但这没有任何意义，因为购买者有权修改并免费分发它。程序员不是为开源软件收费，而是为他们围绕它构建的服务收费，比如支持或其他增值的次要组件。像Red
    Hat这样的公司通过为其开源Red Hat操作系统提供支持而收费。Elasticsearch收费的是一个名为marvel的组件，用于监视Elasticsearch，在Elasticsearch运行时非常有帮助。
- en: A lot of people think that only Internet-famous rock star programmers can contribute
    to open source projects, but, in fact, open source communities thrive on contributions
    from beginners to experts, and even nonprogrammers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 很多人认为只有互联网上有名的摇滚明星程序员才能为开源项目做出贡献，但事实上，开源社区靠初学者到专家，甚至非程序员的贡献而蓬勃发展。
- en: Using SocialAuth in Django projects
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Django项目中使用SocialAuth
- en: Every website needs to store user data to give them a better and exclusive experience,
    but to do this, the website needs you to register by filling out the user details
    form, where they ask you to enter your basic information. Filling these can be
    boring and tedious. One practical solution to such a problem is **Social Auth**,
    where you get registered to a site by a single click that fills up your basic
    information automatically from the social site that you are already registered
    on.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网站都需要存储用户数据，以给他们更好和独特的体验，但为了做到这一点，网站需要你通过填写用户详细信息表格进行注册，他们要求你输入基本信息。填写这些信息可能会很无聊和繁琐。这个问题的一个实际解决方案是**Social
    Auth**，通过单击即可从你已经注册的社交网站自动填写你的基本信息注册到网站上。
- en: For example, you might have seen many sites while browsing the Web that give
    you the option of a couple of social buttons, such as, Google, Facebook, Twitter,
    and so on, to login or register on their website. If you login or register using
    any of these social buttons, they will pull up your basic details, such as e-mail,
    gender, and so on, from that social site where the information is already updated,
    so that you don't need to fill out the form manually.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能在浏览网页时看到许多网站提供了一些社交按钮的选项，比如Google、Facebook、Twitter等，用于在他们的网站上登录或注册。如果你使用这些社交按钮登录或注册，它们将从社交网站上拉取你的基本信息，比如电子邮件、性别等，这样你就不需要手动填写表格。
- en: Building the complete end-to-end implementation of this alone could be a project
    in Django, and if you want your site to have the same functionality, you don't
    need to reinvent the wheel. We can just import a third-party library, which, with
    minimal configuration changes in the `settings.py` file, will make users log in
    or register with the help of their existing social account.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 单独构建这个完整的端到端实现可能是Django中的一个项目，如果你希望你的网站具有相同的功能，你不需要重复造轮子。我们只需导入一个第三方库，在`settings.py`文件中进行最小的配置更改，就可以让用户通过他们现有的社交账户登录或注册。
- en: How OAuth works
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OAuth的工作原理
- en: To understand how **OAuth** works, let's consider the following example.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解**OAuth**的工作原理，让我们考虑以下例子。
- en: OAuth is like a valet key for the Web. Most luxury cars come with a valet key,
    which the owner hands down to the parking attendant. With that key, the car is
    not allowed to travel longer distance, and other features, such as trunk on board
    luxury features, are disabled.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth就像是Web的代客泊车钥匙。大多数豪华车都配备了代客泊车钥匙，车主将其交给停车员。有了这把钥匙，车辆就不允许行驶更远的距离，其他功能，比如行李箱和豪华功能都被禁用了。
- en: In the same way, the login button you see on a website does not give the site
    full access to your social account; it will simply pass on the details that you
    grant, or the default information, such as an e-mail, gender, and so on.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你在网站上看到的登录按钮并不会给予网站对你社交账户的完全访问权限；它只会传递你授予的详细信息，或者默认信息，比如电子邮件、性别等。
- en: In order to access this information, sites used to ask for a user's username
    and password, which increased the risk of getting your personal information exposed
    or account hacked. The possibility of people having the same username and password
    for their banking account makes it more dangerous.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问这些信息，网站过去通常要求用户输入用户名和密码，这增加了个人信息泄露或账户被盗的风险。人们可能会在他们的银行账户上使用相同的用户名和密码，这使得情况更加危险。
- en: Thus, the aim of OAuth is to provide a method for users to grant third-party
    access to their information without sharing the passwords. By following this method,
    limited access can also be granted (such as, e-mail, permission to create a post,
    and so on).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，OAuth的目的是为用户提供一种方法，让第三方访问他们的信息，而不用分享密码。通过遵循这种方法，也可以授予有限的访问权限（比如，电子邮件、创建帖子的权限等）。
- en: For example, for a login register site, it will be very weird if they ask for
    access to your personal photos. So, at the time of giving permission to the application
    using OAuth, permission can actually be reviewed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于一个登录注册网站，如果他们要求访问你的个人照片，那将会非常奇怪。因此，在使用OAuth给予应用程序权限的时候，权限实际上是可以被审查的。
- en: 'The following diagram gives you the overview of the OAuth mechanism:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表给出了OAuth机制的概述：
- en: '![How OAuth works](img/image00314.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![OAuth的工作原理](img/image00314.jpeg)'
- en: In the preceding figure, you can see the client application that needs your
    credentials asking you to either login or register using any of the social accounts.
    This is shown in the first part of the figure, where the client asks the user
    for social account authorization.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，你可以看到需要你的凭据的客户端应用程序要求你使用任何社交账户登录或注册。这在图的第一部分中显示，客户端要求用户进行社交账户授权。
- en: Once you decide to login via a social account and you grant the client application
    permission to access your social account, the client application that is already
    registered with the same social site with an API key of its own, asks the social
    site for your user details with its API request. At this stage, you might have
    seen the list of the records that the client application will access. Some sites
    may also let you edit these access rights. After the server grants authorization
    to the client application, the client gets an access token for your social account
    access.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你决定通过社交账户登录，并授予客户端应用程序访问你的社交账户的权限，已经在同一社交网站上注册并拥有自己API密钥的客户端应用程序，会向社交网站请求你的用户详细信息。在这个阶段，你可能已经看到了客户端应用程序将访问的记录列表。一些网站也许会让你编辑这些访问权限。在服务器授权客户端应用程序之后，客户端会获得你的社交账户访问的访问令牌。
- en: Client application may store this access token for future use or, as it is popularly
    called, **offline access**.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端应用程序可能会存储此访问令牌以供将来使用，或者，如它通常被称为的**离线访问**。
- en: The difference between registering and logging in with this social OAuth method
    is that when you are already registered, chances are that the client application
    will store your access token, so that the next time you try to log in, you don't
    have to go through the same social site authorization page, as you have already
    given them your authorization credentials.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此社交OAuth方法注册和登录的区别在于，当您已经注册时，客户端应用程序可能会存储您的访问令牌，这样下次尝试登录时，您就不必再次通过相同的社交网站授权页面，因为您已经向他们提供了授权凭据。
- en: Implementing social OAuth
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施社交OAuth
- en: 'In this section, we will learn to implement social OAuth in our existing project.
    To implement social authentication for our application, we will use a third-party
    library called `python-social-auth`. We will use Twitter social Auth to authenticate
    our users. Let''s take a look at the following steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何在现有项目中实现社交OAuth。为了为我们的应用程序实现社交认证，我们将使用一个名为`python-social-auth`的第三方库。我们将使用Twitter社交Auth来验证我们的用户。让我们来看一下以下步骤：
- en: 'First, we will install the third-party app called **Python-Social-Auth**. The
    installation of `python-social-auth` can be done simply using the following command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将安装名为**Python-Social-Auth**的第三方应用程序。可以使用以下命令简单地安装`python-social-auth`：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once we have completed the installation of this third-party library, we will
    move to our mytweet application and make the configuration changes in the `settings.py`
    file.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成安装此第三方库后，我们将转到我们的mytweet应用程序，并在`settings.py`文件中进行配置更改。
- en: We are including this third-party library as an application in our application,
    so we have to create the entry of this application in the `INSTALLED_APPS` variable.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将此第三方库作为应用程序包含在我们的应用程序中，因此我们必须在`INSTALLED_APPS`变量中创建此应用程序的条目。
- en: 'So, add the `''social.apps.django_app.default`'' parameter to the `INSTALLED_APPS`
    variable, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将`'social.apps.django_app.default'`参数添加到`INSTALLED_APPS`变量中，如下所示：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we need to add the `AUTHENTICATION_BACKEND` variable in the `settings.py`
    file, which enlists all social login sites that we want to support. For this demonstration,
    we will add only Twitter social Auth, but as per the use case, you can add any
    or as many Twitter social Auth as you want. The `AUTHENTICATION_BACKENDS` parameter
    is the list of the Python class paths, which knows how to authenticate the user.
    The default points to the ''`django.contrib.auth.backends.ModelBackend`'' parameter.
    We will add the ''`social.backends.twitter.TwitterOAuth`'' parameter to the `AUTHENTICATION_BACKENDS`
    variable:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在`settings.py`文件中添加`AUTHENTICATION_BACKEND`变量，列出我们想要支持的所有社交登录站点。对于此演示，我们将仅添加Twitter社交Auth，但根据用例，您可以添加任何或尽可能多的Twitter社交Auth。`AUTHENTICATION_BACKENDS`参数是Python类路径的列表，它知道如何验证用户。默认情况下指向`'django.contrib.auth.backends.ModelBackend'`参数。我们将`'social.backends.twitter.TwitterOAuth'`参数添加到`AUTHENTICATION_BACKENDS`变量中：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We need to add the `TEMPLATE_CONTEXT_PROCESSORS` parameter, which will add
    backends and associated data in the template''s context, which will in turn load
    the backend key with three entries, as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要添加`TEMPLATE_CONTEXT_PROCESSORS`参数，它将在模板的上下文中添加后端和关联数据，这将反过来使用三个条目加载后端密钥，如下所示：
- en: '**Associated**: If the user is logged in, this will be a list of UserSocialAuth
    instances; otherwise, it will be empty.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关联**：如果用户已登录，则这将是UserSocialAuth实例的列表；否则，它将为空。'
- en: '**Not_associated**: If the user is logged in, this will be a list of nonassociated
    backends; otherwise, it will contain a list of all the available backends.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未关联**：如果用户已登录，则这将是未关联后端的列表；否则，它将包含所有可用后端的列表。'
- en: '**Backends**: This is a list of all the available backend names. Let''s take
    a look at the following code snippet:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后端**：这是所有可用后端名称的列表。让我们来看一下以下代码片段：'
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Our mytweet application already has a user model through which users are able
    to log in and post tweets. We will use the same model class to create a user from
    social Auth. For this, we need to add this line that tells `python-social-auth`
    to use the existing `user_profile` parameter:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的mytweet应用程序已经有一个用户模型，通过该模型用户可以登录并发布推文。我们将使用相同的模型类来从社交Auth创建用户。为此，我们需要添加此行，告诉`python-social-auth`使用现有的`user_profile`参数：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, we will add custom URLs that will be used for social Auth:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加用于社交Auth的自定义URL：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Adding these to the `settings.py` file tells social Auth to fall for the corresponding
    URLs in the following situation:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些添加到`settings.py`文件中告诉社交Auth在以下情况下使用相应的URL：
- en: '`SOCIAL_AUTH_LOGIN_REDIRECT_URL`: This URL will be triggered when the social
    authentication is successful. We will use this URL to send the logged-in user
    his profile page.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SOCIAL_AUTH_LOGIN_REDIRECT_URL`：当社交认证成功时，将触发此URL。我们将使用此URL向已登录用户发送他的个人资料页面。'
- en: '`SOCIAL_AUTH_LOGIN_ERROR_URL`: This URL will be triggered when there is an
    error during social authentication.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SOCIAL_AUTH_LOGIN_ERROR_URL`：在社交认证期间出现错误时，将触发此URL。'
- en: '`SOCIAL_AUTH_LOGIN_URL`: This is the URL from where social Auth will be done.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SOCIAL_AUTH_LOGIN_URL`：这是进行社交Auth的URL。'
- en: '`SOCIAL_AUTH_DISCONNECT_REDIRECT_URL`: After the user has logged out, he/she
    will be redirected to this URL.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SOCIAL_AUTH_DISCONNECT_REDIRECT_URL`：用户注销后，将重定向到此URL。'
- en: As we have added a new application to our existing project, we need to create
    the corresponding tables in our database, which we have already learned in the
    previous chapters.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们在现有项目中添加了一个新应用程序，因此我们需要在数据库中创建相应的表，这是我们在之前章节中已经学习过的。
- en: 'Now, we need to migrate our database:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要迁移我们的数据库：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For the last configuration change, we need to add an entry to the social Auth
    URLs:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于最后的配置更改，我们需要向社交Auth URLs添加一个条目：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The updated URL patterns will look like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的URL模式将如下所示：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating a Twitter application
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Twitter应用程序
- en: 'Now, we will move ahead and create a Twitter application that will give us
    the API keys to make this social Auth work:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将继续创建一个Twitter应用程序，该应用程序将为我们提供API密钥，以使这个社交认证工作：
- en: Log into your Twitter account and open [https://apps.twitter.com/app/new](https://apps.twitter.com/app/new).
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的Twitter账户并打开[https://apps.twitter.com/app/new](https://apps.twitter.com/app/new)。
- en: 'The page will look somewhat like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 页面将看起来有点像这样：
- en: '![Creating a Twitter application](img/image00315.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![创建Twitter应用程序](img/image00315.jpeg)'
- en: Fill up the details and create your Twitter application.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写详细信息并创建您的Twitter应用程序。
- en: As we are locally testing our app, place `http://127.0.0.1:8000/complete/twitter`
    as the callback URL, and also check the **Allow this application to be used to
    Sign in with Twitter** checkbox.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在本地测试我们的应用程序，请将`http://127.0.0.1:8000/complete/twitter`作为回调URL，并检查**允许此应用程序用于使用Twitter登录**复选框。
- en: 'When it is successfully created, your application will look like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当成功创建时，您的应用程序将如下所示：
- en: '![Creating a Twitter application](img/image00316.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![创建Twitter应用程序](img/image00316.jpeg)'
- en: Move ahead with the **Keys and Access Tokens** tab and copy the **Consumer Key**
    (API key) and **Consumer Secret** (API secret) keys, as shown in the following
    screenshot:![Creating a Twitter application](img/image00317.jpeg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续使用**Keys and Access Tokens**选项卡，并复制**Consumer Key**（API密钥）和**Consumer Secret**（API密钥）密钥，如下截图所示：![创建Twitter应用程序](img/image00317.jpeg)
- en: 'Add the following lines to the `settings.py` file:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到`settings.py`文件中：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Update our user class to use the Auth appropriately:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新我们的用户类以适当地使用Auth：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, start the server or open `http://127.0.0.1:8000/login/twitter/`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，启动服务器或打开`http://127.0.0.1:8000/login/twitter/`。
- en: 'This will take you to the following authorization page:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带您到以下授权页面：
- en: '![Creating a Twitter application](img/image00318.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![创建Twitter应用程序](img/image00318.jpeg)'
- en: Click on the **Sign In** button as we will use this Twitter application to sign
    into our app.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**登录**按钮，因为我们将使用这个Twitter应用程序来登录我们的应用程序。
- en: 'After this, it will redirect the request back to the mytweet app with your
    basic information, as shown in the following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，它将将请求重定向回mytweet应用程序，并显示您的基本信息，如下截图所示：
- en: '![Creating a Twitter application](img/image00319.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![创建Twitter应用程序](img/image00319.jpeg)'
- en: If the username does not exist in our database, it will create the user profile
    with the Twitter username.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户名在我们的数据库中不存在，它将使用Twitter用户名创建用户配置文件。
- en: Let's create two tweets and save them.![Creating a Twitter application](img/image00320.jpeg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建两条推文并保存它们。![创建Twitter应用程序](img/image00320.jpeg)
- en: Now, just to check whether social Auth works, we will log out and try to open
    the URL again. You will get redirected to the same preceding profile page after
    redirection.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只是为了检查社交认证是否有效，我们将注销并尝试再次打开URL。重定向后，您将被重定向到相同的先前配置文件页面。
- en: So, we learned how to create a Twitter API step by step by registering your
    application with Twitter to set your keys in your program. Then, we saw how our
    application sends you to the Twitter site for authentication, and how it redirects
    you to our site after the authentication done from the Twitter website.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们学会了如何逐步创建Twitter API，通过在Twitter注册您的应用程序来设置程序中的密钥。然后，我们看到我们的应用程序如何将您发送到Twitter网站进行身份验证，以及如何在Twitter网站完成身份验证后将您重定向到我们的网站。
- en: Building REST APIs in Django
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Django中构建REST API
- en: '**Representational State Transfer** (**REST**) is the underlying architectural
    principle of the Web. Any API that follows REST principles is designed so that
    the client who is the browser here does not need to know anything about the structure
    of the API. The API server only needs to respond to the request made by clients.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**表述性状态转移**（**REST**）是Web的基本架构原则。遵循REST原则的任何API都是设计成这样，即这里的浏览器客户端不需要了解API的结构。API服务器只需要响应客户端发出的请求。'
- en: HTTP works on the verbs that get applied to the resources. Some of the verbs
    that are very popular are GET and POST, but there exists other important verbs,
    such as PUT, DELETE, and so on.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP的工作是应用于资源的动词。一些非常流行的动词是GET和POST，但还有其他重要的动词，比如PUT，DELETE等。
- en: For example, we will use our Twitter database, which is managed by a web service
    as the REST API. For all REST communication, the media type is the main thing
    that an API server has to care about, and the format in which it has to respond
    to the client's request. Our API service uses a custom hypermedia based on JSON,
    for which we will assign the /`json+tweetdb` MIME type application.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将使用由Web服务管理的Twitter数据库作为REST API。对于所有REST通信，媒体类型是API服务器必须关心的主要内容，以及它必须响应客户端请求的格式。我们的API服务使用基于JSON的自定义超媒体，为此我们将分配/`json+tweetdb`
    MIME类型应用程序。
- en: 'A request for the base resource will return something as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对基本资源的请求将返回如下内容：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can observe the output by referring to the `href` links through which we
    are trying to send or retrieve the information, which are nothing but Hypermedia
    controls. We can get the user list by sending another request through the `/user`
    command with the `GET` request:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过引用`href`链接来观察输出，通过这些链接我们试图发送或检索信息，这些链接就是超媒体控制。我们可以通过`/user`命令和`GET`请求发送另一个请求来获取用户列表：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Seeing the preceding generated output, we can guess who all the users are,
    and which are the requests that we can send, such as the `DELETE` or `PUT` request.
    In the same way, we can even create a new user by sending a `POST` request to
    `/user`, as shown in the following code snippet:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 查看前面生成的输出，我们可以猜出所有用户是谁，以及我们可以发送哪些请求，比如`DELETE`或`PUT`请求。同样，我们甚至可以通过向`/user`发送`POST`请求来创建新用户，如下面的代码片段所示：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can also update the existing data:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以更新现有的数据：
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can easily note, we are using different `HTTP` verbs (`GET`, `PUT`, `POST`,
    `DELETE`, and so on) to manipulate these resources.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可以轻松注意到的那样，我们正在使用不同的`HTTP`动词（`GET`，`PUT`，`POST`，`DELETE`等）来操作这些资源。
- en: Now, you have the basic idea of how REST works, so we will move ahead and use
    a third-party library called **Tastypie** to play with our mytweets application.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经对REST的工作原理有了基本的了解，所以我们将继续使用一个名为**Tastypie**的第三方库来操作我们的mytweets应用程序。
- en: Using Django Tastypie
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Django Tastypie
- en: Django Tastypie makes developing RESTful APIs for web applications easier.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Django Tastypie使为Web应用程序开发RESTful API变得更加容易。
- en: 'To install Tastypie, run the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Tastypie，请运行以下命令：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Add the `tastypie` parameter to the `INSTALLED_APPS` variable in the `settings.py`
    file.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在`settings.py`文件中的`INSTALLED_APPS`变量中添加`tastypie`参数。
- en: There are many other configurable settings that an API needs, such as a limit
    on API calls and so on, but by default, they are set to default initially. You
    can either change this, or leave it like that.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: API需要许多其他可配置的设置，例如API调用的限制等，但默认情况下它们最初设置为默认值。您可以更改这一点，也可以保持不变。
- en: 'Some of the API settings that you should know about, and can modify as per
    your need, are as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一些您应该了解并根据需要修改的API设置如下：
- en: '`API_LIMIT_PER_PAGE` (optional): This option controls the default number of
    records that Tastypie will return in the `view.applies` list when a user does
    not specify a limit to the GET parameter. The number of results to be returned
    are not overridden by the `resource` subclass.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`API_LIMIT_PER_PAGE`（可选）：此选项控制Tastypie在用户未指定GET参数的情况下在`view.applies`列表中返回的默认记录数。结果的数量不会被`resource`子类覆盖。'
- en: 'For example:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The default limit here is 20 though.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的默认限制是20。
- en: '`TASTYPIE_FULL_DEBUG` (optional): When an exception occurs, this controls the
    behavior of whether to show the REST response or the 500 error page.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TASTYPIE_FULL_DEBUG`（可选）：当发生异常时，此设置控制是否显示REST响应还是500错误页面。'
- en: If set to `True` and `settings.DEBUG = True`, the **500 Error** page is displayed.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置为`True`并且`settings.DEBUG = True`，将显示**500错误**页面。
- en: If it is not set or set to `False`, Tastypie returns a serialized response.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未设置或设置为`False`，Tastypie将返回序列化响应。
- en: If `settings.DEBUG` is `True`, you'll get the actual exception message plus
    a trace back.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`settings.DEBUG`为`True`，您将获得实际的异常消息和跟踪。
- en: If `settings`.`DEBUG` is `False`, Tastypie will call the `mail_admins()` function
    and provide a canned error message (which you can override with `TASTYPIE_CANNED_ERROR`)
    in the response.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`settings`.`DEBUG`为`False`，Tastypie将调用`mail_admins()`函数并在响应中提供一个预定义的错误消息（您可以用`TASTYPIE_CANNED_ERROR`覆盖）。
- en: 'For example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The default is `False` though.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值为`False`。
- en: '`TASTYPIE_CANNED_ERROR` (optional): You can write your customized error messages
    when an unhandled exception is raised and `settings.DEBUG` is `False`.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TASTYPIE_CANNED_ERROR`（可选）：当发生未处理的异常并且`settings.DEBUG`为`False`时，您可以编写自定义错误消息。'
- en: 'For example:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE18]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The default here is *"Sorry, this request could not be processed. Please try
    again later."*
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的默认值是*“抱歉，无法处理此请求。请稍后重试。”*
- en: '`TASTYPIE_ALLOW_MISSING_SLASH` (optional): You can call the REST API without
    giving the final slashes, which are mainly used to iterate the API with other
    systems.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TASTYPIE_ALLOW_MISSING_SLASH`（可选）：您可以在不提供最终斜杠的情况下调用REST API，这主要用于与其他系统迭代API。'
- en: You must also have `settings.APPEND_SLASH = False`, so that Django does not
    emit HTTP 302 redirects.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您还必须有`settings.APPEND_SLASH = False`，以便Django不发出HTTP 302重定向。
- en: 'For example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The default here is `False`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的默认值是`False`。
- en: '`TASTYPIE_DATETIME_FORMATTING` (optional): This setting configures the global
    datetime/date/time data for the API.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TASTYPIE_DATETIME_FORMATTING`（可选）：此设置配置API的全局日期/时间数据。'
- en: 'The valid options for this are:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此设置的有效选项包括：
- en: iso-8601
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iso-8601
- en: DateTime::ISO8601
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DateTime::ISO8601
- en: 'ISO-8601 (example: 2015-02-15T18:37:01+0000)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ISO-8601（例如：2015-02-15T18:37:01+0000）
- en: iso-8601-strict, which is the same as iso-8601 but trips the microseconds
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iso-8601-strict，与iso-8601相同，但会触发微秒
- en: rfc-2822
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: rfc-2822
- en: DateTime::RFC2822
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DateTime::RFC2822
- en: RFC 2822 (for example, Sun, 15 Feb 2015 18:37:01 +0000)
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 2822（例如，Sun, 15 Feb 2015 18:37:01 +0000）
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Take the following code as an example:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以以下代码为例：
- en: The default here is iso-8601.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的默认值是iso-8601。
- en: '`TASTYPIE_DEFAULT_FORMATS` (optional): This globally configures the list of
    serialization formats for your entire site.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TASTYPIE_DEFAULT_FORMATS`（可选）：这个设置全局配置整个站点的序列化格式列表。'
- en: 'For example:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE21]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This defaults to [`json, xml, yaml,html, plist`].
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 默认为[`json, xml, yaml,html, plist`]。
- en: Implementing a simple JSON API
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实施简单的JSON API
- en: 'To make REST-style architecture, we need to define the resource class for our
    tweets, so let''s create a `api.py` file in the `tweets` folder with the following
    content:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建REST风格的架构，我们需要为我们的tweets定义资源类，所以让我们在`tweets`文件夹中创建一个`api.py`文件，内容如下：
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We also need a URL where all the API requests will be made for this Tweet resource,
    so let''s add an entry for this in the `urls.py` file:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个URL，用于所有API请求的Tweet资源，因此让我们在`urls.py`文件中添加一个条目：
- en: '[PRE23]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: That's all that we need to create a basic REST API for tweets.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们创建tweets的基本REST API所需的全部内容。
- en: Now, we will see the various outputs based on the variations of the REST URL.
    In a browser, open the URLs, as follows, and observe the output in the `.json`
    format.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将根据REST URL的变化来看各种输出。在浏览器中打开以下URL，并观察`.json`格式的输出。
- en: 'The first URL will display the Tweet API details in the `.json` format:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个URL将以`.json`格式显示Tweet API的详细信息：
- en: '`http://127.0.0.1:8000/api/v1/?format=json`'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://127.0.0.1:8000/api/v1/?format=json`'
- en: '[PRE24]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Based on the first output, we will call our tweet API, which would give us
    details of the tweet info and other details, shown as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 根据第一个输出，我们将调用我们的tweet API，这将给我们tweet信息和其他细节，如下所示：
- en: '`http://127.0.0.1:8000/api/v1/tweet/?format=json`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://127.0.0.1:8000/api/v1/tweet/?format=json`'
- en: '[PRE25]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Our basic REST API is ready, which lists all tweets. If you look at the schema,
    it gives us many details about the API, such as which HTTP methods are allowed,
    which format the output will be in, and other different fields. This actually
    helps us to understand what we can do using our API:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的基本REST API已经准备就绪，可以列出所有的tweets。如果您查看架构，它会给我们很多关于API的细节，比如允许使用哪些HTTP方法，输出将是哪种格式，以及其他不同的字段。这实际上帮助我们了解我们可以使用我们的API做什么：
- en: '`http://127.0.0.1:8000/api/v1/tweet/schema/?format=json`'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://127.0.0.1:8000/api/v1/tweet/schema/?format=json`'
- en: '[PRE26]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Some APIs might need authorized access, such as a user profile, account details,
    and so on. Basic HTTP authorization can be added to the Tastypie API by just adding
    a basic authorization line:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一些API可能需要授权访问，比如用户资料、账户详情等等。只需添加一个基本授权行，就可以在Tastypie API中添加基本的HTTP授权：
- en: '[PRE27]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Basic HTTP authorization can be added with a header file as:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的HTTP授权可以通过头文件添加：
- en: '[PRE28]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will ask for authentication via a basic HTTP request, which looks like
    the following screenshot. Once this is successful, all requests in the current
    session are authenticated.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通过一个基本的HTTP请求来请求认证，看起来像下面的截图。一旦成功，当前会话中的所有请求都将得到认证。
- en: '![Implementing a simple JSON API](img/image00321.jpeg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![实现一个简单的JSON API](img/image00321.jpeg)'
- en: This, followed by a demonstration, shows the real-world application of how to
    scale the Django system with MongoDB.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这之后，通过演示，展示了如何使用MongoDB扩展Django系统的真实应用。
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about open source and how to use and implement
    open source third-party packages in our project. Now, you will be comfortable
    to implement social Auth from Twitter. You can try the same for Facebook and Google+
    by yourself as well.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了开源以及如何在我们的项目中使用和实现开源的第三方包。现在，您将可以舒适地实现来自Twitter的社交认证。您也可以尝试自己实现Facebook和Google+的相同功能。
- en: In the next chapter, you will learn more about the debugging techniques that
    we need to use when we face any errors or warnings in our code, or some configuration
    issues. You will also learn the tools for product development, such as Git, the
    Sublime Text editor, and so on.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习更多关于调试技术的知识，当我们在代码中遇到任何错误或警告，或者一些配置问题时，我们需要使用这些技术。您还将学习产品开发工具，比如Git，Sublime
    Text编辑器等等。
