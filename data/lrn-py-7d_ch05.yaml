- en: Dictionary
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典
- en: So far, you have learned about strings, tuples, and lists. In this chapter,
    we have another useful built-in data type in Python is called **dictionary**.
    In a list, values are indexed by the range of numbers, but in a dictionary, values
    are indexed by keys.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经学习了字符串、元组和列表。在本章中，Python 中还有一个有用的内置数据类型，称为 **字典**。在列表中，值通过数字的范围进行索引，但在字典中，值通过键进行索引。
- en: Overview of dictionary
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典概述
- en: In Python, a dictionary is a sequence of key-value, or item, pairs separated
    by commas.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，字典是一系列由逗号分隔的键值对，或称为项。
- en: 'Consider the following example:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `port` variable refers to a dictionary that contains port numbers as keys
    and its protocol names as values.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`port` 变量指向一个包含端口号作为键和协议名称作为值的字典。'
- en: 'Consider the following example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The syntax of a dictionary is as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 字典的语法如下：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The key-value pair is called an **item**. The key and value are separated by
    a colon (`:`), and each item is separated by a comma (`,`). The items are enclosed
    by curly braces (`{ }`). An empty dictionary can be created just by using curly
    braces (`{ }`). Key features of the dictionary are:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 键值对称为 **项**。键和值由冒号 (`:`) 分隔，每个项由逗号 (`,`) 分隔。项由花括号 (`{ }`) 包围。可以通过使用花括号 (`{ }`)
    创建空字典。字典的关键特性包括：
- en: The key of the dictionary can not be changed
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典的键不能更改
- en: A string, int, or float can be used as a key
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串、整数或浮点数可以用作键
- en: A tuple that does not contain any list can be used as a key
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不包含任何列表的元组可以用作键
- en: Keys are unique
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键是唯一的
- en: Values can be anything, for example, list, string, int, and so on
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值可以是任何东西，例如列表、字符串、整数等
- en: Values can be repeated
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值可以重复
- en: Values can be changed
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值可以更改
- en: A dictionary is an unordered collection, which means that the order in which
    you have entered the items in a dictionary may not be retained and you may get
    the items in a different order
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典是无序集合，这意味着您在字典中输入项的顺序可能不会保留，并且您可能会以不同的顺序获取项
- en: Operations on the dictionary
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典上的操作
- en: As you know, a dictionary is mutable; you can add new values, and delete and
    update old values. In this section, you will learn accessing, deletion, updation,
    and addition operations.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，字典是可变的；您可以添加新值，删除和更新旧值。在本节中，你将学习访问、删除、更新和添加操作。
- en: Accessing the values of dictionary
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问字典的值
- en: 'In order to access the dictionary''s values you will need the key. Consider
    a dictionary of networking ports: In order to access the dictionary''s values
    you will need the key. Consider a dictionary of networking ports:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问字典的值，您需要键。考虑一个网络端口的字典：为了访问字典的值，您需要键。考虑一个网络端口的字典：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s learn by example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过示例来学习：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In order to access the dictionary's value, use the square brackets along with
    the key. What happens if the key is not in the dictionary?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问字典的值，请使用方括号和键。如果键不在字典中会发生什么？
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the key is not found, then the interpreter shows the preceding error.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到键，则解释器会显示前面的错误。
- en: Deleting an item from the dictionary
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从字典中删除项
- en: 'By using the `del` keyword, you can delete the entire dictionary or the dictionary''s
    items. If you want to delete the dictionary''s items, use the following syntax:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `del` 关键字，您可以删除整个字典或字典中的项。如果您想删除字典中的项，请使用以下语法：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Considering the following code snippet for example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以以下代码片段为例：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you want to delete the entire dictionary, then use the following syntax:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想删除整个字典，请使用以下语法：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Consider the following example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding error shows that the `port` dictionary has been deleted.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的错误显示 `port` 字典已被删除。
- en: Updating the values of the dictionary
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新字典的值
- en: 'Updating the dictionary is pretty simple; just specify the key in the square
    bracket along with the dictionary name. The syntax is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更新字典非常简单；只需在方括号中指定键和字典名称。语法如下：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Consider the following example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the preceding dictionary, the value of port `23` is `"SMTP"`, but in reality,
    port number `23` is for telnet protocol. Let''s update the preceding dictionary
    with the following code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的字典中，端口号 `23` 的值是 `"SMTP"`，但在现实中，端口号 `23` 是用于 telnet 协议的。让我们使用以下代码更新前面的字典：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Adding an item to the dictionary
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向字典中添加项
- en: 'Adding an item to the dictionary is very simple; just specify a new key in
    the square brackets along with the dictionary. The syntax is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 向字典中添加项非常简单；只需在方括号中指定与字典一起的新键。语法如下：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Consider the following example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding example, we added the `"POP"` protocol.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们添加了`"POP"`协议。
- en: Dictionary functions
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典函数
- en: In this section, we will explore the built-in functions available in Python,
    which can be applied to dictionary. You may have seen most of the functions in
    the previous chapters of  list and tuple. In this section, you will see how to
    apply those functions to a dictionary.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨Python中可用于字典的内置函数。你可能在前几章的列表和元组中看到了大多数函数。在本节中，你将看到如何将这些函数应用于字典。
- en: len()
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: len()
- en: 'In order to find the number of items that are present in a dictionary, you
    can use the `len()` function. See the following example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找到字典中存在的项目数量，你可以使用`len()`函数。请看以下示例：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: str()
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: str()
- en: 'Consider a situation where you want to convert a dictionary into a string; here
    you can use the `str()` function. The syntax of the method is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一种情况，你想将字典转换为字符串；这里你可以使用`str()`函数。方法的语法如下：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Consider the following example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You can easily see the double quotes around the dictionary. Let's get the `max`
    key from the dictionary, using the `max()` function.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以很容易地看到字典周围的引号。让我们使用`max()`函数从字典中获取`max`键。
- en: max()
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: max()
- en: 'If you pass a dictionary to the `max()` function, then it returns the key with
    the maximum worth. The syntax of the method is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将字典传递给`max()`函数，那么它将返回价值最大的键。方法的语法如下：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'See the following example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下示例：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: So, the `max` function gives the tuple the maximum worth. Similarly, to get
    the minimum key, you can use the `min()` function.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`max`函数给出了元组的最大价值。同样，要获取最小键，你可以使用`min()`函数。
- en: min()
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: min()
- en: 'The `min()` function is just opposite to the `max()` function. It returns the
    dictionary''s key with the lowest worth. The syntax of the method is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`min()`函数与`max()`函数正好相反。它返回字典中价值最低的键。方法的语法如下：'
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Consider the following example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE21]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s convert the list or tuple into a dictionary. In order to convert the
    list or tuple into a dictionary, the format should be as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将列表或元组转换为字典。为了将列表或元组转换为字典，格式应如下所示：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Alternatively, it can be as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，它也可以如下所示：
- en: '[PRE23]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We need pairs of two values. By using the `dict` function, we can convert the
    preceding list into a dictionary.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要成对的两个值。通过使用`dict`函数，我们可以将前面的列表转换为字典。
- en: dict()
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: dict()
- en: You can pass a tuple or list to the `dict()` function, but that tuple or list
    contain elements as pairs of two values, as shown in the next example.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将元组或列表传递给`dict()`函数，但该元组或列表应包含成对的两个值，如以下示例所示。
- en: 'The syntax of the method is as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 方法的语法如下：
- en: '[PRE24]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s see the conversion by example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过示例来查看转换：
- en: '[PRE25]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In operator on Python dictionary The in operator can be used to find the existence
    of a key in the dictionary. Consider the example program `inkey.py`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python字典中的in运算符可以使用来查找字典中键的存在。考虑以下示例程序`inkey.py`：
- en: '[PRE26]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'See the following screenshot for the output:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下截图以获取输出：
- en: '![](img/inkey.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/inkey.jpg)'
- en: Output of in program
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 程序输出
- en: 'Similarly, you can use the `not in` operator. Consider the following example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以使用`not in`运算符。考虑以下示例：
- en: '[PRE27]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the preceding code snippet, nothing gets printed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，没有打印任何内容。
- en: Dictionary methods
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典方法
- en: In this section, we will discuss the dictionary methods one by one. Consider
    that you want to create a copy of an existing dictionary; you can use the `copy()`
    method.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将逐一讨论字典方法。假设你想创建现有字典的副本，你可以使用`copy()`方法。
- en: copy()
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: copy()
- en: 'The syntax of the `copy()` method is as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`copy()`方法的语法如下：'
- en: '[PRE28]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'See the following example:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下示例：
- en: '[PRE29]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can see that `Avengers2` is an exact copy of `Avengers`. Do not confuse
    `copy()` with the assignment operator. Let''s see the following example:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到`Avengers2`是`Avengers`的精确副本。不要将`copy()`与赋值运算符混淆。让我们看以下示例：
- en: '[PRE30]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Variable `A1` and `A2` hold the same dictionary, but the `CW` variable hold
    different dictionary. You can check the memory address of `A1`, `A2`, and `CW`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`A1`和`A2`持有相同的字典，但`CW`变量持有不同的字典。你可以检查`A1`、`A2`和`CW`的内存地址：
- en: '[PRE31]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can do one more thing. Let''s add one more member to the `A1` dictionary:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以做一件事。让我们向`A1`字典添加一个成员：
- en: '[PRE32]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We have changed the `A1` dictionary and the changes would also be reflected
    by `A2` since both hold the same memory address, whereas `CW` holds a different
    dictionary. Consider that you have a dictionary and you want to access a `key`,
    which does not exist in the dictionary. The interpreter shows `KeyError` as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经更改了`A1`字典，并且更改也会通过`A2`反映出来，因为它们持有相同的内存地址，而`CW`持有不同的字典。考虑你有这样一个字典，你想要访问一个不存在的`key`。解释器会显示`KeyError`如下：
- en: '[PRE33]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the preceding code, you can clearly see the error. If this happens in running
    code, your code will not get fully executed. In order to deal with this situation,
    we will use the `get()` method.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述代码中，你可以清楚地看到错误。如果这种情况发生在运行代码中，你的代码将无法完全执行。为了处理这种情况，我们将使用`get()`方法。
- en: get()
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`get()`'
- en: 'The syntax of the `get()` method is as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`get()`方法的语法如下：'
- en: '[PRE34]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The `get()` method is used to get the value of a given `key` from the dictionary.
    If `key` is not found, then the default value or message will return. See the
    following example, where `key` is present:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`get()`方法用于从字典中获取给定`key`的值。如果`key`未找到，则返回默认值或消息。以下示例中`key`存在：'
- en: '[PRE35]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the preceding example, since the key is found, the custom message, `not
    found`, does not get printed. Let''s see another example:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述示例中，由于键存在，自定义消息`not found`不会打印出来。让我们看另一个示例：
- en: '[PRE36]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If the custom message is not set, then nothing will be returned. There is another
    method, `setdefault()`, which is very much similar to the `get()` method with
    a little different functionality. Let's discuss the method with examples.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果自定义消息未设置，则不会返回任何内容。还有一个方法，`setdefault()`，它与`get()`方法非常相似，但功能略有不同。让我们通过示例来讨论该方法。
- en: setdefault()
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`setdefault()`'
- en: 'The syntax of `setdefault()` is as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`setdefault()`的语法如下：'
- en: '[PRE37]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`key1` -- This is `key` to be searched.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`key1` -- 这是需要搜索的`key`。'
- en: 'Default `--` if `key1` is not found, then the message will be returned and
    added to the dictionary. Let''s see the following example:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`key1`未找到，则返回消息并将其添加到字典中。让我们看以下示例：
- en: '[PRE38]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If the message has been not been set, then it returns and adds a default value, `None`.
    See the following example:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果消息尚未设置，则返回并添加默认值`None`。以下示例：
- en: '[PRE39]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: To avoid `KeyError`, we can use the `get()` method, but we can add one more
    check to avoid `KeyError`. The `has_key()` method facilitates you to check whether
    the given key exists or not.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免`KeyError`，我们可以使用`get()`方法，但我们可以添加一个额外的检查来避免`KeyError`。`has_key()`方法使你能够检查给定的键是否存在。
- en: has_key()
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`has_key()`'
- en: 'The syntax for `has_key()` is given as:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`has_key()`的语法如下：'
- en: '[PRE40]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '`key`--this is the key to be searched in the dictionary, `dict`. The `has_key()`
    method returns `True` or `False`, as shown in the following example:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`key`--这是要在字典`dict`中搜索的键，`has_key()`方法返回`True`或`False`，如下例所示：'
- en: '[PRE41]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Consider a situation where you want to do some operation on a dictionary's keys
    and want to get all the keys in different lists. In this situation, you can use
    the `keys()` method.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这样一种情况，你想要对字典的键执行一些操作，并希望将所有键放在不同的列表中。在这种情况下，你可以使用`keys()`方法。
- en: keys()
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`keys()`'
- en: 'The syntax of `keys()` is as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`keys()`的语法如下：'
- en: '[PRE42]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Let''s consider the following example:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下示例：
- en: '[PRE43]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In the preceding dictionary, we want the superhero''s characters, that is, all
    the keys:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述字典中，我们想要获取超级英雄的角色，即所有键：
- en: '[PRE44]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The preceding method returns a list of all the keys.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 前述方法返回所有键的列表。
- en: Similarly, if we want all the values in a separate list, we can use the `values()`
    method.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，如果我们想要一个单独的列表中的所有值，我们可以使用`values()`方法。
- en: values()
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`values()`'
- en: 'The syntax of `values()` is as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`values()`的语法如下：'
- en: '[PRE45]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Let''s consider the following example:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下示例：
- en: '[PRE46]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'In the preceding dictionary, we want to get all the real names of our heroes:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述字典中，我们想要获取我们英雄的所有真实姓名：
- en: '[PRE47]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Dictionary to another dictionary. Consider the following example: Sometimes,
    we need to add one dictionary to another dictionary. Consider the following example:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 将字典添加到另一个字典。考虑以下示例：有时，我们需要将一个字典添加到另一个字典中。考虑以下示例：
- en: '[PRE48]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We have another dictionary of ports, that is, `port2` as shown:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个端口字典，即`port2`，如下所示：
- en: '[PRE49]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: In order to update `port1` with `port2`, we can take advantage of the `update()`
    method.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将`port1`更新为`port2`，我们可以利用`update()`方法。
- en: update()
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`update()`'
- en: 'The syntax is given as:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE50]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '`dict2`--this is the dictionary to be added.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`dict2`--这是要添加的字典。'
- en: 'Consider the following example:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE51]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Be careful to use the preceding method because if `dict` and `dict2` dictionaries
    contain the same key, then the `dict` dictionary's keys would be replaced by the
    keys of the `dict1` dictionary.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用前面的方法，因为如果`dict`和`dict2`字典包含相同的键，那么`dict`字典的键将被`dict1`字典的键所替换。
- en: items()
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: items()
- en: 'The syntax of the `items()` method is as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`items()`方法的语法如下：'
- en: '[PRE52]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The `items()` method returns the list of dictionary''s `(key, value)` tuple
    pairs:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`items()`方法返回字典的`(key, value)`元组对列表：'
- en: '[PRE53]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Sometimes, we need to delete all the items of a dictionary. This can be done
    by using the `clear()` method.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们需要删除字典中的所有项。这可以通过使用`clear()`方法来完成。
- en: clear()
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: clear()
- en: 'The syntax of `clear()` is as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`clear()`的语法如下：'
- en: '[PRE54]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Let''s consider the following example:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下示例：
- en: '[PRE55]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Python dictionary with for loop
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用for循环的Python字典
- en: 'In this section, we will learn how to use the `for` loop with a dictionary.
    If you have not read about the `for` loop so far, you can skip this section and
    get back after learning about the `for` loop, covered in [Chapter 6](lrn-py-7d_ch06.html),
    *Control Statements and Loops*. Let''s apply the `for` loop to a dictionary. See
    the following program named `forloopkey.py`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用`for`循环与字典结合。如果你还没有阅读关于`for`循环的内容，你可以跳过这一节，在学习了[第6章](lrn-py-7d_ch06.html)中涵盖的`for`循环后回来。让我们将`for`循环应用于字典。请看以下名为`forloopkey.py`的程序：
- en: '[PRE56]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The output is as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/forlookeys.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/forlookeys.jpg)'
- en: Output of program forloopkey.py
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 程序`forloopkey.py`的输出
- en: 'The preceding program prints only the keys of the dictionary. If you want to
    print the key as well as the value, then you can use the `items()` method. See
    the following program named `forloopitems.py`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的程序只打印了字典的键。如果你想同时打印键和值，那么你可以使用`items()`方法。请看以下名为`forloopitems.py`的程序：
- en: '[PRE57]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The following screenshot shows the output of the program:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了程序的输出：
- en: '![](img/forloopvalue.jpg)Output of program forloopitems.py'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/forloopvalue.jpg)程序`forloopitems.py`的输出'
- en: 'The preceding program seems difficult to understand at first. Let''s break
    the program into two parts. The `port1.items()` method returns a list of tuple
    pairs, as shown:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的程序一开始看起来可能难以理解。让我们将程序分成两部分。`port1.items()`方法返回一个元组对的列表，如下所示：
- en: '[PRE58]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The `for` loop sends each tuple to the variables, `k` and `v`. See the one
    iteration of `for` loop:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环将每个元组发送到变量`k`和`v`。看看`for`循环的一次迭代：'
- en: '[PRE59]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now, you have learned how to iterate through a dictionary. Consider a dictionary
    of millions of items, and you want to iterate through the dictionary. The `items
    ()` method returns a list of key-value pairs. The newly created list will also
    take a lot of memory. A Python dictionary has a very beautiful memory-saving method
    called `iteritems()`. Let''s understand it by the following example code named `forloopiter.py`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经学会了如何遍历字典。考虑一个包含数百万项的字典，并且你想遍历这个字典。`items()`方法返回一个键值对的列表。新创建的列表也会占用很多内存。Python字典有一个非常漂亮的节省内存的方法，称为`iteritems()`。让我们通过以下名为`forloopiter.py`的示例代码来理解它：
- en: '[PRE60]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'See the output:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 看看输出：
- en: '![](img/forloopiter.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/forloopiter.jpg)'
- en: Output of forloopiter.py program
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 程序`forloopiter.py`的输出
- en: 'The preceding code does not create a list. Let''s understand by Python shell:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码并没有创建一个列表。让我们通过Python shell来理解：
- en: '[PRE61]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The preceding code returns a dictionary object, not a huge list. We will not
    delve into the details of the object. You can replace `key()` by `iterkeys()`
    and `values()` by `itervalues()`. When to use `iteritems()` and `items()` ? If
    we need the corresponding list and have to do some operations on the list, such
    as slicing and indexing, then the `items()` method will be the most suitable.
    But if our need is just to iterate through the dictionary, then `iteritems()`
    will be the most suitable.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码返回的是一个字典对象，而不是一个庞大的列表。我们不会深入探讨这个对象的具体细节。你可以用`iterkeys()`替换`key()`，用`itervalues()`替换`values()`。何时使用`iteritems()`和`items()`？如果我们需要相应的列表并且需要在列表上执行一些操作，例如切片和索引，那么`items()`方法将是最合适的选择。但如果我们的需求仅仅是遍历字典，那么`iteritems()`将是最合适的选择。
- en: Practical program
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际程序
- en: 'Let''s make some program  to understand the dictionary. Make a dictionary from
    two lists. Both the lists are of equal length. Take the lists as shown:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一些程序来理解字典。从一个列表创建一个字典。这两个列表的长度相等。请参考以下列表：
- en: '[PRE62]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The `list1` values act as the keys of the dictionary and the `list2` values
    act as the values. The following is the program for it:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`list1`的值作为字典的键，`list2`的值作为字典的值。以下是对应的程序：'
- en: '[PRE63]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The output is as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/dictexcercise1.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dictexcercise1.jpg)'
- en: Output of exercise 1
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 练习1的输出
- en: 'Let''s do the preceding exercise in one line:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一行代码来完成前面的练习：
- en: '[PRE64]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Just a one-liner code can make a dictionary from two lists. So, in the preceding example,
    we used the `zip()` function; `zip()` is a built-in function, which takes two
    lists and returns a list of two tuples, such as ` [(key, value)]`. Let''s see
    an example of the `zip()` function:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 只用一行代码就可以从两个列表中创建一个字典。所以，在上面的例子中，我们使用了`zip()`函数；`zip()`是一个内置函数，它接受两个列表并返回一个包含两个元组的列表，例如`[(key,
    value)]`。让我们看看`zip()`函数的一个例子：
- en: '[PRE65]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Exercise
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Find the number of ways to find whether a key exists in a dictionary or not.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找出判断一个键是否存在于字典中的方法数量。
- en: 'Use the dictionary, `port1 = {21: "FTP", 22:"SSH", 23: "telnet", 80: "http"}`,
    and make a new dictionary in which keys become values and values become keys,
    as shown: `Port2 = {“FTP":21, "SSH":22, “telnet":23, "http": 80}`'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '使用字典，`port1 = {21: "FTP", 22:"SSH", 23: "telnet", 80: "http"}`，并创建一个新的字典，其中键变为值，值变为键，如下所示：`Port2
    = {"FTP":21, "SSH":22, "telnet":23, "http": 80}`'
- en: Summary
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you learned about dictionaries, how to create an empty dictionary,
    adding items to the dictionary, and accessing and deleting values from a dictionary.
    In order to find the number of items in a dictionary, we used the `len()` function.
    There are other useful functions, such as `max()` and `min()` to find the maximum
    and minimum values in a dictionary, respectively. In dictionary methods you learned
    different methods, such as `copy()`, `keys()`, and `items()`. By using `items()`,
    we can iterate through a dictionary. In the end, you learned two memory-saving
    methods: `iteritems()` and `iterkeys()`.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了关于字典的知识，如何创建一个空字典，向字典中添加项，以及从字典中访问和删除值。为了找到字典中的项数，我们使用了`len()`函数。还有一些其他有用的函数，如`max()`和`min()`，分别用于在字典中找到最大值和最小值。在字典方法中，你学习了不同的方法，例如`copy()`、`keys()`和`items()`。通过使用`items()`，我们可以遍历字典。最后，你学习了两种节省内存的方法：`iteritems()`和`iterkeys()`。
