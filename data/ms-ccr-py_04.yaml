- en: Using the with Statement in Threads
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在线程中使用with语句
- en: The `with` statement in Python sometimes causes confusion for novice and experienced
    Python programmers alike. This chapter explains in depth the idea behind the `with`
    statement as a context manager and its usage in concurrent and parallel programming,
    specifically regarding the use of locks while synchronizing threads. This chapter
    also provides specific examples of how the `with` statement is most commonly used.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`with`语句在Python中有时会让新手和有经验的Python程序员感到困惑。本章深入解释了`with`语句作为上下文管理器的概念，以及它在并发和并行编程中的使用，特别是在同步线程时使用锁。本章还提供了`with`语句最常见用法的具体示例。'
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The concept of context management and the options that the `with` statement
    provides as a context manager, specifically in concurrent and parallel programming
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上下文管理的概念以及`with`语句作为上下文管理器在并发和并行编程中提供的选项
- en: The syntax of the `with` statement and how to use it effectively and efficiently
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with`语句的语法以及如何有效和高效地使用它'
- en: The different ways of using the `with` statement in concurrent programming
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在并发编程中使用`with`语句的不同方式
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following is a list of prerequisites for this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的先决条件清单：
- en: Python 3 must be installed on your computer
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3必须安装在您的计算机上
- en: Download the GitHub repository at [https://github.com/PacktPublishing/Mastering-Concurrency-in-Python](https://github.com/PacktPublishing/Mastering-Concurrency-in-Python)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://github.com/PacktPublishing/Mastering-Concurrency-in-Python](https://github.com/PacktPublishing/Mastering-Concurrency-in-Python)下载GitHub存储库
- en: During this chapter, we will be working with the subfolder named `Chapter04`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用名为`Chapter04`的子文件夹
- en: Check out the following video to see the Code in Action: [http://bit.ly/2DSGLEZ](http://bit.ly/2DSGLEZ)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：[http://bit.ly/2DSGLEZ](http://bit.ly/2DSGLEZ)
- en: Context management
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上下文管理
- en: The new `with` statement was first introduced in Python 2.5 and has been in
    use for quite some time. However, there still seems to be confusion regarding
    its usage, even for experienced Python programmers. The `with` statement is most
    commonly used as a context manager that properly manages resources, which is essential
    in concurrent and parallel programming, where resources are shared across different
    entities in the concurrent or parallel application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`with`语句首次在Python 2.5中引入，并且已经使用了相当长的时间。然而，即使对于有经验的Python程序员，对其使用仍然存在困惑。`with`语句最常用作上下文管理器，以正确管理资源，在并发和并行编程中是至关重要的，其中资源在并发或并行应用程序中跨不同实体共享。
- en: Starting from managing files
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从管理文件开始
- en: As an experienced Python user, you have probably seen the `with` statement being
    used to open and read external files inside Python programs. Looking at this problem
    at a lower level, the operation of opening an external file in Python will consume
    a resource—in this case, a file descriptor—and your operating system will set
    a limit on this resource. This means that there is an upper limit on how many
    files a single process running on your system can open simultaneously.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个有经验的Python用户，你可能已经看到`with`语句被用来在Python程序中打开和读取外部文件。从更低的层次来看，Python中打开外部文件的操作会消耗资源——在这种情况下是文件描述符——你的操作系统会对这种资源设置一个限制。这意味着在你的系统上运行的单个进程同时打开的文件数量是有上限的。
- en: 'Let''s consider a quick example to illustrate this point further. Let''s take
    a look at the `Chapter04/example1.py` file, as shown in the following code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个快速的例子来进一步说明这一点。让我们看一下`Chapter04/example1.py`文件，如下所示的代码：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This quick program simply creates 10 text files inside the `output1` folder:
    `sample0.txt`, `sample1.txt`, ..., `sample9.txt`. What might be of more interest
    to us is the fact that the files were opened inside the `for` loop but were not
    closed—this is a bad practice in programming that we will discuss later. Now,
    let''s say we wanted to reassign the `n_files` variable to a large number—say
    10,000—as shown in the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个快速程序简单地在`output1`文件夹中创建了10个文本文件：`sample0.txt`，`sample1.txt`，...，`sample9.txt`。对我们来说可能更感兴趣的是这些文件是在`for`循环中打开的，但没有关闭——这是编程中的一个不良实践，我们稍后会讨论。现在，假设我们想将`n_files`变量重新分配给一个大数——比如10000，如下所示的代码：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We would get an error similar to the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会得到类似以下的错误：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Looking closely at the error message, we can see that my laptop can only handle
    253 opened files simultaneously (as a side note, if you are working on a UNIX-like
    system, running `ulimit -n` will give you the number of files that your system
    can handle). More generally, this situation arose from what is known as **file
    descriptor leakage**. When Python opens a file inside a program, that opened file
    is essentially represented by an integer. This integer acts as a reference point
    that the program can use in order to have access to that file, while not giving
    the program complete control over the underlying file itself.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细看错误消息，我们可以看到我的笔记本电脑只能同时处理253个打开的文件（顺便说一句，如果你在类UNIX系统上工作，运行`ulimit -n`会给你系统可以处理的文件数量）。更一般地说，这种情况是由所谓的**文件描述符泄漏**引起的。当Python在程序中打开一个文件时，该打开的文件实质上由一个整数表示。这个整数充当程序可以使用的参考点，以便访问该文件，同时不完全控制底层文件本身。
- en: 'By opening too many files at the same time, our program assigned too many file
    descriptors to manage the open files, hence the error message. File descriptor
    leakage can lead to a number of difficult problems—especially in concurrent and
    parallel programming—namely, unauthorized I/O operations on open files. The solution
    to this is to simply close opened files in a coordinated manner. Let''s look at
    our `Chapter04/example1.py` file in the second method. In the `for` loop, we would
    do the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过同时打开太多文件，我们的程序分配了太多文件描述符来管理打开的文件，因此出现了错误消息。文件描述符泄漏可能导致许多困难的问题——特别是在并发和并行编程中——即未经授权的对打开文件的I/O操作。解决这个问题的方法就是以协调的方式关闭打开的文件。让我们看看第二种方法中的`Chapter04/example1.py`文件。在`for`循环中，我们会这样做：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The with statement as a context manager
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作为上下文管理器的with语句
- en: In real-life applications, it is rather easy to mismanage opened files in your
    programs by forgetting to close them; it can sometimes also be the case that it
    is impossible to tell whether the program has finished processing a file, and
    we programmers will therefore be unable to make a decision as to when to put the
    statement to close the files appropriately. This situation is even more common
    in concurrent and parallel programming, where the order of execution between different
    elements changes frequently.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，很容易通过忘记关闭它们来管理程序中打开的文件；有时也可能无法确定程序是否已经完成处理文件，因此我们程序员将无法决定何时适当地关闭文件。这种情况在并发和并行编程中更为常见，其中不同元素之间的执行顺序经常发生变化。
- en: One possible solution to this problem that is also common in other programming
    languages is to use a `try...except...finally` block every time we want to interact
    with an external file. This solution still requires the same level of management
    and significant overhead and does not provide a good improvement in the ease and
    readability of our programs either. This is when the `with` statement of Python
    comes into play.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的一个可能解决方案，在其他编程语言中也很常见，就是每次想要与外部文件交互时都使用`try...except...finally`块。这种解决方案仍然需要相同级别的管理和显著的开销，并且在程序的易用性和可读性方面也没有得到很好的改进。这就是Python的`with`语句派上用场的时候。
- en: 'The `with` statement gives us a simple way of ensuring that all opened files
    are properly managed and cleaned up when the program finishes using them. The
    most notable advantage of using the `with` statement comes from the fact that,
    even if the code is successfully executed or it returns an error, the `with` statement
    always handles and manages the opened files appropriately via context. For example,
    let''s look at our `Chapter04/example1.py` file in more detail:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`with`语句为我们提供了一种简单的方法，确保所有打开的文件在程序使用完毕时得到适当的管理和清理。使用`with`语句最显著的优势在于，即使代码成功执行或返回错误，`with`语句始终通过上下文处理和管理打开的文件。例如，让我们更详细地看看我们的`Chapter04/example1.py`文件：'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: While this method accomplishes the same job as the second method we saw earlier,
    it additionally provides a cleaner and more readable way to manage the opened
    files that our program interacts with. More specifically, the `with` statement
    helps us indicate the scope of certain variables—in this case, the variables that
    point to the opened files—and hence, their context.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种方法完成了我们之前看到的第二种方法相同的工作，但它另外提供了一种更清晰和更易读的方式来管理我们的程序与之交互的打开文件。更具体地说，`with`语句帮助我们指示特定变量的范围——在这种情况下，指向打开文件的变量——因此也指明了它们的上下文。
- en: For example, in the third method in the preceding code, the `f` variable indicates
    the current opened file within the `with` block at each iteration of the `for`
    loop, and as soon as our program exits that `with` block (which is outside the
    scope of that `f` variable), there is no longer any other way to access it. This
    architecture guarantees that all cleanup associated with a file descriptor happens
    appropriately. The `with` statement is hence called a context manager.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在前面代码的第三种方法中，`f`变量在`with`块的每次迭代中指示当前打开的文件，并且一旦我们的程序退出了`with`块（超出了`f`变量的范围），就再也无法访问它。这种架构保证了与文件描述符相关的所有清理都会适当地进行。因此`with`语句被称为上下文管理器。
- en: The syntax of the with statement
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: with语句的语法
- en: 'The syntax of the `with` statement can be intuitive and straightforward. With
    the purpose of wrapping the execution of a block with methods defined by a context
    manager, it consists of the following simple form:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`with`语句的语法可以直观和简单。为了使用上下文管理器定义的方法包装一个块的执行，它由以下简单形式组成：'
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Note that the `as [target]` part of the `with` statement is actually not required,
    as we will see later on. Additionally, the `with` statement can also handle more
    than one item on the same line. Specifically, the context managers created are
    treated as if multiple `with` statements were nested inside one another. For example,
    look at the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`with`语句中的`as [target]`部分实际上是不需要的，我们稍后会看到。此外，`with`语句也可以处理同一行上的多个项目。具体来说，创建的上下文管理器被视为多个`with`语句嵌套在一起。例如，看看以下代码：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is interpreted as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这被解释为：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The with statement in concurrent programming
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并发编程中的with语句
- en: Obviously, opening and closing external files does not resemble concurrency
    very much. However, we mentioned earlier that the `with` statement, as a context
    manager, is not only used to manage file descriptors, but most resources in general.
    And if you actually found managing lock objects from the `threading.Lock()` class
    similar to managing external files while going through [Chapter 2](d36d34b5-2541-4a16-9f87-ace6cec25865.xhtml),
    *Amdahl's Law*, then this is where the comparison between the two comes in handy.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，打开和关闭外部文件并不太像并发。然而，我们之前提到`with`语句作为上下文管理器，不仅用于管理文件描述符，而且通常用于管理大多数资源。如果你在阅读[第2章](d36d34b5-2541-4a16-9f87-ace6cec25865.xhtml)时发现管理`threading.Lock()`类的锁对象与管理外部文件类似，那么这里的比较就派上用场了。
- en: As a refresher, locks are mechanisms in concurrent and parallel programming
    that are typically used to synchronize threads in a multithreaded application
    (that is, to prevent more than one thread from accessing the critical session
    simultaneously). However, as we will discuss again in [Chapter 12](e8b97a27-3966-4a32-aae6-b8d995f4c662.xhtml),
    *Starvation*, locks are also a common source of **deadlock**, during which a thread
    **acquires** a lock but never **releases** it because of an unhandled occurrence,
    thereby stopping the entire program.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个提醒，锁是并发和并行编程中通常用于同步多线程的机制（即防止多个线程同时访问关键会话）。然而，正如我们将在[第12章](e8b97a27-3966-4a32-aae6-b8d995f4c662.xhtml)中再次讨论的那样，*饥饿*，锁也是**死锁**的常见来源，其中一个线程**获取**了一个锁，但由于未处理的发生而从未**释放**它，从而停止整个程序。
- en: Example of deadlock handling
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 死锁处理示例
- en: 'Let''s look at a quick example in Python. Let''s a take look at the `Chapter04/example2.py`
    file, as shown in the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个Python的快速示例。让我们看一下`Chapter04/example2.py`文件，如下所示：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, we have a `get_data_from_file_v1()`function that takes in the
    path to an external file, reads the data from it, and appends that data to a predeclared
    list called `data`. Inside this function, a lock object called `my_lock`, which
    is also predeclared prior to the function being called, is acquired and released
    as the parameter file is read before and after, respectively.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有一个`get_data_from_file_v1()`函数，它接受外部文件的路径，从中读取数据，并将该数据附加到一个预先声明的名为`data`的列表中。在这个函数内部，一个名为`my_lock`的锁对象，在调用函数之前也是预先声明的，分别在读取文件之前和之后被获取和释放。
- en: In the main program, we will try to call `get_data_from_file_v1()` on a nonexistent
    file, which is one of the most common errors in programming. At the end of the
    program, we also acquire the lock object again. The point is to see whether our
    programming could handle the error of reading a nonexistent file appropriately
    and gracefully with just the `try...except` block that we have.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在主程序中，我们将尝试在一个不存在的文件上调用`get_data_from_file_v1()`，这是编程中最常见的错误之一。在程序的末尾，我们还会再次获取锁对象。重点是看看我们的编程是否能够处理读取不存在文件的错误，只使用我们已经有的`try...except`块。
- en: After running the script, you will notice that our program will print out the
    error message specified in the `try...except` block, `Encountered an exception...`,
    which is expected, since the file could not be found. However, the program will
    also fail to execute the rest of the code; it will never get to the last line
    of code—`print('Lock acquired.')`—and will hang forever (or until you hit *Ctrl*
    + *C* to force-quit the program).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本后，您会注意到我们的程序将打印出`try...except`块中指定的错误消息`遇到异常...`，这是预期的，因为找不到文件。但是，程序还将无法执行其余的代码；它永远无法到达代码的最后一行`print('Lock
    acquired.')`，并且将永远挂起（或者直到您按下*Ctrl* + *C*强制退出程序）。
- en: This is a deadlock situation, which, again, occurs when `my_lock` is acquired
    inside the `get_data_from_file_v1()` function, but since our program encountered
    an error before executing `my_lock.release()`, the lock was never released. This
    in turn caused the `my_lock.acquire()` line at the end of the program to hang,
    as the lock could not be acquired in any way. Our program hence could not reach
    its last line of code, `print('Lock acquired.')`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个死锁的情况，再次发生在`get_data_from_file_v1()`函数内部获取`my_lock`，但由于我们的程序在执行`my_lock.release()`之前遇到错误，锁从未被释放。这反过来导致程序末尾的`my_lock.acquire()`行挂起，因为无论如何都无法获取锁。因此，我们的程序无法达到最后一行代码`print('Lock
    acquired.')`。
- en: 'This problem, however, could be handled with a `with` statement easily and
    effortlessly. In the `example2.py` file, simply comment out the line calling `get_data_from_file_v1()`
    and uncomment the line calling `get_data_from_file_v2()`, and you will have the
    following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个问题可以很容易地通过`with`语句轻松处理。在`example2.py`文件中，只需注释掉调用`get_data_from_file_v1()`的行，并取消注释调用`get_data_from_file_v2()`的行，您将得到以下结果：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `get_data_from_file_v2()` function, we have the equivalent of a pair
    of nested `with` statements, as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在`get_data_from_file_v2()`函数中，我们有一对嵌套的`with`语句，如下所示：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Since `Lock` objects are context managers, simply using `with my_lock:` would
    ensure that the lock object is acquired and released appropriately, even if an
    exception is encountered inside the block. After running the script, you will
    have the following output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`Lock`对象是上下文管理器，简单地使用`with my_lock:`将确保锁对象被适当地获取和释放，即使在块内遇到异常。运行脚本后，您将得到以下输出：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We can see that, this time, our program was able to acquire the lock and reach
    the end of the script gracefully and without errors.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，这次我们的程序能够获取锁，并且在没有错误的情况下优雅地执行脚本的末尾。
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The `with` statement in Python offers an intuitive and convenient way to manage
    resources while ensuring that errors and exceptions are handled correctly. This
    ability to manage resources is even more important in concurrent and parallel
    programming, where various resources are shared and utilized across different
    entities—specifically, by using the `with` statement with `threading.Lock` objects
    that are used to synchronize different threads in a multithreaded application.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的`with`语句提供了一种直观和方便的方式来管理资源，同时确保错误和异常被正确处理。在并发和并行编程中，管理资源的能力更加重要，不同实体之间共享和利用各种资源，特别是通过在多线程应用程序中使用`with`语句与`threading.Lock`对象同步不同线程。
- en: Aside from better error handling and guaranteed cleanup tasks, the `with` statement
    also provides extra readability from your programs, which is one of the strongest
    features that Python offers its developers.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 除了更好的错误处理和保证清理任务外，`with`语句还可以提供程序的额外可读性，这是Python为开发人员提供的最强大的功能之一。
- en: 'In the next chapter, we will be discussing one of the most popular uses of
    Python at the moment: web-scraping applications. We will look at the concept and
    the basic idea behind web scraping, the tools that Python provides to support
    web scraping, and how concurrency will significantly help your web-scraping applications.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论Python目前最流行的用途之一：网络爬虫应用。我们将看看网络爬虫背后的概念和基本思想，Python提供的支持网络爬虫的工具，以及并发如何显著帮助您的网络爬虫应用程序。
- en: Questions
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is a file descriptor and in what ways can it be handled in Python?
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件描述符是什么，Python中如何处理它？
- en: What problem arises when file descriptors are not handled carefully?
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当文件描述符没有得到谨慎处理时会出现什么问题？
- en: What is a lock and in what ways can it be handled in Python?
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁是什么，Python中如何处理它？
- en: What problem arises when locks are not handled carefully?
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当锁没有得到谨慎处理时会出现什么问题？
- en: What is the idea behind context managers?
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上下文管理器背后的思想是什么？
- en: What options does the `with` statement in Python provide in terms of context
    management?
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python的`with`语句在上下文管理方面提供了哪些选项？
- en: Further reading
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information, you can refer to the following links:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，您可以参考以下链接：
- en: '*Python Parallel Programming Cookbook*, by Zaccone and Giancarlo, published
    by Packt, 2015'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Python并行编程食谱*，Zaccone和Giancarlo著，Packt出版，2015'
- en: '*Improve Your Python: the with Statement and Context Managers*, Jeff Knupp
    ([https://jeffknupp.com/blog/2016/03/07/improve-your-python-the-with-statement-and-context-managers/](https://jeffknupp.com/blog/2016/03/07/improve-your-python-the-with-statement-and-context-managers/))'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*改进您的Python：使用with语句和上下文管理器*，Jeff Knupp（[https://jeffknupp.com/blog/2016/03/07/improve-your-python-the-with-statement-and-context-managers/](https://jeffknupp.com/blog/2016/03/07/improve-your-python-the-with-statement-and-context-managers/)）'
- en: '*Compound statements*, Python Software Foundation ([https://docs.python.org/3/reference/compound_stmts.html](https://docs.python.org/3/reference/compound_stmts.html))'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*复合语句*，Python软件基金会（[https://docs.python.org/3/reference/compound_stmts.html](https://docs.python.org/3/reference/compound_stmts.html)）'
