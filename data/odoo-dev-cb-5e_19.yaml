- en: '19'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '19'
- en: Managing, Deploying, and Testing with Odoo.sh
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Odoo.sh 进行管理、部署和测试
- en: In 2017, Odoo released Odoo.sh, a new cloud service. Odoo.sh is a platform that
    makes the process of testing, deploying, and monitoring Odoo instances as easy
    as possible. In this chapter, we will look at how Odoo.sh works, when you should
    use it over other deployment options, and its features.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2017 年，Odoo 发布了 Odoo.sh，这是一种新的云服务。Odoo.sh 是一个平台，它使测试、部署和监控 Odoo 实例的过程尽可能简单。在本章中，我们将探讨
    Odoo.sh 的工作原理，何时应该使用它而不是其他部署选项，以及其功能。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Exploring some basic concepts of Odoo.sh
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Odoo.sh 的一些基本概念
- en: Creating an Odoo.sh account
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Odoo.sh 账户
- en: Adding and installing custom modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加和安装自定义模块
- en: Managing branches
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理分支
- en: Accessing debugging options
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问调试选项
- en: Getting a backup of your instance
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取您实例的备份
- en: Checking the status of your builds
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查构建状态
- en: All Odoo.sh options
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有 Odoo.sh 选项
- en: Important note
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: This chapter is written under the assumption that you have Odoo.sh access. It
    is a paid service, and you will need a subscription code to access the platform.
    If you are an Odoo partner, you will get a free Odoo.sh subscription code. Otherwise,
    you will need to purchase it from [https://www.odoo.sh/pricing](https://www.odoo.sh/pricing).
    You can still go through this chapter even if you don’t have a subscription code.
    It contains enough screenshots to help you understand the platform.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的编写假设您有 Odoo.sh 访问权限。这是一个付费服务，您需要订阅代码才能访问该平台。如果您是 Odoo 合作伙伴，您将获得免费的 Odoo.sh
    订阅代码。否则，您需要从 [https://www.odoo.sh/pricing](https://www.odoo.sh/pricing) 购买。即使您没有订阅代码，您也可以阅读本章。它包含足够的截图，可以帮助您了解该平台。
- en: A note for print readers
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 印刷读者注意事项
- en: 'For the benefit of print readers, there are certain images showing the layout
    of a window in this chapter that may require zooming to view them clearly. You
    can access the graphic bundle containing high-quality images at this link: [https://packt.link/gbp/9781805124276](https://packt.link/gbp/9781805124276)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便印刷读者，本章中包含了一些显示窗口布局的图片，可能需要放大才能清晰查看。您可以通过以下链接访问包含高质量图片的图形包：[https://packt.link/gbp/9781805124276](https://packt.link/gbp/9781805124276)
- en: Exploring some basic concepts of Odoo.sh
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Odoo.sh 的一些基本概念
- en: In this recipe, we will look at some of the features of the Odoo.sh platform.
    We will answer some basic questions, such as when you should use it and why it
    should be used.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨 Odoo.sh 平台的一些功能。我们将回答一些基本问题，例如何时使用它以及为什么应该使用它。
- en: What is Odoo.sh?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 Odoo.sh？
- en: Odoo.sh is a cloud service that provides the platform with the ability to host
    Odoo instances with custom modules. Putting it simply, it is Odoo’s **platform
    as a service** (**PaaS**) cloud solution. It is fully integrated with GitHub.
    Any GitHub repository with valid Odoo modules can be launched on Odoo.sh within
    minutes. You can examine the ongoing development by testing multiple branches
    in parallel. Once you have moved your instance to production, you can test some
    new features with a copy of the production database; this helps to avoid regression.
    It also takes daily backups. With Odoo.sh, you can deploy Odoo instances efficiently,
    even if you don’t have sound knowledge of DevOps. It automatically sets up an
    Odoo instance with top-notch configurations. Note that Odoo.sh is the Enterprise
    edition of Odoo. You cannot use the Odoo Community edition because Odoo.sh will
    only load the Enterprise edition.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo.sh 是一种云服务，它为平台提供了托管带有自定义模块的 Odoo 实例的能力。简单来说，它是 Odoo 的 **平台即服务**（**PaaS**）云解决方案。它与
    GitHub 完全集成。任何包含有效 Odoo 模块的 GitHub 仓库都可以在几分钟内在 Odoo.sh 上启动。您可以通过并行测试多个分支来检查正在进行中的开发。一旦您将实例迁移到生产环境，您可以使用生产数据库的副本测试一些新功能；这有助于避免回归。它还会进行每日备份。使用
    Odoo.sh，您可以高效地部署 Odoo 实例，即使您没有深厚的 DevOps 知识。它自动设置具有顶级配置的 Odoo 实例。请注意，Odoo.sh 是
    Odoo 的企业版。您不能使用 Odoo 社区版，因为 Odoo.sh 只会加载企业版。
- en: Why was Odoo.sh introduced?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么会引入 Odoo.sh？
- en: Before Odoo.sh was introduced, there were two ways to host Odoo instances. The
    first was to use Odoo Online, which is a **software as a service** (**SaaS**)
    cloud service. The second method was the on-premises option, in which you needed
    to host an Odoo instance and configure it on your server yourself. Now, both of
    these options have pros and cons. In the Odoo online option, you don’t need to
    configure or deploy it, as it is a SaaS service. However, you cannot use custom
    modules on this platform. On the other hand, with the on-premises option, you
    can use custom modules, but you need to do everything yourself. You need to purchase
    the server, you need to configure the database and NGINX, and you need to set
    up the mail server, daily backups, and security.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo.sh推出之前，有两种托管Odoo实例的方式。第一种是使用Odoo Online，这是一个**软件即服务**（**SaaS**）云服务。第二种方法是本地部署选项，其中你需要自己托管一个Odoo实例并在服务器上配置它。现在，这两种选项都有优缺点。在Odoo在线选项中，你不需要配置或部署它，因为它是一个SaaS服务。然而，你无法在这个平台上使用自定义模块。另一方面，使用本地部署选项，你可以使用自定义模块，但你需要自己完成所有工作。你需要购买服务器，你需要配置数据库和NGINX，你还需要设置邮件服务器、每日备份和安全。
- en: For this reason, there was a need for a new option that provided the simplicity
    of Odoo online and the flexibility of the on-premises option. Odoo.sh lets you
    use custom modules without a complex configuration. It also provides additional
    features, such as testing branches, staging branches, and automated tests.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，需要一个新选项，它提供了Odoo在线的简单性和本地部署选项的灵活性。Odoo.sh让你可以在不进行复杂配置的情况下使用自定义模块。它还提供了额外的功能，例如测试分支、预发布分支和自动测试。
- en: Important note
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is not completely true that customization is not possible on Odoo online.
    With Odoo Studio and other techniques, you can carry out customization. The scope
    of this customization, however, is very narrow.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo在线上无法进行定制并不完全正确。使用Odoo Studio和其他技术，你可以进行定制。然而，这种定制的范围非常有限。
- en: When should you use Odoo.sh?
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你应该在什么时候使用Odoo.sh？
- en: If you don’t need customization or you only need a small amount of customization
    that is possible in Odoo online, you should go for Odoo online. This will save
    both time and money. If you want a significant amount of customization and you
    have teamed up with expert DevOps engineers, you can choose the on-premises option.
    Odoo.sh is suitable for when you have good knowledge of Odoo customization but
    do not have any expertise in DevOps. With Odoo.sh, there’s no need to carry out
    complex configurations; you can start using it straight away, along with your
    customization. It even configures the mailing server.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不需要定制化，或者只需要在Odoo在线中可能实现的小量定制，你应该选择Odoo在线。这将节省时间和金钱。如果你想进行大量的定制，并且已经与专家DevOps工程师团队合作，你可以选择本地部署选项。Odoo.sh适合当你对Odoo定制化有良好了解但没有任何DevOps专业知识时。使用Odoo.sh，你无需执行复杂的配置；你可以立即开始使用它，包括你的定制。它甚至还会配置邮件服务器。
- en: Odoo.sh is very useful when you are developing a large project with agile methodology.
    This is because on Odoo.sh, you can test multiple development branches in parallel
    and deploy the stable development in production in minutes. You can even share
    the test development with the end customer.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用敏捷方法开发大型项目时，Odoo.sh非常有用。这是因为On Odoo.sh，你可以并行测试多个开发分支，并在几分钟内将稳定开发部署到生产环境中。你甚至可以将测试开发与最终客户共享。
- en: What are the features of Odoo.sh?
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Odoo.sh有哪些功能？
- en: 'Odoo has invested a lot of time in the development of the Odoo.sh platform,
    and it is packed with features as a result. Let’s have a look at the features
    of Odoo.sh. Note that Odoo adds new features from time to time. In this section,
    I have mentioned the features that are available at the time of writing this book,
    but you might find some further features as well:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo在Odoo.sh平台的发展上投入了大量时间，因此它功能丰富。让我们看看Odoo.sh的功能。请注意，Odoo会不时添加新功能。在本节中，我提到了在撰写本书时可用的一些功能，但你可能还会发现一些其他功能：
- en: '**GitHub integration**: This platform is fully integrated with GitHub. You
    can test every branch, pull, or commit here. For every new commit, a new branch
    will be pulled automatically. It will also run an automated test for the new commits.
    You can even create/merge branches from the Odoo.sh UI itself.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub集成**：这个平台完全集成了GitHub。你可以在这里测试每个分支、拉取或提交。对于每个新的提交，都会自动拉取一个新的分支。它还会为新提交运行自动测试。你甚至可以直接从Odoo.sh
    UI创建/合并分支。'
- en: '**Web shell**: Odoo.sh provides the web shell in the browser for the current
    build (or production server). Here, you can see all the modules and logs.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web壳**：Odoo.sh为当前构建（或生产服务器）提供浏览器中的Web壳。在这里，您可以查看所有模块和日志。'
- en: '**Web code editor**: Just like the web shell, Odoo.sh provides the code editor
    in the browser. Here, you can access all of the source code and also get the Odoo
    interactive shell for the current build.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web代码编辑器**：就像Web壳一样，Odoo.sh在浏览器中提供了代码编辑器。在这里，您可以访问所有源代码，还可以获取当前构建的Odoo交互式shell。'
- en: '**SSH access**: By registering your public keys, you can connect to any container
    via SSH.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SSH访问**：通过注册您的公钥，您可以通过SSH连接到任何容器。'
- en: '`requirement.txt` to the root of your GitHub repository. Right now, you can
    only install Python packages. It is not possible to install system packages (apt
    packages).'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`requirement.txt`文件放置在GitHub仓库的根目录下。目前，您只能安装Python包。无法安装系统包（apt包）。
- en: '**Server logs**: You can access the server log for each build from this browser.
    These logs are in real time, and you can also filter them from here.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器日志**：您可以从浏览器访问每个构建的服务器日志。这些日志是实时的，您也可以从这里过滤它们。'
- en: '**Automated tests**: Odoo.sh provides your own runbot, which you can use to
    perform a series of automated tests for your development. Whenever you add a new
    commit or a new development branch, Odoo.sh will automatically run all of the
    test cases and show the status of the tests. You can access the full test log,
    which will help you find issues if a test case fails.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化测试**：Odoo.sh提供您自己的runbot，您可以使用它来执行一系列自动化测试。每次您添加新的提交或新的开发分支时，Odoo.sh都会自动运行所有测试用例并显示测试状态。您可以访问完整的测试日志，这有助于您在测试用例失败时找到问题。'
- en: '**Staging and development branches**: Odoo.sh provides two types of branches:
    the development branch and the staging branch. In the development branch, you
    can test ongoing development with demonstration data. The staging branch is used
    when the development is finished, and you want to test the feature before merging
    it into production. The staging branch does not load the demonstration data; instead,
    it uses a copy of the production server.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预发布和开发分支**：Odoo.sh提供两种类型的分支：开发分支和预发布分支。在开发分支中，您可以使用演示数据测试正在进行中的开发。当开发完成，您想在将功能合并到生产之前测试功能时，使用预发布分支。预发布分支不加载演示数据；相反，它使用生产服务器的副本。'
- en: '**Mail server**: Odoo.sh automatically sets up a mail server for the production
    server. Just like Odoo online, Odoo.sh does not need any extra configuration for
    email, although it is possible to use your own mail server.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**邮件服务器**：Odoo.sh自动为生产服务器设置邮件服务器。就像Odoo在线一样，Odoo.sh不需要任何额外的邮件配置，尽管您可以使用自己的邮件服务器。'
- en: '**Mail catcher**: The staging branch uses a copy of your production database,
    so it has information about your real customers. Testing on such a database can
    make it possible to send emails to real customers. To avoid this issue, the email
    feature is only activated on production branches. Staging and development branches
    do not send real emails; instead, they use a mail catcher so that you can test
    and see emails in the staging and development branches.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**邮件捕获器**：预发布分支使用您生产数据库的副本，因此包含有关您真实客户的信息。在这样一个数据库上进行测试可以使向真实客户发送邮件成为可能。为了避免这个问题，邮件功能仅在生产分支上激活。预发布和开发分支不会发送真实邮件；相反，它们使用邮件捕获器，这样您就可以在预发布和开发分支中测试和查看邮件。'
- en: '**Share the build**: With Odoo.sh, you can share the development branches with
    your customers so they can test them before merging the feature into production.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享构建**：使用Odoo.sh，您可以与客户共享开发分支，以便他们在将功能合并到生产之前进行测试。'
- en: '**Faster deployment**: As Odoo.sh is fully integrated with GitHub, you can
    merge and deploy the development branches directly from the browser with a simple
    drag-and-drop procedure.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快部署**：由于Odoo.sh完全集成GitHub，您可以直接从浏览器通过简单的拖放操作合并和部署开发分支。'
- en: '**Backup and recovery**: Odoo.sh keeps full backups for the production instance.
    You can download or restore any of these backups in just a few clicks. Refer to
    the *Getting a backup of your instance* recipe to learn more about backups. Odoo.sh
    keeps 14 full backups for up to 3 months: 1 per day for 7 days, 1 per week for
    4 weeks, 1 per month for 3 months.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**备份和恢复**：Odoo.sh为生产实例保留完整备份。您只需点击几下即可下载或恢复这些备份。请参阅“获取实例备份”菜谱以了解更多关于备份的信息。Odoo.sh保留最多3个月的14个完整备份：每天1个，持续7天；每周1个，持续4周；每月1个，持续3个月。'
- en: '**Community modules**: You can test and install any community module in a few
    simple clicks. You can also test free modules directly from the app store.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区模块**：您可以通过几个简单的点击测试和安装任何社区模块。您还可以直接从应用商店测试免费模块。'
- en: Creating an Odoo.sh account
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Odoo.sh 账户
- en: In this recipe, we will create an Odoo.sh account and an empty repository for
    the custom add-ons.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将创建一个 Odoo.sh 账户和一个用于自定义附加组件的空仓库。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a GitHub account on which you can add custom
    modules. You will also need an Odoo.sh subscription code. If you are an Odoo partner,
    you will get a free Odoo.sh subscription code. Otherwise, you will need to purchase
    it from [https://www.odoo.sh/pricing](https://www.odoo.sh/pricing).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，您需要一个可以添加自定义模块的 GitHub 账户。您还需要一个 Odoo.sh 订阅代码。如果您是 Odoo 合作伙伴，您将获得免费的
    Odoo.sh 订阅代码。否则，您需要从 [https://www.odoo.sh/pricing](https://www.odoo.sh/pricing)
    购买。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to create an Odoo.sh account:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建 Odoo.sh 账户：
- en: 'Open [https://www.odoo.sh](https://www.odoo.sh) and click on **Sign in** in
    the top menu. This will redirect you to the GitHub page:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 [https://www.odoo.sh](https://www.odoo.sh) 并点击顶部菜单中的 **登录**。这将您重定向到 GitHub
    页面：
- en: '![Figure 19.1 – GitHub authentication](img/B20997_19_01.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 19.1 – GitHub 认证](img/B20997_19_01.jpg)'
- en: Figure 19.1 – GitHub authentication
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.1 – GitHub 认证
- en: 'Give authorization to your repositories, which will redirect you back to Odoo.sh.
    Fill in the form to deploy the instance:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 授权您的仓库，这将您重定向回 Odoo.sh。填写表单以部署实例：
- en: '![Figure 19.2 – Create an Odoo.sh instance](img/B20997_19_02.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 19.2 – 创建 Odoo.sh 实例](img/B20997_19_02.jpg)'
- en: Figure 19.2 – Create an Odoo.sh instance
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.2 – 创建 Odoo.sh 实例
- en: 'This will deploy the instance, and you will be redirected to the Odoo.sh control
    panel. Wait for the build status to be successful; then, you can connect to your
    instance with the **CONNECT** button displayed in the following screenshot:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将部署实例，您将被重定向到 Odoo.sh 控制面板。等待构建状态成功；然后，您可以使用以下截图显示的 **连接** 按钮连接到您的实例：
- en: '![Figure 19.3 – Connect to the development instance](img/B20997_19_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 19.3 – 连接到开发实例](img/B20997_19_03.jpg)'
- en: Figure 19.3 – Connect to the development instance
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.3 – 连接到开发实例
- en: Upon clicking **CONNECT**, you will be automatically logged in to your instance.
    If you are an admin, by clicking on the arrow button at the side, you can connect
    as other users as well.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **连接** 后，您将自动登录到您的实例。如果您是管理员，通过点击侧边的箭头按钮，您也可以以其他用户的身份连接。
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Odoo.sh platform is integrated with GitHub. You need to give full authorization
    to Odoo.sh so that it can access your repositories. Odoo.sh will also create the
    webhooks. GitHub webhooks notify the Odoo.sh platform when a new commit or branch
    has been added to your repository. When you sign in for the first time, Odoo.sh
    will redirect you to GitHub. GitHub will show a page similar to the screenshot
    in *step 1*, in which you will need to provide access to all of your private and
    public repositories. If you are not the owner of the repository, you will see
    the button to make an access request to the owner for the rights.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo.sh 平台与 GitHub 集成。您需要完全授权 Odoo.sh 以便它可以访问您的仓库。Odoo.sh 还将创建 webhooks。GitHub
    webhooks 会在您的仓库中添加新的提交或分支时通知 Odoo.sh 平台。当您首次登录时，Odoo.sh 将您重定向到 GitHub。GitHub 将显示一个类似于
    *步骤 1* 中的截图的页面，您需要提供对所有私有和公共仓库的访问权限。如果您不是仓库的所有者，您将看到向所有者请求访问权限的按钮。
- en: 'After you grant repository access to Odoo.sh, you will be redirected back to
    Odoo.sh, where you will see the form to deploy the Odoo instance. To create a
    new instance, you will need to add the following information:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在您授予 Odoo.sh 仓库访问权限后，您将被重定向回 Odoo.sh，在那里您将看到部署 Odoo 实例的表单。要创建新实例，您需要添加以下信息：
- en: '**GitHub repository**: Here, you will need to set the GitHub repository with
    your custom modules. The modules in this repository will be available to the Odoo
    instance. You will see a list of all your existing repositories. You can select
    one of them or create a new one.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub 仓库**：在这里，您需要设置带有自定义模块的 GitHub 仓库。此仓库中的模块将可供 Odoo 实例使用。您将看到所有现有仓库的列表。您可以选择其中一个或创建一个新的。'
- en: '**Odoo version**: Choose the Odoo version you want to deploy. You can select
    from the currently supported Odoo LTS versions. Make sure you select the version
    that is compatible with the modules in the GitHub repository. For our example,
    we will select version 14.0.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Odoo 版本**：选择您想要部署的 Odoo 版本。您可以从当前支持的 Odoo LTS 版本中选择。请确保您选择的版本与 GitHub 仓库中的模块兼容。在我们的示例中，我们将选择版本
    14.0。'
- en: '**Subscription code**: This is the code to activate the instance. You will
    receive the code via email after purchasing an Odoo.sh plan; if you are an official
    Odoo partner, you can ask for this code from Odoo.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订阅代码**：这是激活实例的代码。购买 Odoo.sh 计划后，您将通过电子邮件收到此代码；如果您是官方 Odoo 合作伙伴，您可以向 Odoo
    申请此代码。'
- en: '**Hosting location**: Here, you need to choose a server location based on your
    geographic location. The server that is nearest will give the best performance.
    The latency displayed under the hosting location is based on your location. So
    if you are creating an instance for your customer and the customer is in another
    country, you will need to select a server location that is near the customer’s
    location with lower latency.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**托管位置**：在这里，您需要根据您的地理位置选择服务器位置。最近的服务器将提供最佳性能。托管位置下显示的延迟基于您的位置。因此，如果您为您的客户创建实例，而客户位于另一个国家，您需要选择一个接近客户位置且延迟较低的服务器位置。'
- en: Once you submit this form, your Odoo instances will be deployed, and you will
    be redirected to the Odoo.sh control panel. Here, you will see your first build.
    It will take a few minutes, and then you will be able to connect to your Odoo
    instance. If you check the left panel, you will see that there are no branches
    in the production and staging sections and that only one branch is in the development
    section. In the next few recipes, we will see how you can create staging and production
    branches.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦提交此表单，您的 Odoo 实例将被部署，您将被重定向到 Odoo.sh 控制面板。在这里，您将看到您的第一个构建。这需要几分钟时间，然后您将能够连接到您的
    Odoo 实例。如果您检查左侧面板，您将看到生产和预发布部分没有分支，而开发部分只有一个分支。在接下来的几个食谱中，我们将看到您如何创建预发布和生产的分支。
- en: There’s more...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Right now, Odoo.sh only works with GitHub. Other version-control systems, such
    as GitLab and Bitbucket, are not supported right now. If you want to use a system
    other than GitHub, you can use the intermediate GitHub repository that is linked
    to your actual repository via the submodule. In the future, Odoo will add support
    for GitLab and Bitbucket, but this is not the priority at the moment, according
    to the Odoo officials. The method suggested here is just a workaround if you want
    to use GitLab or Bitbucket.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Odoo.sh 只支持 GitHub。其他版本控制系统，如 GitLab 和 Bitbucket，目前不支持。如果您想使用除 GitHub 之外的系统，您可以使用通过子模块链接到您实际仓库的中间
    GitHub 仓库。根据 Odoo 官方的说法，未来 Odoo 将会增加对 GitLab 和 Bitbucket 的支持，但这目前不是优先事项。如果您想使用
    GitLab 或 Bitbucket，这里提供的方法只是一个权宜之计。
- en: Adding and installing custom modules
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加和安装自定义模块
- en: As we described earlier, in the *Exploring some basic concepts of Odoo.sh* recipe,
    on the Odoo.sh platform, you can add custom Odoo modules. The platform is integrated
    with GitHub, so adding a new commit in the registered repository will create a
    new build in the respective branch. In this recipe, we will add a custom module
    in our repository and access that module in Odoo.sh.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前在 *探索 Odoo.sh 的一些基本概念* 食谱中所述，在 Odoo.sh 平台上，您可以添加自定义 Odoo 模块。该平台与 GitHub
    集成，因此向已注册的仓库添加新提交将在相应的分支中创建新的构建。在本食谱中，我们将在我们的仓库中添加一个自定义模块，并在 Odoo.sh 中访问该模块。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For our example, we will choose the `my_hostel` module from [*Chapter 18*](B20997_18.xhtml#_idTextAnchor990),
    *Automated Test Cases*. You can add any valid Odoo module in this recipe, but
    we will use the module with test cases here, as the Odoo.sh platform will perform
    all the test cases automatically. For simplicity, we have added this module in
    the GitHub repository of this book, at `Chapter20/r0_initial_module/my_hostel`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将从 [*第 18 章*](B20997_18.xhtml#_idTextAnchor990) 的 *自动化测试用例* 中选择 `my_hostel`
    模块。您可以在本食谱中添加任何有效的 Odoo 模块，但我们将在这里使用带有测试用例的模块，因为 Odoo.sh 平台将自动执行所有测试用例。为了简化，我们已将此模块添加到本书的
    GitHub 仓库中，位于 `Chapter20/r0_initial_module/my_hostel`。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to add your custom modules to Odoo.sh:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤将自定义模块添加到 Odoo.sh：
- en: 'Get your Git repository on your local machine, add the `my_hostel` module in
    it, and then execute the following command to push the module into the GitHub
    repository:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的本地机器上获取 Git 仓库，将其中的 `my_hostel` 模块添加进去，然后执行以下命令将模块推送到 GitHub 仓库：
- en: '[PRE0]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open your project in Odoo.sh. Here, you will find a new build for this commit.
    It will start running test cases, and you will see the following screen:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Odoo.sh 中打开你的项目。在这里，你可以找到针对此提交的新构建。它将开始运行测试用例，你将看到以下屏幕：
- en: '![Figure 19.4 – New build for the hostel module](img/B20997_19_04.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 19.4 – 宿舍模块的新构建](img/B20997_19_04.jpg)'
- en: Figure 19.4 – New build for the hostel module
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.4 – 宿舍模块的新构建
- en: 'After a new commit is pulled in your Odoo.sh project, you will see the installation
    progress on the right side. Wait for the installation to be complete, then access
    your instance by clicking on the green `my_hostel` module:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在 Odoo.sh 项目中拉取新的提交后，你将在右侧看到安装进度。等待安装完成，然后通过点击绿色的 `my_hostel` 模块来访问你的实例：
- en: '![Figure 19.5 – Hostel module installed](img/B20997_19_05.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 19.5 – 安装的宿舍模块](img/B20997_19_05.jpg)'
- en: Figure 19.5 – Hostel module installed
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.5 – 安装的宿舍模块
- en: Explore and test the `my_hostel` module. Note that this is not a production
    build, so you can test it however you like.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 探索并测试 `my_hostel` 模块。请注意，这不是一个生产构建，所以你可以随意测试它。
- en: How it works...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In *step 1*, we uploaded the `my_hostel` module to the GitHub repository. Odoo.sh
    will be notified about these changes instantly through a webhook. Then, Odoo.sh
    will start building a new instance. It will install all your custom modules and
    their dependencies. A new build will automatically perform the test cases for
    the installed modules.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们将 `my_hostel` 模块上传到 GitHub 仓库。Odoo.sh 将通过 webhook 立即通知这些更改。然后，Odoo.sh
    将开始构建一个新的实例。它将安装所有你的自定义模块及其依赖项。新的构建将自动为安装的模块执行测试用例。
- en: Important note
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: By default, Odoo.sh will only install your custom modules and their dependencies.
    If you want to change this behavior, you can do it from the module installation
    section of the global settings. We will look at these settings in detail in the
    next few recipes.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Odoo.sh 只会安装你的自定义模块及其依赖项。如果你想改变这种行为，你可以在全局设置的模块安装部分进行操作。我们将在接下来的几个菜谱中详细查看这些设置。
- en: In the **HISTORY** tab, you will be able to see the full history of the branch.
    Here, you can find some basic information about the build. It will display the
    commit message, the author information, and the GitHub link of the commit. On
    the right side, you will get the live progress of the build. Note that the builds
    in the development section will install the modules with demonstration data. In
    the next few recipes, you will see the difference between the production, development,
    and staging branches in detail.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **历史** 选项卡中，你将能够看到分支的完整历史。在这里，你可以找到有关构建的一些基本信息。它将显示提交信息、作者信息和提交的 GitHub 链接。在右侧，你将获得构建的实时进度。请注意，开发部分中的构建将安装带有演示数据的模块。在接下来的几个菜谱中，你将详细了解生产、开发和预发布分支之间的差异。
- en: After a successful build, you will see a button to connect the instance. By
    default, you will be connected with the admin user. Using **CONNECT** as a drop-down
    menu, you can log in as a demo and portal user instead.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 构建成功后，你将看到一个按钮来连接实例。默认情况下，你将以管理员用户身份连接。通过 **连接** 作为下拉菜单，你可以登录为演示和门户用户。
- en: There’s more...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Odoo.sh will create a new build for every new commit. You can change this behavior
    from the **SETTINGS** tab of the branch:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo.sh 将为每个新的提交创建一个新的构建。你可以从分支的 **设置** 选项卡更改此行为：
- en: '![Figure 19.6 – Development branch options](img/B20997_19_06.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 19.6 – 开发分支选项](img/B20997_19_06.jpg)'
- en: Figure 19.6 – Development branch options
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.6 – 开发分支选项
- en: 'Here, you will find several options. One of them is **Behavior upon new commits**.
    It has three possible values:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以找到几个选项。其中之一是 **对新提交的行为**。它有三个可能的值：
- en: '**New Build**: This option will create a new build for each commit'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新构建**：此选项将为每个提交创建一个新的构建'
- en: '**Do Nothing**: This option will ignore the new commit and do nothing'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不执行任何操作**：此选项将忽略新的提交并执行任何操作'
- en: '**Update Previous Build**: This will use an existing build for the new commit'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新上一个构建**：这将使用现有构建为新提交'
- en: The **Module installation** and **Test suite** options will help you control
    the test suites. You can disable testing and you can run specific test cases with
    these options.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**模块安装** 和 **测试套件** 选项可以帮助你控制测试套件。你可以使用这些选项禁用测试，也可以运行特定的测试用例。'
- en: Managing branches
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理分支
- en: In Odoo.sh, you can create multiple development and staging branches along with
    the production branch. In this recipe, we will create different types of branches
    and see the differences between them. You will see the full workflow of how you
    can develop, test, and deploy the new features.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo.sh中，您可以创建多个开发分支和预发布分支，以及生产分支。在这个配方中，我们将创建不同类型的分支，并查看它们之间的区别。您将看到如何开发、测试和部署新功能的完整工作流程。
- en: Getting ready
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Visit [https://www.odoo.sh/project](https://www.odoo.sh/project) and open the
    project we created in the *Creating an Odoo.sh account* recipe. We will create
    a development branch for the new feature and then test it in the staging branch.
    Finally, we will merge the feature in the production branch.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[https://www.odoo.sh/project](https://www.odoo.sh/project)并打开我们在*创建Odoo.sh账户*配方中创建的项目。我们将为新的功能创建一个开发分支，然后在预发布分支中对其进行测试。最后，我们将该功能合并到生产分支中。
- en: How to do it...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In this recipe, we will create all types of branches in Odoo.sh. At the moment,
    we don’t have any branches in production, so we will start by creating a production
    branch.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将创建Odoo.sh中的所有类型的分支。目前，我们在生产环境中没有任何分支，所以我们将从创建一个生产分支开始。
- en: Creating the production branch
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建生产分支
- en: 'Right now, we only have one **main** branch in the **Development** section.
    The last build of the **main** branch shows a green label that reads **Test: success**,
    meaning that all of the automated test cases have run successfully. We can move
    this branch into the **Production** branch, as the test case status shows that
    everything is fine. In order to move your **main** branch into the **Production**
    branch, you just need to drag the **main** branch from the **Development** section
    and drop it in the **Production** section, as shown in the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们在**开发**部分只有一个**主**分支。**主**分支的最后构建显示一个绿色的标签，上面写着**测试：成功**，这意味着所有自动测试用例都已成功运行。我们可以将这个分支移动到**生产**分支，因为测试用例的状态显示一切正常。为了将您的**主**分支移动到**生产**分支，您只需将**主**分支从**开发**部分拖动到**生产**部分，如下面的截图所示：
- en: '![Figure 19.7 – Move the main branch to Production](img/B20997_19_07.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图19.7 – 将主分支移动到生产环境](img/B20997_19_07.jpg)'
- en: Figure 19.7 – Move the main branch to Production
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.7 – 将主分支移动到生产环境
- en: This will create your **Production** branch. You can access the **Production**
    branch with the **Connect** button on the right side. Once you open the production
    instance, you will notice that there have been no applications installed in the
    production database. This is because the production instance requires you or your
    end customer to install and configure the operation according to the requirements.
    Note that this is a production instance, so in order to keep the instance running,
    you need to enter your Enterprise subscription code.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建您的**生产**分支。您可以通过右侧的**连接**按钮访问**生产**分支。一旦您打开生产实例，您会注意到生产数据库中还没有安装任何应用程序。这是因为生产实例需要您或您的最终客户根据要求安装和配置操作。请注意，这是一个生产实例，因此为了保持实例运行，您需要输入您的企业订阅代码。
- en: Creating a development branch
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建开发分支
- en: You can create development branches directly from the browser. Click on the
    plus (**+**) button next to the **Development** section. This will show two types
    of input. One is the branch to fork, and the other is the name of the development
    branch. After filling in the input, hit the *Enter* key.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接从浏览器创建开发分支。点击**开发**部分旁边的加号（**+**）按钮。这将显示两种类型的输入。一种是分叉的分支，另一种是开发分支的名称。填写完输入后，按*Enter*键。
- en: 'This will create a new branch by forking the given branch, as shown in the
    following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通过分叉指定的分支来创建一个新的分支，如下面的截图所示：
- en: '![Figure 19.8 – Create a new development branch](img/B20997_19_08.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图19.8 – 创建一个新的开发分支](img/B20997_19_08.jpg)'
- en: Figure 19.8 – Create a new development branch
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.8 – 创建一个新的开发分支
- en: Important note
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you don’t want to create a development branch from the UI, you can create
    it directly from GitHub. If you add a new branch in the GitHub repository, Odoo.sh
    will create a new development branch automatically.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想从UI创建开发分支，您可以直接从GitHub创建。如果您在GitHub仓库中添加一个新的分支，Odoo.sh将自动创建一个新的开发分支。
- en: 'Branches in development are usually new feature branches. As an example, we
    will add a new field in the `hostel.room` model. Follow these steps to add a new
    HTML field in the `hostel` model:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 开发中的分支通常是新功能分支。例如，我们将在 `hostel.room` 模型中添加一个新字段。按照以下步骤在 `hostel` 模型中添加一个新 HTML
    字段：
- en: 'Increase the module version in the `manifest` file:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `manifest` 文件中增加模块版本：
- en: '[PRE1]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add a new field in the model:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模型中添加新字段：
- en: '[PRE2]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add a **policy** field in the hostel’s form view:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在宿舍的表单视图中添加一个 **策略** 字段：
- en: '[PRE3]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Push the changes in the feature branch by executing the following command in
    the terminal:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中执行以下命令以推送功能分支的更改：
- en: '[PRE4]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will create a new build on Odoo.sh. After a successful build, you can test
    this new feature by accessing the instance. You will be able to see a new HTML
    field in the book’s form view. Note that this branch is the development branch,
    so the new feature is only available to this branch. Your production branch has
    not changed.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 Odoo.sh 上创建一个新的构建。构建成功后，您可以通过访问实例来测试这个新功能。您将在书籍的表单视图中看到一个新 HTML 字段。请注意，这个分支是开发分支，所以新功能仅适用于这个分支。您的生产分支没有改变。
- en: Creating a staging branch
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建预发布分支
- en: 'Once you complete the development branch and the test cases are successful,
    you can move the branch to the **Staging** section. This is the pre-production
    section. Here, the new feature will be tested with a copy of the production database.
    This will help us to find any issues that might be generated in the production
    database. To move from the development branch to the **Staging** branch, just
    drag and drop the branch into the **Staging** section:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成开发分支并且测试用例成功，您可以将分支移动到 **预发布** 部分。这是预生产部分。在这里，新功能将使用生产数据库的副本进行测试。这将帮助我们找到可能在生产数据库中产生的问题。要从开发分支移动到
    **预发布** 分支，只需将分支拖放到 **预发布** 部分即可：
- en: '![Figure 19.9 – Move the development branch to Staging](img/B20997_19_09.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 19.9 – 将开发分支移动到预发布](img/B20997_19_09.jpg)'
- en: Figure 19.9 – Move the development branch to Staging
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.9 – 将开发分支移动到预发布
- en: Once you move the **Development** branch to the **Staging** section, you can
    test your new development with production data. Just like any other build, you
    can access the **Staging** branch with the **CONNECT** button on the right. The
    only difference is that you will be able to see the data of the production database
    in this case. Here, your development module is only upgraded automatically if
    you have increased the module version from the manifest.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将 **开发** 分支移动到 **预发布** 部分，您就可以使用生产数据测试您的新开发。就像任何其他构建一样，您可以通过右侧的 **连接** 按钮访问
    **预发布** 分支。唯一的区别是，在这种情况下，您将能够看到生产数据库的数据。在这里，只有当您从 **manifest** 中增加了模块版本时，您的开发模块才会自动升级。
- en: Important note
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The staging branch will use a copy of the production database, so the staging
    instance will have real customers and their emails. For this reason, in the staging
    branch, real emails are disabled so that you don’t send any by accident when testing
    a new feature in the staging branch.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 预发布分支将使用生产数据库的副本，因此预发布实例将包含真实客户及其电子邮件。因此，在预发布分支中，真实电子邮件被禁用，这样您在测试预发布分支中的新功能时就不会意外发送任何邮件。
- en: If you haven’t changed the module version, you will need to upgrade the modules
    manually to see the new features in action.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有更改模块版本，您需要手动升级模块才能看到新功能的效果。
- en: Merging new features in the production branch
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在生产分支中合并新功能
- en: 'After you test the new development with the production database (in the staging
    branch), you can deploy the new development into the **Production** branch. Like
    before, you just need to drag and drop the **Staging** branch into the **Production**
    branch. This will merge the new feature branch into the main branch. Like the
    **Staging** branch, your development module is only upgraded automatically if
    you have increased the module version from **manifest**. After this, the new module
    is available for the end customer:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在您使用生产数据库（在预发布分支中）测试新开发之后，您可以将新开发部署到 **生产** 分支。就像以前一样，您只需要将 **预发布** 分支拖放到 **生产**
    分支。这将合并新功能分支到主分支。就像 **预发布** 分支一样，只有当您从 **manifest** 中增加了模块版本时，您的开发模块才会自动升级。在此之后，新模块对最终客户可用：
- en: '![Figure 19.10 – Merge changes to production](img/B20997_19_010.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 19.10 – 合并更改到生产](img/B20997_19_010.jpg)'
- en: Figure 19.10 – Merge changes to production
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.10 – 合并更改到生产
- en: 'Once you drop the staging branch to **Production**, a popup will be displayed
    with two options:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将暂存分支移至**生产**，将显示一个弹出窗口，包含两个选项：
- en: '**Rebase and Merge**: This will create a pull request and merge it with the
    rebase so you will have liner history.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变基和合并**：这将创建一个拉取请求，并将其与变基合并，这样你将拥有线性历史。'
- en: '**Merge**: This will create a merge commit without fast-forwarding:'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合并**：这将创建一个不带快速前进的合并提交：'
- en: '![Figure 19.11 – Display popup for Merge and Rebase and Merge button](img/B20997_19_011.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图19.11 – 合并和变基以及合并按钮的显示弹出窗口](img/B20997_19_011.jpg)'
- en: Figure 19.11 – Display popup for Merge and Rebase and Merge button
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.11 – 合并和变基以及合并按钮的显示弹出窗口
- en: How it works...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In the previous example, we performed a full workflow to deploy a new feature
    into production. The following list explains the purposes of the different types
    of branches in Odoo.sh:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们执行了完整的工作流程，将新功能部署到生产中。以下列表解释了Odoo.sh中不同类型分支的目的：
- en: '**Production branch**: This is the actual instance that is used by the end
    customer. There is only one production branch, and the new features are intended
    to merge with this branch. In this branch, the mailing service is active, so your
    end customer can send and receive emails. Daily backup is also active for this
    branch.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产分支**：这是最终客户使用的实际实例。只有一个生产分支，新功能旨在与这个分支合并。在这个分支中，邮件服务是活跃的，因此你的最终客户可以发送和接收电子邮件。此分支的每日备份也是活跃的。'
- en: '**Development branches**: This type of branch shows all the active development.
    You can create unlimited development branches, and every new commit in the branch
    will trigger a new build. The database in this branch is loaded with the demonstration
    data. After the development is complete, this branch will be moved to the staging
    branch. The mailing service is not active in these branches.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发分支**：这种类型的分支显示了所有活跃的开发。你可以创建无限量的开发分支，并且分支中的每个新提交都会触发一个新的构建。这个分支中的数据库加载了演示数据。开发完成后，这个分支将被移动到暂存分支。在这些分支中，邮件服务是不活跃的。'
- en: '**Staging branches**: This is the intermediate stage in the workflow. A stable
    development will be moved to the staging branch to be tested with a copy of the
    production branch. This is a very important step in the development life cycle;
    it might happen that a feature that works fine in the development branch does
    not work as expected with the production database. The staging branches give you
    an opportunity to test the feature with the production database before deploying
    it in production. If you find any issues with the development in this branch,
    you can move the branch back to development. The number of staging branches is
    based on your Odoo.sh plan. By default, you only have one staging branch, but
    you can purchase more if you want to.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**暂存分支**：这是工作流程的中间阶段。一个稳定的开发版本将被移动到暂存分支，与生产分支的副本进行测试。这是开发生命周期中的一个非常重要的步骤；可能会发生这样的情况，即开发分支中运行良好的功能在生产数据库中无法按预期工作。暂存分支给你提供了一个在部署到生产之前用生产数据库测试功能的机会。如果你在这个分支中发现任何开发问题，你可以将分支移回开发。暂存分支的数量基于你的Odoo.sh计划。默认情况下，你只有一个暂存分支，但如果你想的话，可以购买更多。'
- en: This is the complete workflow of how new features should be merged into production.
    In the next recipe, you will see some other options that we can use with these
    branches.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将新功能合并到生产中的完整工作流程。在下一个菜谱中，你将看到我们可以与这些分支一起使用的其他一些选项。
- en: Accessing debugging options
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问调试选项
- en: Odoo.sh provides different features for analysis and debugging purposes. In
    this recipe, we will explore all of these features and options.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo.sh提供不同的功能用于分析和调试目的。在这个菜谱中，我们将探索所有这些功能和选项。
- en: How to do it...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We will be using the same Odoo.sh project for this recipe. Each option will
    be shown in a different section with a screenshot.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用相同的Odoo.sh项目来完成这个菜谱。每个选项将在不同的部分中展示，并附有截图。
- en: Branch history
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分支历史
- en: 'You have already seen this feature in previous recipes. The **HISTORY** tab
    shows the full history of the branch. You can connect to the builds from here:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经在之前的菜谱中看到了这个功能。**历史**标签页显示了分支的完整历史。你可以从这里连接到构建：
- en: '![Figure 19.12 – The HISTORY tab](img/B20997_19_012.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图19.12 – 历史标签页](img/B20997_19_012.jpg)'
- en: Figure 19.12 – The HISTORY tab
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.12 – 历史标签页
- en: In the **HISTORY** tab, you can see all past actions performed on a selected
    branch. It will display logs, merges, new commits, and database restores.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在**历史**标签页中，你可以看到对所选分支执行的所有过去操作。它将显示日志、合并、新提交和数据库恢复。
- en: Mail catcher
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 邮件捕捉器
- en: The staging branch uses a copy of your production database, so it has information
    about your customers. Testing the staging branch can send emails to real customers.
    This is why emails are only activated on production branches. The staging and
    development branches do not send real emails. If you want to test the email system
    before deploying any feature into production, you can use the mail catcher, where
    you can see the list of all outgoing emails. The mail catcher will be available
    in the staging and development branches.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 预发布分支使用您生产数据库的副本，因此它包含有关您的客户信息。测试预发布分支可以向真实客户发送电子邮件。这就是为什么电子邮件仅在生产分支上激活。预发布和开发分支不会发送真实电子邮件。如果您想在将任何功能部署到生产之前测试电子邮件系统，您可以使用邮件捕捉器，您可以看到所有已发送电子邮件的列表。邮件捕捉器将在预发布和开发分支中可用。
- en: 'The mail catcher will display an email with the source and any attachments,
    as shown in the following screenshot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 邮件捕捉器将显示带有源和任何附件的电子邮件，如下一个截图所示：
- en: '![Figure 19.13 – Mail catcher](img/B20997_19_013.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图19.13 – 邮件捕捉器](img/B20997_19_013.jpg)'
- en: Figure 19.13 – Mail catcher
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.13 – 邮件捕捉器
- en: In the **MAILS** tab, you can see a list of all the captured mail with all attachments.
    Note that the **MAILS** tab will only be displayed in the staging and development
    branches.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在**MAILS**标签页中，您可以看到所有捕获的邮件及其所有附件的列表。请注意，**MAILS**标签页仅在预发布和开发分支中显示。
- en: Web shell
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网页壳
- en: From the `pip` and maintain multiple tabs.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 从`pip`维护多个标签。
- en: 'Take a look at the following screenshot: you can access the web shell by clicking
    on **SHELL**:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下截图：您可以通过点击**SHELL**来访问网页壳：
- en: '![Figure 19.14 – Web shell](img/B20997_19_014.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图19.14 – 网页壳](img/B20997_19_014.jpg)'
- en: Figure 19.14 – Web shell
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.14 – 网页壳
- en: With shell access, you can traverse between different directories and perform
    operations. You can also use the `pip` command to install Python packages.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 使用shell访问，您可以在不同的目录之间导航并执行操作。您还可以使用`pip`命令安装Python包。
- en: 'Here is the directory structure from the root directory:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这是根目录的目录结构：
- en: '[PRE5]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: These directories can be different based on the type of branch. For example,
    **Maildir** will only be available in the staging and development branches as
    it uses a mail catcher.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这些目录可以根据分支类型而不同。例如，**Maildir**仅在预发布和开发分支中可用，因为它使用邮件捕捉器。
- en: 'Sometimes, you need to restart the server or update the module from the shell.
    You can use the following command in the shell to restart the server:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要从shell重新启动服务器或更新模块。您可以在shell中使用以下命令来重新启动服务器：
- en: '[PRE6]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To update the module, execute the given command in the shell:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新模块，请在shell中执行给定的命令：
- en: '[PRE7]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The previous command will update the **my_hostel** module. If you want to update
    multiple modules, you can pass module names separated by a comma.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将更新**my_hostel**模块。如果您想更新多个模块，您可以通过逗号分隔模块名称。
- en: Code editor
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码编辑器
- en: 'If you are not comfortable with shell access, Odoo.sh provides a full-featured
    editor. Here, you can access the Python shell, the Odoo shell, and the Terminal.
    You can also edit the source code from here, as you can see in the given screenshot.
    After modifying the source code, you can restart the server from the **Odoo**
    menu at the top:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不习惯使用shell访问，Odoo.sh提供了一个功能齐全的编辑器。在这里，您可以访问Python shell、Odoo shell和终端。您还可以从这里编辑源代码，如所提供的截图所示。修改源代码后，您可以从顶部的**Odoo**菜单重新启动服务器：
- en: '![Figure 19.15 – Web code editor](img/B20997_19_015.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图19.15 – 网页代码编辑器](img/B20997_19_015.jpg)'
- en: Figure 19.15 – Web code editor
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.15 – 网页代码编辑器
- en: As depicted in the preceding screenshot, you will be able to update files from
    the editor. Odoo will detect the changes automatically and restart the server.
    Note that if you make changes in data files, you will need to update the module.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，您将能够从编辑器更新文件。Odoo将自动检测更改并重新启动服务器。请注意，如果您在数据文件中进行了更改，您将需要更新模块。
- en: Logs
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日志
- en: 'From the **LOGS** tab, you can access all of the logs for your instance. You
    can see the live logs without reloading the pages. You can filter the logs from
    here. This allows you to find issues from the production server. Here is a list
    of the different log files you can find in the **LOGS** tab:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在**LOGS**标签页中，您可以访问您实例的所有日志。您可以在不重新加载页面的情况下查看实时日志。您可以从这里过滤日志。这允许您从生产服务器中查找问题。以下是您可以在**LOGS**标签页中找到的不同日志文件列表：
- en: '`install.log`: This is for the logs that are generated when installing the
    modules. The logs of all the automated test cases will be located here.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install.log`：这是在安装模块时生成的日志。所有自动化测试用例的日志都将位于此处。'
- en: '`pip.log`: You can add Python packages with the `requirement.txt` file. In
    this log file, you will find the installation log of these Python packages.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pip.log`：您可以使用`requirement.txt`文件添加Python包。在这个日志文件中，您将找到这些Python包的安装日志。'
- en: '`odoo.log`: This is the normal access log of Odoo. You will find the full access
    log here. You should look in this log to check production errors.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`odoo.log`：这是Odoo的正常访问日志。您将在这里找到完整的访问日志。您应该查看此日志以检查生产错误。'
- en: '`update.log`: When you upload a new module with a different manifest version,
    your module gets updated automatically. This file contains the logs of these automatic
    updates.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update.log`：当您上传具有不同清单版本的模块时，您的模块会自动更新。此文件包含这些自动更新的日志。'
- en: 'Take a look at the following screenshot. This shows the live logs for the production
    branch:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 看看下面的截图。这显示了生产分支的实时日志：
- en: '![Figure 19.16 – Server log](img/B20997_19_016.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图19.16 – 服务器日志](img/B20997_19_016.jpg)'
- en: Figure 19.16 – Server log
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.16 – 服务器日志
- en: The preceding screenshot shows that the logs are live, so you will be able to
    see new logs without reloading. Additionally, you can search for a particular
    log with the textbox in the top-right corner of the UI.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示日志是实时更新的，因此您将能够看到新日志而无需重新加载。此外，您还可以通过UI右上角的文本框搜索特定的日志。
- en: There’s more...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'Some commonly used `git` commands are available on top of the module, as shown
    in the following screenshot. You can run these by using the **Run** button on
    the left. These commands can’t be edited, but if you want to run a modified command,
    you can copy it from here and then run it from the shell:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 模块顶部提供了一些常用的`git`命令，如下面的截图所示。您可以通过左侧的**运行**按钮来执行这些命令。这些命令不能编辑，但如果您想运行一个修改后的命令，您可以将其从这里复制，然后从shell中运行：
- en: '![Figure 19.17 – Git commands](img/B20997_19_017.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图19.17 – Git命令](img/B20997_19_017.jpg)'
- en: Figure 19.17 – Git commands
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.17 – Git命令
- en: You can execute these `git` commands in the shell to perform various operations,
    as depicted in the preceding screenshot.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在shell中执行这些`git`命令以执行各种操作，如前一个截图所示。
- en: Getting a backup of your instance
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取实例的备份
- en: Backups are essential for the production server. Odoo.sh provides a built-in
    backup facility. In this recipe, we will illustrate how you can download and restore
    backups from Odoo.sh.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 备份对于生产服务器至关重要。Odoo.sh提供了一个内置的备份功能。在这个菜谱中，我们将说明您如何从Odoo.sh下载和恢复备份。
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In the production branch, you can access the full information about the backups
    from the **BACKUPS** tab at the top. This will display a list of backups:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产分支中，您可以从顶部的**备份**选项卡访问有关备份的完整信息。这将显示备份列表：
- en: '![Figure 19.18 – Backups manager](img/B20997_19_018.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图19.18 – 备份管理器](img/B20997_19_018.jpg)'
- en: Figure 19.18 – Backups manager
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.18 – 备份管理器
- en: From the buttons at the top, you can carry out backup operations, such as downloading
    the dump, performing a manual backup, or restoring from a backup. A database backup
    can take a long time, so it will be done in the background. You will recieve a
    notification on the bell icon at the top when it is completed.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过顶部的按钮执行备份操作，例如下载转储、执行手动备份或从备份中恢复。数据库备份可能需要很长时间，因此它将在后台完成。当完成时，您将在顶部的铃铛图标上收到通知。
- en: How it works...
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Odoo automatically takes a backup of your production instance daily. Odoo also
    takes an automatic backup whenever you merge a new development branch and update
    the module. You can also perform a manual backup using the button at the top.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo会自动每天备份您的生产实例。每当您合并新的开发分支并更新模块时，Odoo也会自动备份。您还可以使用顶部的按钮执行手动备份。
- en: Odoo.sh keeps a total of 14 full backups for the Odoo production instance for
    up to 3 months—1 per day for 7 days, 1 per week for 4 weeks, and 1 per month for
    3 months. From the **BACKUPS** tab, you can access 1 month of backups (all 7 days
    of the week and 4 weekly backups).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo.sh为Odoo生产实例保留总共14个完整的备份，最多3个月——每天1个，持续7天，每周1个，持续4周，每月1个，持续3个月。您可以从**备份**选项卡访问1个月的备份（一周中的所有7天和4个周备份）。
- en: If you are moving to Odoo.sh from the on-premises or online option, you can
    import your database using the **Import Database** button. If you import your
    database directly into production, it might cause issues. To avoid this, you should
    import the database into the staging branch first.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从本地或在线选项迁移到Odoo.sh，您可以使用**导入数据库**按钮导入您的数据库。如果您直接将数据库导入生产，可能会引起问题。为了避免这种情况，您应该首先将数据库导入预发布分支。
- en: Checking the status of your builds
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查构建状态
- en: Whenever you make a new commit, Odoo.sh creates the new commit. It also performs
    automated test cases. To manage all of this, Odoo.sh has its own version of runbot.
    In this recipe, we will check the statuses of all the builds.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 每次您进行新的提交时，Odoo.sh都会创建新的提交。它还会执行自动测试用例。为了管理所有这些，Odoo.sh有自己的runbot版本。在这个菜谱中，我们将检查所有构建的状态。
- en: How to do it...
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Click on the **Builds** menu at the top to open the list of builds. Here, you
    can see a full overview of all of the branches and their commits:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 点击顶部的**构建**菜单以打开构建列表。在这里，您可以查看所有分支及其提交的完整概述：
- en: '![Figure 19.19 – Build status](img/B20997_19_019.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图19.19 – 构建状态](img/B20997_19_019.jpg)'
- en: Figure 19.19 – Build status
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.19 – 构建状态
- en: By clicking on the **Connect** buttons, you can connect to the instances. You
    can see the status of the build by the background color of the branch.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**连接**按钮，您可以连接到实例。您可以通过分支的背景颜色查看构建的状态。
- en: How it works...
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: On the runbot screen, you will get extra control over the builds. You can connect
    to the previous builds from here. Different colors show the status of the build.
    Green means that everything is fine; yellow indicates a warning, which can be
    ignored, but it is recommended that you fix it; red means there is a critical
    issue that you have to fix before merging the development branch into production.
    The red and yellow branches show the exclamation icon, **(!)**, near the **Connect**
    button. When you click on this, you will get a popup with the error and warning
    log. Usually, you need to search the installation log files to find the error
    or warning logs, but this popup will filter out the other logs and only display
    the error and warning logs. This means that whenever a build goes red or yellow,
    you should come here and fix the errors and warnings before merging them into
    production.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在runbot屏幕上，您将获得对构建的额外控制。您可以从这里连接到之前的构建。不同的颜色显示了构建的状态。绿色表示一切正常；黄色表示警告，可以忽略，但建议您修复它；红色表示存在必须修复的严重问题，在将开发分支合并到生产之前。红色和黄色的分支在**连接**按钮附近显示感叹号图标**(!)**。当您点击它时，您将获得一个包含错误和警告日志的弹出窗口。通常，您需要搜索安装日志文件以找到错误或警告日志，但此弹出窗口将过滤其他日志，仅显示错误和警告日志。这意味着每次构建变为红色或黄色时，您都应该来这里修复错误和警告，然后再将它们合并到生产中。
- en: Inactive development branches are destroyed after a few minutes. Normally, a
    new build will be created when you add a new **Commit** button. If you want to
    reactivate the build without a new commit; however, you can use the **Rebuild**
    button on the left side. The builds for the staging branches are also destroyed
    after a few minutes, apart from the last one, which will remain active.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 不活跃的开发分支在几分钟后会销毁。通常，当您添加新的**提交**按钮时，将创建一个新的构建。如果您想在没有新提交的情况下重新激活构建；然而，您可以使用左侧的**重建**按钮。除了最后一个将保持活跃之外，预发布分支的构建也会在几分钟后被销毁。
- en: There’s more...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'From the **Status** menu in the bar at the top, you can see the overall statistics
    of your instance. The platform servers are continuously monitored. On the **Status**
    screen, you will see the statistics of the server’s availability, which will be
    computed automatically from the platform’s monitoring system. It will show data,
    including the server uptime. The **Status** page will show the input and output
    data from the server. The **Status** page will display the following information:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从顶部栏中的**状态**菜单看到您实例的整体统计信息。平台服务器持续监控。在**状态**屏幕上，您将看到服务器可用性的统计信息，它将自动从平台的监控系统中计算得出。它将显示包括服务器运行时间在内的数据。**状态**页面将显示服务器输入和输出数据。**状态**页面将显示以下信息：
- en: '![Figure 19.20 – Odoo.sh status](img/B20997_19_020.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图19.20 – Odoo.sh状态](img/B20997_19_020.jpg)'
- en: Figure 19.20 – Odoo.sh status
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.20 – Odoo.sh状态
- en: The data displayed in the **Status** tab is collected from the various monitoring
    tools used by Odoo.sh.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**状态**选项卡中显示的数据是从Odoo.sh使用的各种监控工具收集的。'
- en: All Odoo.sh options
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所有Odoo.sh选项
- en: Odoo.sh provides a few further options under the **Settings** menu. In this
    recipe, you will see all of the important options used to modify the default behavior
    of certain things on the platform.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo.sh在**设置**菜单下提供了一些额外的选项。在这个菜谱中，你将看到所有用于修改平台某些默认行为的重要选项。
- en: Getting ready
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using the same Odoo.sh project that we used in previous recipes.
    You can access all the Odoo.sh settings from the **Settings** menu in the top
    bar. If you are not able to see this menu, that means you are accessing a shared
    project and you don’t have admin access.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前菜谱中使用的相同的Odoo.sh项目。你可以从顶部栏中的**设置**菜单访问所有Odoo.sh设置。如果你看不到这个菜单，这意味着你正在访问一个共享项目，并且你没有管理员权限。
- en: How to do it...
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open the **Settings** page from the **Settings** menu in the top bar. We’ll
    take a look at the different options in the following sections.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 从顶部栏中的**设置**菜单打开**设置**页面。我们将在以下部分查看不同的选项。
- en: Project name
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目名称
- en: 'You can change the name of the Odoo.sh project from this option. The project
    name in the input will be used to generate your production URL. Development builds
    also use this project name as a prefix. In this case, the URL of our feature branch
    will be something like [https://serpentcs-odooshdemov17-feature-branch-260887.dev.odoo.com](https://serpentcs-odooshdemov17-feature-branch-260887.dev.odoo.com):'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过此选项更改Odoo.sh项目的名称。输入框中的项目名称将用于生成你的生产URL。开发构建也使用此项目名称作为前缀。在这种情况下，我们的功能分支的URL可能如下所示：[https://serpentcs-odooshdemov17-feature-branch-260887.dev.odoo.com](https://serpentcs-odooshdemov17-feature-branch-260887.dev.odoo.com)
- en: '![Figure 19.21 – Change the project name](img/B20997_19_021.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图19.21 – 更改项目名称](img/B20997_19_021.jpg)'
- en: Figure 19.21 – Change the project name
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.21 – 更改项目名称
- en: Important note
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This option will change the production URL, but you cannot get rid of `*.odoo.com`.
    If you want to run a production branch on a custom domain, you can add your custom
    domain in the **Settings** tab of the production branch. You will also need to
    add a CNAME entry in your DNS manager.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项将更改生产URL，但你无法去掉`*.odoo.com`。如果你想在一个自定义域上运行生产分支，你可以在生产分支的**设置**选项卡中添加你的自定义域。你还需要在你的DNS管理器中添加一个CNAME条目。
- en: Collaborators
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 协作者
- en: 'You can share the project by adding collaborators. Here, you can search for
    and add a new collaborator using their GitHub ID. A collaborator can have either
    **Admin** or **User** access rights. A collaborator with admin access rights will
    have full access (to the settings as well). A collaborator with user access rights,
    on the other hand, will have restricted access rights. They will be able to see
    all builds, but they will not be able to access the backups, logs, shells, or
    emails of the production or staging branches, although they will have full access
    to the development branches:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过添加协作者来共享项目。在这里，你可以通过GitHub ID搜索并添加一个新的协作者。协作者可以有**管理员**或**用户**访问权限。具有管理员访问权限的协作者将拥有完全访问权限（包括设置）。另一方面，具有用户访问权限的协作者将拥有受限的访问权限。他们将能够看到所有构建，但无法访问生产或预发布分支的备份、日志、shell或电子邮件，尽管他们可以完全访问开发分支：
- en: '![Figure 19.22 – Add collaborators](img/B20997_19_022.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图19.22 – 添加协作者](img/B20997_19_022.jpg)'
- en: Figure 19.22 – Add collaborators
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.22 – 添加协作者
- en: Important note
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You will need to give these users access to the GitHub repository, too; otherwise,
    they won’t be able to create a new repository from the browser.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要将这些用户权限给予GitHub仓库，否则他们无法从浏览器中创建新的仓库。
- en: Public Access
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公开访问
- en: 'Using this option, you can share builds with your end customer. This can be
    used for demonstration or testing purposes. To do so, you need to enable the **Allow
    public** **access** checkbox:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此选项，你可以与最终客户共享构建。这可以用于演示或测试目的。为此，你需要启用**允许公开****访问**复选框：
- en: '![Figure 19.23 – Give public access to builds](img/B20997_19_023.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图19.23 – 向构建提供公开访问](img/B20997_19_023.jpg)'
- en: Figure 19.23 – Give public access to builds
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.23 – 向构建提供公开访问
- en: 'Note that the staging branch will have the same password as your production
    branch. However, in the development branch, you will have the username and password
    shown in this table:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，预发布分支将使用与生产分支相同的密码。然而，在开发分支中，你将看到表中显示的用户名和密码：
- en: '![Table 19.1](img/Table_012.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![表19.1](img/Table_012.jpg)'
- en: Table 19.1
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 表19.1
- en: Module installation
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块安装
- en: 'In the **Settings** tab of the development branch, you will see the **Module
    installation** option for the development branches. It provides three options,
    as shown in the following screenshot:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发分支的**设置**标签页中，您将看到开发分支的**模块安装**选项。它提供了三个选项，如下面的截图所示：
- en: '![Figure 19.24 – Module installation options](img/B20997_19_024.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图19.24 – 模块安装选项](img/B20997_19_024.jpg)'
- en: Figure 19.24 – Module installation options
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.24 – 模块安装选项
- en: By default, it is set to **Install only my modules**. This option will install
    all of your custom modules and their dependent modules in the new development
    branches. Only automated test cases are performed for these modules. The second
    option is **Full installation**. This option will install all of the modules and
    perform automated test cases for all of those modules. The final option is **Install
    a list of modules**. In this option, you will need to pass a list of comma-separated
    modules, such as **sales**, **purchases**, and **my_hostel**. This option will
    install the given modules and their dependencies.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，它设置为**仅安装我的模块**。此选项将安装所有自定义模块及其依赖模块到新的开发分支中。对这些模块仅执行自动化测试用例。第二个选项是**完整安装**。此选项将安装所有模块并对所有这些模块执行自动化测试用例。最后一个选项是**安装模块列表**。在此选项中，您需要传递一个以逗号分隔的模块列表，例如**sales**、**purchases**和**my_hostel**。此选项将安装指定的模块及其依赖项。
- en: This setting only applies to development builds. Staging builds duplicate the
    production build, so they will have the same modules installed in the production
    branch and perform test cases for modules that have an updated version manifest.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 此设置仅适用于开发构建。预发布构建会复制生产构建，因此它们将在生产分支中安装相同的模块，并对已更新版本清单的模块执行测试用例。
- en: Submodules
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子模块
- en: 'The **Submodules** option is used when you are using private modules as submodules.
    This setting is only needed for private submodules; public submodules will work
    fine without any issues. It is not possible to download private repositories publicly,
    so you need to give repository access to Odoo.sh. Follow these steps to add access
    to the private submodules:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用私有模块作为子模块时，会使用**子模块**选项。此设置仅适用于私有子模块；公共子模块无需任何问题即可正常工作。无法公开下载私有仓库，因此您需要向Odoo.sh提供仓库访问权限。按照以下步骤添加对私有子模块的访问权限：
- en: Copy the SSH URL of your private submodule repository in the input and click
    on **Add**.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在输入框中复制您的私有子模块仓库的SSH URL，然后点击**添加**。
- en: Copy the displayed **public key**.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制显示的**公钥**。
- en: 'Add this **public key** as a deploy key in your private repository settings
    in GitHub (similar settings are also available on Bitbucket and GitLab):'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此**公钥**添加到GitHub（Bitbucket和GitLab上也有类似设置）的私有仓库设置中的部署密钥：
- en: '![Figure 19.25 – Set the private submodule](img/B20997_19_025.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![图19.25 – 设置私有子模块](img/B20997_19_025.jpg)'
- en: Figure 19.25 – Set the private submodule
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.25 – 设置私有子模块
- en: You can add multiple submodules, too, and you can remove submodules from here
    as well.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以添加多个子模块，并且您也可以从这里删除子模块。
- en: Database Workers
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库工作者
- en: 'You can increase the number of workers for the production build. This is useful
    when you have more users; usually, a single worker can handle 25 backend users
    or 5,000 daily website visitors. This formula is not perfect; it can vary based
    on usage. This option is not free, and increasing the number of workers will increase
    the price of your Odoo.sh subscription:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以增加生产构建的工作者数量。当您有更多用户时，这很有用；通常，单个工作者可以处理25个后端用户或5,000名每日网站访客。这个公式并不完美；它可以根据使用情况而变化。此选项不是免费的，增加工作者数量会增加您的Odoo.sh订阅费用：
- en: '![Figure 19.26 – Set Database Workers](img/B20997_19_026.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![图19.26 – 设置数据库工作者](img/B20997_19_026.jpg)'
- en: Figure 19.26 – Set Database Workers
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.26 – 设置数据库工作者
- en: These **Database Workers** are multithreaded, and each one is able to handle
    15 concurrent requests. It is necessary to have enough workers to serve all incoming
    requests as they arrive, but increasing the number of workers does not increase
    the speed of the requests’ processing time. It is only used to handle a large
    number of concurrent users.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这些**数据库工作者**是多线程的，每个工作者都能够处理15个并发请求。需要足够的工作者来处理所有到达的请求，但增加工作者数量并不会增加请求处理速度。它仅用于处理大量并发用户。
- en: Staging Branches
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预发布分支
- en: 'Staging branches are used to test a new development with the production database.
    By default, Odoo.sh gives you one staging branch. If you are working on large
    projects with lots of developers, this might be a bottleneck in the development
    process, so you can increase the number of **Staging Branches** at an extra cost:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 预发布分支用于在生产数据库上测试新的开发。默认情况下，Odoo.sh 为您提供一个预发布分支。如果您正在处理涉及大量开发者的大型项目，这可能在开发过程中成为瓶颈，因此您可以额外付费增加**预发布分支**的数量：
- en: '![Figure 19.27 – Set staging branches](img/B20997_19_027.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图19.27 – 设置预发布分支](img/B20997_19_027.jpg)'
- en: Figure 19.27 – Set staging branches
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.27 – 设置预发布分支
- en: There’s more...
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Along with the configuration options, the **Settings** menu will also display
    some statistics related to the platform.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 除了配置选项外，**设置**菜单还将显示一些与平台相关的统计信息。
- en: Database size
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库大小
- en: 'This section will display the size of your production database. The Odoo.sh
    platform charges the database at USD 1/GB/month. This option helps you keep track
    of your database. The displayed database size is only for the production database;
    it does not include the databases of the staging and development branches:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将显示您生产数据库的大小。Odoo.sh 平台按每月每 GB USD 1 的费用计费数据库。此选项可以帮助您跟踪您的数据库。显示的数据库大小仅针对生产数据库；它不包括预发布和开发分支的数据库：
- en: '![Figure 19.28 – Database size](img/B20997_19_028.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![图19.28 – 数据库大小](img/B20997_19_028.jpg)'
- en: Figure 19.28 – Database size
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.28 – 数据库大小
- en: Odoo source code revisions
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Odoo 源代码修订
- en: This section will display the GitHub revision number of Odoo’s project. It will
    display the revision hash for the Community, Enterprise, and theme projects that
    are currently being used in the platform. This source code will automatically
    be updated every week. This option will help you get the exact same versions on
    your local machine. You can also check this from the web shell, through the `git`
    command in the repository.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将显示 Odoo 项目的 GitHub 修订号。它将显示当前在平台上使用的社区、企业版和主题项目的修订哈希。此源代码将每周自动更新。此选项可以帮助您在本地机器上获得完全相同的版本。您也可以通过仓库中的
    `git` 命令从网络外壳中检查此信息。
