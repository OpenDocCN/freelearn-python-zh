- en: Advanced Zappa Settings
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级Zappa设置
- en: In this chapter, we are going to explore various settings and configurations
    provided by Zappa. This really helps you to deploy your application in an efficient
    way. Hence, there are various settings to configure your application. These settings
    are related to some AWS services and their features and functionality. We are
    going to explore these settings by applying them to our existing Quote API application
    that we developed in [Chapter 9](part0219.html#6GRB60-8241a43bed654018b51365a570bcef1d),
    *Asynchronous Task Execution on AWS Lambda*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索Zappa提供的各种设置和配置。这真的可以帮助您以高效的方式部署应用程序。因此，有各种设置来配置您的应用程序。这些设置与一些AWS服务及其功能和功能相关。我们将通过将它们应用到我们在[第9章](part0219.html#6GRB60-8241a43bed654018b51365a570bcef1d)中开发的现有报价API应用程序来探索这些设置，*AWS
    Lambda上的异步任务执行*。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Keeping the server warm
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持服务器热
- en: Enabling CORS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用CORS
- en: Handling a larger project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理更大的项目
- en: Enabling bash compilation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用bash编译
- en: Caching unhandled exceptions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存未处理的异常
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'There are some prerequisites to meet before moving ahead. The following requirements
    need to be fulfilled in order to meet the prerequisites:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，有一些先决条件需要满足。为了满足先决条件，需要满足以下要求：
- en: Ubuntu 16.04/Windows/macOS
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu 16.04/Windows/macOS
- en: Python 3.6
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6
- en: Pipenv tool
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pipenv工具
- en: Zappa
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zappa
- en: Falcon API
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Falcon API
- en: Python packages
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python包
- en: Registered domain
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册域名
- en: AWS account
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS账户
- en: Some previously configured prerequisites can be used from [Chapter 9](part0219.html#6GRB60-8241a43bed654018b51365a570bcef1d), *Asynchronous
    Task Execution on AWS Lambda*. This means that you can continue with your configured
    domain and AWS service. You may need to update the Zappa setting file for this
    chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一些先前配置的先决条件可以从[第9章](part0219.html#6GRB60-8241a43bed654018b51365a570bcef1d)中使用，*AWS
    Lambda上的异步任务执行*。这意味着您可以继续使用配置的域和AWS服务。您可能需要更新本章的Zappa设置文件。
- en: Let's move ahead and explore additional settings uses with the Quote API application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续探索与报价API应用程序一起使用的其他设置。
- en: Keeping the server warm
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持服务器热
- en: Zappa enables a feature that keeps AWS Lambda in a warm state. AWS Lambda has
    a cold start because of containerization, and so Lambda requires that you set
    up the environment in order to execute functions. Whenever AWS Lambda receives
    a request, it instantiates the Lambda function along with its required environment
    and finally destroys the instance after fulfilling the request.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa启用了一个保持AWS Lambda处于热状态的功能。由于容器化，AWS Lambda存在冷启动，因此Lambda需要您设置环境以执行函数。每当AWS
    Lambda收到请求时，它会实例化Lambda函数及其所需的环境，最终在完成请求后销毁实例。
- en: That's how AWS Lambda works. Hence, Zappa implements this mechanism using the
    AWS CloudWatch event schedule feature in order to keep the instantiated Lambda
    instance in a warm state. Keeping Lambda in the warm state is nothing but triggering
    the CloudWatch event as a ping request every four minutes to prevent the destruction of
    the Lambda instance.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是AWS Lambda的工作原理。因此，Zappa使用AWS CloudWatch事件调度功能来实现此机制，以保持实例化的Lambda实例处于热状态。保持Lambda处于热状态就是每四分钟触发CloudWatch事件作为ping请求，以防止Lambda实例的销毁。
- en: This feature is enabled by default, but if you want to disable this feature,
    then you can set the `keep_warm` flag to `false` in the Zappa settings JSON file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能默认启用，但如果要禁用此功能，则可以在Zappa设置的JSON文件中将`keep_warm`标志设置为`false`。
- en: 'The following code snippet is used to disable the keep warm feature:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段用于禁用保持热功能：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In our case, we want to keep the default setting as it is so that our application
    will always be in a warm state. Let's move on to the next section, where we will
    explore other useful settings.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们希望保持默认设置不变，以便我们的应用程序始终处于热状态。让我们继续下一节，我们将探索其他有用的设置。
- en: Enabling CORS
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用CORS
- en: '**Cross-Origin Resource Sharing** (**CORS**) is an essential part of serving
    the API over the same domain or a different hosted domain. The AWS API Gateway
    provides a feature to enable CORS functionality. Once you have configured an API
    resource on an API Gateway, you must enable CORS using the API Gateway web console.
    Enabling CORS over API Gateway resources requires that you set the `OPTION` method
    with some response headers, such as the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨源资源共享**（**CORS**）是在相同域或不同托管域上提供API的重要部分。AWS API Gateway提供了启用CORS功能的功能。一旦您在API
    Gateway上配置了API资源，您必须使用API Gateway Web控制台启用CORS。在API Gateway资源上启用CORS需要您设置`OPTION`方法以及一些响应头，例如以下内容：'
- en: Access-Control-Allow-Methods
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Access-Control-Allow-Methods
- en: Access-Control-Allow-Headers
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Access-Control-Allow-Headers
- en: Access-Control-Allow-Origin
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Access-Control-Allow-Origin
- en: You can take a look at the manual process of configuring CORS in the API Gateway
    in AWS's official documentation ([https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看AWS官方文档中有关在API Gateway中配置CORS的手动过程（[https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html)）。
- en: 'Zappa automates the process of configuring CORS with API Gateway resources
    by using a setting attribute called `cors`, as mentioned in the following code
    snippet:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa通过使用名为`cors`的设置属性自动配置API Gateway资源的CORS过程，如下面的代码片段所述：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Zappa sets the default value of `cors` as `false`. If you want to enable CORS
    for your API resources, then you can set it `true`. It also supports adding response
    headers.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa将`cors`的默认值设置为`false`。如果要为API资源启用CORS，则可以将其设置为`true`。它还支持添加响应头。
- en: '`"cors": true` doesn''t work well with `"binary_support": true`. Hence, you
    can disable the API Gateway-level CORS, or you can add application-level CORS
    functionality.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`"cors": true`与`"binary_support": true`不兼容。因此，您可以禁用API网关级别的CORS，或者您可以添加应用程序级别的CORS功能。'
- en: As mentioned previously, you can also use application-level CORS. There are
    many libraries available for integrating CORS, and some frameworks have good libraries
    such as `django-cors-headers` ([https://github.com/ottoyiu/django-cors-headers](https://github.com/ottoyiu/django-cors-headers))
    and Flask-CORS ([https://github.com/corydolphin/flask-cors](https://github.com/corydolphin/flask-cors)).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，您也可以使用应用程序级别的CORS。有许多库可用于集成CORS，一些框架有很好的库，比如`django-cors-headers` ([https://github.com/ottoyiu/django-cors-headers](https://github.com/ottoyiu/django-cors-headers))
    和 Flask-CORS ([https://github.com/corydolphin/flask-cors](https://github.com/corydolphin/flask-cors))。
- en: That's all for configuring the CORS feature. I would prefer to enable CORS at
    the application level as you would have better control in handling it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是配置CORS功能的全部内容。我更喜欢在应用程序级别启用CORS，因为这样您可以更好地控制它。
- en: Handling larger projects
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理更大的项目
- en: In this section, we are going to discuss the process of handling large-sized
    projects over AWS Lamda. AWS Lambda, by default, supports different code entry
    types. Now, we are going to discuss this feature in more detail, as we will show
    you how we can process this through the AWS Lambda console and using the Zappa
    library.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将讨论如何处理AWS Lamda上的大型项目的过程。AWS Lambda默认支持不同的代码输入类型。现在，我们将更详细地讨论这个功能，因为我们将向您展示如何通过AWS
    Lambda控制台和使用Zappa库来处理这个功能。
- en: Handling larger projects using the AWS Lambda console
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWS Lambda控制台处理更大的项目
- en: 'AWS Lambda supports three different code entry types—Edit code inline, Upload
    a ZIP file, and Upload a file from Amazon S3, as mentioned in the following screenshot
    of the AWS Lambda function web console:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda支持三种不同的代码输入类型——内联编辑代码、上传ZIP文件和从Amazon S3上传文件，如下面的AWS Lambda函数Web控制台的截图所示：
- en: '![](img/00096.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00096.jpeg)'
- en: 'This entry type allows a user to put their code base in AWS Lambda. Let''s
    elaborate:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种输入类型允许用户将他们的代码库放在AWS Lambda上。让我们详细说明一下：
- en: Using this entry type, you can put code directly through AWS Lambda's web console,
    as mentioned in the preceding screenshot. With the help of its online editor,
    you can write and perform code execution. This can be considered for a small code
    base.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用这种输入类型，您可以通过AWS Lambda的Web控制台直接放置代码，就像前面的截图中提到的那样。借助其在线编辑器，您可以编写和执行代码。这可以用于小型代码库。
- en: '**Upload a ZIP file**: AWS Lambda supports uploading a `.zip` file of your
    code base. We discussed the build packaging of the code base in [Chapter 1](part0021.html#K0RQ0-8241a43bed654018b51365a570bcef1d),
    *Amazon Web Services for Serverless*. This feature has a limitation regarding
    the file size as it only supports files that are 50 MB in size for uploading,
    but it has another option for large-sized projects.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上传ZIP文件**：AWS Lambda支持上传代码库的.zip文件。我们在[第1章](part0021.html#K0RQ0-8241a43bed654018b51365a570bcef1d)中讨论了代码库的构建打包，*Amazon
    Web Services for Serverless*。这个功能有一个关于文件大小的限制，因为它只支持50MB大小的文件上传，但对于大型项目有另一个选项。'
- en: '**Upload a file from Amazon S3**: This feature allows a user to upload the
    build package to Amazon S3 storage, irrespective of size. This means that you
    can refer to the uploaded build package on Amazon S3 with its S3 link.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从Amazon S3上传文件**：这个功能允许用户将构建包上传到Amazon S3存储，无论大小。这意味着您可以通过其S3链接引用在Amazon
    S3上上传的构建包。'
- en: Handling larger projects using Zappa
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zappa处理更大的项目
- en: Zappa does consider the build package size while processing for deployment.
    Zappa only supports two code entry types, which are Upload a .ZIP file directly
    on AWS Lambda and Upload a .ZIP file on Amazon S3.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa在处理部署时考虑构建包大小。Zappa只支持两种代码输入类型，即直接在AWS Lambda上上传.zip文件和在Amazon S3上上传.zip文件。
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Set `"slim_handler"` to `true` in case the project size is more than 50 MB.
    Once you set this attribute, Zappa will automatically upload the build package
    to the Amazon S3 bucket and will configure the AWS Lambda handler function to
    consider the build package from Amazon S3 bucket.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果项目大小超过50MB，请将`"slim_handler"`设置为`true`。一旦设置了这个属性，Zappa将自动将构建包上传到Amazon S3存储桶，并配置AWS
    Lambda处理程序函数以考虑来自Amazon S3存储桶的构建包。
- en: Enabling bash tab compilation
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用bash标签编译
- en: Bash tab compilation is a feature in the command-line environment. This will
    display a list of autocomplete suggestions by pressing the *Tab* key. Zappa has
    many commands, and if you register the `Zappa` module with the Python `argcomplete`
    module, the `zappa` command will support the tab compilation feature.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Bash标签编译是命令行环境中的一个功能。通过按下*Tab*键，它将显示自动完成建议列表。Zappa有许多命令，如果您将`Zappa`模块与Python
    `argcomplete`模块注册，`zappa`命令将支持标签编译功能。
- en: 'In order to acquire this feature, you need to install the `argcomplete` ([https://github.com/kislyuk/argcomplete](https://github.com/kislyuk/argcomplete))
    module, either on your system or in the virtual environment:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得这个功能，您需要在系统或虚拟环境中安装`argcomplete` ([https://github.com/kislyuk/argcomplete](https://github.com/kislyuk/argcomplete))
    模块：
- en: 'System-level installation:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统级安装：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Virtual environment installation:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟环境安装：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once you configure the module, then you need to activate Python''s `argcomplete` module
    at a global level. The following is the command to activate the global Python
    `argcomplete` module:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您配置了模块，那么您需要在全局级别激活Python的`argcomplete`模块。以下是激活全局Python `argcomplete`模块的命令：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In order to register the `Zappa` module with `argcomplete`, you need to add
    the following line in your `~/.bashrc` file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将`Zappa`模块与`argcomplete`注册，您需要在`~/.bashrc`文件中添加以下行：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Source it again for immediate effect in the current context of Terminal by
    executing the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令在当前终端上再次源化以立即生效：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, once you register the `Zappa` module with `argcomplete`, Zappa commands
    will be available in the compilation. The following is a screenshot of Zappa command
    compilation:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦您将`Zappa`模块与`argcomplete`注册，Zappa命令将在编译中可用。以下是Zappa命令编译的截图：
- en: '![](img/00097.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00097.jpeg)'
- en: This is how you can use `argcomplete` for Zappa commands. However, it would
    be helpful to be more productive in the deployment process. Let's move on to the
    next section, where we will discuss catching unhandled exceptions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您可以使用`argcomplete`来进行Zappa命令。然而，在部署过程中更加高效将会很有帮助。让我们继续下一节，我们将讨论捕获未处理异常。
- en: Catching unhandled exceptions
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获未处理异常
- en: Zappa provides a feature to capture unhandled exceptions. This will allow you
    to process the unhandled exception to raise an alert notification via email, SNS,
    or other sources. It depends on your requirements, but you can choose any sources
    to raise a notification. This will be really helpful so that you can track anything
    that's broken down in any deployed environment.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa提供了一个捕获未处理异常的功能。这将允许您处理未处理的异常，通过电子邮件、SNS或其他来源发出警报通知。这取决于您的要求，但您可以选择任何来源来发出通知。这将非常有帮助，这样您就可以跟踪任何部署环境中出现的故障。
- en: For example, if we wanted to send bulk email notifications to all developers
    and QA engineers for any deployed environment, Zappa provides an easy way to configure
    the mechanism of catching the unhandled exception. With the help of the `exception_handler`
    attribute, you can bind an exception handler method from which you can process
    the exception to send bulk email notifications.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想要向所有开发人员和QA工程师发送关于任何部署环境的批量电子邮件通知，Zappa提供了一种简单的方法来配置捕获未处理异常的机制。借助`exception_handler`属性的帮助，您可以绑定一个异常处理程序方法，从中可以处理异常以发送批量电子邮件通知。
- en: 'The following is a code snippet of the Zappa settings file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Zappa设置文件的代码片段：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, the exception handler is a method that's defined in a module. So, let's
    modify our existing project from  [Chapter 9](part0219.html#6GRB60-8241a43bed654018b51365a570bcef1d), *Asynchronous
    Task Execution on AWS Lambda,* to add the exception handler.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，异常处理程序是在一个模块中定义的方法。因此，让我们修改我们现有的项目，从[第9章](part0219.html#6GRB60-8241a43bed654018b51365a570bcef1d)，*在AWS
    Lambda上执行异步任务*，添加异常处理程序。
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'File—`notify.py`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 文件-`notify.py`：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we are publishing the exception and event data to a subscribed email in
    the `"UnhandledException"` topic.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将异常和事件数据发布到订阅的电子邮件中的“UnhandledException”主题。
- en: We can enhance the subscriptions to manage the list of email subscriptions of
    developers and QA engineers. This is how this feature is really helpful in tracing
    unhandled exceptions. We hope that this is beneficial for managing your deployments.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以增强订阅以管理开发人员和QA工程师的电子邮件订阅列表。这就是这个功能在追踪未处理异常方面的真正帮助。我们希望这对于管理您的部署是有益的。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about some additional features of Zappa. These features
    allow us to manage DevOps operations in a very efficient way. We also explored
    handling large-sized projects, implementing CORS, and managing unhandled exceptions.
    I hope you enjoyed this chapter and that you become hands-on with these features
    in your application.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了Zappa的一些附加功能。这些功能使我们能够以非常高效的方式管理DevOps操作。我们还探讨了处理大型项目、实现CORS和管理未处理异常。希望您喜欢本章，并在应用程序中开始使用这些功能。
- en: Questions
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the use of keeping AWS Lambda in a warm state?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持AWS Lambda处于热状态有什么用？
- en: What is CORS?
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CORS是什么？
- en: What is the deployment flow for large-sized projects?
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大型项目的部署流程是什么？
