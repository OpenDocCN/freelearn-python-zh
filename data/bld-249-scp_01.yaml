- en: Chapter 1. Extending Blender with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：使用Python扩展Blender
- en: 'Before we start crafting scripts in Blender we must check whether or not we
    have all the necessary tools available. After that we will have to familiarize
    ourselves with these tools so that we can use them with confidence. In this chapter,
    we will look at:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始用Blender编写脚本之前，我们必须检查是否拥有所有必要的工具。之后，我们将必须熟悉这些工具，以便我们可以自信地使用它们。在本章中，我们将探讨以下内容：
- en: What can and cannot be accomplished with Python in Blender
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Blender中使用Python可以完成什么和不能完成什么
- en: How to install a full Python distribution
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装完整的Python发行版
- en: How to use the built-in editor
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用内置编辑器
- en: How to run a Python script
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何运行Python脚本
- en: How to explore built-in modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何探索内置模块
- en: How to write a simple script that adds an object to a Blender scene
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何编写一个简单的脚本，将对象添加到Blender场景中
- en: How to register a script in the Blender scripts menu
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Blender脚本菜单中注册脚本
- en: How to document your script in a user-friendly way
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何以用户友好的方式编写脚本文档
- en: How to distribute a script
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何分发脚本
- en: With so many things possible there is an awful lot to learn, but fortunately
    the learning curve is not as steep as it might seem. Let's just type in a quick
    few lines of Python to put a simple object into our Blender scene, just to prove
    we can, before we head into deeper waters.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于有这么多可能的事情要做，有很多东西要学习，但幸运的是，学习曲线并没有看起来那么陡峭。在我们深入之前，让我们输入几行简单的Python代码，将一个简单的对象放入我们的Blender场景中，以证明我们能够做到这一点。
- en: Start Blender with an empty scene.![Extending Blender with Python](img/0400_01_01.jpg)
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用空场景启动Blender。![使用Python扩展Blender](img/0400_01_01.jpg)
- en: Open the interactive Python console (refer to the preceding screenshot to see
    where to find it).
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开交互式Python控制台（参考前面的截图以查看位置）。
- en: Type in the following lines (end each one with a *Enter*/*Return*).
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下行（每行以*Enter*/*Return*结束）。
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Voila! That's all that is needed to add Suzanne, Blender's famous mascot, to
    the scene.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！这就是添加Suzanne（Blender的著名吉祥物）到场景中所需的所有内容。
- en: '![Extending Blender with Python](img/0400_01_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![使用Python扩展Blender](img/0400_01_02.jpg)'
- en: The Blender API
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Blender API
- en: Almost anything in Blender is accessible from Python scripts but there are some
    exceptions and limitations. In this section, we illustrate what this means exactly
    and which notable features are not accessible to Python (for example, fluid dynamics).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有Blender中的内容都可以通过Python脚本访问，但也有一些例外和限制。在本节中，我们将说明这究竟意味着什么，以及哪些显著特性对Python不可用（例如，流体动力学）。
- en: 'The Blender API consists of three major areas of interest:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Blender API由三个主要兴趣区域组成：
- en: Access to Blender objects and their properties, for example a `Camera` object
    and its `angle` property or a `Scene` object and its `objects` property
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问Blender对象及其属性，例如`Camera`对象及其`angle`属性或`Scene`对象及其`objects`属性
- en: Access to operations to perform, for example adding a new `Camera` or rendering
    an image
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问要执行的操作，例如添加一个新的`Camera`或渲染一张图像
- en: Access to the graphical user interface, either by using simple building blocks
    or by interacting with the Blender event system
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用简单的构建块或与Blender事件系统交互来访问图形用户界面
- en: There are also some utilities that do not fit well in any of these categories
    as they concern themselves with abstractions that have no direct relation to Blender
    objects as seen by the end user, for example functions to manipulate vectors and
    matrices.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些工具不适合任何这些类别，因为它们涉及到的抽象与最终用户看到的Blender对象没有直接关系，例如操作向量和矩阵的函数。
- en: A lot of power
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 很多的功能
- en: 'Taken together this means we can achieve a lot of things from Python scripts.
    We can:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这意味着我们可以通过Python脚本实现很多事情。我们可以：
- en: Create a new Blender object of any type, including cameras, lamps, meshes, and
    even scenes
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建任何类型的Blender新对象，包括相机、灯具、网格，甚至场景
- en: Interact with the user with a graphical user interface
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过图形用户界面与用户交互
- en: Automate common tasks within Blender such as rendering
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化Blender中的常见任务，如渲染
- en: Automate maintenance tasks outside of Blender such as cleaning up directories
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化Blender之外的任务，如清理目录
- en: Manipulate any property of a Blender object that is exposed by the API
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作通过API暴露的Blender对象的任何属性
- en: 'That last statement shows one of the current weaknesses of the Blender API:
    any object property that the developers add in the Blender C source must be provided
    separately in the Python API. There is no automatic conversion from internal structures
    to the interface available in Python and this means that efforts must be duplicated
    and may lead to omitted functionality. For instance, in Blender 2.49 it is not
    possible at all to set up a fluid simulation from a script. Although it is possible
    to set up a particle system, there is no way to set the behavioral characteristics
    of a boids particle system.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 那最后一个声明显示了Blender API当前的一个弱点：开发者添加到Blender C源代码中的任何对象属性都必须在Python API中单独提供。没有从内部结构到Python中可用接口的自动转换，这意味着必须重复工作，可能会导致功能缺失。例如，在Blender
    2.49中，根本无法从脚本中设置流体模拟。尽管可以设置粒子系统，但无法设置鸟群粒子系统的行为特性。
- en: Another problem of the 2.49 Python API is that many of the actions a user may
    choose to perform on an object have no equivalent in the API. Setting simple parameters
    such as the camera angle or performing a rotation of any object is easy and even
    associating for example, a subsurface modifier to a mesh is just a few lines of
    code but common actions, especially on mesh objects, such as subdividing selected
    edges or extruding faces are missing from the API and must be implemented by the
    script developer.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 2.49 Python API的另一个问题是，用户可能选择在对象上执行的大多数操作在API中没有等效功能。设置简单的参数，如相机角度或旋转任何对象都是容易的，甚至将例如，子表面修改器关联到网格也只需要几行代码，但常见的操作，尤其是在网格对象上，如细分选定的边或挤出面，在API中缺失，必须由脚本开发者实现。
- en: These problems led the Blender developers to completely redesign the Blender
    Python API for the 2.5 version, focusing on feature parity (that is, everything
    possible in Blender should be possible using the Python API). This means that
    in many situations it will be far easier to get the same results in Blender 2.5.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题促使Blender开发者对2.5版本的Blender Python API进行了全面的重构，重点是功能一致性（也就是说，在Blender中可能做到的一切都应该能够通过Python
    API实现）。这意味着在许多情况下，在Blender 2.5中获取相同的结果将会容易得多。
- en: 'Finally, Python is used in more places than just standalone scripts: **PyDrivers**
    and **PyConstraints** enable us to control the way Blender objects behave and
    we will encounter them in later chapters. Python also allows us to write custom
    textures and shaders as part of the nodes system as we will see in [Chapter 7](ch07.html
    "Chapter 7. Creating Custom Shaders and Textures with Pynodes"), *Creating Custom
    Shaders and Textures.*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Python不仅仅用于独立脚本：**PyDrivers**和**PyConstraints**使我们能够控制Blender对象的行为，我们将在后续章节中遇到它们。Python还允许我们编写自定义纹理和着色器作为节点系统的一部分，正如我们将在[第7章](ch07.html
    "第7章。使用Pynodes创建自定义着色器和纹理")中看到的，*创建自定义着色器和纹理*。
- en: Also, it is important to keep in mind that Python offers us far more than just
    the (already impressive) tools to automate all sorts of tasks in Blender. Python
    is a general programming language with an extensive library of tools included,
    so we do not have to resort to external tools for common system tasks such as
    copying files or archiving (zipping) directories. Even networking tasks can be
    implemented quite easily as a number of render farm solutions prove.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，重要的是要记住，Python为我们提供的不仅仅是（已经令人印象深刻的）自动化Blender中各种任务的工具。Python是一种通用编程语言，包含了一个广泛的工具库，因此我们不必求助于外部工具来执行常见的系统任务，如复制文件或归档（压缩）目录。甚至网络任务也可以相当容易地实现，正如许多渲染农场解决方案所证明的那样。
- en: Some batteries included
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些内置功能
- en: When we install Blender, a Python interpreter is already part of the application.
    This means that it is not necessary to install Python as a separate application.
    But there is more to Python than just the interpreter. Python comes with a huge
    collection of modules that provide a wealth of functionality. Anything from file
    manipulation to XML processing and more is available, and the best bit is that
    these modules are a standard part of the language. They are just as well maintained
    as the Python interpreter itself and (with very few exceptions) available on any
    platform that Python runs on.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们安装Blender时，Python解释器已经是应用程序的一部分。这意味着不需要单独安装Python作为应用程序。但Python不仅仅是解释器。Python附带了一个庞大的模块集合，提供了丰富的功能。从文件操作到XML处理等一切都可以使用，而且最好的是，这些模块是语言的标准部分。它们与Python解释器本身一样得到良好的维护，并且（在极少数例外的情况下）在Python运行的任何平台上都可用。
- en: The downside is, of course, that this collection of modules is fairly large
    (40MB or so), so the Blender developers chose to distribute only the bare minimum,
    primarily the math module. This makes sense if you want to keep the size of the
    Blender downloads manageable. Many Python developers have come to depend on the
    standard distribution because not having to reinvent the wheel saves huge amounts
    of time, not to mention it's not an easy task to develop and test a full-fledged
    XML library say, just because you want to be able to read a simple XML file. That
    is why it is now more or less a consensus that it is a good thing to install the
    full Python distribution. Fortunately, the installation is just as easy as the
    installation of Blender itself, even for end users, as binary installers are provided
    for many platforms, such as Windows and Mac, also in 64-bit versions. (Distributions
    for Linux are provided as source code with instructions on how to compile them,
    but many Linux distributions either already provide Python automatically or make
    it very easy to install it afterwards from a package repository).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个模块集合相当大（大约40MB），因此Blender的开发者选择只提供最基本的部分，主要是数学模块。如果你想要保持Blender下载的大小可管理，这样做是有意义的。许多Python开发者已经依赖于标准发行版，因为不必重新发明轮子可以节省大量的时间，更不用说开发并测试一个完整的XML库并不是一件容易的事情，比如说，仅仅因为你想要能够读取一个简单的XML文件。这就是为什么现在基本上是一个共识，安装完整的Python发行版是个好主意。幸运的是，安装过程与Blender本身的安装一样简单，即使是对于最终用户来说也是如此，因为为许多平台提供了二进制安装程序，例如Windows和Mac，也包括64位版本。（Linux的发行版以源代码的形式提供，并附有编译它们的说明，但许多Linux发行版要么已经自动提供了Python，要么使得从软件包仓库安装它变得非常容易）。
- en: Check for a full Python distribution
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查完整的Python发行版
- en: 'Chances are that you already have a full Python distribution on your system.
    You can verify this by starting Blender and checking the console window (the term
    **console** **window** refers to either the DOSBox that starts in parallel on
    Windows or the X terminal window where you start Blender from on other systems)
    to see if it displays the following text:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 很有可能你已经在系统中安装了完整的Python发行版。你可以通过启动Blender并检查控制台窗口（术语**控制台窗口**指的是在Windows上并行启动的DOSBox或在其他系统上从其中启动Blender的X终端窗口）来验证这一点，看看是否显示以下文本：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If it does, then there is nothing you have to do and you can skip to *The*
    *interactive* *Python* *console* section. If it shows the following message then
    you do have to take some action:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它显示了，那么你不需要做任何事情，可以直接跳到*交互式* *Python* *控制台*部分。如果它显示以下消息，那么你必须采取一些行动：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Installing a full Python distribution
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装完整的Python发行版
- en: 'The steps toward a full Python installation for Windows or Mac are as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Windows或Mac上完整Python安装的步骤如下：
- en: Download a suitable installer from [http://www.python.org/download/](http://www.python.org/download/).
    At the moment of writing, the latest stable 2.6 version is 2.6.2 (used in Blender
    2.49). It is generally a good thing to install the latest stable version as it
    will contain the latest bug fixes. Make sure, however, to use the same major version
    as Blender is compiled with. It is fine to use version 2.6.3 when it is released
    even as Blender is compiled with version 2.6.2\. But if you use an older version
    of Blender that is compiled with Python 2.5.4 you have to install the latest Python
    2.5.x release (or upgrade to Blender 2.49, if that is an option).
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://www.python.org/download/](http://www.python.org/download/)下载一个合适的安装程序。在撰写本文时，最新的稳定版2.6是2.6.2（用于Blender
    2.49）。安装最新稳定版本通常是个好主意，因为它将包含最新的错误修复。但是，请确保使用与Blender编译时相同的重大版本。即使Blender是用2.6.2编译的，使用2.6.3版本也是可以的。但是，如果你使用的是用Python
    2.5.4编译的较旧版本的Blender，你必须安装最新的Python 2.5.x版本（或者如果可能的话，升级到Blender 2.49）。
- en: 'Run the installer: On Windows the installer offers you to choose where to install
    Python. You can choose anything you like here, but if you choose the default,
    Blender will almost certainly find the modules installed here without the need
    to set the `PYTHONPATH` variable. (see below)'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序：在Windows上，安装程序会提供选择Python安装位置。你可以选择任何你喜欢的位置，但如果选择默认位置，Blender几乎肯定可以找到这里安装的模块，无需设置`PYTHONPATH`变量。（见下文）
- en: '(Re) start Blender. The Blender console should show the text:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （重新）启动Blender。Blender控制台应该显示以下文本：
- en: '[PRE3]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If it doesn''t, it might be necessary to set the `PYTHONPATH` variable. Refer
    to the Blender wiki for detailed information: [http://wiki.blender.org/index.php/Doc:Manual/Extensions/Python](http://wiki.blender.org/index.php/Doc:Manual/Extensions/Python)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有，可能需要设置 `PYTHONPATH` 变量。请参阅 Blender 维基以获取详细信息：[http://wiki.blender.org/index.php/Doc:Manual/Extensions/Python](http://wiki.blender.org/index.php/Doc:Manual/Extensions/Python)
- en: 'On Ubuntu Linux, the first step is not needed and installing can be done by
    using the built-in package manager:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu Linux 上，第一步不是必需的，可以通过使用内置的包管理器来安装：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Other distributions might use a different package management system so you might
    have to check the documentation for that. Under Windows it might be necessary
    to set the `PYTHONPATH` environment variable, although this is unlikely when using
    the provided packages.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 其他发行版可能使用不同的包管理系统，因此您可能需要检查该系统的文档。在 Windows 上，可能需要设置 `PYTHONPATH` 环境变量，尽管在使用提供的包时不太可能需要这样做。
- en: The interactive Python console
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交互式 Python 控制台
- en: 'To see where Blender actually looks for modules you may look at Python''s `sys.path`
    variable. To do this you have to start up Blender''s interactive Python console.
    Note that you use a different and possibly confusing notion of console here—the
    DOSBox or the terminal window that is started alongside Blender''s main application
    window and where various informational messages are displayed is referred to as
    **console** as well! The Python interactive console that we want to use now is
    started from the **script window**:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 Blender 实际查找模块的位置，您可以查看 Python 的 `sys.path` 变量。为此，您必须启动 Blender 的交互式 Python
    控制台。请注意，您在这里使用的是不同的、可能令人困惑的概念——DOSBox 或与 Blender 主应用程序窗口一起启动并显示各种信息消息的终端窗口也被称为
    **控制台**！我们现在想要使用的 Python 交互式控制台是从 **脚本窗口** 启动的：
- en: '![The interactive Python console](img/0400_01_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![交互式 Python 控制台](img/0400_01_03.jpg)'
- en: 'Once the interactive Python console is started, type the following commands:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动了交互式 Python 控制台，请输入以下命令：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Note that the interactive Python console does not show any prompt (unless when
    expecting indentation, for example within a `for` loop) but anything you type
    will be in a different color (white on black by default) from what is returned
    (that will be blue or black). The two preceding commands will give us access to
    Python''s `sys` module that contains various variables with system information.
    The `sys.path` variable that we print here will hold all of the directories that
    will be searched when we try to import a module. (Note that importing `sys` will
    always work because `sys` is a built-in module.) The output will be something
    similar to:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，交互式 Python 控制台不会显示任何提示（除非在需要缩进的情况下，例如在 `for` 循环中）但您输入的内容将以不同的颜色（默认为白色在黑色背景上）显示，而返回的内容（将显示为蓝色或黑色）。前两个命令将使我们能够访问包含各种系统信息的
    Python 的 `sys` 模块。我们在这里打印的 `sys.path` 变量将包含当我们尝试导入模块时将被搜索的所有目录。（请注意，导入 `sys` 总是会成功，因为
    `sys` 是一个内置模块。）输出将类似于：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If your Python installation directory is not in this list then you should set
    the `PYTHONPATH` variable before starting Blender.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的 Python 安装目录不在此列表中，那么在启动 Blender 之前，您应该设置 `PYTHONPATH` 变量。
- en: Exploring built-in modules, the help() function
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索内置模块，help() 函数
- en: The interactive Python console is a good platform to explore built-in modules
    as well. Because Python comes equipped with two very useful functions, `help()`
    and `dir()`, you have instant access to a lot of information contained in Blender's
    (and Python's) modules as a lot of documentation is provided as part of the code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式 Python 控制台是一个探索内置模块的好平台。因为 Python 配备了两个非常有用的函数，`help()` 和 `dir()`，您可以直接访问
    Blender（和 Python）模块中包含的大量信息，因为许多文档都是作为代码的一部分提供的。
- en: 'For people not familiar with these functions, here are two short examples,
    both run from the interactive Python console. To get information on a specific
    object or function, type:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不熟悉这些函数的人来说，这里有两个简短的示例，两个都是从交互式 Python 控制台运行的。要获取特定对象或函数的信息，请输入：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The information will be printed in the same console:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 信息将在同一控制台中打印：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `help()` function will show the associated docstring of functions, classes,
    or modules. In the previous example, that is the information provided with the
    `Get()` method (function) of the `Lamp` class. A **docstring** is the first string
    defined in a function, class, or module. When defining your own functions, it
    is a good thing to do this as well. This might look like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`help()`函数将显示函数、类或模块的相关docstring。在上一个例子中，这是`Lamp`类的`Get()`方法（函数）提供的信息。**docstring**是在函数、类或模块中定义的第一个字符串。当你定义自己的函数时，这样做也是一个好习惯。它可能看起来像这样：'
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can now apply the `help` function to our newly-defined function like we
    did before:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以像之前一样，将`help`函数应用于我们新定义的函数：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output then shows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 输出随后显示：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the programs that we will be developing, we will use this method of documenting
    where appropriate.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将要开发的程序中，我们将根据需要使用这种文档方法。
- en: Exploring built-in functions, the dir() function
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索内置函数，dir()函数
- en: 'The `dir()` function lists all members of an object. That object can be an
    instance, but also a class or module. For example, we might apply it to the `Blender.Lamp`
    module:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`dir()`函数列出了一个对象的全部成员。这个对象可以是一个实例，也可以是一个类或模块。例如，我们可以将其应用于`Blender.Lamp`模块：'
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output will be a list of all members of the `Blender.Lamp` module. You
    can spot the `Get()` function that we encountered earlier:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是一个包含`Blender.Lamp`模块所有成员的列表。你可以找到我们之前遇到的`Get()`函数：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Once you know which members a class or module has, you can then check for any
    additional help information for these members by applying the `help()` function.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你知道一个类或模块有哪些成员，你就可以通过应用`help()`函数来检查这些成员的任何附加帮助信息。
- en: Of course both `dir()` and `help()` are most useful when you already have some
    clue where to look for information. But if so, they can be very convenient tools
    indeed.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`dir()`和`help()`函数在你已经知道信息所在位置时最为有用。但如果是这样，它们确实是非常方便的工具。
- en: Getting familiar with the built-in editor
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉内置编辑器
- en: It is possible to use any editor (that you like) to write Python scripts and
    then import the scripts as text files but Blender's built-in text editor will
    probably be adequate for all programming needs. It features conveniences such
    as syntax highlighting, line numbering, and automatic indentation, and gives you
    the possibility to run a script directly from the editor. The ability to run a
    script directly from the editor is a definite boon when debugging because of the
    direct feedback that you get when encountering an error. You will not only get
    an informative message but the offending line will also be highlighted in the
    editor.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何你喜欢的编辑器编写Python脚本，然后将脚本作为文本文件导入，但Blender的内置文本编辑器可能足以满足所有编程需求。它具有语法高亮、行号和自动缩进等便利功能，并允许你直接从编辑器中运行脚本。由于在遇到错误时能够直接获得反馈，因此直接从编辑器运行脚本在调试时是一个明显的优点。你不仅会得到一条信息，而且出错的行也会在编辑器中被突出显示。
- en: What is more, the editor comes with many plug-ins of which the automatic suggestion
    of members and the documentation viewer are very convenient for programmers. And
    of course, it is possible to write additional plug-ins yourself.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，编辑器还附带了许多插件，其中成员自动建议和文档查看器对程序员来说非常方便。当然，你也可以自己编写额外的插件。
- en: 'You can select the built-in editor by choosing **Text Editor** from the Windows
    menu:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过从窗口菜单中选择**文本编辑器**来选择内置编辑器：
- en: '![Getting familiar with the built-in editor](img/0400_01_04.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![熟悉内置编辑器](img/0400_01_04.jpg)'
- en: 'When you start up you are presented with an almost empty area except for a
    strip of buttons at the bottom:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 启动时，你将看到一个几乎空白的区域，底部只有一条按钮条：
- en: '![Getting familiar with the built-in editor](img/0400_01_05.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![熟悉内置编辑器](img/0400_01_05.jpg)'
- en: We can select the default empty text buffer `TX:Text` or create a new empty
    text by selecting **ADD NEW** from the drop-down menu available when we click
    on the **Menu** button.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择默认的空文本缓冲区`TX:Text`，或者通过点击**菜单**按钮时出现的下拉菜单中的**添加新项**来创建一个新的空文本。
- en: The default name for this new text will be `TX:Text.001,` but you may change
    it to something more meaningful by clicking on the name and changing it. Note
    that if you would like to save this text to an external file (with **Text** **|**
    **Save** **As...**) the name of the text is distinct from the filename (although
    in general it is a good idea to keep these the same to avoid confusion). It is
    not mandatory to save texts as external files; texts are Blender objects that
    are saved together with all other information when you save your `.blend` file.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此新文本的默认名称将是`TX:Text.001,`，但您可以通过单击名称并更改它来将其更改为更有意义的内容。请注意，如果您想将此文本保存到外部文件（使用**文本**
    **|** **另存为...**），文本的名称与文件名不同（尽管通常保持它们相同以避免混淆）。保存文本为外部文件不是强制性的；文本是Blender对象，当您保存`.blend`文件时，它们会与其他所有信息一起保存。
- en: External files may be opened as texts by selecting **OPEN NEW** from the **Menu**
    button drop-down instead of **ADD NEW**. If for some reason an external file and
    an associated text are out of sync when Blender is started, an out of sync button
    is displayed. When clicked, it displays a number of options to resolve the issue.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从**菜单**按钮的下拉菜单中选择**打开新文件**，而不是**添加新文件**，可以以文本形式打开外部文件。如果由于某种原因，当Blender启动时外部文件和相关文本不同步，将显示一个不同步的按钮。点击该按钮时，会显示一系列选项以解决该问题。
- en: 'Once a new or existing text is selected, the menu bar at the bottom of the
    screen is updated with some additional menu options:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了一个新文本或现有文本，屏幕底部的菜单栏将更新，并添加一些额外的菜单选项：
- en: '![Getting familiar with the built-in editor](img/0400_01_06.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![熟悉内置编辑器](img/0400_01_06.jpg)'
- en: The **Text** **file** **menu** gives access to options to open or save a file
    or to run the script in the editor. It also presents a number of template scripts
    that may be used as a basis for your own scripts. If you select one of these templates
    a new text buffer is created with a copy of the selected template.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**文本**文件菜单提供了打开或保存文件或运行编辑器中的脚本的选项。它还展示了一些模板脚本，这些脚本可以作为您自己脚本的起点。如果您选择这些模板之一，将创建一个新的文本缓冲区，其中包含所选模板的副本。'
- en: The **Edit** **menu** contains **cut-and-paste** functionality as well as options
    to search and replace text or jump to a chosen line number.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**编辑**菜单包含剪切和粘贴功能，以及搜索和替换文本或跳转到所选行号的选项。'
- en: The **Format** menu has options to indent and unindent selected text as well
    as options to convert whitespace. The latter option can be very helpful when the
    Python interpreter complains about unexpected indentation levels although there
    seems nothing amiss with your file. If that happens you possibly have mixed tabs
    and spaces in way that confuse Python (as they are different as far as the interpreter
    is concerned) and a possible way out is to convert selected text to spaces first
    and then back to tabs. This way mixed spaces and tabs will be used in a uniform
    way again.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**格式**菜单提供了缩进和取消缩进所选文本的选项，以及转换空白字符的选项。后者在Python解释器抱怨意外的缩进级别时非常有用，尽管您的文件似乎没有问题。如果发生这种情况，您可能以混淆Python的方式混合了制表符和空格（因为它们在解释器看来是不同的），一种可能的解决方案是首先将所选文本转换为空格，然后再将其转换回制表符。这样，混合的空格和制表符将再次以统一的方式使用。'
- en: An editor example
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑器示例
- en: 'To get used to the editor, create a new text buffer by choosing **Text | New**
    and type in the following example lines:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了熟悉编辑器，通过选择**文本 | 新建**创建一个新的文本缓冲区，并输入以下示例行：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Most keys on the keyboard will behave in a familiar way, including *Delete*,
    *Backspace*, and *Enter*. The shortcut keys for cutting, pasting, and copying
    are listed in the **Edit** menu as *Alt + X*, *Alt + V*, and *Alt + C* respectively
    but the *Ctrl* key equivalents *Ctrl + X*, *Ctrl + V*, and *Ctrl + C* (familiar
    to Windows users) work just as well. A full keyboard map can be consulted on the
    Blender wiki, [http://wiki.blender.org/index.php/Doc:Manual/Extensions/Python/Text_editor](http://wiki.blender.org/index.php/Doc:Manual/Extensions/Python/Text_editor)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘上的大多数键将以熟悉的方式工作，包括*删除*、*退格*和*回车*。剪切、粘贴和复制的快捷键在**编辑**菜单中分别列出为*Alt + X*、*Alt
    + V*和*Alt + C*，但Windows用户熟悉的*Ctrl*键等效键*Ctrl + X*、*Ctrl + V*和*Ctrl + C*（同样有效）。完整的键盘映射可以在Blender维基上查阅，[http://wiki.blender.org/index.php/Doc:Manual/Extensions/Python/Text_editor](http://wiki.blender.org/index.php/Doc:Manual/Extensions/Python/Text_editor)
- en: Selecting portions of the text can be achieved by clicking and dragging the
    mouse, but you can also select text by moving the text cursor around while pressing
    the *Shift* key.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单击并拖动鼠标可以选择文本的一部分，但您也可以在按住*Shift*键的同时移动文本光标来选择文本。
- en: Text will be uncolored by default, but reading scripts can be made a lot easier
    on the eye by enabling syntax highlighting. Clicking on the little **AB** button
    will toggle this (it will be black and white when syntax highlighting is off and
    colored when on.) Like many aspects of Blender, text colors can be customized
    in the **themes** section of the **User Preferences** window.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 文本默认将不进行着色，但通过启用语法高亮，阅读脚本可以变得更容易。点击小型的**AB**按钮可以切换此功能（当语法高亮关闭时为黑白，开启时为彩色）。像Blender的许多方面一样，文本颜色可以在**用户首选项**窗口的**主题**部分进行自定义。
- en: Another feature that is very convenient to enable, especially when debugging
    scripts, is line numbering. (You might write a faultless code in one go, but unfortunately
    yours truly is less of a genius.) Every Python error message that will be shown
    will have a filename and a line number, and the offending line will be highlighted.
    But the lines of the calling function(s), if any, will not be highlighted although
    their line numbers will be shown in the error message, so having line numbers
    enabled will enable you to quickly locate the calling context of the trouble spot.
    Line numbering is enabled by clicking on the **lines** button.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常方便启用的功能，尤其是在调试脚本时，是行号显示。（你可能会一次性写出无瑕疵的代码，但不幸的是，我并不那么聪明。）每个将被显示的Python错误信息都将包含文件名和行号，并且出错的行将被突出显示。但是，如果有调用函数，它们的行号将在错误信息中显示，但不会被突出显示，因此启用行号显示将使你能够快速定位问题所在代码的调用上下文。行号显示可以通过点击**行号**按钮来启用。
- en: Running a script is done by pressing *Alt + P*. Nothing is displayed in the
    editor when there are no errors encountered, but the output will be shown on the
    console (that is, the DOSBox or X terminal Blender started from, *not* the Python
    interactive console that we encountered earlier).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按下*Alt + P*来运行脚本。如果没有遇到错误，编辑器中不会显示任何内容，但输出将显示在控制台（即从Blender启动的DOSBox或X终端，*不是*我们之前遇到的Python交互式控制台）。
- en: 'First steps: Hello world'
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一步：hello world
- en: Tradition demands every book about programming to have a "hello world" example
    and why would we offend people? We will implement, and run, a simple object instantiating
    script and show how to integrate this in Blender's script menu. We will also show
    how to document it and make an entry in the help system. Finally, we will spend
    some words on the pros and cons of distributing scripts as `.blend` files or as
    scripts to install in the `scriptdir` by the user.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上要求每一本编程书籍都要有一个“hello world”示例，我们为什么要冒犯人们呢？我们将实现并运行一个简单的对象实例化脚本，并展示如何将其集成到Blender的脚本菜单中。我们还将展示如何对其进行文档化并在帮助系统中添加条目。最后，我们将讨论将脚本作为`.blend`文件分发或作为用户安装到`scriptdir`中的脚本的分发优缺点。
- en: Let's write some code! You can type in the following lines directly into the
    interactive Python console, or you can open a new text in Blender's text editor
    and then press *Alt + P* to run the script. It is a short script but we'll go
    through it in some detail as it features many of the key aspects of the Blender
    Python API.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一些代码！你可以直接在交互式Python控制台中输入以下行，或者你可以在Blender的文本编辑器中打开一个新的文本文件，然后按下*Alt +
    P*来运行脚本。这是一个简短的脚本，但我们将详细地讲解它，因为它展示了Blender Python API的许多关键特性。
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The first line identifies this script as a Blender script. This is not necessary
    to run the script, but if we want to be able to make this script a part of Blender's
    menu structure we need it, so we better get used to it right away.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行将此脚本标识为Blender脚本。这不是运行脚本所必需的，但如果我们想使此脚本成为Blender菜单结构的一部分，我们需要它，所以最好立即习惯它。
- en: You will find the second line (which is highlighted) in virtually any Blender
    script because it gives us access to the classes and functions of the Blender
    Python API. Likewise, the third line gives us access to the specific submodules
    of the Blender module that we will need in this script. We could access them as
    members of the `Blender` module of course (for example, `Blender.Scene`), but
    importing them explicitly saves some typing and enhances readability.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你几乎可以在任何Blender脚本中找到第二行（它将被突出显示），因为它为我们提供了访问Blender Python API中的类和函数的权限。同样，第三行为我们提供了访问我们在此脚本中需要的Blender模块的特定子模块的权限。当然，我们可以将它们作为`Blender`模块的成员来访问（例如，`Blender.Scene`），但显式导入它们可以节省一些输入并提高可读性。
- en: The next two lines first create a `Text3d` object and assign that to the variable
    `hello`. The `Text3d` object will have the name `HelloWorld` in Blender so users
    can refer to this object by this name. Also this is the name that will be visible
    in the Outliner window and in the lower-left corner if the object is selected.
    If there already exists an object of the same type with this name, Blender adds
    a numerical suffix to the name to make it unique. ``For example, `HelloWorld`
    might become `HelloWord.001` if we run the scripts twice.``
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的两行首先创建一个`Text3d`对象并将其分配给变量`hello`。在Blender中，`Text3d`对象将具有`HelloWorld`的名称，因此用户可以通过此名称引用此对象。此外，这也是在Outliner窗口和对象被选中时的左下角可见的名称。如果已经存在具有相同名称的同类型对象，Blender将在名称中添加一个数字后缀以使其唯一。例如，如果我们运行脚本两次，`HelloWorld`可能会变成`HelloWord.001`。`
- en: '``By default, a newly created `Text3d` object will contain the text **Text**
    so we change that to **Hello** **World!** with `setText()` method.``'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`默认情况下，新创建的`Text3d`对象将包含文本**Text**，我们可以使用`setText()`方法将其更改为**Hello** **World!**`'
- en: '``A newly created Blender object is not visible by default, we have to associate
    that with a `Scene` so the next few lines retrieve a reference to the current
    scene and add the `Text3d` object to it. The `Text3d` object is not added directly
    to the scene but the `scene.objects.new()` method embeds the `Text3d` object in
    a generic Blender object and returns a reference to the latter. The generic Blender
    object holds information common to all objects, such as position, whereas the
    `Text3d` object holds specific information, such as the text font.``'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`默认情况下，新创建的Blender对象是不可见的，我们必须将其与一个`场景`关联起来，所以接下来的几行代码检索当前场景的引用并将`Text3d`对象添加到其中。`Text3d`对象不是直接添加到场景中，而是`scene.objects.new()`方法将`Text3d`对象嵌入到一个通用的Blender对象中，并返回后者的引用。通用的Blender对象包含所有对象共有的信息，例如位置，而`Text3d`对象则包含特定的信息，例如文本字体。`'
- en: '`Finally, we tell the window manager to refresh any window that needs a refresh
    due to the addition of a new object.`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`最后，我们告诉窗口管理器刷新任何由于添加新对象而需要刷新的窗口。`'
- en: '`Integrating a script in Blender''s menus`'
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`将脚本集成到Blender的菜单中`'
- en: '`Your own script doesn''t have to be a second class citizen. It can be made
    part of Blender on par with any of the bundled scripts that come with Blender.
    It can be added to the **Add** menu present in the header at the top of the View3D
    window.`'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`您的脚本不必是二等公民。它可以成为Blender的一部分，与Blender附带的所有捆绑脚本一样。它可以添加到View3D窗口顶部的**添加**菜单中。`'
- en: '`Note`'
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`注意`'
- en: '`Actually, the **Add** menu is present in the header at the bottom of the user
    preferences window but as this window is situated above the View3D window, and
    is by default minimized to just the header, it looks as if it''s a header at the
    top of the View3D window. Many users are so accustomed to it that they see it
    as part of the View3D window.`'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`实际上，**添加**菜单位于用户偏好设置窗口的底部标题栏中，但由于这个窗口位于View3D窗口之上，并且默认情况下仅显示标题栏，所以它看起来像是View3D窗口顶部的标题栏。许多用户已经习惯了它，以至于把它看作是View3D窗口的一部分。`'
- en: '`It may supply information to Blender''s help system just like any other script.
    The following few lines of code make that possible:`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`它可以像任何其他脚本一样向Blender的帮助系统提供信息。以下几行代码使得这一点成为可能：`'
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`We start the script with a standalone string containing several lines.`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`我们以一个包含多行文本的独立字符串开始脚本。`'
- en: '`Note`'
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`注意`'
- en: '`Each line starts with a label followed by a colon and a value. The colon should
    follow the label immediately. There should not be any intervening space, otherwise
    our script will *not* show up in any menu.`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`每一行都以一个标签开头，后面跟着一个冒号和一个值。冒号应紧随标签之后。不应该有任何间隔空格，否则我们的脚本将*不会*出现在任何菜单中。`'
- en: '`The labels at the beginning of each line serve the following purpose:`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`每行开头的标签具有以下作用：`'
- en: '`` `Name` (a string) defines the name of the scripts as it appears in the menu
    ``'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '``` `Name` (一个字符串)定义了脚本在菜单中显示的名称`'
- en: '`` `Blender` (a number) defines the minimum version of Blender needed to use
    the script ``'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '``` `Blender` (一个数字)定义了使用脚本所需的Blender的最小版本`'
- en: '`` `Group` (a string) is the submenu of the scripts menu under which this script
    should be grouped  If our scripts are to appear under the **Add | Mesh** menu
    in the View3D window (also accessible by pressing *Space*) this should read `AddMesh`.
    If it should be under a different submenu of the script''s menu, it could read,
    for example, `Wizards` or `Object`. Besides the necessary labels the following
    optional labels might be added: ``'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `组`（一个字符串）是脚本菜单下的子菜单，该脚本应该分组。如果我们的脚本要在View3D窗口的**添加 | 网格**菜单下显示（也可以通过按*Space*键访问），则应读取`AddMesh`。如果它应该位于脚本菜单的另一个子菜单下，则可以是例如`Wizards`或`Object`。除了必要的标签外，还可以添加以下可选标签：`'
- en: '`` `Version` (a string) is the version of the script in any format you like.
    ``'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `版本`（一个字符串）是脚本在任何你喜欢的格式中的版本。``'
- en: '`` `Tip` (a string) is the information shown in the tooltip when hovering over
    the menu item in the **Scripts** menu. If the script belongs to the group `AddMesh`,
    no tooltip will be shown even if we define one here. ``'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `提示`（一个字符串）是在**脚本**菜单中的菜单项上悬停时显示的工具提示信息。如果脚本属于`AddMesh`组，即使我们在这里定义了一个工具提示，也不会显示。``'
- en: '`![Integrating a script in Blender''s menus](img/0400_01_07.jpg)`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`![在Blender的菜单中集成脚本](img/0400_01_07.jpg)`'
- en: '`Integrating a script in Blender''s help system`'
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`在Blender的帮助系统中集成脚本`'
- en: '`Blender has an integrated help system that is accessible from the **Help**
    menu at the top of the screen. It gives access to online resources and to information
    on registered scripts via the **Scripts** **Help** **Browser** entry. Once selected,
    it shows a collection of drop-down menus, one for each group, where you can select
    a script and view its help information.`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`Blender有一个集成的帮助系统，可以从屏幕顶部的**帮助**菜单访问。它通过**脚本** **帮助** **浏览器**条目提供对在线资源以及注册脚本的访问信息。一旦选择，它将显示一组下拉菜单，每个菜单对应一个组，你可以从中选择一个脚本并查看其帮助信息。`'
- en: '`If we want to enter our script in the integrated help system we need to define
    some additional global variables:`'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`如果我们想将我们的脚本添加到集成的帮助系统中，我们需要定义一些额外的全局变量：`'
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '``These variables should be self-explanatory except for the `__url__` variable—this
    one will take a list of strings where each string consists of a short description,
    a comma, and a URL. The resulting help screen will look like this:``'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '``这些变量应该都是不言自明的，除了`__url__`变量——这个变量将包含一个字符串列表，其中每个字符串由一个简短描述、一个逗号和一个URL组成。生成的帮助屏幕将看起来像这样：``'
- en: '`![Integrating a script in Blender''s help system](img/0400_01_08.jpg)`'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`![在Blender的帮助系统中集成脚本](img/0400_01_08.jpg)`'
- en: '``Now all that we have left to do is to test it and then place this script
    in an appropriate location. We can test the script by pressing *Alt + P*. If no
    errors are encountered, this will result in our `Hello` `World` `Text3d` object
    being added to the scene but the script will *not* be appended to the **Add**
    menu yet.``'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '``现在我们只剩下测试它并将此脚本放置在适当的位置了。我们可以通过按*Alt + P*来测试脚本。如果没有遇到错误，这将导致我们的`Hello` `World`
    `Text3d`对象被添加到场景中，但脚本**尚未**被添加到**添加**菜单中。```'
- en: '``If a script is to be added to the **Add** menu it has to reside in Blender''s
    script directory. To do this, first save the script in the text buffer to a file
    with a meaningful name. Next, make sure that this file is located in Blender''s
    script directory. This directory is called `scripts` and is a subdirectory of
    `.blender`, Blender''s configuration directory. It is either located in Blender''s
    installation directory or (on Windows) in the `Application` `Data` directory.
    The easiest way to find ours is to simply look at the `sys.path` variable again
    to see which listed directory ends in `.blender\scripts`.``'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '``如果要将脚本添加到**添加**菜单，它必须位于Blender的脚本目录中。为此，首先将脚本保存到文本缓冲区，并以一个有意义的名称保存为文件。接下来，确保这个文件位于Blender的脚本目录中。这个目录被称为`scripts`，是Blender配置目录`.blender`的子目录。它位于Blender的安装目录中，或者在Windows中位于`Application`
    `Data`目录中。找到我们的最简单方法就是再次查看`sys.path`变量，看看哪个列出的目录以`.blender\scripts`结尾。``'
- en: '``Scripts located in Blender''s `scripts` directory will be automatically executed
    on startup, so our hello world script will be available anytime we start up Blender.
    If we want Blender to reexamine the script directory (so that we don''t have to
    restart Blender to see our new addition) we can choose **Scripts | Update menus**
    in the interactive console.``'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '``位于Blender的`scripts`目录中的脚本将在启动时自动执行，因此我们的hello world脚本将在我们启动Blender时随时可用。如果我们想让Blender重新检查脚本目录（这样我们就不必重新启动Blender来查看我们的新添加项），我们可以在交互式控制台中选择**脚本
    | 更新菜单**。``'
- en: '[PRE18] from Blender import Camera cam = Camera.New()         # creates new
    camera data ob = scn.objects.new(cam)  # adds a new camera object scn.setCurrentCamera(ob)    #
    makes this camera active [PRE19] from Blender import Lamp lamp = Lamp.New()            #
    create a new lamp ob = scn.objects.new(lamp) [PRE20] from Blender import Mesh,Scene  corners=[
    (-1,-1,-1), (1,-1,-1), (1,1,-1), (-1,1,-1),(-1,-1, 1), (1,-1, 1), (1,1, 1), (-1,1,
    1) ] sides= [ (0,1,2,3), (4,5,6,7), (0,1,5,4), (1,2,6,5), (2,3,7,6), (3,0,4,7)
    ]  me = Mesh.New(''Cube'') me.verts.extend(corners) me.faces.extend(sides) scn
    = Scene.GetCurrent() ob = scn.objects.new(me, ''Cube'') Window.RedrawAll() [PRE21]
    import Blender version = Blender.Get(''version'') [PRE22] import Blender Blender.PackAll()
    Blender.Save(''myfile.blend'') [PRE23] import Blender ob = Blender.Object.Get(name=''MyObject'')
    [PRE24] import bpy ob = bpy.data.objects[''MyObject''] [PRE25] import Blender
    scene = Blender.Scene.GetCurrent() [PRE26] import bpy scene = bpy.data.scenes.active
    [PRE27]     …     if type(someobject) == Blender.Types.CurveType :     … do things
    only allowed for Curve objects ...     [PRE28]`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE18] 从 Blender 导入 Camera 类，创建新的相机数据：`cam = Camera.New()`         # 创建新的相机数据'
