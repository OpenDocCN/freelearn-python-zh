- en: Collections
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合
- en: In the last chapter, we learned about functions and scope of variable. In functions,
    we learned about defining a function, functions with arguments, functions with
    arguments and return type, functions with default arguments, functions with variable
    length arguments, and, finally, in functions, we saw how to use key-value pairs
    as variable length arguments. We covered the topic of scope variable and memory
    management. In this chapter, we will touch the essence of every programming language,
    that is, collections. Some of the topics under collections such as list, dictionary,
    and tuple have already been covered in the previous chapter. In this chapter,
    we will be looking at counter, deque, ordered dictionary, default dictionary,
    and named tuple.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了函数和变量的作用域。在函数中，我们学习了定义函数、带参数的函数、带参数和返回类型的函数、带默认参数的函数、带可变长度参数的函数，最后，在函数中，我们看到了如何使用键值对作为可变长度参数。我们涵盖了变量作用域和内存管理的内容。在本章中，我们将触及每种编程语言的精髓，那就是集合。在集合下的一些主题，如列表、字典和元组，已经在上一章中介绍过。在本章中，我们将探讨counter、deque、有序字典、默认字典和命名元组。
- en: Collections
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合
- en: While for people with some experience in programming this is not a new topic,
    but those who are just taking up programming for the first time, it is a topic
    that will raise quite a bit of curiosity in their minds. What is a collection?
    The answer to this question can be well understood by the day-to-day examples
    from our lives. Everyone has seen a collection of stamps, collection of books,
    or collection of flowers, and so on. So basically we group items in a collection.
    What type of items does a collection contain? Pretty sure this question would
    be the next one. Well, a collection can contain either one type of item, for example,
    a collection of flowers (here, the type is flowers) or the collection can be a
    hybrid collection, for example, a collection of books and magazines (here, the
    type being books and magazines). In Python programming, each collection has unique
    characteristic and can be used to achieve the desired outcome. All the collections
    are part of the `collections` module.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有编程经验的人来说，这并不是一个新话题，但对于第一次接触编程的人来说，这是一个会在他们心中引起相当多好奇心的主题。什么是集合？这个问题的答案可以通过我们日常生活中的例子很好地理解。每个人都见过邮票收藏、书籍收藏或花收藏等等。所以基本上我们是在集合中分组物品。集合包含什么类型的物品？这个问题可能是下一个问题。好吧，一个集合可以包含一种类型的物品，例如，花收藏（这里，类型是花）或者集合可以是混合集合，例如，书籍和杂志收藏（这里，类型是书籍和杂志）。在Python编程中，每个集合都有其独特的特征，可以用来实现预期的结果。所有的集合都是`collections`模块的一部分。
- en: More about collections can be found at the website [https://docs.python.org/2/library/collections.html](https://docs.python.org/2/library/collections.html).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于集合的信息可以在网站[https://docs.python.org/2/library/collections.html](https://docs.python.org/2/library/collections.html)找到。
- en: Counter
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Counter
- en: Counter is a container  and it tracks the frequency of values.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Counter是一个容器，它跟踪值的频率。
- en: Container is a generic word, which can mean anything that can hold anything.
    For example, a bucket of water can be considered as container which contains water.
    Similarly, a list of guests can be considered as another container that holds
    the list.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是一个通用词，可以指任何可以包含任何东西的东西。例如，一个装水的桶可以被认为是一个容器，里面装着水。同样，一个客人名单可以被认为是一个容器，里面包含着名单。
- en: 'The syntax is as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It will be more clear with an example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个例子会更清楚：
- en: '![](img/image1-4.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image1-4.jpg)'
- en: In the preceding screenshot, we directly use the Python command line to show
    the example. Before using `Counter`, you will need to import the `collections`
    module. In the preceding example, we pass on a list of characters to `Counter`. The
    `Counter` processes the list and returns the frequency of each character. Here,
    frequency means how many times each character occurs within the list. The outcome
    is in the form of dictionary, where each character of the input list becomes a
    key and its frequency becomes value for that key. For example, `d` is the key
    and `4` is the value which means the character `d` has appeared four times in
    the list.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们直接使用Python命令行来展示示例。在使用`Counter`之前，你需要导入`collections`模块。在前面的示例中，我们将字符列表传递给`Counter`。`Counter`处理列表并返回每个字符的频率。在这里，频率意味着每个字符在列表中出现的次数。结果以字典的形式呈现，其中输入列表的每个字符都成为键，其频率成为该键的值。例如，`d`是键，`4`是值，这意味着字符`d`在列表中出现了四次。
- en: 'Let''s view another example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看另一个例子：
- en: '![](img/image2-2.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片2-2](img/image2-2.jpg)'
- en: 'We provide sequence of strings directly to the `Counter`. Here, in this case,
    even empty spaces are taken into account and their frequency is calculated:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们直接将字符串序列提供给`Counter`。在这里，在这种情况下，即使是空格也被考虑在内，并计算其频率：
- en: '![](img/image-3.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片-3](img/image-3.jpg)'
- en: In this example, we create a list of movies and then pass on the list to the
    `Counter`, which returns the frequency of the movies present in the list.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建一个电影列表，然后将该列表传递给`Counter`，它返回列表中存在的电影的频率。
- en: Update function
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新函数
- en: At any given time during programming, if there is a need to add more values
    to the existing counter, then the `update()` method can be used instead of creating
    a new counter. Let's look at the `update()` method of `Counter`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程的任何给定时间，如果需要向现有的计数器添加更多值，则可以使用`update()`方法而不是创建一个新的计数器。让我们看看`Counter`的`update()`方法。
- en: '![](img/image4-1.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片4-1](img/image4-1.jpg)'
- en: In the preceding example, we try to update an empty `Counter` using the `update()`
    method and passing `"Locarno Caine"` to the method. Thereby, the `Counter` returns
    frequency of each character. Did you notice that empty space also has a frequency?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们尝试使用`update()`方法更新一个空的`Counter`，并将`"Locarno Caine"`传递给该方法。因此，`Counter`返回每个字符的频率。你注意到空格也有频率吗？
- en: '![](img/image5-1.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片5-1](img/image5-1.jpg)'
- en: In the preceding example, we use the `update()` method to update the existing
    sequence of strings provided to the `Counter`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用`update()`方法来更新提供给`Counter`的现有字符串序列。
- en: '![](img/image6-2.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片6-2](img/image6-2.jpg)'
- en: In the preceding case, we used the `update()` method to increase the frequency
    of characters `"a"` and `"P"` to the existing sequence of strings. Here, we learned how
    the `update()` method can be used to update an empty counter, update the existing
    input to the counter, and increase the frequency of the existing input sequence
    of strings to the counter.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的情况下，我们使用`update()`方法来增加字符`"a"`和`"P"`的频率到现有的字符串序列中。在这里，我们学习了如何使用`update()`方法来更新一个空的计数器，更新计数器的现有输入，以及增加现有输入序列字符串到计数器的频率。
- en: Usage of counters
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计数器的使用
- en: 'So far our examples were demonstrated using Python IDLE GUI. Now we will see
    the usage of counter by creating a Python file. For those who did not understand
    what is a Python file, read [Chapter 1](lrn-py-7d_ch01.html), *Getting Started
    with Python*, and then you can come back and continue:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的示例都是使用Python IDLE GUI演示的。现在我们将通过创建一个Python文件来查看计数器的使用。对于那些不理解什么是Python文件的人来说，请阅读[第1章](lrn-py-7d_ch01.html)，*Python入门*，然后你可以回来继续：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the given example, we try to compare the stream of strings provided as input
    to the `Counter` with another stream of strings. In this case, `Counter` prints
    out only the frequency of the sequence of strings we want to compare and not the
    input string to the `Counter`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定的示例中，我们尝试将作为输入提供给`Counter`的字符串流与另一个字符串流进行比较。在这种情况下，`Counter`仅打印出我们想要比较的字符串序列的频率，而不是提供给`Counter`的输入字符串：
- en: '![](img/image7-4.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片7-4](img/image7-4.jpg)'
- en: Counter does not raise `KeyError` for unknown items. If a value is not found in
    the input string (as with `W`, `k`, and `?` in this example), then its count is
    `0`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 计数器对于未知项不会引发`KeyError`。如果输入字符串中找不到值（如本例中的`W`、`k`和`?`），则其计数为`0`。
- en: King Tutankhamen (or Tutankhamun) ruled Egypt as pharaoh for 10 years until
    his death at the age of 19, around 1324 B.C. He was barely known to the modern
    world until 1922, when British archaeologist, Howard Carter, chiseled through
    a doorway and entered the boy pharaoh’s tomb, which had remained sealed for more
    than 3,200 years. This information has been taken from [http://www.history.com/topics/ancient-history/tutankhamen](http://www.history.com/topics/ancient-history/tutankhamen).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图坦卡蒙（或图坦卡蒙）在公元前1324年左右，19岁时作为法老统治埃及10年，直到他去世。直到1922年，当英国考古学家霍华德·卡特凿开一道门进入男孩法老的墓穴，这个墓穴已经密封了3200多年，他才被现代世界所知。这些信息来自[http://www.history.com/topics/ancient-history/tutankhamen](http://www.history.com/topics/ancient-history/tutankhamen)。
- en: 'We will look at another example where we will deal with the basic file operations.
    Here, we will provide a text file, which has sentences and we will provide this
    file to counter as input. The following screenshot shows the text file with some
    texts that will serve as input to the counter:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看另一个示例，我们将处理基本的文件操作。在这里，我们将提供一个包含句子的文本文件，并将此文件作为输入提供给计数器。以下截图显示了包含一些文本的文本文件，这些文本将作为计数器的输入：
- en: '![](img/image8-1.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片8-1](img/image8-1.jpg)'
- en: 'Now, let''s look at the code for passing the text file as the input to the
    `Counter`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看将文本文件作为输入传递给 `Counter` 的代码：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding program gives the frequency of all the characters present in
    the text file. We will use the `open()` function to open the file in `read` mode
    and `file_txt` variable serves as handle to this file handling operation. We will
    use the for loop and update our counter with inputs from the file one by one.
    The outcome is shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的程序给出了文本文件中所有字符的频率。我们将使用 `open()` 函数以 `read` 模式打开文件，`file_txt` 变量作为此文件处理操作的句柄。我们将使用
    for 循环，并逐个从文件中更新我们的计数器。结果如下面的截图所示：
- en: '![](img/image8-3.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image8-3.jpg)'
- en: There could be a scenario where you might require to choose the first five letters
    of higher frequency. Here you can achieve the desired outcome using the `most_common()`
    method.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在一种情况，你可能需要选择频率较高的前五个字母。你可以使用 `most_common()` 方法来实现所需的输出。
- en: '**Syntax**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**'
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s take a look at the example for the preceding scenario:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看前面场景的例子：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We have modified our example here and now we are trying to retrieve the first
    `5` letters of higher frequency. Here we have simply made use of the `most_common()`
    method of `Counter`. The outcome is shown in the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里修改了示例，现在我们正在尝试检索频率较高的前 `5` 个字母。我们简单地使用了 `Counter` 的 `most_common()` 方法。结果如下面的截图所示：
- en: '![](img/image9-4.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image9-4.jpg)'
- en: Operations of Python collection counter
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python集合计数器的操作
- en: 'In Python collection counter, you can apply the sets operation such as addition,
    subtraction, union, and intersection. Let''s take one example to illustrate the
    set operations:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python集合计数器中，你可以应用集合操作，如加法、减法、并集和交集。让我们通过一个例子来说明集合操作：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, in the preceding example, we are performing set operations on two counters.
    We have done addition, subtraction, union, and intersection on both the sets.
    The outcome is shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们正在对两个计数器执行集合操作。我们在两个集合上执行了加法、减法、并集和交集。结果如下面的截图所示：
- en: '![](img/image10-4.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image10-4.jpg)'
- en: Deque
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Deque
- en: 'A Deque double-ended queue. It can be visualized similar to a hollow tube or
    pipe, which is open at the both ends. Deques allows addition and removal of elements
    from either ends. It will be more clear with examples:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Deque（双端队列）。它可以被想象成类似空心管或管道，两端都是开放的。Deque 允许从两端添加和移除元素。以下示例将使问题更加清晰：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here we are providing input to deque `''India''` and we are printing the left-hand
    side and right-hand side elements of deque using the index and then we are removing
    a character `''a''` from the right-hand side of the deque using `remove()`. The
    output will look something like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们向deque `'India'` 提供输入，并使用索引打印deque的左侧和右侧元素，然后我们使用 `remove()` 从deque的右侧移除字符
    `'a'`。输出将类似于以下内容：
- en: '![](img/image11-5.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image11-5.jpg)'
- en: The `len()` function gives the length of the deque.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`len()` 函数返回deque的长度。'
- en: Populating deque
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 填充deque
- en: 'As we have already read that deque is a double-ended queue, hence it means
    elements can be added from either side or the deque can be populated from either
    side. In order to add elements or populate the deque, we have four functions: `extend()`,
    `append()`, `extendleft()`, and `appendleft()`. Let''s take an example to illustrate
    how we can populate or add elements to both sides of the deque:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所读到的，deque 是一个双端队列，这意味着元素可以从两端添加，或者deque可以从两端填充。为了添加元素或填充deque，我们有四个函数：`extend()`、`append()`、`extendleft()`
    和 `appendleft()`。让我们通过一个例子来说明我们如何填充或向deque的两端添加元素：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, in this case, we are providing `"Google"` as input to the deque. We then
    extend the list by passing `''raj''` as the input and it is extended to the right-hand
    side of the deque. We append another input to the right-hand side of the deque.
    In order to add elements to the left, we use `extendleft()` and `appendleft()`.
    The output of the program will clear the doubts as shown:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个案例中，我们将 `"Google"` 作为输入传递给deque。然后我们通过传递 `'raj'` 作为输入来扩展列表，并将其扩展到deque的右侧。我们向deque的右侧追加另一个输入。为了向左侧添加元素，我们使用
    `extendleft()` 和 `appendleft()`。程序的输出将像以下内容一样消除疑虑：
- en: '![](img/image12-3.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image12-3.jpg)'
- en: The functions `extend()` and `append()` both add elements to any collection.
    The only difference is that `extend()` adds each element to the collection one
    by one, while `append()` considers all the elements as one and appends all at
    the end of the collection. For example, `extend(['Dunkirk','Calais'])` adds two
    elements `'Dunkirk'` and `'Calais'` one by one to the collection. While `append``(['Dunkirk','Calais'])`
    considers both of them as one element and adds to the end of the collection.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `extend()` 和 `append()` 都向任何集合中添加元素。唯一的区别是 `extend()` 逐个将元素添加到集合中，而 `append()`
    将所有元素视为一个整体，并将它们添加到集合的末尾。例如，`extend(['Dunkirk','Calais'])` 将两个元素 `'Dunkirk'` 和
    `'Calais'` 逐个添加到集合中。而 `append(['Dunkirk','Calais'])` 将它们视为一个元素，并将其添加到集合的末尾。
- en: The `extendleft()` function iterates over its input and performs the equivalent
    of an `appendleft()` for each item. The final outcome is that the deque contains
    the input sequence in reverse order.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`extendleft()` 函数遍历其输入，并对每个项目执行 `appendleft()` 的等效操作。最终结果是双端队列包含输入序列的逆序。'
- en: Deque consumption
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 双端队列消费
- en: 'Deque can be consumed from either both ends or one end. For consuming deque
    elements or retrieval of elements, we use two functions: `pop()` and `popleft()`.
    It will be more clear with an example:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 双端队列可以从两端或一端消费。对于消费双端队列元素或检索元素，我们使用两个函数：`pop()` 和 `popleft()`。以下示例将使其更加清晰：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here we use `pop` to remove the elements one at a time from right end of the
    deque. In this case, char `b` is removed from the right end of the deque. The
    `popleft()` function removes element from the left end of the deque. Here, `popleft()`
    removed char `a` from the left end of the deque as shown:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `pop` 来逐个从双端队列的右端移除元素。在这种情况下，字符 `b` 被从双端队列的右端移除。`popleft()` 函数从双端队列的左端移除元素。在这里，`popleft()`
    从双端队列的左端移除了字符 `a`，如下所示：
- en: '![](img/image13-2.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image13-2.jpg)'
- en: Deque rotation
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 双端队列旋转
- en: 'Deque rotation allows rotation of items on either side. For right-side rotation,
    the notation is `(+n)` and for left-side rotation, the notation used is `(-n)`,
    where n is the number of rotations:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 双端队列旋转允许对任意一端的元素进行旋转。对于右侧旋转，表示法为 `(+n)`，而对于左侧旋转，使用的表示法是 `(-n)`，其中 n 是旋转的次数：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this case, using the `xrange()` function we generate a list of `5` numbers,
    which will serve as input to our deque. We rotate the deque on the right side
    and then on the left side. The results can be seen here:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用 `xrange()` 函数我们生成一个包含 `5` 个数字的列表，这些数字将作为我们双端队列的输入。我们首先将双端队列向右旋转，然后向左旋转。结果如下所示：
- en: '![](img/image14-2.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image14-2.jpg)'
- en: From the output, we can observe that in the right rotation, items are shifted
    to the right direction. In the left rotation, the items are shifted to the left
    direction.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中，我们可以观察到在右侧旋转中，项目向右移动。在左侧旋转中，项目向左移动。
- en: Ordered dictionary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有序字典
- en: 'The `OrderedDict` is a subclass of the dictionary and it remembers the order
    in which the elements are added:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderedDict` 是字典的子类，它记得元素添加的顺序：'
- en: '**Syntax**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**'
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s look at the comparison between dictionary and ordered dictionary:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看字典和有序字典之间的比较：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here, we create a normal dictionary and an ordered dictionary. Both the outputs
    are shown here:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个普通字典和一个有序字典。两个输出都显示在这里：
- en: '![](img/image15-3.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image15-3.jpg)'
- en: As we could see, the ordered dictionary has retained the order in which the
    elements were added.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，有序字典保留了元素添加的顺序。
- en: Sorting of ordered dictionary based upon keys
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据键对有序字典进行排序
- en: 'We can sort the ordered dictionary using the `sorted()` function:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `sorted()` 函数对有序字典进行排序：
- en: '**Syntax**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**'
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s take an example to understand the `sorted()` function. For a refresher
    on `sorted()` function, you can revisit [Chapter 4](lrn-py-7d_ch04.html), *Lists*:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来理解 `sorted()` 函数。如果您想复习 `sorted()` 函数，可以回顾[第4章](lrn-py-7d_ch04.html)，*列表*：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here we create an ordered dictionary `d1` and then sort it using the `sorted()`
    function. The following output will make it more clear:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建一个有序字典 `d1`，然后使用 `sorted()` 函数对其进行排序。以下输出将使其更加清晰：
- en: '![](img/image16-2.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image16-2.jpg)'
- en: By default, the dictionary is sorted according to keys.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，字典是根据键进行排序的。
- en: Sorting of ordered dictionary based upon values
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据值对有序字典进行排序
- en: 'We can also sort the ordered dictionary based upon values:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以根据值对有序字典进行排序：
- en: '**Syntax**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**'
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, the lambda function changes the key to its value. As ordered, the dictionary
    returns the `(key, value)` pair. The lambda function makes `key = value`, thus
    the ordered dictionary will be sorted by its value. Let''s take an example to
    understand the sorting of the ordered dictionary based upon values:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，lambda 函数将键更改为其值。按照顺序，字典返回 `(key, value)` 对。lambda 函数使 `key = value`，因此有序字典将按其值排序。让我们通过一个示例来理解有序字典的排序：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As you can clearly see from the preceding example, the `lambda()` function
    converts `key` to `value` and we can see the output as shown here:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的示例中，你可以清楚地看到，`lambda()` 函数将 `key` 转换为 `value`，我们可以看到如下的输出：
- en: '![](img/image17-2.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image17-2.jpg)'
- en: The lambda function is explained in the special function section.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: lambda 函数在特殊函数部分有解释。
- en: Default dictionary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认字典
- en: So far we have learned about regular dictionary and ordered dictionary. In this
    section, we will learn a special type of dictionary called default dictionary,
    which is provided by the `defaultdict` module of collections. A `defaultdict`
    works exactly the way a normal `dict` does, but it is initialized with a callable
    function called `default_factory()` that takes no arguments and provides a default
    value for a nonexistent key.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了常规字典和有序字典。在本节中，我们将学习一种特殊类型的字典，称为默认字典，它由 `collections` 模块的 `defaultdict`
    提供。`defaultdict` 的工作方式与正常的 `dict` 完全一样，但它初始化为一个不带参数的可调用函数 `default_factory()`，该函数为不存在的键提供默认值。
- en: '**Syntax**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**'
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We will try to understand with two examples:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过两个示例来尝试理解：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In this case, our function or function `func` acts as a `default_factory` function.
    We have assigned `game["A"]= "Football"`, where  `"A"` is the key. If key is new
    (not found in the dictionary `"game"`), then `defaultdict` does not give an error;
    instead, it returns the default value, which is returned by the `default_factory()`
    function. So, for the new key `"C"`, the default value is `"Cricket"`. This will
    be more clear with the mentioned output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们的函数或 `func` 函数充当 `default_factory` 函数。我们已将 `game["A"]= "Football"`，其中
    `"A"` 是键。如果键是新的（不在 `"game"` 字典中），则 `defaultdict` 不会报错；相反，它返回由 `default_factory()`
    函数返回的默认值。因此，对于新的键 `"C"`，默认值是 `"Cricket"`。这将在下面的输出中更加清晰：
- en: '![](img/image18-1.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image18-1.jpg)'
- en: 'The preceding task can be achieved by following the lambda function. Let''s
    understand with an example:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下 lambda 函数完成前面的任务。让我们通过一个示例来理解：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here, we just used the lambda function, which initializes the default value
    of `"Cricket"` if any new key is encountered:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是使用了 lambda 函数，它初始化了 `"Cricket"` 的默认值，如果遇到任何新的键：
- en: '![](img/image19-1.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image19-1.jpg)'
- en: 'Now, next we will use int as `default_factory` function. The default value
    for int is `0`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，接下来我们将使用 `int` 作为 `default_factory` 函数。`int` 的默认值是 `0`：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here, we just initialized the int value for any new key encountered. For `game["C"]`,
    the output returned is `0`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是为遇到的任何新键初始化了整数值。对于 `game["C"]`，返回的输出是 `0`：
- en: '![](img/image20-1.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image20-1.jpg)'
- en: Sample problem solved by the default dictionary - scenario one
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用默认字典解决的示例问题 - 第一个场景
- en: 'Let''s consider a simple problem solved by default dictionary; here we would
    like to calculate the frequency of elements present in the list. Let''s examine
    the scenario with an example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个由默认字典解决的简单问题；这里我们想要计算列表中存在的元素的频率。让我们通过一个示例来检查这个场景：
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As the default value is initialized with `0` we have incremented it with `1`,
    and, in this way, we can calculate the frequency of elements present in the list:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 由于默认值初始化为 `0`，我们将其增加 `1`，这样我们就可以计算列表中存在的元素的频率：
- en: '![](img/image21-1.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image21-1.jpg)'
- en: Sample problem solved by the default dictionary - scenario two
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用默认字典解决的示例问题 - 第二个场景
- en: 'Let''s analyze a scenario where we have a list of tuple pairs. The list `tuple_list_county
    = [(''US'', ''Visconsin''), (''Germany'', ''Bavaria''), (''UK'', ''Bradfordshire''),
    (''India'', ''punjab''), (''China'', ''Shandong''), (''Canada'', ''Nova Scotia'')]`
    is the pair of `(Country, county)`. So our aim is to make our county or state
    as `key` and `country` as the list of values. Let''s do it with the following
    code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一个场景，其中我们有一个元组对的列表。列表 `tuple_list_county = [('US', 'Wisconsin'), ('Germany',
    'Bavaria'), ('UK', 'Bradfordshire'), ('India', 'Punjab'), ('China', 'Shandong'),
    ('Canada', 'Nova Scotia')]` 是 `(Country, county)` 的对。因此，我们的目标是使我们的县或州作为 `key`，而国家作为值的列表。让我们用以下代码来实现：
- en: '[PRE21]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here, the default value is the list itself. The first value of the tuple is
    fixed as `key` and the second value is appended:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，默认值是列表本身。元组的第一个值固定为 `key`，第二个值被附加：
- en: '![](img/image22.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image22.jpg)'
- en: Named tuple
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名元组
- en: Python facilitates you to create your own data type. In the Python collection, `namedtuple`
    gives you a special feature to create your own data type. In the C language, you
    might have used struct to create your own data type. When you want to create a
    new data type, you would like to explore the answers to some questions as what
    should be the name of the new data type? What are the fields of the new data type?
    Let's discuss this with a syntax and an example of `namedtuple.`
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Python 允许你创建自己的数据类型。在 Python 的集合中，`namedtuple` 提供了一个特殊功能来创建自己的数据类型。在 C 语言中，你可能使用
    struct 来创建自己的数据类型。当你想要创建一个新的数据类型时，你可能想要探索一些问题的答案，比如新数据类型的名字应该是什么？新数据类型的字段有哪些？让我们通过
    `namedtuple` 的语法和示例来讨论这个问题。
- en: '**Syntax**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**'
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s try to understand the syntax of `namedtuple`. In the preceding syntax:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试理解 `namedtuple` 的语法。在先前的语法中：
- en: The `typename` defines the name of the new data type
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`typename` 定义了新数据类型的名字'
- en: The `field_names` can be a sequence of strings such as `['x', 'y']` or string
    in which values are whitespaced or `,` separated
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`field_names` 可以是一个字符串序列，例如 `[''x'', ''y'']`，或者是一个由空格或逗号分隔的字符串'
- en: If verbose is `False`, then the class definition would not be printed, it is
    a good idea to keep it `False`
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `verbose` 是 `False`，则不会打印类定义，将其保持为 `False` 是一个好主意
- en: If rename is `False`, then the invalid field names are automatically replaced
    with positional names, for example, `'def, age, empid'` is converted to `'_0 ,
    age, empid'` because `def` is a keyword
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `rename` 是 `False`，则无效的字段名将自动替换为位置名，例如，`'def, age, empid'` 转换为 `'_0, age,
    empid'`，因为 `def` 是一个关键字
- en: 'Let''s discuss with an example:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来讨论：
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here, we create a `namedtuple emp`, which will contain the name of the employee,
    his/her age and the employee ID. We print out the complete record along with `name`,
    `empid`, and what type of record `namedtuple` contains. In order to access the
    values of `namedtuple`, we use the `.` operator along with the name of the tuple.
    As the `namedtuple` contains the record type as `emp`, the outcome displays the
    same as shown here:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个 `namedtuple emp`，它将包含员工的姓名、年龄和员工 ID。我们打印出完整的记录，包括 `name`、`empid`
    和 `namedtuple` 包含的记录类型。为了访问 `namedtuple` 的值，我们使用点 (`.`) 操作符和元组名。由于 `namedtuple`
    包含的记录类型为 `emp`，所以结果显示与这里相同：
- en: '![](img/image23-1.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image23-1.jpg)'
- en: Adding values and creating a dictionary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加值并创建字典
- en: 'In the next example, we will understand how to add list values into `namedtuple`
    and how to make dictionary from `namedtuple`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将了解如何将列表值添加到 `namedtuple` 中，以及如何从 `namedtuple` 中创建字典：
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here, by using  `_make`, we can add a list into a `namedtuple` and by using
    `_asdict` we can create dictionary of `namedtuple`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，通过使用 `_make`，我们可以将列表添加到 `namedtuple` 中，通过使用 `_asdict`，我们可以创建 `namedtuple`
    的字典：
- en: '![](img/image24-1.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image24-1.jpg)'
- en: 'Now, consider a scenario where you would like to replace a value from `namedtuple.`
    Like tuple, the `namedtuple` is also immutable. But you can use the  `_replace`
    function to replace the value from `namedtuple`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑一个场景，你可能想要从 `namedtuple` 中替换一个值。像元组一样，`namedtuple` 也是不可变的。但你可以使用 `replace`
    函数来替换 `namedtuple` 中的值：
- en: '[PRE25]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here, we are simply using the dot (`.`) operator followed by the `_replace()`
    function and providing the new value as an input to the `_replace()` function.
    In this way, we can replace the existing value in a `namedtuple`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是使用点 (`.`) 操作符后跟 `_replace()` 函数，并将新值作为输入提供给 `_replace()` 函数。这样，我们就可以替换
    `namedtuple` 中的现有值：
- en: '![](img/image25-1.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image25-1.jpg)'
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In collections, we learned about collections, and asked what are collections?
    What is their importance in any programming language? We learned about different
    types of collections, which are available in the Python programming language.
    We learned about module collection and its various members, which we import in
    our code. We also learned about counter, deque, ordered dictonary, default dictionary,
    and finally `namedtuple`. In the next chapter, we will take some object-oriented
    programming (OOPs) concepts and we will see how Python supports the OOPs concepts.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在集合部分，我们学习了集合的概念，并询问了集合在任意编程语言中的重要性是什么？我们了解了Python编程语言中可用的不同类型集合。我们还学习了模块集合及其各种成员，这些成员我们在代码中导入。我们还学习了计数器（counter）、双端队列（deque）、有序字典（ordered
    dictionary）、默认字典（default dictionary），以及最后的命名元组（namedtuple）。在下一章中，我们将探讨一些面向对象编程（OOPs）的概念，并了解Python如何支持这些OOPs概念。
