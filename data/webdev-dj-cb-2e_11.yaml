- en: Chapter 11. Testing and Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 测试和部署
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Testing pages with Selenium
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Selenium测试页面
- en: Testing views with mock
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用mock测试视图
- en: Testing API created using Django REST framework
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试使用Django REST框架创建的API
- en: Releasing a reusable Django app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布可重用Django应用
- en: Getting detailed error reporting via e-mail
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过电子邮件获取详细的错误报告
- en: Deploying on Apache with mod_wsgi
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Apache上使用mod_wsgi部署
- en: Setting up cron jobs for regular tasks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置cron作业以执行常规任务
- en: Creating and using the Fabric deployment script
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和使用Fabric部署脚本
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: At this point, I expect you to have one or more Django projects or reusable
    apps developed and ready to show to the public. For the concluding steps of development
    cycle, we will take a look at how to test your project, distribute reusable apps
    to others, and publish your website on a remote server. Stay tuned for the final
    bits and pieces!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我期望您已经开发了一个或多个Django项目或可重用应用，并准备好向公众展示。对于开发周期的最后一步，我们将探讨如何测试您的项目，将可重用应用分发给他人，并在远程服务器上发布您的网站。请继续关注最终的部分！
- en: Testing pages with Selenium
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Selenium测试页面
- en: 'Django provides a possibility to write test suites for your website. Test suites
    automatically check your website or its components to see whether everything is
    working correctly. When you modify your code, you can run tests to check whether
    the changes didn''t affect the application''s behavior in a wrong way. The world
    of automated software testing can be divided into five levels: unit testing, integration
    testing, component interface testing, system testing, and operational acceptance
    testing. Acceptance tests check the business logic to know whether the project
    works the way it is supposed to. In this recipe, you will learn how to write acceptance
    tests with Selenium, which allows you to simulate activities such as filling in
    forms or clicking on specific DOM elements in a browser.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Django为您的网站提供了编写测试套件的可能性。测试套件会自动检查您的网站或其组件，以查看是否一切正常工作。当您修改代码时，您可以运行测试来检查更改是否没有以错误的方式影响应用程序的行为。自动化软件测试的世界可以分为五个级别：单元测试、集成测试、组件接口测试、系统测试和操作验收测试。验收测试检查业务逻辑，以了解项目是否按预期工作。在本食谱中，您将学习如何使用Selenium编写验收测试，这允许您在浏览器中模拟填写表单或点击特定DOM元素等活动。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `locations` and `likes` apps from the *Implementing the
    Like widget* recipe in [Chapter 4](ch04.html "Chapter 4. Templates and JavaScript"),
    *Templates and JavaScript*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从[第4章](ch04.html "第4章 模板和JavaScript")中*实现点赞小部件*食谱的`locations`和`likes`应用开始，*模板和JavaScript*。
- en: If you don't have it yet, install the Firefox browser from [http://getfirefox.com](http://getfirefox.com).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有，请从[http://getfirefox.com](http://getfirefox.com)安装Firefox浏览器。
- en: 'Then, install Selenium in your virtual environment, as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按照以下步骤在您的虚拟环境中安装Selenium：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will test the Ajax-based *liking* functionality with Selenium by performing
    the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下步骤使用Selenium测试基于Ajax的*点赞*功能：
- en: 'Create the `tests.py` file in your `locations` app with the following content:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`locations`应用中创建名为`tests.py`的文件，并包含以下内容：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Tests will be running in the `DEBUG = False` mode; therefore, you have to ensure
    that all the static files are accessible in your development environment. Make
    sure that you add the following lines to your project''s URL configuration:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试将在`DEBUG = False`模式下运行；因此，您必须确保所有静态文件在您的开发环境中都是可访问的。请确保您将以下行添加到项目URL配置中：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Collect static files to make them accessible by the test server, as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集静态文件，以便测试服务器可以访问，如下所示：
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the tests for the `locations` app, as shown in the following:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下所示运行`locations`应用的测试：
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we run these tests, the Firefox browser will open and go to the administration
    login page at `http://localhost:8081/admin/login/?next=/locations/hkw/`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这些测试时，Firefox浏览器将打开并转到`http://localhost:8081/admin/login/?next=/locations/hkw/`的登录管理页面。
- en: 'Then, the username and password fields will get filled in with `test-admin`
    and you will get redirected to the detail page of the `Haus der Kulturen der Welt`
    location, as follows: `http://localhost:8081/locations/hkw/`.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，用户名和密码字段将填写为`test-admin`，您将被重定向到`Haus der Kulturen der Welt`位置的详细页面，如下所示：`http://localhost:8081/locations/hkw/`。
- en: There you will see the **Like** button clicked twice, causing liking and unliking
    actions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在那里，您将看到**点赞**按钮被点击两次，导致点赞和取消点赞操作。
- en: Let's see how this works in the test suite. We define a class extending `LiveServerTestCase`.
    This creates a test suite that will run a local server under the `8081` port.
    The `setUpClass()`class method will be executed at the beginning of all the tests
    and the `tearDownClass()`class method will be executed after the tests have been
    run. In the middle, the testing will execute all the methods of the suite whose
    names start with `test`. For each passed test, you will see a dot (`.`) in the
    command-line tool, for each failed test there will be the letter `F`, and for
    each error in the tests you will see the letter `E`. At the end, you will see
    hints about the failed and erroneous tests. As we currently have only one test
    in the suite for the `locations` app, you will only see one dot there.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个测试套件是如何工作的。我们定义一个继承自`LiveServerTestCase`的类。这创建了一个测试套件，将在`8081`端口下运行本地服务器。`setUpClass()`类方法将在所有测试开始时执行，`tearDownClass()`类方法将在测试运行后执行。在中间，测试将执行套件中以`test`开头名称的所有方法。对于每个通过测试，你将在命令行工具中看到一个点（`.`），对于每个失败的测试，将有一个字母`F`，对于测试中的每个错误，你将看到一个字母`E`。最后，你将看到有关失败和错误测试的提示。由于我们目前在`locations`应用的套件中只有一个测试，所以你将只在那里看到一个点。
- en: When we start testing, a new test database is created. In `setUpClass()`, we
    create a browser object, one location, and one super user. Then, the `test_login_and_like()`
    method is executed, which opens the administration login page, finds the **username**
    field, types in the administrator's username, finds the **password** field, types
    in administrator's password, finds the **submit** button, and clicks on it. Then,
    it waits maximal ten seconds until a DOM element with the`.like-button` CSS class
    can be found on the page.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始测试时，会创建一个新的测试数据库。在`setUpClass()`中，我们创建一个浏览器对象、一个位置和一个超级用户。然后执行`test_login_and_like()`方法，该方法打开管理登录页面，找到**用户名**字段，输入管理员的用户名，找到**密码**字段，输入管理员的密码，找到**提交**按钮，并点击它。然后，它最多等待十秒钟，直到页面上可以找到具有`.like-button`
    CSS类的DOM元素。
- en: 'As you might remember from the *Implementing the Like widget* recipe in [Chapter
    4](ch04.html "Chapter 4. Templates and JavaScript"), *Templates and JavaScript*,
    our widget consists of two elements: a **Like** button and a badge showing the
    total number of likes. If a button is clicked, either your `Like` is added or
    removed from the database by an Ajax call. Moreover, the badge count is updated
    to reflect the number of likes in the database, as shown in the following image:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如你从[第4章](ch04.html "第4章。模板和JavaScript")中*实现点赞小部件*的配方中可能记得，我们的小部件由两个元素组成：一个**点赞**按钮和一个显示总点赞数的徽章。如果按钮被点击，你的`点赞`将通过Ajax调用添加或从数据库中移除。此外，徽章计数将更新以反映数据库中的点赞数，如图所示：
- en: '![How it works...](img/B04912_11_01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/B04912_11_01.jpg)'
- en: Further in the test, we check what is the initial state of the button is (whether
    it has the `.active` CSS class or not), check the initial number of likes, and
    simulate a click on the button. We wait maximal 10 seconds until the count in
    the badge changes. Then, we check whether the count in the badge matches the total
    likes for the location in the database. We will also check how the count in the
    badge has changed (increased or decreased). Lastly, we will simulate the click
    on the button again to switch back to the previous state.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试的进一步过程中，我们检查按钮的初始状态（是否有`.active` CSS类），检查初始的点赞数，并模拟点击按钮。我们最多等待10秒钟，直到徽章中的计数发生变化。然后，我们检查徽章中的计数是否与数据库中该位置的点赞总数匹配。我们还将检查徽章中的计数是如何变化的（增加或减少）。最后，我们将再次模拟点击按钮以切换回之前的状态。
- en: The `sleep()` functions are in the test just for you to be able to see the whole
    workflow. You can safely remove them in order to make the tests run faster.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`sleep()`函数仅在测试中用于让你能够看到整个工作流程。你可以安全地删除它们，以使测试运行更快。'
- en: Finally, the `tearDownClass()` method is called, which closes the browser and
    removes the location and the super user from the test database.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，调用`tearDownClass()`方法，该方法关闭浏览器并从测试数据库中删除位置和超级用户。
- en: See also
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Implementing the Like widget* recipe in [Chapter 4](ch04.html "Chapter 4. Templates
    and JavaScript"), *Templates and JavaScript*
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章。模板和JavaScript")中*实现点赞小部件*的配方，*模板和JavaScript*
- en: The *Testing views with mock* recipe
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用mock测试视图的*配方*
- en: The *Testing API created using Django REST Framework* recipe
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Django REST Framework创建的*测试API*配方
- en: Testing views with mock
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用mock测试视图
- en: 'In this recipe, we will take a look at how to write unit tests. Unit tests
    are those that check whether the functions or methods return correct results.
    We again take the `likes` app and write tests checking whether posting to the
    `json_set_like()` view returns `{"success"; false}` in the response for unauthenticated
    users and returns `{"action": "added", "count": 1, "obj": "Haus der Kulturen der
    Welt", "success": true}` for authenticated users. We will use the `Mock` objects
    to simulate the `HttpRequest` and `AnonymousUser` objects.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '在本配方中，我们将探讨如何编写单元测试。单元测试是检查函数或方法是否返回正确结果的那种测试。我们再次以`likes`应用为例，编写测试以检查向`json_set_like()`视图发送请求时，对于未认证用户返回`{"success":
    false}`，对于认证用户返回`{"action": "added", "count": 1, "obj": "Haus der Kulturen der
    Welt", "success": true}`。我们将使用`Mock`对象来模拟`HttpRequest`和`AnonymousUser`对象。'
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `locations` and `likes` apps from the *Implementing the
    Like widget* recipe in [Chapter 4](ch04.html "Chapter 4. Templates and JavaScript"),
    *Templates and JavaScript*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从*实现Like小部件*配方中的`locations`和`likes`应用开始，该配方位于[第4章](ch04.html "第4章。模板和JavaScript")，*模板和JavaScript*。
- en: 'Install the `mock` module in your virtual environment, as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的虚拟环境中安装`mock`模块，如下所示：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How to do it...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will test the *liking* action with mock by performing the following steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下步骤使用模拟来测试*点赞*动作：
- en: 'Create the `tests.py` file in your `likes` app with the following content:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`likes`应用中创建名为`tests.py`的文件，内容如下：
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the tests for the `likes` app, as follows:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式运行`likes`应用的测试：
- en: '[PRE7]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Just like in the previous recipe, when you run tests for the `likes` app, at
    first, a temporary test database is created. Then, the `setUpClass()` method is
    called. Later, the methods whose names start with `test` are executed, and finally
    the `tearDownClass()` method is called.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在前一个配方中一样，当你为`likes`应用运行测试时，首先创建一个临时测试数据库。然后调用`setUpClass()`方法。稍后，执行以`test`开头的方法，最后调用`tearDownClass()`方法。
- en: 'Unit tests inherit from the `SimpleTestCase` class. In `setUpClass()`, we create
    a location and a super user. Also, we find out the `ContentType` object for the
    `Location` model—we will need it for the view that sets or removes likes for different
    objects. As a reminder, the view looks similar to the following and returns the
    JSON string as a result:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试继承自`SimpleTestCase`类。在`setUpClass()`中，我们创建一个位置和一个超级用户。同时，我们找到`Location`模型的`ContentType`对象——我们将需要它在设置或删除不同对象的点赞视图中使用。作为提醒，视图看起来类似于以下内容，并返回JSON字符串作为结果：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `test_authenticated_json_set_like()` and `test_anonymous_json_set_like()`
    methods, we use the `Mock` objects. They are objects that have any attributes
    or methods. Each undefined attribute or method of a `Mock` object is another `Mock`
    object. Therefore, in the shell, you can try chaining attributes as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在`test_authenticated_json_set_like()`和`test_anonymous_json_set_like()`方法中，我们使用了`Mock`对象。它们是具有任何属性或方法的对象。`Mock`对象的每个未定义属性或方法都是另一个`Mock`对象。因此，在shell中，你可以尝试如下链式属性：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In our tests, we use the `Mock` objects to simulate the `HttpRequest` and `AnonymousUser`
    objects. For the authenticated user, we still need the real `User` object as the
    view needs the user's ID to save in the database for the `Like` object.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的测试中，我们使用`Mock`对象来模拟`HttpRequest`和`AnonymousUser`对象。对于认证用户，我们仍然需要真实的`User`对象，因为视图需要用户的ID来保存到数据库中的`Like`对象。
- en: 'Therefore, we call the `json_set_like()` function and see if the returned JSON
    response is correct: it returns `{"success": false}` in the response if the visitor
    is unauthenticated; and returns something like `{"action": "added", "count": 1,
    "obj": "Haus der Kulturen der Welt", "success": true}` for authenticated users.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '因此，我们调用`json_set_like()`函数，查看返回的JSON响应是否正确：如果访问者未认证，则响应返回`{"success": false}`；对于认证用户，返回类似`{"action":
    "added", "count": 1, "obj": "Haus der Kulturen der Welt", "success": true}`的内容。'
- en: In the end, the `tearDownClass()` class method is called that deletes the location
    and super user from the test database.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，调用`tearDownClass()`类方法，从测试数据库中删除位置和超级用户。
- en: See also
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Implementing the Like widget* recipe in [Chapter 4](ch04.html "Chapter 4. Templates
    and JavaScript"), *Templates and JavaScript*
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章。模板和JavaScript")的*实现Like小部件*配方中，*模板和JavaScript*的*实现Like小部件*配方
- en: The *Testing pages with Selenium* recipe
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Selenium测试页面*配方'
- en: The *Testing API created using Django REST Framework* recipe
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Django REST Framework创建的API测试*配方'
- en: Testing API created using Django REST framework
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试使用Django REST框架创建的API
- en: We already have an understanding about how to write operational acceptance and
    unit tests. In this recipe, we will go through component interface testing for
    the REST API that we created earlier in this book.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何编写操作验收和单元测试。在这个配方中，我们将对本书早期创建的 REST API 进行组件接口测试。
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you are not familiar with what REST API is and how to use it, you can learn
    about it at [http://www.restapitutorial.com/](http://www.restapitutorial.com/).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉 REST API 是什么以及如何使用它，你可以在 [http://www.restapitutorial.com/](http://www.restapitutorial.com/)
    上了解相关信息。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `bulletin_board` app from the *Using Django REST framework
    to create API* recipe in [Chapter 9](ch09.html "Chapter 9. Data Import and Export"),
    *Data Import and Export*.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从第 9 章 *数据导入和导出* 中的 *使用 Django REST 框架创建 API* 配方中的 `bulletin_board` 应用开始。
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To test REST API, perform the following steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试 REST API，请执行以下步骤：
- en: 'Create a `tests.py` file in your `bulletin_board` app, as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `bulletin_board` 应用中创建一个 `tests.py` 文件，如下所示：
- en: '[PRE10]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add a method to test the API call listing the bulletins as shown in the following:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个方法来测试如下所示列出公告的 API 调用：
- en: '[PRE11]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add a method to test the API call showing a single bulletin as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个方法来测试如下显示单个公告的 API 调用：
- en: '[PRE12]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add a method to test the API call creating a bulletin if the current user is
    authenticated, as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个方法来测试如果当前用户已认证，则创建公告的 API 调用，如下所示：
- en: '[PRE13]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add a method to test the API call trying to create a bulletin; however, failing
    as the current visitor is anonymous, as shown in the following:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个方法来测试尝试创建公告的 API 调用；然而，由于当前访客是匿名用户，操作失败，如下所示：
- en: '[PRE14]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add a method to test the API call changing a bulletin if the current user is
    authenticated, as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个方法来测试如果当前用户已认证，则更改公告的 API 调用，如下所示：
- en: '[PRE15]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add a method to test the API call trying to change a bulletin; however, failing
    as the current visitor is anonymous:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个方法来测试尝试更改公告的 API 调用；然而，由于当前访客是匿名用户，操作失败：
- en: '[PRE16]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add a method to test the API call deleting a bulletin if the current user is
    authenticated, as shown in the following:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个方法来测试如果当前用户已认证，则删除公告的 API 调用，如下所示：
- en: '[PRE17]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add a method to test the API call trying to delete a bulletin; however, failing
    as the current visitor is anonymous:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个方法来测试尝试删除公告的 API 调用；然而，由于当前访客是匿名用户，操作失败：
- en: '[PRE18]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the tests for the `bulletin_board` app, as follows:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下所示运行 `bulletin_board` 应用的测试：
- en: '[PRE19]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'REST API test suite extends the `APITestCase` class. Once again, we have the
    `setUpClass()` and `tearDownClass()` class methods that will be executed before
    and after the different tests. Also, the test suite has a `client` attribute of
    the `APIClient` type that can be used to simulate API calls. It has methods for
    all standard HTTP calls: `get()`, `post()`, `put()`, `patch()`, `delete()`, `head()`,
    and `options()`; whereas, in our tests, we are using the `GET`, `POST`, and `DELETE`
    requests. Also, `client` has methods to authenticate a user by the login credentials,
    token, or just the `User` object. In our tests, we are authenticating by the third
    way, just passing a user directly to the `force_authenticate()` method.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: REST API 测试套件扩展了 `APITestCase` 类。再次强调，我们有 `setUpClass()` 和 `tearDownClass()`
    类方法，这些方法将在不同的测试之前和之后执行。此外，测试套件有一个 `client` 属性，它是 `APIClient` 类型的，可以用来模拟 API 调用。它有所有标准
    HTTP 调用的方法：`get()`、`post()`、`put()`、`patch()`、`delete()`、`head()` 和 `options()`；而在我们的测试中，我们使用的是
    `GET`、`POST` 和 `DELETE` 请求。此外，`client` 有方法通过登录凭证、令牌或直接传递 `User` 对象来认证用户。在我们的测试中，我们通过第三种方式认证，即直接将用户传递给
    `force_authenticate()` 方法。
- en: The rest of the code is self-explanatory.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的其余部分是自我解释的。
- en: See also
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using Django REST framework to create API* recipe in [Chapter 9](ch09.html
    "Chapter 9. Data Import and Export"), *Data Import and Export*
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 9 章 *数据导入和导出* 中的 *使用 Django REST 框架创建 API* 配方 [Chapter 9](ch09.html "第 9
    章。数据导入和导出")，*数据导入和导出*
- en: The *Testing pages with Selenium* recipe
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Selenium 测试页面* 的配方'
- en: The *Testing views with mock* recipe
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用模拟测试视图* 的配方'
- en: Releasing a reusable Django app
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布可重用 Django 应用
- en: 'Django documentation has a tutorial about how to package your reusable apps
    so that they can be installed later with `pip` in any virtual environment:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Django 文档有一个教程，介绍如何打包你的可重用应用，以便可以在任何虚拟环境中使用 `pip` 安装：
- en: '[https://docs.djangoproject.com/en/1.8/intro/reusable-apps/](https://docs.djangoproject.com/en/1.8/intro/reusable-apps/)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.djangoproject.com/en/1.8/intro/reusable-apps/](https://docs.djangoproject.com/en/1.8/intro/reusable-apps/)'
- en: However, there is an even better way to package and release a reusable Django
    app using the **Cookiecutter** tool, which creates templates for different coding
    projects such as new Django CMS website, Flask website, or jQuery plugin. One
    of the available project templates is `cookiecutter-djangopackage`. In this recipe,
    you will learn how to use it to distribute the reusable `likes` app.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有更好的方法来使用 **Cookiecutter** 工具打包和发布可重用的 Django 应用，它为不同的编码项目创建模板，例如新的 Django
    CMS 网站、Flask 网站，或 jQuery 插件。可用的项目模板之一是 `cookiecutter-djangopackage`。在这个食谱中，您将学习如何使用它来分发可重用的
    `likes` 应用。
- en: Getting ready
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Install `Cookiecutter` in your virtual environment:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的虚拟环境中安装 `Cookiecutter`：
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To release your `likes` app, follow these steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要发布您的 `likes` 应用，请按照以下步骤操作：
- en: 'Start a new Django app project, as follows:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤开始一个新的 Django 应用项目：
- en: '[PRE21]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Answer the questions to create the app template:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回答问题以创建应用模板：
- en: '[PRE22]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This will create a file structure, as shown in the following image:![How to
    do it...](img/B04912_11_02.jpg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将创建一个文件结构，如下面的图像所示：![如何操作...](img/B04912_11_02.jpg)
- en: Copy the files of the `likes` app from a Django project, where you are using
    it, to the `django-likes/likes` directory.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `likes` 应用的文件从您正在使用的 Django 项目中复制到 `django-likes/likes` 目录。
- en: Add the reusable app project to the Git repository under GitHub.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将可重用应用项目添加到 GitHub 下的 Git 仓库。
- en: Explore different files and complete the license, README, documentation, configuration
    and other files.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 探索不同的文件并完成许可、README、文档、配置和其他文件。
- en: 'Make sure that the app passes the tests:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保应用通过测试：
- en: '[PRE23]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If your package is closed source, create a shareable release as a ZIP archive:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的包是封闭源代码，创建一个可共享的 ZIP 存档作为发布：
- en: '[PRE24]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This will create a `django-likes/dist/django-likes-0.1.0.tar.gz` file that
    can be installed or uninstalled with pip, as follows:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建一个 `django-likes/dist/django-likes-0.1.0.tar.gz` 文件，可以使用 pip 安装或卸载，如下所示：
- en: '[PRE25]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If your package is open source, register and publish your app on **Python Package
    Index** (**PyPI**):'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的包是开源的，请在 **Python 包索引**（**PyPI**）上注册并发布您的应用。
- en: '[PRE26]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Also, to spread the word, add your app to Django packages by submitting a form
    at [https://www.djangopackages.com/packages/add/](https://www.djangopackages.com/packages/add/).
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，为了传播信息，通过在[https://www.djangopackages.com/packages/add/](https://www.djangopackages.com/packages/add/)提交表格，将您的应用添加到
    Django 包中。
- en: How it works...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Cookiecutter fills in the entered requested data in different parts of the Django
    app project template. As a result, you get the `setup.py` file ready for distribution
    to Python Package Index, Sphinx documentation, BSD as the default license, universal
    text editor configuration for the project, static files and templates included
    in your app, and other goodies.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Cookiecutter 填充了 Django 应用项目模板的不同部分中输入的请求数据。因此，您将获得一个准备分发的 `setup.py` 文件，用于
    Python 包索引、Sphinx 文档、BSD 作为默认许可、项目的通用文本编辑配置、包含在您的应用中的静态文件和模板，以及其他好东西。
- en: See also
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考也
- en: The *Creating a project file structure* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Django 1.8"), *Getting Started with Django 1.8*
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。使用 Django 1.8 入门")的*创建项目文件结构*食谱中，*使用 Django 1.8 入门*
- en: The *Handling project dependencies with pip* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting Started with Django 1.8"), *Getting Started with Django 1.8*
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。使用 Django 1.8 入门")的*使用 pip 处理项目依赖*食谱中，*使用 Django 1.8 入门*
- en: The *Implementing the Like widget* recipe in [Chapter 4](ch04.html "Chapter 4. Templates
    and JavaScript"), *Templates and JavaScript*
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章。模板和JavaScript")的*实现点赞小部件*食谱中，*模板和JavaScript*中
- en: Getting detailed error reporting via e-mail
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过电子邮件获取详细的错误报告
- en: To perform system logging, Django uses Python's built-in logging module. The
    default Django configuration seems to be quite complex. In this recipe, you will
    learn how to tweak it in order to send error e-mails with complete HTML, similar
    to what is provided by Django in the DEBUG mode when an error happens.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行系统日志，Django 使用 Python 内置的日志模块。默认的 Django 配置似乎相当复杂。在这个食谱中，您将学习如何调整它，以便在发生错误时发送包含完整
    HTML 的错误电子邮件，类似于 Django 在 DEBUG 模式下提供的。
- en: Getting ready
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Locate the Django project in your virtual environment.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的虚拟环境中定位 Django 项目。
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following procedure will help you send detailed e-mails about errors:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您发送关于错误的详细电子邮件：
- en: Open the `myproject_env/lib/python2.7/site-packages/django/utils/log.py` file
    in a text editor and copy the `DEFAULT_LOGGING` dictionary to your project's settings
    as the `LOGGING` dictionary.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`myproject_env/lib/python2.7/site-packages/django/utils/log.py`文件，并将`DEFAULT_LOGGING`字典复制到您的项目设置中的`LOGGING`字典。
- en: 'Add the `include_html` setting to the `mail_admins` handler, as follows:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`include_html`设置添加到`mail_admins`处理器中，如下所示：
- en: '[PRE27]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Logging configuration consists of four parts: loggers, handlers, filters, and
    formatters. The following is how they can be described:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 日志配置包括四个部分：记录器、处理器、过滤器和格式化器。以下是如何描述它们：
- en: 'Loggers are entry points in the logging system. Each logger can have a log
    level: `DEBUG`, `INFO`, `WARNING`, `ERROR`, or `CRITICAL`. When a message is written
    to the logger, the log level of the message is compared with the logger''s level.
    If it meets or exceeds the log level of the logger, it will be further processed
    by a handler. Otherwise, the message will be ignored.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录器是日志系统中的入口点。每个记录器都可以有一个日志级别：`DEBUG`、`INFO`、`WARNING`、`ERROR`或`CRITICAL`。当消息写入记录器时，消息的日志级别将与记录器的级别进行比较。如果它符合或超过记录器的日志级别，它将被进一步处理。否则，消息将被忽略。
- en: Handlers are engines that define what happens to each message in the logger.
    They can be written to a console, sent by an e-mail to the administrator, saved
    to a log file, sent to the Sentry error logging service, and so on. In our case,
    we set the `include_html` parameter for the `mail_admins` handler as we want the
    full HTML with traceback and local variables for the error messages that happen
    in our Django project.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理器是定义记录器中每个消息如何处理的引擎。它们可以写入控制台、通过电子邮件发送给管理员、保存到日志文件、发送到Sentry错误日志服务等等。在我们的案例中，我们为`mail_admins`处理器设置了`include_html`参数，因为我们希望包含完整的HTML、跟踪信息和局部变量，以便于我们Django项目中发生的错误消息。
- en: Filters provide additional control over the messages that are passed from the
    loggers to handlers. For example, in our case, the e-mails will be sent only when
    the DEBUG mode is set to `False`.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤器提供了对从记录器传递到处理器的消息的额外控制。例如，在我们的案例中，只有当DEBUG模式设置为`False`时，才会发送电子邮件。
- en: Formatters are used to define how to render a log message as a string. They
    are not used in this example; however, for more information about logging, you
    can refer to the official documentation at [https://docs.djangoproject.com/en/1.8/topics/logging/](https://docs.djangoproject.com/en/1.8/topics/logging/).
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化器用于定义如何将日志消息渲染为字符串。在本例中未使用；然而，有关日志的更多信息，您可以参考官方文档[https://docs.djangoproject.com/en/1.8/topics/logging/](https://docs.djangoproject.com/en/1.8/topics/logging/)。
- en: See also
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Deploying on Apache with mod_wsgi* recipe
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用mod_wsgi在Apache上部署*教程'
- en: Deploying on Apache with mod_wsgi
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用mod_wsgi在Apache上部署
- en: There are many options as to how to deploy your Django project. In this recipe,
    I will guide you through the deployment of a Django project on a dedicated Linux
    server with Virtualmin.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何部署您的Django项目，有许多选择。在本教程中，我将指导您如何在配备Virtualmin的专用Linux服务器上部署Django项目。
- en: A dedicated server is a type of Internet hosting, where you lease the whole
    server that is not shared with anyone else. Virtualmin is a web-hosting control
    panel that allows you to manage virtual domains, mailboxes, databases, and entire
    servers without having deep knowledge of the command-line routines of the server
    administration.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 专用服务器是一种互联网托管类型，您租赁的是整个服务器，不会与其他人共享。Virtualmin是一个网络托管控制面板，允许您管理虚拟域名、邮箱、数据库和整个服务器，而无需深入了解服务器管理的命令行程序。
- en: To run the Django project, we will be using the Apache web server with the `mod_wsgi`
    module and a MySQL database.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行Django项目，我们将使用带有`mod_wsgi`模块的Apache网络服务器和MySQL数据库。
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure that you have Virtualmin installed on your dedicated Linux server.
    For instructions, refer to [http://www.virtualmin.com/download.html](http://www.virtualmin.com/download.html).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已在您的专用Linux服务器上安装了Virtualmin。有关说明，请参阅[http://www.virtualmin.com/download.html](http://www.virtualmin.com/download.html)。
- en: How to do it...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to deploy a Django project on a Linux server with Virtualmin:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在配备Virtualmin的Linux服务器上部署Django项目：
- en: Log in to Virtualmin as the root user and set `bash` instead of `sh` as the
    default shell for the server's users. This can be done by navigating to **Virtualmin**
    | **System Customization** | **Custom Shells**, as shown in the following screenshot:![How
    to do it...](img/B04912_11_03.jpg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以 root 用户登录到 Virtualmin 并将服务器的用户默认 shell 从 `sh` 更改为 `bash`。这可以通过导航到 **Virtualmin**
    | **系统定制** | **自定义 Shell** 来完成，如下面的截图所示：![如何操作...](img/B04912_11_03.jpg)
- en: 'Create a virtual server for your project by navigating to **Virtualmin** |
    **Create Virtual Server**. Enable the following features: **Setup website for
    domain?** and **Create MySQL database?**. The username and password that you set
    for the domain will also be used for the SSH connections, FTP, and MySQL database
    access, as follows:![How to do it...](img/B04912_11_04.jpg)'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **Virtualmin** | **创建虚拟服务器** 为你的项目创建一个虚拟服务器。启用以下功能：**为域名设置网站？** 和 **创建
    MySQL 数据库？**。你为域名设置的用户名和密码也将用于 SSH 连接、FTP 和 MySQL 数据库访问，如下所示：![如何操作...](img/B04912_11_04.jpg)
- en: Log in to your domain administration panel and set the `A` record for your domain
    to the IP address of your dedicated server.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的域名管理面板，并将你的域名的 `A` 记录设置为专用服务器的 IP 地址。
- en: Connect to the dedicated server via Secure Shell as the root user and install
    Python libraries, `pip`, `virtualenv`, `MySQLdb`, and `Pillow` system wide.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以 root 用户通过 Secure Shell 连接到专用服务器，并在系统范围内安装 Python 库，`pip`，`virtualenv`，`MySQLdb`
    和 `Pillow`。
- en: 'Ensure that the default MySQL database encoding is UTF-8:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保默认的 MySQL 数据库编码为 UTF-8：
- en: 'Edit MySQL configuration file on the remote server, for example, using the
    nano editor:'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在远程服务器上编辑 MySQL 配置文件，例如，使用 nano 编辑器：
- en: '[PRE28]'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add or edit the following configurations:'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加或编辑以下配置：
- en: '[PRE29]'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Press *Ctrl* + *O* to save the changes and *Ctrl* + *X* to exit the nano editor.
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *O* 保存更改，并按 *Ctrl* + *X* 退出 nano 编辑器。
- en: 'Then, restart the MySQL server, as follows:'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，按照以下步骤重新启动 MySQL 服务器：
- en: '[PRE30]'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Press *Ctrl* + *D* to exit Secure Shell.
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *D* 退出 Secure Shell。
- en: 'When you create a domain with Virtualmin, the user for that domain is created
    automatically. Connect to the dedicated server via Secure Shell as a user of your
    Django project and create a virtual environment for your project, as follows:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在 Virtualmin 中创建一个域名时，该域的用户会自动创建。以你的 Django 项目的用户身份通过 Secure Shell 连接到专用服务器，并按照以下步骤为你的项目创建一个虚拟环境：
- en: '[PRE31]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Tip
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `.bashrc` script will be called each time you connect to your Django project
    via Secure Shell as a user related to the domain. The `.bashrc` script will automatically
    activate the virtual environment for this project.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每次你通过 Secure Shell 以与域名相关的用户连接到你的 Django 项目时，`.bashrc` 脚本都会被调用。该脚本将自动激活此项目的虚拟环境。
- en: 'If you host your project code on Bitbucket, you will need to set up SSH keys
    in order to avoid password prompts when pulling from or pushing to the Git repository:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你将项目代码托管在 Bitbucket 上，你需要设置 SSH 密钥以避免从或向 Git 仓库拉取或推送时出现密码提示：
- en: 'Execute the following commands one by one:'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逐个执行以下命令：
- en: '[PRE32]'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This last command prints your SSH public key that you need to copy and paste
    at **Manage Account** | **SSH keys** | **Add Key** on the Bitbucket website.
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一条命令将打印出你需要复制并粘贴到 Bitbucket 网站上的 **管理账户** | **SSH 密钥** | **添加密钥** 的 SSH 公钥。
- en: 'Create a `project` directory, go to it, and clone your project''s code as follows:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `project` 目录，进入它，并按照以下步骤克隆你的项目代码：
- en: '[PRE33]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Tip
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Now, your project path should be something similar to the following: `/home/myproject/project/myproject`'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，你的项目路径应该类似于以下：`/home/myproject/project/myproject`
- en: 'Install the Python requirements for your project, including a specified version
    of Django, as follows:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤安装你项目的 Python 需求，包括指定的 Django 版本：
- en: '[PRE34]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Create the `media`, `tmp`, and `static` directories under your project's directory.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目目录下创建 `media`，`tmp` 和 `static` 目录。
- en: 'Also, create `local_settings.py` with settings similar to the following:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，创建一个与以下设置类似的 `local_settings.py`：
- en: '[PRE35]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Import the database dump that you created locally. If you are using a Mac,
    you can do that with an app, **Sequel Pro** ([http://www.sequelpro.com/](http://www.sequelpro.com/)),
    using an SSH connection. You can also upload the database dump to the server by
    FTP and then run the following in Secure Shell:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入你本地创建的数据库转储。如果你使用的是 Mac，你可以使用一个应用程序，**Sequel Pro** ([http://www.sequelpro.com/](http://www.sequelpro.com/))，通过
    SSH 连接来完成。你也可以通过 FTP 将数据库转储上传到服务器，然后在 Secure Shell 中运行以下命令：
- en: '[PRE36]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Collect static files, as follows:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤收集静态文件：
- en: '[PRE37]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Go to the `~/public_html` directory and create a `wsgi` file using the nano
    editor (or an editor of your choice):'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入`~/public_html`目录，并使用nano编辑器（或您选择的任何编辑器）创建一个`wsgi`文件：
- en: '[PRE38]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, create the `.htaccess` file in the same directory. The `.htaccess` file
    will redirect all the requests to your Django project set in the `wsgi` file,
    as shown in the following:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在同一目录中创建`.htaccess`文件。`.htaccess`文件将重定向所有请求到在`wsgi`文件中设置的Django项目，如下所示：
- en: '[PRE39]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Copy `.htaccess` as `.htaccess_live`.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`.htaccess`复制为`.htaccess_live`。
- en: 'Then, also create `.htaccess_maintenace` for maintenance cases. This new Apache
    configuration file will show `temporarily-offline.html` for all the users except
    you, recognized by the IP address of your LAN or computer. You can check your
    IP by googling `what''s my ip`. The following is how the `.htaccess_maintenance`
    will look:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，也为维护情况创建`.htaccess_maintenance`。这个新的Apache配置文件将向除了您之外的所有用户显示`temporarily-offline.html`，这些用户通过您的局域网或计算机的IP地址被识别。您可以通过谷歌搜索`what's
    my ip`来检查您的IP。以下是如何`.htaccess_maintenance`看起来：
- en: '[PRE40]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Tip
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Replace the IP digits in this file with your own IP.
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将此文件中的IP数字替换为您的IP地址。
- en: 'Then, create an HTML file that will be shown when your website is down:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个当您的网站宕机时将显示的HTML文件：
- en: '[PRE41]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Log in to the server as the root user via Secure Shell and edit the Apache
    configuration:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过Secure Shell以root用户身份登录到服务器并编辑Apache配置：
- en: 'Open the domain configuration file, as follows:'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开域名配置文件，如下所示：
- en: '[PRE42]'
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add the following lines before `</VirtualHost>`:'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`</VirtualHost>`之前添加以下行：
- en: '[PRE43]'
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Restart Apache for the changes to take effect:'
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启Apache以使更改生效：
- en: '[PRE44]'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Set the default scheduled cron jobs. For more information on how to do this,
    refer to the *Setting up cron jobs for regular tasks* recipe.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置默认的预定cron作业。有关如何操作的更多信息，请参阅*设置cron作业以执行常规任务*配方。
- en: How it works...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: With this configuration, files in the `media` and `static` directories are served
    directly from Apache; whereas, all the other URLs are handled by the Django project
    through the `my.wsgi` file.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此配置，`media`和`static`目录中的文件将直接由Apache提供服务；而所有其他URL都由Django项目通过`my.wsgi`文件处理。
- en: Using the `<FilesMatch>` directive in the Apache site configuration, all media
    files are set to be cached for one year. Static URL paths have a numbered prefix
    that changes whenever you update the code from the Git repository.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Apache站点配置中的`<FilesMatch>`指令，所有媒体文件都被设置为缓存一年。静态URL路径有一个编号的前缀，每次您从Git仓库更新代码时都会更改。
- en: When you need to update the website and want to set it down for maintenance,
    you'll have to copy `.htaccess_maintenance` to `.htaccess`. When you want to set
    the website up again, you'll have to copy `.htaccess_live` to `.htaccess`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要更新网站并希望将其关闭进行维护时，您必须将`.htaccess_maintenance`复制到`.htaccess`。当您想要再次设置网站时，您必须将`.htaccess_live`复制到`.htaccess`。
- en: There's more...
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'To find other options for hosting your Django project, refer to: [http://djangofriendly.com/hosts/](http://djangofriendly.com/hosts/).'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找托管您的Django项目的其他选项，请参阅：[http://djangofriendly.com/hosts/](http://djangofriendly.com/hosts/)。
- en: See also
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a project file structure* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Django 1.8"), *Getting Started with Django 1.8*
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。Django 1.8入门")中的*创建项目文件结构*配方，*Django 1.8入门*'
- en: The *Handling project dependencies with pip* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting Started with Django 1.8"), *Getting Started with Django 1.8*
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。Django 1.8入门")中的*使用pip处理项目依赖项*配方，*Django 1.8入门*'
- en: The *Setting up STATIC_URL dynamically for Git users* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting Started with Django 1.8"), *Getting Started with Django 1.8*
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。Django 1.8入门")中的*为Git用户动态设置STATIC_URL配方*，*Django 1.8入门*'
- en: The *Setting UTF-8 as the default encoding for MySQL configuration* recipe in
    [Chapter 1](ch01.html "Chapter 1. Getting Started with Django 1.8"), *Getting
    Started with Django 1.8*
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。Django 1.8入门")中的*将UTF-8设置为MySQL配置的默认编码*配方，*Django 1.8入门*'
- en: The *Creating and using the Fabric deployment script* recipe
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建和使用Fabric部署脚本*配方'
- en: The *Setting up cron jobs for regular tasks* recipe
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*设置cron作业以执行常规任务*配方'
- en: Setting up cron jobs for regular tasks
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置cron作业以执行常规任务
- en: 'Usually websites have some management tasks to do in the background once in
    a week, day, or every hour. This can be achieved using cron jobs that are also
    known as scheduled tasks. These are scripts that run on the server for the specified
    period of time. In this recipe, we will create two cron jobs: one to clear sessions
    from the database and another to back up the database data. Both will be run every
    night.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 通常网站每周、每天或每小时都需要在后台执行一些管理任务。这可以通过 cron 作业实现，也称为计划任务。这些是在指定时间段内在服务器上运行的脚本。在这个配方中，我们将创建两个
    cron 作业：一个用于清除数据库中的会话，另一个用于备份数据库数据。两者都将每晚运行。
- en: Getting ready
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To start with, deploy your Django project on to a remote server. Then, connect
    to the server by SSH.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将你的 Django 项目部署到远程服务器上。然后，通过 SSH 连接到服务器。
- en: How to do it...
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s create the two scripts and make them run regularly by following these
    steps:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤创建两个脚本并使它们定期运行：
- en: 'Create the `commands`, `db_backups` and `logs` directories in your project''s
    home directory:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目主目录中创建 `commands`、`db_backups` 和 `logs` 目录：
- en: '[PRE45]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In the `commands` directory, create a `cleanup.sh` file with the following
    content:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `commands` 目录中，创建一个包含以下内容的 `cleanup.sh` 文件：
- en: '[PRE46]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Make the following file executable:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使以下文件可执行：
- en: '[PRE47]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Then, in the same directory, create a `backup_db.sh` file with the following
    content:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在同一个目录中，创建一个包含以下内容的 `backup_db.sh` 文件：
- en: '[PRE48]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Make the following file executable too:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使以下文件也可执行：
- en: '[PRE49]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Test the scripts to see whether they are executed correctly by running the
    scripts and then checking the `*.log` files in the `logs` directory, as follows:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行脚本并检查 `logs` 目录中的 `*.log` 文件来测试脚本是否正确执行，如下所示：
- en: '[PRE50]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In your project''s home directory create a `crontab.txt` file with the following
    tasks:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目主目录中创建一个包含以下任务的 `crontab.txt` 文件：
- en: '[PRE51]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Install the crontab tasks, as follows:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式安装 crontab 任务：
- en: '[PRE52]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: How it works...
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: With the current setup, every night `cleanup.sh` will be executed at 1 A.M.
    and `backup_db.sh` will be executed at 2 A.M. The execution logs will be saved
    in `cleanup.log` and `backup_db.log`. If you get any errors, you should check
    these files for the traceback.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前设置下，每晚 1 点 `cleanup.sh` 将被执行，2 点 `backup_db.sh` 将被执行。执行日志将保存在 `cleanup.log`
    和 `backup_db.log` 文件中。如果你遇到任何错误，你应该检查这些文件以查找错误跟踪。
- en: The database backup script is a little more complex. Every day of the week,
    it creates a backup file for that day called `0-Sunday.sql`, `1-Monday.sql`, and
    so on. Therefore, you will be able to restore data backed seven days ago or later.
    At first, the backup script dumps the database schema for all the tables and then
    it dumps the data for all the tables, except for the ones listed one under each
    other in `EXCLUDED_TABLES` (currently, that is, `django_session`).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库备份脚本稍微复杂一些。每周的每一天，它都会为该天创建一个名为 `0-Sunday.sql`、`1-Monday.sql` 等的备份文件。因此，你将能够恢复七天前或更晚的数据。首先，备份脚本导出所有表的数据库模式，然后导出所有表的数据，除了在
    `EXCLUDED_TABLES`（目前是，即 `django_session`）中并列在一起的那些表。
- en: 'The crontab syntax is this: each line contains a specific period of time and
    then a task to run at it. The time is defined in five parts separated by spaces,
    as shown in the following:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: crontab 语法如下：每行包含一个特定的时间段和一个要运行的任务。时间由五个部分组成，由空格分隔，如下所示：
- en: Minutes from 0 to 59
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 0 到 59 分钟
- en: Hours from 0 to 23
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 0 到 23 小时
- en: Days of month from 1 to 31
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个月中的天从 1 到 31
- en: Months from 1 to 12
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 1 到 12 个月
- en: Days of week from 0 to 7, where 0 is Sunday, 1 is Monday, and so on. 7 is Sunday
    again.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一周中的天从 0 到 7，其中 0 是星期日，1 是星期一，以此类推。7 又是星期日。
- en: 'An asterisk (`*`) means that every time frame will be used. Therefore, the
    following task defines `cleanup.sh` to be executed at 1:00 AM every day of a month,
    every month, and every day of the week:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 星号（`*`）表示将使用每个时间段。因此，以下任务定义了每天每月每天都要执行的 `cleanup.sh` 在凌晨 1:00。
- en: '[PRE53]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: You can learn more about the specifics of the crontab at [https://en.wikipedia.org/wiki/Cron](https://en.wikipedia.org/wiki/Cron).
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://en.wikipedia.org/wiki/Cron](https://en.wikipedia.org/wiki/Cron)
    上了解更多关于 crontab 的详细信息。
- en: See also
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Deploying on Apache with mod_wsgi* recipe
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 mod_wsgi 在 Apache 上部署* 的配方'
- en: The *Creating and using the Fabric deployment script* recipe
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建和使用 Fabric 部署脚本* 的配方'
- en: Creating and using the Fabric deployment script
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和使用 Fabric 部署脚本
- en: Usually, to update your site, you have to perform repetitive tasks such as setting
    a maintenance page, stopping cron jobs, creating a database backup, pulling new
    code from a repository, migrating databases, collecting static files, testing,
    starting cron jobs again, and unsetting the maintenance page. That's quite a tedious
    work, where mistakes can occur. Also, you need not forget the different routines
    for staging site (the one where new features can be tested) and production site
    (which is shown to the public). Fortunately, there is a Python library called
    **Fabric** that allows you to automate these tasks. In this recipe, you will learn
    how to create `fabfile.py`, the script for Fabric, and how to deploy your project
    on staging and production environments.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，要更新你的网站，你必须执行诸如设置维护页面、停止 cron 作业、创建数据库备份、从仓库拉取新代码、迁移数据库、收集静态文件、测试、再次启动 cron
    作业以及取消维护页面等重复性任务。这是一项相当繁琐的工作，其中可能会出错。此外，你还需要记住预发布网站（可以测试新功能的地方）和生产网站（向公众展示的地方）的不同程序。幸运的是，有一个名为
    **Fabric** 的 Python 库允许你自动化这些任务。在这个菜谱中，你将学习如何创建 `fabfile.py`，Fabric 的脚本，以及如何在预发布和生产环境中部署你的项目。
- en: 'The Fabric script can be called from the directory that contains it, as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从包含它的目录中调用 Fabric 脚本，如下所示：
- en: '[PRE54]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: This will deploy the project on the staging server.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在预发布服务器上部署项目。
- en: Getting ready
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Set up analogous staging and production websites using the instructions in
    the *Deploying on Apache with mod_wsgi* recipe. Install Fabric on your computer
    globally or in your project''s virtual environment, as follows:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *在 Apache 上使用 mod_wsgi 部署* 的说明设置类似的预发布和生产网站。全局或在你的项目虚拟环境中安装 Fabric，如下所示：
- en: '[PRE55]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: How to do it...
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will start by creating a `fabfile.py` file in the Django project directory
    with several functions, as follows:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在 Django 项目目录中创建一个 `fabfile.py` 文件，包含几个函数，如下所示：
- en: '[PRE56]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The `dev()`, `staging()`, and `production()` functions set the appropriate
    environment for the current task. Then, the `deploy()` function calls the `_update_dev()`,
    `_update_staging()`, or `_update_production()` private functions, respectively.
    Let''s define these private functions in the same file, as follows:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`dev()`、`staging()` 和 `production()` 函数为当前任务设置适当的环境。然后，`deploy()` 函数分别调用 `_update_dev()`、`_update_staging()`
    或 `_update_production()` 私有函数。让我们在同一个文件中定义这些私有函数，如下所示：'
- en: 'The function for deploying in the development environment will optionally do
    the following tasks:'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发环境中部署的函数将可选执行以下任务：
- en: Update the local database with data from the production database
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用生产数据库中的数据更新本地数据库
- en: Download media files from the production server
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从生产服务器下载媒体文件
- en: Update code from the Git repository
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Git 仓库更新代码
- en: Migrate the local database
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移本地数据库
- en: 'Let''s create this function in the Fabric script file, as follows:'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们在 Fabric 脚本文件中创建这个函数，如下所示：
- en: '[PRE57]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The function for deploying in a staging environment will optionally do the
    following tasks:'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在预发布环境中部署的函数将可选执行以下任务：
- en: Set a maintenance screen saying that the site is being updated and the visitors
    should wait or come back later
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置维护页面，说明网站正在更新，访客应等待或稍后回来
- en: Stop scheduled cron jobs
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停止计划中的 cron 作业
- en: Get the latest data from the production database
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从生产数据库获取最新数据
- en: Get the latest media files from the production database
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从生产数据库获取最新的媒体文件
- en: Pull code from the Git repository
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Git 仓库拉取代码
- en: Collect static files
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集静态文件
- en: Migrate the database schema
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移数据库模式
- en: Restart the Apache web server
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重启 Apache 网络服务器
- en: Start scheduled cron jobs
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动计划中的 cron 作业
- en: Unset the maintenance screen
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消维护页面
- en: 'Let''s create this function in the Fabric script, as follows:'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们在 Fabric 脚本中创建这个函数，如下所示：
- en: '[PRE58]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The function for deploying in a production environment will optionally do the
    following tasks:'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产环境中部署的函数将可选执行以下任务：
- en: Set the maintenance screen telling that the site is being updated and the visitors
    should wait or come back later
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置维护页面，说明网站正在更新，访客应等待或稍后回来
- en: Stop scheduled cron jobs
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停止计划中的 cron 作业
- en: Back up the database
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份数据库
- en: Pull code from the Git repository
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Git 仓库拉取代码
- en: Collect static files
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集静态文件
- en: Migrate the database schema
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移数据库模式
- en: Restart the Apache web server
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重启 Apache 网络服务器
- en: Start scheduled cron jobs
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动计划中的 cron 作业
- en: Unset the maintenance screen
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消维护页面
- en: 'Let''s create this function in the Fabric script, as follows:'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们在 Fabric 脚本中创建这个函数，如下所示：
- en: '[PRE59]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: How it works...
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Each non-private function in a `fabfile.py` file becomes a possible argument
    to be called from the command-line tool. To see all the available functions, run
    the following command:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在`fabfile.py`文件中的每个非私有函数都成为从命令行工具调用可能的参数。要查看所有可用的函数，请运行以下命令：
- en: '[PRE60]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'These functions are called in the same order as they are passed to the Fabric
    script, therefore you need to be careful about the order of the arguments when
    deploying to different environments:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数的调用顺序与它们传递给Fabric脚本的顺序相同，因此你在部署到不同环境时需要小心参数的顺序：
- en: 'To deploy in a development environment, you would run the following command:'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在开发环境中部署，请运行以下命令：
- en: '[PRE61]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'This will ask you questions similar to the following:'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将提出类似于以下的问题：
- en: '[PRE62]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: When answered positively, a specific step will be executed.
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当回答是时，将执行特定的步骤。
- en: 'To deploy in a staging environment, you would run the following command:'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在预发布环境中部署，请运行以下命令：
- en: '[PRE63]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Finally, to deploy in a production environment, you would run the following
    command:'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，要在生产环境中部署，请运行以下命令：
- en: '[PRE64]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'For each step of deployment, you will be asked whether you want to do it or
    skip it. If you want to execute all the steps without any prompts (except the
    password requests), add a `full` parameter to the deployment script, as follows:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 对于部署的每一步，你都会被询问是否要执行它或跳过它。如果你想要在不进行任何提示（除了密码请求）的情况下执行所有步骤，请在部署脚本中添加一个`full`参数，如下所示：
- en: '[PRE65]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The Fabric script utilizes several basic functions that can be described as
    follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric脚本使用几个基本函数，可以描述如下：
- en: '`local()`: This function is used to run a command locally in the current computer'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local()`: 这个函数用于在当前计算机上本地运行命令'
- en: '`run()`: This function is used to run a command as a specified user on a remote
    server'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run()`: 这个函数用于在远程服务器上以指定用户运行命令'
- en: '`prompt()`: This function is used to ask a question'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prompt()`: 这个函数用于提问'
- en: '`get()`: This function is used to download a file from a remote server to a
    local computer'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get()`: 这个函数用于从远程服务器下载文件到本地计算机'
- en: '`sudo()`: This function is used to run a command as the root (or other) user'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudo()`: 这个函数用于以root（或其他）用户运行命令'
- en: Fabric uses the Secure Shell connection to perform tasks on remote servers.
    Each `run()` or `sudo()` command is executed as a separate connection; therefore,
    when you want to execute multiple commands at once, you have to either create
    a `bash` script on the server and call it from Fabric or you have to separate
    the commands using the `&&` shell operator, which executes the next command only
    if the previous one was successful.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric使用安全外壳连接在远程服务器上执行任务。每个`run()`或`sudo()`命令作为一个单独的连接执行；因此，当你想要一次性执行多个命令时，你必须要么在服务器上创建一个`bash`脚本并通过Fabric调用它，要么使用`&&`shell运算符来分隔命令，该运算符仅在上一条命令成功后才会执行下一条命令。
- en: 'We are also using the `scp` command to copy files from the production server
    to the staging server. The syntax of `scp` for recursively copying all the files
    from a specified directory is similar to the following:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用`scp`命令从生产服务器复制文件到预发布服务器。递归复制指定目录下所有文件的`scp`语法类似于以下：
- en: '[PRE66]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'To make the output more user-friendly, we are using colors, as follows:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使输出更友好，我们使用了颜色，如下所示：
- en: '[PRE67]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The deployment script expects you to have two management commands: `prepare_dev`
    and `prepare_staging`. It''s up to you to decide what to put in these commands.
    Basically, you could change the super user password to a simpler one and change
    the site domain there. If you don''t need such functionality, just remove that
    from the Fabric script.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 部署脚本期望你拥有两个管理命令：`prepare_dev`和`prepare_staging`。由你自己决定将这些命令放在哪里。基本上，你可以更改超级用户密码为更简单的一个，并更改那里的站点域名。如果你不需要这样的功能，只需从Fabric脚本中删除它即可。
- en: 'The general rule of thumb is not to store any sensitive data in the Fabric
    script if it is saved in the Git repository. Therefore, for example, to make a
    backup of the database, we call the `backup_db.sh` script on the remote production
    server. The content of such a file could be something similar to the following:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 一般原则是不要在Git仓库中保存任何敏感数据，因此，例如，为了备份数据库，我们在远程生产服务器上调用`backup_db.sh`脚本。这样的文件内容可能类似于以下：
- en: '[PRE68]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'You can make it executable with the following:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下方法使其可执行：
- en: '[PRE69]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'When the preceding command is run without parameters, it will create a database
    dump with the date and time in the filename, for example, `db_2014-04-24-1400.sql`,
    as follows:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行前面的命令而不带参数时，它将在文件名中包含日期和时间来创建数据库备份，例如，`db_2014-04-24-1400.sql`，如下所示：
- en: '[PRE70]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'When the `--latest` parameter is passed, the filename of the dump will be `db_latest.sql`:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递 `--latest` 参数时，备份文件的名称将是 `db_latest.sql`：
- en: '[PRE71]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: There's more...
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Fabric scripts can be used not only for deployment, but also for any routine
    that you need to perform on remote servers, for example, collecting translatable
    strings when you are using the Rosetta tool to translate `*.po` files online,
    rebuild search indexes when you are using Haystack for full-text searches, create
    backups on demand, call custom management commands, and so on.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric 脚本不仅可以用于部署，还可以用于在远程服务器上执行任何常规操作，例如，当你使用 Rosetta 工具在线翻译 `*.po` 文件时收集可翻译字符串，当你使用
    Haystack 进行全文搜索时重建搜索索引，按需创建备份，调用自定义管理命令，等等。
- en: 'To learn more about Fabric, refer to the following URL: [http://docs.fabfile.org/en/1.10/](http://docs.fabfile.org/en/1.10/).'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Fabric 的信息，请参考以下网址：[http://docs.fabfile.org/en/1.10/](http://docs.fabfile.org/en/1.10/)。
- en: See also
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Deploying on Apache with mod_wsgi* recipe
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 mod_wsgi 在 Apache 上部署* 菜单'
