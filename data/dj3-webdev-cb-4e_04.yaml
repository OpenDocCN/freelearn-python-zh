- en: Templates and JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板和JavaScript
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下主题：
- en: Arranging the base.html template
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排列`base.html`模板
- en: Using Django Sekizai
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Django Sekizai
- en: Exposing settings in JavaScript
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在JavaScript中公开设置
- en: Using HTML5 data attributes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML5数据属性
- en: Providing responsive images(env)$ python manage.py migrate ideas zero
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供响应式图像(env)$ python manage.py migrate ideas zero
- en: Implementing a continuous scrolling
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现连续滚动
- en: Opening object details in a modal dialog
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模态对话框中打开对象详细信息
- en: Implementing the Like widget
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现“喜欢”小部件
- en: Uploading images via Ajax
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Ajax上传图片
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Static websites are useful for static content, such as traditional documentation,
    online books, and tutorials; however, today, most interactive web apps and platforms
    must have dynamic components if they want to stand out and give visitors the best
    user experience. In this chapter, you will learn how to use JavaScript and CSS
    together with Django templates. We will use the Bootstrap 4 frontend framework
    for responsive layouts and the jQuery JavaScript framework for productive scripting.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 静态网站对于静态内容非常有用，比如传统文档、在线书籍和教程；然而，如今，大多数交互式网络应用和平台必须具有动态组件，如果它们想要脱颖而出并给访问者最佳的用户体验。在这一章中，您将学习如何使用JavaScript和CSS与Django模板一起使用。我们将使用Bootstrap
    4前端框架来实现响应式布局，以及jQuery JavaScript框架来进行高效的脚本编写。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As before, to work with the code of this chapter, you will need the latest stable
    version of Python, MySQL, or PostgreSQL database and a Django project with a virtual
    environment. Some recipes will require specific Python dependencies. Some of them
    will require additional JavaScript libraries. You will see the requirements of
    each recipe later in the chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章的代码一样，要使用本章的代码，您需要最新稳定版本的Python、MySQL或PostgreSQL数据库以及带有虚拟环境的Django项目。有些配方需要特定的Python依赖项。其中一些需要额外的JavaScript库。您将在本章后面看到每个配方的要求。
- en: You can find all the code for this chapter at the `ch04` directory of the GitHub
    repository at [https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub存储库的`ch04`目录中找到本章的所有代码，网址为[https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition)。
- en: Arranging the base.html template
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排列`base.html`模板
- en: When you start working on templates, one of the first things to do is create
    the `base.html` boilerplate, which will be extended by most of the page templates
    in your project. In this recipe, we will demonstrate how to create such a template
    for multilingual HTML5 websites, with responsiveness in mind.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当您开始处理模板时，首先要做的事情之一就是创建`base.html`样板，这将被项目中大多数页面模板所扩展。在本配方中，我们将演示如何为多语言HTML5网站创建这样的模板，并考虑到响应性。
- en: Responsive websites are those that provide the same base content to all devices,
    styled appropriately to the viewport, whether the visitor uses desktop browsers,
    tablets, or phones. This differs from adaptive websites, where the server attempts
    to determine the device type based on the user agent, then provides entirely different
    content, markup, and even functionality depending on how that user agent is categorized.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式网站是指为所有设备提供相同基础内容的网站，根据视口适当地进行样式设置，无论访问者使用桌面浏览器、平板电脑还是手机。这与自适应网站不同，后者服务器会尝试根据用户代理来确定设备类型，然后根据用户代理的分类方式提供完全不同的内容、标记甚至功能。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create the `templates` directory in your project and set the template directories
    in the settings to include it, as shown here:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的项目中创建`templates`目录，并在设置中设置模板目录以包含它，如下所示：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Go through the following steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行：
- en: 'In the root directory of your templates, create a `base.html` file with the
    following content:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板的根目录中，创建一个`base.html`文件，其中包含以下内容：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Under `misc/includes`, create a template including all the versions of the
    favicon:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`misc/includes`下，创建一个包含所有版本网站图标的模板：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A favicon is a small image that we usually see in the browser tabs, tiles of
    recently visited websites, and shortcuts on the desktop. You can use one of the
    online generators to generate different versions of the favicon from a logo for
    different use cases, browsers, and platforms. Our favorite favicon generators
    are [https://favicomatic.com/](https://favicomatic.com/) and [https://realfavicongenerator.net/](https://realfavicongenerator.net/).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 网站图标是我们通常在浏览器标签、最近访问的网站的图块以及桌面快捷方式中看到的小图像。您可以使用在线生成器之一，从标志生成网站图标的不同版本，以适用于不同的用例、浏览器和平台。我们最喜欢的网站图标生成器是[https://favicomatic.com/](https://favicomatic.com/)和[https://realfavicongenerator.net/](https://realfavicongenerator.net/)。
- en: Create the templates `misc/includes/header.html` and `misc/includes/footer.html`
    with your website's header and footer. For now, you can just create empty files
    there.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`misc/includes/header.html`和`misc/includes/footer.html`模板，其中包含您网站的页眉和页脚。现在，您可以在那里创建空文件。
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The base template contains the `<head>` and `<body>` sections of the HTML document,
    with all the details that are reused on each page of the website. Depending on
    the web design requirements, you can have additional base templates for different
    layouts. For example, we can add the `base_simple.html` file, which has the same
    HTML `<head>` section and a very minimalistic `<body>` section, and this can be
    used for the login screen, password reset, or other simple pages. You can have
    separate base templates for other layouts as well, such as single-column, two-column,
    and three-column layouts, where each extends `base.html` and overwrites the blocks
    as needed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 基础模板包含HTML文档的`<head>`和`<body>`部分，其中包含在网站的每个页面上重复使用的所有细节。根据网页设计的要求，您可以为不同的布局添加额外的基础模板。例如，我们可以添加`base_simple.html`文件，其中包含相同的HTML`<head>`部分和非常简约的`<body>`部分，这可以用于登录屏幕、密码重置或其他简单页面。您还可以为其他布局添加单列、双列和三列布局的单独基础模板，每个模板都会扩展`base.html`并根据需要覆盖块。
- en: 'Let''s look into the details of the `base.html` template that we defined earlier.
    Here are the details for the `<head>` section:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解我们之前定义的`base.html`模板的`<head>`部分的详细信息：
- en: We define UTF-8 as the default encoding to support multilingual content.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义UTF-8作为默认编码以支持多语言内容。
- en: Then, we have the viewport definition that will scale the website in the browser
    to use the full width. This is necessary for small-screen devices that will get
    specific screen layouts created with the Bootstrap frontend framework.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们有视口定义，将在浏览器中缩放网站以使用全宽度。这对于使用Bootstrap前端框架创建特定屏幕布局的小屏设备是必要的。
- en: Of course, there's a customizable website title that is used in the browser
    tabs and search results of search engines.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当然，在浏览器标签和搜索引擎的搜索结果中使用的可定制网站标题。
- en: Then we have a block for meta tags, that can be used for **search engine optimization**
    (**SEO**), Open Graph, and Twitter Cards.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们有一个用于meta标签的块，可用于**搜索引擎优化**（**SEO**），Open Graph和Twitter Cards。
- en: Then we include favicons of different formats and sizes.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们包括不同格式和大小的网站图标。
- en: We include the default Bootstrap and custom website styles. We load the Bootstrap
    CSS, as we want to have responsive layouts, and this will also normalize the basic
    styling for all elements for consistency across browsers.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们包括默认的Bootstrap和自定义网站样式。我们加载Bootstrap CSS，因为我们希望拥有响应式布局，这也将规范化所有元素的基本样式，以保持跨浏览器的一致性。
- en: And lastly, we have extensible blocks for meta tags, style sheets, and whatever
    else might be necessary for the `<head>` section.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们有可扩展的块用于meta标签，样式表，以及`<head>`部分可能需要的其他内容。
- en: 'Here are the details for the `<body>` section:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`<body>`部分的详细信息：
- en: Firstly, we include the header of the website. That's where you can put your
    logo,  website title, and main navigation.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们包括网站的页眉。在那里，您可以放置您的标志，网站标题和主导航。
- en: Then, we have the main container containing a content block placeholder, which
    is to be filled by extending the templates.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们有包含内容块占位符的主容器，这些内容块将通过扩展模板来填充。
- en: Inside the container, there is the `content` block, which contains the `sidebar`
    and `main` blocks. In child templates, when we need a layout with a sidebar. We
    will overwrite the `sidebar` and `main` blocks, but, when we need the full-width
    content, we will overwrite the `content` block.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器内部，有`content`块，其中包含`sidebar`和`main`块。在子模板中，当我们需要带有侧边栏的布局时，我们将覆盖`sidebar`和`main`块，但是当我们需要全宽内容时，我们将覆盖`content`块。
- en: Then, we include the footer of the website. That's where you can have copyright
    information and links to important meta pages, such as privacy policy, terms of
    use, contact form, and others.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们包括网站的页脚。在那里，您可以放置版权信息和重要元页面的链接，例如隐私政策，使用条款，联系表格等。
- en: We then load the jQuery and Bootstrap scripts. Extensible JavaScript blocks
    are included here at the end of the `<body>` following the best practices for
    page-load performance, much like those for the style sheets included in the `<head>`.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们加载jQuery和Bootstrap脚本。可扩展的JavaScript块包括在`<body>`的末尾，遵循页面加载性能的最佳实践，就像`<head>`中包含的样式表一样。
- en: Lastly, we have blocks for additional JavaScript and extra HTML, such as HTML
    templates for JavaScript or hidden modal dialogs, which we will explore later
    in this chapter.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们有用于额外JavaScript和额外HTML的块，例如JavaScript的HTML模板或隐藏的模态对话框，我们将在本章后面探讨。
- en: The base template that we created is, by no means, a static unchangeable template.
    You can modify the markup structure, or add the elements you need to it—for example,
    a template block for body attributes, a snippet for Google Analytics code, common
    JavaScript files, the Apple touch icon for iPhone bookmarks, Open Graph meta tags,
    Twitter Card tags, schema.org attributes, and so on. You may also want to define
    other blocks, depending on the requirements of your project, and maybe even wrap
    the whole content of the body so that you can overwrite it in a child template.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的基本模板绝不是静态不可更改的模板。您可以修改标记结构，或向其中添加您需要的元素，例如用于body属性的模板块，Google Analytics代码的片段，常见JavaScript文件，iPhone书签的Apple触摸图标，Open
    Graph meta标签，Twitter Card标签，schema.org属性等。根据您的项目要求，您可能还想定义其他块，甚至可能包装整个body内容，以便您可以在子模板中覆盖它。
- en: See also
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using Django Sekizai* recipe
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Django Sekizai*配方'
- en: The *Exposing settings in JavaScript* recipe
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在JavaScript中公开设置*配方'
- en: Using Django Sekizai
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Django Sekizai
- en: In Django templates, normally you would use template inheritance to overwrite
    blocks from parent templates to include styles or scripts to the HTML document.
    This means that every main template of each view should be aware of all content
    that is inside; however, sometimes it is much more convenient to let the included
    templates decide what styles and scripts to load. It is possible to do this with
    Django Sekizai, which we will use in this recipe.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django模板中，通常您会使用模板继承来覆盖父模板中的块，以将样式或脚本包含到HTML文档中。这意味着每个视图的主模板都应该知道所有内容，然而，有时让包含的模板决定加载哪些样式和脚本会更方便得多。这可以通过Django
    Sekizai来实现，在本配方中我们将使用它。
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before we begin with the recipe, follow these steps to get ready:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始配方之前，按照以下步骤做好准备：
- en: 'Install `django-classy-tags` and `django-sekizai` to your virtual environment
    (and add them to the `requirements/_base.txt`):'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`django-classy-tags`和`django-sekizai`安装到您的虚拟环境中（并将它们添加到`requirements/_base.txt`中）：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then add `sekizai` to the installed apps in the settings:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在设置中将`sekizai`添加到已安装的应用程序中：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, add the `sekizai` context processor to the template configuration in
    the settings:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在设置中的模板配置中添加`sekizai`上下文处理器：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Go through the following steps to complete the recipe:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成配方：
- en: 'At the beginning of the `base.html` template, load the `sekizai_tags` library:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`base.html`模板的开头，加载`sekizai_tags`库：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the same file, at the end of the `<head>` section, add the template tag
    `{% render_block "css" %}` as follows:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件中，在`<head>`部分的末尾，添加模板标签`{% render_block "css" %}`如下所示：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, at the end of the `<body>` section, add the template tag `{% render_block
    "js" %}` as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`<body>`部分的末尾，添加模板标签`{% render_block "js" %}`如下所示：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, in any included template, when you want to add some styling or JavaScript,
    use the `{% addtoblock %}` template tags as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在任何包含的模板中，当您想要添加一些样式或JavaScript时，请使用`{% addtoblock %}`模板标签，如下所示：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Django Sekizai works with the templates included by the `{% include %}` template
    tag, custom template tags that are rendered with templates, or templates for form
    widgets. The `{% addtoblock  %}` template tags define the Sekizai block that we
    want to add HTML content to.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Django Sekizai与`{% include %}`模板标签包含的模板、使用模板呈现的自定义模板标签或表单小部件模板一起工作。`{% addtoblock
    %}`模板标签定义了我们要向其中添加HTML内容的Sekizai块。
- en: When you add something to a Sekizai block, `django-sekizai` takes care of including
    it there only once. This means that you can have multiple included widgets of
    the same type, but their CSS and JavaScript will only be loaded and executed once.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当您向Sekizai块添加内容时，`django-sekizai`会负责仅在那里包含它一次。这意味着您可以有多个相同类型的包含小部件，但它们的CSS和JavaScript只会加载和执行一次。
- en: See also
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Implementing the Like widget* recipe
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现Like小部件*教程'
- en: The *Uploading images via Ajax* recipe
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过Ajax上传图像*教程'
- en: Exposing settings in JavaScript
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在JavaScript中公开设置
- en: Django projects have their configuration set in the settings files, such as
    `myproject/settings/dev.py` for the development environment; we described this
    in the *Configuring settings for development, testing, staging, and production
    environments* recipe in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*. Some of these configuration values may also
    be useful for functionality in the browser, and so they will also need to be set
    in JavaScript. We want a single location to define our project settings, so, in
    this recipe, we will see how we can pass some configuration values from the Django
    server to the browser.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Django项目在设置文件中设置其配置，例如`myproject/settings/dev.py`用于开发环境；我们在[第1章](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*《Django
    3.0入门》*中的*为开发、测试、暂存和生产环境配置设置*教程中描述了这一点。其中一些配置值也可能对浏览器中的功能有用，因此它们也需要在JavaScript中设置。我们希望有一个单一的位置来定义我们的项目设置，因此在这个教程中，我们将看到如何将一些配置值从Django服务器传递到浏览器。
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Make sure that you have the `request` context processor included in the `TEMPLATES[''OPTIONS''][''context_processors'']`
    setting, as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在设置中包含了`TEMPLATES['OPTIONS']['context_processors']`设置中的`request`上下文处理器，如下所示：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should also create the `core` app, if you haven''t done so already, and
    place it under `INSTALLED_APPS` in the settings:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有创建`core`应用程序，请在设置中将其放在`INSTALLED_APPS`下：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to create and include the JavaScript settings:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建和包含JavaScript设置：
- en: 'In the `views.py` of your `core` app, create a `js_settings()` view that returns
    a response of the JavaScript content type, as shown in the following code:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`core`应用的`views.py`中，创建一个返回JavaScript内容类型响应的`js_settings()`视图，如下所示：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Plug in this view into the URL configuration:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此视图插入URL配置中：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Load the JavaScript-based view in the frontend by adding it at the end of the
    `base.html` template:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`base.html`模板的末尾添加它，将基于JavaScript的视图加载到前端：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we can access the specified settings in any JavaScript file as follows:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以在任何JavaScript文件中访问指定的设置，如下所示：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the `js_settings` view, we built a dictionary of settings that we want to
    pass to the browser, converted the dictionary to JSON, and rendered a template
    for a JavaScript file that parses the JSON and assigns the result to the `window.settings`
    variable. By converting a dictionary to a JSON string and parsing it in the JavaScript
    file, we can be sure that we won't have any problems with trailing commas after
    the last element—that's allowed in Python, but invalid in JavaScript.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在`js_settings`视图中，我们构建了一个要传递给浏览器的设置字典，将字典转换为JSON，并渲染了一个JavaScript文件的模板，解析JSON并将结果分配给`window.settings`变量。通过将字典转换为JSON字符串并在JavaScript文件中解析它，我们可以确保在最后一个元素之后没有逗号的问题-这在Python中是允许的，但在JavaScript中是无效的。
- en: 'The rendered JavaScript file will look like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染的JavaScript文件将如下所示：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: See also
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Configuring settings for development, testing, staging, and production
    environments* recipe in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`第1章`*《Django 3.0入门》*中的*为开发、测试、暂存和生产环境配置设置*教程
- en: The *Arranging the base.html template* recipe
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安排base.html模板*教程'
- en: The *Using HTML5 data attributes* recipe
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用HTML5数据属性*教程'
- en: Using HTML5 data attributes
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTML5数据属性
- en: 'HTML5 introduces `data-*` attributes for passing data about a specific HTML
    element from the webserver to JavaScript and CSS. In this recipe, we will see
    a way to attach data efficiently from Django to custom HTML5 data attributes and
    then describe how to read the data from JavaScript with a practical example: we
    will render a Google Map with a marker at a specified geographical position; when
    we click on the marker, we will display the address in an information window.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5引入了`data-*`属性，用于从Web服务器将有关特定HTML元素的数据传递到JavaScript和CSS。在这个教程中，我们将看到一种有效地从Django附加数据到自定义HTML5数据属性的方法，然后描述如何通过一个实际的例子从JavaScript中读取数据：我们将在指定的地理位置渲染一个谷歌地图，并在点击标记时显示信息窗口中的地址。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get ready, follow these steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好，按照以下步骤进行：
- en: Use a PostgreSQL database with a PostGIS extension for this and the following
    chapters. To see how to install the PostGIS extension, look at the official documentation
    at [https://docs.djangoproject.com/en/2.2/ref/contrib/gis/install/postgis/](https://docs.djangoproject.com/en/2.2/ref/contrib/gis/install/postgis/).
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此和以下章节使用带有PostGIS扩展的PostgreSQL数据库。要了解如何安装PostGIS扩展，请查看官方文档[https://docs.djangoproject.com/en/2.2/ref/contrib/gis/install/postgis/](https://docs.djangoproject.com/en/2.2/ref/contrib/gis/install/postgis/)。
- en: 'Make sure that you use the `postgis` database backend for the Django project:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保为Django项目使用`postgis`数据库后端：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a `locations` app with a `Location` model. It will contain a UUID primary
    key, character fields for the name, street address, city, country, and postal
    code, a PostGIS-related `Geoposition` field, and the `Description` text field:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`locations`应用程序，其中包含一个`Location`模型。它将包含UUID主键，名称、街道地址、城市、国家和邮政编码的字符字段，与PostGIS相关的`Geoposition`字段以及`Description`文本字段：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Overwrite the `save()` method to generate a unique UUID field value when creating
    a location:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 覆盖`save()`方法，在创建位置时生成唯一的UUID字段值：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create methods to get the full address of the location in one string:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建方法来获取位置的完整地址字符串：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create functions to get or set the geoposition by `latitude` and `longitude`—in
    the database, `geoposition` is saved as a `Point` field. We can use these functions
    in the Django shell, forms, management commands, data migrations, and elsewhere:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建函数来通过`latitude`和`longitude`获取或设置地理位置 - 在数据库中，`geoposition`保存为`Point`字段。我们可以在Django
    shell、表单、管理命令、数据迁移和其他地方使用这些函数：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Remember to make and run migrations for the app after updating the model.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在更新模型后，记得为应用程序创建并运行迁移。
- en: 'Create a model administration to add and change locations. Instead of the standard
    `ModelAdmin`, we will be using `OSMGeoAdmin` from the `gis` app. It will render
    a map to set `geoposition` using `OpenStreetMap`, which can be found at [https://www.openstreetmap.org](https://www.openstreetmap.org):'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个模型管理来添加和更改位置。我们将使用`gis`应用程序中的`OSMGeoAdmin`而不是标准的`ModelAdmin`。它将使用`OpenStreetMap`渲染地图以设置`geoposition`，可以在[https://www.openstreetmap.org](https://www.openstreetmap.org)找到。
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Add some locations in the administration for further usage.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在管理中添加一些位置以供进一步使用。
- en: We will use and evolve this `locations` app in further recipes too.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在后续的示例中使用和发展这个`locations`应用程序。
- en: How to do it...
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Go through the following steps:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行：
- en: Register for the Google Maps API key. You can learn how and where to do this
    at the Google developers' documentation at [https://developers.google.com/maps/documentation/javascript/get-api-key](https://developers.google.com/maps/documentation/javascript/get-api-key).
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册Google Maps API密钥。您可以在Google开发人员文档[https://developers.google.com/maps/documentation/javascript/get-api-key](https://developers.google.com/maps/documentation/javascript/get-api-key)中了解如何以及在哪里进行此操作。
- en: 'Add the Google Maps API key to the secrets and then read it out in the settings:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Google Maps API密钥添加到secrets中，然后在设置中读取它：
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'At the core app, create a context processor to expose `GOOGLE_MAPS_API_KEY`
    to the templates:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在核心应用程序中，创建一个上下文处理器来将`GOOGLE_MAPS_API_KEY`暴露给模板：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Refer to this context processor in the template settings:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板设置中引用此上下文处理器：
- en: '[PRE25]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create the list and detail views for the locations:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为位置创建列表和详细视图：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create the URL configuration for the `locations` app:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`locations`应用创建URL配置：
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Include the URLs of the locations in the project''s URL configuration:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的URL配置中包含位置的URL：
- en: '[PRE28]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: It is time to create the template for the location list and location detail
    views. The location list will be as simple as possible for now; we only need it
    to be able to browse the locations and get to the location detail views.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候为位置列表和位置详细视图创建模板了。位置列表现在将尽可能简单；我们只需要能够浏览位置并转到位置详细视图。
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, let''s create a template for the location details by extending the `base.html`
    and overwriting the `content` block:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个模板，通过扩展`base.html`并覆盖`content`块来显示位置详情：
- en: '[PRE30]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Also in the same template, overwrite the `js` block:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的模板中，覆盖`js`块：
- en: '[PRE31]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'As well as the templates, we need the JavaScript file that will read out the
    HTML5 data attributes and use them to render a map with a marker on it:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了模板，我们还需要JavaScript文件，它将读取HTML5数据属性并使用它们来渲染带有标记的地图：
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'For the map to be displayed nicely, we need to set some CSS, as shown in the
    following code:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使地图显示得漂亮，我们需要设置一些CSS，如下面的代码所示：
- en: '[PRE33]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'If you run a local development server and browse to the detail view for a location,
    you will navigate to a page with a map and a marker. When you click on the marker,
    a popup will open with address information. This will look as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在本地开发服务器上运行并浏览位置的详细视图，您将导航到一个带有地图和标记的页面。当您点击标记时，将打开一个包含地址信息的弹出窗口。效果如下：
- en: '![](img/8c20674c-8864-4fbe-9e23-28ea295e8901.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c20674c-8864-4fbe-9e23-28ea295e8901.png)'
- en: 'Since scrolling in maps on mobile devices can be problematic because of scroll-within-scroll
    issues, we have opted to hide the map on small screens (less than or equal to
    480 px width) so that when we resize the screen down, the map eventually becomes
    invisible, as in the following:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 由于移动设备上地图的滚动可能会因为滚动内部滚动问题而出现问题，我们选择在小屏幕上（宽度小于或等于480像素）隐藏地图，这样当我们调整屏幕大小时，地图最终会变得不可见，如下所示：
- en: '![](img/863af8c7-471c-4d13-969e-b99f8da8ef1c.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/863af8c7-471c-4d13-969e-b99f8da8ef1c.png)'
- en: Let's take a look at the code. In the first few steps, we added the Google Maps
    API key and exposed it to all the templates. Then we created views to browse locations
    and plugged them into the URL configuration. Then we created the list and detail
    templates.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看代码。在最初的几个步骤中，我们添加了Google Maps API密钥并将其暴露给所有模板。然后我们创建了浏览位置的视图并将它们插入到URL配置中。然后我们创建了列表和详细模板。
- en: The `template_name` default for a `DetailView` comes from the lowercase version
    of the model's name, plus `detail`; hence; our template was named `location_detail.html`.
    If we wanted to use a different template, we could specify a `template_name` property
    for the view. In the same way, the `template_name` default for a `ListView` comes
    from the lowercase version of the model's name, plus `list`, so it is named `location_list.html`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`DetailView`的`template_name`默认来自模型名称的小写版本，再加上`detail`；因此，我们的模板命名为`location_detail.html`。如果我们想使用不同的模板，可以为视图指定`template_name`属性。同样，`ListView`的`template_name`默认来自模型名称的小写版本，再加上`list`，因此命名为`location_list.html`。'
- en: In the detail template, we had the location title and description followed by
    a `<div>` element with the `id="map"`, as well as the `data-latitude`, `data-longitude`,
    and `data-address` custom attributes. These made up the `content` block elements.
    Two `<script>` tags were added to the `js` block that came at the end of the `<body>`—one
    being the `location_detail.js` described next and the other being the Google Maps
    API script, to which we have passed our Maps API key and the name of the callback
    to invoke when the API loads.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细模板中，我们有位置标题和描述，后面是一个带有`id="map"`的`<div>`元素，以及`data-latitude`、`data-longitude`和`data-address`自定义属性。这些组成了`content`块元素。在`<body>`末尾添加了两个`<script>`标签——一个是下面描述的`location_detail.js`，另一个是Google
    Maps API脚本，我们已经传递了我们的Maps API密钥和API加载时要调用的回调函数的名称。
- en: 'In the JavaScript file, we created a `Location` class using a prototype function.
    This function has a static `init()` method, which was given as the callback to
    the Google Maps API. When `init()` is called, the constructor is invoked to create
    a new singleton `Location` instance. In the constructor function, a series of
    steps are taken to set up the map and its features:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript文件中，我们使用原型函数创建了一个`Location`类。这个函数有一个静态的`init()`方法，它被赋予了Google Maps
    API的回调函数。当调用`init()`时，构造函数被调用以创建一个新的单例`Location`实例。在构造函数中，采取了一系列步骤来设置地图及其特性：
- en: First, the map case (container) is found by its ID. Only if that element is
    found, do we continue.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过其ID找到地图案例（容器）。只有找到该元素，我们才会继续。
- en: Next, we find the geographic coordinates using the `data-latitude` and `data-longitude`
    attributes, storing them in a dictionary as the location's `coords`. This object
    is in the form understood by the Google Maps API and will be used later.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`data-latitude`和`data-longitude`属性找到地理坐标，并将它们存储在字典中作为位置的`coords`。这个对象是Google
    Maps API理解的形式，稍后会用到。
- en: The `data-address` is read next and stored directly as the address property
    of the location.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来读取`data-address`，并直接将其存储为位置的地址属性。
- en: From here, we start building things out, beginning with the map. To ensure that
    the location will be visible, we set the center using the `coords` pulled from
    data attributes earlier.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里开始，我们开始构建东西，从地图开始。为了确保位置可见，我们使用之前从数据属性中提取的`coords`设置中心。
- en: A marker makes the location obvious on the map, positioned using the same `coords`.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个标记使位置在地图上明显可见，使用相同的`coords`定位。
- en: Finally, we build up an information window, which is a type of pop-up bubble
    that can be displayed directly on the map using the API. In addition to the address
    that we retrieved earlier, we look for the location title based on the `.map-title`
    class that it was given in the template. This is added as an `<h1>` heading to
    the window, followed by the address as a `<p>` paragraph. To allow the window
    to be displayed, we add a click event listener to the marker that will open the
    window.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们建立一个信息窗口，这是一种可以直接在地图上显示的弹出气泡，使用API。除了之前检索到的地址，我们还根据模板中给出的`.map-title`类来查找位置标题。这被添加为窗口的`<h1>`标题，后跟地址作为`<p>`段落。为了允许窗口显示，我们在标记上添加了一个点击事件侦听器，它将打开窗口。
- en: See also
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Exposing settings in JavaScript* recipe
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在JavaScript中公开设置*配方'
- en: The *Arranging the base.html template* recipe
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安排base.html模板*配方'
- en: The *Providing responsive images* recipe
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*提供响应式图片*配方'
- en: The *Opening object details in a modal dialog* recipe
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在模态对话框中打开对象详细信息*配方'
- en: The *Inserting a map into a change form* recipe in [Chapter 6](8b8138c4-c364-4616-8a81-b2f369cf870b.xhtml)*,
    Model Administration*
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第6章](8b8138c4-c364-4616-8a81-b2f369cf870b.xhtml)*的*将地图插入更改表单*配方，模型管理'
- en: Providing responsive images
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供响应式图片
- en: As responsive websites became the norm, many performance issues have arisen
    when it comes to providing identical content to both mobile devices and desktop
    computers. One very easy way to reduce the load time of a responsive site on small
    devices is to provide smaller images. This is where the `srcset` and `sizes` attributes,
    key components of responsive images, come into play.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 随着响应式网站成为常态，提供相同内容给移动设备和台式电脑时出现了许多性能问题。在小设备上减少响应式网站的加载时间的一个非常简单的方法是提供更小的图像。这就是响应式图片的关键组件`srcset`和`sizes`属性发挥作用的地方。
- en: Getting ready
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `locations` app that was used in the previous recipe.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从之前的配方中使用的`locations`应用开始。
- en: How to do it...
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Go through the following steps to add the responsive images:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加响应式图片：
- en: 'First of all, let''s install `django-imagekit` into your virtual environment
    and add it to the `requirements/_base.txt`. We''ll be using it to resize original
    images to specific sizes:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们将`django-imagekit`安装到您的虚拟环境中，并将其添加到`requirements/_base.txt`中。我们将使用它来调整原始图像的大小：
- en: '[PRE34]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Put the `"imagekit"` into the `INSTALLED_APPS` in the settings:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置中将`"imagekit"`添加到`INSTALLED_APPS`中：
- en: '[PRE35]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the beginning of the `models.py` file, let''s import some libraries that
    are used for image versions and define a function responsible for the directory
    and the filenames of picture files:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`models.py`文件的开头，让我们导入一些用于图像版本的库，并定义一个负责图片文件的目录和文件名的函数：
- en: '[PRE36]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now let''s add a `picture` field to the `Location` model in the same file together
    with image version definitions:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们在同一个文件中的`Location`模型中添加一个`picture`字段，以及图像版本的定义：
- en: '[PRE37]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Then, overwrite the `delete()` method for the `Location` model to delete the
    generated versions when the model instance is deleted:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，覆盖`Location`模型的`delete()`方法，以在模型实例被删除时删除生成的版本：
- en: '[PRE38]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Make and run migrations to add the new `picture` field to the database schema.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并运行迁移以将新的`picture`字段添加到数据库架构中。
- en: 'Update the location detail template to include the image:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新位置详细模板以包括图像：
- en: '[PRE39]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Finally, add some images for locations in the administration.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在管理中为位置添加一些图像。
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Responsive images are powerful and, at their base, are concerned with providing
    different images based on media rules that indicate the features of the displays
    upon which each image will be shown. The first thing we did here was to add the
    `django-imagekit` app, which makes it possible to generate the different images
    that are needed on the fly.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式图像非常强大，基本上是为了根据指示每个图像将显示在哪些显示器上的媒体规则提供不同的图像。我们在这里做的第一件事是添加`django-imagekit`应用程序，这使得可以动态生成所需的不同图像。
- en: 'Obviously, we also will need the original image source, so in our `Location`
    model, we added an image field called `picture`. In the `upload_to()` function,
    we built the upload path and filename out of the current year and month, the UUID
    of the location, and the same file extension as the uploaded file. We also defined
    the image version specifications there as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们还需要原始图像源，因此在我们的`Location`模型中，我们添加了一个名为`picture`的图像字段。在`upload_to()`函数中，我们根据当前年份和月份、位置的UUID以及与上传文件相同的文件扩展名构建了上传路径和文件名。我们还在那里定义了图像版本规格，如下所示：
- en: '`picture_desktop` will have the dimensions of 1,200 x 600 and will be used
    for the desktop layout'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`picture_desktop`将具有1,200 x 600的尺寸，并将用于桌面布局'
- en: '`picture_tablet` will have the dimensions of 768 x 384 and will be used for
    tablet'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`picture_tablet`将具有768 x 384的尺寸，并将用于平板电脑'
- en: '`picture_mobile` will have the dimensions of 640 x 320 and will be used for
    smartphones'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`picture_mobile`将具有640 x 320的尺寸，并将用于智能手机'
- en: In the `delete()` method of the location, we check whether the `picture` field
    has any value and then try to delete it and its image versions before deleting
    the location itself. We use the `contextlib.suppress(FileNotFoundError)` to silently
    ignore any errors if a file was not found on the disk.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在位置的`delete()`方法中，我们检查`picture`字段是否有任何值，然后尝试在删除位置本身之前删除它及其图像版本。我们使用`contextlib.suppress(FileNotFoundError)`来静默忽略如果在磁盘上找不到文件的任何错误。
- en: 'The most interesting work happens in the template. When a location picture
    exists, we construct our `<picture>` element. On the surface, this is basically
    a container. In fact, it could have nothing inside of it besides the default `<img>`
    tag that appears at the end in our template, though that would not be very useful.
    In addition to the default image, we generate thumbnails for other widths—480
    px and 768 px—and these are then used to build additional `<source>` elements.
    Each `<source>` element has the `media` rule with the conditions under which to
    select an image from the `srcset` attribute value. In our case, we only provide
    one image for each `<source>`. The location detail page will now include the image
    above the map and should look something like this:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 最有趣的工作发生在模板中。当位置图片存在时，我们构建我们的`<picture>`元素。表面上，这基本上是一个容器。实际上，除了在我们的模板中最后出现的默认`<img>`标签之外，它可能什么都没有，尽管那将没有什么用。除了默认图像，我们还为其他宽度生成缩略图—480像素和768像素—然后用它们来构建额外的`<source>`元素。每个`<source>`元素都有`media`规则，规定了在哪些条件下从`srcset`属性值中选择图像。在我们的情况下，我们为每个`<source>`只提供一个图像。位置详细页面现在将包括地图上方的图像，并且应该看起来像这样：
- en: '![](img/b78c4a95-aa79-4d68-b022-2eddd6273330.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b78c4a95-aa79-4d68-b022-2eddd6273330.png)'
- en: 'When the browser loads this markup, it follows a series of steps to determine
    which image to load:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器加载此标记时，它会按照一系列步骤确定要加载哪个图像：
- en: The `media` rules for each `<source>` are inspected in turn, checking to see
    whether any one of them matches the current viewport
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依次检查每个`<source>`的`media`规则，以查看是否有任何一个与当前视口匹配
- en: When a rule matches, the `srcset` is read and the appropriate image URL is loaded
    and displayed
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当规则匹配时，将读取`srcset`并加载和显示适当的图像URL
- en: If no rules match, then the `src` of the final, default image is loaded
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有规则匹配，则加载最终默认图像的`src`
- en: 'As a result, smaller images will be loaded on smaller viewports. For example,
    here we can see that the smallest image was loaded for a viewport only 375 px
    wide:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在较小的视口上将加载较小的图像。例如，我们可以看到仅375像素宽的视口上加载了最小的图像：
- en: '![](img/e8c6084d-1ec5-48d5-8a9a-45514e86db60.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8c6084d-1ec5-48d5-8a9a-45514e86db60.png)'
- en: For browsers that cannot understand the `<picture>` and `<source>` tags at all,
    the default image can still be loaded, as it is nothing more than a normal `<img>`
    tag.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 对于根本无法理解`<picture>`和`<source>`标签的浏览器，仍然可以加载默认图像，因为它只是一个普通的`<img>`标签。
- en: There's more...
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can use responsive images not only to provide targeted image sizes, but
    also to differentiate pixel density, and to provide images that are curated explicitly
    for the design at any given viewport size. This is known as art direction. If
    you are interested in learning more, the **Mozilla Developer Network** (**MDN**)
    has a thorough article on the topic, available at [https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 您不仅可以使用响应式图像来提供针对性的图像尺寸，还可以区分像素密度，并为在任何给定的视口大小上专门为设计精心策划的图像。这被称为艺术指导。如果您有兴趣了解更多信息，**Mozilla开发者网络**（**MDN**）在该主题上有一篇详尽的文章，可在[https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)上找到。
- en: See also
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Arranging the base.html template* recipe
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*排列base.html模板*配方'
- en: The *Using HTML5 data attributes* recipe
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用HTML5数据属性*配方'
- en: The *Opening object details in a modal dialog* recipe
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在模态对话框中打开对象详细信息*配方'
- en: The *Inserting a map into a change form* recipe in [Chapter 6](8b8138c4-c364-4616-8a81-b2f369cf870b.xhtml)*,
    Model Administration*
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第6章](8b8138c4-c364-4616-8a81-b2f369cf870b.xhtml)*的*模型管理*中的*将地图插入更改表单*教程
- en: Implementing a continuous scrolling
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现连续滚动
- en: Social websites often have a feature called continuous scrolling, which is also
    known as infinite scrolling, as an alternative to pagination. Rather than having
    links to see additional sets of items separately, there are long lists of items,
    and, as you scroll down the page, new items are loaded and attached to the bottom
    automatically. In this recipe, we will see how to achieve such an effect with
    Django and the jScroll jQuery plugin.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 社交网站通常具有称为连续滚动的功能，也称为无限滚动，作为分页的替代。与其单独具有查看额外项目集的链接不同，这里有大量项目的长列表，当您向下滚动页面时，新项目将自动加载并附加到底部。在本教程中，我们将看到如何使用Django和jScroll
    jQuery插件实现这样的效果。
- en: You can download the jScroll script and also find extensive documentation about
    the plugin from [https://jscroll.com/](https://jscroll.com/).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://jscroll.com/](https://jscroll.com/)下载jScroll脚本，并在该网站找到有关该插件的详细文档。
- en: Getting ready
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll be reusing the `locations` app that we created in the previous recipes.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用我们在之前的教程中创建的`locations`应用。
- en: 'To have some more interesting data to show in the list view, let''s add the
    `ratings` field to the `Location` model as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在列表视图中显示一些更有趣的数据，让我们将`ratings`字段添加到`Location`模型中，如下所示：
- en: '[PRE40]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `get_rating_percentage()` method will be necessary to return the rating
    as a percentage for the representation.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_rating_percentage()`方法将需要返回评分作为百分比的表示。'
- en: Don't forget to make and run migrations and then add some ratings for locations
    in the administration.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记进行迁移并添加一些位置的评分到管理中。
- en: How to do it...
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Go through the following steps to create a continuously scrolling page:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个连续滚动页面：
- en: First, add enough locations in the administration. As you can see from the *Using
    HTML5 data attributes* recipe, we will be paginating the `LocationList` view by
    10 items per page, so we will need at least 11 locations to see whether the continuous
    scroll works as expected.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在管理中添加足够的位置。正如您从*使用HTML5数据属性*教程中所看到的，我们将通过每页10个项目对`LocationList`视图进行分页，因此我们至少需要11个位置来查看连续滚动是否按预期工作。
- en: 'Modify the template for the location list view as follows:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改位置列表视图的模板如下：
- en: '[PRE41]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In the same template, overwrite the `css` and `js` blocks with the following
    markup:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的模板中，使用以下标记覆盖`css`和`js`块：
- en: '[PRE42]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'As a final step with this template, overwrite the `extra_body` block with the
    JavaScript template for the loading indicator:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为最后一步，使用加载指示器的JavaScript模板覆盖`extra_body`块：
- en: '[PRE43]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Create the page's navigation at `locations/includes/navigation.html`. For now,
    you can just create an empty file there.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`locations/includes/navigation.html`中创建页面导航。现在，您只需在那里创建一个空文件。
- en: 'The next step is to add JavaScript with the initialization of the continuous
    scroll widget:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是添加JavaScript并初始化连续滚动小部件：
- en: '[PRE44]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Finally, we''ll add some CSS so that ratings can be displayed using user-friendly
    stars instead of just numbers:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将添加一些CSS，以便评分可以使用用户友好的星星来显示，而不仅仅是数字。
- en: '[PRE45]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In the main file for the main website style, add a style for the loading indicator:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主网站样式的主文件中，添加一个用于加载指示器的样式：
- en: '[PRE46]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: How it works...
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When you open the location list view in a browser, the predefined number of
    items set to `paginate_by` in the view (that is, 10) is shown on the page. As
    you scroll down, an additional page''s worth of items and the next pagination
    link are loaded automatically and appended to the item container. The pagination
    link uses the `{% modify_query %}` custom template tag from the *Creating a template
    tag to modify request query parameters* recipe in [Chapter 5](c4fd2c24-3a56-4d2d-9ef3-c455e8a626ef.xhtml)*,
    Custom Template Filters and Tags* to generate an adjusted URL based on the current
    one, but pointing to the correct next page number. If you have a slower connection
    speed, then when you scroll to the bottom of the page, you will see a page like
    the following until the items of the next page are loaded and attached to the
    list:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在浏览器中打开位置列表视图时，页面上会显示视图中设置的预定义项目数量（即10）。当您向下滚动时，将自动加载并附加另一页的项目和下一个分页链接到项目容器中。分页链接使用了来自*在[第5章](c4fd2c24-3a56-4d2d-9ef3-c455e8a626ef.xhtml)*的*创建一个模板标签来修改请求查询参数*教程中的`{%
    modify_query %}`自定义模板标签，以根据当前的URL生成一个调整后的URL，但指向正确的下一页编号。如果您的连接速度较慢，那么当您滚动到页面底部时，您将看到一个类似以下的页面，直到加载并附加到列表中的下一页的项目：
- en: '![](img/2948e1d7-aa80-4abb-be32-84570b629cda.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2948e1d7-aa80-4abb-be32-84570b629cda.png)'
- en: Scrolling down further, the second, third, and later pages of the items are
    loaded and attached at the bottom. This continues until there are no more pages
    left to load, which is signified by the lack of any further loaded pagination
    links in the final group.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 向下滚动，项目的第二、第三和以后的页面将在底部加载并附加。这将持续进行，直到没有更多页面需要加载，这是由最终组中没有进一步加载的分页链接来表示的。
- en: We use the Cloudflare CDN URL to load the jScroll plugin here, but, if you opt
    to download a copy locally as a static file, then use a `{% static %}` lookup
    to add the script to the template.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用Cloudflare CDN URL来加载jScroll插件，但是，如果您选择将其作为静态文件下载到本地副本，则可以使用`{% static
    %}`查找将脚本添加到模板中。
- en: Upon the initial page load, the element with the `item-list` CSS class, which
    contains the items and pagination links, will become a jScroll object through
    the code in the `list.js`. In fact, this implementation is generic enough that
    it could be used to enable continuous scrolling for any list display following
    a similar markup structure.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始页面加载时，包含项目和分页链接的具有`item-list` CSS类的元素将通过`list.js`中的代码成为一个jScroll对象。事实上，这个实现是足够通用的，可以用来为任何遵循类似标记结构的列表显示启用连续滚动。
- en: 'The following options are given to define its features:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选项用于定义其功能：
- en: '`loadingHtml`: This sets the markup that jScroll will inject at the end of
    the list while loading a new page of items. In our case, it is an animated loading
    indicator, and it is drawn from the HTML contained in a `<script type="text/template"
    />` tag directly in the markup. By giving this `type` attribute, the browser will
    not try to execute it as it would a normal JavaScript, and the content inside
    remains invisible to the user.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loadingHtml`：这设置了jScroll在加载新项目页面时将注入到列表末尾的标记。在我们的情况下，它是一个动画加载指示器，并且它是直接从标记中的`<script
    type="text/template" />`标签中提取的HTML。通过给出这个`type`属性，浏览器不会像执行普通JavaScript那样尝试执行它，而且内部内容对用户来说仍然是不可见的。'
- en: '`padding`: When the scroll position of the page is within this distance of
    the end of the scrolling area, a new page should be loaded. Here, we''ve set it
    at 100 pixels.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padding`：当页面的滚动位置在滚动区域的末尾距离内时，应加载新页面。在这里，我们将其设置为100像素。'
- en: '`pagingSelector`: A CSS selector that indicates which HTML elements in the `object_list`
    are pagination links. These will be hidden in browsers where the jScroll plugin
    activates so that the continuous scroll can take over the loading of additional
    pages, but users in other browsers will still be able to navigate by clicking
    on the pagination normally.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pagingSelector`：一个CSS选择器，指示`object_list`中的哪些HTML元素是分页链接。在jScroll插件激活的浏览器中，这些链接将被隐藏，以便连续滚动可以接管加载额外页面的工作，但在其他浏览器中，用户仍然可以通过正常点击分页来导航。'
- en: '`nextSelector`: This CSS selector finds the HTML element(s) from which to read
    the URL of the next page.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nextSelector`：此CSS选择器查找要从中读取下一页URL的HTML元素。'
- en: '`contentSelector`: Another CSS selector. This specifies which HTML elements
    should be extracted from the Ajax-loaded content and added to the container.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contentSelector`：另一个CSS选择器。这指定应从Ajax加载的内容中提取哪些HTML元素，并添加到容器中。'
- en: The `rating.css` inserts Unicode star characters and overlaps the outlines with
    filled-in versions to create the rating effect. Using a width equivalent to the
    rating value's percentage of the maximum (5, in this case), the filled-in stars
    cover the right amount of space on top of the hollow ones, allowing for decimal
    ratings. In the markup, there is an `aria-label` attribute with the rating information
    for people using screen readers.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`rating.css`插入Unicode星字符，并将轮廓与填充版本重叠，以创建评级效果。使用与评级值百分比的最大值（在本例中为5）相当的宽度，填充的星星覆盖了空心星星的适当空间，允许小数评级。在标记中，有一个`aria-label`属性，其中包含供使用屏幕阅读器的人使用的评级信息。'
- en: Finally, the CSS in the `style.css` file uses CSS animations to create a rotating
    loading indicator.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`style.css`文件中的CSS使用CSS动画来创建旋转加载指示器。
- en: There's more...
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We have a placeholder for navigation in the sidebar. Note that, with continuous
    scrolling, all the secondary navigation that you have after the list of items,
    should be positioned in the sidebar, rather than in the footer, because the visitor
    might never reach the end of the page.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在侧边栏中有一个导航的占位符。请注意，使用连续滚动时，所有项目列表后面的所有次要导航应该放在侧边栏中，而不是页脚中，因为访问者可能永远不会到达页面的末尾。
- en: See also
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Filtering object lists* recipe in [Chapter 3](ac26c6a6-3fd1-4b28-8b01-5b3cda40f4f9.xhtml)*,
    Forms and Views*
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](ac26c6a6-3fd1-4b28-8b01-5b3cda40f4f9.xhtml)*，表单和视图*中的*过滤对象列表*食谱
- en: The *Managing paginated lists* recipe in [Chapter 3](ac26c6a6-3fd1-4b28-8b01-5b3cda40f4f9.xhtml)*,
    Forms and Views*
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](ac26c6a6-3fd1-4b28-8b01-5b3cda40f4f9.xhtml)*，表单和视图*中的*管理分页列表*食谱
- en: The *Composing class-based views* recipe in [Chapter 3](ac26c6a6-3fd1-4b28-8b01-5b3cda40f4f9.xhtml)*,
    Forms and Views*
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](ac26c6a6-3fd1-4b28-8b01-5b3cda40f4f9.xhtml)*，表单和视图*中的*组合基于类的视图*食谱
- en: The *Exposing settings in JavaScript* recipe
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在JavaScript中公开设置*食谱'
- en: The *Creating a template tag to modify request query parameters* recipe in [Chapter
    5](c4fd2c24-3a56-4d2d-9ef3-c455e8a626ef.xhtml)*, Customizing Template Filters
    and Tags*
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第5章](c4fd2c24-3a56-4d2d-9ef3-c455e8a626ef.xhtml)*，自定义模板过滤器和标签*中的*创建模板标签以修改请求查询参数*食谱'
- en: Opening object details in a modal dialog
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模态对话框中打开对象详细信息
- en: 'In this recipe, we will create a list of links to the locations, which, when
    clicked, open a Bootstrap modal dialog with some information about the location
    and the Learn more… link, leading to the location detail page:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将创建一个到位置的链接列表，当点击时，会打开一个Bootstrap模态对话框，显示有关位置的一些信息和`了解更多...`链接，指向位置详细页面：
- en: '![](img/f93ba181-3a7d-4d41-a8b3-e783ff344a42.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f93ba181-3a7d-4d41-a8b3-e783ff344a42.png)'
- en: The content for the dialog will be loaded by Ajax. For visitors without JavaScript,
    the detail page will open immediately, without this intermediate step.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框的内容将通过Ajax加载。对于没有JavaScript的访问者，详细页面将立即打开，而不需要这个中间步骤。
- en: Getting ready
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `locations` app that we created in the previous recipes.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从之前创建的`locations`应用程序开始。
- en: Make sure that you have views, URL configuration, and templates for location
    listings and location details, just like we defined previously.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您有视图、URL配置和位置列表和位置详细信息的模板，就像我们之前定义的那样。
- en: How to do it...
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Execute these steps one by one to add the modal dialog as an intermediate step
    between the list view and the detail view:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 逐步执行这些步骤，将模态对话框作为列表视图和详细视图之间的中间步骤添加：
- en: 'First, in the URL configuration of the `locations` app, add a rule for the
    response of the modal dialog:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`locations`应用程序的URL配置中，为模态对话框的响应添加一个规则：
- en: '[PRE47]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Create a template for the modal dialog:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为模态对话框创建一个模板：
- en: '[PRE48]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In the template for the location list, update the links to the location details
    by adding custom data attributes:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在位置列表的模板中，通过添加自定义数据属性来更新到位置详细信息的链接：
- en: '[PRE49]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In the same file, overwrite the `extra_body` content with the markup for the
    modal dialog:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个文件中，使用模态对话框的标记覆盖`extra_body`内容：
- en: '[PRE50]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Finally, modify the `list.js` file by adding a script to handle the opening
    and closing of the modal dialog:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过添加脚本来修改`list.js`文件，以处理模态对话框的打开和关闭：
- en: '[PRE51]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: How it works...
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If we go to the location''s list view in a browser and click on one of the
    locations, we will see a modal dialog similar to the following:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中转到位置列表视图并点击其中一个位置，我们将看到类似以下的模态对话框：
- en: '![](img/c4b70236-157e-481e-8fbd-af5d0b87ca88.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4b70236-157e-481e-8fbd-af5d0b87ca88.png)'
- en: Let's examine how this all came together. The URL path named `location_detail_modal` points
    to the same location detail view, but uses a different template. The mentioned
    template just has a responsive image and a modal dialog footer with the link Learn
    more… leading to the normal detail page of the location. In the list view, we
    changed the link of a list item to include `data-modal-title` and `data-modal-url`
    attributes that will later be referred to by JavaScript. The first attribute stipulates
    that the full address should be used as the title. The second attribute stipulates
    the location from which the HTML for the body of the modal dialog should be taken.
    At the end of the list view, we have the markup for the Bootstrap 4 modal dialog. The
    dialog contains a header with the Close button and title, plus a content area
    for the main details. JavaScript should have been added via the `js` block.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们来看看这是如何一起实现的。名为`location_detail_modal`的URL路径指向相同的位置详细视图，但使用不同的模板。提到的模板只有一个响应式图像和一个带有链接“了解更多…”的模态对话框页脚，该链接指向位置的正常详细页面。在列表视图中，我们更改了列表项的链接，以包括稍后JavaScript将引用的`data-modal-title`和`data-modal-url`属性。第一个属性规定应将完整地址用作标题。第二个属性规定应从模态对话框的主体中获取的位置。在列表视图的末尾，我们有Bootstrap
    4模态对话框的标记。对话框包含一个带有关闭按钮和标题的页眉，以及用于主要详细信息的内容区域。JavaScript应该通过`js`块添加。 '
- en: In the JavaScript file, we used the jQuery framework to take advantage of shorter
    syntax and unified cross-browser functionality. When the page is loaded, we assign
    an event handler `on('click')` for the `.item-list` element. When any `a.item`
    is clicked, that event is delegated to this handler, which reads and stores the
    custom data attributes as the `url` and `title`. When these are extracted successfully,
    we prevent the original click action (navigation to the full detail page) and
    then set up the modal for display. We set the new title for the hidden dialog
    box and load the modal dialog's content to the `.modal-body` element over Ajax.
    Finally, the modal is shown to the visitor using the Bootstrap 4 `modal()` jQuery
    plugin.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript文件中，我们使用了jQuery框架来利用更短的语法和统一的跨浏览器功能。当页面加载时，我们为`.item-list`元素分配了一个事件处理程序`on('click')`。当点击任何`a.item`时，该事件被委派给这个处理程序，该处理程序读取并存储自定义数据属性作为`url`和`title`。当这些成功提取时，我们阻止原始点击操作（导航到完整的详细页面），然后设置模态进行显示。我们为隐藏的对话框设置新标题，并通过Ajax将模态对话框的内容加载到`.modal-body`元素上。最后，使用Bootstrap
    4的`modal()` jQuery插件向访问者显示模态。
- en: If the JavaScript file were unable to process the URL of the modal dialog from
    the custom attribute, or, even worse, if the JavaScript in `list.js` failed to
    load or execute entirely, clicking on the location link would take the user to
    the detail page as usual. We have implemented our modal as a progressive enhancement
    so that the user experience is right, even in the face of failure.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如果JavaScript文件无法处理模态对话框的URL自定义属性，或者更糟糕的是，如果`list.js`中的JavaScript加载或执行失败，点击位置链接将像往常一样将用户带到详细页面。我们已经将我们的模态实现为渐进增强，以便用户体验正确，即使面临失败。
- en: See also
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using HTML5 data attributes* recipe
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用HTML5数据属性*配方'
- en: The *Providing responsive images* recipe
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*提供响应式图像*配方'
- en: The *Implementing a continuous scroll* recipe
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现连续滚动*配方'
- en: The *Implementing the Like widget* recipe
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现“喜欢”小部件*配方'
- en: Implementing the Like widget
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现“喜欢”小部件
- en: Websites in general, and most commonly those with a social component, often
    have integrated Facebook, Twitter, and Google+ widgets to like and share content.
    In this recipe, we will guide you through the building of a similar Django functionality
    that will save information in your database whenever a user likes something. You
    will be able to create specific views based on the things that people liked on
    your website. We will similarly create a Like widget with a two-state button and
    badge showing the number of total likes.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，网站，尤其是那些具有社交组件的网站，通常会集成Facebook、Twitter和Google+小部件，以喜欢和分享内容。在这个配方中，我们将指导您通过构建类似的Django功能，每当用户喜欢某物时，都会将信息保存在您的数据库中。您将能够根据用户在您的网站上喜欢的内容创建特定的视图。我们将类似地创建一个带有两状态按钮和显示总喜欢数量的徽章的“喜欢”小部件。
- en: 'The following screenshot shows the inactive state, where you can click on a
    button to activate it:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了非活动状态，您可以单击按钮将其激活：
- en: '![](img/23f86171-835d-4e79-9cf7-bed1d813c640.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23f86171-835d-4e79-9cf7-bed1d813c640.png)'
- en: 'The following screenshot shows the active state, where you can click on a button
    to deactivate it:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了活动状态，您可以单击按钮将其停用：
- en: '![](img/8250c25a-a30f-45ad-910e-0d70add86524.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8250c25a-a30f-45ad-910e-0d70add86524.png)'
- en: Changes in the state of the widget will be handled by Ajax calls.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件状态的更改将通过Ajax调用处理。
- en: Getting ready
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'First, create a `likes` app and add it to your `INSTALLED_APPS`. Then, set
    up a `Like` model, which has a foreign-key relation to the user who is liking
    something and a generic relationship to any object in the database. We will use
    `object_relation_base_factory`, which we defined in the *Creating a model mixin
    to handle generic relations* recipe in [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*,
    Models and Database Structure*. If you don''t want to use the mixin, you can also
    define a generic relation in the following model yourself:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个`likes`应用程序并将其添加到`INSTALLED_APPS`中。然后，设置一个`Like`模型，该模型与喜欢某物的用户具有外键关系，并且与数据库中的任何对象具有通用关系。我们将使用我们在[第2章](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*，模型和数据库结构*中定义的`object_relation_base_factory`，该工厂用于处理通用关系的模型混合。如果您不想使用混合，您也可以自己在以下模型中定义通用关系：
- en: '[PRE52]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Also make sure that the `request` context processor is set in the settings.
    We also need authentication middleware in the settings for the currently logged-in
    user to be attached to the request:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 还要确保在设置中设置了`request`上下文处理器。我们还需要在设置中添加身份验证中间件，以便将当前登录的用户附加到请求：
- en: '[PRE53]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Remember to create and run a migration to set up the database accordingly for
    the new `Like` model.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 记得创建并运行迁移，以便为新的`Like`模型设置数据库。
- en: How to do it...
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Execute the following steps one by one:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 逐步执行以下步骤：
- en: 'In the `likes` app, create a `templatetags` directory with an empty `__init__.py`
    file to make it a Python module. Then, add the `likes_tags.py` file, where we''ll
    define the `{% like_widget %}` template tag as follows:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`likes`应用程序中，创建一个带有空`__init__.py`文件的`templatetags`目录，使其成为Python模块。然后，添加`likes_tags.py`文件，在其中定义`{%
    like_widget %}`模板标记如下：
- en: '[PRE54]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We''ll also add filters in the same file to get the Like status for a user
    and the total number of Likes for a specified object:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将在同一文件中添加过滤器，以获取用户的Like状态以及指定对象的总Like数：
- en: '[PRE55]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'In the URL rules, we need a rule for a view that will handle the liking and
    unliking using Ajax:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在URL规则中，我们需要一个处理使用Ajax进行点赞和取消点赞的视图规则：
- en: '[PRE56]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Make sure that you map the URLs to the project as well:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将URL映射到项目：
- en: '[PRE57]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Then we need to define the view, as shown in the following code:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要定义视图，如下所示：
- en: '[PRE58]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'In the template for the list or detail view of any object, we can add the template
    tag for the widget. Let''s add the widget to the location detail that we created
    in the previous recipes, as follows:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何对象的列表或详细视图模板中，我们可以添加小部件的模板标记。让我们将小部件添加到先前食谱中创建的位置详细信息中，如下所示：
- en: '[PRE59]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Then, we need a template for the widget, as shown in the following code:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要一个小部件的模板，如下所示：
- en: '[PRE60]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Finally, we create JavaScript to handle the liking and unliking action in the
    browser, as follows:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们创建JavaScript来处理浏览器中的点赞和取消点赞操作，如下所示：
- en: '[PRE61]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: How it works...
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You can now use the `{% like_widget for object %}` template tag for any object
    in your website. It generates a widget that will show the Like state based on
    whether and how the current logged-in user has responded to the object.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以为网站中的任何对象使用`{% like_widget for object %}`模板标记。它生成一个小部件，根据当前登录用户对对象的响应方式显示Like状态。
- en: 'The Like button has three custom HTML5 data attributes:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: Like按钮有三个自定义的HTML5数据属性：
- en: '`data-href` supplies a unique, object-specific URL to change the current state
    of the widget'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-href`提供了一个唯一的、特定于对象的URL，用于更改小部件的当前状态'
- en: '`data-add-text` is the translated text to be displayed when the `Like` association
    has been added (`Unlike`)'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-add-text`是在添加`Like`关联时要显示的翻译文本（取消关联）'
- en: '`data-remove-text` is similarly the translated text for when the `Like` association
    has been removed (`Like`)'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-remove-text`类似地是在取消`Like`关联时要显示的翻译文本（Like）'
- en: Using `django-sekizai`, we add the `<script src="img/widget.js' %}"></script>`
    to the page. Note that, if there were more than one `Like` widget on the page,
    we would just include the JavaScript once. And, if there were no `Like` widgets
    on the page, then the JavaScript wasn't included on the page at all.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`django-sekizai`，我们将`<script src="img/widget.js' %}"></script>`添加到页面。请注意，如果页面上有多个`Like`小部件，我们只需包含JavaScript一次。如果页面上没有`Like`小部件，则根本不会在页面上包含JavaScript。
- en: In the JavaScript file, `Like` buttons are recognized by the `like-button` CSS
    class. An event listener, attached to the document, watches for click events from
    any such button found in the page, and then posts an Ajax call to the URL specified
    by the `data-href` attribute.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript文件中，`Like`按钮由`like-button` CSS类识别。附加到文档的事件侦听器会监视页面中找到的任何此类按钮的单击事件，然后将Ajax调用发布到`data-href`属性指定的URL。
- en: 'The specified view `json_set_like` accepts two parameters: the content type
    ID and the primary key of the liked object. The view checks whether a `Like` exists
    for the specified object, and if it does, the view removes it; otherwise, the
    `Like` object is added. As a result, the view returns a JSON response with the
    `success` status, the action that was taken for the `Like` object (add or remove),
    and the total count of Likes for the object across all users. Depending on the
    action that is returned, JavaScript will show an appropriate state for the button.'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 指定的视图`json_set_like`接受两个参数：内容类型ID和喜欢的对象的主键。视图检查指定对象是否存在`Like`，如果存在，则删除它；否则，添加`Like`对象。因此，视图返回带有`success`状态的JSON响应，对于对象的`Like`对象采取的操作（添加或删除）以及所有用户对对象的喜欢总数。根据返回的操作，JavaScript将显示按钮的适当状态。
- en: 'You can debug the Ajax responses in the browser''s developer tools, generally
    in the Network tab. If any server errors occur while you are developing, and you
    have `DEBUG` turned on in your settings, you will see the error traceback in the
    preview of the response; otherwise, you will see the returned JSON, as shown in
    the following screenshot:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在浏览器的开发者工具中调试Ajax响应，通常在网络选项卡中。如果在开发过程中发生任何服务器错误，并且在设置中打开了`DEBUG`，您将在响应的预览中看到错误的回溯；否则，您将看到返回的JSON，如下面的屏幕截图所示：
- en: '![](img/a24ff8e1-66e3-4bb5-9af1-6d170f573366.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24ff8e1-66e3-4bb5-9af1-6d170f573366.png)'
- en: See also
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using Django Sekizai* recipe
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Django Sekizai食谱
- en: The *Opening object details in a modal dialog* recipe
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在模态对话框中打开对象详细信息*食谱'
- en: The *Implementing a continuous scroll* recipe
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现连续滚动*食谱'
- en: The *Uploading images by Ajax* recipe
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Ajax上传图片的食谱
- en: The *Creating a model mixin to handle generic relations* recipe in [Chapter
    2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*,*  *Models and Database Structure*
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*,*  *模型和数据库结构*中创建一个处理通用关系的模型mixin的食谱
- en: '[Chapter 5](c4fd2c24-3a56-4d2d-9ef3-c455e8a626ef.xhtml)*, Customizing Template
    Filters and Tags*'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第5章](c4fd2c24-3a56-4d2d-9ef3-c455e8a626ef.xhtml)*，自定义模板过滤器和标记*'
- en: Uploading images via Ajax
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Ajax上传图片
- en: 'With the default file input fields, it quickly becomes obvious that there is
    a lot we could do to improve the user experience:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认文件输入字段，很快就会发现我们可以做很多事情来改善用户体验：
- en: First, only the path to the selected file is displayed within the field, whereas
    people want to see what they have chosen right after selecting the file.
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，只有所选文件的路径显示在字段内，而人们希望在选择文件后立即看到他们选择的内容。
- en: Second, the file input itself is generally too narrow to show much of the path
    selected and reads from the left end. As a result, the filename is rarely visible
    within the field.
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，文件输入本身通常太窄，无法显示所选路径的大部分内容，并且从左端读取。因此，文件名很少在字段内可见。
- en: Finally, if the form has validation errors, nobody wants to select the files
    again; the file should still be selected in the form with validation errors.
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，如果表单有验证错误，没有人想再次选择文件；文件应该仍然在具有验证错误的表单中被选中。
- en: In this recipe, we will see how the file uploads could be improved.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到如何改进文件上传。
- en: Getting ready
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `locations` app that we created in the previous recipes.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从我们在之前的示例中创建的`locations`应用程序开始。
- en: Our own JavaScript file will rely upon an external library–jQuery File Upload. You
    can download and extract the files from [https://github.com/blueimp/jQuery-File-Upload/tree/v10.2.0](https://github.com/blueimp/jQuery-File-Upload/tree/v10.2.0) and
    place them in `site_static/site/vendor/jQuery-File-Upload-10.2.0`. This utility
    also requires the `jquery.ui.widget.js` in turn, which is made available in a
    `vendor/` subdirectory alongside the other files. With that, we're ready to begin.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们自己的JavaScript文件将依赖于外部库 - jQuery文件上传。您可以从[https://github.com/blueimp/jQuery-File-Upload/tree/v10.2.0](https://github.com/blueimp/jQuery-File-Upload/tree/v10.2.0)下载并提取文件，并将它们放在`site_static/site/vendor/jQuery-File-Upload-10.2.0`中。该实用程序还需要`jquery.ui.widget.js`，该文件可在`vendor/`子目录中与其他文件一起使用。有了这些，我们就可以开始了。
- en: How to do it...
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s define the form for the locations so that it can support Ajax uploads
    using the following steps:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义位置表单，以便它可以支持使用以下步骤进行Ajax上传：
- en: 'Let''s create a model form for the locations with the nonrequired `picture`
    field, a hidden `picture_path` field, and `latitude` and `longitude` fields for
    `geoposition`:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为具有非必需的`picture`字段、隐藏的`picture_path`字段和`geoposition`的`latitude`和`longitude`字段创建一个模型表单：
- en: '[PRE62]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In the `__init__()` method of this form, we will read out the geoposition from
    the model instance, and then define the `django-crispy-forms` layout for the form:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此表单的`__init__()`方法中，我们将从模型实例中读取地理位置，然后为表单定义`django-crispy-forms`布局：
- en: '[PRE63]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Then we need to add the validation for the `picture` and `picture_path` fields
    to the same form:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们需要为同一表单的`picture`和`picture_path`字段添加验证：
- en: '[PRE64]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Lastly, we add the saving method to this form, which will take care of the
    saving of the image and geoposition:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将为此表单添加保存方法，该方法将负责保存图像和地理位置：
- en: '[PRE65]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'In addition to the previously defined views in the `locations` app, we''ll
    add an `add_or_change_location` view, as shown in the following code:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了`locations`应用程序中先前定义的视图之外，我们将添加一个`add_or_change_location`视图，如下面的代码所示：
- en: '[PRE66]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Let''s add this view to the URL configuration:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将此视图添加到URL配置中：
- en: '[PRE67]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'In the views of the `core` app, we will add a generic `upload_file` function to
    upload pictures that can be reused by other apps with a `picture` field:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`core`应用程序的视图中，我们将添加一个通用的`upload_file`函数，用于上传可以被具有`picture`字段的其他应用程序重用的图片：
- en: '[PRE68]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'We set the URL rules for the new upload view as follows:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为新的上传视图设置URL规则如下：
- en: '[PRE69]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Now let''s create a template for the location form as follows:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建一个如下所示的位置表单模板：
- en: '[PRE70]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'We need a couple more templates. Create a custom template for the file upload
    field that will include the necessary CSS and JavaScript:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要几个更多的模板。为文件上传字段创建一个自定义模板，其中将包括必要的CSS和JavaScript：
- en: '[PRE71]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Next, let''s create a template for the picture preview:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们为图片预览创建一个模板：
- en: '[PRE72]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Finally, let''s add the JavaScript that will handle picture uploads and previews:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们添加处理图片上传和预览的JavaScript：
- en: '[PRE73]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: How it works...
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'If the JavaScript fails to execute, then the form remains completely usable,
    but when the JavaScript runs properly, we get an enhanced form with the file field
    replaced by a simple button, as shown here:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 如果JavaScript执行失败，则表单仍然完全可用，但是当JavaScript正常运行时，我们将获得一个增强的表单，其中文件字段被一个简单的按钮替换，如下所示：
- en: '![](img/67897e34-1f8c-4314-a211-2401de47de4b.png)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67897e34-1f8c-4314-a211-2401de47de4b.png)'
- en: 'When an image is selected by clicking on the Upload File… button, the result
    in the browser will look similar to the following screenshot:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过单击“上传文件…”按钮选择图像时，浏览器中的结果将类似于以下屏幕截图：
- en: '![](img/7a2b2812-3d9e-4d80-bfc3-a27f59553baf.png)'
  id: totrans-376
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a2b2812-3d9e-4d80-bfc3-a27f59553baf.png)'
- en: Clicking on the Upload File… the button triggers a file dialog that asks you
    to select a file, and, upon selection, it immediately starts the Ajax upload process.
    Then we see a preview of the image that has been attached. The preview picture
    is uploaded to a temporary directory and its filename is saved at the `picture_path`
    hidden field. When you submit the form, the form either saves the picture from
    this temporary location or from the `picture` field. The `picture` field will
    have a value if the form was submitted without JavaScript or if it failed to load
    the JavaScript. If there are any validation errors for the other fields after
    the page reload, then the preview image loaded is based on the `picture_path`.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“上传文件…”按钮会触发一个文件对话框，要求您选择文件，并在选择后立即开始Ajax上传过程。然后我们会看到已附加的图像的预览。预览图片上传到临时目录，并且其文件名保存在`picture_path`隐藏字段中。当您提交表单时，表单会从此临时位置或`picture`字段保存图片。如果表单是在没有JavaScript或JavaScript加载失败的情况下提交的，则`picture`字段将具有一个值。如果在页面重新加载后其他字段有任何验证错误，则加载的预览图像基于`picture_path`。
- en: Let's run through the steps to dig deeper into the process and see how it works.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤深入了解该过程并看看它是如何工作的。
- en: In our model form for the `Location` model, we made the `picture` field nonrequired,
    although it is required at the model level. In addition, we added the `picture_path`
    field there, and then we expect either of those fields to be submitted to the
    form. In the `crispy-forms` layout, we defined a custom template for the `picture`
    field, `file_upload_field.html`. There, we set a preview image, upload progress
    bar, and custom help text with the allowed file formats and minimal dimensions.
    In the same template, we also attached the CSS and JavaScript files from the jQuery
    File Upload library and a custom script, `picture_upload.js`. The CSS files rendered
    the file upload field as a nice button. The JavaScript files are responsible for
    the Ajax-based file upload.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的“位置”模型的模型表单中，我们将“图片”字段设置为非必填，尽管在模型级别上是必需的。此外，我们在那里添加了“picture_path”字段，然后我们期望其中任何一个字段被提交到表单中。在“crispy-forms”布局中，我们为“picture”字段定义了一个自定义模板“file_upload_field.html”。在那里，我们设置了预览图像、上传进度条和自定义帮助文本，其中包括允许的文件格式和最小尺寸。在同一个模板中，我们还附加了来自jQuery文件上传库的CSS和JavaScript文件以及一个自定义脚本“picture_upload.js”。CSS文件将文件上传字段呈现为一个漂亮的按钮。JavaScript文件负责基于Ajax的文件上传。
- en: The `picture_upload.js` sent the selected file to the `upload_file` view. This
    view checked whether the file is of an image type and then tries to save it under
    the `temporary-uploads/` directory under the project's `MEDIA_ROOT`. The view
    returned a JSON with the details about a successful or unsuccessful file upload.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: “picture_upload.js”将所选文件发送到“upload_file”视图。该视图检查文件是否为图像类型，然后尝试将其保存在项目的“MEDIA_ROOT”下的“temporary-uploads/”目录中。该视图返回一个JSON，其中包含有关成功或失败的文件上传的详细信息。
- en: After a picture has been selected and uploaded and the form submitted, the `save()`
    method of `LocationForm` will be called. If the `picture_path` field value exists,
    a file will be taken from the temporary directory and copied to the `picture`
    field of the `Location` model. Then the picture at the temporary directory gets
    deleted and the `Location` instance is saved.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择并上传图片并提交表单后，“LocationForm”的“save（）”方法将被调用。如果“picture_path”字段的值存在，则将从临时目录中取出文件并复制到“Location”模型的“picture”字段中。然后删除临时目录中的图片，并保存“Location”实例。
- en: There's more...
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We exclude the `geoposition` field from the model form and instead render the `latitude`
    and `longitude` fields for the geoposition data. The default geoposition's `PointField` is
    rendered as a `Leaflet.js` map with no possibilities to customize it. With the
    two `latitude` and `longitude` fields, we are flexible and can make use of the
    Google Maps API, Bing Maps API, or `Leaflet.js` to show them in a map, enter manually,
    or geocode them from the filled-in location address.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从模型表单中排除了“geoposition”字段，而是为地理位置数据呈现了“纬度”和“经度”字段。默认的地理位置“PointField”被呈现为一个没有自定义可能性的“Leaflet.js”地图。通过这两个“纬度”和“经度”字段，我们可以灵活地利用Google
    Maps API、Bing Maps API或“Leaflet.js”来在地图中显示它们，手动输入，或者从填写的位置地址中进行地理编码。
- en: For convenience, we use two helper methods, `get_geoposition()` and `set_geoposition()`,
    which we defined earlier in the *Using HTML5 data attributes* recipe.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，我们使用了两个辅助方法“get_geoposition（）”和“set_geoposition（）”，这些方法我们在“使用HTML5数据属性”配方中定义过。
- en: See also
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using HTML5 data attributes* recipe
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“使用HTML5数据属性”配方中
- en: The *Uploading images* recipe in [Chapter 3](ac26c6a6-3fd1-4b28-8b01-5b3cda40f4f9.xhtml)*,
    Forms and Views*
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“第3章”（ac26c6a6-3fd1-4b28-8b01-5b3cda40f4f9.xhtml）的“表单和视图”中的“上传图片”配方
- en: The *Opening object details in a modal dialog* recipe
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“以模态对话框形式打开对象详细信息”配方中
- en: The *Implementing a continuous scroll* recipe
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“实现连续滚动”配方中
- en: The *Implementing the Like widget* recipe
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“实现点赞小部件”配方中
- en: The *Making forms secure from cross-site request forgery (CSRF)* recipe in [Chapter
    7](0d629161-25ac-4edc-a361-aff632f37b33.xhtml)*, Security and Performance*
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“第7章”（0d629161-25ac-4edc-a361-aff632f37b33.xhtml）的“安全性和性能”中的“使表单免受跨站请求伪造（CSRF）”配方
