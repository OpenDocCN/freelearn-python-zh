- en: Chapter 1. Introduction to Django and Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Django简介和入门
- en: Introducing Django
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Django
- en: Great open source software almost always comes about because one or more clever
    developers had a problem to solve and no viable or cost effective solution available.
    Django is no exception. Adrian and Jacob have long since *retired* from the project,
    but the fundamentals of what drove them to create Django live on. It is this solid
    base of real-world experience that has made Django as successful as it is. In
    recognition of their contribution, I think it best we let them introduce Django
    in their own words (edited and reformatted from the original book).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有优秀的开源软件都是因为一个或多个聪明的开发人员有问题需要解决，而没有可行或成本效益的解决方案。Django也不例外。Adrian和Jacob早已从项目中*退休*，但是驱使他们创建Django的基本原因仍然存在。正是这种扎实的实际经验基础使Django如此成功。为了表彰他们的贡献，我认为最好让他们用自己的话（从原书中编辑和重新格式化）介绍Django。
- en: '*By Adrian Holovaty and Jacob Kaplan-Moss-December 2009*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*Adrian Holovaty和Jacob Kaplan-Moss-2009年12月*'
- en: In the early days, web developers wrote every page by hand. Updating a website
    meant editing HTML; a *redesign* involved redoing every single page, one at a
    time. As websites grew and became more ambitious, it quickly became obvious that
    that approach was tedious, time-consuming, and ultimately untenable.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期，网页开发人员手工编写每个页面。更新网站意味着编辑HTML；*重新设计*涉及逐个重新制作每个页面。随着网站的增长和变得更加雄心勃勃，很快就显而易见，这种方法是乏味、耗时且最终是不可持续的。
- en: 'A group of enterprising hackers at **National Center for Supercomputing Applications**
    (the **NCSA** where Mosaic, the first graphical web browser, was developed) solved
    this problem by letting the web server spawn external programs that could dynamically
    generate HTML. They called this protocol the **Common Gateway Interface** (**CGI**),
    and it changed the web forever. It''s hard now to imagine what a revelation CGI
    must have been: instead of treating HTML pages as simple files on disk, CGI allows
    you to think of your pages as resources generated dynamically on demand.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**国家超级计算应用中心**（**NCSA**，开发了第一个图形化网页浏览器Mosaic的地方）的一群有进取心的黑客解决了这个问题，让Web服务器生成可以动态生成HTML的外部程序。他们称这个协议为**通用网关接口**（**CGI**），它彻底改变了Web。现在很难想象CGI必须是多么大的突破：CGI允许你将HTML页面视为根据需要动态生成的资源，而不是简单的磁盘文件。'
- en: 'The development of CGI ushered in the first generation of dynamic websites.
    However, CGI has its problems: CGI scripts need to contain a lot of repetitive
    **boilerplate** code, they make code reuse difficult, and they can be difficult
    for first-time developers to write and understand.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: CGI的发展开创了动态网站的第一代。然而，CGI也有它的问题：CGI脚本需要包含大量重复的**样板**代码，它们使代码重用变得困难，对于初学者来说编写和理解也很困难。
- en: 'PHP fixed many of these problems, and it took the world by storm—it is now
    the most popular tool used to create dynamic websites, and dozens of similar languages
    (ASP, JSP, and so on.) followed PHP''s design closely. PHP''s major innovation
    is its ease of use: PHP code is simply embedded into plain HTML; the learning
    curve for someone who already knows HTML is extremely shallow.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: PHP解决了许多这些问题，并风靡全球——它现在是用于创建动态网站的最流行工具，并且有数十种类似的语言（如ASP、JSP等）都紧随PHP的设计。PHP的主要创新在于它的易用性：PHP代码简单地嵌入到普通HTML中；对于已经了解HTML的人来说，学习曲线极其浅。
- en: But PHP has its own problems; it is very ease of use encourages sloppy, repetitive,
    ill-conceived code. Worse, PHP does little to protect programmers from security
    vulnerabilities, and thus many PHP developers found themselves learning about
    security only once it was too late.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但是PHP也有自己的问题；它非常容易使用，鼓励编写松散、重复、考虑不周的代码。更糟糕的是，PHP几乎没有保护程序员免受安全漏洞的影响，因此许多PHP开发人员发现自己只有在为时已晚时才学习安全知识。
- en: These and similar frustrations led directly to the development of the current
    crop of *third-generation* web development frameworks. With this new explosion
    of web development comes yet another increase in ambition; web developers are
    expected to do more and more every day.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些和类似的挫折直接导致了当前一批*第三代*Web开发框架的发展。随着这一新的Web开发潮流的兴起，人们对Web开发人员的期望也在不断增加。
- en: Django was invented to meet these new ambitions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Django的发展是为了满足这些新的期望。
- en: Django's history
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django的历史
- en: Django grew organically from real-world applications written by a web development
    team in Lawrence, Kansas, USA. It was born in the fall of 2003, when the web programmers
    at the *Lawrence Journal-World* newspaper, Adrian Holovaty, and Simon Willison,
    began using Python to build applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Django是在美国堪萨斯州劳伦斯的Web开发团队编写的真实应用程序的基础上有机地发展起来的。它诞生于2003年秋天，当时《劳伦斯日报》报纸的Web程序员Adrian
    Holovaty和Simon Willison开始使用Python构建应用程序。
- en: The World Online team, responsible for the production and maintenance of several
    local news sites, thrived in a development environment dictated by journalism
    deadlines. For the sites—including LJWorld.com, Lawrence.com, and KUsports.com—journalists
    (and management) demanded that features be added and entire applications be built
    on an intensely fast schedule, often with only day's or hour's notice. Thus, Simon
    and Adrian developed a time-saving web development framework out of necessity—it
    was the only way they could build maintainable applications under the extreme
    deadlines.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 负责制作和维护几个本地新闻网站的World Online团队在由新闻截止日期决定的开发环境中蓬勃发展。对于包括LJWorld.com、Lawrence.com和KUsports.com在内的网站，记者（和管理层）要求在非常紧迫的时间表下添加功能和构建整个应用程序，通常只有一天或一小时的通知时间。因此，Simon和Adrian出于必要性开发了一个节省时间的Web开发框架——这是他们在极端截止日期下构建可维护应用程序的唯一方法。
- en: In summer 2005, after having developed this framework to a point where it was
    efficiently powering most of World Online's sites, the team, which now included
    Jacob Kaplan-Moss, decided to release the framework as open source software. They
    released it in July 2005 and named it Django, after the jazz guitarist Django
    Reinhardt.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在2005年夏天，经过将这个框架开发到能够有效地为World Online的大部分网站提供动力的程度后，包括Jacob Kaplan-Moss在内的团队决定将该框架作为开源软件发布。他们于2005年7月发布了它，并将其命名为Django，以纪念爵士吉他手Django
    Reinhardt。
- en: This history is relevant because it helps explain two key things. The first
    is Django's "sweet spot." Because Django was born in a news environment, it offers
    several features (such as its admin site, covered in [Chapter 5](ch05.xhtml "Chapter 5. The
    Django Admin Site"), *The* * Django*  *Admin*  *Site*) that are particularly well
    suited for "content" sites such as [Amazon.com](http://www.amazon.com), [craigslist.org](http://www.craigslist.org),
    and [washingtonpost.com](http://www.washingtonpost.com) that offer dynamic and
    database-driven information.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这段历史很重要，因为它有助于解释两个关键问题。首先是Django的“甜蜜点”。因为Django诞生于新闻环境中，它提供了一些功能（比如它的管理站点，在[第5章](ch05.xhtml
    "第5章 Django管理站点")中介绍的*The* * Django * Admin * Site*），特别适合像[Amazon.com](http://www.amazon.com)、[craigslist.org](http://www.craigslist.org)和[washingtonpost.com](http://www.washingtonpost.com)这样提供动态和数据库驱动信息的“内容”网站。
- en: Don't let that turn you off, though Django is particularly good for developing
    those sorts of sites, that doesn't preclude it from being an effective tool for
    building any sort of dynamic website. (There's a difference between being particularly
    *effective* at something and being *ineffective* at other things.)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不要让这使你失去兴趣，尽管Django特别适合开发这类网站，但这并不排除它成为构建任何类型动态网站的有效工具。（在某些方面特别有效和在其他方面无效之间存在区别。）
- en: The second matter to note is how Django's origins have shaped the culture of
    its open source community. Because Django was extracted from real-world code,
    rather than being an academic exercise or commercial product, it is acutely focused
    on solving web development problems that Django's developers themselves have faced—and
    continue to face. As a result, Django itself is actively improved on an almost
    daily basis. The framework's maintainers have a vested interest in making sure
    Django saves developers time, produces applications that are easy to maintain
    and performs well under load.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个需要注意的事情是Django的起源如何塑造了其开源社区的文化。因为Django是从现实世界的代码中提取出来的，而不是学术练习或商业产品，它专注于解决Django开发人员自己曾经面对过的问题，而且仍在面对。因此，Django本身几乎每天都在积极改进。该框架的维护者有兴趣确保Django节省开发人员的时间，生成易于维护并在负载下表现良好的应用程序。
- en: Django lets you build deep, dynamic, interesting sites in an extremely short
    time. Django is designed to let you focus on the fun, interesting parts of your
    job while easing the pain of the repetitive bits. In doing so, it provides high-level
    abstractions of common web development patterns, shortcuts for frequent programming
    tasks, and clear conventions on how to solve problems. At the same time, Django
    tries to stay out of your way, letting you work outside the scope of the framework
    as needed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Django可以让您在极短的时间内构建深度、动态、有趣的网站。Django旨在让您专注于工作中有趣的部分，同时减轻重复部分的痛苦。通过这样做，它提供了常见Web开发模式的高级抽象，频繁编程任务的快捷方式，并明确了解决问题的约定。与此同时，Django试图不干扰您的工作，让您根据需要在框架范围之外工作。
- en: We wrote this book because we firmly believe that Django makes web development
    better. It's designed to quickly get you moving on your own Django projects, and
    then ultimately teach you everything you need to know to successfully design,
    develop, and deploy a site that you'll be proud of.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们写这本书是因为我们坚信Django可以使Web开发变得更好。它旨在快速让您开始自己的Django项目，然后最终教会您成功设计、开发和部署一个令您自豪的网站所需的一切知识。
- en: Getting Started
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 入门
- en: 'There are two very important things you need to do to get started with Django:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Django，您需要做两件非常重要的事情：
- en: Install Django (obviously); and
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Django（显然）；和
- en: Get a good understanding of the **Model-View-Controller** (**MVC**) design pattern.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 深入了解**模型-视图-控制器**（**MVC**）设计模式。
- en: The first, installing Django, is really simple and detailed in the first part
    of this chapter. The second is just as important, especially if you are a new
    programmer or coming from using a programming language that does not clearly separate
    the data and logic behind your website from the way it is displayed. Django's
    philosophy is based on *loose coupling*, which is the underlying philosophy of
    MVC. We will be discussing loose coupling and MVC in much more detail as we go
    along, but if you don't know much about MVC, then you best not skip the second
    half of this chapter because understanding MVC will make understanding Django
    so much easier.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，安装Django非常简单，并且在本章的第一部分中有详细介绍。其次同样重要，特别是如果您是新程序员或者从使用不清晰地将网站的数据和逻辑与其显示方式分离的编程语言转换而来。Django的理念基于*松耦合*，这是MVC的基本理念。随着我们的学习，我们将更详细地讨论松耦合和MVC，但如果您对MVC了解不多，最好不要跳过本章的后半部分，因为了解MVC将使理解Django变得更加容易。
- en: Installing Django
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Django
- en: 'Before you can start learning how to use Django, you must first install some
    software on your computer. Fortunately, this is a simple three step process:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习如何使用Django之前，您必须先在计算机上安装一些软件。幸运的是，这是一个简单的三个步骤过程：
- en: Install Python.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Python。
- en: Install a Python Virtual Environment.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Python虚拟环境。
- en: Install Django.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Django。
- en: If this does not sound familiar to you don't worry, in this chapter, lets assume
    that you have never installed software from the command line before and will lead
    you through it step by step.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这对您来说不熟悉，不用担心，在本章中，让我们假设您以前从未从命令行安装过软件，并将逐步引导您完成。
- en: I have written this section for those of you running Windows. While there is
    a strong *nix and OSX user base for Django, most new users are on Windows. If
    you are using Mac or Linux, there are a large number of resources on the Internet;
    with the best place to start being Django's own installation instructions. For
    more information visit [https://docs.djangoproject.com/en/1.8/topics/install/](https://docs.djangoproject.com/en/1.8/topics/install/).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我为那些使用Windows的人编写了这一部分。虽然Django在*nix和OSX用户群体中有很强的基础，但大多数新用户都在Windows上。如果您使用Mac或Linux，互联网上有大量资源；最好的起点是Django自己的安装说明。有关更多信息，请访问[https://docs.djangoproject.com/en/1.8/topics/install/](https://docs.djangoproject.com/en/1.8/topics/install/)。
- en: For Windows users, your computer can be running any recent version of Windows
    (Vista, 7, 8.1, or 10). This chapter also assumes you're installing Django on
    a desktop or laptop computer and will be using the development server and SQLite
    to run all the example code in this book. This is by far the easiest and the best
    way to setup Django when you are first starting out.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows用户，您的计算机可以运行任何最近的Windows版本（Vista，7，8.1或10）。本章还假设您正在桌面或笔记本电脑上安装Django，并将使用开发服务器和SQLite来运行本书中的所有示例代码。这绝对是您刚开始时设置Django的最简单和最好的方法。
- en: If you do want to go to a more advanced installation of Django, your options
    are covered in [Chapter 13](ch13.xhtml "Chapter 13. Deploying Django") *, Deploying
    Django*, [Chapter 20](ch20.xhtml "Chapter 20. More on Installing Django"), *More
    on Installing Django*, and [Chapter 21](ch21.xhtml "Chapter 21. Advanced Database
    Management") *, Advanced Database Management*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您确实想要进行更高级的Django安装，您的选项在[第13章](ch13.xhtml "第13章。部署Django")*，部署Django*，[第20章](ch20.xhtml
    "第20章。更多关于安装Django")*，更多关于安装Django*和[第21章](ch21.xhtml "第21章。高级数据库管理")*，高级数据库管理*中都有涵盖。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using Windows, I recommend that you try out Visual Studio for all
    your Django development. Microsoft has made a significant investment in providing
    support for Python and Django programmers. This includes full IntelliSense support
    for Python/Django and incorporation of all of Django's command line tools into
    the VS IDE.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Windows，我建议您尝试使用Visual Studio进行所有Django开发。微软已经在为Python和Django程序员提供支持方面进行了重大投资。这包括对Python/Django的完整IntelliSense支持，并将Django的所有命令行工具整合到VS
    IDE中。
- en: Best of all it's entirely free. I know, who would have expected that from M$??,
    but it's true!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，这完全免费。我知道，谁会想到M$会提供免费服务？？但这是真的！
- en: See [Appendix G](apg.xhtml "Appendix G. Developing Django with Visual Studio"),
    *Developing Django with Visual Studio* for a complete installation guide for Visual
    Studio Community 2015, as well as a few tips on developing Django in Windows.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Visual Studio Community 2015的完整安装指南，请参阅[附录G](apg.xhtml "附录G。使用Visual Studio开发Django")*，使用Visual
    Studio开发Django*，以及在Windows中开发Django的一些建议。
- en: Installing Python
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Python
- en: Django itself is written purely in Python, so the first step in installing the
    framework is to make sure you have Python installed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Django本身纯粹是用Python编写的，因此安装框架的第一步是确保您已安装Python。
- en: Python versions
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python版本
- en: Django version 1.8 LTS works with Python version 2.7, 3.3, 3.4 and 3.5\. For
    each version of Python, only the latest micro release (A.B.C) is supported.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Django 1.8 LTS版本与Python 2.7、3.3、3.4和3.5兼容。对于每个Python版本，只支持最新的微版本（A.B.C）。
- en: 'If you are just trialling Django, it doesn''t really matter whether you use
    Python 2 or Python 3\. If, however, you are planning on eventually deploying code
    to a live website, Python 3 should be your first choice. The Python wiki (for
    more information visit [https://wiki.python.org/moin/Python2orPython3](https://wiki.python.org/moin/Python2orPython3),
    puts the reason behind this very succinctly:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只是试用Django，无论您使用Python 2还是Python 3都无所谓。但是，如果您打算最终将代码部署到实时网站，Python 3应该是您的首选。Python维基（有关更多信息，请访问[https://wiki.python.org/moin/Python2orPython3](https://wiki.python.org/moin/Python2orPython3)）非常简洁地解释了这背后的原因：
- en: '*Short version: Python 2.x is legacy, Python 3.x is the present and future
    of the language*'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*简短版本：Python 2.x是遗留版本，Python 3.x是语言的现在和未来*'
- en: Unless you have a very good reason to use Python 2 (for example, legacy libraries),
    Python 3 is the way to go.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除非您有非常好的理由使用Python 2（例如，遗留库），否则Python 3是最佳选择。
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'NOTE: All of the code samples in this book are written in Python 3'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：本书中的所有代码示例都是用Python 3编写的
- en: Installation
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装
- en: 'If you''re on Linux or Mac OS X, you probably have Python already installed.
    Type `python` at a command prompt (or in `Applications/Utilities/Terminal`, in
    OS X). If you see something like this, then Python is installed:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Linux或Mac OS X，您可能已经安装了Python。在命令提示符（或在OS X中的`Applications/Utilities/Terminal`）中输入`python`。如果看到类似以下内容，则表示已安装Python：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can see that, in the preceding example, Python interactive mode is running
    Python 2.7\. This is a trap for inexperienced users. On Linux and Mac OS X machines,
    it is common for both Python 2 and Python 3 to be installed. If your system is
    like this, you need to type `python3` in front of all your commands, rather than
    python to run Django with Python 3.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，在前面的示例中，Python交互模式正在运行Python 2.7。这是对经验不足的用户的陷阱。在Linux和Mac OS X机器上，通常会安装Python
    2和Python 3。如果您的系统是这样的，您需要在所有命令前面输入`python3`，而不是python来运行Python 3的Django。
- en: Assuming Python is not installed on your system, we first need to get the installer.
    Go to [https://www.python.org/downloads/](https://www.python.org/downloads/), and
    click the big yellow button that says **Download Python 3.x.x**.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的系统尚未安装Python，我们首先需要获取安装程序。转到[https://www.python.org/downloads/](https://www.python.org/downloads/)，并单击大黄色按钮，上面写着**下载Python
    3.x.x**。
- en: At the time of writing, the latest version of Python is 3.5.1, but it may have
    been updated by the time you read this, so the numbers may be slightly different.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，最新版本的Python是3.5.1，但在您阅读本文时可能已经更新，因此数字可能略有不同。
- en: '**DO NOT** download version 2.7.x as this is the old version of Python. All
    of the code in this book is written in Python 3, so you will get compilation errors
    if you try to run the code on Python 2.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要**下载2.7.x版本，因为这是Python的旧版本。本书中的所有代码都是用Python 3编写的，因此如果尝试在Python 2上运行代码，将会出现编译错误。'
- en: Once you have downloaded the Python installer, go to your `Downloads` folder
    and double-click the file `python-3.x.x.msi` to run the installer. The installation
    process is the same as any other Windows program, so if you have installed software
    before, there should be no problem here, however, the is one extremely important
    customization you must make.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下载Python安装程序后，转到您的`Downloads`文件夹，双击文件`python-3.x.x.msi`运行安装程序。安装过程与任何其他Windows程序相同，因此如果您之前安装过软件，这里应该没有问题，但是，有一个非常重要的自定义您必须进行。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Do not forget this next step as it will solve most problems that arise from
    an incorrect mapping of `pythonpath` (an important variable for Python installations)
    in Windows.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记下一步，因为它将解决由于在Windows中不正确映射`pythonpath`（Python安装的重要变量）而引起的大多数问题。
- en: 'By default, the Python executable is not added to the Windows PATH statement.
    For Django to work properly, Python must be listed in the PATH statement. Fortunately,
    this is easy to rectify:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Python可执行文件不会添加到Windows PATH语句中。为了使Django正常工作，Python必须在PATH语句中列出。幸运的是，这很容易纠正：
- en: In Python 3.4.x, When the installer opens the customization window, the option
    **Add python.exe to Path** is not selected, you must change this to **Will be
    installed on a local hard drive** as shown in *Figure 1.1*.![Installation](img/image_01_001.jpg)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Python 3.4.x中，当安装程序打开自定义窗口时，选项**将python.exe添加到Path**未被选中，您必须将其更改为**将安装在本地硬盘上**，如*图1.1*所示。![安装](img/image_01_001.jpg)
- en: Figure 1.1: Add Python to PATH (Version 3.4.x).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：将Python添加到PATH（版本3.4.x）。
- en: In Python 3.5.x you make sure **Add Python 3.5 to PATH** is checked before installing
    (*Figure 1.2*).![Installation](img/image_01_002.jpg)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Python 3.5.x中，确保在安装之前选中**将Python 3.5添加到PATH**（*图1.2*）。![安装](img/image_01_002.jpg)
- en: Figure 1.2: Add Python to PATH (Version 3.5.x).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：将Python添加到PATH（版本3.5.x）。
- en: 'Once Python is installed, you should be able to re-open the command window
    and type python at the command prompt and get something like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Python后，您应该能够重新打开命令窗口并在命令提示符下键入python，然后会得到类似于这样的输出：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'While you are at it, there is one more important thing to do. Exit out of Python
    with *CTRL*+*C*. At the command prompt type, the following and hit enter:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在此期间，还有一件重要的事情要做。使用*CTRL*+*C*退出Python。在命令提示符下键入以下内容并按Enter：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output will be something similar to this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于这样：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You don''t need to understand exactly what this command does right now; put
    briefly `pip` is the Python package manager. It''s used to install Python packages:
    `pip` is actually a recursive acronym for Pip Installs Packages. Pip is important
    for the next stage of our install process, but first, we need to make sure we
    are running the latest version of pip (8.1.2 at the time of writing), which is
    exactly what this command does.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在不需要完全了解这个命令的作用；简而言之，`pip`是Python软件包管理器。它用于安装Python软件包：`pip`实际上是Pip Installs
    Packages的递归缩写。Pip对我们安装过程的下一阶段非常重要，但首先，我们需要确保我们正在运行最新版本的pip（在撰写本文时为8.1.2），这正是这个命令所做的。
- en: Installing a Python Virtual Environment
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Python虚拟环境
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are going to use Microsoft Visual Studio (VS), you can stop here and
    jump to [Appendix G](apg.xhtml "Appendix G. Developing Django with Visual Studio"),
    *Developing Django with Visual Studio*. VS only requires that you install Python,
    everything else VS does for you from inside the Integrated Development Environment
    (IDE).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要使用Microsoft Visual Studio（VS），您可以在这里停下来并跳转到[附录G](apg.xhtml "附录 G. 使用Visual
    Studio开发Django")，*使用Visual Studio开发Django*。VS只需要您安装Python，其他所有操作都可以在集成开发环境（IDE）内完成。
- en: All of the software on your computer operates interdependently—each program
    has other bits of software that it depends on (called **dependencies**) and settings
    that it needs to find the files and other software it needs to run (called **environment
    variables**).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机上的所有软件都是相互依存的 - 每个程序都有其他软件依赖的软件部分（称为**依赖项**）和需要找到文件和其他软件运行所需的设置（称为**环境变量**）。
- en: When you are writing new software programs, it is possible (and common!) to
    modify dependencies and environment variables that your other software depends
    on. This can cause numerous problems, so should be avoided.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当您编写新的软件程序时，可能（并且经常）会修改其他软件依赖的依赖项和环境变量。这可能会导致许多问题，因此应该避免。
- en: A Python virtual environment solves this problem by wrapping all the dependencies
    and environment variables that your new software needs into a file system separate
    from the rest of the software on your computer.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Python虚拟环境通过将新软件所需的所有依赖项和环境变量包装到与计算机上其余软件分开的文件系统中来解决此问题。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some of you who have looked at other tutorials will note that this step is often
    described as optional. This is not a view I support, nor is it supported by a
    number of Django's core developers.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一些查看其他教程的人可能会注意到，这一步通常被描述为可选的。这不是我支持的观点，也不是一些Django核心开发人员支持的观点。
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The advantages of developing Python applications (of which Django is one) within
    a virtual environment are manifest and not worth going through here. As a beginner,
    you just need to take my word for it—running a virtual environment for Django
    development is not optional.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟环境中开发Python应用程序（其中包括Django）的优势是显而易见的，这里不值得一提。作为初学者，您只需要相信我 - 运行Django开发的虚拟环境是不可选的。
- en: 'The virtual environment tool in Python is called `virtualenv` and we install
    it from the command line using `pip`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的虚拟环境工具称为`virtualenv`，我们使用`pip`从命令行安装它：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output from your command window should look something like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您的命令窗口的输出应该类似于这样：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once `virtualenv` is installed, you need to create a virtual environment for
    your project by typing:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了`virtualenv`，您需要通过输入以下命令为您的项目创建一个虚拟环境：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Most examples on the Internet use `env` as your environment name. This is bad;
    principally because it's common to have several virtual environments installed
    to test different configurations, and `env` is not very descriptive. For example,
    you may be developing an application that must run on Python 2.7 and Python 3.4\.
    Environments named `env_someapp_python27` and `env_someapp_python34` are going
    to be a lot easier to distinguish than if you had named them `env` and `env1`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上的大多数示例使用`env`作为您的环境名称。这是不好的；主要是因为通常会安装几个虚拟环境来测试不同的配置，而`env`并不是非常描述性的。例如，您可能正在开发一个必须在Python
    2.7和Python 3.4上运行的应用程序。命名为`env_someapp_python27`和`env_someapp_python34`的环境将比如果您将它们命名为`env`和`env1`更容易区分。
- en: 'In this example, I have kept it simple as we will only be using one virtual
    environment for our project, so I have used `env_mysite`. The output from your
    command should look something like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我保持了简单，因为我们只会使用一个虚拟环境来进行我们的项目，所以我使用了`env_mysite`。您的命令的输出应该看起来像这样：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once `virtualenv` has finished setting up your new virtual environment, open
    Windows Explorer and have a look at what `virtualenv` created for you. In your
    home directory, you will now see a folder called `\env_mysite` (or whatever name
    you gave the virtual environment). If you open the folder, you will see the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`virtualenv`完成设置新虚拟环境的工作，打开Windows资源管理器，看看`virtualenv`为您创建了什么。在您的主目录中，现在会看到一个名为`\env_mysite`的文件夹（或者您给虚拟环境的任何名称）。如果您打开文件夹，您会看到以下内容：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`virtualenv` has created a complete Python installation for you, separate from
    your other software, so you can work on your project without affecting any of
    the other software on your system.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`virtualenv`为您创建了一个完整的Python安装，与您的其他软件分开，因此您可以在不影响系统上的任何其他软件的情况下工作。'
- en: 'To use this new Python virtual environment, we have to activate it, so let''s
    go back to the command prompt and type the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个新的Python虚拟环境，我们必须激活它，所以让我们回到命令提示符并输入以下内容：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will run the activate script inside your virtual environment''s `\scripts`
    folder. You will notice your command prompt has now changed:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的虚拟环境的`\scripts`文件夹中运行激活脚本。您会注意到您的命令提示现在已经改变：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `(env_mysite)` at the beginning of the command prompt lets you know that
    you are running in the virtual environment. Our next step is to install Django.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 命令提示符开头的`(env_mysite)`让您知道您正在虚拟环境中运行。我们的下一步是安装Django。
- en: Installing Django
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Django
- en: 'Now that we have Python and are running a virtual environment, installing Django
    is super easy, just type the command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经安装了Python并运行了一个虚拟环境，安装Django就非常容易了，只需输入以下命令：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will instruct pip to install Django into your virtual environment. Your
    command output should look like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这将指示pip将Django安装到您的虚拟环境中。您的命令输出应该如下所示：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this case, we are explicitly telling pip to install Django 1.8.13, which
    is the latest version of Django 1.8 LTS at the time of writing. If you are installing
    Django, it's good practice to check the Django Project website for the latest
    version of Django 1.8 LTS.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们明确告诉pip安装Django 1.8.13，这是撰写本文时Django 1.8 LTS的最新版本。如果要安装Django，最好查看Django项目网站以获取Django
    1.8 LTS的最新版本。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In case you were wondering, typing in `pip install django` will install the
    latest stable release of Django. If you want information on installing the latest
    development release of Django, see [Chapter 20](ch20.xhtml "Chapter 20. More on
    Installing Django"), *More* * On Installing * *Django*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想知道，输入`pip install django`将安装Django的最新稳定版本。如果您想获取有关安装Django最新开发版本的信息，请参阅[第20章](ch20.xhtml
    "第20章。更多关于安装Django"), *更多* * 关于安装 * *Django*。
- en: 'For some post-installation positive feedback, take a moment to test whether
    the installation worked. At your virtual environment command prompt, start the
    Python interactive interpreter by typing `python` and hitting enter. If the installation
    was successful, you should be able to import the module `django`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得一些安装后的积极反馈，请花点时间测试安装是否成功。在您的虚拟环境命令提示符下，输入`python`并按回车键启动Python交互解释器。如果安装成功，您应该能够导入模块`django`：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Setting up a database
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置数据库
- en: This step is not necessary in order to complete any of the examples in this
    book. Django comes with SQLite installed by default. SQLite requires no configuration
    on your part. If you would like to work with a large database engines like PostgreSQL,
    MySQL, or Oracle, see [Chapter 21](ch21.xhtml "Chapter 21. Advanced Database Management"),
    *Advanced Database Management*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步并不是为了完成本书中的任何示例而必需的。Django默认安装了SQLite。SQLite无需您进行任何配置。如果您想使用像PostgreSQL、MySQL或Oracle这样的大型数据库引擎，请参阅[第21章](ch21.xhtml
    "第21章。高级数据库管理"), *高级数据库管理*。
- en: Starting a project
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始一个项目
- en: Once you've installed Python, Django and (optionally) your database `server/library`,
    you can take the first step in developing a Django application by creating a *project*.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了Python、Django和（可选）数据库`server/library`，您可以通过创建一个*项目*来开始开发Django应用程序。
- en: 'A project is a collection of settings for an instance of Django. If this is
    your first time using Django, you''ll have to take care of some initial setup.
    Namely, you''ll need to auto-generate some code that establishes a Django project:
    a collection of settings for an instance of Django, including database configuration,
    Django-specific options, and application-specific settings.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 项目是Django实例的一组设置。如果这是您第一次使用Django，您需要进行一些初始设置。换句话说，您需要自动生成一些代码来建立一个Django项目：Django实例的一组设置，包括数据库配置、Django特定选项和应用程序特定设置。
- en: 'I am assuming at this stage you are still running the virtual environment from
    the previous installation step. If not, you will have to start it again with:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设在这个阶段，您仍然在运行上一个安装步骤中的虚拟环境。如果没有，您将不得不重新开始：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'From your virtual environment command line, run the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 从您的虚拟环境命令行中，运行以下命令：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will create a `mysite` directory in your current directory (in this case
    `\env_mysite\`). If you want to create your project in a directory other than
    the root, you can create a new directory, change into that directory and run the
    `startproject` command from there.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在当前目录（在本例中为`\env_mysite\`）中创建一个`mysite`目录。如果您想要在根目录之外的其他目录中创建项目，您可以创建一个新目录，切换到该目录并从那里运行`startproject`命令。
- en: Note
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Warning!**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！**'
- en: You'll need to avoid naming projects after built-in Python or Django components.
    In particular, this means you should avoid using names such as "django" (which
    will conflict with Django itself) or "test" (which conflicts with a built-in Python
    package).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要避免将项目命名为内置的Python或Django组件。特别是，这意味着您应该避免使用诸如"django"（这将与Django本身冲突）或"test"（这与内置的Python包冲突）等名称。
- en: 'Let''s look at what `startproject` created:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`startproject`创建了什么：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'These files are:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件是：
- en: The outer `mysite/` root directory. It's just a container for your project.
    Its name doesn't matter to Django; you can rename it to anything you like.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部的`mysite/`根目录。这只是您项目的一个容器。对Django来说，它的名称并不重要；您可以将其重命名为任何您喜欢的名称。
- en: '`manage.py`, a command-line utility that lets you interact with your Django
    project in various ways. You can read all the details about `manage.py` on the
    Django Project website (for more information visit [https://docs.djangoproject.com/en/1.8/ref/django-admin/](https://docs.djangoproject.com/en/1.8/ref/django-admin/)).'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manage.py`，一个命令行实用程序，让您以各种方式与您的Django项目进行交互。您可以在Django项目网站上阅读有关`manage.py`的所有详细信息（有关更多信息，请访问[https://docs.djangoproject.com/en/1.8/ref/django-admin/](https://docs.djangoproject.com/en/1.8/ref/django-admin/)）。'
- en: The inner `mysite/` directory. It's the Python package for your project. It's
    the name you'll use to import anything inside it (for example, `mysite.urls`).
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部的`mysite/`目录。这是您项目的Python包。这是您用来导入其中任何内容的名称（例如，`mysite.urls`）。
- en: '`mysite/__init__.py`, an empty file that tells Python that this directory should
    be considered a Python package. (Read more about packages in the official Python
    docs at [https://docs.python.org/tutorial/modules.html#packages](https://docs.python.org/tutorial/modules.html#packages,),
    if you''re a Python beginner.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysite/__init__.py`，一个空文件，告诉Python这个目录应该被视为Python包。 （如果你是Python初学者，请阅读官方Python文档中关于包的更多信息[https://docs.python.org/tutorial/modules.html#packages](https://docs.python.org/tutorial/modules.html#packages)。）'
- en: '`mysite/settings.py`, `settings/configuration` for this Django project. [Appendix
    D](apd.xhtml "Appendix D. Settings"), *Settings* will tell you all about how settings
    work.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysite/settings.py`，这个Django项目的设置/配置。[附录D](apd.xhtml "附录D。设置")*设置*将告诉您有关设置如何工作的所有信息。'
- en: '`mysite/urls.py`, the URL declarations for this Django project; a table of
    contents of your Django-powered site. You can read more about URLs in [Chapter
    2](ch02.xhtml "Chapter 2. Views and URLconfs"), *Views and Urlconfs* and [Chapter
    7](ch07.xhtml "Chapter 7. Advanced Views and URLconfs"), *Advanced Views and Urlconfs*.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysite/urls.py`，这个Django项目的URL声明；你的Django网站的目录。您可以在[第2章](ch02.xhtml "第2章。视图和URLconfs")*视图和URLconfs*和[第7章](ch07.xhtml
    "第7章。高级视图和URLconfs")*高级视图和URLconfs*中了解更多关于URL的信息。'
- en: '`mysite/wsgi.py`, an entry-point for WSGI-compatible web servers to serve your
    project. See [Chapter 13](ch13.xhtml "Chapter 13. Deploying Django"), *Deploying
    Django*, for more details.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysite/wsgi.py`，WSGI兼容的Web服务器为您的项目提供服务的入口点。有关更多详细信息，请参阅[第13章](ch13.xhtml "第13章。部署Django")*部署Django*。'
- en: Django settings
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Django设置
- en: 'Now, edit `mysite/settings.py`. It''s a normal Python module with module-level
    variables representing Django settings. First step while you''re editing `settings.py`,
    is to set `TIME_ZONE` to your time zone. Note the `INSTALLED_APPS` setting at
    the top of the file. That holds the names of all Django applications that are
    activated in this Django instance. Apps can be used in multiple projects, and
    you can package and distribute them for use by others in their projects. By default,
    `INSTALLED_APPS` contains the following apps, all of which come with Django:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，编辑`mysite/settings.py`。这是一个普通的Python模块，其中包含表示Django设置的模块级变量。在编辑`settings.py`时的第一步是将`TIME_ZONE`设置为您的时区。请注意文件顶部的`INSTALLED_APPS`设置。它包含了在此Django实例中激活的所有Django应用程序的名称。应用程序可以在多个项目中使用，并且您可以将它们打包和分发给其他人在他们的项目中使用。默认情况下，`INSTALLED_APPS`包含以下应用程序，这些应用程序都是Django自带的：
- en: '`django.contrib.admin`: The admin site.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django.contrib.admin`：管理站点。'
- en: '`django.contrib.auth`: An authentication system.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django.contrib.auth`：身份验证系统。'
- en: '`django.contrib.contenttypes`: A framework for content types.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django.contrib.contenttypes`：内容类型框架。'
- en: '`django.contrib.sessions`: A session framework.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django.contrib.sessions`：会话框架。'
- en: '`django.contrib.messages`: A messaging framework.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django.contrib.messages`：消息框架。'
- en: '`django.contrib.staticfiles`: A framework for managing static files.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django.contrib.staticfiles`：用于管理静态文件的框架。'
- en: 'These applications are included by default as a convenience for the common
    case. Some of these applications makes use of at least one database table though,
    so we need to create the tables in the database before we can use them. To do
    that, run the following command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应用程序默认包含，以方便常见情况。其中一些应用程序至少使用了一个数据库表，因此我们需要在使用它们之前在数据库中创建这些表。要做到这一点，请运行以下命令：
- en: '[PRE17]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `migrate` command looks at the `INSTALLED_APPS` setting and creates any
    necessary database tables according to the database settings in your `settings.py`
    file and the database migrations shipped with the app (we'll cover those later).
    You'll see a message for each migration it applies.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`migrate`命令查看`INSTALLED_APPS`设置，并根据`settings.py`文件中的数据库设置和应用程序附带的数据库迁移创建任何必要的数据库表（我们稍后会涵盖这些）。它将为每个应用程序应用的每个迁移显示一条消息。'
- en: The development server
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发服务器
- en: 'Let''s verify your Django project works. Change into the outer `mysite` directory,
    if you haven''t already, and run the following commands:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们验证一下你的Django项目是否正常工作。如果还没有，请切换到外部的`mysite`目录，并运行以下命令：
- en: '[PRE18]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You''ll see the following output on the command line:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在命令行上看到以下输出：
- en: '[PRE19]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You've started the Django development server, a lightweight web server written
    purely in Python. We've included this with Django so you can develop things rapidly,
    without having to deal with configuring a production server—such as Apache—until
    you're ready for production.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经启动了Django开发服务器，这是一个纯粹用Python编写的轻量级Web服务器。我们已经将其与Django一起提供，这样您就可以在准备投入生产之前快速开发，而无需处理配置生产服务器（如Apache）的问题。
- en: 'Now''s a good time to note: don''t use this server in anything resembling a
    production environment. It''s intended only for use while developing.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是一个很好的时机来注意：不要在任何类似生产环境的地方使用这个服务器。它只用于开发时使用。
- en: Now that the server's running, visit `http://127.0.0.1:8000/` with your web
    browser. You'll see a "Welcome to Django" page in pleasant, light-blue pastel
    (*Figure 1.3*). It worked!
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在服务器正在运行，请使用您的Web浏览器访问`http://127.0.0.1:8000/`。您将在愉快的浅蓝色（*图1.3*）中看到一个“欢迎来到Django”的页面。它成功了！
- en: Note
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Automatic reloading of runserver**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**runserver的自动重新加载**'
- en: The development server automatically reloads Python code for each request as
    needed. You don't need to restart the server for code changes to take effect.
    However, some actions such as adding files don't trigger a restart, so you'll
    have to restart the server in these cases.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 开发服务器会根据需要自动重新加载每个请求的Python代码。您无需重新启动服务器即可使代码更改生效。但是，某些操作（例如添加文件）不会触发重新启动，因此在这些情况下，您将不得不重新启动服务器。
- en: '![The development server](img/image_01_003.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![开发服务器](img/image_01_003.jpg)'
- en: Django's welcome page
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Django的欢迎页面
- en: The Model-View-Controller (MVC) design pattern
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型-视图-控制器（MVC）设计模式
- en: 'MVC has been around as a concept for a long time, but has seen exponential
    growth since the advent of the Internet because it is the best way to design client-server
    applications. All of the best web frameworks are built around the MVC concept.
    At the risk of starting a flame war, I contest that if you are not using MVC to
    design web apps, you are doing it wrong. As a concept, the MVC design pattern
    is really simple to understand:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: MVC作为一个概念已经存在很长时间，但自从互联网出现以来，它已经呈指数级增长，因为它是设计客户端-服务器应用程序的最佳方式。所有最好的Web框架都是围绕MVC概念构建的。冒着引发战争的风险，我认为如果你不使用MVC来设计Web应用程序，那么你就错了。作为一个概念，MVC设计模式真的很容易理解：
- en: The **Model(M)** is a model or representation of your data. It's not the actual
    data, but an interface to the data. The model allows you to pull data from your
    database without knowing the intricacies of the underlying database. The model
    usually also provides an *abstraction* layer with your database, so that you can
    use the same model with multiple databases.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型（M）**是您的数据的模型或表示。它不是实际数据，而是数据的接口。模型允许您从数据库中提取数据，而无需了解底层数据库的复杂性。模型通常还提供了一个*抽象*层与您的数据库，以便您可以在多个数据库中使用相同的模型。'
- en: The **View(V)** is what you see. It's the presentation layer for your model.
    On your computer, the view is what you see in the browser for a web app, or the
    UI for a desktop app. The view also provides an interface to collect user input.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图（V）**是你所看到的。它是模型的表示层。在你的计算机上，视图是Web应用程序中浏览器中所看到的内容，或者是桌面应用程序的用户界面。视图还提供了一个接口来收集用户输入。'
- en: 'The **Controller(C)** controls the flow of information between the model and
    the view. It uses programmed logic to decide what information is pulled from the
    database via the model and what information is passed to the view. It also gets
    information from the user via the view and implements business logic: either by
    changing the view, or modifying data through the model, or both.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器（C）**控制信息在模型和视图之间的流动。它使用编程逻辑来决定从模型中提取哪些信息，并将哪些信息传递给视图。它还通过视图从用户那里获取信息，并实现业务逻辑：通过更改视图，或通过模型修改数据，或两者兼而有之。'
- en: Where it gets difficult is the vastly different interpretations of what actually
    happens at each layer-different frameworks implement the same functionality in
    different ways. One framework **guru** might say a certain function belongs in
    a view, while another might vehemently defend the need for it to be on the controller.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一层发生的事情的不同解释是困难的地方-不同的框架以不同的方式实现相同的功能。一个框架**专家**可能会说某个函数属于视图，而另一个可能会坚决地主张它应该在控制器上。
- en: You, as a budding programmer who Gets Stuff Done, do not have to care about
    this because, in the end, it doesn't matter. As long as you understand how Django
    implements the MVC pattern, you are free to move on and get some real work done.
    Although, watching a flame war in a comment thread can be a highly amusing distraction...
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个有远见的程序员，你不必关心这一点，因为最终这并不重要。只要你理解Django如何实现MVC模式，你就可以自由地继续并完成一些真正的工作。尽管在评论线程中观看战争可能是一种极具娱乐性的分心……
- en: 'Django follows the MVC pattern closely, however, it does use its own logic
    in the implementation. Because the `C` is handled by the framework itself and
    most of the excitement in Django happens in models, templates and views, Django
    is often referred to as an *MTV framework*. In the MTV development pattern:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Django紧密遵循MVC模式，但它在实现中使用了自己的逻辑。因为`C`由框架本身处理，而Django中的大部分工作发生在模型、模板和视图中，因此Django通常被称为*MTV框架*。在MTV开发模式中：
- en: '**M stands for "Model,"** the data access layer. This layer contains anything
    and everything about the data: how to access it, how to validate it, which behaviors
    it has, and the relationships between the data. We will be looking closely at
    Django''s models in [Chapter 4](ch04.xhtml "Chapter 4. Models"), *Models*.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**M代表“模型”，**数据访问层。这一层包含关于数据的一切：如何访问它，如何验证它，它具有哪些行为，以及数据之间的关系。我们将在[第4章](ch04.xhtml
    "第4章。模型")中仔细研究Django的模型，*模型*。'
- en: '**T stands for "Template,"** the presentation layer. This layer contains presentation-related
    decisions: how something should be displayed on a web page or other type of document.
    We will explore Django''s templates in [Chapter 3](ch03.xhtml "Chapter 3. Templates"),
    *Templates*.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: T代表“模板”，表示层。这一层包含与表示相关的决策：在网页或其他类型的文档上如何显示某些内容。我们将在第3章中探讨Django的模板，“模板”。
- en: '**V stands for "View,"** the business logic layer. This layer contains the
    logic that accesses the model and defers to the appropriate template(s). You can
    think of it as the bridge between models and templates. We will be checking out
    Django''s views in the next chapter.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: V代表“视图”，业务逻辑层。这一层包含访问模型并转到适当模板的逻辑。你可以把它看作是模型和模板之间的桥梁。我们将在下一章中查看Django的视图。
- en: This is probably the only unfortunate bit of naming in Django, because Django's
    view is more like the controller in MVC, and MVC's view is actually a Template
    in Django. It is a little confusing at first, but as a programmer getting a job
    done, you really won't care for long. It is only a problem for those of us who
    have to teach it. Oh, and to the flamers of course.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是Django中唯一不太幸运的命名，因为Django的视图更像是MVC中的控制器，而MVC的视图实际上在Django中是一个模板。起初可能有点混淆，但作为一个完成工作的程序员，你真的不会长时间在意。这只是对于我们这些需要教授它的人来说是个问题。哦，当然还有那些喷子。
- en: What's next?
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来呢？
- en: Now that you have everything installed and the development server running, you're
    ready to move on to Django's views and learning the basics of serving web pages
    with Django.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了所有东西并且开发服务器正在运行，你已经准备好继续学习Django的视图，并学习使用Django提供网页的基础知识。
