- en: Chapter 40
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第40章
- en: More with Files
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于文件的内容
- en: 40.1 Exercises of a General Nature with Files
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 40.1 文件的一般练习
- en: Exercise 40.1-1 Calculating the Sum of 10 Numbers
  id: totrans-3
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习40.1-1 计算10个数字的总和
- en: Suppose there is a file named “f_data40.1-1.txt” that contains 10 3-digit integers
    (separated by a single space character). An example of the structure of the file
    is shown here.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个名为“f_data40.1-1.txt”的文件，其中包含10个三位整数（由单个空格字符分隔）。文件结构的示例如下。
- en: 131 500 122 152 127 191 111 290 156 161
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 131 500 122 152 127 191 111 290 156 161
- en: Write a Python program that calculates and displays their sum.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，计算并显示它们的总和。
- en: Solution
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: There are two approaches to iterate through the numbers of this file.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以遍历此文件中的数字。
- en: First approach
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法
- en: In this approach, a string variable named values gets the content of the whole
    line of the file. Then, the slicing mechanism is used in a for-loop to split the
    content into individual three-digit numbers. These numbers are then converted
    to integers using the int() function to calculate their sum.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，一个名为values的字符串变量获取文件整行的内容。然后，在for循环中使用切片机制将内容分割成单独的三位数。然后使用int()函数将这些数字转换为整数，以计算它们的总和。
- en: '![](img/my_exercise_header.png) file_40.1-1a'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_40.1-1a'
- en: PATH = "c:/temp/"
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fin = open(PATH + "f_data40.1-1.txt")
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(PATH + "f_data40.1-1.txt")
- en: values = fin.readline()
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: values = fin.readline()
- en: fin.close()
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: total = 0
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for i in range(10):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(10):'
- en: 'total += int(values[i * 4 : i * 4 + 3])'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 'total += int(values[i * 4 : i * 4 + 3])'
- en: print(total)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: Second approach
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法
- en: A for-loop is used to read and process each of the 10 integers in the file.
    Within the loop, the fin.read(3) method reads the next 3 characters from the file.
    Since the file contains 3-digit integers, this reads one integer. The int() function
    converts the read string to an integer, and then it is added to the total. Next,
    the second statement within the for-loop reads and ignores the space character
    that separates the integers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用for循环读取和处理文件中的每个10个整数。在循环内部，fin.read(3)方法从文件中读取下一个3个字符。由于文件包含三位整数，这读取了一个整数。int()函数将读取的字符串转换为整数，然后将其添加到总和中。接下来，for循环中的第二个语句读取并忽略分隔整数的空格字符。
- en: '![](img/my_exercise_header.png) file_40.1-1b'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_40.1-1b'
- en: PATH = "c:/temp/"
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fin = open(PATH + "f_data40.1-1.txt")
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(PATH + "f_data40.1-1.txt")
- en: total = 0
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for i in range(10):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(10):'
- en: 'total += int(fin.read(3))   #Read 3 characters'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 'total += int(fin.read(3))   #读取3个字符'
- en: space = fin.read(1)  #Read and ignore the space character
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: space = fin.read(1)  #读取并忽略空格字符
- en: fin.close()
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: print(total)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: Exercise 40.1-2 Calculating the Average Value of an Unknown Quantity of Numbers
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习40.1-2 计算未知数量数字的平均值
- en: Suppose there is a file named “f_data40.1-2.txt” that contains numbers, one
    on each line, except the last one which contains the phrase “End of file”. An
    example of the structure of the file is shown here.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个名为“f_data40.1-2.txt”的文件，其中包含数字，每行一个，除了最后一行包含短语“文件结束”。文件结构的示例如下。
- en: '16'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '16'
- en: '13.172'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '13.172'
- en: '33.5'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '33.5'
- en: .
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: End of file
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 文件结束
- en: Write a Python program that calculates and displays their average value.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，计算并显示它们的平均值。
- en: Solution
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: According to the “Ultimate” rule discussed in [Section 28.3](chapter28.html#toc_3),
    the while-loop should be as follows, given in general form.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[第28.3节](chapter28.html#toc_3)中讨论的“终极”规则，while循环应该如下，以一般形式给出。
- en: sNumber = fin.readline()
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: sNumber = fin.readline()
- en: 'while sNumber != "End of file":'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 'while sNumber != "文件结束":'
- en: A statement or block of statements
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块
- en: sNumber = fin.readline()
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: sNumber = fin.readline()
- en: The final program is as follows.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最终程序如下。
- en: '![](img/my_exercise_header.png) file_40.1-2'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_40.1-2'
- en: PATH = "c:/temp/"
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fin = open(PATH + "f_data40.1-2.txt")
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(PATH + "f_data40.1-2.txt")
- en: total = 0
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: count = 0
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: count = 0
- en: sNumber = fin.readline()
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: sNumber = fin.readline()
- en: 'while sNumber != "End of file":'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 'while sNumber != "文件结束":'
- en: total += float(sNumber)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: total += float(sNumber)
- en: count += 1
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: count += 1
- en: sNumber = fin.readline()
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: sNumber = fin.readline()
- en: fin.close()
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: 'if count > 0:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 'if count > 0:'
- en: print(total / count)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: print(total / count)
- en: Exercise 40.1-3 Finding Minimum and Maximum Values
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习40.1-3 查找最小和最大值
- en: Suppose there is a file named “f_data40.1-3.txt” that contains numbers, one
    on each line. An example of the structure of the file is shown here.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个名为“f_data40.1-3.txt”的文件，其中包含数字，每行一个。文件结构的示例如下。
- en: '16'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '16'
- en: '13.172'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '13.172'
- en: '33.5'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '33.5'
- en: .
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: Write a Python program that finds the greatest and lowest values and stores
    them in a file named “output.txt” in the following form
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Write a Python program that finds the greatest and lowest values and stores
    them in a file named “output.txt” in the following form
- en: 33.5  13.172
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 33.5  13.172
- en: Assume that there is at least one value in the file “f_data40.1-3.txt”.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Assume that there is at least one value in the file “f_data40.1-3.txt”.
- en: Solution
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Solution
- en: The final program is as follows.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: The final program is as follows.
- en: '![](img/my_exercise_header.png) file_40.1-3'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_40.1-3'
- en: PATH = "c:/temp/"
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fin = open(PATH + "f_data40.1-3.txt")
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(PATH + "f_data40.1-3.txt")
- en: '#Read the first value'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '#Read the first value'
- en: maximum = float(fin.readline())
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: maximum = float(fin.readline())
- en: minimum = maximum
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: minimum = maximum
- en: '#Read the rest of the values, line by line'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '#Read the rest of the values, line by line'
- en: 'for sNumber in fin:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 'for sNumber in fin:'
- en: number = float(sNumber)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: number = float(sNumber)
- en: 'if number > maximum:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 'if number > maximum:'
- en: maximum = number
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: maximum = number
- en: 'if number < minimum:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 'if number < minimum:'
- en: minimum = number
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: minimum = number
- en: fin.close()
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: '#Write the greatest and lowest value in a file'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '#Write the greatest and lowest value in a file'
- en: fout = open(PATH + "output.txt", "w")
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: fout = open(PATH + "output.txt", "w")
- en: fout.write(str(maximum) + " " + str(minimum))
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: fout.write(str(maximum) + " " + str(minimum))
- en: fout.close()
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: fout.close()
- en: Exercise 40.1-4 Concatenating Files
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Exercise 40.1-4 Concatenating Files
- en: Suppose there are two text files named “text1.txt” and “text2.txt”. Write a
    Python program that concatenates the contents of the two files and writes the
    concatenated text in a third file named “final.txt”, placing the contents of the
    file “text1.txt” before the contents of the file “text2.txt”.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Suppose there are two text files named “text1.txt” and “text2.txt”. Write a
    Python program that concatenates the contents of the two files and writes the
    concatenated text in a third file named “final.txt”, placing the contents of the
    file “text1.txt” before the contents of the file “text2.txt”.
- en: Solution
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Solution
- en: This exercise can be solved using several approaches. Let's see two of them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: This exercise can be solved using several approaches. Let's see two of them.
- en: First approach
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: First approach
- en: The program opens the file “text1.txt”, reads all of its contents, assigns them
    to the variable contents, and then closes the file. Next, it opens the file “text2.txt”,
    reads all of its contents, concatenates them with the previous ones (those in
    the variable contents), and closes the file. Finally, it opens the file “final.txt”
    and writes the concatenated contents in it, as shown in the program that follows.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: The program opens the file “text1.txt”, reads all of its contents, assigns them
    to the variable contents, and then closes the file. Next, it opens the file “text2.txt”,
    reads all of its contents, concatenates them with the previous ones (those in
    the variable contents), and closes the file. Finally, it opens the file “final.txt”
    and writes the concatenated contents in it, as shown in the program that follows.
- en: '![](img/my_exercise_header.png) file_40.1-4a'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_40.1-4a'
- en: PATH = "c:/temp/"
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fin = open(PATH + "text1.txt")
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(PATH + "text1.txt")
- en: contents = fin.read()
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: contents = fin.read()
- en: fin.close()
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: fin = open(PATH + "text2.txt")
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(PATH + "text2.txt")
- en: contents += fin.read()  #Concatenation
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: contents += fin.read()  #Concatenation
- en: fin.close()
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: fout = open(PATH + "final.txt", "w")
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: fout = open(PATH + "final.txt", "w")
- en: fout.write(contents)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: fout.write(contents)
- en: fout.close()
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: fout.close()
- en: Second approach
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Second approach
- en: The program that follows opens all the three files at the beginning, writes
    the concatenated contents, and then closes them.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: The program that follows opens all the three files at the beginning, writes
    the concatenated contents, and then closes them.
- en: '![](img/my_exercise_header.png) file_40.1-4b'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_40.1-4b'
- en: PATH = "c:/temp/"
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fin1 = open(PATH + "text1.txt")
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: fin1 = open(PATH + "text1.txt")
- en: fin2 = open(PATH + "text2.txt")
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: fin2 = open(PATH + "text2.txt")
- en: fout = open(PATH + "final.txt", "w")
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: fout = open(PATH + "final.txt", "w")
- en: fout.write(fin1.read() + fin2.read())
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: fout.write(fin1.read() + fin2.read())
- en: fout.close()
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: fout.close()
- en: fin2.close()
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: fin2.close()
- en: fin1.close()
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: fin1.close()
- en: '![](img/notice.jpg)The order in which you close the files doesn''t need to
    correspond to the order in which you opened them. You can open, for example, the
    file “text2.txt” first, and close it last, or open it first and close it first.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)The order in which you close the files doesn''t need to
    correspond to the order in which you opened them. You can open, for example, the
    file “text2.txt” first, and close it last, or open it first and close it first.'
- en: Exercise 40.1-5 Searching in a File
  id: totrans-119
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Exercise 40.1-5 Searching in a File
- en: In the United States, the Social Security Number (SSN) is a nine-digit identity
    number applied to all U.S. citizens in order to identify them for the purposes
    of Social Security. Suppose there is a file named “SSN.txt” that contains the
    SSNs (Social Security Numbers) of all citizens of the state of California, as
    well as their full name, one record on each line. An example of the structure
    of the file is shown here.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: In the United States, the Social Security Number (SSN) is a nine-digit identity
    number applied to all U.S. citizens in order to identify them for the purposes
    of Social Security. Suppose there is a file named “SSN.txt” that contains the
    SSNs (Social Security Numbers) of all citizens of the state of California, as
    well as their full name, one record on each line. An example of the structure
    of the file is shown here.
- en: 123456789 Aristides Bouras
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 123456789 Aristides Bouras
- en: 123000000 Loukia Ainarozidou
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 123000000 Loukia Ainarozidou
- en: 121212121 John Papas Junior
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 121212121 John Papas Junior
- en: .
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: Write a Python program that prompts the user to enter the first digits of an
    SSN to search and then searches in the file and displays the first and last names
    of all citizens whose SSN starts with those digits.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入要搜索的SSN的前几位数字，然后在该文件中进行搜索并显示所有以这些数字开头的公民的姓名和姓氏。
- en: Solution
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: In this particular exercise, if the user enters all nine digits of an SSN to
    search, and this SSN is found, the program must display the first and last name
    of the corresponding citizen and stop searching thereafter. On the other hand,
    if the user enters less than nine digits to search, the program must search and
    display the first and last name of all the citizens whose SSN starts with those
    digits. The solution to this exercise is as follows.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的练习中，如果用户输入了完整的九位SSN进行搜索，并且找到了这个SSN，程序必须显示相应公民的姓名和姓氏，并停止搜索。另一方面，如果用户输入少于九位数字进行搜索，程序必须搜索并显示所有以这些数字开头的公民的姓名和姓氏。这个练习的解决方案如下。
- en: '![](img/my_exercise_header.png) file_40.1-5'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_40.1-5'
- en: PATH = "c:/temp/"
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: 'ssnToSearch = input("Enter an SSN to search: ")'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ssnToSearch = input("输入要搜索的SSN：")
- en: length = len(ssnToSearch)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: length = len(ssnToSearch)
- en: fin = open(PATH + "SSN.txt")
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(PATH + "SSN.txt")
- en: found = False
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: found = False
- en: 'for line in fin:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 'for line in fin:'
- en: ssn = line[:9]
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: ssn = line[:9]
- en: fullName = line[10:]
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: fullName = line[10:]
- en: '#If it is found'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '#如果找到了'
- en: 'if ssnToSearch == ssn[0:length]:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 'if ssnToSearch == ssn[0:length]:'
- en: print(fullName, end = "")  #Variable fullName already contains a line break
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(fullName, end = "")  #变量fullName已经包含一个换行符
- en: found = True
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: found = True
- en: '#If SSN to search contains 9 digits and it is found, exit loop'
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '#如果要搜索的SSN包含9位数字并且找到了，退出循环'
- en: 'if length == 9:'
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if length == 9:'
- en: break
  id: totrans-144
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: break
- en: fin.close()
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: 'if not found:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 'if not found:'
- en: print("Not found!")
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: print("未找到！")
- en: Exercise 40.1-6 Combining Files with Subprograms
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习40.1-6 使用子程序组合文件
- en: 'Do the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 做以下操作：
- en: i)Write a subprogram named readContent that accepts the filename of a file and
    returns its contents.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为readContent的子程序，它接受一个文件的名称并返回其内容。
- en: ii)Write a subprogram named writeContent that accepts the filename of a file
    and a string, and writes that string in the file.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: ii)编写一个名为writeContent的子程序，它接受一个文件的名称和一个字符串，并将该字符串写入文件。
- en: iii)Using the subprograms cited above, write a Python program that prompts the
    user to enter the filenames of two files and then copies the contents of the first
    file to the second one. Assume that the user enters valid filenames.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: iii)使用上述子程序，编写一个Python程序，提示用户输入两个文件的名称，然后将第一个文件的内容复制到第二个文件中。假设用户输入了有效的文件名。
- en: Solution
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: Even though this particular exercise seems quite easy, it is necessary to highlight
    some things about the readContent() function. Examine the readContent() function
    that follows and try to find the error it contains. The error is a logic error,
    not a syntax one. This function is executed successfully without any syntax errors
    thrown by the Python interpreter. However, the error is there and quite difficult
    to spot!
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个特定的练习看起来相当简单，但有必要强调一些关于readContent()函数的事情。检查下面的readContent()函数，并尝试找出它包含的错误。这个错误是一个逻辑错误，而不是语法错误。这个函数在没有Python解释器抛出任何语法错误的情况下成功执行。然而，错误确实存在，并且很难发现！
- en: 'def readContent(filename):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 'def readContent(filename):'
- en: fin = open(filename)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(filename)
- en: return fin.read()
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: return fin.read()
- en: fin.close()
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: What happens here is that, when the return statement is executed, Python ignores
    the rest of the statements of the function, which means that the file probably
    won't close. Imaging calling this particular function many times in a program.
    You would end up with many open files that will probably never close.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的情况是，当执行返回语句时，Python会忽略函数中的其余语句，这意味着文件可能不会关闭。想象一下在程序中多次调用这个特定的函数。你最终会得到许多永远不会关闭的打开文件。
- en: '![](img/notice.jpg)Latest versions of Python will probably close the file automatically
    when there is no reference (fin) to it, but it is bad practice to leave a file
    open and wait for Python to close it for you.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)Python的最新版本可能会在没有引用（fin）的情况下自动关闭文件，但留下文件打开并等待Python为您关闭它是一种不良做法。'
- en: A good practice is to place the return statement at the end of the function,
    as shown in the following program.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的做法是将返回语句放在函数的末尾，如下面的程序所示。
- en: '![](img/my_exercise_header.png) file_40.1-6'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_40.1-6'
- en: 'def readContent(filename):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 'def readContent(filename):'
- en: fin = open(filename)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(filename)
- en: contents = fin.read()
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: contents = fin.read()
- en: fin.close()
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: return contents
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: return contents
- en: 'def writeContent(filename, contents):'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'def writeContent(filename, contents):'
- en: fout = open(filename, "w")
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: fout = open(filename, "w")
- en: fout.write(contents)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: fout.write(contents)
- en: fout.close()
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: fout.close()
- en: '#Main code starts here'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: 'source = input("Enter source filename: ")'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 'source = input("Enter source filename: ")'
- en: 'destination = input("Enter destination filename: ")'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 'destination = input("Enter destination filename: ")'
- en: 'c = readContent(source)         #Equivalent to:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 'c = readContent(source)        #相当于：'
- en: writeContent(destination, c)    #writeContent(destination, readContent(source))
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 'writeContent(destination, c)    #writeContent(destination, readContent(source))'
- en: 40.2 Review Exercises
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 40.2 复习练习
- en: Complete the following exercises.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Suppose there is a file named “f_data40.2-1.txt” that contains 10 2-digit
    integers (separated by a single space character). An example of the structure
    of the file is shown here.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 1)假设有一个名为“f_data40.2-1.txt”的文件，其中包含10个两位整数（由单个空格字符分隔）。以下是该文件结构的示例。
- en: 13 55 12 61 12 19 80 91 15 16
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 13 55 12 61 12 19 80 91 15 16
- en: Write a Python program that calculates and displays the average value of those
    that are greater than 50.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，计算并显示大于50的平均值。
- en: 2)Suppose there is a file named “f_data40.2-2.txt” that contains 3-digit integers
    (separated by a comma character). An example of the structure of the file is shown
    here.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 2)假设有一个名为“f_data40.2-2.txt”的文件，其中包含三位整数（由逗号字符分隔）。以下是该文件结构的示例。
- en: 130,501,322,415,527,191
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 130,501,322,415,527,191
- en: Write a Python program that calculates and displays the average value of those
    that are between 300 and 500\. Assume there is at least one number in the file.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，计算并显示那些在300到500之间的平均值。假设文件中至少有一个数字。
- en: 3)Suppose there is a file named “f_data40.2-3.txt” that contains the grades
    and the full names of the students of a class (separated by a comma character),
    one record on each line. An example of the structure of the file is shown here.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 3)假设有一个名为“f_data40.2-3.txt”的文件，其中包含班级学生的成绩和全名（由逗号字符分隔），每行一个记录。以下是该文件结构的示例。
- en: 96,George Papas
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 96,George Papas
- en: 100,Anna Maria Garcia
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 100,Anna Maria Garcia
- en: 89,Peter Smith
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 89,Peter Smith
- en: .
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: Write a Python program that finds and displays the full name of the best and
    the worst student of the class. Assume there is at least one record in the file
    and that all of the grades are different.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，找到并显示班级中最好和最差学生的全名。假设文件中至少有一个记录，并且所有成绩都是不同的。
- en: '4)The IT administrator of a transportation company needs a program to extract
    useful information from a file named “f_data40.2-4.txt” regarding the items the
    company transports. Suppose the file contains the width, length, height and description
    of each item. The dimensions of the items are in inches and each dimension occupies
    4 characters in the file (2 characters for the integer part, one for the decimal
    point and one for the decimal digit). An example of the file''s structure is shown
    below:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 4)运输公司的IT管理员需要一个程序从名为“f_data40.2-4.txt”的文件中提取有关公司运输物品的有用信息。假设该文件包含每个物品的宽度、长度、高度和描述。物品的尺寸以英寸为单位，每个尺寸在文件中占用4个字符（整数部分2个字符，小数点1个字符，小数位1个字符）。以下是该文件结构的示例：
- en: 110.5 011.2 020.9 Box No 37 (Plastic bottles)
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 110.5 011.2 020.9 盒子编号37（塑料瓶）
- en: 022.6 023.1 040.2 Container No 23 (6 glasses)
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 022.6 023.1 040.2 容器编号23（6个玻璃瓶）
- en: 009.5 156.6 020.0 Package No 12 (Fragile items)
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 009.5 156.6 020.0 包裹编号12（易碎物品）
- en: 024.2 020.1 030.1 Container No 29 (Glass bottles)
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 024.2 020.1 030.1 容器编号29（玻璃瓶）
- en: 'Write a Python program that:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序：
- en: i)prompts the user to enter a keyword to search within the description of the
    items. For example, if the user enters the word “glass”, then the program must
    display the following messages
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: i)提示用户输入一个关键字以在物品描述中进行搜索。例如，如果用户输入单词“glass”，则程序必须显示以下消息
- en: Keyword 'glass' found!
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 关键词'glass'找到！
- en: 'Container No 23 (6 glasses) – Dimensions: 22.6 x 23.1 x 40.2'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 容器编号23（6个玻璃瓶）- 尺寸：22.6 x 23.1 x 40.2
- en: 'Container No 29 (Glass bottles) - Dimensions: 24.2 x 20.1 x 30.1'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 容器编号29（玻璃瓶）- 尺寸：24.2 x 20.1 x 30.1
- en: 'ii)finds and displays the volume (in cubic feet) of each item. The messages
    must be formatted as in the example below:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: ii)找到并显示每个物品的体积（以立方英尺为单位）。消息必须格式化如下：
- en: 'Volume of each item:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 每个物品的体积：
- en: 'Box No 37 (Plastic bottles): Volume = 14.9686 cubic feet'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 盒子编号37（塑料瓶）：体积 = 14.9686立方英尺
- en: 'Container No 23 (6 glasses): Volume = 12.1451 cubic feet'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 容器编号23（6个玻璃瓶）：体积 = 12.1451立方英尺
- en: 'Package No 12 (Fragile items): Volume = 17.2187 cubic feet'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 包裹编号12（易碎物品）：体积 = 17.2187立方英尺
- en: 'Container No 29 (Glass bottles): Volume = 8.472940 cubic feet'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 容器编号29（玻璃瓶）：体积 = 8.472940立方英尺
- en: iii)finds and displays the total volume (in cubic feet) of all the items.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: iii)找到并显示所有项目的总体积（以立方英尺为单位）。
- en: iv)finds and displays the description of the box with the greatest volume.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: iv)找到并显示体积最大的盒子的描述。
- en: Keep in mind that one cubic foot is equivalent to 1728 cubic inches.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，一立方英尺等于1728立方英寸。
- en: 5)Write a Python program that prompts the user to enter the filenames of two
    files. The program must then concatenate the contents of the two files and write
    the concatenated text in a third file named “final.txt”, placing the contents
    of the first file after the contents of the second file. If the user-provided
    filenames do not contain the “.txt” extension the program must display an error
    message.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 5)编写一个Python程序，提示用户输入两个文件的文件名。然后程序必须将两个文件的 内容连接起来，并将连接后的文本写入名为“final.txt”的第三个文件中，将第一个文件的内容放在第二个文件的内容之后。如果用户提供的文件名不包含“
    .txt”扩展名，程序必须显示错误消息。
- en: 6)Suppose there is a file named “f_data40.2-6.txt” that contains 15 numbers,
    one on each line. Write a Python program that sorts those numbers in ascending
    order using the bubble sort algorithm and writes the sorted values in the same
    file, below the initial unsorted values.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 6)假设有一个名为“f_data40.2-6.txt”的文件，其中包含15个数字，每个数字占一行。编写一个Python程序，使用冒泡排序算法将这些数字按升序排序，并将排序后的值写入同一文件中，位于初始未排序值下方。
- en: 7)Suppose there is a file named “f_data40.2-7.txt” that contains names of eight
    cities as well as their maximum temperatures on a specific day. An example of
    the structure of the file is shown here.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 7)假设有一个名为“f_data40.2-7.txt”的文件，其中包含八个城市的名称以及它们在特定一天的最高温度。文件的结构示例如下。
- en: New York
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 纽约
- en: '82.3'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '82.3'
- en: Washington DC
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 华盛顿特区
- en: '84.3'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '84.3'
- en: .
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: Thus, the odd-numbered lines contain city names and the even-numbered lines
    contain the maximum temperature of each city. Write a Python program that reads
    the file line by line and stores the city names and the temperatures in the lists
    cities and temperatures correspondingly. Assume there is at least one name of
    a city and its corresponding temperature in the file. The program must then
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，奇数行包含城市名称，偶数行包含每个城市的最高温度。编写一个Python程序，逐行读取文件，并将城市名称和温度分别存储在“cities”和“temperatures”列表中。假设文件中至少有一个城市名称及其对应温度。然后程序必须
- en: i)calculate and display the average temperature of all cities.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: i)计算并显示所有城市的平均气温。
- en: ii)find and display the highest temperature as well as all city names that have
    this temperature.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: ii)找到并显示最高温度以及所有具有该温度的城市名称。
- en: '8)Some words such as “revolutionary” and “internationalization” are so lengthy
    that writing them out repeatedly can become quite tiresome. Let''s consider a
    word too long if its length is more than 10 characters. In such cases, this word
    must be replaced with a special abbreviation which is made like this: you keep
    the first and the last letter of the word and insert the number of letters between
    them. For instance, “revolutionary” becomes “r11y” and “internationalization”
    becomes “i18n”.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 8)有些单词如“革命性的”和“国际化”非常长，反复书写它们会相当累人。如果单词的长度超过10个字符，则认为该单词过长。在这种情况下，必须用特殊缩写替换该单词：你保留单词的首尾字母，并在它们之间插入字母的数量。例如，“革命性的”变为“r11y”，“国际化”变为“i18n”。
- en: 'Suppose there is a file named “f_data40.2-8.txt” that contains an English text.
    Do the following:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个名为“f_data40.2-8.txt”的文件，其中包含英文文本。执行以下操作：
- en: i)Write a subprogram named abbreviate that accepts a word and when it is more
    than 10 characters long, it returns its abbreviation; it must return the same
    word otherwise.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为“abbreviate”的子程序，它接受一个单词，如果它超过10个字符长，则返回其缩写；否则返回相同的单词。
- en: ii)Using the subprogram cited above, write a Python program that reads the text
    from the file and displays it with all long words replaced by their abbreviations.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: ii)使用上述子程序，编写一个Python程序，从文件中读取文本，并显示所有长单词的缩写形式。
- en: Assume that the words are separated by a single space character.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 假设单词之间由单个空格字符分隔。
- en: '9)Pig Latin is a playful language game often used in English-speaking countries.
    It involves altering the letters of a word based on a set of simple rules. Here
    are the rules for translating a word into Pig Latin:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 9)Pig Latin是一种在讲英语的国家中常用的有趣的语言游戏。它涉及根据一组简单的规则改变单词的字母。以下是翻译单词到Pig Latin的规则：
- en: ►If the word begins with a vowel, simply add “way” to the end of the word. For
    example, “apple” becomes “appleway”.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: ►如果单词以元音开头，只需将“way”添加到单词的末尾。例如，“apple”变为“appleway”。
- en: ►If the word begins with one or more consonants, move the consonant(s) to the
    end of the word and add “ay”. For example, “banana” becomes “ananabay” and “flower”
    becomes “owerflay”.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: ►如果单词以一个或多个辅音开头，将辅音（s）移动到单词的末尾并添加“ay”。例如，“banana”变为“ananabay”和“flower”变为“owerflay”。
- en: 'Suppose there is a file named “f_data40.2-9.txt” that contains an English text.
    Do the following:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个名为“f_data40.2-9.txt”的文件，其中包含英文文本。执行以下操作：
- en: i)Write a subprogram named pigLatinTranslator that accepts an English word and
    returns the corresponding Pig Latin translation.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为 pigLatinTranslator 的子程序，该程序接受一个英语单词并返回相应的 Pig Latin 翻译。
- en: ii)Using the subprogram cited above, write a Python program that reads the text
    from the file and writes the corresponding Pig Latin translation in a file named
    “pig_latin_translation.txt”.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: ii)使用上述子程序，编写一个 Python 程序，该程序从文件中读取文本，并将相应的 Pig Latin 翻译写入名为“pig_latin_translation.txt”的文件。
- en: Assume that the text contains only lowercase characters of the English alphabet
    and the words are separated by a single space character.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 假设文本仅包含英文字母的小写字母，单词之间由单个空格字符分隔。
- en: 10)Given two strings, X = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" and Y = "JKWCTAMEDXSLFBYUNG
    RZOIQVHP", you can encrypt any message. The person who holds the Y string can
    decrypt the encrypted message by mapping the letters of string X to string Y,
    one by one. To be more specific, the letter “A” is encrypted as “J”, the letter
    “B” as “K”, the letter “C” as “W”, and so on. According to this encryption method,
    write a Python program that prompts the user to enter a message and then writes
    the encrypted message in a file named “encrypted.txt”. Space characters must not
    be encrypted and should remain as is in the encrypted message.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 10)给定两个字符串，X = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" 和 Y = "JKWCTAMEDXSLFBYUNG RZOIQVHP"，你可以加密任何消息。持有
    Y 字符串的人可以通过将字符串 X 中的字母逐个映射到字符串 Y 来解密加密消息。更具体地说，字母“A”被加密为“J”，字母“B”为“K”，字母“C”为“W”，依此类推。根据这种加密方法，编写一个
    Python 程序，提示用户输入一条消息，然后将加密消息写入名为“encrypted.txt”的文件。空格字符不得加密，应保持原样。
- en: 11)Write a Python program that decrypts the message of the previous exercise
    (in the file “encrypted.txt”) and writes the decrypted message in a file named
    “decrypted.txt”.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 11)编写一个 Python 程序，该程序解密上一个练习（在文件“encrypted.txt”中）的消息，并将解密后的消息写入名为“decrypted.txt”的文件。
- en: 12)Write a subprogram named copyFile that accepts two arguments (source and
    destination) and then creates a new copy of the file source using the name destination.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 12)编写一个名为 copyFile 的子程序，该程序接受两个参数（源和目标），然后使用名称 destination 创建源文件的新副本。
- en: 13)Suppose there is a file named “f_data40.2-13.txt” that contains the lengths
    of all three sides of a triangle (one on each line). An example of the structure
    of the file is shown here.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 13)假设有一个名为“f_data40.2-13.txt”的文件，其中包含三角形所有三边的长度（每行一个）。文件结构的示例如下。
- en: '16.0'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '16.0'
- en: '20.6'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '20.6'
- en: '22.7'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '22.7'
- en: Do the following
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作
- en: i)Write a class named Triangle that includes
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为 Triangle 的类，包括
- en: a)a constructor that reads the three sides from the file and assigns them to
    three private fields named _sideA, _sideB, and _sideC.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: a)一个构造函数，从文件中读取三个边并将其分配给三个名为 _sideA、_sideB 和 _sideC 的私有字段。
- en: b)a method named canBeTriangle that checks and returns True when the values
    in fields _sideA, _sideB, and _sideC can be lengths of the three sides of a triangle.
    It must return False otherwise.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: b)编写一个名为 canBeTriangle 的方法，该方法检查并返回 True，当字段 _sideA、_sideB 和 _sideC 的值可以作为三角形的三边长度时。否则必须返回
    False。
- en: 'Hint: In any triangle, the length of each side is less than the sum of the
    lengths of the other two sides.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：在任何三角形中，每边的长度都小于其他两边长度的总和。
- en: c)a void method named displayLengths that displays the lengths of all three
    sides as well as a message indicating whether those lengths can be lengths of
    the three sides of a triangle or not.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: c)编写一个名为 displayLengths 的 void 方法，该方法显示三边的长度以及一个消息，指出这些长度是否可以是三角形的三边长度。
- en: d)a void method named displayArea that, in case the lengths can be lengths of
    the three sides of a triangle, calculates and displays the area of the triangle.
    You can use Heron's formula, which has been known for nearly 2,000 years!
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: d)编写一个名为 displayArea 的 void 方法，如果长度可以是三角形的三边长度，则计算并显示三角形的面积。你可以使用近 2000 年来已知的赫伦公式！
- en: .![Image](img/chapter12-24.png)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: .![图片](img/chapter12-24.png)
- en: where S is the semi-perimeter ![Image](img/chapter12-25.png)
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 其中S是半周长 ![Image](img/chapter12-25.png)
- en: e)a void method named displayPerimeter that, in case the lengths can be lengths
    of the three sides of a triangle, calculates and displays the perimeter of the
    triangle.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: e)一个名为displayPerimeter的void方法，如果长度可以是三角形的三边长度，则计算并显示三角形的周长。
- en: ii)Using the class cited above, write a Python program that displays all available
    information about the triangle.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: ii)使用上述类，编写一个Python程序，显示关于三角形的所有可用信息。
