- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Building Login and Registration Forms
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建“登录”和“注册”表单
- en: Registration and login are essential features of web applications that have
    users. Even if an authentication flow can be handled directly with simple requests,
    there is also a need to have logic working behind the UI to manage the authentication
    and session, especially if we are using a **JSON web** **token** (**JWT**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注册和登录是具有用户的Web应用程序的基本功能。即使身份验证流程可以直接通过简单的请求处理，也需要在UI背后有逻辑来管理身份验证和会话，尤其是如果我们使用的是**JSON
    Web Token**（JWT）。
- en: 'In this chapter, we’ll create login and registration forms with React. There
    is a lot to do and learn here, but here’s what this chapter will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用React创建登录和注册表单。这里有很多事情要做和学习，以下是本章将涵盖的内容：
- en: Configuration of a CSS framework in a React project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在React项目中配置CSS框架
- en: Adding protected and public pages to an application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向应用程序添加受保护和公开的页面
- en: Creating a page for registration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建注册页面
- en: Creating a page for login
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建登录页面
- en: Creating a welcome page after the login or registration is successful
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录或注册成功后创建欢迎页面
- en: By the end of the chapter, you will be able to build registration and login
    pages using React, and you will know how to manage JWT authentication from the
    frontend.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够使用React构建注册和登录页面，并且将了解如何从前端管理JWT身份验证。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Make sure to have VS Code installed and configured on your machine.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的机器上已安装并配置了VS Code。
- en: You can find the code for this chapter at [https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap7](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap7).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap7](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap7)找到本章的代码。
- en: Understanding the authentication flow
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解身份验证流程
- en: We’ve already explored authentication on a social media project from a backend
    perspective in [*Chapter 2*](B18221_02.xhtml#_idTextAnchor036), *Authentication
    and Authorization Using JWTs*. But how does this manifest in the React application?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[*第2章*](B18221_02.xhtml#_idTextAnchor036)“使用JWT进行身份验证和授权”中从后端的角度探讨了社交媒体项目上的身份验证。但在React应用程序中它是如何体现的呢？
- en: 'Well, things will be a little bit different. To quickly recapitulate, we have
    a registration and a login endpoint. These endpoints return the user objects with
    two tokens:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，事情会有一点不同。为了快速回顾，我们有一个注册和登录端点。这些端点返回包含两个令牌的用户对象：
- en: '**An access token with a lifetime of 5 minutes**: This token helps with authenticating
    on the server side when requesting without the need to log in again. Then, we
    can access resources and perform actions on these resources.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**具有5分钟有效期的访问令牌**：此令牌有助于在服务器端进行请求时进行身份验证，无需再次登录。然后，我们可以访问资源并在这些资源上执行操作。'
- en: '**A refresh token**: This token helps you to retrieve another access token
    if one has already expired.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**刷新令牌**：此令牌可以帮助你在令牌已过期的情况下检索另一个访问令牌。'
- en: With this data coming from the server, we can manage authentication from the
    React application side like so. When a registration or a login is successful,
    we store the returned response in the client’s browser; we’ll use `localStorage`
    for this.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用从服务器返回的数据，我们可以像这样从React应用程序端管理身份验证。当注册或登录成功时，我们将返回的响应存储在客户端的浏览器中；我们将使用`localStorage`来做这件事。
- en: 'The `localStorage` property helps us to work with the browser storage, enabling
    browsers to store key-value pairs in the browser. Two methods will be used with
    `localStorage`: `setItem()` to set a key-value pair and `getItem()` to access
    the values.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`localStorage`属性帮助我们与浏览器存储一起工作，使浏览器能够将键值对存储在浏览器中。我们将使用`localStorage`的两个方法：`setItem()`用于设置键值对，`getItem()`用于访问值。'
- en: Then, for each request sent to the server, we add the Authorization header to
    the request containing the access token retrieved from `localStorage`. If the
    request returns a `401` error, it means that the token has expired. If this happens,
    we send a request to the refresh endpoint to get a new access token, using the
    refresh token also retrieved from `localStorage`. And with this access token,
    we resend the failed request.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对于发送到服务器的每个请求，我们都会在请求中添加包含从`localStorage`检索到的访问令牌的“授权”头。如果请求返回`401`错误，这意味着令牌已过期。如果发生这种情况，我们将向刷新端点发送请求以获取新的访问令牌，同时使用也从`localStorage`检索到的刷新令牌。然后，我们使用这个访问令牌重新发送失败的请求。
- en: If we receive a `401` error again, it means that the refresh token has expired.
    Then, the user will be sent to the login page to log in again, retrieve new tokens,
    and store them in `localStorage`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次收到`401`错误，这意味着刷新令牌已过期。然后，用户将被发送到登录页面重新登录，获取新的令牌，并将它们存储在`localStorage`中。
- en: Now that we understand the authentication flow from the frontend side, let’s
    write the requests service we will use for data fetching and performing CRUD actions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经从前端方面理解了认证流程，那么让我们编写我们将用于数据获取和执行CRUD操作的请求服务。
- en: Writing the requests service
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写请求服务
- en: Making requests in JavaScript is relatively easy. The node environment and the
    browser provide native packages such as `fetch` to allow you to request a server.
    However, this project will use the `axios` package for HTTP requests.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中发起请求相对简单。Node环境和浏览器提供了原生的包，如`fetch`，允许你请求服务器。然而，本项目将使用`axios`包进行HTTP请求。
- en: 'Axios is a popular library mainly used to send asynchronous HTTP requests to
    REST endpoints. Axios is the perfect library for CRUD operations. However, we
    will also install `axios-auth-refresh`. This simple library assists with an automatic
    refresh of tokens via `axios` interceptors. To install the `axios` and `axios-auth-refresh`
    packages, follow these steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Axios是一个流行的库，主要用于向REST端点发送异步HTTP请求。Axios是CRUD操作的理想库。然而，我们还将安装`axios-auth-refresh`。这个简单的库通过`axios`拦截器帮助自动刷新令牌。要安装`axios`和`axios-auth-refresh`包，请按照以下步骤操作：
- en: 'In the `social-media-app` directory, add the `axios` and `axios-auth-refresh`
    packages by running the following command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`social-media-app`目录中，通过运行以下命令添加`axios`和`axios-auth-refresh`包：
- en: '[PRE0]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once it’s installed, create a directory called `helpers` in the `src` folder
    of the React project, and once it’s done, add a file called `axios.js`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，在React项目的`src`文件夹中创建一个名为`helpers`的目录，完成后，添加一个名为`axios.js`的文件：
- en: '![Figure 7.1 – The path of the helper.js file](img/Figure_7.01_B18221.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 – helper.js文件路径](img/Figure_7.01_B18221.jpg)'
- en: Figure 7.1 – The path of the helper.js file
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – helper.js文件路径
- en: 'Now, let’s make the import and write the basic configurations, such as the
    URL and some headers. Take a look at the following code block:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进行导入并编写基本配置，例如URL和一些头部信息。看看以下代码块：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding code block, we have added the `Content-Type` header for the
    `POST` requests. The following figure shows the authentication flow we’ll follow
    in this book:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们为`POST`请求添加了`Content-Type`头部。以下图显示了本书中我们将遵循的认证流程：
- en: '![Figure 7.2 – Authentication flow with access/refresh tokens](img/Figure_7.02_B18221.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – 使用访问/刷新令牌的认证流程](img/Figure_7.02_B18221.jpg)'
- en: Figure 7.2 – Authentication flow with access/refresh tokens
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 使用访问/刷新令牌的认证流程
- en: 'In the preceding figure, note the following points:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，请注意以下要点：
- en: Every time we are requesting with `axiosService`, we retrieve the access token
    from `localStorage` and create a new header authorization using the access token
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次我们使用`axiosService`进行请求时，我们从`localStorage`中检索访问令牌，并使用访问令牌创建一个新的授权头
- en: The access token will expire if the request is made and a `400` status code
    is returned
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问令牌将在请求被发送且返回`400`状态码时过期
- en: We retrieve the refresh token from `localStorage` and make a request to retrieve
    a new access token
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们从`localStorage`中检索刷新令牌，并发送请求以获取新的访问令牌
- en: Once done, we register the new access token in `localStorage` and restart the
    previously failed request
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成后，我们在`localStorage`中注册新的访问令牌，并重新启动之前失败的请求
- en: Yet, if the refresh token request has failed too, we simply remove `auth` from
    `localStorage` and send the user to the login screen
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，如果刷新令牌请求也失败了，我们只需从`localStorage`中移除`auth`，并将用户发送到登录屏幕
- en: 'Let’s implement the previously described flow in the `axios.js` file by following
    these steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤在`axios.js`文件中实现之前描述的流程：
- en: 'First we will write a request interceptor to add headers to the request:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将编写一个请求拦截器来添加头部到请求：
- en: '[PRE2]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note that we can use the object-destructuring syntax to extract property values
    from an object in JavaScript. In pre-ES2015 code, it probably goes like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们可以在JavaScript中使用对象解构语法从对象中提取属性值。在ES2015之前的代码中，它可能看起来像这样：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you have a lot of properties to extract from an object, it can quickly become
    long. That’s where object destructuring comes in handy:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要从一个对象中提取很多属性，它可能会很快变得很长。这就是对象解构派上用场的地方：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can learn more about the syntax at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)了解更多关于语法的知识。
- en: 'After that, we will resolve the requests and return a resolved or rejected
    promise:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们将解析请求并返回解析或拒绝的承诺：
- en: '[PRE14]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This last step is the icing on the cake. Create a function that contains the
    refresh `auth` logic. This function will be called whenever the failed request
    returns a `401` error:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后这一步是锦上添花。创建一个包含刷新`auth`逻辑的函数。当失败的请求返回`401`错误时，这个函数将被调用：
- en: '[PRE18]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'And finally, initialize the authentication interceptor and create a custom
    fetcher too:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，初始化认证拦截器并创建一个自定义的fetcher：
- en: '[PRE39]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The fetcher will be used to make `GET` requests on the API resources. Great!
    The fetching logic is implemented, and we can move on to registering a user. But
    before that, we need to define protected routes in the project.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用fetcher在API资源上执行`GET`请求。太好了！获取逻辑已实现，我们可以继续注册用户。但在那之前，我们需要在项目中定义受保护的路由。
- en: Protected routes
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 受保护的路由
- en: Routing with the condition on a frontend application is a big plus, as it helps
    with a better user experience. For example, if you are not logged in to Twitter
    and want to check a profile or comment, you will be redirected to the login page.
    These are protected pages or actions, so you must log in before accessing these
    resources. In this section, we’ll write a `ProtectedRoute` component using `React-Router`
    components.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端应用程序上基于条件的路由是一个很大的优点，因为它有助于提升用户体验。例如，如果你没有登录Twitter，想要查看个人资料或评论，你将被重定向到登录页面。这些是受保护页面或操作，因此你必须登录才能访问这些资源。在本节中，我们将使用`React-Router`组件编写一个`ProtectedRoute`组件。
- en: Creating a protected route wrapper
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建受保护的路由包装器
- en: 'To create a protected route wrapper, follow these steps:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建受保护的路由包装器，请按照以下步骤操作：
- en: Create a new directory in the `src` directory called `routes`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`目录中创建一个名为`routes`的新目录。
- en: Inside the newly created directory, create a file called `ProtectedRoute.jsx`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新建的目录中，创建一个名为`ProtectedRoute.jsx`的文件。
- en: 'Once the file is created, import the needed libraries:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件创建完成后，导入所需的库：
- en: src/routes/ProtectedRoute.jsx
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: src/routes/ProtectedRoute.jsx
- en: '[PRE44]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Write the following logic for the protected routes:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为受保护的路由编写以下逻辑：
- en: '[PRE45]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In the preceding code snippet, we are retrieving the user property from `localStorage`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们从`localStorage`中检索用户属性。
- en: We then use this property to check whether we should redirect the user to the
    login page or render the page (`children`). If **user** is null or undefined,
    it means that the user has not logged in, so we redirect the user to the login
    page, otherwise, we give access to the asked page.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们然后使用这个属性来检查是否应该将用户重定向到登录页面或渲染页面（`children`）。如果`user`为null或undefined，这意味着用户尚未登录，因此我们将用户重定向到登录页面，否则，我们允许访问请求的页面。
- en: 'Then, inside the `App.js` file, let’s rewrite the content:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`App.js`文件中，让我们重写内容：
- en: src/App.js
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: src/App.js
- en: '[PRE54]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Now, the default location will be the profile page. However, with no credentials
    in the store, the user will be redirected to the login page.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，默认位置将是个人资料页面。然而，由于存储中没有凭证，用户将被重定向到登录页面。
- en: Great! We’ve now implemented the first step of the authentication flow. In the
    next section, we will write a page for registration before writing the page for
    login.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们现在已经实现了认证流程的第一步。在下一节中，我们将编写注册页面，然后再编写登录页面。
- en: Creating the registration page
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建注册页面
- en: If a user needs login credentials, they will need to register first. In this
    section, we will create a registration form while also handling the necessary
    requests.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户需要登录凭证，他们首先需要注册。在本节中，我们将创建一个注册表单，同时处理必要的请求。
- en: Adding a registration page
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加注册页面
- en: 'Let’s start by writing code for the form page. We’ll start by writing the registration
    `form` component:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从编写表单页面的代码开始。我们将从编写注册`form`组件开始：
- en: Inside the `src` directory, create a new directory called `components` and then
    create a new directory called `authentication` inside the newly created directory.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`目录中，创建一个名为`components`的新目录，然后在新建的目录中创建一个名为`authentication`的新目录。
- en: This directory will contain the registration and login forms.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此目录将包含注册和登录表单。
- en: 'Once that’s done, create a file called `RegistrationForm.jsx` inside the `authentication`
    directory:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦完成，在 `authentication` 目录下创建一个名为 `RegistrationForm.jsx` 的文件：
- en: '![Figure 7.3 – The registration file](img/Figure_7.03_B18221.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 注册文件](img/Figure_7.03_B18221.jpg)'
- en: Figure 7.3 – The registration file
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 注册文件
- en: React Bootstrap provides `form` components that we can use quickly to create
    a form and make basic validation. In this component, we’ll also have to make a
    request to the API, register the user details and tokens in the store, and redirect
    the user to the home page if the request is successful.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: React Bootstrap 提供了 `form` 组件，我们可以快速使用它们创建表单并进行基本验证。在这个组件中，我们还需要向 API 发送请求，将用户详情和令牌注册到存储中，如果请求成功则将用户重定向到主页。
- en: 'Next, we will add the needed imports:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加所需的导入：
- en: src/components/forms/RegistrationForm.js
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/components/forms/RegistrationForm.js`'
- en: '[PRE55]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, declare the states and functions we’ll use in the component:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，声明我们在组件中使用的状态和函数：
- en: src/components/forms/RegistrationForm.js
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/components/forms/RegistrationForm.js`'
- en: '[PRE56]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Let’s quickly explain what we are doing in the preceding code snippet.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速解释一下前面代码片段中我们在做什么。
- en: The `navigate` Hook will help us navigate to the home page if the request is
    successful.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`navigate` 钩子将帮助我们如果请求成功则导航到主页。'
- en: The `validated`, `form`, and `error` states are respectively used to check whether
    the form is valid or not, the values of each field in the form, and the error
    message to display if the request doesn’t pass.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`validated`、`form` 和 `error` 状态分别用于检查表单是否有效，表单中每个字段的值，以及如果请求未通过要显示的错误信息。'
- en: 'Great! Let’s write the function that will handle the form submission:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太好了！让我们编写处理表单提交的函数：
- en: src/components/forms/RegistrationForm.js
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/components/forms/RegistrationForm.js`'
- en: '[PRE57]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The next step is to use `axios` to make a `POST` request to the API:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是使用 `axios` 向 API 发送 `POST` 请求：
- en: src/components/forms/RegistrationForm.js
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/components/forms/RegistrationForm.js`'
- en: '[PRE58]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: In the preceding code block, we are first blocking the default form submission
    behavior with `event.preventDefault()` – that is, reloading the page. Next, we
    are checking whether the basic validations for the fields are done. With the validation
    successfully done, we can easily make a request with `axios` and store tokens
    and user details in `localStorage`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们首先使用 `event.preventDefault()` 阻止默认的表单提交行为——即重新加载页面。接下来，我们检查字段的基本验证是否完成。验证成功后，我们可以轻松地使用
    `axios` 发送请求，并将令牌和用户详情存储在 `localStorage` 中。
- en: This way, the user is navigated to the home page.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，用户就会被导航到主页。
- en: 'Now, let’s add the basic UI components:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加基本的 UI 组件：
- en: src/components/forms/RegistrationForm.js
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/components/forms/RegistrationForm.js`'
- en: '[PRE59]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: There is more code after this, but let’s grasp the logic here first; the other
    will be significantly easier.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 此后有更多的代码，但让我们首先掌握这里的逻辑；其他部分将会容易得多。
- en: React Bootstrap provides a `Form` component that we can use to create fields.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: React Bootstrap 提供了一个 `Form` 组件，我们可以用它来创建字段。
- en: '`Form.Control` is a component input and it takes as props (`name`, `type`,
    etc.) attributes any input can take. `Form.Control.Feedback` will show errors
    when the fields are not valid.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`Form.Control` 是一个组件输入，它接受任何输入都可以接受的属性（`name`、`type` 等）。`Form.Control.Feedback`
    当字段无效时会显示错误。'
- en: 'Let’s do the same for the `last_name` and the `username` fields:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们对 `last_name` 和 `username` 字段做同样的处理：
- en: src/components/forms/RegistrationForm.js
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/components/forms/RegistrationForm.js`'
- en: '[PRE60]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Let’s also add a field for email:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再添加一个电子邮件字段：
- en: src/components/forms/RegistrationForm.js
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/components/forms/RegistrationForm.js`'
- en: '[PRE61]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Let’s also add a field for the password:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再添加一个密码字段：
- en: '[PRE62]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Let’s add the bio field too. We’ll use the `Textarea` field type here:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加生物字段。在这里我们将使用 `Textarea` 字段类型：
- en: src/components/forms/RegistrationForm.js
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/components/forms/RegistrationForm.js`'
- en: '[PRE79]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Finally, add the submit button and export the component:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加提交按钮并导出组件：
- en: src/components/forms/RegistrationForm.js
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/components/forms/RegistrationForm.js`'
- en: '[PRE80]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '`RegistrationForm` is now created with the required fields and the logic to
    handle the form submission.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`RegistrationForm` 现在已创建，包含所需的字段和处理表单提交的逻辑。'
- en: In the next section, we will add this registration form component to a page
    and register this page in our application route.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将把这个注册表单组件添加到一个页面中，并在我们的应用程序路由中注册这个页面。
- en: Registering the registration page route
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册注册页面路由
- en: 'Follow these steps to register the registration page route:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤注册注册页面路由：
- en: 'Inside the `src/pages` directory, create a file called `Registration.jsx`:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/pages` 目录下，创建一个名为 `Registration.jsx` 的文件：
- en: src/pages/Registration.js
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/pages/Registration.js`'
- en: '[PRE81]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: We’ve added simple introduction text to the page and imported the `LoginForm`
    component.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经向页面添加了简单的介绍性文本，并导入了 `LoginForm` 组件。
- en: 'Next, open `App.js` and register the page:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开 `App.js` 并注册页面：
- en: src/App.js
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/App.js`'
- en: '[PRE82]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Great! Now, go to `http://localhost:3000/register/`, and you should have a
    similar result to this:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太好了！现在，前往 `http://localhost:3000/register/`，你应该会有与此类似的结果：
- en: '![Figure 7.4 – The registration page](img/Figure_7.04_B18221.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – 注册页面](img/Figure_7.04_B18221.jpg)'
- en: Figure 7.4 – The registration page
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`图 7.4 – 注册页面`'
- en: 'Test it and register with an account. You’ll be redirected to the home page:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试它并使用一个账户注册。你将被重定向到主页：
- en: '![Figure 7.5 – The home page](img/Figure_7.05_B18221.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – 主页](img/Figure_7.05_B18221.jpg)'
- en: Figure 7.5 – The home page
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 主页
- en: Great! We’ve just written the registration page.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们刚刚写完了注册页面。
- en: In the next section, we will create the login page.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将创建登录页面。
- en: Creating the login page
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建登录页面
- en: As we have already created the registration page, the logic for login will be
    pretty similar but with fewer fields.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经创建了注册页面，登录逻辑将非常相似，但字段较少。
- en: Adding the login page
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加登录页面
- en: 'Follow these steps to add a login page:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加登录页面：
- en: Inside the `src/components/authentication` directory, add a new file called
    `LoginForm.jsx`. This file will contain the form component to log in a user.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/components/authentication` 目录内，添加一个名为 `LoginForm.jsx` 的新文件。此文件将包含用于登录用户的表单组件。
- en: 'Next, add the imports:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加导入：
- en: src/components/authentication/LoginForm.jsx
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/components/authentication/LoginForm.jsx`'
- en: '[PRE83]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Write the logic to handle the login:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写处理登录的逻辑：
- en: src/components/authentication/LoginForm.jsx
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/components/authentication/LoginForm.jsx`'
- en: '[PRE84]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'As we did for the registration process, we will now make a request on the login
    endpoint:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们在注册过程中所做的那样，我们现在将对登录端点发起请求：
- en: src/components/authentication/LoginForm.jsx
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/components/authentication/LoginForm.jsx`'
- en: '[PRE85]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: This is nearly the same logic as the registration, but here, we are only working
    with the username and the password.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎与注册逻辑相同，但在这里，我们只处理用户名和密码。
- en: 'With the logic ready to handle the request made for login, let’s add the UI:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当准备好处理登录请求的逻辑后，让我们添加 UI：
- en: src/components/authentication/LoginForm.jsx
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/components/authentication/LoginForm.jsx`'
- en: '[PRE86]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: In the preceding code, we are creating the form and adding the first input of
    the form, the username input.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在创建表单并添加表单的第一个输入项，即用户名输入。
- en: 'Let’s also add the password form input and the submit button:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再添加密码表单输入和提交按钮：
- en: '[PRE87]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: We have created the `LoginForm` component with the required fields and logic
    to handle data submission.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了包含所需字段和处理数据提交逻辑的 `LoginForm` 组件。
- en: In the next section, we will add `LoginForm` to a page and register this page
    in the application routes.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将向页面添加 `LoginForm` 并在应用程序的路由中注册此页面。
- en: Registering the login page
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册登录页面
- en: 'Follow these steps to register the login page:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤注册登录页面：
- en: 'Inside the `src/pages` directory, create a file called `Login.jsx`:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/pages` 目录内，创建一个名为 `Login.jsx` 的文件：
- en: src/pages/Login.jsx
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/pages/Login.jsx`'
- en: '[PRE113]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Next, let’s add the UI:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们添加 UI：
- en: src/pages/Login.jsx
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/pages/Login.jsx`'
- en: '[PRE114]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: This is also quite similar to the registration page.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这也与注册页面非常相似。
- en: 'Register the page in the routes of the application in the `App.js` file:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App.js` 文件中，将页面注册到应用程序的路由中：
- en: src/App.js
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/App.js`'
- en: '[PRE115]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Visit `http://localhost:3000/login/`, and you should have a similar page to
    this:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 `http://localhost:3000/login/`，你应该会有与此类似的页面：
- en: '![`Figure 7.6 – The login page](img/Figure_7.06_B18221.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – 登录页面](img/Figure_7.06_B18221.jpg)'
- en: '`Figure 7.6 – The login page'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`图 7.6 – 登录页面`'
- en: Test it again, and you should be redirected to the home page.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次测试它，你应该会被重定向到主页。
- en: The authentication flow is working like a charm, but we have some repeated code
    in our project. Let’s do some refactoring by doing a little exercise in the next
    section.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 认证流程正在顺利工作，但我们在项目中有一些重复的代码。让我们在下一节中通过一个小练习进行重构。
- en: Refactoring the authentication flow code
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构认证流程代码
- en: Instead of repeating the same code across the code base, we can follow the `LoginForm`
    and `RegistrationForm` components. In this section, we will write a custom React
    Hook to handle this logic, but before doing that, let’s understand what a Hook
    is.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在代码库中重复相同的代码，我们可以遵循 `LoginForm` 和 `RegistrationForm` 组件。在本节中，我们将编写一个自定义的
    React Hook 来处理这个逻辑，但在做之前，让我们了解一下什么是 Hook。
- en: What is a Hook?
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 Hook？
- en: Hooks were first introduced in React 16.8, allowing developers to use more of
    React’s features without writing a class. An interesting example of a React Hook
    is `useState`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Hooks 首次在 React 16.8 中引入，允许开发者使用更多 React 功能而无需编写类。React Hook 的一个有趣示例是 `useState`。
- en: '`useState` is a replacement for `setState`, used inside functional components
    to manage the internal state of a component. In `LoginForm`, we used `useState`
    to handle the form values. We also used `useState` to set the message error if
    the login request returns an error. For a simple test, go to the login page and
    enter the wrong credentials, and you’ll likely get a similar error to this:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`useState` 是 `setState` 的替代品，用于在函数组件内部管理组件的内部状态。在 `LoginForm` 中，我们使用 `useState`
    来处理表单值。我们还使用 `useState` 来设置错误消息，如果登录请求返回错误。为了简单测试，请访问登录页面并输入错误的凭据，你可能会得到类似于以下错误：'
- en: '![Figure 7.7 – The login form](img/Figure_7.07_B18221.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – 登录表单](img/Figure_7.07_B18221.jpg)'
- en: Figure 7.7 – The login form
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 登录表单
- en: 'The logic from this comes from the following lines in `LoginForm.jsx`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 此逻辑来自以下 `LoginForm.jsx` 中的几行：
- en: src/authentication/LoginForm.jsx
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: src/authentication/LoginForm.jsx
- en: '[PRE116]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'This is an example of the `useState` Hook, and not every Hook works the same
    way. For example, you can check the usage of the `useNavigate` Hook in the `LoginForm`
    component. There are a few rules for using Hooks as per the React documentation:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 `useState` Hook 的示例，并不是每个 Hook 都以相同的方式工作。例如，你可以在 `LoginForm` 组件中检查 `useNavigate`
    Hook 的用法。根据 React 文档，使用 Hooks 有一些规则：
- en: '**Only call Hooks at the top level**: Don’t call Hooks inside loops, conditions,
    or nested routes'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅在最顶层调用 Hooks**：不要在循环、条件或嵌套路由中调用 Hooks'
- en: '**Only call Hooks from React functions**: Call Hooks from React function components
    and custom Hooks'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅从 React 函数中调用 Hooks**：从 React 函数组件和自定义 Hooks 中调用 Hooks'
- en: React allows us to write custom Hooks. Let’s write a custom Hook to handle user
    authentication. Inside a new file, we’ll write functions that make it easier to
    retrieve and manipulate the `auth` object in `localStorage`.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: React 允许我们编写自定义 Hooks。让我们编写一个自定义 Hook 来处理用户身份验证。在一个新文件中，我们将编写使检索和操作 `localStorage`
    中的 `auth` 对象更容易的函数。
- en: Writing code for a custom Hook
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写自定义 Hook 的代码
- en: 'Follow these steps to create a custom Hook:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建自定义 Hook：
- en: Inside the `src` directory, create a new directory called `hooks`. This directory
    will contain all the Hooks that we’ll write in this book.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src` 目录中，创建一个名为 `hooks` 的新目录。此目录将包含我们在本书中编写的所有 Hooks。
- en: Inside the newly created directory, add a file called `user.actions.js`.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的目录中，添加一个名为 `user.actions.js` 的文件。
- en: 'Let’s add all the necessary content, starting with the imports:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加所有必要的内容，从导入开始：
- en: src/hooks/user.actions.js
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: src/hooks/user.actions.js
- en: '[PRE117]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Next, let’s add a function called `useUserActions`. A custom Hook is a JavaScript
    function whose name starts with `use`:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们添加一个名为 `useUserActions` 的函数。自定义 Hook 是一个以 `use` 开头的 JavaScript 函数：
- en: src/hooks/user.actions.js
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: src/hooks/user.actions.js
- en: '[PRE118]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: We can now add the `login` and `logout` functions. These functions will return
    `Promise`, which, if successful, will register the user data in `localStorage`
    and redirect the user to the home page, or allow us to catch and handle errors.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以添加 `login` 和 `logout` 函数。这些函数将返回 `Promise`，如果成功，将在 `localStorage` 中注册用户数据并将用户重定向到主页，或者允许我们捕获和处理错误。
- en: 'We will now write the `register` function as a bit of exercise, but it’s not
    that different from the `login` function:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将编写 `register` 函数作为练习的一部分，但它与 `login` 函数没有太大区别：
- en: src/hooks/user.actions.js
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: src/hooks/user.actions.js
- en: '[PRE119]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Next, write the `logout` function. This function will remove the `auth` item
    from `localStorage` and redirect the user to the login page:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，编写 `logout` 函数。此函数将从 `localStorage` 中删除 `auth` 项并将用户重定向到登录页面：
- en: src/hooks/user.actions.js
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: src/hooks/user.actions.js
- en: '[PRE120]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Note that we are using a method called `setUserData`, which we have not declared
    yet.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们正在使用一个名为 `setUserData` 的方法，我们尚未声明它。
- en: 'After the `useUserActions` function, let’s add other utils functions that can
    be used across the project. These functions will help us to retrieve access tokens,
    refresh tokens, user information, or set user data:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `useUserActions` 函数之后，让我们添加其他可以在整个项目中使用的实用函数。这些函数将帮助我们检索访问令牌、刷新令牌、用户信息或设置用户数据：
- en: src/hooks/user.actions.js
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: src/hooks/user.actions.js
- en: '[PRE121]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Important note
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You might find it confusing to declare functions after calling them. Writing
    functions in JavaScript using the `function` keyword allows hoisting, meaning
    that functions declaration is moved to the top of their scope before code execution.
    You can learn more at [https://developer.mozilla.org/en-US/docs/Glossary/Hoisting](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会觉得在调用函数之后声明函数很困惑。使用`function`关键字在JavaScript中编写函数允许提升，这意味着函数声明在代码执行之前被移动到其作用域的顶部。你可以在[https://developer.mozilla.org/en-US/docs/Glossary/Hoisting](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting)了解更多信息。
- en: With the functions for retrieving a user, the access and refresh tokens, and
    the function to set user data in `localStorage`, we can now call the function
    in the `LoginForm` and `RegisterForm` components.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 通过获取用户、访问和刷新令牌以及设置用户数据在`localStorage`中的函数，我们现在可以在`LoginForm`和`RegisterForm`组件中调用该函数。
- en: Using the functions in code
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用代码中的函数
- en: 'We have a useful Hook, `useUserActions`, in the `user.actions.js` file. We
    will use this Hook to call the `login` method, thus replacing the old login logic
    in the `LoginForm.js` file. Let’s start by using the newly written custom Hook
    in the `LoginForm` component. Follow these steps:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在`user.actions.js`文件中，我们有一个有用的钩子`useUserActions`。我们将使用这个钩子来调用`login`方法，从而替换`LoginForm.js`文件中的旧登录逻辑。让我们从在`LoginForm`组件中使用新编写的自定义钩子开始。按照以下步骤操作：
- en: 'First, import the Hooks and declare a new variable:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导入钩子并声明一个新变量：
- en: '[PRE122]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Now, we can make some changes to the `handleSubmit` function concerning the
    login request on the API:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以对API中关于登录请求的`handleSubmit`函数做一些修改：
- en: src/hooks/user.actions.js
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: src/hooks/user.actions.js
- en: '[PRE130]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: In the preceding code block, we did some quick refactoring by removing the old
    logic for login and setting user data in `localStorage`. The same logic can be
    applied to `RegistrationForm` (the `register` method is already available in the
    `useUserActions` Hook). You can modify the `RegistrationForm` component as a small
    exercise. Feel free to check the code at [https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/chap7/social-media-react/src/components/authentication/RegistrationForm.jsx](https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/chap7/social-media-react/src/components/authentication/RegistrationForm.jsx)
    to make sure your solution is valid.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们通过移除旧的登录逻辑和在`localStorage`中设置用户数据来进行了一些快速重构。同样的逻辑也可以应用到`RegistrationForm`（`register`方法已经在`useUserActions`钩子中可用）。你可以作为一个小练习修改`RegistrationForm`组件。请随意检查[https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/chap7/social-media-react/src/components/authentication/RegistrationForm.jsx](https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/chap7/social-media-react/src/components/authentication/RegistrationForm.jsx)以确保你的解决方案是有效的。
- en: 'Great! Let’s now use the other utils functions in the `axios` helper and the
    `ProtectedRoute` component:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太好了！现在让我们使用`axios`助手和`ProtectedRoute`组件中的其他实用函数：
- en: src/routes/ProtectedRoute.jsx
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: src/routes/ProtectedRoute.jsx
- en: '[PRE131]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Next, let’s do some tweaks in the `axios` helper:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们对`axios`助手做一些调整：
- en: '[PRE132]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: In the preceding code block, we used the `getAccessToken` and `getRefreshToken`
    functions to retrieve the access token and the refresh token from `localStorage`
    for the requests. We just replaced the old logic to retrieve the access and refresh
    tokens.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们使用了`getAccessToken`和`getRefreshToken`函数从`localStorage`中检索请求的访问令牌和刷新令牌。我们只是替换了旧的检索访问和刷新令牌的逻辑。
- en: And we are done. We have a pure React logic for the authentication flow, which
    will help us manage the CRUD operations for the posts and comments in the following
    chapters.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了。我们有了纯React逻辑的认证流程，这将帮助我们管理以下章节中帖子评论的CRUD操作。
- en: Summary
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we dived deeper into more concepts, such as authentication
    in a React application. We implemented a clean logic for requests on the Django
    API with access tokens and also implemented the refresh logic if the access token
    has expired. We also had the chance to use more of the Bootstrap components to
    not only style login and registration forms but also to create login and register
    pages. Finally, we implemented a custom React Hook to handle everything concerning
    authentication on the frontend, with methods for registration and login, and some
    utilities to retrieve tokens from `localStorage` and also set tokens and user
    data in `localStorage`. The creation of the custom Hook helped us make some refactoring
    in the code base according to the DRY principle.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了更多概念，例如在 React 应用程序中的身份验证。我们使用访问令牌在 Django API 上实现了请求的清晰逻辑，并在访问令牌过期时实现了刷新逻辑。我们还有机会使用更多的
    Bootstrap 组件来不仅美化登录和注册表单，还创建登录和注册页面。最后，我们实现了一个自定义的 React Hook 来处理前端的所有身份验证相关事宜，包括注册和登录的方法，以及一些从
    `localStorage` 获取令牌的实用工具，并将令牌和用户数据设置在 `localStorage` 中。自定义 Hook 的创建帮助我们根据 DRY
    原则对代码库进行了一些重构。
- en: In the next chapter, we will allow users to create posts from the React application.
    We will learn how to make requests to the backend using the custom-written `axiosService`,
    display modals, handle more complex React states, and also use the `useContext`
    React Hook to handle pop-up displays.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将允许用户从 React 应用程序中创建帖子。我们将学习如何使用自定义编写的 `axiosService` 向后端发送请求，显示模态框，处理更复杂的
    React 状态，并使用 `useContext` React Hook 来处理弹出显示。
- en: Questions
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is `localStorage`?
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`localStorage` 是什么？'
- en: What is React-Router?
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React-Router 是什么？
- en: How do you configure a protected route in React?
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何在 React 中配置受保护的路由？
- en: What is a React Hook?
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 React Hook？
- en: Give three examples of React Hooks.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请列举三个 React Hooks 的例子。
- en: What are the two rules of React Hooks?
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React Hooks 有哪两条规则？
