- en: Chapter 5. Working with Models
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用模型
- en: The website we just created contains only static data; however, what we want
    to do is store data so as to automate all the tasks. That's why there are models;
    they will put a link between our views and the database.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建的网站只包含静态数据；但是，我们想要存储数据以自动化所有任务。这就是为什么有模型；它们将在我们的视图和数据库之间建立联系。
- en: Django, like many frameworks, proposes database access with an abstraction layer.
    This abstraction layer is called **object-relational mapping** (**ORM**). This
    allows you to use the Python implementation object in order to access the data
    without worrying about using a database. With this ORM, we do not need to use
    the SQL query for simple and slightly complex actions. This ORM belongs to Django,
    but there are others such as **SQLAlchemy**, which is a quality ORM used especially
    in the Python TurboGears framework.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多框架一样，Django提出了使用抽象层进行数据库访问。这个抽象层称为**对象关系映射**（**ORM**）。这允许您使用Python实现对象来访问数据，而不必担心使用数据库。使用这个ORM，我们不需要为简单和稍微复杂的操作使用SQL查询。这个ORM属于Django，但还有其他的，比如**SQLAlchemy**，它是一个质量很高的ORM，特别是在Python
    TurboGears框架中使用。
- en: A model is an object that inherits from the `Model` class. The `Model` class
    is a Django class that is specifically designed for data persistence.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 模型是从`Model`类继承的对象。`Model`类是一个专门设计用于数据持久性的Django类。
- en: We define fields in models. These properties allow us to organize data within
    a model. To make a connection between databases and SQL, we can say that a model
    is represented by a table in the database, and a model property is represented
    by a field in the table.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在模型中定义字段。这些属性允许我们在模型内组织数据。要在数据库和SQL之间建立连接，我们可以说一个模型在数据库中由一个表表示，而模型属性在表中由一个字段表示。
- en: 'In this chapter, we will explain:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将解释：
- en: How to set up access to the database
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置对数据库的访问
- en: How to install South for the database migrations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装South进行数据库迁移
- en: How to create simple models
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建简单的模型
- en: How to create a relationship between models
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在模型之间创建关系
- en: How to extend our models
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何扩展我们的模型
- en: How to use the administration module
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用管理模块
- en: Databases and Django
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库和Django
- en: Django can interface with many databases. However, during the development of
    our application, we use SQLite libraries that are included in Django.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Django可以与许多数据库进行接口。但是，在我们的应用程序开发过程中，我们使用了Django中包含的SQLite库。
- en: 'We will modify `settings.py` to set our connection to the database:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改`settings.py`以设置与数据库的连接：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is the description of the properties mentioned in the preceding
    code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码中提到的属性的描述：
- en: The `ENGINE` property specifies the type of database to be used.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENGINE`属性指定要使用的数据库类型。'
- en: The `NAME` property defines the path and final name of the SQLite database.
    We use a syntax using `os.path.join` to our code, and it is compatible with all
    operating systems. The file's database will be contained in the project directory.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NAME`属性定义了SQLite数据库的路径和最终名称。我们在我们的代码中使用`os.path.join`的语法，并且它与所有操作系统兼容。数据库文件将包含在项目目录中。'
- en: The other properties are useful when we use a database server, but as we will
    use SQLite, we do not need to define them.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他属性在使用数据库服务器时很有用，但由于我们将使用SQLite，因此不需要定义它们。
- en: Migrations with South
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用South进行迁移
- en: '**South** is a very useful extension of Django. It facilitates the migration
    of the database when changing fields. It also keeps a history of the changes in
    the structure of the database.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**South**是Django的一个非常有用的扩展。它在更改字段时简化了数据库的迁移。它还保留了数据库结构更改的历史记录。'
- en: We talk about it now because it must be installed before the creation of the
    database to work correctly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在谈论它是因为必须在创建数据库之前安装它才能正常工作。
- en: Django 1.7 incorporates a migration system. You will not need to use South anymore
    to make the migration of a Django application. You can find more information about
    the migration systems integrated into Django 1.7 at [https://docs.djangoproject.com/en/dev/topics/migrations/](https://docs.djangoproject.com/en/dev/topics/migrations/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Django 1.7集成了迁移系统。您将不再需要使用South来进行Django应用的迁移。您可以在[https://docs.djangoproject.com/en/dev/topics/migrations/](https://docs.djangoproject.com/en/dev/topics/migrations/)找到有关集成到Django
    1.7中的迁移系统的更多信息。
- en: Installing South
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装South
- en: 'To install South, we use the `pip` command. We have already used it to install
    Django. To do this, run the following command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装South，我们使用`pip`命令。我们已经用它来安装Django。要做到这一点，请运行以下命令：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Before actually using South, we must change the `settings.py` file for South
    to be well integrated in Django. To do this, you must go to `INSTALLED_APPS` and
    add the following lines (depending on the version, it is possible that the installation
    of South added the line):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际使用South之前，我们必须更改`settings.py`文件，以便South能够在Django中良好集成。为此，您必须转到`INSTALLED_APPS`并添加以下行（根据版本的不同，安装South可能已经添加了这行）：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using the South extension
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用South扩展
- en: 'Before we make our first migrations and generate our database, we also have
    to create the schema migration. To do this, we must run the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行第一次迁移和生成数据库之前，我们还必须创建模式迁移。为此，我们必须运行以下命令：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, we must perform an initial migration:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须执行初始迁移：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Django asks us to first create an account. This account will be a superuser.
    Remember the login and password that you enter; you will need this information
    later.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Django要求我们首先创建一个帐户。这个帐户将是超级用户。记住您输入的登录名和密码；您以后会需要这些信息。
- en: 'South is now fully operational. Each time we need to modify the models, we
    will make a migration. However, for the migration to be made correctly, you must
    keep the following things in mind:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: South现在已经完全可用。每次我们需要修改模型时，我们都会进行迁移。但是，为了正确进行迁移，您必须牢记以下事项：
- en: Never perform the Django `syncdb` command. After running `syncdb --migrate`
    for the first time, never run it again. Use `migrate` afterwards.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要执行Django的`syncdb`命令。第一次运行`syncdb --migrate`后，永远不要再次运行它。之后使用`migrate`。
- en: Always put a default value in the new fields; otherwise, we will be asked to
    assign a value.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终在新字段中放置默认值；否则，我们将被要求分配一个值。
- en: 'Each time we finish editing our models, we must execute the following two commands
    in the correct order:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次我们完成编辑我们的模型时，我们必须按正确的顺序执行以下两个命令：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating simple models
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建简单模型
- en: To create models, we must have already studied the application in depth. Models
    are the basis of any application because they will store all the data. Therefore,
    we must prepare them carefully.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建模型，我们必须已经深入研究了应用程序。模型是任何应用程序的基础，因为它们将存储所有数据。因此，我们必须仔细准备它们。
- en: 'Concerning our `Tasksmanager` application, we need a user who saves tasks performed
    on a project. We''ll create two models: `User`_`django` and `Project`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们的`Tasksmanager`应用程序，我们需要一个用户来保存在项目上执行的任务。我们将创建两个模型：`User`_`django`和`Project`。
- en: We need to store our models in the `models.py` file. We will edit the `models.py`
    file in the `TasksManager` folder. We do not need to modify the configuration
    file, because when you need the model, we will have to import it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将我们的模型存储在`models.py`文件中。我们将编辑`TasksManager`文件夹中的`models.py`文件。我们不需要修改配置文件，因为当您需要模型时，我们将不得不导入它。
- en: 'The file already exists and has a line. The following line allows you to import
    the base model of Django:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 文件已经存在并且有一行。以下一行允许您导入Django的基本模型：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The UserProfile model
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户资料模型
- en: 'To create the `UserProfile` model, we ask ourselves the question, "*what data
    about the user do we need to keep?*". We will need the following data:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建`UserProfile`模型，我们要问自己一个问题，即“*我们需要保存关于用户的哪些数据？*”。我们需要以下数据：
- en: The user's real name
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户的真实姓名
- en: A nickname that will identify each user
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个将标识每个用户的昵称
- en: A password that will be useful for user authentication
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个对用户身份验证有用的密码
- en: Phone number
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电话号码
- en: Date of birth (this is not essential, but we must study the dates!)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出生日期（这不是必要的，但我们必须研究日期！）
- en: The date and time of the last connection
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户上次连接的日期和时间
- en: E-mail address
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件地址
- en: Age (in years)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 年龄（以年为单位）
- en: The creation date of the user account
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户帐户的创建日期
- en: A specialization, if it is supervisor
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专业化，如果是主管
- en: The type of user
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户类型
- en: A supervisor, if you are a developer
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您是开发人员，那么您就是主管
- en: 'The model that is needed is as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的模型如下：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have not defined the specialization, type of user, and supervisor, because
    these points will be seen in the next part.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有定义专业化、用户类型和主管，因为这些点将在下一部分中看到。
- en: In the preceding code, we can see that `Django_user` inherits from the `Model`
    class. This `Model` class has all the methods that we will need to manipulate
    the models. We can also override these methods to customize the use of models.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们可以看到`Django_user`继承自`Model`类。这个`Model`类有我们需要操作模型的所有方法。我们也可以重写这些方法来定制模型的使用。
- en: 'Within this class, we added our fields by adding an attribute in which we specified
    the values. For example, the first name field is a character string type with
    a maximum length of 50 characters. The `verbose_name` property will be the label
    that defines our field in forms. The following is a list of the commonly used
    field types:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，我们通过添加一个属性来添加我们的字段，并指定值。例如，名字字段是一个字符字符串类型，最大长度为50个字符。`verbose_name`属性将是我们在表单中定义字段的标签。以下是常用的字段类型列表：
- en: '`CharField`: This is a character string with a limited number of characters'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CharField`：这是一个具有有限字符数的字符字符串'
- en: '`TextField`: This is a character string with unlimited characters'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextField`：这是一个具有无限字符的字符字符串'
- en: '`IntegerField`: This is an integer field'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IntegerField`：这是一个整数字段'
- en: '`DateField`: This is a date field'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateField`：这是一个日期字段'
- en: '`DateTimeField`: This field consists of the date as well as the time in hours,
    minutes, and seconds'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTimeField`：这个字段包括日期以及小时、分钟和秒的时间'
- en: '`DecimalField`: This is a decimal number that can be defined precisely'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DecimalField`：这是一个可以精确定义的小数'
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Django automatically saves an `id` field in auto increment. Therefore, we do
    not need to define a primary key.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Django自动保存一个自动递增的`id`字段。因此，我们不需要定义主键。
- en: The Project model
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目模型
- en: 'To save our projects, we will need the following data:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保存我们的项目，我们需要以下数据：
- en: Title
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题
- en: Description
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述
- en: Client name
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户名称
- en: 'These factors allow us to define the following model:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这些因素使我们能够定义以下模型：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To comply with good practices, we would not have had to define a text field
    for the customer, but define a relationship to a client table. To simplify our
    first model, we define a text field for the client name.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了遵守良好的实践，我们本来不需要为客户定义一个文本字段，而是定义一个与客户表的关系。为了简化我们的第一个模型，我们为客户名称定义一个文本字段。
- en: The relationship between the models
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型之间的关系
- en: Relationships are elements that join our models. For example, in the case of
    this application, a task is linked to a project. Indeed, the developer performs
    a task for a particular project unless it is a more general task, but it's out
    of the scope of our project. We define the one-to-many type of relationship in
    order to denote that a task always concerns a single project but a project can
    be connected to many tasks.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 关系是连接我们的模型的元素。例如，在这个应用程序的情况下，一个任务与一个项目相关联。实际上，开发人员为特定项目执行任务，除非它是一个更一般的任务，但这超出了我们项目的范围。我们定义一对多类型的关系，以表示一个任务总是涉及一个单一项目，但一个项目可以与许多任务相关联。
- en: 'There are two other kinds of relationships:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 还有两种其他类型的关系：
- en: The one-to-one relationship sets apart a model in two parts. The resulting database
    will create two tables linked by a relationship. We will see an example in the
    chapter on the authentication module.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一对一关系将模型分为两部分。生成的数据库将创建两个通过关系链接的表。我们将在身份验证模块的章节中看到一个例子。
- en: The many-to-many relationship defines relationships with any model that can
    be connected to several other models of the same type. For example, an author
    can publish several books and a book may have several authors.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多对多关系定义与同一类型的任何模型连接的关系。例如，一个作者可以出版多本书，一本书可能有几个作者。
- en: Creating the task model with relationships
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建具有关系的任务模型
- en: 'For the task model, we need the following elements:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任务模型，我们需要以下元素：
- en: A way to define the task in a few words
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用几个词定义任务的一种方式
- en: A description for more details about the task
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关任务的更多详细描述
- en: A past life
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过去的生活
- en: Its importance
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的重要性
- en: The project to which it is attached
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它所附属的项目
- en: The developer who has created it
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建它的开发人员
- en: 'This allows us to write the following model:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够编写以下模型：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this model, we have defined two foreign key field types: `project` and `app_user`.
    In the database, these fields contain the login details of the record to which
    they are attached in the other table.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模型中，我们定义了两种外键字段类型：`project`和`app_user`。在数据库中，这些字段包含它们所附属的记录的登录详细信息在另一个表中。
- en: 'The `project` field that defines the relationship with the `Project` model
    has two additional attributes:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 定义与`Project`模型的关系的`project`字段有两个额外的属性：
- en: '`Null`: This decides whether the element can be defined as null. The fact that
    this attribute is in the `project` field means that a task is not necessarily
    related to a project.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Null`：这决定了元素是否可以定义为空。`project`字段中存在此属性的事实意味着任务不一定与项目相关联。'
- en: '`Default`: This sets the default value that the field will have. That is, if
    we do not specify the value of the project before saving the model, the task will
    not be connected to a domain.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Default`：这设置字段将具有的默认值。也就是说，如果我们在保存模型之前没有指定项目的值，任务将不会与域相关联。'
- en: Extending models
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展模型
- en: The inheritance model allows the use of common fields for two different models.
    For example, in our `App_user` model, we cannot determine whether a random recording
    will be a developer or supervisor.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 继承模型允许为两个不同的模型使用共同的字段。例如，在我们的`App_user`模型中，我们无法确定随机记录是开发人员还是监督员。
- en: 'One solution would be to create two different models, but we would have to
    duplicate all the common fields such as name, username, and password, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一个解决方案是创建两个不同的模型，但我们将不得不复制所有共同的字段，如名称、用户名和密码，如下所示：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It would be a shame to duplicate the code, but it is the principle that Django
    and DRY have to follow. That is why there is an inheritance model.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 复制代码是一件遗憾的事，但这是Django和DRY必须遵循的原则。这就是为什么有一个继承模型的原因。
- en: Indeed, the legacy model is used to define a master model (or supermodel), which
    contains the common fields to several models. Children models automatically inherit
    the fields of the supermodel.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，遗留模型用于定义一个主模型（或超级模型），其中包含多个模型的共同字段。子模型会自动继承超级模型的字段。
- en: 'Nothing is more explicit than an example; we will modify our classes, `Developer`
    and `Supervisor`, to make them inherit `App_user`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 没有比一个例子更明确的了；我们将修改我们的`Developer`和`Supervisor`类，使它们继承`App_user`：
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The result of the legacy database allows us to create three tables:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留数据库的结果允许我们创建三个表：
- en: A table for the `App_user` model that contains the fields for the properties
    of the model
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App_user`模型的表，包含模型属性的字段'
- en: A table for the `Supervisor` model, with a text field for specialization and
    a field that has a foreign key relationship with the `App_user` table
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Supervisor`模型的表，包含一个专业的文本字段和一个与`App_user`表有外键关系的字段'
- en: 'A `Developer` table with two fields: a field in liaison with the `Supervisor`
    table and a field that links to the `App_user` table'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`Developer`表，有两个字段：一个与`Supervisor`表关联的字段，一个与`App_user`表关联的字段
- en: 'Now that we have separated our two types of users, we will modify the relationship
    with `App_user` because only the developer will record his or her tasks. In the
    `Tasks` model, we have the following line:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经分开了两种类型的用户，我们将修改与`App_user`的关系，因为只有开发人员会记录他们的任务。在`Tasks`模型中，我们有以下行：
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This code is transformed as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码转换如下：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: For the generation of the database order to work, we must put models in the
    correct order. Indeed, if we define a relationship with a model that is not yet
    defined, Python will raise an exception. For the moment, the models will need
    to be defined in the order described. Later, we shall see how to work around this
    limitation.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使数据库命令生成工作，我们必须按正确的顺序放置模型。实际上，如果我们定义与尚未定义的模型的关系，Python将引发异常。目前，模型需要按照描述的顺序定义。稍后，我们将看到如何解决这个限制。
- en: In the next chapter, we will perform queries on the model. This requires the
    database to be synchronized with the models. We must first migrate South before
    starting the next chapter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将对模型执行查询。这需要数据库与模型同步。在开始下一章之前，我们必须先迁移South。
- en: 'To perform the migration, we must use the commands we''ve seen at the beginning
    of the chapter. To simplify the migration, we can also create a batch file in
    the Python folder, where we will put the following lines:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行迁移，我们必须使用本章开头看到的命令。为了简化迁移，我们还可以在Python文件夹中创建一个批处理文件，其中我们将放入以下行：
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is a bash script you can create in the `Work_manager` folder
    that can perform the same thing on Debian Linux:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个bash脚本，您可以在`Work_manager`文件夹中创建，可以在Debian Linux上执行相同的操作：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This way, when you migrate South, it will execute this file. The `pause` command
    allows you to look at the results or errors displayed without closing the window.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，当您迁移South时，它将执行此文件。`pause`命令允许您在不关闭窗口的情况下查看结果或显示的错误。
- en: The admin module
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理员模块
- en: The administration module is very convenient and is included by default with
    Django. It is a module that will maintain the content of the database without
    difficulty. This is not a database manager because it cannot maintain the structure
    of the database.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 管理模块非常方便，并且在Django中默认包含。这是一个可以轻松维护数据库内容的模块。这不是一个数据库管理器，因为它无法维护数据库的结构。
- en: One question that you may ask is, "*what does it have other than a management
    tool database?*". The answer is that the administration module is fully integrated
    with Django and uses these models.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会问的一个问题是，“*除了管理工具数据库之外还有什么？*”答案是管理模块完全集成了Django并使用这些模型。
- en: 'The following are its advantages:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是它的优点：
- en: It manages the relationships between models. This means that if we want to save
    a new developer, the module will propose a list of all the supervisors. In this
    way, it will not create a non-existent relationship.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它管理模型之间的关系。这意味着如果我们想保存一个新的开发人员，该模块将提出所有主管的列表。这样，它就不会创建一个不存在的关系。
- en: It manages Django permissions. You can set permissions for users according to
    models and CRUD operations.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它管理Django权限。您可以根据模型和CRUD操作为用户设置权限。
- en: It is quickly established.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它很快就建立起来了。
- en: Being based on Django models and not on the database, this module allows the
    user to edit the recorded data.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Django模型而不是数据库，这个模块允许用户编辑记录的数据。
- en: Installing the module
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装模块
- en: 'To implement the administration module, edit the `settings.py` file. In the
    `INSTALLED_APPS` setting, you need to add or uncomment the following line:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现管理模块，请编辑`settings.py`文件。在`INSTALLED_APPS`设置中，您需要添加或取消注释以下行：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You also have to edit the `urls.py` file by adding or uncommenting the following
    lines:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您还必须通过添加或取消注释以下行来编辑`urls.py`文件：
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The line that imports the administration module has to be at the beginning of
    the file with other imports. The line that runs the `autodiscover()` method must
    be found after the imports and before the `urlpatterns` definition. Finally, the
    last line is a URL that should be in `urlpatterns`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 导入管理模块的行必须在文件的开头与其他导入一起。运行`autodiscover()`方法的行必须在导入之后并在`urlpatterns`定义之前找到。最后，最后一行是一个应该在`urlpatterns`中的URL。
- en: 'We also have to create an `admin.py` file in the `TasksManager` folder in which
    we will define the styles we want to integrate into the management module:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须在`TasksManager`文件夹中创建一个`admin.py`文件，在其中我们将定义要集成到管理模块中的样式：
- en: '[PRE18]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that we have configured the administration module, we can easily manage
    our data.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了管理模块，我们可以轻松地管理我们的数据。
- en: Using the module
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模块
- en: 'To use the administration module, we must connect to the URL that we have just
    defined: `http://localhost:8000/admin/`.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用管理模块，我们必须连接到刚刚定义的URL：`http://localhost:8000/admin/`。
- en: 'We must connect with the logins defined when creating the database:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须在创建数据库时连接定义的登录：
- en: Once we are connected, the model list appears.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们连接，模型列表就会出现。
- en: If we click on the **Supervisor** model link, we arrive at a page where we can
    add a supervisor by using the button at the top-right corner of the window:![Using
    the module](img/00017.jpeg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们点击**Supervisor**模型链接，我们会到达一个页面，我们可以通过窗口右上角的按钮添加一个主管：![使用模块](img/00017.jpeg)
- en: By clicking on this button, we load a page consisting of a form. This form automatically
    provides practical tools to manage dates and times:![Using the module](img/00018.jpeg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击这个按钮，我们加载一个由表单组成的页面。这个表单自动提供了管理日期和时间的实用工具：![使用模块](img/00018.jpeg)
- en: Let's add a new supervisor and then add a developer. When you want to choose
    the supervisor, you can see the one we have just created in a combobox. The green
    cross on the right-hand side allows you to quickly create a supervisor.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个新的主管，然后添加一个开发人员。当您想选择主管时，您可以在下拉框中看到我们刚刚创建的主管。右侧的绿色十字架允许您快速创建一个主管。
- en: In the following chapter, we will define the `str` method for our models. This
    will improve the display lists of objects in this management module.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将为我们的模型定义`str`方法。这将改进管理模块中对象的显示列表。
- en: Advanced usage of models
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型的高级用法
- en: We studied the basics of the models that allow us to create simple applications.
    Sometimes, it is necessary to define more complex structures.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了允许我们创建简单应用程序的模型的基础知识。有时，需要定义更复杂的结构。
- en: Using two relationships for the same model
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为同一模型使用两个关系
- en: 'Sometimes, it is useful to store two foreign keys (or more) in a single model.
    For example, if we want two developers to work in parallel on the same task, we
    must use the `related_name` property in our models. For example, our `Task` model
    contains two relationships with the following lines:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，将两个（或更多）外键存储在单个模型中是有用的。例如，如果我们希望两个开发人员并行工作在同一任务上，我们必须在我们的模型中使用`related_name`属性。例如，我们的`Task`模型包含以下行的两个关系：
- en: '[PRE19]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Further in this book, we will not use these two relationships. To effectively
    follow this book, we must return to our previously defined `Task` model.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后续部分，我们将不使用这两个关系。为了有效地遵循本书，我们必须返回到我们之前定义的`Task`模型。
- en: Note
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Here, we define two developers on the same task. Best practices advise us to
    create a many-to-many relationship in the `Task` model. The thorough argument
    allows you to specify an intermediate table to store additional data. This is
    an optional step. An example of this type of relationship is as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了同一任务上的两个开发人员。最佳实践建议我们在`Task`模型中创建一个多对多的关系。详细参数允许您指定一个中间表来存储附加数据。这是一个可选步骤。这种关系的示例如下：
- en: '[PRE20]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Defining the str method
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义str方法
- en: As already mentioned in the section on the use of the admin module, the `__str__()`
    method will allow a better view of our models. This method will set the string
    that will be used to display our model instance. When Django was not compatible
    with Python 3, this method was replaced by the `__unicode__()` method.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如在管理模块使用部分中已经提到的，`__str__()`方法将允许更好地查看我们的模型。这个方法将设置用于显示我们的模型实例的字符串。当Django与Python
    3不兼容时，这个方法被`__unicode__()`方法替换。
- en: 'For example, when we added a developer, the drop-down list that defines a supervisor
    showed us the "Supervisor object" lines. It would be more helpful to display the
    name of the supervisor. In order to do this, change our `App_user` class and add
    the `str()` method:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当我们添加了一个开发者时，定义主管的下拉列表显示了“主管对象”行。显示主管的姓名会更有帮助。为了做到这一点，改变我们的`App_user`类并添加`str()`方法：
- en: '[PRE21]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This method will return the name of the supervisor for the display and allows
    you to manage the administration easily:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法将返回主管的姓名以便显示，并允许您轻松管理管理：
- en: '![Defining the str method](img/00019.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![定义str方法](img/00019.jpeg)'
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we learned migration with South. We also learned how to create
    simple models and relationships between the models. Furthermore, we learned how
    to install and use the admin module. In the next chapter, we will learn how to
    manipulate our data. We will learn how to use four main operations on the data:
    adding, reading (and research), modification, and deletion.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了使用South进行迁移。我们还学习了如何创建简单的模型和模型之间的关系。此外，我们还学习了如何安装和使用管理模块。在下一章中，我们将学习如何操作我们的数据。我们将学习如何对数据进行四种主要操作：添加、读取（和研究）、修改和删除。
