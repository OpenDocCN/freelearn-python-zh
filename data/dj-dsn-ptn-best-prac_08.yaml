- en: Chapter 8. Dealing with Legacy Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。处理遗留代码
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Reading a Django code base
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读Django代码库
- en: Discovering relevant documentation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现相关文档
- en: Incremental changes versus full rewrites
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增量更改与完全重写
- en: Writing tests before changing code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在更改代码之前编写测试
- en: Legacy database integration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遗留数据库集成
- en: It sounds exciting when you are asked to join a project. Powerful new tools
    and cutting-edge technologies might await you. However, quite often, you are asked
    to work with an existing, possibly ancient, codebase.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当你被要求加入一个项目时，听起来很令人兴奋。可能会有强大的新工具和尖端技术等着你。然而，很多时候，你被要求与现有的、可能是古老的代码库一起工作。
- en: To be fair, Django has not been around for that long. However, projects written
    for older versions of Django are sufficiently different to cause concern. Sometimes,
    having the entire source code and documentation might not be enough.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 公平地说，Django并没有存在那么长时间。然而，为旧版本的Django编写的项目有足够的不同之处，引起了担忧。有时，仅有整个源代码和文档可能是不够的。
- en: If you are asked to recreate the environment, then you might need to fumble
    with the OS configuration, database settings, and running services locally or
    on the network. There are so many pieces to this puzzle that you might wonder
    how and where to start.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要求重新创建环境，那么您可能需要在本地或网络上处理操作系统配置、数据库设置和运行服务。这个谜团有太多的部分，让你想知道如何开始和从哪里开始。
- en: Understanding the Django version used in the code is a key piece of information.
    As Django evolved, everything from the default project structure to the recommended
    best practices have changed. Therefore, identifying which version of Django was
    used is a vital piece in understanding it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 了解代码中使用的Django版本是关键信息。随着Django的发展，从默认项目结构到推荐的最佳实践，一切都发生了变化。因此，确定使用的Django版本是理解它的重要部分。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Change of Guards**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**交接**'
- en: Sitting patiently on the ridiculously short beanbags in the training room, the
    SuperBook team waited for Hart. He had convened an emergency go-live meeting.
    Nobody understood the "emergency" part since go live was at least 3 months away.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 坐在培训室里那些极短的豆袋上，SuperBook团队耐心等待着哈特。他召集了一个紧急的上线会议。没有人理解“紧急”的部分，因为上线至少还有3个月的时间。
- en: Madam O rushed in holding a large designer coffee mug in one hand and a bunch
    of printouts of what looked like project timelines in the other. Without looking
    up she said, "We are late so I will get straight to the point. In the light of
    last week's attacks, the board has decided to summarily expedite the SuperBook
    project and has set the deadline to end of next month. Any questions?"
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 欧康夫人匆匆忙忙地拿着一个大设计师咖啡杯，一手拿着一堆看起来像项目时间表的印刷品。她不抬头地说：“我们迟到了，所以我会直奔主题。鉴于上周的袭击，董事会决定立即加快SuperBook项目，并将截止日期定为下个月底。有问题吗？”
- en: '"Yeah," said Brad, "Where is Hart?" Madam O hesitated and replied, "Well, he
    resigned. Being the head of IT security, he took moral responsibility of the perimeter
    breach." Steve, evidently shocked, was shaking his head. "I am sorry," she continued,
    "But I have been assigned to head SuperBook and ensure that we have no roadblocks
    to meet the new deadline."'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “是的，”布拉德说，“哈特在哪里？”欧康夫人犹豫了一下，回答说：“嗯，他辞职了。作为IT安全主管，他对周界被突破负有道德责任。”显然受到震惊的史蒂夫摇了摇头。“对不起，”她继续说道，“但我被指派负责SuperBook，并确保我们没有障碍来满足新的截止日期。”
- en: There was a collective groan. Undeterred, Madam O took one of the sheets and
    began, "It says here that the Remote Archive module is the most high-priority
    item in the incomplete status. I believe Evan is working on this."
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有一阵集体的抱怨声。欧康夫人毫不畏惧，拿起其中一张纸开始说：“这里写着，远程存档模块是未完成状态中最重要的项目。我相信伊万正在处理这个。”
- en: '"That''s correct," said Evan from the far end of the room. "Nearly there,"
    he smiled at others, as they shifted focus to him. Madam O peered above the rim
    of her glasses and smiled almost too politely. "Considering that we already have
    an extremely well-tested and working Archiver in our Sentinel code base, I would
    recommend that you leverage that instead of creating another redundant system."'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “没错，”远处的伊万说。“快了，”他对其他人微笑着，他们的注意力转向了他。欧康夫人从眼镜的边缘上方凝视着，微笑得几乎太客气了。“考虑到我们在Sentinel代码库中已经有一个经过充分测试和运行良好的Archiver，我建议你利用它，而不是创建另一个多余的系统。”
- en: '"But," Steve interrupted, "it is hardly redundant. We can improve over a legacy
    archiver, can''t we?" "If it isn''t broken, then don''t fix it", replied Madam
    O tersely. He said, "He is working on it," said Brad almost shouting, "What about
    all that work he has already finished?"'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “但是，”史蒂夫打断道，“这几乎不是多余的。我们可以改进传统的存档程序，不是吗？”“如果没有坏，就不要修理”，欧康夫人简洁地回答道。他说：“他正在努力，”布拉德几乎大声喊道，“他已经完成了所有的工作，那怎么办？”
- en: '"Evan, how much of the work have you completed so far?" asked O, rather impatiently.
    "About 12 percent," he replied looking defensive. Everyone looked at him incredulously.
    "What? That was the hardest 12 percent" he added.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: “伊万，你到目前为止完成了多少工作？”欧康夫人有点不耐烦地问道。“大约12%”，他辩解地回答道。每个人都不可思议地看着他。“什么？那是最难的12%”，他补充道。
- en: O continued the rest of the meeting in the same pattern. Everybody's work was
    reprioritized and shoe-horned to fit the new deadline. As she picked up her papers,
    readying to leave she paused and removed her glasses.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 欧康夫人以同样的模式继续了会议的其余部分。每个人的工作都被重新排列，以适应新的截止日期。当她拿起她的文件准备离开时，她停顿了一下，摘下了眼镜。
- en: '"I know what all of you are thinking... literally. But you need to know that
    we had no choice about the deadline. All I can tell you now is that the world
    is counting on you to meet that date, somehow or other." Putting her glasses back
    on, she left the room.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “我知道你们都在想什么...真的。但你们需要知道，我们对截止日期别无选择。我现在能告诉你们的就是，全世界都指望着你们在那个日期之前完成，无论如何。”她戴上眼镜，离开了房间。
- en: '"I am definitely going to bring my tinfoil hat," said Evan loudly to himself.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “我肯定会带上我的锡纸帽，”伊万大声对自己说。
- en: Finding the Django version
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找Django版本
- en: 'Ideally, every project will have a `requirements.txt` or `setup.py` file at
    the root directory, and it will have the exact version of Django used for that
    project. Let''s look for a line similar to this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，每个项目都会在根目录下有一个`requirements.txt`或`setup.py`文件，并且它将包含用于该项目的Django的确切版本。让我们寻找类似于这样的一行：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that the version number is exactly mentioned (rather than `Django>=1.5.9`),
    which is called **pinning**. Pinning every package is considered a good practice
    since it reduces surprises and makes your build more deterministic.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，版本号是精确指定的（而不是`Django>=1.5.9`），这被称为**固定**。固定每个软件包被认为是一个很好的做法，因为它减少了意外，并使您的构建更加确定。
- en: Unfortunately, there are real-world codebases where the `requirements.txt` file
    was not updated or even completely missing. In such cases, you will need to probe
    for various tell-tale signs to find out the exact version.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，有些真实世界的代码库中`requirements.txt`文件没有被更新，甚至完全丢失。在这种情况下，您需要探测各种迹象来找出确切的版本。
- en: Activating the virtual environment
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激活虚拟环境
- en: 'In most cases, a Django project would be deployed within a virtual environment.
    Once you locate the virtual environment for the project, you can activate it by
    jumping to that directory and running the activated script for your OS. For Linux,
    the command is as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，Django项目将部署在虚拟环境中。一旦找到项目的虚拟环境，您可以通过跳转到该目录并运行操作系统的激活脚本来激活它。对于Linux，命令如下：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the virtual environment is active, start a Python shell and query the
    Django version as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦虚拟环境激活，启动Python shell并查询Django版本如下：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Django version used in this case is Version 1.5.9.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下使用的Django版本是1.5.9版本。
- en: 'Alternatively, you can run the `manage.py` script in the project to get a similar
    output:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以在项目中运行`manage.py`脚本以获得类似的输出：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, this option would not be available if the legacy project source snapshot
    was sent to you in an undeployed form. If the virtual environment (and packages)
    was also included, then you can easily locate the version number (in the form
    of a tuple) in the `__init__.py` file of the Django directory. For example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果传统项目源快照以未部署的形式发送给您，则此选项将不可用。如果虚拟环境（和包）也包括在内，那么您可以轻松地在Django目录的`__init__.py`文件中找到版本号（以元组形式）。例如：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If all these methods fail, then you will need to go through the release notes
    of the past Django versions to determine the identifiable changes (for example,
    the `AUTH_PROFILE_MODULE` setting was deprecated since Version 1.5) and match
    them to your legacy code. Once you pinpoint the correct Django version, then you
    can move on to analyzing the code.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有这些方法都失败了，那么您将需要查看过去Django版本的发布说明，以确定可识别的更改（例如，`AUTH_PROFILE_MODULE`设置自1.5版本以来已被弃用），并将其与您的传统代码进行匹配。一旦确定了正确的Django版本，那么您就可以继续分析代码。
- en: Where are the files? This is not PHP
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件在哪里？这不是PHP
- en: One of the most difficult ideas to get used to, especially if you are from the
    PHP or ASP.NET world, is that the source files are not located in your web server's
    document root directory, which is usually named `wwwroot` or `public_html`. Additionally,
    there is no direct relationship between the code's directory structure and the
    website's URL structure.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 其中最难适应的一个想法，特别是如果您来自PHP或ASP.NET世界，那就是源文件不位于您的Web服务器的文档根目录中，通常命名为`wwwroot`或`public_html`。此外，代码的目录结构与网站的URL结构之间没有直接关系。
- en: In fact, you will find that your Django website's source code is stored in an
    obscure path such as `/opt/webapps/my-django-app`. Why is this? Among many good
    reasons, it is often more secure to move your confidential data outside your public
    webroot. This way, a web crawler would not be able to accidentally stumble into
    your source code directory.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您会发现您的Django网站的源代码存储在一个隐蔽的路径中，比如`/opt/webapps/my-django-app`。为什么会这样呢？在许多很好的理由中，将机密数据移出公共webroot通常更安全。这样，网络爬虫就不会意外地进入您的源代码目录。
- en: As you would read in the [Chapter 11](ch11.html "Chapter 11. Production-ready"),
    *Production-ready* the location of the source code can be found by examining your
    web server's configuration file. Here, you will find either the environment variable
    `DJANGO_SETTINGS_MODULE` being set to the module's path, or it will pass on the
    request to a WSGI server that will be configured to point to your `project.wsgi`
    file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在[第11章](ch11.html "第11章。生产就绪")中所读到的，*生产就绪*，源代码的位置可以通过检查您的Web服务器的配置文件来找到。在这里，您将找到环境变量`DJANGO_SETTINGS_MODULE`设置为模块路径，或者它将将请求传递给配置为指向您的`project.wsgi`文件的WSGI服务器。
- en: Starting with urls.py
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从urls.py开始
- en: Even if you have access to the entire source code of a Django site, figuring
    out how it works across various apps can be daunting. It is often best to start
    from the root `urls.py` `URLconf` file since it is literally a map that ties every
    request to the respective views.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您可以访问Django网站的整个源代码，弄清楚它在各种应用程序中的工作方式可能令人望而生畏。通常最好从根`urls.py` `URLconf`文件开始，因为它实际上是将每个请求与相应视图联系起来的地图。
- en: With normal Python programs, I often start reading from the start of its execution—say,
    from the top-level main module or wherever the `__main__` check idiom starts.
    In the case of Django applications, I usually start with `urls.py` since it is
    easier to follow the flow of execution based on various URL patterns a site has.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于普通的Python程序，我经常从执行的开始开始阅读，比如从顶级主模块或`__main__`检查成语开始的地方。在Django应用程序的情况下，我通常从`urls.py`开始，因为根据站点具有的各种URL模式来跟踪执行流程更容易。
- en: 'In Linux, you can use the following `find` command to locate the `settings.py`
    file and the corresponding line specifying the root `urls.py`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，您可以使用以下`find`命令来定位`settings.py`文件和指定根`urls.py`的相应行：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Jumping around the code
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在代码中跳转
- en: Reading code sometimes feels like browsing the web without the hyperlinks. When
    you encounter a function or variable defined elsewhere, then you will need to
    jump to the file that contains that definition. Some IDEs can do this automatically
    for you as long as you tell it which files to track as part of the project.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有时阅读代码感觉像在浏览没有超链接的网页。当您遇到在其他地方定义的函数或变量时，您将需要跳转到包含该定义的文件。只要告诉IDE要跟踪项目的哪些文件，一些IDE就可以自动为您执行此操作。
- en: 'If you use Emacs or Vim instead, then you can create a TAGS file to quickly
    navigate between files. Go to the project root and run a tool called **Exuberant
    Ctags** as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Emacs或Vim，那么您可以创建一个TAGS文件以快速在文件之间导航。转到项目根目录并运行一个名为**Exuberant Ctags**的工具，如下所示：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This creates a file called TAGS that contains the location information, where
    every syntactic unit such as classes and functions are defined. In Emacs, you
    can find the definition of the tag, where your cursor (or point as it called in
    Emacs) is at using the `M-.` command.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为TAGS的文件，其中包含位置信息，其中定义了诸如类和函数之类的每个句法单元。在Emacs中，您可以使用`M-.`命令找到标签的定义，其中您的光标（或在Emacs中称为点）所在的位置。
- en: While using a tag file is extremely fast for large code bases, it is quite basic
    and is not aware of a virtual environment (where most definitions might be located).
    An excellent alternative is to use the `elpy` package in Emacs. It can be configured
    to detect a virtual environment. Jumping to a definition of a syntactic element
    is using the same `M-.` command. However, the search is not restricted to the
    tag file. So, you can even jump to a class definition within the Django source
    code seamlessly.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然对于大型代码库来说，使用标签文件非常快速，但它相当基本，并不知道虚拟环境（大多数定义可能位于其中）。一个很好的替代方案是在Emacs中使用`elpy`包。它可以配置为检测虚拟环境。使用相同的`M-.`命令跳转到句法元素的定义。但是，搜索不限于标签文件。因此，您甚至可以无缝地跳转到Django源代码中的类定义。
- en: Understanding the code base
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解代码库
- en: It is quite rare to find legacy code with good documentation. Even if you do,
    the documentation might be out of sync with the code in subtle ways that can lead
    to further issues. Often, the best guide to understand the application's functionality
    is the executable test cases and the code itself.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 很少能找到具有良好文档的遗留代码。即使您有文档，文档可能与代码不同步，这可能会导致进一步的问题。通常，理解应用程序功能的最佳指南是可执行的测试用例和代码本身。
- en: 'The official Django documentation has been organized by versions at [https://docs.djangoproject.com](https://docs.djangoproject.com).
    On any page, you can quickly switch to the corresponding page in the previous
    versions of Django with a selector on the bottom right-hand section of the page:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的Django文档已经按版本在[https://docs.djangoproject.com](https://docs.djangoproject.com)上组织。在任何页面上，您都可以使用页面底部右侧的选择器快速切换到Django先前版本的相应页面：
- en: '![Understanding the code base](img/6644_08_01.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![理解代码库](img/6644_08_01.jpg)'
- en: 'In the same way, documentation for any Django package hosted on [readthedocs.org](http://readthedocs.org)
    can also be traced back to its previous versions. For example, you can select
    the documentation of `django-braces` all the way back to v1.0.0 by clicking on
    the selector on the bottom left-hand section of the page:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，托管在[readthedocs.org](http://readthedocs.org)上的任何Django包的文档也可以追溯到其先前的版本。例如，您可以通过单击页面左下角的选择器选择`django-braces`的文档，一直回到v1.0.0：
- en: '![Understanding the code base](img/6644_08_02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![理解代码库](img/6644_08_02.jpg)'
- en: Creating the big picture
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建大图
- en: Most people find it easier to understand an application if you show them a high-level
    diagram. While this is ideally created by someone who understands the workings
    of the application, there are tools that can create very helpful high-level depiction
    of a Django application.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人发现，如果向他们展示一个高层次的图表，他们更容易理解一个应用程序。虽然理想情况下，这是由了解应用程序工作原理的人创建的，但也有工具可以创建非常有帮助的Django应用程序的高层次描述。
- en: 'A graphical overview of all models in your apps can be generated by the `graph_models`
    management command, which is provided by the `django-command-extensions` package.
    As shown in the following diagram, the model classes and their relationships can
    be understood at a glance:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`graph_models`管理命令可以生成应用程序中所有模型的图形概述，该命令由`django-command-extensions`包提供。如下图所示，可以一目了然地理解模型类及其关系：'
- en: '![Creating the big picture](img/6644_08_03.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![创建大图](img/6644_08_03.jpg)'
- en: Model classes used in the SuperBook project connected by arrows indicating their
    relationships
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: SuperBook项目中使用的模型类通过箭头连接，指示它们的关系
- en: This visualization is actually created using PyGraphviz. This can get really
    large for projects of even medium complexity. Hence, it might be easier if the
    applications are logically grouped and visualized separately.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个可视化是使用PyGraphviz创建的。对于甚至中等复杂的项目，这可能会变得非常庞大。因此，如果应用程序被逻辑分组并分别可视化，可能会更容易。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**PyGraphviz Installation and Usage**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyGraphviz安装和使用**'
- en: If you find the installation of PyGraphviz challenging, then don't worry, you
    are not alone. Recently, I faced numerous issues while installing on Ubuntu, starting
    from Python 3 incompatibility to incomplete documentation. To save your time,
    I have listed the steps that worked for me to reach a working setup.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现安装PyGraphviz具有挑战性，那么不用担心，您并不孤单。最近，我在Ubuntu上安装时遇到了许多问题，从Python 3不兼容到文档不完整。为了节省您的时间，我列出了对我有效的步骤来达到一个可用的设置。
- en: 'On Ubuntu, you will need the following packages installed to install PyGraphviz:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu上，您需要安装以下软件包才能安装PyGraphviz：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now activate your virtual environment and run pip to install the development
    version of PyGraphviz directly from GitHub, which supports Python 3:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在激活您的虚拟环境并运行pip从GitHub直接安装PyGraphviz的开发版本，该版本支持Python 3：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Next, install `django-extensions` and add it to your `INSTALLED_APPS`. Now,
    you are all set.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，安装`django-extensions`并将其添加到您的`INSTALLED_APPS`中。现在，您已经准备好了。
- en: 'Here is a sample usage to create a GraphViz dot file for just two apps and
    to convert it to a PNG image for viewing:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例用法，用于创建仅包含两个应用程序的GraphViz dot文件，并将其转换为PNG图像以进行查看：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Incremental change or a full rewrite?
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渐进式更改还是完全重写？
- en: Often, you would be handed over legacy code by the application owners in the
    earnest hope that most of it can be used right away or after a couple of minor
    tweaks. However, reading and understanding a huge and often outdated code base
    is not an easy job. Unsurprisingly, most programmers prefer to work on greenfield
    development.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，你会被应用所有者交付遗留代码，并怀着真诚的希望，希望大部分代码可以立即或经过一些小的调整后就可以使用。然而，阅读和理解庞大而经常过时的代码库并不是一件容易的工作。毫不奇怪，大多数程序员更愿意从事全新的开发工作。
- en: In the best case, the legacy code ought to be easily testable, well documented,
    and flexible to work in modern environments so that you can start making incremental
    changes in no time. In the worst case, you might recommend discarding the existing
    code and go for a full rewrite. Or, as it is commonly decided, the short-term
    approach would be to keep making incremental changes, and a parallel long-term
    effort might be underway for a complete reimplementation.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在最好的情况下，遗留代码应该易于测试，有良好的文档记录，并且灵活适应现代环境，以便您可以立即开始进行渐进式更改。在最坏的情况下，您可能会建议放弃现有代码，进行完全重写。或者，通常决定采取的是短期方法，即继续进行渐进式更改，并且可能正在进行完全重新实现的长期并行努力。
- en: A general rule of thumb to follow while taking such decisions is—if the cost
    of rewriting the application and maintaining the application is lower than the
    cost of maintaining the old application over time, then it is recommended to go
    for a rewrite. Care must be taken to account for all the factors, such as time
    taken to get new programmers up to speed, the cost of maintaining outdated hardware,
    and so on.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在做出此类决定时，一个通用的经验法则是——如果重写应用程序和维护应用程序的成本低于随时间维护旧应用程序的成本，那么建议进行重写。必须考虑所有因素，例如让新程序员熟悉所需时间、维护过时硬件的成本等。
- en: Sometimes, the complexity of the application domain becomes a huge barrier against
    a rewrite, since a lot of knowledge learnt in the process of building the older
    code gets lost. Often, this dependency on the legacy code is a sign of poor design
    in the application like failing to externalize the business rules from the application
    logic.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，应用领域的复杂性成为重写的巨大障碍，因为在构建旧代码过程中学到的许多知识都会丢失。通常，对遗留代码的依赖表明应用设计不佳，例如未能将业务规则从应用逻辑中外部化。
- en: The worst form of a rewrite you can probably undertake is a conversion, or a
    mechanical translation from one language to another without taking any advantage
    of the existing best practices. In other words, you lost the opportunity to modernize
    the code base by removing years of cruft.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能进行的最糟糕的重写形式可能是转换，或者是机械地将一种语言转换为另一种语言，而不利用现有的最佳实践。换句话说，您失去了通过消除多年的混乱来现代化代码库的机会。
- en: Code should be seen as a liability not an asset. As counter-intuitive as it
    might sound, if you can achieve your business goals with a lesser amount of code,
    you have dramatically increased your productivity. Having less code to test, debug,
    and maintain can not only reduce ongoing costs but also make your organization
    more agile and flexible to change.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 代码应被视为一种负债而不是一种资产。尽管这听起来可能有些违反直觉，但如果您可以用更少的代码实现业务目标，您的生产力将大大提高。拥有更少的代码需要测试、调试和维护，不仅可以减少持续成本，还可以使您的组织更具敏捷性和灵活性以应对变化。
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Code is a liability not an asset. Less code is more maintainable.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 代码是一种负债而不是一种资产。更少的代码更易维护。
- en: Irrespective of whether you are adding features or trimming your code, you must
    not touch your working legacy code without tests in place.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是在添加功能还是精简代码，都不应在没有测试的情况下触碰工作中的遗留代码。
- en: Write tests before making any changes
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在进行任何更改之前编写测试
- en: In the book *Working Effectively with Legacy Code*, Michael Feathers defines
    legacy code as, simply, code without tests. He elaborates that with tests one
    can easily modify the behavior of the code quickly and verifiably. In the absence
    of tests, it is impossible to gauge if the change made the code better or worse.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在《与遗留代码有效工作》一书中，迈克尔·费瑟斯将遗留代码定义为简单的没有测试的代码。他解释说，有了测试，可以轻松快速地修改代码的行为并进行验证。在没有测试的情况下，无法判断更改是否使代码变得更好还是更糟。
- en: Often, we do not know enough about legacy code to confidently write a test.
    Michael recommends writing tests that preserve and document the existing behavior,
    which are called characterization tests.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我们对遗留代码了解不足，无法自信地编写测试。迈克尔建议编写保留和记录现有行为的测试，这些测试称为表征测试。
- en: Unlike the usual approach of writing tests, while writing a characterization
    test, you will first write a failing test with a dummy output, say *X*, because
    you don't know what to expect. When the test harness fails with an error, such
    as "**Expected output X but got Y**", then you will change your test to expect
    *Y*. So, now the test will pass, and it becomes a record of the code's existing
    behavior.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 与通常的编写测试的方法不同，在编写表征测试时，您将首先编写一个带有虚拟输出（例如*X*）的失败测试，因为您不知道预期结果。当测试工具出现错误时，例如“**预期输出为X，但得到了Y**”，然后您将更改测试以期望*Y*。现在测试将通过，并且它成为了代码现有行为的记录。
- en: Note that we might record buggy behavior as well. After all, this is unfamiliar
    code. Nevertheless, writing such tests are necessary before we start changing
    the code. Later, when we know the specifications and code better, we can fix these
    bugs and update our tests (not necessarily in that order).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可能记录有错误的行为。毕竟，这是陌生的代码。然而，在开始更改代码之前，编写这些测试是必要的。稍后，当我们更了解规格和代码时，我们可以修复这些错误并更新我们的测试（不一定按照这个顺序）。
- en: Step-by-step process to writing tests
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写测试的逐步过程
- en: Writing tests before changing the code is similar to erecting scaffoldings before
    the restoration of an old building. It provides a structural framework that helps
    you confidently undertake repairs.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改代码之前编写测试类似于在修复旧建筑之前搭建脚手架。它提供了一个结构框架，帮助您自信地进行修复。
- en: 'You might want to approach this process in a stepwise manner as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望以以下步骤逐步进行这个过程：
- en: Identify the area you need to make changes to. Write characterization tests
    focusing on this area until you have satisfactorily captured its behavior.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定您需要进行更改的区域。编写着重于这个区域的表征测试，直到您满意地捕捉到它的行为。
- en: Look at the changes you need to make and write specific test cases for those.
    Prefer smaller unit tests to larger and slower integration tests.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看看你需要做出的改变，并为这些改变编写具体的测试用例。更喜欢较小的单元测试而不是较大和较慢的集成测试。
- en: Introduce incremental changes and test in lockstep. If tests break, then try
    to analyze whether it was expected. Don't be afraid to break even the characterization
    tests if that behavior is something that was intended to change.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引入增量更改并进行锁步测试。如果测试失败，那么尝试分析是否是预期的。不要害怕甚至打破表征测试，如果该行为是打算更改的。
- en: If you have a good set of tests around your code, then you can quickly find
    the effect of changing your code.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代码周围有一套良好的测试，那么您可以快速找到更改代码的影响。
- en: On the other hand, if you decide to rewrite by discarding your code but not
    your data, then Django can help you considerably.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你决定通过放弃代码而不是数据来重写，那么Django可以帮助你很多。
- en: Legacy databases
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遗留数据库
- en: There is an entire section on legacy databases in Django documentation and rightly
    so, as you will run into them many times. Data is more important than code, and
    databases are the repositories of data in most enterprises.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Django文档中有一个完整的遗留数据库部分，这是正确的，因为你会经常遇到它们。数据比代码更重要，而数据库是大多数企业数据的存储库。
- en: You can modernize a legacy application written in other languages or frameworks
    by importing their database structure into Django. As an immediate advantage,
    you can use the Django admin interface to view and change your legacy data.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将其数据库结构导入Django来现代化使用其他语言或框架编写的遗留应用程序。作为一个直接的优势，您可以使用Django管理界面来查看和更改您的遗留数据。
- en: 'Django makes this easy with the `inspectdb` management command, which looks
    as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Django通过`inspectdb`管理命令使这变得容易，如下所示：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This command, if run while your settings are configured to use the legacy database,
    can automatically generate the Python code that would go into your models file.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在设置配置为使用遗留数据库的情况下运行此命令，它可以自动生成Python代码，该代码将放入您的模型文件中。
- en: 'Here are some best practices if you are using this approach to integrate to
    a legacy database:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用这种方法来集成到遗留数据库中，以下是一些最佳实践：
- en: Know the limitations of Django ORM beforehand. Currently, multicolumn (composite)
    primary keys and NoSQL databases are not supported.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事先了解Django ORM的限制。目前，不支持多列（复合）主键和NoSQL数据库。
- en: Don't forget to manually clean up the generated models, for example, remove
    the redundant '`ID`' fields since Django creates them automatically.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要忘记手动清理生成的模型，例如删除冗余的`ID`字段，因为Django会自动创建它们。
- en: Foreign Key relationships may have to be manually defined. In some databases,
    the auto-generated models will have them as integer fields (suffixed with `_id`).
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外键关系可能需要手动定义。在一些数据库中，自动生成的模型将它们作为整数字段（后缀为`_id`）。
- en: Organize your models into separate apps. Later, it will be easier to add the
    views, forms, and tests in the appropriate folders.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模型组织到单独的应用程序中。稍后，将更容易在适当的文件夹中添加视图、表单和测试。
- en: Remember that running the migrations will create Django's administrative tables
    (`django_*` and `auth_*`) in the legacy database.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请记住，运行迁移将在遗留数据库中创建Django的管理表（`django_*`和`auth_*`）。
- en: In an ideal world, your auto-generated models would immediately start working,
    but in practice, it takes a lot of trial and error. Sometimes, the data type that
    Django inferred might not match your expectations. In other cases, you might want
    to add additional meta information such as `unique_together` to your model.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想的世界中，您的自动生成的模型将立即开始工作，但在实践中，这需要大量的试验和错误。有时，Django推断的数据类型可能与您的期望不符。在其他情况下，您可能希望向模型添加额外的元信息，如`unique_together`。
- en: Eventually, you should be able to see all the data that was locked inside that
    aging PHP application in your familiar Django admin interface. I am sure this
    will bring a smile to your face.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你应该能够在熟悉的Django管理界面中看到那个老化的PHP应用程序中锁定的所有数据。我相信这会让你微笑。
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at various techniques to understand legacy code.
    Reading code is often an underrated skill. But rather than reinventing the wheel,
    we need to judiciously reuse good working code whenever possible. In this chapter
    and the rest of the book, we emphasize the importance of writing test cases as
    an integral part of coding.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了理解遗留代码的各种技术。阅读代码经常是被低估的技能。但我们需要明智地重用好的工作代码，而不是重复造轮子。在本章和本书的其余部分，我们强调编写测试用例作为编码的一个组成部分的重要性。
- en: In the next chapter, we will talk about writing test cases and the often frustrating
    task of debugging that follows.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论编写测试用例和随之而来的经常令人沮丧的调试任务。
