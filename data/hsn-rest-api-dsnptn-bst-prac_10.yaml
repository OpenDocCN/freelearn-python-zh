- en: Frameworks, Standard Languages, and Toolkits
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 框架、标准语言和工具包
- en: Software frameworks are the lifeline of software applications. They provide
    extended capabilities and offer many out-of-the-box implementations so that application
    developers don't need to handle every coding aspect of software and can focus
    on building faster and smarter business capabilities by using out-of-the-box capabilities,
    libraries, APIs, and models provided by the frameworks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 软件框架是软件应用的命脉。它们提供了扩展的功能，并提供了许多开箱即用的实现，这样应用开发者就不需要处理软件的每一个编码方面，而是可以通过使用框架提供的开箱即用功能、库、API和模型来专注于构建更快、更智能的业务能力。
- en: We'll provide a short introduction to few popular frameworks along with a little
    bit of information about their supported programming languages, capabilities,
    standards, and characteristics, such as footprints, adaptability, cloud deployment
    friendliness, and ease of development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简要介绍一些流行的框架，并附带一些关于它们支持的编程语言、功能、标准以及特性的信息，例如足迹、适应性、云部署友好性和开发易用性。
- en: The aim of this chapter is to introduce readers to a few prominent frameworks
    that can come in handy when choosing the right framework for their API-development
    needs. Please note that the list of discussed frameworks isn't exhaustive, and
    there's no intention to provide a comparison between them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是向读者介绍一些在为他们的API开发需求选择正确框架时可能会派上用场的突出框架。请注意，所讨论的框架列表并不全面，也没有意图提供它们之间的比较。
- en: 'The following are the chapter objectives:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下章节目标：
- en: This chapter is all about introducing a few prominent frameworks to app developers
    who want to jump-start their RESTful APIs and microservices with their acquainted
    programming languages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的目的是向希望使用熟悉的编程语言快速启动他们的RESTful API和微服务的应用开发者介绍一些突出的框架。
- en: It's an attempt to provide readers with an introduction, guidelines, and advantages
    and disadvantages for few programming language-friendly frameworks so that they
    can pick and play with a more suitable framework for their RESTful API development
    needs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一种尝试为读者提供介绍、指南以及一些对编程语言友好的框架的优缺点，以便他们可以根据自己的RESTful API开发需求选择并使用更合适的框架。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As we'll discuss a few prominent frameworks based on the Java, Python, and Go
    (programming) languages, having a basic understanding in one or more programming
    languages would enable readers of this chapter to jumpstart their RESTful API
    development with one or more of their favorite frameworks. This chapter serves
    as reference material as well as a technical guide for those who have a minimum
    understanding of any of these three programming languages.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将讨论基于Java、Python和Go（编程语言）的几个突出框架，对一种或多种编程语言的基本理解将使本章的读者能够快速启动他们的RESTful
    API开发，并使用他们喜欢的框架之一。本章既作为参考资料，也作为对这三种编程语言中任何一种有基本理解的人的技术指南。
- en: Core features of a framework
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 框架的核心特性
- en: 'As we are aware, frameworks are software libraries, APIs, scaffoldings, AJAX,
    caching, security, compilers and much more. It''s imperative that we refresh our
    memory with the following core qualities of any framework, as our selection of
    framework relies on these qualities:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，框架是软件库、API、脚手架、AJAX、缓存、安全、编译器等等。我们必须通过以下任何框架的核心品质来刷新我们的记忆，因为我们的框架选择依赖于这些品质：
- en: Simple, consistent, easy to adapt, and faster to implement
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单、一致、易于适应，且易于实现
- en: Layered architecture, well-designed and -documented
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分层架构，设计良好且文档齐全
- en: Built with genuine trade-offs
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 做出真正的权衡
- en: Built with reusable libraries and reused libraries (borrowed from the past)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可重用库和重用库（借鉴自过去）
- en: Integrated and designed to evolve
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成和设计以适应变化
- en: Let's look at a few Java-based frameworks to understand their capabilities regarding
    their design, footprint, documentation, and adaptability, along with their advantages
    and disadvantages.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看几个基于Java的框架，以了解它们在设计、足迹、文档和适应性方面的能力，以及它们的优缺点。
- en: Spring Boot
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot
- en: One of the most popular open source, Java-based frameworks is **Spring Boot**.
    It offers an excellent platform for many Java developers to build and deploy REST-based
    applications with a rapid turnaround time.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎的开源Java框架之一是**Spring Boot**。它为许多Java开发者提供了一个优秀的平台，可以快速构建和部署基于REST的应用程序。
- en: 'The fundamental design principles of Spring Boot is as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 的基本设计原则如下：
- en: Provide radically faster and widely-accessible code, reusable libraries, and
    boilerplates for all Spring development
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为所有 Spring 开发提供快速且易于访问的代码、可重用库和模板
- en: Be opinionated (certain, strong, and expressive), think outside the box, and
    provide a way for developers to customize as per their requirements, and challenge
    the defaults
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有自己的见解（确定、强烈和表达），跳出思维定式，并为开发者提供根据其需求定制的途径，并挑战默认设置
- en: Provide non-functional requirement features variations that are common to classes
    of the project that can be used for instrumentation (such as security, embedded
    servers, health checks, metrics and externalized configuration))
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供非功能性需求特征变化，这些变化适用于项目的类，可用于仪表化（例如安全、嵌入式服务器、健康检查、指标和外部化配置）
- en: No code-generation mechanism and no need for XML configurations
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有代码生成机制，也不需要 XML 配置
- en: Boilerplate code or boilerplate represents a code or code library incorporated
    in a software application, and we can reuse those libraries with little or no
    alteration.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 模板代码或模板表示在软件应用程序中集成的代码或代码库，我们可以通过少量或无修改地重用这些库。
- en: Let's see what makes Spring Framework a popular choice for app developers for
    their RESTful API development.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看是什么让 Spring 框架成为应用开发者进行 RESTful API 开发的热门选择。
- en: Core features of Spring
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring 的核心功能
- en: 'Spring''s application, external configuration, profiles, and logging are the
    constituents of Spring''s core features. Let''s look at each constituent and its
    values:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 的应用程序、外部配置、配置文件和日志记录是 Spring 核心功能的组成部分。让我们看看每个组成部分及其值：
- en: The Spring application provides a convenient way to bootstrap our applications
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring 应用程序提供了一种方便的方式来启动我们的应用程序
- en: External configuration helps us to work with same application code in different
    environments by using YAML, environment variables, or even with command-line arguments
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部配置帮助我们使用 YAML、环境变量或命令行参数在不同的环境中使用相同的应用程序代码
- en: Profiles segregate parts of an application's configuration and make it available
    only to certain environments
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件将应用程序配置的部分隔离开来，并使其仅对某些环境可用
- en: It provides out-of-the-box Apache Commons Logging capabilities, however, it
    doesn't stop us from use different logging frameworks
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了开箱即用的 Apache Commons Logging 功能，然而，这并不会阻止我们使用不同的日志框架
- en: Database integration with Spring data
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Spring 数据进行数据库集成
- en: 'Database integration is an important part of any production software applications,
    and we''ll observe how Spring makes the lives of developers better by providing
    exciting capabilities to integration for traditional SQL databases and NoSQL technologies:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库集成是任何生产级软件应用程序的重要组成部分，我们将观察 Spring 如何通过提供对传统 SQL 数据库和 NoSQL 技术的集成能力来使开发者的生活变得更美好：
- en: '**SQL**: Spring provides far-reaching support to work with SQL databases. JdbcTemplate
    for ORM, with Spring data, provides an additional level of functionality called
    **repository creations**.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL**：Spring 为与 SQL 数据库一起工作提供了广泛的支持。使用 Spring 数据的 JdbcTemplate 进行 ORM，提供了称为
    **仓库创建** 的额外功能层。'
- en: '**NO-SQL**: A Spring-based programming model for data access, called **Spring
    data**, powers the Spring Framework and provides a quick-and-easy access mechanism
    to connect to a variety of NoSQL technologies.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NO-SQL**：一个基于 Spring 的数据访问编程模型，称为 **Spring 数据**，为 Spring 框架提供动力，并提供了一种快速便捷的连接机制，用于连接各种
    NoSQL 技术。'
- en: Messaging integration
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息集成
- en: Integration with messaging systems is super simplified with the Spring message
    framework. Be it simple messaging with JmsTemplate for JMS or ActiveMQ support
    or be it an AMQP for advanced messaging or for Apache Kafka integration the Spring-framework,
    it provides simple methods for messaging integration.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Spring 消息框架，与消息系统的集成得到了极大的简化。无论是使用 JmsTemplate 进行简单消息传递或 ActiveMQ 支持，还是使用
    AMQP 进行高级消息传递或 Apache Kafka 集成，Spring 框架都提供了简单的方法来实现消息集成。
- en: Extending Spring with auto-configuration
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过自动配置扩展 Spring
- en: In many practical scenarios, we need to develop shared libraries (within an
    organization or as a contribution to open source) and in such cases create specific
    configuration classes—as modules (JAR). Making it available in the application's
    classpath makes the development faster and easier by eliminating the need to define
    specific beans that are included in the auto-configuration classes. The configuration
    examples could be LDAP, different DB sources configurations, or security configurations.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多实际场景中，我们需要开发共享库（在组织内部或作为对开源的贡献）和在这种情况下创建特定的配置类——作为模块（JAR）。将其放在应用程序的类路径中，通过消除在自动配置类中定义特定bean的需要，可以加快并简化开发。配置示例可以是LDAP、不同的数据库源配置或安全配置。
- en: Writing unit tests and integration test cases
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写单元测试和集成测试用例
- en: Writing unit test cases and integration tests are essential practices for any
    developers. Spring provides better capabilities to write unit tests, tests in
    isolation scripts, and integration tests. Spring Framework comes up with a few
    utilities and annotations for testing our applications. Spring-boot-starter-test
    is the favorite test utility for most of developers as its starter tool imports
    Junit, AssertJ, Hamcrest, and Mockito. Spring-test and Spring-boot-test for integration
    tests are common libraries and come in handy when writing integration tests. What's
    exciting about the spring test framework is that we can add some additional test
    dependencies of our own as well.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 编写单元测试和集成测试是任何开发者的基本实践。Spring提供了更好的能力来编写单元测试、隔离脚本中的测试以及集成测试。Spring框架提供了一些测试应用程序的实用工具和注解。对于大多数开发者来说，Spring-boot-starter-test是首选的测试实用工具，因为它的入门工具导入了JUnit、AssertJ、Hamcrest和Mockito。Spring-test和Spring-boot-test是用于集成测试的常见库，在编写集成测试时非常有用。令人兴奋的是，Spring测试框架允许我们添加一些自己的额外测试依赖项。
- en: Benefits of Spring Boot
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot的好处
- en: 'Before we move to another popular framework, let''s look at some advantages
    of Spring Boot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们转向另一个流行的框架之前，让我们看看Spring Boot的一些优点：
- en: Quick setup, rapid development, and push to production (enterprise ready)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速设置、快速开发和推送到生产（企业就绪）
- en: Effortless and quick integration with security, ORM, and JDBC
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与安全、ORM和JDBC轻松快速集成
- en: Embedded lightweight HTTP servers
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置轻量级HTTP服务器
- en: Along with Java, it also supports Groovy
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了Java之外，它还支持Groovy
- en: Supports Maven and Gradle build tools
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Maven和Gradle构建工具
- en: Modular and plays well with other libraries
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化，与其他库兼容良好
- en: Quick learning, broad, and in-depth documentation
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习快速、文档广泛且深入
- en: Very active community (of development and documentation) online and offline
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在线和离线都有非常活跃的社区（开发和文档）
- en: Drawbacks of Spring Boot
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot的缺点
- en: 'While Spring has many advantages, we should also be aware of its drawbacks:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Spring有许多优点，但我们也应该意识到它的缺点：
- en: Frequent breaking changes (by introducing new capabilities and defect fixes)
    between versions
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本之间的频繁破坏性更改（通过引入新功能和缺陷修复）
- en: May create an obligation to use latest versions
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会强制使用最新版本
- en: Too much information and documentation may be overkill
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过多的信息和文档可能过于冗余
- en: Vast framework finding specifics may be hard for few (may affect rapid prototyping)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于少数人来说，广泛框架的特定查找可能很困难（可能影响快速原型设计）
- en: The author's choice for all of the code in this book is also Spring Boot, and
    from examples in [Chapter 2](edae86df-d90e-4b4c-9ada-4de80edaef71.xhtml), *Design
    Strategy, Guidelines, and Best Practices*, and [Chapter 3](bdb7c23e-8c80-4a89-af31-e40d1b4c1d36.xhtml),
    *Essential RESTful API* *patterns*, we've seen how easy it was to bring up RESTful
    APIs with Spring Boot. Numerous capabilities are built-in with Spring Boot, and
    it's one of the matured frameworks of the software industry.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 本书所有代码的选择也是Spring Boot，从[第2章](edae86df-d90e-4b4c-9ada-4de80edaef71.xhtml)“设计策略、指南和最佳实践”和[第3章](bdb7c23e-8c80-4a89-af31-e40d1b4c1d36.xhtml)“必要的RESTful
    API模式”的示例中，我们看到了使用Spring Boot启动RESTful API是多么容易。Spring Boot内置了许多功能，它是软件行业成熟的框架之一。
- en: Beginning about Light 4j
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始了解Light 4j
- en: Light is a cloud-native micro-services platform developed with Jave SE, with
    design goals of high throughput, low latency, and a small footprint. Light 4j
    is a general-purpose web/API framework with different frameworks, such as OAUTH2,
    Portal, Logging, Messaging, and Metrics, built in.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Light是一个使用Java SE开发的云原生微服务平台，其设计目标是高吞吐量、低延迟和占用小空间。Light 4j是一个通用Web/API框架，内置了不同的框架，如OAUTH2、门户、日志、消息和度量。
- en: Core features of Light 4j
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Light 4j的核心功能
- en: The light-4j platform aims at containerized microservices and supports a design-driven
    approach from the OpenAPI specification for the RESTful API and the GraphQL IDL
    for GraphQL services and has code-generation and runtime models (for validation
    and security).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: light-4j平台旨在容器化微服务，并支持从OpenAPI规范为RESTful API和GraphQL IDL为GraphQL服务的设计驱动方法，并具有代码生成和运行时模型（用于验证和安全）。
- en: As a platform or a framework, it's good that it addresses a few technical cross-cutting
    concerns, such as auditing, load-balancing, authentication, and health checks,
    so that service or API developers can focus on business logic without worrying
    too much about those technical concerns, also called **non-functional requirements**.
    Light 4j provides various handler logic and separates those non-functional requirements
    from the business context, to help the API developers to focus on developing business
    logic.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 作为平台或框架，它很好地解决了几个技术横切关注点，如审计、负载均衡、身份验证和健康检查，这样服务或API开发者可以专注于业务逻辑，不必过多担心这些技术问题，也称为**非功能性需求**。Light
    4j提供了各种处理逻辑，并将这些非功能性需求从业务上下文中分离出来，以帮助API开发者专注于开发业务逻辑。
- en: Learning about Light Rest 4j
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Light Rest 4j
- en: Light Rest 4j is a framework that is built on top of Light 4j, and designed
    to speed up RESTful API development and deployment. It has many middleware handlers
    designed around Swagger 2.0 and open API 3.0 specifications. Light-rest-4j comes
    with open API metadata, open API security, an open API validator, Swagger meta,
    Swagger security, and Swagger validator.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Light Rest 4j是一个建立在Light 4j之上的框架，旨在加快RESTful API的开发和部署。它围绕Swagger 2.0和Open API
    3.0规范设计了多个中间件处理程序。Light-rest-4j附带Open API元数据、Open API安全、Open API验证器、Swagger元数据、Swagger安全和Swagger验证器。
- en: Light-code-gen
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: light-code-gen
- en: We can build RESTful APIs or services with the OpenAPI 3.0 specification-ready
    light-rest-4j provided frameworks and scaffold a project with a command-line tool
    called **light-code-gen** tool. It enables JWT scope-verification and schema-validation
    for any service requests.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用OpenAPI 3.0规范就绪的light-rest-4j提供的框架构建RESTful API或服务，并使用名为**light-code-gen**的工具命令行工具来构建项目。它为任何服务请求启用JWT范围验证和模式验证。
- en: The light-code-gen tool helps us to scaffold a project with a specification
    file and a config JSON file. The command-line tool can be as simple as a Java
    command-line tool, docker command line, or even a script that can be part of the
    DevOps pipeline. light-code-gen works with our favorite Maven build tool as well.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: light-code-gen工具帮助我们使用规范文件和配置JSON文件来构建项目。命令行工具可以像Java命令行工具、Docker命令行工具，甚至可以成为DevOps管道的一部分的脚本。light-code-gen还与我们的最爱Maven构建工具一起工作。
- en: Choosing Light 4j over the rest
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择Light 4j而非其他选项
- en: 'Let''s conclude this section with the following facts about Light 4j, as it
    may help you determine whether to choose Light 4j for RESTful API development:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以以下关于Light 4j的事实来结束本节，因为它可能有助于您决定是否选择Light 4j进行RESTful API开发：
- en: Java-SE-based framework
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Java-SE的框架
- en: Scalable design
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可伸缩的设计
- en: Low latency
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低延迟
- en: Small memory footprint
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小内存占用
- en: Several handlers as plugins
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几个处理程序作为插件
- en: Out-of-the-box OAuth2 integration (security-first design)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开箱即用的OAuth2集成（以安全为首要设计）
- en: Easy integration with other frameworks
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他框架易于集成
- en: A built-in dependency-injection framework
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置的依赖注入框架
- en: Benchmarks indicate as this the fastest RESTful framework
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基准测试表明这是最快的RESTful框架
- en: May involve a steep learning curve due to poor documentation
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于文档不佳，可能涉及陡峭的学习曲线
- en: New to market/industry, so not much feedback yet on production systems
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 市场或行业新加入，因此关于生产系统的反馈还不多
- en: Light-rest-4j, built on top of the light4j framework, is very promising and
    gaining popularity due to various features—lightweight, very low latency, designed
    for scalability, not J2EE-based but J2SE-based, and its security-first design.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 基于light4j框架构建的Light-rest-4j因其各种特性——轻量级、非常低延迟、设计用于可伸缩性、不是基于J2EE而是基于J2SE，以及其以安全为首要的设计——而非常有前途并越来越受欢迎。
- en: Spark Framework
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spark框架
- en: Spark is a micro-framework founded by Per Wendel for creating web applications
    in Java with minimal effort, and it's a free and open source Java Web Framework,
    released under the Apache 2 license.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Spark是一个由Per Wendel创立的微框架，用于以最小的努力用Java创建Web应用程序，它是一个免费的开源Java Web框架，在Apache
    2许可证下发布。
- en: The Spark Framework is a rapid-development web framework built with Java 8 Lambda
    Expression (based on the lambda philosophy), so it can help to build a web application
    with fewer verbose, in fact you can build a REST API with a JSON response in less
    than 10 lines of code and provide Node.js-like experience when developing a web
    API. Cool, isn't it?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Spark框架是一个使用Java 8 Lambda表达式（基于lambda哲学）构建的快速开发Web框架，因此可以帮助用更简洁的方式构建Web应用程序，实际上你可以用不到10行代码构建一个带有JSON响应的REST
    API，并在开发Web API时提供类似Node.js的体验。酷吧，不是吗？
- en: Core features of Spark Framework
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spark框架的核心功能
- en: 'Let''s get a glimpse of some of the core characteristics of Spark:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一瞥Spark的一些核心特性：
- en: Designed to create APIs faster and more easily
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计用于更快、更轻松地创建API
- en: It's a lightweight library
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个轻量级库
- en: Provides simple interfaces through which we can define routes and dispatch them
    to functions for the paths we requested
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供简单的接口，我们可以通过这些接口定义路由并将它们分派到我们请求的路径上的函数
- en: Follows the Java 8 lambda philosophy (create web APIs with fewer lines)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循Java 8 lambda哲学（用更少的行创建Web API）
- en: Creating an API with fewer lines
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用更少的行创建API
- en: 'Typically, we would write the following few lines to bring up a hello world
    API with Spark:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们会写以下几行代码来使用Spark启动一个hello world API：
- en: '[PRE0]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'That''s it! Line one, `spark.Spark.*`, as indicated in the preceding code snippet,
    does the magic. By using CURL (curl `http://localhost:4567/sayhello`), we would
    visualize the following request and response as output for the previous code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些！正如前面代码片段中所示，第一行`spark.Spark.*`完成了魔法般的操作。通过使用CURL（curl `http://localhost:4567/sayhello`），我们可以将以下请求和响应作为前述代码的输出可视化：
- en: '[PRE1]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we can see in the preceding snippet, curl hits the application, so the lambda
    function of `Spark.*` fires and the client (curl in this case) gets the output
    of the static lambda function. It's not just a simple hello world API; we can
    write complex RESTful APIs with Spark as it supports a variety of functions, such
    as query maps, cookies and sessions, filters, redirects, exception and error handlings,
    and views and templates.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述代码片段所示，curl击中应用程序，因此`Spark.*`的lambda函数被触发，客户端（在这种情况下是curl）获得静态lambda函数的输出。这不仅仅是一个简单的hello
    world API；我们可以使用Spark编写复杂的RESTful API，因为它支持各种函数，如查询映射、cookies和会话、过滤器、重定向、异常和错误处理以及视图和模板。
- en: Benefits of Spark
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spark的优点
- en: 'Now it''s time to review the advantages of Spark (and then we''ll review another
    exciting framework called **Dropwizard**):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候回顾Spark（以及我们还将回顾另一个名为**Dropwizard**的激动人心的框架）的优点了：
- en: Java-8-EE-based and based on the lambda philosophy (less verbose)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 Java-8-EE 并基于lambda哲学（更简洁）
- en: Facilitates rapid development
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进快速开发
- en: Enables App developers to create scalable REST APIs
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使应用开发者能够创建可扩展的REST API
- en: Fast and lightweight
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速且轻量级
- en: Best suited and excellent fit for rapid prototyping purposes
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最适合快速原型设计目的
- en: Scores high on the speed factor as Spark is a thin wrapper around Java EE's
    servlet API
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于Spark是Java EE的servlet API的薄包装，因此在速度因素上得分很高
- en: Simplified and effective routing
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化和有效的路由
- en: Brings better productivity by providing a simple **domain-specific language**
    (**DSL**) for routing API endpoints to handlers
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过提供用于将API端点路由到处理器的简单**领域特定语言**（**DSL**），提高了生产力
- en: Maven and Gradle support
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 Maven 和 Gradle
- en: Drawbacks of Spark
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spark的缺点
- en: 'Any popular framework may have drawbacks, and Spark is no exception:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 任何流行的框架都可能存在缺点，Spark也不例外：
- en: Not as popular as other frameworks (small community)
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不像其他框架那样受欢迎（社区较小）
- en: May not be suitable for huge projects (SQL and NoSQL plug-and-play aspects)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能不适合大型项目（SQL和NoSQL即插即用特性）
- en: Dropwizard
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dropwizard
- en: In this section, we'll review another popular Java-based framework licensed
    under Apache, called Dropwizard. This framework is named for a character from
    a K.C. Green webcomic ([http://gunshowcomic.com/316](http://gunshowcomic.com/316))
    series.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾另一个在Apache许可下授权的基于Java的流行框架，名为Dropwizard。这个框架是以K.C. Green网络漫画系列中的一个角色命名的（[http://gunshowcomic.com/316](http://gunshowcomic.com/316)）。
- en: Overview
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: '**Dropwizard** is a stable, mature framework, assembled with several Java libraries,
    yet lightweight and intended to help API developers by providing features that
    one can quickly develop and deploy web applications to production servers. Dropwizard''s
    principal design goal is to provide reliable, reusable, and high-performance implementations
    of everything that a web application needs and provide out-of-the-box capabilities
    that the application is deployable in production servers. Framework''s reusable
    libraries make the core application lean and focused, hence reducing both time-to-market
    and maintenance burdens:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dropwizard**是一个稳定、成熟的框架，由几个Java库组成，但轻量级，旨在通过提供快速开发和部署到生产服务器的功能来帮助API开发者。Dropwizard的主要设计目标是提供可靠、可重用和高效实现所有Web应用程序所需的一切，并提供开箱即用的功能，使应用程序能够在生产服务器上部署。框架的可重用库使核心应用程序精简且专注，从而减少了上市时间和维护负担：'
- en: '![](img/3e9cc853-cb48-4ff6-9c2b-dc4556f5e04c.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3e9cc853-cb48-4ff6-9c2b-dc4556f5e04c.png)'
- en: As we can see in the previous diagram, **Dropwizard** supports several powerful
    libraries, and we'll see some details about each in the following sections.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，**Dropwizard**支持几个强大的库，我们将在接下来的章节中看到每个库的一些细节。
- en: Core features of Dropwizard
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dropwizard的核心功能
- en: Dropwizard tailors several high-performance Java-library implementations, such
    as Jetty, Jersy, Jackson, and Metrics. Let's take a quick glimpse at a few of
    these libraries.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Dropwizard定制了几个高性能的Java库实现，例如Jetty、Jersy、Jackson和Metrics。让我们快速浏览一下这些库中的几个。
- en: Jetty for HTTP
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jetty用于HTTP
- en: 'Dropwizard uses the Jetty HTTP library and spins up an HTTP web server with
    its `main` method, and so facilitates running your web application as a simple
    Unix process and piggybacking on existing Unix process management tool. By having
    this `main` method as a way of spinning up, the process leads to the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Dropwizard使用Jetty HTTP库，并通过其`main`方法启动一个HTTP Web服务器，从而简化了将Web应用程序作为简单的Unix进程运行，并利用现有的Unix进程管理工具。通过将`main`方法作为启动方式，这个过程导致以下结果：
- en: No need to manage the traditionally-burdensome Java production process
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需管理传统的繁重Java生产流程
- en: Gets rid of PermGen issues
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决了PermGen问题
- en: No need to customize the application server's configuration
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需自定义应用程序服务器的配置
- en: No need for separate deployment tools
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需单独的部署工具
- en: No classloader issues
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无类加载器问题
- en: Jersey for REST
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jersey用于REST
- en: As we know, the JAX-RS reference implementation Jersey is open source; it comes
    with its native API toolkit to simplify the development of RESTful web services
    and their clients in Java. Jersey also exposes numerous extension SPIs (software
    platform infrastructure as a services model). Dropwizard bundles Jersey as its
    RESTful web app framework and helps developers to write clean code, providing
    testable classes that gracefully map HTTP requests to simple Java objects that
    streaming output, matrix URI parameters, conditional `GET` requests, and so on.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，JAX-RS参考实现Jersey是开源的；它附带其本机API工具包，用于简化Java中RESTful Web服务和其客户端的开发。Jersey还公开了大量的扩展SPI（软件平台基础设施作为服务模型）。Dropwizard将Jersey捆绑为其RESTful
    Web应用程序框架，并帮助开发者编写干净的代码，提供可测试的类，优雅地将HTTP请求映射到简单的Java对象，流式输出，矩阵URI参数，条件`GET`请求等。
- en: Jackson
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jackson
- en: A critical need for app developers is having the object mapper from JSON and
    allowing the domain model to export directly to those Java objects. Dropwizard
    gratifies those app-developer needs by having Jackson as its primary core feature
    along with many others.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于应用程序开发者来说，一个关键需求是拥有从JSON到对象映射器的功能，并允许领域模型直接导出到那些Java对象。Dropwizard通过拥有Jackson作为其核心功能之一，以及许多其他功能，满足了这些应用程序开发者的需求。
- en: Metrics
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metrics
- en: This Java library acts as a powerful toolkit and offers ways to measure the
    behavior of components that are deployed in production. Combined with other prominent
    libraries, such as Ehcache and Graphite, Metrics stands as it provides full-stack
    visibility to our RESTful API and web applications.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Java库作为一个强大的工具包，提供了测量在生产中部署的组件行为的方法。结合其他突出的库，如Ehcache和Graphite，Metrics作为一个提供全栈可见性的库，为我们的RESTful
    API和Web应用程序提供了全面的支持。
- en: Liquibase
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Liquibase
- en: Dropwizard includes the open source solution for managing revisions of database-schema
    scripts. Liquibase supports various types of database, and various file formats
    for defining the DB structure. The highlight of Liquibase is its ability to roll
    back changes (forward and backward) from a specific point.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Dropwizard 包括用于管理数据库脚本修订的开源解决方案。Liquibase 支持各种类型的数据库，以及定义数据库结构的各种文件格式。Liquibase
    的亮点是其能够从特定点回滚更改（向前和向后）。
- en: Other noteworthy features
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他值得注意的功能
- en: 'Before we get into its advantages and disadvantages, let''s take a glimpse
    at other noteworthy libraries in Dropwizard:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解其优缺点之前，让我们先看看 Dropwizard 中其他值得注意的库：
- en: '**Logging**: Logback and slf4j for performant and flexible logging'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录**：Logback 和 slf4j 用于高性能和灵活的日志记录'
- en: '**Hibernate validator**: Offers easy ways for user input validation, along
    with capabilities of generating i18n-friendly error messages'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hibernate validator**：提供用户输入验证的简单方法，以及生成 i18n 友好错误消息的能力'
- en: '**Http interactions**: Bundled with Apache HttpClient and Jersey client libraries,
    it helps low-level and high-level HTTP interactions with other web services'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Http 交互**：捆绑 Apache HttpClient 和 Jersey 客户端库，有助于与其他 Web 服务进行低级和高级的 HTTP 交互'
- en: '**JDBI**: Provides a simple, comfortable, and straightforward way to establish
    Relational database connectivity with Java backends'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JDBI**：提供了一种简单、舒适且直接的方式，通过 Java 后端建立关系型数据库连接'
- en: '**Templates**: Dropwizard supports Freemarker and Mustache, the simplest templating
    systems for consumer or user-facing applications'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板**：Dropwizard 支持 Freemarker 和 Mustache，这是面向消费者或用户界面的应用程序最简单的模板系统'
- en: Benefits of Dropwizard
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dropwizard 的好处
- en: 'As we are covering the advantages and disadvantages of each framework, let''s
    touch upon them for Dropwizard as well, so that you can decide why or why not
    to use Dropwizard. The following are its merits:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在介绍每个框架的优缺点，让我们也简要提及 Dropwizard，以便你可以决定是否使用 Dropwizard。以下是其优点：
- en: A Java framework
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Java 框架
- en: Out-of-the-box support for configuration, application metrics, logging, operational
    tools, templating, and much more
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置对配置、应用程序度量、日志记录、操作工具、模板等许多功能的支持
- en: You can do rapid prototyping
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以进行快速原型设计
- en: Ops-friendly
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运维友好
- en: Very modular
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非常模块化
- en: Develops high-performance RESTful web services
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发高性能的 RESTful 网络服务
- en: Supports many open source and independent libraries
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持许多开源和独立库
- en: Implementation of monitoring at its best with Metrics
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Metrics 实现最佳监控
- en: Supports integration and the use of several third-party frameworks
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持集成和使用多个第三方框架
- en: Drawbacks of Dropwizard
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dropwizard 的缺点
- en: 'A few factors that you may consider drawbacks of Dropwizard are as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一些你可能认为 Dropwizard 的缺点因素如下：
- en: Maintaining applications with third-party frameworks and libraries may bring
    debugging nightmares
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用第三方框架和库维护应用程序可能会带来调试噩梦
- en: Though there are several powerful libraries, there may be situations where you
    need a specific library, but it isn't supported by Dropwizard (restriction of
    using only what Dropwizard provides)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然有几个强大的库，但可能存在需要特定库但 Dropwizard 不支持（仅使用 Dropwizard 提供的内容）的情况
- en: It may incur a steep learning curve
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会有一个陡峭的学习曲线
- en: Understanding Go framework for the RESTful API
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Go 框架用于 RESTful API
- en: Go is one of the friendlier programming languages for microservices and RESTful
    APIs. Go is a general-purpose, procedural programming language with advanced features
    and clean syntax. It influences the efficient management of dependencies using
    package-assembly and supports environment adopting patterns alike to dynamic languages.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Go 是微服务和 RESTful API 中较友好的编程语言之一。Go 是一种通用、过程式编程语言，具有高级功能和简洁的语法。它影响了使用包组装进行依赖关系的高效管理，并支持类似于动态语言的动态模式。
- en: An overview
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: There are many powerful frameworks that Gophers (Go lang programmers) can employ
    to reuse proven, extensible, production-grade external packages out of the box
    for their app's development. This section intends to cover some details and functions
    for two Go-language-based frameworks—Gin-gonic and Revel – that you can use to
    jump-start your RESTful API development.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Go（Go 语言程序员）可以采用许多强大的框架来为他们的应用程序开发重用现成的、可扩展的生产级外部包。本节旨在介绍两个基于 Go 语言的框架——Gin-gonic
    和 Revel 的某些细节和功能，你可以使用它们来快速启动你的 RESTful API 开发。
- en: Gin-gonic
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gin-gonic
- en: Gin is an HTTP web framework written in Go. Gin design is much out of Martini,
    another Go framework, however, with better performance than Martini. The Gin framework
    claims: *If you need smashing performance, get yourself some gin*. Gin-gonic helps
    developers to write less boilerplate code and build a request-handling pipeline.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Gin 是一个用 Go 语言编写的 HTTP 网络框架。Gin 的设计灵感来源于 Martini，另一个 Go 框架，然而，Gin 的性能优于 Martini。Gin
    框架声称：“如果你需要惊人的性能，那就来点杜松子酒吧。” Gin-gonic 帮助开发者编写更少的样板代码并构建请求处理管道。
- en: '**Martini** ([https://github.com/go-martini/martini](https://github.com/go-martini/martini))
    is a framework developed with the Go language. Its modular and non-intrusive design
    makes the framework simple to use. However, please be aware that it''s no longer
    maintained or supported.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**Martini** ([https://github.com/go-martini/martini](https://github.com/go-martini/martini))
    是使用 Go 语言开发的框架。其模块化和非侵入式的设计使得框架易于使用。然而，请注意，它已经不再维护或支持。'
- en: Core features
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心功能
- en: '**Gin** is a very lean framework and supports essential and much-needed features
    and functionalities for you to design and develop a RESTful web service. The trimmed-down
    version has essential libraries as well, and you can create your own reusable
    and extensible pieces of code.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**Gin** 是一个非常精简的框架，并支持您设计和开发 RESTful 网络服务所需的基本功能和功能。精简版本也包含基本库，您可以创建自己的可重用和可扩展的代码片段。'
- en: HttpRouter
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HttpRouter
- en: '**HttpRouter** is a lightweight and a high-performance HTTP request router
    for Go; it''s also called **multiplexer** (or mux, for short). Unlike the default
    mux of Go''s net/HTTP package, this customized mux helps to bind the routing variables
    in the routing pattern and matches against the request method. The best part of
    this router is its small memory footprint, optimized for high performance. As
    this custom router employs a compressing radix tree structure for efficient matching
    of the long paths, a large number of routes is possible with the custom router.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRouter** 是一个轻量级且高性能的 Go 语言 HTTP 请求路由器；它也被称作 **多路复用器**（或简称为 mux）。与 Go
    语言 net/HTTP 包的默认多路复用器不同，这个定制化的多路复用器有助于绑定路由模式中的路由变量并与请求方法进行匹配。这个路由器的最大优点是其小巧的内存占用，优化了高性能。由于这个自定义路由器采用压缩基数树结构进行高效的长路径匹配，因此使用自定义路由器可以实现大量的路由。'
- en: Http2 server push
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Http2 服务器推送
- en: Gin supports Http2 server push capabilities out of the box. Server push helps
    the server to utilize its network resources fully and so improves the page-load
    time. HTTP/2 introduced a concept called **server push**, which allows the server
    to push the additional required resources to the browser even before they are
    explicitly requested.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Gin 支持开箱即用的 Http2 服务器推送功能。服务器推送有助于服务器充分利用其网络资源，从而提高页面加载时间。HTTP/2 引入了一个名为 **服务器推送**
    的概念，允许服务器在资源被明确请求之前将额外的所需资源推送到浏览器。
- en: Multi-template
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多模板
- en: Gin allows by default the use of only one HTML template. However, there's a
    custom HTML rendering to support multiple templates, that is, more than one `*template.`
    template.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Gin 默认只允许使用一个 HTML 模板。然而，有一个定制的 HTML 渲染支持多个模板，即多个 `*template.` 模板。
- en: Upload files
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传文件
- en: By using `multipart.write`, we can write files into the cache and send them
    to the server through the `POST` method.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `multipart.write`，我们可以将文件写入缓存并通过 `POST` 方法发送到服务器。
- en: Other noteworthy features
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他值得注意的功能
- en: 'Though *Gin-Gonic* has many libraries and supports several features, here are
    some of its best features:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 *Gin-Gonic* 有许多库并支持多个功能，但以下是一些其最佳特性：
- en: Groups routes
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分组路由
- en: Writes into log files
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入日志文件
- en: Custom validator
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义验证器
- en: Custom middleware
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义中间件
- en: Builds with *jsoniter*
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 *jsoniter* 构建
- en: Benefits of Gin-Gonic
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gin-Gonic 的好处
- en: 'Let''s see a few pros of *Gin-*Gonic:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 *Gin-*Gonic 的几个优点：
- en: Lean and lightweight
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精简且轻量
- en: Zero-allocation router
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 零分配路由器
- en: Complete set of unit tests
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的单元测试集
- en: Backward-compatible, new releases will not break the old code
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 兼容性，新版本发布不会破坏旧代码
- en: High performance and highly scalable
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高性能和高可扩展性
- en: Drawbacks of Gin-Gonic
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gin-Gonic 的缺点
- en: 'Let''s be aware of a few disadvantages of this framework:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们注意这个框架的一些缺点：
- en: May not be suitable for large, enterprise-based implementations
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能不适合大型、基于企业的实施
- en: Low server processing capabilities, which forces clients to handle the workloads
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器处理能力低，迫使客户端处理工作负载
- en: May incur a steep learning curve
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能存在陡峭的学习曲线
- en: Revel
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Revel
- en: In our list of frameworks, one of the most promising is Revel. It's fully-featured,
    designed to provide out-of-the-box asynchronous, stateless, and modular capabilities
    to our web APIs. Let's learn a bit about Revel and its abilities in the following
    sections.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的框架列表中，最有前途的一个是Revel。它功能齐全，旨在为我们提供开箱即用的异步、无状态和模块化能力，以支持我们的Web API。在接下来的部分，让我们了解一下Revel及其功能。
- en: Core features
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心功能
- en: Revel is a self-contained, almost full-stack web framework, with customizable
    middleware and an externally-configurable framework that Gophers would develop
    and stand up their RESTful APIs really quickly. Let's get to know some of the
    fundamental features of Revel in the following sections.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Revel是一个自包含的、几乎全栈的Web框架，具有可定制的中间件和外部可配置的框架，Gophers可以快速开发并部署他们的RESTful API。在接下来的部分，让我们了解Revel的一些基本功能。
- en: Router
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由器
- en: 'URLs and routes definitions are configurable in the file, as shown:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件中可以配置URL和路由定义，如下所示：
- en: '[PRE2]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can route the URLs with Revel in different ways. The following are a few
    routing methods with examples:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用Revel以不同的方式路由URL。以下是一些带有示例的几种路由方法：
- en: '**Fixed-path routing**: Fixed-path or exact-match routing of the HTTP method
    and the path to invoke specific methods and controllers'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固定路径路由**：HTTP方法和路径的固定路径或精确匹配路由，以调用特定的方法和控制器'
- en: '`GET/About App.About`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET/About App.About`'
- en: Use exact match/About as path and `App.About` as method on the `App` controller
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用精确匹配/About作为路径，并在`App`控制器上使用`App.About`作为方法
- en: '**URL***: Parameters* routing - segments of the path extracted *with—*prefix'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL**：参数路由 - 提取带有*前缀*的路径段'
- en: '`GET /user/:id User.Details`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET /user/:id User.Details`'
- en: A few other methods that Revel supports for routing (that we aren't covering
    in this section) are auto-routing, reverse-routing, static serving, and purge.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Revel支持的一些其他路由方法（本节未涵盖）包括自动路由、反向路由、静态服务和清除。
- en: Server engine
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器引擎
- en: The best part of Revel's server engine is that app developers are free to implement
    their favorite HTTP engines. Revel uses the Go HTTP engine by default, but it
    allows us to configure any other server engine, such as fastHttp, New Relic HTTP,
    or our custom developed HTTP engine. How cool is that?
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Revel服务器引擎的最好部分是，应用程序开发者可以自由地实现他们最喜欢的HTTP引擎。Revel默认使用Go HTTP引擎，但它允许我们配置任何其他服务器引擎，例如fastHttp、New
    Relic HTTP或我们自定义开发的HTTP引擎。这有多酷？
- en: Controllers
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器
- en: Controllers in the Revel framework are the logic containers responsible for
    executing the API logic. The controller holds the incoming HTTP requests information,
    such as query parameters, path parameters, JSON body, and form data, to the handlers.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在Revel框架中，控制器是负责执行API逻辑的逻辑容器。控制器将传入的HTTP请求信息，如查询参数、路径参数、JSON正文和表单数据，传递给处理器。
- en: Handlers
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理器
- en: HTTP request routers are responsible for comparing the incoming requests against
    a list of predefined URL paths and calling the respective handlers. Handlers are
    responsible for writing response headers and bodies. Any Go object that satisfies
    the `http.Handler` interface can be a handler. Interestingly, Go's HTTP package
    is distributed with functions that can generate handlers, such as `FileServer`,
    `RedirectHandler`, and `NotFoundHandler`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP请求路由器负责将传入的请求与预定义的URL路径列表进行比较，并调用相应的处理器。处理器负责编写响应头和正文。任何满足`http.Handler`接口的Go对象都可以作为处理器。有趣的是，Go的HTTP包附带了一些可以生成处理器的函数，例如`FileServer`、`RedirectHandler`和`NotFoundHandler`。
- en: Interceptors
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拦截器
- en: There are cases, such as request logging, error handling, or authentication
    handling, where we need an action invoked by the framework BEFORE or AFTER a specific
    event, and those sorts of invocations will happen through a Revel function called
    **interceptors**. In other words, interceptors are a function that gets invoked
    by the framework. Revel supports three forms of interceptors—function interceptor,
    method interceptor, and controller interceptor.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，例如请求日志记录、错误处理或身份验证处理，我们需要在框架在特定事件之前或之后调用一个动作，这类调用将通过Revel的一个名为**拦截器**的函数来完成。换句话说，拦截器是由框架调用的函数。Revel支持三种形式的拦截器——函数拦截器、方法拦截器和控制器拦截器。
- en: Filters
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤器
- en: Revel has independent functions called **filters**. Filters help to implement
    horizontal concerns, such as request-logging, cookie policies, and authorization.
    Filters are middleware, and most of Revel's built-in functionalities and request-processing
    functionalities are filters. They are interfaces that allow them to be nested.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Revel拥有名为**过滤器**的独立功能。过滤器有助于实现水平关注点，例如请求记录、cookie策略和授权。过滤器是中间件，Revel的大部分内置功能和请求处理功能都是过滤器。它们是允许它们嵌套的接口。
- en: Cache
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存
- en: Revel comes with a library that facilitates server-side, low-latency, and temporary
    storage to act as a cache. If you need to take advantage of, and minimize access
    to, the database, cache is a good choice. Another example is implementing cache
    for user sessions where cookie-based sessions aren't preferred or are insufficient.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: Revel附带一个库，它简化了服务器端、低延迟和临时存储作为缓存的使用。如果你需要利用并最小化对数据库的访问，缓存是一个不错的选择。另一个例子是实现基于cookie的会话不优先或不足时用户会话的缓存。
- en: Other noteworthy features
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他值得注意的功能
- en: 'Here are some other noteworthy features of Revel:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是Revel的一些其他值得注意的功能：
- en: '**Websockets**: Revel supports full-duplex communication over a single TCP
    connection with WS methods or with the server `WebSocket` parameter as an action.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Websockets**：Revel支持通过WS方法或通过将服务器`WebSocket`参数作为操作使用单个TCP连接进行全双工通信。'
- en: '**Database**: DB support through app conf (application configuration) database
    section configuration. Note that DB isn''t preconfigured and it''s up to the developers
    to use modules, such as GORM.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库**：通过应用配置（application configuration）数据库部分配置支持数据库。请注意，数据库不是预先配置的，开发者需要使用模块，如GORM。'
- en: '**Testing**: Revel comes with pre-built modules that make it easy to write
    and run functional test cases.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：Revel附带预构建的模块，使得编写和运行功能测试用例变得容易。'
- en: Benefits of Revel
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Revel的好处
- en: 'Now we are ready to look at the pros of the Revel framework:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备查看Revel框架的优点：
- en: Hot-code reload
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热代码重载
- en: Comprehensive libraries
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 综合库
- en: High performance
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高性能
- en: Modular, it's built around composable middleware, called filters, which implement
    most of the request-processing functionality
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化，它围绕可组合的中间件构建，称为过滤器，实现了大部分请求处理功能
- en: Built-in test modules facilitate functional test-case execution
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置测试模块简化了功能测试用例的执行
- en: Well-documented
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档完善
- en: Drawbacks of Revel
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Revel的缺点
- en: 'The factors that may make Revel less appealing are as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 可能使Revel不那么吸引人的因素如下：
- en: Comprehensive libraries are Revel's advantage in most cases; there are situations
    that it makes the code base hefty and generates a large footprint (in contradiction
    to Go's lean principle)
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在大多数情况下，综合库是Revel的优势；但在某些情况下，它会使代码库庞大并产生较大的占用空间（与Go的精简原则相矛盾）
- en: May incur a steep learning curve
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能存在陡峭的学习曲线
- en: No community standard for managing package versions and it's up to the developers
    to manage and release with the necessary latest dependencies (no backward-compatibility)
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有管理包版本的社区标准，开发者需要负责管理和发布必要的最新依赖项（没有向后兼容性）
- en: Python RESTful API frameworks
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python RESTful API框架
- en: Python is one of the top-rated programming languages. It's also known for its
    less-complex syntax, and its high-level, object-oriented, robust, and general-purpose
    programming. Python is the top choice for any first-time programmer.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Python是评分最高的编程语言之一。它还以其更简单的语法、高级、面向对象、健壮和通用编程而闻名。Python是任何初学者的首选。
- en: Overview of Python
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python概述
- en: Since its release in 1991, Python has evolved and powered by several frameworks
    for web application development, scientific and mathematical computing, and graphical
    user interfaces to the latest REST API frameworks. In this section, we'll explore
    two comprehensive frameworks, Django and Flask, so that you can choose the best
    one for developing your RESTful API.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 自1991年发布以来，Python已经发展并支持了多个用于Web应用程序开发、科学和数学计算以及图形用户界面的框架，直到最新的REST API框架。在本节中，我们将探讨两个综合框架Django和Flask，以便你可以为开发你的RESTful
    API选择最佳框架。
- en: Django
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django
- en: '**Django** is a web framework also available as open source with the BSD license,
    designed to help developers create their web app very quickly as it takes care
    of additional web-development needs. It includes several packages (also known
    as **applications**) to handle typical web-development tasks, such as authentication,
    content administration, scaffolding, templates, caching, and syndication. Let''s
    review the **Django REST Framework** (**DRF**) built with Python, and use the
    Django core framework for REST API development and deployment in the following
    section.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '**Django** 是一个开源的 Web 框架，也以 BSD 许可证提供，旨在帮助开发者快速创建他们的 Web 应用程序，因为它会处理额外的 Web
    开发需求。它包括几个包（也称为 **应用程序**），用于处理典型的 Web 开发任务，例如身份验证、内容管理、脚手架、模板、缓存和聚合。接下来，我们将回顾使用
    Python 构建的 **Django REST 框架**（**DRF**），并在下一节中使用 Django 核心框架进行 REST API 的开发和部署。'
- en: Django Rest Framework
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django Rest Framework
- en: DRF is an open source, well-matured Python and Django library intended to help
    APP developers build sophisticated web APIs. DRF's modular, flexible, and customizable
    architecture makes the development of both simple, turnkey API endpoints and complicated
    REST constructs possible. The goal of DRF is to divide a model, generalize the
    wire representation, such as JSON or XML, and customize a set of class-based views
    to satisfy the specific API endpoint using a serializer that describes the mapping
    between views and API endpoints.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: DRF 是一个开源、成熟度高的 Python 和 Django 库，旨在帮助 APP 开发者构建复杂的 Web API。DRF 的模块化、灵活和可定制架构使得开发简单、现成的
    API 端点和复杂的 REST 构造成为可能。DRF 的目标是分割模型，泛化线表示，如 JSON 或 XML，并使用描述视图和 API 端点之间映射的序列化器来定制一组基于类的视图，以满足特定
    API 端点的需求。
- en: Core features
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心特性
- en: Let's have a quick introduction on some of the core features of Django in the
    following paragraphs and then move on to its noteworthy features.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的段落中，我们将简要介绍 Django 的核心功能，然后继续介绍其显著特性。
- en: Web-browsable API
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web 可浏览 API
- en: This feature enhances the REST API developed with DRF. It has a rich interface,
    and the web-browsable API supports multiple media types too. The browsable API
    does mean that the APIs we build will be self-describing and the API endpoints
    that we create as part of the REST services and return JSON or HTML representations.
    The interesting fact about the web-browsable API is that we can interact with
    it fully through the browser, and any endpoint that we interact with using a programmatic
    client will also be capable of responding with a browser-friendly view onto the
    web-browsable API.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能增强了使用 DRF 开发的 REST API。它具有丰富的界面，并且 Web 可浏览 API 也支持多种媒体类型。可浏览的 API 意味着我们所构建的
    API 将是自我描述的，并且我们创建的作为 REST 服务一部分的 API 端点将返回 JSON 或 HTML 表示。关于 Web 可浏览 API 的有趣事实是，我们可以通过浏览器完全与之交互，并且任何使用程序化客户端与之交互的端点也将能够以浏览器友好的视图对
    Web 可浏览 API 进行响应。
- en: Authentication
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证
- en: One of the DRF out-of-the-box capabilities is authentication; it supports broad
    categories of authentication schemes, from basic authentication, token authentication,
    session authentication, remote user authentication, to OAuth Authentication. It
    also supports custom authentication schemes if we wish to implement one. DRF runs
    the authentication scheme at the start of the view, that is, before any other
    code is allowed to proceed. DRF determines the incoming requests privileges from
    the permission and throttling policies, and then decides whether the incoming
    request can be allowed or disallowed with the matched credentials.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: DRF 的开箱即用功能之一是身份验证；它支持广泛的身份验证方案，从基本身份验证、令牌身份验证、会话身份验证、远程用户身份验证到 OAuth 身份验证。它还支持自定义身份验证方案，如果我们希望实现一个的话。DRF
    在视图开始时运行身份验证方案，即在允许任何其他代码执行之前。DRF 通过权限和节流策略确定传入请求的权限，然后根据匹配的凭据决定是否允许或拒绝传入请求。
- en: Serialization and deserialization
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列化和反序列化
- en: Serialization is the process of converting complex data, such as querysets and
    model instances, into native Python datatypes. Converting facilitates the rendering
    of native data types, such as JSON or XML. DRF supports serialization through
    serializers classes. The serializers of DRF are similar to Django's `Form` and
    `ModelForm` classes. It provides a serializer class, which helps to control the
    output of responses. The DRF `ModelSerializer` classes provide a simple mechanism
    with which we can create serializers that deal with model instances and querysets.
    Serializers also do deserialization, that is, serializers allow parsed data that
    needs to be converted back into complex types. Please note that the deserialization
    happens only after validating the incoming data.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化是将复杂数据（如查询集和模型实例）转换为原生 Python 数据类型的过程。转换有助于原生数据类型（如 JSON 或 XML）的渲染。DRF 通过序列化类支持序列化。DRF
    的序列化器类似于 Django 的 `Form` 和 `ModelForm` 类。它提供了一个序列化器类，有助于控制响应的输出。DRF 的 `ModelSerializer`
    类提供了一个简单的机制，我们可以用它来创建处理模型实例和查询集的序列化器。序列化器还执行反序列化，即序列化器允许将解析后的数据转换回复杂类型。请注意，反序列化仅在验证传入数据之后发生。
- en: Other noteworthy features
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他值得注意的特性
- en: 'Here are some other noteworthy features of the DRF:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 DRF 的其他一些值得注意的特性：
- en: '**Routers**: The DRF supports automatic URL routing to Django and provides
    a consistent and straightforward way to wire the view logic to a set of URLs'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由器**：DRF 支持自动 URL 路由到 Django，并提供了一种一致且简单的方法将视图逻辑连接到一组 URL'
- en: '**Class-based views**: A dominant pattern that enables the reusability of common
    functionalities'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于类的视图**：一种使常见功能可重用的主导模式'
- en: '**Hyperlinking APIs**: The DRF supports various styles (using primary keys,
    hyperlinking between entities, and so on) to represent the relationship between
    entities'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超链接 API**：DRF 支持各种样式（使用主键、实体之间的超链接等）来表示实体之间的关系'
- en: '**Generic views**: Allows us to build API views that map to the database models'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用视图**：允许我们构建映射到数据库模型的 API 视图'
- en: There are many more features, such as caching, throttling, and testing, that
    the DRF supports which we won't cover.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: DRF 还支持许多其他功能，如缓存、节流和测试，我们不会在此处介绍。
- en: Benefits of the DRF
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DRF 的好处
- en: 'Here are some of the benefits of the DRF:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 DRF 的一些好处：
- en: Web-browsable API
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可在网页上浏览的 API
- en: Authentication policies
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证策略
- en: Powerful serialization
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强大的序列化功能
- en: Extensive documentation and excellent community support
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 丰富的文档和优秀的社区支持
- en: Simple yet powerful
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单而强大
- en: Test coverage of source code
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码测试覆盖率
- en: Secure and scalable
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全且可扩展
- en: Customizable
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可定制
- en: Drawbacks of the DRF
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DRF 的缺点
- en: 'Here are some facts that may disappoint some Python app developers who intend
    to use the DRF:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些可能会让一些打算使用 DRF 的 Python 应用开发者失望的事实：
- en: Monolithic and components get deployed together
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单体和组件一起部署
- en: Based on Django ORM
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 Django ORM
- en: Steep learning curve
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习曲线陡峭
- en: Slow response time
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应时间慢
- en: Flask
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask
- en: Flask is a microframework for Python developers based on Werkzeug (WSGI toolkit)
    and Jinja 2 (template engine). It comes under BSD licensing. **Flask** is very
    easy to set up and simple to use. Like other frameworks, Flask comes with several
    out-of-the-box capabilities, such as a built-in development server, debugger,
    unit test support, templating, secure cookies, and RESTful request dispatching.
    Let's have a look at one more powerful RESTful API framework, called **Flask-RESTful**,
    in the following section.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 是基于 Werkzeug (WSGI 工具包) 和 Jinja 2 (模板引擎) 的 Python 开发者微框架。它遵循 BSD 许可协议。**Flask**
    非常容易设置和使用。像其他框架一样，Flask 提供了几个开箱即用的功能，例如内置的开发服务器、调试器、单元测试支持、模板、安全 Cookie 和 RESTful
    请求分发。接下来，让我们看看另一个强大的 RESTful API 框架，称为 **Flask-RESTful**。
- en: Flask-RESTful
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask-RESTful
- en: Flask-RESTful is an extension for Flask that provides additional support for
    building REST APIs. You will never be disappointed with the time it takes to develop
    an API. Flask-Restful is a lightweight abstraction that works with the existing
    ORM/libraries. Flask-RESTful encourages best practices with minimal setup. Now
    let's get a glimpse of the core features that Flask-RESTful offers.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-RESTful 是 Flask 的一个扩展，它为构建 REST API 提供了额外的支持。您永远不会对开发 API 所花费的时间感到失望。Flask-Restful
    是一个轻量级抽象，与现有的 ORM/libraries 一起工作。Flask-RESTful 鼓励最佳实践，设置简单。现在让我们看看 Flask-RESTful
    提供的核心功能。
- en: Core features of Flask-RESTful
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask-RESTful 的核心功能
- en: Flask-RESTful comes with several built-in features; this section covers a few
    unique RESTful features since we've covered the most common RESTful framework
    features with Django, and there isn't much difference between their supporting
    core features.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-RESTful自带一些内置特性；本节涵盖了几个独特的RESTful特性，因为我们已经用Django介绍了最常见的RESTful框架特性，并且它们在支持核心特性方面没有太大差异。
- en: Resourceful routing
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源路由
- en: 'The design goal of Flask-RESTful is to provide resources built on top of Flask
    pluggable views. The pluggable views provide a simple way (defining a resource
    method) to access the HTTP methods. Consider the following example code:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-RESTful的设计目标是提供基于Flask的可插拔视图构建的资源。可插拔视图提供了一种简单的方法（定义资源方法）来访问HTTP方法。考虑以下示例代码：
- en: '[PRE3]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Restful request parsing
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RESTful请求解析
- en: Request parsing refers to an interface, modeled after the Python parser *interface*
    for command-line arguments, called `argparser`. The RESTful request parser is
    designed to provide uniform and straightforward access to any variable that comes
    within the `(flask.request)` request object.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 请求解析指的是一个接口，该接口模仿了用于命令行参数的Python解析器*接口*，称为`argparser`。RESTful请求解析器旨在提供对`(flask.request)`请求对象中任何变量的统一和直接访问。
- en: Output fields
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出字段
- en: In most cases, app developers prefer to control rendering response data, and
    Flask-RESTful provides a mechanism where you can use ORM models or even custom
    classes as an object to render. Another interesting fact about this framework
    is that app developers don't need to worry about exposing any internal data structures
    as its let one format and filter the response objects. So, when we look at the
    code, it'll be evident which data would go for rendering and how it'll be formatted.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，应用开发者更喜欢控制渲染响应数据，Flask-RESTful提供了一个机制，允许你使用ORM模型或自定义类作为对象进行渲染。关于这个框架的另一个有趣的事实是，应用开发者不必担心暴露任何内部数据结构，因为它允许一个格式和过滤响应对象。因此，当我们查看代码时，将很明显哪些数据将用于渲染以及如何格式化。
- en: Other noteworthy features
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他值得注意的特性
- en: 'As we''ve covered a few unique features in the previous section, here are some
    other noteworthy features of Flask-RESTful:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们已经介绍了一些独特的特性，以下是Flask-RESTful的其他一些值得注意的特性：
- en: '**API**: This is the main entry point for the restful API, which we''ll initialize
    with the Flask application.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API**：这是RESTful API的主要入口点，我们将使用Flask应用进行初始化。'
- en: '**ReqParse**: This enables us to add and parse multiple arguments in the context
    of the single request.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ReqParse**：这使我们能够在单个请求的上下文中添加和解析多个参数。'
- en: '**Input**: A useful functionality, it parses the input string and returns true
    or false depending on the Input. If the input is from the JSON body,  the type
    is already native Boolean and passed through without further parsing.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**：一个有用的功能，它解析输入字符串，并根据输入返回true或false。如果输入来自JSON体，则类型已经是本地布尔值，无需进一步解析。'
- en: Benefits of the Flask framework
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask框架的优点
- en: 'Let''s look at some of the advantages of Flask and the Flask-Restful framework:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Flask和Flask-Restful框架的一些优点：
- en: Built-in development server and debugger
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置开发服务器和调试器
- en: Out-of-the-box RESTful request dispatching
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开箱即用的RESTful请求分发
- en: Support for secure cookies
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持安全cookie
- en: Integrated unit-test support
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成单元测试支持
- en: Lightweight
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻量级
- en: Very minimal setup
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非常简单的设置
- en: Faster (performance)
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快（性能）
- en: Easy NoSQL integration
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于NoSQL集成
- en: Extensive documentation
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 丰富的文档
- en: Drawbacks of Flask
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask的缺点
- en: 'Here are some of Flask and Flask-RESTful''s disadvantages:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是Flask和Flask-RESTful的一些缺点：
- en: Version management (managed by developers)
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本管理（由开发者管理）
- en: No brownie points as it doesn't have browsable APIs
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有浏览API的加分项
- en: May incur a steep learning curve
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会有一个陡峭的学习曲线
- en: Frameworks – a table of reference
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 框架参考表
- en: 'The following table provides a quick reference of a few other prominent micro-frameworks,
    their features, and supported programming languages:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格提供了一些其他显著的微框架的快速参考，包括它们的特性和支持的编程语言：
- en: '| **Language** | **Framework** | **Short description** | **Prominent features**
    |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| **语言** | **框架** | **简短描述** | **显著特性** |'
- en: '| Java | Blade | Fast and elegant MVC framework for Java8 | LightweightHigh
    performanceBased on the MVC patternRESTful-style router interfaceBuilt-in security
    |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| Java | Blade | 为Java8设计的快速优雅的MVC框架 | 轻量级 高性能 基于MVC模式 RESTful风格的路由接口 内置安全
    |'
- en: '| Java/Scala | Play Framework | High-velocity Reactive webframework for Java
    and Scala | Lightweight, stateless, and web-friendly architectureBuilt on AkkaSupports
    predictable and minimal resource-consumption for highly-scalable applicationsDeveloper-friendly
    |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| Java/Scala | Play Framework | 适用于Java和Scala的高性能响应式Web框架 | 轻量级、无状态、友好的Web架构基于Akka支持高度可扩展应用程序的预测性和最小资源消耗开发者友好
    |'
- en: '| Java | Ninja Web Framework | Full-stack web framework | FastDeveloper-friendlyRapid
    prototypingPlain vanilla Java, dependency injection, first-class IDE integrationSimple
    and fast to test (mocked tests/integration tests)Excellent build and CI supportClean
    codebase – easy to extend |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| Java | Ninja Web Framework | 全栈Web框架 | 快速开发者友好快速原型设计纯Java、依赖注入、一流的IDE集成简单快速测试（模拟测试/集成测试）优秀的构建和CI支持干净的代码库——易于扩展
    |'
- en: '| Java | RESTEASY | JBoss-based implementation that integrates several frameworks
    to help to build RESTful Web and Java applications | Fast and reliableLarge communityEnterprise-readySecurity
    support |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| Java | RESTEASY | 基于JBoss的实现，集成了多个框架，以帮助构建RESTful Web和Java应用程序 | 快速可靠的大社区企业级支持安全支持
    |'
- en: '| Java | RESTLET | A lightweight and comprehensive framework based on Java,
    suitable for both server and client applications. | LightweightLarge communityNative
    REST supportConnectors set |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| Java | RESTLET | 基于Java的轻量级且全面的框架，适用于服务器和客户端应用程序。 | 轻量级的大社区原生REST支持连接器集 |'
- en: '| JavaScript | Express.js | Minimal and flexible Node.js-based JavaScript framework
    for mobile and web applications | HTTP utility methodsSecurity updatesTemplating
    engine |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| JavaScript | Express.js | 基于Node.js的轻量级且灵活的移动和Web应用程序JavaScript框架 | HTTP实用方法安全更新模板引擎
    |'
- en: '| PHP | Laravel | An open source web-app builder based on PHP and the MVC architecture
    pattern | Intuitive interfaceBlade template engineEloquent ORM as default |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| PHP | Laravel | 基于 PHP 和 MVC 架构模式的开源Web应用程序构建器 | 直观的界面Blade模板引擎默认的Eloquent
    ORM |'
- en: '| Elixir | Phoenix (Elixir) | Powered with the Elixir functional language,
    a reliable and faster micro-framework | MVC-basedHigh application performanceErlong
    virtual machine enables better use of resources |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| Elixir | Phoenix (Elixir) | 由Elixir函数语言提供动力，一个可靠且快速的微框架 | 基于MVC的框架高应用性能Erlang虚拟机使资源利用更佳
    |'
- en: '| Python | Pyramid | Python-based micro-framework | LightweightFunction decoratorsEvents
    and subscribers supportEasy implementations and high productivity |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| Python | Pyramid | 基于 Python 的微框架 | 轻量级函数装饰器事件和订阅者支持易于实现和高效 |'
- en: Summary
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We are about to conclude another exciting chapter that dealt with unique, high-productive,
    lightweight, developer friendly, quick-time-to-market, highly-scalable frameworks
    from three major programming languages—Java, Go (Golang), and Python. You might
    have observed that this chapter covered the most popular frameworks and their
    core functionality and touched on a few noteworthy features along the way. This
    chapter gave readers a few ideas about the frameworks' advantages and disadvantages.
    We discussed *Spring-Boot*, *Light 4j*, *Spark Framework*, *Dropwizard*, *Gin-*gonic,
    *Revel*, *Django*, and *Flask*. It's evident that there are several excellent
    frameworks you can use to jump-start your RESTful API development using your programming
    language of choice. But one chapter, and only a few pages of information, doesn't
    begin to cover the greatness of these frameworks and what they bring to the table.
    We hope this chapter gave you a fair idea of the popular frameworks so that you
    can kick-start not only your prototyping but also production-grade RESTful applications.
    In the next chapter, we'll explore best practices for migrating legacy applications
    to capable microservices.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将结束另一个激动人心的章节，该章节讨论了来自三大编程语言——Java、Go（Golang）和Python的独特、高效、轻量级、开发者友好、快速上市、高度可扩展的框架。你可能已经注意到，本章涵盖了最流行的框架及其核心功能，并在过程中提到了一些值得注意的特性。本章为读者提供了一些关于框架优缺点想法。我们讨论了*Spring-Boot*、*Light
    4j*、*Spark Framework*、*Dropwizard*、*Gin-*gonic、*Revel*、*Django*和*Flask*。很明显，有多个优秀的框架可供你使用，以启动你选择的编程语言的RESTful
    API开发。但仅一章，只有几页的信息，还不足以涵盖这些框架的伟大之处以及它们带来的价值。我们希望这一章能让你对流行的框架有一个公平的了解，以便你可以启动不仅原型设计，还可以启动生产级的RESTful应用程序。在下一章中，我们将探讨将遗留应用程序迁移到有能力的微服务中的最佳实践。
- en: Further reading
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Building RESTful Python Web Services* by Gastón C. Hillar, [https://www.packtpub.com/application-development/building-restful-python-web-services](https://www.packtpub.com/application-development/building-restful-python-web-services) 
    [October 2016](https://www.packtpub.com/application-development/building-restful-python-web-services)'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Python构建RESTful Web服务*，作者：Gastón C. Hillar，[https://www.packtpub.com/application-development/building-restful-python-web-services](https://www.packtpub.com/application-development/building-restful-python-web-services)
    [2016年10月](https://www.packtpub.com/application-development/building-restful-python-web-services)'
- en: '*Building RESTful Web services with Go* by Naren Yellavula, [https://www.packtpub.com/application-development/building-restful-web-services-go](https://www.packtpub.com/application-development/building-restful-web-services-go)'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Go构建RESTful Web服务*，作者：Naren Yellavula，[https://www.packtpub.com/application-development/building-restful-web-services-go](https://www.packtpub.com/application-development/building-restful-web-services-go)'
