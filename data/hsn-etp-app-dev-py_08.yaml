- en: Writing Testable Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写可测试的代码
- en: With this chapter, we have entered part two of our book, which covers the development
    of enterprise-grade applications using Python. While part one of this book focused
    on how to build an enterprise-grade application with scalability and performance
    in mind, part two of this book focuses on the internal development aspects of
    the application, such as how we can make sure our application is secure, how well
    it is performing, and how to ship an application with the higher quality checks
    in place so as to minimize the occurrence of unexpected behaviors during the production
    phase.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们已经进入了本书的第二部分，涵盖了使用Python开发企业级应用程序的过程。而本书的第一部分侧重于如何构建具有可扩展性和性能的企业级应用程序，本书的第二部分侧重于应用程序的内部开发方面，例如我们如何确保我们的应用程序是安全的，它的性能如何，以及如何在生产阶段进行更高质量的检查，以最大程度地减少意外行为的发生。
- en: In this chapter, we would like to bring your focus to a very important aspect
    of the enterprise application development or, for that sake, an ...
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们想要把您的注意力集中在企业应用程序开发或者说...
- en: Technical requirements
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code listings in this book can be found under `chapter08` directory at [https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python](https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的代码清单可以在[https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python](https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python)的`chapter08`目录下找到。
- en: The code samples related to the unit testing and functional testing for the
    bugzot application developed in [chapter 6](68cb369b-628d-4950-91fd-b165b961c660.xhtml),
    *Example – Building BugZot,* can be found under the `chapter06` directory.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与[第6章](68cb369b-628d-4950-91fd-b165b961c660.xhtml)中开发的bugzot应用程序相关的代码示例可以在`chapter06`目录下找到。
- en: 'The code samples can be cloned by running the following command:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下命令来克隆代码示例：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This includes the instructions regarding how to run the code. In addition to
    that, this chapter requires the installation of a Python library, which allows
    us to simplify the writing of our test code. The library and all the related dependencies
    can be installed by running the following command:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括了关于如何运行代码的说明。除此之外，本章还需要安装一个Python库，它可以简化我们的测试代码编写。可以通过运行以下命令来安装该库和所有相关依赖项：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The importance of testing
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试的重要性
- en: As developers, we usually aim at working on challenging problems, trying to
    navigate through the complex connections, and coming up with a solution. But how
    many times do we care to look at all the possible ways through which our code
    can fail to provide the expected outcome? As much as it is hard to try to break
    something that we as developers have written ourselves, it forms one of the most
    important aspects of the development cycle.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，我们通常致力于解决具有挑战性的问题，试图穿越复杂的连接，并提出解决方案。但是我们有多少次关心过我们的代码可能失败以提供预期的结果的所有可能方式？尽管我们作为开发人员自己编写的东西很难去尝试破坏，但它构成了开发周期中最重要的方面之一。
- en: 'This is the time when testing becomes an important aspect of the development
    life cycle. The aim of application testing can be summed up by answering the following
    questions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是测试成为开发生命周期中重要方面的时候。应用程序测试的目标可以通过回答以下问题来总结：
- en: Are the individual components in the code performing as per the expectations?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码中的个别组件是否按预期执行？
- en: Does the flow of the code from ...
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码的流程是否从...
- en: The different kinds of testing
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同种类的测试
- en: When the focus is on shipping a quality application, whether it be for general
    customers or for an enterprise, there are multiple kinds of testing that need
    to be performed. These testing techniques may start at different points in the
    development life cycle of the application, and hence are categorized accordingly.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当重点是交付质量应用程序时，无论是为一般客户还是企业，都需要执行多种测试。这些测试技术可能从应用程序开发生命周期的不同阶段开始，因此被相应地分类。
- en: In this section, instead of focusing on some testing methodologies that can
    be grouped as black-box testing and white-box testing, we will rather focus our
    effort on understanding the terminology associated with the developers. So, let's
    take a look.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们不是专注于一些可以归为黑盒测试和白盒测试的测试方法，而是更加专注于理解与开发人员相关的术语。所以，让我们来看一下。
- en: Unit testing
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: When we start to build our application, we have the application divided into
    a number of submodules. These submodules contain a number of classes or methods
    that interact together to achieve a certain output.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始构建应用程序时，我们将应用程序划分为多个子模块。这些子模块包含了许多相互交互的类或方法，以实现特定的输出。
- en: For the correct output to be generated, all the individual classes and methods
    need to work correctly, otherwise the results will differ.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成正确的输出，所有个别类和方法都需要正常工作，否则结果将有所不同。
- en: Now, when our target is to check the correctness of the individual components
    of a code base, we usually write tests that target these individual components
    independently from the other components of the application. This kind of testing,
    where an individual component is tested independently of the other components,
    is known as **unit testing**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们的目标是检查代码库中个别组件的正确性时，我们通常编写针对这些个别组件的测试，独立于应用程序的其他组件。这种测试，其中一个个别组件独立于其他组件进行测试，被称为**单元测试**。
- en: To state this briefly, the following are some ...
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，以下是一些...
- en: Integration testing
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试
- en: An application is not merely complete once all of its individual components
    have been written. To produce any meaningful output, these individual components
    need to interact with each other in different possible ways based upon the type
    of input that has been provided. To have a complete check of the application code
    base, the components that make up the application not only need to be tested in
    isolation, but also when they are interacting with each other.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个应用程序不仅仅是在所有单独的组件都编写完成后就完成了。为了产生任何有意义的输出，这些单独的组件需要根据提供的输入类型以不同的方式相互交互。为了完全检查应用程序代码库，组成应用程序的组件不仅需要在隔离状态下进行测试，而且在它们相互交互时也需要进行测试。
- en: Integration testing starts once the application is out of the unit testing phase.
    Inside integration testing, individual components are made to interact with each
    other through the use of interfaces, and this interaction is then tested to see
    if the results being produced are according to the expectations or not.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试是在应用程序经过单元测试阶段后开始的。在集成测试中，通过接口使单个组件相互交互，然后测试这种交互是否符合预期的结果。
- en: During the integration testing phase, not only the interaction between the components
    of the application is tested, but also the interaction between the components
    and any other external service, such as third-party APIs and databases.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在集成测试阶段，不仅测试应用程序组件之间的交互，还测试组件与任何其他外部服务（如第三方API和数据库）之间的交互。
- en: 'In brief, here are some of the features of integration testing:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，以下是一些集成测试的特点：
- en: '**Focus on testing the interfaces:** Since the different components of an application
    interact with each other through the use of interfaces exposed by the components,
    the role of integration testing is to validate that these interfaces are working
    as expected'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专注于测试接口：**由于应用程序的不同组件通过组件提供的接口相互交互，集成测试的作用是验证这些接口是否按预期工作。'
- en: '**Usually starts after unit testing:** Once the components have passed the
    unit tests, they are then integrated together to connect with each other and integration
    testing is then performed'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通常在单元测试之后开始：**一旦组件通过了单元测试，它们就会被集成在一起相互连接，然后进行集成测试'
- en: '**Code flow testing:** In contrast to unit testing, where the individual components
    are tested in isolation and any dependency on any other component is usually mocked,
    the integration tests usually focus on the flow of data from one component to
    another, and hence also check the outcome of the code flow'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码流测试：**与单元测试相反，单元测试通常侧重于从一个组件到另一个组件的数据流，因此还检查代码流的结果'
- en: As we can see, integration testing forms an important part of the application
    testing process, where the aim is to validate if the different components of an
    application are able to interact with each other properly or not.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，集成测试是应用测试过程的重要组成部分，其目的是验证应用程序的不同组件是否能够正确地相互交互。
- en: Once integration testing is complete, the next phase in the testing process
    is to move to system testing, followed by the final stage of acceptance testing.
    The following image shows the flow of testing from the Unit testing stage to the
    acceptance testing stage and the different kinds of testing that may happen during
    the development of the application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦集成测试完成，测试过程的下一个阶段是进行系统测试，然后是最终的验收测试阶段。以下图片显示了从单元测试阶段到验收测试阶段的测试流程以及在应用程序开发过程中可能发生的不同类型的测试。
- en: '![](Images/41db4532-20e4-4094-9b2e-70b3b66500e8.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/41db4532-20e4-4094-9b2e-70b3b66500e8.png)'
- en: To keep the length of this book in check, we will skip over the explanation
    of these two testing techniques and instead focus the rest of this chapter on
    implementing some hands-on unit testing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了控制本书的长度，我们将跳过对这两种测试技术的解释，而是将本章的其余部分专注于实施一些实际的单元测试。
- en: For the rest of this chapter, we will keep our focus on the unit testing practices
    and how we can implement them in our demo application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，我们将专注于单元测试实践以及如何在我们的演示应用程序中实现它们。
- en: Building an application with testing in mind
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以测试为导向构建应用程序
- en: So, we now know that testing is important and we've also got to know about the
    different kinds of testing. But are there any important things that we need to
    do while building our application so that we are able to test it properly?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们现在知道测试很重要，也了解了不同类型的测试。但是在构建应用程序时，我们需要做一些重要的事情，以便能够正确地测试它吗？
- en: 'The answer to this question is a bit complicated. Although we can easily write
    the code in any particular manner we desire, and subject the code to testing through
    a number of procedures, for example, unit testing, it is still better to follow
    a general set of guidelines so that the code can be tested easily and efficiently.
    So, let''s go ahead and take a look at the guidelines:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个问题的答案有点复杂。虽然我们可以轻松地按照任何我们想要的特定方式编写代码，并通过多种程序进行测试，例如单元测试，但最好还是遵循一般的一套指南，以便能够轻松高效地测试代码。因此，让我们继续看一下这些指南：
- en: '**Every component should have one responsibility:** For testing to be efficient
    and to cover ...'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个组件都应该有一个责任：为了测试的高效性和覆盖率...
- en: Test-driven development
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: Test-driven development is a software development process where the process
    of software development involves the writing of tests for the individual requirements
    first, and then building or improving methods that will pass those tests. This
    kind of process usually benefits in terms of producing an application with a smaller
    number of defects than it would have if the tests would have been written once
    the components were developed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 测试驱动开发是一种软件开发过程，其中软件开发的过程首先涉及为单个需求编写测试，然后构建或改进能够通过这些测试的方法。这种过程通常有利于生成具有比在组件开发后编写测试时更少缺陷的应用程序。
- en: 'During test-driven development, the following steps are followed:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试驱动开发过程中，遵循以下步骤：
- en: '**Add a test:** Once the requirements are specified, the developers start by
    writing a new test for a new component of improvement in the previous component.
    This test sets the expected outcome from the particular component.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个测试：一旦需求被指定，开发人员就会开始为先前组件的改进或新组件编写新的测试。这个测试设置了特定组件的预期结果。
- en: '**Run the tests to see if the new test fails:** When the new test has been
    added, the tests are run against the code to see if the new test fails for the
    expected reasons. This assures us that the test works as expected and does not
    pass in unfavorable conditions.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试以查看新测试是否失败：当新测试被添加后，对代码运行测试，以查看新测试是否因预期原因而失败。这可以确保测试按预期工作，并且在不利条件下不会通过。
- en: '**Write/modify the component:** Once the tests have been run and an expected
    result can be seen, we move on to either writing the new component or modifying
    the existing component so that the newly added test case passes.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写/修改组件：一旦测试运行并且可以看到预期结果，我们就会继续编写新组件或修改现有组件，以使新添加的测试用例通过。
- en: '**Run tests:** Once the required modification has been made for the test to
    pass, the test suite is made to run again to see if the previously failing test
    now passes or not. This assures that the modifications are working as expected.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试：一旦对测试进行了必要的修改以使测试通过，就会再次运行测试套件，以查看之前失败的测试现在是否通过。这可以确保修改按预期工作。
- en: '**Refactor:** As we progress in the development life cycle of the application
    following the TDD process, there will be times when there will be tests that will
    be duplicated or components that might be playing the same responsibility. To
    remove these issues, constant refactoring is required so as to reduce the duplication.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构：随着应用程序开发生命周期的进展，会有时候会出现重复的测试或者可能承担相同责任的组件。为了消除这些问题，需要不断进行重构以减少重复。
- en: Now, we have quite an understanding about how much the testing plays an important
    role in the development of any successful application, and also about how to write
    code that can be tested easily. Now, it's time for us to get our hands dirty and
    start writing some tests for the application that we built in [chapter 6](68cb369b-628d-4950-91fd-b165b961c660.xhtml),
    *Example – Building BugZot*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经对测试在任何成功应用程序的开发中扮演重要角色有了相当的了解，也知道如何编写易于测试的代码。现在，是时候开始为我们在[第6章](68cb369b-628d-4950-91fd-b165b961c660.xhtml)中构建的应用程序编写一些测试了。
- en: Writing unit tests
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写单元测试
- en: So, it's time to start writing our unit tests. The Python library provides us
    with a lot of options to write tests and that too, quiet easily. We are usually
    spoilt for choice. The library in itself provides a unit testing module which
    can be used to write unit tests, and then there is no shortage of the frameworks
    that we can use to make our life easier while writing unit tests.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在是时候开始编写我们的单元测试了。Python库为我们提供了许多编写测试的选项，而且非常容易。我们通常会被选择所困扰。该库本身提供了一个单元测试模块，可用于编写单元测试，而且我们可以使用各种框架来更轻松地编写单元测试。
- en: So, let's first take a look at writing some simple unit tests with the Python
    `unittest` module, and then we will move on to writing unit tests for our application
    using one of the renowned Python testing frameworks.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们首先看一下如何使用Python的`unittest`模块编写一些简单的单元测试，然后我们将继续使用著名的Python测试框架为我们的应用程序编写单元测试。
- en: Writing unit tests with Python unittest
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python unittest编写单元测试
- en: Python 3 provides a really nice and quite a featured library that allows us
    to write unit tests for our applications. This library, known as `unittest`, is
    used for writing unit tests that may range from the complexity of very simple
    tests to very complex tests involving a proper setup before a unit test is made
    to run.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3提供了一个非常好的、功能齐全的库，允许我们为应用程序编写单元测试。这个名为`unittest`的库用于编写单元测试，可以从非常简单的测试的复杂性到在运行单元测试之前进行适当设置的非常复杂的测试。
- en: 'Some of the features that we see supported in the Python `unittest` library
    are as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Python `unittest`库支持的一些功能包括：
- en: '**Object-oriented:** The library facilitates the writing of unit tests in an
    object-oriented manner. What this means is that, the objects are written in an
    object-oriented form through the use of classes and methods. This in no sense
    means that only object-oriented code can be tested with the library. The library
    does support testing object-oriented and non-object-oriented code alike.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向对象：该库以面向对象的方式简化了单元测试的编写。这意味着，通过类和方法以面向对象的形式编写对象。这绝不意味着只有面向对象的代码才能使用该库进行测试。该库支持测试面向对象和非面向对象的代码。
- en: '**Ability for test fixtures:** Some of the tests may require the environment
    to be set up in a certain way before the test is run and then cleaned up properly
    once the test completes execution. This is known as test fixture and is fully
    supported by the Python `unittest` library.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试夹具的能力：一些测试可能需要在运行测试之前以某种方式设置环境，并在测试完成执行后进行适当的清理。这称为测试夹具，Python的`unittest`库完全支持这一特性。
- en: '**Ability to write test suites:** The library provides the functionality for
    writing fully featured test suites that are composed of multiple test cases. The
    results of a test suite are aggregated and displayed at once.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**能够编写测试套件：**该库提供了编写完整功能的测试套件的功能，由多个测试用例组成。测试套件的结果被汇总并一次性显示。'
- en: '**Built-in test runner:** A test runner is used to orchestrate the tests and
    compile the results of the executed tests to generate a report. The library provides
    a built-in test runner to achieve this functionality.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内置测试运行器：**测试运行器用于编排测试并编译执行测试的结果以生成报告。该库提供了一个内置的测试运行器来实现这个功能。'
- en: 'Now, let''s take a look at following code, which we will use to write our unit
    tests on:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下以下代码，我们将使用它来编写我们的单元测试：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this code, we have defined some functions that aim to help us with the generation
    of the password hash that can than be safely stored inside the database.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们定义了一些函数，旨在帮助我们生成可以安全存储在数据库中的密码哈希。
- en: Now, our aim is to utilize the Python `unittest` library to write some unit
    tests for the preceding code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的目标是利用Python的`unittest`库为前面的代码编写一些单元测试。
- en: 'The following code aims to implement a small set of unit tests for the passwords
    helper module:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码旨在为密码助手模块实现一小组单元测试：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We created a simple file for running our unit tests. Now, let's take a look
    at what this file does.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个简单的文件来运行我们的单元测试。现在，让我们看看这个文件做了什么。
- en: Firstly, we import the functions that we want to test from their required module.
    For this example, we have these functions defined inside a file named `helpers.py`
    from which we are going to import them. The next import gets us the Python unittest
    library.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从所需模块中导入我们要测试的函数。在本例中，我们将从名为`helpers.py`的文件中导入这些函数。接下来的导入让我们获得了Python的unittest库。
- en: 'Once we have the required things imported, the next step is to start writing
    the unit tests. To do this, we start with defining a class named `TestPasswordHelpers`
    that inherits from the `unittest.TestCase` class. The class is used to define
    a set of test cases that we may want to execute, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们导入了所需的内容，下一步就是开始编写单元测试。为此，我们首先定义一个名为`TestPasswordHelpers`的类，它继承自`unittest.TestCase`类。该类用于定义我们可能想要执行的一组测试用例，如下所示：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Inside the class definition, we then move on to defining individual test cases
    for the methods that we want to test. The methods that define a test case must
    start with the word `test` so as to signify that this particular method is a test
    and needs to be executed by the test runner. For example, the method that is responsible
    for testing our `strip_password` method is named as `test_strip_password()`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在类定义内部，我们继续为我们想要测试的方法定义单独的测试用例。定义测试用例的方法必须以单词`test`开头，以表明这个特定的方法是一个测试，并且需要由测试运行器执行。例如，负责测试我们的`strip_password`方法的方法被命名为`test_strip_password()`：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Inside the method definition, we are using assertions to validate if the output
    of a particular method is what we expected or not. For example, the `assertEqual`
    method is used to assert whether the parameter 1 matches with the parameter 2
    or not:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法定义内部，我们使用断言来验证特定方法的输出是否符合我们的预期。例如，`assertEqual`方法用于断言参数1是否与参数2匹配：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once these tests have been defined, the next thing to do is define an entry
    point for our test file when it is run through the Terminal. This is done by calling
    the `unittest.main()` method from the entry point. Once the call is made, the
    test cases mentioned in the file are run and an output is displayed, as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些测试被定义，下一步就是定义一个入口点，用于在终端运行我们的测试文件。这是通过从入口点调用`unittest.main()`方法来完成的。一旦调用完成，文件中提到的测试用例将被运行，并显示输出，如下所示：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is as easy as it can get when you want to write unit tests with Python.
    Now, it's time for us to move on to something that is more important. Let's write
    some unit tests for our demo application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要用Python编写单元测试时，这是最简单的方法。现在，是时候转向更重要的事情了。让我们为我们的演示应用程序编写一些单元测试。
- en: Writing unit tests with pytest
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pytest编写单元测试
- en: As we discussed, writing unit tests in Python can be done with a number of options
    at our disposal. For example, in the previous section, we utilized Python's `unittest`
    library to write our unit tests. In this section, we will move on to writing unit
    tests with `pytest`, which is a framework for writing unit tests for applications.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们讨论的那样，在Python中编写单元测试可以利用我们手头的许多选项。例如，在前一节中，我们利用了Python的`unittest`库来编写我们的单元测试。在本节中，我们将继续使用`pytest`来编写单元测试，这是一个用于编写应用程序单元测试的框架。
- en: But what benefits does `pytest` provide that mean we should move toward it?
    Why can't we just stick with the `unittest` library that comes bundled with Python?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，`pytest`提供了哪些好处，使我们应该转向它呢？为什么我们不能坚持使用Python捆绑的`unittest`库呢？
- en: 'Although the `unittest` library provides us with a lot of flexibility coupled
    with the ease of use, there are still a number of improvements that `pytest` brings
    to the table, so let''s take a look at what these improvements are:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`unittest`库为我们提供了许多灵活性和易用性，但`pytest`仍然带来了一些改进，让我们来看看这些改进是什么：
- en: Let's set up pytest
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置pytest
- en: 'The `pytest` framework is a standalone framework that comes as a separate library
    outside of standardized Python distribution. Before we can start writing tests
    using the `pytest`, we need to install `pytest`. Getting `pytest` installed is
    not a big task, and can be done easily by running the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest`框架是一个独立的框架，作为标准化Python发行版之外的一个单独库。在我们开始使用`pytest`编写测试之前，我们需要安装`pytest`。安装`pytest`并不是一件大事，可以通过运行以下命令轻松完成：'
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, before we start writing tests for our application, let''s first create
    a new directory named *tests* under our application directory and at the same
    level as where our `run.py` resides, to store these test cases by running the
    following command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们开始为应用程序编写测试之前，让我们首先在应用程序目录下创建一个名为*tests*的新目录，并与`run.py`位于同一级别，以存储这些测试用例，通过运行以下命令来创建：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, it's time to write our first test with `pytest`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候用`pytest`编写我们的第一个测试了。
- en: Writing our first test with pytest
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pytest编写我们的第一个测试
- en: In our demo application, we defined a number of models that will be used to
    store the data in the database. As our first test, let's target writing a test
    case for our models.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的演示应用程序中，我们定义了一些模型，用于在数据库中存储数据。作为我们的第一个测试，让我们着手编写一个针对我们模型的测试用例。
- en: 'The following code snippet shows a simple test case for our `User` model:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了我们的`User`模型的简单测试用例：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Writing functional tests with pytest
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pytest编写功能测试
- en: The `pytest` framework, along with its unique fixtures and the power of `flask`,
    allows us to write functional tests easily for our application. This allows us
    to test the API endpoints we have built with quite some ease.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest`框架以及其独特的装置和`flask`的强大功能，使我们能够轻松地为我们的应用程序编写功能测试。这使我们能够相当轻松地测试我们构建的API端点。'
- en: Let's take a look at one of the sample tests for our index API endpoint, and
    then we will deep dive into how we wrote the test.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下我们的索引API端点的一个示例测试，然后我们将深入了解我们如何编写测试。
- en: 'The following piece of code shows a sample test case written using `pytest`
    to test the index API endpoint:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了使用`pytest`编写的简单测试用例，用于测试索引API端点：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This was a very simple functional test that we wrote for testing our index
    API route to see if it was working properly or not. Now, let''s take a look at
    what we did here to get this functional test working:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们为测试我们的索引API路由编写的一个非常简单的功能测试，以查看它是否正常工作。现在，让我们看看我们在这里做了什么来使这个功能测试起作用：
- en: The first few lines of code are more or less general, where we import some of
    the libraries that we will be requiring to build our tests.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 前几行代码或多或少是通用的，我们导入了一些构建测试所需的库。
- en: The interesting work starts from the `test_client()` fixture we have built.
    The fixture is used to get us a flask-based test client that we can use to test
    our application endpoints to see if they are working correctly or not.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的工作从我们构建的`test_client()`装置开始。这个装置用于为我们获取一个基于flask的测试客户端，我们可以用它来测试我们的应用程序端点，以查看它们是否正常工作。
- en: 'Since our application is a database-oriented application that will require
    a database to function correctly, the first thing we need to do is set up a database
    configuration for our application. For the purpose of testing, we can settle with
    an SQLite3 database that can be created quite easily in most of the operating
    systems. The following call provides us with the database we will be using for
    our testing purposes:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用程序是一个面向数据库的应用程序，需要数据库才能正常运行，我们需要为应用程序设置数据库配置。为了测试目的，我们可以使用在大多数操作系统中都可以轻松创建的SQLite3数据库。以下调用为我们提供了我们将用于测试目的的数据库：
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The call returns a file descriptor to the database and a URI that we will store
    in the application config.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 调用返回一个文件描述符到数据库和一个URI，我们将其存储在应用程序配置中。
- en: Once the database has been created, the next thing is to tell our application
    that it is running in a testing environment so that the error handling inside
    the application is disabled to improve the output of the tests. This is done easily
    by setting the `TESTING` flag inside the application configuration to `True`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库创建完成后，下一步是告诉我们的应用程序它正在测试环境中运行，以便禁用应用程序内部的错误处理，以改善测试的输出。这很容易通过将应用程序配置中的`TESTING`标志设置为`True`来实现。
- en: 'Flask provides us with a simple test client that we can use to run our application
    tests. This client can be obtained by making a call to the application `test_client()`
    method, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Flask为我们提供了一个简单的测试客户端，我们可以使用它来运行应用程序测试。通过调用应用程序的`test_client()`方法可以获得此客户端，如下所示：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Once the test client is obtained, we need to set up the application context,
    which is done through calling the `app_context()` method of the Flask application.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦获得了测试客户端，我们需要设置应用程序上下文，这是通过调用Flask应用程序的`app_context()`方法来实现的。
- en: With the application context established, we create our database by calling
    the `db.create_all()` method.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 建立应用程序上下文后，我们通过调用`db.create_all()`方法创建我们的数据库。
- en: 'Once our application context is set up and a database has been created, the
    next thing we do is start the testing. This is achieved by yielding the test client:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置好应用程序上下文并创建了数据库，接下来要做的是开始测试。这是通过产生测试客户端来实现的：
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once this is done, the tests now execute and control transfers to the `test_index_route()`
    method where we simply try to load the index route by calling the `get` method
    of the `test_client`, as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，测试现在执行，控制权转移到`test_index_route()`方法，我们只需尝试通过调用`test_client`的`get`方法加载索引路由，如下所示：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once this is done, we check whether the API provided a valid response or not
    by checking the HTTP status code of the response and validating that it was a
    `200`, SUCCESS or not, as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们通过检查响应的HTTP状态码并验证其是否为`200`来检查API是否提供了有效的响应，如下所示：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once the test finishes executing, the control transfers back to the fixture
    and we perform our cleanup by closing the database file descriptor and removing
    the database file, as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦测试执行完成，控制权就会转移到测试装置，我们通过关闭数据库文件描述符和删除数据库文件来进行清理，如下所示：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Quite simple, wasn't it? That's how we can write a simple functional test with
    `pytest` and `Flask`. We can even write tests that handle the user authentication
    and database modifications this way, but we will leave this as an exercise for
    you as the reader.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 相当简单，不是吗？这就是我们如何使用`pytest`和`Flask`编写简单的功能测试。我们甚至可以编写处理用户身份验证和数据库修改的测试，但我们将把这留给您作为读者来练习。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we took a look at how testing forms an important aspect of
    the application development project and why it is necessary. Here, we took a look
    at the different types of testing that are usually employed during the development
    life cycle and what the uses of different techniques are. We then moved on to
    taking a look at how we can craft our code in a way that makes testing an easy
    and effective process. Moving on, we started digging deeper into the Python language
    to see what facilities it provides for writing up tests. Here, we discovered how
    to use the Python `unittest` library to write unit tests, and how to run them.
    Moving on, we took a look at how we can utilize testing frameworks like `pytest`
    to write test cases ...
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到测试如何成为应用开发项目中重要的一部分，以及为什么它是必要的。在这里，我们看了通常在开发生命周期中使用的不同类型的测试以及不同技术的用途。然后，我们继续看如何以一种使测试变得简单和有效的方式来编写我们的代码。接着，我们开始深入研究Python语言，看看它提供了哪些用于编写测试的工具。在这里，我们发现了如何使用Python的unittest库来编写单元测试，以及如何运行它们。然后，我们看了如何利用像pytest这样的测试框架来编写测试用例...
- en: Questions
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the differences between unit tests and functional tests?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单元测试和功能测试之间有什么区别？
- en: How can we write unit test suites using Python `unittest`?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何使用Python的unittest编写单元测试套件？
- en: What is the role of fixtures in `pytest`?
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在pytest中，固定装置的作用是什么？
- en: What are scopes in `pytest` while writing fixtures?
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编写固定装置时，pytest中的作用域是什么？
