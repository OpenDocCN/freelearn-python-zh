- en: Installing the Required Software and Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装所需的软件和工具
- en: 'In this chapter, we will start our journey towards creating RESTful Web Services
    with Python and its most popular web framework: Django. Python is one of the most
    popular and versatile programming languages. There are thousands of Python packages,
    which allow you to extend Python capabilities to any kind of domain you can imagine.
    You can work with Django and packages to easily build simple and complex RESTful
    Web Services with Python that can run on your favorite platform.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始使用 Python 和其最受欢迎的 Web 框架 Django 来创建 RESTful Web 服务的旅程。Python 是最受欢迎和最灵活的编程语言之一。有成千上万的
    Python 包，允许您将 Python 的能力扩展到您能想象到的任何领域。您可以使用 Django 和包轻松构建简单和复杂的 RESTful Web 服务，这些服务可以在您喜欢的平台上运行。
- en: 'We will leverage your existing knowledge of Python and all of its packages
    to code the different pieces of your RESTful Web Services and their ecosystem.
    We will use object-oriented features to create code that is easier to maintain,
    understand, and reuse. We don''t need to learn another programming language, we
    can use the one we already know and love: Python.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用您现有的 Python 和其所有包的知识来编写您 RESTful Web 服务及其生态系统的不同部分。我们将使用面向对象特性来创建易于维护、理解和重用的代码。我们不需要学习另一种编程语言，我们可以使用我们已知并喜爱的语言：Python。
- en: 'In this chapter, we will install and configure the environments and the required
    software and tools to create RESTful Web Services with Django and Django REST
    framework. We will learn the necessary steps in Linux, macOS, and Windows. We
    will gain an understanding of the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将安装和配置用于使用 Django 和 Django REST 框架创建 RESTful Web 服务的环境和所需的软件和工具。我们将学习
    Linux、macOS 和 Windows 中的必要步骤。我们将了解以下内容：
- en: Creating a virtual environment with Python 3.x and PEP 405
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 3.x 和 PEP 405 创建虚拟环境
- en: Understanding the directory structure for a virtual environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解虚拟环境的目录结构
- en: Activating the virtual environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激活虚拟环境
- en: Deactivating the virtual environment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭虚拟环境
- en: Installing Django and Django REST framework in an isolated environment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在隔离环境中安装 Django 和 Django REST 框架
- en: Creating an app with Django
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Django 创建应用
- en: Understanding Django folders, files, and configurations
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Django 文件夹、文件和配置
- en: Installing Curl
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Curl
- en: Installing HTTPie
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 HTTPie
- en: Installing the Postman REST client
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Postman REST 客户端
- en: Installing Stoplight
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Stoplight
- en: Installing iCurlHTTP
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 iCurlHTTP
- en: Creating a virtual environment with Python 3.x and PEP 405
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 3.x 和 PEP 405 创建虚拟环境
- en: 'Throughout this book, we will be working with different packages and libraries
    to create RESTful Web Services, and therefore it is convenient to work with Python
    virtual environments. Python 3.3 introduced lightweight virtual environments and
    they were improved in Python 3.4\. We will work with these virtual environments,
    and therefore you will need Python 3.4 or greater. You can read more information
    about PEP 405 Python Virtual Environment, that introduced the `venv` module, here:
    [https://www.python.org/dev/peps/pep-0405](https://www.python.org/dev/peps/pep-0405).
    All the examples in this book were tested on Python 3.6.2 on Linux, macOS, and
    Windows.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用不同的包和库来创建 RESTful Web 服务，因此使用 Python 虚拟环境是方便的。Python 3.3 引入了轻量级虚拟环境，并在
    Python 3.4 中得到了改进。我们将使用这些虚拟环境，因此您需要 Python 3.4 或更高版本。您可以在[https://www.python.org/dev/peps/pep-0405](https://www.python.org/dev/peps/pep-0405)上阅读有关
    PEP 405 Python 虚拟环境的更多信息，该 PEP 引入了 `venv` 模块。本书中的所有示例都在 Linux、macOS 和 Windows
    上的 Python 3.6.2 上进行了测试。
- en: In case you decide to use the popular `virtualenv` ([https://pypi.python.org/pypi/virtualenv](https://pypi.python.org/pypi/virtualenv))
    third-party virtual environment builder or the virtual environment options provided
    by your Python IDE, you just have to make sure that you activate your virtual
    environment with the appropriate mechanism whenever it is necessary to do so,
    instead of following the step explained to activate the virtual environment generated
    with the `venv` module integrated in Python.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定使用流行的第三方虚拟环境构建工具 `virtualenv` ([https://pypi.python.org/pypi/virtualenv](https://pypi.python.org/pypi/virtualenv))
    或您 Python IDE 提供的虚拟环境选项，您只需确保在需要时使用适当的机制激活您的虚拟环境，而不是遵循使用 Python 内置的 `venv` 模块生成的虚拟环境的激活步骤。
- en: Each virtual environment we create with `venv` is an isolated environment and
    it will have its own independent set of installed Python packages in its site
    directories (folders). When we create a virtual environment with `venv` in Python
    3.4 and greater, `pip` is included in the new virtual environment. In Python 3.3,
    it was necessary to manually install `pip` after creating the virtual environment.
    Note that the instructions provided are compatible with Python 3.4 or greater,
    including Python 3.6.2.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`venv`创建的每个虚拟环境都是一个隔离的环境，并且它将在其site目录（文件夹）中拥有自己独立的一组已安装的Python包。当我们使用Python
    3.4及更高版本中的`venv`创建虚拟环境时，`pip`将包含在新的虚拟环境中。在Python 3.3中，创建虚拟环境后需要手动安装`pip`。请注意，提供的指令与Python
    3.4或更高版本兼容，包括Python 3.6.2。
- en: In order to create a lightweight virtual environment, the first step is to select
    the target folder or directory for it. The following is the path we will use in
    the example for Linux and macOS.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个轻量级的虚拟环境，第一步是选择用于它的目标文件夹或目录。以下是在示例中我们将使用的Linux和macOS的路径。
- en: 'The target folder for the virtual environment will be the `HillarDjangoREST/01`
    folder within our home directory. For example, if our home directory in macOS
    or Linux is `/Users/gaston`, the virtual environment will be created within `/Users/gaston/HillarDjangoREST/01`.
    You can replace the specified path with your desired path in each command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境的目标文件夹将是我们主目录中的`HillarDjangoREST/01`文件夹。例如，如果我们的macOS或Linux中的主目录是`/Users/gaston`，虚拟环境将在`/Users/gaston/HillarDjangoREST/01`中创建。您可以在每个命令中将指定的路径替换为您想要的路径：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is the path we will use in the example for Windows. The target
    folder for the virtual environment will be the `HillarDjangoREST\01` folder within
    our user profile folder. For example, if our user profile folder is `C:\Users\gaston`,
    the virtual environment will be created within `C:\Users\gaston\HillarDjangoREST\01`.
    You can replace the specified path with your desired path in each command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在示例中我们将使用的Windows的路径。虚拟环境的目标文件夹将是我们用户配置文件中的`HillarDjangoREST\01`文件夹。例如，如果我们的用户配置文件是`C:\Users\gaston`，虚拟环境将在`C:\Users\gaston\HillarDjangoREST\01`中创建。您可以在每个命令中将指定的路径替换为您想要的路径：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In Windows PowerShell, the previous path would be as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows PowerShell中，之前的路径如下：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, we will create a new virtual environment with `venv`. In order to do so,
    we have to use the `-m` option followed by the `venv` module name and the desired
    path to make Python run this module as a script and create a virtual environment
    in the specified path. The instructions are different depending on the platform
    in which we are creating the virtual environment.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`venv`创建一个新的虚拟环境。为了做到这一点，我们必须使用`-m`选项，后跟`venv`模块名称和所需的路径，以便Python将此模块作为脚本运行并创建指定路径中的虚拟环境。根据我们创建虚拟环境的平台，指令可能会有所不同。
- en: 'Open Terminal in Linux or macOS and execute the following command to create
    a virtual environment:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux或macOS中打开终端并执行以下命令以创建虚拟环境：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In Windows, in Command Prompt, execute the following command to create a virtual
    environment:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，在命令提示符中执行以下命令以创建虚拟环境：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you want to work with Windows PowerShell, execute the following command
    to create a virtual environment:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用Windows PowerShell，请执行以下命令以创建虚拟环境：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: None of the previous commands produce any output. The script created the specified
    target folder and installed `pip` by invoking `ensurepip` because we didn't specify
    the `--without-pip` option.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的所有命令都不会产生任何输出。脚本创建了指定的目标文件夹，并通过调用`ensurepip`安装了`pip`，因为我们没有指定`--without-pip`选项。
- en: Understanding the directory structure for a virtual environment
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解虚拟环境的目录结构
- en: The specified target folder has a new directory tree that contains Python executable
    files and other files that indicate it is a PEP405 virtual environment.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 指定的目标文件夹有一个新的目录树，其中包含Python可执行文件和其他指示它是PEP405虚拟环境的文件。
- en: 'In the root directory for the virtual environment, the `pyenv.cfg` configuration
    file specifies different options for the virtual environment and its existence
    is an indicator that we are in the root folder for a virtual environment. In Linux
    and macOS, the folder will have the following main subfolders: `bin`, `include`,
    `lib`, `lib/python3.6`, and `lib/python3.6/site-packages`. In Windows, the folder
    will have the following main subfolders: `Include`, `Lib`, `Lib\site-packages`,
    and `Scripts`. The directory trees for the virtual environment in each platform
    are the same as the layout of the Python installation on these platforms.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟环境的根目录中，`pyenv.cfg` 配置文件指定了虚拟环境的不同选项，其存在表明我们位于虚拟环境的根文件夹中。在 Linux 和 macOS
    上，该文件夹将包含以下主要子文件夹：`bin`、`include`、`lib`、`lib/python3.6` 和 `lib/python3.6/site-packages`。在
    Windows 上，文件夹将包含以下主要子文件夹：`Include`、`Lib`、`Lib\site-packages` 和 `Scripts`。每个平台上的虚拟环境目录树结构与这些平台上的
    Python 安装布局相同。
- en: 'The following diagram shows the folders and files in the directory trees generated
    for the `01` virtual environments in macOS and Linux platforms:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了在 macOS 和 Linux 平台上为 `01` 虚拟环境生成的目录树中的文件夹和文件：
- en: '![](img/adb56dfb-d546-43cc-998a-5c3e5ebadb48.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/adb56dfb-d546-43cc-998a-5c3e5ebadb48.png)'
- en: 'The following diagram shows the main folders in the directory trees generated
    for the virtual environment in Windows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了为 Windows 平台虚拟环境生成的目录树中的主要文件夹：
- en: '![](img/db27a46c-37e9-4d31-961d-b4dc277c4309.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/db27a46c-37e9-4d31-961d-b4dc277c4309.png)'
- en: After we activate the virtual environment, we will install third-party packages
    into the virtual environment and the modules will be located in the `lib/python3.6/site-packages`
    or `Lib\site-packages` folder, based on the platform. The executables will be
    copied in the `bin` or `Scripts` folder, based on the platform. The packages we
    install won't make changes to other virtual environments or our base Python environment.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 激活虚拟环境后，我们将安装第三方软件包到虚拟环境中，模块将位于 `lib/python3.6/site-packages` 或 `Lib\site-packages`
    文件夹中，具体取决于平台。可执行文件将被复制到 `bin` 或 `Scripts` 文件夹中，具体取决于平台。我们安装的软件包不会更改其他虚拟环境或我们的基础
    Python 环境。
- en: Activating the virtual environment
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 激活虚拟环境
- en: Now that we have created a virtual environment, we will run a platform-specific
    script to activate it. After we activate the virtual environment, we will install
    packages that will only be available in this virtual environment. This way, we
    will work with an isolated environment in which all the packages we install won't
    affect our main Python environment.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个虚拟环境，我们将运行一个特定平台的脚本以激活它。激活虚拟环境后，我们将安装仅在此虚拟环境中可用的软件包。这样，我们将在一个隔离的环境中工作，其中我们安装的所有软件包都不会影响我们的主要
    Python 环境。
- en: 'Note that the results of this command will be accurate if you don''t start
    a different shell than the default shell in the terminal session. If you have
    doubts, check your terminal configuration and preferences. Run the following command
    in the Terminal in Linux or macOS:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果您的终端会话中没有启动除默认 shell 之外的其他 shell，则此命令的结果将是准确的。如果您有疑问，请检查您的终端配置和首选项。在 Linux
    或 macOS 的终端中运行以下命令：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The command will display the name of the shell you are using in the Terminal.
    In macOS, the default is `/bin/bash` and this means you are working with the `bash`
    shell. Depending on the shell, you must run a different command to activate the
    virtual environment in Linux or macOS.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将显示您在终端中使用的 shell 名称。在 macOS 上，默认为 `/bin/bash`，这意味着您正在使用 `bash` shell。根据
    shell 的不同，您必须在 Linux 或 macOS 上运行不同的命令来激活虚拟环境。
- en: 'If your Terminal is configured to use the `bash` shell in Linux or macOS, run
    the following command to activate the virtual environment. The command also works
    for the `zsh` shell:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的终端配置为在 Linux 或 macOS 上使用 `bash` shell，请运行以下命令以激活虚拟环境。该命令也适用于 `zsh` shell：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If your Terminal is configured to use either the `csh` or `tcsh` shell, run
    the following command to activate the virtual environment:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的终端配置为使用 `csh` 或 `tcsh` shell，请运行以下命令以激活虚拟环境：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If your Terminal is configured to use the `fish` shell, run the following command
    to activate the virtual environment:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的终端配置为使用 `fish` shell，请运行以下命令以激活虚拟环境：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After you activate the virtual environment, Command Prompt will display the
    virtual environment root folder name enclosed in parentheses as a prefix of the
    default prompt to remind us that we are working in the virtual environment. In
    this case, we will see `(01)` as a prefix for the Command Prompt because the root
    folder for the activated virtual environment is `01`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 激活虚拟环境后，命令提示符将显示括号内的虚拟环境根文件夹名称作为默认提示的前缀，以提醒我们我们正在虚拟环境中工作。在这种情况下，我们将看到命令提示符的前缀为`(01)`，因为激活的虚拟环境的根文件夹是`01`。
- en: 'The following screenshot shows the virtual environment activated in a macOS
    Sierra Terminal with a `bash` shell, after executing the previously shown commands:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在macOS Sierra终端中使用`bash`外壳执行之前显示的命令后激活的虚拟环境：
- en: '![](img/b2094777-2d2d-48f6-b5e0-cba910fdd930.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2094777-2d2d-48f6-b5e0-cba910fdd930.png)'
- en: As we can see from the previous screenshot, the prompt changed from
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，提示从
- en: '`Gastons-MacBook-Pro:~ gaston$` to `(01) Gastons-MacBook-Pro:~ gaston$` after
    the activation of the virtual environment.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`Gastons-MacBook-Pro:~ gaston$` 在激活虚拟环境后变为 `(01) Gastons-MacBook-Pro:~ gaston$`。'
- en: In Windows, you can run either a batch file in the Command Prompt or a Windows
    PowerShell script to activate the virtual environment.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，您可以在命令提示符中运行批处理文件或Windows PowerShell脚本以激活虚拟环境。
- en: 'If you prefer Command Prompt, run the following command in the Windows command
    line to activate the virtual environment:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢命令提示符，请在Windows命令行中运行以下命令以激活虚拟环境：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following screenshot shows the virtual environment activated in Windows
    10 Command Prompt, after executing the previously shown commands:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在执行之前显示的命令后激活的Windows 10命令提示符中的虚拟环境：
- en: '![](img/93c26d61-1f5e-4faf-9260-00016fd07ced.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93c26d61-1f5e-4faf-9260-00016fd07ced.png)'
- en: As we can see from the previous screenshot, the prompt changed from `C:\Users\gaston`
    to `(01) C:\Users\gaston` after the activation of the virtual environment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，激活虚拟环境后，提示从`C:\Users\gaston`变为`(01) C:\Users\gaston`。
- en: 'If you prefer Windows PowerShell, launch it and run the following commands
    to activate the virtual environment. Note that you must have scripts execution
    enabled in Windows PowerShell to be able to run the script:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢Windows PowerShell，请启动它并运行以下命令以激活虚拟环境。请注意，您必须在Windows PowerShell中启用脚本执行才能运行脚本：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you receive an error similar to the following lines, it means that you don''t
    have scripts execution enabled:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您收到类似于以下行号的错误，这意味着您没有启用脚本执行：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The Windows PowerShell default execution policy is `Restricted`. This policy
    allows the execution of individual commands but it doesn''t run scripts. Thus,
    in case you want to work with Windows PowerShell, you will have to change the
    policy to allow the execution of scripts. It is very important to make sure that
    you understand the risks of the Windows PowerShell execution policies that allow
    you to run unsigned scripts. For more information about the different policies,
    check the following web page: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-6](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-6).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Windows PowerShell的默认执行策略是`Restricted`。此策略允许执行单个命令，但不会运行脚本。因此，如果您想使用Windows
    PowerShell，您必须更改策略以允许执行脚本。确保您了解允许您运行未签名脚本的Windows PowerShell执行策略的风险非常重要。有关不同策略的更多信息，请查看以下网页：[https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-6](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-6)。
- en: 'The following screenshot shows the virtual environment activated in a Windows
    10 PowerShell, after executing the previously shown commands:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在Windows 10 PowerShell中执行之前显示的命令后激活的虚拟环境：
- en: '![](img/3dd7d8f8-489c-482e-a002-13da5795fafd.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3dd7d8f8-489c-482e-a002-13da5795fafd.png)'
- en: Deactivating the virtual environment
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关闭虚拟环境
- en: It is extremely easy to deactivate a virtual environment generated by the previously
    explained process. The deactivation will remove all the changes made in the environment
    variables and will change the prompt back to its default message. Once you deactivate
    a virtual environment, you will go back to the default Python environment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面解释的过程生成的虚拟环境取消激活非常简单。取消激活将删除在环境变量中做出的所有更改，并将提示符变回默认消息。一旦取消激活虚拟环境，您将回到默认的
    Python 环境。
- en: In macOS or Linux, just type `deactivate` and press *Enter*.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 或 Linux 中，只需键入 `deactivate` 并按 *Enter*。
- en: In a Windows Command Prompt, you have to run the `deactivate.bat` batch file
    included in the `Scripts` folder. In our example, the full path for this file
    is `%USERPROFILE%\HillarDjangoREST\01\Scripts\deactivate.bat`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 命令提示符中，您必须在 `Scripts` 文件夹中运行的 `deactivate.bat` 批处理文件。在我们的示例中，此文件的完整路径为
    `%USERPROFILE%\HillarDjangoREST\01\Scripts\deactivate.bat`。
- en: In Windows PowerShell, you have to run the `Deactivate.ps1` script in the `Scripts`
    folder. In our example, the full path for this file is `$env:userprofile\HillarDjangoREST\01\Scripts\Deactivate.ps1`.
    Remember that you must have scripts execution enabled in Windows PowerShell to
    be able to run the script.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows PowerShell 中，您必须在 `Scripts` 文件夹中运行 `Deactivate.ps1` 脚本。在我们的示例中，此文件的完整路径为
    `$env:userprofile\HillarDjangoREST\01\Scripts\Deactivate.ps1`。请记住，您必须在 Windows
    PowerShell 中启用脚本执行才能运行此脚本。
- en: The instructions in the next sections assume that the virtual environment we
    have created is activated.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下一段落的说明假设我们创建的虚拟环境已激活。
- en: Installing Django and Django REST frameworks in an isolated environment
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在隔离环境中安装 Django 和 Django REST 框架
- en: We have created and activated a lightweight virtual environment. It is time
    to run many commands that will be the same for either Linux, macOS, or Windows.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已创建并激活了一个轻量级的虚拟环境。现在是时候运行许多命令了，这些命令对 Linux、macOS 或 Windows 都是一样的。
- en: 'First, run the following command to install the Django web framework:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，运行以下命令以安装 Django 网络框架：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The last lines of the output will indicate that the `django` package has been
    successfully installed. The process will also install the `pytz` package that
    provides world time zone definitions. Take into account that you may also see
    a notice to upgrade `pip`. The next lines show a sample of the four last lines
    of the output generated by a successful `pip` installation:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的最后几行将指示 `django` 包已成功安装。此过程还将安装提供世界时区定义的 `pytz` 包。请注意，您可能还会看到有关升级 `pip` 的通知。以下几行显示了成功
    `pip` 安装生成的输出最后四行的示例：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now that we have installed the Django web framework, we can install Django
    REST framework. Django REST framework works on top of Django and provides us with
    a powerful and flexible toolkit to build RESTful Web Services. We just need to
    run the following command to install this package:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 Django 网络框架，我们可以安装 Django REST 框架。Django REST 框架建立在 Django 之上，为我们提供了一个强大且灵活的工具包来构建
    RESTful 网络服务。我们只需运行以下命令来安装此包：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The last lines for the output will indicate that the `djangorestframework`
    package has been successfully installed, as shown here:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的最后几行将指示 `djangorestframework` 包已成功安装，如下所示：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: After following the previous steps, we will have Django REST framework 3.6.4
    and Django 1.11.5 installed in our virtual environment. We will install additional
    packages as we need them in the forthcoming chapters.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在遵循前面的步骤之后，我们将在我们的虚拟环境中安装 Django REST 框架 3.6.4 和 Django 1.11.5。在接下来的章节中，我们将根据需要安装额外的包。
- en: Creating an app with Django
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Django 创建一个应用
- en: 'Now, we will create our first app with Django and we will analyze the directory
    structure that Django creates. First, go to the root folder for the virtual environment:
    `01`.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用 Django 创建我们的第一个应用，并分析 Django 创建的目录结构。首先，转到虚拟环境的根文件夹：`01`。
- en: 'In Linux or macOS, enter the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 或 macOS 中，输入以下命令：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you prefer Command Prompt, run the following command in the Windows command
    line:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢命令提示符，请在 Windows 命令行中运行以下命令：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you prefer Windows PowerShell, run the following command in Windows PowerShell:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢 Windows PowerShell，请在 Windows PowerShell 中运行以下命令：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In Linux or macOS, run the following command to create a new Django project
    named `restful01`. The command won''t produce any output:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 或 macOS 中，运行以下命令以创建一个名为 `restful01` 的新 Django 项目。该命令不会产生任何输出：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In Windows, in either Command Prompt or PowerShell, run the following command
    to create a new Django project named `restful01`. The command won''t produce any
    output:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 中，无论是在命令提示符还是 PowerShell 中，运行以下命令以创建一个名为 `restful01` 的新 Django 项目。命令不会产生任何输出：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The previous command creates a `restful01` folder with other subfolders and
    Python files. Now, go to the recently created `restful01` folder. Just execute
    the following command on any platform:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令创建了一个包含其他子文件夹和 Python 文件的 `restful01` 文件夹。现在，转到最近创建的 `restful01` 文件夹。在任何平台上只需执行以下命令：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, run the following command to create a new Django app named `toys` within
    the `restful01` Django project. The command won''t produce any output:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行以下命令以在 `restful01` Django 项目中创建一个名为 `toys` 的新 Django 应用。命令不会产生任何输出：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The previous command creates a new `restful01/toys` subfolder, with the following
    files:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令创建了一个新的 `restful01/toys` 子文件夹，包含以下文件：
- en: '`views.py`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views.py`'
- en: '`tests.py`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests.py`'
- en: '`models.py`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models.py`'
- en: '`apps.py`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apps.py`'
- en: '`admin.py`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin.py`'
- en: '`__init__.py`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__.py`'
- en: 'In addition, the `restful01/toys` folder will have a `migrations` subfolder
    with an `__init__.py` Python script. The following diagram shows the folders and
    files in the directory tree, starting at the `restful01` folder with two subfolders
    - `toys` and `restful01`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`restful01/toys` 文件夹将包含一个名为 `migrations` 的子文件夹，其中包含一个 `__init__.py` Python
    脚本。以下图表显示了目录树中的文件夹和文件，从 `restful01` 文件夹开始，包含两个子文件夹 - `toys` 和 `restful01`：
- en: '![](img/5ffe5724-1e14-40ed-a07f-4c877261ddf4.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5ffe5724-1e14-40ed-a07f-4c877261ddf4.png)'
- en: Understanding Django folders, files, and configurations
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Django 文件夹、文件和配置
- en: 'After we create our first Django project and then a Django app, there are many
    new folders and files. First, use your favorite editor or IDE to check the Python
    code in the `apps.py` file within the `restful01/toys` folder (`restful01\toys`
    in Windows). The following lines show the code for this file:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建第一个 Django 项目和 Django 应用之后，会有许多新的文件夹和文件。首先，使用您喜欢的编辑器或 IDE 检查位于 `restful01/toys`
    文件夹内的 `apps.py` 文件中的 Python 代码（在 Windows 中为 `restful01\toys`）。以下几行显示了该文件的代码：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The code declares the `ToysConfig` class as a subclass of the `django.apps.AppConfig`
    class that represents a Django application and its configuration. The `ToysConfig`
    class just defines the `name` class attribute and sets its value to `'toys'`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 代码将 `ToysConfig` 类声明为 `django.apps.AppConfig` 类的子类，该类代表 Django 应用及其配置。`ToysConfig`
    类仅定义了 `name` 类属性并将其值设置为 `'toys'`。
- en: 'Now, we have to add `toys.apps.ToysConfig` as one of the installed apps in
    the `restful01/settings.py` file that configures settings for the `restful01`
    Django project. I built the previous string by concatenating many values as follows:
    app name + `.apps.` + class name, which is, `toys` + `.apps.` + `ToysConfig`.
    In addition, we have to add the `rest_framework` app to make it possible for us
    to use Django REST framework.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须将 `toys.apps.ToysConfig` 添加到配置 `restful01` Django 项目的 `restful01/settings.py`
    文件中的已安装应用之一。我通过以下方式构建了之前的字符串：应用名称 + `.apps.` + 类名称，即 `toys` + `.apps.` + `ToysConfig`。此外，我们还需要添加
    `rest_framework` 应用，以便我们能够使用 Django REST 框架。
- en: 'The `restful01/settings.py` file is a Python module with module-level variables
    that define the configuration of Django for the `restful01` project. We will make
    some changes to this Django settings file. Open the `restful01/settings.py` file
    and locate the highlighted lines that specify the strings list that declares the
    installed apps. The following code shows the first lines for the `settings.py`
    file. Note that the file has more code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`restful01/settings.py` 文件是一个 Python 模块，其中包含模块级变量，这些变量定义了 `restful01` 项目的 Django
    配置。我们将对此 Django 设置文件进行一些更改。打开 `restful01/settings.py` 文件，找到指定已安装应用的字符串列表的突出显示行。以下代码显示了
    `settings.py` 文件的第一个几行。请注意，文件中还有更多代码：'
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the following two strings to the `INSTALLED_APPS` strings list and save
    the changes to the `restful01/settings.py` file:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下两个字符串添加到 `INSTALLED_APPS` 字符串列表中，并将更改保存到 `restful01/settings.py` 文件中：
- en: '`''rest_framework''`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''rest_framework''`'
- en: '`''toys.apps.ToysConfig''`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''toys.apps.ToysConfig''`'
- en: 'The following lines show the new code that declares the `INSTALLED_APPS` string
    list with the added lines highlighted and with comments to understand what each
    added string means. The code file for the sample is included in the `hillar_django_restful_01`
    folder:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几行显示了声明 `INSTALLED_APPS` 字符串列表的新代码，其中突出显示了添加的行，并带有注释以了解每个添加的字符串的含义。示例代码文件包含在
    `hillar_django_restful_01` 文件夹中：
- en: '[PRE26]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This way, we have added Django REST framework and the `toys` application to
    our initial Django project named `restful01`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就将Django REST框架和`toys`应用程序添加到了我们的初始Django项目`restful01`中。
- en: Installing tools
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装工具
- en: Now, we will leave Django for a while and we will install many tools that we
    will use to interact with the RESTful Web Services that we will develop throughout
    this book.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将暂时放下Django，我们将安装许多我们将用于与本书中开发的RESTful Web服务交互的工具。
- en: 'We will use the following different kinds of tools to compose and send HTTP
    requests and visualize the responses throughout our book:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书中使用的以下不同类型的工具来编写和发送HTTP请求以及可视化响应：
- en: Command-line tools
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行工具
- en: GUI tools
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形用户界面工具
- en: Python code
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python代码
- en: Web browser
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络浏览器
- en: JavaScript code
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript代码
- en: You can use any other application that allows you to compose and send HTTP requests.
    There are many apps that run on tablets and smartphones that allow you to accomplish
    this task. However, we will focus our attention on the most useful tools when
    building RESTful Web Services with Django.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用任何允许您编写和发送HTTP请求的其他应用程序。有许多在平板电脑和智能手机上运行的应用程序可以帮助您完成这项任务。然而，我们将专注于在Django中构建RESTful
    Web服务时最有用的工具。
- en: Installing Curl
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Curl
- en: We will start installing command-line tools. One of the key advantages of command-line
    tools is that you can easily run again the HTTP requests again after we have built
    them for the first time, and we don't need to use the mouse or tap the screen
    to run requests. We can also easily build a script with batch requests and run
    them.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始安装命令行工具。命令行工具的一个关键优势是，一旦我们第一次构建了HTTP请求，我们就可以轻松地再次运行它们，而无需使用鼠标或触摸屏幕来运行请求。我们还可以轻松地构建带有批处理请求的脚本并运行它们。
- en: As happens with any command-line tool, it can take more time to perform the
    first requests compared with GUI tools, but it becomes easier once we have performed
    many requests and we can easily reuse the commands we have written in the past
    to compose new requests.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何命令行工具一样，与GUI工具相比，执行第一次请求可能需要更多时间，但一旦我们执行了许多请求，它就会变得更容易，我们可以轻松地重用我们过去编写的命令来编写新的请求。
- en: '**Curl**, also known as **cURL**, is a very popular open source command-line
    tool and library that allows us to easily transfer data. We can use the `curl`
    command-line tool to easily compose and send HTTP requests and check their responses.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**Curl**，也称为**cURL**，是一个非常流行的开源命令行工具和库，它允许我们轻松地传输数据。我们可以使用`curl`命令行工具轻松地编写和发送HTTP请求并检查它们的响应。'
- en: In Linux or macOS, you can open a Terminal and start using `curl` from the command
    line.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux或macOS中，您可以在终端中打开一个终端并开始使用命令行`curl`。
- en: In Windows, you have two options. You can work with `curl` in Command Prompt
    or you can decide to install curl as part of the Cygwin package installation option
    and execute it from the Cygwin terminal. You can read more about the Cygwin terminal
    and its installation procedure at: [http://cygwin.com/install.html](http://cygwin.com/install.html).
    Windows Powershell includes a `curl` alias that calls the `Invoke-WebRequest`
    command, and therefore, if you want to work with Windows Powershell with curl,
    it is necessary to remove the `curl` alias.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，您有两个选择。您可以在命令提示符中使用`curl`，或者您可以选择将curl作为Cygwin包安装选项的一部分进行安装，并从Cygwin终端执行它。您可以在[http://cygwin.com/install.html](http://cygwin.com/install.html)上了解更多关于Cygwin终端及其安装过程的信息。Windows
    Powershell包括一个`curl`别名，它调用`Invoke-WebRequest`命令，因此，如果您想使用Windows Powershell与curl一起工作，则必须删除`curl`别名。
- en: 'If you want to use the `curl` command within Command Prompt, you just need
    to download and unzip the latest version of the `curl` download page: [https://curl.haxx.se/download.html](https://curl.haxx.se/download.html).
    Make sure you download the version that includes SSL and SSH.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在命令提示符中使用`curl`命令，您只需下载并解压`curl`下载页面上的最新版本：[https://curl.haxx.se/download.html](https://curl.haxx.se/download.html)。请确保您下载包含SSL和SSH的版本。
- en: The following screenshot shows the available downloads for Windows. The Win64
    - Generic section includes the versions that we can run in Command Prompt or Windows
    Powershell.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Windows中可用的下载内容。Win64 - Generic部分包括我们可以在命令提示符或Windows Powershell中运行的版本。
- en: 'The `Win64 x86_64.7zip` file provides the binary version for `curl` version
    7.55.1 with SSL and SSH support:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`Win64 x86_64.7zip`文件提供了带有SSL和SSH支持的`curl`版本7.55.1的二进制版本：'
- en: '![](img/9b75bdad-8f18-46d8-b055-8eddcb2b3945.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9b75bdad-8f18-46d8-b055-8eddcb2b3945.png)'
- en: 'After you unzip the `.7zip` or `.zip` file you have downloaded, you can include
    the folder in which `curl.exe` is included in your path. For example, if you unzip
    the `Win64 x86_64.7zip` file, you will find `curl.exe` in the `bin` folder. The
    following screenshot shows the results of executing `curl --version` on  Command
    Prompt in Windows 10\. The `--version` option makes curl display its version and
    all the libraries, protocols, and features it supports:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在解压缩您下载的 `.7zip` 或 `.zip` 文件后，您可以将包含 `curl.exe` 的文件夹添加到您的路径中。例如，如果您解压缩了 `Win64
    x86_64.7zip` 文件，您将在 `bin` 文件夹中找到 `curl.exe`。以下截图显示了在 Windows 10 命令提示符中执行 `curl
    --version` 的结果。`--version` 选项使 curl 显示其版本以及它支持的所有库、协议和功能：
- en: '![](img/da309c94-a87d-40b1-a0fb-4a283c0ecce4.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da309c94-a87d-40b1-a0fb-4a283c0ecce4.png)'
- en: Installing HTTPie
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 HTTPie
- en: Now, we will install HTTPie, a command-line HTTP client written in Python that
    makes it easy to send HTTP requests and uses a syntax that is easier than curl.
    By default, HTTPie displays colorized output and uses multiple lines to display
    the response details. In some cases, HTTPie makes it easier to understand the
    responses than the curl utility. However, one of the great disadvantages of HTTPie
    as a command-line utility is that it takes more time to load than curl, and therefore,
    if you want to code scripts with too many commands, you have to evaluate whether
    it makes sense to use HTTPie.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将安装 HTTPie，这是一个用 Python 编写的命令行 HTTP 客户端，它使得发送 HTTP 请求变得容易，并且使用的语法比 curl
    更简单。默认情况下，HTTPie 显示彩色输出，并使用多行来显示响应细节。在某些情况下，HTTPie 使理解响应比 curl 工具更容易。然而，HTTPie
    作为命令行工具的一个重大缺点是它比 curl 加载时间更长，因此，如果您想编写包含太多命令的脚本，您必须评估是否使用 HTTPie 有意义。
- en: We just need to make sure we run the following command in the virtual environment
    we have just created and activated. This way, we will install HTTPie only for
    our virtual environment.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要确保在刚刚创建并激活的虚拟环境中运行以下命令。这样，我们只为虚拟环境安装 HTTPie。
- en: 'Run the following command in the terminal, Command Prompt, or Windows PowerShell
    to install the `httpie` package:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端、命令提示符或 Windows PowerShell 中运行以下命令以安装 `httpie` 包：
- en: '[PRE27]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The last lines of the output will indicate that the `httpie` package has been
    successfully installed:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的最后几行将指示 `httpie` 包已成功安装：
- en: '[PRE28]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you don't remember how to activate the virtual environment that we created
    for this example, read the *Activating the virtual environment *section in this
    chapter.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你忘记了如何激活为我们这个示例创建的虚拟环境，请阅读本章中的 *激活虚拟环境* 部分。
- en: 'Now, we will be able to use the `http` command to easily compose and send HTTP
    requests to our future RESTful Web Services build with Django. The following screenshot
    shows the results of executing `http` on Command Prompt in Windows 10\. HTTPie
    displays the valid options and indicates that a URL is required:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将能够使用 `http` 命令轻松地编写和发送 HTTP 请求到我们用 Django 构建的未来的 RESTful Web 服务。以下截图显示了在
    Windows 10 命令提示符中执行 `http` 的结果。HTTPie 显示了有效的选项，并指出需要 URL：
- en: '![](img/dc8d1e4b-c580-42c4-8f5d-c2427b7a3be1.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc8d1e4b-c580-42c4-8f5d-c2427b7a3be1.png)'
- en: Installing the Postman REST client
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Postman REST 客户端
- en: 'So far, we have installed two terminal-based or command-line tools to compose
    and send HTTP requests to our Django development server: cURL and HTTPie. Now,
    we will start installing **G****raphical User Interface** (**GUI**) tools.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经安装了两个基于终端或命令行的工具来编写和发送 HTTP 请求到我们的 Django 开发服务器：cURL 和 HTTPie。现在，我们将开始安装
    **图形用户界面**（**GUI**）工具。
- en: 'Postman is a very popular API testing suite GUI tool that allows us to easily
    compose and send HTTP requests, among other features. Postman is available as
    a standalone app in Linux, macOS, and Windows. You can download the versions of
    the *Postman* app from the following URL: [https://www.getpostman.com](https://www.getpostman.com).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Postman 是一个非常流行的 API 测试套件图形用户界面（GUI）工具，它允许我们轻松地编写和发送 HTTP 请求，以及其他功能。Postman
    作为独立应用程序在 Linux、macOS 和 Windows 上可用。您可以从以下网址下载 *Postman* 应用程序的版本：[https://www.getpostman.com](https://www.getpostman.com)。
- en: You can download and install Postman for free to compose and send HTTP requests
    to the RESTful Web Services we will build throughout this book. You just need
    to sign up to Postman. We won't be using any of the paid features provided by
    either Postman Pro or Postman Enterprise in our examples. All the instructions
    work with Postman 5.2.1 or greater.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以免费下载并安装Postman，以编写并发送HTTP请求到本书中我们将构建的RESTful Web服务。您只需在Postman上注册即可。在我们的示例中，我们不会使用Postman
    Pro或Postman Enterprise提供的任何付费功能。所有说明都适用于Postman 5.2.1或更高版本。
- en: 'The following screenshot shows the HTTP GET request builder in Postman:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Postman中的HTTP GET请求构建器：
- en: '![](img/53e39c1f-b5ff-4bbf-a2e0-730fcfc612c9.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/53e39c1f-b5ff-4bbf-a2e0-730fcfc612c9.png)'
- en: Installing Stoplight
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Stoplight
- en: Stoplight is a very useful GUI tool that focuses on helping architects and developers
    to model complex APIs. If we need to consume our RESTful Web Service in many different
    programming languages, we will find Stoplight extremely helpful. Stoplight provides
    an HTTP request maker that allows us to compose and send requests and generate
    the necessary code to make them in different programming languages, such as JavaScript,
    Swift, C#, PHP, Node, and Go, among others.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Stoplight是一个非常有用的GUI工具，专注于帮助架构师和开发者建模复杂的API。如果我们需要用多种不同的编程语言消费我们的RESTful Web服务，我们将发现Stoplight非常有帮助。Stoplight提供了一个HTTP请求生成器，允许我们编写和发送请求，并生成在不同编程语言中（如JavaScript、Swift、C#、PHP、Node和Go等）执行它们的必要代码。
- en: 'Stoplight provides a web version and is also available as a standalone app
    in Linux, macOS, and Windows. You can download the versions of Stoplight from
    the following URL: [http://stoplight.io/](http://stoplight.io/).'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Stoplight提供网页版，也作为独立应用程序在Linux、macOS和Windows上可用。您可以从以下网址下载Stoplight的版本：[http://stoplight.io/](http://stoplight.io/)。
- en: 'The following screenshot shows the HTTP GET request builder in Stoplight with
    the code generation at the bottom:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Stoplight中的HTTP GET请求构建器，底部有代码生成：
- en: '![](img/ca260d76-d5cb-4e56-a3ce-da8b5442d520.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ca260d76-d5cb-4e56-a3ce-da8b5442d520.png)'
- en: Installing iCurlHTTP
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装iCurlHTTP
- en: 'We can also use apps that can compose and send HTTP requests from mobile devices
    to work with our RESTful Web Services. For example, we can work with the iCurlHTTP
    app on iOS devices such as iPad and iPhone: [https://itunes.apple.com/us/app/icurlhttp/id611943891](https://itunes.apple.com/us/app/icurlhttp/id611943891).
    On Android devices, we can work with the *HTTP Request* app: [https://play.google.com/store/apps/details?id=air.http.request&hl=en](https://play.google.com/store/apps/details?id=air.http.request&hl=en).'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用可以在移动设备上编写和发送HTTP请求的应用程序来与我们的RESTful Web服务一起工作。例如，我们可以在iPad和iPhone等iOS设备上使用iCurlHTTP应用程序：[https://itunes.apple.com/us/app/icurlhttp/id611943891](https://itunes.apple.com/us/app/icurlhttp/id611943891)。在Android设备上，我们可以使用*HTTP
    Request*应用程序：[https://play.google.com/store/apps/details?id=air.http.request&hl=en](https://play.google.com/store/apps/details?id=air.http.request&hl=en)。
- en: 'The following screenshot shows the UI for the iCurlHTTP app running on an iPad
    Pro:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在iPad Pro上运行的iCurlHTTP应用程序的用户界面：
- en: '![](img/a662bfeb-ec5f-4569-b27b-c39761955882.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a662bfeb-ec5f-4569-b27b-c39761955882.png)'
- en: At the time of writing, the mobile apps that allow you to compose and send HTTP
    requests do not provide all the features you can find in Postman or command-line
    utilities.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，允许您编写和发送HTTP请求的移动应用程序并不提供您在Postman或命令行工具中可以找到的所有功能。
- en: Test your knowledge
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: 'Let''s see whether you can answer the following questions correctly:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看你是否能正确回答以下问题：
- en: 'After we activate a virtual environment, all the packages we install with `pip`
    are available:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们激活虚拟环境后，我们使用`pip`安装的所有包都可用：
- en: For all the virtual environments available in the computer or device that is
    running Python
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于运行Python的计算机或设备上的所有可用虚拟环境
- en: Only for the activated virtual environment
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅适用于激活的虚拟环境
- en: For all the virtual environments created by the current user
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于当前用户创建的所有虚拟环境
- en: 'HTTPie is a:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTTPie是一个：
- en: Command-line HTTP server written in Python that makes it easy to create a RESTful
    Web Server
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用Python编写的命令行HTTP服务器，使其轻松创建RESTful Web服务器
- en: Command-line utility that allows us to run queries against an SQLite database
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令行实用程序，允许我们对SQLite数据库运行查询
- en: Command-line HTTP client written in Python that makes it easy to compose and
    send HTTP requests
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用Python编写的命令行HTTP客户端，使其轻松编写和发送HTTP请求
- en: Which of the following commands creates a new app named `books` in Django?
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令在Django中创建了一个名为`books`的新应用程序？
- en: '`django startapp books`'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`django startapp books`'
- en: '`python django.py startapp books`'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`python django.py startapp books`'
- en: '`python manage.py startapp books`'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`python manage.py startapp books`'
- en: In Django, a subclass of which of the following classes represents a Django
    application and its configuration?
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Django 中，以下哪个类的子类代表 Django 应用及其配置？
- en: '`django.apps.AppConfig`'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`django.apps.AppConfig`'
- en: '`django.application.configuration`'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`django.application.configuration`'
- en: '`django.config.App`'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`django.config.App`'
- en: Which of the following strings must be added to the `INSTALLED_APPS` string
    list in the `settings.py` file to enable Django REST framework?
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个字符串必须添加到`settings.py`文件中的`INSTALLED_APPS`字符串列表中，以启用 Django REST 框架？
- en: '`''rest_framework''`'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`''rest_framework''`'
- en: '`''django_rest_framework''`'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`''django_rest_framework''`'
- en: '`''Django_REST_framework''`'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`''Django_REST_framework''`'
- en: The rights answers are included in the [Appendix](dj-rst-websvc_ch19.html),
    *Solutions*.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 正确答案包含在[附录](dj-rst-websvc_ch19.html)的*解决方案*中。
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned the advantages of working with lightweight virtual
    environments in Python and we set up a virtual environment with Django and Django
    REST framework. We created an app with Django, we took a first look at the Django
    folders, files, and configurations, and we made the necessary changes to activate
    Django REST framework.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了在 Python 中使用轻量级虚拟环境的优势，并使用 Django 和 Django REST 框架设置了一个虚拟环境。我们使用 Django
    创建了一个应用，初步了解了 Django 的文件夹、文件和配置，并对 Django REST 框架进行了必要的更改以激活它。
- en: Then, we introduced and installed command-line and GUI tools that we will use
    to interact with the RESTful Web Services that we will design, code, test, and
    run in the forthcoming chapters.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们介绍了并安装了我们将用于与我们在接下来的章节中设计、编码、测试和运行的 RESTful Web 服务交互的命令行和 GUI 工具。
- en: Now that we have our environment ready to start working with Django REST framework,
    we will define the requirements for our first RESTful Web Service and we will
    work with models, migrations, serialization, and deserialization, which are the
    topics that we are going to discuss in the next chapter.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了环境，可以开始使用 Django REST 框架工作了，我们将定义我们第一个 RESTful Web 服务的需求，并处理模型、迁移、序列化和反序列化，这些是我们将在下一章讨论的主题。
