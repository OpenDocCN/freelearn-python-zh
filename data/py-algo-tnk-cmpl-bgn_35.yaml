- en: Chapter 23
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第23章
- en: Introduction to Loop Control Structures
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 循环控制结构简介
- en: 23.1 What is a Loop Control Structure?
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.1 什么是循环控制结构？
- en: A loop control structure is a control structure that allows the execution of
    a statement or block of statements multiple times until a specified condition
    is met.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 循环控制结构是一种控制结构，它允许在满足指定条件之前多次执行语句或语句块。
- en: 23.2 From Sequence Control to Loop Control Structures
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.2 从顺序控制到循环控制结构
- en: The next example lets the user enter four numbers and it then calculates and
    displays their sum. As you can see, there is no loop control structure employed
    yet, only the familiar sequence control structure.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例允许用户输入四个数字，然后计算并显示它们的总和。正如你所看到的，还没有使用循环控制结构，只有熟悉的顺序控制结构。
- en: x = float(input())
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: y = float(input())
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: y = float(input())
- en: z = float(input())
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: z = float(input())
- en: w = float(input())
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: w = float(input())
- en: total = x + y + z + w
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: total = x + y + z + w
- en: print(total)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: While this code is quite short, consider a similar one that allows the user
    to enter 1000 numbers instead of just four. Can you imagine having to write the
    input statement float(input()) a thousand times? It would certainly be more convenient
    if you could write this statement just once and instruct the computer to execute
    it a thousand times, wouldn't it? This is where a loop control structure comes
    into play!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这段代码很短，但考虑一个类似的代码，它允许用户输入1000个数字而不是仅仅四个。你能想象不得不写float(input())一千次输入语句吗？如果你能只写一次这个语句并指示计算机执行一千次，那会方便得多，不是吗？这就是循环控制结构发挥作用的地方！
- en: But before you delve into loop control structures, try to solve a riddle first!
    Without using a loop control structure yet, try to rewrite the previous example,
    using only two variables, x and total. Yes, you heard that right! This code must
    calculate and display the sum of four user-provided numbers, but it must do so
    with only two variables! Can you find a way?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在你深入研究循环控制结构之前，先尝试解决一个谜题！在不使用循环控制结构的情况下，尝试重写之前的示例，只使用两个变量x和total。是的，你听对了！这段代码必须计算并显示四个用户提供的数字的总和，但必须只使用两个变量！你能找到方法吗？
- en: 'Hmmm… it''s obvious what you are thinking right now: “The only thing that I
    can do with two variables is to read one single value in variable x and then assign
    that value to variable total”. Your thinking is quite correct, and it is presented
    here.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯嗯……你现在在想什么很明显：“我可以用两个变量做的唯一一件事就是读取变量x中的一个值，然后将该值赋给变量total”。你的想法相当正确，并且在这里进行了展示。
- en: x = float(input())  #Read the first number
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())  # 读取第一个数字
- en: total = x
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: total = x
- en: which can equivalently be written as
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以等价地写成
- en: total = 0
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: x = float(input())  #Read the first number
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())  # 读取第一个数字
- en: total = total + x
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: total = total + x
- en: 'And now what? Now, there are three things that you can actually do, and these
    are: think, think, and of course, think!'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 那接下来呢？现在，你可以做三件事，那就是：思考，思考，当然，还是思考！
- en: The first user-provided number has been stored in variable total, so variable
    x is now free for further use! Thus, you can reuse variable x to read a second
    value which will also accumulate in variable total, as follows.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个用户提供的数字已经被存储在变量total中，因此变量x现在可以用于进一步使用！因此，你可以重用变量x来读取第二个值，该值也将累积在变量total中，如下所示。
- en: total = 0
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: x = float(input())  #Read the first number
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())  # 读取第一个数字
- en: total = total + x
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: total = total + x
- en: x = float(input())  #Read the second number
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())  # 读取第二个数字
- en: total = total + x
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: total = total + x
- en: '![](img/notice.jpg)Statement total = total + x accumulates the value of x in
    total, which means that it adds the value of x to total along with any previous
    value in total. For example, if variable total contains the value 5 and variable
    x contains the value 3, the statement total = total + x assigns the value 8 to
    variable total.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)语句total = total + x将x的值累加到total中，这意味着它将x的值加到total上，包括total中之前存在的任何值。例如，如果变量total包含值5，而变量x包含值3，则语句total
    = total + x将值8赋给变量total。'
- en: Since the second user-provided number has been accumulated in the variable total,
    variable x can be reused! This process can repeat until all four numbers are read
    and accumulated in variable total. The final code is as follows. Please note that
    it does not use any loop control structure yet!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于第二个用户提供的数字已经累积在变量total中，变量x可以被重用！这个过程可以重复，直到所有四个数字都被读取并累积到变量total中。最终的代码如下。请注意，它还没有使用任何循环控制结构！
- en: total = 0
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: x = float(input())
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: total = total + x
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: total = total + x
- en: x = float(input())
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: total = total + x
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: total = total + x
- en: x = float(input())
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: total = total + x
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: total = total + x
- en: x = float(input())
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: total = total + x
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: total = total + x
- en: print(total)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: '![](img/notice.jpg)Both this code and the initial one at the beginning of this
    section are considered equivalent. The main distinction between them, however,
    lies in the fact that this one contains four identical pairs of statements.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)这两个代码和本节开头的一个初始代码被认为是等效的。然而，它们之间的主要区别在于，这个代码包含四对相同的语句。'
- en: Apparently, you can use this example to read and find the sum of more than four
    numbers. However, writing those pairs of statements multiple times can be quite
    cumbersome and may lead to errors if any pair is accidentally omitted.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，你可以使用这个例子来读取并找到超过四个数字的总和。然而，多次编写这些语句可能会相当繁琐，并且如果任何一对语句意外遗漏，可能会导致错误。
- en: What you truly need here is to retain just one pair of statements, but use a
    loop control structure to execute it four times (or even 1000 times, if you wish).
    You can use something like the following code fragment.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你真正需要的是保留一对语句，但使用循环控制结构执行四次（或者如果你愿意，甚至1000次）。你可以使用以下代码片段。
- en: total = 0
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'execute_these_statements_4_times:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'execute_these_statements_4_times:'
- en: x = float(input())
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: total = total + x
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: total = total + x
- en: print(total)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: Obviously there isn't any execute_these_statements_4_times statement in Python.
    This is for demonstration purposes only, but soon enough you will learn everything
    about all the loop control structures that Python supports!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，Python中没有execute_these_statements_4_times这样的语句。这只是为了演示目的，但很快你将了解Python支持的所有循环控制结构！
- en: '23.3 Review Questions: True/False'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.3 复习问题：正确/错误
- en: Choose true or false for each of the following statements.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下每个陈述，选择正确或错误。
- en: 1)A loop control structure is a structure that allows the execution of a statement
    or block of statements multiple times until a specified condition is met.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 1)循环控制结构是一种允许在满足指定条件之前多次执行语句或语句块的构造。
- en: 2)It is possible to use a sequence control structure that prompts the user to
    enter 1000 numbers and then calculates their sum.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 2)可以使用一个序列控制结构提示用户输入1000个数字，然后计算它们的总和。
- en: 3)The following code fragment accumulates the value 10 in variable total.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 3)以下代码片段将值10累加到变量total中。
- en: total = 10
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: total = 10
- en: a = 0
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: a = 0
- en: total = total + a
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: total = total + a
- en: 4)The following Python program (not code fragment) satisfies the property of
    effectiveness.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 4)以下Python程序（不是代码片段）满足有效性的属性。
- en: a = 5
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: a = 5
- en: total = total + a
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: total = total + a
- en: print(total)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: 5)Both of the following two code fragments assign the value of 5 to the variable
    total.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 5)以下两个代码片段都将值5赋给变量total。
- en: a = 5
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: a = 5
- en: total = a
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: total = a
- en: total = 0
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: a = 5
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: a = 5
- en: total = total + a
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: total = total + a
