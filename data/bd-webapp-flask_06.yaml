- en: Chapter 6. But I Wanna REST Mom, Now!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。但是我现在想休息妈妈！
- en: REST is an architectural style that has been gaining momentum these last few
    years due to its many features and architectural constraints such as cacheability,
    stateless behavior, and its interface requirement.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: REST是一种架构风格，由于其许多特性和架构约束（如可缓存性、无状态行为和其接口要求），近年来一直在获得动力。
- en: Tip
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For a nice overview of REST architecture, refer to [http://www.drdobbs.com/Web-development/restful-Web-services-a-tutorial/240169069](http://www.drdobbs.com/Web-development/restful-Web-services-a-tutorial/240169069)
    and [http://en.wikipedia.org/wiki/Representational_state_transfer](http://en.wikipedia.org/wiki/Representational_state_transfer).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有关REST架构的概述，请参阅[http://www.drdobbs.com/Web-development/restful-Web-services-a-tutorial/240169069](http://www.drdobbs.com/Web-development/restful-Web-services-a-tutorial/240169069)和[http://en.wikipedia.org/wiki/Representational_state_transfer](http://en.wikipedia.org/wiki/Representational_state_transfer)。
- en: 'Our focus in this chapter will be on RESTful Web Services and APIs—that is,
    Web services and Web APIs following the REST architecture. Let''s start at the
    beginning: what is a Web service?'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将专注于RESTful Web服务和API——即遵循REST架构的Web服务和Web API。让我们从开始说起：什么是Web服务？
- en: A Web service is a Web application that can be consulted by your application
    as if it was an API, improving the user experience. If your RESTful Web service
    does not need to be called from a traditional UI interface, and may be used standalone,
    then what you have is a **RESTful Web Service API**, "RESTful API" for short,
    that works just like a regular API, but through a Web server.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务是一个可以被你的应用程序查询的Web应用程序，就像它是一个API一样，提高了用户体验。如果你的RESTful Web服务不需要从传统的UI界面调用，并且可以独立使用，那么你拥有的是一个**RESTful
    Web服务API**，简称“RESTful API”，它的工作方式就像一个常规API，但通过Web服务器。
- en: A call to a Web service could, for example, start a batch process, update the
    database, or just retrieve some data. There is no restriction imposed on what
    a service may perform.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对Web服务的调用可能会启动批处理过程、更新数据库或只是检索一些数据。对服务可能执行的操作没有限制。
- en: RESTful Web services should be accessible through a **URI** (like a URL) and
    may be accessed by any Web protocol, although **HTTP** is the king here. Because
    of that, we'll focus on **HTTP**. Our Web service response, also called a resource,
    may have any desired format; as TXT, XML, or JSON, but the most common format
    is JSON, as it is very simple to use. We'll also focus on JSON. When using HTTP
    with Web services, a common practice is to use the HTTP default methods (`GET`,
    `POST`, `PUT`, `DELETE`, and `OPTIONS`) to give more information to the server
    about what we want to achieve. This technique allows us to have different functionality
    within the same service.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful Web服务应该通过**URI**（类似于URL）访问，并且可以通过任何Web协议访问，尽管**HTTP**在这里是王者。因此，我们将专注于**HTTP**。我们的Web服务响应，也称为资源，可以具有任何所需的格式；如TXT、XML或JSON，但最常见的格式是JSON，因为它非常简单易用。我们还将专注于JSON。在使用HTTP与Web服务时，一种常见的做法是使用HTTP默认方法（`GET`、`POST`、`PUT`、`DELETE`和`OPTIONS`）向服务器提供关于我们想要实现的更多信息。这种技术允许我们在同一个服务中拥有不同的功能。
- en: A service call to `http://localhost:5000/age` could return the user's age through
    a `GET` request, or remove its value through a `DELETE` request.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对`http://localhost:5000/age`的服务调用可以通过`GET`请求返回用户的年龄，或通过`DELETE`请求删除其值。
- en: 'Let''s see what each *usually used* method is *usually* used for:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看每个*通常使用*的方法通常用于什么：
- en: '`GET`: This is used to retrieve a resource. You want information? No database
    update? Use GET!'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`：这用于检索资源。你想要信息？不需要更新数据库？使用GET！'
- en: '`POST`: This is used to insert new data into the server, such as adding a new
    employee in your database.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`：这用于将新数据插入服务器，比如在数据库中添加新员工。'
- en: '`PUT`: This is used to update data on the server. You have an employee that
    decided to change his nickname in the system? Use `PUT` to do that!'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT`：这用于更新服务器上的数据。你有一个员工决定在系统中更改他的昵称？使用`PUT`来做到这一点！'
- en: '`DELETE`: This is your best method for getting rid of data on your server!'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`：这是你在服务器上删除数据的最佳方法！'
- en: '`OPTIONS`: This is used to ask a service which methods it supports.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPTIONS`：这用于询问服务支持哪些方法。'
- en: Lots of theory so far; let's put it into practice with a Flask-powered REST
    Web Service example.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，有很多理论；让我们通过一个基于Flask的REST Web服务示例来实践。
- en: 'First, install the required library for the example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，安装示例所需的库：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, on to the example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一个例子：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding example, we create a Web service to consult articles using
    a GET request. The `jsonify` function is introduced, as it is used to serialize
    Python objects into Flask JSON responses. We also use the marshmallow library
    to serialize SQLAlchemy results into Python dictionaries, as there is no native
    API for such.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们创建了一个Web服务，使用GET请求来查询文章。引入了`jsonify`函数，因为它用于将Python对象序列化为Flask JSON响应。我们还使用marshmallow库将SQLAlchemy结果序列化为Python字典，因为没有原生API可以做到这一点。
- en: 'Let''s discuss the example, step-by-step:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步讨论这个例子：
- en: First, we create our app and configure our SQLAlchemy extension. We then define
    the `Article` model, which will hold our article data, and an ArticleSchema, which
    allows marshmallow to serialize our articles. We have to define in the Schema
    Meta, which fields should be serialized. `article_schema` is our schema instance
    used to serialize single articles while `articles_schema` serializes article collections.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建我们的应用程序并配置我们的SQLAlchemy扩展。然后定义`Article`模型，它将保存我们的文章数据，以及一个ArticleSchema，它允许marshmallow将我们的文章序列化。我们必须在Schema
    Meta中定义应该序列化的字段。`article_schema`是我们用于序列化单篇文章的模式实例，而`articles_schema`序列化文章集合。
- en: Our articles view has two routes defined, one for article listing and another
    for article detail, which returns a single article.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的文章视图有两个定义的路由，一个用于文章列表，另一个用于文章详情，返回单篇文章。
- en: Inside it, if `article_id` is provided, we serialize and return the requested
    article. If `article_id` does not have a corresponding record in the database,
    we return a message with the given error and the HTTP code 404, indicating a "not
    found" status. If `article_id` is `None`, we serialize and return 10 articles.
    You might ask, Why not return all the articles in the database? If we have 10,000
    articles in the database and try to return that many, our server will certainly
    have a problem; thus, avoid returning everything from the database.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中，如果提供了`article_id`，我们将序列化并返回请求的文章。如果数据库中没有与`article_id`对应的记录，我们将返回一个带有给定错误和HTTP代码404的消息，表示“未找到”状态。如果`article_id`为`None`，我们将序列化并返回10篇文章。您可能会问，为什么不返回数据库中的所有文章？如果我们在数据库中有10,000篇文章并尝试返回那么多，我们的服务器肯定会出问题；因此，避免返回数据库中的所有内容。
- en: This kind of service is usually consumed by Ajax requests made using JavaScript
    such as jQuery or PrototypeJS. When sending Ajax requests, these libraries add
    a special header that allows us to identify whether the given request is actually
    an Ajax request. In our preceding example, we serve the JSON response to all GET
    requests.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的服务通常由使用JavaScript（如jQuery或PrototypeJS）的Ajax请求来消耗。在发送Ajax请求时，这些库会添加一个特殊的标头，使我们能够识别给定请求是否实际上是Ajax请求。在我们的前面的例子中，我们为所有GET请求提供JSON响应。
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Don't know Ajax? Visit [http://www.w3schools.com/Ajax/ajax_intro.asp](http://www.w3schools.com/Ajax/ajax_intro.asp).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不懂Ajax？访问[http://www.w3schools.com/Ajax/ajax_intro.asp](http://www.w3schools.com/Ajax/ajax_intro.asp)。
- en: 'We could be more selective and only send JSON responses to Ajax requests. Regular
    requests will receive plain HTML responses. To do that, we would have to make
    a slight change in our view, like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更加选择性，只对Ajax请求发送JSON响应。常规请求将收到纯HTML响应。要做到这一点，我们需要对视图进行轻微更改，如下所示：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `request` object has an attribute called `is_xhr` that you can check to
    see if the request is actually an Ajax request. Our preceding code will probably
    look better if we have it split into a few functions, such as a function to respond
    to Ajax requests and another to respond to plain HTTP requests. Why don't you
    try refactoring the code?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`request`对象有一个名为`is_xhr`的属性，您可以检查该属性以查看请求是否实际上是Ajax请求。如果我们将前面的代码拆分成几个函数，例如一个用于响应Ajax请求，另一个用于响应纯HTTP请求，那么我们的前面的代码可能会更好。为什么不尝试重构代码呢？'
- en: 'Our last example could also have a different approach; we could render the
    HTML template without adding context variables to it but by loading all of our
    data through Ajax requests. In this scenario, the following changes to the code
    would be required:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一个示例也可以采用不同的方法；我们可以通过Ajax请求加载所有数据，而不向其添加上下文变量来呈现HTML模板。在这种情况下，需要对代码进行以下更改：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We added a new field `url` to our schema in order to access the path to the
    article page from within the JavaScript code, as we return a JSON document to
    the template, and not an SQLAlchemy object, and, therefore, cannot access the
    model methods.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在模式中添加了一个新字段`url`，以便从JavaScript代码中访问文章页面的路径，因为我们返回的是一个JSON文档而不是SQLAlchemy对象，因此无法访问模型方法。
- en: 'The `articles.html` file will look like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`articles.html`文件将如下所示：'
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In our template, our article list is empty; we then populate it after calling
    our service with Ajax. If you test the full example, the Ajax request is so fast
    you might not even notice the page was loaded empty before being populated with
    Ajax.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的模板中，文章列表是空的；然后在使用Ajax调用我们的服务后进行填充。如果您测试完整的示例，Ajax请求非常快，您甚至可能都没有注意到页面在填充Ajax之前是空的。
- en: Beyond GET
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超越GET
- en: So far we've had a few cozy examples with Ajax and RESTful Web services but
    we have yet to record data in our database using a service. How about trying that
    now?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了一些舒适的Ajax和RESTful Web服务的示例，但我们还没有使用服务将数据记录到我们的数据库中。现在试试吧？
- en: Recording to the database using Web services is not much different from what
    we have done in the previous chapter. We'll receive data from an Ajax request,
    we will check which HTTP method was used in order to decide what to do, then we'll
    validate the sent data and save everything if no error was found. In [Chapter
    4](ch04.html "Chapter 4. Please Fill in This Form, Madam"), *Please Fill in This
    Form, Madam*, we talked about CSRF protection and its importance. We'll keep validating
    our data against CSRF with our Web service. The trick is to add the CSRF token
    to the form data being submitted. See the attached code provided with the eBook
    for the example HTML.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Web服务记录到数据库与我们在上一章中所做的并没有太大的不同。我们将从Ajax请求中接收数据，然后检查使用了哪种HTTP方法以决定要做什么，然后我们将验证发送的数据并保存所有数据（如果没有发现错误）。在[第4章](ch04.html
    "第4章。请填写这张表格，夫人")*请填写这张表格，夫人*中，我们谈到了CSRF保护及其重要性。我们将继续使用我们的Web服务对数据进行CSRF验证。诀窍是将CSRF令牌添加到要提交的表单数据中。有关示例HTML，请参见随附的电子书代码。
- en: 'This is how our view looks like with `POST`, `PUT`, and `REMOVE` method support:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的视图支持`POST`，`PUT`和`REMOVE`方法：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Ok, it's true, we can't hide it any longer; dealing with Web services and plain
    HTML rendering in the same page can be kind of messy, as seen in the preceding
    example. Even if you split the function between other functions, by method, things
    might not look that good. The usual pattern is to have a view serving your Ajax
    requests and another serving your "normal" requests. You only mix both of them
    if convenient.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，事实就是这样，我们再也不能隐藏了；在同一页中处理Web服务和纯HTML渲染可能有点混乱，就像前面的例子所示。即使您将函数按方法分割到其他函数中，事情可能看起来也不那么好。通常的模式是有一个视图用于处理Ajax请求，另一个用于处理“正常”请求。只有在方便的情况下才会混合使用两者。
- en: Flask-Restless
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask-Restless
- en: Flask-Restless is an extension capable of auto-generating a whole RESTful API
    for your SQLAlchemy models with support for `GET`, `POST`, `PUT`, and `DELETE`.
    Most Web services won't need more than that. Another advantage to using Flask-Restless
    is the chance to extend the auto-generated methods with authentication validation,
    custom behavior, and custom queries. This is a must-learn extension!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-Restless是一个扩展，能够自动生成整个RESTful API，支持`GET`、`POST`、`PUT`和`DELETE`，用于你的SQLAlchemy模型。大多数Web服务不需要更多。使用Flask-Restless的另一个优势是可以扩展自动生成的方法，进行身份验证验证、自定义行为和自定义查询。这是一个必学的扩展！
- en: 'Let''s see how our Web service would look with Flask-Restless. We''ll also
    have to install a new library for this example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的Web服务在Flask-Restless下会是什么样子。我们还需要为这个示例安装一个新的库：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And then:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding example, we create our model, as before; then we create a
    Flask-Restless API to hold all our model APIs; and then we create a Web service
    API for `Article` with the prefix `articles` and support for the methods `GET`,
    `POST`, `PUT`, and `DELETE`, each with the expected behavior: `GET` for consulting,
    `POST` for new records, `PUT` for updates, and `DELETE` for deletes.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们创建了我们的模型，然后创建了一个Flask-Restless API来保存所有我们的模型API；然后我们为`Article`创建了一个带有前缀`articles`的Web服务API，并支持`GET`、`POST`、`PUT`和`DELETE`方法，每个方法都有预期的行为：`GET`用于查询，`POST`用于新记录，`PUT`用于更新，`DELETE`用于删除。
- en: 'In your console, type the following command to send a GET request to the API
    and test that your example is working:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中，输入以下命令发送GET请求到API，并测试您的示例是否正常工作：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As the Flask-Restless API is pretty extensive, we'll discuss briefly, a few
    common options that come in handy for most projects.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Flask-Restless API非常广泛，我们将简要讨论一些对大多数项目非常有用的常见选项。
- en: 'The `serializer`/`deserializer` parameters for `create_api` are useful whenever
    you need custom serialization/deserialization for your models. The usage is simple:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`create_api`的`serializer`/`deserializer`参数在您需要为模型进行自定义序列化/反序列化时非常有用。使用方法很简单：'
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You could use marshmallow to generate the schema, as in the preceding example.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用marshmallow生成模式，就像前面的示例一样。
- en: 'Another useful set of options for `create_api` are `include_columns` and `exclude_columns`.
    They allow you to control how much data you want returned by your API and prevent
    sensitive data from being returned. When `include_columns` is set, only the fields
    defined in it are returned by GET requests. When `exclude_columns` is set, only
    the fields that are not defined in it are returned by `GET` requests. For example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`create_api`的另一个有用的选项是`include_columns`和`exclude_columns`。它们允许您控制API返回多少数据，并防止返回敏感数据。当设置`include_columns`时，只有其中定义的字段才会被GET请求返回。当设置`exclude_columns`时，只有其中未定义的字段才会被GET请求返回。例如：'
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned what REST is, its advantages, how to create Flask
    RESTful Web Services and APIs, and how to use Flask-RESTless to make the whole
    thing work well. We also had an overview on what jQuery is and how to use it to
    send Ajax requests to consult our services. These chapter examples were pretty
    intense. Try to code the examples yourself, to assimilate them better.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了REST是什么，它的优势，如何创建Flask RESTful Web服务和API，以及如何使用Flask-Restless使整个过程顺利运行。我们还概述了jQuery是什么，以及如何使用它发送Ajax请求来查询我们的服务。这些章节示例非常深入。尝试自己编写示例代码，以更好地吸收它们。
- en: 'In the next chapter, we''ll be talking about the one way in which you can assure
    software quality: tests! We''ll learn how to test our Web applications in the
    many ways that they may be tested and how to integrate these tests into our very
    coding routines. See you there!'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论确保软件质量的一种方式：测试！我们将学习如何以各种方式测试我们的Web应用程序，以及如何将这些测试集成到我们的编码例程中。到时见！
