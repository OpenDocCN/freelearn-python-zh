- en: Chapter 3. Handling Text
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章。处理文本
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Simple text
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单文本
- en: Text font type, size, and color
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本字体类型、大小和颜色
- en: Placement of text north, south, east, and west
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本北、南、东、西的位置
- en: Placement of text right and left justification
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本右对齐和左对齐的位置
- en: Fonts available on your platform
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台上的可用字体
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Text can be tricky. We need to be able to manipulate font family, size, color,
    and placement. Placement in turn requires that we specify where text must begin
    and what areas it should be confined to.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 文本可能很棘手。我们需要能够操作字体家族、大小、颜色和位置。位置反过来又要求我们指定文本必须开始的位置以及它应该被限制在哪些区域。
- en: In this chapter, we focus on handling text on a canvas.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于处理画布上的文本。
- en: Simple text
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单文本
- en: This is how to place text onto your canvas.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何在画布上放置文本的方法。
- en: How to do it...
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In a text editor, type the code given in the following code.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中，输入以下代码。
- en: Save this as a file named `text_1.py`, inside the directory called `constr`
    again.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为名为 `text_1.py` 的文件，位于名为 `constr` 的目录中。
- en: As before, open up an X terminal or DOS window if you are using MS Windows.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，如果您使用的是 MS Windows，请打开一个 X 终端或 DOS 窗口。
- en: Change directory into `constr` - where `text_1.py` is located.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 `constr` 目录 - `text_1.py` 所在的位置。
- en: Type `text_1.py` and your program should execute.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `text_1.py`，你的程序应该会执行。
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The results are given in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下截图所示：
- en: '![How it works...](img/3845_03_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3845_03_01.jpg)'
- en: Placing text exactly where you want it on a screen can be tricky because of
    the way font height and inter-character spacing as well as the text window dimensions
    all interfere with each other. You will probably have to spend a bit of time experimenting
    to get your text as you want it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于字体高度和字符间距以及文本窗口尺寸的相互干扰，将文本精确放置在屏幕上的位置可能很棘手。你可能需要花一些时间进行实验，才能得到你想要的文本。
- en: There's more...
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Text placed onto a canvas offers a useful alternative to the often used `print`
    function as a debugging tool. You can send the values of many variables for display
    onto a canvas and watch their values change.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将文本放置到画布上提供了作为常用 `print` 函数调试工具的有用替代品。您可以将许多变量的值发送到画布上进行显示，并观察它们的值变化。
- en: As will be demonstrated in the chapter on animation, the easiest way of observing
    the interaction of complex numerical relationships is to animate them in some
    way.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如将在动画章节中演示的那样，观察复杂数值关系相互作用的最简单方法是以某种方式对它们进行动画处理。
- en: Text font type, size, and color
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本字体类型、大小和颜色
- en: In a very similar manner to the way attributes are specified for lines and shapes,
    font type, size, and color are governed by the attributes of the `create_text()`
    method.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与为线条和形状指定属性的方式非常相似，字体类型、大小和颜色由 `create_text()` 方法的属性控制。
- en: Getting ready
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: Nothing needed here.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里不需要任何东西。
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The instructions used in recipe 1 should be used.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 应使用第 1 个菜谱中的说明。
- en: Just use the name `4color_text.py` when you write, save, and execute this program.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写、保存和执行此程序时，只需使用名称 `4color_text.py`。
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The results are given in the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下截图所示：
- en: '![How it works...](img/3845_03_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3845_03_02.jpg)'
- en: A difficulty in specifying fonts is deciding which fonts are best for your needs.
    Once you have selected a font, you may discover that your particular operating
    system does not support that font. Fortunately, the designers of Tkinter made
    it somewhat bulletproof by causing it to select a suitable default font if the
    one you specified was not available.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定字体时存在的一个困难是决定哪些字体最适合你的需求。一旦你选择了字体，你可能会发现你的特定操作系统不支持该字体。幸运的是，Tkinter 的设计者通过在指定的字体不可用时选择合适的默认字体，使它变得相对防弹。
- en: There's more...
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Placement of text north, south, east, west.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 文本北、南、东、西的位置。
- en: 'We place text on a canvas using the position specifiers that Tkinter has available.
    Anchor positions, text x, y location, font size, column width, and text justification
    all interact to control the appearance of text on the page. The following screenshot
    shows the compass nomenclature used in positioning the text:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Tkinter 可用的位置指定符在画布上放置文本。锚点位置、文本 x、y 位置、字体大小、列宽和文本对齐方式都相互作用，以控制页面上的文本外观。以下截图显示了定位文本时使用的罗盘命名法：
- en: '![There''s more...](img/3845_03_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/3845_03_03.jpg)'
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Placing text onto a canvas is tricky until we understand the navigation system
    that Tkinter uses. Here is how it works. All text goes into an invisible box.
    The box is like an empty picture frame placed over a nail on a board. The Tkinter
    canvas is the board and the empty frame is the box that the text we type is going
    to fit inside. The nail is the x and y location. The empty frame can be moved
    so that the nail is in the top left-corner (North-West) or the bottom right (South-East)
    or in the center or the other corners or sides. The following screenshot shows
    the imaginary frame on the canvas that contains the text:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们理解Tkinter使用的导航系统之前，将文本放置到画布上是棘手的。以下是它是如何工作的。所有文本都进入一个不可见的框中。这个框就像一个空的画框，放在板上的钉子上。Tkinter画布是板，空的框架是我们输入的文本将要适应的框。钉子是x和y的位置。空的框架可以被移动，使得钉子在左上角（西北）或右下角（东南）或中心或其他角落或侧面。以下截图显示了包含文本的画布上的想象框架：
- en: '![Getting ready](img/3845_03_04.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/3845_03_04.jpg)'
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Execute the code and observe how the various text position specifiers
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 执行代码并观察各种文本位置指定符
- en: control the appearance of the text.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 控制文本的外观。
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The results are given in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![How it works...](img/3845_03_05.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/3845_03_05.jpg)'
- en: Alignment of text left and right justify
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本左对齐和右对齐的对齐方式
- en: We now concentrate particularly on how the justification of the text in columns
    interacts with column anchor positions.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在特别关注文本对齐与列锚点位置之间的交互。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备中
- en: The following code contains a paragraph that is much too long to fit onto a
    single line. This is where we see how the term justify lets us decide whether
    we want the text to line up to the right of the column or to its left or perhaps
    even the center. The column width, in pixels, is specified and then the text is
    made to fit.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码包含一个段落，太长以至于无法适应单行。这就是我们看到术语对齐如何让我们决定是否希望文本对齐到列的右侧或左侧，或者甚至居中。列宽度以像素为单位指定，然后文本被调整以适应。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Run the following code and observe that the height of the column is only confined
    by the height of the canvas but the width, anchor position, justification, and
    font size determine how the text gets laid out on the canvas.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下代码并观察列的高度仅限于画布的高度，但宽度、锚点位置、对齐方式和字体大小决定了文本如何在画布上布局。
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The interaction of column width, anchor position, and justification are complex
    and the clearest way to explain the results is with annotated pictures of the
    canvas display resulting from execution. The following screenshot shows Top-right
    (NE) ANCHOR POINT, no justification specified (default LEFT justification).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 列宽度、锚点位置和对齐方式之间的交互是复杂的，最清晰解释结果的方式是通过执行后画布显示的注释图片。以下截图显示了右上角(NE)锚点，未指定对齐方式（默认左对齐）。
- en: '![How it works...](img/3845_03_06.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/3845_03_06.jpg)'
- en: 'The following screenshot shows the Top-right(SE)ANCHOR POINT, no justification
    specified:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了右上角(SE)锚点，未指定对齐方式：
- en: '![How it works...](img/3845_03_07.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/3845_03_07.jpg)'
- en: 'The following screenshot shows the Bottom-right (SE) ANCHOR POINT, CENTER justification
    specified:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了右下角(SE)锚点，指定了居中对齐：
- en: '![How it works...](img/3845_03_08.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/3845_03_08.jpg)'
- en: All the fonts available on your computer
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你电脑上所有可用的字体
- en: Discover what fonts are available on your particular computer and then print
    a sample of each in the default size, all in alphabetic order.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 发现你特定计算机上可用的字体，然后按默认大小打印每种字体的样本，全部按字母顺序排列。
- en: One solution to the problem of choosing a suitable font is to conduct a trustworthy
    procedure to catalog what fonts are available on the platform you are using and
    print an example of each type onto the screen. This is what the next example does.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 解决选择合适字体问题的一个方案是执行一个可靠的程序来列出你使用平台上可用的字体，并将每种类型的示例打印到屏幕上。这就是下一个示例所做的事情。
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The instructions used in recipe 1 should be used.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 应使用配方1中使用的说明。
- en: Just use the name `fonts_available.py` when you write, save, and execute this
    program.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写、保存和执行此程序时，只需使用名称 `fonts_available.py`。
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The results are given in the following screenshot showing all fonts available
    to Python on a specific operating system.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示，显示了特定操作系统上Python可用的所有字体。
- en: '![How it works...](img/3845_03_09.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/3845_03_09.jpg)'
- en: This program is very useful when you want to select pleasing and suitable fonts.
    Fonts available can vary significantly from platform to platform. So here we make
    use of the `families()` method belonging to the **tkFont** module to put the names
    of the font families into a list named `fonts_available`. The list is sorted into
    alphabetic order using `fonts_available.sort()`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要选择令人愉悦且合适的字体时，这个程序非常有用。可用的字体在不同的平台上可能会有很大的差异。因此，在这里我们利用属于 **tkFont** 模块的
    `families()` 方法，将字体家族的名称放入名为 `fonts_available` 的列表中。该列表使用 `fonts_available.sort()`
    方法按字母顺序排序。
- en: Finally, two handy things have been used.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用了两个方便的功能。
- en: Firstly, the list of fonts has been made neat by anchoring the text to the west
    or left side by use of the `anchor= "w"` attribute of the `create_text` method.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过使用 `create_text` 方法的 `anchor= "w"` 属性将文本锚定在西部或左侧，使得字体列表看起来整洁。
- en: Secondly, it is the very useful `len()` function in `len(fonts_available)`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，是 `len()` 函数在 `len(fonts_available)` 中的非常有用。
- en: This function gives back to you ("returns" in programming parlance) the number
    of items in a list. It is very handy when defining how many times a for loop iteration
    should go on for when you have no idea what that number is going to be. In this
    example we need to write the name of a font and a text sample for each font name
    in a list that has not yet been discovered when we write the code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数会返回给您（在编程术语中称为“返回”）列表中的项目数量。当您不知道这个数字将会是多少时，它非常方便，用于定义 for 循环迭代应该进行多少次。在这个例子中，我们需要为列表中尚未发现的每个字体名称编写字体名称和文本样本的代码。
