- en: Custom Domain with SSL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带SSL的自定义域
- en: In this chapter, we are going to configure a custom domain for the quote application
    developed in the previous chapter. Configuring custom domains is an essential
    part of moving the application to the production environment because of its serverless
    nature. This process involves several operations and is different from traditional
    configuration with Apache or NGINX. We will look at the quote application that
    is already deployed in the serverless infrastructure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为上一章开发的报价应用程序配置自定义域。配置自定义域是将应用程序移动到生产环境的重要部分，因为它是无服务器的。这个过程涉及多个操作，与传统的Apache或NGINX配置不同。我们将查看已部署在无服务器基础架构中的报价应用程序。
- en: 'Topics we will cover in this chapter include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的主题包括：
- en: Configuring the custom domain with AWS Route53
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AWS Route53配置自定义域
- en: Generating SSL certificates using the Amazon Certificate Manager
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Amazon证书管理器生成SSL证书
- en: Integrating the custom domain using Zappa
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Zappa集成自定义域
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'There are some prerequisites to meet before you start this chapter. We are
    going to work with some AWS services and a real domain name. Therefore, you will
    need the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本章之前，有一些先决条件需要满足。我们将使用一些AWS服务和一个真实的域名。因此，您将需要以下内容：
- en: Ubuntu 16.04/Windows/macOS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu 16.04/Windows/macOS
- en: Pipenv tool
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pipenv工具
- en: Zappa and other Python dev packages
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zappa和其他Python开发包
- en: Registered domain
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册域名
- en: AWS account
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS账户
- en: We are going to use some Python packages, which are mentioned in later sections.
    Apart from the development environment, you will need to have your own registered
    domain and permission to update its default nameservers. Let's move to the next
    section, where we will be exploring the domain nameserver configuration with AWS
    Route 53.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一些Python包，这些包在后面的部分中提到。除了开发环境，您还需要拥有自己注册的域名和更新其默认域名服务器的权限。让我们转到下一节，在那里我们将探索与AWS
    Route 53的域名服务器配置。
- en: Configuring custom domain with AWS Route 53
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWS Route 53配置自定义域
- en: Creating a custom domain for our application requires owning a domain. Domain
    names can be purchased from a domain registrar. In our case, I purchased a domain
    name called `abdulwahid.info` from **GoDaddy** ([https://in.godaddy.com/](https://in.godaddy.com/)),
    the **domain name system** (**DNS**) service provider.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为我们的应用程序创建自定义域需要拥有一个域。域名可以从域名注册商那里购买。在我们的情况下，我从**GoDaddy**([https://in.godaddy.com/](https://in.godaddy.com/))，这个**域名系统**(**DNS**)服务提供商那里购买了一个名为`abdulwahid.info`的域名。
- en: Every domain serves over the internet through nameservers managed by the DNS
    service provider. There are many service providers that offer services to manage
    and host a website from their end. We are going to user the AWS Route 53 service.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每个域通过DNS服务提供商管理的域名服务器在互联网上提供服务。有许多服务提供商提供服务，可以从他们的端口管理和托管网站。我们将使用AWS Route 53服务。
- en: What is AWS Route 53?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是AWS Route 53？
- en: AWS Route 53 is a scalable cloud DNS web service. Route 53 is really effective
    at configuring the domain with any AWS services. It connects with infrastructure
    running on AWS as well as outside of AWS. Route 53 provides a variety of routings,
    such as latency base routing, Geo DNS, geoproximity, and weighted round robin.
    All these routings can be combined to provide low-latency bandwidth. Route 53
    provides a domain name registration service as well. If we register a domain on
    AWS Route 53, then we don't need to manage the DNS configuration. All DNS configurations
    would automatically use AWS services.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Route 53是一种可扩展的云DNS网络服务。Route 53在配置与任何AWS服务的域名方面非常有效。它连接到在AWS上运行的基础架构以及AWS之外的基础架构。Route
    53提供各种路由，如基于延迟的路由、地理DNS、地理近似和加权轮询。所有这些路由可以组合在一起，以提供低延迟带宽。Route 53还提供域名注册服务。如果我们在AWS
    Route 53上注册域名，那么我们就不需要管理DNS配置。所有DNS配置将自动使用AWS服务。
- en: But we didn't register our domain on Route 53, so we need to replace the default
    GoDaddy nameservers with Route 53\. In the next section, we'll discuss how to
    change the nameservers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们没有在Route 53上注册我们的域，所以我们需要用Route 53替换默认的GoDaddy域名服务器。在下一节中，我们将讨论如何更改域名服务器。
- en: Changing nameservers to Route 53
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将域名服务器更改为Route 53
- en: We are going to move control for the existing domain to Route 53\. This process
    requires changing the default nameservers of the domain `abdulwhaid.info` to the
    new nameservers created by Route 53.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把现有域的控制权转移到Route 53。这个过程需要将域名`abdulwhaid.info`的默认域名服务器更改为Route 53创建的新域名服务器。
- en: 'With reference to the AWS official documentation ([https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/CreatingHostedZone.html](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/CreatingHostedZone.html))
    about creating a hosted zone for configuring Route 53 with an existing domain
    on a different registrar, perform the  following steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 参考AWS官方文档([https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/CreatingHostedZone.html](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/CreatingHostedZone.html))关于在不同的注册商上为Route
    53配置现有域名创建托管区域，执行以下步骤：
- en: Sign into the AWS Console and open the Route 53 console at [https://console.aws.amazon.com/route53/.](https://console.aws.amazon.com/route53/)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录AWS控制台，在[https://console.aws.amazon.com/route53/.](https://console.aws.amazon.com/route53/)打开Route
    53控制台
- en: If you are new to Route 53, choose Get Started Now under DNS Management**.**
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您是Route 53的新用户，请在DNS管理下选择立即开始**。**
- en: 'If you are already using Route 53, then choose Hosted zones in the left navigation
    pane, as shown in the following screenshot:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经使用Route 53，请在左侧导航窗格中选择托管区域，如下面的屏幕截图所示：
- en: '![](img/00076.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00076.jpeg)'
- en: 'Now, from the hosted zones page, click on Create Hosted Zone with the the domain `abdulwahid.info`,
    as shown in the following screenshot:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从托管区域页面，点击使用域`abdulwahid.info`创建托管区域，如下面的屏幕截图所示：
- en: '![](img/00077.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00077.jpeg)'
- en: 'Once you have created the hosted zone for the domain `abdulwahid.info`, Route
    53 will create two records,  **Nameservers** (**NS**) and **Start Of Authority**
    (**SOA**), as shown in the following screenshot:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您为域名 `abdulwahid.info` 创建了托管区域，Route 53 将创建两个记录，**域名服务器** (**NS**) 和 **授权起始**
    (**SOA**)，如下截图所示：
- en: '![](img/00078.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00078.jpeg)'
- en: 'Now, we need to use the NS records and replace the default NS record generated
    at the domain registrar (that is, GoDaddy), where we created the domain `abdulwahid.info`.The
    following is the screenshot of the default NS records:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要使用 NS 记录并替换在域名注册商（即 GoDaddy）生成的默认 NS 记录，在那里我们创建了域名 `abdulwahid.info`。以下是默认
    NS 记录的截图：
- en: '![](img/00079.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00079.jpeg)'
- en: 'Change the default NS to Custom and enter the NS records generated at Route
    53, as shown in the following screenshot:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将默认 NS 更改为自定义，并输入在 Route 53 生成的 NS 记录，如下截图所示：
- en: '![](img/00080.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00080.jpeg)'
- en: Click on Save, and we are done. Now it will take some time to process by the
    domain registrar. You will get a confirmation email from the domain registrar.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击保存，我们完成了。现在需要一些时间由域名注册商处理。您将收到来自域名注册商的确认电子邮件。
- en: Route 53 manage the route traffic using hosted zones for a specific domain.
    A hosted zone is like a container that holds information about the domain and
    knows how to route the traffic on the internet.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Route 53 通过特定域名的托管区域管理路由流量。托管区域就像一个容器，包含有关域名的信息，并知道如何在互联网上路由流量。
- en: Once you get the confirmation email, then the domain `abdulwahid.info` will
    be managed by Route 53. Let's move to the next section to learn more about the
    SSL certificate configuration using AWS Certificate Manager.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您收到确认电子邮件，域名 `abdulwahid.info` 将由 Route 53 管理。让我们转到下一节，了解如何使用 AWS 证书管理器配置
    SSL 证书。
- en: Generating SSL certificates using AWS Certificate Manager
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWS 证书管理器生成 SSL 证书
- en: SSL provides security for your web server and application users. With the help
    of SSL, you can prevent hacker attacks on your data that's communicated between
    your web server and browser. Before implementing the SSL security into our application,
    let's understand some basic methodologies about SSL.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: SSL 为您的 Web 服务器和应用程序用户提供安全性。借助 SSL，您可以防止黑客对在 Web 服务器和浏览器之间通信的数据进行攻击。在将 SSL 安全性应用到我们的应用程序之前，让我们了解一些关于
    SSL 的基本方法。
- en: What is SSL?
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SSL 是什么？
- en: '**SSL** (**Secure Sockets Layer**) is a standard security protocol used to
    secure the communication between a web server and browser by encrypting the data.
    SSL will make sure the data transmitted from browsers to your web server is encrypted.
    In order to create an SSL connection, we require to generate SSL certificates
    and configure our web server to serve under the SSL layer. The next section will
    discuss  SSL certificates.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**SSL** (**安全套接字层**) 是一种标准的安全协议，用于通过加密数据保护 Web 服务器和浏览器之间的通信。SSL 将确保从浏览器传输到您的
    Web 服务器的数据是加密的。为了创建 SSL 连接，我们需要生成 SSL 证书并配置我们的 Web 服务器以在 SSL 层下提供服务。下一节将讨论 SSL
    证书。'
- en: What are SSL certificates?
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 SSL 证书？
- en: 'For creating an SSL connection, we need an SSL certificate. SSL certificates
    can be generated from the **Certificate Authority** (**CA**). Before generating
    the certificate, we need to provide information about our website and business
    details. Based on this information, two cryptographic keys will be generated:
    a public and a private key.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建 SSL 连接，我们需要一个 SSL 证书。SSL 证书可以从 **证书颁发机构** (**CA**) 生成。在生成证书之前，我们需要提供有关我们的网站和业务详细信息。根据这些信息，将生成两个加密密钥：公钥和私钥。
- en: Now using the public key and business details, we need to process a **Certificate
    Signing Request** (**CSR**) with the CA. Once the CA has authorized our details
    successfully, it will issue an SSL certificate that matches our private key.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用公钥和业务详细信息，我们需要与 CA 处理一个 **证书签名请求** (**CSR**)。一旦 CA 成功授权我们的详细信息，它将颁发与我们的私钥匹配的
    SSL 证书。
- en: Now, we are ready to configure the SSL certificate with our application. This
    is process is a traditional way of generating an SSL certificate. But we are going
    to use Amazon Certificate Manager to generate an SSL certificate.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备为我们的应用程序配置 SSL 证书。这是生成 SSL 证书的传统方式。但是我们将使用 Amazon 证书管理器来生成 SSL 证书。
- en: Generating SSL certificate using Amazon Certificate Manager (ACM)
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon 证书管理器 (ACM) 生成 SSL 证书
- en: 'There are several ways of generating an SSL certificate. The following are
    some of the ways you can acquire an SSL/TSL certificate for your application:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种生成 SSL 证书的方法。以下是一些获取应用程序的 SSL/TSL 证书的方法：
- en: You can buy an SSL certificate from the SSL Certificate Authority.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以从 SSL 证书颁发机构购买 SSL 证书。
- en: You can generate a free SSL/TSL certificate on your own by using **Let's Encrypt**
    ([https://letsencrypt.org/](https://letsencrypt.org/)). Let's Encrypt is an open
    Certificate Authority that provides free SSL/TSL certificates.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过使用 **Let's Encrypt** ([https://letsencrypt.org/](https://letsencrypt.org/))
    自行生成免费的 SSL/TSL 证书。Let's Encrypt 是一个提供免费 SSL/TSL 证书的开放式证书颁发机构。
- en: You can generate an SSL using **AWS Certificate Manager** (**ACM**). We are
    going to use ACM to generate an SSL certificate for our application.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用 **AWS 证书管理器** (**ACM**) 生成 SSL。我们将使用 ACM 为我们的应用程序生成 SSL 证书。
- en: ACM is a service that manages and creates SSL/TSL certificates for  AWS-based
    services and applications. An ACM certificate works with multiple domain names
    and subdomains. You can also use ACM to create a wildcard SSL.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: ACM 是一个管理和创建 AWS 服务和应用程序的 SSL/TSL 证书的服务。ACM 证书适用于多个域名和子域名。您还可以使用 ACM 创建通配符 SSL。
- en: ACM is strictly linked with **AWS Certificate Manager Private Certificate Authority**
    (**ACM PCA**). ACM PCA is responsible for validating the domain authority and
    issuing the certificate.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: ACM 严格与 **AWS 证书管理器私有证书颁发机构** (**ACM PCA**) 相关联。ACM PCA 负责验证域名授权并颁发证书。
- en: 'Now, we are going to generate an ACM certificate for our domain and subdomain.
    Follow these steps to create an ACM certificate:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为我们的域和子域生成一个ACM证书。按照以下步骤创建ACM证书：
- en: Please note, API Gateway supports ACM certificates from one region only. Hence,
    we are going to use the **US East **region. You can read more about this at [https://github.com/Miserlou/Zappa/pull/1142](https://github.com/Miserlou/Zappa/pull/1142).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，API Gateway仅支持来自一个地区的ACM证书。因此，我们将使用**US East**地区。您可以在[https://github.com/Miserlou/Zappa/pull/1142](https://github.com/Miserlou/Zappa/pull/1142)上阅读更多信息。
- en: Sign into the AWS Console and open the ACM console at [https://ap-south-1.console.aws.amazon.com/acm](https://ap-south-1.console.aws.amazon.com/acm).
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录AWS控制台，在[https://ap-south-1.console.aws.amazon.com/acm](https://ap-south-1.console.aws.amazon.com/acm)打开ACM控制台。
- en: 'If you are new to AWS ACM, then click on Get Started under Provision certificates, or
    if you are already using AWS ACM, then choose Request a certificate, as shown
    in the following screenshot:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您是AWS ACM的新用户，请在“Provision certificates”下点击“Get Started”，如果您已经在使用AWS ACM，请选择“Request
    a certificate”，如下面的截图所示：
- en: '![](img/00081.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00081.jpeg)'
- en: Here, we are going to choose Request a public certificate.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将选择请求公共证书。
- en: You can read more about public certificate at [https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html](https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html](https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html)上阅读更多关于公共证书的信息。
- en: 'On the next page, you need to give the details of your domain names. We are
    going to request a wildcard certificate against our domain using an asterisk (*)
    as a subdomain name. Hence, this certificate can be used to protect multiple sites
    under the same domain. The following is the screenshot for adding the domain name:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页，您需要提供您的域名的详细信息。我们将使用通配符(*)作为子域名来针对我们的域请求一个通配符证书。因此，这个证书可以用来保护同一域名下的多个站点。以下是添加域名的截图：
- en: '![](img/00082.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00082.jpeg)'
- en: 'On the next page, you need to choose a validation method. There are two types
    of methods available, as follows:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页，您需要选择验证方法。有两种类型的方法可用，如下所示：
- en: '**DNS validation:**  This method requires permission to modify the DNS records
    for the domains in your certificate, so that it can directly validate with the
    record set.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DNS验证：**此方法需要修改证书中域的DNS记录的权限，以便它可以直接验证记录集。'
- en: '**Email validation: **This method can be used if you do not have permission
    to modify the DNS records. Hence, you can validate the domain with registered
    emails recorded with the domain registrar.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件验证：**如果您没有权限修改DNS记录，则可以使用此方法。因此，您可以使用与域名注册商记录的注册电子邮件来验证域。'
- en: 'We are going to use the DNS validation method. This is because we own the DNS
    access in the Route 53 hosted zone because of the mapped nameserver at the domain
    registrar. DNS validation is straightforward. Have a look at the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用DNS验证方法。这是因为我们拥有Route 53托管区中的DNS访问权限，这是因为在域名注册商处有映射的域名服务器。DNS验证很简单。请看下面的截图：
- en: '![](img/00083.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00083.jpeg)'
- en: 'Now, we are ready to go. Clicking on Review will display the selected configurations,
    as shown in the following screenshot:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好了。点击“Review”将显示所选的配置，如下面的截图所示：
- en: '![](img/00084.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00084.jpeg)'
- en: 'Once you have clicked on Confirm and request from the Review page, you need
    to complete the validation process. The following screenshot states that the validation
    status is pending, so we need to perform the validation by expanding the domain
    section:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您从“Review”页面点击“确认并请求”，您需要完成验证过程。下面的截图显示验证状态为待定，因此我们需要通过展开域部分来执行验证：
- en: '![](img/00085.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00085.jpeg)'
- en: 'Once you expand the domain section, you will see some instructions to complete
    the validation process. We chose the DNS validation method. Therefore, this method
    needs to add a CNAME record to the DNS configuration. As per the following screenshot,
    you can perform the action to update the DNS configuration with the given CNAME
    by clicking on the Create record in Route 53 button:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开域部分后，您将看到一些完成验证过程的说明。我们选择了DNS验证方法。因此，这种方法需要向DNS配置添加一个CNAME记录。根据下面的截图，您可以通过点击“在Route
    53中创建记录”按钮来执行更新DNS配置的操作，以给定的CNAME：
- en: '![](img/00086.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00086.jpeg)'
- en: 'Once you have clicked on Create record in Route 53, it will raise a confirmation
    popup with the CNAME record, as shown in the following screenshot:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您点击了在Route 53中创建记录，它将弹出一个确认弹窗，显示CNAME记录，如下面的截图所示：
- en: '![](img/00087.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00087.jpeg)'
- en: 'Once you click on the Create button, it automatically updates the DNS configuration
    in Route 53 with the given CNAME record. You will see the success message, as
    shown in the following screenshot:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建”按钮后，它会自动使用给定的CNAME记录更新Route 53中的DNS配置。您将看到成功消息，如下面的截图所示：
- en: '![](img/00088.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00088.jpeg)'
- en: 'Click on Continue, and we are done. You will be redirected to the certificates
    dashboard page, as shown in the following screenshot:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“继续”，我们完成了。您将被重定向到证书仪表板页面，如下面的截图所示：
- en: '![](img/00089.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00089.jpeg)'
- en: ACM CA has successfully issued an SSL certificate against your domain. As you
    can see, the status in green states Issued. Now, it's time to configure the domain
    and certificate with our application. In the next section, we are going to configure
    a subdomain with the issued SSL certificate with our quote API application.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ACM CA已成功为您的域颁发了SSL证书。正如您所看到的，绿色状态中显示了“已颁发”。现在，是时候配置域和证书与我们的应用程序了。在下一节中，我们将使用我们的报价API应用程序配置一个子域与已颁发的SSL证书。
- en: Integrating custom domain using Zappa
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zappa集成自定义域
- en: 'Zappa supports custom domain names and subdomain integrations with SSL certificates.
    We have discussed the sources of SSL/TSL certificate generation in the previous
    sections. Zappa can deploy domains with the following CAs:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa支持自定义域名和子域集成与SSL证书。我们已经在前几节中讨论了SSL/TSL证书生成的来源。Zappa可以使用以下CA部署域：
- en: Your own purchased SSL from the Certificate Authority provider
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您自己从证书颁发机构提供商购买的SSL
- en: Let's Encrypt
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Let's Encrypt
- en: AWS
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS
- en: You can read more details about the deployment of the domain with the aforementioned
    CAs at: [https://github.com/Miserlou/Zappa#ssl-certification](https://github.com/Miserlou/Zappa#ssl-certification).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中阅读有关使用上述CA部署域的更多详细信息：[https://github.com/Miserlou/Zappa#ssl-certification](https://github.com/Miserlou/Zappa#ssl-certification)。
- en: We are going to use the AWS Certificate Authority SSL certificate. We have already
    generated the ACM certificate in the last section. It's now time to integrate
    the ACM certificate with a subdomain for our application.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用AWS证书颁发机构SSL证书。我们已经在上一节中生成了ACM证书。现在是时候将ACM证书与我们的应用程序的子域集成了。
- en: Let's move to the next section, where we are going to configure our quote API
    application with a subdomain and ACM certificate.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到下一节，在那里我们将使用子域和ACM证书配置我们的报价API应用程序。
- en: Deploying to a domain with ACM certificate
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ACM证书部署到域
- en: As we have already issued the ACM certificate, now let's configure our application
    to the desired domain and perform the deployment process. Zappa provides a `domain`attribute
    to configure the domain name for the application and `certificate_arn`for the
    ACM certificate. You need to configure these two attributes in `zappa_settings.json`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经颁发了ACM证书，现在让我们将应用程序配置到所需的域并执行部署过程。Zappa提供了一个`domain`属性来配置应用程序的域名和`certificate_arn`用于ACM证书。您需要在`zappa_settings.json`中配置这两个属性。
- en: 'Before that, we need to get the value of `certificate_arn`, as it is the **ARN**
    (**Amazon Resource Name**) generated by ACM for the domain for which we had issued
    the certificate. You can get the value of the ARN from the ACM dashboard by expanding
    the domain section, as shown in the following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前，我们需要获取`certificate_arn`的值，因为它是ACM为我们颁发证书的域生成的**ARN**（**Amazon资源名称**）。您可以从ACM仪表板中展开域部分获取ARN的值，如下截图所示：
- en: '![](img/00090.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00090.jpeg)'
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'File—`zappa_settings.json`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '文件—`zappa_settings.json`:'
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, we configure the domain as `quote.abdulwahid.info` and set `certificate_arn`.
    Now, let''s deploy the application using the `zappa deploy <stage_name>` command,
    as we are deploying the application for the first time. Have a look at the following
    code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将域配置为`quote.abdulwahid.info`并设置`certificate_arn`。现在，让我们使用`zappa deploy
    <stage_name>`命令部署应用程序，因为我们是第一次部署应用程序。看一下以下代码：
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, the application was deployed on the randomly generated API
    endpoint. But in order to configure the application, we need to associate the
    API Gateway with the ACM certificate using the `zappa certify` command, as shown
    in the following log snippet:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，应用程序已部署在随机生成的API端点上。但是，为了配置应用程序，我们需要使用`zappa certify`命令将API网关与ACM证书关联起来，如下日志片段所示：
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once you run the `zappa certify` command, it will create and associate the API
    Gateway with the configured certificate.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行`zappa certify`命令，它将创建并将API网关与配置的证书关联起来。
- en: Now, let's update the deployment once again, using the `zappa update <stage_name>` command,
    as shown in the following code.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再次更新部署，使用`zappa update <stage_name>`命令，如下所示。
- en: '[PRE4]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That's it. As you can see, our application is live on `https://quote.abdulwahid.info`.
    Now, let's have a look at the execution in the next section.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。正如您所看到的，我们的应用程序现在在`https://quote.abdulwahid.info`上运行。现在，让我们在下一节中查看执行情况。
- en: Application execution with the configured domain
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用配置的域执行应用程序
- en: We have deployed and configured our quote API application on a serverless infrastructure.
    Let's see the API execution using the Postman API client.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在无服务器基础架构上部署和配置了我们的报价API应用程序。让我们使用Postman API客户端查看API执行。
- en: Daily quote API
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每日报价API
- en: 'We designed this API (`https://quote.abdulwahid.info/quote?type=daily`) to
    return a quote on a daily basis. Our configured scheduler will update the schedule
    UTC time every day. Have a look at the following cURL log snippet:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设计了这个API（`https://quote.abdulwahid.info/quote?type=daily`）以每天返回一条报价。我们配置的调度程序将每天更新UTC时间表。看一下以下cURL日志片段：
- en: '[PRE5]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Random quote API
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机报价API
- en: 'The random quote API (`https://quote.abdulwahid.info/quote?type=random`) will
    return a random quote on every request. Have a look at the following cURL log
    snippet:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 随机报价API（`https://quote.abdulwahid.info/quote?type=random`）将在每次请求时返回一条随机报价。看一下以下cURL日志片段：
- en: '[PRE6]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: That's it. We have successfully deployed our application over a serverless architecture.
    We also configured the custom domain with our application. This will be live for
    testing purposes.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我们已成功在无服务器架构上部署了我们的应用程序。我们还配置了自定义域与我们的应用程序。这将用于测试目的。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about creating a custom domain and configuring the
    domain with Route 53\. Using Route 53, we managed the domain DNS configurations.
    To generate the SSL certificate, we used ACM, which is easy and straightforward
    to use. Later, we configured Zappa with a domain using the ARN of the generated
    ACM certificate. I hope this chapter helps you understand the mechanism of configuring
    a custom domain for your application.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建自定义域并配置域与Route 53集成。使用Route 53，我们管理了域DNS配置。为了生成SSL证书，我们使用了ACM，这很容易且直接。随后，我们使用生成的ACM证书的ARN配置了Zappa与域的集成。希望本章能帮助您了解为应用程序配置自定义域的机制。
- en: Now we are going to learn more about scheduling a task and the asynchronous
    execution of a method on AWS Lambda. We are going to enhance the quote API application
    further with a mobile subscription model. Let's gear up for the next chapter to
    dive into the world of asynchronous using AWS Lambda.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要学习更多关于在AWS Lambda上安排任务和异步执行方法的知识。我们将进一步完善报价API应用程序，加入移动订阅模型。让我们为下一章做好准备，深入探讨使用AWS
    Lambda进行异步操作的世界。
- en: Questions
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is AWS Route 53?
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Route 53是什么？
- en: What do we mean by domain nameservers?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 域名服务器是什么意思？
- en: How does ACM secure the hosted API on AWS Lambda?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ACM如何保护在AWS Lambda上托管的API？
