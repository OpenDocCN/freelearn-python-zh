- en: Chapter 34
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第34章
- en: Introduction to Subprograms
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 子程序简介
- en: 34.1 What Exactly is a Subprogram?
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 34.1 什么是子程序？
- en: In computer science, a subprogram is a block of statements packaged as a unit
    that performs a specific task. A subprogram can be called several times within
    a program, whenever that specific task needs to be performed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中，子程序是一块被封装成单元的语句块，执行特定的任务。子程序可以在程序中被调用多次，每当需要执行该特定任务时。
- en: In Python, a built-in function is an example of such a subprogram. Take the
    well-known abs() function, for example. It consists of a block of statements packaged
    as a unit under the name “abs”, and it performs a specific task—it returns the
    absolute value of a number.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，内置函数就是一个这样的子程序示例。以众所周知的abs()函数为例。它由一个名为“abs”的单元封装的语句块组成，并执行特定的任务——它返回一个数的绝对值。
- en: '![](img/notice.jpg)If you are wondering what kind of statements might exist
    inside the function abs(), here is a possible block of statements.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)如果你想知道函数abs()内部可能存在哪些语句，这里是一个可能的语句块。'
- en: 'if number < 0:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 'if number < 0:'
- en: return number * (-1)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数值 * (-1)
- en: 'else:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: return number
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数值
- en: 'Generally speaking, there are two kinds of subprograms: functions and procedures.
    The difference between a function and a procedure is that a function returns a
    result, whereas a procedure doesn''t. However, in some computer languages, this
    distinction may not quite be apparent. There are languages in which a function
    can also behave as a procedure and return no result, and there are languages in
    which a procedure can return one or even more than one result.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，有两种类型的子程序：函数和过程。函数和过程之间的区别在于函数返回一个结果，而过程不返回。然而，在某些计算机语言中，这种区别可能并不明显。有些语言中，函数也可以表现得像过程并且不返回结果，而有些语言中，过程可以返回一个或甚至多个结果。
- en: '![](img/notice.jpg)Depending on the computer language being used, the terms
    “function” and “procedure” may be different. For example, in Visual Basic you
    can find them as “functions” and “subprocedures”, in FORTRAN as “functions” and
    “subroutines”, whereas in Python, the preferred terms are usually “functions”
    and “void functions”.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)根据所使用的计算机语言，术语“函数”和“过程”可能不同。例如，在Visual Basic中你可以找到它们作为“函数”和“子过程”，在FORTRAN中作为“函数”和“子例程”，而在Python中，通常首选的术语是“函数”和“void函数”。'
- en: 34.2 What is Procedural Programming?
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 34.2 什么是过程式编程？
- en: Suppose you were assigned a project to solve the drug abuse problem in your
    area. One possible approach (which could prove very difficult or even impossible)
    would be to try to solve this problem by yourself!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你被分配了一个项目来解决你所在地区的药物滥用问题。一个可能的方法（这可能非常困难甚至不可能）就是试图自己解决这个问题！
- en: A better approach, however, would be to subdivide the large problem into smaller
    subproblems such as prevention, treatment, and rehabilitation, each of which could
    be further subdivided into even smaller subproblems, as shown in Figure 34–1.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，更好的方法是将大问题细分为更小的子问题，如预防、治疗和康复，每个子问题都可以进一步细分为更小的子问题，如图34–1所示。
- en: '![Image](img/chapter34-01.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter34-01.png)'
- en: Figure 34–1 A problem can be subdivided into smaller problems
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图34–1 一个问题可以被细分为更小的问题
- en: 'As the supervisor of this project, you could rent a building and establish
    within it three departments: the prevention department, with all of its subdepartments;
    the treatment department, with all of its subdepartments; and the rehabilitation
    department with all of its subdepartments. Finally, you would hire staff (specialists
    from a variety of fields), you would build teams and employ them to do the job
    for you!'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作为这个项目的管理者，你可以租用一栋楼并在其中建立三个部门：预防部门，包括其所有子部门；治疗部门，包括其所有子部门；以及康复部门，包括其所有子部门。最后，你会雇佣员工（来自各个领域的专家），你会组建团队并雇佣他们为你完成工作！
- en: Procedural programming does exactly the same thing. It subdivides an initial
    problem into smaller subproblems, and each subproblem is further subdivided into
    smaller subproblems. Finally, for each subproblem a small subprogram is written,
    and the main program (as does the supervisor), calls (employs) each of them to
    do a different part of the job.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 过程式编程正是如此。它将一个初始问题细分为更小的子问题，每个子问题进一步细分为更小的子问题。最后，为每个子问题编写一个小子程序，主程序（就像管理者一样），调用（雇佣）它们来完成不同的工作部分。
- en: 'Procedural programming offers several advantages:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 过程式编程提供了一些优点：
- en: ►It enables programmers to reuse the same code whenever necessary, without the
    need for rewriting or copying it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: ►它使程序员在必要时能够重用相同的代码，而无需重新编写或复制。
- en: ►It is relatively easy to implement.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: ►它相对容易实现。
- en: ►It helps programmers follow the flow of execution more easily, simplifying
    the debugging process.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ►它有助于程序员更容易地遵循执行流程，简化调试过程。
- en: '![](img/notice.jpg)A very large program can prove very difficult to debug and
    maintain when it is all in one piece. For this reason, it is often easier to subdivide
    it into smaller subprograms, each of which performs a clearly defined process.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)当一个非常大的程序全部集中在一块时，调试和维护可能会非常困难。因此，将其细分为更小的子程序通常更容易，每个子程序执行一个明确定义的过程。'
- en: 34.3 What is Modular Programming?
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 34.3 什么是模块化编程？
- en: In modular programming, subprograms of common functionality can be grouped together
    into separate modules, and each module can have its own set of data. Therefore,
    a program can consist of more than one part, and each of those parts (modules)
    can contain one or more smaller parts (subprograms).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在模块化编程中，具有共同功能的子程序可以组合成单独的模块，并且每个模块可以有自己的数据集。因此，一个程序可以由多个部分组成，而这些部分（模块）中的每一个都可以包含一个或多个更小的部分（子程序）。
- en: '![](img/notice.jpg)The math module is such an example. It contains subprograms
    of common functionality (related to Math), such as fsum(), sqrt(), sin(), cos(),
    tan(), and many more.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)数学模块就是这样一种例子。它包含与数学相关的共同功能子程序（如fsum()、sqrt()、sin()、cos()、tan()等）。'
- en: If you were to use modular programming in the previous drug problem example,
    then you could have three separate buildings—one to host the prevention department
    and all of its subdepartments, a second one to host the treatment department and
    all of its subdepartments, and a third one to host the rehabilitation department
    and all of its subdepartments (as shown in Figure 34–2). These three buildings
    could be thought of as three different modules in modular programming, each of
    which would contain subprograms of common functionality.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在先前的药物问题示例中使用模块化编程，那么可以有三个独立的建筑——一个用于预防部门及其所有子部门，第二个用于治疗部门及其所有子部门，第三个用于康复部门及其所有子部门（如图34-2所示）。这三个建筑可以被视为模块化编程中的三个不同模块，每个模块都包含具有共同功能的子程序。
- en: '![Image](img/chapter34-02.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter34-02.png)'
- en: Figure 34–2 Subprograms of common functionality can be grouped together into
    separate modules.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图34-2 具有共同功能的子程序可以组合成单独的模块。
- en: '34.4 Review Questions: True/False'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 34.4 复习问题：正确/错误
- en: Choose true or false for each of the following statements.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对以下每个陈述选择正确或错误。
- en: 1)A subprogram is a block of statements packaged as a unit that performs a specific
    task.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 1)子程序是一块打包成单元的语句块，执行特定任务。
- en: '2)In general, there are two kinds of subprograms: functions and procedures.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 2)一般来说，有两种子程序：函数和过程。
- en: 3)In general, the difference between a function and a procedure is that a procedure
    returns a result, whereas a function does not.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 3)一般来说，函数和过程的区别在于过程返回一个结果，而函数则不返回。
- en: 4)Python supports only procedures.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 4)Python只支持过程。
- en: 5)Procedural programming subdivides the initial problem into smaller subproblems.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 5)过程式编程将初始问题细分为更小的子问题。
- en: 6)An advantage of procedural programming is the ability to reuse the same code,
    without the need for rewriting or copying it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 6)过程式编程的一个优点是能够重用相同的代码，而无需重新编写或复制它。
- en: 7)Procedural programming helps programmers follow the flow of execution more
    easily.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 7)过程式编程有助于程序员更容易地遵循执行流程。
- en: 8)Modular programming increases program development speed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 8)模块化编程可以提高程序开发速度。
- en: 9)In modular programming, subprograms of common functionality are grouped together
    into separate modules.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 9)在模块化编程中，具有共同功能的子程序被组合成单独的模块。
- en: 10)In modular programming, each module can have its own set of data.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 10)在模块化编程中，每个模块可以有自己的数据集。
- en: 11)Modular programming uses different structures than structured programming
    does.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 11)模块化编程使用与结构化编程不同的结构。
- en: 12)A program can consist of more than one module.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 12)一个程序可以由多个模块组成。
