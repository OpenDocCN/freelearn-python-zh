- en: Matplotlib Charts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Matplotlib图表
- en: In this chapter, we will create beautiful charts that visually represent data.
    Depending on the format of the data source, we can plot one or more columns of
    data in the same chart.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建美观的图表，这些图表可以直观地表示数据。根据数据源的格式，我们可以在同一图表中绘制一个或多个数据列。
- en: We will be using the Python `Matplotlib` module to create our charts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Python的`Matplotlib`模块来创建我们的图表。
- en: In a company I worked for, we had an existing program that collected data for
    analysis. It was a manual process to load the data into Excel and then generate
    charts within Excel.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我工作的一家公司，我们有一个现有的用于收集分析数据的程序。这是一个手动过程，需要将数据加载到Excel中，然后在Excel中生成图表。
- en: I automated the entire process using Python and `Matplotlib`. With only one
    click of the mouse, the data got backed up to a network drive and, with another
    click, the charts got automatically created.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用Python和`Matplotlib`自动化了整个流程。只需点击一下鼠标，数据就会被备份到网络驱动器上，再点击一下，图表就会自动创建。
- en: In order to create these graphical charts, we need to download additional Python
    modules, and there are several ways to install them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建这些图形图表，我们需要下载额外的Python模块，并且有几种安装方法。
- en: This chapter will explain how to download the `Matplotlib` Python module along
    with all the other requisite Python modules and the ways in which to do this.
    After we install the required modules, we will then create our own Pythonic charts.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将解释如何下载`Matplotlib`Python模块以及所有其他必需的Python模块和下载方法。在我们安装所需的模块后，我们将创建自己的Python图表。
- en: Visually representing data makes our GUI very useful and great looking and greatly
    enhances your coding skills. It is also very useful for your management team to
    represent data visually.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化表示数据使我们的GUI非常实用且外观出色，并极大地提高了你的编码技能。对于你的管理团队来说，用可视化方式表示数据也非常有用。
- en: 'Here is an overview of the Python modules for this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是本章中Python模块的概述：
- en: '![](img/4d8ad072-47b8-4b60-b14a-0f730fd2fbb6.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4d8ad072-47b8-4b60-b14a-0f730fd2fbb6.png)'
- en: In this chapter, we will create beautiful charts using Python 3.7 and above
    with the `Matplotlib` module.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Python 3.7及以上版本和`Matplotlib`模块创建美观的图表。
- en: The following URL, [http://matplotlib.org/users/screenshots.html](http://matplotlib.org/users/screenshots.html),
    is a great place to begin exploring the world of `Matplotlib`, and it teaches
    us how to create many charts that are not presented in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下URL，[http://matplotlib.org/users/screenshots.html](http://matplotlib.org/users/screenshots.html)，是一个开始探索`Matplotlib`世界的绝佳地方，它教我们如何创建本章未展示的许多图表。
- en: 'We will cover the following recipes:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍以下食谱：
- en: Installing Matplotlib using pip with the .whl extension
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用pip和`.whl`扩展安装Matplotlib
- en: Creating our first chart
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个图表
- en: Placing labels on charts
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图表上放置标签
- en: How to give the chart a legend
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何给图表添加图例
- en: Scaling charts
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整图表的比例
- en: Adjusting the scale of charts dynamically
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态调整图表的比例
- en: Installing Matplotlib using pip with the .whl extension
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pip和`.whl`扩展安装Matplotlib
- en: The usual way to download additional Python modules is by using `pip`. The `pip`
    module comes pre-installed with the latest version of Python (3.7 and above).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下载额外的Python模块的常用方法是使用`pip`。`pip`模块是预安装在Python最新版本（3.7及以上）中的。
- en: If you are using an older version of Python, you may have to download both `pip`
    and `setuptools` by yourself.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是较旧的Python版本，你可能需要自己下载`pip`和`setuptools`。
- en: This recipe will show how to successfully install `Matplotlib` using `pip`.
    We will be using the `.whl` extension for this installation, so this recipe will
    also show you how to install the `wheel` module.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将展示如何成功使用`pip`安装`Matplotlib`。我们将使用`.whl`扩展名进行此安装，因此这个食谱还将向你展示如何安装`wheel`模块。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: First, let's find out whether you have the `wheel` module already installed.
    The `wheel` module is necessary to download and install Python packages that have
    the `.whl` extension.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们找出你是否已经安装了`wheel`模块。`wheel`模块是下载和安装具有`.whl`扩展名的Python包所必需的。
- en: We can find out what modules we have currently installed using `pip`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`pip`找出我们目前安装了哪些模块。
- en: 'From the Windows Command Prompt, run the `pip list` command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从Windows命令提示符中运行`pip list`命令：
- en: '![](img/8eb31279-9941-480b-b6f8-9a00087e4fa0.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8eb31279-9941-480b-b6f8-9a00087e4fa0.png)'
- en: 'If you get an error running this command, you might want to check whether Python
    is on your environmental path. If it currently isn''t, add it to System variables
    | Path (bottom-left) by clicking the Edit... button. Then, click the New button
    (top-right) and type in the path to your Python installation. Also, add the `C:\Python37\Scripts`
    directory, as the `pip.exe` file is located there:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行此命令时遇到错误，你可能需要检查 Python 是否在你的环境路径上。如果目前不在，可以通过点击 Edit... 按钮将其添加到系统变量 |
    路径（左下角）。然后，点击新建按钮（右上角）并输入你的 Python 安装路径。此外，添加 `C:\Python37\Scripts` 目录，因为 `pip.exe`
    文件就位于那里：
- en: '![](img/6120db72-3fad-4835-866b-88e7b0bf6aeb.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6120db72-3fad-4835-866b-88e7b0bf6aeb.png)'
- en: If you have more than one version of Python installed, it is a good idea to
    move Python 3.7 to the top of the list. When we type `pip install <module>`, the
    first version found in *System variables* | **Path** might be used and you might
    get some unexpected errors if an older version of Python is located above Python
    3.7.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你安装了多个版本的 Python，将 Python 3.7 移到列表的顶部是个好主意。当我们输入 `pip install <module>` 时，可能会使用在
    *系统变量* | **路径** 中找到的第一个版本，如果 Python 3.7 之上的版本较旧，你可能会遇到一些意外的错误。
- en: 'Let''s run `pip install wheel` and then verify whether it has been installed
    successfully using `pip list`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行 `pip install wheel` 并然后使用 `pip list` 验证它是否已成功安装：
- en: '![](img/163c5d66-8a7f-4dad-baa7-99007b896036.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/163c5d66-8a7f-4dad-baa7-99007b896036.png)'
- en: 'If running `pip list` does not show `wheel`, try to simply type `wheel` at
    Command Prompt. This assumes that you have set up your Python path correctly:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行 `pip list` 没有显示 `wheel`，尝试在命令提示符中简单地输入 `wheel`。这假设你已经正确设置了你的 Python 路径：
- en: '![](img/dfe1f45d-3b26-4da7-ad36-375570e911ea.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dfe1f45d-3b26-4da7-ad36-375570e911ea.png)'
- en: If you are really very used to Python 2.7 and insist on running the code in
    Python 2.7, you can try this trick. After everything is working with Python 3.7,
    you can rename the 3.7 `python.exe` to `python3.exe` and then have fun using both
    2.7 and 3.7 by typing `python.exe` or `python3.exe` in a command window to run
    the different Python executables. It is a hack.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的非常习惯使用 Python 2.7 并坚持在 Python 2.7 中运行代码，你可以尝试这个技巧。在一切与 Python 3.7 一起正常工作后，你可以将
    3.7 的 `python.exe` 重命名为 `python3.exe`，然后通过在命令窗口中输入 `python.exe` 或 `python3.exe`
    来运行不同的 Python 可执行文件，享受使用 2.7 和 3.7 的乐趣。这是一个技巧。
- en: If you really wish to go on this road, you are on your own, but it can work.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的希望继续这条路，那就由你自己来，但它是可行的。
- en: How to do it…
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: With the `wheel` module installed, we can now proceed with downloading and installing
    `Matplotlib` from [http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了 `wheel` 模块之后，我们现在可以继续从 [http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)
    下载并安装 `Matplotlib`。
- en: 'Download the matching `Matplotlib` wheel to your hard drive:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将匹配的 `Matplotlib` 轮子下载到你的硬盘上：
- en: '![](img/7b2c4d90-4e51-4238-a326-46e00a7c5891.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7b2c4d90-4e51-4238-a326-46e00a7c5891.png)'
- en: 'Open Command Prompt and run `pip install <matplotlib wheel>` as shown:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符并运行 `pip install <matplotlib wheel>`，如下所示：
- en: '![](img/5cbe9be6-80b7-48e5-9815-18eb2e71c0da.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5cbe9be6-80b7-48e5-9815-18eb2e71c0da.png)'
- en: 'If you run into the preceding error, download Microsoft Visual C++ Build Tools
    and install them from [https://visualstudio.microsoft.com/visual-cpp-build-tools/](https://visualstudio.microsoft.com/visual-cpp-build-tools/):'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你遇到前面的错误，请下载 Microsoft Visual C++ Build Tools 并从 [https://visualstudio.microsoft.com/visual-cpp-build-tools/](https://visualstudio.microsoft.com/visual-cpp-build-tools/)
    安装它们：
- en: '![](img/74119fb3-5c2c-4c19-a019-b1944f695208.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/74119fb3-5c2c-4c19-a019-b1944f695208.png)'
- en: 'Starting the installation of Microsoft Visual C++ Build Tools appears as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 开始安装 Microsoft Visual C++ Build Tools 的界面如下所示：
- en: '![](img/1be50d1a-40bb-408e-9fd2-02a255f87ae5.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1be50d1a-40bb-408e-9fd2-02a255f87ae5.png)'
- en: 'If you ran into the preceding error, rerun the `Matplotlib` installation using
    `pip install`:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果遇到前面的错误，请重新运行 `Matplotlib` 安装，使用 `pip install`：
- en: '![](img/d60c3915-f840-4017-ab62-bab9c3335abf.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d60c3915-f840-4017-ab62-bab9c3335abf.png)'
- en: 'Verify successful installation by looking into the `site-packages` folder:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过查看 `site-packages` 文件夹来验证安装是否成功：
- en: '![](img/cf04f852-0cce-4b0a-a4f6-b444507a5279.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cf04f852-0cce-4b0a-a4f6-b444507a5279.png)'
- en: Let's now go behind the scenes to understand the installation better.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在深入了解安装过程。
- en: How it works…
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After downloading the wheel installer, we can now use `pip` to install the `Matplotlib`
    wheel.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下载 wheel 安装程序后，我们现在可以使用 `pip` 安装 `Matplotlib` 轮子。
- en: In *Step 1*, make sure you download and install the `Matplotlib` version that
    matches the Python version you are using. For example, download and install `matplotlib-3.1.0-cp37-cp37m-win_amd64.whl`
    if you have Python 3.7 installed on a 64-bit OS, such as Microsoft Windows 10.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，确保你下载并安装与你的Python版本匹配的`Matplotlib`版本。例如，如果你在64位操作系统（如Microsoft Windows
    10）上安装了Python 3.7，请下载并安装`matplotlib-3.1.0-cp37-cp37m-win_amd64.whl`。
- en: '`amd64` in the middle of the executable name means you are installing the 64-bit
    version. If you are using a 32-bit x86 system, then installing `amd64` will not
    work. Similar problems can occur if you have installed a 32-bit version of Python
    and download 64-bit Python modules.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 可执行文件名中间的`amd64`表示你正在安装64位版本。如果你使用的是32位x86系统，那么安装`amd64`将不会工作。如果你已经安装了32位版本的Python并下载了64位Python模块，也可能出现类似的问题。
- en: Depending upon what you have already installed on your system, running the `pip
    install matplotlib-3.1.0-cp37-cp37m-win_amd64.whl` command might start fine, but
    then it might not run to completion. Refer to the preceding screenshot during
    *Step 2* of what might happen during the installation. The installation ran into
    an error. The way to resolve this is to download and install **Microsoft Visual
    C++ Build Tools**, and we do this in *Step 3* from the website that is mentioned
    in the error for *Step 2* ([https://visualstudio.microsoft.com/visual-cpp-build-tools/](https://visualstudio.microsoft.com/visual-cpp-build-tools/)).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你已经在系统上安装的内容，运行`pip install matplotlib-3.1.0-cp37-cp37m-win_amd64.whl`命令可能一开始运行正常，但可能无法完成。参考*步骤2*中的前一个截图，了解安装过程中可能发生的情况。安装遇到了错误。解决这个问题的方法是下载并安装**Microsoft
    Visual C++构建工具**，我们在*步骤3*中从错误消息中提到的网站进行安装([https://visualstudio.microsoft.com/visual-cpp-build-tools/](https://visualstudio.microsoft.com/visual-cpp-build-tools/))。
- en: 'If you run into any issues installing Microsoft Visual C++ Build Tools, here
    is a helpful answer from Stack Overflow: [https://stackoverflow.com/a/54136652](https://stackoverflow.com/a/54136652).
    And here is a link to MS: [https://devblogs.microsoft.com/cppblog/announcing-visual-c-build-tools-2015-standalone-c-tools-for-build-environments/](https://devblogs.microsoft.com/cppblog/announcing-visual-c-build-tools-2015-standalone-c-tools-for-build-environments/).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你安装Microsoft Visual C++构建工具时遇到任何问题，这里有一个来自Stack Overflow的有用答案：[https://stackoverflow.com/a/54136652](https://stackoverflow.com/a/54136652)。还有一条链接到MS：[https://devblogs.microsoft.com/cppblog/announcing-visual-c-build-tools-2015-standalone-c-tools-for-build-environments/](https://devblogs.microsoft.com/cppblog/announcing-visual-c-build-tools-2015-standalone-c-tools-for-build-environments/)。
- en: After we have successfully installed the build tools, we can now rerun our `Matplotlib`
    installation to completion in *Step 4*. Just type in the same `pip install` command
    we have used previously in *Step 2*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们成功安装构建工具后，现在我们可以重新运行我们的`Matplotlib`安装，完成*步骤4*。只需输入我们在*步骤2*中之前使用的相同的`pip install`命令。
- en: We can verify that we have successfully installed `Matplotlib` by looking at
    our Python installation directory, which we do in *Step 5*. After successful installation,
    the `Matplotlib` folder is added to `site-packages`. Depending upon where we installed
    Python, the full path to the `site-packages` folder on Windows can be `..\Python37\Lib\site-packages`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过查看我们的Python安装目录来验证是否已成功安装`Matplotlib`，这是我们在*步骤5*中做的。安装成功后，`Matplotlib`文件夹会被添加到`site-packages`中。根据我们安装Python的位置，Windows上`site-packages`文件夹的完整路径可能是`..\Python37\Lib\site-packages`。
- en: If you see the `matplotlib` folder added to the `site-packages` folder in your
    Python installation, then you have successfully installed `Matplotlib`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到`matplotlib`文件夹被添加到你的Python安装目录中的`site-packages`文件夹，那么你已经成功安装了`Matplotlib`。
- en: Installing Python modules using `pip` is usually very easy, although you might
    run into some unexpected troubles. Follow the preceding steps and your installation
    will succeed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pip`安装Python模块通常非常简单，尽管你可能会遇到一些意想不到的问题。遵循前面的步骤，你的安装将会成功。
- en: Let's move on to the next recipe.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到下一个示例。
- en: Creating our first chart
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个图表
- en: Now that we have all the required Python modules installed, we can create our
    own charts using `Matplotlib`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所有必需的Python模块，我们可以使用`Matplotlib`创建自己的图表。
- en: We can create charts with only a few lines of Python code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用几行Python代码创建图表。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Successfully installing `Matplotlib`, as shown in the previous recipe, is a
    requirement for this recipe.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个示例所示，成功安装`Matplotlib`是这个步骤的要求。
- en: How to do it…
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Using the minimum amount of code, we can create our first `Matplotlib` chart.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最少的代码，我们可以创建我们的第一个`Matplotlib`图表。
- en: 'For the first chart, the steps are as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一个图表，步骤如下：
- en: Create a new Python module and save it as `Matplotlib_our_first_chart.py`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Python模块并将其保存为`Matplotlib_our_first_chart.py`。
- en: 'Type the following code into the module:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入到模块中：
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the code to see the following chart:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码以查看以下图表：
- en: '![](img/58189be7-be8e-4607-9da4-0d39f0f08481.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/58189be7-be8e-4607-9da4-0d39f0f08481.png)'
- en: Let's now go behind the scenes to understand the code better.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在深入了解代码。
- en: How it works…
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: First, we are importing `matplotlib.pyplot` and we alias it as `plt`. We then
    create two lists for our *x* and *y* values. We then pass the two lists into the
    `plt` or `plot` function.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入`matplotlib.pyplot`并将其别名为`plt`。然后我们创建两个列表来存储我们的*x*和*y*值。然后我们将这两个列表传递给`plt`或`plot`函数。
- en: We also import `show` from `pylab` and call it to display our chart.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还从`pylab`导入`show`并调用它以显示我们的图表。
- en: Notice how this automatically creates a GUI for us that even comes with a number
    of buttons.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这会自动为我们创建一个GUI，甚至包括一些按钮。
- en: Play around with the buttons in the bottom-left corner because they are fully
    functional.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在左下角的按钮上试一试，因为它们完全可用。
- en: Also notice how the *x* and *y* axes scale automatically to display the data
    range of our *x* and *y* values.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，*x*轴和*y*轴会自动缩放以显示我们的*x*和*y*值的范围。
- en: There's more…
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容…
- en: The Python `Matplotlib` module, combined with add-ons such as `numpy`, creates
    a very rich programming environment that enables us to perform mathematical computations
    and plot them in visual charts with ease.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`Matplotlib`模块，结合`numpy`等附加组件，创建了一个非常丰富的编程环境，使我们能够轻松执行数学计算并在视觉图表中绘制它们。
- en: Now, let's move on to the next recipe.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续下一个菜谱。
- en: Placing labels on charts
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在图表上放置标签
- en: So far, we have used the default `Matplotlib` GUI. Now, we will create some
    `tkinter` GUIs from which we will be using `Matplotlib`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用了默认的`Matplotlib` GUI。现在，我们将创建一些`tkinter` GUI，我们将使用`Matplotlib`。
- en: This will require a few more lines of Python code and the importing of some
    more libraries, and it is well worth the effort, because we are gaining control
    of our paintings using canvases.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要更多行Python代码和一些库的导入，但这值得努力，因为我们正在通过画布来控制我们的画作。
- en: We will position labels onto both the horizontal and the vertical axes, that
    is, *x* and *y*. We will do this by creating a `Matplotlib` figure that we will
    draw on.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在水平和垂直轴（即*x*和*y*）上放置标签。我们将通过创建一个我们将绘制到其中的`Matplotlib`图来做到这一点。
- en: You will also learn how to use subplots, which will enable you to draw more
    than one graph in the same GUI window.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将学习如何使用子图，这将使你能够在同一个GUI窗口中绘制多个图表。
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: With the necessary Python modules installed and knowing where to find the official
    online documentation and tutorials, we can now carry on with our creation of `Matplotlib`
    charts.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了必要的Python模块并知道如何找到官方在线文档和教程后，我们现在可以继续创建`Matplotlib`图表。
- en: How to do it...
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'While `plot` is the easiest way to create a `Matplotlib` chart, using `Figure`
    in combination with `Canvas` creates a more custom-made graph, which looks much
    better and also enables us to add buttons and other widgets to it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`plot`是创建`Matplotlib`图表的最简单方法，但使用`Figure`与`Canvas`结合创建的图表更加定制化，看起来更好，还使我们能够向其添加按钮和其他小部件：
- en: Create a new Python module and save it as `Matplotlib_labels.py`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Python模块并将其保存为`Matplotlib_labels.py`。
- en: 'Type the following code into the module:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入到模块中：
- en: '[PRE1]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the following code under the preceding code:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一段代码下方添加以下代码：
- en: '[PRE2]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, add the following code under the preceding code:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在上一段代码下方添加以下代码：
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, add the following code under the preceding code:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在上一段代码下方添加以下代码：
- en: '[PRE4]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Running the preceding code results in the following chart:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行前面的代码将生成以下图表：
- en: '![](img/dd630210-d864-4899-bb09-5b6cbe13c628.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dd630210-d864-4899-bb09-5b6cbe13c628.png)'
- en: 'Now, let''s deal with a new module:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们处理一个新的模块：
- en: Create a new module and save it as `Matplotlib_labels_four.py`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的模块并将其保存为`Matplotlib_labels_four.py`。
- en: 'Type the following new code into the module:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下新代码输入到模块中：
- en: '[PRE5]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Running the code results in the following chart being created:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码将创建以下图表：
- en: '![](img/ef5965cf-9ea4-4534-9d9d-00d9661cfce9.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ef5965cf-9ea4-4534-9d9d-00d9661cfce9.png)'
- en: 'We can add more subplots by assigning them to the second position using `add_subplot(212)`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`add_subplot(212)`将子图分配到第二个位置来添加更多子图：
- en: Create a new module and save it as `Matplotlib_labels_two_charts.py`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的模块并将其保存为`Matplotlib_labels_two_charts.py`。
- en: 'Type the following code into the module:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入到模块中：
- en: '[PRE6]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the code to see the following chart:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码以查看以下图表：
- en: '![](img/856d6f6a-1406-4cb7-bf67-4ef317088f08.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/856d6f6a-1406-4cb7-bf67-4ef317088f08.png)'
- en: Let's now go behind the scenes to understand the code better.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们幕后了解代码以更好地理解它。
- en: How it works…
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the first line of code in `Matplotlib_labels.py`, in *Step 2*, after the
    import statements, we create an instance of a `Figure` object.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Matplotlib_labels.py`的第一行代码中，在**步骤 2**之后，我们创建了一个`Figure`对象的实例。
- en: 'Here is a link to the official documentation: [https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.figure.Figure.html#matplotlib.figure.Figure.add_subplot](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.figure.Figure.html#matplotlib.figure.Figure.add_subplot).'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是官方文档的链接：[https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.figure.Figure.html#matplotlib.figure.Figure.add_subplot](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.figure.Figure.html#matplotlib.figure.Figure.add_subplot)。
- en: Next, we add subplots to this figure by calling `add_subplot(211)`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过调用`add_subplot(211)`向这个图表添加子图。
- en: The first number in `211` tells the figure *how many plots* to add, the second
    number determines *the number of columns*, and the third tells the figure *the
    order in which to display* the plots.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`211`中的第一个数字告诉图表*添加多少个绘图*，第二个数字确定*列数*，第三个告诉图表*显示绘图的顺序*。'
- en: In *Step 3*, we create values, plot them, and we also add a grid and change
    its default line style.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在**步骤 3**中，我们创建值，绘制它们，并且我们还添加了一个网格并更改了其默认的线条样式。
- en: Even though we only display one plot in the chart, by choosing `2` for the number
    of subplots, we are moving the plot up, which results in extra white space at
    the bottom of the chart. This first plot now only occupies 50% of the screen,
    which affects how large the grid lines of this plot are when being displayed.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在图表中只显示一个绘图，但通过将子图数量选择为`2`，我们将绘图向上移动，这导致图表底部出现额外的空白空间。这个第一个绘图现在只占用屏幕的50%，这影响了显示时该绘图网格线的大小。
- en: Experiment with the code by uncommenting the code for `axis =` and `axis.grid()`
    to see the different effects. You also have to comment out the original line below
    each of them.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过取消注释`axis =`和`axis.grid()`的代码来实验代码，以查看不同的效果。你还得在每个代码下方取消注释原始行。
- en: In *Step 4*, we create a callback function that correctly exits the `tkinter`
    GUI when the red X button gets clicked. We create an instance of `tkinter` and
    assign the callback to the `root` variable.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在**步骤 4**中，我们创建一个回调函数，当点击红色X按钮时，正确退出`tkinter` GUI。我们创建一个`tkinter`实例并将回调分配给`root`变量。
- en: In *Step 5*, we create a canvas and use the `pack` geometry manager and, after
    that, we start the main windows GUI event loop.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在**步骤 5**中，我们创建了一个画布并使用`pack`几何管理器，然后我们开始主窗口GUI事件循环。
- en: Running the entire code in S*tep 6* then creates the chart.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在S*步骤 6*中运行整个代码然后创建图表。
- en: We can place more than one chart onto the same canvas. In `Matplotlib_labels_four.py`,
    most of the code is the same as in `Matplotlib_labels.py`. We are creating four
    axes and positioning them in two rows.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在同一个画布上放置多个图表。在`Matplotlib_labels_four.py`中，大部分代码与`Matplotlib_labels.py`相同。我们正在创建四个坐标轴并将它们定位在两行中。
- en: The important thing to observe is that we create one axis, which is then used
    as the shared *x* and *y* axes for the other graphs within the chart. In this
    way, we can achieve a database-like layout of the chart.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，我们创建了一个坐标轴，然后将其用作图表内其他图形的共享*x*和*y*坐标轴。这样，我们可以实现类似数据库的图表布局。
- en: In `Matplotlib_labels_two_charts.py`, running the code now adds `axis1` to the
    chart. For the grid of the bottom plot, we left the line style at its default.
    The main difference compared with the previous charts is that we assigned the
    second chart to the second position using `add_subplot(212).`
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Matplotlib_labels_two_charts.py`中，现在运行代码将`axis1`添加到图表中。对于底部图表的网格，我们保留了默认的线条样式。与之前的图表相比，主要的不同之处在于我们使用`add_subplot(212)`将第二个图表分配到第二个位置。
- en: 'This means: 2 rows, 1 column, position 2 for this chart, which places it in
    the second row as there is only one column.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着：2行，1列，此图表的位置2，这意味着它位于第二行，因为只有一列。
- en: Now, let's move on to the next recipe.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续到下一个食谱。
- en: How to give the chart a legend
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何给图表添加图例
- en: Once we start plotting more than one line of data points, things might become
    a little bit unclear. By adding a legend to our graphs, we can identify data,
    and tell what it actually means.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们开始绘制多于一条的数据点线，事情可能会变得有点不清楚。通过在我们的图表中添加图例，我们可以识别数据，并了解它的实际含义。
- en: We do not have to choose different colors to represent the different data. `Matplotlib`
    automatically assigns a different color to each line of the data points.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不必选择不同的颜色来表示不同的数据。`Matplotlib`自动为每个数据点分配不同的颜色。
- en: All we have to do is create the chart and add a legend to it.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的只是创建图表并为其添加图例。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will enhance the chart from the previous recipe, *Placing
    labels on charts*. We will only plot one chart.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将增强前一个菜谱*在图表上放置标签*中的图表。我们将只绘制一个图表。
- en: How to do it…
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: First, we will plot more lines of data on the same chart, and then we will add
    a legend to the chart.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在同一张图表上绘制更多数据行，然后我们将在图表上添加一个图例。
- en: Create a new module and save it as `Matplotlib_chart_with_legend.py`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的模块并将其保存为`Matplotlib_chart_with_legend.py`。
- en: 'Type the following code into the module:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入到模块中：
- en: '[PRE7]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following code under the preceding code:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的代码下方添加以下代码：
- en: '[PRE8]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, add the following code under the preceding code:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在前面代码下方添加以下代码：
- en: '[PRE9]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Running the code creates the following chart, which has a legend in the upper-right
    corner:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码创建以下图表，该图表在右上角有一个图例：
- en: '![](img/af0808b8-0a4f-49ce-8650-be346694ba03.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/af0808b8-0a4f-49ce-8650-be346694ba03.png)'
- en: Next, we change the default colors of the lines in the legend.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们更改图例中线条的默认颜色。
- en: Open `Matplotlib_chart_with_legend.py` and save it as `Matplotlib_chart_with_legend_colors.py`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Matplotlib_chart_with_legend.py`并将其保存为`Matplotlib_chart_with_legend_colors.py`。
- en: 'Add the following colors to each plot:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下颜色添加到每个绘图：
- en: '[PRE10]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the modified code and observe the different colors:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行修改后的代码并观察不同的颜色：
- en: '![](img/5e1e7a77-b045-4f1d-834f-af33e7352622.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5e1e7a77-b045-4f1d-834f-af33e7352622.png)'
- en: Now, let's have a closer look at the correct syntax when assigning the plots
    to variables.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更仔细地看看将绘图分配给变量时的正确语法。
- en: Open `Matplotlib_chart_with_legend.py` and save it as `Matplotlib_chart_with_legend_missing_comma.py`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Matplotlib_chart_with_legend.py`并将其保存为`Matplotlib_chart_with_legend_missing_comma.py`。
- en: Remove the comma after `t0`.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`t0`后面的逗号。
- en: Run the code.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码。
- en: 'Notice how `First line` no longer appears in the top-right legend:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意到`第一行`不再出现在右上角的图例中：
- en: '![](img/e0228643-47c9-444e-a23b-d394c6468a2b.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e0228643-47c9-444e-a23b-d394c6468a2b.png)'
- en: Let's now go behind the scenes to understand the code better.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在幕后了解代码。
- en: How it works…
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In `Matplotlib_chart_with_legend.py`, we are only plotting one graph in this
    recipe.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Matplotlib_chart_with_legend.py`中，我们在这个菜谱中只绘制一个图表。
- en: For *Step 2*, refer to the explanation from the previous recipe, *Placing labels
    on charts,* as the code is the same except that we are slightly modifying the
    size of the figure via the `figsize` attribute.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*步骤2*，参考前一个菜谱的解释，*在图表上放置标签*，因为代码是相同的，除了我们通过`figsize`属性稍微修改了图形的大小。
- en: In *Step 3*, we change `fig.add_subplot(111)` to use `111`. Next, we create
    three Python lists that contain the values to be plotted. When we plot the data,
    we save the references to the plots in local variables.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤3*中，我们将`fig.add_subplot(111)`更改为使用`111`。接下来，我们创建三个包含要绘制值的Python列表。当我们绘制数据时，我们将绘图引用保存在局部变量中。
- en: We create the legend by passing it in a tuple with the references to the three
    plots, and then pass it in another tuple that contains the strings that are then
    displayed in the legend, and, in the third argument, we position the legend within
    the chart.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过传递一个包含三个绘图引用的元组来创建图例，然后传递另一个包含随后在图例中显示的字符串的元组，在第三个参数中，我们将图例定位在图表内。
- en: For *Step* *4*, refer to the explanation from the previous recipe, *Placing
    labels on charts,* as the code is the same*.*
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*步骤4*，参考前一个菜谱的解释，*在图表上放置标签*，因为代码是相同的*。
- en: 'You can find the official documentation for the `tkinter` protocol at this
    link: [https://www.tcl.tk/man/tcl8.4/TkCmd/wm.htm#M39](https://www.tcl.tk/man/tcl8.4/TkCmd/wm.htm#M39).'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接找到`tkinter`协议的官方文档：[https://www.tcl.tk/man/tcl8.4/TkCmd/wm.htm#M39](https://www.tcl.tk/man/tcl8.4/TkCmd/wm.htm#M39)。
- en: In *Step 5*, when running the code, we can see that our chart now has a legend
    for each of the three lines of data.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤5*中，运行代码时，我们可以看到我们的图表现在为每条数据行都有一个图例。
- en: The default settings of `Matplotlib` assign a color scheme to the lines being
    plotted. In `Matplotlib_chart_with_legend_colors.py`, we can easily change this
    default setting of colors to the colors we prefer by setting an attribute when
    we plot each axis.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`Matplotlib`的默认设置将颜色方案分配给正在绘制的线条。在`Matplotlib_chart_with_legend_colors.py`中，我们可以通过在绘制每个坐标轴时设置一个属性，轻松地将这种默认的颜色设置更改为我们喜欢的颜色。'
- en: We do this in *Step 2* by using the `color` attribute and assigning it an available
    color value. Running the code in *Step 3* now shows different colors than the
    default colors.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 *步骤2* 中通过使用 `color` 属性并分配一个可用的颜色值来完成此操作。现在在 *步骤3* 中运行代码显示的颜色与默认颜色不同。
- en: In `Matplotlib_chart_with_legend_missing_comma.py`, we intentionally remove
    the comma after `t0` to see what effect this has.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Matplotlib_chart_with_legend_missing_comma.py` 中，我们故意删除了 `t0` 后面的逗号，以查看这会产生什么效果。
- en: Note that the comma after the variable assignments of `t0`, `t1`, and `t2` is
    not a mistake. It is required in order to create the legend.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`t0`、`t1` 和 `t2` 变量赋值后的逗号不是一个错误。它是创建图例所必需的。
- en: The comma after each variable **unpacks** the list value into the variable.
    This value is a `Line2D` object of `Matplotlib`. If we leave the comma out, our
    legend will not be displayed because the `Line2D` object is embedded in a list
    and we have to unpack it out of the list.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 每个变量的逗号**解包**列表值到变量中。这个值是 `Matplotlib` 的 `Line2D` 对象。如果我们省略逗号，我们的图例将不会显示，因为
    `Line2D` 对象嵌入在一个列表中，我们必须将其从列表中解包出来。
- en: When we remove the comma after the `t0` assignment, we get an error, and the
    first line no longer appears in the figure. The chart and legend still get created,
    but without the first line appearing in the legend.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们删除 `t0` 赋值后的逗号时，我们会得到一个错误，并且第一行不再出现在图中。图表和图例仍然被创建，但没有第一行出现在图例中。
- en: Let's move on to the next recipe.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到下一个配方。
- en: Scaling charts
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩放图表
- en: In the previous recipes, while creating our first charts and enhancing them,
    we hardcoded the scaling of how those values are visually represented.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的配方中，当我们创建第一个图表并增强它们时，我们硬编码了如何视觉表示这些值的缩放。
- en: While this served us well for the values we were using, we might have to plot
    charts from large databases.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的值对我们使用的值来说效果很好，但我们可能需要从大型数据库中绘制图表。
- en: Depending on the range of that data, our hardcoded values for the vertical *y*-dimension
    might not always be the best solution, and may make it hard to see the lines in
    our charts.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 根据数据范围，我们硬编码的垂直 *y* 维度的值可能并不总是最佳解决方案，并且可能使我们的图表中的线条难以看到。
- en: Getting ready
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will improve our code from the previous recipe, *How to give the chart a
    legend*. If you have not typed in all of the code from the previous recipes, just
    download the code for this chapter from the Packt website, and it will get you
    started (and then you can have a lot of fun creating GUIs, charts, and so on using
    Python).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从之前的配方，*如何给图表添加图例*，改进我们的代码。如果您没有输入之前配方中的所有代码，只需从Packt网站下载本章的代码，它将帮助您开始（然后您可以使用Python创建GUI、图表等，享受很多乐趣）。
- en: How to do it…
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will modify the `yValues1` line of code from the previous recipe to use
    `50` as the third value:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改之前配方中的 `yValues1` 代码行，使用 `50` 作为第三个值：
- en: Open `Matplotlib_chart_with_legend.py` and save it as `Matplotlib_labels_two_charts_not_scaled.py`.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Matplotlib_chart_with_legend.py` 并将其保存为 `Matplotlib_labels_two_charts_not_scaled.py`。
- en: 'Change the third value in the list of `yValues1` to `50`:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `yValues1` 列表中的第三个值更改为 `50`：
- en: '[PRE11]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the code to see the following chart:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码以查看以下图表：
- en: '![](img/6e69cde2-2fad-4bc4-81d6-18ff14e04dc6.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e69cde2-2fad-4bc4-81d6-18ff14e04dc6.png)'
- en: Open `Matplotlib_labels_two_charts_not_scaled.py` and save it as `Matplotlib_labels_two_charts_scaled.py`.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Matplotlib_labels_two_charts_not_scaled.py` 并将其保存为 `Matplotlib_labels_two_charts_scaled.py`。
- en: 'Add `axis.set_ylim(5, 8)` under the value code:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在值代码下添加 `axis.set_ylim(5, 8)`：
- en: '[PRE12]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After running the code, the following chart appears:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码后，出现以下图表：
- en: '![](img/f32d6e68-8f4b-4aed-802d-6f37c6329d73.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f32d6e68-8f4b-4aed-802d-6f37c6329d73.png)'
- en: Let's now go behind the scenes to understand the code better.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在幕后了解代码以更好地理解它。
- en: How it works…
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In `Matplotlib_labels_two_charts_not_scaled.py`, the only difference to the
    code that created the chart in the previous recipe is a single data value.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Matplotlib_labels_two_charts_not_scaled.py` 中，与之前配方中创建图表的代码的唯一区别是一个数据值。
- en: By changing one value that is not close to the average range of all the other
    values for all plotted lines, the visual representation of the data has dramatically
    changed. We lost a lot of detail regarding the overall data, and we now mainly
    see one high spike.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更改一个与所有其他绘制线条的平均值范围都不接近的值，数据的视觉表示发生了显著变化。我们失去了关于整体数据的大量细节，现在我们主要看到一个高峰。
- en: So far, our charts have adjusted themselves according to the data they visually
    represent.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的图表已经根据它们所视觉表示的数据进行了调整。
- en: While this is a practical feature of `Matplotlib`, this is not always what we
    want. We can restrict the scale of the chart being represented by limiting the
    vertical *y*-dimension.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是`Matplotlib`的一个实用功能，但这并不总是我们想要的。我们可以通过限制垂直的*y*维度来限制表示的图表的刻度。
- en: In `Matplotlib_labels_two_charts_scaled.py`, the `axis.set_ylim(5, 8)` line
    of code now limits the start value to `5` and the end value of the vertical display
    to `8`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Matplotlib_labels_two_charts_scaled.py`中，`axis.set_ylim(5, 8)`这一行代码现在将起始值限制为`5`，并将垂直显示的结束值限制为`8`。
- en: Now, when we create our chart, the high value peak no longer has the impact
    it had before.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们创建我们的图表时，高值峰值不再像以前那样有影响。
- en: We increased one value in the data, which resulted in a dramatic effect. By
    setting limits to the vertical and horizontal displays of the chart, we can see
    the data we are most interested in.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在数据中增加了一个值，这导致了戏剧性的效果。通过设置图表的垂直和水平显示的限制，我们可以看到我们最感兴趣的数据。
- en: Spikes, like the ones just shown, can be of great interest too. It all depends
    on what we are looking for. The visual representation of the data is of great
    value.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 就像刚刚展示的尖峰一样，这些尖峰也可能非常有兴趣。这完全取决于我们在寻找什么。数据的视觉表示非常有价值。
- en: A picture is worth a thousand words.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 一图胜千言。
- en: Now, let's move on to the next recipe.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续下一个菜谱。
- en: Adjusting the scale of charts dynamically
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态调整图表的刻度
- en: In the previous recipe, we learned how we can limit the scaling of our charts.
    In this recipe, we will go one step further by dynamically adjusting the scaling
    by both setting a limit and analyzing our data before we represent it.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个菜谱中，我们学习了如何限制图表的缩放。在这个菜谱中，我们将更进一步，通过设置限制并在表示之前分析我们的数据来动态调整缩放。
- en: Getting ready
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will enhance the code from the previous recipe, *Scaling charts*, by reading
    in the data we are plotting dynamically, averaging it, and then adjusting our
    chart.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过动态读取我们正在绘制的图形数据、计算平均值然后调整我们的图表来增强上一个菜谱中*缩放图表*的代码。
- en: While we would typically read in the data from an external source, in this recipe,
    we'll create the data we are plotting using Python lists, as can be seen in the
    code in the following section.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们通常会从外部源读取数据，但在本菜谱中，我们将使用Python列表创建我们正在绘制的图形数据，如以下代码部分所示。
- en: How to do it…
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: We are creating our own data in our Python module by assigning lists with data
    to the `xValues` and `yValues` variables. Let's now modify the code to set limits
    on both the *x* and *y* dimensions.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的Python模块中通过将包含数据的列表分配给`xValues`和`yValues`变量来创建自己的数据。现在让我们修改代码，以设置*x*和*y*维度的限制。
- en: Open `Matplotlib_labels_two_charts_scaled.py` and save it as `Matplotlib_labels_two_charts_scaled_dynamic_spike.py`.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Matplotlib_labels_two_charts_scaled.py`并将其保存为`Matplotlib_labels_two_charts_scaled_dynamic_spike.py`。
- en: 'Add/adjust the `set_ylim` and `set_xlim` code as follows:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式添加/调整`set_ylim`和`set_xlim`代码：
- en: '[PRE13]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When we run the modified code, we get the following result:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们运行修改后的代码时，我们得到以下结果：
- en: '![](img/ab29f9a2-dc7e-4407-b769-d942dfbe5a2f.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab29f9a2-dc7e-4407-b769-d942dfbe5a2f.png)'
- en: 'Modify the code as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式修改代码：
- en: Open `Matplotlib_labels_two_charts_scaled_dynamic_spike.py` and save it as `Matplotlib_labels_two_charts_scaled_dynamic.py`.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Matplotlib_labels_two_charts_scaled_dynamic_spike.py`并将其保存为`Matplotlib_labels_two_charts_scaled_dynamic.py`。
- en: 'Insert the following new code starting with `yAll`:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`yAll`开始插入以下新代码：
- en: '[PRE14]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Running the code results in the following chart:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码后，我们得到以下图表：
- en: '![](img/a866a99a-8574-4a85-983b-7ba1da5f6a9e.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a866a99a-8574-4a85-983b-7ba1da5f6a9e.png)'
- en: Let's now go behind the scenes to understand the code better.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在幕后了解代码，以便更好地理解。
- en: How it works…
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In many graphs, the beginning of the *x* and *y* coordinate system starts at
    (0, 0). This is usually a good idea, so we adjusted our chart coordinate code
    accordingly. In `Matplotlib_labels_two_charts_scaled_dynamic_spike.py`, we have
    set the same limits for *x* and *y*, hoping that our chart might look more balanced.
    Looking at the result, this is not the case.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多图表中，*x*和*y*坐标系的起始点在(0, 0)。这通常是一个好主意，因此我们相应地调整了我们的图表坐标代码。在`Matplotlib_labels_two_charts_scaled_dynamic_spike.py`中，我们为*x*和*y*设置了相同的限制，希望我们的图表可能看起来更平衡。查看结果，这并不是事实。
- en: Maybe starting at (0, 0) was not such a great idea after all.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 可能从(0, 0)开始并不是一个很好的主意。
- en: What we really want to do is to adjust our chart dynamically according to the
    range of the data, while, at the same time, restricting the values that are too
    high or too low.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真正想要做的是根据数据的范围动态调整我们的图表，同时限制过高或过低的值。
- en: We can do this by parsing all the data to be represented in the chart while,
    at the same time, setting some explicit limits. In `Matplotlib_labels_two_charts_scaled_dynamic.py`,
    we adjusted both its *x* and *y* dimensions dynamically. Note how the *y*-dimension
    starts at 5.5\. The chart also no longer starts at **(0, 0)**, giving us more
    valuable information about our data.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过解析图表中要表示的所有数据，同时设置一些明确的限制来实现这一点。在 `Matplotlib_labels_two_charts_scaled_dynamic.py`
    中，我们动态调整了其 *x* 和 *y* 维度。注意 *y*- 维度从 `5.5` 开始。图表也不再从 **(0, 0)** 开始，这为我们提供了关于数据更有价值的信息。
- en: We are creating a list of lists for the *y*-dimension data and then using a
    list comprehension wrapped into a call to Python's `min()` and `max()` functions.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在创建一个包含 *y*- 维度数据的列表的列表，然后使用一个列表推导式，将其包装在调用 Python 的 `min()` 和 `max()` 函数中。
- en: If list comprehensions seem to be a little bit advanced, what they basically
    are is a very compressed loop. They are also designed to be faster than a regular
    programming loop.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列表推导式看起来有点高级，它们基本上是一个非常紧凑的循环。它们也被设计得比常规编程循环更快。
- en: 'In the Python code, we created three lists that hold the *y*-dimensional data
    to be plotted. We then created another list that holds those three lists, which
    creates a list of lists, as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 代码中，我们创建了三个列表，用于存储要绘制的 *y*- 维度数据。然后我们创建了另一个列表，用于存储这三个列表，这样就创建了一个列表的列表，如下所示：
- en: '[PRE15]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We are interested in getting both the minimum value of all of the *y*-dimensional
    data as well as the maximum value contained within these three lists.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对获取所有 *y*- 维度数据的最大值和最小值以及这三个列表中包含的最大值都感兴趣。
- en: 'We can do this via a Python list comprehension:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 Python 列表推导式来实现这一点：
- en: '[PRE16]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: After running the list comprehension, `minY` is `5.5`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 运行列表推导式后，`minY` 为 `5.5`。
- en: The preceding line of code is the list comprehension that runs through all the
    values of all the data contained within the three lists and finds the minimum
    value using the Python `min` keyword.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行代码是列表推导式，它遍历所有三个列表中包含的所有数据值，并使用 Python 的 `min` 关键字找到最小值。
- en: 'In the very same pattern, we find the maximum value contained in the data we
    wish to plot. This time, we''ll also set a limit within our list comprehension,
    which ignores all the values that exceed the limit we specified, as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在完全相同的模式中，我们找到了我们希望绘制的数据中的最大值。这次，我们也会在我们的列表推导式中设置一个限制，忽略所有超过我们指定限制的值，如下所示：
- en: '[PRE17]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: After running the preceding code with our chosen restriction, `maxY` has the
    value of `8` (not 50).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行我们选择的限制条件下的前一段代码后，`maxY` 的值为 `8`（而不是 `50`）。
- en: We applied a restriction to the max value, according to a predefined condition,
    choosing `20` as the maximum value to be displayed in the chart.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 根据预定义的条件，我们对最大值应用了限制，选择 `20` 作为图表中显示的最大值。
- en: For the *x*-dimension, we simply called `min()` and `max()` in the `Matplotlib`
    method to scale the limits of the chart dynamically.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 *x*- 维度，我们简单地在该 `Matplotlib` 方法中调用 `min()` 和 `max()` 来动态调整图表的限制。
- en: In this recipe, we have created several `Matplotlib` charts and adjusted some
    of the many available attributes. We also used core Python to control the scaling
    of the charts dynamically.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们创建了几个 `Matplotlib` 图表，并调整了一些许多可用的属性。我们还使用核心 Python 动态控制图表的缩放。
