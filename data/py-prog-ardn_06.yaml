- en: Chapter 6. Storing and Plotting Arduino Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章：存储和绘制 Arduino 数据
- en: Sensors that are connected to Arduino produce lots of analog and digital data.
    Analog sensors produce data points as numerical information while digital sensors
    produce Boolean values, that is, 1 (on) or 0 (off). Until now, we printed this
    data as a string on the command prompt or displayed it in a GUI. The data was
    being printed in real time and it was not being saved for any further analysis.
    Instead of using the string format, if the data is printed as a plot or graph,
    it will provide useful information for us to rapidly understand it and derive
    conclusions. Plots are even more useful for real-time applications as they can
    provide information regarding the system's behavior for better understanding of
    the data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 Arduino 的传感器会产生大量的模拟和数字数据。模拟传感器产生数据点作为数值信息，而数字传感器产生布尔值，即 1（开启）或 0（关闭）。到目前为止，我们已将此数据作为字符串打印到命令提示符或显示在
    GUI 中。数据是实时打印的，并未保存以供进一步分析。如果将数据打印为图表或图形，它将为我们提供快速理解并得出结论的有用信息。对于实时应用，图表甚至更有用，因为它们可以提供有关系统行为的信息，从而更好地理解数据。
- en: 'This chapter is organized around two major sections: storing the Arduino sensor
    data and plotting this data. We will start by creating and manipulating files
    using Python. After that, we will work with methods for storing Arduino data in
    the CSV file format. In the second section, you will be introduced to the Python
    plotting library, `matplotlib`. Then, we will work with examples that deal with
    plotting data from a saved file and also from real-time sensor readings. In the
    end, we will try to integrate the `matplotlib` plots with the `Tkinter` window
    that we created in the previous chapter.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章围绕两个主要部分组织：存储 Arduino 传感器数据和绘制这些数据。我们将首先使用 Python 创建和操作文件。之后，我们将处理将 Arduino
    数据存储为 CSV 文件格式的存储方法。在第二部分，您将介绍 Python 绘图库 `matplotlib`。然后，我们将处理涉及从保存的文件和实时传感器读取的数据绘图的示例。最后，我们将尝试将
    `matplotlib` 绘图与我们在上一章中创建的 `Tkinter` 窗口集成。
- en: In terms of hardware components, we will be working with familiar sensors such
    as a potentiometer and the PIR motion sensor, which we used in the previous chapters,
    so, you will not have to learn or buy any additional sensors for this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在硬件组件方面，我们将使用熟悉的传感器，如电位计和 PIR 运动传感器，这些我们在前面的章节中使用过，因此，您不需要为这一章学习或购买任何额外的传感器。
- en: Working with files in Python
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中处理文件
- en: Python provides built-in methods to create and modify files. File-related Python
    operations are useful in a large number of programming exercises. These methods
    are provided by standard Python modules and do not require installation of additional
    packages.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了创建和修改文件的内置方法。与文件相关的 Python 操作在大量编程练习中非常有用。这些方法由标准 Python 模块提供，不需要安装额外的包。
- en: The open() method
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: open() 方法
- en: 'The `open()` method is a default method that is available in Python and it
    is one of the most widely used functions to manipulate files. Now, the first step
    of dealing with a file is to open it:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`open()` 方法是 Python 中可用的一种默认方法，它是用于操作文件的最广泛使用的函数之一。现在，处理文件的第一步是打开它：'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This command will create a `test.txt` file in the same folder in which you
    started the Python interpreter or the location from where the code is being executed.
    The preceding command uses the `w` mode that opens a file for writing or creates
    a new one if it doesn''t exist. The other modes that can be used with the `open()`
    function are displayed in the following table:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在您启动 Python 解释器或执行代码的同一文件夹中创建一个 `test.txt` 文件。前面的命令使用 `w` 模式，该模式以写入方式打开文件或创建一个新文件（如果不存在）。可以与
    `open()` 函数一起使用的其他模式如下表所示：
- en: '| Mode | Description |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 模式 | 描述 |'
- en: '| --- | --- |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `w` | This opens or creates a file for writing only. It overwrites an existing
    file. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `w` | 以写入方式打开或创建文件。它会覆盖现有文件。|'
- en: '| `w+` | This opens or creates a file for writing and reading. It overwrites
    an existing file. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `w+` | 以写入和读取方式打开或创建文件。它会覆盖现有文件。|'
- en: '| `r` | This opens a file for reading only. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `r` | 仅以读取方式打开文件。|'
- en: '| `r+` | This opens a file for reading and writing. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `r+` | 以读取和写入方式打开文件。|'
- en: '| `a` | This opens a file for appending. It starts appending from the end of
    the document. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `a` | 以追加方式打开文件。它从文档的末尾开始追加。|'
- en: '| `a+` | This opens a file for appending and reading. It starts appending from
    the end of the document. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `a+` | 这将打开一个用于追加和读取的文件。它从文档的末尾开始追加。|'
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure that you have the proper read and write permissions for the files
    if you are utilizing these modes in a Unix or Linux environment.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个Unix或Linux环境中使用这些模式，请确保你有适当的读写权限。
- en: The write() method
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: write()方法
- en: 'Once the file is open in one of the writing or appending modes, you can start
    writing to the file object using this method. The `write()` method only takes
    a string as an input argument. Any other data format needs to be converted into
    a string before it is written:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件以某种写入或追加模式打开，你就可以使用此方法开始向文件对象写入。`write()`方法只接受一个字符串作为输入参数。任何其他数据格式在写入之前都需要转换为字符串：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, we are writing the `Hello World!` string that ends with a new
    line character, `\n`. This new line character has been explained in the previous
    chapter and you can obtain more information about it at [http://en.wikipedia.org/wiki/Newline](http://en.wikipedia.org/wiki/Newline).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在写入以换行符`\n`结尾的`Hello World!`字符串。这个换行符在上一章中已经解释过，你可以在[http://en.wikipedia.org/wiki/Newline](http://en.wikipedia.org/wiki/Newline)上了解更多信息。
- en: 'You can also use the `writelines()` method if you want to write a sequence
    of strings to the file:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要将一系列字符串写入文件，也可以使用`writelines()`方法：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The close() method
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: close()方法
- en: 'The `close()` method closes the file and free system resources that are occupied
    by the file. Once they are closed, you can''t use the file object as it has been
    flushed already. It is a good practice to close the file once you are done working
    with a file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: close()方法关闭文件并释放文件所占用系统资源。一旦关闭，你将无法使用文件对象，因为它已经被刷新。完成文件操作后关闭文件是一个好习惯：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The read() method
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: read()方法
- en: 'This `read()` method reads the content of an opened file from the beginning
    to the end. To use this method, you need to open the file with one of the reading
    compatible modes such as `w+`, `r`, `r+`, or `a+`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`read()`方法从文件开头到结尾读取打开的文件内容。要使用此方法，你需要使用一种读取兼容的模式打开文件，例如`w+`、`r`、`r+`或`a+`：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As the `read()` method grabs the entire contents of the file into memory, you
    can use it with the optional size parameter to avoid any memory congestion while
    working with large files. As an alternative method, you can use the `readlines()`
    method to read the content of an opened file line by line:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`read()`方法会将整个文件内容加载到内存中，因此你可以使用可选的大小参数来避免在处理大文件时出现内存拥堵。作为替代方法，你可以使用`readlines()`方法逐行读取打开的文件内容：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see in the preceding example, each string is printed as an element
    of a list that you can access individually. You can play around with these methods
    to get familiar with creating and modifying files. These exercises will be handy
    for the upcoming coding exercises.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，每个字符串都被打印为一个列表的元素，你可以单独访问它们。你可以通过这些方法来熟悉创建和修改文件。这些练习对于即将到来的编码练习将很有帮助。
- en: The with statement – Python context manager
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: with语句 - Python上下文管理器
- en: 'Although the `with` statement can be used to cover the execution of a code
    block that is defined by a context manager, it is widely used in Python to deal
    with files. Execute the following command on the Python interactive prompt, assuming
    that you have already executed the previous commands and have the `test.txt` file
    with some data:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然with语句可以用来覆盖由上下文管理器定义的代码块的执行，但它被广泛用于Python处理文件。假设你已经执行了前面的命令，并且有一个包含一些数据的`test.txt`文件，请在Python交互式提示符中执行以下命令：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'On execution, you will be able to see each line of the file printed on the
    command prompt. The `with` statement while used with the `open()` method creates
    a context manager, which executes the wrapped code while automatically taking
    care of closing the file. This is the recommended method to work with files in
    Python and we will be utilizing it in all of our exercises. You can learn more
    about the Python context manager on the following websites:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，你将能够在命令提示符上看到文件的每一行。当与`open()`方法一起使用时，with语句创建一个上下文管理器，它会执行包装的代码，并自动处理关闭文件。这是在Python中处理文件推荐的方法，我们将在所有练习中使用它。你可以在以下网站上了解更多关于Python上下文管理器的信息：
- en: '[https://docs.python.org/2/reference/compound_stmts.html#with](https://docs.python.org/2/reference/compound_stmts.html#with)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/2/reference/compound_stmts.html#with](https://docs.python.org/2/reference/compound_stmts.html#with)'
- en: '[http://preshing.com/20110920/the-python-with-statement-by-example/](http://preshing.com/20110920/the-python-with-statement-by-example/)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://preshing.com/20110920/the-python-with-statement-by-example/](http://preshing.com/20110920/the-python-with-statement-by-example/)'
- en: Using CSV files to store data
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CSV 文件存储数据
- en: Now you know methods to open, manipulate, and close files using Python. In the
    previous examples, we used the Python interpreter and string data to get familiar
    with these methods. But when it comes to saving a large number of numerical values
    from sensor data, the **comma separated values** (**CSV**) file format is one
    of the most widely used file formats other than text. As the name states, values
    are separated and stored using commas or other delimiters such as a space or tab.
    Python has a built-in module to deal with CSV files.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了使用 Python 打开、操作和关闭文件的方法。在先前的示例中，我们使用了 Python 解释器和字符串数据来熟悉这些方法。但是，当涉及到从传感器数据中保存大量数值时，**逗号分隔值**（**CSV**）文件格式是除了文本之外最广泛使用的文件格式之一。正如其名所示，值是用逗号或其他分隔符（如空格或制表符）分隔和存储的。Python
    有一个内置模块来处理 CSV 文件。
- en: 'To begin with, use the following code snippet to create a Python file and run
    your first CSV program:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用以下代码片段创建一个 Python 文件并运行您的第一个 CSV 程序：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can also open the `csvWriter.py` file from this chapter's code folder, which
    contains the same code. After executing the code, you will be able to find a file
    named `example.csv` in the same location as this file, which will contain the
    data separated with commas.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从本章的代码文件夹中打开 `csvWriter.py` 文件，其中包含相同的代码。执行代码后，您将在与该文件相同的目录下找到一个名为 `example.csv`
    的文件，其中包含用逗号分隔的数据。
- en: 'As you can see in the code, the CSV module offers the `writer()` function on
    the opened file that initializes a `writer` object. The `writer` object takes
    a sequence or array of data (integer, float, string, and so on) as input and joins
    the values of this array using the delimiter character:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如代码所示，CSV 模块在打开的文件上提供了 `writer()` 函数，该函数初始化一个 `writer` 对象。`writer` 对象接受一个序列或数组的数据（整数、浮点数、字符串等）作为输入，并使用分隔符字符连接该数组的值：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the preceding example, since we are not using a delimiter option, the program
    will take the default character comma as the delimiter. If you want to use space
    as the delimiter character, you can use the following `writer()` option:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，由于我们没有使用分隔符选项，程序将使用默认字符逗号作为分隔符。如果您想使用空格作为分隔符字符，您可以使用以下 `writer()` 选项：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To write each element of a list to a new line of this `writer` object, we use
    the `writerow()` method.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要将列表的每个元素写入 `writer` 对象的新行，我们使用 `writerow()` 方法。
- en: 'Similarly, Python CSV module also provides the `reader()` function to read
    a CSV file. Check out the following example to learn more about this function,
    or you can open the `csvReader.py` file from the next chapter''s code folder:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，Python CSV 模块还提供了 `reader()` 函数来读取 CSV 文件。查看以下示例以了解更多关于此函数的信息，或者您可以从下一章的代码文件夹中打开
    `csvReader.py` 文件：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `reader()` function creates a `reader` object to iterate over lines in the
    opened CSV file. The reader object retrieves each element of a row by splitting
    it using the delimiter. You can access each line of the file by iterating over
    the object using the `for` loop as displayed in the preceding code snippet, or
    use the `next()` method every time you want to access the next line. On execution
    of the previous code, you will be able to see three separate array lists that
    are printed with three individual elements.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`reader()` 函数创建一个 `reader` 对象来遍历打开的 CSV 文件中的行。`reader` 对象通过使用分隔符拆分行来检索每一行的每个元素。您可以通过使用
    `for` 循环遍历对象来访问文件的每一行，如前述代码片段所示，或者每次想要访问下一行时使用 `next()` 方法。执行前面的代码后，您将能够看到三个分别打印出三个单独元素的单独数组列表。'
- en: Tip
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To open the CSV files externally, you can use a spreadsheet program such as
    Microsoft Excel, OpenOffice Calc, or Apple Numbers.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要在外部打开 CSV 文件，您可以使用电子表格程序，如 Microsoft Excel、OpenOffice Calc 或 Apple Numbers。
- en: Storing Arduino data in a CSV file
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Arduino 数据存储在 CSV 文件中
- en: In the previous two sections, you learned methods to store values in a CSV file.
    Although the data required for the file was already initialized in the code, the
    same code could be modified to store Arduino input data.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的两个部分中，您学习了将值存储在 CSV 文件中的方法。尽管文件所需的数据已经在代码中初始化，但相同的代码可以被修改以存储 Arduino 输入数据。
- en: 'To begin with storing Arduino data, let''s create a circuit that produces these
    values for us. We used a motion sensor in the project of [Chapter 3](ch03.html
    "Chapter 3. The First Project – Motion-triggered LEDs"), *The First Project –
    Motion-triggered LEDs*, and a potentiometer in the exercise of [Chapter 4](ch04.html
    "Chapter 4. Diving into Python-Arduino Prototyping"), *Diving into Python-Arduino
    Prototyping*. We will be using these two sensors to provide us with digital and
    analog input values respectively. To develop the circuit required for this exercise,
    connect the potentiometer to the analog pin 0 and the PIR motion sensor to digital
    pin 11, as displayed in the following diagram:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个电路来为我们生成这些值以便存储Arduino数据。我们在[第3章](ch03.html "第3章。第一个项目 – 运动触发LED")的项目中使用了运动传感器，*第一个项目
    – 运动触发LED*，以及在[第4章](ch04.html "第4章。深入Python-Arduino原型设计")的练习中使用了电位计，*深入Python-Arduino原型设计*。我们将使用这两个传感器分别提供数字和模拟输入值。为了开发这个练习所需的电路，将电位计连接到模拟引脚0，将PIR运动传感器连接到数字引脚11，如下面的图所示：
- en: '![Storing Arduino data in a CSV file](img/5938OS_06_01.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![将Arduino数据存储到CSV文件中](img/5938OS_06_01.jpg)'
- en: Connect other Arduino pins such as 5V and the ground, as shown in the preceding
    Fritzing diagram. As we are going to use `pyFirmata` to interface Python with
    the Arduino board, you will have to upload the **StandardFirmata** sketch to the
    Arduino board using the method described in [Chapter 3](ch03.html "Chapter 3. The
    First Project – Motion-triggered LEDs"), *The First Project – Motion-triggered
    LEDs*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 连接其他Arduino引脚，如5V和地，如图中所示的Fritzing图。由于我们将使用`pyFirmata`将Python与Arduino板接口，你将需要使用[第3章](ch03.html
    "第3章。第一个项目 – 运动触发LED")中描述的方法将**StandardFirmata**草图上传到Arduino板。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When you are working with prototyping, you really don't need large, powerful,
    and computation-intensive databases to deal with information. The easiest and
    quickest way to work with sensor data in this phase is by using CSV files.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进行原型设计时，你实际上不需要大型、强大且计算密集型的数据库来处理信息。在这个阶段，处理传感器数据最简单、最快的方法是使用CSV文件。
- en: 'Once you have your Arduino board ready with the appropriate connections, use
    the following code snippet to create a Python file and run it. You can also open
    the `csvArduinoStore.py` file from this chapter''s code folder:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的Arduino板准备好了适当的连接，使用以下代码片段创建一个Python文件并运行它。你也可以从这个章节的代码文件夹中打开`csvArduinoStore.py`文件：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: While the code is running, rotate the knob of the potentiometer and wave your
    hand in front of the motion sensors. This action will help you to generate and
    measure distinct values from these sensors. Meanwhile, the program will log this
    data in the `SensorDataStore.csv` file. When complete, open the `SensorDataStore.csv`
    file using any text viewer or spreadsheet program and you will be able to see
    these sensor values stored in the file. Now, let's try to understand the program.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码运行时，旋转电位计的旋钮，并在运动传感器前挥动手。这个动作将帮助你从这些传感器生成和测量不同的值。同时，程序将把数据记录在`SensorDataStore.csv`文件中。完成后，使用任何文本查看器或电子表格程序打开`SensorDataStore.csv`文件，你将能够看到存储在文件中的这些传感器值。现在，让我们尝试理解这个程序。
- en: 'As you can observe from the code, we are not utilizing a new module to interface
    the Arduino board or store sensor values to the file. Instead, we have utilized
    the same methods that we used in the previous exercises. The code has two distinct
    components: Python-Arduino interfacing and storing data to a CSV file. By skipping
    the explanation of `pyFirmata` methods to interface the Arduino board, let''s
    focus on the code that is associated with storing the sensor data. The first line
    that we will write to the CSV file using `writerow()` is the header line that
    explains the content of the columns:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，代码中我们没有使用新的模块来接口Arduino板或存储传感器值到文件。相反，我们使用了之前练习中使用的相同方法。代码有两个不同的组件：Python-Arduino接口和将数据存储到CSV文件。跳过对`pyFirmata`接口Arduino板方法的解释，让我们专注于与存储传感器数据相关的代码。我们将使用`writerow()`写入CSV文件的第一个行是标题行，它解释了列的内容：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Later, we will obtain the readings from the sensors and write them to the CSV
    file, as shown in the following code snippet. We will repeat this process 25 times
    as defined by the variable, `i`. You can change the value of `i` according to
    your requirements.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将从传感器获取读数并将它们写入CSV文件，如下面的代码片段所示。我们将重复这个过程25次，由变量`i`定义。你可以根据你的需求更改`i`的值。
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The next question is how can you utilize this coding exercise in your custom
    projects? The program has three main sections that can be customized to accomplish
    your project requirements, which are as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的问题是您如何将这个编码练习应用到您的自定义项目中？该程序有三个主要部分，可以根据项目需求进行定制，具体如下：
- en: '**Arduino pins**: You can change the Arduino pin numbers and the number of
    pins to be utilized. You can do this by adding additional sensor values to the
    row object.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arduino引脚**: 您可以更改Arduino引脚编号和要使用的引脚数量。您可以通过向行对象添加额外的传感器值来完成此操作。'
- en: '**The CSV file**: The name of the file and its location can be changed from
    `SensorDataStore.csv` to the one that is specific to your application.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CSV文件**: 文件名及其位置可以从`SensorDataStore.csv`更改为适用于您应用程序的特定文件。'
- en: '**The number of data points**: We have collected 25 different pairs of data
    points while running the `while` loop for 25 iterations. You can change this value.
    You can also change the time delay between each successive point from one second,
    as used in the program, to the value that you need.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据点的数量**: 在运行`while`循环25次时，我们收集了25组不同的数据点。您可以更改此值。您还可以更改连续点之间的时间延迟，从程序中使用的1秒更改为您需要的值。'
- en: Getting started with matplotlib
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用matplotlib
- en: The `matplotlib` library is one of the most popular and widely supported Python
    plotting libraries. Although `matplotlib` is inspired by MATLAB, it is independent
    of MATLAB. Similar to other Python libraries that we have been using, it is an
    open source Python library. The `matplotlib` library assists in creating 2D plots
    from simple lines of code from easy to use built-in functions and methods. The
    `matplotlib` library is extensively used in Python-based applications for data
    visualization and analysis. It utilizes `NumPy` (the short form of numerical Python)
    and `SciPy` (short form of scientific Python) packages for mathematical calculations
    for the analysis. These packages are major dependencies for `matplotlib` including
    `freetype` and `pyparsing`. Make sure that you have these packages preinstalled
    on your system if you are using any other installation methods besides the ones
    mentioned in the next section. You can obtain more information about the `matplotlib`
    library from its official website ([http://matplotlib.org/](http://matplotlib.org/)).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib`库是最受欢迎且广泛支持的Python绘图库之一。尽管`matplotlib`受到MATLAB的启发，但它与MATLAB独立。与其他我们使用过的Python库类似，它是一个开源的Python库。`matplotlib`库通过简单易用的内置函数和方法，从简单的代码行中创建2D图表。`matplotlib`库在基于Python的应用程序中广泛用于数据可视化和分析。它使用`NumPy`（数值Python的简称）和`SciPy`（科学Python的简称）包进行数学计算分析。这些包是`matplotlib`的主要依赖项，包括`freetype`和`pyparsing`。如果您使用的是除下一节中提到的安装方法之外的任何其他安装方法，请确保您已预先安装了这些包。您可以从其官方网站（[http://matplotlib.org/](http://matplotlib.org/)）获取有关`matplotlib`库的更多信息。'
- en: Configuring matplotlib on Windows
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows上配置matplotlib
- en: 'Before we install `matplotlib` on Windows, make sure that you have your Windows
    operating system with the latest version of Python 2.x distribution. In [Chapter
    1](ch01.html "Chapter 1. Getting Started with Python and Arduino"), *Getting Started
    with Python and Arduino*, we installed Setuptools to download and install additional
    Python packages. Make sure that you have Setuptools installed and configured properly.
    Before we advance further, we will have to install dependencies for `matplotlib`.
    Open the command prompt and use the following command to install the `dateutil`
    and `pyparsing` packages:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们在Windows上安装`matplotlib`之前，请确保您的Windows操作系统安装了最新的Python 2.x发行版。在[第1章](ch01.html
    "第1章。Python和Arduino入门")“Python和Arduino入门”中，我们安装了Setuptools来下载和安装额外的Python包。请确保您已正确安装并配置了Setuptools。在进一步操作之前，我们必须安装`matplotlib`的依赖项。打开命令提示符，并使用以下命令安装`dateutil`和`pyparsing`包：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once you have successfully installed these packages, download and install the
    precompiled `NumPy` package from [http://sourceforge.net/projects/numpy/](http://sourceforge.net/projects/numpy/).
    Make sure that you choose the appropriate installation files for Python 2.7 and
    the type of your Windows operating system.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦成功安装了这些包，请从[http://sourceforge.net/projects/numpy/](http://sourceforge.net/projects/numpy/)下载并安装预编译的`NumPy`包。请确保您选择了适用于Python
    2.7和您的Windows操作系统类型的适当安装文件。
- en: Now, your computer should have satisfied all the prerequisites for `matplotlib`.
    Download and install the precompiled `matplotlib` package from [http://matplotlib.org/downloads.html](http://matplotlib.org/downloads.html).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的计算机应该已经满足了 `matplotlib` 的所有先决条件。从 [http://matplotlib.org/downloads.html](http://matplotlib.org/downloads.html)
    下载并安装预编译的 `matplotlib` 包。
- en: In this installation process, we have avoided the usage of Setuptools for `NumPy`
    and `matplotlib` because of some known issues related to `matplotlib` in the Windows
    operating system. If you can figure out ways to install these packages using Setuptools,
    then you can skip the preceding manual steps.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个安装过程中，我们为了避免与 Windows 操作系统中的 `matplotlib` 相关的一些已知问题，没有使用 Setuptools 来安装 `NumPy`
    和 `matplotlib`。如果你能想出使用 Setuptools 安装这些包的方法，那么你可以跳过前面的手动步骤。
- en: Configuring matplotlib on Mac OS X
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上配置 matplotlib
- en: 'Installation of `matplotlib` on Mac OS X can be difficult depending upon the
    version of Mac OS X and the availability of dependencies. Make sure that you have
    Setuptools installed as described in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Python and Arduino"), *Getting Started with Python and Arduino*.
    Assuming that you already have Setuptools and `pip`, run the following command
    on the terminal:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Mac OS X 的版本和依赖项的可用性，在 Mac OS X 上安装 `matplotlib` 可能会有困难。确保你已经按照 [第 1 章](ch01.html
    "第 1 章。Python 和 Arduino 入门") 中描述的安装了 Setuptools，*Python 和 Arduino 入门*。假设你已经安装了
    Setuptools 和 `pip`，请在终端运行以下命令：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Executing this command will lead to one of the following three possibilities:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令将导致以下三种可能性之一：
- en: Successful installation of the latest `matplotlib` version
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成功安装最新版本的 `matplotlib`
- en: Notification that the requirements are already satisfied but the installed version
    is older than the current version, which is 1.3 at the moment
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知显示要求已满足，但安装的版本比当前版本旧，目前为 1.3
- en: Error while installing the `matplotlib` package
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 `matplotlib` 包时出错
- en: 'If you encounter the first possibility, then you can advance to the next section;
    otherwise follow the troubleshooting instructions. You can check your `matplotlib`
    version using the following commands on the Python interactive prompt:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到第一种可能性，那么你可以进入下一节；否则，遵循故障排除说明。你可以使用以下命令在 Python 交互式提示符中检查你的 `matplotlib`
    版本：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Upgrading matplotlib
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 升级 matplotlib
- en: 'If you encounter the second possibility, which states that the existing version
    of the `matplotlib` is older than the current version, use the following command
    to upgrade the `matplotlib` package:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到第二种可能性，即现有的 `matplotlib` 版本比当前版本旧，请使用以下命令升级 `matplotlib` 包：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Go through the next section in case you end up with errors during this upgrade.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在升级过程中遇到错误，请继续阅读下一节。
- en: Troubleshooting installation errors
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 故障排除安装错误
- en: If you encounter any errors during the `matplotlib` installation via `pip`,
    it is most likely that you are missing some dependency packages. Follow these
    steps one by one to troubleshoot the errors.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过 `pip` 安装 `matplotlib` 时遇到任何错误，最可能的原因是你缺少一些依赖包。依次遵循以下步骤来排除错误。
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'After every step, use one of the following commands to check whether the error
    is resolved:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 每完成一步后，使用以下命令之一来检查错误是否已解决：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Install Xcode from Apple's App Store. Open Xcode and navigate to the **Download**
    tab in **Preferences…**. Download and install **Command Line Tools** from **Preferences…**.
    This step should solve any compilation-related errors.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Apple 的 App Store 安装 Xcode。打开 Xcode 并导航到 **首选项…** 中的 **下载** 选项卡。从 **首选项…**
    中下载并安装 **命令行工具**。这一步应该解决任何与编译相关的错误。
- en: 'Install `homebrew` using the following command in the terminal:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在终端安装 `homebrew`：
- en: '[PRE19]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Install the following packages using `homebrew`:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `homebrew` 安装以下包：
- en: '[PRE20]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you still receive an error with the `freetype` package, try to create a
    link for `freetype` using the following command:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你仍然收到 `freetype` 包的错误，尝试使用以下命令为 `freetype` 创建链接：
- en: '[PRE21]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If you receive any further errors after performing the preceding steps, go to
    the `matplotlib` forums at [http://matplotlib.1069221.n5.nabble.com/](http://matplotlib.1069221.n5.nabble.com/)
    for those specific errors.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在执行前面的步骤后收到任何进一步的错误，请访问 [http://matplotlib.1069221.n5.nabble.com/](http://matplotlib.1069221.n5.nabble.com/)
    上的 `matplotlib` 论坛以获取这些特定错误。
- en: Note
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you use `matplotlib` in Mac OS X, you need to set up the appropriate drawing
    backend as shown in the following code snippet:'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你在 Mac OS X 上使用 `matplotlib`，你需要设置适当的绘图后端，如下面的代码片段所示：
- en: '[PRE22]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can learn more about drawing backends for `matplotlib` at [http://matplotlib.org/faq/usage_faq.html#what-is-a-backend](http://matplotlib.org/faq/usage_faq.html#what-is-a-backend).
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在[http://matplotlib.org/faq/usage_faq.html#what-is-a-backend](http://matplotlib.org/faq/usage_faq.html#what-is-a-backend)了解更多关于`matplotlib`绘图后端的信息。
- en: Setting up matplotlib on Ubuntu
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Ubuntu上设置matplotlib
- en: 'The installation of `matplotlib` and the required dependencies is a very straightforward
    process on Ubuntu. We can perform this operation without using Setuptools and
    with the help of the Ubuntu package manager. The following simple command should
    do the trick for you:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu上安装`matplotlib`及其所需依赖项是一个非常简单的过程。我们可以不使用Setuptools，借助Ubuntu包管理器来完成此操作。以下简单的命令应该对您有所帮助：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When prompted to select dependencies, click on **Yes** to install them all.
    You should be able to find the `matplotlib` package in other popular Linux distributions
    too.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当提示选择依赖项时，点击**是**以安装所有依赖项。您也应该能在其他流行的Linux发行版中找到`matplotlib`包。
- en: Plotting random numbers using matplotlib
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用matplotlib绘制随机数
- en: 'The `matplotlib` library provides a collection of basic plotting-related functions
    and methods via the `pyplot` framework. The `pyplot` framework contains functions
    for creating figures, drawing plots, setting up titles, setting up axes, and many
    additional plotting methods. One of the import functions provided by `pyplot`
    is `figure()`. This initializes an empty figure canvas that can be selected for
    your plot or a set of plots:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib`库通过`pyplot`框架提供了一系列基本的绘图相关函数和方法。`pyplot`框架包含创建图形、绘制图形、设置标题、设置坐标轴以及许多其他绘图方法。`pyplot`提供的一个重要函数是`figure()`。该函数初始化一个空的图形画布，可以用于您的绘图或一系列绘图：'
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can similarly create multiple figures by specifying a number as the parameter,
    that is, `figure(2)`. If a figure with this number already exists, the method
    activates the existing figure that can then be further used for plotting.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过指定一个数字作为参数来创建多个图形，例如`figure(2)`。如果已经存在具有此数字的图形，该方法将激活现有的图形，然后可以进一步用于绘图。
- en: 'The `matplotlib` library provides the `plot()` method to create line charts.
    The `plot()` method takes a list or an array data structure that is made up of
    integer or floating point numbers as input. If two arrays are used as inputs,
    `plot()` utilizes them as values for the *x* axis and the *y* axis. If only one
    list or array is provided, `plot()` assumes it to be the sequence values for the
    *y* axis and uses auto-generated incremental values for the *x* axis:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib`库提供了`plot()`方法来创建折线图。`plot()`方法接受一个由整数或浮点数组成的列表或数组数据结构作为输入。如果使用两个数组作为输入，`plot()`将它们用作*x*轴和*y*轴的值。如果只提供一个列表或数组，`plot()`假定它是*y*轴的序列值，并使用自动生成的增量值用于*x*轴：'
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The third optional parameter that is supported by the `plot()` method is for
    the format string. These parameters help users to change the style of line and
    markers with different colors. In our example, we are using the solid line style.
    So, the `plot()` function for our plot looks like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`plot()`方法支持的第三个可选参数是格式字符串。这些参数帮助用户使用不同的颜色更改线条和标记的样式。在我们的例子中，我们使用的是实线样式。因此，我们的绘图`plot()`函数看起来像这样：'
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `plot()` function provides a selection from a large collection of styles
    and colors. To find more information about these parameters, use Python''s `help()`
    function on the `plot()` function of `matplotlib`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`plot()`函数提供了一组大量样式和颜色的选择。要了解更多关于这些参数的信息，请在`matplotlib`的`plot()`函数上使用Python的`help()`函数：'
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This `help()` function will provide the necessary information to create plotting
    styles with different markers, line styles, and colors. You can exit this help
    menu by typing `q` at the prompt.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`help()`函数将提供创建具有不同标记、线条样式和颜色的绘图样式的必要信息。您可以在提示符下输入`q`退出帮助菜单。
- en: 'Now, as we have explored plotting sufficiently, let''s create your first Python
    plot using the following code snippet. The program containing this code is also
    located in this chapter''s code folder with the name `plotBasic.py`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经充分探索了绘图，让我们使用以下代码片段创建您的第一个Python绘图。包含此代码的程序也位于本章代码文件夹中，文件名为`plotBasic.py`：
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the previous exercise, we randomly generated a dataset for the *y* axis using
    the `randint()` method. You can see a plot depicting this data with the solid
    line style in an opened window after running the program. As you can see in the
    code snippet, we used the additional `pyplot` methods such as `title()`, `xlabel()`,
    `ylabel()`, and `plot()`. These methods are self-explanatory and they are largely
    used to make your plots more informative and meaningful.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的练习中，我们使用 `randint()` 方法随机生成了 *y* 轴的数据库。你可以看到在运行程序后打开的窗口中，用实线风格描绘了这些数据的图表。正如你在代码片段中看到的，我们使用了额外的
    `pyplot` 方法，如 `title()`、`xlabel()`、`ylabel()` 和 `plot()`。这些方法都是自我解释的，并且它们主要用于使你的图表更加信息丰富和有意义。
- en: 'At end of the example, we used one of the most important `pyplot` methods called
    `show()`. The `show()` method displays the generated plots in a figure. This method
    is not mandatory to display figures when running from Python''s interactive prompt.
    The following screenshot illustrates the plot of randomly generated values using
    `matplotlib`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例的末尾，我们使用了最重要的 `pyplot` 方法之一，即 `show()`。`show()` 方法在图中显示生成的图表。当从 Python 的交互式提示符运行时，此方法不是显示图表的强制要求。以下截图展示了使用
    `matplotlib` 生成的随机数值的图表：
- en: '![Plotting random numbers using matplotlib](img/5938OS_06_02.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![使用 matplotlib 绘制随机数](img/5938OS_06_02.jpg)'
- en: Plotting data from a CSV file
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 CSV 文件中绘制数据
- en: At the beginning of the chapter, we created a CSV file from Arduino data. We
    will be using that `SensorDataStore.csv` file for this section. If you recall,
    we used two different sensors to log the data. Hence, we have two arrays of values,
    one from a digital sensor and another from the analog one. Now, in the previous
    example, we just plotted one set of values for the *y* axis. So, how are we going
    to plot two arrays separately and in a meaningful way?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我们从 Arduino 数据创建了一个 CSV 文件。我们将使用该 `SensorDataStore.csv` 文件本节。如果你还记得，我们使用了两个不同的传感器来记录数据。因此，我们有两个值数组，一个来自数字传感器，另一个来自模拟传感器。现在，在前面的例子中，我们只是绘制了
    *y* 轴的一组值。那么，我们如何分别并以有意义的方式绘制这两个数组呢？
- en: 'Let''s start by creating a new Python program using the following lines of
    code or by opening the `plotCSV.py` file from this chapter''s code folder:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个新的 Python 程序开始，使用以下代码行或从本章的代码文件夹中打开 `plotCSV.py` 文件：
- en: '[PRE29]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In this program, we have created two arrays of sensor values—`pValues` and `mValues`—by
    reading the `SensorDataStore.csv` file row by row. Here, `pValues` and `mValues`
    represent the sensor data for the potentiometer and the motion sensor respectively.
    Once we had these two lists, we plotted them using the `matplotlib` methods.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个程序中，我们通过逐行读取 `SensorDataStore.csv` 文件创建了两个传感器值数组——`pValues` 和 `mValues`。在这里，`pValues`
    和 `mValues` 分别代表电位计和运动传感器的传感器数据。一旦我们有了这两个列表，我们就使用 `matplotlib` 方法绘制了它们。
- en: 'The `matplotlib` library provides various ways to plot different arrays of
    values. You can individually plot them in two different figures using `figure()`,
    that is, `figure(1)` and `figure(2)`, or plot both in a single plot in which they
    overlay each other. The `pyplot` method also offers a third meaningful alternative
    by allowing multiple plots in a single figure via the `subplot()` method:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib` 库提供了多种方式来绘制不同数组的值。你可以使用 `figure()` 方法分别在不同的两个图中绘制它们，即 `figure(1)`
    和 `figure(2)`，或者在一个图中绘制它们，使它们相互叠加。`pyplot` 方法还通过 `subplot()` 方法提供了一种第三种有意义的替代方案，允许在单个图中通过
    `subplot()` 方法绘制多个图表：'
- en: '[PRE30]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This method is structured as `subplot(nrows, ncols, plot_number)`, which creates
    grids on the figure canvas using row and column numbers, that is, `nrows` and
    `ncols` respectively. This method places the plot on the specific cell that is
    provided by the `plot_number` parameter. For example, through `subplot(2, 1, 1)`,
    we created a table of two rows and one column and placed the first subplot in
    the first cell of the table. Similarly, the next set of values was used for the
    second subplot and was placed in the second cell, that is, row 2 and column 1:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的结构是 `subplot(nrows, ncols, plot_number)`，它使用行号和列号（即 `nrows` 和 `ncols`）在图像画布上创建网格。此方法将图表放置在由
    `plot_number` 参数提供的特定单元格中。例如，通过 `subplot(2, 1, 1)`，我们创建了一个两行一列的表格，并将第一个子图放置在表格的第一个单元格中。同样，下一组值用于第二个子图，并放置在第二个单元格中，即第2行第1列：
- en: '[PRE31]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the first subplot, we have used the `plot()` method to create a plot using
    the analog value from the potentiometer, that is, `pValues`. While in the second
    subplot, we created a bar chart instead of a line chart to display the digital
    values from the motion sensor. The bar chart functionality was provided by the
    `bar()` method.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个子图中，我们使用了`plot()`方法来创建一个使用电位器的模拟值（即`pValues`）的图表。而在第二个子图中，我们创建了一个柱状图而不是折线图来显示运动传感器的数字值。柱状图功能是由`bar()`方法提供的。
- en: As you can see in the code snippet, we have utilized an additional `pyplot()`
    method called `xlim()`. The `xlim([x_minimum, x_maximum])` or `ylim([y_minimum,
    y_maximum])` methods are used to confine the plot between the given maximum and
    minimum values of the particular axes.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在代码片段中看到的，我们使用了额外的`pyplot()`方法，称为`xlim()`。`xlim([x_minimum, x_maximum])`或`ylim([y_minimum,
    y_maximum])`方法用于将图表限制在特定轴的给定最大值和最小值之间。
- en: 'Before we displayed these subplots in the figure using the `show()` method,
    we used the `tight_layout()` function to organize the title and label texts in
    the figure. The `tight_layout()` function is a very important `matplotlib` module
    that nicely fit the subplot parameters in one figure. You can check the effects
    of this module by commenting that line and running the code again. The following
    screenshot shows these subplots with labels and a title in one figure object:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们使用`show()`方法在图中显示这些子图之前，我们使用了`tight_layout()`函数来组织图中的标题和标签文本。`tight_layout()`函数是一个非常重要的`matplotlib`模块，它很好地将子图参数拟合到一个图中。你可以通过注释掉这一行并再次运行代码来检查这个模块的效果。以下截图显示了这些子图带有标签和标题在一个图对象中：
- en: '![Plotting data from a CSV file](img/5938OS_06_03.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![从CSV文件绘制数据](img/5938OS_06_03.jpg)'
- en: Plotting real-time Arduino data
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制实时Arduino数据
- en: In the previous chapter, while dealing with GUI and Arduino data, you must have
    noticed that the code was updating the interface with every new value that was
    obtained from the Arduino sensors. Similarly, in this exercise, we will be redrawing
    the plot every time we receive new values from Arduino. Basically, we will be
    plotting and updating a real-time chart instead of plotting the entire set of
    sensor values as we did in the previous exercise.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，当处理GUI和Arduino数据时，你必须已经注意到代码会随着从Arduino传感器获得的新值更新界面。同样，在这个练习中，我们将每次从Arduino接收到新值时重绘图表。基本上，我们将绘制和更新一个实时图表，而不是像前一个练习那样绘制整个传感器值集。
- en: We will be using the same Arduino circuit that you built in the previous exercises.
    Here, we will utilize only the potentiometer section of the circuit to obtain
    the analog sensor values. Now, before we explain the new methods used in this
    exercise, let's first open the program file for this exercise. You can find the
    program file from this chapter's folder; it is named `plotLive.py`. In the code,
    change the appropriate parameters for the Arduino board and execute the code.
    While the code is running, rotate the knob of the potentiometer to observe the
    real-time changes in the plot.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用你在前一个练习中构建的相同的Arduino电路。在这里，我们将仅利用电路的电位器部分来获取模拟传感器的值。现在，在我们解释这个练习中使用的新的方法之前，让我们首先打开这个练习的程序文件。你可以从这个章节的文件夹中找到程序文件；它被命名为`plotLive.py`。在代码中，更改Arduino板的适当参数并执行代码。当代码运行时，旋转电位器的旋钮以观察图表中的实时变化。
- en: On running the program, you will get a screen similar to the following screenshot
    that shows a plot from real-time Arduino data.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序后，你将看到一个类似于以下截图的屏幕，该截图显示了实时Arduino数据的图表。
- en: '![Plotting real-time Arduino data](img/5938OS_06_04.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![绘制实时Arduino数据](img/5938OS_06_04.jpg)'
- en: One can make various conclusions about the potentiometer's knob rotation or
    some other sensor behavior by just looking at the plot. These types of plots are
    widely used in the graphical dashboard for real-time monitoring applications.
    Now, let's try to understand the methods that are used in the following code snippet
    to make this possible.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通过观察图表，可以得出关于电位器旋钮旋转或其他传感器行为的各种结论。这类图表在图形仪表板中广泛应用于实时监控应用。现在，让我们尝试理解以下代码片段中使用的使这一切成为可能的方法。
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The real-time plotting in this exercise is achieved by using a combination
    of the `pyplot` functions `ion()`, `draw()`, `set_xdata()`, and `set_data()`.
    The `ion()` method initializes the interactive mode of `pyplot`. The interactive
    mode helps to dynamically change the *x* and *y* values of the plots in the figure:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习中的实时绘图是通过结合使用 `pyplot` 函数 `ion()`、`draw()`、`set_xdata()` 和 `set_data()` 实现的。`ion()`
    方法初始化 `pyplot` 的交互模式。交互模式有助于动态更改图中图形的 *x* 和 *y* 值：
- en: '[PRE33]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Once the interactive mode is set to `True`, the plot will only be drawn when
    the `draw()` method is called.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将交互模式设置为 `True`，只有在调用 `draw()` 方法时才会绘制图形。
- en: 'Just like the previous Arduino interfacing exercises, at the beginning of the
    code, we initialized the Arduino board using `pyFirmata` and the setup pins to
    obtain the sensor values. As you can see in the following line of code, after
    setting up the Arduino board and `pyplot` interactive mode, we initialized the
    plot with a set of blank data, `0` in our case:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前的 Arduino 接口练习一样，在代码的开始部分，我们使用 `pyFirmata` 初始化 Arduino 板并设置引脚以获取传感器值。正如您在以下代码行中可以看到的，在设置
    Arduino 板和 `pyplot` 交互模式后，我们使用一组空白数据，在我们的例子中是 `0`，初始化了图形：
- en: '[PRE34]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This array for *y* values, `pData`, is then used to append values from the
    sensor in the `while` loop. The `while` loop keeps appending the newest values
    to this data array and redraws the plot with these updated arrays for the *x*
    and *y* values. In this example, we are appending new sensor values at the end
    of the array while simultaneously removing the first element of the array to limit
    the size of the array:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这个用于 *y* 值的数组，`pData`，然后在 `while` 循环中用于追加传感器值。`while` 循环持续追加最新的值到这个数据数组，并使用更新后的
    *x* 和 *y* 值重新绘制图形。在这个例子中，我们在数组的末尾追加新的传感器值，同时移除数组的第一个元素以限制数组的大小：
- en: '[PRE35]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The `set_xdata()` and `set_ydata()` methods are used to update the *x* and
    *y* axes data from these arrays. These updated values are plotted using the `draw()`
    method on each iteration of the `while` loop:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`set_xdata()` 和 `set_ydata()` 方法用于从这些数组中更新 *x* 和 *y* 轴的数据。这些更新值在每个 `while`
    循环迭代中使用 `draw()` 方法进行绘图：'
- en: '[PRE36]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: You will also notice that we are utilizing an `xrange()` function to generate
    a range of values according to the provided length, which is `25` in our case.
    The code snippet, `[i for i in xrange(25)]`, will generate a list of 25 integer
    numbers that start incrementally at 0 and end at 24.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到我们正在使用 `xrange()` 函数根据提供的长度生成一系列值，在我们的例子中是 `25`。代码片段 `[i for i in xrange(25)]`
    将生成一个包含 25 个整数数字的列表，这些数字从 0 开始递增，到 24 结束。
- en: Integrating plots in the Tkinter window
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Tkinter 窗口中集成图形
- en: Due to the powerful integration capabilities of Python, it is very convenient
    to interface the plots generated by the `matplotlib` library with the `Tkinter`
    graphical interface. In the last exercise of the previous chapter, we integrated
    `Tkinter` with `pyFirmata` to implement the project of [Chapter 3](ch03.html "Chapter 3. The
    First Project – Motion-triggered LEDs"), *The First Project – Motion-triggered
    LEDs*, with the GUI. In this exercise, we will extend this integration further
    by utilizing `matplotlib`. We will perform this action by utilizing the same Arduino
    circuit that we have been using in this chapter and expand the code that we used
    in the previous exercise. Meanwhile, we are not introducing any new methods in
    this exercise; instead we will be utilizing what you learned until now. Open the
    `plotTkinter.py` file from this chapter's code folder.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Python 强大的集成能力，将 `matplotlib` 库生成的图形与 `Tkinter` 图形界面集成非常方便。在前一章的最后一个练习中，我们将
    `Tkinter` 与 `pyFirmata` 集成以实现 [第 3 章](ch03.html "第 3 章。第一个项目 – 运动触发 LED") 的项目，即
    *第一个项目 – 运动触发 LED*，并使用 GUI。在这个练习中，我们将通过利用 `matplotlib` 进一步扩展这种集成。我们将通过利用本章中使用的相同
    Arduino 电路和扩展之前练习中使用的代码来完成这个动作。同时，在这个练习中，我们不会引入任何新方法；相反，我们将利用到目前为止所学的内容。打开本章代码文件夹中的
    `plotTkinter.py` 文件。
- en: 'As mentioned earlier, the program utilizes three major Python libraries and
    interfaces them with each other to develop an excellent Python-Arduino application.
    The first interfacing point is between `Tkinter` and `matplotlib`. As you can
    see in the following lines of code, we have initialized three button objects,
    `startButton`, `pauseButton`, and `exitButton`, for the **Start**, **Pause**,
    and **Exit** buttons respectively:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，程序利用了三个主要的Python库，并将它们相互连接以开发一个优秀的Python-Arduino应用程序。第一个接口点是在`Tkinter`和`matplotlib`之间。正如你在以下代码行中可以看到的，我们为**开始**、**暂停**和**退出**按钮分别初始化了三个按钮对象，即`startButton`、`pauseButton`和`exitButton`：
- en: '[PRE37]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The **Start** and **Exit** buttons provide control points for `matplotlib`
    operations such as updating the plot and closing the plot through their respective
    `onStartButtonPress()` and `onExitButtonPress()` functions. The `onStartButtonPress()`
    function also consists of the interfacing point between the `matplotlib` and `pyFirmata`
    libraries. As you can observe from the following code snippet, we will start updating
    the plot using the `draw()` method and the `Tkinter` window using the `update()`
    method for each observation from the analog pin a0, which is obtained using the
    `read()` method:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**开始**和**退出**按钮提供了对`matplotlib`操作的控件点，例如通过各自的`onStartButtonPress()`和`onExitButtonPress()`函数更新图表和关闭图表。`onStartButtonPress()`函数还包含了`matplotlib`和`pyFirmata`库之间的接口点。正如你从下面的代码片段中可以观察到的，我们将使用`draw()`方法开始更新图表，并使用`update()`方法更新`Tkinter`窗口，对于从模拟引脚a0获得的每个观察值，该值是通过`read()`方法获得的：'
- en: '[PRE38]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `onExitButtonPress()` function implements the `exit` function as described
    by the name itself. It closes the `pyplot` figure and the `Tkinter` window before
    disengaging the Arduino board from the serial port.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`onExitButtonPress()`函数实现了由其名称本身描述的`exit`功能。在断开Arduino板与串行端口连接之前，它关闭了`pyplot`图表和`Tkinter`窗口。'
- en: Now, execute the program after making the appropriate changes to the Arduino
    port parameter. You should be able to see a window on your screen that is similar
    to the one displayed in the following screenshot. With this code, you can now
    control your real-time plots using the **Start** and **Pause** buttons. Click
    on the **Start** button and start rotating the potentiometer knob. When you click
    on the **Pause** button, you can observe that the program has stopped plotting
    new values. While **Pause** is pressed, even rotating the knob will not result
    in any updates to the plot.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在修改Arduino端口参数后执行程序。你应该能在屏幕上看到一个窗口，类似于以下截图所示。使用这段代码，你现在可以使用**开始**和**暂停**按钮控制实时图表。点击**开始**按钮并开始旋转电位计旋钮。当你点击**暂停**按钮时，你可以观察到程序已经停止绘制新的值。在**暂停**被按下时，即使旋转旋钮也不会导致图表有任何更新。
- en: 'As soon as you click on the **Start** button again, you will again see the
    plot get updated with real-time values, discarding the values generated while
    paused. Click on the **Exit** button to safely close the program:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你再次点击**开始**按钮，你将再次看到图表使用实时值更新，丢弃了暂停期间生成的值。点击**退出**按钮以安全关闭程序：
- en: '![Integrating plots in the Tkinter window](img/5938OS_06_05.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![在Tkinter窗口中集成图表](img/5938OS_06_05.jpg)'
- en: Summary
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we introduced two major Python programming paradigms: creating,
    reading, and writing files using Python while also storing data into these files
    and plotting sensor values and updating plots in real time. We also explored methods
    to store and plot real-time Arduino sensor data. Besides helping you in your Arduino
    projects, these methods can also be used in your everyday Python projects. Throughout
    the chapter, using simple exercises, we interfaced the newly learned CSV and `matplotlib`
    modules with the `Tkinter` and `pyFirmata` modules that we learned in the previous
    chapters. In the next chapter, you will be introduced to your second project—a
    portable unit that measures and displays environmental data such as temperature,
    humidity, and ambient light. We will be utilizing the concepts that we have learned
    so far to build this project.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了两种主要的Python编程范式：使用Python创建、读取和写入文件，同时将这些文件中的数据存储起来，并在实时中绘制传感器值和更新图表。我们还探讨了存储和绘制实时Arduino传感器数据的方法。除了帮助你在Arduino项目中，这些方法也可以用于你的日常Python项目中。在整个章节中，通过简单的练习，我们将新学习的CSV和`matplotlib`模块与我们在前几章中学到的`Tkinter`和`pyFirmata`模块进行了接口。在下一章中，你将接触到你的第二个项目——一个便携式单元，它可以测量和显示环境数据，如温度、湿度和环境光线。我们将利用到目前为止学到的概念来构建这个项目。
