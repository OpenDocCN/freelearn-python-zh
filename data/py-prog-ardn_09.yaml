- en: Chapter 9. Arduino and the Internet of Things
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章：Arduino与物联网
- en: In the previous chapter, we learned how to access Arduino using Ethernet from
    a remote location. The main objective was to get you started with developing Arduino-based
    network applications using Python. We were able to accomplish this using various
    tools such as the `web.py` Python library, Mosquitto MQTT broker, and the Arduino
    Ethernet library. Remote access to sensor data via a Python-like extensible language
    can open up limitless possibilities for sensor-based web applications. In recent
    years, the rapid growth of these applications has enabled the development of a
    domain called the **Internet of Things** (**IoT**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何从远程位置使用以太网访问Arduino。主要目标是让你开始使用Python开发基于Arduino的网络应用。我们能够通过使用各种工具如`web.py`
    Python库、Mosquitto MQTT代理和Arduino以太网库来实现这一点。通过Python-like的可扩展语言远程访问传感器数据可以为基于传感器的Web应用打开无限可能。近年来，这些应用的快速增长使得物联网（**IoT**）这一领域的开发成为可能。
- en: In the last chapter, we worked on Arduino networking. However, it was limited
    to LAN and the premise of the exercises was limited to your home or office. We
    didn't even involve the Internet to enable global access in our exercises. Traditional
    IoT applications require Arduino to be accessed remotely from any part of the
    world via the Internet. In this chapter, we will extend the Arduino networking
    concepts by interfacing Arduino with cloud-based platforms. We will also develop
    web applications to access the sensor data from these cloud platforms. Later in
    the chapter, we will go through the process of setting up your cloud-based messaging
    platform to serve sensor data. At the end of this chapter, you should be able
    to design and develop full-stack IoT applications, using Arduino, Python, and
    the cloud.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了Arduino网络。然而，它仅限于局域网，并且练习的前提条件仅限于你的家庭或办公室。我们甚至没有在练习中涉及互联网来实现全球访问。传统的物联网应用需要通过互联网从世界任何地方远程访问Arduino。在本章中，我们将通过将Arduino与云平台接口来扩展Arduino网络概念。我们还将开发Web应用程序来访问这些云平台上的传感器数据。在本章的后面部分，我们将介绍设置你的基于云的消息平台的过程，以便提供传感器数据。在本章结束时，你应该能够使用Arduino、Python和云来设计和开发全栈物联网应用。
- en: Getting started with the IoT
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用物联网
- en: Long before the Internet, sensor- and actuator-based electronic control systems
    existed in high-tech automation systems. In those systems, sensors were interfaced
    to the microcontroller via hard-wired connections. Due to extensibility limitations,
    the coverage area of these systems was geographically restricted. Examples of
    these high-tech systems included factory automation, satellite systems, weapon
    systems, and so on. In most cases, the sensors used in these systems were huge
    and the microcontrollers were also limited by their low computational capabilities.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网出现之前，基于传感器和执行器的电子控制系统就已经存在于高科技自动化系统中。在这些系统中，传感器通过硬连线连接到微控制器。由于可扩展性的限制，这些系统的覆盖范围在地理上受到限制。这些高科技系统的例子包括工厂自动化、卫星系统、武器系统等。在大多数情况下，这些系统中使用的传感器都很大，微控制器也受到其低计算能力的限制。
- en: With recent advancements in technology, especially in the semiconductor industry,
    the physical size of sensors and microcontrollers has significantly reduced. It
    has also been made possible to manufacture low-cost and highly efficient electronic
    components, hence today it is relatively inexpensive to develop small and efficient
    sensor-based hardware products. Arduino and Raspberry Pi are great examples of
    these achievements. These sensor-and actuator-based hardware systems interface
    with the physical world that we live in. The sensors measure various elements
    from the physical environment, while the actuators manipulate the physical environment.
    These types of hardware-based electronic systems are also known as **physical
    systems**.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术的最新进展，尤其是在半导体行业，传感器和微控制器的物理尺寸显著减小。现在，制造低成本、高效电子组件也成为可能，因此今天开发小型高效基于传感器的硬件产品相对便宜。Arduino和Raspberry
    Pi是这些成就的绝佳例子。这些基于传感器和执行器的硬件系统与我们所生活的物理世界接口。传感器测量物理环境中的各种元素，而执行器则操纵物理环境。这类基于硬件的电子系统也被称为**物理系统**。
- en: On the other front, advancements in the semiconductor industry also enabled
    the development of highly efficient computation units, empowering personal computer
    and networking industries. This movement led to the worldwide network of connected
    computers called CyberWorld or the Internet. Every day, petabytes of data get
    generated and transferred across the Internet.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个方面，半导体行业的进步也促进了高效计算单元的发展，从而推动了个人电脑和网络行业的发展。这一运动导致了全球互联计算机网络，即所谓的网络世界或互联网的形成。每天，都有数以千兆字节的数据在互联网上生成和传输。
- en: The domain of IoT stands at the crossroads of these progresses in physical and
    cyber systems, where ancient hardwired sensor-based systems are ready to get upgraded
    to more powerful and efficient systems that are also highly connected through
    the Internet. Due to the large number of sensors involved, these systems generate
    and send an avalanche of data. The data generated by these sensors has already
    eclipsed the data generated by humans.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网领域位于物理和网络安全进步的十字路口，古老的硬连线传感器系统正准备升级到更强大、更高效的系统，这些系统通过互联网高度互联。由于涉及大量传感器，这些系统产生并发送大量数据。这些传感器生成数据已经超过了人类生成数据。
- en: The IoT has started to become a significant domain in recent years after a large
    number of consumer IoT products have started entering the market. These products
    include applications in home automation, health care, activity tracking, smart
    energy, and so on. One of the major reasons behind the rapid growth of the IoT
    domain is the introduction of these visible solutions. In a large number of cases,
    this was made possible due to fast and inexpensive prototyping that was enabled
    by Arduino and other open source hardware platforms.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，随着大量消费级物联网产品开始进入市场，物联网已经开始成为一个重要的领域。这些产品包括家庭自动化、医疗保健、活动跟踪、智能能源等领域。物联网领域快速增长的主要原因之一是这些可见解决方案的引入。在许多情况下，这得益于Arduino和其他开源硬件平台提供的快速且低成本的原型制作。
- en: Up to this point in the book, we have learned various methods of interfacing
    sensors and then developing applications using these connected sensors. In this
    chapter, we will learn the last step in the development of a full-stack IoT application—enabling
    access for your Python-Arduino application through the Internet. Now, let's try
    to first understand the architecture of the IoT.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们学习了各种传感器接口方法，然后使用这些连接的传感器开发应用程序。在本章中，我们将学习全栈物联网应用开发的最后一步——通过互联网为您的Python-Arduino应用程序提供访问权限。现在，让我们首先了解物联网的架构。
- en: Architecture of IoT web applications
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 物联网Web应用架构
- en: 'In this book, we have covered three major concepts in the first eight chapters:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前八章中，我们涵盖了三个主要概念：
- en: '**Physical layer**: We used various sensors and actuators with the Arduino
    board to deal with the physical environment. The sensors such as the temperature
    sensor, humidity sensor, and motion sensor were used measured the physical phenomenon,
    while the actuators such as LEDs were utilized to alter or produce physical elements.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物理层**：我们使用Arduino板上的各种传感器和执行器来处理物理环境。例如，温度传感器、湿度传感器和运动传感器用于测量物理现象，而LED等执行器则用于改变或产生物理元素。'
- en: '**Computation layer**: We used Arduino sketches and Python programs to convert
    these physical elements into numerical data. We also utilized these high-level
    languages to perform various computations such as calculating relative humidity,
    developing user interfaces, plotting data, and providing web interfaces.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计算层**：我们使用Arduino草图和Python程序将这些物理元素转换为数值数据。我们还利用这些高级语言执行各种计算，如计算相对湿度、开发用户界面、绘制数据并提供Web界面。'
- en: '**Interfacing layer**: Throughout the material that we covered, we also utilized
    various interfacing methods to establish communication between Arduino and Python.
    For interfacing part of the interfacing layer between the physical and computation
    layers, we used serial port libraries, established network-based communication
    using the REST and MQTT protocol, and developed web applications.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接口层**：在我们所涵盖的材料中，我们也使用了各种接口方法来建立Arduino和Python之间的通信。对于物理层和计算层之间的接口部分，我们使用了串行端口库，通过REST和MQTT协议建立了基于网络的通信，并开发了Web应用。'
- en: As you can see, we have developed applications with tightly-coupled physical,
    computation, and interfacing layers. In the research domain, these types of applications
    are also known as cyber-physical systems. One of the widely used and popular terms
    for the domain of cyber-physical system is the IoT. Although the cyber-physical
    domain is thoroughly defined compared to the IoT, the IoT has recently gained
    more popularity due to the large number of subdomains—industrial Internet, wearable
    devices, connected devices, smart grid, and so on—that are covered under this
    umbrella term. In simple terms, an application can qualify as an IoT application
    if it consists of hardware devices that deal with the physical world and have
    sufficient computational capabilities with Internet connectivity. Let's try to
    understand the architecture of the IoT from the material that we have already
    covered.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经开发出了具有紧密耦合的物理、计算和接口层的应用。在研究领域，这类应用也被称为网络物理系统。网络物理系统领域广泛使用且流行的术语之一是物联网。尽管与物联网相比，网络物理领域定义得更为详尽，但物联网最近由于涵盖大量子领域（如工业互联网、可穿戴设备、连接设备、智能电网等）而变得更加流行。简单来说，如果一个应用包含处理物理世界的硬件设备，并且具有足够的计算能力以及互联网连接，那么它可以被认定为物联网应用。让我们尝试从我们已经覆盖的材料中理解物联网的架构。
- en: On the physical side, the following figure shows the hardware components that
    we utilized to deal with the physical environment. The sensors and actuators that
    interface with the actual physical world can be connected to Arduino using multiple
    low-level protocols. These components can be connected using GPIO pins and using
    the I2C or SPI protocols. The data acquired from these components gets processed
    on the Arduino board using the code that is uploaded by the user. Although the
    Arduino code can be made self-reliant to execute tasks without any external inputs,
    these inputs from users or other applications are required in advanced applications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在物理方面，以下图示展示了我们用来处理物理环境的硬件组件。与实际物理世界接口的传感器和执行器可以通过多个低级协议连接到Arduino。这些组件可以通过GPIO引脚以及I2C或SPI协议进行连接。从这些组件获取的数据会在Arduino板上通过用户上传的代码进行处理。尽管Arduino代码可以被设计成无需任何外部输入即可执行任务，但在高级应用中，这些来自用户或其他应用的输入是必需的。
- en: '![Architecture of IoT web applications](img/5938OS_09_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![物联网Web应用的架构](img/5938OS_09_01.jpg)'
- en: As part of the communication layer, Arduino can be connected locally to other
    computers using USB. One can extend the coverage range by utilizing Ethernet,
    Wi-Fi, or any other radio communication method.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 作为通信层的一部分，Arduino可以通过USB本地连接到其他计算机。可以通过使用以太网、Wi-Fi或任何其他无线电通信方法来扩展覆盖范围。
- en: As illustrated in the following figure, the sensor data is collected using computation
    units for advance processing. These computation units are powerful enough to host
    operating systems and programming platforms. In this book, we utilized Python
    to develop various features at the computation layer. At this level, we performed
    high-level computation tasks such as developing graphical user interfaces using
    the `Tkinter` library, plotting charts using the `matplotlib` library, and developing
    web applications using the `web.py` library.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，传感器数据通过用于高级处理的计算单元进行收集。这些计算单元强大到足以运行操作系统和编程平台。在这本书中，我们使用了Python在计算层开发各种功能。在这一层，我们执行了高级计算任务，例如使用`Tkinter`库开发图形用户界面，使用`matplotlib`库绘制图表，以及使用`web.py`库开发Web应用。
- en: '![Architecture of IoT web applications](img/5938OS_09_02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![物联网Web应用的架构](img/5938OS_09_02.jpg)'
- en: 'In all the coding exercises that we performed previously, the physical coverage
    areas of the projects were limited because of hardwired serial interfaces or local
    Ethernet network, as displayed in the following figure:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前进行的所有编码练习中，由于硬连接串行接口或本地以太网网络，项目的物理覆盖范围受到限制，如下图所示：
- en: '![Architecture of IoT web applications](img/5938OS_09_03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![物联网Web应用的架构](img/5938OS_09_03.jpg)'
- en: To develop full-stack IoT applications, we need to remotely access Arduino or
    host the computation layer on the Internet. In this chapter, we are going to work
    on this missing link and develop various applications to provide Internet connectivity
    to the exercises. To perform this operation, we are going to utilize a commercial
    cloud platform in the first section and develop our customized platform in the
    later section.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发全栈物联网应用程序，我们需要远程访问Arduino或将计算层托管在互联网上。在本章中，我们将着手解决这个缺失的环节，并开发各种应用程序，为练习提供互联网连接。为了执行此操作，我们将在第一部分利用商业云平台，并在后面的部分开发我们定制的平台。
- en: As the focus of this chapter is going to be on cloud connectivity, we are not
    going to develop a hardware circuit for each exercise. We will go through the
    hardware design exercise only once and keep using the same hardware for all the
    programming exercises. Similarly, we will also reuse the `web.py` programs that
    we developed in the previous chapter to focus on code snippets that are associated
    with Python libraries to develop cloud applications.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章的重点将是云连接，我们不会为每个练习开发硬件电路。我们只会进行一次硬件设计练习，并继续使用相同的硬件进行所有编程练习。同样，我们也将重用上一章中开发的`web.py`程序，以专注于与Python库相关的代码片段，用于开发云应用程序。
- en: Hardware design
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件设计
- en: Let's begin by developing standard hardware for all the upcoming exercises.
    We will need the Arduino board that is attached to the Ethernet Shield to use
    the Ethernet protocol for network connectivity. In terms of components, you will
    be using simple sensors and actuators that you already used in the previous coding
    exercises. We will use the PIR motion sensor and the HIH-4030 humidity sensor
    to provide digital and analog outputs, respectively. We will also have an LED
    as part of the hardware design and this will be used in coding exercises as an
    actuator. For more information regarding the properties and detailed explanations
    of these sensors, you can refer to previous chapters.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从为所有即将进行的练习开发标准硬件开始。我们将需要连接到以太网盾的Arduino板来使用以太网协议进行网络连接。在组件方面，你将使用在之前的编码练习中已经使用过的简单传感器和执行器。我们将使用PIR运动传感器和HIH-4030湿度传感器来分别提供数字和模拟输出。我们还将有一个LED作为硬件设计的一部分，这将在编码练习中用作执行器。有关这些传感器的特性和详细解释，你可以参考前面的章节。
- en: To begin assembly of the hardware components, first attach the Ethernet Shield
    on top of the Arduino board. Connect the sensors and actuators to the appropriate
    pins, as displayed in the following figure. Once you have the hardware assembled,
    you can connect the Ethernet Shield to your home router using the Ethernet cable.
    You will need to power the board using the USB cable to upload the Arduino code
    from your computer. In case you want to deploy the Arduino board to a remote location,
    you will need an external 5V supply to power Arduino.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始组装硬件组件，首先将以太网盾连接到Arduino板顶部。将传感器和执行器连接到适当的引脚，如下图所示。一旦组装好硬件，您可以使用以太网线将以太网盾连接到您的家庭路由器。您需要使用USB线为板供电，以便从您的计算机上传Arduino代码。如果您想将Arduino板部署到远程位置，您需要一个外部5V电源来为Arduino供电。
- en: '![Hardware design](img/5938OS_09_04.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![硬件设计](img/5938OS_09_04.jpg)'
- en: The IoT cloud platforms
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网云平台
- en: The term **IoT cloud platform** is used for the cloud platforms that provide
    very specific services, protocol support, and web-based tools for IoT applications.
    In more informal terms, these cloud IoT platforms can be used to upload your sensor
    data and access them from anywhere using the Internet. With these basic features,
    they also provide tools to access, visualize, and process your sensor data on
    various platforms such as computers and smartphones. Examples of similar IoT cloud
    platforms include Xively ([http://www.xively.com](http://www.xively.com)), 2lemetry
    ([http://www.2lemetry.com](http://www.2lemetry.com)), Carriots ([http://www.carriots.com](http://www.carriots.com)),
    ThingSpeak ([http://thingspeak.com](http://thingspeak.com)), and so on.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 术语**物联网云平台**用于提供非常特定服务、协议支持和基于Web的工具的云平台。在更非正式的术语中，这些云物联网平台可以用来上传您的传感器数据，并通过互联网从任何地方访问它们。具有这些基本功能，它们还提供工具，可以在各种平台（如计算机和智能手机）上访问、可视化和处理您的传感器数据。类似的物联网云平台示例包括Xively
    ([http://www.xively.com](http://www.xively.com))、2lemetry ([http://www.2lemetry.com](http://www.2lemetry.com))、Carriots
    ([http://www.carriots.com](http://www.carriots.com))、ThingSpeak ([http://thingspeak.com](http://thingspeak.com))等。
- en: 'The following figure shows the architecture of an IoT system with an Arduino-based
    sensor system that is sending data to a cloud platform, while a computation unit
    is accessing the data remotely from the cloud:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了具有基于Arduino的传感器系统向云平台发送数据，同时计算单元从云中远程访问数据的物联网系统架构：
- en: '![The IoT cloud platforms](img/5938OS_09_05.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![物联网云平台](img/5938OS_09_05.jpg)'
- en: Xively, being the oldest and most popular IoT platform, has a large amount of
    community-based online help that is available for beginners. This is one of the
    major reasons why we have chosen Xively as our platform of choice for the upcoming
    exercises. Recently, Xively has changed their policy of creating free developer
    accounts and a user has to request access to this free account instead of obtaining
    one freely. In case you want to use another platform other than Xively, we have
    briefly covered a few similar platforms at the end of this section.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Xively作为最老和最受欢迎的物联网平台，为初学者提供了大量的基于社区的在线帮助。这也是我们选择Xively作为即将进行练习的平台的主要原因之一。最近，Xively更改了创建免费开发者账户的政策，用户现在必须请求访问这个免费账户，而不是免费获得。如果您想使用除Xively之外的另一个平台，我们在此节末简要介绍了一些类似平台。
- en: Xively – a cloud platform for the IoT
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xively – 一个物联网云平台
- en: Xively is one of the very first IoT-specific cloud platforms that was founded
    in 2007 as Pachube. It went through multiple name changes, as it was called Cosm,
    but it is currently known as Xively. Xively provides an IoT cloud platform with
    tools and services to develop connected devices, products, and solutions. As mentioned
    on its website, Xively is the public cloud that is specifically built for the
    IoT.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Xively是首批物联网专用云平台之一，它于2007年作为Pachube成立。它经历了多次名称变更，曾经被称为Cosm，但现在被称为Xively。Xively提供了一个物联网云平台，包括工具和服务，用于开发连接设备、产品和解决方案。正如其网站所述，Xively是专门为物联网构建的公共云。
- en: Setting up an account on Xively
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Xively上设置账户
- en: 'Now, we can go ahead and set up a new user account for the Xively platform.
    To set up an account, you need to execute following steps in the given order:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续为Xively平台设置一个新的用户账户。要设置账户，您需要按照以下顺序执行以下步骤：
- en: To begin the sign up process on [Xively.com](http://Xively.com), open [https://xively.com/signup](https://xively.com/signup)
    in a web browser.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始[Xively.com](http://Xively.com)的注册过程，请在网页浏览器中打开[https://xively.com/signup](https://xively.com/signup)。
- en: On the sign up page, you will be prompted to select the username and the password,
    as displayed in the following screenshot:![Setting up an account on Xively](img/5938OS_09_06.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在注册页面上，您将被提示选择用户名和密码，如下截图所示：![在Xively上设置账户](img/5938OS_09_06.jpg)
- en: On the next page, you will be asked to enter some additional information that
    includes your full name, organization's name, country, zip code, time zone, and
    so on. Fill out the form appropriately and click on the **Sign Up** button:![Setting
    up an account on Xively](img/5938OS_09_07.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页，您将被要求输入一些附加信息，包括您的全名、组织名称、国家、邮政编码、时区等。适当地填写表格，然后点击**注册**按钮：![在Xively上设置账户](img/5938OS_09_07.jpg)
- en: Xively will send an activation e-mail to the e-mail account that you specified
    in the form. Open the e-mail and click on the activation link. Check your spam
    folder if you don't see the e-mail in your inbox.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Xively将向您在表格中指定的电子邮件账户发送激活邮件。打开邮件并点击激活链接。如果您在收件箱中没有看到邮件，请检查垃圾邮件文件夹。
- en: Once you click on the activation link, you will be redirected to the welcome
    page on Xively's website. We advise you to go through the tutorials provided on
    the welcome page, as it will help you to get familiar with the Xively platform.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击激活链接后，您将被重定向到Xively网站上的欢迎页面。我们建议您浏览欢迎页面上提供的教程，因为它将帮助您熟悉Xively平台。
- en: After completing the tutorials, you can come back to the main user screen from
    the page using the [https://xively.com/login](https://xively.com/login) link.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成教程后，您可以通过[https://xively.com/login](https://xively.com/login)链接从页面返回主用户屏幕。
- en: If you are not already logged in, you will require your e-mail address as the
    username and an appropriate password to log into the Xively platform.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您尚未登录，您需要使用电子邮件地址作为用户名和适当的密码登录Xively平台。
- en: Working with Xively
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Xively上工作
- en: 'The Xively platform lets you create cloud device instances that can be connected
    to the actual hardware device, app, or service. Perform the following steps in
    order to work with Xively:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Xively平台允许您创建云设备实例，这些实例可以连接到实际的硬件设备、应用程序或服务。按照以下步骤与Xively一起工作：
- en: To begin working with the Xively platform, add a device from the main page,
    as displayed in the following screenshot:![Working with Xively](img/5938OS_09_08.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始使用Xively平台，请从主页添加设备，如图所示：![与Xively一起工作](img/5938OS_09_08.jpg)
- en: Once you click on the **Add Device** button, it will prompt you to the following
    window where you will be asked to provide the device name, description, and privacy
    status of the device that you are going to assign. In the form, select a device
    name that you want your development device to be called, provide a brief description,
    and select **Private Device** as the privacy status:![Working with Xively](img/5938OS_09_09.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦点击**添加设备**按钮，它将提示您进入以下窗口，您将需要提供您要分配的设备名称、描述和隐私状态。在表单中，选择您希望您的开发设备被称作的设备名称，提供简短描述，并将隐私状态选择为**私有设备**：![与Xively一起工作](img/5938OS_09_09.jpg)
- en: Once you click the **Add Device** button, Xively will create a device instance
    with automatically-generated parameters and prompt you to the development workbench
    environment. On the page of the device that you just added, you can see various
    identification and security parameters such as **Product ID**, **Serial Number**,
    **Feed ID**, **Feed URL**, and **API Endpoint**. From among these parameters,
    you will frequently need the **Feed ID** information for the upcoming exercises:![Working
    with Xively](img/5938OS_09_10.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦点击**添加设备**按钮，Xively将创建一个具有自动生成参数的设备实例，并将您带到开发工作台环境。在您刚刚添加的设备页面中，您可以查看各种标识和安全参数，如**产品ID**、**序列号**、**Feed
    ID**、**Feed URL**和**API端点**。在这些参数中，您将经常需要**Feed ID**信息来完成接下来的练习：![与Xively一起工作](img/5938OS_09_10.jpg)
- en: A unique and secure API key of the newly created device is also located in the
    right-hand side bar of the page. This API key is very important and needs to be
    secured just like your password, as anyone with the API key can access the device.![Working
    with Xively](img/5938OS_09_11.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新创建设备的唯一且安全的API密钥也位于页面右侧的侧边栏中。此API密钥非常重要，需要像密码一样进行保护，因为任何拥有API密钥的人都可以访问设备。![与Xively一起工作](img/5938OS_09_11.jpg)
- en: 'Now, to remotely access this device, open the terminal and use the cURL command
    to send data to it. In the following command, change the `<Your_Feed_ID>` and
    `<Your_API_key>` values with the ones available for your device:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要远程访问此设备，请打开终端并使用cURL命令向其发送数据。在以下命令中，将`<Your_Feed_ID>`和`<Your_API_key>`值替换为您设备可用的值：
- en: '[PRE0]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, the previous command sent the value of 10 on channel 0 of your
    device on Xively. After executing the previous command, you will notice that the
    Xively workbench is updated with the information that you just sent using cURL:![Working
    with Xively](img/5938OS_09_12.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，之前的命令将10的值发送到您的设备在Xively上的通道0。执行之前的命令后，您会注意到Xively工作台已更新，显示您刚刚使用cURL发送的信息：![与Xively一起工作](img/5938OS_09_12.jpg)
- en: Try sending multiple values on channel 0 using the previous command. On the
    Xively workbench, you will be able to see a plot being generated by these values
    in real time. Access the plot by clicking on channel 0 in the workbench:![Working
    with Xively](img/5938OS_09_13.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试使用之前的命令在通道0上发送多个值。在Xively工作台中，您将能够实时看到由这些值生成的图表。通过在工作台中点击通道0来访问图表：![与Xively一起工作](img/5938OS_09_13.jpg)
- en: Using the method that we used in this example, we can also configure Arduino
    to send sensor values automatically to the Xively platform. This will enable the
    storage and visualization of Arduino data on Xively.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们在本例中使用的方法，我们还可以配置Arduino自动将传感器值发送到Xively平台。这将使Arduino数据在Xively上的存储和可视化成为可能。
- en: Alternative IoT platforms
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他物联网平台
- en: In this section, we have provided important links for the ThingSpeak and Carriots
    platforms. As we are not covering these platforms in detail, these links will
    help you to find similar examples to interface Arduino and Python with ThingSpeak
    and Carriots.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们提供了ThingSpeak和Carriots平台的重要链接。由于我们不会详细覆盖这些平台，这些链接将帮助您找到将Arduino和Python与ThingSpeak和Carriots接口的类似示例。
- en: ThingSpeak
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ThingSpeak
- en: 'The tutorials in the following links will help you to get familiar with the
    ThingSpeak platform if you chose to use it instead of Xively:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接中的教程将帮助您熟悉 ThingSpeak 平台，如果您选择使用它而不是 Xively：
- en: '**The official website**: [https://thingspeak.com/](https://thingspeak.com/)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**官方网站**：[https://thingspeak.com/](https://thingspeak.com/)'
- en: '**Using Arduino and Ethernet to update a ThingSpeak channel**: [http://community.thingspeak.com/tutorials/arduino/using-an-arduino-ethernet-shield-to-update-a-thingspeak-channel/](http://community.thingspeak.com/tutorials/arduino/using-an-arduino-ethernet-shield-to-update-a-thingspeak-channel/)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Arduino 和以太网更新 ThingSpeak 通道**：[http://community.thingspeak.com/tutorials/arduino/using-an-arduino-ethernet-shield-to-update-a-thingspeak-channel/](http://community.thingspeak.com/tutorials/arduino/using-an-arduino-ethernet-shield-to-update-a-thingspeak-channel/)'
- en: '**Arduino examples for ThingSpeak**: [https://github.com/iobridge/ThingSpeak-Arduino-Examples](https://github.com/iobridge/ThingSpeak-Arduino-Examples)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ThingSpeak 的 Arduino 示例**：[https://github.com/iobridge/ThingSpeak-Arduino-Examples](https://github.com/iobridge/ThingSpeak-Arduino-Examples)'
- en: '**Communicating with ThingSpeak using Python**: [http://www.australianrobotics.com.au/news/how-to-talk-to-thingspeak-with-python-a-memory-cpu-monitor](http://www.australianrobotics.com.au/news/how-to-talk-to-thingspeak-with-python-a-memory-cpu-monitor)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Python 与 ThingSpeak 通信**：[http://www.australianrobotics.com.au/news/how-to-talk-to-thingspeak-with-python-a-memory-cpu-monitor](http://www.australianrobotics.com.au/news/how-to-talk-to-thingspeak-with-python-a-memory-cpu-monitor)'
- en: '**Using Arduino and Python to talk to a ThingSpeak channel**: [http://vimeo.com/19064691](http://vimeo.com/19064691)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Arduino 和 Python 与 ThingSpeak 通道通信**：[http://vimeo.com/19064691](http://vimeo.com/19064691)'
- en: '**Series of ThingSpeak tutorials**: [http://community.thingspeak.com/tutorials/](http://community.thingspeak.com/tutorials/)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一系列的 ThingSpeak 教程**：[http://community.thingspeak.com/tutorials/](http://community.thingspeak.com/tutorials/)'
- en: ThingSpeak is an open source platform and you can create your own customized
    version of ThingSpeak using the files provided. You can obtain these files and
    the associated guideline from [https://github.com/iobridge/ThingSpeak](https://github.com/iobridge/ThingSpeak).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: ThingSpeak 是一个开源平台，您可以使用提供的文件创建自己的定制版 ThingSpeak。您可以从 [https://github.com/iobridge/ThingSpeak](https://github.com/iobridge/ThingSpeak)
    获取这些文件和相关指南。
- en: Carriots
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Carriots
- en: 'Carriots also provides a free, basic account for developers. If you want to
    use Carriots as an alternative to Xively, use the tutorials in the following links
    to get started:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Carriots 也为开发者提供免费的基本账户。如果您想将 Carriots 作为 Xively 的替代品使用，请使用以下链接中的教程开始：
- en: '**The official website**: [https://www.carriots.com/](https://www.carriots.com/)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**官方网站**：[https://www.carriots.com/](https://www.carriots.com/)'
- en: '**Setting up an account on Carriots**: [https://learn.adafruit.com/wireless-gardening-arduino-cc3000-wifi-modules/setting-up-your-carriots-account](https://learn.adafruit.com/wireless-gardening-arduino-cc3000-wifi-modules/setting-up-your-carriots-account)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Carriots 上设置账户**：[https://learn.adafruit.com/wireless-gardening-arduino-cc3000-wifi-modules/setting-up-your-carriots-account](https://learn.adafruit.com/wireless-gardening-arduino-cc3000-wifi-modules/setting-up-your-carriots-account)'
- en: '**The Carriots library for Arduino**: [https://github.com/carriots/arduino_library](http://github.com/carriots/arduino_library)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arduino 的 Carriots 库**：[https://github.com/carriots/arduino_library](http://github.com/carriots/arduino_library)'
- en: '**A Carriots example for Arduino**: [https://github.com/carriots/arduino_examples](https://github.com/carriots/arduino_examples)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arduino 的 Carriots 示例**：[https://github.com/carriots/arduino_examples](https://github.com/carriots/arduino_examples)'
- en: '**Connect Carriots to the Python web application**: [http://www.instructables.com/id/Connect-your-Carriots-Device-to-Panics-Status-Boa/](http://www.instructables.com/id/Connect-your-Carriots-Device-to-Panics-Status-Boa/)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将 Carriots 连接到 Python 网络应用**：[http://www.instructables.com/id/Connect-your-Carriots-Device-to-Panics-Status-Boa/](http://www.instructables.com/id/Connect-your-Carriots-Device-to-Panics-Status-Boa/)'
- en: Developing cloud applications using Python and Xively
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 和 Xively 开发云应用
- en: Now, you have a basic idea about the available commercial IoT platforms and
    you can select one according to your comfort level and requirements. It will be
    very difficult to comprehensively explain every cloud platform with practical
    examples, as the objective of this chapter is to make you familiar with integrating
    the cloud platform with Python and Arduino. For this reason, we are going to use
    Xively as the de facto IoT cloud platform for the rest of the integration exercises.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经对可用的商业物联网平台有了基本的了解，您可以根据自己的舒适度和需求选择一个。由于本章的目标是让您熟悉将云平台与 Python 和 Arduino
    集成，因此很难全面解释每个云平台及其实际示例。因此，我们将使用 Xively 作为后续集成练习的默认物联网云平台。
- en: Now that you know how to create an account on Xively and work with the Xively
    platform, it is time to start interfacing real hardware with the Xively platform.
    In this section, we will go through methods to upload and download data from Xively.
    We will combine the Arduino hardware that we built with the Python programs to
    show you basic methods of communicating with Xively.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道如何在Xively上创建账户并使用Xively平台，是时候开始将真实硬件与Xively平台接口了。在本节中，我们将介绍上传和下载Xively数据的方法。我们将结合我们构建的Arduino硬件和Python程序来向您展示与Xively通信的基本方法。
- en: Interfacing Arduino with Xively
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Arduino与Xively接口
- en: The first stage to establish communication with Xively includes interfacing
    the Arduino board with the Xively platform via standalone Arduino code. We have
    already built the necessary hardware using the Arduino Uno, Ethernet Shield, and
    a few sensors. Let's connect it to your computer using the USB port. You also
    need to connect the Ethernet Shield to your home router using the Ethernet cable.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与Xively建立通信的第一阶段包括通过独立Arduino代码将Arduino板与Xively平台接口。我们已经使用Arduino Uno、以太网盾和几个传感器构建了必要的硬件。让我们通过USB端口将其连接到您的计算机。您还需要使用以太网线将以太网盾连接到您的家庭路由器。
- en: Uploading Arduino data to Xively
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上传Arduino数据到Xively
- en: The Arduino IDE has a built-in example that can be used to communicate with
    the Xively service. This is known as **PachubeClient** (Pachube was Xively's previous
    name).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IDE有一个内置的示例，可以用来与Xively服务通信。这被称为**PachubeClient**（Pachube是Xively之前的名称）。
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to note that the reason behind using this default example is
    to give you a jump-start in the interfacing exercises. This particular sketch
    is rather old and may get dropped as a default exercise in the upcoming releases
    of the Arduino IDE. In that case, you can directly jump to the next exercise or
    develop your custom sketch to perform the same exercise.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，使用此默认示例的原因是为了在接口练习中给您一个快速入门。这个特定的草图相当陈旧，可能会在Arduino IDE的即将发布的版本中被删除作为默认练习。在这种情况下，您可以直接跳到下一个练习或开发您自己的草图以执行相同的练习。
- en: 'Perform the following steps to upload Arduino data to Xively:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤上传Arduino数据到Xively：
- en: Open the Arduino IDE and then open the **PachubeClient** example by navigating
    to **File** | **Examples** | **Ethernet** | **PachubeClient**.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Arduino IDE，然后通过导航到**文件** | **示例** | **以太网** | **PachubeClient**来打开**PachubeClient**示例。
- en: To establish communication with Xively, you will need the feed ID and the API
    key of your Xively device, which you obtained in the last section.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要与Xively建立通信，您需要Xively设备的feed ID和API密钥，这些信息您在上一个部分中已获得。
- en: 'In the opened Arduino sketch, perform the following changes using the obtained
    feed ID and API key. You can specify any project name for the `USERAGENT` parameter:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开的Arduino草图中进行以下更改，使用获得的feed ID和API密钥。您可以指定任何项目名称作为`USERAGENT`参数：
- en: '[PRE1]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the Arduino sketch, you will also have to change the MAC address and the
    IP address of your Ethernet Shield. You should be familiar with obtaining these
    addresses from the exercise that you performed in the previous chapter. Use these
    values and modify the following lines of code appropriately:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Arduino草图中，您还必须更改以太网盾的MAC地址和IP地址。您应该熟悉从上一章中执行的活动中获得这些地址。使用这些值并相应地修改以下代码行：
- en: '[PRE2]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As the opened Arduino example was created for the Pachube, you need to update
    the server address to `api.xively.com` as specified in the following code snippet.
    Comment the IP address line as we will not need it anymore and add the `server[]`
    parameter:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于打开的Arduino示例是为Pachube创建的，因此您需要将服务器地址更新为以下代码片段中指定的`api.xively.com`。注释掉IP地址行，因为我们不再需要它，并添加`server[]`参数：
- en: '[PRE3]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `sendData()` function, change the channel name to `HumidityRaw` as we
    have our HIH-4030 humidity sensor connected to the analog port. We are not performing
    any relative humidity calculations at this stage and are going to upload just
    the raw data from the sensor:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`sendData()`函数中，将通道名称更改为`HumidityRaw`，因为我们已经将HIH-4030湿度传感器连接到模拟端口。我们目前不进行任何相对湿度计算，并将仅上传传感器的原始数据：
- en: '[PRE4]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once you have performed these changes, open the `XivelyClientBasic.ino` file
    from the folder containing codes for this chapter. Compare them with your current
    sketch and compile/upload the sketch to the Arduino board if everything seems
    satisfactory. Once you have uploaded the code, open the **Serial Monitor** window
    in the Arduino IDE to observe the following output:![Uploading Arduino data to
    Xively](img/5938OS_09_14.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成这些更改后，从包含本章代码的文件夹中打开`XivelyClientBasic.ino`文件。将它们与您的当前草图进行比较，并在一切看起来满意的情况下编译/上传草图到Arduino板。一旦上传了代码，在Arduino
    IDE中打开**串行监视器**窗口以观察以下输出：![将Arduino数据上传到Xively](img/5938OS_09_14.jpg)
- en: If you see an output in the **Serial Monitor** window that is similar to the
    one displayed in the previous screenshot, your Arduino is successfully connected
    to Xively and is uploading data on the HumidityRaw channel.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在**串行监视器**窗口中看到与之前截图相似的输出，则表示您的Arduino已成功连接到Xively，并在HumidityRaw通道上上传数据。
- en: Open your device in Xively's website and you will be able to see an output that
    is similar to the following screenshot on the web page. This confirms that you
    have successfully uploaded data to an IoT cloud platform using your remotely-located
    Arduino:![Uploading Arduino data to Xively](img/5938OS_09_15.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xively网站上打开您的设备，您将在网页上看到类似于以下截图的输出。这证实您已成功使用远程位置的Arduino将数据上传到物联网云平台：![将Arduino数据上传到Xively](img/5938OS_09_15.jpg)
- en: Downloading data to Arduino from Xively
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从Xively下载数据到Arduino
- en: In the previous coding exercise, we used a default Arduino example to communicate
    with Xively. However, Xively also provides a very efficient Arduino library with
    built-in functions for rapid programming. In the next exercise, we will use an
    alternative method to communicate with the Xively platform using the `Xively-Arduino`
    library. Although you can use either of these methods, we recommend that you use
    the `Xively-Arduino` library as it is officially maintained by Xively.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的编码练习中，我们使用默认的Arduino示例与Xively通信。然而，Xively还提供了一个非常高效的Arduino库，其中内置了用于快速编程的功能。在下一个练习中，我们将使用`Xively-Arduino`库的替代方法与Xively平台通信。虽然您可以使用这两种方法中的任何一种，但我们建议您使用`Xively-Arduino`库，因为它是由Xively官方维护的。
- en: In this exercise, we will download digital values from a channel called LED.
    Later, we will use these digital values, 0 and 1, to switch an LED that is connected
    to our Arduino board. As an input to this channel, we will alter the current value
    of the channel on the Xively platform's website while letting the Arduino download
    that value and perform the appropriate task.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将从名为LED的通道下载数字值。稍后，我们将使用这些数字值，0和1，来切换连接到我们的Arduino板上的LED。作为此通道的输入，我们将在Xively平台网站上更改通道的当前值，同时让Arduino下载该值并执行适当的任务。
- en: Let's begin by importing the `Xively-Arduino` library and its dependencies.
    As you already know how to import libraries in the Arduino IDE, visit [https://github.com/amcewen/HttpClient](https://github.com/amcewen/HttpClient)
    to download and import the `HttpClient` library. This is a dependency that is
    required by the `Xively-Arduino` library to function.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从导入`Xively-Arduino`库及其依赖项开始。如您所知，如何在Arduino IDE中导入库，请访问[https://github.com/amcewen/HttpClient](https://github.com/amcewen/HttpClient)下载并导入`HttpClient`库。这是`Xively-Arduino`库运行所必需的依赖项。
- en: Once you have imported the `HttpClient` library, download the `Xively-Arduino`
    library from [https://github.com/xively/xively_arduino](https://github.com/xively/xively_arduino)
    and repeat the import process.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入`HttpClient`库后，从[https://github.com/xively/xively_arduino](https://github.com/xively/xively_arduino)下载`Xively-Arduino`库并重复导入过程。
- en: The `Xively-Arduino` library ships with few examples so that you can get started.
    We will use their example as base code for downloading data for our exercise.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`Xively-Arduino`库附带了一些示例，以便您开始使用。我们将使用他们的示例作为下载数据的基础代码。'
- en: 'In the Arduino IDE, navigate to **File** | **Examples** | **Xively_arduino**
    | **DatastreamDownload** and open the **DatastreamDownload** example. Change the
    default API key to your own API key that was obtained from the device that you
    created. As displayed in the following code snippet, you need to also identify
    your channel name, which is LED in this case:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Arduino IDE中，导航到**文件** | **示例** | **Xively_arduino** | **DatastreamDownload**并打开**DatastreamDownload**示例。将默认API密钥更改为从您创建的设备获得的自己的API密钥。如以下代码片段所示，您还需要确定您的通道名称，在本例中为LED：
- en: '[PRE5]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `Xively-Arduino` library requires you to define the `XivelyDatastream`
    variable as an array. You can also specify multiple data streams according to
    your application:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Xively-Arduino`库要求您将`XivelyDatastream`变量定义为数组。您也可以根据您的应用程序指定多个数据流：'
- en: '[PRE6]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You also need to declare a variable called `feed` using the `XivelyFeed` function.
    As displayed in the following line of code, replace the default feed ID with the
    appropriate one. In the initialization of the `feed` variable, the value `1` represents
    the number of `datastreams` in the `XivelyDatastream` array:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要使用`XivelyFeed`函数声明一个名为`feed`的变量。如以下代码行所示，将默认的feed ID替换为适当的ID。在`feed`变量的初始化中，值`1`代表`XivelyDatastream`数组中的`datastreams`数量：
- en: '[PRE7]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In our exercise, we want to periodically retrieve the value of the LED channel
    and turn the actual LED on or off accordingly. In the following code snippet,
    we obtain the float value from `feed[0]`, where `0` specifies the data stream
    located at the `0` position in the `datastreams` array:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的练习中，我们想要定期检索LED通道的值并根据实际情况打开或关闭LED。在以下代码片段中，我们从`feed[0]`获取浮点值，其中`0`指定位于`datastreams`数组中`0`位置的`data
    stream`：
- en: '[PRE8]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you now know that the parameters need to be changed for this exercise, open
    the `XivelyLibBasicRetrieveData.ino` Arduino sketch from the code folder. This
    sketch contains the exact code that you need to use for the exercise. Although
    this sketch includes the necessary modifications, you will still have to change
    the values for account-specific parameters, that is, the API key, feed ID, and
    so on. Before you go ahead and upload this sketch, go to the Xively platform and
    create a channel called `LED` with **Current Value** as `1`, as displayed in the
    following screenshot:![Downloading data to Arduino from Xively](img/5938OS_09_16.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您现在所知，此练习需要更改参数，请从代码文件夹中打开`XivelyLibBasicRetrieveData.ino` Arduino草图。此草图包含您进行练习所需的精确代码。尽管此草图包括必要的修改，但您仍然需要更改特定于账户的参数值，即API密钥、feed
    ID等。在您上传此草图之前，请转到Xively平台并创建一个名为`LED`的通道，**当前值**为`1`，如以下截图所示：![从Xively下载数据到Arduino](img/5938OS_09_16.jpg)
- en: Now, compile and upload the code to your Arduino.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将代码编译并上传到您的Arduino。
- en: Once you have uploaded the compiled code to your Arduino, open the **Serial
    Monitor** window and wait for an output that is similar to the one displayed in
    following screenshot. You will notice that the LED on the Arduino hardware is
    turned on:![Downloading data to Arduino from Xively](img/5938OS_09_17.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您将编译后的代码上传到Arduino，打开**串行监视器**窗口并等待一个类似于以下截图的输出。您会注意到Arduino硬件上的LED灯已点亮：![从Xively下载数据到Arduino](img/5938OS_09_17.jpg)
- en: You can go back to the Xively LED channel and change the **Current Value** field
    to `0`. Within a few seconds, you will notice that the LED on the Arduino hardware
    is turned off. With this exercise, you have successfully established two-way communication
    between Arduino and the Xively platform.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以回到Xively LED通道并将**当前值**字段更改为`0`。几秒钟后，您会注意到Arduino硬件上的LED灯已关闭。通过这个练习，您已成功在Arduino和Xively平台之间建立了双向通信。
- en: Advanced code to upload and download data using Arduino
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于使用Arduino上传和下载数据的先进代码
- en: 'In the previous two Arduino exercises, we individually performed the uploading
    and downloading tasks. In this exercise, we want to create an Arduino program
    where we can upload data from the connected sensors (the PIR motion sensor and
    the HIH-4030 humidity sensor) while retrieving the value to control the LED. Open
    the Arduino sketch, `XivelyLibAdvance.ino`, which contains the code that demonstrates
    both the functionalities. As you can see in the following code snippet, we have
    defined three separate channels for each component while having independent `XivelyDatastream`
    objects for upload (`datastreaU[]`) and download (`datastreamD[]`). Similarly,
    we have also created two different feeds, `feedU` and `feedD`. The main reason
    behind delegating the upload and download tasks to different objects is to independently
    update the value of the LED channel while uploading the data stream for channels,
    `HumidityRaw` and `MotionRaw`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个Arduino练习中，我们分别执行了上传和下载任务。在这个练习中，我们想要创建一个Arduino程序，我们可以从连接的传感器（PIR运动传感器和HIH-4030湿度传感器）上传数据，同时检索控制LED的值。打开Arduino草图，`XivelyLibAdvance.ino`，其中包含演示这两种功能的代码。正如你在以下代码片段中可以看到的，我们为每个组件定义了三个独立的通道，同时为上传（`datastreaU[]`）和下载（`datastreamD[]`）创建了独立的`XivelyDatastream`对象。同样，我们也创建了两个不同的feed，`feedU`和`feedD`。将上传和下载任务委托给不同对象的主要原因是独立更新LED通道的值，同时上传`HumidityRaw`和`MotionRaw`通道的数据流：
- en: '[PRE9]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `loop()` function of the Arduino code, we periodically fetch the current
    value of the LED channel from `feedD` and then perform the LED action:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在Arduino代码的`loop()`函数中，我们定期从`feedD`获取LED通道的当前值，然后执行LED动作：
- en: '[PRE10]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the second stage of the periodic function, we obtain the raw sensor values
    from the analog and digital pins of the Arduino board and then upload those values
    using `feedU`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在周期函数的第二阶段，我们从Arduino板上的模拟和数字引脚获取原始传感器值，然后使用`feedU`上传这些值：
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Make the appropriate changes in the code to accommodate feed ID and API key
    and then upload the sketch to the Arduino board. Once you upload this Arduino
    sketch to your platform, you should be able to see the following output on the
    **Serial Monitor** window. You can now disconnect your Arduino from the USB port
    and connect the external power supply. Now that you have connected your Arduino
    assembly to your local network using an Ethernet cable, you can place the Arduino
    assembly at any location in your workplace.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对代码进行适当的修改以适应feed ID和API密钥，然后将草图上传到Arduino板。一旦将这个Arduino草图上传到你的平台，你应该能在**串行监视器**窗口看到以下输出。现在你可以从USB端口断开Arduino，并连接外部电源。现在，你已经使用以太网线将Arduino组件连接到你的本地网络，你可以将Arduino组件放置在你工作场所的任何位置。
- en: '![Advanced code to upload and download data using Arduino](img/5938OS_09_18.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![使用Arduino上传和下载数据的先进代码](img/5938OS_09_18.jpg)'
- en: Python – uploading data to Xively
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python – 将数据上传到Xively
- en: Similar to how we interfaced Arduino to Xively, we will now explore methods
    to connect the Xively platform via Python and thus complete the loop. In this
    section, we will focus on different ways of uploading data to Xively using Python.
    We will start with a basic method of communicating with Xively and extend it further
    with `web.py` to implement the interface using a web application.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们如何将Arduino连接到Xively类似，我们现在将探索通过Python连接Xively平台的方法，从而完成循环。在本节中，我们将关注使用Python上传数据到Xively的不同方法。我们将从一个与Xively通信的基本方法开始，并进一步使用`web.py`来实现通过Web应用程序的接口。
- en: 'To begin with, let''s first install Xively''s Python library, `xively-python`,
    on your computer using the following command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用以下命令在你的计算机上安装Xively的Python库，`xively-python`：
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The basic method for sending data
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发送数据的基本方法
- en: 'Once again, you will need the API key and feed ID of your virtual device that
    you created on the Xively platform. Python, assisted by the `xively-python` library,
    provides very simple methods to establish a communication channel with the Xively
    platform. From your code folder, open the `uploadBasicXively.py` file. As specified
    in the code, replace the `FEED_ID` and `API_KEY` variables with the appropriate
    feed ID and API key:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，你需要你的虚拟设备在Xively平台上创建的API密钥和feed ID。Python，借助`xively-python`库，提供了非常简单的方法来与Xively平台建立通信通道。从你的代码文件夹中，打开`uploadBasicXively.py`文件。根据代码中的说明，将`FEED_ID`和`API_KEY`变量替换为适当的feed
    ID和API密钥：
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Using the `XivelyAPIClient` method, create an `api` instance and create the
    `feed` variable by using the `api.feeds.get()` method:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`XivelyAPIClient`方法创建一个`api`实例，并通过`api.feeds.get()`方法创建`feed`变量：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Just as we did in the Arduino exercises, you will need to create data streams
    for each channel from the feeds. As specified in the following code snippet, try
    to get the specified channel from the feed or create one if it is not present
    on the Xively virtual device. You can also specify tags and other variables while
    creating a new channel:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在Arduino练习中所做的那样，您需要从数据源中为每个通道创建数据流。如下代码片段中指定，尝试从数据源中获取指定的通道，或者如果它不在Xively虚拟设备上，则创建一个新通道。在创建新通道时，您也可以指定标签和其他变量：
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once you have opened the data stream for a channel, you can specify the current
    value using the `datastream.cuurent_value` method and update the value, which
    will upload this value to the specified channel:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您为通道打开了数据流，您可以使用`datastream.current_value`方法指定当前值，并更新该值，这将把此值上传到指定的通道：
- en: '[PRE16]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once you have performed the specified modifications to the `uploadBasicXively.py`
    file, execute it using the following command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您对`uploadBasicXively.py`文件进行了指定的修改，请使用以下命令执行它：
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Open your virtual device on the Xively website to find the `Random` channel
    populated with the data that you uploaded. It will look similar to the following
    screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Xively网站上的虚拟设备，以找到填充了您上传的数据的`Random`通道。它看起来类似于以下截图：
- en: '![The basic method for sending data](img/5938OS_09_19.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![发送数据的基本方法](img/5938OS_09_19.jpg)'
- en: Uploading data using a web interface based on web.py
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于web.py的Web界面上传数据
- en: In the previous chapter, we worked with the `web.py` library while developing
    templates and web applications. In this exercise, we will utilize one of the programs
    in which we created the `web.py` forms with the Xively code that we developed
    in the previous exercise. The goal of this exercise is to send data to the LED
    channel using a web application while observing the LED's behavior on the Arduino
    hardware.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们在开发模板和Web应用时使用了`web.py`库。在本练习中，我们将利用我们在上一练习中创建的`web.py`表单和Xively代码中的程序。本练习的目标是使用Web应用将数据发送到LED通道，同时观察Arduino硬件上LED的行为。
- en: 'You can find the Python program for this exercise in this chapter''s folder
    with the name `uploadWebpyXively.py`. As you can see in the code, we are using
    the `web.py` forms to obtain two inputs, `Channel` and `Value`. We will use these
    inputs to modify the current value of the LED channel:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本章文件夹中找到本练习的Python程序，文件名为`uploadWebpyXively.py`。正如您在代码中看到的，我们正在使用`web.py`表单获取两个输入，`Channel`和`Value`。我们将使用这些输入来修改LED通道的当前值：
- en: '[PRE18]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The template file, `base.html`, is also modified to accommodate minor changes
    that are required by this exercise. As you can see in the opened Python file,
    we are using the same code that we used to interface with Xively in the previous
    exercise. The only major modification is done to the `datastream.update()` method,
    which is now placed in the `POST()` function. This method will be executed when
    you submit the form. Once you change the API key and feed ID in this file, execute
    the Python code and open `http://localhost:8080` in your web browser. You can
    see the web application running, as displayed in the following screenshot. Enter
    the value as displayed in the figure to turn on the LED on the Arduino board.
    You can change the **Value** parameter to `0` to turn off the LED.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文件`base.html`也被修改以适应本练习所需的微小变化。正如您在打开的Python文件中看到的，我们正在使用与上一练习中用于与Xively接口相同的代码。唯一的重大修改是对`datastream.update()`方法的修改，现在它被放置在`POST()`函数中。当您提交表单时，将执行此方法。一旦您更改了文件中的API密钥和feed
    ID，请执行Python代码，并在您的Web浏览器中打开`http://localhost:8080`。您可以看到正在运行的Web应用，如下面的截图所示。输入图中显示的值以在Arduino板上打开LED。您可以将**Value**参数更改为`0`以关闭LED。
- en: '![Uploading data using a web interface based on web.py](img/5938OS_09_20.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![基于web.py的Web界面上传数据](img/5938OS_09_20.jpg)'
- en: Python – downloading data from Xively
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python – 从Xively下载数据
- en: The process of downloading data from Xively includes requesting the **Current
    Value** parameter for the specified channel. In the next exercise, we will develop
    a reference code that will be used in the next downloading exercise. In that exercise,
    we will develop an advanced web application to retrieve data from a specific Xively
    channel.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 从Xively下载数据的过程包括请求指定通道的**当前值**参数。在下一个练习中，我们将开发一个参考代码，该代码将在下一个下载练习中使用。在那个练习中，我们将开发一个高级Web应用程序，用于从特定的Xively通道检索数据。
- en: As we are using functions based on the REST protocol to communicate with Xively,
    Xively will not simply notify you about any new, available update, instead you
    will have to request it. At this point, it is important to note that we will have
    to periodically request data from Xively. However, Xively provides an alternative
    method called **triggers** to overcome this problem, which is explained later
    in this section.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用基于REST协议的函数与Xively进行通信，Xively不会简单地通知您任何新的、可用的更新，相反，您将不得不请求它。在此阶段，重要的是要注意，我们将不得不定期从Xively请求数据。然而，Xively提供了一个称为**触发器**的替代方法来克服这个问题，这将在本节后面进行解释。
- en: The basic method for retrieving data from Xively
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从Xively获取数据的基本方法
- en: 'Just like the uploading exercises, the downloading exercises also require a
    similar code to instantiate the `XivelyAPIClient()` and `api.feeds.get()` methods.
    As we are retrieving the data instead of sending it, we will only use the `feed.datastreams.get()`
    method and avoid the `feed.datastreams.create()` method. The download process
    requires the channel to be already present and this is the main reason why we
    only have to use the `get()` method:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 就像上传练习一样，下载练习也需要类似的代码来实例化`XivelyAPIClient()`和`api.feeds.get()`方法。由于我们是检索数据而不是发送它，我们只会使用`feed.datastreams.get()`方法并避免使用`feed.datastreams.create()`方法。下载过程需要通道已经存在，这也是我们为什么只需要使用`get()`方法的主要原因：
- en: '[PRE19]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once the `datastream` object is initialized, the latest available value from
    the channel can be obtained using the `datastream.current_value` method:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦初始化了`datastream`对象，就可以使用`datastream.current_value`方法获取通道的最新可用值：
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To enable the complete code to perform this exercise, open the `downloadXivelyBasic.py`
    code and change the values for the feed ID and API key to the appropriate ones.
    In this exercise, we are working with the `Random` channel that we created in
    the uploading exercise. Before you execute this Python code, you need to execute
    the `uploadXivelyBasic.py` file that will continuously provide random data to
    the `Random` channel. Now, you can execute the `downloadXivelyBasic.py` file that
    will fetch the current value of the `Random` channel periodically (with a delay
    specified by the `sleep()` function). As you can see in the following screenshot,
    we are getting a new value for the `Random` channel every 10 seconds:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用完整代码执行此练习，请打开`downloadXivelyBasic.py`代码，并将馈送ID和API密钥的值更改为适当的值。在这个练习中，我们正在使用在上传练习中创建的`Random`通道。在您执行此Python代码之前，您需要执行`uploadXivelyBasic.py`文件，该文件将连续为`Random`通道提供随机数据。现在，您可以执行`downloadXivelyBasic.py`文件，该文件将定期（由`sleep()`函数指定的延迟）获取`Random`通道的当前值。如图所示，我们每10秒就会为`Random`通道获取一个新的值：
- en: '![The basic method for retrieving data from Xively](img/5938OS_09_21.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![从Xively获取数据的基本方法](img/5938OS_09_21.jpg)'
- en: Retrieving data from the web.py web interface
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从web.py Web界面检索数据
- en: This is an advanced exercise where we will upload data to one Xively channel
    after fetching data from another Xively channel, and process it by using the data
    entered via the web form. As you know, the analog pin on which the HIH-4030 sensor
    is connected provides you with raw sensor value, whereas the relative humidity
    depends upon the value of the current temperature. In this exercise, we will develop
    a web application so that the user can manually enter the temperature value and
    we will use this to calculate relative humidity from the raw sensor data.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个高级练习，我们将从另一个Xively通道获取数据后，将其上传到Xively的一个通道，并使用通过Web表单输入的数据进行处理。正如您所知，连接HIH-4030传感器的模拟引脚提供了原始传感器值，而相对湿度取决于当前温度的值。在这个练习中，我们将开发一个Web应用程序，以便用户可以手动输入温度值，我们将使用这个值从原始传感器数据中计算相对湿度。
- en: Before we begin with the details of the code, let's first open the `uploadWebpyXively.py`
    file, change the appropriate parameters, and execute the file. Now, in a web browser,
    open the `http://localhost:8080` location. You will be able to see following web
    application, asking you to provide it with the current temperature value. Meanwhile,
    upload the `XivelyLibAdvance.ino` sketch to the Arduino board after making the
    appropriate changes. With this program, Arduino will start sending raw motion
    and humidity values to the `MotionRaw` and `HumidityRaw` channels. In the web
    application that is running, submit the form with the custom temperature value
    and you will be able to see the web application load the current relative humidity
    in percentage units. Internally, when you submitted the form, the web application
    retrieved the current raw humidity value from the `HumidityRaw` channel, executed
    the `relativeHumidity(data, temperature)` function, uploaded the calculated humidity
    value to a new channel called `Humidity`, and then displayed that value in the
    web application.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始详细讲解代码之前，首先打开`uploadWebpyXively.py`文件，更改适当的参数，并执行该文件。现在，在网页浏览器中打开`http://localhost:8080`位置。你将能够看到一个要求你提供当前温度值的网页应用程序。同时，在做出适当更改后，将`XivelyLibAdvance.ino`草图上传到Arduino板。使用这个程序，Arduino将开始向`MotionRaw`和`HumidityRaw`通道发送原始运动和湿度值。在运行的网页应用程序中，提交带有自定义温度值的表单，你将能够看到网页应用程序加载当前相对湿度（以百分比为单位）。在内部，当你提交表单时，网页应用程序从`HumidityRaw`通道检索当前原始湿度值，执行`relativeHumidity(data,
    temperature)`函数，将计算出的湿度值上传到名为`Humidity`的新通道，然后在网页应用程序中显示该值。
- en: '![Retrieving data from the web.py web interface](img/5938OS_09_22.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![从web.py网页界面检索数据](img/5938OS_09_22.jpg)'
- en: If you open your Xively platform page on a web browser, you will be able to
    see a newly created `Humidity` channel with the current value for relative humidity.
    You can submit multiple values for temperature in the web application to see the
    results reflected on the graph of the `Humidity` channel, as displayed in the
    following screenshot. Although this exercise demonstrates a single use case, this
    web application can be extended in multiple ways to create complex applications.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个网页浏览器上打开你的Xively平台页面，你将能够看到一个新创建的`Humidity`通道，显示当前相对湿度的值。你可以在网页应用程序中提交多个温度值，以查看在`Humidity`通道的图表上反映的结果，如以下截图所示。尽管这个练习演示了一个单一用例，但这个网页应用程序可以通过多种方式扩展，以创建复杂的应用程序。
- en: '![Retrieving data from the web.py web interface](img/5938OS_09_23.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![从web.py网页界面检索数据](img/5938OS_09_23.jpg)'
- en: Triggers – custom notifications from Xively
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触发器 – 来自Xively的自定义通知
- en: 'The Xively platform primarily deploys services based on the REST protocol,
    which doesn''t have a provision to automatically publish data when it is updated
    with a new value. In order to overcome this limitation, Xively implements the
    concept of triggers, which provide additional functionality beyond just publishing
    data when it is changed. Through this, you can basically create a trigger for
    any channel to perform the `POST` operation on the specified location when conditions
    that are set for that trigger get satisfied by the incoming data. For example,
    you can set a trigger on the `Humidity` channel to send you a notification when
    the value of humidity changes, that is, increases above or decrease below a given
    threshold. You can create a trigger in your Xively platform account by just clicking
    on the **Add Trigger** button, as displayed in the following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Xively平台主要基于REST协议部署服务，该协议没有提供在更新为新值时自动发布数据的条款。为了克服这一限制，Xively实现了触发器的概念，它提供了除发布数据之外的功能。通过这种方式，你可以为任何通道创建一个触发器，当满足该触发器设定的条件时，在指定位置执行`POST`操作。例如，你可以在`Humidity`通道上设置一个触发器，当湿度值变化时（即增加或减少到给定阈值以上或以下）向你发送通知。你只需点击以下截图所示的**添加触发器**按钮，就可以在你的Xively平台账户中创建一个触发器：
- en: '![Triggers – custom notifications from Xively](img/5938OS_09_24.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![触发器 – 来自Xively的自定义通知](img/5938OS_09_24.jpg)'
- en: 'While creating a trigger, you can specify the channel you want to monitor and
    the condition to trigger a notification on the specified HTTP `POST` URL. As shown
    in the following screenshot, complete the information for **Channel**, **Condition**,
    and **HTTP POST URL** before saving the trigger. The major drawback with this
    approach is that Xively requires an actual URL to send the `POST` notification.
    If your current computer doesn''t have a static IP address or a DNS address, the
    trigger won''t be able to send you the notification:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建触发器时，您可以指定要监控的通道以及触发指定HTTP `POST` URL通知的条件。如图所示，在保存触发器之前，完成**通道**、**条件**和**HTTP
    POST URL**的信息。这种方法的重大缺点是Xively需要实际的URL来发送`POST`通知。如果您的当前计算机没有静态IP地址或DNS地址，触发器将无法向您发送通知：
- en: '![Triggers – custom notifications from Xively](img/5938OS_09_25.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![触发器 – 来自Xively的自定义通知](img/5938OS_09_25.jpg)'
- en: Your own cloud platform for the IoT
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您自己的物联网云平台
- en: 'In the previous section, we worked with a commercial IoT platform that also
    provides restricted, free access to basic functionalities. We also learned various
    ways to communicate with Xively that is based on the REST protocol. For any small
    projects or prototypes, Xively and other similar IoT platforms provide a sufficient
    solution and are therefore recommended by us. However, the limited free service
    provided by Xively may not satisfy all of your requirements to develop a full-stack
    IoT product. The following are a few cases where you may want to configure or
    develop your own IoT platform:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们使用了一个同时提供受限免费访问基本功能的商业物联网平台。我们还学习了与基于REST协议的Xively进行通信的各种方法。对于任何小型项目或原型，Xively和其他类似的物联网平台提供了一个足够的解决方案，因此我们推荐使用。然而，Xively提供的有限免费服务可能无法满足您开发全栈物联网产品的所有需求。以下是一些您可能想要配置或开发自己的物联网平台的情况：
- en: Develop your own commercial IoT platform
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发您自己的商业物联网平台
- en: Develop custom features that are exclusive to your product
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发仅属于您产品的自定义功能
- en: Add more control features and communication protocols while also securing your
    data
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在增加更多控制功能和通信协议的同时，也要确保您的数据安全
- en: Require an inexpensive solution for large-scale projects
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要一个经济实惠的解决方案来处理大规模项目
- en: This section will guide you through the step-by-step process of creating an
    elementary small-level IoT cloud platform. The goal of the section is to make
    you familiar with the requirements and the process of creating an IoT platform.
    To develop a large-scale, diverse, and feature-rich platform such as Xively, you
    will need a significant amount of knowledge and experience in the domains of cloud
    and distributed computing. Unfortunately, cloud and distributed computing are
    out of scope of this book and we will stick with the implementation of the basic
    features.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将指导您逐步创建一个基本的低级别物联网云平台。本节的目标是使您熟悉创建物联网平台的要求和过程。要开发像Xively这样的大规模、多样化且功能丰富的平台，您需要在云和分布式计算领域拥有大量的知识和经验。不幸的是，云和分布式计算超出了本书的范围，我们将坚持实现基本功能。
- en: To develop a cloud platform that is accessible through the Internet, you will
    at least require a computational unit with Internet connection and a static IP
    or DNS address. Today, the majority of consumer-oriented **Internet Service Providers**
    (**ISPs**) do not provide static IPs with their Internet service, making it difficult
    to host a server at home. However, various companies such as Amazon, Google, and
    Microsoft, provide free or cost-effective cloud computing services, which make
    it easier to host your cloud on their platforms. These services are highly scalable
    and they are equipped with a large amount of features to satisfy the majority
    of consumer requirements. In the following section, you will be creating your
    first cloud computing instance on **Amazon Web Services** (**AWS**). Later in
    this chapter, we will install and configure the appropriate software tools such
    as Python, Mosquitto broker, and so on, to utilize this Amazon instance as an
    IoT cloud platform.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发一个可以通过互联网访问的云平台，您至少需要一个具有互联网连接的计算单元和一个静态IP或DNS地址。如今，大多数面向消费者的**互联网服务提供商**（**ISPs**）在其互联网服务中不提供静态IP地址，这使得在家托管服务器变得困难。然而，像亚马逊、谷歌和微软这样的各种公司提供免费或成本效益高的云计算服务，这使得在它们的平台上托管云变得更加容易。这些服务具有高度的扩展性，并配备了大量功能，以满足大多数消费者的需求。在接下来的部分中，您将创建您的第一个云计算实例在**亚马逊网络服务**（**AWS**）上。在本章的后面部分，我们将安装和配置适当的软件工具，如Python、Mosquitto代理等，以利用这个亚马逊实例作为物联网云平台。
- en: Note
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The major reason behind developing or configuring a personal cloud platform
    is to have access to your IoT hardware through the Internet. Due to the lack of
    a static IP address for your home network, you may not be able to access you prototypes
    or projects from a remote location. A cloud platform can be used as the de facto
    computation unit for your network-based projects.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 开发或配置个人云平台的主要原因是可以通过互联网访问您的物联网硬件。由于您的家庭网络没有静态IP地址，您可能无法从远程位置访问您的原型或项目。云平台可以用作网络项目的事实上的计算单元。
- en: Getting familiar with the Amazon AWS platform
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 熟悉亚马逊AWS平台
- en: AWS is a collection of various cloud services offered by Amazon, which together
    make up a cloud computing platform. One of the original and most popular services
    offered by AWS is its **Elastic Computer Cloud** (**EC2**) service. The EC2 service
    lets a user create instances of a virtual machine with different combinations
    of computation power and operating systems from their large cloud infrastructure.
    It is also really easy to change the computational properties of these virtual
    instances at any time, making them highly scalable. When you are trying to create
    your own IoT platform using EC2, this scalability feature greatly helps you as
    you can expand or compress the size of your instances according to demand. If
    you are not familiar with the concept of cloud computing or AWS as a particular
    product, you can learn more about them from [http://aws.amazon.com](http://aws.amazon.com).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: AWS是亚马逊提供的一系列各种云服务，共同构成了一个云计算平台。AWS提供的一种原始且最受欢迎的服务是其**弹性计算云**（**EC2**）服务。EC2服务允许用户从其庞大的云基础设施中创建具有不同计算能力和操作系统组合的虚拟机实例。这些虚拟实例的计算属性也极其容易在任何时候更改，使其具有高度的扩展性。当您尝试使用EC2创建自己的物联网平台时，这种可扩展性功能将极大地帮助您，因为您可以根据需求扩展或压缩实例的大小。如果您不熟悉云计算的概念或AWS作为特定产品，您可以从[http://aws.amazon.com](http://aws.amazon.com)了解更多信息。
- en: The EC2 cloud platform is different from Xively as it provides general-purpose
    cloud instances, virtual machines, with computation power and storage that can
    be converted to any feature-specific platform by installing and configuring platform-specific
    software. It is important to note that you really do not have to be an expert
    in cloud computing to further advance in this chapter. The upcoming sections provide
    an intuitive guide to perform basic tasks, such as setting up an account, creating
    and configuring your virtual machines, and installing software tools to create
    IoT platforms.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: EC2云平台与Xively不同，因为它提供通用云实例、虚拟机，具有计算能力和存储，可以通过安装和配置特定平台的软件将其转换为任何特定功能的平台。需要注意的是，您真的不需要成为云计算专家才能进一步学习本章内容。接下来的部分提供了一个直观的指南，以执行基本任务，例如设置账户、创建和配置您的虚拟机，以及安装软件工具以创建物联网平台。
- en: Setting up an account on AWS
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 AWS 上设置账户
- en: 'Amazon provides one year of free access to the basic instance of the cloud-based
    virtual machine. This instance includes 750 hours of free usage time per month
    and this is greater than the number of hours in any month, thereby making it free
    for the entire month. The data storage capacity and bandwidth of the AWS account
    are sufficient for basic IoT or Arudino projects. To create a free account for
    a year on Amazon''s AWS cloud platform, perform the following steps:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊为基于云的虚拟机的基本实例提供一年的免费访问。此实例每月包括750小时的免费使用时间，这超过了任何一个月的小时数，因此整个月都是免费的。AWS账户的数据存储容量和带宽足以满足基本的物联网或Arduino项目。要在亚马逊的AWS云平台上创建一年的免费账户，请执行以下步骤：
- en: Open [http://aws.amazon.com](http://aws.amazon.com) and click on the button
    that asks you to try AWS for free or some other similar text.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开[http://aws.amazon.com](http://aws.amazon.com)并点击要求您免费试用AWS或类似文本的按钮。
- en: This action will lead you to a **Sign In or Create an AWS Account** page as
    displayed in the following screenshot. Enter the e-mail address that you want
    to use for this account when you select the **I am a new user.** option and click
    on the **Sign in using our secure server** button. If you already have an AWS
    account and you know how to create an account on Amazon AWS, you can use those
    credentials and skip to the next section:![Setting up an account on AWS](img/5938OS_09_26.jpg)
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此操作将带您到一个**登录或创建AWS账户**页面，如下所示截图。当您选择**我是新用户**选项时，输入您想要用于此账户的电子邮件地址，然后点击**使用我们的安全服务器登录**按钮。如果您已经有AWS账户并且知道如何在亚马逊AWS上创建账户，您可以使用那些凭据并跳到下一部分：![在AWS上设置账户](img/5938OS_09_26.jpg)
- en: Note
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Amazon only allows one free instance for each account. If you are an existing
    AWS user and your free instance is already occupied with another application,
    you can use the same instance to accommodate the MQTT broker or buy another instance.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 亚马逊只为每个账户允许一个免费实例。如果您是现有的AWS用户并且您的免费实例已经被另一个应用程序占用，您可以使用相同的实例来容纳MQTT代理或购买另一个实例。
- en: On the next page, you will be prompted to enter your name, e-mail address, and
    a password, as displayed in the following screenshot. Fill in the information
    to continue with the sign up process:![Setting up an account on AWS](img/5938OS_09_27.jpg)
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页，您将被提示输入您的姓名、电子邮件地址和密码，如下所示截图。填写信息以继续注册过程：![在AWS上设置账户](img/5938OS_09_27.jpg)
- en: You will be asked to enter your credit card information during the sign up process.
    However, you won't be charged for using the services included in the free account.
    Your credit card will be only used if you exceed any limitations or buy any additional
    services.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在注册过程中，您将被要求输入您的信用卡信息。但是，您不会因为使用免费账户中包含的服务而被收费。只有在您超出任何限制或购买任何附加服务时，您的信用卡才会被使用。
- en: The next stage includes the verification of your account using your phone number.
    Follow the instructions that are displayed in the following screenshot to complete
    the identity verification process:![Setting up an account on AWS](img/5938OS_09_28.jpg)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个阶段包括使用您的手机号码验证您的账户。按照以下截图显示的说明完成身份验证过程：![在AWS上设置账户](img/5938OS_09_28.jpg)
- en: Once you have verified your identity, you will be redirected to the page that
    lists the available Amazon AWS plans. Select the appropriate plan that you want
    to subscribe to and continue. If you are not sure, you can select the **Basic
    (Free)** plan option, which we recommend for our purpose. The **Amazon Management
    Console** page will let you select other plans if you want to upgrade the current
    one.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您验证了您的身份，您将被重定向到列出可用亚马逊AWS计划的页面。选择您想要订阅的适当计划并继续。如果您不确定，可以选择**基础（免费）**计划选项，我们推荐您为此目的使用该选项。如果您想升级当前计划，**亚马逊管理控制台**页面将允许您选择其他计划。
- en: Launch the Amazon management console.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动亚马逊管理控制台。
- en: As you have an Amazon AWS account now, let's create your virtual instance on
    it.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您现在有了亚马逊AWS账户，让我们在它上面创建您的虚拟实例。
- en: Creating a virtual instance on the AWS EC2 service
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在AWS EC2服务上创建虚拟实例
- en: 'In order to create a virtual instance on Amazon''s EC2 platform, first log
    in to AWS using your credentials and open the management console. Next, click
    on the **EC2** tab and execute the following instructions step by step:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在亚马逊的EC2平台上创建虚拟实例，首先使用您的凭证登录AWS并打开管理控制台。接下来，点击**EC2**标签并按以下步骤逐步执行：
- en: On the **EC2 Console** page, go to **Create Instance** and click on the **Launch
    Instance** button. This will open a wizard to create an instance that will guide
    you through the setup process:![Creating a virtual instance on the AWS EC2 service](img/5938OS_09_29.jpg)
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**EC2控制台**页面，转到**创建实例**并点击**启动实例**按钮。这将打开一个向导，引导您完成设置过程：![在AWS EC2服务上创建虚拟实例](img/5938OS_09_29.jpg)
- en: On the first page of the wizard, you will be prompted to select an operating
    system for your virtual instance. Select **Ubuntu Server 14.04 LTS** as displayed
    in the next screenshot, which is eligible for the free tier. To avoid any charges
    for using an advanced instance, make sure that the option you select is eligible
    for the free tier:![Creating a virtual instance on the AWS EC2 service](img/5938OS_09_30.jpg)
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向导的第一页，您将被提示为您的虚拟实例选择一个操作系统。选择如图所示的**Ubuntu Server 14.04 LTS**，它符合免费层级的资格。为了避免使用高级实例产生任何费用，请确保您选择的选项符合免费层级的资格：![在AWS
    EC2服务上创建虚拟实例](img/5938OS_09_30.jpg)
- en: In next window, you will be prompted with a list of options that have different
    configurations of computational capacity. From the **General purpose** family,
    select the **t2.micro** type, which is eligible for the free tier. The computational
    capabilities provided by the **t2.micro** tier are sufficient for the exercises
    that we are going to perform in the book and for most of the DIY projects. Make
    sure that you do not select any other tier unless you are confident of your selection.![Creating
    a virtual instance on the AWS EC2 service](img/5938OS_09_31.jpg)
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个窗口中，您将看到一个包含不同计算能力配置选项的列表。从**通用型**系列中选择**t2.micro**类型，它符合免费层级的资格。**t2.micro**层提供的计算能力足以完成我们在书中将要进行的练习，以及大多数DIY项目。请确保除非您对自己的选择有信心，否则不要选择其他层级。![在AWS
    EC2服务上创建虚拟实例](img/5938OS_09_31.jpg)
- en: Once you have selected the specified tier, click on the **Review and Launch**
    button to review the final configuration of the instance.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您选择了指定的层级，请点击**审查和启动**按钮来审查实例的最终配置。
- en: Review the configuration and make sure that you have selected the appropriate
    options, as mentioned earlier. You can now click on the **Launch** button to proceed
    further.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查配置并确保您已选择了前面提到的适当选项。现在，您可以点击**启动**按钮继续下一步。
- en: This will open a pop-up window that will prompt you to create a new key pair
    that will be used for authentication in the upcoming steps:![Creating a virtual
    instance on the AWS EC2 service](img/5938OS_09_32.jpg)
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个弹出窗口，提示您创建一个新的密钥对，该密钥对将在接下来的步骤中进行身份验证：![在AWS EC2服务上创建虚拟实例](img/5938OS_09_32.jpg)
- en: As shown in the previous screenshot, select **Create a new key pair** from the
    first drop-down menu while providing a name for the key pair. Click on the **Download
    Key Pair** button to download the key. The downloaded key will have the name that
    you provided in the previous option with the `.pem` extension. If you already
    have an existing key, you can select the appropriate options from the first drop-down
    menu. You will need this key every time you want to log in to this instance. Save
    this key in a safe place.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前一个截图所示，在第一个下拉菜单中选择**创建新的密钥对**，并为密钥对提供一个名称。点击**下载密钥对**按钮下载密钥。下载的密钥将具有您在之前选项中提供的名称，并带有`.pem`扩展名。如果您已经有了现有的密钥，您可以从第一个下拉菜单中选择适当的选项。每次您想要登录到此实例时都需要这个密钥。请将此密钥保存在安全的地方。
- en: Once again, click on the **Launch Instances** button to finally start the instance.
    Your virtual instance is launched on AWS now and it is running in the EC2.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击**启动实例**按钮，最终启动实例。您的虚拟实例现在已在AWS上启动，并在EC2中运行。
- en: Now, click on the **View Instance** button that will take you back to the EC2
    console window. You will be able to see your recently created `t2.micro` instance
    in the list.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**查看实例**按钮，这将带您回到EC2控制台窗口。您将能够在列表中看到您最近创建的`t2.micro`实例。
- en: To find out more details about your virtual instance, select it from the list.
    As soon as you select your instance, you will be able to see additional information
    in the bottom tab. This information includes the public DNS, private DNS, public
    IP address, and so on.![Creating a virtual instance on the AWS EC2 service](img/5938OS_09_33.jpg)
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要了解更多关于您的虚拟实例的详细信息，从列表中选择它。一旦您选择了您的实例，您将在底部标签中看到更多信息。这些信息包括公共DNS、私有DNS、公共IP地址等。![在AWS
    EC2服务上创建虚拟实例](img/5938OS_09_33.jpg)
- en: Save this information, as you will need it to log in to your instance.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存此信息，因为您将需要它来登录您的实例。
- en: Now, you have successfully created and turned on a virtual cloud instance using
    Amazon AWS. However, this instance is running in the Amazon EC2 and you will have
    to remotely authenticate into this instance to access its resources.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已成功创建并开启了使用亚马逊AWS的虚拟云实例。然而，此实例正在亚马逊EC2上运行，您将需要远程认证进入此实例以访问其资源。
- en: Logging into your virtual instance
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 登录您的虚拟实例
- en: In reality, your virtual instance is a virtual computer on a cloud with computation
    resources that are similar to your regular computer. You now need to log in to
    the running virtual instance to access files, run scripts, and install additional
    packages. To establish a secure authentication and access procedure, you need
    to use the **Secure Shell** (**SSH**) protocol and there are multiple ways to
    use SSH from your computer. If you are using Mac OS X or Ubuntu, an SSH client
    program already exists within your operating system. For Windows, you can download
    the PuTTY SSH client from [http://www.putty.org/](http://www.putty.org/).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您的虚拟实例是在云上的虚拟计算机，具有与您的普通计算机类似的计算资源。您现在需要登录到正在运行的虚拟实例以访问文件、运行脚本和安装额外的包。为了建立安全的认证和访问程序，您需要使用**安全外壳**（**SSH**）协议，并且有多个方法可以从您的计算机使用SSH。如果您使用Mac
    OS X或Ubuntu，SSH客户端程序已包含在您的操作系统中。对于Windows，您可以从[http://www.putty.org/](http://www.putty.org/)下载PuTTY
    SSH客户端。
- en: 'From the EC2 management window, retrieve the public IP address of your instance.
    To use the default SSH client in the Linux or Mac environment, open the terminal
    and navigate to the folder where you have saved your key file with the `.pem`
    extension. In the terminal window, execute the following command to make your
    key accessible:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 从EC2管理窗口中检索您实例的公共IP地址。要在Linux或Mac环境中使用默认的SSH客户端，请打开终端并导航到您保存具有`.pem`扩展名的密钥文件的文件夹。在终端窗口中，执行以下命令以使您的密钥可访问：
- en: '[PRE21]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once you have changed permission for your key file, run the following command
    to log in to the virtual instance. In the command, you will have to replace `<key-name>`
    with the file name of your key and `<public-IP>` with the public IP that you retrieved
    from the management console:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您更改了密钥文件的权限，运行以下命令以登录虚拟实例。在命令中，您必须将`<key-name>`替换为您的密钥文件名，将`<public-IP>`替换为从管理控制台检索的公共IP：
- en: '[PRE22]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Once you execute this command, you will be asked to continue with the connection
    process if you are authenticating the instance for the very first time. At the
    prompt, write `yes` and press *Enter* to continue. On successful authentication,
    you will be able to see the command prompt of your virtual instance in the same
    terminal window.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令后，如果您是首次认证实例，您将被要求继续连接过程。在提示符下，键入`yes`并按*Enter*键继续。认证成功后，您将在同一终端窗口中看到您的虚拟实例的命令提示符。
- en: 'In case you are using the Windows operating system and are not sure about the
    status of your SSH client, select your instance in the EC2 window and click on
    the **Connect** button in the top navigation bar, which is displayed in the following
    screenshot:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Windows操作系统并且不确定SSH客户端的状态，请在EC2窗口中选择您的实例，然后点击顶部导航栏中的**连接**按钮，如下截图所示：
- en: '![Logging into your virtual instance](img/5938OS_09_34.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![登录您的虚拟实例](img/5938OS_09_34.jpg)'
- en: This action will open a pop-up window with a short tutorial that explains the
    connection process. This tutorial is also linked to the step-by-step authentication
    guide for PuTTY.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作将打开一个弹出窗口，其中包含一个简短的教程，解释连接过程。此教程还链接到PuTTY的逐步认证指南。
- en: Creating an IoT platform on the EC2 instance
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在EC2实例上创建物联网平台
- en: As you have successfully set up an Amazon EC2 instance, you have a virtual computer
    that is running in the cloud and has a static IP address to enable remote access.
    However, this instance cannot be categorized as an IoT platform, as it only contains
    a plain operating system (Ubuntu Linux in our case) and lacks the necessary software
    packages and configurations.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您已成功设置亚马逊EC2实例，您拥有一个在云中运行的虚拟计算机，并具有静态IP地址以实现远程访问。然而，此实例不能被归类为物联网平台，因为它只包含一个纯操作系统（在我们的案例中是Ubuntu
    Linux）并且缺少必要的软件包和配置。
- en: 'There are two distinct ways of setting up a custom IoT cloud platform on your
    virtual instance:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的虚拟实例上设置自定义物联网云平台有两种不同的方法：
- en: Setting up an open source IoT platform such as ThingSpeak
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开源物联网平台，如ThingSpeak
- en: Separately installing and configuring the required software tools
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单独安装和配置所需的软件工具
- en: 'Keep the following points in mind when setting up an open source IoT platform:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置开源物联网平台时，请注意以下要点：
- en: ThingSpeak is one of the open source IoT platforms that provides supporting
    files to create and host your own replica of the ThingSpeak platform.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ThingSpeak是开源物联网平台之一，它提供支持文件以创建和托管您自己的ThingSpeak平台副本。
- en: Setting up this platform on your AWS instance is quite simple and you can obtain
    the necessary files and guidelines to install it via [https://github.com/iobridge/ThingSpeak](https://github.com/iobridge/ThingSpeak).
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的AWS实例上设置此平台相当简单，您可以通过[https://github.com/iobridge/ThingSpeak](https://github.com/iobridge/ThingSpeak)获取安装所需的文件和指南。
- en: Although this personalized version of the ThingSpeak platform will provide sufficient
    tools to start developing IoT applications, the functionalities of the platform
    will be confined to the supplied feature set. To have complete control over customization,
    you may have to use the next option.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管这个个性化的ThingSpeak平台将提供足够的工具来开始开发物联网应用程序，但平台的功能将限于提供的功能集。为了完全控制定制，您可能需要使用下一个选项。
- en: 'If you want to separately install and configure the necessary software tools,
    here''s what you need to remember:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想单独安装和配置必要的软件工具，以下是需要记住的：
- en: This option includes furnishing project-specific software tools such as Python
    and the Mosquitto broker with the required Python libraries such as `web.py` and
    `paho_mqtt`.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此选项包括提供特定项目所需的软件工具，如Python和Mosquitto代理，以及所需的Python库，如`web.py`和`paho_mqtt`。
- en: We have already worked with exercises that implemented applications which were
    based on the Mosquitto broker and `web.py`. This version of the custom IoT cloud
    platform can reduce the complexity of installing additional open source platform
    tools and still provide the necessary support to host applications.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经与基于Mosquitto代理和`web.py`的应用程序实现相关的练习工作。这个定制的物联网云平台版本可以减少安装额外开源平台工具的复杂性，同时仍提供必要的支持以托管应用程序。
- en: The Arduino program can directly communicate with this custom platform using
    REST or MQTT protocols. It can also behave as the remote computation unit to communicate
    with Xively or other third-party IoT cloud platforms.
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino程序可以直接使用REST或MQTT协议与这个自定义平台进行通信。它还可以作为远程计算单元与Xively或其他第三方物联网云平台进行通信。
- en: In the next section, we will begin the platform deployment process by installing
    the Mosquitto broker and the necessary packages on your virtual instance. This
    will be followed by the configuration of the virtual instance to support the MQTT
    protocol. Once your IoT cloud platform is up and running, you can just run the
    Python-based Mosquitto code from the last chapter from the instance with minor
    or no modifications. In future, this IoT platform that contains the Mosquitto
    broker and the Python project can be extended to accommodate additional features,
    protocols, and extra security.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过在您的虚拟实例上安装Mosquitto代理和必要的软件包来开始平台部署过程。这将随后是配置虚拟实例以支持MQTT协议。一旦您的物联网云平台启动并运行，您只需从实例中运行上一章的基于Python的Mosquitto代码，进行少量或无修改即可。在未来，包含Mosquitto代理和Python项目的这个物联网平台可以扩展以适应额外的功能、协议和额外的安全性。
- en: Installing the necessary packages on AWS
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在AWS上安装必要的软件包
- en: 'Using the SSH protocol and the key pair, log into your virtual instance. Once
    you are at the Command Prompt, the first task that you need to perform is to update
    all the outdated packages in Ubuntu, the operating system of your virtual instance.
    Successively execute the following commands:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SSH协议和密钥对登录您的虚拟实例。一旦您处于命令提示符，您需要执行的第一项任务是更新Ubuntu中所有过时的软件包，这是您的虚拟实例的操作系统。依次执行以下命令：
- en: '[PRE23]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Ubuntu already comes with the latest version of Python. However, you will still
    need to install Setuptools to install the additional Python packages:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu已经预装了最新的Python版本。但是，您仍然需要安装Setuptools来安装额外的Python软件包：
- en: '[PRE24]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Ubuntu''s package repository also hosts Mosquitto and it can be directly installed
    using the following command. With this command, we will install the Mosquitto
    broker, Mosquitto client, and all other dependencies together. During the installation,
    you will be asked to confirm the installation of additional packages. Enter `Yes`
    at the terminal and proceed with the installation:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu的软件仓库也托管了Mosquitto，可以直接使用以下命令安装。使用此命令，我们将一起安装Mosquitto代理、Mosquitto客户端以及所有其他依赖项。在安装过程中，你将被要求确认安装额外的包。在终端输入`Yes`并继续安装：
- en: '[PRE25]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now you have installed the Mosquitto broker on your virtual instance and you
    can run it by executing the Mosquitto command. To develop Python-based Mosquitto
    applications, we need the Python Mosquitto library on our instance. Let''s install
    the library using Setuptools, through the following commands:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经在你的虚拟实例上安装了Mosquitto代理，你可以通过执行Mosquitto命令来运行它。为了开发基于Python的Mosquitto应用，我们需要在我们的实例上安装Python
    Mosquitto库。让我们使用以下命令通过Setuptools安装库：
- en: '[PRE26]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the previous chapter, we developed a web application based on `web.py` that
    utilizes the `paho_mqtt` library to support the MQTT protocol. As with the first
    project, we are going to deploy the same web application on the EC2-based virtual
    instance to demonstrate your custom IoT cloud platform. As a dependency of this
    project, you first need the `web.py` Python library, which you can install using
    the following command:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们开发了一个基于`web.py`的Web应用，该应用利用`paho_mqtt`库来支持MQTT协议。与第一个项目一样，我们将在基于EC2的虚拟实例上部署相同的Web应用，以展示你的自定义物联网云平台。作为此项目的依赖项，你首先需要`web.py`
    Python库，你可以使用以下命令安装：
- en: '[PRE27]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now you have all the necessary software packages to run the IoT application.
    To make your web application accessible via the Internet, you need to configure
    the security of you virtual instance.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经拥有了运行物联网应用所需的所有软件包。为了使你的Web应用可以通过互联网访问，你需要配置你的虚拟实例的安全设置。
- en: Configuring the security of the virtual instance
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置虚拟实例的安全设置
- en: First, we will configure the virtual instance to securely host the Mosquitto
    broker. Later, we will go through the methods to set up basic security to prevent
    the abuse of your Mosquitto server by automated bots or spamming attempts.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将配置虚拟实例以安全地托管Mosquitto代理。稍后，我们将介绍设置基本安全性的方法，以防止自动化机器人或垃圾邮件尝试滥用你的Mosquitto服务器。
- en: 'To change any parameters on your virtual instance, you will have to use the
    **Security Groups** tools from the **Network & Security** section of your **AWS
    Management Console** page. Open the **Security Groups** section, as displayed
    in the following screenshot:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改你虚拟实例上的任何参数，你将不得不使用**AWS管理控制台**页面**网络与安全**部分的**安全组**工具。打开**安全组**部分，如下截图所示：
- en: '![Configuring the security of the virtual instance](img/5938OS_09_35.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![配置虚拟实例的安全设置](img/5938OS_09_35.jpg)'
- en: 'Each virtual instance has a default security group that is generated automatically
    to allow access to your instance through the SSH port 22\. This security configuration
    is responsible for letting you access your virtual instance through the SSH client
    from your computer. The Mosquitto broker uses the TCP port number `1883` to establish
    communication with publishers and subscriber clients. To allow incoming access
    from this Mosquitto port, you will have to edit the current inbound rules and
    add an entry for port `1883`:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 每个虚拟实例都有一个默认的安全组，它是自动生成的，允许通过SSH端口22访问你的实例。这种安全配置负责让你能够通过计算机上的SSH客户端访问你的虚拟实例。Mosquitto代理使用TCP端口号`1883`与发布者和订阅者客户端建立通信。要允许从该Mosquitto端口进入访问，你必须编辑当前的入站规则并添加一个端口`1883`的条目：
- en: '![Configuring the security of the virtual instance](img/5938OS_09_36.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![配置虚拟实例的安全设置](img/5938OS_09_36.jpg)'
- en: 'Once you click on the **Edit** button, the website will open a pop-up window
    to add new rules and edit the existing rules. Click on the **Add Rule** button
    to create an additional rule to accommodate the Mosquitto broker:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你点击了**编辑**按钮，网站将打开一个弹出窗口以添加新规则和编辑现有规则。点击**添加规则**按钮以创建一个额外的规则来适应Mosquitto代理：
- en: '![Configuring the security of the virtual instance](img/5938OS_09_37.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![配置虚拟实例的安全设置](img/5938OS_09_37.jpg)'
- en: 'As displayed in the following screenshot, enter the TCP port''s number as `1883`
    and complete the other information in the form. Once you have completed the form
    with the given values, save the rules and exit the window:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下截图所示，将TCP端口号输入为`1883`并完成表单中的其他信息。完成表单后，保存规则并退出窗口：
- en: '![Configuring the security of the virtual instance](img/5938OS_09_38.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![配置虚拟实例的安全](img/5938OS_09_38.jpg)'
- en: Now, with this configuration, port `1883` is accessible by other devices and
    enables remote communication with the Mosquitto broker. You can use the same method
    to add a rule for port `8080` to allow access to Python's web applications that
    were developed using `web.py`. In future, you can add any additional ports to
    allow access to various services. Although it is very easy to change the security
    rules on your virtual instance, make sure that you refrain from opening excessive
    ports to avoid any security risk.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有了这个配置，端口`1883`对其他设备是可访问的，并允许与Mosquitto代理进行远程通信。您可以使用相同的方法为端口`8080`添加规则，以允许访问使用`web.py`开发的Python网络应用程序。在未来，您可以添加任何其他端口以允许访问各种服务。尽管在您的虚拟实例上更改安全规则非常容易，但请确保您避免打开过多的端口，以避免任何安全风险。
- en: Testing your cloud platform
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试您的云平台
- en: In this testing section, we will first perform checks for the Mosquitto broker
    from your computer and then set up authentication parameters for the Mosquitto
    broker. Later, we will upload files and folders containing the Python code to
    our virtual instance using the SSH file transfer protocol.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在本测试部分，我们将首先从您的计算机对Mosquitto代理进行测试，然后设置Mosquitto代理的认证参数。稍后，我们将使用SSH文件传输协议将包含Python代码的文件和文件夹上传到我们的虚拟实例。
- en: Testing the Mosquitto service
  id: totrans-256
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试Mosquitto服务
- en: 'The first thing that we are going to check on our IoT platform is the accessibility
    of the Mosquitto broker. Open the terminal on your computer and execute the following
    command, after replacing `<Public-IP>` with the public IP or public DNS address
    of your virtual instance:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的物联网平台上检查的第一件事是Mosquitto代理的可访问性。在您的计算机上打开终端，并执行以下命令，在替换`<Public-IP>`时，请使用您的虚拟实例的公共IP地址或公共DNS地址：
- en: '[PRE28]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This command will publish the message value `3` for the `test` topic for the
    Mosquitto broker that is specified at the given IP address; in our case, this
    is the virtual instance. Now, open a separate terminal window and execute the
    following command to subscribe to the `test` topic on our broker:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将向指定IP地址的Mosquitto代理的`test`主题发布消息值`3`；在我们的情况下，这是虚拟实例。现在，打开一个单独的终端窗口并执行以下命令来订阅我们的代理上的`test`主题：
- en: '[PRE29]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: On the execution of this command, you will be able to see the latest value that
    is published for this topic. Use the `mosquitto_pub` command to post multiple
    messages and you can see the output of these messages in the other terminal window
    that is running the `mosquitto_sub` command.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令后，您将能够看到为此主题发布的最新值。使用`mosquitto_pub`命令发布多条消息，您可以在运行`mosquitto_sub`命令的另一个终端窗口中看到这些消息的输出。
- en: Configuring and testing basic security
  id: totrans-262
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置和测试基本安全
- en: 'As you saw in the previous example, the publishing and subscribing commands
    just used the IP address to send and receive data without using any authentication
    parameters. This is a major security loophole, as anyone on the Internet can send
    data to your Mosquitto broker. To avoid unauthorized access to your broker, you
    have to establish authentication credentials. You can specify these parameters
    by following these steps in the given order:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在上一示例中所见，发布和订阅命令仅使用了IP地址来发送和接收数据，而没有使用任何认证参数。这是一个重大的安全漏洞，因为任何互联网用户都可以向您的Mosquitto代理发送数据。为了避免未经授权访问您的代理，您必须建立认证凭证。您可以通过按照以下步骤的顺序指定这些参数：
- en: 'If you have not already logged into your instance through SSH, open a terminal
    window and log in using SSH. Once you are logged in, navigate to the Mosquitto
    directory and create a new file called `passwd` using the following set of commands.
    We will use this file to store the usernames and passwords:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您尚未通过SSH登录到您的实例，请打开一个终端窗口并使用SSH登录。登录后，导航到Mosquitto目录，并使用以下命令集创建一个名为`passwd`的新文件。我们将使用此文件来存储用户名和密码：
- en: '[PRE30]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the file, enter the username and password information separated by using
    the colon operator (`:`). For testing purposes, we will use the following credentials,
    which can be changed any time once you are more familiar with the Mosquitto configuration:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中，使用冒号操作符（`:`）分隔用户名和密码信息。为了测试目的，我们将使用以下凭证，这些凭证可以在您对Mosquitto配置更加熟悉后随时更改：
- en: '[PRE31]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Press *Ctrl* + *X* to save and exit the file from the nano editor. When you
    are prompted to confirm the save operation, select **Y** and press *Enter*.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *X*从nano编辑器保存并退出文件。当您被提示确认保存操作时，选择**Y**并按*Enter*。
- en: 'In the same folder, open the Mosquitto configuration file using thenano editor:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的文件夹中，使用thenano编辑器打开Mosquitto配置文件：
- en: '[PRE32]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the opened file, scroll down the text content until you reach the security
    section. In this section, find the `#allow_anonymous true` line of the code and
    replace it with `allow_anonymous false`. Make sure that you have removed the `#`
    symbol. With this operation, we have disabled the anonymous access to the Mosquitto
    broker and only those clients with proper credentials can access it.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开的文件中，向下滚动文本内容，直到到达安全部分。在此部分中，找到代码中的`#allow_anonymous true`行，并将其替换为`allow_anonymous
    false`。确保您已经删除了`#`符号。通过此操作，我们已经禁用了对Mosquitto代理的匿名访问，只有具有适当凭证的客户端才能访问它。
- en: 'After performing the previous changes, scroll further down in the file, uncomment
    the line `#password_file`, and replace it with this:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行了前面的更改之后，在文件中向下滚动，取消注释`#password_file`这一行，并将其替换为以下内容：
- en: '[PRE33]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now that you have configured the basic security parameters for your broker,
    you must restart the Mosquitto service for the changes to take effect. In Ubuntu,
    Mosquitto is installed as part of the background service and you can restart it
    using the following command:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您已经为您的代理配置了基本的安全参数，您必须重新启动Mosquitto服务以使更改生效。在Ubuntu中，Mosquitto作为后台服务的一部分安装，您可以使用以下命令重新启动它：
- en: '[PRE34]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To test these authentication configurations, open another terminal window in
    your computer and execute the following command with the public IP address of
    your instance. If you are able to successfully publish your message without any
    errors, your Mosquitto broker now has a security configuration:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试这些认证配置，在您的计算机上打开另一个终端窗口，并使用以下命令执行实例的公网IP地址。如果您能够成功发布消息且没有任何错误，那么您的Mosquitto代理现在已经具有了安全配置：
- en: '[PRE35]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Also, check your Mosquitto subscriber using the following command:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，使用以下命令检查您的Mosquitto订阅者：
- en: '[PRE36]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Uploading and testing a project on the instance
  id: totrans-280
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在实例上上传和测试项目
- en: As we discussed in the previous chapters, you can always use your computer for
    development purposes. Once you are ready for deployment, you can utilize this
    newly configured virtual instance as the deployment unit. You can copy your files
    from your local computer to the virtual instance using a utility called PuTTY
    ([https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html))
    or using the SCP (SSH copy) command.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的章节中讨论的那样，您始终可以使用您的计算机进行开发。一旦您准备部署，您可以使用这个新配置的虚拟实例作为部署单元。您可以使用名为PuTTY的实用程序（[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html)）或使用SCP（SSH复制）命令将您的文件从本地计算机复制到虚拟实例。
- en: 'Now it is time to upload the project files from the final coding exercise of
    the previous chapter, which implemented the MQTT protocol using Python and the
    Mosquitto library. As a reminder, the final exercise is located in the folder
    named `Exercise 4 - MQTT gateway` of the previous chapter''s code repository.
    We will be using the SCP utility to upload these files to your virtual instance.
    Before we use this utility, let''s first create a directory on your virtual instance.
    Log in to your virtual instance and go to the user directory of the virtual instance
    by using the following command:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候上传上一章最终编码练习的项目文件了，该练习使用了Python和Mosquitto库实现了MQTT协议。作为提醒，最终练习位于上一章代码仓库中名为`Exercise
    4 - MQTT gateway`的文件夹中。我们将使用SCP实用程序将这些文件上传到您的虚拟实例。在我们使用此实用程序之前，让我们首先在您的虚拟实例上创建一个目录。登录到您的虚拟实例，并使用以下命令进入虚拟实例的用户目录：
- en: '[PRE37]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Using the character tilde (`~`) with the `cd` command will change the current
    directory to the home directory, unless you are planning to use any other location
    on your virtual instance. At this location, create a new empty directory named
    `project` by using following command:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符波浪号（`~`）与`cd`命令一起使用，将当前目录更改为主目录，除非您打算在虚拟实例上的其他位置使用。在此位置，使用以下命令创建一个名为`project`的新空目录：
- en: '[PRE38]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, on the computer you are working on (Mac OS X or Linux), open another terminal
    window and use the following command to copy the entire directory to the remote
    instance:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在您正在工作的计算机上（Mac OS X或Linux），打开另一个终端窗口，并使用以下命令将整个目录复制到远程实例：
- en: '[PRE39]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Once you have successfully copied the files to this location, you can go back
    to the terminal that is logged in to your virtual instance and change the directory
    to `project`:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您已成功将文件复制到该位置，您就可以回到登录到您的虚拟实例的终端，并将目录更改为`project`：
- en: '[PRE40]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Before running any commands, make sure that you have changed the appropriate
    IP addresses in the Arduino sketch and the Python programs. You will have to replace
    the previous IP address with the one of your virtual instance. Now that you have
    made these changes, you can execute the Python code containing the Mosquitto Gateway
    and web application to start the program. Open your web browser from the `http://<Public-Ip>:8080`
    location to see you web application running on the custom IoT platform. From now
    on, you should be able to access this application from any remote location through
    the Internet.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行任何命令之前，请确保您已更改Arduino草图和Python程序中的适当IP地址。您需要将之前的IP地址替换为您的虚拟实例的IP地址。现在，您已经做了这些更改，您可以执行包含Mosquitto网关和Web应用的Python代码来启动程序。从`http://<Public-Ip>:8080`位置打开您的Web浏览器，以查看在自定义物联网平台上运行的Web应用。从现在起，您应该能够通过互联网从任何远程位置访问此应用。
- en: Tip
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Do not forget to change the IP address of the Mosquitto broker in the Arduino
    sketch and upload the sketch to the Arduino board again. You may not be able to
    obtain the sensor data if the appropriate IP address changes are not applied.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在Arduino草图中将Mosquitto代理的IP地址更改，并再次将草图上传到Arduino板。如果没有应用适当的IP地址更改，您可能无法获取传感器数据。
- en: Summary
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: At the end of this chapter, and hence the end of the contextual part of the
    book, you should be able to develop your own Internet of Things projects. In this
    chapter, we used a commercial IoT cloud platform to handle your sensor data. We
    also deployed a cloud instance to host open source IoT tools and created our own
    version of the customized IoT cloud platform. Certainly, the content that you
    learned is not sufficient to develop scalable and fully-stacked commercial products,
    but it is really helpful to get you started with them. In a large number of cases,
    this material is sufficient to develop DIY projects and product prototypes that
    will ultimately lead you to the final product. In the next two chapters, we will
    put the material that we learned to the test and develop two complete IoT hardware
    projects. We are also going to learn a project development methodology that is
    specific to hardware-based IoT products, which can be applied to convert your
    prototypes into real products.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章末尾，也就是本书上下文部分的结尾，您应该能够开发自己的物联网项目。在本章中，我们使用了一个商业物联网云平台来处理您的传感器数据。我们还部署了一个云实例来托管开源物联网工具，并创建了自定义物联网云平台的版本。当然，您所学的知识不足以开发可扩展的完整商业产品，但它确实有助于您开始这些产品。在大量情况下，这些材料足以开发DIY项目和产品原型，最终将引导您到达最终产品。在接下来的两章中，我们将把所学知识付诸实践，并开发两个完整的物联网硬件项目。我们还将学习一种专门针对基于硬件的物联网产品的项目开发方法，该方法可以应用于将您的原型转换为真实产品。
