- en: Chapter 15. Packaging – Creating Your Own Libraries or Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章。包装-创建您自己的库或应用程序
- en: The chapters thus far have covered how to write, test and, debug the Python
    code. With all of that, there is only one thing that remains, that is packaging
    and distributing your Python libraries /and applications. To create installable
    packages we will use the `setuptools` package which is bundled with Python these
    days. If you have created packages before, you might remember `distribute` and
    `distutils2`, but it is very important to remember that these have all been replaced
    by `setuptools` and `distutils` and you shouldn't use them anymore!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这些章节已经涵盖了如何编写、测试和调试Python代码。有了这一切，只剩下一件事，那就是打包和分发您的Python库/和应用程序。为了创建可安装的包，我们将使用Python这些天捆绑的`setuptools`包。如果您以前创建过包，您可能还记得`distribute`和`distutils2`，但非常重要的是要记住，这些都已经被`setuptools`和`distutils`取代，您不应该再使用它们！
- en: 'What types of program can we package with `setuptools`? We will show you several
    cases:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`setuptools`打包哪些类型的程序？我们将向您展示几种情况：
- en: Regular packages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常规包
- en: Packages with data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有数据的包
- en: Installing executables and custom `setuptools` commands
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装可执行文件和自定义`setuptools`命令
- en: Running tests on the package
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在包上运行测试
- en: Packages containing C/C++ extensions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含C/C++扩展的包
- en: Installing packages
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装包
- en: 'Before we actually get started, it is important to know how to install a package
    properly. There are at least four different options for installing a package.
    The first and most obvious is by using the plain `pip` command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们真正开始之前，重要的是要知道如何正确安装包。至少有四种不同的选项可以安装包。第一种最明显的方法是使用普通的`pip`命令：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This can also be achieved by using `setup.py` directly:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以通过直接使用`setup.py`来实现：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This installs the package within your Python environment which would be the
    likely `virtualenv`/`venv` if you are using it or the global environment otherwise.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的Python环境中安装包，如果您使用它，可能是`virtualenv`/`venv`，否则是全局环境。
- en: For development however, this is not recommended. To test your code, you would
    need to either reinstall the package for every test or modify the files within
    the Python's `site-packages` directory, which would mean it would be outside of
    your revision control system as well. That's where the development installs come
    in; instead of copying the package files to the Python package directory, they
    simply install a link within the `site-packages` directory to the path where the
    package is actually located. This allows you to modify the code and immediately
    see the results in the scripts and applications you run without the need to reinstall
    your code after each change.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于开发来说，这是不推荐的。要测试您的代码，您需要为每个测试重新安装包，或者修改Python的`site-packages`目录中的文件，这意味着它将位于您的修订控制系统之外。这就是开发安装的用途；它们不是将包文件复制到Python包目录中，而是在`site-packages`目录中安装到实际包位置的路径的链接。这使您可以修改代码，并立即在运行的脚本和应用程序中看到结果，而无需在每次更改后重新安装代码。
- en: 'As is the case with a regular install, both `pip` and `setup.py` versions are
    available:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与常规安装一样，`pip`和`setup.py`版本都可用：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And the `setup.py` version:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以及`setup.py`版本：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Setup parameters
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置参数
- en: The previous chapters have actually already shown us a couple of examples, but
    let's reiterate and review what the most important parts actually do. The core
    function you will be using in this entire chapter is `setuptools.setup`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的章节实际上已经向我们展示了一些示例，但让我们重申和回顾最重要的部分实际上是做什么。在整个本章中，您将使用的核心功能是`setuptools.setup`。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the most simple packages, the `distutils` package bundled with Python will
    be sufficient as well, but I recommend `setuptools` regardless. The `setuptools`
    package has many great features that `distutils` lacks and nearly all Python environments
    will have `setuptools` available anyhow.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最简单的包，Python捆绑的`distutils`包将足够，但无论如何我推荐`setuptools`。`setuptools`包具有许多`distutils`缺乏的出色功能，并且几乎所有Python环境都会有`setuptools`可用。
- en: 'Before we continue, make sure you have the latest version of both `pip` and
    `setuptools`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保您拥有最新版本的`pip`和`setuptools`：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `setuptools` and `distutils` packages have changed significantly over the
    last few years and the documentation/examples written before 2014 are most likely
    out of date. Be careful not to implement deprecated examples and skip any documentation/examples
    using `distutils`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`setuptools`和`distutils`包在过去几年中发生了重大变化，2014年之前编写的文档/示例很可能已经过时。小心不要实现已弃用的示例，并跳过使用`distutils`的任何文档/示例。'
- en: 'Now that we have all the prerequisites, let''s create an example containing
    the most important fields with inline documentation:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经具备了所有先决条件，让我们创建一个包含最重要字段的示例，并附带内联文档：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That was quite a lot of code and comments, but it covers most of the options
    you will ever encounter in real-life packages. The most interesting and versatile
    parameters discussed here will be covered in the following sections separately.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相当多的代码和注释，但它涵盖了您在现实生活中可能遇到的大多数选项。这里讨论的最有趣和多功能的参数将在接下来的各个部分中单独介绍。
- en: 'Additional documentation can be found in the `pip` and `setuptools` documentation,
    as well as in the Python Packaging User Guide:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 附加文档可以在`pip`和`setuptools`文档以及Python包装用户指南中找到：
- en: '[http://pythonhosted.org/setuptools/](http://pythonhosted.org/setuptools/)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://pythonhosted.org/setuptools/](http://pythonhosted.org/setuptools/)'
- en: '[https://pip.pypa.io/en/stable/](https://pip.pypa.io/en/stable/)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://pip.pypa.io/en/stable/](https://pip.pypa.io/en/stable/)'
- en: '[http://python-packaging-user-guide.readthedocs.org/en/latest/](http://python-packaging-user-guide.readthedocs.org/en/latest/)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://python-packaging-user-guide.readthedocs.org/en/latest/](http://python-packaging-user-guide.readthedocs.org/en/latest/)'
- en: Packages
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包
- en: 'In our example, we simply use `packages=setuptools.find_packages()`. In most
    cases this will work just fine, but it''s important to understand what it does.
    The `find_packages` function looks through all the directories within the given
    directory and adds it to the list if it has an `__init__.py` file inside. So instead
    of `find_packages()` you can generally use `[''your_package'']` instead. If you
    have several packages however, that tends to get tedious. That''s where `find_packages()`
    is useful; simply specify some inclusion parameters (second parameter) or some
    exclusion parameters (third parameter) and you''ll have all the relevant packages
    within your project. For example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们只是使用`packages=setuptools.find_packages()`。在大多数情况下，这将工作得很好，但重要的是要理解它的作用。`find_packages`函数会查找给定目录中的所有目录，并在其中有`__init__.py`文件的情况下将其添加到列表中。因此，你通常可以使用`['your_package']`代替`find_packages()`。然而，如果你有多个包，那么这往往会变得乏味。这就是`find_packages()`有用的地方；只需指定一些包含参数（第二个参数）或一些排除参数（第三个参数），你就可以在项目中拥有所有相关的包。例如：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Entry points
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入口点
- en: 'The `entry_points` parameter is arguably the most useful feature of `setuptools`.
    It allows you to add hooks to many things within `setuptools` but the most useful
    two are the possibility to add both the command line and GUI commands and to extend
    the `setuptools` commands. The command line and GUI commands will even be converted
    to executables on Windows. The example in the first section already demonstrated
    both the features:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`entry_points`参数可以说是`setuptools`最有用的功能。它允许你向`setuptools`中的许多东西添加钩子，但最有用的两个是添加命令行和GUI命令的可能性，以及扩展`setuptools`命令。命令行和GUI命令甚至会在Windows上转换为可执行文件。第一节中的例子已经演示了这两个功能：'
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This demonstration only shows how to call the functions but it doesn't show
    the actual functions.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个演示只是展示了如何调用函数，但没有展示实际的函数。
- en: Creating global commands
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建全局命令
- en: 'The first, a simple example, is nothing special at all; just a function that
    gets called as a regular `main` function where you need to specify `sys.argv`
    yourself (or better, use `argparse`). This is the `setup.py` file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个，一个简单的例子，没有什么特别的；只是一个作为常规`main`函数被调用的函数，在这里你需要自己指定`sys.argv`（或者更好的是使用`argparse`）。这是`setup.py`文件：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And, of course, here''s the `spam/main.py` file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这里有`spam/main.py`文件：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Be sure not to forget to create a `spam/__init__.py` file. It can be empty but
    it needs to exist for Python to know that it's a package.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一定不要忘记创建一个`spam/__init__.py`文件。它可以是空的，但它需要存在，以便Python知道它是一个包。
- en: 'Now, let''s give it a try by installing the package:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们试着安装这个包：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: See how easy it was to create a `spam` command that installs in your regular
    command line shell! On Windows it will actually give you an executable which will
    be added to your path but regardless of the platform it will be as a separate
    executable that's callable.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 看，创建一个在常规命令行shell中安装的`spam`命令是多么简单！在Windows上，它实际上会给你一个可执行文件，该文件将被添加到你的路径中，但无论在哪个平台上，它都将作为一个可调用的独立可执行文件。
- en: Custom setup.py commands
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义setup.py命令
- en: 'Writing custom `setup.py` commands can be very useful. One example is `sphinx-pypi-upload-2`
    which I use in all my packages and is my fork of the unmaintained `sphinx-pypi-upload`
    package. It''s a package that makes it trivial to build and upload Sphinx documentation
    to the Python package index, which is very useful when distributing your packages.
    With the `sphinx-pypi-upload-2` package you can do the following (which I do when
    distributing any of the packages I maintain):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 编写自定义的`setup.py`命令非常有用。一个例子是`sphinx-pypi-upload-2`，我在所有的包中都使用它，它是我维护的`unmaintained
    sphinx-pypi-upload`包的分支。这是一个使构建和上传Sphinx文档到Python包索引变得非常简单的包，当分发你的包时非常有用。使用`sphinx-pypi-upload-2`包，你可以做以下操作（我在分发我维护的任何包时都会这样做）：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This command builds your package and uploads it to PyPI, and builds the Sphinx
    documentation and uploads it to PyPI as well.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令会构建你的包并将其上传到PyPI，并构建Sphinx文档并将其上传到PyPI。
- en: 'But you want to see how this works, of course. First, here''s `setup.py` for
    our `spam` command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但你当然想看看这是如何工作的。首先，这是我们`spam`命令的`setup.py`：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Second, the `SpamCommand` class. The basic essentials are inheriting `setuptools.Command`
    and making sure to implement all the needed methods. Note that all of these need
    to be implemented but can be left empty if desired. Here is the `spam/command.py`
    file:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，`SpamCommand`类。基本要点是继承`setuptools.Command`并确保实现所有需要的方法。请注意，所有这些方法都需要实现，但如果需要，可以留空。这是`spam/command.py`文件：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Executing it is simple enough:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 执行它非常简单：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There are very few cases where you will actually need the custom `setup.py`
    commands, but the example is still useful since it is currently an undocumented
    part of `setuptools`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上只有很少的情况下你会需要自定义的`setup.py`命令，但这个例子仍然很有用，因为它目前是`setuptools`的一个未记录的部分。
- en: Package data
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包数据
- en: 'In most cases you probably won''t have to include the package data, but in
    the cases where you do need data to go with your package, there are a few different
    options. First, it is important to know which files are included in your package
    by default:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，你可能不需要包含包数据，但在需要数据与你的包一起的情况下，有一些不同的选项。首先，重要的是要知道默认情况下包含在你的包中的文件有哪些：
- en: Python source files in the package directories recursively
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包目录中的Python源文件递归
- en: The `setup.py` and `setup.cfg` files
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setup.py`和`setup.cfg`文件'
- en: 'Tests: `test/test*.py`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试：`test/test*.py`
- en: All `*.txt` and `*.py` files in the `examples` directory
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`examples`目录中的所有`*.txt`和`*.py`文件
- en: All `*.txt` files in the root directory
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在根目录中的所有`*.txt`文件
- en: 'So after the defaults, we have the first solution: the `package_data` argument
    to the setup function. The syntax for that is simple enough, a dictionary where
    the keys are the packages and the values are the patterns to include:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在默认值之后，我们有了第一个解决方案：`setup`函数的`package_data`参数。它的语法非常简单，一个字典，其中键是包，值是要包含的模式：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The second solution is using a `MANIFEST.in` file. This file contains patterns
    to include, exclude, and more. The `include` and `exclude` commands use patterns
    to match. These patterns are glob-style patterns (see the `glob` module for documentation:
    [https://docs.python.org/3/library/glob.html](https://docs.python.org/3/library/glob.html))
    and have three variants for both the include and exclude commands:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种解决方案是使用`MANIFEST.in`文件。该文件包含要包括、排除和其他的模式。`include`和`exclude`命令使用模式进行匹配。这些模式是通配符样式的模式（请参阅`glob`模块的文档：[https://docs.python.org/3/library/glob.html](https://docs.python.org/3/library/glob.html)），并且对于包括和排除命令都有三种变体：
- en: '`include`/`exclude`: These commands only work for the given path and nothing
    else'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include`/`exclude`: 这些命令仅适用于给定的路径，而不适用于其他任何内容'
- en: '`recursive-include`/`recursive-exclude`: These commands are similar to the
    `include`/`exclude` commands but process the given paths recursively'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recursive-include`/`recursive-exclude`: 这些命令类似于`include`/`exclude`命令，但是递归处理给定的路径'
- en: '`global-include`/`global-exclude`: Be very careful with these, they will include
    or exclude these files anywhere within the source tree'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`global-include`/`global-exclude`: 对于这些命令要非常小心，它们将在源树中的任何位置包含或排除这些文件'
- en: 'Besides the `include`/`exclude` commands, there are also two others; the `graft`
    and `prune` commands which include or exclude directories including all the files
    under a given directory. This can be useful for tests and documentation since
    they can include non-standard files. Beyond those examples, it''s almost always
    better to explicitly include the files you need and ignore all the others. Here''s
    an example `MANIFEST.in`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`include`/`exclude`命令之外，还有另外两个命令；`graft`和`prune`命令，它们包括或排除包括给定目录下的所有文件的目录。这对于测试和文档可能很有用，因为它们可以包括非标准文件。除了这些例子之外，几乎总是最好明确包括您需要的文件并忽略所有其他文件。这是一个`MANIFEST.in`的例子：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Testing packages
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试软件包
- en: In [Chapter 10](ch10.html "Chapter 10. Testing and Logging – Preparing for Bugs"),
    *Testing and Logging – Preparing for Bugs*, the testing chapter, we saw a few
    of the many testing systems for Python. As you might suspect, at least some of
    these have `setup.py` integration.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](ch10.html "第10章。测试和日志-为错误做准备")，“测试和日志-为错误做准备”，测试章节中，我们看到了Python的许多测试系统。正如您可能怀疑的那样，至少其中一些已经集成到了`setup.py`中。
- en: Unittest
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unittest
- en: 'Before we start, we should create a test script for our package. For actual
    tests, look at [Chapter 10](ch10.html "Chapter 10. Testing and Logging – Preparing
    for Bugs"), *Testing and Logging – Preparing for Bugs*, the testing chapter. In
    this case, we will just use a no-op test, `test.py`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们应该为我们的包创建一个测试脚本。对于实际的测试，请参阅[第10章](ch10.html "第10章。测试和日志-为错误做准备")，“测试和日志-为错误做准备”，测试章节。在这种情况下，我们将只使用一个无操作测试，`test.py`：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The standard `python setup.py test` command will run the regular `unittest`
    command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的`python setup.py test`命令将运行常规的`unittest`命令：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It is possible to tell `setup.py` to use different tests using the `--test-module`,
    `--test-suite`, or `--test-runner` arguments. While these are easy enough to use,
    I recommend skipping the regular `test` command and trying `nose` or `py.test`
    instead.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用`--test-module`、`--test-suite`或`--test-runner`参数告诉`setup.py`使用不同的测试。虽然这些很容易使用，但我建议跳过常规的`test`命令，而是尝试使用`nose`或`py.test`。
- en: py.test
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: py.test
- en: 'The `py.test` package has several methods of integration: `pytest-runner`,
    your own test command, and the deprecated method of generating a `runtests.py`
    script to test. If one of your packages is still using `runtests.py`, I strongly
    recommend switching to one of the other options.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`py.test`软件包有几种集成方法：`pytest-runner`，您自己的测试命令，以及生成`runtests.py`脚本进行测试的已弃用方法。如果您的软件包中仍在使用`runtests.py`，我强烈建议切换到其他选项之一。'
- en: 'But before we discuss the other options, let''s make sure we have some tests.
    So let''s create a test in our package. We will store it in `test_pytest.py`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 但在讨论其他选项之前，让我们确保我们有一些测试。所以让我们在我们的包中创建一个测试。我们将把它存储在`test_pytest.py`中：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, the other test options. Since the custom command doesn''t really add much
    and actually makes things more complicated, we will skip that. If you want to
    customize how the tests are being run, use the `pytest.ini` and `setup.cfg` files
    instead. The best option is `pytest-runner` which makes running tests a trivial
    task:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，其他测试选项。由于自定义命令实际上并没有增加太多内容，而且实际上使事情变得更加复杂，我们将跳过它。如果您想自定义测试的运行方式，请改用`pytest.ini`和`setup.cfg`文件。最好的选项是`pytest-runner`，它使运行测试变得非常简单：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To properly integrate this method, we should make a few changes to the `setup.py`
    script. They are not strictly needed but it makes things more convenient for others
    using your package, others that may not be aware that you are using `py.test,`
    for example. First, we make sure that the standard `python setup.py test` command
    actually runs the `pytest` command instead by modifying `setup.cfg`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确地集成这种方法，我们应该对`setup.py`脚本进行一些更改。它们并不是严格需要的，但对于使用您的软件包的其他人来说，这会使事情变得更加方便，可能不知道您正在使用`py.test`，例如。首先，我们确保标准的`python
    setup.py test`命令实际上运行`pytest`命令，而不是通过修改`setup.cfg`来运行：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Second, we want to make sure that the `setup.py` command installs the packages
    we need to run the `py.test` tests. To do that, we need to modify `setup.py` as
    well:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们要确保`setup.py`命令安装我们运行`py.test`测试所需的软件包。为此，我们还需要修改`setup.py`：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The beauty of this approach is that the regular `python setup.py test` command
    works and all needed requirements are automatically installed before running the
    tests. Because the `pytest` requirement is only in the `tests_require` section
    however, they will not be installed if the test command isn't run. The only package
    that will always be installed is the `pytest-runner` package and that's a really
    light package so it will be very light to install and run.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的美妙之处在于常规的`python setup.py test`命令可以工作，并且在运行测试之前会自动安装所有所需的要求。但是，由于`pytest`要求仅在`tests_require`部分中，如果未运行测试命令，则它们将不会被安装。唯一始终会被安装的软件包是`pytest-runner`软件包，这是一个非常轻量级的软件包，因此安装和运行起来非常轻便。
- en: Nosetests
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nosetests
- en: 'The `nose` package handles the installation only and is slightly different
    from `py.test`. The only difference is that `py.test` has a separate `pytest-runner`
    package for the test runner and nose package has a built-in `nosetests` command.
    So without further ado, here is the nose version:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`nose`包只处理安装，并且与`py.test`略有不同。唯一的区别是`py.test`有一个单独的`pytest-runner`包用于测试运行器，而nose包有一个内置的`nosetests`命令。因此，以下是nose版本：'
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: C/C++ extensions
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C/C++扩展
- en: The previous chapter already covered this somewhat, as it's a requirement to
    compile the C/C++ files. But that chapter didn't explain what and how the `setup.py`
    was doing in this case.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 前一章已经在一定程度上涵盖了这一点，因为编译C/C++文件是必需的。但是那一章并没有解释在这种情况下`setup.py`在做什么以及如何做。
- en: 'For convenience, we will repeat the `setup.py` file:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，我们将重复`setup.py`文件：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Before you start with these extensions, you should learn the following commands:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用这些扩展之前，你应该学习以下命令：
- en: '`build`: This is actually not a C/C++ specific build function (try `build_clib`
    for that) but a combined build function to build everything within `setup.py`.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build`：这实际上不是一个特定于C/C++的构建函数（尝试`build_clib`），而是一个组合构建函数，用于在`setup.py`中构建所有内容。'
- en: '`clean`: This cleans the results from the `build` command. This is generally
    not needed but sometimes the detection of files that need to be recompiled to
    work is incorrect. So if you encounter strange or unexpected issues, try cleaning
    the project first.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean`：这会清理`build`命令的结果。通常情况下不需要，但有时重新编译工作的文件检测是不正确的。因此，如果遇到奇怪或意外的问题，请尝试先清理项目。'
- en: Regular extensions
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常规扩展
- en: The `setuptools.Extension` class tells `setuptools` that a module named `spam`
    uses the source file `spam.c`. This is just the simplest version of an extension,
    a name, and a list of sources, but in many cases you are going to need more than
    the simple case.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`setuptools.Extension`类告诉`setuptools`一个名为`spam`的模块使用源文件`spam.c`。这只是一个扩展的最简单版本，一个名称和一个源列表，但在许多情况下，你需要的不仅仅是简单的情况。'
- en: 'One example is the `pillow` library which detects the libraries available on
    the system and adds extensions based on that. But because these extensions include
    libraries, some extra compilation flags are required. The basic PIL module itself
    doesn''t appear too involved but the libs are actually filled with all auto-detected
    libraries with the matching macro definitions:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是`pillow`库，它会检测系统上可用的库，并根据此添加扩展。但是因为这些扩展包括库，所以需要一些额外的编译标志。基本的PIL模块本身似乎并不太复杂，但是库实际上都是包含了所有自动检测到的库和匹配的宏定义：
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `freetype` extension has something similar:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`freetype`扩展有类似的东西：'
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Cython extensions
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cython扩展
- en: 'The `setuptools` library is actually a bit smarter than the regular `distutils`
    library when it comes to extensions. It actually adds a little trick to the `Extension`
    class. Remember the brief introduction to `Cython` in [Chapter 12](ch12.html "Chapter 12. Performance
    – Tracking and Reducing Your Memory and CPU Usage"), *Performance – Tracking and
    Reducing Your Memory and CPU Usage* about performance? The `setuptools` library
    makes it a bit more convenient to compile those. The `Cython` manual recommends
    you to use something similar to the following code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`setuptools`库在处理扩展时实际上比常规的`distutils`库要聪明一些。它实际上向`Extension`类添加了一个小技巧。还记得[第12章](ch12.html
    "第12章。性能-跟踪和减少内存和CPU使用情况")中对性能的简要介绍吗？`setuptools`库使得编译这些变得更加方便。`Cython`手册建议你使用类似以下代码的东西：'
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here `eggs.pyx` contains:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`eggs.pyx`包含：
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The problem with this approach is that `setup.py` will break unless you have
    `Cython` installed:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的问题是，除非你安装了`Cython`，否则`setup.py`会出现问题：
- en: '[PRE29]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To prevent that issue, we are just going to let `setuptools` handle this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这个问题，我们只需要让`setuptools`处理这个问题：
- en: '[PRE30]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now `Cython` will be automatically installed if needed and the code will work
    just fine:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果需要，`Cython`将被自动安装，并且代码将正常工作：
- en: '[PRE31]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'For development purposes however, `Cython` also offers a simpler method which
    doesn''t require manual building. First, to make sure we are actually using this
    method, let''s install `Cython` and uninstall and clean `eggs` completely:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了开发目的，`Cython`还提供了一种不需要手动构建的更简单的方法。首先，为了确保我们实际上正在使用这种方法，让我们安装`Cython`，并彻底卸载和清理`eggs`：
- en: '[PRE32]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now let''s try and run our `eggs.pyx` module:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试运行我们的`eggs.pyx`模块：
- en: '[PRE33]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: That's how easy it is to run the `pyx` files without explicit compiling.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在没有显式编译的情况下运行`pyx`文件的简单方法。
- en: Wheels – the new eggs
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wheels - 新的eggs
- en: For pure Python packages, the `sdist` (source distribution) command has always
    been enough. For C/C++ packages however, it is usually not that convenient. The
    problem with C/C++ packages is that compilation is needed unless you use a binary
    package. Traditionally those were generally the `.egg` files but they never really
    solved the issue quite right. That is why the `wheel` format has been introduced
    (PEP 0427), a binary package format that contains both source and binaries and
    can install on both Windows and OS X without requiring a compiler. As an added
    bonus, it installs faster for pure Python packages as well.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 对于纯Python包，`sdist`（源分发）命令一直足够了。但是对于C/C++包来说，通常并不那么方便。C/C++包的问题在于，除非使用二进制包，否则需要进行编译。传统上，这些通常是`.egg`文件，但它们从未真正解决了问题。这就是为什么引入了`wheel`格式（PEP
    0427），这是一种包含源代码和二进制代码的二进制包格式，可以在Windows和OS X上安装，而无需编译器。作为额外的奖励，它也可以更快地安装纯Python包。
- en: 'Implementation is luckily simple. First, install the `wheel` package:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 实现起来幸运的是很简单。首先，安装`wheel`包：
- en: '[PRE34]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now you''ll be able to use the `bdist_wheel` command to build your packages.
    The only small gotcha is that by default the packages created by Python 3 will
    only work on Python 3, so Python 2 installations will fall back to the `sdist`
    file. To fix that, you can add the following to your `setup.cfg` file:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以使用`bdist_wheel`命令来构建你的包。唯一的小问题是，默认情况下Python 3创建的包只能在Python 3上运行，因此Python
    2安装将退回到`sdist`文件。为了解决这个问题，你可以将以下内容添加到你的`setup.cfg`文件中：
- en: '[PRE35]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The only important thing to note here is that in the case of C extensions, this
    can go wrong. The binary C extensions for Python 3 are not compatible with those
    from Python 2\. So if you have a pure Python package and are targeting both Python
    2 and 3, enable the flag. Otherwise just leave it as the default.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这里唯一需要注意的重要事项是，在C扩展的情况下，可能会出错。Python 3的二进制C扩展与Python 2的不兼容。因此，如果您有一个纯Python软件包，并且同时针对Python
    2和3，启用该标志。否则，就将其保持为默认值。
- en: Distributing to the Python Package Index
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分发到Python Package Index
- en: Once you have everything up and running, tested, and documented, it is time
    to actually push the project to the **Python Package Index** (**PyPI**). Before
    pushing the package to PyPI, we need to make sure everything is in order.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的一切都正常运行，经过测试和记录，就是时候将项目实际推送到**Python Package Index**（**PyPI**）了。在将软件包推送到PyPI之前，我们需要确保一切都井井有条。
- en: 'First, let''s check the `setup.py` file for issues:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们检查`setup.py`文件是否有问题：
- en: '[PRE36]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'It seems that we forgot to specify a `url` and the `author` or `maintainer`
    information. Let''s fill those:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们忘记了指定`url`和`author`或`maintainer`信息。让我们填写这些：
- en: '[PRE37]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now let''s check again:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再次检查：
- en: '[PRE38]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Perfect! No errors and everything looks good.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！没有错误，一切看起来都很好。
- en: 'Now that our `setup.py` is in order, let''s try testing. Since our little test
    project has virtually no tests, this will come up close to empty. But if you''re
    starting a new project, then I recommend trying to maintain 100 percent test coverage
    from the beginning. Implementing all the tests later is usually more difficult,
    and testing while you work generally makes you think more about the design decisions
    of the code. Running the test is easy enough:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的`setup.py`已经井井有条了，让我们来尝试测试。由于我们的小测试项目几乎没有测试，这将几乎是空的。但是如果您正在启动一个新项目，我建议从一开始就尽量保持100%的测试覆盖率。稍后实施所有测试通常更加困难，而在工作时进行测试通常会让您更多地考虑代码的设计决策。运行测试非常容易：
- en: '[PRE39]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now that we have all in check, the next step is building the documentation.
    As mentioned earlier, the `sphinx` and `sphinx-pypi-upload-2` packages can help
    here:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经检查完毕，下一步是构建文档。如前所述，`sphinx`和`sphinx-pypi-upload-2`软件包可以在这方面提供帮助：
- en: '[PRE40]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Once we are certain that everything is correct, we can build the package and
    upload it to PyPI. For pure Python releases, you can use the `sdist` (source distribution)
    command. For a package that uses a native installer, there are a few options,
    such as `bdist_wininst` and `bdist_rpm`, available. I personally use the following
    for nearly all my packages:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确定一切都正确，我们就可以构建软件包并将其上传到PyPI。对于纯Python版本的发布，您可以使用`sdist`（源分发）命令。对于使用本机安装程序的软件包，有一些选项可用，例如`bdist_wininst`和`bdist_rpm`。我个人几乎在所有我的软件包中使用以下命令：
- en: '[PRE41]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This automatically builds the Sphinx documentation, uploads the documentation
    to PyPI, builds the package with the source, and uploads the package with the
    source.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动构建Sphinx文档，将文档上传到PyPI，使用源构建软件包，并使用源上传软件包。
- en: This will obviously only succeed if you are the owner of that specific package
    and are authorized with PyPI.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，只有在您是特定软件包的所有者并且被PyPI授权时，才能成功完成此操作。
- en: Note
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Before you can upload the packages, you need to register the package on PyPI.
    This can be done using the `register` command, but since that immediately registers
    the package at the PyPI servers, it should not be used while testing.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在上传软件包之前，您需要在PyPI上注册软件包。这可以使用`register`命令来完成，但由于这会立即在PyPI服务器上注册软件包，因此在测试时不应使用。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: After reading this chapter, you should be able to create Python packages containing
    not only pure-Python files but also extra data, compiled C/C++ extensions, documentation,
    and tests. With all these tools at your disposal, you are now able to make high
    quality Python packages that can easily be reused in other projects and packages.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，您应该能够创建包含不仅是纯Python文件，还包括额外数据、编译的C/C++扩展、文档和测试的Python软件包。有了这些工具，您现在可以制作高质量的Python软件包，这些软件包可以轻松地在其他项目和软件包中重复使用。
- en: The Python infrastructure makes it really quite easy to create new packages
    and split your project into multiple subprojects. This allows you to create simple
    and reusable packages with fewer bugs because everything is easily testable. While
    you shouldn't go overboard with splitting up the packages, if a script or module
    has a purpose of its own then it's a candidate for packaging separately.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Python基础设施使得创建新软件包并将项目拆分为多个子项目变得非常容易。这使您能够创建简单且可重用的软件包，因为一切都很容易进行测试。虽然您不应该过度拆分软件包，但是如果脚本或模块具有自己的目的，那么它就是可以单独打包的候选项。
- en: With this chapter we have come to the end of the book. I sincerely hope you
    enjoyed reading it and have learned about new and interesting topics. Any and
    all feedback is greatly appreciated, so feel free to contact me through my website
    at [https://wol.ph/](https://wol.ph/).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们已经完成了本书。我真诚地希望您喜欢阅读，并了解了新颖有趣的主题。非常感谢您的任何反馈，所以请随时通过我的网站[https://wol.ph/](https://wol.ph/)与我联系。
