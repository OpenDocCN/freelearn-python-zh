- en: Developing RESTful APIs with Pyramid 1.10
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Pyramid 1.10开发RESTful API
- en: 'In this chapter, we will work with Pyramid 1.10 to create a RESTful Web API
    that performs CRUD operations on a simple data source. We will look at the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Pyramid 1.10来创建一个执行简单数据源CRUD操作的RESTful Web API。我们将探讨以下主题：
- en: Design a RESTful API to interact with a simple data source
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计一个与简单数据源交互的RESTful API
- en: Understand the tasks performed by each HTTP method
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解每个HTTP方法执行的任务
- en: Set up the virtual environment with Pyramid 1.10
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Pyramid 1.10设置虚拟环境
- en: Create a new Pyramid project based on a template
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于模板创建新的Pyramid项目
- en: Create the model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模型
- en: Use a dictionary as a repository
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用字典作为存储库
- en: Create a Marshmallow schema to validate, serialize, and deserialize the model
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Marshmallow模式以验证、序列化和反序列化模型
- en: Work with view callables and view configurations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与视图可调用和视图配置一起工作
- en: Understand and configure view handlers
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解和配置视图处理器
- en: Make HTTP requests to the API with command-line tools
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行工具向API发送HTTP请求
- en: Designing a RESTful API to interact with a simple data source
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计一个与简单数据源交互的RESTful API
- en: A surfer who won dozens of international surfing competitions became a surfing
    coach and wants to build a new tool to help surfers train for the Olympic Games.
    The development team that works with the surfing coach has years of experience
    working with the Pyramid web framework, and therefore, he wants us to build a
    simple RESTful API with Pyramid to work with the data provided by an IoT board
    connected to multiple sensors in the surfboards.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一位赢得数十场国际冲浪比赛的冲浪者成为了一名冲浪教练，并希望构建一个新工具来帮助冲浪者为奥运会训练。与冲浪教练合作的开发团队在与Pyramid网络框架合作方面拥有多年的经验，因此，他希望我们使用Pyramid构建一个简单的RESTful
    API，以处理连接到冲浪板多个传感器的物联网板提供的数据。
- en: 'Each IoT board will provide the following data:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每个物联网板将提供以下数据：
- en: '**Status**: Many wearable wireless sensors embedded in each surfer''s wetsuit
    and other sensors included in the surfboard will provide data, and the IoT board
    will perform a real-time analysis to indicate ...'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**：每个冲浪者的湿式连体衣中嵌入的许多可穿戴无线传感器和其他包含在冲浪板中的传感器将提供数据，物联网板将对数据进行实时分析以指示...'
- en: Setting up the virtual environment with Pyramid 1.10
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Pyramid 1.10设置虚拟环境
- en: In [Chapter 1](dbf75cef-4962-4e40-8192-03873b774c48.xhtml), *Developing RESTful
    APIs and Microservices with Flask 1.0.2*, we learned that, throughout this book,
    we were going to work with the lightweight virtual environments that were introduced
    and improved on in Python 3.4\. Now, we will follow many steps to create a new
    lightweight virtual environment to work with Pyramid 1.10\. It is highly recommended
    to read the section named *Working with lightweight virtual environments* in [Chapter
    1](dbf75cef-4962-4e40-8192-03873b774c48.xhtml), *Developing RESTful APIs and Microservices
    with Flask 1.0.2*, if you don't have experience with lightweight virtual environments
    in modern Python. This chapter includes all the detailed explanations about the
    effects of the steps we are going to follow.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](dbf75cef-4962-4e40-8192-03873b774c48.xhtml)《使用Flask 1.0.2开发RESTful API和微服务》中，我们了解到，在本书中，我们将使用Python
    3.4中引入并改进的轻量级虚拟环境。现在，我们将遵循许多步骤来创建一个新的轻量级虚拟环境，以使用Pyramid 1.10。如果您对现代Python中的轻量级虚拟环境没有经验，强烈建议您阅读[第1章](dbf75cef-4962-4e40-8192-03873b774c48.xhtml)《使用Flask
    1.0.2开发RESTful API和微服务》中名为*与轻量级虚拟环境一起工作*的部分。本章包含了我们将遵循的步骤的所有详细解释。
- en: The following commands assume that you have Python 3.6.6 installed on Linux,
    macOS, or Windows.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令假设您已在Linux、macOS或Windows上安装了Python 3.6.6。
- en: 'First, we have to select the target folder or directory for our lightweight
    virtual environment. The following is the path we will use in the example for
    Linux and macOS:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须选择我们的轻量级虚拟环境的目标文件夹或目录。以下是我们将在示例中使用的Linux和macOS的路径：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The target folder for the virtual environment will be the `HillarPythonREST2/Pyramid01`
    folder within our home directory. For example, if our home directory in macOS
    or Linux is `/Users/gaston`, the virtual environment will be created within `/Users/gaston/HillarPythonREST2/Pyramid01`.
    You can replace the specified path with your desired path in each command.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境的目标文件夹将是我们家目录中的`HillarPythonREST2/Pyramid01`文件夹。例如，如果我们的macOS或Linux的家目录是`/Users/gaston`，虚拟环境将在`/Users/gaston/HillarPythonREST2/Pyramid01`中创建。您可以在每个命令中用您想要的路径替换指定的路径。
- en: 'The following is the path we will use in the example for Windows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将在示例中使用的Windows的路径：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The target folder for the virtual environment will be the `HillarPythonREST2\Pyramid01`
    folder within our user profile folder. For example, if our user profile folder
    is `C:\Users\gaston`, the virtual environment will be created within `C:\Users\gaston\HillarPythonREST2\Pyramid01`.
    Of course, you can replace the specified path with your desired path in each command.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境的目标文件夹将是我们的用户配置文件文件夹中的 `HillarPythonREST2\Pyramid01` 文件夹。例如，如果我们的用户配置文件文件夹是
    `C:\Users\gaston`，则虚拟环境将在 `C:\Users\gaston\HillarPythonREST2\Pyramid01` 中创建。当然，您可以在每个命令中将指定的路径替换为您想要的路径。
- en: 'In Windows PowerShell, the previous path would be the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows PowerShell 中，之前的路径将是以下：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we have to use the `-m` option followed by the `venv` module name and
    the desired path to make Python run this module as a script and create a virtual
    environment at the specified path. The instructions are different depending on
    the platform in which we are creating the virtual environment. Thus, make sure
    you follow the instructions for your operating system:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须使用 `-m` 选项，后跟 `venv` 模块名称和所需的路径，以便 Python 将此模块作为脚本运行并创建指定路径的虚拟环境。根据我们创建虚拟环境的平台，说明可能会有所不同。因此，请确保您遵循您操作系统的说明：
- en: 'Open a Terminal in Linux or macOS and execute the following command to create
    a virtual environment:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Linux 或 macOS 中打开终端并执行以下命令以创建虚拟环境：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In Windows, execute the following command in the Command Prompt to create a
    virtual environment:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 中，请在命令提示符中执行以下命令以创建虚拟环境：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you want to work with Windows PowerShell, execute the following command
    to create a virtual environment:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想使用 Windows PowerShell，请执行以下命令以创建虚拟环境：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The previous commands don't produce any output. Now that we have created a virtual
    environment, we will run a platform-specific script to activate it. After we activate
    the virtual environment, we will install packages that will only be available
    in this virtual environment.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令不会产生任何输出。现在我们已经创建了虚拟环境，我们将运行特定于平台的脚本以激活它。激活虚拟环境后，我们将安装仅在此虚拟环境中可用的包。
- en: 'If your Terminal is configured to use the `bash` shell in macOS or Linux, run
    the following command to activate the virtual environment. The command also works
    for the `zsh` shell:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的终端配置为在 macOS 或 Linux 中使用 `bash` shell，请运行以下命令以激活虚拟环境。该命令也适用于 `zsh` shell：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If your Terminal is configured to use either the `csh` or `tcsh` shell, run
    the following command to activate the virtual environment:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的终端配置为使用 `csh` 或 `tcsh` shell，请运行以下命令以激活虚拟环境：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If your Terminal is configured to use the `fish` shell, run the following command
    to activate the virtual environment:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的终端配置为使用 `fish` shell，请运行以下命令以激活虚拟环境：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In Windows, you can run either a batch file in the Command Prompt or a Windows
    PowerShell script to activate the virtual environment. If you prefer the Command
    Prompt, run the following command in the Windows command line to activate the
    virtual environment:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 中，您可以在命令提示符中运行批处理文件，或者在 Windows PowerShell 中运行脚本以激活虚拟环境。如果您更喜欢命令提示符，请在
    Windows 命令行中运行以下命令以激活虚拟环境：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you prefer Windows PowerShell, launch it and run the following commands
    to activate the virtual environment. However, notice that you should have script
    execution enabled in Windows PowerShell to be able to run the script:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您更喜欢 Windows PowerShell，启动它并运行以下命令以激活虚拟环境。但是请注意，您应该在 Windows PowerShell 中启用脚本执行才能运行脚本：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: After you activate the virtual environment, the command prompt will display
    the virtual environment's root folder name, enclosed in parenthesis as a prefix
    of the default prompt, to remind us that we are working in the virtual environment.
    In this case, we will see (`Pyramid01`) as a prefix for the Command Prompt because
    the root folder for the activated virtual environment is `Pyramid01`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 激活虚拟环境后，命令提示符将显示虚拟环境的根文件夹名称，用括号括起来作为默认提示的前缀，以提醒我们我们正在虚拟环境中工作。在这种情况下，我们将看到（`Pyramid01`）作为命令提示符的前缀，因为已激活的虚拟环境的根文件夹是
    `Pyramid01`。
- en: We have followed the necessary steps to create and activate a virtual environment.
    Now, we will create a `requirements.txt` file to specify the set of packages that
    our application requires to be installed on any supported platform. This way,
    it will be extremely easy to repeat the installation of the specified packages
    with their versions in any new virtual environment.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经遵循了必要的步骤来创建和激活虚拟环境。现在，我们将创建一个`requirements.txt`文件来指定我们的应用程序在任意支持平台上需要安装的包集。这样，在任意新的虚拟环境中重复安装指定包及其版本将变得极其容易。
- en: 'Use your favorite editor to create a new text file named `requirements.txt`
    within the root folder for the recently created virtual environment. The following
    lines show the contents for the file that declares the packages and the versions
    that our API requires. The code file for the sample is included in the `restful_python_2_11_01`
    folder, in the `Pyramid01/requirements.txt` file:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的编辑器在最近创建的虚拟环境的根目录下创建一个名为`requirements.txt`的新文本文件。以下行显示了声明我们的API所需的包和版本的文件内容。示例代码文件包含在`restful_python_2_11_01`文件夹中，在`Pyramid01/requirements.txt`文件中：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Each line in the `requirements.txt` file indicates the package and the version
    that needs to be installed. In this case, we are working with exact versions by
    using the `==` operator because we want to make sure that the specified version
    is installed. The following table summarizes the packages and the version numbers
    that we specified as requirements:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`requirements.txt`文件中的每一行都指示需要安装的包和版本。在这种情况下，我们通过使用`==`运算符使用确切版本，因为我们想确保安装了指定的版本。以下表格总结了我们所指定的作为要求的包和版本号：'
- en: '| Package name | Version to be installed |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 包名 | 要安装的版本 |'
- en: '| `pyramid` | 1.10.1 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `pyramid` | 1.10.1 |'
- en: '| `cookiecutter` | 1.6.0 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `cookiecutter` | 1.6.0 |'
- en: '| `httpie` | 1.0.2 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `httpie` | 1.0.2 |'
- en: The `cookiecutter` package installs a command-line utility that makes it possible
    to create Pyramid projects from project templates. We will use this utility to
    create a basic Pyramid 1.10 project and then make the necessary changes to build
    our RESTful API without writing all the code from scratch. Notice that we will
    install additional packages later by specifying additional required packages in
    the Pyramid `setup.py` file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`cookiecutter`包安装了一个命令行工具，使得可以从项目模板中创建Pyramid项目。我们将使用这个工具创建一个基本的Pyramid 1.10项目，然后进行必要的更改来构建我们的RESTful
    API，而不需要从头开始编写所有代码。请注意，我们将在稍后通过在Pyramid的`setup.py`文件中指定额外的必需包来安装额外的包。'
- en: 'Go to the root folder for the virtual environment: `Pyramid01`. In macOS or
    Linux, enter the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 进入虚拟环境的根目录：`Pyramid01`。在macOS或Linux中，输入以下命令：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In Windows Command Prompt, enter the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows命令提示符中，输入以下命令：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In Windows PowerShell, enter the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows PowerShell中，输入以下命令：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we must run the following command on macOS, Linux, or Windows to install
    the packages and the versions explained in the previous table with `pip` by using
    the recently created `requirements.txt` file. Make sure you are located in the
    folder that contains the `requirements.txt` file before running the command (`Pyramid01`):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须在macOS、Linux或Windows上运行以下命令，使用`pip`通过最近创建的`requirements.txt`文件安装上一表中解释的包和版本。在运行命令之前，请确保您位于包含`requirements.txt`文件的文件夹中（`Pyramid01`）：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The last lines for the output will indicate that `pyramid`, `cookiecutter`,
    `httpie`, and their dependencies have been successfully installed:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的最后几行将指示`pyramid`、`cookiecutter`、`httpie`及其依赖项已成功安装：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Creating a new Pyramid project based on a template
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于模板创建新的Pyramid项目
- en: 'Now, we will generate a Pyramid project by using an app template, also known
    as **scaffold**. Notice that you need Git installed on your development computer
    to use the next command. You can visit the following web page for more information
    about Git: [https://git-scm.com](https://git-scm.com).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用应用程序模板（也称为**脚手架**）来生成一个Pyramid项目。请注意，您需要在开发计算机上安装Git才能使用下一个命令。您可以访问以下网页了解更多关于Git的信息：[https://git-scm.com](https://git-scm.com)。
- en: 'Run the following command to use `cookiecutter` to generate a new project based
    on the `pyramid-cookiecutter-starter` template. We use the `--checkout 1.10-branch`
    option to use a specific branch that makes sure that the template is compatible
    with Pyramid 1.10:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以使用`cookiecutter`根据`pyramid-cookiecutter-starter`模板生成新的项目。我们使用`--checkout
    1.10-branch`选项来使用一个特定的分支，确保模板与Pyramid 1.10兼容：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The command will ask you for the project's name. Enter `metrics` and press *Enter*.
    You will see a ...
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '命令将要求您输入项目的名称。输入`metrics`并按*Enter*。您将看到一个... '
- en: Creating the model
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: Now, we will create a simple `SurfboardMetricModel` class that we will use to
    represent metrics. Remember that we won't be persisting the model in any database
    or file, and therefore, in this case, our class will just provide the required
    attributes and no mapping information.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个简单的`SurfboardMetricModel`类，我们将使用它来表示指标。请记住，我们不会将模型持久化到任何数据库或文件中，因此在这种情况下，我们的类将只提供所需的属性，而不提供映射信息。
- en: 'Create a new `models` subfolder within the `metrics/metrics` folder. Then,
    create a new `metrics.py` file in the `metrics/metrics/models` subfolder. The
    following lines show the code that declares the necessary imports that we will
    require for many classes. This will then create a `SurfboardMetricModel` class
    in this file. The code file for the sample is included in the `restful_python_2_09_01`
    folder, in the `Pyramid01/metrics/metrics/models/metrics.py` file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在`metrics/metrics`文件夹中创建一个新的`models`子文件夹。然后，在`metrics/metrics/models`子文件夹中创建一个新的`metrics.py`文件。以下行显示了声明我们将需要用于许多类的必要导入的代码。然后，在这个文件中创建一个`SurfboardMetricModel`类。示例代码文件包含在`restful_python_2_09_01`文件夹中，位于`Pyramid01/metrics/metrics/models/metrics.py`文件中：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `SurfboardMetricModel` class just declares a constructor; that is, the
    `__init__` method. This method receives many arguments and uses them to initialize
    the attributes with the same names: `status`, `speed_in_mph`, `altitude_in_feet`,
    and `water_temperature_in_f`. The `id` attribute is set to `0`. We will automatically
    increment the identifier for each new surfboard metric generated with an API call.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`SurfboardMetricModel`类仅声明了一个构造函数；即`__init__`方法。该方法接收许多参数，并使用它们来初始化具有相同名称的属性：`status`、`speed_in_mph`、`altitude_in_feet`和`water_temperature_in_f`。`id`属性被设置为`0`。我们将自动递增每个通过API调用生成的新的冲浪指标标识符。'
- en: Using a dictionary as a repository
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用字典作为存储库
- en: Now, we will create a `SurfboardMetricManager` class that we will use to persist
    the `SurfboardMetricModel` instances in an in-memory dictionary. Our API methods
    will call methods for the `SurfboardMetricManager` class to retrieve, insert,
    and delete `SurfboardMetricModel` instances.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个`SurfboardMetricManager`类，我们将使用它来在内存字典中持久化`SurfboardMetricModel`实例。我们的API方法将调用`SurfboardMetricManager`类的相关方法来检索、插入和删除`SurfboardMetricModel`实例。
- en: 'Stay in the `metrics.py` file in the `metrics/metrics/models` subfolder. Add
    the following lines to declare the `SurfboardMetricManager` class. The code file
    for the sample is included in the `restful_python_2_09_01` folder, in the `Pyramid01/metrics/metrics/models/metrics.py`
    file:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 保持位于`metrics.py`文件中，该文件位于`metrics/metrics/models`子文件夹中。添加以下行以声明`SurfboardMetricManager`类。示例代码文件包含在`restful_python_2_09_01`文件夹中，位于`Pyramid01/metrics/metrics/models/metrics.py`文件中：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Creating a Marshmallow schema to validate, serialize, and deserialize the model
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Marshmallow模式以验证、序列化和反序列化模型
- en: Now, we will create a simple Marshmallow schema that we will use to validate,
    serialize, and deserialize the previously declared `SurfboardMetricModel` model.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个简单的Marshmallow模式，我们将使用它来验证、序列化和反序列化之前声明的`SurfboardMetricModel`模型。
- en: 'Stay in the `metrics.py` file in the `metrics/metrics/models` subfolder. Add
    the following lines to declare `SurferStatus Enum` and the `SurfboardMetricSchema`
    class. The code file for the sample is included in the `restful_python_2_09_01`
    folder, in the `Pyramid01/metrics/metrics/models/metrics.py` file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 保持位于`metrics.py`文件中，该文件位于`metrics/metrics/models`子文件夹中。添加以下行以声明`SurferStatus`枚举和`SurfboardMetricSchema`类。示例代码文件包含在`restful_python_2_09_01`文件夹中，位于`Pyramid01/metrics/metrics/models/metrics.py`文件中：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: First, the code declares the `SurferStatus Enum` that we will use to map description
    to an integer for the surfer status. We want the users of the API to be able to
    specify the status as a string that matches one of the `Enum` descriptions. For
    example, if the user wants to create a new metric with its status set to `SurferStatus.PADDLING`,
    they should use `'PADDLING'` as the value for the status key in the provided JSON
    body.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，代码声明了我们将用于将描述映射到整数的`SurferStatus`枚举。我们希望API的用户能够指定状态为一个与`Enum`描述匹配的字符串。例如，如果用户想要创建一个新的指标，并将其状态设置为`SurferStatus.PADDLING`，他们应该在提供的JSON正文中使用`'PADDLING'`作为状态键的值。
- en: Then, the code declares the `SurfboardMetricSchema` class as a subclass of the
    `marshmallow.Schema` class. We declare the attributes that represent fields as
    instances of the appropriate classes declared in the `marshmallow.fields` module.
    Whenever we specify the `True` value for the `dump_only` argument, it means that
    we want the field to be read-only. For example, we won't be able to provide a
    value for the `id` field in the schema. The value for this field will be automatically
    generated by the `SurfboardMetricManager` class.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码将`SurfboardMetricSchema`类声明为`marshmallow.Schema`类的子类。我们声明代表字段的属性为`marshmallow.fields`模块中声明的适当类的实例。每当我们将`dump_only`参数指定为`True`值时，这意味着我们希望字段为只读。例如，我们无法在模式中为`id`字段提供值。该字段的值将由`SurfboardMetricManager`类自动生成。
- en: The `SurfboardMetricSchema` class declares the `status` attribute as an instance
    of the `marshmallow_enum.EnumField` class. The `enum` argument is set to `SurferStatus`
    to specify that only the members of this `Enum` will be considered valid values.
    As a result of this setting, only a string that matches the descriptions in `SurferStatus
    Enum` will be accepted as a valid value for this field during deserialization.
    In addition, whenever this field is serialized, the string representation of the
    `Enum` description will be used.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`SurfboardMetricSchema`类将`status`属性声明为`marshmallow_enum.EnumField`类的实例。`enum`参数设置为`SurferStatus`以指定只有此`Enum`的成员将被视为有效值。因此，在反序列化过程中，只有与`SurferStatus
    Enum`中的描述匹配的字符串将被接受为该字段的有效值。此外，每当此字段被序列化时，将使用`Enum`描述的字符串表示形式。'
- en: The `speed_in_mph`, `altitude_in_feet`, and `water_temperature_in_f` attributes
    are instances of the `fields.Integer` class, with the `required` argument set
    to `True`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`speed_in_mph`、`altitude_in_feet`和`water_temperature_in_f`属性是`fields.Integer`类的实例，`required`参数设置为`True`。'
- en: Working with view callables and view configurations
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与视图调用和视图配置一起工作
- en: Our RESTful API won't be using the two modules included in the `metrics/metrics/views`
    subfolder that was generated by the app template. Thus, we must delete the `metrics/metrics/views/default.py`
    and `metrics/metrics/views/notfound.py` files.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的RESTful API不会使用由应用程序模板生成的位于`metrics/metrics/views`子文件夹中的两个模块。因此，我们必须删除`metrics/metrics/views/default.py`和`metrics/metrics/views/notfound.py`文件。
- en: Pyramid uses view callables as the main building blocks for a RESTful API. Whenever
    a request arrives, Pyramid finds and invokes the appropriate view callable to
    process the request and return an appropriate response.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Pyramid使用视图调用作为RESTful API的主要构建块。每当有请求到达时，Pyramid会找到并调用适当的视图调用以处理请求并返回适当的响应。
- en: View callables are callable Python objects such as functions, classes, or instances
    that implement a `__call__` method. Any view callable receives an argument named
    `request` that will provide the `pyramid.request.Request` instance that represents
    ...
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 视图调用是可调用的Python对象，如函数、类或实现`__call__`方法的实例。任何视图调用都会接收到一个名为`request`的参数，该参数将提供代表...的`pyramid.request.Request`实例。
- en: Understanding and configuring view handlers
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和配置视图处理器
- en: 'The following table shows the function that we want to be executed for each
    combination of HTTP verb and scope, and the route name that identifies each resource:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了对于每个HTTP动词和范围的组合，我们想要执行的功能以及标识每个资源的路由名称：
- en: '| HTTP verb | Scope | Route name | Function |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| HTTP动词 | 范围 | 路由名称 | 函数 |'
- en: '| `GET` | Collection of metrics | `''metrics''` | `metrics_collection` |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | 指标集合 | `''metrics''` | `metrics_collection` |'
- en: '| `GET` | Metric | `''metric''` | `metric` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | 指标 | `''metric''` | `metric` |'
- en: '| `POST` | Collection of metrics | `''metrics''` | `metrics_collection` |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `POST` | 指标集合 | `''metrics''` | `metrics_collection` |'
- en: '| `DELETE` | Metric | `''metrics''` | `metric` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE` | 指标 | `''metrics''` | `metric` |'
- en: We must make the necessary resource routing configurations to call the appropriate
    functions, pass them all the necessary arguments by defining the appropriate routes,
    and match the appropriate view callable with the route.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须进行必要的资源路由配置来调用适当的函数，通过定义适当的路由传递所有必要的参数，并将适当的视图调用与路由匹配。
- en: 'First, we will check how the application template we used configures and returns
    a Pyramid WSGI application that will run our RESTful API. The following lines
    show the code for the `__init__.py` file within the `metrics/metrics` folder:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将检查我们使用的应用程序模板是如何配置并返回一个将运行我们的RESTful API的Pyramid WSGI应用程序的。以下行显示了位于`metrics/metrics`文件夹中的`__init__.py`文件的代码：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We have already removed the usage of the `jinja2` template, and therefore remove
    the highlighted line from the previous code. The code file for the sample is included
    in the `restful_python_2_09_01` folder, in the `Pyramid01/metrics/metrics/__init__.py`
    file.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经移除了对`jinja2`模板的使用，因此从之前的代码中删除了高亮行。示例代码文件包含在`restful_python_2_09_01`文件夹中，位于`Pyramid01/metrics/metrics/__init__.py`文件中。
- en: The code defines a `main` function that creates a `pyramid.config.Configurator`
    instance named `config`, with the `settings` received as an argument. The `main`
    function calls the `config.include` method with `'.routes'` as an argument to
    include the configuration callable that accepts a single argument named `config`
    from the `routes` module. This callable will receive the instance of `Configurator`
    in the `config` argument and will be able to call its methods to perform the appropriate
    configuration for routes. We will replace the existing code for the `routes` module
    after we finish analyzing the previous code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 代码定义了一个`main`函数，该函数创建一个名为`config`的`pyramid.config.Configurator`实例，并将接收到的`settings`作为参数。`main`函数使用`'.routes'`作为参数调用`config.include`方法，以包含来自`routes`模块的单个参数名为`config`的配置可调用项。这个可调用项将接收`config`参数中的`Configurator`实例，并将能够调用其方法来执行路由的适当配置。我们在分析完之前的代码后，将替换`routes`模块的现有代码。
- en: Then, the code calls the `config.scan` method to scan the Python packages and
    subpackages for callables that have specific decorator objects that perform configurations,
    such as the functions that we declared with the `@view.config` decorator.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码调用`config.scan`方法来扫描Python包和子包中具有特定装饰器对象的可调用项，这些装饰器对象执行配置，例如我们使用`@view.config`装饰器声明的函数。
- en: Finally, the code calls the `config.make_wsgi_app` method to commit any pending
    configuration statements and return the Pyramid WSGI application that represent
    the committed configuration state. This way, Pyramid completes with the configuration
    process and launches the server.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，代码调用`config.make_wsgi_app`方法来提交任何挂起的配置语句，并返回代表提交的配置状态的Pyramid WSGI应用程序。这样，Pyramid完成配置过程并启动服务器。
- en: 'Open the existing `routes.py` file within the `metrics/metrics` folder and
    replace the existing code with the following lines. The code file for the sample
    is included in the `restful_python_2_09_01` folder, in the `Pyramid01/metrics/metrics/routes.py`
    file:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 打开位于`metrics/metrics`文件夹中的现有`routes.py`文件，并用以下行替换现有代码。示例代码文件包含在`restful_python_2_09_01`文件夹中，位于`Pyramid01/metrics/metrics/routes.py`文件中：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The code defines an `includeme` function which receives the previously explained
    `pyramid.config.Configurator` instances in the `config` argument. First, the code
    calls the `config.add_route` method twice to associate the route named `'metrics'`
    with the `'/metrics/'` pattern and the route named `'metric'` with the `'metrics/{id:\d+}/'`
    pattern. Notice that the semicolon (`:`) after `id` is followed by a regular expression
    that makes sure that `id` is only composed of digits.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 代码定义了一个`includeme`函数，该函数接收之前解释过的`pyramid.config.Configurator`实例作为`config`参数。首先，代码两次调用`config.add_route`方法，将名为`'metrics'`的路由与`'/metrics/'`模式关联，将名为`'metric'`的路由与`'metrics/{id:\d+}/'`模式关联。请注意，`id`后面的分号（`;`）后面跟着一个正则表达式，确保`id`只由数字组成。
- en: Then, the code calls the `config.add_view` method twice to specify the view
    callable `metrics_collection` as the function that must be called when the route
    name is equal to `'metrics'` and the view callable `metric` as the function that
    must be called when the route name is equal to `'metric'`. In both cases, the
    `config.add_view` method specifies that we want to use `'json'` as the renderer
    for the responses.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码两次调用`config.add_view`方法来指定视图可调用`metrics_collection`作为当路由名称等于`'metrics'`时必须调用的函数，以及视图可调用`metric`作为当路由名称等于`'metric'`时必须调用的函数。在这两种情况下，`config.add_view`方法指定我们希望使用`'json'`作为响应的渲染器。
- en: Making HTTP requests to the API with command-line tools
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行工具向API发送HTTP请求
- en: The `metrics/development.ini` file is a settings file that defines the Pyramid
    app and server configuration for the development environment. As happens in most
    `.ini` files, the configuration settings are organized in sections. For example,
    the `[server:main]` section specifies the value for the listen setting as `localhost:6543`
    to make the `waitress` server `listen` on port `6543` and bind it to the localhost
    address.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`metrics/development.ini`文件是一个设置文件，它定义了开发环境中的Pyramid应用程序和服务器配置。与大多数`.ini`文件一样，配置设置按部分组织。例如，`[server:main]`部分指定了监听设置的值为`localhost:6543`，以便`waitress`服务器在端口`6543`上监听并绑定到localhost地址。'
- en: This file was included when we created a new app based on a template. Open the
    `metrics/development.ini` file and locate the following line that specifies the
    `bool` value for the `pyramid.debug_routematch` setting. The code file for the
    sample is included in the `restful_python_2_09_01 ...`
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们基于模板创建新应用程序时，包含了此文件。打开`metrics/development.ini`文件，找到指定`pyramid.debug_routematch`设置`bool`值的以下行。示例的代码文件包含在`restful_python_2_09_01
    ...`
- en: Test your knowledge
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: 'Let''s see whether you can answer the following questions correctly:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看你是否能正确回答以下问题：
- en: In Pyramid, view callables are which of the following?
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Pyramid中，视图可调用是以下哪个？
- en: Python objects such as functions, classes, or instances that implement a `__call__`
    method
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现了`__call__`方法的Python对象，如函数、类或实例
- en: Classes that inherit from the `pyramid.views.Callable` superclass
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继承自`pyramid.views.Callable`超类的类
- en: Instances of the `pyramid.views.Callable` class
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pyramid.views.Callable`类的实例'
- en: The `request` argument that any view callable receives represents an HTTP request,
    and is an instance of which of the following classes?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何视图可调用接收到的`request`参数代表一个HTTP请求，它是以下哪个类的实例？
- en: '`pyramid.web.Request`'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pyramid.web.Request`'
- en: '`pyramid.request.Request`'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pyramid.request.Request`'
- en: '`pyramid.callable.Request`'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pyramid.callable.Request`'
- en: Which of the following attributes allows us to specify the status code for the
    response in a `pyramid.response.Response` instance?
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个属性允许我们在`pyramid.response.Response`实例中指定响应的状态码？
- en: '`status`'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`status`'
- en: '`http_status_code`'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`http_status_code`'
- en: '`status_code`'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`status_code`'
- en: Which of the following classes, declared in the `pyramid.httpexceptions` module,
    represent an HTTP `201 Created` status code for a response?
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pyramid.httpexceptions`模块中声明的以下哪个类代表响应的HTTP `201 Created`状态码？
- en: '`HTTP_201_Created`'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`HTTP_201_Created`'
- en: '`HTTP_Created`'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`HTTP_Created`'
- en: '`HTTPCreated`'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`HTTPCreated`'
- en: Which of the following attributes allows us to specify the response body for
    a JSON response in a `pyramid.response.Response` instance?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个属性允许我们在`pyramid.response.Response`实例中指定JSON响应的响应体？
- en: '`json_body`'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`json_body`'
- en: '`body`'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`body`'
- en: '`body_as_json`'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`body_as_json`'
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we designed a RESTful API to interact with a simple data source
    with Pyramid 1.10\. We defined the requirements for our API and understood the
    tasks performed by each HTTP method. We set up a virtual environment with Pyramid,
    built a new application from an existing template, and added additional required
    packages to the Pyramid application.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用Pyramid 1.10设计了一个RESTful API来与一个简单的数据源交互。我们定义了API的需求，并理解了每个HTTP方法执行的任务。我们使用Pyramid设置了一个虚拟环境，从一个现有的模板中构建了一个新的应用程序，并将额外的必需包添加到了Pyramid应用程序中。
- en: We created a class that represented a surfboard metric, and additional classes
    to make it possible to generate a simple data source to allow us to focus on specific
    Pyramid features to build a RESTful API.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个表示冲浪板指标的类，以及额外的类，以便能够生成一个简单的数据源，使我们能够专注于特定的Pyramid功能来构建RESTful API。
- en: We then created a Marshmallow schema to validate, serialize, and deserialize
    the metric model. Then, we started working with view callable functions to process
    specific HTTP ...
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了一个Marshmallow模式来验证、序列化和反序列化指标模型。然后，我们开始使用视图可调用函数来处理特定的HTTP ...
