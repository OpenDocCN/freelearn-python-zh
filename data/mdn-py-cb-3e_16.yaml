- en: '16'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '16'
- en: Dependencies and Virtual Environments
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖关系和虚拟环境
- en: Python runs in an environment defined by the OS. There are some slight differences
    between Windows, macOS, and most Linux environments. We’ll set aside micro-controller
    environments, since the ability to tailor those environments is quite a bit more
    involved. We’ll try to minimize the OS differences to focus on the common aspects
    that are universally available.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python在由操作系统定义的环境中运行。Windows、macOS和大多数Linux环境之间有一些细微的差异。我们将把微控制器环境放在一边，因为定制这些环境的能力相当复杂。我们将尽量减少操作系统差异，以关注普遍可用的共同方面。
- en: 'There are several common aspects within run-time environments. We can divide
    these into two groups:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时环境中有一些常见的方面。我们可以将这些分为两组：
- en: Persistent
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 持久
- en: Aspects of the environment that change slowly.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 环境的各个方面变化缓慢。
- en: The Python run-time in use. This includes a binary application and often includes
    a number of external libraries.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正在使用的Python运行时。这包括一个二进制应用程序，通常包括许多外部库。
- en: The standard libraries available. These are accessed via the importer, and are
    generally available via the import statement. They are generally found by their
    path, relative to the Python binary.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用的标准库。这些库通过导入器访问，通常通过import语句访问。它们通常通过相对于Python二进制的路径找到。
- en: The other libraries installed as site packages. These are also accessed by the
    importer. These libraries are also found by their path, relative to the Python
    binary.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为站点包安装的其他库。这些库也被导入器访问。这些库也可以通过它们相对于Python二进制的路径找到。
- en: Libraries found by other mechanisms available in the sites package. Most notably,
    the PYTHONPATH environment variable.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过站点包中其他机制找到的库。最值得注意的是，PYTHONPATH环境变量。
- en: Transient
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 临时
- en: Aspects of the environment can change each time the Python run-time is started.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 环境的各个方面每次启动Python运行时都可能发生变化。
- en: The environment variables defined by the shell in use. These are available through
    the os module.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由当前使用的shell定义的环境变量。这些变量可以通过os模块访问。
- en: The current working directory and user information, defined by the OS. This
    is available through the os, os.path, and pathlib modules.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前工作目录和用户信息，由操作系统定义。这可以通过os、os.path和pathlib模块访问。
- en: The command line used to start Python. This is available through several attributes
    of the sys module, including sys.argv, sys.stdout, sys.stdin, and sys.stderr.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动Python时使用的命令行。这可以通过sys模块的几个属性访问，包括sys.argv、sys.stdout、sys.stdin和sys.stderr。
- en: The persistent environment is managed via OS-level commands, outside of our
    application programs. Changes to the persistent aspects of the environment are
    generally examined once when Python starts. This means an application we write
    can’t easily install a package and then use that package.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 持久环境通过操作系统级别的命令管理，在我们的应用程序程序之外。对环境持久方面的更改通常在Python启动时检查一次。这意味着我们编写的应用程序无法轻易安装一个包然后使用该包。
- en: 'The persistent environment has two viewpoints:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 持久环境有两个视角：
- en: The Actual Environment
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 实际环境
- en: ': A single site is handled by the system administrator and requires elevated
    privileges. For example, the Python run-time is often in a path owned by the root
    user and made visible through a common, system-wide value of the PATH environment
    variable.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ': 单个站点由系统管理员处理并需要提升权限。例如，Python运行时通常位于root用户拥有的路径中，并通过PATH环境变量的通用系统级值可见。'
- en: Virtual Environments
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境
- en: ': Any number of virtual environments are localized by individual users and
    require no special privileges. Multiple Python run-times and their associated
    site packages can be owned by a single user.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: ': 任何数量的虚拟环境都可以由单个用户本地化，并且不需要特殊权限。多个Python运行时及其关联的站点包可以由单个用户拥有。'
- en: Once upon a time — in the long-past olden days, when computer capabilities were
    tiny — a single actual environment was all that could be managed. Adding and changing
    the collection of installed packages required cooperation among Python users.
    An administrator with elevated privileges implemented any changes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从前有段时间——在很久以前，当计算机能力很小的日子里，一个单一的实际环境就是可以管理的全部。添加和更改已安装包的集合需要Python用户的合作。具有提升权限的管理员实施了任何更改。
- en: Now that computers are vastly more capable, each individual user can easily
    have multiple virtual environments. Indeed, we often build and test modules with
    numerous virtual environments reflecting different releases of the Python run-time.
    Each individual is able to manage their own virtual environments.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在计算机的能力大大增强，每个用户都可以轻松地拥有多个虚拟环境。实际上，我们经常使用多个虚拟环境构建和测试模块，这些虚拟环境反映了 Python 运行时的不同版本。每个用户都能够管理自己的虚拟环境。
- en: When working cooperatively, it becomes important to share the details of virtual
    environments so that multiple users can recreate a common virtual environment.
    The effort of sharing a single actual environment is shifted to each user having
    to prepare and manage their own virtual environment.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在协作工作时，共享虚拟环境的详细信息变得很重要，这样多个用户就可以重新创建一个共同的虚拟环境。将单个实际环境的共享工作转移到每个用户需要准备和管理自己的虚拟环境。
- en: 'Environment management seems to parallel Ginsberg’s Theorem and the Laws of
    Thermodynamics:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 环境管理似乎与金斯伯格定理和热力学定律相平行：
- en: The overall environment management workload is neither created nor destroyed.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整体环境管理的工作量既不会被创造也不会被毁灭。
- en: Any change to an environment requires work.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对环境的任何更改都需要工作。
- en: Nothing is free from change (unless it’s utterly isolated from all external
    considerations).
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有什么是不变的（除非它完全与所有外部因素隔离）。
- en: While most Linux distributions come with Python pre-installed, there’s no compelling
    reason to use this version of Python for any purpose. It’s generally much easier
    to install a personal version of Python and manage virtual environments with that
    personal version. Having an individual Python installation permits ready updates
    to new releases without waiting for a Linux distribution to catch up with the
    state of the art.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数 Linux 发行版都预装了 Python，但没有充分的理由要使用这个版本的 Python 来完成任何任务。通常，安装个人版本的 Python
    并使用该版本管理虚拟环境要容易得多。拥有个人 Python 安装允许用户随时更新到新版本，而无需等待 Linux 发行版赶上最新技术。
- en: 'There are two broad classes of tools involved in managing environments:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 管理环境涉及两大类工具：
- en: OS-specific tools required to install the Python binary. This varies by OS and
    can be challenging to new developers. We’ll avoid the complications involved in
    these tools and refer readers to the [https://www.python.org/downloads/](https://www.python.org/downloads/)
    page.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Python 二进制文件所需的特定于操作系统的工具。这因操作系统而异，对于新开发者来说可能具有挑战性。我们将避免涉及这些工具的复杂性，并将读者指引到
    [https://www.python.org/downloads/](https://www.python.org/downloads/) 页面。
- en: Python-based tools, like PIP, used to install Python libraries. Since these
    tools depend on Python, the commands are universal for all OSs. This chapter will
    focus on these tools.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于安装 Python 库的基于 Python 的工具，如 PIP。由于这些工具依赖于 Python，因此命令对所有操作系统都是通用的。本章将专注于这些工具。
- en: 'In this chapter, we’ll look at the following recipes for managing virtual environments:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下管理虚拟环境的配方：
- en: '[Creating environments using the built-in venv](ch020_split_000.xhtml#x1-8650001)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用内置的 venv 创建环境](ch020_split_000.xhtml#x1-8650001)'
- en: '[Installing packages with a requirements.txt file](ch020_split_000.xhtml#x1-8730002)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 requirements.txt 文件安装包](ch020_split_000.xhtml#x1-8730002)'
- en: '[Creating a pyproject.toml file](ch020_split_000.xhtml#x1-8790003)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建 pyproject.toml 文件](ch020_split_000.xhtml#x1-8790003)'
- en: '[Using pip-tools to manage the requirements.txt file](ch020_split_000.xhtml#x1-8850004)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 pip-tools 管理requirements.txt 文件](ch020_split_000.xhtml#x1-8850004)'
- en: '[Using Anaconda and the conda tool](ch020_split_001.xhtml#x1-8910005)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Anaconda 和 conda 工具](ch020_split_001.xhtml#x1-8910005)'
- en: '[Using the poetry tool](ch020_split_001.xhtml#x1-8970006)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用诗歌工具](ch020_split_001.xhtml#x1-8970006)'
- en: '[Coping with changes in dependencies](ch020_split_001.xhtml#x1-9030007)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[应对依赖关系的变化](ch020_split_001.xhtml#x1-9030007)'
- en: We’ll start with creating virtual environments using the built-in tools.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从使用内置工具创建虚拟环境开始。
- en: 16.1 Creating environments using the built-in venv
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 16.1 使用内置的 venv 创建环境
- en: Once Python is installed, creating virtual environments unique to each project
    can be done with the internal venv module.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 Python，就可以使用内部 venv 模块为每个项目创建独特的虚拟环境。
- en: 'There are two principle use cases for a virtual environment:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境有两个主要用途：
- en: Manage the Python version. We might have distinct virtual environments for Python
    3.12 and Python 3.13\. In some cases, we may need to manage multiple minor releases
    of Python 3.13.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理 Python 版本。我们可能需要为 Python 3.12 和 Python 3.13 创建不同的虚拟环境。在某些情况下，我们可能需要管理 Python
    3.13 的多个小版本。
- en: Manage the mix of site-specific packages required by our project. Rather than
    trying to update the single actual environment, we can create new virtual environments
    as new releases of packages become available.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理项目所需的特定站点包的混合。我们不必尝试更新单个实际环境，当新版本的包可用时，我们可以创建新的虚拟环境。
- en: These two use cases overlap a great deal. Each release of Python will have distinct
    versions of the standard library packages and may have distinct versions of external
    site-specific packages.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个用例有很大的重叠。Python的每个版本都将有标准库包的不同版本，并且可能有外部特定站点的不同版本。
- en: The most important part of using a virtual environment is making sure that it
    has been activated. A number of scenarios will change the internal state of the
    browser, deactivating the virtual environment. Closing a terminal window and rebooting
    the computer are two of the most common ways to deactivate an environment.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用虚拟环境最重要的部分是确保它已经被激活。许多场景会改变浏览器的内部状态，使虚拟环境失效。关闭终端窗口和重新启动计算机是使环境失效的两种最常见方式。
- en: Changing terminal windows or opening a new terminal window may start a shell
    environment in which the virtual environment is not active. This is easily remedied
    by activating the environment before starting to use it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 切换终端窗口或打开新的终端窗口可能会启动一个shell环境，其中虚拟环境未激活。在开始使用之前激活环境可以轻松解决这个问题。
- en: 16.1.1 Getting ready
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.1.1 准备工作
- en: It’s important to note that Python must be installed. Python may not be present,
    and whatever Python version is part of the OS should not be used for development
    or experimentation. For macOS and Windows, it’s common to install a pre-built
    binary. This may involve downloading a disk image and running an installer or
    downloading an installer application and running it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意Python必须安装。Python可能不存在，并且不应使用操作系统中的Python版本进行开发或实验。对于macOS和Windows，通常安装预构建的二进制文件。这可能涉及下载磁盘映像并运行安装程序或下载安装程序应用程序并运行它。
- en: For Linux, it’s common to build Python from source for the given distribution.
    An alternative is to use an administrative tool like rpm, pkg, yum, or aptitude
    to install a pre-built Python for the specific distribution.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux，通常从源代码构建特定分布的Python。另一种选择是使用像rpm、pkg、yum或aptitude这样的管理工具安装特定分布的预构建Python。
- en: Most Python releases will include the pip and venv packages. Microcontroller
    Python and WASM-based Python are often difficult to update using desktop tools;
    they’re outside the scope of this book.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Python发布版将包括pip和venv包。微控制器Python和基于WASM的Python通常难以使用桌面工具更新；它们超出了本书的范围。
- en: 16.1.2 How to do it...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.1.2 如何操作...
- en: First, we’ll look at creating a virtual environment that can be used to install
    packages and resolve imports. Once the environment has been created, we’ll look
    at activating and deactivating it. The environment must be active in order to
    properly install and use packages.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将查看创建一个虚拟环境，该环境可以用于安装包和解决导入。一旦环境创建完成，我们将查看如何激活和停用它。环境必须处于活动状态才能正确安装和使用包。
- en: It’s important to avoid putting a virtual environment under configuration control.
    Instead, the configuration details required to recreate the environment are put
    under configuration control.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 避免将虚拟环境置于配置控制之下是很重要的。相反，用于重新创建环境的配置细节被置于配置控制之下。
- en: When using tools like Git, a .gitignore file can be used to ignore any virtual
    environment details of a project. An alternative approach is to separate virtual
    environment definitions from specific project directories.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Git等工具时，可以使用.gitignore文件来忽略项目的任何虚拟环境细节。另一种方法是将与特定项目目录分开的虚拟环境定义。
- en: Create a virtual environment
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建虚拟环境
- en: First, create the project directory. For very small projects, no additional
    files are needed. For most projects, src, tests, and docs directories are often
    helpful for organizing the project code, the test code, and the documentation.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建项目目录。对于非常小的项目，不需要额外的文件。对于大多数项目，src、tests和docs目录通常有助于组织项目代码、测试代码和文档。
- en: Choose between a ”concealed” or a visible file. In Linux and macOS, files with
    names that start with . are generally not shown by most commands. Since the virtual
    environment is not a directory we’ll ever work with, it’s often simplest to use
    the name .venv.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“隐藏”文件和可见文件之间进行选择。在Linux和macOS中，以.开头的文件通常不会被大多数命令显示。由于虚拟环境不是我们将要工作的目录，通常最简单的方法是使用名称.venv。
- en: In some cases, we want the directory to be visible. Then, the venv name would
    be the best choice.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，我们希望目录可见。那么，venv 名称将是最佳选择。
- en: 'The following command will create a virtual environment:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下命令将创建虚拟环境：
- en: '[PRE0]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The virtual environment will be in the .venv directory within the project directory.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虚拟环境将位于项目目录中的 .venv 目录内。
- en: After this is done, the virtual environment must be activated. Any time a new
    terminal window is opened, the environment in that window needs to be activated.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，必须激活虚拟环境。每次打开新的终端窗口时，该窗口中的环境都需要被激活。
- en: Activate and deactivate an environment
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 激活和停用环境
- en: 'Activating a virtual environment requires an OS-specific command. The Python
    Standard Library documentation provides all of the variant commands. We’ll show
    the two most common variants:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 激活虚拟环境需要特定的操作系统命令。Python 标准库文档提供了所有变体命令。我们将展示两种最常见的变体：
- en: 'For Linux and macOS, using bash or zsh, enter the following command to activate
    a virtual environment:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Linux 和 macOS，使用 bash 或 zsh，输入以下命令以激活虚拟环境：
- en: '[PRE1]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For Windows, enter the following command to activate a virtual environment:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Windows 系统，输入以下命令以激活虚拟环境：
- en: '[PRE2]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once the virtual environment has been activated, a number of environment variables
    will change. Most notably, the PATH environment variable will include the virtual
    environment’s bin directory. This will, for example, make the deactivate command
    available. Additionally, the prompt will change to include the virtual environment’s
    name. It might look like the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦激活了虚拟环境，许多环境变量将会改变。最值得注意的是，PATH 环境变量将包括虚拟环境的 bin 目录。例如，这将使 deactivate 命令可用。此外，提示将更改以包括虚拟环境的名称。它可能看起来像以下这样：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: On the first line, the default prompt shows the directory. On the second line,
    the prompt has (.venv) as a prefix to show that the virtual environment is now
    active.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，默认提示显示目录。在第二行，提示以 (.venv) 作为前缀以显示虚拟环境现在已激活。
- en: Once the virtual environment has been activated, all further use of the pip
    command to install packages will be directed to the active environment. Any Python
    application that’s run will search the active environment to install packages.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦激活了虚拟环境，所有进一步使用 pip 命令安装包的操作都将指向活动环境。任何运行的 Python 应用程序将搜索活动环境以安装包。
- en: 'To deactivate an environment, use the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要停用环境，请使用以下命令：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The activate command created this new command as part of the virtual environment,
    so it’s universally available for all OSs.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: activate 命令作为虚拟环境的一部分创建了此新命令，因此它对所有操作系统都是通用的。
- en: 16.1.3 How it works...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.1.3 它是如何工作的...
- en: For most OSs, there are a few key environment variables that define a virtual
    environment. The PATH environment variable generally provides locations for finding
    the Python executable. In a Windows environment, this will also make the launcher,
    the py command, available.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数操作系统，有几个关键环境变量定义了虚拟环境。PATH 环境变量通常提供查找 Python 可执行文件的位置。在 Windows 环境中，这也会使启动器、py
    命令可用。
- en: The locations of the remaining Python elements are all relative to the executable.
    In particular, the standard library is an adjacent path, and this library has
    the sites package that handles all of the other details of locating installed
    packages.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余 Python 元素的位置都是相对于可执行文件的。特别是，标准库是一个相邻路径，这个库包含 sites 包，用于处理定位已安装包的所有其他细节。
- en: The details of the virtual environment are defined by three directories and
    a configuration file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境的详细信息由三个目录和一个配置文件定义。
- en: The configuration file, pyvenv.cfg, provides a few important settings. The three
    directories are bin, include, and lib. (For Windows, these names are Scripts,
    Include, and Lib). The bin directory has script files that perform activation
    of the virtual environment. Setting the PATH environment variable makes these
    scripts available. This includes the deactivate command. Additionally, the bin
    directory contains a pip executable command and a link to the proper python binary.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件 pyvenv.cfg 提供了一些重要的设置。三个目录是 bin、include 和 lib。（在 Windows 上，这些名称分别是 Scripts、Include
    和 Lib）。bin 目录包含执行虚拟环境激活的脚本文件。设置 PATH 环境变量使这些脚本可用。这包括 deactivate 命令。此外，bin 目录还包含一个
    pip 可执行命令和一个指向正确 python 二进制的链接。
- en: 16.1.4 There’s more...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.1.4 更多内容...
- en: 'There are a number of options in the venv command. Of these, two seem to be
    particularly useful:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: venv 命令有许多选项。其中，有两个似乎特别有用：
- en: The --without-pip option skips the installation of a venv-specific copy of PIP.
    It seems better to use python -m pip than to rely on the virtual environment installation.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --without-pip选项跳过了安装特定于venv的PIP副本。似乎使用python -m pip比依赖虚拟环境安装更好。
- en: The --prompt option can set a nicer environment name than .venv.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --prompt选项可以设置比.venv更友好的环境名称。
- en: 'We’ll often use a command like the following to activate an environment:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常会使用以下命令之一来激活环境：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will ensure the prompt becomes (ch17) instead of the vague and potentially
    confusing (.venv).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保提示变为(ch17)而不是模糊且可能令人困惑的(.venv)。
- en: 16.1.5 See also
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.1.5 参见
- en: Once a virtual environment is created, we can add external libraries. See [Installing
    packages with a requirements.txt file](ch020_split_000.xhtml#x1-8730002) for advice
    on managing dependencies.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦创建了虚拟环境，我们就可以添加外部库。参见[使用requirements.txt文件安装包](ch020_split_000.xhtml#x1-8730002)以获取管理依赖项的建议。
- en: 16.2 Installing packages with a requirements.txt file
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 16.2 使用requirements.txt文件安装包
- en: One of the significant strengths of Python is the vast ecosystem of packages
    available in libraries like the Python Package Index (PyPI) at [https://pypi.org](https://pypi.org).
    It’s easy to use the PIP tool to add libraries to an environment.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Python的一个显著优势是Python包索引（PyPI）等库中可用的庞大生态系统，[https://pypi.org](https://pypi.org)。使用PIP工具向环境中添加库很容易。
- en: In some cases, this is — perhaps — too easy. All of the dependencies, starting
    with the libraries on which the Python run-time is built, are in a constant state
    of flux. Each has a distinct tempo for updates. In some cases, there is limited
    cooperation among the vast number of people involved.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，这可能——也许——过于简单。所有依赖项，从构建Python运行时所需的库开始，都处于不断变化的状态。每个都有其独特的更新节奏。在某些情况下，众多参与者之间的合作有限。
- en: 'To manage the constant change, it’s important for people developing applications
    to track dependencies carefully. We suggest decomposing dependencies into three
    levels of specificity:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理不断的变化，对于开发应用程序的人来说，仔细跟踪依赖项非常重要。我们建议将依赖项分解为三个具体性级别：
- en: 'Generic, name-only dependencies: For example, an application might need Beautiful
    Soup.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用、仅名称的依赖项：例如，一个应用程序可能需要Beautiful Soup。
- en: 'Filtered: As the Beautiful Soup project evolves, there may be versions with
    known bugs, or that are missing essential features. We might want to narrow the
    dependency to omit or exclude a specific version, or require a version that is
    >= 4.0.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤：随着Beautiful Soup项目的演变，可能会有已知错误或缺少基本功能的版本。我们可能希望缩小依赖范围，省略或排除特定版本，或者要求版本为>=4.0。
- en: 'Pinned (or Locked): When it is time to build (and test) a specific virtual
    environment, it is essential to have a detailed list of the exact version numbers
    used for testing.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固定（或锁定）：当需要构建（和测试）特定虚拟环境时，拥有用于测试的确切版本号的详细列表是至关重要的。
- en: When we’re first exploring data or a problem domain or candidate solutions,
    we may download a great many packages into a development environment. As a project
    matures, the virtual environment contents will shift. In some cases, we’ll learn
    we don’t need a package; the unused packages will be ignored and should be removed.
    In other cases, the mix of packages will expand as new options are explored. Throughout
    this, the pinned version numbers may change to track acceptable versions of packages
    on which our project depends.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们最初探索数据或问题领域或候选解决方案时，我们可能会将大量包下载到开发环境中。随着项目的成熟，虚拟环境的内容将发生变化。在某些情况下，我们会发现我们不需要某个包；未使用的包将被忽略并应该被删除。在其他情况下，随着新选项的探索，包的组合将扩大。在这个过程中，固定的版本号可能会改变，以跟踪项目所依赖的包的可接受版本。
- en: 16.2.1 Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.2.1 准备工作
- en: It works out well to record generic dependencies in places like a pyproject.toml
    file. (We’ll look at this in the [Creating a pyproject.toml file](ch020_split_000.xhtml#x1-8790003)
    recipe.)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 记录通用依赖项在pyproject.toml文件等地方效果很好。（我们将在[创建pyproject.toml文件](ch020_split_000.xhtml#x1-8790003)的配方中查看这一点。）
- en: The specific, pinned dependencies can be separated into a collection of requirements
    files. There are a number of dependency use cases, leading to a collection of
    closely related files.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 特定的、固定的依赖项可以被分离成一系列的需求文件。有许多依赖项使用案例，导致一系列密切相关文件的产生。
- en: The format for a requirements file is defined as part of the PIP documentation.
    See the [Requirements File Format](https://pip.pypa.io/en/stable/reference/requirements-file-format/)
    page of [https://packaging.python.org](https://packaging.python.org).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: requirements 文件格式作为 PIP 文档的一部分定义。请参阅 [Requirements File Format](https://pip.pypa.io/en/stable/reference/requirements-file-format/)
    页面，位于 [https://packaging.python.org](https://packaging.python.org)。
- en: 16.2.2 How to do it...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.2.2 如何做...
- en: Gather the general requirements. It’s best to look at the import statements
    to discern what packages are direct dependencies. We might find that a project
    uses pydantic, beautifulsoup4, jupyterlab, matplotlot, pytest, and memray.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集一般需求。最好查看导入语句以区分直接依赖的包。我们可能会发现一个项目使用了 pydantic、beautifulsoup4、jupyterlab、matplotlib、pytest
    和 memray。
- en: Open a file named requirements.txt in the top-level directory of the project.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的顶层目录中打开名为 requirements.txt 的文件。
- en: 'Each line of the file will have a requirements specifier with four pieces of
    information:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件的每一行都将有一个包含四部分信息的 requirements 指定符：
- en: The package name. Note that typo-squatting is a prevalent problem with open
    source; be sure to find the correct, current repository for a package, not a similar-looking
    name.
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包名。请注意，打字错误是开源项目中的一个普遍问题；确保找到包的正确、当前存储库，而不是类似的名字。
- en: Any extras needed. If present, these are enclosed in [ ]. For example, rich [jupyter]
    might be used when using the rich package for text styling with Jupyter Lab.
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所需的任何额外内容。如果存在，这些内容被括号包围。例如，当使用 rich 包进行 Jupyter Lab 的文本样式时，可能会使用 rich[jupyter]。
- en: A version specifier. This has a comparison (==, >=, etc.), and a version as
    a dotted sequence of numbers. For example, pillow>=10.2.0 selects any version
    of the pillow package at or after version 10.2.0, avoiding a known vulnerability
    with version 10.1.0.
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本指定符。这有一个比较运算符（==、>= 等），以及一个由数字点序列组成的版本。例如，pillow>=10.2.0 选择任何 10.2.0 版本或更高版本的
    pillow 包，避免与 10.1.0 版本的已知漏洞。
- en: If necessary, any further environment constraints separated by a ;. For example,
    sys_platform == ’win32’ might be used to provide a platform-specific requirement.
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要，任何由分号分隔的进一步环境约束。例如，sys_platform == 'win32' 可能被用来提供特定平台的要求。
- en: While complex conditions can be created, they’re not often needed. It’s best
    to avoid writing version information unless a specific bug fix, missing feature,
    or compatibility problem surfaces.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然可以创建复杂的条件，但它们并不经常需要。最好避免编写版本信息，除非出现特定的错误修复、缺失功能或兼容性问题。
- en: The full set of rules for this file is in the [PEP 508](https://peps.python.org/pep-0508/)
    document.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该文件的完整规则集在 [PEP 508](https://peps.python.org/pep-0508/) 文档中。
- en: Version specifiers are defined in the Python Packaging Guide. See the [Version
    specifiers](https://packaging.python.org/en/latest/specifications/version-specifiers)
    page of [https://packaging.python.org](https://packaging.python.org).
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本指定符在 Python 打包指南中定义。请参阅 [版本指定符](https://packaging.python.org/en/latest/specifications/version-specifiers)
    页面，位于 [https://packaging.python.org](https://packaging.python.org)。
- en: 'For example, here is the list of dependencies:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，以下是依赖项列表：
- en: '[PRE6]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Activate the project’s virtual environment (if it’s not already activated):'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活项目的虚拟环境（如果尚未激活）：
- en: '[PRE7]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the following command to install the latest versions of the named packages:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来安装指定包的最新版本：
- en: '[PRE8]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The PIP application will find matching versions of the various packages and
    install them. Because some of these packages have complex layers of dependencies,
    the installation can be rather time-consuming the first time it’s attempted.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PIP 应用程序将找到各种包的匹配版本并将它们安装。由于一些这些包有复杂的依赖层，第一次尝试安装可能会比较耗时。
- en: This list of seven packages expands to about 111 packages in total that must
    be installed.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这七个包的总数扩展到大约 111 个必须安装的包。
- en: For many projects, this is all that’s required to build a useful environment
    definition. In many cases, this base definition needs to have more specific version
    information provided. This is a separate recipe; see [Using pip-tools to manage
    the requirements.txt file](ch020_split_000.xhtml#x1-8850004).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多项目，这已经足够构建一个有用的环境定义。在许多情况下，这个基本定义需要提供更具体的版本信息。这是一个单独的配方；请参阅 [使用 pip-tools
    管理requirements.txt 文件](ch020_split_000.xhtml#x1-8850004)。
- en: 16.2.3 How it works...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.2.3 它是如何工作的...
- en: The PIP application uses the -r option to parse a file with required packages.
    Within this file, we can have simple lists of packages, and complex rules for
    locating the proper version of a package. We can even have other -r options to
    incorporate other files of requirements. Using multiple files can help organize
    very complex projects.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: PIP 应用程序使用 -r 选项解析包含所需包的文件。在此文件中，我们可以有简单的包列表，以及用于定位包正确版本的复杂规则。我们甚至可以拥有其他 -r
    选项以合并其他要求文件。使用多个文件可以帮助组织非常复杂的项目。
- en: When we name a package PIP, it will examine the target’s metadata to locate
    packages on which it depends. These transitive dependencies must be installed
    before the target package is installed. This means an internal lattice structure
    showing all of the dependencies must be built. This can involve downloading multiple
    copies of a package, as version constraints are resolved into a single, final
    list of packages to install.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们命名一个包为 PIP 时，它将检查目标元数据以定位它所依赖的包。这些传递依赖必须在目标包安装之前安装。这意味着必须构建一个显示所有依赖项的内部晶格结构。这可能涉及下载多个包的副本，因为版本约束被解析为单个、最终的包安装列表。
- en: 'While it’s easy to use PIP to manually install a single package, this leads
    to confusion about what a project needs and what’s currently installed in the
    virtual environment. Avoiding this requires a disciplined approach of always doing
    these two things when exploring a new package:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用 PIP 手动安装单个包很容易，但这会导致对项目需要什么以及虚拟环境中当前安装了什么产生混淆。避免这种情况需要一种纪律性的方法，在探索新包时始终做以下两件事：
- en: Add the package to the requirements.txt file.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将包添加到 requirements.txt 文件中。
- en: Run python -m pip install -r requirements.txt to add packages to the current
    virtual environment.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 python -m pip install -r requirements.txt 以向当前虚拟环境添加包。
- en: 'When removing packages from the requirements.txt file, we can generally proceed
    by deleting the virtual environment and creating an entirely new one. This leads
    to the following sequence of commands being used:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当从 requirements.txt 文件中删除包时，我们通常可以通过删除虚拟环境并创建一个全新的环境来继续操作。这会导致以下命令序列被使用：
- en: '[PRE9]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Because PIP maintains a cache of downloaded files, this environment will be
    rebuilt relatively quickly. The use of requirements.txt ensures the environment
    is built in a repeatable fashion.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 PIP 维护了一个已下载文件的缓存，所以这个环境重建起来相对较快。使用 requirements.txt 确保环境以可重复的方式构建。
- en: 16.2.4 There’s more...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.2.4 更多...
- en: It’s very common to install components manually and uncover conflicts. For example,
    a colleague clones a repository and cannot run the unit test suite because the
    requirements.txt file is incomplete.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 手动安装组件并发现冲突是非常常见的。例如，一个同事克隆了一个仓库，但无法运行单元测试套件，因为 requirements.txt 文件不完整。
- en: Another case is an audit of development environments. As new people join a team,
    they may install new releases of a package named in the requirements.txt file.
    To be confident everyone has the same version, it helps to freeze the version
    information for the packages in a virtual environment.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个案例是对开发环境的审计。随着新成员加入团队，他们可能会安装 requirements.txt 文件中命名的包的新版本。为了确保每个人都使用相同的版本，冻结虚拟环境中包的版本信息很有帮助。
- en: For both use cases, the python -m pip freeze command can be used. This will
    report all of the installed packages and the versions that were used. The output
    from this is in the same format as a requirements file.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这两种用例，可以使用 python -m pip freeze 命令。这将报告所有已安装的包及其使用的版本。此输出的格式与 requirements
    文件相同。
- en: 'We can use a command like the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: These output files can be compared to locate differences and repair environments
    that are not consistent with expectations.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这些输出文件可以用来比较差异，并修复与预期不一致的环境。
- en: Additionally, the output from the pip freeze subcommand can be used to replace
    a generic requirements.txt file with a file that specifically pins each and every
    package in use. While this is very easy, it’s not terribly flexible because it
    provides specific versions. There are better ways to build a requirements.txt
    file using pip-tools. We’ll look at this in [Using pip-tools to manage the requirements.txt
    file](ch020_split_000.xhtml#x1-8850004).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，pip freeze 子命令的输出可以用来替换一个通用的 requirements.txt 文件，以一个特别固定每个正在使用的包的文件。虽然这很简单，但它并不非常灵活，因为它提供了特定版本。使用
    pip-tools 有更好的方法来构建 requirements.txt 文件。我们将在[使用 pip-tools 管理requirements.txt 文件](ch020_split_000.xhtml#x1-8850004)中查看这一点。
- en: 16.2.5 See also
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.2.5 参见
- en: See the [Creating environments using the built-in venv](ch020_split_000.xhtml#x1-8650001)
    recipe to see how to create a virtual environment.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[使用内置venv创建环境](ch020_split_000.xhtml#x1-8650001)的配方，了解如何创建虚拟环境。
- en: See the [Using pip-tools to manage the requirements.txt file](ch020_split_000.xhtml#x1-8850004)
    recipe for a way to manage dependencies.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[使用pip-tools管理requirements.txt文件](ch020_split_000.xhtml#x1-8850004)的配方，了解如何管理依赖项。
- en: 16.3 Creating a pyproject.toml file
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 16.3 创建pyproject.toml文件
- en: In addition to a virtual environment and a clear list of dependencies, a project
    also benefits from an overall summary, in the form of a pyproject.toml file.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 除了虚拟环境和清晰的依赖列表之外，项目还可以从整体总结中受益，这种总结以pyproject.toml文件的形式存在。
- en: A pyproject.toml file is required by some Python tools and is helpful to have
    in general. It provides a central summary of the technical details of the project.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: pyproject.toml文件是某些Python工具所必需的，并且通常很有帮助。它提供了项目技术细节的集中总结。
- en: With the adoption of [PEP 621](https://peps.python.org/pep-0621/), this file
    has become the expected place for metadata about a project. It replaces the older
    setup.py module.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 随着[PEP 621](https://peps.python.org/pep-0621/)的采用，此文件已成为关于项目元数据的预期位置。它取代了旧的setup.py模块。
- en: This recipe is based on the [Sample Project](https://github.com/pypa/sampleproject)
    project in the packaging authority Git repository at [https://github.com/pypa](https://github.com/pypa).
    The recipe is also based on the [Packaging Python Projects](https://packaging.python.org/en/latest/tutorials/packaging-projects/),
    page, one of the Packaging Authority tutorials. See [https://packaging.python.org](https://packaging.python.org).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方基于[Sample Project](https://github.com/pypa/sampleproject)项目，该项目位于[https://github.com/pypa](https://github.com/pypa)的打包权威Git仓库中。该配方还基于[打包Python项目](https://packaging.python.org/en/latest/tutorials/packaging-projects/)页面，这是打包权威教程之一。请参阅[https://packaging.python.org](https://packaging.python.org)。
- en: 16.3.1 Getting ready
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.3.1 准备工作
- en: 'We’ll assume the project is not a trivial single-file module but something
    larger. This means there will be a directory structure somewhat like the following:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设项目不是一个简单的单文件模块，而是一个更大的项目。这意味着将会有一个类似以下结构的目录结构：
- en: '![YLRpdcisyimttoIEyoonronoeeuCApcndcuidssrEDrsfert.uttNMo.xpplsmPSEjp.ayeorE.eyrc.domcstkpujdtayle.gectoe.tmply
    ](img/file83.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![YLRpdcisyimttoIEyoonronoeeuCApcndcuidssrEDrsfert.uttNMo.xpplsmPSEjp.ayeorE.eyrc.domcstkpujdtayle.gectoe.tmply](img/file83.png)'
- en: 'Figure 16.1: Project files'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1：项目文件
- en: We’ve shown a common structure that applies broadly to many projects. The top-level
    name, Your Project, is a name that works for your collection of projects.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经展示了一个适用于许多项目的常见结构。顶级名称“Your Project”是一个适用于您项目集合的名称。
- en: The name your_package inside the src directory is the name by which the package
    will be known when it is imported. This does not have to precisely match the overall
    project name, but it should have a clear relationship. As an example, the Beautiful
    Soup project has a PYPI entry with the name beautifulsoup4, but the imported package
    is named bs4 in your Python’s local site packages. The connection is clear.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: src目录内your_package的名称是当它被导入时包将被认识的名称。这不必与整体项目名称完全匹配，但它应该有一个清晰的关系。例如，Beautiful
    Soup项目在PYPI上有名为beautifulsoup4的条目，但在您的Python本地site packages中导入的包被命名为bs4。这种联系是清晰的。
- en: We’ve shown the README.md file with an extension that indicates it’s written
    in Markdown notation. Common alternatives are README.rst and README.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经展示了README.md文件，其扩展名表明它使用Markdown标记编写。常见的替代方案是README.rst和README。
- en: The LICENSE file can be a difficult choice. See [https://spdx.org/licenses/](https://spdx.org/licenses/)
    for a comprehensive list of open-source licenses. See [GNU License List](https://www.gnu.org/licenses/license-list.en.html)
    at [https://www.gnu.org](https://www.gnu.org) for advice on various open source
    licenses.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: LICENSE文件可能是一个困难的选择。请参阅[https://spdx.org/licenses/](https://spdx.org/licenses/)以获取开源许可证的完整列表。请参阅[GNU许可证列表](https://www.gnu.org/licenses/license-list.en.html)以获取有关各种开源许可证的建议。[https://www.gnu.org](https://www.gnu.org)。
- en: The content of the docs directory is often built using tools like Sphinx. We’ll
    address documentation in Chapter [17](ch021.xhtml#x1-91400017).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: docs目录的内容通常使用Sphinx等工具构建。我们将在第[17](ch021.xhtml#x1-91400017)章中讨论文档。
- en: 16.3.2 How to do it...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.3.2 如何操作...
- en: Make sure the README.md has a summary of how to install and use the project.
    This is subject to change as the project evolves.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保README.md文件包含有关如何安装和使用项目的总结。随着项目的演变，这些内容可能会发生变化。
- en: 'There are six essential questions: ”who?”, ”what?”, ”why?”, ”when?”, ”where?”,
    and ”how?” that can help write a short paragraph to describe the project. The
    C4 model offers additional help on how to describe software. See [C4 Model](https://c4model.com).'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有六个基本问题：“谁？”，“什么？”，“为什么？”，“何时？”，“何地？”，“如何？”这些问题可以帮助撰写简短的段落来描述项目。C4模型提供了关于如何描述软件的额外帮助。请参阅[C4模型](https://c4model.com)。
- en: Determine which build system will be used. Choices include setuptools, hatch,
    and poetry. Parts of content of the pyproject.toml file will be unique to the
    build system.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定将使用哪个构建系统。选择包括setuptools、hatch和poetry。pyproject.toml文件的内容中的一些部分将仅适用于构建系统。
- en: For this recipe, we’ll use setuptools as the build tool.
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将使用setuptools作为构建工具。
- en: 'There are numerous templates available for a pyproject.toml file. The [PYPA
    sample project](https://github.com/pypa/sampleproject/blob/main/pyproject.toml)
    example is comprehensive, and perhaps a bit daunting. There are two tables in
    the TOML that are required: [project] and [build-system]. The rest can be ignored
    when getting started.'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于pyproject.toml文件，有大量的模板可供选择。[PYPA示例项目](https://github.com/pypa/sampleproject/blob/main/pyproject.toml)示例是全面的，也许有点令人望而生畏。TOML中有两个表是必需的：[项目]和[构建系统]。在入门时可以忽略其余部分。
- en: 'Here’s a short template for the [project] table:'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是[项目]表的简短模板：
- en: '[PRE11]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first six items need to have values replaced with facts about your project.
    The last two items, readme and license, don’t often change because they’re references
    to files in the project directory.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前六项需要用有关您项目的实际情况替换。最后两项，readme和license，通常不会改变，因为它们是项目目录中文件的引用。
- en: The name must be a valid identifier for a project. They are defined by [PEP-508](https://peps.python.org/pep-0508/).
    They are names made of letters, digits, and the special characters -, _, and ..
    Interestingly, they can’t include spaces or end with a punctuation mark. ch17-recipe3
    is acceptable, but ch17_ is invalid.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称必须是项目的一个有效标识符。它们由[PEP-508](https://peps.python.org/pep-0508/)定义。它们是由字母、数字和特殊字符-、_和.组成的名称。有趣的是，它们不能包含空格或以标点符号结尾。ch17-recipe3是可以接受的，但ch17_是无效的。
- en: The dependencies must be a list of the direct requirements that must be installed
    in order for this project to work. These are the same kinds of dependency specifications
    provided in a requirements.txt file. See [Installing packages with a requirements.txt
    file](ch020_split_000.xhtml#x1-8730002) for more information.
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 依赖项必须是一系列直接需求，必须安装这些需求才能使此项目工作。这些与requirements.txt文件中提供的依赖项规范相同。有关更多信息，请参阅[使用requirements.txt文件安装包](ch020_split_000.xhtml#x1-8730002)。
- en: 'Here’s a template for the [build-system] table. This uses the small, widely
    available setuptools tool:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是[构建系统]表的模板。这个模板使用了小型、广泛可用的setuptools工具：
- en: '[PRE12]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'It can help to open this file with tomllib to confirm it’s formatted properly.
    This can be done interactively in the Python console as follows:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用tomllib打开此文件以确认其格式正确可能会有所帮助。这可以在Python控制台中交互式地完成，如下所示：
- en: '[PRE13]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If the file is invalid in some way, this will raise a tomllib.TOMLDecodeError
    exception. The exception will provide the line and column for the syntax error,
    or it will say ”at end of document” when a structure isn’t terminated properly.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果文件在某些方面无效，这将引发tomllib.TOMLDecodeError异常。异常将提供语法错误的行和列，或者当结构未正确终止时，它将说“在文档末尾”。
- en: 16.3.3 How it works...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.3.3 它是如何工作的...
- en: A number of tools make use of the pyproject.toml contents. There is a complicated
    relationship between PIP and the build tool named in the pyproject.toml file.
    For this recipe, we’re using setuptools.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 许多工具都使用了pyproject.toml的内容。PIP和pyproject.toml文件中命名的构建工具之间存在复杂的关系。对于这个配方，我们使用setuptools。
- en: 'The following diagram summarizes some of the steps involved in downloading
    and installing a library:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表总结了下载和安装库所涉及的一些步骤：
- en: '![ysPPdBwtpPp1234r5r6oitYIouhakyip....ea.ea.uePPwierggP g c g bd cd ir-InleeIieaeusrsnpldltntctiescao
    TPsshrlatocaoateedtamkdocasqwellpalklluhssugaietegreeeseslr...hohookok ](img/file84.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![ysPPdBwtpPp1234r5r6oitYIouhakyip....ea.ea.uePPwierggP g c g bd cd ir-InleeIieaeusrsnpldltntctiescao
    TPsshrlatocaoateedtamkdocasqwellpalklluhssugaietegreeeseslr...hohookok ](img/file84.png)'
- en: 'Figure 16.2: How PIP and the build tool collaborate'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.2：PIP和构建工具如何协作
- en: This summary diagram is neither an exhaustive nor definitive look at how packages
    are installed. For more information, see [PEP-517](https://peps.python.org/pep-0517).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这个总结图表既不是对包安装的详尽审查，也不是最终审查。有关更多信息，请参阅[PEP-517](https://peps.python.org/pep-0517)。
- en: 'The processing begins with the pip install command, shown with a boundary icon.
    The PIP operation proceeds through the numbered steps:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 处理从 `pip install` 命令开始，如边界图标所示。PIP 操作通过编号步骤进行：
- en: PIP starts by getting the compressed archive from a package index like PYPI.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PIP 首先从像 PYPI 这样的包索引获取压缩存档。
- en: The archive is cached on the local computer for future use.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存档被缓存在本地的计算机上以供将来使用。
- en: PIP uses the get_requires_for_build_wheel build-tool hook to gather requirements.
    The build tool gets dependency information from the pyproject.toml file and provides
    this to PIP. The PIP tool will download these additional projects. These projects
    have their own requirements. The graph of requirements is resolved to identify
    all of the required installations.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PIP 使用 `get_requires_for_build_wheel` 构建工具钩子来收集需求。构建工具从 `pyproject.toml` 文件中获取依赖信息，并将其提供给
    PIP。PIP 工具将下载这些额外的项目。这些项目有自己的需求。需求图被解析以确定所有必需的安装。
- en: In some cases, a new wheel-format file is required. In other cases, the project
    provides a wheel-formatted file. The PIP tool can use the build_wheel build-tool
    hook to combine the downloaded files into an installable form.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在某些情况下，需要一个新的 wheel 格式文件。在其他情况下，项目提供了一个 wheel 格式的文件。PIP 工具可以使用 `build_wheel`
    构建工具钩子将下载的文件组合成可安装的形式。
- en: Some distributions include the source files, and may include data files or scripts
    that aren’t trivially copied to the site-packages directory.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些发行版包括源文件，可能还包括数据文件或脚本，这些文件不是简单地复制到 site-packages 目录的。
- en: PIP then installs the wheel in the virtual environment’s appropriate site-packages
    directory.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，PIP 将 wheel 文件安装到虚拟环境的适当 site-packages 目录中。
- en: Possible build tools to build a package include setuptools, build, hatch, and
    poetry. All of these build tools can be used by PIP. They all make use of pyproject.toml.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 可能用于构建包的构建工具包括 setuptools、build、hatch 和 poetry。所有这些构建工具都可以由 PIP 使用。它们都使用了 pyproject.toml。
- en: 16.3.4 There’s more...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.3.4 更多内容...
- en: In addition to the dependencies required for the project to work, additional
    dependencies are often based on other things we may do with the project. Common
    additional use cases are running tests, developing new features, and fixing bugs.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 除了项目运行所需的依赖项外，额外的依赖项通常基于我们可能对项目进行的其他操作。常见的额外用例包括运行测试、开发新功能和修复错误。
- en: 'Tools for these additional use cases are optional dependencies. They are generally
    listed in a separate table, with sub-tables for each use case. For example, we
    might add the following table with two sub-tables to list the tools used for testing,
    and additional tools for more general development:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这些额外用例的工具是可选依赖项。它们通常列在单独的表中，每个用例有自己的子表。例如，我们可能添加以下表格及其两个子表，以列出用于测试的工具，以及更多通用开发的其他工具：
- en: '[PRE14]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These additional lists permit someone to install the test suite to confirm the
    downloaded project passes all of its test cases. They also permit someone to download
    appropriate tools for maintaining the documentation and the detailed lists of
    dependencies.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这些额外的列表允许某人安装测试套件以确认下载的项目通过了所有测试用例。它们还允许某人下载维护文档和详细依赖列表的适当工具。
- en: Note that in these examples, none of the dependencies are named with a specific,
    pinned version. This is because we’re going to use pip-tools to build a requirements.txt
    file from the information available in the pyproject.toml file. See [Using pip-tools
    to manage the requirements.txt file](ch020_split_000.xhtml#x1-8850004).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这些示例中，没有一个依赖项使用特定的、固定的版本命名。这是因为我们将使用 pip-tools 从 `pyproject.toml` 文件中可用的信息构建一个
    `requirements.txt` 文件。参见[使用 pip-tools 管理requirements.txt文件](ch020_split_000.xhtml#x1-8850004)。
- en: Tools like flit and twine are often used to upload to a repository like PYPI.
    For enterprise developers, there may be an enterprise Python repository. These
    tools make use of additional tables in the pyproject.toml file.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: flit 和 twine 等工具常用于上传到像 PYPI 这样的存储库。对于企业开发者，可能有一个企业 Python 存储库。这些工具利用 `pyproject.toml`
    文件中的额外表。
- en: The flit tool, for example, uses additional [tool.flit.sdist] and [tool.flit.external-data]
    tables to provide information required to perform an upload.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，flit 工具使用额外的 `[tool.flit.sdist]` 和 `[tool.flit.external-data]` 表来提供执行上传所需的信息。
- en: 16.3.5 See also
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.3.5 参见
- en: See [https://python-semantic-release.readthedocs.io/en/latest/](https://python-semantic-release.readthedocs.io/en/latest/)
    for the Python Semantic Release tool that can modify version names based on Git
    commit messages.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[https://python-semantic-release.readthedocs.io/en/latest/](https://python-semantic-release.readthedocs.io/en/latest/)，了解可以根据
    Git 提交消息修改版本名的 Python Semantic Release 工具。
- en: See [Using TOML for configuration files](ch017.xhtml#x1-7230002) in Chapter [13](ch017.xhtml#x1-71500013)
    for more information on TOML files.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅第[13](ch017.xhtml#x1-71500013)章中的[使用 TOML 配置文件](ch017.xhtml#x1-7230002)，以获取有关
    TOML 文件更多信息。
- en: See [Using pip-tools to manage the requirements.txt file](ch020_split_000.xhtml#x1-8850004)
    for our approach to refining the list of requirements into a line of pinned version
    numbers.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[使用 pip-tools 管理requirements.txt 文件](ch020_split_000.xhtml#x1-8850004)，了解我们将需求列表精炼成固定版本号的列表的方法。
- en: The [Hypermodern Python](https://github.com/cjolowicz/cookiecutter-hypermodern-python)
    project has a template usable with the Cookie-Cutter tool to build a directory
    structure. See [https://github.com/cjolowicz](https://github.com/cjolowicz). This
    template relies on Poetry for managing dependencies and virtual environments.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Hypermodern Python](https://github.com/cjolowicz/cookiecutter-hypermodern-python)
    项目有一个模板，可以使用 Cookie-Cutter 工具构建目录结构。请参阅[https://github.com/cjolowicz](https://github.com/cjolowicz)。此模板依赖于
    Poetry 来管理依赖和虚拟环境。'
- en: 'Chapter [17](ch021.xhtml#x1-91400017) contains the [The bare minimum: a README.rst
    file](ch021.xhtml#x1-9150001) recipe to address the README file in more depth.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第[17](ch021.xhtml#x1-91400017)章包含了[最基本：一个 README.rst 文件](ch021.xhtml#x1-9150001)的配方，以更深入地处理
    README 文件。
- en: 16.4 Using pip-tools to manage the requirements.txt file
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 16.4 使用 pip-tools 管理requirements.txt 文件
- en: 'Above, we noted that a project’s dependencies have three levels of specificity:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，一个项目的依赖有三个级别的具体性：
- en: Generic
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 通用
- en: ': Name-only dependencies'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: ': 仅名称依赖'
- en: Filtered
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤
- en: ': With a very general constraint like >= 4.0'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: ': 使用非常通用的约束如 >= 4.0'
- en: Pinned
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 固定
- en: ': With a specific version like == 4.12.2'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: ': 使用特定版本如 == 4.12.2'
- en: How do we align these levels? One easy way is with the pip-tools package. This
    package includes the pip-compile tool, which will digest requirements, resolve
    dependencies, and create a derivative requirements.txt file with pinned version
    numbers.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如何对这些级别进行对齐？一个简单的方法是使用 pip-tools 包。此包包括 pip-compile 工具，它将消化需求，解决依赖，并创建一个带有固定版本号的衍生
    requirements.txt 文件。
- en: A companion tool, pip-sync, can be used to ensure that the active virtual environment
    matches the requirements.txt file. This can be considerably faster than dropping
    and recreating a virtual environment.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 伴随工具 pip-sync 可以用来确保活动虚拟环境与 requirements.txt 文件匹配。这可以比删除和重新创建虚拟环境快得多。
- en: 16.4.1 Getting ready
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.4.1 准备工作
- en: 'PIP-tools must be downloaded and installed. Generally, this is done with the
    following terminal command:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: PIP-tools 必须下载并安装。通常，这是通过以下终端命令完成的：
- en: '[PRE15]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This assumes the virtual environment is active; in the example, it’s named ch17\.
    Using the python -m pip command ensures that we will use the pip command that
    goes with the currently active virtual environment.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设虚拟环境是激活的；在示例中，它被命名为 ch17。使用 python -m pip 命令确保我们将使用与当前激活虚拟环境关联的 pip 命令。
- en: The pip-compile tool will locate requirements in a pyproject.toml or requirements.in
    file. From this information, it builds a detailed requirements.txt file that can
    be used with pip or pip-sync to create the virtual environment.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: pip-compile 工具将在 pyproject.toml 或 requirements.in 文件中定位需求。根据这些信息，它将构建一个详细的 requirements.txt
    文件，该文件可用于 pip 或 pip-sync 来创建虚拟环境。
- en: 16.4.2 How to do it...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.4.2 如何操作...
- en: Make sure the dependencies are in the pyproject.toml file. In some cases, an
    old requirements.txt file may have been used to get started. It’s a good idea
    to confirm that the information is in the pyproject.toml file because the requirements.txt
    file will be replaced.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保依赖项在 pyproject.toml 文件中。在某些情况下，可能已经使用旧的 requirements.txt 文件开始。确认信息在 pyproject.toml
    文件中是一个好主意，因为 requirements.txt 文件将被替换。
- en: The first time you do this, it helps to delete any old requirements.txt file
    not created by pip-compile.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次这样做时，删除任何由 pip-compile 创建的旧 requirements.txt 文件可能会有所帮助。
- en: 'To build the core requirements.txt file, run the pip-compile command:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建核心 requirements.txt 文件，请运行 pip-compile 命令：
- en: '[PRE16]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will locate the dependencies in the pyproject.toml file. It will then locate
    all of the transitive requirements and build a set of requirements with conflicts
    resolved.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将在 pyproject.toml 文件中定位依赖项。然后，它将定位所有传递性依赖项，并构建一个已解决冲突的需求集。
- en: It will both write a requirements.txt file and also display this file on the
    console.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它将同时写入 requirements.txt 文件并在控制台上显示此文件。
- en: 'To build a requirements-test.txt file, run the pip-compile command with the
    --extra option:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建 requirements-test.txt 文件，请使用带有 --extra 选项的 pip-compile 命令：
- en: '[PRE17]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This creates a file with the optional dependencies from the test = [...] section
    of the [project.optional-dependencies] table.
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建一个文件，其中包含 [project.optional-dependencies] 表格中 test = [...] 部分的可选依赖项。
- en: 'To build a comprehensive requirements-dev.txt file that contains all of the
    extras, run the pip-compile command with the --all-extras option:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建一个包含所有额外内容的综合型 requirements-dev.txt 文件，请使用带有 --all-extras 选项的 pip-compile
    命令：
- en: '[PRE18]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This creates a file with all of the optional dependencies in the [project.optional-dependencies]
    table.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建一个包含 [project.optional-dependencies] 表格中所有可选依赖项的文件。
- en: When needed, use the pip-sync command to rebuild the current virtual environment
    to match changes to one of the requirements.txt files.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当需要时，使用 pip-sync 命令来重建当前虚拟环境，以匹配 requirements.txt 文件中的更改。
- en: It’s common practice to use this with the tox tool. In the commands_pre section
    of a test environment description, use pip-sync requirements.txt to make sure
    the test virtual environment is synchronized with the package versions in the
    requirements.txt file.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，与 tox 工具一起使用。在一个测试环境描述的 commands_pre 部分，使用 pip-sync requirements.txt 确保测试虚拟环境与
    requirements.txt 文件中的包版本同步。
- en: 16.4.3 How it works...
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.4.3 它是如何工作的...
- en: 'The pip-compile tool will look for information in three places:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: pip-compile 工具将在三个地方寻找信息：
- en: The pyproject.toml file.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pyproject.toml 文件。
- en: A requirements.in file, if present. This isn’t needed, since the same information
    is in the pyproject.toml file.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果存在，则包含 requirements.in 文件。这不是必需的，因为相同的信息已经在 pyproject.toml 文件中。
- en: Any previously created requirements.txt file.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何之前创建的 requirements.txt 文件。
- en: Using both the pyproject.toml and any previously created requirements.txt file
    allows the tool to properly reflect incremental changes. This means it can minimize
    the work required to analyze projects that haven’t changed much. When starting
    a new project, it’s sometimes helpful to delete the requirements.txt file entirely
    after making significant changes.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pyproject.toml 和任何之前创建的 requirements.txt 文件可以让工具正确反映增量更改。这意味着它可以最小化分析未发生太大变化的项目的所需工作量。当开始一个新项目时，在做出重大更改后，有时删除整个
    requirements.txt 文件是有帮助的。
- en: 16.4.4 There’s more...
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.4.4 更多...
- en: 'When making changes, there are two options that can help rebuild the requirements.txt
    details:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行更改时，有两个选项可以帮助重建 requirements.txt 的详细信息：
- en: The --rebuild option will clear caches and redo the analysis of dependencies.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --rebuild 选项将清除缓存并重新分析依赖项。
- en: The --upgrade some-package option will look for upgrades for the named some-package
    package only. This prevents analysis of other packages that should be left alone.
    Multiple --upgrade options can be supplied to track multiple changes.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --upgrade some-package 选项将仅查找名为 some-package 的包的升级。这防止了对其他应该保持不变的包的分析。可以提供多个
    --upgrade 选项以跟踪多个更改。
- en: These two commands let us manage incremental change, upgrade requirements.txt,
    rebuild the virtual environment, and test with new versions of packages. This
    ensures the description of the environment matches the actual environment. We
    can share the project with confidence.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个命令让我们可以管理增量更改，升级 requirements.txt，重建虚拟环境，并使用新版本的包进行测试。这确保了环境的描述与实际环境相匹配。我们可以有信心地分享项目。
- en: There are times when packages have conflicting requirements. Assume our project
    depends on project A and project T. It turns out project A also requires project
    T. Problems can arise when our project requires T >= 10.11 that’s distinct from
    the version required by the A project, for example, T < 10.9\. This can be challenging
    to resolve.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，包会有冲突的需求。假设我们的项目依赖于项目 A 和项目 T。结果证明项目 A 也需要项目 T。当我们的项目需要 T >= 10.11（与 A 项目所需的版本不同，例如，T
    < 10.9）时，可能会出现问题。这可能很难解决。
- en: We can hope our project’s limitation of T >= 10.11 is too specific; we can weaken
    the constraint and find a compatible version. In other cases, the requirements
    stated by project A might be too specific, and we need to consider making a change
    to the other project’s code. Ideally, this is a proper issue and pull request,
    but it may require forking the project to offer distinct constraints. The worst
    case requires re-engineering our project to change the nature of the dependencies
    or — perhaps — stop using project A.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以希望我们项目的限制 T >= 10.11 过于具体；我们可以放宽约束并找到一个兼容的版本。在其他情况下，项目 A 所声明的需求可能过于具体，我们需要考虑对其他项目的代码进行更改。理想情况下，这是一个适当的问题和拉取请求，但它可能需要分叉项目以提供不同的约束。最坏的情况需要重新设计我们的项目以改变依赖关系的性质，或者——也许——停止使用项目
    A。
- en: 'In some cases, there are obscure errors in pyproject.toml and the pip-compile
    tool reports an infuriatingly opaque error message:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，pyproject.toml 和 pip-compile 工具报告了令人沮丧的模糊错误信息：
- en: '[PRE19]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This is a problem with the formatting of the pyproject.toml file.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 pyproject.toml 文件格式的问题。
- en: One way to uncover the problem is to attempt to do an ”editable” installation
    of the project in the current working directory. This will use the pip install
    command with the -e . option to use the current directory as the project to install.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 揭示问题的方法之一是在当前工作目录中尝试对项目进行“可编辑”安装。这将使用带有 -e . 选项的 pip install 命令，将当前目录用作要安装的项目。
- en: 'It looks like this:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来是这样的：
- en: '[PRE20]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will report the specific error found in the pyproject.toml file. We can
    then repair the error and run pip-compile again.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这将报告在 pyproject.toml 文件中找到的具体错误。然后我们可以修复错误并再次运行 pip-compile。
- en: 16.4.5 See also
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.4.5 参见
- en: For more background on projects as a whole, see the PYPA [Sample Project](https://github.com/pypa/sampleproject).
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于项目整体的更多背景信息，请参阅 PYPA [示例项目](https://github.com/pypa/sampleproject)。
- en: For information on licenses, see [SPDX](https://spdx.org/licenses/).
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于许可证的信息，请参阅 [SPDX](https://spdx.org/licenses/)。
- en: The [Installing packages with a requirements.txt file](ch020_split_000.xhtml#x1-8730002)
    recipe describes using a file to drive PIP installations.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 requirements.txt 文件安装包](ch020_split_000.xhtml#x1-8730002) 的配方描述了使用文件来驱动
    PIP 安装。'
- en: See [PEP-517](https://peps.python.org/pep-0517) for more information on how
    a build system works.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关构建系统如何工作的更多信息，请参阅 [PEP-517](https://peps.python.org/pep-0517)。
- en: 16.5 Using Anaconda and the conda tool
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 16.5 使用 Anaconda 和 conda 工具
- en: There are some limitations on the kinds of packages the PIP tool can install.
    The most notable limitation involves projects that involve extension modules written
    in a compiled language like Rust or C. The variations among platforms — including
    hardware and OS — can make it difficult to distribute all the required variants
    of the package’s binary files.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: PIP 工具可以安装的包类型有一些限制。最明显的限制涉及涉及用编译语言（如 Rust 或 C）编写的扩展模块的项目。平台之间的差异——包括硬件和操作系统——可能会使得分发包的二进制文件的所需所有变体变得困难。
- en: In a Linux environment, where compilers like GNU CC are readily available, a
    package with an extension module can include source code. The PIP tool can use
    the compiler to build the necessary binaries.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 环境中，由于 GNU CC 等编译器很容易获得，具有扩展模块的包可以包含源代码。PIP 工具可以使用编译器构建必要的二进制文件。
- en: For macOS and Windows, additional tools are required to create binaries. Free
    compilers are not as readily available as they are in a Linux environment, presenting
    a potential problem.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 macOS 和 Windows，需要额外的工具来创建二进制文件。免费编译器不像在 Linux 环境中那样容易获得，这可能会带来潜在的问题。
- en: Conda solves the problems with binaries by making a wide selection of pre-built
    binaries available in their repository. It also makes sure a compiler is available
    on the target platform for the cases where a pre-built binary isn’t available.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: Conda 通过在其存储库中提供广泛的预构建二进制文件来解决二进制文件的问题。它还确保在预构建二进制文件不可用的情况下，目标平台上有一个可用的编译器。
- en: The conda tool is a virtual environment manager and package installer. It fulfills
    the same use cases as PIP, combined with venv and pip-tools. This includes builds
    of packages that include binaries, often used for high-performance numeric applications.
    The command-line interface for conda is the same on all platforms, permitting
    simpler, more consistent documentation.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: conda 工具是一个虚拟环境管理器和包安装程序。它满足与 PIP、venv 和 pip-tools 相同的使用案例。这包括包含二进制的包的构建，通常用于高性能数值应用。conda
    的命令行界面在所有平台上都是相同的，允许更简单、更一致的文档。
- en: The Anaconda package index is curated by the Anaconda company. Check out their
    website, [https://anaconda.com](https://anaconda.com), for prices and fees. The
    packages provided have been integrated and tested. This testing takes time, and
    the official Anaconda distribution can lag behind what’s available in PYPI. Further,
    it’s a subset of what’s available on PYPI because it tends to focus on data analytics
    and data science.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda 软件包索引由 Anaconda 公司维护。请访问他们的网站[https://anaconda.com](https://anaconda.com)，了解价格和费用。提供的软件包已经集成并经过测试。这种测试需要时间，官方
    Anaconda 发行版可能落后于 PYPI 上的可用内容。此外，它只是 PYPI 上可用内容的子集，因为它倾向于关注数据分析和数据科学。
- en: A separate package index, conda-forge ( [https://conda-forge.org](https://conda-forge.org))
    is community based. This channel contains packages that more closely mirror what’s
    in PYPI. In many cases, we’ll install packages from this channel because we want
    something new, or we want something outside the curated subset available from
    Anaconda.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 一个独立的软件包索引，conda-forge ([https://conda-forge.org](https://conda-forge.org))
    是基于社区的。这个频道包含的软件包更接近 PYPI 上的内容。在许多情况下，我们会从这个频道安装软件包，因为我们想要新的东西，或者我们想要 PYPI 上可用的精选子集之外的某些东西。
- en: 16.5.1 Getting ready
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.5.1 准备工作
- en: 'There are two ways to get the conda tool:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 获取 conda 工具有两种方式：
- en: Download and install the full Anaconda distribution. This is a large download,
    anywhere from 900 MB for Windows to over 1,000 MB for more Linux distributions.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并安装完整的 Anaconda 发行版。这是一个大文件下载，Windows 系统上从 900 MB 到更多 Linux 发行版超过 1,000 MB。
- en: Download and install miniconda and use it to install only the desired packages.
    This is a much smaller download, generally about 100 MB.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并安装 miniconda，并使用它仅安装所需的软件包。这是一个较小的下载，通常大约 100 MB。
- en: 'For the full Anaconda install, see [https://www.anaconda.com/download](https://www.anaconda.com/download).
    There are two varieties of the installer:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 对于完整的 Anaconda 安装，请参阅[https://www.anaconda.com/download](https://www.anaconda.com/download)。安装程序有两种类型：
- en: Graphical
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图形界面
- en: ': These installers use the OS interactive tools to support some configuration.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: ': 这些安装程序使用操作系统交互式工具来支持一些配置。'
- en: Command-line
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行
- en: ': These installers are sophisticated shell archives that run in a terminal
    window. They provide the same options for installation as the graphical installer.
    There’s more typing and less pointing and clicking.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: ': 这些安装程序是复杂的 shell 存档，在终端窗口中运行。它们提供与图形安装程序相同的安装选项。需要输入更多内容，点击和拖拽更少。'
- en: 'For a miniconda install, see [https://docs.conda.io/projects/miniconda/en/latest/index.html](https://docs.conda.io/projects/miniconda/en/latest/index.html).
    Each OS has slightly different kinds of installers:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 miniconda 安装，请参阅[https://docs.conda.io/projects/miniconda/en/latest/index.html](https://docs.conda.io/projects/miniconda/en/latest/index.html)。每个操作系统都有略微不同的安装程序类型：
- en: Windows
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Windows
- en: ': The installer is an executable program that uses the Windows installer.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: ': 安装程序是一个可执行程序，它使用 Windows 安装程序。'
- en: macOS
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: macOS
- en: ': There are PKG images that can be downloaded and double-clicked to use a macOS
    UI. There are also command-line images that can be executed from the terminal
    window.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: ': 有 PKG 图像可以下载并双击以使用 macOS UI。也有可以从终端窗口执行的命令行图像。'
- en: Linux
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: Linux
- en: ': These are shell-archive files that are started from a terminal window.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: ': 这些是从终端窗口启动的 shell-存档文件。'
- en: While there are a lot of choices here, we recommend using a command-line installer
    for Miniconda.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这里有很多选择，但我们推荐使用 Miniconda 的命令行安装程序。
- en: See the [Miniconda](https://docs.conda.io/projects/miniconda/en/latest/index.html)
    page for recommended shell commands to use the curl program to fetch the image
    and then perform the installation.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[Miniconda](https://docs.conda.io/projects/miniconda/en/latest/index.html)页面，了解使用
    curl 程序获取镜像并执行安装的推荐 shell 命令。
- en: Once the conda tool has been installed, it can be used to create and populate
    virtual environments. Note that the conda tool creates a base virtual environment.
    When conda is installed, the (base) environment should be shown as part of terminal
    window prompts. This serves as a visual cue that no other environment has been
    activated. It may help to exit and restart all terminal windows to be sure conda
    is working.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 conda 工具，就可以用它来创建和填充虚拟环境。请注意，conda 工具创建了一个基本虚拟环境。当 conda 安装时，(base) 环境应显示为终端窗口提示的一部分。这作为一个视觉提示，表明没有其他环境已被激活。退出并重新启动所有终端窗口以确保
    conda 正在运行可能会有所帮助。
- en: 16.5.2 How to do it...
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.5.2 如何操作...
- en: It’s essential that the conda tool is installed. See the Getting ready section
    of this recipe for advice on installing conda.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 确保安装了 conda 工具非常重要。请参阅本食谱的“准备就绪”部分，了解安装 conda 的建议。
- en: 'Use the conda create command to create a new virtual environment:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 conda create 命令创建一个新的虚拟环境：
- en: '[PRE21]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note the commands are the same on all operating systems.
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，命令在所有操作系统上都是相同的。
- en: The virtual environment’s files are kept outside the project directory. For
    macOS, there will be a ~/miniconda3/envs directory that has all of the virtual
    environment files.
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虚拟环境的文件保存在项目目录之外。对于 macOS，将有一个 ~/miniconda3/envs 目录，其中包含所有虚拟环境文件。
- en: 'Use the conda activate command to activate this new virtual environment:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 conda activate 命令激活这个新的虚拟环境：
- en: '[PRE22]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Use the conda install command to install a list of packages in the virtual
    environment. Conda has its own conflict resolver that’s separate from the one
    used by the PIP tool or pip-compile. While we can use the requirements.txt file,
    we don’t really need all of those details. It’s often easier to provide the package
    name information as shown in this command:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 conda install 命令在虚拟环境中安装一系列包。Conda 有自己的冲突解决器，与 PIP 工具或 pip-compile 使用的解决器是分开的。虽然我们可以使用
    requirements.txt 文件，但我们实际上并不需要所有这些细节。通常，提供包名信息如该命令所示会更简单：
- en: '[PRE23]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To create a shareable definition of the current virtual environment, use the
    conda env export command:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建当前虚拟环境的可共享定义，请使用 conda env export 命令：
- en: '[PRE24]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This uses the shell redirect feature to save the exported information into a
    YAML-formatted file that lists all of the requirements. This file can be used
    by conda env create to recreate this environment.
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这使用 shell 重定向功能将导出的信息保存到一个 YAML 格式的文件中，该文件列出了所有需求。此文件可以被 conda env create 使用以重新创建此环境。
- en: 16.5.3 How it works...
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.5.3 它是如何工作的...
- en: The virtual environment created by conda has the proper PATH environment variable
    set to point to a specific Python binary. The standard library packages and site-specific
    packages are located in nearby directories.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: conda 创建的虚拟环境已正确设置 PATH 环境变量，以指向特定的 Python 可执行文件。标准库包和特定于站点的包位于附近的目录中。
- en: This parallels the virtual environments created by the built-in venv module.
    It follows the rules of [PEP-405](https://peps.python.org/pep-0405/), which defines
    the rules for virtual environments.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这与内置的 venv 模块创建的虚拟环境相类似。它遵循 [PEP-405](https://peps.python.org/pep-0405/) 规则，该规则定义了虚拟环境的规则。
- en: In order to work consistently, the conda command must be visible. This means
    a base conda installation must also be named in the system PATH environment variable.
    This is a crucial step in using conda. The Windows installer has the option to
    either update the system path or to create special command windows in which the
    necessary path setting has been made. Similarly, the macOS installer requires
    an extra step to make the conda command available to the zsh shell.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持一致性工作，conda 命令必须是可见的。这意味着基础 conda 安装也必须在系统 PATH 环境变量中命名。这是使用 conda 的一个关键步骤。Windows
    安装程序有选项来更新系统路径，或者创建具有必要路径设置的专用命令窗口。同样，macOS 安装程序需要额外步骤来使 conda 命令可用于 zsh shell。
- en: The Anaconda repositories may have pre-built binaries, which can be downloaded
    and used by the conda tool. In cases where binaries aren’t available, the conda
    tool will download the source and build the binaries as needed.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda 存储库可能有预构建的二进制文件，这些二进制文件可以被 conda 工具下载和使用。在没有二进制文件的情况下，conda 工具将下载源代码并根据需要构建二进制文件。
- en: 16.5.4 There’s more...
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.5.4 更多...
- en: 'One of the most common use cases is upgrading to the latest releases of packages.
    This is done with the conda update command:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的用例之一是升级到软件包的最新版本。这是通过 conda update 命令完成的：
- en: '[PRE25]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This will look for the version of the package available in the various channels
    being searched. It will compare the available version with what’s currently installed
    in the active virtual environment.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在搜索的各种渠道中查找软件包的版本。它将比较可用的版本与当前在活动虚拟环境中安装的版本。
- en: To collaborate politely with tools like tox for testing, it helps to use the
    pip freeze command to create a requirements.txt file. By default, tox uses pip
    to build virtual environments. The PIP tool will not overwrite packages installed
    by conda, allowing them to coexist peacefully.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 为了礼貌地与 tox 等测试工具协作，使用 pip freeze 命令创建 requirements.txt 文件很有帮助。默认情况下，tox 使用 pip
    来构建虚拟环境。PIP 工具不会覆盖由 conda 安装的包，允许它们和平共存。
- en: Another choice is to use the tox-conda plug-in to allow the tox tool to use
    conda to create and manage virtual environments. See the tox-conda repository
    at [https://github.com/tox-dev/tox-conda](https://github.com/tox-dev/tox-conda).
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是使用 tox-conda 插件，允许 tox 工具使用 conda 创建和管理虚拟环境。请参阅 tox-conda 存储库 [https://github.com/tox-dev/tox-conda](https://github.com/tox-dev/tox-conda)。
- en: Not all libraries and packages are part of the Anaconda-supported, curated library.
    In many cases, we’ll need to step outside Anaconda and use the community conda-forge
    channel in addition to the Anaconda channel.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有库和包都是 Anaconda 支持和精选库的一部分。在许多情况下，我们需要超出 Anaconda 的范围，并使用社区 conda-forge 频道，除了
    Anaconda 频道之外。
- en: 'We’ll often need to use a command like the following to use the conda-forge
    channel:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常需要使用以下类似命令来使用 conda-forge 频道：
- en: '[PRE26]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We can also use pip to add packages to a conda environment. It’s rarely needed,
    but it does work nicely.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 pip 向 conda 环境添加包。这很少需要，但它确实工作得很好。
- en: 16.5.5 See also
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.5.5 参考信息
- en: See [Creating environments using the built-in venv](ch020_split_000.xhtml#x1-8650001)
    for more information on virtual environments.
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关虚拟环境的更多信息，请参阅[使用内置 venv 创建环境](ch020_split_000.xhtml#x1-8650001)。
- en: See [https://www.anaconda.com/download](https://www.anaconda.com/download) for
    the full Anaconda installation.
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关完整的 Anaconda 安装信息，请参阅 [https://www.anaconda.com/download](https://www.anaconda.com/download)。
- en: See [https://docs.conda.io/projects/miniconda/en/latest/index.html](https://docs.conda.io/projects/miniconda/en/latest/index.html)
    for the Miniconda installation.
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 Miniconda 安装信息，请参阅 [https://docs.conda.io/projects/miniconda/en/latest/index.html](https://docs.conda.io/projects/miniconda/en/latest/index.html)。
- en: 16.6 Using the poetry tool
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 16.6 使用 poetry 工具
- en: The combination of the venv, pip, and pip-tools packages allows us to create
    virtual environments and populate them with packages from the PYPI package index.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: venv、pip 和 pip-tools 包的组合使我们能够创建虚拟环境，并用来自 PYPI 包索引的包填充它们。
- en: The poetry tool is a virtual environment manager and package installer combined
    into a single tool. It fulfills the same use cases as PIP, combined with venv
    and pip-tools. It also fulfills the same use cases as conda. The CLI is the same
    on all platforms, permitting simpler, more consistent documentation for developers
    using Poetry to manage environments.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: Poetry 工具是一个将虚拟环境管理器和包安装程序结合成一个单一工具的工具。它满足了与 PIP、venv 和 pip-tools 相同的使用案例。它还满足了与
    conda 相同的使用案例。CLI 在所有平台上都是相同的，允许为使用 Poetry 管理环境的开发者提供更简单、更一致的文档。
- en: There are some minor differences in the way Poetry enables a virtual environment.
    Rather than tweaking the current shell’s environment variables, it launches a
    sub-shell. The sub-shell has the required virtual environment settings.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: Poetry 启用虚拟环境的方式有一些细微的差异。它不是调整当前 shell 的环境变量，而是启动一个子 shell。子 shell 具有所需的虚拟环境设置。
- en: 16.6.1 Getting ready
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.6.1 准备工作
- en: Note that the Poetry tool must be installed in its own virtual environment,
    separate from any project managed by Poetry. This is best done by using the Poetry
    installer. This involves OS-specific commands to download and execute the installer.
    The installer is written in Python, which makes the task somewhat more consistent
    across OSs.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Poetry 工具必须安装在其自己的虚拟环境中，与任何由 Poetry 管理的项目分开。这最好通过使用 Poetry 安装程序来完成。这涉及到特定于操作系统的命令来下载和执行安装程序。安装程序是用
    Python 编写的，这使得任务在操作系统之间的一致性有所提高。
- en: See [https://python-poetry.org/docs](https://python-poetry.org/docs) for details.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 有关详细信息，请参阅 [https://python-poetry.org/docs](https://python-poetry.org/docs)。
- en: 'There are two steps:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个步骤：
- en: Download from [https://install.python-poetry.org](https://install.python-poetry.org).
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 [https://install.python-poetry.org](https://install.python-poetry.org) 下载。
- en: Execute the downloaded Python script.
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行下载的 Python 脚本。
- en: 'The recommended commands vary slightly between operating systems:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐的命令在不同操作系统之间略有差异：
- en: 'macOS, Linux, and Windows Subsystem for Linux: The curl command is generally
    available for doing the download. This command can be used:'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS、Linux 和 Windows Subsystem for Linux：curl 命令通常可用于下载。此命令可以用于：
- en: '[PRE27]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: After this, the follow-on step will update the system PATH environment variable.
    The output from the installation will provide the location to use. These two examples
    are for macOS, where the file is in ~/.local/bin.
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之后，后续步骤将更新系统 PATH 环境变量。安装程序的输出将提供要使用的位置。这两个示例适用于 macOS，其中文件位于 ~/.local/bin。
- en: 'Edit the ~/.zshrc file to add the following line:'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编辑 ~/.zshrc 文件，添加以下行：
- en: '[PRE28]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As an alternative, it is possible to define an alias for the location of the
    poetry command. This is often ~/.local/bin/poetry.
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为替代，可以定义 poetry 命令的位置别名。这通常是 ~/.local/bin/poetry。
- en: 'Windows Powershell: The Invoke-WebRequest Powershell command performs the download.
    The Python launcher, py, runs the appropriate version of Python:'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Powershell：Invoke-WebRequest Powershell 命令执行下载。Python 启动器 py 运行适当的 Python
    版本：
- en: '[PRE29]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The script for poetry is placed in the AppData\Roaming\Python\Scripts sub-directory.
    Either add this to the PATH environment variable or use the path explicitly, for
    example: AppData\Roaming\Python\Scripts\poetry --version.'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: poetry 脚本放置在 AppData\Roaming\Python\Scripts 子目录中。可以将此目录添加到 PATH 环境变量中，或者明确使用路径，例如：AppData\Roaming\Python\Scripts\poetry
    --version。
- en: Changing the current working directory with chdir means explicitly referring
    to your home directory’s AppData sub-directory.
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 chdir 命令更改当前工作目录意味着明确地引用您的家目录的 AppData 子目录。
- en: Once the poetry tool has been installed, it can be used to create and populate
    virtual environments.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 poetry 工具，就可以用它来创建和填充虚拟环境。
- en: 16.6.2 How to do it...
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.6.2 如何做...
- en: 'Use the poetry new command to create a new project directory. This will not
    only create a virtual environment; it will also create a directory structure and
    create a pyproject.toml file:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 poetry new 命令创建一个新的项目目录。这不仅会创建虚拟环境；还会创建目录结构和创建 pyproject.toml 文件：
- en: '[PRE30]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The virtual environment’s files are kept outside the project directory. For
    macOS, there will be a ~/Library/Caches/pypoetry directory that has all of the
    virtual environment files.
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虚拟环境的文件保存在项目目录之外。对于 macOS，将有一个 ~/Library/Caches/pypoetry 目录，其中包含所有虚拟环境文件。
- en: Note that poetry tries to cooperate with other virtual environment tools. This
    means you can use a venv activate command to set the environment variables.
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，poetry 尝试与其他虚拟环境工具协作。这意味着可以使用 venv activate 命令设置环境变量。
- en: Rather than activate the environment within a shell’s environment, it’s often
    easier to start a sub-shell with the appropriate environment settings.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与在 shell 的环境中激活环境相比，通常更容易启动具有适当环境设置的子 shell。
- en: 'Use the poetry shell command to start a shell that has the virtual environment
    activated:'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 poetry shell 命令启动一个已激活虚拟环境的 shell：
- en: '[PRE31]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Use the shell’s exit command to terminate this sub-shell and return to the previous
    environment.
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 shell 的 exit 命令终止此子 shell 并返回到上一个环境。
- en: 'Use the poetry add command to add packages to the environment. This will both
    update the pyproject.toml file and install the packages:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 poetry add 命令将包添加到环境中。这将更新 pyproject.toml 文件并安装包：
- en: '[PRE32]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This also creates a poetry.lock file that defines the exact versions of each
    dependency.
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这还会创建一个 poetry.lock 文件，该文件定义了每个依赖项的确切版本。
- en: 16.6.3 How it works...
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.6.3 它是如何工作的...
- en: The virtual environment created by poetry has the proper PATH environment variable
    set to point to a specific Python binary. The standard library packages and site-specific
    packages are located in nearby directories. Poetry properly leverages the information
    in the pyproject.toml file, reducing the number of additional files required to
    define the working environment.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 由 poetry 创建的虚拟环境已正确设置 PATH 环境变量，以指向特定的 Python 可执行文件。标准库包和特定于站点的包位于附近的目录中。Poetry
    正确利用 pyproject.toml 文件中的信息，减少了定义工作环境所需的额外文件数量。
- en: In order to work consistently, the poetry command must be visible. This means
    either adding the poetry location to the system PATH environment variable or using
    an alias. This is a crucial step in using poetry.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持一致性，poetry 命令必须是可见的。这意味着要么将 poetry 位置添加到系统 PATH 环境变量中，要么使用别名。这是使用 poetry
    的关键步骤。
- en: The alternative to an alias is what is shown in the recipe, using ~/.local/bin/poetry
    explicitly. This is less than optimal, but it makes the relationship between the
    current working virtual environment and the poetry command more clear.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 别名的替代方案如配方中所示，使用 ~/.local/bin/poetry 明确指定。这并不理想，但它使当前工作虚拟环境与 poetry 命令之间的关系更加清晰。
- en: 16.6.4 There’s more...
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.6.4 更多内容...
- en: One of the most common use cases for an environment and tool like Poetry is
    upgrading to the latest releases of packages. This is done with the poetry update
    command. A specific list of packages can be provided. With no parameters, all
    packages are examined.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 环境和工具如 Poetry 的最常见用例之一是升级到软件包的最新版本。这是通过 poetry update 命令完成的。可以提供特定的包列表。如果没有参数，将检查所有包。
- en: 'Here’s an example:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE33]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This will look for the version of the pydantic package available in the various
    channels being searched and compare that version with what’s currently installed
    in the active virtual environment. This will also update the poetry.lock file
    after installing the updates.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这将搜索正在搜索的各种渠道中可用的pydantic包版本，并将其与当前在活动虚拟环境中安装的版本进行比较。此操作还将更新poetry.lock文件，以安装更新。
- en: To collaborate politely with tools like tox for testing, some additional options
    are required in the tox.ini file. One easy-to-use approach is to skip the default
    install procedure that tox uses and use poetry commands to run commands in a poetry-managed
    environment.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 为了礼貌地与tox等测试工具协作，需要在tox.ini文件中添加一些额外的选项。一种易于使用的方法是跳过tox使用的默认安装程序，并使用poetry命令在poetry管理的环境中运行命令。
- en: 'Here’s a suggestion of how to use poetry with tox:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个如何使用Poetry与tox一起使用的建议：
- en: '[PRE34]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Using poetry run means the command will be executed in the virtual environment.
    This makes it possible to use tox to define multiple environments, and rely on
    Poetry to assemble the various environments for testing purposes.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 使用poetry run意味着命令将在虚拟环境中执行。这使得使用tox定义多个环境，并依赖Poetry为测试目的组装各种环境成为可能。
- en: 16.6.5 See also
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.6.5 参考信息
- en: See [https://python-poetry.org/docs](https://python-poetry.org/docs) for details
    on Poetry.
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Poetry的详细信息，请参阅[https://python-poetry.org/docs](https://python-poetry.org/docs)。
- en: See [https://tox.wiki/en/4.15.1/](https://tox.wiki/en/4.15.1/) for details on
    Tox.
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Tox的详细信息，请参阅[https://tox.wiki/en/4.15.1/](https://tox.wiki/en/4.15.1/)。
- en: 16.7 Coping with changes in dependencies
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 16.7 应对依赖项的变化
- en: As we noted in the [Installing packages with a requirements.txt file](ch020_split_000.xhtml#x1-8730002),
    all packages on which an application is built are in a constant state of flux.
    Each project has a distinct tempo for updates. To manage the constant change,
    it’s important for people developing applications to track dependencies carefully.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[使用requirements.txt文件安装包](ch020_split_000.xhtml#x1-8730002)中提到的，构建应用程序的所有包都处于不断变化的状态。每个项目都有独特的更新节奏。为了管理这种持续的变化，对于开发应用程序的人来说，仔细跟踪依赖项非常重要。
- en: A common complaint about Python is sometimes summarized as dependency hell.
    This summarizes the work required to track and test with new dependencies, some
    of which may be in conflict. This work to manage change is essential; it’s the
    minimum required to maintain a viable product. Instead of adding features, it
    preserves functionality in a world of constant change.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Python的一个常见抱怨有时可以概括为“依赖地狱”。这总结了跟踪和测试新依赖所需的工作，其中一些可能存在冲突。管理变化的工作是至关重要的；这是维持一个可行产品的最低要求。与其添加功能，它更是在不断变化的世界中保留了功能。
- en: 'There are two common cases where upgrades turn into more than simply installing
    and testing with upgraded packages:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在两种常见情况下，升级不仅仅是安装和测试升级后的包：
- en: Changes that break our application in some way
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何以某种方式破坏我们应用程序的更改
- en: Incompatibilities among packages our application depends on
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应用程序依赖的包之间的不兼容性
- en: In the first case, our software fails to work. In the second case, we can’t
    even build a virtual environment in which to test. This second case is often the
    most frustrating.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，我们的软件无法正常工作。在第二种情况下，我们甚至无法构建一个虚拟环境来测试。第二种情况通常是最令人沮丧的。
- en: 16.7.1 Getting ready
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.7.1 准备工作
- en: 'We’ll consider a hypothetical project, the applepie application. This application
    has several dependencies:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将考虑一个假设的项目，即applepie应用程序。此应用程序有多个依赖项：
- en: A single module from the apple project’s package, named apple.granny_smith
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自apple项目包的单个模块，名为apple.granny_smith
- en: Some classes from the pie_filling project
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自pie_filling项目的几个类
- en: Several classes from the pastry_crust project
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自pastry_crust项目的几个类
- en: An oven implementation
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个烤箱实现
- en: 'The general dependencies are named in the pyproject.toml file as a list of
    projects. We can imagine the detailed requirements.txt (or poetry.lock) file looks
    like the following:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 通用依赖项在pyproject.toml文件中以项目列表的形式命名。我们可以想象详细的requirements.txt（或poetry.lock）文件看起来如下：
- en: '[PRE35]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Using this framework for an application, we’ll look at what changes we need
    to make when we see changes in the dependencies. One change will remove needed
    functionality; the other change will be an incompatibility between releases of
    the pie_filling and pastry_crust projects. We’ll need to make appropriate changes
    in our application based on these changes occurring in the larger Python ecosystem.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个框架为应用程序，我们将查看当我们看到依赖关系发生变化时需要做出哪些更改。一个更改将移除所需的功能；另一个更改将是pie_filling和pastry_crust项目发布之间的不兼容性。我们需要根据这些更改在更大的Python生态系统中的发生，对我们的应用程序做出适当的更改。
- en: 16.7.2 How to do it...
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.7.2 如何做到...
- en: 'We’ll decompose this into two sub-recipes: one for a dependency that leads
    to a test failure, and the second for dependencies that are incompatible. We need
    to adjust our project so it continues to work in the presence of ongoing change.'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将将其分解为两个子配方：一个用于导致测试失败的依赖关系，另一个用于不兼容的依赖关系。我们需要调整我们的项目，使其在持续变化的情况下继续工作。
- en: A change caused a test failure
  id: totrans-384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个更改导致了测试失败
- en: 'To continue our example, the oven tool has had a significant change to the
    API. The new release, oven version 1.0, doesn’t have the same interface version
    0.9.1a had. The consequence is a failure in our code:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 继续我们的例子，烤箱工具对API进行了重大更改。新版本，烤箱1.0版本，没有与版本0.9.1a相同的接口。结果是我们的代码出现故障：
- en: Clarify what the failure is and what caused it. Ask ”why?” enough times to identify
    the root cause. There are several aspects of the failure that may need to be explored.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 明确故障是什么以及是什么原因导致的。问“为什么？”足够多次以确定根本原因。故障的几个方面可能需要进一步探索。
- en: 'Be sure to understand the top layer of the problem: how the failure manifested
    itself. Ideally, a unit test failed. Another good avenue for detection is to use
    a tool like mypy or ruff to identify a potential for failure. Less helpful is
    an acceptance or system test that failed even though unit tests all passed. Perhaps
    the worst case is failure after deployment, in the hands of a customer.'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一定要理解问题的顶层：故障是如何表现出来的。理想情况下，是一个单元测试失败。另一个好的检测途径是使用像mypy或ruff这样的工具来识别潜在的失败。不太有用的是，即使单元测试都通过了，接受或系统测试也失败了。最糟糕的情况可能是部署后，在客户手中的失败。
- en: Also, be sure to understand what changed. It’s common to introduce a number
    of version upgrades all at once. It may be necessary to reverse those changes
    and then upgrade each required package one at a time to identify the source of
    the failure.
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，务必理解发生了什么变化。一次性引入多个版本升级是很常见的。可能需要撤销这些更改，然后逐个升级每个所需的包，以确定故障的原因。
- en: Failures after a release often lead to problem reports in issue-tracking tools.
    Update any issue-tracking software with the root cause analysis.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布后的故障通常会导致问题跟踪工具中的问题报告。更新任何问题跟踪软件，包括根本原因分析。
- en: Failures during testing should also lead to an internal report of a problem.
    The repair may require extensive rework, and it is generally helpful to track
    the reason for the rework.
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试过程中的故障也应导致问题报告的内部报告。修复可能需要大量返工，并且通常有助于跟踪返工的原因。
- en: 'Choose among the four kinds of fixes that are possible:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下四种可能的修复方法中选择：
- en: Your code needs to be fixed. The change to oven version 1.0 is a clear improvement.
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的代码需要修复。烤箱版本1.0的更改是一个明显的改进。
- en: The change to oven introduced a bug, and you need to report the problem to the
    maintainers of oven or fix their code.
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 烤箱的更改引入了一个错误，您需要向烤箱的维护者报告问题或修复他们的代码。
- en: Revise the dependencies to pin oven version 0.9.1a in pyproject.toml to prevent
    upgrades.
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改依赖关系，在pyproject.toml中将烤箱版本锁定为0.9.1a以防止升级。
- en: Looking closely at the oven project, it may be clear it is no longer a good
    fit with this project, and it needs to be replaced.
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仔细观察烤箱项目，可能很清楚它已经不再适合这个项目，需要被替换。
- en: These are not exclusive choices. In some cases, multiple paths will be followed.
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些不是互斥的选择。在某些情况下，可能会遵循多个路径。
- en: There may be a pervasive change to our project required to accommodate the changes
    to oven 1.0\. This may be an opportunity to refactor our code to more carefully
    isolate this dependency to simplify making changes in the future.
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了适应烤箱1.0的更改，我们可能需要对项目进行一些根本性的更改。这可能是一个机会，可以重构我们的代码，以更仔细地隔离这个依赖关系，从而简化未来的更改。
- en: 'When a project seems to have a bug, we have two choices: we can report the
    issue and hope it’s fixed, or we can clone the repository, make a fix, and submit
    a pull request to pull our changes into the next release. The benefit of open
    source is the reduced cost to begin a project. Ongoing maintenance, however, is
    an eternal feature of a landscape that thrives on innovation. While we benefit
    from other’s work in open source, we also need to contribute by proposing fixes.'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当一个项目似乎有错误时，我们有两个选择：我们可以报告问题并希望它得到修复，或者我们可以克隆仓库，进行修复，并向下一个版本提交拉取请求以合并我们的更改。开源的好处是开始项目的成本降低。然而，持续维护是创新繁荣的景观的永恒特征。虽然我们从开源中受益于他人的工作，但我们也需要通过提出修复来做出贡献。
- en: In some cases, we will pin a specific version while we decide what to do about
    a dependency. We may pin an old version while choosing among alternatives and
    rewriting our project to replace the old oven with the new convection_cooker.
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，当我们决定如何处理依赖项时，我们会固定一个特定版本。我们可能在选择替代方案并重写我们的项目以用新的convection_cooker替换旧的烤箱时，固定旧版本。
- en: In effect, code that breaks due to an upgrade is a bug fix. It may be a bug
    fix for a project we require. More often, the fix is applied in our project to
    make use of a change in other projects. Managing changes to our application is
    the price we pay for innovation in the broad ecosystem of Python packages.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，由于升级而损坏的代码是一个错误修复。这可能是我们所需项目的错误修复。更常见的是，修复在我们的项目中应用，以利用其他项目中发生的变化。管理我们应用程序的更改是我们为Python包广泛生态系统中的创新所付出的代价。
- en: A changed dependency is incompatible with another dependency
  id: totrans-401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变的依赖项与另一个依赖项不兼容
- en: In this case, the pastry_crust version 4.3 uses sugar version 2.0\. Sadly, the
    pie_filling version 3.1.4 uses the older sugar version 1.8.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，pastry_crust版本4.3使用糖版本2.0。遗憾的是，pie_filling版本3.1.4使用较旧的糖版本1.8。
- en: Identify the root cause of the conflict, to the extent possible. Trying to discern
    why the pie_filling project team has not upgraded to sugar version 2.0 may be
    very difficult. A common observation is a lack of activity in the pie_filling
    project; but without knowing the principal contributors well, it’s difficult to
    ask why they aren’t making changes.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在尽可能的范围内确定冲突的根本原因。试图弄清楚为什么pie_filling项目团队没有升级到糖版本2.0可能非常困难。一个常见的观察结果是pie_filling项目缺乏活动；但如果不了解主要贡献者，很难询问他们为什么不做更改。
- en: Be perfectly clear in identifying what changed. It’s common to introduce a number
    of version upgrades all at once. It may be necessary to reverse those changes
    and then upgrade each required package one at a time to identify the source of
    the failure. These conflicts are not in a direct dependency, but in an indirect
    dependency.
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在确定更改内容时，要非常清楚。一次性引入多个版本升级是很常见的。可能需要撤销这些更改，然后逐个升级所需的每个包，以确定失败的原因。这些冲突不是直接依赖项，而是在间接依赖项中。
- en: We value the idea of encapsulation and abstraction right up until we observe
    conflicting requirements that are encapsulated by a project. When these conflicts
    appear, the obscurity of encapsulation becomes a burden.
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们重视封装和抽象的想法，直到我们观察到由项目封装的冲突需求。当这些冲突出现时，封装的神秘性变成了负担。
- en: Document the conflict as an issue in issue-tracking software. Be sure to provide
    links to the conflicting projects and their issue trackers. The resolution may
    involve extended side-bar conversations with other projects to understand the
    nature of the conflicting requirements. It helps to keep notes on these conversations.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在问题跟踪软件中将冲突记录为一个问题。务必提供指向冲突项目的链接及其问题跟踪器。解决方案可能涉及与其他项目进行扩展的侧边栏对话，以了解冲突需求的本性。记录这些对话的内容会有所帮助。
- en: 'Choose among the four kinds of fixes that are possible:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在可能的四种修复方法中选择：
- en: It’s unlikely any small change to your code will resolve the problem. The change
    required is replacing the pie_filling requirement with something else and making
    sweeping changes.
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 很可能你代码中的任何小更改都无法解决该问题。所需更改是替换pie_filling需求，并做出全面更改。
- en: It’s possible that changes to the pie_filling project may correct the problem.
    This may involve a great deal of work on someone else’s project.
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有可能通过更改pie_filling项目来纠正问题。这可能涉及在其他人的项目上做大量工作。
- en: Revise the dependencies to pin pastry_crust version 4.2 in pyproject.toml to
    prevent upgrades.
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改依赖关系，在pyproject.toml中将pastry_crust版本4.2固定，以防止升级。
- en: Looking closely at the pie_filling project, it may be clear it is no longer
    a good fit for this project and needs to be replaced. This is a sweeping change
    to the project.
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仔细观察 pie_filling 项目，可能很清楚它不再适合这个项目，需要被替换。这是对项目的重大改变。
- en: These choices are not exclusive. In some cases, multiple paths will be followed.
    Perhaps the most popular choice is pinning the version that prevents the compatibility
    problem.
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些选择不是互斥的。在某些情况下，将遵循多个路径。可能最受欢迎的选择是锁定防止兼容性问题的版本。
- en: 'The rework to the pie_filling project can involve two activities: we can report
    the issue and hope they fix it, or we can clone their repository, make a fix,
    and submit a pull request to pull our changes into their next release. This kind
    of ongoing maintenance of open source software created by others is an eternal
    feature of a landscape that thrives on innovation.'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 pie_filling 项目的重构可能涉及两个活动：我们可以报告问题并希望他们修复它，或者我们可以克隆他们的仓库，进行修复，并向他们提交一个拉取请求以将我们的更改合并到他们的下一个版本中。这种对他人创建的开源软件的持续维护是创新繁荣的景观的一个永恒特征。
- en: 'Incompatibilities among the required supporting projects is an architectural
    problem. It’s rarely solved quickly. An important lesson learned from this kind
    of problem is that all architectural decisions need to be revocable: any choice
    needs to have an alternative, and the software needs to be written so that either
    alternative can be exercised.'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 所需支持项目之间的不兼容性是一个架构问题。它很少能迅速解决。从这个类型的问题中学到的一个重要教训是，所有架构决策都需要可撤销：任何选择都需要有替代方案，软件需要编写得使得任一替代方案都可以实施。
- en: 16.7.3 How it works...
  id: totrans-415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.7.3 它是如何工作的...
- en: 'The essential step here is doing root cause analysis: asking ”why?” something
    fails to pass tests when upgrades are attempted.'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键步骤是进行根本原因分析：当尝试升级时，询问“为什么”某些内容未能通过测试。
- en: For example, our applepie project’s dependencies may pin oven version 0.9.1a
    because version 1.0 introduced a failure. The pinned version may be appropriate
    for a few hours until the oven project fixes a bug, or it could remain in place
    for a much longer period of time. Our project may go through several releases
    before the problem with oven 1.0 is finally fixed by release 1.1.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们的 applepie 项目的依赖项可能将 oven 版本锁定为 0.9.1a，因为 1.0 版本引入了故障。锁定版本可能适用于几个小时，直到
    oven 项目修复了错误，或者它可能保持原样更长时间。我们的项目可能需要经过几个版本，直到 oven 1.0 的问题最终在 1.1 版本中修复。
- en: It requires some discipline to review the requirements and make sure any pinned
    versions still need to be pinned.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一定的自律来审查需求并确保任何锁定版本仍然需要被锁定。
- en: 16.7.4 There’s more...
  id: totrans-419
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.7.4 更多...
- en: One source of frustration with dependency hell is the lack of time budgeted
    for finding and fixing dependency problems. In an enterprise context, this is
    an acute problem because project sponsors and managers are often narrowly focused
    on budget and the time required to implement new features. Time to resolve dependency
    issues is rarely part of the budget because these problems are so difficult to
    anticipate.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖地狱的挫折来源之一是缺乏为寻找和修复依赖问题预留的时间预算。在企业环境中，这是一个严重的问题，因为项目发起人和经理通常只关注预算和实现新功能所需的时间。解决依赖问题的时间很少包含在预算中，因为这些问题是如此难以预测。
- en: A terrible situation can arise where fixing dependency problems is counted against
    a team’s velocity metric. This can happen when there are no ”story points” assigned
    to upgrading the dependencies and rerunning the test suite. In this case, the
    organization has created a perverse incentive to pin versions forever, without
    following the progress of other projects.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会出现一种糟糕的情况，即修复依赖问题被计入团队的速度指标。当没有分配“故事点”用于升级依赖项和重新运行测试套件时，这种情况可能发生。在这种情况下，组织已经创造了一种扭曲的激励，即永远锁定版本，而不关注其他项目的进展。
- en: It’s imperative to have a periodic task to review each and every requirement.
    This task involves seeing what changes have been made and what may have been deprecated
    since the last review. This may lead to modifying project version constraints.
    For example, we may be able to relax the requirement from a strict oven==0.9.1a
    to a more lenient oven!=1.0.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 定期审查每个和每个需求是强制性的。这项任务包括查看自上次审查以来发生了哪些变化，以及可能已经弃用的内容。这可能导致修改项目版本约束。例如，我们可能能够将要求从严格的
    oven==0.9.1a 放宽到更宽容的 oven!=1.0。
- en: A periodic task to review all requirements is an essential ingredient in managing
    change and innovation.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 定期审查所有需求是管理变革和创新的一个基本要素。
- en: Look for updates as well as deprecations.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找更新以及弃用信息。
- en: Allocate time to run tests with new versions and report the bugs discovered.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 为运行新版本的测试分配时间，并报告发现的错误。
- en: 16.7.5 See also
  id: totrans-426
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.7.5 参考以下内容
- en: See [Using pip-tools to manage the requirements.txt file](ch020_split_000.xhtml#x1-8850004)
    for a very good dependency resolver.
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[使用pip-tools管理requirements.txt文件](ch020_split_000.xhtml#x1-8850004)，了解一个非常好的依赖项解析器。
- en: See [Using Anaconda and the conda tool](ch020_split_001.xhtml#x1-8910005) for
    an approach to using the conda repository of curated, compatible software releases.
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[使用Anaconda和conda工具](ch020_split_001.xhtml#x1-8910005)，了解如何使用经过精心挑选、兼容的软件发布版本的conda仓库。
- en: '16.8'
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16.8'
- en: Join our community Discord space
  id: totrans-430
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的社区Discord空间
- en: 'Join our Python Discord workspace to discuss and find out more about the book:
    [https://packt.link/dHrHU](https://packt.link/dHrHU)'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的Python Discord工作空间，讨论并了解更多关于本书的信息：[https://packt.link/dHrHU](https://packt.link/dHrHU)
- en: '![PIC](img/file1.png)'
  id: totrans-432
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/file1.png)'
