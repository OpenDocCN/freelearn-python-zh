- en: Chapter 5. The Django Admin Site
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 Django管理站点
- en: 'For most modern websites, an **admin interface** is an essential part of the
    infrastructure. This is a web-based interface, limited to trusted site administrators,
    that enables the adding, editing and deletion of site content. Some common examples:
    the interface you use to post to your blog, the backend site managers use to moderate
    user-generated comments, the tool your clients use to update the press releases
    on the website you built for them.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数现代网站，**管理界面**是基础设施的一个重要部分。这是一个基于web的界面，仅限于受信任的站点管理员，它使得可以添加、编辑和删除站点内容。一些常见的例子：你用来发布博客的界面，后端站点管理员用来审核用户生成的评论的界面，你的客户用来更新你为他们建立的网站上的新闻稿的工具。
- en: 'There''s a problem with admin interfaces, though: it''s boring to build them.
    web development is fun when you''re developing public-facing functionality, but
    building admin interfaces is always the same. You have to authenticate users,
    display and handle forms, validate input, and so on. It''s boring, and it''s repetitive.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，管理界面存在一个问题：构建它们很无聊。当你开发面向公众的功能时，web开发是很有趣的，但构建管理界面总是一样的。你必须验证用户、显示和处理表单、验证输入等等。这很无聊，也很重复。
- en: So what's Django's approach to these boring, repetitive tasks? It does it all
    for you.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 那么Django对于这些无聊、重复的任务的处理方式是什么呢？它会为你处理一切。
- en: 'With Django, building an admin interface is a solved problem. In this chapter
    we will be exploring Django''s automatic admin interface: checking out how it
    provides a convenient interface to our models, and some of the other useful things
    we can do with it.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Django，构建管理界面是一个已解决的问题。在本章中，我们将探索Django的自动管理界面：看看它如何为我们的模型提供方便的界面，以及我们可以用它做的一些其他有用的事情。
- en: Using the admin site
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用管理站点
- en: When you ran `django-admin startproject mysite` in [Chapter 1](ch01.xhtml "Chapter 1. Introduction
    to Django and Getting Started"), *Introduction to Django and Getting Started*,
    Django created and configured the default admin site for you. All that you need
    to do is create an admin user (superuser) and then you can log into the admin
    site.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在[第1章](ch01.xhtml "第1章 Django简介和入门")中运行了`django-admin startproject mysite`时，Django为你创建并配置了默认的管理站点。你所需要做的就是创建一个管理用户（超级用户），然后你就可以登录管理站点了。
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using Visual Studio, you don't need to complete this next step at
    the command line, you can just add a superuser from the **Project** menu tab within
    Visual Studio.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Visual Studio，你不需要在命令行中完成下一步，你可以直接在Visual Studio的**项目**菜单选项卡中添加一个超级用户。
- en: 'To create an admin user, run the following command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个管理用户，运行以下命令：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Enter your desired username and press enter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 输入你想要的用户名并按回车。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will then be prompted for your desired email address:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你将被提示输入你想要的电子邮件地址：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The final step is to enter your password. You will be asked to enter your password
    twice, the second time as a confirmation of the first.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是输入密码。你将被要求两次输入密码，第二次是对第一次的确认。
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Start the development server
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动开发服务器
- en: 'In Django 1.8, the django admin site is activated by default. Let''s start
    the development server and explore it. Recall from previous chapters that you
    start the development server like so:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django 1.8中，默认情况下激活了django管理站点。让我们启动开发服务器并进行探索。回想一下之前的章节，你可以这样启动开发服务器：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, open a web browser and go to `/admin/` on your local domain-for example,
    `http://127.0.0.1:8000/admin/`. You should see the admin's login screen (*Figure
    5.1*).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开一个网页浏览器，转到本地域的`/admin/`，例如，`http://127.0.0.1:8000/admin/`。你应该会看到管理员的登录界面（*图5.1*）。
- en: Since translation is turned on by default, the login screen may be displayed
    in your own language, depending on your browser's settings and on whether Django
    has a translation for this language.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于默认情况下已经启用了翻译，登录界面可能会显示为你自己的语言，这取决于你的浏览器设置以及Django是否为这种语言提供了翻译。
- en: Enter the admin site
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进入管理站点
- en: Now, try logging in with the superuser account you created in the previous step.
    You should see the **Django administrator** index page (*Figure 5.2*).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试使用你在上一步中创建的超级用户账户登录。你应该会看到**Django管理员**首页（*图5.2*）。
- en: 'You should see two types of editable content: groups and users. They are provided
    by `django.contrib.auth`, the authentication framework shipped by Django. The
    admin site is designed to be used by nontechnical users, and as such it should
    be pretty self-explanatory. Nevertheless, we''ll give you a quick walkthrough
    of the basic features.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到两种可编辑的内容：组和用户。它们由`django.contrib.auth`提供，这是Django提供的身份验证框架。管理站点旨在供非技术用户使用，因此它应该相当容易理解。尽管如此，我们还是会快速介绍一下基本功能。
- en: '![Enter the admin site](img/image_05_001.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![进入管理站点](img/image_05_001.jpg)'
- en: 'Figure 5.1: **Django administrator** login screen'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1：**Django管理员**登录界面
- en: '![Enter the admin site](img/image_05_002.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![进入管理站点](img/image_05_002.jpg)'
- en: 'Figure 5.2: **Django administrator** home page'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2：**Django管理员**首页
- en: Each type of data in the Django admin site has a change list and an edit form.
    Change lists show you all the available objects in the database, and edit forms
    let you add, change or delete particular records in your database. Click the **Change**
    link in the **Users** row to load the change list page for users (*Figure 5.3*).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Django管理站点中的每种数据都有一个更改列表和一个编辑表单。更改列表会显示数据库中所有可用的对象，而编辑表单则允许你添加、更改或删除数据库中的特定记录。点击**用户**行中的**更改**链接，加载用户的更改列表页面（*图5.3*）。
- en: '![Enter the admin site](img/image_05_003.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![进入管理站点](img/image_05_003.jpg)'
- en: 'Figure 5.3: The user change list page'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3：用户更改列表页面
- en: This page displays all users in the database; you can think of it as a prettied-up
    web version of a `SELECT * FROM auth_user;` SQL query. If you're following along
    with our ongoing example, you'll only see one user here, assuming you've added
    only one, but once you have more users, you'll probably find the filtering, sorting
    and searching options useful.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面显示了数据库中的所有用户；您可以将其视为`SELECT * FROM auth_user;` SQL查询的网页版本。如果您正在跟随我们的示例，假设您只看到一个用户，那么一旦您有了更多的用户，您可能会发现过滤、排序和搜索选项很有用。
- en: Filtering options are at right, sorting is available by clicking a column header,
    and the search box at the top lets you search by username. Click the username
    of the user you created, and you'll see the edit form for that user (*Figure 5.4*).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤选项在右侧，点击列标题可进行排序，顶部的搜索框可让您按用户名搜索。点击您创建的用户的用户名，您将看到该用户的编辑表单（*图5.4*）。
- en: This page lets you change the attributes of the user, like the first/last names
    and various permissions. Note that to change a user's password, you should click
    **change password form** under the password field rather than editing the hashed
    code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面允许您更改用户的属性，比如名字和各种权限。请注意，要更改用户的密码，您应该点击密码字段下的**更改密码表单**，而不是编辑哈希代码。
- en: Another thing to note here is that fields of different types get different widgets-for
    example, date/time fields have calendar controls, Boolean fields have checkboxes,
    character fields have simple text input fields.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要注意的是，不同类型的字段会得到不同的小部件-例如，日期/时间字段有日历控件，布尔字段有复选框，字符字段有简单的文本输入字段。
- en: '![Enter the admin site](img/image_05_004.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![进入管理站点](img/image_05_004.jpg)'
- en: 'Figure 5.4: The user edit form'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4：用户编辑表单
- en: You can delete a record by clicking the delete button at the bottom left of
    its edit form. That'll take you to a confirmation page, which, in some cases,
    will display any dependent objects that will be deleted, too. (For example, if
    you delete a publisher, any book with that publisher will be deleted, too!)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在其编辑表单的左下角点击删除按钮来删除记录。这将带您到一个确认页面，在某些情况下，它将显示将被删除的任何相关对象（例如，如果您删除一个出版商，那么任何与该出版商有关的书籍也将被删除！）
- en: You can add a record by clicking **Add** in the appropriate column of the admin
    home page. This will give you an empty version of the edit page, ready for you
    to fill out.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在管理主页的适当列中点击**添加**来添加记录。这将为您提供一个空白版本的编辑页面，准备让您填写。
- en: You'll also notice that the admin interface also handles input validation for
    you. Try leaving a required field blank or putting an invalid date into a date
    field, and you'll see those errors when you try to save, as shown in *Figure 5.5*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到，管理界面还为您处理输入验证。尝试将必填字段留空或在日期字段中输入无效日期，当您尝试保存时，您将看到这些错误，就像*图5.5*中显示的那样。
- en: When you edit an existing object, you'll notice a History link in the upper-right
    corner of the window. Every change made through the admin interface is logged,
    and you can examine this log by clicking the History link (see *Figure 5.6*).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当您编辑现有对象时，您会注意到窗口右上角有一个“历史”链接。通过管理界面进行的每一次更改都会被记录下来，您可以通过单击“历史”链接来查看这个日志（见*图5.6*）。
- en: '![Enter the admin site](img/image_05_005.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![进入管理站点](img/image_05_005.jpg)'
- en: 'Figure 5.5: An edit form displaying errors'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5：显示错误的编辑表单
- en: '![Enter the admin site](img/image_05_006.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![进入管理站点](img/image_05_006.jpg)'
- en: 'Figure 5.6: An object history page'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6：对象历史页面
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**How the Admin Site Works**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**管理站点的工作原理**'
- en: Behind the scenes, how does the admin site work? It's pretty straightforward.
    When Django loads at server startup, it runs the `admin.autodiscover()` function.
    In earlier versions of Django, you used to call this function from `urls.py`,
    but now Django runs it automatically. This function iterates over your `INSTALLED_APPS`
    setting and looks for a file called `admin.py` in each installed app. If an `admin.py`
    exists in a given app, it executes the code in that file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，管理站点是如何工作的？这相当简单。当Django在服务器启动时加载时，它会运行`admin.autodiscover()`函数。在Django的早期版本中，您需要从`urls.py`中调用这个函数，但现在Django会自动运行它。这个函数会遍历您的`INSTALLED_APPS`设置，并在每个已安装的应用程序中查找名为`admin.py`的文件。如果给定的应用程序中存在`admin.py`，它将执行该文件中的代码。
- en: In the `admin.py` in our `books` app, each call to `admin.site.register()` simply
    registers the given model with the admin. The admin site will only display an
    edit/change interface for models that have been explicitly registered. The app
    `django.contrib.auth` includes its own `admin.py`, which is why Users and Groups
    showed up automatically in the admin. Other `django.contrib` apps, such as `django.contrib.redirects`,
    also add themselves to the admin, as do many third-party Django applications you
    might download from the web.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`books`应用程序的`admin.py`中，每次调用`admin.site.register()`都会简单地向管理站点注册给定的模型。管理站点只会为已经明确注册的模型显示编辑/更改界面。应用程序`django.contrib.auth`包括自己的`admin.py`，这就是为什么用户和组自动显示在管理中的原因。其他`django.contrib`应用程序，比如`django.contrib.redirects`，也会将自己添加到管理中，许多您从网上下载的第三方Django应用程序也会这样做。
- en: Beyond that, the Django admin site is just a Django application, with its own
    models, templates, views, and URLpatterns. You add it to your application by hooking
    it into your URLconf, just as you hook in your own views. You can inspect its
    templates, views and URLpatterns by poking around in `django/contrib/admin` in
    your copy of the Django codebase-but don't be tempted to change anything directly
    in there, as there are plenty of hooks for you to customize the way the admin
    site works.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，Django管理站点只是一个Django应用程序，有自己的模型、模板、视图和URLpatterns。您可以通过将其连接到您的URLconf来将其添加到您的应用程序中，就像您连接自己的视图一样。您可以在Django代码库的`django/contrib/admin`中查看其模板、视图和URLpatterns，但不要尝试直接更改其中的任何内容，因为有很多钩子可以让您自定义管理站点的工作方式。
- en: If you do decide to poke around the Django admin application, keep in mind it
    does some rather complicated things in reading metadata about models, so it would
    probably take a good amount of time to read and understand the code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定在Django管理应用程序中进行探索，请记住，它在读取有关模型的元数据时会执行一些相当复杂的操作，因此可能需要大量时间来阅读和理解代码。
- en: Adding your models to the admin site
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的模型添加到管理站点
- en: 'There''s one crucial part we haven''t done yet. Let''s add our own models to
    the admin site, so we can add, change and delete objects in our custom database
    tables using this nice interface. We''ll continue the `books` example from [Chapter
    4](ch04.xhtml "Chapter 4. Models"), *Models*, where we defined three models: Publisher,
    Author, and Book. Within the `books` directory (`mysite/books`), `startapp` should
    have created a file called `admin.py`, if not, simply create one yourself and
    type in the following lines of code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个至关重要的部分我们还没有做。让我们将我们自己的模型添加到管理站点，这样我们就可以使用这个不错的界面向我们的自定义数据库表中添加、更改和删除对象。我们将继续[第4章](ch04.xhtml
    "第4章. 模型") *模型*中的`books`示例，我们在其中定义了三个模型：出版商、作者和书籍。在`books`目录（`mysite/books`）中，如果`startapp`没有创建一个名为`admin.py`的文件，那么您可以自己创建一个，并输入以下代码：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code tells the Django admin site to offer an interface for each of these
    models. Once you've done this, go to your admin home page in your web browser
    (`http://127.0.0.1:8000/admin/`), and you should see a **Books** section with
    links for Authors, Books, and Publishers. (You might have to stop and start the
    development server for the changes to take effect.) You now have a fully functional
    admin interface for each of those three models. That was easy!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉Django管理站点为每个模型提供界面。完成后，转到您的网页浏览器中的管理主页（`http://127.0.0.1:8000/admin/`），您应该会看到一个**Books**部分，其中包含有关作者、书籍和出版商的链接。（您可能需要停止并重新启动开发服务器以使更改生效。）现在，您已经为这三个模型中的每一个拥有了一个完全功能的管理界面。这很容易！
- en: Take some time to add and change records, to populate your database with some
    data. If you followed [Chapter 4](ch04.xhtml "Chapter 4. Models"), *Models*, examples
    of creating `Publisher` objects (and you didn't delete them), you'll already see
    those records on the publisher change list page.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 花一些时间添加和更改记录，用一些数据填充您的数据库。如果您遵循[第4章](ch04.xhtml "第4章. 模型") *模型*，创建`Publisher`对象的示例（并且您没有删除它们），您已经可以在出版商更改列表页面上看到这些记录了。
- en: 'One feature worth mentioning here is the admin site''s handling of foreign
    keys and many-to-many relationships, both of which appear in the `Book` model.
    As a reminder, here''s what the `Book` model looks like:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里值得一提的一个功能是管理站点对外键和多对多关系的处理，这两者都出现在`Book`模型中。作为提醒，这是`Book`模型的样子：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: On the Django admin site's **Add book** page (`http://127.0.0.1:8000/admin/books/book/add/`),
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django管理站点的**添加书籍**页面（`http://127.0.0.1:8000/admin/books/book/add/`）
- en: the publisher (a `ForeignKey`) is represented by a select box, and the authors
    field (a `ManyToManyField`) is represented by a multiple-select box. Both fields
    sit next to a green plus sign icon that lets you add related records of that type.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 出版商（`ForeignKey`）由一个下拉框表示，作者字段（`ManyToManyField`）由一个多选框表示。这两个字段旁边有一个绿色加号图标，让您可以添加相关类型的记录。
- en: For example, if you click the green plus sign next to the **Publisher** field,
    you'll get a pop-up window that lets you add a publisher. After you successfully
    create the publisher in the pop-up, the **Add book** form will be updated with
    the newly created publisher. Slick.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您点击**出版商**字段旁边的绿色加号，您将会得到一个弹出窗口，让您可以添加一个出版商。在弹出窗口中成功创建出版商后，**添加书籍**表单将会更新，显示新创建的出版商。很棒。
- en: Making fields optional
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使字段变为可选
- en: After you play around with the admin site for a while, you'll probably notice
    a limitation-the edit forms require every field to be filled out, whereas in many
    cases you'd want certain fields to be optional. Let's say, for example, that we
    want our `Author` model's `email` field to be optional-that is, a blank string
    should be allowed. In the real world, you might not have an e-mail address on
    file for every author.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理站点玩一段时间后，您可能会注意到一个限制-编辑表单要求填写每个字段，而在许多情况下，您可能希望某些字段是可选的。例如，我们希望`Author`模型的`email`字段是可选的-也就是说，允许空字符串。在现实世界中，您可能并不为每个作者都有电子邮件地址。
- en: 'To specify that the `email` field is optional, edit the `Author` model (which,
    as you''ll recall from [Chapter 4](ch04.xhtml "Chapter 4. Models"), *Models*,
    lives in `mysite/books/models.py`). Simply add `blank=True` to the `email` field,
    like so:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定`email`字段是可选的，请编辑`Author`模型（正如您从[第4章](ch04.xhtml "第4章. 模型") *模型*中记得的那样，它位于`mysite/books/models.py`中）。只需向`email`字段添加`blank=True`，如下所示：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This tells Django that a blank value is indeed allowed for author's e-mail addresses.
    By default, all fields have `blank=False`, which means blank values are not allowed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉Django空值确实允许作者的电子邮件地址。默认情况下，所有字段都具有`blank=False`，这意味着不允许空值。
- en: There's something interesting happening here. Until now, with the exception
    of the `__str__()` method, our models have served as definitions of our database
    tables-Pythonic expressions of SQL `CREATE TABLE` statements, essentially. In
    adding `blank=True`, we have begun expanding our model beyond a simple definition
    of what the database table looks like.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了一些有趣的事情。到目前为止，除了`__str__()`方法之外，我们的模型一直作为数据库表的定义-基本上是SQL `CREATE TABLE`语句的Python表达式。通过添加`blank=True`，我们已经开始扩展我们的模型，超出了对数据库表的简单定义。
- en: Now, our model class is starting to become a richer collection of knowledge
    about what `Author` objects are and what they can do. Not only is the `email`
    field represented by a `VARCHAR` column in the database; it's also an optional
    field in contexts such as the Django admin site.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的模型类开始成为关于`Author`对象是什么以及它们能做什么的更丰富的知识集合。`email`字段不仅在数据库中表示为`VARCHAR`列；在诸如Django管理站点之类的上下文中，它也是一个可选字段。
- en: Once you've added that `blank=True`, reload the **Add author** edit form (`http://127.0.0.1:8000/admin/books/author/add/`),
    and you'll notice the field's label-**Email**-is no longer bolded. This signifies
    it's not a required field. You can now add authors without needing to provide
    e-mail addresses; you won't get the loud red **This field is required** message
    anymore, if the field is submitted empty.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了`blank=True`，重新加载**添加作者**编辑表单（`http://127.0.0.1:8000/admin/books/author/add/`），您会注意到字段的标签-**电子邮件**-不再是粗体。这表示它不是必填字段。现在您可以添加作者而无需提供电子邮件地址；如果字段提交为空，您将不再收到响亮的红色**此字段是必填的**消息。
- en: Making date and numeric fields optional
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使日期和数字字段变为可选
- en: A common gotcha related to `blank=True` has to do with date and numeric fields,
    but it requires a fair amount of background explanation. SQL has its own way of
    specifying blank values-a special value called `NULL`. `NULL` could mean "unknown",
    or "invalid", or some other application-specific meaning. In SQL, a value of `NULL`
    is different than an empty string, just as the special Python object `None` is
    different than an empty Python string (`""`).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 与`blank=True`相关的一个常见陷阱与日期和数字字段有关，但它需要相当多的背景解释。SQL有自己指定空值的方式-一个称为`NULL`的特殊值。`NULL`可能意味着“未知”、“无效”或其他一些特定于应用程序的含义。在SQL中，`NULL`的值与空字符串不同，就像特殊的Python对象`None`与空的Python字符串（`""`）不同。
- en: 'This means it''s possible for a particular character field (for example a `VARCHAR`
    column) to contain both `NULL` values and empty string values. This can cause
    unwanted ambiguity and confusion: Why does this record have a `NULL` but this
    other one has an empty string? Is there a difference, or was the data just entered
    inconsistently? and: How do I get all the records that have a blank value-should
    I look for both `NULL` records and empty strings, or do I only select the ones
    with empty strings?'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着特定字符字段（例如`VARCHAR`列）可以包含`NULL`值和空字符串值。这可能会导致不必要的歧义和混淆：为什么这条记录有一个`NULL`，而另一条记录有一个空字符串？有区别吗，还是数据只是不一致地输入了？以及：我如何获取所有具有空值的记录-我应该查找`NULL`记录和空字符串，还是只选择具有空字符串的记录？
- en: 'To help avoid such ambiguity, Django''s automatically generated `CREATE TABLE`
    statements (which were covered in [Chapter 4](ch04.xhtml "Chapter 4. Models"),
    *Models*) add an explicit `NOT NULL` to each column definition. For example, here''s
    the generated statement for our `Author` model, from [Chapter 4](ch04.xhtml "Chapter 4. Models"),
    *Models*:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种歧义，Django自动生成的`CREATE TABLE`语句（在[第4章](ch04.xhtml "第4章。模型")中介绍过，*模型*）为每个列定义添加了显式的`NOT
    NULL`。例如，这是我们的`Author`模型的生成语句，来自[第4章](ch04.xhtml "第4章。模型")，*模型*：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In most cases, this default behavior is optimal for your application and will
    save you from data-inconsistency headaches. And it works nicely with the rest
    of Django, such as the Django admin site, which inserts an empty string (not a
    `NULL` value) when you leave a character field blank.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，这种默认行为对于您的应用程序来说是最佳的，并且会避免数据不一致的问题。它与Django的其余部分很好地配合，比如Django管理站点，在您留空字符字段时会插入一个空字符串（而不是`NULL`值）。
- en: But there's an exception with database column types that do not accept empty
    strings as valid values-such as dates, times, and numbers. If you try to insert
    an empty string into a date or integer column, you'll likely get a database error,
    depending on which database you're using. (PostgreSQL, which is strict, will raise
    an exception here; MySQL might accept it or might not, depending on the version
    you're using, the time of day and the phase of the moon.)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，对于不接受空字符串作为有效值的数据库列类型，例如日期、时间和数字，有一个例外。如果您尝试将空字符串插入日期或整数列，根据您使用的数据库，您可能会收到数据库错误（PostgreSQL是严格的，在这里会引发异常；MySQL可能会接受它，也可能不会，这取决于您使用的版本、时间和月相）。
- en: 'In this case, `NULL` is the only way to specify an empty value. In Django models,
    you can specify that `NULL` is allowed by adding `null=True` to a field. So that''s
    a long way of saying this: if you want to allow blank values in a date field (for
    example `DateField`, `TimeField`, `DateTimeField`) or numeric field (for example
    `IntegerField`, `DecimalField`, `FloatField`), you''ll need to use both `null=True`
    and `blank=True`.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`NULL`是指定空值的唯一方法。在Django模型中，您可以通过向字段添加`null=True`来指定允许`NULL`。这就是说：如果您想在日期字段（例如`DateField`、`TimeField`、`DateTimeField`）或数字字段（例如`IntegerField`、`DecimalField`、`FloatField`）中允许空值，您将需要同时使用`null=True`和`blank=True`。
- en: 'For sake of example, let''s change our `Book` model to allow a blank `publication_date`.
    Here''s the revised code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，让我们将我们的`Book`模型更改为允许空白的`publication_date`。以下是修改后的代码：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adding `null=True` is more complicated than adding `blank=True`, because `null=True`
    changes the semantics of the database-that is, it changes the `CREATE TABLE` statement
    to remove the `NOT NULL` from the `publication_date` field. To complete this change,
    we'll need to update the database. For a number of reasons, Django does not attempt
    to automate changes to database schemas, so it's your own responsibility to execute
    the `python manage.py migrate` command whenever you make such a change to a model.
    Bringing this back to the admin site, now the **Add book** edit form should allow
    for empty publication date values.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`null=True`比添加`blank=True`更复杂，因为`null=True`会改变数据库的语义-也就是说，它会从`publication_date`字段的`CREATE
    TABLE`语句中删除`NOT NULL`。要完成此更改，我们需要更新数据库。出于许多原因，Django不尝试自动更改数据库模式，因此您需要在对模型进行此类更改时执行`python
    manage.py migrate`命令。回到管理站点，现在**添加书籍**编辑表单应该允许空的出版日期值。
- en: Customizing field labels
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义字段标签
- en: 'On the admin site''s edit forms, each field''s label is generated from its
    model field name. The algorithm is simple: Django just replaces underscores with
    spaces and capitalizes the first character, so, for example, the `Book` model''s
    `publication_date` field has the label **Publication date**.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理站点的编辑表单上，每个字段的标签都是从其模型字段名称生成的。算法很简单：Django只是用空格替换下划线，并将第一个字符大写，因此，例如，`Book`模型的`publication_date`字段的标签是**出版日期**。
- en: 'However, field names don''t always lend themselves to nice admin field labels,
    so in some cases you might want to customize a label. You can do this by specifying
    `verbose_name` in the appropriate model field. For example, here''s how we can
    change the label of the `Author.email` field to **e-mail**, with a hyphen:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，字段名称并不总是适合作为管理员字段标签，因此在某些情况下，您可能希望自定义标签。您可以通过在适当的模型字段中指定`verbose_name`来实现这一点。例如，这是我们如何将`Author.email`字段的标签更改为**e-mail**，并加上连字符：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Make that change and reload the server, and you should see the field's new label
    on the author edit form. Note that you shouldn't capitalize the first letter of
    a `verbose_name` unless it should always be capitalized (for example `"USA state"`).
    Django will automatically capitalize it when it needs to, and it will use the
    exact `verbose_name` value in other places that don't require capitalization.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 进行这些更改并重新加载服务器，您应该在作者编辑表单上看到字段的新标签。请注意，除非始终应该大写（例如`"USA state"`），否则不要大写`verbose_name`的第一个字母。Django将在需要时自动将其大写，并且在不需要大写的其他地方使用确切的`verbose_name`值。
- en: Custom model admin classes
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义模型管理员类
- en: The changes we've made so far-`blank=True`, `null=True` and `verbose_name`-are
    really model-level changes, not admin-level changes. That is, these changes are
    fundamentally a part of the model and just so happen to be used by the admin site;
    there's nothing admin-specific about them.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止我们所做的更改-`blank=True`，`null=True`和`verbose_name`-实际上是模型级别的更改，而不是管理员级别的更改。也就是说，这些更改基本上是模型的一部分，只是碰巧被管理员站点使用；它们与管理员无关。
- en: Beyond these, the Django admin site offers a wealth of options that let you
    customize how the admin site works for a particular model. Such options live in
    **ModelAdmin classes,** which are classes that contain configuration for a specific
    model in a specific admin site instance.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，Django管理员站点提供了丰富的选项，让您可以自定义管理员站点如何为特定模型工作。这些选项存在于**ModelAdmin类**中，这些类包含了特定模型在特定管理员站点实例中的配置。
- en: Customizing change lists
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义更改列表
- en: 'Let''s dive into admin customization by specifying the fields that are displayed
    on the change list for our `Author` model. By default, the change list displays
    the result of `__str__()` for each object. In [Chapter 4](ch04.xhtml "Chapter 4. Models"),
    *Models*, we defined the `__str__()` method for `Author` objects to display the
    first name and last name together:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过指定在我们的`Author`模型的更改列表上显示的字段来深入研究管理员自定义。默认情况下，更改列表显示每个对象的`__str__()`的结果。在[第4章](ch04.xhtml
    "第4章。模型")*模型*中，我们为`Author`对象定义了`__str__()`方法，以显示名字和姓氏：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As a result, the change list for `Author` objects displays each other's first
    name and last name together, as you can see in *Figure 5.7*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，`Author`对象的更改列表显示了每个人的名字和姓氏，就像*图5.7*中所示的那样。
- en: '![Customizing change lists](img/image_05_007.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![自定义更改列表](img/image_05_007.jpg)'
- en: 'Figure 5.7: The author change list page'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7：作者更改列表页面
- en: 'We can improve on this default behavior by adding a few other fields to the
    change list display. It''d be handy, for example, to see each author''s e-mail
    address in this list, and it''d be nice to be able to sort by first and last name.
    To make this happen, we''ll define a `ModelAdmin` class for the `Author` model.
    This class is the key to customizing the admin, and one of the most basic things
    it lets you do is specify the list of fields to display on change list pages.
    Edit `admin.py` to make these changes:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向更改列表显示添加一些其他字段来改进这种默认行为。例如，在此列表中看到每个作者的电子邮件地址会很方便，而且能够按名字和姓氏排序也很好。为了实现这一点，我们将为`Author`模型定义一个`ModelAdmin`类。这个类是自定义管理员的关键，它让您可以做的最基本的事情之一就是指定要在更改列表页面上显示的字段列表。编辑`admin.py`以进行这些更改：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here''s what we''ve done:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的是：
- en: We created the class `AuthorAdmin`. This class, which subclasses `django.contrib.admin.ModelAdmin`,
    holds custom configuration for a specific admin model. We've only specified one
    customization-`list_display`, which is set to a tuple of field names to display
    on the change list page. These field names must exist in the model, of course.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了`AuthorAdmin`类。这个类是`django.contrib.admin.ModelAdmin`的子类，保存了特定管理员模型的自定义配置。我们只指定了一个自定义选项-`list_display`，它设置为要在更改列表页面上显示的字段名称的元组。当然，这些字段名称必须存在于模型中。
- en: 'We altered the `admin.site.register()` call to add `AuthorAdmin` after `Author`.
    You can read this as: Register the `Author` model with the `AuthorAdmin` options.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们修改了`admin.site.register()`调用，将`AuthorAdmin`添加到`Author`之后。您可以这样理解：使用`AuthorAdmin`选项注册`Author`模型。
- en: The `admin.site.register()` function takes a `ModelAdmin` subclass as an optional
    second argument. If you don't specify a second argument (as is the case for `Publisher`
    and `Book`), Django will use the default admin options for that model.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin.site.register()`函数接受`ModelAdmin`子类作为可选的第二个参数。如果不指定第二个参数（就像`Publisher`和`Book`的情况一样），Django将使用该模型的默认管理员选项。'
- en: With that tweak made, reload the author change list page, and you'll see it's
    now displaying three columns-the first name, last name and e-mail address. In
    addition, each of those columns is sortable by clicking on the column header.
    (See *Figure 5.8*.)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 进行了这些调整后，重新加载作者更改列表页面，您会看到现在显示了三列-名字、姓氏和电子邮件地址。此外，每列都可以通过单击列标题进行排序。（见*图5.8*。）
- en: '![Customizing change lists](img/image_05_008.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![自定义更改列表](img/image_05_008.jpg)'
- en: 'Figure 5.8: The author change list page after `list_display` added'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8：添加`list_display`后的作者更改列表页面
- en: 'Next, let''s add a simple search bar. Add `search_fields` to the `AuthorAdmin`,
    like so:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加一个简单的搜索栏。像这样在`AuthorAdmin`中添加`search_fields`：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Reload the page in your browser, and you should see a search bar at the top.
    (See *Figure 5.9*.) We've just told the admin change list page to include a search
    bar that searches against the `first_name` and `last_name` fields. As a user might
    expect, this is case-insensitive and searches both fields, so searching for the
    string `bar` would find both an author with the first name Barney and an author
    with the last name Hobarson.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中重新加载页面，您应该会看到顶部有一个搜索栏（见 *图5.9*）。我们刚刚告诉管理员更改列表页面包括一个搜索栏，可以搜索 `first_name`
    和 `last_name` 字段。正如用户所期望的那样，这是不区分大小写的，并且搜索两个字段，因此搜索字符串 `bar` 将找到名为Barney的作者和姓为Hobarson的作者。
- en: '![Customizing change lists](img/image_05_009.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![自定义更改列表](img/image_05_009.jpg)'
- en: 'Figure 5.9: The author change list page after `search_fields` added'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9：`search_fields` 添加后的作者更改列表页面
- en: 'Next, let''s add some date filters to our `Book` model''s change list page:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在我们的 `Book` 模型的更改列表页面上添加一些日期过滤器：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, because we're dealing with a different set of options, we created a separate
    `ModelAdmin` class-`BookAdmin`. First, we defined a `list_display` just to make
    the change list look a bit nicer. Then, we used `list_filter`, which is set to
    a tuple of fields to use to create filters along the right side of the change
    list page. For date fields, Django provides shortcuts to filter the list to **Today**,
    **Past 7 days**, **This month**, and **This year**-shortcuts that Django's developers
    have found hit the common cases for filtering by date. *Figure 5.10* shows what
    that looks like.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，因为我们正在处理不同的选项集，我们创建了一个单独的 `ModelAdmin` 类-`BookAdmin`。首先，我们定义了一个 `list_display`，只是为了让更改列表看起来更好一些。然后，我们使用了
    `list_filter`，它设置为一个字段元组，用于在更改列表页面的右侧创建过滤器。对于日期字段，Django 提供了快捷方式来过滤列表，包括**今天**、**过去7天**、**本月**和**今年**-这些是Django开发人员发现的常见日期过滤情况的快捷方式。*图5.10*
    显示了它的样子。
- en: '![Customizing change lists](img/image_05_010.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![自定义更改列表](img/image_05_010.jpg)'
- en: 'Figure 5.10: The book change list page after `list_filter`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10：`list_filter` 后的书籍更改列表页面
- en: '`list_filter` also works on fields of other types, not just `DateField`. (Try
    it with `BooleanField` and `ForeignKey` fields, for example.) The filters show
    up as long as there are at least two values to choose from. Another way to offer
    date filters is to use the `date_hierarchy` admin option, like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_filter` 也适用于其他类型的字段，不仅仅是 `DateField`。（例如，尝试使用 `BooleanField` 和 `ForeignKey`
    字段。）只要有至少两个可选择的值，过滤器就会显示出来。另一种提供日期过滤器的方法是使用 `date_hierarchy` 管理选项，就像这样：'
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With this in place, the change list page gets a date drill-down navigation bar
    at the top of the list, as shown in *Figure 5.11*. It starts with a list of available
    years, then drills down into months and individual days.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个设置，更改列表页面顶部会出现一个日期钻取导航栏，如 *图5.11* 所示。它从可用年份列表开始，然后进入月份和具体日期。
- en: '![Customizing change lists](img/image_05_011.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![自定义更改列表](img/image_05_011.jpg)'
- en: 'Figure 5.11: The book change list page after date_hierarchy'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11：`date_hierarchy` 后的书籍更改列表页面
- en: Note that `date_hierarchy` takes a string, not a tuple, because only one date
    field can be used to make the hierarchy. Finally, let's change the default ordering
    so that books on the change list page are always ordered descending by their publication
    date. By default, the change list orders objects according to their model's `ordering`
    within `class Meta` (which we covered in [Chapter 4](ch04.xhtml "Chapter 4. Models"),
    *Models*)-but you haven't specified this `ordering` value, then the ordering is
    undefined.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`date_hierarchy` 接受一个字符串，而不是元组，因为只能使用一个日期字段来创建层次结构。最后，让我们更改默认排序，使得更改列表页面上的书籍总是按照它们的出版日期降序排序。默认情况下，更改列表根据其模型的
    `class Meta` 中的 `ordering` 对象进行排序（我们在[第4章](ch04.xhtml "第4章. 模型")中介绍过，*模型*）-但如果您没有指定这个
    `ordering` 值，那么排序是未定义的。
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This admin `ordering` option works exactly as the `ordering` in model's `class
    Meta`, except that it only uses the first field name in the list. Just pass a
    list or tuple of field names, and add a minus sign to a field to use descending
    sort order. Reload the book change list to see this in action. Note that the **Publication
    date** header now includes a small arrow that indicates which way the records
    are sorted. (See *Figure 5.12*.)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个管理员 `ordering` 选项与模型的 `class Meta` 中的 `ordering` 完全相同，只是它只使用列表中的第一个字段名。只需传递一个字段名的列表或元组，并在字段前加上减号以使用降序排序。重新加载书籍更改列表，以查看它的效果。请注意，**出版日期**
    标头现在包含一个小箭头，指示记录的排序方式（见 *图5.12*）。
- en: '![Customizing change lists](img/image_05_012.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![自定义更改列表](img/image_05_012.jpg)'
- en: 'Figure 5.12: The book change list page after ordering'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.12：排序后的书籍更改列表页面
- en: We've covered the main change list options here. Using these options, you can
    make a very powerful, production-ready data-editing interface with only a few
    lines of code.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里介绍了主要的更改列表选项。使用这些选项，您可以只用几行代码就可以创建一个非常强大的、适用于生产的数据编辑界面。
- en: Customizing edit forms
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义编辑表单
- en: 'Just as the change list can be customized, edit forms can be customized in
    many ways. First, let''s customize the way fields are ordered. By default, the
    order of fields in an edit form corresponds to the order they''re defined in the
    model. We can change that using the `fields` option in our `ModelAdmin` subclass:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 就像更改列表可以自定义一样，编辑表单也可以以多种方式自定义。首先，让我们自定义字段的排序方式。默认情况下，编辑表单中字段的顺序与模型中定义的顺序相对应。我们可以使用我们的
    `ModelAdmin` 子类中的 `fields` 选项来更改这一点：
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: After this change, the edit form for books will use the given ordering for fields.
    It's slightly more natural to have the authors after the book title. Of course,
    the field order should depend on your data-entry workflow. Every form is different.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个更改之后，书籍的编辑表单将使用给定的字段排序。将作者放在书名后面会更自然一些。当然，字段顺序应该取决于您的数据输入工作流程。每个表单都是不同的。
- en: Another useful thing the `fields` option lets you do is to exclude certain fields
    from being edited entirely. Just leave out the field(s) you want to exclude. You
    might use this if your admin users are only trusted to edit a certain segment
    of your data, or if some of your fields are changed by some outside, automated
    process.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`fields`选项让你可以做的另一件有用的事情是完全排除某些字段的编辑。只需省略你想要排除的字段。如果你的管理员用户只被信任编辑数据的某个部分，或者你的某些字段是由外部自动化流程改变的，你可能会用到这个功能。'
- en: 'For example, in our book database, we could hide the `publication_date` field
    from being editable:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们的书籍数据库中，我们可以隐藏`publication_date`字段，使其不可编辑：
- en: '[PRE18]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As a result, the edit form for books doesn't offer a way to specify the publication
    date. This could be useful, say, if you're an editor who prefers that his authors
    not push back publication dates. (This is purely a hypothetical example, of course.)
    When a user uses this incomplete form to add a new book, Django will simply set
    the `publication_date` to `None`-so make sure that field has `null=True`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，书籍的编辑表单没有提供指定出版日期的方法。这可能很有用，比如，如果你是一个编辑，你希望作者不要推迟出版日期。（当然，这只是一个假设的例子。）当用户使用这个不完整的表单添加新书时，Django将简单地将`publication_date`设置为`None`-所以确保该字段具有`null=True`。
- en: Another commonly used edit-form customization has to do with many-to-many fields.
    As we've seen on the edit form for books, the admin site represents each `ManyToManyField`
    as a multiple-select boxes, which is the most logical HTML input widget to use-but
    multiple-select boxes can be difficult to use. If you want to select multiple
    items, you have to hold down the control key, or command on a Mac, to do so.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常用的编辑表单定制与多对多字段有关。正如我们在书籍的编辑表单上看到的，管理员站点将每个`ManyToManyField`表示为多选框，这是最合乎逻辑的HTML输入小部件使用方式，但多选框可能难以使用。如果你想选择多个项目，你必须按住控制键，或者在Mac上按住命令键。
- en: The admin site helpfully inserts a bit of text that explains this, but it still
    gets unwieldy when your field contains hundreds of options. The admin site's solution
    is `filter_horizontal`. Let's add that to `BookAdmin` and see what it does.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员站点贴心地插入了一些解释这一点的文本，但是当你的字段包含数百个选项时，它仍然变得笨拙。管理员站点的解决方案是`filter_horizontal`。让我们将其添加到`BookAdmin`中，看看它的作用。
- en: '[PRE19]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: (If you're following along, note that we've also removed the `fields` option
    to display all the fields in the edit form.) Reload the edit form for books, and
    you'll see that the **Authors** section now uses a fancy JavaScript filter interface
    that lets you search through the options dynamically and move specific authors
    from **Available authors** to the **Chosen authors** box, and vice versa.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: （如果你在跟着做，注意我们也已经移除了`fields`选项来显示编辑表单中的所有字段。）重新加载书籍的编辑表单，你会看到**作者**部分现在使用了一个花哨的JavaScript过滤界面，让你可以动态搜索选项并将特定作者从**可用作者**移动到**已选作者**框中，反之亦然。
- en: '![Customizing edit forms](img/image_05_013.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![自定义编辑表单](img/image_05_013.jpg)'
- en: 'Figure 5.13: The book edit form after adding filter_horizontal'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.13：添加filter_horizontal后的书籍编辑表单
- en: I'd highly recommend using `filter_horizontal` for any `ManyToManyField` that
    has more than ten items. It's far easier to use than a simple multiple-select
    widget. Also, note you can use `filter_horizontal` for multiple fields-just specify
    each name in the tuple.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议对于有超过十个项目的`ManyToManyField`使用`filter_horizontal`。它比简单的多选小部件更容易使用。另外，请注意你可以对多个字段使用`filter_horizontal`-只需在元组中指定每个名称。
- en: '`ModelAdmin` classes also support a `filter_vertical` option. This works exactly
    as `filter_horizontal`, but the resulting JavaScript interface stacks the two
    boxes vertically instead of horizontally. It''s a matter of personal taste.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`ModelAdmin`类也支持`filter_vertical`选项。这与`filter_horizontal`的工作方式完全相同，但是生成的JavaScript界面将两个框垂直堆叠而不是水平堆叠。这是个人品味的问题。'
- en: '`filter_horizontal` and `filter_vertical` only work on `ManyToManyField` fields,
    not `ForeignKey` fields. By default, the admin site uses simple `<select>` boxes
    for `ForeignKey` fields, but, as for `ManyToManyField`, sometimes you don''t want
    to incur the overhead of having to select all the related objects to display in
    the drop-down.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter_horizontal`和`filter_vertical`只对`ManyToManyField`字段起作用，而不对`ForeignKey`字段起作用。默认情况下，管理员站点对`ForeignKey`字段使用简单的`<select>`框，但是，就像对于`ManyToManyField`一样，有时你不想承担选择所有相关对象以在下拉框中显示的开销。'
- en: For example, if our book database grows to include thousands of publishers,
    the **Add book** form could take a while to load, because it would have to load
    every publisher for display in the `<select>` box.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们的书籍数据库增长到包括成千上万的出版商，**添加书籍**表单可能需要一段时间才能加载，因为它需要加载每个出版商以在`<select>`框中显示。
- en: 'The way to fix this is to use an option called `raw_id_fields`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 修复这个问题的方法是使用一个叫做`raw_id_fields`的选项：
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Set this to a tuple of `ForeignKey` field names, and those fields will be displayed
    in the admin with a simple text input box (`<input type="text">`) instead of a
    `<select>`. See *Figure 5.14*.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 将其设置为`ForeignKey`字段名称的元组，这些字段将在管理员中显示为一个简单的文本输入框(`<input type="text">`)，而不是一个`<select>`。见*图5.14*。
- en: '![Customizing edit forms](img/image_05_014.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![自定义编辑表单](img/image_05_014.jpg)'
- en: 'Figure 5.14: The book edit form after adding `raw_id_fields`'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14：添加`raw_id_fields`后的书籍编辑表单
- en: What do you enter in this input box? The database ID of the publisher. Given
    that humans don't normally memorize database IDs, there's also a magnifying-glass
    icon that you can click to pull up a pop-up window, from which you can select
    the publisher to add.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这个输入框中输入什么？出版商的数据库ID。鉴于人类通常不会记住数据库ID，还有一个放大镜图标，你可以点击它弹出一个窗口，从中选择要添加的出版商。
- en: Users, groups, and permissions
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户、组和权限
- en: Because you're logged in as a superuser, you have access to create, edit, and
    delete any object. Naturally, different environments require different permission
    systems-not everybody can or should be a superuser. Django's admin site uses a
    permissions system that you can use to give specific users access only to the
    portions of the interface that they need. These user accounts are meant to be
    generic enough to be used outside of the admin interface, but we'll just treat
    them as admin user accounts for now.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 因为您以超级用户身份登录，您可以访问创建、编辑和删除任何对象。不同的环境需要不同的权限系统-并非每个人都可以或应该成为超级用户。Django的管理员站点使用了一个权限系统，您可以使用它来仅给特定用户访问他们需要的界面部分。这些用户帐户的设计是足够通用，可以在管理员界面之外使用，但我们现在将它们视为管理员用户帐户。
- en: In [Chapter 11](ch11.xhtml "Chapter 11. User Authentication in Django"), *User
    Authentication in Django*, we'll cover how to manage users site-wide (that is,
    not just the admin site) with Django's authentication system. You can edit users
    and permissions through the admin interface just like any other object. We saw
    this earlier in this chapter, when we played around with the User and Group sections
    of the admin.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第11章](ch11.xhtml "第11章。Django中的用户认证")，“Django中的用户认证”中，我们将介绍如何使用Django的认证系统在整个站点上管理用户（即不仅仅是管理员站点）。您可以像编辑任何其他对象一样，通过管理员界面编辑用户和权限。我们在本章的前面看到了这一点，当时我们在管理员的用户和组部分玩耍。
- en: 'User objects have the standard username, password, e-mail, and real name fields
    you might expect, along with a set of fields that define what the user is allowed
    to do in the admin interface. First, there''s a set of three Boolean flags:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 用户对象具有标准的用户名、密码、电子邮件和真实姓名字段，以及一组定义用户在管理员界面中允许做什么的字段。首先，有一组三个布尔标志：
- en: The **active** flag controls whether the user is active at all. If this flag
    is off and the user tries to log in, he won't be allowed in, even with a valid
    password.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: active标志控制用户是否活跃。如果这个标志关闭，用户尝试登录时，即使有有效密码，也不会被允许登录。
- en: The **staff** flag controls whether the user is allowed to log in to the admin
    interface (that is, whether that user is considered a staff member in your organization).
    Since this same user system can be used to control access to public (that is,
    non-admin) sites (see [Chapter 11](ch11.xhtml "Chapter 11. User Authentication
    in Django"), *User Authentication in Django*), this flag differentiates between
    public users and administrators.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: staff标志控制用户是否被允许登录到管理员界面（也就是说，该用户是否被认为是您组织中的工作人员）。由于这个相同的用户系统可以用来控制对公共（即非管理员）站点的访问（参见[第11章](ch11.xhtml
    "第11章。Django中的用户认证")，“Django中的用户认证”），这个标志区分了公共用户和管理员。
- en: The **superuser** flag gives the user full access to add, create and delete
    any item in the admin interface. If a user has this flag set, then all regular
    permissions (or lack thereof) are ignored for that user.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超级用户标志给予用户在管理员界面中添加、创建和删除任何项目的完全访问权限。如果用户设置了这个标志，那么所有常规权限（或缺乏权限）对该用户都将被忽略。
- en: '**Normal** admin users-that is, active, non-superuser staff members-are granted
    admin access through assigned permissions. Each object editable through the admin
    interface (for example books, authors, publishers) has three permissions: a create
    permission, an edit permission and a delete permission. Assigning permissions
    to a user grants the user access to do what is described by those permissions.
    When you create a user, that user has no permissions, and it''s up to you to give
    the user specific permissions.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 普通管理员用户-也就是活跃的、非超级用户的工作人员-通过分配的权限获得管理员访问权限。通过管理员界面可编辑的每个对象（例如书籍、作者、出版商）都有三个权限：创建权限、编辑权限和删除权限。将权限分配给用户将授予用户执行这些权限描述的操作的访问权限。当您创建用户时，该用户没有任何权限，您需要为用户分配特定的权限。
- en: For example, you can give a user permission to add and change publishers, but
    not permission to delete them. Note that these permissions are defined per-model,
    not per-object-so they let you say *John can make changes to any book, but they
    don't let you say* *John can make changes to any book published by Apress*. The
    latter functionality, per-object permissions, is a bit more complicated and is
    outside the scope of this book but is covered in the Django documentation.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以给用户添加和更改出版商的权限，但不给予删除的权限。请注意，这些权限是针对模型定义的，而不是针对对象定义的-因此它们让您说“约翰可以对任何书进行更改”，但不让您说“约翰可以对Apress出版的任何书进行更改”。后者的功能，即对象级权限，有点复杂，超出了本书的范围，但在Django文档中有介绍。
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Warning!**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 警告！
- en: Access to edit users and permissions is also controlled by this permission system.
    If you give someone permission to edit users, they will be able to edit their
    own permissions, which might not be what you want! Giving a user permission to
    edit users is essentially turning a user into a superuser.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对编辑用户和权限的访问也受到这个权限系统的控制。如果您给某人编辑用户的权限，他们将能够编辑自己的权限，这可能不是您想要的！给用户编辑用户的权限实质上是将用户变成超级用户。
- en: You can also assign users to groups. A group is simply a set of permissions
    to apply to all members of that group. Groups are useful for granting identical
    permissions to a subset of users.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将用户分配到组。组只是一组权限，适用于该组的所有成员。组对于授予一部分用户相同的权限非常有用。
- en: When and why to use the admin interface-and when not to
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时以及为什么使用管理员界面，以及何时不要使用
- en: After having worked through this chapter, you should have a good idea of how
    to use Django's admin site. But I want to make a point of covering when and why
    you might want to use it-and when not to use it.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章的学习，您应该对如何使用Django的管理员站点有一个很好的了解。但我想强调一下何时以及为什么您可能想要使用它，以及何时不要使用它。
- en: 'Django''s admin site especially shines when nontechnical users need to be able
    to enter data; that''s the purpose behind the feature, after all. At the newspaper
    where Django was first developed, development of a typical online feature-say,
    a special report on water quality in the municipal supply-would go something like
    this:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当非技术用户需要输入数据时，Django的管理站点尤其突出；毕竟，这就是该功能的目的。在Django首次开发的报纸上，开发典型的在线功能（比如市政供水水质特别报告）的开发过程大致如下：
- en: The reporter responsible for the project meets with one of the developers and
    describes the available data.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负责项目的记者与其中一名开发人员会面，并描述可用的数据。
- en: The developer designs Django models to fit this data and then opens up the admin
    site to the reporter.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员设计Django模型以适应这些数据，然后向记者打开管理站点。
- en: The reporter inspects the admin site to point out any missing or extraneous
    fields-better now than later. The developer changes the models iteratively.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记者检查管理站点以指出任何缺失或多余的字段-现在指出比以后好。开发人员迭代更改模型。
- en: When the models are agreed upon, the reporter begins entering data using the
    admin site. At the same time, the programmer can focus on developing the publicly
    accessible views/templates (the fun part!).
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当模型达成一致后，记者开始使用管理站点输入数据。与此同时，程序员可以专注于开发公开可访问的视图/模板（这是有趣的部分！）。
- en: 'In other words, the raison d''être of Django''s admin interface is facilitating
    the simultaneous work of content producers and programmers. However, beyond these
    obvious data entry tasks, the admin site is useful in a few other cases:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，Django的管理界面的存在意义是促进内容生产者和程序员的同时工作。然而，除了这些明显的数据输入任务之外，管理站点在一些其他情况下也很有用：
- en: '**Inspecting data models**: Once you''ve defined a few models, it can be quite
    useful to call them up in the admin interface and enter some dummy data. In some
    cases, this might reveal data-modelling mistakes or other problems with your models.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查数据模型**：一旦定义了一些模型，通过在管理界面中调用它们并输入一些虚拟数据，这可能会揭示数据建模错误或模型的其他问题。'
- en: '**Managing acquired data**: For applications that rely on data coming from
    external sources (for example users or web crawlers), the admin site gives you
    an easy way to inspect or edit this data. You can think of it as a less powerful,
    but more convenient, version of your database''s command-line utility.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理获取的数据**：对于依赖来自外部来源的数据的应用程序（例如用户或网络爬虫），管理站点为您提供了一种轻松的方式来检查或编辑这些数据。您可以将其视为数据库命令行实用程序的功能较弱但更方便的版本。'
- en: '**Quick and dirty data-management apps**: You can use the admin site to build
    yourself a very lightweight data management app-say, to keep track of expenses.
    If you''re just building something for your own needs, not for public consumption,
    the admin site can take you a long way. In this sense, you can think of it as
    a beefed up, relational version of a spreadsheet.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速而简单的数据管理应用程序**：您可以使用管理站点来构建一个非常轻量级的数据管理应用程序，比如用于跟踪开支。如果您只是为自己的需求构建某些东西，而不是为公众消费，管理站点可以帮助您走得更远。在这种意义上，您可以将其视为增强版的关系型电子表格。'
- en: The admin site is not, however, a be-all and end-all. It's not intended to be
    a public interface to data, nor is it intended to allow for sophisticated sorting
    and searching of your data. As we said early in this chapter, it's for trusted
    site administrators. Keeping this sweet spot in mind is the key to effective admin-site
    usage.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，管理站点并不是万能的。它不打算成为数据的公共接口，也不打算允许对数据进行复杂的排序和搜索。正如本章早期所说，它是为受信任的站点管理员而设计的。牢记这一甜蜜点是有效使用管理站点的关键。
- en: What's next?
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来呢？
- en: 'So far we''ve created a few models and configured a top-notch interface for
    editing data. In the next chapter we''ll move on to the real *meat and potatoes*
    of web development: form creation and processing.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了一些模型，并配置了一个一流的界面来编辑数据。在下一章中，我们将继续进行真正的网页开发：表单创建和处理。
