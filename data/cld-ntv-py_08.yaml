- en: Securing the Web Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护网络应用程序
- en: In this chapter, we will mainly discuss how to secure your application from
    external threats that could cause data loss, which, in turn, affects the overall
    business.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将主要讨论如何保护您的应用程序免受可能导致数据丢失的外部威胁，从而影响整体业务。
- en: Web application security is always a concern for any business unit. Therefore,
    we not only look at the traditional application logic and data-related security
    issues, but at the protocol and platform concerns as well. Developers have become
    more responsible for ensuring compliance with the best practices regarding web
    application security.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用程序安全始终是任何业务单位关注的问题。因此，我们不仅关注传统的应用程序逻辑和与数据相关的安全问题，还关注协议和平台方面的问题。开发人员变得更加负责，确保遵守有关网络应用程序安全的最佳实践。
- en: Keeping this in mind, this book is intended for application developers, system
    administrators, as well as DevOps professionals who want to keep their application
    secure, whether it is at the application level or platform.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这一点，本书旨在面向应用程序开发人员、系统管理员以及希望保持其应用程序安全的DevOps专业人员，无论是在应用程序级别还是平台上。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Network security versus application security
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络安全与应用程序安全
- en: Implementation of application authorization using different methods, such as
    OAuth, client authentication, and others
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同方法实施应用程序授权，如OAuth、客户端认证等
- en: Word on developing security-enabled web applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发安全启用的网络应用程序的要点
- en: Network security versus application security
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络安全与应用程序安全
- en: In today's scenario, web application security depends upon two primary surfaces--the
    web application itself and the platform on which it is deployed. You can separate
    these two surfaces, as any web application cannot be deployed with a platform.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今的情况下，网络应用程序安全取决于两个主要方面--网络应用程序本身和其部署的平台。您可以将这两个方面分开，因为任何网络应用程序都无法在没有平台的情况下部署。
- en: The web application stack
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络应用程序堆栈
- en: 'It is very important to understand the distinction between a platform and an
    application because of the impact it has on security. A typical web application
    would have an architecture similar to the one depicted in the following diagram:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 理解平台和应用程序之间的区别非常重要，因为它对安全性有影响。典型的网络应用程序的架构类似于以下图表所示：
- en: '![](img/00088.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00088.jpeg)'
- en: Most web applications depend on web servers, such as Apache/HTTP server, Rails,
    nginx, and others, which actually handle the incoming request based on the type
    of application. These web servers keep track of the incoming traffic; they also
    validate the request and respond to it accordingly, considering all user authentication
    is validated. In our case, Flask acts as the web server for our application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网络应用程序依赖于诸如Apache/HTTP服务器、Rails、nginx等的网络服务器，这些服务器实际上根据应用程序的类型处理传入的请求。这些网络服务器跟踪传入的流量；它们还验证请求并相应地做出响应，考虑到所有用户认证都经过验证。在我们的情况下，Flask充当我们应用程序的网络服务器。
- en: Application - security alternatives in the platform
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序 - 平台中的安全替代方案
- en: As described earlier, every web application needs to be deployed on some kind
    of a platform before it can be exposed to the outside world. An application platform
    provides the protocol support application, which is needed to communicate over
    a network. TCP, and, to a large extent, HTTP, are all handled at the application
    level.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，每个网络应用程序在暴露给外部世界之前都需要部署在某种平台上。应用程序平台提供了应用程序所需的协议支持，用于在网络上进行通信。TCP和在很大程度上HTTP都是在应用程序级别处理的。
- en: 'In the network stack of software architecture, there are two distinct layers,
    which include protocols ripe for web application attacks, in the application platform.
    These layers are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件架构的网络堆栈中，有两个不同的层，包括容易受到网络应用程序攻击的协议，即应用程序平台。这些层如下：
- en: Transport
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传输
- en: Application
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序
- en: Let's see these layers in detail.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细了解这些层。
- en: Transport protocol
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传输协议
- en: In the **Open Systems Interconnection** model (**OSI** model), the transport
    layer is commonly referred to as layer 4\. Web applications use TCP protocols
    as their transport protocol because of their reliability.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在**开放系统互连**模型（**OSI**模型）中，传输层通常被称为第4层。网络应用程序使用TCP协议作为其传输协议，因为它们具有可靠性。
- en: In **TCP** (**Transport Control Protocol**), each packet is closely monitored,
    and error recovery mechanisms are inbuilt, which is very useful in case of a communication
    failure. These mechanisms are exploited to attack web applications.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在**TCP**（传输控制协议）中，每个数据包都受到严密监控，并且具有内置的错误恢复机制，这在通信失败的情况下非常有用。这些机制被利用来攻击网络应用程序。
- en: The most common attack is the **SYN flood** attack, which is a TCP request for
    acknowledgment attack. The SYN flood attack severely affects the application by
    using an idle session to establish a connection with the application server, and
    keeps on requesting until the server runs out of resources, and is no longer able
    to handle more requests.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的攻击是**SYN洪水**攻击，这是一种TCP请求确认攻击。SYN洪水攻击通过使用空闲会话与应用程序服务器建立连接，并不断请求直到服务器耗尽资源，无法再处理更多请求。
- en: 'In order to avoid such kinds of attacks, system administrators (developers
    have no control here) should set up a configuration related to timeout and idle
    behaviors after considering the impact on the customers. Another example of such
    kinds of attacks is the **Smurf attack** (please refer to this link for more details:
    [https://en.wikipedia.org/wiki/Smurf_attack](https://en.wikipedia.org/wiki/Smurf_attack)).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免此类攻击，系统管理员（开发人员在这里没有控制权）应设置与超时和空闲行为相关的配置，考虑对客户的影响。这类攻击的另一个例子是**Smurf攻击**（请参考此链接了解更多详情：[https://en.wikipedia.org/wiki/Smurf_attack](https://en.wikipedia.org/wiki/Smurf_attack)）。
- en: '**Secure transport protocols**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全传输协议**'
- en: In the OSI network model, we also have some protocols on layer 5, which can
    make your network more secure and reliable--SSL/TLS. However, this layer also
    has some vulnerabilities (for example, Heartbleed, 2014 in SSL and man-in-the-middle
    renegotiation attack, 2009 in TLS).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在OSI网络模型中，我们还有一些第5层的协议，可以使您的网络更安全可靠--SSL/TLS。然而，这一层也存在一些漏洞（例如，SSL中的Heartbleed，2014年，以及TLS中的中间人重协议攻击，2009年）。
- en: Application protocol
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序协议
- en: In layer 7 (the topmost layer) of the OSI network model, the actual application
    resides in and uses the HTTP protocol for communication, which is where most of
    the application attacks occur.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在OSI网络模型的第7层（最顶层），实际的应用程序驻留并使用HTTP协议进行通信，这也是大多数应用程序攻击发生的地方。
- en: '**HTTP** (**Hypertext Transfer Protocol**) has mainly these two components:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP**（超文本传输协议）主要有这两个组件：'
- en: '**Metadata**: HTTP headers contain the metadata, which is important for both,
    the application as well as the platform. Some examples of headers are cookies,
    content-type, status, connection, and so on.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元数据**：HTTP头包含元数据，对于应用程序和平台都很重要。一些头的例子包括cookies、content-type、status、connection等。'
- en: '**Behavior**: This defines the behavior between the client and the server.
    There is a well-defined flow of how messages should be exchanged between an HTTP
    client (such as a browser) and the server.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行为**：这定义了客户端和服务器之间的行为。有一个明确定义的消息如何在HTTP客户端（如浏览器）和服务器之间交换的流程。'
- en: The main problem here is that an application, generally, doesn't have an inbuilt
    capability to identify suspicious behavior.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的主要问题是，一个应用程序通常没有内置的能力来识别可疑行为。
- en: For example, a client accesses the web application over a network, which may
    be attacked by consumption-based **denial-of-service** (**DoS**) attacks. In this
    attack, the client purposefully receives the data at a slower rate than the normal
    indicates which they are capable of in an attempt to maintain an open connection
    longer. Due to this, the web server's queue starts filling, and consumes more
    resources. If all the resources are used up with sufficient open connections,
    it is highly possible that the server may get unresponsive.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，客户端通过网络访问Web应用程序，可能会受到基于消耗的拒绝服务（DoS）攻击。在这种攻击中，客户端故意以比正常速度慢的速率接收数据，以尝试保持连接时间更长。由于这个原因，Web服务器的队列开始填充，并消耗更多资源。如果所有资源都用于足够的开放连接，服务器可能会变得无响应。
- en: Application - security threats in application logic
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序-应用程序逻辑中的安全威胁
- en: In this section, we look at the different methods that authenticate users, and
    make sure that our application is accessed by a genuine entity.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究不同的方法来验证用户，并确保我们的应用程序只能被真实实体访问。
- en: Web application security alternatives
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用程序安全替代方案
- en: 'In order to secure our application from outside threats, there are a couple
    of alternative methods, which are described here. Usually, our application doesn''t
    have any intelligence to identify suspicious activities. Hence, some of the important
    security measures are described as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护我们的应用程序免受外部威胁，这里描述了一些替代方法。通常，我们的应用程序没有任何智能来识别可疑活动。因此，以下是一些重要的安全措施描述：
- en: HTTP-based Auth
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于HTTP的身份验证
- en: OAuth/OpenID
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth/OpenID
- en: Windows authentication
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows身份验证
- en: '**HTTP-based Auth**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于HTTP的身份验证**'
- en: 'A simple **username** and **password** are hashed and sent to the web server
    by the client, like the one we have set up for our web application, as depicted
    in the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端对用户名和密码进行哈希处理，并发送到Web服务器，就像我们为我们的Web应用程序设置的那样，如下面的屏幕截图所示：
- en: '![](img/00089.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00089.jpeg)'
- en: 'This preceding screenshot image is of the UI that we created in [Chapter 6](part0122.html#3KB4K0-4022ecb0f8ea4b719ffb742bf2a6a072),
    *Creating UIs to Scale with Flux*. It is authenticated by the backend service
    (microservices) and user database, which is stored in the MongoDB database server.
    Also, in case of validating the user to log in to the home page, user data is
    read from the MongoDB collections, and then the user is authenticated to proceed
    further into the application. The following is the code snippet for the API that
    is called:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的屏幕截图是我们在[第6章](part0122.html#3KB4K0-4022ecb0f8ea4b719ffb742bf2a6a072)中创建的UI，*使用Flux创建可扩展的UI*。它由后端服务（微服务）和用户数据库进行身份验证，用户数据库存储在MongoDB数据库服务器中。此外，在验证用户登录到主页时，用户数据从MongoDB集合中读取，然后对用户进行身份验证以进一步进入应用程序。以下是调用的API的代码片段：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is one of the ways of setting up security at the application level so that
    application data can be made secure.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在应用程序级别设置安全性的一种方式，以便应用程序数据可以得到保护。
- en: '**OAuth/OpenID**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**OAuth/OpenID**'
- en: OAuth is an open standard for authorization, and is very common among websites
    that allow users to authenticate using third-party credentials, which is, generally,
    the email ID.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth是授权的开放标准，在允许用户使用第三方凭据进行身份验证的网站中非常常见，通常是电子邮件ID。
- en: 'Listed next are the few key features that make OAuth better than other security
    measures:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使OAuth比其他安全措施更好的一些关键特性：
- en: It has nothing related to any **OS** (**operating system**) or installation
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它与任何操作系统或安装无关
- en: It's simple and easy to use
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它简单易用
- en: It is more reliable and provides high performance
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它更可靠并提供高性能
- en: It is designed, specifically, for distributed systems, which need a centralized
    authentication method
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它专门为需要集中身份验证方法的分布式系统设计
- en: It is a free-to-use, open source-based identity provider server software
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个免费使用的基于开源的身份提供者服务器软件
- en: It provides support for cloud-based identity providers such as Google, Auth0,
    LinkedIn, and others
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持基于云的身份提供者，如Google、Auth0、LinkedIn等
- en: It is also called **SSO** (**single signed-on** or token-based authentication)
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它也被称为SSO（单一登录或基于令牌的身份验证）
- en: '**Setting up admin account**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置管理员帐户**'
- en: OAuth doesn't work without a service to grant a **JWT** (**JSON Web Token**,
    a URL-safe JSON format for expressing claims that can be transferred between parties).
    You can learn more about JWT at [https://jwt.io/introduction/](https://jwt.io/introduction/).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth没有服务来授予**JWT**（**JSON Web Token**，一种用于在各方之间传输声明的URL安全JSON格式）。您可以在[https://jwt.io/introduction/](https://jwt.io/introduction/)了解更多关于JWT的信息。
- en: An identity provider is responsible for authenticating a user for a web application
    that depends on authorization provided from a third party.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 身份提供者负责为依赖第三方授权的Web应用程序对用户进行身份验证。
- en: You can use any identity provider based on your preference, as features would
    be similar between them, but they will be variant in terms of functionality. For
    the scope of this chapter, I will show you how to authenticate using Google web
    apps (which is a developer API from Google) and Auth0 third-party applications.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据自己的喜好选择任何身份提供者，因为它们之间的功能是相似的，但在功能方面会有所不同。在本章中，我将向您展示如何使用Google Web应用程序（这是来自Google的开发者API）和Auth0第三方应用程序进行身份验证。
- en: '**Setting up using an Auth0 account**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用Auth0帐户设置**'
- en: In this section, we will set up an account in the Google developer tools for
    authentication, and in a third-party free application called **Auth0** ([auth0.com](http://auth0.com)).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个部分，我们将在Google开发者工具中设置一个用于身份验证的帐户，并在一个名为**Auth0**（[auth0.com](http://auth0.com)）的第三方免费应用程序中设置。
- en: 'Let''s kickstart the account setup in Auth0 ([auth0.com](http://auth0.com)),
    where the only requirement is an email ID to get registered or to sign up. Refer
    to the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Auth0（[auth0.com](http://auth0.com)）中启动帐户设置，唯一的要求是需要一个电子邮件ID进行注册或注册。请参考以下截图：
- en: '![](img/00090.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00090.jpeg)'
- en: 'Once you are registered/signed up for the Auth0 account, you will see the following
    screen:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您注册/注册了Auth0帐户，您将看到以下屏幕：
- en: '![](img/00091.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00091.jpeg)'
- en: This preceding screen is the dashboard where we can see the login activity as
    the user who logged in to the application. It also showcases the login attempts
    by the user, and keeps a log of the user's activity. In short, the dashboard gives
    you an insight into your application's user activity.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕是仪表板，我们可以在其中看到用户登录到应用程序的登录活动。它还展示了用户的登录尝试，并记录了用户的活动。简而言之，仪表板可以让您了解应用程序的用户活动。
- en: 'Now we need to add a new client for our application, so click on the +NEW CLIENT
    button to create it. The following screen will appear once you click on the +NEW
    CLIENT button:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为我们的应用程序添加一个新的客户端，所以点击“+NEW CLIENT”按钮进行创建。一旦您点击“+NEW CLIENT”按钮，将会出现以下屏幕：
- en: '![](img/00092.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00092.jpeg)'
- en: The preceding screenshot is self explanatory--you need to provide a user-defined
    name for the client (generally, the name should be related to the app). Also,
    you need to select the category of your application. Coming back to our case,
    I have given the name as `My App`, and selected the second option, that is, Single
    Page Web Applications, as we are using the technologies mentioned under it. Alternatively,
    you can also select Regular Web Applications--it works just fine. These categories
    are used for distinction between the kinds of applications we are writing, because
    it is highly possible we might be developing hundreds of applications under one
    account.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图是自解释的--您需要为客户端提供一个用户定义的名称（通常名称应与应用程序相关）。此外，您需要选择应用程序的类别。回到我们的案例，我已经给出了名称`My
    App`，并选择了第二个选项，即单页Web应用程序，因为我们正在使用其中提到的技术。或者，您也可以选择常规Web应用程序--它也可以正常工作。这些类别用于区分我们正在编写的应用程序的种类，因为很可能我们可能在一个帐户下开发数百个应用程序。
- en: 'Click on the CREATE button to proceed with the creation of the client. Once
    it is created, you will see the following screen:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“CREATE”按钮以继续创建客户端。创建完成后，您将看到以下屏幕：
- en: '![](img/00093.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00093.jpeg)'
- en: 'In the section seen in the preceding screenshot, we have a lot of settings
    that are auto-generated, and we need them to be integrated with our web application.
    A few of the sections are defined as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面截图中看到的部分中，有许多自动生成的设置，我们需要将它们与我们的Web应用程序集成。以下是其中一些部分的定义：
- en: '**Client ID**: This is a unique ID assigned to a particular application'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端ID**：这是分配给特定应用程序的唯一ID'
- en: '**Domain**: This is similar to the authentication server, which will be called
    at application login'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域**：这类似于身份验证服务器，在应用程序登录时将被调用'
- en: '**Client Secret**: This is a secret key, which should be kept safe and not
    be shared with anyone, as it could cause a security breach'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端密钥**：这是一个秘密密钥，应该保密，不要与任何人分享，因为这可能会导致安全漏洞'
- en: '**Client Type**: This defines the type of the application'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端类型**：这定义了应用程序的类型'
- en: '**Allowed Callback URLs**: This specifies the allowed callback URLs after user
    authentication, such as `http://localhost:5000/callback`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**允许的回调URL**：这指定了用户身份验证后允许的回调URL，例如`http://localhost:5000/callback`'
- en: '**Allowed Logout URLs**: This defines the URLs that will be allowed to be hit
    at the time of user logout, such as `http://localhost:5000/logout`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**允许的注销URL**：这定义了在用户注销时允许访问的URL，例如`http://localhost:5000/logout`'
- en: '**Token Endpoint Authentication Method**: This defines the method of authentication,
    which could be none, or post, or basic'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**令牌端点身份验证方法**：这定义了身份验证的方法，可以是无、或者post、或者基本'
- en: 'Other features of an Auth0 account that could be useful to manage your application
    are as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Auth0帐户的其他功能可能对管理您的应用程序有用，如下所示：
- en: '**SSO Integrations**: In this section, you can set up an SSO login with a couple
    of other third-party applications such as Slack, Salesforce, Zoom, and so on:![](img/00094.jpeg)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SSO集成**：在这个部分，你可以设置与Slack、Salesforce、Zoom等其他第三方应用程序的SSO登录！[](img/00094.jpeg)'
- en: '**Connections**: This defines the type of authentication you want to define
    for your application, such as Database (username-password database), Social (integration
    with the existing account from social media websites such as Google, LinkedIn,
    and so on), Enterprise (for enterprise apps such as AD, Google Apps, and others),
    or Passwordless (by sms, email, and so on). By default, the username-password
    authentication is enabled.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接**：这定义了你想为你的应用定义的认证类型，比如数据库（用户名-密码数据库）、社交（与社交媒体网站如谷歌、LinkedIn等现有账户集成）、企业（用于企业应用如AD、谷歌应用等）、或者无密码（通过短信、电子邮件等）。默认情况下，用户名-密码认证是启用的。'
- en: '**APIs**: In this section, you can manage the **Auth0 Management API** for
    your application, and test it, as described in the following screenshot:![](img/00095.jpeg)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**APIs**：在这个部分，你可以管理你的应用的**Auth0管理API**，并进行测试，如下截图所示：![](img/00095.jpeg)'
- en: '**Logs**: This section keeps a track of your activity on the Auth0 account,
    which is very useful to debug as well as to identify suspicious activity at the
    time of threats. Refer to the following screenshot to find out more about Logs:![](img/00096.jpeg)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志**：这个部分跟踪你在Auth0账户上的活动，对于调试和在威胁时识别可疑活动非常有用。参考以下截图以了解更多关于日志的信息：![](img/00096.jpeg)'
- en: These are the most important features of an Auth0 account that could help you
    manage your web application security in an efficient way.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是Auth0账户的最重要功能，可以帮助你以高效的方式管理你的Web应用程序安全。
- en: Now, our Auth0 admin account is set up, and is ready to get integrated with
    our web application.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的Auth0管理员账户已经设置好，准备与我们的Web应用集成。
- en: '**Setting up a Google API account**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置谷歌API账户**'
- en: Google APIs use the OAuth 2.0 protocol for authentication and authorization.
    Google supports common OAuth 2.0 scenarios, such as those for web server, installed,
    and client-side applications.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌API使用OAuth 2.0协议进行认证和授权。谷歌支持常见的OAuth 2.0场景，比如用于Web服务器、安装和客户端应用程序的场景。
- en: 'To kickstart, log in to the Google API Console ([https://console.developers.google.com](https://console.developers.google.com))
    with your Google account to get the OAuth client credentials such as Client ID,
    Client Secret, and others. You will need these credentials to integrate with your
    application. You will see the following screen once you have logged in:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用你的谷歌账户登录到谷歌API控制台（[https://console.developers.google.com](https://console.developers.google.com)）以获取OAuth客户端凭据，比如客户端ID、客户端密钥等。你将需要这些凭据来与你的应用集成。一旦你登录，你将看到以下屏幕：
- en: '![](img/00097.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00097.jpeg)'
- en: 'The preceding screen showcases the Google library API offerings for their different
    Google products. Now, click on Credentials in the panel on the left-hand side
    to navigate to the next screen, as seen in this screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕展示了谷歌库API为其不同的谷歌产品提供的服务。现在，点击左侧面板中的凭据，导航到下一个屏幕，如下截图所示：
- en: '![](img/00098.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00098.jpeg)'
- en: Now, click on Create credentials, and then on the OAuth client ID option to
    initiate the generation of client credentials from the API manager.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击创建凭据，然后点击OAuth客户端ID选项，以启动从API管理器生成客户端凭据。
- en: '![](img/00099.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00099.jpeg)'
- en: Now we need to feed some information about our application; you must remember
    these details that we have provided at the time of OAuth account as well. Once
    you are ready, and have filled the mandatory fields, click on Create to generate
    the credentials.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要提供一些关于我们应用的信息；你必须记住这些细节，这些是我们在OAuth账户创建时提供的。一旦准备好，并填写了必填字段，点击创建以生成凭据。
- en: 'Once the client ID is created, you will see the following screen, which will
    have the information related to the client ID (Credentials):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦客户端ID创建完成，你将看到以下屏幕，其中包含与客户端ID相关的信息（凭据）：
- en: '![](img/00100.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00100.jpeg)'
- en: Remember, NEVER share the client ID details with anyone. In case you do, then
    reset it immediately. Now our Google API account is ready to be integrated with
    our web application.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，绝对不要与任何人分享客户端ID的详细信息。如果你这样做了，立即重置。现在我们的谷歌API账户已经准备好与我们的Web应用集成了。
- en: '**Integration of a web application with an Auth0 account**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**将Web应用与Auth0账户集成**'
- en: 'In order to integrate the Auth0 account with our application, we need to create
    a new route for our callback. This route will set up the session after user authentication
    from the Auth0 account. So, let''s add the following code to the `app.py` file:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将Auth0账户与我们的应用集成，我们需要为我们的回调创建一个新的路由。这个路由将在用户从Auth0账户进行认证后设置会话。因此，让我们将以下代码添加到`app.py`文件中：
- en: '[PRE1]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see in the preceding code, I have used client credentials that we
    got from the Auth0 account console. These are the credentials we generated at
    the time of client creation.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面的代码中看到的，我使用了我们从Auth0账户控制台获取的客户端凭据。这些是我们在客户端创建时生成的凭据。
- en: 'Now let''s add the route/dashboard to which the user is redirected after being
    authenticated:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加路由/仪表板，用户在认证后被重定向到该路由：
- en: '[PRE2]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This preceding route simply calls `index.html`, and passes the session details
    to `index.html` as parameters.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的路由简单地调用`index.html`，并将会话详细信息作为参数传递给`index.html`。
- en: Now we have to modify our `index.html` to trigger authentication via Auth0\.
    There are two ways of triggering. The first one is to make the Auth0 domain as
    the landing page, which means that as soon as they hit the URL ([`http://localhost:5000`](http://localhost:5000)),
    the users will be redirected to the landing page for the Auth0 account. The other
    way is to trigger it manually by providing a button to trigger it.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要修改我们的`index.html`来通过Auth0触发身份验证。有两种触发方式。第一种是将Auth0域作为登陆页面，这意味着一旦他们访问URL（[`http://localhost:5000`](http://localhost:5000)），用户将被重定向到Auth0账户的登陆页面。另一种方式是通过提供一个按钮来手动触发。
- en: For the scope of this chapter, we will be using a manual trigger, where the
    Auth0 account can be used as an alternative to log in to the application.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的范围内，我们将使用手动触发，其中Auth0账户可以作为登录应用程序的替代方式。
- en: 'Let''s add the following code to `login.html`. This code will make a button
    appear on the login page, and if you click on that button, it will trigger the
    Auth0 user signup page:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`login.html`中添加以下代码。此代码将在登录页面上显示一个按钮，如果您点击该按钮，它将触发Auth0用户注册页面：
- en: '[PRE3]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There is one more thing we need to take care of before we test our application--how
    to make our application aware of the session details.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们测试应用程序之前，我们还需要处理一件事情--如何使我们的应用程序了解会话详细信息。
- en: As our `index.html` takes the session values and showcases them on our home
    page as well, it is used to manage the tweets from the user.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的`index.html`获取会话值并在我们的主页上展示它们，因此它用于管理用户的推文。
- en: 'So, update the body tag of `index.html` as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，请按照以下方式更新`index.html`的body标签：
- en: '[PRE4]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The previous code is needed to show the user''s full name on the user interface.
    Next, you need to update the `localStorage` session details as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码需要在用户界面上显示用户的全名。接下来，您需要按照以下方式更新`localStorage`会话详细信息：
- en: '[PRE5]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We are almost done now. I hope you remember that we have set up authentication
    checks when you tweet for a particular user in our microservices APIs. We need
    to remove those checks, because in this case, we are using Auth0 for authentication
    purposes.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在几乎完成了。我希望您记得，当您在我们的微服务API中为特定用户发布推文时，我们已经设置了身份验证检查。我们需要删除这些检查，因为在这种情况下，我们使用Auth0进行身份验证。
- en: 'Awesome! Run your application, and see if you can see a screen like the following
    one at [`http://localhost:5000/`](http://localhost:5000/):'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！运行您的应用程序，并查看是否可以在[`http://localhost:5000/`](http://localhost:5000/)看到以下屏幕：
- en: '![](img/00101.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00101.jpeg)'
- en: Next, click on the Login using Auth0 button to get the Auth0 login/signup panel
    as shown in the next screenshot.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击“使用Auth0登录”按钮，以获取Auth0登录/注册面板，如下图所示。
- en: 'Provide the required details, and click on Sign up now, and it will get registered
    in the Auth0 account. Remember, in this case, you don''t see any way to log in
    via email directly, because we are using username-password authentication. If
    you want to sign up via email directly, then you need to enable the google-OAuth2
    way extension in the social connection section. Once you enable it, you will be
    able to see your sign up page as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 提供所需的详细信息，然后点击立即注册，它将在Auth0帐户中注册。请记住，在这种情况下，您不会看到任何通过电子邮件直接登录的方式，因为我们使用用户名密码进行身份验证。如果您想直接通过电子邮件注册，那么您需要在社交连接部分启用google-OAuth2方式扩展。一旦您启用它，您将能够看到您的注册页面如下：
- en: '![](img/00102.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00102.jpeg)'
- en: 'Once you have signed up successfully, you will be redirected to the home page,
    where you can tweet. If you see the following screen, that means it works:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您成功注册，您将被重定向到主页，在那里您可以发布推文。如果您看到以下屏幕，那就意味着它起作用了：
- en: '![](img/00103.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00103.jpeg)'
- en: 'An important thing to notice here is that for each signup, a user is created
    in your Auth0 account with User Details, as shown in this screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里需要注意的一件重要的事情是，对于每个注册，都会在您的Auth0帐户中创建一个用户详细信息，如下图所示：
- en: '![](img/00104.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00104.jpeg)'
- en: Awesome! Now your application is integrated with the Auth0 account, and you
    can keep track of a user who makes use of your application.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在您的应用程序已与Auth0帐户集成，您可以跟踪使用您的应用程序的用户。
- en: '**Integrating your Google API with the web application**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**将您的Google API与Web应用程序集成**'
- en: 'Integrating your Google API with your web application is quite similar to what
    we have seen in Auth0 integration. You need to follow the steps listed next for
    the integration of the Google API:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的Google API与您的Web应用程序集成与我们在Auth0集成中看到的非常相似。您需要按照接下来列出的步骤进行Google API的集成：
- en: '**Gathering OAuth credentials**: As discussed in the Google API client setup,
    we have already generated client credentials. We need to capture details such
    as Client ID, Client Secret, and others.'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**收集OAuth凭据**：如在Google API客户端设置中讨论的那样，我们已经生成了客户端凭据。我们需要捕获诸如客户端ID、客户端密钥等详细信息。'
- en: '**Obtaining an access token from the Google authorization server**: Before
    your application user can log in and access private data, it needs to generate
    an authentication token provided by Google, which acts as an authenticator for
    the user. A single access token can grant varying degrees of access to multiple
    APIs. A scope parameter contains the information about the extent to which the
    user will have access, that is, from which of the APIs the user can view data.
    Requesting of token depends on the way your application has been developed.'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从Google授权服务器获取访问令牌**：在您的应用程序用户可以登录并访问私人数据之前，它需要生成由Google提供的身份验证令牌，该令牌充当用户的验证器。单个访问令牌可以授予对多个API的不同程度的访问权限。范围参数包含有关用户将具有访问权限的程度的信息，即用户可以从哪些API中查看数据。令牌的请求取决于您的应用程序的开发方式。'
- en: '**Saving a token to the API**: Once a token is received by the application,
    it sends that token across to the Google API HTTP authorization headers. As mentioned
    earlier, this token is authorized to perform actions on a certain set of APIs
    based on the scope parameter defined.'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将令牌保存到API**：一旦应用程序接收到令牌，它会将该令牌发送到Google API HTTP授权标头。如前所述，该令牌被授权执行基于范围参数定义的一定范围API上的操作。'
- en: '**Refreshing a token**: It is best practice to refresh a token after a certain
    period of time to avoid any security breach.'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**刷新令牌**：定期刷新令牌是最佳实践，以避免任何安全漏洞。'
- en: '**Token Expiration**: It is good practice to write for token expiration after
    a certain period of time, which makes the application secure; it is highly recommended.'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**令牌过期**：定期检查令牌过期是一个好习惯，这使得应用程序更加安全；这是强烈推荐的。'
- en: 'Since we are developing an application based on Python, you can follow the
    docs URL, which has information about the implementation of Google-API-token-based
    authentication at the following link:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在开发基于Python的应用程序，您可以按照以下链接的文档URL，了解有关在以下链接实现Google-API令牌身份验证的信息：
- en: '[https://developers.google.com/api-client-library/python/guide/aaa_oauth](https://developers.google.com/api-client-library/python/guide/aaa_oauth).'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developers.google.com/api-client-library/python/guide/aaa_oauth](https://developers.google.com/api-client-library/python/guide/aaa_oauth)。'
- en: 'Once the user is authenticated, and starts using the application, you can monitor
    the user login activities on the API Manager ([https://console.developers.google.com/apis/](https://console.developers.google.com/apis/)),
    as shown here:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户经过身份验证并开始使用应用程序，您可以在API管理器（[https://console.developers.google.com/apis/](https://console.developers.google.com/apis/)）上监视用户登录活动，如下所示：
- en: '![](img/00105.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00105.jpeg)'
- en: Setting up authentication using Google is slightly difficult, and needs supervision.
    That's why, developers go with tools like Auth0, which can provide integration
    with Google directly.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用谷歌进行身份验证设置略微困难，并需要监督。这就是为什么开发人员选择使用像Auth0这样的工具，它可以直接与谷歌集成。
- en: '**Windows authentication**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows身份验证**'
- en: Historically, this option has been preferred for applications being used for
    intranet and enterprise sites even if they are deployed on internal or private
    clouds. However, this is not suitable for the cloud native security option for
    a number of reasons.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，即使应用程序部署在内部或私有云上，也更倾向于用于局域网和企业网站。然而，出于许多原因，这并不适合云原生安全选项。
- en: For more information on Windows authentication, go to the link [https://en.wikipedia.org/wiki/Integrated_Windows_Authentication](https://en.wikipedia.org/wiki/Integrated_Windows_Authentication).
    We have showcased these security methods for your understanding, but our authentication
    method remains the same.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Windows身份验证的更多信息，请访问链接[https://en.wikipedia.org/wiki/Integrated_Windows_Authentication](https://en.wikipedia.org/wiki/Integrated_Windows_Authentication)。我们已展示了这些安全方法供您了解，但我们的身份验证方法保持不变。
- en: A word on developing security-enabled web applications
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发安全启用的Web应用程序
- en: 'With an increase in web applications on the **World Wide Web** (**WWW**), the
    concerns over application security have increased as well. Now, the first question
    that arises in our mind is why we need security-enabled applications--the answer
    to this is quite obvious. But what are its essential principles? Following are
    the principles that we should keep in mind:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 随着**万维网**（**WWW**）上Web应用程序的增加，对应用程序安全性的担忧也在增加。现在，我们心中首先出现的问题是为什么我们需要安全启用的应用程序--这个问题的答案是相当明显的。但它的基本原则是什么？以下是我们应该牢记的原则：
- en: A hacker can easily exploit your application if he gets familiar with the language
    in which the application got created. That's why, we enable techniques such as
    CORS to secure our code.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果黑客熟悉应用程序创建时使用的语言，他可以轻易利用您的应用程序。这就是为什么我们启用诸如CORS之类的技术来保护我们的代码。
- en: Access to the application and its data should be given to very limited people
    in your organization.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该只授予组织中非常有限的人员对应用程序及其数据的访问权限。
- en: A way of authentication, authorization secures your application from both, the
    WWW as well as within your private network.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证和授权是一种保护您的应用程序免受互联网和私人网络威胁的方式。
- en: All these factors, or as I would say, principles, drive us to create security-enabled
    applications.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些因素，或者我应该说，原则，都驱使我们创建安全启用的应用程序。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we kickstarted by defining security on different application
    stacks, and how we can implement or integrate different application security measures
    with our application, based on your preference and application requirement.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先定义了不同应用程序堆栈上的安全性，以及根据您的偏好和应用程序要求如何实施或集成不同的应用程序安全措施。
- en: So far we've talked about application building. But from now on, we will focus
    entirely on building a platform for moving our application from the development
    stage to production using DevOps tools. So, things are going to get more interesting.
    Stay tuned for further chapters.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了应用程序构建。但是从现在开始，我们将完全专注于使用DevOps工具将我们的应用程序从开发阶段移至生产阶段的平台构建。因此，事情将变得更加有趣。敬请关注后续章节。
