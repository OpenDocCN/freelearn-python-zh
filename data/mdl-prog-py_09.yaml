- en: Chapter 9. Modular Programming as a Foundation for Good Programming Technique
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。模块化编程作为良好编程技术的基础
- en: We have come a long way in this book. From learning how modules and packages
    work in Python, and how to use them to better organize your code, we have discovered
    many of the common practices used to apply modular patterns to solve a range of
    programming problems. We have seen how modular programming allows us to deal with
    changing requirements in a real-world system in the best possible way, and learned
    what makes a module or package a suitable candidate for reuse in new projects.
    We have seen many of the more advanced techniques for working with modules and
    packages in Python, as well as ways of avoiding the pitfalls that you may encounter
    along the way.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们已经走了很长的路。从学习Python中模块和包的工作原理，以及如何使用它们更好地组织代码，我们发现了许多常见的实践，用于应用模块化模式来解决各种编程问题。我们已经看到模块化编程如何允许我们以最佳方式处理现实世界系统中的变化需求，并学会了使模块或包成为在新项目中重复使用的合适候选者的条件。我们已经看到了许多Python中处理模块和包的更高级技术，以及避免在这一过程中可能遇到的陷阱的方法。
- en: Finally, we looked at ways of testing your code, how to use a source code management
    system to keep track of the changes you make to your code over time, and how to
    submit your module or package to the Python Package Index (PyPI) so that others
    can find and use it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看了测试代码的方法，如何使用源代码管理系统来跟踪您对代码的更改，以及如何将您的模块或包提交到Python包索引（PyPI），以便其他人可以找到并使用它。
- en: Using what we have learned thus far, you will be able to competently apply modular
    techniques to your Python programming efforts, creating robust and well-written
    code that can be reused in a variety of programs. You can also share your code
    with others, both inside your organization and within the wider Python developer
    community.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 利用我们迄今为止学到的知识，您将能够熟练应用模块化技术到您的Python编程工作中，创建健壮且编写良好的代码，可以在各种程序中重复使用。您还可以与其他人分享您的代码，无论是在您的组织内部还是更广泛的Python开发者社区内。
- en: 'In this final chapter, we will use a practical example to show how modules
    and packages do far more than just organize your code: they help to deal with
    the *process* of programming more effectively. We will see how modules are vital
    to the design and development of any large system, and demonstrate how the use
    of modular techniques to create robust, useful and well-written modules is an
    essential part of being a good programmer.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一个实际的例子来展示模块和包远不止于组织代码：它们有助于更有效地处理编程的*过程*。我们将看到模块对于任何大型系统的设计和开发是至关重要的，并演示使用模块化技术创建健壮、有用和编写良好的模块是成为一名优秀程序员的重要组成部分。
- en: The process of programming
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程的过程
- en: 'All too often as programmers, we focus on the technical details of a program.
    That is, we focus on the *product* rather than the *process* of programming. The
    difficulties of solving a particular programming problem are so great that we
    forget that the problem itself will change over time. No matter how much we try
    to avoid it, change is inevitable: changing markets, changing requirements, and
    changing technologies. As programmers, we need to be able to effectively cope
    with this change just as much as we need to be able to implement, test, and debug
    our code.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，我们往往过于关注程序的技术细节。也就是说，我们关注*产品*而不是编程的*过程*。解决特定编程问题的困难是如此之大，以至于我们忘记了问题本身会随着时间的推移而发生变化。无论我们多么努力避免，变化都是不可避免的：市场的变化、需求的变化和技术的变化。作为程序员，我们需要能够有效地应对这种变化，就像我们需要能够实施、测试和调试我们的代码一样。
- en: Back in [Chapter 4](ch04.html "Chapter 4. Using Modules for Real-World Programming"),
    *Using Modules for Real-World Programming*, we looked at an example program that
    faced the challenge of changing requirements. We saw how a modular design allowed
    us to minimize the amount of code that had to be rewritten when the scope of the
    program increased well beyond what was first envisaged.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 回到[第4章](ch04.html "第4章。用于真实世界编程的模块")*用于真实世界编程的模块*，我们看了一个面临变化需求挑战的示例程序。我们看到模块化设计如何使我们能够在程序的范围远远超出最初设想的情况下最小化需要重写的代码量。
- en: 'Now that we have learned more about modular programming and the related technologies
    that can help to make it more effective, let''s work through this exercise again.
    This time, we''ll choose a simple package for counting the number of occurrences
    of some event or object. For example, imagine that you need to keep a count of
    the number of animals of each type you see while walking across a farm. As you
    see each type of animal, you record its presence by passing it to the counter,
    and at the end, the counter will tell you how many animals of each type you have
    seen. For example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经更多地了解了模块化编程和相关技术，可以帮助使其更加有效，让我们再次通过这个练习。这一次，我们将选择一个简单的包，用于计算某个事件或对象的发生次数。例如，想象一下，您需要记录在农场散步时看到每种动物的数量。当您看到每种动物时，通过将其传递给计数器来记录其存在，最后，计数器将告诉您每种动物您看到了多少只。例如：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is a simple package, but it gives us a good target for applying some of
    the more useful techniques we have learned in the previous chapters. In particular,
    we will make use of **docstrings** to document what each function in our package
    does, and we will write a series of **unit tests** to ensure that our package
    is working the way we expect it to.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的包，但它为我们提供了一个很好的目标，可以应用我们在前几章学到的一些更有用的技术。特别是，我们将利用**文档字符串**来记录我们包中每个函数的功能，并编写一系列**单元测试**来确保我们的包按照我们的预期工作。
- en: 'Let''s start by creating a directory to hold our new project, which we will
    call Counter. Create a directory named `counter` somewhere convenient, and then
    add a new file named `README.rst` to this directory. Since we expect to eventually
    upload this package to the Python Package Index, we will use reStructuredText
    format for our README file. Enter the following into this file:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建一个目录来保存我们的新项目，我们将其称为Counter。在方便的地方创建一个名为`counter`的目录，然后在该目录中添加一个名为`README.rst`的新文件。由于我们希望最终将这个包上传到Python包索引，我们将使用reStructuredText格式来编写我们的README文件。在该文件中输入以下内容：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s take a closer look at how this package might be used. Imagine that you
    wanted to keep a count of the number of cars of each color which were observed
    in a given timeframe. You would start by making the following call:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看这个包可能如何使用。假设您想要统计在给定时间范围内观察到的每种颜色的汽车数量。您将首先进行以下调用：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then when you identify a car of a given color, you would make the following
    call:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后当您识别到特定颜色的汽车时，您将进行以下调用：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, once the time period is over, you would obtain the various colors
    and how often they occurred in the following way:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一旦时间结束，您将以以下方式获取各种颜色及其出现次数：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The counter can then be reset to start counting another set of values.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后计数器可以被重置以开始计算另一组值。
- en: 'Let''s now implement this package. Inside our `counter` directory, create another
    directory named `counter` to hold our package''s source code, and create a package
    initialization file (`__init__.py`) inside this innermost `counter` directory.
    We''ll follow the pattern we used earlier and define our package''s public functions
    in a module named `interface.py`, which we will then import into the `__init__.py`
    file to make the various functions available at the package level. To do this,
    edit the `__init__.py` file and enter the following into this file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现这个包。在我们的`counter`目录中，创建另一个名为`counter`的目录来保存我们包的源代码，并在这个最里层的`counter`目录中创建一个包初始化文件(`__init__.py`)。我们将按照之前使用的模式，在一个名为`interface.py`的模块中定义我们包的公共函数，然后将其导入`__init__.py`文件中，以便在包级别提供各种函数。为此，编辑`__init__.py`文件，并在该文件中输入以下内容：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Our next task is to implement the `interface` module. Create the `interface.py`
    file inside the `counter` package directory, and enter the following into this
    file:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个任务是实现`interface`模块。在`counter`包目录中创建`interface.py`文件，并在该文件中输入以下内容：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These are just placeholders for our `counter` package's public functions; we'll
    implement these one at a time, starting with the `reset()` function.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是我们`counter`包的公共函数的占位符；我们将逐一实现这些函数，从`reset()`函数开始。
- en: 'Following the recommended practice of documenting each function using a docstring,
    let''s start by describing what this function does. Edit the existing definition
    for your `reset()` function so that it looks like the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循使用文档字符串记录每个函数的推荐做法，让我们从描述这个函数做什么开始。编辑现有的`reset()`函数定义，使其看起来像以下内容：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Remember that a docstring is a triple-quoted string (a string that spans multiple
    lines) which is "attached" to a function. A docstring typically starts with a
    one line description of what the function does. If more information is required,
    this will be followed by a single blank line, followed by one or more lines describing
    the function in more detail. As you can see, our docstring consists of a one-line
    description and one additional line providing more information about our function.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，文档字符串是一个三引号字符串（跨越多行的字符串），它“附加”到一个函数上。文档字符串通常以对函数做什么的一行描述开始。如果需要更多信息，这将后跟一个空行，然后是一行或多行更详细描述函数的信息。正如您所看到的，我们的文档字符串包括一行描述和一行额外提供有关函数的更多信息。
- en: 'We now need to implement this function. Since our counter package needs to
    keep track of the number of times each unique value has occurred, it makes sense
    to store this information in a dictionary mapping unique values to the number
    of occurrences. We can store this dictionary as a private global variable which
    is initialized by our `reset()` function. Knowing this, we can go ahead and implement
    the remainder of our `reset()` function:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要实现这个函数。由于我们的计数器包需要跟踪每个唯一值出现的次数，将这些信息存储在一个将唯一值映射到出现次数的字典中是有意义的。我们可以将这个字典存储为一个私有全局变量，由我们的`reset()`函数初始化。知道了这一点，我们可以继续实现我们`reset()`函数的其余部分：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With the private `_counts` global defined, we can now implement the `add()`
    function. This function records the occurrence of a given value, storing the results
    into the `_counts` dictionary. Replace your placeholder implementation of the
    `add()` function with the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有了私有的`_counts`全局变量定义，我们现在可以实现`add()`函数。这个函数记录给定值的出现次数，并将结果存储到`_counts`字典中。用以下代码替换`add()`函数的占位实现：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'There shouldn''t be any surprises here. Our final function, `totals()`, returns
    the values which were added to the `_counts` dictionary, along with how often
    each value occurred. Here is the necessary code, which should replace your existing
    placeholder for the `totals()` function:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里不应该有任何意外。我们的最终函数`totals()`返回了添加到`_counts`字典中的值，以及每个值出现的次数。以下是必要的代码，应该替换您现有的`totals()`函数的占位符：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This completes our first implementation of the `counter` package. We''ll try
    it out using the ad hoc testing techniques we learned about in the previous chapter:
    open a terminal or command-line window and use the `cd` command to set the current
    directory to the outermost `counter` directory. Then, type `python` to start the
    Python interactive interpreter, and try entering the following commands:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们对`counter`包的第一个实现。我们将尝试使用我们在上一章学到的临时测试技术来测试它：打开一个终端或命令行窗口，使用`cd`命令将当前目录设置为最外层的`counter`目录。然后，输入`python`启动Python交互解释器，并尝试输入以下命令：
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'All going well, you should see the following output:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一切顺利的话，您应该会看到以下输出：
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This tells you that the value `1` occurred twice and the value `2` occurred
    once—which is exactly what your calls to the `add()` function indicated.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉您值`1`出现了两次，值`2`出现了一次——这正是您对`add()`函数的调用所表明的。
- en: 'Now that our package appears to be working, let''s create some unit tests so
    that we can test our package more systematically. Create a new file named `tests.py`
    in the outermost `counter` directory and enter the following code into this file:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的软件包似乎正在工作，让我们创建一些单元测试，以便更系统地测试我们的软件包。在最外层的`counter`目录中创建一个名为`tests.py`的新文件，并将以下代码输入到这个文件中：
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you can see, we have written two unit tests: one to check that the values
    we added are reflected in the counter''s totals, and a second test to ensure that
    the `reset()` function is correctly resetting the counter, discarding any values
    that were added before `reset()` was called.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们编写了两个单元测试：一个用于检查我们添加的值是否反映在计数器的总数中，另一个用于确保`reset()`函数正确地重置计数器，丢弃了在调用`reset()`之前添加的任何值。
- en: 'To run these tests, exit the Python interactive interpreter by pressing *Control*
    + *D*, and then type the following into the command line:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行这些测试，退出Python交互解释器，按下*Control* + *D*，然后在命令行中输入以下内容：
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'All going well, you should see the following output, indicating that both of
    your unit tests ran without any errors:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一切顺利的话，您应该会看到以下输出，表明您的两个单元测试都没有出现错误：
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The inevitable changes
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可避免的变化
- en: 'At this stage, we now have a properly working `counter` package with good documentation
    and unit tests. Imagine, however, that the requirements for your package now changes,
    causing major problems for your design: instead of keeping a simple count of the
    number of unique values, you now need to support *ranges* of values. For example,
    the user of your package might define ranges of values from 0 to 5, 5 to 10, and
    10 to 15; values within each range are grouped together for the purposes of counting.
    The following illustration shows how this is done:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们现在有一个完全正常工作的`counter`软件包，具有良好的文档和单元测试。然而，想象一下，您的软件包的要求现在发生了变化，对您的设计造成了重大问题：现在不再是简单地计算唯一值的数量，而是需要支持*值的范围*。例如，您的软件包的用户可能会定义从0到5、5到10和10到15的值范围；每个范围内的值都被分组在一起进行计数。以下插图显示了如何实现这一点：
- en: '![The inevitable changes](graphics/B05012_9_01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![不可避免的变化](graphics/B05012_9_01.jpg)'
- en: 'To allow your package to support ranges, you will need to change the interface
    to the `reset()` function to accept an optional list of range values. For example,
    to count values between 0 and 5, 5 and 10, and 10 and 15, the `reset()` function
    can be called with the following parameter:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使您的软件包支持范围，您需要更改接口以接受可选的范围值列表。例如，要计算0到5、5到10和10到15之间的值，可以使用以下参数调用`reset()`函数：
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If no parameter is passed to `counter.reset()`, then the entire package should
    continue to work as it does at present, recording unique values rather than ranges.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有参数传递给`counter.reset()`，那么整个软件包应该继续像现在一样工作，记录唯一值而不是范围。
- en: 'Let''s implement this new feature. First off, edit the `reset()` function so
    that it looks like the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现这个新功能。首先，编辑`reset()`函数，使其看起来像下面这样：
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The only difference here, other than changing the documentation, is that we
    now accept an optional `ranges` parameter and store this into the private `_ranges`
    global.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里唯一的区别，除了更改文档，就是我们现在接受一个可选的`ranges`参数，并将其存储到私有的`_ranges`全局变量中。
- en: 'Let''s now update the `add()` function to support ranges. Change your source
    code so that this function looks like the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更新`add()`函数以支持范围。更改您的源代码，使得这个函数看起来像下面这样：
- en: '[PRE18]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: There's no change to the interface for this function; the only difference is
    behind the scenes, where we now check to see whether we are calculating totals
    for the ranges of values, and if so, we set the key into the `_counts` dictionary
    to be a `(min_value, max_value)` tuple identifying the range. This code is a little
    messy, but it works, nicely hiding this complexity from the code using this function.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的接口没有变化；唯一的区别在于，在幕后，我们现在检查我们是否正在计算值范围的总数，如果是的话，我们将键设置为标识范围的`(min_value,
    max_value)`元组。这段代码有点混乱，但它可以很好地隐藏这个函数的使用代码中的复杂性。
- en: 'The final function we need to update is the `totals()` function. The behavior
    of this function will change if we are using ranges. Edit your copy of the interface
    module so that the `totals()` function looks like the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更新的最后一个函数是`totals()`函数。如果我们使用范围，这个函数的行为将会改变。编辑接口模块的副本，使`totals()`函数看起来像下面这样：
- en: '[PRE19]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This code is a bit complicated, but we have updated our function''s docstring
    to describe the new behavior. Let''s now test our code; fire up the Python interpreter
    and try entering the following instructions:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码有点复杂，但我们已经更新了函数的文档字符串，以描述新的行为。现在让我们测试我们的代码；启动Python解释器，尝试输入以下指令：
- en: '[PRE20]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'All going well, you should see the following output:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一切顺利的话，您应该会看到以下输出：
- en: '[PRE21]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This corresponds to the three ranges you have defined, and shows that there
    are three values falling into the first range, two falling into the second range,
    and just one value falling into the third range.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这对应于您定义的三个范围，并显示有三个值落入第一个范围，两个值落入第二个范围，只有一个值落入第三个范围。
- en: Change management
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变更管理
- en: At this stage, it seems that your updated package is a success. Just like the
    example we saw in [Chapter 6](ch06.html "Chapter 6. Creating Reusable Modules"),
    *Creating Reusable Modules*, we were able to use modular programming techniques
    to limit the number of changes that were needed to support a major new feature
    within our package. We have performed some tests, and the updated package seems
    to be working as it should.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，似乎您更新后的软件包是成功的。就像我们在[第6章](ch06.html "第6章 创建可重用模块")中看到的例子一样，*创建可重用模块*，我们能够使用模块化编程技术来限制需要支持软件包中一个重大新功能所需的更改数量。我们进行了一些测试，更新后的软件包似乎正在正常工作。
- en: 'However, we won''t stop there. Since we added a major new feature to our package,
    we should add some unit tests to ensure that this feature is working as it should.
    Edit your `tests.py` script and add the following new test case to this module:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们不会止步于此。由于我们向我们的包添加了一个重要的新功能，我们应该添加一些单元测试来确保这个功能的正常工作。编辑您的`tests.py`脚本，并将以下新的测试用例添加到此模块：
- en: '[PRE22]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This is very similar to the code we used for our ad hoc testing. After saving
    the updated `tests.py` script, run it. This should reveal something very interesting:
    your new package suddenly crashes:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们用于临时测试的代码非常相似。保存更新后的`tests.py`脚本后，运行它。这应该会显示出一些非常有趣的东西：您的新包突然崩溃了：
- en: '[PRE23]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Our `test_range_totals()` unit test is failing because our package crashes
    with an `UnboundLocalError` when we try to add the value `19.1` to our ranged
    counter. A moment''s reflection will show what is wrong here: we have defined
    three ranges, `0-5`, `5-10`, and `10-15`, but we are now trying to add the value
    `19.1` to our counter. Since `19.1` is outside of the ranges we have set up, our
    package can''t assign a range to this value, so our `add()` function is crashing.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`test_range_totals()`单元测试失败，因为我们的包在尝试将值`19.1`添加到我们的范围计数器时会出现`UnboundLocalError`。稍加思考就会发现问题所在：我们定义了三个范围，`0-5`，`5-10`和`10-15`，但现在我们试图将值`19.1`添加到我们的计数器中。由于`19.1`超出了我们设置的范围，我们的包无法为这个值分配一个范围，因此我们的`add()`函数崩溃了。
- en: 'It''s easy enough to fix this problem; add the following highlighted lines
    to your `add()` function:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易解决这个问题；将以下突出显示的行添加到您的`add()`函数中：
- en: '[PRE24]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This causes our package to return a `RuntimeError` if the user attempts to add
    a value that falls outside of the ranges that we have set up.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致我们的包在用户尝试添加超出我们设置的范围的值时返回`RuntimeError`。
- en: 'Unfortunately, our unit test is still crashing, only now it fails with a `RuntimeError`.
    To fix this, remove the `counter.add(19.1)` line from the `test_range_totals()`
    unit test. We still want to test for this error condition, but we''ll do so in
    a separate unit test. Add the following to the end of your `RangeCounterTestCase`
    class:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们的单元测试仍然崩溃，只是现在以`RuntimeError`的形式失败。为了解决这个问题，从`test_range_totals()`单元测试中删除`counter.add(19.1)`行。我们仍然希望测试这种错误情况，但我们将在单独的单元测试中进行。在您的`RangeCounterTestCase`类的末尾添加以下内容：
- en: '[PRE25]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This unit test checks specifically for the error condition we found earlier,
    and ensures that the package is correctly returning a `RuntimeError` if the supplied
    value is outside of the requested ranges.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单元测试专门检查我们之前发现的错误情况，并确保包在提供的值超出请求的范围时正确返回`RuntimeError`。
- en: Notice that we now have four separate unit tests defined for our package. We
    are still testing the package to make sure it runs without ranges, as well as
    testing all our range-based code. Because we have implemented (and are starting
    to flesh out) a range of unit tests for our package, we can be confident that
    any changes we made to support ranges won't break any existing code that doesn't
    use the new range-based features.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们现在为我们的包定义了四个单独的单元测试。我们仍在测试包，以确保它在没有范围的情况下运行，以及测试我们所有基于范围的代码。因为我们已经实施（并开始充实）了一系列针对我们的包的单元测试，我们可以确信，为了支持范围所做的任何更改都不会破坏不使用新基于范围的功能的任何现有代码。
- en: As you can see, the modular programming techniques we have used help us minimize
    the changes required to our code, and the unit tests we have written help to ensure
    that the updated code continues to work as we expect it to. In this way, the use
    of modular programming techniques allow us to deal with changing requirements
    and the ongoing process of programming in the most effective way possible.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们使用的模块化编程技术帮助我们最大限度地减少了对代码所需的更改，并且我们编写的单元测试有助于确保更新后的代码继续按我们期望的方式工作。通过这种方式，模块化编程技术的使用使我们能够以最有效的方式处理不断变化的需求和编程的持续过程。
- en: Dealing with complexity
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理复杂性
- en: 'There is no escaping the fact that computer programs are complicated. In fact,
    as the requirements for a package changes, this complexity only seems to increase
    over time—programs rarely become simpler as you go along. Modular programming
    techniques are an excellent way of dealing with this complexity. Through the application
    of modular techniques and technologies, you can:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 无法逃避计算机程序是复杂的这一事实。事实上，随着对包的要求发生变化，这种复杂性似乎只会随着时间的推移而增加——程序很少在进行过程中变得更简单。模块化编程技术是处理这种复杂性的一种极好方式。通过应用模块化技术和技术，您可以：
- en: Use modules and packages to keep your code well organized no matter how complicated
    it becomes
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模块和包来保持您的代码组织良好，无论它变得多么复杂
- en: Use the standard patterns for modular design, including the divide-and-conquer
    technique, abstraction, and encapsulation, to keep this complexity to a minimum
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模块化设计的标准模式，包括分而治之技术、抽象和封装，将这种复杂性降至最低
- en: Apply unit testing techniques to ensure that your code continues to work as
    it should as you change and expand the scope of your module or package
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将单元测试技术应用于确保在更改和扩展模块或包的范围时，您的代码仍然按预期工作。
- en: Write module- and function-level docstrings to clearly describe what each part
    of your code does so that you can keep track of everything as your program grows
    and changes.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写模块和函数级别的文档字符串，清楚地描述代码的每个部分所做的工作，以便在程序增长和更改时能够跟踪一切。
- en: To get a sense of just how vital these modular techniques and technologies are,
    just think for a moment how much of a mess you would end up with if you do not
    use them while developing a large, complex, and changing system. Without modular
    design techniques and the application of standard patterns such as divide-and-conquer,
    abstraction, and encapsulation, you would find yourself writing disorganized spaghetti
    code with many unexpected side-effects and with new features and changes spread
    throughout your source code. Without unit testing, you would have no way of ensuring
    that your code continues to work as it should as you make changes to it. Finally,
    the lack of embedded documentation would make it very hard to keep track of all
    the various pieces of your system, leading to bugs and poorly-thought-out changes
    as you continue to develop and expand your code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解这些模块化技术和技术有多么重要，只需想一想，如果在开发一个大型、复杂和不断变化的系统时不使用它们，你将会陷入多么混乱的境地。没有模块化设计技术和标准模式的应用，比如分而治之、抽象和封装，你会发现自己编写了结构混乱的意大利面代码，带来许多意想不到的副作用，并且新功能和变化散布在你的源代码中。没有单元测试，你将无法确保你的代码在进行更改时仍然能够正常工作。最后，缺乏嵌入式文档将使跟踪系统的各个部分变得非常困难，导致错误和没有经过深思熟虑的更改，因为你继续开发和扩展你的代码。
- en: For all these reasons, it is clear that modular programming techniques are vital
    to the design and development of any large system, because they help you to deal
    with complexity in the best way possible.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 出于这些原因，很明显模块化编程技术对于任何大型系统的设计和开发至关重要，因为它们帮助你以最佳方式处理复杂性。
- en: Being an effective programmer
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成为一名有效的程序员
- en: Now that you have seen just how useful modular programming techniques are, you
    might wonder why anyone would not want to use them. Other than a lack of understanding,
    why would a programmer eschew modular principles and techniques?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经看到模块化编程技术有多么有用，你可能会想知道为什么会有人不想使用它们。除了缺乏理解之外，为什么程序员会避开模块化原则和技术呢？
- en: 'The Python language has been designed from the ground up to support good modular
    programming techniques, and with the addition of excellent tools such as the Python
    Standard Library, unit tests, and docstrings, it encourages you to apply these
    techniques to your everyday programming practice. Similarly, the use of indentation
    to define the structure of your code automatically encourages you to write well-formatted
    source code where the indentation of your code reflects the logical organization
    of your program. These are not random choices: Python encourages good programming
    practices every step of the way.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Python语言从头开始就被设计为支持良好的模块化编程技术，并且通过优秀的工具（如Python标准库、单元测试和文档字符串）的添加，它鼓励你将这些技术应用到你的日常编程实践中。同样，使用缩进来定义代码的结构自动鼓励你编写格式良好的源代码，其中代码的缩进反映了程序的逻辑组织。这些都不是随意的选择：Python在每一步都鼓励良好的编程实践。
- en: Of course, just like you can write poorly structured and incomprehensible spaghetti
    code using Python, it is possible to avoid using modular techniques and practices
    while developing your programs. But why would you want to?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，就像你可以使用Python编写结构混乱和难以理解的意大利面代码一样，你也可以在开发程序时避免使用模块化技术和实践。但你为什么要这样呢？
- en: Programmers sometimes take shortcuts when writing programs that they consider
    to be "throwaway" code. For example, perhaps you're writing a tiny program that
    you expect to only use once, and then never need to use again. Why take the extra
    time to apply the recommended modular programming practices to this throwaway
    program?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员有时在编写他们认为是“一次性”的代码时会采取捷径。例如，也许你正在编写一个小程序，你只打算使用一次，然后再也不需要使用了。为什么要花额外的时间将推荐的模块化编程实践应用到这个一次性的程序上呢？
- en: The thing is, throwaway code has a funny habit of becoming permanent and growing
    into something much larger. Often, what begins as throwaway code becomes the basis
    for a large and complex system. Code you wrote six months ago can be found and
    reused in a new program. In the end, you never know what is throwaway code and
    what isn't.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，一次性代码有一个有趣的习惯，就是变成永久的，并发展成为一个更大的复杂系统。经常情况下，最初的一次性代码成为一个大型和复杂系统的基础。你六个月前写的代码可能会在新程序中被找到和重用。最终，你永远不知道什么是一次性代码，什么不是。
- en: For these reasons, it is a good idea to *always* apply modular programming practices
    to your code, no matter how large or small it might be. While you won't want to
    spend a lot of time writing extensive docstrings and unit tests for a simple throwaway
    script, you can still apply basic modular techniques to help keep your code organized.
    Don't just save modular programming techniques for your "big" projects.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些原因，无论代码有多大或多小，始终应该应用模块化编程实践。虽然你可能不想花很多时间为一个简单的一次性脚本编写大量的文档字符串和单元测试，但你仍然可以应用基本的模块化技术来帮助保持代码的组织。不要只把模块化编程技术留给你的“大”项目。
- en: Fortunately, the way Python has implemented modular programming makes it extremely
    easy to use, and after a while, you begin to *think* in modular terms before you
    even start writing a single line of code. I believe this is a good thing, because
    modular programming techniques are an essential part of being a good programmer,
    and you should practice these techniques whenever you sit down to program.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Python实现的模块化编程方式非常容易使用，过一段时间后，你开始在编写一行代码之前就以模块化的方式思考。我认为这是一件好事，因为模块化编程技术是成为一名优秀程序员的重要组成部分，你应该在编程时练习这些技术。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, and indeed in this entire book, we have looked at how the application
    of modular programming techniques help you deal with the *process* of programming
    in the most effective way possible. Rather than avoiding change, you are able
    to manage it so that your code continues to work and is improved over time by
    the new requirements that are thrown at it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章，甚至整本书中，我们已经看到模块化编程技术的应用如何帮助你以最有效的方式处理编程的*过程*。你不是在回避变化，而是能够管理它，使得你的代码能够持续工作，并且通过新的需求不断改进。
- en: We have looked at another example of a program that needed to be changed to
    meet an expanding set of requirements, and have seen how modular techniques, including
    the use of docstrings and unit tests, help to write robust and easy to understand
    code that improves as it continues to be developed and changed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了另一个需要根据不断扩大的需求进行更改的程序的例子，并且已经看到了模块化技术的应用，包括使用文档字符串和单元测试，有助于编写健壮且易于理解的代码，随着不断的开发和更改而不断改进。
- en: We have seen how the application of modular techniques is a vital part of dealing
    with the complexity of a program, and that this complexity only increases over
    time. We have learned that, because of this, the use of modular programming techniques
    is an essential part of what it means to be a good programmer. Finally, we have
    seen that modular techniques are something that can be used every time you sit
    down to program, even for simple throwaway scripts, and not something to be saved
    for your "big" projects.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了模块化技术的应用是处理程序复杂性的重要部分，而这种复杂性随着时间的推移只会增加。我们已经了解到，正因为如此，使用模块化编程技术是成为优秀程序员的重要组成部分。最后，我们已经看到，模块化技术是每次你坐下来编程时都可以使用的东西，即使是简单的一次性脚本，而不是要为你的“大”项目保留的东西。
- en: I hope you have found this introduction to the world of modular programming
    useful, and are now starting to apply modular techniques and patterns to your
    own programming. I encourage you to continue to learn as much as you can about
    the various tools that surround good modular programming practice, such as the
    use of docstrings and the Sphinx library to auto-generate documentation for your
    packages, and the use of `virtualenv` to set up and use virtual environments to
    manage your program's package dependencies. The more you continue to use modular
    practices and techniques, the easier it will become—and the more effective you
    will be as a programmer. Happy coding!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你觉得这个关于模块化编程世界的介绍有用，并且现在开始将模块化技术和模式应用到你自己的编程中。我鼓励你继续尽可能多地了解围绕良好的模块化编程实践的各种工具，比如使用文档字符串和Sphinx库来为你的包自动生成文档，以及使用`virtualenv`来设置和使用虚拟环境来管理你程序的包依赖关系。你继续使用模块化实践和技术，它将变得更容易，你作为程序员也将变得更有效率。愉快的编程！
