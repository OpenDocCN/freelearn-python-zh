- en: Appendix A. A Sneak Peek into the Future
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. 未来的一瞥
- en: We covered quite a variety of topics in this book, and we walked through the
    building of three functional and useful web applications. However, books, by nature,
    are of a finite length, while the world of web development tends towards the infinite,
    so we couldn't add everything. In this final chapter, we'll take a whistle-stop
    tour around the technologies that we weren't able to cover in detail. We'll start
    with looking at technologies that could be used directly to expand or improve
    the projects we created in this book. Then, we'll look at some more advanced Flask
    features that we didn't need to use in our projects but which will almost certainly
    be useful in other projects. Finally, we'll have a brief discussion of the technologies
    that are useful for web development in general but are not specific to either
    the projects we built here or to Flask.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们涵盖了各种主题，并且演示了构建三个功能齐全且有用的Web应用程序。然而，书籍本质上是有限的，而Web开发的世界趋向无限，因此我们无法添加所有内容。在本章中，我们将快速浏览我们无法详细介绍的技术。我们将首先看看可以直接用于扩展或改进本书中创建的项目的技术。然后，我们将研究一些更高级的Flask功能，这些功能在我们的项目中并不需要使用，但在其他项目中几乎肯定会有用。最后，我们将简要讨论对Web开发有用但不特定于我们在此构建的项目或Flask的技术。
- en: Expanding the projects
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展项目
- en: The projects we built are all functional, but they are not quite ready for heavy,
    real-time use. If they were to be built out to handle thousands of users or were
    commercial applications, they would need a few more features. These are discussed
    in the following sections.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构建的项目都是功能齐全的，但还不够准备好用于大规模、实时使用。如果它们要扩展到处理成千上万的用户或者是商业应用程序，它们需要一些更多的功能。这些将在接下来的部分中讨论。
- en: Adding a domain name
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加域名
- en: We accessed all of our projects using the IP address of our VPS. You're almost
    certainly used to visiting web applications using domain names rather than IP
    addresses. When you use a domain name, such as [http://google.com](http://google.com),
    your browser first sends off a request to a DNS server to find out what the IP
    address associated with this domain is. DNS servers are similar to huge automatic
    telephone books that exist solely to translate the domain names that humans find
    easier to remember (such as [http://google.com](http://google.com)) in than the
    IP addresses that organize the Internet (for example, 123.456.789.123).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用VPS的IP地址访问了所有项目。您几乎肯定习惯了使用域名而不是IP地址访问Web应用程序。当您使用域名（例如[http://google.com](http://google.com)）时，您的浏览器首先向DNS服务器发送请求，以找出与此域关联的IP地址是什么。DNS服务器类似于巨大的自动电话簿，专门用于将人类更容易记住的域名（例如[http://google.com](http://google.com)）翻译成组织互联网的IP地址（例如123.456.789.123）。
- en: To use a domain name instead of the IP address, you need to purchase one from
    a registrar. Often your **Internet Service Provider** (**ISP**) can assist you
    with purchasing a domain name (such as `yourname.com`). Domain names are normally
    fairly inexpensive, and you can get them for as little as a few dollars a year.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用域名而不是IP地址，您需要从注册商那里购买一个。通常，您的**互联网服务提供商**（**ISP**）可以帮助您购买域名（例如`yourname.com`）。域名通常价格不贵，您可以每年以几美元的价格购买。
- en: Once you purchase a domain name, you need to set up the DNS settings correctly.
    Most ISPs have an online control panel where you can do this yourself, but you
    may have to contact them to assist you. Your domain needs to point to your VPS.
    To do this, you create an "A" type DNS record that maps the domain to your IP.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦购买了域名，您需要正确设置DNS设置。大多数ISP都有在线控制面板，您可以自己完成这些设置，但您可能需要联系他们来协助您。您的域名需要指向您的VPS。为此，您需要创建一个将域名映射到您的IP的“A”类型DNS记录。
- en: Once your domain name points at your server, you can configure Apache to recognize
    it by using it instead of our `example.com` placeholder that we put in the Apache
    configuration files, such as `/etc/apache2/sites-available/waitercaller.conf`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的域名指向您的服务器，您可以配置Apache来识别它，而不是使用我们在Apache配置文件中放置的`example.com`占位符，例如`/etc/apache2/sites-available/waitercaller.conf`。
- en: Changes to domain names also take a while to propagate—that is, the major DNS
    servers of the world need to be updated so that when someone visits your domain
    name, the DNS server can redirect them to your IP address. DNS propagation can
    take hours.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 域名的更改也需要一段时间才能传播，即世界上的主要DNS服务器需要更新，以便当有人访问您的域名时，DNS服务器可以将其重定向到您的IP地址。DNS传播可能需要几个小时。
- en: Adding HTTPS
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加HTTPS
- en: You've probably noticed that banks, large corporations such as Google and Microsoft,
    and an ever-growing number of other companies, have their websites automatically
    redirect to an **HTTPS** version. The "S" stands for *secure*, so the full acronym
    becomes **Hyper Text Transport Protocol Secure**. Whenever you see HTTPS in your
    browser's navigation bar (normally with a green padlock next to it) it means that
    all traffic flowing between you and the server is encrypted. This prevents so-called
    *man in the middle attacks*, where a malicious person between you and the server
    can view or modify the content that you and the server exchange.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，银行、谷歌和微软等大型公司以及越来越多的其他公司的网站都会自动重定向到**HTTPS**版本。这里的“S”代表*安全*，因此完整的缩写变成了**超文本传输安全协议**。每当您在浏览器的导航栏中看到HTTPS（通常旁边有一个绿色的挂锁）时，这意味着您和服务器之间的所有流量都是加密的。这可以防止所谓的*中间人攻击*，即位于您和服务器之间的恶意人员可以查看或修改您和服务器交换的内容。
- en: Until recently, this encryption was achieved by the site owner by purchasing
    an expensive certificate from **Certificate Authority** (**CA**). CA's job is
    to act as a trusted third party between you and the server, issuing a signed certificate
    to the owner of a site. This certificate can be used to set up an encrypted channel
    between the client and the server. Because of the prohibitive cost, HTTPS was
    only used where security was absolutely necessary (for example, in online banking)
    and by companies such as Google who could afford the high fees. With everyone
    beginning to realize that the trust-based model of World Wide Web is inherently
    flawed, HTTPS is becoming more and more popular even for small blogs and personal
    websites. Companies such as Let's Encrypt ([https://letsencrypt.org](https://letsencrypt.org))
    are now offering certificates for free and these certificates can easily be installed
    and configured to work with popular web servers, such as Apache.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，这种加密是由网站所有者通过从**证书颁发机构**（**CA**）购买昂贵的证书来实现的。CA的工作是充当您和服务器之间的可信第三方，向网站所有者签发一个签名证书。这个证书可以用来建立客户端和服务器之间的加密通道。由于成本过高，HTTPS只在绝对必要的安全性场合（例如在线银行业务）和像谷歌这样能够支付高额费用的公司中使用。随着每个人开始意识到基于信任的万维网模型本质上存在缺陷，HTTPS变得越来越受欢迎，即使是对于小型博客和个人网站也是如此。像Let's
    Encrypt（[https://letsencrypt.org](https://letsencrypt.org)）这样的公司现在提供免费证书，这些证书可以轻松安装和配置以与流行的Web服务器（如Apache）一起使用。
- en: For our final project, as we are handling sensitive data (specifically passwords),
    using HTTPS is a must for nontrivial usage of our application, and it's also desirable
    for our other two projects (HTTPS is always better than HTTP). Although the process
    of setting up certificates to work with your web server is far simpler now than
    it was a couple of years ago, a full walk-through of how to set up Apache2 to
    play with a CA certificate is beyond the scope of this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的最终项目，由于我们处理敏感数据（特别是密码），对于我们的应用程序的非平凡使用，使用HTTPS是必须的，对于我们的其他两个项目也是理想的（HTTPS总是比HTTP更好）。尽管现在设置证书以与您的Web服务器一起使用的过程比几年前简单得多，但是如何设置Apache2以与CA证书一起使用的完整演练超出了本书的范围。
- en: 'However, if you only take the time to learn about one of the technologies mentioned
    in this chapter, then it should be this one. Here is a link to a very simple Digital
    Ocean tutorial that shows you how to set up the certificate on Ubuntu 14.04 to
    work with Apache2 (the exact configuration we used in this book):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您只花时间了解本章提到的技术中的一种，那么应该是这个。这是一个非常简单的Digital Ocean教程链接，向您展示如何在Ubuntu 14.04上设置证书以与Apache2一起使用（这是本书中使用的确切配置）：
- en: '[https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-14-04](https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-14-04)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-14-04](https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-14-04)'
- en: E-mail confirmation for new registrations
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新注册的电子邮件确认
- en: 'You probably noted in our third project that our registration process was a
    little bit unusual. The normal way for new users to register on a site is as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第三个项目中，您可能注意到我们的注册流程有点不同寻常。新用户在网站上注册的正常方式如下：
- en: User fills out registration form and submits it.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户填写注册表并提交。
- en: Server saves the data in the database.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器将数据保存在数据库中。
- en: Server generates a unique and secure token and stores the token associated with
    the registration, which it marks as incomplete.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器生成一个唯一且安全的令牌，并将该令牌与注册关联起来，并将其标记为不完整。
- en: Server e-mails the token to the user in the form of a URL and requests that
    the user click on the URL to confirm the account.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器通过URL向用户发送一个唯一且安全的令牌，并请求用户点击该URL以确认账户。
- en: User clicks on URL with the unique token.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户点击带有唯一令牌的URL。
- en: Server finds an incomplete registration associated with this token and marks
    the registration as confirmed.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器找到与此令牌关联的不完整注册，并将注册标记为已确认。
- en: The preceding process is in order to prove that the user gave us a real e-mail
    address to which he or she has access. Of course, the user does not want to wait
    for someone to manually send an e-mail, so the confirmation e-mail has to be sent
    automatically. This leads to a few complications, including the need to set up
    a mail server and the fact that the automatic confirmation e-mail we send may
    well end up in the user's spam folder, leading to frustration all round. Another
    option is to use an *E-mail as a service* platform, such as Amazon's **Simple
    E-mail Service** (**SES**). However, these are not usually free.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 上述过程是为了证明用户向我们提供了一个真实的电子邮件地址，并且可以访问该地址。当然，用户不希望等待某人手动发送电子邮件，因此确认电子邮件必须自动发送。这会导致一些复杂情况，包括需要设置邮件服务器以及我们发送的自动确认电子邮件可能最终会出现在用户的垃圾邮件文件夹中，导致所有人都感到沮丧。另一个选择是使用*电子邮件作为服务*平台，例如亚马逊的**简单电子邮件服务**（**SES**）。但是，这些通常不是免费的。
- en: Once the user has a confirmed e-mail account, we can also use it to allow the
    user to reset a forgotten password. Again, this would involve sending an automatic
    e-mail to users who wanted to reset their password. The e-mail would again contain
    a secure unique token in a URL that the user would click on to prove that he or
    she really did make the password reset request. We would then allow the user to
    type in a new password and update the database with the new (hashed and salted)
    password. Note that we can't and shouldn't send the user his or her own password
    because we store only the salted and hashed version of the password; we have no
    way of discovering the forgotten one.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户确认了电子邮件账户，我们也可以用它来允许用户重置忘记的密码。同样，这将涉及向想要重置密码的用户发送自动电子邮件。该电子邮件将再次包含URL中的安全唯一令牌，用户将点击该令牌以证明他或她确实发出了密码重置请求。然后，我们将允许用户输入新密码，并使用新的（散列和加盐的）密码更新数据库。请注意，我们不能也不应该发送用户自己的密码，因为我们只存储密码的加盐和散列版本；我们无法发现忘记的密码。
- en: The complete user account system with automatic e-mail confirmations and the
    "forgot your password" functionality is fairly complex. We could set it up using
    nothing but Python and Flask and an e-mail server, but in the next section, we'll
    also discuss some more Flask extensions that could make this process easier.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的用户帐户系统具有自动电子邮件确认和“忘记密码”功能是相当复杂的。我们可以使用Python和Flask以及电子邮件服务器来设置它，但在下一节中，我们还将讨论一些更多的Flask扩展，这些扩展可以使这个过程更容易。
- en: Google Analytics
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谷歌分析
- en: If we run any of the web applications commercially, we'll probably be interested
    in how many people actually use them. This would help us in deciding how (and
    whether) to monetize our applications and provide other useful insights.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们商业运行任何网络应用程序，我们可能会对实际使用它们的人数感兴趣。这将帮助我们决定如何（以及是否）为我们的应用程序收费，并提供其他有用的见解。
- en: The most common way to achieve this is through Google Analytics. This is a service
    from Google to track not only how many people visit your site but also how long
    they spend on it, how they found it, their country, information about the device
    they use for web browsing, and many other insightful statistics. Google Analytics
    is free, and to get started with using it, you need to simply create an account
    on [https://analytics.google.com](https://analytics.google.com) (or use your existing
    Google account). After filling in some information about your site, you'll be
    given a short snippet of JavaScript. This JavaScript code contains a unique tracking
    ID assigned to your site. You need to add the JavaScript code to your site, and
    whenever anyone visits the site, the JavaScript code will be loaded into their
    web browser and will send information about them to Google, which will then use
    the unique ID to associate the information with you. On the Google Analytics dashboard,
    you can then see graphs of the number of visitors, the length of their visits,
    and many more pieces of information.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Google Analytics是实现这一目标的最常见方式。这是谷歌提供的一项服务，不仅可以追踪有多少人访问您的网站，还可以追踪他们在网站上花费的时间、他们是如何找到网站的、他们来自哪个国家、关于他们用于网页浏览的设备的信息，以及许多其他有见地的统计数据。Google
    Analytics是免费的，要开始使用它，您只需要在[https://analytics.google.com](https://analytics.google.com)上创建一个帐户（或使用您现有的谷歌帐户）。在填写有关您的网站的一些信息后，您将获得一小段JavaScript代码。这段JavaScript代码包含一个分配给您的网站的唯一跟踪ID。您需要将JavaScript代码添加到您的网站上，每当有人访问网站时，JavaScript代码将加载到他们的网络浏览器中，并将有关他们的信息发送到谷歌，然后谷歌将使用唯一ID将信息与您关联起来。在Google
    Analytics仪表板上，您可以看到访问者数量、访问时间的图表，以及许多其他信息。
- en: In the case of our waiter-caller project, we'd add the JavaScript at the end
    of the `base.html` file along with the Bootstrap JavaScript code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的服务员呼叫项目中，我们将在`base.html`文件的末尾添加JavaScript代码以及Bootstrap JavaScript代码。
- en: Scalability
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可扩展性
- en: The best problem to have as a web application creator is having made an application
    that is too popular. If lots of people are visiting your application, it means
    that you created something good (and you can possible start charging people money
    for it). Our little VPS will not handle a lot of traffic. If thousands of people
    visit the site simultaneously, we'll run out of network bandwidth, processing
    capacity, memory, and disk space very quickly.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 作为网络应用程序创建者最好的问题是创建了一个太受欢迎的应用程序。如果有很多人访问您的应用程序，这意味着您创造了一些好东西（并且可能开始向人们收费）。我们的小型VPS将无法处理大量流量。如果成千上万的人同时访问网站，我们将很快耗尽网络带宽、处理能力、内存和磁盘空间。
- en: 'A complete discussion on creating scalable web applications would be a book
    all on its own. However, some of the steps we would need to take would be:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 关于创建可扩展的Web应用程序的完整讨论将是一本专门的书。然而，我们需要采取的一些步骤包括：
- en: '**Run the database on a dedicated machine**: At the moment, we run our web
    server and database on the same physical machine. For a larger web application,
    the database would have its own dedicated machine so that heavy database use (for
    instance, many restaurant patrons creating new requests) wouldn''t have a negative
    impact on the people who just wanted to browse our home page. Normally, the database
    machine would have lots of disk space and memory, while the machine running the
    web server would focus more on having high bandwidth availability and processing
    power.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在专用机器上运行数据库**：目前，我们在同一台物理机器上运行我们的Web服务器和数据库。对于较大的Web应用程序，数据库将有自己的专用机器，以便大量的数据库使用（例如，许多餐厅顾客创建新请求）不会对只想浏览我们主页的人产生负面影响。通常情况下，数据库机器会有大量的磁盘空间和内存，而运行Web服务器的机器将更注重高带宽可用性和处理能力。'
- en: '**Run a load balancer**: If we have a lot of visitors, one machine will not
    be able to keep up with the load no matter how big and powerful the machine is.
    We would therefore run several duplicate web server machines. The problem would
    then be to evenly distribute new visitors among all the different machines. To
    solve this, we would use something called a *load balancer*, which is responsible
    for nothing but accepting the initial request from the user (that is, when the
    user visits your homepage) and assigning this user to one of the replica web servers.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行负载均衡器**：如果我们有很多访问者，一台机器无论多么大和强大都无法跟上负载。因此，我们将运行几台重复的Web服务器。然后问题将是如何均匀地将新访问者分配到所有不同的机器中。为了解决这个问题，我们将使用一个叫做*负载均衡器*的东西，它负责接受用户的初始请求（也就是当用户访问您的主页时）并将这个用户分配给一个复制的Web服务器。'
- en: As we grow bigger, the situation would grow more and more complicated, and we
    would add replica database machines as well. A popular site requires full-time
    maintenance, often by a team of people, because hardware fails, malicious users
    exist, and updates (which are necessary to mitigate attacks by malicious users)
    tend to break the compatibility between software. On the bright side, if any web
    applications were to grow popular enough to warrant the preceding, the application
    would probably also generate enough revenue to make all the issues discussed an
    "SEP", or somebody else's problem. That is, we could hire a system's administrator,
    a database administrator, and a chief security officer, tell them to sort it out,
    and spend the rest of our days on ocean cruises. On this note, let's take a look
    at some Flask-specific expansions to our knowledge.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的规模越来越大，情况会变得越来越复杂，我们还会添加副本数据库机器。一个受欢迎的网站需要全天候维护，通常需要一个团队的人来维护，因为硬件会出现故障，恶意用户存在，而更新（为了减轻恶意用户的攻击而必要）往往会破坏软件之间的兼容性。好的一面是，如果任何Web应用程序变得足够受欢迎，需要上述的情况，那么这个应用程序可能也会产生足够的收入，以至于让所有讨论的问题成为“SEP”，或者是别人的问题。也就是说，我们可以雇佣一个系统管理员，一个数据库管理员和一位首席安全官，让他们解决问题，然后度过余生在海上巡航。在这一点上，让我们来看看一些关于Flask的特定扩展，以丰富我们的知识。
- en: Expanding your Flask knowledge
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展你的Flask知识
- en: You might expect that Flask, being a micro framework, could be covered in its
    entirety in a single book. However, there are some potentially very useful parts
    of Flask that we didn't need for any of our three projects. We'll briefly outline
    these here.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能期望Flask作为一个微框架，可以在一本书中完整地介绍。然而，Flask有一些潜在非常有用的部分，我们在我们的三个项目中都不需要。我们将在这里简要概述这些部分。
- en: VirtualEnv
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VirtualEnv
- en: The first library worth mentioning is not actually Flask-specific, and if you've
    spent some time on Python development before, you will almost certainly come across
    it. `VirtualEnv` is a Python library that creates a virtual Python environment
    on your machine. It can be used in conjunction with Flask either only on your
    development machine or both on your development machine and server. Its main purpose
    is to isolate your entire Python environment into a virtual one, including all
    the Python modules that you use. This has two major benefits. The first is that
    sometimes you need to run two different Python projects on the same machine, but
    each project requires a different version of the same library. Using `VirtualEnv`,
    each project would have its own virtualized version of the Python setup, so it
    becomes trivial to install two different version of the same library. The second
    advantage is that your environment becomes more portable, and in theory, it is
    easy to migrate an application running in a `VirtualEnv` environment to another
    machine that has `VirtualEnv` installed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个值得一提的库实际上并不是特定于Flask的，如果你之前在Python开发上花了一些时间，你几乎肯定会遇到它。`VirtualEnv`是一个Python库，它在你的机器上创建一个虚拟的Python环境。它可以与Flask一起在你的开发机器上使用，也可以在你的开发机器和服务器上同时使用。它的主要目的是将你的整个Python环境隔离成一个虚拟的环境，包括你使用的所有Python模块。这有两个主要的好处。第一个是有时你需要在同一台机器上运行两个不同的Python项目，但每个项目需要不同版本的相同库。使用`VirtualEnv`，每个项目都会有自己的虚拟化的Python设置，因此安装两个不同版本的相同库变得微不足道。第二个优势是你的环境变得更加可移植，理论上，很容易将在`VirtualEnv`环境中运行的应用程序迁移到另一台安装了`VirtualEnv`的机器上。
- en: The `VirtualEnv` environment is widely used for Python development, especially
    for Flask. My decision to not include it in the main body of the book proved highly
    controversial with the reviewers, many of whom felt that the book was incomplete
    without it. I decided not to include it for two reasons. The first is that while
    I was learning Flask, I read many tutorials and examples, which included VirtualEnv.
    I always found the extra work needed for the setup and explanation of `VirtualEnv`
    and virtual environments in general to be distracting from the main content of
    the tutorial (namely, using Flask). The second reason is that I still often do
    not use it in the Flask projects I build today. If you're not running old software
    that depends on a particular version of a particular library, then installing
    useful Python libraries system-wide so that they can be used by all your Python
    applications is convenient. Also, sometimes, VirtualEnv can just become a mission
    without providing any value.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`VirtualEnv`环境在Python开发中被广泛使用，特别是在Flask中。我决定不将其包含在书的主体部分中，这一决定在审阅者中引起了很大的争议，其中许多人认为没有包含它的书是不完整的。我决定不包括它有两个原因。第一个原因是，当我学习Flask时，我阅读了许多教程和示例，其中包括了VirtualEnv。我总是觉得为设置和解释`VirtualEnv`和虚拟环境所需的额外工作会分散教程的主要内容（即使用Flask）。第二个原因是，即使在我今天构建的Flask项目中，我仍然经常不使用它。如果你不运行依赖于特定库的特定版本的旧软件，那么在系统范围内安装有用的Python库，以便它们可以被所有的Python应用程序使用，是很方便的。此外，有时，VirtualEnv可能只是一项任务，而没有提供任何价值。'
- en: 'Of course, you may already have your own opinion on VirtualEnv, in which case
    you''re welcome to go along with it. There''s nothing stopping anyone from building
    any of the projects in this book in a `VirtualEnv` environment if they have a
    little experience. If you have not used it before, it''s well worth looking at.
    You can install it through pip and try it out to take a look at exactly what it
    does and whether it can be of use in your particular scenario. You can read more
    about it and how to use it here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可能已经对VirtualEnv有自己的看法，如果是这样，你可以随意使用它。没有什么能阻止任何人在`VirtualEnv`环境中构建本书中的任何项目，如果他们有一点经验的话。如果你以前没有使用过，那么值得一试。你可以通过pip安装它并尝试一下，看看它到底是做什么的，以及它是否在你的特定场景中有用。你可以在这里阅读更多关于它以及如何使用它的信息：
- en: '[http://docs.python-guide.org/en/latest/dev/virtualenvs/](http://docs.python-guide.org/en/latest/dev/virtualenvs/)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.python-guide.org/en/latest/dev/virtualenvs/](http://docs.python-guide.org/en/latest/dev/virtualenvs/)'
- en: Flask Blueprints
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flask Blueprints
- en: Perhaps the biggest feature of Flask that we haven't mentioned in this book
    is Flask Blueprints. You must have noted after building three Flask applications
    that certain patterns crop up time and again. Repeated code is bad code even over
    a number of different applications; if you find a better way to do something or
    need to make some changes for an update, you don't want to make the same change
    across several applications.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我们在本书中没有提到的Flask最大的特性是Flask蓝图。在构建了三个Flask应用程序之后，您一定会注意到一些模式一次又一次地出现。重复的代码是糟糕的代码，即使在多个不同的应用程序中；如果您找到了更好的方法来做某事，或者需要对更新进行一些更改，您不希望在几个应用程序中进行相同的更改。
- en: Blueprints provide a way to specify patterns for a Flask application. If you
    have several applications that use the same code to return templates or connect
    to a database, you can rather write this common code in a blueprint and then have
    all the applications register the blueprint.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝图提供了一种指定Flask应用程序模式的方法。如果您有几个应用程序使用相同的代码来返回模板或连接到数据库，您可以将这些通用代码写在一个蓝图中，然后让所有应用程序注册该蓝图。
- en: You can read more about Flask Blueprints, take a look at examples, and learn
    how to get started with using them at [http://flask.pocoo.org/docs/0.10/blueprints/](http://flask.pocoo.org/docs/0.10/blueprints/).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://flask.pocoo.org/docs/0.10/blueprints/](http://flask.pocoo.org/docs/0.10/blueprints/)了解更多关于Flask蓝图的信息，查看示例，并学习如何开始使用它们。
- en: Flask extensions
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flask扩展
- en: We looked at quite a few different Flask extensions over the course of our three
    projects. However, because of the educational focus of the book, we chose to write
    some code from scratch that may be better off using existing extensions. (Generally
    when developing, we want to avoid reinventing the wheel. If someone else has already
    put thought into solving a problem and provided a well-developed and well-maintained
    solution, it's better to use their offerings than to try and create our own.)
    Of special interest are the extensions we could use to make our user account system
    simpler and more powerful and those that offer us a more abstract way to talk
    to our database.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的三个项目过程中，我们看了很多不同的Flask扩展。但是，由于本书的教育重点，我们选择从头开始编写一些代码，可能更适合使用现有的扩展。（通常在开发时，我们希望避免重复造轮子。如果其他人已经考虑解决问题并提供了一个经过深思熟虑和良好维护的解决方案，最好使用他们的成果，而不是试图创建我们自己的。）特别感兴趣的是我们可以使用的扩展，使我们的用户帐户系统更简单更强大，以及那些为我们提供更抽象的方式与数据库交互的扩展。
- en: Flask-SQLAlchemy
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Flask-SQLAlchemy
- en: Another controversial decision in this book was of not introducing the Flask-SQLAlchemy
    extension along with MySQL. SQLAlchemy provides a SQL toolkit and ORM to make
    it easier and more secure to interact with SQL databases from a Python environment.
    ORM provides another layer of abstraction between the web application and database.
    Instead of having to write the SQL code directly, one can make calls to a database
    using Python objects, which ORM will then translate to and from SQL. This makes
    the database easier to write and maintain and also more secure (ORM is normally
    very good at mitigating against any potential SQL injection vulnerabilities).
    The reasons to omit it were similar to the reasons to omit VirtualEnv—when learning,
    too many layers of abstraction can do more harm than good, and it's always advantageous
    to have first-hand experience with the problems that tools solve before blindly
    using the tools directly.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中另一个有争议的决定是不介绍Flask-SQLAlchemy扩展与MySQL一起使用。SQLAlchemy提供了一个SQL工具包和ORM，使从Python环境与SQL数据库交互更容易和更安全。ORM提供了另一层抽象，使Web应用程序与数据库之间的交互更加简单。与其直接编写SQL代码，不如使用Python对象调用数据库，然后ORM将其转换为SQL。这样可以更轻松地编写和维护数据库，也更安全（ORM通常非常擅长减轻潜在的SQL注入漏洞）。省略它的原因与省略VirtualEnv的原因类似——在学习时，太多的抽象层可能会带来更多的伤害，而且在盲目使用工具之前，首先亲身体验工具解决的问题总是有利的。
- en: 'For any Flask application that uses a MySQL database, such as our Crime Map
    project, it is highly recommendable to use ORM, as with most Flask extensions.
    Flask-SQLAlchemy is just a wrapper for an existing non-Flask-specific library.
    You can find out more about SQLAlchemy at [http://www.sqlalchemy.org/](http://www.sqlalchemy.org/)
    and a comprehensive guide to Flask-SQLAlchemy, including common usage patterns,
    here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何使用MySQL数据库的Flask应用程序，比如我们的犯罪地图项目，强烈建议使用ORM，就像大多数Flask扩展一样。Flask-SQLAlchemy只是一个现有的非Flask特定库的包装器。您可以在[http://www.sqlalchemy.org/](http://www.sqlalchemy.org/)找到更多关于SQLAlchemy的信息，以及关于Flask-SQLAlchemy的全面指南，包括常见的使用模式：
- en: '[http://flask.pocoo.org/docs/0.10/patterns/sqlalchemy/](http://flask.pocoo.org/docs/0.10/patterns/sqlalchemy/)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://flask.pocoo.org/docs/0.10/patterns/sqlalchemy/](http://flask.pocoo.org/docs/0.10/patterns/sqlalchemy/)'
- en: Flask MongoDB extensions
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Flask MongoDB扩展
- en: There are several Flask extensions that are intended to make interfacing with
    MongoDB easier. As MongoDB is relatively new, none of these has reached quite
    the maturity or is in as wide use as SQLAlchemy; therefore, if you intend to use
    one of them, it is recommended that you examine each to decide which one best
    suits your needs.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个Flask扩展旨在使与MongoDB的交互更容易。由于MongoDB相对较新，这些扩展都没有达到SQLAlchemy的成熟度，也没有被广泛使用；因此，如果您打算使用其中之一，建议您检查每个以决定哪一个最适合您的需求。
- en: Flask-MongoAlchemy
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Flask-MongoAlchemy
- en: 'Perhaps the most similar to SQLAlchemy (and not just by name) is Flask-MongoAlchemy.
    Similarly to SQLAlchemy, MongoAlchemy is not Flask-specific. You can read more
    about the main project here at [http://www.mongoalchemy.org](http://www.mongoalchemy.org).
    Flask-MongoAlchemy is a Flask wrapper for MongoAlchemy, which you can read more
    about here:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 也许最类似于SQLAlchemy（不仅仅是名称）的是Flask-MongoAlchemy。与SQLAlchemy类似，MongoAlchemy也不是Flask特定的。您可以在[http://www.mongoalchemy.org](http://www.mongoalchemy.org)找到有关主项目的更多信息。Flask-MongoAlchemy是MongoAlchemy的Flask包装器，您可以在这里找到更多信息：
- en: '[http://pythonhosted.org/Flask-MongoAlchemy](http://pythonhosted.org/Flask-MongoAlchemy)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://pythonhosted.org/Flask-MongoAlchemy](http://pythonhosted.org/Flask-MongoAlchemy)'
- en: Flask-PyMongo
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Flask-PyMongo
- en: 'A thinner wrapper to MongoDB that is closer to using PyMongo directly as we
    did in our third project is Flask-PyMongo. Unlike MongoAlchemy, this does not
    provide an ORM equivalent; instead, it simply provides a way of connecting to
    MongoDB through PyMongo using syntax that is more consistent with the way Flask
    usually handles external resources. You can have a quick introduction to Flask-PyMongo
    on its GitHub page here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更薄的MongoDB包装器，更接近于直接使用PyMongo，就像我们在第三个项目中所做的那样，是Flask-PyMongo。与MongoAlchemy不同，它不提供ORM等效；相反，它只是提供了一种通过PyMongo连接到MongoDB的方式，使用的语法更符合Flask通常处理外部资源的方式。您可以在其GitHub页面上快速了解Flask-PyMongo：
- en: '[https://github.com/dcrosta/flask-pymongo](https://github.com/dcrosta/flask-pymongo)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/dcrosta/flask-pymongo](https://github.com/dcrosta/flask-pymongo)'
- en: Flask-MongoEngine
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Flask-MongoEngine
- en: Yet another solution to using Flask in conjunction with MongoDB is MongoEngine
    ([http://mongoengine.org](http://mongoengine.org)). This is notable because it
    integrates with WTForms and Flask-Security, which we'll discuss in the following
    sections. You can read more about the Flask-specific extension for Mongo Engine
    at [https://pypi.python.org/pypi/flask-mongoengine](https://pypi.python.org/pypi/flask-mongoengine).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Flask与MongoDB结合的另一个解决方案是MongoEngine ([http://mongoengine.org](http://mongoengine.org))。这很显著，因为它与WTForms和Flask-Security集成，我们将在接下来的部分中讨论。您可以在[https://pypi.python.org/pypi/flask-mongoengine](https://pypi.python.org/pypi/flask-mongoengine)上了解有关Mongo
    Engine的Flask特定扩展的更多信息。
- en: Flask-Mail
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Flask-Mail
- en: If we wanted to implement an automatic e-mail sending solution, such as that
    described earlier in this chapter, a helpful extension would be Flask-Mail. This
    allows you to easily send e-mails from your Flask application along with handling
    attachments and bulk mailing. As mentioned before, these days, it's worthwhile
    to consider using a third-party service such as Amazon's SES instead of sending
    e-mails yourself. You can read more about Flask-Mail at [http://pythonhosted.org/Flask-Mail](http://pythonhosted.org/Flask-Mail).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要实现自动发送电子邮件的解决方案，比如本章前面描述的那样，一个有用的扩展是Flask-Mail。这允许您轻松地从Flask应用程序发送电子邮件，同时处理附件和批量邮寄。正如之前提到的，如今，考虑使用亚马逊的SES等第三方服务来发送电子邮件而不是自己发送是值得的。您可以在[http://pythonhosted.org/Flask-Mail](http://pythonhosted.org/Flask-Mail)上了解更多关于Flask-Mail的信息。
- en: Flask-Security
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Flask-Security
- en: 'The final extension we''ll talk about is Flask-Security. This extension is
    notable because a large part of it is actually built by combining other Flask
    extensions. In some ways, it departs from the Flask philosophy of doing as little
    as possible to be useful and allowing the user full freedom for custom implementations.
    It assumes that you are using one of the database frameworks we described, and
    it pulls together functionality from Flask-Login, WTForms, Flask-Mail, and other
    extensions to attempt to make building user account control systems as straightforward
    as possible. If we used this, we would have had a centralized way of handling
    registering accounts, logging in accounts, encrypting passwords, and sending e-mails
    instead of having to implement each part of the login system separately. You can
    read more about Flask-Security here:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论的最后一个扩展是Flask-Security。这个扩展很显著，因为它的很大一部分实际上是通过组合其他Flask扩展构建的。在某种程度上，它偏离了Flask的哲学，即尽可能少地做事情，以便有用，并允许用户完全自由地进行自定义实现。它假设您正在使用我们描述的数据库框架之一，并从Flask-Login、WTForms、Flask-Mail和其他扩展中汇集功能，试图使构建用户帐户控制系统尽可能简单。如果我们使用这个，我们将有一个集中处理注册帐户、登录帐户、加密密码和发送电子邮件的方式，而不是必须分别实现登录系统的每个部分。您可以在这里了解更多关于Flask-Security的信息：
- en: '[https://pythonhosted.org/Flask-Security](https://pythonhosted.org/Flask-Security)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://pythonhosted.org/Flask-Security](https://pythonhosted.org/Flask-Security)'
- en: Other Flask extensions
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他Flask扩展
- en: 'There are many Flask extensions, and we''ve only highlighted the ones that
    we think would be generally applicable in many web development scenarios here.
    Of course, when you develop a unique web application, you''ll have much more specific
    needs, and chances are that someone has already had a similar need and created
    a solution. You can find an extensive (but not complete) list of Flask extensions
    here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多Flask扩展，我们只强调了我们认为在许多Web开发场景中通常适用的扩展。当然，当您开发一个独特的Web应用程序时，您将有更具体的需求，很可能已经有人有类似的需求并创建了解决方案。您可以在这里找到一个广泛的（但不完整）Flask扩展列表：
- en: '[http://flask.pocoo.org/extensions](http://flask.pocoo.org/extensions)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://flask.pocoo.org/extensions](http://flask.pocoo.org/extensions)'
- en: Expanding your web development knowledge
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展您的Web开发知识
- en: In this book, we focused on backend development—that done through Python or
    Flask. A large part of developing web applications is building a frontend that
    is powerful, aesthetically pleasing, and intuitive to use. Although we provided
    a solid grounding in HTML, CSS, and JavaScript, each of these topics is big enough
    for its own book, and many such books exist.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们专注于后端开发——通过Python或Flask完成。开发Web应用程序的一个重要部分是构建一个功能强大、美观、直观的前端。虽然我们提供了HTML、CSS和JavaScript的坚实基础，但每个主题都足够大，可以有自己的书籍，而且有许多这样的书籍存在。
- en: JavaScript is perhaps the most important of the three. Known as the "language
    of the web", it has gained steadily in popularity over the last few years (although,
    as with all languages, it has its fair share of critics). There are many frameworks
    for building JavaScript-intensive web applications (so many, in fact, that their
    sheer number and the frequency of new ones being released has become a topic of
    humor among developers). We introduced Bootstrap in this book, which includes
    basic JavaScript components, but for more heavily interactive applications, there
    exist larger frameworks. Three of the more popular frontend frameworks include
    AngularJS (built by Google), React.js (built by Facebook), and Ember.js (sponsored
    by a variety of corporations, including Yahoo!). Learning any of these frameworks
    or one of the many others will definitely help you build larger and more complicated
    web applications with richer frontends.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript可能是这三种语言中最重要的。它被称为“Web的语言”，在过去几年中稳步增长（尽管像所有语言一样，它也有其批评者）。有许多用于构建JavaScript密集型Web应用程序的框架（事实上，它们的数量之多以及新框架的发布频率已经成为开发人员之间的笑柄）。我们在本书中介绍了Bootstrap，其中包括基本的JavaScript组件，但对于更加交互式的应用程序，存在着更大的框架。其中三个较受欢迎的前端框架包括AngularJS（由Google开发）、React.js（由Facebook开发）和Ember.js（由包括Yahoo在内的多家公司赞助）。学习其中任何一个框架或其他许多框架中的一个都将帮助您构建更大更复杂的Web应用程序，具有更丰富的前端。
- en: JavaScript is also no longer limited to the frontend, and many modern web applications
    are built using JavaScript on the server side as well. A common way to achieve
    this is through Node.js, which could have fully replaced Python and Flask in any
    of the projects we built.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript也不再局限于前端，许多现代Web应用程序也使用JavaScript在服务器端构建。实现这一点的常见方法是通过Node.js，在我们构建的任何项目中，它完全可以取代Python和Flask。
- en: HTML5 and CSS3 have grown far more powerful than the older technologies they
    evolved from. Earlier, there was a clear division of labor, with HTML for content,
    CSS for styling, and JavaScript for actions. Now, there is far more overlap between
    the capabilities of the three technologies, and some impressive and interactive
    applications are built using only HTML5 and CSS3 without the normal addition of
    JavaScript.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5和CSS3比它们演变而来的旧技术强大得多。以前，HTML用于内容，CSS用于样式，JavaScript用于操作，分工明确。现在，这三种技术的能力之间有了更多的重叠，一些令人印象深刻的交互式应用程序是仅使用HTML5和CSS3构建的，而没有通常的JavaScript补充。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this appendix, we looked forwards and pointed out some key areas and resources
    that will help you move beyond what was covered in detail in this book. We covered
    these areas in three topics: the projects we worked on in this book, the Flask
    resources that we didn''t use, and web development in general.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个附录中，我们展望未来，指出了一些关键领域和资源，这些将帮助您超越本书中详细介绍的内容。我们在三个主题中涵盖了这些领域：本书中我们所做的项目、我们没有使用的Flask资源以及Web开发的一般情况。
- en: This brings us to the end. However, the world of technology is so vast and so
    rapidly moving that, hopefully, this is more of a beginning than an end. As you
    continue your adventures, learning more about life, Python, and web development,
    I hope that some of the ideas presented in this book stay with you.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是结尾。然而，技术世界如此广阔，发展如此迅速，希望这更像是一个开始而不是结束。在您继续冒险，了解更多关于生活、Python和Web开发的知识时，我希望本书中提出的一些想法能够留在您心中。
