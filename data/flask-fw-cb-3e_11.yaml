- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Deployment and Post-Deployment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署和部署后
- en: So far, we have learned how to write Flask applications in different ways. Deploying
    an application and managing the application post-deployment is as important as
    developing it. There can be various ways of deploying an application and choosing
    the best way depends on the requirements. Deploying an application correctly is
    very important from a security and performance point of view. There are multiple
    ways of monitoring an application after deployment, of which some are paid and
    others are free to use. Using them depends on the requirements and features that
    are offered by them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何以不同的方式编写Flask应用程序。部署应用程序和管理部署后的应用程序与开发它一样重要。部署应用程序的方法有很多，选择最佳方法取决于需求。从安全和性能的角度来看，正确部署应用程序非常重要。部署后监控应用程序有多种方式，其中一些是付费的，而另一些则是免费使用的。使用它们取决于它们的需求和提供的功能。
- en: In this chapter, we will talk about various application deployment techniques,
    followed by some monitoring tools that are used post-deployment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论各种应用程序部署技术，然后是部署后使用的某些监控工具。
- en: Each of the tools and techniques we will cover has a set of features. For example,
    adding too much monitoring to an application can prove to be an extra overhead
    to the application and the developers. Similarly, missing out on monitoring can
    lead to undetected user errors and overall user dissatisfaction.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要介绍的每个工具和技术都有一套功能。例如，给应用程序添加过多的监控可能会给应用程序和开发者带来额外的开销。同样，忽略监控可能会导致未检测到的用户错误和整体用户不满。
- en: Note
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In this chapter, I will be focusing on deployment to **Ubuntu 22.04** servers.
    This should cover most cases. I will try to cover any special steps needed for
    macOS and Windows but do not treat those as exhaustive.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将专注于部署到**Ubuntu 22.04**服务器。这应该涵盖大多数情况。我会尝试涵盖macOS和Windows所需的任何特殊步骤，但不要将它们视为详尽的。
- en: Hence, we should choose the tools that we use wisely, which, in turn, will ease
    our lives as much as possible.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们应该明智地选择我们使用的工具，这将反过来尽可能简化我们的生活。
- en: In terms of post-deployment monitoring tools, we will discuss New Relic. Sentry
    is another tool that will prove to be the most beneficial of all from a developer’s
    perspective. We covered this in the *Using Sentry to monitor exceptions* recipe
    in [*Chapter 10*](B19111_10.xhtml#_idTextAnchor502), *Debugging, Error Handling,*
    *and Testing*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署后的监控工具方面，我们将讨论New Relic。Sentry是另一个从开发者的角度来看将证明是最有益的工具。我们已经在[*第10章*](B19111_10.xhtml#_idTextAnchor502)的*使用Sentry监控异常*食谱中介绍了这一点，*调试、错误处理和测试*。
- en: Tip
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Several topics will be covered in this chapter and all of them can be followed/implemented
    independently of each other. You can club some of them together to make use of
    multiple features and I have mentioned this wherever I felt best. As a software
    developer, feel free to use your judgment about which library to use for what
    purpose.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖几个主题，并且它们都可以独立于彼此进行遵循/实施。你可以将其中一些组合起来以利用多个功能，我在认为最合适的地方提到了这一点。作为一名软件开发者，请自由地根据自己的判断选择用于何种目的的库。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Deploying with Apache
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Apache进行部署
- en: Deploying with uWSGI and Nginx
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用uWSGI和Nginx进行部署
- en: Deploying with Gunicorn and Supervisor
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Gunicorn和Supervisor进行部署
- en: Deploying with Tornado
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Tornado进行部署
- en: Using S3 storage for file uploads
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用S3存储进行文件上传
- en: Managing and monitoring application performance with New Relic
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用New Relic管理和监控应用程序性能
- en: Infrastructure and application monitoring with Datadog
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Datadog进行基础设施和应用程序监控
- en: Deploying with Apache
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Apache进行部署
- en: In this recipe, we will learn how to deploy a Flask application with `Apache`,
    which is, arguably, the most popular HTTP server. For Python web applications,
    we will use `mod_wsgi`, which implements a simple Apache module that can host
    any Python applications that support the WSGI interface.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何使用`Apache`部署Flask应用程序，这可以说是最受欢迎的HTTP服务器。对于Python网络应用程序，我们将使用`mod_wsgi`，它实现了一个简单的Apache模块，可以托管任何支持WSGI接口的Python应用程序。
- en: Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that `mod_wsgi` is not the same as Apache and needs to be installed
    separately.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`mod_wsgi`与Apache不同，需要单独安装。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will start with the catalog application from the previous chapter. There
    is no need to make any changes to the existing code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从上一章的目录应用程序开始。不需要对现有代码进行任何修改。
- en: For deploying with Apache, it is important to make sure that the latest version
    of the Apache `httpd` server is installed on the machine on which you intend to
    deploy. Usually, the versions of Apache shipped with the operating systems (especially
    macOS) might be older and will not be supported by the `mod_wsgi` library.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用 Apache 部署，确保在您打算部署的机器上安装了 Apache `httpd` 服务器的最新版本非常重要。通常，操作系统（尤其是 macOS）附带的
    Apache 版本可能较旧，并且不会被 `mod_wsgi` 库支持。
- en: Note
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`httpd` stands for `httpd` refers to the web server that implements the daemon
    created by Apache Software Foundation. `apache` and `httpd` are mostly used interchangeably.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`httpd` 代表 Apache 软件基金会创建的守护进程实现的网络服务器。`apache` 和 `httpd` 通常可以互换使用。'
- en: 'For macOS, `httpd` can be installed using Homebrew:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 macOS，可以使用 Homebrew 安装 `httpd`：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For Ubuntu, `httpd` is provided by default. Just simply upgrade it:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Ubuntu，`httpd` 是默认提供的。只需简单升级即可：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For Windows operating systems, please follow the official documentation at [https://httpd.apache.org/docs/trunk/platform/](https://httpd.apache.org/docs/trunk/platform/).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 操作系统，请遵循官方文档：[https://httpd.apache.org/docs/trunk/platform/](https://httpd.apache.org/docs/trunk/platform/)。
- en: 'Once Apache has been successfully installed/updated, the next step is to install
    the `mod_wsgi` library. It can simply be installed inside your virtual environment:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦成功安装/更新了 Apache，下一步是安装 `mod_wsgi` 库。它可以直接在您的虚拟环境中安装：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How to do it…
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: In stark contrast to the previous editions of this book, `mod_wsgi` now ships
    with a modern `mod_wsgi-express` command, which removes all the complexity of
    writing the Apache `httpd` configuration.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书的前几版截然不同，`mod_wsgi` 现在附带了一个现代的 `mod_wsgi-express` 命令，该命令消除了编写 Apache `httpd`
    配置的所有复杂性。
- en: 'The only argument to the `mod_wsgi-express` command is a file containing the
    Flask application object. So, create a file called `wsgi.py` with the following
    content:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod_wsgi-express` 命令的唯一参数是包含 Flask 应用程序对象的文件。因此，创建一个名为 `wsgi.py` 的文件，并包含以下内容：'
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Important
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: The `app` object needs to be imported as `application` since `mod_wsgi` expects
    the `application` keyword.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `mod_wsgi` 预期 `application` 关键字，因此需要将 `app` 对象导入为 `application`。
- en: How it works…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Run the following command to invoke the web server using `mod_wsgi`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令调用 `mod_wsgi` 运行网络服务器：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, visit `http://localhost:8000/` to see the application in action.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，访问 `http://localhost:8000/` 以查看应用程序的实际运行情况。
- en: You can also run your application on privileged ports such as `80` or `443`
    by providing the `--port` parameter. Just make sure that the shell user/group
    running the command has permission to access the port(s). If not, you can change
    the user/group to the relevant ones by passing the `--user` and `--``group` parameters.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过提供 `--port` 参数在特权端口（如 `80` 或 `443`）上运行您的应用程序。只需确保运行命令的 shell 用户/组有权限访问端口（s）。如果没有，您可以通过传递
    `--user` 和 `--group` 参数将用户/组更改为相关的用户/组。
- en: See also
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: Refer to [http://httpd.apache.org/](http://httpd.apache.org/) to read more about
    Apache.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下链接了解 Apache 的更多信息：[http://httpd.apache.org/](http://httpd.apache.org/)
- en: The latest documentation on `mod_wgsi` can be found at [https://modwsgi.readthedocs.io/en/develop](https://modwsgi.readthedocs.io/en/develop).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod_wgsi` 的最新文档可以在以下链接找到：[https://modwsgi.readthedocs.io/en/develop](https://modwsgi.readthedocs.io/en/develop)。'
- en: You can read about WSGI in general at [http://wsgi.readthedocs.org/en/latest/](http://wsgi.readthedocs.org/en/latest/).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中了解 WSGI 的相关信息：[http://wsgi.readthedocs.org/en/latest/](http://wsgi.readthedocs.org/en/latest/)。
- en: Deploying with uWSGI and Nginx
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 uWSGI 和 Nginx 部署
- en: For those who are already aware of the usefulness of uWSGI and Nginx, not much
    needs to be explained. uWSGI is a protocol as well as an application server and
    provides a complete stack so that you can build hosting services. Nginx is a reverse
    proxy and HTTP server that is very lightweight and capable of handling virtually
    unlimited requests. Nginx works seamlessly with uWSGI and provides many under-the-hood
    optimizations for better performance. In this recipe, we will use uWSGI and Nginx
    together to facilitate the deployment of our application.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于已经了解 uWSGI 和 Nginx 作用的人来说，无需过多解释。uWSGI 既是协议也是应用程序服务器，提供完整的堆栈，以便您可以构建托管服务。Nginx
    是一个非常轻量级的反向代理和 HTTP 服务器，能够处理几乎无限量的请求。Nginx 与 uWSGI 无缝协作，并提供许多底层的优化以获得更好的性能。在本配方中，我们将使用
    uWSGI 和 Nginx 一起部署我们的应用程序。
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use our application from the previous recipe, *Deploying with Apache*,
    and use the same `wsgi.py` file.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前配方中的应用程序，即 *使用 Apache 部署*，并使用相同的 `wsgi.py` 文件。
- en: 'Now, install Nginx and uWSGI. On Debian-based distributions such as Ubuntu,
    they can be easily installed using the following commands:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，安装Nginx和uWSGI。在基于Debian的发行版，如Ubuntu上，它们可以很容易地使用以下命令安装：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: These installation instructions are OS-specific, so please refer to the respective
    documentation as per the OS that you’re using.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些安装说明是针对特定操作系统的，因此请根据您使用的操作系统参考相应的文档。
- en: Make sure that you have a `sites-enabled` folder for Nginx since this is where
    we will keep our site-specific configuration files. Usually, it is already present
    in most installations in the `/etc/` folder. If not, please refer to the OS-specific
    documentation for your OS to figure this out.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您有一个`sites-enabled`文件夹用于Nginx，因为这是我们存放特定站点配置文件的地方。通常，它已经存在于大多数安装的`/etc/`文件夹中。如果没有，请参考您操作系统的特定文档以了解如何解决这个问题。
- en: How to do it…
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to deploy the application using uWSGI first and then combine
    it with Nginx as a reverse proxy:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用uWSGI首先部署应用程序，然后将其与Nginx作为反向代理结合：
- en: 'The first step is to create a file named `wsgi.py`:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是创建一个名为`wsgi.py`的文件：
- en: '[PRE6]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is needed because `uwsgi` expects to find an executable named `application`,
    so we just import our `app` as `application`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为`uwsgi`期望找到一个名为`application`的可执行文件，所以我们只需将我们的`app`导入为`application`。
- en: 'Next, create a file named `uwsgi.ini` in our application root folder:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在我们的应用程序根目录中创建一个名为`uwsgi.ini`的文件：
- en: '[PRE7]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we have configured `uwsgi` to run the `wsgi-file` provided at the HTTP
    address mentioned with the number of workers, as specified in `processes`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经配置了`uwsgi`以运行在`processes`中指定的工人数所提供的HTTP地址上的`wsgi-file`。
- en: 'To test whether uWSGI is working as expected, run the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试uWSGI是否按预期工作，请运行以下命令：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, point your browser to `http://127.0.0.1:9090/`; this should open the home
    page of the application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将您的浏览器指向`http://127.0.0.1:9090/`；这应该会打开应用程序的主页。
- en: Before moving on, edit the preceding file to replace `http-socket` with `socket`.
    This will change the protocol from HTTP to uWSGI (you can read more about this
    at [https://uwsgi-docs.readthedocs.io/en/latest/Protocol.html](https://uwsgi-docs.readthedocs.io/en/latest/Protocol.html)).
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续之前，编辑前面的文件，将`http-socket`替换为`socket`。这将把协议从HTTP更改为uWSGI（您可以在[https://uwsgi-docs.readthedocs.io/en/latest/Protocol.html](https://uwsgi-docs.readthedocs.io/en/latest/Protocol.html)上了解更多信息)。
- en: Important
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: You must keep the `uwsgi` process running. Right now, we have run this as a
    foreground process.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须保持`uwsgi`进程运行。目前，我们已将其作为前台进程运行。
- en: You might want to keep the uWSGI process running automatically in the background
    as a headless service rather than having it run manually in the foreground. There
    are multiple tools to do this, such as `supervisord`, `circus`, and so on. We
    will touch on `supervisord` in the next recipe for a different purpose, but that
    can be replicated here as well. I will leave it to you to try this out for yourself.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望将uWSGI进程作为后台无头服务自动运行，而不是在前景手动运行。有多种工具可以实现这一点，例如`supervisord`、`circus`等等。我们将在下一个菜谱中涉及`supervisord`的不同用途，但也可以在这里复制。我将把它留给你自己尝试。
- en: 'Now, create a new file called `nginx-wsgi.conf`. This will contain the Nginx
    configuration that’s needed to serve our application and the static content:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个名为`nginx-wsgi.conf`的新文件。这将包含为我们提供应用程序和静态内容的Nginx配置：
- en: '[PRE12]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding code block, `uwsgi_pass` specifies the uWSGI server that needs
    to be mapped to the specified location.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，`uwsgi_pass`指定了需要映射到指定位置的uWSGI服务器。
- en: Tip
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `nginx-wsgi.conf` file can be created anywhere. It can be created with your
    code bundle so that it can be version controlled, or it can be placed at `/etc/nginx/sites-available`
    for easier maintenance if you have multiple `.``conf` files.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`nginx-wsgi.conf`文件可以创建在任何位置。它可以与您的代码包一起创建，以便进行版本控制，或者如果您有多个`.conf`文件，可以放置在`/etc/nginx/sites-available`以方便维护。'
- en: 'Create a soft link from this file to the `sites-enabled` folder we mentioned
    earlier using the following command:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从该文件创建到我们之前提到的`sites-enabled`文件夹的软链接：
- en: '[PRE22]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'By default, Nginx comes with a site configuration named `default` in the `sites-available`
    folder with a symlink to the `sites-enabled` folder. Unlink the same to serve
    our application; otherwise, the default will block our application from being
    loaded:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，Nginx在`sites-available`文件夹中附带一个名为`default`的站点配置，并有一个指向`sites-enabled`文件夹的符号链接。取消链接以为我们提供应用程序；否则，默认设置将阻止我们的应用程序被加载：
- en: '[PRE23]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After all of this, reload the Nginx server using the following command:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在完成所有这些之后，使用以下命令重新加载 Nginx 服务器：
- en: '[PRE24]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Point your browser to `http://127.0.0.1/` or `http://<your server IP or domain
    address>` to see the application that serves via Nginx and uWSGI.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的浏览器指向 `http://127.0.0.1/` 或 `http://<您的服务器IP或域名地址>` 以查看通过 Nginx 和 uWSGI 提供的应用程序。
- en: See also
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: Refer to [https://uwsgi-docs.readthedocs.org/en/latest/](https://uwsgi-docs.readthedocs.org/en/latest/)
    for more information on uWSGI.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 uWSGI 的更多信息，请参阅 [https://uwsgi-docs.readthedocs.org/en/latest/](https://uwsgi-docs.readthedocs.org/en/latest/)。
- en: Refer to [https://www.nginx.com/](https://www.nginx.com/) for more information
    on Nginx.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Nginx 的更多信息，请参阅 [https://www.nginx.com/](https://www.nginx.com/)。
- en: There is a good article by DigitalOcean on Nginx and uWSGI. I advise you to
    go through it so that you have a better understanding of the topic. It is available
    at [https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-22-04](https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-22-04).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: DigitalOcean 上有一篇关于 Nginx 和 uWSGI 的好文章。我建议您阅读它，以便更好地理解这个主题。它可在 [https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-22-04](https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-22-04)
    找到。
- en: To get an insight into the differences between Apache and Nginx, I think an
    article by Anturis, which can be found at [https://anturis.com/blog/nginx-vs-apache/](https://anturis.com/blog/nginx-vs-apache/),
    is pretty good.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 Apache 和 Nginx 之间的差异，我认为 Anturis 的一篇文章相当不错，该文章可在 [https://anturis.com/blog/nginx-vs-apache/](https://anturis.com/blog/nginx-vs-apache/)
    找到。
- en: Deploying with Gunicorn and Supervisor
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Gunicorn 和 Supervisor 进行部署
- en: '**Gunicorn** is a WSGI HTTP server for Unix. It is very simple to implement,
    ultra-light, and fairly speedy. Its simplicity lies in its broad compatibility
    with various web frameworks.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**Gunicorn** 是一个适用于 Unix 的 WSGI HTTP 服务器。它非常简单易实现，超轻量级，并且相当快速。它的简单性在于它与各种 Web
    框架的广泛兼容性。'
- en: '**Supervisor** is a monitoring tool that controls various child processes and
    handles starting/restarting these child processes when they exit abruptly, or
    due to some other reason. It can be extended to control processes via the XML-RPC
    API over remote locations without you having to log into the server (we won’t
    discuss this here as it is beyond the scope of this book).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**Supervisor** 是一个监控工具，它可以控制各种子进程，并在这些子进程突然退出或由于其他原因时处理启动/重启这些子进程。它可以扩展到通过
    XML-RPC API 在远程位置控制进程，而无需您登录到服务器（我们在这里不会讨论这一点，因为它超出了本书的范围）。'
- en: One thing to remember is that these tools can be used along with the other tools
    mentioned in the applications in the previous recipe, such as using Nginx as a
    proxy server. This is left to you to try out.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个需要注意的事情是，这些工具可以与其他在先前的菜谱中提到的应用程序一起使用，例如使用 Nginx 作为代理服务器。这留给你去尝试。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will start by installing both the packages – that is, `gunicorn` and `supervisor`.
    Both can be directly installed using `pip`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先安装这两个包——即 `gunicorn` 和 `supervisor`。这两个包都可以直接使用 `pip` 进行安装：
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How to do it…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做这件事...
- en: 'Follow these steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'To check whether the `gunicorn` package works as expected, just run the following
    command from inside our application folder:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查 `gunicorn` 包是否按预期工作，只需从我们的应用程序文件夹中运行以下命令：
- en: '[PRE26]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: After this, point your browser to `http://0.0.0.0:8000/` or `http://<IP address
    or domain name>:8000/` to see the application’s home page.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将您的浏览器指向 `http://0.0.0.0:8000/` 或 `http://<IP地址或域名>:8000/` 以查看应用程序的主页。
- en: 'Now, we need to do the same as in the previous step using Supervisor so that
    this process runs as a daemon that will be controlled by Supervisor itself rather
    than through human intervention. First of all, we need a Supervisor configuration
    file. This can be achieved by running the following command inside your virtual
    environment. Supervisor, by default, looks for an `etc` folder that has a file
    named `supervisord.conf`. In system-wide installations, this folder is `/etc/`,
    while in a virtual environment, it will look for an `etc` folder in the virtual
    environment root folder and then fall back to `/etc/`. Hence, it is suggested
    that you create a folder named `etc` in your virtual environment to maintain separation
    of concerns:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要使用 Supervisor 做与之前相同的事情，以便这个进程作为一个由 Supervisor 本身控制的守护进程运行，而不是通过人工干预。首先，我们需要一个
    Supervisor 配置文件。这可以通过在您的虚拟环境中运行以下命令来实现。默认情况下，Supervisor 会寻找一个包含名为 `supervisord.conf`
    文件的 `etc` 文件夹。在系统范围内安装中，此文件夹是 `/etc/`，而在虚拟环境中，它将在虚拟环境根文件夹中寻找一个 `etc` 文件夹，然后回退到
    `/etc/`。因此，建议您在虚拟环境中创建一个名为 `etc` 的文件夹，以保持关注点的分离：
- en: '[PRE27]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The last command will create a configuration file named `supervisord.conf` in
    the `etc` folder. This file houses all the configurations for the processes that
    would be run using the Supervisor daemon.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个命令将在 `etc` 文件夹中创建一个名为 `supervisord.conf` 的配置文件。此文件包含使用 Supervisor 守护进程运行的进程的所有配置。
- en: Information
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: The `echo_supervisord_conf` program is provided by Supervisor; it prints a sample
    config file to the location specified. If you run into permission issues while
    running the command, try using `sudo`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo_supervisord_conf` 程序由 Supervisor 提供；它将一个示例配置文件打印到指定的位置。如果在运行命令时遇到权限问题，请尝试使用
    `sudo`。'
- en: 'Now, add the following configuration block in the file you created previously:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在您之前创建的文件中添加以下配置块：
- en: '[PRE29]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Here, we specified the `gunicorn` process as the command to run, along with
    the directory and user to be used for the process. Other settings specify the
    behavior at the start or restart of the Supervisor daemon and the locations to
    save respective log files in.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指定了 `gunicorn` 进程作为要运行的命令，以及用于进程的目录和用户。其他设置指定了 Supervisor 守护进程启动或重启时的行为以及保存相应日志文件的位置。
- en: Tip
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that you should never run the applications as a `root` user. This is a
    huge security flaw in itself as the application may crash or the flaws may harm
    the OS itself.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，您永远不应该以 `root` 用户身份运行应用程序。这本身就是一个大安全漏洞，因为应用程序可能会崩溃，或者漏洞可能会损害操作系统本身。
- en: 'After the setup is complete, run `supervisord` by using the following command:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置完成后，使用以下命令运行 `supervisord`：
- en: '[PRE38]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works…
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To check the status of the application, run the following command:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查应用程序的状态，请运行以下命令：
- en: '[PRE39]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This command provides a status for all of the child processes.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令提供了所有子进程的状态。
- en: Tip
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: The tools that were discussed in this recipe can be coupled with Nginx to serve
    as a reverse proxy server. I suggest that you try this out for yourself.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中讨论的工具可以与 Nginx 配合使用，作为反向代理服务器。我建议您亲自尝试一下。
- en: 'Every time you make a change to your application and then wish to restart Gunicorn
    for it to reflect the changes that have been made, run the following command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 每次您对应用程序进行更改并希望重启 Gunicorn 以反映所做的更改时，请运行以下命令：
- en: '[PRE40]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You can also specify specific processes instead of restarting everything:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以指定特定的进程而不是重启所有内容：
- en: '[PRE41]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: See also
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: You can read more about Gunicorn at [http://gunicorn-docs.readthedocs.org/en/latest/index.html](http://gunicorn-docs.readthedocs.org/en/latest/index.html).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [http://gunicorn-docs.readthedocs.org/en/latest/index.html](http://gunicorn-docs.readthedocs.org/en/latest/index.html)
    上了解更多关于 Gunicorn 的信息。
- en: For more information on Supervisor, please refer to [http://supervisord.org/index.html](http://supervisord.org/index.html).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Supervisor 的更多信息，请参阅 [http://supervisord.org/index.html](http://supervisord.org/index.html)。
- en: Deploying with Tornado
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Tornado 部署
- en: Tornado is a complete web framework and a standalone web server in itself. Here,
    we will use Flask to create our application, which is a combination of URL routing
    and templating, and leave the server part to Tornado. Tornado is built to hold
    thousands of simultaneous standing connections and makes applications very scalable.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Tornado 是一个完整的 Web 框架，本身也是一个独立的 Web 服务器。在这里，我们将使用 Flask 创建我们的应用程序，Flask 是 URL
    路由和模板的组合，而将服务器部分留给 Tornado。Tornado 被构建来处理数千个同时的连接，使得应用程序非常可扩展。
- en: Information
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: Tornado has limitations while working with WSGI applications, so choose wisely!
    You can read more about this at [http://www.tornadoweb.org/en/stable/wsgi.html#running-wsgi-apps-on-tornado-servers](http://www.tornadoweb.org/en/stable/wsgi.html#running-wsgi-apps-on-tornado-servers).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Tornado在处理WSGI应用程序时存在限制，因此请明智选择！您可以在[http://www.tornadoweb.org/en/stable/wsgi.html#running-wsgi-apps-on-tornado-servers](http://www.tornadoweb.org/en/stable/wsgi.html#running-wsgi-apps-on-tornado-servers)了解更多信息。
- en: Getting ready
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Installing Tornado can be done using `pip`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`pip`安装Tornado：
- en: '[PRE42]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How to do it…
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let’s create a file named `tornado_server.py` and put the following code in
    it:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`tornado_server.py`的文件，并将以下代码放入其中：
- en: '[PRE43]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Here, we created a WSGI container for our application; this container is then
    used to create an HTTP server, and the application is hosted on port `8000`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为我们的应用程序创建了一个WSGI容器；然后使用该容器创建一个HTTP服务器，并将应用程序托管在端口`8000`上。
- en: How it works…
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Run the Python file we created in the previous section using the following
    command:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行我们在上一节中创建的Python文件：
- en: '[PRE44]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Point your browser to `http://0.0.0.0:8000/` or `http://<IP address or domain
    name>:8000/` to see the home page being served.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的浏览器指向`http://0.0.0.0:8000/`或`http://<IP地址或域名>:8000/`以查看正在提供的主页。
- en: Tip
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: We can couple Tornado with Nginx (as a reverse proxy to serve static content)
    and Supervisor (as a process manager) for the best results. This is left for you
    as an exercise.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将Tornado与Nginx（作为反向代理以提供静态内容）和Supervisor（作为进程管理器）结合使用以获得最佳效果。这留给你作为练习。
- en: Using S3 storage for file uploads
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用S3存储进行文件上传
- en: '**Amazon Web Services** (**AWS**) explains S3 as the storage for the internet
    that is designed to make web-scale computing easier for developers. S3 provides
    a very simple interface via web services; this makes storing and retrieving any
    amount of data very simple at any time from anywhere on the internet. Until now,
    in our catalog application, we saw that there were issues in managing the product
    images that were uploaded as a part of the creation process. This whole headache
    will go away if the images are stored somewhere globally and are easily accessible
    from anywhere. We will use S3 for the same purpose.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚马逊网络服务**（**AWS**）将S3解释为互联网的存储，旨在使开发者的Web规模计算更容易。S3通过Web服务提供了一个非常简单的接口；这使得在任何时间从互联网的任何地方存储和检索任何数量的数据都非常简单。到目前为止，在我们的目录应用程序中，我们看到了在管理作为创建过程一部分上传的产品图像时存在一些问题。如果图像存储在某个全球位置并且可以从任何地方轻松访问，那么整个头疼问题都将消失。我们将使用S3来完成同样的目的。'
- en: Getting ready
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Amazon offers `boto3`. It can be installed using `pip`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊提供了`boto3`。可以使用`pip`进行安装：
- en: '[PRE45]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How to do it…
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Now, make some changes to our existing catalog application to accommodate support
    for file upload and retrieval from S3:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对我们的现有目录应用程序进行一些修改，以适应对文件上传和从S3检索的支持：
- en: 'First, we need to store the AWS-specific configuration to allow `boto3` to
    make calls to S3\. Add the following statements to the application’s configuration
    file – that is, `my_app/__init__.py`. Make sure that you group the following configuration
    values along with other pre-existing configuration values:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要存储AWS特定的配置，以便`boto3`能够调用S3。将以下语句添加到应用程序的配置文件中——即`my_app/__init__.py`。确保将以下配置值与现有的其他配置值分组：
- en: '[PRE46]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: You can get these values from AWS IAM. Ensure that the user associated with
    these credentials has access to create and get objects from S3.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从AWS IAM获取这些值。确保与这些凭证关联的用户有权在S3中创建和获取对象。
- en: 'Next, we need to change our `views.py` file:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要更改我们的`views.py`文件：
- en: '[PRE49]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This is the import that we need from `boto3`. Next, we need to replace the
    following line in `create_product()`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们需要从`boto3`导入的。接下来，我们需要替换`create_product()`中的以下行：
- en: '[PRE50]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We must replace this with the following block of code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须用以下代码块替换它：
- en: '[PRE51]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: With this code change, we are essentially changing how we save files. Earlier,
    the image was being saved locally using `image.save`. Now, this is done by creating
    an S3 connection and uploading the image to a bucket there. First, we create a
    `session` connection with AWS using `boto3.Session`. We use this session to access
    S3 resources and then create a `bucket` (if it doesn’t exist; otherwise, use the
    same) with a location constraint to `'ap-south-1'`. This location constraint isn’t
    necessary and can be used as needed. Finally, we upload our image to the bucket.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个代码更改，我们实际上是在更改我们保存文件的方式。之前，图片是通过使用`image.save`在本地保存的。现在，这是通过创建一个S3连接并将图片上传到该桶来完成的。首先，我们使用`boto3.Session`与AWS创建一个`session`连接。我们使用这个会话来访问S3资源，然后创建一个`bucket`（如果不存在，则使用相同的；否则，使用相同的）并使用位置约束`'ap-south-1'`。这个位置约束不是必需的，可以根据需要使用。最后，我们将我们的图片上传到桶中。
- en: 'The last change will be made to our `product.html` template, where we need
    to change the image’s `src` path. Replace the original `img src` statement with
    the following statement:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后的更改将应用于我们的`product.html`模板，我们需要更改图片的`src`路径。将原始的`img src`语句替换为以下语句：
- en: '[PRE52]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 1.amazonaws.com/' + config['AWS_BUCKET']
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`1.amazonaws.com/'' + config[''AWS_BUCKET'']`'
- en: '[PRE53]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: + '/' + product.image_path }}"/>
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: + '/' + product.image_path }}"/>
- en: '[PRE54]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: How it works…
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Now, run the application as usual and create a product. When the created product
    is rendered, the product image will take a bit of time to come up as it is now
    being served from S3 (and not from a local machine). If this happens, then the
    integration with S3 has been successful.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，像往常一样运行应用程序并创建一个产品。当创建的产品被渲染时，产品图片会花费一点时间显示出来，因为它现在是从S3（而不是从本地机器）提供的。如果发生这种情况，那么与S3的集成已经成功。
- en: Managing and monitoring application performance with New Relic
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用New Relic管理和监控应用程序性能
- en: '**New Relic** is an analytics software that provides near real-time operational
    and business analytics related to your application. It provides deep analytics
    on the behavior of the application from various aspects. It does the job of a
    profiler, as well as eliminates the need to maintain extra moving parts in the
    application. It works in the data push principle, where our application sends
    data to New Relic rather than New Relic asking for statistics from our application.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**New Relic** 是一款提供与应用程序相关的近实时运营和业务分析软件。它从多个方面对应用程序的行为进行深入分析。它执行了分析器的任务，同时也消除了在应用程序中维护额外移动部件的需要。它遵循数据推送原则，即我们的应用程序将数据发送到New
    Relic，而不是New Relic从我们的应用程序请求统计数据。'
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the catalog application that we have built throughout this book.
    In essence, the application to be used does not matter here; it should just be
    a running Flask application.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们在整本书中构建的目录应用程序。本质上，这里要使用的应用程序并不重要；它应该只是一个正在运行的Flask应用程序。
- en: 'The first step will be to sign up with New Relic for an account. Follow the
    simple sign-up process and, upon completion and email verification, you will be
    sent to your dashboard. Here, choose **Application monitoring** as the product
    that we need to use from the suite of offerings from New Relic and choose **Python**
    as the tech stack:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步将是使用New Relic注册一个账户。遵循简单的注册流程，完成并验证电子邮件后，您将被发送到仪表板。在这里，从New Relic提供的系列产品中选择**应用程序监控**作为我们需要使用的产品，并选择**Python**作为技术栈：
- en: '![Figure 11.1 – New Relic stack selection](img/B19111_11_01.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图11.1 – New Relic堆栈选择](img/B19111_11_01.jpg)'
- en: Figure 11.1 – New Relic stack selection
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1 – New Relic堆栈选择
- en: 'This guided install widget will ask about the operating system being used before
    handing out the commands to be run:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这个引导安装小部件在提供要运行的命令之前会询问正在使用的操作系统：
- en: '![Figure 11.2 – New Relic install configuration](img/B19111_11_02.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图11.2 – New Relic安装配置](img/B19111_11_02.jpg)'
- en: Figure 11.2 – New Relic install configuration
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 – New Relic安装配置
- en: Following this, you can choose to do the configuration and setup manually or
    just follow the steps that are outlined by New Relic. I will discuss both approaches
    in the following section.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，您可以选择手动进行配置和设置，或者只需遵循New Relic概述的步骤。我将在下一节讨论这两种方法。
- en: For the manual method, make sure to copy the license key, as shown in the preceding
    screenshot.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 对于手动方法，请确保复制显示在上一个屏幕截图中的许可证密钥。
- en: How to do it…
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: You can choose either guided or manual configuration.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择引导或手动配置。
- en: Guided configuration
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引导配置
- en: 'The following screenshot lists all the steps that you need to follow to make
    your application work with New Relic for APM:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图列出了你需要遵循的所有步骤，以便让你的应用与 New Relic 进行 APM：
- en: '![Figure 11.3 – New Relic guided configuration](img/B19111_11_03.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – New Relic 指导配置](img/B19111_11_03.jpg)'
- en: Figure 11.3 – New Relic guided configuration
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – New Relic 指导配置
- en: Manual configuration
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动配置
- en: 'Once we have the license key, we need to install the `newrelic` Python library:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了许可证密钥，我们需要安装 `newrelic` Python 库：
- en: '[PRE55]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, we need to generate a file called `newrelic.ini`, which will contain details
    regarding the license key, the name of our application, and so on. This can be
    done using the following command:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要生成一个名为 `newrelic.ini` 的文件，该文件将包含有关许可证密钥、我们的应用名称等详细信息。可以使用以下命令完成此操作：
- en: '[PRE56]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: In the preceding command, replace `LICENSE-KEY` with the actual license key
    of your account. Now, we have a new file called `newrelic.ini`. Open and edit
    the file in terms of the application name and anything else, as needed.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，将 `LICENSE-KEY` 替换为你的实际许可证密钥。现在，我们有一个名为 `newrelic.ini` 的新文件。打开并编辑该文件，根据需要更改应用名称和其他内容。
- en: 'To check whether the `newrelic.ini` file is working successfully, run the following
    command:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查 `newrelic.ini` 文件是否成功运行，请运行以下命令：
- en: '[PRE57]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This will tell us whether the validation was successful or not. If not, then
    check the license key and its validity.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉我们验证是否成功。如果不成功，请检查许可证密钥及其有效性。
- en: 'Now, add the following lines at the top of the application’s configuration
    file, which is `my_app/__init__.py` in our case. Make sure that you add these
    lines before anything else is imported:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在应用的配置文件顶部添加以下行，在我们的例子中是 `my_app/__init__.py`。确保在导入任何其他内容之前添加这些行：
- en: '[PRE58]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: How it works…
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Now, when you run your application, it will start sending statistics to New
    Relic, and the dashboard will have a new application added to it. In the following
    screenshot, there are two applications, where one corresponds to the application
    that we are working on and the other is the test that we ran a while back to validate
    whether New Relic is working correctly:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你运行你的应用时，它将开始向 New Relic 发送统计数据，仪表板将添加一个新的应用。在下面的屏幕截图中，有两个应用，其中一个是我们在工作的应用，另一个是我们之前运行以验证
    New Relic 是否正常工作的测试：
- en: '![Figure 11.4 – New Relic application list](img/B19111_11_04.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – New Relic 应用列表](img/B19111_11_04.jpg)'
- en: Figure 11.4 – New Relic application list
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – New Relic 应用列表
- en: Open the application-specific page; a whole lot of statistics will appear. It
    will also show you which calls have taken the most amount of time and how the
    application is performing. You will also see multiple menu items, where each one
    will correspond to a different type of monitoring to cover all the necessary aspects.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 打开特定应用页面；会出现大量的统计数据。它还会显示哪些调用花费了最多的时间以及应用的性能如何。你还会看到多个菜单项，每个菜单项都将对应不同类型的监控，以涵盖所有必要的方面。
- en: See also
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关阅读
- en: You can read more about New Relic and its configuration at [https://docs.newrelic.com/](https://docs.newrelic.com/).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://docs.newrelic.com/](https://docs.newrelic.com/) 上了解更多关于 New Relic
    及其配置的信息。
- en: Infrastructure and application monitoring with Datadog
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Datadog 进行基础设施和应用监控
- en: '**Datadog** is an observability service that provides detailed analytics for
    infrastructure, databases, applications, and services. Just like New Relic, Datadog
    is a full-stack platform that allows all-around monitoring that provides great
    insights into the health of an application and infrastructure.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**Datadog** 是一种可观察性服务，为基础设施、数据库、应用和服务提供详细的统计分析。就像 New Relic 一样，Datadog 是一个全栈平台，允许全方位的监控，为应用和基础设施的健康状况提供深刻的见解。'
- en: Although both Datadog and New Relic are similar in almost all aspects, both
    of them have some benefits over each other. For example, a popular opinion is
    that while New Relic is great at **Application Performance Monitoring** (**APM**),
    Datadog is stronger at infrastructure monitoring.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在几乎所有方面，Datadog 和 New Relic 都很相似，但它们各自都有一些相对于对方的优点。例如，有一种普遍的观点认为，虽然 New Relic
    在**应用性能监控**（**APM**）方面表现优秀，但 Datadog 在基础设施监控方面更加强大。
- en: In short, both these platforms are great for most purposes and you can choose
    to use any of them or maybe some other tool/platform based on your needs.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这两个平台对于大多数用途来说都很棒，你可以选择使用其中的任何一个，或者根据你的需求选择其他工具/平台。
- en: Getting ready
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Just like in the previous recipe, we will use the catalog application that we
    have built throughout this book. In essence, the application to be used does not
    matter here; it should just be a running Flask application.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在之前的菜谱中一样，我们将使用我们在整本书中构建的目录应用程序。本质上，这里要使用的应用程序无关紧要；它应该只是一个正在运行的Flask应用程序。
- en: 'The first step is to create a new account with Datadog. They have a free tier
    that would suffice for testing, as in our case. Once you’ve signed up and logged
    in, the first step is to enable/install the Python integration in the Datadog
    console:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是使用Datadog创建一个新账户。他们有一个免费层，对于测试来说足够了，就像在我们的案例中一样。一旦你注册并登录，第一步就是在Datadog控制台中启用/安装Python集成：
- en: '![Figure 11.5 – Installing the Python integration](img/B19111_11_05.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图11.5 – 安装Python集成](img/B19111_11_05.jpg)'
- en: Figure 11.5 – Installing the Python integration
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5 – 安装Python集成
- en: As shown in the preceding screenshot, click on the **Python** tile and install
    the integration.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述截图所示，点击**Python**磁贴并安装集成。
- en: 'As soon as you create an account on Datadog, it creates an API key by default.
    This API key will be needed in all further steps to make sure that monitoring
    statistics from your machine/server and application are sent to the correct Datadog
    account. Navigate to **Your account** | **Organization Settings** | **API Keys**
    to get your API key or just go to [https://app.datadoghq.com/organization-settings/api-keys](https://app.datadoghq.com/organization-settings/api-keys):'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在Datadog上创建了一个账户，它就会默认创建一个API密钥。这个API密钥将在所有后续步骤中都需要，以确保从你的机器/服务器和应用程序发送的监控统计数据被发送到正确的Datadog账户。导航到**你的账户**
    | **组织设置** | **API密钥**来获取你的API密钥，或者直接访问[https://app.datadoghq.com/organization-settings/api-keys](https://app.datadoghq.com/organization-settings/api-keys)：
- en: '![Figure 11.6 – Fetching the API key](img/B19111_11_06.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图11.6 – 获取API密钥](img/B19111_11_06.jpg)'
- en: Figure 11.6 – Fetching the API key
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6 – 获取API密钥
- en: How to do it…
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Go through the following steps to set up infrastructure and application monitoring
    with Datadog:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置Datadog的基础设施和应用程序监控：
- en: 'Once you get the API key, the next step is to install the Datadog agent on
    your operating system to allow for infrastructure monitoring. Follow the instructions
    according to your OS or infrastructure by navigating to **Integrations** | **Agent**:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你获取了API密钥，下一步就是在你的操作系统上安装Datadog代理，以便进行基础设施监控。根据你的操作系统或基础设施，通过导航到**集成** |
    **代理**来遵循相应的说明：
- en: '![Figure 11.7 – Installing the Datadog agent](img/B19111_11_07.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![图11.7 – 安装Datadog代理](img/B19111_11_07.jpg)'
- en: Figure 11.7 – Installing the Datadog agent
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7 – 安装Datadog代理
- en: As shown in the preceding screenshot, select your OS and follow the instructions
    accordingly. Your OS might ask for some permissions, which you will need to grant
    for Datadog to work properly.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述截图所示，选择你的操作系统并按照相应的说明操作。你的操作系统可能会要求一些权限，你需要授予这些权限以确保Datadog能够正常工作。
- en: 'Once you’ve installed the agent, navigate to **Infrastructure** | **Infrastructure
    List** to validate that your infrastructure is being monitored:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装代理后，导航到**基础设施** | **基础设施列表**以验证你的基础设施正在被监控：
- en: '![Figure 11.8 – Infrastructure monitoring validation](img/B19111_11_08.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图11.8 – 基础设施监控验证](img/B19111_11_08.jpg)'
- en: Figure 11.8 – Infrastructure monitoring validation
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8 – 基础设施监控验证
- en: Feel free to explore other options or drill down into the details here to see
    more analytics.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 随意探索其他选项或深入了解细节，以查看更多分析。
- en: 'The next step is to install the `ddtrace` utility, which is Datadog’s Python
    APM client and allows you to profile code, requests, and trace data to flow to
    Datadog:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是安装`ddtrace`实用程序，这是Datadog的Python APM客户端，允许你分析代码、请求并将跟踪数据流到Datadog：
- en: '[PRE59]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Important
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: If your application is running on port 5000, make sure you change the port to
    something else – ports 5000 to 5002 are used by Datadog for its agent and other
    utilities.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序正在运行在端口5000上，请确保你将其更改到其他端口——端口5000到5002被Datadog用于其代理和其他工具。
- en: 'Following the installation of `ddtrace`, run your Flask application using the
    following command:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装`ddtrace`之后，使用以下命令运行你的Flask应用程序：
- en: '[PRE60]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Note the `DD_SERVICE` and `DD_ENV` environment variables. These are important
    for Datadog to decide how to segregate and group your application logs.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`DD_SERVICE`和`DD_ENV`环境变量。这些对于Datadog决定如何隔离和分组你的应用程序日志非常重要。
- en: 'If you get an error, as shown in the following screenshot, just set `DD_REMOTE_CONFIGURATION_ENABLED=false`:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到了以下截图所示的错误，只需设置`DD_REMOTE_CONFIGURATION_ENABLED=false`：
- en: '![Figure 11.9 – Handling configuration errors](img/B19111_11_09.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.9 – 处理配置错误](img/B19111_11_09.jpg)'
- en: Figure 11.9 – Handling configuration errors
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – 处理配置错误
- en: 'Hence, in my case, the command looks like this:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我的情况下，命令看起来是这样的：
- en: '[PRE61]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Now, just wait for a few minutes – your application statistics should start
    reflecting on Datadog:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，只需等待几分钟——你的应用程序统计信息应该开始在 Datadog 上反映：
- en: '![Figure 11.10 – APM in action](img/B19111_11_10.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.10 – APM 在行动](img/B19111_11_10.jpg)'
- en: Figure 11.10 – APM in action
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – APM 在行动
- en: Feel free to play around and dig into more details to understand how Datadog
    works and what kind of statistics it provides.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 随意尝试并深入了解更多细节，以了解 Datadog 的工作原理以及它提供哪些统计信息。
- en: See also
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'You can read more about Datadog and `ddtrace` at the following links:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中了解更多关于 Datadog 和 `ddtrace` 的信息：
- en: 'Flask configuration for `ddtrace`: [https://ddtrace.readthedocs.io/en/stable/integrations.html#flask](https://ddtrace.readthedocs.io/en/stable/integrations.html#flask)'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask 为 `ddtrace` 的配置：[https://ddtrace.readthedocs.io/en/stable/integrations.html#flask](https://ddtrace.readthedocs.io/en/stable/integrations.html#flask)
- en: 'Datadog documentation: [https://docs.datadoghq.com/](https://docs.datadoghq.com/)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Datadog 文档：[https://docs.datadoghq.com/](https://docs.datadoghq.com/)
