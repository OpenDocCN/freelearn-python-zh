- en: Chapter 18. Internationalization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第18章。国际化
- en: When creating message files from JavaScript source codeDjango was originally
    developed right in the middle of the United States-quite literally, as Lawrence,
    Kansas, is less than 40 miles from the geographic center of the continental United
    States. Like most open source projects, though, Django's community grew to include
    people from all over the globe. As Django's community became increasingly diverse,
    *internationalization* and *localization* became increasingly important.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当从JavaScript源代码创建消息文件时，Django最初是在美国中部开发的，字面上说，劳伦斯市距离美国大陆的地理中心不到40英里。然而，像大多数开源项目一样，Django的社区逐渐包括来自全球各地的人。随着Django社区变得越来越多样化，*国际化*和*本地化*变得越来越重要。
- en: Django itself is fully internationalized; all strings are marked for translation,
    and settings control the display of locale-dependent values like dates and times.
    Django also ships with more than 50 different localization files. If you're not
    a native English speaker, there's a good chance that Django is already translated
    into your primary language.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Django本身是完全国际化的；所有字符串都标记为可翻译，并且设置控制着像日期和时间这样的与区域相关的值的显示。Django还附带了50多种不同的本地化文件。如果您不是以英语为母语，那么Django已经被翻译成您的主要语言的可能性很大。
- en: The same internationalization framework used for these localizations is available
    for you to use in your own code and templates.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 用于这些本地化的相同国际化框架可供您在自己的代码和模板中使用。
- en: Because many developers have at best a fuzzy understanding of what internationalization
    and localization actually mean, we will begin with a few definitions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因为许多开发人员对国际化和本地化的实际含义理解模糊，所以我们将从一些定义开始。
- en: Definitions
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义
- en: Internationalization
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 国际化
- en: Refers to the process of designing programs for the potential use of any locale.
    This process is usually done by software developers. Internationalization includes
    marking text (such as UI elements and error messages) for future translation,
    abstracting the display of dates and times so that different local standards may
    be observed, providing support for differing time zones, and generally making
    sure that the code contains no assumptions about the location of its users. You'll
    often see internationalization abbreviated *I18N*. (The 18 refers to the number
    of letters omitted between the initial I and the terminal N.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是为任何区域的潜在使用设计程序的过程。这个过程通常由软件开发人员完成。国际化包括标记文本（如UI元素和错误消息）以供将来翻译，抽象显示日期和时间，以便可以遵守不同的本地标准，提供对不同时区的支持，并确保代码不包含对其用户位置的任何假设。您经常会看到国际化缩写为*I18N*。（18指的是I和N之间省略的字母数）。
- en: Localization
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地化
- en: Refers to the process of actually translating an internationalized program for
    use in a particular locale. This work is usually done by translators. You'll sometimes
    see localization abbreviated as *L10N*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是实际将国际化程序翻译为特定区域的过程。这项工作通常由翻译人员完成。有时您会看到本地化缩写为*L10N*。
- en: 'Here are some other terms that will help us to handle a common language:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些其他术语，将帮助我们处理常见的语言：
- en: locale name
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 区域名称
- en: 'A locale name, either a language specification of the form `ll` or a combined
    language and country specification of the form `ll_CC`. Examples: `it`, `de_AT`,
    `es`, `pt_BR`. The language part is always in lower case and the country part
    in upper case. The separator is an underscore.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 区域名称，可以是`ll`形式的语言规范，也可以是`ll_CC`形式的组合语言和国家规范。例如：`it`，`de_AT`，`es`，`pt_BR`。语言部分始终为小写，国家部分为大写。分隔符是下划线。
- en: language code
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语言代码
- en: 'Represents the name of a language. Browsers send the names of the languages
    they accept in the `Accept-Language` HTTP header using this format. Examples:
    `it`, `de-at`, `es`, `pt-br`. Language codes are generally represented in lower-case,
    but the HTTP `Accept-Language` header is case-insensitive. The separator is a
    dash.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 表示语言的名称。浏览器使用这种格式在`Accept-Language` HTTP标头中发送它们接受的语言名称。例如：`it`，`de-at`，`es`，`pt-br`。语言代码通常以小写表示，但HTTP
    `Accept-Language`标头不区分大小写。分隔符是破折号。
- en: message file
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 消息文件
- en: A message file is a plain-text file, representing a single language, that contains
    all available translation strings and how they should be represented in the given
    language. Message files have a `.po` file extension.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 消息文件是一个纯文本文件，代表单一语言，包含所有可用的翻译字符串以及它们在给定语言中的表示方式。消息文件的文件扩展名为`.po`。
- en: translation string
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 翻译字符串
- en: A literal that can be translated.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可翻译的文字。
- en: format file
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 格式文件
- en: A format file is a Python module that defines the data formats for a given locale.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 格式文件是定义给定区域的数据格式的Python模块。
- en: Translation
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 翻译
- en: 'In order to make a Django project translatable, you have to add a minimal number
    of hooks to your Python code and templates. These hooks are called translation
    strings. They tell Django: This text should be translated into the end user''s
    language, if a translation for this text is available in that language. It''s
    your responsibility to mark translatable strings; the system can only translate
    strings it knows about.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使Django项目可翻译，您必须在Python代码和模板中添加最少量的钩子。这些钩子称为翻译字符串。它们告诉Django：如果该文本在该语言中有翻译，则应将此文本翻译成最终用户的语言。标记可翻译字符串是您的责任；系统只能翻译它知道的字符串。
- en: Django then provides utilities to extract the translation strings into a message
    file. This file is a convenient way for translators to provide the equivalent
    of the translation strings in the target language. Once the translators have filled
    in the message file, it must be compiled. This process relies on the GNU `gettext`
    toolset.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后Django提供了工具来提取翻译字符串到消息文件中。这个文件是翻译人员以目标语言提供翻译字符串的方便方式。一旦翻译人员填写了消息文件，就必须对其进行编译。这个过程依赖GNU
    `gettext`工具集。
- en: Once this is done, Django takes care of translating web apps on the fly in each
    available language, according to users' language preferences.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，Django会根据用户的语言偏好即时翻译Web应用程序。
- en: 'Essentially, Django does two things:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，Django做了两件事：
- en: It lets developers and template authors specify which parts of their applications
    should be translatable.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许开发人员和模板作者指定其应用程序的哪些部分应该是可翻译的。
- en: It uses that information to translate web applications for particular users
    according to their language preferences.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用这些信息根据用户的语言偏好来翻译Web应用程序。
- en: Django's internationalization hooks are on by default, and that means there's
    a bit of i18n-related overhead in certain places of the framework. If you don't
    use internationalization, you should take the two seconds to set `USE_I18N = False`
    in your settings file. Then Django will make some optimizations so as not to load
    the internationalization machinery, which will save you some overhead. There is
    also an independent but related `USE_L10N` setting that controls if Django should
    implement format localization.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Django的国际化钩子默认打开，这意味着在框架的某些地方有一些与i18n相关的开销。如果您不使用国际化，您应该花两秒钟在设置文件中设置`USE_I18N
    = False`。然后Django将进行一些优化，以便不加载国际化机制，这将节省一些开销。还有一个独立但相关的`USE_L10N`设置，用于控制Django是否应该实现格式本地化。
- en: 'Internationalization: in Python code'
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国际化：在Python代码中
- en: Standard translation
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准翻译
- en: Specify a translation string by using the function `ugettext()`. It's convention
    to import this as a shorter alias, `_`, to save typing.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用函数`ugettext（）`指定翻译字符串。按照惯例，将其导入为更短的别名`_`，以节省输入。
- en: 'Python''s standard library `gettext` module installs `_()` into the global
    namespace, as an alias for `gettext()`. In Django, we have chosen not to follow
    this practice, for a couple of reasons:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Python的标准库`gettext`模块将`_（）`安装到全局命名空间中，作为`gettext（）`的别名。在Django中，出于几个原因，我们选择不遵循这种做法：
- en: For international character set (Unicode) support, `ugettext()` is more useful
    than `gettext()`. Sometimes, you should be using `ugettext_lazy()` as the default
    translation method for a particular file. Without `_()` in the global namespace,
    the developer has to think about which is the most appropriate translation function.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于国际字符集（Unicode）支持，`ugettext（）`比`gettext（）`更有用。有时，您应该使用`ugettext_lazy（）`作为特定文件的默认翻译方法。在全局命名空间中没有`_（）`时，开发人员必须考虑哪个是最合适的翻译函数。
- en: The underscore character (`_`) is used to represent the previous result in Python's
    interactive shell and doctest tests. Installing a global `_()` function causes
    interference. Explicitly importing `ugettext()` as `_()` avoids this problem.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下划线字符（`_`）用于表示Python交互式shell和doctest测试中的先前结果。安装全局`_（）`函数会导致干扰。显式导入`ugettext（）`作为`_（）`可以避免这个问题。
- en: 'In this example, the text `"Welcome to my site."` is marked as a translation
    string:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，文本“欢迎来到我的网站。”被标记为翻译字符串：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Obviously, you could code this without using the alias. This example is identical
    to the previous one:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，您可以在不使用别名的情况下编写此代码。这个例子与前一个例子相同：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Translation also works on computed values. This example is identical to the
    previous two:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译也适用于计算值。这个例子与前两个相同：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '... and on variables. Again, here''s an identical example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '...和变量。再次，这是一个相同的例子：'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: (The caveat with using variables or computed values, as in the previous two
    examples, is that Django's translation-string-detecting utility, `django-admin
    makemessages`, won't be able to find these strings. More on `makemessages` later.)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: （与前两个示例中使用变量或计算值的警告是，Django的翻译字符串检测实用程序`django-admin makemessages`将无法找到这些字符串。稍后再讨论`makemessages`。）
- en: 'The strings you pass to `_()` or `ugettext()` can take placeholders, specified
    with Python''s standard named-string interpolation syntax. Example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您传递给`_（）`或`ugettext（）`的字符串可以使用Python的标准命名字符串插值语法指定占位符。示例：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This technique lets language-specific translations reorder the placeholder text.
    For example, an English translation may be *"Today is November 26."*, while a
    Spanish translation may be *"Hoy es 26 de Noviembre."*-with the month and the
    day placeholders swapped.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术允许特定语言的翻译重新排列占位符文本。例如，英语翻译可能是“今天是11月26日。”，而西班牙语翻译可能是“Hoy es 26 de Noviembre。”-月份和日期占位符交换了位置。
- en: For this reason, you should use named-string interpolation (for example, `%(day)s`)
    instead of positional interpolation (for example, `%s` or `%d`) whenever you have
    more than a single parameter. If you used positional interpolation, translations
    wouldn't be able to reorder placeholder text.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当您有多个参数时，应使用命名字符串插值（例如`%(day)s`）而不是位置插值（例如`%s`或`%d`）。如果使用位置插值，翻译将无法重新排列占位符文本。
- en: Comments for Translators
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 翻译者注释
- en: 'If you would like to give translators hints about a translatable string, you
    can add a comment prefixed with the `Translators` keyword on the line preceding
    the string, for example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想给翻译者有关可翻译字符串的提示，可以在前一行添加一个以`Translators`关键字为前缀的注释，例如：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The comment will then appear in the resulting `.po` file associated with the
    translatable construct located below it and should also be displayed by most translation
    tools.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 该注释将出现在与其下方的可翻译结构相关联的生成的`.po`文件中，并且大多数翻译工具也应该显示该注释。
- en: 'Just for completeness, this is the corresponding fragment of the resulting
    `.po` file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了完整起见，这是生成的`.po`文件的相应片段：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This also works in templates. See translator-comments-in-templates for more
    details.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这也适用于模板。有关更多详细信息，请参见模板中的翻译注释。
- en: Marking strings as No-Op
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标记字符串为No-Op
- en: Use the function `django.utils.translation.ugettext_noop()` to mark a string
    as a translation string without translating it. The string is later translated
    from a variable.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用函数`django.utils.translation.ugettext_noop（）`将字符串标记为翻译字符串而不进行翻译。稍后从变量中翻译字符串。
- en: Use this if you have constant strings that should be stored in the source language
    because they are exchanged over systems or users-such as strings in a database-but
    should be translated at the last possible point in time, such as when the string
    is presented to the user.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有应存储在源语言中的常量字符串，因为它们在系统或用户之间交换-例如数据库中的字符串-但应在最后可能的时间点进行翻译，例如在向用户呈现字符串时，请使用此功能。
- en: Pluralization
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复数形式
- en: Use the function `django.utils.translation.ungettext()` to specify pluralized
    messages.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用函数`django.utils.translation.ungettext()`来指定复数形式的消息。
- en: '`ungettext` takes three arguments: the singular translation string, the plural
    translation string and the number of objects.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`ungettext`需要三个参数：单数翻译字符串、复数翻译字符串和对象的数量。'
- en: This function is useful when you need your Django application to be localizable
    to languages where the number and complexity of plural forms is greater than the
    two forms used in English ('object' for the singular and 'objects' for all the
    cases where `count` is different from one, irrespective of its value.)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的Django应用程序需要本地化到复数形式比英语中使用的两种形式更多的语言时，此功能非常有用（'object'表示单数，'objects'表示`count`与1不同的所有情况，而不考虑其值。）
- en: 'For example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example the number of objects is passed to the translation languages
    as the `count` variable.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，对象的数量作为`count`变量传递给翻译语言。
- en: 'Note that pluralization is complicated and works differently in each language.
    Comparing `count` to 1 isn''t always the correct rule. This code looks sophisticated,
    but will produce incorrect results for some languages:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，复数形式很复杂，并且在每种语言中的工作方式都不同。将`count`与1进行比较并不总是正确的规则。这段代码看起来很复杂，但对于某些语言来说会产生错误的结果：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Don''t try to implement your own singular-or-plural logic, it won''t be correct.
    In a case like this, consider something like the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 不要尝试实现自己的单数或复数逻辑，这是不正确的。在这种情况下，考虑以下内容：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When using `ungettext()`, make sure you use a single name for every extrapolated
    variable included in the literal. In the examples above, note how we used the
    `name` Python variable in both translation strings. This example, besides being
    incorrect in some languages as noted above, would fail:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ungettext()`时，请确保在文字中包含的每个外推变量使用单个名称。在上面的示例中，请注意我们如何在两个翻译字符串中都使用了`name` Python变量。这个示例，除了如上所述在某些语言中是不正确的，还会失败：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You would get an error when running `django-admin compilemessages`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`django-admin compilemessages`时会出现错误：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Contextual markers
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上下文标记
- en: Sometimes words have several meanings, such as *May* in English, which refers
    to a month name and to a verb. To enable translators to translate these words
    correctly in different contexts, you can use the `django.utils.translation.pgettext()`
    function, or the `django.utils.translation.npgettext()` function if the string
    needs pluralization. Both take a context string as the first variable.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有时单词有几个含义，例如英语中的*May*，它既指月份名称又指动词。为了使翻译人员能够在不同的上下文中正确翻译这些单词，您可以使用`django.utils.translation.pgettext()`函数，或者如果字符串需要复数形式，则使用`django.utils.translation.npgettext()`函数。两者都将上下文字符串作为第一个变量。
- en: In the resulting `.po` file, the string will then appear as often as there are
    different contextual markers for the same string (the context will appear on the
    `msgctxt` line), allowing the translator to give a different translation for each
    of them.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成的`.po`文件中，该字符串将出现的次数与相同字符串的不同上下文标记一样多（上下文将出现在`msgctxt`行上），允许翻译人员为每个上下文标记提供不同的翻译。
- en: 'For example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'or:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'will appear in the `.po` file as:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将出现在`.po`文件中：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Contextual markers are also supported by the `trans` and `blocktrans` template
    tags.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文标记也受`trans`和`blocktrans`模板标记的支持。
- en: Lazy translation
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 延迟翻译
- en: Use the lazy versions of translation functions in `django.utils.translation`
    (easily recognizable by the `lazy` suffix in their names) to translate strings
    lazily-when the value is accessed rather than when they're called.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在`django.utils.translation`中使用翻译函数的延迟版本（通过它们的名称中的`lazy`后缀很容易识别）来延迟翻译字符串-当访问值而不是在调用它们时。
- en: These functions store a lazy reference to the string-not the actual translation.
    The translation itself will be done when the string is used in a string context,
    such as in template rendering.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数存储字符串的延迟引用-而不是实际的翻译。当字符串在字符串上下文中使用时（例如在模板渲染中），翻译本身将在最后可能的时间点进行。
- en: This is essential when calls to these functions are located in code paths that
    are executed at module load time.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些函数的调用位于模块加载时执行的代码路径中时，这是必不可少的。
- en: This is something that can easily happen when defining models, forms and model
    forms, because Django implements these such that their fields are actually class-level
    attributes. For that reason, make sure to use lazy translations in the following
    cases.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这很容易发生在定义模型、表单和模型表单时，因为Django实现了这些，使得它们的字段实际上是类级属性。因此，在以下情况下，请确保使用延迟翻译。
- en: Model fields and relationships
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模型字段和关系
- en: 'For example, to translate the help text of the *name* field in the following
    model, do the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要翻译以下模型中*name*字段的帮助文本，请执行以下操作：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can mark names of `ForeignKey`, `ManyToManyField` or `OneToOneField` relationship
    as translatable by using their `verbose_name` options:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用它们的`verbose_name`选项将`ForeignKey`，`ManyToManyField`或`OneToOneField`关系的名称标记为可翻译：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Just like you would do in `verbose_name` you should provide a lowercase verbose
    name text for the relation as Django will automatically title case it when required.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 就像您在`verbose_name`中所做的那样，当需要时，应为关系提供一个小写的详细名称文本，Django将在需要时自动将其转换为标题大小写。
- en: Model verbose names values
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模型详细名称值
- en: 'It is recommended to always provide explicit `verbose_name` and `verbose_name_plural`
    options rather than relying on the fall-back English-centric and somewhat naïve
    determination of verbose names Django performs by looking at the model''s class
    name:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 建议始终提供明确的`verbose_name`和`verbose_name_plural`选项，而不是依赖于Django通过查看模型类名执行的后备英语中心且有些天真的决定详细名称：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Model methods short_description attribute values
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模型方法的`short_description`属性值
- en: 'For model methods, you can provide translations to Django and the admin site
    with the `short_description` attribute:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于模型方法，你可以使用`short_description`属性为Django和管理站点提供翻译：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Working with lazy translation objects
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用延迟翻译对象
- en: 'The result of a `ugettext_lazy()` call can be used wherever you would use a
    Unicode string (an object with type `unicode`) in Python. If you try to use it
    where a bytestring (a `str` object) is expected, things will not work as expected,
    since a `ugettext_lazy()` object doesn''t know how to convert itself to a bytestring.
    You can''t use a Unicode string inside a bytestring, either, so this is consistent
    with normal Python behavior. For example:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`ugettext_lazy()`调用的结果可以在Python中任何需要使用Unicode字符串（类型为`unicode`的对象）的地方使用。如果你试图在需要字节字符串（`str`对象）的地方使用它，事情将不会按预期工作，因为`ugettext_lazy()`对象不知道如何将自己转换为字节字符串。你也不能在字节字符串中使用Unicode字符串，因此这与正常的Python行为一致。例如：'
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you ever see output that looks like `"hello <django.utils.functional...>"`,
    you have tried to insert the result of `ugettext_lazy()` into a bytestring. That's
    a bug in your code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到类似`"hello <django.utils.functional...>"`的输出，你尝试将`ugettext_lazy()`的结果插入到字节字符串中。这是你代码中的一个错误。
- en: 'If you don''t like the long `ugettext_lazy` name, you can just alias it as
    `_` (underscore), like so:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不喜欢长长的`ugettext_lazy`名称，你可以将其别名为`_`（下划线），就像这样：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Using `ugettext_lazy()` and `ungettext_lazy()` to mark strings in models and
    utility functions is a common operation. When you're working with these objects
    elsewhere in your code, you should ensure that you don't accidentally convert
    them to strings, because they should be converted as late as possible (so that
    the correct locale is in effect). This necessitates the use of the helper function
    described next.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型和实用函数中使用`ugettext_lazy()`和`ungettext_lazy()`标记字符串是一个常见的操作。当你在代码的其他地方使用这些对象时，你应该确保不要意外地将它们转换为字符串，因为它们应该尽可能晚地转换（以便正确的区域设置生效）。这就需要使用下面描述的辅助函数。
- en: Lazy translations and plural
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 延迟翻译和复数
- en: 'When using lazy translation for a plural string (`[u]n[p]gettext_lazy`), you
    generally don''t know the `number` argument at the time of the string definition.
    Therefore, you are authorized to pass a key name instead of an integer as the
    `number` argument. Then `number` will be looked up in the dictionary under that
    key during string interpolation. Here''s example:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用延迟翻译来处理复数字符串（`[u]n[p]gettext_lazy`）时，通常在字符串定义时不知道`number`参数。因此，你可以授权将一个键名而不是整数作为`number`参数传递。然后在字符串插值期间，`number`将在字典中查找该键下的值。这里有一个例子：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If the string contains exactly one unnamed placeholder, you can interpolate
    directly with the `number` argument:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字符串只包含一个未命名的占位符，你可以直接使用`number`参数进行插值：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Joining strings: string_concat()'
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接字符串：string_concat()
- en: 'Standard Python string joins (`''''.join([...])`) will not work on lists containing
    lazy translation objects. Instead, you can use `django.utils.translation.string_concat()`,
    which creates a lazy object that concatenates its contents and converts them to
    strings only when the result is included in a string. For example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的Python字符串连接（`''.join([...])`）在包含延迟翻译对象的列表上不起作用。相反，你可以使用`django.utils.translation.string_concat()`，它创建一个延迟对象，只有在结果包含在字符串中时才将其内容连接并转换为字符串。例如：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this case, the lazy translations in `result` will only be converted to strings
    when `result` itself is used in a string (usually at template rendering time).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`result`中的延迟翻译只有在`result`本身在字符串中使用时才会转换为字符串（通常在模板渲染时）。
- en: Other uses of lazy in delayed translations
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 延迟翻译的其他用途
- en: 'For any other case where you would like to delay the translation, but have
    to pass the translatable string as an argument to another function, you can wrap
    this function inside a lazy call yourself. For example:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何其他需要延迟翻译的情况，但必须将可翻译的字符串作为参数传递给另一个函数，你可以自己在延迟调用内部包装这个函数。例如：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And then later:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然后稍后：
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Localized names of languages
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语言的本地化名称
- en: 'The `get_language_info()` function provides detailed information about languages:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_language_info()`函数提供了关于语言的详细信息：'
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `name` and `name_local` attributes of the dictionary contain the name of
    the language in English and in the language itself, respectively. The `bidi` attribute
    is True only for bi-directional languages.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 字典的`name`和`name_local`属性包含了语言的英文名称和该语言本身的名称。`bidi`属性仅对双向语言为True。
- en: The source of the language information is the `django.conf.locale` module. Similar
    access to this information is available for template code. See below.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 语言信息的来源是`django.conf.locale`模块。类似的访问这些信息的方式也适用于模板代码。见下文。
- en: 'Internationalization: In template code'
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国际化：在模板代码中
- en: Translations in Django templates uses two template tags and a slightly different
    syntax than in Python code. To give your template access to these tags, put
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Django模板中的翻译使用了两个模板标签和与Python代码略有不同的语法。为了让你的模板可以访问这些标签，将
- en: '`{% load i18n %}` toward the top of your template. As with all template tags,
    this tag needs to be loaded in all templates which use translations, even those
    templates that extend from other templates which have already loaded the `i18n`
    tag.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的模板顶部使用`{% load i18n %}`。与所有模板标签一样，这个标签需要在使用翻译的所有模板中加载，即使是那些从已经加载了`i18n`标签的其他模板继承的模板也是如此。
- en: trans template tag
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: trans模板标签
- en: 'The `{% trans %}` template tag translates either a constant string (enclosed
    in single or double quotes) or variable content:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`{% trans %}`模板标签可以翻译常量字符串（用单引号或双引号括起来）或变量内容：'
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If the `noop` option is present, variable lookup still takes place but the
    translation is skipped. This is useful when stubbing out content that will require
    translation in the future:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在`noop`选项，变量查找仍然会发生，但翻译会被跳过。这在需要将来进行翻译的内容中是有用的：
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Internally, inline translations use an `ugettext()` call.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，内联翻译使用了`ugettext()`调用。
- en: In case a template variable (`myvar` above) is passed to the tag, the tag will
    first resolve such variable to a string at run-time and then look up that string
    in the message catalogs.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将模板变量（如上面的 `myvar`）传递给标签，则标签将首先在运行时将该变量解析为字符串，然后在消息目录中查找该字符串。
- en: 'It''s not possible to mix a template variable inside a string within `{% trans
    %}`. If your translations require strings with variables (placeholders), use `{%
    blocktrans %}` instead. If you''d like to retrieve a translated string without
    displaying it, you can use the following syntax:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 不可能在 `{% trans %}` 内部的字符串中混合模板变量。如果您的翻译需要带有变量（占位符）的字符串，请改用 `{% blocktrans %}`。如果您想要检索翻译后的字符串而不显示它，可以使用以下语法：
- en: '[PRE29]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In practice you''ll use this to get strings that are used in multiple places
    or should be used as arguments for other template tags or filters:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，您将使用此功能来获取在多个地方使用的字符串，或者应该用作其他模板标签或过滤器的参数：
- en: '[PRE30]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`{% trans %}` also supports contextual markers using the `context` keyword:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`{% trans %}` 也支持使用 `context` 关键字进行上下文标记：'
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: blocktrans template tag
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: blocktrans 模板标签
- en: 'The `blocktrans` tag allows you to mark complex sentences consisting of literals
    and variable content for translation by making use of placeholders:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`blocktrans` 标签允许您通过使用占位符标记由文字和变量内容组成的复杂句子进行翻译。'
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To translate a template expression-say, accessing object attributes or using
    template filters-you need to bind the expression to a local variable for use within
    the translation block. Examples:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要翻译模板表达式，比如访问对象属性或使用模板过滤器，您需要将表达式绑定到本地变量，以便在翻译块内使用。例如：
- en: '[PRE33]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can use multiple expressions inside a single `blocktrans` tag:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在单个 `blocktrans` 标签内使用多个表达式：
- en: '[PRE34]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The previous more verbose format is still supported: `{% blocktrans with book|title
    as book_t and author|title as author_t %}`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然支持以前更冗长的格式：`{% blocktrans with book|title as book_t and author|title as author_t
    %}`
- en: Other block tags (for example `{% for %}` or `{% if %}`) are not allowed inside
    a `blocktrans` tag.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 不允许在 `blocktrans` 标签内部使用其他块标签（例如 `{% for %}` 或 `{% if %}`）。
- en: If resolving one of the block arguments fails, `blocktrans` will fall back to
    the default language by deactivating the currently active language temporarily
    with the `deactivate_all()` function.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果解析其中一个块参数失败，`blocktrans` 将通过使用 `deactivate_all()` 函数临时停用当前活动的语言来回退到默认语言。
- en: 'This tag also provides for pluralization. To use it:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此标签还提供了复数形式。使用方法如下：
- en: Designate and bind a counter value with the name `count`. This value will be
    the one used to select the right plural form.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定并绑定名为 `count` 的计数器值。此值将用于选择正确的复数形式。
- en: Specify both the singular and plural forms separating them with the
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用两种形式分隔单数和复数形式
- en: '`{% plural %}` tag within the `{% blocktrans %}` and `{% endblocktrans %}`
    tags.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{% plural %}` 标签在 `{% blocktrans %}` 和 `{% endblocktrans %}` 标签内。'
- en: 'An example:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子：
- en: '[PRE35]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'A more complex example:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更复杂的例子：
- en: '[PRE36]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: When you use both the pluralization feature and bind values to local variables
    in addition to the counter value, keep in mind that the `blocktrans` construct
    is internally converted to an `ungettext` call. This means the same notes regarding
    `ungettext` variables apply.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当您同时使用复数形式功能并将值绑定到本地变量以及计数器值时，请记住 `blocktrans` 结构在内部转换为 `ungettext` 调用。这意味着与
    `ungettext` 变量相关的相同注释也适用。
- en: 'Reverse URL lookups cannot be carried out within the `blocktrans` and should
    be retrieved (and stored) beforehand:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 不能在 `blocktrans` 内部进行反向URL查找，应该事先检索（和存储）：
- en: '[PRE37]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`{% blocktrans %}` also supports contextual using the `context` keyword:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`{% blocktrans %}` 还支持使用 `context` 关键字进行上下文标记：'
- en: '[PRE38]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Another feature `{% blocktrans %}` supports is the `trimmed` option. This option
    will remove newline characters from the beginning and the end of the content of
    the `{% blocktrans %}` tag, replace any whitespace at the beginning and end of
    a line and merge all lines into one using a space character to separate them.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`{% blocktrans %}` 支持的另一个功能是 `trimmed` 选项。此选项将从 `{% blocktrans %}` 标签的内容开头和结尾删除换行符，替换行开头和结尾的任何空格，并使用空格字符将所有行合并成一行。'
- en: This is quite useful for indenting the content of a `{% blocktrans %}` tag without
    having the indentation characters end up in the corresponding entry in the PO
    file, which makes the translation process easier.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于缩进 `{% blocktrans %}` 标签的内容而不使缩进字符出现在 PO 文件中的相应条目中非常有用，这样可以使翻译过程更加简单。
- en: 'For instance, the following `{% blocktrans %}` tag:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下 `{% blocktrans %}` 标签：
- en: '[PRE39]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: will result in the entry `"First sentence. Second paragraph."` in the PO file,
    compared to `"\n First sentence.\n Second sentence.\n"`, if the `trimmed` option
    had not been specified.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定 `trimmed` 选项，将在 PO 文件中生成条目 `"First sentence. Second paragraph."`，而不是 `"\n
    First sentence.\n Second sentence.\n"`。
- en: String literals passed to tags and filters
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传递给标签和过滤器的字符串文字
- en: 'You can translate string literals passed as arguments to tags and filters by
    using the familiar `_()` syntax:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用熟悉的 `_()` 语法将作为参数传递给标签和过滤器的字符串文字进行翻译：
- en: '[PRE40]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In this case, both the tag and the filter will see the translated string, so
    they don't need to be aware of translations.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，标签和过滤器都将看到翻译后的字符串，因此它们不需要知道翻译。
- en: In this example, the translation infrastructure will be passed the string "`yes,no`",
    not the individual strings "`yes`" and "`no`". The translated string will need
    to contain the comma so that the filter parsing code knows how to split up the
    arguments. For example, a German translator might translate the string "`yes,no`"
    as "`ja,nein`" (keeping the comma intact).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，翻译基础设施将传递字符串 "`yes,no`"，而不是单独的字符串 "`yes`" 和 "`no`"。翻译后的字符串需要包含逗号，以便过滤器解析代码知道如何分割参数。例如，德语翻译者可能将字符串
    "`yes,no`" 翻译为 "`ja,nein`"（保持逗号不变）。
- en: Comments for translators in templates
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板中的翻译者注释
- en: 'Just like with Python code, these notes for translators can be specified using
    comments, either with the `comment` tag:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Python 代码一样，这些翻译者注释可以使用注释指定，可以使用 `comment` 标签：
- en: '[PRE41]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'or with the `{#` ... `#}` one-line comment constructs:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 `{#` ... `#}` 单行注释结构：
- en: '[PRE42]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Just for completeness, these are the corresponding fragments of the resulting
    `.po` file:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 仅供完整性，这些是生成的`.po`文件的相应片段：
- en: '[PRE43]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Switching language in templates
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在模板中切换语言
- en: 'If you want to select a language within a template, you can use the `language`
    template tag:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要在模板中选择语言，则可以使用`language`模板标签：
- en: '[PRE44]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: While the first occurrence of Welcome to our page uses the current language,
    the second will always be in English.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然欢迎来到我们的页面的第一次出现使用当前语言，但第二次将始终是英语。
- en: Other tags
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他标签
- en: These tags also require a `{% load i18n %}`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标签还需要`{% load i18n %}`。
- en: '`{% get_available_languages as LANGUAGES %}` returns a list of tuples in which
    the first element is the language code and the second is the language name (translated
    into the currently active locale).'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{% get_available_languages as LANGUAGES %}`返回一个元组列表，其中第一个元素是语言代码，第二个是语言名称（翻译为当前活动的区域设置）。'
- en: '`{% get_current_language as LANGUAGE_CODE %}` returns the current user''s preferred
    language, as a string. Example: `en-us`. (See *How django discovers language preference* later
    in this chapter.)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{% get_current_language as LANGUAGE_CODE %}`返回当前用户的首选语言，作为字符串。例如：`en-us`。（请参见本章后面的*django如何发现语言偏好*。）'
- en: '`{% get_current_language_bidi as LANGUAGE_BIDI %}` returns the current locale''s
    direction. If True, it''s a right-to-left language, for example, Hebrew, Arabic.
    If False it''s a left-to-right language, for example, English, French, German
    and so on.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{% get_current_language_bidi as LANGUAGE_BIDI %}`返回当前区域设置的方向。如果为True，则是从右到左的语言，例如希伯来语，阿拉伯语。如果为False，则是从左到右的语言，例如英语，法语，德语等。'
- en: If you enable the `django.template.context_processors.i18n` context processor
    then each `RequestContext` will have access to `LANGUAGES`, `LANGUAGE_CODE`, and
    `LANGUAGE_BIDI` as defined above.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了`django.template.context_processors.i18n`上下文处理器，则每个`RequestContext`将可以访问`LANGUAGES`，`LANGUAGE_CODE`和`LANGUAGE_BIDI`，如上所定义。
- en: The `i18n` context processor is not enabled by default for new projects.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新项目，默认情况下不会为`i18n`上下文处理器启用。
- en: 'You can also retrieve information about any of the available languages using
    provided template tags and filters. To get information about a single language,
    use the `{% get_language_info %}` tag:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用提供的模板标签和过滤器检索有关任何可用语言的信息。要获取有关单个语言的信息，请使用`{% get_language_info %}`标签：
- en: '[PRE45]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'You can then access the information:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您可以访问这些信息：
- en: '[PRE46]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: You can also use the `{% get_language_info_list %}` template tag to retrieve
    information for a list of languages (for example active languages as specified
    in `LANGUAGES`). See the section about the `set_language` redirect view for an
    example of how to display a language selector using `{% get_language_info_list
    %}`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`{% get_language_info_list %}`模板标签来检索语言列表的信息（例如在`LANGUAGES`中指定的活动语言）。请参阅关于`set_language`重定向视图的部分，了解如何使用`{%
    get_language_info_list %}`显示语言选择器的示例。
- en: 'In addition to `LANGUAGES` style list of tuples, `{% get_language_info_list
    %}` supports simple lists of language codes. If you do this in your view:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`LANGUAGES`风格的元组列表外，`{% get_language_info_list %}`还支持简单的语言代码列表。如果在视图中这样做：
- en: '[PRE47]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'you can iterate over those languages in the template:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在模板中迭代这些语言：
- en: '[PRE48]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'There are also simple filters available for convenience:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些简单的过滤器可供使用：
- en: '`{{ LANGUAGE_CODE|language_name }}` (German)'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{{ LANGUAGE_CODE|language_name }}`（德语）'
- en: '`{{ LANGUAGE_CODE|language_name_local }}` (Deutsch)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{{ LANGUAGE_CODE|language_name_local }}`（德语）'
- en: '`{{ LANGUAGE_CODE|language_bidi }}` (False)'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{{ LANGUAGE_CODE|language_bidi }}` (False)'
- en: 'Internationalization: In Javascript code'
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国际化：在JavaScript代码中
- en: 'Adding translations to JavaScript poses some problems:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 向JavaScript添加翻译会带来一些问题：
- en: JavaScript code doesn't have access to a `gettext` implementation.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript代码无法访问`gettext`实现。
- en: JavaScript code doesn't have access to `.po` or `.mo` files; they need to be
    delivered by the server.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript代码无法访问`.po`或`.mo`文件；它们需要由服务器传送。
- en: The translation catalogs for JavaScript should be kept as small as possible.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript的翻译目录应尽可能保持小。
- en: 'Django provides an integrated solution for these problems: It passes the translations
    into JavaScript, so you can call `gettext`, and so on, from within JavaScript.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Django为这些问题提供了一个集成的解决方案：它将翻译传递到JavaScript中，因此您可以在JavaScript中调用`gettext`等。
- en: The javascript_catalog view
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: javascript_catalog视图
- en: The main solution to these problems is the `django.views.i18n.javascript_catalog()`
    view, which sends out a JavaScript code library with functions that mimic the
    `gettext` interface, plus an array of translation strings.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题的主要解决方案是`django.views.i18n.javascript_catalog()`视图，它发送一个JavaScript代码库，其中包含模仿`gettext`接口的函数，以及一个翻译字符串数组。
- en: Those translation strings are taken from applications or Django core, according
    to what you specify in either the `info_dict` or the URL. Paths listed in `LOCALE_PATHS`
    are also included.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这些翻译字符串是根据您在`info_dict`或URL中指定的内容来自应用程序或Django核心。`LOCALE_PATHS`中列出的路径也包括在内。
- en: 'You hook it up like this:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以这样连接它：
- en: '[PRE49]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Each string in `packages` should be in Python dotted-package syntax (the same
    format as the strings in `INSTALLED_APPS`) and should refer to a package that
    contains a `locale` directory. If you specify multiple packages, all those catalogs
    are merged into one catalog. This is useful if you have JavaScript that uses strings
    from different applications.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`packages`中的每个字符串都应该是Python点分包语法（与`INSTALLED_APPS`中的字符串格式相同），并且应该引用包含`locale`目录的包。如果指定多个包，所有这些目录都将合并为一个目录。如果您的JavaScript使用来自不同应用程序的字符串，则这很有用。'
- en: The precedence of translations is such that the packages appearing later in
    the `packages` argument have higher precedence than the ones appearing at the
    beginning, this is important in the case of clashing translations for the same
    literal.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译的优先级是这样的，`packages`参数中后面出现的包比出现在开头的包具有更高的优先级，这在相同文字的冲突翻译的情况下很重要。
- en: By default, the view uses the `djangojs` `gettext` domain. This can be changed
    by altering the `domain` argument.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，视图使用`djangojs` `gettext`域。这可以通过修改`domain`参数来更改。
- en: 'You can make the view dynamic by putting the packages into the URL pattern:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将包放入URL模式中使视图动态化：
- en: '[PRE50]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: With this, you specify the packages as a list of package names delimited by
    '+' signs in the URL. This is especially useful if your pages use code from different
    apps and this changes often and you don't want to pull in one big catalog file.
    As a security measure, these values can only be either `django.conf` or any package
    from the `INSTALLED_APPS` setting.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，您可以将包作为URL中由`+`符号分隔的包名称列表指定。如果您的页面使用来自不同应用的代码，并且这些代码经常更改，您不希望拉入一个大的目录文件，这将特别有用。作为安全措施，这些值只能是`django.conf`或`INSTALLED_APPS`设置中的任何包。
- en: The JavaScript translations found in the paths listed in the `LOCALE_PATHS`
    setting are also always included. To keep consistency with the translations lookup
    order algorithm used for Python and templates, the directories listed in `LOCALE_PATHS`
    have the highest precedence with the ones appearing first having higher precedence
    than the ones appearing later.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`LOCALE_PATHS`设置中列出的路径中找到的JavaScript翻译也总是包含在内。为了保持与用于Python和模板的翻译查找顺序算法的一致性，`LOCALE_PATHS`中列出的目录具有最高的优先级，先出现的目录比后出现的目录具有更高的优先级。'
- en: Using the JavaScript translation catalog
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JavaScript翻译目录
- en: 'To use the catalog, just pull in the dynamically generated script like this:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用目录，只需像这样拉入动态生成的脚本：
- en: '[PRE51]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'This uses reverse URL lookup to find the URL of the JavaScript catalog view.
    When the catalog is loaded, your JavaScript code can use the standard `gettext`
    interface to access it:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了反向URL查找来查找JavaScript目录视图的URL。加载目录时，您的JavaScript代码可以使用标准的`gettext`接口来访问它：
- en: '[PRE52]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'There is also an `ngettext` interface:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个`ngettext`接口：
- en: '[PRE53]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'and even a string interpolation function:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至还有一个字符串插值函数：
- en: '[PRE54]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The interpolation syntax is borrowed from Python, so the `interpolate` function
    supports both positional and named interpolation:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 插值语法是从Python借来的，因此`interpolate`函数支持位置和命名插值：
- en: 'Positional interpolation: `obj` contains a JavaScript array object whose elements
    values are then sequentially interpolated in their corresponding `fmt` placeholders
    in the same order they appear. For example:'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置插值：`obj`包含一个JavaScript数组对象，其元素值然后按照它们出现的顺序依次插值到相应的`fmt`占位符中。例如：
- en: '[PRE55]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Named interpolation: This mode is selected by passing the optional boolean
    named parameter as true. `obj` contains a JavaScript object or associative array.
    For example:'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名插值：通过将可选的布尔命名参数设置为true来选择此模式。`obj`包含一个JavaScript对象或关联数组。例如：
- en: '[PRE56]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'You shouldn''t go over the top with string interpolation, though: this is still
    JavaScript, so the code has to make repeated regular-expression substitutions.
    This isn''t as fast as string interpolation in Python, so keep it to those cases
    where you really need it (for example, in conjunction with `ngettext` to produce
    proper pluralization).'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，您不应该过度使用字符串插值：这仍然是JavaScript，因此代码必须进行重复的正则表达式替换。这不像Python中的字符串插值那样快，因此只在您真正需要它的情况下使用它（例如，与`ngettext`一起产生正确的复数形式）。
- en: Note on performance
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能说明
- en: The `javascript_catalog()` view generates the catalog from `.mo` files on every
    request. Since its output is constant-at least for a given version of a site-it's
    a good candidate for caching.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`javascript_catalog()`视图会在每次请求时从`.mo`文件生成目录。由于它的输出是恒定的-至少对于站点的特定版本来说-它是一个很好的缓存候选者。'
- en: Server-side caching will reduce CPU load. It's easily implemented with the `cache_page()`
    decorator. To trigger cache invalidation when your translations change, provide
    a version-dependent key prefix, as shown in the example below, or map the view
    at a version-dependent URL.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端缓存将减少CPU负载。可以使用`cache_page()`装饰器轻松实现。要在翻译更改时触发缓存失效，请提供一个版本相关的键前缀，如下例所示，或者将视图映射到一个版本相关的URL。
- en: '[PRE57]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Client-side caching will save bandwidth and make your site load faster. If you're
    using ETags (`USE_ETAGS = True`), you're already covered. Otherwise, you can apply
    conditional decorators. In the following example, the cache is invalidated whenever
    you restart your application server.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端缓存将节省带宽并使您的站点加载更快。如果您使用ETags（`USE_ETAGS = True`），则已经覆盖了。否则，您可以应用条件装饰器。在下面的示例中，每当重新启动应用程序服务器时，缓存就会失效。
- en: '[PRE58]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: You can even pre-generate the JavaScript catalog as part of your deployment
    procedure and serve it as a static file ([http://django-statici18n.readthedocs.org/en/latest/](http://django-statici18n.readthedocs.org/en/latest/)).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以在部署过程的一部分预先生成JavaScript目录，并将其作为静态文件提供。[http://django-statici18n.readthedocs.org/en/latest/](http://django-statici18n.readthedocs.org/en/latest/)。
- en: 'Internationalization: In URL patterns'
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国际化：在URL模式中
- en: 'Django provides two mechanisms to internationalize URL patterns:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了两种国际化URL模式的机制：
- en: Adding the language prefix to the root of the URL patterns to make it possible
    for `LocaleMiddleware` to detect the language to activate from the requested URL.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将语言前缀添加到URL模式的根部，以便`LocaleMiddleware`可以从请求的URL中检测要激活的语言。
- en: Making URL patterns themselves translatable via the `django.utils.translation.ugettext_lazy()`
    function.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`django.utils.translation.ugettext_lazy()`函数使URL模式本身可翻译。
- en: Using either one of these features requires that an active language be set for
    each request; in other words, you need to have `django.middleware.locale.LocaleMiddleware`
    in your `MIDDLEWARE_CLASSES` setting.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些功能中的任何一个都需要为每个请求设置一个活动语言；换句话说，您需要在`MIDDLEWARE_CLASSES`设置中拥有`django.middleware.locale.LocaleMiddleware`。
- en: Language prefix in URL patterns
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: URL模式中的语言前缀
- en: 'This function can be used in your root URLconf and Django will automatically
    prepend the current active language code to all URL patterns defined within `i18n_patterns()`.
    Example URL patterns:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数可以在您的根URLconf中使用，Django将自动将当前活动语言代码添加到`i18n_patterns()`中定义的所有URL模式之前。示例URL模式：
- en: '[PRE59]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'After defining these URL patterns, Django will automatically add the language
    prefix to the URL patterns that were added by the `i18n_patterns` function. Example:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 定义这些URL模式后，Django将自动将语言前缀添加到由`i18n_patterns`函数添加的URL模式。例如：
- en: '[PRE60]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '`i18n_patterns()` is only allowed in your root URLconf. Using it within an
    included URLconf will throw an `ImproperlyConfigured` exception.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`i18n_patterns()`只允许在根URLconf中使用。在包含的URLconf中使用它将引发`ImproperlyConfigured`异常。'
- en: Translating URL patterns
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 翻译URL模式
- en: 'URL patterns can also be marked translatable using the `ugettext_lazy()` function.
    Example:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: URL模式也可以使用`ugettext_lazy()`函数进行标记翻译。例如：
- en: '[PRE61]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'After you''ve created the translations, the `reverse()` function will return
    the URL in the active language. Example:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了翻译后，`reverse()`函数将返回活动语言的URL。例如：
- en: '[PRE62]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: In most cases, it's best to use translated URLs only within a language-code-prefixed
    block of patterns (using `i18n_patterns()`), to avoid the possibility that a carelessly
    translated URL causes a collision with a non-translated URL pattern.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，最好只在语言代码前缀的模式块中使用翻译后的URL（使用`i18n_patterns()`），以避免疏忽翻译的URL导致与未翻译的URL模式发生冲突的可能性。
- en: Reversing in templates
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在模板中进行反向操作
- en: 'If localized URLs get reversed in templates, they always use the current language.
    To link to a URL in another language use the `language` template tag. It enables
    the given language in the enclosed template section:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在模板中反转了本地化的URL，它们将始终使用当前语言。要链接到另一种语言的URL，请使用`language`模板标签。它在封闭的模板部分中启用给定的语言：
- en: '[PRE63]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The `language` tag expects the language code as the only argument.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`language`标签期望语言代码作为唯一参数。'
- en: 'Localization: How to create language files'
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地化：如何创建语言文件
- en: Once the string literals of an application have been tagged for later translation,
    the translation themselves need to be written (or obtained). Here's how that works.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序的字符串文字被标记为以后进行翻译，翻译本身需要被编写（或获取）。下面是它的工作原理。
- en: Message files
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息文件
- en: The first step is to create a message file for a new language. A message file
    is a plain-text file, representing a single language, that contains all available
    translation strings and how they should be represented in the given language.
    Message files have a `.po` file extension.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是为新语言创建一个消息文件。消息文件是一个纯文本文件，代表单一语言，包含所有可用的翻译字符串以及它们在给定语言中的表示方式。消息文件具有`.po`文件扩展名。
- en: Django comes with a tool, `django-admin makemessages`, that automates the creation
    and upkeep of these files.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: Django附带了一个工具`django-admin makemessages`，它可以自动创建和维护这些文件。
- en: 'The `makemessages` command (and `compilemessages` discussed later) use commands
    from the GNU `gettext` toolset: `xgettext`, `msgfmt`, `msgmerge` and `msguniq`.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`makemessages`命令（以及稍后讨论的`compilemessages`）使用GNU `gettext`工具集中的命令：`xgettext`、`msgfmt`、`msgmerge`和`msguniq`。'
- en: The minimum version of the `gettext` utilities supported is 0.15.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的`gettext`实用程序的最低版本为0.15。
- en: 'To create or update a message file, run this command:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建或更新消息文件，请运行此命令：
- en: '[PRE64]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '... where `de` is the locale name for the message file you want to create.
    For example, `pt_BR` for Brazilian Portuguese, `de_AT` for Austrian German or
    `id` for Indonesian.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '...其中`de`是要创建的消息文件的区域名称。例如，`pt_BR`表示巴西葡萄牙语，`de_AT`表示奥地利德语，`id`表示印尼语。'
- en: 'The script should be run from one of two places:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本应该从以下两个地方之一运行：
- en: The root directory of your Django project (the one that contains `manage.py`).
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的Django项目的根目录（包含`manage.py`的目录）。
- en: The root directory of one of your Django apps.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的Django应用程序之一的根目录。
- en: The script runs over your project source tree or your application source tree
    and pulls out all strings marked for translation (see how-django-discovers-translations
    and be sure `LOCALE_PATHS` is configured correctly). It creates (or updates) a
    message file in the directory `locale/LANG/LC_MESSAGES`. In the `de` example,
    the file will be `locale/de/LC_MESSAGES/django.po`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本在项目源树或应用程序源树上运行，并提取所有标记为翻译的字符串（请参阅how-django-discovers-translations并确保`LOCALE_PATHS`已正确配置）。它在目录`locale/LANG/LC_MESSAGES`中创建（或更新）一个消息文件。在`de`的示例中，文件将是`locale/de/LC_MESSAGES/django.po`。
- en: When you run `makemessages` from the root directory of your project, the extracted
    strings will be automatically distributed to the proper message files. That is,
    a string extracted from a file of an app containing a `locale` directory will
    go in a message file under that directory. A string extracted from a file of an
    app without any `locale` directory will either go in a message file under the
    directory listed first in `LOCALE_PATHS` or will generate an error if `LOCALE_PATHS`
    is empty.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 当您从项目的根目录运行`makemessages`时，提取的字符串将自动分发到适当的消息文件中。也就是说，从包含`locale`目录的应用程序文件中提取的字符串将放在该目录下的消息文件中。从不包含任何`locale`目录的应用程序文件中提取的字符串将放在`LOCALE_PATHS`中列出的第一个目录下的消息文件中，如果`LOCALE_PATHS`为空，则会生成错误。
- en: 'By default, `django-admin makemessages` examines every file that has the `.html`
    or `.txt` file extension. In case you want to override that default, use the `-extension`
    or `-e` option to specify the file extensions to examine:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`django-admin makemessages`检查具有`.html`或`.txt`文件扩展名的每个文件。如果要覆盖默认设置，请使用`-extension`或`-e`选项指定要检查的文件扩展名：
- en: '[PRE65]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Separate multiple extensions with commas and/or use `-e` or `-extension` multiple
    times:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 用逗号分隔多个扩展名和/或多次使用`-e`或`-extension`：
- en: '[PRE66]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Note
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When creating message files from JavaScript source code you need to use the
    special 'djangojs' domain, not `e js`.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 从JavaScript源代码创建消息文件时，需要使用特殊的'djangojs'域，而不是`e js`。
- en: If you don't have the `gettext` utilities installed, `makemessages` will create
    empty files. If that's the case, either install the `gettext` utilities or just
    copy the English message file (`locale/en/LC_MESSAGES/django.po`) if available
    and use it as a starting point; it's just an empty translation file.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有安装`gettext`实用程序，`makemessages`将创建空文件。如果是这种情况，要么安装`gettext`实用程序，要么只需复制英文消息文件（`locale/en/LC_MESSAGES/django.po`）（如果有的话）并将其用作起点；它只是一个空的翻译文件。
- en: If you're using Windows and need to install the GNU `gettext` utilities so `makemessages`
    works, see *gettext on windows* a little later in the chapter for more information.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Windows并且需要安装GNU `gettext`实用程序以便`makemessages`正常工作，请参阅本章稍后的*在Windows上使用gettext*以获取更多信息。
- en: The format of `.po` files is straightforward. Each `.po` file contains a small
    bit of metadata, such as the translation maintainer's contact information, but
    the bulk of the file is a list of *messages*-simple mappings between translation
    strings and the actual translated text for the particular language.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`.po`文件的格式很简单。每个`.po`文件包含一小部分元数据，例如翻译维护者的联系信息，但文件的大部分是*消息*的列表-翻译字符串和特定语言的实际翻译文本之间的简单映射。'
- en: 'For example, if your Django app contained a translation string for the text
    `"Welcome to my site."`, like so:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您的Django应用程序包含了文本`"欢迎来到我的网站。"`的翻译字符串，如下所示：
- en: '[PRE67]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '... then `django-admin makemessages` will have created a `.po` file containing
    the following snippet-a message:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`django-admin makemessages`将创建一个包含以下片段消息的`.po`文件：
- en: '[PRE68]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'A quick explanation:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的解释：
- en: '`msgid` is the translation string, which appears in the source. Don''t change
    it.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msgid`是出现在源中的翻译字符串。不要更改它。'
- en: '`msgstr` is where you put the language-specific translation. It starts out
    empty, so it''s your responsibility to change it. Make sure you keep the quotes
    around your translation.'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msgstr`是您放置特定于语言的翻译的地方。它起初是空的，所以您有责任更改它。确保您在翻译周围保留引号。'
- en: As a convenience, each message includes, in the form of a comment line prefixed
    with `#` and located above the `msgid` line, the filename and line number from
    which the translation string was gleaned.
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了方便起见，每条消息都包括一个以`#`为前缀的注释行，位于`msgid`行上方，其中包含了翻译字符串所在的文件名和行号。
- en: Long messages are a special case. There, the first string directly after the
    `msgstr` (or `msgid`) is an empty string. Then the content itself will be written
    over the next few lines as one string per line. Those strings are directly concatenated.
    Don't forget trailing spaces within the strings; otherwise, they'll be tacked
    together without whitespace!
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 长消息是一个特殊情况。在那里，`msgstr`（或`msgid`）之后的第一个字符串是一个空字符串。然后内容本身将作为下面几行的一个字符串写入。这些字符串直接连接在一起。不要忘记字符串内的尾随空格；否则，它们将被连接在一起而没有空格！
- en: Due to the way the `gettext` tools work internally and because we want to allow
    non-ASCII source strings in Django's core and your applications, you must use
    UTF-8 as the encoding for your PO files (the default when PO files are created).
    This means that everybody will be using the same encoding, which is important
    when Django processes the PO files.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`gettext`工具的内部工作方式，以及我们希望允许Django核心和您的应用程序中的非ASCII源字符串，您必须将UTF-8用作PO文件的编码（创建PO文件时的默认值）。这意味着每个人都将使用相同的编码，在Django处理PO文件时这一点很重要。
- en: 'To re-examine all source code and templates for new translation strings and
    update all message files for all languages, run this:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新检查所有源代码和模板以获取新的翻译字符串，并为所有语言更新所有消息文件，请运行以下命令：
- en: '[PRE69]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Compiling message files
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译消息文件
- en: After you create your message file-and each time you make changes to it-you'll
    need to compile it into a more efficient form, for use by `gettext`. Do this with
    the `django-admin compilemessages` utility.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 创建消息文件后，每次对其进行更改时，您都需要将其编译为`gettext`可以使用的更高效的形式。使用`django-admin compilemessages`实用程序进行此操作。
- en: 'This tool runs over all available `.po` files and creates `.mo` files, which
    are binary files optimized for use by `gettext`. In the same directory from which
    you ran `django-admin makemessages`, run:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 此工具将遍历所有可用的`.po`文件，并创建`.mo`文件，这些文件是为`gettext`使用而优化的二进制文件。在您运行`django-admin makemessages`的同一目录中运行：
- en: '[PRE70]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: That's it. Your translations are ready for use.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。您的翻译已经准备好了。
- en: If you're using Windows and need to install the GNU `gettext` utilities so `django-admin
    compilemessages` works, see `gettext` on Windows below for more information.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Windows并且需要安装GNU `gettext`实用程序以使`django-admin compilemessages`正常工作，请参阅下面有关Windows上的`gettext`的更多信息。
- en: Django only supports `.po` files encoded in UTF-8 and without any BOM (Byte
    Order Mark) so if your text editor adds such marks to the beginning of files by
    default then you will need to reconfigure it.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: Django仅支持以UTF-8编码且没有任何BOM（字节顺序标记）的`.po`文件，因此如果您的文本编辑器默认在文件开头添加这些标记，那么您需要重新配置它。
- en: Creating message files from JavaScript source code
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从JavaScript源代码创建消息文件
- en: 'You create and update the message files the same way as the other Django message
    files-with the `django-admin makemessages` tool. The only difference is you need
    to explicitly specify what in `gettext` parlance is known as a domain in this
    case the `djangojs` domain, by providing a `-d djangojs` parameter, like this:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像其他Django消息文件一样使用`django-admin makemessages`工具创建和更新消息文件。唯一的区别是，您需要显式指定在这种情况下称为`djangojs`域的`gettext`术语中的域，通过提供一个`-d
    djangojs`参数，就像这样：
- en: '[PRE71]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: This would create or update the message file for JavaScript for German. After
    updating message files, just run `django-admin compilemessages` the same way as
    you do with normal Django message files.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为德语创建或更新JavaScript的消息文件。更新消息文件后，只需像处理普通Django消息文件一样运行`django-admin compilemessages`。
- en: gettext on windows
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows上的gettext
- en: 'This is only needed for people who either want to extract message IDs or compile
    message files (`.po`). Translation work itself just involves editing existing
    files of this type, but if you want to create your own message files, or want
    to test or compile a changed message file, you will need the `gettext` utilities:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅适用于那些想要提取消息ID或编译消息文件（`.po`）的人。翻译工作本身只涉及编辑这种类型的现有文件，但如果您想创建自己的消息文件，或者想测试或编译已更改的消息文件，您将需要`gettext`实用程序：
- en: Download the following zip files from the GNOME servers ([https://download.gnome.org/binaries/win32/dependencies/](https://download.gnome.org/binaries/win32/dependencies/))
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从GNOME服务器（[https://download.gnome.org/binaries/win32/dependencies/](https://download.gnome.org/binaries/win32/dependencies/)）下载以下zip文件
- en: '`gettext-runtime-X.zip`'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gettext-runtime-X.zip`'
- en: '`gettext-tools-X.zip`'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gettext-tools-X.zip`'
- en: '`X` is the version number; version `0.15` or higher is required.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`X`是版本号；需要版本`0.15`或更高版本。'
- en: Extract the contents of the `bin\` directories in both files to the same folder
    on your system (that is `C:\Program Files\gettext-utils`)
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将这两个文件夹中`bin\`目录的内容提取到系统上的同一个文件夹中（即`C:\Program Files\gettext-utils`）
- en: 'Update the system PATH:'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新系统PATH：
- en: '`Control Panel > System > Advanced > Environment Variables`.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`控制面板 > 系统 > 高级 > 环境变量`。'
- en: In the `System variables` list, click `Path`, click `Edit`.
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`系统变量`列表中，点击`Path`，点击`Edit`。
- en: Add `;C:\Program Files\gettext-utils\bin` at the end of the `Variable value`
    field.
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Variable value`字段的末尾添加`;C:\Program Files\gettext-utils\bin`。
- en: You may also use `gettext` binaries you have obtained elsewhere, so long as
    the `xgettext -version` command works properly. Do not attempt to use Django translation
    utilities with a `gettext` package if the command `xgettext -version` entered
    at a Windows command prompt causes a popup window saying xgettext.exe has generated
    errors and will be closed by Windows.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用其他地方获取的`gettext`二进制文件，只要`xgettext -version`命令正常工作。如果在Windows命令提示符中输入`xgettext
    -version`命令会弹出一个窗口说xgettext.exe已经生成错误并将被Windows关闭，请不要尝试使用Django翻译工具与`gettext`包。
- en: Customizing the makemessages command
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义makemessages命令
- en: 'If you want to pass additional parameters to `xgettext`, you need to create
    a custom `makemessages` command and override its `xgettext_options` attribute:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想向`xgettext`传递额外的参数，您需要创建一个自定义的`makemessages`命令并覆盖其`xgettext_options`属性：
- en: '[PRE72]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'If you need more flexibility, you could also add a new argument to your custom
    `makemessages` command:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要更灵活性，您还可以向自定义的`makemessages`命令添加一个新参数：
- en: '[PRE73]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Explicitly setting the active language
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显式设置活动语言
- en: 'You may want to set the active language for the current session explicitly.
    Perhaps a user''s language preference is retrieved from another system, for example.
    You''ve already been introduced to `django.utils.translation.activate()`. That
    applies to the current thread only. To persist the language for the entire session,
    also modify `LANGUAGE_SESSION_KEY` in the session:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望明确为当前会话设置活动语言。也许用户的语言偏好是从另一个系统中检索的。例如，您已经介绍了`django.utils.translation.activate()`。这仅适用于当前线程。要使语言在整个会话中持续存在，还要修改会话中的`LANGUAGE_SESSION_KEY`：
- en: '[PRE74]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'You would typically want to use both: `django.utils.translation.activate()`
    will change the language for this thread, and modifying the session makes this
    preference persist in future requests.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 通常您希望同时使用：`django.utils.translation.activate()`将更改此线程的语言，并修改会话使此偏好在将来的请求中持续存在。
- en: 'If you are not using sessions, the language will persist in a cookie, whose
    name is configured in `LANGUAGE_COOKIE_NAME`. For example:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不使用会话，语言将保留在一个cookie中，其名称在`LANGUAGE_COOKIE_NAME`中配置。例如：
- en: '[PRE75]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Using translations outside views and templates
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图和模板之外使用翻译
- en: While Django provides a rich set of internationalization tools for use in views
    and templates, it does not restrict the usage to Django-specific code. The Django
    translation mechanisms can be used to translate arbitrary texts to any language
    that is supported by Django (as long as an appropriate translation catalog exists,
    of course).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Django提供了丰富的国际化工具供视图和模板使用，但它并不限制使用于Django特定的代码。Django的翻译机制可以用于将任意文本翻译成Django支持的任何语言（当然，前提是存在适当的翻译目录）。
- en: You can load a translation catalog, activate it and translate text to language
    of your choice, but remember to switch back to original language, as activating
    a translation catalog is done on per-thread basis and such change will affect
    code running in the same thread.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以加载一个翻译目录，激活它并将文本翻译成您选择的语言，但请记住切换回原始语言，因为激活翻译目录是基于每个线程的，这样的更改将影响在同一线程中运行的代码。
- en: 'For example:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE76]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Calling this function with the value 'de' will give you "`Willkommen`", regardless
    of `LANGUAGE_CODE` and language set by middleware.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 使用值'de'调用此函数将给您"`Willkommen`"，而不管`LANGUAGE_CODE`和中间件设置的语言如何。
- en: Functions of particular interest are `django.utils.translation.get_language()`
    which returns the language used in the current thread, `django.utils.translation.activate()`
    which activates a translation catalog for the current thread, and `django.utils.translation.check_for_language()`
    which checks if the given language is supported by Django.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 特别感兴趣的功能是`django.utils.translation.get_language()`，它返回当前线程中使用的语言，`django.utils.translation.activate()`，它激活当前线程的翻译目录，以及`django.utils.translation.check_for_language()`，它检查给定的语言是否受Django支持。
- en: Implementation notes
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现说明
- en: Specialties of Django translation
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django翻译的特点
- en: 'Django''s translation machinery uses the standard `gettext` module that comes
    with Python. If you know `gettext`, you might note these specialties in the way
    Django does translation:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: Django的翻译机制使用了Python自带的标准`gettext`模块。如果您了解`gettext`，您可能会注意到Django在翻译方面的一些特点：
- en: The string domain is `django` or `djangojs`. This string domain is used to differentiate
    between different programs that store their data in a common message-file library
    (usually `/usr/share/locale/`). The `django` domain is used for python and template
    translation strings and is loaded into the global translation catalogs. The `djangojs`
    domain is only used for JavaScript translation catalogs to make sure that those
    are as small as possible.
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串域是`django`或`djangojs`。这个字符串域用于区分存储其数据在一个共同的消息文件库中的不同程序（通常是`/usr/share/locale/`）。`django`域用于Python和模板翻译字符串，并加载到全局翻译目录中。`djangojs`域仅用于JavaScript翻译目录，以确保其尽可能小。
- en: Django doesn't use `xgettext` alone. It uses Python wrappers around `xgettext`
    and `msgfmt`. This is mostly for convenience.
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django不仅仅使用`xgettext`。它使用围绕`xgettext`和`msgfmt`的Python包装器。这主要是为了方便。
- en: How Django discovers language preference
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django如何发现语言偏好
- en: Once you've prepared your translations-or, if you just want to use the translations
    that come with Django-you'll need to activate translation for your app.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您准备好您的翻译，或者如果您只想使用Django提供的翻译，您需要为您的应用程序激活翻译。
- en: Behind the scenes, Django has a very flexible model of deciding which language
    should be used-installation-wide, for a particular user, or both.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，Django有一个非常灵活的模型来决定应该使用哪种语言-全局安装、特定用户或两者。
- en: To set an installation-wide language preference, set `LANGUAGE_CODE`. Django
    uses this language as the default translation-the final attempt if no better matching
    translation is found through one of the methods employed by the locale middleware
    (see below).
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置全局安装的语言偏好，请设置`LANGUAGE_CODE`。Django将使用此语言作为默认翻译-如果通过区域设置中间件采用的方法找不到更好的匹配翻译，则作为最后一次尝试。
- en: If all you want is to run Django with your native language all you need to do
    is set `LANGUAGE_CODE` and make sure the corresponding message files and their
    compiled versions (`.mo`) exist.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想使用本地语言运行Django，您只需要设置`LANGUAGE_CODE`并确保相应的消息文件及其编译版本（`.mo`）存在。
- en: If you want to let each individual user specify which language they prefer,
    then you also need to use the `LocaleMiddleware`. `LocaleMiddleware` enables language
    selection based on data from the request. It customizes content for each user.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要让每个用户指定他们喜欢的语言，那么您还需要使用`LocaleMiddleware`。`LocaleMiddleware`基于请求中的数据启用语言选择。它为每个用户定制内容。
- en: 'To use `LocaleMiddleware`, add `''django.middleware.locale.LocaleMiddleware''`
    to your `MIDDLEWARE_CLASSES` setting. Because middleware order matters, you should
    follow these guidelines:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`LocaleMiddleware`，请将`'django.middleware.locale.LocaleMiddleware'`添加到您的`MIDDLEWARE_CLASSES`设置中。因为中间件顺序很重要，所以您应该遵循以下准则：
- en: Make sure it's one of the first middlewares installed.
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保它是最先安装的中间件之一。
- en: It should come after `SessionMiddleware`, because `LocaleMiddleware` makes use
    of session data. And it should come before `CommonMiddleware` because `CommonMiddleware`
    needs an activated language in order to resolve the requested URL.
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该放在`SessionMiddleware`之后，因为`LocaleMiddleware`使用会话数据。它应该放在`CommonMiddleware`之前，因为`CommonMiddleware`需要激活的语言来解析请求的URL。
- en: If you use `CacheMiddleware`, put `LocaleMiddleware` after it.
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用`CacheMiddleware`，请在其后放置`LocaleMiddleware`。
- en: 'For example, your `MIDDLEWARE_CLASSES` might look like this:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您的`MIDDLEWARE_CLASSES`可能如下所示：
- en: '[PRE77]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: For more on middleware, see [Chapter 17](ch17.xhtml "Chapter 17. Django Middleware"),
    *Django Middleware*.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 有关中间件的更多信息，请参见[第17章](ch17.xhtml "第17章 Django中间件")，*Django中间件*。
- en: '`LocaleMiddleware` tries to determine the user''s language preference by following
    this algorithm:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocaleMiddleware`尝试通过以下算法确定用户的语言偏好：'
- en: First, it looks for the language prefix in the requested URL. This is only performed
    when you are using the `i18n_patterns` function in your root URLconf. See *internationalization*
    for more information about the language prefix and how to internationalize URL
    patterns.
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，它会在请求的URL中查找语言前缀。只有在您的根URLconf中使用`i18n_patterns`函数时才会执行此操作。有关语言前缀以及如何国际化URL模式的更多信息，请参见*国际化*。
- en: Failing that, it looks for the `LANGUAGE_SESSION_KEY` key in the current user's
    session.
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果失败，它会查找当前用户会话中的`LANGUAGE_SESSION_KEY`键。
- en: Failing that, it looks for a cookie. The name of the cookie used is set by the
    `LANGUAGE_COOKIE_NAME` setting. (The default name is `django_language`.)
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果失败，它会查找一个cookie。使用的cookie的名称由`LANGUAGE_COOKIE_NAME`设置。 （默认名称是`django_language`。）
- en: Failing that, it looks at the `Accept-Language` HTTP header. This header is
    sent by your browser and tells the server which language(s) you prefer, in order
    by priority. Django tries each language in the header until it finds one with
    available translations.
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果失败，它会查看`Accept-Language` HTTP标头。此标头由您的浏览器发送，并告诉服务器您首选的语言（按优先级顺序）。Django尝试标头中的每种语言，直到找到具有可用翻译的语言。
- en: '***** Failing that, it uses the global `LANGUAGE_CODE` setting.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***** 如果失败，它会使用全局`LANGUAGE_CODE`设置。'
- en: '**Notes:**'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: In each of these places, the language preference is expected to be in the standard
    language format, as a string. For example, Brazilian Portuguese is `pt-br`.
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这些地方中，语言偏好应该是标准语言格式的字符串。例如，巴西葡萄牙语是`pt-br`。
- en: If a base language is available but the sublanguage specified is not, Django
    uses the base language. For example, if a user specifies `de-at` (Austrian German)
    but Django only has `de` available, Django uses `de`.
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果基本语言可用但未指定子语言，则Django将使用基本语言。例如，如果用户指定`de-at`（奥地利德语），但Django只有`de`可用，Django将使用`de`。
- en: 'Only languages listed in the `LANGUAGES` setting can be selected. If you want
    to restrict the language selection to a subset of provided languages (because
    your application doesn''t provide all those languages), set `LANGUAGES` to a list
    of languages. For example:'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在`LANGUAGES`设置中列出的语言才能被选择。如果要将语言选择限制为提供的语言的子集（因为您的应用程序没有提供所有这些语言），请将`LANGUAGES`设置为语言列表。例如：
- en: '[PRE78]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: This example restricts languages that are available for automatic selection
    to German and English (and any sublanguage, like `de-ch` or `en-us`).
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例将可用于自动选择的语言限制为德语和英语（以及任何子语言，如`de-ch`或`en-us`）。
- en: If you define a custom `LANGUAGES` setting, as explained in the previous bullet,
    you can mark the language names as translation strings-but use `ugettext_lazy()`
    instead of `ugettext()` to avoid a circular import.
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您定义了自定义的`LANGUAGES`设置，如前面的项目所述，您可以将语言名称标记为翻译字符串-但使用`ugettext_lazy()`而不是`ugettext()`以避免循环导入。
- en: 'Here''s a sample settings file:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例设置文件：
- en: '[PRE79]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Once `LocaleMiddleware` determines the user''s preference, it makes this preference
    available as `request.LANGUAGE_CODE` for each `HttpRequest`. Feel free to read
    this value in your view code. Here''s a simple example:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`LocaleMiddleware`确定了用户的偏好，它会将这个偏好作为`request.LANGUAGE_CODE`对每个`HttpRequest`可用。请随意在您的视图代码中读取这个值。这里有一个简单的例子：
- en: '[PRE80]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Note that, with static (middleware-less) translation, the language is in `settings.LANGUAGE_CODE`,
    while with dynamic (middleware) translation, it's in `request.LANGUAGE_CODE`.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于静态（无中间件）翻译，语言在`settings.LANGUAGE_CODE`中，而对于动态（中间件）翻译，它在`request.LANGUAGE_CODE`中。
- en: How Django discovers translations
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django如何发现翻译
- en: 'At runtime, Django builds an in-memory unified catalog of literal translations.
    To achieve this, it looks for translations by following this algorithm regarding
    the order in which it examines the different file paths to load the compiled message
    files (`.mo`) and the precedence of multiple translations for the same literal:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，Django会构建一个内存中的统一的文字翻译目录。为了实现这一点，它会按照一定的顺序查找不同文件路径来加载编译好的消息文件（`.mo`），并确定同一文字的多个翻译的优先级。
- en: The directories listed in `LOCALE_PATHS` have the highest precedence, with the
    ones appearing first having higher precedence than the ones appearing later.
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`LOCALE_PATHS`中列出的目录具有最高的优先级，出现在前面的优先级高于后面的。
- en: Then, it looks for and uses if it exists a `locale` directory in each of the
    installed apps listed in `INSTALLED_APPS`. The ones appearing first have higher
    precedence than the ones appearing later.
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，它会查找并使用（如果存在）每个已安装应用程序中的`INSTALLED_APPS`列表中的`locale`目录。出现在前面的优先级高于后面的。
- en: Finally, the Django-provided base translation in `django/conf/locale` is used
    as a fallback.
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，Django提供的基础翻译在`django/conf/locale`中被用作后备。
- en: In all cases, the name of the directory containing the translation is expected
    to be named using locale name notation. For example, `de`, `pt_BR`, `es_AR`, and
    so on.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，包含翻译的目录的名称应该使用语言环境的命名规范。例如，`de`，`pt_BR`，`es_AR`等。
- en: This way, you can write applications that include their own translations, and
    you can override base translations in your project. Or, you can just build a big
    project out of several apps and put all translations into one big common message
    file specific to the project you are composing. The choice is yours.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，您可以编写包含自己翻译的应用程序，并且可以覆盖项目中的基础翻译。或者，您可以构建一个由多个应用程序组成的大型项目，并将所有翻译放入一个特定于您正在组合的项目的大型共同消息文件中。选择权在您手中。
- en: 'All message file repositories are structured the same way. They are:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 所有消息文件存储库的结构都是相同的。它们是：
- en: All paths listed in `LOCALE_PATHS` in your settings file are searched for `<language>/LC_MESSAGES/django.(po|mo)`
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的设置文件中列出的`LOCALE_PATHS`中搜索`<language>/LC_MESSAGES/django.(po|mo)`
- en: '`$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)`'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)`'
- en: '`$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo).`'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo).`'
- en: To create message files, you use the `django-admin makemessages` tool. And you
    use `django-admin compilemessages` to produce the binary `.mo` files that are
    used by `gettext`.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建消息文件，您可以使用`django-admin makemessages`工具。您可以使用`django-admin compilemessages`来生成二进制的`.mo`文件，这些文件将被`gettext`使用。
- en: You can also run `django-admin compilemessages` to make the compiler process
    all the directories in your `LOCALE_PATHS` setting.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以运行`django-admin compilemessages`来使编译器处理`LOCALE_PATHS`设置中的所有目录。
- en: What's next?
  id: totrans-393
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: In the next chapter, we will be looking at security in Django.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论Django中的安全性。
