- en: Chapter 11. Database Connectivity
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 数据库连接
- en: Django is a database-agnostic framework, which means that the database fields
    provided by Django are designed to work across different databases, such as **SQLite**,
    **Oracle**, **MySQL**, and **PostgreSQL**. In fact, they also work on several
    third-party database backends. PostgreSQL is a great database for Django in production,
    whereas SQLite is used for a development environment, and you will end up doing
    a lot of work if you don't want to use RDBMS for your project. This chapter will
    give you the detailed difference between the two types and will show you which
    is a better fit for Django, and, also, how we can actually implement them in our
    Django project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Django是一个数据库无关的框架，这意味着Django提供的数据库字段被设计为在不同的数据库中工作，比如SQLite、Oracle、MySQL和PostgreSQL。事实上，它们也可以在几个第三方数据库后端上工作。PostgreSQL是Django在生产中的一个很好的数据库，而SQLite用于开发环境，如果你不想为项目使用关系数据库管理系统（RDBMS），你将需要做很多工作。本章将详细介绍这两种类型的区别，并向您展示哪种更适合Django，以及我们如何在Django项目中实际实现它们。
- en: 'The following are the topics that we will deal with in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章将涉及的主题：
- en: SQL versus NoSQL
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL与NoSQL
- en: Django with relational databases
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django与关系数据库
- en: Django with NoSQL
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django与NoSQL
- en: Setting up a database system
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立数据库系统
- en: The single-page application project—URL shortener
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单页应用项目 - URL缩短器
- en: First of all, let's see the difference between SQL and NoSQL.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看SQL和NoSQL之间的区别。
- en: SQL versus NoSQL
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL与NoSQL
- en: SQL databases, or relational databases, have been around for a very long time;
    in fact, the databases were roughly assumed as SQL databases until the new term
    was coined—which is NoSQL.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: SQL数据库或关系数据库已经存在很长时间；事实上，直到新术语被创造出来之前，数据库大致被假定为SQL数据库，这个新术语就是NoSQL。
- en: 'Well, we are talking about the high-level differences between SQL and NoSQL.
    The following are the differences between them:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们正在谈论SQL和NoSQL之间的高级区别。以下是它们之间的区别：
- en: '| SQL database (RDBMS) | NoSQL database |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| SQL数据库（RDBMS） | NoSQL数据库 |'
- en: '| --- | --- |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| SQL databases are relational databases (RDBMS) | NoSQL databases are nonrelational
    or distributed databases |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| SQL数据库是关系数据库（RDBMS） | NoSQL数据库是非关系或分布式数据库 |'
- en: '| SQL databases are based on tables and its relationship with other tables
    | NoSQL are document based, key-value pairs, graph database, or wide column stores
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| SQL数据库基于表及其与其他表的关系 | NoSQL基于文档、键值对、图数据库或宽列存储 |'
- en: '| A SQL database stores its data in rows of a table | NoSQL is a collection
    of key-value pairs, documents, graph database, or wide column stores |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| SQL数据库将数据存储在表的行中 | NoSQL是一组键值对、文档、图数据库或宽列存储 |'
- en: '| SQL databases have a predefined schema | NoSQL has a dynamic schema |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| SQL数据库有预定义的模式 | NoSQL有动态模式 |'
- en: '| SQL databases are vertically scalable | NoSQL databases are horizontally
    scalable |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| SQL数据库是纵向可扩展的 | NoSQL数据库是横向可扩展的 |'
- en: '| SQL database examples are MySQL, Oracle, SQLite, PostgreSQL, and MS SQL |
    NoSQL database examples are MongoDB, BigTable, Redis, RavenDB, Cassandra, HBase,
    Neo4j, and CouchDB |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| SQL数据库的例子有MySQL、Oracle、SQLite、PostgreSQL和MS SQL | NoSQL数据库的例子有MongoDB、BigTable、Redis、RavenDB、Cassandra、HBase、Neo4j和CouchDB
    |'
- en: Let's try to understand the basic features of some of the famous SQL and NoSQL
    databases.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试着了解一些著名的SQL和NoSQL数据库的基本特性。
- en: SQL databases
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL数据库
- en: The following sections deal with different SQL databases and their usage.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分涉及不同的SQL数据库及其用法。
- en: MySQL – open source
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MySQL - 开源
- en: 'Being one of the most popular databases in the world, MySQL has some benefits
    that make it suitable for all kinds of business problems. The following are a
    few important benefits of MySQL:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作为世界上最流行的数据库之一，MySQL具有一些优点，使其适用于各种业务问题。以下是MySQL的一些重要优点：
- en: '**Replication**: MySQL supports replication, that is, by replicating a MySQL
    database, the work load can be significantly reduced from one machine, and an
    application can be easily scaled'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复制**：MySQL支持复制，通过复制MySQL数据库，可以显著减少一台机器的工作负载，并且可以轻松扩展应用程序'
- en: '**Sharding**: When the number of write operations are very high, sharding helps
    by partitioning the application server that divides the database into small chunks'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分片**：当写操作数量非常高时，分片通过将应用服务器分区来将数据库分成小块，有助于减轻负载'
- en: PostgreSQL
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: As mentioned before, PostgreSQL is the most popular database within the Django
    community. It also has the widest feature set of the core-supported databases.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，PostgreSQL是Django社区中最受欢迎的数据库。它也拥有核心支持的数据库中最广泛的功能集。
- en: Evolved PostgresSQL's advanced queries and features have made it possible to
    achieve the complex line of conventional SQL query into much simpler lines to
    write query. However, the implementation of arrays, hstore, JSON, and so on is
    kind of tricky with the conventional SQL databases.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 进化的PostgresSQL的高级查询和功能使得将复杂的传统SQL查询转换为更简单的查询变得可能。然而，使用传统的SQL数据库实现数组、hstore、JSON等功能有点棘手。
- en: NoSQL databases
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NoSQL数据库
- en: This concept was introduced when horizontal scaling was tough and RDBMS-based
    databases were not able to scale as much as they were expected to. It is often
    termed as Not only SQL. It provides a mechanism to store and retrieve data other
    than the traditional SQL methods.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念是在水平扩展困难且基于RDBMS的数据库无法像预期的那样扩展时引入的。它通常被称为Not only SQL。它提供了一种存储和检索数据的机制，而不是传统的SQL方法。
- en: MongoDB
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MongoDB
- en: 'MongoDB is one of the most popular document-based NoSQL databases, as it stores
    data in JSON-like documents. It is a nonrelational database with a dynamic schema.
    It was developed by the founders of **DoubleClick**. It is written in **C++**
    and is currently used by some big companies, such as The New York Times, Craigslist,
    and MTV Networks. The following are some of the benefits and strengths of MongoDB:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB是最受欢迎的基于文档的NoSQL数据库之一，它以类似JSON的文档存储数据。它是一个非关系数据库，具有动态模式。它是由**DoubleClick**的创始人开发的。它是用**C++**编写的，目前被一些大公司使用，如纽约时报、Craigslist和MTV
    Networks。以下是MongoDB的一些优点和优势：
- en: '**Speed**: For simple queries, it gives good performance, as all the related
    data is in a single document that eliminates join operations'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度**：对于简单的查询，它具有良好的性能，因为所有相关数据都在一个单个文档中，消除了连接操作'
- en: '**Scalability**: It is horizontally scalable, that is, you can reduce the workload
    by increasing the number of servers in your resource pool instead of relying on
    a standalone resource'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：它是水平可扩展的，也就是说，您可以通过增加资源池中服务器的数量来减少工作负载，而不是依赖独立的资源'
- en: '**Manageable**: It is easy to use for both developers and administrators. This
    also gives MondoDB the ability to share databases'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易管理**：对开发人员和管理员都很容易使用。这也使得MondoDB具有共享数据库的能力'
- en: '**Dynamic schema**: It gives you the flexibility to evolve your data schema
    without modifying the existing data'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态模式**：它为您提供了在不修改现有数据的情况下演变数据模式的灵活性'
- en: CouchDB
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CouchDB
- en: 'CouchDB is also a document-based NoSQL database. It stores data in the form
    of JSON documents. The following are some of the benefits and strengths of CouchDB:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: CouchDB也是一种基于文档的NoSQL数据库。它以JSON文档的形式存储数据。以下是CouchDB的一些优点和优势：
- en: '**Schema less**: As a member of the NoSQL family, it also has a schema-less
    property that makes it more flexible, as it has the form of JSON documents to
    store data'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无模式**：作为NoSQL家族的一员，它也具有无模式的特性，使其更加灵活，因为它具有存储数据的JSON文档形式'
- en: '**HTTP query**: You can access your database documents using your web browser'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTTP查询**：您可以使用Web浏览器访问数据库文档'
- en: '**Conflict resolution**: It has automatic conflict, which is useful when you
    are going to use a distributed database'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冲突解决**：它具有自动冲突，当您要使用分布式数据库时非常有用'
- en: '**Easy replication**: Replicating is fairly straightforward'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易复制**：复制相当简单'
- en: Redis
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Redis
- en: 'Redis is another open source NoSQL database that is mainly used because of
    its lightening speed. It is written in the ANSI C language. The following are
    some of the benefits and strengths of Redis:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Redis是另一个开源的NoSQL数据库，主要因其闪电般的速度而被广泛使用。它是用ANSI C语言编写的。以下是Redis的一些优点和优势：
- en: '**Data structures**: Redis provides efficient data structures to such an extent
    that it is sometimes called as a data structure server. The keys stored in a database
    can be hashes, lists, and strings, and can be sorted or unsorted sets.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据结构**：Redis提供了高效的数据结构，有时被称为数据结构服务器。存储在数据库中的键可以是哈希、列表和字符串，并且可以是排序或无序集合。'
- en: '**Redis as cache**: You can use Redis as a cache by implementing keys with
    limited time to improve the performance.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Redis作为缓存**：您可以使用Redis作为缓存，通过实现具有有限时间的键来提高性能。'
- en: '**Very fast**: It is considered as one of the fastest NoSQL servers, as it
    works with the in-memory dataset.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非常快**：它被认为是最快的NoSQL服务器之一，因为它使用内存数据集。'
- en: Setting up a database system
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置数据库系统
- en: Django supports several database engines. Interestingly, however, you only need
    to learn one API in order to use any of these database systems.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Django支持多种数据库引擎。然而有趣的是，您只需要学习一个API就可以使用任何这些数据库系统。
- en: This is possibly because of Django's database layer that abstracts access to
    the database system.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是因为Django的数据库层抽象了对数据库系统的访问。
- en: You will learn about this later, but, for now, you only need to know that regardless
    of which database system you choose, you will be able to run the Django applications
    developed in this book (or elsewhere) without modification.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后您将了解这一点，但是现在，您只需要知道无论您选择哪种数据库系统，都可以在不修改的情况下运行本书（或其他地方）开发的Django应用程序。
- en: Unlike client-server database systems, SQLite does not require a resident process
    in memory, and it stores the database in a single file, making it ideal for our
    development environment. That is why we have used this database throughout this
    project, until now. Of course, you are free to use your preferred database management
    system. We can tell Django which database system to use by editing a configuration
    file. It is also worth noting that if you want to use MySQL, you will need to
    install MySQL, which is the MySQL driver for Python.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 与客户端-服务器数据库系统不同，SQLite不需要在内存中保留进程，并且将数据库存储在单个文件中，使其非常适合我们的开发环境。这就是为什么我们在整个项目中一直使用这个数据库，直到现在。当然，您可以自由选择使用您喜欢的数据库管理系统。我们可以通过编辑配置文件告诉Django使用哪个数据库系统。值得注意的是，如果您想使用MySQL，您需要安装MySQL，这是Python的MySQL驱动程序。
- en: Installing a database system in Django is really simple; all your need to do
    is install the database you want to configure first, then add a few configuration
    lines in the `settings.py` file, and you are done with the database setup.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django中安装数据库系统非常简单；您只需要先安装要配置的数据库，然后在`settings.py`文件中添加几行配置，数据库设置就完成了。
- en: Setting up MySQL
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置MySQL
- en: We will install and configure MySQL and its related plugins step by step in
    the following sections.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的几节中逐步安装和配置MySQL及其相关插件。
- en: Installing MySQL in Linux – Debian
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Linux - Debian中安装MySQL
- en: 'Execute the following command to install MySQL in Linux (Debian here):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中执行以下命令安装MySQL（这里是Debian）：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After executing this command, you will be asked to set up MySQL and configure
    the database with a username and password.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令后，将要求您设置MySQL并使用用户名和密码配置数据库。
- en: Installing the MySQL plugin for Python
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Python的MySQL插件
- en: 'To install the MySQL-related plugins that you require, use the following command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装所需的与MySQL相关的插件，请使用以下命令：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, open the `settings.py` file and add the following lines for Django to
    connect with MySQL:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开`settings.py`文件，并添加以下行以使Django连接到MySQL：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That''s it, all you need to do now is to recreate all the tables in the new
    database that you just configured and run the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样，现在你需要做的就是在新配置的数据库中重新创建所有表，并运行以下命令：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You will get the `django.db.utils.ConnectionDoesNotExist` exception if you have
    not defined the database that you are trying to access.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试访问未定义的数据库，将会收到`django.db.utils.ConnectionDoesNotExist`异常。
- en: The advantage of Django is that you can use it with multiple databases at once.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Django的优势在于您可以同时在多个数据库中使用它。
- en: However, you may think, what is the need of multiple databases in the same project?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您可能会想，为什么在同一个项目中需要多个数据库？
- en: Until the NoSQL database came into existence, in most of the cases, the same
    database was often used to keep the records of all types of data, from critical
    data, such as user details, to dump data, such as logs; all were kept in the same
    database and the system faced challenges while scaling up the system.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 直到NoSQL数据库出现之前，在大多数情况下，通常使用同一个数据库来保存所有类型的数据记录，从关键数据（如用户详细信息）到转储数据（如日志）；所有这些都保存在同一个数据库中，系统在扩展系统时面临挑战。
- en: For a multiple database system, an ideal solution could be to store the relational
    information, such as users, their role, and other account information, in an SQL
    database, such as MySQL. The application data, which is independent, can be stored
    in a NoSQL database, such as MongoDB.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多数据库系统，一个理想的解决方案可能是将关系信息（例如用户、角色和其他帐户信息）存储在SQL数据库（如MySQL）中。独立的应用程序数据可以存储在NoSQL数据库（如MongoDB）中。
- en: We need to define multiple databases through a configuration file. Django needs
    to be told when you want to use more than one database with the database servers
    you use. So, in the `settings.py` file, you need to change the `DATABASES` setting
    with the database aliases map.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过配置文件定义多个数据库。当您想要使用多个数据库与您使用的数据库服务器时，Django需要告诉您。因此，在`settings.py`文件中，您需要使用数据库别名映射更改`DATABASES`设置。
- en: 'An appropriate example of the multiple database configuration can be written
    as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 多数据库配置的一个适当示例可以写成如下形式：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding example uses two databases, which are PostgreSQL and MySQL with
    the required credentials.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例使用了两个数据库，分别是PostgreSQL和MySQL，具有所需的凭据。
- en: Migration and the need for migration
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迁移和迁移的需求
- en: Migration allows you to update, change, and delete models by creating migration
    files that represent the model changes and which can be run on any development,
    staging, or production database.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移允许您通过创建代表模型更改的迁移文件来更新、更改和删除模型，并且可以在任何开发、暂存或生产数据库上运行。
- en: Schema migration with Django has had a long and complex history; for the last
    few years, the third-party application **South** was the only go-to choice. If
    you think about the importance of migration, Django 1.7 was released with an inbuilt
    support of migration.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Django的模式迁移经历了漫长而复杂的历史；在过去的几年里，第三方应用**South**是唯一的选择。如果您考虑迁移的重要性，Django 1.7发布时内置了迁移支持。
- en: 'We need to know about South versus Django migrations as well. For those who
    are familiar with South, this should feel pretty familiar and probably a little
    bit cleaner. For easy reference, the following table compares the old South workflow
    to the new Django migrations workflow:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要了解South与Django迁移的区别。对于熟悉South的人来说，这应该感觉相当熟悉，可能会更清晰一些。为了方便参考，以下表格比较了旧的South工作流程和新的Django迁移工作流程：
- en: '| Steps | South | Django migration |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | South | Django迁移 |'
- en: '| --- | --- | --- |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Initial migration | Run `syncdb` and then `./manage.py schemamigration <appname>
    --initial` | `./manage.py makemigrations <appname>` |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 初始迁移 | 运行 `syncdb` 然后 `./manage.py schemamigration <appname> --initial` |
    `./manage.py makemigrations <appname>` |'
- en: '| Apply migration | `./manage.py migrate <appname>` | `./manage.py migrate
    <appname>` |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 应用迁移 | `./manage.py migrate <appname>` | `./manage.py migrate <appname>`
    |'
- en: '| Non-first migration | `./manage.py schemamigration <appname> --auto` | `./manage.py
    makemigration <appname>` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 非首次迁移 | `./manage.py schemamigration <appname> --auto` | `./manage.py makemigration
    <appname>` |'
- en: So, from the table, we can see that Django migrations basically follow the same
    process as South, at least for the standard migration process—this just simplifies
    things a bit.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从表中我们可以看出，Django迁移基本上遵循与South相同的流程，至少对于标准迁移流程来说，这只是简化了一些事情。
- en: The new features in Django migration
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Django迁移中的新功能
- en: 'The new migration code will be in the improved version of South, but will be
    based on the same concepts, which are as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 新的迁移代码将是South的改进版本，但将基于相同的概念，如下所示：
- en: Migration per application
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个应用程序的迁移
- en: Auto detection of the changes
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动检测变化
- en: Data migration alongside schema migration
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据迁移与模式迁移同时进行
- en: 'Let''s take a look at the following term list to understand the advantages
    of Django migration:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下术语列表，以了解Django迁移的优势：
- en: '**Improved migration format**: The much improved migration format is readable,
    and can thus be optimized or examined without actual execution'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进的迁移格式**：改进的迁移格式可读性更强，因此可以在不实际执行的情况下进行优化或检查'
- en: '**Rebasing**: In this, there is no need to keep or execute the whole history
    of migration every time, as it will now be possible to create new first migrations
    as the project grows'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重置基线**：在这种情况下，不需要每次保留或执行整个迁移历史，因为现在可以随着项目的增长创建新的第一次迁移'
- en: '**Improved auto detection**: New and custom field changes will be detected
    more easily, as migration will be built in with the improved field API'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进的自动检测**：新的和自定义字段更改将更容易被检测到，因为迁移将与改进的字段API一起构建'
- en: '**Better merge detection**: The new migration format will automatically resolve
    the merging between different VCS branches, which will no longer need any work
    if we are able to merge the changes'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的合并检测**：新的迁移格式将自动解决不同版本控制系统分支之间的合并，如果我们能够合并这些更改，就不再需要任何工作'
- en: Once you set up your project and start the application, that is, your application
    has generated the necessary tables in your database, you are not supposed to make
    complex changes to your Django models, that is, you should not delete your attributes
    from a class. However, practically, that is not possible, as you might need to
    change your model classes accordingly. In such cases, we have a solution to fix
    these kind of problems. The process is called **migration**, and, in Django, these
    migrations are done with a module called South.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您设置好项目并启动应用程序，也就是说，您的应用程序已经在数据库中生成了必要的表，您不应该对Django模型进行复杂的更改，也就是说，您不应该从一个类中删除属性。然而，在实际情况下，这是不可能的，因为您可能需要相应地更改您的模型类。在这种情况下，我们有一个解决这些问题的方法。这个过程被称为**迁移**，在Django中，这些迁移是通过一个叫做South的模块来完成的。
- en: 'Until the 1.7 version of Django, which is the latest one, you have to separately
    install the south module. However, since Django''s 1.7 migration, the south module
    is a built-in module. You might have always been doing it, for example, when you
    changed (changes such as adding new attributes) your model classes using the following
    command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 直到Django的1.7版本，即最新版本，您必须单独安装south模块。然而，自Django的1.7迁移以来，south模块是一个内置模块。您可能一直在这样做，例如，当您使用以下命令更改（例如添加新属性）您的模型类时：
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With the newer version, `manage.py syncdb` has been deprecated for migration,
    but if you still like the old way, this works for now.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用更新版本，`manage.py syncdb`已经被弃用以进行迁移，但如果您仍然喜欢旧的方式，现在可以使用。
- en: Backend support
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后端支持
- en: This is very important for any Django application that is used in production
    to get migration support. Thus, choosing a database that is primarily supported
    by the migration module will always be a better decision.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于任何用于生产的Django应用程序来说都是非常重要的，以获得迁移支持。因此，选择一个主要受迁移模块支持的数据库总是一个更好的决定。
- en: 'A few of the most compatible databases are as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最兼容的数据库如下：
- en: '**PostgreSQL**: In terms of migration or schema support, PostgresSQL is the
    most compatible database out there.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PostgreSQL**：在迁移或模式支持方面，PostgresSQL是最兼容的数据库。'
- en: Note
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can initialize your new column with `null=True`, as this will be added much
    faster.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`null=True`初始化新列，因为这样可以更快地添加。
- en: '**MySQL**: MySQL is a widely used database, as Django supports it seamlessly.
    The catch here is that there is no support for transaction when schema alteration
    operations are done, that is, if an operation fails, you will have to manually
    revert the changes. Also, for every schema update, all the tables are rewritten,
    and this could take a lot of time, and getting your application up again can take
    a lot of time.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MySQL**：MySQL是一个广泛使用的数据库，因为Django无缝支持它。这里的问题是，在进行模式更改操作时，没有事务支持，也就是说，如果一个操作失败，您将不得不手动回滚更改。此外，对于每个模式更新，所有表都将被重写，这可能需要很长时间，重新启动应用程序可能需要很长时间。'
- en: '**SQLite**: This is the default database that comes with Django and is mainly
    used for development purposes. Thus, it has little schema alteration support that
    is limited to the following cases:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQLite**：这是Django默认的数据库，主要用于开发目的。因此，它对以下情况的模式更改支持有限：'
- en: Creation of a new table
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新表
- en: Data copying
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据复制
- en: Dropping an old table
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除旧表
- en: Renaming a table
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名表
- en: How to do migrations?
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行迁移？
- en: 'Migration is done mainly with the first three commands, which are as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移主要是通过以下三个命令完成的，如下所示：
- en: '`makemigrations`: This is based on the changes you made to the models that
    prepare the migration query'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`makemigrations`：这是基于您对准备迁移查询的模型所做的更改'
- en: '`migrate`: This applies the changes prepared by the `makemigrations` query
    and lists their status'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`migrate`：这将应用`makemigrations`查询准备的更改并列出它们的状态。'
- en: '`sqlmigrate`: This displays the SQL query that the `makemigrations` query prepared'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlmigrate`：这显示了`makemigrations`查询准备的SQL查询'
- en: 'Thus, the flow for Django''s schema migration can be stated as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Django的模式迁移流程可以如下所述：
- en: '[PRE6]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will prepare the migration file, which will look similar to the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将准备迁移文件，其外观类似于以下内容：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, after the file has been created, you can check the directory structure.
    You will see a file named `0003_auto.py` under the `migration` folder; you can
    apply the changes with the following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在文件创建后，您可以检查目录结构。您将在`migration`文件夹下看到一个名为`0003_auto.py`的文件；您可以使用以下命令应用更改：
- en: '[PRE8]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following are the operations that you need to perform:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您需要执行的操作：
- en: '[PRE9]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `OK` message says that the migration has been applied successfully.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`OK`消息表示迁移已成功应用。'
- en: 'To make it more understandable, the migration can be explained with the following
    diagram:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使它更容易理解，迁移可以用以下图表来解释：
- en: '![How to do migrations?](img/image00312.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![如何进行迁移？](img/image00312.jpeg)'
- en: 'There are three separate entities:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个独立的实体：
- en: Source code
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码
- en: Migration files
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移文件
- en: Database
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库
- en: A developer makes changes in the source code, mainly in the `models.py` file,
    and alters the previously defined schema. For example, when they create a new
    field as per the business requirements, or update max_length from 50 to 100.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员在源代码中进行更改，主要是在`models.py`文件中，并修改先前定义的模式。例如，当他们根据业务需求创建一个新字段，或者将max_length从50更新为100。
- en: We will complete a proper migration of our project to see how this migration
    actually works.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将完成项目的适当迁移，以查看这个迁移实际上是如何工作的。
- en: 'First, we have to create an initial migration of the application:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须创建应用程序的初始迁移：
- en: '[PRE10]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output of which is as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 其输出如下：
- en: '[PRE11]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This shows that the initial migration has been created.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明初始迁移已经创建。
- en: 'Now, let''s change our tweet modal, which is now as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们改变我们的推文模态，现在如下所示：
- en: '`text = models.CharField(max_length=160, null=False, blank=False)`'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`text = models.CharField(max_length=160, null=False, blank=False)`'
- en: 'We will change the preceding tweet modal to:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更改之前的推文模态为：
- en: '`text = models.CharField(max_length=140, null=False, blank=False)`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`text = models.CharField(max_length=140, null=False, blank=False)`'
- en: As we have changed our schema, we now have to do the migration to run the application
    properly.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经更改了我们的模式，现在我们必须进行迁移以正确运行应用程序。
- en: 'From the migration flow, we understood that, now, we have to run the `makemigrations`
    command, which is as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 从迁移流程中，我们了解到，现在我们必须运行`makemigrations`命令，如下所示：
- en: '[PRE12]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output of which is as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 其输出如下：
- en: '[PRE13]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, it has detected the change in our field.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，它已经检测到了我们字段的更改。
- en: Just for verification, we will open our SQL database and check the current schema
    of our tweet table.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证，我们将打开我们的SQL数据库并检查tweet表的当前模式。
- en: 'Login to MySQL as:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到MySQL：
- en: '[PRE14]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the MySQL console, write:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL控制台中，写入：
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will show you the schema of the tweet table, as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示tweet表的模式，如下所示：
- en: '[PRE16]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As we have not applied our migration yet, the database clearly displays the
    text as 160 in the character field:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还没有应用我们的迁移，数据库中明显显示字符字段中的文本为160：
- en: '[PRE17]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will do the exact same thing after we apply our migration:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在应用我们的迁移后将做完全相同的事情：
- en: '[PRE18]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following are the operations that we need to perform:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们需要执行的操作：
- en: '[PRE19]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Our migration has been successfully applied; let's verify the same from the
    database.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的迁移已成功应用；让我们从数据库中验证一下。
- en: 'To run the same MySQL `desc` command on the `tweet_tweet` table, use the following:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`tweet_tweet`表上运行相同的MySQL `desc`命令，请使用以下命令：
- en: '[PRE20]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Indeed! Our migration was successfully applied:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 确实！我们的迁移已成功应用：
- en: '[PRE21]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How migrations know what to migrate
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移如何知道要迁移什么
- en: Django will never run a migration more than once on the same database, which
    means that it persists this information. This information is managed by a table
    called `django_migrations`, which is created the very first time the Django application
    is started, and for every migration thereafter, a new row is inserted.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Django永远不会在同一个数据库上运行两次迁移，这意味着它会保留这些信息。这些信息由一个名为`django_migrations`的表管理，它是在第一次启动Django应用程序时创建的，之后每次迁移都会插入一行新数据。
- en: 'For example, here is what the table might look like after running our migration:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，运行我们的迁移后，表格可能会看起来像这样：
- en: '[PRE22]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding table shows that there are two migrations with tagged information,
    and that every time you migrate, it will skip these changes, as there is already
    an entry in this table corresponding to that migration file.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的表格显示了有两个带有标记信息的迁移，并且每次迁移时，它都会跳过这些更改，因为这个表中已经有了对应于该迁移文件的条目。
- en: This means that even if you change the migration file manually, it will be skipped.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着即使你手动更改迁移文件，它也会被跳过。
- en: This makes sense, as you generally don't want to run migrations twice.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这是有道理的，因为通常你不希望运行两次迁移。
- en: However, if for some reason you really want to apply the migration twice, you
    can simply delete the table entry *"THIS IS NOT A OFFICIALLY RECOMMENDED WAY"*
    and it will work fine.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果出于某种原因你真的想要应用两次迁移，你可以简单地删除表格条目中的*"THIS IS NOT A OFFICIALLY RECOMMENDED
    WAY"*，它将正常工作。
- en: Conversely, if you want to undo all the migrations for a particular application,
    you can migrate to a special migration called zero.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果你想要撤消特定应用的所有迁移，你可以迁移到一个名为zero的特殊迁移。
- en: 'For example, if you type, all the migrations for the tweet application will
    be reversed:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你键入，tweet应用的所有迁移将被撤销：
- en: '[PRE23]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In addition to using zero, you can also use any arbitrary migration, and if
    that migration is in the past, then the database will be rolled back to the state
    of that migration, or will be rolled forward if the migration hasn't yet been
    run.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用zero，你还可以使用任意的迁移，如果那个迁移在过去，那么数据库将回滚到那个迁移的状态，或者如果还没有运行该迁移，那么数据库将向前滚动。
- en: The migration file
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迁移文件
- en: So, what does the migration file contain and what exactly happens when we run
    the following command?
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，迁移文件包含什么，当我们运行以下命令时到底发生了什么？
- en: '[PRE24]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: After you run this, you can see a directory called `migrations`, where all the
    migration files are stored. Let's have a look at them. As they are Python files,
    they might be easy to understand.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 运行完这个命令后，你会看到一个名为`migrations`的目录，里面存储着所有的迁移文件。让我们来看看它们。由于它们是Python文件，可能很容易理解。
- en: 'Open the `tweet/migrations/0001_initial.py` file, as this is the file where
    the initial migration code is created. It should look similar to the following:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`tweet/migrations/0001_initial.py`文件，因为这是初始迁移代码创建的文件。它应该看起来类似于以下内容：
- en: '[PRE25]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For migration to actually work, there must be a class called `Migration()`
    that inherits from the `django.db.migrations.Migration` module. This is the main
    class that is used for a migration framework, and this migration class contains
    two main lists, which are as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要使迁移实际工作，必须有一个名为`Migration()`的类，它继承自`django.db.migrations.Migration`模块。这是用于迁移框架的主要类，这个迁移类包含两个主要列表，如下所示：
- en: '**Dependencies**: This is the list of other migrations that must run before
    the migration starts. In cases where there is a dependency, such as in the case
    of a foreign key relationship, the foreign key model must exist before its key
    is added here. In the preceding case, we have such a dependency on the `user_profile`
    parameter.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖项**：这是必须在迁移开始之前运行的其他迁移的列表。在存在依赖关系的情况下，比如外键关系的情况下，外键模型必须在其键被添加到这里之前存在。在前面的情况下，我们对`user_profile`参数有这样的依赖。'
- en: '**Operations**: This list contains the list of migrations to be applied, and
    the whole migration operation can be of the following categories:'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作**：这个列表包含要应用的迁移列表，整个迁移操作可以属于以下类别：'
- en: '`CreateModel`: From the name itself, it''s very clear that this will create
    a new model. From the preceding model file, you can see lines such as:'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CreateModel`：从名称本身，很明显这将创建一个新模型。从前面的模型文件中，你可以看到这样的行：'
- en: '[PRE26]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: These migration lines create the new model with the defined attributes.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这些迁移行创建了具有定义属性的新模型。
- en: '`DeleteModel`: This will contain the statement to delete the model from the
    database. These are the opposite to the `CreateModel` method.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DeleteModel`：这将包含从数据库中删除模型的语句。这些与`CreateModel`方法相反。'
- en: '`RenameModel`: This renames the model with the given new name from the old
    name.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RenameModel`：这将使用给定的新名称从旧名称重命名模型。'
- en: '`AlterModelTable`: This will change the name of the associated table with the
    model.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AlterModelTable`：这将更改与模型关联的表的名称。'
- en: '`AlterUniqueTogether`: This is the unique constraints of the table that is
    changed.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AlterUniqueTogether`：这是更改的表的唯一约束。'
- en: '`AlteIndexTogether`: This changes the custom index set of the model.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AlteIndexTogether`：这将更改模型的自定义索引集。'
- en: '`AddField`: This simply adds a new field to the existing model.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AddField`：这只是向现有模型添加新字段。'
- en: '`RemoveField`: This drops the field from the model.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RemoveField`：这将从模型中删除字段。'
- en: '`RenameField`: This renames the field name from the old name to the new name
    for a model.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RenameField`：这将为模型将字段名称从旧名称重命名为新名称。'
- en: The migration of a schema is not the only thing that needs to be migrated while
    updating the application; there is another important thing called **data migration**.
    This is the data that is already stored in the database by previous operations
    and, thus, also needs to be migrated.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新应用程序时，模式的迁移不是唯一需要迁移的事情；还有另一件重要的事情叫做**数据迁移**。这是由先前操作已经存储在数据库中的数据，因此也需要迁移。
- en: 'Data migration can be used in many situations. Among them, the most logical
    situations are:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 数据迁移可以在许多情况下使用。其中，最合乎逻辑的情况是：
- en: Loading an external data to the application
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将外部数据加载到应用程序中
- en: When there is a change in the model schema and the dataset needs to be updated
    as well
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当模型架构发生变化并且数据集也需要更新时
- en: 'Let''s play with our project by loading a tweet from the `username.txt` file.
    Create an empty migration for our project using the following command:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过从`username.txt`文件中加载推文来玩耍我们的项目。使用以下命令为我们的项目创建一个空迁移：
- en: '[PRE27]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This will generate a migration file named `mytweets/migrations/003_auto<date_time_stamp>.py`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个名为`mytweets/migrations/003_auto<date_time_stamp>.py`的迁移文件。
- en: 'Open this file; it will look something like the following:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 打开这个文件；它看起来像下面这样：
- en: '[PRE28]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This is nothing but the basic structure of the Django migration tool, and to
    do data migration, we have to add the `RunPython()` function in the operations,
    as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是Django迁移工具的基本结构，要进行数据迁移，我们必须在操作中添加`RunPython()`函数，如下所示：
- en: '[PRE29]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'That is all. Now, run the migrate command:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了。现在，运行迁移命令：
- en: '[PRE30]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'These are the operations that you need to perform as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是您需要执行的操作：
- en: '[PRE31]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'After executing the preceding command, the command migrated all the applications
    and finally applied our migration in which we created the new tweet from the loaded
    data:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，该命令迁移了所有应用程序，并最终应用了我们创建新推文的迁移，从加载的数据中创建了新推文：
- en: '[PRE32]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: That's awesome, right?
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒，对吧？
- en: This kind of a solution is much needed when you have external data in the form
    of a JSON or XML file.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当您有以JSON或XML文件形式的外部数据时，这种解决方案非常必要。
- en: 'The ideal solution will be to use the command-line argument to get the file
    path and to load the data as:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 理想的解决方案是使用命令行参数来获取文件路径并加载数据，如下所示：
- en: '[PRE33]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Don't forget to add your migration folders to Git, as they are as important
    as your source code.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将迁移文件夹添加到Git中，因为它们与源代码一样重要。
- en: Django with NoSQL
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django与NoSQL
- en: Django does not officially support the NoSQL database, but with such a great
    community of developers, Django does have a fork that has **MongoDB** as a backend
    database.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Django并不正式支持NoSQL数据库，但是在有这么多开发者的伟大社区的支持下，Django有一个支持**MongoDB**作为后端数据库的分支。
- en: For the purpose of illustration, we will use the Django-Norel project to configure
    Django with the MongoDB database.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明问题，我们将使用Django-Norel项目来配置Django与MongoDB数据库。
- en: You can find the detailed information regarding this at [http://django-nonrel.org/](http://django-nonrel.org/).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://django-nonrel.org/](http://django-nonrel.org/)找到关于此的详细信息。
- en: MongoDB can be installed by following the steps mentioned at [http://docs.mongodb.org/manual/installation/](http://docs.mongodb.org/manual/installation/)
    as per the configuration you have.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按照[http://docs.mongodb.org/manual/installation/](http://docs.mongodb.org/manual/installation/)中提到的步骤安装MongoDB，根据您的配置。
- en: Here, we will set up MongoDB for the Debian version of Linux (specifically,
    Ubuntu).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将为Linux的Debian版本（具体来说是Ubuntu）设置MongoDB。
- en: 'Import the MongoDB public GPG Key:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 导入MongoDB公共GPG密钥：
- en: '[PRE34]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a list file for MongoDB:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 为MongoDB创建一个列表文件：
- en: '[PRE35]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Reload the local package database:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载本地软件包数据库：
- en: '[PRE36]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Install the MongoDB packages:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 安装MongoDB软件包：
- en: '[PRE37]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Start MongoDB:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 启动MongoDB：
- en: '[PRE38]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The single-page application project – URL shortener
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单页面应用项目 - URL缩短器
- en: 'There are two ways in which MongoDB can be used with Django, which are as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB可以与Django一起使用的两种方式如下：
- en: '**MongoEngine**: This is a **Document-object Mapper** (think of ORM, but for
    document databases) that is used to work with MongoDB from Python'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MongoEngine**：这是一个**文档对象映射器**（类似于ORM，但用于文档数据库），用于从Python与MongoDB一起使用。'
- en: '**Django non-rel**: This is a project to support Django on nonrelational (NoSQL)
    databases; currently it supports MongoDB'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Django non-rel**：这是一个支持Django在非关系型（NoSQL）数据库上的项目；目前支持MongoDB。'
- en: MongoEngine
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MongoEngine
- en: 'Installation of MongoEngine is required before we move further and show you
    how to configure MongoEngine with Django. Install MongoEngine by typing the following
    command:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续展示如何配置MongoEngine与Django之前，需要安装MongoEngine。通过输入以下命令来安装MongoEngine：
- en: '[PRE39]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In order to protect the previous project we created, and to better understand,
    we will create a separate new project for MongoDB configuration, and we will use
    our existing project to configure MySQL:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护我们之前创建的项目，并更好地理解，我们将创建一个单独的新项目来配置MongoDB，并且我们将使用现有项目来配置MySQL：
- en: '[PRE40]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This will create the basic structure of the project, as we very well know.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建项目的基本结构，我们非常了解。
- en: Connecting MongoDB with Django
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将MongoDB连接到Django
- en: We will have to modify the `settings.py` file, and if we are only using MognoDB
    for the project, which is true in this case, then we can ignore the standard database
    setting. All we have to do is to call the `connect()` method on the `settings.py`
    file.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不得不修改`settings.py`文件，如果我们只在项目中使用MognoDB，这在这种情况下是正确的，那么我们可以忽略标准数据库设置。我们所要做的就是在`settings.py`文件上调用`connect()`方法。
- en: 'We will place a dummy backend for MongoDB. Just replace the following code
    in the `settings.py` file, which is as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为MongoDB放置一个虚拟后端。只需在`settings.py`文件中替换以下代码，如下所示：
- en: '[PRE41]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Replace the preceding code with the following:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换上述代码：
- en: '[PRE42]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Authentication in Django
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Django中的身份验证
- en: The advantage of MongoEngine is that it includes a Django authentication backend.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: MongoEngine的优势在于它包括了Django身份验证后端。
- en: A user model becomes a MongoDB document and implements most of the methods and
    attributes that a normal Django user model does, which makes MongoEngine compatible
    with Django. We can also use the authentication infrastructure and decorators,
    such as the `login_required()` and `authentication()` methods. The `auth` module
    also contains the `get_user()` method, which takes a user ID as an argument and
    returns the user object.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 用户模型成为MongoDB文档，并实现了大部分普通Django用户模型的方法和属性，这使得MongoEngine与Django兼容。我们还可以使用身份验证基础设施和装饰器，例如`login_required()`和`authentication()`方法。`auth`模块还包含`get_user()`方法，它接受用户ID作为参数并返回用户对象。
- en: 'To enable this backend for MognoEngine, add the following in the `settings.py`
    file:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 要为MognoEngine启用此后端，请在`settings.py`文件中添加以下内容：
- en: '[PRE43]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Storing sessions
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存储会话
- en: In Django, you can use different databases to store a session for an application.
    To enable the MongoEngine session that is stored in MongoDB, there must be an
    entry of the `django.contrib.sessions.middleware.SessionMiddleware` parameter
    in `MIDDLEWARE_CLASSES` in the `settings.py` file. There must also be an entry
    of `django.contrib.sessions` in `INSTALLED_APPS`, which are there as we started
    the project from Django's basic structure.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django中，您可以使用不同的数据库来存储应用程序的会话。要启用存储在MongoDB中的MongoEngine会话，`settings.py`文件中的`MIDDLEWARE_CLASSES`必须有`django.contrib.sessions.middleware.SessionMiddleware`参数的条目。还必须在`INSTALLED_APPS`中有`django.contrib.sessions`的条目，因为我们是从Django的基本结构开始的。
- en: 'Now, all you need to do is add the following line in the `settings.py` file:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您只需要在`settings.py`文件中添加以下行：
- en: '[PRE44]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We are now all set up to get started with a small demo project, where we will
    implement the URL short project in MongoDB.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好开始一个小型演示项目，在其中我们将在MongoDB中实现URL缩短项目。
- en: Let's create a URL modal first, which is where we will store all the long URLs
    and their corresponding short URLs.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个URL模型，我们将在其中存储所有长URL及其对应的短URL。
- en: 'Go to the following `url/models.py` file:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 转到以下`url/models.py`文件：
- en: '[PRE45]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: You are already familiar with the first two lines of the preceding code, which
    imports the modules.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经熟悉了上述代码的前两行，它们导入了模块。
- en: The third line, that is, `connect('urlShortener')`, connects Django with the
    MongoDB database named `urlShortener`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 第三行，即`connect('urlShortener')`，将Django连接到名为`urlShortener`的MongoDB数据库。
- en: 'MongoDB gives many connection mechanisms that you can choose from, which are
    as follows:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB提供了许多连接机制供您选择，它们如下：
- en: '[PRE46]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The method that we are using takes MongoDB from its default port, which is
    27017; if you are running MongoDB on an other port, use the `connect()` method
    to connect it:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用的方法将MongoDB从其默认端口（27017）中获取；如果您在其他端口上运行MongoDB，请使用`connect()`方法进行连接：
- en: '[PRE47]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'If you configured a password to MongoDB, you can pass the parameters as:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您为MongoDB配置了密码，可以传递参数如下：
- en: '[PRE48]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Like Django''s default model fields, MongoDB also gives you different fields,
    which are:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 像Django的默认模型字段一样，MongoDB也为您提供了不同的字段，它们是：
- en: '`BinaryField`: This field is used to store raw binary data.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BinaryField`：此字段用于存储原始二进制数据。'
- en: '`BooleanField`: This is a Boolean field type.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BooleanField`：这是一个布尔字段类型。'
- en: '`DateTimeField`: This is a datetime field.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTimeField`：这是一个日期时间字段。'
- en: '`ComplexDateTimeField`: This handles microseconds exactly the way they are
    instead of rounding them up like `DateTimeField` does.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ComplexDateTimeField`：这样处理微秒，而不是像`DateTimeField`那样将它们四舍五入。'
- en: '`DecimalField`: This is a fixed point decimal number field.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DecimalField`：这是一个固定小数点十进制数字段。'
- en: '`DictField`: This is a dictionary field that wraps a standard Python dictionary.
    This is similar to an embedded document, but the structure is not defined.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DictField`：这是一个包装了标准Python字典的字典字段。这类似于嵌入式文档，但结构未定义。'
- en: '`DynamicField`: This is a truly dynamic field type capable of handling different
    and varying types of data.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DynamicField`：这是一种真正动态的字段类型，能够处理不同和多样化的数据类型。'
- en: '`EmailField`: This is a field that validates input as an e-mail address.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EmailField`：这是一个验证输入为电子邮件地址的字段。'
- en: '`FileField`: This is a GridFS storage field.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileField`：这是一个GridFS存储字段。'
- en: '`FloatField`: This is a floating point number field.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FloatField`：这是一个浮点数字段。'
- en: '`GeoPointField`: This is a list that stores the longitude and latitude coordinates.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GeoPointField`：这是一个存储经度和纬度坐标的列表。'
- en: '`ImageField`: This is the image file storage field.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ImageField`：这是图像文件存储字段。'
- en: '`IntField`: This is a 32-bit integer field.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IntField`：这是一个32位整数字段。'
- en: '`ListField`: This is a list field that wraps a standard field, allowing multiple
    instances of the field to be used as a list in the database.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListField`：这是一个列表字段，它包装了一个标准字段，允许在数据库中使用字段的多个实例作为列表。'
- en: '`MapField`: This is a field that maps a name to a specified field type. This
    is similar to `DictField`, except that the ''value'' of each item must match the
    specified field type.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MapField`：这是一个将名称映射到指定字段类型的字段。这类似于`DictField`，只是每个项目的“值”必须与指定的字段类型匹配。'
- en: '`ObjectIdField`: This is a field wrapper around MongoDB''s object IDs.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ObjectIdField`：这是MongoDB对象ID的字段包装器。'
- en: '`StringField`: This is a unicode string field.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StringField`：这是一个Unicode字符串字段。'
- en: '`URLField`: This is a field that validates input as a URL and more.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`URLField`：这是一个验证输入为URL等的字段。'
- en: Note
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: By default, fields are not required. To make a field mandatory, set the required
    keyword argument of a field to `True`. Fields also may have validation constraints
    available (such as, max_length in the preceding example). Fields may also take
    default values, which will be used if a value is not provided. Default values
    may optionally be a callable, which will be called to retrieve the value (as in
    the preceding example).
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，字段不是必需的。要使字段成为必需字段，请将字段的required关键字参数设置为`True`。字段还可以具有可用的验证约束（例如，前面示例中的max_length）。字段还可以采用默认值，如果未提供值，则将使用默认值。默认值可以选择是可调用的，将调用以检索值（如前面的示例）。
- en: The full list of different fields can be seen at [http://docs.mongoengine.org/en/latest/apireference.html](http://docs.mongoengine.org/en/latest/apireference.html).
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[http://docs.mongoengine.org/en/latest/apireference.html](http://docs.mongoengine.org/en/latest/apireference.html)上看到完整的不同字段列表。
- en: 'Now, we will create our `Url()` class, which will be similar to other models
    that we created so far, such as tweets and so on:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建我们的`Url()`类，它将类似于我们迄今为止创建的其他模型，比如推文等等：
- en: '[PRE49]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Let''s take a look at the following term list:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下以下术语列表：
- en: '`full_url`: This is a URL field that will store the full URL, and the same
    URL where the request will be redirected when its short URL is trigged'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full_url`：这是一个URL字段，将存储完整的URL，以及触发其短URL时请求将重定向的相同URL'
- en: '`short_url`: This is the short URL for the corresponding long URL'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`short_url`：这是相应长URL的短URL'
- en: '`date`: This will store the date when the `Url` object was created'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date`：这将存储`Url`对象创建的日期。'
- en: 'Now, we will move to view and create two classes:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将转到视图并创建两个类：
- en: '**Index**: Here, a user can generate short URLs. This will also have a `post()`
    method that saves every long URL.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引**：在这里，用户可以生成短链接。这也将有一个`post()`方法，保存每个长URL。'
- en: '**Link**: This is the short URL redirection controller. When a short URL is
    queried, this controller redirects the request to a long URL, such as shown in
    the following code snippet:'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链接**：这是短URL重定向控制器。当查询短URL时，此控制器将请求重定向到长URL，如下面的代码片段所示：'
- en: '[PRE50]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Let''s take a look at the following term list:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下以下术语列表：
- en: 'The `get()` method is simple: it forwards the request to the `base.html` file
    (which we will create soon)'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get()`方法很简单：它将请求转发到`base.html`文件（我们将很快创建）'
- en: 'The `post()` method takes the long URL from the request''s POST variable and
    sets the object count, just as the short URL saves the `Url` object to the database:'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post()`方法从请求的POST变量中获取长URL并设置对象计数，就像短URL保存`Url`对象到数据库一样：'
- en: '[PRE51]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This is used to pass the current path to the view so that the short URL can
    be made clickable with the anchor tag.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于将当前路径传递给视图，以便可以使用锚标记使短URL可点击。
- en: 'This is how this URL object is saved in DB:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是这个URL对象在数据库中保存的方式：
- en: '[PRE52]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now, we will move on to the `Link()` class, which will take the short URL request
    and redirect to the long URL:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将继续创建`Link()`类，它将接受短URL请求并重定向到长URL：
- en: '[PRE53]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The `short_url` parameter is the `short_url` code from the requested URL:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`short_url`参数是来自请求URL的`short_url`代码：'
- en: '[PRE54]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The preceding line queries the database to check whether the matching long
    URL exists for the given short URL:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 前一行查询数据库，检查给定短URL的匹配长URL是否存在：
- en: '[PRE55]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This redirects the request to find the long URL from the database.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这将重定向请求以从数据库中查找长URL。
- en: For the view, all we need to create is the `base.html` file.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 对于视图，我们需要创建的只是`base.html`文件。
- en: As the aim of this project is not to teach you user interface, we will not include
    any library and will make the page with as little HTML as possible.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个项目的目的不是教你用户界面，我们不会包含任何库，并且会尽可能少地使用HTML来制作页面。
- en: 'The code for the `base.html` file is as follows:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`base.html`文件的代码如下：'
- en: '[PRE56]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: This shows a text area with the form, and after submitting the form, it shows
    the short link beneath the long URL.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了一个带有表单的文本区域，并在提交表单后，在长URL下方显示了短链接。
- en: 'This is how the minimalistic URL shortner home page looks:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是极简主义URL缩短器主页的样子：
- en: '![Storing sessions](img/image00313.jpeg)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![存储会话](img/image00313.jpeg)'
- en: 'To make this work, all we need to do now is to create the required URL mapping,
    which is as follows:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个工作，我们现在需要做的就是创建所需的URL映射，如下所示：
- en: '[PRE57]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Summary
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The purpose of this chapter is to prepare you to create your project with different
    databases, and also to give you a basic idea about database migration and how
    these migrations work. This will not only help you to debug your migration, but
    also you can create your own data migration scripts to load the data from a JSON
    file, or any other file format, directly to the Django application to initialize
    it.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是为您准备使用不同数据库创建项目，并为您提供有关数据库迁移以及这些迁移如何工作的基本概念。这不仅将帮助您调试迁移，还可以创建自己的数据迁移脚本，将数据从JSON文件或任何其他文件格式直接加载到Django应用程序中进行初始化。
- en: The chapter also gave you a basic idea of how to set up Django with MongoDB,
    and we also saw a small project demonstration followed by the real-world application
    of scaling the Django system with MongoDB here.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还为您提供了如何使用Django和MongoDB设置的基本概念，并且我们还看到了一个小项目演示，随后是在这里使用MongoDB扩展Django系统的实际应用。
