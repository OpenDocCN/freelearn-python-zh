- en: '*Chapter 9*: Understanding Input and Output to Design a Solution Algorithm'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：理解输入和输出以设计解决方案算法'
- en: In this chapter, we will take a deeper look at problems in order to identify
    the input and output necessary to design an algorithm for the problems. We will
    use concepts we learned in [*Chapter 8*](B15413_08_Final_SK_ePub.xhtml#_idTextAnchor114),
    *Introduction to Python*, where we discussed object-oriented programming, dictionaries,
    lists, and more. As you practice getting input and using it in your algorithm,
    you'll be able to see that the output of an algorithm is dependent on the input
    information.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入研究问题，以确定设计问题算法所需的输入和输出。我们将使用我们在[*第8章*](B15413_08_Final_SK_ePub.xhtml#_idTextAnchor114)中学到的概念，*Python简介*，在那里我们讨论了面向对象的编程、字典、列表等。当您练习获取输入并在算法中使用它时，您将能够看到算法的输出取决于输入信息。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Defining input and output
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义输入和输出
- en: Understanding input and output in computational thinking
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解计算思维中的输入和输出
- en: In this chapter, we will focus on understanding different types of input and
    how output is used in programming using the **Python** programming language. To
    be able to get a better understanding of these topics, we have to first look at
    their definitions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注理解不同类型的输入以及如何使用**Python**编程语言中的输出。为了更好地理解这些主题，我们首先要看一下它们的定义。
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you will need to have the latest Python version installed.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要安装最新的Python版本。
- en: 'You can find the source code used in this chapter here: [https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter09](https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter09)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此章节中找到使用的源代码：[https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter09](https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter09)
- en: Defining input and output
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义输入和输出
- en: We will begin this section by studying input and its definition, which, in turn,
    is used to provide a result, or output.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从研究输入及其定义开始，这反过来又用于提供结果或输出。
- en: '**Input** is what is put into a system or machine. In computers, we have input
    devices that the computer then interprets to provide a result, or **output**.
    As we look at the types of inputs and how we use input in algorithms, you''ll
    see the output we get from those algorithms. Let''s take a look at some examples
    of input devices:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**是放入系统或机器中的东西。在计算机中，我们有输入设备，计算机会解释这些设备以提供结果或**输出**。当我们看不同类型的输入以及如何在算法中使用输入时，您将看到我们从这些算法中获得的输出。让我们看一些输入设备的例子：'
- en: '**Keyboard**: When we use a keyboard, the computer interprets the keys and
    uses that interpretation in various programs, such as document writing and search
    bars.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**键盘**：当我们使用键盘时，计算机会解释按键，并在各种程序中使用该解释，比如文档编写和搜索栏。'
- en: '**Mouse**: The mouse is used to navigate our physical screens, helping us click
    through content and scroll through pages.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鼠标**：鼠标用于在我们的物理屏幕上导航，帮助我们点击内容和滚动页面。'
- en: '**Joystick**: A joystick can be used to play computer games.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操纵杆**：操纵杆可用于玩电脑游戏。'
- en: '**Microphone**: In more modern machines, microphones are not only used to communicate
    through phone and video apps, but also to take verbal commands for **Artificial
    Intelligence** (**AI**) assistants such as **Cortana** and **Siri**, as well as
    voice-to-text commands.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**麦克风**：在更现代的机器中，麦克风不仅用于通过电话和视频应用进行通信，还用于接受**人工智能**（**AI**）助手如**Cortana**和**Siri**的口头命令，以及语音转文字命令。'
- en: All of the aforementioned inputs are programmed into our computers in order
    to be useable. In Python, we write algorithms that use inputs such as these. **User**
    input is when a program asks the user for information that will then be used to
    produce the output. Keep in mind that input and output can happen at any time
    within the algorithm. We can also provide output feedback that requires additional
    input from the user, and so on. Let's take a look at how we can get user input
    from Python.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述输入都被编程到我们的计算机中以便使用。在Python中，我们编写使用这些输入的算法。**用户**输入是指程序询问用户将用于生成输出的信息。请记住，输入和输出可以在算法中的任何时间发生。我们还可以提供需要用户额外输入的输出反馈，依此类推。让我们看看如何从Python获取用户输入。
- en: Python has one main prompt for users, the `input()` function. This function
    is used to take user input, and then it automatically converts the input into
    the user expected output.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Python有一个主要的用户提示，即`input()`函数。此函数用于接受用户输入，然后自动将输入转换为用户期望的输出。
- en: 'We have used these main prompts before in multiple programs, such as the store
    example in [*Chapter 5*](B15413_05_Final_SK_ePub.xhtml#_idTextAnchor082), *Exploring
    Problem Analysis*. Let''s take a look at what some input commands look like in
    algorithms. Take a look at the following code snippet:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前在多个程序中使用过这些主要提示，比如[*第5章*](B15413_05_Final_SK_ePub.xhtml#_idTextAnchor082)中的商店示例，*探索问题分析*。让我们看看算法中一些输入命令的样子。看看以下代码片段：
- en: ch9_input1.py
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ch9_input1.py
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The snippet asks the user for their name, and then prints a statement using
    the information from the input. The result of this code is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 片段要求用户输入他们的名字，然后使用输入的信息打印一个声明。这段代码的结果如下：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we could just ask for input without using any prompting questions, but
    the user will not know what is being asked or how it will be used. Take a look
    at the snippet without the prompts, shown as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以只要求输入而不使用任何提示问题，但用户将不知道正在被问及什么或者它将如何被使用。看看没有提示的片段，如下所示：
- en: ch9_input2.py
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: ch9_input2.py
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When we run the preceding program, nothing prints out in our shell. However,
    I knew there was something I needed to type, so take a look at what happened when
    I just typed a letter:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行上述程序时，在我们的shell中没有打印任何内容。然而，我知道我需要输入一些东西，所以看看当我只输入一个字母时发生了什么：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the user wouldn't have known what to do because the window doesn't
    ask anything; it just gives a blank space and the user has to assume that's where
    you type the input. But that can cause a lot of confusion, since there's nothing
    telling the user whether it needs input or what kind of thing they have to enter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，用户不会知道该怎么做，因为窗口没有询问任何事情；它只是给了一个空白的空间，用户必须假设那是输入的地方。但这可能会导致很多混乱，因为没有告诉用户是否需要输入，或者他们需要输入什么样的东西。
- en: We can alleviate some of that confusion by using `print` statements, for example,
    by providing the user with information about what input we'll be asking for. We
    can also include a statement as part of the `input()` function. For example, we
    could use a line of code such as `name = input('What is your name?')`, which would
    show the statement in quotations first so that the user knows what we are asking.
    Either way, providing a statement so that the user knows what is needed is really
    important when we design our algorithms.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 `print` 语句来减轻一些混乱，例如，通过向用户提供关于我们将要询问的输入的信息。我们还可以在 `input()` 函数中包含一条语句。例如，我们可以使用这样的一行代码
    `name = input('你叫什么名字？')`，这样首先会显示带引号的语句，这样用户就知道我们在问什么。无论哪种方式，提供一条语句让用户知道需要什么是我们设计算法时非常重要的。
- en: 'As you saw in the preceding example, the `input()` function took a string,
    and then used the string in a `print()` statement. Let''s look at what a list
    would look like using the `input` command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面的例子中看到的，`input()` 函数接受一个字符串，然后在 `print()` 语句中使用该字符串。让我们看看使用 `input` 命令时列表会是什么样子：
- en: ch9_input3.py
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ch9_input3.py
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding snippet, we first create the list, which is not shown to the
    user. The user is then asked how many names will be added to the list. After that,
    we iterate through the list so that the user can input each name separately. Finally,
    the names are appended and the list printed. Take a look at the output for this
    algorithm:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的片段中，我们首先创建了列表，这不会显示给用户。然后询问用户将有多少个名字添加到列表中。之后，我们遍历列表，以便用户可以分别输入每个名字。最后，名字被添加到列表中并打印出来。看一下这个算法的输出：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Notice that the names don''t have a prompt, so the algorithm assumes the user
    will know what to do after inputting the value `4`. That can be alleviated with
    a simple addition within the iteration. Take a look at the following code snippet:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，名字没有提示，所以算法假设用户在输入值 `4` 后会知道该怎么做。这可以通过在迭代中简单添加来减轻。看一下下面的代码片段：
- en: ch9_input4.py
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: ch9_input4.py
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see, each name will now have a prompt that asks to type the next
    name, which looks like the following output when the algorithm is run:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，每个名字现在都有一个提示，要求输入下一个名字，当算法运行时，输出看起来像下面的样子：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding output shows the completed list and the prompts for each of the
    names that were added to that list. Simple additions for those prompts within
    the algorithm can alleviate confusion on the part of users when entering the inputs.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的输出显示了完成的列表以及添加到该列表中的每个名字的提示。在算法中对这些提示进行简单的添加可以减轻用户在输入时的混乱。
- en: As you can see from the previous snippets in this section, the inputs were read
    as integers, strings, and lists. Python automatically converted the information
    so it could be used by the algorithm.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从本节中前面的片段中看到的，输入被读取为整数、字符串和列表。Python自动转换了信息，以便算法可以使用它。
- en: 'In Python, there''s also a way to define multiple variables with separate inputs
    from one line of code. Take a look at the following code snippet:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，还有一种方法可以使用一行代码从多个输入中定义多个变量。看一下下面的代码片段：
- en: ch9_input5.py
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ch9_input5.py
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see in the preceding code, the quotations (`" "`) in the middle
    of the `print()` command are used to separate the inputs. Take a look at the output
    for this algorithm:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面的代码中所看到的，`print()` 命令中的引号(`" "`) 用于分隔输入。看一下这个算法的输出：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, the program asks for the first and last names, which were called
    in the first line of the algorithm. This is by no means the only way that we can
    use for getting inputs from users, nor the only input we'll use.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，程序要求输入名字，这些名字在算法的第一行中被调用。这绝不是我们从用户那里获取输入的唯一方式，也不是我们将使用的唯一输入。
- en: In this section, we looked at some of the ways in which we can define input
    within an algorithm. We also learned how we can get input from a user to use later
    in the algorithm. Now let's move to the next section, where we'll look at input
    and output within some computational thinking problems.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们看了一些在算法中定义输入的方法。我们还学会了如何从用户那里获取输入以便稍后在算法中使用。现在让我们转到下一节，我们将在其中看一些计算思维问题中的输入和输出。
- en: Understanding input and output in computational thinking
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解计算思维中的输入和输出
- en: In order to better understand input and output, we will take a look at computational
    thinking problems in this section. As we go through the design process of the
    algorithms, we will focus on identifying the inputs needed and what output we
    require from our algorithms. Let's take a look at our first problem.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解输入和输出，我们将在本节中看一些计算思维问题。当我们设计算法的过程中，我们将专注于确定算法所需的输入以及我们从算法中需要的输出。让我们来看看我们的第一个问题。
- en: Problem 1 – Building a Caesar cipher
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1 - 构建凯撒密码
- en: 'A **Caesar cipher** is a system of cryptography used to code messages. Cryptography
    is used to secure information so that only the intended users can read the messages.
    The Caesar cipher uses a shift in the letters to encode the messages. For example,
    the letter *a* shifted 3 places would be *d*. To build an algorithm that does
    this for us, we''ll need a few things on hand:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯撒密码**是一种用于编码消息的密码系统。密码学用于保护信息，以便只有预期的用户可以阅读消息。凯撒密码使用字母的移位来编码消息。例如，字母 *a*
    移动 3 个位置将变成 *d*。为了构建一个可以为我们做到这一点的算法，我们需要一些东西：'
- en: A message that will be coded
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将要编码的消息
- en: How much we'll shift each letter
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将每个字母移动多少
- en: A printed coded message
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个打印的编码消息
- en: 'Let''s think about what the aforementioned points mean. The message will need
    to be an input from the user. The shift will also be an input, as we don''t want
    the program to always use the same code. Otherwise, it will be easy to figure
    out the original message once you know the shift. The printed coded message is
    our output. Here are some of the steps to help create the algorithm:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们思考一下前面提到的要点意味着什么。消息将需要用户输入。移位也将是一个输入，因为我们不希望程序总是使用相同的代码。否则，一旦知道了移位，原始消息就很容易被破解。打印的编码消息是我们的输出。以下是一些步骤，以帮助创建算法：
- en: We first need to input the message.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要输入消息。
- en: Then we need to define the input shift.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们需要定义输入移位。
- en: After that, we need to iterate through each letter.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要遍历每个字母。
- en: After iteration, we adjust each letter with the shift we defined.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 迭代后，我们根据定义的移位调整每个字母。
- en: Finally, we print out the new, coded message.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们打印出新的编码消息。
- en: 'We will exemplify the preceding steps with the help of the following cipher
    algorithm snippet:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下密码算法片段来举例说明前面的步骤：
- en: ch9_problem1.py
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: ch9_problem1.py
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that in the iteration, we're doing some math to figure out the value
    for each letter in the alphabet. We use some conditional statements to define
    what each letter's value is after using the user-defined shift value.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在迭代中，我们正在进行一些数学运算，以找出字母表中每个字母的值。我们使用一些条件语句来定义在使用用户定义的移位值后，每个字母的值是什么。
- en: 'Take a look at the output that results when we run this algorithm:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当我们运行此算法时产生的输出：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As you can see from the preceding output, notice the first word in the *message*
    and the *coded message* – `Code`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可以从前面的输出中看到的，注意*消息*和*编码消息*中的第一个单词 - `Code`：
- en: The `C`, moved two letters, is now an `E`.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C`，向后移动两个字母，现在是`E`。'
- en: The `o` is now `q`, and so on.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`o`现在是`q`，依此类推。'
- en: For each letter in the message, the letters have shifted two places. The output
    is our `print()` statement plus the coded message, which is given by the line
    `print(msgCipher)`. Our output includes both statements for clarity. *Is the first
    message necessary?* No. However, in some algorithms, it's best to have some lines
    that allow the user to know what is happening with the algorithm.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于消息中的每个字母，字母都向后移动了两个位置。输出是我们的`print()`语句加上编码消息，由行`print(msgCipher)`给出。我们的输出包括两个语句以便清晰。*第一个消息是必要的吗？*
    不。但是，在某些算法中，最好有一些行，让用户知道算法的运行情况。
- en: Let's take a look at another problem.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一个问题。
- en: Problem 2 – Finding maximums
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题2 - 查找最大值
- en: You are asked to create a program that finds the maximum value from a list of
    numbers. The list of numbers is provided by the user. So, create an algorithm
    for this problem.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您被要求创建一个程序，该程序从数字列表中找到最大值。数字列表由用户提供。因此，为此问题创建一个算法。
- en: 'First, we need to identify the inputs and output for this particular problem.
    They are listed as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要确定此特定问题的输入和输出。它们列如下：
- en: Number of items in the list (input)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列表中的项目数（输入）
- en: Numbers in the list (input)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列表中的数字（输入）
- en: Maximum value in the list (output)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列表中的最大值（输出）
- en: 'Recall from earlier in this chapter, in the *Defining input and output* section,
    that we can define an empty list, and then ask the user to let the program know
    how many items will be entered into the list. The following program exemplifies
    the same:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下本章前面，在*定义输入和输出*部分，我们可以定义一个空列表，然后要求用户让程序知道将有多少项目输入列表。以下程序举例说明了相同的情况：
- en: ch9_problem2.py
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ch9_problem2.py
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice from the preceding code that we used the `max()` function to find the
    maximum value within the list. In addition, we had to add `int()` types in order
    to have the algorithm correctly identify the values as numbers. The code goes
    through each number from `0` to the number of data points we received from the
    user input, which we defined as the `quant` variable. As the algorithm iterates
    through the numbers, it compares them and finds the maximum value.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，从前面的代码中，我们使用了`max()`函数来找到列表中的最大值。此外，我们还必须添加`int()`类型，以便算法正确识别值为数字。代码遍历从`0`到我们从用户输入中收到的数据点数，我们将其定义为`quant`变量。当算法遍历数字时，它会比较它们并找到最大值。
- en: 'Let''s take a look at what the output looks like:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看输出是什么样子的：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see from the preceding output, the user stated that `6` numbers would
    be entered. The algorithm then prompted the user for each of the values. Finally,
    the maximum value was identified.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可以从前面的输出中看到的，用户声明将输入`6`个数字。然后算法提示用户输入每个值。最后，识别出最大值。
- en: Let's now look at how we can build a guessing game.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何构建一个猜数字游戏。
- en: Problem 3 – Building a guessing game
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题3 - 构建一个猜数字游戏
- en: You've been asked to build a game where a user gets as many chances as needed
    to identify the digits of a four-digit number in the correct order. When a user
    inputs a guess, the algorithm will state whether any numbers are correct.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您被要求构建一个游戏，用户可以根据需要获得尽可能多的机会来按正确顺序识别四位数的数字。当用户输入猜测时，算法将指出是否有任何数字是正确的。
- en: The algorithm will identify whether the numbers are in the correct location,
    but will not identify which of the numbers are correct or which are in the correct
    location. If the player guesses the correct number, the game ends. You may find
    this game similar to a popular game called **Mastermind**, where a player sets
    four color pins into the game and a second player guesses.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 算法将确定数字是否在正确的位置，但不会确定哪些数字是正确的，哪些在正确的位置。如果玩家猜对了数字，游戏就结束了。您可能会发现这个游戏类似于一个名为**Mastermind**的流行游戏，其中玩家将四个颜色代码插入游戏，第二个玩家猜测。
- en: In this case, we're using numbers rather than colors, and the computer program
    will help us identify whether we have any numbers correct and whether they are
    in the correct location.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用数字而不是颜色，计算机程序将帮助我们确定是否有任何数字是正确的，以及它们是否在正确的位置。
- en: 'To build this game, let''s look at the inputs and outputs that we''ll need:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建这个游戏，让我们看看我们需要的输入和输出：
- en: A randomly generated 4-digit number (input)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机生成的4位数（输入）
- en: The user's guesses (input)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户的猜测（输入）
- en: Feedback about numbers and locations from the algorithm (output)
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自算法的数字和位置的反馈（输出）
- en: A message finalizing the game after the number is guessed (output)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数字被猜中后，结束游戏的消息（输出）
- en: 'When we generate the number, we''ll need to find a way to compare the digits
    of that number to the digits that the user inputs. Note that we need to import
    the `random` library for this particular algorithm so we can generate the random
    four-digit number. Let''s take a look at the code snippet:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们生成数字时，我们需要找到一种比较该数字的数字与用户输入的数字的方法。请注意，我们需要为这个特定的算法导入`random`库，以便我们可以生成随机的四位数。让我们看一下代码片段：
- en: ch9_problem3.py
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ch9_problem3.py
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As you can see, this is one instance where we''ll need input from the user.
    However, this is only the first guess, so we''ll need to get more input from the
    user and provide some output that provides feedback. Take a look at the following
    code snippet from the same algorithm:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这是我们需要用户输入的一个例子。然而，这只是第一次猜测，所以我们需要从用户那里获取更多的输入，并提供一些提供反馈的输出。看一下来自同一算法的以下代码片段：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice that we need to ask for each guess after a failed attempt. The algorithm
    needs to know what the next guess is in order to continue running if the user
    hasn't identified the correct four-digit number. That's why the guess input value
    happens in multiple places within the algorithm.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们需要在每次猜测失败后询问每次猜测。算法需要知道下一次猜测是什么，以便在用户没有识别出正确的四位数时继续运行。这就是为什么猜测输入值在算法中出现在多个地方。
- en: 'Once the user guesses correctly, the program needs to print a final statement,
    and in this case, we''ll let the user know how many attempts it took to guess:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户猜对了，程序需要打印最终的声明，在这种情况下，我们会让用户知道猜测花了多少次：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As you can see, this algorithm has input at multiple places based on conditions
    met, as well as output. The outputs include `print` statements and feedback on
    correct or incorrect digits. Let''s take a look at what the output looks like
    when the program is executed:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个算法在多个地方基于满足条件的输入，以及输出。输出包括`print`语句和对正确或错误数字的反馈。让我们看看程序执行时输出的样子：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Notice that after the third attempt, we had one correct digit, which was denoted
    as `3` `N N N`. That means that the first digit is 3\. We had to then guess the
    rest of the numbers. Providing feedback within the program, or output, allows
    the user to continue this game.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在第三次尝试后，我们有一个正确的数字，表示为`3` `N N N`。这意味着第一位数字是3。然后我们需要猜测其余的数字。在程序中提供反馈，或输出，使用户能够继续这个游戏。
- en: As you can see, understanding input and output allows us to create programs
    that can provide feedback, iterate based on conditions, and much more.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，理解输入和输出使我们能够创建能够提供反馈、根据条件进行迭代等等的程序。
- en: In this section, we learned how to use input and output when solving problems.
    We were provided with scenarios that allowed us to explore some of the types of
    inputs, such as user-defined inputs and algorithm-defined inputs. We also learned
    how to write algorithms that provide clear output for the users.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们学习了如何在解决问题时使用输入和输出。我们提供了一些场景，让我们可以探索一些输入类型，比如用户定义的输入和算法定义的输入。我们还学习了如何编写算法，为用户提供清晰的输出。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed input and output in Python algorithms. Input is
    how we get information for the algorithm to respond to. For example, a user can
    provide input to an algorithm that has prompts for that information, as we saw
    in the sample problems. Python and other programming languages can also get input
    from a mouse, scanners, cameras, and other devices that the program interacts
    with.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Python算法中的输入和输出。输入是我们获取算法响应的信息的方式。例如，用户可以为需要提示信息的算法提供输入，就像我们在示例问题中看到的那样。Python和其他编程语言也可以从鼠标、扫描仪、摄像头和程序交互的其他设备中获取输入。
- en: In order to write our algorithms, it is important to identify what inputs we
    need, when we need them in the design, and what we need as output from the program.
    In [*Chapter 3*](B15413_03_Final_SK_ePub.xhtml#_idTextAnchor056), *Understanding
    Algorithms and Algorithmic Thinking*, we used user input to find the cost of lunches.
    We had created a dictionary to help us find that information. Similarly, after
    reading this chapter, you now have the skills required to build algorithms to
    solve some additional problems, such as our digit guessing game and our maximum
    finder.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写我们的算法，重要的是要确定我们需要什么输入，我们在设计中何时需要它们，以及我们需要程序输出什么。在[*第3章*]（B15413_03_Final_SK_ePub.xhtml#_idTextAnchor056），*理解算法和算法思维*中，我们使用用户输入来找到午餐的成本。我们创建了一个字典来帮助我们找到这些信息。同样，在阅读完本章之后，你现在有了构建算法来解决一些额外问题的技能，比如我们的数字猜测游戏和我们的最大查找器。
- en: Identifying input and output is critical before we design algorithms, as the
    conditions and decisions we make in our algorithms depend on what is entered as
    input and what we need the program to provide as output.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计算法之前，确定输入和输出是至关重要的，因为我们在算法中做出的条件和决策取决于输入和我们需要程序提供的输出。
- en: In the next chapter, we will discuss control flow, which is critical in understanding
    how an algorithm is read and how the instructions are performed. We will also
    look more closely at functions while exploring control flow in algorithms.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论控制流，这在理解算法的阅读方式和指令执行方式上至关重要。我们还将在探索控制流中更仔细地查看函数。
