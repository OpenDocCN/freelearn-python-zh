- en: Chapter 15. Django Sessions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章。Django会话
- en: Imagine you had to log back in to a website every time you navigated to another
    page, or your favorite websites forgot all of your settings and you had to enter
    them again each time you visited?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，如果您每次导航到另一个页面都必须重新登录到网站，或者您最喜欢的网站忘记了所有的设置，您每次访问时都必须重新输入？
- en: Modern websites could not provide the usability and convenience we are used
    to without some way of remembering who you are and your previous activities on
    the website. HTTP is, by design, *stateless*-there is no persistence between one
    request and the next, and there is no way the server can tell whether successive
    requests come from the same person.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现代网站如果没有一种方式来记住您是谁以及您在网站上的先前活动，就无法提供我们习惯的可用性和便利性。HTTP是*无状态*的设计-在一次请求和下一次请求之间没有持久性，服务器无法判断连续的请求是否来自同一个人。
- en: This lack of state is managed using *sessions*, which are a semi-permanent,
    two-way communication between your browser and the web server. When you visit
    a modern website, in the majority of cases, the web server will use an *anonymous
    session* to keep track of data relevant to your visit. The session is called anonymous
    because the web server can only record what you did, not who you are.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这种状态的缺乏是通过*会话*来管理的，这是您的浏览器和Web服务器之间的一种半永久的双向通信。当您访问现代网站时，在大多数情况下，Web服务器将使用*匿名会话*来跟踪与您的访问相关的数据。会话被称为匿名，因为Web服务器只能记录您的操作，而不能记录您是谁。
- en: We have all experienced this when we have returned to an e-commerce site at
    a later date and found the items we put in the cart are still there, despite not
    having provided any personal details. Sessions are most often persisted using
    the often maligned, but rarely understood *cookie*. Like all other web frameworks,
    Django also uses cookies, but does so in a more clever and secure manner, as you
    will see.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都经历过这种情况，当我们在以后返回到电子商务网站时，发现我们放在购物车中的物品仍然在那里，尽管没有提供任何个人信息。会话通常使用经常受到诟病但很少被理解的*cookie*来持久化。与所有其他Web框架一样，Django也使用cookie，但以更聪明和安全的方式，您将看到。
- en: Django provides full support for anonymous sessions. The session framework lets
    you store and retrieve arbitrary data on a per-site-visitor basis. It stores data
    on the server side and abstracts the sending and receiving of cookies. Cookies
    contain a session ID-not the data itself (unless you're using the cookie based
    backend); a more secure way of implementing cookies than some other frameworks.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Django完全支持匿名会话。会话框架允许您在每个站点访问者的基础上存储和检索任意数据。它在服务器端存储数据并抽象了发送和接收cookie。Cookie包含会话ID-而不是数据本身（除非您使用基于cookie的后端）；这是一种比其他框架更安全的实现cookie的方式。
- en: Enabling sessions
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用会话
- en: Sessions are implemented via a piece of middleware. To enable session functionality,
    edit the `MIDDLEWARE_CLASSES` setting and make sure it contains `'django.contrib.sessions.middleware.SessionMiddleware'`.
    The default `settings.py` created by `django-admin startproject` has `SessionMiddleware`
    activated.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 会话是通过中间件实现的。要启用会话功能，请编辑`MIDDLEWARE_CLASSES`设置，并确保其中包含`'django.contrib.sessions.middleware.SessionMiddleware'`。由`django-admin
    startproject`创建的默认`settings.py`已激活`SessionMiddleware`。
- en: If you don't want to use sessions, you might as well remove the `SessionMiddleware`
    line from `MIDDLEWARE_CLASSES` and `'django.contrib.sessions'` from your `INSTALLED_APPS`.
    It'll save you a small bit of overhead.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用会话，您也可以从`MIDDLEWARE_CLASSES`中删除`SessionMiddleware`行，并从`INSTALLED_APPS`中删除`'django.contrib.sessions'`。这将节省一点开销。
- en: Configuring the session engine
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置会话引擎
- en: By default, Django stores sessions in your database (using the model `django.contrib.sessions.models.Session`).
    Though this is convenient, in some setups it's faster to store session data elsewhere,
    so Django can be configured to store session data on your filesystem or in your
    cache.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Django将会话存储在数据库中（使用模型`django.contrib.sessions.models.Session`）。虽然这很方便，但在某些设置中，将会话数据存储在其他地方可能更快，因此可以配置Django将会话数据存储在文件系统或缓存中。
- en: Using database-backed sessions
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用基于数据库的会话
- en: If you want to use a database-backed session, you need to add `'django.contrib.sessions'`
    to your `INSTALLED_APPS` setting. Once you have configured your installation,
    run `manage.py migrate` to install the single database table that stores session
    data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用基于数据库的会话，您需要将`'django.contrib.sessions'`添加到您的`INSTALLED_APPS`设置中。一旦配置了安装，运行`manage.py
    migrate`来安装存储会话数据的单个数据库表。
- en: Using cached sessions
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用缓存会话
- en: For better performance, you may want to use a cache-based session backend. To
    store session data using Django's cache system, you'll first need to make sure
    you've configured your cache; see the cache documentation for details.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得更好的性能，您可能希望使用基于缓存的会话后端。要使用Django的缓存系统存储会话数据，您首先需要确保已配置了缓存；有关详细信息，请参阅缓存文档。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should only use cache-based sessions if you're using the Memcached cache
    backend. The local-memory cache backend doesn't retain data long enough to be
    a good choice, and it'll be faster to use file or database sessions directly instead
    of sending everything through the file or database cache backends. Additionally,
    the local-memory cache backend is NOT multi-process safe, therefore probably not
    a good choice for production environments.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在使用Memcached缓存后端时，才应该使用基于缓存的会话。本地内存缓存后端不会保留数据足够长时间，因此直接使用文件或数据库会话而不是通过文件或数据库缓存后端发送所有内容将更快。此外，本地内存缓存后端不是多进程安全的，因此在生产环境中可能不是一个好选择。
- en: 'If you have multiple caches defined in `CACHES`, Django will use the default
    cache. To use another cache, set `SESSION_CACHE_ALIAS` to the name of that cache.
    Once your cache is configured, you''ve got two choices for how to store data in
    the cache:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`CACHES`中定义了多个缓存，Django将使用默认缓存。要使用另一个缓存，将`SESSION_CACHE_ALIAS`设置为该缓存的名称。配置好缓存后，您有两种选择来存储缓存中的数据：
- en: 'Set `SESSION_ENGINE` to `"django.contrib.sessions.backends.cache"` for a simple
    caching session store. Session data will be stored directly in your cache. However,
    session data may not be persistent: cached data can be evicted if the cache fills
    up or if the cache server is restarted.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`SESSION_ENGINE`设置为`"django.contrib.sessions.backends.cache"`以使用简单的缓存会话存储。会话数据将直接存储在缓存中。但是，会话数据可能不是持久的：如果缓存填满或缓存服务器重新启动，缓存数据可能会被驱逐。
- en: For persistent, cached data, set `SESSION_ENGINE` to `"django.contrib.sessions.backends.cached_db"`.
    This uses a write-through cache-every write to the cache will also be written
    to the database. Session reads only use the database if the data is not already
    in the cache.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于持久的缓存数据，将`SESSION_ENGINE`设置为`"django.contrib.sessions.backends.cached_db"`。这使用了一个写入缓存-每次写入缓存时也会写入数据库。会话读取仅在数据不在缓存中时才使用数据库。
- en: Both session stores are quite fast, but the simple cache is faster because it
    disregards persistence. In most cases, the `cached_db` backend will be fast enough,
    but if you need that last bit of performance, and are willing to let session data
    be expunged from time to time, the `cache` backend is for you. If you use the
    `cached_db` session backend, you also need to follow the configuration instructions
    for the using database-backed sessions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种会话存储都非常快，但简单缓存更快，因为它忽略了持久性。在大多数情况下，`cached_db`后端将足够快，但如果您需要最后一点性能，并且愿意让会话数据不时被清除，那么`cache`后端适合您。如果您使用`cached_db`会话后端，还需要遵循使用基于数据库的会话的配置说明。
- en: Using file-based sessions
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用基于文件的会话
- en: To use file-based sessions, set the `SESSION_ENGINE` setting to `"django.contrib.sessions.backends.file"`.
    You might also want to set the `SESSION_FILE_PATH` setting (which defaults to
    output from `tempfile.gettempdir()`, most likely `/tmp`) to control where Django
    stores session files. Be sure to check that your web server has permissions to
    read and write to this location.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用基于文件的会话，请将`SESSION_ENGINE`设置为`"django.contrib.sessions.backends.file"`。您可能还想设置`SESSION_FILE_PATH`设置（默认为`tempfile.gettempdir()`的输出，很可能是`/tmp`）以控制Django存储会话文件的位置。请确保您的Web服务器有权限读取和写入此位置。
- en: Using cookie-based sessions
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用基于cookie的会话
- en: To use cookies-based sessions, set the `SESSION_ENGINE` setting to `"django.contrib.sessions.backends.signed_cookies"`.
    The session data will be stored using Django's tools for cryptographic signing
    and the `SECRET_KEY` setting.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用基于cookie的会话，请将`SESSION_ENGINE`设置为`"django.contrib.sessions.backends.signed_cookies"`。会话数据将使用Django的加密签名工具和`SECRET_KEY`设置进行存储。
- en: It's recommended to leave the `SESSION_COOKIE_HTTPONLY` setting on `True` to
    prevent access to the stored data from JavaScript.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 建议将`SESSION_COOKIE_HTTPONLY`设置为`True`，以防止JavaScript访问存储的数据。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**If the `SECRET_KEY` is not kept secret and you are using the** `PickleSerializer`,
    **this can lead to arbitrary remote code execution.**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果`SECRET_KEY`不保密，并且您使用`PickleSerializer`，这可能导致任意远程代码执行。**'
- en: An attacker in possession of the `SECRET_KEY` can not only generate falsified
    session data, which your site will trust, but also remotely execute arbitrary
    code, as the data is serialized using pickle. If you use cookie-based sessions,
    pay extra care that your secret key is always kept completely secret, for any
    system which might be remotely accessible.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有`SECRET_KEY`的攻击者不仅可以生成被您的站点信任的伪造会话数据，还可以远程执行任意代码，因为数据使用pickle进行序列化。如果您使用基于cookie的会话，请特别注意始终保持您的秘钥完全保密，以防止任何可能远程访问的系统。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**The session data is signed but not encrypted**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**会话数据已签名但未加密**'
- en: When using the cookies backend, the session data can be read by the client.
    A MAC (Message Authentication Code) is used to protect the data against changes
    by the client, so that the session data will be invalidated when being tampered
    with. The same invalidation happens if the client storing the cookie (for example,
    your user's browser) can't store all of the session cookie and drops data. Even
    though Django compresses the data, it's still entirely possible to exceed the
    common limit of 4096 bytes per cookie.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用cookie后端时，会话数据可以被客户端读取。使用MAC（消息认证码）来保护数据免受客户端的更改，因此当被篡改时会使会话数据无效。如果存储cookie的客户端（例如，您的用户浏览器）无法存储所有会话cookie并丢弃数据，也会发生相同的无效。即使Django压缩了数据，仍然完全有可能超过每个cookie的常见限制4096字节。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**No freshness guarantee**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**没有新鲜度保证**'
- en: Note also that while the MAC can guarantee the authenticity of the data (that
    it was generated by your site, and not someone else), and the integrity of the
    data (that it is all there and correct), it cannot guarantee freshness that is,
    you are being sent back the last thing you sent to the client. This means that
    for some uses of session data, the cookie backend might open you up to replay
    attacks. Unlike other session backends which keep a server-side record of each
    session and invalidate it when a user logs out, cookie-based sessions are not
    invalidated when a user logs out. Thus if an attacker steals a user's cookie,
    they can use that cookie to login as that user even if the user logs out. Cookies
    will only be detected as 'stale' if they are older than your `SESSION_COOKIE_AGE`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，虽然MAC可以保证数据的真实性（即它是由您的站点生成的，而不是其他人），以及数据的完整性（即它是否完整且正确），但它无法保证新鲜度，也就是说，您被发送回客户端的是您最后发送的内容。这意味着对于某些会话数据的使用，cookie后端可能会使您容易受到重放攻击。与其他会话后端不同，其他会话后端会在用户注销时保留每个会话的服务器端记录并使其无效，而基于cookie的会话在用户注销时不会被无效。因此，如果攻击者窃取了用户的cookie，他们可以使用该cookie以该用户的身份登录，即使用户已注销。只有当cookie的年龄大于您的`SESSION_COOKIE_AGE`时，才会检测到cookie已过期。
- en: 'Finally, assuming the above warnings have not discouraged you from using cookie
    based sessions: the size of a cookie can also have an impact on the speed of your
    site.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，假设上述警告没有阻止您使用基于cookie的会话：cookie的大小也会影响站点的速度。
- en: Using Sessions in Views
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中使用会话
- en: When `SessionMiddleware` is activated, each `HttpRequest` object-the first argument
    to any Django view function-will have a `session` attribute, which is a dictionary-like
    object. You can read it and write to `request.session` at any point in your view.
    You can edit it multiple times.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当激活`SessionMiddleware`时，每个`HttpRequest`对象-任何Django视图函数的第一个参数-都将有一个`session`属性，这是一个类似字典的对象。您可以在视图的任何时候读取它并写入`request.session`。您可以多次编辑它。
- en: 'All session objects inherit from the base class `backends.base.SessionBase`.
    It has the following standard dictionary methods:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所有会话对象都继承自基类`backends.base.SessionBase`。它具有以下标准字典方法：
- en: '`__getitem__(key)`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__getitem__(key)`'
- en: '`__setitem__(key, value)`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__setitem__(key, value)`'
- en: '`__delitem__(key)`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__delitem__(key)`'
- en: '`__contains__(key)`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__contains__(key)`'
- en: '`get(key, default=None)`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get(key, default=None)`'
- en: '`pop(key)`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pop(key)`'
- en: '`keys()`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keys()`'
- en: '`items()`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`items()`'
- en: '`setdefault()`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setdefault()`'
- en: '`clear()`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clear()`'
- en: 'It also has these methods:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它还具有这些方法：
- en: flush()
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: flush()
- en: Delete the current session data from the session and delete the session cookie.
    This is used if you want to ensure that the previous session data can't be accessed
    again from the user's browser (for example, the `django.contrib.auth.logout()`
    function calls it).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从会话中删除当前会话数据并删除会话cookie。如果您希望确保无法再次从用户的浏览器访问以前的会话数据（例如，`django.contrib.auth.logout()`函数调用它）。
- en: set_test_cookie()
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: set_test_cookie()
- en: Sets a test cookie to determine whether the user's browser supports cookies.
    Due to the way cookies work, you won't be able to test this until the user's next
    page request. See *Setting test cookies* below for more information.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个测试cookie以确定用户的浏览器是否支持cookie。由于cookie的工作方式，您将无法在用户的下一个页面请求之前测试这一点。有关更多信息，请参见下面的*设置测试cookie*。
- en: test_cookie_worked()
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: test_cookie_worked()
- en: Returns either `True` or `False`, depending on whether the user's browser accepted
    the test cookie. Due to the way cookies work, you'll have to call `set_test_cookie()`
    on a previous, separate page request. See *Setting test cookies* below for more
    information.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`True`或`False`，取决于用户的浏览器是否接受了测试cookie。由于cookie的工作方式，您将不得不在先前的单独页面请求上调用`set_test_cookie()`。有关更多信息，请参见下面的*设置测试cookie*。
- en: delete_test_cookie()
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: delete_test_cookie()
- en: Deletes the test cookie. Use this to clean up after yourself.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 删除测试cookie。使用此方法进行清理。
- en: set_expiry(value)
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: set_expiry(value)
- en: 'Sets the expiration time for the session. You can pass a number of different
    values:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 设置会话的过期时间。您可以传递许多不同的值：
- en: If `value` is an integer, the session will expire after that many seconds of
    inactivity. For example, calling `request.session.set_expiry(300)` would make
    the session expire in 5 minutes.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`value`是一个整数，会话将在多少秒的不活动后过期。例如，调用`request.session.set_expiry(300)`会使会话在5分钟后过期。
- en: If `value` is a `datetime` or `timedelta` object, the session will expire at
    that specific date/time. Note that `datetime` and `timedelta` values are only
    serializable if you are using the `PickleSerializer`.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`value`是`datetime`或`timedelta`对象，则会话将在特定日期/时间过期。请注意，只有在使用`PickleSerializer`时，`datetime`和`timedelta`值才能被序列化。
- en: If `value` is `0`, the user's session cookie will expire when the user's web
    browser is closed.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`value`是`0`，用户的会话cookie将在用户的Web浏览器关闭时过期。
- en: If `value` is `None`, the session reverts to using the global session expiry
    policy.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`value`是`None`，会话将恢复使用全局会话过期策略。
- en: Reading a session is not considered activity for expiration purposes. Session
    expiration is computed from the last time the session was modified.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读会话不被视为过期目的的活动。会话的过期是根据会话上次修改的时间计算的。
- en: get_expiry_age()
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: get_expiry_age()
- en: 'Returns the number of seconds until this session expires. For sessions with
    no custom expiration (or those set to expire at browser close), this will equal
    `SESSION_COOKIE_AGE`. This function accepts two optional keyword arguments:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 返回直到此会话过期的秒数。对于没有自定义过期时间（或者设置为在浏览器关闭时过期）的会话，这将等于`SESSION_COOKIE_AGE`。此函数接受两个可选的关键字参数：
- en: '`modification`: last modification of the session, as a `datetime` object. Defaults
    to the current time'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modification`：会话的最后修改，作为`datetime`对象。默认为当前时间'
- en: '`expiry`: expiry information for the session, as a `datetime` object, an `int`
    (in seconds), or `None`. Defaults to the value stored in the session by `set_expiry()`,
    if there is one, or `None`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expiry`：会话的过期信息，作为`datetime`对象，一个`int`（以秒为单位），或`None`。默认为通过`set_expiry()`存储在会话中的值，如果有的话，或`None`'
- en: get_expiry_date()
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: get_expiry_date()
- en: Returns the date this session will expire. For sessions with no custom expiration
    (or those set to expire at browser close), this will equal the date `SESSION_COOKIE_AGE`
    seconds from now. This function accepts the same keyword arguments as `get_expiry_age()`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此会话将过期的日期。对于没有自定义过期时间（或者设置为在浏览器关闭时过期）的会话，这将等于从现在开始`SESSION_COOKIE_AGE`秒的日期。此函数接受与`get_expiry_age()`相同的关键字参数。
- en: get_expire_at_browser_close()
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: get_expire_at_browser_close()
- en: Returns either `True` or `False`, depending on whether the user's session cookie
    will expire when the user's web browser is closed.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`True`或`False`，取决于用户的会话cookie是否在用户的Web浏览器关闭时过期。
- en: clear_expired()
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: clear_expired()
- en: Removes expired sessions from the session store. This class method is called
    by `clearsessions`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从会话存储中删除过期的会话。这个类方法由`clearsessions`调用。
- en: cycle_key()
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cycle_key()
- en: Creates a new session key while retaining the current session data. `django.contrib.auth.login()`
    calls this method to mitigate against session fixation.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在保留当前会话数据的同时创建一个新的会话密钥。`django.contrib.auth.login()`调用此方法以减轻会话固定。
- en: Session object guidelines
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话对象指南
- en: Use normal Python strings as dictionary keys on `request.session`. This is more
    of a convention than a hard-and-fast rule.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`request.session`上使用普通的Python字符串作为字典键。这更多是一种约定而不是一条硬性规定。
- en: Session dictionary keys that begin with an underscore are reserved for internal
    use by Django.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下划线开头的会话字典键是由Django内部使用的保留字。
- en: Don't override `request.session` with a new object, and don't access or set
    its attributes. Use it like a Python dictionary.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 不要用新对象覆盖`request.session`，也不要访问或设置其属性。像使用Python字典一样使用它。
- en: Session serialization
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话序列化
- en: Before version 1.6, Django defaulted to using `pickle` to serialize session
    data before storing it in the backend. If you're using the signed cookie session
    backend and `SECRET_KEY` is known by an attacker (there isn't an inherent vulnerability
    in Django that would cause it to leak), the attacker could insert a string into
    their session which, when unpickled, executes arbitrary code on the server. The
    technique for doing so is simple and easily available on the internet.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.6版本之前，Django默认使用`pickle`对会话数据进行序列化后存储在后端。如果您使用签名的cookie会话后端并且`SECRET_KEY`被攻击者知晓（Django本身没有固有的漏洞会导致泄漏），攻击者可以在其会话中插入一个字符串，该字符串在反序列化时在服务器上执行任意代码。这种技术简单易行，并且在互联网上很容易获得。
- en: Although the cookie session storage signs the cookie-stored data to prevent
    tampering, a `SECRET_KEY` leak immediately escalates to a remote code execution
    vulnerability. This attack can be mitigated by serializing session data using
    JSON rather than `pickle`. To facilitate this, Django 1.5.3 introduced a new setting,
    `SESSION_SERIALIZER`, to customize the session serialization format. For backwards
    compatibility, this setting defaults to using `django.contrib.sessions.serializers.PickleSerializer`
    in Django 1.5.x, but, for security hardening, defaults to `django.contrib.sessions.serializers.JSONSerializer`
    from Django 1.6 onwards.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管cookie会话存储对cookie存储的数据进行签名以防篡改，但`SECRET_KEY`泄漏会立即升级为远程代码执行漏洞。可以通过使用JSON而不是`pickle`对会话数据进行序列化来减轻此攻击。为了方便这一点，Django
    1.5.3引入了一个新的设置`SESSION_SERIALIZER`，用于自定义会话序列化格式。为了向后兼容，Django 1.5.x中此设置默认使用`django.contrib.sessions.serializers.PickleSerializer`，但为了加强安全性，从Django
    1.6开始默认使用`django.contrib.sessions.serializers.JSONSerializer`。
- en: Even with the caveats described in custom-serializers, we highly recommend sticking
    with JSON serialization *especially if you are using the cookie backend*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在自定义序列化器中描述的注意事项中，我们强烈建议坚持使用JSON序列化*特别是如果您使用cookie后端*。
- en: Bundled serializers
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 捆绑的序列化器
- en: serializers.JSONSerializer
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 序列化器.JSONSerializer
- en: 'A wrapper around the JSON serializer from `django.core.signing`. Can only serialize
    basic data types. In addition, as JSON supports only string keys, note that using
    non-string keys in `request.session` won''t work as expected:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从`django.core.signing`的JSON序列化器周围的包装器。只能序列化基本数据类型。此外，由于JSON仅支持字符串键，请注意在`request.session`中使用非字符串键将无法按预期工作：
- en: '[PRE0]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: See the custom-serializers section for more details on limitations of JSON serialization.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅自定义序列化器部分，了解JSON序列化的限制详情。
- en: serializers.PickleSerializer
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 序列化器.PickleSerializer
- en: Supports arbitrary Python objects, but, as described above, can lead to a remote
    code execution vulnerability if `SECRET_KEY` becomes known by an attacker.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 支持任意Python对象，但如上所述，如果`SECRET_KEY`被攻击者知晓，可能会导致远程代码执行漏洞。
- en: Write your own serializer
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写自己的序列化器
- en: Note that unlike `PickleSerializer`, the `JSONSerializer` cannot handle arbitrary
    Python data types. As is often the case, there is a trade-off between convenience
    and security. If you wish to store more advanced data types including `datetime`
    and `Decimal` in JSON backed sessions, you will need to write a custom serializer
    (or convert such values to a JSON serializable object before storing them in `request.session`).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与`PickleSerializer`不同，`JSONSerializer`无法处理任意Python数据类型。通常情况下，方便性和安全性之间存在权衡。如果您希望在JSON支持的会话中存储更高级的数据类型，包括`datetime`和`Decimal`，则需要编写自定义序列化器（或在将这些值存储在`request.session`之前将其转换为JSON可序列化对象）。
- en: While serializing these values is fairly straightforward (`django.core.serializers.json.DateTimeAwareJSONEncoder`
    may be helpful), writing a decoder that can reliably get back the same thing that
    you put in is more fragile. For example, you run the risk of returning a `datetime`
    that was actually a string that just happened to be in the same format chosen
    for `datetime`).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然序列化这些值相当简单（`django.core.serializers.json.DateTimeAwareJSONEncoder`可能会有所帮助），但编写一个可靠地获取与输入相同内容的解码器更加脆弱。例如，您可能会冒返回实际上是字符串的`datetime`的风险，只是碰巧与`datetime`选择的相同格式相匹配）。
- en: Your serializer class must implement two methods, `dumps(self, obj)` and `loads(self,
    data)`, to serialize and deserialize the dictionary of session data, respectively.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您的序列化器类必须实现两个方法，`dumps(self, obj)`和`loads(self, data)`，分别用于序列化和反序列化会话数据字典。
- en: Setting test cookies
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置测试cookie
- en: As a convenience, Django provides an easy way to test whether the user's browser
    accepts cookies. Just call the `set_test_cookie()` method of `request.session`
    in a view, and call `test_cookie_worked()` in a subsequent view-not in the same
    view call.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 作为便利，Django提供了一种简单的方法来测试用户的浏览器是否接受cookie。只需在视图中调用`request.session`的`set_test_cookie()`方法，并在随后的视图中调用`test_cookie_worked()`，而不是在同一视图调用中。
- en: This awkward split between `set_test_cookie()` and `test_cookie_worked()` is
    necessary due to the way cookies work. When you set a cookie, you can't actually
    tell whether a browser accepted it until the browser's next request. It's good
    practice to use `delete_test_cookie()` to clean up after yourself. Do this after
    you've verified that the test cookie worked.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`set_test_cookie()`和`test_cookie_worked()`之间的这种尴尬分离是由于cookie的工作方式。当您设置一个cookie时，实际上无法确定浏览器是否接受它，直到浏览器的下一个请求。在验证测试cookie有效后，请使用`delete_test_cookie()`进行清理是一个良好的做法。'
- en: 'Here''s a typical usage example:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是典型的用法示例：
- en: '[PRE1]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using sessions out of views
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图之外使用会话
- en: 'The examples in this section import the `SessionStore` object directly from
    the `django.contrib.sessions.backends.db` backend. In your own code, you should
    consider importing `SessionStore` from the session engine designated by `SESSION_ENGINE`,
    as below:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的示例直接从`django.contrib.sessions.backends.db`后端导入`SessionStore`对象。在您自己的代码中，您应该考虑从`SESSION_ENGINE`指定的会话引擎中导入`SessionStore`，如下所示：
- en: '[PRE2]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'An API is available to manipulate session data outside of a view:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: API可用于在视图之外操作会话数据：
- en: '[PRE3]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In order to mitigate session fixation attacks, sessions keys that don''t exist
    are regenerated:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减轻会话固定攻击，不存在的会话密钥将被重新生成：
- en: '[PRE4]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you''re using the `django.contrib.sessions.backends.db` backend, each session
    is just a normal Django model. The `Session` model is defined in `django/contrib/sessions/models.py`.
    Because it''s a normal model, you can access sessions using the normal Django
    database API:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用`django.contrib.sessions.backends.db`后端，每个会话只是一个普通的Django模型。`Session`模型在`django/contrib/sessions/models.py`中定义。因为它是一个普通模型，您可以使用普通的Django数据库API访问会话：
- en: '[PRE5]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When sessions are saved
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话保存时
- en: 'By default, Django only saves to the session database when the session has
    been modified-that is if any of its dictionary values have been assigned or deleted:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，只有在会话已被修改时（即其字典值已被分配或删除）Django才会保存到会话数据库：
- en: '[PRE6]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the last case of the above example, we can tell the session object explicitly
    that it has been modified by setting the `modified` attribute on the session object:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面示例的最后一种情况中，我们可以通过在会话对象上设置`modified`属性来明确告诉会话对象已被修改：
- en: '[PRE7]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To change this default behavior, set the `SESSION_SAVE_EVERY_REQUEST` setting
    to `True`. When set to `True`, Django will save the session to the database on
    every single request. Note that the session cookie is only sent when a session
    has been created or modified. If `SESSION_SAVE_EVERY_REQUEST` is `True`, the session
    cookie will be sent on every request. Similarly, the `expires` part of a session
    cookie is updated each time the session cookie is sent. The session is not saved
    if the response's status code is 500.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改此默认行为，请将`SESSION_SAVE_EVERY_REQUEST`设置为`True`。当设置为`True`时，Django将在每个请求上将会话保存到数据库。请注意，只有在创建或修改会话时才会发送会话cookie。如果`SESSION_SAVE_EVERY_REQUEST`为`True`，则会在每个请求上发送会话cookie。类似地，会话cookie的`expires`部分在每次发送会话cookie时都会更新。如果响应的状态码为500，则不会保存会话。
- en: Browser-length sessions vs. persistent sessions
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器长度会话与持久会话
- en: You can control whether the session framework uses browser-length sessions vs.
    persistent sessions with the `SESSION_EXPIRE_AT_BROWSER_CLOSE` setting. By default,
    `SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to `False`, which means session cookies
    will be stored in users' browsers for as long as `SESSION_COOKIE_AGE`. Use this
    if you don't want people to have to log in every time they open a browser.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过`SESSION_EXPIRE_AT_BROWSER_CLOSE`设置来控制会话框架是使用浏览器长度会话还是持久会话。默认情况下，`SESSION_EXPIRE_AT_BROWSER_CLOSE`设置为`False`，这意味着会话cookie将在用户的浏览器中存储，直到`SESSION_COOKIE_AGE`。如果您不希望用户每次打开浏览器时都需要登录，请使用此设置。
- en: If `SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to `True`, Django will use browser-length
    cookies-cookies that expire as soon as the user closes their browser.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`SESSION_EXPIRE_AT_BROWSER_CLOSE`设置为`True`，Django将使用浏览器长度的cookie-即当用户关闭浏览器时立即过期的cookie。
- en: Note
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some browsers (Chrome, for example) provide settings that allow users to continue
    browsing sessions after closing and re-opening the browser. In some cases, this
    can interfere with the `SESSION_EXPIRE_AT_BROWSER_CLOSE` setting and prevent sessions
    from expiring on browser close. Please be aware of this while testing Django applications
    which have the `SESSION_EXPIRE_AT_BROWSER_CLOSE` setting enabled.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一些浏览器（例如Chrome）提供设置，允许用户在关闭和重新打开浏览器后继续浏览会话。在某些情况下，这可能会干扰`SESSION_EXPIRE_AT_BROWSER_CLOSE`设置，并阻止会话在关闭浏览器时过期。请在测试启用了`SESSION_EXPIRE_AT_BROWSER_CLOSE`设置的Django应用程序时注意这一点。
- en: Clearing the session store
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清除会话存储
- en: 'As users create new sessions on your website, session data can accumulate in
    your session store. Django does not provide automatic purging of expired sessions.
    Therefore, it''s your job to purge expired sessions on a regular basis. Django
    provides a clean-up management command for this purpose: `clearsessions`. It''s
    recommended to call this command on a regular basis, for example as a daily cron
    job.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在您的网站上创建新会话时，会话数据可能会在会话存储中累积。Django不提供自动清除过期会话。因此，您需要定期清除过期会话。Django为此提供了一个清理管理命令：`clearsessions`。建议定期调用此命令，例如作为每日cron作业。
- en: Note that the cache backend isn't vulnerable to this problem, because caches
    automatically delete stale data. Neither is the cookie backend, because the session
    data is stored by the users' browsers.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，缓存后端不会受到此问题的影响，因为缓存会自动删除过时数据。Cookie后端也不会受到影响，因为会话数据是由用户的浏览器存储的。
- en: What's next
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么
- en: Next, we will be continuing our look into more advanced Django topics by examining
    Django's caching backend.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将继续研究更高级的Django主题，通过检查Django的缓存后端。
