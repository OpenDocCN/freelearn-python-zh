- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Admin Interface for Flask Apps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask 应用程序的管理界面
- en: Many applications require an interface that provides special privileges to some
    users and can be used to maintain and upgrade an application’s resources. For
    example, we can have an interface in an e-commerce application that will allow
    some special users to create categories, products, and more. Some users might
    have special permissions to handle other users who shop on the website, deal with
    their account information, and so on. Similarly, there can be many cases where
    we need to isolate some parts of the interface of our application from normal
    users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序需要一种界面，它可以为某些用户提供特殊权限，并可用于维护和升级应用程序的资源。例如，我们可以在电子商务应用程序中有一个界面，允许一些特殊用户创建类别、产品等。一些用户可能拥有特殊权限来处理在网站上购物的其他用户，处理他们的账户信息等。同样，可能存在许多需要将应用程序界面的某些部分从普通用户中隔离出来的情况。
- en: In comparison to the very popular Python-based web framework, Django, Flask
    does not provide any admin interface by default. Although this can be seen as
    a shortcoming by many, this gives developers the flexibility to create the admin
    interface as per their requirements and have complete control over the application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与非常流行的基于 Python 的 Web 框架 Django 相比，Flask 默认不提供任何管理界面。虽然这可能会被许多人视为一个缺点，但这给了开发者根据他们的需求创建管理界面的灵活性，并完全控制应用程序。
- en: We can choose to write an admin interface for our application from scratch or
    use an extension of Flask, which does most of the work for us and gives us the
    option to customize the logic as needed. One very popular extension for creating
    admin interfaces in Flask is Flask-Admin ([https://flask-admin.readthedocs.io/en/latest/](https://flask-admin.readthedocs.io/en/latest/)).
    It is inspired by the Django admin but is implemented in a way that gives the
    developer complete control over the look, feel, and functionality of the application.
    In this chapter, we will start with the creation of an admin interface on our
    own, and then move on to using the `Flask-Admin` extension and fine-tune this
    as needed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择从头开始为我们自己的应用程序编写管理界面，或者使用 Flask 的扩展，它为我们做了大部分工作，并允许我们根据需要自定义逻辑。在 Flask
    中创建管理界面的一个非常流行的扩展是 Flask-Admin ([https://flask-admin.readthedocs.io/en/latest/](https://flask-admin.readthedocs.io/en/latest/))。它受到
    Django 管理界面的启发，但以一种让开发者完全控制应用程序的外观、感觉和功能的方式实现。在本章中，我们将从创建自己的管理界面开始，然后转向使用 `Flask-Admin`
    扩展，并根据需要对其进行微调。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Creating a simple CRUD interface
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建简单的 CRUD 界面
- en: Using the Flask-Admin extension
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Flask-Admin 扩展
- en: Registering models with Flask-Admin
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模型注册到 Flask-Admin
- en: Creating custom forms and actions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义表单和操作
- en: Using a WYSIWYG editor for `textarea` integration
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 WYSIWYG 编辑器进行 `textarea` 集成
- en: Creating user roles
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户角色
- en: Creating a simple CRUD interface
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建简单的 CRUD 界面
- en: '**CRUD** refers to **Create, Read, Update, and Delete**. A basic necessity
    of an admin interface is to have the ability to create, modify, or delete the
    records/resources from the application as and when needed. We will create a simple
    admin interface that will allow admin users to perform these operations on the
    records that other normal users generally can’t.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**CRUD** 代表 **创建、读取、更新和删除**。管理界面的基本需求是能够根据需要创建、修改或删除应用程序中的记录/资源。我们将创建一个简单的管理界面，允许管理员用户对其他普通用户通常无法操作的记录执行这些操作。'
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will start with the authentication application from the *Authenticating using
    the Flask-Login extension* recipe in [*Chapter 6*](B19111_06.xhtml#_idTextAnchor328),
    *Authenticating in Flask*, and add admin authentication with an interface for
    admins, which would allow only the admin users to create, update, and delete user
    records. Here, in this recipe, I will cover some specific parts that are necessary
    to understand the concepts. For the complete application, you can refer to the
    code samples available for the book.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从第 6 章“在 Flask 中认证”中的“使用 Flask-Login 扩展进行认证”配方开始，并添加带有管理员界面的管理员认证，这将仅允许管理员用户创建、更新和删除用户记录。在这里，在这个配方中，我将涵盖理解这些概念所必需的一些特定部分。对于完整的应用程序，您可以参考本书提供的代码示例。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To create a simple admin interface, perform the following steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个简单的管理界面，请执行以下步骤：
- en: 'Start with the models by adding a new `BooleanField` field called `admin` to
    the `User` model in `auth/models.py`. This field will help in identifying whether
    the user is an admin or not:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过在`auth/models.py`中的`User`模型中添加一个名为`admin`的新`BooleanField`字段来修改模型。这个字段将帮助识别用户是否是管理员：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding method simply returns the value of the admin field. This can have
    a custom implementation as per our requirements.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法只是返回管理员字段的值。这可以根据我们的需求有自定义的实现。
- en: Tip
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Since this is a new field being added to the `User` model, database migration
    should be done. You can refer to the *Migrating databases using Alembic and Flask-Migrate*
    recipe in [*Chapter 3*](B19111_03.xhtml#_idTextAnchor129), *Data Modeling in Flask*,
    for more details.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是添加到`User`模型的新字段，因此需要进行数据库迁移。你可以参考[*第3章*](B19111_03.xhtml#_idTextAnchor129)中关于使用Alembic和Flask-Migrate迁移数据库的配方，*Flask中的数据建模*，以获取更多详细信息。
- en: 'Create two forms that will be used by the admin views in `auth/models.py`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`auth/models.py`中创建两个表单，这些表单将由管理员视图使用：
- en: '[PRE14]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, modify the views in `auth/views.py` to implement the admin interface:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，修改`auth/views.py`中的视图以实现管理员界面：
- en: '[PRE24]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The preceding code is the `admin_login_required` decorator, which works just
    like the `login_required` decorator. Here, the difference is that it needs to
    be implemented along with `login_required`, and it checks whether the currently
    logged-in user is an admin.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码是`admin_login_required`装饰器，它的工作方式与`login_required`装饰器类似。在这里，区别在于它需要与`login_required`一起实现，并检查当前登录的用户是否是管理员。
- en: 'Create the following handlers, which will be needed to create a simple admin
    interface. Note the usage of the `@admin_login_required` decorator. Everything
    else is pretty much standard, as we learned in the previous chapters of this book
    that focused on views and authentication handling. All the handlers will go in
    `auth/views.py`:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下处理程序，这些处理程序将用于创建简单的管理员界面。注意`@admin_login_required`装饰器的使用。其他所有内容基本上都是标准的，正如我们在本书前面章节中学到的，这些章节专注于视图和认证处理。所有处理程序都将放在`auth/views.py`中：
- en: '[PRE35]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The preceding method allows admin users to create new users in the system. This
    works in a manner that is pretty similar to the `register()` method but allows
    the admin to set the `admin` flag on the user.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法允许管理员用户在系统中创建新用户。这与`register()`方法的工作方式非常相似，但允许管理员设置用户的`admin`标志。
- en: 'The following method allows the admin users to update the records of other
    users:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法允许管理员用户更新其他用户的记录：
- en: '[PRE77]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: However, as per the best practices of writing web applications, we do not allow
    the admin to simply view and change the passwords of any user. In most cases,
    the provision to change passwords should rest with the user who owns the account.
    Although admins can have the provision to update the password in some cases, still,
    it should never be possible for them to see the passwords set by the user earlier.
    This topic is discussed in the *Creating custom forms and actions* recipe.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，根据编写Web应用程序的最佳实践，我们不允许管理员简单地查看和更改任何用户的密码。在大多数情况下，更改密码的权限应该属于账户的所有者。尽管在某些情况下管理员可以更新密码，但绝对不应该允许他们看到用户之前设置的密码。这个话题在*创建自定义表单和操作*配方中进行了讨论。
- en: 'The following method handles the deletion of a user by an admin:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法处理管理员删除用户的情况：
- en: '[PRE78]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: The `user_delete_admin()` method should actually be implemented on a `POST`
    request. This is left to you to implement by yourself.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`user_delete_admin()`方法实际上应该在`POST`请求上实现。这留给你自己实现。'
- en: Followed by models and views, create some templates to complement them. It might
    have been evident to many of you from the code of the views itself that we need
    to add four new templates, namely, `admin-home.html`, `user-create- admin.html`,
    `user-update-admin.html`, and `users-list-admin.html`. How these work is shown
    in the next section. You should now be able to implement these templates by yourself;
    however, for reference, the code is always available with the samples provided
    with the book.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模型和视图之后，创建一些模板来补充它们。对于你们中的许多人来说，从视图本身的代码中可能已经很明显，我们需要添加四个新的模板，即`admin-home.html`、`user-create-admin.html`、`user-update-admin.html`和`users-list-admin.html`。这些模板的工作原理将在下一节中展示。现在，你应该能够自己实现这些模板；然而，为了参考，代码总是与书中提供的示例一起提供。
- en: How it works...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To begin, we added a menu item to the application; this provides a direct link
    to the admin home page, which will look like the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在应用程序中添加了一个菜单项；这提供了一个直接链接到管理员主页，其外观如下所示截图：
- en: '![Figure 8.1 – Menu item for admin access](img/B19111_08_01.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1 – 管理员访问菜单项](img/B19111_08_01.jpg)'
- en: Figure 8.1 – Menu item for admin access
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 管理员访问菜单项
- en: 'A user must be logged in as the admin to access this page and other admin-related
    pages. If a user is not logged in as the admin, then the application will show
    an error, as shown in the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 用户必须以管理员身份登录才能访问此页面和其他相关管理员页面。如果用户没有以管理员身份登录，则应用程序将显示错误，如下面的截图所示：
- en: '![Figure 8.2 – Forbidden error for non-admin users](img/B19111_08_02.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2 – 非管理员用户的禁止访问错误](img/B19111_08_02.jpg)'
- en: Figure 8.2 – Forbidden error for non-admin users
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 非管理员用户的禁止访问错误
- en: Information
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: Create an admin user before you can log in as the admin. To create an admin
    user, you can make DB changes in SQLAlchemy from the command line using SQL queries.
    Another simpler but hacky way of doing this is to change the `admin` flag to `True`
    in `auth/models.py` and then register a new user. This new user will be an admin
    user. Make sure that you revert the `admin` flag to `False` as the default after
    this is done.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在您能够以管理员身份登录之前，需要创建一个管理员用户。要创建管理员用户，您可以从命令行使用SQL查询在SQLAlchemy中对数据库进行更改。另一种更简单但有些不规范的实现方法是，在`auth/models.py`中将`admin`标志更改为`True`，然后注册一个新用户。这个新用户将成为管理员用户。请确保在此操作完成后，将`admin`标志恢复为默认的`False`。
- en: 'To a logged-in admin user, the admin home page will look as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于已登录的管理员用户，管理员主页将如下所示：
- en: '![Figure 8.3 – Admin home page](img/B19111_08_03.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3 – 管理员主页](img/B19111_08_03.jpg)'
- en: Figure 8.3 – Admin home page
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – 管理员主页
- en: From here, the admin can see the list of users on a system or create a new user.
    The options to edit or delete the users will be available on the user list page
    itself.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，管理员可以查看系统上的用户列表或创建新用户。编辑或删除用户的选项将直接在用户列表页面上提供。
- en: Using the Flask-Admin extension
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Flask-Admin扩展
- en: '`Flask-Admin` is an available extension that helps in the creation of admin
    interfaces for our application in a simpler and faster way. All the subsequent
    recipes in this chapter will focus on using and extending this extension.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`Flask-Admin`是一个可用的扩展，它以更简单、更快的速度帮助我们为应用程序创建管理员界面。本章的所有后续食谱都将专注于使用和扩展此扩展。'
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'First, we need to install the `Flask-Admin` extension:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装`Flask-Admin`扩展：
- en: '[PRE79]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: We will extend our application from the previous recipe and keep building on
    the same.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从之前的食谱扩展我们的应用程序，并在此基础上继续构建。
- en: How to do it…
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Adding a simple admin interface to any Flask application using the `Flask-Admin`
    extension is just a matter of a couple of statements.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Flask-Admin`扩展将简单的管理员界面添加到任何Flask应用程序中只是一个语句的问题。
- en: 'Simply add the following lines to the application’s configuration in `my_app/__init__.py`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地将以下行添加到应用程序配置的`my_app/__init__.py`中：
- en: '[PRE80]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'You can also add your own views to this; this is as simple as adding a new
    class as a new view that inherits from the `BaseView` class, as shown in the following
    code block. This code block goes in `auth/views.py`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以添加自己的视图；这就像添加一个继承自`BaseView`类的新类作为新视图一样简单，如下面的代码块所示。此代码块位于`auth/views.py`中：
- en: '[PRE81]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'After this, add this view to the `admin` object in the Flask configuration
    in `my_app/__init__.py`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将此视图添加到`my_app/__init__.py`中Flask配置的`admin`对象中：
- en: '[PRE82]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'One thing to notice here is that this page does not have any authentication
    or authorization logic implemented by default, and it will be accessible to all.
    The reason for this is that `Flask-Admin` does not make any assumptions about
    the authentication system in place. As we are using `Flask-Login` for our applications,
    you can add a method named `is_accessible()` to your `HelloView` class:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一点是，此页面默认没有实现任何身份验证或授权逻辑，它将对所有人开放。原因在于`Flask-Admin`对现有的身份验证系统没有任何假设。由于我们正在使用`Flask-Login`为我们的应用程序，您可以在`HelloView`类中添加一个名为`is_accessible()`的方法：
- en: '[PRE83]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: How it works…
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Just initializing an application with the `Admin` class from the `Flask-Admin
    extension`, as demonstrated in the first step of this recipe, will put up a basic
    admin page, as shown in the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 只需像本食谱的第一步所演示的那样，使用`Flask-Admin`扩展中的`Admin`类初始化应用程序，就会显示一个基本的管理员页面，如下面的截图所示：
- en: '![Figure 8.4 – Admin home page using Flask-Admin](img/B19111_08_04.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 – 使用Flask-Admin的管理员主页](img/B19111_08_04.jpg)'
- en: Figure 8.4 – Admin home page using Flask-Admin
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 使用Flask-Admin的管理员主页
- en: Notice the URL in the screenshot, which is `http://127.0.0.1:5000/admin/`. Pay
    special attention to the forward slash (`/`) at the end of the URL. If you miss
    that forward slash, then it would open the web page from the last recipe.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 注意截图中的URL，它是`http://127.0.0.1:5000/admin/`。请特别注意URL末尾的正斜杠（`/`）。如果你错过了这个正斜杠，那么它将打开上一个食谱中的网页。
- en: 'The addition of the custom `HelloView` in the second step will make the admin
    page look like the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二步中添加自定义的`HelloView`会使管理页面看起来如下截图所示：
- en: "![Figure 8.5 – Adding a dummy Hello\uFEFF view](img/B19111_08_05.jpg)"
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5 – 添加一个虚拟的Hello视图](img/B19111_08_05.jpg)'
- en: Figure 8.5 – Adding a dummy Hello view
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – 添加一个虚拟的Hello视图
- en: There’s more…
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'After implementing the preceding code, there is still an admin view that won’t
    be completely user-protected and will be publicly available. This will be the
    admin home page. To make this available only to the admins, we have to inherit
    from `AdminIndexView` and implement `is_accessible()`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现前面的代码之后，仍然有一个行政视图不会完全受到用户保护，并且将是公开可用的。这将是一个行政主页。为了使其仅对管理员可用，我们必须从`AdminIndexView`继承并实现`is_accessible()`：
- en: '[PRE84]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Then, just pass this view to the `admin` object in the application’s configuration
    as `index_view`, and we are done:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，只需将此视图传递到应用程序配置中的`admin`对象，作为`index_view`，我们就完成了：
- en: '[PRE85]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: This approach makes all our admin views accessible only to the admin users.
    We can also implement any permission or conditional access rules in `is_accessible()`
    as and when required.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法使得所有我们的行政视图仅对管理员用户可访问。我们还可以根据需要实现任何权限或条件访问规则在`is_accessible()`中。
- en: Registering models with Flask-Admin
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Flask-Admin注册模型
- en: In the previous recipe, we learned how to get started with the `Flask-Admin`
    extension to create admin interfaces/views for our application. In this recipe,
    we will examine how to implement admin views for our existing models with the
    facilities to perform CRUD operations.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的食谱中，我们学习了如何使用`Flask-Admin`扩展开始创建我们应用程序的行政界面/视图。在本食谱中，我们将检查如何使用执行CRUD操作的功能实现现有模型的行政视图。
- en: Getting ready
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will extend our application from the previous recipe to include an admin
    interface for the `User` model.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从之前的食谱扩展我们的应用程序，包括`User`模型的行政界面。
- en: How to do it…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Again, with `Flask-Admin`, registering a model with the admin interface is
    very easy; perform the following steps:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，使用`Flask-Admin`，将模型注册到行政界面非常简单；执行以下步骤：
- en: 'Just add the following single line of code to `auth/views.py`:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需将以下单行代码添加到`auth/views.py`：
- en: '[PRE86]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Here, in the first line, we imported `ModelView` from `flask_admin.contrib.sqla`,
    which is provided by `Flask-Admin` to integrate SQLAlchemy models.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，在第一行中，我们从`flask_admin.contrib.sqla`中导入了`ModelView`，这是由`Flask-Admin`提供的，用于集成SQLAlchemy模型。
- en: Looking at the screenshot corresponding to the first step in the *How it works…*
    section of this recipe (*Figure 8.6*), most of us will agree that showing the
    password hash to any user, be they an admin or a normal user, does not make sense.
    Additionally, the default model-creation mechanism provided by `Flask-Admin` will
    fail for our `User` creation, because we have an `__init__()` method in our `User`
    model. This method expects values for the three fields (`username`, `password`,
    and `is_admin`), while the model-creation logic implemented in `Flask-Admin` is
    very generic and does not provide any value during model creation.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 观察此食谱中“如何工作…”部分的第一个步骤对应的截图（*图8.6*），我们大多数人都会同意，向任何用户显示密码散列，无论是管理员还是普通用户，都没有意义。此外，`Flask-Admin`提供的默认模型创建机制将无法为我们创建的`User`模型工作，因为我们`User`模型中有一个`__init__()`方法。该方法期望三个字段（`username`、`password`和`is_admin`）的值，而`Flask-Admin`中实现的模型创建逻辑非常通用，在模型创建过程中不提供任何值。
- en: 'Now, customize the default behavior of `Flask-Admin` to something of your own,
    where you fix the `User` creation mechanism and hide the password hash from view
    in `auth/views.py`:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，自定义`Flask-Admin`的默认行为，使其成为你自己的，在`auth/views.py`中修复`User`创建机制并隐藏密码散列：
- en: '[PRE89]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: The preceding code shows some rules and settings that our admin view for `User`
    will follow. These are self-explanatory via their names. A couple of them, `column_exclude_list`
    and `form_excluded_columns`, might appear to be slightly confusing. The former
    will exclude the columns mentioned from the admin view itself and refrain from
    using them in search, creation, and other CRUD operations. The latter will prevent
    the field from being shown on the form for CRUD operations.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码展示了我们的`User`模型admin视图将遵循的一些规则和设置。这些规则通过其名称即可解释。其中一些，如`column_exclude_list`和`form_excluded_columns`可能看起来有些令人困惑。前者将从admin视图中排除所提到的列，并避免在搜索、创建和其他CRUD操作中使用它们。后者将防止字段在CRUD操作的表单中显示。
- en: 'Create a method in `auth/views.py` that overrides the creation of the form
    from the model and adds a `password` field, which will be used in place of the
    password hash:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`auth/views.py`中创建一个方法，覆盖从模型创建表单，并添加一个`password`字段，该字段将用于替代密码散列：
- en: '[PRE100]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Then, override the model-creation logic in `auth/views.py` to suit the application:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，覆盖`auth/views.py`中的模型创建逻辑以适应应用程序：
- en: '[PRE106]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Finally, add this model to the `admin` object in the application config in
    `my_app/__init__.py` by writing the following:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过编写以下代码将此模型添加到应用程序配置中的`admin`对象`my_app/__init__.py`：
- en: '[PRE115]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Information
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: Notice the `self._on_model_change(form, model, True)` statement. Here, the last
    parameter, `True`, signifies that the call is for the creation of a new record.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`self._on_model_change(form, model, True)`语句。在这里，最后一个参数`True`表示调用是为创建新记录。
- en: How it works…
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'The first step will create a new admin view for the `User` model, which will
    look like the following screenshot:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步将创建一个新的`User`模型admin视图，其外观如下截图：
- en: '![Figure 8.6 – List of users without custom logic](img/B19111_08_06.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6 – 没有自定义逻辑的用户列表](img/B19111_08_06.jpg)'
- en: Figure 8.6 – List of users without custom logic
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – 没有自定义逻辑的用户列表
- en: 'After all the steps have been followed, the admin interface for the `User`
    model will look like the following screenshot:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成所有步骤后，`User`模型的admin界面将类似于以下截图：
- en: '![Figure 8.7 – List of users with password hash hidden](img/B19111_08_07.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图8.7 – 隐藏密码散列的用户列表](img/B19111_08_07.jpg)'
- en: Figure 8.7 – List of users with password hash hidden
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 – 隐藏密码散列的用户列表
- en: We have a search box here, and no password hash is visible. There are changes
    to the user creation and edit views too. I recommend that you run the application
    to see this for yourself.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个搜索框，没有显示密码散列。用户创建和编辑视图也有所更改。我建议您运行应用程序亲自查看。
- en: Creating custom forms and actions
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义表单和操作
- en: In this recipe, we will create a custom form using the forms provided by `Flask-Admin`.
    Additionally, we will create a custom action using the custom form.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`Flask-Admin`提供的表单创建一个自定义表单。此外，我们还将使用自定义表单创建一个自定义操作。
- en: Getting ready
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In the previous recipe, we saw that the edit form view for the `User` record
    update had no option to update the password for the user. The form looked like
    the following screenshot:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的菜谱中，我们看到`User`记录更新编辑表单视图没有更新用户密码的选项。表单看起来如下截图：
- en: "![Figure 8.8 – \uFEFFBuilt-in user edit form](img/B19111_08_08.jpg)"
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图8.8 – 内置用户编辑表单](img/B19111_08_08.jpg)'
- en: Figure 8.8 – Built-in user edit form
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8 – 内置用户编辑表单
- en: In this recipe, we will customize this form to allow administrators to update
    the password for any user.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将自定义此表单，允许管理员更新任何用户的密码。
- en: How to do it…
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The implementation of this feature will only require changes to `views.py`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 实现此功能只需修改`views.py`文件：
- en: 'First, start by importing `rules` from the `Flask-Admin` form:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，从`Flask-Admin`表单导入`rules`：
- en: '[PRE117]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: In the previous recipe, we had `form_edit_rules`, which had just two fields
    – that is, `username` and `admin` – as a list. This denoted the fields that will
    be available for editing to the admin user in the `User` model’s update view.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的菜谱中，我们有一个`form_edit_rules`，它只有两个字段 – 即`username`和`admin` – 作为列表。这表示在`User`模型的更新视图中，管理员用户可用的字段。
- en: 'Updating the password is not simply a case of just adding one more field to
    the `form_edit_rules` list; this is because we do not store cleartext passwords.
    Instead, we store password hashes that cannot be edited directly by users. We
    need to input the password from the user and then convert it to a hash while storing.
    Take a look at how to do this in the following code:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新密码不仅仅是将一个字段添加到`form_edit_rules`列表中；这是因为我们不存储明文密码。相反，我们存储用户无法直接编辑的密码散列。我们需要从用户那里输入密码，然后在存储时将其转换为散列。请看以下代码中如何做到这一点：
- en: '[PRE118]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: The preceding piece of code signifies that we now have a header in our form;
    this header separates the password reset section from the rest of the section.
    Then, add two new fields, `new_password` and `confirm`, which will help us safely
    change the password.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段表示我们现在在表单中有一个标题；这个标题将密码重置部分与其他部分分开。然后，添加两个新字段`new_password`和`confirm`，这将帮助我们安全地更改密码。
- en: 'This also calls for a change to the `scaffold_form()` method so that the two
    new fields become valid while form rendering:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这也要求对`scaffold_form()`方法进行更改，以便在表单渲染时两个新字段是有效的：
- en: '[PRE126]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Finally, implement the `update_model()` method, which is called when we try
    to update the record:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，实现`update_model()`方法，该方法在尝试更新记录时被调用：
- en: '[PRE136]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: In the preceding code, we will first make sure that the password entered in
    both fields is the same. If it is, then we will proceed with resetting the password,
    along with any other change.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们首先确保两个字段中输入的密码相同。如果相同，我们将继续重置密码以及任何其他更改。
- en: How it works…
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The user update form will now look like the following screenshot:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 用户更新表单现在将看起来如下截图所示：
- en: '![Figure 8.9 – Custom form with a custom action](img/B19111_08_09.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图8.9 – 带自定义操作的定制表单](img/B19111_08_09.jpg)'
- en: Figure 8.9 – Custom form with a custom action
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9 – 带自定义操作的定制表单
- en: Here, if we enter the same password in both of the password fields, the user
    password will be updated.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果我们同时在两个密码字段中输入相同的密码，用户密码将被更新。
- en: Using a WYSIWYG editor for textarea integration
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WYSIWYG编辑器进行textarea集成
- en: As users of websites, we all know that writing beautifully formatted text using
    the normal `textarea` fields is a nightmare. There are plugins that make our life
    easier and turn simple `textarea` fields into `textarea` fields.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 作为网站用户，我们都知道使用普通的`textarea`字段编写格式化的文本是一个噩梦。有一些插件让我们的工作变得更简单，并将简单的`textarea`字段转换为`textarea`字段。
- en: Getting ready
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We start by adding a new `textarea` field to our `User` model for notes and
    then integrate this field with CKEditor to write formatted text. This will include
    the addition of a JavaScript library and a CSS class to a normal `textarea` field
    to convert this into a CKEditor-compatible `textarea` field.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在我们的`User`模型中添加一个新的`textarea`字段用于笔记，然后将其与CKEditor集成以编写格式化文本。这包括向一个普通的`textarea`字段添加一个JavaScript库和一个CSS类，将其转换为CKEditor兼容的`textarea`字段。
- en: How to do it…
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To integrate CKEditor with your application, perform the following steps:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要将CKEditor集成到你的应用程序中，请执行以下步骤：
- en: 'First, add the `notes` field to the `User` model in `auth/models.py`, as follows:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，按照以下方式在`auth/models.py`中的`User`模型中添加`notes`字段：
- en: '[PRE148]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Important
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: In order to add a new field, you might need to run migration scripts. You can
    refer to the *Migrating databases using Alembic and Flask-Migrate* recipe in [*Chapter
    3*](B19111_03.xhtml#_idTextAnchor129), *Data Modeling in Flask*, for more details.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加一个新字段，你可能需要运行迁移脚本。你可以参考[*第3章*](B19111_03.xhtml#_idTextAnchor129)中关于“使用Alembic和Flask-Migrate迁移数据库”的配方，*Flask中的数据建模*，以获取更多详细信息。
- en: 'After this, create a custom `wtform` widget and a field for the CKEditor `textarea`
    field in `auth/models.py`:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`auth/models.py`中创建一个自定义的`wtform`小部件和一个用于CKEditor `textarea`字段的字段：
- en: '[PRE161]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: In the custom widget in the preceding code, we added a `ckeditor` class to our
    `TextArea` widget. For more insights into the WTForms widgets, you can refer to
    the *Creating a custom widget* recipe in [*Chapter 5*](B19111_05.xhtml#_idTextAnchor273),
    *Web Forms* *with WTForms*.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的自定义小部件中，我们向`TextArea`小部件添加了一个`ckeditor`类。有关WTForms小部件的更多信息，你可以参考[*第5章*](B19111_05.xhtml#_idTextAnchor273)中关于“创建自定义小部件”的配方，*使用WTForms的Web表单*。
- en: 'Next, create a custom field that inherits `TextAreaField` and updates it to
    use the widget created in the previous step:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个继承自`TextAreaField`的自定义字段，并将其更新为使用之前步骤中创建的小部件：
- en: '[PRE167]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: In the custom field in the preceding code, we set the widget to `CKTextAreaWidget`,
    and when this field will be rendered, the `ckeditor` CSS class will be added to
    it.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中的自定义字段中，我们将小部件设置为 `CKTextAreaWidget`，当这个字段被渲染时，将会添加 `ckeditor` CSS 类。
- en: 'Next, modify `form_edit_rules` in the `UserAdminView` class in `auth/views.py`,
    where we specify the template to be used for the `create` and `edit` forms. Additionally,
    override the normal `TextAreaField` object with `CKTextAreaField` for `notes`.
    Make sure that you import `CKTextAreaField` from `auth/models.py`:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改 `auth/views.py` 中的 `UserAdminView` 类中的 `form_edit_rules`，在那里我们指定用于 `create`
    和 `edit` 表单的模板。此外，用 `CKTextAreaField` 替换 `notes` 的正常 `TextAreaField` 对象。确保从 `auth/models.py`
    导入 `CKTextAreaField`：
- en: '[PRE169]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: In the preceding code block, `form_overrides` enables the overriding of a normal
    `textarea` field with the CKEditor `textarea` field.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，`form_overrides` 允许用 CKEditor 的 `textarea` 字段覆盖正常的 `textarea` 字段。
- en: 'The final part of this recipe is the `templates/edit.html` template, which
    was mentioned earlier:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此菜谱的最后一部分是前面提到的 `templates/edit.html` 模板：
- en: '[PRE172]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: /4.20.1/standard/ckeditor.js"></script>
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /4.20.1/standard/ckeditor.js"></script>
- en: '[PRE176]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '{% endblock %}'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{% endblock %}'
- en: '[PRE177]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Here, we extend the default `edit.html` file provided by Flask-Admin and add
    the CKEditor JS file so that our `ckeditor` class in `CKTextAreaField` works.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们扩展了 Flask-Admin 提供的默认 `edit.html` 文件，并添加了 CKEditor JS 文件，以便我们的 `CKTextAreaField`
    中的 `ckeditor` 类能够工作。
- en: How it works…
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'After we have made all the changes, the create user form will look like the
    following screenshot; in particular, notice the **Notes** field:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成所有更改后，创建用户表单将看起来像下面的截图；特别是，注意**笔记**字段：
- en: '![Figure 8.10 – Notes field created using a WYSIWYG editor](img/B19111_08_10.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10 – 使用 WYSIWYG 编辑器创建的笔记字段](img/B19111_08_10.jpg)'
- en: Figure 8.10 – Notes field created using a WYSIWYG editor
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – 使用 WYSIWYG 编辑器创建的笔记字段
- en: Here, anything entered in the **Notes** field will be automatically formatted
    in HTML while saving and can be used anywhere later for display purposes.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，输入到**笔记**字段中的任何内容在保存时都会自动格式化为 HTML，并且以后可以在任何地方用于显示目的。
- en: See also
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: This recipe is inspired by the **gist** by the author of Flask-Admin. The gist
    can be found at [https://gist.github.com/mrjoes/5189850](https://gist.github.com/mrjoes/5189850).
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱受到了 Flask-Admin 作者的 **gist** 的启发。该 gist 可在[https://gist.github.com/mrjoes/5189850](https://gist.github.com/mrjoes/5189850)找到。
- en: You can also choose to directly use the Flask-CKEditor extension, which can
    be found at [https://flask-ckeditor.readthedocs.io/en/latest/](https://flask-ckeditor.readthedocs.io/en/latest/).
    I have not used the extension because I wanted to demonstrate the concept from
    a lower level.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以选择直接使用 Flask-CKEditor 扩展，该扩展可在[https://flask-ckeditor.readthedocs.io/en/latest/](https://flask-ckeditor.readthedocs.io/en/latest/)找到。我没有使用这个扩展，因为我想要从较低级别演示这个概念。
- en: Creating user roles
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户角色
- en: So far, we have discovered how a view that is accessible to a certain set of
    admin users can be created easily using the `is_accessible()` method. This can
    be extended to have different kinds of scenarios, where specific users will be
    able to view specific views. There is another way of implementing user roles at
    a much more granular level in a model, where the roles determine whether a user
    can perform all, some, or any of the CRUD operations.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经发现如何使用 `is_accessible()` 方法轻松创建一组特定管理员用户可访问的视图。这可以扩展到不同的场景，其中特定的用户将能够查看特定的视图。在模型中，还有另一种在更细粒度级别实现用户角色的方法，其中角色决定了用户能否执行所有、一些或任何
    CRUD 操作。
- en: Getting ready
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will explore a basic way of creating user roles, where an
    admin user can only perform actions they are entitled to.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探索创建用户角色的基本方法，其中管理员用户只能执行他们有权执行的操作。
- en: Information
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: Remember that this is just one way of implementing user roles. There are a number
    of better ways of doing this, but this one appears to be the best one to demonstrate
    the concept of creating user roles. One such method would be to create user groups
    and assign roles to the groups, rather than individual users. Another method can
    be the more complex policy-based user roles, which will include defining the roles
    according to complex business logic. This approach is usually employed by business
    systems such as ERP, CRM, and more.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，这只是实现用户角色的一种方式。还有许多更好的方法来做这件事，但这种方法似乎是最好的，可以展示创建用户角色的概念。一种方法可以是创建用户组并将角色分配给组，而不是单个用户。另一种方法可以是更复杂的基于策略的用户角色，这将包括根据复杂的业务逻辑定义角色。这种方法通常由ERP、CRM等商业系统采用。
- en: How to do it…
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'To add basic user roles to the application, perform the following steps:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 要向应用程序添加基本用户角色，请执行以下步骤：
- en: 'First, add a field named `roles` to the `User` model in `auth/models.py`, as
    follows:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`auth/models.py`中的`User`模型中添加一个名为`roles`的字段，如下所示：
- en: '[PRE178]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Here, we added a new field, `roles`, which is a string field with a length of
    `4`. We assumed that the only entries that are possible in this field are any
    combinations of `C`, `R`, `U`, and `D`. A user with the `roles` value as `CRUD`
    will have permission to perform all the actions, while any missing permissions
    will prevent the user from performing that action. Note that read permissions
    are always implied to any admin user, whether specified or not.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了一个新的字段，`roles`，它是一个长度为`4`的字符串字段。我们假设在这个字段中可能出现的条目是`C`、`R`、`U`和`D`的任何组合。具有`roles`值为`CRUD`的用户将有权执行所有操作，而任何缺失的权限将阻止用户执行该操作。请注意，读取权限始终隐含于任何管理员用户，无论是否指定。
- en: Important
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: In order to add a new field, you might need to run migration scripts. You can
    refer to the *Migrating databases using Alembic and Flask-Migrate* recipe in [*Chapter
    3*](B19111_03.xhtml#_idTextAnchor129), *Data Modeling in Flask*, for more details.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加新字段，你可能需要运行迁移脚本。你可以参考[*第3章*](B19111_03.xhtml#_idTextAnchor129)中关于使用Alembic和Flask-Migrate迁移数据库的配方，即*在Flask中进行数据建模*，以获取更多详细信息。
- en: 'Next, make some changes to the `UserAdminView` class in `auth/views.py`:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，对`auth/views.py`中的`UserAdminView`类进行一些修改：
- en: '[PRE193]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: In the preceding code, we just added the `roles` field to our `create` and `edit`
    forms. We also inherited a class called `ActionsMixin`. This is necessary to handle
    the mass update actions such as mass deletion.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的代码中，我们只是将`roles`字段添加到我们的`create`和`edit`表单中。我们还继承了一个名为`ActionsMixin`的类。这是处理如批量删除等批量更新操作所必需的。
- en: 'Next, we have the methods that we need to implement conditions and handle the
    logic for various roles:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们有需要实现条件并处理各种角色逻辑的方法：
- en: 'First is the method that handled the creation of a model:'
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先是处理模型创建的方法：
- en: '[PRE204]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: In the preceding method, we first checked whether the `roles` field in `current_user`
    has permission to create records (this is denoted by `C`). If not, we show an
    error message and return from the method.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的方法中，我们首先检查`current_user`中的`roles`字段是否有权限创建记录（这表示为`C`）。如果没有，我们显示错误消息并从方法中返回。
- en: 'Next is the method that would handle the update:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是处理更新的方法：
- en: '[PRE218]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: In the preceding method, we first checked whether the `roles` field in `current_user`
    has permission to update records (this is denoted by `U`). If not, we show an
    error message and return from the method.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的方法中，我们首先检查`current_user`中的`roles`字段是否有权限更新记录（这表示为`U`）。如果没有，我们显示错误消息并从方法中返回。
- en: 'The next method handles the deletion:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个方法处理删除操作：
- en: '[PRE219]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: Similarly, in the preceding method, we checked whether `current_user` is allowed
    to delete records.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在先前的方法中，我们检查了`current_user`是否有权限删除记录。
- en: 'Finally, the need to check for relevant roles and permission is addressed:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，解决了检查相关角色和权限的需求：
- en: '[PRE220]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: In the preceding method, we checked whether the action is `delete` and whether
    `current_user` is allowed to delete. If not, then we flash the error message and
    return a `False` value. This method can be extended to handle any custom-written
    actions too.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的方法中，我们检查操作是否为`delete`以及`current_user`是否有权限删除。如果没有，则显示错误消息并返回一个`False`值。此方法可以扩展以处理任何自定义编写的操作。
- en: How it works…
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe works in a manner that is very similar to how our application has
    been working so far, except for the fact that, now, users with designated roles
    will be able to perform specific operations. Otherwise, error messages will be
    displayed.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的工作方式与我们的应用程序到目前为止的工作方式非常相似，除了现在，具有指定角色的用户将能够执行特定操作。否则，将显示错误信息。
- en: 'The user list will now look like the following screenshot:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 用户列表现在将看起来如下截图所示：
- en: '![Figure 8.11 – Admin role assigned to users](img/B19111_08_11.jpg)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![图8.11 – 分配给用户的管理员角色](img/B19111_08_11.jpg)'
- en: Figure 8.11 – Admin role assigned to users
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11 – 分配给用户的管理员角色
- en: To test the rest of the functionality, such as creating new users (both normal
    and admin), deleting users, updating user records, and more, I urge you to try
    it for yourself.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试其余的功能，例如创建新用户（包括普通用户和管理员），删除用户，更新用户记录等，我强烈建议您亲自尝试一下。
