- en: Chapter 10 – Unit testing with the Python standard library
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第10章 - 使用Python标准库进行单元测试
- en: When we build programs of even minor complexity, there are countless ways for
    defects to creep into our code. This can happen when we initially write the code,
    but we’re just as likely to introduce defects when we make modifications to it.
    To help get a handle on defects and keep our code quality high, it’s often very
    useful to have a set of tests that you can run that will tell if you if the code
    is acting as you expect.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们构建甚至是轻微复杂的程序时，代码中会有无数种缺陷的方式。这可能发生在我们最初编写代码时，但当我们对其进行修改时，我们同样有可能引入缺陷。为了帮助掌握缺陷并保持代码质量高，拥有一组可以运行的测试通常非常有用，这些测试可以告诉您代码是否按照您的期望行事。
- en: To help make such tests, the Python standard library includes the [`unittest`
    module](https://docs.python.org/3/library/unittest.html). Despite what its name
    suggests, this module helps with more than just unit testing. It is, in fact,
    a flexible framework for automating tests of all sorts, from acceptance tests
    to integration tests to unit tests. Its key feature, like many testing frameworks
    in many languages, is that it helps you make *automated* and *repeatable* tests.
    With tests like these, you can cheaply and easily verify the behavior of your
    code at any time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助进行这样的测试，Python标准库包括[`unittest`模块](https://docs.python.org/3/library/unittest.html)。尽管其名称暗示了它只有单元测试，但实际上，这个模块不仅仅用于单元测试。事实上，它是一个灵活的框架，可以自动化各种测试，从验收测试到集成测试再到单元测试。它的关键特性，就像许多语言中的许多测试框架一样，是帮助您进行*自动化*和*可重复*的测试。有了这样的测试，您可以在任何时候廉价且轻松地验证代码的行为。
- en: Test cases
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试用例
- en: The `unittest` module is built around a handful of key concepts, at the center
    of which is the notion of a *test case*. A test case — embodied in the [`unittest.TestCase`
    class](https://docs.python.org/3/library/unittest.html#unittest.TestCase) — groups
    together a set of related test methods, and it is the basic unit of test organization
    in the `unittest` framework. The individual test methods, as we’ll see later,
    are implemented as methods on a `unittest.TestCase` subclass.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`unittest`模块围绕着一些关键概念构建，其中心是*测试用例*的概念。测试用例 - 体现在[`unittest.TestCase`类](https://docs.python.org/3/library/unittest.html#unittest.TestCase)中
    - 将一组相关的测试方法组合在一起，它是`unittest`框架中的测试组织的基本单元。正如我们稍后将看到的，单个测试方法是作为`unittest.TestCase`子类上的方法实现的。'
- en: Fixtures
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 固定装置
- en: 'The next important concept is that of *fixtures*. Fixtures are pieces of code
    which run before and/or after every test method. Fixtures serve two main purposes:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个重要概念是*固定装置*。固定装置是在每个测试方法之前和/或之后运行的代码片段。固定装置有两个主要目的：
- en: '*Set-up* fixtures ensure that the test environment is in an expected state
    before a test is run.'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*设置*固定装置确保测试环境在运行测试之前处于预期状态。'
- en: '*Tear-down* fixtures clean up the environment after a test has been run, generally
    by freeing up resources.'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*清理*固定装置在测试运行后清理环境，通常是通过释放资源。'
- en: For example, a set-up fixture might create a specific entry in a database prior
    to running a test. Similarly, a tear-down fixture might remove database entries
    created by a test. Fixtures are not required for tests, but they are very common,
    and they are often critical for making tests repeatable.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，设置固定装置可能在运行测试之前在数据库中创建特定条目。类似地，拆卸固定装置可能会删除测试创建的数据库条目。测试不需要固定装置，但它们非常常见，通常对于使测试可重复至关重要。
- en: Assertions
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 断言
- en: 'The final key concept is that of *assertions*. Assertions are specific checks
    inside test methods which ultimately determine whether a test passes or fails.
    Among other things, assertions can:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的关键概念是*断言*。断言是测试方法中的特定检查，最终决定测试是否通过或失败。除其他事项外，断言可以：
- en: make simple boolean checks
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行简单的布尔检查
- en: perform object equality tests
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行对象相等性测试
- en: verify that the proper exceptions are thrown
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证是否抛出了适当的异常
- en: If an assertion fails, then a test method fails, so assertions represent the
    lowest level of testing you can perform. You can find a [full list of assertions
    in the `unittest` documentation](https://docs.python.org/3/library/unittest.html#assert-methods).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果断言失败，那么测试方法也会失败，因此断言代表了您可以执行的最低级别的测试。您可以在`unittest`文档中找到[断言的完整列表](https://docs.python.org/3/library/unittest.html#assert-methods)。
- en: 'Unit testing example: text analysis'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单元测试示例：文本分析
- en: 'With those concepts in mind, let’s see how we can actually use the `unittest`
    module in practice. For this example, we’ll use *test-driven development*^([29](chap21.xhtml#fn-test-driven-development))
    to write a simple text-analysis function. This function will take a file name
    as its only parameter. It will then read that file and calculate:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些概念，让我们看看如何实际在实践中使用`unittest`模块。在这个例子中，我们将使用*测试驱动开发*^([29](chap21.xhtml#fn-test-driven-development))来编写一个简单的文本分析函数。这个函数将以文件名作为唯一参数。然后它将读取该文件并计算：
- en: the number of lines in the file
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件中的行数
- en: the number of characters in the file
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件中的字符数
- en: 'TDD is an iterative development process, so rather than work at the REPL we’ll
    put the code for our tests in a file named `text_analyzer.py`. To start with,
    we’ll create our first test^([30](chap21.xhtml#fn-no-actual-test)) with just enough
    supporting code to actually run it:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: TDD是一个迭代的开发过程，因此我们不会在REPL上工作，而是将我们的测试代码放在一个名为`text_analyzer.py`的文件中。首先，我们将创建我们的第一个测试^([30](chap21.xhtml#fn-no-actual-test))，并提供足够的支持代码来实际运行它。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Ths first thing we do is import the `unittest` module. We then create our test
    case by defining a class – `TextAnalysisTests` – which derives from `unittest.TestCase`.
    This is how you create test cases with the `unittest` framework.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入`unittest`模块。然后，我们通过定义一个从`unittest.TestCase`派生的类`TextAnalysisTests`来创建我们的测试用例。这是您使用`unittest`框架创建测试用例的方法。
- en: To define individual test methods in a test case, you simply create methods
    on your `TestCase` subclasses that start with “`test_`”. The `unittest` framework
    automatically discovers methods like this at execution time, so you don’t need
    to explicitly register your test methods.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要在测试用例中定义单独的测试方法，只需在`TestCase`子类上创建以“`test_`”开头的方法。`unittest`框架在执行时会自动发现这样的方法，因此您不需要显式注册您的测试方法。
- en: 'In this case we define the simplest possible test: we check whether the `analyze_text()`
    function runs at all! Our test doesn’t make any explicit checks, but rather it
    relies on the fact that a test method will fail if it throws any exceptions. In
    this case, our test will fail if `analyze_text()` isn’t defined.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们定义了最简单的测试：我们检查`analyze_text()`函数是否运行！我们的测试没有进行任何明确的检查，而是依赖于测试方法如果抛出任何异常则会失败的事实。在这种情况下，如果`analyze_text()`没有被定义，我们的测试将失败。
- en: Finally, we define the idiomatic “main” block which calls `unittest.main()`
    when this module is executed. `unittest.main()` will search for all `TestCase`
    subclasses in a module and execute all of their test methods.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们定义了惯用的“main”块，当这个模块被执行时调用`unittest.main()`。`unittest.main()`将在模块中搜索所有的`TestCase`子类，并执行它们所有的测试方法。
- en: Running the initial tests
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行初始测试
- en: 'Since we’re using test-driven design, we expect our tests to fail at first^([31](chap21.xhtml#fn-tdd-fail-edit-pass)).
    And indeed our test fails spectacularly for the simple reason that we haven’t
    yet defined `analyze_text()`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用测试驱动设计，我们期望我们的测试一开始会失败。事实上，我们的测试失败了，原因很简单，我们还没有定义`analyze_text()`：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, `unittest.main()` produces a simple report telling us how many
    tests were run and how many failed. It also shows us *how* the tests failed, in
    this case showing us that we got a `NameError` when we tried to run the non-existent
    function `analyze_text()`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`unittest.main()`生成了一个简单的报告，告诉我们运行了多少个测试，有多少个失败了。它还向我们展示了测试是如何失败的，比如在我们尝试运行不存在的函数`analyze_text()`时，它告诉我们我们得到了一个`NameError`。
- en: Making the test pass
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使测试通过
- en: 'Let’s fix our failing test by defining `analyze_text()`. Remember that in test-driven
    development we only write enough code to satisfy our tests, so all we do right
    now is create an empty function. For simplicity’s sake we’ll put this function
    in `text_analyzer.py`, though normally your test code and implementation code
    will be in different modules:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过定义`analyze_text()`来修复我们失败的测试。请记住，在测试驱动开发中，我们只编写足够满足测试的代码，所以现在我们只是创建一个空函数。为了简单起见，我们将把这个函数放在`text_analyzer.py`中，尽管通常你的测试代码和实现代码会在不同的模块中：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Put this function at module scope. Running the test again, we find that they
    now pass:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个函数放在模块范围。再次运行测试，我们发现它们现在通过了：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We’ve completed a single TDD cycle, but of course our code doesn’t really do
    anything yet. We’ll iteratively improve our tests and implementation to arrive
    at a real solution.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了一个TDD周期，但当然我们的代码还没有真正做任何事情。我们将迭代地改进我们的测试和实现，以得到一个真正的解决方案。
- en: Using fixtures to create temporary files
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用固定装置创建临时文件
- en: The next thing want to do is be able to pass a filename to `analyze_text()`
    so that it knows what to process. Of course, for `analyze_text()` to work this
    filename should refer to a file that actually exists! To make sure that a file
    exists for our tests, we’re going to define some fixtures.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要做的事情是能够向`analyze_text()`传递一个文件名，以便它知道要处理什么。当然，为了让`analyze_text()`工作，这个文件名应该指的是一个实际存在的文件！为了确保我们的测试中存在一个文件，我们将定义一些固定装置。
- en: 'The first fixture we can define is the method `TestCase.setUp()`. If defined,
    this method is run before each test method in the `TestCase`. In this case, we’ll
    use `setUp()` to create a file for us and remember the filename as a member of
    the `TestCase`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义的第一个固定装置是`TestCase.setUp()`方法。如果定义了，这个方法会在`TestCase`中的每个测试方法之前运行。在这种情况下，我们将使用`setUp()`为我们创建一个文件，并将文件名记住为`TestCase`的成员：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The second fixture available to us is `TestCase.tearDown()`.^([32](chap21.xhtml#fn-unittest-naming-conventions))
    The `tearDown()` method is run after each test method in the `TestCase`, and in
    this case we’re going to use it to delete the file we created in `setUp()`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用的第二个固定装置是`TestCase.tearDown()`。`tearDown()`方法在`TestCase`中的每个测试方法之后运行，在这种情况下，我们将使用它来删除在`setUp()`中创建的文件：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that since we’re using the `os` module in `tearDown()` we need to import
    it at the top of the file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于我们在`tearDown()`中使用了`os`模块，我们需要在文件顶部导入它。
- en: Also notice how `tearDown()` swallows any exceptions thrown by `os.remove()`.
    We do this because `tearDown()` can’t actually be certain that the file exists,
    so it tries to remove the file and assumes that any exception can safely be ignored.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意`tearDown()`如何吞没了`os.remove()`抛出的任何异常。我们这样做是因为`tearDown()`实际上不能确定文件是否存在，所以它尝试删除文件，并假设任何异常都可以安全地被忽略。
- en: Using the new fixtures
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用新的固定装置
- en: 'With our two fixtures in place, we now have a file that is created before each
    test method and which is deleted after each test method. This means that each
    test method is starting in a stable, known state. This is critical to making reproducible
    tests. Let’s pass this filename to `analyze_text()` by modifying our existing
    test:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们的两个固定装置，我们现在每个测试方法之前都有一个文件被创建，并且在每个测试方法之后都被删除。这意味着每个测试方法都是从一个稳定的、已知的状态开始的。这对于制作可重复的测试是至关重要的。让我们通过修改现有的测试将这个文件名传递给`analyze_text()`：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Remember that our `setUp()` stored the filename on `self.filename`. Since the
    `self` argument passed to the fixtures is the same instance as that passed to
    the test methods, our test can access the filename using that attribute.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 记住我们的`setUp()`将文件名存储在`self.filename`上。由于传递给固定装置的`self`参数与传递给测试方法的实例相同，我们的测试可以使用该属性访问文件名。
- en: 'Of course, when we run our test we see that this test fails because `analyze_text()`
    doesn’t accept any arguments yet:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行我们的测试时，我们发现这个测试失败了，因为`analyze_text()`还没有接受任何参数：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can fix this by adding a parameter to `analyze_text()`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向`analyze_text()`添加一个参数来修复这个问题：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And if we run our tests again, we see that we’re once again passing:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次运行我们的测试，我们会再次通过：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We still don’t have an implementation that does anything useful, but you can
    start to see how the tests drive the implementation.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然没有一个做任何有用事情的实现，但你可以开始看到测试如何驱动实现。
- en: Using assertions to test behavior
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用断言来测试行为
- en: 'Now that we’re satisfied that `analyze_text()` exists and accepts the right
    number of arguments, let’s see if we can make it do real work. The first thing
    we want is for the function to return the number of lines in the file, so let’s
    define that test:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们满意`analyze_text()`存在并接受正确数量的参数，让我们看看是否可以让它做真正的工作。我们首先想要的是函数返回文件中的行数，所以让我们定义那个测试：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here we see our first example of an assertion. The `TestCase` class has [many
    assertion methods](https://docs.python.org/3/library/unittest.html#assert-methods),
    and in this case we used `assertEqual()` to check that the number of lines counted
    by our function is equal to four. If the value returned by `analyze_text()` is
    not equal to four, this assertion will cause the test method to fail. And if we
    run our new test, we see that this is precisely what happens:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们看到了我们的第一个断言示例。`TestCase`类有[许多断言方法](https://docs.python.org/3/library/unittest.html#assert-methods)，在这种情况下，我们使用`assertEqual()`来检查我们的函数计算的行数是否等于四。如果`analyze_text()`返回的值不等于四，这个断言将导致测试方法失败。如果我们运行我们的新测试，我们会看到这正是发生的：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here we see that we’re now running two tests, that one of them passes, and that
    the new one fails with an `AssertionError`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们看到我们现在运行了两个测试，其中一个通过了，而新的一个失败了，出现了`AssertionError`。
- en: Counting lines
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 计算行数
- en: 'Let’s break from the TDD rules and move a bit faster now. First we’ll update
    the function to return the number of lines in the file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们暂时违反TDD规则，加快一点速度。首先我们将更新函数以返回文件中的行数：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This change indeed gives us the results we want ^([33](chap21.xhtml#fn-bypassing-tdd)):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个改变确实给了我们想要的结果^([33](chap21.xhtml#fn-bypassing-tdd))：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Counting characters
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 计算字符
- en: 'So let’s add a test for the other feature we want, which is to count the number
    of characters in the file. Since `analyze_text()` is now supposed to return two
    values, we’ll have it return a tuple with line count in the first position and
    character count in the second. Our new test looks like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们添加一个我们想要的另一个功能的测试，即计算文件中字符的数量。由于`analyze_text()`现在应该返回两个值，我们将它返回一个元组，第一个位置是行数，第二个位置是字符数。我们的新测试看起来像这样：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And it fails as expected:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 并且如预期的那样失败了：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This result is telling us that it can’t index into the integer returned by
    `analyze_text()`. So let’s fix `analyze_text()` to return the proper tuple:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结果告诉我们它无法索引`analyze_text()`返回的整数。所以让我们修复`analyze_text()`以返回正确的元组：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This fixes our new test, but we find we’ve broken an old one:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这修复了我们的新测试，但我们发现我们破坏了旧的测试：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Fortunately that’s easy enough to fix because all we need to do is account
    for the new return type in our earlier test:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这很容易修复，因为我们只需要在早期的测试中考虑新的返回类型：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now everything is passing again:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切又通过了：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Testing for exceptions
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试异常
- en: 'Another thing we want to test for is that `analyze_text()` raises the correct
    exception when it is passed a non-existent file name, which we can test like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还想测试的另一件事是，当`analyze_text()`传递一个不存在的文件名时，它会引发正确的异常，我们可以这样测试：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here we use the `TestCase.assertRaises()` assertion. This assertion checks that
    the specified exception type — in this case `IOError` — is thrown from the body
    of the with-block.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了`TestCase.assertRaises()`断言。这个断言检查指定的异常类型——在这种情况下是`IOError`——是否从with块的主体中抛出。
- en: 'Since `open()` raises `IOError` for non-existent files, our test already passes
    with no further implementation:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`open()`对于不存在的文件引发`IOError`，我们的测试已经通过，无需进一步实现：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Testing for file existence
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试文件是否存在
- en: 'Finally, we can see one more very useful type of assertion by writing a test
    to verify that `analyze_text()` doesn’t delete the file — a reasonable requirement
    for the function!:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过编写一个测试来验证`analyze_text()`不会删除文件——这是对函数的合理要求！：
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`TestCase.assertTrue()` checks that the value passed to it evaluates to `True`.
    There is an equivalent `assertFalse()` which does the same test for false values.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestCase.assertTrue()` 检查传递给它的值是否评估为`True`。还有一个等效的`assertFalse()`，它对false值进行相同的测试。'
- en: 'As you probably expect, this test passes already as well:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能期望的那样，这个测试已经通过了：
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: So now we’ve got a useful, passing set of tests! This example is small, but
    it demonstrates many of the important parts of the `unittest` module. There are
    [many more parts to the `unittest` module](https://docs.python.org/3/library/unittest.html),
    but you can get quite far using just the techniques we’ve seen here.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们有了一个有用的、通过的测试集！这个例子很小，但它演示了`unittest`模块的许多重要部分。`unittest`模块还有[更多的部分](https://docs.python.org/3/library/unittest.html)，但是你可以通过我们在这里看到的技术走得很远。
- en: '* * *'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Moment of zen
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禅宗时刻
- en: '![](images/m10----zen-in-the-face-of-ambiguity-refuse-the-temptation-to-guess.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](images/m10----zen-in-the-face-of-ambiguity-refuse-the-temptation-to-guess.png)'
- en: The temptation to guess, or to ignore ambiguity with wishful thinking, can lead
    to short term gains. But it can often lead to confusion in the future, and to
    bugs which are difficult to understand and fix. Before you make that next quick
    fix, ask yourself what information you need to do it correctly.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 猜测的诱惑，或者用一厢情愿的想法忽略模棱两可，可能会带来短期收益。但它往往会导致未来的混乱，以及难以理解和修复的错误。在进行下一个快速修复之前，问问自己需要什么信息才能正确地进行操作。
- en: '* * *'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: The `unittest` module is a framework for developing reliable automated tests.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unittest`模块是一个开发可靠自动化测试的框架。'
- en: You define *test cases* by subclassing from `unittest.TestCase`.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过从`unittest.TestCase`继承来定义*测试用例*。
- en: The `unittest.main()` function is useful for running all of the tests in a module.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unittest.main()`函数对于运行模块中的所有测试非常有用。'
- en: The `setUp()` and `tearDown()` fixtures are used to run code before and after
    each test method.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setUp()`和`tearDown()`装置用于在每个测试方法之前和之后运行代码。'
- en: Test methods are defined by creating method names that start with `test_` on
    test case objects.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试方法是通过在测试用例对象上创建以`test_`开头的方法名称来定义的。
- en: The various `TestCase.assert...` methods can be used to make a test method fail
    when the right conditions aren’t met.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种`TestCase.assert...`方法可用于在不满足正确条件时使测试方法失败。
- en: Use `TestCase.assertRaises()` in a with-statement to check that the right exceptions
    are thrown in a test.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`TestCase.assertRaises()`在with语句中检查测试中是否抛出了正确的异常。
