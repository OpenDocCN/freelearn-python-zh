- en: 'Chapter 5: Separating Communication in Rooms'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章：在房间中分离通信
- en: Channels allow us to broadcast, send, and receive asynchronous messages to/from
    all clients that belong to a group. Within a group, we cannot filter a selection
    of users. To solve this problem and create a division or categories, we must resort
    to creating new Channels and manually grouping the clients.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通道允许我们向属于一个组的所有客户端广播、发送和接收异步消息。在组内，我们无法筛选用户。为了解决这个问题并创建分区或类别，我们必须求助于创建新的通道并手动分组客户端。
- en: So far, we can communicate with a customer who is isolated in a Channel or with
    all the customers connected to a common Channel. Now, it is time to learn how
    to control groups/Channels to separate and move customers between different groups
    as needed. You can even assign the same customer to several groups at the same
    time. For example, if we are creating a Chat, it would be useful for the user
    to be subscribed to a unique Channel to receive notifications, as well as another
    public group where all the customers can write freely, and other private groups
    where they can have conversations with other users. It makes sense for a client
    to receive or send different messages from various groups for different purposes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们可以与被隔离在通道中的客户或与连接到公共通道的所有客户进行通信。现在，是时候学习如何控制组/通道，以便根据需要在不同组之间分离和移动客户了。你甚至可以将同一客户同时分配到几个组中。例如，如果我们正在创建聊天，用户订阅一个独特的通道以接收通知，以及另一个所有客户都可以自由写作的公共组，还有其他私人组，他们可以在其中与其他用户进行对话，这很有意义。对于客户端来说，从不同的组以不同的目的接收或发送不同的消息是有意义的。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Basic functions for managing Channels
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理通道的基本功能
- en: Creating a full Chat
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建完整的聊天
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can download the code for this chapter from this book’s GitHub repository:
    [https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-5](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-5).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从本书的GitHub仓库下载本章的代码：[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-5](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-5)。
- en: 'We will be using the template we constructed in [*Chapter 4*](B18321_04_ePub.xhtml#_idTextAnchor090)*,
    Working with the Database*: [https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们在[*第四章*](B18321_04_ePub.xhtml#_idTextAnchor090)*，与数据库一起工作*中构建的模板：[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template)
- en: 'I have changed the name of the application to Chat. Ensure that the `App` folder
    is called `/app/chat/` and that `apps.py` has been renamed with its `name` variable:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我已将应用程序的名称更改为Chat。确保`App`文件夹名为`/app/chat/`，并且`apps.py`已重命名，其`name`变量：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you rename an application, you must reflect this in `/project_template/settings.py`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你重命名了一个应用程序，你必须反映在`/project_template/settings.py`中：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'I have also changed the name of the Consumer to `ChatConsumer`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我也将消费者的名称更改为`ChatConsumer`：
- en: '[PRE14]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In `project_template/urls.py`, you must change the View import:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在`project_template/urls.py`中，你必须更改视图导入：
- en: '[PRE16]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In `Caddyfile`, change the domain from `hello.localhost` to `chat.localhost`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Caddyfile`中，将域名从`hello.localhost`更改为`chat.localhost`：
- en: '[PRE17]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, remember that whenever you change the name of the Consumer, you must
    modify `/project_template/asgi.py`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请记住，每次你更改消费者的名称时，都必须修改`/project_template/asgi.py`：
- en: '[PRE19]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: With the template in place, we can now start the project, which will involve
    creating a Chat tool.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板就绪后，我们现在可以开始项目，这将涉及创建一个聊天工具。
- en: We will prepare the database with a model and generate some random users. However,
    before we continue, we must know about the functions that Channels provide for
    sending information to customers or for managing groups.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用模型准备数据库并生成一些随机用户。然而，在我们继续之前，我们必须了解通道为向客户发送信息或管理组提供的功能。
- en: Basic functions for managing Channels
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理通道的基本功能
- en: 'The basic functions for managing Channels are as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 管理通道的基本功能如下：
- en: '`send()`: This is used to send new messages from the Consumer to a single client.
    We have used this function from the beginning of this book. However, we used the
    `JsonWebsocketConsumer` wrapper to make `send_json()` more convenient for sending
    JSON:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`send()`: 这个函数用于从消费者向单个客户端发送新消息。我们从本书的开头就使用了这个函数。然而，我们使用了`JsonWebsocketConsumer`包装器来使`send_json()`在发送JSON时更加方便：'
- en: '[PRE24]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`group_send()`: This is used to send new messages from the Consumer to a group
    of clients that we have previously defined. It is an asynchronous function, so
    we will need the whole Consumer to be asynchronous or, preferably, use the `async_to_sync`
    function. In the following example, you can see how the `{"my_data": "hi"}` JSON
    is sent to the whole group as `"Main"`:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group_send()`: 这个函数用于从消费者向之前定义的客户端群组发送新消息。它是一个异步函数，因此我们需要整个消费者都是异步的，或者最好使用`async_to_sync`函数。在下面的示例中，你可以看到`{"my_data":
    "hi"}` JSON是如何作为`"Main"`发送给整个群组的：'
- en: '[PRE25]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`group_add()`: This is used to add a client to a new or existing group. The
    function is also asynchronous, so we will use `async_to_sync` again. In the following
    example, we are adding `(self.channel_name)` to a group called `"Main"`:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group_add()`: 这个函数用于将客户端添加到新的或现有的群组中。该函数也是异步的，因此我们将再次使用`async_to_sync`。在下面的示例中，我们将`(self.channel_name)`添加到名为`"Main"`的群组中：'
- en: '[PRE26]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`group_discard()`: This is used to remove a client from a group. Again, this
    is an asynchronous function, so we are forced to use `async_to_sync`. In this
    example, we have removed `(self.channel_name)` from a group called `"Main"`:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group_discard()`: 这个函数用于从群组中移除一个客户端。同样，这也是一个异步函数，因此我们被迫使用`async_to_sync`。在这个示例中，我们已经从名为`"Main"`的群组中移除了`(self.channel_name)`：'
- en: '[PRE27]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'With these functions, we can now dominate the world, or at least the world
    of real time. They are ideal for building a complete chat. And... why don’t we
    compete with WhatsApp or Slack? They have hundreds of the best engineers, but
    we’ll use Django here: it’s a balanced fight. We will create a piece of software
    that will use the full potential of Channels to manage different groups with the
    following features:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些功能，我们现在可以统治世界，或者至少是实时世界的世界。它们非常适合构建一个完整的聊天系统。而且...我们为什么不去与WhatsApp或Slack竞争呢？他们有成百上千位最优秀的工程师，但我们将在这里使用Django：这是一场势均力敌的战斗。我们将创建一个软件，它将充分利用Channels的潜力来管理具有以下功能的多个群组：
- en: Group and public messages with no limit regarding the number of clients
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无限制客户端数量的群组和公开消息
- en: Private messages that can be sent between two clients
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在两个客户端之间发送的私人消息
- en: Control over connected or disconnected clients
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制已连接或断开连接的客户端
- en: Registered users can be identified
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以识别注册用户
- en: If we add the functions of Channels to those of Django, we will see that we
    have everything we need to manage the information and connect to the database.
    However, we need to learn about a few important details before connecting to Django’s
    models. How can we isolate users?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将Channels的功能与Django的功能结合起来，我们会发现我们拥有管理信息和连接到数据库所需的一切。然而，在连接到Django的模型之前，我们需要了解一些重要的细节。我们如何隔离用户？
- en: Creating a full Chat
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个完整的聊天系统
- en: A very popular exercise when implementing WebSockets in any technology is to
    create a simple Chat. However, the difficulty increases considerably when we have
    several connected clients who are going to talk in private spaces and open groups
    so that any client can read or participate. Using Channels, we are creating a
    solid enough abstraction so that we can focus on other issues.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何技术中实现WebSockets时，一个非常流行的练习是创建一个简单的聊天系统。然而，当有多个连接的客户端将在私人空间和公开群组中交谈，并且任何客户端都可以阅读或参与时，难度会大大增加。使用Channels，我们正在创建足够的抽象，以便我们可以专注于其他问题。
- en: 'Let’s create a Chat complete with modern features:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个具有现代功能的完整聊天系统：
- en: Message history
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息历史
- en: Private conversations
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私人对话
- en: Groups
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 群组
- en: Customers associated with a registered user in the database
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与数据库中注册用户关联的客户
- en: Next, we must define the database. We will define the models for users, rooms,
    and messages. That way, we will be able to store the actions of each user and
    there will be a record of everything that happens.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须定义数据库。我们将定义用户、房间和消息的模型。这样，我们就能存储每个用户的操作，并且会有关于所发生一切的记录。
- en: Defining the database
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义数据库
- en: In this section, we are going to create some models in the database to manage
    customers, groups (which we will call rooms), and messages.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一些数据库模型来管理客户、群组（我们将称之为房间）和消息。
- en: 'Edit `/app/chat/models.py` with the following content:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下内容编辑`/app/chat/models.py`：
- en: '[PRE28]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The `Client` model allows us to have a record of the users that are connected
    or disconnected. It also allows us to store the private Channel of each client
    in case we need to send them an individual message from anywhere in the code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`Client` 模型允许我们记录已连接或断开连接的用户。它还允许我们存储每个客户端的私有频道，以防我们需要从代码中的任何位置向他们发送个人消息：'
- en: '[PRE39]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '`Rooms` will be a record of all the Channels that have been created and the
    clients that are subscribed to them via the `users_subscribed` column. We must
    perform this functionality because Channels do not allow us to access this information
    unless we use a third-party extension or make a record in the database, which
    is exactly what we are doing here. We’ll use `clients_active` to know which clients
    are currently viewing the group, as they may be added, but at the same time disconnected
    or present in another room. This way, we will only send the updates or new HTML
    that’s generated with the list of messages to the active clients and not to all
    the subscribed ones. Finally, `name` will be the name of the group and `is_group`
    will mark if this is a public group with many clients (`True`) or a private room
    (`False`), which is mandatory for controlling unwanted guests:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`Rooms` 将记录所有已创建的频道以及通过 `users_subscribed` 列订阅它们的客户端。我们必须执行此功能，因为频道不允许我们访问此信息，除非我们使用第三方扩展或数据库中创建记录，这正是我们在这里所做的事情。我们将使用
    `clients_active` 来了解哪些客户端目前正在查看该组，因为它们可能被添加，但同时也可能断开连接或出现在另一个房间中。这样，我们只会将带有消息列表的更新或新
    HTML 发送到活跃的客户端，而不是所有订阅的客户端。最后，`name` 将是组的名称，`is_group` 将标记这是一个有多个客户端的公共组（`True`）还是私人房间（`False`），这对于控制不受欢迎的访客是强制性的：'
- en: '[PRE52]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The `Message` model will be in charge of storing the Chat messages. Each element
    will have an author (who we will call `user`), a Channel where a message has been
    sent (which we will call `room`), and the text of the message itself (which we
    will call `text`). In addition, we have added `created_at` to sort the messages
    when listing them.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`Message` 模型将负责存储聊天消息。每个元素都将有一个作者（我们将称之为 `user`），一个消息已发送的频道（我们将称之为 `room`），以及消息本身的文本（我们将称之为
    `text`）。此外，我们还添加了 `created_at` 以便在列出消息时对它们进行排序。'
- en: 'We will lift `docker-compose` to carry out migrations:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将启动 `docker-compose` 来执行迁移：
- en: '[PRE64]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'With the models defined, we are going to create the migration. We need to go
    into the `django` container and look for its name. As a hint, we know that it
    will end with `_django_1`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了模型之后，我们将创建迁移。我们需要进入 `django` 容器并查找其名称。作为一个提示，我们知道它将以 `_django_1` 结尾：
- en: '[PRE65]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'You will see a list of all your active containers, along with the processes
    they are running:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到所有活动容器的列表，以及它们正在运行的进程：
- en: '![Figure 5.1 – Listing all the names of the containers after Docker is up'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.1 – Docker 启动后列出所有容器的名称'
- en: '](img/Figure_5.01_B18321.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_5.01_B18321.jpg](img/Figure_5.01_B18321.jpg)'
- en: Figure 5.1 – Listing all the names of the containers after Docker is up
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – Docker 启动后列出所有容器的名称
- en: In my case, Django is `chapter-5_django_1`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，Django 是 `chapter-5_django_1`。
- en: 'Now, let’s enter the interactive Bash terminal:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进入交互式 Bash 终端：
- en: '[PRE66]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Here, we can create the necessary migrations:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以创建必要的迁移：
- en: '[PRE67]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: With the database ready, we will include some random users to differentiate
    the clients.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库准备就绪后，我们将添加一些随机用户以区分客户端。
- en: Generating random users
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成随机用户
- en: Without registered users, we can’t work, so let’s create a Python script that
    makes some random data.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 没有注册用户，我们无法工作，所以让我们创建一个 Python 脚本来生成一些随机数据。
- en: 'We will create a file called `make_fake_users.py` at the root of the project
    that contains the following content. At the moment, we will not be able to run
    it because we do not have **Faker** installed:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在项目的根目录下创建一个名为 `make_fake_users.py` 的文件，其中包含以下内容。目前，我们无法运行它，因为我们尚未安装 **Faker**：
- en: Faker
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Faker
- en: Faker is a Python library for generating fake data for various uses. Among its
    most common uses, it is used to insert data into the database to develop, prototype,
    or stress test an application.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Faker 是一个用于生成各种用途的假数据的 Python 库。在其最常见用途中，它用于将数据插入数据库以进行开发、原型设计或压力测试应用程序。
- en: '[PRE69]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Using Faker, we generate five unique emails. Then, we iterate them and create
    a unique user with a generated username and last name.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Faker，我们可以生成五个唯一的电子邮件。然后，我们遍历它们，并创建一个具有生成的用户名和姓氏的唯一用户。
- en: 'To install Faker, add the following line to the `requirements.txt` file:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Faker，请将以下行添加到 `requirements.txt` 文件中：
- en: '[PRE83]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Don’t forget to recreate the Django image again so that the new dependency is
    installed from `Dockerfile`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记再次重建Django镜像，以便从`Dockerfile`安装新依赖项。
- en: 'Now, let’s run the Python script from Bash from the Django container:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从Django容器中运行Python脚本：
- en: '[PRE85]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: We currently have five random users ready to be used.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前有五个随机用户可供使用。
- en: With the database created and populated with data, we can focus on generating
    the HTML and its components that will make use of this information.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库创建并填充数据后，我们可以专注于生成将使用这些信息的HTML及其组件。
- en: Integrating HTML and styles
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成HTML和样式
- en: We need to display some nice minimalistic HTML to make the Chat usable, although
    we won’t win the best web design of the year award.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要显示一些简洁的HTML，以便使聊天可用，尽管我们不会赢得年度最佳网页设计奖。
- en: 'Let’s create `app/chat/templates/index.html` with the following content:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`app/chat/templates/index.html`，内容如下：
- en: '[PRE86]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Let’s link the future CSS and JavaScript files:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们链接未来的CSS和JavaScript文件：
- en: '[PRE102]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Now, let’s communicate the path that JavaScript will use to connect to `host`
    and check whether the connection is secure with `scheme`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们沟通JavaScript将使用的路径来连接到`host`，并使用`scheme`检查连接是否安全：
- en: '[PRE106]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'The preceding block is divided into three parts:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块分为三个部分：
- en: '`<span id="logged-user"></span>`: This is used to display the client’s name'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<span id="logged-user"></span>`: 用于显示客户端的名称'
- en: '`<aside id="aside"></aside>`: A component that will list the name of the groups
    and users that will be clickable to dynamically jump between Channels (or Rooms)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<aside id="aside"></aside>`: 一个组件，将列出可点击以动态跳转到频道（或房间）的组名和用户名'
- en: '`<main id="main"></main>`: Contains another component that will render all
    existing or new messages with the respective form to publish a new message'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<main id="main"></main>`: 包含另一个组件，用于渲染所有现有或新消息，并使用相应的表单发布新消息'
- en: 'Now, let’s create all the components. Let’s start with `/app/chat/templates/components/_aside.html`:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建所有组件。让我们从`/app/chat/templates/components/_aside.html`开始：
- en: '[PRE124]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: To simplify this code, we have manually typed in the names of all the groups
    where several clients will be able to speak at the same time. You are free to
    generate them from the model.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化此代码，我们已手动输入所有组的名称，其中多个客户端可以同时发言。您可以从模型中生成它们。
- en: 'Now, let’s create `/app/chat/templates/components/_chat.html`:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建`/app/chat/templates/components/_chat.html`：
- en: '[PRE189]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: 'The preceding code contains the three essential parts of any self-respecting
    chat room:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码包含任何自重尊聊天室的基本三个部分：
- en: The name of the group or Channel present at the time
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前存在的组或频道名称
- en: A list of messages
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息列表
- en: A form for adding new messages
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于添加新消息的表单
- en: 'However, the list of messages is empty. Where is the loop with the HTML template?
    To be tidy, we have placed it in another component located in `app/chat/templates/components/_list_messages.html`,
    which contains the following code:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，消息列表是空的。HTML模板中的循环在哪里？为了整洁，我们将它放置在另一个组件中，该组件位于`app/chat/templates/components/_list_messages.html`，其中包含以下代码：
- en: '[PRE202]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: Now that we have defined all the HTML for the chat, we just need to add some
    minimal styles to give it structure.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了所有聊天HTML，我们只需要添加一些最小样式来给它结构。
- en: Defining CSS styles
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义CSS样式
- en: 'In this section, we will create a style file in `static/css/main.css` with
    a few fixes to make the future Chat more comfortable to use:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在`static/css/main.css`中创建一个样式文件，其中包含一些修复，以使未来的聊天更易于使用：
- en: '[PRE221]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: 'We will prepare some colors, provide a nice typeface (if you only take one
    thing from the book, always use Helvetica), and arrange `body`:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将准备一些颜色，提供漂亮的字体（如果您只从这本书中取一样东西，请始终使用Helvetica），并安排`body`：
- en: '[PRE236]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: 'We will slightly modernize the inputs and prepare a container to center the
    Chat:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将稍微现代化输入，并准备一个容器以居中聊天：
- en: '[PRE262]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: 'Now, let’s align `<aside>` and `<main>` horizontally:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们水平对齐`<aside>`和`<main>`：
- en: '[PRE276]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: 'Here, we have fixed the browser and the links included within `<aside>` so
    that they have a clickable area that is comfortable enough to click on:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已固定浏览器和包含在`<aside>`内的链接，以便它们有一个足够舒适的点击区域：
- en: '[PRE293]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: Finally, we have converted each chat message into a well-delimited box with
    a border. We also horizontally aligned the input and the form button to display
    it as we are used to today.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将每个聊天消息转换为一个带有边框的清晰分隔的框。我们还水平对齐了输入和表单按钮，以便像今天一样显示。
- en: Now, we must create a view to render all the pieces we have created – the database,
    generated users, template, and HTML components – with a little CSS.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须创建一个视图来渲染我们已创建的所有部分——数据库、生成的用户、模板和HTML组件——以及一点CSS。
- en: Creating the view
  id: totrans-412
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建视图
- en: There’s nothing at the root of the chat yet. Without a view and a route, the
    template cannot be served to the client. Even if we show a static template, we
    must indicate the path where it can be visited and rendered. We need a view to
    generate its presentation HTML.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 目前聊天根目录下还没有任何内容。没有视图和路由，模板无法被提供给客户端。即使我们展示一个静态模板，我们也必须指明可以访问和渲染它的路径。我们需要一个视图来生成其展示的HTML。
- en: 'In `/app/chat/views.py`, we will create a view called `index` that renders
    `index.html` with all the users, which will be displayed in `<aside>`:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/app/chat/views.py`中，我们将创建一个名为`index`的视图，它渲染`index.html`，显示所有用户，这些用户将在`<aside>`中显示：
- en: '[PRE322]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: 'In `/project_template/urls.py`, we will add the view to be displayed when a
    visitor enters the site’s root:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/project_template/urls.py`中，我们将添加当访问者进入网站根目录时要显示的视图：
- en: '[PRE329]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: Now, we will open the browser we have at hand with the domain of the project.
    The address is described in the `DOMAIN` variable of the `docker-compose.yaml`
    file. If you haven’t touched the document, the address will be `http://hello.localhost`.
    In my case, I have changed it to `http://chat.localhost`.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将打开我们手头的浏览器，访问项目的域名。地址在`docker-compose.yaml`文件的`DOMAIN`变量中描述。如果你没有修改文档，地址将是`http://hello.localhost`。在我的情况下，我已经将其更改为`http://chat.localhost`。
- en: 'We will be able to see in the browser the list of groups, written manually,
    and the list of existing users. In addition, we have a form where we can write
    future messages:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在浏览器中看到手动编写的群组列表和现有用户的列表。此外，我们还有一个可以写入未来消息的表单：
- en: '![Figure 5.2 – The chat without any messages, group name, or client name'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.2 – 没有任何消息、群组名称或客户端名称的聊天'
- en: '](img/Figure_5.02_B18321.jpg)'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 5.02 – 根目录下没有任何内容](img/Figure_5.02_B18321.jpg)'
- en: Figure 5.2 – The chat without any messages, group name, or client name
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 没有任何消息、群组名称或客户端名称的聊天
- en: The visual part is ready; we can now focus all our attention on the chat logic.
    We already have the body; now, we need a brain to manage the logic.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 视觉部分已经准备好了；现在，我们可以将所有注意力集中在聊天逻辑上。我们已经有了主体；现在，我们需要一个大脑来管理逻辑。
- en: Declaring JavaScript to listen to messages or send them
  id: totrans-434
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明JavaScript以监听或发送消息
- en: 'Let’s update the `static/js/index.js` file with the following code:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新`static/js/index.js`文件，添加以下代码：
- en: '[PRE334]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: 'We will connect to the backend with the WebSockets client using the `scheme`
    and `host` values we have printed in the dataset’s `<body>` tag:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用数据集的`<body>`标签中打印的`scheme`和`host`值，通过WebSockets客户端连接到后端：
- en: '[PRE338]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: 'Let’s retrieve the `sendData()` function we used in the previous examples to
    send messages to the backend:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检索之前示例中使用的`sendData()`函数，用于向后端发送消息：
- en: '[PRE349]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: 'Now, we must declare a function to send a new message. We won’t need anything
    more than the text since I will know who the author is due to the Consumer:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须声明一个发送新消息的函数。由于我知道作者是谁，所以除了文本之外我们不需要任何东西：
- en: '[PRE365]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: The `changeGroup()` function will tell the Consumer to change the group and
    send us the HTML for the existing messages of the group. We will accompany this
    request with the dataset that stores the name of the Room to change and information
    about whether it is a multi-user group or a private conversation.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '`changeGroup()`函数将告诉Consumer更改群组，并发送现有群组消息的HTML。我们将伴随这个请求，提供存储要更改的房间名称和是否是多用户群组或私密对话的信息的数据集。'
- en: 'The final JavaScript fragment is for the backend listener:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的JavaScript片段是用于后端监听器：
- en: '[PRE380]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: 'As in the previous examples, we will collect the JSON, parse it, and inject
    the HTML:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，我们将收集JSON，解析它，并注入HTML：
- en: '[PRE389]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: 'Every time we print a list of messages or receive a new message, the scroll
    will be placed at an inappropriate height. It may not scroll at all, or it may
    hang in the middle. To fix this, after each HTML injection, we must scroll down
    to the end of the element, always displaying the last message. This is a common
    behavior in all Chats:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们打印消息列表或接收新消息时，滚动条都会放置在不适当的高度。它可能根本不会滚动，或者它可能悬挂在中间。为了解决这个问题，在每次HTML注入后，我们必须滚动到元素的末尾，始终显示最后一条消息。这是所有聊天中常见的操作：
- en: '[PRE393]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: Finally, we must reassign all the events after each render. The button that
    sends a new message, with an ID of `send` will execute `sendNewMessage()`, while
    all `<aside>` buttons will call `changeGroup()`.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须在每次渲染后重新分配所有事件。发送新消息的按钮（ID为`send`）将执行`sendNewMessage()`，而所有`<aside>`按钮将调用`changeGroup()`。
- en: With the frontend defined, it’s time to work with the Consumer. The Consumer
    is responsible for managing the database, listening to JavaScript, rendering the
    HTML, and managing the groups.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 前端定义完成后，现在是时候与消费者（Consumer）一起工作了。消费者负责管理数据库、监听JavaScript、渲染HTML以及管理群组。
- en: Building a Consumer to manage groups
  id: totrans-515
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建消费者以管理群组
- en: In this section, we are going to define what will happen when a client connects,
    disconnects, sends us the action of changing groups, or adds a new message.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将定义当客户端连接、断开连接、发送更改群组操作或添加新消息时会发生什么。
- en: 'Edit `app/chat/consumers.py` with the following content:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下内容编辑`app/chat/consumers.py`：
- en: '[PRE404]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: 'Let’s import the authentication system, User, and models:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导入认证系统、用户和模型：
- en: '[PRE411]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: 'The first thing we will do when we load the Consumer is delete Zombie Clients
    in case we forcefully close Django:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们加载消费者时，我们将首先删除僵尸客户端，以防我们强制关闭Django：
- en: '[PRE412]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: 'Now, we will accept the customer’s connection:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将接受客户的连接：
- en: '[PRE415]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: 'Next, we will obtain a random user who is not already registered as a customer:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将获取一个尚未注册为客户的随机用户：
- en: '[PRE416]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: 'Here, we will identify the user. It will be easier to work with sessions than
    storing the user ID:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将识别用户。与存储用户ID相比，使用会话将更容易工作：
- en: '[PRE419]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: 'Now, we will send the name of the registered user to the frontend:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将向前端发送注册用户的名称：
- en: '[PRE421]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: 'Next, we will register the client in the database to control who is connected:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将客户端注册到数据库中以控制谁可以连接：
- en: '[PRE426]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: '[PRE427]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: 'At this point, we will assign the `"hi"` group as the first room to be displayed
    when you enter. We have created a special function to handle some repetitive tasks
    when changing rooms. We will describe how the function works shortly:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们将把`"hi"`群组指定为进入时首先显示的房间。我们创建了一个特殊函数来处理更改房间时的重复性任务。我们将在稍后描述该函数的工作原理：
- en: '[PRE428]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: 'Now, let’s list the messages of the room where we have just assigned the client:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们列出我们刚刚分配给客户端的房间的消息：
- en: '[PRE429]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: 'When a client disconnects, we will perform the following three tasks:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端断开连接时，我们将执行以下三个任务：
- en: 'Remove the client from the current room:'
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从当前房间中移除客户端：
- en: '[PRE432]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: 'Deregister the client:'
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注销客户端：
- en: '[PRE433]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: 'Log the user out:'
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注销用户：
- en: '[PRE434]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: With that, we have automatically implemented a system that creates a session
    for the user, which is very handy for identifying and sending individual messages
    to the user, and also closes the user’s session when the WebSocket client disconnects.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们自动实现了一个系统，为用户创建会话，这对于识别和向用户发送个人消息非常有用，并且在WebSocket客户端断开连接时关闭用户的会话。
- en: 'The function we have used in other examples for managing frontend actions is
    useful here. The backend tasks are simple: listen for and return JSON. We will
    always use the same functions, regardless of the application:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在其他示例中用于管理前端操作的功能在这里也很有用。后端任务很简单：监听并返回JSON。我们将始终使用相同的函数，无论应用程序如何：
- en: '[PRE435]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: Depending on the action, we will do one task or the other. These are the actions
    that are requested by the frontend, such as adding a new message or listing all
    messages.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 根据操作，我们将执行一项或多项任务。这些是前端请求的操作，例如添加新消息或列出所有消息。
- en: We will only change groups if the frontend makes a request. But when will this
    request be made? When the user clicks on the name of the group where they want
    to go or on the user they want to talk to. The event will be captured by the frontend
    and the `Change group` action will be sent to the backend.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当前端发起请求时，我们才会更改群组。但这个请求何时会发起？当用户点击他们想要进入的群组名称或他们想要交谈的用户时。这个事件将被前端捕获，并将“更改群组”操作发送到后端。
- en: We can’t work in the same way with a user who wants to enter a private room,
    where there will only be two users, and another user who will enter a public room
    (with no limit regarding users and open messages). The code is different. To control
    this situation, we will ask the frontend to send us `isGroup`. If it’s `true`,
    it’s a public group. If it’s `false`, it is a private group between two users.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 对于想要进入私人房间（只有两个用户）的用户和想要进入公共房间（对用户数量和开放消息没有限制）的用户，我们不能以同样的方式工作。代码是不同的。为了控制这种情况，我们将要求前端发送我们`isGroup`。如果是`true`，则是一个公共群组。如果是`false`，则是两个用户之间的私人群组。
- en: 'We will start by changing groups:'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先更改组：
- en: '[PRE444]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: 'If `isGroup` is `True`, we will add the client in a multi-user room: #hi, #python...'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 `isGroup` 是 `True`，我们将客户端添加到多用户房间：#hi, #python...'
- en: '[PRE447]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: If `isGroup` is `False`, we will add a target user and the current user to the
    private room.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `isGroup` 是 `False`，我们将添加目标用户和当前用户到私人房间。
- en: 'The major problem that we face is when two clients need to talk to each other,
    we need to ensure that we create a Room just for them. The difficulty is that
    we need to check if a Room already exists, and if it doesn’t, we need to create
    a group and then inform the participants of this when they want to connect. We
    will have to make a decision tree, as follows:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 我们面临的主要问题是当两个客户端需要互相交谈时，我们需要确保只为他们创建一个房间。困难之处在于我们需要检查房间是否已经存在，如果不存在，我们需要创建一个群组，并在他们想要连接时通知参与者。我们将不得不制作一个如下所示的决策树：
- en: Search for an already created Room where both clients have already spoken in
    the past. If it exists, retrieve the name of the Room and add the client to the
    group. If it does not exist, go to *Step 2*.
  id: totrans-585
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索一个已经创建的房间，其中两个客户端在过去已经交谈过。如果存在，检索房间的名称并将客户端添加到群组。如果不存在，转到 *步骤 2*。
- en: See if the users who want to talk to each other are alone in a Room. This is
    because they have created a Room and are waiting for another user to join and
    talk to them. If not, go to *Step 3*.
  id: totrans-586
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查想要互相交谈的用户是否独自在一个房间里。这是因为他们已经创建了一个房间，并正在等待另一个用户加入并与之交谈。如果不是，请转到 *步骤 3*。
- en: Create a new Room and hope that a user wants to talk to us.
  id: totrans-587
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的房间，并希望有用户想要与我们交谈。
- en: 'First, we will search for rooms where both clients match:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将搜索两个客户端匹配的房间：
- en: '[PRE449]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: 'Then, we will get the client who wants to talk:'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将获取想要交谈的客户端：
- en: '[PRE451]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: 'An existing group may be found where both the target and current clients are
    already talking. This is the most favorable case as there is a previous conversation
    where a Room has already been created. In this case, the client can be added to
    the group to talk:'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 可能找到一个现有的群组，其中目标和当前客户端已经在交谈。这是最有利的情况，因为有一个先前的对话，其中已经创建了一个房间。在这种情况下，客户端可以被添加到群组中进行交谈：
- en: '[PRE452]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: 'If there is no existing group, look for a room where the target user is alone:'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有现有的群组，寻找目标用户独自一人的房间：
- en: '[PRE454]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '[PRE459]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: '[PRE460]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: 'If there is a room, let’s join:'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有房间，让我们加入：
- en: '[PRE461]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '[PRE462]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: 'If we have not found a room where the target user is alone, we must create
    a new room:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有找到目标用户独自一人的房间，我们必须创建一个新的房间：
- en: '[PRE463]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: 'After moving the client to another room, we need to give them feedback so that
    they know which room they are in at the moment. We will send them the name of
    the room:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 将客户端移动到另一个房间后，我们需要给他们反馈，以便他们知道他们此刻所在的房间。我们将发送房间名称给他们：
- en: '[PRE464]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: '[PRE465]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: 'Here, we have received a new message to save:'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们收到了一条需要保存的新消息：
- en: '[PRE466]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: 'After this, there will be changes to show to the client, such as adding a new
    message. We will always send a list of the messages where the client is located
    so that they have the latest changes in the HTML:'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将向客户端展示一些更改，例如添加一条新消息。我们总是会发送客户端所在位置的短信列表，以便他们能够获得最新的HTML更改：
- en: '[PRE467]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '[PRE470]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: '[PRE471]'
  id: totrans-619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: '[PRE472]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '[PRE473]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: '[PRE474]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: '[PRE475]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: '[PRE476]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: '[PRE477]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: '[PRE478]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: '[PRE479]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: '[PRE480]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '[PRE481]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '[PRE482]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: '[PRE483]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE483]'
- en: '[PRE484]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE484]'
- en: '[PRE485]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE485]'
- en: '[PRE486]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE486]'
- en: '[PRE487]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: '[PRE488]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: '[PRE489]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: '[PRE490]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: '[PRE491]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: '[PRE492]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: '[PRE493]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: '[PRE494]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: '[PRE495]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: '[PRE496]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: '[PRE497]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: '[PRE498]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: 'Whenever we want to know who we are, we can use `self.scope["user"]`. It will
    return the logged-in user object:'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们想知道自己是谁时，我们可以使用 `self.scope["user"]`。它将返回已登录的用户对象：
- en: '[PRE499]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: '[PRE500]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: '[PRE501]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: '[PRE502]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: '[PRE503]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: '[PRE504]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: '[PRE505]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: '[PRE506]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: '[PRE507]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: 'To add a user to a Room, we must do the following:'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 要将用户添加到房间中，我们必须执行以下操作：
- en: Get the user client.
  id: totrans-658
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取用户客户端。
- en: Remove the client from the previous room.
  id: totrans-659
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从之前的房间中移除客户端。
- en: Get or create a room.
  id: totrans-660
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取或创建一个房间。
- en: If the room has no name, it is assigned `"private_{id}"`. For example, if `id`
    is 1, it shall be `"private_1"`.
  id: totrans-661
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果房间没有名称，则分配 `"private_{id}"`。例如，如果 `id` 是 1，它应该是 `"private_1"`。
- en: Add a client to the group.
  id: totrans-662
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将客户端添加到群组中。
- en: 'Send the group name to the client, as follows:'
  id: totrans-663
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将群组名称发送给客户端，如下所示：
- en: '[PRE508]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: '[PRE509]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: '[PRE510]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: '[PRE511]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: '[PRE512]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: '[PRE513]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: '[PRE514]'
  id: totrans-670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: '[PRE515]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: '[PRE516]'
  id: totrans-672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE516]'
- en: '[PRE517]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE517]'
- en: '[PRE518]'
  id: totrans-674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE518]'
- en: '[PRE519]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: '[PRE520]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: 'Let’s describe the preceding code in more detail. There are several important
    parts to understand:'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地描述前面的代码。有几个重要的部分需要理解：
- en: 'Obtaining the name of the Room where we are active is relatively easy by filtering
    the database:'
  id: totrans-678
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过过滤数据库，获取我们活跃的房间名称相对容易：
- en: '[PRE521]'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE521]'
- en: 'To remove ourselves from a group, we must do the reverse:'
  id: totrans-680
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将自己从群组中移除，我们必须执行相反的操作：
- en: '[PRE522]'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE522]'
- en: 'We get all the Rooms where we are active:'
  id: totrans-682
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们获取我们活跃的所有房间：
- en: '[PRE523]'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE523]'
- en: 'We go in and out of the Room and eliminate each other:'
  id: totrans-684
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们进出房间并相互消除：
- en: '[PRE524]'
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE524]'
- en: 'We remove the client from the group:'
  id: totrans-686
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从群组中移除客户端：
- en: '[PRE525]'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE525]'
- en: 'We remove the client from the Room model:'
  id: totrans-688
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从房间模型中移除客户端：
- en: '[PRE526]'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE526]'
- en: 'And the Chat is now complete. When we enter, it will render our username and
    the name of the Room where we are active. At the start of the chat, we will see
    `#hi`:'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 现在聊天已经完成。当我们进入时，它将渲染我们的用户名和我们在活跃的房间名称。在聊天的开始，我们将看到 `#hi`：
- en: '![Figure 5.3 – Our username, which is randomly assigned when we log in, and
    the current Room'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.3 – 我们的用户名，在登录时随机分配，以及当前房间'
- en: '](img/Figure_5.03_B18321.jpg)'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_5.03_B18321.jpg)'
- en: Figure 5.3 – Our username, which is randomly assigned when we log in, and the
    current Room
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 我们的用户名，在登录时随机分配，以及当前房间
- en: 'If we open a tab in another browser or use private browsing, a new random user
    will be assigned to the session, and we will be able to post to any of the groups.
    All the messages will be rendered in real time to the clients that are present
    or active in the group:'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在另一个浏览器中打开一个标签页或使用私密浏览，将为会话分配一个新的随机用户，并且我们能够向任何群组发布帖子。所有消息都将实时渲染到当前群组中或活跃的客户端：
- en: '![Figure 5.4 – Any user can write freely in the groups, without limitations'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.4 – 任何用户都可以在群组中自由写作，没有限制'
- en: '](img/Figure_5.04_B18321.jpg)'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_5.04_B18321.jpg)'
- en: Figure 5.4 – Any user can write freely in the groups, without limitations
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 任何用户都可以在群组中自由写作，没有限制
- en: 'If we open a third browser, we can experience private rooms or conversations
    between two clients:'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开第三个浏览器，我们可以体验私人房间或两个客户端之间的对话：
- en: '![Figure 5.5 – A private conversation between two users'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.5 – 两个用户之间的私密对话'
- en: '](img/Figure_5.05_B18321.jpg)'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_5.05_B18321.jpg)'
- en: Figure 5.5 – A private conversation between two users
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – 两个用户之间的私密对话
- en: At any time, we can exchange messages with existing users or groups. Moreover,
    as we have a database to store the messages, even if we restart the Docker containers,
    we will always see the history with everything written, sorted by creation date.
    Here, we have a realistic Chat, with real-time response and logic in the backend.
    It’s amazing what we can achieve if we know how to use Django’s native tools and
    know how to manage Channels.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时候，我们都可以与现有用户或群组交换消息。此外，由于我们有一个数据库来存储消息，即使我们重新启动 Docker 容器，我们也会看到所有已写入的历史记录，按创建日期排序。这里，我们有一个真实的聊天，具有后端实时响应和逻辑。如果我们知道如何使用
    Django 的原生工具以及如何管理 Channels，我们能实现的事情真是令人惊叹。
- en: Summary
  id: totrans-703
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we created a functional chat with private rooms and groups,
    like other software such as Slack or Teams, with very few lines of JavaScript
    (no comments, less than 35 lines). In addition, we have taken the first steps
    in an authentication system. We can now register and manage clients in different
    Channels, depending on our needs, and know who is connected or disconnected. The
    magic is over – we are now masters of Channels.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了一个具有私人房间和群组的实用聊天，类似于 Slack 或 Teams 等其他软件，只需很少的 JavaScript 代码（没有注释，少于
    35 行）。此外，我们在认证系统中迈出了第一步。我们现在可以在不同的 Channels 中注册和管理客户端，根据我们的需求，并知道谁已连接或断开连接。魔法结束了——我们现在已经是
    Channels 的主人了。
- en: In the next chapter, [*Chapter 6*](B18321_06_ePub.xhtml#_idTextAnchor139), *Creating
    SPAs on the Backends*, we will deal with the last few elements that are necessary
    to dynamize a site, such as changing pages, deciding when we want to update a
    whole section or add a new HTML fragment, working with sessions so as not to depend
    so much on the database, and validating the origin of the data to avoid **cross-site
    request forgery** (**CSRF**) with WebSockets. With all the skills we will have
    acquired, we will develop a complete SPA by building a blog in [*Chapter 7*](B18321_07_ePub.xhtml#_idTextAnchor152),
    *Creating a Real-Time Blog Using Only Django*.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，[*第 6 章*](B18321_06_ePub.xhtml#_idTextAnchor139)，*在后端创建 SPAs*，我们将处理使网站动态化的最后几个必要元素，例如更改页面、决定何时更新整个部分或添加新的
    HTML 片段、使用会话以减少对数据库的依赖，以及验证数据的来源以避免使用 WebSockets 的跨站请求伪造（**CSRF**）。凭借我们已掌握的所有技能，我们将在
    [*第 7 章*](B18321_07_ePub.xhtml#_idTextAnchor152)，*仅使用 Django 创建实时博客* 中构建一个完整的
    SPA。
