- en: Chapter 2. Working with CSV and Excel Worksheets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. 使用CSV和Excel工作表
- en: Imagine a world where your important documents were stored in files and managed
    on work desks. Thanks to the advent of computers and software such as Excel sheets
    we can manage our data in an organized way. In fact, you can even manage worksheets
    in an automated way, and that too with Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个世界，你的重要文件存储在文件中，并在办公桌上进行管理。多亏了计算机和像Excel表这样的软件的出现，我们可以以有组织的方式管理我们的数据。实际上，你甚至可以用Python以自动化的方式管理工作表。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下食谱：
- en: Reading CSV files with reader objects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用读取器对象读取CSV文件
- en: Writing data into CSV files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据写入CSV文件
- en: Developing your own CSV dialects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发自己的CSV方言
- en: Managing employee information in an automated way
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以自动化的方式管理员工信息
- en: Reading Excel sheets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取Excel表
- en: Writing data into worksheets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据写入工作表
- en: Formatting Excel cells
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化Excel单元格
- en: Playing with Excel formulae
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩转Excel公式
- en: Building charts within Excel sheets
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Excel表中构建图表
- en: Automating the comparison of company financials
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动比较公司财务
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Until computers became a part of our daily lives, office records were created
    on paper and stored in cabinets. Today, thanks to the ever-growing computational
    field, we store these records using computer applications in a text file. Text
    (`.txt`) files were great at saving large amounts of data; it was also easy to
    search for information within a text file, but the data was never stored in an
    organized way. Over time as the information grew, the need for storing information
    also increased and resulted in the advent of CSV and Excel sheets, where data
    not only could be stored in a structured format but also read and processed easily.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机成为我们日常生活的一部分之前，办公记录是在纸上创建并存储在柜子里的。今天，多亏了不断增长的计算领域，我们使用计算机应用程序在文本文件中存储这些记录。文本（`.txt`）文件非常适合保存大量数据；在文本文件中搜索信息也很容易，但数据从未以有组织的方式存储。随着时间的推移，信息量的增长也增加了存储信息的需求，从而导致了CSV和Excel表的诞生，其中数据不仅可以以结构化格式存储，而且可以轻松读取和处理。
- en: CSV files contain data separated by commas; hence, they are referred to as **comma-separated
    values** (**CSV**) files. CSV allows for storing data in a tabular format. CSV
    files are easier to import on any storage system, independent of the software
    being used. Since CSV files are plain text files, they can be modified easily
    and are hence used for the quick exchange of data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CSV文件包含由逗号分隔的数据；因此，它们被称为**逗号分隔值**（CSV）文件。CSV允许以表格格式存储数据。CSV文件在任何存储系统上导入都更容易，不受所使用的软件的影响。由于CSV文件是纯文本文件，它们可以轻松修改，因此用于数据的快速交换。
- en: On the other hand, Excel sheets contain data separated by tabs or other delimiters.
    Excel sheets store and retrieve data in a grid format of columns and rows. They allow
    the formatting of data, working with formulas, and have the capability of hosting
    multiple sheets in a file. Excel is ideal for entering, calculating, and analyzing
    company data, such as sales figures or commissions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Excel表包含由制表符或其他分隔符分隔的数据。Excel表以行列网格格式存储和检索数据。它们允许格式化数据，使用公式进行操作，并且能够在文件中托管多个工作表。Excel非常适合输入、计算和分析公司数据，如销售额或佣金。
- en: While CSV files are text files used to store and retrieve data from programs,
    Excel files are binary files and are used for more advanced operations like charting,
    calculations and often for storing reports.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当CSV文件是用于存储和检索数据的文本文件时，Excel文件是二进制文件，用于更高级的操作，如图表、计算，以及通常用于存储报告。
- en: Python has a useful set of modules to work with both CSV and Excel files. You
    can read/write CSV and Excel files, format Excel cells, prepare charts, and perform
    calculations on data with formulae.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Python有一套有用的模块来处理CSV和Excel文件。你可以读取/写入CSV和Excel文件，格式化Excel单元格，准备图表，并使用公式对数据进行计算。
- en: 'The recipes in this chapter will focus on the Python modules that help us performing
    the preceding operations on CSV and Excel sheets. Specifically, we will focus
    on the following Python modules in this chapter:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱将专注于帮助我们执行CSV和Excel表前述操作的Python模块。具体来说，本章将重点关注以下Python模块：
- en: '`csv` ([https://docs.python.org/2/library/csv.html](https://docs.python.org/2/library/csv.html))'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`csv` ([https://docs.python.org/2/library/csv.html](https://docs.python.org/2/library/csv.html))'
- en: '`openpyxl` ([https://pypi.python.org/pypi/openpyxl](https://pypi.python.org/pypi/openpyxl))'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openpyxl` ([https://pypi.python.org/pypi/openpyxl](https://pypi.python.org/pypi/openpyxl))'
- en: '`XlsxWriter` ([https://pypi.python.org/pypi/XlsxWriter](https://pypi.python.org/pypi/XlsxWriter))'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`XlsxWriter` ([https://pypi.python.org/pypi/XlsxWriter](https://pypi.python.org/pypi/XlsxWriter))'
- en: Reading CSV files with reader objects
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用reader对象读取CSV文件
- en: This recipe will show you how to read CSV files, specifically how to create
    and use the reader object.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将向您展示如何读取CSV文件，特别是如何创建和使用reader对象。
- en: Getting ready
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need to install Python v2.7\. To work
    with the CSV files, we have a nice module, `csv`, which is packaged with the default
    Python installation. So, let's get started!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要逐步执行此配方，您需要安装Python v2.7。为了处理CSV文件，我们有一个很好的模块，`csv`，它是默认Python安装的一部分。因此，让我们开始吧！
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: On your Linux/Mac computer, go to Terminal and use Vim, or choose your favorite
    editor.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Linux/Mac计算机上，转到终端并使用Vim，或选择您喜欢的编辑器。
- en: We start by creating a CSV file. As we know, a CSV file has a structured format
    where data is separated by commas, so creating one should be trivial. The following
    screenshot is of a CSV file that contains details of contacts in different parts
    of the country. We name it as `mylist.csv`:![How to do it...](img/Chapter2-Image2.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先创建一个CSV文件。正如我们所知，CSV文件具有结构化格式，其中数据由逗号分隔，因此创建一个应该很简单。以下截图是一个包含国家不同地区联系人详细信息的CSV文件。我们将其命名为`mylist.csv`：![如何做...](img/Chapter2-Image2.jpg)
- en: 'Now, let''s write the Python code to read this CSV file and print data from
    it:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们编写Python代码来读取这个CSV文件并打印其中的数据：
- en: '[PRE0]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output of the preceding code snippet is as follows:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面代码片段的输出如下：
- en: '![How to do it...](img/Chapter2-Image1.jpg)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/Chapter2-Image1.jpg)'
- en: Oh! What happened? We seem to have hit an error. The error suggests that the
    CSV reader could not find the new line character. This happens in CSV files written
    on a Mac platform. This is because Mac OS uses **carriage return** (**CR**) as
    the end of line character.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哦！发生了什么？我们似乎遇到了一个错误。错误提示CSV读取器找不到新行字符。这发生在Mac平台上的CSV文件中。这是因为Mac OS使用**回车符**（**CR**）作为行结束字符。
- en: 'Python has a simple solution for this issue; we open the file in **rU** mode
    (which is **universal newline** mode). The following program runs perfectly fine
    and we can read the file contents appropriately:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python有一个简单的解决方案来解决这个问题；我们以**rU**模式（即**通用换行**模式）打开文件。以下程序运行得很好，我们可以适当地读取文件内容：
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of the preceding program is as follows:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面程序的输出如下：
- en: '![How to do it...](img/image_03_003.jpg)'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/image_03_003.jpg)'
- en: 'That''s great! There''s another simple fix for the issue we observed in the
    preceding code snippet. What we could do is, simply change the file format from
    Mac CSV to Windows CSV. We can do this by performing the **Open** and **Save As**
    operations on the file. In the following example, I have saved `mylist.csv` as
    `mylist_wincsv.csv` (Windows CSV format), and reading the file contents is not
    an issue anymore:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 非常好！对于我们在前面代码片段中观察到的那个问题，还有一个简单的解决方案。我们可以做的是，简单地将文件格式从Mac CSV更改为Windows CSV。我们可以通过执行**打开**和**另存为**操作来完成此操作。在以下示例中，我已经将`mylist.csv`保存为`mylist_wincsv.csv`（Windows
    CSV格式），并且读取文件内容不再有问题：
- en: '[PRE2]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding code example, we print a part of the data from the CSV file.
    If you realize, a CSV file can also be read as a 2D list in Python with the first
    index as row and the second index as column. Here we print the second, third,
    and fourth columns from `row1` and `row2`:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们打印了CSV文件的一部分数据。如果您意识到，CSV文件也可以在Python中以2D列表的形式读取，其中第一个索引是行，第二个索引是列。在这里，我们打印了`row1`和`row2`的第二、第三和第四列：
- en: '![How to do it...](img/image_03_004.jpg)'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/image_03_004.jpg)'
- en: 'With Python, it''s also very convenient to read the contents of a CSV file
    in a dictionary with a helpful `DictReader(f)` method:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Python，使用有帮助的`DictReader(f)`方法在字典中读取CSV文件的内容也非常方便：
- en: '[PRE3]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding code snippet, we open the file with the file handle, `f`.
    This file handle is then used as an argument to `DictReader()`, which will treat
    the first row values as column names. These column names act as a key in the dictionary
    where the data gets stored. So, in the preceding program, we can selectively print
    the data from three columns: **first_name**, **last_name**, and **e-mail** and
    print them like in the following screenshot:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用文件句柄`f`打开文件。然后，这个文件句柄被用作`DictReader()`函数的参数，该函数将第一行的值视为列名。这些列名作为字典中的键，数据被存储在其中。因此，在前面的程序中，我们可以选择性地打印三个列的数据：**first_name**、**last_name**和**e-mail**，并像以下截图所示打印它们：
- en: '![How to do it...](img/image_03_005.jpg)'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/image_03_005.jpg)'
- en: 'The `csv` module''s `DictReader()` has a few helper methods and attributes
    that make it easy to read CSV files. These are also known as **reader objects**:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`csv`模块的`DictReader()`有几个辅助方法和属性，使得读取CSV文件变得容易。这些也被称为**读取对象**：'
- en: '[PRE4]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this code example, we used the following attributes and method:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码示例中，我们使用了以下属性和方法：
- en: '`fieldnames`: Gives list of column names'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fieldnames`：提供列名列表'
- en: '`dialect`: CSV file format (we ''ll read more about it)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect`：CSV文件格式（我们将在后面了解更多）'
- en: '`line_num`: Current line number being read'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`line_num`：当前读取的行号'
- en: '`next()`: Takes you to the next line'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`next()`：带你到下一行'
- en: 'In the following screenshot, the first line contains all the column names from
    our CSV file. In the second line, we print the dialect used to read the CSV file.
    The third line prints the line number we''re currently reading, and the last line
    of the screenshot depicts the next line that the reader object will move to while
    reading:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，第一行包含我们CSV文件中的所有列名。在第二行中，我们打印了用于读取CSV文件的方言。在第三行中打印了当前正在读取的行号，屏幕截图的最后一行描述了读取对象在读取时将移动到的下一行：
- en: '![How to do it...](img/image_03_006.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_03_006.jpg)'
- en: There's more...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The Python module, `csv`, is a helper and it is perfectly possible to process
    a CSV file by opening the file with the `open()` method and reading the file contents
    with the `readline()` method. You can then perform the `split()` operation on
    every line of the file to get the file contents.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Python模块`csv`是一个辅助模块，完全可以通过使用`open()`方法打开文件，并用`readline()`方法读取文件内容来处理CSV文件。然后，你可以对文件的每一行执行`split()`操作，以获取文件内容。
- en: Reading is great, but you'll read something only when something is written in
    a CSV file, isn't it? :) Let's look at the methods available for writing data
    into CSV files in the next recipe.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读是件好事，但只有当有数据写入CSV文件时，你才会去阅读，对吧？ :) 让我们看看下一道菜谱中可用的将数据写入CSV文件的方法。
- en: Writing data into CSV files
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据写入CSV文件
- en: Again, for the recipes in this section, we don't need any new modules apart
    from the ones that are bundled with the Python installation, that is, the `csv`
    module.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，在本节中的菜谱，我们不需要除Python安装捆绑的模块之外的新模块，即`csv`模块。
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, lets open a file in write mode and in text format. We create two Python
    lists that contain the data to be written into the CSV file. The following code
    will perform these operations:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，以写入模式和文本格式打开一个文件。我们创建两个Python列表，包含要写入CSV文件的数据。以下代码将执行这些操作：
- en: '[PRE5]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s now add the data into the CSV file with the `write()` method, as follows:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们使用`write()`方法将数据添加到CSV文件中，如下所示：
- en: '[PRE6]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code, we initialized the CSV file with a header; the column
    names used are: **Sr**., **Names**, and **Grades**. Next, we start a Python `for`
    loop to run four times and write four rows of data into the CSV file. Remember,
    we have the data in the Python lists, `Names` and `Grades`. The `writerow()` method actually
    adds the content in the CSV file, adding a row one by one inside the `for` loop.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用标题初始化了CSV文件；使用的列名是：**Sr**.、**Names**和**Grades**。接下来，我们启动一个Python
    `for`循环，运行四次，并将四行数据写入CSV文件。记住，我们有一个包含在Python列表`Names`和`Grades`中的数据。`writerow()`方法实际上是在`for`循环中逐行添加CSV文件中的内容。
- en: 'The output of the preceding code snippet can be seen in the following screenshot:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码片段的输出可以在下面的屏幕截图中看到：
- en: '![How to do it...](img/image_03_007.jpg)'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_03_007.jpg)'
- en: 'Cool, that was simple and straightforward. It is interesting to note that,
    by default, when we write into a CSV file, the file contents in a row are separated
    by commas. But what if we want to change the behavior to make it separated by
    tabs (`\t`)? The `writer()` method has this facility of changing not only the
    delimiter but also the line terminator. (Note: Delimiter is the character that
    is used to separate the data within a row in a CSV file. The terminator character
    is used to mark the end of a row in a CSV file. You will relate to this in the
    following example):'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 很酷，这很简单直接。值得注意的是，默认情况下，当我们写入CSV文件时，行中的文件内容是用逗号分隔的。但如果我们想改变行为，使其用制表符（`\t`）分隔怎么办？`writer()`方法具有这种改变不仅分隔符，还有行终止符的功能。（注意：分隔符是用于在CSV文件中分隔行内数据的字符。终止字符用于标记CSV文件中行的结束。你将在下面的例子中理解这一点）：
- en: '[PRE7]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When the preceding code snippet is run, a new file, `write.csv`, gets created
    on the filesystem. File contents can be viewed in the following screenshot. If
    you look at the contents in a given row, you will see them separated by tabs and
    not by commas. The new line delimeter is the return key (pressed twice), which
    is also evident in the following screenshot. Note that there''s an extra newline
    character between both the rows:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当运行前面的代码片段时，在文件系统中会创建一个新的文件`write.csv`。文件内容可以在下面的屏幕截图中查看。如果你查看给定行中的内容，你会看到它们通过制表符分隔，而不是逗号。新行分隔符是回车键（按两次），这在下面的屏幕截图中也很明显。注意，两行之间有一个额外的换行符：
- en: '![How to do it...](img/image_03_008.jpg)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/image_03_008.jpg)'
- en: Developing your own CSV dialects
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发自己的CSV方言
- en: To make it easier to read and write into CSV files, we can specify the formatting
    parameters that are a part of the `Dialect` class of the `csv` module. Here, we
    look at some of the dialects available and learn how to write our own.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更容易地读取和写入CSV文件，我们可以指定`csv`模块的`Dialect`类中的格式化参数。在这里，我们看看一些可用的方言，并学习如何编写我们自己的。
- en: Getting ready
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the same `csv` module that is present in the default
    installation of Python, so there is no need to install anything explicitly.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们将使用Python默认安装中存在的相同`csv`模块，因此不需要显式安装任何东西。
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s first look at some of the attributes that are present in the `Dialect`
    class:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先看看`Dialect`类中存在的一些属性：
- en: '`Dialect.delimeter`: We used this in the previous recipe where we changed the
    way the contents are written in the row of a CSV file. It is used to separate
    two fields.'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialect.delimeter`：我们在之前的食谱中使用过这个属性，用来改变CSV文件行中内容写入的方式。它用于分隔两个字段。'
- en: '`Dialect.lineterminator`: This is used to signify the termination of a line
    added in a CSV file. We also used this in our previous section.'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialect.lineterminator`：这个属性用于表示CSV文件中行的终止。我们也在前面的部分中使用过它。'
- en: '`Dialect.skipinitialspace`: This will skip all the leading spaces after a delimiter.
    It helps avoid accidental human error.'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialect.skipinitialspace`：这将跳过分隔符之后的所有前导空格。它有助于避免人为错误。'
- en: 'We can get a list of the available dialects with the following code:'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码获取可用方言的列表：
- en: '[PRE8]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The two main dialects available are `excel` and `excel-tab`. The `excel` dialect
    is for working with data in the default export format for Microsoft Excel, and
    also works with OpenOffice or NeoOffice.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用的两个主要方言是`excel`和`excel-tab`。`excel`方言用于处理Microsoft Excel的默认导出格式中的数据，并且也适用于OpenOffice或NeoOffice。
- en: 'Let''s now create a dialect of our choice. For instance, we choose the `-`
    symbol to demarcate columns in a CSV file:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们创建一个我们选择的方言。例如，我们选择`-`符号来分隔CSV文件中的列：
- en: '[PRE9]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We create a file, `pipes.csv`, which looks as follows:![How to do it...](img/image_03_009.jpg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`pipes.csv`的文件，如下所示：![如何做...](img/image_03_009.jpg)
- en: 'If we run the preceding Python code on the `pipes.csv` file it returns every
    line as an array with all the elements split by the `-` character. The following screenshot
    shows the output of our program:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们在`pipes.csv`文件上运行前面的Python代码，它将返回每行作为一个数组，所有元素通过`-`字符分割。下面的屏幕截图显示了程序输出：
- en: '![How to do it...](img/image_03_010.jpg)'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/image_03_010.jpg)'
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the second code snippet, we register our own dialect with the `register_dialect()`
    method. We have named our dialect as `pipes` and the delimiter associated with
    `pipes` is the symbol `-`, as we intended to do.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个代码片段中，我们使用`register_dialect()`方法注册了我们自己的方言。我们将其命名为`pipes`，与`pipes`关联的分隔符是符号`-`，正如我们打算做的。
- en: We now read the `pipes.csv` file with our very own `read()` method, and use
    the reader object to get the contents of the CSV file. But wait, did you see the
    use of `dialect='pipes'`? This will make sure that the reader expects the columns
    to be separated by `-` and reads the data accordingly.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在使用我们自己的`read()`方法读取`pipes.csv`文件，并使用读取器对象获取CSV文件的内容。但是，你看到了`dialect='pipes'`的使用吗？这将确保读取器期望列通过`-`分隔，并相应地读取数据。
- en: If you observe, the `reader` object has split rows based on `-`, which is defined
    by the dialect, `pipes`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你观察，`reader`对象根据方言`pipes`定义的`-`分割行。
- en: You learned about reading and writing your own data into CSV files. You also
    understood the usage of dialects. It's time to get a feel of how to use the preceding concepts
    with a real-world use case.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了如何将你自己的数据读取和写入CSV文件。你也理解了方言的用法。现在是时候感受一下如何使用前面的概念与实际用例相结合了。
- en: Managing employee information in an automated way
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以自动化的方式管理员工信息
- en: Mike is the HR Manager of his organization and is trying to gather the contact
    information of all the employees from the state of California. He wants to segregate
    this information so that he can conduct a survey on all employees from the CA
    State. He not only wants to collect this information but also persist it to another
    CSV file so that it is easy to work on it at a later point in time.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 迈克是他的组织的HR经理，他正在尝试收集加利福尼亚州所有员工的联系信息。他希望将这些信息分类，以便他对加利福尼亚州的员工进行问卷调查。他不仅想要收集这些信息，还希望将其持久化到另一个CSV文件中，以便在以后的时间更容易地处理。
- en: Can we help Mike here? How do you apply the concepts you learned so far? Will
    you learn something more while helping Mike? Let's look at the implementation.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能帮助迈克吗？你如何应用你到目前为止学到的概念？在帮助迈克的过程中，你会学到更多吗？让我们看看实现方法。
- en: Getting ready
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We don't need any special modules for this example. All the modules that have
    been installed as part of the previous recipes are enough for us. For this example,
    we use the same `mylist.csv` file that contained the employee information.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我们不需要任何特殊的模块。之前作为食谱的一部分安装的所有模块对我们来说都足够了。对于这个例子，我们使用包含员工信息的相同`mylist.csv`文件。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let's directly get to the code and open the two files. One file handle is used
    for reading the file contents (to read the employee data) and the other one is
    used for writing into the `CA_Employees.csv` file. Note the differences in the
    mode in which the files are opened (`'rt'` and `'wt'`). Of course, the employee
    CSV file is opened in the read mode and the `CA_Employees.csv` file is opened
    in the write mode.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们直接进入代码，打开这两个文件。一个文件句柄用于读取文件内容（读取员工数据），另一个用于写入`CA_Employees.csv`文件。注意文件打开模式的不同（`'rt'`和`'wt'`）。当然，员工CSV文件是以读取模式打开的，而`CA_Employees.csv`文件是以写入模式打开的。
- en: '[PRE10]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, we read the employee information from the CSV file as a dictionary with
    the `DictReader()` method. We also create a `csvWriter` object, using which we
    will write the data into the `CA_Employees.csv` file.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用`DictReader()`方法从CSV文件中以字典的形式读取员工信息。我们还创建了一个`csvWriter`对象，我们将使用它将数据写入`CA_Employees.csv`文件。
- en: 'You would imagine when we start reading the rows of the CSV file, we''d also
    read the first row. We should skip this row as this just contains the column names,
    right? Yes, we skip the header using the `line_num` attribute of the `reader`
    object (Remember, we learned about attributes earlier in this chapter). Once the
    header is skipped, we iterate over all the rows and filter out employees who belong
    to the `CA`  State and get the e-mail and phone information for these employees.
    The filtered data is then written into the `CA_Employees.csv` file with the `csvWriter`
    object. Note that once the file operations are complete, it is important to close
    the file handles as this may result in memory leaks or data inconsistencies:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能会想象，当我们开始读取CSV文件的行时，我们也会读取第一行。我们应该跳过这一行，因为它只包含列名，对吧？是的，我们使用`reader`对象的`line_num`属性来跳过标题行（记住，我们之前在本章中学习了属性）。一旦跳过了标题行，我们就遍历所有行，筛选出属于`CA`州的员工，并获取这些员工的电子邮件和电话信息。然后，使用`csvWriter`对象将这些筛选后的数据写入`CA_Employees.csv`文件。请注意，一旦文件操作完成，关闭文件句柄非常重要，因为这可能会导致内存泄漏或数据不一致：
- en: '[PRE11]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'When we run the preceding program in its entirety, we will get a `CA_Employees.csv` file
    that looks like the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行前面的程序时，我们将得到一个`CA_Employees.csv`文件，其外观如下所示：
- en: '![How it works...](img/image_03_011.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image_03_011.jpg)'
- en: If you look at the code implementation, we use the `line_num` attribute to skip
    the header row, which is the first row of the `mylist.csv` file. We also write
    the filtered data into the newly created `CA_Employees.csv` file with the `writerow()`
    method. Nice work, I think Mike is already happy with you. His problems are solved.
    :)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看代码实现，我们使用`line_num`属性来跳过标题行，即`mylist.csv`文件的第一行。我们还使用`writerow()`方法将筛选后的数据写入新创建的`CA_Employees.csv`文件。做得好，我认为迈克已经对你很满意了。他的问题已经解决了。:)
- en: We come to an end of this section on working with CSV files. CSV files essentially
    store data in pure text format. We can't achieve many things with these files,
    hence the advent of Excel sheets. In the next recipe, we start working with Excel
    sheets and appreciate what they can offer!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们结束了关于处理CSV文件的这一部分。CSV文件本质上以纯文本格式存储数据。我们无法用这些文件做很多事情，因此Excel工作表的出现。在下一个菜谱中，我们将开始处理Excel工作表，并欣赏它们能提供什么！
- en: Reading Excel sheets
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取Excel工作表
- en: As you might be aware, Microsoft office has started providing a new extension
    to Microsoft Excel sheets, which is `.xlsx`, from Office 2007\. With this change,
    Excel sheets moved to a XML based file format (Office Open XML) with ZIP compression.
    Microsoft made this change when the business community asked for an open file
    format that can help transferring data across applications that pushed them. Let's
    gets started and see how we can work with Excel sheets using Python!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，Microsoft Office已经开始为Microsoft Excel工作表提供一个新的扩展名`.xlsx`，从Office 2007开始。随着这一变化，Excel工作表转向基于XML的文件格式（Office
    Open XML）并使用ZIP压缩。当商业社区要求一个可以帮助在不同应用程序之间传输数据的开放文件格式时，Microsoft做出了这一改变。让我们开始并看看我们如何使用Python处理Excel工作表！
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we use the `openpyxl` module to read Excel sheets. The `openpyxl` module
    is a comprehensive module that performs both read and write operations on Excel
    sheets. Another alternative to `openpyxl` is the `xlrd` module. While `xlrd` has
    been good at supporting Excel formats since way back in 1995, the module can only
    be used to read data from Excel sheets. The `openpyxl` module helps in performing
    more operations, such as modifying data, writing data into files, and copying,
    which are imperative to working with Excel files.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们使用`openpyxl`模块来读取Excel工作表。`openpyxl`模块是一个全面的模块，它对Excel工作表执行读取和写入操作。`openpyxl`的另一个替代模块是`xlrd`。虽然`xlrd`自1995年以来一直擅长支持Excel格式，但该模块只能用于从Excel工作表中读取数据。`openpyxl`模块有助于执行更多操作，如修改数据、将数据写入文件以及复制，这些对于处理Excel文件至关重要。
- en: 'Let''s install the `openpyxl` module with our favorite tool, `pip`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用我们最喜欢的工具`pip`安装`openpyxl`模块：
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How to do it...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We start by creating our own Excel sheet with the content as shown in the following
    screenshot. As you must be aware, Excel files are called **workbooks** and contain
    one or more worksheets, and hence Excel files are also known as **spreadsheets**.
    We save the file as `myxlsx.xlsx` in two sheets, **People** and  **Items**:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先创建自己的Excel工作表，内容如以下截图所示。你必须知道，Excel文件被称为**工作簿**，包含一个或多个工作表，因此Excel文件也被称为**电子表格**。我们将文件保存为`myxlsx.xlsx`，在两个工作表**人员**和**物品**中：
- en: 'Let''s look at the data from the **People** sheet:'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们看看**人员**工作表中的数据：
- en: '![How to do it...](img/image_03_012.jpg)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/image_03_012.jpg)'
- en: 'Now, let''s look at the data from the **Items** sheet:'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，让我们看看**物品**工作表中的数据：
- en: '![How to do it...](img/image_03_013.jpg)'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/image_03_013.jpg)'
- en: 'Let''s now go ahead and read the XLSX file. The following code will help us
    in getting the names of all the worksheets present in the Excel workbook:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们继续前进并读取XLSX文件。以下代码将帮助我们获取Excel工作簿中所有工作表的名称：
- en: '[PRE13]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, if you want to work with a given sheet, how do you get access to that
    object? The following code snippet, takes us to the **People** worksheet:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你想处理一个特定的工作表，你如何访问该对象？下面的代码片段将我们带到**人员**工作表：
- en: '[PRE14]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Wow, that's cool!
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 哇，这太酷了！
- en: 'Let''s now move ahead and read the cell objects. We can read the cells either
    by the name or based on the row/column location. The following code snippet demonstrates
    this:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们继续前进，阅读单元格对象。我们可以通过名称或基于行/列位置来读取单元格。下面的代码片段展示了这一点：
- en: '[PRE15]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'But how do I get the values in the cell? Simple enough, object.value returns
    you the value present in the cell:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但我如何获取单元格中的值呢？很简单，`object.value`返回单元格中存在的值：
- en: '[PRE16]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If we run the Python code snippet, we will get the following output as seen
    in this screenshot:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们运行Python代码片段，我们将得到以下输出，如本截图所示：
- en: '![How to do it...](img/image_03_014.jpg)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/image_03_014.jpg)'
- en: How it works...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the preceding example, we import the `openpyxl` module. This module has a
    method with which you can access the worksheet objects and cells in it. The `load_workbook()` method
    loads the complete Excel sheet in the memory. The `get_sheet_names()` and `get_sheet_by_name()` methods
    help in selecting the worksheets of the given workbook. Thus, we have the workbook
    and worksheet objects ready with us.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们导入了 `openpyxl` 模块。这个模块有一个方法，可以用来访问工作表对象及其中的单元格。`load_workbook()` 方法将整个
    Excel 表格加载到内存中。`get_sheet_names()` 和 `get_sheet_by_name()` 方法有助于选择给定工作簿的工作表。因此，我们已经准备好了工作簿和工作表对象。
- en: The cell objects can be accessed with the `cell()` method, and `cell().value`
    returns the actual value present in the cell of worksheet. Nice, see how trivial
    it is to read data from Excel sheets with Python. But again, reading is only helpful
    if we know how to write data into Excel sheets. So, what are we waiting for? Let's
    go ahead and learn that as well in the next recipe.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 单元格对象可以通过 `cell()` 方法访问，而 `cell().value` 返回工作表单元格中实际存在的值。不错，看看用 Python 从 Excel
    表格中读取数据是多么简单。但再次强调，读取数据只有在我们知道如何将数据写入 Excel 表格时才有用。所以，我们还在等什么呢？让我们继续学习如何在下一菜谱中做到这一点。
- en: Writing data into worksheets
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据写入工作表
- en: Reading files is a breeze with the `openpyxl` module. Now, let's shift our focus
    to writing Excel files. We'll perform multiple operations with Excel files in
    this section.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `openpyxl` 模块读取文件非常简单。现在，让我们将注意力转向写入 Excel 文件。在本节中，我们将对 Excel 文件执行多个操作。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we will use another fantastic Python module, which is `xlsxwriter`.
    As the name suggests, this module help us perform multiple operations on Excel
    sheets. Interestingly, `xlsxwriter` doesn''t support read operations on an Excel
    sheet (at the time of writing this book). We install the `xlsxwrite` module using
    `pip`, as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用另一个非常棒的 Python 模块，即 `xlsxwriter`。正如其名所示，这个模块帮助我们执行 Excel 表格上的多个操作。有趣的是，`xlsxwriter`
    不支持在 Excel 表格上执行读取操作（在撰写本书时）。我们使用以下方式安装 `xlsxwrite` 模块：
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How to do it...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We start with a very basic operation of creating an XLSX file and adding a
    new sheet to it. The following code performs this operation:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从一个非常基础的创建 XLSX 文件并添加新工作表的操作开始。以下代码执行了这个操作：
- en: '[PRE18]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s move ahead and perform the `write` operations on the worksheet and store
    some useful information:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们继续前进，并在工作表上执行 `write` 操作，存储一些有用的信息：
- en: '[PRE19]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first code snippet of this recipe creates a `workbook` object with the `Workbook()`
    method under a new Excel file, `add_sheet.xlsx`. It then goes ahead and creates
    a `worksheet` object with the `add_worksheet()` method. A new sheet named `New
    Sheet 2` is created.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱的第一个代码片段使用 `Workbook()` 方法在新的 Excel 文件 `add_sheet.xlsx` 下创建了一个 `workbook`
    对象。然后，它继续使用 `add_worksheet()` 方法创建了一个 `worksheet` 对象。创建了一个名为 `New Sheet 2` 的新工作表。
- en: 'In the second code example, we create an XLSX file named `Expenses01.xlsx`.
    We add the expenses data to it from the `expenses` dictionary. For doing this,
    we iterate through the dictionary and use the keys as one column and the values
    as another column in the Excel sheet. Finally, we add one last row that sums up
    all the expenses. The contents of `Expenses01.xlsx` are shown in the following
    screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个代码示例中，我们创建了一个名为 `Expenses01.xlsx` 的 XLSX 文件。我们从 `expenses` 字典中添加了费用数据。为此，我们遍历字典，使用键作为
    Excel 表格中的一列，而值作为另一列。最后，我们添加了一行，汇总了所有费用。`Expenses01.xlsx` 的内容如下截图所示：
- en: '![How it works...](img/image_03_015.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_03_015.jpg)'
- en: In the preceding code snippets, we performed simple write operations on an Excel
    sheet with the `xlsxwrite` module. We first created a workbook with the `Workbook()`
    method and added a new `sheet` object to this workbook with the `add_worksheet()`
    method. Using the `write()` method on the `worksheet` object, we added data to
    the Excel sheet. We also did a small formula operation to get the total of all
    expenses with `=SUM(B1:B4)`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用 `xlsxwrite` 模块在 Excel 表格上执行了简单的写入操作。我们首先使用 `Workbook()` 方法创建了一个工作簿，然后使用
    `add_worksheet()` 方法向该工作簿添加了一个新的 `sheet` 对象。通过在 `worksheet` 对象上使用 `write()` 方法，我们将数据添加到
    Excel 表格中。我们还执行了一个小公式操作，使用 `=SUM(B1:B4)` 获取所有费用的总和。
- en: What we saw was a very basic example of writing Excel files. We could perform
    many more operations programmatically as we are used to doing manually on Excel
    sheets. Let's now learn how to format Excel cells in the next set of recipes.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所看到的是一个非常基础的编写 Excel 文件的例子。我们可以像在 Excel 表格上手动操作那样，通过编程执行更多的操作。现在，让我们学习如何在下一组菜谱中格式化
    Excel 单元格。
- en: Formatting Excel cells
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化 Excel 单元格
- en: Cells are formatted for various reasons. In the business world, they are used
    to group data based on a theme, or in the case of a software development process,
    cells are colored to indicate whether a feature is done or a bug is fixed.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 单元格格式化有多种原因。在商业世界中，它们用于根据主题分组数据，或者在软件开发过程中，单元格被着色以指示功能是否完成或错误是否已修复。
- en: Getting ready
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the same `xlsxwriter` module and format the cells.
    We will learn how to add and apply formats to the cells.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用相同的 `xlsxwriter` 模块并格式化单元格。我们将学习如何添加和应用于单元格格式。
- en: How to do it...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We continue with the expenses example to demonstrate the formatting of cells.
    But first let''s understand how to create formats. Formats are added with the
     `add_format()` method. This method returns a `format` object. The following code
    example shows how to create a format:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们继续使用支出示例来演示单元格的格式化。但首先让我们了解如何创建格式。格式是通过 `add_format()` 方法添加的。以下代码示例显示了如何创建一个格式：
- en: '[PRE20]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding example, we created a cell format, wherein the data in the
    cell (to which the format is applied) is `bold` and color is set to `green`.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们创建了一个单元格格式，其中单元格（应用了该格式的单元格）中的数据是加粗的，颜色设置为 `绿色`。
- en: 'Coming back to the example of expenses sheet, how about highlighting the cells
    where the expenses have gone above 150? Yes, we can do that programmatically by
    creating a format to highlight the cells in red. But let''s go in order. First,
    we create a sheet and add data to it, as in the following code:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到支出表格的例子，如何突出显示超过 150 的单元格？是的，我们可以通过创建一个格式来突出显示红色单元格的程序化方式来实现。但让我们按顺序来做。首先，我们创建一个表格并向其中添加数据，如下面的代码所示：
- en: '[PRE21]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding code will create an Excel sheet named `cell_format.xlsx` and add
    expenses to it.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码将创建一个名为 `cell_format.xlsx` 的 Excel 表格，并向其中添加支出。
- en: 'Now, let''s create a format where the cells are colored with blue and the cell
    values will be in red. We could set the format with the `set_font_color()` method,
    but in the following example, we set the format through options like `''bg_color''`
    and `''font_color''`:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个格式，其中单元格被着色为蓝色，单元格值将显示为红色。我们可以使用 `set_font_color()` 方法设置格式，但在以下示例中，我们通过
    `'bg_color'` 和 `'font_color'` 等选项设置格式：
- en: '[PRE22]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, the only remaining step is to apply this format on the expenses that are
    above 150\. The following code applies the format and respects the condition:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，唯一剩下的步骤是将此格式应用于超过 150 的支出。以下代码应用了格式并遵守了条件：
- en: '[PRE23]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When we run this program, the contents of the `cell_format.xlsx` file looks
    as shown in the following screenshot:'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们运行这个程序时，`cell_format.xlsx` 文件的内容看起来如下面的截图所示：
- en: '![How to do it...](img/image_03_016.jpg)'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/image_03_016.jpg)'
- en: There's more...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Cool, so now that we have the cell formatting done, how about moving on to working
    with formulas in Excel sheets?
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了，现在我们已经完成了单元格格式化，接下来我们如何继续在 Excel 表格中处理公式？
- en: Playing with Excel formulae
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩转 Excel 公式
- en: We take a very simple example to demonstrate the use of formulae in Excel sheets.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用一个非常简单的例子来演示在 Excel 表格中使用公式。
- en: Getting ready
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the same `xlsxwriter` module and add formulae to
    the cells. There are numerous operations that are supported by Excel sheets, such
    as getting standard deviation of data, logarithm, getting trends among others,
    so it's worth spending time to understand the majority of available operations.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用相同的 `xlsxwriter` 模块，并在单元格中添加公式。Excel 表格支持许多操作，例如获取数据的标准差、对数、获取趋势等，因此花时间了解大多数可用操作是值得的。
- en: How to do it...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'You need to perform the following step:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要执行以下步骤：
- en: 'We work with a simple example, wherein we add a list of numbers with the  `SUM()`
    formula and store the sum to the cell **A1**:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个简单的例子，其中我们使用 `SUM()` 公式添加一个数字列表，并将总和存储在单元格 **A1** 中：
- en: '[PRE24]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When we run the preceding code, a new Excel file, `formula.xlsx` gets created
    with cell **A1** containing the number **6** (addition of `1`, `2`, and `3`).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行前面的代码时，会创建一个新的 Excel 文件，名为 `formula.xlsx`，其中单元格 **A1** 包含数字 **6**（`1`、`2`
    和 `3` 的和）。
- en: As in the preceding section, we can perform more complex mathematical operations
    using Excel formulae. For instance, you can plan the yearly IT budget for your
    team in an Excel sheet.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们可以使用 Excel 公式执行更复杂的数学运算。例如，你可以在 Excel 表格中规划你团队的年度 IT 预算。
- en: There's more...
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There's no fun if we don't discuss about charts and finish a chapter on Excel
    sheets. Yes, in the next section we will talk about working with Excel charts.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不讨论图表并完成关于Excel工作表的章节，那就没有乐趣了。是的，在下一节中，我们将讨论如何使用Excel图表。
- en: Building charts within Excel sheets
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Excel工作表中构建图表
- en: Excel sheets are capable of building a variety of charts, including line chart,
    bar chart, and pie charts among others that help us depict trends and visualize
    data.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Excel工作表能够构建各种图表，包括折线图、柱状图和饼图等，帮助我们描绘趋势和可视化数据。
- en: Getting ready
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the same `xlsxwriter` module and use methods defined
    in the module to build charts.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用相同的`xlsxwriter`模块，并使用模块中定义的方法来构建图表。
- en: How to do it...
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this example, we will write a column in an Excel file that is filled with
    numbers. We can take the values in all the cells and construct a line chart:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将在Excel文件中写入一个列，其中填充了数字。我们可以取所有单元格的值并构建一个折线图：
- en: '[PRE25]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the preceding code snippet, we have a list of data that has integer values
    ranging from `10` to `50`. As usual, we create a workbook with the `Workbook()`
    method and add a default **Sheet1** worksheet. We then write a new column with
    all the numbers present in the list data.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们有一个整数值从`10`到`50`的数据列表。像往常一样，我们使用`Workbook()`方法创建一个工作簿，并添加一个默认的**Sheet1**工作表。然后我们写入一个新的列，其中包含列表数据中的所有数字。
- en: The `add_chart()` method then defines the type of chart. In this case, it's
    a line chart. The `add_chart()` method returns an object of type chart. But simply
    creating an object doesn't help. How will the chart know the data points to be
    plotted? This happens with the `add_series()` method that takes the cell values
    to plot the graph. In this case, the cell ranges from **A1** to **A6** (remember
    we have added all the numbers from the `data` list to column **A** beginning at
    **A1**).
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`add_chart()`方法随后定义了图表的类型。在这种情况下，它是一个折线图。`add_chart()`方法返回一个图表类型的对象。但仅仅创建一个对象是没有帮助的。图表将如何知道要绘制的数据点？这是通过`add_series()`方法实现的，该方法接受用于绘制图表的单元格值。在这个例子中，单元格范围从**A1**到**A6**（记住我们已将`data`列表中的所有数字添加到从**A1**开始的列**A**中）。'
- en: Once the chart is ready, it should also be added on to the Excel sheet. This
    is achieved with the `insert_chart()` method that takes the cell name and chart
    object as arguments. In this example, the chart is inserted at cell **C1**.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦图表准备就绪，它也应该添加到Excel工作表中。这是通过`insert_chart()`方法实现的，该方法接受单元格名称和图表对象作为参数。在这个例子中，图表被插入到单元格**C1**。
- en: When we run this program, a new file `chart_line.xlsx` gets created with the
    line graph inserted in it. The following screenshot shows the line graph and plotted
    data:![How to do it...](img/image_03_017.jpg)
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们运行这个程序时，会创建一个新的文件`chart_line.xlsx`，其中插入了折线图。以下截图显示了折线图和绘制的数据：![如何操作...](img/image_03_017.jpg)
- en: Automating the comparison of company financials
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动比较公司财务
- en: Our recipes on Excel sheets covered multiple aspects like reading/writing files,
    formatting cells, working with formulae, and charts. Let's solve a nice business
    case with the knowledge we gained in this chapter.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Excel工作表上的菜谱涵盖了多个方面，如读取/写入文件、格式化单元格、处理公式和图表。让我们用本章获得的知识解决一个美好的商业案例。
- en: Monica is a Finance manager at Xtel Inc and is responsible for the company's
    earnings. Xtel Inc is looking for funding, and Monica is tasked with comparing
    the company financials based on the income statements of the last three years.
    This data will go to the investors so that they can make an appropriate decision
    about investing in Xtel Inc. Getting this data for three years will be easy, but
    the CFO of Xtel has asked Monica to get this data on a month-on-month basis for
    the last 5 years. Monica is worried about comparing the company financials for
    60 months manually! With the knowledge gained in this chapter, do you think you
    can help Monica?
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Monica是Xtel Inc的财务经理，负责公司的收益。Xtel Inc正在寻找资金，Monica的任务是根据过去三年的收入报表比较公司的财务状况。这些数据将提交给投资者，以便他们可以就投资Xtel
    Inc做出适当的决定。获取三年的数据将很容易，但Xtel的CFO要求Monica获取过去5年的月度数据。Monica担心手动比较60个月的财务数据！在本章中获得的知识，你认为你能帮助Monica吗？
- en: Getting ready
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Lets solve Monica's problem with a Python recipe. For this recipe, we will compare
    the financials of the last three years for Xtel Inc and plot the comparison in
    an Excel sheet using Python. We will do that with the help of the factors influencing the
    company's income statement, that is, the revenue, costs, and gross profits.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用 Python 菜谱来解决 Monica 的问题。为此菜谱，我们将比较 Xtel Inc 过去三年的财务状况，并使用 Python 在 Excel
    工作表中绘制比较图。我们将借助影响公司利润表的因素，即收入、成本和毛利润来完成这项工作。
- en: How to do it...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: In the following code, we first add the information on the company financials,
    such as revenue, the cost of goods sold, and the gross profit. Assume that we
    have this data in a Python list `data`.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下代码中，我们首先在工作表中添加公司财务信息，例如收入、销售成本和毛利润。假设我们有一个包含这些数据的 Python 列表 `data`。
- en: 'We then plot these values in a column chart and also calculate the net gain
    in percentages using Excel formulae. The following code snippet does exactly what
    Monica needs:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用柱状图绘制这些值，并使用 Excel 公式计算净增益百分比。以下代码片段正是 Monica 需要的：
- en: '[PRE26]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: When we run this Python program, a new Excel sheet is generated that compares
    the company's financial performance across three years, as shown in the following
    screenshot. Exactly what Monica wanted! :)![How to do it...](img/image_03_018.jpg)
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们运行这个 Python 程序时，会生成一个新的 Excel 工作表，比较公司三年来的财务表现，如下面的截图所示。这正是 Monica 想要的！ :)![如何做到这一点...](img/image_03_018.jpg)
- en: How it works...
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the preceding code snippet, we collect the data of the company financials
    in a Python list, `data`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们将公司财务数据收集到一个 Python 列表 `data` 中。
- en: Using the `xlsxwriter` module, we create a workbook object and then add a worksheet
    to it with the `add_worksheet()` method.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `xlsxwriter` 模块，我们创建一个工作簿对象，然后使用 `add_worksheet()` 方法向其中添加一个工作表。
- en: Once we have the worksheet and the data, we start writing the data into the
    worksheet with the `write_row()` method.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了工作表和数据，我们就开始使用 `write_row()` 方法将数据写入工作表。
- en: We also add a chart object to our worksheet. This will help us add bar charts
    for comparing the company financials of the last three years easily. We add the
    chart object using the `add_chart()` method.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在工作表中添加了一个图表对象。这将帮助我们轻松地添加比较过去三年公司财务状况的条形图。我们使用 `add_chart()` 方法添加图表对象。
- en: Since we have the data already populated in our sheet, we use this data to create
    bar charts for all three years using the `add_series()` method. The `add_series()`
    method takes the excel cells as parameters and plots the bar chart for the data
    in these cells. Finally, we insert the chart object (and the bar charts) in the
    worksheet with the `insert_chart()` method.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经将数据填充到我们的工作表中，我们使用这些数据通过 `add_series()` 方法创建所有三年的条形图。`add_series()` 方法接受
    Excel 单元格作为参数，并绘制这些单元格中的数据条形图。最后，我们使用 `insert_chart()` 方法将图表对象（以及条形图）插入到工作表中。
- en: At last, we add the gain figures for all the years with excel formula using
    the `write()` method.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用 Excel 公式和 `write()` 方法添加所有年份的增益数据。
- en: Cool! That was easy, you did it for Monica! She can modify this Python code
    snippet to compare the company financials for all the data points she needs and
    that too in a very short time. Indeed, the CEO of Xtel Inc will be very happy
    with her work!
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！这很简单，你为 Monica 做到了！她可以修改这个 Python 代码片段来比较她需要的所有数据点的公司财务状况，而且还能在非常短的时间内完成。确实，Xtel
    Inc 的 CEO 会非常高兴她的工作的！
- en: There's more...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Well guys, that's it for this chapter. The fun with CSV and Excel files never
    ceases. There are many more operations that you can perform with these files,
    and they can be used in different ways in the business and software development
    world. So, I highly recommend you to try out the modules we discussed in this
    chapter and build on them for your own use case. See you in the next chapter!
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，伙计们，这就是本章的全部内容。与 CSV 和 Excel 文件一起的乐趣永远不会停止。你可以用这些文件执行许多其他操作，它们可以在商业和软件开发世界中以不同的方式使用。因此，我强烈建议你尝试本章中讨论的模块，并根据自己的用例构建它们。下章再见！
