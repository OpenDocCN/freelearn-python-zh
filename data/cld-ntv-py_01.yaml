- en: Introducing Cloud Native Architecture and Microservices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍云原生架构和微服务
- en: 'Here we go! Before we begin to build our application, we need to find answers
    to some of the following queries:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始吧！在我们开始构建应用程序之前，我们需要找到以下一些问题的答案：
- en: What is cloud computing? What are its different types?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是云计算？它有哪些不同类型？
- en: What is microservices and its concept?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是微服务及其概念？
- en: What are the basic requirements for good to go?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是好去做的基本要求？
- en: In this chapter, we will focus on the different concepts that a developer or
    application programmer should understand before they start writing an application.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于开发人员或应用程序员在开始编写应用程序之前应该了解的不同概念。
- en: Let's first understand a bit about system building and how it evolves.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先了解一下系统构建及其演变。
- en: For a long time now, we have been discovering better approaches to constructing
    frameworks. With advances in new technologies and adoption of better approaches,
    the IT framework becomes more reliable and effective for clients (or customers),
    and makes engineers happy.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 长期以来，我们一直在寻找构建系统的新方法。随着新技术的进步和更好方法的采用，IT基础设施变得更加可靠和有效，为客户提供更好的体验，也让工程师感到满意。
- en: Continuous delivery helps us move our software development cycle into production,
    and lets us identify different error-prone perspectives of software, insisting
    on us the idea of considering every check-in to code as a suitable candidate to
    release it to production.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付帮助我们将软件开发周期转移到生产环境，并让我们识别软件中不同易出错的方面，坚持认为每次代码提交都是适合发布到生产环境的候选项。
- en: Our comprehension of how the web functions has driven us to grow better methods
    for having machines converse with other machines. The virtualization platform
    has permitted us to make arrangements and resize our machines freely, with foundation
    computerization giving us an approach to deal with these machines at scale. Some
    huge, effective cloud platforms, such as Amazon, Azure, and Google have embraced
    the perspective of little groups owning the full life cycle of their services.
    Concepts such as **Domain-Driven Design** (**DDD**), **continuous delivery** (**CD**),
    on-request virtualization, infrastructure robotization, small self-governing groups,
    and systems at scale are different traits, which effectively, and efficiently,
    get our software into production. And now, microservices has risen up out of this
    world. It wasn't developed or portrayed before the reality; it rose as a pattern,
    or, for example, from true utilization. All through this book, I will haul strands
    out of this earlier work to help illustrate how to fabricate, oversee, and advance
    microservices.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对互联网运作方式的理解已经推动我们发展出更好的让机器与其他机器交流的方法。虚拟化平台使我们能够独立创建解决方案并调整我们的机器大小，基础设施自动化使我们能够以规模管理这些机器。一些大型、成功的云平台，如亚马逊、Azure和谷歌，已经采纳了小团队拥有其服务的全生命周期的观点。领域驱动设计（DDD）、持续交付（CD）、按需虚拟化、基础设施自动化、小型自治团队和规模化系统等概念是不同特征，它们有效地将我们的软件投入生产。现在，微服务已经从这个世界中崛起。它并不是在现实之前开发或描述的；它是作为一种趋势或者说是从真实使用中崛起的。在本书中，我将从这些先前的工作中提取出一些内容，以帮助说明如何构建、管理和优化微服务。
- en: Numerous associations have found that by grasping fine-grained microservice
    structures, they can convey programming speedily, and grasp more up-to-date advancements.
    Microservices gives us, fundamentally, more flexibility to respond and settle
    on various choices, permitting us to react quickly to the unavoidable changes
    that affect every one of us.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组织发现，通过采用细粒度的微服务结构，他们可以快速交付软件，并掌握更新的技术。微服务基本上给了我们更多的灵活性来做出反应和做出各种决策，允许我们迅速应对不可避免的影响我们所有人的变化。
- en: Introduction to cloud computing
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云计算简介
- en: Before we begin with microservices and cloud native concepts, let's first understand
    what cloud computing is all about.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始微服务和云原生概念之前，让我们先了解一下云计算的基本概念。
- en: '**Cloud computing** is a wide term that portrays a wide scope of administrations.
    Similarly, as with other huge advancements in innovation, numerous merchants have
    grabbed the expression *cloud* and are utilizing it for items that sit outside
    of the basic definition. Since the cloud is an expansive accumulation of administrations,
    associations can pick where, when, and how they utilize cloud computing.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算是一个描述广泛的服务的广泛术语。与技术中的其他重大发展一样，许多供应商都抓住了“云”这个词，并将其用于超出基本定义范围的产品。由于云是一个广泛的服务集合，组织可以选择何时、何地以及如何使用云计算。
- en: 'The cloud computing services can be categorized as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算服务可以分为以下几类：
- en: '**SaaS**: These are baked applications that are ready to be grasped by end
    users'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SaaS：这些是准备好被最终用户接受的成熟应用程序
- en: '**PaaS**: These are a collection of tools and services that are useful for
    users/developers who want to either build their application or quickly host them
    directly to production without caring about the underlying hardware'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PaaS：这些是一组对于想要构建他们的应用程序或快速将其直接托管到生产环境而不必关心底层硬件的用户/开发人员有用的工具和服务
- en: '**IaaS**: This is for customers who want to build their own business model
    and customize it'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IaaS：这是为想要构建自己的业务模型并自定义它的客户提供的服务
- en: 'Cloud computing, as a stack, can be explained as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算作为一个堆栈，可以解释如下：
- en: Cloud computing is often referred to as stack, which is basically a wide range
    of services in which each service is built on top of another under a common term,
    such as **cloud**
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云计算通常被称为堆栈，基本上是一系列服务，其中每个服务都建立在另一个服务的基础上，统称为“云”。
- en: The cloud computing model is considered as a collection of different configurable
    computing resources (such as servers, databases, and storage), which communicate
    with each other, and can be provisioned with minimal supervision
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云计算模型被认为是一组不同的可配置计算资源（如服务器、数据库和存储），它们彼此通信，并且可以在最少监督下进行配置。
- en: 'The following diagram showcases the cloud computing stack components:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了云计算堆栈组件：
- en: '![](img/00005.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00005.jpeg)'
- en: Let's understand cloud computing components in detail, along with their use
    cases.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细了解云计算组件及其用例。
- en: Software as a Service
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件即服务
- en: 'The following are the key points that describe SaaS:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是描述SaaS的关键要点：
- en: '**Software as a Service** (**SaaS**) offers users the ability to access software
    hosted on service provider premises, which is provided as a service over the internet
    through a web browser by a provider. These services are based on subscriptions,
    and are also referred to as on-demand software.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件即服务（SaaS）为用户提供了访问托管在服务提供商场所的软件的能力，通过提供商通过互联网提供的服务作为服务通过Web浏览器。这些服务基于订阅，并且也被称为按需软件。
- en: SaaS-offering companies include the Google Docs productivity suite, Oracle **CRM**
    (**Customer Relationships Management**), Microsoft and their Office 365 offering,
    and Salesforce CRM and QuickBooks.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SaaS提供公司包括谷歌文档生产套件、甲骨文CRM（客户关系管理）、微软及其Office 365提供和Salesforce CRM和QuickBooks。
- en: SaaS can be further categorized as a vertical SaaS that focuses on the needs
    of specific industries, such as healthcare and agriculture, or a horizontal SaaS
    that focuses on the software industry, such as human resources and sales.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SaaS还可以进一步分类为专业SaaS，专注于特定行业的需求，如医疗保健和农业，或横向SaaS，专注于软件行业，如人力资源和销售。
- en: SaaS offerings are, basically, for organizations that quickly want to grasp
    existing applications that are easy to use and understand, even for a non-technical
    person. Based on the organization's usage and budget, enterprises to select support
    plans. Additionally, you can access these SaaS applications from anywhere around
    the globe, and from any device with the internet enabled.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SaaS提供基本上是为那些迅速想要掌握现有应用程序的组织而设计的，这些应用程序易于使用和理解，即使对于非技术人员也是如此。根据组织的使用和预算，企业可以选择支持计划。此外，您可以从全球任何地方的任何设备上访问这些SaaS应用程序，并且具有互联网功能。
- en: Platform as a Service
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台即服务
- en: 'The following are the key points that describe PaaS:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是描述PaaS的关键要点：
- en: In PaaS offerings, the organization/enterprise need not worry about hardware
    and software infrastructure management for their in-house applications
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PaaS提供中，组织/企业无需担心其内部应用程序的硬件和软件基础设施管理
- en: The biggest benefits of PaaS are for the development teams (local or remote),
    which can efficiently build, test, and deploy their applications on a common framework,
    wherein, the underlying hardware and software is managed by the PaaS service provider
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PaaS的最大好处是为开发团队（本地或远程），他们可以在一个共同的框架上高效地构建、测试和部署他们的应用程序，其中底层硬件和软件由PaaS服务提供商管理。
- en: The PaaS service provider delivers the platform, and also provides different
    services around the platform
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PaaS服务提供商提供平台，并在平台周围提供不同的服务
- en: The examples of PaaS providers include Amazon Web Services (AWS Elastic Beanstalk),
    Microsoft Azure (Azure Websites), Google App Engine, and Oracle (Big Data Cloud
    Service)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PaaS提供商的示例包括亚马逊网络服务（AWS Elastic Beanstalk）、微软Azure（Azure网站）、谷歌应用引擎和甲骨文（大数据云服务）
- en: Infrastructure as a Service
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施即服务
- en: 'The following are the key points that describe IaaS:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是描述IaaS的关键要点：
- en: Unlike SaaS offerings, in IaaS, the customer is provided with IT resources,
    such as bare metal machines to run applications, hard disk for storage, and network
    cable for network capability, which they can customize based on their business
    model.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与SaaS不同，在IaaS中，客户提供IT资源，例如裸金属机器来运行应用程序，硬盘用于存储，以及网络电缆用于网络功能，他们可以根据其业务模型进行定制。
- en: In IaaS offerings, since the customer has full access to their infrastructure,
    they can scale their IT resources based on their application requirement. Also,
    in IaaS offerings, the customer has to manage the security of the application/resources,
    and needs to build disaster recovery models in case of sudden failures/crashes.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在IaaS提供中，由于客户可以完全访问其基础设施，他们可以根据其应用程序的要求扩展其IT资源。此外，在IaaS提供中，客户必须管理应用程序/资源的安全性，并需要在突发故障/崩溃时建立灾难恢复模型。
- en: In IaaS, services are on an on-demand basis, where the customer is charged on
    usage. So, it's the customer's responsibility to do cost analysis against their
    resources, which will help restrict them from exceeding their budget.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在IaaS中，服务是按需提供的，客户根据使用情况收费。因此，客户有责任对其资源进行成本分析，这将有助于限制他们超出预算。
- en: It allows customers/consumers to customize their infrastructure based on the
    requirements of the application, then tear down the infrastructure and recreate
    it again very quickly and efficiently.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许客户/消费者根据应用程序的要求定制其基础设施，然后快速高效地拆除基础设施并重新创建。
- en: The pricing model for IaaS-based services is basically on-demand, which means
    you pay as you go. You are charged as per your usage of resources and the duration
    of the usage.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于IaaS的定价模型基本上是按需提供的，这意味着您按需付费。您根据资源的使用和使用时间收费。
- en: Amazon Web Services (offering **Amazon Elastic Compute Cloud** (**Amazon EC2**)
    and **Amazon Simple Storage Service** (**Amazon S3**)) was the first out of the
    gate in this cloud offering; however, players such as Microsoft Azure (virtual
    machine), Rackspace (virtual cloud servers) and Oracle (bare metal cloud services)
    have also made a name for themselves.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊网络服务（提供Amazon Elastic Compute Cloud（Amazon EC2）和Amazon Simple Storage Service（Amazon
    S3））是云服务中的第一个，然而，微软Azure（虚拟机）、Rackspace（虚拟云服务器）和甲骨文（裸金属云服务）等公司也声名显赫。
- en: The cloud native concepts
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生概念
- en: Cloud native is structuring teams, culture, and technology to utilize automation
    and architectures to manage complexity and unlock velocity.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生是构建团队、文化和技术，利用自动化和架构来管理复杂性并释放速度。
- en: The cloud native concept goes beyond the technologies with which it is associated.
    We need to understand how companies, teams, and people are successful in order
    to understand where our industry is going.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生概念超越了与其相关的技术。我们需要了解公司、团队和个人是如何取得成功的，才能了解我们的行业将走向何方。
- en: Currently, companies such as Facebook and Netflix have dedicated a large amount
    of resources working towards cloud native techniques. Even now, small and more
    flexible companies have realized the value of these techniques.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，像Facebook和Netflix这样的公司已经投入了大量资源来研究云原生技术。即使是小型和更灵活的公司现在也意识到了这些技术的价值。
- en: 'With feedback from the proven practices of cloud native, the following are
    some of the advantages that come to light:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过云原生的成熟实践的反馈，以下是一些显而易见的优势：
- en: '**Result-oriented and team satisfaction**: The cloud native approach shows
    the way to break a large problem into smaller ones, which allows each team to
    focus on the individual part.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以结果为导向和团队满意度：云原生方法展示了将一个大问题分解成小问题的方式，这样每个团队可以专注于个别部分。
- en: '**Grunt work**: Automation reduces the repetitive manual tasks that cause operations
    pain, and reduces the downtime. This makes your system more productive, and it
    gives more efficient outcomes.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 繁重的工作：自动化减少了引起运营痛苦的重复手动任务，并减少了停机时间。这使得您的系统更加高效，并且产生更加高效的结果。
- en: '**Reliable and efficient application infrastructure**: Automation brings more
    control over deployment in different environments--whether it is development,
    stage, or production--and also handles unexpected events or failures. Building
    automation not only helps normal deployment, but it also makes deployment easy
    when it comes to a disaster recovery situation.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可靠高效的应用程序基础设施：自动化使得在不同环境中部署更加可控——无论是开发、阶段还是生产环境——并且还可以处理意外事件或故障。构建自动化不仅有助于正常部署，而且在灾难恢复情况下也使部署变得更加容易。
- en: '**Insights over application**: The tools built around cloud native applications
    provide more insights into applications, which make them easy to debug, troubleshoot,
    and audit.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对应用程序的洞察：围绕云原生应用程序构建的工具提供了更多对应用程序的洞察，使它们易于调试、故障排除和审计。
- en: '**Efficient and reliable security**: In every application, the main concern
    is toward its security, and making sure that it is accessible via required channels
    with authentication. The cloud native approach provides different ways for the
    developer to ensure the security of the application.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效可靠的安全性：在每个应用程序中，主要关注点是其安全性，并确保它可以通过所需的渠道进行身份验证。云原生方法为开发人员提供了确保应用程序安全性的不同方式。
- en: '**Cost-effective system**: The cloud approach to managing and deploying your
    application enables efficient usage of resources, which also includes application
    release and, hence, makes the system cost effective by reducing the wastage of
    resources.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本效益的系统：云方法管理和部署您的应用程序使资源的使用更加高效，这也包括应用程序发布，因此通过减少资源的浪费使系统更加具有成本效益。
- en: Cloud native - what it means and why it matters?
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生——它的含义和重要性是什么？
- en: Cloud native is a broad term which makes use of different techniques, such as
    infrastructure automation, developing middleware, and backing services, which
    are basically a part of your application delivery cycle. The cloud native approach
    includes frequent software releases that are bug-free and stable, and can scale
    the application as per the business requirement.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生是一个广义术语，利用不同的技术，如基础设施自动化、开发中间件和支持服务，这些基本上是您的应用程序交付周期的一部分。云原生方法包括频繁的无故障和稳定的软件发布，并且可以根据业务需求扩展应用程序。
- en: Using the cloud native approach, you will be able to achieve your goal toward
    application building in a systematic manner.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用云原生方法，您将能够以系统化的方式实现应用程序构建的目标。
- en: The cloud native approach is much better than the legacy virtualization-oriented
    orchestration, which needs a lot of effort to build an environment suitable for
    development, and then, a far more different one for the software delivery process.
    An ideal cloud native architecture should have automation and composition functionalities,
    which work on your behalf. These automation techniques should also be able to
    manage and deploy your application across different platforms and provide you
    with results.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生方法远比传统的虚拟化导向编排更好，后者需要大量工作来构建适合开发的环境，然后为软件交付过程构建一个完全不同的环境。理想的云原生架构应该具有自动化和组合功能，可以代表您工作。这些自动化技术还应该能够管理和部署您的应用程序到不同的平台，并为您提供结果。
- en: There are a couple of other operation factors that your cloud native architecture
    should be able to identify, such as steady logging, monitoring application and
    infrastructure in order to make sure the application is up and running.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您的云原生架构还应该能够识别一些其他运营因素，如稳定的日志记录、监控应用程序和基础设施，以确保应用程序正常运行。
- en: The cloud native approach really helps developers build their application across
    different platforms using tools such as Docker, which is lightweight and easy
    to create and destroy.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生方法确实帮助开发人员使用诸如Docker之类的工具在不同平台上构建其应用程序，Docker是轻量级且易于创建和销毁的。
- en: The cloud native runtimes
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生运行时
- en: Containers are the best solutions for how to get software to run reliably when
    moved from one computing environment to another. This could be from one developer
    machine to the stage environment into production, and perhaps from a physical
    machine to a virtual machine in a private or public cloud. **Kubernetes** has
    become synonymous with container services, and is getting popular nowadays.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是如何在从一个计算环境移动到另一个计算环境时可靠运行软件的最佳解决方案。这可能是从一个开发者机器到阶段环境，再到生产环境，也可能是从物理机器到私有或公共云中的虚拟机。Kubernetes已经成为容器服务的代名词，并且正在变得越来越流行。
- en: 'With the rise of cloud native frameworks and an increase in the applications
    built around it, the attributes of container orchestration have received more
    attention and usage. Here is what you need from a container runtime:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 随着云原生框架的兴起和围绕其构建的应用程序数量的增加，容器编排的属性受到了更多的关注和使用。以下是您从容器运行时需要的内容：
- en: '**Managing container state and high availability**: Be sure to maintain the
    state (such as create and destroy) of containers, specifically in production,
    as they are very important from a business perspective, and should be able to
    scale as well, based on business needs'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理容器状态和高可用性**：务必在生产环境中维护容器的状态（如创建和销毁），因为这对于业务至关重要，并且应能够根据业务需求进行扩展'
- en: '**Cost analysis and realization**: Containers give you control over resource
    management as per your business budget, and can reduce costs to a large extent'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本分析和实现**：容器可以根据您的业务预算控制资源管理，并且可以大大降低成本'
- en: '**Isolated environment**: Each process that runs within a container should
    remain isolated within that container'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离环境**：在容器内运行的每个进程应保持在该容器内部隔离'
- en: '**Load balancing across clusters**: Application traffic, which is basically
    handled by a cluster of containers, should be redirected equally within the containers,
    which will increase the applications response and maintain high availability'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨集群负载平衡**：应用程序流量基本上由一组容器集群处理，应在容器内平衡重定向，这将增加应用程序的响应并保持高可用性'
- en: '**Debugging and disaster recovery**: Since we are dealing with the production
    system here, we need to make sure we have the right tools to monitor the health
    of the application, and to take the necessary action to avoid downtime and provide
    high availability'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试和灾难恢复**：由于我们在处理生产系统，因此需要确保我们拥有正确的工具来监视应用程序的健康状况，并采取必要的措施以避免停机并提供高可用性'
- en: Cloud native architecture
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生架构
- en: The cloud native architecture is similar to any application architecture that
    we create for a legacy system, but in the cloud native application architecture,
    we should consider a few characteristics, such as a twelve-factor application
    (collection of patterns for app development), microservices (decomposition of
    a monolithic business system into independent deployable services), self-service
    agile infrastructure (self-service platform), API-based collaboration (interaction
    between services via API), and antifragility (self-realizing and strengthening
    the application).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生架构与我们为传统系统创建的任何应用程序架构类似，但在云原生应用程序架构中，我们应该考虑一些特征，例如十二要素应用程序（应用程序开发的模式集合）、微服务（将单块业务系统分解为独立的可部署服务）、自助式敏捷基础设施（自助式平台）、基于API的协作（通过API进行服务之间的交互）和反脆弱性（自我实现和加强应用程序）。
- en: First, let's discuss w*hat is microservices all about?*
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们讨论一下*什么是微服务？*
- en: 'Microservices is a broader term that breaks large applications into smaller
    modules to get them developed and make them mature enough for release. This approach
    not only helps to manage each module efficiently, but it also identifies the issue
    at the lower level itself. The following are some of the key aspects of microservices:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是一个更广泛的术语，将大型应用程序分解为较小的模块进行开发，并使其足够成熟以发布。这种方法不仅有助于有效管理每个模块，还可以在较低级别识别问题。以下是微服务的一些关键方面：
- en: '**User-friendly interfaces**: Microservices enable a clear separation between
    microservices. Versioning of microservices enables more control over APIs, and
    it also provides more freedom for both the consumers and producers of these services.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户友好的界面**：微服务使微服务之间能够清晰分离。微服务的版本控制使API更易于控制，并且还为这些服务的消费者和生产者提供了更多自由。'
- en: '**Deployment and management of APIs across the platform**: Since each microservice
    is a separate entity, it is possible to update a single microservice without making
    changes to the others. Also, it is easier to roll back changes for a microservice.
    This means the artifacts that are deployed for microservices should be compatible
    in terms of API and data schemas. These APIs must be tested across different platforms,
    and the test results should be shared across different teams, that is, operation,
    developers, and so on, to maintain a centralized control system.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在平台上部署和管理API**：由于每个微服务都是一个独立的实体，因此可以更新单个微服务而无需更改其他微服务。此外，对于微服务来说，回滚更容易。这意味着部署的微服务的构件在API和数据模式方面应兼容。这些API必须在不同平台上进行测试，并且测试结果应该在不同团队之间共享，即运营、开发人员等，以维护一个集中的控制系统。'
- en: '**Flexibility in application**: Microservices that are developed should be
    capable of handling the request and must respond back, irrespective of the kind
    of request, which could be a bad input or an invalid request. Also, your microservice
    should be able to deal with an unexpected load request and respond appropriately.
    All of these microservices should be tested independently, as well as with integration.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序的灵活性**：开发的微服务应能够处理请求并必须做出响应，无论请求的类型如何，可能是错误的输入或无效的请求。此外，您的微服务应能够处理意外的负载请求并做出适当的响应。所有这些微服务都应该独立测试，以及进行集成测试。'
- en: '**Distribution of microservices**: It''s better to split the services into
    small chunks of services so that they can be tracked and developed individually
    and combined to form a microservice. This technique makes microservices development
    more efficient and stable in manner.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务的分发**：最好将服务分割成小块服务，以便可以单独跟踪和开发，并组合成一个微服务。这种技术使微服务的开发更加高效和稳定。'
- en: 'The following diagram shows a cloud native application''s high-level architecture:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了云原生应用程序的高级架构：
- en: '![](img/00006.gif)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00006.gif)'
- en: The application architecture should ideally start with two or three service,
    try to expand it with further versions. It is very important to understand application
    architecture, as it may need to integrate with different components of the system,
    and it is possible that a separate team manages those components when it comes
    to large organizations. Versioning in microservices is vital, as it identifies
    the supported method during the specified phase of development.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序架构理想上应该从两个或三个服务开始，尝试通过进一步的版本扩展。了解应用程序架构非常重要，因为它可能需要与系统的不同组件集成，并且在大型组织中，可能有一个单独的团队管理这些组件。在微服务中进行版本控制非常重要，因为它标识了在开发的指定阶段支持的方法。
- en: Are microservices a new concept?
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务是一个新概念吗？
- en: Microservices has been in the industry for a very long time now. It is another
    way of creating a distinction between the different components of a large system.
    Microservices work in a similar fashion, where they act as a link between the
    different services, and handle the flow of data for a particular transaction based
    on the type of requests.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务在行业中已经存在很长时间了。这是创建大型系统的不同组件之间的区别的另一种方式。微服务以类似的方式工作，它们作为不同服务之间的链接，并根据请求类型处理特定交易的数据流。
- en: 'The following diagram depicts the architecture of microservices:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表描述了微服务的架构：
- en: '![](img/00007.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00007.jpeg)'
- en: Why is Python the best choice for cloud native microservices development?
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么Python是云原生微服务开发的最佳选择？
- en: Why do I choose Python, and recommend it to as many people as possible? Well,
    it comes down to the reasons explained in the upcoming subsections.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我选择Python，并推荐尽可能多的人使用它？嗯，这归结于下面部分中解释的原因。
- en: Readability
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可读性
- en: Python is highly expressive and an easy-to-learn programming language. Even
    an amateur can easily discover the different functionalities and scope of Python.
    Unlike other programming languages, such as Java, which focus more on parenthesis,
    brackets, commas, and colons, Python let's you spend more time on programming
    and less time on debugging the syntax.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种高度表达性和易于学习的编程语言。即使是业余爱好者也可以轻松发现Python的不同功能和范围。与其他编程语言（如Java）不同，它更注重括号、括号、逗号和冒号，Python让你花更多时间在编程上，而不是在调试语法上。
- en: Libraries and community
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 库和社区
- en: Python's broad range of libraries is very portable over different platforms,
    such as Unix, Windows, or OS X. These libraries can be easily extended based on
    your application/program requirement. There is a huge community that works on
    building these libraries and this makes it the best fit for business use cases.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Python的广泛库范围在不同平台（如Unix、Windows或OS X）上非常便携。这些库可以根据您的应用程序/程序要求轻松扩展。有一个庞大的社区致力于构建这些库，这使得它成为商业用例的最佳选择。
- en: As far as the Python community is concerned, the **Python User Group** (**PUG**)
    is a community that works on the community-based development model to increase
    the popularity of Python around the globe. These group members give talks on Python-based
    frameworks, which help us build large systems.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 就Python社区而言，**Python用户组**（**PUG**）是一个致力于通过基于社区的开发模型增加Python在全球范围内的知名度的社区。这些团体成员就基于Python的框架发表演讲，这有助于我们构建大型系统。
- en: Interactive mode
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互模式
- en: The Python interactive mode helps you debug and test a snippet of code, which
    can later be added as a part of the main program.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Python交互模式可帮助您调试和测试代码片段，稍后可以将其作为主程序的一部分添加。
- en: Scalable
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可扩展性
- en: Python provides better structure and concept, such as modules, to maintain large
    programs in a more systematic manner than any other scripting language, such as
    shell scripting.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了更好的结构和概念，例如模块，以比任何其他脚本语言（如shell脚本）更系统地维护大型程序。
- en: Understanding the twelve-factor app
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解十二要素应用程序
- en: Cloud native applications fit in with an agreement intended to augment versatility
    through predictable practices. This application maintains a manifesto of sorts
    called the **twelve-factor** app. It outlines a methodology for developers to
    follow when building modern web-based applications. Developers must change how
    they code, creating a new contract between the developers and the infrastructure
    that their applications run on.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生应用程序符合旨在通过可预测的实践增强灵活性的协议。这个应用程序保持了一种名为**十二要素**应用程序的宣言。它概述了开发人员在构建现代基于Web的应用程序时应遵循的方法论。开发人员必须改变他们的编码方式，为他们的应用程序运行的基础设施之间创建一个新的合同。
- en: 'The following are a few points to consider when developing a cloud native application:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发云原生应用程序时，有几点需要考虑：
- en: Use an informative design to increase application usage with minimal time and
    cost to customers using automation
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用信息化设计，通过自动化增加应用程序的使用率，减少客户的时间和成本
- en: Use application portability across different environments (such as stage and
    production) and different platforms (such as Unix or Windows)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同环境（如阶段和生产）和不同平台（如Unix或Windows）之间使用应用程序可移植性
- en: Use application suitability over cloud platforms and understand the resource
    allocation and management
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用云平台上的应用程序适用性，并了解资源分配和管理
- en: Use identical environments to reduce bugs with continuous delivery/deployment
    for maximum agility of software release
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用相同的环境来减少bug，并通过持续交付/部署实现软件发布的最大灵活性
- en: Enable high availability by scaling the application with minimal supervision
    and designing disaster-recovery architectures
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过最小的监督扩展应用程序并设计灾难恢复架构，实现高可用性
- en: 'Many of the twelve-factors interact with each other. They focus on speed, safety,
    and scale by emphasizing on declarative configuration. A twelve-factor app can
    be described as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 许多十二要素相互作用。它们通过强调声明性配置，专注于速度、安全性和规模。十二要素应用程序可以描述如下：
- en: '**Centralized code base**: Every code that is deployed is tracked in revision
    control, and should have multiple instances deployed on multiple platforms.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中式代码库**：每个部署的代码都在修订控制中进行跟踪，并且应该在多个平台上部署多个实例。'
- en: '**Dependencies management**: An app should be able to declare the dependencies,
    and isolate them using tools such as Bundler, pip, and Maven.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖管理**：应用程序应能够声明依赖关系，并使用诸如Bundler、pip和Maven等工具对其进行隔离。'
- en: '**Defining configuration**: Configurations (that is, environment variables)
    that are likely to be different in different deployment environments (such as
    development, stage, and production) should be defined at the operating-system
    level.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义配置**：在操作系统级别定义可能在不同部署环境（如开发、阶段和生产）中不同的配置（即环境变量）。'
- en: '**Backing services**: Every resource is treated as a part of the application
    itself. Backing services such as databases and message queues should be considered
    as an attached resource, and consumed equally in all environments.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后备服务**：每个资源都被视为应用程序本身的一部分。后备服务，如数据库和消息队列，应被视为附加资源，并在所有环境中平等消耗。'
- en: '**Isolation in build, release, and run cycle**: This involves strict separation
    between build artifacts, then combining with configuration, and then starting
    one or more instances from the artifact and configuration combination.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在构建、发布和运行周期中的隔离**：这涉及在构建工件之间进行严格分离，然后与配置结合，然后从工件和配置组合中启动一个或多个实例。'
- en: '**Stateless processes**: The app should execute one or more instances/processes
    (for example, master/workers) that share nothing.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态进程**：应用程序应执行一个或多个实例/进程（例如，主/工作者），它们之间没有共享。'
- en: '**Services port binding**: The application should be self-contained, and if
    any/all services need to be exposed, then it should be done via port binding (preferably
    HTTP).'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务端口绑定**：应用程序应是自包含的，如果需要暴露任何/所有服务，则应通过端口绑定（最好是HTTP）来实现。'
- en: '**Scaling stateless processes**: The architecture should emphasize stateless
    process management in the underlying platform instead of implementing more complexity
    to the application.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展无状态进程**：架构应强调在底层平台中管理无状态进程，而不是向应用程序实现更多复杂性。'
- en: '**Process state management**: Processes should scale up very quickly and shut
    down gracefully within a small time period. These aspects enable rapid scalability,
    deployment of changes, and disaster recovery.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程状态管理**：进程应该能够快速扩展并在短时间内优雅地关闭。这些方面可以实现快速扩展性、部署更改和灾难恢复。'
- en: '**Continuous delivery/deployment to production**: Always try to keep your different
    environments similar, whether it is development, stage, or production. This will
    ensure that you get similar results across multiple environments, and enable continuous
    delivery from development to production.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续交付/部署到生产环境**：始终尝试保持不同环境的相似性，无论是开发、阶段还是生产。这将确保您在多个环境中获得类似的结果，并实现从开发到生产的持续交付。'
- en: '**Logs as event streams**: Logging is very important, whether it is platform
    level or application level, as this helps understand the activity of the application.
    Enable different deployable environments (preferably production) to collect, aggregate,
    index, and analyze the events via centralized services.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志作为事件流**：日志记录非常重要，无论是平台级还是应用程序级，因为这有助于了解应用程序的活动。启用不同的可部署环境（最好是生产环境）通过集中服务收集、聚合、索引和分析事件。'
- en: '**Ad hoc tasks as on-off processes**: In the cloud native approach, management
    tasks (for example, database migration) that run as a part of a release should
    be run as one-off processes into the environment as opposed to the regular app
    with long-running processes.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**临时任务作为一次性进程**：在云原生方法中，作为发布的一部分运行的管理任务（例如数据库迁移）应作为一次性进程运行到环境中，而不是作为具有长时间运行进程的常规应用程序。'
- en: Cloud application platforms such as Cloud Foundry, Heroku, and Amazon Beanstalk
    are optimized for deploying twelve-factor apps.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 云应用平台，如Cloud Foundry、Heroku和Amazon Beanstalk，都经过优化，用于部署十二要素应用。
- en: Considering all these standards and integrating applications with steady engineering
    interfaces, that is, handling stateless outline design, makes disseminated applications
    that are cloud prepared. Python revolutionized application systems with its obstinate,
    tradition-over-setup way to deal with web improvements.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑所有这些标准，并将应用程序与稳定的工程接口集成，即处理无状态概要设计，使得分布式应用程序具备云准备能力。Python通过其固执、传统而非设置的方式，彻底改变了应用程序系统的发展。
- en: Setting up the Python environment
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Python环境
- en: As we will demonstrate throughout this book, having the right environment (local
    or for your automated builds) is crucial to the success of any development project.
    If a workstation has the right tools, and is set up properly, developing on that
    workstation can feel like a breath of fresh air. Conversely, a poorly set up environment
    can suffocate any developer trying to use it.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在本书中展示的那样，拥有正确的环境（本地或用于自动化构建）对于任何开发项目的成功至关重要。如果工作站具有正确的工具，并且设置正确，那么在该工作站上进行开发会感觉像是一股清新的空气。相反，一个设置不良的环境会让任何开发人员使用起来感到窒息。
- en: 'The following are the prerequisite accounts that we require in the later part
    of the book:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在本书后期需要的先决条件账户：
- en: 'A GitHub account needs to be created for source code management. Use the article
    on the following link to do so:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要创建GitHub账户进行源代码管理。使用以下链接中的文章来创建：
- en: '[https://medium.com/appliedcode/setup-github-account-9a5ec918bcc1](https://medium.com/appliedcode/setup-github-account-9a5ec918bcc1)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://medium.com/appliedcode/setup-github-account-9a5ec918bcc1](https://medium.com/appliedcode/setup-github-account-9a5ec918bcc1)'
- en: 'AWS and Azure accounts are required for application deployment. Use the articles
    given on the following links to create these:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序部署需要AWS和Azure账户。使用以下链接中提供的文章来创建这些账户：
- en: 'AWS: [https://medium.com/appliedcode/setup-aws-account-1727ce89353e](https://medium.com/appliedcode/setup-aws-account-1727ce89353e.)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'AWS: [https://medium.com/appliedcode/setup-aws-account-1727ce89353e](https://medium.com/appliedcode/setup-aws-account-1727ce89353e.)'
- en: 'Azure: [https://medium.com/appliedcode/setup-microsoft-azure-account-cbd635ebf14b](https://medium.com/appliedcode/setup-microsoft-azure-account-cbd635ebf14b)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure: [https://medium.com/appliedcode/setup-microsoft-azure-account-cbd635ebf14b](https://medium.com/appliedcode/setup-microsoft-azure-account-cbd635ebf14b)'
- en: Now, let's set up some of the tools that we will need during our development
    project.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们设置一些在开发项目中需要的工具。
- en: Installing Git
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Git
- en: Git ([https://git-scm.com](https://git-scm.com)) is a free and open source distributed,
    version control system designed to handle everything, ranging from small to very
    large projects, with speed and efficiency.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Git ([https://git-scm.com](https://git-scm.com)) 是一个免费的开源分布式版本控制系统，旨在处理从小型到非常大型的项目，速度和效率都很高。
- en: Installing Git on Debian-based distribution Linux (such as Ubuntu)
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在基于Debian的发行版Linux（如Ubuntu）上安装Git
- en: 'There are a couple of ways by which you can install Git on a Debian system:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过几种方式在Debian系统上安装Git：
- en: 'Using the **Advanced Package Tool** (**APT**) package management tools:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**高级软件包工具**（**APT**）软件包管理工具：
- en: 'You can use the APT package management tools to update your local package index.
    Then, you can download and install the latest Git using the following commands
    as the root user:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用APT软件包管理工具更新本地软件包索引。然后，您可以以root用户身份使用以下命令下载并安装最新的Git：
- en: '[PRE0]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding commands will download and install Git on your system.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在您的系统上下载并安装Git。
- en: 'Using the source code, you can do the following:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用源代码，您可以执行以下操作：
- en: Download the source from the GitHub repository, and compile the software from
    the source.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从GitHub存储库下载源代码，并从源代码编译软件。
- en: 'Before you begin, let''s first install the dependencies of Git; execute the
    following commands as the root user to do so:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，让我们首先安装Git的依赖项；以root用户身份执行以下命令：
- en: '[PRE1]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '2\. After we have installed the necessary dependencies, let''s go to the Git
    project repository ([https://github.com/git/git](https://github.com/git/git))
    to download the source code, as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 安装必要的依赖项后，让我们转到Git项目存储库（[https://github.com/git/git](https://github.com/git/git)）下载源代码，如下所示：
- en: '[PRE2]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '3\. Now, unzip the downloaded ZIP file using the following commands:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 现在，使用以下命令解压下载的ZIP文件：
- en: '[PRE3]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '4\. Now you have to make the package and install it as a sudo user. For this,
    use the commands given next:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 4. 现在，您必须制作软件包并以sudo用户身份安装它。为此，请使用接下来给出的命令：
- en: '[PRE4]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding commands will install Git on your system at `/usr/local`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在您的系统上安装Git到`/usr/local`。
- en: Seting up Git on a Debian-based distribution
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在基于Debian的发行版上设置Git
- en: Now that we have installed Git on our system, we need to set some configuration
    so that the commit messages that will be generated for you contain your correct
    information.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在系统上安装了Git，我们需要设置一些配置，以便为您生成的提交消息包含您的正确信息。
- en: 'Basically, we need to provide the name and email in the config. Let''s add
    these values using the following commands:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们需要在配置中提供名称和电子邮件。让我们使用以下命令添加这些值：
- en: '[PRE5]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Installing Git on Windows
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装Git
- en: 'Let''s install Git on Windows; you can download the latest version of Git from
    the official website ([https://git-scm.com/download/win](https://git-scm.com/download/win)).
    Follow the steps listed next to install Git on a Windows system:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Windows上安装Git；您可以从官方网站（[https://git-scm.com/download/win](https://git-scm.com/download/win)）下载最新版本的Git。按照下面列出的步骤在Windows系统上安装Git：
- en: 'Once the `.exe` file is downloaded, double-click on it to run it. First of
    all, you will be provided with a GNU license, as seen in this screenshot:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载`.exe`文件后，双击运行。首先，您将看到GNU许可证，如此截图所示：
- en: '![](img/00008.jpeg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00008.jpeg)'
- en: 'Click on Next:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 点击下一步：
- en: '![](img/00009.jpeg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00009.jpeg)'
- en: In the section shown in the preceding screenshot, you will customize your setup
    based on tools that are needed, or you can keep it default, which is okay from
    the book's perspective.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面截图中显示的部分中，您可以根据需要自定义设置，或者保持默认设置，这对于本书来说是可以的。
- en: 'Additionally, you can install Git Bash along with Git; click on Next:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外，您可以安装Git Bash和Git；点击下一步：
- en: '![](img/00010.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00010.jpeg)'
- en: 'In the section seen in the next screenshot, you can enable other features that
    come along with Git packages. Then, click on Next:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个截图中看到的部分中，您可以启用与Git软件包一起提供的其他功能。然后，点击下一步：
- en: '![](img/00011.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00011.jpeg)'
- en: You can skip the rest of the steps by clicking on Next, and go for the installation
    part.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过点击下一步跳过其余步骤，然后进行安装部分。
- en: 'Once you complete the installation, you will be able to see a screen like this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您将能够看到如下屏幕：
- en: '![](img/00012.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00012.jpeg)'
- en: Great!! We have successfully installed Git on Windows!!
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们已经成功在Windows上安装了Git！
- en: Using Chocolatey
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Chocolatey
- en: This is my preferred way to install Git for Windows on Windows 10\. It installs
    the same package as before, but in one line. If you have not heard of Chocolatey,
    stop everything, and go learn a bit more. It can install the software with a single
    command; you don't have to use click-through installers anymore!
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在Windows 10上安装Git的首选方式。它以一行安装与之前相同的软件包。如果您还没有听说过Chocolatey，请停下一切，去多了解一些。它可以用单个命令安装软件；您不再需要使用点击安装程序！
- en: Chocolatey is very powerful, and I use it in combination with **Boxstarter**
    to set up my dev machines. If you are in charge of setting up machines for developers
    on Windows, it is definitely worth a look.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Chocolatey非常强大，我将其与**Boxstarter**结合使用来设置我的开发机器。如果您负责在Windows上为开发人员设置机器，这绝对值得一试。
- en: 'Let''s see how you would install Git using Chocolatey. I assume you have Chocolatey
    installed ([https://chocolatey.org/install](https://chocolatey.org/install)) already
    (it''s a one-liner in Command Prompt). Then, simply open the `Administrator Command`
    window, and type this command:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看您如何使用Chocolatey安装Git。我假设您已经安装了Chocolatey（[https://chocolatey.org/install](https://chocolatey.org/install)）（在命令提示符中是一行）。然后，简单地打开`管理员命令`窗口，并输入此命令：
- en: '[PRE6]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will install Git and the `BASH` tools, and add them to your path.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装Git和`BASH`工具，并将它们添加到您的路径中。
- en: Installing Git on Mac
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Mac上安装Git
- en: Before we begin with the Git installation, we need to install command-line tools
    for OS X.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始Git安装之前，我们需要为OS X安装命令行工具。
- en: Installing the command-line tools for OS X
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为OS X安装命令行工具
- en: In order to install any developer, you will need to install Xcode ([https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)),
    which is a nearly 4 GB developer suite. Apple offers this for free from the Mac
    App Store. In order to install Git and the GitHub setup, you will need certain
    command-line tools, which are part of the Xcode development tools.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装任何开发者，您需要安装Xcode（[https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)），这是一个将近4GB的开发者套件。苹果公司在Mac
    App Store上免费提供。为了安装Git和GitHub设置，您需要安装一些命令行工具，这些工具是Xcode开发工具的一部分。
- en: If you have enough space, download and install Xcode, which is basically a complete
    package of development tools.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有足够的空间，下载并安装Xcode，这基本上是一个完整的开发工具包。
- en: 'You will need to create an Apple developer account at [developer.apple.com](http://developer.apple.com)
    in order to download command-line tools. Once you have set up your account, you
    can select the command-line tools or Xcode based on the version, as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在[developer.apple.com](http://developer.apple.com)上创建一个苹果开发者帐户，以便下载命令行工具。设置好您的帐户后，您可以根据版本选择命令行工具或Xcode，如下所示：
- en: If you are on OS X 10.7.x, download the 10.7 command-line tools. If you are
    on OS X 10.8.x, download the 10.8 command-line tools.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是OS X 10.7.x，下载10.7命令行工具。如果您使用的是OS X 10.8.x，下载10.8命令行工具。
- en: Once it is downloaded, open the `DMG` file, and follow the instructions to install
    it.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载完成后，打开`DMG`文件，并按照说明进行安装。
- en: Installing Git for OS X
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在OS X上安装Git
- en: 'Installing Git on Mac is pretty much similar to how you install it on Windows.
    Instead of using the `.exe` file, we have the `dmg` file, which you can download
    from the Git website (`https://git-scm.com/download/mac`) for installation as
    follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上安装Git与在Windows上安装Git基本相似。不同之处在于，我们有`dmg`文件而不是`.exe`文件，您可以从Git网站（`https://git-scm.com/download/mac`）下载进行安装：
- en: 'Double-click on the `dmg` file that got downloaded. It will open a finder with
    the following files:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击下载的`dmg`文件。它将打开一个包含以下文件的查找器：
- en: '![](img/00013.jpeg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00013.jpeg)'
- en: 'Double-click on the package (that is, `git-2.10.1-intel-universal-mavericks.dmg`)
    file; it will open the installation wizard to install, as seen in the following
    screenshot:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击`git-2.10.1-intel-universal-mavericks.dmg`文件；它将打开安装向导进行安装，如下截图所示：
- en: '![](img/00014.jpeg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00014.jpeg)'
- en: 'Click on Install to begin the installation:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击安装开始安装：
- en: '![](img/00015.jpeg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00015.jpeg)'
- en: 'Once the installation is complete, you will see something like this:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，您将看到类似以下的内容：
- en: '![](img/00016.jpeg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00016.jpeg)'
- en: If you are using OS X 10.8 and haven't already modified your security settings
    to allow the installation of third-party applications, you'll need to make that
    adjustment before OS X lets you install these tools.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是OS X 10.8，并且尚未修改安全设置以允许安装第三方应用程序，则需要在OS X允许您安装这些工具之前进行调整。
- en: Installing and configuring Python
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Python
- en: Now, let's install Python, which we will use to build our microservices. We
    will be using the Python 3.x version throughout the book.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们安装Python，我们将使用它来构建我们的微服务。我们将在整本书中使用Python 3.x版本。
- en: Installing Python on a Debian-based distribution (such as Ubuntu)
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在基于Debian的发行版（如Ubuntu）上安装Python
- en: There are different ways to install Python on a Debian-based distribution.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于Debian的发行版上安装Python有不同的方法。
- en: Using the APT package management tools
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用APT软件包管理工具
- en: 'You can use the APT package management tools to update your local package index.
    Then, you can download and install the latest Python using the following commands
    as a root user:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用APT软件包管理工具更新本地软件包索引。然后，您可以以root用户身份使用以下命令下载并安装最新的Python：
- en: '[PRE7]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following packages will automatically be downloaded and installed, as these
    are the prerequisites for Python 3 installation:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 以下软件包将自动下载并安装，因为这些是Python 3安装的先决条件：
- en: '`libpython3-dev libpython3.4 libpython3.4-dev python3-chardet`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`libpython3-dev libpython3.4 libpython3.4-dev python3-chardet`'
- en: '`python3-colorama python3-dev python3-distlib python3-html5lib`'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`python3-colorama python3-dev python3-distlib python3-html5lib`'
- en: '`python3-requests python3-six python3-urllib3 python3-wheel python3.4-de`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`python3-requests python3-six python3-urllib3 python3-wheel python3.4-de`'
- en: Once the prerequisites are installed, it will download and install Python on
    your system.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了先决条件，它将在您的系统上下载并安装Python。
- en: Using source code
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用源代码
- en: 'You can download the source code from the GitHub repository and compile the
    software from the source, as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从GitHub存储库下载源代码并从源代码编译软件，如下所示：
- en: 'Before you begin, let''s first install the dependencies of Git; execute the
    following commands as the root user to do so:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始之前，让我们首先安装Git的依赖项；以root用户身份执行以下命令来完成：
- en: '[PRE8]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let''s download Python ([https://www.python.org](https://www.python.org))
    using the following command from Python''s official website. You can also download
    the latest version in place, as specified:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令从Python的官方网站下载Python（[https://www.python.org](https://www.python.org)）。您也可以根据需要下载最新版本：
- en: '[PRE9]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, let''s extract the downloaded package with this command:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令提取已下载的软件包：
- en: '[PRE10]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we have to compile the source code. Use the following set of commands to
    do so:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们必须编译源代码。使用以下一组命令来完成：
- en: '[PRE11]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding commands will install Python on your system at `/usr/local`.
    Use the following command to check the Python version:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述命令将在`/usr/local`上安装Python。使用以下命令检查Python版本：
- en: '[PRE12]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Installing Python on Windows
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装Python
- en: 'Now, let''s see how we can install Python on Windows 7 or later systems. Installation
    of Python on Windows is pretty simple and quick; we will be using Python 3 and
    above, which you can download from Python''s download page ([https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/)).
    Now perform the following steps:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在Windows 7或更高版本系统上安装Python。在Windows上安装Python非常简单快捷；我们将使用Python 3及以上版本，您可以从Python的下载页面([https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/))下载。现在执行以下步骤：
- en: 'Download the Windows x86-64 executable installer based on your system configuration,
    and open it to begin the installation, as shown in the following screenshot:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您的系统配置下载Windows x86-64可执行安装程序，并打开它开始安装，如下截图所示：
- en: '![](img/00017.jpeg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00017.jpeg)'
- en: 'Next, select the type of installation you want to go with. We will click on
    Install Now to go for the default installation, as seen in this screenshot:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择要进行的安装类型。我们将点击“立即安装”以进行默认安装，如此截图所示：
- en: '![](img/00018.jpeg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00018.jpeg)'
- en: 'Once the installation is complete, you will see the following screen:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，将看到以下屏幕：
- en: '![](img/00019.jpeg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00019.jpeg)'
- en: Great! We have successfully installed Python on Windows.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们已成功在Windows上安装了Python。
- en: Installing Python on Mac
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Mac上安装Python
- en: Before we begin with the Python installation, we need to install the command-line
    tools for OS X. If you have already installed the command-line tools at the time
    of Git installation, you can ignore this step.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始Python安装之前，我们需要安装OS X的命令行工具。如果您在安装Git时已经安装了命令行工具，可以忽略此步骤。
- en: Installing the command-line tools for OS X
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在OS X上安装命令行工具
- en: In order to install any developer, you need to install Xcode ([https://developer.apple.com/xcode/](https://developer.apple.com/xcode/));
    you will need to set up an account on `connect.apple.com` to download the respective
    Xcode version tools.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装任何开发人员，您需要安装Xcode ([https://developer.apple.com/xcode/](https://developer.apple.com/xcode/))；您需要在`connect.apple.com`上设置一个帐户以下载相应的Xcode版本工具。
- en: 'However, there is another way you can install command-line tools using a utility,
    which comes along with an Xcode called `xcode-select`, which is shown here:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有另一种方法可以使用一个实用程序安装命令行工具，该实用程序随Xcode一起提供，名为`xcode-select`，如下所示：
- en: '[PRE13]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding command should trigger an installation wizard for the command-line
    tools. Follow the installation wizard, and you will be able to install it successfully.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令应触发命令行工具的安装向导。按照安装向导的指示，您将能够成功安装它。
- en: Installing Python for OS X
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在OS X上安装Python
- en: 'Installing Python on Mac is quite similar to how you install Git on Windows.
    You can download the Python package from the official website ([https://www.python.org/downloads/](https://www.python.org/downloads/)).
    Proceed with the following steps:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上安装Python与在Windows上安装Git非常相似。您可以从官方网站([https://www.python.org/downloads/](https://www.python.org/downloads/))下载Python包。按照以下步骤进行：
- en: 'Once the Python package is downloaded, double-click on it to begin the installation;
    it will show the following pop-up window:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python包下载完成后，双击开始安装；将显示以下弹出窗口：
- en: '![](img/00020.jpeg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00020.jpeg)'
- en: 'The next step will be about the release note and the respective Python version
    information:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的步骤将涉及发布说明和相应的Python版本信息：
- en: '![](img/00021.jpeg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00021.jpeg)'
- en: 'Next, you will need to Agree with the license, which is mandatory for installation:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要同意许可协议，这是安装的必要步骤：
- en: '![](img/00022.jpeg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00022.jpeg)'
- en: 'Next, it will show you the installation-related information, such as the disk
    occupied and the path. Click on Install to begin:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，它将显示安装相关信息，如磁盘占用和路径。点击“安装”开始：
- en: '![](img/00023.jpeg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00023.jpeg)'
- en: Once the installation is complete, you will see the following screen:![](img/00024.jpeg)
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，您将看到以下屏幕：![](img/00024.jpeg)
- en: 'Use the following command to see whether the Python version is installed:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令查看Python版本是否已安装：
- en: '[PRE14]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Great!! Python is successfully installed.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！Python已成功安装。
- en: Getting familiar with the GitHub and Git commands
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉GitHub和Git命令
- en: 'In this section, we will go through a list of Git commands, which we will be
    using frequently throughout the book:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍一系列我们将在整本书中经常使用的Git命令：
- en: '**git init**: This command initializes your local repository once when you
    are setting it up for the first time'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**git init**：此命令在首次设置本地存储库时初始化您的本地存储库'
- en: '**git remote add origin <server>**: This command links your local <indexentry
    content="Git command:git remote add origin " dbid="164250" state="mod">directory
    to the remote server repository so that all the changes pushed are saved in the
    remote repository'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**git remote add origin <server>**：此命令将您的本地目录链接到远程服务器存储库，以便所有推送的更改都保存在远程存储库中'
- en: '**git status**: This command lists the files/directories that are yet to be
    added, or are modified and need to be committed'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**git status**：此命令列出尚未添加或已修改并需要提交的文件/目录'
- en: '**git add * or git add <filename>**: This command adds files/directories so
    that `<indexentry content="Git command:git add * or git add " dbid="164250" state="mod">`they
    can be tracked, and makes them ready to be committed'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**git add *或git add <filename>**：此命令添加文件/目录，以便可以跟踪它们，并使它们准备好提交'
- en: '**git commit -m "Commit message"**: This command helps you commit your track
    changes in the local machine and generate the commit ID by which the updated code
    can be identified'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**git commit -m "Commit message"**：此命令可帮助您在本地机器上提交跟踪更改，并生成提交ID，通过该ID可以识别更新的代码'
- en: '**git commit -am "Commit message"**: The only difference between the previous
    command and this command is that this opens a default editor to add the commit
    message based on an operating system such as Ubuntu (Vim) or Windows (Notepad++)
    after adding all the files to stage'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**git commit -am "Commit message"**：与上一个命令的唯一区别是，此命令在将所有文件添加到暂存区后，会打开默认编辑器，以根据Ubuntu（Vim）或Windows（Notepad++）等操作系统添加提交消息。'
- en: '**git push origin master**: This command pushes the last committed code from
    the local directory to the remote repository'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**git push origin master**：此命令将最后提交的代码从本地目录推送到远程存储库'
- en: Test everything to make sure our environment works.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 测试一切，确保我们的环境正常工作。
- en: Here we go. We have installed both Git and Python in the last section, which
    are needed to begin with building microservices. In this section, we will focus
    on testing the installed packages and try to get familiar with them.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在上一节中安装了Git和Python，这些是构建微服务所需的。在本节中，我们将专注于测试已安装的软件包，并尝试熟悉它们。
- en: 'The first thing we can do is to exercise the Git command, which fetches an
    external Python code from a repository (usually GitHub) over HTTPs, and copies
    it into our current workspace in the appropriate directory:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做的第一件事是运行Git命令，该命令从存储库（通常是GitHub）上的HTTPs获取外部Python代码，并将其复制到当前工作空间的适当目录中：
- en: '[PRE15]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding command will create a directory named `Cloud-Native-Python` on
    your local machine; switch to the `Cloud-Native-Python/chapter1` path from the
    current location**.**
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在本地机器上创建一个名为`Cloud-Native-Python`的目录；从当前位置切换到`Cloud-Native-Python/chapter1`路径**。**
- en: 'We will need to install the requirements of the apps that are needed to run
    it. In this case, we just need the Flask module to be available:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装应用程序的要求，以便运行它。在这种情况下，我们只需要Flask模块可用：
- en: '[PRE16]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, Flask works as the web server; we will understand more about it in detail
    in the next chapter.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Flask充当Web服务器；我们将在下一章中详细了解它。
- en: 'Once it is installed successfully, you can run the app using the following
    command:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功后，您可以使用以下命令运行应用程序：
- en: '[PRE17]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'I think we are good to see the output, which is as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为我们可以看到输出，如下所示：
- en: '[PRE18]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you see this output, then our Python development environment is correctly
    set up.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到此输出，则我们的Python开发环境已正确设置。
- en: Now it's time to write some Python code!
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候编写一些Python代码了！
- en: Summary
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we began with exploring the cloud platform and the cloud computing
    stack. During this chapter, you learned what the different twelve-factor apps
    methodologies are, and how they can help develop microservices. Lastly, you got
    to know about what kind of ideal setup environment a developer machine should
    have to create or get started with application creation.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始探索云平台和云计算堆栈。在本章中，您了解了不同的十二要素应用程序方法论，以及它们如何帮助开发微服务。最后，您了解了开发人员应该具备怎样的理想设置环境，以便创建或开始应用程序的创建。
- en: In the next chapter, we will start building our microservices by creating backend
    REST APIs, and testing with the API call or using the Python framework as well.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过创建后端REST API并使用API调用或Python框架进行测试来开始构建我们的微服务。
