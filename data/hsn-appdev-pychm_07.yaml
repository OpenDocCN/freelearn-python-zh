- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Web Development with JavaScript, HTML, and CSS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JavaScript、HTML 和 CSS 进行网络开发
- en: 'This chapter marks the beginning of a series of five chapters on web programming
    with PyCharm, all of which will cover the development of general web applications.
    I have been looking forward to writing this section because this is my bread and
    butter. I have been developing web applications for as long as there has been
    a web. The professional edition of PyCharm contains something of a treat for web
    developers: a full copy of JetBrains’ **WebStorm**, which is provided through
    a pre-installed plugin. This means we get a lot more than just syntax highlighting
    for **HTML**, **CSS**, and **JavaScript**! We also have full access to **Node.js**
    tooling and modern web UI frameworks such as **React**. I might be tempted to
    call it overkill, but it isn’t. The product I work on every day has a mixture
    of **microservices** written in **Python 3**, **NodeJS**, and **React** for the
    frontend. I leverage three different databases: **Microsoft SQL Server**, **MongoDB**,
    and **Redis**. I never have to leave PyCharm! As I just mentioned, I have robust
    tooling for JavaScript, NodeJS, and React built-in. The databases are all supported
    in PyCharm, which we’ll cover in [*Chapter 11*](B19644_11.xhtml#_idTextAnchor266),
    *Understanding Database Management with PyCharm*. I can create debug run configurations
    in PyCharm, run several services that communicate with each other via REST calls,
    and perform inter-service debugging. I can also place a breakpoint in the React
    frontend and another in a separate project using **Flask** or **FastAPI**; as
    I work through the application’s workflow, my breakpoints stop, regardless of
    which project I’m in or which language the project is using. I would not attempt
    this in any other IDE. Did I mention how excited I was to start writing this set
    of chapters? I’m getting ahead of myself.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章标志着关于使用 PyCharm 进行网络编程的五个章节系列的开端，所有这些章节都将涵盖通用网络应用程序的开发。我一直期待着撰写这一部分，因为这正是我的专长。自从有网络以来，我就一直在开发网络应用程序。PyCharm
    的专业版为网络开发者提供了一份特别的礼物：JetBrains 的 **WebStorm** 的完整副本，这是通过预安装的插件提供的。这意味着我们获得的不仅仅是
    **HTML**、**CSS** 和 **JavaScript** 的语法高亮！我们还可以完全访问 **Node.js** 工具和现代网络 UI 框架，如
    **React**。我可能会觉得这有点过度，但事实并非如此。我每天工作的产品是由 **Python 3**、**NodeJS** 和 **React** 编写的
    **微服务** 的混合体。我利用了三种不同的数据库：**Microsoft SQL Server**、**MongoDB** 和 **Redis**。我永远不需要离开
    PyCharm！正如我刚才提到的，我内置了强大的 JavaScript、NodeJS 和 React 工具。所有数据库都在 PyCharm 中得到支持，我们将在
    [*第 11 章*](B19644_11.xhtml#_idTextAnchor266) 中介绍，*使用 PyCharm 理解数据库管理*。我可以在 PyCharm
    中创建调试运行配置，运行多个通过 REST 调用相互通信的服务，并执行跨服务调试。我还可以在 React 前端设置一个断点，在另一个使用 **Flask**
    或 **FastAPI** 的独立项目中设置另一个断点；当我处理应用程序的工作流程时，无论我在哪个项目中，或者项目使用的是哪种语言，我的断点都会停止。我不会在其他任何
    IDE 中尝试这样做。我提到过我对开始撰写这一系列章节有多兴奋吗？我有点过于激动了。
- en: The topics that will be discussed in this chapter include integrating common
    web programming languages (JavaScript, HTML, and CSS) in PyCharm and how to develop
    with them in straightforward and intuitive ways. By the end of this chapter, you
    will have gained comprehensive knowledge of how to use the three languages so
    that you can start a web development project using PyCharm.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论的主题包括在 PyCharm 中集成常见的网络编程语言（JavaScript、HTML 和 CSS），以及如何以简单直观的方式使用它们进行开发。到本章结束时，你将获得如何使用这三种语言的全面知识，以便你可以开始使用
    PyCharm 进行网络开发项目。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing JavaScript, HTML, and CSS in the process of web development
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网络开发过程中介绍 JavaScript、HTML 和 CSS
- en: The options for working with JavaScript, HTML, and CSS code in PyCharm
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PyCharm 中处理 JavaScript、HTML 和 CSS 代码的选项
- en: How to implement live editing and debugging for web projects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何实现网络项目的实时编辑和调试
- en: How to work with HTML boilerplate options in PyCharm
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 PyCharm 中使用 HTML 模板选项
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the prerequisites for this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的先决条件如下：
- en: A working installation of Python 3.10 or later.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Python 3.10 或更高版本的工作安装。
- en: A working installation of PyCharm Professional. If you are using the community
    edition, most of what we’ll cover in this chapter won’t work since you’ll only
    get limited HTML support. You can still work with CSS and JavaScript files, but
    the experience will be very limited compared to the professional edition.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可工作的PyCharm Professional安装。如果您使用的是社区版，本章中我们将讨论的大部分内容将无法使用，因为您只能获得有限的HTML支持。您仍然可以处理CSS和JavaScript文件，但与专业版相比，体验将非常有限。
- en: The Chrome web browser. You will need it if you want to debug JavaScript code
    running in the browser.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chrome网络浏览器。如果您想调试浏览器中运行的JavaScript代码，您将需要它。
- en: A working installation of NodeJS and **node package manager** (**npm**). This
    is optional. You will only need these if you want to work with React or modern
    JavaScript frameworks such as Angular, Vue, or Express. React is an advanced topic
    and won’t be covered extensively beyond setting up and working with a React project.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可工作的NodeJS和**node包管理器**（**npm**）安装。这是可选的。如果您想使用React或Angular、Vue、Express等现代JavaScript框架，则需要这些。React是一个高级主题，本书将不会对其进行深入探讨，而仅限于设置和操作React项目。
- en: I’ll be showing you how to use PyCharm’s deployment features. For this, I assume
    you understand how to deploy a web project to a remote host using a tool such
    as WinSCP or FileZilla, or how to transfer files using command-line tools such
    as **secure copy** (**SCP**) or **file transfer** **protocol** (**FTP**).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我将向您展示如何使用PyCharm的部署功能。为此，我假设您了解如何使用WinSCP或FileZilla等工具将Web项目部署到远程主机，或者如何使用**安全复制**（**SCP**）或**文件传输协议**（**FTP**）等命令行工具传输文件。
- en: You can find the sample code for this chapter at [https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-07](https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-07).
    We covered how to clone the repository in [*Chapter 2*](B19644_02.xhtml#_idTextAnchor028),
    *Installation* *and Configuration*.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-07](https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-07)找到本章的示例代码。我们在[*第二章*](B19644_02.xhtml#_idTextAnchor028)中介绍了如何克隆仓库，*安装*和*配置*。
- en: Introduction to HTML, JavaScript, and CSS
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML、JavaScript和CSS简介
- en: I call these *the triumvirate of web development*. They constitute the most
    basic skills you can learn as you progress toward becoming a full stack web developer.
    The term **full stack**, when referencing a full stack developer, just means you
    are skilled at developing the frontend portion of the application, along with
    the backend and the database. The next six chapters are devoted to full stack
    web development with PyCharm.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我将这些称为*网络开发的三大支柱*。它们构成了你在成为全栈网络开发者过程中可以学习到的最基本技能。当提到*全栈*时，指的是你擅长开发应用程序的前端部分，包括后端和数据库。接下来的六章将致力于使用PyCharm进行全栈网络开发。
- en: 'Strictly speaking, only one of the three languages we’ll be covering here is
    a programming language. **Hypertext Markup Language** (**HTML**) is used to create
    the structure and layout of a web page or application UI. **Cascading Style Sheets**
    (**CSS**) is used to control the look of the UI while honoring the separation
    of concerns: we split the layout of buttons, text, and interactive elements from
    the definitions of visual appearance. Neither HTML nor CSS has any ability to
    create any level of interactivity by themselves beyond a few CSS tricks, such
    as changing a button’s color when the user hovers their cursor over it.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，我们在这里将要讨论的三个语言中只有一个是编程语言。**超文本标记语言**（**HTML**）用于创建网页或应用程序UI的结构和布局。**层叠样式表**（**CSS**）用于控制UI的外观，同时遵守关注点分离原则：我们将按钮、文本和交互元素的布局与视觉外观的定义分开。HTML和CSS本身没有能力创建任何级别的交互性，除了几个CSS技巧，例如当用户将鼠标悬停在按钮上时改变按钮的颜色。
- en: The real interactivity in a web-based frontend comes from JavaScript, or as
    it is properly called, ECMAScript. About a million internet years ago, a company
    called Netscape was battling for the hearts and minds of the nascent web browser
    user community. It was David versus Goliath, where Goliath was Microsoft. Netscape’s
    browser cost a small fee to license while Microsoft’s Internet Explorer was free,
    built into the Windows operating system, and sported a set of tools that allowed
    IT managers to centrally customize their browser’s behavior while rolling it out
    to large corporate user bases. Netscape’s value proposition was non-existent.
    They needed a game-changer.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 基于网络的浏览器前端的真实交互性来自于JavaScript，或者如它应被正确称呼的那样，ECMAScript。大约一百万个互联网年前，一家名为网景的公司正在为新兴的浏览器用户社区争夺人心。这是一场大卫与歌利亚的较量，歌利亚是微软。网景的浏览器需要支付一小笔许可费，而微软的Internet
    Explorer是免费的，内置在Windows操作系统中，并配备了一套工具，允许IT经理集中定制浏览器行为，同时向大型企业用户群体推广。网景的价值主张根本不存在。他们需要一个颠覆性的变革。
- en: At about this time, Sun Microsystems was heavily marketing its new flagship
    programming language called **Java**. Like Netscape, Sun was plagued by competition
    from Microsoft, so the two teamed up. Netscape started creating what would become
    the in-browser programming language called ECMAScript, while Sun licensed the
    name Java with the understanding that the newly renamed JavaScript would never
    run anywhere but within a browser. Sun’s end game was to make sure everyone was
    using Java to create their web application backends, with Netscape winning the
    market share for frontend rendering by offering an interactive experience. JavaScript
    has absolutely nothing to do with Java beyond marketing. They are very different
    languages and should never be confused.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在这个时候，太阳微系统公司正在大力推广其新的旗舰编程语言，名为**Java**。和网景公司一样，太阳公司也受到微软的竞争困扰，因此两家公司联手。网景开始创建后来成为浏览器内编程语言的ECMAScript，而太阳公司则获得了Java名称的许可，前提是重新命名的JavaScript将永远不会在任何地方运行，除了浏览器内部。太阳公司的最终目标是确保每个人都在使用Java来创建他们的网络应用程序后端，而网景公司通过提供互动体验赢得了前端渲染的市场份额。JavaScript与Java在营销之外毫无关系。它们是两种非常不同的语言，绝不应该混淆。
- en: I’m going to assume you have some knowledge of the vast world of HTML development.
    I also want to remind you that this is a book on PyCharm and not web development.
    Given this is how I earn my living, my experience here is deep, and I will move
    from “this is an HTML tag” (that is the absolute basics) to “and here’s React”
    (that is, there be dragons if all you’ve ever done is Python work) pretty quickly.
    My only regret here is that Packt won’t let me write “there be dragons” in a scary
    horror film-style font. I’ll leave you references to books and other resources
    in the *Further reading* section of this chapter in case you want to learn more
    about frontend or full stack development in general.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你对浩瀚的HTML开发世界有所了解。我还想提醒你，这是一本关于PyCharm的书，而不是关于Web开发的书。鉴于这是我谋生的手段，我的经验很丰富，我会很快从“这是一个HTML标签”（这是绝对的基础）过渡到“这里是React”（也就是说，如果你一直只做Python工作，那么这里会有龙）。我唯一的遗憾是Packt不允许我用一种恐怖电影风格的字体写“这里会有龙”。如果你想了解更多关于前端或全栈开发的一般知识，我会在本章的“进一步阅读”部分留下书籍和其他资源的参考。
- en: Writing code with HTML
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTML编写代码
- en: 'HTML, like any other code, is created within a text file. In the case of HTML,
    the text is highly structured using a set of HTML tags. You can think of the tags
    as being like keywords in a programming language, except these are set apart using
    angle brackets. Remember, HTML is for content structure and layout. It was created
    by Tim Berners-Lee (not Al Gore) as a way to present scientific journal articles
    on the internet’s predecessor called the **Defense Advanced Research Projects
    Agency Network** (**DARPANET**). This is an adjunct of the United States Department
    of Defense. One problem in the scientific world with this was the time it took
    to publish a peer-reviewed journal article. In cases where science had to advance
    rapidly, we needed a format to electronically publish research without going through
    the peer review and print publication process, which can take months. HTML was
    designed to electronically mimic a paper publication. Since this is the case,
    it should be no surprise that the structure of HTML elements refers to a **document
    object model** (**DOM**). The document is organized into paragraphs, headers,
    sub-headers, sections, figures, images, and the like. Consider this example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: HTML，就像任何其他代码一样，是在一个文本文件中创建的。在HTML的情况下，文本是通过一组HTML标签高度结构化的。你可以把标签看作是编程语言中的关键字，只不过这些标签是用尖括号区分的。记住，HTML用于内容结构和布局。它是蒂姆·伯纳斯-李（不是阿尔·戈尔）创建的，作为一种在互联网的前身**国防高级研究计划局网络**（**DARPANET**）上展示科学期刊文章的方式。这是美国国防部的一个附属机构。在科学界，这个问题在于发表同行评审期刊文章所需的时间。在科学需要快速发展的案例中，我们需要一种格式，可以在不经过同行评审和印刷出版流程的情况下，电子发布研究，这个过程可能需要数月。HTML被设计成电子模拟纸质出版物。由于这种情况，HTML元素的结构参照**文档对象模型**（**DOM**）也就不足为奇了。文档被组织成段落、标题、副标题、部分、图表、图像等。考虑以下示例：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is an HTML document that is structured like a typical research paper. It
    has a title, which appears in the browser’s tab. `<title>` is in the `<head>`
    tag of the document, which might also contain metadata and references to CSS files
    and JavaScript used on the page.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个结构类似于典型研究论文的HTML文档。它有一个标题，在浏览器的标签页中显示。`<title>`位于文档的`<head>`标签中，该标签可能还包含元数据和页面使用的CSS文件和JavaScript的引用。
- en: The `<body>` tag holds the document’s contents. The head and body are enclosed
    within an HTML tag. Remember, the tags are enclosed in angle brackets; for example,
    `<body>`. Every tag has an opening tag and a closing tag with content in between.
    For example, the header opens with `<h1>`, the content, *Introduction*, is inserted,
    and the tag is closed with `</h1>`. The closing tag adds a forward slash to the
    matching element.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`<body>`标签包含文档的内容。头部和主体被包含在一个HTML标签内。记住，标签是用尖括号括起来的；例如，`<body>`。每个标签都有一个开标签和一个闭标签，内容位于两者之间。例如，标题以`<h1>`开始，插入内容*引言*，然后以`</h1>`结束。闭标签会在匹配元素前添加一个正斜杠。'
- en: This structure enables the web browser to easily parse the document and display
    the content as an electronic page. In modern HTML, though, only the structure
    is defined. How the elements are laid out on the page, along with visual definitions
    for fonts, colors, sizes, and so on, are all controlled by an externally linked
    CSS document.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结构使得网页浏览器能够轻松解析文档，并将内容以电子页面的形式显示出来。然而，在现代HTML中，只有结构被定义。页面上的元素布局，以及字体、颜色、大小等视觉定义，都是由外部链接的CSS文档控制的。
- en: 'If we add this code to our earlier document, within the `<head>` tag, we get
    a page that looks very different in the browser:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将此代码添加到我们之前的文档中，在`<head>`标签内，我们将在浏览器中得到一个看起来非常不同的页面：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Note that the added link tag is a little different: it doesn’t have a closing
    tag. There are a few exceptions in HTML like this. Additionally, the link tag
    has some attributes attached. You can think of attributes as being like arguments
    for a function. They define additional input used by the tag. In this case, several
    different types of link tags are possible in HTML. We are defining this one as
    a stylesheet using the `rel` attribute. The `href` attribute tells the HTML page
    where to find the CSS file. Here, the page will be looking for a file called `mystyle.css`
    in the same folder as the HTML file.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，添加的链接标签略有不同：它没有闭标签。HTML中存在一些这样的例外。此外，链接标签还有一些属性附加。你可以把属性看作是函数的参数。它们定义了标签使用的额外输入。在这种情况下，HTML中可能有几种不同类型的链接标签。我们通过`rel`属性定义这个标签为样式表。`href`属性告诉HTML页面在哪里找到CSS文件。在这里，页面将在与HTML文件相同的文件夹中寻找名为`mystyle.css`的文件。
- en: Creating HTML in PyCharm
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 PyCharm 中创建 HTML
- en: The HTML frontend development experience is only available with PyCharm Professional.
    The community edition allows you to create HTML files in a Python project, but
    that’s about all. I’ll be strictly considering the professional edition in this
    chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 前端开发体验仅在 PyCharm 专业版中可用。社区版允许你在 Python 项目中创建 HTML 文件，但这仅此而已。在本章中，我将严格考虑专业版。
- en: We’re going to create a new project, but this time, we’re not going to create
    a Python project. In fact, we’re not going to create a new project in PyCharm
    at all. PyCharm used to have the option to create an empty project. At some point,
    it was removed, but that’s OK. PyCharm projects are simply a folder with a `.idea`
    folder inside it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的项目，但这次，我们不会创建一个 Python 项目。实际上，我们根本不会在 PyCharm 中创建新项目。PyCharm 以前有创建空项目的选项。在某个时候，它被移除了，但这没关系。PyCharm
    项目只是一个包含 `.idea` 文件夹的文件夹。
- en: Creating an empty project
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个空项目
- en: Creating an empty project, which will bypass the process of setting up a virtual
    environment, which we don’t need, is easy. Just make a folder somewhere on your
    computer. I created mine on the desktop and called it `html-project`. I like to
    name my projects that aren’t using Python in kebab case instead of snake case
    so that I can easily spot the difference. Naturally, you can call it whatever
    you like.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个空项目，这将绕过设置虚拟环境的流程，我们不需要这个流程。只需在电脑上的某个位置创建一个文件夹。我在桌面上创建了一个名为 `html-project`
    的文件夹。我喜欢用中划线命名不使用 Python 的项目，而不是蛇形命名，这样我可以很容易地发现它们之间的区别。当然，你可以随意命名。
- en: Make sure PyCharm doesn’t have an open project. If it does, use **File** | **Close**
    to close the current project.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 确保PyCharm没有打开的项目。如果有，请使用**文件** | **关闭**来关闭当前项目。
- en: 'Next, just drag your empty folder into PyCharm. You’ll get the usual **Trust
    and Open Project** dialog, as shown in *Figure 7**.1*:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，只需将你的空文件夹拖到 PyCharm 中。你会得到一个通常的**信任和打开项目**对话框，如图 *图 7**.1* 所示：
- en: '![Figure 7.1: Drag an empty folder onto the PyCharm project window to create
    an empty project with no Python environment](img/B19644_07_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1：将空文件夹拖到 PyCharm 项目窗口以创建一个没有 Python 环境的空项目](img/B19644_07_01.jpg)'
- en: 'Figure 7.1: Drag an empty folder onto the PyCharm project window to create
    an empty project with no Python environment'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1：将空文件夹拖到 PyCharm 项目窗口以创建一个没有 Python 环境的空项目
- en: You may have noticed that there are HTML project types in PyCharm Professional’s
    new project window and wonder why I am ignoring them. I would rather start you
    off with a basic example before I show you the HTML boilerplate project, which
    creates a whole site based on ideals established by Google. Let’s walk before
    we fly. If you are already a full stack veteran, don’t skip this section. Given
    this isn’t a book on HTML, I don’t intend to linger on the basics. I’m going to
    go over a few features in this simple example.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到 PyCharm 专业版的新项目窗口中有 HTML 项目类型，并想知道我为什么忽略它们。在我向您展示基于谷歌确立的理想创建整个站点的 HTML
    模板项目之前，我更愿意先从基本示例开始。让我们先步行，再飞行。如果你已经是全栈老兵，请不要跳过这一节。鉴于这不是一本关于 HTML 的书，我不打算在基础知识上停留太久。我将在这个简单示例中介绍一些功能。
- en: 'When you create a project in this way, it is effectively a Python project without
    an interpreter. You’ll get a message stating that the default Python installation
    is being used as an environment, which is fine. We won’t need it:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式创建项目时，它实际上是一个没有解释器的 Python 项目。你会收到一条消息，说明默认的 Python 安装正在用作环境，这是可以的。我们不需要它：
- en: '![Figure 7.2: Right-click the project folder to create a new HTML file](img/B19644_07_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2：右键单击项目文件夹以创建新的 HTML 文件](img/B19644_07_02.jpg)'
- en: 'Figure 7.2: Right-click the project folder to create a new HTML file'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2：右键单击项目文件夹以创建新的 HTML 文件
- en: 'You will be prompted to give the file a name. Call it `index.html`. This is
    the default file that will be displayed on a web server, so it is the most common
    file you’d want to create first. PyCharm will generate a basic HTML page structure
    based on a template. More than that, though, PyCharm will prompt you to fill in
    the basic elements of the template as part of the creation process. Take a look
    at *Figure 7**.3*:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你将被提示给文件命名。命名为 `index.html`。这是在 Web 服务器上显示的默认文件，因此是你最想首先创建的文件。PyCharm 将根据模板生成基本的
    HTML 页面结构。更重要的是，PyCharm 将在创建过程中提示你填写模板的基本元素。看看 *图 7**.3*：
- en: '![Figure 7.3: PyCharm presents a template for you to fill in](img/B19644_07_03.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3：PyCharm 为您提供了一个模板，供您填写](img/B19644_07_03.jpg)'
- en: 'Figure 7.3: PyCharm presents a template for you to fill in'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3：PyCharm为您提供了一个模板供您填写
- en: 'This template only has one template variable in it: `Title`. As you can see,
    line 5 is highlighted and the word `Title` is highlighted even more. PyCharm is
    expecting you to type a title, then press the *Tab* key. Doing this sets the title
    and then takes you straight down to the inside of the body tag.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板中只有一个模板变量：`Title`。正如您所看到的，第5行被突出显示，而单词`Title`的突出显示更加明显。PyCharm期望您输入一个标题，然后按*Tab*键。这样做会设置标题，然后直接带您到body标签的内部。
- en: 'Upon adding this code, a few things become evident:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加此代码后，一些事情变得明显：
- en: All the autocompletion you’ve come to expect with Python is also applied to
    HTML tags. Valid attributes are also supplied in code completion. You’ll notice
    this when you type in the link tag for the style sheet.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有您期望在Python中使用的自动完成功能也应用于HTML标签。有效的属性也在代码补全中提供。当您输入样式表的链接标签时，您会注意到这一点。
- en: PyCharm will automatically create the closing tag for you. When you type `<h1>Introduction`,
    as soon as you complete the `<h1>` tag, PyCharm will insert the `</h1>` closer
    for you. Failure to close your tags can lead to layout issues or missing content.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyCharm会自动为您创建闭合标签。当您输入`<h1>Introduction`时，一旦完成`<h1>`标签，PyCharm会为您插入`</h1>`闭合标签。未能关闭您的标签可能导致布局问题或内容缺失。
- en: The same documentation features for Python keywords and libraries exist for
    HTML. Hover over any element and you’ll see documentation for that element.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python关键字和库的相同文档功能也适用于HTML。将鼠标悬停在任何元素上，您将看到该元素的文档。
- en: 'The same linting we saw in Python code is at play in the HTML code too. *Figure
    7**.4* shows the same kind of warnings in the same areas we saw when we talked
    about these features in the editor for Python code:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在Python代码中看到的相同的代码检查功能也应用于HTML代码。*图7.4*显示了在编辑器中讨论这些功能时我们在相同区域看到的相同类型的警告：
- en: '![Figure 7.4: We can see a lot of similarities between the editor’s treatment
    of Python and its treatment of HTML](img/B19644_07_04.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4：我们可以看到编辑器对Python和HTML的处理有很多相似之处](img/B19644_07_04.jpg)'
- en: 'Figure 7.4: We can see a lot of similarities between the editor’s treatment
    of Python and its treatment of HTML'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4：我们可以看到编辑器对Python和HTML的处理有很多相似之处
- en: The problem summary at the top of the screen (*1*) indicates that there are
    a few typographical errors. There aren’t really any, it’s just that the dictionary
    is assuming English, and my placeholder verbiage is in Latin. There is a warning,
    though. If you click the yellow triangle next to *1*, the problem window opens
    (*3*). I can also see a yellow warning marker at *2*. All these point to the fact
    that we have yet to create the CSS file referenced on line 6.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕顶部的错误摘要(*1*)表明存在一些排版错误。实际上并没有，只是字典假设是英语，我的占位符文本是拉丁语。不过，有一个警告。如果您点击*1*旁边的黄色三角形，问题窗口将打开(*3*)。我还可以看到*2*处的黄色警告标记。所有这些都指向我们尚未创建第6行引用的CSS文件。
- en: 'In addition to the usual things we normally see in the editor, we can see something
    new at *4*: there are a few icons that correspond to the web browsers PyCharm
    is aware of on your computer.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们在编辑器中通常看到的东西外，我们还可以在*4*处看到一些新内容：有一些图标对应于PyCharm在您的计算机上知道的浏览器。
- en: Previewing web pages
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预览网页
- en: 'Clicking any of the browser icons will allow you to preview your code in that
    browser. In my case, I have three browsers: Chrome, Firefox, and PyCharm’s built-in
    preview window. These icons will fade in and out as your mouse cursor approaches
    the top right of the editor window.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 点击任何浏览器图标都可以让您在该浏览器中预览您的代码。在我的情况下，我有三个浏览器：Chrome、Firefox和PyCharm的内置预览窗口。当您的鼠标光标接近编辑器窗口的右上角时，这些图标会淡入淡出。
- en: 'In honor of Netscape’s shoutout at the beginning of this chapter, let’s take
    a look at Firefox in *Figure 7**.5* since it is Netscape’s successor:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了纪念本章开头Netscape的提及，让我们看看*图7.5*中的Firefox，因为它是Netscape的后继者：
- en: '![Figure 7.5: The browser launches and displays our page](img/B19644_07_05.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图7.5：浏览器启动并显示我们的页面](img/B19644_07_05.jpg)'
- en: 'Figure 7.5: The browser launches and displays our page'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5：浏览器启动并显示我们的页面
- en: 'There are three things worth noting in *Figure 7**.5*:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图7.5*中有三件事值得关注：
- en: PyCharm didn’t just open the page in the browser with a file:/// URL. If you
    want to do that, you can hold down *Alt* or *Option* when clicking the browser
    icon. In our case, PyCharm launched its internal web server. This is handy because
    previewing your work in the browser with a file:/// URL is very limiting. Many
    features simply won’t work.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyCharm并没有只是用文件:/// URL在浏览器中打开页面。如果你想那样做，你可以点击浏览器图标时按住*Alt*或*Option*键。在我们的情况下，PyCharm启动了其内部网络服务器。这很方便，因为使用文件:///
    URL在浏览器中预览你的工作非常有限制。许多功能根本无法工作。
- en: The content in the `<title>` tag appears as the title on the tab in the browser.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<title>`标签中的内容在浏览器标签页上显示为标题。'
- en: The year 1991 called and they want their website back. HTML just creates structure.
    This page is pretty ugly without the CSS. We should fix that.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1991年有人打电话来，他们想要要回他们的网站。HTML只是创建结构。没有CSS，这个页面看起来相当丑陋。我们应该修复这个问题。
- en: 'Before we do, though, I want to point out a nifty feature that PyCharm gives
    us: auto-reloading.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们这样做之前，我想指出PyCharm给我们提供的另一个巧妙的功能：自动重新加载。
- en: Reloading the browser view on save
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存时重新加载浏览器视图
- en: 'If you study the URL in the browser in *Figure 7**.5*, you’ll notice the `RELOAD_ON_SAVE`
    attribute. You can probably guess what this does, but let’s cover it anyway. In
    *Figure 7**.6*, I have tiled my windows so that PyCharm is on the left, and my
    browser is on the right. This is a common configuration used by web developers,
    though it usually plays out on several monitors:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你研究图*图7.5*中的浏览器中的URL，你会注意到`RELOAD_ON_SAVE`属性。你可能能猜到这会做什么，但无论如何，我们还是来了解一下。在图*图7.6*中，我已经将窗口平铺，使得PyCharm位于左侧，我的浏览器位于右侧。这是网络开发者常用的配置，尽管它通常在多个显示器上运行：
- en: '![Figure 7.6: PyCharm will automatically reload the page in the browser every
    time you save changes to the file](img/B19644_07_06.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图7.6：每次你保存对文件的更改时，PyCharm都会自动在浏览器中重新加载页面](img/B19644_07_06.jpg)'
- en: 'Figure 7.6: PyCharm will automatically reload the page in the browser every
    time you save changes to the file'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6：每次你保存对文件的更改时，PyCharm都会自动在浏览器中重新加载页面
- en: 'I’ve added a second `<p>` tag that reads as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我添加了一个新的`<p>`标签，内容如下：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The moment I pressed *Ctrl* + *S* (*Cmd* + *S* on Mac), the browser updated
    with the new content. This seriously speeds up development! This is hardly revolutionary;
    most editors support this in some way, but so does PyCharm.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当我按下*Ctrl* + *S*（在Mac上为*Cmd* + *S*）时，浏览器会更新为新内容。这极大地加快了开发速度！这几乎算不上革命性的；大多数编辑器以某种方式支持这一点，但PyCharm也支持。
- en: The Live Edit plugin
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Live Edit插件
- en: In older versions of JetBrains IDEs that support HTML development, you used
    to need a plugin called Live Edit to get this auto-reload feature. You don’t need
    it anymore since the feature is integrated into the IDE.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在支持HTML开发的旧版JetBrains IDE中，你过去需要使用一个名为Live Edit的插件来获取这个自动重新加载功能。现在你不再需要它了，因为这个功能已经集成到IDE中。
- en: Using the PyCharm HTML preview
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用PyCharm HTML预览
- en: 'If you’d rather keep 100% of your work in PyCharm rather than have an external
    browser, there is a new HTML preview feature, as shown in *Figure 7**.7*, that
    launches an internal version of the Chromium browser:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更愿意将100%的工作保留在PyCharm中，而不是使用外部浏览器，那么有一个新的HTML预览功能，如图*图7.7*所示，它会启动Chromium浏览器的内部版本：
- en: '![Figure 7.7: The PyCharm preview window allows you to view your work in a
    Chromium browser window implemented as a PyCharm UI tab](img/B19644_07_07.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图7.7：PyCharm预览窗口允许你在Chromium浏览器窗口中查看你的工作，该窗口作为PyCharm UI标签实现](img/B19644_07_07.jpg)'
- en: 'Figure 7.7: The PyCharm preview window allows you to view your work in a Chromium
    browser window implemented as a PyCharm UI tab'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7：PyCharm预览窗口允许你在Chromium浏览器窗口中查看你的工作，该窗口作为PyCharm UI标签实现
- en: If you’re not familiar, Chromium is the open source version of Chrome. This
    is important to note since over the years, I’ve seen a lot of web development
    products with goofy preview products bundled in that bear little relevance to
    how your work will be displayed in a real browser.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉，Chromium是Chrome的开源版本。这一点很重要，因为多年来，我看到了很多包含预览产品捆绑的Web开发产品，这些产品与你的工作在真实浏览器中的显示几乎没有关系。
- en: Configuring the available browsers
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置可用的浏览器
- en: 'The browser icons that appear as preview browsers are configurable. You can
    add or remove any browser on your computer to or from the configuration. You’ll
    find this by going to **Settings** under **Tools** | **Web Browsers**, and then
    **Preview**, as shown in *Figure 7**.8*:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 出现在预览浏览器中的浏览器图标是可以配置的。你可以将你的计算机上的任何浏览器添加或删除到配置中。你可以通过转到**工具**|**Web浏览器**下的**设置**，然后是**预览**来找到它，如图*图7.8*所示：
- en: '![Figure 7.8: You can add and remove browsers for preview and configure reload
    behaviors](img/B19644_07_08.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图7.8：你可以添加和删除浏览器以进行预览，并配置重新加载行为](img/B19644_07_08.jpg)'
- en: 'Figure 7.8: You can add and remove browsers for preview and configure reload
    behaviors'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8：你可以添加和删除浏览器以进行预览，并配置重新加载行为
- en: I think you’ll find adding new browsers as easy as clicking the **+** icon and
    locating the browser’s executable. If you’d like to remove the unsightly presence
    of Internet Explorer, just click it, and click the **–** icon.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为你会发现添加新浏览器就像点击**+**图标并定位浏览器的可执行文件一样简单。如果你想移除令人不快的Internet Explorer的存在，只需点击它，然后点击**–**图标。
- en: Note the dropdown that allows you to set the default launch browser to the system
    default, which is the first in the list, or a custom path. You can also configure
    whether you see the launch icons for HTML files and/or XML files.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注意下拉菜单，允许你设置默认启动浏览器为系统默认，即列表中的第一个，或者一个自定义路径。你还可以配置是否显示HTML文件和/或XML文件的启动图标。
- en: The reload behavior can be configured at the bottom of the screen. You can set
    the reload to happen on save, on change, or turn it off. In my opinion, the **On
    Change** setting fires too often. I leave it set to **On Save**.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在屏幕底部配置重新加载行为。你可以设置在保存时、更改时重新加载，或者关闭它。在我看来，**更改时**设置触发得太频繁了。我将其设置为**保存时**。
- en: Navigating structure code with the structure window
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用结构窗口导航结构代码
- en: 'The structure window allows you to view the structure of your code. Most of
    the time, the structure window just shows a list of functions and global variables.
    If you open a class file, you’ll see the properties and methods of the class.
    *Figure 7**.09* shows what happens when you use the structure window with an HTML
    document:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 结构窗口允许你查看代码的结构。大多数时候，结构窗口只显示函数和全局变量的列表。如果你打开一个类文件，你会看到类的属性和方法。*图7**.09*展示了当你使用结构窗口与HTML文档一起使用时会发生什么：
- en: '![Figure 7.9: The structure window allows you to see and navigate the DOM in
    the code window](img/B19644_07_09.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图7.9：结构窗口允许你在代码窗口中查看和导航DOM](img/B19644_07_09.jpg)'
- en: 'Figure 7.9: The structure window allows you to see and navigate the DOM in
    the code window'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9：结构窗口允许你在代码窗口中查看和导航DOM
- en: When you open the structure view on an HTML page, you can see and easily navigate
    the entire DOM structure of the HTML document.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在HTML页面上打开结构视图时，你可以查看并轻松导航整个HTML文档的DOM结构。
- en: Adding the CSS
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加CSS
- en: 'Right-click the project folder and add a Stylesheet file called `mystyle.css`,
    as shown in *Figure 7**.10*. You will be prompted to choose a Stylesheet type.
    We’re sticking to CSS files. The rest of the options are fancy, but they all transpile,
    usually via the **Babel** library and a **WebPack** build script, to regular CSS
    at the end of the day. If you are new to frontend work, I recommend learning plain
    CSS before branching off into exotic topics such as **Less** or **Sass**:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 右键点击项目文件夹，添加一个名为 `mystyle.css` 的样式表文件，如图 *图7**.10* 所示。系统会提示你选择样式表类型。我们坚持使用CSS文件。其余的选项都很花哨，但最终它们都会通过**Babel**库和**WebPack**构建脚本转换成常规CSS。如果你是前端工作的初学者，我建议在学习**Less**或**Sass**等特殊主题之前，先学习纯CSS：
- en: '![Figure 7.10: Create a new CSS file using File | New | Stylesheet](img/B19644_07_10.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图7.10：使用文件 | 新建 | 样式表创建一个新的CSS文件](img/B19644_07_10.jpg)'
- en: 'Figure 7.10: Create a new CSS file using File | New | Stylesheet'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10：使用文件 | 新建 | 样式表创建一个新的CSS文件
- en: 'Be sure to name the file `mystyle.css` so that it matches what we have in the
    `<link>` tag in our HTML file. It also needs to be in the same folder as `index.html`.
    Add this code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 确保文件名为`mystyle.css`，以便与我们在HTML文件中的`<link>`标签中的内容匹配。它还需要与`index.html`文件在同一个文件夹中。添加以下代码：
- en: '[PRE3]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Save the file and return to your browser. Don’t expect it to have updated; PyCharm’s
    reload feature is watching the `index.html` file, not the newly created `mystyle.css`
    file. Hit the reload button in your browser. I won’t bother with a black-and-white
    screenshot of a colored HTML page. The change should be immediately noticeable.
    Now that the browser has loaded the CSS, you can edit the CSS in PyCharm. With
    each save, the page will update, just as it did when you edited the HTML in the
    `index.html` page.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并返回浏览器。不要期望它已经更新；PyCharm的重新加载功能正在监视`index.html`文件，而不是新创建的`mystyle.css`文件。在浏览器中点击重新加载按钮。我不会提供彩色HTML页面的黑白截图。变化应该立即显而易见。现在浏览器已经加载了CSS，你可以在PyCharm中编辑CSS。每次保存，页面都会更新，就像你在`index.html`页面中编辑HTML时一样。
- en: 'You no doubt noticed the excellent code completion as you typed in the CSS
    code. The color codes were all displayed by name, as well as hex value, as shown
    in *Figure 7**.11*:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入CSS代码时，无疑注意到了出色的代码补全。颜色代码都按名称以及十六进制值显示，如图*图7.11*所示：
- en: '![Figure 7.11: As you type CSS color names, you’ll see the name, the hex value,
    and a preview of the color](img/B19644_07_11.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图7.11：当你输入CSS颜色名称时，你会看到名称、十六进制值以及颜色的预览](img/B19644_07_11.jpg)'
- en: 'Figure 7.11: As you type CSS color names, you’ll see the name, the hex value,
    and a preview of the color'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11：当你输入CSS颜色名称时，你会看到名称、十六进制值以及颜色的预览
- en: There is a preview of the color next to the CSS color name as well so that you
    can see what color you’re setting.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS颜色名称旁边也有颜色的预览，这样你可以看到你正在设置的颜色。
- en: Using color selectors
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用颜色选择器
- en: 'You can set the color using a name or a hex value, or you can edit an existing
    color using the swatch, as shown in *Figure 7**.12*. Here, I’ve clicked the color
    swatch in the gutter on line 10 of the `mystyle.css` file:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用名称或十六进制值来设置颜色，或者你可以使用色块编辑现有的颜色，如图*图7.12*所示。在这里，我点击了`mystyle.css`文件第10行的侧边栏中的颜色色块：
- en: '![Figure 7.12: You can edit the color by clicking the swatch in the gutter
    and picking a new color](img/B19644_07_12.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图7.12：你可以通过点击侧边栏中的色块并选择新的颜色来编辑颜色](img/B19644_07_12.jpg)'
- en: 'Figure 7.12: You can edit the color by clicking the swatch in the gutter and
    picking a new color'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12：你可以通过点击侧边栏中的色块并选择新的颜色来编辑颜色
- en: From here, I can pick the color using an RGBA or hex value or just drag the
    cursor around the color window. There’s a hue slider as well as a slider for the
    alpha channel. This controls the opacity, which the UI is displaying as a percentage
    rather than the traditional 0-255 integer value.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我可以使用RGBA或十六进制值选择颜色，或者只需将光标在颜色窗口周围拖动。这里还有一个色调滑块以及alpha通道的滑块。这控制了不透明度，UI将其显示为百分比而不是传统的0-255整数值。
- en: You’ll also notice that there is an eye dropper tool. You can use the eye dropper
    to select any color that’s visible on your screen. This allows you to, for example,
    match a color to be used on your type with a color from an image that’s visible
    on your screen.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会注意到有一个吸管工具。你可以使用吸管选择屏幕上可见的任何颜色。这允许你，例如，将用于你的文本的颜色与屏幕上可见的图像中的颜色相匹配。
- en: Adding JavaScript
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加JavaScript
- en: It’s time to round out our experience with HTML, CSS, and JavaScript by adding
    some interactivity to our page. Right-click on the project folder and add a JavaScript
    file called `index.js`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候通过在我们的页面上添加一些交互性来完善我们的HTML、CSS和JavaScript体验了。右键单击项目文件夹，并添加一个名为`index.js`的JavaScript文件。
- en: We’re going to add a button to our HTML file, then have that button react when
    we click it using JavaScript. We’ll write the JavaScript code first; then, we’ll
    go back and add the button.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向我们的HTML文件添加一个按钮，然后使用JavaScript使其在点击时做出反应。我们首先编写JavaScript代码；然后，我们将返回并添加按钮。
- en: Adding some JavaScript code
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一些JavaScript代码
- en: 'Enter this code into your `index.js` file:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码输入到你的`index.js`文件中：
- en: '[PRE4]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We’ll add some elements to the HTML file that are referenced in this JavaScript
    in a minute. First, we’ll add a button with an ID of `btnClickMe`. Then, we’ll
    add a span tag inside a paragraph with an ID of `textDisplay`. Finally, we’ll
    create a variable called `clickCount`. You can probably see where this is going.
    When you load the page, the value of `clickCount` will be `0`. Each time you click
    the button, we increment the `clickCount` variable, then update the HTML within
    the span tag to reflect the new value.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在稍后添加一些在JavaScript中引用的HTML文件中的元素。首先，我们将添加一个ID为`btnClickMe`的按钮。然后，我们将在ID为`textDisplay`的段落内添加一个`span`标签。最后，我们将创建一个名为`clickCount`的变量。你可能已经猜到了。当你加载页面时，`clickCount`的值将是`0`。每次你点击按钮时，我们都会增加`clickCount`变量，然后更新`span`标签内的HTML以反映新的值。
- en: 'To make this work, we need an `onclick` handler for the button. Add this code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要使这生效，我们需要为按钮添加一个`onclick`处理程序。添加以下代码：
- en: '[PRE5]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The button’s `onclick` handler is assigned to the anonymous function, which
    increments `clickCount` and updates the display. I even went the extra mile and
    cast `clickCount` to a string.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮的`onclick`处理程序被分配给匿名函数，该函数增加`clickCount`并更新显示。我甚至更进一步，将`clickCount`转换为字符串。
- en: With our JavaScript in place, let’s update our HTML.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的JavaScript就绪后，让我们更新我们的HTML。
- en: Adding the elements to the HTML file
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将元素添加到HTML文件中
- en: 'Now, let’s go back to the `index.html` file and add two new elements. First,
    we''ll add a text area:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到`index.html`文件并添加两个新元素。首先，我们将添加一个文本区域：
- en: '[PRE6]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, let’s add a button:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加一个按钮：
- en: '[PRE7]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The button has an ID attribute of `btnClickMe`, which I used in the JavaScript
    to the `onclick` event in the browser. Each time the `clickCount`. Then, the function
    changes the text that appears in the span tag with an `id` of `textArea`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮有一个ID属性`btnClickMe`，我在JavaScript中将其用于浏览器的`onclick`事件。每次点击`clickCount`。然后，该函数会更改出现在具有`id`为`textArea`的span标签中的文本。
- en: 'We’re almost done! We just need to add a script tag to the bottom of the HTML
    file. Add this line just above the closing body tag:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了！我们只需要在HTML文件的底部添加一个脚本标签。将此行添加到关闭body标签之上：
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This line will load your JavaScript file after all the HTML has loaded into
    the browser window. Manually refresh your browser. You can click the **Click me**
    button and see the counter increment. You can see mine in *Figure 7**.13*:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将在所有HTML都加载到浏览器窗口后加载你的JavaScript文件。手动刷新你的浏览器。你可以点击**点击我**按钮，看到计数器增加。你可以在*图7.13*中看到我的：
- en: '![Figure 7.13: Our web page is now interactive!](img/B19644_07_13.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图7.13：我们的网页现在可以交互了！](img/B19644_07_13.jpg)'
- en: 'Figure 7.13: Our web page is now interactive!'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.13：我们的网页现在可以交互了！
- en: As you were working, you no doubt took advantage of the usual code completion
    we’ve been discussing. That’s pretty nice, right? But it gets even better! I’m
    going to show you how to debug from your IDE. Normally, you’d have to rely solely
    on the debugging tools in your browser, which means switching back and forth between
    the code display in your browser and your IDE. I have, at least once or twice,
    forgotten which tool I was in and found myself trying to directly edit in the
    browser’s debugging tool. This works, except that it doesn’t save your file back
    to the actual code file. Admittedly, this only happens when I’m really tired,
    but with two middle-school-aged daughters, a full-time job running a development
    team, and writing books, I’m pretty much always really tired. I did mention earlier
    that the debugger is my favorite feature, so without further ado, I give you client-side
    JavaScript debugging!
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在你工作的过程中，你无疑已经利用了我们一直在讨论的常规代码补全功能。这真是太好了，对吧？但是还有更好的！我将向你展示如何在IDE中进行调试。通常，你只能依赖浏览器中的调试工具，这意味着需要在浏览器中的代码显示和你的IDE之间来回切换。至少有一次或两次，我忘记了我在哪个工具中，发现自己试图直接在浏览器的调试工具中编辑。这可以工作，但是它不会将文件保存回实际的代码文件。诚然，这只有在我真的累的时候才会发生，但是有两个上中学的女儿，一份全职工作负责管理一个开发团队，还要写书，我几乎总是真的很累。我之前确实提到过调试器是我最喜欢的功能，所以无需多言，我给你带来客户端JavaScript调试！
- en: Debugging client-side JavaScript
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试客户端JavaScript
- en: You can debug the JavaScript that runs in your browser by setting up Google
    Chrome as your default browser. Chrome has a very good remote debugging server
    built into the browser. PyCharm can connect to it and display the debugging information
    directly in the PyCharm UI, just as it would appear when we debugged Python code
    back in [*Chapter 6*](B19644_06.xhtml#_idTextAnchor145), *Seamless Testing, Debugging,*
    *and Profiling*.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过设置Google Chrome为默认浏览器来调试浏览器中运行的JavaScript。Chrome内置了一个非常好的远程调试服务器。PyCharm可以连接到它，并在PyCharm
    UI中直接显示调试信息，就像我们在[*第6章*](B19644_06.xhtml#_idTextAnchor145)，*无缝测试、调试、*和*性能分析*中调试Python代码时一样。
- en: 'Open the `index.js` file and set a breakpoint in our click handler function
    on line 7, as shown in *Figure 7**.14*:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`index.js`文件，并在第7行设置断点，如图*图7.14*所示：
- en: '![Figure 7.14: By setting a breakpoint in your client-side code, you can debug
    your client-side JavaScript just as easily as you can debug Python code](img/B19644_07_14.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图7.14：通过在客户端代码中设置断点，你可以像调试Python代码一样轻松地调试客户端JavaScript](img/B19644_07_14.jpg)'
- en: 'Figure 7.14: By setting a breakpoint in your client-side code, you can debug
    your client-side JavaScript just as easily as you can debug Python code'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.14：通过在客户端代码中设置断点，你可以像调试Python代码一样轻松地调试客户端JavaScript
- en: 'To use the JavaScript debugger directly in PyCharm, you need to create a run
    configuration. We covered creating run configurations in detail in *Chapter 6*,
    *Seamless Testing, Debugging, and Profiling*. To create a run configuration that’s
    capable of working with a JavaScript file loaded into HTML, create a run configuration
    using the JavaScript Debug template, as shown in *Figure 7**.15*:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要在PyCharm中直接使用JavaScript调试器，你需要创建一个运行配置。我们在*第6章*，*无缝测试、调试和性能分析*中详细介绍了创建运行配置。要创建一个能够与加载到HTML中的JavaScript文件一起工作的运行配置，请使用JavaScript调试模板创建一个运行配置，如图*图7.15*所示：
- en: '![Figure 7.15: Use the JavaScript Debug template to set up a run configuration
    that allows you to debug your JavaScript code directly in PyCharm](img/B19644_07_15.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图7.15：使用JavaScript调试模板设置运行配置，允许您在PyCharm中直接调试JavaScript代码](img/B19644_07_15.jpg)'
- en: 'Figure 7.15: Use the JavaScript Debug template to set up a run configuration
    that allows you to debug your JavaScript code directly in PyCharm'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.15：使用JavaScript调试模板设置运行配置，允许您在PyCharm中直接调试JavaScript代码
- en: 'Once you’ve selected the template, you’ll see a settings screen, similar to
    the one in *Figure 7**.16*:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您选择了模板，您将看到一个设置屏幕，类似于*图7*.16*中的：
- en: '![Figure 7.16: Fill in the settings to run your HTML page, which loads your
    JavaScript for debugging](img/B19644_07_16.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图7.16：填写设置以运行您的HTML页面，该页面加载JavaScript以进行调试](img/B19644_07_16.jpg)'
- en: 'Figure 7.16: Fill in the settings to run your HTML page, which loads your JavaScript
    for debugging'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.16：填写设置以运行您的HTML页面，该页面加载JavaScript以进行调试
- en: The key settings fields are numbered in *Figure 7**.16*.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 关键设置字段在*图7*.16*中编号。
- en: At position *1*, you can fill in a name for the run configuration. It can be
    anything you like since the name doesn’t affect the workings of the run configuration.
    For the URL, you want to click the folder icon at *2* and just browse to your
    `index.html` file. When you do that, PyCharm will fill in the localhost URL, along
    with the port number used by PyCharm’s built-in web server. The selection at *3*
    determines which web browser is launched. PyCharm only supports debugging in browsers
    based on Chromium. For example, Chrome, Chromium, Edge, or Brave would work fine,
    but Safari or Firefox would not.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在位置*1*，您可以填写运行配置的名称。您可以选择任何您喜欢的名称，因为名称不会影响运行配置的工作。对于URL，您需要点击*2*处的文件夹图标，然后浏览到您的`index.html`文件。当您这样做时，PyCharm将填写localhost
    URL，以及PyCharm内置Web服务器使用的端口号。*3*处的选择确定要启动哪个Web浏览器。PyCharm仅支持基于Chromium的浏览器进行调试。例如，Chrome、Chromium、Edge或Brave都可以正常工作，但Safari或Firefox则不行。
- en: The setting at *4* is important since it loads your JavaScript breakpoints before
    the `OnPageLoad` event fires. If you are using JavaScript that loads based on
    an `$(function()` call, you should check this box. Our script is very simple,
    so for me, it’s fine to leave this unchecked. Note that checking this box will
    slow the load time for your debugger to start.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在*4*处的设置很重要，因为它在`OnPageLoad`事件触发之前加载您的JavaScript断点。如果您正在使用基于`$(function()`调用的JavaScript进行加载，您应该勾选此框。我们的脚本非常简单，所以对我来说，不勾选这个框也行。请注意，勾选此框将减慢调试器启动的加载时间。
- en: To start your debugging session, click the usual debugging button. If you don’t
    remember where this is, refer back to [*Chapter 6*](B19644_06.xhtml#_idTextAnchor145).
    Chrome will launch with your web page. Upon clicking the **Click me** button we
    made earlier, the debugger in PyCharm should intercept the event. As with our
    debugger coverage in [*Chapter 6*](B19644_06.xhtml#_idTextAnchor145), you can
    use all the same features to inspect and step through your JavaScript code.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始您的调试会话，请点击常规调试按钮。如果您不记得在哪里，请参阅[*第6章*](B19644_06.xhtml#_idTextAnchor145)。Chrome将带您的网页启动。在点击我们之前制作的**点击我**按钮后，PyCharm中的调试器应该会拦截该事件。与我们在[*第6章*](B19644_06.xhtml#_idTextAnchor145)中的调试器覆盖范围一样，您可以使用所有相同的功能来检查和逐步执行您的JavaScript代码。
- en: Working with Emmet templating
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Emmet模板化工作
- en: Emmet is a powerful and widely used plugin in PyCharm that provides an efficient
    and streamlined way of writing HTML, **JavaScript XML** (**JSX**), and CSS code.
    It offers a range of templating features that significantly boost developer productivity
    and speed up the coding process. By leveraging the Emmet abbreviations and snippets,
    developers can write code snippets in a shorthand syntax and expand them into
    complete HTML or CSS structures with just a few keystrokes. The only downside
    is that you need to learn and memorize the Emmet abbreviations. I don’t have the
    space to turn this into an Emmet tutorial. There is a cheat sheet available at
    [https://docs.emmet.io/cheat-sheet/](https://docs.emmet.io/cheat-sheet/).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Emmet是PyCharm中一个强大且广泛使用的插件，它提供了一种高效且简化的方式来编写HTML、**JavaScript XML**（**JSX**）和CSS代码。它提供了一系列模板功能，这些功能可以显著提高开发者的生产力和加快编码过程。通过利用Emmet缩写和代码片段，开发者可以使用简写语法编写代码片段，并通过几个按键将其扩展为完整的HTML或CSS结构。唯一的缺点是您需要学习和记忆Emmet缩写。我没有空间将其变成一个Emmet教程。有一个作弊表可以在[https://docs.emmet.io/cheat-sheet/](https://docs.emmet.io/cheat-sheet/)找到。
- en: To use Emmet in PyCharm, you only need to type some Emmet shorthand into the
    editor window and press *Tab*. For instance, by typing `ul>li.item$*5`, followed
    by pressing the *Tab* key, Emmet can generate an unordered list with five list
    items, where the `$` symbol is automatically incremented for each item. This feature
    is particularly useful when dealing with repetitive HTML structures and eliminates
    the need to manually type out repetitive code blocks.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要在PyCharm中使用Emmet，您只需在编辑器窗口中输入一些Emmet缩写，然后按*Tab*键。例如，通过输入`ul>li.item$*5`，然后按*Tab*键，Emmet可以生成一个包含五个列表项的无序列表，其中`$`符号会自动为每个项目递增。此功能在处理重复的HTML结构时特别有用，并消除了手动输入重复代码块的需要。
- en: 'Another powerful feature of Emmet in PyCharm is that you can navigate and edit
    HTML and CSS code efficiently. With the **Go to Edit Point** feature, developers
    can navigate between predefined edit points within an expanded abbreviation, allowing
    for quick modifications and adjustments. Additionally, Emmet’s automatic tag closing
    feature ensures that HTML tags are automatically closed, reducing the chance of
    syntax errors and saving time in the coding process. The **Go to Edit Point**
    feature effectively allows you to put placeholders in the code template. If you
    tried out the earlier example with the unordered list, you might have noticed
    that the code was generated, but your cursor was sitting inside the first list
    item tag, as seen in *Figure 7**.17*:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在PyCharm中，Emmet的另一个强大功能是您可以高效地导航和编辑HTML和CSS代码。使用**转到编辑点**功能，开发者可以在扩展缩写中的预定义编辑点之间导航，从而实现快速修改和调整。此外，Emmet的自动标签关闭功能确保HTML标签自动关闭，减少了语法错误的可能性，并在编码过程中节省了时间。**转到编辑点**功能实际上允许您在代码模板中放置占位符。如果您尝试了之前的无序列表示例，您可能会注意到代码已生成，但您的光标位于第一个列表项标签内，如图*图7**.17*所示：
- en: '![Figure 7.17: Emmet generated the unordered list thanks to the edit point
    defined in the template](img/B19644_07_17.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图7.17：Emmet通过模板中定义的编辑点生成了无序列表](img/B19644_07_17.jpg)'
- en: 'Figure 7.17: Emmet generated the unordered list thanks to the edit point defined
    in the template'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.17：Emmet通过模板中定义的编辑点生成了无序列表
- en: Emmet also provides intelligent CSS abbreviations that simplify the process
    of writing and expanding CSS properties. By using shortcuts such as “bg” for “background”
    or “p” for “padding,” developers can quickly generate CSS code snippets without
    having to remember the full property names. This feature speeds up the CSS development
    process and enhances code readability.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Emmet还提供了智能CSS缩写，简化了编写和展开CSS属性的过程。通过使用“bg”代表“background”或“p”代表“padding”等快捷方式，开发者可以快速生成CSS代码片段，而无需记住完整的属性名称。此功能加快了CSS开发过程，并提高了代码的可读性。
- en: HTML project types in PyCharm Professional
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyCharm专业版中的HTML项目类型
- en: 'Earlier, I mentioned that I wanted to start you off with a basic empty project
    with some simple HTML, CSS, and JavaScript code we created from scratch. PyCharm
    Professional offers new additional pure HTML project types. By pure, I mean they
    don’t use any modern JavaScript frameworks such as React or Angular. These modern
    frameworks represent a paradigm shift in frontend development. A pure HTML project
    will continue to use very traditional DOM manipulation, as we did in our JavaScript
    example earlier. To change the content of our click counter span, we used this
    code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我提到我想从一些基本的空项目开始，这些项目包含一些简单的HTML、CSS和JavaScript代码，这些代码是我们从头开始创建的。PyCharm专业版提供了新的纯HTML项目类型。这里的“纯”意味着它们不使用任何现代JavaScript框架，如React或Angular。这些现代框架代表了前端开发的一个范式转变。纯HTML项目将继续使用非常传统的DOM操作，就像我们在之前的JavaScript示例中所做的那样。要更改点击计数器span的内容，我们使用了以下代码：
- en: '[PRE9]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Since client-side JavaScript like this runs in the browser, the code has access
    to the document object, which is effectively the browser window. JavaScript can
    manipulate the currently loaded document or even update the contents of the browser
    window itself.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 由于像这样的客户端JavaScript在浏览器中运行，代码可以访问文档对象，这实际上就是浏览器窗口。JavaScript可以操作当前加载的文档，甚至可以更新浏览器窗口本身的内容。
- en: Modern JavaScript frameworks no longer manipulate the DOM. Instead, they rely
    on a state change mechanism coupled with the idea of a shadow DOM. In the case
    of React, your program, which consists mainly of JavaScript, CSS, and HTML markup
    generated by JSX, maintains a component-driven state machine. Changes to the state
    trigger events within the React framework, which, in turn, trigger a re-render
    of the affected areas in the UI.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现代JavaScript框架不再操作DOM。相反，它们依赖于状态变化机制，并与阴影DOM的概念相结合。在 React 的情况下，你的程序，主要由 JavaScript、CSS
    和 JSX 生成的 HTML 标记组成，维护一个由组件驱动的状态机。状态的变化会在 React 框架内触发事件，进而触发 UI 中受影响区域的重新渲染。
- en: This is a fairly complicated paradigm to explain to the uninitiated, and since
    this isn’t a book on modern JavaScript, I’ll punt the idea of a deeper explanation
    to other books in the *Further reading* section at the end of this chapter.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于初学者来说是一个相当复杂的范式，而且由于这不是一本关于现代 JavaScript 的书，我将把更深入解释的想法推迟到本章末尾的 *进一步阅读* 部分的其他书籍中。
- en: There are two project types we can look at that are DOM-based. Let’s check them
    out.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以查看两种基于 DOM 的项目类型。让我们来看看它们。
- en: HTML 5 Boilerplate
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML 5 模板
- en: The **HTML 5 Boilerplate** (**H5BP**) project can be found at [https://html5boilerplate.com/](https://html5boilerplate.com/).
    This project has been around since 2011, and it represents a site generation tool
    that epitomizes HTML development best practices. If you could generate a 100%
    by-the-book website as a starting point, and then alter it to make pretty much
    anything, you’d have H5BP.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTML 5 模板**（**H5BP**）项目可以在 [https://html5boilerplate.com/](https://html5boilerplate.com/)
    找到。这个项目自 2011 年以来一直存在，它代表了一个网站生成工具，体现了 HTML 开发的最佳实践。如果你能从一个 100% 符合规范的网站作为起点，然后对其进行修改以实现几乎任何功能，你就有
    H5BP。'
- en: 'Here are a few of its key features:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是其几个关键特性：
- en: A well-thought-out and structured `index.html` file replete with metadata tags
    and every optimization you could want. Just add content.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个经过深思熟虑且结构化的 `index.html` 文件，包含所有可能的元数据标签和优化。只需添加内容即可。
- en: '`Normalize.css` and `Main.css` take care of your CSS resets and provide some
    base styles for helpers, media queries for responsive design, and even print-friendly
    options.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Normalize.css` 和 `Main.css` 负责处理 CSS 重置并提供一些基础样式，用于辅助工具、响应式设计的媒体查询，甚至提供打印友好的选项。'
- en: Google Analytics baked in.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置 Google Analytics。
- en: The Modernizr library is included so that you can detect which browser is running
    your code and react accordingly.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Modernizr 库已包含在内，这样你可以检测运行你代码的浏览器，并相应地做出反应。
- en: Server setting files so that you can deliver performance and security.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器设置文件，以便你可以提供性能和安全。
- en: Placeholder icons for mobile devices, favicons, and progressive web apps.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动设备占位符图标、favicon 和渐进式 Web 应用。
- en: As I said, it is the ultimate HTML 5 starter kit for any website that doesn’t
    lock you into a lot. Older versions use jQuery, but like so many other frameworks,
    more recent builds remove it as a dependency should you not want to use it.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我说的，这是任何网站终极的 HTML 5 起始套件，它不会让你陷入很多限制。旧版本使用 jQuery，但像许多其他框架一样，较新的构建在你不希望使用它的情况下会将其作为依赖项移除。
- en: Let’s create an H5BP project in PyCharm. Click `h5bp` and I’m just putting it
    in the default PyCharm `Projects` folder on my computer.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 PyCharm 中创建一个 H5BP 项目。点击 `h5bp`，我正将其放入电脑上默认的 PyCharm `Projects` 文件夹中。
- en: 'Behind the scenes, PyCharm will generate a large project using H5BP via npm.
    *Figure 7**.18* shows my generated project:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，PyCharm 将通过 npm 使用 H5BP 生成一个大型项目。*图 7.18* 展示了我生成的项目：
- en: '![Figure 7.18: My HTML 5 Boilerplate project with index.html open](img/B19644_07_18.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.18：我的 HTML 5 模板项目，index.html 已打开](img/B19644_07_18.jpg)'
- en: 'Figure 7.18: My HTML 5 Boilerplate project with index.html open'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18：我的 HTML 5 模板项目，index.html 已打开
- en: Wow! Just look at all that code you didn’t have to type, look up, or remember!
    With a more extensive project loaded, let’s look at a few helpful features that
    I haven’t pointed out yet.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！看看所有你不必输入、查找或记住的代码！加载了一个更广泛的项目后，让我们看看一些我尚未指出的有用特性。
- en: Previewing and editing graphics with external tools
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用外部工具预览和编辑图形
- en: 'You can preview graphics in PyCharm by simply double-clicking the file. I’ll
    open the `tile.png` file, as seen in *Figure 7**.19*:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过双击文件在 PyCharm 中预览图形。我将打开 *图 7.19* 中看到的 `tile.png` 文件：
- en: '![Figure 7.19: You can view graphics in PyCharm by simply opening them](img/B19644_07_19.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.19：只需打开即可在 PyCharm 中查看图形](img/B19644_07_19.jpg)'
- en: 'Figure 7.19: You can view graphics in PyCharm by simply opening them'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19：只需打开即可在 PyCharm 中查看图形
- en: I may have teased you a bit by implying that you can edit images in PyCharm.
    You can’t. But you can configure an external editor that will launch when you
    open a graphic.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能通过暗示您可以在PyCharm中编辑图像而让您有些困惑。您不能。但您可以配置一个外部编辑器，当您打开图形时，它将被启动。
- en: 'Launch the settings window and find **Tools** | **External Tools**. Click the
    **+** icon in the top toolbar. In *Figure 7**.20*, I’m setting up the **Gnu Image
    Manipulation Program** (**GIMP**), which is an open source alternative to **Adobe
    Photoshop**:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 打开设置窗口，找到**工具** | **外部工具**。点击顶部工具栏中的**+**图标。在*图7.20*中，我正在设置**Gnu图像处理程序**（**GIMP**），这是一个**Adobe
    Photoshop**的开源替代品：
- en: '![Figure 7.20: You can configure GIMP as an external editor to open images
    in your project](img/B19644_07_20.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图7.20：您可以将GIMP配置为外部编辑器以在项目中打开图像](img/B19644_07_20.jpg)'
- en: 'Figure 7.20: You can configure GIMP as an external editor to open images in
    your project'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.20：您可以将GIMP配置为外部编辑器以在项目中打开图像
- en: 'Don’t get me wrong here: I prefer Photoshop. If you have it, use that. It doesn’t
    run in Linux (to me, Wine doesn’t count), so GIMP is the next best thing. Any
    kind of file that PyCharm can’t edit can benefit from an external editor. Another
    good addition I often make is **Inkscape** or **Adobe Illustrator** for working
    with **Scalable Vector Graphics** (**SVG**) files. These are useful because they
    are resolution independent. Likewise, if you serve PDF files, adding **Adobe Acrobat**
    or some other program to manipulate PDFs is a good candidate for adding as an
    external tool.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 请不要误解我：我更喜欢Photoshop。如果您有它，请使用它。它不在Linux上运行（对我来说，Wine不算），所以GIMP是下一个最好的选择。PyCharm无法编辑的任何类型的文件都可以从外部编辑器中受益。我经常添加的另一个好工具是**Inkscape**或**Adobe
    Illustrator**，用于处理**可缩放矢量图形**（**SVG**）文件。这些很有用，因为它们是分辨率无关的。同样，如果您提供PDF文件，添加**Adobe
    Acrobat**或其他用于操作PDF的程序作为外部工具也是一个不错的选择。
- en: To open a file in the external editor, just right-click the file, click the
    **External Tools** menu option, and select the appropriate external tool.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要在外部编辑器中打开文件，只需右键单击文件，点击**外部工具**菜单选项，并选择适当的工具。
- en: Uploading your site to a server
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上传您的网站到服务器
- en: Many large sites and software projects use a continuous deployment system to
    deploy code to servers. If your project isn’t that far along yet, or maybe you
    just need something simple, PyCharm has a publishing mechanism designed to help
    you easily publish a website or application. For that matter, it can be used to
    publish any kind of software, but I most often see it used to deploy web projects
    to web servers.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 许多大型网站和软件项目使用持续部署系统将代码部署到服务器。如果您的项目还没有达到那个阶段，或者您可能只需要一些简单的东西，PyCharm有一个发布机制，旨在帮助您轻松发布网站或应用程序。就这个而言，它可以用来发布任何类型的软件，但我最常见的是用它来部署Web项目到Web服务器。
- en: 'You’ll find the deployment configuration and tools in the **Tools** menu, as
    shown in *Figure 7**.21*:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在**工具**菜单中找到部署配置和工具，如图7.21所示：
- en: '![Figure 7.21: The deployment settings and tools can be found by going to Tools
    | Deployment](img/B19644_07_21.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图7.21：通过访问工具 | 部署可以找到部署设置和工具](img/B19644_07_21.jpg)'
- en: 'Figure 7.21: The deployment settings and tools can be found by going to Tools
    | Deployment'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.21：通过访问工具 | 部署可以找到部署设置和工具
- en: The process of setting up deployment entails configuring one or more remote
    servers. Let’s take a look at how this is done.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 设置部署的过程包括配置一个或多个远程服务器。让我们看看这是如何操作的。
- en: Configuring the remote server
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置远程服务器
- en: 'Click the **Configuration…** menu option shown in *Figure 7**.21*. You’ll be
    greeted by a plain gray window that says **Please add a web server to configure**.
    Click the **+** icon in the top-left corner of the window and select the type
    of connection you intend to use. You can see the choices in *Figure 7**.22*:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 点击*图7.21*中显示的**配置…**菜单选项。您将看到一个显示**请添加一个Web服务器以进行配置**的普通灰色窗口。点击窗口左上角的**+**图标，并选择您打算使用的连接类型。您可以在*图7.22*中看到选择项：
- en: '![Figure 7.22: Select the type of server connection you’d like to use](img/B19644_07_22.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图7.22：选择您想使用的服务器连接类型](img/B19644_07_22.jpg)'
- en: 'Figure 7.22: Select the type of server connection you’d like to use'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.22：选择您想使用的服务器连接类型
- en: 'You have several connection protocols from which to choose:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从几个连接协议中进行选择：
- en: '**Secure File Transfer Protocol** (**SFTP**). This should be your go-to. Out
    of the options on the list, it is the most secure since it relies on the **Secure
    Shell** **Protocol** (**SSH**).'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全文件传输协议**（**SFTP**）。这应该是您的首选。在列表上的选项中，它是最安全的，因为它依赖于**安全壳协议**（**SSH**）。'
- en: '**File Transfer Protocol** (**FTP**). In the real world, you should never use
    this option. FTP by itself sends all of its authentication data in an unencrypted
    text stream. Only use it if you want your site to be hacked.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件传输协议**（**FTP**）。在现实世界中，你永远不应该使用这个选项。FTP本身会将所有认证数据以未加密的文本流发送出去。只有当你想让你的网站被黑客攻击时才使用它。'
- en: '**File Transfer Protocol Secured** (**FTPS**) is FTP with **Secure Sockets
    Layer** (**SSL**) encryption. The same encryption certificates you’d use to secure
    your website with HTTPS can be used with FTP to become FTPS.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全文件传输协议**（**FTPS**）是带有**安全套接字层**（**SSL**）加密的FTP。你可以使用与HTTPS一起用于保护网站的加密证书来使用FTP，使其成为FTPS。'
- en: '**Web Distributed Authoring and Versioning** (**WebDAV**) was created back
    in the day when companies such as Microsoft and Macromedia (which were bought
    by Adobe) were selling web authoring tools for web designers – that is to say,
    people who write HTML but who aren’t overly technical. Most of them died in the
    great developer rebellion of 1998\. WebDAV allowed an authoring tool to connect
    to a server seamlessly with minimal fuss. Like FTP, though, it has its share of
    security issues. I don’t recommend using it.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web分布式创作和版本控制**（**WebDAV**）是在微软和Macromedia（后被Adobe收购）等公司向网页设计师销售网页创作工具的时代创建的——也就是说，这些人编写HTML，但并不非常技术化。其中大多数在1998年的大开发者叛乱中消失了。WebDAV允许创作工具无缝地连接到服务器，几乎无需麻烦。然而，像FTP一样，它也有其安全问题的份额。我不建议使用它。'
- en: '**Local or mounted folder** is used when you have direct network access to
    the folder being used to serve your site or application.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地或挂载文件夹**用于当你直接访问用于托管你的网站或应用程序的文件夹时。'
- en: '`build`, then copy the necessary files into that folder. I find the **Local
    or mounted folder** option to be more useful.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`构建`，然后将必要的文件复制到那个文件夹中。我发现**本地或挂载文件夹**选项更有用。'
- en: 'I’m going to walk you through connecting to a server using SFTP. When you click
    the `Web Server`, as seen in *Figure 7**.23*:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我将指导你如何使用SFTP连接到服务器。当你点击**Web服务器**，如*图7.23*所示：
- en: '![Figure 7.23: Give your server a descriptive name](img/B19644_07_23.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图7.23：给你的服务器起一个描述性的名称](img/B19644_07_23.jpg)'
- en: 'Figure 7.23: Give your server a descriptive name'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.23：给你的服务器起一个描述性的名称
- en: 'Next, you’ll need credentials. You generally get these from your friendly local
    system administrator or hosting service. These are entered into an SSH configuration,
    which is distinct from your deployment server configuration. The UI gets a little
    bit funky right here. To set up the SSH configuration, click the ellipsis button
    shown in *Figure 7**.24*:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要凭证。你通常可以从你友好的本地系统管理员或托管服务提供商那里获得这些凭证。这些凭证将输入到一个SSH配置中，它与你的部署服务器配置是不同的。UI在这里有点奇怪。要设置SSH配置，点击*图7.24*中显示的省略号按钮：
- en: '![Figure 7.24: Creating a deployment requires you to also create an SSH configuration
    by clicking the ellipsis shown here](img/B19644_07_24.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图7.24：创建部署需要你点击此处显示的省略号来创建SSH配置](img/B19644_07_24.jpg)'
- en: 'Figure 7.24: Creating a deployment requires you to also create an SSH configuration
    by clicking the ellipsis shown here'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.24：创建部署需要你点击此处显示的省略号来创建SSH配置
- en: This brings up yet another empty gray window. Click the **+** sign in the top
    corner of this window and you’ll see a screen like mine, as shown in *Figure 7**.25*.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这会弹出一个另一个空白的灰色窗口。点击这个窗口右上角的**+**号，你将看到一个像我一样的屏幕，如*图7.25*所示。
- en: Fill in your connection details – that is, your host, port, username, and password.
    Besides a password, you can also use SSH keys or a connection to an OpenSSH config
    and authentication agent. I’ll keep it simple and stick with a password. Clicking
    the **Test Connection** button tells me whether or not my credentials are working.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 填写你的连接详情——即你的主机、端口、用户名和密码。除了密码外，你还可以使用SSH密钥或连接到OpenSSH配置和认证代理。我会保持简单，坚持使用密码。点击**测试连接**按钮会告诉我我的凭证是否有效。
- en: Next, we need a root path. This should be the root of your web server’s document
    folder, assuming you mean to deploy a website. There is an autodetect button there
    that will find the SSH user’s home folder. This is fine if you’re serving from
    that location. It is common to serve from a location such as `/var/www/html` on
    the remote server. If that is the folder your server uses, make sure your system
    admin gives you the credentials needed to access that location.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个根路径。这应该是你网站服务器的文档文件夹的根目录，假设你打算部署一个网站。那里有一个自动检测按钮，它会找到SSH用户的家目录。如果你从那个位置提供服务，这是可以的。通常，人们会从远程服务器上的`/var/www/html`这样的位置提供服务。如果这是你的服务器使用的文件夹，请确保你的系统管理员给你提供访问该位置的凭证。
- en: 'Below that, you’ll see an entry for the web server’s URL. The root path on
    the server should map to the web server URL. You can see my settings in *Figure
    7**.25*:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面，你会看到一个关于网站服务器URL的条目。服务器上的根路径应该映射到网站服务器URL。你可以在*图7.25*中看到我的设置：
- en: '![Figure 7.25: My deployment settings (so far)](img/B19644_07_25.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图7.25：我的部署设置（到目前为止）](img/B19644_07_25.jpg)'
- en: 'Figure 7.25: My deployment settings (so far)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.25：我的部署设置（到目前为止）
- en: 'Your next stop is the **Mappings** tab. *Figure 7**.26* shows the **Mappings**
    tab with a mapping specified:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 你的下一个步骤是**映射**标签页。*图7.26*显示了带有指定映射的**映射**标签页：
- en: '![Figure 7.26: The Mappings tab specifies the mappings between the folders
    on your computer and the folders on the server](img/B19644_07_26.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图7.26：映射标签页指定了计算机上的文件夹与服务器上的文件夹之间的映射](img/B19644_07_26.jpg)'
- en: 'Figure 7.26: The Mappings tab specifies the mappings between the folders on
    your computer and the folders on the server'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.26：映射标签页指定了计算机上的文件夹与服务器上的文件夹之间的映射
- en: 'For a web project, you usually just need one mapping between the folder containing
    your code on your computer, and the document root of the web server. Next, switch
    to the **Excluded Paths** tab, as shown in *Figure 7**.27*:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个网站项目，通常只需要在计算机上包含你的代码的文件夹和网站服务器的文档根目录之间建立一个映射。接下来，切换到**排除路径**标签页，如图*图7.27*所示：
- en: '![Figure 7.27: Exclude paths you don’t need to copy to the server](img/B19644_07_27.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图7.27：排除不需要复制到服务器的路径](img/B19644_07_27.jpg)'
- en: 'Figure 7.27: Exclude paths you don’t need to copy to the server'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.27：排除不需要复制到服务器的路径
- en: Exclude any files you don’t want to be copied. You can specify local files that
    shouldn’t be copied to the server, and remote files that should not be copied
    down to your computer. I added the contents of the `doc` folder, which contains
    documentation for the developer, and the contents of the `.idea` folder, which
    is used by PyCharm. Click **OK**, and your deployment will be configured.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 排除任何你不想复制的文件。你可以指定不应复制到服务器的本地文件，以及不应复制到你的计算机的远程文件。我添加了`doc`文件夹的内容，该文件夹包含开发者的文档，以及`.idea`文件夹的内容，该文件夹由PyCharm使用。点击**确定**，你的部署将被配置。
- en: Uploading to the server
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上传到服务器
- en: 'You are now ready to upload your project. Go back to the **Tools** | **Deployment**
    menu, and this time, click **Upload to Web Server**, as shown in *Figure 7**.28*:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经准备好上传你的项目了。回到**工具** | **部署**菜单，这次点击**上传到网站服务器**，如图*图7.28*所示：
- en: '![Figure 7.28: The upload controls are in the deployment menu](img/B19644_07_28.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图7.28：上传控制位于部署菜单中](img/B19644_07_28.jpg)'
- en: 'Figure 7.28: The upload controls are in the deployment menu'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.28：上传控制位于部署菜单中
- en: 'If you named your remote server something besides Web Server, that is what
    will appear in the menu. You will be asked to confirm the upload operation. PyCharm
    will display a message stating that the upload was successful, as seen in *Figure
    7**.29*:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你给你的远程服务器取的名字不是Web Server，那么这个名字就会出现在菜单中。你将需要确认上传操作。PyCharm将显示一条消息，表明上传成功，如图*图7.29*所示：
- en: '![Figure 7.29: The index.html file was successfully transferred](img/B19644_07_29.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图7.29：index.html文件已成功传输](img/B19644_07_29.jpg)'
- en: 'Figure 7.29: The index.html file was successfully transferred'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.29：index.html文件已成功传输
- en: 'The upload operation only copied the open `index.html` file. We can check this
    by clicking **Tools** | **Deployment** | **Browse Remote Host**. This brings up
    a view of the remote host, allowing you to see the files on the host. You can
    see mine in *Figure 7**.30*:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 上传操作只复制了打开的`index.html`文件。我们可以通过点击**工具** | **部署** | **浏览远程主机**来检查这一点。这会显示远程主机的视图，允许你查看主机上的文件。你可以在*图7.30*中看到我的文件：
- en: '![Figure 7.30: You can view the mapped project root folder on the server](img/B19644_07_30.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![图7.30：你可以在服务器上查看映射的项目根文件夹](img/B19644_07_30.jpg)'
- en: 'Figure 7.30: You can view the mapped project root folder on the server'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.30：您可以在服务器上查看映射的项目根文件夹
- en: 'You probably want to transfer the whole site rather than just the open file.
    Right-click inside the remote host window and click **Upload here**, as seen in
    *Figure 7**.31*:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望上传整个网站而不是单个打开的文件。在远程主机窗口内右键单击并点击 **上传到此**，如图 *图 7.31* 所示：
- en: '![Figure 7.31: Right-click and then select Upload here to upload the whole
    site](img/B19644_07_31.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.31：右键单击然后选择“上传到此”以上传整个网站](img/B19644_07_31.jpg)'
- en: 'Figure 7.31: Right-click and then select Upload here to upload the whole site'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.31：右键单击然后选择“上传到此”以上传整个网站
- en: As you can see from the menu, you have full graphical control over files on
    the server, including all file operations, such as rename, copy, or delete. You
    can compare operations that will diff the local file with the remote, and of course,
    the file operations are two-way, so you can synchronize work done directly on
    the server back to your computer.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如菜单所示，您可以对服务器上的文件进行完全的图形化控制，包括所有文件操作，如重命名、复制或删除。您可以将本地文件与远程文件进行比较，以查看差异，当然，文件操作是双向的，因此您可以将直接在服务器上完成的工作同步回您的计算机。
- en: All in all, this tool is more capable than a standalone file transport program
    such as FileZilla. It is integrated directly into the IDE, and there is even an
    auto-sync setting that uploads the local copy to the remote whenever you save
    a file. PyCharm has everything you need to work on the HTML frontend of a website
    or application, including the ability to publish right from PyCharm.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，这个工具比 FileZilla 这样的独立文件传输程序更强大。它直接集成到 IDE 中，甚至还有一个自动同步设置，在您保存文件时自动将本地副本上传到远程。PyCharm
    提供了您在网站或应用程序的 HTML 前端工作所需的一切，包括直接从 PyCharm 发布的能力。
- en: Creating a Bootstrap project
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Bootstrap 项目
- en: Bootstrap is another DOM-oriented HTML 5 project type you can use in PyCharm
    Professional. This one is more useful if you are building an application rather
    than a website. Bootstrap is a library of styled HTML components developed by
    Twitter that help users rapidly develop applications. Essentially, you can make
    a nice-looking application by simply generating this project, then copying and
    pasting Bootstrap snippets for elements such as buttons, card layouts, sliders,
    switches, and a mobile-first grid system.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 是另一种在 PyCharm Professional 中可以使用的以 DOM 为导向的 HTML 5 项目类型。如果您正在构建一个应用程序而不是网站，这个类型将更有用。Bootstrap
    是由 Twitter 开发的一个样式化 HTML 组件库，它帮助用户快速开发应用程序。本质上，您可以通过简单地生成此项目，然后复制粘贴 Bootstrap
    片段（如按钮、卡片布局、滑块、开关和移动优先网格系统）来制作一个看起来很棒的应用程序。
- en: 'You can create a Bootstrap project by clicking **File** | **New Project**,
    then picking **Bootstrap** from the templates on the right, as shown in *Figure
    7**.32*:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击 **文件** | **新建项目**，然后在右侧模板中选择 **Bootstrap**，如图 *图 7.32* 所示来创建一个 Bootstrap
    项目：
- en: '![Figure 7.32: Creating a Bootstrap project](img/B19644_07_32.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.32：创建 Bootstrap 项目](img/B19644_07_32.jpg)'
- en: 'Figure 7.32: Creating a Bootstrap project'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.32：创建 Bootstrap 项目
- en: All this template does is create a `js` folder and a `css` folder. PyCharm then
    downloads Bootstrap and places the library files in their respective folders.
    That’s it. It doesn’t even generate an `index.html` file for you. It is just a
    quick way to set up a project with Bootstrap.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模板所做的只是创建一个 `js` 文件夹和一个 `css` 文件夹。然后 PyCharm 下载 Bootstrap 并将库文件放置在相应的文件夹中。就是这样。它甚至不会为您生成一个
    `index.html` 文件。这只是快速设置带有 Bootstrap 的项目的一种方法。
- en: Working with modern JavaScript and NodeJS
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用现代 JavaScript 和 NodeJS
- en: PyCharm has all its features and templates available in the Web Storm product,
    which is designed for working with modern JavaScript projects. Since I assume
    you are mostly interested in Python projects, I won’t spend a lot of time delving
    into the details of server-side JavaScript development since we will be covering
    the Python options, such as Flask, FastAPI, Pyramid, and Django, in the next few
    chapters.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm 在 Web Storm 产品中提供了所有其功能和模板，Web Storm 是为与现代 JavaScript 项目一起工作而设计的。由于我假设您主要对
    Python 项目感兴趣，因此我不会花太多时间深入探讨服务器端 JavaScript 开发的细节，因为我们在接下来的几章中将会介绍 Python 选项，例如
    Flask、FastAPI、Pyramid 和 Django。
- en: However, you should know that if you have JavaScript projects and Python projects,
    there is no need to buy two separate products.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您应该知道，如果您有 JavaScript 项目和 Python 项目，没有必要购买两个独立的产品。
- en: Creating a NodeJS project
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 NodeJS 项目
- en: To create a new Node JS project, just click `NodeJS` project template. This
    is the equivalent of generating a project with the `npm init -y` command. All
    you get is a generic `package.json` file. It is pretty bare-bones, but it does
    save you the trouble of firing up a terminal and running the `init` command.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的Node JS项目，只需点击`NodeJS`项目模板。这相当于使用`npm init -y`命令生成项目。你得到的是一个通用的`package.json`文件。它相当基础，但它确实可以节省你启动终端并运行`init`命令的麻烦。
- en: In addition to a basic Node project, you can also generate a **Next.js** project
    or an **Express** project. Express is JavaScript’s answer to Flask, which we’ll
    cover in the next chapter. It is used to develop the backend of your project.
    Next.JS, on the other hand, is a fusion of frontend and backend development with
    an easy-to-use hosting service. For more on this, see [https://nextjs.org](https://nextjs.org).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基本的Node项目外，你还可以生成**Next.js**项目或**Express**项目。Express是JavaScript对Flask的回应，我们将在下一章中介绍。它用于开发项目的后端。另一方面，Next.JS是前端和后端开发的融合，提供了一个易于使用的托管服务。有关更多信息，请参阅[https://nextjs.org](https://nextjs.org)。
- en: Creating a React project
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建React项目
- en: React is one of the most popular frontend frameworks available today. It represents
    a paradigm shift in frontend development as it doesn’t use the DOM to manipulate
    the way a web UI looks. Instead of using the DOM to show and hide components in
    a **single-page application** (**SPA**) as appropriate, you instead manipulate
    a state object, which causes React to update the page.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: React是目前最受欢迎的前端框架之一。它在前端开发中代表了一种范式转变，因为它不使用DOM来操纵Web UI的外观。而不是使用DOM根据需要显示和隐藏**单页应用**（SPA）中的组件，你而是操作一个状态对象，这会导致React更新页面。
- en: React UIs are developed as a set of components that work together along with
    life cycle methods or hooks to handle traditional or even custom events. I’m showing
    a little more work with React here because it is what I use in my daily work,
    and because in a later chapter, I’ll present how to use FastAPI with a React frontend.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: React UI是以一组组件的形式开发的，这些组件协同工作，并使用生命周期方法或钩子来处理传统或自定义事件。我在这里展示了更多关于React的工作，因为它是我日常工作中使用的，而且在下一章中，我将展示如何使用FastAPI与React前端结合使用。
- en: 'Creating a React project is as easy as the others we’ve seen so far. Just click
    `create-react-app`, which is normally executed from the command line:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 创建React项目就像我们之前看到的那些一样简单。只需点击`create-react-app`，这通常是从命令行执行的：
- en: '![Figure 7.33: Create React App can be run from the PyCharm GUI](img/B19644_07_33.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图7.33：从PyCharm GUI运行Create React App](img/B19644_07_33.jpg)'
- en: 'Figure 7.33: Create React App can be run from the PyCharm GUI'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.33：从PyCharm GUI运行Create React App
- en: PyCharm also gives you an easy way to select between JavaScript, which is the
    default, and TypeScript, which is the preference for many developers. TypeScript
    is a variant of JavaScript pioneered by Microsoft in the wake of Douglas Crockford’s
    book titled *JavaScript, the Good Parts*. TypeScript aims to fix many of the bad
    parts, such as the lack of a strong type system.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm还提供了一个简单的方法来在默认的JavaScript和许多开发者的首选TypeScript之间进行选择。TypeScript是微软在Douglas
    Crockford所著的《JavaScript，好部分》一书之后开创的一种JavaScript变体。TypeScript旨在修复许多不良部分，例如缺乏强大的类型系统。
- en: Other frontend frameworks
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他前端框架
- en: PyCharm has support for several other modern frontend frameworks.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm支持其他几个现代前端框架。
- en: '**Angular** is like React in that it uses components driven by a state machine.
    The biggest difference, besides being infamous for major releases not being backward
    compatible, is bi-directional communications between components. In React, properties
    drill down from top to bottom. In Angular, communications between components go
    both directions. This can make your applications harder to debug.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**Angular**与React类似，因为它使用由状态机驱动的组件。最大的区别，除了因主要版本发布不向后兼容而臭名昭著之外，是组件之间的双向通信。在React中，属性从上到下钻取。在Angular中，组件之间的通信是双向的。这可能会使你的应用程序更难调试。'
- en: '**React Native** is an offshoot of React that’s designed to create native user
    experiences for mobile and desktop applications. The latest edition of the .NET
    framework from Microsoft includes a React Native variant for creating Windows
    user interfaces for desktop applications.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '**React Native**是React的一个分支，旨在为移动和桌面应用程序创建原生用户体验。微软最新的.NET框架版本包括一个React Native变体，用于创建桌面应用程序的Windows用户界面。'
- en: '**Vite** is a modern framework that aims to solve performance problems associated
    with bloat. It is easy for a project in any other framework to require dozens
    or even hundreds of JavaScript module imports, which slows the performance of
    development and the application itself. Vite uses advanced bundling tools to streamline
    the frontend development process.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '**Vite**是一个旨在解决与冗余相关的性能问题的现代框架。在其他任何框架中，一个项目可能需要数十个甚至数百个JavaScript模块导入，这会减慢开发和应用程序本身的性能。Vite使用高级打包工具来简化前端开发过程。'
- en: '**Vue** is yet another frontend framework that provides a declarative component-based
    programming model. While React relies heavily on JSX, Vue uses standard HTML,
    CSS, and JavaScript and can be configured to include elements such as routing,
    server-side rendering, and more.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '**Vue**是另一个提供声明式组件化编程模型的Frontend框架。虽然React严重依赖于JSX，但Vue使用标准的HTML、CSS和JavaScript，并且可以配置以包含路由、服务器端渲染等功能。'
- en: Summary
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered using PyCharm as a frontend development tool for web pages
    and applications. We discovered PyCharm has a very rich set of capabilities in
    this area because the JetBrains Web Storm product is integrated directly into
    PyCharm Professional as a pre-installed plugin.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了将PyCharm作为网页和应用程序的前端开发工具的使用。我们发现PyCharm在这个领域具有非常丰富的功能，因为JetBrains Web Storm产品直接集成到PyCharm
    Professional中作为预安装的插件。
- en: This provides all the functionality of a robust, dedicated tool specializing
    in the development of HTML, JavaScript, and CSS. All the same debugging capabilities
    available to us in Python are also afforded in JavaScript code, whether it be
    client or server side. While we didn’t spend any time talking about server-side
    JavaScript, the capability to work with NodeJS projects is there.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了所有功能强大的、专门用于开发HTML、JavaScript和CSS的工具体验。所有在Python中可用的调试能力在JavaScript代码中同样适用，无论是客户端还是服务器端。虽然我们没有花时间讨论服务器端JavaScript，但与NodeJS项目一起工作的能力是存在的。
- en: PyCharm Professional gives us a great many project templates in both traditional
    DOM-based development strategies, such as HTML 5 Boilerplate and Bootstrap, and
    modern state machine-based systems such as Angular and React.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm Professional为我们提供了大量的项目模板，包括传统的基于DOM的开发策略，如HTML 5 Boilerplate和Bootstrap，以及基于现代状态机系统的Angular和React。
- en: We learned how to leverage PyCharm’s deployment tools to upload sites and applications
    to remote servers. We also learned how to configure external tools such as image
    editors so that they’re launched directly from PyCharm.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何利用PyCharm的部署工具将网站和应用程序上传到远程服务器。我们还学习了如何配置外部工具，如图像编辑器，以便它们可以直接从PyCharm启动。
- en: Having covered the frontend tooling, in the next chapter, we will discover how
    to develop a full stack web application using the Flask framework.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了前端工具之后，在下一章中，我们将探讨如何使用Flask框架开发全栈Web应用程序。
- en: Be sure to check out the companion website for the book at [https://www.pycharm-book.com](https://www.pycharm-book.com).
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必查看本书的配套网站[https://www.pycharm-book.com](https://www.pycharm-book.com)。
- en: Questions
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题以测试你对本章知识的掌握：
- en: What is the purpose of HTML code? How is an HTML file structured?
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTML代码的目的是什么？HTML文件是如何结构的？
- en: What is the purpose of CSS code? How is a CSS file structured?
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSS代码的目的是什么？CSS文件是如何结构的？
- en: What is the purpose of JavaScript code? In general, what makes it one of the
    most popular web programming languages?
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaScript代码的目的是什么？一般来说，是什么让它成为最受欢迎的Web编程语言之一？
- en: How can you include a CSS style sheet or a JavaScript script in an HTML file
    in PyCharm?
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PyCharm中，如何将CSS样式表或JavaScript脚本包含在HTML文件中？
- en: What is Emmet? How is it supported by PyCharm?
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Emmet是什么？PyCharm是如何支持它的？
- en: What options are available when it comes to debugging JavaScript in PyCharm?
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PyCharm中调试JavaScript有哪些可用的选项？
- en: What is the most secure way to deploy a web application from PyCharm?
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从PyCharm部署Web应用程序最安全的方法是什么？
