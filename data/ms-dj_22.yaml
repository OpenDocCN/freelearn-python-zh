- en: Appendix A. Model Definition Reference
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A.模型定义参考
- en: '[Chapter 4](ch04.xhtml "Chapter 4. Models"), *Models*, explains the basics
    of defining models, and we use them throughout the rest of the book. There is,
    however, a huge range of model options available not covered elsewhere. This appendix
    explains each possible model definition option.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[第4章](ch04.xhtml "第4章。模型")中的*模型*解释了定义模型的基础知识，并且我们在本书的其余部分中使用它们。然而，还有大量的模型选项可用，其他地方没有涵盖。本附录解释了每个可能的模型定义选项。'
- en: Fields
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字段
- en: The most important part of a model-and the only required part of a model-is
    the list of database fields it defines.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 模型最重要的部分-也是模型的唯一必需部分-是它定义的数据库字段列表。
- en: Field name restrictions
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字段名称限制
- en: 'Django places only two restrictions on model field names:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Django对模型字段名称只有两个限制：
- en: 'A field name cannot be a Python reserved word, because that would result in
    a Python syntax error. For example:'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字段名称不能是Python保留字，因为那将导致Python语法错误。例如：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A field name cannot contain more than one underscore in a row, due to the way
    Django''s query lookup syntax works. For example:'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于Django的查询查找语法的工作方式，字段名称不能连续包含多个下划线。例如：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Each field in your model should be an instance of the appropriate `Field` class.
    Django uses the field class types to determine a few things:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您模型中的每个字段都应该是适当`Field`类的实例。Django使用字段类类型来确定一些事情：
- en: The database column type (for example, `INTEGER`, `VARCHAR`)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库列类型（例如，`INTEGER`，`VARCHAR`）
- en: The widget to use in Django's forms and admin site, if you care to use it (for
    example, `<input type="text">`, `<select>`)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Django的表单和管理站点中使用的小部件，如果您愿意使用它（例如，`<input type="text">`，`<select>`）
- en: The minimal validation requirements, which are used in Django's admin interface
    and by forms
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小的验证要求，这些要求在Django的管理界面和表单中使用
- en: 'Each field class can be passed a list of option arguments, for example when
    we were building the book model in [Chapter 4](ch04.xhtml "Chapter 4. Models"),
    *Models*, our `num_pages` field looked like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每个字段类都可以传递一系列选项参数，例如当我们在[第4章](ch04.xhtml "第4章。模型")中构建书籍模型时，我们的`num_pages`字段如下所示：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this case, we are setting the `blank` and `null` options for the field class.
    *Table A.2* lists all the field options in Django.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们为字段类设置了`blank`和`null`选项。*表A.2*列出了Django中的所有字段选项。
- en: 'A number of fields also define additional options specific to that class, for
    example the `CharField` class has a required option `max_length` which defaults
    to `None`. For example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 许多字段还定义了特定于该类的其他选项，例如`CharField`类具有一个必需选项`max_length`，默认为`None`。例如：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this case we are setting the `max_length` field option to 100 to limit our
    book titles to 100 characters.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将`max_length`字段选项设置为100，以将我们的书名限制为100个字符。
- en: A complete list of field classes is in *Table A.1*, sorted alphabetically.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 字段类的完整列表按字母顺序排列在*表A.1*中。
- en: '| **Field** | **Default Widget** | **Description** |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **默认小部件** | **描述** |'
- en: '| --- | --- | --- |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `AutoField` | N/A | An `IntegerField` that automatically increments according
    to available IDs. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `AutoField` | N/A | 根据可用ID自动递增的`IntegerField`。|'
- en: '| `BigIntegerField` | `NumberInput` | A 64-bit integer, much like an `IntegerField`
    except that it is guaranteed to fit numbers from `-9223372036854775808` to `9223372036854775807`
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `BigIntegerField` | `NumberInput` | 64位整数，类似于`IntegerField`，只是它保证适合从`-9223372036854775808`到`9223372036854775807`的数字|'
- en: '| `BinaryField` | N/A | A field to store raw binary data. It only supports
    `bytes` assignment. Be aware that this field has limited functionality. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `BinaryField` | N/A | 用于存储原始二进制数据的字段。它只支持`bytes`赋值。请注意，此字段功能有限。|'
- en: '| `BooleanField` | `CheckboxInput` | A true/false field. If you need to accept
    `null` values then use `NullBooleanField` instead. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `BooleanField` | `CheckboxInput` | 真/假字段。如果需要接受`null`值，则使用`NullBooleanField`。|'
- en: '| `CharField` | `TextInput` | A string field, for small- to large-sized strings.
    For large amounts of text, use `TextField`.`CharField` has one extra required
    argument: `max_length`. The maximum length (in characters) of the field. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `CharField` | `TextInput` | 用于小到大的字符串的字符串字段。对于大量的文本，请使用`TextField`。`CharField`有一个额外的必需参数：`max_length`。字段的最大长度（以字符为单位）。|'
- en: '| `DateField` | `DateInput` | A date, represented in Python by a `datetime.date`
    instance. Has two extra, optional arguments: `auto_now` which automatically set
    the field to now every time the object is saved, and `auto_now_add` which automatically
    set the field to now when the object is first created. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `DateField` | `DateInput` | 日期，在Python中由`datetime.date`实例表示。有两个额外的可选参数：`auto_now`，每次保存对象时自动将字段设置为现在，`auto_now_add`，在对象首次创建时自动将字段设置为现在。|'
- en: '| `DateTimeField` | `DateTimeInput` | A date and time, represented in Python
    by a `datetime.datetime` instance. Takes the same extra arguments as `DateField`.
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `DateTimeField` | `DateTimeInput` | 日期和时间，在Python中由`datetime.datetime`实例表示。接受与`DateField`相同的额外参数。|'
- en: '| `DecimalField` | `TextInput` | A fixed-precision decimal number, represented
    in Python by a `Decimal` instance. Has two required arguments: `max_digits` and
    `decimal_places`. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `DecimalField` | `TextInput` | 固定精度的十进制数，在Python中由`Decimal`实例表示。有两个必需的参数：`max_digits`和`decimal_places`。|'
- en: '| `DurationField` | `TextInput` | A field for storing periods of time-modeled
    in Python by `timedelta`. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `DurationField` | `TextInput` | 用于存储时间段的字段-在Python中由`timedelta`建模。|'
- en: '| `EmailField` | `TextInput` | A `CharField` that uses `EmailValidator` to
    validate the input. `max_length` defaults to `254`. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `EmailField` | `TextInput` | 使用`EmailValidator`验证输入的`CharField`。`max_length`默认为`254`。|'
- en: '| `FileField` | `ClearableFileInput` | A file upload field. For more information
    on `FileField`, see the next section. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `FileField` | `ClearableFileInput` | 文件上传字段。有关`FileField`的更多信息，请参见下一节。|'
- en: '| `FilePathField` | `Select` | A `CharField` whose choices are limited to the
    filenames in a certain directory on the filesystem. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `FilePathField` | `Select` | `CharField`，其选择限于文件系统上某个目录中的文件名。|'
- en: '| `FloatField` | `NumberInput` | A floating-point number represented in Python
    by a `float` instance. Note when `field.localize` is `False`, the default widget
    is `TextInput` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `FloatField` | `NumberInput` | 由Python中的`float`实例表示的浮点数。注意，当`field.localize`为`False`时，默认小部件是`TextInput`
    |'
- en: '| `ImageField` | `ClearableFileInput` | Inherits all attributes and methods
    from `FileField`, but also validates that the uploaded object is a valid image.
    Additional `height` and `width` attributes. Requires the Pillow library available
    at http://pillow.readthedocs.org/en/latest/. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `ImageField` | `ClearableFileInput` | 继承自`FileField`的所有属性和方法，但也验证上传的对象是否是有效的图像。额外的`height`和`width`属性。需要在http://pillow.readthedocs.org/en/latest/上可用的Pillow库。'
- en: '| `IntegerField` | `NumberInput` | An integer. Values from `-2147483648` to
    `2147483647` are safe in all databases supported by Django. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `IntegerField` | `NumberInput` | 一个整数。在Django支持的所有数据库中，从`-2147483648`到`2147483647`的值都是安全的。
    |'
- en: '| `GenericIPAddressField` | `TextInput` | An IPv4 or IPv6 address, in string
    format (for example, `192.0.2.30` or `2a02:42fe::4`). |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `GenericIPAddressField` | `TextInput` | 一个IPv4或IPv6地址，以字符串格式表示（例如，`192.0.2.30`或`2a02:42fe::4`）。
    |'
- en: '| `NullBooleanField` | `NullBooleanSelect` | Like a `BooleanField`, but allows
    `NULL` as one of the options. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `NullBooleanField` | `NullBooleanSelect` | 像`BooleanField`，但允许`NULL`作为其中一个选项。
    |'
- en: '| `PositiveIntegerField` | `NumberInput` | An integer . Values from `0` to
    `2147483647` are safe in all databases supported by Django. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `PositiveIntegerField` | `NumberInput` | 一个整数。在Django支持的所有数据库中，从`0`到`2147483647`的值都是安全的。
    |'
- en: '| `SlugField` | `TextInput` | Slug is a newspaper term. A slug is a short label
    for something, containing only letters, numbers, underscores or hyphens. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `SlugField` | `TextInput` | Slug是一个报纸术语。Slug是某物的一个简短标签，只包含字母、数字、下划线或连字符。
    |'
- en: '| `SmallIntegerField` | `NumberInput` | Like an `IntegerField`, but only allows
    values under a certain point. Values from `-32768` to `32767` are safe in all
    databases supported by Django. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `SmallIntegerField` | `NumberInput` | 像`IntegerField`，但只允许在某个点以下的值。在Django支持的所有数据库中，从`-32768`到`32767`的值都是安全的。
    |'
- en: '| `TextField` | `Textarea` | A large text field. If you specify a `max_length`
    attribute, it will be reflected in the `Textarea` widget of the auto-generated
    form field. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `TextField` | `Textarea` | 一个大文本字段。如果指定了`max_length`属性，它将反映在自动生成的表单字段的`Textarea`小部件中。
    |'
- en: '| `TimeField` | `TextInput` | A time, represented in Python by a `datetime.time`
    instance. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `TimeField` | `TextInput` | 一个时间，由Python中的`datetime.time`实例表示。 |'
- en: '| `URLField` | `URLInput` | A `CharField` for a URL. Optional `max_length`
    argument. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `URLField` | `URLInput` | 用于URL的`CharField`。可选的`max_length`参数。 |'
- en: '| `UUIDField` | `TextInput` | A field for storing universally unique identifiers.
    Uses Python''s `UUID` class. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `UUIDField` | `TextInput` | 用于存储通用唯一标识符的字段。使用Python的`UUID`类。 |'
- en: 'Table A.1: Django model field reference'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 表A.1：Django模型字段参考
- en: FileField notes
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FileField注意事项
- en: The `primary_key` and `unique` arguments are not supported, and will raise a
    `TypeError` if used.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 不支持`primary_key`和`unique`参数，如果使用将会引发`TypeError`。
- en: 'Has two optional arguments: FileField.upload_to'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有两个可选参数：FileField.upload_to
- en: '`FileField.storage`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileField.storage`'
- en: FileField FileField.upload_to
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FileField FileField.upload_to
- en: A local filesystem path that will be appended to your `MEDIA_ROOT` setting to
    determine the value of the `url` attribute. This path may contain `strftime()`
    formatting, which will be replaced by the date/time of the file upload (so that
    uploaded files don't fill up the given directory). This may also be a callable,
    such as a function, which will be called to obtain the upload path, including
    the filename. This callable must be able to accept two arguments, and return a
    Unix-style path (with forward slashes) to be passed along to the storage system.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个本地文件系统路径，将被附加到您的`MEDIA_ROOT`设置，以确定`url`属性的值。这个路径可能包含`strftime()`格式，它将被文件上传的日期/时间替换（这样上传的文件不会填满给定的目录）。这也可以是一个可调用的，比如一个函数，它将被调用来获取上传路径，包括文件名。这个可调用必须能够接受两个参数，并返回一个Unix风格的路径（带有正斜杠），以便传递给存储系统。
- en: 'The two arguments that will be passed are:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 将传递的两个参数是：
- en: '**Instance: **An instance of the model where the FileField is defined. More
    specifically, this is the particular instance where the current file is being
    attached. In most cases, this object will not have been saved to the database
    yet, so if it uses the default `AutoField`, it might not yet have a value for
    its primary key field.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例：**模型的一个实例，其中定义了FileField。更具体地说，这是当前文件被附加的特定实例。在大多数情况下，这个对象还没有保存到数据库中，所以如果它使用默认的`AutoField`，它可能还没有主键字段的值。'
- en: '**Filename: **The filename that was originally given to the file. This may
    or may not be taken into account when determining the final destination path.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件名：**最初给定的文件名。在确定最终目标路径时可能会考虑这个文件名。'
- en: FileField.storage
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FileField.storage
- en: 'A storage object, which handles the storage and retrieval of your files. The
    default form widget for this field is a `ClearableFileInput`. Using a `FileField`
    or an `ImageField` (see below) in a model takes a few steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一个存储对象，用于处理文件的存储和检索。这个字段的默认表单小部件是`ClearableFileInput`。在模型中使用`FileField`或`ImageField`（见下文）需要几个步骤：
- en: In your settings file, you'll need to define `MEDIA_ROOT` as the full path to
    a directory where you'd like Django to store uploaded files. (For performance,
    these files are not stored in the database.) Define `MEDIA_URL` as the base public
    URL of that directory. Make sure that this directory is writable by the web server's
    user account.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的设置文件中，您需要将`MEDIA_ROOT`定义为一个目录的完整路径，您希望Django存储上传的文件在其中。（出于性能考虑，这些文件不存储在数据库中。）将`MEDIA_URL`定义为该目录的基本公共URL。确保这个目录对Web服务器的用户帐户是可写的。
- en: Add the `FileField` or `ImageField` to your model, defining the `upload_to`
    option to specify a subdirectory of `MEDIA_ROOT` to use for uploaded files.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`FileField`或`ImageField`添加到您的模型中，定义`upload_to`选项以指定`MEDIA_ROOT`的子目录，用于上传文件。
- en: All that will be stored in your database is a path to the file (relative to
    `MEDIA_ROOT`). You'll most likely want to use the convenient `url` attribute provided
    by Django. For example, if your `ImageField` is called `mug_shot`, you can get
    the absolute path to your image in a template with `{{ object.mug_shot.url }}`.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据库中存储的只是文件的路径（相对于 `MEDIA_ROOT`）。您很可能会想要使用Django提供的便捷的 `url` 属性。例如，如果您的 `ImageField`
    名为 `mug_shot`，您可以在模板中使用 `{{ object.mug_shot.url }}` 获取图像的绝对路径。
- en: Note that whenever you deal with uploaded files, you should pay close attention
    to where you're uploading them and what type of files they are, to avoid security
    holes. Validate all uploaded files so that you're sure the files are what you
    think they are. For example, if you blindly let somebody upload files, without
    validation, to a directory that's within your web server's document root, then
    somebody could upload a CGI or PHP script and execute that script by visiting
    its URL on your site. Don't allow that.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每当处理上传的文件时，都应该密切关注您上传文件的位置和文件类型，以避免安全漏洞。验证所有上传的文件，以确保文件是您认为的文件。例如，如果您盲目地让某人上传文件，而没有进行验证，到您的Web服务器文档根目录中，那么某人可能会上传一个CGI或PHP脚本，并通过访问其URL在您的网站上执行该脚本。不要允许这种情况发生。
- en: Also note that even an uploaded HTML file, since it can be executed by the browser
    (though not by the server), can pose security threats that are equivalent to XSS
    or CSRF attacks. `FileField` instances are created in your database as `varchar`
    columns with a default max length of 100 characters. As with other fields, you
    can change the maximum length using the `max_length` argument.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，即使是上传的HTML文件，由于浏览器可以执行它（尽管服务器不能），可能会带来等同于XSS或CSRF攻击的安全威胁。`FileField` 实例在数据库中以
    `varchar` 列的形式创建，具有默认的最大长度为100个字符。与其他字段一样，您可以使用 `max_length` 参数更改最大长度。
- en: FileField and FieldFile
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FileField 和 FieldFile
- en: 'When you access a `FileField` on a model, you are given an instance of `FieldFile`
    as a proxy for accessing the underlying file. In addition to the functionality
    inherited from `django.core.files.File`, this class has several attributes and
    methods that can be used to interact with file data:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在模型上访问 `FileField` 时，会得到一个 `FieldFile` 的实例，作为访问底层文件的代理。除了从 `django.core.files.File`
    继承的功能外，此类还具有几个属性和方法，可用于与文件数据交互：
- en: FieldFile.url
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: FieldFile.url
- en: A read-only property to access the file's relative URL by calling the `url()`
    method of the underlying `Storage` class.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用底层 `Storage` 类的 `url()` 方法来访问文件的相对URL的只读属性。
- en: FieldFile.open(mode='rb')
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: FieldFile.open(mode='rb')
- en: Behaves like the standard Python `open()` method and opens the file associated
    with this instance in the mode specified by `mode`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 行为类似于标准的Python `open()` 方法，并以 `mode` 指定的模式打开与此实例关联的文件。
- en: FieldFile.close()
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: FieldFile.close()
- en: Behaves like the standard Python `file.close()` method and closes the file associated
    with this instance.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 行为类似于标准的Python `file.close()` 方法，并关闭与此实例关联的文件。
- en: FieldFile.save(name, content, save=True)
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: FieldFile.save(name, content, save=True)
- en: This method takes a filename and file contents and passes them to the storage
    class for the field, then associates the stored file with the model field. If
    you want to manually associate file data with `FileField` instances on your model,
    the `save()` method is used to persist that file data.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受文件名和文件内容，并将它们传递给字段的存储类，然后将存储的文件与模型字段关联起来。如果您想手动将文件数据与模型上的 `FileField` 实例关联起来，可以使用
    `save()` 方法来持久化该文件数据。
- en: 'Takes two required arguments: `name` which is the name of the file, and `content`
    which is an object containing the file''s contents. The optional `save` argument
    controls whether or not the model instance is saved after the file associated
    with this field has been altered. Defaults to `True`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 需要两个必需参数：`name` 是文件的名称，`content` 是包含文件内容的对象。可选的 `save` 参数控制在更改与此字段关联的文件后是否保存模型实例。默认为
    `True`。
- en: 'Note that the `content` argument should be an instance of `django.core.files.File`,
    not Python''s built-in file object. You can construct a `File` from an existing
    Python file object like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`content` 参数应该是 `django.core.files.File` 的实例，而不是Python的内置文件对象。您可以像这样从现有的Python文件对象构造一个
    `File`：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Or you can construct one from a Python string like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以像这样从Python字符串构造一个：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: FieldFile.delete(save=True)
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: FieldFile.delete(save=True)
- en: Deletes the file associated with this instance and clears all attributes on
    the field. This method will close the file if it happens to be open when `delete()`
    is called.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 删除与此实例关联的文件并清除字段上的所有属性。如果在调用 `delete()` 时文件处于打开状态，此方法将关闭文件。
- en: The optional `save` argument controls whether or not the model instance is saved
    after the file associated with this field has been deleted. Defaults to `True`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的 `save` 参数控制在删除与此字段关联的文件后是否保存模型实例。默认为 `True`。
- en: Note that when a model is deleted, related files are not deleted. If you need
    to clean up orphaned files, you'll need to handle it yourself (for instance, with
    a custom management command that can be run manually or scheduled to run periodically
    via for example, `cron`).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当模型被删除时，相关文件不会被删除。如果您需要清理孤立的文件，您需要自行处理（例如，使用自定义的管理命令，可以手动运行或通过例如 `cron`
    定期运行）。
- en: Universal field options
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用字段选项
- en: '*Table A.2* lists all the optional field arguments in Django. They are available
    to all field types.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*表A.2* 列出了Django中所有字段类型的所有可选字段参数。'
- en: '| **Option** | **Description** |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: 选项 | 描述
- en: '| --- | --- |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `null` | If `True`, Django will store empty values as `NULL` in the database.
    Default is `False`. Avoid using `null` on string-based fields such as `CharField`
    and `TextField` because empty string values will always be stored as empty strings,
    not as `NULL`. For both string-based and non-string-based fields, you will also
    need to set `blank=True` if you wish to permit empty values in forms. If you want
    to accept `null` values with `BooleanField`, use `NullBooleanField` instead. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '`null` | 如果为 `True`，Django 将在数据库中将空值存储为 `NULL`。默认为 `False`。避免在诸如 `CharField`
    和 `TextField` 等基于字符串的字段上使用 `null`，因为空字符串值将始终被存储为空字符串，而不是 `NULL`。对于基于字符串和非基于字符串的字段，如果希望在表单中允许空值，还需要设置
    `blank=True`。如果要接受带有 `BooleanField` 的 `null` 值，请改用 `NullBooleanField`。'
- en: '| `blank` | If `True`, the field is allowed to be blank. Default is `False`.
    Note that this is different than `null`. `null` is purely database-related, whereas
    `blank` is validation-related. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '`blank` | 如果为 `True`，则允许该字段为空。默认为 `False`。请注意，这与 `null` 是不同的。`null` 纯粹是与数据库相关的，而
    `blank` 是与验证相关的。'
- en: '| `choices` | An iterable (for example, a list or tuple) consisting itself
    of iterables of exactly two items (for example, `[(A, B), (A, B) ...]`) to use
    as choices for this field. If this is given, the default form widget will be a
    select box with these choices instead of the standard text field. The first element
    in each tuple is the actual value to be set on the model, and the second element
    is the human-readable name. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '`choices` | 一个可迭代对象（例如列表或元组），其中包含正好两个项的可迭代对象（例如 `[(A, B), (A, B) ...]`），用作此字段的选择。如果给出了这个选项，默认的表单小部件将是一个带有这些选择的选择框，而不是标准文本字段。每个元组中的第一个元素是要在模型上设置的实际值，第二个元素是人类可读的名称。'
- en: '| `db_column` | The name of the database column to use for this field. If this
    isn''t given, Django will use the field''s name. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '`db_column` | 用于此字段的数据库列的名称。如果没有给出，Django 将使用字段的名称。'
- en: '| `db_index` | If `True`, a database index will be created for this field.
    |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '`db_index` | 如果为 `True`，将为此字段创建数据库索引。'
- en: '| `db_tablespace` | The name of the database tablespace to use for this field''s
    index, if this field is indexed. The default is the project''s `DEFAULT_INDEX_TABLESPACE`
    setting, if set, or the `db_tablespace` of the model, if any. If the backend doesn''t
    support tablespaces for indexes, this option is ignored. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '`db_tablespace` | 用于此字段索引的数据库表空间的名称，如果此字段已被索引。默认值是项目的 `DEFAULT_INDEX_TABLESPACE`
    设置（如果设置了），或者模型的 `db_tablespace`（如果有）。如果后端不支持索引的表空间，则将忽略此选项。'
- en: '| `default` | The default value for the field. This can be a value or a callable
    object. If callable it will be called every time a new object is created. The
    default cannot be a mutable object (model instance, list, set, and others.), as
    a reference to the same instance of that object would be used as the default value
    in all new model instances. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '`default` | 该字段的默认值。这可以是一个值或一个可调用对象。如果是可调用的，它将在创建新对象时每次被调用。默认值不能是可变对象（模型实例、列表、集合等），因为在所有新模型实例中将使用对该对象的相同实例的引用作为默认值。'
- en: '| `editable` | If `False`, the field will not be displayed in the admin or
    any other `ModelForm`. They are also skipped during model validation. Default
    is `True`. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '`editable` | 如果为 `False`，该字段将不会显示在管理界面或任何其他 `ModelForm` 中。它们也会在模型验证期间被跳过。默认为
    `True`。'
- en: '| `error_messages` | The `error_messages` argument lets you override the default
    messages that the field will raise. Pass in a dictionary with keys matching the
    error messages you want to override. Error message keys include `null`, `blank`,
    `invalid`, `invalid_choice`, `unique`, and `unique_for_date`. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '`error_messages` | `error_messages` 参数允许您覆盖字段将引发的默认消息。传入一个字典，其中键与您想要覆盖的错误消息相匹配。错误消息键包括
    `null`、`blank`、`invalid`、`invalid_choice`、`unique` 和 `unique_for_date`。'
- en: '| `help_text` | Extra help text to be displayed with the form widget. It''s
    useful for documentation even if your field isn''t used on a form. Note that this
    value is *not* HTML-escaped in automatically-generated forms. This lets you include
    HTML in `help_text` if you so desire. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '`help_text` | 要与表单小部件一起显示的额外帮助文本。即使您的字段在表单上没有使用，这也是有用的文档。请注意，此值在自动生成的表单中 *不*
    是 HTML 转义的。这样，如果您愿意，可以在 `help_text` 中包含 HTML。'
- en: '| `primary_key` | If `True`, this field is the primary key for the model. If
    you don''t specify `primary_key=True` for any field in your model, Django will
    automatically add an `AutoField` to hold the primary key, so you don''t need to
    set `primary_key=True` on any of your fields unless you want to override the default
    primary-key behavior. The primary key field is read-only. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '`primary_key` | 如果为 `True`，则该字段是模型的主键。如果您没有为模型中的任何字段指定 `primary_key=True`，Django
    将自动添加一个 `AutoField` 来保存主键，因此您不需要在任何字段上设置 `primary_key=True`，除非您想要覆盖默认的主键行为。主键字段是只读的。'
- en: '| `unique` | If `True`, this field must be unique throughout the table. This
    is enforced at the database level and by model validation. This option is valid
    on all field types except `ManyToManyField`, `OneToOneField`, and `FileField`.
    |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '`unique` | 如果为 `True`，则此字段必须在整个表中是唯一的。这是在数据库级别和模型验证期间强制执行的。此选项对除 `ManyToManyField`、`OneToOneField`
    和 `FileField` 之外的所有字段类型都有效。'
- en: '| `unique_for_date` | Set this to the name of a `DateField` or `DateTimeField`
    to require that this field be unique for the value of the date field. For example,
    if you have a field `title` that has `unique_for_date="pub_date"`, then Django
    wouldn''t allow the entry of two records with the same `title` and `pub_date`.
    This is enforced by `Model.validate_unique()` during model validation but not
    at the database level. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '`unique_for_date` | 将其设置为 `DateField` 或 `DateTimeField` 的名称，以要求此字段对于日期字段的值是唯一的。例如，如果有一个字段
    `title`，其 `unique_for_date="pub_date"`，那么 Django 将不允许输入具有相同 `title` 和 `pub_date`
    的两条记录。这是在模型验证期间由 `Model.validate_unique()` 强制执行的，但不是在数据库级别上。'
- en: '| `unique_for_month` | Like `unique_for_date`, but requires the field to be
    unique with respect to the month. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '`unique_for_month` | 类似于 `unique_for_date`，但要求该字段相对于月份是唯一的。'
- en: '| `unique_for_year` | Like `unique_for_date`, but requires the field to be
    unique with respect to the year. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '`unique_for_year` | 类似于 `unique_for_date`，但要求该字段相对于年份是唯一的。'
- en: '| `verbose_name` | A human-readable name for the field. If the verbose name
    isn''t given, Django will automatically create it using the field''s attribute
    name, converting underscores to spaces. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `verbose_name` | 字段的可读名称。如果未给出详细名称，Django将使用字段的属性名称自动创建它，将下划线转换为空格。'
- en: '| `validators` | A list of validators to run for this field. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `validators` | 一个要为此字段运行的验证器列表。'
- en: 'Table A.2: Django universal field options'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 表A.2：Django通用字段选项
- en: Field attribute reference
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字段属性引用
- en: Every `Field` instance contains several attributes that allow introspecting
    its behavior. Use these attributes instead of `isinstance` checks when you need
    to write code that depends on a field's functionality. These attributes can be
    used together with the `Model._meta` API to narrow down a search for specific
    field types. Custom model fields should implement these flags.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`Field`实例都包含几个属性，允许内省其行为。在需要编写依赖于字段功能的代码时，请使用这些属性，而不是`isinstance`检查。这些属性可以与`Model._meta`
    API一起使用，以缩小对特定字段类型的搜索。自定义模型字段应实现这些标志。
- en: Attributes for fields
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字段属性
- en: Field.auto_created
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Field.auto_created
- en: Boolean flag that indicates if the field was automatically created, such as
    the `OneToOneField` used by model inheritance.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔标志，指示字段是否自动创建，例如模型继承中使用的`OneToOneField`。
- en: Field.concrete
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Field.concrete
- en: Boolean flag that indicates if the field has a database column associated with
    it.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔标志，指示字段是否与数据库列关联。
- en: Field.hidden
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Field.hidden
- en: Boolean flag that indicates if a field is used to back another non-hidden field's
    functionality (for example, the `content_type` and `object_id` fields that make
    up a `GenericForeignKey`). The `hidden` flag is used to distinguish what constitutes
    the public subset of fields on the model from all the fields on the model.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔标志，指示字段是否用于支持另一个非隐藏字段的功能（例如，构成`GenericForeignKey`的`content_type`和`object_id`字段）。`hidden`标志用于区分模型上的字段的公共子集与模型上的所有字段。
- en: Field.is_relation
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Field.is_relation
- en: Boolean flag that indicates if a field contains references to one or more other
    models for its functionality (for example, `ForeignKey`, `ManyToManyField`, `OneToOneField`,
    and others).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔标志，指示字段是否包含对一个或多个其他模型的引用，以实现其功能（例如，`ForeignKey`，`ManyToManyField`，`OneToOneField`等）。
- en: Field.model
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Field.model
- en: Returns the model on which the field is defined. If a field is defined on a
    superclass of a model, `model` will refer to the superclass, not the class of
    the instance.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 返回定义字段的模型。如果字段在模型的超类上定义，则`model`将引用超类，而不是实例的类。
- en: Attributes for fields with relations
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具有关系的字段属性
- en: These attributes are used to query for the cardinality and other details of
    a relation. These attribute are present on all fields; however, they will only
    have meaningful values if the field is a relation type (`Field.is_relation=True`).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性用于查询关系的基数和其他细节。这些属性存在于所有字段上；但是，只有在字段是关系类型（`Field.is_relation=True`）时，它们才会有有意义的值。
- en: Field.many_to_many
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Field.many_to_many
- en: Boolean flag that is `True` if the field has a many-to-many relation; `False`
    otherwise. The only field included with Django where this is `True` is `ManyToManyField`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔标志，如果字段具有多对多关系，则为`True`；否则为`False`。Django中唯一包含此标志为`True`的字段是`ManyToManyField`。
- en: Field.many_to_one
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Field.many_to_one
- en: Boolean flag that is `True` if the field has a many-to-one relation, such as
    a `ForeignKey`; `False` otherwise.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔标志，如果字段具有多对一关系（例如`ForeignKey`），则为`True`；否则为`False`。
- en: Field.one_to_many
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Field.one_to_many
- en: Boolean flag that is `True` if the field has a one-to-many relation, such as
    a `GenericRelation` or the reverse of a `ForeignKey`; `False` otherwise.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔标志，如果字段具有一对多关系（例如`GenericRelation`或`ForeignKey`的反向关系），则为`True`；否则为`False`。
- en: Field.one_to_one
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Field.one_to_one
- en: Boolean flag that is `True` if the field has a one-to-one relation, such as
    a `OneToOneField`; `False` otherwise.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔标志，如果字段具有一对一关系（例如`OneToOneField`），则为`True`；否则为`False`。
- en: Field.related_model
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Field.related_model
- en: Points to the model the field relates to. For example, `Author` in `ForeignKey(Author)`.
    If a field has a generic relation (such as a `GenericForeignKey` or a `GenericRelation`)
    then `related_model` will be `None`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 指向字段相关的模型。例如，在`ForeignKey(Author)`中的`Author`。如果字段具有通用关系（例如`GenericForeignKey`或`GenericRelation`），则`related_model`将为`None`。
- en: Relationships
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关系
- en: Django also defines a set of fields that represent relations.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Django还定义了一组表示关系的字段。
- en: ForeignKey
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ForeignKey
- en: 'A many-to-one relationship. Requires a positional argument: the class to which
    the model is related. To create a recursive relationship-an object that has a
    many-to-one relationship with itself-use `models.ForeignKey(''self'')`.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 多对一关系。需要一个位置参数：模型相关的类。要创建递归关系（与自身具有多对一关系的对象），请使用`models.ForeignKey('self')`。
- en: 'If you need to create a relationship on a model that has not yet been defined,
    you can use the name of the model, rather than the model object itself:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要在尚未定义的模型上创建关系，可以使用模型的名称，而不是模型对象本身：
- en: '[PRE6]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To refer to models defined in another application, you can explicitly specify
    a model with the full application label. For example, if the `Manufacturer` model
    above is defined in another application called `production`, you''d need to use:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要引用另一个应用程序中定义的模型，可以明确指定具有完整应用程序标签的模型。例如，如果上面的`Manufacturer`模型在另一个名为`production`的应用程序中定义，则需要使用：
- en: '[PRE7]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This sort of reference can be useful when resolving circular import dependencies
    between two applications. A database index is automatically created on the `ForeignKey`.
    You can disable this by setting `db_index` to `False`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个应用程序之间解析循环导入依赖关系时，这种引用可能很有用。在`ForeignKey`上自动创建数据库索引。您可以通过将`db_index`设置为`False`来禁用此功能。
- en: You may want to avoid the overhead of an index if you are creating a foreign
    key for consistency rather than joins, or if you will be creating an alternative
    index like a partial or multiple column index.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您创建外键以确保一致性而不是连接，或者如果您将创建替代索引（如部分索引或多列索引），则可能希望避免索引的开销。
- en: Database representation
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库表示
- en: Behind the scenes, Django appends `"_id"` to the field name to create its database
    column name. In the above example, the database table for the `Car` model will
    have a `manufacturer_id` column.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，Django将`字段名`附加`"_id"`以创建其数据库列名。在上面的示例中，`Car`模型的数据库表将具有`manufacturer_id`列。
- en: You can change this explicitly by specifying `db_column`, however, your code
    should never have to deal with the database column name, unless you write custom
    SQL. You'll always deal with the field names of your model object.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过指定`db_column`来明确更改这一点，但是，除非编写自定义SQL，否则您的代码不应该处理数据库列名。您将始终处理模型对象的字段名称。
- en: Arguments
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: '`ForeignKey` accepts an extra set of arguments-all optional-that define the
    details of how the relation works.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`ForeignKey`接受一组额外的参数-全部是可选的-用于定义关系的详细信息。'
- en: limit_choices_to
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: limit_choices_to
- en: 'Sets a limit to the available choices for this field when this field is rendered
    using a `ModelForm` or the admin (by default, all objects in the queryset are
    available to choose). Either a dictionary, a `Q` object, or a callable returning
    a dictionary or `Q` object can be used. For example:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 设置此字段的可用选择的限制，当使用`ModelForm`或管理员渲染此字段时（默认情况下，查询集中的所有对象都可供选择）。可以使用字典、`Q`对象或返回字典或`Q`对象的可调用对象。例如：
- en: '[PRE8]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'causes the corresponding field on the `ModelForm` to list only `Users` that
    have `is_staff=True`. This may be helpful in the Django admin. The callable form
    can be helpful, for instance, when used in conjunction with the Python `datetime`
    module to limit selections by date range. For example:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 导致`ModelForm`上的相应字段仅列出`is_staff=True`的`Users`。这在Django管理员中可能会有所帮助。可调用形式可能会有所帮助，例如，当与Python
    `datetime`模块一起使用以限制日期范围的选择时。例如：
- en: '[PRE9]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If `limit_choices_to` is or returns a `Q object`, which is useful for complex
    queries, then it will only have an effect on the choices available in the admin
    when the field is not listed in `raw_id_fields` in the `ModelAdmin` for the model.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`limit_choices_to`是或返回`Q对象`，对于复杂查询很有用，那么它只会影响在模型的`ModelAdmin`中未列出`raw_id_fields`时管理员中可用的选择。
- en: related_name
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: related_name
- en: 'The name to use for the relation from the related object back to this one.
    It''s also the default value for `related_query_name` (the name to use for the
    reverse filter name from the target model). See the related objects documentation
    for a full explanation and example. Note that you must set this value when defining
    relations on abstract models; and when you do so some special syntax is available.
    If you''d prefer Django not to create a backwards relation, set `related_name`
    to `''+''` or end it with `''+''`. For example, this will ensure that the `User`
    model won''t have a backwards relation to this model:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 用于从相关对象返回到此对象的关系的名称。这也是`related_query_name`的默认值（从目标模型返回的反向过滤器名称）。有关完整说明和示例，请参阅相关对象文档。请注意，在定义抽象模型上的关系时，必须设置此值；在这样做时，一些特殊的语法是可用的。如果您希望Django不创建反向关系，请将`related_name`设置为`'+'`或以`'+'`结尾。例如，这将确保`User`模型不会有到此模型的反向关系：
- en: '[PRE10]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: related_query_name
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: related_query_name
- en: 'The name to use for the reverse filter name from the target model. Defaults
    to the value of `related_name` if it is set, otherwise it defaults to the name
    of the model:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 用于从目标模型返回的反向过滤器名称的名称。如果设置了`related_name`，则默认为`related_name`的值，否则默认为模型的名称：
- en: '[PRE11]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: to_field
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: to_field
- en: The field on the related object that the relation is to. By default, Django
    uses the primary key of the related object.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 关系对象上的字段。默认情况下，Django使用相关对象的主键。
- en: db_constraint
  id: totrans-159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: db_constraint
- en: 'Controls whether or not a constraint should be created in the database for
    this foreign key. The default is `True`, and that''s almost certainly what you
    want; setting this to `False` can be very bad for data integrity. That said, here
    are some scenarios where you might want to do this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 控制是否应为此外键在数据库中创建约束。默认值为`True`，这几乎肯定是您想要的；将其设置为`False`可能对数据完整性非常不利。也就是说，有一些情况下您可能希望这样做：
- en: You have legacy data that is not valid.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您有无效的旧数据。
- en: You're sharding your database.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您正在对数据库进行分片。
- en: If this is set to `False`, accessing a related object that doesn't exist will
    raise its `DoesNotExist` exception.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置为`False`，访问不存在的相关对象将引发其`DoesNotExist`异常。
- en: on_delete
  id: totrans-164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 删除时
- en: 'When an object referenced by a `ForeignKey` is deleted, Django by default emulates
    the behavior of the SQL constraint `ON DELETE CASCADE` and also deletes the object
    containing the `ForeignKey`. This behavior can be overridden by specifying the
    `on_delete` argument. For example, if you have a nullable `ForeignKey` and you
    want it to be set null when the referenced object is deleted:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当被`ForeignKey`引用的对象被删除时，Django默认会模拟SQL约束`ON DELETE CASCADE`的行为，并删除包含`ForeignKey`的对象。可以通过指定`on_delete`参数来覆盖此行为。例如，如果您有一个可空的`ForeignKey`，并且希望在删除引用对象时将其设置为null：
- en: '[PRE12]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The possible values for `on_delete` are found in `django.db.models`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`on_delete`的可能值可以在`django.db.models`中找到：'
- en: '`CASCADE`: Cascade deletes; the default'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CASCADE`：级联删除；默认值'
- en: '`PROTECT`: Prevent deletion of the referenced object by raising `ProtectedError`,
    a subclass of `django.db.IntegrityError`'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PROTECT`：通过引发`ProtectedError`（`django.db.IntegrityError`的子类）来防止删除引用对象'
- en: '`SET_NULL`: Set the `ForeignKey` null; this is only possible if `null` is `True`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SET_NULL`：将`ForeignKey`设置为null；只有在`null`为`True`时才可能'
- en: '`SET_DEFAULT`: Set the `ForeignKey` to its default value; a default for the
    `ForeignKey` must be set'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SET_DEFAULT`：将`ForeignKey`设置为其默认值；必须设置`ForeignKey`的默认值'
- en: swappable
  id: totrans-172
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 可交换
- en: Controls the migration framework's reaction if this `ForeignKey` is pointing
    at a swappable model. If it is `True`-the default-then if the `ForeignKey` is
    pointing at a model which matches the current value of `settings.AUTH_USER_MODEL`
    (or another swappable model setting) the relationship will be stored in the migration
    using a reference to the setting, not to the model directly.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 控制迁移框架对指向可交换模型的此`ForeignKey`的反应。如果为`True`-默认值-那么如果`ForeignKey`指向与当前`settings.AUTH_USER_MODEL`的值（或其他可交换模型设置）匹配的模型，则关系将在迁移中使用对设置的引用而不是直接对模型进行存储。
- en: You only want to override this to be `False` if you are sure your model should
    always point towards the swapped-in model-for example, if it is a profile model
    designed specifically for your custom user model. Setting it to `False` does not
    mean you can reference a swappable model even if it is swapped out-`False` just
    means that the migrations made with this `ForeignKey` will always reference the
    exact model you specify (so it will fail hard if the user tries to run with a
    User model you don't support, for example). If in doubt, leave it to its default
    of `True`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在确定模型应始终指向替换模型时才要将其覆盖为`False`，例如，如果它是专门为自定义用户模型设计的配置文件模型。将其设置为`False`并不意味着即使替换了模型，也可以引用可交换模型-`False`只是意味着使用此`ForeignKey`进行的迁移将始终引用您指定的确切模型（例如，如果用户尝试使用您不支持的用户模型，则会严重失败）。如果有疑问，请将其保留为默认值`True`。
- en: ManyToManyField
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ManyToManyField
- en: 'A many-to-many relationship. Requires a positional argument: the class to which
    the model is related, which works exactly the same as it does for `ForeignKey`,
    including recursive and lazy relationships. Related objects can be added, removed,
    or created with the field''s `RelatedManager`.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 多对多关系。需要一个位置参数：模型相关的类，其工作方式与`ForeignKey`完全相同，包括递归和延迟关系。可以使用字段的`RelatedManager`添加、删除或创建相关对象。
- en: Database representation
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库表示
- en: Behind the scenes, Django creates an intermediary join table to represent the
    many-to-many relationship. By default, this table name is generated using the
    name of the many-to-many field and the name of the table for the model that contains
    it.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，Django创建一个中间连接表来表示多对多关系。默认情况下，此表名是使用多对多字段的名称和包含它的模型的表名生成的。
- en: Since some databases don't support table names above a certain length, these
    table names will be automatically truncated to 64 characters and a uniqueness
    hash will be used. This means you might see table names like `author_books_9cdf4`;
    this is perfectly normal. You can manually provide the name of the join table
    using the `db_table` option.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 由于某些数据库不支持超过一定长度的表名，这些表名将自动截断为64个字符，并使用唯一性哈希。这意味着您可能会看到表名如`author_books_9cdf4`；这是完全正常的。您可以使用`db_table`选项手动提供连接表的名称。
- en: Arguments
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: '`ManyToManyField` accepts an extra set of arguments-all optional-that control
    how the relationship functions.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`ManyToManyField`接受一组额外的参数-全部是可选的-用于控制关系的功能。'
- en: related_name
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: related_name
- en: Same as `ForeignKey.related_name`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 与`ForeignKey.related_name`相同。
- en: related_query_name
  id: totrans-184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: related_query_name
- en: Same as `ForeignKey.related_query_name`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 与`ForeignKey.related_query_name`相同。
- en: limit_choices_to
  id: totrans-186
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: limit_choices_to
- en: Same as `ForeignKey.limit_choices_to`. `limit_choices_to` has no effect when
    used on a `ManyToManyField` with a custom intermediate table specified using the
    `through` parameter.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 与`ForeignKey.limit_choices_to`相同。当在使用`through`参数指定自定义中间表的`ManyToManyField`上使用`limit_choices_to`时，`limit_choices_to`没有效果。
- en: symmetrical
  id: totrans-188
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 对称的
- en: 'Only used in the definition of ManyToManyFields on self. Consider the following
    model:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在自身的ManyToManyFields的定义中使用。考虑以下模型：
- en: '[PRE13]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When Django processes this model, it identifies that it has a `ManyToManyField`
    on itself, and as a result, it doesn't add a `person_set` attribute to the `Person`
    class. Instead, the `ManyToManyField` is assumed to be symmetrical-that is, if
    I am your friend, then you are my friend.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当Django处理此模型时，它会识别出它在自身上有一个`ManyToManyField`，因此它不会向`Person`类添加`person_set`属性。相反，假定`ManyToManyField`是对称的-也就是说，如果我是你的朋友，那么你也是我的朋友。
- en: If you do not want symmetry in many-to-many relationships with `self`, set `symmetrical`
    to `False`. This will force Django to add the descriptor for the reverse relationship,
    allowing `ManyToManyField` relationships to be non-symmetrical.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不希望在`self`的多对多关系中具有对称性，请将`symmetrical`设置为`False`。这将强制Django添加反向关系的描述符，从而允许`ManyToManyField`关系不对称。
- en: through
  id: totrans-193
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 通过
- en: Django will automatically generate a table to manage many-to-many relationships.
    However, if you want to manually specify the intermediary table, you can use the
    `through` option to specify the Django model that represents the intermediate
    table that you want to use.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Django将自动生成一个表来管理多对多关系。但是，如果要手动指定中间表，可以使用`through`选项来指定表示要使用的中间表的Django模型。
- en: 'The most common use for this option is when you want to associate extra data
    with a many-to-many relationship. If you don''t specify an explicit `through`
    model, there is still an implicit `through` model class you can use to directly
    access the table created to hold the association. It has three fields:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项的最常见用法是当您想要将额外数据与多对多关系关联时。如果不指定显式的`through`模型，则仍然有一个隐式的`through`模型类，您可以使用它直接访问创建以保存关联的表。它有三个字段：
- en: '`id`: The primary key of the relation'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：关系的主键'
- en: '`<containing_model>_id`: The `id` of the model that declares the `ManyToManyField`'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<containing_model>_id`：声明`ManyToManyField`的模型的`id`'
- en: '`<other_model>_id`: The `id` of the model that the `ManyToManyField` points
    to'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<other_model>_id`：`ManyToManyField`指向的模型的`id`'
- en: This class can be used to query associated records for a given model instance
    like a normal model.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 此类可用于像普通模型一样查询给定模型实例的关联记录。
- en: through_fields
  id: totrans-200
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: through_fields
- en: Only used when a custom intermediary model is specified. Django will normally
    determine which fields of the intermediary model to use in order to establish
    a many-to-many relationship automatically.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在指定自定义中介模型时使用。Django通常会确定中介模型的哪些字段以自动建立多对多关系。
- en: db_table
  id: totrans-202
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: db_table
- en: The name of the table to create for storing the many-to-many data. If this is
    not provided, Django will assume a default name based upon the names of the table
    for the model defining the relationship and the name of the field itself.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 用于存储多对多数据的表的名称。如果未提供此名称，Django将基于定义关系的模型的表的名称和字段本身的名称假定默认名称。
- en: db_constraint
  id: totrans-204
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: db_constraint
- en: Controls whether or not constraints should be created in the database for the
    foreign keys in the intermediary table. The default is `True`, and that's almost
    certainly what you want; setting this to `False` can be very bad for data integrity.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 控制是否应在中介表的外键在数据库中创建约束。默认值为`True`，这几乎肯定是您想要的；将其设置为`False`可能对数据完整性非常不利。
- en: 'That said, here are some scenarios where you might want to do this:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，以下是一些可能需要这样做的情况：
- en: You have legacy data that is not valid
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您有不合法的遗留数据
- en: You're sharding your database
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您正在对数据库进行分片
- en: It is an error to pass both `db_constraint` and `through`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 传递`db_constraint`和`through`是错误的。
- en: swappable
  id: totrans-210
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: swappable
- en: Controls the migration framework's reaction if this `ManyToManyField` is pointing
    at a swappable model. If it is `True`--the default-then if the `ManyToManyField`
    is pointing at a model which matches the current value of `settings.AUTH_USER_MODEL`
    (or another swappable model setting) the relationship will be stored in the migration
    using a reference to the setting, not to the model directly.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此`ManyToManyField`指向可交换模型，则控制迁移框架的反应。如果为`True`-默认值-如果`ManyToManyField`指向与`settings.AUTH_USER_MODEL`（或其他可交换模型设置）的当前值匹配的模型，则关系将存储在迁移中，使用对设置的引用，而不是直接对模型。
- en: You only want to override this to be `False` if you are sure your model should
    always point towards the swapped-in model-for example, if it is a profile model
    designed specifically for your custom user model. If in doubt, leave it to its
    default of `True`. `ManyToManyField` does not support `validators`. `null` has
    no effect since there is no way to require a relationship at the database level.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在确定模型应始终指向替换模型的情况下，才希望将其覆盖为`False`-例如，如果它是专门为自定义用户模型设计的配置文件模型。如果有疑问，请将其保留为默认值`True`。`ManyToManyField`不支持`validators`。`null`没有影响，因为没有办法在数据库级别要求关系。
- en: OneToOneField
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OneToOneField
- en: A one-to-one relationship. Conceptually, this is similar to a `ForeignKey` with
    `unique=True`, but the reverse side of the relation will directly return a single
    object. This is most useful as the primary key of a model which extends another
    model in some way; multi table inheritance is implemented by adding an implicit
    one-to-one relation from the child model to the parent model, for example.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 一对一关系。在概念上，这类似于具有`unique=True`的`ForeignKey`，但关系的反向侧将直接返回单个对象。这在作为模型的主键时最有用，该模型以某种方式扩展另一个模型；通过向子模型添加从子模型到父模型的隐式一对一关系来实现多表继承，例如。
- en: 'One positional argument is required: the class to which the model will be related.
    This works exactly the same as it does for `ForeignKey`, including all the options
    regarding recursive and lazy relationships. If you do not specify the `related_name`
    argument for the `OneToOneField`, Django will use the lower-case name of the current
    model as default value. With the following example:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一个位置参数：将与之相关的类。这与`ForeignKey`的工作方式完全相同，包括递归和延迟关系的所有选项。如果未为`OneToOneField`指定`related_name`参数，Django将使用当前模型的小写名称作为默认值。使用以下示例：
- en: '[PRE14]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'your resulting `User` model will have the following attributes:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 您的生成的`User`模型将具有以下属性：
- en: '[PRE15]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'A `DoesNotExist` exception is raised when accessing the reverse relationship
    if an entry in the related table doesn''t exist. For example, if a user doesn''t
    have a supervisor designated by `MySpecialUser`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问相关表中的条目不存在时，将引发`DoesNotExist`异常。例如，如果用户没有由`MySpecialUser`指定的主管：
- en: '[PRE16]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Additionally, `OneToOneField` accepts all of the extra arguments accepted by
    `ForeignKey`, plus one extra argument:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`OneToOneField`接受`ForeignKey`接受的所有额外参数，以及一个额外参数：
- en: parent_link
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: parent_link
- en: When `True` and used in a model which inherits from another concrete model,
    indicates that this field should be used as the link back to the parent class,
    rather than the extra `OneToOneField` which would normally be implicitly created
    by subclassing. See *One-to-one relationships* in the next chapter for usage examples
    of `OneToOneField`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 当在继承自另一个具体模型的模型中使用时，`True`表示应使用此字段作为返回到父类的链接，而不是通常通过子类隐式创建的额外`OneToOneField`。有关`OneToOneField`的用法示例，请参见下一章中的*一对一关系*。
- en: Model metadata options
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型元数据选项
- en: '*Table A.3* is a complete list of model meta options you can give your model
    in its internal `class Meta`. For more detail on each meta option as well as examples,
    see the Django documentation at [https://docs.djangoproject.com/en/1.8/ref/models/options/](https://docs.djangoproject.com/en/1.8/ref/models/options/).'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '*表A.3*是您可以在其内部`class Meta`中为模型提供的完整模型元选项列表。有关每个元选项的更多详细信息以及示例，请参阅Django文档[https://docs.djangoproject.com/en/1.8/ref/models/options/](https://docs.djangoproject.com/en/1.8/ref/models/options/)。'
- en: '| **Option** | **Notes** |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| **选项** | **说明** |'
- en: '| --- | --- |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `abstract` | If `abstract = True`, this model will be an abstract base class.
    |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `abstract` | 如果`abstract = True`，此模型将是一个抽象基类。 |'
- en: '| `app_label` | If a model is defined outside of an application in `INSTALLED_APPS`,
    it must declare which app it belongs to. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `app_label` | 如果模型在`INSTALLED_APPS`之外定义，它必须声明属于哪个应用程序。 |'
- en: '| `db_table` | The name of the database table to use for the model. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `db_table` | 用于模型的数据库表的名称。 |'
- en: '| `db_tablespace` | The name of the database tablespace to use for this model.
    The default is the project''s `DEFAULT_TABLESPACE` setting, if set. If the backend
    doesn''t support tablespaces, this option is ignored. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '- `db_tablespace` | 用于此模型的数据库表空间的名称。如果设置了项目的 `DEFAULT_TABLESPACE` 设置，则默认为该设置。如果后端不支持表空间，则忽略此选项。'
- en: '| `default_related_name` | The name that will be used by default for the relation
    from a related object back to this one. The default is `<model_name>_set`. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '- `default_related_name` | 从相关对象返回到此对象的关系的默认名称。默认为 `<model_name>_set`。'
- en: '| `get_latest_by` | The name of an orderable field in the model, typically
    a `DateField`, `DateTimeField`, or `IntegerField`. |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '- `get_latest_by` | 模型中可排序字段的名称，通常为 `DateField`、`DateTimeField` 或 `IntegerField`。'
- en: '| `managed` | Defaults to `True`, meaning Django will create the appropriate
    database tables in `migrate` or as part of migrations and remove them as part
    of a `flush` management command. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '- `managed` | 默认为 `True`，意味着Django将在`migrate`或作为迁移的一部分中创建适当的数据库表，并在`flush`管理命令的一部分中删除它们。'
- en: '| `order_with_respect_to` | Marks this object as orderable with respect to
    the given field. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '- `order_with_respect_to` | 标记此对象相对于给定字段是可排序的。'
- en: '| `ordering` | The default ordering for the object, for use when obtaining
    lists of objects. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '- `ordering` | 对象的默认排序，用于获取对象列表时使用。'
- en: '| `permissions` | Extra permissions to enter into the permissions table when
    creating this object. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '- `permissions` | 创建此对象时要输入权限表的额外权限。'
- en: '| `default_permissions` | Defaults to `(''add'', ''change'', ''delete'')`.
    |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '- `default_permissions` | 默认为 `(''add'', ''change'', ''delete'')`。'
- en: '| `proxy` | If `proxy = True`, a model which subclasses another model will
    be treated as a proxy model. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '- `proxy` | 如果 `proxy = True`，则子类化另一个模型的模型将被视为代理模型。'
- en: '| `select_on_save` | Determines if Django will use the pre-1.6 `django.db.models.Model.save()`
    algorithm. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '- `select_on_save` | 确定Django是否使用pre-1.6 `django.db.models.Model.save()` 算法。'
- en: '| `unique_together` | Sets of field names that, taken together, must be unique.
    |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '- `unique_together` | 一起使用的字段集，必须是唯一的。'
- en: '| `index_together` | Sets of field names that, taken together, are indexed.
    |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '- `index_together` | 一起使用的字段集，被索引。'
- en: '| `verbose_name` | A human-readable name for the object, singular. |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '- `verbose_name` | 对象的可读名称，单数形式。'
- en: '| `verbose_name_plural` | The plural name for the object. |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '- `verbose_name_plural` | 对象的复数名称。'
- en: 'Table A.3: Model metadata options'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 表A.3：模型元数据选项
