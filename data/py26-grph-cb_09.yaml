- en: Chapter 9. Exchanging Inkscape SVG Drawings with Tkinter Shapes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章。交换 Inkscape SVG 绘图与 Tkinter 形状
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Inkscape as a tool for acquiring Tkinter line shapes (paths)
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Inkscape 作为获取 Tkinter 线形状（路径）的工具
- en: Finding and installing Inkscape
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找和安装 Inkscape
- en: Where to find SVG clipart
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪里可以找到 SVG 裁剪艺术
- en: Getting Tkinter paths from raster images
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从矢量图像中获取 Tkinter 路径
- en: Converting path data from SVG images into other formats
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 SVG 图像中的路径数据转换为其他格式
- en: Using Inkscape as a graphic tool for Tkinter paths
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Inkscape 作为 Tkinter 路径的图形工具
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we explore alternate ways and means of getting graphic-shaped
    data into Tkinter programs. Probably the most widespread vector-graphic format
    is the one designed to work on web pages. This is known as **SVG**, which is short-form
    for **Scaled Vector Graphics**. It is the official standard specification defined
    by the World Wide Web Consortium and has been around since 1999.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨将图形形状数据引入 Tkinter 程序的替代方法和手段。最普遍的矢量图形格式是为网页设计的，这被称为 **SVG**，即 **缩放矢量图形**
    的缩写。它是世界 Wide Web 联盟定义的官方标准规范，自 1999 年以来一直存在。
- en: Our interest in SVG comes from the practical use it has for us in creating drawn
    shapes in Python with the Tkinter module.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对 SVG 的兴趣源于它在 Python 中使用 Tkinter 模块创建绘制形状的实用价值。
- en: Professional vector-drawing packages like Inkscape and some of the proprietary-drawing
    packages allow us, aided by some Python code, to acquire lists of coordinates
    that can be used directly in the `create_line(x0,y0 …)` functions of Tkinter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 像 Inkscape 这样的专业矢量绘图软件包和一些专有绘图软件包，通过一些 Python 代码的帮助，使我们能够获取可以直接用于 Tkinter 的
    `create_line(x0,y0 …)` 函数中的坐标列表。
- en: There are growing libraries of copyright-free SVG pictures available on the
    web. With tools like Inkscape, we can dismantle existing images and use parts
    of them for our own graphic work and Python programs. One such site is [www.openclipart.org/](http://www.openclipart.org/)
    which allows and encourages anyone to copy the thousands of images stored there
    in SVG format.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 网上可用的无版权 SVG 图片库正在不断增长。借助像 Inkscape 这样的工具，我们可以拆解现有图像，并使用其部分内容用于我们的图形工作和 Python
    程序。其中一个这样的网站是 [www.openclipart.org/](http://www.openclipart.org/)，它允许并鼓励任何人复制存储在该网站上的数千个
    SVG 格式的图像。
- en: SVG drawings encode lines in more than one way. One way is to represent a line
    as a series of x-y coordinate points on a canvas. Each point is defined as a pair
    of numbers referred to the zero position of the canvas which is the North-West
    corner (top-right). The second way is to represent each point as a relative shift
    from the previous point.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 绘图以多种方式编码线条。一种方式是将线条表示为画布上的 x-y 坐标点序列。每个点被定义为相对于画布零位置的数字对，该位置是西北角（右上角）。第二种方式是将每个点表示为相对于前一点的相对位移。
- en: The structure of an SVG drawing
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SVG 绘图的架构
- en: 'We shall examine how Inkscape encodes drawings so that we may interpret them
    for use in Python. What we will do is:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将研究 Inkscape 如何编码绘图，以便我们可以在 Python 中对其进行解释以供使用。我们将要做的是：
- en: Draw some simple objects in Inkscape and save them somewhere as "Plain SVG"
    format files.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Inkscape 中绘制一些简单的对象，并将它们保存为“Plain SVG”格式的文件。
- en: Then we open the files in a text editor and inspect the contents so that we
    can recognize the lines we are interested in.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们在文本编辑器中打开文件，检查内容，以便我们能够识别出我们感兴趣的行。
- en: Finally we write code that will convert the SVG lines of interest into Tkinter
    lists which we can use directly in our Python programs.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将编写代码将感兴趣的 SVG 线转换为 Tkinter 列表，我们可以在我们的 Python 程序中直接使用。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The first thing we need to do now is acquire and install a copy of Inkscape
    onto our computer. We will find this at [www.inkscape.org/download/](http://www.inkscape.org/download/)
    where there are versions for Linux and Microsoft Windows.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要做的第一件事是获取并安装 Inkscape 到我们的计算机上。我们可以在 [www.inkscape.org/download/](http://www.inkscape.org/download/)
    找到它，那里有适用于 Linux 和 Microsoft Windows 的版本。
- en: The on-line documentation and tutorials for Inkscape are excellent. However,
    we want to use the minimum amount of Inkscape so this recipe is just that a few
    pointers to get the minimum task done.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Inkscape 的在线文档和教程非常出色。然而，我们希望使用最少的 Inkscape，所以这个配方就是提供一些基本指导，以完成最小任务。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The only tool we need to use in Inkscape is the line-drawing pen as shown in
    the following screenshot. We drew a "Z" shape with this tool and saved the file
    as `z_inkscape.svg`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Inkscape 中我们需要使用的唯一工具是下面的截图所示的线条绘制笔。我们使用这个工具绘制了一个“Z”形状，并将文件保存为 `z_inkscape.svg`。
- en: 'The code produced, displayed in a text editor is shown after the screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 产生的代码，在文本编辑器中显示，如下截图所示：
- en: '![How to do it...](img/3845_09_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3845_09_01.jpg)'
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Most of the preceding code is of no interest to us. It is the XML code that
    a web browser interprets in order to display a web page. Embedded within it, however,
    are SVG paths which we somehow want to transfer to Python so Tkinter can display
    it as a drawn shape.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的大部分代码对我们来说没有兴趣。它是网络浏览器解释以显示网页的 XML 代码。然而，其中嵌入的 SVG 路径是我们想要以某种方式转移到 Python
    中的，以便 Tkinter 可以将其显示为绘制的形状。
- en: 'The portion we are interested in is the paragraph starting with`<path` as this
    is the SVG format description of the "Z" shape that was drawn with the pen tool.
    This is the section of code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感兴趣的部分是从 `<path` 开始的段落，因为这是用笔工具绘制的 "Z" 形状的 SVG 格式描述。这是代码的部分：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is the whole SVG description of the ''Zorro'' sign and the following line,
    has been slightly simplified, by removing the decimal fractions, to improve readability:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是整个 'Zorro' 标志的 SVG 描述以及随后的行，已经稍微简化，去掉了小数点，以提高可读性：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This line is the equivalent of a group of Tkinter instructions that could be
    written:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这条线相当于可以写成的 Tkinter 指令组：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The 'm' symbol is the SVG instruction "move-to" where the number of pixels moved
    are increments added to the coordinates of the previous point in the line except
    for the first point 122,89 which tells the pen where to begin.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '''m'' 符号是 SVG 指令 "移动到"，其中移动的像素数是加到线上前一个点的坐标的增量，除了第一个点 122,89，它告诉笔从哪里开始。'
- en: There's more...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We do not want to become SVG experts. We only want to know enough to be able
    to recognize graphic data which we can use in Python. In this spirit, a summary
    of a few of the most common SVG directives is given here.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想成为 SVG 专家。我们只想知道足够多的知识，以便能够识别出我们可以用于 Python 的图形数据。本着这个精神，这里给出了一些最常见的 SVG
    指令的总结。
- en: '`m x,y` is the "move-to" instruction which moves the pen to the point `x,y`
    without drawing a line.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m x,y` 是 "移动到" 指令，它将笔移动到点 `x,y` 而不绘制线。'
- en: '`m x0,y0 x1,y1 x2,y2` will draw a line from `x0,y0` to `x1,y1` and then another
    segment from `x1,y1` to `x2, y2`. Note that the SVG interpreter only interprets
    the first point `x0,y0` as a "move-to" but interprets subsequent pairs of points
    as "line-to". "line-to" is an instruction to put the tip of the pen onto the surface
    and draw.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m x0,y0 x1,y1 x2,y2` 将从 `x0,y0` 绘制一条线到 `x1,y1`，然后从 `x1,y1` 绘制另一段线到 `x2, y2`。注意，SVG
    解释器只将第一个点 `x0,y0` 解释为 "移动到" 指令，但将后续的点对解释为 "线到" 指令。"线到" 指令是将笔尖放到表面上并绘制的指令。'
- en: '`m x0,y0 x1,y1 x2,y2` will draw a line from `x0,y0` to `x0+x1,y0+y1` and then
    another segment from `x0+x1,y0+y1` to `x0+x2,y0+y2`.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m x0,y0 x1,y1 x2,y2` 将从 `x0,y0` 绘制一条线到 `x0+x1,y0+y1`，然后从 `x0+x1,y0+y1` 绘制另一段线到
    `x0+x2,y0+y2`。'
- en: The point to note is that the use of lower case is significant and is telling
    the SVG interpreter to calculate the coordinates as increment values that must
    be added to the previous location. As with the m directive the pen moves to the
    first point x0,y0 without drawing anything, but all subsequent points are drawn
    as segments joining adjacent points.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 需要注意的是，小写字母的使用很重要，并且告诉 SVG 解释器将坐标计算为增量值，这些值必须加到前一个位置上。与 `m` 指令一样，笔移动到第一个点 x0,y0
    而不绘制任何东西，但所有后续的点都作为连接相邻点的线段绘制。
- en: '`l x,y` commands the pen to draw a line from wherever the pen happens to be
    now to the point `x,y`.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l x,y` 指令让笔从当前笔所在的位置绘制一条线到点 `x,y`。'
- en: '`l x,y` commands the pen to draw a line from the current pen position (x0,y0
    for instance) to the point `x0 + x, y0 + y`.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l x,y` 指令让笔从当前笔的位置（例如 x0,y0）绘制一条线到点 `x0 + x, y0 + y`。'
- en: '`z` at the end of a list of path coordinates will close the path by drawing
    a line from the current point back to the start point.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在路径坐标列表末尾的 `z` 将通过绘制一条线从当前点回到起点来闭合路径。
- en: SVG code for separate paths
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 独立路径的 SVG 代码
- en: Separate paths each get their own`<path innards-of the path />` code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 每个独立的路径都有自己的 `<path innards-of the path />` 代码。
- en: 'Thus the SVG code for three separate paths could be as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，三个独立路径的 SVG 代码可能如下所示：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Our interest is in the three lines starting from `d=` because these give the
    strings of `x,y` pairs that give the location of points on a drawn shape. The
    high degree of arithmetic precision is redundant because Tkinter will only use
    the integer part. However, if we needed to scale the picture up by multiplying
    each number by an amplification factor then the high arithmetic precision would
    avoid a small amount of distortion of the shape.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感兴趣的是从 `d=` 开始的三条线，因为这些提供了 `x,y` 对的字符串，它们给出了绘制形状上点的位置。由于 Tkinter 只会使用整数部分，因此高算术精度是多余的。然而，如果我们需要通过将每个数字乘以一个放大因子来放大图片，那么高算术精度可以避免形状的一小部分扭曲。
- en: Tracing the shape of an image in Inkscape
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Inkscape 中追踪图像的形状
- en: We want to use Inkscape to capture a complex series of shapes ones that would
    be tedious and difficult to draw with pencil and paper. A practical example of
    the use of this could be that you may want to paint a picture of an elephant and
    you need some reliable guidelines, based on a magazine picture or photograph,
    for the outlines of the limbs and body. One way is to draw a grid on the picture
    with a pencil and ruler, then repeat a scaled version of the grid on blank canvas
    and finally to draw the outlines with a lead pencil. An alternative method is
    to pull a `JPG, GIF, PNG, BMP`, or `TIFF` image of the elephant into Inkscape
    and trace a series of lines over it using the pen tool. These outlines can be
    printed and traced onto your canvas. These same shapes can be used in Python with
    Tkinter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想使用 Inkscape 来捕捉一系列复杂的形状，这些形状用铅笔和纸绘制会既繁琐又困难。一个实际的应用例子可能是你想要画一头大象的画，你需要一些可靠的指南，基于杂志图片或照片，来确定四肢和身体的轮廓。一种方法是用铅笔和直尺在图片上画一个网格，然后在空白画布上重复缩放版本的网格，最后用铅笔画出轮廓。另一种方法是把大象的
    `JPG, GIF, PNG, BMP` 或 `TIFF` 图像拖入 Inkscape，并使用笔工具在其上追踪一系列线条。这些轮廓可以打印出来，然后追踪到你的画布上。这些相同的形状可以用
    Python 中的 Tkinter 来使用。
- en: There are other ways of converting raster images to SVG paths but they require
    a fair amount of pre-conditioning of the images such as color separation and converting
    continuous grey scales into pure black and white. The method shown below allows
    us to decide exactly what path our line must follow even when the original image
    presents many subtle and ambiguous choices.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将位图图像转换为 SVG 路径还有其他方法，但它们需要对图像进行相当多的预处理，例如颜色分离和将连续的灰度转换为纯黑白。下面所示的方法允许我们决定我们的线条必须遵循的确切路径，即使原始图像提供了许多微妙和模糊的选择。
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Place the image we are going to work on in a convenient folder. We use `/constr/pics1`
    in this recipe.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们要处理的图像放在一个方便的文件夹中。在这个菜谱中，我们使用 `/constr/pics1`。
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Inkscape and select **File** | **Open**.![How to do it...](img/3845_09_02.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Inkscape 并选择 **文件** | **打开**。![如何操作...](img/3845_09_02.jpg)
- en: Select the image you want to work on.![How to do it...](img/3845_09_03.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你想要处理的图像。![如何操作...](img/3845_09_03.jpg)
- en: Add a new layer. This allows us to draw lines on one layer without interfering
    with the background layer that contains the photographic image.![How to do it...](img/3845_09_04.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新图层。这允许我们在一个图层上绘制线条，而不会干扰包含照片图像的背景图层。![如何操作...](img/3845_09_04.jpg)
- en: Magnify the image to make it easier to see where to place the pen tool. This
    also improves the accuracy of the traced path we will make.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 放大图像以便更容易看到放置笔工具的位置。这也有助于提高我们将要追踪的路径的准确性。
- en: We do this by clicking on the magnifying glass icon on the left border toolbar
    and then clicking on the zoom-in magnifying glass with the plus symbol inside
    it. This is in the toolbar that appears on the top border.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们这样做是通过点击左侧边栏工具栏上的放大镜图标，然后点击带有加号符号的放大镜来放大。这位于顶部边栏出现的工具栏中。
- en: '![How to do it...](img/3845_09_05.jpg)'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/3845_09_05.jpg)'
- en: Click on the pen tool on the left border toolbar and follow the path on the
    picture that we want to capture, save, and eventually convert to a Tkinter form.![How
    to do it...](img/3845_09_06.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏工具栏上点击笔工具，然后跟随我们想要捕捉、保存并最终转换为 Tkinter 形式的图片上的路径。![如何操作...](img/3845_09_06.jpg)
- en: Note that Inkscape allows us to shift the picture around and zoom in or out
    without interrupting the action of tracing a line. Then we can start clicking
    on points along a selected path in the image and move the mouse pointer across
    to a scroll bar or a zoom icon and move or click on them. Tkinter temporarily
    suspends the actions of the pen tool while the pointer is outside the drawing
    area.
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意，Inkscape允许我们在不中断追踪线条动作的情况下移动图片和放大或缩小。然后我们可以开始点击图像中选定路径上的点，并将鼠标指针移到滚动条或缩放图标上，移动或点击它们。Tkinter在指针位于绘图区域外时暂时挂起笔工具的动作。
- en: Another convenient feature is that if we mistakenly click the mouse in the wrong
    position, we can wipe out this mistake by hitting the Delete key ("del") on the
    keyboard once. This will undo the last click position on the line being traced.
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个方便的功能是，如果我们不小心在错误的位置点击鼠标，我们可以通过在键盘上按一次删除键（"del"）来擦除这个错误。这将撤销正在追踪的线条上的最后一个点击位置。
- en: If we wish to re-position any of the points on a completed line, this can be
    done using the point-editing tool which is the second from the top along the left
    border toolbar.
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们希望重新定位完成线条上的任何点，可以使用位于左侧边栏工具栏第二行的点编辑工具来完成。
- en: '![How to do it...](img/3845_09_07.jpg)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/3845_09_07.jpg)'
- en: At the final point of each separate path, the pen tool must be double-clicked.
    This ends the drawing of that particular path and puts the pen away. For the next
    line, we need to click on the pen icon in the toolbar once again.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个单独路径的最终点，必须双击笔工具。这结束了该特定路径的绘制，并将笔移开。对于下一条线，我们需要再次在工具栏上点击笔图标。
- en: A full set of traces of the lines of interest is shown in the following screenshot:![How
    to do it...](img/3845_09_08.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下截图显示了感兴趣线条的完整追踪集：![如何操作...](img/3845_09_08.jpg)
- en: Now we save our work as a SVG format file.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将我们的工作保存为SVG格式文件。
- en: 'To extract the SVG paths for conversion to Tkinter lines, we just open a text
    editor, and then open the SVG format file we have just saved in the editor. This
    file is an XML text file with some SVG code inside it as explained in the first
    recipe of this chapter. The pieces we are interested in are lines that start as
    follows:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要提取SVG路径以转换为Tkinter线条，我们只需打开一个文本编辑器，然后在编辑器中打开我们刚刚保存的SVG格式文件。这个文件是一个包含一些SVG代码的XML文本文件，正如本章第一道菜谱中解释的那样。我们感兴趣的部分是以下开始的线条：
- en: '[PRE5]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The next recipe gives the Python code to convert the SVG paths into Tkinter
    lines and display them for confirmation.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下一道菜谱提供了将SVG路径转换为Tkinter线条并显示以供确认的Python代码。
- en: How often do we need to click the mouse?
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们需要多频繁地点击鼠标？
- en: As soon as we start the activity of tracing a line, we discover that we have
    to exercise discretion about how often to left-click the mouse to create a new
    point. You will get best accuracy with many points and the least fidelity with
    the fewest of points. We will be surprised at how only a few numbers of points
    are needed to represent our shapes with acceptable fidelity.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们开始追踪线条的活动，我们会发现我们必须在多频繁地左击鼠标以创建新点方面进行判断。你将发现，使用许多点可以获得最佳精度，而使用最少的点可以获得最低的保真度。我们会惊讶地发现，只需要很少的点就可以以可接受的保真度表示我们的形状。
- en: This is due to the magic of the `smooth='true'` attribute in the Tkinter smooth
    line function:canvas_1.create_line(Q, `fill='green', smooth='true')` as shown
    in the next recipe.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为Tkinter平滑线函数中`smooth='true'`属性的魔力：如下一道菜谱所示，`canvas_1.create_line(Q, `fill='green',
    smooth='true')`。
- en: Another way to get SVG paths from raster images
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从位图图像获取SVG路径的另一种方法
- en: Another way to get SVG vector code from raster images is to use the trace path
    and path-simplify tools of Inkscape.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 从位图图像获取SVG矢量代码的另一种方法是使用Inkscape的追踪路径和路径简化工具。
- en: Converting an SVG path into a Tkinter Line
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将SVG路径转换为Tkinter线条
- en: We take long and complex Inkscape-traced paths that are SVG encoded and convert
    them into Tkinter lines that can be displayed using methods like `canvas.create_line(x0,y0,
    x1,y1, x2,y2, ...)`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将长而复杂的Inkscape追踪路径（SVG编码）转换为Tkinter线条，可以使用如`canvas.create_line(x0,y0, x1,y1,
    x2,y2, ...)`这样的方法来显示。
- en: The following program takes a slightly edited form of a SVG path and transforms
    it into a form usable in a `Tkintercreate_line()` function.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序以略微编辑过的SVG路径形式，将其转换为`Tkintercreate_line()`函数中可用的形式。
- en: To do this we need to exchange the single space characters that separate pairs
    of coordinates and replace them with commas.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们需要交换分隔坐标对的单个空格字符，并用逗号替换它们。
- en: At the same time, we want to convert the incremental coordinate values used
    by the SVG path into absolute values by adding the increment value to the corresponding
    previous value.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我们希望将 SVG 路径使用的增量坐标值转换为绝对值，通过将增量值加到相应的上一个值上。
- en: Getting ready
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'A typical SVG path for a 5-point line is shown below:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个 5 点线条的典型 SVG 路径：
- en: '`d="m 128,258 0,137 148,0 0,-145 -148,8 z"`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`d="m 128,258 0,137 148,0 0,-145 -148,8 z"`'
- en: In a text editor, it is easy to make some substitutions to convert it to the
    form of a list `a = "[128,258 0,137 148,0 0,-145 -148,8] "`
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中，将文本转换为列表形式非常简单，例如 `a = "[128,258 0,137 148,0 0,-145 -148,8] "`。
- en: These lists of numbers can be hundreds of lines long so we want to automate
    the tedious and error-prone job of exchanging each space with a comma and followed
    by the arithmetic of replacing the incremental values with absolute ones. That
    is what the code does.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数字列表可能长达数百行，因此我们希望自动化繁琐且易出错的替换每个空格为逗号，并随后进行将增量值替换为绝对值的算术运算。这正是代码所做的事情。
- en: This program uses one of the previous traced lines from Inkscape and inserts
    the commas and does the arithmetic to get the list of coordinates needed for `canvas.create_line(x0,y0,
    x1,y1, x2,y2, ...)`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序使用 Inkscape 之前追踪的线条之一，并插入逗号，进行算术运算以获取用于 `canvas.create_line(x0,y0, x1,y1,
    x2,y2, ...) ` 的坐标列表。
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Execute the code below in the usual way.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 按照常规方式执行以下代码。
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To keep the code simple and short, we placed the slightly edited form of the
    SVG path into the Python code as shown in the line beginning:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使代码简单且简短，我们将 SVG 路径的略微编辑形式放入 Python 代码中，如以下行所示：
- en: '`a =''1551.2964,83.663208 ...`.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`a =''1551.2964,83.663208 ...''。'
- en: 'The code does four essential things:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 代码执行四个基本操作：
- en: It places commas wherever it finds a space in the SVG path string.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在 SVG 路径字符串中找到空格的地方放置逗号。
- en: It splits a single string, at every comma, into a list of separate string elements.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将单个字符串在每个逗号处分割成单独的字符串元素列表。
- en: It converts each element into a floating point number.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将每个元素转换为浮点数。
- en: It does the arithmetic of adding each element to the one preceding it by two
    positions. The x-coordinates alternate with y-coordinates so to add an x-value
    to the previous x-value; we need to skip over the y-values in between.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过将每个元素加到前一个元素上两个位置进行算术运算。x 坐标与 y 坐标交替，因此要将 x 值加到前一个 x 值上，我们需要跳过中间的 y 值。
- en: 'The modified SVG path is transformed into a Python list that can be used directly
    in the line: `canvas_1.create_line(Q, fill=''green'', smooth=''true'')`, to draw
    it on the canvas.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的 SVG 路径被转换为可以直接在行 `canvas_1.create_line(Q, fill='green', smooth='true')`
    中使用的 Python 列表，以在画布上绘制它。
- en: There's more...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'When the other seven Inkscaped-lines from `table_glass_vase_inkscape.svg` are
    transformed in the same way, we get the results as shown in the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当其他七个来自 `table_glass_vase_inkscape.svg` 的 Inkscaped 线条以相同方式转换时，我们得到以下截图所示的结果：
- en: '![There''s more...](img/3845_09_09.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/3845_09_09.jpg)'
- en: How far should we go with image conversion code?
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们应该在图像转换代码上走多远？
- en: We have tried to keep the code simple and brief. We could have put a lot more
    effort into automating the slight editing that we did in a text editor to remove
    the `m` and place square brackets just inside the quotation marks.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经尽力使代码简单且简短。我们本可以投入更多精力来自动化我们在文本编辑器中进行的轻微编辑，以删除 `m` 并在引号内适当位置放置方括号。
- en: Another way to get SVG paths from raster images
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从位图图像获取 SVG 路径的另一种方法
- en: Another method of extracting SVG paths from raster images is to use the Path,
    Trace Bitmap tool followed by the Path, and simplify tools in Inkscape. This method
    does not work well with complex images such as the one of the transparent glass
    vase we have used here. It works best with simple black and white images. The
    Inkscape tool is based on another tool called **potrace** which has its own interface
    called **potracegui**. The problem with the potrace tool is you first have to
    convert your image into bitmap-type formats. The method we have used in this chapter
    allows us to make very specific choices about which particular lines we want to
    use no matter how complex the
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从位图图像中提取 SVG 路径的另一种方法是使用 Inkscape 中的路径、追踪位图工具，然后是路径和简化工具。这种方法对于像我们这里使用的透明玻璃花瓶这样的复杂图像效果不佳。它最适合简单的黑白图像。Inkscape
    工具基于另一个名为 **potrace** 的工具，它有一个名为 **potracegui** 的界面。potrace 工具的问题是你首先必须将你的图像转换为位图格式。我们在本章中使用的方法允许我们针对我们想要使用的特定线条做出非常具体的选择，无论图像多么复杂。
