- en: Chapter 4. A Car Rental App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。汽车租赁应用程序
- en: For this chapter, our hypothetical client is a car rental firm. They want us
    to create a website that their customers can visit, look at the available inventory
    of cars, and finally book one of those cars. The client also wants an admin panel
    where they can manage the inventory and booking requests.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，我们的假想客户是一家汽车租赁公司。他们希望我们创建一个网站，供他们的客户访问，查看可用的汽车库存，并最终预订其中一辆汽车。客户还希望有一个管理面板，他们可以在其中管理库存和预订请求。
- en: We will be creating this web app in (drum rolls) Django! You should be confident
    enough in Django by now that the frontend of the web app will not be a challenge
    for us. The focus of this chapter will be on customizing the Django built-in **admin**
    app to fit the requirements of our client. Most of the time when you need an administration
    panel for the web apps you create, you can do pretty much everything you need
    just by customizing the Django admin. Sometimes the requirements are complex enough
    that you need to create a custom administration panel, but that is seldom the
    case. So the knowledge we gain here will prove extremely useful to you in your
    web development career.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在（鼓声）Django中创建这个Web应用程序！您现在应该对Django有足够的信心，以至于Web应用程序的前端对我们来说不是挑战。本章的重点将放在定制Django内置的**admin**应用程序上，以满足我们客户的要求。大多数情况下，当您需要为创建的Web应用程序创建管理面板时，您可以通过定制Django
    admin来做几乎您需要的一切。有时候，要求足够复杂，您需要创建一个自定义管理面板，但这很少见。因此，我们在这里获得的知识将对您的Web开发职业非常有用。
- en: 'The main takeaways from this chapter will be as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要要点如下：
- en: Customizing Django admin model forms
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定制Django admin模型表单
- en: Adding custom filters to the admin objects list page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向管理对象列表页面添加自定义过滤器
- en: Overriding and customizing Django admin templates
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖和定制Django admin模板
- en: Code pack
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码包
- en: As I have mentioned, by now you should have a firm grasp of creating the components
    for a basic web app, including the views, templates, models, and URL configurations,
    so we will not be discussing these parts of the web app in this chapter. The code
    pack for this chapter is thus much bigger that the previous ones. I have created
    all the models and some of the views, templates, and URLs. We will mostly be focusing
    on how to tame the Django admin app to suit our needs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我所提到的，到目前为止，您应该已经牢牢掌握了创建基本Web应用程序的组件，包括视图、模板、模型和URL配置，因此我们在本章不会讨论Web应用程序的这些部分。因此，本章的代码包比以前的要大得多。我已经创建了所有的模型和一些视图、模板和URL。我们将主要关注如何驯服Django
    admin应用程序以满足我们的需求。
- en: 'I could not think of a fancy name for this project, so I just called the project
    *carrental*. As always, create a new virtual environment, install Django in this
    environment, and run the migrate command to initialize the database. For this
    project, we need to install one more Python package, Pillow, which is an image
    manipulation library for Python. To install it, run the following command with
    the virtual environment activated:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我想不出一个花哨的名字来为这个项目命名，所以我只是把项目称为*carrental*。像往常一样，创建一个新的虚拟环境，在这个环境中安装Django，并运行迁移命令来初始化数据库。对于这个项目，我们需要安装另一个Python包，Pillow，这是一个用于Python的图像处理库。要安装它，请在虚拟环境激活时运行以下命令：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This might take a minute or so as some compilation may be required. Installing
    Pillow is a bit more complicated because it relies on third-party libraries. If
    the install command fails for you, take a look at the documentation on installing
    Pillow at [https://pillow.readthedocs.org/en/3.0.x/installation.html](https://pillow.readthedocs.org/en/3.0.x/installation.html).
    This page has step-by-step guides for each operating system, and following the
    guide there, you should be able to install Pillow easily. Just remember that you
    need the library to run and work on the car rental application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要一两分钟，因为可能需要进行一些编译。安装Pillow要复杂一些，因为它依赖于第三方库。如果安装命令对您失败了，请查看[https://pillow.readthedocs.org/en/3.0.x/installation.html](https://pillow.readthedocs.org/en/3.0.x/installation.html)上有关安装Pillow的文档。该页面有每个操作系统的逐步指南，按照那里的指南，您应该能够轻松安装Pillow。只需记住，您需要该库来运行和处理汽车租赁应用程序。
- en: 'Once Pillow has been installed, run the development server using the `runserver`
    command and open up the web app at `http://127.0.0.1:8000`. You should see the
    following page:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Pillow后，使用`runserver`命令运行开发服务器，并在`http://127.0.0.1:8000`上打开Web应用程序。您应该会看到以下页面：
- en: '![Code pack](img/00698_04_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![代码包](img/00698_04_01.jpg)'
- en: Fixtures
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 固定装置
- en: Our database is empty, but right now we don't have any views to add objects
    to our database. We could do what we did in the last chapter and create a management
    command, but there's an easier way. I have added three `Car` objects to the database
    and then created a dump of this data that you can load. A data dump like this
    is called a fixture. We'll discuss fixtures in a bit; for now, let's see how to
    use them to load data in our database.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据库是空的，但现在我们没有任何视图来向我们的数据库添加对象。我们可以像上一章那样创建一个管理命令，但有一个更简单的方法。我已经向数据库添加了三个`Car`对象，然后创建了这些数据的转储，您可以加载。这样的数据转储称为固定装置。我们将稍后讨论固定装置；现在让我们看看如何使用它们来加载我们的数据库中的数据。
- en: 'On your command line, run this command in the project root with the virtual
    environment activated:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行上，在虚拟环境激活的情况下，在项目根目录中运行此命令：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Refresh the web page and now you should see a web page similar to this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新网页，现在您应该看到一个类似于这样的网页：
- en: '![Fixtures](img/00698_04_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![固定装置](img/00698_04_02.jpg)'
- en: Now we have three cars in our database. You should play around the app for a
    while. It has a details page for each car and allows you to submit a booking request
    from the details page.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的数据库中有三辆汽车。您应该玩一会儿这个应用程序。它为每辆汽车都有一个详细页面，并允许您从详细页面提交预订请求。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you try to use the booking form, note that the start and end dates need to
    be in the YYYY-MM-DD format. For example, 2016-12-22 is a valid date format accepted
    by the form.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试使用预订表单，请注意开始和结束日期需要采用YYYY-MM-DD格式。例如，2016-12-22是表单接受的有效日期格式。
- en: To learn more about fixtures, take a look at the Django documentation at [https://docs.djangoproject.com/en/stable/howto/initial-data/](https://docs.djangoproject.com/en/stable/howto/initial-data/).
    Fixtures are a feature of Django that let you dump the data in your database in
    simple text files using a number of formats. The most commonly used format is
    JSON. Once you have a fixture file, you can then use it to populate your database
    with data, as we did here, using the `loaddata` command.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于固定装置的信息，请查看Django文档[https://docs.djangoproject.com/en/stable/howto/initial-data/](https://docs.djangoproject.com/en/stable/howto/initial-data/)。固定装置是Django的一个功能，它允许你使用多种格式将数据库中的数据转储到简单的文本文件中。最常用的格式是JSON。一旦你有了一个固定装置文件，你就可以使用它来填充你的数据库，就像我们在这里使用`loaddata`命令一样。
- en: Before we move on to admin customization, I want to talk about a couple of new
    things that I have used in the models for this app. You should take a look at
    `frontend/models.py` to see how our models are configured, and then read the following
    information, which explains the new concepts.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续进行管理定制之前，我想谈谈我在这个应用程序的模型中使用的一些新东西。你应该看一下`frontend/models.py`，看看我们的模型是如何配置的，然后阅读下面的信息，解释了这些新概念。
- en: Image and File fields
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图片和文件字段
- en: 'I''d like to take a minute to introduce the `ImageField` model field. This
    is the first time we are seeing it, and using it is a bit different than other
    model fields. Here is our `Car` model that uses this field:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我想花一分钟介绍一下`ImageField`模型字段。这是我们第一次看到它，使用它与其他模型字段有些不同。这是我们使用这个字段的`Car`模型：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All of the information in this section about `ImageField` also relates to `FileField`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分关于`ImageField`的所有信息也适用于`FileField`。
- en: '`ImageField` is special and different from all the other database model fields
    that we have looked at for a few reasons. Firstly, it needs the Pillow image manipulation
    library to work, which is why we had to install it at the start of the chapter.
    If we had tried to run our application without Pillow installed, Django would
    have complained and never started the development server.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`ImageField`与我们查看过的所有其他数据库模型字段都有一些特殊之处。首先，它需要Pillow图像处理库才能工作，这就是为什么我们在本章的开头安装它的原因。如果我们在没有安装Pillow的情况下尝试运行我们的应用程序，Django会抱怨并且不会启动开发服务器。'
- en: Secondly, `ImageField` is one of the few Django database model fields that relies
    on having a few settings configured before it can be used. If you look at the
    `carrental/settings.py` file near the end, you should see that I have set the
    `MEDIA_ROOT` and `MEDIA_URL` variables.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，`ImageField`是少数几个依赖于在使用之前进行一些设置的Django数据库模型字段之一。如果你看一下`carrental/settings.py`文件的末尾，你会看到我已经设置了`MEDIA_ROOT`和`MEDIA_URL`变量。
- en: Lastly, you can see that we passed a `upload_do` parameter to `ImageField` and
    set it to `car_images`. Both `FileField` and `ImageField` database model fields
    require this parameter. This parameter is the name of the folder, relative to
    the configured `MEDIA_ROOT`, where any files being uploaded to your application
    through the Image/File fields will be saved. This is a concept that took me some
    time to figure out, so I'll explain it a bit further.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以看到我们传递了一个`upload_to`参数给`ImageField`并将其设置为`car_images`。`FileField`和`ImageField`数据库模型字段都需要这个参数。这个参数是相对于配置的`MEDIA_ROOT`的文件夹名称，任何通过Image/File字段上传到你的应用程序的文件都将被保存在这里。这是一个我花了一些时间才弄明白的概念，所以我会进一步解释一下。
- en: You should see that I have `MEDIA_ROOT` set to the `media` folder in the project
    root. If you take a look in the `media` folder, you should see another folder
    called `car_images`. This is the same name that we passed in the `upload_to` parameter.
    This is what I meant when I said that the `upload_to` parameter is a folder name
    *relative* to the configured media root.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到我已经将`MEDIA_ROOT`设置为项目根目录中的`media`文件夹。如果你看一下`media`文件夹，你应该会看到另一个名为`car_images`的文件夹。这与我们传递给`upload_to`参数的名称相同。这就是我说`upload_to`参数是相对于配置的媒体根目录的文件夹名称时的意思。
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: One thing I had trouble understanding when I started using Django was the difference
    between `MEDIA_ROOT` and `STATIC_ROOT`. To put it simply, `MEDIA_ROOT` is where
    all the files uploaded by the site users live. These files are uploaded using
    the Image/File fields with forms.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始使用Django时，我有一些困难理解`MEDIA_ROOT`和`STATIC_ROOT`之间的区别。简而言之，`MEDIA_ROOT`是站点用户上传的所有文件所在的位置。这些文件是使用表单和Image/File字段上传的。
- en: '`STATIC_ROOT` is where you put the static files associated with your web applications.
    These include CSS files, JavaScript files, and any other static files that are
    served as is. These have nothing to do with the Django part of your web application;
    these are delivered to the user as is, usually via a web server such as nginx.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`STATIC_ROOT`是你放置与你的Web应用程序相关的静态文件的位置。这些包括CSS文件、JavaScript文件和任何其他作为静态文件提供的文件。这与你的Web应用程序的Django部分无关；这些文件是原样提供给用户的，通常通过诸如nginx之类的Web服务器。'
- en: So now that you have everything configured, how do you upload files using `ImageField`?
    Well, Django supports a couple of different ways to do this. In our code, we will
    use `ModelForm`, which handles all the details for us. There are other ways as
    well. If you want further details, you should look at the Django documentation
    dealing with file uploads. It's quite comprehensive and lists all the different
    ways you can handle file uploads. You can refer to it at [https://docs.djangoproject.com/en/stable/topics/http/file-uploads/](https://docs.djangoproject.com/en/stable/topics/http/file-uploads/).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经配置好了一切，那么如何使用`ImageField`上传文件呢？嗯，Django支持几种不同的方法来做这个。在我们的代码中，我们将使用`ModelForm`，它会为我们处理所有的细节。还有其他方法。如果你想了解更多细节，你应该查看处理文件上传的Django文档。它非常全面，列出了处理文件上传的所有不同方式。你可以在[https://docs.djangoproject.com/en/stable/topics/http/file-uploads/](https://docs.djangoproject.com/en/stable/topics/http/file-uploads/)上查看。
- en: get_absolute_url
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取绝对URL
- en: One more thing that we are seeing for the first time in the `Car` model is `get_absolute_url`.
    There is nothing special about the implementation. It's just a class method that
    returns a URL, which it builds using the `reverse` function and the primary key
    of the object. This isn't anything new. We have been creating URLs like this for
    detail pages since the first chapter. What's interesting to note here is that
    Django assigns special meaning to the `get_absolute_url` method on a model class.
    There are a number of places where Django will automatically use the return value
    of the `get_absolute_url` method if the method exists on a model object. For instance,
    the `CreateView` generic method uses it. If you do not provide a `success_url`
    attribute and a custom `get_success_url` method on the view class, Django will
    try to get the URL to redirect from the `get_absolute_url` method on the newly
    created object if the method is defined in the model class.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`Car`模型中第一次看到的另一件事是`get_absolute_url`。实现上没有什么特别之处。它只是一个返回URL的类方法，它使用`reverse`函数和对象的主键构建URL。这并不是什么新鲜事。自第一章以来，我们一直在为详细页面创建这样的URL。这里有趣的是Django对模型类上的`get_absolute_url`方法赋予了特殊意义。Django有许多地方会自动使用`get_absolute_url`方法的返回值，如果该方法存在于模型对象上。例如，`CreateView`通用方法会使用它。如果您没有在视图类上提供`success_url`属性和自定义的`get_success_url`方法，Django将尝试从新创建的对象上的`get_absolute_url`方法获取重定向的URL，如果该方法在模型类中定义了。
- en: 'Django also uses this method in the admin app, as we''ll see later on. If you
    are interested, you can take a look at the documentation for it:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Django还在管理员应用程序中使用此方法，我们稍后会看到。如果您感兴趣，可以查看其文档：
- en: '[https://docs.djangoproject.com/en/stable/ref/models/instances/#get-absolute-url/](https://docs.djangoproject.com/en/stable/ref/models/instances/#get-absolute-url/).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.djangoproject.com/en/stable/ref/models/instances/#get-absolute-url/](https://docs.djangoproject.com/en/stable/ref/models/instances/#get-absolute-url/)。'
- en: The Django admin app
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django管理员应用程序
- en: Now that we have looked at what new features were used in the code pack, let's
    move on to the main topic for this chapter—the Django **admin** app. The admin
    app is quite possibly one of the main reasons for the popularity of Django over
    other similar web frameworks. It is the embodiment of the *batteries included*
    nature of Django. With minimal configuration, the admin app provides a fully featured
    and extremely tailored CMS, enough to rival big names such as WordPress and Drupal.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看了代码包中使用的新功能，让我们继续讨论本章的主题——Django**管理员**应用程序。管理员应用程序很可能是Django比其他类似的Web框架更受欢迎的主要原因之一。它体现了Django“电池包含”的本质。通过最小的配置，管理员应用程序提供了一个功能齐全且非常定制的CMS，足以与WordPress和Drupal等大型名称媲美。
- en: In this chapter, you will learn how easy it is to configure and customize the
    admin to get most of the functionality that you will want in the admin panels
    of your web apps. Let's start by fixing the most immediate problem for our fictional
    client, a car rental business owner, which is the ability to add and edit car
    details.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何轻松配置和自定义管理员，以获得您在Web应用程序的管理员面板中所需的大部分功能。让我们首先解决我们虚构客户的最紧迫问题，即汽车租赁业主的能力来添加和编辑汽车详情。
- en: 'When you start a new application, Django by default creates an `admin.py` file
    in the application folder. Change the `frontend/admin.py` file in our project
    to match this content:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动一个新应用程序时，Django默认会在应用程序文件夹中创建一个`admin.py`文件。更改我们项目中的`frontend/admin.py`文件以匹配此内容：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'That''s it. Really! Three lines in total and you get the ability to edit and
    add `Car` objects to your database. That''s the power of Django, right there in
    those three lines. Let''s test it out. In your browser, visit `http://127.0.0.1:8000/admin`
    and you should see a page similar to the following one:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。真的！总共只有三行代码，您就可以编辑和添加`Car`对象到您的数据库中。这就是Django的强大之处，就在这三行代码中。让我们来测试一下。在浏览器中，访问`http://127.0.0.1:8000/admin`，您应该会看到类似以下页面：
- en: '![The Django admin app](img/00698_04_03.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Django管理员应用程序](img/00698_04_03.jpg)'
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Don't worry if your admin looks slightly different. Django updates the theme
    for the admin every once in a while and, depending on which version of Django
    you are using, your admin may look slightly different. However, all the functionality
    will be there and will almost always have the same interface layout.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的管理员看起来略有不同，不要担心。Django偶尔会更新管理员的主题，取决于您使用的Django版本，您的管理员可能看起来略有不同。但是，所有功能都会在那里，几乎总是具有相同的界面布局。
- en: 'Oops, there is one thing that we left out. We didn''t create a user to log
    in with. This is easily fixable. In the command line, run this command with the
    virtual environment activated:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，有一件事我们忘了。我们没有创建一个可以登录的用户。这很容易解决。在命令行中，激活虚拟环境后运行以下命令：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Just follow along with the prompts to create a new user. Once you have created
    the user, use it to log in to the admin. After logging in, you should see something
    similar to this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 跟着提示创建一个新用户。创建用户后，使用该用户登录到管理员。登录后，您应该会看到类似于以下内容：
- en: '![The Django admin app](img/00698_04_04.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![Django管理员应用程序](img/00698_04_04.jpg)'
- en: A few things to note in this screen. First, Django will by default add links
    to manage **Groups** and **Users**. Secondly, any models that we configure to
    show up in the admin are grouped by their application name. Thus, the link to
    manage **Cars** shows up under the label for the app that defines the model, **Frontend**.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕上需要注意的几件事。首先，Django默认会添加链接来管理**组**和**用户**。其次，我们配置在管理员中显示的任何模型都会按其应用程序名称进行分组。因此，管理**Cars**的链接显示在定义模型的应用程序标签**Frontend**下。
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you pay close attention, you might note that the admin lists the plural name
    of our `Car` model. How does it know the plural name? Well, it simply adds an
    's' in front of our model name. In a lot of cases, this doesn't work, for instance,
    if we had a model called `Bus`. For cases like this, Django allows us to configure
    the plural name for a model.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细观察，您可能会注意到管理员列出了我们`Car`模型的复数名称。它是如何知道复数名称的呢？嗯，它只是在我们模型名称的前面添加了一个's'。在很多情况下，这并不适用，例如，如果我们有一个名为`Bus`的模型。对于这种情况，Django允许我们配置模型的复数名称。
- en: 'Let''s try editing one of the car objects that we have in our database. Click
    on the **Cars** link and you should see a screen similar to the following one:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试编辑我们数据库中的一辆汽车。单击**Cars**链接，您应该会看到类似以下的屏幕：
- en: '![The Django admin app](img/00698_04_05.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![Django管理员应用程序](img/00698_04_05.jpg)'
- en: 'The list doesn''t look very useful. We have no idea which car object is which.
    We''ll fix this in a bit. For now, just click on the top car object in the list,
    and you should see a page where you can edit the details for that object:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 列表看起来并不是很有用。我们不知道哪个汽车对象是哪个。我们稍后会解决这个问题。现在，只需单击列表中的顶部汽车对象，您应该会看到一个页面，您可以在该页面上编辑该对象的详细信息：
- en: '![The Django admin app](img/00698_04_06.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![Django管理员应用程序](img/00698_04_06.jpg)'
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Django admin docs refer to this list as changelist. I will just call it
    the list view in this chapter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Django管理员文档将此列表称为更改列表。在本章中，我将称其为列表视图。
- en: Let's change the name of the car. I changed **Dodge Charger** to **My New Car
    Name**. Scroll to the bottom of the page after changing the name and click on
    save. To make sure that our changes were actually saved, open the home page for
    our app at `http://127.0.0.1:8000/` and you'll see that the car you edited will
    have the new name displayed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更改汽车的名称。我将**Dodge Charger**更改为**My New Car Name**。更改名称后，滚动到页面底部，然后单击保存。为了确保我们的更改确实已保存，打开我们应用程序的主页`http://127.0.0.1:8000/`，您会看到您编辑的汽车将显示新名称。
- en: 'Let''s try something more complicated—adding a new car! Click on the **ADD
    CAR** button on the right-hand side of the screen and fill in the details however
    you want. Just be sure to select the `is_available` checkbox; otherwise, the new
    car won''t show up on the home page. I filled up the form as shown in this screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试更复杂的事情——添加一辆新汽车！单击屏幕右侧的**ADD CAR**按钮，然后根据需要填写详细信息。只需确保选择`is_available`复选框；否则，新汽车将不会显示在主页上。我填写了如下截图所示的表单：
- en: '![The Django admin app](img/00698_04_07.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![Django管理员应用程序](img/00698_04_07.jpg)'
- en: 'I also downloaded an image for the car from Google Images and selected it for
    the **Image** field. Click on the save button and visit the home page again. The
    new car you added should show up at the end of the list:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我还从Google Images下载了一辆汽车的图片，并将其选中为**Image**字段。单击保存按钮，然后再次访问主页。您添加的新汽车应该会显示在列表的末尾：
- en: '![The Django admin app](img/00698_04_08.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Django管理员应用程序](img/00698_04_08.jpg)'
- en: As I mentioned at the start of this section, the power of the Django admin is
    one of the main reasons for Django's popularity. By now you should see why. In
    three lines, we have a complete and working, albeit not very pretty, content management
    system that the client can use to edit and add cars to their site.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在本节开始时提到的，Django管理员的强大是Django流行的主要原因之一。到目前为止，您应该明白为什么了。在三行代码中，我们有了一个完整且可用的内容管理系统，尽管不太美观，但客户可以用它来编辑和添加汽车到他们的网站。
- en: However, in its current form, the admin looks like a quick hack job. The client
    will probably not be very happy with this. They can't even see which car they
    are about to edit before the edit page opens up. Let's fix this first. We will
    come back to the code we just wrote for the admin in a bit.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在其当前形式下，管理员看起来像是一个快速的黑客工作。客户可能不会对此感到满意。他们甚至在打开编辑页面之前都看不到他们即将编辑的汽车是哪辆。让我们首先解决这个问题。稍后我们会回到刚刚为管理员编写的代码。
- en: Showing the car names
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示汽车名称
- en: 'If you remember in the previous chapter, we looked at the `__str__` method
    on a model class. I also said that Django uses this method wherever it needs to
    display a string representation of the model. Well, that''s exactly what the Django
    admin does in the list view for the `Car` model: it displays the string representation
    for it. Let''s make the list more user friendly by changing the string representation
    to something that the user can understand. In the `frontend/models.py` file, add
    this `__str__` method to the `Car` model class:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了模型类上的`__str__`方法。我还说过，Django在需要显示模型的字符串表示时会使用这个方法。嗯，这正是Django管理员在`Car`模型的列表视图中所做的：它显示了它的字符串表示。让我们通过将字符串表示更改为用户可以理解的内容来使列表更加用户友好。在`frontend/models.py`文件中，向`Car`模型类添加这个`__str__`方法：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s see what the list of `Car` objects looks now:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看现在`Car`对象的列表是什么样子的：
- en: '![Showing the car names](img/00698_04_09.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![显示汽车名称](img/00698_04_09.jpg)'
- en: That's a much better user experience as the user can now see which car they
    are about to edit.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更好的用户体验，因为用户现在可以看到他们即将编辑的汽车是哪一辆。
- en: Booking management
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预订管理
- en: 'Let''s leave the car admin section as it is for now and move on to the admin
    for `Booking` model. Every time a visitor to the site submits the **Book Now**
    form accessible from the car details page, we create a new `Booking` model record.
    We need a way to allow the client to look at these booking enquiries, filter them
    based on some criteria, and accept or reject them. Let''s look at how to do this.
    For a start, let''s make sure that our The `Booking` model shows up as an item
    in our admin panel. To do so, add these two lines to your `frontend/admin.py`
    file:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂时保持汽车管理员部分不变，转而进入`Booking`模型的管理员。每当网站访问者通过汽车详情页面上的**立即预订**表单提交时，我们都会创建一个新的`Booking`模型记录。我们需要一种方法来允许客户查看这些预订询问，根据一些标准对其进行筛选，并接受或拒绝它们。让我们看看如何做到这一点。首先，让我们确保我们的`Booking`模型显示为管理员面板中的一个项目。为此，请在`frontend/admin.py`文件中添加以下两行：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you take a look at the admin panel now at the URL `http://127.0.0.1:8000/admin/`,
    you should see that the `Booking` model has been added as a link. Open up the
    link and you should see a list page similar to the one for the `Car` model that
    we saw before. If you had submitted any booking requests, they should show up
    in the list. It's not pretty, but at least it works. Let's make it better. For
    one, we need to give the administrators more information about each booking enquiry.
    It will be good if we can show the customer's name, booking start and end dates,
    and whether the booking has already been approved.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在查看URL为`http://127.0.0.1:8000/admin/`的管理员面板，你应该会看到`Booking`模型已经被添加为一个链接。打开链接，你应该会看到一个类似于我们之前看到的`Car`模型的列表页面。如果你提交了任何预订请求，它们应该会显示在列表中。这不够美观，但至少它能用。让我们把它做得更好。首先，我们需要给管理员更多关于每个预订询问的信息。如果我们能显示客户的姓名、预订开始和结束日期，以及预订是否已经被批准，那就太好了。
- en: While we could use the `__str__` method again to create a string with all this
    information, so much information in one column isn't a pretty sight. Additionally,
    we would be missing out on the sorting capabilities that the Django admin provides
    us with for each model list page.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以再次使用`__str__`方法来创建一个包含所有这些信息的字符串，但是在一个列中显示这么多信息并不美观。此外，我们将错过Django管理员为每个模型列表页面提供的排序功能。
- en: Let's look at how we can display multiple fields from our model in the list
    view. Along the way, you will also learn a bit more about how the admin works
    internally.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在列表视图中显示我们模型的多个字段。在此过程中，你还将更多地了解管理员内部是如何工作的。
- en: A peek behind the curtain
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 幕后一瞥
- en: If you take a minute to think about what we have been able to achieve with just
    a couple of lines of code, you would probably be amazed at the power of the Django
    admin. How is this power achieved? Well, the answer to that is very complicated.
    Even I don't yet understand fully how the admin app works. It is a very complex
    piece of programming.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你花一分钟思考一下，我们只用几行代码就能实现的成就，你可能会对Django管理员的强大感到惊讶。这种力量是如何实现的呢？嗯，这个问题的答案非常复杂。即使我自己还没有完全理解管理员应用是如何工作的。这是一个非常复杂的编程部分。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Even though the admin app is quite complex, it is still Python code. If you're
    feeling adventurous or just generally bored one day, try to look at the source
    code for the admin app. It's in the `VIRTUAL_ENV/lib/python3.5/site-packages/django/contrib/admin`
    folder. Replace `VIRTUAL_ENV` with the folder that holds the virtual environments
    you create for your projects.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管管理员应用非常复杂，但它仍然是Python代码。如果你感到有冒险精神，或者只是某一天感到无聊，试着查看管理员应用的源代码。它在`VIRTUAL_ENV/lib/python3.5/site-packages/django/contrib/admin`文件夹中。用你为项目创建的虚拟环境的文件夹替换`VIRTUAL_ENV`。
- en: 'One of the main components of the admin system is the `ModelAdmin` class. Just
    as the `models.Model` class allows us to define complicated database models using
    a very simple class definition, the `ModelAdmin` class allows us to customize
    the admin interface for a model in great detail. Let''s see how we can use it
    to add extra fields to our list of booking enquiries. Change the `frontend/admin.py`
    file to match the following contents:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员系统的主要组件之一是`ModelAdmin`类。就像`models.Model`类允许我们使用非常简单的类定义来定义复杂的数据库模型一样，`ModelAdmin`类允许我们非常详细地定制模型的管理员界面。让我们看看如何使用它来向我们的预订询问列表添加额外的字段。修改`frontend/admin.py`文件以匹配以下内容：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now if you open up the admin list page for the `Booking` model, you should
    see something similar to this with all the important fields displayed:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你打开`Booking`模型的管理员列表页面，你应该会看到类似于这样的东西，所有重要的字段都显示出来：
- en: '![A peek behind the curtain](img/00698_04_11.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![幕后一瞥](img/00698_04_11.jpg)'
- en: This presents the user with a very nice tabular view. The client now sees all
    of the relevant details and has the ability to sort the table according to their
    needs. Django is also helpful enough to show the date values in a nice format.
    Let's look at what we have done here.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这为用户提供了一个非常好的表格视图。客户现在可以看到所有相关的细节，并且可以根据自己的需求对表格进行排序。Django还很贴心地以一种好看的格式显示日期值。让我们看看我们在这里做了什么。
- en: 'We first created a `ModelAdmin` subclass called `BookingModelAdmin`. We then
    configured the fields that we would like to show in the list page using the `list_display`
    attribute. Finally, we need to associate our `ModelAdmin` class with the `Booking`
    model class so that the admin can customize itself according to our requirements.
    We do that using the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建了一个名为`BookingModelAdmin`的`ModelAdmin`子类。然后，我们使用`list_display`属性配置我们想在列表页面显示的字段。最后，我们需要将我们的`ModelAdmin`类与`Booking`模型类关联起来，以便管理员可以根据我们的要求自定义自己。我们使用以下方法来做到这一点：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you look at how we register the `Car` model, it looks similar to the `Booking`
    model:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看一下我们如何注册`Car`模型，它看起来与`Booking`模型类似：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: That's because it is the same thing. If you don't provide a custom `ModelAdmin`
    subclass, Django uses the default options, which is what we see with the `Car`
    model.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为它是同样的东西。如果你没有提供自定义的`ModelAdmin`子类，Django会使用默认选项，这就是我们在`Car`模型中看到的。
- en: Improving the user experience
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改善用户体验
- en: 'While we have improved upon the base admin interface quite a bit just by showing
    the relevant fields on the list page, we can do more. Let''s look at some actions
    that an administrator might want to take for the booking enquiries that the site
    receives:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们通过在列表页面上显示相关字段来改进了基本的管理员界面，但我们可以做得更多。让我们看看管理员可能想要为网站收到的预订询问采取的一些操作：
- en: Viewing only the booking enquiries that have been approved or the ones that
    have not yet been approved
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只查看已批准的预订询问或尚未批准的预订询问
- en: Searching for a booking by customer name
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过客户姓名搜索预订
- en: Approving or not approving a booking enquiry quickly
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速批准或不批准预订询问
- en: Selecting multiple booking enquiry objects and sending e-mails to the customers
    about their approval/disapproval
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择多个预订询问对象，并向客户发送关于他们批准/不批准的电子邮件
- en: Filtering objects
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤对象
- en: 'For our first feature, we want to allow the user filtering on the displayed
    objects. There should be a filter on the page that allows them to see only bookings
    that have been approved or not approved. To do so, the Django admin provides you
    with a `list_filter` attribute on the `ModelAdmin` subclass. The `list_filter`
    attribute holds a list of fields that you can filter on. In our `BookingModelAdmin`
    class, add the following `list_filter` attribute:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个功能，我们希望允许用户对显示的对象进行筛选。页面上应该有一个筛选器，允许他们只查看已批准或未批准的预订。为此，Django管理在`ModelAdmin`子类上提供了`list_filter`属性。`list_filter`属性包含一个可以进行筛选的字段列表。在我们的`BookingModelAdmin`类中，添加以下`list_filter`属性：
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'That''s it. Once you have added this line to `BookingModelAdmin`, open up the
    bookings list page; on the right-hand side, you should see a new sidebar where
    you can select which bookings you want to view—only those that are approved or
    those that are not approved, or both. It should look similar to the following
    screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。一旦您将这行添加到`BookingModelAdmin`中，打开预订列表页面；在右侧，您应该看到一个新的侧边栏，您可以选择要查看的预订——只有已批准的或未批准的，或两者都有。它应该看起来类似于以下的屏幕截图：
- en: '![Filtering objects](img/00698_04_12.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![过滤对象](img/00698_04_12.jpg)'
- en: Searching for objects
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索对象
- en: 'Just as the Django admin has built-in support for filters, it also provides
    an easy-to-use way to add search. We want our client to be able to search bookings
    by the customer name field. To do so, add the `search_fields` attribute to the
    `BookingModelAdmin` class:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Django管理内置了对过滤器的支持一样，它还提供了一种易于使用的添加搜索的方法。我们希望客户能够通过客户名称字段搜索预订。为此，请将`search_fields`属性添加到`BookingModelAdmin`类中：
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That's it. Once you have added this attribute, you should see a search box at
    the top of the booking objects list. Type in a few sample queries and see how
    it works. If you have more than one field that you want to make searchable, you
    can add that to the list of `search_fields` as well.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。一旦您添加了这个属性，您应该在预订对象列表的顶部看到一个搜索框。输入一些示例查询，看看它是如何工作的。如果您有多个要进行搜索的字段，也可以将其添加到`search_fields`列表中。
- en: If you have more than one field name in the list, Django will do an OR search.
    This simply means that for a given search, ALL records that have at least ONE
    matching field value will show.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列表中有多个字段名称，Django将进行OR搜索。这只是意味着对于给定的搜索，具有至少一个匹配字段值的所有记录都将显示。
- en: Quick edit
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速编辑
- en: 'The third feature on our list is to allow admins to quickly mark a booking
    as approved/not approved. The Django admin provides another built-in feature that
    we can configure to get what we need. In your `BookingModelAdmin` class, add the
    `list_editable` attribute:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们列表中的第三个功能是允许管理员快速标记预订为批准/未批准。Django管理提供了另一个内置功能，我们可以配置以获得我们需要的功能。在您的`BookingModelAdmin`类中，添加`list_editable`属性：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you open the booking list page now, you will notice that instead of the icon
    that was shown in the `is_approved` column before, you now have a checkbox and
    a **Save** button added at the end of the list. You can select the checkboxes
    for bookings you want to approve and deselect it for the ones you want to disapprove,
    and click on **Save**. Django will then save your changes to multiple objects
    in one go.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在打开预订列表页面，您会注意到在以前的`is_approved`列中显示的图标已经被替换为复选框和**保存**按钮添加到列表的末尾。您可以选择要批准的预订的复选框，并取消选择要不批准的预订，并单击**保存**。然后Django将一次保存您对多个对象的更改。
- en: 'By now, our Booking list page looks similar to the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的预订列表页面看起来类似于以下的屏幕截图：
- en: '![Quick edit](img/00698_04_13.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![快速编辑](img/00698_04_13.jpg)'
- en: Admin actions
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理操作
- en: The last thing on our list of features is the ability for the user to select
    multiple booking enquiry objects and send out an e-mail to `customer_email` for
    each `Booking` object containing the approval status of the booking. For now,
    we will just print out the e-mail on the console to test this feature out. We
    will look at sending e-mails from Django in a later chapter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们功能列表中的最后一项是允许用户选择多个预订查询对象，并向每个包含预订批准状态的`Booking`对象的`customer_email`发送电子邮件。目前，我们将只是在控制台上打印出电子邮件来测试这个功能。我们将在后面的章节中查看如何从Django发送电子邮件。
- en: Until now, most of the editing that we did with the Django admin was on a per
    object basis. You select an object, edit it, then save it, and start over. Except
    for the last feature (quick edit), we have been editing objects one at a time.
    However, sometimes you want the ability to perform a common action on multiple
    objects, like we need with our e-mail feature. To implement features like these,
    the Django admin provides **Admin Actions**.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在Django管理中所做的大部分编辑都是基于每个对象的。您选择一个对象，编辑它，然后保存它，然后重新开始。除了最后一个功能（快速编辑）之外，我们一直在逐个编辑对象。然而，有时您希望能够对多个对象执行常见操作，就像我们在电子邮件功能中所需的那样。为了实现这样的功能，Django管理提供了**管理操作**。
- en: Admin actions are methods on the `ModelAdmin` class that are passed a list of
    objects that the user has selected. These methods can then take some action on
    each of these objects and return the user to the changelist page again.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 管理操作是`ModelAdmin`类上的方法，它们接收用户选择的对象列表。然后，这些方法可以对这些对象执行一些操作，然后将用户返回到更改列表页面。
- en: Note
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Actually, I am simplifying this a bit. Admin actions don't need to be methods
    on `ModelAdmin`. They can be standalone functions as well. However, it's usually
    a good programming practice to declare them in `ModelAdmin` that uses them, so
    that's how we will do it here. You can find more details in the documentation
    for admin actions at [https://docs.djangoproject.com/en/stable/ref/contrib/admin/actions/](https://docs.djangoproject.com/en/stable/ref/contrib/admin/actions/).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我稍微简化了一下。管理操作不需要是`ModelAdmin`上的方法。它们也可以是独立的函数。然而，通常最好的编程实践是在使用它们的`ModelAdmin`中声明它们，所以我们将在这里这样做。您可以在[https://docs.djangoproject.com/en/stable/ref/contrib/admin/actions/](https://docs.djangoproject.com/en/stable/ref/contrib/admin/actions/)的管理操作文档中找到更多详细信息。
- en: 'The Django admin by default provides one action: delete. If you open the **Action**
    drop-down at the top of the list of bookings, you should see this menu:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Django管理员默认提供了一个操作：删除。如果你打开预订列表顶部的**操作**下拉菜单，你应该会看到这个菜单：
- en: '![Admin actions](img/00698_04_14.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![管理员操作](img/00698_04_14.jpg)'
- en: 'To define an admin action, you first need to create a method on the `ModelAdmin`
    class and then add the name of the method to the `actions` attribute on the class.
    The `actions` attribute is a list like all the other attributes that we have seen
    till now. Modify the `BookingModelAdmin` to match the following code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义管理员操作，首先需要在`ModelAdmin`类上创建一个方法，然后将方法的名称添加到类的`actions`属性中。`actions`属性是一个列表，就像我们到目前为止看到的所有其他属性一样。修改`BookingModelAdmin`以匹配以下代码：
- en: '[PRE13]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s try it out before looking into what the code does. Refresh the `changelist`
    page for the Booking model and look at the **Action** drop-down. It should have
    a new option, **Email customers**:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在查看代码功能之前先试一下。刷新Booking模型的“changelist”页面，查看**操作**下拉菜单。应该会有一个新选项，**给顾客发送邮件**：
- en: '![Admin actions](img/00698_04_15.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![管理员操作](img/00698_04_15.jpg)'
- en: 'To test it out, select some booking objects from the list, select the **Email
    customer** action from the drop-down menu, and click on the **Go** button next
    to the drop-down. After the page loads, look at your console. You should see something
    similar to what''s shown here:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试它，从列表中选择一些预订对象，从下拉菜单中选择**给顾客发送邮件**操作，然后单击下拉菜单旁边的**Go**按钮。页面加载后，查看控制台。你应该会看到类似于这里显示的内容：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Let's look at what we've done here. As I said before, an admin action is just
    a method on the `ModelAdmin` class that accepts a `request` object and `queryset`
    as parameters, and then performs the required operation on `queryset`. Here, we
    create an e-mail body text for each booking object and print it to the console.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们在这里做了什么。正如我之前所说，管理员操作只是`ModelAdmin`类上的一个方法，接受`request`对象和`queryset`作为参数，然后对`queryset`执行所需的操作。在这里，我们为每个预订对象创建了一个电子邮件正文，并将其打印到控制台。
- en: UX improvements
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UX改进
- en: 'While the system is now good enough for our client to use, there is definitely
    room for improvement. For a start, the user isn''t given any feedback whether
    the **Email customers** action was performed. Let''s fix this first. Add this
    line to the end of the `email_customers` method:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然系统现在已经足够好让我们的客户使用，但肯定还有改进的空间。首先，用户没有得到任何关于**给顾客发送邮件**操作是否执行的反馈。让我们先解决这个问题。在`email_customers`方法的末尾添加这一行：
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Try using the e-mail action again. Now when the page reloads, you see a nice
    success message that assures the user that the action they wanted was completed.
    Small improvements in UX go a long way in helping the user navigate and successfully
    use your product.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试使用电子邮件操作。现在页面重新加载后，你会看到一个很好的成功消息，向用户保证他们想要的操作已经完成。在用户体验方面的小改进在帮助用户导航和成功使用产品方面可以走很长的路。
- en: Secondly, let's look at naming the action. For this action, Django comes up
    with a pretty good name—**Email customers**. It's simple and to the point. However,
    it's not as clear as it should be. It doesn't convey to the user what e-mail is
    being sent. In a larger system, the client could potentially send many types of
    e-mails, and our action name should be clear about which e-mail we are talking
    about.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，让我们来看看如何命名这个操作。对于这个操作，Django提供了一个相当不错的名称——**给顾客发送邮件**。这个名称简单明了。然而，它并不像应该的那样清晰。它没有向用户传达正在发送的电子邮件是什么。在一个更大的系统中，客户可能会发送多种类型的电子邮件，我们的操作名称应该清楚地说明我们在谈论哪一封电子邮件。
- en: 'In order to change the name of the admin action, we need to give the method
    an attribute called `short_description`. As methods are also objects in Python,
    this is pretty easy. Change the `BookingModelAdmin` class to match the following
    code. The new line to add is highlighted:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改变管理员操作的名称，我们需要给方法添加一个名为`short_description`的属性。由于在Python中方法也是对象，所以这很容易实现。修改`BookingModelAdmin`类以匹配以下代码。需要添加的新行已经标出：
- en: '[PRE16]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note that the new line (the last one) is not part of the function body. It''s
    indented at the same level as the function definition and is actually part of
    the class rather than the function. Refresh the list page and take a look at the
    action drop-down again:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，新的行（最后一行）不是函数体的一部分。它与函数定义的缩进级别相同，实际上是类的一部分，而不是函数的一部分。刷新列表页面，再次查看操作下拉菜单：
- en: '![UX improvements](img/00698_04_16.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![UX改进](img/00698_04_16.jpg)'
- en: Summary
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter probably had the least amount of code written for any chapter in
    this book. However, the functionality that we built here is probably more complicated
    than what we built in most chapters. I said at the start of the chapter that one
    of the reasons for the popularity of the Django framework is the admin app. I
    hope that by now you agree with me.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章可能是本书中编写的代码最少的一章。然而，我们在这里构建的功能可能比大多数章节中构建的功能更复杂。我在本章的开头说过，Django框架受欢迎的原因之一是管理员应用程序。我希望到现在为止你同意我的观点。
- en: With less than 20 lines of code, we were able to create a system that rivals
    most CMS systems out there and is still more tailored to our client's needs. Unlike
    most CMS systems, we don't treat `Car` and `Booking` objects as pages or nodes.
    In our system, they are first-class objects, each with its own fields and individual
    functionality. However, as far as the client is concerned, the admin works like
    it would for any CMS, probably easier, because there are no extra fields like
    there are in most CMS solutions.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 不到20行代码，我们就能够创建一个与大多数CMS系统相媲美的系统，而且仍然更符合我们客户的需求。与大多数CMS系统不同，我们不将`Car`和`Booking`对象视为页面或节点。在我们的系统中，它们是一流的对象，每个对象都有自己的字段和独特的功能。然而，就客户而言，管理员的工作方式与大多数CMS一样，可能更容易，因为没有像大多数CMS解决方案中那样有额外的字段。
- en: We have barely begun to scratch the surface of customizing the admin. There
    are a lot of features provided by the admin, catering to most scenarios required
    by an administration panel. All of this power is easily available to use by changing
    a few settings on `ModelAdmin`. In all the Django applications that I have developed,
    I have needed to create a custom administration panel only once. The Django admin
    is so customizable that you just configure it to match what you need.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎只是开始了解定制管理员的表面。管理员提供了许多功能，适用于管理面板所需的大多数场景。通过在“ModelAdmin”上更改一些设置，所有这些功能都很容易使用。在我开发的所有Django应用程序中，我只需要创建定制的管理面板一次。Django管理员是如此可定制，您只需配置它以满足您的需求。
- en: I highly recommend that you look at the documentation of the Django admin at
    [https://docs.djangoproject.com/en/stable/ref/contrib/admin/](https://docs.djangoproject.com/en/stable/ref/contrib/admin/).
    If you ever need to create an administration project for your web application,
    do check whether the admin provides the functionality that you want. More often
    than not, it does and saves you a ton of effort.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议您查看Django管理员的文档[https://docs.djangoproject.com/en/stable/ref/contrib/admin/]。如果您需要为您的Web应用程序创建管理项目，请检查管理员是否提供您想要的功能。往往情况是如此，并且可以节省大量精力。
