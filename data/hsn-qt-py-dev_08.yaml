- en: Using Frames, Labels, and Text Fields
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用框架、标签和文本字段
- en: The elements that will be covered in this chapter are the graphical components
    used to organize the application in the first stage of development. These components
    provide the ability to implement some windows to visualize the application, labels
    with text to inform the user about the application's features, and varieties of
    text fields to input the text and operate with text. We will start by describing
    the methods, and we will then implement them in the application at the end of
    the chapter. No modern application can do without these components. The user may
    want to have a perfect visualization, explain what things are or what they need
    to do, or maybe an event occurs. Text fields have the functionality required to
    work with various texts, such as short texts, long descriptions, visualizing text,
    loading text from files, copying/pasting text, other additional operations with text,
    and saving text to files from text fields. All of these are available with various
    different options.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖的内容是用于在开发第一阶段组织应用程序的图形组件。这些组件提供了实现一些用于可视化应用程序的窗口、带有文本的标签以通知用户应用程序的功能，以及各种文本字段以输入文本和操作文本的能力。我们将首先描述这些方法，然后在章节末尾在应用程序中实现它们。没有现代应用程序可以没有这些组件。用户可能希望有一个完美的可视化效果，解释事物是什么或需要做什么，或者可能发生某些事件。文本字段具有与各种文本一起工作的功能，例如短文本、长描述、可视化文本、从文件加载文本、复制/粘贴文本、对文本的其他附加操作，以及从文本字段保存文本到文件。所有这些都可以通过不同的选项获得。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Frames
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 框架
- en: Labels
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签
- en: Line edit fields
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行编辑字段
- en: Text edit fields
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本编辑字段
- en: QFrame
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QFrame
- en: 'This class from the `QtWidgets` module is the base class for widgets that can
    have frames. `QFrame` inherits the `QWidget` class. Frames can be used to combine
    some elements by similarity and/or used as parents of the components inside the
    frame. The second assertion is useful when you need to hide some elements, and,
    instead of hiding each of them individually, you can just hide the parent frame. The
    syntax to create the frame is as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 `QtWidgets` 模块的此类是具有框架的窗口的基类。`QFrame` 继承了 `QWidget` 类。框架可以用于通过相似性组合一些元素，并且/或者用作框架内组件的父元素。第二个断言在您需要隐藏某些元素时很有用，您只需隐藏父框架，而不是逐个隐藏它们。创建框架的语法如下：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Functions of QFrame
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QFrame 的功能
- en: '`QFrame` extends the `QWidget` class and provides the following functions.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`QFrame` 扩展了 `QWidget` 类并提供以下功能。'
- en: set
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These functions set the parameters/properties of the frame, such as style and
    width:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数设置框架的参数/属性，例如样式和宽度：
- en: '`frame.setFrameRect(QtCore.QRect)`: This sets the rectangle that the frame
    is drawn in.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.setFrameRect(QtCore.QRect)`: 这为此框架绘制的矩形设置。'
- en: '`frame.setFrameShadow(QtWidgets.QFrame.Shadow)`: This sets the shadow for this
    frame.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.setFrameShadow(QtWidgets.QFrame.Shadow)`: 这为此框架设置阴影。'
- en: '`frame.setFrameShape(QtWidgets.QFrame.Shape)`: This sets the shape of this
    frame.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.setFrameShape(QtWidgets.QFrame.Shape)`: 这为此框架设置形状。'
- en: '`frame.setFrameStyle(int)`: This sets the frame''s style. The available values
    are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.setFrameStyle(int)`: 这设置框架的样式。可用的值如下：'
- en: '`0`: No frame'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`: 无框架'
- en: '`1`: Box'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`: 盒子'
- en: '`2`: Panel'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2`: 面板'
- en: '`3`: Win panel'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3`: 窗口面板'
- en: '`4`/`5`: `HLine`/`VLine` and styled panel'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4`/`5`: 水平线/垂直线和样式面板'
- en: '`frame.setLineWidth(int)`: This sets the line width for this frame.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.setLineWidth(int)`: 这为此框架设置线宽。'
- en: '`frame.setMidLineWidth(int)`: This sets the middle line width for this frame.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.setMidLineWidth(int)`: 这为此框架设置中间线宽。'
- en: functional
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能
- en: 'These functions return the current values of the frame or change the functionality:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回框架的当前值或更改功能：
- en: '`frame.frameRect()`: This returns the rectangle of the `QtCore.QRect` type
    where the frame is drawn.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.frameRect()`: 这返回框架绘制的 `QtCore.QRect` 类型的矩形。'
- en: '`frame.frameShadow()`: This returns the frame shadow value from the frame style of
    the `QtWidgets.QFrame.Shadow` type.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.frameShadow()`: 这返回框架样式中的框架阴影值，类型为 `QtWidgets.QFrame.Shadow`。'
- en: '`frame.frameShape()`: This returns the frame shape value from the frame style of
    the `QtWidgets.QFrame.Shape` type.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.frameShape()`: 这返回框架样式中的框架形状值，类型为 `QtWidgets.QFrame.Shape`。'
- en: '`frame.frameStyle()`: This returns the frame style as an integer value.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.frameStyle()`: 这返回框架样式为整数值。'
- en: '`frame.frameWidth()`: This returns the width as an integer value of the frame
    that is drawn.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.frameWidth()`: 这返回绘制的框架的宽度为整数值。'
- en: '`frame.initStyleOption(QtWidgets.QStyleOptionFrame)`: This initializes style
    options with the values from the parameter.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.initStyleOption(QtWidgets.QStyleOptionFrame)`: 这使用参数中的值初始化样式选项。'
- en: '`frame.lineWidth()`: This returns the line width of the frame as an integer
    value.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.lineWidth()`: 这以整数值返回框架的线宽。'
- en: '`frame.midLineWidth()`: This returns the width as an integer of the middle
    line of this frame.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.midLineWidth()`: 这以整数值返回此框架中间线的宽度。'
- en: events
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'These functions relate to events, such as event handlers:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与事件相关，例如事件处理器：
- en: '`frame.changeEvent(QtCore.QEvent)`: This handles state changes of the frame.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.changeEvent(QtCore.QEvent)`: 这处理框架的状态变化。'
- en: '`frame.event(QtCore.QEvent)`: This receives events sent to the frame object
    and should return `true` if the event is recognized and processed.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame.event(QtCore.QEvent)`: 这接收发送到框架对象的的事件，如果事件被识别并处理，则应返回`true`。'
- en: QFrame example
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QFrame示例
- en: 'Let''s create simple frames in the application. Put two frames in the `Documents`
    tab of the main window by adding the following lines to the `u_style.py` file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在应用程序中创建简单的框架。通过在`u_style.py`文件中添加以下行，将两个框架放入主窗口的“文档”标签页：
- en: 'Add the `UFrame` class that inherits `QtWidgets.QFrame` to the `u_style.py` file:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将继承自`QtWidgets.QFrame`的`UFrame`类添加到`u_style.py`文件中：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this class, we use the `setStyleSheet()` method to set the background color
    of the frame. Now, we need to add some lines to the `u_app.py` file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，我们使用`setStyleSheet()`方法设置框架的背景颜色。现在，我们需要在`u_app.py`文件中添加一些行。
- en: 'Add the new imports to the import section of the `u_app.py` file:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的导入添加到`u_app.py`文件的导入部分：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When we use some components in the future, we need to add the created classes
    of the `u_style.py` file to the import section of the main application file.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在未来使用某些组件时，我们需要将`u_style.py`文件中创建的类添加到主应用程序文件的导入部分。
- en: 'Now, add the frames and layout for them in the `UApp` class in the `u_app.py`
    file:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`u_app.py`文件中的`UApp`类中添加框架及其布局：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Two frames have been created and arranged with a grid layout. Now we can see
    two different frames inside the `Documents` tab of the main application:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 两个框架已经创建并按照网格布局排列。现在我们可以在主应用程序的“文档”标签页中看到两个不同的框架：
- en: '![](img/71e6fb28-b09e-4f1a-b94f-184bd0791119.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/71e6fb28-b09e-4f1a-b94f-184bd0791119.png)'
- en: Now, let's move on to the `QLabel` class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续介绍`QLabel`类。
- en: QLabel
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLabel
- en: 'The label is a widget that provides a text or image display in the GUI application. **`QLabel`**
    inherits the `QFrame` class. Labels demonstrate or visualize some information
    in the GUI app. An image or a movie, or information for the user as text can be
    displayed on a label. The syntax to create a label in the application''s code
    is as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 标签是一个提供文本或图像显示的GUI应用程序中的小部件。**`QLabel`**继承自`QFrame`类。标签在GUI应用程序中演示或可视化一些信息。可以在标签上显示图像或电影，或以文本形式向用户显示信息。在应用程序代码中创建标签的语法如下：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Functions of the QLabel
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLabel的功能
- en: '`QLabel` extends the `QWidget` and `QFrame` classes and provides the following
    functions.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`QLabel`扩展了`QWidget`和`QFrame`类，并提供以下功能。'
- en: set
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These functions set the parameters/properties of the label, such as text and
    alignment:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数设置标签的参数/属性，例如文本和对齐方式：
- en: '`label.setAlignment(QtCore.Qt.Alignment)`: This sets the alignment of the contents
    in the label.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setAlignment(QtCore.Qt.Alignment)`: 这设置标签中内容的对齐方式。'
- en: '`label.setBuddy(QtWidgets.QWidget)`: This sets the label''s buddy as specified
    in the parameter. The buddy mechanism is when the user presses the label''s shortcut
    key, the keyboard focus will be transferred to the label’s buddy widget.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setBuddy(QtWidgets.QWidget)`: 这将标签的伙伴设置为参数中指定的。伙伴机制是当用户按下标签的快捷键时，键盘焦点将转移到标签的伙伴小部件。'
- en: '`label.setIndent(int)`: This sets the label''s text indent in pixels.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setIndent(int)`: 这设置标签文本的缩进（以像素为单位）。'
- en: '`label.setMargin(int)`: This sets the distance between the innermost pixel
    of the frame and the outermost pixel of the contents of the label.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setMargin(int)`: 这设置框架最内层像素和标签内容最外层像素之间的距离。'
- en: '`label.setMovie(QtGui.QMovie)`: This sets the movie that will be displayed
    on this label.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setMovie(QtGui.QMovie)`: 这设置将在标签上显示的电影。'
- en: '`label.setNum(float**)**`: This sets a textual representation of float numbers.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setNum(float**)`: 这设置浮点数的文本表示。'
- en: '`label.setNum(int)`: This sets a textual representation of integer numbers.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setNum(int)`: 这设置整数的文本表示。'
- en: '`label.setOpenExternalLinks(bool)`: If this is set to `True`, the label will
    open external links automatically.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setOpenExternalLinks(bool)`: 如果设置为`True`，则标签将自动打开外部链接。'
- en: '`label.setPicture(QtGui.QPicture)`: This sets the picture that will be displayed
    on the label.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setPicture(QtGui.QPicture)`: 这设置将在标签上显示的图片。'
- en: '`label.setPixmap(QtGui.QPixmap)`: This sets the label''s pixmap.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setPixmap(QtGui.QPixmap)`: 这设置标签的位图。'
- en: '`label.setScaledContents(bool)`: If this is set to `True`, this label will
    scale the contents to fill all the available space.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setScaledContents(bool)`: 如果设置为`True`，则此标签将缩放内容以填充所有可用空间。'
- en: '`label.setSelection(start, length)`: This sets the start position of the text
    (the first parameter, an integer) and the length (the second parameter, also an
    integer).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setSelection(start, length)`: 这将设置文本的起始位置（第一个参数，一个整数）和长度（第二个参数，也是一个整数）。'
- en: '`label.setText(str)`: This sets text for this label in the Unicode string type.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setText(str)`: 这以Unicode字符串类型为此标签设置文本。'
- en: '`label.setTextFormat(QtCore.Qt.TextFormat)`: This sets the label''s text format
    according to the specified parameter.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setTextFormat(QtCore.Qt.TextFormat)`: 这根据指定的参数设置标签的文本格式。'
- en: '`label.setTextInteractionFlags(QtCore.Qt.TextInteractionFlags)`: This sets
    how the label will interact with user input if it displays text.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setTextInteractionFlags(QtCore.Qt.TextInteractionFlags)`: 这将设置标签如何与用户输入交互，如果它显示文本的话。'
- en: '`label.setWordWrap(bool)`: If this is set to `True`, the text will be wrapped
    to the width of the label.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.setWordWrap(bool)`: 如果设置为`True`，则文本将换行到标签的宽度。'
- en: has
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有
- en: 'The following are the functions that return a Boolean value (`bool`) related
    to the label states:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与标签状态相关的返回布尔值（`bool`）的函数：
- en: '`label.hasScaledContents()`: This returns `True` if the label allows us to
    scale the contents to fill all the available space.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.hasScaledContents()`: 如果标签允许我们缩放内容以填充所有可用空间，则返回`True`。'
- en: '`label.hasSelectedText()`: This returns `True` if some or all of the label''s
    text has been selected.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.hasSelectedText()`: 如果标签的某些或全部文本已被选中，则返回`True`。'
- en: functional
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that are related to the returns of the current values of
    the label or changes of the functionality:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与标签当前值的返回或功能更改相关的函数：
- en: '`label.alignment()`: This returns the alignment of the `QtCore.Qt.Alignment`
    type for the elements in the label.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.alignment()`: 这返回标签中元素的`QtCore.Qt.Alignment`类型的对齐方式。'
- en: '`label.buddy()`: This returns the label''s buddy of the `QtWidgets.QWidget`
    type.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.buddy()`: 这返回标签的`QtWidgets.QWidget`类型的伙伴。'
- en: '`label.clear()`: This clears the content of the label.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.clear()`: 这清除标签的内容。'
- en: '`label.focusNextPrevChild(bool)`: This returns `True` if it can find a new
    label that gives the keyboard focus. If the parameter is `True` it searches forward,
    and if it''s `False`, it searches backward.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.focusNextPrevChild(bool)`: 如果它可以找到一个新标签来提供键盘焦点，则返回`True`。如果参数为`True`，则向前搜索，如果为`False`，则向后搜索。'
- en: '`label.heightForWidth(width)`: This returns the preferred height for this label,
    given the `width` parameter as an integer.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.heightForWidth(width)`: 这返回给定整数参数`width`的此标签的首选高度。'
- en: '`label.indent()`: This returns the label''s text indent in pixels.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.indent()`: 这返回标签的文本缩进（以像素为单位）。'
- en: '`label.margin()`: This returns the distance between the innermost pixel of
    the frame and the outermost pixel of the contents of this label.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.margin()`: 这返回此标签的框架最内层像素与内容最外层像素之间的距离。'
- en: '`label.minimumSizeHint()`: This returns the minimum size of hint of the `QtCore.QSize`
    type that''s available for this label.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.minimumSizeHint()`: 这返回可用于此标签的`QtCore.QSize`类型的最小尺寸提示。'
- en: '`label.movie()`: This returns the pointer to the label''s movie of the `QtGui.QMovie`
    type.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.movie()`: 这返回指向标签的`QtGui.QMovie`类型的电影的指针。'
- en: '`label.openExternalLinks()`: This returns `True` if the label should open links
    automatically.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.openExternalLinks()`: 如果标签应该自动打开链接，则返回`True`。'
- en: '`label.picture()`: This returns the label’s picture of the `QtGui.QPicture`
    type.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.picture()`: 这返回标签的`QtGui.QPicture`类型的图片。'
- en: '`label.pixmap()`: This returns the label''s pixmap of the `QtGui.QPixmap` type.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.pixmap()`: 这返回标签的`QtGui.QPixmap`类型的位图。'
- en: '`label.selectedText()`: This returns the Unicode string as the selected text
    of this label.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.selectedText()`: 这返回作为此标签选中文本的Unicode字符串。'
- en: '`label.selectionStart()`: This returns the index of the first selected character
    of this label, or, if no text is selected, it returns `-1`.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.selectionStart()`: 这返回此标签第一个选中字符的索引，如果没有文本被选中，则返回`-1`。'
- en: '`label.text()`: This returns the label''s text as a Unicode string.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.text()`: 这返回标签的文本作为Unicode字符串。'
- en: '`label.textFormat()`: This returns the formatting for the label''s text in
    the `QtCore.Qt.TextFormat` type.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.textFormat()`: 这个函数返回标签文本的 `QtCore.Qt.TextFormat` 类型的格式。'
- en: '`label.textInteractionFlags()`: This returns text interaction flags for this
    label of the `QtCore.Qt.TextInteractionFlags` type.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.textInteractionFlags()`: 这个函数返回此标签的 `QtCore.Qt.TextInteractionFlags`
    类型的文本交互标志。'
- en: '`label.wordWrap()`: This returns `True` if the text in the label is wrapped
    to the width of the label.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.wordWrap()`: 如果标签中的文本被换行到标签的宽度，则此函数返回 `True`。'
- en: events
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'These functions are related to events, and include event handlers:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与事件相关，包括事件处理程序：
- en: '`label.changeEvent(QtCore.QEvent)`: This handles state changes of the label.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.changeEvent(QtCore.QEvent)`: 这个函数处理标签的状态变化。'
- en: '`label.contextMenuEvent(QtGui.QContextMenuEvent)`: This event handler receives
    context menu events.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.contextMenuEvent(QtGui.QContextMenuEvent)`: 这个事件处理程序接收上下文菜单事件。'
- en: '`label.event(QtCore.QEvent)`: This receives events sent to the object and should
    return `True` if the event is recognized and processed.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.event(QtCore.QEvent)`: 这个函数接收发送给对象的事件，如果事件被识别并处理，则应返回 `True`。'
- en: '`label.keyPressEvent(QtGui.QKeyEvent)`: This event handler receives keypress
    events for this label with the event passed in as the parameter.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.keyPressEvent(QtGui.QKeyEvent)`: 这个事件处理程序接收传递给参数的按键事件，用于此标签。'
- en: '`label.focusOutEvent(QtGui.QFocusEvent)`: This event handler receives the label''s
    keyboard focus events, which are passed in as the `event` parameter when the focus
    is lost.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.focusOutEvent(QtGui.QFocusEvent)`: 这个事件处理程序接收标签的键盘焦点事件，当失去焦点时，作为 `event`
    参数传递。'
- en: '`label.focusInEvent(QtGui.QFocusEvent)`: This event handler receives the label''s
    keyboard focus events, which are passed in as the event parameter when the focus
    is received.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.focusInEvent(QtGui.QFocusEvent)`: 这个事件处理程序接收标签的键盘焦点事件，当获得焦点时，作为事件参数传递。'
- en: '`label.mouseMoveEvent(QtGui.QMouseEvent)`: This event handler receives mouse-move
    events for this label with the event passed in as the parameter.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.mouseMoveEvent(QtGui.QMouseEvent)`: 这个事件处理程序接收传递给参数的鼠标移动事件，用于此标签。'
- en: '`label.mousePressEvent(QtGui.QMouseEvent)`: This event handler receives mouse-press
    events for this label with the event passed in as the parameter.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.mousePressEvent(QtGui.QMouseEvent)`: 这个事件处理程序接收传递给参数的鼠标按下事件，用于此标签。'
- en: '`label.mouseReleaseEvent(QtGui.QMouseEvent)`: This event handler receives mouse-release
    events for this label with the event passed in as the parameter.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.mouseReleaseEvent(QtGui.QMouseEvent)`: 这个事件处理程序接收传递给参数的鼠标释放事件，用于此标签。'
- en: '`label.paintEvent(QtGui.QPaintEvent)`: This event handler receives paint events
    for this label with the event passed in as the parameter.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.paintEvent(QtGui.QPaintEvent)`: 这个事件处理程序接收传递给参数的绘制事件，用于此标签。'
- en: signals
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'These are the available signals of the `QLabel` class:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 `QLabel` 类的可用信号：
- en: '`label.linkActivated(str)`: This signal is emitted when the user clicks on
    a link, with the URL referred to by the anchor that''s passed to the parameter.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.linkActivated(str)`: 当用户点击链接时，会发出此信号，URL 由传递给参数的锚点引用。'
- en: '`label.linkHovered(str)`: This signal is emitted when the user hovers over
    a link, with the URL passed to the parameter.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`label.linkHovered(str)`: 当用户将鼠标悬停在链接上时，会发出此信号，URL 通过参数传递。'
- en: QLabel example
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLabel 示例
- en: 'The label will be used in the application more than once. This is only a short
    demonstration. Now we have a reason to create a class with fonts in the `u_style.py`
    file. These fonts will be used with further components:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 标签将在应用程序中使用多次。这只是一个简短的演示。现在我们有一个理由在 `u_style.py` 文件中创建一个带有字体的类。这些字体将用于后续的组件：
- en: 'Insert the `UFonts` class at the beginning of the `u_style.py` file:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `u_style.py` 文件的开始处插入 `UFonts` 类：
- en: '[PRE5]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This class will be used to change the text font of a widget or a graphical element.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此类将用于更改小部件或图形元素的文本字体。
- en: 'Add the `ULabel` class to the `u_style.py` file:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `ULabel` 类添加到 `u_style.py` 文件中：
- en: '[PRE6]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `setFont()` method sets the font of the label using the `UFonts` class.
    Now, we need to add some lines to the `u_app.py` file.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`setFont()` 方法使用 `UFonts` 类设置标签的字体。现在，我们需要在 `u_app.py` 文件中添加一些行。'
- en: 'Add the created `ULabel` class to the `import` section of the `u_app.py` file:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将创建的 `ULabel` 类添加到 `u_app.py` 文件的 `import` 部分：
- en: '[PRE7]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the lines with the label inside the `UApp` class:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `UApp` 类内部添加包含标签的行：
- en: '[PRE8]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We''ve set the label instance with text and alignment. Add this label to the
    grid layout of the second frame. Now, we can run the `u_app.py` file, and the
    result looks like this (with the label on the right-hand side):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置了带有文本和对齐方式的标签实例。将此标签添加到第二个框架的网格布局中。现在，我们可以运行 `u_app.py` 文件，结果如下（标签位于右侧）：
- en: '![](img/0023b8cc-b702-4faf-ae13-285efc03706a.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0023b8cc-b702-4faf-ae13-285efc03706a.png)'
- en: Now, let's move on to the `QLineEdit` class.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续介绍 `QLineEdit` 类。
- en: QLineEdit
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLineEdit
- en: 'The line edit field provides a one-line text editor. The `QLineEdit` class
    can be used to create one-line user input fields for entering plain text, such
    as usernames, emails, and passwords. Also, some other kinds of text input fields
    provide information that is more convenient to use separately from another piece
    of text and have some special purpose. The line edit field is commonly used with
    user forms in applications. The declaration syntax of the line edit field in the
    application is as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 行编辑字段提供了一行文本编辑器。`QLineEdit` 类可用于创建一行用户输入字段，用于输入纯文本，例如用户名、电子邮件和密码。此外，一些其他类型的文本输入字段提供的信息更便于单独使用，并且具有一些特殊用途。行编辑字段通常与应用程序中的用户表单一起使用。在应用程序中，行编辑字段的声明语法如下：
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Functions of QLineEdit
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLineEdit 的功能
- en: The `QLineEdit` class inherits the `QWidget` class and improves functionality
    with the following functions.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`QLineEdit` 类继承自 `QWidget` 类，并通过以下功能增强了功能。'
- en: add
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: add
- en: 'These functions add the elements or actions to the line `edit_field`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数向行 `edit_field` 添加元素或操作：
- en: '`line_edit.addAction(QtWidgets.QAction, QtWidgets.QLineEdit.ActionPosition)`:
    This adds an action (the first parameter) to the list of actions at a certain
    position (the second parameter).'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.addAction(QtWidgets.QAction, QtWidgets.QLineEdit.ActionPosition)`:
    这将在特定位置（第二个参数）将操作（第一个参数）添加到操作列表中。'
- en: '`line_edit.addAction(QtGui.QIcon, QtWidgets.QLineEdit.ActionPosition)`: This
    adds a new action with an icon (the first parameter) at a certain position (the
    second parameter).'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.addAction(QtGui.QIcon, QtWidgets.QLineEdit.ActionPosition)`: 这将在特定位置（第二个参数）添加带有图标（第一个参数）的新操作。'
- en: set
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These functions set parameters/properties to the line edit field, such as text,
    alignment, and functionality:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数设置行编辑字段的参数/属性，例如文本、对齐方式和功能：
- en: '`line_edit.setAlignment(QtCore.Qt.Alignment)`: This sets the alignment of the
    content of the line edit field.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setAlignment(QtCore.Qt.Alignment)`: 这将设置行编辑字段内容的对齐方式。'
- en: '`line_edit.setClearButtonEnabled(bool)`: If this parameter is `True`, it sets
    the line edit field to display a clear button when it''s not empty. If the parameter
    is `False`, a clear button will not be displayed in the line edit field.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setClearButtonEnabled(bool)`: 如果此参数为 `True`，则将行编辑字段设置为在非空时显示清除按钮。如果参数为
    `False`，则行编辑字段中不会显示清除按钮。'
- en: '`line_edit.setCompleter(QtWidgets.QCompleter)`: This sets the line edit field
    to autocomplete from the completer that is passed in the parameter.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setCompleter(QtWidgets.QCompleter)`: 这将行编辑字段设置为从传递给参数的补全器自动完成。'
- en: '`line_edit.setCursorMoveStyle(QtCore.Qt.CursorMoveStyle)`: This sets the movement
    style of the cursor of this line edit field.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setCursorMoveStyle(QtCore.Qt.CursorMoveStyle)`: 这将设置此行编辑字段的光标移动样式。'
- en: '`line_edit.setCursorPosition(int)`: This sets the position of the cursor for
    this line edit field.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setCursorPosition(int)`: 这将为该行编辑字段设置光标位置。'
- en: '`line_edit.setDragEnabled(bool)`: If this parameter is `True`, it enables dragging
    for this field.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setDragEnabled(bool)`: 如果此参数为 `True`，则为此字段启用拖动。'
- en: '`line_edit.setEchoMode(QtWidgets.QLineEdit.EchoMode)`: This sets echo mode
    for the line edit field. The available parameters are as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setEchoMode(QtWidgets.QLineEdit.EchoMode)`: 这将为行编辑字段设置回显模式。可用参数如下：'
- en: '`QtWidgets.QLineEdit.Normal`: `0`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QLineEdit.Normal`: `0`'
- en: '`QtWidgets.QLineEdit.NoEcho`: `1`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QLineEdit.NoEcho`: `1`'
- en: '`QtWidgets.QLineEdit.Password`: `2`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QLineEdit.Password`: `2`'
- en: '`QtWidgets.QLineEdit.PasswordEchoOnEdit`: `3`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QLineEdit.PasswordEchoOnEdit`: `3`'
- en: '`line_edit.setFrame(bool)`: If this parameter is `True`, it sets the frame
    around the line edit field.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setFrame(bool)`: 如果此参数为 `True`，则将行编辑字段的边框设置为。'
- en: '`line_edit.setInputMask(str)`: This sets an input mask for this line edit field.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setInputMask(str)`: 这将为该行编辑字段设置输入掩码。'
- en: '`line_edit.setMaxLength(int)`: This sets the maximum length of the characters
    for this field.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setMaxLength(int)`: 这将设置此字段的字符最大长度。'
- en: '`line_edit.setModified(bool)`: If this parameter is `True`, it sets the line
    edit content as modified or changed/edited.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setModified(bool)`: 如果此参数为`True`，则将行编辑内容设置为已修改或更改/编辑。'
- en: '`line_edit.setPlaceholderText("Placeholder text")`: This sets the placeholder
    text of the line edit field, which is the text that will be displayed if the field
    will be empty.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setPlaceholderText("Placeholder text")`: 这将设置行编辑字段的占位符文本，即如果字段为空时将显示的文本。'
- en: '`line_edit.setReadOnly(bool)`: If the parameter is `True`, this sets the line
    edit field in read-only mode so that the content inside cannot be edited by the
    user.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setReadOnly(bool)`: 如果参数为`True`，则将行编辑字段设置为只读模式，以便用户无法编辑其中的内容。'
- en: '`line_edit.setSelection(start, length)`: This selects text in the line edit
    field on the basis of the `start` parameter (the first parameter) and `length` (the
    second parameter).'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setSelection(start, length)`: 这根据`start`参数（第一个参数）和`length`参数（第二个参数）在行编辑字段中选择文本。'
- en: '`line_edit.setText("Text in this field")`: This sets the text that will be
    displayed with this line edit field.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setText("Text in this field")`: 这将设置与该行编辑字段一起显示的文本。'
- en: '`line_edit.setTextMargins(QtCore.QMargins)`: This sets the margins that will
    be around the text inside the frame of the line edit field.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setTextMargins(QtCore.QMargins)`: 这将设置围绕行编辑字段框架内部文本的边距。'
- en: '`line_edit.setTextMargins(left, top, right, bottom)`: This sets the margins
    that will be around the text inside the frame of the line edit field. Each parameter
    is an integer value.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setTextMargins(left, top, right, bottom)`: 这将设置围绕行编辑字段内部文本的边距。每个参数都是一个整数值。'
- en: '`line_edit.setValidator(QtGui.QValidator)`: This sets the validator, specified
    in the parameter, of the `QtGui.QValidator` type, which means that this line edit
    field will only accept the input that this validator will accept.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.setValidator(QtGui.QValidator)`: 这将设置参数中指定的`QtGui.QValidator`类型的验证器，这意味着此行编辑字段将只接受验证器接受的输入。'
- en: edit
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: edit
- en: 'These functions make some changes to the current content of the line edit field,
    such as clear, undo, and redo:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数对当前行编辑字段的内容进行一些更改，例如清除、撤销和重做：
- en: '`line_edit.clear()`: This clears the content of the line edit field.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.clear()`: 这将清除行编辑字段的内容。'
- en: '`line_edit.copy()`: This copies the selected text of the line edit field to
    the clipboard.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.copy()`: 这将复制行编辑字段中选定的文本到剪贴板。'
- en: '`line_edit.cut()`: This copies the selected text of the line edit field to
    the clipboard and deletes it from the field.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.cut()`: 这将复制行编辑字段中选定的文本到剪贴板，并从字段中删除它。'
- en: '`line_edit.paste()`: This inserts the clipboard''s text at the cursor position
    of the line edit, and all the selected text will be deleted.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.paste()`: 这将在行编辑的光标位置插入剪贴板中的文本，并删除所有选定的文本。'
- en: '`line_edit.redo()`: This redoes the last operation, if available.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.redo()`: 如果可用，则重做最后一个操作。'
- en: '`line_edit.undo()`: This undoes the last operation, if available.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.undo()`: 如果可用，则撤销最后一个操作。'
- en: '`line_edit.selectAll()`: This selects all the text in the line edit field and
    moves the cursor to the end.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.selectAll()`: 这将选择行编辑字段中的所有文本，并将光标移动到末尾。'
- en: has/is
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: has/is
- en: 'These functions return a Boolean value (`bool`) related to the line edit states;
    for example, to check the availability of the undo function:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回与行编辑状态相关的布尔值（`bool`），例如，检查撤销功能是否可用：
- en: '`line_edit.hasAcceptableInput()`: This returns `True` if the input satisfies
    the `inputMask` and the validator.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.hasAcceptableInput()`: 如果输入满足`inputMask`和验证器，则返回`True`。'
- en: '`line_edit.hasFrame()`: This returns `True` if the line edit field has a frame
    around itself.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.hasFrame()`: 如果行编辑字段周围有框架，则返回`True`。'
- en: '`line_edit.hasSelectedText()`: This returns `True` if the line edit has the
    selected text.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.hasSelectedText()`: 如果行编辑有选定的文本，则返回`True`。'
- en: '`line_edit.isClearButtonEnabled()`: This returns `True` if the line edit field
    displays a clear button when it''s not empty.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.isClearButtonEnabled()`: 如果行编辑字段在非空时显示清除按钮，则返回`True`。'
- en: '`line_edit.isModified()`: This returns `True` if the content of the line edit
    was modified.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.isModified()`: 如果行编辑的内容已被修改，则返回`True`。'
- en: '`line_edit.isReadOnly()`: This returns `True` if the line edit is in read-only
    mode, so that content inside it cannot be edited by the user.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.isReadOnly()`: 如果行编辑处于只读模式，则此函数返回`True`，因此用户无法编辑其中的内容。'
- en: '`line_edit.isRedoAvailable()`: This returns `True` if the redo functionality
    is available for the content of the line edit field, or if content was previously
    undone.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.isRedoAvailable()`: 如果行编辑字段的内容具有重做功能，或者内容之前已被撤销，则返回 `True`。'
- en: '`line_edit.isUndoAvailable()`: This returns `True` if the undo functionality
    is available for the content of the line edit field or if content was previous
    edited/changed.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.isUndoAvailable()`: 如果行编辑字段的内容具有撤销功能，或者内容之前已被编辑/更改，则返回 `True`。'
- en: functional
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These functions return the current values of the line edit field and change
    it to the functionality:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回行编辑字段的当前值，并将其更改为以下功能：
- en: '`line_edit.alignment()`: This returns the alignment of the text in the line
    edit field of the `QtCore.Qt.Alignment` type.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.alignment()`: 这返回了行编辑字段中文本的对齐方式，为 `QtCore.Qt.Alignment` 类型。'
- en: '`line_edit.backspace()`: If no text in the line edit field has been selected,
    the character to the left of the cursor will be deleted and the cursor will move one
    position to the left. If any text is selected, the selected text will be deleted
    and the cursor will move to the beginning of the selected text.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.backspace()`: 如果行编辑字段中没有选择文本，则将删除光标左侧的字符，并将光标向左移动一个位置。如果选择了任何文本，则将删除所选文本，并将光标移动到所选文本的开头。'
- en: '`line_edit.completer()`: This returns the current completer for the text in
    the line edit of the `QtWidgets.QCompleter` type.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.completer()`: 这返回了行编辑字段中文本的当前补全器，为 `QtWidgets.QCompleter` 类型。'
- en: '`line_edit.createStandardContextMenu()`: This creates a standard context menu
    that will be displayed when the user right-clicks on the line edit field.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.createStandardContextMenu()`: 这创建了一个标准上下文菜单，当用户在行编辑字段上右键单击时将显示。'
- en: '`line_edit.cursorBackward(bool,steps)`: This moves the cursor back by characters
    (the second parameter). If the first parameter is `True`, each character will
    be selected; otherwise, the selection will be cleared.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.cursorBackward(bool,steps)`: 这通过字符（第二个参数）向后移动光标。如果第一个参数为 `True`，则每个字符都将被选择；否则，选择将被清除。'
- en: '`line_edit.cursorForward(bool, steps)`: This moves the cursor forward by characters
    (the second parameter). If the first parameter is `True`, each character will
    be selected; otherwise, the selection will be cleared.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.cursorForward(bool, steps)`: 这通过字符（第二个参数）移动光标。如果第一个参数为 `True`，则每个字符都将被选择；否则，选择将被清除。'
- en: '`line_edit.cursorMoveStyle()`: This returns the movement style of the cursor
    for this line edit field of the `QtCore.Qt.CursorMoveStyle` type.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.cursorMoveStyle()`: 这返回了此行编辑字段光标的移动方式，为 `QtCore.Qt.CursorMoveStyle`
    类型。'
- en: '`line_edit.cursorPosition()`: This returns the current cursor position as an
    integer value inside the line edit field.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.cursorPosition()`: 这返回了行编辑字段中当前光标位置的整数值。'
- en: '`line_edit.cursorPositionAt(QtCore.QPoint)`: This returns the cursor position
    for the point specified in the parameter.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.cursorPositionAt(QtCore.QPoint)`: 这返回了参数中指定的点的光标位置。'
- en: '`line_edit.cursorRect()`: This returns a rectangle of the `QtCore.QRect` type
    where the cursor of the line edit is placed.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.cursorRect()`: 这返回了行编辑字段光标放置的 `QtCore.QRect` 类型的矩形。'
- en: '`line_edit.cursorWordBackward(bool)`: This moves the cursor backward by one
    word. If the parameter is `True`, the word will be selected.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.cursorWordBackward(bool)`: 这通过一个单词移动光标。如果参数为 `True`，则单词将被选择。'
- en: '`line_edit.cursorWordForward(bool)`: This moves the cursor forward by one word.
    If the parameter is `True`, the word will be selected.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.cursorWordForward(bool)`: 这通过一个单词移动光标。如果参数为 `True`，则单词将被选择。'
- en: '`line_edit.del_()`: If the line edit field has no text selected, it will delete
    the character to the right of the cursor. If text is selected, the cursor will
    move to the beginning of the selection and the selected text will be deleted.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.del_()`: 如果行编辑字段没有选择文本，它将删除光标右侧的字符。如果选择了文本，光标将移动到选择的开头，并删除所选文本。'
- en: '`line_edit.deselect()`: This deselects the selected text.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.deselect()`: 这取消选择了所选文本。'
- en: '`line_edit.displayText()`: This returns the displayed text.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.displayText()`: 这返回了显示的文本。'
- en: '`line_edit.dragEnabled()`: This returns `True` if dragging for this line edit
    field is enabled.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.dragEnabled()`: 如果为此行编辑字段启用了拖动，则返回 `True`。'
- en: '`line_edit.echoMode()`: This returns the echo mode for this line edit field
    of the `QtWidgets.QLineEdit.EchoMode` type.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.echoMode()`: 这返回了此行编辑字段的 `QtWidgets.QLineEdit.EchoMode` 类型的回显模式。'
- en: '`line_edit.end(bool)`: This moves the text cursor to the end of the line edit
    field.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.end(bool)`: 这会将文本光标移动到行编辑字段的末尾。'
- en: '`line_edit.getTextMargins()`: This returns the line edit text margins for the
    left, top, right, and bottom sides.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.getTextMargins()`: 这返回行编辑文本的左、上、右和下边距。'
- en: '`line_edit.home(bool)`: This moves the cursor to the beginning of the line
    edit field. If the parameter is `True`, the text will be selected; otherwise,
    any selected text will be unselected.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.home(bool)`: 这会将光标移动到行编辑字段的开始处。如果参数为 `True`，则选择文本；否则，取消选择任何选定的文本。'
- en: '`line_edit.inputMask()`: This returns the validation input mask of the line
    edit field.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.inputMask()`: 这返回行编辑字段的验证输入掩码。'
- en: '`line_edit.inputMethodQuery(QtCore.Qt.InputMethodQuery, object)`: This is used
    to query a set of properties of the line edit field in order to support complex
    input method operations.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.inputMethodQuery(QtCore.Qt.InputMethodQuery, object)`: 这用于查询行编辑字段的属性集，以支持复杂的输入法操作。'
- en: '`line_edit.insert("Text will be inserted")`: This inserts new text in the line
    edit field. It also deletes any selected text and validates the result.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.insert("Text will be inserted")`: 这在行编辑字段中插入新文本。它还会删除任何选定的文本并验证结果。'
- en: '`line_edit.maxLength()`: This returns the maximum length of the text of this
    line edit field.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.maxLength()`: 这返回此行编辑字段文本的最大长度。'
- en: '`line_edit.minimumSizeHint()`: This returns the minimum size hint of the `QtCore.QSize`
    type for this line edit field.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.minimumSizeHint()`: 这返回此行编辑字段的 `QtCore.QSize` 类型的最小大小提示。'
- en: '`line_edit.placeholderText()`: This returns the placeholder text of the line
    edit field. This text will be displayed as long as the field is empty.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.placeholderText()`: 这返回行编辑字段的占位文本。只要字段为空，就会显示此文本。'
- en: '`line_edit.selectedText()`: This returns the selected text in the line edit
    field.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.selectedText()`: 这返回行编辑字段中选定的文本。'
- en: '`line_edit.selectionStart()`: This returns the index of the first character
    in selected text in the field, or returns `-1` if no text is selected.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.selectionStart()`: 这返回字段中选中文本中第一个字符的索引，如果没有文本被选中，则返回 `-1`。'
- en: '`line_edit.selectionEnd()`: This returns the index of the last character of
    the text selected in the field, or returns `-1` if no text is selected.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.selectionEnd()`: 这返回字段中选中文本的最后一个字符的索引，如果没有文本被选中，则返回 `-1`。'
- en: '`line_edit.selectionLength()`: This returns the length of the selected characters
    in the line edit field.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.selectionLength()`: 这返回行编辑字段中选定的字符的长度。'
- en: '`line_edit.text()`: This returns the content of the line edit field as a Unicode
    string.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.text()`: 这返回行编辑字段的内容作为 Unicode 字符串。'
- en: '`line_edit.textMargins()`: This returns the margins for the text of this field.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.textMargins()`: 这返回此字段文本的边距。'
- en: '`line_edit.validator()`: This returns the validator for this line edit field.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.validator()`: 这返回此行编辑字段的验证器。'
- en: events
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: events
- en: 'These functions are related to events, including event handlers:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与事件相关，包括事件处理程序：
- en: '`line_edit.changeEvent(QtCore.QEvent)`: This handles state changes of the line
    edit field.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.changeEvent(QtCore.QEvent)`: 这处理行编辑字段的州变化。'
- en: '`line_edit.contextMenuEvent(QtGui.QContextMenuEvent)`: This event handler receives
    line edit context menu events.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.contextMenuEvent(QtGui.QContextMenuEvent)`: 此事件处理程序接收行编辑上下文菜单事件。'
- en: '`line_edit.dragEnterEvent(QtGui.QDragEnterEvent)`: This event handler is called
    with an event parameter when the mouse enters the line edit field and a drag is
    in progress.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.dragEnterEvent(QtGui.QDragEnterEvent)`: 当鼠标进入行编辑字段并且正在拖动时，此事件处理程序会使用事件参数被调用。'
- en: '`line_edit.dragLeaveEvent(QtGui.QDragLeaveEvent)`: This event handler is called
    with an event parameter when the mouse leaves the line edit field and a drag is
    in progress.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.dragLeaveEvent(QtGui.QDragLeaveEvent)`: 当鼠标离开行编辑字段并且正在拖动时，此事件处理程序会使用事件参数被调用。'
- en: '`line_edit.dragMoveEvent(QtGui.QDragMoveEvent)`: This event handler is called
    with an event parameter when certain conditions occur, such as the cursor entering
    the field; the cursor moving within the field; or the modifier key being pressed
    on the keyboard while the line edit field has the focus, and a drag is in progress.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.dragMoveEvent(QtGui.QDragMoveEvent)`: 当发生某些条件时，例如光标进入字段；光标在字段内移动；或者在行编辑字段具有焦点的同时按下键盘上的修改键，并且正在拖动时，此事件处理程序会使用事件参数被调用。'
- en: '`line_edit.dropEvent(QtGui.QDropEvent)`: This event handler is called with
    an event parameter when a drag is dropped on the line edit field.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.dropEvent(QtGui.QDropEvent)`: 当拖动到行编辑字段时，此事件处理程序会使用事件参数被调用。'
- en: '`line_edit.event(QtCore.QEvent)`: This receives events sent to the object and
    should return `True` if the event is recognized and has been processed.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.event(QtCore.QEvent)`: 此接收发送到对象的事件，如果事件被识别并已处理，则应返回`True`。'
- en: '`line_edit.focusOutEvent(QtGui.QFocusEvent)`: This event handler receives line
    edit keyboard focus events that are passed with an event parameter when the focus
    is lost.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.focusOutEvent(QtGui.QFocusEvent)`: 此事件处理程序接收行编辑键盘焦点事件，当焦点丢失时，这些事件会通过事件参数传递。'
- en: '`line_edit.focusInEvent(QtGui.QFocusEvent)`: This event handler receives line
    edit keyboard focus events that are passed with an event parameter when the focus
    is received.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.focusInEvent(QtGui.QFocusEvent)`: 此事件处理程序接收当接收到焦点时通过事件参数传递的行编辑键盘焦点事件。'
- en: '`line_edit.inputMethodEvent(QtGui.QInputMethodEvent)`: This event handler receives
    input method composition events with an event passed in the parameter.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.inputMethodEvent(QtGui.QInputMethodEvent)`: 此事件处理程序接收传递给参数的事件的输入法组合事件。'
- en: '`line_edit.keyPressEvent(QtGui.QKeyEvent)`: This event handler receives key
    press events for the line edit field with an event passed in the parameter.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.keyPressEvent(QtGui.QKeyEvent)`: 此事件处理程序接收传递给参数的事件的行编辑字段的按键事件。'
- en: '`line_edit.mouseMoveEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse move events for this line edit field with an event passed in the parameter.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.mouseMoveEvent(QtGui.QMouseEvent)`: 此事件处理程序接收传递给参数的事件的此行编辑字段的鼠标移动事件。'
- en: '`line_edit.mousePressEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse press events for this line edit field with an event passed in the parameter.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.mousePressEvent(QtGui.QMouseEvent)`: 此事件处理程序接收传递给参数的事件的此行编辑字段的鼠标按下事件。'
- en: '`line_edit.mouseReleaseEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse release events for this line edit field with an event passed in the parameter.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.mouseReleaseEvent(QtGui.QMouseEvent)`: 此事件处理程序接收传递给参数的事件的此行编辑字段的鼠标释放事件。'
- en: '`line_edit.mouseDoubleClickEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse double-click events for this line edit field with an event passed in the
    parameter.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.mouseDoubleClickEvent(QtGui.QMouseEvent)`: 此事件处理程序接收传递给参数的事件的此行编辑字段的鼠标双击事件。'
- en: '`line_edit.paintEvent(QtGui.QPaintEvent)`: This event handler receives paint
    events for this line edit field with an event passed in the parameter.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.paintEvent(QtGui.QPaintEvent)`: 此事件处理程序接收传递给参数的事件的此行编辑字段的绘制事件。'
- en: signals
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The following signals are available with the `QLineEdit` class:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`QLineEdit`类有以下信号可用：'
- en: '`line_edit.cursorPositionChanged(int, int)`: This signal is emitted when the
    cursor moves inside the line edit field. The old and new positions are passed
    as parameters.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.cursorPositionChanged(int, int)`: 当光标在行编辑字段内部移动时，会发出此信号。旧的和新的位置作为参数传递。'
- en: '`line_edit.editingFinished()`: This signal is emitted when the *Enter* key
    is pressed, or the field loses focus.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.editingFinished()`: 当按下*Enter*键或字段失去焦点时，会发出此信号。'
- en: '`line_edit.returnPressed()`: This signal is emitted when the *Enter* key is
    pressed.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.returnPressed()`: 当按下*Enter*键时，会发出此信号。'
- en: '`line_edit.selectionChanged()`: This signal is emitted when the text selection
    of the line edit changes.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.selectionChanged()`: 当行编辑文本选择发生变化时，会发出此信号。'
- en: '`line_edit.textChanged(str)`: This signal is emitted when the text in the field
    changes; this can also be done programmatically with the `setText()` method.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.textChanged(str)`: 当字段中的文本发生变化时，会发出此信号；这也可以通过`setText()`方法以编程方式完成。'
- en: '`line_edit.textEdited(str)`: This signal is emitted when the text in the field
    is edited. It is not related to changing text with the `setText()` method.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_edit.textEdited(str)`: 当字段中的文本被编辑时，会发出此信号。它与使用`setText()`方法更改文本无关。'
- en: QLineEdit example
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLineEdit示例
- en: 'To demonstrate the functionality of the line edit field, let''s put this field
    to the application:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示行编辑字段的函数，让我们将此字段放入应用程序中：
- en: 'Add the `ULineEd` class to the `u_style.py` file:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ULineEd`类添加到`u_style.py`文件中：
- en: '[PRE10]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We added the various properties to this class, such as the text margins and
    the color of the line edit field borders. Now, we need to realize this field in
    the `u_app.py` file.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向此类添加了各种属性，例如文本边距和行编辑字段边框的颜色。现在，我们需要在`u_app.py`文件中实现此字段。
- en: 'Add this to the `import` section of the `u_app.py` file:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到`u_app.py`文件的`import`部分：
- en: '[PRE11]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add this to the `__init__()` function of the `u_app.py`file:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到`u_app.py`文件的`__init__()`函数中：
- en: '[PRE12]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We've added three line edit fields to input the username, email, and password.
    We've also added to the layout of the second frame.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了三个行编辑字段来输入用户名、电子邮件和密码。我们还添加到了第二个框架的布局中。
- en: 'Now, run the app to see the line edit fields:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行应用程序以查看行编辑字段：
- en: '![](img/93918555-fef6-4b04-8f64-5773e0957767.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93918555-fef6-4b04-8f64-5773e0957767.png)'
- en: Now, let's move on to the `QTextEdit` class.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续介绍 `QTextEdit` 类。
- en: QTextEdit
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QTextEdit
- en: 'The `QTextEdit` class is used for multiline text representations. This field
    supports both rich and plain formats of text. Usually, rich text formatting is
    used to insert HTML-style tags into the field with the ability to display and
    edit them. Multiline fields are the most popular instrument for working with texts
    in editing mode in order to create text editors and visualize and edit text files.
    Fields of this type are used for writing text messages, creating text files, saving
    information to databases, and many other things. Text fields created with the
    `QTextEdit` class allow us to display text, images, lists, tables, and other elements.
    To implement a multiline text editor in the GUI application, we need to understand
    the basics of the text representations. End-of-line special characters, such as
    `\n`for a new line and `\r` for a carriage return, are used, depending on the
    operating system (OS), for example, `\n` in Unix-like systems and `\r\n` for Windows
    (**Disk Operating Systems** (**DOS**)). Also available are other special characters,
    such as `\t` for a tab and `\v` for a vertical tab. By default, `\n` is used in
    the `QTextEdit` field as the symbol for the end of a line, but you need to remember
    that these special symbols can be different for external text used in the text
    field. The inheritance scheme of the `QTextEdit` class is as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`QTextEdit` 类用于多行文本表示。此字段支持文本的富格式和平格式。通常，富文本格式化用于在字段中插入HTML样式的标签，并具有显示和编辑它们的能力。多行字段是编辑模式下处理文本的最流行工具，用于创建文本编辑器、可视化并编辑文本文件。此类字段用于编写文本消息、创建文本文件、将信息保存到数据库以及许多其他事情。使用
    `QTextEdit` 类创建的文本字段允许我们显示文本、图像、列表、表格和其他元素。为了在GUI应用程序中实现多行文本编辑器，我们需要了解文本表示的基础知识。根据操作系统（OS）的不同，使用行结束特殊字符，例如
    `\n` 用于换行和 `\r` 用于回车，例如，Unix-like系统中使用 `\n` 和Windows（**磁盘操作系统**（**DOS**））中使用 `\r\n`。还有其他特殊字符，例如
    `\t` 用于制表符和 `\v` 用于垂直制表符。默认情况下，`QTextEdit` 字段使用 `\n` 作为行结束的符号，但您需要记住，这些特殊符号对于文本字段中使用的外部文本可能会有所不同。`QTextEdit`
    类的继承方案如下：'
- en: '![](img/863992e0-bbfd-4511-9cd4-c6931d687638.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](img/863992e0-bbfd-4511-9cd4-c6931d687638.png)'
- en: 'The declaration of this class in the application is as follows:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中声明此类的方式如下：
- en: '[PRE13]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Functions of QTextEdit
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QTextEdit 的功能
- en: The `QTextEdit` class improves the functionality of the inherited classes with
    following functions.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`QTextEdit` 类通过以下功能增强了继承类的功能。'
- en: set
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These functions set parameters/properties to the text edit field, such as text,
    alignment, and functionality:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数将参数/属性设置到文本编辑字段中，例如文本、对齐方式和功能：
- en: '`text_edit.setAcceptRichText(bool)`: If the parameter is `True`, the text field
    will accept rich text.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setAcceptRichText(bool)`: 如果参数为 `True`，则文本字段将接受富文本。'
- en: '`text_edit.setAlignment(QtCore.Qt.Alignment)`: This sets the alignment of the
    current paragraph. The available parameters are `QtCore.Qt.AlignLeft`, which aligns
    text to the left (the default); `QtCore.Qt.AlignRight`, which aligns text to the
    right; `QtCore.Qt.AlignCenter`, which aligns text to the center; and `QtCore.Qt.AlignJustify`,
    which justifies text.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setAlignment(QtCore.Qt.Alignment)`: 这将设置当前段落的对齐方式。可用的参数包括 `QtCore.Qt.AlignLeft`，它将文本对齐到左边（默认）；`QtCore.Qt.AlignRight`，它将文本对齐到右边；`QtCore.Qt.AlignCenter`，它将文本对齐到中间；以及
    `QtCore.Qt.AlignJustify`，它使文本两端对齐。'
- en: '`text_edit.setAutoFormatting(QtWidgets.QTextEdit.AutoFormatting)`: This sets
    the auto-formatting features for this text field.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setAutoFormatting(QtWidgets.QTextEdit.AutoFormatting)`: 这将设置此文本字段的自动格式化功能。'
- en: '`text_edit.setCurrentCharFormat(QtGui.QTextCharFormat)`: This sets the character
    format that will be used when inserting new text.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setCurrentCharFormat(QtGui.QTextCharFormat)`: 这将设置插入新文本时使用的字符格式。'
- en: '`text_edit.setCurrentFont(QtGui.QFont)`: This sets the font of the current
    character format.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setCurrentFont(QtGui.QFont)`: 这将设置当前字符格式的字体。'
- en: '`text_edit.setCursorWidth(int)`: This sets the width of the cursor that will
    be visible with this text field.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setCursorWidth(int)`: 这将设置与该文本字段一起可见的光标宽度。'
- en: '`text_edit.setDocument(QtGui.QTextDocument)`: This sets the underlying document
    of this text field.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setDocument(QtGui.QTextDocument)`: 这将设置此文本字段的底层文档。'
- en: '`text_edit.setDocumentTitle("Document Title")`: This sets the title of the
    underlying document.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setDocumentTitle("Document Title")`: 这将设置底层文档的标题。'
- en: '`text_edit.setExtraSelections(selections)`: This allows temporary marking of
    certain regions in the text with a color, specified in the `selections` parameter.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setExtraSelections(selections)`: 这允许使用在`selections`参数中指定的颜色临时标记文本中的某些区域。'
- en: '`text_edit.setFontFamily("Font Family")`: This sets the family of the font
    of the current format.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setFontFamily("Font Family")`: 这将设置当前格式的字体家族。'
- en: '`text_edit.setFontItalic(bool)`: If this parameter is `True`, the font of the
    current format will be italic.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setFontItalic(bool)`: 如果此参数为`True`，则当前格式的字体将被斜体。'
- en: '`text_edit.setFontPointSize(float)`: This sets the font point size of the current
    format.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setFontPointSize(float)`: 这将设置当前格式的字体点大小。'
- en: '`text_edit.setFontUnderline(bool)`: If this parameter is `True`, the font of
    the current format will be underlined.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setFontUnderline(bool)`: 如果此参数为`True`，则当前格式的字体将被下划线。'
- en: '`text_edit.setFontWeight(int)`: This sets the font weight of the current format.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setFontWeight(int)`: 这将设置当前格式的字体粗细。'
- en: '`text_edit.setHtml("<p>Html tags</p>")`: This sets the text with HTML-style
    formatting. All previous text will be deleted.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setHtml("<p>Html tags</p>")`: 这将使用HTML样式格式设置文本。所有之前的文本将被删除。'
- en: '`text_edit.setLineWrapColumnOrWidth(int)`: This sets the position in pixels
    or columns (depending on the wrap mode) where text will be wrapped.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setLineWrapColumnOrWidth(int)`: 这将设置文本将在此位置（以像素或列为单位，取决于换行模式）换行。'
- en: '`text_edit.setLineWrapMode(QtWidgets.QTextEdit.LineWrapMode)`: This sets the
    line wrap mode specified in the parameter for this text field.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setLineWrapMode(QtWidgets.QTextEdit.LineWrapMode)`: 这将为文本字段设置参数中指定的换行模式。'
- en: '`text_edit.setOverwriteMode(bool)`: If this parameter is `True`, the entered
    text will overwrite existing text.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setOverwriteMode(bool)`: 如果此参数为`True`，则输入的文本将覆盖现有文本。'
- en: '`text_edit.setPlaceholderText("Placeholder text")`: This sets the text that
    will be used when this text field is empty.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setPlaceholderText("Placeholder text")`: 这将设置当此文本字段为空时使用的文本。'
- en: '`text_edit.setPlainText("Text")`: This adds plain text to the text field. All
    previous text will be deleted. If the text has HTML-style tags, these will be
    displayed in-text as is (without HTML-style formatting).'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setPlainText("Text")`: 这将向文本字段添加纯文本。所有之前的文本将被删除。如果文本具有HTML样式标签，则这些标签将按原样（不带HTML样式格式）显示在文本中。'
- en: '`text_edit.setReadOnly(bool)`: If this parameter is `True`, it sets the read-only
    mode for this text field so that content inside it cannot be edited by the user.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setReadOnly(bool)`: 如果此参数为`True`，则将此文本字段的只读模式设置为用户无法编辑其中的内容。'
- en: '`text_edit.setTabChangesFocus(bool)`: If this parameter is `True`, this allows
    the *Tab* key to change the focus; otherwise, the *Tab* key is accepted as input.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setTabChangesFocus(bool)`: 如果此参数为`True`，则允许**Tab**键更改焦点；否则，**Tab**键被视为输入。'
- en: '`text_edit.setTabStopDistance(float)`: This sets the *Tab* stop distance (the
    default is `80.0` pixels).'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setTabStopDistance(float)`: 这将设置**Tab**停止距离（默认为`80.0`像素）。'
- en: '`text_edit.setTabStopWidth(int)`: This sets the *Tab* stop width.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setTabStopWidth(int)`: 这将设置**Tab**停止宽度。'
- en: '`text_edit.setText("Text")`: This sets the text to the text field. All previous
    text will be deleted. The text can have HTML-style formatting or plain text. HTML
    will be formatted.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setText("Text")`: 这将设置文本字段中的文本。所有之前的文本将被删除。文本可以具有HTML样式格式或纯文本。HTML将被格式化。'
- en: '`text_edit.setTextBackgroundColor(QtGui.QColor)`: This sets the background
    color of the text.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setTextBackgroundColor(QtGui.QColor)`: 这将设置文本的背景颜色。'
- en: '`text_edit.setTextColor(QtGui.QColor)`: This sets the text color.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setTextColor(QtGui.QColor)`: 这将设置文本颜色。'
- en: '`text_edit.setTextCursor(QtGui.QTextCursor)`: This sets the cursor that will
    be visible with this text field.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setTextCursor(QtGui.QTextCursor)`: 这将设置与此文本字段一起可见的光标。'
- en: '`text_edit.setTextInteractionFlags(QtCore.Qt.TextInteractionFlags)`: This sets
    flags that will specify how the text field will interact with user input.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setTextInteractionFlags(QtCore.Qt.TextInteractionFlags)`: 这将设置标志，以指定文本字段如何与用户输入交互。'
- en: '`text_edit.setUndoRedoEnabled(bool)`: If this parameter is `True`, it allows
    us to execute undo/redo operations in this text field.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setUndoRedoEnabled(bool)`: 如果此参数为`True`，则允许我们在文本字段中执行撤销/重做操作。'
- en: '`text_edit.setWordWrapMode(QtGui.QTextOption.WrapMode)`: This sets the mode
    that will be used when wrapping text in this text edit.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.setWordWrapMode(QtGui.QTextOption.WrapMode)`: 这设置在文本编辑中用于换行的模式。'
- en: edit
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑
- en: 'These functions make some changes to the content of the text edit field, such
    as clear, undo, and redo:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数对文本编辑字段的内容进行一些更改，例如清除、撤销和重做：
- en: '`text_edit.clear()`: This clears the content of the text edit field, and the
    undo/redo history will be cleared.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.clear()`: 这清除文本编辑字段的内容，并清除撤销/重做历史记录。'
- en: '`text_edit.copy()`: This copies the selected text of this text edit field to
    the clipboard.'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.copy()`: 这将文本编辑字段中选定的文本复制到剪贴板。'
- en: '`text_edit.cut()`: This copies the selected text of the text field to the clipboard
    and deletes it from the text edit field.'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.cut()`: 这将文本字段中选定的文本复制到剪贴板，并从文本编辑字段中删除它。'
- en: '`text_edit.paste()`: This pastes the clipboard''s text at the cursor position
    of the text field.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.paste()`: 这将在文本字段的光标位置粘贴剪贴板中的文本。'
- en: '`text_edit.redo()`: This redoes the last operation if it is available for this
    text field.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.redo()`: 如果对于此文本字段可用，则重做最后一个操作。'
- en: '`text_edit.undo()`: This undoes the last operation if it is available for this
    text field.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.undo()`: 如果对于此文本字段可用，则撤销最后一个操作。'
- en: '`text_edit.selectAll()`: This selects all the text in the text edit field and
    moves the cursor to the end of the text.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.selectAll()`: 这选择文本编辑字段中的所有文本，并将光标移动到文本的末尾。'
- en: '`text_edit.zoomIn(int)`: This zooms in on the text by making the font size
    larger with in the range in the parameter (`int`), and recalculating all font
    sizes. It does not change the size of images.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.zoomIn(int)`: 这通过在参数指定的范围内增大字体大小来放大文本，并重新计算所有字体大小。它不会改变图像的大小。'
- en: '`text_edit.zoomInF(float)`: This zooms in on the text by making the font size
    larger with in the range in the parameter (`float`), and recalculating all font
    sizes. It does not change the size of images.'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.zoomInF(float)`: 这通过在参数指定的范围（`float`）内增大字体大小来放大文本，并重新计算所有字体大小。它不会改变图像的大小。'
- en: '`text_edit.zoomOut(int)`: This zooms out in on the text by making the font
    size smaller with in the range in the parameter, and recalculating all font sizes.
    It does not change the size of images.'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.zoomOut(int)`: 这通过在参数指定的范围内减小字体大小来缩小文本，并重新计算所有字体大小。它不会改变图像的大小。'
- en: is
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是
- en: 'These functions return a Boolean value (`bool`) related to the text edit states,
    for example, to check the availability of the undo functionality:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回与文本编辑状态相关的布尔值（`bool`），例如检查撤销功能的可用性：
- en: '`text_edit.isReadOnly()`: This returns `True` if the text field is in read-only
    mode, so that content inside it cannot be edited by the user.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.isReadOnly()`: 如果文本字段处于只读模式，则返回`True`，因此用户无法编辑其中的内容。'
- en: '`text_edit.isUndoRedoEnabled()`: This returns `True` if undo and redo operations
    are enabled for this text edit field.'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.isUndoRedoEnabled()`: 如果撤销和重做操作对此文本编辑字段可用，则返回`True`。'
- en: functional
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These functions return the current values of the text edit field and changes
    in functionality:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回文本编辑字段的当前值和功能更改：
- en: '`text_edit.acceptRichText()`: This returns `True` if the text field accepts
    rich text insertions that allow HTML-style tags. If it returns `False`, the text
    field only accepts plain text input.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.acceptRichText()`: 如果文本字段接受允许HTML样式标签的富文本插入，则返回`True`。如果返回`False`，则文本字段仅接受纯文本输入。'
- en: '`text_edit.alignment()`: This returns the alignment of the text for the current
    paragraph.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.alignment()`: 这返回当前段落的文本对齐方式。'
- en: '`text_edit.anchorAt(QtCore.QPoint)`: This returns the reference as a Unicode
    string of the anchor at the position specified in the parameter.'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.anchorAt(QtCore.QPoint)`: 这返回在参数指定的位置上的锚点的Unicode字符串引用。'
- en: '`text_edit.append("Text to append")`: This appends a new text paragraph to
    the text field as a new line after the last line in the field.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.append("Text to append")`: 这将新的文本段落追加到文本字段中，作为字段中最后一行的下一行。'
- en: '`text_edit.autoFormatting()`: This returns the auto-formatting features of
    the `QtWidgets.QTextEdit.AutoFormatting` type that are enabled for this text field.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.autoFormatting()`: 这返回为该文本字段启用的`QtWidgets.QTextEdit.AutoFormatting`类型的自动格式化功能。'
- en: '`text_edit.canInsertFromMimeData(QtCore.QMimeData)`: This returns `True` if
    the contents of the MIME data object, specified in the parameter, can be decoded
    and inserted into the text field.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.canInsertFromMimeData(QtCore.QMimeData)`: 如果在参数中指定的MIME数据对象的内 容可以被解码并插入到文本字段中，则返回`True`。'
- en: '`text_edit.canPaste()`: This returns `True` if text can be pasted from the
    clipboard into this text field.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.canPaste()`: 如果可以从剪贴板粘贴文本到这个文本字段，则返回`True`。'
- en: '`text_edit.createMimeDataFromSelection()`: This returns a new MIME data object
    of the `QtCore.QMimeData` type to represent the contents of this text edit field
    selection.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.createMimeDataFromSelection()`: 这返回一个新的`QtCore.QMimeData`类型的MIME数据对象，用于表示此文本编辑字段选择的内容。'
- en: '`text_edit.createStandardContextMenu()`: This creates a standard context menu
    that will be displayed when the user clicks on the text edit field with the right
    mouse button.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.createStandardContextMenu()`: 这创建一个标准上下文菜单，当用户用鼠标右键单击文本编辑字段时显示。'
- en: '`text_edit.createStandardContextMenu(QtCore.QPoint)`: This creates a standard
    context menu that will be displayed when the user right-clicks on the text edit
    field and appears on the position, specified in the parameter, where the mouse
    click happens.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.createStandardContextMenu(QtCore.QPoint)`: 这创建一个标准上下文菜单，当用户在文本编辑字段上右击时显示，并出现在鼠标点击发生的位置，由参数指定。'
- en: '`text_edit.currentCharFormat()`: This returns the current character formatting
    that will be used when new text is inserted.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.currentCharFormat()`: 这返回当插入新文本时将使用的当前字符格式。'
- en: '`text_edit.currentFont()`: This returns the current font of the text formatting.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.currentFont()`: 这返回文本格式的当前字体。'
- en: '`text_edit.cursorForPosition(QtCore.QPoint)`: This returns the cursor of the
    `QtGui.QTextCursor` type at the position specified in the parameter (in viewport
    coordinates).'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.cursorForPosition(QtCore.QPoint)`: 这返回在参数中指定的位置（在视口坐标中）的`QtGui.QTextCursor`类型的光标。'
- en: '`text_edit.cursorRect()`: This returns a rectangle of the `QtCore.QRect` type
    (in viewport coordinates) that includes the cursor of this text field.'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.cursorRect()`: 这返回包含此文本字段光标的`QtCore.QRect`类型（在视口坐标中）的矩形。'
- en: '`text_edit.cursorRect(QtGui.QTextCursor)`: This returns a rectangle of the
    `QtCore.QRect` type (in viewport coordinates) that includes the cursor specified
    in the parameter.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.cursorRect(QtGui.QTextCursor)`: 这返回一个包含在参数中指定的光标的`QtCore.QRect`类型（在视口坐标中）的矩形。'
- en: '`text_edit.cursorWidth()`: This returns the width of the cursor in pixels (the
    default is `1`).'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.cursorWidth()`: 这返回光标在像素中的宽度（默认为`1`）。'
- en: '`text_edit.document()`: This returns the content of the text edit field represented
    as the underlying document of the `QtGui.QTextDocument` type.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.document()`: 这返回表示为`QtGui.QTextDocument`类型底层文档的文本编辑字段的内容。'
- en: '`text_edit.documentTitle()`: This returns the title of the underlying document
    parsed from the text.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.documentTitle()`: 这返回从文本解析出的底层文档的标题。'
- en: '`text_edit.ensureCursorVisible()`: This ensures that the text cursor is visible
    and, if necessary, scrolls the text edit field.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.ensureCursorVisible()`: 这确保文本光标可见，并在必要时滚动文本编辑字段。'
- en: '`text_edit.extraSelections()`: This returns extra selections that were previously
    set.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.extraSelections()`: 这返回之前设置的额外选择。'
- en: '`text_edit.find("Text to find", QtGui.QTextDocument.FindFlags)`: This finds
    the next occurrence of the text (the first parameter) using the specified search
    rules (the second parameter), returns `True` if the text was found, and selects
    this text.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.find("Text to find", QtGui.QTextDocument.FindFlags)`: 使用指定的搜索规则（第二个参数）查找文本（第一个参数）的下一个出现，如果找到文本，则返回`True`并选择此文本。'
- en: '`text_edit.find(QtCore.QRegExp, QtGui.QTextDocument.FindFlags)`: This finds
    the next occurrence matching the regular expression (the first parameter) using
    the specified search rules (the second parameter), returns `True` if the text
    was found, and selects this text in the field.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.find(QtCore.QRegExp, QtGui.QTextDocument.FindFlags)`: 使用指定的搜索规则（第二个参数）查找与正则表达式（第一个参数）匹配的下一个出现，如果找到文本，则返回`True`并在字段中选择此文本。'
- en: '`text_edit.fontFamily()`: This returns the font family of the current text
    format.'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.fontFamily()`: 这返回当前文本格式的字体族。'
- en: '`text_edit.fontItalic()`: This returns `True` if the current text format is
    italic.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.fontItalic()`: 如果当前文本格式是斜体，则返回`True`。'
- en: '`text_edit.fontPointSize()`: This returns the font point size of the current
    text format.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.fontPointSize()`: 这返回当前文本格式的字体点大小。'
- en: '`text_edit.fontUnderline()`: This returns `True` if the current text format
    is underline.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.fontUnderline()`: 如果当前文本格式是下划线，则返回`True`。'
- en: '`text_edit.fontWeight()`: This returns font weight of the current text format.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.fontWeight()`: 这返回当前文本格式的字体粗细。'
- en: '`text_edit.inputMethodQuery(QtCore.Qt.InputMethodQuery, object)`: This is used
    to query a set of properties of the text edit field to support complex input method
    operations, such as support for surrounding text and reconversions.'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.inputMethodQuery(QtCore.Qt.InputMethodQuery, object)`: 这用于查询文本编辑字段的一组属性，以支持复杂的输入法操作，例如支持周围文本和重新转换。'
- en: '`text_edit.insertFromMimeData(QtCore.QMimeData)`: This inserts the contents
    of the MIME data object, specified in the parameter, to the text edit field at
    the current cursor position.'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.insertFromMimeData(QtCore.QMimeData)`: 这将参数中指定的MIME数据对象的内 容插入到文本编辑字段当前光标位置。'
- en: '`text_edit.insertHtml("<p>Html tags</p>")`: This inserts the text with HTML
    formatting (if the text is HTML-styled) at the current cursor position.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.insertHtml("<p>Html tags</p>")`: 这将在当前光标位置插入带有HTML格式的文本（如果文本是HTML样式）。'
- en: '`text_edit.insertPlainText("Text")`: This inserts the text at the current cursor
    position. If the text has HTML formatting, the tags will be not formatted and
    text will be represented as is.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.insertPlainText("Text")`: 这将在当前光标位置插入文本。如果文本有HTML格式，则标签将不会被格式化，文本将按原样表示。'
- en: '`text_edit.lineWrapColumnOrWidth()`: This returns the position in pixels or
    columns (depending on the wrap mode) where the text will be wrapped.'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.lineWrapColumnOrWidth()`: 这返回文本将换行的像素位置或列数（取决于换行模式）。'
- en: '`text_edit.lineWrapMode()`: This returns the line wrap mode of the `QtWidgets.QTextEdit.LineWrapMode`
    type for this text field.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.lineWrapMode()`: 这返回此文本字段的`QtWidgets.QTextEdit.LineWrapMode`类型的行换行模式。'
- en: '`text_edit.loadResource(int, QtCore.QUrl)`: This loads the resource specified
    with the type (the first parameter) and the URL (the second parameter).'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.loadResource(int, QtCore.QUrl)`: 这使用类型（第一个参数）和URL（第二个参数）指定的类型加载资源。'
- en: '`text_edit.mergeCurrentCharFormat(QtGui.QTextCharFormat)`: This merges the
    properties specified in the parameter into the current character''s format.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.mergeCurrentCharFormat(QtGui.QTextCharFormat)`: 这将参数中指定的属性合并到当前字符的格式中。'
- en: '`text_edit.moveCursor(QtGui.QTextCursor.MoveOperation, QtGui.QTextCursor.MoveMode)`:
    This moves the cursor depending on the parameters. If the second parameter is
    `QtGui.QTextCursor.KeepAnchor`, the cursor will select the text as it moves. The
    available move operations are as follows:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.moveCursor(QtGui.QTextCursor.MoveOperation, QtGui.QTextCursor.MoveMode)`:
    这根据参数移动光标。如果第二个参数是`QtGui.QTextCursor.KeepAnchor`，则光标在移动时会选择文本。可用的移动操作如下：'
- en: '`QtGui.QTextCursor.NoMove` – `0`: The cursor stays where it is.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.NoMove` – `0`: 光标保持在当前位置。'
- en: '`QtGui.QTextCursor.Start` – `1`: The cursor moves to the start of text.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.Start` – `1`: 光标移动到文本的开始。'
- en: '`QtGui.QTextCursor.StartOfLine` – `3`: The cursor moves to the start of the
    current line.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.StartOfLine` – `3`: 光标移动到当前行的开始。'
- en: '`QtGui.QTextCursor.StartOfBlock` – `4`: The cursor moves to the start of the
    current block (paragraph).'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.StartOfBlock` – `4`: 光标移动到当前块（段落）的开始。'
- en: '`QtGui.QTextCursor.StartOfWord` – `5`: The cursor moves to the start of the
    current word.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.StartOfWord` – `5`: 光标移动到当前单词的开始。'
- en: '`QtGui.QTextCursor.PreviousBlock` – `6`: The cursor moves to the start of the
    previous block.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.PreviousBlock` – `6`: 光标移动到前一个块的开始。'
- en: '`QtGui.QTextCursor.PreviousCharacter` – `7`: The cursor moves to the start
    of the previous character.'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.PreviousCharacter` – `7`: 光标移动到前一个字符的开始。'
- en: '`QtGui.QTextCursor.PreviousWord` – `8`: The cursor moves to the start of the
    previous word.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.PreviousWord` – `8`: 光标移动到前一个单词的开始。'
- en: '`QtGui.QTextCursor.Up` – `2`: The cursor moves up one line.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.Up` – `2`: 光标向上移动一行。'
- en: '`QtGui.QTextCursor.Left` – `9`: The cursor moves left one character.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.Left` – `9`: 光标向左移动一个字符。'
- en: '`QtGui.QTextCursor.WordLeft` – `10`: The cursor moves left one word.'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.WordLeft` – `10`: 光标向左移动一个单词。'
- en: '`QtGui.QTextCursor.End` – `11`: The cursor moves to the end of the text.'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.End` – `11`: 光标移动到文本的末尾。'
- en: '`QtGui.QTextCursor.EndOfLine` – `13`: The cursor moves to the end of the current
    line.'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.EndOfLine` – `13`: 光标移动到当前行的末尾。'
- en: '`QtGui.QTextCursor.EndOfWord` – `14`: The cursor moves to the end of the current
    word.'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.EndOfWord` – `14`: 光标移动到当前单词的末尾。'
- en: '`QtGui.QTextCursor.EndOfBlock` – `15`: The cursor moves to the end of the current
    block.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.EndOfBlock` – `15`: 光标移动到当前块的末尾。'
- en: '`QtGui.QTextCursor.NextBlock` – `16`: The cursor moves to the beginning of
    the next block.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.NextBlock` – `16`: 光标移动到下一个块的开始。'
- en: '`QtGui.QTextCursor.NextCharacter` – `17`: The cursor moves to the next character.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.NextCharacter` – `17`: 光标移动到下一个字符。'
- en: '`QtGui.QTextCursor.NextWord` – `18`: The cursor moves to the next word.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.NextWord` – `18`: 光标移动到下一个单词。'
- en: '`QtGui.QTextCursor.Down` – `12`: The cursor moves down one line.'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.Down` – `12`: 光标向下移动一行。'
- en: '`QtGui.QTextCursor.Right` – `19`: The cursor moves right one character.'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.Right` – `19`: 光标向右移动一个字符。'
- en: '`QtGui.QTextCursor.WordRight` – `20`: The cursor moves right one word.'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.WordRight` – `20`: 光标向右移动一个单词。'
- en: '`QtGui.QTextCursor.NextCell` – `21`: The cursor moves to the next cell inside
    the current table.'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.NextCell` – `21`: 光标移动到当前表格内的下一个单元格。'
- en: '`QtGui.QTextCursor.PreviousCell` – `22`: The cursor moves to the previous cell
    inside the current table.'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.PreviousCell` – `22`: 光标移动到当前表格内的上一个单元格。'
- en: '`QtGui.QTextCursor.NextRow` – `23`: The cursor moves to the next row inside
    the current table.'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.NextRow` – `23`: 光标移动到当前表格内的下一行。'
- en: '`QtGui.QTextCursor.PreviousRow` – `24`: The cursor moves to the previous row
    inside the current table.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QTextCursor.PreviousRow` – `24`: 光标移动到当前表格内的上一行。'
- en: '`text_edit.overwriteMode()`: This returns `True` if the entered text will overwrite
    existing text.'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.overwriteMode()`: 如果输入的文本将覆盖现有文本，则返回 `True`。'
- en: '`text_edit.placeholderText()`: This returns placeholder text that will be used
    when this text field is empty.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.placeholderText()`: 这返回当此文本字段为空时将使用的占位文本。'
- en: '`text_edit.print(QtGui.QPagedPaintDevice)`: This is a convenience function
    that prints the text in the text field with a printer device.'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.print(QtGui.QPagedPaintDevice)`: 这是一个便利函数，用于使用打印机设备打印文本字段中的文本。'
- en: '`text_edit.print_(QtGui.QPagedPaintDevice)`: This prints the text of the text
    field with a printer device.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.print_(QtGui.QPagedPaintDevice)`: 这使用打印机设备打印文本字段的文本。'
- en: '`text_edit.scrollToAnchor(str)`: This scrolls the text edit field so that the
    anchor with the string in the parameter is visible.'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.scrollToAnchor(str)`: 这将文本编辑字段滚动，以便参数中的字符串的锚点可见。'
- en: '`text_edit.tabChangesFocus()`: This returns `True` if the *Tab* key changes
    focus.'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.tabChangesFocus()`: 如果 *Tab* 键改变焦点，则返回 `True`。'
- en: '`text_edit.tabStopDistance()`: This returns the *Tab* stop distance.'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.tabStopDistance()`: 这返回 *Tab* 停止距离。'
- en: '`text_edit.tabStopWidth()`: This returns the *Tab* stop width.'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.tabStopWidth()`: 这返回 *Tab* 停止宽度。'
- en: '`text_edit.textBackgroundColor()`: This returns the background color of the
    `QtGui.QColor` type for the text.'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.textBackgroundColor()`: 这返回 `QtGui.QColor` 类型的文本背景颜色。'
- en: '`text_edit.textColor()`: This returns the color of the `QtGui.QColor` type
    for the text.'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.textColor()`: 这返回 `QtGui.QColor` 类型的文本颜色。'
- en: '`text_edit.textCursor()`: This returns a copy of the cursor of the `QtGui.QTextCursor`
    type, which shows the cursor that is currently visible.'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.textCursor()`: 这返回 `QtGui.QTextCursor` 类型的光标副本，显示当前可见的光标。'
- en: '`text_edit.textInteractionFlags()`: This returns the flags of the `QtCore.Qt.TextInteractionFlags`
    type that specify the interaction with the user input.'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.textInteractionFlags()`: 这返回指定用户输入交互的 `QtCore.Qt.TextInteractionFlags`
    类型的标志。'
- en: '`text_edit.toHtml()`: This returns the text of the text field with HTML-style
    formatting.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.toHtml()`: 这返回具有HTML样式的格式化文本。'
- en: '`text_edit.toPlainText()`: This returns the plain text of the text field.'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.toPlainText()`: 这返回文本字段的纯文本。'
- en: '`text_edit.wordWrapMode()`: This returns the mode of the `QtGui.QTextOption.WrapMode`
    type that is used when wrapping text in the text edit field.'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.wordWrapMode()`: 这返回用于在文本编辑字段中换行时使用的 `QtGui.QTextOption.WrapMode`
    类型的模式。'
- en: events
  id: totrans-390
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: events
- en: 'These functions are related to events, such as event handlers:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与事件相关，例如事件处理程序：
- en: '`text_edit.changeEvent(QtCore.QEvent)`: This handles state changes of this
    text edit field.'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.changeEvent(QtCore.QEvent)`: 这处理此文本编辑字段的状态变化。'
- en: '`text_edit.contextMenuEvent(QtGui.QContextMenuEvent)`: This event handler receives
    text edit context menu events.'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.contextMenuEvent(QtGui.QContextMenuEvent)`: 此事件处理程序接收文本编辑上下文菜单事件。'
- en: '`text_edit.dragEnterEvent(QtGui.QDragEnterEvent)`: This event handler is called
    with an event parameter when the mouse enters the text edit field and a drag is
    in progress.'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.dragEnterEvent(QtGui.QDragEnterEvent)`: 当鼠标进入文本编辑字段且正在拖动时，此事件处理程序会使用事件参数调用。'
- en: '`text_edit.dragLeaveEvent(QtGui.QDragLeaveEvent)`: This event handler is called
    with an event parameter when the mouse leaves the text edit field and a drag is
    in progress.'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.dragLeaveEvent(QtGui.QDragLeaveEvent)`: 当鼠标离开文本编辑字段且正在拖动时，此事件处理程序会使用事件参数调用。'
- en: '`text_edit.dragMoveEvent(QtGui.QDragMoveEvent)`: This event handler is called
    with an event parameter when certain conditions occur, such as the cursor entering
    the field, the cursor moving within the field, the modifier key being pressed
    on the keyboard while the text edit field has the focus, or if a drag is in progress.'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.dragMoveEvent(QtGui.QDragMoveEvent)`: 当发生某些条件时，例如光标进入字段、光标在字段内移动、在文本编辑字段获得焦点时按下修改键，或者拖动正在进行时，此事件处理程序会使用事件参数被调用。'
- en: '`text_edit.dropEvent(QtGui.QDropEvent)`: This event handler is called with
    an event parameter when the drag is dropped on the text edit field.'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.dropEvent(QtGui.QDropEvent)`: 此事件处理程序在拖动被放置在文本编辑字段上时，使用事件参数被调用。'
- en: '`text_edit.event(QtCore.QEvent)`: This receives events sent to the object and
    should return `True` if the event is recognized and processed.'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.event(QtCore.QEvent)`: 此接收发送到对象的信号，如果事件被识别并处理，则应返回`True`。'
- en: '`text_edit.focusOutEvent(QtGui.QFocusEvent)`: This event handler receives the
    text edit field keyboard focus events that are passed with an event parameter
    when the focus is lost.'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.focusOutEvent(QtGui.QFocusEvent)`: 此事件处理程序接收文本编辑字段键盘焦点事件，当焦点丢失时，这些事件通过事件参数传入。'
- en: '`text_edit.focusInEvent(QtGui.QFocusEvent)`: This event handler receives the
    text field keyboard focus events that are passed with an event parameter when
    the focus is received.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.focusInEvent(QtGui.QFocusEvent)`: 此事件处理程序接收文本字段键盘焦点事件，当接收到焦点时，这些事件通过事件参数传入。'
- en: '`text_edit.inputMethodEvent(QtGui.QInputMethodEvent)`: This event handler receives input
    method composition events with an event passed in the parameter.'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.inputMethodEvent(QtGui.QInputMethodEvent)`: 此事件处理程序接收通过参数传入的输入法组合事件。'
- en: '`text_edit.keyPressEvent(QtGui.QKeyEvent)`: This event handler receives keypress
    events for this text edit field with an event passed in the parameter.'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.keyPressEvent(QtGui.QKeyEvent)`: 此事件处理程序接收此文本编辑字段的按键事件，事件通过参数传入。'
- en: '`text_edit.keyReleaseEvent(QtGui.QKeyEvent)`: This event handler receives key-release
    events for this text field with an event passed in the parameter.'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.keyReleaseEvent(QtGui.QKeyEvent)`: 此事件处理程序接收此文本字段的按键释放事件，事件通过参数传入。'
- en: '`text_edit.mouseMoveEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse-move events for this text edit field with an event passed in the parameter.'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.mouseMoveEvent(QtGui.QMouseEvent)`: 此事件处理程序接收此文本编辑字段的鼠标移动事件，事件通过参数传入。'
- en: '`text_edit.mousePressEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse-press events for this text field with an event passed in the parameter.'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.mousePressEvent(QtGui.QMouseEvent)`: 此事件处理程序接收此文本字段的鼠标按下事件，事件通过参数传入。'
- en: '`text_edit.mouseReleaseEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse-release events for this text field with an event passed in the parameter.'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.mouseReleaseEvent(QtGui.QMouseEvent)`: 此事件处理程序接收此文本字段的鼠标释放事件，事件通过参数传入。'
- en: '`text_edit.mouseDoubleClickEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse double-click events for this text edit field with an event passed in the
    parameter.'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.mouseDoubleClickEvent(QtGui.QMouseEvent)`: 此事件处理程序接收此文本编辑字段的鼠标双击事件，事件通过参数传入。'
- en: '`text_edit.paintEvent(QtGui.QPaintEvent)`: This event handler receives paint
    events for this text field with an event passed in the parameter.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.paintEvent(QtGui.QPaintEvent)`: 此事件处理程序接收此文本字段的绘制事件，事件通过参数传入。'
- en: '`text_edit.resizeEvent(QtGui.QResizeEvent)`: This event handler receives resize
    events for this text field with an event passed in the parameter.'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.resizeEvent(QtGui.QResizeEvent)`: 此事件处理程序接收此文本字段的调整大小事件，事件通过参数传入。'
- en: '`text_edit.showEvent(QtGui.QShowEvent)`: This event handler receives show events
    for the text field with an event passed in the parameter.'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.showEvent(QtGui.QShowEvent)`: 此事件处理程序接收文本字段的显示事件，事件通过参数传入。'
- en: '`text_edit.timerEvent(QtCore.QTimerEvent)`: This event handler receives timer
    events for the text field with an event passed in the parameter.'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.timerEvent(QtCore.QTimerEvent)`: 此事件处理程序接收文本字段的定时器事件，事件通过参数传入。'
- en: '`text_edit.wheelEvent(QtGui.QWheelEvent)`: This event handler receives mouse-wheel
    events for this field with an event passed in the parameter.'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.wheelEvent(QtGui.QWheelEvent)`: 此事件处理程序接收此字段的鼠标滚轮事件，事件通过参数传入。'
- en: signals
  id: totrans-413
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The signals available with the `QTextEdit` class are as follows:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '`QTextEdit`类可用的信号如下：'
- en: '`text_edit.copyAvailable(bool)`: This signal is emitted when text is selected
    or de-selected in the text field. If the text is selected, the parameter will
    be `True`.'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.copyAvailable(bool)`：当在文本字段中选择或取消选择文本时，会发出此信号。如果文本被选中，则参数将为`True`。'
- en: '`text_edit.currentCharFormatChanged(QtGui.QTextCharFormat)`: This signal is
    emitted when the current character format has changed. The new format is in the
    parameter.'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.currentCharFormatChanged(QtGui.QTextCharFormat)`：当当前字符格式发生变化时，会发出此信号。新格式在参数中。'
- en: '`text_edit.cursorPositionChanged()`: This signal is emitted when the cursor
    moves inside the text field.'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.cursorPositionChanged()`：当光标在文本字段内移动时，会发出此信号。'
- en: '`text_edit.redoAvailable(bool)`: This signal is emitted when redo operations
    become available (the parameter is `True`) or unavailable (the parameter is `False`).'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.redoAvailable(bool)`：当重做操作可用（参数为`True`）或不可用（参数为`False`）时，会发出此信号。'
- en: '`text_edit.undoAvailable(bool)`: This signal is emitted when undo operations
    become available (the parameter is `True`) or unavailable (the parameter is `False`).'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.undoAvailable(bool)`：当撤销操作可用（参数为`True`）或不可用（参数为`False`）时，会发出此信号。'
- en: '`text_edit.selectionChanged()`: This signal is emitted when the text selection
    of the text edit changes.'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.selectionChanged()`：当文本编辑的文本选择发生变化时，会发出此信号。'
- en: '`text_edit.textChanged(str)`: This signal is emitted when the content of the
    field changes.'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_edit.textChanged(str)`：当字段内容发生变化时，会发出此信号。'
- en: QTextEdit example
  id: totrans-422
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QTextEdit示例
- en: 'Let''s demonstrate a multiline text field in our GUI application. Follow the
    steps described in the following section:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在GUI应用程序中演示一个多行文本字段。请按照以下章节中描述的步骤进行操作：
- en: 'Create the `UTextEd` class in the `u_style.py` file:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`u_style.py`文件中创建`UTextEd`类：
- en: '[PRE14]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The properties available with this class are the scroll bar properties, the
    line height of the text field, the border properties, and many more. Now, we need
    to add this text edit field to the `u_app.py` file.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 此类可用的属性包括滚动条属性、文本字段的行高、边框属性等。现在，我们需要将此文本编辑字段添加到`u_app.py`文件中。
- en: 'Add the `UTextEd` to the `import` section of the `u_app.py` file:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`UTextEd`添加到`u_app.py`文件的`import`部分：
- en: '[PRE15]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the text field lines to the `__init__()` function of the `u_app.py`file:'
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本字段行添加到`u_app.py`文件的`__init__()`函数中：
- en: '[PRE16]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The text edit instance adds to the grid layout of the first frame. Now, we can
    type the different texts in this field and cut, copy, paste, and so on, as well.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 文本编辑实例添加到第一个框架的网格布局中。现在，我们可以在该字段中输入不同的文本，并进行剪切、复制、粘贴等操作。
- en: Additional tips
  id: totrans-432
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他提示
- en: 'The most popular implementations of text fields in GUI applications are to
    create various editors. This may be text editors or code editors to work with
    texts or typing the code. Therefore, functions for spellchecking and working with
    the syntax of various languages are very popular. Let''s describe some implementations
    of spellchecking in the text edit field of our GUI application. The example is
    a class that provides spellchecking functionality in the text edit field. To start,
    we need to install additional packages. The most useful package for this is `pyenchant`.
    To install this package, type the following in the cmd/Terminal:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 在GUI应用程序中，最常见的文本字段实现是创建各种编辑器。这可能是文本编辑器或代码编辑器，用于处理文本或输入代码。因此，拼写检查和与各种语言的语法工作函数非常受欢迎。让我们描述一下在GUI应用程序的文本编辑字段中拼写检查的实现。示例是一个在文本编辑字段中提供拼写检查功能的类。首先，我们需要安装额外的包。对此最有用的包是`pyenchant`。要在cmd/Terminal中安装此包，请输入以下内容：
- en: '[PRE17]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, create two files called `u_adds.py`in the `App/App_PySide2` and `App/App_PyQt5`
    directories (if not, choose one of them) and implement the following steps:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`App/App_PySide2`和`App/App_PyQt5`目录中创建两个名为`u_adds.py`的文件（如果没有，请选择其中一个）并执行以下步骤：
- en: 'Add the following to the import section of the PyQt5 `u_adds.py`file:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到PyQt5的`u_adds.py`文件`import`部分：
- en: '[PRE18]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the following to the `import` section of the PySide2 `u_adds.py`file:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到PySide2的`u_adds.py`文件`import`部分：
- en: '[PRE19]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the `UHighLight` class inside both `u_adds.py` files:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在两个`u_adds.py`文件中添加`UHighLight`类：
- en: '[PRE20]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This class is used to highlight the incorrect text in the text field with the
    help of the `enchant` library. To use this tool in the application's text field,
    we need to add some lines to the `u_app.py`file.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类用于在文本字段中通过`enchant`库突出显示不正确的文本。要在应用程序的文本字段中使用此工具，我们需要在`u_app.py`文件中添加一些行。
- en: 'Add these lines to the `import` section of the `u_app.py` files:'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到`u_app.py`文件的`import`部分：
- en: '[PRE21]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the `UHighLight` class to the `__init__ ()` function of the `u_app.py` files:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`UHighLight`类添加到`u_app.py`文件的`__init__()`函数中：
- en: '[PRE22]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We now need to create the dictionary. Add the `UHighLight` class instance with
    the document of the text edit field as a parameter and set the dictionary. The
    result will look like this:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要创建字典。将`UHighLight`类实例与文本编辑字段的文档作为参数添加，并设置字典。结果将看起来像这样：
- en: '![](img/93fc635d-b32d-4da2-9c1c-6b6e1c7e9fc4.png)'
  id: totrans-448
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/93fc635d-b32d-4da2-9c1c-6b6e1c7e9fc4.png)'
- en: This is just an example and is optional. Moreover, you must be careful when
    using this spellcheck function, because these tools can lead to problems with
    memory costs, and the performance of the application will suffer if constructions are
    not threaded in the right way. Other packages that provide additional dictionaries
    supporting various languages are available as well.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个示例，并且是可选的。此外，在使用这个拼写检查功能时必须小心，因为这些工具可能会导致内存成本问题，如果构造不是以正确的方式线程化，应用程序的性能将受到影响。还有其他提供额外字典的包，这些字典支持各种语言。
- en: Summary
  id: totrans-450
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The elements that were explored in this chapter are the basic components of
    the GUI application. Frames provide a convenient way to compound graphical components
    and labels improve informative visualizations. Single-line and multiline text
    fields are the most popular for user communications. In addition, PyQt5 and PySide2
    have other classes you can use to work with text, such as `QTextBrowser`, which
    improves `QTextEdit` with additional functionality. Also, `QTextDocument` of the
    `QtGui` class represents text in documented form in the text edit field and the
    `QTextCursor` class provides manipulations with the cursor.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨的元素是GUI应用程序的基本组件。框架提供了一个方便的方式来组合图形组件，标签提高了信息可视化。单行和多行文本字段在用户通信中最受欢迎。此外，PyQt5和PySide2还有其他你可以用来处理文本的类，例如`QTextBrowser`，它通过额外的功能改进了`QTextEdit`。还有，`QtGui`类的`QTextDocument`代表文本编辑字段中的文档化文本，而`QTextCursor`类提供了对光标的操作。
- en: In the next chapter, we will continue covering graphical elements and will be
    looking at mixed components, such as comboboxes and list views, which have text
    and control functionality.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续介绍图形元素，并将探讨混合组件，例如组合框和列表视图，这些组件具有文本和控制功能。
