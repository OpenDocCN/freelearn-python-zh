- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Post Comments
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帖子评论
- en: An exciting part of every social media platform is the comment functionality.
    In the previous chapter, we’ve added post creation, listing, update, and deletion
    functionality. This chapter will cover a comment’s creation, listing, update,
    and deletion. We will create a page to display information about a post, add components
    to list comments, add a modal to display a form to create comments and add a dropdown
    to allow the user to delete or modify a comment. At the end of this chapter, you
    will learn how to navigate to a single page with URL parameters using React and
    React Router.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个社交媒体平台的一个令人兴奋的部分是评论功能。在前一章中，我们已经添加了帖子创建、列出、更新和删除功能。本章将涵盖评论的创建、列出、更新和删除。我们将创建一个页面来显示关于帖子的信息，添加组件来列出评论，添加一个模态来显示创建评论的表单，并添加一个下拉菜单以允许用户删除或修改评论。在本章结束时，你将学习如何使用React和React
    Router通过URL参数导航到单个页面。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Listing comments on a post page
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在帖子页面上列出评论
- en: Creating a comment using a form
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用表单创建评论
- en: Editing and deleting a comment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑和删除评论
- en: Updating a comment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新评论
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Make sure to have VS Code and an updated browser installed and configured on
    your machine. You can find the code of this chapter at [https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap9](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap9).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在您的机器上安装并配置了VS Code和更新的浏览器。您可以在[https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap9](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap9)找到本章的代码。
- en: Creating a UI
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建UI
- en: In the next paragraphs, we will modify the `Post` component for consistency
    when displaying a single post, add a `Post` components. Before listing the comments,
    we need to ensure that the user can create comments. This will require building
    a page called `SinglePost` that will show details about a post and the comments.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的段落中，我们将修改`Post`组件以确保在显示单个帖子时的一致性，并添加一个`Post`组件。在列出评论之前，我们需要确保用户可以创建评论。这需要构建一个名为`SinglePost`的页面，该页面将显示关于帖子和评论的详细信息。
- en: 'Let’s look at the UI of the page in the following figure:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下图中的页面UI：
- en: "![Figure 9.1 – \uFEFFResult of the SinglePost page](img/Figure_9.01_B18221.jpg)"
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 – SinglePost页面的结果](img/Figure_9.01_B18221.jpg)'
- en: Figure 9.1 – Result of the SinglePost page
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – SinglePost页面的结果
- en: The UI in the preceding figure gives us a good idea of the result. When the
    page is built and the user clicks on a comment, a modal will appear, and the user
    will be able to create a comment. Let’s stick to this case first, and we’ll explore
    the other CRUD operations later.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图中的UI给了我们一个好的结果。当页面构建完成，用户点击评论时，将出现一个模态，用户将能够创建评论。让我们先关注这个案例，稍后我们将探索其他CRUD操作。
- en: Notice that we also have a back button in the top-left corner of the page –
    something to add to the `Layout` component. We will start by making some tweaks
    to the `Post.jsx` component first. This is because we are going to reuse the `Post`
    component, but we will mask options such as comment count and the **Comment**
    icon. After modifying the component, we will create a page displaying one article
    and comments.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们还在页面的左上角添加了一个返回按钮——这是要添加到`Layout`组件中的内容。我们首先将对`Post.jsx`组件进行一些调整。这是因为我们将重用`Post`组件，但我们将屏蔽如评论计数和**评论**图标等选项。修改组件后，我们将创建一个显示一篇文章及其评论的页面。
- en: Tweaking the Post component
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整Post组件
- en: The `Post` component will be simply reused to display more information about
    the post. Following the UI in *Figure 9**.1*, we will just mask the number of
    comments on the post and the **Comment** icon.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`Post`组件将被简单地重用来显示更多关于帖子的信息。根据*图9**.1*中的UI，我们只需屏蔽帖子上的评论数量和**评论**图标。'
- en: 'Inside `Post.jsx`, we will add another prop called `isSinglePost`. When this
    prop is `true`, it means that we are showing the component on the `SinglePost`
    page:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Post.jsx`内部，我们将添加另一个名为`isSinglePost`的prop。当这个prop为`true`时，意味着我们在`SinglePost`页面上显示组件：
- en: src/components/posts/Post.jsx
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/posts/Post.jsx
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With the modification done to the `Post` component, we can now add the back
    button to the `Layout` component.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在对`Post`组件进行修改后，我们现在可以向`Layout`组件添加返回按钮。
- en: Adding a back button to the Layout component
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向Layout组件添加返回按钮
- en: The back button has the role of navigating the user to the preceding page if
    the action is initiated. An interesting idea about doing that is to add the actual
    path to the component where a go-back action can happen. However, it’ll require
    a lot of code and will introduce some complexity.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 返回按钮的作用是在动作被发起时将用户导航到上一页。关于如何实现这一点的一个有趣的想法是将实际路径添加到可以发生返回动作的组件中。然而，这将需要很多代码，并引入一些复杂性。
- en: 'Thankfully, the `react-router` library provides a simple way to navigate to
    the preceding page in just one line:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，`react-router`库提供了一种简单的方法，只需一行代码就可以导航到上一页：
- en: '**navigate(-1)**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**navigate(-1)**'
- en: 'Yes! Let’s add this function to the `Layout.jsx` component:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！让我们把这个函数添加到`Layout.jsx`组件中：
- en: src/components/Layout.jsx
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/Layout.jsx
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, we added a prop called `hasNavigationBack`. This prop
    will tell React whether it should render the icon to nagivate back to the precedent
    page. The rendering process is done in the JSX code, using conditional. If `hasNavigationBack`
    is `true`, we show the **Back** icon, and the user can navigate.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们添加了一个名为`hasNavigationBack`的属性。这个属性将告诉React是否应该渲染导航到上一页的图标。渲染过程是在JSX代码中完成的，使用条件。如果`hasNavigationBack`为`true`，我们显示**返回**图标，用户可以导航。
- en: With the option of going back added, we can now move to write the `SinglePost.jsx`
    page.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了返回选项后，我们现在可以开始编写`SinglePost.jsx`页面。
- en: Creating the SinglePost component
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建SinglePost组件
- en: 'In the `src/pages` directory, create a new file called `SinglePost.jsx`. This
    file will contain the code to display information about a post and, most importantly,
    the comments. The following figure shows a simple wireframe of the page so we
    can have an idea about the layout of the components:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/pages`目录中，创建一个名为`SinglePost.jsx`的新文件。这个文件将包含显示帖子信息和，最重要的是，评论的代码。以下图显示了页面的简单线框，这样我们就可以对组件的布局有一个概念：
- en: '![Figure 9.2 – Wireframe of the SinglePost page](img/Figure_9.02_B18221.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2 – SinglePost页面的线框](img/Figure_9.02_B18221.jpg)'
- en: Figure 9.2 – Wireframe of the SinglePost page
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – SinglePost页面的线框
- en: 'Let’s move the file and start coding. In the following snippet, we will create
    the `SinglePost` page, add the imports, and define the functions and states that
    will be used on the page:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们移动文件并开始编码。在下面的代码片段中，我们将创建`SinglePost`页面，添加导入，并定义页面上将使用的函数和状态：
- en: src/pages/SinglePost.jsx
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/SinglePost.jsx
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We are using the `Row` and `Col` feature from `react-bootstrap` again. This
    structure will help us have one column taking 8/12 of the layout and having objects
    centered. Next, we need a form for comment creation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用了来自`react-bootstrap`的`Row`和`Col`功能。这种结构将帮助我们有一个占布局8/12的一列，并且对象居中。接下来，我们需要一个用于创建评论的表单。
- en: We are also using a new Hook, `useParams`. As stated in the official documentation,
    the `useParams` Hook returns an object of `<Route path>`. Child routes inherit
    all parameters from their parent routes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在使用一个新的钩子，`useParams`。正如官方文档所述，`useParams`钩子返回一个`<Route path>`的对象。子路由继承其父路由的所有参数。
- en: 'A little bit complicated to grasp, but let’s register this page and load it
    in the browser. Inside the `App.jsx` file, add a new route:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 稍微有点难以理解，但让我们注册这个页面并在浏览器中加载它。在`App.jsx`文件中，添加一个新的路由：
- en: src/App.jsx
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: src/App.jsx
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The path of the newly added route has an interesting pattern with the addition
    of `postId`. We can tell `react-router` to expect a parameter that will be passed,
    and this parameter will then be available in the `useParams` Hook.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 新增路由的路径有一个有趣的模式，随着`postId`的添加。我们可以告诉`react-router`期待一个将要传递的参数，然后这个参数将在`useParams`钩子中可用。
- en: 'Let’s add the redirection to the `SinglePost` page in the `Post` component:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`Post`组件中添加重定向到`SinglePost`页面的功能：
- en: src/components/posts/CreatePost.jsx
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/posts/CreatePost.jsx
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Inside the `SinglePost.jsx` file, add a `console` log of `useParams()`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在`SinglePost.jsx`文件中，添加`useParams()`的`console`日志：
- en: src/pages/SinglePost.jsx
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/SinglePost.jsx
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Go into the browser and click on a post to access the `SinglePost` page. You
    will have a similar result:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 进入浏览器并点击一个帖子以访问`SinglePost`页面。你将得到类似的结果：
- en: '![Figure 9.3 – Post page](img/Figure_9.03_B18221.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图9.3 – 帖子页面](img/Figure_9.03_B18221.jpg)'
- en: Figure 9.3 – Post page
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – 帖子页面
- en: 'Check the browser console to see the content of `useParams()`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 检查浏览器控制台以查看`useParams()`的内容：
- en: '![Figure 9.4 – Content of useParams()](img/Figure_9.04_B18221.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4 – useParams()的内容](img/Figure_9.04_B18221.jpg)'
- en: Figure 9.4 – Content of useParams()
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – useParams()的内容
- en: We have an object containing the `postId` value. With `useParams()` explained,
    let’s move on to add the `CreateComment` form.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个包含`postId`值的对象。使用已解释的`useParams()`，让我们继续添加`CreateComment`表单。
- en: Creating a comment
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建评论
- en: Inside the `src/components` directory, create a new directory called `comments`.
    This directory will contain the code for the `comments` feature components. Inside
    the newly created directory, create a new file called `CreateComment.jsx`. This
    component represents the form that the user will use to add comments to a post.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/components`目录内，创建一个名为`comments`的新目录。这个目录将包含`comments`功能组件的代码。在新建的目录内，创建一个名为`CreateComment.jsx`的新文件。这个组件代表用户将用来添加评论到帖子的表单。
- en: 'Once the file is created, add the required imports:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 文件创建完成后，添加所需的导入：
- en: src/components/comments/CreateComment.jsx
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/comments/CreateComment.jsx
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: On the `CreateComment` page, we are going to show toast notifications when a
    CRUD action is made. That means that we are going to use the `Context` method
    again.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CreateComment`页面上，当进行CRUD操作时，我们将显示toast通知。这意味着我们将再次使用`Context`方法。
- en: 'Let’s start by defining the props and creating `handleSubmit`. This process
    will be pretty similar to what we’ve done in the `CreatePost` component:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先定义props并创建`handleSubmit`。这个过程将与我们在`CreatePost`组件中做的非常相似：
- en: src/components/comments/CreateComment
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/comments/CreateComment
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s now add the `Form` UI:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加`Form` UI：
- en: src/component/comments/CreateComment.jsx
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: src/component/comments/CreateComment.jsx
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With the UI added, we can write the `handeSubmit` method:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: UI添加后，我们可以编写`handeSubmit`方法：
- en: src/component/comments/CreateComment.jsx
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: src/component/comments/CreateComment.jsx
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Similar to the `CreatePost` component, we are doing checks on the validity
    of the form but also sending a request to the `/post/${postId}/comment/` endpoint.
    Then, depending on the response, we show a toast and clean the form. Let’s test
    the form and add the first comment using React:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与`CreatePost`组件类似，我们在表单的有效性检查上做了工作，同时也向`/post/${postId}/comment/`端点发送请求。然后，根据响应，我们显示toast并清理表单。让我们测试表单并使用React添加第一条评论：
- en: src/pages/SinglePost.jsx
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/SinglePost.jsx
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should have a similar result:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到类似的结果：
- en: '![Figure 9.5 – Creating a comment](img/Figure_9.05_B18221.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5 – 创建评论](img/Figure_9.05_B18221.jpg)'
- en: Figure 9.5 – Creating a comment
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – 创建评论
- en: In the preceding paragraphs, we have created a page to display information about
    a post, thus allowing us to add a modal displaying a form to create a new comment
    related to this post.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的段落中，我们创建了一个页面来显示关于帖子的信息，从而允许我们添加一个显示表单的模态，用于创建与该帖子相关的新的评论。
- en: Now, we need to display the created comments.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要显示创建的评论。
- en: Listing the comments
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出评论
- en: 'We can create comments, but we can’t see them. In `src/components/comments`,
    create a new file called `CreateComment.jsx`. This will contain the code for the
    `Comment` component that will be used to show details about a comment. Here’s
    a wireframe of the `Comment` component:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建评论，但看不到它们。在`src/components/comments`中创建一个名为`CreateComment.jsx`的新文件。这个文件将包含用于显示评论详细信息的`Comment`组件的代码。以下是`Comment`组件的线框图：
- en: '![Figure 9.6 – Wireframe of the Comment component](img/Figure_9.06_B18221.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图9.6 – 评论组件的线框图](img/Figure_9.06_B18221.jpg)'
- en: Figure 9.6 – Wireframe of the Comment component
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6 – 评论组件的线框图
- en: 'Let’s move on to writing the code. Let’s start by adding the `CreateComment`
    function and the imports, and defining the state that we will use in this component:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续编写代码。让我们首先添加`CreateComment`函数和导入，并定义我们将在这个组件中使用的状态：
- en: src/components/comments/CreateComment.jsx
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/comments/CreateComment.jsx
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We have the necessary imports. Let’s start with the UI first. It’s a little
    bit like the `Post` component in its structure:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有必要的导入。让我们先从UI开始。它的结构有点像`Post`组件：
- en: src/components/comments/CreateComment.jsx
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/comments/CreateComment.jsx
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The UI for the `Comment` component is ready. Let’s see the result on a post
    page:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comment`组件的UI已经准备好了。让我们看看在帖子页面上的结果：'
- en: '![Figure 9.7 – List of comments on a post](img/Figure_9.07_B18221.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图9.7 – 帖子上的评论列表](img/Figure_9.07_B18221.jpg)'
- en: Figure 9.7 – List of comments on a post
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 – 帖子上的评论列表
- en: We also have the **More** dots in the top-right corner of each component, meaning
    that we need to implement features for the deletion and modification of a comment.
    Let’s add the deletion feature.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在每个组件的右上角有**更多**的点，这意味着我们需要实现删除和修改评论的功能。让我们添加删除功能。
- en: Deleting a comment
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除评论
- en: 'The **More** dots menu provides two options: deleting and modifying a comment.
    Let’s start by adding code and actions to delete a comment. The function has already
    been declared; we just need to add the logic:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多**点菜单提供了两个选项：删除和修改评论。让我们先添加代码和操作以删除评论。函数已经声明，我们只需要添加逻辑：'
- en: Src/components/comments/CreateComment.jsx
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Src/components/comments/CreateComment.jsx
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the `handleDelete` function, we make a request using `axios` to `/post/${postId}/comment/${comment.id}/`
    to delete a comment. Depending on the result of the HTTP request, we show a toaster
    with the correct message. Once you are done adding the code, let’s test the result:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在`handleDelete`函数中，我们使用`axios`向`/post/${postId}/comment/${comment.id}/`发送请求以删除评论。根据HTTP请求的结果，我们显示带有正确信息的吐司。一旦你添加完代码，让我们测试结果：
- en: '![Figure 9.8 – Deleting a comment](img/Figure_9.08_B18221.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图9.8 – 删除评论](img/Figure_9.08_B18221.jpg)'
- en: Figure 9.8 – Deleting a comment
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8 – 删除评论
- en: The deletion of a comment in our React application is now possible. Let’s move
    on to adding the feature for modifying comments.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的React应用程序中，现在可以删除评论了。让我们继续添加修改评论的功能。
- en: Updating a comment
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新评论
- en: 'Updating a comment will be similar to what was done in the `UpdatePost.jsx`
    file. However, I’ll assist you in writing this feature for the comments. We also
    have an exciting element to add to our comments: liking and unliking a comment,
    but as an exercise. Let’s focus on the modification of a comment. For this purpose,
    we will have to create a modal.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 更新评论将与在`UpdatePost.jsx`文件中所做的工作类似。然而，我将协助你编写这个评论功能的特性。我们还要为我们的评论添加一个令人兴奋的元素：点赞和取消点赞评论，但作为一个练习。让我们专注于评论的修改。为此，我们需要创建一个模态框。
- en: Adding the UpdateComment modal
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加更新评论的模态框
- en: 'Inside the `src/components/comments` directory, create a file called `UpdateComment.jsx`.
    This file will contain the modal and the form that will allow the user to update
    a comment:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/components/comments`目录内，创建一个名为`UpdateComment.jsx`的文件。此文件将包含模态框和允许用户更新评论的表单：
- en: src/components/comments/UpdateComment.jsx
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/comments/UpdateComment.jsx
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We are doing the required imports and defining the states that will be used
    and updated when a modification is triggered. Note that we also pass `postId`
    and the `comment` object as **props**. The first is needed for the endpoint; the
    second is also for the endpoint, but most importantly, to have a default value,
    we need to show it in the form for the user to modify.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在进行所需的导入，并定义在修改触发时将使用和更新的状态。请注意，我们还传递了`postId`和`comment`对象作为**props**。第一个是用于端点的；第二个也是用于端点的，但最重要的是，为了有一个默认值，我们需要在表单中显示它，以便用户进行修改。
- en: 'Let’s add the modal UI:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加模态UI：
- en: src/components/comments/UpdateComment.jsx
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/comments/UpdateComment.jsx
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'With the UI ready, we can now write the `handleSubmit` function:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: UI准备就绪后，我们现在可以编写`handleSubmit`函数：
- en: src/components/comments/UpdateComment.jsx
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/comments/UpdateComment.jsx
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let’s import and add this component to the `Comment.jsx` file:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将此组件导入并添加到`Comment.jsx`文件中：
- en: src/components/comments/Comment.jsx
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/comments/Comment.jsx
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After adding this piece of code, once you click on the **Modify** option of
    the **More** menu, a modal will appear, like in the following figure:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此段代码后，当你点击**更多**菜单中的**修改**选项时，会出现一个模态框，如下图所示：
- en: '![Figure 9.9 – Modify comment modal](img/Figure_9.09_B18221.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图9.9 – 修改评论模态框](img/Figure_9.09_B18221.jpg)'
- en: Figure 9.9 – Modify comment modal
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9 – 修改评论模态框
- en: 'If the modification is submitted and successful, a toast will appear at the
    top of the page:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果修改提交成功，页面上方将出现一个吐司：
- en: '![Figure 9.10 – Toast showing successful comment modification](img/Figure_9.10_B18221.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图9.10 – 显示成功修改评论的吐司](img/Figure_9.10_B18221.jpg)'
- en: Figure 9.10 – Toast showing successful comment modification
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10 – 显示成功修改评论的吐司
- en: Nice! We have completed working on CRUD actions for the comment feature. An
    exciting feature to have for the comments is the possibility to like a comment.
    It is similar to what we have done for the posts. This is the next step for this
    chapter, but also an exercise.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们已经完成了对评论功能的CRUD操作。对于评论来说，一个令人兴奋的功能是能够点赞。这与我们对帖子所做的工作类似。这是本章的下一步，也是一个练习。
- en: Liking a comment
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点赞评论
- en: 'Adding the **Like** feature to the **Comment** feature will require some changes
    to the Django API and some code to be added to the React application. First, let
    me provide you with the final result:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 将**点赞**功能添加到**评论**功能需要修改Django API和一些需要添加到React应用程序中的代码。首先，让我提供最终结果：
- en: '![Figure 9.11 – Comments with the Like feature and likes count](img/Figure_9.11_B18221.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.11 – 带有点赞功能和点赞计数的评论](img/Figure_9.11_B18221.jpg)'
- en: Figure 9.11 – Comments with the Like feature and likes count
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.11 – 带有点赞功能和点赞计数的评论
- en: 'Here is a list of the requirements of the feature:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是此功能要求列表：
- en: The user can see the number of likes on a comment
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以看到评论上的点赞数量
- en: The user can like a comment
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以点赞一条评论
- en: The user can remove a like from a comment
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以从评论中移除点赞
- en: This will require some tweaks on the Django API as well. Feel free to get inspired
    by what we’ve done for the post feature.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要对 Django API 进行一些调整。请随意从我们为帖子功能所做的工作中获取灵感。
- en: Good luck with the exercise. You can find the solution at [https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/main/social-media-react/src/components/comments/Comment.jsx](https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/main/social-media-react/src/components/comments/Comment.jsx).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你练习顺利。你可以在 [https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/main/social-media-react/src/components/comments/Comment.jsx](https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/main/social-media-react/src/components/comments/Comment.jsx)
    找到解决方案。
- en: After adding the **Like** feature to comments, we are now ready to finally add
    CRUD operations to the profile of the React application. We will create a profile
    page and allow the user to edit the information in their profile. We will also
    enable the user to update their avatar and set a default avatar image for users.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 **点赞** 功能添加到评论后，我们现在终于可以给 React 应用的个人资料添加 CRUD 操作了。我们将创建一个个人资料页面，并允许用户编辑他们个人资料中的信息。我们还将启用用户更新他们的头像，并为用户设置默认头像图片。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we focused on adding CRUD operations to the comments feature.
    We’ve learned how to play with `react-router` Hooks to retrieve parameters and
    use them in the code. We’ve also added a `useState` and `useContext` Hooks and
    the way they affect a state in React. We have also learned how to create a dropdown
    component, how to use the custom toaster, and how to tweak a component to fits
    some requirements.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于为评论功能添加 CRUD 操作。我们学习了如何使用 `react-router` Hooks 来检索参数并在代码中使用它们。我们还添加了
    `useState` 和 `useContext` Hooks 以及它们如何影响 React 中的状态。我们还学习了如何创建下拉组件，如何使用自定义的吐司组件，以及如何调整组件以满足某些要求。
- en: In the next chapter, we’ll focus on CRUD operations on the user profile, and
    we will also learn how to upload a profile picture.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于对用户个人资料的 CRUD 操作，并且我们还将学习如何上传个人资料图片。
- en: Questions
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the usage of `useParams`?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`useParams` 的用法是什么？'
- en: How do you write a route in React that can support parameter passing?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何在 React 中编写一个支持参数传递的路由？
- en: What is the use of the `useContext` Hook?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`useContext` Hook 的用途是什么？'
