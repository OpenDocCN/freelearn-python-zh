- en: Chapter 5. Generating Reports
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：生成报告
- en: While creating and executing tests does provide numerous benefits, there is
    a need to convey the results effectively to any viewer of the test, as an acceptance
    test can provide the fact that a given software can execute in a provided manner
    but cannot preserve this hypothesis. In this chapter, the concept of test reports
    in the Robot Framework will be discussed in detail, which covers understanding
    and customization of the generated reports through provided options, manual as
    well as automated changes. As the report internals are discussed in detail, report
    customization can be done with more confidence.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然创建和执行测试确实提供了许多好处，但有必要有效地传达测试结果给任何测试的观看者，因为验收测试可以提供给定软件可以以提供的方式执行的事实，但不能保留这个假设。在本章中，将详细讨论Robot
    Framework中的测试报告概念，这包括通过提供的选项理解和自定义生成的报告，包括手动和自动更改。由于报告内部讨论得非常详细，因此可以更有信心地进行报告定制。
- en: The need for reports
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告的需求
- en: 'In order to save the events and actions that occurred during the test execution
    apart from what appears on the console where the results are displayed to the
    user, there is a need to create test reports in files as it offers numerous benefits,
    some of which are outlined as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在用户显示结果的控制台上出现的事件和动作之外，还需要在测试执行过程中创建测试报告文件，因为它提供了许多好处，其中一些将在以下内容中概述：
- en: Quick-test run assessment
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测试运行评估
- en: The test results can be recalled at a glance quickly if there is a standardized
    format that can clearly identify the success or failure of tests as well as easily
    determining individual test details.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一个标准化的格式可以清楚地识别测试的成功或失败，以及轻松确定单个测试的详细信息，则可以快速查看测试结果。
- en: Result comparison
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结果比较
- en: The test results can be compared side-by-side for the same acceptance test that
    can be taken across different states of the same test, across different external
    variables, or at different times.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可以对同一验收测试的结果进行并排比较，这些结果可以在同一测试的不同状态、不同外部变量或不同时间进行测试。
- en: Individual result detailing
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单个结果详细说明
- en: The test report can detail the environment and test execution steps and other
    data in an ordered manner that is essential to determine the success of a test
    execution.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 测试报告可以以有序的方式详细说明环境、测试执行步骤和其他数据，这对于确定测试执行的成功至关重要。
- en: Intelligent assessment
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 智能评估
- en: Through the use of reports and logs, it becomes a lot easier for a person to
    analyze the execution of a test. This is quite handy when it comes to automation
    tests as analyzing the causes of failure can be tedious after the test has run.
    The populated data can also be used to obtain necessary metrics as well infer
    secondary data, such as performance of tests over a period of time, and to infer
    other details as necessary.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用报告和日志，人们分析测试执行变得容易得多。当涉及到自动化测试时，这非常有用，因为测试运行后分析失败的原因可能会很繁琐。填充的数据也可以用来获取必要的指标以及推断次要数据，例如测试在一段时间内的性能，以及根据需要推断其他细节。
- en: Generated files
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成的文件
- en: As mentioned earlier, the Robot Framework generates two HTML files that are
    log and report files. These are complementary to each other and while analyzing
    any project, you will find yourself using both of them. Apart from these files,
    an XML is generated by default that contains the metadata of all the output of
    the test results. This is helpful in in many ways that are discussed in detail
    in this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Robot Framework生成两个HTML文件，即日志和报告文件。它们是互补的，在分析任何项目时，你会发现自己正在使用这两个文件。除了这些文件之外，默认情况下还会生成一个XML文件，其中包含所有测试结果输出的元数据。这在许多方面都有帮助，这些帮助在本章中进行了详细讨论。
- en: The log file presents the detailed execution report in a hierarchical manner
    based on the different test suites. It also has the test statistics, but the high
    level overview of tests is present in the report file. The report presents the
    results in multiple ways, detailed in the following sections.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 日志文件以分层的方式呈现详细的执行报告，基于不同的测试套件。它还包括测试统计信息，但测试的高级概述在报告文件中。报告以多种方式呈现结果，以下章节将详细说明。
- en: Output structure
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出结构
- en: The test report contains the results of test execution under the following headlines
    that are explained next.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 测试报告包含以下标题下测试执行的结果，以下将进行解释。
- en: Heading
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标题
- en: The heading is the first element of the page which contains the test name and
    the time when it was generated. It also displays the elapsed time since its generation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 标题是页面上的第一个元素，包含测试名称和生成时间。它还显示自生成以来的经过时间。
- en: Summary information
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要信息
- en: This contains the summary of the test, the start and end time of the test, and
    the total time taken in the test execution.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这包含测试摘要、测试的开始和结束时间以及测试执行的总时间。
- en: Test statistics
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试统计信息
- en: These are the number of tests that are present in the test; the various tests
    are grouped on the basis of their criticality, tag, and suite. By default, all
    the tests are critical, but you can explicitly specify whether a test is critical
    or not by passing `--critical` or `--noncritical` followed by the test name in
    the pybot/jybot command. Tags can be set/unset in tests through the use of **Set
    Tags**/**Remove Tags** keywords in test cases. Additionally, this can be specified
    in suite setup that tags all the test cases in that suite file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是在测试中存在的测试数量；各种测试根据其关键性、标签和套件进行分组。默认情况下，所有测试都是关键的，但您可以通过在pybot/jybot命令中传递`--critical`或`--noncritical`后跟测试名称来明确指定测试是否关键。
- en: Test details
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试详细信息
- en: Test details are only present in test reports and contain the same information
    which is present above it in test statistics; however, they provide a more concise
    view as the different statistics are present in tabular manner. Beneath this column
    is empty space but as soon as you click any test suite above, a detailed table
    containing various properties associated with that suite and its children appear
    and the test details display the information pertaining to the suite.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 测试详细信息仅在测试报告中存在，包含与测试统计信息中相同的上述信息；然而，它们提供了一个更简洁的视图，因为不同的统计数据以表格形式呈现。在此列下方是空白空间，但只要您单击任何测试套件，就会显示包含与该套件及其子套件相关的各种属性的详细表格，并且测试详细信息显示与套件相关的信息。
- en: Test execution log
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试执行日志
- en: This is only present in the log file and contains all the logs generated from
    tests. To see the test suite hierarchy, click on the expand all button to see
    all the test suite hierarchies present in your tests. It contains the location
    of suite source files and folders, and information down to the level of keywords
    present within the tests.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅在日志文件中存在，包含从测试生成的所有日志。要查看测试套件层次结构，请单击展开全部按钮以查看测试中存在的所有测试套件层次结构。它包含套件源文件和文件夹的位置，以及测试中关键字的信息。
- en: Test coloring information
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试着色信息
- en: In any xUnit test result, red denotes failure and green denotes success. This
    coloring has also led to the popular TDD mantra of "Red, Green, Refactor" in unit
    tests, which denotes the order of development as first the tests are created with
    an intention to naturally fail followed by writing code in such a manner that
    the tests pass and finally refactoring over existing code can be made in such
    a manner that nothing is broken.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何xUnit测试结果中，红色表示失败，绿色表示成功。这种着色也导致了单元测试中流行的TDD咒语“红、绿、重构”，这表示开发顺序是首先创建测试，目的是自然失败，然后编写代码，使测试通过，最后以不破坏任何内容的方式重构现有代码。
- en: 'The following screenshot demonstrates a test application passing entirely as
    the green color background is clearly visible:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了通过测试的应用程序，绿色背景清晰可见：
- en: '![Test coloring information](img/3033_05_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![测试着色信息](img/3033_05_01.jpg)'
- en: 'Similarly, the failure of the test suite can also be reflected through the
    background color. Note that, even if a single test case fails, the entire report
    will have the color of failure and the end user can easily take note, as shown
    in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，测试套件的失败也可以通过背景颜色反映出来。请注意，即使单个测试用例失败，整个报告也将显示失败的颜色，最终用户可以轻松地注意到，如下面的截图所示：
- en: '![Test coloring information](img/3033_05_02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![测试着色信息](img/3033_05_02.jpg)'
- en: This convention is also followed in the Robot Framework as is evident from the
    report background color as well as the colors used in the executed tests inside
    the log file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这种约定在Robot Framework中也被遵循，正如报告背景颜色以及日志文件中执行测试所使用的颜色所示。
- en: Separating files
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分离文件
- en: The generated reports are generally overwritten on every execution. However,
    this can be made unique for every run by providing a unique name that can be provided
    by naming the files with a timestamp. In order to do this, the `pybot`/`jybot`/`ipybot`
    commands can be supplied with arguments that insert a timestamp along with the
    file name, which ensures uniqueness of the file names and ensures that no file
    overwrite takes place. To do this, there is a need to add the `--timestampoutputs`
    argument to these commands. This inserts the timestamp in the format, `YYYYMMDD-hhmmss`
    between the name and extension of the generated report file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的报告通常在每次执行时都会被覆盖。然而，可以通过提供唯一名称来使每次运行都独特，可以通过使用带时间戳的文件名来提供这个唯一名称。为了做到这一点，可以将`pybot`/`jybot`/`ipybot`命令与参数一起使用，这些参数会在文件名和扩展名之间插入时间戳，确保文件名的唯一性并确保不会发生文件覆盖。为此，需要将这些命令添加`--timestampoutputs`参数。这将在生成的报告文件名和扩展名之间插入时间戳，格式为`YYYYMMDD-hhmmss`。
- en: 'For instance, this can be used to specify the timestamped files:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这可以用来指定带时间戳的文件：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Making changes in outputs
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改输出
- en: Certain customizations in the generated report and log file can be made that
    can be used out of box in the Robot Framework. This can be helpful in setting
    up the test reports according to requirements without changing the report structure
    as well as without affecting the codebase in any manner.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成的报告和日志文件中可以做出某些自定义设置，这些设置可以在Robot Framework中直接使用。这有助于根据要求设置测试报告，而无需更改报告结构，也不会以任何方式影响代码库。
- en: Customizing the report title
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义报告标题
- en: The `--logtitle` and `--reporttitle` arguments can be used before the log file
    and report file names respectively to set their customized titles; otherwise,
    the defaults of the Test Log or Test Report are used wherever necessary.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`--logtitle`和`--reporttitle`参数可以在日志文件和报告文件名称之前使用，分别设置它们的自定义标题；否则，在必要时使用测试日志或测试报告的默认值。'
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While using custom names through arguments, underscores are converted into spaces
    just like the test suite file and folder names.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过参数使用自定义名称时，下划线会被转换为空格，就像测试套件文件和文件夹名称一样。
- en: 'In order to not allow files to have the standard `<root test suite> Test Report/Log`
    headline, these options can be used as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了不允许文件有标准的`<root test suite> Test Report/Log`标题，可以使用以下选项：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Background color customization
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景颜色自定义
- en: 'The color scheme used in reports does not need to be changed as it confirms
    the color used in the xUnit configuration and used in most of the other tests/testing
    tools. However, there may some cases where this might not be as good as other
    alternatives for example, a color-blind person may have trouble differentiating
    between the default colors; this could contrast with the colors used in branding,
    and so on. To specify the colors, `--reportbackground successcolor:failurecolor`
    option is provided where the color names can be provided as is, such as red, blue,
    yellow, or by providing the color hex codes like #05AE04.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 报告中使用的颜色方案不需要更改，因为它确认了xUnit配置中使用的颜色，以及大多数其他测试/测试工具中使用的颜色。然而，在某些情况下，这可能不如其他替代方案好，例如，色盲人士可能难以区分默认颜色；这可能与品牌中使用的颜色形成对比，等等。要指定颜色，提供了`--reportbackground
    successcolor:failurecolor`选项，其中颜色名称可以原样提供，如红色、蓝色、黄色，或者通过提供颜色十六进制代码如#05AE04。
- en: Changing how much is logged
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改变日志记录的多少
- en: The logging done in the tests can also be customized, which can help in allowing
    various elements and information types within the test logs. Various log levels
    can be assigned that allow the message to be printed under various scenarios.
    Some messages, however, are only issued by the Robot Framework itself, such as
    FAIL, which happens only when some test keyword is missing. Other messages such
    as Warn, Info, Debug, and Trace can also be used in problems of varying importance,
    which is similar to how most popular logging frameworks operate.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 测试中进行的日志记录也可以自定义，这有助于在测试日志中允许包含各种元素和信息类型。可以分配各种日志级别，以便在不同场景下打印消息。然而，某些消息（例如FAIL）仅由Robot
    Framework本身发出，这种情况仅发生在某些测试关键字缺失时。其他消息（如Warn、Info、Debug和Trace）也可以用于不同重要性的问题，这与大多数流行的日志框架操作方式相似。
- en: Also, logging can be customized by using logging APIs in Python programs where
    both the `robot.api.logger` as well as standard Python logging can be used.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以通过在Python程序中使用日志API来自定义日志记录，其中可以使用`robot.api.logger`以及标准的Python日志记录。
- en: 'The `--loglevel` argument is used to specify various log levels for the generated
    log file. If this is done at a level below info, then a dropdown appears below
    the report link in the log file, as shown in the following image:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`--loglevel`参数来指定生成日志文件的各种日志级别。如果这样做是在info级别以下，那么在日志文件中的报告链接下方将出现一个下拉菜单，如下面的图片所示：
- en: '![Changing how much is logged](img/3033_05_03.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![更改日志记录量](img/3033_05_03.jpg)'
- en: Changing the report format
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改报告格式
- en: At times, there is a need to make slight changes in the generated reports, which
    can be done either by customizing a CSS for the output files or making changes
    in the downloaded source code and rebuilding a custom installation of the framework.
    In this section, both these strategies of customization are discussed.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有时需要对生成的报告进行细微的修改，这可以通过自定义输出文件的CSS或修改下载的源代码并重新构建框架的定制安装来完成。在本节中，将讨论这两种定制策略。
- en: If the log file is opened in a text editor, it will display the internally used
    CSS that is inline to the file. Similarly, the report also contains jQuery embedded
    inline. By doing this, the file can be used without any dependency over an external
    file or website, and the report works over any modern browser.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在文本编辑器中打开日志文件，它将显示文件中内联使用的CSS。同样，报告中也包含内联的jQuery。通过这种方式，文件可以在不依赖外部文件或网站的情况下使用，并且报告可以在任何现代浏览器中运行。
- en: These files can be freely used as the user requires but the only thing to remember
    is that, if the reports are not generated uniquely, then the subsequent executions
    of the Robot Framework will override the report/log file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件可以根据用户的需求自由使用，但唯一需要注意的是，如果报告不是唯一生成的，那么Robot Framework的后续执行将覆盖报告/日志文件。
- en: 'To do the customization, let''s use a previously generated report, where the
    test is already completed. As this report has already been generated, it cannot
    be customized. So after loading up the report in the text editor, jump to line
    number 1247 that contains the JavaScript function which adds the content shown
    at the top right of the page as shown:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行定制，让我们使用之前生成的报告，其中测试已经完成。由于此报告已经生成，因此无法进行定制。因此，在文本编辑器中加载报告后，跳转到包含显示在页面右上角的内容的JavaScript函数所在的第1247行，如下所示：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This function loads up the time elapsed and the link to the other (log/report)
    file. Here, another div can be appended right after the `report-or-log-link` div
    that contains an image that will serve as our icon. The changed div structure
    within the same function therefore becomes:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将加载已过的时间以及指向其他（日志/报告）文件的链接。在这里，可以在包含作为我们图标的图像的`report-or-log-link` div之后立即添加另一个div。因此，在同一函数内部更改的div结构变为：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code will be responsible for the presence of an icon in the report. However,
    as this is an external image, its path must resolve correctly to the report. So,
    a web-based image URL can also be used if the report is to be sent between different
    computers or bundled together with the reports if they are also to be used offline.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将负责报告中的图标存在。然而，由于这是一个外部图像，其路径必须正确解析到报告中。因此，如果报告需要在不同的计算机之间发送或与报告一起打包以供离线使用，也可以使用基于Web的图像URL。
- en: 'Similarly, if the color of the report needs to be changed right before sending
    this report to the manager or stakeholder and that person prefers a specific color,
    then the report can be further tweaked. In line 1472, there is a JavaScript function
    that sets up the report color:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果需要在发送报告给经理或利益相关者之前更改报告的颜色，并且该人偏好特定的颜色，那么报告可以进一步调整。在第1472行，有一个JavaScript函数设置报告颜色：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Before changing this function with hardcoded values, the colors used can be
    manipulated. So, this function can be used to simply set the background color
    to white by performing the following changes to this function:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用硬编码的值更改此函数之前，可以操作使用的颜色。因此，可以通过对函数进行以下更改来简单地设置背景颜色为白色：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Changing the report format](img/3033_05_04.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![更改报告格式](img/3033_05_04.jpg)'
- en: After the previous two changes, only a page refresh is needed in order to view
    the changes which include the presence of an icon below the log link as well as
    changing the background to white.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行前两个更改之后，只需刷新页面即可查看更改，包括在日志链接下方出现图标以及将背景更改为白色。
- en: This is quite handy while quickly adjusting the generated reports but as this
    process is manual, changing reports like this becomes a chore, especially if the
    reports are large in number or are frequently overwritten.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在快速调整生成的报告时，这会非常方便，但因为这个过程是手动的，所以像这样更改报告变成了一件麻烦事，尤其是如果报告数量很多或经常被覆盖。
- en: To solve this limitation, a custom built the Robot Framework can be used. Assuming
    you have access to the entire Robot Framework repository, the files present in
    the `src/robot/htmldata` folder can be manipulated to send any customized changes
    into the framework itself; after installing the Robot Framework, such changes
    become permanent and apply over each and every report generated from the Robot
    Framework.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个限制，可以使用自定义构建的 Robot Framework。假设你有权访问整个 Robot Framework 仓库，可以操作 `src/robot/htmldata`
    文件夹中的文件，将这些自定义更改发送到框架本身；安装 Robot Framework 后，这些更改将变得永久，并应用于从 Robot Framework 生成的每个报告。
- en: Creating derived reports
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建派生报告
- en: Apart from the log and report files, an XML file is also generated as an output
    from each execution of the test and at times there may be a need to use these
    files as a basis for further analysis of tests, such as a time analysis over a
    piece of software. The XML file can be parsed and analyzed as per the custom requirements.
    In Python, processing XML is quite easy with the built in **elementtree** library
    and the different XML elements can be traversed as a tree and different operations
    can be performed over them.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 除了日志和报告文件外，每次测试执行都会生成一个 XML 文件作为输出，有时可能需要使用这些文件作为进一步分析测试的基础，例如对软件片段进行时间分析。XML
    文件可以根据自定义要求进行解析和分析。在 Python 中，使用内置的 **elementtree** 库处理 XML 非常容易，不同的 XML 元素可以作为树进行遍历，并且可以在它们上执行不同的操作。
- en: Recreating reports
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新创建报告
- en: As mentioned earlier, the Robot Framework provides a tool to recreate test output
    files from the generated metadata through the use of the **rebot** tool. This
    tool supports all the arguments of the `pybot` command as mentioned in [Chapter
    1](ch01.html "Chapter 1. Getting Started with the Robot Framework"), *Getting
    Started with the Robot Framework* and uses only the XML file generated as an output.
    This is handy if the other files are not present or while storing a huge collection
    of test results in only the XML format. However, the most important feature of
    rebot lies in combining multiple XML files into a single test, which is handy
    if you have run the same acceptance test in different environments and want to
    present the results in a single file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Robot Framework 提供了一个工具，通过使用 **rebot** 工具从生成的元数据中重新创建测试输出文件。此工具支持在 [第 1
    章](ch01.html "第 1 章. 使用 Robot Framework 入门") 中提到的 `pybot` 命令的所有参数，即 *使用 Robot
    Framework 入门*，并且仅使用生成的 XML 文件作为输出。如果其他文件不存在或仅以 XML 格式存储大量测试结果时，这会非常方便。然而，rebot
    的最重要特性在于将多个 XML 文件合并成一个单独的测试，这在你在不同环境中运行了相同的验收测试并希望将结果呈现为单个文件时非常有用。
- en: 'Suppose you have test results from different states in files such as state0.xml,
    state1.xml, state2.xml, and so on in your folder, then you can simply recreate
    a single test result with a custom named top level test suite by using:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在文件夹中有来自不同状态（如 state0.xml、state1.xml、state2.xml 等）的测试结果文件，然后你可以通过使用以下方法简单地使用自定义命名的顶级测试套件重新创建一个单独的测试结果：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Viewing differences
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看差异
- en: 'Sometimes, you have multiple test results and want to compare the differences
    between themselves. To do this, a diff tool known as **robotdiff** provides comparison
    between test cases. This is present under the `tools/robotdiff` folder in the
    robotframework source. To generate the comparison, do the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你有多份测试结果，并想比较它们之间的差异。为此，一个名为 **robotdiff** 的 diff 工具提供了测试用例之间的比较。这个工具位于 robotframework
    源代码的 `tools/robotdiff` 文件夹中。要生成比较，请执行以下操作：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The default generated report is `robotdiff.html` in the user home folder and
    the result is titled "Test Run Diff Report" with each test name obtained from
    the XML file names.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 默认生成的报告是用户主目录中的 `robotdiff.html`，结果标题为 "Test Run Diff Report"，每个测试名称都来自 XML
    文件名。
- en: Further result usage
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步使用结果
- en: As the generated metadata result file is in xUnit-compatible XML format, it
    can be used as an input for external tools that understand this format. One such
    example is the Jenkins plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Robot+Framework+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Robot+Framework+Plugin))
    that supports statistics generation based on these files.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 由于生成的元数据结果文件是xUnit兼容的XML格式，它可以作为外部工具的输入，这些工具理解这种格式。一个这样的例子是Jenkins插件([https://wiki.jenkins-ci.org/display/JENKINS/Robot+Framework+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Robot+Framework+Plugin))，它支持基于这些文件生成统计信息。
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered the output customization of the generated contents from
    test execution as the data and results arising out of tests can be re-used and
    re-analyzed. The different files and their formats used in the test outputs are
    detailed in order to proceed with their modification. Different methods of modifying
    individual reports, as well as report generation itself to suit an organization's
    demands, are explained. Further pointers on how to modify the framework and use
    programs to generate custom reports is also mentioned, along with report generation
    and usage of test reports.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了测试执行生成的内容的输出定制，因为测试产生的数据和结果可以被重用和重新分析。详细说明了测试输出中使用的不同文件及其格式，以便进行修改。解释了修改单个报告的不同方法，以及如何根据组织的需求生成报告。还提到了如何修改框架和使用程序生成自定义报告的进一步指导，以及报告生成和测试报告的使用。
