- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Advanced Server-Side Development Techniques
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级服务器端开发技术
- en: In [*Chapter 5*](B20997_05.xhtml#_idTextAnchor238), *Basic Server-Side Development*,
    you learned how to write methods for a model class, how to extend methods from
    inherited models, and how to work with record sets. This chapter will deal with
    more advanced topics, such as working with the environment of a record set, calling
    a method upon a button click, and working with `onchange` methods. The recipes
    in this chapter will help you manage more complex business problems. You will
    learn how to create an understanding by incorporating visual elements and clarifying
    the process of creating interactive features within Odoo’s application development
    process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第5章*](B20997_05.xhtml#_idTextAnchor238)，*基本服务器端开发*中，你学习了如何为模型类编写方法，如何扩展继承模型的方法，以及如何处理记录集。本章将涉及更高级的主题，例如处理记录集的环境、在按钮点击时调用方法，以及处理`onchange`方法。本章中的食谱将帮助你管理更复杂的企业问题。你将学习如何通过结合视觉元素和阐明在Odoo应用程序开发过程中创建交互式功能的过程来建立理解。
- en: 'In this chapter, we will look at the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下食谱：
- en: Changing the user that performs an action
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改执行操作的当前用户
- en: Calling a method with a modified context
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以修改后的上下文调用方法
- en: Executing raw SQL queries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行原始SQL查询
- en: Writing a wizard to guide the user
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写向导以引导用户
- en: Defining `onchange` methods
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义`onchange`方法
- en: Calling `onchange` methods on the server side
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务器端调用`onchange`方法
- en: Defining `onchange` with the `compute` method
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`compute`方法定义`onchange`
- en: Defining a model based on a SQL view
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于SQL视图定义模型
- en: Adding custom Settings options
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加自定义设置选项
- en: Implementing `init` hooks
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现`init`钩子
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you’ll require the Odoo online platform.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要Odoo在线平台。
- en: All the code used in this chapter can be downloaded from this book’s GitHub
    repository at [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter08](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter08).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有代码都可以从本书的GitHub仓库中下载，网址为[https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter08](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter08)。
- en: Changing the user that performs an action
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改执行操作的当前用户
- en: When writing business logic code, you may have to perform some actions with
    a different security context. A typical case is performing an action with `superuser`
    rights, bypassing security checks. Such a requirement arises when business requirements
    necessitate operating on records for which users do not have security access rights.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写业务逻辑代码时，你可能需要以不同的安全上下文执行一些操作。一个典型的例子是使用`superuser`权限执行操作，绕过安全检查。当业务需求需要操作用户没有安全访问权限的记录时，就会出现这种需求。
- en: This recipe will show you how to allow normal users to create the `room` record
    by using `sudo()`. Put simply, we will allow users to create `room` by themselves,
    even if they do not have the right to create a assign the `room` record.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将向你展示如何通过使用`sudo()`允许普通用户创建`room`记录。简单来说，我们将允许用户自己创建`room`，即使他们没有创建或分配`room`记录的权限。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For easier understanding, we will add a new model to manage the hostel room.
    We will add a new model called `hostel.student`. You can refer to the following
    definition to add this model:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更容易理解，我们将添加一个新的模型来管理宿舍房间。我们将添加一个名为`hostel.student`的新模型。你可以参考以下定义来添加此模型：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You will need to add a form view, an action, and a menu item to see this new
    model from the user interface. You will also need to add security rules for the
    hostel so that they can issue the hostel student. Please refer to [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo Add-On Modules*, if you don’t know how to add these things.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要添加一个表单视图、一个动作和一个菜单项，以便从用户界面中查看这个新模型。你还需要为宿舍添加安全规则，以便它们可以发布宿舍学生。如果你不知道如何添加这些内容，请参阅[*第3章*](B20997_03.xhtml#_idTextAnchor083)，*创建Odoo附加模块*。
- en: Alternatively, you can use the ready-made initial module from our GitHub code
    examples to save time. This module is available in the `Chapter08/00_initial_module`
    folder. The GitHub code examples are available at [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter08/00_initial_module](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter08/00_initial_module).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用我们从GitHub代码示例中提供的现成初始模块来节省时间。此模块位于`Chapter08/00_initial_module`文件夹中。GitHub代码示例可在[https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter08/00_initial_module](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter08/00_initial_module)找到。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'If you have tested the module, you will find that only users who have `hostel.room`
    access rights can mark a room as a manager. Non-hostel users cannot create a room
    by themselves; they need to ask a manager user:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经测试了该模块，你会发现只有具有`hostel.room`访问权限的用户才能将房间标记为管理员。非宿舍用户不能自己创建房间；他们需要请求管理员用户：
- en: 'This user has **Hostel Manager** access rights, which means they can create
    **Hostel** **Room** records:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此用户具有**宿舍管理员**访问权限，这意味着他们可以创建**宿舍** **房间**记录：
- en: '![Figure 8.1 – This user has Hostel Manager access rights](img/B20997_08_1.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1 – 此用户具有宿舍管理员访问权限](img/B20997_08_1.jpg)'
- en: Figure 8.1 – This user has Hostel Manager access rights
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 此用户具有宿舍管理员访问权限
- en: 'As shown in the following screenshot, **Hostel Manager** can also create room
    records:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下截图所示，**宿舍管理员**也可以创建房间记录：
- en: '![Figure 8.2 – Hostel Manager can create room records](img/B20997_08_2.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2 – 宿舍管理员可以创建房间记录](img/B20997_08_2.jpg)'
- en: Figure 8.2 – Hostel Manager can create room records
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 宿舍管理员可以创建房间记录
- en: 'This user has **Hostel User** access rights:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此用户具有**宿舍用户**访问权限：
- en: '![Figure 8.3 – This user has Hostel User access rights](img/B20997_08_2.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3 – 此用户具有宿舍用户访问权限](img/B20997_08_2.jpg)'
- en: Figure 8.3 – This user has Hostel User access rights
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – 此用户具有宿舍用户访问权限
- en: 'They can only see **Hostel** **Room** records:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 他们只能看到**宿舍** **房间**记录：
- en: '![Figure 8.4 – Hostel User can see only Hostel Room records](img/B20997_08_4.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 – 宿舍用户只能看到宿舍房间记录](img/B20997_08_4.jpg)'
- en: Figure 8.4 – Hostel User can see only Hostel Room records
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 宿舍用户只能看到宿舍房间记录
- en: Suppose that we want to add a new feature so that non-hostel users can create
    a room by themselves, for themselves. We will do this without giving them the
    access rights for the `hostel.room` model.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要添加一个新功能，以便非宿舍用户可以自己创建房间。我们将这样做，而不会给他们`hostel.room`模型的访问权限。
- en: So, let’s learn how to let normal hostel users student.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们学习如何让普通宿舍用户学生。
- en: 'Add the `action_assign_room()` method to the `hostel.room` model:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`action_assign_room()`方法添加到`hostel.room`模型中：
- en: '[PRE1]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the method, ensure that we are acting on a single record:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在方法中，确保我们正在对一个单一记录进行操作：
- en: '[PRE2]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Raise a warning if a student is not paid (make sure you have imported `UserError`
    at the top):'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果学生未付款，则发出警告（确保您已在顶部导入`UserError`）：
- en: '[PRE3]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Get the empty recordset of `hostel.room` as a superuser:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以超级用户身份获取`hostel.room`的空记录集：
- en: '[PRE4]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a new `room` record with the appropriate values:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有适当值的`room`记录：
- en: '[PRE5]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To trigger this method from the user interface, add the button to the student
    form view:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从用户界面触发此方法，请将按钮添加到学生表单视图中：
- en: '[PRE6]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Restart the server and update `my_hostel` to apply the given changes. After
    the update, you will see an **Assign Room** button on the student form view, as
    shown here:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动服务器并将`my_hostel`更新以应用给定更改。更新后，你将在学生表单视图中看到**分配房间**按钮，如图所示：
- en: '![Figure 8.5 – The Assign Room button on the student form view](img/B20997_08_5.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5 – 学生表单视图中的分配房间按钮](img/B20997_08_5.jpg)'
- en: Figure 8.5 – The Assign Room button on the student form view
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – 学生表单视图中的分配房间按钮
- en: When you click on that, a new room record will be created. This will also work
    for non-hostel users. You can test this by accessing Odoo as a demo user.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击它时，将创建一个新的房间记录。这对非宿舍用户也适用。你可以通过以演示用户身份访问Odoo来测试这一点。
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the first three steps, we added a new method called `action_assign_room()`.
    This method will be called when the user clicks on the **Assign Room** button
    on the student form view.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在前三个步骤中，我们添加了一个名为`action_assign_room()`的新方法。当用户在学生表单视图中点击**分配房间**按钮时，将调用此方法。
- en: In *Step 4*, we used `sudo()`. This method returns a new recordset with a modified
    `environment` in which the user has `superuser` rights. When `recordset` is called
    with `sudo()`, the environment will modify the `environment` attribute to `su`,
    which indicates the `superuser` state of the environment. You can access its status
    via `recordset.env.su`. All method calls through this `sudo` recordset are made
    with superuser privileges. To get a better idea of this, remove `.sudo()` from
    the method and then click on the `Access Error` and the user will no longer have
    access to the model. Simply using `sudo()` will bypass all security rules.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤4*中，我们使用了 `sudo()`。此方法返回一个新的记录集，其中包含修改后的 `environment`，用户在该环境中拥有 `superuser`
    权限。当使用 `sudo()` 调用 `recordset` 时，环境将修改 `environment` 属性为 `su`，这表示环境的 `superuser`
    状态。您可以通过 `recordset.env.su` 访问其状态。所有通过此 `sudo` 记录集进行的调用都带有超级用户权限。为了更好地理解这一点，请从方法中移除
    `.sudo()`，然后点击 `Access Error`，用户将不再有权访问该模型。仅使用 `sudo()` 就会绕过所有安全规则。
- en: 'If you need a specific user, you can pass a recordset containing either that
    user or the database ID of the user, as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要一个特定的用户，您可以传递一个包含该用户或该用户数据库ID的记录集，如下所示：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This code snippet allows you to search for rooms that are visible using the
    `public` user.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码片段允许您使用 `public` 用户搜索可见的房间。
- en: There’s more...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Using `sudo()`, you can bypass the access rights and security record rules.
    Sometimes, you can access multiple records that are meant to be isolated, such
    as records from different companies in multi-company environments. The `sudo()`
    recordset bypasses all the security rules of Odoo.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `sudo()`，您可以绕过访问权限和安全记录规则。有时，您可以访问本应隔离的多个记录，例如在多公司环境中来自不同公司的记录。`sudo()` 记录集绕过了
    Odoo 的所有安全规则。
- en: If you are not careful, records that are searched for in this environment may
    be linked to any company present in the database, which means that you may be
    leaking information to a user; worse, you may be silently corrupting the database
    by linking records that belong to different companies.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不小心，在此环境中搜索的记录可能会与数据库中存在的任何公司相关联，这意味着您可能会向用户泄露信息；更糟糕的是，您可能会通过将属于不同公司的记录链接起来，在不知不觉中破坏数据库。
- en: When using `sudo()`, exercise caution to avoid unintended consequences, such
    as inadvertently linking records from different companies. Ensure proper data
    segregation and consider the potential impact on data integrity and security rules
    before bypassing access rights.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `sudo()` 时，请谨慎行事，以避免意外后果，例如无意中将不同公司的记录链接起来。确保适当的数据隔离，并在绕过访问权限之前考虑对数据完整性和安全规则可能产生的影响。
- en: Important tip
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When using `sudo()`, always double-check to ensure that your calls to `search()`
    do not rely on the standard record rules to filter the results.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `sudo()` 时，始终要仔细检查您的 `search()` 调用是否依赖于标准记录规则来过滤结果。
- en: Without using `sudo()`, `search()` calls would respect standard record rules,
    potentially restricting access to records based on user permissions. This could
    lead to incomplete or inaccurate search results, affecting data visibility and
    application functionality.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用 `sudo()`，`search()` 调用将尊重标准记录规则，可能会根据用户权限限制对记录的访问。这可能导致搜索结果不完整或不准确，影响数据可见性和应用程序功能。
- en: See also
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: 'Check out these references for more information:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅以下参考资料以获取更多信息：
- en: If you want to learn more about environments, refer to the *Obtaining an empty
    recordset for a model* recipe in [*Chapter 5*](B20997_05.xhtml#_idTextAnchor238),
    *Basic* *Server-Side Development*
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于环境的信息，请参阅[*第5章*](B20997_05.xhtml#_idTextAnchor238)，*基本* *服务器端开发*中的*为模型获取空记录集*配方。
- en: For more information about access control lists and record rules, check out
    [*Chapter 10*](B20997_10.xhtml#_idTextAnchor549), *Security Access*
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关访问控制列表和记录规则的更多信息，请参阅[*第10章*](B20997_10.xhtml#_idTextAnchor549)，*安全访问*
- en: Calling a method with a modified context
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用一个修改过的上下文的方法
- en: '`context` is part of the environment of a recordset. It is used to pass extra
    information, such as the time zone and the language of the user, from the user
    interface. You can also use the context to pass the parameters specified in the
    actions. Several methods in the standard Odoo add-ons use the context to adapt
    their business logic based on these context values. It is sometimes necessary
    to modify the context on a `recordset` value to get the desired results from a
    method call or the desired value for a computed field.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`context` 是记录集环境的一部分。它用于传递额外的信息，例如用户的时区和语言，从用户界面传递。你也可以使用上下文来传递动作中指定的参数。标准
    Odoo 扩展中的几个方法使用上下文根据这些上下文值调整其业务逻辑。有时需要修改 `recordset` 中的上下文值，以从方法调用中获得所需的结果或计算字段的所需值。'
- en: This recipe will show you how to change the behavior of a method based on values
    in the environmental context.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱将向你展示如何根据环境上下文中的值更改方法的行为。
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the `my_hostel` module from the previous recipe.
    On the form view of the `hostel.room` model, we will add a button to remove room
    members. If a regular resident of a hostel removes other occupants from their
    assigned room without permission or authorization, it could create disruptions
    and issues within the accommodation. Note that we already have the same button
    in the form view of the room, but here, we will explore context usage in Odoo,
    gaining insights into how it influences system operations and outcomes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用之前菜谱中的 `my_hostel` 模块。在 `hostel.room` 模型的表单视图中，我们将添加一个按钮来移除房间成员。如果宿舍的普通居民未经许可或授权从其分配的房间中移除其他居住者，可能会在住宿中造成混乱和问题。请注意，我们已经在房间表单视图中有了相同的按钮，但在这里，我们将探讨
    Odoo 中的上下文使用，深入了解它如何影响系统操作和结果。
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To add a button, you need to perform the following steps:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个按钮，你需要执行以下步骤：
- en: 'Add a `hostel.room`:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `hostel.room`：
- en: '[PRE8]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the `action_remove_room_members()` method to the `hostel.room` model:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `action_remove_room_members()` 方法添加到 `hostel.room` 模型中：
- en: '[PRE9]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following code to the method to change the context of the environment
    and call the method to remove the room members:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到方法中，以更改环境上下文并调用移除房间成员的方法：
- en: '[PRE10]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Update the `action_remove_room()` method of the `hostel.student` model so that
    a different behavior is exhibited:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `hostel.student` 模型的 `action_remove_room()` 方法，以便展示不同的行为：
- en: '[PRE11]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In Odoo, to modify behavior influenced by context, we did the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Odoo 中，为了修改受上下文影响的操作行为，我们做了以下操作：
- en: Identified the target behavior.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定了目标行为。
- en: Defined the contextual parameters.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义了上下文参数。
- en: Adapted the relevant code sections.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改了相关的代码部分。
- en: Tested the changes thoroughly.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仔细测试了更改。
- en: Ensured compatibility across modules.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保模块间的兼容性。
- en: In *Step 1*, we removed the room members.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们移除了房间成员。
- en: In *Step 2*, we added a new button, **Remove Room Members**. The user will use
    this button to **Remove** **the Members**.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 2* 中，我们添加了一个新的按钮，**移除房间成员**。用户将使用此按钮来 **移除** **成员**。
- en: In *Steps 3* and *4*, we added a method that will be called when the user clicks
    on the **Remove Room** **Members** button.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 3* 和 *步骤 4* 中，我们添加了一个方法，当用户点击 **移除房间成员** 按钮时会被调用。
- en: In *Step 5*, we called `student.with_context()` with some keyword arguments.
    This returns a new version of the `room_id` recordset with an updated context.
    We are adding one key to the context here, `is_hostel_room=True`, but you can
    add multiple keys if you want. We used `sudo()` here.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 5* 中，我们使用一些关键字参数调用了 `student.with_context()`。这返回了一个带有更新上下文的新版本的 `room_id`
    记录集。我们在这里添加了一个键到上下文中，`is_hostel_room=True`，但如果你想的话，可以添加多个键。在这里我们使用了 `sudo()`。
- en: In *Step 6*, we checked whether the context had a positive value for the `is_hostel_room`
    key.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 6* 中，我们检查了上下文中 `is_hostel_room` 键的值是否为正。
- en: Now, when the hostel room removes room members in the student form view, the
    `room` recordset is `False`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当宿舍房间在学生表单视图中移除房间成员时，`room` 记录集为 `False`。
- en: This is just a simple example of a modified context, but you can use any method,
    such as `create()`, `write()`, `unlink()`, and so on. You can also use any custom
    method based on your requirements.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个修改过的上下文示例，但你可以使用任何方法，例如 `create()`、`write()`、`unlink()` 等。你也可以根据需求创建任何自定义方法。
- en: There’s more...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'It is also possible to pass a dictionary to `with_context()`. In this case,
    the dictionary is used as the new context, which overwrites the current one. So,
    *Step 5* can also be written as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以向`with_context()`传递一个字典。在这种情况下，该字典用作新的上下文，它将覆盖当前的上下文。因此，*步骤5*也可以写成以下形式：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See also
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: 'Refer to the following recipes to learn more about contexts in Odoo:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下配方来了解Odoo中上下文的更多信息：
- en: The *Obtaining an empty recordset for a model* recipe in [*Chapter 5*](B20997_05.xhtml#_idTextAnchor238),
    *Basic Server-Side Development*, explains what the environment is
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[*第5章*](B20997_05.xhtml#_idTextAnchor238)的*获取空记录集的模型*配方中，*基本服务器端开发*解释了环境是什么
- en: The *Passing parameters to forms and actions – context* recipe in [*Chapter
    9*](B20997_09.xhtml#_idTextAnchor446), *Backend Views*, explains how to modify
    the context in action definitions
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[*第9章*](B20997_09.xhtml#_idTextAnchor446)的*传递参数到表单和动作 – 上下文*配方中，*后端视图*解释了如何在动作定义中修改上下文
- en: The *Search for records* recipe in [*Chapter 5*](B20997_05.xhtml#_idTextAnchor238),
    *Basic Server-Side Development*, explains active records
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[*第5章*](B20997_05.xhtml#_idTextAnchor238)的*搜索记录*配方中，*基本服务器端开发*解释了活动记录
- en: Executing raw SQL queries
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行原始SQL查询
- en: Most of the time, you can perform the operations you want by using Odoo’s ORM
    – for example, you can use the `search()` method to fetch records. However, sometimes,
    you need more; either you cannot express what you want using the domain syntax
    (for which some operations are tricky, if not downright impossible) or your query
    requires several calls to `search()`, which ends up being inefficient.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，你可以通过使用Odoo的ORM来执行你想要的操作——例如，你可以使用`search()`方法来获取记录。然而，有时你需要更多；要么你不能使用域语法来表达你想要的（对于某些操作来说可能很棘手，甚至根本不可能），或者你的查询需要多次调用`search()`，这最终变得效率低下。
- en: This recipe shows you how to use raw SQL queries to get the name and amount
    a user keeps in a particular room.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方展示了如何使用原始SQL查询来获取用户在特定房间中保存的名称和数量。
- en: Getting ready
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the `my_hostel` module from the previous recipe.
    For simplicity, we will just print the results in a log, but in real scenarios,
    you will need to use the query result in your business logic. In [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*, we will display the result of this query in the user interface.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '对于这个配方，我们将使用前一个配方中的`my_hostel`模块。为了简单起见，我们将在日志中打印结果，但在实际场景中，你需要在你的业务逻辑中使用查询结果。在[*第9章*](B20997_09.xhtml#_idTextAnchor446)的*后端视图*中，我们将显示此查询的结果。 '
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To get information about the name and amount a user keeps in a particular room,
    you need to perform the following steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取用户在特定房间中保存的名称和数量信息，你需要执行以下步骤：
- en: 'Add the `action_category_with_amount()` method to `hostel.room`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`action_category_with_amount()`方法添加到`hostel.room`：
- en: '[PRE13]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the method, write the following SQL query:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在方法中，编写以下SQL查询：
- en: '[PRE14]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Execute the query:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行查询：
- en: '[PRE15]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Fetch the result and log it (make sure you have imported `logger`):'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取结果并记录它（确保你已经导入了`logger`）：
- en: '[PRE16]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add a button in the form view of the `hostel.room` mode to trigger our method:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`hostel.room`模式的表单视图中添加一个按钮来触发我们的方法：
- en: '[PRE17]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Don’t forget to import `logger` in this file. Then, restart and update the `my_hostel`
    module.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在此文件中导入`logger`。然后，重新启动并更新`my_hostel`模块。
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *Step 1*, we added the `action_category_with_amount()` method, which will
    be called when the user clicks on the **Log Category With** **Amount.** button.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，我们添加了`action_category_with_amount()`方法，当用户点击**带有金额的日志类别**按钮时将被调用。
- en: 'In *Step 2*, we declared a SQL **SELECT** query. This will return the category
    that states the amount in a hostel room. If you run this query in the PostgreSQL
    CLI, you will get a result based on your room data. Here is the sample date based
    on my database:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，我们声明了一个SQL **SELECT**查询。这将返回表示宿舍房间中数量的类别。如果你在PostgreSQL CLI中运行此查询，你将根据你的房间数据得到一个结果。以下是基于我的数据库的示例数据：
- en: '[PRE18]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In *Step 4*, we called the `execute()` method on the database cursor stored
    in `self.env.cr`. This sends the query to PostgreSQL and executes it.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤4*中，我们在`self.env.cr`中存储的数据库游标上调用`execute()`方法。这将查询发送到PostgreSQL并执行它。
- en: In *Step 5*, we used the `fetchall()` method of the cursor to retrieve a list
    of rows selected by the query. This method returns a list of rows. In my case,
    this is `[('Single Room', 3000)]`. From the form of the query we execute, we know
    that each row will have exactly two values, the first being `name` and the other
    being the amount a user holds in a particular room. Then, we simply log it.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 5* 中，我们使用了游标的 `fetchall()` 方法来检索查询选择的行列表。此方法返回行列表。在我的情况下，这是 `[('Single
    Room', 3000)]`。从我们执行的查询形式来看，我们知道每一行将恰好有两个值，第一个是 `name`，另一个是用户在特定房间中的金额。然后，我们简单地记录下来。
- en: In *step 6*, we added an `Add` button to handle user actions.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 6* 中，我们添加了一个 `添加` 按钮来处理用户操作。
- en: Important note
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you are executing an `UPDATE` query, you need to manually invalidate the
    cache since Odoo ORM’s cache is unaware of the changes you made with the `UPDATE`
    query. To invalidate the cache, you can use `self.invalidate_cache()`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在执行 `UPDATE` 查询，你需要手动使缓存无效，因为 Odoo ORM 的缓存不知道你用 `UPDATE` 查询所做的更改。要使缓存无效，你可以使用
    `self.invalidate_cache()`。
- en: There’s more...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The object in `self.env.cr` is a thin wrapper around a `psycopg2` cursor. The
    following methods are the ones that you will want to use most of the time:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`self.env.cr` 中的对象是围绕 `psycopg2` 游标的一个薄包装。以下是你大部分时间会想使用的方法：'
- en: '`execute(query, params)`: This executes the SQL query with the parameters marked
    as `%s` in the query substituted with the values in `params`, which is a tuple'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execute(query, params)`: 这将使用在查询中标记为 `%s` 的参数执行 SQL 查询，其中 `params` 是一个元组'
- en: Warning
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Never do the substitution yourself; always use formatting options such as `%s`.
    If you use a technique such as string concatenation, it can make the code vulnerable
    to SQL injection.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要自己进行替换；始终使用格式化选项，如 `%s`。如果你使用字符串连接等技术，可能会使代码容易受到 SQL 注入攻击。
- en: '`fetchone()`: This returns one row from the database, wrapped in a tuple (even
    if only one column has been selected by the query)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fetchone()`: 这将返回数据库中的一行，封装在元组中（即使查询只选择了一个列）'
- en: '`fetchall()`: This returns all the rows from the database as a list of tuples'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fetchall()`: 这将返回数据库中的所有行，作为一个元组的列表'
- en: '`dictfetchall()`: This returns all the rows from the database as a list of
    dictionaries mapping column names to values'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dictfetchall()`: 这将返回数据库中的所有行，作为一个字典列表，映射列名到值'
- en: 'Be very careful when dealing with raw SQL queries:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理原始 SQL 查询时要非常小心：
- en: You are bypassing all the security of the application. Ensure that you call
    `search([('id', 'in', tuple(ids)])` with any list of IDs you are retrieving to
    filter out records to which the user has no access.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你正在绕过应用程序的所有安全性。确保你使用任何你检索的 ID 列表调用 `search([('id', 'in', tuple(ids)])` 来过滤掉用户无权访问的记录。
- en: Any modifications you are making are bypassing the constraints set by the add-on
    modules, except the `NOT NULL`, `UNIQUE`, and `FOREIGN KEY` constraints, which
    are enforced at the database level. This is also the case for any computed field
    recomputation triggers, so you may end up corrupting the database.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你所做的任何修改都会绕过附加模块设置的约束，除了 `NOT NULL`、`UNIQUE` 和 `FOREIGN KEY` 约束，这些约束在数据库级别强制执行。这也适用于任何计算字段重新计算触发器，因此你可能会损坏数据库。
- en: Avoid the `INSERT/UPDATE` query – inserting or updating records via queries
    will not run any business logic written by overriding the `create()` and `write()`
    methods. It will not update stored compute fields and the ORM constraints will
    be bypassed too.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用 `INSERT/UPDATE` 查询 – 通过查询插入或更新记录不会运行通过重写 `create()` 和 `write()` 方法编写的任何业务逻辑。它不会更新存储的计算字段，并且也会绕过
    ORM 约束。
- en: See also
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For access rights management, refer to [*Chapter 10*](B20997_10.xhtml#_idTextAnchor549),
    *Security Access*.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于访问权限管理，请参阅 [*第 10 章*](B20997_10.xhtml#_idTextAnchor549)，*安全访问*。
- en: Writing a wizard to guide the user
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写向导以引导用户
- en: In the *Using abstract models for reusable model features* recipe in [*Chapter
    4*](B20997_04.xhtml#_idTextAnchor118), *Application Models*, the `models.TransientModel`
    base class was introduced. This class has a lot in common with normal models,
    except that the records of transient models are periodically cleaned up in the
    database, hence the name transient. These are used to create wizards or dialogue
    boxes, which are filled in the user interface by the users and are generally used
    to perform actions on the persistent records of the database.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第4章*](B20997_04.xhtml#_idTextAnchor118) 的 *使用抽象模型实现可重用模型功能* 菜谱中，介绍了 `models.TransientModel`
    基类。这个类与普通模型有很多共同之处，除了瞬态模型的记录在数据库中定期清理，因此得名瞬态。这些用于创建向导或对话框，用户在用户界面中填写，通常用于对数据库的持久记录执行操作。
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the `my_hostel` module from the previous recipes.
    This recipe will add a new wizard. With this wizard, the user will be assigned
    the room.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用之前菜谱中的 `my_hostel` 模块。这个菜谱将添加一个新的向导。使用这个向导，用户将被分配房间。
- en: How to do it...
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Follow these steps to add a new wizard for updating the assign room and hostel
    records:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加一个新的向导以更新分配房间和宿舍记录：
- en: 'Add a new transient model to the module with the following definition:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下定义向模块添加一个新的瞬态模型：
- en: '[PRE19]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the `callback` method that performs the action on the transient model.
    Add the following code to the `AssignRoomStudentWizard` class:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加执行在瞬态模型上操作的 `callback` 方法。将以下代码添加到 `AssignRoomStudentWizard` 类中：
- en: '[PRE20]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a form view for the model. Add the following view definition to the
    module views:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为模型创建一个表单视图。将以下视图定义添加到模块视图：
- en: '[PRE21]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create an action and a menu entry to display the wizard. Add the following
    declarations to the module menu file:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个动作和一个菜单项以显示向导。将以下声明添加到模块菜单文件中：
- en: '[PRE22]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add access rights for `assign.room.student.wizard` in the `ir.model.access.csv`
    file:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ir.model.access.csv` 文件中为 `assign.room.student.wizard` 添加访问权限：
- en: '[PRE23]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Update the `my_hostel` module to apply the changes.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `my_hostel` 模块更新以应用更改。
- en: How it works...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *Step 1*, we defined a new model. It is no different from other models, apart
    from the base class, which is `TransientModel` instead of `Model`. Both `TransientModel`
    and `Model` share a common base class, called `BaseModel`, and if you check the
    source code of Odoo, you will see that 99% of the work is in `BaseModel` and that
    both `Model` and `TransientModel` are almost empty.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第一步* 中，我们定义了一个新的模型。它与其他模型没有区别，除了基类是 `TransientModel` 而不是 `Model`。`TransientModel`
    和 `Model` 都有一个共同的基类，称为 `BaseModel`，如果您检查 Odoo 的源代码，您会看到 99% 的工作都在 `BaseModel`
    中，而 `Model` 和 `TransientModel` 几乎都是空的。
- en: 'The only things that change for the `TransientModel` records are as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `TransientModel` 记录，唯一发生变化的是以下内容：
- en: Records are periodically removed from the database so that the tables for transient
    models do not grow over time
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录会定期从数据库中删除，以便瞬态模型的表不会随着时间的推移而增长
- en: You are not allowed to define `one2many` fields on a `TransientModel` instance
    that refers to a normal model as this will add a column on the persistent model
    that links to transient data
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不允许在指向普通模型的 `TransientModel` 实例上定义 `one2many` 字段，因为这将在持久模型上添加一个指向瞬态数据的列
- en: Use *many2many* relations in this case. You can, of course, use *one2many* fields
    if the related model in *one2many* is also `TransientModel`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在此情况下使用 *many2many* 关系。当然，如果 *one2many* 中的相关模型也是 `TransientModel`，您也可以使用 *one2many*
    字段。
- en: We define one field in the model for storing the room. We can add other scalar
    fields so that we can record a scheduled return date, for instance.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在模型中定义一个字段用于存储房间。我们可以添加其他标量字段，以便我们可以记录一个计划返回日期，例如。
- en: In *Step 2*, we added the code to the wizard class that will be called when
    the button defined in *Step 3* is clicked on. This code reads the values from
    the wizard and updates the `hostel.student` record.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第二步* 中，我们向向导类中添加了代码，当在 *第三步* 中点击定义的按钮时将被调用。此代码读取向导的值并更新 `hostel.student`
    记录。
- en: In *Step 3*, we defined a view for our wizard. Refer to the *Document-style
    forms* recipe in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446), *Backend Views*,
    for details. The important point here is the button in the footer; the `type`
    attribute is set to `'object'`, which means that when the user clicks on the button,
    the method with the name specified by the name attribute of the button will be
    called.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在**步骤3**中，我们为我们的向导定义了一个视图。有关详细信息，请参阅[*第9章*](B20997_09.xhtml#_idTextAnchor446)中的*文档式表单*食谱，*后端视图*。这里的重要点是页脚中的按钮；`type`属性设置为`'object'`，这意味着当用户点击按钮时，将调用按钮的`name`属性指定的方法。
- en: 'In *Step 4*, we ensured that we had an entry point for our wizard in the menu
    of the application. We use `target=''new''` in the action so that the form view
    is displayed as a dialogue box over the current form. Refer to the *Adding a menu
    item and window action* recipe in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*, for details:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在**步骤4**中，我们确保在我们的应用程序菜单中有一个向导的入口点。我们在动作中使用`target='new'`，这样表单视图就会以对话框的形式显示在当前表单之上。有关详细信息，请参阅[*第9章*](B20997_09.xhtml#_idTextAnchor446)中的*添加菜单项和窗口动作*食谱，*后端视图*：
- en: '![Figure 8.6 – Wizard for assigning a room to a student](img/B20997_08_6.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6 – 为学生分配房间的向导](img/B20997_08_6.jpg)'
- en: Figure 8.6 – Wizard for assigning a room to a student
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – 为学生分配房间的向导
- en: In *Step 5*, we added access rights for the `assign.room.student.wizard` model.
    With this, the manager user will get full rights to the `assign.room.student.wizard`
    model.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在**步骤5**中，我们为`assign.room.student.wizard`模型添加了访问权限。有了这个，管理员用户将获得对`assign.room.student.wizard`模型的完全权限。
- en: Note
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Before Odoo v14, `TransientModel` didn’t require any access rules. Anyone can
    create a record, and they can only access records created by themselves. With
    Odoo v14, access rights are compulsory for `TransientModel`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo v14之前，`TransientModel`不需要任何访问规则。任何人都可以创建记录，并且他们只能访问自己创建的记录。从Odoo v14开始，`TransientModel`需要访问权限。
- en: There’s more...
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here are some tips to enhance your wizards.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些提高你的向导的技巧。
- en: Using the context to compute default values
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用上下文来计算默认值
- en: 'The wizard we are presenting requires the user to fill in the name of the member
    in the form. There is a feature of the web client that we can use to save some
    typing. When an action is executed, `context` is updated with some values that
    can be used by wizards:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们展示的向导需要用户在表单中填写成员的名称。我们可以使用Web客户端的一个功能来节省一些输入。当执行动作时，`context`会更新一些可以由向导使用的值：
- en: '`active_model`: This is the name of the model related to the action. This is
    generally the model being displayed onscreen.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active_model`：这是与动作相关的模型名称。这通常是屏幕上显示的模型。'
- en: '`active_id`: This indicates that a single record is active and provides the
    ID of that record.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active_id`：这表示有一个单个记录处于活动状态，并提供该记录的ID。'
- en: '`active_ids`: If several records are selected, this will be a list containing
    the IDs. This happens when several items are selected in a tree view when the
    action is triggered. In a form view, you get `[active_id]`.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active_ids`：如果选择了多个记录，这将是一个包含ID的列表。当在树视图中选择多个项目并触发动作时会发生这种情况。在表单视图中，你得到`[active_id]`。'
- en: '`active_domain`: This is an additional domain on which the wizard will operate.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active_domain`：这是向导将操作的一个附加域。'
- en: 'These values can be used to compute the default values of the model or even
    directly in the method called by the button. To improve on the example in this
    recipe, if we had a button displayed on the form view of a `hostel.room` model
    to launch the wizard, the context of the creation of the wizard would contain
    `{''active_model'': ''hostel.room'', ''active_id'': <hostel_room_id>}`. In that
    case, you could define the `room_id` field to get a default value computed by
    the following method:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '这些值可以用来计算模型的默认值，甚至可以直接用于按钮调用的方法中。为了改进本食谱中的示例，如果我们有一个在`hostel.room`模型表单视图中显示的按钮来启动向导，那么向导创建的上下文将包含`{''active_model'':
    ''hostel.room'', ''active_id'': <hostel_room_id>}`。在这种情况下，你可以定义`room_id`字段来获取以下方法计算出的默认值：'
- en: '[PRE24]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Wizards and code reuse
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向导和代码复用
- en: 'In *Step 2*, we can add `self.ensure_one()` at the beginning of the method,
    as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在**步骤2**中，我们可以在方法的开头添加`self.ensure_one()`，如下所示：
- en: '[PRE25]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We recommend using v17 in this recipe. It will allow us to reuse the wizard
    from other parts of the code by creating records for the wizard and putting them
    in a single recordset (refer to the *Combining recordsets* recipe in [*Chapter
    5*](B20997_05.xhtml#_idTextAnchor238), *Basic Server-Side Development*, to see
    how to do this) before calling `add_room_in_student()` on the recordset. Here,
    the code is trivial, and you don’t need to jump through all those hoops to record
    that some rooms have been assigned by different students. However, in an Odoo
    instance, some operations are much more complex, and it is always nice to have
    a wizard available that does the right thing. When using these wizards, ensure
    that you check the source code for any possible use of the `active_model/active_id/active_ids`
    keys from the context. If this is the case, you need to pass a custom context
    (refer to the *Calling a method with a modified* *context* recipe).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议在此食谱中使用 v17。它将允许我们通过为向导创建记录并将它们放入单个记录集中来重用向导的其他部分（有关如何做到这一点，请参阅 [*第 5 章*](B20997_05.xhtml#_idTextAnchor238)
    中的 *结合记录集* 食谱，*基本服务器端开发*），然后在记录集上调用 `add_room_in_student()`。在这里，代码很简单，你不需要跳过所有那些环来记录不同学生分配了哪些房间。然而，在
    Odoo 实例中，某些操作要复杂得多，有一个能够正确执行操作的向导总是很方便。当使用这些向导时，请确保检查源代码中任何可能的 `active_model/active_id/active_ids`
    键的上下文使用。如果是这种情况，您需要传递一个自定义上下文（请参阅 *使用修改后的上下文调用方法* 食谱）。
- en: Redirecting the user
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重定向用户
- en: 'The method in *Step 2* doesn’t return anything. This will cause the wizard
    dialogue to be closed after the action is performed. Another possibility is to
    have the method return a dictionary with the fields of `ir.action`. In this case,
    the web client will process the action as if a menu entry had been clicked on
    by the user. The `get_formview_action()` method defined in the `BaseModel` class
    can be used to achieve this. For instance, if we wanted to display the form view
    of the hostel room, we could have written the following:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 2* 中的方法不返回任何内容。这将在执行操作后关闭向导对话框。另一种可能性是让该方法返回一个包含 `ir.action` 字段的字典。在这种情况下，Web
    客户端将处理操作，就像用户点击了菜单项一样。可以在 `BaseModel` 类中定义的 `get_formview_action()` 方法用来实现这一点。例如，如果我们想显示宿舍房间的表单视图，我们可以编写以下代码：'
- en: '[PRE26]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This builds a list of rooms that have rooms from this wizard (in practice, there
    will only be one such room when the wizard is called from the user interface)
    and creates a dynamic action, which displays the room with the specified IDs.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这将构建一个包含来自此向导的房间列表（实际上，当从用户界面调用向导时，将只有一个这样的房间）并创建一个动态操作，显示具有指定 ID 的房间。
- en: The *redirecting the user* technique can be used to create a wizard that must
    perform several steps one after the other. Each step in the wizard can use the
    values of the previous steps by providing a **Next** button. This will call a
    method defined on the wizard that updates some fields on the wizard, returns an
    action that will redisplay the same updated wizard, and gets ready for the next
    step.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '*重定向用户* 技术可用于创建必须依次执行多个步骤的向导。向导中的每个步骤都可以通过提供一个 **下一步** 按钮来使用前一个步骤的值。这将调用向导上定义的方法，更新向导上的某些字段，返回一个将重新显示相同更新后的向导的操作，并为下一个步骤做好准备。'
- en: See also
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: 'Please refer to the following recipes for more details:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下食谱以获取更多详细信息：
- en: Refer to the *Document-style forms* recipe in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*, for more details on defining a view for a wizard
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关为向导定义视图的更多详细信息，请参阅 [*第 9 章*](B20997_09.xhtml#_idTextAnchor446) 中的 *文档样式表单*
    食谱，*后端视图*。
- en: To understand more about views and calling server-side methods, refer to the
    *Adding a menu item and window action* recipe in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解有关视图和调用服务器端方法的更多信息，请参阅 [*第 9 章*](B20997_09.xhtml#_idTextAnchor446) 中的 *添加菜单项和窗口操作*
    食谱，*后端视图*。
- en: For more details on creating records for the wizard and putting them in a single
    recordset, refer to the *Combining recordsets* recipe in [*Chapter 5*](B20997_05.xhtml#_idTextAnchor238),
    *Basic* *Server-Side Development*
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关为向导创建记录并将它们放入单个记录集中的更多详细信息，请参阅 [*第 5 章*](B20997_05.xhtml#_idTextAnchor238)
    中的 *结合记录集* 食谱，*基本服务器端开发*。
- en: Defining onchange methods
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义 on_change 方法
- en: When writing business logic, it is often the case that some fields are interrelated.
    We looked at how to specify constraints between fields in the *Adding constraint
    validations to a model* recipe in [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118),
    *Application Models*. This recipe illustrates a slightly different concept. Here,
    `onchange` methods are called when a field is modified in the user interface to
    update the values of other fields of the record in the web client, usually in
    a form view.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写业务逻辑时，通常某些字段是相互关联的。我们在[*第4章*](B20997_04.xhtml#_idTextAnchor118)的*向模型添加约束验证*配方中探讨了如何指定字段之间的约束，*应用模型*。这个配方展示了一个稍微不同的概念。在这里，当用户界面中的字段被修改时，会调用`onchange`方法来更新客户端记录中其他字段的值，通常是在表单视图中。
- en: We will illustrate this by providing a wizard similar to the one defined in
    the *Writing a wizard to guide the user* recipe, but that can be used to record
    duration returns. When a date is set in the form view, the duration is updated
    for the student. While we are demonstrating `onchange` methods on `Model`, these
    features are also available on normal `Transient` models.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过提供一个类似于在*编写一个向导以引导用户*配方中定义的向导来演示这一点，但可以用来记录持续时间返回。当在表单视图中设置日期时，学生的持续时间将被更新。虽然我们在`Model`上演示了`onchange`方法，但这些功能也适用于正常的`Transient`模型。
- en: Getting ready
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the `my_hostel` module from the *Writing a form
    to guide the user* recipe of this chapter. We will create a hostel student and
    add an `onchange` method that will auto-fill the duration when a user selects
    a discharge date or admission date field.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将使用本章*编写一个表单以引导用户*配方中的`my_hostel`模块。我们将创建一个宿舍学生并添加一个`onchange`方法，当用户选择出院日期或入院日期字段时，将自动填充持续时间。
- en: 'You will also want to prepare your work by defining the following model for
    the form view:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 您还希望通过定义以下模型来准备您的工作：
- en: '[PRE27]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Finally, you will need to define a view. These steps will be left as an exercise
    for you to carry out.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您需要定义一个视图。这些步骤将留作练习，由您来完成。
- en: How to do it...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To automatically populate the duration to return when the user is changed,
    you need to add an `onchange` method in the `HostelStudent` step, with the following
    definition:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在用户更改时自动填充返回的持续时间，您需要在`HostelStudent`步骤中添加一个`onchange`方法，其定义如下：
- en: '[PRE28]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: An `onchange` method uses the `@api.onchange` decorator, which is passed the
    names of the fields that change and will thus trigger the call to the method.
    In our case, we say that whenever `admission_date` or `discharge_date` is modified
    in the user interface, the method must be called.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`onchange`方法使用`@api.onchange`装饰器，它传递了更改的字段名称，因此将触发对该方法的调用。在我们的情况下，我们说每当用户界面中的`admission_date`或`discharge_date`被修改时，必须调用该方法。'
- en: In the body of the method, we calculated the duration, and we used an attribute
    assignment to update the `duration` attribute of the from view.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法体内，我们计算了持续时间，并使用属性赋值来更新表单视图的`duration`属性。
- en: There’s more...
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: As we have seen in this recipe, the basic use of `onchange` methods is to compute
    new values for fields when some other fields are changed in the user interface.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本配方中看到的，`onchange`方法的基本用途是在用户界面中更改某些其他字段时为字段计算新值。
- en: Inside the body of the method, you get access to the fields that are displayed
    in the current view of the record, but not necessarily all the fields of the model.
    This is because `onchange` methods can be called while the record is being created
    in the user interface before it is stored in the database! Inside an `onchange`
    method, `self` is in a special state, denoted by the fact that `self.id` is not
    an integer, but an instance of `odoo.models.NewId`. Therefore, you must not make
    any changes to the database in an `onchange` method since the user may end up
    canceling the creation of the record, which will not roll back any changes made
    by the `onchange` method during the process of editing.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法体内，您可以访问当前记录视图中的字段，但不一定是模型的所有字段。这是因为`onchange`方法可以在记录在用户界面中创建并在数据库中存储之前被调用！在`onchange`方法内部，`self`处于特殊状态，这由`self.id`不是整数，而是一个`odoo.models.NewId`实例的事实表示。因此，您不得在`onchange`方法中对数据库进行任何更改，因为用户最终可能会取消记录的创建，这将不会回滚在编辑过程中由`onchange`方法所做的任何更改。
- en: Calling onchange methods on the server side
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在服务器端调用`onchange`方法
- en: 'The `onchange` method has a limitation: it will not be invoked when you are
    performing operations on the server side. `onchange` is only invoked automatically
    when the dependent operations are performed through the Odoo user interface. Yet,
    in several cases, these `onchange` methods must be called because they update
    important fields in the created or updated record. Of course, you can do the required
    computation yourself, but this is not always possible since the `onchange` method
    can be added or modified by a third-party add-on module that’s been installed
    on the instance that you don’t know about.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`onchange`方法有一个限制：当你执行服务器端操作时，它不会被调用。`onchange`仅在通过Odoo用户界面执行相关操作时自动调用。然而，在几种情况下，必须调用这些`onchange`方法，因为它们更新了创建或更新记录中的重要字段。当然，你可以自己进行所需的计算，但这并不总是可能的，因为`onchange`方法可以被安装在你不知道的实例上的第三方附加模块添加或修改。'
- en: This recipe explains how to call the `onchange` methods on a record by manually
    invoking the `onchange` method before creating a record.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方解释了如何通过手动调用在创建记录之前调用`onchange`方法来对一个记录调用`onchange`方法。
- en: Getting ready
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In the *Changing the user that performs an action* recipe, we added a **Return
    Room** button so that users can update the room and hostel by themselves. We now
    want to do the same for returning the room and hostel; we will just use the **Assign
    Room** return wizard.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在*更改执行动作的用户*配方中，我们添加了一个**返回房间**按钮，以便用户可以自行更新房间和宿舍。现在我们想要为返回房间和宿舍做同样的事情；我们只需使用**分配房间**返回向导。
- en: How to do it...
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we will manually update a record of the `hostel.room` model.
    To do this, you need to perform the following steps:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将手动更新`hostel.room`模型的记录。为此，你需要执行以下步骤：
- en: 'Import `Form` from the `tests` utility in the `hostel.student.py` file:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`hostel.student.py`文件中的`tests`实用程序导入`Form`：
- en: '[PRE29]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create the `return_room` method in the `hostel.room` model:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`hostel.room`模型中创建`return_room`方法：
- en: '[PRE30]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Get an empty recordset for `assign.room.student.wizard`:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`assign.room.student.wizard`的空记录集：
- en: '[PRE31]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a wizard `Form` block, like this:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个向导`Form`块，如下所示：
- en: '[PRE32]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Trigger `onchange` by assigning a room and then return the updated value of
    `room_id`:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过分配房间并返回更新后的`room_id`值来触发`onchange`：
- en: '[PRE33]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: For an explanation of *Steps 1* to *3*, refer to the *Creating new records*
    recipe in [*Chapter 5*](B20997_05.xhtml#_idTextAnchor238), *Basic* *Server-Side
    Development*.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 关于*步骤1*到*步骤3*的解释，请参考[*第5章*](B20997_05.xhtml#_idTextAnchor238)中的*创建新记录*配方，*基本*
    *服务器端开发*。
- en: In *Step 4*, we created a virtual form to handle onchange specifications, such
    as the GUI.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤4*中，我们创建了一个虚拟表单来处理onchange规范，例如GUI。
- en: '*Step 5* contains the full logic to return the room and hostel. In the first
    line, we assigned `room_id` in the wizard. Then, we called the `save()` method
    of the form, which returned a wizard record. After that, we called the `add_room_in_student()`
    method to execute the logic to return the updated room and hostel.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤5*包含了返回房间和宿舍的完整逻辑。在第一行，我们在向导中分配了`room_id`。然后，我们调用了表单的`save()`方法，它返回了一个向导记录。之后，我们调用了`add_room_in_student()`方法来执行返回更新后的房间和宿舍的逻辑。'
- en: The `onchange` method is mostly invoked from the user interface. But in this
    recipe, we have learned how to use/trigger the business logic of the `onchange`
    method on the server side. This way, we can create records without bypassing any
    business logic.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`onchange`方法通常从用户界面调用。但在这个配方中，我们学习了如何在服务器端使用/触发`onchange`方法的业务逻辑。这样，我们可以在不绕过任何业务逻辑的情况下创建记录。'
- en: See also
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: If you want to learn more about creating and updating records, refer to the
    *Creating new records* and *Updating the values of recordset records* recipes
    in [*Chapter 5*](B20997_05.xhtml#_idTextAnchor238), *Basic* *Server-Side Development*.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要了解更多关于创建和更新记录的信息，请参考[*第5章*](B20997_05.xhtml#_idTextAnchor238)中的*创建新记录*和*更新记录集记录的值*配方，*基本*
    *服务器端开发*。
- en: Defining onchange with the compute method
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用计算方法定义`onchange`
- en: In the last two recipes, we saw how to define and call the `onchange` method.
    We also saw its limitation, which is that it can only be invoked automatically
    from the user interface. As a solution to this problem, Odoo v13 introduced a
    new way to define `onchange` behavior. In this recipe, we will learn how to use
    the `compute` method to produce behavior similar to that of the `onchange` method.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后两个配方中，我们看到了如何定义和调用`onchange`方法。我们还看到了它的局限性，即它只能从用户界面自动调用。为了解决这个问题，Odoo v13引入了一种新的定义`onchange`行为的方法。在这个配方中，我们将学习如何使用`compute`方法产生类似于`onchange`方法的行为。
- en: Getting ready
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the `my_hostel` module from the previous recipe.
    We will replace the `onchange` method of `hostel.student` with the `compute` method.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将使用之前配方中的`my_hostel`模块。我们将用`compute`方法替换`hostel.student`的`onchange`方法。
- en: How to do it...
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to modify the `onchange` method with the `compute` method:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤修改`onchange`方法以使用`compute`方法：
- en: 'Replace `api.onchange` in the `onchange_duration()` method with `depends`,
    like this:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onchange_duration()`方法中将`api.onchange`替换为`depends`，如下所示：
- en: '[PRE34]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the `compute` parameter in the definition of the field, like this:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在字段的定义中添加`compute`参数，如下所示：
- en: '[PRE35]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Upgrade the `my_hostel` module to apply the code, then test the return duration
    form to see the change.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 升级`my_hostel`模块以应用代码，然后测试返回持续时间表以查看更改。
- en: How it works...
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Functionally, our computed `onchange` works like the normal `onchange` method.
    The only difference is that now, `onchange` will be trigged upon backend changes
    too.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 功能上，我们的计算`onchange`与正常的`onchange`方法类似。唯一的区别是现在，`onchange`也会在后台更改时触发。
- en: In *Step 1*, we replaced `@api.onchange` with `@api.depends`. This is required
    to recompute the method when the field value changes.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 1*中，我们将`@api.onchange`替换为`@api.depends`。这是在字段值发生变化时重新计算方法所必需的。
- en: In *Step 2*, we registered the `compute` method with the field. As you may have
    noticed, we used `readonly=False` with the `compute` field definition. By default,
    `compute` methods are read-only, but by setting `readonly=False`, we are making
    sure that the field is editable and can be stored.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 2*中，我们将`compute`方法与字段注册。如您所注意到的，我们在`compute`字段定义中使用了`readonly=False`。默认情况下，`compute`方法是只读的，但通过设置`readonly=False`，我们确保字段是可编辑的并且可以被存储。
- en: See also
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: To learn more about computed fields, refer to the *Adding computed fields to
    a model* recipe in [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118), *Application
    Models*.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于计算字段的信息，请参阅[*第 4 章*](B20997_04.xhtml#_idTextAnchor118)中“向模型添加计算字段”的配方，*应用模型*。
- en: Defining a model based on a SQL view
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于SQL视图定义模型
- en: When working on the design of an *add-on* module, we model the data in classes
    that are then mapped to database tables by Odoo’s ORM. We apply some well-known
    design principles, such as *separation of concerns* and *data normalization*.
    However, at later stages of the module design, it can be useful to aggregate data
    from several models in a single table and to maybe perform some operations on
    them on the way, especially for reporting or producing dashboards. To make this
    easier, and to make use of the full power of the underlying `PostgreSQL` database
    engine in Odoo, it is possible to define a read-only model backed by a PostgreSQL
    view, rather than a table.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当在设计一个*附加模块*时，我们使用类来建模数据，然后通过Odoo的ORM将它们映射到数据库表中。我们应用一些众所周知的设计原则，例如*关注点分离*和*数据规范化*。然而，在模块设计的后期阶段，从多个模型中聚合数据到一个单独的表，并在它们上面执行一些操作可能是有用的，特别是对于报告或生成仪表板。为了使这更容易，并利用Odoo底层`PostgreSQL`数据库引擎的全部功能，可以定义一个基于PostgreSQL视图的只读模型，而不是表。
- en: In this recipe, we will reuse the room model from the *Writing a wizard to guide
    the user* recipe in this chapter, and we will create a new model to make it easier
    to gather availability about rooms and authors.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将重用本章中“编写向导以引导用户”配方中的房间模型，并创建一个新的模型以更容易地收集关于房间和作者的可访问性信息。
- en: Getting ready
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the `my_hostel` module from the previous recipe.
    We will create a new model called `hostel.room.availability` to hold the availability
    data.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将使用之前配方中的`my_hostel`模块。我们将创建一个新的模型，名为`hostel.room.availability`，用于存储可用性数据。
- en: How to do it...
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create a new model backed by a PostgreSQL view, follow these steps:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个基于PostgreSQL视图的新模型，请按照以下步骤操作：
- en: 'Create a new model with the `_auto` class attribute set to `False`:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的模型，将`_auto`类属性设置为`False`：
- en: '[PRE36]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Declare the fields you want to see in the model, setting them as `readonly`:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明您希望在模型中看到的字段，并将它们设置为`readonly`：
- en: '[PRE37]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Define the `init()` method to create the view:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`init()`方法以创建视图：
- en: '[PRE38]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: You can now define views for the new model. A pivot view is especially useful
    to explore data (refer to [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446), *Backend
    Views*).
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以定义新模型的视图。交叉视图特别有用于探索数据（参考[*第9章*](B20997_09.xhtml#_idTextAnchor446)，*后端视图*）。
- en: Don’t forget to define some access rules for the new model (take a look at [*Chapter
    10*](B20997_10.xhtml#_idTextAnchor549), *Security Access*).
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记为新模型定义一些访问规则（查看[*第10章*](B20997_10.xhtml#_idTextAnchor549)，*安全访问*）。
- en: How it works...
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Normally, Odoo will create a new table for the model you are defining by using
    the field definitions for the columns. This is because, in the `BaseModel` class,
    the `_auto` attribute defaults to `True`. In *Step 1*, by setting this class attribute
    to `False`, we tell Odoo that we will manage this by ourselves.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Odoo将使用列的字段定义为您定义的模型创建一个新的表。这是因为，在`BaseModel`类中，`_auto`属性默认为`True`。在*步骤1*中，通过将此类属性设置为`False`，我们告诉Odoo我们将自行管理。
- en: In *Step 2*, we defined some fields that will be used by Odoo to generate a
    table. We took care to flag them as `readonly=True` so that the views do not enable
    modifications that you will not be able to save since PostgreSQL views are read-only.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，我们定义了一些将被Odoo用于生成表的字段。我们注意将它们标记为`readonly=True`，这样视图就不会启用您无法保存的修改，因为PostgreSQL视图是只读的。
- en: In *Step 3*, we defined the `init()` method. This method normally does nothing;
    it is called after `_auto_init()` (which is responsible for table creation when
    `_auto = True` but does nothing otherwise), and we use it to create a new SQL
    view (or to update the existing view in the case of a module upgrade). The view
    creation query must create a view with column names that match the field names
    of the model.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤3*中，我们定义了`init()`方法。此方法通常不执行任何操作；它在`_auto_init()`之后被调用（当`_auto = True`时负责创建表，否则不执行任何操作），我们使用它来创建一个新的SQL视图（或在模块升级的情况下更新现有视图）。视图创建查询必须创建一个具有与模型字段名称匹配的列名称的视图。
- en: Important tip
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is a common mistake to forget to rename the columns in the view definition
    query. This will cause an error message when Odoo cannot find the column.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 忘记在视图定义查询中重命名列是一个常见的错误。这将导致当Odoo找不到列时出现错误消息。
- en: Note that we also need to provide an `integer column` value called `ID` that
    contains unique values.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们还需要提供一个名为`ID`的`整数列`值，它包含唯一的值。
- en: There’s more...
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It is also possible to have some computed and related fields on such models.
    The only restriction is that the fields cannot be stored (and therefore, you cannot
    use them to group records or search).
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样的模型上也可以有一些计算和关联字段。唯一的限制是字段不能被存储（因此，您不能使用它们来分组记录或搜索）。
- en: If you need to group by base user, you need to store the field by adding it
    to the view definition, rather than using a related field.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要按基础用户分组，您需要通过将其添加到视图定义中来存储该字段，而不是使用相关字段。
- en: See also
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'To learn more, take a look at the following recipes:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多信息，请查看以下食谱：
- en: To learn more about UI views for user actions, refer to [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于用户操作UI视图的信息，请参考[*第9章*](B20997_09.xhtml#_idTextAnchor446)，*后端视图*。
- en: For a better understanding of access control and record rules, take a look at
    [*Chapter 10*](B20997_10.xhtml#_idTextAnchor549), *Security Access*
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了更好地理解访问控制和记录规则，请查看[*第10章*](B20997_10.xhtml#_idTextAnchor549)，*安全访问*。
- en: Adding custom Settings options
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加自定义设置选项
- en: In Odoo, you can provide optional features through the **Settings** options.
    The user can enable or disable this option at any time. We will illustrate how
    to create **Settings** options in this recipe.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo中，您可以通过**设置**选项提供可选功能。用户可以在任何时候启用或禁用此选项。我们将在这个食谱中说明如何创建**设置**选项。
- en: Getting ready
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In previous recipes, we added buttons so that hostel users can click and return
    rooms. This is not the case for every hostel; however, we will create a `my_hostel`
    module from the previous recipes.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的食谱中，我们添加了按钮，以便宿舍用户可以点击并返回房间。并非每个宿舍都是这种情况；然而，我们将从之前的食谱创建一个`my_hostel`模块。
- en: How to do it...
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create custom **Settings** options, follow these steps:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自定义**设置**选项，请按照以下步骤操作：
- en: 'Add a new field by inheriting the `res.config.settings` model:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过继承`res.config.settings`模型添加新字段：
- en: '[PRE39]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add this field to the existing `xpath` (for more details, refer to [*Chapter
    9*](B20997_09.xhtml#_idTextAnchor446), *Backend Views*):'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此字段添加到现有的`xpath`（更多详情请参阅[*第9章*](B20997_09.xhtml#_idTextAnchor446)，*后端视图*）：
- en: '[PRE40]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Add some actions and a menu for **Settings**:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一些操作和菜单以进行**设置**：
- en: '[PRE41]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Restart the server and update the `my_hostel` module to apply the changes,
    as shown here:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动服务器并更新`my_hostel`模块以应用更改，如下所示：
- en: '![Figure 8.7 – The hostel user access right settings option to enable and disable
    this feature](img/B20997_08_7.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![图8.7 – 宿舍用户访问权限设置选项以启用和禁用此功能](img/B20997_08_7.jpg)'
- en: Figure 8.7 – The hostel user access right settings option to enable and disable
    this feature
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 – 宿舍用户访问权限设置选项以启用和禁用此功能
- en: How it works...
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In Odoo, all settings options are added in the `res.config.settings` model.
    `res.config.settings` is a transient model. In *Step 1*, we created a new security
    group. We will use this group to create the **Hide** and **Show** buttons.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo中，所有设置选项都是在`res.config.settings`模型中添加的。`res.config.settings`是一个临时模型。在*步骤1*中，我们创建了一个新的安全组。我们将使用此组来创建**隐藏**和**显示**按钮。
- en: In *step 2*, we added a new `Boolean` field in the `res.config.settings` model
    by inheriting it. We added an `implied_group` attribute with a value of `my_hostel.group_hostel_user`.
    This group will be assigned to all `odoo` users when the admin enables or disables
    options with the `Boolean` field.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，我们通过继承`res.config.settings`模型添加了一个新的`布尔`字段。我们添加了一个`implied_group`属性，其值为`my_hostel.group_hostel_user`。当管理员启用或禁用带有`布尔`字段的选项时，此组将被分配给所有`odoo`用户。
- en: '`base.res_config_settings_view_form`.'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`base.res_config_settings_view_form`。'
- en: In *Step 3*, we added our option to the user interface by inheriting this setting
    from the view. We used `xpath` to add our `setting` option. We will cover this
    in more detail in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446), *Backend Views*.
    In the form definition, you will find that the attribute data-key value of this
    option will be your module name. This is only needed when you are adding a whole
    new tab in `xpath`.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤3*中，我们通过继承此设置将其添加到用户界面。我们使用`xpath`添加了我们的`设置`选项。我们将在[*第9章*](B20997_09.xhtml#_idTextAnchor446)，*后端视图*中更详细地介绍这一点。在表定义中，您会发现此选项的属性数据键值将是您的模块名称。这仅在您在`xpath`中添加整个新标签时才需要。
- en: 'In *Step 4*, we added an action and a menu to access the configuration options
    from the user interface. You will need to pass the `{''module'': ''my_hostel''}`
    context from the action to open the `my_hostel` module by default when the menu
    is clicked.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '在*步骤4*中，我们添加了一个操作和一个菜单，以便从用户界面访问配置选项。您需要从操作传递`{''module'': ''my_hostel''}`上下文，以便在点击菜单时默认打开`my_hostel`模块。'
- en: In *Step 5*, we added `my_hostel.group_hostel_user` groups to the buttons. Because
    of this group, the **Hostel User** and **Return** buttons will be hidden or shown,
    based on the **Settings** options.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤5*中，我们将`my_hostel.group_hostel_user`组添加到按钮中。由于这个组，**宿舍用户**和**返回**按钮将根据**设置**选项被隐藏或显示。
- en: After this, you will see a separate `Boolean` field to enable or disable the
    `implied_group` to or from all `odoo` users. Because we added the groups to buttons,
    the buttons will be displayed if the user has groups and will be hidden if the
    user doesn’t have groups. We will look at security groups in detail in [*Chapter
    10*](B20997_10.xhtml#_idTextAnchor549), *Security Access*.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您将看到一个单独的`布尔`字段来启用或禁用对所有`odoo`用户的`implied_group`。由于我们添加了组到按钮，如果用户有组，按钮将显示，如果没有组，按钮将隐藏。我们将在[*第10章*](B20997_10.xhtml#_idTextAnchor549)，*安全访问*中详细探讨安全组。
- en: There’s more...
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There are a few other ways to manage the `install` or `uninstall` them through
    various options. To do this, you will need to add a `Boolean` field with the name
    of the module prefixed with `module_`. If, for example, we create a new module
    called `my_hostel_extras`, you will need to add a `Boolean` field, as follows:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种其他方法可以通过各种选项来管理`安装`或`卸载`。为此，您需要添加一个名为`module_`加上模块名称的`布尔`字段。例如，如果我们创建一个名为`my_hostel_extras`的新模块，您需要添加一个`布尔`字段，如下所示：
- en: '[PRE42]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: When you enable or disable this option, `odoo` will `install` or `uninstall`
    the `my_hostel_extras` module.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启用或禁用此选项时，`odoo`将`安装`或`卸载``my_hostel_extras`模块。
- en: 'Another way to manage settings is to use system parameters. Such data is stored
    in the `ir.config_parameter` model. Here’s how you can create system-wide global
    parameters:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种管理设置的方法是使用系统参数。此类数据存储在`ir.config_parameter`模型中。以下是如何创建系统级全局参数的方法：
- en: '[PRE43]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `config_parameter` attribute in the fields will ensure the user data is
    stored in `digest.default_digest_emails` key.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 字段中的`config_parameter`属性将确保用户数据存储在`digest.default_digest_emails`键中。
- en: Settings options are used to make your application generic. These options give
    freedom to users and allow them to enable or disable features on the fly. When
    you convert a feature into options, you can serve more customers with one module
    and your customers can enable the feature whenever they like.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 设置选项用于使你的应用程序通用。这些选项给用户提供了自由度，并允许他们在运行时启用或禁用功能。当你将功能转换为选项时，你可以用一个模块服务更多客户，并且你的客户可以在他们喜欢的时候启用该功能。
- en: Implementing init hooks
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现init钩子
- en: In [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319), *Managing Module Data*,
    you learned how to add, update, and delete records from XML or CSV files. Sometimes,
    however, the business case is complex, and it can’t be solved using data files.
    In such cases, you can use the `init` hook from the manifest file to perform the
    operations you want.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第6章*](B20997_06.xhtml#_idTextAnchor319) *管理模块数据*中，你学习了如何从XML或CSV文件中添加、更新和删除记录。然而，有时业务案例很复杂，无法使用数据文件解决。在这种情况下，你可以使用清单文件中的`init`钩子来执行你想要的操作。
- en: Complex business cases may require dynamic initialization of data beyond standard
    XML or CSV files. Examples include integrating with external systems, performing
    complex calculations, or configuring records based on runtime conditions, facilitated
    by the `init` hook in the manifest file.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂的业务案例可能需要超出标准XML或CSV文件的数据动态初始化。例如，包括与外部系统集成、执行复杂计算或根据运行时条件配置记录，这些都可以通过清单文件中的`init`钩子来实现。
- en: Getting ready
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the same `my_hostel` module from the previous recipe. For simplicity,
    in this recipe, we will just create some room records through `post_init_hook`.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前菜谱中的相同`my_hostel`模块。为了简单起见，在这个菜谱中，我们只需通过`post_init_hook`创建一些房间记录。
- en: How to do it...
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To add `post_init_hook`, follow these steps:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加`post_init_hook`，请按照以下步骤操作：
- en: 'Register the hook in the `__manifest__.py` file with the `post_init_hook` key:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`post_init_hook`键在`__manifest__.py`文件中注册钩子：
- en: '[PRE44]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add the `add_room_hook()` method to the `__init__.py` file:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`add_room_hook()`方法添加到`__init__.py`文件中：
- en: '[PRE45]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How it works...
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *Step 1*, we registered `post_init_hook` in the manifest file with the `add_room_hook`
    value. This means that after the module is installed, Odoo will look for the `add_room_hook`
    method in `__init__.py`. The `post_init_hook` value receives the environment as
    an argument, showcasing an instance of the `add_room_hook` function that executes
    after module installation.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，我们在清单文件中使用`add_room_hook`值注册了`post_init_hook`。这意味着在模块安装后，Odoo将在`__init__.py`中查找`add_room_hook`方法。`post_init_hook`值接收环境作为参数，展示了在模块安装后执行的`add_room_hook`函数的实例。
- en: In *Step 2*, we declared the `add_room_hook()` method, which will be called
    after the module is installed. We created two records from this method. In real-life
    scenarios, you can write complex business logic here.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，我们声明了`add_room_hook()`方法，该方法将在模块安装后调用。我们从这个方法创建了两个记录。在实际场景中，你可以在那里编写复杂业务逻辑。
- en: 'In this example, we looked at `post_init_hook`, but Odoo supports two more
    hooks:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们看了`post_init_hook`，但Odoo支持另外两个钩子：
- en: '`pre_init_hook`: This hook will be invoked when you start installing a module.
    It is the opposite of `post_init_hook`; it will be invoked after installing the
    current module:'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pre_init_hook`：当你开始安装模块时，这个钩子将被调用。它与`post_init_hook`相反；它将在安装当前模块后调用：'
- en: 'Register the hook in the `__manifest__.py` file with the `pre_init_hook` key:'
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pre_init_hook`键在`__manifest__.py`文件中注册钩子：
- en: '[PRE46]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Add the `pre_init_hook_hostel()` method to the `__init__.py` file:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`pre_init_hook_hostel()`方法添加到`__init__.py`文件中：
- en: '[PRE47]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '`uninstall_hook`: This hook will be invoked when you uninstall the module.
    This is mostly used when your module needs a garbage-collection mechanism:'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uninstall_hook`：当你卸载模块时，这个钩子将被调用。这通常用于你的模块需要垃圾回收机制时：'
- en: 'Register the hook in the `__manifest__.py` file with the `uninstall_hook` key:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`uninstall_hook`键在`__manifest__.py`文件中注册钩子：
- en: '[PRE48]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add `uninstall_hook_user()` method to the `__init__.py` file:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`uninstall_hook_user()`方法添加到`__init__.py`文件中：
- en: '[PRE49]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Hooks are functions that run before, after, or in place of existing code. Hooks
    – functions that are displayed as strings – are contained in the `__init__ .py`
    file of an Odoo module.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 钩子是运行在现有代码之前、之后或替代现有代码的函数。钩子——以字符串形式显示的函数——包含在Odoo模块的`__init__.py`文件中。
