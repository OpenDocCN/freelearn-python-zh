- en: 'Chapter 1: Setting up the Virtual Environment'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章：设置虚拟环境
- en: A good programmer is not afraid of technology because their confidence doesn’t
    lie in the programming language, but in their own skills and experience. Tools
    only make them more productive. We can’t build even the simplest website in an
    acceptable amount of time without the right software. Building websites with Python
    is possible on any modern operating system, regardless of the hardware behind
    it. The core team that maintains this fantastic language already takes care of
    some of the more tedious tasks, such as compiling it and optimizing it for the
    processor you’re using.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的程序员不怕技术，因为他们的信心不在于编程语言，而在于他们自己的技能和经验。工具只会让他们更有效率。没有合适的软件，我们甚至无法在可接受的时间内构建一个最简单的网站。使用
    Python 构建网站在任何现代操作系统上都是可能的，无论其背后的硬件如何。维护这个出色语言的核心团队已经负责了一些比较繁琐的任务，例如编译它并针对您所使用的处理器进行优化。
- en: 'However, building a web application in Python, even if we only respond with
    plain text, requires a great deal of knowledge, including of servers and web applications
    as well as the WSGI or ASGI interface. We need to abstract that complexity to
    respond to requests, environments, asynchrony, WebSocket, database connections,
    and the other elements that define a current web application. That’s why we’re
    going to set up a desktop with everything you need to be a productive modern Django
    developer. We will build different real-time applications using the technology
    offered by Channels, a Django extension (developed by the same Django team), which
    includes a WebSocket server and WebSocket integrations. The architecture of the
    applications will differ from how server-side rendering works. The communication
    path between the server and the client will be bidirectional, allowing us to use
    it to receive or send events and/or HTML. My intention is that upon finishing
    the chapter, your focus will be on the code and not on complex configurations
    that may distract you. To achieve this, we will make use of Docker, the famous
    container manager, which will open up the possibility of adding all kinds of software
    already precooked to launch without investing practically any time: databases,
    web servers, mail servers, and caches, among others. Don’t worry if you have no
    experience with Docker. I’ll teach you the basics without going into low-level
    details. After a few tweaks, you’ll practically forget that it’s running in the
    background.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使在 Python 中构建一个简单的基于文本的 Web 应用程序，也需要大量的知识，包括服务器和 Web 应用程序的知识，以及 WSGI 或 ASGI
    接口。我们需要抽象出这种复杂性来响应请求、环境、异步性、WebSocket、数据库连接以及其他定义当前 Web 应用程序的元素。这就是为什么我们将设置一个桌面，其中包含您成为高效现代
    Django 开发者所需的一切。我们将使用 Channels 提供的技术构建不同的实时应用程序，Channels 是 Django 的一个扩展（由同一个 Django
    团队开发），它包括 WebSocket 服务器和 WebSocket 集成。应用程序的架构将与服务器端渲染不同。服务器和客户端之间的通信路径将是双向的，允许我们用它来接收或发送事件和/或
    HTML。我的意图是，在完成本章后，您的关注点将集中在代码上，而不是可能分散您注意力的复杂配置。为了实现这一点，我们将利用 Docker，这个著名的容器管理器，它将打开添加各种预先配置好的软件的可能性，以便快速启动，而无需投入大量时间：数据库、Web
    服务器、邮件服务器和缓存等。如果您没有 Docker 的经验，请不要担心。我将向您介绍基础知识，而不会涉及底层细节。经过几次调整后，您几乎会忘记它在后台运行。
- en: It’s important not only that we know how to write Python and create real-time
    infrastructures with Django but also that we have the skills to be independent
    of the operating system when deploying or working in a team. By virtualizing (or
    isolating) the processes, we can remain unconcerned about the operating system
    where it runs, making the project easy to continue for any specialist, and we
    can anticipate future problems that may occur when deploying to a production server.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅要我们知道如何编写 Python 并使用 Django 创建实时基础设施，而且我们还需要具备在部署或团队工作中独立于操作系统的技能。通过虚拟化（或隔离）进程，我们可以不必关心它运行的操作系统，使项目对任何专家都容易继续，并且我们可以预测在部署到生产服务器时可能出现的未来问题。
- en: 'In this chapter, we’ll be covering the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Exploring the software required
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索所需的软件
- en: Adding dependencies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加依赖项
- en: Configuring the IDE
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 IDE
- en: Installing Django
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Django
- en: Creating our project
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的项目
- en: Exploring the software required
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索所需的软件
- en: In this section, we will take a look at the software that we’ll be using throughout
    the book and how to install it. The code for this chapter can be found at [https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-1](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-1).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看本书中将要使用的软件以及如何安装它。本章的代码可以在[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-1](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-1)找到。
- en: Operating system
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作系统
- en: 'You should work on an operating system that supports Docker, such as one of
    the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在支持Docker的操作系统上工作，以下是一些选择：
- en: Linux distribution, preferably **Ubuntu** or **Debian**
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux发行版，最好是**Ubuntu**或**Debian**
- en: macOS in its latest version
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最新的macOS版本
- en: Windows 10 or higher, preferably with the Linux subsystem active and Ubuntu
    or Debian installed
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10或更高版本，最好有激活的Linux子系统并安装了Ubuntu或Debian
- en: BSD descendants, preferably FreeBSD
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BSD后裔，最好是FreeBSD
- en: Code editor
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码编辑器
- en: 'I assume that if you are reading this book, you already have experience with
    Python and you have an IDE or rich editor that is ready. If you need to change
    the IDE, I have recommended, from most to least highly recommended, in the following
    list some that I consider perfect for working with Python:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设如果你在阅读这本书，你已经有了Python的经验，并且你有一个IDE或功能丰富的编辑器已经准备好了。如果你需要更换IDE，我在以下列表中从最推荐到最不推荐地列出了一些我认为非常适合与Python一起使用的IDE：
- en: '**PyCharm Professional**: If you are a student at a recognized school, you
    can claim a free student license from JetBrains. Otherwise, I encourage you to
    pay for the license or use their demo. There is a free version of the IDE, **PyCharm
    Community Edition**, but you will not be able to use the Docker interpreter, as
    this is a feature of the Professional version. You can download this editor from
    [https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PyCharm Professional**：如果你是认可学校的学生，你可以从JetBrains那里申请免费的学生许可证。否则，我鼓励你购买许可证或使用他们的演示版。IDE有一个免费版本，**PyCharm
    Community Edition**，但你将无法使用Docker解释器，因为这是专业版的功能。你可以从[https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/)下载此编辑器。'
- en: '**Visual Studio Code** (**VSCode**): This is a very popular editor in web development,
    created and maintained by Microsoft. You can download this editor from [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**（**VSCode**）：这是一个在Web开发中非常受欢迎的编辑器，由微软创建和维护。你可以从[https://code.visualstudio.com/](https://code.visualstudio.com/)下载此编辑器。'
- en: '**Emacs**: This is very easy to use with a preconfigured framework such as
    Spacemacs or Doom. You can download this editor from [https://www.gnu.org/software/emacs/](https://www.gnu.org/software/emacs/).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Emacs**：如果你使用的是预配置的框架，如Spacemacs或Doom，它非常容易使用。你可以从[https://www.gnu.org/software/emacs/](https://www.gnu.org/software/emacs/)下载此编辑器。'
- en: '**Sublime Text** with the **Djaneiro** package: This is the easiest option
    if you are not looking for complications. You can download this editor from [https://www.sublimetext.com/](https://www.sublimetext.com/).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sublime Text**搭配**Djaneiro**插件：如果你不希望遇到复杂的情况，这是最简单的选择。你可以从[https://www.sublimetext.com/](https://www.sublimetext.com/)下载此编辑器。'
- en: 'Don’t force yourself to change. A code editor is a very personal thing, like
    choosing a brand of underwear: once you find one that fits your way of being,
    you don’t want to change. I understand that you may not feel like learning new
    shortcuts or workflows either. Otherwise, if you have no preference, you are free
    to visit the website of any of the preceding editors to download and install it
    on your computer.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不要强迫自己改变。代码编辑器是一个非常个人化的东西，就像选择内衣品牌一样：一旦找到适合你生活方式的，你就不会想改变。我理解你可能也不愿意学习新的快捷键或工作流程。否则，如果你没有偏好，你可以自由地访问任何前面提到的编辑器的网站，下载并安装到你的电脑上。
- en: All the examples, activities, and snippets in the book will work with whatever
    your editor or IDE of choice is. They will mainly help you with syntax errors,
    autocompletion, and hints, but your code will be self-contained since it is always
    stored in plain text. A Python programmer is a Python programmer in any editor
    but not all editors work well with Python.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 书中的所有示例、活动和代码片段都将与你的编辑器或IDE选择兼容。它们将主要帮助你处理语法错误、自动完成和提示，但你的代码将是自包含的，因为它们总是以纯文本形式存储。Python程序员在任何编辑器中都是Python程序员，但并非所有编辑器都与Python配合得很好。
- en: Python
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python
- en: You don’t need to install it. You’re reading correctly; the editor didn’t make
    a mistake in the review. We’ll use Docker to install a Python container capable
    of launching basic commands in Django, such as creating a project or an app or
    launching the development server.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要安装它。你读得对；编辑器在审阅时没有出错。我们将使用 Docker 来安装一个能够启动 Django 基本命令的 Python 容器，例如创建项目或应用或启动开发服务器。
- en: 'I assume that if you are here, it is because you feel comfortable programming
    with Python. If not, I would recommend you read some of Packt’s books:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设如果你在这里，那是因为你感觉使用 Python 编程很舒服。如果不是，我建议你阅读一些 Packt 的书籍：
- en: '*Learn Python Programming – Third Edition*, *Fabrizio Romano and Heinrich Kruger*,
    *Packt Publishing* ([https://bit.ly/3yikXfg](https://bit.ly/3yikXfg))'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Python编程学习 - 第三版》*，作者：Fabrizio Romano 和 Heinrich Kruger，出版社：*Packt Publishing*
    ([https://bit.ly/3yikXfg](https://bit.ly/3yikXfg))'
- en: '*Expert Python Programming – Fourth Edition*, *Michał Jaworski and Tarek Ziadé*,
    *Packt Publishing* ([https://bit.ly/3pUi9kZ](https://bit.ly/3pUi9kZ))'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《专家Python编程 - 第四版》*，作者：Michał Jaworski 和 Tarek Ziadé，出版社：*Packt Publishing*
    ([https://bit.ly/3pUi9kZ](https://bit.ly/3pUi9kZ))'
- en: Docker
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker
- en: 'The fastest way to install Docker is through **Docker Desktop.**. It’s available
    on Windows, macOS, and Linux (in beta as I write this). Just go to the official
    website, download, and install:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Docker 最快的方式是通过 **Docker Desktop**。它在 Windows、macOS 和 Linux（在我撰写此内容时处于测试版）上可用。只需访问官方网站，下载并安装：
- en: '[https://www.docker.com/get-started](https://www.docker.com/get-started)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.docker.com/get-started](https://www.docker.com/get-started)'
- en: In the case that you want to install it directly through the terminal, you will
    need to search for *Docker Engine* ([https://docs.docker.com/engine/](https://docs.docker.com/engine/)).
    This is highly recommended if you use Linux or BSD.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要直接通过终端安装它，你需要搜索 *Docker Engine* ([https://docs.docker.com/engine/](https://docs.docker.com/engine/))。如果你使用
    Linux 或 BSD，这强烈推荐。
- en: 'Also install **Docker Compose**, which will simplify the declaration and management
    of images and services:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 还要安装 **Docker Compose**，这将简化镜像和服务声明的管理：
- en: '[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)'
- en: Git
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git
- en: There is no development that does not involve a versioning system. Git is the
    most popular option and is almost mandatory to learn.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 没有开发是不涉及版本控制系统的。Git 是最受欢迎的选择，几乎是必学的。
- en: If you have no knowledge or relatively basic experience with it, I recommend
    looking at another of Packt’s books, such as *Git Essentials – Second Edition*,
    *Ferdinando Santacroce*, *Packt Publishing* ([https://bit.ly/3rYVvKL](https://bit.ly/3rYVvKL)).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对此没有知识或相对基本的经验，我建议查看 Packt 的另一本书，例如 *《Git基础 - 第二版》*，作者：Ferdinando Santacroce，出版社：*Packt
    Publishing* ([https://bit.ly/3rYVvKL](https://bit.ly/3rYVvKL))。
- en: 'Alternatively, you can opt to review the more extensive documentation from
    the official Git website:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以选择查看官方 Git 网站的更详细文档：
- en: '[https://git-scm.com/](https://git-scm.com/)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://git-scm.com/](https://git-scm.com/)'
- en: Browser
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器
- en: We will avoid focusing on the visual aspect of the browser, which means frontend
    implementation features such as CSS compatibility or JavaScript features do not
    matter. The most important thing is to feel comfortable when debugging the backend.
    Most of the time, we will be in the console checking that the requests (`GET`,
    `POST`, and the like) work as expected, watching the communication over **WebSocket**
    to make it smooth, and sporadically manipulating the rendered HTML.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将避免关注浏览器的视觉方面，这意味着前端实现特性，如 CSS 兼容性或 JavaScript 功能并不重要。最重要的是在调试后端时感到舒适。大多数时候，我们将在控制台检查请求（`GET`、`POST`
    等）是否按预期工作，观察 **WebSocket** 通信以使其流畅，并偶尔操作渲染的 HTML。
- en: WebSocket
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket
- en: WebSocket is a bidirectional communication protocol, different from HTTP, which
    facilitates the sending of data in real time between a server and a client, in
    our case, between a Django server and a frontend client.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket 是一种双向通信协议，与 HTTP 不同，它便于在服务器和客户端之间实时发送数据，在我们的例子中，是在 Django 服务器和前端客户端之间。
- en: In this book, I will use the **Firefox Developer Edition** ([https://www.mozilla.org/en-US/firefox/developer/](https://www.mozilla.org/en-US/firefox/developer/))
    browser because it is so convenient to manage the aspects mentioned using it.
    You are free to use any other browser, such as **Chrome**, **Safari**, or **Edge**,
    but I’m not sure whether all the features I will use are available with those
    browsers.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我将使用**Firefox开发者版**([https://www.mozilla.org/en-US/firefox/developer/](https://www.mozilla.org/en-US/firefox/developer/))浏览器，因为它非常方便地管理使用它时提到的各个方面。你可以自由地使用任何其他浏览器，例如**Chrome**、**Safari**或**Edge**，但我不确定我将会使用的所有功能是否都可用。
- en: With the software installed, we can start working with the preparations around
    Python and Docker to run Django or future Python code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 软件安装完毕后，我们可以开始使用Python和Docker的准备工作来运行Django或未来的Python代码。
- en: Adding dependencies
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加依赖项
- en: We’re going to run Python via Docker and a configuration file. That way, any
    developer can replicate our code regardless of whether they have Python installed
    on their machine and they will be able to run the associated services with just
    one command.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过Docker和配置文件运行Python。这样，任何开发者都可以复制我们的代码，无论他们是否在自己的机器上安装了Python，他们只需一个命令就可以运行相关服务。
- en: 'First, we will create a Python file called `hello.py` with the following content:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个名为`hello.py`的Python文件，其内容如下：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code is ready. We can continue.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 代码已经准备好了。我们可以继续。
- en: The goal will be to configure Docker to run the file. Sounds easy, doesn’t it?
    Here we go!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 目标将是配置Docker以运行该文件。听起来很简单，不是吗？我们开始吧！
- en: 'We’ll create a file called `Dockerfile` with the following code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`Dockerfile`的文件，其代码如下：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This file is used to create a Docker image, or template, with instructions
    that will be cached. Since they are precached, their launch will be almost instantaneous.
    Let’s check out what’s going on in the code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件用于创建一个Docker镜像，或模板，其中包含将被缓存的指令。由于它们是预缓存的，它们的启动几乎是瞬间的。让我们来看看代码中发生了什么：
- en: 'With `FROM python:3.10`, we are using another existing image as a base. We
    are extending the work already done. But... where is it? Docker has a repository
    full of images, or templates, called `python` and we mark it with a tag to use
    version 3.10\. If you have worked with Docker before, you might be wondering why
    we are not using the *Alpine* version, the famous operating system that saves
    so much space in servers around the world. For two reasons: Python is slower ([https://pythonspeed.com/articles/alpine-docker-python/](https://pythonspeed.com/articles/alpine-docker-python/))
    and it doesn’t have the ability to compile dependencies. The *Slim* version also
    exacerbates the last problem and is recommended only for production versions that
    are short of space.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`FROM python:3.10`，我们正在使用另一个现有的镜像作为基础。我们正在扩展已经完成的工作。但是...它在哪？Docker有一个名为`python`的图像存储库，或模板库，我们用标签标记它以使用3.10版本。如果你之前使用过Docker，你可能想知道为什么我们不使用*Alpine*版本，这个在全世界服务器上节省了大量空间的著名操作系统。有两个原因：Python运行速度较慢([https://pythonspeed.com/articles/alpine-docker-python/](https://pythonspeed.com/articles/alpine-docker-python/))，并且它没有编译依赖项的能力。*Slim*版本也加剧了最后一个问题，并且仅推荐用于空间不足的生产版本。
- en: '`ENV PYTHONUNBUFFERED: 1` shows us the Python messages, for example, when we
    use `print()`. If it was not added, they would go directly to the Docker log.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENV PYTHONUNBUFFERED: 1`会显示Python消息，例如，当我们使用`print()`时。如果没有添加，它们会直接进入Docker日志。'
- en: By adding `WORKDIR /usr/src/app`, we define the path in which the commands will
    be executed inside the Docker container, not inside our operating system. This
    is equivalent to changing the directory with `cd`.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过添加`WORKDIR /usr/src/app`，我们定义了在Docker容器内部执行命令的路径，而不是在我们的操作系统内部。这相当于使用`cd`更改目录。
- en: We will also take the opportunity to install the Python dependencies that we
    will be adding in the future inside `requirements.txt`. We update *pip* with `RUN
    pip install --upgrade pip`, copy the list of dependencies from the folder to the
    image with `COPY requirements.txt ./requirements. Txt`, and finally, run *pip*
    to install everything with `RUN pip3 install -r requirements.txt`.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们也将利用这个机会，在`requirements.txt`文件中安装我们未来将要添加的Python依赖。我们通过`RUN pip install --upgrade
    pip`更新*pip*，使用`COPY requirements.txt ./requirements. Txt`将依赖列表从文件夹复制到镜像中，最后，通过`RUN
    pip3 install -r requirements.txt`运行*pip*来安装所有内容。
- en: 'At the root of the project, we create another file called `docker-compose.yaml`
    with the following content:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目的根目录下，我们创建另一个名为`docker-compose.yaml`的文件，其内容如下：
- en: '[PRE14]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This is the orchestrator, a file where we define each service and its configurations.
    In this case, we are only going to have a service called `python`. With `build`,
    we tell Docker to use the image that we just defined in the `Dockerfile`. With
    `entrypoint`, we indicate what it should do when the service is launched: `python3
    hello.py`. Finally, in `volumes`, we tell it to mount the root directory, represented
    by a single dot, with `/usr/src/app/`, which is an internal directory of the image.
    This way, the service will have access to all the files in the folder.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是编排器，一个文件，我们在这里定义每个服务和其配置。在这种情况下，我们只将有一个名为 `python` 的服务。通过 `build`，我们告诉 Docker
    使用我们在 `Dockerfile` 中定义的镜像。通过 `entrypoint`，我们指示服务启动时应该做什么：`python3 hello.py`。最后，在
    `volumes` 中，我们告诉它将根目录（由一个点表示）挂载到 `/usr/src/app/`，这是镜像的一个内部目录。这样，服务将能够访问文件夹中的所有文件。
- en: Next, we create an empty file called `requirements.txt`. We will not add a single
    line, though the file must be present.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个名为 `requirements.txt` 的空文件。尽管文件必须存在，但我们不会添加任何行。
- en: 'We’re ready to go! Open the terminal, go to the working folder, and tell `docker-compose`
    to pull up the services:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备出发了！打开终端，转到工作文件夹，并告诉 `docker-compose` 启动服务：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Docker will gradually perform several tasks: it will download the base `python`
    image, build its own image by executing the instructions we have defined, and
    raise the `python` service. It will print 2 lines per console, as in the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 将逐步执行几个任务：它将下载基本的 `python` 镜像，通过执行我们定义的指令构建自己的镜像，并启动 `python` 服务。它将在控制台打印
    2 行，如下所示：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We’ve executed the Python file! Victory!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经执行了 Python 文件！胜利！
- en: With the recent ability to run Python using Docker, it’s time to integrate it
    into an IDE to make it easier to run without using the terminal.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 随着最近使用 Docker 运行 Python 的能力，现在是时候将其集成到 IDE 中，以便更容易地运行而无需使用终端。
- en: Configuring the IDE
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 IDE
- en: '**PyCharm** is highly popular because it’s a tool specially prepared to work
    with Python and it also includes interesting integrations with databases, Git,
    HTTP clients, environments, and the like. One of the most used is certainly the
    one related to Docker, so I will use this fantastic IDE in future examples. However,
    as I said before, it is not mandatory to use it; there are enough alternatives
    to please everyone. All code and activities shown in this chapter will work independently
    of the editor.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyCharm** 非常受欢迎，因为它是一款专门为与 Python 一起工作而准备的工具，它还包含与数据库、Git、HTTP 客户端、环境等有趣的集成。最常用的之一肯定是与
    Docker 相关的，因此我将在未来的示例中使用这个出色的 IDE。然而，正如我之前所说的，使用它不是强制性的；有足够的替代方案来满足每个人。本章中显示的所有代码和活动都将独立于编辑器工作。'
- en: 'To set up the IDE, follow these steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 IDE，请按照以下步骤操作：
- en: Open the folder where you want to work using PyCharm (**File** | **Open**).
    A directory tree will be displayed on the left.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 PyCharm（**文件** | **打开**）打开您想要工作的文件夹。目录树将在左侧显示。
- en: Click on the Python file (`hello.py`). It’s not possible to run the Python code
    if you don’t use the terminal; PyCharm doesn’t know where the Python interpreter,
    or executable, is otherwise. It’s inside a Docker image that the operating system
    can’t access, for now.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Python 文件 (`hello.py`)。如果不使用终端，则无法运行 Python 代码；PyCharm 否则不知道 Python 解释器或可执行文件在哪里。它位于操作系统目前无法访问的
    Docker 镜像中。
- en: '![Figure 1.1 – Open the Python file'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.1 – 打开 Python 文件'
- en: '](img/Figure_1.1_B18321.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.1_B18321.jpg)'
- en: Figure 1.1 – Open the Python file
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 打开 Python 文件
- en: PyCharm may open a popup that suggests creating a virtual environment. You can
    skip this step or close the window; we will use Docker for the job. If you don’t
    see the window, you can continue without fear.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyCharm 可能会打开一个弹出窗口，建议创建虚拟环境。您可以跳过此步骤或关闭窗口；我们将使用 Docker 来完成这项工作。如果您没有看到窗口，您可以继续而无需担心。
- en: We then check whether we have the Docker plugin installed. Go to **File** |
    **Settings** | **Plugins** and look for **Docker**.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来检查是否已安装 Docker 插件。转到 **文件** | **设置** | **插件** 并查找 **Docker**。
- en: If it is installed, it will appear in the **Installed** tab. If not, you will
    have to look for it in **Marketplace** and then click on the **Install** button.
    Then, restart PyCharm. Ensure you do this. Otherwise, we won’t be able to continue.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果已安装，它将出现在 **已安装** 选项卡中。如果没有，您将不得不在 **市场** 中查找它，然后点击 **安装** 按钮。然后，重新启动 PyCharm。请确保这样做。否则，我们无法继续。
- en: '![Figure 1.2 – Installing the Docker plugin'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2 – 安装 Docker 插件'
- en: '](img/Figure_1.2_B18321.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.2_B18321.jpg)'
- en: Figure 1.2 – Installing the Docker plugin
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 安装 Docker 插件
- en: Now open **File** | **Settings** | **Build, Execution, Deployment** | **Docker**
    and press the **+** button. Then, search for **Docker**.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开**文件** | **设置** | **构建、执行、部署** | **Docker**，然后按下**+**按钮。接着，搜索**Docker**。
- en: '![Figure 1.3 – Connecting with Docker'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.3 – 通过Docker连接'
- en: '](img/Figure_1.3_B18321.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.3_B18321.jpg)'
- en: Figure 1.3 – Connecting with Docker
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – 通过Docker连接
- en: Enter `Docker` in the **Name** field, for example, and activate **Unix socket**.
    At the bottom, you will see the **Connection successful** message.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**字段中输入`Docker`，例如，并激活**Unix套接字**。在底部，你会看到**连接成功**的消息。
- en: We only need to tell PyCharm not to look for the Python interpreter, or executable,
    on the machine (if there is one) and to use the Docker service we have created
    instead.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只需要告诉PyCharm不要在机器上（如果有）查找Python解释器或可执行文件，而是使用我们创建的Docker服务。
- en: 'Go to **File** | **Settings** | **Project: Executable Python**. Here, we deploy
    the **Python Interpreter**, select **Remote Python xxx Docker Compose**, and click
    on **Apply**. The interpreter name may change depending on the folder name.'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**文件** | **设置** | **项目：可执行Python**。在这里，我们部署**Python解释器**，选择**远程Python xxx
    Docker Compose**，然后点击**应用**。解释器名称可能会根据文件夹名称而改变。
- en: '![Figure 1.4 – Adding the Python interpreter'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.4 – 添加Python解释器'
- en: '](img/Figure_1.4_B18321.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.4_B18321.jpg)'
- en: Figure 1.4 – Adding the Python interpreter
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – 添加Python解释器
- en: It will automatically detect the dependencies that are already installed on
    the machine but we will ignore them. By the way, this is a good place to manage
    all Python dependencies visually.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将自动检测机器上已安装的依赖项，但我们将忽略它们。顺便说一句，这是一个管理所有Python依赖项的好地方。
- en: Now, it’s time to run the Python code using the configuration you just made.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候使用你刚刚创建的配置运行Python代码了。
- en: Close `hello.py` and then **Run ‘hello’**.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭`hello.py`然后**运行‘hello’**。
- en: '![Figure 1.5 – Running Python with PyCharm'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.5 – 使用PyCharm运行Python'
- en: '](img/Figure_1.5_B18321.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.5_B18321.jpg)'
- en: Figure 1.5 – Running Python with PyCharm
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 – 使用PyCharm运行Python
- en: At the bottom of the editor, an area with the log of the execution will open.
    As proof that it has been done successfully, we can see the `print` statement.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器的底部，将打开一个包含执行日志的区域。作为成功完成的证明，我们可以看到`print`语句。
- en: '![Figure 1.6 – Viewing the Python execution log through Docker integration'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.6 – 通过Docker集成查看Python执行日志'
- en: '](img/Figure_1.6_B18321.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.6_B18321.jpg)'
- en: Figure 1.6 – Viewing the Python execution log through Docker integration
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 – 通过Docker集成查看Python执行日志
- en: Also, if we open the `docker-compose.yaml` file, we can run the containers individually.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，如果我们打开`docker-compose.yaml`文件，我们可以单独运行容器。
- en: '![Figure 1.7 – Launching containers through Docker integration'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.7 – 通过Docker集成启动容器'
- en: '](img/Figure_1.7_B18321.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.7_B18321.jpg)'
- en: Figure 1.7 – Launching containers through Docker integration
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – 通过Docker集成启动容器
- en: On line 5 in *Figure 1.7*, you can see a green arrow; when you click on it,
    it will launch the service and, again, the Python code.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*图1.7*的第5行，你可以看到一个绿色的箭头；当你点击它时，它将启动服务，再次运行Python代码。
- en: PyCharm is already integrated with Docker and is able to launch Python with
    its dependencies in isolation from the operating system. We are ready to work
    directly with Django. We are going to create a simple project using the official
    Django client to have a minimal structure when developing.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm已经集成了Docker，并且能够以隔离操作系统的方式启动带有其依赖项的Python。我们现在可以直接使用Django了。我们将使用官方Django客户端创建一个简单的项目，以便在开发时拥有最小化的结构。
- en: Installing Django
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Django
- en: We already have a base with which to work with Python; now, it’s time to install
    the minimum dependencies and tools that will be practical in Django.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了与Python一起工作的基础；现在，是时候安装Django中实际需要的最小依赖项和工具了。
- en: 'We will add the following content to `requirements.txt`, which is currently
    empty:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把以下内容添加到当前为空的`requirements.txt`文件中：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You may not know some of them since they are part of the project that adds
    WebSocket to Django. Let’s review each one:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不知道其中的一些，因为它们是添加WebSocket到Django的项目的一部分。让我们逐一审查：
- en: '**Django**: This automates many important tasks, such as database connections,
    migrations, HTML rendering, sessions, and forms. In addition, being one of the
    most used and active frameworks, it gives us a high degree of security.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Django**：这个框架自动化了许多重要任务，例如数据库连接、迁移、HTML渲染、会话和表单。此外，作为最常用和最活跃的框架之一，它为我们提供了高度的安全性。'
- en: '**Daphne**: An asynchronous server maintained by the Django team itself. We’ll
    need it to work with WebSocket, to emit or receive data without blocking the app.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Daphne**: Django 团队自己维护的异步服务器。我们需要它来处理 WebSocket，以便在不阻塞应用程序的情况下发送或接收数据。'
- en: '**asgiref**: An ASGI library that needs Channels to work.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**asgiref**: 一个需要 Channels 来工作的 ASGI 库。'
- en: '**Pillow**: The mandatory Django library for manipulating images.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pillow**: Django 必须的库，用于处理图像。'
- en: '**django-extensions**: A set of extensions that adds elements, such as *jobs*,
    script execution, database synchronization, and static storage in *S3*.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**django-extensions**: 一组扩展，添加了诸如 *jobs*、脚本执行、数据库同步以及 *S3* 中的静态存储等元素。'
- en: '**Psycopg2**: The driver to connect to PostgreSQL, the database that we will
    use and is most recommended to use with Django.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Psycopg2**: 连接到 PostgreSQL 数据库的驱动程序，这是我们将会使用并且最推荐与 Django 一起使用的数据库。'
- en: '**Channels**: Adds protocols and functionality for working with WebSocket to
    the heart of Django.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Channels**: 为 Django 的核心添加了处理 WebSocket 的协议和功能。'
- en: '**channels_redis**: We must have a record of the connections that we have active
    and the groups to which they belong. Using a database that writes to the hard
    disk is an inefficient way to manage it. To solve this, we’ll connect with a Redis
    service later, as it works on volatile memory and is incredibly fast.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**channels_redis**: 我们必须记录我们活跃的连接以及它们所属的组。使用写入硬盘的数据库来管理它是一种低效的方式。为了解决这个问题，我们将在稍后连接到一个
    Redis 服务，因为它在易失性内存上工作，并且速度极快。'
- en: 'PyCharm may suggest you install a plugin, as shown in the following screenshot:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm 可能会建议你安装一个插件，如下面的截图所示：
- en: '![Figure 1.8 – PyCharm asking whether you want to install the new dependencies'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.8 – PyCharm 询问是否要安装新依赖项]'
- en: '](img/Figure_1.8_B18321.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.8 – 图像 1.8]'
- en: Figure 1.8 – PyCharm asking whether you want to install the new dependencies
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 1.8 – PyCharm 询问是否要安装新依赖项
- en: 'If you click on **Install plugins**, it will show you a window, like so:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击 **安装插件**，它将显示一个窗口，如下所示：
- en: '![Figure 1.9 – PyCharm asking whether you want to install the requirements
    plugin'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.9 – 图像 1.9]'
- en: '](img/Figure_1.9_B18321.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.9 – 图像 1.9]'
- en: Figure 1.9 – PyCharm asking whether you want to install the requirements plugin
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 1.9 – PyCharm 询问是否要安装需求插件
- en: By clicking on the `requirements.txt`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击 `requirements.txt`。
- en: '![Figure 1.10 – Color codes thanks to the plugin'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.10 – 图像 1.10]'
- en: '](img/Figure_1.10_B18321.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.10 – 图像 1.10]'
- en: Figure 1.10 – Color codes thanks to the plugin
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 1.10 – 图像 1.10
- en: Now, we will recompile the image so that all the dependencies we have added
    are installed.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将重新编译镜像，以便安装我们已添加的所有依赖项。
- en: 'With PyCharm, this can be done in a visual way. Go to **Dockerfile**, right-click
    on the double arrow shown in the following screenshot, and select **Build Image
    for ‘Dockerfile’**:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PyCharm，这可以通过可视化的方式完成。转到 **Dockerfile**，在下面的截图所示的箭头处右键单击，并选择 **为 'Dockerfile'
    构建镜像**：
- en: '![Figure 1.11 – Compiling a Dockerfile image using PyCharm'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.11 – 图像 1.11]'
- en: '](img/Figure_1.11_B18321.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.11 – 图像 1.11]'
- en: Figure 1.11 – Compiling a Dockerfile image using PyCharm
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 1.11 – 使用 PyCharm 编译 Dockerfile 镜像
- en: 'If you are using the terminal or another editor, we will use `docker-compose`
    in the directory:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用终端或其他编辑器，我们将在目录中使用 `docker-compose`：
- en: '[PRE32]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'By recreating the image, we’ve integrated all the dependencies inside the image;
    now, Django has everything we need. To check that it’s installed and we have version
    4, we’ll temporarily modify `entrypoint`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 通过重新创建镜像，我们在镜像中集成了所有依赖项；现在，Django 拥有我们所需的一切。为了检查它是否已安装并且我们有版本 4，我们将暂时修改 `entrypoint`：
- en: '[PRE33]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: And then, we’ll run the service.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将运行服务。
- en: Remember that you can do this by clicking on the green arrow next to Python
    (line 5 in *Figure 1.12*) or through `docker-compose`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以通过点击 Python 旁边的绿色箭头（*Figure 1.12* 中的第 5 行）或通过 `docker-compose` 来做这件事。
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![Figure 1.12 – Checking which version of Django is installed'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.12 – 检查已安装的 Django 版本]'
- en: '](img/Figure_1.12_B18321.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.12 – 图像 1.12]'
- en: Figure 1.12 – Checking which version of Django is installed
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 1.12 – 检查已安装的 Django 版本
- en: In both cases, you can see that it returns `4.0` or the version specified in
    `requirements.txt`. We are ready!
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，你可以看到它返回 `4.0` 或 `requirements.txt` 中指定的版本。我们已经准备好了！
- en: All this work can serve as a template for future Python developments. Don’t
    lose it!
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些工作都可以作为未来 Python 开发的模板。不要丢失它！
- en: After creating a minimal template through the Django client, we’re going to
    configure it to launch the test server every time the service is up.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Django 客户端创建最小模板后，我们将配置它，以便每次服务启动时都启动测试服务器。
- en: Creating our project
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的项目
- en: Django needs its own directory and file structure to work. That’s why we need
    to generate a project via `django-admin`, a terminal client built to launch Django
    tasks. Don’t worry! You don’t have to install anything new; it was added when
    we added the Django dependency.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Django 需要自己的目录和文件结构才能工作。这就是为什么我们需要通过 `django-admin` 生成项目，这是一个用于启动 Django 任务的终端客户端。别担心！您不需要安装任何新东西；它是在我们添加
    Django 依赖项时添加的。
- en: 'Let’s build a file with shell instructions to perform all the tasks in one
    go. We create a file called `start-project.sh`, where we are working with the
    following content:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个包含 shell 指令的文件，一次性执行所有任务。我们创建一个名为 `start-project.sh` 的文件，其中包含以下内容：
- en: '[PRE35]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Here is what we are doing:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们正在做的事情：
- en: With the first instruction, `django-admin startproject hello_world .`, we’re
    creating a project (`startproject`) called `hello_world` and, with the final dot,
    we’re telling it to make it in the directory where we’re running it.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一条指令 `django-admin startproject hello_world .` 中，我们创建了一个名为 `hello_world` 的项目（`startproject`），并通过最后的点告诉它在我们运行它的目录中创建。
- en: 'When we launch `mkdir -p app/simple_app`, we create a directory called `simple_app`
    which is inside app. The goal is to organize the apps, saving them all in the
    same directory; we also create the folder in which the first app will be saved:
    `simple_app`.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们运行 `mkdir -p app/simple_app` 时，我们创建了一个名为 `simple_app` 的目录，它位于 app 目录内。目标是组织应用程序，将它们全部保存在同一个目录中；我们也创建了第一个应用程序将被保存的文件夹：`simple_app`。
- en: Finally, we create the app with `django-admin startapp simple_app app/simple_app`.
    The `simple_app` and `app/simple_app` parameters define the app’s name and its
    location, respectively, which we created with the previous command.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们使用 `django-admin startapp simple_app app/simple_app` 创建应用程序。`simple_app`
    和 `app/simple_app` 参数分别定义了应用程序的名称和位置，这是我们之前创建的。
- en: In short, we’ll call the project `hello_world`, and inside it, we’ll have a
    single app with the original name `simple_app`.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简而言之，我们将项目命名为 `hello_world`，并在其中创建一个名为 `simple_app` 的单个应用程序。
- en: PyCharm may suggest that you install a plugin to check for syntax problems;
    it’s a good idea to do so.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm 可能会建议您安装一个插件来检查语法错误；这样做是个好主意。
- en: '![Figure 1.13 – PyCharm suggests installing a syntax checker for shell files'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.13 – PyCharm 建议为 shell 文件安装语法检查器'
- en: '](img/Figure_1.13_B18321.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.13_B18321.jpg)'
- en: Figure 1.13 – PyCharm suggests installing a syntax checker for shell files
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13 – PyCharm 建议为 shell 文件安装语法检查器
- en: 'To execute the script, we again must temporarily modify `entrypoint` with `bash
    start-project.sh`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行脚本，我们再次必须临时修改 `entrypoint`，使用 `bash start-project.sh`：
- en: '[PRE42]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We launch the container as we have already learned to: open the `docker-compose.yaml`
    file and click on the double green arrow in `services` or the single arrow in
    `python`.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们像之前学习的那样启动容器：打开 `docker-compose.yaml` 文件，然后在 `services` 或 `python` 中的双绿色箭头或单箭头处点击。
- en: 'If you are using the terminal or another editor, we will use `docker-compose`
    in the directory:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用终端或其他编辑器，我们将在目录中使用 `docker-compose`：
- en: '[PRE51]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: When Docker finishes, the new files and directories will appear. Be patient
    if you don’t see them in PyCharm; sometimes it has a hard time refreshing when
    new files appear. You can wait or right-click on any file and click **Reload from
    Disk**.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Docker 完成后，新的文件和目录将出现。如果您在 PyCharm 中看不到它们，请耐心等待；有时当新文件出现时，它很难刷新。您可以等待或右键单击任何文件，然后点击
    **从磁盘重新加载**。
- en: '![Figure 1.14 – The newly generated Django project'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.14 – 新生成的 Django 项目'
- en: '](img/Figure_1.14_B18321.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.14_B18321.jpg)'
- en: Figure 1.14 – The newly generated Django project
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14 – 新生成的 Django 项目
- en: It’s time to modify `entrypoint` one last time. Let’s get the development server
    up. It’s time to reap the fruits of our labor.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候最后一次修改 `entrypoint` 了。让我们启动开发服务器。现在是收获我们劳动成果的时候了。
- en: 'Modify it by adding the following:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加以下内容进行修改：
- en: '[PRE52]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: If you haven’t worked with Django before, `manage.py` is equivalent to using
    `django-admin`. The advantage of the former is that it uses the project’s configuration,
    while `django-admin` is more general and you have to tell it where the configuration
    is; so, it’s more practical to use `manage.py` as soon as the project exists.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前没有使用过 Django，`manage.py` 等同于使用 `django-admin`。前者的优点是它使用项目的配置，而 `django-admin`
    更通用，您必须告诉它配置在哪里；因此，当项目存在时，使用 `manage.py` 更实用。
- en: The action we want to launch is to raise a development server with `runserver`.
    The `0.0.0.0.0:8000` parameter indicates that we are open to any *IP* that makes
    the request and finally, we will use port `8000` to accept connections.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要执行的操作是使用`runserver`启动开发服务器。`0.0.0.0.0:8000`参数表示我们对外开放任何发起请求的*IP*，最后，我们将使用端口`8000`来接受连接。
- en: On the other hand, for Docker to route port `8000` from the service to the outside,
    we will add ports `8000:8000` somewhere inside the service.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，为了让Docker将服务中的端口`8000`路由到外部，我们将在服务内部某处添加端口`8000:8000`。
- en: 'Altogether, it will look like this:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，它看起来会是这样：
- en: '[PRE53]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: We launch the service again. Now, open your favorite browser and enter `127.0.0.1:8000`.
    You’ll find the Django welcome web page.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次启动服务。现在，打开您喜欢的浏览器并输入`127.0.0.1:8000`。您将找到Django欢迎网页。
- en: '![Figure 1.15 – The Django default page'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.15 – The Django default page'
- en: '](img/Figure_1.15_B18321.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.15 – The Django default page](img/Figure_1.15_B18321.jpg)'
- en: Figure 1.15 – The Django default page
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.15 – Django默认页面
- en: We’ve done it! Django is running on Docker.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做到了！Django已经在Docker上运行。
- en: As a last detail, if you are using the terminal, you will find that the container
    never stops. That’s because the web server, as a good server, is constantly running
    and waiting for requests until we tell it otherwise. Press *Ctrl* + *C* if you
    want to close it. In PyCharm, you should click on the red **Stop** square.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的细节，如果您正在使用终端，您会发现容器永远不会停止。这是因为作为优秀服务器的Web服务器，它始终在运行并等待请求，直到我们告诉它停止。如果您想关闭它，请按*Ctrl*
    + *C*。在PyCharm中，您应该点击红色的**停止**方块。
- en: '![Figure 1.16 – Stopping Docker services via PyCharm and its integration'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.16 – 通过PyCharm及其集成停止Docker服务'
- en: '](img/Figure_1.16_B18321.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.16 – 通过PyCharm及其集成停止Docker服务](img/Figure_1.16_B18321.jpg)'
- en: Figure 1.16 – Stopping Docker services via PyCharm and its integration
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.16 – 通过PyCharm及其集成停止Docker服务](img/Figure_1.16_B18321.jpg)'
- en: Summary
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have just acquired the skills to configure and build a Python project using
    Docker containers. We started with the basics, creating an image that runs a Python
    script and also installs all the dependencies we declared in `requirements.txt`.
    Then, we automated the creation of a Django project with a simple script and set
    up the development server.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚掌握了使用Docker容器配置和构建Python项目的技能。我们从基础知识开始，创建了一个运行Python脚本并安装我们在`requirements.txt`中声明的所有依赖项的镜像。然后，我们通过一个简单的脚本自动化创建Django项目，并设置了开发服务器。
- en: 'On the other hand, to make container management easier, we have integrated
    an IDE into the flow, in our case, PyCharm. It gives us the possibility to launch
    some of the functionalities that we will use the most: building a custom image,
    executing a container composition (now we only have a service for Python), visualizing
    the log, and restarting and stopping containers. But let’s not forget that all
    these tasks are accessible from the terminal, using `docker-compose`.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，为了使容器管理更简单，我们将IDE集成到流程中，在我们的例子中是PyCharm。它为我们提供了启动我们将最常使用的功能的机会：构建自定义镜像、执行容器组合（现在我们只有一个Python服务）、查看日志以及重启和停止容器。但不要忘记，所有这些任务都可以通过终端使用`docker-compose`访问。
- en: In the next chapter, we will build a complete project in Django with various
    databases, a web server, and other tools that we will need to build a complete
    project. In addition, we will integrate Django’s configuration with Docker to
    facilitate its deployment with different configurations.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用Django构建一个包含各种数据库、Web服务器和其他工具的完整项目。此外，我们还将集成Django的配置与Docker，以便于使用不同配置的部署。
