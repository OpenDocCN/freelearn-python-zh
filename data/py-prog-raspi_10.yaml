- en: Home Automation Using the Raspberry Pi Zero
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Raspberry Pi Zero进行家庭自动化
- en: As the title of the chapter suggests, we will discuss home improvement projects
    involving the Raspberry Pi Zero in this chapter. We selected our projects such
    that each example could be executed as a weekend project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如章节标题所示，我们将在本章讨论涉及Raspberry Pi Zero的家庭改进项目。我们选择的项目使得每个示例都可以作为一个周末项目执行。
- en: 'The projects include the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 项目包括以下主题：
- en: Voice-activated personal assistant
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语音激活个人助理
- en: Web framework-based appliance control
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Web框架的家电控制
- en: Physical activity motivation tool
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身体活动激励工具
- en: Smart lawn sprinkler
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能草坪洒水器
- en: Voice activated personal assistant
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语音激活个人助理
- en: In our first project, we are going to emulate personal assistants such as Google
    Home ([https://madeby.google.com/home/](https://madeby.google.com/home/)) and
    Amazon Echo ([http://a.co/cQ6zJk6](http://a.co/cQ6zJk6)) using a Raspberry Pi
    Zero. We will build an application where we can add reminders and events to a
    calendar and controlling appliances.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个项目中，我们将使用Raspberry Pi Zero来模拟Google Home ([https://madeby.google.com/home/](https://madeby.google.com/home/))
    和Amazon Echo ([http://a.co/cQ6zJk6](http://a.co/cQ6zJk6))这样的个人助理。我们将构建一个应用程序，可以添加提醒和事件到日历，并控制家电。
- en: We will be making use of **houndify** ([houndify.com](http://houndify.com))—a
    tool that is designed to provide interactions with smart devices. We will install
    the requisite software tools on the Raspberry Pi Zero. We will interface a button
    to the Raspberry Pi Zero's GPIO. We will write some code to create reminders and
    turn on/off appliances using *Houndify*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用**houndify** ([houndify.com](http://houndify.com))——一个旨在提供与智能设备交互的工具。我们将在Raspberry
    Pi Zero上安装所需的软件工具。我们将一个按钮连接到Raspberry Pi Zero的GPIO。我们将编写一些代码，使用*Houndify*创建提醒和开关家电。
- en: 'The following accessories (apart from your Raspberry Pi Zero) are recommended
    for this project:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配件（除了你的Raspberry Pi Zero之外）推荐用于此项目：
- en: '| **Item** | **Source** | **Price (in USD)** |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| **项目** | **来源** | **价格（美元）** |'
- en: '| USB sound card | [http://a.co/824dfM8](http://a.co/824dfM8) | 8.79 |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| USB声卡 | [http://a.co/824dfM8](http://a.co/824dfM8) | 8.79 |'
- en: '| Microphone amplifier board with adjustable gain | [https://www.adafruit.com/products/1713](https://www.adafruit.com/products/1713)
    | 7.95 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 可调增益麦克风放大板 | [https://www.adafruit.com/products/1713](https://www.adafruit.com/products/1713)
    | 7.95 |'
- en: '| 3.5 mm auxiliary cable | [https://www.adafruit.com/products/2698](https://www.adafruit.com/products/2698)
    | 2.50 |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 3.5mm辅助线缆 | [https://www.adafruit.com/products/2698](https://www.adafruit.com/products/2698)
    | 2.50 |'
- en: '| Momentary push button set | [https://www.adafruit.com/products/1009](https://www.adafruit.com/products/1009)
    | 5.95 |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 瞬时按钮套件 | [https://www.adafruit.com/products/1009](https://www.adafruit.com/products/1009)
    | 5.95 |'
- en: '| Breadboard, resistors, jumper wires, and capacitors | N. A. | N. A. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 面板、电阻、跳线电容 | N. A. | N. A. |'
- en: '| Speaker (suggestion) | [http://a.co/3h9uaTI](http://a.co/3h9uaTI) | 14.99
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 演讲者（建议） | [http://a.co/3h9uaTI](http://a.co/3h9uaTI) | 14.99 |'
- en: Installing requisite packages
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装所需的软件包
- en: 'The first step is installing the requisite packages for the project. This includes
    the following packages: `python3-pyaudio python3-numpy`. They may be installed
    as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是安装项目所需的软件包。这包括以下软件包：`python3-pyaudio python3-numpy`。它们可以按照以下方式安装：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How does it work?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: 'The following are the steps to be performed:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要执行的步骤：
- en: A push button is interfaced to the Raspberry Pi Zero's GPIO. When the GPIO button
    is pressed, the recorder is turned on (at the start of a beep sound from the speaker).
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个按钮连接到Raspberry Pi Zero的GPIO。当GPIO按钮被按下时，录音设备开启（扬声器发出蜂鸣声的开始）。
- en: The recorder accepts the user request and processes it using the `Houndify`
    library.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 录音设备接受用户请求，并使用`Houndify`库进行处理。
- en: The assistant processes the audio file using `Houndify` and responds to the
    user request.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 助手使用`Houndify`处理音频文件，并响应用户请求。
- en: In this project, we are using a push button to start listening to user requests,
    whereas commercially available products, such as Amazon's Echo or the Google Home,
    have special hardware (along with software) to enable this capability. We are
    using a push button to simplify the problem.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们使用一个按钮来开始监听用户请求，而市面上可用的产品，如亚马逊的Echo或谷歌的Home，具有特殊的硬件（以及软件）来启用此功能。我们使用按钮来简化问题。
- en: Setting up the audio tools
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置音频工具
- en: In this section, we will connect the USB sound card, speaker, and the microphone
    for the project.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将连接USB声卡、扬声器和项目所需的麦克风。
- en: Connecting the speaker
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接扬声器
- en: 'Perform the following steps to connect to speakers:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以连接到扬声器：
- en: 'Connect the USB sound card to your Raspberry Pi Zero and find out if the USB
    sound card enumerates using the `lsusb` command (on your Raspberry Pi Zero''s
    command-line terminal):'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 USB 声卡连接到您的 Raspberry Pi Zero，并使用 `lsusb` 命令（在您的 Raspberry Pi Zero 命令行终端）检查
    USB 声卡是否枚举：
- en: '![](img/image_10_001.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_001.png)'
- en: USB sound card enumeration
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: USB 声卡枚举
- en: Cheap USB sound cards typically have an input terminal (to connect a microphone)
    and an output terminal (to connect a speaker). Both the terminals are standard
    3.5 mm jacks. The input terminal is pink and typically marked with a microphone
    symbol. The output terminal is green and marked with a speaker symbol.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 便宜的 USB 声卡通常有一个输入端子（用于连接麦克风）和一个输出端子（用于连接扬声器）。这两个端子都是标准的 3.5 毫米插孔。输入端子是粉红色的，通常带有麦克风符号。输出端子是绿色的，带有扬声器符号。
- en: Connect a speaker to the output terminal (green) of the USB sound card.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将扬声器连接到 USB 声卡的输出端子（绿色）。
- en: 'On your Raspberry Pi Zero''s command-line terminal, list all the audio sources
    connected to your Raspberry Pi Zero using the following command:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 Raspberry Pi Zero 命令行终端中，使用以下命令列出连接到您的 Raspberry Pi Zero 的所有音频源：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As shown in the `aplay` command's output, the sound card is listed as `card
    1`. We need this information to set the USB sound card as the default audio source
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如 `aplay` 命令的输出所示，声卡列为准 `card 1`。我们需要这个信息来设置 USB 声卡为默认音频源
- en: 'Open your sound configuration file from the command line as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式从命令行打开您的声音配置文件：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Make sure that the configuration file''s source is set to `card 1` (the soundcard):'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保配置文件中的源设置为 `card 1`（声卡）：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Save the configuration file (by pressing *Ctrl *+ *X* and press *Y* to confirm
    the name of the file. Press *Enter* to save the file. Refer to [Chapter 11](83036e86-f65c-46ed-996d-4f1aeeab5022.xhtml), *Tips
    and Tricks* chapter for a detailed tutorial) and reboot your Raspberry Pi Zero.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 保存配置文件（通过按 *Ctrl *+ *X* 并按 *Y* 确认文件名。按 *Enter* 保存文件。有关详细教程，请参阅 [第 11 章](83036e86-f65c-46ed-996d-4f1aeeab5022.xhtml)，*技巧与窍门*
    部分）并重新启动您的 Raspberry Pi Zero。
- en: 'On reboot, test if the speaker works by downloading a wave file ([Freesound.org](http://Freesound.org)
    has plenty of wave files). From the command-line terminal, play your file as follows:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动后，通过下载波形文件（[Freesound.org](http://Freesound.org) 有大量波形文件）来测试扬声器是否工作。从命令行终端，按照以下方式播放您的文件：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If everything is configured properly, you should be able to play audio using
    your USB sound card and speaker. If you are not able to play the audio, check
    the connections and make sure that your USB sound card is enumerated correctly
    and you have chosen the right audio source in the configuration file. In the next
    section, we will set up the microphone.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切配置正确，您应该能够使用您的 USB 声卡和扬声器播放音频。如果您无法播放音频，请检查连接，并确保您的 USB 声卡已正确枚举，并且在配置文件中选择了正确的音频源。在下一节中，我们将设置麦克风。
- en: Connecting the microphone
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接麦克风
- en: In this section, we will be setting up an omnidirectional microphone to listen
    for commands/inputs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将设置一个全向麦克风以监听命令/输入。
- en: We tested off-the-shelf electret microphones, and the audio quality was not
    sufficient to perform speech recognition on the recorded audio samples. As an
    alternative, we recommend boundary microphones for a wide pickup, for example,
    [http://a.co/8YKSy4c](http://a.co/8YKSy4c).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们测试了市售的驻极体麦克风，音频质量不足以在录制的音频样本上执行语音识别。作为替代方案，我们推荐使用边界麦克风以实现广泛的拾音，例如，[http://a.co/8YKSy4c](http://a.co/8YKSy4c)。
- en: '![](img/image_10_002.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_002.png)'
- en: 'MAX9814 with omnidirectional microphone Source: Adafruit.com'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: MAX9814 配备全向麦克风 来源：Adafruit.com
- en: 'The gain of the amplifier can be set to three levels: **60 dB** when the gain
    pin is unconnected, **50 dB** when the gain pin is connected to ground, and **40
    dB** when the gain pin is connected to **V[dd]**.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 放大器的增益可以设置为三个级别：当增益引脚未连接时为 **60 dB**，当增益引脚连接到地时为 **50 dB**，当增益引脚连接到 **V[dd]**
    时为 **40 dB**。
- en: Connect **Vdd** and the **GND** pins to the **5V** and **GND** pins of the Raspberry
    Pi's GPIO pins (,pins 4 and 6 of the Raspberry Pi's GPIO).
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **Vdd** 和 **GND** 引脚连接到 Raspberry Pi 的 GPIO 引脚的 **5V** 和 **GND** 引脚（Raspberry
    Pi 的 GPIO 的第 4 和 6 引脚）。
- en: Cut the 3.5 mm cable into two halves. It consists of three wires connected to
    the **Tip**, **Ring** and **Sleeve** of the 3.5 mm connector (as shown in the
    picture here). Use a multimeter to identify the **Sleeve**, **Tip**, and **Ring**
    wires of the 3.5 mm connector.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 3.5 mm 电缆切成两半。它由连接到 3.5 mm 插座的 **尖端**、**环**和**套筒**的三根线组成（如图所示）。使用万用表识别 3.5
    mm 插座的 **套筒**、**尖端**和**环**线。
- en: '![](img/image_10_003.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_003.png)'
- en: Cut the auxiliary cable and identify the three wires of the cable
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 切断辅助电缆并识别电缆的三根线
- en: Connect a 100 mF electrolytic capacitor to the output of the amplifier where
    the positive lead is connected to the output and the other end is connected to
    the tip of the 3.5 mm connector. The ground pin of the amplifier is connected
    to the sleeve of the 3.5 mm connector.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个 100 mF 的电解电容器连接到放大器的输出端，其中正极连接到输出端，另一端连接到 3.5 mm 插座的尖端。放大器的接地引脚连接到 3.5 mm
    插座的套筒。
- en: '![](img/image_10_004.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_004.png)'
- en: Microphone connections to the 3.5 mm connector
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 麦克风连接到 3.5 mm 插座
- en: The microphone is ready to use. Power the microphone using the GPIO pins of
    the Raspberry Pi Zero and plug the 3.5 mm connector into the input terminals of
    the USB sound card (marked with the microphone symbol).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 麦克风已准备好使用。使用 Raspberry Pi Zero 的 GPIO 引脚为麦克风供电，并将 3.5 mm 插座插入 USB 声卡的输入端子（带有麦克风符号标记）。
- en: '![](img/image_10_005.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_005.jpg)'
- en: Microphone connected to 3.5 mm connector
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 麦克风连接到 3.5 mm 插座
- en: 'We are ready to test the microphone and set an optimal capture volume. From
    the Raspberry Pi Zero''s command-line terminal, run the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已准备好测试麦克风并设置最佳捕获音量。从 Raspberry Pi Zero 的命令行终端运行以下命令：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will record the file for 10 seconds. Play it back using the `aplay` command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这将录制文件 10 秒。使用 `aplay` 命令播放：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You should be able to hear the recorded conversation. Check your connections
    whether you don't hear anything (**GND**, **5V**, amplifier output pins, and so
    on. We have also included additional resources for the microphone troubleshooting
    at the end of this chapter).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够听到录制的对话。检查您的连接，如果您什么也听不到（**GND**、**5V**、放大器输出引脚等。我们还在本章末尾包括了麦克风故障排除的额外资源）。
- en: 'If the recorded content is too loud or too feeble, adjust the capture volume
    using `alsamixer`. Launch `alsamixer` from the command-line terminal:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果录音内容太响或太弱，请使用 `alsamixer` 调整捕获音量。从命令行终端启动 `alsamixer`：
- en: '![](img/image_10_006.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_006.png)'
- en: alsamixer control panel
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: alsamixer 控制面板
- en: Press *F5* to view all options. Use the arrow keys to adjust the value and M
    to disable autogain control. Let's move on to the next section where we build
    our application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 按 *F5* 查看所有选项。使用箭头键调整值，按 M 禁用自动增益控制。让我们继续到下一节，在那里我们构建我们的应用程序。
- en: Houndify
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Houndify
- en: '**Houndify** ([www.houndify.com](http://www.houndify.com)) is a tool that enables
    adding voice interaction to devices. Their free account enables performing 44
    different types of actions. Sign up for an account on their website and activate
    it (via your e-mail).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**Houndify** ([www.houndify.com](http://www.houndify.com)) 是一个允许向设备添加语音交互的工具。他们的免费账户允许执行
    44 种不同的操作。在他们的网站上注册一个账户并激活它（通过您的电子邮件）。'
- en: 'Once your account is activated, go to your account dashboard to create a new
    client:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您的账户被激活，转到您的账户仪表板以创建一个新的客户端：
- en: On creating a new account, a new client is automatically created. This client
    may not work properly. Delete it and create a new client from the dashboard.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新账户时，会自动创建一个新的客户端。这个客户端可能无法正常工作。请将其删除，并从仪表板创建一个新的客户端。
- en: '![](img/image_10_007.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_007.png)'
- en: Create new client
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新客户端
- en: Give a name to your application and select the platform to be Home Automation.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给您的应用程序命名并选择平台为智能家居。
- en: '![](img/image_10_008.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_008.png)'
- en: Name the application and select the platform
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 命名应用程序并选择平台
- en: The next step is selecting domains, that is, the nature of applications the
    assistant must support. Select Weather, Stock Market, Dictionary, and so on.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是选择域，即助手必须支持的应用程序的性质。选择天气、股市、词典等。
- en: '![](img/image_10_009.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_009.png)'
- en: Enable domains
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 启用域
- en: 'Click on Save & Continue. Once you have created your new client, click on it
    (from the dashboard) to retrieve the following credentials: Client ID and Client
    Key.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存并继续。一旦您创建了新的客户端，点击它（从仪表板）以检索以下凭证：客户端 ID 和客户端密钥。
- en: '![](img/image_10_010.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_010.png)'
- en: Copy the Client id and the Client Key from the dashboard
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从仪表板复制客户端 ID 和客户端密钥
- en: 'We also need to download the SDK for Python 3.x (latest version available at
    [https://docs.houndify.com/sdks#python](https://docs.houndify.com/sdks#python)):'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要下载Python 3.x版本的SDK（最新版本可在[https://docs.houndify.com/sdks#python](https://docs.houndify.com/sdks#python)找到）：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Extract the package as follows:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式提取包：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The SDK comes with plenty of examples to get started. Let''s consider a scenario
    where you would like to find out the weather at your current location by interacting
    with the voice assistant:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SDK附带了许多示例，可以帮助你开始。让我们考虑一个场景，你希望通过与语音助手交互来查找你当前位置的天气：
- en: Get your current GPS coordinates from a tool such as Google Maps. For example,
    the GPS coordinates for a specific intersection in San Francisco, California is
    37.778724, -122.414778\. Let's try to find the weather at this specific location.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从像Google Maps这样的工具中获取你的当前GPS坐标。例如，加利福尼亚州旧金山的特定交叉口的GPS坐标是37.778724, -122.414778。让我们尝试查找这个特定位置的天气。
- en: 'Open the `sample_wave.py` file and modify `line 39` of the file:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`sample_wave.py`文件并修改文件的第`39`行：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Save the file and from the command-line terminal, change directories to the
    `Houndify SDK folder`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件，然后在命令行终端，切换到`Houndify SDK文件夹`：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After processing the request, it should print a detailed response:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理请求后，它应该打印出详细的响应：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We verified the function and setup of the Houndify SDK by testing the example.
    We uploaded an audio file to the Houndify server requesting the current weather
    information (play the audio file and find out). The `sample_wave.py` script takes
    the `client_id`, `client_key`, and the audio file as inputs. It prints out the
    output from the Houndify server.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过测试示例验证了Houndify SDK的功能和设置。我们上传了一个音频文件到Houndify服务器，请求当前的天气信息（播放音频文件并找出）。`sample_wave.py`脚本将`client_id`、`client_key`和音频文件作为输入。它打印出Houndify服务器的输出。
- en: You need to enable specific domains to retrieve specific information. For example,
    we enabled the weather domain to retrieve the weather information. It is also
    possible to add custom commands to the program.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要启用特定的域来检索特定的信息。例如，我们启用了天气域来检索天气信息。也可以向程序中添加自定义命令。
- en: In the next section, we will modify `sample_wave.py` to build our application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将修改`sample_wave.py`来构建我们的应用程序。
- en: Building voice commands
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建语音命令
- en: 'Let''s get started with building our voice assistant that we can use to find
    the weather and turn on/off lights. Because we enabled the weather domain while
    setting up our Houndify account, we need to add custom commands to turn on/off
    lights:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始构建我们可以用来查找天气和开关灯的语音助手。因为我们设置Houndify账户时启用了天气域，所以我们需要添加自定义命令来开关灯：
- en: On your Houndify dashboard, go to your client's home page. Dashboard | Click
    on your client.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的Houndify仪表板上，前往客户的首页。仪表板 | 点击你的客户。
- en: Locate Custom Commands on the navigation bar to the left. Let's add a custom
    command each to turn on and turn off the light.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航栏上找到自定义命令。让我们添加一个自定义命令来打开和关闭灯光。
- en: 'Delete `ClientMatch #1` that comes as a template with the custom commands.'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '删除与自定义命令一起提供的模板中的`ClientMatch #1`。'
- en: '![](img/image_10_011.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_011.png)'
- en: 'Locate Custom commands and Delete Client Match #1'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '定位自定义命令和删除Client Match #1'
- en: 'Select Add ClientMatch to add a custom command to turn on lights. Populate
    the fields with the following information:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“添加ClientMatch”以添加一个自定义命令来打开灯光。填写以下信息：
- en: 'Expression: `["Turn"].("Lights"). ["ON"]`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Expression: `["Turn"].("Lights"). ["ON"]`'
- en: 'Result: `{"action": "turn_light_on"}`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Result: `{"action": "turn_light_on"}`'
- en: 'SpokenResponse: `Turning Lights On`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SpokenResponse: `Turning Lights On`'
- en: 'SpokenResponseLong: `Turning your Lights On`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SpokenResponseLong: `Turning your Lights On`'
- en: 'WrittenResponse: `Turning Lights On`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'WrittenResponse: `Turning Lights On`'
- en: 'WrittenResponseLong: `Turning your Lights On`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'WrittenResponseLong: `Turning your Lights On`'
- en: Repeat the preceding steps to add a command to turn lights off
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复前面的步骤以添加一个命令来关闭灯光
- en: Test and verify that these commands work using `sample_wave.py`. Make your own
    recording for the test. We have also provided audio files along with this chapter's
    download (available in the folder `audio_files`).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sample_wave.py`测试和验证这些命令是否工作。为测试制作你自己的录音。我们还在本章的下载中提供了音频文件（可在`audio_files`文件夹中找到）。
- en: 'Let''s make a copy of `sample_wave.py` to build our assistant. We recommend
    reading through the file and familiarizing yourself with its function. The detailed
    documentation for the Houndify SDK is available at [https://docs.houndify.com/sdks/docs/python](https://docs.houndify.com/sdks/docs/python):'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们复制 `sample_wave.py` 文件来构建我们的助手。我们建议阅读该文件并熟悉其功能。Houndify SDK 的详细文档可在 [https://docs.houndify.com/sdks/docs/python](https://docs.houndify.com/sdks/docs/python)
    找到：
- en: In the file `stream_wav.py`, the `StreamingHoundClient` class is used to send
    audio queries, such as request for weather information and commands to turn on/off
    lights.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件 `stream_wav.py` 中，使用 `StreamingHoundClient` 类发送音频查询，例如请求天气信息或开关灯的命令。
- en: The `MyListener` class inherits the `HoundListener` class (from the `houndify`
    SDK).
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MyListener` 类从 `houndify` SDK 中的 `HoundListener` 类继承。'
- en: 'The `MyListener` class implements callback functions for three scenarios:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MyListener` 类实现了三个场景的回调函数：'
- en: Partial Transcription (the `onPartialTranscript` method)
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部分转录（`onPartialTranscript` 方法）
- en: Complete Transcription (the `onFinalResponse` method)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整转录（`onFinalResponse` 方法）
- en: Error State (the `onError` method)
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误状态（`onError` 方法）
- en: We need to make use of action intents to turning on/off lights using voice command.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要利用动作意图通过语音命令来开关灯。
- en: 'When we implemented the custom commands on the Houndify website, we added an
    action intent for each command. For example, the action intent for turning on
    the lights was:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在 Houndify 网站上实现自定义命令时，为每个命令添加了一个动作意图。例如，打开灯的动作意图是：
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In order to turn on/off the lights based on the received action intent, we
    need to import the `OutputDevice` class from `gpiozero`:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了根据接收到的动作意图开关灯，我们需要从 `gpiozero` 模块导入 `OutputDevice` 类：
- en: '[PRE13]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The GPIO pin that controls the light is initialized in the `__init__` method
    of the `MyListener` class:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制灯的 GPIO 引脚在 `MyListener` 类的 `__init__` 方法中初始化：
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'On completing transcription, if an action intent is received, the lights are
    either turned on or turned off. It is implemented as follows:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在完成转录后，如果收到动作意图，灯将打开或关闭。实现方式如下：
- en: '[PRE15]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`response` is a dictionary that consists of the parsed `json` response. Refer
    to the SDK documentation and try printing the response yourself to understand
    its structure.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`response` 是一个包含解析后的 `json` 响应的字典。请参阅 SDK 文档，并尝试打印响应以了解其结构。'
- en: We also need to announce the voice assistant's action while turning on/off lights.
    We explored different text-to-speech tools, and they sounded robotic when compared
    with off-the-shelf products such as the Google Home or Amazon Echo. We came across
    this script that makes use of the *Google Speech-to-Text engine* at [http://elinux.org/RPi_Text_to_Speech_(Speech_Synthesis)](http://elinux.org/RPi_Text_to_Speech_(Speech_Synthesis)).
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要在开关灯时宣布语音助手的动作。我们探索了不同的文本到语音工具，与谷歌 Home 或亚马逊 Echo 等现成产品相比，它们听起来很机械。我们遇到了这个利用
    [http://elinux.org/RPi_Text_to_Speech_(Speech_Synthesis)](http://elinux.org/RPi_Text_to_Speech_(Speech_Synthesis))
    的 *谷歌语音识别引擎* 的脚本。
- en: Because the script makes use of Google's text-to-speech engine, it connects
    to the Internet to fetch the transcribed audio data.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 因为脚本使用了谷歌的文本到语音引擎，所以它连接到互联网以获取转录的音频数据。
- en: 'Open a new shell script from the Raspberry Pi''s command-line terminal:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Raspberry Pi 的命令行终端打开一个新的 shell 脚本：
- en: '[PRE16]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Paste the following contents:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 粘贴以下内容：
- en: '[PRE17]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Make the file executable:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使文件可执行：
- en: '[PRE18]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We are going to make use of this script to announce any actions by the assistant.
    Test it from the command line using the following code:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用此脚本来宣布助手的任何动作。使用以下代码从命令行测试它：
- en: '[PRE19]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The system calls to announce the voice assistant actions are implemented as
    follows:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现宣布语音助手动作的系统调用如下：
- en: '[PRE20]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s test what we have built so far in this section. The preceding code snippets
    are available for download along with this chapter as `voice_assistant_inital.py`.
    Make it executable as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试本节中构建的内容。前面的代码片段与本章一起作为 `voice_assistant_inital.py` 提供，可下载。按照以下方式使其可执行：
- en: '[PRE21]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Test the program as follows (audio files are also available for download with
    this chapter):'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式测试程序（本章还提供了可下载的音频文件）：
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Adding a button
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加按钮
- en: Let's add a button to our voice assistant. This momentary push button is connected
    to pin 2 (BCM numbering) and the LED is connected to pin 3.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在语音助手中添加一个按钮。这个瞬态按钮连接到引脚 2（BCM 编号），LED 连接到引脚 3。
- en: '![](img/image_10_012.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_012.png)'
- en: Voice Assistant interface setup
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 语音助手界面设置
- en: 'In order to read the button presses, we need to import the `Button` class from
    `gpiozero`:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了读取按钮的按下，我们需要从`gpiozero`导入`Button`类：
- en: '[PRE23]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When a button is pressed, the voice assistant needs to play a beep sound indicating
    that it is awaiting the user's command. Beep sounds of your choice can be downloaded
    from [www.freesound.org](http://www.freesound.org).
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当按钮被按下时，语音助手需要播放一个蜂鸣声，以表明它正在等待用户的命令。您可以选择的蜂鸣声可以从[www.freesound.org](http://www.freesound.org)下载。
- en: 'Following the beep sound, the user command is recorded for a duration of 5
    seconds. The recorded file is then processed using the *Houndify* SDK. The following
    code snippet shows the trigger function that is called when the button is pressed:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在蜂鸣声之后，用户命令将被记录5秒钟。然后使用*Houndify* SDK处理记录的文件。以下代码片段显示了在按钮按下时调用的触发函数：
- en: '[PRE24]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The trigger function is registered as follows:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 触发函数的注册方法如下：
- en: '[PRE25]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Connect the button and the LED to the Raspberry Pi's GPIO interface to test
    the voice assistant.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 将按钮和LED连接到树莓派的GPIO接口以测试语音助手。
- en: '![](img/image_10_013.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_10_013.jpg)'
- en: Voice assistant setup
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 语音助手设置
- en: 'The voice assistant code file is available for download along with this chapter
    as `voice_assistant.py`. Download the code sample and try the following commands:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 语音助手代码文件作为本章节的附件`voice_assistant.py`提供下载。下载代码示例并尝试以下命令：
- en: '[PRE26]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We have shared a video (on this book's site) that demonstrates the function
    of the voice assistant. Now, we have demonstrated the voice assistant using an
    LED. In order to control a table lamp, simply replace the LED with a power switch
    tail II ([http://www.powerswitchtail.com/Pages/default.aspx](http://www.powerswitchtail.com/Pages/default.aspx)).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们分享了一个视频（在本书网站上），演示了语音助手的功能。现在，我们已经使用LED演示了语音助手。为了控制台灯，只需将LED替换为电源开关尾II([http://www.powerswitchtail.com/Pages/default.aspx](http://www.powerswitchtail.com/Pages/default.aspx))。
- en: '![](img/image_10_014.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_10_014.png)'
- en: '**Things to keep in mind**:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**需要注意的事项**：'
- en: Add `voice_assistant.py` to `/etc/rc.local` so that it starts automatically
    on boot.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`voice_assistant.py`添加到`/etc/rc.local`，以便在启动时自动启动。
- en: The entire setup can be unwieldy. Assemble the components inside an enclosure
    to organize the wiring.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个设置可能难以操作。将组件组装在机箱内以组织布线。
- en: Because the project involves electrical appliances, use prescribed cables and
    terminate them properly. Ensure that the cables are connected properly. We will
    share examples of the same on our website.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于项目涉及电器，请使用规定的电缆并正确终止它们。确保电缆连接正确。我们将在我们的网站上分享相同的示例。
- en: '**Project ideas and enhancements**:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目想法和改进**：'
- en: Currently, the assistant works only at the press of a button. How will you make
    it listen for a keyword? For example, "Ok, Google" or "Alexa"?
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前，助手仅在按钮按下时工作。您将如何让它监听关键词？例如，“好的，谷歌”或“阿里克斯”？
- en: Is it possible to have a remote trigger? Think something on the lines of *Amazon
    Tap*.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否可以有一个远程触发器？想想类似*亚马逊Tap*的东西。
- en: If you have lights such as Philips Hue or Internet-connected switches such as
    WeMo switch smartplug or the TP-Link Smart switch, you can control them using
    a voice assistant. IFTTT provides applets to control them yourself. Create a maker
    channel web hook to control them. Refer to Chapter 8 for examples.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您有如飞利浦Hue或互联网连接的开关，如WeMo开关智能插头或TP-Link智能开关，您可以使用语音助手来控制它们。IFTTT提供了用于自行控制的applets。创建一个maker通道web钩子来控制它们。请参阅第8章的示例。
- en: Web framework based appliance control/dashboard
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于Web框架的电器控制/仪表盘
- en: In this section, we will review building a dashboard in order to control appliances.
    This could be a dashboard for the aquarium where you would like to monitor all
    the requisite parameters for the tank or a dashboard for the garden where you
    can control the flow control valves for your garden based on information from
    the sensors. We will demonstrate this with a simple example and show how you can
    use it to meet your requirements.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾如何构建仪表盘以控制电器。这可能是一个用于水族箱的仪表盘，您可以在其中监控水箱所需的所有参数，或者是一个用于花园的仪表盘，您可以根据传感器的信息控制花园的流量控制阀。我们将通过一个简单的示例来演示，并展示如何使用它来满足您的需求。
- en: 'We will make use of the `flask` framework to build our dashboard. If you haven''t
    installed the `flask` framework (from the previous chapters), you can install
    it as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`flask`框架来构建我们的仪表盘。如果您还没有安装`flask`框架（从前面的章节），您可以按照以下方式安装：
- en: '[PRE27]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If you are not familiar with the flask framework, we have written up some basics
    and getting started in [Chapter 7](2316ddf6-c2d7-4810-a7ab-3600a3e2549d.xhtml),
    *Requests and Web Frameworks*. We are going to discuss controlling the relay board
    (shown in the picture here) from a web dashboard (available at [http://a.co/1qE0I3U](http://a.co/1qE0I3U)).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉 Flask 框架，我们在第 7 章“请求和 Web 框架”中编写了一些基础知识入门。我们将讨论从 Web 仪表板（可在 [http://a.co/1qE0I3U](http://a.co/1qE0I3U)
    获取）控制继电器板（如图所示）。
- en: '![](img/image_10_015.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_10_015.jpg)'
- en: Relay module
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 继电器模块
- en: The relay board consists of eight relays that could be used to control eight
    devices. The relays are rated for 10A, 125V AC and 10A, 28V DC.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 继电器板由八个继电器组成，可用于控制八个设备。继电器额定电流为 10A，交流电压 125V 和直流电压 10A，28V。
- en: It is important to follow safety regulations while trying to control AC appliances
    using a relay board. If you are a beginner in electronics, we recommend using
    the unit, [http://a.co/9WJtANZ](http://a.co/9WJtANZ). It comes with the requisite
    circuitry and protections (shown in the following figure). **Safety first!**
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试使用继电器板控制交流电器时，遵循安全规范非常重要。如果你是电子学领域的初学者，我们建议使用单元 [http://a.co/9WJtANZ](http://a.co/9WJtANZ)。它配备了必要的电路和保护（如图所示）。**安全第一！**
- en: '![](img/image_10_016.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_10_016.jpg)'
- en: Enclosed high power relay for Raspberry Pi
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于 Raspberry Pi 的高功率继电器
- en: 'Each relay on the 8-relay board consists of the following components: an optocoupler,
    transistor, relay, and a freewheeling diode (shown in the schematic here):'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 8 继电器板上的每个继电器由以下组件组成：光电耦合器、晶体管、继电器和一个续流二极管（如图所示）：
- en: '![](img/image_10_017.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_10_017.png)'
- en: Schematic of one relay on 8-relay board (generated using fritzing)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 8 继电器板上一个继电器的原理图（使用 fritzing 生成）
- en: The schematic is used to explain the function of the relay board; hence, it
    is not accurate. It is missing some discrete components.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 原理图用于解释继电器板的功能；因此，它并不准确。它缺少一些离散组件。
- en: 'The relay board requires a 5V power supply (through the Vcc pin):'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继电器板需要一个 5V 电源（通过 Vcc 引脚）：
- en: '![](img/image_10_018.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_10_018.jpg)'
- en: Vcc, GND and GPIO pins
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Vcc、GND 和 GPIO 引脚
- en: Each relay on the relay board is controlled by pins IN1 through IN8\. Each pin
    is connected to an optocoupler (optoisolator-U1 in the schematic). The function
    of the isolator is to separate the Raspberry Pi from high voltages connected to
    the relay. It protects from any transient voltages while switching the relays
    (we have provided additional resources at the end of this chapter to better understand
    optocouplers).
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个继电器板上的继电器都由 IN1 至 IN8 引脚控制。每个引脚都连接到一个光电耦合器（原理图中标记为 U1 的光电隔离器）。隔离器的功能是将 Raspberry
    Pi 与连接到继电器的电压隔离。它保护继电器在切换时免受任何瞬态电压的影响（我们已在本章末尾提供了额外的资源，以更好地了解光电耦合器）。
- en: The phototransistor of the optocoupler is connected to the base of an NPN transistor.
    The NPN transistor's collector pin is connected to a relay, whereas the emitter
    is connected to the ground.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 光电晶体管连接到 NPN 晶体管的基极。NPN 晶体管的集电极引脚连接到继电器，而发射极连接到地。
- en: The relay is driven by an active-low signal that is when a 0V signal is given
    to one of the pins, IN1 through IN8\. The phototransistor (of the optocoupler)
    sends a *high* signal to the base of the transistor. Here, the transistor acts
    as a switch. It closes the circuit and thus energizes the relay. This is basically
    the transistor switching circuit that we discussed in an earlier chapter except
    for an additional component, the optocoupler. An LED lights up indicating that
    the relay is energized.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继电器由低电平信号驱动，即当给 IN1 至 IN8 中的任一引脚提供 0V 信号时。光电晶体管（光电耦合器的一部分）向晶体管的基极发送一个 *高* 信号。在这里，晶体管充当开关。它闭合电路，从而为继电器供电。这基本上是我们之前章节中讨论的晶体管开关电路，除了一个额外的组件，即光电耦合器。一个
    LED 点亮，表示继电器已供电。
- en: '![](img/image_10_019.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_10_019.png)'
- en: The components of each relay circuit (labeled)
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 每个继电器电路的组件（已标记）
- en: We strongly recommend reading about optocouplers to understand their need and
    how an active-low signal to this relay board drives the relays.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议阅读有关光电耦合器的知识，以了解其需求以及如何使用低电平信号驱动此继电器板。
- en: Across each relay, there is a flywheel diode. A flywheel diode protects the
    circuit from any inductive kickback voltages of the relay when the relay is de-energized/turned
    off. (We have included a reading resource on relays and inductive kickbacks at
    the end of this chapter.)
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个继电器之间有一个飞轮二极管。飞轮二极管在继电器断电/关闭时保护电路免受任何电感反冲电压的影响。（我们在本章末尾包含了一个关于继电器和电感反冲的阅读资源。）
- en: Each relay has three terminals, namely the common terminal, normally open terminal,
    and the normally closed terminal. When an active-low signal is used to drive one
    of the relays, the common terminal comes into contact with the normally open terminal.
    When the relay is de-energized, the common terminal comes into contact with the
    normally closed terminal. Hence, the terminals have the name, normally open and
    normally closed (The terminals are highlighted with the labels N.O., C, and N.C.
    in the picture here).
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个继电器有三个端子，即公共端子、常开端子和常闭端子。当使用低电平信号驱动其中一个继电器时，公共端子与常开端子接触。当继电器断电时，公共端子与常闭端子接触。因此，端子有常开和常闭（如图中的标签
    N.O.、C 和 N.C. 所示）的名称。
- en: '![](img/image_10_020.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_020.png)'
- en: The terminals of a relay
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 继电器的端子
- en: The device that needs to be controlled using the web dashboard needs to be connected
    to the relay terminals, as shown in the schematic given later. For example, let's
    consider a device that is powered using a 12V adapter. The device's needs to be
    rigged such that the positive terminal of the power jack is connected to the common
    terminal of the relay. The normally open terminal is connected to the device's
    positive line. The device's ground is left untouched. Keep the power adapter plugged
    in, and the device shouldn't turn on as long as the relay is not energized. Let's
    review controlling this device using a web dashboard.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要通过网络仪表板控制的设备需要连接到继电器端子，如图中所示。例如，让我们考虑一个使用 12V 适配器供电的设备。该设备需要配置，使得电源插座的正极连接到继电器的公共端子。常开端子连接到设备的正线。设备的接地保持不变。保持电源适配器插入，只要继电器未通电，设备就不应该打开。让我们回顾一下如何使用网络仪表板控制这个设备。
- en: '![](img/image_10_021.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_021.png)'
- en: Schematic to rig a 12V DC appliance with a relay
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 使用继电器搭建 12V 直流电器的电路图
- en: For an AC power appliance, we recommend using the power switch tail II or the
    AC relay unit discussed earlier in this section. They are safe for hobby grade
    applications.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 对于交流电源电器，我们建议使用电源开关尾 II 或本节中较早讨论的交流继电器单元。它们适用于业余级应用。
- en: Building the web dashboard
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建网络仪表板
- en: 'The first step is creating the html template for the dashboard. Our dashboard
    is going to enable controlling four appliances, that is, turn them on or off:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建仪表板的 HTML 模板。我们的仪表板将能够控制四个电器，即打开或关闭它们：
- en: 'In our dashboard, we need an `html``table` where each row on the table represents
    a device, as follows:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的仪表板中，我们需要一个 `html table`，其中表格的每一行代表一个设备，如下所示：
- en: '[PRE28]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the preceding code snippet, each device state is encapsulated in a data
    cell `<td>`, each device is represented by a `checkbox`, and the device state
    is represented by an on/off `radio` button. For example, a motor is represented
    as follows:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，每个设备状态都被封装在一个数据单元格 `<td>` 中，每个设备由一个 `checkbox` 表示，设备状态由一个开/关 `radio`
    按钮表示。例如，一个电机表示如下：
- en: '[PRE29]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'On the dashboard, this would be represented as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在仪表板上，这将被表示如下：
- en: '![](img/image_10_022.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_022.png)'
- en: Device represented by a checkbox and radio button
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 由复选框和单选按钮表示的设备
- en: 'The table is encapsulated in an `html form`:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表格被封装在一个 `html form` 中：
- en: '[PRE30]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The device states are submitted to the `flask` server when the user hits the
    `energize` button:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击 `energize` 按钮时，设备状态提交到 `flask` 服务器：
- en: '[PRE31]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![](img/image_10_023.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_023.png)'
- en: Energize button
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 充电按钮
- en: 'On the server side, we need to set up the GPIO pins used to control the relays:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端，我们需要设置用于控制继电器的 GPIO 引脚：
- en: '[PRE32]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The list `relay_index` represents the GPIO pins being used to control the relays.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列表 `relay_index` 代表用于控制继电器的 GPIO 引脚。
- en: 'Before starting the server, we need to create an `OutputDevice` object (from
    the `gpiozero` module) for all the devices:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在启动服务器之前，我们需要为所有设备创建一个 `OutputDevice` 对象（来自 `gpiozero` 模块）：
- en: '[PRE33]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `OutputDevice` object meant for each device/relay is initialized and added
    to the `devices` list.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个设备/继电器初始化并添加到 `devices` 列表的 `OutputDevice` 对象。
- en: When the form is submitted (by hitting the energize button), the `POST` request
    is handled by the `energize()` method.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当表单提交（通过点击激活按钮）时，`POST` 请求由 `energize()` 方法处理。
- en: We are controlling four devices that are represented by `relay_x`, and their
    corresponding states are represented by `state_x`, that is, On or Off. The default
    state is Off.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在控制由 `relay_x` 表示的四个设备，它们对应的状态由 `state_x` 表示，即开启或关闭。默认状态是关闭。
- en: 'When a form is submitted by the user, we determine if the `POST` request contains
    information related to each device. If a specific device needs to be turned on/off,
    we call the `on()`/`off()` method of that device''s object:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户提交表单时，我们确定 `POST` 请求是否包含与每个设备相关的信息。如果需要打开/关闭特定设备，我们调用该设备对象的 `on()`/`off()`
    方法：
- en: '[PRE34]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the preceding code snippet, we fetch information related to all relays as
    a list:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们以列表的形式获取与所有继电器相关的信息：
- en: '[PRE35]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In the form, each device is represented by a value `relay_x` (`relay_0` through
    `relay_3`). A `for` loop is used to determine a specific relay is turned on/off.
    The state of each device is represented by the value `state_x` where `x` corresponds
    to the device (from 0 through 3).
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表单中，每个设备由一个值 `relay_x` 表示（`relay_0` 通过 `relay_3`）。使用 `for` 循环确定特定的继电器是开启还是关闭。每个设备的状态由
    `state_x` 表示，其中 `x` 对应于设备（从 0 到 3）。
- en: The GPIO pins used in this example are connected to the relay board pins, IN1
    through IN4\. The relay board is powered by the Raspberry Pi's GPIO power supply.
    Alternatively, you may power it using an external power supply. (You still need
    to connect the ground pin of the Raspberry Pi Zero to the relay board.)
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本例中使用的 GPIO 引脚连接到继电器板引脚，IN1 通过 IN4。继电器板由 Raspberry Pi 的 GPIO 电源供电。或者，你也可以使用外部电源供电。（你仍然需要将
    Raspberry Pi Zero 的地线引脚连接到继电器板。）
- en: The earlier-mentioned dashboard is available along with this chapter under the
    subfolder `flask_framework_appliance` (including the `flask` server, html files,
    and so on.). In the following snapshot, the Motor and Tank Light 2 are checked
    and set to On. In the picturehere, the first and the third relay are energized.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之前提到的仪表板可以在子文件夹 `flask_framework_appliance`（包括 `flask` 服务器、html 文件等）下找到。在下面的快照中，电机和油箱灯2被检查并设置为开启。在这张图片中，第一和第三继电器被激活。
- en: '![](img/image_10_024.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_024.png)'
- en: Turning on Motor and Tank Light 2
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 开启电机和油箱灯2
- en: '![](img/image_10_025.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_025.jpg)'
- en: Relays 1 and 3 energized
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 继电器1和3被激活
- en: '**Exercise for the reader**:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '**读者练习**：'
- en: In this section, we made use of a `POST` request to control devices. How would
    you make use of a `GET` request to display room temperature from a temperature
    sensor?
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用了 `POST` 请求来控制设备。你将如何使用 `GET` 请求从温度传感器显示室温？
- en: '**Project ideas/enhancements**:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目想法/改进**：'
- en: With some basic web design skills, you should be able to build a dashboard with
    better aesthetic appeal.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你有一些基本的网页设计技能，你应该能够构建一个具有更好审美吸引力的仪表板。
- en: Keep in mind that a dashboard should provide as detailed information as possible.
    Determine how data visualization tools could enhance your dashboard.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请记住，仪表板应尽可能提供详细的信息。确定数据可视化工具如何增强你的仪表板。
- en: Consider replacing the checkbox and radio buttons with a sliding toggle switch
    (the type used in mobile applications).
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑用滑动切换开关（在移动应用程序中使用的类型）替换复选框和单选按钮。
- en: You can build a dashboard for switching holiday light sequences from your local
    browser. Think of ways to compete with your neighbours during the holidays.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用本地浏览器构建一个用于切换假日灯光序列的仪表板。考虑一下如何在假日期间与邻居竞争。
- en: You can permanently install the relay board and the Raspberry Pi Zero in a weather
    proof enclosure as given at [http://www.mcmelectronics.com/product/21-14635](http://www.mcmelectronics.com/product/21-14635).
    Check out this book's website for some examples.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以将继电器板和 Raspberry Pi Zero 永久安装在给定的防风雨外壳中，如[http://www.mcmelectronics.com/product/21-14635](http://www.mcmelectronics.com/product/21-14635)所示。查看本书的网站以获取一些示例。
- en: Personal Health Improvement—Sitting is the new smoking
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 个人健康改善—久坐是新的吸烟
- en: This project makes use of specific accessories. You are welcome to substitute
    it with alternatives.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目使用了特定的配件。欢迎用替代品替换。
- en: So far, we have discussed projects that could be an enhancement around your
    living environment. In this section, we are going to write some Python code on
    the Raspberry Pi Zero and build a tool that helps improving your personal help.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了可以增强你生活环境的项目。在本节中，我们将在Raspberry Pi Zero上编写一些Python代码，并构建一个帮助你提升个人健康的工具。
- en: According to the World Health Organization, physical activity of 150 minutes
    in a week can help you stay healthy. Recent studies have found that walking 10,000
    steps in a day can help avoid life style diseases. We have been making use of
    pedometers to keep track of our daily physical activity. It is difficult to maintain
    consistency in physical activity as we tend to ignore our personal health over
    daily commitments. For example, in the physical activity timeline shown here,
    you will note that all the physical activity is concentrated toward the end of
    the day.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 根据世界卫生组织的数据，一周150分钟的身体活动可以帮助你保持健康。最近的研究发现，每天走10000步可以帮助避免生活方式疾病。我们一直在使用步数计来跟踪我们的日常身体活动。由于我们倾向于在日常承诺中忽视个人健康，因此很难保持身体活动的连贯性。例如，在下面的身体活动时间线中，你会注意到所有的身体活动都集中在一天的末尾。
- en: '![](img/image_10_026.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_026.png)'
- en: Physical activity in a day (data fetched from a commercially available pedometer)
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 一天的身体活动（从商业步数计获取的数据）
- en: 'We are going to build a visual aid that would remind us to stay physically
    active. We believe that this tool should help put your personal fitness tracker
    to good use. The following are the recommended accessories for this project:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个视觉辅助工具，以提醒我们保持身体活跃。我们相信这个工具应该能帮助你充分利用个人健身追踪器。以下是此项目的推荐配件：
- en: '**Pedometer**: The cost of pedometers vary anywhere from $20-$100\. We recommend
    getting a tracker from Fitbit since it comes with extensive developer resources.
    It is not required to have a tracker. We are going to demonstrate this visual
    aid using a Fitbit One ([http://a.co/8xyNSmg](http://a.co/8xyNSmg)) and suggest
    alternatives at the end.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步数计**：步数计的价格从20美元到100美元不等。我们建议从Fitbit购买追踪器，因为它提供了丰富的开发者资源。不需要追踪器。我们将使用Fitbit
    One([http://a.co/8xyNSmg](http://a.co/8xyNSmg))来演示这个视觉辅助工具，并在最后提出替代方案。'
- en: '**Pimoroni Blinkt (optional)**: This is an LED strip ([https://www.adafruit.com/product/3195](https://www.adafruit.com/product/3195))
    that can be stacked on top of your Raspberry Pi Zero''s GPIO pins (shown in the
    picture here).'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pimoroni Blinkt（可选**）：这是一条LED灯带([https://www.adafruit.com/product/3195](https://www.adafruit.com/product/3195))，可以堆叠在你的Raspberry
    Pi Zero的GPIO引脚上（如图所示）。'
- en: '![](img/image_10_027.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_027.png)'
- en: Pimoroni Blinkt
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: Pimoroni Blinkt
- en: '**Pimoroni Rainbow HAT (optional** [https://www.adafruit.com/products/3354](https://www.adafruit.com/products/3354)**)**:
    This is an add-on hardware designed for the Android Things platform on the Raspberry
    Pi. It comes with LEDs, 14-segment displays, and a buzzer. It can come handy for
    the project.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pimoroni Rainbow HAT（可选** [https://www.adafruit.com/products/3354](https://www.adafruit.com/products/3354)**)**：这是一个为Raspberry
    Pi上的Android Things平台设计的附加硬件。它配备了LED灯、14段显示器和蜂鸣器。它对于项目来说可能很有用。'
- en: '![](img/image_10_028.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_028.jpg)'
- en: Rainbow HAT for android things
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Android Things的Rainbow HAT
- en: Alternatively, you may add LED strips and components to this visual aid using
    your creativity.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，你可以用你的创造力向这个视觉辅助工具添加LED灯带和组件。
- en: Installing requisite software packages
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装必需的软件包
- en: 'The first step is installing the requisite packages. Because we are going to
    make use of the Fitbit tracker, we need to install the `fitbit python client`:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是安装必需的包。因为我们将使用Fitbit追踪器，所以我们需要安装`fitbit python客户端`：
- en: '[PRE36]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If you are going to make use of the Pimoroni Blinkt LED strip, you should install
    the following package:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算使用Pimoroni Blinkt LED灯带，你应该安装以下包：
- en: '[PRE37]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you are going to be making use of the rainbow HAT, the following package
    needs to be installed:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算使用彩虹HAT，以下包需要安装：
- en: '[PRE38]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Getting access keys for Fitbit client
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取Fitbit客户端的访问密钥
- en: We need access keys to make use of the Fitbit API. There is a script available
    from the fitbit python client repository at [https://github.com/orcasgit/python-fitbit](https://github.com/orcasgit/python-fitbit).
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要访问密钥来使用Fitbit API。fitbit python客户端存储库中有可用的脚本，网址为[https://github.com/orcasgit/python-fitbit](https://github.com/orcasgit/python-fitbit)。
- en: The access keys can also be obtained from the command-line terminal of a Linux
    or Mac OS laptop.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 访问密钥也可以从Linux或Mac OS笔记本电脑的命令行终端获取。
- en: 'Create a new app at [https://dev.fitbit.com/apps](https://dev.fitbit.com/apps):'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://dev.fitbit.com/apps](https://dev.fitbit.com/apps)创建一个新的应用：
- en: '![](img/image_10_029.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_029.png)'
- en: Register a new app at dev.fitbit.com
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在dev.fitbit.com注册一个新的应用
- en: While registering a new application, fill in the description including the name
    of your application and give a temporary description, organization, website, and
    so on, and set the OAuth 2.0 Application Type to Personal and access type to Read-Only.
    Set the callback URL to `http://127.0.0.1:8080`.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在注册新应用时，填写描述，包括您应用的名称，并给出一个临时描述、组织、网站等，并将OAuth 2.0应用类型设置为个人，访问类型设置为只读。将回调URL设置为`http://127.0.0.1:8080`。
- en: '![](img/image_10_030.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_030.png)'
- en: Set callback URL
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 设置回调URL
- en: Once your application is created, copy the Client ID and Client Secret from
    application's dashboard.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您的应用创建完成，从应用的仪表板复制Client ID和Client Secret。
- en: '![](img/image_10_031.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_031.png)'
- en: Note down the client_id and client secret
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 记录client_id和client_secret
- en: 'From the Raspberry Pi''s command-line terminal, download the following script:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Raspberry Pi的命令行终端下载以下脚本：
- en: '[PRE39]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The next step needs to be executed by opening the command-line terminal from
    your Raspberry Pi Zero's desktop (not via remote access).
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步需要通过从Raspberry Pi Zero的桌面打开命令行终端（而不是通过远程访问）来执行。
- en: 'Execute the script by passing the `client id` and `client secret` as arguments:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递`client id`和`client secret`作为参数来执行脚本：
- en: '[PRE40]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: It should launch a browser on your Raspberry Pi Zero's desktop and direct you
    to a page on [https://www.fitbit.com/home](https://www.fitbit.com/home) requesting
    your authorization to access your information.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它应该在您的Raspberry Pi Zero桌面启动浏览器，并将您导向一个请求授权访问您信息的[https://www.fitbit.com/home](https://www.fitbit.com/home)页面。
- en: '![](img/image_10_032.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_032.png)'
- en: Authorize access to your data
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 授权访问您的数据
- en: 'If the authorization was successful, it should redirect you to a page where
    the following information is displayed:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果授权成功，它应该将您重定向到一个显示以下信息的页面：
- en: '![](img/image_10_033.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_033.png)'
- en: Authorization to access the Fitbit API
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 授权访问Fitbit API
- en: Close the browser and copy the `refresh_token` and `access_token` information
    displayed on the command prompt.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并复制命令提示符上显示的`refresh_token`和`access_token`信息。
- en: '![](img/image_10_034.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_034.png)'
- en: Copy access_token and refresh_token
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 复制access_token和refresh_token
- en: We are ready to use the Fitbit API! Let's test it out!
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好使用Fitbit API了！让我们来测试一下！
- en: Fitbit API Test
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fitbit API测试
- en: 'The documentation for the Fitbit API is available at [http://python-fitbit.readthedocs.org/](http://python-fitbit.readthedocs.org/).Let''s
    write a simple example to get today''s physical activity:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Fitbit API的文档可在[http://python-fitbit.readthedocs.org/](http://python-fitbit.readthedocs.org/)找到。以下是一个获取今天身体活动的简单示例：
- en: 'The first step is import the `fitbit` module:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是导入`fitbit`模块：
- en: '[PRE41]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We have to initialize the `fitbit` client using the `client key`, `client secret`,
    `access_token`, and `refresh_token` earlier in this section:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须使用本节中较早提到的`client key`、`client secret`、`access_token`和`refresh_token`初始化`fitbit`客户端：
- en: '[PRE42]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: According to the Fitbit API documentation, the current day's physical activity
    can be retrieved using the `intraday_time_series()` method.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据Fitbit API文档，可以使用`intraday_time_series()`方法检索当前日的身体活动。
- en: The required arguments to retrieve the physical activity include the resource
    that needs to be retrieved; that is, steps, `detail_level`, that is, the smallest
    time interval for which the given information needs to be retrieved, start times
    and the end times.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取身体活动所需的参数包括需要检索的资源；即步数、`detail_level`，即需要检索给定信息的最小时间间隔、开始时间和结束时间。
- en: The start time is 12:00 a.m. of the current day, and the end time is the current
    time. We will be making use of the `datetime` module to get the current time.
    There is a function named `strftime` that gives us the current time in the *hour:minute*
    format.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始时间是当前日的午夜，结束时间是当前时间。我们将使用`datetime`模块来获取当前时间。有一个名为`strftime`的函数，它以*小时:分钟*格式给我们当前时间。
- en: Make sure that your Raspberry Pi Zero's OS time is correctly configured with
    the local time zone settings.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的Raspberry Pi Zero的操作系统时间已正确配置为本地时区设置。
- en: '[PRE43]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The `fitbit` client returns a dictionary containing the current day''s physical
    activity and intraday activity in 15-minute intervals:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fitbit`客户端返回一个包含当前日身体活动和15分钟间隔内日间活动的字典：'
- en: '[PRE44]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This example is available for download along with this chapter as `fitbit_client.py`.
    If you have a Fitbit tracker, register an application and test this example for
    yourself.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个示例作为本章的一部分提供下载，作为`fitbit_client.py`。如果你有一个Fitbit追踪器，注册一个应用程序并亲自测试这个示例。
- en: Building the visual aid
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建视觉辅助工具
- en: Let's build a visual aid where we display the number of steps taken in a given
    day using an LED strip. The LED strip would light up like a progress bar based
    on the daily physical activity.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个视觉辅助工具，使用LED灯带显示给定一天内所走的步数。LED灯带将根据每日体力活动像进度条一样亮起。
- en: 'The first step is importing the requisite libraries while building the visual
    aid. This includes the `fitbit` and `blinkt` libraries. We will also import some
    additional libraries:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是在构建视觉辅助工具时导入所需的库。这包括`fitbit`和`blinkt`库。我们还将导入一些额外的库：
- en: '[PRE45]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Make sure that you have the requisite tokens discussed earlier in this section:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你已经拥有本节中讨论的所需令牌：
- en: '[PRE46]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'A new `refresh token` is needed every `8` hours. This is a feature of the API''s
    authorization mechanism. Hence, we need a function that gets a new token using
    the existing token:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每`8`小时需要一个新的`刷新令牌`。这是API授权机制的一个特性。因此，我们需要一个函数，使用现有的令牌获取新的令牌：
- en: '[PRE47]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: In the function `refresh_token()`, we are making use of the `FitbitOauth2Client`
    class to refresh the token. It is important to note that we have made use of the
    `global` keyword. The `global` keyword helps with modifying the `REFRESH_TOKEN`
    and enables the use of the new token in other parts of the program. Without the
    `global` keyword, the changes made to any variable is restricted to the `refresh_token()`
    function.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`refresh_token()`函数中，我们使用了`FitbitOauth2Client`类来刷新令牌。需要注意的是，我们使用了`global`关键字。`global`关键字有助于修改`REFRESH_TOKEN`，并允许在程序的其它部分使用新的令牌。如果没有`global`关键字，对任何变量的更改都将限制在`refresh_token()`函数内。
- en: In general, it is a bad practice to make use of the `global` keyword. Use it
    with your best judgement.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，使用`global`关键字是一个不好的做法。请根据你的最佳判断使用它。
- en: 'Next, we need a function to retrieve steps using the `Fitbit` class. We are
    going to use the same procedure as the previous example. Initialize the `fitbit`
    class and retrieve the steps using `intraday_time_series`:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个函数来使用`Fitbit`类检索步数。我们将使用与上一个示例相同的程序。初始化`fitbit`类并使用`intraday_time_series`检索步数：
- en: '[PRE48]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In the main function, we schedule a timer that refreshes the token every `8`
    hours using the schedule library ([https://pypi.python.org/pypi/schedule](https://pypi.python.org/pypi/schedule)):'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主函数中，我们使用`schedule`库安排一个定时器，每`8`小时刷新一次令牌（[https://pypi.python.org/pypi/schedule](https://pypi.python.org/pypi/schedule)）：
- en: '[PRE49]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We check for the steps every `15` minutes and light up the LEDs accordingly.
    Because the *Pimoroni Blinkt* consists of eight LEDs, we can light up one LED
    for every `1250` steps of physical activity:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们每`15`分钟检查一次步数，并相应地点亮LED。因为Pimoroni Blinkt由八个LED组成，我们可以为每`1250`步的体力活动点亮一个LED：
- en: '[PRE50]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: For every multiple of `1250` steps, we set an LED's color to green using the
    `blinkt.set_pixel()` method. We set the next LED to a blinking red. For example,
    at the time of writing this section, the total number of steps was 1604\. This
    is (1250 x1) + 354 steps. Hence, we light up one LED in green and the next LED
    blinks red. This indicates that the steps are in progress.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每`1250`步的倍数，我们使用`blinkt.set_pixel()`方法将LED的颜色设置为绿色。下一个LED闪烁红色。例如，在撰写本节时，总步数为1604步。这是（1250
    x 1）+ 354步。因此，我们点亮一个LED为绿色，下一个LED闪烁红色。这表明步数正在进展中。
- en: 'The picture here shows the blinking red LED when the progress was less than
    `1250` steps:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里的图片显示了当进度少于`1250`步时闪烁的红色LED：
- en: '![](img/image_10_035.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_035.jpg)'
- en: Physical activity progress less than 1250 steps
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 体力活动进度少于1250步
- en: 'After walking around, the progress shifted to the right by one LED:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在走动之后，进度向右移动了一个LED：
- en: '![](img/image_10_036-1.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_10_036-1.jpg)'
- en: Physical activity at 1604 steps
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 1604步的体力活动
- en: The next step is to set off a buzzer when there is no minimum physical activity.
    This is achieved by connecting a buzzer to the GPIO pins of the Raspberry Pi Zero.
    We have demonstrated the use of a buzzer in an earlier chapter.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是在没有最低体力活动时触发蜂鸣器。这是通过将蜂鸣器连接到Raspberry Pi Zero的GPIO引脚来实现的。我们在前面的章节中演示了蜂鸣器的使用。
- en: The earlier example is available for download along with this chapter as `visual_aid.py`.
    We will let you figure out the logic to set off a buzzer when there is no minimum
    physical activity in a period (for example, an hour).
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 早期示例作为`visual_aid.py`与本章一起提供。我们将让你自己找出在一段时间（例如，一小时）内没有最低限度的身体活动时触发蜂鸣器的逻辑。
- en: Install this visual aid somewhere prominent and find out if it motivates you
    to stay physically active! If you make use of the *Pimoroni Rainbow HAT*, you
    can display the steps using the 14-segment display.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个视觉辅助工具安装在一个显眼的位置，看看它是否能激励你保持身体活跃！如果你使用*Pimoroni Rainbow HAT*，你可以使用14段显示器显示步骤。
- en: Smart lawn sprinkler
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能草坪喷水装置
- en: 'In drought-struck states like California, United States, there are severe restrictions
    on water usage in certain parts of the state. For example: In summer, some cities
    passed an ordinance restricting water usage to 250 gallons per day. In such states,
    it is ridiculous to find lawn sprinklers going off the day before the rain. We
    are going to build a lawn sprinkler controller that only turns on when there is
    no rain predicted for the next day.'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在遭受干旱的州，如美国加利福尼亚州，该州某些地区对用水有严格的限制。例如：在夏季，一些城市通过一项法令将每天的用水量限制在250加仑。在这样的州，在下雨前一天发现草坪喷水装置开启是荒谬的。我们将构建一个草坪喷水控制器，只有在预测第二天不会下雨时才会打开。
- en: In order to build a smart lawn sprinkler, we need a flow control solenoid valve
    (for example, [https://www.sparkfun.com/products/10456](https://www.sparkfun.com/products/10456)).
    Make sure that the valve can meet the water pressure requirements. This flow control
    valve can be interfaced to the Raspberry Pi Zero using a transistor switching
    circuit discussed in earlier chapters or the relay board we discussed earlier
    in this chapter.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建一个智能草坪喷水装置，我们需要一个流量控制电磁阀（例如，[https://www.sparkfun.com/products/10456](https://www.sparkfun.com/products/10456)）。确保阀门能够满足水压要求。这个流量控制阀可以通过前面章节中讨论的晶体管切换电路或本章前面讨论的继电器板与Raspberry
    Pi Zero接口。
- en: We will be making use of *DarkSky API* ([https://darksky.net](https://darksky.net))
    to fetch the weather information. It provides a simple response format that could
    be used to determine if it was going to rain the next day.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用*DarkSky API* ([https://darksky.net](https://darksky.net))来获取天气信息。它提供了一个简单的响应格式，可以用来确定第二天是否会下雨。
- en: Sign up for a free account at the website and get a developer key from the console.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网站上注册一个免费账户，并在控制台获取一个开发者密钥。
- en: 'According to the API documentation, the local weather information may be obtained
    as follows:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据API文档，可以通过以下方式获取本地天气信息：
- en: '[PRE51]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The latitude and longitudinal coordinates can be obtained using a simple web
    search. For example, the request URL for Newark, CA is:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经纬度坐标可以通过简单的网络搜索获得。例如，Newark, CA的请求URL是：
- en: '[PRE52]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The response includes the `current`, `minutely`, and `hourly` forecasts. They
    can be excluded using the `exclude` parameter as shown in the preceding URL.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 响应包括`current`、`minutely`和`hourly`预报。可以使用`exclude`参数排除，如前一个URL所示。
- en: Now, we need to turn on the sprinkler only if it is not going to rain the next
    day. According to the API documentation, the weather forecast is returned as a
    `Data Point object`. The data points include a field named `icon` that indicates
    whether it is going to be `clear`, `cloudy`, or `rainy`.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们只需要在第二天不会下雨的情况下打开喷水装置。根据API文档，天气预报以`Data Point object`返回。数据点包括一个名为`icon`的字段，表示天气将是`clear`、`cloudy`还是`rainy`。
- en: 'Let''s write a method `check_weather()` that fetches the weather for the week:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们编写一个`check_weather()`方法，用于获取一周的天气：
- en: '[PRE53]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: If the `GET` request was successful, which can be determined by the status code
    of the response, the `json` response is decoded using the `json()` method.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`GET`请求成功，这可以通过响应的状态码来确定，使用`json()`方法对`json`响应进行解码。
- en: The next day's weather information is available at `data["daily"]["data"][1]`
    (Print the response and verify it for yourself).
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二天的天气信息在`data["daily"]["data"][1]`中可用（打印出响应并自行验证）。
- en: Since the `icon` key provides a machine-readable response, it could be used
    to turn on the sprinkler. Hence, the `check_weather()` returns `True` if it is
    going to rain and vice versa.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于`icon`键提供的是机器可读的响应，它可以用来打开喷水装置。因此，`check_weather()`在将要下雨时返回`True`，反之亦然。
- en: We will let you figure out interfacing the solenoid valve using the GPIO pins.
    The earlier code sample is available for download along with this chapter as `lawn_sprinkler.py`.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将让你自己找出如何使用GPIO引脚连接电磁阀。早期的代码示例可以作为本章的附件下载，文件名为`lawn_sprinkler.py`。
- en: '**Exercise for the reader:**'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '**读者练习**：'
- en: We are making use of the next day's weather information to turn on the sprinkler.
    Go through the documentation and modify the code to account for current weather
    information.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在利用第二天的天气预报信息来开启洒水器。请查阅文档，并修改代码以考虑当前的天气信息。
- en: '**Project enhancements:**'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目改进**：'
- en: How would you go about adding a moisture sensor to the controller?
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你会如何给控制器添加湿度传感器？
- en: How would you interface the sensor to the Raspberry Pi Zero and make use of
    it in turn on the sprinkler?
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你会如何将传感器连接到Raspberry Pi Zero并利用它来开启洒水器？
- en: Summary
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we reviewed four projects involving the Raspberry Pi Zero (and
    Python programming) that focused on specific improvements around the house. This
    includes a voice assistant, web framework-based appliance control, physical activity
    motivation tool, and a smart lawn sprinkler. The idea behind these projects were
    to demonstrate the applications of python programming in improving our quality
    of life. We could demonstrate that it is possible to build applications (using
    the Raspberry Pi Zero) that can serve as a better alternative to expensive off-the-shelf
    products.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了四个涉及Raspberry Pi Zero（以及Python编程）的项目，这些项目专注于房屋周围的具体改进。这包括语音助手、基于Web框架的家电控制、身体活动激励工具和智能草坪洒水器。这些项目的理念在于展示Python编程在提高我们生活质量方面的应用。我们证明了使用Raspberry
    Pi Zero构建应用程序（作为昂贵现成产品的更好替代品）是可能的。
- en: 'We also recommend the following project ideas for your consideration:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还推荐以下项目想法供你考虑：
- en: '**Slack channel-based appliance control**: Are you concerned about the temperature
    conditions back home for your pets while you are away at work? How about setting
    up a temperature sensor to send a slack channel alert suggesting that you turn
    on the air conditioner?'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于Slack通道的家电控制**：当你不在家工作时，你是否担心宠物在家中的温度条件？为什么不设置一个温度传感器，当温度过高时发送Slack通道警报，建议你打开空调？'
- en: '**Tabletop fountain**: Using a Raspberry Pi Zero and an RGB LED strip, you
    can create lighting effects for a tabletop fountain.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**桌面喷泉**：使用Raspberry Pi Zero和RGB LED灯带，你可以为桌面喷泉创建灯光效果。'
- en: '**Bird feeder monitor**: This is something we have been working on for a while
    now. We are trying to track birds that come to feed in a backyard feeder. The
    bird feeder is equipped with a Raspberry Pi Zero and a camera. Stay tuned to this
    book''s website for some updates.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鸟食器监控器**：这是我们一直在努力的项目。我们正在尝试追踪来后院喂食的鸟类。鸟食器配备了Raspberry Pi Zero和摄像头。请关注本书的网站以获取一些更新。'
- en: '**Holiday lights controller**: How about some special light and audio effects
    during the holidays?'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**假日灯光控制器**：在假日期间，一些特殊的灯光和音频效果如何？'
- en: '**Controlling off-the-shelf products using Raspberry Pi Zero**: Do you have
    a lot of Wi-Fi-enabled electrical outlets lying around unused? Why not try to
    control them using your Raspberry Pi Zero (hint: *IFTTT*).'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用Raspberry Pi Zero控制现成产品**：你是否有大量闲置未用的Wi-Fi电插座？为什么不尝试使用你的Raspberry Pi Zero（提示：*IFTTT*）来控制它们？'
- en: '**Pomodoro timer**: Have you heard of the Pomodoro technique for productivity?
    How about an interactive device to improve your productivity?'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**番茄钟计时器**：你听说过提高生产力的番茄钟技术吗？为什么不制作一个交互式设备来提高你的生产力？'
- en: Learning Resources
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 学习资源
- en: '**Setting USB Soundcard as the default audio source**: [http://raspberrypi.stackexchange.com/a/44825/1470](http://raspberrypi.stackexchange.com/a/44825/1470)'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置USB声卡为默认音频源**：[http://raspberrypi.stackexchange.com/a/44825/1470](http://raspberrypi.stackexchange.com/a/44825/1470)'
- en: '**arecord/aplay options**: [http://quicktoots.linux-audio.com/toots/quick-toot-arecord_and_rtmix-1.html](http://quicktoots.linux-audio.com/toots/quick-toot-arecord_and_rtmix-1.html)'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**arecord/aplay选项**：[http://quicktoots.linux-audio.com/toots/quick-toot-arecord_and_rtmix-1.html](http://quicktoots.linux-audio.com/toots/quick-toot-arecord_and_rtmix-1.html)'
- en: '**MAX9814 setup tutorial**: [https://learn.adafruit.com/adafruit-agc-electret-microphone-amplifier-max9814/wiring-and-test](https://learn.adafruit.com/adafruit-agc-electret-microphone-amplifier-max9814/wiring-and-test)'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MAX9814设置教程**：[https://learn.adafruit.com/adafruit-agc-electret-microphone-amplifier-max9814/wiring-and-test](https://learn.adafruit.com/adafruit-agc-electret-microphone-amplifier-max9814/wiring-and-test)'
- en: '**Understanding optocouplers**: [https://www.elprocus.com/opto-couplers-types-applications/](https://www.elprocus.com/opto-couplers-types-applications/)'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解光电耦合器**: [https://www.elprocus.com/opto-couplers-types-applications/](https://www.elprocus.com/opto-couplers-types-applications/)'
- en: '**Relays and kickback voltages**: [http://www.coilgun.info/theoryinductors/inductivekickback.htm](http://www.coilgun.info/theoryinductors/inductivekickback.htm)'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**继电器和反冲电压**: [http://www.coilgun.info/theoryinductors/inductivekickback.htm](http://www.coilgun.info/theoryinductors/inductivekickback.htm)'
