- en: Chapter 2. Circuit Fundamentals and GPIO
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章：电路基础和GPIO
- en: In this chapter, we will be learning the basics of setting up an external electronic
    circuit that you can interface with the BeagleBone board using the **general-purpose
    input/output** (**GPIO**) pins available on it. The chapter will focus on making
    the reader understand how to wire electronic circuits with an explanation of how
    they work followed by using the GPIOs available on the BeagleBone board for their
    operation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何设置一个外部电子电路的基本知识，您可以使用BeagleBone板上的通用输入/输出（GPIO）引脚与之接口。本章将侧重于让读者理解如何通过解释它们的工作原理来布线电子电路，然后使用BeagleBone板上的GPIO进行操作。
- en: For readers who are from an electronics background, most of what is covered
    in the first three topics will be familiar but still I suggest you skim through
    the topics to brush up the basics. Since the book is written in such a way that
    readers without prior knowledge of electronics also get to understand and work
    on the projects, these topics have to be included in the chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有电子背景的读者，前三个主题中涵盖的大部分内容都将很熟悉，但我仍然建议您浏览这些主题以复习基础知识。由于本书的编写方式使得没有电子知识背景的读者也能理解和参与项目，因此这些主题必须包含在章节中。
- en: 'The contents of the chapter are divided into the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容分为以下主题：
- en: Prerequisites
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前提条件
- en: Fundamentals of electrical and electronic circuits
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电路的电和电子基础知识
- en: Use of BreadBoards
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面包板的使用
- en: Switches and LEDs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开关和LED
- en: GPIOs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPIO
- en: Adding libraries to Python
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将库添加到Python
- en: Using python to access GPIOs
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python访问GPIO
- en: 'Simple project: Blinking an LED using a Python script'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单项目：使用Python脚本闪烁LED
- en: Prerequisites
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'This topic will cover what parts you need to get started with BeagleBone Black
    online. You can buy these parts from your favorite online store or from any of
    your local stores. individual electronic components such as resistors, transistors,
    LEDs, and so on are connected with a power source element such as a battery or
    other power supply source using conductive wires through which current flows through
    these electronic components, it forms an electronic circuit:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本主题将涵盖您需要开始使用BeagleBone Black在线的哪些部分。您可以从您最喜欢的在线商店或任何当地商店购买这些部件。单个电子元件，如电阻、晶体管、LED等，通过导电线连接到电源元件，如电池或其他电源，电流通过这些电子元件流动，从而形成一个电子电路：
- en: '![Prerequisites](img/4602_02_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![前提条件](img/4602_02_01.jpg)'
- en: We will see how to make our first simple electric circuit using an LED followed
    by connecting a switch to it in the *Switches and LEDs* section of this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的“开关和LED”部分，我们将看到如何使用LED制作我们的第一个简单电路，然后连接一个开关到它。
- en: Usage of breadboards
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面包板的使用
- en: In this section, you will learn about what breadboards are, why they are called
    so, and how to use them. Once you are done with it, you should have a basic understanding
    of how breadboards work and be able to start using it to build basic circuits
    on a breadboard.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将了解面包板是什么，为什么被称为面包板，以及如何使用它们。完成这些后，您应该对面包板的工作原理有一个基本的理解，并能够开始使用它来在面包板上构建基本电路。
- en: 'A breadboard is composed of electrical connections in rows and columns. Each
    column is electrically connected to each point on the row, you can see the black
    column line, that has connectivity. You can use wires to connect any column with
    another. There are larger rows on the top and bottom which are usually used for
    power supply positive and negative, in other words, VCC (power) and GND (ground)
    signals. You can use these to easily connect any column to VCC or GND or use it
    for any other purpose as per your wish as there is no restriction, it''s just
    like any other row:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板由行和列的电气连接组成。每一列都与行上的每个点电连接，您可以看到有连接性的黑色列线。您可以使用电线将任何一列与另一列连接。顶部和底部有较大的行，通常用于电源的正负极，换句话说，VCC（电源）和GND（地）信号。您可以使用这些来轻松地将任何一列连接到VCC或GND，或者根据您的意愿用于其他任何目的，因为没有限制，它就像任何其他行一样：
- en: '![Usage of breadboards](img/4602_02_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![面包板的用法](img/4602_02_02.jpg)'
- en: 'You can learn how to use a Breadboard by connecting the circuit given in the
    previous section to test it by setting up the same circuit on breadboard as shown
    in the following figure:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将前一部分给出的电路连接到面包板上来学习如何使用面包板，如图所示进行测试，设置相同的电路：
- en: '![Usage of breadboards](img/4602_02_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![面包板的用法](img/4602_02_03.jpg)'
- en: Switches and LEDs
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开关和LED
- en: 'Switches are one of the the elementary components in electronic circuits:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 开关是电子电路中的基本元件之一：
- en: '![Switches and LEDs](img/4602_02_23.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![开关和LED](img/4602_02_23.jpg)'
- en: 'All they do is make or break a circuit, meaning it either opens a connection
    or closes it between two terminals. The two states of a switch are as shown in
    the following figure:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它们所做的只是闭合或断开电路，这意味着它们在两个端点之间打开或关闭连接。开关的两种状态如下图中所示：
- en: '![Switches and LEDs](img/4602_02_24.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![开关和LED](img/4602_02_24.jpg)'
- en: There are a lot of different types of switches. But there are two most commonly
    used ones in our circuits that we will discuss in this section, which are the
    momentary switch and the toggle switch. Before we discuss the different types
    of switches, as mentioned during the introduction of this chapter, let's see what
    LEDs are and how to create a basic circuit using them, as during the explanation
    of the switch operations, it will be useful for better understanding.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多不同类型的开关。但在本节中，我们将讨论两种最常用的开关，即瞬动开关和拨动开关。在我们讨论不同类型的开关之前，正如本章介绍中提到的，让我们先看看LED是什么，以及如何使用它们创建一个基本电路，因为在解释开关操作时，这将有助于更好地理解。
- en: 'To create your first simple circuit, take a battery, resistor, and LED with
    wires to connect them as shown in the following figure. By doing this, you can
    understand what an LED is. LED stands for light emitting diode, which is nothing
    but an electronic component that emits light when suitable voltage is applied
    to its leads in the proper configuration. An LED has two leads: the cathode and
    the anode, as shown in the following figure:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建您的第一个简单电路，取一个电池、电阻和LED，用电线将它们连接起来，如图所示。通过这样做，您可以了解LED是什么。LED代表发光二极管，它不过是一个电子元件，当在适当的配置下对其引脚施加适当的电压时，它会发出光。LED有两个引脚：阴极和阳极，如下面的图所示：
- en: '![Switches and LEDs](img/4602_02_25.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![开关和LED](img/4602_02_25.jpg)'
- en: The anode terminal should be connected to the positive terminal of the power
    supply / battery and the cathode terminal should be connected to the negative
    terminal of the power supply / battery to make the LED glow. Connecting in reverse
    won't make the LED glow. If you would like to know more about why and how an LED
    works, do your research online or read books to find out more.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 阳极端应连接到电源/电池的正极，阴极端应连接到电源/电池的负极，以使LED发光。反向连接不会使LED发光。如果您想了解更多关于为什么以及LED是如何工作的，请在网上进行研究或阅读书籍以获取更多信息。
- en: 'Now, let''s go ahead and make an electronic circuit where current flows through
    the wires through a resistor and LED which are connected to a power source, in
    other words, a battery, as shown in the following diagram:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续制作一个电子电路，电流通过电线通过电阻和LED（它们连接到电源，换句话说，是电池）流动，如下面的图所示：
- en: '![Switches and LEDs](img/4602_02_26.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![开关和LED](img/4602_02_26.jpg)'
- en: So, as shown in the preceding diagram, the resistor can be on any side of the
    LED. The resistor is a component that reduces the value of current flowing through
    the circuit. It is used to increase the lifetime of the LED and is necessary for
    most LEDs. I would suggest you learn more about how much value of resistor should
    be used and for particular battery and LEDs that you use because this chapter
    and most of the sections in it are intended to give you a basic getting started
    idea regarding electronic circuits. As mentioned at the beginning of the chapter,
    electrical and electronics is a vast topic and we can't put all the concepts involved
    in it in just one chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如图所示，电阻可以位于LED的任何一侧。电阻是一种降低电路中电流值的元件。它用于增加LED的寿命，对于大多数LED都是必要的。我建议您了解更多关于应该使用多少电阻值以及您使用的特定电池和LED，因为本章及其大部分章节的目的是为您提供有关电子电路的基本入门想法。正如本章开头提到的，电气和电子是一个庞大的主题，我们无法将其中涉及的所有概念都放在一个章节中。
- en: If you successfully make the LED glow with a battery and LED with a resistor
    in between, you will have made your first basic electronic circuit. But have an
    LED glow all time is something that now one would want right. We will always need
    an element to control another element. So here comes the switch, where if you
    connect a switch in between this circuit, you can turn the LED on and off when
    you want it to glow or not glow. So let's go ahead and look at the two most-used
    types of switches in electronic circuits, which we will be using in the coming
    chapters to interface with the BeagleBone board to give inputs from the outside
    world.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你成功地用电池和电阻之间的LED使LED发光，你就已经制作了你的第一个基本电子电路。但是，让LED一直发光并不是现在任何人想要的。我们总是需要一个元素来控制另一个元素。因此，开关就出现了，如果你在这个电路中连接一个开关，你就可以在需要时打开或关闭LED的发光。所以，让我们继续看看电子电路中最常用的两种开关类型，我们将在接下来的章节中使用它们来与BeagleBone板接口，从外部世界获取输入。
- en: Momentary switch
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 瞬时开关
- en: If you look at the following figure, you can see that the momentary switch has
    a push button actuator, a plunger in between the movable contact that touches
    the stationary contacts of two terminals.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看下面的图示，你可以看到瞬时开关有一个推杆执行器，一个位于可动触点之间的柱塞，该触点接触两个端子的固定触点。
- en: '![Momentary switch](img/4602_02_27.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![瞬时开关](img/4602_02_27.jpg)'
- en: 'The switch shown in the preceding figure is normally open as the stationary
    contacts are not in contact with the movable contact during normal state as the
    plunger pulls the movable contact upwards. Whenever you press the button on top,
    the movable contact goes down and touches the two stationary terminals to make
    contact and close the line. When you remove the pressure you applied to press
    the push button switch, the plunger pulls back the movable contact and the circuit
    opens up. The explanation is illustrated in the following figure with an LED connected
    to a battery. Have a look at them to understand better and try it yourself using
    a push button momentary switch, a battery, a resistor, and an LED:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个图示中显示的开关在正常状态下是断开的，因为固定触点在正常状态下没有与可动触点接触，柱塞将可动触点向上拉。每次你按下顶部的按钮时，可动触点会下降并接触两个固定端点以建立接触并闭合线路。当你移除你施加在按下推杆开关上的压力时，柱塞会将可动触点拉回，电路就会断开。以下图示通过连接到电池的LED说明了这一解释。请查看它们以更好地理解，并尝试使用推杆瞬时开关、电池、电阻和LED自己动手做一下：
- en: '![Momentary switch](img/4602_02_28.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![瞬时开关](img/4602_02_28.jpg)'
- en: Pushbutton Open Circuit - No Current Flow so LED is OFF
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 推杆开路 - 无电流流动，所以LED是关闭的
- en: '![Momentary switch](img/4602_02_29.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![瞬时开关](img/4602_02_29.jpg)'
- en: Pushbutton Closed Circuit - Current Flows so LED is ON
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 推杆闭路 - 有电流流动，所以LED是开启的
- en: Please note that there are other types of push button momentary switches also
    available on the market which are normally closed, where the switch opens the
    circuit when the button is pressed and closes in normal state. Depending on which
    switch you use, the operation will differ for the circuit shown in the preceding
    figure. For normally closed, the LED will be always on and when you press the
    button, it will go off. For normally open, the operation will be as shown in the
    preceding figure, where the LED is off in normal state but goes on when you press
    the push button switch.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，市场上还有其他类型的推杆瞬时开关，它们通常是闭合的，当按钮被按下时，开关会断开电路，而在正常状态下闭合。根据你使用的开关类型，前面图示中的电路操作会有所不同。对于通常闭合的开关，LED将始终开启，当你按下按钮时，它会熄灭。对于通常开启的开关，操作将如前面图示所示，LED在正常状态下是关闭的，但当你按下推杆开关时，它会点亮。
- en: The next type of switch we will discuss will be the Toggle switch.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要讨论的开关类型将是切换开关。
- en: Toggle switch
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切换开关
- en: 'A toggle switch is similar to the traditional switches used in wall-mounted
    electrical switch boards that help you open and close the connection to switch
    the circuit on and off. Here is how it looks with the circuit symbol:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 切换开关类似于传统开关，这些开关用于墙式电气开关板，帮助你打开和关闭电路的连接以开关电路。以下是它的电路符号表示：
- en: '![Toggle switch](img/4602_02_30.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![切换开关](img/4602_02_30.jpg)'
- en: 'Now that you are familiar with how a switch operation works, you can easily
    understand the concept of the toggle switch. Basically, it switches the state
    from on to off as we switch the position of the switch. Unlike the momentary switch,
    where we need to hold the switch button to switch the state, here, once you toggle
    the position, it stays in the position you left it. So we can toggle the switch
    from the Off to the On state, in other words, from the open to the closed state,
    as well as vice versa, and leave it as such and it will stay in the same position,
    in other words, in the state of either On or Off, as there is no spring mechanism
    to push the switch back to its previous position. The following diagrams will
    help you understand better:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了开关操作的工作原理，你可以轻松理解切换开关的概念。基本上，它将状态从开启切换到关闭，就像我们切换开关的位置一样。与需要按住开关按钮来切换状态的瞬间开关不同，在这里，一旦你切换了位置，它就会保持在离开的位置。因此，我们可以将开关从关闭状态切换到开启状态，换句话说，从开启到关闭状态，以及反之亦然，并且保持这种状态，它将保持在相同的位置，换句话说，处于开启或关闭的状态，因为没有弹簧机制将开关推回到其原始位置。以下图表将帮助你更好地理解：
- en: '![Toggle switch](img/4602_02_31.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![Toggle switch](img/4602_02_31.jpg)'
- en: Toggle Switch Open Circuit - No Current Flow so LED is OFF
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 切换开关开路 - 没有电流流动，因此LED是关闭的
- en: '![Toggle switch](img/4602_02_32.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![Toggle switch](img/4602_02_32.jpg)'
- en: Toggle Switch Closed Circuit - Current Flows so LED is ON
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 切换开关闭合电路 - 电流流动，因此LED是开启的
- en: So, as shown in the preceding figure, if you have successfully set up the circuit
    and made the LED glow by switching the switch, by now you must have understood
    the concept of an electrical circuit and switching an electrical and electronic
    circuit using a switch. But using our BeagleBone board instead of doing it manually,
    we will be using the GPIOs to switch elements as well as read the switching inputs.
    We will see this in detail with experiments in the next chapters. For now, in
    the next section, you will learn what GPIOs basically are and what kind of GPIOs
    are available on the BeagleBone board.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如图所示，如果你已经成功设置了电路并通过切换开关使LED发光，那么现在你一定已经理解了电路的概念以及如何使用开关切换电气和电子电路。但是，我们将使用BeagleBone板而不是手动操作，我们将使用GPIOs来切换元件以及读取切换输入。我们将在下一章的实验中详细说明这一点。现在，在下一节中，你将学习GPIOs的基本概念以及BeagleBone板上可用的GPIOs类型。
- en: GPIOs
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GPIOs
- en: As we discussed in [Chapter 1](ch01.html "Chapter 1. Getting Started with BeagleBone"),
    *Getting Started with BeagleBone*, BeagleBone boards have GPIO pin headers on
    either side of the board. In this section, we will be discussing what these GPIOs
    are and how we can use them to interface external electronic components to the
    board.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在[第1章](ch01.html "第1章。开始使用BeagleBone")中讨论的，*开始使用BeagleBone*，BeagleBone板在板的两侧都有GPIO引脚头。在本节中，我们将讨论这些GPIOs是什么以及我们如何使用它们将外部电子元件与板连接起来。
- en: 'The following figure shows the GPIOs available and the pin mapping of each
    of them. This pin mapping or, in general, the names assigned to these pins will
    be helpful for us while accessing them from the software running on the operating
    system. You will see this in detail at the end of the chapter, when we will be
    accessing the GPIO from python:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了可用的GPIOs以及每个GPIO的引脚映射。这种引脚映射或一般而言，分配给这些引脚的名称，将有助于我们从操作系统上运行的软件中访问它们。你将在本章末尾详细了解这一点，当我们从Python中访问GPIO时：
- en: '![GPIOs](img/4602_02_04.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![GPIOs](img/4602_02_04.jpg)'
- en: So, these GPIOs are ports which can act either as input or output from our definition
    from software running on the operating system. There are several methods to define
    these pins as input and output, as well as to change the state of these pins when
    defined as outputs and read the state when defined as inputs. In this book, as
    we will be using python as the primary programming language, we will be accessing
    these pins from the python program. To get started, you will first need to add
    a few libraries to python that will help you do it. How to install those libraries
    and validate them is explained in the next topic.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这些GPIOs是端口，可以从我们的定义中作为输入或输出从操作系统上运行的软件中操作。有几种方法可以将这些引脚定义为输入和输出，以及当定义为输出时更改这些引脚的状态，当定义为输入时读取状态。在本书中，由于我们将使用Python作为主要的编程语言，我们将从Python程序中访问这些引脚。要开始，你首先需要向Python添加几个库，这将帮助你完成这项工作。如何安装这些库以及如何验证它们将在下一主题中解释。
- en: Adding libraries to Python
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向Python添加库
- en: 'To make it easy to work with GPIOs on BeagleBone boards using Python programming
    language, we will be installing the `Adafruit-BeagleBone-IO-Python` library. The
    following steps will walk you through how to do it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Python 编程语言在 BeagleBone 板上轻松地处理 GPIO，我们将安装 `Adafruit-BeagleBone-IO-Python`
    库。以下步骤将指导您如何进行操作：
- en: Log in to your BeagleBone board.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的 BeagleBone 板。
- en: 'As we did in the previous chapter, the first thing you need to do is boot the
    BeagleBone board from the microSD card and log in to it via SSH:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如我们在上一章中所做的那样，您需要做的第一件事是从 microSD 卡启动 BeagleBone 板并通过 SSH 登录到它：
- en: '![Adding libraries to Python](img/4602_02_05.jpg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![向 Python 添加库](img/4602_02_05.jpg)'
- en: Update the repositories.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新存储库。
- en: Your next step will be to update the software dependency repositories in Debian
    running on the BeagleBone board before we start installing the other dependencies
    that are not installed and the libraries.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的下一步将是更新 BeagleBone 板上运行的 Debian 的软件依赖项存储库，然后我们再开始安装其他未安装的依赖项和库。
- en: 'You can use the `apt-get update` command to do this:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使用 `apt-get update` 命令来完成此操作：
- en: '![Adding libraries to Python](img/4602_02_06.jpg)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![向 Python 添加库](img/4602_02_06.jpg)'
- en: Install the dependencies.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装依赖项。
- en: 'In this step, we will be installing certain software packages that are necessary
    for the library to work with the BeagleBone board. The command that you need to
    execute is as follows:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，我们将安装某些软件包，这些软件包对于库与 BeagleBone 板协同工作至关重要。您需要执行的命令如下：
- en: '[PRE0]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output that you will see is shown in the following screenshot:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将看到的输出如下所示：
- en: '![Adding libraries to Python](img/4602_02_07.jpg)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![向 Python 添加库](img/4602_02_07.jpg)'
- en: Install the BBIO library.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 BBIO 库。
- en: Now, once you have updated the repositories and installed the necessary dependencies,
    we can go ahead and install the `Adafruit_BBIO` Python Library that we will be
    using to access the GPIO pins on the BeagleBone board using Python running on
    it.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，一旦您已更新了存储库并安装了必要的依赖项，我们就可以继续安装我们将用于通过运行在 BeagleBone 板上的 Python 访问 GPIO 引脚的
    `Adafruit_BBIO` Python 库。
- en: 'To install the `Adafruit_BBIO` library, execute the following command:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要安装 `Adafruit_BBIO` 库，请执行以下命令：
- en: '[PRE1]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will see the following output:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![Adding libraries to Python](img/4602_02_08.jpg)'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![向 Python 添加库](img/4602_02_08.jpg)'
- en: Test your installation.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试您的安装。
- en: 'Now, let us check whether the installation happened properly or not. To do
    this, just execute the command given following:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，让我们检查安装是否正确完成。为此，只需执行以下命令：
- en: '[PRE2]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, if you see the output shown in the following screenshot, it means the
    installation was successful and we have successfully installed the `Adafruit_BBIO`
    library:'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果您看到以下截图所示的输出，则表示安装成功，并且我们已经成功安装了 `Adafruit_BBIO` 库：
- en: '![Adding libraries to Python](img/4602_02_09.jpg)'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![向 Python 添加库](img/4602_02_09.jpg)'
- en: We can validate this by importing the library into python and testing it, as
    shown in step 6.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过将库导入 Python 并进行测试来验证这一点，如步骤 6 所示。
- en: Validate the installation.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证安装。
- en: 'In this step, first you need to open Python''s interactive shell to use the
    instructions, as shown following:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，首先您需要打开 Python 的交互式 shell 以使用以下指令，如下所示：
- en: '![Adding libraries to Python](img/4602_02_10.jpg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![向 Python 添加库](img/4602_02_10.jpg)'
- en: If you see the module available and its path when you print GPIO, it confirms
    that we have successfully installed and added the `Adafruit_BBIO` Library to Python.
    Now let's go ahead and access the GPIO from python to change its state from Python's
    interactive shell in the next section.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在打印 GPIO 时看到模块及其路径，则确认我们已经成功安装并添加了 `Adafruit_BBIO` 库到 Python。现在让我们继续前进，从
    Python 的交互式 shell 中访问 GPIO 以更改其状态，在下一节中。
- en: Using Python to access GPIOs
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 访问 GPIO
- en: In this section, we will see how we can change the state of a GPIO on the BeagleBone
    board from python's interactive shell interface with the help of functions available
    in the `Adafruit_BBIO` Library.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何使用 `Adafruit_BBIO` 库中可用的函数，从 Python 的交互式 shell 界面更改 BeagleBone 板上
    GPIO 的状态。
- en: 'You will have to connect an LED with one of the GPIO pins on the BeagleBone
    Black to understand how these GPIOs work. The following steps will walk you through
    the program that you can execute step by step on the Python''s interactive shell
    interface to understand how you can change the state of a GPIO from LOW to HIGH
    and vice versa from python:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将一个LED连接到BeagleBone Black上的一个GPIO引脚，以了解这些GPIO的工作原理。以下步骤将逐步引导您通过可以在Python的交互式Shell界面上逐步执行的程序，以了解您如何从python中将GPIO的状态从低电平更改为高电平，反之亦然：
- en: Connect an LED circuit to the BeagleBone board.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LED电路连接到BeagleBone板。
- en: 'To get started, we will need our Breadboard, LED, resistor, and hookup wires
    to connect the LED circuit with a GPIO available on the BeagleBone Black. Once
    you have them, connect the circuit as shown in the following figure:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要开始，我们需要面包板、LED、电阻和连接线，将LED电路与BeagleBone Black上的可用GPIO连接起来。一旦您准备好了这些，请按照以下图示连接电路：
- en: '![Using Python to access GPIOs](img/4602_02_11.jpg)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用Python访问GPIOs](img/4602_02_11.jpg)'
- en: You can see that the cathode of the LED is connected to the Gnd pin on the BeagleBone
    Black through a 470-ohm resistor and the anode is connected to the GPIO pin 60
    on the P9 header. You can refer to the expansion headers of BeagleBone Black for
    reference. Once you have connected the circuit with the BeagleBone Black, we can
    go ahead and start working with Python to make this LED turn on and off.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以看到，LED的阴极通过一个470欧姆的电阻连接到BeagleBone Black上的Gnd引脚，阳极连接到P9接口上的GPIO_60引脚。您可以参考BeagleBone
    Black的扩展接口以供参考。一旦您将电路与BeagleBone Black连接好，我们就可以继续使用Python来控制这个LED的开关。
- en: Open Python's interactive shell and import Adafruit's BBIO Library:![Using Python
    to access GPIOs](img/4602_02_12.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Python的交互式Shell并导入Adafruit的BBIO库：![使用Python访问GPIOs](img/4602_02_12.jpg)
- en: As shown in the preceding screenshot, in this step, you will open Python's Interactive
    Shell and import the `Adafruit_BBIO` Module into it using the command shown in
    the preceding screenshot.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，在这一步中，您将打开Python的交互式Shell，并使用前一个屏幕截图中的命令将`Adafruit_BBIO`模块导入其中。
- en: Set up pin GPIO_60 as OUTPUT.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置引脚GPIO_60为输出模式。
- en: 'Our next step will be to set up or define GPIO_60 as an output pin as we will
    be changing the state of the pin. You can note that these GPIO pins can be made
    to act as inputs or outputs. We will be seeing how they will be used as inputs
    in the next chapter. Right now we will be making this act as an output pin to
    change the state of the pin to high and low or vice versa, so we will define it
    as an output pin. To do this, the command is as follows:'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的下一步将是设置或定义GPIO_60为输出引脚，因为我们将会改变引脚的状态。请注意，这些GPIO引脚可以被设置为输入或输出。我们将在下一章中看到它们如何作为输入使用。现在，我们将使其作为输出引脚，以改变引脚的状态为高电平或低电平，或反之亦然，因此我们将它定义为输出引脚。为此，命令如下：
- en: '[PRE3]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Using Python to access GPIOs](img/4602_02_13.jpg)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用Python访问GPIOs](img/4602_02_13.jpg)'
- en: 'P9_12 is nothing but pin **GPIO_60**, which is the 12th pin on the P9 header.
    See the following figure to understand the idea behind the notation:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: P9_12实际上就是引脚**GPIO_60**，它是P9接口上的第12个引脚。请参见以下图示以了解记号背后的含义：
- en: '![Using Python to access GPIOs](img/4602_02_14.jpg)'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用Python访问GPIOs](img/4602_02_14.jpg)'
- en: Set Pin GPIO_60 as HIGH.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将引脚GPIO_60设置为高电平。
- en: 'Once we have defined the pin as an output pin, we can go ahead and change the
    state of the pin to HIGH or LOW. The function given following, when executed,
    will perform that operation:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦我们将引脚定义为输出引脚，我们就可以继续更改引脚的状态为高电平或低电平。以下给出的函数在执行时将执行该操作：
- en: '[PRE4]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Using Python to access GPIOs](img/4602_02_15.jpg)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用Python访问GPIOs](img/4602_02_15.jpg)'
- en: 'Now you will be able to see that the LED has turned on, as shown in the following
    image:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，您将能够看到LED已经打开，如以下图像所示：
- en: '![Using Python to access GPIOs](img/4602_02_16.jpg)'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用Python访问GPIOs](img/4602_02_16.jpg)'
- en: What exactly happens when you execute the function is one of the transistors
    inside the processor chip is turned on from the software and this makes GPIO_60
    to HIGH state and it switches on and supplies 3.3V output, which makes the LED
    glow. You can now turn off the led by setting the GPIO_60 pin to the LOW state,
    as shown in the next step, by modifying the `GPIO.output` function to LOW.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您执行函数时，实际上是在处理器芯片内部的某个晶体管由软件打开，这使得GPIO_60处于高电平状态，并切换打开，提供3.3V输出，从而使LED发光。现在，您可以通过将GPIO_60引脚设置为低电平来关闭LED，如下一步所示，通过修改`GPIO.output`函数为LOW。
- en: 'Set Pin GPIO_60 as LOW:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将引脚GPIO_60设置为低电平：
- en: '[PRE5]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Using Python to access GPIOs](img/4602_02_17.jpg)'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用Python访问GPIOs](img/4602_02_17.jpg)'
- en: 'Now you will be able to see that the LED has turned off, as shown in the following
    image:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，你将能够看到LED已经关闭，如下面的图像所示：
- en: '![Using Python to access GPIOs](img/4602_02_18.jpg)'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用Python访问GPIOs](img/4602_02_18.jpg)'
- en: As in the previous step, now the software turns off the transistor inside the
    microprocessor on the BeagleBone board to turn off the GPIO_60 so it turns off
    and becomes LOW, and doesn't give out the 3.3V supply so the LED is turned off.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前一步，现在软件关闭了BeagleBone板上的微处理器内部的晶体管，以关闭GPIO_60，使其关闭并变为LOW，不提供3.3V电源，因此LED被关闭。
- en: Clean up the GPIO settings.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理GPIO设置。
- en: So, now you will have got an idea that the GPIO states can be changed from the
    software running on the board. These GPIO pins stay in the previous state until
    they are changed to another state. But in situations where you stop the software
    in the middle of an operation, you might need the GPIO pins to go back to their
    default state, which is LOW for most of them. To do this, the `Adafruit_BBIO`
    library provides us with a function `GPIO.cleanup()`, which we will be using to
    clear the previous states and definitions of the GPIOs set from the software.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，现在你应该已经了解到，可以从板上的软件中更改GPIO状态。这些GPIO引脚保持原来的状态，直到它们被改变到另一个状态。但在你停止软件进行操作的过程中，你可能需要GPIO引脚回到它们的默认状态，对于大多数引脚来说，这个状态是LOW。为此，`Adafruit_BBIO`库为我们提供了一个函数`GPIO.cleanup()`，我们将使用它来清除软件设置的GPIO的先前状态和定义。
- en: 'It is recommended that you use this function at the end of every program that
    you write, to avoid unnecessary, undesired output:'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 建议你在每个编写的程序结束时使用此函数，以避免不必要的、不期望的输出：
- en: '![Using Python to access GPIOs](img/4602_02_19.jpg)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用Python访问GPIOs](img/4602_02_19.jpg)'
- en: Project – blinking an LED using Python script
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目 – 使用Python脚本闪烁LED
- en: In the previous section, we saw how we can access the GPIO pin from Python's
    interactive shell and change its state. Let's now write a python code and save
    it as a `.py` file and run it like we did at the end of the previous chapter.
    The python program that is discussed in this section will make an LED blink at
    an interval of 1 second. The LED will be On for 1 second and Off for another 1
    second; this will loop continuously until you break the loop.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们看到了如何从Python的交互式shell中访问GPIO引脚并改变其状态。现在，让我们编写一个Python代码，将其保存为`.py`文件，并像上一章结尾所做的那样运行它。本节讨论的Python程序将使LED以1秒的间隔闪烁。LED将亮1秒，然后熄灭1秒；这将持续循环，直到你中断循环。
- en: 'The following screenshot shows the program:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了程序：
- en: '![Project – blinking an LED using Python script](img/4602_02_20.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用Python脚本闪烁LED](img/4602_02_20.jpg)'
- en: The code imports the time module and the `Adafruit_BBIO` module just as we did
    in the interactive shell in the previous section of this chapter and then we set
    up GPIO_60 as an output pin and then changed the state of the pin to HIGH and
    LOW in the while loop that runs continuously. We use the `time.sleep(1)` function
    to pause the code for 1 second in between the state changes. The code also has
    the `GPIO.clean()` function that gets executed when a keyboard interrupt is given
    when the code is running.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 代码导入time模块和`Adafruit_BBIO`模块，就像我们在本章上一节的交互式shell中所做的那样，然后我们将GPIO_60设置为输出引脚，并在持续运行的while循环中改变引脚的状态为HIGH和LOW。我们使用`time.sleep(1)`函数在状态变化之间暂停代码1秒。代码还有一个`GPIO.clean()`函数，当代码运行时，如果给出键盘中断，则会执行。
- en: 'To run the command, execute the following command after you save the code as
    a file called `Blink.py`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行命令，在将代码保存为名为`Blink.py`的文件后，执行以下命令：
- en: '[PRE6]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should see output as shown in the following screenshot and the LED connected
    to the BeagleBone board blinks at an interval of 1 second and the console also
    prints the text **Blinking**:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下截图所示的输出，连接到BeagleBone板的LED以1秒的间隔闪烁，控制台也打印出文本**Blinking**：
- en: '![Project – blinking an LED using Python script](img/4602_02_21.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用Python脚本闪烁LED](img/4602_02_21.jpg)'
- en: 'When you hit *Ctrl* + *C* to kill the program, it will clean up the GPIO to
    the default state and exit the program:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下 *Ctrl* + *C* 来终止程序时，它将GPIO清理到默认状态并退出程序：
- en: '![Project – blinking an LED using Python script](img/4602_02_22.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用Python脚本闪烁LED](img/4602_02_22.jpg)'
- en: So, now you can go ahead and try to use different GPIOs and turn on and turn
    off the LED using decision-making statements and more from the Python program.
    If you remember, in [Chapter 1](ch01.html "Chapter 1. Getting Started with BeagleBone"),
    *Getting Started with BeagleBone*, we used the BoneScript library to make the
    LEDs which are on the board turn on and stay on for a timeout interval. You can
    try writing some code of that sort also in python and try keeping the LED on for
    some interval of time. And turn it off based on the input you will be giving.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以继续尝试使用不同的GPIO，并通过Python程序中的决策语句等来打开和关闭LED。如果你还记得，在[第1章](ch01.html "第1章。开始使用BeagleBone")《开始使用BeagleBone》中，我们使用了BoneScript库来使板上的LED打开并保持开启状态一段时间。你也可以尝试在Python中编写类似的代码，并尝试让LED保持开启一段时间。然后根据你给出的输入将其关闭。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Here we are at the end of this chapter, where we learnt the basic principle
    behind a simple electronic circuit using LEDs and switches. We saw what GPIOs
    are and how we can access them from python and wrote a simple code to make an
    LED blink at a particular interval. Then we added external libraries to python
    on BeagleBone boards. In the next chapter, we will be seeing how we can get an
    input from the external world and build a system that reacts to that input.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达了本章的结尾，在这里我们学习了使用LED和开关的简单电子电路背后的基本原理。我们了解了GPIO是什么，以及如何从Python中访问它们，并编写了一个简单的代码来使LED以特定间隔闪烁。然后我们在BeagleBone板上添加了外部库。在下一章中，我们将看到如何从外部世界获取输入并构建一个对那个输入做出反应的系统。
