- en: Enterprise Application Integration and its Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 企业应用集成及其模式
- en: During the course of this book, we've covered how to implement enterprise applications.
    These have been either large monoliths that implemented a lot of components in
    order to provide a certain set of functionality or microservice-based applications
    where the application consisted of several small services, all of which worked
    to provide a certain feature and provide output based on the business's needs
    by interacting with each other over the network.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的过程中，我们已经介绍了如何实现企业应用程序。这些应用程序要么是实现了大量组件以提供一定功能集的大型单体，要么是基于微服务的应用程序，其中应用程序由多个小型服务组成，所有这些服务都通过网络相互交互，以根据业务需求提供某种功能并提供输出。
- en: But, in any enterprise, there's seldom a case that the application we have developed
    will be the only application that might be present. Rather, most of the time,
    the enterprise infrastructure will consist of a number of applications that have
    ...
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在任何企业中，我们很少会开发的应用程序是唯一存在的应用程序。相反，大多数情况下，企业基础设施将包括许多应用程序，这些应用程序具有...
- en: Technical requirements
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The follow up for this chapter does not require any special tools or presence
    of a particular software on the development system. But some knowledge about the
    functionality of middleware and enterprise service bus solutions will help in
    understanding the context of this chapter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的后续不需要任何特殊工具或在开发系统上存在特定软件。但对中间件和企业服务总线解决方案功能的了解将有助于理解本章的上下文。
- en: The need for EAI
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EAI的需求
- en: In any large enterprise, there're a number of applications that may exist to
    solve a particular problem domain. Each of these systems works to solve only one
    set of problems. Often, this kind of approach is desirable for building applications
    inside an enterprise, because now the applications can use the best available
    technology stack for solving the problems of their domain.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何大型企业中，可能存在一些应用程序来解决特定的问题领域。这些系统中的每一个都致力于解决一组特定的问题。通常，这种方法对于在企业内部构建应用程序是可取的，因为现在应用程序可以使用最佳的可用技术栈来解决其领域的问题。
- en: But to have any useful business impact come out of these applications, its often
    the case that these applications need to talk to each other through one way or
    another, so as to facilitate the exchange of data that may be present in one application
    and required by another.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但要使这些应用程序产生任何有用的业务影响，通常情况下这些应用程序需要以某种方式相互通信，以促进可能存在于一个应用程序中并且另一个应用程序需要的数据的交换。
- en: But this integration of different applications is a challenging task due to
    a ...
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但由于不同应用程序的集成是一项具有挑战性的任务，因为...
- en: Point-to-point integration
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点对点集成
- en: One of the approaches to solve the problem is to enable point-to-point integration
    between the applications. By this, we mean that each application has a set of
    connectors that allows it to talk to another application. For every pair of applications
    that need to talk to each other, there needs to exist a separate connector that
    facilitates communication between the applications.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 解决问题的方法之一是实现应用程序之间的点对点集成。这意味着每个应用程序都有一组连接器，允许它与另一个应用程序通信。对于需要彼此通信的每一对应用程序，都需要存在一个单独的连接器来促进应用程序之间的通信。
- en: This approach is completely fine when the number of applications that need to
    talk to each other is small. But as the enterprise grows, its needs also grow,
    which means commissioning new applications into the infrastructure. Now, as the
    number of applications grow, the number of connectors that are required to facilitate
    the communication between the different applications will also start growing,
    reaching a level at which the infrastructure will become just too complex to manage
    and maintain.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要相互通信的应用程序数量较少时，这种方法是完全可以接受的。但随着企业的发展，其需求也会增长，这意味着需要将新应用程序纳入基础设施中。现在，随着应用程序数量的增加，需要用于促进不同应用程序之间通信的连接器数量也将开始增长，达到一个基础设施变得过于复杂以至无法管理和维护的水平。
- en: To enable the integration of a large set of applications inside the enterprise,
    which may grow over the time, we may require something that is more flexible and
    that can help us to standardize the way these applications communicate with each
    other. The move to EAI is just the kind of architecture that we are looking at,
    as it aims to help us achieve these objectives. So, let's take a look now at what EAI
    has in store for us.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在企业内部集成大量应用程序，可能会随着时间的推移而增长，我们可能需要一些更灵活的东西，可以帮助我们标准化这些应用程序之间的通信方式。转向EAI正是我们正在考虑的架构类型，因为它旨在帮助我们实现这些目标。因此，现在让我们来看看EAI为我们提供了什么。
- en: Moving towards EAI
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 走向EAI
- en: When we aim to standardize the way in which the different applications running
    in our infrastructure will communicate with each other, and how they will store
    the data, the EAI approach really provides us with an option that is not only
    flexible in nature but also scalable, without introducing unnecessary complexities
    into the infrastructure.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的目标是标准化基础设施中运行的不同应用程序之间的通信方式以及它们将如何存储数据时，EAI方法确实为我们提供了一种选择，不仅具有灵活性，而且可扩展，而不会给基础设施引入不必要的复杂性。
- en: The EAI pattern provide us with a framework that consist of tools and technologies
    that help us standardize the way the communication between the different applications
    takes place. An EAI framework usually comes with the components that facilitate
    the exchange of data between the applications and their transformation from one
    format to another and act as a glue layer between the different ...
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: EAI模式为我们提供了一个框架，其中包含帮助我们标准化不同应用程序之间通信方式的工具和技术。EAI框架通常配备了促进应用程序之间数据交换和数据从一种格式转换为另一种格式的组件，并充当不同应用程序之间的粘合层的组件。
- en: The traditional approach to EAI
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统的EAI方法
- en: In the early days of EAI, the applications needed to interact with each other
    in various formats, which may include communicating some information or exchanging
    data. To facilitate this exchange, the organizations came up with a hub and spoke
    model for EAI.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在EAI的早期，应用程序需要以各种格式相互交互，这可能包括通信一些信息或交换数据。为了促进这种交换，组织采用了EAI的中心枢纽模型。
- en: In this hub and spoke model, there's a router-based middleware component and
    a concept of events. Whenever there was some change in the state of one of the
    applications, the application used to generate an event. The other applications
    subscribed to the event stream they were interested in.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种中心枢纽模型中，有一个基于路由器的中间件组件和事件的概念。每当一个应用程序的状态发生变化时，该应用程序会生成一个事件。其他应用程序订阅它们感兴趣的事件流。
- en: Now, whenever a new event was generated, the router was responsible for the
    delivery of the event to the interested applications handling the conversion of
    data from one format into another, so that the applications could communicate
    with each other. In this kind of approach, the router became the central point
    of facilitating the integration between the different applications.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当生成新事件时，路由器负责将事件传递给感兴趣的应用程序，并处理数据从一种格式转换为另一种格式，以便应用程序之间可以相互通信。在这种方法中，路由器成为促进不同应用程序之间集成的中心点。
- en: 'The router provided a lot of features, such as the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器提供了许多功能，例如以下功能：
- en: '**Adapters and SDK:** For the applications to communicate with the router to
    raise events, they need to have some kind of glue that facilitates the connection
    between the application and router. The adapters provided by the router middleware
    used to provide this necessary glue layer. In case there was no supported adapter
    for an application, the router middleware provided an SDK to facilitate the development
    of an adapter.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适配器和SDK：** 应用程序需要与路由器通信以触发事件，它们需要一种促进应用程序和路由器之间连接的粘合剂。路由中间件提供的适配器用于提供必要的粘合层。如果某个应用程序没有受支持的适配器，路由中间件将提供SDK以促进适配器的开发。'
- en: '**Message transformation:** When a new event has been generated, the router,
    based on a set of some pre-defined rules, used to translate the messages associated
    with an event into a format that can then be consumed by another application.
    This kind of functionality was important to facilitate communication between two
    different applications, each of which have their own data storage formats and
    communications styles.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息转换：** 当生成新事件时，路由器根据一组预定义的规则，将与事件相关的消息转换为另一个应用程序可以消费的格式。这种功能对于促进两个不同应用程序之间的通信非常重要，每个应用程序都有自己的数据存储格式和通信风格。'
- en: '**Intelligent routing:** For the applications to work seamlessly with each
    other, there needs to be a guarantee that the correct event is reaching the correct
    target audience. The router middleware used to implement intelligent routing based
    on which application generated the event and which applications are interested
    in listening to that event, so that the messages generated as a part of an event
    are delivered to the correct recipients.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**智能路由：** 应用程序需要无缝地相互配合，必须保证正确的事件能够到达正确的目标受众。路由中间件用于实现基于应用程序生成的事件和对该事件感兴趣的应用程序的智能路由，以便将作为事件一部分生成的消息传递给正确的接收者。'
- en: This kind of approach provided a nice mechanism to remove the unneeded complexity
    from the enterprise infrastructure that would have been developed if every application
    had to communicate with other applications directly, managing their own connector,
    and handling data consistency. Whereas, with this approach, the router facilitates
    the communication between the different applications.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法提供了一种很好的机制，可以消除企业基础设施中不必要的复杂性，如果每个应用程序都必须直接与其他应用程序通信，管理自己的连接器并处理数据一致性，那么这种复杂性将会增加。而采用这种方法，路由器促进了不同应用程序之间的通信。
- en: 'But, as good as this approach was with all of the benefits, it suffered from
    some of the following serious drawbacks:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，尽管这种方法带来了许多好处，但它也存在一些严重的缺点：
- en: '**Single point of failure:** The broker model to the EAI proved to be a single
    point of failure. In case the router middleware goes down, all communication between
    the different applications will come to a halt.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单点故障：** EAI的经纪模型被证明是一个单点故障。如果路由中间件出现故障，不同应用程序之间的所有通信将停止。'
- en: '**Centralized logic:** The logic for the transformation of the data, along
    with the routing of the data, was all centrally located inside a single router.
    This caused the broker to become a complex component making the operations and
    maintenance of the broker a difficult task.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中逻辑：** 数据转换的逻辑以及数据的路由都集中在单个路由器中。这使得经纪成为一个复杂的组件，使得经纪的运营和维护成为一项艰巨的任务。'
- en: '**Poor scalability:** When the load on the router increases, the handling of
    the messages by the router can take a hit. This results in an inconsistent state
    of data between the different applications. Also, having a single, centrally located
    router becomes a hurdle in the geographical scalability of the router if the applications
    that are trying to connect to each other are located in the different geographies
    around the world.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展性差：** 当路由器的负载增加时，路由器处理消息的能力会受到影响。这会导致不同应用程序之间的数据状态不一致。此外，如果试图连接到彼此的应用程序位于世界各地的不同地理位置，那么单一的、集中位置的路由器将成为路由器地理扩展的障碍。'
- en: '**Proprietary solutions:** In the earlier days, when the router-based hub and
    spoke approach of integrating enterprise applications was there, most of the solutions
    used to be proprietary in nature and supporting only a subset of vendors. To get
    some application from an unsupported vendor integration, it was a huge problem
    for the developers, who would then need to write and maintain their own adapters
    based on the provided SDK.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专有解决方案：**在早期，当存在基于路由器的集线器和分支集成企业应用程序的方法时，大多数解决方案通常是专有的，只支持供应商的子集。对于从不受支持的供应商集成的应用程序，这对开发人员来说是一个巨大的问题，然后他们需要基于提供的SDK编写和维护自己的适配器。'
- en: All of these issues called for a better approach to be implemented that does
    not suffer the same issues as the router-based approach had. Eventually, the enterprises
    started to shift to a **service oriented architecture** (**SOA**) model and introduced
    the use of an **Enterprise Service Bus** (**ESB**) for integrating these different
    services inside the SOA. So, let's take a look at how the ESB changed the way
    EAI happens.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些问题都需要实施更好的方法，不会遭受基于路由器的方法所遇到的问题。最终，企业开始转向**面向服务的架构**（**SOA**）模型，并引入了**企业服务总线**（**ESB**）来集成SOA内部的不同服务。因此，让我们看看ESB如何改变了EAI的发生方式。
- en: The introduction of the ESB
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ESB的引入
- en: As the times moved forward, enterprises shifted to a new model of application
    development. This model used to model the applications as a service, where each
    service used to provide a certain set of business capabilities. So, for example,
    in an enterprise there will be a payroll service, which will provide all of the
    necessary functionality related to the management of the employee payroll, such
    as handling the data for the new employees, keeping a record of how much salary
    they have got and generating the monthly payslips.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时代的推移，企业转向了一种新的应用程序开发模式。这种模式用于将应用程序建模为服务，其中每个服务提供一定的业务能力。因此，例如，在一个企业中将有一个工资服务，该服务将提供与员工工资管理相关的所有必要功能，例如处理新员工的数据，记录他们获得的薪水金额并生成每月的工资单。
- en: Now, these services needed to be integrated with each other so that the exchange
    of data between these services could be facilitated. At this point in time, the
    enterprises needed something ...
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这些服务需要相互集成，以便在这些服务之间促进数据交换。在这一点上，企业需要一些...
- en: Patterns in EAI
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EAI中的模式
- en: EAI is an approach that has several patterns associated with it that govern
    how the applications are integrated. Which pattern to use usually depends upon
    the type of applications that are present in the enterprise infrastructure, and
    what kind of challenges there are in the integration.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: EAI是一种方法，与之相关的有几种模式，它们规定了应用程序如何集成。通常使用哪种模式取决于企业基础架构中存在的应用程序类型，以及集成中存在哪些挑战。
- en: So, let's take a look at these patterns and see how they are usually implemented.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看这些模式通常是如何实现的。
- en: Integration patterns
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成模式
- en: During the EAI, the integration patterns define how the applications will be
    integrated with each other. This may define how the different applications will
    communicate with each other and how these applications will transform the data.
    So, let's take a look at two broad ways in which the applications are integrated
    with each other.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在EAI期间，集成模式定义了应用程序如何相互集成。这可能会定义不同应用程序如何相互通信以及这些应用程序如何转换数据。因此，让我们看看应用程序如何相互集成的两种广泛方式。
- en: Mediation pattern
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调解模式
- en: In the mediation pattern of EAI, there's a central component that is responsible
    for the propagation of the events. For example, in the broker-based middleware
    model, whenever one of the applications generates an event, the event is handled
    by the middleware broker, which is then responsible for the propagation of the
    event to the other applications that are interested in that event.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在EAI的调解模式中，有一个负责事件传播的中央组件。例如，在基于代理的中间件模型中，每当一个应用程序生成一个事件时，该事件由中间件代理处理，然后负责将事件传播到对该事件感兴趣的其他应用程序。
- en: In this type of integration pattern, usually the applications directly interact
    with each other, facilitated by the middleware broker who relays the events that
    happen, and after which the event handlers for the other application are responsible.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种集成模式中，通常应用程序直接相互交互，由中间件代理进行便利，中间件代理传递发生的事件，之后另一个应用程序的事件处理程序负责。
- en: Another integration approach that usually implements the mediation pattern is
    the message bus approach, where the message bus acts as a mediator between the
    different applications delivering messages to each other to facilitate the communication
    between them.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种通常实现调解模式的集成方法是消息总线方法，其中消息总线充当不同应用程序之间传递消息以促进它们之间通信的调解者。
- en: Federation pattern
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联邦模式
- en: The federation pattern is the complete opposite of the mediation pattern in
    terms of functionality. While the mediation pattern focuses on direct communication
    between applications without providing any kind of barrier between them, the federation
    pattern usually restricts free communication between applications.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 联邦模式在功能上与调解模式完全相反。虽然调解模式侧重于应用程序之间的直接通信，而不提供任何障碍，联邦模式通常限制应用程序之间的自由通信。
- en: Inside the federation pattern, there's middleware that exposes a standard set
    of endpoints through which the other applications can communicate with it. Once
    the application makes a request to an API of the federation middleware, the federation
    middleware is then responsible for translating and passing that request to the
    backend application. Once the backend application processes the request, the federation
    middleware ...
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在联合模式中，中间件公开一组标准的端点，通过这些端点，其他应用程序可以与其通信。一旦应用程序向联合中间件的API发出请求，联合中间件就负责翻译并将该请求传递给后端应用程序。一旦后端应用程序处理了请求，联合中间件...
- en: Access patterns
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问模式
- en: Access patterns define how the access to the data happens within the applications
    inside the enterprise infrastructure.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 访问模式定义了企业基础设施内应用程序对数据的访问方式。
- en: 'Usually there are two kinds of access patterns that are followed: asynchronous
    and synchronous access patterns. Let''s take a look at what these patterns aim
    at.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通常有两种访问模式：异步和同步访问模式。让我们看看这些模式的目标是什么。
- en: Asynchronous access patterns
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步访问模式
- en: The asynchronous access pattern follows the fire-and-forget approach to data
    access. In this case, once the middleware forwards the request, it doesn't wait
    for the response for that request to arrive back and moves on the handling of
    the newer requests that it's receiving.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 异步访问模式遵循“发出请求并忘记”的数据访问方式。在这种情况下，一旦中间件转发了请求，它就不会等待该请求的响应返回，而是继续处理它正在接收的新请求。
- en: The asynchronous access pattern is usually followed in the mediation approach,
    where the router middleware, once notified about the occurrence of a certain event,
    propagates the event forward and forgets about the event without waiting for its
    reply.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 异步访问模式通常在调解方法中使用，其中路由器中间件一旦被通知发生某个事件，就会传播该事件并忘记该事件的回复而不等待。
- en: The same is the case with the message bus model; the message bus, once it has
    delivered a message, does not care about the response for the message being generated,
    hence making the process an ...
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 消息总线模型也是如此；一旦消息总线传递了消息，它就不再关心消息生成的响应，因此使得该过程...
- en: Synchronous access patterns
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步访问模式
- en: The synchronous access pattern works in the opposite manner to the asynchronous
    pattern. Instead of forwarding the request and forgetting about the response,
    the synchronous access pattern makes a request and then waits for the response
    to be generated by the other application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 同步访问模式与异步模式相反。同步访问模式不是转发请求然后忘记响应，而是发出请求，然后等待其他应用程序生成响应。
- en: This kind of pattern is usually followed in the case of federated integration,
    where the middleware acts as a intermediate, handling the access to the backend
    applications it's managing.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式通常在联合集成的情况下使用，其中中间件充当中间人，处理对其管理的后端应用程序的访问。
- en: For example, inside a gateway-based pattern, the middleware usually takes up
    the request, forwards the request to the backend application, and then waits for
    the response to arrive, before moving on to the next request.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在基于网关的模式中，中间件通常接受请求，将请求转发给后端应用程序，然后等待响应到达，然后再处理下一个请求。
- en: These were just a few basic patterns that govern the process of EAI. There are
    close to 65 EAI patterns that are still in use that facilitate the concept of
    EAI.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是控制EAI过程的一些基本模式。目前仍在使用近65种EAI模式，以促进EAI的概念。
- en: Now, let's take a look at some of the common issues that prevent a successful
    integration between the different enterprise applications.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下一些常见的问题，这些问题阻碍了不同企业应用之间成功集成。
- en: Issues in EAI
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EAI中的问题
- en: 'The successful integration of enterprise applications is usually affected by
    a number of factors; let''s take a look:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 企业应用程序的成功集成通常受到许多因素的影响；让我们来看一下：
- en: '**Proprietary data formats:** Some of the applications use their own proprietary
    data formats with very little documentation on how to integrate with them, preventing
    integration between the applications or causing the application integration to
    be of poor quality, and therefore resulting in a number of issues.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专有数据格式：**一些应用程序使用自己的专有数据格式，并且几乎没有关于如何与它们集成的文档，阻止了应用程序之间的集成，或导致应用程序集成质量不佳，从而导致一系列问题。'
- en: '**Data consistency issues:** Maintaining data consistency can turn out to be
    a problem for EAI. When every application maintains their own data source, the
    consistency of data across the different data sources can turn out to be problematic,
    especially if the middleware is experiencing heavy loads, resulting in ...'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据一致性问题：**维护数据一致性可能成为EAI的问题。当每个应用程序都维护自己的数据源时，跨不同数据源的数据一致性可能会成为问题，特别是如果中间件遇到重负载，导致...'
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Over the course of this chapter, we took a look at why EAI is necessary for
    the proper functioning of enterprise business processes. Once we understood the
    necessity of EAI, we then moved on to understand the approach toward EAI, where
    we explored the point-to-point integration of application, and why the process
    of point-to-point integration is problematic. We then explored the traditional
    way of implementing EAI through the use of a broker middleware model, before continuing
    the discussion about how the model transformed as SOA came into place, and how
    the ESB took the place of the broker-based model.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了为什么EAI对企业业务流程的正常运行是必要的。一旦我们了解了EAI的必要性，我们就开始了解EAI的方法，我们探讨了应用程序点对点集成以及为什么点对点集成的过程存在问题。然后我们探讨了通过使用经纪人中间件模型来实现EAI的传统方式，然后继续讨论模型是如何随着SOA的出现而转变的，以及ESB如何取代基于经纪人的模型。
- en: We then moved on to understanding the different patterns that are in EAI and
    learned about the mediation and federation integration patterns of connecting
    the different applications, followed by understanding how the different access
    patterns, such as asynchronous and synchronous access, work in the transportation
    of information from one application to another. We concluded this chapter by exploring
    some of the issues that plague the successful integration of applications in an
    enterprise.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们继续理解EAI中的不同模式，并了解连接不同应用程序的调解和联合集成模式，然后理解不同访问模式（如异步和同步访问）在信息从一个应用程序传输到另一个应用程序时是如何工作的。我们通过探讨一些困扰企业成功集成应用程序的问题来结束本章。
- en: As we move to the next chapter, we'll learn about how the introduction of microservices
    has changed the EAI landscape and has ousted the use of the ESB, and how it's
    now being replaced by distributed message brokers and API gateways.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们进入下一章，我们将了解微服务的引入如何改变了EAI的格局，并取代了ESB的使用，现在被分布式消息代理和API网关所取代。
- en: Questions
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the issues that are usually faced during point-to-point integration?
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在点对点集成过程中通常会面临哪些问题？
- en: How does an ESB connect the different types of applications together?
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ESB如何连接不同类型的应用程序？
- en: What are the different types of EAI patterns that exist facilitating the approach
    of application integration?
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存在哪些不同类型的EAI模式，促进了应用程序集成的方法？
