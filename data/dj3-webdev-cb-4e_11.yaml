- en: Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Testing views with mock
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用mock测试视图
- en: Testing the user interface with Selenium
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Selenium测试用户界面
- en: Testing APIs created using Django REST framework
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Django REST框架创建API的测试
- en: Ensuring test coverage
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保测试覆盖率
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: To ensure the quality and correctness of your code, you should have automated
    software tests. Django provides tools for you to write test suites for your website.
    Test suites automatically check your website and its components to ensure that
    everything is working correctly. When you modify your code, you can run the tests
    to check whether your changes affected the application's behavior negatively.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保代码的质量和正确性，您应该进行自动化软件测试。 Django为您提供了编写网站测试套件的工具。 测试套件会自动检查您的网站及其组件，以确保一切正常运行。
    当您修改代码时，可以运行测试以检查您的更改是否对应用程序的行为产生了负面影响。
- en: 'The world of automated software testing has a wide range of divisions and terminologies.
    For the sake of this book, we will divide testing into the following categories:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化软件测试领域有各种划分和术语。 为了本书的目的，我们将测试划分为以下类别：
- en: '**Unit testing** refers to tests that are strictly targeted at individual pieces,
    or units, of code. Most commonly, a unit corresponds to a single file or module,
    and unit tests do their best to validate that the logic and behaviors are as expected.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**指的是严格针对代码的单个部分或单元的测试。 最常见的情况是，一个单元对应于单个文件或模块，单元测试会尽力验证逻辑和行为是否符合预期。'
- en: '**Integration testing** goes one step further, dealing with the way that two
    or more units work with one another. Such tests do not get as granular as unit
    tests, and they are generally written under the assumption that all unit tests
    have passed by the time an integration is validated. Hence, integration tests
    only cover the set of behaviors that must be true for the units to work properly
    with one another.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**进一步进行，处理两个或多个单元彼此协作的方式。 这种测试不像单元测试那样细粒度，并且通常是在假设所有单元测试都已通过的情况下编写的。
    因此，集成测试仅涵盖了必须对单元正确地彼此协作的行为集。'
- en: '**Component interface testing** is a higher-order form of integration testing,
    in which a single component is verified from end to end. Such tests are written
    in a way that is ignorant of the underlying logic used to provide the behaviors
    of the component, so that logic can change without modifying the behavior, and
    the tests will still pass.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件接口测试**是集成测试的一种高阶形式，其中单个组件从头到尾进行验证。 这种测试以一种对提供组件行为的基础逻辑无知的方式编写，因此逻辑可以更改而不修改行为，测试仍将通过。'
- en: '**System testing** verifies the end-to-end integration of all components that
    make up a system, often corresponding to complete user flows.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统测试验证了构成系统的所有组件的端到端集成，通常对应于完整的用户流程。
- en: '**Operational acceptance testing** checks that all of the non-functional aspects
    of a system operate correctly. Acceptance tests check the business logic to find
    out whether the project works the way it is supposed to, from an end user''s point
    of view.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作接受测试**检查系统的所有非功能方面是否正常运行。 验收测试检查业务逻辑，以找出项目是否按照最终用户的观点正常工作。'
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For working with the code in this chapter, you will need the latest stable version
    of Python, a MySQL or PostgreSQL database, and a Django project with a virtual
    environment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用本章中的代码，您需要最新稳定版本的Python，一个MySQL或PostgreSQL数据库，以及一个带有虚拟环境的Django项目。
- en: 'You can find all of the code for this chapter at the `ch11` directory of the
    GitHub repository at: [https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub存储库的`ch11`目录中找到本章的所有代码：[https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition)。
- en: Testing views with mock
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用mock测试视图
- en: In this recipe, we will take a look at how to write unit tests. Unit tests are
    those that check whether individual functions or methods return the correct results.
    We will look at the `likes` app and write tests that check whether posting to
    the `json_set_like()` view returns a failure response for unauthenticated users
    and a successful result for authenticated users. We will use `Mock` objects to
    simulate the `HttpRequest` and `AnonymousUser` objects.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将看看如何编写单元测试。 单元测试检查单个函数或方法是否返回正确的结果。 我们将查看`likes`应用程序，并编写测试，检查对`json_set_like()`视图的发布是否对未经身份验证的用户返回失败响应，并对经过身份验证的用户返回成功结果。
    我们将使用`Mock`对象来模拟`HttpRequest`和`AnonymousUser`对象。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `locations` and `likes` apps from the *Implementing the
    Like widget* recipe in [Chapter 4](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*,
    Templates and JavaScript*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从*在[第4章](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*的*实现点赞小部件*食谱中的`locations`和`likes`应用程序开始。
- en: We are going to use the `mock` library, which has been available as a built-in
    at `unittest.mock` since Python 3.3.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`mock`库，自Python 3.3以来一直作为内置的`unittest.mock`可用。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will test the liking action with `mock` by performing the following steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下步骤使用`mock`测试点赞操作：
- en: Create the `tests` module in your `likes` app
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`likes`应用中创建`tests`模块
- en: 'In this module, create a `test_views.py` file with the following content:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本模块中，创建一个名为`test_views.py`的文件，内容如下：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the tests for the `likes` app, as follows:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`likes`应用的测试，如下所示：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When you run tests for the `likes` app, at first, a temporary test database
    is created. Then, the `setUpClass()` method is called. Later, the methods whose
    names start with `test` are executed, and, finally, the `tearDownClass()` method
    is called. For each passed test, you will see a dot (.) in the command-line tool,
    for each failed test there will be the letter F, and for each error in the tests,
    you will see the letter E. At the end, you will see hints about the failed and
    erroneous tests. As we currently have only two tests in the suite for the `likes`
    app, you will see two dots in the results.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行`likes`应用的测试时，首先会创建一个临时测试数据库。然后，会调用`setUpClass()`方法。稍后，将执行以`test`开头的方法，最后会调用`tearDownClass()`方法。对于每个通过的测试，您将在命令行工具中看到一个点（.），对于每个失败的测试，将会有一个字母F，对于测试中的每个错误，您将看到字母E。最后，您将看到有关失败和错误测试的提示。因为我们目前在`likes`应用的套件中只有两个测试，所以您将在结果中看到两个点。
- en: 'In `setUpClass()`, we create a location and a superuser. Also, we find out
    the `ContentType` object for the `Location` model. We will need it for the `json_set_like()`
    view that sets or removes likes for different objects. As a reminder, the view
    looks similar to the following, and returns a JSON string as a result:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在`setUpClass()`中，我们创建一个位置和一个超级用户。此外，我们找出`Location`模型的`ContentType`对象。我们将需要它用于`json_set_like()`视图，该视图为不同对象设置或移除喜欢。作为提醒，该视图看起来类似于以下内容，并返回一个JSON字符串作为结果：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the `test_authenticated_json_set_like()` and `test_anonymous_json_set_like()`
    methods, we use the `Mock` objects. These are objects that can have any attributes
    or methods. Each undefined attribute or method of a `Mock` object is another `Mock`
    object. Therefore, in the shell, you can try to chain attributes, as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在`test_authenticated_json_set_like()`和`test_anonymous_json_set_like()`方法中，我们使用`Mock`对象。这些对象可以具有任何属性或方法。`Mock`对象的每个未定义属性或方法都是另一个`Mock`对象。因此，在shell中，您可以尝试链接属性，如下所示：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In our tests, we use `Mock` objects to simulate the `HttpRequest` object. For
    the anonymous user, `MockUser` is generated as a patch of the standard Django
    `User` object, via the `@mock.patch()` decorator. For the authenticated user,
    we still need the real `User` object because the view uses the user's ID for the `Like` object.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的测试中，我们使用`Mock`对象来模拟`HttpRequest`对象。对于匿名用户，`MockUser`被生成为标准Django `User`对象的一个补丁，通过`@mock.patch()`装饰器。对于经过身份验证的用户，我们仍然需要真实的`User`对象，因为视图使用用户的ID来获取`Like`对象。
- en: 'Therefore, we call the `json_set_like()` function, and check that the returned
    JSON response is correct:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们调用`json_set_like()`函数，并检查返回的JSON响应是否正确：
- en: 'It returns `{"success": false}` in the response if the visitor is unauthenticated'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '如果访问者未经身份验证，则响应中返回`{"success": false}`'
- en: 'It returns something like `{"action": "add", "count": 1, "success": true}`
    for authenticated users'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '对于经过身份验证的用户，它返回类似`{"action": "add", "count": 1, "success": true}`的内容'
- en: In the end, the `tearDownClass()` class method is called, deleting the location
    and superuser from the test database.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，调用`tearDownClass()`类方法，从测试数据库中删除位置和超级用户。
- en: There's more...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: To test something that uses the `HttpRequest` object, you can also use Django
    Request Factory. You can read how to use it at [https://docs.djangoproject.com/en/3.0/topics/testing/advanced/#the-request-factory](https://docs.djangoproject.com/en/3.0/topics/testing/advanced/#the-request-factory).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试使用`HttpRequest`对象的内容，您还可以使用Django请求工厂。您可以在[https://docs.djangoproject.com/en/3.0/topics/testing/advanced/#the-request-factory](https://docs.djangoproject.com/en/3.0/topics/testing/advanced/#the-request-factory)上阅读如何使用它。
- en: See also
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Implementing the Like widget* recipe in [Chapter 4](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*,
    Templates and JavaScript*
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第4章](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*，模板和JavaScript*中的*实现“喜欢”小部件*食谱中
- en: The *Testing the user interface with Selenium* recipe
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Selenium测试用户界面*食谱'
- en: The *Testing APIs created using Django REST framework* recipe
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Django REST框架创建API的测试*食谱'
- en: The *Ensuring test coverage* recipe
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确保测试覆盖*食谱'
- en: Testing the user interface with Selenium
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Selenium测试用户界面
- en: '**Operational acceptance tests** check the business logic to know whether the
    project works the way it is supposed to. In this recipe, you will learn how to
    write acceptance tests with **Selenium**, which allows you to simulate activities
    at the frontend such as filling in forms or clicking on specific DOM elements
    in a browser.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**操作接受测试**检查业务逻辑，以了解项目是否按预期工作。在这个食谱中，您将学习如何使用**Selenium**编写接受测试，它允许您模拟前端的活动，如填写表单或在浏览器中单击特定的DOM元素。'
- en: Getting ready
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `locations` and `likes` apps from the *Implementing the
    Like widget* recipe in [Chapter 4](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*,
    Templates and JavaScript*.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从[第4章](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*，模板和JavaScript*中的*实现“喜欢”小部件*食谱中的`locations`和`likes`应用开始。
- en: 'For this recipe, we''ll be using the Selenium library with the **Chrome** browser
    and **ChromeDriver** to control it. Let''s prepare that:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们将使用Selenium库与**Chrome**浏览器和**ChromeDriver**来控制它。让我们准备一下：
- en: Download and install the Chrome browser from [https://www.google.com/chrome/](https://www.google.com/chrome/).
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://www.google.com/chrome/](https://www.google.com/chrome/)下载并安装Chrome浏览器。
- en: Create a `drivers` directory in your Django project. Download the latest stable
    version of ChromeDriver from [https://sites.google.com/a/chromium.org/chromedriver/](https://sites.google.com/a/chromium.org/chromedriver/),
    unzip it, and place it into the newly created `drivers` directory.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Django项目中创建一个`drivers`目录。从[https://sites.google.com/a/chromium.org/chromedriver/](https://sites.google.com/a/chromium.org/chromedriver/)下载ChromeDriver的最新稳定版本，解压缩并将其放入新创建的`drivers`目录中。
- en: 'Install Selenium in your virtual environment, as follows:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在虚拟环境中安装Selenium，如下所示：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will test the Ajax-based liking functionality with Selenium by performing
    the following steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过Selenium测试基于Ajax的点赞功能，执行以下步骤：
- en: 'In your project settings, add a `TESTS_SHOW_BROWSER` setting:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目设置中，添加一个`TESTS_SHOW_BROWSER`设置：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create the `tests` module in your `locations` app and add a `test_frontend.py`
    file in it with the following content:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`locations`应用中创建`tests`模块，并在其中添加一个`test_frontend.py`文件，内容如下：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the tests for the `locations` app, as shown in the following:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`locations`应用的测试，如下所示：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we run these tests, we will see a Chrome window opened with the administration
    login screen under the URL, for example,
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这些测试时，我们将看到一个Chrome窗口打开，显示管理登录屏幕的URL，例如
- en: '`http://localhost:63807/en/admin/login/?next=/en/locations/176255a9-9c07-4542-8324-83ac0d21b7c3/`.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:63807/en/admin/login/?next=/en/locations/176255a9-9c07-4542-8324-83ac0d21b7c3/`。'
- en: The username and password fields will get filled in with admin and you will
    get redirected to the detail page of the Park Güell location, under such a URL
    as
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 用户名和密码字段将填写为admin，然后您将被重定向到Park Güell位置的详细页面，URL如下
- en: '`http://localhost:63807/en/locations/176255a9-9c07-4542-8324-83ac0d21b7c3/`.
    There you will see the Like button clicked twice, causing liking and unliking
    actions.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:63807/en/locations/176255a9-9c07-4542-8324-83ac0d21b7c3/`。在那里，您将看到点赞按钮被点击两次，导致点赞和取消点赞操作。'
- en: If we change the `TESTS_SHOW_BROWSER` setting to `False` (or remove it all)
    and run the tests again, the testing will happen with minimal waiting time and
    in the background without opening a browser's window.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将`TESTS_SHOW_BROWSER`设置为`False`（或将其全部删除）并再次运行测试，测试将以最小的等待时间在后台进行，而不会打开浏览器窗口。
- en: Let's see how this works in the test suite. We define a class extending `LiveServerTestCase`.
    This creates a test suite that will run a local server under a random unused port
    such as `63807`. By default, `LiveServerTestCase` runs a server in non-DEBUG mode.
    But we switch it to the DEBUG mode using the `override_settings()` decorator to
    make the static files accessible without collecting them and to show error traceback
    if any errors happen on any page. The `setUpClass()` class method will be executed
    at the beginning of all of the tests and the `tearDownClass()` class method will
    be executed after the tests have been run. In the middle, the testing will execute
    all the methods of the suite whose names start with `test`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这在测试套件中是如何工作的。我们定义一个扩展`LiveServerTestCase`的类。这将创建一个测试套件，该测试套件将在一个随机未使用的端口（例如`63807`）下运行一个本地服务器。默认情况下，`LiveServerTestCase`以非DEBUG模式运行服务器。但是，我们使用`override_settings()`装饰器将其切换到DEBUG模式，以便使静态文件可访问而无需收集它们，并在任何页面上发生错误时显示错误回溯。`setUpClass()`类方法将在所有测试开始时执行，`tearDownClass()`类方法将在测试运行后执行。在中间，测试将执行所有以`test`开头的套件方法。
- en: When we start testing, a new test database is created. In `setUpClass()`, we
    create a browser object, one location, and one superuser. Then, the `test_login_and_like()`
    method is executed, which opens the administration login page, finds the username
    field, types in the administrator's username, finds the password field, types
    in the administrator's password, finds the submit button, and clicks on it. Then,
    it waits a maximum of 10 seconds until a DOM element with the `.like-button` CSS
    class can be found on the page.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始测试时，会创建一个新的测试数据库。在`setUpClass()`中，我们创建一个浏览器对象，一个位置和一个超级用户。然后，执行`test_login_and_like()`方法，该方法打开管理登录页面，找到用户名字段，输入管理员的用户名，找到密码字段，输入管理员的密码，找到提交按钮，并点击它。然后，它等待最多10秒，直到页面上可以找到具有`.like-button`
    CSS类的DOM元素。
- en: 'As you might remember from the *Implementing the Like widget* recipe in [Chapter
    4](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*, Templates and JavaScript*, our
    widget consists of two elements:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能记得的*在[第4章](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*中实现点赞小部件的教程，模板和JavaScript，我们的小部件由两个元素组成：
- en: A Like button
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个点赞按钮
- en: A badge showing the total number of likes
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示点赞总数的徽章
- en: If a button is clicked, your `Like` instance is either added or removed from
    the database by an Ajax call. Moreover, the badge count is updated to reflect
    the number of likes in the database.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果点击按钮，您的`Like`实例将通过Ajax调用添加或从数据库中删除。此外，徽章计数将更新以反映数据库中的点赞数。
- en: Further in the test, we check what is the initial state of the button (whether
    it has an `.active` CSS class or not), check the initial number of likes, and
    simulate a click on the button. We wait a maximum of 10 seconds until the count
    in the badge changes. Then, we check whether the count in the badge matches the
    total likes for the location in the database. We will also check how the count
    in the badge has changed (increased). Lastly, we will simulate the click on the
    button again to switch back to the previous state.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试中，我们检查按钮的初始状态（是否具有`.active` CSS类），检查初始点赞数，并模拟点击按钮。我们等待最多10秒，直到徽章中的计数发生变化。然后，我们检查徽章中的计数是否与数据库中位置的总点赞数匹配。我们还将检查徽章中的计数如何发生变化（增加）。最后，我们将再次模拟点击按钮，以切换回先前的状态。
- en: Finally, the `tearDownClass()` method is called, which closes the browser and
    removes the location and the superuser from the test database.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，调用`tearDownClass()`方法，关闭浏览器并从测试数据库中删除位置和超级用户。
- en: See also
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Implementing the Like widget* recipe in [Chapter 4](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*,
    Templates and JavaScript*
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第4章](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*中实现点赞小部件的教程，模板和JavaScript'
- en: The *Testing views with mock* recipe
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用模拟测试视图*教程'
- en: The *Testing API created using Django REST framework* recipe
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Django REST框架创建API的测试*教程'
- en: The *Ensuring test coverage* recipe
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确保测试覆盖率*教程'
- en: Testing APIs created using Django REST framework
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Django REST框架创建的API的测试
- en: You should already have an understanding of how to write unit and operational
    acceptance tests. In this recipe, we will go through **component interface testing**
    for the RESTful API that we created earlier in this book.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经了解如何编写单元测试和操作接受测试。在这个教程中，我们将介绍**RESTful API的组件接口测试**，这是我们在本书中早些时候创建的。
- en: If you are not familiar with what a RESTful API is and how APIs are used, you
    can learn more at [http://www.restapitutorial.com/](http://www.restapitutorial.com/).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉RESTful API是什么以及API的用途，您可以在[http://www.restapitutorial.com/](http://www.restapitutorial.com/)上了解更多。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `music` app from the *Using Django REST framework* *to
    create APIs* recipe in [Chapter 9](1979103c-ef2a-44d8-a94d-d18e57688503.xhtml)*,
    Importing and Exporting Data*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从[第9章](1979103c-ef2a-44d8-a94d-d18e57688503.xhtml)*中的*使用Django REST框架创建API*配方中的`music`应用开始。
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'To test RESTful APIs, perform the following steps:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试RESTful API，请执行以下步骤：
- en: 'Create a `tests` module in your `music` app. In the `tests` module, create
    a `test_api.py` file with the `SongTests` class. The class will have `setUpClass()`
    and `tearDownClass()` methods, as follows:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`music`应用中创建一个`tests`模块。在`tests`模块中，创建一个名为`test_api.py`的文件，并创建`SongTests`类。该类将具有`setUpClass()`和`tearDownClass()`方法，如下所示：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add an API test checking the listing songs:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个API测试，检查列出歌曲：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add an API test checking the details of a single song:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个API测试，检查单个歌曲的详细信息：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add an API test checking for the successful creation of a new song:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个API测试，检查成功创建新歌曲：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add a test that tries to create a song without authentication and failing,
    therefore:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个尝试在没有身份验证的情况下创建歌曲并因此失败的测试：
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add a test for checking the successful changing of a song:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个检查成功更改歌曲的测试：
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add a test checking for failed changes because of missing authentication:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个检查由于缺少身份验证而导致更改失败的测试：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add a test checking for the failed deletion of a song:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个检查歌曲删除失败的测试：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add a test checking for the successful deletion of a song:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个检查成功删除歌曲的测试：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the tests for the `music` app, as shown in the following:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`music`应用的测试，如下所示：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This RESTful API test suite extends the `APITestCase` class. Once again, we
    have the `setUpClass()` and `tearDownClass()` class methods that will be executed
    before and after the different tests. Also, the test suite has a client attribute
    of the `APIClient` type, which can be used to simulate API calls. The client provides
    methods for all standard HTTP calls: `get()`, `post()`, `put()`, `patch()`, `delete()`,
    `head()`, and `options()`.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这个RESTful API测试套件扩展了`APITestCase`类。再次，我们有`setUpClass()`和`tearDownClass()`类方法，它们将在不同测试之前和之后执行。此外，测试套件具有`APIClient`类型的client属性，可用于模拟API调用。客户端提供所有标准HTTP调用的方法：`get()`，`post()`，`put()`，`patch()`，`delete()`，`head()`和`options()`。
- en: 'In our tests, we are using the `GET`, `POST`, and `DELETE` requests. Also,
    the client has methods to force the authentication of a user based on login credentials,
    a token, or a `User` object. In our tests, we are authenticating the third way:
    passing a user directly to the `force_authenticate()` method.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的测试中，我们使用`GET`，`POST`和`DELETE`请求。此外，客户端还具有根据登录凭据、令牌或`User`对象强制对用户进行身份验证的方法。在我们的测试中，我们正在进行第三种身份验证：直接将用户传递给`force_authenticate()`方法。
- en: The rest of the code is self-explanatory.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的其余部分是不言自明的。
- en: See also
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using Django REST framework to create APIs* recipe in [Chapter 9](1979103c-ef2a-44d8-a94d-d18e57688503.xhtml)*,
    Importing and Exporting Data*
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第9章](1979103c-ef2a-44d8-a94d-d18e57688503.xhtml)*中的*使用Django REST框架创建API*配方，导入和导出数据'
- en: The *Testing views with mock* recipe
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用模拟测试视图*配方'
- en: The *Testing the user interface with Selenium* recipe
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Selenium测试用户界面*配方'
- en: The *Ensuring test coverage* recipe
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确保测试覆盖率*配方'
- en: Ensuring test coverage
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保测试覆盖率
- en: Django allows the rapid prototyping and building of a project from idea to realization
    in a timely manner. But to make sure that your project is stable and production-ready,
    you should have tests for as many functionalities as possible. With test coverage,
    you can check how much of your project code is tested. Let's have a look at how
    you can do that.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Django允许快速原型设计和从想法到实现的项目构建。但是，为了确保项目稳定且可用于生产，您应该尽可能多地对功能进行测试。通过测试覆盖率，您可以检查项目代码的测试覆盖率。让我们看看您可以如何做到这一点。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Have some tests ready for your project.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的项目准备一些测试。
- en: 'Install the `coverage` utility in your virtual environment:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的虚拟环境中安装`coverage`实用程序：
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'This is how to check the test coverage of your project:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何检查项目的测试覆盖率的：
- en: 'Create a `setup.cfg` configuration file for the coverage utility with the following
    content:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为覆盖率实用程序创建一个名为`setup.cfg`的配置文件，内容如下：
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Make sure to have these lines in the `.gitignore` file if you are using Git
    version control:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用Git版本控制，请确保在`.gitignore`文件中有这些行：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a shell script, `run_tests_with_coverage.sh`, with the commands to run
    tests with coverage and report the results:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`run_tests_with_coverage.sh`的shell脚本，其中包含运行测试并报告结果的命令：
- en: '[PRE21]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add execution permissions for that script:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为该脚本添加执行权限：
- en: '[PRE22]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the script:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本：
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The coverage utility runs the tests and checks how many lines of code are covered
    by tests. In our example, the tests we wrote covered 48% of the code. If project
    stability is important to you, when you have time, seek to get closer to 100%.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖率实用程序运行测试并检查有多少行代码被测试覆盖。在我们的示例中，我们编写的测试覆盖了48%的代码。如果项目稳定性对您很重要，那么在有时间的时候，尽量接近100%。
- en: In the coverage configuration, we skipped the static assets, templates, and
    other non-Python files.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在覆盖配置中，我们跳过了静态资产、模板和其他非Python文件。
- en: See also
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Testing views with mock* recipe
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用模拟测试视图*配方'
- en: The *Testing the user interface with Selenium* recipe
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Selenium测试用户界面*配方'
- en: The *Testing APIs created using Django REST framework* recipe
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Django REST框架创建的API进行测试*配方'
