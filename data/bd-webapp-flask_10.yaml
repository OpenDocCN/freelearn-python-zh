- en: Chapter 10. What Now?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。现在怎么办？
- en: Flask is quite the most popular Web framework nowadays, so finding online reading
    material for it is not that hard. For instance, a quick search on Google will
    surely give you one or two good articles on most subjects you might be interested
    in. Nonetheless, subjects such as deployment, even though much discussed on the
    Internet, yet raise doubt in our fellow web warriors' hearts. For that reason,
    we have stashed a nice step-by-step "deploy your Flask app like a boss" recipe
    in our last chapter. Along with it, we'll advise you on a few very special places
    where knowledge is just there, thick and juicy, lying around waiting for you to
    pinch wisdom. With this chapter, you'll be capable of delivering your products
    from code to server, and maybe, just maybe, fetching some well-deserved high fives!
    Welcome to this chapter, where code meets the server and you meet the world!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Flask目前是最受欢迎的Web框架，因此为它找到在线阅读材料并不难。例如，快速在谷歌上搜索肯定会给你找到一两篇你感兴趣的好文章。尽管如此，像部署这样的主题，尽管在互联网上讨论得很多，但仍然会在我们的网页战士心中引起怀疑。因此，我们在最后一章中提供了一个很好的“像老板一样部署你的Flask应用程序”的逐步指南。除此之外，我们还会建议你一些非常特别的地方，那里的知识就在那里，浓厚而丰富，等着你去获取智慧。通过这一章，你将能够将你的产品从代码部署到服务器，也许，只是也许，能够得到一些应得的高分！欢迎来到这一章，在这里代码遇见服务器，你遇见世界！
- en: You deploy better than my ex
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的部署比我的前任好
- en: 'Deployment is not a term everyone is familiar with; if you were not a web developer
    until recently, you would have been, probably, unfamiliar with it. In a rough
    Spartan way, one could define deployment as the act of preparing and presenting
    your application to the world, assuring the required resources are available,
    and tuning it, as a configuration suitable for the development phase is not the
    same as one appropriate for deployment. In a web development context, we are talking
    about a few very specific actions:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 部署不是每个人都熟悉的术语；如果你最近还不是一个Web开发人员，你可能对它不太熟悉。以一种粗犷的斯巴达方式，我们可以将部署定义为准备和展示你的应用程序给世界的行为，确保所需的资源可用，并对其进行调整，因为适合开发阶段的配置与适合部署的配置是不同的。在Web开发的背景下，我们谈论的是一些非常具体的行动：
- en: Placing your code in a server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的代码放在服务器上
- en: Setting up your database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置你的数据库
- en: Setting up your HTTP server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置你的HTTP服务器
- en: Setting up other services you may use
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置你可能使用的其他服务
- en: Tying everything together
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有内容联系在一起
- en: Placing your code in a server
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将你的代码放在服务器上
- en: First of all, what is a server? We refer to as server a computer with server-like
    features such as high reliability, availability, and serviceability (**RAS**).
    These features grant the application running in the server a certain level of
    trust that the server will keep running, even after any environment problem, such
    as a hardware failure.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，什么是服务器？我们所说的服务器是指具有高可靠性、可用性和可维护性（RAS）等服务器特性的计算机。这些特性使服务器中运行的应用程序获得一定程度的信任，即使在出现任何环境问题（如硬件故障）之后，服务器也会继续运行。
- en: In the real world, where people have budgets, a normal computer (one of those
    you buy in the closest store) would most likely be the best choice for running
    a small application because "real servers" are very expensive. With small project
    budgets (nowadays, also the big ones), a robust solution called server virtualization
    was created where expensive, high-RAS physical servers have their resources (memory,
    CPU, hard-drive, and so on) virtualized into **virtual machines** (**VM**), which
    act just like smaller (and cheaper) versions of the real hardware. Companies such
    as DigitalOcean ([https://digitalocean.com/](https://digitalocean.com/)), Linode
    ([https://www.linode.com/](https://www.linode.com/)), and RamNode ([https://www.ramnode.com/](https://www.ramnode.com/))
    have whole businesses focused in providing cheap, reliable virtual machines to
    the public.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，人们有预算，一个普通的计算机（你在最近的商店买的那种）很可能是运行小型应用程序的最佳选择，因为“真正的服务器”非常昂贵。对于小项目预算（现在也包括大项目），创建了一种称为服务器虚拟化的强大解决方案，其中昂贵的高RAS物理服务器的资源（内存、CPU、硬盘等）被虚拟化成虚拟机（VM），它们就像真实硬件的较小（更便宜）版本一样。像DigitalOcean（https://digitalocean.com/）、Linode（https://www.linode.com/）和RamNode（https://www.ramnode.com/）这样的公司专注于向公众提供廉价可靠的虚拟机。
- en: Now, given that we have our web application ready (I mean, our Minimum Viable
    Product is ready), we must run the code somewhere accessible to our target audience.
    This usually means we need a web server. Pick two cheap virtual machines from
    one of the companies mentioned in the preceding paragraph, set up with Ubuntu,
    and let's begin!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，鉴于我们的Web应用程序已经准备就绪（我的意思是，我们的最小可行产品已经准备就绪），我们必须在某个对我们的目标受众可访问的地方运行代码。这通常意味着我们需要一个Web服务器。从前面一段提到的公司中选择两台便宜的虚拟机，使用Ubuntu进行设置，然后让我们开始吧！
- en: Setting up your database
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置你的数据库
- en: With respect to databases, one of the most basic things you should know during
    deployment is that it is a good practice to have your database and web application
    running on different (virtual) machines. You don't want them to compete for the
    same resources, believe me. That's why we hired two virtual servers—one will run
    our HTTP server and the other our database.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 关于数据库，部署过程中你应该知道的最基本的事情之一是，最好的做法是让你的数据库和Web应用程序在不同的（虚拟）机器上运行。你不希望它们竞争相同的资源，相信我。这就是为什么我们雇了两台虚拟服务器——一台将运行我们的HTTP服务器，另一台将运行我们的数据库。
- en: 'Let''s begin our database server setup; first, we add our SSH credentials to
    our remote server so that we may authenticate without the need to type the remote
    server user password every time. Before this, generate your SSH keys if you do
    not have them, like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始设置数据库服务器；首先，我们将我们的SSH凭据添加到远程服务器，这样我们就可以在不需要每次输入远程服务器用户密码的情况下进行身份验证。在此之前，如果你没有它们，生成你的SSH密钥，就像这样：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, given that your virtual machine provider provided you with an IP address
    to your remote machine, a root user, and password, we create a passwordless SSH
    authentication with our server as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设您的虚拟机提供程序为您的远程机器提供了IP地址、root用户和密码，我们将如下创建一个无密码的SSH身份验证与我们的服务器：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, exit your remote terminal and try to SSH `root@ipaddress`. The password
    will no longer be requested.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，退出您的远程终端，尝试SSH `root@ipaddress`。密码将不再被请求。
- en: 'Here''s the second step! Get rid of the non-database stuff such as Apache and
    install Postgres ([http://www.postgresql.org/](http://www.postgresql.org/)), the
    most advanced open source database to date:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步！摆脱非数据库的东西，比如Apache，并安装Postgres（[http://www.postgresql.org/](http://www.postgresql.org/)），迄今为止最先进的开源数据库：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now we set up the database.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们设置数据库。
- en: 'Connect the default user Postgres with the role `postgres`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将默认用户Postgres连接到角色`postgres`：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a database for our project called `mydb`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为我们的项目创建一个名为`mydb`的数据库：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a new user role to access our database:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的用户角色来访问我们的数据库：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So far, we've accomplished quite a lot. First, we removed unnecessary packages
    (just a few); installed the latest supported version of our database, Postgres;
    created a new database and a new "user"; and granted full permissions to our user
    over our new database. Let's understand each step.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经完成了很多工作。首先，我们删除了不必要的包（只有很少）；安装了我们的数据库Postgres的最新支持版本；创建了一个新的数据库和一个新的“用户”；并授予了我们的用户对我们的新数据库的完全权限。让我们了解每一步。
- en: 'We begin by removing Apache2 and the likes because this is a database server
    setup and so there is no need to keep the Apache2 packages. Depending on the installed
    Ubuntu version, you will even need to remove other packages as well. The golden
    rule here is: the fewer packages installed, the fewer packages we have to pay
    attention to. Keep only the minimum.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先删除Apache2等内容，因为这是一个数据库服务器设置，所以没有必要保留Apache2包。根据安装的Ubuntu版本，您甚至需要删除其他包。这里的黄金法则是：安装的包越少，我们就要关注的包就越少。只保留最少的包。
- en: Then we install Postgres. Depending on your background, you might ask—Why Postgres
    and why not MariaDB/MySQL? Well, well, fellow reader, Postgres is a complete solution
    with ACID support, document (JSONB) storage, key-value storage (with HStore),
    indexing, text searching, server-side programming, geolocalization (with PostGIS),
    and so on. If you know how to install and use Postgres, you have access to all
    these functionalities in a single solution. I also like it more than other open
    source/free solutions, so we'll stick with it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们安装Postgres。根据您的背景，您可能会问——为什么是Postgres而不是MariaDB/MySQL？嗯，嗯，亲爱的读者，Postgres是一个完整的解决方案，支持ACID，文档（JSONB）存储，键值存储（使用HStore），索引，文本搜索，服务器端编程，地理定位（使用PostGIS）等等。如果您知道如何安装和使用Postgres，您就可以在一个单一的解决方案中访问所有这些功能。我也更喜欢它比其他开源/免费解决方案，所以我们将坚持使用它。
- en: 'After installing Postgres, we have to configure it. Unlike SQLite, which we
    have used so far as our relational database solution, Postgres has a robust permissions
    system based on roles that controls which resources may be accessed or modified,
    and by whom. The main concept here is that roles are a very particular kind of
    group, which may have permissions called **privileges**, or other groups associated
    with or containing it. For example, the command `CREATE USER` run inside the `psql`
    console (the Postgres interactive console, just like Python''s) is not actually
    creating a user; it is, in reality, creating a new role with the login privilege,
    which is similar to the user concept. The following command is equivalent to the
    create user command inside `psql`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Postgres后，我们必须对其进行配置。与我们迄今为止使用的关系数据库解决方案SQLite不同，Postgres具有基于角色的强大权限系统，控制着可以被访问或修改的资源，以及由谁访问或修改。这里的主要概念是，角色是一种非常特殊的组，它可能具有称为**权限**的权限，或者与之相关或包含它的其他组。例如，在`psql`控制台内运行的`CREATE
    USER`命令（Postgres的交互式控制台，就像Python的）实际上并不是创建一个用户；实际上，它是在创建一个具有登录权限的新角色，这类似于用户概念。以下命令等同于`psql`内的创建用户命令：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, toward our last sphinx, there is the `GRANT` command. To allow roles to
    do stuff, we grant them privileges, such as the login privilege that allows our
    "user" to log in. In our example, we grant you all available privileges to the
    database `mydb`. We do that so that we're able to create tables, alter tables,
    and so on. You usually don't want your production web application database user
    (whoa!) to have all these privileges because, in the event of a security breach,
    the invader would be able to do anything to your database. As one usually (coff
    coff never!) does not alter the database structure on user interaction, using
    a less privileged user with the web application is not a problem.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，朝着我们最后的目标，有`GRANT`命令。为了允许角色执行操作，我们授予它们权限，比如登录权限，允许我们的“用户”登录。在我们的示例中，我们授予您对数据库`mydb`的所有可用权限。我们这样做是为了能够创建表，修改表等等。通常您不希望您的生产Web应用程序数据库用户（哇！）拥有所有这些权限，因为在发生安全漏洞时，入侵者将能够对您的数据库执行任何操作。因为通常（咳咳从不！）不会在用户交互中更改数据库结构，所以在Web应用程序中使用一个权限较低的用户并不是问题。
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: PgAdmin is an amazing, user-friendly, Postgres management application. Just
    use it with SSH tunneling ([http://www.pgadmin.org/docs/dev/connect.html](http://www.pgadmin.org/docs/dev/connect.html)),
    and be happy!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: PgAdmin是一个令人惊叹的、用户友好的、Postgres管理应用程序。只需使用SSH隧道（[http://www.pgadmin.org/docs/dev/connect.html](http://www.pgadmin.org/docs/dev/connect.html)），就可以快乐了！
- en: 'Now test that your database setup is working. Connect to it from the console:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在测试您的数据库设置是否正常工作。从控制台连接到它：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Enter your password when asked for it. Our preceding command is actually a trick
    we use with Postgres as we are connecting to the database through a network interface.
    By default, Postgres assumes you're trying to connect with a role and database
    of the same name as your system username. You cannot even connect as a role whose
    name is different than your system username, unless you do it from a network interface
    as we did.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在被要求时输入你的密码。我们之前的命令实际上是我们在使用Postgres时使用的一个技巧，因为我们是通过网络接口连接到数据库的。默认情况下，Postgres假设你试图使用与你的系统用户名相同的角色和数据库进行连接。除非你像我们一样通过网络接口连接，否则你甚至不能以与你的系统用户名不同的角色名称进行连接。
- en: Setting up the web server
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置web服务器
- en: Setting up your web server is a little more complex as it involves modifying
    more files and making sure the configuration is solid across them, but we'll make
    it, you'll see.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 设置你的web服务器会更加复杂，因为它涉及修改更多的文件，并确保它们之间的配置是稳固的，但我们会做到的，你会看到的。
- en: 'First, we make sure our project code is in our web server (that is not the
    same server as the database server, right?). We may do this in one of many ways:
    using FTP (please don''t), plain fabric plus rsync, version control, or version
    plus fabric (happy face!). Let''s see how to do the latter.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要确保我们的项目代码在我们的web服务器上（这不是与数据库服务器相同的服务器，对吧？）。我们可以以多种方式之一来做到这一点：使用FTP（请不要），简单的fabric加rsync，版本控制，或者版本加fabric（开心脸！）。让我们看看如何做后者。
- en: 'Given you already created a regular user in your web server virtual machine
    called `myuser`, make sure you have fabric installed:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经在你的web服务器虚拟机中创建了一个名为`myuser`的常规用户，请确保已经安装了fabric：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And, a file called `fabfile.py` in your project root:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 还有，在你的项目根目录中创建一个名为`fabfile.py`的文件：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With the preceding code and fabric installed, given you have your SSH key copied
    to the remote server with `ssh-copy-id` and have it set up with your version control
    provider (for example, `github` or `bitbucket`), `create_project` and `update_code`
    become available to you. You may use them, like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有了上述代码和安装了fabric，假设你已经将你的SSH密钥复制到了远程服务器，并已经与你的版本控制提供商（例如`github`或`bitbucket`）进行了设置，`create_project`和`update_code`就可以使用了。你可以像这样使用它们：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It's very easy. The first command gets your code in the repository, while the
    second updates it to your last commit.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常容易。第一条命令将你的代码放入存储库，而第二条命令将其更新到你的最后一次提交。
- en: 'Our web server setup will use some very popular tools:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的web服务器设置将使用一些非常流行的工具：
- en: '**uWSGI**: This is used for application server and process management'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**uWSGI**：这用于应用服务器和进程管理'
- en: '**Nginx**: This is used as our HTTP server'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nginx**：这用作我们的HTTP服务器'
- en: '**UpStart**: This is used to manage our uWSGI life cycle'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UpStart**：这用于管理我们的uWSGI生命周期'
- en: 'UpStart comes with Ubuntu out-of-the-box, so we''ll remember it for later.
    For uWSGI, we need to install it, like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: UpStart已经随Ubuntu一起提供，所以我们以后会记住它。对于uWSGI，我们需要像这样安装它：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, inside your virtualenv `bin` folder, there will be a uWSGI command. Keep
    track of where it is as we'll need it soon.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在你的虚拟环境`bin`文件夹中，会有一个uWSGI命令。记住它的位置，因为我们很快就会需要它。
- en: 'Create a `wsgi.py` file inside your project folder with the following content:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的项目文件夹中创建一个`wsgi.py`文件，内容如下：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: A uWSGI uses the app instance from the file above to connect to our application.
    An `app_factory` is a factory function that creates our application. We have seen
    a few so far. Just make sure the app instance it returns is properly configured.
    Application-wise, this is all we have to do. Next, we move on to connecting uWSGI
    to our application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: uWSGI使用上面的文件中的应用实例来连接到我们的应用程序。`app_factory`是一个创建应用程序的工厂函数。到目前为止，我们已经看到了一些。只需确保它返回的应用程序实例已经正确配置。就应用程序而言，这就是我们需要做的。接下来，我们将继续将uWSGI连接到我们的应用程序。
- en: 'We may call our uWSGI binary with all the parameters necessary to load our
    wsgi.py file directly from command line or we can create an `ini` file, with all
    the necessary configuration, and just provide it to the binary. As you may guess,
    the second approach is usually better, so create an ini file that looks like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在命令行直接调用我们的uWSGI二进制文件，并提供加载wsgi.py文件所需的所有参数，或者我们可以创建一个`ini`文件，其中包含所有必要的配置，并将其提供给二进制文件。正如你可能猜到的那样，第二种方法通常更好，因此创建一个看起来像这样的ini文件：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `user-home`, `project-name`, and `project-path` are aliases we use to make
    our work easier. The `socket` option points to the socket file our HTTP server
    will use to communicate with our application. We'll not discuss all the given
    options as this is not an overview on uWSGI, but a few more important options,
    such as `touch-reload`, `wsgi-file`, `callable`, and `chmod-socket`, will receive
    a detailed explanation. Touch-reload is particularly useful; the file you specify
    as an argument to it will be watched by uWSGI and, whenever it is updated/touched,
    your application will be reloaded. After some code update, you certainly want
    to reload your app. Wsgi-file specifies which file has our WSGI-compatible application,
    while `callable` tells uWSGI the name of the instance in the wsgi file (app, usually).
    Finally, we have chmod-socket, which changes our socket permission to `-rw-rw-r--`,
    aka read/write permission to the owner and group; others may but read this. We
    need this as we want our application in the user scope and our sockets to be read
    from the `www-data` user, which is the server user. This setup is quite secure
    as the application cannot mess with anything beyond the system user resources.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`user-home`，`project-name`和`project-path`是我们用来简化我们工作的别名。`socket`选项指向我们的HTTP服务器将用于与我们的应用程序通信的套接字文件。我们不会讨论所有给定的选项，因为这不是uWSGI概述，但一些更重要的选项，如`touch-reload`，`wsgi-file`，`callable`和`chmod-socket`，将得到详细的解释。Touch-reload特别有用；你指定为它的参数的文件将被uWSGI监视，每当它被更新/触摸时，你的应用程序将被重新加载。在一些代码更新之后，你肯定想重新加载你的应用程序。Wsgi-file指定了哪个文件有我们的WSGI兼容应用程序，而`callable`告诉uWSGI
    wsgi文件中实例的名称（通常是app）。最后，我们有chmod-socket，它将我们的套接字权限更改为`-rw-rw-r--`，即对所有者和组的读/写权限；其他人可能只读取这个。我们需要这样做，因为我们希望我们的应用程序在用户范围内，并且我们的套接字可以从`www-data`用户读取，这是服务器用户。这个设置非常安全，因为应用程序不能干扰系统用户资源之外的任何东西。'
- en: 'We may now set up our HTTP server, which is quite an easy step. Just install
    Nginx as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以设置我们的HTTP服务器，这是一个非常简单的步骤。只需按照以下方式安装Nginx：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, your http server is up-and-running on port 80\. Let''s make sure Nginx
    knows about our application. Write the following code to a file called `project`
    inside `/etc/nginx/sites-available`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的http服务器在端口80上已经运行起来了。让我们确保Nginx知道我们的应用程序。将以下代码写入`/etc/nginx/sites-available`中的名为`project`的文件：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding configuration file creates a virtual server running at port 80,
    listening to the domain `server_name`, serving static and media files from the
    provided paths through `/static` and `/media`, and listening to the path directing
    all access to `/` to be handled using our socket. We now turn on our configuration
    and turn off the default configuration for nginx:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的配置文件创建了一个虚拟服务器，运行在端口80上，监听域`server_name`，通过`/static`和`/media`提供静态和媒体文件，并监听将所有访问指向`/`的路径，使用我们的套接字处理。我们现在打开我们的配置并关闭nginx的默认配置：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: What have we just done? The configuration files for virtual servers live inside
    `/etc/nginx/sites-available/` and, whenever we want a configuration to be seen
    by nginx, we symlink it to the enabled sites. In the preceding configuration,
    we just disabled `default` and enabled `project` by symlinking it. Nginx does
    not notice and load what we just did on its own; we need to tell it to reload
    its configuration. Let's save this step for later.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚做了什么？虚拟服务器的配置文件位于`/etc/nginx/sites-available/`中，每当我们希望nginx看到一个配置时，我们将其链接到已启用的站点。在前面的配置中，我们刚刚禁用了`default`并通过符号链接启用了`project`。Nginx不会自行注意到并加载我们刚刚做的事情；我们需要告诉它重新加载其配置。让我们把这一步留到以后。
- en: 'We need to create one last file inside `/etc/init` that will register our uWSGI
    process as a service with upstart. This part is really easy; just create a file
    called `project.conf` (or any other meaningful name) with the following content:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`/etc/init`中创建一个最后的文件，它将使用upstart将我们的uWSGI进程注册为服务。这部分非常简单；只需创建一个名为`project.conf`（或任何其他有意义的名称）的文件，内容如下：
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding script runs uWSGI using our project `ini` file (we created it
    earlier) as parameter as the user "your-user" and group www-data. Replace `your-user`
    with your user (…) but, do not replace the `www-data` group as it is a required
    configuration. The preceding runlevel configuration just tells upstart when to
    start and stop this service. You don't have to intervene.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的脚本使用我们的项目`ini`文件（我们之前创建的）作为参数运行uWSGI，用户为"your-user"，组为www-data。用您的用户替换`your-user`（…），但不要替换`www-data`组，因为这是必需的配置。前面的运行级别配置只是告诉upstart何时启动和停止此服务。您不必进行干预。
- en: 'Run the following command line to start your service:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令行来启动您的服务：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next reload Nginx configuration like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来重新加载Nginx配置，就像这样：
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If everything went fine, the media path and static path exist, the project database
    settings point to the remote server inside the private network, and the gods are
    smiling on you, your project should be accessible from your registered domain.
    Gimme a high-five!!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，媒体路径和静态路径存在，项目数据库设置指向私有网络内的远程服务器，并且上帝对您微笑，您的项目应该可以从您注册的域名访问。击掌！
- en: StackOverflow
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StackOverflow
- en: StackOverflow is the new Google term for hacking and software development. A
    lot of people use it, so there are a lot of common questions and great answers
    at your disposal. Just spend a few hours reading the latest trends on [http://stackoverflow.com/search?q=flask](http://stackoverflow.com/search?q=flask),
    and you're sure to have learned much!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: StackOverflow是新的谷歌术语，用于黑客和软件开发。很多人使用它，所以有很多常见问题和很好的答案供您使用。只需花几个小时阅读关于[http://stackoverflow.com/search?q=flask](http://stackoverflow.com/search?q=flask)的最新趋势，您肯定会学到很多！
- en: Structuring your projects
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构化您的项目
- en: As Flask does not enforce a project structure, you've quite a lot of freedom
    to try out what best suits you. Large one-file projects work, Django-like structured
    projects work, flat architectures also work; the possibilities are many! Because
    of this, many projects emerge with their own suggested architecture; these projects
    are called boilerplates or skeletons. They focus on giving you a recipe to quickly
    start a new Flask project, taking advantage of their suggested way of organizing
    the code.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Flask不强制执行项目结构，您有很大的自由度来尝试最适合您的方式。大型单文件项目可行，类似Django的结构化项目可行，平面架构也可行；可能性很多！因此，许多项目都提出了自己建议的架构；这些项目被称为样板或骨架。它们专注于为您提供一个快速启动新Flask项目的方法，利用他们建议的代码组织方式。
- en: 'If you plan to create a large web application with Flask, you''re strongly
    advised to take a look at at least one of these projects because they''ve probably
    already faced a few problems you could face and have come up with a solution:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划使用Flask创建一个大型Web应用程序，强烈建议您至少查看其中一个这些项目，因为它们可能已经面临了一些您可能会遇到的问题，并提出了解决方案：
- en: Flask-Empty ([https://github.com/italomaia/flask-empty](https://github.com/italomaia/flask-empty))
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask-Empty ([https://github.com/italomaia/flask-empty](https://github.com/italomaia/flask-empty))
- en: Flask-Boilerplate ([https://github.com/mbr/flask-bootstrap](https://github.com/mbr/flask-bootstrap))
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask-Boilerplate ([https://github.com/mbr/flask-bootstrap](https://github.com/mbr/flask-bootstrap))
- en: Flask-Skeleton ([https://github.com/sean-/flask-skeleton](https://github.com/sean-/flask-skeleton))
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask-Skeleton ([https://github.com/sean-/flask-skeleton](https://github.com/sean-/flask-skeleton))
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: I must confess, I wrote this book for myself. It is so hard to find all the
    knowledge one needs to build a web application in just one place, that I had to
    place my notes somewhere, condensed. I hope that, if you reached this paragraph,
    you also feel like me, that this book was written for you. It was a nice challenging
    ride.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须承认，我写这本书是为了自己。在一个地方找到构建Web应用程序所需的所有知识是如此困难，以至于我不得不把我的笔记放在某个地方，浓缩起来。我希望，如果您读到这一段，您也和我一样觉得，这本书是为您写的。这是一次愉快的挑战之旅。
- en: You're now capable of building full-featured Flask applications with secure
    forms, database integration, tests, and making use of extensions, which allow
    you to create robust software in no time. I'm so proud! Now, go tell your friends
    how awesome you are. See you around!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在能够构建功能齐全的Flask应用程序，包括安全表单、数据库集成、测试，并利用扩展功能，让你能够在短时间内创建强大的软件。我感到非常自豪！现在，去告诉你的朋友你有多棒。再见！
- en: Postscript
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附言
- en: As a personal challenge, take that project you have always dreamed of coding,
    but never had the spirit to do it, and make an MVP (minimum viable product) of
    it. Create a very simple implementation of your idea and publish it ([http://bit.ly/1I0ehDB](http://bit.ly/1I0ehDB))
    to the world to see; then, leave me a message about it. I'd love to take a look
    at your work!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个个人挑战，拿出你一直梦想编码的项目，但从未有勇气去做的，然后制作一个MVP（最小可行产品）。创建你想法的一个非常简单的实现，并将其发布到世界上看看；然后，给我留言。我很乐意看看你的作品！
