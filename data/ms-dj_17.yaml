- en: Chapter 17. Django Middleware
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第17章。Django中间件
- en: Middleware is a framework of hooks into Django's request/response processing.
    It's a light, low-level plugin system for globally altering Django's input or
    output.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件是Django请求/响应处理的钩子框架。它是一个轻量级的、低级别的插件系统，用于全局修改Django的输入或输出。
- en: Each middleware component is responsible for doing some specific function. For
    example, Django includes a middleware component, `AuthenticationMiddleware`, that
    associates users with requests using sessions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个中间件组件负责执行一些特定的功能。例如，Django包括一个中间件组件`AuthenticationMiddleware`，它使用会话将用户与请求关联起来。
- en: This document explains how middleware works, how you activate middleware, and
    how to write your own middleware. Django ships with some built-in middleware you
    can use right out of the box. See *Available middleware* later in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档解释了中间件的工作原理，如何激活中间件以及如何编写自己的中间件。Django附带了一些内置的中间件，您可以直接使用。请参见本章后面的*可用中间件*。
- en: Activating middleware
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 激活中间件
- en: To activate a middleware component, add it to the `MIDDLEWARE_CLASSES` list
    in your Django settings.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活中间件组件，请将其添加到Django设置中的`MIDDLEWARE_CLASSES`列表中。
- en: 'In `MIDDLEWARE_CLASSES`, each middleware component is represented by a string:
    the full Python path to the middleware''s class name. For example, here''s the
    default value created by `django-admin startproject`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MIDDLEWARE_CLASSES`中，每个中间件组件都由一个字符串表示：中间件类名的完整Python路径。例如，这是由`django-admin
    startproject`创建的默认值：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A Django installation doesn't require any middleware-`MIDDLEWARE_CLASSES` can
    be empty, if you'd like-but it's strongly suggested that you at least use `CommonMiddleware`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Django安装不需要任何中间件-如果你愿意的话，`MIDDLEWARE_CLASSES`可以为空，但强烈建议至少使用`CommonMiddleware`。
- en: The order in `MIDDLEWARE_CLASSES` matters because a middleware can depend on
    other middleware. For instance, `AuthenticationMiddleware` stores the authenticated
    user in the session; therefore, it must run after `SessionMiddleware`. See *Middleware
    ordering* later in this chapter for some common hints about ordering of Django
    middleware classes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`MIDDLEWARE_CLASSES`中的顺序很重要，因为一个中间件可能依赖于其他中间件。例如，`AuthenticationMiddleware`将认证用户存储在会话中；因此，它必须在`SessionMiddleware`之后运行。有关Django中间件类的常见提示的*中间件排序*，请参见本章后面。'
- en: Hooks and application order
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 钩子和应用顺序
- en: 'During the request phase, before calling the view, Django applies middleware
    in the order it''s defined in `MIDDLEWARE_CLASSES`, top-down. Two hooks are available:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在请求阶段，在调用视图之前，Django按照在`MIDDLEWARE_CLASSES`中定义的顺序应用中间件，从上到下。有两个钩子可用：
- en: '`process_request()`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process_request()`'
- en: '`process_view()`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process_view()`'
- en: 'During the response phase, after calling the view, middleware are applied in
    reverse order, from the bottom up. Three hooks are available:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应阶段，在调用视图之后，中间件按照从下到上的顺序应用。有三个钩子可用：
- en: '`process_exception()`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process_exception()`'
- en: '`process_template_response()`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process_template_response()`'
- en: '`process_response()`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process_response()`'
- en: 'If you prefer, you can also think of it like an onion: each middleware class
    is a layer that wraps the view.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，您也可以将其视为洋葱：每个中间件类都是包装视图的一层。
- en: The behavior of each hook is described below.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下面描述了每个钩子的行为。
- en: Writing your own middleware
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自己的中间件
- en: 'Writing your own middleware is easy. Each middleware component is a single
    Python class that defines one or more of the following methods:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 编写自己的中间件很容易。每个中间件组件都是一个单独的Python类，定义了以下一个或多个方法：
- en: process_request
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: process_request
- en: 'Method: `process_request(request)`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：`process_request(request)`
- en: '`request` is an `HttpRequest` object.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`request`是一个`HttpRequest`对象。'
- en: '`process_request()` is called on each request, before Django decides which
    view to execute.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process_request()`在Django决定执行哪个视图之前，对每个请求都会调用。'
- en: It should return either `None` or an `HttpResponse` object. If it returns `None`,
    Django will continue processing this request, executing any other `process_request()`
    middleware, then, `process_view()` middleware, and finally, the appropriate view.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该返回`None`或者一个`HttpResponse`对象。如果返回`None`，Django将继续处理此请求，执行任何其他`process_request()`中间件，然后执行`process_view()`中间件，最后执行适当的视图。
- en: If it returns an `HttpResponse` object, Django won't bother calling any other
    request, view or exception middleware, or the appropriate view; it'll apply response
    middleware to that `HttpResponse`, and return the result.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果返回一个`HttpResponse`对象，Django将不再调用任何其他请求、视图或异常中间件，或者适当的视图；它将对该`HttpResponse`应用响应中间件，并返回结果。
- en: process_view
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: process_view
- en: 'Method: `process_view(request, view_func, view_args, view_kwargs)`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：`process_view(request, view_func, view_args, view_kwargs)`
- en: '`request` is an `HttpRequest` object.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`request`是一个`HttpRequest`对象。'
- en: '`view_func` is the Python function that Django is about to use. (It''s the
    actual function object, not the name of the function as a string.)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view_func`是Django即将使用的Python函数。（它是实际的函数对象，而不是函数名作为字符串。）'
- en: '`view_args` is a list of positional arguments that will be passed to the view.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view_args`是将传递给视图的位置参数列表。'
- en: '`view_kwargs` is a dictionary of keyword arguments that will be passed to the
    view.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view_kwargs`是将传递给视图的关键字参数字典。'
- en: Neither `view_args` nor `view_kwargs` include the first view argument (`request`).
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view_args`和`view_kwargs`都不包括第一个视图参数（`request`）。'
- en: '`process_view()` is called just before Django calls the view. It should return
    either `None` or an `HttpResponse` object. If it returns `None`, Django will continue
    processing this request, executing any other `process_view()` middleware and,
    then, the appropriate view.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`process_view()`在Django调用视图之前调用。它应该返回`None`或者一个`HttpResponse`对象。如果返回`None`，Django将继续处理此请求，执行任何其他`process_view()`中间件，然后执行适当的视图。'
- en: If it returns an `HttpResponse` object, Django won't bother calling any other
    view or exception middleware, or the appropriate view; it'll apply response middleware
    to that `HttpResponse`, and return the result.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果返回一个`HttpResponse`对象，Django将不再调用任何其他视图或异常中间件，或者适当的视图；它将对该`HttpResponse`应用响应中间件，并返回结果。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Accessing `request.POST` inside middleware from `process_request` or `process_view`
    will prevent any view running after the middleware from being able to modify the
    upload handlers for the request, and should normally be avoided.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `process_request` 或 `process_view` 中从中间件访问 `request.POST` 将阻止任何在中间件之后运行的视图能够修改请求的上传处理程序，并且通常应该避免这样做。
- en: The `CsrfViewMiddleware` class can be considered an exception, as it provides
    the `csrf_exempt()` and `csrf_protect()` decorators which allow views to explicitly
    control at what point the CSRF validation should occur.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`CsrfViewMiddleware` 类可以被视为一个例外，因为它提供了 `csrf_exempt()` 和 `csrf_protect()` 装饰器，允许视图明确控制
    CSRF 验证应该在何时发生。'
- en: process_template_response
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: process_template_response
- en: 'Method: `process_template_response(request, response)`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：`process_template_response(request, response)`
- en: '`request` is an `HttpRequest` object.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`request` 是一个 `HttpRequest` 对象。'
- en: '`response` is the `TemplateResponse` object (or equivalent) returned by a Django
    view or by a middleware.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`response` 是由 Django 视图或中间件返回的 `TemplateResponse` 对象（或等效对象）。'
- en: '`process_template_response()` is called just after the view has finished executing,
    if the response instance has a `render()` method, indicating that it is a `TemplateResponse`
    or equivalent.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果响应实例具有 `render()` 方法，表示它是 `TemplateResponse` 或等效对象，则会在视图执行完成后立即调用 `process_template_response()`。
- en: It must return a response object that implements a `render` method. It could
    alter the given `response` by changing `response.template_name` and `response.context_data`,
    or it could create and return a brand-new `TemplateResponse` or equivalent.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 它必须返回一个实现 `render` 方法的响应对象。它可以通过更改 `response.template_name` 和 `response.context_data`
    来修改给定的 `response`，也可以创建并返回全新的 `TemplateResponse` 或等效对象。
- en: You don't need to explicitly render responses-responses will be automatically
    rendered once all template response middleware has been called.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要显式渲染响应-一旦调用了所有模板响应中间件，响应将自动渲染。
- en: Middleware are run in reverse order during the response phase, which includes
    `process_template_response()`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应阶段中，中间件按照相反的顺序运行，其中包括 `process_template_response()`。
- en: process_response
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: process_response
- en: 'Method: `process_response(request, response)`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：`process_response(request, response)`
- en: '`request` is an `HttpRequest` object.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`request` 是一个 `HttpRequest` 对象。'
- en: '`response` is the `HttpResponse` or `StreamingHttpResponse` object returned
    by a Django view or by a middleware.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`response` 是由 Django 视图或中间件返回的 `HttpResponse` 或 `StreamingHttpResponse` 对象。'
- en: '`process_response()` is called on all responses before they''re returned to
    the browser. It must return an `HttpResponse` or `StreamingHttpResponse` object.
    It could alter the given `response`, or it could create and return a brand-new
    `HttpResponse` or `StreamingHttpResponse`.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在将响应返回给浏览器之前，将调用 `process_response()`。它必须返回一个 `HttpResponse` 或 `StreamingHttpResponse`
    对象。它可以修改给定的 `response`，也可以创建并返回全新的 `HttpResponse` 或 `StreamingHttpResponse`。
- en: Unlike the `process_request()` and `process_view()` methods, the `process_response()`
    method is always called, even if the `process_request()` and `process_view()`
    methods of the same middleware class were skipped (because an earlier middleware
    method returned an `HttpResponse`). In particular, this means that your `process_response()`
    method cannot rely on setup done in `process_request()`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `process_request()` 和 `process_view()` 方法不同，`process_response()` 方法始终会被调用，即使同一中间件类的
    `process_request()` 和 `process_view()` 方法被跳过（因为之前的中间件方法返回了一个 `HttpResponse`）。特别是，这意味着您的
    `process_response()` 方法不能依赖于在 `process_request()` 中进行的设置。
- en: Finally, remember that during the response phase, middleware are applied in
    reverse order, from the bottom up. This means classes defined at the end of `MIDDLEWARE_CLASSES`
    will be run first.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在响应阶段，中间件按照从下到上的顺序应用。这意味着在 `MIDDLEWARE_CLASSES` 的末尾定义的类将首先运行。
- en: Dealing with streaming responses
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理流式响应
- en: 'Unlike `HttpResponse`, `StreamingHttpResponse` does not have a `content` attribute.
    As a result, middleware can no longer assume that all responses will have a `content`
    attribute. If they need access to the content, they must test for streaming responses
    and adjust their behavior accordingly:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `HttpResponse` 不同，`StreamingHttpResponse` 没有 `content` 属性。因此，中间件不能再假定所有响应都有
    `content` 属性。如果它们需要访问内容，它们必须测试流式响应并相应地调整其行为：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`streaming_content` should be assumed to be too large to hold in memory. Response
    middleware may wrap it in a new generator, but must not consume it. Wrapping is
    typically implemented as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`streaming_content` 应被假定为太大而无法在内存中保存。响应中间件可以将其包装在一个新的生成器中，但不得消耗它。包装通常实现如下：'
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: process_exception
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: process_exception
- en: 'Method: `process_exception(request, exception)`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：`process_exception(request, exception)`
- en: '`request` is an `HttpRequest` object.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`request` 是一个 `HttpRequest` 对象。'
- en: '`exception` is an `Exception` object raised by the view function.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exception` 是由视图函数引发的 `Exception` 对象。'
- en: Django calls `process_exception()` when a view raises an exception. `process_exception()`
    should return either `None` or an `HttpResponse` object. If it returns an `HttpResponse`
    object, the template response and response middleware will be applied, and the
    resulting response returned to the browser. Otherwise, default exception handling
    kicks in.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当视图引发异常时，Django 调用 `process_exception()`。`process_exception()` 应该返回 `None` 或一个
    `HttpResponse` 对象。如果它返回一个 `HttpResponse` 对象，模板响应和响应中间件将被应用，并将生成的响应返回给浏览器。否则，将启用默认的异常处理。
- en: Again, middleware are run in reverse order during the response phase, which
    includes `process_exception`. If an exception middleware returns a response, the
    middleware classes above that middleware will not be called at all.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在响应阶段中，中间件按照相反的顺序运行，其中包括 `process_exception`。如果异常中间件返回一个响应，那么该中间件上面的中间件类将根本不会被调用。
- en: __init__
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: __init__
- en: 'Most middleware classes won''t need an initializer since middleware classes
    are essentially placeholders for the `process_*` methods. If you do need some
    global state, you may use `__init__` to set up. However, keep in mind a couple
    of caveats:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数中间件类不需要初始化器，因为中间件类本质上是 `process_*` 方法的占位符。如果您需要一些全局状态，可以使用 `__init__` 进行设置。但是，请记住一些注意事项：
- en: Django initializes your middleware without any arguments, so you can't define
    `__init__` as requiring any arguments.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Django 在不带任何参数的情况下初始化您的中间件，因此您不能将 `__init__` 定义为需要任何参数。
- en: Unlike the `process_*` methods which get called once per request, `__init__`
    gets called only once, when the web server responds to the first request.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与每个请求调用一次的 `process_*` 方法不同，`__init__` 仅在 Web 服务器响应第一个请求时调用一次。
- en: Marking middleware as unused
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将中间件标记为未使用
- en: It's sometimes useful to determine at run-time whether a piece of middleware
    should be used. In these cases, your middleware's `__init__` method may raise
    `django.core.exceptions.MiddlewareNotUsed`. Django will then remove that piece
    of middleware from the middleware process and a debug message will be logged to
    the `django.request` logger when `DEBUG` is set to `True`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有时在运行时确定是否应使用某个中间件是有用的。在这些情况下，您的中间件的 `__init__` 方法可能会引发 `django.core.exceptions.MiddlewareNotUsed`。Django
    将从中间件流程中删除该中间件，并在 `DEBUG` 设置为 `True` 时，将在 `django.request` 记录器中记录调试消息。
- en: Additional guidelines
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他指南
- en: Middleware classes don't have to subclass anything.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间件类不必是任何东西的子类。
- en: The middleware class can live anywhere on your Python path. All Django cares
    about is that the `MIDDLEWARE_CLASSES` setting includes the path to it.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间件类可以存在于 Python 路径的任何位置。Django 关心的是 `MIDDLEWARE_CLASSES` 设置包含其路径。
- en: Feel free to look at Django's available middleware for examples.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随时查看 Django 提供的中间件示例。
- en: If you write a middleware component that you think would be useful to other
    people, contribute to the community! Let us know and we'll consider adding it
    to Django.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您编写了一个您认为对其他人有用的中间件组件，请为社区做出贡献！让我们知道，我们将考虑将其添加到 Django 中。
- en: Available middleware
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用的中间件
- en: Cache middleware
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存中间件
- en: '`django.middleware.cache.UpdateCacheMiddleware`; and `django.middleware.cache.FetchFromCacheMiddleware`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.middleware.cache.UpdateCacheMiddleware`; 和 `django.middleware.cache.FetchFromCacheMiddleware`'
- en: Enable the site-wide cache. If these are enabled, each Django-powered page will
    be cached for as long as the `CACHE_MIDDLEWARE_SECONDS` setting defines. See the
    cache documentation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 启用站点范围的缓存。如果启用了这些选项，则每个由 Django 提供动力的页面将根据 `CACHE_MIDDLEWARE_SECONDS` 设置的定义缓存。请参阅缓存文档。
- en: Common middleware
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见中间件
- en: '`django.middleware.common.CommonMiddleware`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.middleware.common.CommonMiddleware`'
- en: 'Adds a few conveniences for perfectionists:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为完美主义者添加了一些便利：
- en: Forbids access to user agents in the `DISALLOWED_USER_AGENTS` setting, which
    should be a list of compiled regular expression objects.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁止访问 `DISALLOWED_USER_AGENTS` 设置中的用户代理，该设置应该是编译的正则表达式对象的列表。
- en: Performs URL rewriting based on the `APPEND_SLASH` and `PREPEND_WWW` settings.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 `APPEND_SLASH` 和 `PREPEND_WWW` 设置执行 URL 重写。
- en: If `APPEND_SLASH` is `True` and the initial URL doesn't end with a slash, and
    it is not found in the URLconf, then a new URL is formed by appending a slash
    at the end. If this new URL is found in the URLconf, then Django redirects the
    request to this new URL. Otherwise, the initial URL is processed as usual.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `APPEND_SLASH` 为 `True`，并且初始 URL 不以斜杠结尾，并且在 URLconf 中找不到，则将通过在末尾添加斜杠来形成新的
    URL。如果在 URLconf 中找到此新 URL，则 Django 将重定向请求到此新 URL。否则，将像往常一样处理初始 URL。
- en: For example, `foo.com/bar` will be redirected to `foo.com/bar/` if you don't
    have a valid URL pattern for `foo.com/bar` but do have a valid pattern for `foo.com/bar/`.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，如果您没有 `foo.com/bar` 的有效 URL 模式，但是有 `foo.com/bar/` 的有效模式，则将重定向到 `foo.com/bar/`。
- en: If `PREPEND_WWW` is `True`, URLs that lack a leading `www.` will be redirected
    to the same URL with a leading `www`.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `PREPEND_WWW` 为 `True`，则缺少前导 `www.` 的 URL 将重定向到具有前导 `www.` 的相同 URL。
- en: Both of these options are meant to normalize URLs. The philosophy is that each
    URL should exist in one, and only one, place. Technically a URL `foo.com/bar`
    is distinct from `foo.com/bar/`-a search engine indexer would treat them as separate
    URLs-so it's best practice to normalize URLs.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这两个选项都旨在规范化 URL。哲学是每个 URL 应该存在于一个且仅一个位置。从技术上讲，URL `foo.com/bar` 与 `foo.com/bar/`
    是不同的-搜索引擎索引器将其视为单独的 URL-因此最佳做法是规范化 URL。
- en: Handles ETags based on the `USE_ETAGS` setting. If `USE_ETAGS` is set to `True`,
    Django will calculate an ETag for each request by MD5-hashing the page content,
    and it'll take care of sending `Not Modified` responses, if appropriate.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据 `USE_ETAGS` 设置处理 ETags。如果 `USE_ETAGS` 设置为 `True`，Django 将通过对页面内容进行 MD5 哈希来计算每个请求的
    ETag，并在适当时负责发送 `Not Modified` 响应。
- en: '`CommonMiddleware.response_redirect_class.` Defaults to `HttpResponsePermanentRedirect`.
    Subclass `CommonMiddleware` and override the attribute to customize the redirects
    issued by the middleware.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CommonMiddleware.response_redirect_class.` 默认为 `HttpResponsePermanentRedirect`。子类
    `CommonMiddleware` 并覆盖属性以自定义中间件发出的重定向。'
- en: '`django.middleware.common.BrokenLinkEmailsMiddleware.` Sends broken link notification
    emails to `MANAGERS.`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django.middleware.common.BrokenLinkEmailsMiddleware.` 将损坏的链接通知邮件发送给 `MANAGERS.`'
- en: GZip middleware
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GZip 中间件
- en: '`django.middleware.gzip.GZipMiddleware`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.middleware.gzip.GZipMiddleware`'
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Security researchers recently revealed that when compression techniques (including
    `GZipMiddleware`) are used on a website, the site becomes exposed to a number
    of possible attacks. These approaches can be used to compromise, among other things,
    Django's CSRF protection. Before using `GZipMiddleware` on your site, you should
    consider very carefully whether you are subject to these attacks. If you're in
    any doubt about whether you're affected, you should avoid using `GZipMiddleware`.
    For more details, see `breachattack.com`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 安全研究人员最近披露，当网站使用压缩技术（包括 `GZipMiddleware`）时，该网站会暴露于许多可能的攻击。这些方法可以用来破坏 Django
    的 CSRF 保护，等等。在您的网站上使用 `GZipMiddleware` 之前，您应该非常仔细地考虑您是否受到这些攻击的影响。如果您对自己是否受影响有任何疑问，您应该避免使用
    `GZipMiddleware`。有关更多详细信息，请参阅 `breachattack.com`。
- en: Compresses content for browsers that understand GZip compression (all modern
    browsers).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解 GZip 压缩的浏览器压缩内容（所有现代浏览器）。
- en: This middleware should be placed before any other middleware that need to read
    or write the response body so that compression happens afterward.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此中间件应放置在需要读取或写入响应正文的任何其他中间件之前，以便在之后进行压缩。
- en: 'It will NOT compress content if any of the following are true:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以下任何条件为真，则不会压缩内容：
- en: The content body is less than 200 bytes long.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容主体长度小于200字节。
- en: The response has already set the `Content-Encoding` header.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应已设置了`Content-Encoding`头。
- en: The request (the browser) hasn't sent an `Accept-Encoding` header containing
    `gzip`.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求（浏览器）未发送包含`gzip`的`Accept-Encoding`头。
- en: You can apply GZip compression to individual views using the `gzip_page()` decorator.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`gzip_page()`装饰器将GZip压缩应用于单个视图。
- en: Conditional GET middleware
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有条件的GET中间件
- en: '`django.middleware.http.ConditionalGetMiddleware`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.middleware.http.ConditionalGetMiddleware`'
- en: Handles conditional GET operations. If the response has a `ETag` or `Last-Modified`
    header, and the request has `If-None-Match` or `If-Modified-Since`, the response
    is replaced by an `HttpResponseNotModified`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 处理有条件的GET操作。如果响应具有`ETag`或`Last-Modified`头，并且请求具有`If-None-Match`或`If-Modified-Since`，则响应将被`HttpResponseNotModified`替换。
- en: Also sets the `Date` and `Content-Length` response-headers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 还设置了`Date`和`Content-Length`响应头。
- en: Locale middleware
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区域中间件
- en: '`django.middleware.locale.LocaleMiddleware`'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.middleware.locale.LocaleMiddleware`'
- en: Enables language selection based on data from the request. It customizes content
    for each user. See the internationalization documentation.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 基于请求数据启用语言选择。它为每个用户定制内容。请参阅国际化文档。
- en: '`LocaleMiddleware.response_redirect_class`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocaleMiddleware.response_redirect_class`'
- en: Defaults to `HttpResponseRedirect`. Subclass `LocaleMiddleware` and override
    the attribute to customize the redirects issued by the middleware.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 默认为`HttpResponseRedirect`。子类化`LocaleMiddleware`并覆盖属性以自定义中间件发出的重定向。
- en: Message middleware
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息中间件
- en: '`django.contrib.messages.middleware.MessageMiddleware`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.contrib.messages.middleware.MessageMiddleware`'
- en: Enables cookie-and session-based message support. See the messages documentation.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 启用基于cookie和会话的消息支持。请参阅消息文档。
- en: Security middleware
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全中间件
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If your deployment situation allows, it's usually a good idea to have your front-end
    web server perform the functionality provided by the `SecurityMiddleware`. That
    way, if there are requests that aren't served by Django (such as static media
    or user-uploaded files), they will have the same protections as requests to your
    Django application.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的部署情况允许，通常最好让您的前端Web服务器执行`SecurityMiddleware`提供的功能。这样，如果有一些不是由Django提供服务的请求（如静态媒体或用户上传的文件），它们将具有与请求到您的Django应用程序相同的保护。
- en: The `django.middleware.security.SecurityMiddleware` provides several security
    enhancements to the request/response cycle. The `SecurityMiddleware` achieves
    this by passing special headers to the browser. Each one can be independently
    enabled or disabled with a setting.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.middleware.security.SecurityMiddleware`为请求/响应周期提供了几个安全增强功能。`SecurityMiddleware`通过向浏览器传递特殊头来实现这一点。每个头都可以通过设置独立启用或禁用。'
- en: HTTP strict transport security
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP严格传输安全
- en: 'Settings:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 设置：
- en: '`SECURE_HSTS_INCLUDE_SUBDOMAINS`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SECURE_HSTS_INCLUDE_SUBDOMAINS`'
- en: '`SECURE_HSTS_SECONDS`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SECURE_HSTS_SECONDS`'
- en: For sites that should only be accessed over HTTPS, you can instruct modern browsers
    to refuse to connect to your domain name via an insecure connection (for a given
    period of time) by setting the `Strict-Transport-Security` header. This reduces
    your exposure to some SSL-stripping man-in-the-middle (MITM) attacks.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于应该只能通过HTTPS访问的网站，您可以通过设置`Strict-Transport-Security`头，指示现代浏览器拒绝通过不安全的连接连接到您的域名（在一定时间内）。这减少了您对一些SSL剥离中间人（MITM）攻击的风险。
- en: '`SecurityMiddleware` will set this header for you on all HTTPS responses if
    you set the `SECURE_HSTS_SECONDS` setting to a non-zero integer value.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将`SECURE_HSTS_SECONDS`设置为非零整数值，则`SecurityMiddleware`将在所有HTTPS响应上为您设置此头。
- en: When enabling HSTS, it's a good idea to first use a small value for testing,
    for example, `SECURE_HSTS_SECONDS = 3600` for one hour. Each time a web browser
    sees the HSTS header from your site, it will refuse to communicate non-securely
    (using HTTP) with your domain for the given period of time.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 启用HSTS时，最好首先使用一个小值进行测试，例如，`SECURE_HSTS_SECONDS = 3600`表示一小时。每次Web浏览器从您的站点看到HSTS头时，它将拒绝在给定时间内与您的域进行非安全（使用HTTP）通信。
- en: Once you confirm that all assets are served securely on your site (that is,
    HSTS didn't break anything), it's a good idea to increase this value so that infrequent
    visitors will be protected (31536000 seconds, that is,1 year, is common).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确认您的站点上的所有资产都安全提供服务（即，HSTS没有破坏任何内容），最好增加此值，以便偶尔访问者受到保护（31536000秒，即1年，是常见的）。
- en: Additionally, if you set the `SECURE_HSTS_INCLUDE_SUBDOMAINS` setting to `True`,
    `SecurityMiddleware` will add the `includeSubDomains` tag to the `Strict-Transport-Security`
    header. This is recommended (assuming all subdomains are served exclusively using
    HTTPS), otherwise your site may still be vulnerable via an insecure connection
    to a subdomain.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果将`SECURE_HSTS_INCLUDE_SUBDOMAINS`设置为`True`，`SecurityMiddleware`将在`Strict-Transport-Security`头中添加`includeSubDomains`标记。这是建议的（假设所有子域都仅使用HTTPS提供服务），否则您的站点可能仍然会通过不安全的连接对子域进行攻击。
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The HSTS policy applies to your entire domain, not just the URL of the response
    that you set the header on. Therefore, you should only use it if your entire domain
    is served via HTTPS only.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: HSTS策略适用于整个域，而不仅仅是您设置头的响应的URL。因此，只有在整个域通过HTTPS提供服务时才应该使用它。
- en: Browsers properly respecting the HSTS header will refuse to allow users to bypass
    warnings and connect to a site with an expired, self-signed, or otherwise invalid
    SSL certificate. If you use HSTS, make sure your certificates are in good shape
    and stay that way!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 正确尊重HSTS头的浏览器将拒绝允许用户绕过警告并连接到具有过期、自签名或其他无效SSL证书的站点。如果使用HSTS，请确保您的证书状况良好并保持良好！
- en: 'X-content-type-options: nosniff'
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'X-content-type-options: nosniff'
- en: 'Setting:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 设置：
- en: '`SECURE_CONTENT_TYPE_NOSNIFF`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SECURE_CONTENT_TYPE_NOSNIFF`'
- en: Some browsers will try to guess the content types of the assets that they fetch,
    overriding the `Content-Type` header. While this can help display sites with improperly
    configured servers, it can also pose a security risk.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一些浏览器会尝试猜测它们获取的资产的内容类型，覆盖`Content-Type`头。虽然这可以帮助显示配置不正确的服务器的站点，但也可能带来安全风险。
- en: If your site serves user-uploaded files, a malicious user could upload a specially-crafted
    file that would be interpreted as HTML or Javascript by the browser when you expected
    it to be something harmless.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的网站提供用户上传的文件，恶意用户可能会上传一个特制的文件，当您期望它是无害的时，浏览器会将其解释为HTML或Javascript。
- en: 'To prevent the browser from guessing the content type and force it to always
    use the type provided in the `Content-Type` header, you can pass the `X-Content-Type-Options:
    nosniff` header. `SecurityMiddleware` will do this for all responses if the `SECURE_CONTENT_TYPE_NOSNIFF`
    setting is `True`.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '为了防止浏览器猜测内容类型并强制它始终使用`Content-Type`头中提供的类型，您可以传递`X-Content-Type-Options: nosniff`头。如果`SECURE_CONTENT_TYPE_NOSNIFF`设置为`True`，`SecurityMiddleware`将对所有响应执行此操作。'
- en: Note that in most deployment situations where Django isn't involved in serving
    user-uploaded files, this setting won't help you. For example, if your `MEDIA_URL`
    is served directly by your front-end web server (nginx, Apache, and so on.) then
    you'd want to set this header there.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在大多数部署情况下，Django不涉及提供用户上传的文件，这个设置对您没有帮助。例如，如果您的`MEDIA_URL`是由您的前端Web服务器（nginx，Apache等）直接提供的，那么您需要在那里设置这个头部。
- en: On the other hand, if you are using Django to do something like require authorization
    in order to download files and you cannot set the header using your web server,
    this setting will be useful.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您正在使用Django执行诸如要求授权才能下载文件之类的操作，并且无法使用您的Web服务器设置头部，那么这个设置将很有用。
- en: X-XSS-protection
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: X-XSS保护
- en: 'Setting:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 设置：
- en: '`SECURE_BROWSER_XSS_FILTER`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SECURE_BROWSER_XSS_FILTER`'
- en: Some browsers have the ability to block content that appears to be an XSS attack.
    They work by looking for Javascript content in the GET or POST parameters of a
    page. If the Javascript is replayed in the server's response, the page is blocked
    from rendering and an error page is shown instead.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一些浏览器有能力阻止看起来像XSS攻击的内容。它们通过查找页面的GET或POST参数中的Javascript内容来工作。如果服务器的响应中重放了Javascript，则页面将被阻止渲染，并显示错误页面。
- en: The `X-XSS-Protection header` is used to control the operation of the XSS filter.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`X-XSS-Protection header`用于控制XSS过滤器的操作。'
- en: 'To enable the XSS filter in the browser, and force it to always block suspected
    XSS attacks, you can pass the `X-XSS-Protection: 1; mode=block` header. `SecurityMiddleware`
    will do this for all responses if the `SECURE_BROWSER_XSS_FILTER` setting is `True`.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '为了在浏览器中启用XSS过滤器，并强制它始终阻止疑似的XSS攻击，您可以传递`X-XSS-Protection: 1; mode=block`头。如果`SECURE_BROWSER_XSS_FILTER`设置为`True`，`SecurityMiddleware`将对所有响应执行此操作。'
- en: Note
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The browser XSS filter is a useful defense measure, but must not be relied upon
    exclusively. It cannot detect all XSS attacks and not all browsers support the
    header. Ensure you are still validating and all input to prevent XSS attacks.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器XSS过滤器是一种有用的防御措施，但不能完全依赖它。它无法检测所有的XSS攻击，也不是所有的浏览器都支持该头部。确保您仍在验证和所有输入，以防止XSS攻击。
- en: SSL redirect
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SSL重定向
- en: 'Settings:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 设置：
- en: '`SECURE_REDIRECT_EXEMPT`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SECURE_REDIRECT_EXEMPT`'
- en: '`SECURE_SSL_HOST`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SECURE_SSL_HOST`'
- en: '`SECURE_SSL_REDIRECT`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SECURE_SSL_REDIRECT`'
- en: If your site offers both HTTP and HTTPS connections, most users will end up
    with an unsecured connection by default. For best security, you should redirect
    all HTTP connections to HTTPS.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的网站同时提供HTTP和HTTPS连接，大多数用户最终将默认使用不安全的连接。为了最佳安全性，您应该将所有HTTP连接重定向到HTTPS。
- en: If you set the `SECURE_SSL_REDIRECT` setting to True, `SecurityMiddleware` will
    permanently (HTTP 301) redirect all HTTP connections to HTTPS.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将`SECURE_SSL_REDIRECT`设置为True，`SecurityMiddleware`将永久（HTTP 301）将所有HTTP连接重定向到HTTPS。
- en: For performance reasons, it's preferable to do these redirects outside of Django,
    in a front-end load balancer or reverse-proxy server such as nginx. `SECURE_SSL_REDIRECT`
    is intended for the deployment situations where this isn't an option.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 出于性能原因，最好在Django之外进行这些重定向，在前端负载均衡器或反向代理服务器（如nginx）中。`SECURE_SSL_REDIRECT`适用于这种情况下无法选择的部署情况。
- en: If the `SECURE_SSL_HOST` setting has a value, all redirects will be sent to
    that host instead of the originally-requested host.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`SECURE_SSL_HOST`设置有值，所有重定向将发送到该主机，而不是最初请求的主机。
- en: If there are a few pages on your site that should be available over HTTP, and
    not redirected to HTTPS, you can list regular expressions to match those URLs
    in the `SECURE_REDIRECT_EXEMPT` setting.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的网站上有一些页面应该通过HTTP可用，并且不重定向到HTTPS，您可以在`SECURE_REDIRECT_EXEMPT`设置中列出正则表达式来匹配这些URL。
- en: If you are deployed behind a load-balancer or reverse-proxy server and Django
    can't seem to tell when a request actually is already secure, you may need to
    set the `SECURE_PROXY_SSL_HEADER` setting.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您部署在负载均衡器或反向代理服务器后，并且Django似乎无法确定请求实际上已经安全，您可能需要设置`SECURE_PROXY_SSL_HEADER`设置。
- en: Session middleware
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会话中间件
- en: '`django.contrib.sessions.middleware.SessionMiddleware`'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.contrib.sessions.middleware.SessionMiddleware`'
- en: Enables session support. See [Chapter 15](ch15.xhtml "Chapter 15. Django Sessions"),
    *Django Sessions*, for more information.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 启用会话支持。有关更多信息，请参见[第15章](ch15.xhtml "第15章。Django会话")，“Django会话”。
- en: Site middleware
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 站点中间件
- en: '`django.contrib.sites.middleware.CurrentSiteMiddleware`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.contrib.sites.middleware.CurrentSiteMiddleware`'
- en: Adds the `site` attribute representing the current site to every incoming `HttpRequest`
    object. See the sites documentation ([https://docs.djangoproject.com/en/1.8/ref/contrib/sites/](https://docs.djangoproject.com/en/1.8/ref/contrib/sites/))
    for more information.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个传入的`HttpRequest`对象添加代表当前站点的`site`属性。有关更多信息，请参见站点文档（[https://docs.djangoproject.com/en/1.8/ref/contrib/sites/](https://docs.djangoproject.com/en/1.8/ref/contrib/sites/)）。
- en: Authentication middleware
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份验证中间件
- en: '`django.contrib.auth.middleware` provides three middlewares for use in authentication:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.contrib.auth.middleware`提供了三个用于身份验证的中间件：'
- en: '`*.AuthenticationMiddleware.` Adds the `user` attribute, representing the currently-logged-in
    user, to every incoming `HttpRequest` object.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*.AuthenticationMiddleware.` 向每个传入的`HttpRequest`对象添加代表当前登录用户的`user`属性。'
- en: '`*.RemoteUserMiddleware.` Middleware for utilizing web server provided authentication.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*.RemoteUserMiddleware.` 用于利用Web服务器提供的身份验证。'
- en: '`*.SessionAuthenticationMiddleware.` Allows a user''s sessions to be invalidated
    when their password changes. This middleware must appear after `*.AuthenticationMiddleware`
    in `MIDDLEWARE_CLASSES`.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*.SessionAuthenticationMiddleware.` 允许在用户密码更改时使用户会话失效。此中间件必须出现在`MIDDLEWARE_CLASSES`中`*.AuthenticationMiddleware`之后。'
- en: For more on user authentication in Django, see [Chapter 11](ch11.xhtml "Chapter 11. User
    Authentication in Django"), *User Authentication in Django*.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Django中用户身份验证的更多信息，请参见[第11章](ch11.xhtml "第11章。Django中的用户身份验证")，“Django中的用户身份验证”。
- en: CSRF protection middleware
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSRF保护中间件
- en: '`django.middleware.csrf.CsrfViewMiddleware`'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.middleware.csrf.CsrfViewMiddleware`'
- en: Adds protection against Cross Site Request Forgeries (CSRF) by adding hidden
    form fields to POST forms and checking requests for the correct value. See [Chapter
    19](ch19.xhtml "Chapter 19. Security in Django"), *Security in Django*, for more
    information on CSRF protection.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向POST表单添加隐藏的表单字段并检查请求的正确值来防止跨站点请求伪造（CSRF）。有关CSRF保护的更多信息，请参见[第19章](ch19.xhtml
    "第19章。Django中的安全性")，“Django中的安全性”。
- en: X-Frame-options middleware
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: X-Frame-options中间件
- en: '`django.middleware.clickjacking.XFrameOptionsMiddleware`'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.middleware.clickjacking.XFrameOptionsMiddleware`'
- en: Simple clickjacking protection via the X-Frame-Options header.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过X-Frame-Options标头进行简单的点击劫持保护。
- en: Middleware ordering
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中间件排序
- en: '*Table 17.1* provides some hints about the ordering of various Django middleware
    classes:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '*表17.1*提供了有关各种Django中间件类的排序的一些提示：'
- en: '| **Class** | **Notes** |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| **类** | **注释** |'
- en: '| --- | --- |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| UpdateCacheMiddleware | Before those that modify the `Vary` header (`SessionMiddleware`,
    `GZipMiddleware`, `LocaleMiddleware`). |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| UpdateCacheMiddleware | 在修改`Vary`标头的中间件之前（`SessionMiddleware`，`GZipMiddleware`，`LocaleMiddleware`）。
    |'
- en: '| GZipMiddleware | Before any middleware that may change or use the response
    body.After `UpdateCacheMiddleware`: Modifies `Vary` header. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| GZipMiddleware | 在可能更改或使用响应正文的任何中间件之前。在`UpdateCacheMiddleware`之后：修改`Vary`标头。
    |'
- en: '| ConditionalGetMiddleware | Before `CommonMiddleware`: uses its `Etag` header
    when `USE_ETAGS` = `True`. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| ConditionalGetMiddleware | 在`CommonMiddleware`之前：当`USE_ETAGS`=`True`时使用其`Etag`标头。
    |'
- en: '| SessionMiddleware | After `UpdateCacheMiddleware`: Modifies `Vary` header.
    |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| SessionMiddleware | 在`UpdateCacheMiddleware`之后：修改`Vary`标头。 |'
- en: '| LocaleMiddleware | One of the topmost, after `SessionMiddleware` (uses session
    data) and `CacheMiddleware` (modifies `Vary` header). |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| LocaleMiddleware | 在顶部之一，之后是`SessionMiddleware`（使用会话数据）和`CacheMiddleware`（修改`Vary`标头）。
    |'
- en: '| CommonMiddleware | Before any middleware that may change the response (it
    calculates `ETags`).After `GZipMiddleware` so it won''t calculate an `ETag` header
    on gzipped contents.Close to the top: it redirects when `APPEND_SLASH` or `PREPEND_WWW`
    are set to `True`. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| CommonMiddleware | 在可能更改响应的任何中间件之前（它计算`ETags`）。在`GZipMiddleware`之后，因此它不会在经过gzip处理的内容上计算`ETag`标头。靠近顶部：当`APPEND_SLASH`或`PREPEND_WWW`设置为`True`时进行重定向。
    |'
- en: '| CsrfViewMiddleware | Before any view middleware that assumes that CSRF attacks
    have been dealt with. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| CsrfViewMiddleware | 在假定已处理CSRF攻击的任何视图中间件之前。 |'
- en: '| AuthenticationMiddleware | After `SessionMiddleware`: uses session storage.
    |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| AuthenticationMiddleware | 在`SessionMiddleware`之后：使用会话存储。 |'
- en: '| MessageMiddleware | After `SessionMiddleware`: can use session-based storage.
    |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| MessageMiddleware | 在`SessionMiddleware`之后：可以使用基于会话的存储。 |'
- en: '| FetchFromCacheMiddleware | After any middleware that modifies the `Vary`
    header: that header is used to pick a value for the cache hash-key. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| FetchFromCacheMiddleware | 在修改`Vary`标头的任何中间件之后：该标头用于选择缓存哈希键的值。 |'
- en: '| FlatpageFallbackMiddleware | Should be near the bottom as it''s a last-resort
    type of middleware. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| FlatpageFallbackMiddleware | 应该靠近底部，因为它是一种最后一招的中间件。 |'
- en: '| RedirectFallbackMiddleware | Should be near the bottom as it''s a last-resort
    type of middleware. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| RedirectFallbackMiddleware | 应该靠近底部，因为它是一种最后一招的中间件。 |'
- en: 'Table 17.1: Ordering of middleware classes'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 表17.1：中间件类的排序
- en: What's next?
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: In the next chapter, we will be looking at internationalization in Django.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究Django中的国际化。
