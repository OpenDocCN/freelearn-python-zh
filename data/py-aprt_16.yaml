- en: Chapter 11 – Debugging with PDB
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第11章-使用PDB进行调试
- en: 'Even with a comprehensive automated test suite, we can still get into situations
    where we need a debugger to figure out what’s going on. Fortunately, Python includes
    a powerful debugger with the standard library: PDB. PDB is a command-line debugger,
    and if you’re familiar with tools like GDB then you’ll already have a good idea
    of how to use PDB.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有全面的自动化测试套件，我们仍然可能遇到需要调试器来弄清楚发生了什么的情况。幸运的是，Python包含了一个强大的调试器，即标准库中的PDB。PDB是一个命令行调试器，如果您熟悉像GDB这样的工具，那么您已经对如何使用PDB有了一个很好的了解。
- en: The key advantage of PDB over other Python debuggers is that, being part of
    Python itself, PDB is available pretty much anywhere that Python is, including
    specialized environments where the Python language has been embedded into larger
    systems, such as ESRI’s *ArcGIS* Geographical Information System. That said, it
    can be much more comfortable to use a so-called *graphical* debugger, such as
    the ones included with products such as *Jetbrains*’ *PyCharm* or *Microsoft*’s
    *Python Tools for Visual Studio*. You should feel free to skip this chapter until
    such time that familiarity with PDB becomes more pressing; you won’t be missing
    anything we rely on later in this book or in *The Python Journeyman* or *The Python
    Master*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: PDB相对于其他Python调试器的主要优势在于，作为Python本身的一部分，PDB几乎可以在Python存在的任何地方使用，包括将Python语言嵌入到较大系统中的专用环境，例如ESRI的*ArcGIS*地理信息系统。也就是说，使用所谓的*图形*调试器可能会更加舒适，例如*Jetbrains*的*PyCharm*或*Microsoft*的*Python
    Tools for Visual Studio*中包含的调试器。您应该随时跳过本章，直到熟悉PDB变得更加紧迫；您不会错过我们在本书中或在*Python学徒*或*Python大师*中依赖的任何内容。
- en: PDB is different from many debugging tools in that it’s not really a separate
    program but rather a module just like any other Python module. You can import
    `pdb` into any program and start the debugger using the `set_trace()` function
    call. This function starts the debugger at whatever point you are at in the program’s
    execution.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: PDB与许多调试工具不同，它实际上并不是一个单独的程序，而是像任何其他Python模块一样的模块。您可以将`pdb`导入任何程序，并使用`set_trace()`函数调用启动调试器。此函数在程序执行的任何点开始调试器。
- en: 'For our first look at PDB, let’s use a REPL and start the debugger with `set_trace()`:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们对PDB的第一次尝试，让我们使用REPL并使用`set_trace()`启动调试器：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You’ll see that after you execute `set_trace()` your prompt changes from the
    triple-chevron to `(Pdb)` – this is how you know you’re in the debugger.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您会看到在执行`set_trace()`后，您的提示从三个尖括号变为`(Pdb)`-这是您知道自己在调试器中的方式。
- en: Debugging commands
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试命令
- en: 'The first thing we’ll do is see what commands are available in the debugger
    by typing `help`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是查看调试器中有哪些命令，方法是键入`help`：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This lists a few dozen commands, some of which you’ll use in almost every debugging
    session, and some of which you may never use at all.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这列出了几十个命令，其中一些你几乎在每个调试会话中都会使用，而另一些你可能根本不会使用。
- en: 'You can get specific help on a command by typing `help` followed by the command
    name. For example, to see what `continue` does, type `help continue`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过键入`help`后跟命令名称来获取有关命令的具体帮助。例如，要查看`continue`的功能，请键入`help continue`：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The curious parentheses in the command name tell you that ‘continue’ can be
    activated by typing `c`, `cont`, or the full word `continue`. Knowing the shortcuts
    for common PDB commands can greatly increase your comfort and speed at debugging.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 命令名称中的奇怪括号告诉您，“continue”可以通过键入`c`、`cont`或完整单词`continue`来激活。了解常见PDB命令的快捷方式可以极大地提高您在调试时的舒适度和速度。
- en: Palindrome debugging
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回文调试
- en: Rather than list all of the commonly useful PDB commands, we’re going to instead
    debug a simple function. Our function – `is_palindrome()` – takes in an integer
    and determines if the digits of the integer are a palindrome or not. A palindrome
    is a sequence which is the same both forwards and backwards.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不列出所有常用的PDB命令，而是调试一个简单的函数。我们的函数`is_palindrome()`接受一个整数，并确定整数的数字是否是回文。回文是一个正向和反向都相同的序列。
- en: 'The first thing we’ll do is create a new file, `palindrome.py`, with this code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是创建一个新文件`palindrome.py`，其中包含以下代码：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, our code has three main parts. The first is the `digits()` function
    which converts an integer into a list of digits.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们的代码有三个主要部分。第一个是`digits()`函数，它将整数转换为数字列表。
- en: The second is the `is_palindrome()` function which first calls `digits()` and
    then checks if the resulting list is a palindrome.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是`is_palindrome()`函数，它首先调用`digits()`，然后检查结果列表是否是回文。
- en: The third part is a set of unit tests. We’ll use these tests to drive the program.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第三部分是一组单元测试。我们将使用这些测试来驱动程序。
- en: As you might expect, this being a section on debugging, there’s a bug in this
    code. We’re going to first run the program and notice the bug, and then we’ll
    see how to use PDB to find the bug.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能期望的，由于这是一个关于调试的部分，这段代码中有一个错误。我们将首先运行程序并注意到错误，然后我们将看看如何使用PDB来找到错误。
- en: Bug hunting with PDB
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用PDB进行错误调试
- en: 'So, let’s run the program. We have three tests that we expect to run, and since
    this is a relatively simple program we expect it run very quickly:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们运行程序。我们有三个测试希望运行，由于这是一个相对简单的程序，我们期望它运行得非常快：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Instead of running quickly, we see that this program seems to run forever! And
    if you look at its memory usage, you’ll also see that it grows in size the longer
    it runs. Clearly something is wrong, so let’s use Ctrl-C to kill the program.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到这个程序似乎运行了很长时间！如果您查看其内存使用情况，还会看到它随着运行时间的增加而增加。显然出现了问题，所以让我们使用Ctrl-C来终止程序。
- en: 'Let’s use PDB to try to understand what’s going on here. Since we don’t know
    where our problem might lie, we don’t know where to put a `set_trace()` call.
    So we’re going to instead start the program under the control of PDB using a command-line
    invocation:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用PDB来尝试理解这里发生了什么。由于我们不知道问题可能出在哪里，也不知道在哪里放置`set_trace()`调用，所以我们将使用命令行调用来在PDB的控制下启动程序：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here we’re using the `-m` argument which tells Python to execute the specific
    module – in this case PDB – as a script. The remaining arguments are passed to
    that script. So here we’re telling Python to execute the PDB module as a script,
    and we’re passing the name of our broken file to it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了`-m`参数，告诉Python执行特定的模块 - 在这种情况下是PDB - 作为脚本。其余的参数传递给该脚本。所以在这里，我们告诉Python执行PDB模块作为脚本，并将我们的错误文件的名称传递给它。
- en: What we’re seeing is that we’re immediately taken to a PDB prompt. The arrow
    pointing to `import unittest` is telling us that this is the next statement that
    will be executed when we continue. But where is that statement?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的是，我们立即进入了PDB提示符。指向`import unittest`的箭头告诉我们，这是我们继续执行时将执行的下一条语句。但是那条语句在哪里？
- en: 'Let’s use the `where` command to find out:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`where`命令来找出：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `where` command reports our current call stack, with the most recent frames
    at the bottom, and we can see that PDB has paused execution at the very first
    line of `palindrome.py`. This reinforces an important aspect of Python execution
    which we’ve discussed before: everything is evaluated at runtime. In this case,
    we’ve paused execution right before an `import` statement.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`where`命令报告我们当前的调用堆栈，最近的帧在底部，我们可以看到PDB已经在`palindrome.py`的第一行暂停了执行。这强调了Python执行的一个重要方面，我们之前已经讨论过：一切都在运行时评估。在这种情况下，我们在`import`语句之前暂停了执行。'
- en: 'We can execute this import by running to the next statement using the `next`
    command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`next`命令执行此导入到下一条语句：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We see that this takes us to the `def` call for the `digits()` function. When
    we execute another `next`, we move to the definition of the `is_palindrome()`
    function:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到这将我们带到`digits()`函数的`def`调用。当我们执行另一个`next`时，我们移动到`is_palindrome()`函数的定义：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Finding infinite loops with sampling
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用采样查找无限循环
- en: We could continue using `next` to move through our program’s execution, but
    since we don’t know where the bug lies this might not be a very useful technique.
    Instead, remember that the problem with our program is that it seemed to be running
    forever. This sounds a lot like an infinite loop!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续使用`next`来移动程序的执行，但由于我们不知道错误出在哪里，这可能不是一个非常有用的技术。相反，记住我们程序的问题是似乎一直在运行。这听起来很像一个无限循环！
- en: 'So rather than stepping through our code, we’ll let it execute and then we’ll
    use Ctrl-C to break back into the debugger when we think we might be in that loop:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们不是逐步执行我们的代码，而是让它执行，然后当我们认为我们可能在那个循环中时，我们将使用Ctrl-C中断回到调试器：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After letting the program run for a few seconds, we press Ctrl-C which halts
    the program and shows us that we’re in the the `digits()` function of `palindrome.py`.
    If we want to see the source code at that line, we can use the PDB command `list`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让程序运行几秒钟后，我们按下Ctrl-C，这将停止程序并显示我们在`palindrome.py`的`digits()`函数中。如果我们想在那一行看到源代码，我们可以使用PDB命令`list`：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We see that this is indeed inside a loop, which confirms our suspicion that
    an infinite loop might be involved.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到这确实是在一个循环内部，这证实了我们的怀疑可能涉及无限循环。
- en: 'We can use the `return` command to try to run to the end of the current function.
    If this doesn’t return, we’ll have very strong evidence that this is an infinite
    loop:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`return`命令尝试运行到当前函数的末尾。如果这不返回，我们将有非常强有力的证据表明这是一个无限循环：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We let this run for a few seconds to confirm that we never exit the function,
    and then we press Ctrl-C. Once we get back to a PDB prompt, let’s exit PDB with
    the `quit` command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们让它运行几秒钟，以确认我们从未退出该函数，然后我们按下Ctrl-C。一旦我们回到PDB提示符，让我们使用`quit`命令退出PDB：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Setting explicit breaks
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置显式断点
- en: 'Since we know the problem lies in `digits()`, let’s set an explicit breakpoint
    in there using the `pdb.set_trace()` function mentioned earlier:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道问题出在`digits()`中，让我们使用之前提到的`pdb.set_trace()`函数在那里设置一个显式断点：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Remember that the `set_trace()` function will halt execution and enter the debugger.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`set_trace()`函数将停止执行并进入调试器。
- en: 'So now we can just execute our script without specifying the PDB module:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们可以执行我们的脚本，而不指定PDB模块：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: And we see that we almost immediately go to a PDB prompt with execution halted
    at the beginning of our `digits()` function.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到我们几乎立即进入PDB提示符，执行在我们的`digits()`函数的开始处暂停。
- en: 'To verify that we know where we are, let’s use `where` to see our call stack:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证我们知道我们在哪里，让我们使用`where`来查看我们的调用堆栈：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Remember that the most recent frames are at the end of this listing. After a
    lot of `unittest` functions, we see that we are indeed in the `digits()` function,
    and that it was called by `is_palindrome()`, just as we expected.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，最近的帧在此列表的末尾。经过很多`unittest`函数后，我们看到我们确实在`digits()`函数中，并且它是由`is_palindrome()`调用的，正如我们所预期的那样。
- en: Stepping through execution
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 逐步执行
- en: 'What we want to do now is watch execution and see why we never exit this function’s
    loop. Let’s use `next` to move to the first line of the loop body:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要做的是观察执行，并看看为什么我们从未退出这个函数的循环。让我们使用`next`移动到循环体的第一行：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now lets look at the values of some of our variables and try to decide what
    we expect to happen. We can examine values by using the print command^([34](chap21.xhtml#fn-pdb_commands)):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下一些变量的值，并尝试决定我们期望发生什么。我们可以使用`print`命令来检查值^([34](chap21.xhtml#fn-pdb_commands))：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This looks correct. The `digs` list — which will contain the sequence of digits
    in the end — is empty, and `x` is what we passed in. We expect the `divmod()`
    function to return `123` and `4`, so let’s try that:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来是正确的。`digs`列表 - 最终将包含数字序列 - 是空的，`x`是我们传入的。我们期望`divmod()`函数返回`123`和`4`，所以让我们试试看：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This looks correct: `divmod()` has clipped off the least significant digits
    from our number, and the next line puts that digit into our results list:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来正确：`divmod()`已经从我们的数字中剪掉了最低有效位数字，下一行将该数字放入我们的结果列表中：
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If we look at `digs`, we’ll see that it now contains `mod`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看`digs`，我们会看到它现在包含`mod`：
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The next line will now update `x` so that we can continue clipping digits from
    it:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行现在将更新`x`，以便我们可以继续从中剪切数字：
- en: '[PRE21]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We see that execution goes back up to the while-loop as we expected. Let’s
    look at `x` to make sure it has the right value:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到执行回到了while循环，正如我们所预期的那样。让我们查看`x`，确保它有正确的值：
- en: '[PRE22]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Wait a second! We expect `x` to hold the digits that aren’t already in the results
    list. Instead, it contains *only* the digit in the results list. Clearly we’ve
    made a mistake in updating `x`!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下！我们期望`x`保存的是不在结果列表中的数字。相反，它只包含结果列表中的数字。显然我们在更新`x`时犯了一个错误！
- en: 'If we look at our code, it quickly becomes apparent that we should have assigned
    `div` rather than `mod` to `x`. Let’s exit PDB:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看我们的代码，很快就会发现我们应该将`div`而不是`mod`分配给`x`。让我们退出PDB：
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note that you may have to run `quit` a few times because of how PDB and `unittest`
    interact.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于PDB和`unittest`的交互方式，您可能需要运行几次`quit`。
- en: Fixing the bug
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 修复错误
- en: 'After you’re out of PDB, let’s remove the `set_trace()` call and modify `digits()`
    to fix the problem we found:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当您退出PDB后，让我们删除`set_trace()`调用并修改`digits()`来解决我们发现的问题：
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If we run our program now, we see that we’re passing all tests, and it runs
    very quickly:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行我们的程序，我们会看到我们通过了所有的测试，并且运行非常快：
- en: '[PRE25]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: So that’s a basic PDB session, and it demonstrates some of the core features
    of PDB. PDB has many other commands and features, however, and the best way to
    learn them is to start using PDB and trying out the commands. This palindrome
    program can serve as a good example for learning most of the features of PDB.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是一个基本的PDB会话，并展示了PDB的一些核心特性。然而，PDB还有许多其他命令和特性，学习它们的最佳方法是开始使用PDB并尝试这些命令。这个回文程序可以作为学习PDB大多数特性的一个很好的例子。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: Python’s standard debugger is called PDB.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python的标准调试器称为PDB。
- en: PDB is a standard command-line debugger.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDB是一个标准的命令行调试器。
- en: The `pdb.set_trace()` method can be used to stop program execution and enter
    the debugger.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pdb.set_trace()`方法可用于停止程序执行并进入调试器。'
- en: Your REPL’s prompt will change to (Pdb) when you’re in the debugger.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您处于调试器中时，您的REPL提示将更改为（Pdb）。
- en: You can access PDB’s built-in help system by typing “help”.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过输入“help”来访问PDB的内置帮助系统。
- en: You can use `python -m pdb` followed by a script name to run a program under
    PDB from the start.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用`python -m pdb`后跟脚本名称来从头开始在PDB下运行程序。
- en: PDB’s `where` command shows the current call stack.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDB的`where`命令显示当前的调用堆栈。
- en: PDB’s `next` command lets execution continue to the next line of code.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDB的`next`命令让执行继续到下一行代码。
- en: PDB’s `continue` command lets program execution continue indefinitely, or until
    you stop it with control-c.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDB的`continue`命令让程序执行无限期地继续，或者直到您使用control-c停止它。
- en: PDB’s `list` command shows you the source code at your current location.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDB的`list`命令显示您当前位置的源代码。
- en: PDB’s `return` command resumes execution until the end of the current function.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDB的`return`命令恢复执行，直到当前函数的末尾。
- en: PDB’s `print` command lets you see the values of objects in the debugger.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDB的`print`命令让您在调试器中查看对象的值。
- en: Use `quit` to exit PDB.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`quit`退出PDB。
- en: 'Along the way we found that:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，我们发现：
- en: '`divmod()` calculates the quotient and remainder for a division operation at
    one time.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`divmod()`可以一次计算除法运算的商和余数。'
- en: The `reversed()` function can reverse a sequence.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reversed()`函数可以反转一个序列。'
- en: You can pass `-m` to your Python command to have it run a module as a script.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过在Python命令后传递`-m`来使其作为脚本运行一个模块。
- en: Debugging makes it clear that Python is evaluating everything at run time.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试使得清楚Python在运行时评估一切。
