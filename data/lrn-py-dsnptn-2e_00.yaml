- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Design patterns are among the most powerful methods of building large software
    systems. With an increasing focus on optimized software architecture and design,
    it is important that software architects think about optimizations in object creation,
    code structure, and interaction between objects at the architecture or design
    level. This makes sure that the cost of software maintenance is low, and code
    can be easily reused and is adaptable to change. Moreover, providing frameworks
    for reusability and separation of concerns is key to software development today.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式是构建大型软件系统中最强大的方法之一。随着对优化软件架构和设计的关注度不断提高，软件架构师在设计或架构层面考虑对象创建、代码结构和对象间交互的优化变得尤为重要。这确保了软件维护成本低，代码易于重用且易于适应变化。此外，提供可重用性和关注点分离的框架对于当今的软件开发至关重要。
- en: What this book covers
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖内容
- en: '[Chapter 1](part0015_split_000.html#E9OE1-5ae934a69a004514b92177e2702ed0a9
    "Chapter 1. Introduction to Design Patterns"), *Introduction to Design Patterns*,
    goes through the basics of object-oriented programming and discusses object-oriented
    design principles in detail. This chapter gives a brief introduction to the concept
    of design patterns so that you will be able to appreciate the context and application
    of design patterns in software development.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](part0015_split_000.html#E9OE1-5ae934a69a004514b92177e2702ed0a9 "第1章。设计模式简介"),
    *设计模式简介*，详细介绍了面向对象编程的基础，并讨论了面向对象设计原则。本章简要介绍了设计模式的概念，以便你能够理解设计模式在软件开发中的背景和应用。'
- en: '[Chapter 2](part0022_split_000.html#KVCC1-5ae934a69a004514b92177e2702ed0a9
    "Chapter 2. The Singleton Design Pattern"), *The Singleton Design Pattern*, covers
    one of the simplest and well-known Creational design patterns used in application
    development—the Singleton design pattern. The different ways in which we can create
    a Singleton pattern in Python are also covered in this chapter along with examples.
    This chapter also covers the Monostate (or Borg) design pattern, which is a variant
    of the Singleton design pattern.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](part0022_split_000.html#KVCC1-5ae934a69a004514b92177e2702ed0a9 "第2章。单例设计模式"),
    *单例设计模式*，涵盖了在应用开发中使用的最简单且广为人知的创建型设计模式之一——单例设计模式。本章还介绍了在Python中创建单例模式的不同方法，并附有示例。本章还涵盖了单态（或博格）设计模式，它是单例设计模式的一种变体。'
- en: '[Chapter 3](part0031_split_000.html#TI1E1-5ae934a69a004514b92177e2702ed0a9
    "Chapter 3. The Factory Pattern – Building Factories to Create Objects"), *The
    Factory Pattern – Building Factories to Create Objects*, discusses another creational
    pattern, the Factory pattern. You will also learn about the Factory Method pattern
    and Abstract Factory pattern with a UML diagram, real-world scenarios, and Python
    v3.5 implementations.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](part0031_split_000.html#TI1E1-5ae934a69a004514b92177e2702ed0a9 "第3章。工厂模式
    – 构建工厂以创建对象"), *工厂模式 – 构建工厂以创建对象*，讨论了另一种创建型设计模式，即工厂模式。你还将通过UML图、现实场景和Python 3.5实现学习工厂方法模式和抽象工厂模式。'
- en: '[Chapter 4](part0037_split_000.html#1394Q1-5ae934a69a004514b92177e2702ed0a9
    "Chapter 4. The Façade Pattern – Being Adaptive with Façade"), *The Façade Pattern
    – Being Adaptive with Façade*, shows you another type of design pattern, the Structural
    design pattern. We will be introduced to the concept of Façade and learn how it
    is applicable to software design with the help of the Façade design pattern. You''ll
    also learn its implementation with a sample Python application using a real-world
    scenario.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[第4章](part0037_split_000.html#1394Q1-5ae934a69a004514b92177e2702ed0a9 "第4章。外观模式
    – 使用外观模式进行适应性设计"), *外观模式 – 使用外观模式进行适应性设计*，展示了另一种类型的设计模式，即结构型设计模式。我们将介绍外观的概念，并借助外观设计模式了解其在软件开发中的应用。你还将通过一个使用现实场景的示例Python应用程序学习其实现方式。'
- en: '[Chapter 5](part0044_split_000.html#19UOO1-5ae934a69a004514b92177e2702ed0a9
    "Chapter 5. The Proxy Pattern – Controlling Object Access"), *The Proxy Pattern
    – Controlling Object Access*, deals with the Proxy pattern that falls into the
    category of Structural design patterns. We will be introduced to the Proxy as
    a concept and discuss the design pattern and see how it is used in software application
    development. You''ll also learn about the different variants of the Proxy pattern—Virtual
    Proxy, Smart Proxy, Remote Proxy, and Protective Proxy.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](part0044_split_000.html#19UOO1-5ae934a69a004514b92177e2702ed0a9 "第5章。代理模式
    – 控制对象访问"), *代理模式 – 控制对象访问*，处理的是属于结构设计模式的代理模式。我们将介绍代理作为一个概念，并讨论设计模式以及它在软件开发中的应用。你还将了解代理模式的多种变体——虚拟代理、智能代理、远程代理和保护代理。'
- en: '[Chapter 6](part0052_split_000.html#1HIT81-5ae934a69a004514b92177e2702ed0a9
    "Chapter 6. The Observer Pattern – Keeping Objects in the Know"), *The Observer
    Pattern – Keeping Objects in the Know*, talks about the third type of design pattern—the
    behavioral design pattern. We will be introduced to the Observer design pattern
    with examples. In this chapter, you''ll learn how to implement the Push and Pull
    models of the Observer pattern and the principles of loose coupling. We''ll also
    see how this pattern is critical when it comes to applying it to cloud applications
    and distributed systems.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](part0052_split_000.html#1HIT81-5ae934a69a004514b92177e2702ed0a9 "第6章。观察者模式
    – 保持对象知情"), *观察者模式 – 保持对象知情*，讨论了第三种设计模式——行为设计模式。我们将通过示例介绍观察者设计模式。在本章中，你将学习如何实现观察者模式的推送和拉取模型以及松耦合的原则。我们还将看到当应用于云应用和分布式系统时，这个模式是如何至关重要的。'
- en: '[Chapter 7](part0060_split_000.html#1P71O1-5ae934a69a004514b92177e2702ed0a9
    "Chapter 7. The Command Pattern – Encapsulating Invocation"), *The Command Pattern
    – Encapsulating Invocation*, tells you about the Command design pattern. We will
    be introduced to the Command design pattern and discuss how it is used in software
    application development with a real-world scenario and Python implementation.
    We will also study two main aspects of the Command pattern—an implementation of
    redo/rollback operations and asynchronous task execution.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](part0060_split_000.html#1P71O1-5ae934a69a004514b92177e2702ed0a9 "第7章。命令模式
    – 封装调用"), *命令模式 – 封装调用*，介绍了命令设计模式。我们将介绍命令设计模式，并讨论它在软件开发中的应用，包括实际场景和Python实现。我们还将研究命令模式的两个主要方面——重做/回滚操作的实施和异步任务执行。'
- en: '[Chapter 8](part0066_split_000.html#1UU542-5ae934a69a004514b92177e2702ed0a9
    "Chapter 8. The Template Method Pattern – Encapsulating Algorithm"), *The Template
    Method Pattern – Encapsulating Algorithm*, discusses the Template design pattern.
    Like the Command pattern, the Template pattern falls into the category of Behavioral
    patterns. Here, we discuss the Template method pattern, and you will learn about
    Hooks with an implementation. We''ll also cover the Hollywood principle that helps
    us appreciate this pattern better.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](part0066_split_000.html#1UU542-5ae934a69a004514b92177e2702ed0a9 "第8章。模板方法模式
    – 封装算法"), *模板方法模式 – 封装算法*，讨论了模板设计模式。与命令模式一样，模板模式属于行为模式。在这里，我们讨论模板方法模式，并会通过实现了解钩子。我们还将涵盖好莱坞原则，这有助于我们更好地欣赏这个模式。'
- en: '[Chapter 9](part0073_split_000.html#25JP21-5ae934a69a004514b92177e2702ed0a9
    "Chapter 9. Model-View-Controller – Compound Patterns"), *Model-View-Controller
    – Compound Patterns*, talks about Compound patterns. We will be introduced to
    the Model-View-Controller design pattern and discuss how it is used in software
    application development. MVC is easily one of the most used design patterns; in
    fact, many Python frameworks are based on this principle. You will learn about
    the details of MVC implementation with an example application written in Python
    Tornado (a framework used by Facebook).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[第9章](part0073_split_000.html#25JP21-5ae934a69a004514b92177e2702ed0a9 "第9章。模型-视图-控制器
    – 复合模式"), *模型-视图-控制器 – 复合模式*，讨论了复合模式。我们将介绍模型-视图-控制器设计模式，并讨论它在软件开发中的应用。MVC可能是最常用的设计模式之一；实际上，许多Python框架都是基于这个原则。你将通过一个用Python
    Tornado（Facebook使用的框架）编写的示例应用程序来了解MVC实现的细节。'
- en: '[Chapter 10](part0080_split_000.html#2C9D01-5ae934a69a004514b92177e2702ed0a9
    "Chapter 10. The State Design Pattern"), *The State Design Pattern*, introduces
    you to the State design pattern, which falls into the category of Behavioral patterns
    just like the Command or Template design patterns. We will discuss how it is used
    in software application development.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[第10章](part0080_split_000.html#2C9D01-5ae934a69a004514b92177e2702ed0a9 "第10章。状态设计模式"),
    *状态设计模式*，向你介绍状态设计模式，它属于行为模式类别，就像命令或模板设计模式一样。我们将讨论它在软件应用开发中的应用。'
- en: '[Chapter 11](part0084_split_000.html#2G3F81-5ae934a69a004514b92177e2702ed0a9
    "Chapter 11. AntiPatterns"), *AntiPatterns*, tells you about AntiPatterns—what
    we shouldn''t do as architects or software engineers.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[第11章](part0084_split_000.html#2G3F81-5ae934a69a004514b92177e2702ed0a9 "第11章。反模式"),
    *反模式*，告诉你关于反模式——作为建筑师或软件工程师，我们不应该做什么。'
- en: What you need for this book
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你需要这本书的内容
- en: All you need is Python v3.5, and you can download it from [https://www.python.org/downloads/](https://www.python.org/downloads/).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要Python v3.5，你可以从[https://www.python.org/downloads/](https://www.python.org/downloads/)下载它。
- en: Who this book is for
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书面向的对象
- en: This book is for Python developers and software architects who care about software
    design principles and details of application development aspects in Python. It
    requires a basic understanding of programming concepts and beginner-level Python
    development experience. It will also be helpful for students and teachers in live
    learning environments.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书是为关心软件设计原则和Python应用开发细节的Python开发人员和软件架构师而写的。它需要基本的编程概念理解以及入门级的Python开发经验。对于在实时学习环境中的学生和教师也会有帮助。
- en: Conventions
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规范
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，你会发现许多文本样式，用于区分不同类型的信息。以下是一些这些样式的示例及其含义的解释。
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "The
    `Car` object will have attributes such as `fuel level`, `isSedan`, `speed`, and
    `steering wheel` and `coordinates`."'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码单词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter昵称显示如下：“`Car`对象将具有`fuel
    level`、`isSedan`、`speed`、`steering wheel`和`coordinates`等属性。”
- en: 'A block of code is set as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置为如下：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "In Python, the concept of encapsulation (data and method hiding) is not
    implicit, as it doesn''t have keywords such as **public**, **private**, and **protected**
    (in languages such as C++ or Java) that are required to support encapsulation."'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要词汇**以粗体显示。你在屏幕上看到的单词，例如在菜单或对话框中，在文本中显示如下：“在Python中，封装（数据和方法隐藏）的概念不是隐式的，因为它没有像C++或Java这样的语言中所需的**public**、**private**和**protected**等关键字来支持封装。”'
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear in a box like this.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要注意事项以如下框的形式出现。
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Tips and tricks appear like this.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士和技巧看起来像这样。
- en: Reader feedback
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读者反馈
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or disliked. Reader feedback is important for us as it
    helps us develop titles that you will really get the most out of.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的读者反馈总是受欢迎的。告诉我们你对这本书的看法——你喜欢什么或不喜欢什么。读者反馈对我们来说很重要，因为它帮助我们开发出你真正能从中获得最大价值的标题。
- en: To send us general feedback, simply e-mail `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book's title in the subject of your message.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要给我们发送一般性反馈，只需发送电子邮件至 `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`，并在邮件主题中提及书籍的标题。
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide at [www.packtpub.com/authors](http://www.packtpub.com/authors).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在某个主题上具有专业知识，并且你对撰写或为书籍做出贡献感兴趣，请参阅我们的作者指南[www.packtpub.com/authors](http://www.packtpub.com/authors)。
- en: Customer support
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户支持
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经是Packt书籍的骄傲拥有者，我们有一些事情可以帮助你从你的购买中获得最大价值。
- en: Downloading the example code
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载示例代码
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)下载示例代码文件，这是您购买的所有Packt
    Publishing书籍的账户。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)，并注册以将文件直接通过电子邮件发送给您。
- en: Errata
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 勘误
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you could report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **Errata Submission Form** link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded to our website or added to any list
    of existing errata under the Errata section of that title.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经尽一切努力确保我们内容的准确性，但错误仍然可能发生。如果您在我们的某本书中发现错误——可能是文本或代码中的错误——如果您能向我们报告这一点，我们将不胜感激。通过这样做，您可以避免其他读者的挫败感，并帮助我们改进本书的后续版本。如果您发现任何勘误，请通过访问[http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata)，选择您的书籍，点击**勘误提交表单**链接，并输入您的勘误详情来报告它们。一旦您的勘误得到验证，您的提交将被接受，勘误将被上传到我们的网站或添加到该标题的勘误部分下的现有勘误列表中。
- en: To view the previously submitted errata, go to [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and enter the name of the book in the search field. The required information will
    appear under the **Errata** section.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看之前提交的勘误，请访问[https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)，并在搜索字段中输入书籍名称。所需信息将出现在**勘误**部分下。
- en: Piracy
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 侵权
- en: Piracy of copyrighted material on the Internet is an ongoing problem across
    all media. At Packt, we take the protection of our copyright and licenses very
    seriously. If you come across any illegal copies of our works in any form on the
    Internet, please provide us with the location address or website name immediately
    so that we can pursue a remedy.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上对版权材料的侵权是一个跨所有媒体的持续问题。在Packt，我们非常重视我们版权和许可证的保护。如果您在互联网上发现任何形式的我们作品的非法副本，请立即提供位置地址或网站名称，以便我们可以寻求补救措施。
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请通过 `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>` 与我们联系，并提供疑似侵权材料的链接。
- en: We appreciate your help in protecting our authors and our ability to bring you
    valuable content.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感谢您在保护我们作者和我们为您提供有价值内容的能力方面所提供的帮助。
- en: Questions
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 询问
- en: If you have a problem with any aspect of this book, you can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`,
    and we will do our best to address the problem.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对本书的任何方面有问题，您可以联系我们的 `<[questions@packtpub.com](mailto:questions@packtpub.com)>`，我们将尽力解决问题。
