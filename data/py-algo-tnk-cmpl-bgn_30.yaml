- en: Chapter 20
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第20章
- en: More about Flowcharts with Decision Control Structures
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 关于带有决策控制结构的流程图的更多信息
- en: 20.1 Introduction
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.1 简介
- en: By working through the previous chapters, you've become familiar with all the
    decision control structures. Since flowcharts are an ideal way to learn “Algorithmic
    Thinking” and to help you better understand specific control structures, this
    chapter is dedicated to teaching you how to convert a Python program to a flowchart,
    or a flowchart to a Python program.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过学习前面的章节，你已经熟悉了所有的决策控制结构。由于流程图是学习“算法思维”和帮助你更好地理解特定控制结构的理想方式，本章致力于教你如何将Python程序转换为流程图，或将流程图转换为Python程序。
- en: 20.2 Converting Python Programs to Flowcharts
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.2 将Python程序转换为流程图
- en: To convert a Python program to its corresponding flowchart, you need to recall
    all the decision control structures and their corresponding flowchart fragments.
    They are all summarized here.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Python程序转换为相应的流程图，你需要回忆所有的决策控制结构和它们对应的流程图片段。它们都总结在这里。
- en: The single-alternative decision structure
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 单一选择决策结构
- en: '![Image](img/chapter16-01.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter16-01.png)'
- en: The dual-alternative decision structure
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 双重选择决策结构
- en: '![Image](img/chapter17-01.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter17-01.png)'
- en: The multiple-alternative decision structure
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 多重选择决策结构
- en: '![Image](img/chapter18-01.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter18-01.png)'
- en: Exercise 20.2-1 Designing the Flowchart
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习20.2-1 设计流程图
- en: Design the flowchart that corresponds to the following Python program.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 设计与以下Python程序相对应的流程图。
- en: x = float(input())
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: z = x ** 3
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: z = x ** 3
- en: w = (z - 4) * (x - 3) / 7 + 36
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: w = (z - 4) * (x - 3) / 7 + 36
- en: 'if z >= w and x < z:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 'if z >= w and x < z:'
- en: y = 2 * x
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: y = 2 * x
- en: 'if y > 0:    #This is a nested single-alternative decision structure'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 'if y > 0:    #这是一个嵌套的单一选择决策结构'
- en: y += 1
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y += 1
- en: 'else:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: y = 4 * x
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: y = 4 * x
- en: a += 1
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: a += 1
- en: print(y)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: Solution
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: In this Python program there is a single-alternative decision structure nested
    within a dual-alternative decision structure. Its corresponding flowchart is as
    follows.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个Python程序中，有一个单一选择决策结构嵌套在双重选择决策结构中。其相应的流程图如下。
- en: '![Image](img/chapter20-01.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter20-01.png)'
- en: '![](img/remember.jpg)A flowchart is a very loose method of representing an
    algorithm. Thus, it is quite permissible to write x³ or even to use the Python
    operator ( ** ). Do whatever you wish; everything is permitted, on condition that
    anyone familiar with flowcharts can clearly understand what you are trying to
    say!'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)流程图是表示算法的一种非常宽松的方法。因此，写x³或甚至使用Python运算符（**）都是完全可以接受的。做你想做的任何事情；只要任何熟悉流程图的人都能清楚地理解你想表达的意思即可！'
- en: Exercise 20.2-2 Designing the Flowchart
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习20.2-2 设计流程图
- en: Design the flowchart that corresponds to the following code fragment given in
    general form.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 设计与以下一般形式给出的代码片段相对应的流程图。
- en: 'if Boolean_Expression_A:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 'if Boolean_Expression_A:'
- en: Block of statements A1
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 语句块 A1
- en: 'if Boolean_Expression_B:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 'if Boolean_Expression_B:'
- en: Block of statements B1
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 语句块 B1
- en: Block of statements A2
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 语句块 A2
- en: 'else:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: Block of statements A3
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 语句块 A3
- en: 'if Boolean_Expression_C:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 'if Boolean_Expression_C:'
- en: Block of statements C1
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 语句块 C1
- en: 'else:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: Block of statements C2
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 语句块 C2
- en: Solution
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: For better observation, the initial code fragment is presented again with all
    the nested decision control structures enclosed in rectangles.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地观察，初始代码片段再次呈现，所有嵌套的决策控制结构都包含在矩形内。
- en: 'if Boolean_Expression_A:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'if Boolean_Expression_A:'
- en: Block of statements A1
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 语句块 A1
- en: if Boolean_Expression_B:       [[More…]](more.html#more_20_2_2_1)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: if Boolean_Expression_B:       [[更多…]](more.html#more_20_2_2_1)
- en: Block of statements B1
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 语句块 B1
- en: Block of statements A2
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 语句块 A2
- en: 'else:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: Block of statements A3
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 语句块 A3
- en: if Boolean_Expression_C:       [[More…]](more.html#more_20_2_2_2)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: if Boolean_Expression_C:       [[更多…]](more.html#more_20_2_2_2)
- en: Block of statements C1
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 语句块 C1
- en: 'else:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: Block of statements C2
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 语句块 C2
- en: and the flowchart fragment in general form is shown here.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 并且一般形式的流程图片段如下所示。
- en: '![Image](img/chapter20-02.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter20-02.png)'
- en: Exercise 20.2-3 Designing the Flowchart
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习20.2-3 设计流程图
- en: Design the flowchart that corresponds to the following Python program.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 设计与以下Python程序相对应的流程图。
- en: a = float(input())
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input())
- en: 'if a < 0:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a < 0:'
- en: y = a * 2
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: y = a * 2
- en: 'elif a < 10:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a < 10:'
- en: y = a / 2
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: y = a / 2
- en: 'elif a < 100:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a < 100:'
- en: y = a + 2
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: y = a + 2
- en: 'else:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: b = float(input())
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: b = float(input())
- en: y = a * b
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: y = a * b
- en: 'if y > 0:    #This is a nested dual-alternative decision structure'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 'if y > 0:    #这是一个嵌套的双重选择决策结构'
- en: 'y -= 1   #'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'y -= 1   #'
- en: 'else:        #'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:        #'
- en: 'y += 1   #'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'y += 1   #'
- en: print(y)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: Solution
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: In this Python program, a dual-alternative decision structure is nested within
    a multiple-alternative decision structure.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 Python 程序中，一个双选决策结构嵌套在一个多选决策结构中。
- en: The flowchart is shown here.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 流程图如下所示。
- en: '![Image](img/chapter20-03.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-03.png)'
- en: 20.3 A Mistake That You Will Probably Make!
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.3 你可能会犯的一个错误！
- en: In flowcharts, a very common mistake that novice programmers make is to leave
    some paths unconnected, as shown in the flowchart that follows.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在流程图中，新手程序员常见的错误是留下一些路径未连接，如下面的流程图所示。
- en: '![Image](img/chapter20-04.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-04.png)'
- en: Please keep in mind that every path tries to reach the end of the algorithm,
    thus you cannot leave any of them unconnected.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，每个路径都试图达到算法的末尾，因此你不能让任何一个路径未连接。
- en: On the other hand, try to avoid flowcharts that use many End symbols, as shown
    below, since these algorithms are difficult to read and understand.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，尽量避免使用许多结束符号的流程图，如下所示，因为这些算法难以阅读和理解。
- en: '![Image](img/chapter20-05.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-05.png)'
- en: Let's say that you are in the middle of designing a flowchart (see the flowchart
    that follows), and you want to start closing all of its decision control structures.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在设计一个流程图（见下方的流程图），并且你想要开始关闭其所有的决策控制结构。
- en: '![Image](img/chapter20-06.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-06.png)'
- en: Just remember that the decision control structure that opens last must be the
    first one to close! In this example, the last decision control structure is the
    one that evaluates the expression a < 30\. This is the first one that you need
    to close, as shown here.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 只需记住，最后打开的决策控制结构必须是第一个关闭的！在这个例子中，最后一个决策控制结构是评估表达式 a < 30 的那个。这是你需要首先关闭的，如下所示。
- en: '![Image](img/chapter20-07.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-07.png)'
- en: Next, you need to close the second to last decision control structure as shown
    here.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要关闭第二个到最后一个决策控制结构，如下所示。
- en: '![Image](img/chapter20-08.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-08.png)'
- en: And finally, you need to close the third to last decision control structure
    as shown here.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要关闭第三个到最后一个决策控制结构，如下所示。
- en: '![Image](img/chapter20-09.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-09.png)'
- en: The last flowchart can be rearranged to become like the one shown here.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个流程图可以被重新排列成如下所示的样式。
- en: '![Image](img/chapter20-10.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-10.png)'
- en: 20.4 Converting Flowcharts to Python Programs
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.4 将流程图转换为 Python 程序
- en: This conversion is not always an easy one. There are cases in which the flowchart
    designers follow no particular rules, so the initial flowchart may need some modifications
    before it can be converted into a Python program. An example of one such case
    is as follows.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这种转换并不总是容易的。有些情况下，流程图设计者没有遵循特定的规则，因此初始流程图可能需要一些修改，才能将其转换为 Python 程序。以下是一个这样的例子。
- en: '![Image](img/chapter20-11.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-11.png)'
- en: As you can see, the decision control structures included in this flowchart fragment
    do not match any of the decision control structures that you have already learned.
    Thus, you have only one choice and this is to modify the flowchart by adding extra
    statements or removing existing ones until known decision control structures start
    to appear. Following are some exercises in which the initial flowchart does need
    modification.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个流程图片段中包含的决策控制结构与你已经学过的任何决策控制结构都不匹配。因此，你只有一个选择，那就是通过添加额外的语句或删除现有的语句来修改流程图，直到出现已知的决策控制结构。以下是一些需要修改初始流程图的练习。
- en: Exercise 20.4-1 Writing the Python Program
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 20.4-1 编写 Python 程序
- en: Write the Python program that corresponds to the following flowchart.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 编写与以下流程图相对应的 Python 程序。
- en: .![Image](img/chapter20-12.png)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter20-12.png)
- en: Solution
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: This is quite easy. The only obstacle you must overcome is that the true and
    false paths are not quite in the right positions. You need to use the true path,
    and not the false path, to actually include the statements in the single-alternative
    decision structure.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当简单。你必须克服的唯一障碍是真实和虚假路径并不完全在正确的位置。你需要使用真实路径，而不是虚假路径，来实际上包含单选决策结构中的语句。
- en: It is possible to switch the two paths, but you also need to negate the corresponding
    Boolean expression. The following two flowchart fragments are equivalent.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能交换这两条路径，但你还需要否定相应的布尔表达式。以下两个流程图片段是等价的。
- en: '![Image](img/chapter20-13.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-13.png)'
- en: Thus, the flowchart can be modified and look like this.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，流程图可以修改并看起来像这样。
- en: '![Image](img/chapter20-14.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-14.png)'
- en: and the corresponding Python program is shown here.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的 Python 程序如下所示。
- en: x = float(input())
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: y = 50
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: y = 50
- en: 'if x / 2 <= 10:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x / 2 <= 10:'
- en: x = x / 3
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: x = x / 3
- en: y = x + 4
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: y = x + 4
- en: print(y)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: Exercise 20.4-2 Writing the Python Program
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 20.4-2 编写 Python 程序
- en: Write the Python program that corresponds to the following flowchart.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 编写与以下流程图相对应的 Python 程序。
- en: '![Image](img/chapter20-15.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-15.png)'
- en: Solution
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: In this exercise there is a dual-alternative decision structure nested within
    a single-alternative one. You just need to negate the Boolean expression x ==
    100 and switch the true/false paths. The Python program is shown here.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，有一个双分支决策结构嵌套在单分支决策结构中。你只需要否定布尔表达式 x == 100 并切换真/假路径。Python 程序如下所示。
- en: x = float(input())
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: y = 1
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: y = 1
- en: 'if x != 100:   #This is a single-alternative decision structure'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x != 100:   # 这是一个单分支决策结构'
- en: y = float(input())
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: y = float(input())
- en: 'if x < y:     #This is a nested dual-alternative decision structure'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x < y:     # 这是一个嵌套的双分支决策结构'
- en: x = x - 3
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = x - 3
- en: y = x + 4
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = x + 4
- en: 'else:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: x = x / 3 + 5
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = x / 3 + 5
- en: y = x + 20
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = x + 20
- en: print(x, y)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: print(x, y)
- en: Exercise 20.4-3 Writing the Python Program
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 20.4-3 编写 Python 程序
- en: Write the Python program that corresponds to the following flowchart.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 编写与以下流程图相对应的 Python 程序。
- en: '![Image](img/chapter20-16.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-16.png)'
- en: Solution
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: In this flowchart, the decision control structures do not match any of the decision
    control structures that you learned. Thus, you must modify the flowchart by adding
    extra statements or removing existing ones until known decision control structures
    start to appear!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个流程图中，决策控制结构不匹配你学过的任何决策控制结构。因此，你必须通过添加额外的语句或删除现有的语句来修改流程图，直到出现已知的决策控制结构！
- en: The obstacle you must overcome in this exercise is the decision control structure
    that evaluates the y MOD x ≠ 1 Boolean expression. Note that when flow of execution
    follows the false path, it executes the statement a ← 20 and then the statement
    Write a before it reaches the end of the algorithm. Thus, if you simply add a
    new statement, Write a, inside its false path you can keep the flow of execution
    intact. The following flowchart is equivalent to the initial one.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中你必须克服的障碍是评估 y MOD x ≠ 1 布尔表达式的决策控制结构。注意，当执行流程遵循假路径时，它会执行语句 a ← 20，然后在其到达算法末尾之前执行语句
    Write a。因此，如果你在它的假路径中简单地添加一个新的语句 Write a，你可以保持执行流程的完整性。以下流程图与初始流程图等价。
- en: '![Image](img/chapter20-17.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-17.png)'
- en: Now, the flowchart includes known decision control structures; that is, a dual-alternative
    decision structure nested within another dual-alternative one. The corresponding
    Python program is as follows.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，流程图包括已知的决策控制结构；也就是说，一个双分支决策结构嵌套在另一个双分支决策结构中。相应的 Python 程序如下。
- en: x = int(input())
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input())
- en: y = int(input())
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: y = int(input())
- en: 'if x % y != 1:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x % y != 1:'
- en: 'if y % x != 1:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 'if y % x != 1:'
- en: print("Invalid")
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("无效")
- en: 'else:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: a = 20
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a = 20
- en: print(a)
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(a)
- en: 'else:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: a = 10
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: a = 10
- en: print(a)
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: However, there is something better that you can do! If you negate all Boolean
    expressions and also switch their true/false paths, you can have a multiple-alternative
    decision structure, which is more convenient in Python than nested decision control
    structures. The modified flowchart is shown here.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可以做更好的事情！如果你否定所有的布尔表达式并切换它们的真/假路径，你可以得到一个多分支决策结构，这在 Python 中比嵌套决策控制结构更方便。修改后的流程图如下所示。
- en: '![Image](img/chapter20-18.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-18.png)'
- en: and the corresponding Python program is as follows.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的 Python 程序如下。
- en: x = int(input())
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input())
- en: y = int(input())
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: y = int(input())
- en: 'if x % y == 1:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x % y == 1:'
- en: a = 10
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: a = 10
- en: print(a)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: 'elif y % x == 1:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif y % x == 1:'
- en: a = 20
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: a = 20
- en: print(a)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: 'else:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Invalid")
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: print("无效")
- en: 20.5 Review Exercises
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.5 复习练习
- en: Complete the following exercises.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Design the flowchart that corresponds to the following Python program.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 1) 设计与以下 Python 程序相对应的流程图。
- en: a = int(input())
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: 'if a % 10 == 0:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a % 10 == 0:'
- en: a += 1
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: a += 1
- en: 'print("Message #1")'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("消息 #1")'
- en: 'if a % 3 == 1:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a % 3 == 1:'
- en: a += 5
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: a += 5
- en: 'print("Message #2")'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("消息 #2")'
- en: 'if a % 3 == 2:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a % 3 == 2:'
- en: a += 10
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: a += 10
- en: 'print("Message #3")'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("消息 #3")'
- en: print(a)
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: 2)Design the flowchart that corresponds to the following Python program.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 2) 设计与以下 Python 程序相对应的流程图。
- en: a = int(input())
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: 'if a % 10 == 0:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a % 10 == 0:'
- en: a += 1
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: a += 1
- en: 'print("Message #1")'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("消息 #1")'
- en: 'if a % 3 == 1:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a % 3 == 1:'
- en: a += 5
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: a += 5
- en: 'print("Message #2")'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("消息 #2")'
- en: 'else:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: a += 7
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: a += 7
- en: print(a)
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: 3)Design the flowchart that corresponds to the following Python program.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 3) 设计与以下Python程序相对应的流程图。
- en: a = float(input())
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input())
- en: 'if a < 0:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a < 0:'
- en: y = a * 2
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: y = a * 2
- en: 'if y > 0:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 'if y > 0:'
- en: y +=2
  id: totrans-192
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y +=2
- en: 'elif y == 0:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif y == 0:'
- en: y *= 6
  id: totrans-194
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y *= 6
- en: 'else:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: y /= 7
  id: totrans-196
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y /= 7
- en: 'elif a < 22:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a < 22:'
- en: y = a / 3
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: y = a / 3
- en: 'elif a < 32:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a < 32:'
- en: y = a - 7
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: y = a - 7
- en: 'else:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: b = float(input())
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: b = float(input())
- en: y = a - b
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: y = a - b
- en: print(y)
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: 4)Design the flowchart that corresponds to the following code fragment given
    in general form.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 4) 设计与以下通用形式代码片段相对应的流程图。
- en: 'if Boolean_Expression_A:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 'if Boolean_Expression_A:'
- en: 'if Boolean_Expression_B:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 'if Boolean_Expression_B:'
- en: Block of statements B1
  id: totrans-208
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Block of statements B1
- en: 'else:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: Block of statements B2
  id: totrans-210
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Block of statements B2
- en: Block of statements A1
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Block of statements A1
- en: 'else:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: Block of statements A2
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Block of statements A2
- en: 'if Boolean_Expression_C:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 'if Boolean_Expression_C:'
- en: Block of statements C1
  id: totrans-215
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Block of statements C1
- en: 'elif Boolean_Expression_D:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif Boolean_Expression_D:'
- en: Block of statements D1
  id: totrans-217
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Block of statements D1
- en: 'else:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: Block of statements E1
  id: totrans-219
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Block of statements E1
- en: Block of statements A3
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: Block of statements A3
- en: 5)Design the flowchart that corresponds to the following Python program.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 5) 设计与以下Python程序相对应的流程图。
- en: a = int(input())
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: y = 0
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: y = 0
- en: 'if a == 1:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a == 1:'
- en: y = a * 2
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: y = a * 2
- en: 'elif a == 2:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a == 2:'
- en: y = a - 3
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: y = a - 3
- en: 'elif a == 3:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a == 3:'
- en: y = a + 3
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: y = a + 3
- en: 'if y % 2 == 1:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 'if y % 2 == 1:'
- en: y += 2
  id: totrans-231
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y += 2
- en: 'elif y == 0:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif y == 0:'
- en: y *= 6
  id: totrans-233
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y *= 6
- en: 'else:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: y /= 7
  id: totrans-235
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y /= 7
- en: 'elif a == 4:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a == 4:'
- en: b = float(input())
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: b = float(input())
- en: y = a + b + 2
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: y = a + b + 2
- en: print(y)
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: 6)Write the Python program that corresponds to the following flowchart.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 6) 编写与以下流程图相对应的Python程序。
- en: '![Image](img/chapter20-19.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-19.png)'
- en: 7)Write the Python program that corresponds to the following flowchart.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 7) 编写与以下流程图相对应的Python程序。
- en: '![Image](img/chapter20-20.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-20.png)'
- en: 8)Write the Python program that corresponds to the following flowchart.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 8) 编写与以下流程图相对应的Python程序。
- en: '![Image](img/chapter20-21.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-21.png)'
- en: 9)Write the Python program that corresponds to the following flowchart.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 9) 编写与以下流程图相对应的Python程序。
- en: '![Image](img/chapter20-22.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-22.png)'
- en: 10)Write the Python program that corresponds to the following flowchart.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 10) 编写与以下流程图相对应的Python程序。
- en: '![Image](img/chapter20-23.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-23.png)'
- en: 11)Write the Python program that corresponds to the following flowchart.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 11) 编写与以下流程图相对应的Python程序。
- en: '![Image](img/chapter20-24.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter20-24.png)'
