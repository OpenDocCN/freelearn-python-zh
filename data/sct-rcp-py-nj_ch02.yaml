- en: Utilizing the Python Interpreter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Python解释器
- en: 'In this chapter, we will talk about the Python interpreter, both as an interactive
    tool and for launching Python programs. Specifically, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论Python解释器，无论是作为交互式工具还是用于启动Python程序。具体来说，我们将涵盖：
- en: Launching Python environments
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动Python环境
- en: Utilizing Python command options
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Python命令选项
- en: Working with environment variables
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量的使用
- en: Making scripts executable
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使脚本可执行
- en: Modifying interactive interpreter startup
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改交互式解释器启动
- en: Alternative Python implementations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 替代Python实现
- en: Installing Python on Windows
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上安装Python
- en: Embedding Python with other applications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Python嵌入到其他应用程序中
- en: Using alternative Python shells – IPython
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用替代Python外壳 – IPython
- en: Using alternative Python shells – bpython
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用替代Python外壳 – bpython
- en: Using alternative Python shells – DreamPie
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用替代Python外壳 – DreamPie
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: One of the benefits of the Python programming language is that it is interpreted,
    not compiled. This means that Python code is processed when it is called, rather
    than having to be pre-compiled before use. Because of this, interpreted languages
    generally have an interactive shell, allowing users to test code and otherwise
    have immediate feedback without having to create a separate source code file.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python编程语言的一个优点是它是解释型的，而不是编译型的。这意味着Python代码在调用时被处理，而不是在使用前必须预先编译。正因为如此，解释型语言通常具有交互式外壳，允许用户测试代码，并在不创建单独的源代码文件的情况下立即获得反馈。
- en: Of course, to get the most functionality out of a programming language, having
    permanent code files is necessary. When using an interactive prompt, the code
    lives in RAM; once the interactive session is closed, that code is lost. Thus,
    using an interactive prompt is a great way to quickly test programming ideas,
    but you wouldn't want to run a full-blown program from it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，为了从编程语言中获得最大功能，拥有永久的代码文件是必要的。当使用交互式提示符时，代码存在于RAM中；一旦交互式会话关闭，该代码就会丢失。因此，使用交互式提示符是快速测试编程想法的好方法，但你不希望从它运行一个完整的程序。
- en: This chapter will talk about using the Command Prompt to launch programs, as
    well as Python's functionality using the interactive shell. Special functionality
    with the Windows operating system will be discussed, and we will end by talking
    about alternative Python shells that developers may be interested in trying.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论如何使用命令提示符来启动程序，以及使用交互式外壳的Python功能。我们将讨论Windows操作系统的特殊功能，并在最后讨论开发者可能感兴趣的替代Python外壳。
- en: Launching Python environments
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动Python环境
- en: By default, Python is installed on a computer with the Python interpreter included
    on the system path. This means that the interpreter will monitor the Command Prompt
    for any call to `python`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Python被安装在包含Python解释器且在系统路径上的计算机上。这意味着解释器将监视命令提示符上的任何对`python`的调用。
- en: The most common usage for Python is to run a script. However, it may be desirable
    to launch a specific version of Python for a specific program.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Python最常用的用法是运行脚本。然而，可能需要为特定程序启动Python的特定版本。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'The most basic command to execute a Python program is as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行Python程序的最基本命令如下：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following examples show how to launch specific versions of Python, as needed:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下示例显示了如何根据需要启动Python的特定版本：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Calling `python2` or `python3` opens the latest installed version of the respective
    branch, whereas the other examples show how to invoke a specific version number.
    Regardless of whether a newer version is available from the Python site, only
    versions that are installed on the system are available for use.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`python2`或`python3`将打开相应分支的最新安装版本，而其他示例显示了如何调用特定版本号。无论Python站点是否有新版本可用，只有安装在系统上的版本才可供使用。
- en: This is beneficial, because a developer may have to support legacy software
    and some features of those programs may not be compatible with newer Python versions.
    Thus, being able to call a specific version ensures that the developer is using
    the correct environment.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是有益的，因为开发者可能需要支持旧版软件，而这些程序的一些功能可能不兼容较新的Python版本。因此，能够调用特定版本可以确保开发者正在使用正确的环境。
- en: Utilizing Python command options
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Python命令选项
- en: 'When used non-interactively, the Python interpreter monitors the command line
    and parses all input before the command is actually executed. The following snippet
    shows all the possible options available when calling Python from the command
    line:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当非交互式使用时，Python 解释器会监控命令行，并在实际执行命令之前解析所有输入。以下代码片段显示了从命令行调用 Python 时所有可能的选项：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When working with a **command line interface** (**CLI**), examples of shell
    commands often show square brackets `[]` to indicate optional instructions. In
    this case, there are three groups of optional input that can be provided to the
    `python` command: generic options, interface options, and arguments.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 **命令行界面**（**CLI**）时，shell 命令的示例通常使用方括号 `[]` 来表示可选指令。在这种情况下，可以提供三个可选输入组给
    `python` 命令：通用选项、接口选项和参数。
- en: How to do it...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'A number of options are available for the Python command-line call. To enter
    interactive mode, call Python with no additional options:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 命令行调用有多个选项可用。要进入交互模式，无需附加选项调用 Python：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To execute a regular Python program with no special options, add the program
    name:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行没有特殊选项的常规 Python 程序，请添加程序名称：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To execute a series of Python commands without entering interactive mode or
    calling a file, use `-c`:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在不进入交互模式或调用文件的情况下执行一系列 Python 命令，请使用 `-c`：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To call a Python module as a standalone program, use `-m`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将 Python 模块作为独立程序调用，请使用 `-m`：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Discussion of the other possible options is provided in the following section.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他可能选项的讨论将在以下部分提供。
- en: How it works...
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Python command line accepts interface options, generic options, miscellaneous
    options, and arguments. Each group is optional and most developers don't need
    to bother with anything special most of the time. However, it is good to know
    what is available in case you decide to move beyond the basics.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Python 命令行接受接口选项、通用选项、杂项选项和参数。每组都是可选的，大多数开发者在大多数情况下不需要担心任何特殊选项。然而，了解可用的选项是有好处的，以防你决定超越基础。
- en: Interface options
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口选项
- en: When called with no options, the Python interpreter starts in interactive mode.
    In this mode, the interpreter monitors the command line for Python commands and
    executes them as they are entered.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有选项调用时，Python 解释器以交互模式启动。在这种模式下，解释器监控命令行以查找 Python 命令，并在输入时执行它们。
- en: To exit, an `EOF` (end-of-file) character is entered; in *NIX operating systems,
    this is `Ctl-D` and `Ctl-Z` on Windows (normally, the EOF character is automatically
    provided when reading from a file but, as this is not the case in interactive
    mode, the user must provide it).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出，请输入一个 `EOF`（文件结束）字符；在 *NIX 操作系统中，这是 Windows 上的 `Ctl-D` 和 `Ctl-Z`（通常，在从文件读取时自动提供
    EOF 字符，但在交互式模式下并非如此，用户必须提供它）。
- en: 'The options in this section can be combined with miscellaneous options, which
    are as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的选项可以与以下杂项选项结合使用：
- en: '`-c <"command">`: Entering this option causes Python to execute the entered
    command. The command can be one or more statements, separated by new lines, and
    with normal Python whitespace considerations. The quotations (single or double)
    must be included and surround all the statements that make up the command.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-c <"command">`：选择此选项会导致 Python 执行输入的命令。命令可以是一行或多行语句，由新行分隔，并考虑正常的 Python 空白。引号（单引号或双引号）必须包含，并包围构成命令的所有语句。'
- en: '`-m <module>`: This option causes Python to search `sys.path` for the indicated
    module and then execute its contents as the `__main__` module. Modules executed
    via this method do not require the `.py` extension. In addition, a package of
    modules can be provided; in this case, Python will execute the `<pkg>.__main__`
    as the `__main__` module.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-m <module>`：此选项会导致 Python 在 `sys.path` 中搜索指定的模块，然后将其内容作为 `__main__` 模块执行。通过此方法执行的可执行模块不需要
    `.py` 扩展名。此外，还可以提供模块包；在这种情况下，Python 将执行 `<pkg>.__main__` 作为 `__main__` 模块。'
- en: This option cannot be used with any compiled C modules, including built-in modules,
    as they are not Python code. However, `.pyc` pre-compiled Python files can use
    this option, even if the original source code files are not available, as they
    are pure Python code.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此选项不能与任何编译的 C 模块一起使用，包括内置模块，因为它们不是 Python 代码。然而，`.pyc` 预编译的 Python 文件可以使用此选项，即使原始源代码文件不可用，因为它们是纯
    Python 代码。
- en: When this option is invoked, any code that is below the `if __name__ == "__main__"`
    line will be executed. This is a good place to put self-testing or configuration
    code.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当此选项被调用时，位于 `if __name__ == "__main__"` 行以下的任何代码都将被执行。这是一个放置自我测试或配置代码的好地方。
- en: '`<script>`: This option causes the Python code in the indicated script to be
    executed. The script provided must have a filesystem path (absolute or relative)
    that points to a regular Python file, a directory containing a `__main__.py` file,
    or a zipped file with a `__main__.py` file.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<script>`: 此选项会导致执行指定脚本中的 Python 代码。提供的脚本必须具有文件系统路径（绝对或相对），该路径指向一个常规 Python
    文件、包含 `__main__.py` 文件的目录，或包含 `__main__.py` 文件的压缩文件。'
- en: '`-`: An empty dash option tells the interpreter to read from standard input
    (`sys.stdin`); if the standard input is connected to a Terminal, then normal interactive
    mode is started. While a keyboard is the default input device, `sys.stdin` actually
    accepts any `File` object, so anything from the user''s keyboard to a file can
    be used as the input method. Hence, any sort of file can be used as input, ranging
    from a normal text file to a CSV file.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-`: 一个空短横线选项告诉解释器从标准输入 (`sys.stdin`) 读取；如果标准输入连接到终端，则启动正常交互模式。虽然键盘是默认输入设备，但
    `sys.stdin` 实际上接受任何 `File` 对象，因此用户键盘到文件的内容都可以用作输入方法。因此，任何类型的文件都可以用作输入，从普通文本文件到
    CSV 文件。'
- en: Generic options
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用选项
- en: 'Like most programs, Python has generic options that are common to commercial
    products, and most home-grown software as well:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数程序一样，Python 有一些通用选项，这些选项在商业产品中很常见，在大多数自编软件中也是如此：
- en: '`-?`, `-h`, `--help`: Any one of these options will print out a short description
    of the command and all available command-line options.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-?`, `-h`, `--help`: 任何一个这些选项都会打印出命令的简短描述以及所有可用的命令行选项。'
- en: '`-V`, `-VV`, `--version`: Calling `-V` or `-version` will print the version
    number of the Python interpreter. Using `-VV` puts it into verbose mode (only
    when using Python 3), which provides more information, such as the Python environment,
    for example, Anaconda, or the GCC version used.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-V`, `-VV`, `--version`: 调用 `-V` 或 `-version` 将打印 Python 解释器的版本号。使用 `-VV`
    将其置于详细模式（仅当使用 Python 3 时），这会提供更多信息，例如 Python 环境，例如 Anaconda，或使用的 GCC 版本。'
- en: Miscellaneous options
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 杂项选项
- en: More than a dozen miscellaneous options are available for the `python` command.
    While most options are available in both Python 2 and Python 3, there may be some
    differences between versions. It is best to double-check [https://docs.python.org/2.7/using/cmdline.html](https://docs.python.org/2.7/using/cmdline.html)
    if questions arise (make sure to switch to the version you're using).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`python` 命令提供了十多种杂项选项。虽然大多数选项在 Python 2 和 Python 3 中都可用，但版本之间可能存在一些差异。如果有疑问，最好双查
    [https://docs.python.org/2.7/using/cmdline.html](https://docs.python.org/2.7/using/cmdline.html)（确保切换到您使用的版本）。'
- en: 'Each option is explained here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 每个选项在这里都有解释：
- en: '`-b`, `-bb`: Provide a warning when comparing `bytes/bytesarray` with `str`
    or `bytes` with `int`. A double `b` will provide an error rather than a warning.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-b`, `-bb`: 在比较 `bytes/bytesarray` 与 `str` 或 `bytes` 与 `int` 时提供警告。双 `b` 将提供错误而不是警告。'
- en: '`-B`: Do not write `.pyc` bytecode files when importing source modules. Related
    to `PYTHONDONTWRITEBYTECODE`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-B`: 在导入源模块时不要写入 `.pyc` 字节码文件。与 `PYTHONDONTWRITEBYTECODE` 相关。'
- en: '`-d`: Turn on parser debugging output. Related to `PYTHONDEBUG`.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-d`: 打开解析器调试输出。与 `PYTHONDEBUG` 相关。'
- en: '`-E`: Ignore all `PYTHON*` environment variables, such as `PYTHONDEBUG`, that
    are set.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-E`: 忽略所有已设置的 `PYTHON*` 环境变量，例如 `PYTHONDEBUG`。'
- en: '`-i`: When a script is the first argument to the `python` command, or the `-c`
    option is used, this option causes the Python interpreter to enter interactive
    mode after executing the script or command. This mode change occurs even if `sys.stdin`
    isn''t a Terminal. This is useful when an exception is thrown and a developer
    needs to interactively review the stack trace.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i`: 当脚本作为 `python` 命令的第一个参数，或使用 `-c` 选项时，此选项会导致 Python 解释器在执行脚本或命令后进入交互模式。即使
    `sys.stdin` 不是终端，此模式更改也会发生。当抛出异常且开发者需要交互式审查堆栈跟踪时，这很有用。'
- en: '`-I`: Run the interpreter in isolated mode (automatically implies `-E` and
    `-s` options as well). Isolated mode causes `sys.path` to not capture the script''s
    directory or the user''s site-packages directory. In addition, all `PYTHON*` environment
    variables are ignored. Additional restrictions can be employed to prevent a user
    from injecting malicious code into the Python program.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-I`: 以隔离模式运行解释器（自动隐含 `-E` 和 `-s` 选项）。隔离模式导致 `sys.path` 不捕获脚本目录或用户的 site-packages
    目录。此外，所有 `PYTHON*` 环境变量都被忽略。可以采用额外的限制来防止用户将恶意代码注入 Python 程序。'
- en: '`-J`: Reserved for use by Jython implementation.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-J`: 保留供 Jython 实现使用。'
- en: '`-O`, `-OO`: Turn on basic optimizations. As mentioned in the *Comparing source
    code to byte code *recipe in [Chapter 1](sct-rcp-py-nj_ch01.html),* Working with
    Python Modules*, this removes `assert` statements from the Python code. Related
    to `PYTHONOPTIMIZE`. Using `-OO` also removes docstrings from the code.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-O`, `-OO`: 启用基本优化。如第 1 章 *比较源代码与字节码* 菜谱中所述，*使用 Python 模块*，这会从 Python 代码中删除
    `assert` 语句。与 `PYTHONOPTIMIZE` 相关。使用 `-OO` 还会从代码中删除文档字符串。'
- en: '`-q`: Quiet mode; prevents the Python interpreter from displaying copyright
    and version messages, even in interactive mode. Useful when running programs that
    read data from remote systems and don''t need that information presented.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-q`: 静默模式；防止 Python 解释器在交互模式下显示版权和版本信息。当运行从远程系统读取数据的程序且不需要显示该信息时很有用。'
- en: '`-R`: Irrelevant for Python 3.3 or newer. Turns on hash randomization by salting
    `__hash__()` values for `str`, `bytes`, and `datetime`. They are constant within
    an individual Python process, but are randomized between Python calls. Related
    to `PYTHONHASHSEED`.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-R`: 对于 Python 3.3 或更高版本不相关。通过加盐 `__hash__()` 值来启用哈希随机化，用于 `str`、`bytes` 和
    `datetime`。它们在单个 Python 进程中是常量，但在 Python 调用之间是随机的。与 `PYTHONHASHSEED` 相关。'
- en: '`-s`: Do not add the user''s `site-packages` directory to `sys.path`. This
    would require the user to explicitly provide the path to the desired `site-packages`.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s`: 不要将用户的 `site-packages` 目录添加到 `sys.path`。这需要用户明确提供 `site-packages` 的路径。'
- en: '`-S`: Disables importing the `site` module and site-dependent modifications
    of `sys.path`. Even if `site` is explicitly imported later, these modifications
    are still disabled. A call to `site.main()` is required to allow them.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-S`: 禁用导入 `site` 模块和 `sys.path` 的站点相关修改。即使后来显式导入 `site`，这些修改仍然被禁用。调用 `site.main()`
    是允许这些修改的必要条件。'
- en: '`-u`: Forces unbuffered binary output from the `stdout` and `stderr` streams.
    Does not affect the text I/O layer in interactive mode or block-buffering in non-interactive
    mode. Related to `PYTHONUNBUFFERED`.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-u`: 强制从 `stdout` 和 `stderr` 流输出无缓冲的二进制数据。在交互模式下不影响文本 I/O 层，或在非交互模式下不影响块缓冲。与
    `PYTHONUNBUFFERED` 相关。'
- en: '`-v`, `-vv`: Prints a message every time a module is initialized, indicating
    the location (file or built-in module) that loads it; also gives information about
    module cleanup when exiting. Using `-vv`, a message is printed every time a file
    is checked when searching for a module. Related to `PYTHONVERBOSE`.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-v`, `-vv`: 每次初始化模块时打印一条消息，指示加载它的位置（文件或内置模块）；退出时还提供有关模块清理的信息。使用 `-vv` 时，在搜索模块时每次检查文件都会打印一条消息。与
    `PYTHONVERBOSE` 相关。'
- en: '`-W <arg>`: Controls when warnings are printed; by default, each warning is
    only printed once for each code line that causes the warning. Multiple `-W` options
    may be used, each with a different argument; if a warning matches more than one
    option, the last matching option is returned. Related to `PYTHONWARNINGS`.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-W <arg>`: 控制警告何时打印；默认情况下，每个警告只针对导致警告的每行代码打印一次。可以使用多个 `-W` 选项，每个选项有不同的参数；如果警告与多个选项匹配，则返回最后一个匹配的选项。与
    `PYTHONWARNINGS` 相关。'
- en: 'Available arguments are:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的参数有：
- en: '`ignore`: Ignore all warnings'
  id: totrans-77
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ignore`: 忽略所有警告'
- en: '`default`: Explicitly request the default behavior, that is, print each warning
    once per source code line, regardless of how often the line is processed'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default`: 明确请求默认行为，即无论该行代码被处理多少次，都只针对源代码行打印一次警告'
- en: '`all`: Print a warning every time it occurs; multiple messages may be printed
    if a warning is triggered multiple times by the same line of code, such as within
    a loop'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`all`: 每次出现时打印警告；如果同一行代码多次触发警告，则可能打印多条消息，例如在循环中'
- en: '`module`: Print a warning the first time it occurs in each module'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module`: 在每个模块首次出现时打印警告'
- en: '`once`: Print a warning the first time it occurs in the program'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`once`: 在程序首次出现时打印警告'
- en: '`error`: Instead of printing a warning, an exception will be raised'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error`: 不打印警告，而是引发异常'
- en: 'The `warnings` module can be imported into a Python program to control warnings
    from within the program:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将 `warnings` 模块导入到 Python 程序中，以在程序内部控制警告：
- en: '`-x`: Skips the first source code line. As *NIX scripts normally have something
    such as `#!/usr/bin/python` as the first line to specify where to look for the
    Python environment, this option skips that line. Thus, this allows use of non-Unix
    `#!<command>` formats.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-x`: 跳过第一行源代码。由于 *NIX 脚本通常将 `#!/usr/bin/python` 这样的内容作为第一行来指定 Python 环境的查找位置，此选项将跳过该行。因此，这允许使用非
    Unix 的 `#!<command>` 格式。'
- en: '`-X <value>`: Reserved for implementation-specific options, as well as for
    passing arbitrary values and retrieving them via the `sys._xoptions` dictionary.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-X <value>`: 保留用于实现特定选项，以及传递任意值和通过 `sys._xoptions` 字典检索它们。'
- en: 'Currently, the following values are defined:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前，以下值被定义：
- en: '`faulthandler`: Enables the `faulthandler` module, which dumps Python tracebacks
    when there are program errors.'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`faulthandler`: 启用 `faulthandler` 模块，当程序出现错误时，该模块会输出 Python 调试跟踪。'
- en: '`showrefcount`: Only works when debugging. Outputs the total reference count
    and number of used memory blocks when a program finishes or after each interactive
    session statement.'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showrefcount`: 仅在调试时有效。当程序结束时或在每次交互会话语句之后，输出总引用计数和使用的内存块数量。'
- en: '`tracemalloc`: Starts tracing Python memory allocations via the `tracemalloc` module.
    By default, the most recent frame is stored in the traceback.'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tracemalloc`: 通过 `tracemalloc` 模块开始跟踪 Python 内存分配。默认情况下，最近的帧存储在调试跟踪中。'
- en: '`showalloccount`: When a program finishes, the total count of allocated objects
    for each type is returned. Only works when `COUNT_ALLOCS` is defined when Python
    is built.'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showalloccount`: 当程序结束时，返回每种类型的已分配对象的总数。仅在构建 Python 时定义了 `COUNT_ALLOCS` 时才有效。'
- en: See also...
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见...
- en: More information can be found in the *Python Compilation Tips* recipe from [Chapter
    1](sct-rcp-py-nj_ch01.html), *Working with Python Modules*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息可以在第 1 章 *Python 编译技巧* 的 *使用 Python 模块* 菜谱中找到。[第 1 章](sct-rcp-py-nj_ch01.html)，*使用
    Python 模块*。
- en: Working with environment variables
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用环境变量
- en: Environment variables are part of operating systems and affect system operations.
    Python has Python-specific variables that affect how Python functions, that is,
    the behavior of the Python interpreter. While they are processed before command-line
    options, the command-line switches will override environment variables if there
    is a conflict.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量是操作系统的一部分，影响系统操作。Python 有一些特定的变量，影响 Python 的功能，即 Python 解释器的行为。虽然它们在命令行选项之前处理，但如果存在冲突，命令行开关将覆盖环境变量。
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Environment variables are accessed via Python's `os.environ`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 Python 的 `os.environ` 访问环境变量。
- en: 'Because the `environ` object is a dictionary, you can specify a particular
    variable to view:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于 `environ` 对象是一个字典，您可以指定一个特定的变量来查看：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Adding a new variable is as simple as follows:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加新变量就像以下这样：
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There are a large number of Python-specific environment variables available.
    Some of them are:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有大量的 Python 特定环境变量可用。其中一些如下：
- en: '`PYTHONHOME`: Used to change the location of the standard Python libraries.
    By default, libraries are searched in `/usr/local/lib/<python_version>`.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONHOME`: 用于更改标准 Python 库的位置。默认情况下，库在 `/usr/local/lib/<python_version>`
    中搜索。'
- en: '`PYTHONPATH`: Modifies the default search path for modules files; the format
    is the same as the shell''s `PATH`.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONPATH`: 修改模块文件的默认搜索路径；格式与 shell 的 `PATH` 相同。'
- en: While directories are normally placed in the `PYTHONPATH`, individual entries
    can point to ZIP files that contain pure Python modules. These `zipfile` modules
    can be either source code or compiled Python files.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然目录通常放在 `PYTHONPATH` 中，但单个条目可以指向包含纯 Python 模块的 ZIP 文件。这些 `zipfile` 模块可以是源代码或编译后的
    Python 文件。
- en: '`PYTHONSTARTUP`: Executes Python commands in the indicated startup file before
    the interactive mode prompt appears. The file is executed in the same namespace
    as the interactive prompt, so objects defined or imported in the startup file
    can be used natively, that is, dot-nomenclature is not necessary.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONSTARTUP`: 在交互式模式提示符出现之前，在指定的启动文件中执行 Python 命令。该文件在交互式提示符的相同命名空间中执行，因此启动文件中定义或导入的对象可以原生使用，即不需要点符号命名法。'
- en: Interactive mode prompts can be modified via this file. Specifically, the `sys.ps1`
    (`>>>`) and `sys.ps2` (`...`) prompts used in interactive mode can be changed
    to other symbols.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过此文件修改交互模式提示。具体来说，交互模式中使用的 `sys.ps1` (`>>>`) 和 `sys.ps2` (`...`) 提示可以更改为其他符号。
- en: Also, the `sys.__interactivehook__` hook can be modified via this file. The
    hook configures the `rlcompleter` module, which defines how Python will complete
    valid identifiers and keywords for the GNU `readline` module. In other words,
    the hook is responsible for setting up Python tab-completion for commands and
    setting the default command history file to `~/.python_history`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以通过此文件修改 `sys.__interactivehook__` 钩子。该钩子配置 `rlcompleter` 模块，该模块定义了 Python
    如何为 GNU `readline` 模块完成有效的标识符和关键字。换句话说，钩子负责设置 Python 命令的自动补全，并将默认命令历史文件设置为 `~/.python_history`。
- en: '`PYTHONOPTIMIZE`: If set to a non-empty string, it is the same as using the
    `-O` option. If set to a string number, for example, "2", it is the same as setting
    `-O` multiple times.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONOPTIMIZE`: 如果设置为非空字符串，则等同于使用 `-O` 选项。如果设置为字符串数字，例如 "2"，则等同于多次设置 `-O`。'
- en: '`PYTHONDEBUG`: If set to a non-empty string, it is the same as using the `-d`
    option. If set to a string number, for example, "2", it is the same as setting
    `-d` multiple times.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONDEBUG`: 如果设置为非空字符串，则等同于使用 `-d` 选项。如果设置为字符串数字，例如 "2"，则等同于多次设置 `-d`。'
- en: '`PYTHONINSPECT`: If set to a non-empty string, it is the same as using the
    `-i` option. This environment variable can also be modified using Python code
    by using the `os.environ` command to force inspection mode when the program ends.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONINSPECT`: 如果设置为非空字符串，则等同于使用 `-i` 选项。此环境变量也可以通过使用 Python 代码并使用 `os.environ`
    命令来修改，以在程序结束时强制进入检查模式。'
- en: '`PYTHONUNBUFFERED`: When set to a non-empty string, this acts in the same way
    as the `-u` option.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONUNBUFFERED`: 当设置为非空字符串时，这的作用与 `-u` 选项相同。'
- en: '`PYTHONVERBOSE`: If set to a non-empty string, it is the same as using the
    `-v` option. If set to an integer value, it is the same as setting `-v` multiple
    times.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONVERBOSE`: 如果设置为非空字符串，则等同于使用 `-v` 选项。如果设置为整数值，则等同于多次设置 `-v`。'
- en: '`PYTHONCASEOK`: When set, Python will ignore character case in `import` statements.
    This is only applicable to Windows and macOS.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONCASEOK`: 当设置时，Python 将在 `import` 语句中忽略字符大小写。这仅适用于 Windows 和 macOS。'
- en: '`PYTHONDONTWRITEBYTECODE`: When set to a non-empty string, the interpreter
    will not write bytecode (`.pyc`) files when importing source code files. This
    is the same functionality as using the `-B` option.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONDONTWRITEBYTECODE`: 当设置为非空字符串时，解释器在导入源代码文件时不会写入字节码（`.pyc`）文件。这与使用 `-B`
    选项具有相同的功能。'
- en: '`PYTHONHASHSEED`: When set to `random` or not set at all, a random value is
    used to seed hash digests for `str`, `bytes`, and `datetime` objects. If set to
    an integer value, the integer will be used as the seed value for generating hashes;
    this allows reproducibility of results.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONHASHSEED`: 当设置为 `random` 或未设置时，将使用随机值作为 `str`、`bytes` 和 `datetime` 对象的哈希摘要的种子值。如果设置为整数值，则该整数将用作生成哈希的种子值；这允许结果的重复性。'
- en: '`PYTHONIOENCODING`: If set prior to running the interpreter, encoding is overridden
    for `stdin`, `stdout`, and `stderr`; the syntax used is `encodingname:errorhandler`.
    Both parts of the syntax are optional and have the same meaning as the `str.encode()`
    function.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONIOENCODING`: 如果在运行解释器之前设置，则覆盖 `stdin`、`stdout` 和 `stderr` 的编码；使用的语法是
    `encodingname:errorhandler`。语法两部分都是可选的，其意义与 `str.encode()` 函数相同。'
- en: As of Python version 3.6, encoding specified by this variable is ignored on
    Windows when using the interactive console unless `PYTHONLEGACYWINDOWSSTDIO` is
    set.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 截至 Python 版本 3.6，当使用交互式控制台时，除非设置了 `PYTHONLEGACYWINDOWSSTDIO`，否则此变量指定的编码在 Windows
    上将被忽略。
- en: '`PYTHONNOUSERSITE`: When set, Python will not add the user `site-packages`
    directory to `sys.path`.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONNOUSERSITE`: 当设置时，Python 不会将用户 `site-packages` 目录添加到 `sys.path`。'
- en: '`PYTHONUSERBASE`: Defines the user `base` directory. The `base` directory is
    used to computer the path for `site-packages` and the `Distutils` installation
    paths when calling `python setup.py install -user`.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONUSERBASE`: 定义用户 `base` 目录。当调用 `python setup.py install -user` 时，`base`
    目录用于计算 `site-packages` 和 `Distutils` 安装路径。'
- en: '`PYTHONEXECUTABLE`: When set, `sys.argv[0]` is set to the value passed in rather
    than the value in the C runtime. This variable only works with macOS.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONEXECUTABLE`: 当设置时，`sys.argv[0]` 将设置为传入的值，而不是 C 运行时的值。此变量仅适用于 macOS。'
- en: '`PYTHONWARNINGS`: When set, this is the same as using the `-W` option; setting
    it to a comma-separated string is equivalent to setting multiple `-W`s.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONWARNINGS`：当设置时，这与使用 `-W` 选项相同；将其设置为逗号分隔的字符串相当于设置多个 `-W`。'
- en: '`PYTHONFAULTHANDLER`: When set to a non-empty string, during Python startup
    the `faulthandler.enable()` function is called. This is the same as using the
    `-X faulthandler` option.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONFAULTHANDLER`：当设置为非空字符串时，在 Python 启动时调用 `faulthandler.enable()` 函数。这与使用
    `-X faulthandler` 选项相同。'
- en: '`PYTHONTRACEMALLOC`: When set to a non-empty string, the `tracemalloc` module
    starts to trace Python memory allocations. The variable value specified dictates
    how many frames are stored in the traceback.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONTRACEMALLOC`：当设置为非空字符串时，`tracemalloc` 模块开始跟踪 Python 内存分配。变量值指定了存储在 traceback
    中的帧数。'
- en: '`PYTHONASYNCIODEBUG`: When set to a non-empty string, the `asyncio` module''s
    `debug` mode is enabled.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONASYNCIODEBUG`：当设置为非空字符串时，启用 `asyncio` 模块的 `debug` 模式。'
- en: '`PYTHONMALLOC`: Sets Python''s memory allocators, as well as installing debug
    hooks.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONMALLOC`：设置 Python 的内存分配器，并安装调试钩子。'
- en: 'The memory allocators available include:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的内存分配器包括：
- en: '`malloc`: Uses the C `malloc()` function for all domains'
  id: totrans-128
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`malloc`：对所有域使用 C 的 `malloc()` 函数。'
- en: '`pymalloc`: Uses the `pymalloc` allocator for `PYMEM_DOMAIN_MEM` and `PYMEM_DOMAIN_OBJ`
    domains, but uses C''s `malloc()` function for the `PYMEM_DOMAIN_RAW` domain'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pymalloc`：对 `PYMEM_DOMAIN_MEM` 和 `PYMEM_DOMAIN_OBJ` 域使用 `pymalloc` 分配器，但对于
    `PYMEM_DOMAIN_RAW` 域使用 C 的 `malloc()` 函数。'
- en: 'The debug hooks available include:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的调试钩子包括：
- en: '`debug`: Installs debug hooks on top of the default memory allocator.'
  id: totrans-131
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debug`：在默认内存分配器之上安装调试钩子。'
- en: '`malloc_debug`: Same as `malloc` (previously shown), but also installs debug
    hooks.'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`malloc_debug`：与 `malloc`（之前所示）相同，但还安装了调试钩子。'
- en: '`pymalloc_debug`: Same as `pymalloc` (previously shown), but also installs
    debug hooks.'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pymalloc_debug`：与 `pymalloc`（之前所示）相同，但还安装了调试钩子。'
- en: When Python is compiled in debug mode, `pymalloc_debug` is set and debug hooks
    are used automatically. When compiled in release mode, the normal `pymalloc` mode
    is set. If neither of the `pymalloc` modes is available, regular `malloc` modes
    are used.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 Python 以调试模式编译时，会设置 `pymalloc_debug` 并自动使用调试钩子。当以发布模式编译时，会设置正常的 `pymalloc`
    模式。如果两种 `pymalloc` 模式都不可用，则使用常规的 `malloc` 模式。
- en: '`PYTHONMALLOCSTATS`: When set to a non-empty string, Python prints the statistics
    for the `pymalloc` allocator every time a new `pymalloc` object is created and
    when the program shuts down. If `pymalloc` is not available, then this variable
    is ignored.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONMALLOCSTATS`：当设置为非空字符串时，Python 在每次创建新的 `pymalloc` 对象以及程序关闭时打印 `pymalloc`
    分配器的统计信息。如果 `pymalloc` 不可用，则忽略此变量。'
- en: '`PYTHONLEGACYWINDOWSENCODING`: When set, the default filesystem encoding and
    error mode revert to pre-3.6 version values. If using 3.6 or later, encoding is
    set to `utf-8` and error mode is set to `surrogatepass`. This is only available
    on Windows systems.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONLEGACYWINDOWSENCODING`：当设置时，默认文件系统编码和错误模式将回退到 3.6 版本之前的值。如果使用 3.6 或更高版本，编码设置为
    `utf-8`，错误模式设置为 `surrogatepass`。此选项仅在 Windows 系统上可用。'
- en: '`PYTHONLEGACYWINDOWSTDIO`: When set, the new console reader and writer are
    not used, causing Unicode characters to be encoded based on the active console
    code page rather than UTF-8\. This is only available on Windows systems.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONLEGACYWINDOWSTDIO`：当设置时，不会使用新的控制台读取器和写入器，导致 Unicode 字符根据活动控制台代码页进行编码，而不是
    UTF-8。此选项仅在 Windows 系统上可用。'
- en: '`PYTHONTHREADDEBUG`: When set, Python will print debug information for threading
    (only set when Python is compiled in debug mode).'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONTHREADDEBUG`：当设置时，Python 将打印线程调试信息（仅在 Python 以调试模式编译时设置）。'
- en: '`PYTHONDUMPREFS`: When set, Python will dump objects and reference counts that
    are still alive after shutting down the interpreter (only set when Python is compiled
    in debug mode).'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONDUMPREFS`：当设置时，Python 将在关闭解释器后转储仍然存活的对象和引用计数（仅在 Python 以调试模式编译时设置）。'
- en: Making scripts executable
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使脚本可执行
- en: Normally, executing a Python program requires typing `python <program>.py`.
    However, it is possible to make Python programs self-executing so they don't require
    typing `python` as the calling command.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，执行 Python 程序需要键入 `python <program>.py`。然而，可以使 Python 程序自我执行，这样就不需要键入 `python`
    作为调用命令。
- en: How to do it...
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: On *NIX systems, putting `#!/usr/bin/env python` as the first line of a program
    allows the program to be executable by referencing the location of Python on the
    user's `PATH`. Of course, this assumes Python is on the `PATH`; if not, then the
    program will have to be invoked like normal.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 *NIX 系统上，将 `#!/usr/bin/env python` 作为程序的第一行可以使程序通过引用用户 `PATH` 中 Python 的位置来执行。当然，这假设
    Python 在 `PATH` 上；如果不是，那么程序将像正常一样调用。
- en: After this has been added to the program, the file itself needs to be modified
    to make it executable, that is, `$ chmod +x <program>.py`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将此内容添加到程序后，需要修改文件本身以使其可执行，即 `chmod +x <程序名>.py`。
- en: If you are using a terminal program that displays files and directories in different
    colors depending on their modes, running the command `ls` on the directory where
    the file is located should show it with a different color than non-executable
    files.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是显示文件和目录颜色不同的终端程序，运行位于文件所在目录的 `ls` 命令应该会以不同于不可执行文件的颜色显示它。
- en: To execute the program, simply type `./<program>.py` and the program will execute
    without calling `python` first.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行程序，只需输入 `./<程序名>.py`，程序就会执行，无需先调用 `python`。
- en: There's more...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: As Windows doesn't have an executable mode, these additions to the file are
    only necessary for *NIX compatibility. Windows automatically associates `.py`
    files with `python.exe`, so they are already associated with the Python interpreter.
    In addition, `.pyw` extensions can be used to suppress the opening of the console
    window when a Windows Python program is run.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Windows 没有可执行模式，这些文件添加仅适用于 *NIX 兼容性。Windows 会自动将 `.py` 文件与 `python.exe` 关联，因此它们已经与
    Python 解释器关联。此外，可以使用 `.pyw` 扩展名来抑制在运行 Windows Python 程序时打开控制台窗口。
- en: Modifying interactive interpreter startup
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改交互式解释器启动
- en: As mentioned in the *Working with environment variables *recipe, the `PYTHONSTARTUP`
    environment variable can be set to point to a file that contains commands that
    run prior to the Python interpreter starting up. This functionality is similar
    to `.profile` on *NIX shells.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如在“*使用环境变量*”配方中所述，可以将 `PYTHONSTARTUP` 环境变量设置为指向包含在 Python 解释器启动前运行的命令的文件。此功能与
    *NIX shell 中的 `.profile` 类似。
- en: 'As this startup file is only examined when interactive mode is used, there
    is no need to worry about trying to set configurations for running scripts (though
    later on we will show how to include the startup file in a script). The commands
    in this file are executed within the same namespace as the interactive interpreter,
    so there is no need to qualify functions or other imports with dot-nomenclature.
    This file is also responsible for making changes to interactive prompts: `>>>`
    (`sys.ps1`) and `...` (`sys.ps2`).'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此启动文件仅在交互模式下使用时才会检查，因此无需担心尝试为运行脚本设置配置（尽管稍后我们将展示如何将启动文件包含在脚本中）。此文件中的命令在交互解释器的相同命名空间中执行，因此无需使用点命名法来限定函数或其他导入。此文件还负责更改交互提示：`>>>`
    (`sys.ps1`) 和 `...` (`sys.ps2`)。
- en: How to do it...
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'To read an additional startup file from the current directory, the following
    example command shows how to code it in the global startup file (`read_startup.py`):'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从当前目录读取额外的启动文件，以下示例命令展示了如何在全局启动文件（`read_startup.py`）中编码它：
- en: '[PRE9]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'While the startup file is only looked at for interactive mode, it can be referenced
    within a script. `startup_script.py` shows how to do this:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然启动文件仅在交互模式下查看，但可以在脚本中引用它。"startup_script.py" 展示了如何做到这一点：
- en: '[PRE10]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: See also
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: You can also refer to the *Working with environment variables* recipe in this
    chapter.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以参考本章中的“*使用环境变量*”配方。
- en: Alternative Python implementations
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替代 Python 实现
- en: Python has been ported to a number of other environments, such as Java and .NET.
    This means Python can be used in these environments like normal, but gains access
    to the APIs and code underpinnings for these environments.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Python 已被移植到许多其他环境，如 Java 和 .NET。这意味着 Python 可以在这些环境中像平常一样使用，但可以获得对这些环境的 API
    和代码基础访问权限。
- en: Jython is used for Java integration, IronPython is used for the .NET framework,
    Stackless Python is available for enhanced threading performance, and MicroPython
    is for use with microcontrollers.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Jython 用于 Java 集成，IronPython 用于 .NET 框架，Stackless Python 可用于增强线程性能，MicroPython
    用于微控制器。
- en: How to do it...
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: To use Jython, a Java `.jar` file provides the installation executable. Two
    options are available for installation.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用 Jython，Java 的 `.jar` 文件提供了安装可执行文件。安装有几种选项。
- en: 'Normal GUI installation is available by using the following:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正常的 GUI 安装可以通过以下方式实现：
- en: '[PRE11]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For console-based systems, such as headless servers, the following command
    can be used for installation:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于基于控制台的系统，例如无头服务器，可以使用以下命令进行安装：
- en: '[PRE12]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: IronPython can be installed using a Windows `.msi` installer, via a `.zip` file,
    or downloading source code. Installation with the `.msi` file is like a normal
    Windows software installation; the `.zip` file or source code can be used for
    non-Windows platforms.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IronPython 可以使用 Windows 的 `.msi` 安装程序、`.zip` 文件或下载源代码进行安装。使用 `.msi` 文件安装类似于正常的
    Windows 软件安装；`.zip` 文件或源代码可用于非 Windows 平台。
- en: 'NuGet is the package manager for the .NET framework. IronPython can be installed
    via NuGet just like `pip` packages. Two files are required, as the standard library
    is a separate package. In this case, the NuGet commands are:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NuGet 是 .NET 框架的包管理器。IronPython 可以通过 NuGet 安装，就像 `pip` 包一样。需要两个文件，因为标准库是单独的包。在这种情况下，NuGet
    命令如下：
- en: '[PRE13]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To install Stackless, the method depends on the OS being used. For *NIX systems,
    installation is a standard `configure`/`make`/`install` process:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装 Stackless，方法取决于所使用的操作系统。对于 *NIX 系统，安装是一个标准的 `configure`/`make`/`install`
    过程：
- en: '[PRE14]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: For macOS, it is a little more complicated. Python should be configured with
    the `--enable-framework` option, then use `make frameworkinstall` to complete
    the Stackless installation.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 macOS，情况要复杂一些。Python 应该使用 `--enable-framework` 选项进行配置，然后使用 `make frameworkinstall`
    完成Stackless的安装。
- en: For Windows, it's even more complicated. Microsoft Visual Studio 2015 must be
    installed, along with the `Subversion` version control software. The command `build.bat
    -e` is used to build Stackless Python. There is a lot more in-depth information
    in the documentation, so it is recommended you to review it prior to installing.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 Windows，情况更加复杂。必须安装 Microsoft Visual Studio 2015 以及 `Subversion` 版本控制软件。使用
    `build.bat -e` 命令构建 Stackless Python。文档中还有更多深入的信息，因此建议在安装之前进行审查。
- en: 'MicroPython is available in `.zip `and `.tar.gz` files, as well as via GitHub.
    A number of options and dependencies are required for installation, but the general
    build commands are:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MicroPython 可提供 `.zip` 和 `.tar.gz` 文件，以及通过 GitHub 获取。安装需要一些选项和依赖项，但一般的构建命令如下：
- en: '[PRE15]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: There's more...
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Here we will talk about the various implementations of Python available for
    different platforms and frameworks:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将讨论适用于不同平台和框架的 Python 的各种实现：
- en: '**Jython**: Jython is an implementation of Python for **Java Virtual Machine**
    (**JVM**). Jython takes the normal Python interpreter and modifies it to be able
    to communicate with, and run on, the Java platform. Thus, seamless integration
    is established between the two, allowing use of Java libraries and Java-based
    applications within Python.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jython**：Jython 是针对 Java 虚拟机（**JVM**）的 Python 实现。Jython 将正常的 Python 解释器修改为能够与
    Java 平台通信并在其上运行。因此，在两者之间建立了无缝集成，允许在 Python 中使用 Java 库和基于 Java 的应用程序。'
- en: While the Jython project has endeavored to ensure that all Python modules will
    run on JVM, some differences can be found. The main difference is that C extensions
    will not work in Jython; most Python modules will work without modification in
    Jython. Any C extensions included in the Python code will not port over correctly.
    These C extensions should be rewritten in Java to ensure that they work correctly.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Jython 项目已努力确保所有 Python 模块都能在 JVM 上运行，但仍然可以发现一些差异。主要差异是 C 扩展在 Jython 中无法工作；大多数
    Python 模块在 Jython 中无需修改即可工作。Python 代码中包含的任何 C 扩展都无法正确移植。这些 C 扩展应该用 Java 重新编写，以确保它们能正确工作。
- en: Jython code works well within the Java environment, but using standard CPython
    code (the default Python environment) can have problems. However, Jython code
    normally runs without issues in the CPython environment, unless it utilizes some
    sort of Java integration.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Jython 代码在 Java 环境中运行良好，但使用标准的 CPython 代码（默认的 Python 环境）可能会出现问题。然而，Jython 代码通常在
    CPython 环境中运行没有问题，除非它利用某种形式的 Java 集成。
- en: '**IronPython**: IronPython is Python for Microsoft''s .NET framework. IronPython
    programs can utilize the .NET Framework, as well as regular Python libraries;
    in addition, other .NET languages (such as C#) can implement IronPython code.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IronPython**：IronPython 是针对微软的 .NET 框架的 Python。IronPython 程序可以利用 .NET 框架以及常规的
    Python 库；此外，其他 .NET 语言（如 C#）可以实现 IronPython 代码。'
- en: Because of this .NET functionality, IronPython is a great tool for Windows developers
    or Linux developers using Mono. While normal Python projects can be coded in IronPython,
    it also allows developers to use Python in place of other scripting languages,
    such as VBScript or PowerShell. Microsoft's development environment, Visual Studio,
    has a Python Tools plugin, allowing the full functionality of Visual Studio to
    be used with Python code.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个 .NET 功能，IronPython 对于 Windows 开发者或使用 Mono 的 Linux 开发者来说是一个非常好的工具。虽然可以在
    IronPython 中编写正常的 Python 项目，但它还允许开发者使用 Python 替代其他脚本语言，例如 VBScript 或 PowerShell。微软的开发环境
    Visual Studio 有一个 Python 工具插件，允许使用 Python 代码来完全利用 Visual Studio 的功能。
- en: IronPython is only available for Python 2.7\. It has not been ported to Python
    3 yet. Back-porting Python 3 code using `3to2` is not guaranteed to work due to
    the incompatible nature of Python 3 versus Python 2.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: IronPython 仅适用于 Python 2.7。它尚未移植到 Python 3。使用 `3to2` 将 Python 3 代码回溯到 Python
    2 并不保证能正常工作，因为 Python 3 与 Python 2 不兼容。
- en: '**Stackless Python**: Stackless is an enhanced version of Python, focused on
    improving thread-based programming without the normal complications of regular
    Python threads. Utilizing microthreads, Stackless aims to improve program structure,
    make multi-threaded code more readable, and increase programmer productivity.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stackless Python**：Stackless 是 Python 的一个增强版本，专注于改进基于线程的编程，而不涉及常规 Python
    线程的复杂问题。利用 microthreads，Stackless 旨在改进程序结构，使多线程代码更易于阅读，并提高程序员的生产力。'
- en: These improvements are achieved by avoiding the regular C call stack and utilizing
    a custom stack that is managed by the interpreter. Microthreads handle task execution
    for a program within the same CPU, providing an alternative to traditional asynchronous
    programming methods. They also eliminate the overhead associated with multi-threading
    with single CPU programs, as there is no delay switching between user mode and
    kernel mode.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这些改进是通过避免常规的 C 调用栈并利用由解释器管理的自定义栈来实现的。Microthreads 处理同一 CPU 内程序的任务执行，为传统的异步编程方法提供了一种替代方案。它们还消除了与单
    CPU 程序的多线程相关的开销，因为在用户模式和内核模式之间切换时没有延迟。
- en: Microthreads employ tasklets to represent small tasks within a Python thread
    and they can be used instead of full-featured threads or processes. Bidirectional
    communication between microthreads is handled by channels, and scheduling is configured
    in a round-robin setup, allowing tasklet scheduling either cooperatively or preemptively.
    Finally, serialization is available via Python pickles to allow delayed resumption
    of a microthread.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Microthreads 使用 tasklets 来表示 Python 线程中的小任务，并且可以用作功能齐全的线程或进程的替代品。微线程之间的双向通信由通道处理，调度配置为循环设置，允许以协作或抢占式的方式调度
    tasklet。最后，通过 Python pickles 提供序列化，允许延迟恢复微线程。
- en: One caveat with Stackless is that, even though microthreads improve upon normal
    Python threads, they do not eliminate Global Interpreter Lock. Also, tasklets
    are within a single thread; multi-threading or multi-processing is not being performed.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Stackless 有一点需要注意，尽管 microthreads 改进了常规的 Python 线程，但它们并没有消除全局解释器锁。此外，tasklets
    在单个线程内；没有执行多线程或多进程。
- en: In other words, true parallel processing is not occurring, only cooperative
    multitasking within a single CPU that is shared among the tasklets; this is the
    same functionality as Python multi-threading provides. To utilize parallelism
    across multiple CPUs, an interprocess communication system would have to be configured
    on top of Stackless processes.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，并没有发生真正的并行处理，只是在共享于 tasklets 的单个 CPU 内进行协作式多任务处理；这与 Python 多线程提供的功能相同。要利用跨多个
    CPU 的并行性，需要在 Stackless 进程之上配置一个进程间通信系统。
- en: Finally, because of the changes to the underlying Python source code to implement
    microthreads, Stackless cannot be installed on top of an existing Python installation.
    Thus, a complete Stackless installation needs to be installed, separate from any
    other Python distributions.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，由于对底层 Python 源代码的更改以实现 microthreads，Stackless 无法安装在现有的 Python 安装之上。因此，需要安装一个完整的
    Stackless，与任何其他 Python 发行版分开。
- en: '**MicroPython**: MicroPython is a stripped-down version of Python 3.4, designed
    for use with microcontrollers and embedded systems. While MicroPython includes
    the majority of features within standard Python, a minor number of changes have
    been made to make the language work well with microcontroller devices. A key feature
    of MicroPython is that it can run on just 16 KB RAM, with the source code taking
    up only 256 KB of storage space.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MicroPython**：MicroPython是Python 3.4的简化版本，专为微控制器和嵌入式系统设计使用。虽然MicroPython包含标准Python中的大多数功能，但为了使语言与微控制器设备很好地工作，已经对语言进行了一些修改。MicroPython的一个关键特性是它可以在仅16
    KB RAM上运行，源代码仅占用256 KB的存储空间。'
- en: A unique microcontroller, the pyboard, is available for purchase and is designed
    for use with MicroPython. The pyboard is similar to a Raspberry Pi, except it
    is even smaller. Yet, it has 30 GPIO connections, four LEDs built-in, an accelerometer,
    and many other features. As it is designed for use with MicroPython, you essentially
    get a Python OS that is capable of running on bare metal.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 可购买的独特微控制器pyboard，专为MicroPython设计使用。pyboard类似于Raspberry Pi，但更小。然而，它有30个GPIO连接，内置四个LED，加速度计和许多其他功能。由于它是为MicroPython设计的，你实际上得到的是一个能够在裸机上运行的Python操作系统。
- en: Installing Python on Windows
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装Python
- en: Compared to *NIX computers, which come with Python installed by default, Windows
    OS does not include Python out of the box. However, MSI installer packages are
    available to install Python on a number of Windows-based environments. These installers
    are designed to be used by a single user, rather than all users of a particular
    computer. However, it is possible to configure them during installation to allow
    all system users of a single machine to access Python.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 与默认安装Python的*NIX计算机相比，Windows操作系统出厂时不包含Python。然而，MSI安装程序包可用于在多个基于Windows的环境中安装Python。这些安装程序旨在供单个用户使用，而不是特定计算机的所有用户。但是，在安装过程中可以配置它们，以便单个机器的所有系统用户都可以访问Python。
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: As Python contains platform-specific code for a variety of operating systems,
    to minimize the amount of unneeded code, Python only supports Windows OSes as
    long as they are supported by Microsoft; this includes extended support, so anything
    that has reached end of life is not supported.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Python包含针对各种操作系统的平台特定代码，为了最小化不必要的代码量，Python仅支持由Microsoft支持的Windows操作系统；这包括扩展支持，因此任何达到生命周期的产品都不再受支持。
- en: As such, Windows XP and older cannot install any Python version beyond 3.4\.
    The Python documentation still states that Windows Vista and newer can install
    3.6 and later versions, but Windows Vista reached end of life in 2017, so Python
    support on that OS will no longer continue. In addition, it is important to know
    what type of CPU your computer uses, that is, 32-bit or 64-bit. While 32-bit software
    will run on 64-bit systems, the reverse is not true.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Windows XP及更早版本无法安装3.4版以上的任何Python版本。Python文档仍然声明Windows Vista及更高版本可以安装3.6及更高版本，但Windows
    Vista已于2017年达到生命周期终点，因此该操作系统上的Python支持将不再继续。此外，了解您的计算机使用的是哪种类型的CPU，即32位或64位，也很重要。虽然32位软件可以在64位系统上运行，但反之则不然。
- en: 'Finally, two types of installers are available: offline and web-based. The
    offline installer includes all components necessary for a default installation;
    internet access is only required to install optional features. The web installer
    is a smaller file than the offline version and allows the user to install only
    specific features, downloading them as necessary.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有两种类型的安装程序：离线和基于Web的。离线安装程序包括默认安装所需的所有组件；仅需要互联网访问来安装可选功能。基于Web的安装程序比离线版本文件小，允许用户仅安装特定功能，并在需要时下载它们。
- en: How to do it...
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'When the Windows installer is first ran, two options are available: default
    installation or custom. Select *default* if the following apply:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当首次运行Windows安装程序时，有两个选项：默认安装或自定义。如果以下条件适用，请选择*默认*：
- en: You are installing for just yourself, that is, other users do not require access
    to Python
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是在为自己安装，也就是说，其他用户不需要访问Python
- en: You only need to install the Python standard library, test suite, *pip*, and
    Windows launcher
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您只需要安装Python标准库、测试套件、*pip*和Windows启动器
- en: Python-related shortcuts are only visible to the current user
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Python相关的快捷方式仅对当前用户可见
- en: 'Use a custom installation if you need more control, specifically over:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您需要更多控制，特别是对以下方面：
- en: The features to install
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要安装的功能
- en: The installation location
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装位置
- en: Installing debugging symbols or binaries
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装调试符号或二进制文件
- en: Installing for all system users
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为所有系统用户安装
- en: Pre-compiling the standard library into bytecode
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将标准库预编译成字节码
- en: 'Custom installation will require admin credentials. The GUI is the normal way
    to install Python, using the installation wizard to walk through the process.
    Alternatively, command-line scripts can be used to automate installation on multiple
    machines without user interaction. To use the command-line installation, several
    base options are available when running the installer `.exe`:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自定义安装需要管理员凭据。GUI 是安装 Python 的正常方式，使用安装向导引导过程。或者，可以使用命令行脚本来自动化多台机器的安装，无需用户交互。要使用命令行安装，在运行安装程序
    `.exe` 时，有几种基本选项可用：
- en: '[PRE16]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Using the Windows Python launcher
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Windows Python 启动器
- en: Starting with version 3.3, Python defaults to installing the Python launcher
    when installing the rest of the language. The launcher allows Python scripts or
    the Windows command-line to specify a particular Python version and will locate
    and launch that version.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 3.3 开始，Python 默认在安装语言的其他部分时安装 Python 启动器。启动器允许 Python 脚本或 Windows 命令行指定特定的
    Python 版本，并将定位并启动该版本。
- en: While installed with v3.3 or later, the launcher is compatible with all versions
    of Python. The Python launcher will select the most appropriate version of Python
    for the script and will use per-user Python installations rather than all-user
    installs.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 v3.3 或更高版本安装时，启动器与所有版本的 Python 兼容。Python 启动器将为脚本选择最合适的 Python 版本，并使用每个用户的
    Python 安装而不是所有用户的安装。
- en: How to do it...
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: To check that the launcher is installed, simply type `py` on the Windows Command
    Prompt. If installed, the latest version of Python is launched.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查启动器是否已安装，只需在 Windows 命令提示符中键入 `py`。如果已安装，将启动最新的 Python 版本。
- en: 'If not installed, you will receive the following error:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果未安装，您将收到以下错误：
- en: '[PRE17]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Assuming different versions of Python are installed, to use a different version
    simply indicate it via a `-` option:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设已安装不同版本的 Python，要使用不同的版本，只需通过 `-` 选项指定：
- en: '[PRE18]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If using a Python virtual environment and the Python launcher is executed without
    specifying a Python version explicitly, the launcher will use the virtual environment's
    interpreter rather than the system one. To use the system interpreter, the virtual
    environment must first be deactivated or the system's Python version number must
    be explicitly called.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果使用 Python 虚拟环境并且启动器没有明确指定 Python 版本，启动器将使用虚拟环境的解释器而不是系统解释器。要使用系统解释器，必须首先停用虚拟环境或明确调用系统的
    Python 版本号。
- en: The launcher allows the `shebang` (`#!`) line used in *NIX programs to be used
    with Windows. While a number of variations of the Python environment path are
    available, it is worth noting that one of the most common, `/usr/bin/env python`,
    will be executed in Windows the same way as in *NIX. This means that Windows will
    search the `PATH` for a Python executable before it looks for installed interpreters,
    which is how *NIX systems function.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动器允许在 *NIX 程序中使用的 `shebang` (`#!`) 行在 Windows 中使用。虽然有多种 Python 环境路径的变体可用，但值得注意的是，其中最常见的一种
    `/usr/bin/env python` 在 Windows 中的执行方式与 *NIX 相同。这意味着 Windows 将在查找已安装的解释器之前在 `PATH`
    中搜索 Python 可执行文件，这正是 *NIX 系统的工作方式。
- en: Shebang lines can include Python interpreter options, just as if you were including
    them on the command line. For example, `#! /usr/bin/python -v` will provide the
    Python version being used; this is the same behavior as using `python -v` on the
    command line.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Shebang 行可以包含 Python 解释器选项，就像在命令行中包含它们一样。例如，`#! /usr/bin/python -v` 将提供正在使用的
    Python 版本；这与在命令行中使用 `python -v` 的行为相同。
- en: Embedding Python with other applications
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Python 集成到其他应用程序中
- en: The embedded distribution of Python is a `zipfile` that holds a minimal Python
    interpreter. Its purpose is to provide a Python environment for other programs,
    rather than being used directly by end users.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的嵌入式分发是一个包含最小 Python 解释器的 `zipfile`。其目的是为其他程序提供 Python 环境，而不是直接供最终用户使用。
- en: When extracted from the `zipfile`, the environment is essentially isolated from
    the underlying OS, that is, the Python environment is self-contained. The standard
    library is pre-compiled into bytecode and all Python-related `.exe` and `.dll`
    files are included. However, `pip`, documentation files and the `Tcl/tk` environment
    are not included. Because `Tcl/tk` is not available, the IDLE development environment
    and associated Tkinter files are not available for use.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 当从`zipfile`中提取时，环境基本上与底层操作系统隔离，也就是说，Python环境是自包含的。标准库预先编译成字节码，所有与Python相关的`.exe`和`.dll`文件都包含在内。然而，`pip`、文档文件和`Tcl/tk`环境不包括在内。由于`Tcl/tk`不可用，IDLE开发环境和相关的Tkinter文件也无法使用。
- en: In addition, the Microsoft C runtime is not included with the embedded distribution.
    While it is frequently installed on the user's system from other software or via
    Windows Update, it is ultimately up to the program installer to ensure that it
    is available for Python's use.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Microsoft C运行时不包括在内置的发行版中。虽然它通常由其他软件或通过Windows更新安装在用户的系统上，但最终确保它可供Python使用的责任在于程序安装程序。
- en: Necessary third-party Python packages need to be installed by the program installer,
    in addition to the embedded Python environment. As `pip` is not available, these
    packages should be included with the overall application so they are updated whenever
    the application itself is updated.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 除了内置的Python环境之外，程序安装程序还需要安装必要的第三方Python包。由于`pip`不可用，这些包应包含在整体应用程序中，以便在应用程序本身更新时它们也会更新。
- en: How to do it...
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Write a Python application as normal.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正常编写Python应用程序。
- en: If the use of Python should not be evident to the end user, then a customized
    executable launcher should be coded as well. This executable needs to merely call
    the Python program's `__main__` module via a hard-coded command.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Python的使用不应对最终用户明显，则还应编写一个定制的可执行启动器。这个可执行文件只需通过硬编码的命令调用Python程序的`__main__`模块。
- en: If using a custom launcher, Python packages can be located in any location on
    the filesystem, since the launcher can be coded to indicate the specific search
    path when the program is launched.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用自定义启动器，Python包可以位于文件系统的任何位置，因为启动器可以编码为在程序启动时指示特定的搜索路径。
- en: If the use of Python doesn't need to be so transparent, a simple batch file
    or shortcut file can directly call `python.exe` with the necessary arguments.
    If done this way, the use of Python will be evident, as the program's true name
    won't be used, but will appear to be the Python interpreter itself. Thus, it can
    be difficult for the end user to identify the specific program among other running
    Python processes.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Python的使用不需要如此透明，一个简单的批处理文件或快捷方式文件可以直接调用带有必要参数的`python.exe`。如果这样做，Python的使用将很明显，因为程序的真实名称不会被使用，而看起来像是Python解释器本身。因此，对于最终用户来说，在众多运行的Python进程之间识别特定的程序可能会很困难。
- en: If this method is used, it is recommended to install Python packages as directories
    in the same location as the Python executable. This way the packages will be included
    in `PATH`, as they are subdirectories of the main program.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用这种方法，建议将Python包安装为与Python可执行文件相同位置的目录。这样，这些包将被包含在`PATH`中，因为它们是主程序的子目录。
- en: An alternative use of embedded Python is as a glue language that provides scripting
    capabilities for native code, for example, C++ programs. In this case, the majority
    of the software is written in a non-Python language and will call Python either
    via `python.exe` or through the `python3.dll`. Either way, Python is extracted
    from the embedded distribution into a subdirectory, allowing the Python interpreter
    to be called.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内置Python的另一种用途是作为粘合语言，为原生代码提供脚本功能，例如C++程序。在这种情况下，大多数软件是用非Python语言编写的，并且将通过`python.exe`或通过`python3.dll`调用Python。无论哪种方式，Python都会从内置发行版中提取到子目录中，允许调用Python解释器。
- en: Packages can be installed in any directory on the filesystem, as their paths
    can be provided in the code prior to configuring the Python interpreter.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 包可以安装在任何文件系统目录中，因为它们的路径可以在配置Python解释器之前在代码中提供。
- en: 'Here is an example of very high-level embedding, courtesy of [https://docs.python.org/3/extending/embedding.html](https://docs.python.org/3/extending/embedding.html):'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里是一个非常高级的嵌入示例，由[https://docs.python.org/3/extending/embedding.html](https://docs.python.org/3/extending/embedding.html)提供：
- en: '![](img/5c816b81-21bc-488b-8550-c6d0de380776.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5c816b81-21bc-488b-8550-c6d0de380776.png)'
- en: How it works...
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the preceding C code `(fprintf())` is being used to access Python. As this
    isn''t a C programming book, I won''t provide the in-depth workings of the code,
    but here is a brief rundown of what is happening:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的C代码中 `(fprintf())` 被用来访问Python。由于这不是一本C编程书，我不会提供代码的深入工作原理，但以下是一个简要概述：
- en: Python is being imported into the code as a header file.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python作为头文件被导入到代码中。
- en: The C code is told about the paths to Python runtime libraries.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C代码被告知Python运行时库的路径。
- en: The Python interpreter is initialized.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python解释器被初始化。
- en: A Python script is hard-coded into the C code and processed.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python脚本被硬编码到C代码中并处理。
- en: The Python interpreter is shut down.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python解释器被关闭。
- en: The C program finishes.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C程序完成。
- en: In real practice, the Python program to be executed would be pulled from a file,
    rather than being hard-coded, as it removes the need for the programmer to allocate
    memory and load the file contents.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际实践中，要执行的Python程序会从文件中提取，而不是硬编码，这样可以消除程序员分配内存和加载文件内容的需求。
- en: Using alternative Python shells – IPython
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用替代的Python shell – IPython
- en: While usable, the default shell for the Python interpreter has significant limitations
    when compared to what computers can do nowadays. For starters, the regular Python
    interactive interpreter does not support syntax highlight or auto-indenting, among
    other features.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以使用，但与现在的计算机能力相比，Python解释器的默认shell存在显著的局限性。首先，常规的Python交互式解释器不支持语法高亮或自动缩进，以及其他功能。
- en: 'IPython is one of the most popular replacement interactive shells for Python.
    Some of the features IPython offers compared to vanilla Python include:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: IPython是Python最受欢迎的交互式shell之一。与纯Python相比，IPython提供的一些功能包括：
- en: Comprehensive object introspection, allowing access to docstrings, source code,
    and other objects accessible to the interpreter
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的对象内省，允许访问文档字符串、源代码和其他解释器可访问的对象
- en: Persistent input history
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久输入历史记录
- en: Caching output results
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存输出结果
- en: Extendable tab completion, with support for variables, keywords, functions,
    and filenames
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展的自动补全，支持变量、关键字、函数和文件名
- en: '`magic` commands (denoted by a prepended `%`) to control the environment and
    interact with the OS'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`magic`命令（以前置的`%`表示）用于控制环境和与操作系统交互'
- en: Extensive configuration system
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细的配置系统
- en: Session logging and reload
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话记录和重新加载
- en: Embeddable within Python programs and GUIs
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可嵌入到Python程序和GUI中
- en: Integrated access to debugger and profiler
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成访问调试器和性能分析器
- en: Multi-line editing
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多行编辑
- en: Syntax highlighting
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法高亮
- en: Included with IPython is Jupyter, which provides the ability to create notebooks.
    Notebooks were originally part of IPython, but Jupyter split into a separate project,
    bringing the power of notebooks to other languages. Thus, IPython and Jupyter
    can be used separately from each other, with different frontends and backends
    providing different features as needed.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: IPython包含Jupyter，它提供了创建笔记本的能力。笔记本最初是IPython的一部分，但Jupyter分成了单独的项目，将笔记本的力量带到了其他语言。因此，IPython和Jupyter可以单独使用，不同的前端和后端根据需要提供不同的功能。
- en: Jupyter notebooks provide a browser-based application that can be used for development,
    documentation, and executing code, including displaying the results as text, images,
    or other media types.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter笔记本提供了一个基于浏览器的应用程序，可用于开发、文档编写和执行代码，包括以文本、图像或其他媒体类型显示结果。
- en: 'Jupyter notebooks, as web apps, provide the following features:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter笔记本作为Web应用，提供以下功能：
- en: In-browser editing, including syntax highlighting, automatic indentation, introspection,
    and tab completion
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器中编辑，包括语法高亮、自动缩进、内省和自动补全
- en: In-browser code execution, with the results attached to the source code
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器中执行代码，并将结果附加到源代码
- en: The ability to display rich media, including HTML, LaTeX, PNG, SVG, and so on
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示丰富媒体的能力，包括HTML、LaTeX、PNG、SVG等
- en: Rich text editing using Markdown
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Markdown进行富文本编辑
- en: Mathematical notation using LaTeX
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LaTeX的数学符号
- en: 'Another package that is part of the IPython family is IPython Parallel, also
    known as `ipyparallel`. IPython Parallel supports the following parallel programming
    models:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个属于IPython家族的包是IPython Parallel，也称为`ipyparallel`。IPython Parallel支持以下并行编程模型：
- en: SPMD (single program, multiple data)
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPMD（单程序，多数据）
- en: MPMD (multiple programs, multiple data)
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MPMD（多程序，多数据）
- en: Message passing via MPI
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过MPI进行消息传递
- en: Task farming
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务农场
- en: Data parallel
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据并行
- en: Combinations of the previous
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之前的组合
- en: Custom-defined approaches
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义定义的方法
- en: The main benefit from `ipyparallel` is that it allows parallel-processed applications
    to be developed, tested, and used interactively. Normally, parallelism is performed
    by writing the code and then executing it to see the results; interactive coding
    can greatly increase development speed by showing whether a particular algorithm
    is worth pursuing further without sinking a fair amount of time into writing the
    supporting code.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`ipyparallel` 的主要好处是它允许开发、测试和交互式使用并行处理的应用程序。通常，并行性是通过编写代码然后执行它来查看结果实现的；交互式编码可以通过显示某个特定算法是否值得进一步追求，而无需投入大量时间编写支持代码，从而大大提高开发速度。'
- en: Getting ready
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'IPython can be installed simply via `pip`, but you may have to install `setuptools`
    first:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: IPython 可以通过 `pip` 简单安装，但您可能需要先安装 `setuptools`：
- en: '[PRE19]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: IPython is also available as part of Anaconda, a data science/machine learning
    distribution of Python. In addition to IPython, Anaconda provides a large number
    of packages for science, data analysis, and artificial intelligence work.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: IPython 也可以作为 Anaconda 的一部分使用，Anaconda 是 Python 的数据科学/机器学习发行版。除了 IPython 之外，Anaconda
    还提供大量用于科学、数据分析和人工智能工作的软件包。
- en: 'If you are not using a pre-built environment such as, Anaconda, to incorporate
    Jupyter functionality with IPython, use the following commands:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有使用预构建的环境，如 Anaconda，来将 Jupyter 功能与 IPython 集成，请使用以下命令：
- en: '[PRE20]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`user` specifies the installation is for the current user rather than being
    for global use.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user` 指定安装是为当前用户而不是全局使用。'
- en: '`name` gives a name to the IPython kernel. This is only necessary if multiple
    IPython kernels will be operating at the same time.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` 为 IPython 内核命名。这仅在多个 IPython 内核同时运行时才是必要的。'
- en: '`display-name` is the name for a particular IPython kernel. Most useful when
    multiple kernels are present.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display-name` 是特定 IPython 内核的名称。当存在多个内核时最有用。'
- en: How to do it...
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To start an interactive session with IPython, use the command `ipython`. If
    you have different Python versions installed, you have to specify `ipython3`:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动与 IPython 的交互式会话，请使用命令 `ipython`。如果您安装了不同的 Python 版本，您必须指定 `ipython3`：
- en: '![](img/f0f911b7-2889-467a-9676-1b499b10ec9a.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f0f911b7-2889-467a-9676-1b499b10ec9a.png)'
- en: Notice that the input prompt is `In [N]:`, rather than `>>>`. The `N` number
    refers to the command in IPython history and can be recalled for use again, just
    like the Bash shell's history.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意输入提示符是 `In [N]:`，而不是 `>>>`。数字 `N` 指的是 IPython 历史中的命令，可以再次调用以供使用，就像 Bash shell
    的历史一样。
- en: 'IPython''s interpreter functions just like the vanilla Python interpreter,
    while adding functionality. The static text in these examples doesn''t do the
    environment justice, as syntax highlighting, auto-indenting, and tab completion
    occur in real time. The following is an example of some simple commands within
    the IPython interpreter:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IPython 的解释器功能与标准的 Python 解释器类似，同时增加了功能。这些示例中的静态文本并不能完全展示环境的功能，因为语法高亮、自动缩进和自动补全都是实时发生的。以下是在
    IPython 解释器中的一些简单命令示例：
- en: '![](img/528ef2c8-ce64-4ff9-852b-679ef024bfa6.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/528ef2c8-ce64-4ff9-852b-679ef024bfa6.png)'
- en: Notice in the preceding example that the second command prints the results with
    the `Out[N]:` prompt. Like the `In [N]:` prompt, this line number can be referenced
    again in future code.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意在先前的示例中，第二个命令使用 `Out[N]:` 提示符打印结果。像 `In [N]:` 提示符一样，这个行号可以在未来的代码中再次引用。
- en: 'To learn more about any object, use a question mark: `<object>?`. For more
    information, add two question marks: `<object>??`.'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要了解更多关于任何对象的信息，请使用问号：`<object>?`。要获取更多信息，请添加两个问号：`<object>??`。
- en: Magic functions are a unique part of IPython. They are essentially built-in
    shortcuts to control how IPython operates, as well as providing system-type functions,
    similar to accessing Bash commands.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 魔术函数是 IPython 的独特部分。它们本质上是控制 IPython 操作的内置快捷方式，同时也提供类似系统函数的功能，类似于访问 Bash 命令。
- en: 'Instances of line magic are prefixed with the `%` character and operate like
    Bash commands: an argument is passed to the magic function. Anything on the line
    beyond the function call itself is considered part of the argument.'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行魔术实例以 `%` 字符为前缀，其操作类似于 Bash 命令：将参数传递给魔术函数。函数调用本身之后的行被视为参数的一部分。
- en: Instances of line magic return results, just like a regular function. As such,
    they can be used to assign results to a variable.
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 行魔术实例返回结果，就像一个常规函数一样。因此，它们可以被用来将结果分配给一个变量。
- en: Instances of cell magic are prefixed with `%%`. They operate like line magics
    except that multiple lines can be used as the argument, rather than a single line.
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元魔法实例以`%%`为前缀。它们的行为类似于行魔法，不同之处在于可以使用多行作为参数，而不是单行。
- en: Magic functions are available to affect the IPython shell, interact with code,
    and provide general utility functions.
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 魔法函数可用于影响IPython shell，与代码交互，并提供通用实用函数。
- en: IPython includes a built-in command history log that tracks both input commands
    and their results. The `%history` magic function will display the command history.
    Additional magic functions can be used to interact with the history, such as rerunning
    past commands or copying them into the current session.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IPython包含一个内置的命令历史记录日志，它跟踪输入命令及其结果。`%history`魔法函数将显示命令历史。可以使用其他魔法函数与历史交互，例如重新运行过去的命令或将它们复制到当前会话中。
- en: 'OS shell interaction is available by using the `!` prefix with a command. Thus,
    to utilize the Bash shell in IPython without exiting the session or opening a
    new Terminal, `!<command>` will send a command, such as the `ping` command to
    Bash for execution:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用命令前的`!`前缀，可以进行OS shell交互。因此，要在IPython中利用Bash shell而无需退出会话或打开新终端，可以使用`!<command>`发送命令，例如将`ping`命令发送到Bash执行：
- en: '![](img/11e02324-65cc-4991-9fcf-aecf5ddd9a3d.png)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/11e02324-65cc-4991-9fcf-aecf5ddd9a3d.png)'
- en: IPython supports rich media output when used as a kernel for other frontend
    software. Plotting via `matplotlib` is available; this is particularly useful
    when using Jupyter notebooks to show the code and the resulting plots in a browser
    window.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当IPython作为其他前端软件的内核使用时，它支持丰富的媒体输出。可以通过`matplotlib`进行绘图；这在使用Jupyter笔记本在浏览器窗口中显示代码和结果图时尤其有用。
- en: Support is also available for interactive GUI development. In this instance,
    IPython will wait for input from the GUI toolkit's event loop. To launch this
    functionality, simply use the magic function `%gui <toolkit_name>`. Supported
    GUI frameworks include wxPython, PyQT, PyGTK, and Tk.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还支持交互式GUI开发。在这种情况下，IPython将等待GUI工具包的事件循环输入。要启动此功能，只需使用魔法函数`%gui <toolkit_name>`。支持的GUI框架包括wxPython、PyQT、PyGTK和Tk。
- en: IPython has the ability to run scripts interactively, such as with presentations.
    Adding a few tags to comments embedded within the source code divides the code
    into separate blocks, with each block being run separately. IPython will print
    the block before running the code, and then drop back to the interactive shell,
    allowing interactive use of the results.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IPython具有交互式运行脚本的能力，例如与演示一起使用。在源代码中嵌入的注释中添加一些标签可以将代码分成单独的块，每个块单独运行。IPython将在运行代码之前打印块，然后返回到交互式shell，允许交互式使用结果。
- en: Support for embedding IPython within other programs is available, much like
    the embedded distribution of Python.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持将IPython嵌入到其他程序中，类似于Python的嵌入式发行版。
- en: There's more...
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Starting with IPython version 6.0, Python versions below 3.3 are not supported.
    To use older versions of Python, IPython 5 LTS should be used.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 从IPython版本6.0开始，不支持低于3.3的Python版本。要使用较旧的Python版本，应使用IPython 5 LTS。
- en: Using alternative Python shells – bpython
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用替代Python shell – bpython
- en: 'bpython was created for developers who want more functionality in their Python
    environment without the overhead or learning curve associated with IPython. Hence,
    bpython provides many IDE-style features, but in a lightweight package. Some of
    the features available include:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: bpython是为那些希望在Python环境中获得更多功能但不想承受IPython相关的开销或学习曲线的开发者而创建的。因此，bpython提供了许多IDE风格的特性，但以轻量级的方式提供。一些可用的特性包括：
- en: In-line syntax highlighting
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行内语法高亮
- en: Autocomplete suggestions as you type
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入时自动完成建议
- en: Suggested parameters for function completion
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数补全的建议参数
- en: A code `rewind` feature that pops out the last line and re-evaluates the entire
    source code
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个弹出最后一条语句并重新评估整个源代码的代码`rewind`功能
- en: Pastebin integration, allowing visible code to be sent to the Pastebin site
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pastebin集成，允许可见的代码被发送到Pastebin网站
- en: Getting ready
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To use bpython, in addition to downloading the package itself you will also
    have to ensure that the following packages are installed on your system:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用bpython，除了下载包本身外，还必须确保以下包已安装到您的系统上：
- en: Pygments
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pygments
- en: requests
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: requests
- en: Sphinx (optional; for documentation only)
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sphinx（可选；仅用于文档）
- en: mock (optional; for the test suite only)
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mock（可选；仅用于测试套件）
- en: babel (optional; for internationalization purposes)
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: babel（可选；用于国际化目的）
- en: curtsies
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: curtsies
- en: greenlet
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: greenlet
- en: urwid (optional; for bpython-urwind only)
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: urwid（可选；仅适用于bpython-urwind）
- en: requests[security] for Python versions < 2.7.7
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于Python版本小于2.7.7的`requests[security]`
- en: How to do it...
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a virtual environment for your project, such as:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的项目创建一个虚拟环境，例如：
- en: '[PRE21]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Clone the `bpython` GitHub repository to your development system:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`bpython`GitHub仓库克隆到您的开发系统：
- en: '[PRE22]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Install bypython and dependencies:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装bpython及其依赖项：
- en: '[PRE23]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As an alternative to the pip installations, your *NIX distribution most likely
    has the necessary files. Running apt search `python-<package>` will show if a
    particular package is available. To install a particular package, use the following:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为pip安装的替代方案，您的*NIX发行版很可能包含必要的文件。运行`apt search python-<package>`将显示特定包是否可用。要安装特定包，请使用以下命令：
- en: '[PRE24]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `3` is optional if you are installing for Python 2, but necessary if you
    want the Python 3 version of the package.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在为Python 2安装，则`3`是可选的，但如果您想安装Python 3版本的包，则它是必需的。
- en: bpython can also be installed using `easyinstall`, `pip`, and via normal `apt
    install`.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: bpython也可以使用`easyinstall`、`pip`以及通过正常的`apt install`进行安装。
- en: 'The documentation for bpython is included with the bpython repository. To create
    a local copy of the documentation, ensure that you have sphinx installed and run
    the following:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: bpython的文档包含在bpython仓库中。要创建文档的本地副本，请确保您已安装sphinx，并运行以下命令：
- en: '[PRE25]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Once the documentation is generated, it can be reached by using the URL `doc/sphinx/build/html/index.html`
    in your browser.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦生成文档，您可以通过在浏览器中使用URL `doc/sphinx/build/html/index.html` 来访问它。
- en: A large number of configuration options are available in the `bpython` config
    file (by default, it is located at `~/.config/bpython/config`). Options are available
    to set auto-completion, the color scheme, auto-indentation, keyboard mapping,
    and so on.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`bpython`配置文件中（默认位置为`~/.config/bpython/config`）提供了大量的配置选项。您可以选择设置自动完成、颜色方案、自动缩进、键盘映射等选项。
- en: Theme configuration is available as well; the theme is set in the config file
    via the `color_scheme` option. The theme is used to control syntax highlighting,
    as well as the Python shell itself.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主题配置也是可用的；主题通过配置文件中的`color_scheme`选项设置。主题用于控制语法高亮以及Python外壳本身。
- en: There's more...
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: The current version, at the time of writing, is 0.17\. While it is classified
    as betaware, the author indicates that it works well enough for most day-to-day
    work. Support is available via IRC, a Google Groups mailing list, and various
    social media sites. More information, including screenshots, is available on the
    project's website.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，当前版本为0.17。虽然它被归类为测试版，但作者指出，它对于大多数日常工作来说已经足够好了。支持通过IRC、Google Groups邮件列表和各种社交媒体网站提供。有关截图等信息可在项目网站上找到。
- en: Using alternative Python shells – DreamPie
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用替代Python外壳 – DreamPie
- en: 'Continuing in the vein of improving upon the vanilla Python experience, DreamPie
    provides some new ideas on alternative shells. The functionality provided by DreamPie
    includes:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 继续改进原始Python体验，DreamPie提供了一些关于替代外壳的新想法。DreamPie提供的功能包括：
- en: Splitting the interactive shell into a history box and a code box. Like IPython,
    the history box is a list of previous commands and results, while the code box
    is the current code being edited. The difference with the code box is that it
    functions more like a text editor, allowing you to write as much code as desired
    before executing it.
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将交互式外壳分为历史记录框和代码框。与IPython类似，历史记录框是之前命令和结果列表，而代码框是当前正在编辑的代码。与代码框的区别在于，它更像是一个文本编辑器，允许您在执行之前编写尽可能多的代码。
- en: A copy code only command that copies only the code desired, allowing it to be
    pasted into a file while retaining indentation.
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个仅复制代码的命令，它只复制所需的代码，允许将其粘贴到文件中并保留缩进。
- en: Automatic attribute and filename completion.
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动属性和文件名完成。
- en: Code introspection, displaying function arguments and documentation.
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码内省，显示函数参数和文档。
- en: The session history can be saved to an HTML file for future reference; the HTML
    file can be loaded back into DreamPie for quick reuse.
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话历史可以保存到HTML文件以供将来参考；该HTML文件可以加载回DreamPie以快速重用。
- en: Automatic addition of parentheses and quotes after functions and methods.
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在函数和方法之后自动添加括号和引号。
- en: Matploblib integration for interactive plots.
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matplotlib集成以实现交互式绘图。
- en: Support for nearly all Python implementations, including Jython, IronPython,
    and PyPy.
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几乎支持所有Python实现，包括Jython、IronPython和PyPy。
- en: Cross-platform support.
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨平台支持。
- en: Getting ready
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before installing DreamPie, you will need to install Python 2.7, PyGTK, and
    `pygtksourceview` (the reason for Python 2.7 is that PyGTK has not been rewritten
    for Python 3 support).
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装DreamPie之前，您需要安装Python 2.7、PyGTK和`pygtksourceview`（需要Python 2.7的原因是PyGTK尚未为Python
    3支持重写）。
- en: How to do it...
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The recommended way to download DreamPie is to clone the GitHub repository:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载DreamPie的推荐方法是克隆GitHub仓库：
- en: '[PRE26]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Alternatively, a binary is available for Windows, macOS, and Linux (links can
    be found on the DreamPie website [(http://www.dreampie.org/download.html).](http://www.dreampie.org/download.html)This
    is generally slower to be updated than the GitHub repository and tends to be less
    stable for that reason.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外，Windows、macOS和Linux都有可用的二进制文件（链接可以在DreamPie网站上找到 [(http://www.dreampie.org/download.html)。](http://www.dreampie.org/download.html)
    这通常比GitHub仓库更新得慢，因此稳定性也相对较低。
- en: There's more...
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: I was unable to get DreamPie working using Xubuntu 16.04 and Python 2.7.11;
    an error kept occurring indicating that the GLib Object System `(gobject)` module
    could not be imported. Even when attempting to install the `gobject` package manually,
    I was unable to install DreamPie and validate how useful it is.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 我无法在Xubuntu 16.04和Python 2.7.11上使DreamPie工作；出现了一个错误，表明GLib对象系统`(gobject)`模块无法导入。即使尝试手动安装`gobject`包，我也无法安装DreamPie并验证它的实用性。
- en: The last update to the DreamPie website was 2012, and there is no documentation
    on how to use the software on either the website or the GitHub site. According
    to the GitHub site, it was last updated in November, 2017, so it appears that
    the GitHub site is now the main location for the project.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: DreamPie网站的最后一次更新是在2012年，网站和GitHub网站上都没有关于如何使用该软件的文档。根据GitHub网站的信息，它最后一次更新是在2017年11月，因此看起来GitHub网站现在是该项目的主要位置。
