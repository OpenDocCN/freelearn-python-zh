- en: Chapter 14. Deploying Django Projects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。部署Django项目
- en: 'So, you have done a lot of work on your web application and now it is time
    to make it live. To make sure that the transition from development to production
    goes smoothly, there are a number of changes that must be made to the application
    before it goes live. This chapter covers the changes to be made to the following
    topics to help make the launch of your web application successful:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您在Web应用程序上做了很多工作，现在是时候让它上线了。为了确保从开发到生产的过渡顺利进行，必须对应用程序进行一些更改。本章涵盖了以下主题的更改，以帮助您成功启动Web应用程序：
- en: The production web server
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产Web服务器
- en: The production database
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产数据库
- en: Turning off the debug mode
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭调试模式
- en: Changing configuration variables
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改配置变量
- en: Setting error pages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置错误页面
- en: Django on cloud
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云上的Django
- en: The production web server
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产Web服务器
- en: We have been using the development web server that comes with Django throughout
    this book. While this server is perfect for the development process, it's definitely
    not intended to be a production web server, as it wasn't developed with security
    or performance in mind. Therefore, it is certainly not suitable for production.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们一直在使用Django自带的开发Web服务器。虽然这个服务器非常适合开发过程，但绝对不适合作为生产Web服务器，因为它没有考虑安全性或性能。因此，它绝对不适合生产环境。
- en: There are several options to choose from when it comes to the web server, but
    **Apache** is by far, the most popular choice and the Django development team
    actually recommends it. The details of how to set up Django with Apache depends
    on your hosting solution. Some hosting plans offer a preconfigured Django hosting
    solution, where you only have to copy your project files to the server, whereas
    other hosting plans give you the freedom to configure everything yourself.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择Web服务器时有几个选项可供选择，但**Apache**是迄今为止最受欢迎的选择，Django开发团队实际上推荐使用它。如何使用Apache设置Django取决于您的托管解决方案。一些托管计划提供预配置的Django托管解决方案，您只需将项目文件复制到服务器上，而其他托管计划则允许您自行配置一切。
- en: The details of how to set up Apache varies depending on a number of factors
    that are beyond the scope of this book. If you want to configure Apache yourself,
    consult the Django documentation online at [https://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/apache-auth/](https://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/apache-auth/)
    for detailed instructions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如何设置Apache的详细信息因多种因素而异，超出了本书的范围。如果您想自己配置Apache，请查阅Django在线文档[https://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/apache-auth/](https://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/apache-auth/)获取详细说明。
- en: In this section, we are going to deploy our Django application on Apache and
    the `mod_wsgi` module. So, let's install these two first.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在Apache和`mod_wsgi`模块上部署我们的Django应用程序。因此，让我们首先安装这两个。
- en: 'Run the following command to install Apache:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令安装Apache：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `mod_wsgi` parameter is an Apache HTTP server module that provides a **Web
    Server Gateway Interface** (**WSGI**) compliant interface to host web applications
    based on Python 2.3+ under Apache.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod_wsgi`参数是Apache HTTP服务器模块，提供符合**Web服务器网关接口**（**WSGI**）标准的接口，用于在Apache下托管基于Python
    2.3+的Web应用程序。'
- en: 'Run the following command to install the `mod_wsgi` module:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令安装`mod_wsgi`模块：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Django with Apache and the `mod_wsgi` module is the most popular way of deploying
    Django in production.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Apache和`mod_wsgi`模块的Django是在生产中部署Django的最流行方式。
- en: In most of the cases, the development machine and the deployment machine are
    different. Thus, it is advised that you copy the project folder to the `/var/www/html/`
    folder, so that your deployment files have limited permission and access.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，开发机器和部署机器是不同的。因此，建议您将项目文件夹复制到`/var/www/html/`文件夹，以便您的部署文件具有有限的权限和访问权限。
- en: 'As you have installed the Apache server, try visiting `localhost` in your browser,
    that is, `127.0.0.1`. By doing this, you should see the default Apache page, as
    shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Apache服务器后，请尝试在浏览器中访问`localhost`，即`127.0.0.1`。通过这样做，您应该会看到默认的Apache页面，如下截图所示：
- en: '![The production web server](img/image00334.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![生产Web服务器](img/image00334.jpeg)'
- en: We have to make the Apache server our Django project. For that, we need to create
    the `configuration` file for Apache.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须将Apache服务器设置为我们的Django项目。为此，我们需要为Apache创建`configuration`文件。
- en: 'To do so, create a `mytweets.conf` file in the `sites-available` folder that
    you can find by navigating to `/etc/apache2/sites-available` with the following
    content:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，在`/etc/apache2/sites-available`导航到的`sites-available`文件夹中创建一个`mytweets.conf`文件，内容如下：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s take a look at the following term list that describes the various parameters
    used in the preceding code snippet:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看以下术语列表，描述了前面代码片段中使用的各种参数：
- en: '`ServerAdmin`: This e-mail address will be shown if you have not configured
    your custom error page, which will tell users to contact this e-mail address.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ServerAdmin`：如果您没有配置自定义错误页面，将显示此电子邮件地址，该页面将告诉用户联系此电子邮件地址。'
- en: '`ServerName`: This is the name of the server you would like to run your project
    on.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ServerName`：这是您想在其上运行项目的服务器的名称。'
- en: '`ServerAlias`: This is the name of the site you want to run the project on.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ServerAlias`：这是您要在项目上运行的站点的名称。'
- en: '`WSGIScriptAlias`: This is the location of the `wsgi.py` file of the project,
    which was already there when we ran the first command to create the Django project.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WSGIScriptAlias`：这是项目的`wsgi.py`文件的位置，在我们运行第一个命令创建Django项目时已经存在。'
- en: '`Alias`: This is the path alias, the actual location of the folder on the disk
    is mapped like a project directory.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Alias`：这是路径别名，磁盘上的文件夹的实际位置被映射为项目目录。'
- en: Now, we need to enable this site configuration with the `a2ensite` command,
    and to disable an existing site configuration, you can use the `a2dissite` command.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要使用`a2ensite`命令启用此站点配置，并使用`a2dissite`命令禁用现有站点配置。
- en: 'Let''s enable the `mytweets.conf` file for Apache by using the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下命令为Apache启用`mytweets.conf`文件：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will enable our `mytweets.conf` file. You can also disable the `default
    000-default.conf` configuration by using the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启用我们的`mytweets.conf`文件。你也可以使用以下命令禁用`default 000-default.conf`配置：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Verify the file permission of the static files of the project. Don't forget
    to write an entry in allowed host in the `settings.py` file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 验证项目静态文件的文件权限。不要忘记在`settings.py`文件中允许主机的条目。
- en: 'Now, restart the server:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重新启动服务器：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That's all, Django now runs on the deployment mode, that is, it is now production
    ready.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，Django现在运行在部署模式下，也就是说，它现在已经准备好投入生产。
- en: The production database
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产数据库
- en: So far, we have been using SQLite as our database engine. It is simple and does
    not require a resident server in memory. SQLite will perform fine in the production
    mode for small websites. However, it is highly recommended that you switch to
    a database engine that uses the client-server model in production. As we saw in
    an earlier chapter, Django supports several database engines, including all the
    popular ones. The Django team recommends you to use PostgreSQL, but MySQL should
    be fine as well. Regardless of your choice, you only have to change the database
    options in the `settings.py` file to switch to a different database engine.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用SQLite作为我们的数据库引擎。它简单，不需要常驻内存中的服务器。对于小型网站，SQLite在生产模式下表现良好。然而，强烈建议您在生产中切换到使用客户端-服务器模型的数据库引擎。正如我们在前面的章节中看到的，Django支持多种数据库引擎，包括所有流行的数据库引擎。Django团队建议您使用PostgreSQL，但MySQL也应该可以。无论你的选择是什么，你只需要在`settings.py`文件中更改数据库选项，就可以切换到不同的数据库引擎。
- en: If you want to use MySQL, create a database, username, and password for Django.
    Then, change the `DATABASE_*` variables accordingly. Everything else should remain
    the same. This is the whole point of the Django database layer.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用MySQL，为Django创建一个数据库、用户名和密码。然后，相应地更改`DATABASE_*`变量。其他一切都应该保持不变。这就是Django数据库层的全部意义。
- en: Turning off the debug mode
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关闭调试模式
- en: Whenever an error occurs during development, Django presents a detailed error
    page with a lot of useful information. However, when the application goes into
    production, you don't want your users to see such information. Apart from confusing
    your users, you risk exposing your website to security problems if you let strangers
    see such information.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中发生错误时，Django会呈现一个详细的错误页面，提供大量有用的信息。然而，当应用进入生产阶段时，你不希望用户看到这样的信息。除了让用户感到困惑，如果让陌生人看到这样的信息，你还会面临网站安全问题的风险。
- en: In the beginning when we used the `django-admin.py mytweets` command, which
    created all the basic configuration for the project for which we used the `debug=True`
    parameter in the `settings.py` file when this mode was `True`. The following extra
    work is done by Django to help you debug the problem faster. The memory usage
    of Django is more, as all the queries are stored as `django.db.connection.queries`
    in the database.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`django-admin.py mytweets`命令时，它为项目创建了所有基本配置，我们在`settings.py`文件中使用了`debug=True`参数，当这个模式为`True`时。Django会做一些额外的工作来帮助你更快地调试问题。Django的内存使用更多，因为所有的查询都存储在数据库中的`django.db.connection.queries`中。
- en: For every error message, a proper stack trace of the message gets displayed,
    which is not recommended when you run in the production mode, as this may contain
    sensitive information and may weaken the security of the entire web application.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个错误消息，都会显示消息的适当堆栈跟踪，这在生产模式下是不推荐的，因为这可能包含敏感信息，可能会削弱整个Web应用程序的安全性。
- en: 'Turning off the debug mode is pretty easy. Open the `settings.py` file and
    change the `DEBUG` variable to `False`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭调试模式非常简单。打开`settings.py`文件，将`DEBUG`变量更改为`False`：
- en: '`DEBUG = False`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEBUG = False`'
- en: Disabling debug information carries an additional benefit; you improve the performance
    of the website because Django doesn't have to keep track of the debug data in
    order to display it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用调试信息还有一个额外的好处；你可以提高网站的性能，因为Django不必跟踪调试数据以显示它。
- en: Changing configuration variables
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改配置变量
- en: There are many configuration variables that need to be created or updated for
    production. The production environment is a very hostile environment. The following
    is the checklist that you should go through for deployment. Check the `setting.py`
    file properly, as each setting must be defined in the right way to keep the project
    secure.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多需要为生产创建或更新的配置变量。生产环境是一个非常恶劣的环境。以下是你应该在部署过程中检查的清单。仔细检查`setting.py`文件，因为每个设置必须以正确的方式定义，以保持项目的安全。
- en: Settings can be environment-specific, such as when you run the settings locally.
    The database credentials might change and even the database can change according
    to the environment. While conducting the process of deployment, enable the optional
    security features.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 设置可以是特定于环境的，比如在本地运行设置时。数据库凭据可能会改变，甚至数据库也可能会根据环境而改变。在进行部署过程时，启用可选的安全功能。
- en: Enable performance optimizations. The first step to do so is to disable debug,
    which enhances the performance of the website. If you have a proper error reporting
    mechanism, once `DEBUG` is `False`, it's difficult to know what went wrong, so
    you better have your logs prepared once you disable debug mode.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 启用性能优化。第一步是禁用调试，这会提高网站的性能。如果有一个合适的错误报告机制，一旦`DEBUG`为`False`，就很难知道出了什么问题，所以最好在禁用调试模式后准备好你的日志。
- en: 'The following are the critical settings that must be taken care of while going
    for Django''s deployment:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行Django部署时，必须注意以下关键设置：
- en: '`SECRET_KEY`: This key must be chosen large and randomly and should be kept
    as a secret. In fact, it is recommended that you should never keep this information
    in the `settings.py` file or in the version control repository. Instead, keep
    this information somewhere safe in a nonversion controlled file or in the environment
    path:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SECRET_KEY`：此密钥必须选择大且随机，并且应保密。事实上，建议您永远不要将此信息保存在`settings.py`文件或版本控制存储库中。相反，将此信息保存在非版本控制文件中或环境路径中的安全位置：'
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This imports the key from the current operating system''s environment. An alternate
    suggested method is to import it from a file, which can be done using:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从当前操作系统的环境中导入密钥。另一种建议的方法是从文件中导入，可以使用以下方法完成：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`ALLOWED_HOSTS`: This must have a valid host configuration. When the debug
    mode is switched off, this is used to protect the CSRF attacks:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ALLOWED_HOSTS`：这必须具有有效的主机配置。当调试模式关闭时，这用于保护CSRF攻击：'
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`ADMIN`: The `ADMIN` key holds the names and e-mail addresses of the site administrators.
    You will find it in the `settings.py` file, commented out as follows:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ADMIN`：`ADMIN`键保存站点管理员的名称和电子邮件地址。您将在`settings.py`文件中找到它，注释如下：'
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Insert your name and e-mail address here and remove the `#` symbol to uncomment
    it in order to receive e-mail notifications of code errors when they occur.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处插入您的姓名和电子邮件地址，并删除`#`符号以取消注释，以便在发生代码错误时接收电子邮件通知。
- en: When `DEBUG=False` and a view raises an exception, Django will e-mail these
    people with the full exception information.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当`DEBUG=False`并且视图引发异常时，Django将通过电子邮件向这些人发送完整的异常信息。
- en: '`EMAIL`: Since the e-mail server of your production server most likely differs
    from your development machine, you may want to update your e-mail configuration
    variables. Look for the following variables in the `settings.py` file and update
    them:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EMAIL`：由于您的生产服务器的电子邮件服务器很可能与您的开发机器不同，因此您可能需要更新电子邮件配置变量。在`settings.py`文件中查找以下变量并更新它们：'
- en: '`EMAIL_HOST`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EMAIL_HOST`'
- en: '`EMAIL_PORT`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EMAIL_PORT`'
- en: '`EMAIL_HOST_USER`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EMAIL_HOST_USER`'
- en: '`EMAIL_HOST_PASSWORD`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EMAIL_HOST_PASSWORD`'
- en: 'Also, your web application now has its own domain name, so you need to update
    the following settings to reflect this: `SITE_HOST` and `DEFAULT_FROM_EMAIL`.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您的Web应用程序现在有自己的域名，因此您需要更新以下设置以反映这一点：`SITE_HOST`和`DEFAULT_FROM_EMAIL`。
- en: Finally, if you use caching, make sure that you have the correct settings in
    the `CACHE_BACKEND` parameter (ideally, the `memcached` parameter); you don't
    want the development backend to be here while you are in production.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您使用缓存，请确保在`CACHE_BACKEND`参数中设置正确的设置（理想情况下是`memcached`参数）；在生产环境中，您不希望开发后端出现在这里。
- en: Setting error pages
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置错误页面
- en: 'With the debug mode disabled, you should create templates for the error pages,
    particularly these two files:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试模式禁用时，您应该为错误页面创建模板，特别是这两个文件：
- en: '`404.html`: This template will be displayed when the requested URL does not
    exist; in other words, when a page is not found, such as an uncaught exception.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`404.html`：当请求的URL不存在时（换句话说，当页面未找到时，例如未捕获的异常时），将显示此模板。'
- en: Create the two files with whatever content you like. You can, for example, put
    a "`Page not found`" message in the `404.html` template or a search form.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 创建两个文件，内容随意。例如，您可以在`404.html`模板中放置一个“页面未找到”的消息，或者一个搜索表单。
- en: '`500.html`: This template will be displayed when an internal server error occurs.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`500.html`：当发生内部服务器错误时，将显示此模板。'
- en: It is recommended that you give these templates a consistent look by deriving
    them from the base template of your site. Put the templates at the top in your
    `templates` folder and Django will automatically use them.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您通过从站点的基本模板派生它们，使这些模板具有一致的外观。将模板放在`templates`文件夹的顶部，Django将自动使用它们。
- en: This should cover the configuration changes that are essential for production.
    Of course, this section is not conclusive and there are other settings that you
    may be interested in. You can, for example, configure Django to notify you via
    e-mail when a requested page is not found or provide a list of IP addresses that
    can see debug information. For these and more, refer to the Django documentation
    in the `settings.py` file.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这应涵盖对生产至关重要的配置更改。当然，此部分并非穷尽一切，还有其他您可能感兴趣的设置。例如，您可以配置Django在请求的页面未找到时通过电子邮件通知您，或者提供可以查看调试信息的IP地址列表。有关这些以及更多信息，请参阅`settings.py`文件中的Django文档。
- en: Hopefully, this section will help you make your transition from development
    to production much smoother.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 希望本节能够帮助您使从开发到生产的过渡更加顺利。
- en: Django on cloud
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云上的Django
- en: Deployment in web development has changed over the course of time. Most of the
    start-ups are moving to a cloud setup and away from traditional VPS hosting methods,
    due to reliability, performance, and ease of scalability.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Web开发中的部署方式随着时间的推移发生了变化。大多数初创公司正在转向云设置，远离传统的VPS托管方法，这是因为可靠性、性能和易于扩展性。
- en: The most popular cloud platforms that provide **IAS** (**Infrastructure As a
    Service**) are Amazon EC2 and Google Compute Engine.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 提供**基础设施即服务**（**IAS**）的最受欢迎的云平台是Amazon EC2和Google Compute Engine。
- en: Then, we have other well-known options, such as **Platform as a Service** (**PaaS**),
    where you push your code, such as you push it to a normal repository so that is
    gets deployed automatically. These include Google App Engine, Heroku, and so on.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们还有其他众所周知的选项，例如**平台即服务**（**PaaS**），在这种服务中，您可以像将代码推送到普通存储库一样将代码推送，以便自动部署。这些包括Google
    App Engine、Heroku等。
- en: Let's get introduced to them one by one.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一介绍它们。
- en: EC2
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EC2
- en: 'Deployment on **EC2** is simple. Follow the given steps to deploy your desired
    settings on EC2:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在**EC2**上部署很简单。按照给定的步骤在EC2上部署所需的设置：
- en: Create an account for AWS. Follow [http://aws.amazon.com](http://aws.amazon.com)
    and click on **Create a Free Account**, as shown in the following screenshot:![EC2](img/image00335.jpeg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为AWS创建一个帐户。请访问[http://aws.amazon.com](http://aws.amazon.com)并单击**创建免费帐户**，如下面的屏幕截图所示：![EC2](img/image00335.jpeg)
- en: Sign up and add your credit card for the billing details. Once you are done,
    log in and you will see a dashboard. For deployment, we need to create a server
    called EC2 instances (it can be treated as a server) on AWS.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册并添加信用卡以获取结算明细。完成后，登录，您将看到一个仪表板。为了部署，我们需要在AWS上创建一个名为EC2实例（它可以被视为服务器）的服务器。
- en: Click on EC2 (in the top-left corner), as shown in the following screenshot:![EC2](img/image00336.jpeg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击EC2（在左上角），如下截图所示：![EC2](img/image00336.jpeg)
- en: 'As you can see in the preceding screenshot, I already have an instance running
    (**1 Running Instances**). Click on **Launch instance** to create a new instance.
    This will show you the available AWS images (which is like a screenshot in VMware
    or the last backup disk available) for the instance:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我已经有一个正在运行的实例（**1 Running Instances**）。单击**启动实例**以创建新实例。这将显示可用的AWS映像（类似于VMware中的截图或上次备份的磁盘）：
- en: '![EC2](img/image00337.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![EC2](img/image00337.jpeg)'
- en: Scroll down to choose the Ubuntu 64-bit instance (the Ubuntu server).
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动以选择Ubuntu 64位实例（Ubuntu服务器）。
- en: 'Next, choose an instance type; initially, choose the free tier, which is given
    to every new account that AWS calls the **t2.micro** instance type. Check for
    other settings as most of them are kept at default. Move to the **Tag** instance
    and give a name to your instance:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，选择一个实例类型；最初，选择免费套餐，这是AWS为每个新帐户提供的**t2.micro**实例类型。检查其他设置，因为大多数设置都保持默认值。转到**标签**实例并为您的实例命名：
- en: '![EC2](img/image00338.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![EC2](img/image00338.jpeg)'
- en: The next important thing to do is to choose a security group. AWS has this feature
    to protect your server from attacks. Here, you can configure which specific ports
    will be publicly accessible. Basically, you need to open two ports to make the
    tweets publicly accessible.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来要做的重要事情是选择安全组。AWS具有此功能，可保护您的服务器免受攻击。在这里，您可以配置哪些特定端口将是公开可访问的。基本上，您需要打开两个端口以使推文公开可访问。
- en: You should use SSH (Port 22) to connect the system from a local machine to deploy
    the code.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该使用SSH（端口22）从本地机器连接系统以部署代码。
- en: HTTP (Port 80) is used to run your Django server.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTTP（端口80）用于运行您的Django服务器。
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As the database we will use runs on the same instance, we are not going to add
    the MySQL port to the security group.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用的数据库运行在同一实例上，因此我们不会将MySQL端口添加到安全组中。
- en: 'Make sure that you have configured something like the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经配置了类似以下内容：
- en: '![EC2](img/image00339.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![EC2](img/image00339.jpeg)'
- en: Next, review and launch the instance. Also, you must create a key pair to access
    your AWS machine through SSH. The key is a `.pem` file that you will use with
    SSH to log into your machine remotely. Create a key pair and download the `.pem`
    file.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，审查并启动实例。此外，您必须创建一个密钥对以通过SSH访问您的AWS机器。密钥是一个`.pem`文件，您将使用它与SSH远程登录到您的机器。创建一个密钥对并下载`.pem`文件。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Make sure that the `PEM` file has a specific permission of 400\. Your key file
    must not be publicly viewable if you want SSH to work. Use this command if needed:
    `chmod 400 mykey.pem`.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`PEM`文件具有特定的400权限。如果要使SSH工作，您的密钥文件不得公开可见。如有需要，请使用以下命令：`chmod 400 mykey.pem`。
- en: It will take a while and will appear back on your dashboard as a running instance.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要一段时间，并且将作为正在运行的实例重新显示在您的仪表板上。
- en: 'Click on the instances to the left of your screen. Then, you can see your running
    instance. Click on the instance row to get more details at the bottom of the screen,
    as shown in the following figure:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 单击屏幕左侧的实例。然后，您可以看到正在运行的实例。单击实例行以在屏幕底部获取更多详细信息，如下图所示：
- en: '![EC2](img/image00340.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![EC2](img/image00340.jpeg)'
- en: 'On the right-hand side of the details, you can see the public DNS: `<public
    DNS>` and the public IP: `<public IP>`. That is all you need (and the `.pem` file,
    of course, to log in to your instance).'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细信息的右侧，您可以看到公共DNS：<public DNS>和公共IP：<public IP>。这就是您需要的一切（当然还有`.pem`文件）来登录到您的实例。
- en: On your machine, go to the folder from the terminal where you downloaded the
    `PEM` file and type `$ssh -i <pemfilename>.pem ubuntu@<pubic IP>` on your terminal.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的机器上，转到终端中下载`PEM`文件的文件夹，并在终端上键入`$ssh -i <pemfilename>.pem ubuntu@<pubic IP>`。
- en: 'Otherwise, type the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，输入以下内容：
- en: '`$ssh -i <pemfilename>.pem ubuntu@<public Dns>`.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ssh -i <pemfilename>.pem ubuntu@<public Dns>`。'
- en: By doing this, you will be logged in to the remote server.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，您将登录到远程服务器。
- en: This is your online system from scratch. If you want to deploy the website on
    your own from your local machine, then you can go to the previous chapters and
    install everything required for a virtual environment. Django and Apache perform
    deployment on this server.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您从头开始的在线系统。如果要从本地机器部署网站，则可以转到以前的章节并安装虚拟环境所需的一切。Django和Apache在此服务器上执行部署。
- en: Once you have deployed, use the public IP we used for SSH and you should see
    the deployed server.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 部署后，使用我们用于SSH的公共IP，您应该看到已部署的服务器。
- en: Google Compute Engine
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谷歌计算引擎
- en: '**Google Compute Engine** works on the same concept as AWS EC2\. Google Compute
    Engine, at present, does not give a free tier.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**谷歌计算引擎**的工作原理与AWS EC2相同。目前，谷歌计算引擎没有免费套餐。'
- en: Google servers are known for their reliability and performance. So, if you are
    thinking of a project with such a need, go for them.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌服务器以其可靠性和性能而闻名。因此，如果您考虑具有此需求的项目，请选择它们。
- en: Google Cloud gives you a cloud SDK to use its instances, and most of its initial
    configuration can be done from the terminal.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌云为您提供了一个云SDK来使用其实例，并且大部分初始配置可以从终端完成。
- en: 'To create an instance on Google Compute Engine go to:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要在谷歌计算引擎上创建一个实例，请转到：
- en: '[https://cloud.google.com/compute/docs/quickstart](https://cloud.google.com/compute/docs/quickstart).'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cloud.google.com/compute/docs/quickstart](https://cloud.google.com/compute/docs/quickstart)。'
- en: This link will help you set up the instance that runs on an Apache server.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此链接将帮助您设置在Apache服务器上运行的实例。
- en: The open hybrid cloud application platform by Red Hat
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 红帽开源混合云应用平台
- en: '**Red Hat** gives another solution for cloud deployment, which is free upto
    some usage limit, with a service called **OpenShift**.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 红帽提供了另一种云部署解决方案，免费使用一定限额，名为OpenShift的服务。
- en: You can create an OpenShift account and get a free basic 3 dynamo-based cloud
    server from [https://www.openshift.com/app/account/new](https://www.openshift.com/app/account/new).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个OpenShift帐户，并从[https://www.openshift.com/app/account/new](https://www.openshift.com/app/account/new)获取一个免费的基本3
    dynamo云服务器。
- en: After you create your account, you can go to [https://openshift.redhat.com/app/console/applications](https://openshift.redhat.com/app/console/applications)
    and add your account.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 创建帐户后，您可以转到[https://openshift.redhat.com/app/console/applications](https://openshift.redhat.com/app/console/applications)并添加您的帐户。
- en: OpenShift gives a Django repository all set up for you with the version control
    pre-configured.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift为您提供了一个已经设置好版本控制的Django存储库。
- en: All you need is to make your changes and push the code. It will automatically
    deploy the code.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需要进行更改并推送代码。它将自动部署代码。
- en: OpenShift also gives you the SSH feature to log in to your cloud server and
    some basic troubleshooting as well.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift还提供SSH功能，可以登录到您的云服务器，并进行一些基本的故障排除。
- en: Heroku
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Heroku
- en: This is also a good platform for deploying your Django code to the cloud smoothly.
    Like Google Compute Engine, Heroku also gives you an SDK tool to install and perform
    the configurational changes from a local terminal. You need to get a toolbelt
    (an SDK for Heroku).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是一个很好的平台，可以顺利地将您的Django代码部署到云端。与谷歌计算引擎一样，Heroku还为您提供了一个SDK工具，可以从本地终端安装并执行配置更改。您需要获取一个工具包（Heroku的SDK）。
- en: Create an account on Heroku at [https://signup.heroku.com](https://signup.heroku.com).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://signup.heroku.com](https://signup.heroku.com)上创建一个Heroku帐户。
- en: 'The following are the steps taken from [https://devcenter.heroku.com/articles/getting-started-with-python](https://devcenter.heroku.com/articles/getting-started-with-python).
    Check it out for the latest updates. The following steps explain how to create
    and use Heroku:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从[https://devcenter.heroku.com/articles/getting-started-with-python](https://devcenter.heroku.com/articles/getting-started-with-python)中获取的步骤。查看最新更新。以下步骤解释了如何创建和使用Heroku：
- en: 'First, we need to install **Heroku Toolbelt**. This provides you access to
    the Heroku command-line utility:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要安装Heroku Toolbelt。这为您提供了访问Heroku命令行实用程序的权限：
- en: '[PRE10]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following screen will appear:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 将出现以下屏幕：
- en: '![Heroku](img/image00341.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![Heroku](img/image00341.jpeg)'
- en: 'It will install Heroku Toolbelt on your local machine. Log in to Heroku from
    the command line:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将在本地机器上安装Heroku Toolbelt。从命令行登录到Heroku：
- en: '[PRE11]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Use the same username and password as you did for the Web login. Let's take
    a look at the following screenshot:![Heroku](img/image00342.jpeg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用与Web登录相同的用户名和密码。让我们来看一下下面的截图：![Heroku](img/image00342.jpeg)
- en: Now, go to [https://devcenter.heroku.com/articles/getting-started-with-django](https://devcenter.heroku.com/articles/getting-started-with-django)
    to deploy Django on Heroku.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，访问[https://devcenter.heroku.com/articles/getting-started-with-django](https://devcenter.heroku.com/articles/getting-started-with-django)来在Heroku上部署Django。
- en: Google Application Engine
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谷歌应用引擎
- en: '**Google Application Engine** works differently, it does not work on the traditional
    database, instead it has its own database. Thus, to deploy Django on Google Application
    Engine, we will use a separate project called **Django-nonrel**.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌应用引擎的工作方式不同，它不使用传统的数据库，而是有自己的数据库。因此，要在谷歌应用引擎上部署Django，我们将使用一个名为Django-nonrel的单独项目。
- en: Django-nonrel is a project that allows developers to run native Django projects
    (including Django's ORM) on nonrelational databases, one of which is Google Application
    Engine's datastore. This is all in addition to the standard traditional SQL databases
    that were always supported by Django. Google Application Engine does come with
    some Django support, but the support is mainly regarding templating and views.
    For other tools that allow rapid development, such as forms, the built-in administration
    interface or Django authentication just won't run out of the box. Django-nonrel
    changes this for Django developers.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Django-nonrel是一个允许开发人员在非关系数据库上运行原生Django项目（包括Django的ORM）的项目，其中之一就是谷歌应用引擎的数据存储。这是除了Django一直支持的标准传统SQL数据库之外的所有内容。谷歌应用引擎确实具有一些Django支持，但该支持主要涉及模板和视图。对于其他允许快速开发的工具，例如表单、内置管理界面或Django身份验证，这些都无法直接运行。Django-nonrel改变了这一点，为Django开发人员提供了支持。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered a variety of interesting topics. You learned about several
    Django-based deployment options that are useful while deploying Django. You also
    learned how to move a Django project from a development environment to a production
    environment. Notably, the frameworks that you learned about are all very easy
    to use, so you will be able to effectively utilize them in your future projects.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了各种有趣的主题。您了解了几种在部署Django时有用的基于Django的部署选项。您还学会了如何将Django项目从开发环境迁移到生产环境。值得注意的是，您学到的这些框架都非常易于使用，因此您将能够在将来的项目中有效地利用它们。
