- en: <st c="0">7</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">7</st>
- en: <st c="2">Understanding the Database</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">理解数据库</st>
- en: <st c="28">The previous chapters showed us how to use Django models to persist
    and retrieve data from a database.</st> <st c="132">In this chapter, we will explore
    how databases work in Django.</st> <st c="195">We will utilize a database viewer
    to examine how Django manages various information and stores it.</st> <st c="294">Additionally,
    we will learn how to customize the Django admin panel and switch between</st>
    <st c="381">database engines.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28">前几章向我们展示了如何使用 Django 模型将数据持久化并从数据库中检索数据。</st> <st c="132">在本章中，我们将探讨
    Django 中数据库的工作方式。</st> <st c="195">我们将利用数据库查看器来检查 Django 如何管理各种信息和存储它。</st> <st
    c="294">此外，我们还将学习如何自定义 Django 管理面板并在不同</st> <st c="381">数据库引擎之间切换。</st>
- en: <st c="398">In this chapter, we will cover the</st> <st c="434">following topics:</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="398">在本章中，我们将介绍以下主题：</st> <st c="434">以下主题：</st>
- en: <st c="451">Understanding the</st> <st c="470">database viewer</st>
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="451">理解数据库查看器</st>
- en: <st c="485">Customizing the Django</st> <st c="509">admin panel</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="485">自定义 Django</st> <st c="509">管理面板</st>
- en: <st c="520">Switching to a</st> <st c="536">MySQL database</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="520">切换到 MySQL 数据库</st>
- en: <st c="550">By the end of this chapter, you will understand how the database
    works, how to visualize database information, and how to switch to a different</st>
    <st c="695">database engine.</st>
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="550">在本章结束时，您将了解数据库的工作方式，如何可视化数据库信息，以及如何切换到不同的</st> <st c="695">数据库引擎。</st>
- en: <st c="711">Technical requirements</st>
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="711">技术要求</st>
- en: <st c="734">In this chapter, we will use Python 3.10+.</st> <st c="778">Additionally,
    we will use the</st> **<st c="808">VS Code</st>** <st c="815">editor in this book,
    which you can download</st> <st c="860">from</st> [<st c="865">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="895">.</st>
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="734">在本章中，我们将使用 Python 3.10+。</st> <st c="778">此外，我们还将使用本书中使用的</st> **<st
    c="808">VS Code</st>** <st c="815">编辑器，您可以从</st> <st c="860">以下链接</st> <st c="865">[https://code.visualstudio.com/](https://code.visualstudio.com/)<st
    c="895">下载。</st>
- en: <st c="896">The code for this chapter is located</st> <st c="934">at</st> [<st
    c="937">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter07/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter07/moviesstore)<st
    c="1045">.</st>
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="896">本章的代码位于</st> <st c="934">以下链接</st> <st c="937">[https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter07/moviesstore](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter07/moviesstore)<st
    c="1045">。</st>
- en: <st c="1046">The CiA video for this chapter can be found</st> <st c="1091">at</st>
    [<st c="1094">https://packt.link/wD2bK</st>](https://packt.link/wD2bK)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1046">本章的 CiA 视频可在</st> <st c="1091">以下链接</st> <st c="1094">[https://packt.link/wD2bK](https://packt.link/wD2bK)</st>
    <st c="1045">找到。</st>
- en: <st c="1118">Understanding the database viewer</st>
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1118">理解数据库查看器</st>
- en: <st c="1152">Let’s take</st> <st c="1164">some time to understand how the database
    works.</st> <st c="1212">The objects are</st> <st c="1228">stored in the</st>
    `<st c="1242">db.sqlite3</st>` <st c="1252">file.</st> <st c="1259">If you click
    on it, it is not very readable.</st> <st c="1304">However, you can view such SQLite
    files with a SQLite Viewer; just google</st> `<st c="1378">SQLite Viewer</st>`
    <st c="1391">for a list of them.</st> <st c="1412">One</st> <st c="1415">example</st>
    <st c="1424">is</st> [<st c="1427">https://inloop.github.io/sqlite-viewer/</st>](https://inloop.github.io/sqlite-viewer/)<st
    c="1466">.</st>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1152">让我们花些时间来了解数据库的工作方式。</st> <st c="1164">对象存储在</st> `<st c="1242">db.sqlite3</st>`
    <st c="1252">文件中。</st> <st c="1259">如果您点击它，它不太容易阅读。</st> <st c="1304">然而，您可以使用
    SQLite 查看器查看此类 SQLite 文件；只需在谷歌上搜索</st> `<st c="1378">SQLite 查看器</st>` <st c="1391">即可找到它们的列表。</st>
    <st c="1412">一个</st> <st c="1415">例子</st> <st c="1424">是</st> [<st c="1427">https://inloop.github.io/sqlite-viewer/](https://inloop.github.io/sqlite-viewer/)<st
    c="1466">。</st>
- en: <st c="1467">Drag and drop your</st> `<st c="1487">db.sqlite3</st>` <st c="1497">file
    into the previous link (over the SQLite Viewer), and you will see the different
    tables in the database (as shown in</st> *<st c="1619">Figure 7</st>**<st c="1627">.1</st>*<st
    c="1629">):</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1467">将您的</st> `<st c="1487">db.sqlite3</st>` <st c="1497">文件拖放到前面的链接（在
    SQLite 查看器上），您将看到数据库中的不同表（如图</st> *<st c="1619">图 7</st>**<st c="1627">.1</st>*<st
    c="1629">）所示：</st>
- en: '![Figure 7.1 – Opening db.sqlite3 in SQLite Viewer](img/B22457_07_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 在 SQLite 查看器中打开 db.sqlite3](img/B22457_07_01.jpg)'
- en: <st c="2012">Figure 7.1 – Opening db.sqlite3 in SQLite Viewer</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2012">图 7.1 – 在 SQLite 查看器中打开 db.sqlite3</st>
- en: <st c="2060">You can</st> <st c="2068">see the table of the model we have created
    – that is,</st> `<st c="2123">movie</st>`<st c="2128">. Note that the actual name
    of the table is determined by combining the name of the app with the name of the
    model.</st> <st c="2244">For example, if your app is named</st> `<st c="2278">movies</st>`
    <st c="2284">and your model is named</st> `<st c="2309">Movie</st>`<st c="2314">,
    the corresponding table name would be</st> `<st c="2354">movies_movie</st>`<st
    c="2366">. This naming convention helps Django differentiate between tables belonging
    to different apps and models within</st> <st c="2479">those apps.</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2060">您可以看到我们创建的模型表 – 那就是说，</st> `<st c="2123">电影</st>`<st c="2128">。请注意，表的实际名称是由应用程序的名称和模型的名称组合而成的。</st>
    <st c="2244">例如，如果您的应用程序名称为</st> `<st c="2278">movies</st>` <st c="2284">并且您的模型名称为</st>
    `<st c="2309">Movie</st>`<st c="2314">，相应的表名将是</st> `<st c="2354">movies_movie</st>`<st
    c="2366">。这种命名约定有助于Django区分不同应用程序和模型中的表。</st>
- en: <st c="2490">There are also other tables, such as</st> `<st c="2528">django_session</st>`<st
    c="2542">, because of the different apps that are installed for functions such
    as sessions</st> <st c="2624">and authentications.</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2490">还有其他表，例如</st> `<st c="2528">django_session</st>`<st c="2542">，因为安装了用于会话</st>
    <st c="2624">和身份验证等功能的不同应用程序。</st>
- en: <st c="2644">Select a table (for example,</st> `<st c="2674">movies_movie</st>`<st
    c="2686">), and you should be able to see its rows (</st>*<st c="2730">Figure
    7</st>**<st c="2739">.2</st>*<st c="2741">).</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2644">选择一个表（例如，</st> `<st c="2674">movies_movie</st>`<st c="2686">），您应该能够看到其行（</st>*<st
    c="2730">图7</st>**<st c="2739">.2</st>*<st c="2741">）。</st>
- en: '![Figure 7.2 – Selecting a table in SQLite Viewer](img/B22457_07_02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – 在SQLite查看器中选择表](img/B22457_07_02.jpg)'
- en: <st c="3238">Figure 7.2 – Selecting a table in SQLite Viewer</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3238">图7.2 – 在SQLite查看器中选择表</st>
- en: <st c="3285">Hopefully,</st> <st c="3297">this lets you appreciate what goes
    on behind the scenes in a Django database.</st> <st c="3375">Currently, we are
    using an SQLite database.</st> <st c="3419">However, what if we want to switch
    to some other database engines?</st> <st c="3486">Django officially supports the
    following databases – PostgreSQL, MariaDB, MySQL, Oracle,</st> <st c="3575">and
    SQLite.</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3285">希望如此，</st> <st c="3297">这能让您欣赏到Django数据库幕后发生的事情。</st> <st c="3375">目前，我们正在使用SQLite数据库。</st>
    <st c="3419">然而，如果我们想切换到其他数据库引擎怎么办呢？</st> <st c="3486">Django官方支持以下数据库 – PostgreSQL、MariaDB、MySQL、Oracle、</st>
    <st c="3575">和SQLite。</st>
- en: <st c="3586">Note</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3586">注意</st>
- en: <st c="3591">In addition to the officially supported databases, there are backends
    provided by third parties that allow you to use other databases with Django, such
    as CockroachDB, Firebird, Google Cloud Spanner, Microsoft SQL Server, Snowflake,
    TiDB, and YugabyteDB.</st> <st c="3847">You can find more information</st> <st
    c="3877">here:</st> [<st c="3883">https://docs.djangoproject.com/en/5.0/ref/databases/#third-party-notes</st>](https://docs.djangoproject.com/en/5.0/ref/databases/#third-party-notes)<st
    c="3953">.</st>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3591">除了官方支持的数据库之外，还有第三方提供的后端，允许您使用其他数据库与Django一起使用，例如CockroachDB、Firebird、Google
    Cloud Spanner、Microsoft SQL Server、Snowflake、TiDB和YugabyteDB。</st> <st c="3847">您可以在</st>
    <st c="3877">这里</st> <st c="3883">找到更多信息：</st> [<st c="3883">https://docs.djangoproject.com/en/5.0/ref/databases/#third-party-notes</st>](https://docs.djangoproject.com/en/5.0/ref/databases/#third-party-notes)<st
    c="3953">。</st>
- en: <st c="3954">To switch to another database engine, go to</st> `<st c="3999">/moviereviews/settings.py</st>`
    <st c="4024">and make changes to the lines</st> <st c="4055">in</st> **<st c="4058">bold</st>**<st
    c="4062">:</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3954">要切换到另一个数据库引擎，请转到</st> `<st c="3999">/moviereviews/settings.py</st>`
    <st c="4024">并修改</st> <st c="4055">以下</st> **<st c="4058">粗体</st>**<st c="4062">行：</st>
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="4171">You can still create</st> <st c="4192">your models as normal, and
    the changes are handled by Django behind</st> <st c="4261">the scenes.</st>
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4171">您仍然可以像平常一样创建</st> <st c="4192">您的模型，并且更改将由Django在幕后处理。</st>
- en: <st c="4272">In the book, we use SQLite</st> <st c="4299">because it is the
    simplest.</st> <st c="4328">Django uses SQLite by default, and it’s a great choice
    for small projects.</st> <st c="4403">It runs off a single file and doesn’t require
    complex installation.</st> <st c="4471">In contrast, the other options involve
    some complexity to configure them properly.</st> <st c="4554">We will see at the
    end of this chapter how to configure a more</st> <st c="4617">robust database.</st>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4272">在书中，我们使用SQLite</st> <st c="4299">因为它是最简单的。</st> <st c="4328">Django默认使用SQLite，这对于小型项目来说是一个很好的选择。</st>
    <st c="4403">它运行在一个单独的文件上，不需要复杂的安装。</st> <st c="4471">相比之下，其他选项配置起来有些复杂。</st>
    <st c="4554">在本章末尾，我们将看到如何配置一个更</st> <st c="4617">健壮的数据库。</st>
- en: <st c="4633">Customizing the Django admin panel</st>
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="4633">自定义Django管理面板</st>
- en: <st c="4668">The Django admin panel is a</st> <st c="4697">powerful built-in
    feature of Django that automatically generates a user-friendly interface to manage
    our application’s data models.</st> <st c="4829">This is a great feature of Django
    that many other frameworks</st> <st c="4890">don’t offer.</st>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4668">Django管理面板是Django的一个强大内置功能，它自动生成一个用户友好的界面来管理我们的应用程序的数据模型。</st>
    <st c="4697">这是Django的一个很好的功能，许多其他框架</st> <st c="4890">都不提供。</st>
- en: '*<st c="4902">Figure 7</st>**<st c="4911">.3</st>* <st c="4913">shows the current
    movies</st> <st c="4939">admin page.</st>'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="4902">图7</st>**<st c="4911">.3</st>* <st c="4913">显示了当前的电影</st> <st
    c="4939">管理页面。</st>'
- en: '![Figure 7.3 – The movies admin page](img/B22457_07_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3 – 电影管理页面](img/B22457_07_03.jpg)'
- en: <st c="5321">Figure 7.3 – The movies admin page</st>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5321">图7.3 – 电影管理页面</st>
- en: <st c="5355">The admin panel may seem very rigid, but fortunately, Django allows
    us to customize it according to our needs.</st> <st c="5467">Let’s apply two customizations
    to the movies admin page – first, ordering movies by name, and</st> <st c="5561">second,
    allowing searches</st> <st c="5587">by name.</st>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5355">管理面板可能看起来非常僵化，但幸运的是，Django允许我们根据我们的需求进行自定义。</st> <st c="5467">让我们将两个自定义应用到电影管理页面
    – 首先，按名称排序电影，以及</st> <st c="5561">其次，允许按名称搜索</st> <st c="5587">。</st>
- en: <st c="5595">Ordering movies by name</st>
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="5595">按名称排序电影</st>
- en: <st c="5619">In</st> `<st c="5623">/movies/admin.py</st>`<st c="5639">, add
    the</st> <st c="5648">following</st> <st c="5659">in bold:</st>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5619">在</st> `<st c="5623">/movies/admin.py</st>`<st c="5639">中，添加以下</st>
    <st c="5648">以下内容（加粗）：</st>
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="5822">Let’s explain the</st> <st c="5840">previous code:</st>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5822">让我们解释一下</st> <st c="5840">之前的代码：</st>
- en: <st c="5854">We created a</st> `<st c="5868">MovieAdmin</st>` <st c="5878">class
    that inherits from</st> `<st c="5904">admin.ModelAdmin</st>`<st c="5920">. This
    defines a custom admin class that allows you to customize the behavior of the
    admin interface for the</st> `<st c="6029">Movie</st>` <st c="6034">model.</st>
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5854">我们创建了一个</st> `<st c="5868">MovieAdmin</st>` <st c="5878">类，它继承自</st>
    `<st c="5904">admin.ModelAdmin</st>`<st c="5920">。这定义了一个自定义管理类，允许您自定义电影</st> `<st
    c="6029">模型</st>` <st c="6034">的管理界面。</st>
- en: <st c="6041">We set an</st> `<st c="6052">ordering</st>` <st c="6060">attribute.</st>
    <st c="6072">This attribute sets the default ordering of the movie objects in
    the admin</st> <st c="6146">interface.</st> <st c="6158">In our case, it specifies
    that the movies should be ordered by their</st> `<st c="6227">name</st>` <st c="6231">field.</st>
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6041">我们设置了一个</st> `<st c="6052">排序</st>` <st c="6060">属性。</st> <st c="6072">此属性设置管理界面中电影对象的默认排序。</st>
    <st c="6146">在我们的例子中，它指定电影应按其</st> `<st c="6227">名称</st>` <st c="6231">字段排序。</st>
- en: <st c="6238">Finally, we registered the</st> `<st c="6266">Movie</st>` <st c="6271">model
    with the custom admin class,</st> `<st c="6307">MovieAdmin</st>`<st c="6317">.
    This tells Django to use the</st> `<st c="6348">MovieAdmin</st>` <st c="6358">class
    to customize the admin interface for the</st> `<st c="6406">Movie</st>` <st c="6411">model.</st>
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6238">最后，我们将</st> `<st c="6266">Movie</st>` <st c="6271">模型与自定义管理类</st>
    `<st c="6307">MovieAdmin</st>`<st c="6317">注册。</st> <st c="6348">这告诉Django使用</st>
    `<st c="6348">MovieAdmin</st>` <st c="6358">类来自定义电影</st> `<st c="6406">模型</st>`
    <st c="6411">的管理界面。</st>
- en: <st c="6418">Now, save your file, go back to</st> `<st c="6451">/admin</st>`<st
    c="6457">, and navigate to the movies page.</st> <st c="6492">You will see the
    movie objects ordered by name (as shown in</st> *<st c="6552">Figure 7</st>**<st
    c="6560">.4</st>*<st c="6562">):</st>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6418">现在，保存你的文件，返回到</st> `<st c="6451">/admin</st>`<st c="6457">，并导航到电影页面。</st>
    <st c="6492">您将看到按名称排序的电影对象（如图</st> *<st c="6552">图7</st>**<st c="6560">.4</st>*<st
    c="6562">）：</st>
- en: '![Figure 7.4 – The movies admin page](img/B22457_07_04.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4 – 电影管理页面](img/B22457_07_04.jpg)'
- en: <st c="6839">Figure 7.4 – The movies admin page</st>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6839">图7.4 – 电影管理页面</st>
- en: <st c="6873">Allowing searches by name</st>
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="6873">允许按名称搜索</st>
- en: <st c="6899">In</st> `<st c="6903">/movies/admin.py</st>`<st c="6919">, add
    the</st> <st c="6928">following</st> <st c="6939">in bold:</st>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6899">在</st> `<st c="6903">/movies/admin.py</st>`<st c="6919">中，添加以下</st>
    <st c="6928">以下内容，并以粗体显示：</st>
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="7126">We added a</st> `<st c="7138">search_fields</st>` <st c="7151">attribute
    that specifies that only the</st> `<st c="7191">name</st>` <st c="7195">field
    of the</st> `<st c="7209">Movie</st>` <st c="7214">model is searchable in the
    admin interface.</st> <st c="7259">This means that users can enter keywords into
    a search box provided by the admin interface, and Django will filter the list
    of movie objects based on</st> <st c="7409">whether the entered keywords match
    any part of the</st> <st c="7460">movie names.</st>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7126">我们添加了一个</st> `<st c="7138">search_fields</st>` <st c="7151">属性，指定只有</st>
    `<st c="7191">name</st>` <st c="7195">字段中的</st> `<st c="7209">Movie</st>` <st
    c="7214">模型可以在管理界面中搜索。</st> <st c="7259">这意味着用户可以在管理界面提供的搜索框中输入关键词，Django将根据输入的关键词是否与电影名称的任何部分匹配来过滤电影对象列表。</st>
- en: <st c="7472">Now, save your file, go back to</st> `<st c="7505">/admin</st>`<st
    c="7511">, and navigate to the movies page.</st> <st c="7546">You will see the
    new search box available (as shown in</st> *<st c="7601">Figure 7</st>**<st c="7609">.5</st>*<st
    c="7611">):</st>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7472">现在，保存你的文件，回到</st> `<st c="7505">/admin</st>`<st c="7511">，并导航到电影页面。</st>
    <st c="7546">你将看到可用的新搜索框（如图</st> *<st c="7601">图7</st>**<st c="7609">.5</st>*<st
    c="7611">）：</st>
- en: '![Figure 7.5 – The movies admin page with a search box](img/B22457_07_05.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图7.5 – 带有搜索框的电影管理页面](img/B22457_07_05.jpg)'
- en: <st c="7972">Figure 7.5 – The movies admin page with a search box</st>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7972">图7.5 – 带有搜索框的电影管理页面</st>
- en: <st c="8024">Note</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8024">注意</st>
- en: <st c="8029">As you saw, it is very easy to apply some customizations with very
    few lines of code.</st> <st c="8116">If you want to explore some additional customization,
    check out this</st> <st c="8185">link:</st> [<st c="8191">https://docs.djangoproject.com/en/5.0/ref/contrib/admin/</st>](https://docs.djangoproject.com/en/5.0/ref/contrib/admin/)<st
    c="8247">.</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8029">正如你所看到的，使用很少的代码行就可以轻松应用一些自定义。</st> <st c="8116">如果你想探索一些额外的自定义，请查看这个</st>
    <st c="8185">链接：</st> [<st c="8191">https://docs.djangoproject.com/en/5.0/ref/contrib/admin/</st>](https://docs.djangoproject.com/en/5.0/ref/contrib/admin/)<st
    c="8247">。</st>
- en: <st c="8248">Let’s finalize this chapter by</st> <st c="8279">understanding
    how to switch to a</st> <st c="8313">different database.</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8248">让我们通过</st> <st c="8279">了解如何切换到</st> <st c="8313">不同的数据库</st>来结束这一章。
- en: <st c="8332">Switching to a MySQL database</st>
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="8332">切换到MySQL数据库</st>
- en: <st c="8362">As we earlier mentioned, we use SQLite throughout this book because
    it is the simplest.</st> <st c="8451">However, we will explain how to switch to
    a</st> <st c="8495">more robust database engine</st> <st c="8523">called</st>
    <st c="8529">MySQL.</st>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8362">正如我们之前提到的，我们在这本书中一直使用SQLite，因为它是最简单的。</st> <st c="8451">然而，我们将解释如何切换到</st>
    <st c="8495">一个更健壮的数据库引擎</st> <st c="8523">，称为</st> <st c="8529">MySQL。</st>
- en: <st c="8536">Note</st>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8536">注意</st>
- en: <st c="8541">The book code is based on SQLite, so the changes in this section
    are optional and won’t be reflected either in the GitHub book repository or in</st>
    <st c="8686">upcoming chapters.</st>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8541">本书的代码基于SQLite，因此本节中的更改是可选的，并且不会反映在GitHub书籍仓库或即将到来的章节中。</st>
- en: '**<st c="8704">MySQL</st>** <st c="8710">is</st> <st c="8714">a popular open
    source SQL database management system developed by Oracle.</st> <st c="8788">There
    are several different ways to install MySQL.</st> <st c="8839">For this section,
    we will install MySQL and a MySQL</st> <st c="8890">administration tool called</st>
    *<st c="8918">phpMyAdmin</st>*<st c="8928">. Both tools can be</st> <st c="8947">found
    in a development environment called XAMPP, so let’s</st> <st c="9006">install
    that.</st>'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="8704">MySQL</st>** <st c="8710">是由Oracle开发的流行的开源SQL数据库管理系统。</st> <st
    c="8788">有几种不同的方式可以安装MySQL。</st> <st c="8839">在本节中，我们将安装MySQL和一个名为</st> <st c="8890">phpMyAdmin</st>
    <st c="8928">的MySQL管理工具。这两个工具都可以在名为XAMPP的开发环境中找到，所以让我们</st> <st c="8947">安装它。</st>'
- en: '**<st c="9019">XAMPP</st>** <st c="9025">is</st> <st c="9029">a popular PHP
    development environment.</st> <st c="9068">It is a free Apache distribution containing
    MySQL, PHP, and Perl.</st> <st c="9134">As previously mentioned, XAMPP also includes</st>
    *<st c="9179">phpMyAdmin</st>*<st c="9189">. If you don’t have</st> <st c="9209">XAMPP
    installed, go to</st> [<st c="9232">https://www.apachefriends.org/download.html</st>](https://www.apachefriends.org/download.html)<st
    c="9275">, download it, and</st> <st c="9294">install it.</st>'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="9019">XAMPP</st>** <st c="9025">是一个流行的PHP开发环境。</st> <st c="9029">它是一个包含MySQL、PHP和Perl的免费Apache发行版。</st>
    <st c="9068">如前所述，XAMPP还包括</st> *<st c="9179">phpMyAdmin</st>*<st c="9189">。如果您还没有安装XAMPP，请访问</st>
    [<st c="9232">https://www.apachefriends.org/download.html</st>](https://www.apachefriends.org/download.html)<st
    c="9275">，下载它，并</st> <st c="9294">安装它。</st>'
- en: <st c="9305">To switch to a MySQL database, we will need to follow</st> <st
    c="9360">these steps:</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9305">要切换到MySQL数据库，我们需要遵循</st> <st c="9360">以下步骤：</st>
- en: <st c="9372">Configuring the</st> <st c="9389">MySQL database.</st>
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9372">配置</st> <st c="9389">MySQL数据库。</st>
- en: <st c="9404">Configuring our project to use the</st> <st c="9440">MySQL database.</st>
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9404">配置我们的项目以使用</st> <st c="9440">MySQL数据库。</st>
- en: <st c="9455">Running</st> <st c="9464">the migrations.</st>
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9455">运行</st> <st c="9464">迁移。</st>
- en: <st c="9479">Configuring the MySQL database</st>
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="9479">配置MySQL数据库</st>
- en: <st c="9510">Execute XAMPP, and then start</st> <st c="9541">the Apache module
    (</st>**<st c="9560">1</st>**<st c="9562">), start the MySQL module (</st>**<st
    c="9589">2</st>**<st c="9591">), and click the MySQL</st> **<st c="9614">Admin</st>**
    <st c="9619">button (in the MySQL module) (</st>**<st c="9650">3</st>**<st c="9652">),
    which will take us to the</st> *<st c="9681">phpMyAdmin</st>* <st c="9691">application
    (as shown in</st> *<st c="9717">Figure 7</st>**<st c="9725">.6</st>*<st c="9727">):</st>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9510">执行XAMPP，然后启动</st> <st c="9541">Apache模块（</st>**<st c="9560">1</st>**<st
    c="9562">），启动MySQL模块（</st>**<st c="9589">2</st>**<st c="9591">），然后点击MySQL</st>
    **<st c="9614">管理员</st>** <st c="9619">按钮（在MySQL模块中）（</st>**<st c="9650">3</st>**<st
    c="9652">），这将带我们到</st> *<st c="9681">phpMyAdmin</st>* <st c="9691">应用程序（如图7.6所示）。</st>
- en: '![Figure 7.6 – Starting the MySQL module in XAMPP](img/B22457_07_06.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图7.6 – 在XAMPP中启动MySQL模块](img/B22457_07_06.jpg)'
- en: <st c="9882">Figure 7.6 – Starting the MySQL module in XAMPP</st>
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9882">图7.6 – 在XAMPP中启动MySQL模块</st>
- en: <st c="9929">In the</st> *<st c="9937">phpMyAdmin</st>* <st c="9947">application,
    enter your username and password.</st> <st c="9995">The default values are</st>
    `<st c="10018">root</st>` <st c="10022">(for the username) and an empty password
    (</st>*<st c="10065">Figure 7</st>**<st c="10074">.7</st>*<st c="10076">):</st>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9929">在</st> *<st c="9937">phpMyAdmin</st>* <st c="9947">应用程序中，输入您的用户名和密码。</st>
    <st c="9995">默认值是</st> `<st c="10018">root</st>` <st c="10022">(用户名) 和空密码 (</st>*<st
    c="10065">图7</st>**<st c="10074">.7</st>*<st c="10076">):</st>
- en: '![Figure 7.7 – XAMPP phpMyAdmin application](img/B22457_07_07.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图7.7 – XAMPP phpMyAdmin应用程序](img/B22457_07_07.jpg)'
- en: <st c="10258">Figure 7.7 – XAMPP phpMyAdmin application</st>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10258">图7.7 – XAMPP phpMyAdmin应用程序</st>
- en: <st c="10299">Once you have logged</st> <st c="10320">in to</st> *<st c="10327">phpMyAdmin</st>*<st
    c="10337">, click the Databases tab (</st>`<st c="10393">moviesstore</st>` <st
    c="10404">(</st>**<st c="10406">2</st>**<st c="10407">), and click the</st> **<st
    c="10424">Create</st>** <st c="10430">button (</st>**<st c="10439">3</st>**<st
    c="10441">) (as shown in</st> *<st c="10456">Figure 7</st>**<st c="10464">.8</st>*<st
    c="10466">).</st>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10299">一旦您登录到</st> <st c="10320">*<st c="10327">phpMyAdmin</st>*<st c="10337">*，点击数据库标签页（</st>`<st
    c="10393">moviesstore</st>` <st c="10404">(</st>**<st c="10406">2</st>**<st c="10407">)，然后点击</st>
    **<st c="10424">创建</st>** <st c="10430">按钮（</st>**<st c="10439">3</st>**<st c="10441">）（如图7.8所示）。</st>
- en: '![Figure 7.8 – Database creation](img/B22457_07_08.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图7.8 – 数据库创建](img/B22457_07_08.jpg)'
- en: <st c="10626">Figure 7.8 – Database creation</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10626">图7.8 – 数据库创建</st>
- en: <st c="10656">Configuring our project to use the MySQL database</st>
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="10656">配置我们的项目以使用MySQL数据库</st>
- en: <st c="10706">First, we</st> <st c="10717">need to install a package called
    PyMySQL.</st> <st c="10759">PyMySQL is an</st> <st c="10772">interface to connect
    to a MySQL database from Python.</st> <st c="10827">Go to the</st> <st c="10836">terminal
    and run the</st> <st c="10858">following commands:</st>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10706">首先，我们需要安装一个名为PyMySQL的包。</st> <st c="10717">PyMySQL是从Python连接到MySQL数据库的接口。</st>
    <st c="10759">在终端中运行以下命令：</st>
- en: <st c="10877">For macOS,</st> <st c="10889">run this:</st>
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10877">对于macOS，运行以下命令：</st>
- en: '[PRE3]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="10919">For Windows,</st> <st c="10933">run this:</st>
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10919">对于Windows系统，</st> <st c="10933">请运行以下命令：</st>
- en: '[PRE4]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="10962">Then, we need to add the following bold lines to the</st> `<st
    c="11016">moviesstore/__init__.py</st>` <st c="11039">file:</st>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10962">然后，我们需要将以下加粗行添加到</st> `<st c="11016">moviesstore/__init__.py</st>`
    <st c="11039">文件中：</st>
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: …
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: DATABASES = {
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: DATABASES = {
- en: '''default'': { <st c="11415">''ENGINE'': ''django.db.backends.mysql'',</st>'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''default'': { <st c="11415">''ENGINE'': ''django.db.backends.mysql'',</st>'
- en: '<st c="11452">''NAME'': ''moviesstore'',</st>'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="11452">''NAME'': ''moviesstore'',</st>'
- en: '<st c="11475">''USER'': ''root'',</st>'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="11475">''USER'': ''root'',</st>'
- en: '<st c="11491">''PASSWORD'': '''',</st>'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="11491">''PASSWORD'': '''',</st>'
- en: '<st c="11507">''HOST'': ''localhost'',</st>'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="11507">''HOST'': ''localhost'',</st>'
- en: '<st c="11528">''PORT'': ''3306'',</st> }'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="11528">''PORT'': ''3306'',</st> }'
- en: '}'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: …
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="11693">python3 manage.py migrate</st>
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="11693">python3 manage.py migrate</st>
- en: '[PRE7]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <st c="11742">python manage.py migrate</st>
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="11742">python manage.py migrate</st>
- en: '[PRE8]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
