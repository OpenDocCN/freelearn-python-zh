- en: Microservices and Enterprise Application Integration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务和企业应用集成
- en: The introduction of microservices architecture has completely transformed the
    way in which enterprise applications are viewed. These applications are no longer
    large monoliths or big services providing the functionality to solve the problems
    of a specific domain. Instead, we now have small microservices, each providing
    a specific set of functionalities.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构的引入彻底改变了企业应用程序的视角。这些应用程序不再是大型的单体或提供特定领域问题解决功能的大型服务。相反，现在我们有小型的微服务，每个提供特定的功能集。
- en: These small microservices communicate with each other over the network to provide
    a certain output corresponding to the business needs of the organization.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些小型微服务通过网络相互通信，以提供与组织业务需求相对应的特定输出。
- en: As we move through this chapter, we will see how the traditional approach of
    doing **Enterprise Application Integration** (**EAI**) is being made obsolete
    by the move towards the use of microservices that have introduced new integration
    patterns consisting of small, stateless message brokers instead of a large and
    complex Enterprise Service Bus.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们在本章中的深入，我们将看到传统的企业应用集成（EAI）的传统方法正在被微服务的使用所淘汰，微服务引入了新的集成模式，由小型、无状态的消息代理组成，而不是一个庞大而复杂的企业服务总线。
- en: The communication between the clients has now been replaced by the use of API
    gateways that provide a federation between the clients and the backend microservices.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端之间的通信现在已经被API网关取代，API网关提供了客户端和后端微服务之间的联合。
- en: 'As a reader of this chapter, you will get to learn about the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本章的读者，您将学习以下内容：
- en: Microservices and the change in the EAI landscape
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务和EAI景观的变化
- en: The transformation of the Enterprise Service Bus
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业服务总线的转变
- en: Thinking EAI in terms of microservices architecture
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以微服务架构思考EAI
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter builds upon the contents of [Chapter 11](34b7ccb4-5bbc-474e-a70c-13ef8c1ae237.xhtml),
    *Taking the Microservices Approach*, and [Chapter 15](56990501-e67f-479d-86b5-89c0d383a0b0.xhtml),
    *Enterprise Application Integration and their Patterns*. As such, no special set
    of hardware or software is required to understand the contents presented in this
    chapter, but some knowledge of distributed message brokers and asynchronous messaging
    systems will help provide a broader context as you go through this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章建立在[第11章](34b7ccb4-5bbc-474e-a70c-13ef8c1ae237.xhtml) *采用微服务方法* 和 [第15章](56990501-e67f-479d-86b5-89c0d383a0b0.xhtml)
    *企业应用集成及其模式* 的内容之上。因此，阅读本章的内容并不需要特殊的硬件或软件，但对分布式消息代理和异步消息系统的一些了解将有助于在阅读本章时提供更广泛的背景。
- en: Microservices and the changing EAI landscape
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务和不断变化的EAI景观
- en: Recently, organizations have started to move toward a new approach for the development
    of their applications. This approach focuses on the development of the application
    when composed of several small services that are good at providing a single functionality
    and providing it well. These small services are known as microservices.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，组织开始转向一种新的应用程序开发方法。这种方法侧重于开发由多个提供单一功能并且提供良好的小型服务组成的应用程序。这些小型服务被称为微服务。
- en: These microservices model the functionality of a subset of an enterprise domain.
    For example, there could be a service in the infrastructure that is responsible
    for handling the user credential and authentication, another service that could
    be handling the functionality of emails, and yet another service that processes
    the paychecks of the employees.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些微服务模拟了企业领域的一个子集的功能。例如，基础设施中可能有一个负责处理用户凭据和身份验证的服务，另一个可能负责处理电子邮件的功能，还有另一个处理员工工资的服务。
- en: All of these services communicate over the network by the mechanism of passing
    messages or through making API calls from one service to another service through
    the use of APIs exposed by the service so as to achieve a particular use case.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些服务通过消息传递的机制或通过使用服务暴露的API从一个服务向另一个服务发出API调用来进行网络通信，以实现特定的用例。
- en: Now, in contrast to traditional applications that were large and required middleware
    that could handle the transformation of the data from the format supported by
    one application to the one supported by another application and then transporting
    that data securely, microservices require either an API through which one service
    can directly talk to the other or a small message broker through which the data
    can be transported from one microservice to another in the form of messages.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统应用程序相比，传统应用程序通常庞大，并且需要中间件来处理数据从一个应用程序支持的格式到另一个应用程序支持的格式的转换，然后安全地传输这些数据，微服务要求通过API直接与其他服务通信，或者通过小型消息代理将数据以消息的形式从一个微服务传输到另一个微服务。
- en: This has changed how Enterprise Application Integration used to happen, because
    now, there are no complex middleware solutions present in the infrastructure providing
    the glue layer to connect the different applications inside the infrastructure.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这改变了企业应用集成的方式，因为现在基础设施中没有复杂的中间件解决方案，提供粘合层来连接基础设施内的不同应用程序。
- en: So, let's take a look at why the traditional approaches do not work in the microservices
    architecture and try to understand the new alternatives that have come up to facilitate
    the integration of application in the enterprise.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看为什么传统方法在微服务架构中不起作用，并尝试理解出现的新替代方案，以促进企业应用程序的集成。
- en: Challenges of traditional EAI in microservices
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务中传统EAI的挑战
- en: In applications that have been developed by the modern practices of developing
    small microservices, hosting them over the enterprise infrastructure, and then
    integrating them together to talk to each other, we can no longer use the traditional
    approaches we were familiar with during the times of running and maintaining large
    monolithic applications or services. Let's first take some time to understand
    why point-to-point integration might not work in the case of microservices.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过现代的小型微服务开发实践开发、将它们托管在企业基础设施上，然后将它们集成在一起进行通信的应用程序中，我们不能再使用我们在运行和维护大型单片应用程序或服务时熟悉的传统方法。让我们先花点时间了解为什么点对点集成在微服务的情况下可能行不通。
- en: Point-to-point integration of microservices
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务的点对点集成
- en: In the point to point integration approach for microservices, we make the microservices
    interact with each other directly through the APIs exposed by them. For this to
    happen, each microservice needs to have the knowledge about the endpoints exposed
    by the other service. This is perfectly fine, but what happens if the microservice
    has to do some operation that depends on interaction with five other microservices?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务的点对点集成方法中，我们使微服务直接通过它们暴露的API相互交互。为了实现这一点，每个微服务都需要了解其他服务暴露的端点。这是完全可以的，但是如果微服务需要执行依赖于与其他五个微服务交互的操作会发生什么呢？
- en: At this point, we have to embed the endpoints of five different microservices
    into our microservice. As a one-off task, this is a completely OK solution. But,
    pertaining to the nature of microservices, they keep on evolving over time. This
    now causes us to keep on updating our microservice again and again to reflect
    the updated APIs.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们必须将五个不同微服务的端点嵌入到我们的微服务中。作为一项一次性任务，这是一个完全可以接受的解决方案。但是，由于微服务的性质，它们会随着时间不断发展。这现在导致我们不断更新我们的微服务，以反映更新的API。
- en: This is just one of the challenges. Usually, applications based upon microservice
    architecture grow over a period of time to have more than 100 hundred services
    that are operating in the infrastructure, making it really hard to achieve point
    to point integration between the different microservices.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是其中一个挑战。通常，基于微服务架构的应用程序会随着时间的推移而增长，拥有超过100个在基础设施中运行的服务，这使得在不同的微服务之间实现点对点集成变得非常困难。
- en: So, we now have an idea about how the microservices cannot be integrated through
    the use of point to point integration,  can we use the good old Enterprise Service
    Bus? Let's take a look.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，现在我们知道了微服务不能通过点对点集成来集成，我们能否使用老式的企业服务总线？让我们来看看。
- en: Integrating microservices using the ESB
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ESB集成微服务
- en: The Enterprise Service Bus usually provides an intermediate bus through which
    two applications can communicate with each other by the mechanism of message passing.
    This ESB also has a standard format in which the messages can be encoded before
    they are sent.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 企业服务总线通常提供一个中间总线，通过该总线，两个应用程序可以通过消息传递机制进行通信。这个ESB还有一个标准格式，可以在发送之前对消息进行编码。
- en: Now, we can possibly hook our microservices to the ESB and then these services
    can communicate with each other by passing messages. This approach is absolutely
    fine and works. But the real problem starts to happen as the number of microservices
    start to grow in the infrastructure. Once this happens, then the ESB starts to
    see a heavy load due to the huge number of messages that are being transported
    by it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将我们的微服务连接到ESB，然后这些服务可以通过传递消息进行通信。这种方法是完全可以的，也是有效的。但是，当微服务的数量开始在基础设施中增长时，真正的问题开始出现。一旦发生这种情况，ESB就会因为传输的大量消息而开始承受沉重的负载。
- en: Another reason why the ESB fails to scale ...
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: ESB无法扩展的另一个原因...
- en: Utilizing API gateways for the integration of microservices
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用API网关集成微服务
- en: The use of API gateways in a microservices architecture provides a really interesting
    way of approaching the microservices integration problem, while also following
    one of the patterns of application integration through the use of federated gateways.
    So, let’s take a look at how the API gateways help us in the process of microservices
    integration.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中使用API网关提供了一种非常有趣的方法来解决微服务集成问题，同时也遵循了应用程序集成的模式之一，即通过使用联合网关。因此，让我们看看API网关如何帮助我们进行微服务集成的过程。
- en: 'An API gateway inside the microservices-based application acts as central point
    through which the microservices can interact with the other microservices present
    in the infrastructure. This API gateway provides the following characteristics:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构中的API网关充当中心点，通过它，微服务可以与基础设施中的其他微服务进行交互。这个API网关提供以下特点：
- en: '**Restricted exposure of APIs:** The API gateway provides the functionality
    of exposing only a restricted set of APIs from the backend microservices, hence
    limiting what functionality is exposed. Along with this, the API gateway can also
    introduce new API endpoints in the infrastructure, where each API endpoint can
    map to multiple API endpoints of the backend microservices.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API的受限暴露：** API网关提供了仅从后端微服务中暴露一组受限API的功能，因此限制了暴露的功能。除此之外，API网关还可以在基础设施中引入新的API端点，其中每个API端点可以映射到后端微服务的多个API端点。'
- en: '**Federated access:** An API gateway implements federated access for the integration
    of the microservices. This happens because of the fact that, if any two services
    want to interact with each other, a call needs to be made to the API gateway,
    which will indeed make the request to the other microservice and provides the
    result from the microservice.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**联合访问：** API网关实现了微服务的联合访问。这是因为，如果任何两个服务想要相互交互，需要向API网关发出调用，API网关将确实向其他微服务发出请求，并从微服务中提供结果。'
- en: '**Transformation of request:** The API gateway is also responsible for the
    transformation of the request between the microservices if both of them use a
    different mechanism of representing the data. For this kind of transformation
    to take place, the API gateway usually implements a common data format that every
    service can use to handle the communication with the API gateway, a concept which
    was usually implemented by the ESBs.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求的转换：**API网关还负责在微服务之间转换请求，如果它们都使用不同的数据表示机制。为了进行这种转换，API网关通常实现了一个通用的数据格式，每个服务都可以使用它来处理与API网关的通信，这个概念通常由ESB实现。'
- en: 'For microservices integrated through the use of API gateways, the process of
    communication between the different microservices looks as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用API网关进行微服务集成，不同微服务之间的通信过程如下：
- en: Imagine that there are two microservices, *A* and *B*
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想象一下有两个微服务，*A*和*B*
- en: The microservice *A* wants to notify the microservice *B* of some event that
    has taken place as a result of some call or any other outside event
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务*A*希望通知微服务*B*某个事件已经发生，这是某个调用或其他外部事件的结果
- en: The microservice *A* makes an API call to an endpoint of microservice *B* exposed
    by the API gateway
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务*A*调用API网关暴露的微服务*B*的端点
- en: The API gateway takes up the request, performs any kind of transformation on
    the request, and forwards the call to the microservice **B**
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API网关接收请求，对请求进行任何类型的转换，并将调用转发给微服务**B**
- en: The API gateway now waits for the response to be returned from the microservice
    *B*
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API网关现在等待来自微服务*B*的响应返回
- en: Once the response is returned, the API gateway transforms the response into
    the format supported by microservice *A* and returns the response back completing
    the cycle
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦响应返回，API网关将响应转换为微服务*A*支持的格式，并将响应返回，完成循环
- en: This kind of process is usually followed with the other services as well.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 其他服务通常也会遵循这种过程。
- en: 'The use of API gateways for the integration of the microservices provides a
    number of advantages over the traditional approaches, as in the following examples:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用API网关集成微服务相比传统方法提供了许多优势，如以下示例所示：
- en: '**Improved security:** Since the API gateway restricts the exposed backend
    APIs, the API gateway provides better security between the different microservices.
    This security can also be increased by implementing simple end-to-end encryption
    between the communications happening between the different microservices and API
    gateway.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高安全性：**由于API网关限制了后端API的暴露，API网关在不同微服务之间提供更好的安全性。通过在不同微服务和API网关之间的通信中实现简单的端到端加密，也可以增加安全性。'
- en: '**Better scalability:** An API gateway provides better scalability than traditional
    middleware-based approaches by allowing for dynamic scaling through the use of
    a load balancer. Multiple API gateway processes can run behind a load balancer,
    eventually distributing the requests coming to them.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的可扩展性：**API网关通过使用负载均衡器允许动态扩展，提供比传统基于中间件的方法更好的可扩展性。多个API网关进程可以在负载均衡器后运行，最终分发到它们的请求。'
- en: '**Easier maintenance:** Applications integrated with the use of API gateways
    are usually easier to maintain due to the reduced amount of API endpoints that
    they need to manage individually.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更容易维护：**与使用API网关集成的应用通常更容易维护，因为它们需要单独管理的API端点数量减少了。'
- en: Those are some great benefits and it seems like a good approach for integration
    of microservices-based applications. So, do we not require an ESB anymore? Has
    the ESB gone?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是一些很大的好处，看起来是集成基于微服务的应用的一个很好的方法。那么，我们不再需要ESB了吗？ESB已经消失了吗？
- en: The answer to this is no. Rather, it has transformed with the advent of microservices.
    Let's take a look at how this transformation looks.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是否定的。相反，随着微服务的出现，它已经发生了变化。让我们看看这种转变是什么样子的。
- en: Transformation of the ESB
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ESB的转变
- en: With the advent of the microservices revolution, the Enterprise Service Bus
    has also seen a change, where it has now been replaced by some similar solutions,
    but with the advantages of far better scalability and the removal of single point
    of failure.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 随着微服务革命的出现，企业服务总线也发生了变化，现在已经被一些类似的解决方案所取代，但具有更好的可扩展性和去除单点故障的优势。
- en: The ESB in application integration used to play the role of a central bus, which
    acted as an intermediary between the applications that wanted to communicate with
    each other. The ESB facilitated this communication by introducing common data
    formats and providing adapters through which the applications could talk to the
    ESB.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 应用集成中的ESB曾经扮演着中央总线的角色，作为希望相互通信的应用之间的中介。ESB通过引入通用数据格式并提供适配器来促进这种通信，应用可以通过这些适配器与ESB进行通信。
- en: 'But the ESB still suffered two major drawbacks:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 但ESB仍然存在两个主要缺点：
- en: '**Scalability:** The ESB was a heavy piece of middleware that required a specialization
    to work with. ...'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性：** ESB是一种沉重的中间件，需要专门化才能使用……'
- en: Rethinking EAI in microservices
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在微服务中重新思考EAI
- en: 'With microservices in the picture, with their own set of tools and different
    requirements, we now have to rethink the approach of EAI in the enterprise infrastructure.
    So, let''s take a look at few of the points that we need to take care of when
    considering the application integration in microservices-based infrastructures:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有了微服务的参与，他们拥有自己的工具和不同的要求，我们现在必须重新思考企业基础设施中的EAI方法。因此，让我们看看在考虑基于微服务的基础设施中的应用集成时需要注意的一些要点：
- en: '**Planning for expansion:** The applications inside the microservices infrastructure
    are evolving continuously, and their integration needs to be planned in the same
    manner. While thinking about the integration strategy, we need to make sure that
    it will be able to support the future scale of our applications and the type of
    communication that our application may warrant.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展规划：**微服务基础架构内的应用不断发展，它们的集成需要以相同的方式进行规划。在考虑集成策略时，我们需要确保它能够支持我们应用的未来规模和应用可能需要的通信类型。'
- en: '**Defining the APIs:** The APIs exposed by the microservices play an important
    role in the integration of the different applications. Before the development
    of a microservice is started, its APIs should be planned well and documented,
    so as to allow for smoother integration with other services.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义API：**微服务暴露的API在不同应用的集成中起着重要作用。在开始开发微服务之前，应该充分规划和记录其API，以便与其他服务更顺畅地集成。'
- en: '**Keeping the data formats standard:** The data formats in which the different
    microservices manage their data should be standardized to have only a few sets
    of formats, so as to enable an easy integration and reduced complexity in the
    infrastructure.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持数据格式标准：**不同微服务管理数据的数据格式应该标准化，只有少量格式，以便实现简单的集成和减少基础架构的复杂性。'
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Over the course of this chapter, we took a look at how the introduction of microservices
    as a development approach to enterprise applications has completely changed the
    way applications inside an enterprise used to integrate.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的过程中，我们看了一下微服务作为企业应用开发方法的引入是如何彻底改变企业内部应用集成方式的。
- en: We took a look at how the traditional approaches to Enterprise Application Integration
    fail when applied to the microservices architecture, and then we took a look at
    how the transformation of EAI has happened with the introduction of API gateways
    and distributed message routers.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看了一下当传统的企业应用集成方法应用到微服务架构时会失败，然后我们看了一下在引入API网关和分布式消息路由器后，EAI的转变是如何发生的。
- en: At the conclusion of this chapter, we took a look at how the planning for the
    Enterprise Application Integration has changed as we have moved to a microservices-based
    approach.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们看了一下随着我们转向基于微服务的方法，企业应用集成的规划发生了什么变化。
- en: From here, we now have an idea about the different aspects ...
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们现在对不同方面有了一个概念...
- en: Questions
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the bottlenecks of point to point integration in microservices applications?
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 微服务应用中点对点集成的瓶颈是什么？
- en: How has the Enterprise Service Bus changed with the advent of microservices?
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 企业服务总线在微服务出现后发生了什么变化？
- en: How do the message brokers inside microservices architecture provide high availability?
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 微服务架构内的消息代理如何提供高可用性？
