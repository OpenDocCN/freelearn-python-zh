- en: <st c="0">5</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">5</st>
- en: <st c="2">Working with Models</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">与模型一起工作</st>
- en: <st c="21">Storing data in a database is a common practice in most web applications.</st>
    <st c="96">In a Django project, it involves working with Django models.</st> <st
    c="157">In this chapter, we will create a database model (for example, a movie)
    and Django will turn this model into a database table for us.</st> <st c="291">We
    will also explore a powerful built-in admin interface that provides a visual way
    of managing all aspects of a Django project, such as users and making changes
    to</st> <st c="456">model data.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21">在大多数Web应用程序中，将数据存储在数据库中是一种常见的做法。</st> <st c="96">在Django项目中，这涉及到与Django模型一起工作。</st>
    <st c="157">在本章中，我们将创建一个数据库模型（例如，电影）并且Django会为我们把这个模型转换成数据库表。</st> <st c="291">我们还将探索一个强大的内置管理界面，它提供了一种可视化的方式来管理Django项目的所有方面，例如用户和管理模型数据的变化。</st>
    <st c="456">。</st>
- en: <st c="467">In this chapter, we will cover the</st> <st c="503">following topics:</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="467">在本章中，我们将涵盖以下主题：</st> <st c="503">以下主题：</st>
- en: <st c="520">Creating our</st> <st c="534">first model</st>
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="520">创建我们的</st> <st c="534">第一个模型</st>
- en: <st c="545">Installing Pillow</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="545">安装Pillow</st>
- en: <st c="563">Managing migrations</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="563">管理迁移</st>
- en: <st c="583">Accessing the Django</st> <st c="605">admin interface</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="583">访问Django</st> <st c="605">管理界面</st>
- en: <st c="620">Configuring</st> <st c="633">image upload</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="620">配置</st> <st c="633">图像上传</st>
- en: <st c="645">Serving</st> <st c="654">stored images</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="645">服务</st> <st c="654">存储的图像</st>
- en: <st c="667">Adding a movie model</st> <st c="689">to admin</st>
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="667">将电影模型</st> <st c="689">添加到管理界面</st>
- en: <st c="697">Technical requirements</st>
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="697">技术要求</st>
- en: <st c="720">In this chapter, we will be using Python 3.10+.</st> <st c="769">Additionally,
    we will be using the</st> **<st c="804">VS Code</st>** <st c="811">editor in this
    book, which you can download</st> <st c="856">from</st> [<st c="861">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="891">.</st>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="720">在本章中，我们将使用Python 3.10+。</st> <st c="769">此外，我们还将使用</st> **<st c="804">VS
    Code</st>** <st c="811">编辑器，您可以从</st> <st c="856">以下链接</st> [<st c="861">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="891">下载。</st>
- en: <st c="892">The code for this chapter is located</st> <st c="930">at</st> [<st
    c="933">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter05/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter05/moviesstore)<st
    c="1041">.</st>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="892">本章的代码位于</st> <st c="930">以下链接</st> [<st c="933">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter05/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter05/moviesstore)<st
    c="1041">。</st>
- en: <st c="1042">The CiA video for this chapter can be found</st> <st c="1087">at</st>
    [<st c="1090">https://packt.link/HEeUM</st>](https://packt.link/HEeUM)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1042">本章的CiA视频可以在</st> <st c="1087">以下链接</st> [<st c="1090">https://packt.link/HEeUM</st>](https://packt.link/HEeUM)
- en: <st c="1114">Creating our first model</st>
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1114">创建我们的第一个模型</st>
- en: <st c="1139">A</st> **<st c="1142">Django model</st>** <st c="1154">is a Python
    class that represents a database table.</st> <st c="1207">Models are used to define
    the structure and behavior of the data that will be stored in the database.</st>
    <st c="1309">Each model class typically corresponds to a single database table,
    and each instance of the class represents a specific row in that table.</st> <st
    c="1448">More information about Django models</st> <st c="1484">can be found</st>
    <st c="1498">here:</st> [<st c="1504">https://docs.djangoproject.com/en/5.0/topics/db/models/.</st>](https://docs.djangoproject.com/en/5.0/topics/db/models/)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1139">一个</st> **<st c="1142">Django模型</st>** <st c="1154">是一个Python类，它代表了一个数据库表。</st>
    <st c="1207">模型用于定义将存储在数据库中的数据的结构和行为。</st> <st c="1309">每个模型类通常对应一个数据库表，并且类的每个实例代表该表中的一行。</st>
    <st c="1448">有关Django模型的更多信息</st> <st c="1484">可以在以下位置找到：</st> [<st c="1504">https://docs.djangoproject.com/en/5.0/topics/db/models/.</st>](https://docs.djangoproject.com/en/5.0/topics/db/models/)
- en: <st c="1560">We can create models such as Movie, Review, and Order, and Django
    turns these models into a database table</st> <st c="1668">for us.</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1560">我们可以创建如电影、评论和订单等模型，Django会为我们将这些模型转换为数据库表</st> <st c="1668">。</st>
- en: <st c="1675">Here are the Django</st> <st c="1695">model basics:</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1675">以下是Django</st> <st c="1695">模型基础：</st>
- en: <st c="1709">Each model is a class that</st> <st c="1737">extends</st> `<st
    c="1745">django.db.models.Model</st>`
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1709">每个模型都是一个类，它</st> <st c="1737">扩展了</st> `<st c="1745">django.db.models.Model</st>`
- en: <st c="1767">Each model attribute represents a</st> <st c="1802">database column</st>
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1767">每个模型属性代表一个</st> <st c="1802">数据库列</st>
- en: <st c="1817">With all of this, Django provides us</st> <st c="1855">with a set
    of useful methods to</st> **<st c="1887">create, update, read, and delete</st>**
    <st c="1919">(</st>**<st c="1921">CRUD</st>**<st c="1925">) model information
    from</st> <st c="1951">a database</st>
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1817">有了这些，Django为我们提供了一组有用的方法来</st> **<st c="1887">创建、更新、读取和删除</st>**
    <st c="1919">(**<st c="1921">CRUD</st>**<st c="1925">**)数据库中的模型信息</st>
- en: <st c="1961">Creating a Movie model</st>
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="1961">创建一个Movie模型</st>
- en: <st c="1984">Our first model will be a Movie.</st> <st c="2018">We can create
    models in each of the project apps.</st> <st c="2068">Movie seems to be more related
    to the</st> `<st c="2106">movies</st>` <st c="2112">app, so we will create the</st>
    `<st c="2140">Movie</st>` <st c="2145">model there.</st> <st c="2159">In</st>
    `<st c="2162">/movies</st>`<st c="2169">, we</st> <st c="2174">have the</st> `<st
    c="2183">models.py</st>` <st c="2192">file, where we create our models for the</st>
    `<st c="2234">movies</st>` <st c="2240">app.</st> <st c="2246">Open that file
    and place the following lines</st> <st c="2291">of code:</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1984">我们的第一个模型将是Movie。</st> <st c="2018">我们可以在每个项目应用中创建模型。</st> <st c="2068">Movie似乎与</st>
    `<st c="2106">movies</st>` <st c="2112">应用更相关，所以我们将</st> `<st c="2140">Movie</st>`
    <st c="2145">模型创建在那里。</st> <st c="2159">在</st> `<st c="2162">/movies</st>`<st
    c="2169">`，我们有</st> `<st c="2174">models.py</st>` <st c="2192">文件，我们在其中为</st>
    `<st c="2234">movies</st>` <st c="2240">应用创建模型。</st> <st c="2246">打开该文件，并放置以下代码行：</st>
    <st c="2291">:</st>
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="2610">Let’s explain the</st> <st c="2629">previous code:</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2610">让我们解释一下</st> <st c="2629">之前的代码：</st>
- en: <st c="2643">First, we import</st> <st c="2660">the</st> `<st c="2665">models</st>`
    <st c="2671">module, which provides various classes and utilities for defining</st>
    <st c="2738">database models.</st>
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="2643">首先，我们导入</st> <st c="2660">的</st> `<st c="2665">models</st>` <st
    c="2671">模块，它提供了定义数据库模型所需的各类类和实用工具。</st>
- en: <st c="2754">Next, we define a Python class named</st> `<st c="2792">Movie</st>`<st
    c="2797">, which inherits from</st> `<st c="2819">models.Model</st>`<st c="2831">.
    This means that</st> `<st c="2849">Movie</st>` <st c="2854">is a Django</st> <st
    c="2867">model class.</st>
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="2754">接下来，我们定义一个名为</st> `<st c="2792">Movie</st>`<st c="2797">的Python类，它继承自</st>
    `<st c="2819">models.Model</st>`<st c="2831">。这意味着</st> `<st c="2849">Movie</st>`
    <st c="2854">是一个Django</st> <st c="2867">模型类。</st>
- en: <st c="2879">Inside the</st> `<st c="2891">Movie</st>` <st c="2896">class, we
    define</st> <st c="2914">several fields:</st>
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="2879">在</st> `<st c="2891">Movie</st>` <st c="2896">类内部，我们定义了</st> <st
    c="2914">几个字段：</st>
- en: '`<st c="2929">id</st>`<st c="2932">: This is an</st> `<st c="2946">AutoField</st>`
    <st c="2955">value that automatically increments its value for each new record
    that’s added to the database.</st> <st c="3052">The</st> `<st c="3056">primary_key=True</st>`
    <st c="3072">parameter specifies that this field is the primary key for the table,
    uniquely identifying</st> <st c="3164">each record.</st>'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="2929">id</st>`<st c="2932">: 这是一个</st> `<st c="2946">AutoField</st>`
    <st c="2955">值，它会自动为数据库中添加的每个新记录增加其值。</st> <st c="3052">`<st c="3056">primary_key=True</st>`
    <st c="3072">`参数指定该字段是表的唯一主键，唯一标识</st> <st c="3164">每条记录。</st>'
- en: '`<st c="3176">name</st>`<st c="3181">: This is a</st> `<st c="3194">CharField</st>`
    <st c="3203">value that represents a string field with a maximum length of 255
    characters.</st> <st c="3282">It stores the name of</st> <st c="3304">the movie.</st>'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="3176">name</st>`<st c="3181">: 这是一个</st> `<st c="3194">CharField</st>`
    <st c="3203">值，表示一个最大长度为255个字符的字符串字段。</st> <st c="3282">它存储电影的名称。</st>'
- en: '`<st c="3314">price</st>`<st c="3320">: This is an</st> `<st c="3334">IntegerField</st>`
    <st c="3346">value that stores integer values.</st> <st c="3381">It represents
    the price of</st> <st c="3408">the movie.</st>'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="3314">price</st>`<st c="3320">: 这是一个</st> `<st c="3334">IntegerField</st>`
    <st c="3346">值，用于存储整数值。</st> <st c="3381">它代表电影的票价。</st>'
- en: '`<st c="3418">description</st>`<st c="3430">: This is a</st> `<st c="3443">TextField</st>`
    <st c="3452">value that represents a text field with no specified maximum length.</st>
    <st c="3522">It stores a textual description of</st> <st c="3557">the movie.</st>'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="3418">description</st>`<st c="3430">: 这是一个</st> `<st c="3443">TextField</st>`
    <st c="3452">值，表示一个没有指定最大长度的文本字段。</st> <st c="3522">它存储电影的文本描述。</st>'
- en: '`<st c="3567">image</st>`<st c="3573">: This is an</st> `<st c="3587">ImageField</st>`
    <st c="3597">value that stores image files.</st> <st c="3629">The</st> `<st c="3633">upload_to</st>`
    <st c="3642">parameter specifies the directory where uploaded images will be stored.</st>
    <st c="3715">In this case, uploaded images will be stored in the</st> `<st c="3767">movie_images/</st>`
    <st c="3780">directory within the media directory of the Django project.</st>
    <st c="3841">The media directory is used to store user-uploaded files, such as
    images, documents, or other media files.</st> <st c="3948">This directory is specified
    in your Django project’s settings (we will configure it later in</st> <st c="4041">this
    chapter).</st>'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="3567">图像</st>`<st c="3573">：这是一个</st> `<st c="3587">ImageField</st>`
    <st c="3597">值，用于存储图像文件。</st> <st c="3629">`<st c="3633">upload_to</st>` <st c="3642">参数指定了上传的图像将被存储的目录。</st>
    <st c="3715">在这种情况下，上传的图像将被存储在Django项目媒体目录下的`<st c="3767">movie_images/</st>`
    <st c="3780">目录中。</st> <st c="3841">媒体目录用于存储用户上传的文件，如图像、文档或其他媒体文件。</st> <st c="3948">此目录在您的Django项目设置中指定（我们将在本章后面配置它）。</st>'
- en: '`<st c="4055">__str__</st>`<st c="4063">: This is a special method in Python
    classes that returns a string representation of an object.</st> <st c="4160">It
    concatenates the movie’s</st> `<st c="4188">id</st>` <st c="4190">value (converted
    into a string) with a hyphen and the movie’s name.</st> <st c="4259">This method
    will be useful when we display movies in the Django admin</st> <st c="4329">panel
    later.</st>'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="4055">__str__</st>`<st c="4063">：这是Python类中的一个特殊方法，它返回对象的字符串表示形式。</st>
    <st c="4160">它将电影的`<st c="4188">id</st>` <st c="4190">值（转换为字符串）与一个连字符和电影名称连接起来。</st>
    <st c="4259">此方法将在我们稍后在Django管理面板中显示电影时非常有用。</st>'
- en: <st c="4341">Note</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4341">注意</st>
- en: <st c="4346">Django provides many other model</st> <st c="4379">fields to support
    common types, such as dates, integers, and emails.</st> <st c="4449">To have complete
    documentation of the kinds of types and how</st> <st c="4509">to use them, refer
    to the</st> `<st c="4536">Model</st>` <st c="4541">field reference in the Django</st>
    <st c="4572">documentation (</st>[<st c="4587">https://docs.djangoproject.com/en/5.0/ref/models/fields/</st>](https://docs.djangoproject.com/en/5.0/ref/models/fields/)<st
    c="4644">).</st>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4346">Django提供了许多其他模型</st> <st c="4379">字段来支持常见类型，如日期、整数和电子邮件。</st> <st
    c="4449">要了解各种类型及其使用方法，请参阅Django文档中的</st> `<st c="4536">模型</st>` <st c="4541">字段参考（</st>[<st
    c="4587">https://docs.djangoproject.com/en/5.0/ref/models/fields/</st>](https://docs.djangoproject.com/en/5.0/ref/models/fields/)<st
    c="4644">）。</st>
- en: <st c="4647">Installing Pillow</st>
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="4647">安装Pillow</st>
- en: <st c="4665">Because we’re using</st> <st c="4686">images, we need</st> <st
    c="4701">to install Pillow (</st>[<st c="4721">https://pypi.org/project/pillow/</st>](https://pypi.org/project/pillow/)<st
    c="4754">), which adds image-processing capabilities to our</st> <st c="4806">Python
    interpreter.</st>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4665">因为我们使用</st> <st c="4686">图像，所以我们需要</st> <st c="4701">安装Pillow（</st>[<st
    c="4721">https://pypi.org/project/pillow/</st>](https://pypi.org/project/pillow/)<st
    c="4754">），这将为我们的</st> <st c="4806">Python解释器添加图像处理功能。</st>
- en: <st c="4825">In the Terminal, stop the server and do</st> <st c="4866">the following:</st>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4825">在终端中，停止服务器并执行</st> <st c="4866">以下操作：</st>
- en: <st c="4880">For macOS, run the</st> <st c="4900">following command:</st>
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4880">对于macOS，运行以下命令：</st>
- en: '[PRE1]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="4938">For Windows, run the</st> <st c="4960">following command:</st>
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4938">对于Windows，运行以下命令：</st>
- en: '[PRE2]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="4997">Now that Pillow has been installed, let’s learn how to manage</st>
    <st c="5060">Django migrations.</st>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4997">现在Pillow已经安装，让我们学习如何管理</st> <st c="5060">Django迁移。</st>
- en: <st c="5078">Managing migrations</st>
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="5078">管理迁移</st>
- en: '**<st c="5098">Django migrations</st>** <st c="5116">is a feature of Django
    that allows</st> <st c="5151">you to manage changes to your database schema –
    that is, changes to the structure of your database tables and the data within
    them – over time, as your Django</st> <st c="5311">project evolves.</st>'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="5098">Django迁移</st>** <st c="5116">是Django的一个功能，允许</st> <st c="5151">您管理数据库模式的变化——也就是说，随着您的Django</st>
    <st c="5311">项目的发展，对数据库表结构和其中数据的变化——随着时间的推移进行管理。</st>'
- en: <st c="5327">When you define models in Django, you’re essentially defining the
    structure of your database tables.</st> <st c="5429">However, as your project
    grows and changes, you might need to make alterations to these models, such as
    adding new fields, removing fields, or modifying existing fields.</st> <st c="5599">Django
    migrations provide a way to propagate these changes to your database schema in
    a controlled and consistent manner (as a version</st> <st c="5734">control system).</st>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5327">在 Django 中定义模型时，你实际上是在定义数据库表的结构。</st> <st c="5429">然而，随着项目的增长和变化，你可能需要修改这些模型，例如添加新字段、删除字段或修改现有字段。</st>
    <st c="5599">Django 迁移提供了一种以受控和一致的方式将更改传播到数据库模式的方法（作为一个版本</st> <st c="5734">控制系统）。</st>
- en: <st c="5750">To work with migrations, we must apply</st> <st c="5789">the default
    migrations, create custom migrations, and apply</st> <st c="5850">custom migrations.</st>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5750">要使用迁移，我们必须应用</st> <st c="5789">默认迁移，创建自定义迁移，并应用</st> <st c="5850">自定义迁移。</st>
- en: <st c="5868">Applying the default migrations</st>
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="5868">应用默认迁移</st>
- en: <st c="5900">Currently, note a message</st> <st c="5926">in the Terminal when
    you run</st> <st c="5956">the server:</st>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5900">当前，当你在终端中运行服务器时，请注意一条消息</st> <st c="5926">：</st>
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="6164">As per the message instructions, stop the server and do the following
    (remember to be located in the</st> `<st c="6266">moviesstore</st>` <st c="6277">folder
    that contains the</st> `<st c="6303">manage.py</st>` <st c="6312">file):</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6164">根据消息说明，停止服务器并执行以下操作（请确保位于包含</st> `<st c="6266">moviesstore</st>`
    <st c="6277">文件夹的</st> `<st c="6303">manage.py</st>` <st c="6312">文件）：</st>
- en: <st c="6319">For macOS, run the</st> <st c="6339">following command:</st>
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6319">对于 macOS，运行以下命令：</st>
- en: '[PRE4]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="6383">For Windows, run the</st> <st c="6405">following command:</st>
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6383">对于 Windows，运行以下命令：</st>
- en: '[PRE5]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="6448">The</st> `<st c="6453">migrate</st>` <st c="6460">command creates
    an initial database based on Django’s default settings.</st> <st c="6533">Note
    that there is a</st> `<st c="6554">db.sqlite3</st>` <st c="6564">file in the project
    root folder.</st> <st c="6598">This file represents our SQLite database.</st>
    <st c="6640">It’s created the first time we run</st> `<st c="6675">migrate</st>`
    <st c="6682">or</st> `<st c="6686">runserver</st>`<st c="6695">.</st>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6448"></st> `<st c="6453">migrate</st>` <st c="6460">命令根据 Django 的默认设置创建初始数据库。</st>
    <st c="6533">请注意，项目根目录中有一个</st> `<st c="6554">db.sqlite3</st>` <st c="6564">文件。</st>
    <st c="6598">此文件代表我们的 SQLite 数据库。</st> <st c="6640">它是在我们第一次运行</st> `<st c="6675">migrate</st>`
    <st c="6682">或</st> `<st c="6686">runserver</st>`<st c="6695">时创建的。</st>
- en: <st c="6696">In the previous case, the</st> `<st c="6723">migrate</st>` <st
    c="6730">command applied 18 default migrations (as shown in</st> *<st c="6782">Figure
    5</st>**<st c="6790">.1</st>*<st c="6792">).</st> <st c="6796">Those migrations
    were defined by some default Django apps –</st> `<st c="6856">admin</st>`<st c="6861">,</st>
    `<st c="6863">auth</st>`<st c="6867">,</st> `<st c="6869">contenttypes</st>`<st
    c="6881">, and</st> `<st c="6887">sessions</st>`<st c="6895">. These apps are
    loaded in the</st> `<st c="6926">INSTALLED_APPS</st>` <st c="6940">variable in
    the</st> `<st c="6957">moviesstore/settings.py</st>` <st c="6980">file.</st>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6696">在前一个例子中，</st> `<st c="6723">migrate</st>` <st c="6730">命令应用了 18
    个默认迁移（如图</st> *<st c="6782">图 5</st>**<st c="6790">.1</st>*<st c="6792">所示）。</st>
    <st c="6796">这些迁移是由一些默认 Django 应用程序定义的 –</st> `<st c="6856">admin</st>`<st c="6861">、</st>
    `<st c="6863">auth</st>`<st c="6867">、</st> `<st c="6869">contenttypes</st>`<st
    c="6881">和</st> `<st c="6887">sessions</st>`<st c="6895">。这些应用程序在</st> `<st c="6926">INSTALLED_APPS</st>`
    <st c="6940">变量中加载，位于</st> `<st c="6957">moviesstore/settings.py</st>` <st c="6980">文件中。</st>
- en: <st c="6986">So, the</st> `<st c="6995">migrate</st>` <st c="7002">command runs
    the migrations of all the installed apps.</st> <st c="7058">Note that</st> `<st
    c="7068">INSTALLED_APPS</st>` <st c="7082">also loads the</st> `<st c="7098">movies</st>`
    <st c="7104">app.</st> <st c="7110">However, no migrations were applied for the</st>
    `<st c="7154">movies</st>` <st c="7160">app.</st> <st c="7166">This is because
    we haven’t generated the migrations for the</st> `<st c="7226">movies</st>` <st
    c="7232">app:</st>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6986">因此，</st> `<st c="6995">migrate</st>` <st c="7002">命令运行所有已安装应用程序的迁移。</st>
    <st c="7058">请注意</st> `<st c="7068">INSTALLED_APPS</st>` <st c="7082">还加载了</st>
    `<st c="7098">movies</st>` <st c="7104">应用程序。</st> <st c="7110">然而，没有为</st> `<st
    c="7154">movies</st>` <st c="7160">应用程序应用迁移。</st> <st c="7166">这是因为我们没有为</st>
    `<st c="7226">movies</st>` <st c="7232">应用程序生成迁移：</st>
- en: '![Figure 5.1 – Applying default Django migrations](img/B22457_05_01.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 应用默认 Django 迁移](img/B22457_05_01.jpg)'
- en: <st c="7850">Figure 5.1 – Applying default Django migrations</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7850">图 5.1 – 应用默认 Django 迁移</st>
- en: <st c="7897">Creating custom migrations</st>
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="7897">创建自定义迁移</st>
- en: <st c="7924">Currently, we’ve defined</st> <st c="7949">a</st> `<st c="7952">Movie</st>`
    <st c="7957">model inside the</st> `<st c="7975">movies</st>` <st c="7981">app.</st>
    <st c="7987">Based on that model, we can create our own migrations.</st> <st c="8042">To
    create the migrations for the</st> `<st c="8075">movies</st>` <st c="8081">app,
    we need to run the</st> `<st c="8106">makemigrations</st>` <st c="8120">command
    in</st> <st c="8132">the terminal:</st>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7924">目前，我们在</st> `<st c="7949">movies</st>` <st c="7952">应用中定义了一个</st>
    `<st c="7952">电影</st>` <st c="7957">模型。</st> <st c="7987">基于该模型，我们可以创建自己的迁移。</st>
    <st c="8042">要为</st> `<st c="8075">movies</st>` <st c="8081">应用创建迁移，我们需要在</st>
    `<st c="8106">makemigrations</st>` <st c="8120">命令中</st> `<st c="8132">终端</st>`
    中运行：</st>
- en: <st c="8145">For macOS, run the</st> <st c="8165">following command:</st>
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8145">对于 macOS，运行以下命令：</st>
- en: '[PRE6]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="8216">For Windows, run the</st> <st c="8238">following command:</st>
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8216">对于 Windows，运行以下命令：</st>
- en: '[PRE7]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <st c="8288">The previous command creates migration files based on the models
    that we’ve defined in our Django apps (see</st> *<st c="8397">Figure 5</st>**<st
    c="8405">.2</st>*<st c="8407">):</st>
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8288">上一个命令基于我们在 Django 应用中定义的模型创建迁移文件（见</st> *<st c="8397">图 5</st>**<st
    c="8405">.2</st>*<st c="8407">）：</st>
- en: '![Figure 5.2 – Executing the makemigrations command](img/B22457_05_02.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 执行 makemigrations 命令](img/B22457_05_02.jpg)'
- en: <st c="8462">Figure 5.2 – Executing the makemigrations command</st>
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8462">图 5.2 – 执行 makemigrations 命令</st>
- en: <st c="8511">The migrations are stored in the corresponding app-level</st> `<st
    c="8569">migrations</st>` <st c="8579">folder.</st> <st c="8588">For now, we have
    only defined the</st> `<st c="8622">Movie</st>` <st c="8627">model inside the</st>
    `<st c="8645">movies</st>` <st c="8651">app.</st> <st c="8657">So, this command
    generates the migration file for the</st> `<st c="8711">Movie</st>` <st c="8716">model
    inside the</st> `<st c="8734">movies/migrations/</st>` <st c="8752">folder (see</st>
    *<st c="8765">Figure 5</st>**<st c="8773">.3</st>*<st c="8775">):</st>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8511">迁移存储在相应的应用级</st> `<st c="8569">迁移</st>` <st c="8579">文件夹中。</st>
    <st c="8588">目前，我们只在</st> `<st c="8622">电影</st>` <st c="8627">模型中定义了</st> `<st
    c="8645">movies</st>` <st c="8651">应用。</st> <st c="8657">因此，此命令在</st> `<st c="8711">电影</st>`
    <st c="8716">模型中生成迁移文件，位于</st> `<st c="8734">movies/migrations/</st>` <st c="8752">文件夹中（见</st>
    *<st c="8765">图 5</st>**<st c="8773">.3</st>*<st c="8775">）：</st>
- en: '![Figure 5.3 – Generated migrations for the movies app](img/B22457_05_03.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 为电影应用生成的迁移](img/B22457_05_03.jpg)'
- en: <st c="8883">Figure 5.3 – Generated migrations for the movies app</st>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8883">图 5.3 – 为电影应用生成的迁移</st>
- en: <st c="8935">If we change the</st> `<st c="8953">Movie</st>` <st c="8958">model
    or create new models, we need to execute the</st> `<st c="9010">makemigrations</st>`
    <st c="9024">command again.</st> <st c="9040">This command will create new migration
    files that will serve as a version control</st> <st c="9121">of our</st> <st c="9129">database
    schema.</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8935">如果我们更改</st> `<st c="8953">电影</st>` <st c="8958">模型或创建新的模型，我们需要再次执行</st>
    `<st c="9010">makemigrations</st>` <st c="9024">命令。</st> <st c="9040">此命令将创建新的迁移文件，这些文件将作为我们</st>
    <st c="9121">数据库模式</st> <st c="9129">的版本控制。</st>
- en: <st c="9145">Note that the migration file was created, but the database hasn’t
    been</st> <st c="9217">updated yet.</st>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9145">请注意，迁移文件已创建，但数据库尚未</st> <st c="9217">更新。</st>
- en: <st c="9229">Applying custom migrations</st>
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="9229">应用自定义迁移</st>
- en: <st c="9256">After running</st> `<st c="9271">makemigrations</st>`<st c="9285">,
    you typically need</st> <st c="9305">to run</st> `<st c="9313">migrate</st>` <st
    c="9320">to apply those migrations to the database and make the corresponding
    changes.</st> <st c="9399">Now, execute the following in</st> <st c="9429">the
    Terminal:</st>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9256">运行</st> `<st c="9271">makemigrations</st>`<st c="9285">后，通常需要运行</st>
    <st c="9305">migrate</st> <st c="9320">命令将迁移应用到数据库并做出相应的更改。</st> <st c="9399">现在，在</st>
    <st c="9429">终端</st> 中执行以下操作：</st>
- en: <st c="9442">For macOS, run the</st> <st c="9462">following command:</st>
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="9442">对于 macOS，运行以下命令：</st>
- en: '[PRE8]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <st c="9506">For Windows, run the</st> <st c="9528">following command:</st>
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="9506">对于 Windows，运行以下命令：</st>
- en: '[PRE9]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <st c="9571">As shown in</st> *<st c="9584">Figure 5</st>**<st c="9592">.4</st>*<st
    c="9594">, we applied the</st> `<st c="9611">movies</st>` <st c="9617">app migrations:</st>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9571">如图</st> *<st c="9584">图 5</st>**<st c="9592">.4</st>*<st c="9594">所示，我们应用了</st>
    `<st c="9611">movies</st>` <st c="9617">应用的迁移：</st>
- en: '![Figure 5.4 – Applying the movies app migrations](img/B22457_05_04.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – 应用电影应用迁移](img/B22457_05_04.jpg)'
- en: <st c="9778">Figure 5.4 – Applying the movies app migrations</st>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9778">图 5.4 – 应用电影应用迁移</st>
- en: <st c="9825">In summary, each time you make changes to a model file, you have
    to do</st> <st c="9897">the following:</st>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9825">总之，每次你修改模型文件时，你必须做以下操作：</st> <st c="9897">以下操作：</st>
- en: <st c="9911">For macOS, run the</st> <st c="9931">following command:</st>
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="9911">对于 macOS，运行以下命令：</st> <st c="9931">以下命令：</st>
- en: '[PRE10]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <st c="10008">For Windows, run the</st> <st c="10030">following command:</st>
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10008">对于 Windows，运行以下命令：</st> <st c="10030">以下命令：</st>
- en: '[PRE11]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: <st c="10105">But how do we access our database</st> <st c="10139">and view
    what’s inside?</st> <st c="10164">For that, we use a powerful tool in Django called
    the admin interface.</st> <st c="10235">We’ll discuss this in the</st> <st c="10261">next
    section.</st>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10105">但我们如何访问我们的数据库</st> <st c="10139">并查看里面的内容？</st> <st c="10164">为此，我们使用
    Django 中的一个强大工具，即管理界面。</st> <st c="10235">我们将在下一节中讨论这一点。</st>
- en: <st c="10274">Accessing the Django admin interface</st>
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="10274">访问 Django 管理界面</st>
- en: <st c="10311">To access</st> <st c="10322">our database, we have to go into
    the Django admin interface.</st> <st c="10383">Remember that there is an</st>
    `<st c="10409">admin</st>` <st c="10414">path</st> <st c="10420">in</st> `<st
    c="10423">/moviesstore/urls.py</st>`
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10311">要访问</st> <st c="10322">我们的数据库，我们必须进入 Django 管理界面。</st> <st c="10383">请记住，在</st>
    `<st c="10409">admin</st>` <st c="10414">路径</st> <st c="10420">中</st> `<st c="10423">/moviesstore/urls.py</st>`
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: <st c="10568">If you go to</st> `<st c="10582">localhost:8000/admin</st>`<st
    c="10602">, you’ll be taken to the admin site, as shown in</st> *<st c="10651">Figure
    5</st>**<st c="10659">.5</st>*<st c="10661">:</st>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10568">如果你访问</st> `<st c="10582">localhost:8000/admin</st>`<st c="10602">，你将被带到管理站点，如图</st>
    *<st c="10651">图 5</st>**<st c="10659">.5</st>*<st c="10661">所示：</st>
- en: '![Figure 5.5 – Admin page](img/B22457_05_05.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – 管理页面](img/B22457_05_05.jpg)'
- en: <st c="10768">Figure 5.5 – Admin page</st>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10768">图 5.5 – 管理页面</st>
- en: <st c="10791">Django has a powerful built-in admin interface that provides a
    visual way of managing all aspects of a Django project – for example, users, movies,</st>
    <st c="10940">and more.</st>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10791">Django 有一个强大的内置管理界面，它以可视化的方式管理 Django 项目的所有方面 – 例如，用户、电影，等等。</st>
    <st c="10940">更多。</st>
- en: <st c="10949">With what username</st> <st c="10968">and password do we log in
    to the admin interface?</st> <st c="11019">For this, we have to create a superuser
    in</st> <st c="11062">the Terminal.</st>
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10949">我们用什么用户名和密码登录到管理界面？</st> <st c="10968">为此，我们必须在终端中创建一个超级用户。</st>
    <st c="11019">对于此，我们必须在终端中创建一个超级用户。</st> <st c="11062">以下操作：</st>
- en: <st c="11075">Creating a superuser</st>
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="11075">创建超级用户</st>
- en: <st c="11096">Let’s create a superuser</st> <st c="11121">to access the admin
    panel.</st> <st c="11149">In the Terminal, stop the server and do</st> <st c="11189">the
    following:</st>
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11096">让我们创建一个超级用户</st> <st c="11121">以访问管理面板。</st> <st c="11149">在终端中，停止服务器并执行以下操作：</st>
    <st c="11189">以下操作：</st>
- en: <st c="11203">For macOS, run the</st> <st c="11223">following command:</st>
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11203">对于 macOS，运行以下命令：</st> <st c="11223">以下命令：</st>
- en: '[PRE13]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: <st c="11275">For Windows, run the</st> <st c="11297">following command:</st>
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11275">对于 Windows，运行以下命令：</st> <st c="11297">以下命令：</st>
- en: '[PRE14]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: <st c="11348">You will then be asked to specify a username, email, and password.</st>
    <st c="11416">Note that anyone can access the admin path on your site, so make
    sure that your password is something secure.</st> <st c="11526">After creating</st>
    <st c="11540">the superuser, you should get a message like this from</st> <st
    c="11596">the Terminal:</st>
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11348">然后，你将被要求指定用户名、电子邮件和密码。</st> <st c="11416">请注意，任何人都可以访问你网站上的管理路径，所以请确保你的密码是安全的。</st>
    <st c="11526">创建超级用户后，你应该从终端收到如下消息：</st> <st c="11540">以下消息：</st> <st c="11596">终端</st>
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: <st c="11641">Restoring your superuser password</st>
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="11641">恢复超级用户密码</st>
- en: <st c="11675">If you wish to change your password</st> <st c="11711">later,
    you can run the</st> <st c="11735">following commands:</st>
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11675">如果你稍后想更改密码，你可以运行以下命令：</st> <st c="11711">以下命令：</st> <st c="11735">以下命令：</st>
- en: <st c="11754">Here’s the command</st> <st c="11774">for macOS:</st>
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11754">以下是 macOS 的命令</st> <st c="11774">以下命令：</st>
- en: '[PRE16]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: <st c="11828">Here’s the command</st> <st c="11848">for Windows:</st>
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11828">这是 Windows 的命令</st> <st c="11848">以下命令：</st>
- en: '[PRE17]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: <st c="11903">Accessing the admin panel</st>
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="11903">访问管理面板</st>
- en: <st c="11929">Now, start the server again and log in to admin</st> <st c="11977">with
    the username you just created, as shown in</st> *<st c="12026">Figure 5</st>**<st
    c="12034">.6</st>*<st c="12036">:</st>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11929">现在，再次启动服务器并使用您刚刚创建的用户名登录到管理员</st> <st c="11977">，如图</st> *<st
    c="12026">图5</st>**<st c="12034">.6</st>*<st c="12036">所示：</st>
- en: '![Figure 5.6 – Site administration page](img/B22457_05_06.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图5.6 – 网站管理页面](img/B22457_05_06.jpg)'
- en: <st c="12280">Figure 5.6 – Site administration page</st>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12280">图5.6 – 网站管理页面</st>
- en: <st c="12317">Under</st> **<st c="12324">Users</st>**<st c="12329">, you’ll
    see the user you’ve just created, as shown in</st> *<st c="12384">Figure 5</st>**<st
    c="12392">.7</st>*<st c="12394">:</st>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12317">在</st> **<st c="12324">用户</st>**<st c="12329">下，您将看到您刚刚创建的用户，如图</st>
    *<st c="12384">图5</st>**<st c="12392">.7</st>*<st c="12394">所示：</st>
- en: '![Figure 5.7 – The Users admin page](img/B22457_05_07.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图5.7 – 用户管理页面](img/B22457_05_07.jpg)'
- en: <st c="12681">Figure 5.7 – The Users admin page</st>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12681">图5.7 – 用户管理页面</st>
- en: <st c="12714">You can add</st> <st c="12727">additional user accounts here for</st>
    <st c="12761">your team.</st>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12714">您可以在此处添加</st> <st c="12727">额外的用户账户</st> <st c="12761">以供您的团队使用。</st>
- en: <st c="12771">Currently, our</st> `<st c="12787">Movie</st>` <st c="12792">model
    doesn’t show up in admin.</st> <st c="12825">We need to explicitly tell Django
    what to display in it.</st> <st c="12882">Before adding our</st> `<st c="12900">Movie</st>`
    <st c="12905">model in admin, let’s configure our project so that images can</st>
    <st c="12969">be uploaded.</st>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12771">目前，我们的</st> `<st c="12787">电影</st>` <st c="12792">模型在管理界面中未显示。</st>
    <st c="12825">我们需要明确告诉Django在管理界面中显示什么。</st> <st c="12882">在我们将</st> `<st c="12900">电影</st>`
    <st c="12905">模型添加到管理界面之前，让我们配置我们的项目，以便可以上传图像。</st>
- en: <st c="12981">Configuring image upload</st>
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="12981">配置图片上传</st>
- en: <st c="13006">We have to configure</st> <st c="13027">where we wish to store
    our images when we add them.</st> <st c="13080">First, in</st> `<st c="13090">/moviesstore/settings.py</st>`<st
    c="13114">, add the following in bold at the end of</st> <st c="13156">the file:</st>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13006">我们必须配置</st> <st c="13027">我们在添加图像时要存储的位置。</st> <st c="13080">首先，在</st>
    `<st c="13090">/moviesstore/settings.py</st>`<st c="13114">中，在文件末尾添加以下粗体内容：</st>
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: <st c="13233">Let’s explain the</st> <st c="13252">previous code:</st>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13233">让我们解释一下</st> <st c="13252">之前的代码：</st>
- en: '`<st c="13266">MEDIA_ROOT</st>`<st c="13277">: This variable specifies the
    filesystem path to the directory where uploaded media files will be stored.</st>
    <st c="13384">Here,</st> `<st c="13390">BASE_DIR</st>` <st c="13398">is a variable
    that represents the base directory of the Django project, and</st> `<st c="13475">''media''</st>`
    <st c="13482">is the subdirectory within</st> `<st c="13510">BASE_DIR</st>` <st
    c="13518">where media files will be stored.</st> <st c="13553">So,</st> `<st c="13557">MEDIA_ROOT</st>`
    <st c="13567">will be set to a path</st> <st c="13590">like</st> `<st c="13595">/your_project_folder/media</st>`<st
    c="13621">.</st>'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="13266">MEDIA_ROOT</st>`<st c="13277">: 这个变量指定了上传媒体文件将存储的文件系统路径。</st>
    <st c="13384">在此处，</st> `<st c="13390">BASE_DIR</st>` <st c="13398">是一个变量，代表Django项目的基目录，而</st>
    `<st c="13475">''media''</st>` <st c="13482">是位于</st> `<st c="13510">BASE_DIR</st>`
    <st c="13518">中的子目录，其中将存储媒体文件。</st> <st c="13553">因此，</st> `<st c="13557">MEDIA_ROOT</st>`
    <st c="13567">将被设置为类似</st> `<st c="13595">/your_project_folder/media</st>`<st
    c="13621">的路径。</st>'
- en: '`<st c="13622">MEDIA_URL</st>`<st c="13632">: This variable specifies the URL
    prefix that will be used to serve media files from the web server.</st> <st c="13734">In
    this code, it’s set to</st> `<st c="13760">''/media/''</st>`<st c="13769">, meaning
    that media files uploaded to the Django application will be accessible via URLs
    starting with</st> `<st c="13873">/media/</st>`<st c="13880">. For example, if
    you upload an image named</st> `<st c="13924">example.jpg</st>`<st c="13935">,
    it might be accessible at a URL</st> <st c="13969">like</st> <st c="13974">http://localhost:8000/media/example.jpg</st><st
    c="14013">.</st>'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="13622">MEDIA_URL</st>`<st c="13632">: 这个变量指定了将用于从网络服务器提供媒体文件的URL前缀。</st>
    <st c="13734">在此代码中，它被设置为</st> `<st c="13760">''/media/''</st>`<st c="13769">，这意味着上传到Django应用程序的媒体文件将通过以</st>
    `<st c="13873">/media/</st>`<st c="13880">开头的URL进行访问。</st> 例如，如果你上传一个名为</st> `<st
    c="13924">example.jpg</st>`<st c="13935">的图片，它可能可以通过以下URL</st> <st c="13969">访问</st>
    <st c="13974">http://localhost:8000/media/example.jpg</st><st c="14013">。</st>'
- en: <st c="14014">With that, the server has been configured</st> <st c="14056">for
    image upload.</st> <st c="14075">So, let’s learn how to serve</st> <st c="14104">those
    images.</st>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14014">这样，服务器已经配置好了图像上传。</st> <st c="14056">因此，让我们学习如何提供</st> <st c="14104">这些图像。</st>
- en: <st c="14117">Serving the stored images</st>
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="14117">服务存储的图像</st>
- en: <st c="14143">Next, to enable the</st> <st c="14164">server to serve the stored
    images, we have to modify the</st> `<st c="14221">/moviesstore/urls.py</st>` <st
    c="14241">file and add the following</st> <st c="14269">in bold:</st>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14143">接下来，为了使服务器能够服务存储的图像，我们必须修改</st> `<st c="14221">/moviesstore/urls.py</st>`
    <st c="14241">文件，并添加以下</st> <st c="14269">粗体内容：</st>
- en: '[PRE19]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: from django.contrib import admin <st c="15266">from .models import Movie</st>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: from django.contrib import admin <st c="15266">from .models import Movie</st>
- en: '<st c="15392">/admin</st>. The <st c="15404">Movie</st> model will now appear
    (as shown in *<st c="15445">Figure 5</st>**<st c="15453">.8</st>*):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15392">/admin</st>. 现在，<st c="15404">电影</st> 模型将显示（如图</st> *<st c="15445">图
    5</st>**<st c="15453">.8</st>）：
- en: '![Figure 5.8 – Admin page with movies available](img/B22457_05_08.jpg)'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 5.8 – 可用电影的管理页面](img/B22457_05_08.jpg)'
- en: <st c="15629">Figure 5.8 – Admin page with movies available</st>
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="15629">图 5.8 – 可用电影的管理页面</st>
- en: <st c="15674">Try adding a</st> `<st c="15688">movie</st>` <st c="15693">object
    by clicking</st> **<st c="15713">+Add</st>**<st c="15717">. You</st> <st c="15722">will
    be brought</st> <st c="15738">to the</st> **<st c="15746">Add movie</st>** <st
    c="15755">form, as shown in</st> *<st c="15774">Figure 5</st>**<st c="15782">.9</st>*<st
    c="15784">:</st>
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="15674">通过点击</st> **<st c="15713">+添加</st>**<st c="15717">来尝试添加一个</st>
    `<st c="15688">电影</st>` <st c="15693">对象。您将被带到</st> **<st c="15746">添加电影</st>**
    <st c="15755">表单，如图</st> *<st c="15774">图 5</st>**<st c="15782">.9</st>*<st c="15784">所示：</st>
- en: '![Figure 5.9 – The Add movie form](img/B22457_05_09.jpg)'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 5.9 – 添加电影表单](img/B22457_05_09.jpg)'
- en: <st c="16083">Figure 5.9 – The Add movie form</st>
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="16083">图 5.9 – 添加电影表单</st>
- en: <st c="16114">Try adding a movie and hit</st> **<st c="16142">Save</st>**<st
    c="16146">. Your movie object will be saved to the database and reflected in the
    admin page, as shown in</st> *<st c="16241">Figure 5</st>**<st c="16249">.10</st>*<st
    c="16252">:</st>
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="16114">尝试添加一个电影并点击</st> **<st c="16142">保存</st>**<st c="16146">。您的电影对象将被保存到数据库中，并在管理页面中显示，如图</st>
    *<st c="16241">图 5</st>**<st c="16249">.10</st>*<st c="16252">所示：</st>
- en: '![Figure 5.10 – Movies admin page](img/B22457_05_10.jpg)'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 5.10 – 电影管理页面](img/B22457_05_10.jpg)'
- en: <st c="16399">Figure 5.10 – Movies admin page</st>
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="16399">图 5.10 – 电影管理页面</st>
- en: <st c="16430">Note that the admin panel shows the movie’s information as a combination
    of the movie’s ID with a hyphen and the movie’s name.</st> <st c="16558">That’s
    because we defined the</st> `<st c="16588">Movie</st>` <st c="16593">model’s</st>
    `<st c="16602">__str__</st>` <st c="16609">method to work</st> <st c="16625">like
    that.</st>
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="16430">请注意，管理面板将电影信息显示为电影 ID 与短横线结合以及电影名称的组合。</st> <st c="16558">这是因为我们定义了</st>
    `<st c="16588">Movie</st>` <st c="16593">模型</st> 的 `<st c="16602">__str__</st>`
    <st c="16609">方法以这种方式工作。</st>
- en: <st c="16635">You can also see</st> <st c="16652">the movie</st> <st c="16662">image
    in</st> `<st c="16672">/moviesstore/media/movie_images/<image file>.jpg</st>`<st
    c="16720">.</st> *<st c="16722">Figure 5</st>**<st c="16730">.11</st>* <st c="16733">shows
    an image called</st> `<st c="16756">inception.jpg</st>` <st c="16769">stored in
    the</st> <st c="16784">previous folder:</st>
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="16635">您还可以在</st> `<st c="16672">/moviesstore/media/movie_images/<image
    file>.jpg</st>`<st c="16720">中看到电影</st> <st c="16722">图像。</st> *<st c="16722">图
    5</st>**<st c="16730">.11</st> <st c="16733">显示了存储在</st> <st c="16756">inception.jpg</st>
    <st c="16769">之前的文件夹中的图像：</st>
- en: '![Figure 5.11 – Location of stored movie images](img/B22457_05_11.jpg)'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 5.11 – 存储的电影图像位置](img/B22457_05_11.jpg)'
- en: <st c="16917">Figure 5.11 – Location of stored movie images</st>
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="16917">图 5.11 – 存储的电影图像位置</st>
- en: <st c="16962">Whenever you upload a movie image, it will be stored in the previous
    folder.</st> <st c="17040">With that, we’ve configured</st> <st c="17067">our
    project so that it can store</st> <st c="17100">and</st> <st c="17105">serve images.</st>
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="16962">每次您上传电影图像时，它将被存储在之前的文件夹中。</st> <st c="17040">通过这样，我们已经配置了我们的项目，使其能够存储和</st>
    <st c="17067">服务图像。</st>
- en: <st c="17118">Summary</st>
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="17118">总结</st>
- en: <st c="17126">Models are essential for working with databases in Django.</st>
    <st c="17186">In this chapter, we learned about the fundamentals of Django models
    and created a</st> `<st c="17268">Movie</st>` <st c="17273">model.</st> <st c="17281">We
    also learned how to use the Django admin interface and how to create movies.</st>
    <st c="17361">In the next chapter, we’ll learn how to extract and display the
    movies stored in our database on</st> <st c="17458">our site.</st>
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="17126">在Django中处理数据库时，模型是必不可少的。</st> <st c="17186">在本章中，我们学习了Django模型的基础知识，并创建了一个</st>
    `<st c="17268">电影</st>` <st c="17273">模型。</st> <st c="17281">我们还学习了如何使用Django管理界面以及如何创建电影。</st>
    <st c="17361">在下一章中，我们将学习如何从我们的数据库中提取并显示存储在我们的网站上的电影。</st>
- en: '[PRE20]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
