- en: Building a Falcon Application with Zappa
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zappa构建猎鹰应用程序
- en: In this chapter, we are going to implement an application based on the Falcon
    framework. This application will be related to quotes; you will be able to fetch
    a quote of the day and generate a random quote. I hope it will be interesting
    to you. We are going to include a scheduler, which will be responsible for fetching
    a random quote from a third party API and putting it into our database. We will
    set this scheduler to be executed once a day. Let's get ready for the ride.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将实施一个基于猎鹰框架的应用程序。这个应用程序将与引用相关；您将能够获取每日引用和生成一个随机引用。我希望这对您来说是有趣的。我们将包括一个调度程序，它将负责从第三方API获取一个随机引用并将其放入我们的数据库中。我们将设置这个调度程序每天执行一次。让我们为这次旅行做好准备。
- en: 'Topics we will cover in this chapter include the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Installing and configuring Falcon
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置猎鹰
- en: Designing Falcon APIs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计猎鹰API
- en: Building, testing, and deploying the Falcon APIs using Zappa
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Zappa构建、测试和部署猎鹰API
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before moving ahead with the development work in this chapter, I would like
    to recommend fulfilling the prerequisites in order to set up the development environment.
    The following is the list of technical requirements:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开发工作中继续之前，我想建议先满足设置开发环境的先决条件。以下是技术要求的列表：
- en: Ubuntu 16.04/macOS/Windows
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu 16.04/macOS/Windows
- en: Python 3.6
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6
- en: Pipenv tool
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pipenv工具
- en: Falcon
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 猎鹰
- en: Peewee
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Peewee
- en: Requests
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求
- en: Gunicorn
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gunicorn
- en: Zappa
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zappa
- en: In the next section, I have described the complete information for setting up
    the environment. Let's gear up for it and discover the journey toward serverless.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我已经描述了设置环境的完整信息。让我们为此做好准备，探索通往无服务器的旅程。
- en: Installing and configuring Falcon
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置猎鹰
- en: Configuring the Python application development requires us to set up virtual
    environments. With the help of a virtual environment, we are going to maintain
    all required packages. As discussed in [Chapter 6](part0151.html#4G04U0-8241a43bed654018b51365a570bcef1d),
    *Building a Django REST API with Zappa*, the pipenv packing tool maintains all
    installed packages in a virtual environment and keeps track of versions and dependencies.
    Let's move on to set up the virtual environment using the pipenv tool.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 配置Python应用程序开发需要我们设置虚拟环境。借助虚拟环境，我们将维护所有所需的软件包。正如在[第6章](part0151.html#4G04U0-8241a43bed654018b51365a570bcef1d)中讨论的那样，*使用Zappa构建Django
    REST API*，pipenv打包工具在虚拟环境中维护所有已安装的软件包，并跟踪版本和依赖项。让我们继续使用pipenv工具设置虚拟环境。
- en: Setting up the virtual environment
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置虚拟环境
- en: 'Before starting the actual implementation, we will set up the virtual environment
    using the pipenv tool. The following is the command to create a new virtual environment:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始实际实施之前，我们将使用pipenv工具设置虚拟环境。以下是创建新虚拟环境的命令：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, I explicitly mentioned the Python version because I use many other Python
    versions on my system. This command will create a `Pipfile` as shown here:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我明确提到了Python版本，因为我在我的系统上使用了许多其他Python版本。这个命令将创建一个`Pipfile`，如下所示：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, the preceding code has basic information about the environment
    but doesn't have anything under packages because we have not yet installed any
    packages. This file maintains a list of all installed packages. The pipenv tool
    creates a virtual environment at `~/.local/share/virtualenvs/`, and it will create
    the new environment from the directory when we call the preceding command. Once
    you execute the command, `Pipfile` will be created, as mentioned previously.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，前面的代码中包含了关于环境的基本信息，但在软件包下面没有任何内容，因为我们还没有安装任何软件包。这个文件维护了所有已安装软件包的列表。pipenv工具在`~/.local/share/virtualenvs/`创建一个虚拟环境，并且当我们调用前面的命令时，它将从该目录创建新的环境。一旦您执行了该命令，就会创建`Pipfile`，如前所述。
- en: You can execute the `pipenv shell` command to enable the virtual environment.
    Let's move on to the next section where we will install all the required packages.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以执行`pipenv shell`命令来启用虚拟环境。让我们继续下一节，我们将安装所有所需的软件包。
- en: Installing required packages
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装所需的软件包
- en: 'As we mentioned earlier, we are going to create a Falcon-based API application.
    So, we need to install some packages that we are going to use in our application.
    The following is the list of packages we will use in the implementation:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，我们将创建一个基于猎鹰的API应用程序。因此，我们需要安装一些我们将在实现中使用的软件包。以下是我们将在实现中使用的软件包列表：
- en: '`falcon`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`falcon`'
- en: '`zappa`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zappa`'
- en: '`gunicorn`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gunicorn`'
- en: '`peewee`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`peewee`'
- en: '`requests`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requests`'
- en: You can install these packages using the `pipenv install <package_name>` command.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`pipenv install <package_name>`命令安装这些软件包。
- en: You can install multiple packages at once by specifying the other packages separated
    by whitespace, such as `pipenv install <package_one> <package_two> ...`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过指定其他以空格分隔的软件包一次安装多个软件包，例如`pipenv install <package_one> <package_two> ...`。
- en: Once you have installed all these packages, pipenv will create a file named
    `Pipfile.lock`, which holds the information about versioning and dependencies.
    `Pipfile` will get updated.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您安装了所有这些软件包，pipenv将创建一个名为`Pipfile.lock`的文件，其中包含版本和依赖项的信息。`Pipfile`将被更新。
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'File—`Pipfile`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 文件—`Pipfile`：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we are done with the virtual environment setup, it is time to move
    on to implementing the application. But before moving on to setting up the environment,
    let's understand some important packages and their usage.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了虚拟环境的设置，是时候开始实施应用程序了。但在继续设置环境之前，让我们先了解一些重要的软件包及其用法。
- en: What is Falcon?
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是猎鹰？
- en: Falcon is a bare-metal Python web API framework. It can be used to build microservices
    with very fast performance.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 猎鹰是一个裸金属Python Web API框架。它可以用于构建具有非常快速性能的微服务。
- en: 'It is very flexible and easy to implement. It has a markable benchmark, compared
    to other frameworks. There are many giant organizations that are using Falcon
    such as Linkedin, OpenStack, RackSpace, and more. The following is a sample code
    snippet from Falcon''s site:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它非常灵活和易于实现。与其他框架相比，它具有显著的基准。有许多大型组织正在使用Falcon，如领英、OpenStack、RackSpace等。以下是Falcon网站上的示例代码片段：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It requires `gunicorn` to execute the API on the localhost server, as shown
    in the following code block:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 它需要`gunicorn`在本地主机上执行API，如下面的代码块所示：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Falcon is really simple, and it's much easier to implement REST APIs in Falcon,
    as it encourages us to follow REST architectural styles. You can read more about
    Falcon at: [https://falconframework.org/#](https://falconframework.org/#).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Falcon真的很简单，而且在Falcon中更容易实现REST API，因为它鼓励我们遵循REST架构风格。您可以在此处阅读有关Falcon的更多信息：[https://falconframework.org/#](https://falconframework.org/#)。
- en: What is Peewee?
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Peewee？
- en: Peewee is a simple and small **ORM** (**Object Relational Mapper**). It is designed
    to provide an ORM interface similar to Django or SQLAlchemy. It supports databases
    such as MySQL, Postgres, and SQLite.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Peewee是一个简单而小巧的**ORM**（**对象关系映射器**）。它旨在提供类似于Django或SQLAlchemy的ORM接口。它支持MySQL、Postgres和SQLite等数据库。
- en: 'The following is a sample code snippet , from Peewee''s GitHub page, for defining
    model classes:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Peewee的GitHub页面上的定义模型类的示例代码片段：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It's really amazing—we got the feasibility of designing the database models
    in Django fashion with a tiny wrapper. Peewee makes it really great and can be
    considered for writing small microservices.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的很棒——我们以Django风格设计数据库模型的可行性与一个小包装器。Peewee真的很棒，可以考虑用于编写小型微服务。
- en: Read more about Peewee at: [http://docs.peewee-orm.com/en/latest/](http://docs.peewee-orm.com/en/latest/).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处阅读有关Peewee的更多信息：[http://docs.peewee-orm.com/en/latest/](http://docs.peewee-orm.com/en/latest/)。
- en: Let's move on to the next section, where we will be using Falcon and Peewee
    practically.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续下一节，我们将在实际中使用Falcon和Peewee。
- en: Designing Falcon APIs
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计Falcon API
- en: We are going to design a REST API based on a quote concept. A quote might be
    something a famous person said, or it might be a dialog from a movie. We are going
    to use Mashape's **Random Famous Quotes** API ([https://market.mashape.com/andruxnet/random-famous-quotes](https://market.mashape.com/andruxnet/random-famous-quotes)).
    Mashape is an API platform and it provides many categories of APIs.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将基于报价概念设计一个REST API。报价可能是名人说的话，也可能是电影中的对话。我们将使用Mashape的**随机名人名言**API（[https://market.mashape.com/andruxnet/random-famous-quotes](https://market.mashape.com/andruxnet/random-famous-quotes)）。Mashape是一个API平台，提供许多类别的API。
- en: 'In our case, we will create a single API with the following operations:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们将创建一个包含以下操作的单个API：
- en: Generate or retrieve a quote for the day
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成或检索当天的报价
- en: Generate a random quote
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成随机报价
- en: For the first operation, we will need to store a random quote from the Mashape
    API into our database on a daily basis. Hence, we need to design a task scheduler
    to execute on a daily basis and to store the quote from the Mashape API into our
    database so that our API user can get the quote for the day.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一个操作，我们将需要每天将来自Mashape API的随机报价存储到我们的数据库中。因此，我们需要设计一个任务调度程序，以便每天执行并将来自Mashape
    API的报价存储到我们的数据库中，以便我们的API用户可以获得当天的报价。
- en: For the second operation, we don't need to persist each and every randomly generated
    quote from the Mashape API. Instead, we return the generated random quote to our
    API user.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二个操作，我们不需要将从Mashape API随机生成的每一条报价都持久化。相反，我们将生成的随机报价返回给我们的API用户。
- en: Scaffolding the application
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搭建应用程序
- en: 'When designing any application, scaffolding is an essential step to consider
    before implementing the solution. It helps us to manage the code base in an optimistic
    way. The following is the scaffolding of our application:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计任何应用程序时，搭建是在实施解决方案之前必须考虑的重要步骤。它帮助我们以一种乐观的方式管理代码库。以下是我们应用程序的搭建：
- en: '![](img/00075.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00075.jpeg)'
- en: Here, we divided the code base into different modules based on functionality.
    Let's have a look at each module in the upcoming sections.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们根据功能将代码库分成不同的模块。让我们在接下来的部分中看一下每个模块。
- en: Designing the model class
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计模型类
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'File—`models.py`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 文件—`models.py`：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we defined the `QuoteModel` by extending the `Model` class and defined
    attributes using the features of the Peewee library. The most essential part here
    is the database connectivity; as you can see, we used an SQLite database. We created
    the database file and placed it in the `/tmp` directory so that it would accessible
    in an AWS Lambda environment.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过扩展`Model`类定义了`QuoteModel`，并使用Peewee库的特性定义了属性。这里最重要的部分是数据库连接；正如您所看到的，我们使用了SQLite数据库。我们创建了数据库文件并将其放在`/tmp`目录中，以便在AWS
    Lambda环境中可以访问。
- en: Once we have defined the database using the `SqliteDatabase` class, we connect
    the database and create database tables as defined by models.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们使用`SqliteDatabase`类定义了数据库，我们就连接数据库并根据模型定义创建数据库表。
- en: The `db.create_tabless` method creates tables only if they do not exist.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`db.create_tabless`方法只在表不存在时创建表。'
- en: Now we are ready to use this `Model` class to perform any query operation. But,
    before creating resources, let's have a look at `mashape.py`, where we integrated
    the third-party API to get a random quote.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备使用这个`Model`类来执行任何查询操作。但是，在创建资源之前，让我们看一下`mashape.py`，在那里我们集成了第三方API以获取随机报价。
- en: Mashape API integration
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mashape API集成
- en: Mashape is the largest API marketplace for private and public APIs. There are
    thousands of API providers and consumers registered. Have a look at the marketplace
    at [https://market.mashape.com](https://market.mashape.com/). We are going to
    use the Random Famous Quote API ([https://market.mashape.com/andruxnet/random-famous-quotes](https://market.mashape.com/andruxnet/random-famous-quotes)).
    Once you are logged in to the Mashape marketplace, you can explore these APIs
    in detail. The following code snippet has one of the APIs that we are using to
    fetch a random quote.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Mashape是私人和公共API的最大API市场。有数千个API提供者和消费者注册。请查看市场[https://market.mashape.com](https://market.mashape.com/)。我们将使用随机名言引用API([https://market.mashape.com/andruxnet/random-famous-quotes](https://market.mashape.com/andruxnet/random-famous-quotes))。一旦您登录Mashape市场，您可以详细了解这些API。以下代码片段是我们用来获取随机引用的API之一。
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'File—`mashape.py`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 - `mashape.py`：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we have written a method named `fetch_quote`. This method is responsible
    for fetching the quote from the Mashape API and returning the quote data in Python
    dictionary format. We are going to use this method at different places as per
    our requirements.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们编写了一个名为`fetch_quote`的方法。此方法负责从Mashape API获取引用并以Python字典格式返回引用数据。根据我们的需求，我们将在不同的地方使用此方法。
- en: Creating API resources
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建API资源
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'File—`resources.py`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 - `resources.py`：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we created the `QuoteResource` class and implemented the `on_get` method
    to handle `GET` requests. In order to perform different operations of generating
    the daily quote and random quote, we defined a query parameter named `type`, for
    example, `http://<API_URL>?type=daily|random`. Hence, based on the query parameter,
    we serve the request.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了`QuoteResource`类，并实现了`on_get`方法来处理`GET`请求。为了执行生成每日引用和随机引用的不同操作，我们定义了一个名为`type`的查询参数，例如，`http://<API_URL>?type=daily|random`。因此，根据查询参数，我们提供服务。
- en: We are done with the implementation. We will look at the execution, scheduling,
    and deployment in the next section.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了实施。我们将在下一节中查看执行、调度和部署。
- en: Building, testing, and deploying Falcon APIs using Zappa
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zappa构建、测试和部署Falcon API
- en: Irrespective of other frameworks, Falcon requires the `gunicorn` library for
    execution. Gunicorn is a lightweight Python WSGI HTTP server. Falcon doesn't have
    any default behavior to server WSGI; instead, Falcon mainly focuses on API architectural
    styles and performance. Let's move on to executing the API in the local environment.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他框架无关，Falcon需要`gunicorn`库进行执行。Gunicorn是一个轻量级的Python WSGI HTTP服务器。Falcon没有任何默认行为来提供WSGI服务；相反，Falcon主要关注API架构风格和性能。让我们继续在本地环境中执行API。
- en: Local execution using gunicorn
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用gunicorn进行本地执行
- en: 'For local execution, we are going to use `gunicorn`. The following is the log
    of the `gunicorn` execution:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本地执行，我们将使用`gunicorn`。以下是`gunicorn`执行的日志：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We are using the `resources` module and the `api` object for the execution.
    We created the `api` object using the `resources` module.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用`resources`模块和`api`对象进行执行。我们使用`resources`模块创建了`api`对象。
- en: API for the daily quote
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每日引用的API
- en: 'We implemented the `/quote` API and separated operations based on the query
    parameters. Let''s execute the `/quote?type=daily` API. The following is the log
    snippet of the daily quote API execution using the cURL command-line tool:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了`/quote` API，并根据查询参数分离了操作。让我们执行`/quote?type=daily` API。以下是使用cURL命令行工具执行每日引用API的日志片段：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This API will return a unique quote every day.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此API将每天返回一个独特的引用。
- en: API of the random quote
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机引用的API
- en: 'Now, let''s execute another operation on the `/quote` API such as `/quote?type=random`.
    This API will return a random quote on each request. The following is a log of
    the API execution:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们对`/quote` API执行另一个操作，例如`/quote?type=random`。此API将在每个请求上返回一个随机引用。以下是API执行的日志：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This API will return a random quote record on each request.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此API将在每个请求上返回一个随机引用记录。
- en: Configuring Zappa
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Zappa
- en: Once we have installed Zappa while setting up the virtual environment, we are
    good to configure Zappa with our application. The following are the operations
    we would execute in order to configure Zappa.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在设置虚拟环境时安装了Zappa，我们就可以配置Zappa与我们的应用程序。以下是我们将执行的操作，以配置Zappa。
- en: Zappa initialization
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zappa初始化
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'File—`zappa_settings.json`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 - `zappa_settings.json`：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here, we defined the configuration as per the requirements. As the key defines
    each configuration, we can see the usages of it:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们根据要求定义了配置。由于密钥定义了每个配置，我们可以看到它的用法：
- en: '`aws_region`: The AWS region where the lambda would get uploaded'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aws_region`: lambda将上传的AWS区域'
- en: '`app_function`: The import path of the `api` object from the `resources` module'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app_function`: 从`resources`模块导入`api`对象的导入路径'
- en: '`profile_name`: The AWS CLI configuration profile that is defined in the `~/.aws/credentials`
    file'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`profile_name`: 在`~/.aws/credentials`文件中定义的AWS CLI配置文件'
- en: '`project_name`: The project name for the uploading lambda function.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`project_name`: 上传lambda函数的项目名称。'
- en: '`runtime`: The Python runtime interpreter'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runtime`: Python运行时解释器'
- en: '`s3_bucket`: Creates an Amazon S3 bucket and uploads the deployment packages'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s3_bucket`: 创建一个Amazon S3存储桶并上传部署包。'
- en: '`remote_env`: Sets the environment variable of all the key-value pairs mentioned
    in the uploaded JSON file at the Amazon S3 location'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remote_env`: 在Amazon S3位置上传的JSON文件中设置所有键值对的环境变量'
- en: With the help of this configuration information, we can proceed with the deployment.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 借助这些配置信息，我们可以继续部署。
- en: Zappa deployment
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zappa部署
- en: Once we are done with the configuration, then we can process the deployment.
    Zappa provides two different commands to perform the deployment, `zappa deploy
    <stage_name>` and `zappa update <stage_name>`. Initially, we use the `zappadeploy
    <stage_name>` command as it is the first time that we are deploying this lambda
    application.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置完成，我们就可以进行部署。Zappa提供了两个不同的命令来执行部署，`zappa deploy <stage_name>`和`zappa update
    <stage_name>`。最初，我们使用`zappa deploy <stage_name>`命令，因为这是我们首次部署此lambda应用程序。
- en: If you have already deployed the application and want to redeploy it, then you
    would use the `zappa update <stage_name>` command. In the previous chapter, we
    had a detailed discussion about the deployment process of Zappa, so you can refer
    to that for more information.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经部署了应用程序并希望重新部署，则可以使用`zappa update <stage_name>`命令。在前一章中，我们对Zappa的部署过程进行了详细讨论，因此您可以参考那里获取更多信息。
- en: 'The following is the log of our deployment process:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们部署过程的日志：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, I use `zappa update dev` to deploy my existing application. This command
    will print the deployed URL at the end; we can use it to test the application
    in the production environment.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我使用`zappa update dev`来部署我的现有应用程序。此命令将在最后打印部署的URL；我们可以使用它在生产环境中测试应用程序。
- en: Executing in the production environment
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在生产环境中执行
- en: Since we deployed our application on AWS Lambda using Zappa, Zappa configures
    the API Gateway with the proxy to AWS Lambda. Hence, it will have a randomly generated
    API Gateway link, as mentioned in the previous section.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用Zappa在AWS Lambda上部署了应用程序，Zappa配置了具有代理到AWS Lambda的API Gateway。因此，它将具有在前一节中提到的随机生成的API
    Gateway链接。
- en: Now, let's execute our API using the generated link ([https://0uqnn5ql3a.execute-api.ap-south-1.amazonaws.com/dev/quote](https://0uqnn5ql3a.execute-api.ap-south-1.amazonaws.com/dev/quote)).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用生成的链接执行我们的API（[https://0uqnn5ql3a.execute-api.ap-south-1.amazonaws.com/dev/quote](https://0uqnn5ql3a.execute-api.ap-south-1.amazonaws.com/dev/quote)）。
- en: Daily quote API execution
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每日引用API执行
- en: The execution operation will be similar to the local execution, but it will
    have a little bit of an impact on the API Gateway, because there are many features
    available in the AWS API Gateway that can be used to enhance our API performance
    and optimization.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 执行操作将类似于本地执行，但它将对API Gateway产生一些影响，因为AWS API Gateway中有许多可用于增强API性能和优化的功能。
- en: 'The following is the log snippet of the daily quote API execution using cURL
    tool:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用cURL工具执行每日引用API的日志片段：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Our application is live as a serverless application. You can use it without
    worrying much about the server, as it is capable of serving millions of request
    per second and Amazon will take care of its scalability and availability. Let's
    try another API.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序作为无服务器应用程序正在运行。您可以使用它而不必过多担心服务器，因为它能够每秒提供数百万次请求，并且亚马逊将负责其可伸缩性和可用性。让我们尝试另一个API。
- en: Random quote API execution
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机引用API执行
- en: 'Let''s execute the random quote API. The following is a snippet of the random
    quote API execution:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行随机引用API。以下是随机引用API执行的片段：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You can see that this execution takes 1.369 seconds, because we are explicitly
    making another request to the Mashape API to fetch the random quote. We can make
    this execution faster by adding caching support to the API Gateway service.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到此执行需要1.369秒，因为我们明确发出了另一个请求到Mashape API以获取随机引用。通过为API Gateway服务添加缓存支持，我们可以使此执行更快。
- en: Enabling caching on the API Gateway
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在API Gateway上启用缓存
- en: The AWS API Gateway provides a feature to add caching for your API endpoint
    responses. It will help to reduce the network latency and return cached responses
    to the user without hitting the AWS Lambda function.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: AWS API Gateway提供了一个功能，可以为API端点响应添加缓存。它将有助于减少网络延迟，并向用户返回缓存的响应，而无需触发AWS Lambda函数。
- en: Zappa has the ability to configure caching on the AWS API Gateway; you don't
    need to configure the caching manually from the AWS web console. The following
    is the configuration needed to add in the `zappa_settings.json` file to enable
    caching on the API Gateway.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa具有配置AWS API Gateway上缓存的能力；您无需手动从AWS Web控制台配置缓存。以下是在`zappa_settings.json`文件中添加的配置，以启用API
    Gateway上的缓存。
- en: 'File—`zappa_settings.json`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 文件—`zappa_settings.json`：
- en: '[PRE21]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As mentioned, the caching options in the `zappa_settings.json` file. Let''s
    see its usage:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在`zappa_settings.json`文件中的缓存选项。让我们看看它的用法：
- en: '`cache_cluster_enabled`: Default is `false`; this option is set to `true` to
    enable the API Gateway cache cluster.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache_cluster_enabled`：默认为`false`；此选项设置为`true`以启用API Gateway缓存集群。'
- en: '`cache_cluster_size`: Default is 0.5 GB; this indicates the cache memory size.
    If required, we can increase the size as well.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache_cluster_size`：默认为0.5 GB；这表示缓存内存大小。如果需要，我们也可以增加大小。'
- en: '`cache_cluster_ttl`: Default is 300 seconds; this option is to set the **time-to-live**
    (**TTL**) for the response caches in memory. It has a maximum limit of 3,600 seconds,
    and in order to disable it, you can set it to 0 seconds.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache_cluster_ttl`：默认为300秒；此选项用于设置内存中响应缓存的**生存时间**（TTL）。最大限制为3,600秒，如果要禁用它，可以将其设置为0秒。'
- en: '`cache_cluster_encrypted`: Default is `false`; set this option to `true` if
    you want to encrypt the cached responses data.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache_cluster_encrypted`：默认为`false`；如果要加密缓存的响应数据，则将此选项设置为`true`。'
- en: This is how you can enable the API Gateway caching mechanism without any manual
    intervention. Only `GET` request methods should be cached.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您可以在没有任何手动干预的情况下启用API Gateway缓存机制的方法。只有`GET`请求方法应该被缓存。
- en: The AWS API Gateway doesn't support the free tier. It's charged on an hourly
    basis. Read more about API Gateway Pricing at [https://aws.amazon.com/api-gateway/pricing/](https://aws.amazon.com/api-gateway/pricing/).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: AWS API Gateway不支持免费套餐。它按小时计费。在[https://aws.amazon.com/api-gateway/pricing/](https://aws.amazon.com/api-gateway/pricing/)上阅读有关API
    Gateway定价的更多信息。
- en: Event scheduling
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件调度
- en: AWS Lambda can be configured alongside AWS CloudWatch Events. If you want to
    execute your Lambda function to be executed on a regular schedule, for example,
    every five minutes, you can use rate expression or you can configure a `cron`
    expression to schedule a timed event for the execution.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda可以与AWS CloudWatch事件一起配置。如果要定期执行Lambda函数，例如，每五分钟执行一次，您可以使用速率表达式，或者可以配置`cron`表达式以安排定时事件进行执行。
- en: You can read more about schedule expression at [https://docs.aws.amazon.com/lambda/latest/dg/tutorial-scheduled-events-schedule-expressions.html](https://docs.aws.amazon.com/lambda/latest/dg/tutorial-scheduled-events-schedule-expressions.html).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.aws.amazon.com/lambda/latest/dg/tutorial-scheduled-events-schedule-expressions.html](https://docs.aws.amazon.com/lambda/latest/dg/tutorial-scheduled-events-schedule-expressions.html)阅读有关计划表达式的更多信息。
- en: Configuring the AWS Lambda with a scheduled event requires more manual intervention.
    You can have a look at the official documentation at [https://docs.aws.amazon.com/lambda/latest/dg/with-scheduled-events.html](https://docs.aws.amazon.com/lambda/latest/dg/with-scheduled-events.html).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 配置AWS Lambda与计划事件需要更多的手动干预。您可以查看官方文档[https://docs.aws.amazon.com/lambda/latest/dg/with-scheduled-events.html](https://docs.aws.amazon.com/lambda/latest/dg/with-scheduled-events.html)。
- en: Zappa provides a very flexible way to configure the schedule events without
    any manual intervention.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa提供了一种非常灵活的方式来配置计划事件，无需任何手动干预。
- en: Configuring events using Zappa
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zappa配置事件
- en: Zappa supports both scheduled events and AWS events. Scheduled events are bound
    to time and date, whereas AWS events are related to any AWS service such as AWS
    S3 events and more.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa支持定时事件和AWS事件。定时事件与时间和日期相关，而AWS事件与任何AWS服务相关，例如AWS S3事件等。
- en: 'We can schedule the Lambda function execution based on any AWS events, as shown
    in the following code snippet:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据任何AWS事件安排Lambda函数的执行，如下面的代码片段所示：
- en: '[PRE22]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Zappa supports almost all AWS events to execute the AWS lambda function. You
    can read more about execution in response to AWS events at [https://github.com/Miserlou/Zappa#executing-in-response-to-aws-events](https://github.com/Miserlou/Zappa#executing-in-response-to-aws-events).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa支持几乎所有AWS事件来执行AWS lambda函数。您可以在[https://github.com/Miserlou/Zappa#executing-in-response-to-aws-events](https://github.com/Miserlou/Zappa#executing-in-response-to-aws-events)阅读有关响应AWS事件执行的更多信息。
- en: 'Once you add the events configuration, you can execute the following command
    to schedule the events:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了事件配置，您可以执行以下命令来安排事件：
- en: '[PRE23]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In our case, we are going to schedule a time-bounded event to execute a function
    to fetch a daily quote and store it in the database. Let's see how we can configure
    our application to schedule a daily event.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们将安排一个有时间限制的事件来执行一个函数，以获取每日报价并将其存储在数据库中。让我们看看如何配置我们的应用程序以安排每日事件。
- en: Scheduling an event to set the quote of the day
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安排一个事件来设置每日报价
- en: As we already designed our `/quote?type=daily` API to fetch a quote of the day,
    this API will return the quote if it exists in the database or else fetch it from
    the Mashape API and store it in the database. This operation is to prevent API
    failure in case the quote record does not exist in the database.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经设计了`/quote?type=daily` API来获取每日报价，如果该报价存在于数据库中，则此API将返回该报价，否则将从Mashape
    API获取并将其存储在数据库中。此操作是为了防止API在数据库中不存在报价记录的情况下失败。
- en: But we want to make sure that the quote record does exist in the database. For
    that, we are going to schedule a daily event that will occur at midnight. We will
    execute a function to perform the `fetch quote` operation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们想要确保报价记录确实存在于数据库中。为此，我们将安排一个每日事件，将在午夜发生。我们将执行一个函数来执行`获取报价`操作。
- en: The following is the Zappa settings snippet with events configuration.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是带有事件配置的Zappa设置片段。
- en: 'File—`zappa_settings.json`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 文件—`zappa_settings.json`：
- en: '[PRE24]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'File—`schedulers.py`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 文件—`schedulers.py`：
- en: '[PRE25]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, in order to enable the scheduled events, let''s run the `zappa schedule
    dev` command. The following is the log of the `schedule` command execution:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了启用计划事件，让我们运行`zappa schedule dev`命令。以下是`schedule`命令执行的日志：
- en: '[PRE26]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: That's it; we are done with scheduling now. Now, daily, at midnight, the `set_quote_of_the_day`
    method will invoke and perform a fetch quote operation.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样；我们现在已经完成了调度。现在，每天午夜，`set_quote_of_the_day`方法将被调用并执行获取报价的操作。
- en: Summary
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned to create high-performance APIs based on the Falcon
    framework. We also learned to configure the API Gateway caching mechanism using
    Zappa. The most interesting part we covered was scheduling. Now you don't need
    to worry about any third-party scheduling tools, as Zappa makes it super easy
    to enable scheduling based on time and AWS events.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何基于Falcon框架创建高性能的API。我们还学习了如何使用Zappa配置API Gateway缓存机制。我们涵盖的最有趣的部分是调度。现在，您不需要担心任何第三方调度工具，因为Zappa使基于时间和AWS事件的调度变得非常容易。
- en: I hope you enjoyed this chapter. Now let's dive into the next chapter to explore
    Zappa's features. We are going to set the custom domain for our application and
    SSL certificates.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您喜欢本章。现在让我们进入下一章，探索Zappa的功能。我们将为我们的应用程序设置自定义域和SSL证书。
- en: Questions
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How does Falcon differ from other Python frameworks?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Falcon与其他Python框架有什么不同？
- en: What are the benefits of Peewee library over `SQLAlchemy`?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Peewee库相对于`SQLAlchemy`的好处是什么？
- en: How does scheduling work?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调度是如何工作的？
