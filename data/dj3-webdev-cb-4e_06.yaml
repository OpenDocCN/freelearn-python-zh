- en: Model Administration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型管理
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Customizing columns on the change list page
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在更改列表页面上自定义列
- en: Creating sortable inlines
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可排序的内联
- en: Creating admin actions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建管理操作
- en: Developing change list filters
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发更改列表过滤器
- en: Changing the app label of a third-party app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改第三方应用程序的应用程序标签
- en: Creating a custom accounts app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义帐户应用
- en: Getting user Gravatars
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取用户Gravatars
- en: Inserting a map into a change form
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将地图插入更改表单
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The Django framework comes with a built-in administration system for your data
    models. With very little effort, you can set up filterable, searchable, and sortable
    lists in order to browse your models, and you can configure forms to add and manage
    data. In this chapter, we will go through the advanced techniques we can use to
    customize administration by developing some practical cases.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Django框架提供了一个内置的管理系统，用于数据模型。通过很少的努力，您可以设置可过滤、可搜索和可排序的列表，以浏览您的模型，并且可以配置表单以添加和管理数据。在本章中，我们将通过开发一些实际案例来介绍我们可以使用的高级技术来自定义管理。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To work with the code in this chapter, you will need the latest stable version
    of Python, a MySQL or PostgreSQL database, and a Django project with a virtual
    environment.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用本章中的代码，您需要最新稳定版本的Python，一个MySQL或PostgreSQL数据库，以及一个带有虚拟环境的Django项目。
- en: 'You can find all the code for this chapter in the `chapter 06` directory of
    this book''s GitHub repository: [https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书的GitHub存储库的`chapter 06`目录中找到本章的所有代码：[https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition)
- en: Customizing columns on the change list page
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在更改列表页面上自定义列
- en: The change list views in the default Django administration system provide an
    overview of all of the instances of the specific models. By default, the `list_display`
    model admin attribute controls the fields that are shown in different columns.
    Additionally, you can implement custom admin methods that will return the data
    from relations or display custom HTML. In this recipe, we will create a special
    function, for use with the `list_display` attribute, that shows an image in one
    of the columns of the list view. As a bonus, we will make one field directly editable
    in the list view by adding the `list_editable` setting.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的Django管理系统中的更改列表视图提供了特定模型的所有实例的概述。默认情况下，`list_display`模型管理属性控制在不同列中显示的字段。此外，您还可以实现自定义管理方法，该方法将返回关系的数据或显示自定义HTML。在本示例中，我们将创建一个特殊函数，用于`list_display`属性，该函数将在列表视图的一列中显示图像。作为奖励，我们将通过添加`list_editable`设置使一个字段直接在列表视图中可编辑。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we will need the `Pillow` and `django-imagekit` libraries.
    Let''s install them in the virtual environment using the following commands:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本示例，我们将需要`Pillow`和`django-imagekit`库。让我们使用以下命令在虚拟环境中安装它们：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Make sure that `django.contrib.admin` and `imagekit` are in `INSTALLED_APPS`
    in the settings:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在设置中`INSTALLED_APPS`中包含`django.contrib.admin`和`imagekit`：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, hook up the admin site in the URL configuration, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在URL配置中连接管理站点，如下所示：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next, create a new `products` app and put it under `INSTALLED_APPS`. This app
    will contain the `Product` and `ProductPhoto` models. Here, one product might
    have multiple photos. For this example, we will also be using `UrlMixin`, which
    was defined in the *Creating a model mixin with URL-related methods* recipe in
    [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml), *Models and Database
    Structure*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个新的`products`应用程序，并将其放在`INSTALLED_APPS`下。此应用程序将包含`Product`和`ProductPhoto`模型。在这里，一个产品可能有多张照片。例如，我们还将使用在[第2章](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)的*创建具有URL相关方法的模型mixin*食谱中定义的`UrlMixin`。
- en: 'Let''s create the `Product` and `ProductPhoto` models in the `models.py` file
    as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`models.py`文件中创建`Product`和`ProductPhoto`模型，如下所示：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: In this recipe, we will create a simple administration for the `Product` model
    that will have instances of the `ProductPhoto` model attached to the product as
    inlines.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将为`Product`模型创建一个简单的管理，该管理将具有附加到产品的`ProductPhoto`模型的实例。
- en: 'In the `list_display` property, we will include the `first_photo()` method
    of the model admin, which will be used to show the first photo from the many-to-one
    relationship. So, let''s begin:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在`list_display`属性中，我们将包括模型管理的`first_photo()`方法，该方法将用于显示一对多关系中的第一张照片。所以，让我们开始：
- en: 'Let''s create an `admin.py` file that contains the following content:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个包含以下内容的`admin.py`文件：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, in the same file, let''s add the administration for the product:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在同一个文件中，让我们为产品添加管理：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let''s create the template that will be used to generate the `photo-preview`,
    as follows:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建将用于生成`photo-preview`的模板，如下所示：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you add a few products with photos and then look at the product administration
    list in the browser, it will look similar to the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您添加了一些带有照片的产品，然后在浏览器中查看产品管理列表，它将类似于以下截图：
- en: '![](img/d14311ca-f563-4422-bb00-8eb990292a4f.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/d14311ca-f563-4422-bb00-8eb990292a4f.png)
- en: 'The `list_display` property is usually used to define the fields so that they''re
    displayed in the administration list view; for example, TITLE and PRICE are fields
    of the `Product` model. Besides the normal field names, though, the `list_display`
    property also accepts the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_display`属性通常用于定义字段，以便它们在管理列表视图中显示；例如，`TITLE`和`PRICE`是`Product`模型的字段。除了正常的字段名称之外，`list_display`属性还接受以下内容：'
- en: A function, or another callable
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个函数，或者另一个可调用的
- en: The name of an attribute of the model admin class
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型管理类的属性名称
- en: The name of an attribute of the model
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型的属性名称
- en: When using callables in `list_display`, each one will get the model instance
    passed as the first argument. Therefore, in our example, we have defined the `get_photo()`
    method in the model admin class, which receives the `Product` instance as `obj`.
    The method tries to get the first `ProductPhoto` object from the many-to-one relationship,
    and, if it exists, it returns HTML generated from the include template with the
    `<img>` tag.  By setting `list_display_links`, we make both the photo and the
    title linked to the admin change form for the `Product` model.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在`list_display`中使用可调用函数时，每个函数都将模型实例作为第一个参数传递。因此，在我们的示例中，我们在模型管理类中定义了`get_photo()`方法，该方法将`Product`实例作为`obj`接收。该方法尝试从一对多关系中获取第一个`ProductPhoto`对象，如果存在，则返回从包含`<img>`标签的包含模板生成的HTML。通过设置`list_display_links`，我们使照片和标题都链接到`Product`模型的管理更改表单。
- en: 'You can set several attributes for the callables that you use in `list_display`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为在`list_display`中使用的可调用函数设置多个属性：
- en: The `short_description` attribute of the callable defines the TITLE shown at
    the top of the column.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可调用的`short_description`属性定义了列顶部显示的标题。
- en: By default, the values that are returned by callables are not sortable in administration,
    but the `admin_order_field` attribute can be set to define which database field
    we should sort that generated column by. Optionally, you can prefix the field
    with a hyphen to indicate a reversed sort order.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，可调用返回的值在管理中是不可排序的，但可以设置`admin_order_field`属性来定义应该按哪个数据库字段对生成的列进行排序。可选地，您可以使用连字符前缀来指示反向排序顺序。
- en: By setting `boolean = True`, you can show icons for the `True` or `False` values.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过设置`boolean = True`，您可以显示`True`或`False`值的图标。
- en: Finally, the PRICE field can be made editable if we include it in the `list_editable`
    setting. Since there are now editable fields, a Save button will appear at the
    bottom so that we can save the whole list of products.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们将PRICE字段包含在`list_editable`设置中，它可以被编辑。由于现在有可编辑字段，底部将出现一个保存按钮，以便我们可以保存整个产品列表。
- en: See also
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a model mixin with URL-related methods* recipe in [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*,
    Models and Database Structure*
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用URL相关方法创建模型mixin*配方在[第2章](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*，模型和数据库结构*'
- en: The *Creating admin actions* recipe
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建管理操作*配方'
- en: The *Developing change list filters* recipe
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开发更改列表过滤器*配方'
- en: Creating sortable inlines
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可排序的内联
- en: You will want to sort most of the models in your database by creation date,
    happening date, or alphabetically. But sometimes, the user has to be able to show
    items in a custom sorting order. This applies to categories, image galleries,
    curated lists, and similar cases. In this recipe, we will show you how to use `django-ordered-model` to
    allow custom sorting in administration.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您将希望对数据库中的大多数模型按创建日期、发生日期或按字母顺序进行排序。但有时，用户必须能够以自定义排序顺序显示项目。这适用于类别、图库、策划列表和类似情况。在这个配方中，我们将向您展示如何使用`django-ordered-model`在管理中允许自定义排序。
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we will build upon the `products` app that we defined in the
    previous recipe. Follow these steps to get started:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将在之前的配方中定义的`products`应用程序的基础上构建。按照以下步骤开始：
- en: 'Let''s install `django-ordered-model` in our virtual environment:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在虚拟环境中安装`django-ordered-model`：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Add `ordered_model` to `INSTALLED_APPS` in the settings.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置中将`ordered_model`添加到`INSTALLED_APPS`中。
- en: 'Then, modify the `ProductPhoto` model from the previously defined `products`
    app, as follows:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，修改之前定义的`products`应用程序中的`ProductPhoto`模型，如下所示：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `OrderedModel` class introduces an `order` field. Make and run migrations
    to add the new `order` field for `ProductPhoto` to the database.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderedModel`类引入了一个`order`字段。创建并运行迁移，将新的`order`字段添加到数据库中的`ProductPhoto`。'
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To set up sortable product photos, we''ll need to modify the model administration
    for the `products` app. Let''s get started:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置可排序的产品照片，我们需要修改`products`应用程序的模型管理。让我们开始吧：
- en: 'Modify `ProductPhotoInline` in the admin file, as follows:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在管理文件中修改`ProductPhotoInline`，如下所示：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, modify `ProductAdmin` as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，修改`ProductAdmin`如下：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you open the Change Product form, you will see something like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开更改产品表单，您将看到类似于这样的内容：
- en: '![](img/11c19c3c-8124-4f8d-b852-5c08271d85fa.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/11c19c3c-8124-4f8d-b852-5c08271d85fa.png)'
- en: In the model, we set the `order_with_respect_to` attribute to ensure that ordering
    will be separate for each product instead of just ordering the whole list of product
    photos in general.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型中，我们设置了`order_with_respect_to`属性，以确保对每个产品进行排序，而不仅仅是对产品照片的整个列表进行排序。
- en: In Django administration, product photos can be edited by following the product
    details itself as tabular inlines. In the first column, we have a photo preview.
    We are generating it using the same `photo-preview.html`  template that we used
    in the previous recipe. In the second column, there is a field for changing the
    photo. Then, there is a column for the ORDER field, followed by a column with
    arrow buttons so that we can reorder the photos manually next to it. The arrow
    buttons are coming from the `move_up_down_links` method. Finally, there is a column
    with a checkbox so that we can delete the inline.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django管理中，产品照片可以通过将产品详细信息本身作为表格内联来进行编辑。在第一列中，我们有一个照片预览。我们使用与之前配方中使用的相同的`photo-preview.html`模板来生成它。在第二列中，有一个用于更改照片的字段。然后，有一个用于ORDER字段的列，旁边是一个带有箭头按钮的列，以便我们可以手动重新排序照片。箭头按钮来自`move_up_down_links`方法。最后，有一个带有复选框的列，以便我们可以删除内联。
- en: The `readonly_fields` attribute tells Django that some fields or methods will
    be for reading only. If you want to use another method to display something in
    the change form, you have to put those methods in the `readonly_fields` list.
    In our case, `get_photo_preview` and `move_up_down_links` are such methods.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`readonly_fields`属性告诉Django，某些字段或方法仅用于阅读。如果要使用另一种方法在更改表单中显示某些内容，必须将这些方法放在`readonly_fields`列表中。在我们的情况下，`get_photo_preview`和`move_up_down_links`就是这样的方法。'
- en: '`move_up_down_links` is defined in `OrderedTabularInline`, which we are extending
    instead of `admin.StackedInline` or `admin.TabularInline`. This renders the arrow
    buttons so that they switch places in the product photos.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`move_up_down_links`在`OrderedTabularInline`中定义，我们正在扩展它而不是`admin.StackedInline`或`admin.TabularInline`。这样可以渲染箭头按钮，使它们在产品照片中交换位置。'
- en: See also
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Customizing columns on the change list page* recipe
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自定义更改列表页面上的列*食谱'
- en: The *Creating admin actions* recipe
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建管理操作*食谱'
- en: The *Developing change list filters* recipe
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开发更改列表过滤器*食谱'
- en: Creating admin actions
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建管理操作
- en: The Django administration system provides actions that we can execute for selected
    items in the list. One action is provided, by default, and it is used to delete
    selected instances. In this recipe, we will create an additional action for the
    list of the `Product` model, which will allow the administrators to export selected
    products to Excel spreadsheets.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Django管理系统提供了可以为列表中的选定项目执行的操作。默认情况下提供了一个操作，用于删除选定的实例。在这个食谱中，我们将为`Product`模型的列表创建一个额外的操作，允许管理员将选定的产品导出到Excel电子表格中。
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will start with the `products` app that we created in the previous recipes.
    Make sure that you have the `openpyxl` module installed in your virtual environment
    in order to create an Excel spreadsheet, as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从前面的食谱中创建的`products`应用程序开始。确保您的虚拟环境中安装了`openpyxl`模块，以便创建Excel电子表格，如下所示：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Admin actions are functions that take three arguments, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 管理操作是带有三个参数的函数，如下所示：
- en: The current `ModelAdmin` value
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前的`ModelAdmin`值
- en: The current `HttpRequest` value
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前的`HttpRequest`值
- en: The `QuerySet` value, which contains the selected items
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含所选项目的`QuerySet`值
- en: 'Perform the following steps to create a custom admin action to export a spreadsheet:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤创建自定义管理操作以导出电子表格：
- en: 'Create a `ColumnConfig` class for spreadsheet column configuration in the `admin.py`
    file of the `products` app, as follows:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`products`应用程序的`admin.py`文件中为电子表格列配置创建`ColumnConfig`类，如下所示：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, in the same file, create the `export_xlsx()` function:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在同一个文件中，创建`export_xlsx()`函数：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, add the `actions` setting to `ProductAdmin`, as follows:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将`actions`设置添加到`ProductAdmin`中，如下所示：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you take a look at the product administration list page in the browser,
    you will see a new action called Export XLSX, along with the default Delete selected
    Products action, as shown in the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中查看产品管理列表页面，您将看到一个名为Export XLSX的新操作，以及默认的Delete selected Products操作，如下截图所示：
- en: '![](img/ae598c42-d15a-4aef-a26d-1c24e63d4537.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae598c42-d15a-4aef-a26d-1c24e63d4537.png)'
- en: We use the `openpyxl` Python module to create an OpenOffice XML file that's
    compatible with Excel and other spreadsheet software.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`openpyxl` Python模块创建与Excel和其他电子表格软件兼容的OpenOffice XML文件。
- en: First, a workbook is created, and the active worksheet is selected, for which
    we set the title to `Products`. Because there are common styles that we will want
    to use throughout the worksheet, these are set up as named styles so that they
    can be applied by name to each cell, as appropriate. These styles, the column
    headings, and the column widths are stored as `Config` objects, and a `column_config`
    dictionary maps column letter keys to the objects. This is then iterated over
    to set up the headers and column widths.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个工作簿，并选择活动工作表，为其设置标题为`Products`。因为有一些通用样式，我们希望在整个工作表中使用，所以这些样式被设置为命名样式，这样它们可以按名称应用到每个单元格中。这些样式、列标题和列宽度被存储为`Config`对象，并且`column_config`字典将列字母键映射到对象。然后迭代设置标题和列宽度。
- en: We use the `append()` method of the sheet to add the content for each of the
    selected products in `QuerySet`, ordered by ID, including the URL of the first
    photo for the product for when photos are available. The product data is then
    individually styled by iterating over each of the cells in the just-added row,
    once again referring to `column_config` to apply styles consistently.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用工作表的`append()`方法为`QuerySet`中的每个选定产品添加内容，按ID排序，包括产品的第一张照片的URL（如果有照片）。然后通过迭代刚添加的行中的每个单元格来单独设置产品数据的样式，再次参考`column_config`以保持样式一致。
- en: 'By default, admin actions do something with `QuerySet` and redirect the administrator
    back to the change list page. However, for more complex actions, `HttpResponse`
    can be returned. The `export_xlsx()` function saves a virtual copy of the workbook
    to `HttpResponse`, with the content type and character set appropriate to the
    **Office Open XML** (**OOXML**) spreadsheet. Using the `Content-Disposition` header,
    we set the response so that it can be downloaded as a `products.xlsx` file. The
    resulting sheet can be opened in Open Office and will look similar to the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，管理操作对`QuerySet`执行某些操作，并将管理员重定向回更改列表页面。但是，对于更复杂的操作，可以返回`HttpResponse`。`export_xlsx()`函数将工作簿的虚拟副本保存到`HttpResponse`中，内容类型和字符集适合**Office
    Open XML**（**OOXML**）电子表格。使用`Content-Disposition`标头，我们设置响应以便可以将其下载为`products.xlsx`文件。生成的工作表可以在Open
    Office中打开，并且看起来类似于以下内容：
- en: '![](img/85faa318-6a66-4cc2-9cb2-14950f5e4f76.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85faa318-6a66-4cc2-9cb2-14950f5e4f76.png)'
- en: See also
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Customizing columns on the change list page* recipe
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自定义更改列表页面上的列*食谱'
- en: The *Developing change list filters* recipe
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开发更改列表过滤器*食谱'
- en: '[Chapter 9](1979103c-ef2a-44d8-a94d-d18e57688503.xhtml)*, Importing and Exporting Data*'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第9章](1979103c-ef2a-44d8-a94d-d18e57688503.xhtml)*，导入和导出数据*'
- en: Developing change list filters
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发更改列表过滤器
- en: If you want administrators to be able to filter the change list by date, relation,
    or field choices, you have to use the `list_filter` property of the admin model.
    Additionally, there is the possibility of having custom-tailored filters. In this
    recipe, we will add a filter that allows us to select products by the number of
    photos attached to them.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望管理员能够按日期、关系或字段选择过滤更改列表，您必须使用admin模型的`list_filter`属性。此外，还有可能有定制的过滤器。在本教程中，我们将添加一个过滤器，允许我们按附加到产品的照片数量进行选择。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `products` app that we created in the previous recipes.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从我们在之前的教程中创建的`products`应用程序开始。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Execute the following steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'In the `admin.py` file, create a `PhotoFilter` class that extends from `SimpleListFilter`,
    as follows:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`admin.py`文件中，创建一个`PhotoFilter`类，该类扩展自`SimpleListFilter`，如下所示：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, add a list filter to `ProductAdmin`, as shown in the following code:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`ProductAdmin`中添加一个列表过滤器，如下所示：
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The list filter, based on the custom field that we just created, will be shown
    in the sidebar of the product list, as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 基于我们刚刚创建的自定义字段的列表过滤器将显示在产品列表的侧边栏中，如下所示：
- en: '![](img/ca4b4b04-eecf-40ee-b6c2-b4f3f61129ec.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca4b4b04-eecf-40ee-b6c2-b4f3f61129ec.png)'
- en: 'The `PhotoFilter` class has a translatable title and query parameter name as
    properties. It also has two methods, as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`PhotoFilter`类具有可翻译的标题和查询参数名称作为属性。它还有两种方法，如下所示：'
- en: The `lookups()` method, which defines the choices of the filter
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lookups()`方法，定义了过滤器的选择'
- en: The `queryset()` method, which defines how to filter `QuerySet` objects when
    a specific value is selected
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`queryset()`方法，定义了如何在选择特定值时过滤`QuerySet`对象'
- en: 'In the `lookups()` method, we define three choices, as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在`lookups()`方法中，我们定义了三个选择，如下所示：
- en: There are no photos
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有照片
- en: There is one photo
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一张照片
- en: There is more than one photo attached
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多张照片附加
- en: In the `queryset()` method, we use the `annotate()` method of `QuerySet` to
    select the count of photos for each product. This count is then filtered according
    to the selected choice.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在`queryset()`方法中，我们使用`QuerySet`的`annotate()`方法来选择每个产品的照片数量。然后根据所选的选择进行过滤。
- en: To learn more about aggregation functions, such as `annotate()`, refer to the
    official Django documentation at [https://docs.djangoproject.com/en/3.0/topics/db/aggregation/](https://docs.djangoproject.com/en/3.0/topics/db/aggregation/).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关聚合函数（如`annotate()`）的更多信息，请参阅官方Django文档[https://docs.djangoproject.com/en/3.0/topics/db/aggregation/](https://docs.djangoproject.com/en/3.0/topics/db/aggregation/)。
- en: See also
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Customizing columns on the change list page* recipe
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自定义更改列表页面上的列*教程'
- en: The *Creating admin actions* recipe
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建管理员操作*教程'
- en: The *Creating a custom accounts app* recipe
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义帐户应用程序*教程'
- en: Changing the app label of a third-party app
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改第三方应用程序的应用程序标签
- en: The Django framework has a lot of third-party apps that you can use in your
    project. You can browse and compare most of them at [https://djangopackages.org/](https://djangopackages.org/).
    In this recipe, we will show you how to rename the label of the `python-social-auth`
    app in administration. Analogically, you will be able to change the label of any Django third-party
    app.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Django框架有很多第三方应用程序可以在项目中使用。您可以在[https://djangopackages.org/](https://djangopackages.org/)上浏览和比较大多数应用程序。在本教程中，我们将向您展示如何在管理中重命名`python-social-auth`应用程序的标签。类似地，您可以更改任何Django第三方应用程序的标签。
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Follow the instructions at [https://python-social-auth.readthedocs.io/en/latest/configuration/django.html](https://python-social-auth.readthedocs.io/en/latest/configuration/django.html)
    to install Python Social Auth into your project. Python Social Auth allows your
    users to log in with social network accounts or their Open ID. Once you''ve done
    this, the index page of the administration will look like this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[https://python-social-auth.readthedocs.io/en/latest/configuration/django.html](https://python-social-auth.readthedocs.io/en/latest/configuration/django.html)上的说明将Python
    Social Auth安装到您的项目中。Python Social Auth允许用户使用社交网络帐户或其Open ID登录。完成后，管理页面的索引页面将如下所示：
- en: '![](img/828e2e92-06ce-4cb5-b807-1216415cb22a.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/828e2e92-06ce-4cb5-b807-1216415cb22a.png)'
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin, change the PYTHON SOCIAL AUTH label to something more user-friendly,
    such as SOCIAL AUTHENTICATION. Now, follow these steps:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将PYTHON SOCIAL AUTH标签更改为更用户友好的内容，例如SOCIAL AUTHENTICATION。现在，请按照以下步骤进行操作：
- en: 'Create an app called `accounts`. In the `apps.py` file there, add the following
    content:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`accounts`的应用程序。在那里的`apps.py`文件中，添加以下内容：
- en: '[PRE17]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'One of the steps of setting up Python Social Auth involved adding the `"social_django"`
    app to `INSTALLED_APPS`. Now, replace the app there with `"myproject.apps.accounts.apps.SocialDjangoConfig"`:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置Python Social Auth的一个步骤涉及将`"social_django"`应用添加到`INSTALLED_APPS`中。现在，请将该应用替换为`"myproject.apps.accounts.apps.SocialDjangoConfig"`：
- en: '[PRE18]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'If you check the index page of administration, you will see something like
    this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您检查管理的索引页面，您将看到类似于以下内容：
- en: '![](img/ed96a18a-c5ab-44ed-b35f-5b191f230566.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed96a18a-c5ab-44ed-b35f-5b191f230566.png)'
- en: The `INSTALLED_APPS` setting accepts either the path to an app or the path to
    app configuration. Instead of the default app path, we can pass an app configuration.
    There, we change the verbose name of the app and can even apply some signal handlers
    or do some other initial setup for the app.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`INSTALLED_APPS`设置接受应用程序的路径或应用程序配置的路径。我们可以传递应用程序配置而不是默认的应用程序路径。在那里，我们更改应用程序的显示名称，甚至可以应用一些信号处理程序或对应用程序进行一些其他初始设置。'
- en: See also
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a custom accounts app* recipe
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义帐户应用程序*教程'
- en: The *Getting user Gravatars* recipe
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*获取用户Gravatars*教程'
- en: Creating a custom accounts app
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义帐户应用程序
- en: Django comes with a contributed `django.contrib.auth` app that's used for authentication.
    It allows users to log in with their username and password to be able to use administration
    features, for example. This app has been designed so that you can extend it with
    your own functionality. In this recipe, we will create a custom user and role
    models and will set administration for them. Instead of a username and password,
    you will be able to log in by email and password.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Django自带了一个用于身份验证的`django.contrib.auth`应用程序。它允许用户使用他们的用户名和密码登录以使用管理功能，例如。这个应用程序被设计成可以通过您自己的功能进行扩展。在这个示例中，我们将创建自定义用户和角色模型，并为它们设置管理。您将能够通过电子邮件和密码而不是用户名和密码进行登录。
- en: Getting ready
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create an `accounts` app and put this app under `INSTALLED_APPS`, in the settings:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`accounts`应用程序，并将该应用程序放在设置的`INSTALLED_APPS`下：
- en: '[PRE19]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How to do it...
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to overwrite the user and group models:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤覆盖用户和组模型：
- en: 'Create `models.py` in the `accounts` app with the following content:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`accounts`应用程序中创建`models.py`，内容如下：
- en: '[PRE20]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create the `admin.py` file in the `accounts` app with the administration configuration
    for the `User` model:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`accounts`应用程序中创建`admin.py`文件，其中包含`User`模型的管理配置：
- en: '[PRE21]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the same file, add configuration for the `Role` model:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件中，为`Role`模型添加配置：
- en: '[PRE22]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The default user administration list looks similar to the following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的用户管理列表看起来类似于以下屏幕截图：
- en: '![](img/0f12f73f-ee33-4eef-995b-e509b0d8d735.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f12f73f-ee33-4eef-995b-e509b0d8d735.png)'
- en: 'The default group administration list looks similar to the following screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的组管理列表看起来类似于以下屏幕截图：
- en: '![](img/a142a4a5-3f57-40b6-9387-f275500e616d.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a142a4a5-3f57-40b6-9387-f275500e616d.png)'
- en: 'In this recipe, we created two models:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了两个模型：
- en: The `Role` model, which is a proxy for the `Group` model from the `django.contrib.auth` app. The `Role` model
    was created to rename the verbose name of `Group` to `Role`.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Role`模型是`django.contrib.auth`应用程序中`Group`模型的代理。`Role`模型被创建来将`Group`的显示名称重命名为`Role`。'
- en: The `User` model, which extends the same abstract `AbstractUser` class as the
    `User` model from `django.contrib.auth`. The `User` model was created to replace
    the primary key with `UUIDField` and to allow us to log in via email and password
    instead of username and password.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`User`模型，它扩展了与`django.contrib.auth`中的`User`模型相同的抽象`AbstractUser`类。`User`模型被创建来用`UUIDField`替换主键，并允许我们通过电子邮件和密码而不是用户名和密码进行登录。'
- en: The admin classes, `MyUserAdmin` and `MyRoleAdmin`, extend the contributed `UserAdmin`
    and `GroupAdmin` classes and overwrite some of the properties. Then, we unregistered
    the existing administration classes for the `User` and `Group` models and registered
    the new, modified ones.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 管理类`MyUserAdmin`和`MyRoleAdmin`扩展了贡献的`UserAdmin`和`GroupAdmin`类，并覆盖了一些属性。然后，我们取消注册了现有的`User`和`Group`模型的管理类，并注册了新的修改后的管理类。
- en: 'The following screenshot shows what the user administration looks like:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了用户管理的外观：
- en: '![](img/6433a0e7-b052-45b9-be81-5a8f7b747266.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6433a0e7-b052-45b9-be81-5a8f7b747266.png)'
- en: The modified user administration settings show more fields than the default
    settings in the list view, additional filters and ordering options, and Submit
    buttons at the top of the editing form.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的用户管理设置在列表视图中显示了更多字段，还有额外的过滤和排序选项，并在编辑表单顶部有提交按钮。
- en: 'In the change list of the new group administration settings, we will display
    those users who have been assigned to specific groups. In the browser, this will
    look similar to the following screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的组管理设置的更改列表中，我们将显示那些已被分配到特定组的用户。在浏览器中，这将类似于以下屏幕截图：
- en: '![](img/516c43fe-6b6d-47e7-879e-989fe89765cf.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/516c43fe-6b6d-47e7-879e-989fe89765cf.png)'
- en: See also
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Customizing columns on the change list page* recipe
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自定义更改列表页面上的列*示例'
- en: The *Inserting a map into a change form* recipe
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在更改表单中插入地图*示例'
- en: Getting user Gravatars
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取用户Gravatars
- en: Now that we've started using a custom `User` model for authentication, we can
    enhance it even more by adding more useful fields. In this recipe, we will add
    an `avatar` field and the ability to download a user's avatar from the Gravatar
    service ([https://en.gravatar.com/](https://en.gravatar.com/)). The users of this
    service can upload avatars and assign them to their emails. By doing this, different
    comment systems and social platforms will be able to show those avatars from Gravatar
    based on the hashes of the user's emails.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经开始使用自定义的`User`模型进行身份验证，我们可以通过添加更多有用的字段来进一步增强它。在这个示例中，我们将添加一个`avatar`字段，并且可以从Gravatar服务（[https://en.gravatar.com/](https://en.gravatar.com/)）下载用户的头像。该服务的用户可以上传头像并将其分配给他们的电子邮件。通过这样做，不同的评论系统和社交平台将能够根据用户电子邮件的哈希值从Gravatar显示这些头像。
- en: Getting ready
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's continue with the `accounts` app that we created in the previous recipes.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续使用之前创建的`accounts`应用程序。
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to enhance the `User` model in the `accounts` app:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤增强`accounts`应用程序中的`User`模型：
- en: 'Add the `avatar` field and `django-imagekit` thumbnail specification to the
    `User` model:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`User`模型添加`avatar`字段和`django-imagekit`缩略图规范：
- en: '[PRE23]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add some methods in order to download and show a Gravatar to the `MyUserAdmin`
    class:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一些方法以便在`MyUserAdmin`类中下载和显示Gravatar：
- en: '[PRE24]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add a `helpers.py` file to the `accounts` app with the following content:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`accounts`应用程序中添加一个`helpers.py`文件，内容如下：
- en: '[PRE25]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a template for the avatar in the administration file:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为管理文件中的头像创建一个模板：
- en: '[PRE26]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a template for the `button` to download `Gravatar`:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为下载`Gravatar`的`button`创建一个模板：
- en: '[PRE27]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, create a template for user change list administration with the JavaScript
    to handle mouse clicks on the Get Gravatar buttons:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为用户更改列表管理创建一个模板，其中包含处理鼠标点击`Get Gravatar`按钮的JavaScript：
- en: '[PRE28]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works...
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'If you look at the user change list administration now, you will see something
    like this:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在查看用户更改列表管理，您将看到类似于以下内容：
- en: '![](img/ddc67c53-0a92-4f43-8864-7722138222d9.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddc67c53-0a92-4f43-8864-7722138222d9.png)'
- en: The columns start with the user's AVATAR, then FULL NAME, and then a button
    to get the Gravatar. When a user clicks on the Get Gravatar button, a JavaScript
    `onclick` event handler makes a `POST` request to `download_gravatar_view`. This
    view creates a URL for the user's Gravatar, which is dependent on the MD5 hash
    of the user's email, and then calls a helper function to download an image for
    the user and link it to the `avatar` field.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 列从用户的AVATAR开始，然后是FULL NAME，然后是一个获取Gravatar的按钮。当用户点击获取Gravatar按钮时，JavaScript的`onclick`事件处理程序会向`download_gravatar_view`发出`POST`请求。此视图将为用户的Gravatar创建一个URL，该URL依赖于用户电子邮件的MD5哈希，然后调用一个帮助函数为用户下载图像，并将其链接到`avatar`字段。
- en: There's more...
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Gravatar images are quite small and relatively quick to download. If you were
    downloading bigger images from a different service, you could use Celery or Huey
    task queues to retrieve the images in the background. You can learn about Celery
    at [https://docs.celeryproject.org/en/latest/django/first-steps-with-django.html](https://docs.celeryproject.org/en/latest/django/first-steps-with-django.html),
    and about Huey at [https://huey.readthedocs.io/en/0.4.9/django.html](https://huey.readthedocs.io/en/0.4.9/django.html).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Gravatar图像相当小，下载速度相对较快。如果您从其他服务下载更大的图像，可以使用Celery或Huey任务队列在后台检索图像。您可以在[https://docs.celeryproject.org/en/latest/django/first-steps-with-django.html](https://docs.celeryproject.org/en/latest/django/first-steps-with-django.html)了解有关Celery的信息，并在[https://huey.readthedocs.io/en/0.4.9/django.html](https://huey.readthedocs.io/en/0.4.9/django.html)了解有关Huey的信息。
- en: See also
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Changing the app label of a third-party app* recipe
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*更改第三方应用程序的应用标签*示例'
- en: The *Creating a custom accounts app* recipe
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义帐户应用程序*示例'
- en: Inserting a map into a change form
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在更改表单中插入地图
- en: Google Maps offers a JavaScript API that we can use to insert maps into our
    websites. In this recipe, we will create a `locations` app with the `Location`
    model and extend the template of the change form in order to add a map where an
    administrator can find and mark the geographical coordinates of a location.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps提供了一个JavaScript API，我们可以使用它将地图插入到我们的网站中。在这个示例中，我们将创建一个带有`Location`模型的`locations`应用程序，并扩展更改表单的模板，以便管理员可以找到并标记位置的地理坐标。
- en: Getting ready
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Register for a Google Maps API key and expose it to the templates, just like
    we did in the *Using HTML5 data attributes* recipe in [Chapter 4](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*, Templates
    and JavaScript*. Note that for this recipe, in the Google Cloud Platform console,
    you will need to activate Maps JavaScript API and Geocoding API. For those APIs
    to function, you also need to set billing data.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 注册一个Google Maps API密钥，并将其暴露给模板，就像我们在[第4章](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*模板和JavaScript*中的*使用HTML5数据属性*示例中所做的那样。请注意，对于此示例，在Google
    Cloud Platform控制台中，您需要激活地图JavaScript API和地理编码API。为了使这些API正常工作，您还需要设置计费数据。
- en: 'We will continue by creating a `locations` app:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续创建一个`locations`应用程序：
- en: 'Put the app under `INSTALLED_APPS` in the settings:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序放在设置中的`INSTALLED_APPS`下：
- en: '[PRE29]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a `Location` model there with a name, description, address, geographical
    coordinates, and picture, as follows:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那里创建一个`Location`模型，包括名称、描述、地址、地理坐标和图片，如下所示：
- en: '[PRE30]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, we''ll need to install the PostGIS extension for our PostgreSQL database.
    The easiest way to do that is to run the `dbshell` management command and execute
    the following command:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为我们的PostgreSQL数据库安装PostGIS扩展。最简单的方法是运行`dbshell`管理命令，并执行以下命令：
- en: '[PRE31]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, create the default administration for the model with a geoposition (we
    will change this in the *How to do it...* section):'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用地理位置模型创建默认管理（我们将在*如何做...*部分中更改这一点）：
- en: '[PRE32]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The default Django administration for geographical `Point` fields from the
    contributed `gis` module uses the `Leaflet.js` JavaScript mapping library. The
    tiles are obtained from Open Street Maps and the administration will look like
    this:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 来自`gis`模块的地理`Point`字段的默认Django管理使用`Leaflet.js` JavaScript映射库。瓷砖来自Open Street
    Maps，管理将如下所示：
- en: '![](img/2a5e6034-e6a8-4277-b892-a9a672aa341b.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a5e6034-e6a8-4277-b892-a9a672aa341b.png)'
- en: Note that in the default setup, you can't enter the longitude and latitude manually
    and there is no possibility to geocode the geoposition from the address information.
    We will implement that in this recipe.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在默认设置中，您无法手动输入经度和纬度，也无法从地址信息中获取地理位置的可能性。我们将在此示例中实现这一点。
- en: How to do it...
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The administration of the `Location` model will be combined from multiple files.
    Perform the following steps to create it:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`Location`模型的管理将从多个文件中组合而成。执行以下步骤来创建它：'
- en: 'Let''s create the administration configuration for the `Location` model. Note
    that we are also creating a custom model form to create separate `latitude`  and `longitude` fields:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为`Location`模型创建管理配置。请注意，我们还创建了一个自定义模型表单，以创建单独的`latitude`和`longitude`字段：
- en: '[PRE33]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To create a custom change form template, add a new `change_form.html` file,
    under `admin/locations/location/`, to your templates directory. This template
    will extend from the default `admin/change_form.html` template, and will overwrite
    the `extrastyle` and `field_sets` blocks, as follows:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建自定义更改表单模板，请在`admin/locations/location/`下的模板目录中添加一个新的`change_form.html`文件。此模板将扩展默认的`admin/change_form.html`模板，并将覆盖`extrastyle`和`field_sets`块，如下所示：
- en: '[PRE34]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then, we have to create the template for the map that will be inserted into
    the `Map` fieldset, as follows:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们必须为将插入到`Map`字段集中的地图创建模板，如下所示：
- en: '[PRE35]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Of course, the map won''t be styled by default. Therefore, we will have to
    add some CSS, as shown in the following code:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当然，默认情况下地图不会被自动设置样式。因此，我们需要添加一些CSS，如下所示：
- en: '[PRE36]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Next, let's create a `location_change_form.js` JavaScript file. We don't want
    to pollute the environment with global variables. Therefore, we will start with
    a closure in order to make a private scope for variables and functions.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个`location_change_form.js`的JavaScript文件。我们不想用全局变量来污染环境。因此，我们将从闭包开始，以便为变量和函数创建一个私有作用域。
- en: 'We will be using jQuery in this file (as jQuery comes with the contributed
    administration system and makes this easy and cross-browser), as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们将使用jQuery（因为jQuery随着贡献的管理系统而来，使得这变得简单且跨浏览器），如下所示：
- en: '[PRE37]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We will create JavaScript functions and add them to `location_change_form.js` one
    by one. The `getAddress4search()` function will collect the address string from
    the address fields that will be used later for geocoding, as follows:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将逐一创建JavaScript函数并将它们添加到`location_change_form.js`中。`getAddress4search()`函数将从地址字段中收集地址字符串，以便稍后用于地理编码，如下所示：
- en: '[PRE38]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The `updateMarker()` function will take the `latitude` and `longitude` arguments
    and draw or move a marker on the map. It will also make the marker draggable,
    as follows:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`updateMarker()`函数将接受`latitude`和`longitude`参数，并在地图上绘制或移动标记。它还会使标记可拖动，如下所示：'
- en: '[PRE39]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `updateLatitudeAndLongitude()` function, as referenced in the preceding
    dragend event listener, takes the `latitude` and `longitude` arguments and updates
    the values for the fields with the `id_latitude` and `id_longitude` IDs, as follows:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`updateLatitudeAndLongitude()`函数，如前面的dragend事件监听器中所引用的，接受`latitude`和`longitude`参数，并更新具有`id_latitude`和`id_longitude`
    ID的字段的值，如下所示：'
- en: '[PRE40]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `autocompleteAddress()` function gets the results from Google Maps geocoding
    and lists them under the map in order to select the correct result. If there is
    only one result, it updates the geographical position and address fields, as follows:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`autocompleteAddress()`函数从Google Maps地理编码中获取结果，并在地图下方列出这些结果，以便选择正确的结果。如果只有一个结果，它将更新地理位置和地址字段，如下所示：'
- en: '[PRE41]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The `updateAddressFields()` function takes a nested dictionary, with the address
    components as an argument, and fills in all of the address fields, as follows:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`updateAddressFields()`函数接受一个嵌套字典，其中包含地址组件作为参数，并填写所有地址字段，如下所示：'
- en: '[PRE42]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Finally, we have the initialization function, which is called when the page
    is loaded. It attaches the `onclick` event handlers to the buttons, creates a
    Google Map, and, initially, marks the geoposition that is defined in the `latitude`
    and `longitude` fields, as follows:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们有初始化函数，在页面加载时调用。它将为按钮附加`onclick`事件处理程序，创建一个Google地图，并最初标记在`latitude`和`longitude`字段中定义的地理位置，如下所示：
- en: '[PRE43]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: How it works...
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'If you look at the Change Location form in the browser, you will see a Map
    shown in a fieldset, followed by the fieldset containing the address fields, as
    shown in the following screenshot:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中查看更改位置表单，您将看到一个地图显示在一个字段集中，后面是包含地址字段的字段集，如下截图所示：
- en: '![](img/7d71d3a9-f2a1-4a60-bec1-13d786f860b4.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d71d3a9-f2a1-4a60-bec1-13d786f860b4.png)'
- en: 'Under the map, there are two buttons: Locate address and Remove from map.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在地图下方有两个按钮：定位地址和从地图中删除。
- en: 'When you click on the Locate address button, the geocoding is called in order
    to search for the geographical coordinates of the entered address. The result
    of performing geocoding is one or more addresses listed in a nested dictionary
    format. We''ll represent the addresses as a list of clickable links, as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 当您单击“定位地址”按钮时，将调用地理编码以搜索输入地址的地理坐标。执行地理编码的结果是以嵌套字典格式列出的一个或多个地址。我们将把地址表示为可点击链接的列表，如下所示：
- en: '![](img/7c5cc0dc-642e-4cf2-abce-03d0fde80113.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c5cc0dc-642e-4cf2-abce-03d0fde80113.png)'
- en: 'To view the structure of the nested dictionary in the console of the developer
    tools, put the following line at the beginning of the `autocompleteAddress()`
    function:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 要在开发者工具的控制台中查看嵌套字典的结构，请在`autocompleteAddress()`函数的开头放置以下行：
- en: '[PRE44]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'When you click on one of the selections, the marker appears on the map showing
    the exact geoposition of the location. The Latitude and Longitude fields will
    be filled in like so:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击其中一个选择时，地图上会出现标记，显示位置的确切地理位置。纬度和经度字段将填写如下：
- en: '![](img/f5e23aa4-d2ee-4a07-849c-109c29a007e1.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5e23aa4-d2ee-4a07-849c-109c29a007e1.png)'
- en: Then, the administrator can move the marker on the map by dragging and dropping
    it. Also, double-clicking anywhere on the map will update the geographical coordinates
    and the marker position.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，管理员可以通过拖放在地图上移动标记。此外，双击地图上的任何位置将更新地理坐标和标记位置。
- en: Finally, if the Remove from map button is clicked, the geographical coordinates
    are cleaned and the marker is removed.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果单击“从地图中删除”按钮，则地理坐标将被清除，并且标记将被移除。
- en: Administration uses a custom `LocationModelForm` that excludes the `geoposition`
    field, adds the `Latitude` and `Longitude` fields, and handles saving and loading
    their values.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 管理使用自定义的`LocationModelForm`，其中排除了`geoposition`字段，添加了`Latitude`和`Longitude`字段，并处理它们的值的保存和加载。
- en: See also
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 4](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*, Templates and JavaScript*'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*，模板和JavaScript*'
