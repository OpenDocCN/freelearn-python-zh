- en: 'Chapter 6: Creating SPAs on the Backends'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：在后端创建SPAs
- en: We cannot create a complete site by simply managing groups and sending HTML
    to the client. We must first master a variety of small solutions in order to be
    able to build a dynamic page that interacts with the user, with essential features
    such as page switching!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能仅仅通过管理组和向客户端发送HTML来创建一个完整的网站。我们必须首先掌握各种小型解决方案，以便能够构建一个与用户交互的动态页面，具有页面切换等基本功能！
- en: 'When the first **single-page applications** (**SPAs**) were created, the developers
    at the time were forced to spend many hours on functionalities that had been free
    when using the HTTP protocol: routing, sessions, authentication, or origin verification,
    among others. Poor them! They had to re-invent the wheel with a rebellious adolescent
    JavaScript that was not very cross-browser compatible. However, they survived,
    or so I would like to think, by defining techniques in the frontend that have
    managed to mimic the same behavior as HTTP; these techniques have lasted until
    today. For example, in a routing system, when a SPA redraws a screen, the browser
    URL is modified to put the user in context. On the other hand, if a visitor manually
    types the address, the application reacts by loading the components that make
    up the screen. All tasks are exhausting to implement with JavaScript. It is not
    cheap to change content without making a new request. If we just used plain HTML,
    we wouldn’t need to do anything, but of course, the user would experience a page
    refresh with every change. And what does all this have to do with us? If we create
    pages using the WebSockets protocol, we find ourselves in a similar situation;
    we have to invent formulations to simulate the behavior that a polite user expects
    from us.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当最初的单页应用（**SPAs**）被创建时，当时的开发者被迫花费许多小时在HTTP协议使用时免费的那些功能上：路由、会话、身份验证或源验证等。可怜的他们！他们不得不使用叛逆的青少年JavaScript重新发明轮子，而这种JavaScript并不非常跨浏览器兼容。然而，他们幸存了下来，或者至少我希望如此，通过在前端定义技术，这些技术成功地模仿了HTTP的行为；这些技术一直持续到今天。例如，在一个路由系统中，当SPA重绘屏幕时，浏览器URL会被修改以将用户置于上下文中。另一方面，如果访客手动输入地址，应用程序会通过加载构成屏幕的组件来做出反应。所有这些任务都使用JavaScript实现起来非常耗时。不发送新请求就更改内容并不便宜。如果我们只是使用纯HTML，我们就不需要做任何事情，但当然，用户会每次更改时都经历页面刷新。这一切与我们有什么关系呢？如果我们使用WebSockets协议创建页面，我们会发现自己处于类似的情况；我们必须发明公式来模拟礼貌用户期望我们提供的行为。
- en: Channels is simple in functionality compared to other libraries, but at the
    same time very mature and consistent with the real world. It is a framework born
    out of necessity. It relies on Django to give us the essentials to solve typical
    problems while providing flexibility.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他库相比，Channels在功能上简单，但同时也非常成熟且与现实世界保持一致。它是一个因需求而生的框架。它依赖于Django为我们提供解决典型问题的基本要素，同时提供灵活性。
- en: 'In this chapter, we are going to review different approaches to the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾以下不同方法：
- en: Switching between pages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面之间切换
- en: Server-side rendering for each route
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个路由进行服务器端渲染
- en: Including a browser to achieve dynamic navigation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含浏览器以实现动态导航
- en: Changing URLs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改URL
- en: Hydrating sections or components
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 润滑部分或组件
- en: Creating temporary sessions for sessions
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为会话创建临时会话
- en: Avoiding **cross-site request forgery** (**CSRF**) with WebSockets
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用WebSockets避免**跨站请求伪造**（**CSRF**）
- en: Therefore, we are going to focus on how to solve each point in order to prepare
    ourselves for [*Chapter 7*](B18321_07_ePub.xhtml#_idTextAnchor152), *Creating
    a Real-Time Blog Using Only Django.*
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将专注于如何解决每个问题，以便为准备在[*第7章*](B18321_07_ePub.xhtml#_idTextAnchor152)，“仅使用Django创建实时博客”做准备。
- en: 'Let’s organize our projects a bit better. From now on, we are going to divide
    Channels into two files: `consumers.py`, which will be the equivalent of `views.py`
    or a communication gateway between the frontend and the backend, and `actions.py`,
    where the logic or functions will be located.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更好地组织我们的项目。从现在开始，我们将把Channels分成两个文件：`consumers.py`，它将是`views.py`或前端和后端之间的通信网关，以及`actions.py`，其中将放置逻辑或函数。
- en: We’ll start by adding a complete system for switching pages. You will not need
    to follow each point in order, as you will find examples of how we can solve each
    task, not a tutorial.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从添加一个完整的页面切换系统开始。你不需要按顺序遵循每个点，因为你会找到我们如何解决每个任务的示例，而不是一个教程。
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All the code from the different sections can be found at the following link:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所有不同部分的代码都可以在以下链接中找到：
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-6](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-6)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-6](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-6)'
- en: Switching between pages
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在页面之间切换
- en: 'At some point, the user will need to go to another page or change context.
    We are going to make them think this is happening, but in reality, it is going
    to be a magic trick since really, they will never move from the first HTML we
    gave them at the beginning. However, and here’s the key, they will perceive that
    the page is being changed. To achieve this deception (sorry, achievement), we
    will carry out the following tasks:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时候，用户将需要转到另一个页面或更改上下文。我们将让他们认为这是在发生，但实际上，这将会是一个魔术，因为实际上，他们永远不会从我们最初给他们的第一个HTML页面移动。然而，关键在于，他们会感觉到页面正在改变。为了实现这种欺骗（抱歉，成就），我们将执行以下任务：
- en: Change the HTML of the main content or everything that belongs to `<main>`.
    Meanwhile, we will always keep the static sections of the pages, such as `<header>`,
    `<aside>`, or `<footer>`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改主内容或属于`<main>`的任何内容的HTML。同时，我们将始终保留页面的静态部分，如`<header>`、`<aside>`或`<footer>`。
- en: Implement server-side rendering to render the HTML belonging to each URL.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现服务器端渲染以渲染属于每个URL的HTML。
- en: Visually mark in the `<nav>` where we are with a CSS style.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CSS样式在`<nav>`中视觉标记我们的位置。
- en: Modify the browser URL via the JavaScript API. It is an aesthetic change but
    the URL acts as breadcrumbs to guide the visitor.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过JavaScript API修改浏览器URL。这是一个美学上的改变，但URL充当面包屑以引导访客。
- en: 'The objective is to build a site with three pages: `base.html`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是建立一个包含三个页面的网站：`base.html`：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `components/_nav.html` component will be discussed later when we talk about
    navigation. The important thing is that we are going to incorporate an `include`
    inside `<main>` that we will use to create a future server-side rendering system.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`components/_nav.html`组件将在我们讨论导航时再进行讨论。重要的是，我们将在`<main>`内部嵌入一个`include`，我们将使用它来创建未来的服务器端渲染系统。'
- en: 'Next, in the `Consumer` class, we will create the `"Change page"` action, which
    will invoke the `send_page (self, "page name")` function inside `actions.py`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`Consumer`类中，我们将创建`"Change page"`动作，该动作将在`actions.py`内部调用`send_page (self,
    "page name")`函数：
- en: '[PRE27]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: As you may have noticed, `send_html` has also already been modified to incorporate
    `append`, which we will use to indicate whether we want to add a block of HTML
    to the selector or replace all the content (for the moment, we will not implement
    it), while `url` will be used to indicate the URL that will be displayed in the
    browser.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经注意到的，`send_html`也已经修改，以包含`append`，我们将使用它来指示我们是否想要向选择器添加一个HTML块或替换所有内容（目前我们不会实现它），而`url`将用于指示将在浏览器中显示的URL。
- en: 'In `app/app_template/actions.py`, we would define the function that renders
    HTML and sends it to the frontend:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app/app_template/actions.py`中，我们将定义一个渲染HTML并将其发送到前端的功能：
- en: '[PRE60]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'We prepare the variables that will be used to render the HTML templates, the
    `Form` object corresponding to each page, and the name of the page where we are:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备将用于渲染HTML模板的变量，每个页面对应的`Form`对象，以及我们所在页面的名称：
- en: '[PRE75]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'At each page change, we must redraw the `main` browser to mark where we are:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次页面更改时，我们必须重新绘制`main`浏览器以标记我们的位置：
- en: '[PRE81]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Finally, we send the HTML of the page to the frontend at `<main>` with a variable
    called `url`. This will be used by JavaScript later on to modify the address of
    the browser.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用名为`url`的变量将页面的HTML发送到`<main>`前端。这将在稍后由JavaScript用于修改浏览器的地址。
- en: Before we continue to incorporate page switching, let’s make a pitstop to incorporate
    the rendering of each view using Django. It will simplify the task of creating
    a browser that we’ll need to move between pages.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续实现页面切换之前，让我们停下来，使用Django实现每个视图的渲染。这将简化创建浏览器以在页面之间移动的任务。
- en: Server-side rendering for each route
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为每个路由实现服务器端渲染
- en: After preparing the `Consumer` class to change pages dynamically, we are going
    to incorporate a trivial system with Django for the management of routes and the
    rendering of each page without depending on Channels, so that crawlers can index
    the content. We’ll define three templates (`home.html`, `login.html`, and `signup.html`).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备好`Consumer`类以动态更改页面后，我们将使用Django引入一个简单的系统来管理路由和渲染每个页面，而不依赖于Channels，以便爬虫可以索引内容。我们将定义三个模板（`home.html`、`login.html`和`signup.html`）。
- en: 'The content of `app/app_template/templates/pages/home.html` will be a few lines
    of HTML:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`app/app_template/templates/pages/home.html`的内容将是几行HTML：'
- en: '[PRE88]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Then, on the second page, representing a login form, we will use a `form` object
    to list all the fields and then validate. This will be an argument that we will
    pass when rendering the template.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在第二页，代表登录表单，我们将使用`form`对象列出所有字段并进行验证。这将是我们渲染模板时传递的参数。
- en: 'We write the following code in `app/app_template/templates/pages/login.html`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`app/app_template/templates/pages/login.html`中编写以下代码：
- en: '[PRE92]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Finally, we repeat the same structure in `app/app_template/templates/pages/signup.html`
    using a `form` object:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在`app/app_template/templates/pages/signup.html`中使用`form`对象重复相同的结构：
- en: '[PRE97]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Before defining the views, we need to structure the forms. In `app/app_template/forms.py`,
    we add the following content:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义视图之前，我们需要构建表单。在`app/app_template/forms.py`中，我们添加以下内容：
- en: '[PRE102]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'With the templates and forms ready to be rendered, we edit `app/app_template/views.py`:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好要渲染的模板和表单后，我们编辑`app/app_template/views.py`：
- en: '[PRE143]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'In all cases, we use `base.html` as the main layout, where we will alter the
    content of `<main>` with the `page` variable:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，我们使用`base.html`作为主布局，其中我们将使用`page`变量更改`<main>`的内容：
- en: '[PRE167]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: The `active_nav` variable is a visual resource to inform the visitor via CSS
    where they are by changing the color of the appropriate hyperlink. We can ignore
    it for the moment.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`active_nav`变量是一个视觉资源，通过改变适当超链接的颜色来通知访客他们所在的位置。我们暂时可以忽略它。'
- en: 'Now, we edit `project_template/urls.py` to define all the paths:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们编辑`project_template/urls.py`以定义所有路径：
- en: '[PRE168]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Nothing out of the ordinary; it’s Django’s own routing system. Except for one
    detail: we haven’t extended it at any point. The usual way would be to render
    `home.html` and not `base.html`. In other words, `home.html` is the content of
    the page, which uses `base.html` as its structure:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 没有什么异常；这是Django自己的路由系统。除了一个细节：我们从未对其进行扩展。通常的方法是渲染`home.html`而不是`base.html`。换句话说，`home.html`是页面的内容，它使用`base.html`作为其结构：
- en: '[PRE176]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: We’ve done it this way because Django must adapt to the way we’re going to draw
    HTML via WebSockets. We are only interested in modifying `<main>` and the templates
    must be isolated in components to work this way.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做是因为Django必须适应我们通过WebSockets绘制HTML的方式。我们只对修改`<main>`感兴趣，模板必须作为组件隔离以这种方式工作。
- en: You can now open the three paths to see how they render without using a `Consumer`
    class.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以打开三个路径，看看它们在不使用`Consumer`类的情况下是如何渲染的。
- en: 'We can see how the root of the site is rendered:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到网站根目录的渲染方式：
- en: '![Figure 6.1 – Rendering the Home page using Django'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1 – 使用Django渲染主页'
- en: '](img/Figure_6.01_B18321.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1 – 图6.01_B18321.jpg](img/Figure_6.01_B18321.jpg)'
- en: Figure 6.1 – Rendering the Home page using Django
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – 使用Django渲染主页
- en: 'The login form is rendered without any problem:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 登录表单渲染没有问题：
- en: '![Figure 6.2 – Rendering the Login page using Django'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.2 – 使用Django渲染登录页'
- en: '](img/Figure_6.02_B18321.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.2 – 图6.02_B18321.jpg](img/Figure_6.02_B18321.jpg)'
- en: Figure 6.2 – Rendering the Login page using Django
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 使用Django渲染登录页
- en: 'The same happens when we render the registration page:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们渲染注册页面时，情况相同：
- en: '![Figure 6.3 – Rendering the Signup page using Django'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3 – 使用Django渲染注册页'
- en: '](img/Figure_6.03_B18321.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3 – 图6.03_B18321.jpg](img/Figure_6.03_B18321.jpg)'
- en: Figure 6.3 – Rendering the Signup page using Django
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 使用Django渲染注册页
- en: With the server-side rendering system in place, we are going to incorporate
    a browser that executes actions to dynamically modify the body of the page or
    small sections of it.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端渲染系统就绪后，我们将引入一个浏览器来执行操作以动态修改页面主体或其小部分。
- en: Including a browser to achieve dynamic navigation
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包括浏览器以实现动态导航
- en: After incorporating the templates, views, and routes for traditional navigation,
    we will create a dynamic navigation system.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在引入模板、视图和传统导航的路由后，我们将创建一个动态导航系统。
- en: 'We declare a file in the `app/app_template/components/_nav.html` path with
    the following content:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`app/app_template/components/_nav.html`路径中声明一个文件，内容如下：
- en: '[PRE181]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: We will pass `active_nav` to the template with the name of the page we want
    to mark with CSS, adding the `active` class. On the other hand, `data-target`
    is a dataset that will collect JavaScript to send to the `Consumer` class and
    tell it which page to render.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将传递 `active_nav` 到模板中，带有我们想要用 CSS 标记的页面名称，添加 `active` 类。另一方面，`data-target`
    是一个数据集，它将收集要发送到 `Consumer` 类的 JavaScript，并告诉它要渲染哪个页面。
- en: In JavaScript, we will assign a `click` event to each `<a>` to send the action
    to change the desired page to the `Consumer` class. Which page? The one we have
    saved in the `data-target`. We must be careful before adding a new event listener;
    it is highly recommended that we delete the previous one to avoid duplicating
    the events to the same functions. Remember that the HTML is swapped but JavaScript
    remains static.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，我们将为每个 `<a>` 分配一个 `click` 事件，将更改所需页面的动作发送到 `Consumer` 类。哪个页面？我们在
    `data-target` 中保存的那个页面。在添加新事件监听器之前，我们必须小心，强烈建议我们删除之前的监听器以避免将事件重复发送到同一函数。记住，HTML
    已经交换，但 JavaScript 保持静态。
- en: 'Edit `static/js/index.js`, adding the browser events:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `static/js/index.js`，添加浏览器事件：
- en: '[PRE215]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: 'Now, we just need to add some CSS in `static/css/main.css` to change the color
    of the link for where we are:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要在 `static/css/main.css` 中添加一些 CSS 来改变我们所在位置的链接颜色：
- en: '[PRE267]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: We can now switch between pages, although this is not reflected in the browser’s
    address bar.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以切换页面，尽管这不会在浏览器的地址栏中反映出来。
- en: '![Figure 6.4 – Login page loaded with ability to navigate between Home and
    Signup dynamically'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.4 – 加载了动态在首页和注册页之间导航功能的登录页面'
- en: '](img/Figure_6.04_B18321.jpg)'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_6.04_B18321.jpg)'
- en: Figure 6.4 – Login page loaded with ability to navigate between Home and Signup
    dynamically
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 加载了动态在首页和注册页之间导航功能的登录页面
- en: We have built a website with the ability to navigate between pages, as well
    as integrating traditional rendering to feed content to **search engine spiders**.
    However, we do not give feedback to visitors. The next objective will be to display
    the hierarchy and/or name of the page in the URL.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经构建了一个可以在页面之间导航的网站，并且集成了传统的渲染来向搜索引擎蜘蛛提供内容。然而，我们没有向访客提供反馈。下一个目标将是显示 URL 中的页面层次结构或名称。
- en: Changing URLs
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改 URL
- en: We have managed to change pages and visually mark in the browser where we are,
    but the browser URL is still passive. We are going to add a mechanism to update
    the path every time we change pages.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功实现了更改页面并在浏览器中视觉上标记我们的位置，但浏览器URL仍然是被动的。我们将添加一个机制，每次我们更改页面时都会更新路径。
- en: 'In JavaScript, we can use the History API to manipulate the address that the
    visitor sees in the browser. For example, if you wanted to show that you are at
    `/login/`, you would implement the following:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，我们可以使用 History API 来操作访客在浏览器中看到的地址。例如，如果你想显示你处于 `/login/`，你会实现以下操作：
- en: '[PRE271]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: 'What we will do is modify the event listener message by adding the line we
    just mentioned, together with a new parameter that will always send a `Consumer`
    class called `url`:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要做的就是在事件监听器消息中添加我们刚刚提到的行，以及一个新参数，该参数将始终发送一个名为 `url` 的 `Consumer` 类：
- en: '[PRE272]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: 'In `Consumer`, we will modify the `send_html` function to support the `url`
    parameter:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Consumer` 中，我们将修改 `send_html` 函数以支持 `url` 参数：
- en: '[PRE286]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: 'While in `actions.py`, we’ll modify `send_page` to send the route, but what
    is the route? Thanks to Django and `urls.py`, we can use `reverse`, which will
    return the full path:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 `actions.py` 中，我们将修改 `send_page` 以发送路由，但路由是什么？多亏了 Django 和 `urls.py`，我们可以使用
    `reverse`，它将返回完整路径：
- en: '[PRE294]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: We can now visualize the routes when navigating.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在导航时可以可视化路由。
- en: '![Figure 6.5 – Displaying the URL when browsing dynamically'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.5 – 动态浏览时显示 URL'
- en: '](img/Figure_6.05_B18321.jpg)'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_6.05_B18321.jpg)'
- en: Figure 6.5 – Displaying the URL when browsing dynamically
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 动态浏览时显示 URL
- en: 'We have a serious limitation though: we cannot add HTML blocks. We can only
    replace them. It is inefficient to render a whole page if we are only looking
    to add a new element to an existing list, for example. So, we are going to include
    a system that enables us to decide whether we are going to replace or add a piece
    of HTML to any available selector.'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们有一个严重的限制：我们无法添加 HTML 块。如果我们只想向现有列表添加新元素，例如，渲染整个页面是不高效的。因此，我们将包括一个系统，使我们能够决定是否要将
    HTML 块替换或添加到任何可用的选择器。
- en: Hydrating sections or components
  id: totrans-387
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 激活部分或组件
- en: Although we have a function that can dynamically include HTML rendered from
    a template and apply it to a tag present in the document, we cannot decide whether
    we want to replace or insert HTML, in other words, hydrate or replace the DOM.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们有一个可以动态包含从模板渲染的HTML并将其应用到文档中现有标签的功能，但我们不能决定我们想要替换还是插入HTML，换句话说，是进行hydration还是替换DOM。
- en: '**Hydration** is a technique in web development where client-side JavaScript
    converts a static HTML web page into a dynamic web page by attaching event handlers
    to the HTML elements. This allows for a fast **First Contentful Paint** (**FCP**)
    but there is a period of time afterward where the page appears to be fully loaded
    and interactive. However, it is not until the client-side JavaScript is executed
    and event handlers have been attached.'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hydration**是网络开发中的一种技术，其中客户端JavaScript通过将事件处理程序附加到HTML元素，将静态HTML网页转换为动态网页。这允许快速**首次内容绘制**（**FCP**），但在之后有一段时间页面看起来已经完全加载并且可以交互。然而，直到客户端JavaScript执行并且事件处理程序被附加，这才会发生。'
- en: 'To solve this problem, we will start by remembering that the `Consumer` class
    is prepared to receive the `append` instruction:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们首先记住`Consumer`类已经准备好接收`append`指令：
- en: '[PRE304]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: By default, `append` will be a `False` variable. But if the client sends us
    the `append` data and it is `True`, we will send what we want to add to the frontend
    and JavaScript will take care of the rest.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`append`将是一个`False`变量。但如果客户端发送给我们`append`数据并且它是`True`，我们将发送我们想要添加到前端的内容，而JavaScript将处理其余部分。
- en: 'We include the following in `static/js/index.js`, a conditional to control
    `append`:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`static/js/index.js`中包含了以下内容，一个条件来控制`append`：
- en: '[PRE314]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: To check that it works, we are going to add a list of **Laps** to the **Home**
    page. A Lap is a unit of time that is stored inside a stopwatch as a history of
    recorded periods of time. For example, if it were a Formula 1 race, you could
    visualize how long each car took to complete a lap just by looking at the recorded
    lap time.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查它是否工作，我们将添加一个**laps**列表到**主页**。laps是一个时间单位，它作为计时器中记录的时间段的记录存储在计时器中。例如，如果是一个一级方程式赛车比赛，你只需通过查看记录的laps时间，就可以可视化每辆车完成一圈所需的时间。
- en: 'Each time a button is pressed, a new item with the current time will be added:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 每次按按钮时，都会添加一个包含当前时间的新项：
- en: 'We edit the `Home` template hosted in `app/app_template/templates/pages/home.html`.
    We include a button and an unordered list:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们编辑了托管在`app/app_template/templates/pages/home.html`中的`Home`模板。我们包括一个按钮和无序列表：
- en: '[PRE333]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: 'In JavaScript, hosted in the example in `static/js/index.js`, we incorporate
    the event into the button. It will just send an action without any data:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`static/js/index.js`示例中，我们用JavaScript将事件整合到按钮中。它将只发送一个动作而不带任何数据：
- en: '[PRE334]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: 'In the `Consumer` class, in the `app/app_template/consumers.py` path, we capture
    the action and call a future `add_lap` function:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Consumer`类中，在`app/app_template/consumers.py`路径下，我们捕获动作并调用一个未来的`add_lap`函数：
- en: '[PRE335]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: 'In `actions`, located in `app/app_template/actions.py`, we include the function
    we called `add_lap` in the previous point. We include in the `#laps` selector
    the HTML fragment rendered in the `_laps.html` template, which is created from
    a variable called `time`, with the current time:'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`actions`中，位于`app/app_template/actions.py`，我们包含了之前提到的`add_lap`函数。我们在`#laps`选择器中包含了由名为`time`的变量渲染的HTML片段，该变量包含当前时间：
- en: '[PRE336]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: 'Finally, we build the `app/app_template/templates/components/_lap.html` component:'
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们构建了`app/app_template/templates/components/_lap.html`组件：
- en: '[PRE337]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE337]'
- en: And that’s it. We test how we can update the list over time by pressing the
    **Add lap** button in **Home**.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。我们通过按**主页**中的**添加laps**按钮来测试我们如何随着时间的推移更新列表。
- en: '![Figure 6.6 – Adding HTML snippets to preserve the previous content in an
    unordered list that records the time when the button was clicked'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.6 – 向无序列表中添加HTML片段以保留按钮点击时记录的内容'
- en: '](img/Figure_6.06_B18321.jpg)'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.06_B18321.jpg)'
- en: Figure 6.6 – Adding HTML snippets to preserve the previous content in an unordered
    list that records the time when the button was clicked
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 向无序列表中添加HTML片段以保留按钮点击时记录的内容
- en: We have improved the HTML rendering system to be more selective and efficient.
    We can now decide when we want to add or replace a DOM.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经改进了HTML渲染系统，使其更加选择性和高效。我们现在可以决定何时添加或替换一个DOM。
- en: If you change the page and go back to **Home**, you will find that all the times
    have been deleted. To avoid this problem, we could save times in the database,
    or we can find an optimal solution by creating a temporary session for the user.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更改页面并返回**主页**，你会发现所有的时间都被删除了。为了避免这个问题，我们可以在数据库中保存时间，或者我们可以通过为用户创建一个临时会话来找到一个最优解。
- en: Creating temporary sessions for clients
  id: totrans-440
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为客户端创建临时会话
- en: To have unique sessions for each client, we will need to activate middleware
    that enables this feature. Channels provides us with `SessionMiddlewareStack`
    or `AuthMiddlewareStack`, which also include tools to build login or logout functionality.
    We will use `AuthMiddlewareStack` whenever we can.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为每位客户创建独特的会话，我们需要激活启用此功能的中间件。Channels为我们提供了`SessionMiddlewareStack`或`AuthMiddlewareStack`，它们还包括构建登录或注销功能所需的工具。只要可能，我们就会使用`AuthMiddlewareStack`。
- en: 'We edit `project_template/asgi.py` as follows:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按照以下方式编辑`project_template/asgi.py`：
- en: '[PRE338]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: 'We can now create sessions within the `Consumer` class with the following:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在`Consumer`类中创建会话，如下所示：
- en: '[PRE357]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: 'Getting it will be the same as reading from any Python dictionary:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 获取它将与从任何Python字典中读取相同：
- en: '[PRE359]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: 'To exemplify its potential, we will create a classic to-do app on the home
    page. Even if we change pages, all the tasks that we left pending are always present
    when we come back, just like in real life. See the following:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示其潜力，我们将在主页上创建一个经典的待办事项应用。即使我们更改页面，我们留下的所有待办任务在我们回来时总是存在，就像现实生活中一样。请看以下：
- en: 'At the end of the `home` template, we include an `<input>` to add the text
    of the task, a button to trigger the action, and the list where it will be displayed:'
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`home`模板的末尾，我们包括一个`<input>`来添加任务的文本，一个触发动作的按钮，以及将要显示的列表：
- en: '[PRE361]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: 'We will need a component that lists all the tasks. Therefore, in `app/app_template/templates/components/_tasks.html`,
    we include the following code:'
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个组件来列出所有任务。因此，在`app/app_template/templates/components/_tasks.html`中，我们包含以下代码：
- en: '[PRE362]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE362]'
- en: 'Inside the previous component, we use another component to render the item.
    We declare `app/app_template/templates/components/_task-item.html` with a `<li>`
    and the name of the task:'
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的组件中，我们使用另一个组件来渲染项目。我们声明`app/app_template/templates/components/_task-item.html`，其中包含一个`<li>`和任务的名称：
- en: '[PRE363]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE363]'
- en: 'In the `Consumer` class, when a user connects, we create a session called `tasks`
    with an empty list that we can fill in. On the other hand, we capture the action
    received from the frontend called "`Add task`" and call the `add_task` function
    in `actions.py`:'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Consumer`类中，当用户连接时，我们创建一个名为`tasks`的会话，其中包含一个空列表，我们可以填充它。另一方面，我们捕获从前端接收到的名为"`Add
    task`"的动作，并调用`actions.py`中的`add_task`函数：
- en: '[PRE364]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: 'In `actions.py`, we declare the `add_task` function, which will add the task
    to the session, but we will also create `context` for `home` with the `session`
    variable:'
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`actions.py`中，我们声明了`add_task`函数，该函数将任务添加到会话中，但我们还将创建带有`session`变量的`home`的`context`：
- en: '[PRE365]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: 'Finally, in JavaScript, we add a `click` event to the button to send the text
    with the task to the `Consumer` class:'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在JavaScript中，我们给按钮添加一个`click`事件，以便将文本和任务发送到`Consumer`类：
- en: '[PRE366]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: We must update if new DOM elements have appeared. Otherwise, the events will
    stop working if the previous HTML has been deleted. The steps to follow are to
    stop listening to the previous events if they exist, and add the new ones. If
    we don’t do this, the events will be lost or duplicated.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现新的DOM元素，我们必须更新。否则，如果之前的HTML已被删除，事件将停止工作。要遵循的步骤是停止监听之前存在的事件，并添加新的。如果我们不这样做，事件可能会丢失或重复。
- en: The event to be executed is simple. We capture the `#task` field and send the
    `Consumer` class the text of the task.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行的事件很简单。我们捕获`#task`字段，并将任务的文本发送给`Consumer`类。
- en: '![Figure 6.7 – Displaying a list of tasks from a session'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.7 – 从会话中显示任务列表'
- en: '](img/Figure_6.07_B18321.jpg)'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_6.07_B18321.jpg)'
- en: Figure 6.7 – Displaying a list of tasks from a session
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 从会话中显示任务列表
- en: We are already able to work with sessions and even create HTML from their content.
    Now, we just need to implement some security measures to prevent CSRF exploits.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经能够处理会话并从其内容创建HTML。现在，我们只需要实施一些安全措施来防止CSRF攻击。
- en: Avoiding cross-site request forgery (CSRF) with WebSockets
  id: totrans-487
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WebSockets避免跨站请求伪造（CSRF）
- en: By using sessions, we are exposing users to a CSRF attack unless we put appropriate
    measures in place.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用会话，我们正在将用户暴露于CSRF攻击之中，除非我们采取适当的措施。
- en: CSRF attacks
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF攻击
- en: CSRF attacks are malicious attacks on a website in which unauthorized commands
    are sent from one user to a second site with hidden forms, AJAX requests, or any
    other method in a hidden way.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF攻击是对网站的一种恶意攻击，其中未经授权的命令从一个用户发送到第二个网站，通过隐藏表单、AJAX请求或任何其他隐藏方式。
- en: 'You can find a reference here: [https://en.wikipedia.org/wiki/Cross-site_request_forgery](https://en.wikipedia.org/wiki/Cross-site_request_forgery).'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到参考：[https://en.wikipedia.org/wiki/Cross-site_request_forgery](https://en.wikipedia.org/wiki/Cross-site_request_forgery)。
- en: 'Channels provides a tool that will help us to avoid this type of attack in
    a simple way:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: Channels提供了一个工具，可以帮助我们以简单的方式避免此类攻击：
- en: 'We define the allowed Hosts in `project_template/settings.py`. In our case,
    we are using environment variables inside Docker:'
  id: totrans-493
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在 `project_template/settings.py` 中定义允许的 `Hosts`。在我们的案例中，我们正在使用Docker中的环境变量：
- en: '[PRE367]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: 'We edit `project_template/asgi.py`, by importing `OriginValidator`. We must
    pass two parameters: `URLRouter` (or any intermediary middleware) and the `Hosts`
    we want to protect:'
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们编辑 `project_template/asgi.py` 文件，通过导入 `OriginValidator`。我们必须传递两个参数：`URLRouter`（或任何中间件）以及我们想要保护的
    `Hosts`：
- en: '[PRE368]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: As this functionality is so quick to implement, it is highly recommended that
    it always be part of our future projects or integrated into the template that
    we use as a base.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此功能实现起来非常快，强烈建议它始终是我们未来项目的一部分或集成到我们用作基础的模板中。
- en: Summary
  id: totrans-498
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we have added some very interesting new capabilities to our
    project: switching between pages, creating server-side rendering versions of each
    path, creating a dynamic page, modifying URLs, updating specific sections, working
    with sessions, and avoiding CSRF with WebSockets.'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为我们项目添加了一些非常有趣的新功能：在页面之间切换、创建每个路径的服务器端渲染版本、创建动态页面、修改URL、更新特定部分、使用会话以及通过WebSockets避免CSRF攻击。
- en: 'We now already have the basic skills to build a dynamic site with database
    access, group management, partial or full HTML rendering, event control that triggers
    backend actions, form creation, and some security measures. One question may be
    echoing in your head: was it worth all the effort? Just think that we can now
    create SPAs with minimal use of JavaScript, we don’t need to build an API to connect
    the frontend and the backend, and the time between requests and their responses
    is ridiculously low, avoiding the use of loading in many cases. The complexity
    of the projects also has decreased and we can avoid the installation of several
    frontend libraries. Judge for yourself. The most amazing thing is that we have
    only used Django and Channels; the potential we can achieve by adding other Python
    extensions is infinite.'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了构建具有数据库访问、分组管理、部分或完整HTML渲染、触发后端操作的事件控制、表单创建和一些安全措施的基本技能。可能有一个问题在你的脑海中回响：这一切的努力是否值得？只需想想我们现在可以以最小的JavaScript使用量创建单页应用（SPAs），我们不需要构建一个API来连接前端和后端，请求和响应之间的时间非常低，在很多情况下避免了加载。项目的复杂性也降低了，我们可以避免安装多个前端库。由你自己来判断。最令人惊讶的是，我们只使用了Django和Channels；通过添加其他Python扩展，我们可以实现无限的可能性。
- en: In the next chapter, [*Chapter 7*](B18321_07_ePub.xhtml#_idTextAnchor152), *Creating
    a Real-Time Blog Using Only Django*, we will put all the pieces together to exemplify
    a real case that we can use for our own project or an external one.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，[*第7章*](B18321_07_ePub.xhtml#_idTextAnchor152)，*仅使用Django创建实时博客*，我们将把所有这些部分组合起来，以展示一个我们可以用于我们自己的项目或外部项目的实际案例。
