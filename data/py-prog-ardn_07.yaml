- en: Chapter 7. The Midterm Project – a Portable DIY Thermostat
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 中期项目 – 可携带的DIY温度控制器
- en: After the first Python-Arduino project, you learned the process of prototyping
    various sensors, developing user interfaces, and plotting sensor data. The concepts
    that you learned in the previous chapters can be utilized to create a wide variety
    of Arduino-based hardware projects. The inception of a good application concept
    always begins with a real-world necessity and ends up as a practical project if
    it is executed properly. In this chapter, we will demonstrate this project-building
    process with an example of a portable sensor unit. As you can estimate from the
    chapter title, we will be building a simple and portable DIY thermostat that can
    be deployed without a desktop computer or a laptop.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成第一个Python-Arduino项目之后，你学习了原型设计各种传感器、开发用户界面和绘制传感器数据的过程。你之前章节中学到的概念可以用来创建各种基于Arduino的硬件项目。一个好的应用程序概念的诞生总是始于现实世界的需求，如果执行得当，最终成为一个实用的项目。在本章中，我们将通过一个便携式传感器单元的例子来展示这个项目构建过程。正如你可以从章节标题中估计的那样，我们将构建一个简单且便携的DIY温度控制器，可以在没有台式计算机或笔记本电脑的情况下部署。
- en: To begin with, we will describe the proposed thermostat with specific goals
    and processes to achieve them. Once the strategy to achieve these goals has been
    laid down, you will be introduced to the two successive programming stages to
    develop the deployable and portable unit. In the first stage, we will utilize
    a traditional computer to successfully develop the program to interface Arduino
    with Python. In the second stage, we will replace this computer with a Raspberry
    Pi to make it portable and deployable.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将描述拟议的温度控制器，包括实现这些目标的具体目标和过程。一旦确定了实现这些目标的方法，你将介绍两个连续的编程阶段来开发可部署和可携带的单元。在第一阶段，我们将利用传统计算机成功开发程序，将Arduino与Python接口连接。在第二阶段，我们将用Raspberry
    Pi替换这台计算机，使其便携并可部署。
- en: Thermostat – the project description
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 温度控制器 – 项目描述
- en: From the multiple projects that we can build using the things that you learned,
    a project that helps you to monitor your surrounding environment really stands
    out as an important real-world application. From the various environment-monitoring
    projects such as weather station, thermostat, and plant monitoring system, we
    will be developing the thermostat as it focuses on indoor environment and can
    be part of your daily routine.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以使用所学知识构建的多个项目中，一个帮助你监控周围环境的项⽬真正脱颖而出，成为一个重要的实际应用。从各种环境监控项目，如气象站、温度控制器和植物监控系统，我们将开发温度控制器，因为它专注于室内环境，可以成为你日常生活的部分。
- en: The thermostat is one of the most important components of any remote home monitoring
    system and home automation system. A popular commercial example of a connected
    thermostat is the Nest Thermostat ([https://www.nest.com](https://www.nest.com)),
    which provides intelligent remote monitoring and scheduling features for your
    existing home's heating and cooling system. Before we think about a full-stack
    product such as Nest, we need first need to build a DIY thermostat with the basic
    set of features. Later, we can build upon this project by adding features to improve
    the DIY thermostat experience. Let's first outline the features that we are planning
    to implement in this version of the thermostat project.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 温度控制器是任何远程家庭监控系统和家庭自动化系统中最重要组成部分之一。一个流行的商业温度控制器例子是Nest温度控制器([https://www.nest.com](https://www.nest.com))，它为现有家庭的供暖和冷却系统提供智能远程监控和调度功能。在我们考虑像Nest这样的全栈产品之前，我们首先需要构建一个具有基本功能的DIY温度控制器。之后，我们可以通过添加功能来改进DIY温度控制器的体验。让我们首先概述我们计划在本版温度控制器项目中实现的功能。
- en: Project background
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目背景
- en: Temperature, humidity, and ambient light are the three main physical characteristics
    that we want to monitor using the thermostat. In terms of user experience, we
    want to have an elegant user interface to display the measured sensor data. The
    user experience can be more resourceful if any of this sensor data is plotted
    as a line graph. In the case of a thermostat, the visual representation of the
    sensor data provides a more meaningful comprehension of the environment than just
    displaying plain numerical values.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 温度、湿度和环境光线是我们希望通过温度控制器监控的三个主要物理特性。在用户体验方面，我们希望有一个优雅的用户界面来显示测量的传感器数据。如果任何传感器数据以折线图的形式绘制，用户体验将更加丰富。在温度控制器的例子中，传感器数据的可视化表示比仅仅显示纯数值更有意义。
- en: One of the major objectives of the project is to make the thermostat portable
    and deployable so that it can be used in your day-to-day life. To satisfy this
    requirement, the thermostat display needs to be changed from a regular monitor
    to something small and more portable. To ensure its real-world and meaningful
    application, the thermostat should demonstrate real-time operation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的重大目标之一是使恒温器便携和可部署，以便在日常生活中使用。为了满足这一要求，恒温器显示屏需要从常规显示器更改为更小、更便携的设备。为了确保其实际应用和意义，恒温器应展示实时操作。
- en: It is important to note that the thermostat will not be interfacing with any
    actuators such as home cooling and heating systems. As the interfacing of these
    systems with the thermostat project requires high-level understanding and experience
    of working with heating and cooling systems, it will deviate the flow of the chapter
    from its original goal of teaching you Arduino and Python programming.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，恒温器将不会与任何执行器（如家用冷却和加热系统）接口。由于这些系统与恒温器项目的接口需要高级理解和与加热和冷却系统工作的经验，这将偏离章节原始目标，即教授你Arduino和Python编程。
- en: Project goals and stages
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目目标和阶段
- en: 'In order to describe the features that we want to have in the thermostat, let''s
    first identify the goals and milestones to achieve these objectives. The major
    goals for the project can be determined as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了描述我们希望在恒温器中拥有的功能，让我们首先确定实现这些目标的目标和里程碑。项目的主要目标可以确定为以下：
- en: Identify the necessary sensors and hardware components for the project
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定项目所需的传感器和硬件组件
- en: Design and assemble the circuit for the thermostat using these sensors and the
    Arduino board
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用这些传感器和Arduino板设计并组装恒温器的电路
- en: Design an effective user experience and develop software to accommodate the
    user experience
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计有效的用户体验并开发软件以适应用户体验
- en: Develop and implement code to interface the designed hardware with the software
    components
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发和实施代码以将设计的硬件与软件组件接口
- en: 'The code development process of the thermostat project is divided into two
    major stages. The objectives of the first stage include sensor interfacing, the
    development of the Arduino sketch, and the development of the Python code on your
    regular computer that you have been using all along. The coding milestone for
    the first stage can be further distributed as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 恒温器项目的代码开发过程分为两个主要阶段。第一阶段的目标包括传感器接口、Arduino脚本的开发以及开发你一直在使用的常规计算机上的Python代码。第一阶段编码里程碑可以进一步分配如下：
- en: Develop the Arduino sketch to interface sensors and buttons while providing
    output of the sensor data to the Python program via the serial port
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发Arduino脚本以接口传感器和按钮，并通过串行端口将传感器数据输出到Python程序
- en: Develop the Python code to obtain sensor data from the serial port using the
    `pySerial` library and display the data using GUI that is designed in `Tkinter`
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发Python代码，使用`pySerial`库从串行端口获取传感器数据，并使用在`Tkinter`中设计的GUI显示数据
- en: Create a plot to demonstrate the real-time humidity readings using the `matplotlib`
    library
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`matplotlib`库创建一个图表来展示实时湿度读数
- en: 'In the second stage, we will attach the Arduino hardware to a single-board
    computer and a miniature display to make it mobile and deployable. The milestone
    to achieve objective of the second stage are as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二阶段，我们将把Arduino硬件连接到单板计算机和微型显示屏，使其便携和可部署。实现第二阶段目标的里程碑如下：
- en: Install and configure a single-board computer, Raspberry Pi, to run the Python
    code from the first stage
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置单板计算机Raspberry Pi，以运行第一阶段中的Python代码
- en: Interface and configure the miniature screen with the Raspberry Pi
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将微型屏幕与Raspberry Pi接口和配置
- en: Optimize the GUI and plot window to adjust to this small screen's resolution
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化GUI和图表窗口以适应这个小屏幕的分辨率
- en: In the following subsection of this section, you will be notified about the
    list of required components for both the stages, followed by the hardware circuit
    design and the software flow design. The programming exercises for these stages
    are explained in the next two sections of the chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的下一小节中，你将了解到两个阶段的所需组件列表，随后是硬件电路设计和软件流程设计。这些阶段的编程练习将在本章的下一两个部分中解释。
- en: The list of required components
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 所需组件列表
- en: Instead of going through the process of identifying the required components,
    we have already selected the components for this project based on their utilization
    in the previous exercises, ease of use, and availability. You can replace these
    components according to their availability at the time you are building this project
    or your familiarity with other sensors. Just make sure that you take care of modifications
    in the circuit connections and code, if these new components are not compatible
    with the ones that we are using.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有经过识别所需组件的过程，而是根据它们在之前练习中的使用情况、易用性和可用性，已经为这个项目选择了组件。您可以根据您构建项目时的可用性或对其他传感器的熟悉程度来替换这些组件。只需确保，如果这些新组件与我们使用的组件不兼容，您要处理好电路连接和代码的修改。
- en: 'In the first stage of prototyping, we will need components to develop the electronic
    circuit for the thermostat unit. As we mentioned earlier, we are going to measure
    temperature, humidity, and ambient light through our unit. We already learned
    about the temperature sensor TMP102 and the ambient light sensor BH1750 in [Chapter
    4](ch04.html "Chapter 4. Diving into Python-Arduino Prototyping"), *Diving into
    Python-Arduino Prototyping*. We will be using these sensors for this project with
    the humidity sensor HIH-4030\. The project will utilize the same Arduino Uno board
    that you have been using throughout the previous chapters with the necessary cables.
    We will also need two push buttons to provide manual inputs to the unit. The summary
    of the required components for the first stage is provided in the following table:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在原型设计的第一阶段，我们需要组件来开发恒温器单元的电子电路。正如我们之前提到的，我们将通过我们的单元测量温度、湿度和环境光线。我们已经学习了关于温度传感器
    TMP102 和环境光线传感器 BH1750 的内容，这些内容在[第 4 章](ch04.html "第 4 章. 深入 Python-Arduino 原型设计")
    *深入 Python-Arduino 原型设计* 中有所介绍。我们将使用这些传感器来完成这个项目，同时使用湿度传感器 HIH-4030。项目将使用与之前章节相同的
    Arduino Uno 板以及必要的电缆。我们还需要两个按钮来为单元提供手动输入。第一阶段所需组件的总结如下表所示：
- en: '| Component (first stage) | Quantity | Website |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 组件（第一阶段） | 数量 | 网站 |'
- en: '| --- | --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Arduino Uno | 1 | [https://www.sparkfun.com/products/11021](https://www.sparkfun.com/products/11021)
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| Arduino Uno | 1 | [https://www.sparkfun.com/products/11021](https://www.sparkfun.com/products/11021)
    |'
- en: '| USB cable for Arduino | 1 | [https://www.sparkfun.com/products/512](https://www.sparkfun.com/products/512)
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| Arduino 用 USB 电缆 | 1 | [https://www.sparkfun.com/products/512](https://www.sparkfun.com/products/512)
    |'
- en: '| Breadboard | 1 | [https://www.sparkfun.com/products/9567](https://www.sparkfun.com/products/9567)
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 面包板 | 1 | [https://www.sparkfun.com/products/9567](https://www.sparkfun.com/products/9567)
    |'
- en: '| TMP102 temperature sensor | 1 | [https://www.sparkfun.com/products/11931](https://www.sparkfun.com/products/11931)
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| TMP102 温度传感器 | 1 | [https://www.sparkfun.com/products/11931](https://www.sparkfun.com/products/11931)
    |'
- en: '| HIH-4030 humidity sensor | 1 | [https://www.sparkfun.com/products/9569](https://www.sparkfun.com/products/9569)
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| HIH-4030 湿度传感器 | 1 | [https://www.sparkfun.com/products/9569](https://www.sparkfun.com/products/9569)
    |'
- en: '| BH1750 ambient light sensor | 1 | [http://www.robotshop.com/en/dfrobot-light-sensor-bh1750.html](http://www.robotshop.com/en/dfrobot-light-sensor-bh1750.html)
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| BH1750 环境光线传感器 | 1 | [http://www.robotshop.com/en/dfrobot-light-sensor-bh1750.html](http://www.robotshop.com/en/dfrobot-light-sensor-bh1750.html)
    |'
- en: '| Push button switch | 2 | [https://www.sparkfun.com/products/97](https://www.sparkfun.com/products/97)
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 推按钮开关 | 2 | [https://www.sparkfun.com/products/97](https://www.sparkfun.com/products/97)
    |'
- en: '| 1 kilo-ohm resistor | 2 |   |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 1 千欧姆电阻 | 2 |   |'
- en: '| 10 kilo-ohm resistor | 2 |   |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 10 千欧姆电阻 | 2 |   |'
- en: '| Connection wires | As required |   |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 连接线 | 如需求数量 |   |'
- en: 'Although the table provides links for few specific website, you can obtain
    these components from your preferred providers. The two major components HIH-4030
    humidity sensor and push button switch that we haven''t used previously are described
    as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管表格提供了少数特定网站的链接，但您可以从您偏好的供应商那里获取这些组件。我们之前未使用过的两个主要组件 HIH-4030 湿度传感器和推按钮开关如下所述：
- en: '**HIH-4030 humidity sensor**: This measures and provides relative humidity
    results as an analog output. The output of the sensor can be directly connected
    to any analog pin of Arduino. The following image shows the breakout board with
    the HIH-4030 sensor that is sold by SparkFun Electronics. You can learn more about
    the HIH-4030 sensor from its datasheet, which can be obtained from [https://www.sparkfun.com/datasheets/Sensors/Weather/SEN-09569-HIH-4030-datasheet.pdf](https://www.sparkfun.com/datasheets/Sensors/Weather/SEN-09569-HIH-4030-datasheet.pdf):![The
    list of required components](img/5938OS_07_06.jpg)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HIH-4030湿度传感器**：该传感器测量并提供相对湿度结果作为模拟输出。传感器的输出可以直接连接到Arduino的任何模拟引脚。以下图片展示了SparkFun
    Electronics销售的带有HIH-4030传感器的分线板。您可以从其数据表中了解更多关于HIH-4030传感器的信息，数据表可以从[https://www.sparkfun.com/datasheets/Sensors/Weather/SEN-09569-HIH-4030-datasheet.pdf](https://www.sparkfun.com/datasheets/Sensors/Weather/SEN-09569-HIH-4030-datasheet.pdf)获取：![所需组件列表](img/5938OS_07_06.jpg)'
- en: '**Push button switch**: Push button switches are small switches that can be
    used on a breadboard. When pressed, the switch output changes its status to **HIGH**,
    which is **LOW** otherwise.![The list of required components](img/5938OS_07_07.jpg)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按钮开关**：按钮开关是小型开关，可以在面包板上使用。按下时，开关输出状态变为**高电平**，否则为**低电平**。![所需组件列表](img/5938OS_07_07.jpg)'
- en: 'In the second stage, we are going to make the sensor unit mobile by replacing
    your computer with a Raspberry Pi. For that, you will need the following components
    to get started:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二阶段，我们将通过用Raspberry Pi替换电脑来使传感器单元变得便携。为此，您需要以下组件开始：
- en: '| Component (second stage) | Quantity | Image |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 组件（第二阶段） | 数量 | 图片 |'
- en: '| --- | --- | --- |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Raspberry Pi | 1 | [https://www.sparkfun.com/products/11546](https://www.sparkfun.com/products/11546)
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| Raspberry Pi | 1 | [https://www.sparkfun.com/products/11546](https://www.sparkfun.com/products/11546)
    |'
- en: '| Micro USB cable with a power adapter | 1 | [http://www.amazon.com/CanaKit-Raspberry-Supply-Adapter-Charger/dp/B00GF9T3I0/](http://www.amazon.com/CanaKit-Raspberry-Supply-Adapter-Charger/dp/B00GF9T3I0/)
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 带电源适配器的Micro USB线 | 1 | [http://www.amazon.com/CanaKit-Raspberry-Supply-Adapter-Charger/dp/B00GF9T3I0/](http://www.amazon.com/CanaKit-Raspberry-Supply-Adapter-Charger/dp/B00GF9T3I0/)
    |'
- en: '| 8 GB SD card | 1 | [https://www.sparkfun.com/products/12998](https://www.sparkfun.com/products/12998)
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 8 GB SD卡 | 1 | [https://www.sparkfun.com/products/12998](https://www.sparkfun.com/products/12998)
    |'
- en: '| TFT LCD screen | 1 | [http://www.amazon.com/gp/product/B00GASHVDU/](http://www.amazon.com/gp/product/B00GASHVDU/)
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| TFT液晶显示屏 | 1 | [http://www.amazon.com/gp/product/B00GASHVDU/](http://www.amazon.com/gp/product/B00GASHVDU/)
    |'
- en: '| A USB hub | Optional |   |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| USB集线器 | 可选 |   |'
- en: Further explanations of these components are provided later in the chapter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 本章后面将提供这些组件的进一步说明。
- en: Hardware design
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件设计
- en: The entire hardware architecture of the thermostat can be divided into two units,
    a physical world interfacing unit and a computation unit. The physical world interfacing
    unit, as its name indicates, monitors phenomenon of the physical world such as
    temperature, humidity, and ambient light using sensors connected to the Arduino
    board. The physical world interfacing unit is interchangeably mentioned as the
    thermostat sensor unit throughout the chapter. The computational unit is responsible
    for displaying the sensor information via the GUI and plots.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 恒温器的整个硬件架构可以分为两个单元：物理世界接口单元和计算单元。物理世界接口单元，正如其名称所示，通过连接到Arduino板上的传感器监测物理世界现象，如温度、湿度和环境光线。物理世界接口单元在整章中交替提到恒温器传感器单元。计算单元负责通过GUI和图表显示传感器信息。
- en: 'The following diagram shows the hardware components for the first stage where
    the thermostat sensor unit is connected to a computer using the USB port. In the
    thermostat sensor unit, various sensor components are connected to the Arduino
    board using I2C, analog, and digital pins:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了第一阶段硬件组件，其中恒温器传感器单元通过USB端口连接到电脑。在恒温器传感器单元中，各种传感器组件通过I2C、模拟和数字引脚连接到Arduino板：
- en: '![Hardware design](img/5938OS_07_08.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![硬件设计](img/5938OS_07_08.jpg)'
- en: In the second programming stage where we are going make our thermostat into
    a mobile and deployable unit, you will be using a single-board computer, Raspberry
    Pi, as the computational device. In this stage, we will use a miniature **thin-film
    transistor liquid-crystal display** (**TFT LCD**) screen that is connected to
    a Raspberry Pi via **general-purpose input/output** (**GPIO**) pins and is used
    as a display unit to replace the traditional monitor or laptop screen. The following
    diagram shows this new thermostat computational unit, which truly reduces the
    overall size of the thermostat and makes it portable and mobile. Circuit connections
    for the Arduino board are unchanged for this stage and we will use the same hardware
    without any major modifications.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个编程阶段，我们将把我们的恒温器变成一个可移动和可部署的单元，您将使用单板计算机 Raspberry Pi 作为计算设备。在这个阶段，我们将使用一个连接到
    Raspberry Pi 的微型**薄膜晶体管液晶显示屏**（**TFT LCD**），它通过**通用输入/输出**（**GPIO**）引脚连接，并用作显示单元，以替代传统的显示器或笔记本电脑屏幕。以下图显示了新的恒温器计算单元，它真正减小了恒温器的整体尺寸，使其便携和移动。在这个阶段，Arduino
    板的电路连接保持不变，我们将使用相同的硬件，无需进行任何重大修改。
- en: '![Hardware design](img/5938OS_07_09.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![硬件设计](img/5938OS_07_09.jpg)'
- en: 'As the common unit for both stages of the project, the Arduino-centric thermostat
    sensor unit requires slightly more complex circuit connections compared to other
    exercises that you have been through. In this section, we are going to interface
    the necessary sensors and push buttons to their respective pins on the Arduino
    board and you will need a breadboard to make these connections. If you are familiar
    with PCB prototyping, you can create your own PCB board by soldering these components
    and avoid the breadboard. PCB boards are more robust compared to breadboards and
    less prone to loose connections. Use the following instructions and the Fritzing
    diagram to complete the circuit connections:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作为项目两个阶段的共同单元，以 Arduino 为中心的恒温器传感器单元与其他练习相比，需要更复杂的电路连接。在本节中，我们将将必要的传感器和按钮接口到
    Arduino 板的相应引脚上，您需要使用面包板来建立这些连接。如果您熟悉 PCB 原型设计，您可以通过焊接这些组件来创建自己的 PCB 板，从而避免使用面包板。与面包板相比，PCB
    板更坚固，且不太容易发生松动连接。请使用以下说明和 Fritzing 图表来完成电路连接：
- en: As you can see in the following diagram, connect the SDA and SCL pins of TMP102
    and BH1750 to analog pins 4 and 5 of the Arduino board and create an I2C bus.
    To make these connections, you can use multiple color-coded wires to simplify
    the debugging process.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下图中所示，将 TMP102 和 BH1750 的 SDA 和 SCL 引脚连接到 Arduino 板的模拟引脚 4 和 5，并创建一个 I2C 总线。为了进行这些连接，您可以使用多色编码的电线来简化调试过程。
- en: Use two 10 kilo-ohm pull-up resistors with the SDA and SCL lines.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用两个 10 千欧姆的上拉电阻连接 SDA 和 SCL 线。
- en: Contrary to these I2C sensors, the HIH-4030 humidity sensor is a simple analog
    sensor and can be directly connected to the analog pin. Connect the HIH-4030 to
    the analog pin A0.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与这些 I2C 传感器相反，HIH-4030 湿度传感器是一个简单的模拟传感器，可以直接连接到模拟引脚。将 HIH-4030 连接到模拟引脚 A0。
- en: Connect VCC and the ground of TMP102, BH1750, and HIH-4030 to +5V and the ground
    of the Arduino board using power strips of the breadboard, as displayed in the
    diagram. We recommend that you use red and black wires to represent the +5V and
    ground lines respectively.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用面包板的电源条，将 TMP102、BH1750 和 HIH-4030 的 VCC 和地连接到 Arduino 板的 +5V 和地，如图所示。我们建议您使用红色和黑色电线分别代表
    +5V 和地线。
- en: The push button provides the output as **HIGH** or **LOW** state and interfaced
    using digital pins. As displayed in the circuit, connect these push buttons to
    digital pins 2 and 3 using two 1 kilo-ohm resistors.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按钮开关提供**高**或**低**状态的输出，并通过数字引脚进行接口。如图电路所示，使用两个 1 千欧姆电阻将按钮开关连接到数字引脚 2 和 3。
- en: Complete the remaining connections as displayed in the following diagram. Make
    sure that you have firmly connected all the wires before powering up the Arduino
    board:![Hardware design](img/5938OS_07_10.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下图中的显示完成剩余的连接。在给 Arduino 板通电之前，请确保所有电线都已牢固连接：![硬件设计](img/5938OS_07_10.jpg)
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure that you always disconnect your Arduino board from the power source
    or a USB port before making any connections. This will prevent any damage to the
    board due to short circuiting.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行任何连接之前，请确保您始终断开 Arduino 板的电源或 USB 端口。这将防止由于短路而损坏板子。
- en: Complete all the connections for the thermostat sensor unit before heading to
    the next section. As this unit is being used in both the programming stages, you
    won't be performing any further changes to the thermostat sensor unit.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在前往下一节之前，完成恒温器传感器单元的所有连接。由于该单元在编程阶段都会使用，你不会对恒温器传感器单元进行任何进一步的更改。
- en: Software flow for user experience design
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件流程用于用户体验设计
- en: 'One of the critical components of any project is its usability or accessibility.
    When you are working on making your project prototype into a product, it is necessary
    to have an intuitive and resourceful user interface so that the user can easily
    interact with your product. Hence, it is necessary to define the user experience
    and software flow of a project before you start coding. The software flow includes
    the flow chart and the logical components of the program that are derived from
    the project requirements. According to the goals that we have defined for the
    thermostat project, the software flow can be demonstrated in the following diagram:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 任何项目的关键组成部分之一是其可用性或可访问性。当你正在将你的项目原型转化为产品时，有必要拥有一个直观且资源丰富的用户界面，以便用户可以轻松地与你的产品交互。因此，在开始编码之前，有必要定义项目的用户体验和软件流程。软件流程包括流程图和程序的逻辑组件，这些组件是从项目需求中推导出来的。根据我们为恒温器项目定义的目标，软件流程可以在以下图中展示：
- en: '![Software flow for user experience design](img/5938OS_07_11.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![软件流程用于用户体验设计](img/5938OS_07_11.jpg)'
- en: In the implementation, the software flow of the project begins by measuring
    the temperature, humidity, and ambient light from Arduino and printing them on
    a serial port line by line. The Python program obtains the sensor data from Arduino
    via the serial port before presenting the data on the screen. Meanwhile, the Python
    program keeps looking for a new line of data.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施过程中，项目的软件流程首先通过Arduino测量温度、湿度和环境光线，并逐行打印在串行端口上。Python程序通过串行端口从Arduino获取传感器数据，然后在屏幕上显示数据。同时，Python程序持续寻找新的数据行。
- en: A user can interact with the thermostat using a push button, which will let
    the user change the unit for the temperature data. Once the button is pressed,
    the flag gets changed to **HIGH** and the temperature unit is changed to **Celsius**
    from its default unit, **Fahrenheit**. If the button is pressed again, the opposite
    process will happen and the unit will be changed back to its default value. Similarly,
    another user interaction point is the second push button that allows a user to
    open a plot for real-time humidity values. The second push button also utilizes
    a similar method of using flags to capture the input and opens a new plot window.
    If the same button is pushed sequentially, the program will close the plot window.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以使用按钮与恒温器进行交互，这将允许用户更改温度数据的单位。一旦按钮被按下，标志位变为**HIGH**，温度单位从默认单位**华氏度**更改为**摄氏度**。如果再次按下按钮，将发生相反的过程，单位将恢复到默认值。同样，另一个用户交互点是第二个按钮，允许用户打开实时湿度值的图表。第二个按钮也使用类似的方法使用标志位捕获输入并打开新的图表窗口。如果连续按下相同的按钮，程序将关闭图表窗口。
- en: Stage 1 – prototyping the thermostat
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1阶段 – 恒温器的原型设计
- en: In this prototyping stage, we will develop the Arduino and Python code for our
    thermostat, which will be later used in the second stage with minor changes. Before
    you start the coding exercise, make sure that you have the thermostat sensor unit
    ready with the Arduino board and the connected sensors, as described in the previous
    section. For this stage, you will be using your regular computer which is equipped
    with the Arduino IDE and the Python programming environment. The prototyping stage
    requires two levels of programming, the Arduino sketch for the thermostat sensor
    unit and the Python code for the computational unit. Let's get started with coding
    for our thermostat.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个原型设计阶段，我们将为我们的恒温器开发Arduino和Python代码，这些代码将在第二阶段进行少量更改后使用。在开始编码练习之前，请确保你有恒温器传感器单元准备就绪，包括Arduino板和连接的传感器，如前所述。对于这个阶段，你将使用配备Arduino
    IDE和Python编程环境的常规计算机。原型设计阶段需要两个级别的编程，即恒温器传感器单元的Arduino草图和计算单元的Python代码。让我们开始为我们的恒温器编写代码。
- en: The Arduino sketch for the thermostat
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 恒温器的Arduino草图
- en: The goal of this Arduino program is to interface sensors, get measurements from
    the sensors, and print them on the serial port. As we discussed earlier, rather
    than using the standard Firmata sketch that we used in the previous project, we
    are going to develop a custom Arduino sketch in this project. To get started,
    open the `Thermostat_Arduino.ino` sketch from this chapter's code folder, which
    is part of the source code that you received for the book.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Arduino程序的目标是连接传感器，从传感器获取测量值，并在串行端口上打印它们。正如我们之前讨论的，我们不会使用之前项目中使用的标准Firmata草图，而是在这个项目中开发一个自定义的Arduino草图。要开始，打开本章代码文件夹中的`Thermostat_Arduino.ino`草图，这是您为本书收到的源代码的一部分。
- en: 'Connect the USB port of the Arduino board, which is now part of the thermostat
    sensor unit, to your computer. Select the appropriate board and port names in
    the Arduino IDE and verify the code. Upload the code to your Arduino board and
    open the **Serial Monitor** window once the code is successfully uploaded. You
    should be able to see text similar to that displayed in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将Arduino板的USB端口连接到您的计算机。在Arduino IDE中选择适当的板和端口名称，并验证代码。一旦代码成功上传，打开**串行监视器**窗口。您应该能够看到类似于以下截图显示的文本：
- en: '![The Arduino sketch for the thermostat](img/5938OS_07_12.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![恒温器的Arduino草图](img/5938OS_07_12.jpg)'
- en: The Arduino code structure and basic declarations are already explained in various
    sections throughout the book. Instead of explaining the entire code line by line,
    we will focus here on the main components of the software flow that we described
    earlier.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino代码结构和基本声明已在本书的各个部分中解释过。我们不会逐行解释整个代码，而是将重点放在我们之前描述的软件流程的主要组件上。
- en: Interfacing the temperature sensor
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接温度传感器
- en: 'In the Arduino sketch, the temperature data is obtained from the TMP102 sensor
    using the `getTemperature()` function. The function implements the `Wire` library
    on the I2C address of TMP102 to read the sensor data. This is then converted into
    proper temperature values:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在Arduino草图中，使用`getTemperature()`函数从TMP102传感器获取温度数据。该函数在TMP102的I2C地址上实现了`Wire`库来读取传感器数据。然后将其转换为适当的温度值：
- en: '[PRE0]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `getTemperature()` function returns the temperature values in Celsius, which
    is then sent to the serial port.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`getTemperature()`函数返回摄氏度的温度值，然后将其发送到串行端口。'
- en: Interfacing the humidity sensor
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接湿度传感器
- en: 'Although the humidity sensor provides the analog output, it is not straightforward
    to obtain relative humidity since it also depends upon the temperature. The `getHumidity()`
    function calculates the relative humidity from the analog output provided by the
    HIH-4030 sensor. The formulas to calculate the relative humidity are obtained
    from the datasheet and reference examples of the sensor. If you are using a different
    humidity sensor, please make sure that you change the formulas accordingly, as
    they may change the results significantly:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然湿度传感器提供模拟输出，但由于它还取决于温度，因此直接获取相对湿度并不简单。`getHumidity()`函数从HIH-4030传感器提供的模拟输出计算相对湿度。计算相对湿度的公式来自数据表和传感器的参考示例。如果您使用的是不同的湿度传感器，请确保相应地更改公式，因为它们可能会显著改变结果：
- en: '[PRE1]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we are calculating relative humidity, the returned humidity values are sent
    to the serial port with percentage as the unit.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在计算相对湿度，因此返回的湿度值以百分比为单位发送到串行端口。
- en: Interfacing the light sensor
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接光传感器
- en: 'To interface the BH1750 light sensor, we will use the BH1750 Arduino library,
    which we used earlier. Using this library, the ambient light value can be directly
    obtained using the following line of code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接BH1750光传感器，我们将使用之前使用过的BH1750 Arduino库。使用此库，可以使用以下代码行直接获取环境光值：
- en: '[PRE2]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This line provides the luminance values in the unit of `lux`. These values are
    also sent to the serial port so the Python program can utilize it further.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这行提供了以`lux`为单位的光亮度值。这些值也会发送到串行端口，以便Python程序可以进一步利用它。
- en: Using Arduino interrupts
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Arduino中断
- en: 'Until now you used the Arduino program to read the physical state of an I/O
    pin using the `DigitalRead()` or `AnalogRead()` functions. How would you automatically
    obtain the state change instead of periodically reading the pins and waiting for
    the state to change? Arduino interrupts provide a very convenient way of capturing
    signals for the Arduino board. Interrupts are a very powerful way of automatically
    controlling various things in Arduino. Arduino supports interrupts using the `attachInterrupt()`
    method. In terms of the physical pins, Arduino Uno provides two interrupts: interrupt
    0 (on digital pin 2) and interrupt 1 (on digital pin 3). Various Arduino boards
    have different specifications for interrupt pins. If you are using any board other
    than Uno, please refer to Arduino''s website to find out about the interrupt pin
    for your board.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '到目前为止，你使用Arduino程序通过`DigitalRead()`或`AnalogRead()`函数读取I/O引脚的物理状态。你是如何自动获取状态变化，而不是定期读取引脚并等待状态变化呢？Arduino中断为Arduino板提供了非常方便的捕获信号的方法。中断是自动控制Arduino中各种事物的一种非常强大的方式。Arduino使用`attachInterrupt()`方法支持中断。就物理引脚而言，Arduino
    Uno提供了两个中断：中断0（在数字引脚2上）和中断1（在数字引脚3上）。各种Arduino板对中断引脚有不同的规格。如果你使用的是除Uno以外的任何板，请参考Arduino网站以了解你板的中断引脚。 '
- en: 'The `attachInterrupt()` function takes three input arguments (`pin`, `ISR`,
    and `mode`). In these input arguments, `pin` refers to the number of the interrupt
    pin, `ISR` (which stands for Interrupt Service Routine) refers to the function
    that gets called when the interrupt occurs, and `mode` defines the condition when
    the interrupt should be triggered. We have utilized this function in our Arduino
    program, as described in the following code snippet:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`attachInterrupt()`函数接受三个输入参数（`pin`、`ISR`和`mode`）。在这些输入参数中，`pin`指的是中断引脚的编号，`ISR`（代表中断服务例程）指的是当中断发生时被调用的函数，而`mode`定义了中断应该被触发时的条件。我们已经在我们描述的以下代码片段中使用了这个函数：'
- en: '[PRE3]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The supported `mode` for `attachInterrupt()` are `LOW`, `CHANGE`, `RISING`,
    and `FALLING`. In our case, the interrupts are triggered when the mode is `RISING`,
    that is, the pin goes from low to high. For interrupts declared at 0 and 1, we
    call the `button1Press` and `button2Press` functions that will change `flagTemperature`
    and `flagPlot` respectively. When `flagTemperature` is set to `HIGH`, Arduino
    sends the temperature in Celsius, otherwise it sends the temperature in Fahrenheit.
    When `flagPlot` is `HIGH`, Arduino will print the flag on the serial port, which
    will be used by the Python program later to open the plot window. You can learn
    more about Arduino interrupts from the tutorial at [http://arduino.cc/en/Reference/attachInterrupt](http://arduino.cc/en/Reference/attachInterrupt).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`attachInterrupt()`函数支持的`mode`有`LOW`、`CHANGE`、`RISING`和`FALLING`。在我们的案例中，当模式为`RISING`时，即引脚从低电平变为高电平，中断被触发。对于声明在0和1的中断，我们调用`button1Press`和`button2Press`函数，分别改变`flagTemperature`和`flagPlot`。当`flagTemperature`设置为`HIGH`时，Arduino发送摄氏温度，否则发送华氏温度。当`flagPlot`为`HIGH`时，Arduino将在串行端口上打印标志，该标志将被Python程序稍后用于打开绘图窗口。你可以从[http://arduino.cc/en/Reference/attachInterrupt](http://arduino.cc/en/Reference/attachInterrupt)上的教程中了解更多关于Arduino中断的信息。'
- en: Designing the GUI and plot in Python
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Python中设计GUI和绘图
- en: 'Once your thermostat sensor unit starts sending sensor data to the serial port,
    it is time to execute the second part of this stage, the Python code for the GUI
    and the plot. From this chapter''s code folder, open the Python file called `Thermostat_Stage1.py`.
    In the file, go to the line that contains the `Serial()` function where the serial
    port is declared. Change the serial port name from `COM5` to the appropriate one.
    You can find this information from the Arduino IDE. Save the change and exit the
    editor. From the same folder, run the following command on the terminal:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的恒温器传感器单元开始向串行端口发送传感器数据，就到了执行这个阶段的第二部分的时候了，即GUI和绘图用的Python代码。从本章的代码文件夹中，打开名为`Thermostat_Stage1.py`的Python文件。在文件中，找到包含`Serial()`函数的行，该函数声明了串行端口。将串行端口名称从`COM5`更改为适当的名称。你可以从Arduino
    IDE中找到这个信息。保存更改并退出编辑器。从同一文件夹中，在终端运行以下命令：
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will execute the Python code and you will be able to see the GUI window
    on the screen.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将执行Python代码，你将能够在屏幕上看到GUI窗口。
- en: Using pySerial to stream sensor data in your Python program
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在你的Python程序中使用pySerial流式传输传感器数据
- en: 'As described in the software flow, the program receives the sensor data from
    the Arduino using the `pySerial` library. The code that declares the serial port
    in the Python code is as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如软件流程所述，程序使用`pySerial`库从Arduino接收传感器数据。在Python代码中声明串行端口的代码如下：
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It is very important to specify the `timeout` parameter while using the `pySerial`
    library, as the code may have an error if `timeout` is not specified.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`pySerial`库时，指定`timeout`参数非常重要，因为如果没有指定`timeout`，代码可能会出错。
- en: Designing the GUI using Tkinter
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Tkinter设计GUI
- en: 'The GUI for this project is designed using the `Tkinter` library that we used
    earlier. As a GUI-building exercise, three columns of labels (labels to display
    the sensor type, the observation values, and observation units) are programmed
    as shown in the following code snippet:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的GUI设计使用了之前我们使用的`Tkinter`库。作为一个GUI构建练习，程序中编写了三列标签（用于显示传感器类型、观测值和观测单位），如下代码片段所示：
- en: '[PRE6]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once you initialize the code and before you click on the **Start** button,
    you will be able to see the following window. The observation labels are populated
    without any values at this stage:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化代码并点击**开始**按钮之前，你将能够看到以下窗口。在此阶段，观测标签被填充，但没有任何值：
- en: '![Designing the GUI using Tkinter](img/5938OS_07_13.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![使用Tkinter设计GUI](img/5938OS_07_13.jpg)'
- en: 'Once the **Start** button is clicked, the program will engage the thermostat
    sensor unit and start reading the sensor values from the serial port. Using the
    lines that are obtained from the serial port, the program will populate the observation
    labels with the obtained values. The following code snippet updates the temperature
    values in the observation label and also updates the temperature unit:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**开始**按钮后，程序将激活恒温传感器单元并开始从串行端口读取传感器值。使用从串行端口获得的行，程序将用获取的值填充观测标签。以下代码片段更新了观测标签中的温度值，并更新了温度单位：
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the program, we are using similar methods for humidity and ambient light
    to update their labels respectively. As you can see in the following screenshot,
    the GUI now has the values for the temperature, humidity, and ambient light readings:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序中，我们使用类似的方法来更新湿度和周围光线标签的值。正如你在以下截图中所看到的，GUI现在有了温度、湿度和周围光线读数的值：
- en: '![Designing the GUI using Tkinter](img/5938OS_07_14.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![使用Tkinter设计GUI](img/5938OS_07_14.jpg)'
- en: 'The **Start** and **Exit** buttons are programmed to call the `onStartButtonPress()`
    and `onExitButtonPress()` functions when they are clicked by the user. The `onStartButtonPress()`
    function executes the code necessary to create the user interface, while the `onExitButtonPress()`
    function closes all the opened windows, disconnects the thermostat sensor unit,
    and exits the code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**开始**和**退出**按钮被编程为当用户点击时调用`onStartButtonPress()`和`onExitButtonPress()`函数。当用户点击时，`onStartButtonPress()`函数执行创建用户界面所需的代码，而`onExitButtonPress()`函数关闭所有打开的窗口，断开恒温传感器单元的连接，并退出代码：'
- en: '[PRE8]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can play with the **Start** and **Exit** buttons to explore the Python code.
    To observe the changes in the sensor readings, try to blow air or place an obstacle
    over the thermostat sensor unit. If the program doesn't behave appropriately,
    check the terminal for error messages.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过**开始**和**退出**按钮来探索Python代码。要观察传感器读数的变化，尝试吹气或在一个恒温传感器单元上放置障碍物。如果程序表现不当，请检查终端以查找错误信息。
- en: Plotting percentage humidity using matplotlib
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用matplotlib绘制湿度百分比
- en: 'We will use the `matplotlib` library to plot the relative humidity values in
    real time. We will plot the relative humidity values in this project, as the range
    of the data is fixed between 0 and 100 percent. Using a similar method, you can
    also plot temperature and ambient light sensor values. While developing the code
    to plot temperature and ambient light sensor data, make sure that you are using
    appropriate ranges to cover the sensor data in the same plot. Now, as we have
    specified in the `onStartButtonPress()` function, a window similar to the following
    screenshot will pop up once you press the push button for the plot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`matplotlib`库实时绘制相对湿度值。在本项目中，我们将绘制相对湿度值，因为数据范围固定在0到100百分比之间。使用类似的方法，你也可以绘制温度和周围光线传感器的值。在开发绘制温度和周围光线传感器数据的代码时，确保你使用适当的范围来覆盖同一图表中的传感器数据。现在，正如我们在`onStartButtonPress()`函数中指定的，当你按下绘图按钮时，将弹出一个类似于以下截图的窗口：
- en: '![Plotting percentage humidity using matplotlib](img/5938OS_07_15.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![使用 matplotlib 绘制百分比湿度](img/5938OS_07_15.jpg)'
- en: 'The following code snippet is responsible for plotting the line chart using
    the humidity sensor values. The values are limited between 0 and 100 on the *y*
    axis, where the *y* axis represents the relative humidity range. The plot is updated
    every time the program receives a new humidity value:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段负责使用湿度传感器的值绘制折线图。这些值在 *y* 轴上限制在 0 到 100 之间，其中 *y* 轴表示相对湿度范围。每当程序接收到新的湿度值时，图表就会更新：
- en: '[PRE9]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using button interrupts to control the parameters
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用按钮中断来控制参数
- en: The push button interrupts are a critical part of the user experience, as the
    user can control the temperature unit and the plot using these interrupts. The
    Python features implemented using the push button interrupts are as follows.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮中断是用户体验的关键部分，因为用户可以使用这些中断来控制温度单位和图表。使用按钮中断实现的 Python 功能如下。
- en: Changing the temperature unit by pressing a button
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 通过按按钮更改温度单位
- en: 'The Arduino sketch contains the logic to handle interrupts from push buttons
    and use them to change the temperature unit. When an interrupt occurs, instead
    of printing the temperature in Fahrenheit, it sends the temperature in Celsius
    to the serial port. As you can see in the following screenshot, the Python code
    just prints the obtained numeric value of the temperature observation and the
    associated unit of measurement with it:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 脚本包含处理按钮中断的逻辑，并使用它们来更改温度单位。当发生中断时，它不是打印华氏度温度，而是将摄氏度温度发送到串行端口。如以下截图所示，Python
    代码只是打印获得的温度观测值的数值及其相关的单位：
- en: '![Changing the temperature unit by pressing a button](img/5938OS_07_16.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![通过按按钮更改温度单位](img/5938OS_07_16.jpg)'
- en: 'As you can see in the following code snippet, if the Python code receives the
    `Temperature(C)` string, it prints the temperature in `Celsius`, and if it receives
    the `Temperature(F)` string, it prints the temperature in `Fahrenheit`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下代码片段所示，如果 Python 代码接收到 `Temperature(C)` 字符串，它将打印摄氏度温度，如果接收到 `Temperature(F)`
    字符串，它将打印华氏度温度：
- en: '[PRE10]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Swapping between the GUI and the plot by pressing a button
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 通过按按钮在 GUI 和图表之间切换
- en: 'If the Python code receives the value of the flag from the serial port as `1`
    (HIGH), it creates a new plot and draws the humidity values as a line chart. However,
    it closes any open plots if it receives `0` (LOW) as the value of the flag. As
    you can see in the following code snippet, the program will always try to update
    the plot with the latest values for humidity readings. If the program can''t find
    an opened plot to draw this value from, it will create a new plot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Python 代码从串行端口接收到标志值的 `1`（高电平），它将创建一个新的图表并将湿度值绘制为折线图。然而，如果它接收到 `0`（低电平）作为标志值的，它将关闭任何打开的图表。如以下代码片段所示，程序将始终尝试使用最新的湿度读数更新图表。如果程序找不到打开的图表来绘制此值，它将创建一个新的图表：
- en: '[PRE11]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: By now, you should have a complete idea about the programs that are required
    by the thermostat sensor unit and the computation unit. Due to the complexity
    involved, you may face a few known problems during the execution of these programs.
    You can refer to the *Troubleshooting* section in case you run into any trouble.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该对恒温器传感器单元和计算单元所需的程序有一个完整的了解。由于涉及到的复杂性，你可能在执行这些程序时遇到一些已知的问题。如果你遇到任何麻烦，可以参考
    *故障排除* 部分。
- en: Troubleshooting
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'Here are some of the errors that you may find, and their fixes:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些你可能遇到的错误及其修复方法：
- en: 'I2C sensor returns the error string:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: I2C 传感器返回错误字符串：
- en: Check the connections to the SDA and SCL pins.
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查 SDA 和 SCL 引脚的连接。
- en: Confirm that you are providing enough delay between the reading cycles of the
    sensor. Check the datasheet for the delay and message sequence.
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你在传感器的读数周期之间提供足够的延迟。检查数据表中的延迟和消息序列。
- en: 'The plot window flickers instead of staying on when the button is pressed:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮按下时，图表窗口闪烁而不是保持显示：
- en: Don't try to press it multiple times. Hold and let go quickly. Make sure that
    your button is connected properly.
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要多次尝试按它。握住并快速释放。确保你的按钮连接正确。
- en: Adjust the delay in the Arduino sketch.
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整 Arduino 脚本中的延迟。
- en: Stage 2 – using a Raspberry Pi for the deployable thermostat
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二阶段 – 使用 Raspberry Pi 部署可用的恒温器
- en: We have now created a thermostat that exists as an Arduino prototype while the
    Python program runs from your computer. This prototype is still nowhere near a
    deployable or mobile state due to the connected computer, and the display monitor
    if you are using a desktop computer. A real-world thermostat device should have
    a small footprint, portable size, and miniature display to show limited information.
    The popular and practical way to achieve this goal is to use a small single-board
    computer that is capable of hosting an operating system and hence providing the
    essential Python programming interface. For this stage of the project, we will
    be utilizing a single-board computer—a Raspberry Pi—with a small LCD display.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经创建了一个恒温器，它作为一个Arduino原型存在，同时Python程序从您的电脑上运行。由于连接的电脑和如果您使用台式电脑时的显示器，这个原型仍然离可部署或便携状态相去甚远。一个现实世界的恒温器设备应该具有小巧的尺寸、便携的体积和微型显示屏来显示有限的信息。实现这一目标的流行且实用的方法是使用一个能够运行操作系统并提供基本Python编程接口的小型单板计算机。对于这个项目阶段，我们将使用一个单板计算机——树莓派——它配备了一个小型的LCD显示屏。
- en: Note
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this stage of the project is optional unless you want to extend the
    previous stage of the project to a device that can be used on a regular basis.
    If you are referring to the project to just learn Python programming, you can
    skip this entire section.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，除非您想将项目扩展到日常可用的设备，否则这个项目阶段是可选的。如果您只是想学习Python编程，您可以跳过这一整个部分。
- en: 'The following is an image of the Raspberry Pi Model B:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图片是树莓派Model B：
- en: '![Stage 2 – using a Raspberry Pi for the deployable thermostat](img/5938OS_07_17.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![阶段2 - 使用树莓派构建可部署的恒温器](img/5938OS_07_17.jpg)'
- en: If you haven't worked with a single-board computer before, you may have a lot
    of unanswered questions, such as "What exactly does a Raspberry Pi consists of?",
    "What are the benefits of using a Raspberry Pi in our project?", and "Can't we
    just use Arduino for that?". These are legitimate questions and we will try to
    answer them in the following section.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前没有使用过单板计算机，您可能会有很多未解答的问题，例如“树莓派究竟由什么组成？”、“在我们的项目中使用树莓派有什么好处？”以及“我们不能只用Arduino吗？”这些问题都是合理的，我们将在下一节中尝试回答它们。
- en: What is a Raspberry Pi?
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是树莓派？
- en: The Raspberry Pi is a small (almost the size of a credit card) single-board
    computer that was developed with the initial aim of helping students learn the
    basics of computer science. Today, the Raspberry Pi movement, guided by the Raspberry
    Pi Foundation, has turned into a DIY phenomenon and captured the attention of
    enthusiasts and developers around the world. The capabilities and features shipped
    with a Raspberry Pi at a nominal cost ($35) have boosted the popularity of the
    device.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派是一款小型（几乎与信用卡大小相当）的单板计算机，最初旨在帮助学生学习计算机科学的基础知识。如今，在树莓派基金会的指导下，树莓派运动已经变成了一种DIY现象，吸引了全球爱好者和开发者的关注。树莓派以低廉的成本（35美元）提供的功能和特性，极大地提升了该设备的人气。
- en: 'The term single-board computer is used for devices that have all the necessary
    components to run an operating system on one board, such as a processor, RAM,
    graphics processor, storage device, and basic adaptors for expansion. This makes
    a single-board computer an appropriate candidate for portable applications, as
    they can be part of the portable hardware device that we are trying to create.
    Although there were a number of single-board computers in the market before the
    introduction of the Raspberry Pi, the open source nature of the hardware and the
    economical price are the main reasons behind the popularity and rapid adoption
    of the Raspberry Pi. The following figure shows the Raspberry Pi Model B with
    its major components:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 单板计算机这个术语用于指代那些在一个板上集成所有运行操作系统所需组件的设备，例如处理器、RAM、图形处理器、存储设备和基本的扩展适配器。这使得单板计算机成为便携式应用的合适候选者，因为它们可以成为我们试图创建的便携式硬件设备的一部分。尽管在树莓派推出之前市场上已经存在许多单板计算机，但硬件的开放源代码性质和经济价格是树莓派流行和快速采用的主要原因。以下图显示了树莓派Model
    B及其主要组件：
- en: '![What is a Raspberry Pi?](img/5938OS_07_18.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![什么是树莓派？](img/5938OS_07_18.jpg)'
- en: The computational capabilities of the Raspberry Pi are adequate for running
    a trimmed down version of Linux OS. Although people had tried to use many types
    of operating systems on a Raspberry Pi, we will be using the default and recommended
    operating system called **Raspbian**. Raspbian is a Debian distribution-based
    open source Linux OS, which is optimized for the Raspberry Pi. The Raspberry Pi
    uses an SD card as the storage device, which will be used to store your OS and
    program files. In Raspbian, you can avoid running the unnecessary OS components
    that are shipped with traditional OSes. These include the Internet browser, communication
    application, and in some cases even the graphical interface.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi的计算能力足以运行Linux OS的精简版。尽管人们尝试在Raspberry Pi上使用许多类型的操作系统，但我们将使用默认和推荐的操作系统，称为**Raspbian**。Raspbian是基于Debian发行版的开源Linux操作系统，针对Raspberry
    Pi进行了优化。Raspberry Pi使用SD卡作为存储设备，将用于存储您的操作系统和程序文件。在Raspbian中，您可以避免运行传统操作系统附带的不必要组件。这些包括网络浏览器、通信应用程序，在某些情况下甚至包括图形界面。
- en: After its introduction, the Raspberry Pi has gone through a few major upgrades.
    The earlier version, called **Model A**, did not include the Ethernet port and
    only had a memory of 256 MB. In our project, we are using the Raspberry Pi's Model
    B that has a dedicated Ethernet port, 512 MB memory, and dual USB ports. The latest
    versions of Raspberry Pi, Model B+, can be also used as it is also equipped with
    an Ethernet port.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在其推出后，Raspberry Pi经历了几次重大升级。早期版本称为**Model A**，不包括以太网端口，只有256 MB的内存。在我们的项目中，我们使用的是带有专用以太网端口、512
    MB内存和双USB端口的Raspberry Pi Model B。最新的Raspberry Pi版本Model B+也可以使用，因为它也配备了以太网端口。
- en: Installing the operating system and configuring the Raspberry Pi
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装操作系统和配置Raspberry Pi
- en: Although the Raspberry Pi is a computer, it is different than traditional desktop
    computers when it comes to interfacing peripheral devices. Instead of supporting
    traditional VGA or DVI display ports, the Raspberry Pi provides a RCA video port
    for TVs and an HDMI port for the latest generation of monitors and TVs. In addition,
    the Raspberry Pi has only two USB ports that need to be utilized for connecting
    various peripheral devices such as the mouse, the keyboard, the USB wireless adapter,
    and the USB memory stick. Let's get started by collecting components and cables
    to start working with a Raspberry Pi.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Raspberry Pi是一台计算机，但在连接外围设备方面与传统台式计算机不同。Raspberry Pi不支持传统的VGA或DVI显示端口，而是为电视提供RCA视频端口，为最新一代的显示器和电视提供HDMI端口。此外，Raspberry
    Pi只有两个USB端口，需要用于连接各种外围设备，如鼠标、键盘、USB无线适配器和USB闪存盘。让我们开始收集组件和电缆，以便开始使用Raspberry Pi。
- en: What do you need to begin using the Raspberry Pi?
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 您需要什么来开始使用Raspberry Pi？
- en: 'The hardware components required to get started with a Raspberry Pi are as
    follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用Raspberry Pi所需的硬件组件如下：
- en: '**A Raspberry Pi**: For this stage of the project, you will need a Raspberry
    Pi version Model B or latest. You can buy the Raspberry Pi from [http://www.raspberrypi.org/buy](http://www.raspberrypi.org/buy).'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Raspberry Pi**：在这个项目阶段，您需要一个版本为Model B或最新的Raspberry Pi。您可以从[http://www.raspberrypi.org/buy](http://www.raspberrypi.org/buy)购买Raspberry
    Pi。'
- en: '**A power cable**: The Raspberry Pi runs on 5V DC and requires at least 750
    mA current. The power is applied through the micro USB port that is located on
    the board. In this project, you will need a micro USB power supply. Optionally,
    you can use a micro USB-based phone charger to supply power to the Raspberry Pi.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电源线**：Raspberry Pi使用5V直流电，至少需要750 mA的电流。电源通过位于板上的微型USB端口施加。在这个项目中，您需要一个微型USB电源。可选地，您可以使用基于微型USB的手机充电器为Raspberry
    Pi供电。'
- en: '**A display cable**: If you have an HDMI monitor or a TV, you can use an HDMI
    cable to connect it to your Raspberry Pi. If you want to use your VGA or DVI-based
    monitor, you will need a VGA to HDMI or DVI to HDMI adapter converter. You can
    buy these adapter converters from Amazon or Best Buy.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示器连接线**：如果您有一台HDMI显示器或电视，您可以使用HDMI线将其连接到您的Raspberry Pi。如果您想使用基于VGA或DVI的显示器，您将需要一个VGA到HDMI或DVI到HDMI适配器转换器。您可以从Amazon或Best
    Buy购买这些适配器转换器。'
- en: '**An SD card**: You are required to have at least an 8 GB SD card to get started.
    It is preferable to use an SD card that has a quality of class 4 or better. You
    can also buy an SD card with the preinstalled OS at [http://swag.raspberrypi.org/collections/frontpage/products/noobs-8gb-sd-card](http://swag.raspberrypi.org/collections/frontpage/products/noobs-8gb-sd-card).'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SD卡**：您至少需要一个8GB的SD卡才能开始。最好使用质量为4级或更好的SD卡。您还可以在[http://swag.raspberrypi.org/collections/frontpage/products/noobs-8gb-sd-card](http://swag.raspberrypi.org/collections/frontpage/products/noobs-8gb-sd-card)购买预装操作系统的SD卡。'
- en: Note
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Raspberry Pi Model B+ requires a microSD card instead of a regular SD card.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Raspberry Pi Model B+需要microSD卡而不是常规SD卡。
- en: '**A mouse and keyboard**: You will need a standard USB keyboard and a USB mouse
    to work with the Raspberry Pi.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鼠标和键盘**：您将需要一个标准的USB键盘和一个USB鼠标来与Raspberry Pi一起工作。'
- en: '**A USB hub (optional)**: Since the Model B has just two USB ports, you will
    have to remove existing devices from the USB ports to make space for another device
    if you want to connect a Wi-Fi adapter or memory stick to it. A USB hub can be
    handy to attach multiple peripheral components to your Raspberry Pi. We recommend
    that you use a USB hub with external power supply, as the Raspberry Pi can drive
    a limited number of peripheral devices through the USB ports due to power limitations.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**USB集线器（可选）**：由于Model B只有两个USB端口，如果您想连接Wi-Fi适配器或内存棒，您将不得不从USB端口移除现有设备以腾出空间。USB集线器可以方便地将多个外围组件连接到您的Raspberry
    Pi上。我们建议您使用带外部电源的USB集线器，因为由于电源限制，Raspberry Pi只能通过USB端口驱动有限数量的外围设备。'
- en: Preparing an SD card
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备SD卡
- en: To install and configure software components such as Python and the required
    libraries, first we need an operating system for the Raspberry Pi. A Raspberry
    Pi officially supports Linux-based open source operating systems that are preconfigured
    for custom Raspberry Pi hardware components. Various versions of these operating
    systems are available on Raspberry Pi's website ([http://www.raspberrypi.org/downloads](http://www.raspberrypi.org/downloads)).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装和配置如Python和所需库等软件组件，首先我们需要为Raspberry Pi提供一个操作系统。Raspberry Pi官方支持基于Linux的开源操作系统，这些操作系统预先配置了针对定制Raspberry
    Pi硬件组件。这些操作系统的各种版本可在Raspberry Pi的网站上找到（[http://www.raspberrypi.org/downloads](http://www.raspberrypi.org/downloads)）。
- en: Raspberry Pi's website provides a variety of OSes for users who range from newbies
    to experts. It is difficult for a first-time user to identify the appropriate
    OS and its installation process. If this is your first attempt with a Raspberry
    Pi, we recommend that you use the **New Out Of Box Software** (**NOOBS**) package.
    Download the latest version of `NOOBS` from the previous link. The `NOOBS` package
    includes few different operating systems such as Raspbian, Pidora, Archlinux,
    and RaspBMC. `NOOBS` streamlines the entire installation process and helps you
    to install and configure your preferred version of the OS easily. It is important
    to note that `NOOBS` is just an installation package and you will be left with
    only the Raspbian OS once you complete the given installation steps.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi的网站为从新手到专家的各种用户提供了各种操作系统。对于初学者来说，很难识别合适的操作系统及其安装过程。如果您是第一次尝试使用Raspberry
    Pi，我们建议您使用**新开箱即用软件**（**NOOBS**）包。从之前的链接下载`NOOBS`的最新版本。`NOOBS`包包括几个不同的操作系统，如Raspbian、Pidora、Archlinux和RaspBMC。`NOOBS`简化了整个安装过程，并帮助您轻松安装和配置您首选的操作系统版本。需要注意的是，`NOOBS`只是一个安装包，一旦完成给定的安装步骤，您将只剩下Raspbian操作系统。
- en: Raspberry Pi uses the SD card to host the operating system and you need to prepare
    the SD card from your computer before placing it into the SD card slot of the
    Raspberry Pi. Insert your SD card into your computer and make sure that you have
    a backup of any important information that is on the SD card. During the installation
    process, you will lose all the data stored on the SD card. Let's start by preparing
    your SD card.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi使用SD卡来托管操作系统，您需要在将SD卡放入Raspberry Pi的SD卡槽之前，从您的电脑上准备SD卡。将您的SD卡插入电脑，并确保您备份了SD卡上任何重要的信息。在安装过程中，您将丢失SD卡上存储的所有数据。让我们先从准备您的SD卡开始。
- en: 'Follow these steps to prepare an SD card from Windows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤从Windows准备SD卡：
- en: You will require a software tool to format and prepare the SD card for Windows.
    You can download the freely available formatting tool from [https://www.sdcard.org/downloads/formatter_4/eula_windows/](https://www.sdcard.org/downloads/formatter_4/eula_windows/).
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要一个软件工具来格式化和准备SD卡以供Windows使用。你可以从[https://www.sdcard.org/downloads/formatter_4/eula_windows/](https://www.sdcard.org/downloads/formatter_4/eula_windows/)下载免费提供的格式化工具。
- en: Download and install the formatting tool on your Windows computer.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的Windows计算机上下载并安装格式化工具。
- en: Insert your SD card and start the formatting tool.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入你的SD卡并启动格式化工具。
- en: In the formatting tool, open the **Options** menu and set **FORMAT SIZE ADJUSTMENT**
    to **ON**.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在格式化工具中，打开**选项**菜单并将**格式大小调整**设置为**开启**。
- en: Select the appropriate SD card and click on **Format**.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择合适的SD卡并点击**格式化**。
- en: Then, wait for the formatting tool to finish formatting the SD card. Once this
    is done, extract the downloaded `NOOBS` ZIP file to the SD card. Make sure that
    you extract the content of the ZIP folder to the root location of the SD card.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，等待格式化工具完成格式化SD卡。一旦完成，将下载的`NOOBS`ZIP文件提取到SD卡上。确保你将ZIP文件夹的内容提取到SD卡的根目录。
- en: 'Follow these directions to prepare SD card from Mac OS X:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下指示从Mac OS X准备SD卡：
- en: You will require a software tool to format and prepare the SD card for Mac OS
    X. You can download the freely available formatting tool from [https://www.sdcard.org/downloads/formatter_4/eula_mac/](https://www.sdcard.org/downloads/formatter_4/eula_mac/).
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要一个软件工具来格式化和准备SD卡以供Mac OS X使用。你可以从[https://www.sdcard.org/downloads/formatter_4/eula_mac/](https://www.sdcard.org/downloads/formatter_4/eula_mac/)下载免费提供的格式化工具。
- en: Download and install the formatting tool on your machine.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的机器上下载并安装格式化工具。
- en: Insert your SD card and run the formatting tool.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入你的SD卡并运行格式化工具。
- en: In the formatting tool, select **Overwrite Format**.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在格式化工具中，选择**覆盖格式**。
- en: Select the appropriate SD card and click on **Format**.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择合适的SD卡并点击**格式化**。
- en: Then, wait for the formatting tool to finish formatting the SD card. Once this
    is done, extract the downloaded `NOOBS` ZIP file to the SD card. Make sure that
    you extract the content of the ZIP folder to the root location of the SD card.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，等待格式化工具完成格式化SD卡。一旦完成，将下载的`NOOBS`ZIP文件提取到SD卡上。确保你将ZIP文件夹的内容提取到SD卡的根目录。
- en: 'Follow these steps to prepare the SD card from Ubuntu Linux:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤从Ubuntu Linux准备SD卡：
- en: 'To format the SD card on Ubuntu, you can use a formatting tool called `gparted`.
    Install `gparted` using the following command on the terminal:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在Ubuntu上格式化SD卡，你可以使用一个名为`gparted`的格式化工具。在终端中使用以下命令安装`gparted`：
- en: '[PRE12]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Insert your SD card and run `gparted`.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入你的SD卡并运行`gparted`。
- en: In the `gparted` window, select the entire SD card and format it using **FAT32**.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`gparted`窗口中，选择整个SD卡并使用**FAT32**格式化它。
- en: Once the format process is complete, extract the downloaded `NOOBS` ZIP file
    to the SD card. Make sure that you extract the content of the ZIP folder to the
    root location of the SD card.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦格式化过程完成，将下载的`NOOBS`ZIP文件提取到SD卡上。确保你将ZIP文件夹的内容提取到SD卡的根目录。
- en: Tip
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you have any trouble following these steps, you can refer to the official
    documentation for preparing the SD card for a Raspberry Pi at [http://www.raspberrypi.org/documentation/installation/installing-images/](http://www.raspberrypi.org/documentation/installation/installing-images/).
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你在这几个步骤中遇到任何问题，你可以参考[http://www.raspberrypi.org/documentation/installation/installing-images/](http://www.raspberrypi.org/documentation/installation/installing-images/)中为Raspberry
    Pi准备SD卡的官方文档。
- en: The Raspberry Pi setup process
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Raspberry Pi的设置过程
- en: Once you have prepared your SD card with `NOOBS`, insert it into the SD card
    slot of the Raspberry Pi. Connect your monitor, mouse, and keyboard before connecting
    the micro USB cable for the power adapter. Once you connect the power adapter,
    the Raspberry Pi will turn on automatically and you will be able to see the installation
    process on the monitor. If you are not able to see any progress on the monitor
    after connecting the power adapter, refer to the troubleshooting section that
    is available later in this chapter.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你用`NOOBS`准备好了你的SD卡，将其插入Raspberry Pi的SD卡槽中。在连接电源适配器的微型USB线之前，先连接你的显示器、鼠标和键盘。一旦连接了电源适配器，Raspberry
    Pi将自动开机，你将能在显示器上看到安装过程。如果你在连接电源适配器后无法在显示器上看到任何进度，请参考本章后面可用的故障排除部分。
- en: 'Once the Raspberry Pi boots up, it will repartition the SD card and show you
    the following installation screen so that you can get started:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Raspberry Pi启动，它将重新分区SD卡并显示以下安装屏幕，以便您开始使用：
- en: '![The Raspberry Pi setup process](img/5938OS_07_19.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![Raspberry Pi设置过程](img/5938OS_07_19.jpg)'
- en: Note
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding screenshot is taken from `raspberry_pi_F01_02_5a.jpg` by Simon
    Monk and is licensed under Attribution Creative Commons license ([https://learn.adafruit.com/assets/11384](https://learn.adafruit.com/assets/11384)).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图由Simon Monk从`raspberry_pi_F01_02_5a.jpg`中获取，并授权于Attribution Creative Commons许可([https://learn.adafruit.com/assets/11384](https://learn.adafruit.com/assets/11384))。
- en: As a first-time user, select **Raspbian [RECOMMENDED]** as the recommended operating
    system and click on the **Install OS** button. Raspbian is a Debian-based OS that
    is optimized for the Raspberry Pi and it supports useful Linux commands that we
    have already learned in the previous chapters. The process will take about 10
    to 20 minutes to complete.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为首次用户，请选择**Raspbian [推荐]**作为推荐的操作系统，并点击**安装OS**按钮。Raspbian是一个基于Debian的操作系统，针对Raspberry
    Pi进行了优化，并支持我们在前几章中学到的有用Linux命令。整个过程大约需要10到20分钟才能完成。
- en: On successful completion, you will be able to see a screen similar to the one
    displayed in the following screenshot. The screenshot displays the `raspi-config`
    tool that will let you set up the initial parameters. We will skip this process
    to complete the installation. Select **<Finish>** and press *Enter*:![The Raspberry
    Pi setup process](img/5938OS_07_20.jpg)
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功完成后，您将能够看到类似于以下截图的屏幕。该截图显示了`raspi-config`工具，它将允许您设置初始参数。我们将跳过此过程以完成安装。选择**<完成>**并按*Enter*：![Raspberry
    Pi设置过程](img/5938OS_07_20.jpg)
- en: 'You can go back to this screen again, in case you want to change any parameter,
    by typing the following command in the terminal:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想更改任何参数，可以再次回到这个屏幕，在终端中输入以下命令：
- en: '[PRE13]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Raspberry Pi will now reboot and you will be prompted to the default login screen.
    Log in using the default username `pi` and password `raspberry`.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，Raspberry Pi将重新启动，您将被提示默认登录屏幕。使用默认用户名`pi`和密码`raspberry`登录。
- en: 'You can start the graphical desktop of the Raspberry Pi by typing the following
    command in the terminal:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过在终端中输入以下命令来启动Raspberry Pi的图形桌面：
- en: '[PRE14]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To run the Python code that we developed in the first stage, you will need
    to set up required Python libraries on the Raspberry Pi. You will have to connect
    your Raspberry Pi to the Internet using the Ethernet cable to install the packages.
    Install the required Python packages on the Raspberry Pi terminal using the following
    command:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行我们在第一阶段开发的Python代码，您需要在Raspberry Pi上设置所需的Python库。您需要使用以太网线将Raspberry Pi连接到互联网以安装包。使用以下命令在Raspberry
    Pi终端上安装所需的Python包：
- en: '[PRE15]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Install `pySerial` using Setuptools:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Setuptools安装`pySerial`：
- en: '[PRE16]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, your Raspberry Pi is ready with an operating system and the necessary components
    to support Python-Arduino programming.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的Raspberry Pi已经准备好操作系统和必要的组件来支持Python-Arduino编程。
- en: Using a portable TFT LCD display with the Raspberry Pi
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Raspberry Pi和便携式TFT LCD显示器
- en: TFT LCD is a great way to expand the Raspberry Pi's functionalities and avoid
    the use of large display devices. These TFT LCD displays can be interfaced directly
    with GPIO pins. TFT LCD screens are available in various shapes and size, but
    for the Raspberry Pi we recommend that you use a screen with a size smaller than
    or equal to 3.2 inches due to interfacing convenience. Most of these small screens
    do not require additional power supply and can be directly powered using the GPIO
    pins. In a few cases, touch screen versions are also available to extend the functionality
    of the Raspberry Pi.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: TFT LCD是扩展Raspberry Pi功能并避免使用大型显示设备的好方法。这些TFT LCD显示器可以直接与GPIO引脚接口。TFT LCD屏幕有各种形状和尺寸，但鉴于接口方便，我们建议您使用小于或等于3.2英寸的屏幕。大多数这些小型屏幕不需要额外的电源供应，可以直接使用GPIO引脚供电。在少数情况下，也提供触摸屏版本，以扩展Raspberry
    Pi的功能。
- en: 'In this project, we are using a Tontec 2.4 inch TFT LCD screen that can be
    directly interfaced with the Raspberry Pi via GPIO. Although you can use any available
    TFT LCD screen, this book only cover the setup and configuration process for this
    particular screen. In most cases, manufacturers of these screens provide detailed
    configuration tutorials on their websites. Raspberry Pi forums and blogs are another
    good places to look for help if you are using a different type of the TFT LCD
    screen. The following image shows the back of the Tontec 2.4 inch TFT LCD screen
    with the location of the GPIO pins. Let''s get started and use this screen with
    your Raspberry Pi:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中，我们使用的是一款可直接通过 GPIO 与 Raspberry Pi 接口的 Tontec 2.4 英寸 TFT LCD 屏幕。虽然您可以使用任何可用的
    TFT LCD 屏幕，但本书仅涵盖此特定屏幕的设置和配置过程。在大多数情况下，这些屏幕的制造商在其网站上提供了详细的配置教程。如果您使用的是不同类型的 TFT
    LCD 屏幕，Raspberry Pi 论坛和博客是寻找帮助的另一个好地方。以下图片显示了 Tontec 2.4 英寸 TFT LCD 屏幕的背面，以及 GPIO
    引脚的位置。让我们开始使用这款屏幕与您的 Raspberry Pi 一起工作：
- en: '![Using a portable TFT LCD display with the Raspberry Pi](img/5938OS_07_21.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![使用便携式 TFT LCD 显示屏与 Raspberry Pi](img/5938OS_07_21.jpg)'
- en: Connecting the TFT LCD using GPIO
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 GPIO 连接 TFT LCD
- en: 'Before we can use the screen, we will have to connect it to the Raspberry Pi.
    Let''s disconnect the micro USB power adapter from the Raspberry Pi and locate
    the GPIO male pins near the RCA video port on the Raspberry Pi. Get your TFT screen
    and connect the GPIO pins as such you can see Raspberry Pi and the screen as displayed
    in the following image. In handful cases, the notations on the screen will be
    misleading, and therefore we suggest that you follow the guidelines from the manufacturer
    to make the connections:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够使用屏幕之前，我们必须将其连接到 Raspberry Pi。让我们从 Raspberry Pi 上断开微型 USB 电源适配器，并找到位于 Raspberry
    Pi RCA 视频端口附近的 GPIO 阳性引脚。取下您的 TFT 屏幕，并按照以下图片所示连接 GPIO 引脚。在少数情况下，屏幕上的标记可能会误导，因此我们建议您遵循制造商的指南进行连接：
- en: '![Connecting the TFT LCD using GPIO](img/5938OS_07_22.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![使用 GPIO 连接 TFT LCD](img/5938OS_07_22.jpg)'
- en: Once your screen is connected to the Raspberry Pi, power it up using the micro
    USB cable. Do not disconnect your HDMI cable yet, as your screen is still not
    ready. Before we go ahead with any of the configuration steps, let's first connect
    the Raspberry Pi to the Internet. Connect the Ethernet port of the Raspberry Pi
    to your home or office network using an Ethernet cable. Now, let's configure the
    TFT LCD screen in the Raspbian OS to make it work properly.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的屏幕连接到 Raspberry Pi 后，使用微型 USB 线缆为其供电。请勿断开 HDMI 线缆，因为您的屏幕尚未准备好。在我们进行任何配置步骤之前，让我们首先将
    Raspberry Pi 连接到互联网。使用以太网线缆将 Raspberry Pi 的以太网端口连接到您的家庭或办公室网络。现在，让我们在 Raspbian
    OS 中配置 TFT LCD 屏幕，使其正常工作。
- en: Configuring the TFT LCD with the Raspberry Pi OS
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Raspberry Pi OS 配置 TFT LCD
- en: 'Once your Raspberry Pi is powered up, log in using your username and password.
    Complete the following steps to configure the screen with your Raspberry Pi:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的 Raspberry Pi 启动后，使用您的用户名和密码登录。完成以下步骤以使用 Raspberry Pi 配置屏幕：
- en: 'Download the supporting files and manual using the following command on the
    terminal:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在终端下载支持文件和手册：
- en: '[PRE17]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Unzip the file. The following command will extract the files into the same
    directory:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压文件。以下命令将文件提取到同一目录：
- en: '[PRE18]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Navigate to the `src` directory:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `src` 目录：
- en: '[PRE19]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Enter following command to compile the source files:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以编译源文件：
- en: '[PRE20]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the boot configuration files:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开引导配置文件：
- en: '[PRE21]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the `config.txt` file, locate and uncomment the following lines of code:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `config.txt` 文件中，找到并取消以下代码行的注释：
- en: '[PRE22]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Save and exit the file.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并退出文件。
- en: 'Now, every time the Raspberry Pi restarts we need to execute a command to start
    the TFT LCD screen. To do this, open the `rc.local` file using the following command:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，每次 Raspberry Pi 重启时，我们都需要执行一个命令来启动 TFT LCD 屏幕。为此，使用以下命令打开 `rc.local` 文件：
- en: '[PRE23]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the following line of code to the file that starts the screen:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码行添加到启动屏幕的文件中：
- en: '[PRE24]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Save and exit the file. Then, reboot the Raspberry Pi using the following command:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并退出文件。然后，使用以下命令重启 Raspberry Pi：
- en: '[PRE25]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You can remove your HDMI monitor now and start working with your TFT LCD screen.
    One thing that you will have to keep in mind is that the screen resolution is
    very small and it is not optimized for coding. We prefer to use the HDMI monitor
    to perform the major code modifications that are required in the next section.
    The utilization of the TFT LCD screen in this project is to accommodate the mobility
    and portability requirements of the thermostat.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以移除你的HDMI显示器，开始使用你的TFT LCD屏幕。你必须记住的一件事是屏幕分辨率非常小，并且它没有针对编码进行优化。我们更喜欢使用HDMI显示器来执行下一节所需的重大代码修改。在这个项目中使用TFT
    LCD屏幕是为了满足恒温器的移动性和便携性要求。
- en: Optimizing the GUI for the TFT LCD screen
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化TFT LCD屏幕的GUI
- en: The resolution of the TFT LCD screen that we configured in the previous section
    is only 320 x 240 pixels, but the windows that we created in first programming
    stage are quite large. Therefore, before we copy and run our Python code on the
    Raspberry Pi, we need to adjust a few parameters in the code.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节配置的TFT LCD屏幕的分辨率仅为320 x 240像素，但我们创建的第一编程阶段中的窗口相当大。因此，在我们将Python代码复制并运行在树莓派上之前，我们需要在代码中调整一些参数。
- en: In your regular computer where you have this chapter's folder from the book's
    source code, open the `Thermostat_Stage2.py` file. This file contains the details
    of the modification required to obtain the optimum size with minor cosmetic changes.
    You will be using this file, instead of the one that we used in the previous stage,
    on your Raspberry Pi. These adjustments in the code are explained in the following
    lines of code.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的常规计算机上，从书籍源代码中获取这一章文件夹的地方，打开`Thermostat_Stage2.py`文件。此文件包含实现最佳尺寸所需修改的详细信息，并进行了一些细微的美观改动。你将使用这个文件，而不是我们在前一阶段使用的文件，在你的树莓派上。代码中的这些调整将在以下代码行中解释。
- en: 'The first major alteration is in the port name. For the Raspberry Pi, you need
    to change the name of the Arduino port from that you were using in the first stage
    to `/dev/ttyACM0`, which is the address assigned to Arduino in the majority of
    the cases:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次主要改动是在端口名称上。对于树莓派，你需要将你在第一阶段使用的Arduino端口的名称更改为`/dev/ttyACM0`，这是在大多数情况下分配给Arduino的地址：
- en: '[PRE26]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In this program file, the size of the `Tkinter` main window and the `matplotlib`
    figure are also adjusted to fit the screen size. If you are using a different-sized
    screen, change the following lines of code appropriately:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个程序文件中，`Tkinter`主窗口和`matplotlib`图的大小也调整以适应屏幕大小。如果你使用的是不同尺寸的屏幕，请相应地更改以下代码行：
- en: '[PRE27]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, with the preceding changes, the GUI window should be able to fit within
    Raspberry Pi''s screen. As the Raspberry Pi''s screen will be used as the dedicated
    screen for the thermostat application, we need to adjust the text size on the
    screen to fit the window properly. Add the `font=("Helvetica", 20)` text in the
    declaration of the labels to increase the font size. The following line of code
    shows changes that are performed on the labels to contain the sensor names:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，随着前面的更改，GUI窗口应该能够适应树莓派的屏幕。由于树莓派的屏幕将被用作恒温器应用的专用屏幕，我们需要调整屏幕上的文本大小以适当地适应窗口。在标签的声明中添加`font=("Helvetica",
    20)`文本以增加字体大小。以下代码行显示了在标签上执行的变化，以包含传感器名称：
- en: '[PRE28]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Similarly, the `font` option is added to the observation labels:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`font`选项也被添加到观察标签中：
- en: '[PRE29]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The labels for the observation unit also carry similar modifications:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 观察单位的标签也进行了类似的修改：
- en: '[PRE30]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `Thermostat_ Stage2.py` file already includes the preceding modifications
    and is ready to run on your Raspberry Pi. Before you run the file, first we need
    to copy the file to the Raspberry Pi. At this stage, the USB hub will be very
    handy to copy the files. If you don''t have a USB hub, you can utilize two available
    USB ports simultaneously to attach the USB pen drive, mouse, and keyboard. With
    the use of the USB hub, connect the USB pen drive containing the Python files
    and copy them to the home folder. Attach the USB port of the Arduino board to
    one of the ends of the USB hub. From the start menu of the Raspberry Pi, open
    the **LXTerminal** program by navigating to **Accessories** | **LXterminal**.
    Run the Python code from the home folder and you will be able to see the optimized
    user interface window that opens on the Raspberry Pi''s screen. If every step
    mentioned in the chapter is performed correctly, you will be able to see the sensor
    observation being printed when you click on the **Start** button:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`Thermostat_ Stage2.py`文件已包含前面的修改，并已准备好在您的Raspberry Pi上运行。在运行文件之前，我们首先需要将其复制到Raspberry
    Pi上。在这个阶段，USB集线器将非常有用，可以复制文件。如果您没有USB集线器，您可以使用两个可用的USB端口同时连接USB闪存盘、鼠标和键盘。使用USB集线器，将包含Python文件的USB闪存盘连接到USB集线器的一端，并将它们复制到主目录。将Arduino板的USB端口连接到USB集线器的一端。从Raspberry
    Pi的开始菜单，通过导航到**附件** | **LXTerminal**来打开**LXTerminal**程序。从主目录运行Python代码，你将能够在Raspberry
    Pi的屏幕上看到优化的用户界面窗口。如果本章中提到的每个步骤都执行正确，当你点击**开始**按钮时，你将能够看到传感器观察结果被打印出来：'
- en: '![Optimizing the GUI for the TFT LCD screen](img/5938OS_07_23.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![优化TFT液晶屏的GUI](img/5938OS_07_23.jpg)'
- en: 'At the end of the chapter, you must be wondering what a mobile unit with sensors,
    Arduino, Raspberry Pi, and TFT screen might look like. The following image shows
    a sample thermostat that was developed using the instructions given in this chapter.
    We used an acrylic sheet to hold the Raspberry Pi and the Arduino board together
    and created a compact form factor:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你可能想知道一个带有传感器、Arduino、Raspberry Pi和TFT屏幕的移动单元可能是什么样子。以下图像显示了本章中给出的说明开发的样品恒温器。我们使用亚克力板将Raspberry
    Pi和Arduino板固定在一起，并创建了一个紧凑的形态：
- en: '![Optimizing the GUI for the TFT LCD screen](img/5938OS_07_24.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![优化TFT液晶屏的GUI](img/5938OS_07_24.jpg)'
- en: Troubleshooting
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'There are a few known problems that you may face in this stage of the project.
    The following section describes these problems and their quick fixes:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目阶段，你可能会遇到一些已知的问题。以下部分描述了这些问题及其快速修复方法：
- en: 'The Raspberry Pi is not booting up:'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi无法启动：
- en: Make sure that the SD card is formatted properly with the specified tools. The
    Raspberry Pi won't boot if the SD card is not prepared properly.
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保使用指定的工具正确格式化SD卡。如果SD卡没有正确准备，Raspberry Pi将无法启动。
- en: Check the HDMI cable and the monitor to see whether they are working fine.
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查HDMI线和显示器，看它们是否工作正常。
- en: Make sure that the power adapter is compatible with the Raspberry Pi.
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保电源适配器与Raspberry Pi兼容。
- en: 'The TFT LCD screen doesn''t turn on:'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TFT液晶屏未开启：
- en: Make sure that the screen is properly connected to the GPIO pins of the Raspberry
    Pi.
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保屏幕已正确连接到Raspberry Pi的GPIO引脚。
- en: If you are using any other TFT LCD screen, make sure from its datasheet that
    your screen doesn't require additional power.
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用的是其他TFT液晶屏，请确保从其数据表中确认你的屏幕不需要额外的电源。
- en: Check whether the screen is properly configured using the steps described in
    the *Optimizing the GUI for the TFT LCD screen* section.
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用*优化TFT液晶屏的GUI*部分中描述的步骤检查屏幕是否正确配置。
- en: 'There is a slow refresh rate of the sensor data on the Raspberry Pi:'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi上传感器数据的刷新率较慢：
- en: Try decreasing the delay between each serial message that is sent by Arduino.
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试减少Arduino发送的每个串行消息之间的延迟。
- en: Terminate any other application that is running in the background.
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终止任何在后台运行的其他应用程序。
- en: Summary
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: With this project, we successfully created a portable and deployable thermostat
    using Arduino, which monitors temperature, humidity, and ambient light. During
    this process, we assembled the thermostat sensor unit using the necessary components
    and developed custom Arduino program to support them. We also utilized Python
    programming methods including GUI development and plots using `Tkinter` and `matplotlib`
    libraries respectively. Later in the chapter, we utilized the Raspberry Pi to
    convert a mere project prototype into a practical application. Henceforth, you
    should be able to develop similar projects that require you to observe and visualize
    real-time sensor information.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个项目，我们成功创建了一个便携式和可部署的恒温器，使用Arduino进行温度、湿度和环境光监测。在这个过程中，我们使用必要的组件组装了恒温器传感器单元，并开发了定制的Arduino程序来支持它们。我们还利用了Python编程方法，包括使用`Tkinter`库进行GUI开发和使用`matplotlib`库进行绘图。在章节的后面部分，我们使用了Raspberry
    Pi将一个简单的项目原型转化为实际应用。从现在起，你应该能够开发出类似的项目，这些项目需要你观察和可视化实时传感器信息。
- en: Going forward, we will be expanding this project to accommodate upcoming topics
    such as Arduino networking, cloud communication, and remote monitoring. In the
    next level of the thermostat project, we will integrate these advanced features
    and make it a really resourceful DIY project that can be used in everyday life.
    In the next chapter, we are going to start the next stage of our journey from
    making simple Python-Arduino projects to Internet-connected and remotely accessible
    IoT projects.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的工作中，我们将扩展这个项目以适应即将到来的主题，例如Arduino网络、云通信和远程监控。在恒温器项目的下一个阶段，我们将集成这些高级功能，使其成为一个真正有价值的DIY项目，可以在日常生活中使用。在下一章中，我们将开始我们的旅程的下一阶段，从制作简单的Python-Arduino项目过渡到互联网连接和远程访问的物联网项目。
