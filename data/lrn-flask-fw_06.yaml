- en: Chapter 6. Building an Administrative Dashboard
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。构建管理仪表板
- en: In this chapter, we will build an administrative dashboard for our website.
    Our admin dashboard will give certain, selected, users the ability to manage all
    the content across the entire site. In essence, the admin site will be a graphical
    frontend for the database, supporting operations for creating, editing, and deleting
    rows in our application's tables. The excellent Flask-Admin extension provides
    almost all these functionalities out-of-the- box, but we will go beyond the defaults
    to extend and customize the admin pages.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为我们的网站构建一个管理仪表板。我们的管理仪表板将使特定的、选择的用户能够管理整个网站上的所有内容。实质上，管理站点将是数据库的图形前端，支持在应用程序表中创建、编辑和删除行的操作。优秀的Flask-Admin扩展几乎提供了所有这些功能，但我们将超越默认值，扩展和定制管理页面。
- en: 'In this chapter we shall:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Install Flask-Admin and add it to our website
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Flask-Admin并将其添加到我们的网站
- en: Add views for working with the `Entry`, `Tag,` and `User` models
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加用于处理`Entry`、`Tag`和`User`模型的视图
- en: Add a view for managing the website's static assets
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加管理网站静态资产的视图
- en: Integrate the admin with the Flask-Login framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将管理与Flask-Login框架集成
- en: Create a column to identify a user as an administrator
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个列来标识用户是否为管理员
- en: Create a custom index page for the admin dashboard
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为管理仪表板创建一个自定义索引页面
- en: Installing Flask-Admin
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Flask-Admin
- en: Flask-Admin provides a readymade admin interface for Flask applications. Flask-Admin
    also integrates nicely with SQLAlchemy to provide views for managing your application's
    models.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-Admin为Flask应用程序提供了一个现成的管理界面。Flask-Admin还与SQLAlchemy很好地集成，以提供用于管理应用程序模型的视图。
- en: 'The following image gives is a sneak preview of what the **Entry** admin will
    look like by the end of this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图像是对本章结束时**Entry**管理员将会是什么样子的一个 sneak preview：
- en: '![Installing Flask-Admin](img/1709_06_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![安装Flask-Admin](img/1709_06_01.jpg)'
- en: While this amount of functionality requires relatively little code, we still
    have a lot to cover, so let's get started. Begin by installing `Flask-Admin` into
    `virtualenv` using `pip`. At the time of writing, the current version of Flask-Admin
    is 1.0.7.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种功能需要相对较少的代码，但我们仍然有很多内容要涵盖，所以让我们开始吧。首先使用`pip`将`Flask-Admin`安装到`virtualenv`中。在撰写本文时，Flask-Admin的当前版本是1.0.7。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can test that it installed correctly if you wish by entering the following
    code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望测试它是否安装正确，可以输入以下代码：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Adding Flask-Admin to our app
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Flask-Admin添加到我们的应用程序
- en: 'Unlike the other extensions in our app, which we instantiated in the `app`
    module, we will be setting up the admin extension in its own module. We will be
    writing several admin-specific classes, so it makes sense to put them in their
    own module. Create a new module named `admin.py` in the `app` directory, and add
    the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们应用程序中的其他扩展不同，我们将在其自己的模块中设置管理扩展。我们将编写几个特定于管理的类，因此将它们放在自己的模块中是有意义的。在`app`目录中创建一个名为`admin.py`的新模块，并添加以下代码：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Because our `admin` module depends on the `app` module, in order to avoid a
    circular import we need to be sure that `admin` is loaded *after* `app`. Open
    the `main.py` module and add the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们的`admin`模块依赖于`app`模块，为了避免循环导入，我们需要确保在`app`之后加载`admin`。打开`main.py`模块并添加以下内容：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should now be able to start the development server and navigate to `/admin/`
    to view a barebones admin–the default dashboard, as seen in the following image:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能够启动开发服务器并导航到`/admin/`以查看一个简单的管理员仪表板-默认的仪表板，如下图所示：
- en: '![Adding Flask-Admin to our app](img/1709_06_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![将Flask-Admin添加到我们的应用程序](img/1709_06_02.jpg)'
- en: As you progress through this chapter, we will turn this boring and plain admin
    interface into a rich and powerful dashboard for managing your blog.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您在本章中的进展，我们将把这个无聊和普通的管理界面变成一个丰富而强大的仪表板，用于管理您的博客。
- en: Exposing models through the Admin
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过管理公开模型
- en: Flask-Admin comes with a `contrib` package that contains special view classes
    designed to work with SQLAlchemy models. These classes provide out-of-the-box
    create, read, update, and delete functionalities.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-Admin带有一个`contrib`包，其中包含专门设计用于与SQLAlchemy模型一起工作的特殊视图类。这些类提供开箱即用的创建、读取、更新和删除功能。
- en: 'Open `admin.py` and update the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`admin.py`并更新以下代码：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note how we call `admin.add_view()` and pass instances of the `ModelView` class,
    as well as the `db` session, for it to access the database with. Flask-Admin works
    by providing a central endpoint to which we, the developers, can then add our
    own views.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们如何调用`admin.add_view()`并传递`ModelView`类的实例，以及`db`会话，以便它可以访问数据库。Flask-Admin通过提供一个中央端点来工作，我们开发人员可以向其中添加我们自己的视图。
- en: 'Start the development server and try pulling up your admin site again. It should
    look something like the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 启动开发服务器并尝试再次打开您的管理站点。它应该看起来像下面的截图：
- en: '![Exposing models through the Admin](img/1709_06_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![通过管理公开模型](img/1709_06_03.jpg)'
- en: 'Try clicking into one of our model''s views by selecting its link in the navigation
    bar. Clicking the **Entry** link displays all the entries in the database in a
    clean, tabular format. There are even links to create, edit, or delete entries
    as seen in the next screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过在导航栏中选择其链接来点击我们模型的视图之一。点击**Entry**链接以干净的表格格式显示数据库中的所有条目。甚至有链接可以创建、编辑或删除条目，如下一个截图所示：
- en: '![Exposing models through the Admin](img/1709_06_04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![通过管理公开模型](img/1709_06_04.jpg)'
- en: The defaults provided by Flask-Admin are great, but if you start exploring the
    interface you will start to notice subtle things that could be improved or cleaned
    up. For example, it's probably not necessary to include the Entry's body text
    as a column. Similarly, the **Status** column is displaying the status as an integer,
    but we would prefer to see the name associated with that integer. We can also
    click the *Pencil* icon in each of the `Entry` rows. This will take you to the
    default edit form view that you can use to modify that entry.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-Admin提供的默认值很好，但是如果您开始探索界面，您会开始注意到一些微妙的东西可以改进或清理。例如，可能不需要将Entry的正文文本包括在列中。同样，**状态**列显示状态为整数，但我们更希望看到与该整数相关联的名称。我们还可以单击每个`Entry`行中的*铅笔*图标。这将带您到默认的编辑表单视图，您可以使用它来修改该条目。
- en: 'It all looks something like the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所有看起来都像下面的截图：
- en: '![Exposing models through the Admin](img/1709_06_05.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![通过管理员公开模型](img/1709_06_05.jpg)'
- en: 'As you can see in the preceding screenshot, Flask-Admin does an impressive
    job of handling our foreign key-to-key and many-to-many fields (author and tags).
    It also does a pretty good job choosing which HTML widget to use for a given field
    as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，Flask-Admin在处理我们的外键到键和多对多字段（作者和标签）方面做得非常出色。它还相当不错地选择了要为给定字段使用哪个HTML小部件，如下所示：
- en: Tags can be added and removed using a nice multi-select widget
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签可以使用漂亮的多选小部件添加和删除
- en: Author can be selected using a drop-down menu
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作者可以使用下拉菜单选择
- en: The entry body is conveniently presented as a text area
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条目正文方便地显示为文本区域
- en: 'Unfortunately, there are some obvious problems with this form, as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这个表单存在一些明显的问题，如下所示：
- en: The ordering of the fields seems arbitrary.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段的排序似乎是任意的。
- en: The **Slug** field appears as an editable text input since this is managed by
    the database model. This field should, instead, be generated automatically from
    the Entry's title.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Slug**字段显示为可编辑文本输入，因为这是由数据库模型管理的。相反，此字段应该从Entry的标题自动生成。'
- en: The **Status** field is a free-form text input field, but should be a drop-down
    menu with human-readable status labels rather than numbers.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**字段是一个自由格式的文本输入字段，但应该是一个下拉菜单，其中包含人类可读的状态标签，而不是数字。'
- en: The **Created Timestamp** and **Modified Timestamp** fields appear editable,
    but should be generated automatically.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建时间戳**和**修改时间戳**字段看起来是可编辑的，但应该自动生成。'
- en: In the following section, we'll see how to customize the `Admin` class and the
    `ModelView` class, so that the admin really works for our app.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将看到如何自定义`Admin`类和`ModelView`类，以便管理员真正为我们的应用程序工作。
- en: Customizing the list views
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义列表视图
- en: Let's set aside the forms for a moment and focus on cleaning up the list. To
    do this, we will create a subclass of the Flask-Admin, `ModelView`. The `ModelView`
    class provides numerous extension points and attributes that control the look
    and feel of the list display.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂时把表单放在一边，专注于清理列表。为此，我们将创建一个Flask-Admin的子类`ModelView`。`ModelView`类提供了许多扩展点和属性，用于控制列表显示的外观和感觉。
- en: 'We''ll start by cleaning up the list columns by manually specifying the attributes
    we wish to display. Additionally, since we are going to be displaying the author
    in its own column, we will ask Flask-Admin to efficiently fetch it from the database.
    Open `admin.py` and update the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先通过手动指定我们希望显示的属性来清理列表列。此外，由于我们将在单独的列中显示作者，我们将要求Flask-Admin从数据库中高效地获取它。打开`admin.py`并更新以下代码：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You may notice that `tease` and `tag_list` are not actually the names of columns
    in our `Entry` model. Flask-Admin gives you the ability to use any attribute as
    a column value. We also specify the column to use for creating references to other
    models. Open the `models.py` module and add the following properties to the `Entry`
    model:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到`tease`和`tag_list`实际上不是我们`Entry`模型中的列名。Flask-Admin允许您使用任何属性作为列值。我们还指定要用于创建对其他模型的引用的列。打开`models.py`模块，并向`Entry`模型添加以下属性：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, when you visit the **Entry** admin, you should be presented with a clean,
    readable table as seen in the following image:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您访问**Entry**管理员时，您应该看到一个干净、可读的表格，如下图所示：
- en: '![Customizing the list views](img/1709_06_06.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![自定义列表视图](img/1709_06_06.jpg)'
- en: 'Let''s also fix the display of the **Status** column. Those numbers are difficult
    to remember – it would be preferable to display a human-readable value. Flask-Admin
    comes with a helper for *enumerated* fields (such as **Status**). We simply need
    to provide a mapping of the status value to display the value, and Flask-Admin
    does the rest. Make the following additions to the `EntryModelView`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也修复**状态**列的显示。这些数字很难记住 - 最好显示人类可读的值。Flask-Admin带有*枚举*字段（如**状态**）的辅助程序。我们只需要提供要显示值的状态值的映射，Flask-Admin就会完成剩下的工作。在`EntryModelView`中进行以下添加：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Our `Entry` list view is looking much better. Let''s make some improvements
    to the `User` list view now. Again, we will subclass `ModelView` and specify the
    attributes that we wish to override. Add the following class to `admin.py` below
    `EntryModelView`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Entry`列表视图看起来好多了。现在让我们对`User`列表视图进行一些改进。同样，我们将对`ModelView`进行子类化，并指定要覆盖的属性。在`admin.py`中在`EntryModelView`下面添加以下类：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows how the `User` list view looks with our changes:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们对`User`列表视图的更改：
- en: '![Customizing the list views](img/1709_06_07.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![自定义列表视图](img/1709_06_07.jpg)'
- en: Adding search and filtering to the list view
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向列表视图添加搜索和过滤
- en: In addition to displaying lists of our model instances, Flask-Admin comes with
    powerful search and filtering capabilities. Let's suppose we have a large number
    of entries and want to find those that contain a certain keyword, such as Python.
    It would be beneficial if, from the list view, we could enter our search and have
    Flask-Admin list only those entries that contain the word 'Python' in the title
    or the body.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 除了显示我们的模型实例列表外，Flask-Admin还具有强大的搜索和过滤功能。假设我们有大量条目，并且想要找到包含特定关键字（如Python）的条目。如果我们能够在列表视图中输入我们的搜索，并且Flask-Admin只列出标题或正文中包含单词'Python'的条目，那将是有益的。
- en: 'As you might expect, this is very easy to accomplish. Open `admin.py` and add
    the following line:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所期望的那样，这是非常容易实现的。打开`admin.py`并添加以下行：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When you re-load the `Entry` list view, you will see a new textbox that will
    allow you to search the `title` and `body` fields as seen in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当您重新加载`Entry`列表视图时，您将看到一个新的文本框，允许您搜索`title`和`body`字段，如下面的屏幕截图所示：
- en: '![Adding search and filtering to the list view](img/1709_06_08.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![向列表视图添加搜索和过滤](img/1709_06_08.jpg)'
- en: As useful as a full-text search can be, for non-textual fields such as **Status**
    or **Created Timestamp**, it would be nice to have more powerful filtering capabilities.
    Again, Flask-Admin comes to the rescue, providing easy-to-use, easy-to-configure
    filtering options.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管全文搜索可能非常有用，但对于**状态**或**创建时间戳**等非文本字段，拥有更强大的过滤能力会更好。再次，Flask-Admin提供了易于使用、易于配置的过滤选项，来拯救我们。
- en: 'Let''s see how filters work by adding several to the `Entry` list. Once again,
    we will be modifying the `EntryModelView as follows`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向`Entry`列表添加几个过滤器来看看过滤器是如何工作的。我们将再次修改`EntryModelView`如下：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `column_filters` attribute contains a mixture of the names of columns on
    the `Entry` model, as well as fields on *related* models such as from `User`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`column_filters`属性包含`Entry`模型上的列名称，以及来自`User`的*相关*模型的字段：'
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When you access the `Entry` list view, you will now see a new drop-down menu
    labeled **Add Filter**. Experiment with the various data types. Note that, when
    you attempt to filter on the **Status** column, Flask-Admin automatically uses
    the `Public`, `Draft`, and `Deleted` labels. Also note that, when you filter on
    the **Created Timestamp**, Flask-Admin presents a nice date/time picker widget.
    In the following screenshot, I''ve set up a variety of filters:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问`Entry`列表视图时，您现在将看到一个名为**添加过滤器**的新下拉菜单。尝试各种数据类型。请注意，当您尝试在**状态**列上进行过滤时，Flask-Admin会自动使用`Public`、`Draft`和`Deleted`标签。还要注意，当您在**创建时间戳**上进行过滤时，Flask-Admin会呈现一个漂亮的日期/时间选择器小部件。在下面的屏幕截图中，我设置了各种过滤器：
- en: '![Adding search and filtering to the list view](img/1709_06_09.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![向列表视图添加搜索和过滤](img/1709_06_09.jpg)'
- en: At this point, the `Entry` list view is very functional. As an exercise, set
    up the `column_filters` and `column_searchable_list` attributes for the `User`
    `ModelView`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，`Entry`列表视图非常实用。作为练习，为`User` `ModelView`设置`column_filters`和`column_searchable_list`属性。
- en: Customizing Admin model forms
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义管理模型表单
- en: We will wrap up the discussion of model views by showing how to customize the
    form class. As you will recall, there were several limitations with the default
    forms provided by Flask-Admin. We will show in this section how to customize the
    display of the form fields used for creating and editing model instances.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过展示如何自定义表单类来结束模型视图的讨论。您会记得，默认表单由Flask-Admin提供的有一些限制。在本节中，我们将展示如何自定义用于创建和编辑模型实例的表单字段的显示。
- en: 'Our goal will be to remove the superfluous fields, and to use a more appropriate
    widget for the **Status** field, achieving what is seen in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是删除多余的字段，并为**状态**字段使用更合适的小部件，实现以下屏幕截图中所示的效果：
- en: '![Customizing Admin model forms](img/1709_06_10.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![自定义管理模型表单](img/1709_06_10.jpg)'
- en: 'In order to achieve this, we will first manually specify the list of fields
    that we wish to display on the form. This is done by specifying a `form_columns`
    attribute on the `EntryModelView class`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们首先手动指定我们希望在表单上显示的字段列表。这是通过在`EntryModelView类`上指定`form_columns`属性来完成的：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Additionally, we wish the `status` field to be a drop-down widget using human-readable
    labels for the various states. Since we already have defined the status choices,
    we will instruct Flask-Admin to override the `status` field with a WTForms `SelectField`,
    and pass in the list of valid choices:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们希望`status`字段成为一个下拉小部件，使用各种状态的可读标签。由于我们已经定义了状态选择，我们将指示Flask-Admin使用WTForms
    `SelectField`覆盖`status`字段，并传入有效选择的列表：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: By default, the user field will be displayed as a drop-down with simple type
    ahead. Imagine, though, if this list contained thousands of users! That would
    result in a very large query and a slow rendering time, due to all the `<option>`
    elements that would need to be created.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，用户字段将显示为一个带有简单类型的下拉菜单。不过，想象一下，如果此列表包含数千个用户！这将导致一个非常大的查询和一个慢的渲染时间，因为需要创建所有的`<option>`元素。
- en: 'When a form containing a foreign key is rendered to a very large table, Flask-Admin
    allows us to use Ajax to fetch the desired row. Add the following attribute to
    the `EntryModelView`, and now your users will be loaded efficiently using Ajax:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当包含外键的表单呈现到非常大的表时，Flask-Admin允许我们使用Ajax来获取所需的行。将以下属性添加到`EntryModelView`，现在您的用户将通过Ajax高效加载：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This directive tells Flask-Admin that, when we are looking up the **Author**,
    it should allow us to search on the author''s name or e-mail. The following screenshot
    shows what it looks like:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个指令告诉Flask-Admin，当我们查找**作者**时，它应该允许我们在作者的姓名或电子邮件上进行搜索。以下屏幕截图显示了它的外观：
- en: '![Customizing Admin model forms](img/1709_06_11.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![自定义管理模型表单](img/1709_06_11.jpg)'
- en: We now have a very nice looking `Entry` form.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个非常漂亮的`Entry`表单。
- en: Enhancing the User form
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增强用户表单
- en: Because passwords are stored as hashes in the database, there is little value
    in displaying or editing them directly. On the `User` form, however, we will make
    it possible to enter a new password, replacing the old one. Like we did with the
    `status` field on the `Entry` form, we will specify a form-field override. Then,
    in the model change handler, we will update the user's password on-save.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因为密码在数据库中以哈希形式存储，直接显示或编辑它们的价值很小。然而，在`User`表单上，我们将使输入新密码来替换旧密码成为可能。就像我们在`Entry`表单上对`status`字段所做的那样，我们将指定一个表单字段覆盖。然后，在模型更改处理程序中，我们将在保存时更新用户的密码。
- en: 'Make the following additions to the `UserModelView module`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对`UserModelView`模块进行以下添加：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The following screenshot shows what the new `User` form looks like now. If you
    wish to change a user's password, simply enter the new one in the **New password**
    field.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了新的`User`表单的样子。如果您希望更改用户的密码，只需在**新密码**字段中输入新密码即可。
- en: '![Enhancing the User form](img/1709_06_12.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![增强用户表单](img/1709_06_12.jpg)'
- en: Generating slugs
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成slug
- en: There is still one aspect that we need to address. When creating new `Entry`,
    `User` or `Tag` objects, Flask-Admin will not correctly generate `slug` for them.
    This is due to the way Flask-Admin instantiates new model instances when saving.
    To remedy this, we will create some subclasses of `ModelView` that will ensure
    that `slug` is generated correctly for `Entry`, `User,` and `Tag` objects
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然有一个方面需要解决。当创建新的`Entry`、`User`或`Tag`对象时，Flask-Admin将无法正确生成它们的`slug`。这是由于Flask-Admin在保存时实例化新模型实例的方式。为了解决这个问题，我们将创建一些`ModelView`的子类，以确保为`Entry`、`User`和`Tag`对象正确生成`slug`。
- en: 'Open `admin.py` and, at the top of the module, add the following classes:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`admin.py`文件，并在模块顶部添加以下类：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: These changes instruct Flask-Admin that, whenever a model is changed, slug should
    be re-generated.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改指示Flask-Admin，每当模型更改时，应重新生成slug。
- en: In order to start using this functionality, update the `EntryModelView` and
    `UserModelView` modules to extend the `SlugModelView class`. For the `Tag` model,
    it is sufficient to simply register it directly with the `SlugModelView` class.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始使用这个功能，更新`EntryModelView`和`UserModelView`模块以扩展`SlugModelView`类。对于`Tag`模型，直接使用`SlugModelView`类进行注册即可。
- en: 'To summarize, your code should look like the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，您的代码应该如下所示：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These changes ensure that slugs are generated correctly, whether saving existing
    objects or creating new ones.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改确保正确生成slug，无论是保存现有对象还是创建新对象。
- en: Managing static assets via the Admin
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过管理员管理静态资产
- en: Flask-Admin provides a convenient interface for managing static assets (or other
    files on disk) as an extension to the admin dashboard. Let's add a `FileAdmin`
    to our site that will allow us to upload or modify files in our application's
    `static` directory.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-Admin提供了一个方便的界面，用于管理静态资产（或磁盘上的其他文件），作为管理员仪表板的扩展。让我们向我们的网站添加一个`FileAdmin`，它将允许我们上传或修改应用程序的`static`目录中的文件。
- en: 'Open `admin.py` and import the following module at the top of the file:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`admin.py`文件，并在文件顶部导入以下模块：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, below the various `ModelView` implementations, add the following highlighted
    lines of code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在各种`ModelView`实现下，添加以下突出显示的代码行：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Pulling up the admin in your browser, you should see a new tab labeled **Static
    Files**. Clicking this link will take you to a familiar file-browser, as seen
    in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开管理员，您应该会看到一个名为**静态文件**的新选项卡。单击此链接将带您进入一个熟悉的文件浏览器，如下截图所示：
- en: '![Managing static assets via the Admin](img/1709_06_13.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![通过管理员管理静态资产](img/1709_06_13.jpg)'
- en: Tip
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you run into issues managing your files, make sure that you have the correct
    permissions set up for the `static` directory and its children.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在管理文件时遇到问题，请确保为`static`目录及其子目录设置了正确的权限。
- en: Securing the admin website
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护管理员网站
- en: As you may have noticed while testing the new admin website, it does not do
    any sort of authentication. In order to protect our admin site from anonymous
    users (or even certain logged-in users), we will add a new column to the `User`
    model to indicate that a user can access the admin website. Then we will use a
    hook provided by Flask-Admin to ensure that the requesting user has permissions.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当您测试新的管理员网站时，您可能已经注意到它没有进行任何身份验证。为了保护我们的管理员网站免受匿名用户（甚至某些已登录用户）的侵害，我们将向`User`模型添加一个新列，以指示用户可以访问管理员网站。然后，我们将使用Flask-Admin提供的钩子来确保请求用户具有权限。
- en: 'The first step is to add a new column to our `User` model. Add the `admin`
    column to the `User` model as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是向我们的`User`模型添加一个新列。将`admin`列添加到`User`模型中，如下所示：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now we will generate a schema migration using the Flask-Migrate extension:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用Flask-Migrate扩展生成模式迁移：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s also add a method to the `User` model that will tell us if the given
    user is an admin. Add the following method to the `User` model:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还向`User`模型添加一个方法，用于告诉我们给定的用户是否是管理员。将以下方法添加到`User`模型中：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This may seem silly, but it's good code-hygiene should you ever wish to change
    the semantics of how your app determines whether a user is an admin.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来很傻，但如果您希望更改应用程序确定用户是否为管理员的语义，这是很好的代码规范。
- en: Before continuing on to the next section, you may want to modify the `UserModelView`
    class to include the `admin` column in `column_list`, `column_filters`, and `form_columns`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一节之前，您可能希望修改`UserModelView`类，将`admin`列包括在`column_list`、`column_filters`和`form_columns`中。
- en: Creating an authentication and authorization mixin
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建身份验证和授权混合
- en: Since we have created several views in our admin view, we need a reusable way
    of expressing our authentication logic. We will achieve this reuse through composition.
    You've seen composition already in the form of view decorators (`@login_required`)
    – decorators are just a way of composing multiple functions. Flask-Admin is a
    little different in that it uses Python classes to represent an individual view.
    Instead of function decorators, we will use a class-friendly method of composition
    called **mixins**.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在管理员视图中创建了几个视图，我们需要一种可重复使用的表达我们身份验证逻辑的方法。我们将通过组合实现此重用。您已经在视图装饰器（`@login_required`）的形式中看到了组合-装饰器只是组合多个函数的一种方式。Flask-Admin有点不同，它使用Python类来表示单个视图。我们将使用一种友好于类的组合方法，称为**mixins**，而不是函数装饰器。
- en: A mixin is a class that provides a method override. In the case of Flask-Admin,
    the method we wish to override is the `is_accessible` method. Inside this method,
    we will check whether the current user is authenticated.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: mixin是提供方法覆盖的类。在Flask-Admin的情况下，我们希望覆盖的方法是`is_accessible`方法。在这个方法内部，我们将检查当前用户是否已经验证。
- en: 'In order to access the current user, we must import the special `g` object
    at the top of the `admin` module:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问当前用户，我们必须在`admin`模块的顶部导入特殊的`g`对象：
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Below the import statements, add the following class:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入语句下面，添加以下类：
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, we will be *mixing* it in with several other classes through Python''s
    multiple inheritances. Make the following changes to the `BaseModelView class`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将通过Python的多重继承将其与其他几个类*混合*在一起。对`BaseModelView类`进行以下更改：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And also to the `BlogFileAdmin class`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 还有`BlogFileAdmin类`：
- en: '[PRE26]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If you attempt to access an admin view URL such as /admin/entry/ without meeting
    the `is_accessible` criteria, Flask-Admin will return an HTTP 403 Forbidden response
    as seen in the following screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尝试访问/admin/entry/等管理员视图URL而不符合`is_accessible`条件，Flask-Admin将返回HTTP 403 Forbidden响应，如下截图所示：
- en: '![Creating an authentication and authorization mixin](img/1709_06_14.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![创建身份验证和授权mixin](img/1709_06_14.jpg)'
- en: Note
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As we have not made changes to the `Tag` admin model this is still accessible.
    We will leave it up to you to work out how to protect it.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有对`Tag`管理员模型进行更改，因此仍然可以访问。我们将由您来解决如何保护它。
- en: Setting up a custom index page
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置自定义首页
- en: The landing page for our admin (`/admin/`) is very boring. In fact, it has no
    content at all besides a navigation bar. Flask-Admin allows us to specify a custom
    index view, which we will use to display a simple greeting.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的管理员着陆页（/admin/）非常无聊。实际上，除了导航栏之外，它根本没有任何内容。Flask-Admin允许我们指定自定义索引视图，我们将使用它来显示一个简单的问候语。
- en: 'In order to add a custom index view, we need to import several new helpers.
    Add the following highlighted imports to the top of the `admin` module:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加自定义索引视图，我们需要导入几个新的帮助程序。将以下突出显示的导入添加到`admin`模块的顶部：
- en: '[PRE27]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`from flask import redirect` request provides the `@expose` decorator much
    like Flask itself uses `@route`. Since this view is the index, the URL we will
    be exposing is `/`. The following code will create a simple index view that renders
    a template. Note that we specify the index view as a parameter when initializing
    the `Admin` object:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`from flask import redirect`请求提供`@expose`装饰器，就像Flask本身使用`@route`一样。由于这个视图是索引，我们将要暴露的URL是`/`。以下代码将创建一个简单的索引视图，用于呈现模板。请注意，在初始化`Admin`对象时，我们将索引视图指定为参数：'
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'One final piece is missing: authentication. Since users will commonly access
    the admin by going directly to `/admin/`, it would be handy to redirect unauthenticated
    users to a login page. We can do that by checking, in the index view, whether
    the current user is authenticated as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后还缺少一件事：身份验证。由于用户通常会直接访问/admin/来访问管理员，因此检查索引视图中当前用户是否经过身份验证将非常方便。我们可以通过以下方式来检查：当前用户是否经过身份验证。
- en: '[PRE29]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Flask-Admin templates
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flask-Admin模板
- en: 'Flask-Admin provides a simple master template that you can extend to create
    a uniform look to your admin site. The Flask-Admin master template comprises the
    following blocks:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-Admin提供了一个简单的主模板，您可以扩展它以创建统一的管理员站点外观。Flask-Admin主模板包括以下区块：
- en: '| Block Name | Description |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 区块名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `head_meta` | Page metadata in header |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `head_meta` | 头部页面元数据 |'
- en: '| `title` | Page title |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `title` | 页面标题 |'
- en: '| `head_css` | CSS links in header |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `head_css` | 头部的CSS链接 |'
- en: '| `head` | Arbitrary content in document header |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `head` | 文档头部的任意内容 |'
- en: '| `page_body` | Page layout |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `page_body` | 页面布局 |'
- en: '| `brand` | Logo in the menu bar |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `brand` | 菜单栏中的标志 |'
- en: '| `main_menu` | Main menu |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `main_menu` | 主菜单 |'
- en: '| `menu_links` | Navigation bar |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `menu_links` | 导航栏 |'
- en: '| `access_control` | Section to the right of the menu that can be used to add
    login/logout buttons |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `access_control` | 菜单栏右侧的区域，可用于添加登录/注销按钮 |'
- en: '| `messages` | Alerts and various messages |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `messages` | 警报和各种消息 |'
- en: '| `body` | Main content area |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `body` | 主内容区域 |'
- en: '| `tail` | Empty area below content |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `tail` | 内容下方的空白区域 |'
- en: The `body` block will be of most interest to us for this example. In your application's
    `templates` directory, create a new sub-directory named `admin` containing a blank
    file named `index.html`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，`body`块对我们来说最有趣。在应用程序的`templates`目录中，创建一个名为`admin`的新子目录，其中包含一个名为`index.html`的空文件。
- en: 'Let''s customize the admin landing page to display the current date and time
    on the server. We will extend the `master` template provided by Flask-Admin, overriding
    just the body block. Create the `admin` directory in templates and add the following
    code to `templates/admin/index.html`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们自定义管理员着陆页，以在服务器上显示当前日期和时间。我们将扩展Flask-Admin提供的`master`模板，仅覆盖`body`块。在模板中创建`admin`目录，并将以下代码添加到`templates/admin/index.html`：
- en: '[PRE30]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following is a screenshot of our new landing page:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们新着陆页的截图：
- en: '![Flask-Admin templates](img/1709_06_15.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![Flask-Admin模板](img/1709_06_15.jpg)'
- en: This is just an example to illustrate how simple it is to extend and customize
    your admin dashboard. Experiment with the various template blocks, and see if
    you can add a logout button to the navigation bar.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个例子，用来说明扩展和定制管理面板是多么简单。尝试使用各种模板块，看看是否可以在导航栏中添加一个注销按钮。
- en: Reading more
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读更多
- en: Flask-Admin is a versatile, highly-configurable Flask extension. While we covered
    a number of the more commonly-used features of Flask-Admin, there are simply too
    many features to discuss in a single chapter. So, I strongly suggest that you
    visit the project's documentation if you would like to continue learning. The
    documentation can be found online at [https://flask-admin.readthedocs.org/](https://flask-admin.readthedocs.org/).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-Admin是一个多才多艺、高度可配置的Flask扩展。虽然我们介绍了Flask-Admin的一些常用功能，但是要讨论的功能实在太多，无法在一个章节中全部涵盖。因此，我强烈建议您访问该项目的文档，如果您想继续学习。文档可以在[https://flask-admin.readthedocs.org/](https://flask-admin.readthedocs.org/)上找到。
- en: Summary
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to create an administrative dashboard for our
    app using the Flask-Admin extension. We learned how to expose our SQLAlchemy models
    as lists of editable objects, as well as how to customize the look and feel of
    the tables and the forms. We added a file-browser to assist in managing our app's
    static assets. We also integrated the admin with our authentication system.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Flask-Admin扩展为我们的应用程序创建管理面板。我们学习了如何将我们的SQLAlchemy模型公开为可编辑对象的列表，以及如何定制表格和表单的外观。我们添加了一个文件浏览器，以帮助管理应用程序的静态资产。我们还将管理面板与我们的身份验证系统集成。
- en: In the next chapter, we will learn about adding APIs to our application so that
    we can access it programmatically.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何向我们的应用程序添加API，以便可以通过编程方式访问它。
