- en: Chapter 3. Hello World! with Django
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。使用Django的Hello World！
- en: 'In this chapter, we will not actually start with the development phase. Instead,
    we will study the basics of websites to learn Django, namely, the project and
    application creation. In this chapter, we will also:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们实际上不会开始开发阶段。相反，我们将学习网站的基础知识，以了解Django，即项目和应用程序的创建。在本章中，我们还将：
- en: Learn how to use regular expressions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用正则表达式
- en: Create your first URLs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个URL
- en: Create your first view
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个视图
- en: Test your application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试你的应用程序
- en: At the end of the chapter, we will have created our first web page that will
    display `Hello World!`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将创建我们的第一个网页，显示`Hello World!`。
- en: Routing in Django
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django中的路由
- en: 'In the previous chapter, we edited the `settings.py` file to configure our
    Django project. We will edit `settings.py` again to add a new parameter. The following
    line must be present in `settings.py`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们编辑了`settings.py`文件来配置我们的Django项目。我们将再次编辑`settings.py`以添加一个新参数。以下行必须存在于`settings.py`中：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This parameter will define the Python file that will contain all the URLs of
    our site. We have already spoken about the previous file as it is in the `Work_manager`
    folder. The syntax that is used to define the `ROOT_URLCONF` variable means that
    Django takes the URLs in the `urls.py` file contained in the `Workmanager` package
    to the root of the project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数将定义包含我们网站所有URL的Python文件。我们已经谈到了之前的文件，因为它在`Work_manager`文件夹中。用于定义`ROOT_URLCONF`变量的语法意味着Django将`Workmanager`包中的`urls.py`文件中的URLs带到项目的根目录。
- en: The routing of our application will be based on this file. The routing defines
    how the client request will be treated based on the URL sent.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序的路由将基于此文件。路由定义了基于发送的URL将如何处理客户端请求。
- en: In fact, when the controller receives the client request, it will go in the
    `urls.py` file and check whether the URL is a customer's request and use the corresponding
    view.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，当控制器接收到客户端请求时，它将进入`urls.py`文件，并检查URL是否是客户端的请求，并使用相应的视图。
- en: 'For example, in the following URL, Django will look for the `search` string
    in `urls.py` to know what action to take: `http://localhost/search`.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在以下URL中，Django将在`urls.py`中查找`search`字符串，以了解要采取什么操作：`http://localhost/search`。
- en: 'This is what the `urls.py` file looks like, as it is created by Django when
    creating the project:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`urls.py`文件的样子，它是Django创建项目时创建的：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will detail the components of this file:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细介绍此文件的组件：
- en: The first line imports the functions commonly used in the management of URLs.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一行导入了在URL管理中常用的函数。
- en: The next two lines are useful to the administration module. We will comment
    by adding `#` at the beginning of the line. These lines will be explained in a
    later chapter.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下面两行对管理模块很有用。我们将通过在行首添加`#`来进行注释。这些行将在后面的章节中解释。
- en: The remaining lines define the URLs in the `urlpatterns` variable. We will also
    review the URL starting with `url (r '^ admin`.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其余的行定义了`urlpatterns`变量中的URL。我们还将审查以`url (r '^ admin`开头的URL。
- en: After having received a request from a web client, the controller goes through
    the list of URLs linearly and checks whether the URL is correct with regular expressions.
    If it is not in conformity, the controller keeps checking the rest of the list.
    If it is in conformity, the controller will call the method of the corresponding
    view by sending the parameters in the URL. If you want to write URLs, you must
    first know the basics of regular expressions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在从Web客户端接收到请求后，控制器会线性地遍历URL列表，并检查URL是否符合正则表达式。如果不符合，控制器将继续检查列表的其余部分。如果符合，控制器将通过在URL中发送参数来调用相应视图的方法。如果您想编写URL，您必须首先了解正则表达式的基础知识。
- en: Regular expressions
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则表达式
- en: Regular expressions are like a small language in itself. Despite their complex
    and inaccessible air, they can manipulate the strings with great flexibility.
    They comprise a sequence of characters to define a pattern.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式就像一个小语言本身。尽管它们复杂且难以理解，但它们可以以极大的灵活性操纵字符串。它们由一系列字符组成，用于定义模式。
- en: We will not explore all the concepts of regular expressions in this book, because
    it would require several chapters and divert us from the main goal of this book.
    Practice your regular expressions before you write your first URLs; many sites
    help you train on regular expressions. Search for `Online regex matcher`, and
    you will find pages to check your regular expressions through JavaScript. You
    can further explore regular expressions through the book, *Mastering Regular Expressions
    Python*, *Packt Publishing*, written by Félix López. There is a practical tool
    to visualize regular expressions. This tool is called **Regexper** and was created
    by Jeff Avallone. We will use this to represent regular expressions as a diagram.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在本书中探讨所有正则表达式的概念，因为这将需要几章，并使我们偏离本书的主要目标。在编写您的第一个URL之前，练习您的正则表达式；许多网站可以帮助您在正则表达式上进行训练。搜索“在线正则表达式匹配器”，您将找到通过JavaScript检查您的正则表达式的页面。您还可以通过Félix
    López撰写的书籍*Mastering Regular Expressions Python*，*Packt Publishing*进一步探索正则表达式。有一个实用工具可以可视化正则表达式。这个工具叫做**Regexper**，由Jeff
    Avallone创建。我们将使用它来表示正则表达式的图表。
- en: The following sections explore the patterns used, functions, and an example
    to help you understand regular expressions better.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分探讨了使用的模式、函数和示例，以帮助您更好地理解正则表达式。
- en: The uninterpreted characters
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未解释的字符
- en: Uninterpreted characters, such as letters and digits, in a regular expression
    mean that they are present in the string and must be placed in exactly the same
    order.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 未解释的字符，如字母和数字，在正则表达式中意味着它们存在于字符串中，并且必须按照完全相同的顺序放置。
- en: For example, the regular expression `test01` will validate the `test01`, `dktest01`,
    and `test0145g` strings but won't validate `test10` or `tste01`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，正则表达式`test01`将验证`test01`、`dktest01`和`test0145g`字符串，但不会验证`test10`或`tste01`。
- en: The regular expression `test-reg` will validate `a test-regex` but not `test-aregex`
    or `testregex:`
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式`test-reg`将验证`a test-regex`，但不会验证`test-aregex`或`testregex:`
- en: '![The uninterpreted characters](img/00007.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![未解释的字符](img/00007.jpeg)'
- en: A visual representation of the `test01` regular expression
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`test01`正则表达式的可视化表示'
- en: The beginning and the end of the line
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行的开头和结尾
- en: To check whether a string must be present at the beginning or the end of the
    line, you must use the `^` and `$` characters. If `^` is present at the beginning
    of the string, the validation will be done at the beginning of the chain. It works
    in the same way for `$` at the end.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查字符串是否必须出现在行的开头或结尾，你必须使用`^`和`$`字符。如果`^`出现在字符串的开头，验证将在字符串的开头进行。对于`$`在结尾的情况也是一样。
- en: 'The following are some examples:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例：
- en: The `^test` regular expression will validate `test` and `test01l` but not `dktest`
    or `ttest01`:![The beginning and the end of the line](img/00008.jpeg)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`^test`正则表达式将验证`test`和`test01l`，但不会验证`dktest`或`ttest01`：![行的开头和结尾](img/00008.jpeg)'
- en: The regular expression `test$` will validate `test` and `01test,` but not `test01`:![The
    beginning and the end of the line](img/00009.jpeg)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式`test$`将验证`test`和`01test`，但不会验证`test01`：![行的开头和结尾](img/00009.jpeg)
- en: The regular expression `^test$` will only validate `test`:![The beginning and
    the end of the line](img/00010.jpeg)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式`^test$`只验证`test`：![行的开头和结尾](img/00010.jpeg)
- en: The any character regular expression
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任意字符的正则表达式
- en: In a regular expression, the dot (`.`) means "any character". So, when you validate
    characters that cannot be inferred, the dot is used. If you try to validate a
    dot in your speech, use the escape character, `\`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在正则表达式中，句点（`.`）表示“任意字符”。因此，当你验证无法推断的字符时，会使用句点。如果你尝试在你的语音中验证句点，使用转义字符`\`。
- en: 'The following are examples:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是示例：
- en: '`^te.t` validates `test` or `tept`:![The any character regular expression](img/00011.jpeg)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`^te.t`验证`test`或`tept`：![任意字符的正则表达式](img/00011.jpeg)'
- en: '`^test\.me$` only validates `test.me`:![The any character regular expression](img/00012.jpeg)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`^test\.me$`只验证`test.me`：![任意字符的正则表达式](img/00012.jpeg)'
- en: Character classes
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符类
- en: 'To validate the characters, you can use character classes. A character class
    is enclosed in square brackets and contains all the allowed characters. To validate
    all the numbers and letters in a location, you must use `[0123456789a]`. For example,
    `^tes[t0e]$` will only validate the three chains: `test`, `tes0`, and `tese`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证字符，你可以使用字符类。字符类用方括号括起来，包含所有允许的字符。要验证位置中的所有数字和字母，你必须使用`[0123456789a]`。例如，`^tes[t0e]$`只验证三个字符串：`test`、`tes0`和`tese`。
- en: 'You can also use the following predefined classes:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用以下预定义类：
- en: '`[0-9]` is equivalent to `[0123456789]`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[0-9]`等同于`[0123456789]`'
- en: '`[a-z]` matches all the letters, `[abcdefghijklmnopqrstuvwxyz]`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[a-z]`匹配所有字母，`[abcdefghijklmnopqrstuvwxyz]`'
- en: '`[A-Z]` matches all uppercase letters'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[A-Z]`匹配所有大写字母'
- en: '`[a-zA-Z]` matches all the letters'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[a-zA-Z]`匹配所有字母'
- en: 'The following are the shortcuts:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是快捷方式：
- en: '`\d` is equivalent to `[0-9]`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\d`等同于`[0-9]`'
- en: '`\w` is equivalent to `[a-zA-Z0-9_]`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\w`等同于`[a-zA-Z0-9_]`'
- en: '`[0-9]` is equivalent to `[0123456789]`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[0-9]`等同于`[0123456789]`'
- en: Validating the number of characters
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证字符的数量
- en: Everything that we have studied until now is the elements that define one and
    only one character. To validate a character one or more times, you must use braces
    `{x, y}`, where `x` defines the minimum number of occurrences and `y` is the maximum
    number of occurrences. If one of them is not specified, you will have an undefined
    value. For example, if you forget to include an element in `{2,}`, it means that
    the character must be present at least twice.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们学习的一切都是定义一个且仅一个字符的元素。要验证一个字符出现一次或多次，必须使用大括号`{x, y}`，其中`x`定义了最小出现次数，`y`是最大出现次数。如果其中一个未指定，将会有一个未定义的值。例如，如果你忘记在`{2,}`中包含一个元素，这意味着该字符必须至少出现两次。
- en: 'The following are some examples:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例：
- en: '`^test{2, 3}$` only validates `testt` and `testtt`:![Validating the number
    of characters](img/00013.jpeg)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`^test{2, 3}$`只验证`testt`和`testtt`：![验证字符的数量](img/00013.jpeg)'
- en: '`^tests{0,1}$` only validates `test` and `tests`![Validating the number of
    characters](img/00014.jpeg)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`^tests{0,1}$`只验证`test`和`tests`![验证字符的数量](img/00014.jpeg)'
- en: '`. ^ {1} $` validates all the channels except one: the empty string'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`. ^ {1} $`验证除一个之外的所有通道：空字符串'
- en: 'The following are the shortcuts:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是快捷方式：
- en: '`*` is equivalent to `{0}`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`等同于`{0}`'
- en: '`?` is equivalent to `{0, 1}`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`?`等同于`{0, 1}`'
- en: '`+` is equivalent to `{1}`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+`等同于`{1}`'
- en: Regular expressions are very powerful and will be very useful even outside of
    programming with Django.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式非常强大，即使在Django编程之外也会非常有用。
- en: Creating our first URL
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个URL
- en: One of the interesting features of Django is to contain a development server.
    Indeed, during the development phase of the site, the developer does not need
    to set up a web server. However, when you put the site into production, you will
    need to install a real web server because it is not for use in production.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Django的一个有趣特性之一是包含了一个开发服务器。事实上，在网站开发阶段，开发人员不需要设置Web服务器。然而，当你将网站投入生产时，你将需要安装一个真正的Web服务器，因为它不适用于生产环境。
- en: Indeed, the Django server is not secure and can hardly bear a heavy load. This
    does not mean that your site will be slow and full of flaws; it just means that
    you have to go through a real web server into production.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，Django服务器并不安全，几乎无法承受大量负载。这并不意味着你的网站会变得缓慢且充满缺陷；它只是意味着你必须在生产中使用一个真正的Web服务器。
- en: 'To use the development server, we need to use the `manage.py` runserver command
    file. We must launch the command prompt and put ourselves in the project root
    (use the `cd` command to browse folders) to execute the command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用开发服务器，我们需要使用`manage.py` runserver命令文件。我们必须启动命令提示符并进入项目根目录（使用`cd`命令浏览文件夹）来执行命令：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This command starts the Django development server. Let''s explain the control
    step by step:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令启动了Django开发服务器。让我们逐步解释控制：
- en: The `runserver` parameter starts the development server.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runserver`参数启动开发服务器。'
- en: '`127.0.0.1` is our internal IP address to the network adapter. This means that
    our server will listen and respond only to the computer on which it is launched.
    If we were in a local network and wanted to make our website available on computers
    other than ours, we would enter our local IP address instead of `127.0.0.1`. The
    value `127.0.0.1` is the default value of the parameter.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`127.0.0.1`是我们网络适配器的内部IP地址。这意味着我们的服务器只会监听和响应在其上启动的计算机。如果我们在一个局域网中，并且希望使我们的网站在除我们之外的计算机上可用，我们将输入我们的本地IP地址而不是`127.0.0.1`。值`127.0.0.1`是参数的默认值。'
- en: '`8000` defines the listening port of the server. This setting is useful to
    run multiple web servers on a single computer.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`8000`定义了服务器的监听端口。这个设置对于在一台计算机上运行多个web服务器非常有用。'
- en: 'If the command is executed correctly, the window should show us the message,
    `0 errors found`, as shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果命令执行正确，窗口应该显示`0 errors found`的消息，如下面的截图所示：
- en: '![Creating our first URL](img/00015.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的第一个URL](img/00015.jpeg)'
- en: 'To see the result, we must open our browser and enter the following URL: `http://localhost:8000`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看结果，我们必须打开浏览器并输入以下URL：`http://localhost:8000`。
- en: 'Django confirms that our development environment is functional by displaying
    the following message:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Django通过显示以下消息确认我们的开发环境是正常的：
- en: '![Creating our first URL](img/00016.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的第一个URL](img/00016.jpeg)'
- en: 'This message also means that we have no specified URL. We will add two URLs
    to our file:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个消息也意味着我们没有指定的URL。我们将向我们的文件添加两个URL：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You should consistently get to know about bugs in Django, especially on the
    GitHub page for Django: [https://github.com/django](https://github.com/django).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该始终了解Django中的错误，特别是在Django的GitHub页面上：[https://github.com/django](https://github.com/django)。
- en: In the URLs that we enter, we define the first parameter (regular expression)
    that will validate the URL. We will discuss the second argument in the following
    chapter.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们输入的URL中，我们定义了第一个参数（正则表达式），它将验证URL。我们将在下一章讨论第二个参数。
- en: Let's go back to our browser and refresh the page with the *F5* key. Django
    will display a `ViewDoesNotExist at /` `error`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到浏览器，用*F5*键刷新页面。Django将显示一个`ViewDoesNotExist at /`的错误。
- en: This means that our module does not exist. You must study your errors; in this
    example, we had an error. With this error, we will directly fix the part that
    does not work.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的模块不存在。你必须研究你的错误；在这个例子中，我们有一个错误。有了这个错误，我们将直接修复不起作用的部分。
- en: Another problem that we regularly encounter is the `404 Page not found` error.
    We can generate it by typing the `http://localhost:8000/test404` URL in our browser.
    This error means that no URL has been validating the `test404` string.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常遇到的另一个问题是`404页面未找到`错误。我们可以通过在浏览器中输入`http://localhost:8000/test404`来生成它。这个错误意味着没有URL验证`test404`字符串。
- en: We must pay attention to errors because seeing and resolving them can save us
    a lot of time.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须注意错误，因为看到并解决它们可以节省我们很多时间。
- en: Creating our first view
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个视图
- en: Now that we have created our URL and interpreted by the routing system, we must
    ensure that a view (which is a controller in the MVC pattern) meets the customer's
    demand.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的URL并由路由系统解释，我们必须确保一个视图（在MVC模式中是一个控制器）满足客户的需求。
- en: 'This is the function of the second parameter of the URLs present in `urls.py`.
    This parameter will define the method that will play the role of a view. Take,
    for example, our first URL:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`urls.py`中存在的第二个参数的功能。这个参数将定义扮演视图角色的方法。例如，我们的第一个URL：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Firstly, as we have seen when studying regular expressions, this URL will be
    valid only if we browse the `http://localhost:8000` URL. The second parameter
    in the URL means that in the `index.py` file, there is a method called `page`
    that will process the request. The `index.py` file is located in the `views` package
    at the root of the `TasksManager` application.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，正如我们在学习正则表达式时所看到的，这个URL只有在浏览`http://localhost:8000` URL时才有效。URL中的第二个参数意味着在`index.py`文件中有一个名为`page`的方法将处理请求。`index.py`文件位于`TasksManager`应用程序根目录下的`views`包中。
- en: When we want a folder to be recognized as a package by Python, we need to create
    a folder that contains the `__init__.py` file that we can leave blank.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望Python识别一个文件夹为包时，我们需要创建一个包含`__init__.py`文件的文件夹，我们可以将其留空。
- en: You can choose another structure to store your views. You must choose the structure
    that best fits your project. Have a long-term vision of your project in order
    to define quality architecture from the first line of code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择另一种结构来存储你的视图。你必须选择最适合你的项目的结构。从第一行代码开始，对你的项目有一个长期的愿景，以定义高质量的架构。
- en: 'In our `index.py` file, we will create a method called `page()`. This method
    will return an HTML page to the client. The page is being returned by the HTTP
    protocol, so we will use the `HttpResponse()` function and its importation. The
    argument of this `HttpResponse()` function returns the HTML content that we will
    return to the browser. To simplify reading this example, we do not use a proper
    HTML structure, because we just return `Hello world!` to the client, as shown
    in the following code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`index.py`文件中，我们将创建一个名为`page()`的方法。这个方法将向客户端返回一个HTML页面。页面是通过HTTP协议返回的，所以我们将使用`HttpResponse()`函数及其导入。这个`HttpResponse()`函数的参数返回我们将返回给浏览器的HTML内容。为了简化阅读这个例子，我们没有使用正确的HTML结构，因为我们只是向客户端返回`Hello
    world!`，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we can see in the previous example, we added a comment before our `page()`
    method. Comments are very important. They help you understand your code very quickly.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们在`page()`方法之前添加了一个注释。注释非常重要。它们帮助你快速理解你的代码。
- en: We also set the encoding of the UTF-8 characters. This will improve our application's
    compatibility with other languages. We do not necessarily indicate it later in
    the book, but it is advisable to use it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还设置了UTF-8字符的编码。这将提高我们的应用与其他语言的兼容性。我们不一定在书中后面指出它，但建议使用它。
- en: Testing our application
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试我们的应用程序
- en: To test our first page, we will have to use the `runserver` command, which we
    saw earlier in this chapter. To do this, you must run the command and refresh
    your page, `http://localhost:8000`, in your browser.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试我们的第一个页面，我们将不得不使用`runserver`命令，这是我们在本章中早些时候看到的。为了做到这一点，您必须运行命令并在浏览器中刷新您的页面，`http://localhost:8000`。
- en: If you see `Hello World!` appear in your browser without an error, it means
    that you have followed the previous steps. If you have forgotten something, do
    not hesitate to find your error on the Internet; others have probably been through
    the same.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中看到`Hello World!`而没有错误出现，这意味着您已经按照之前的步骤进行了操作。如果您忘记了某些东西，请不要犹豫在互联网上找到您的错误；其他人可能也经历过同样的情况。
- en: However, we must improve our view because at the moment, we do not respect the
    MVC model. We will create a template to separate the HTML of Python code and have
    more flexibility.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们必须改善我们的观点，因为目前我们并不尊重MVC模型。我们将创建一个模板来分离Python代码的HTML，并且具有更多的灵活性。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we studied the basics of regular expressions. It is a powerful
    tool to use to manipulate strings. We learned how to manipulate the system routing
    URL. We also created our first view that returns a string to the client. In the
    next chapter, we will learn how to create maintainable templates with Django.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了正则表达式的基础知识。这是一个强大的工具，用于操作字符串。我们学会了如何操作系统路由URL。我们还创建了我们的第一个视图，将一个字符串返回给客户端。在下一章中，我们将学习如何使用Django创建可维护的模板。
