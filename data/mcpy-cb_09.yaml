- en: Coding on the micro:bit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在micro:bit上编码
- en: In this chapter, we will introduce the micro:bit microcontroller. We'll explore
    its features and its strengths compared to other microcontrollers. By the end
    of this chapter, you will have learned how to load your code on this microcontroller,
    control its LED grid display, as well as interact with the buttons that come on
    board. This chapter ends with a nice project so that you can create a countdown
    timer using this hardware. Each MicroPython board has its own strengths, and it's
    good to know what's out there so that you can choose the right hardware for your
    project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍micro:bit微控制器。我们将探索其特点及与其他微控制器相比的优势。到本章结束时，您将学会如何在这个微控制器上加载您的代码，控制其LED网格显示，并与板上的按钮进行交互。本章以一个不错的项目结束，让您可以使用这个硬件创建一个倒计时器。每个MicroPython板都有其自身的优势，了解目前市面上的产品是很有好处的，这样您就可以为您的项目选择合适的硬件。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using Mu to flash code onto the micro:bit
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mu将代码闪存到micro:bit
- en: Using Mu to get a REPL on the micro:bit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mu在micro:bit上获取REPL
- en: Displaying a single character on the LED display
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在LED显示屏上显示单个字符
- en: Displaying a built-in image
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示内置图像
- en: Displaying scrolling text
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示滚动文本
- en: Showing which button has been pressed
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示已按下的按钮
- en: Creating a countdown timer
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建倒计时器
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code files for this chapter can be found in the `Chapter09` folder in this
    book's GitHub repository, available at [https://github.com/PacktPublishing/MicroPython-Cookbook](https://github.com/PacktPublishing/MicroPython-Cookbook).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在本书的GitHub存储库的`Chapter09`文件夹中找到，网址为[https://github.com/PacktPublishing/MicroPython-Cookbook](https://github.com/PacktPublishing/MicroPython-Cookbook)。
- en: You will need the BBC micro:bit board and the Mu text editor for the recipes
    in this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要BBC micro:bit板和Mu文本编辑器来完成本章的示例。
- en: The micro:bit
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: micro:bit
- en: 'The Micro Bit was created by the **British Broadcasting Corporation** (**BBC**)
    as a board that could be used for educational purposes in the UK. It is about
    half the size of a credit card and is packed with a number of input and output
    sensors, which is surprising when you consider its size. It has both an accelerometer
    and a magnetometer. It has two push buttons and a reset button. There is a 5 x
    5 array of LEDs that can act as a basic display to show different symbols and
    characters. The following photo shows what this board looks like:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Micro Bit是由**英国广播公司**（**BBC**）创建的一块可以用于英国教育目的的板子。它大约是信用卡的一半大小，并且内置了许多输入和输出传感器，考虑到其大小，这令人惊讶。它既有加速度计又有磁力计。它有两个按钮和一个复位按钮。有一个5
    x 5的LED阵列，可以作为基本显示来显示不同的符号和字符。以下照片展示了这块板子的样子：
- en: '![](assets/e9ef093d-41ba-417b-8baf-d900e073a2d8.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e9ef093d-41ba-417b-8baf-d900e073a2d8.png)'
- en: The board supports a portable power supply by using an external battery pack
    with AAA batteries. A USB connection is used to connect the board to a computer
    to transfer scripts over and run the REPL.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 该板支持使用外部电池盒和AAA电池进行便携式电源供应。使用USB连接将板子连接到计算机，以便传输脚本并运行REPL。
- en: Using Mu to flash code onto the micro:bit
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Mu将代码闪存到micro:bit
- en: This recipe will show you how to flash your Python scripts to the micro:bit.
    The Mu text editor has built-in support for flashing code to this type of board,
    and this recipe will take you through this process. Once we understand this, we
    can use it to develop and load whatever scripts we need onto the micro:bit board.
    This is an essential first step whenever you want to create projects and experiment
    with the micro:bit.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将向您展示如何将Python脚本闪存到micro:bit。Mu文本编辑器内置支持将代码闪存到这种类型的板子，本示例将带您完成这个过程。一旦我们理解了这一点，就可以用它来开发并加载我们需要的脚本到micro:bit板上。这是您想要创建项目并尝试micro:bit时的必要第一步。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to install the Mu text editor for this recipe. Follow the instructions
    in [Chapter 1](1c277918-6daf-4a83-8a06-6012ceda9ac1.xhtml), *Getting Started with
    MicroPython*, regarding the installation of the Mu text editor.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装Mu文本编辑器才能完成此操作。请按照[第1章](1c277918-6daf-4a83-8a06-6012ceda9ac1.xhtml)中关于安装Mu文本编辑器的说明进行操作，*使用MicroPython入门*。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Follow these steps to learn how to use mu to flash code onto the micro:bit:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何使用Mu将代码闪存到micro:bit：
- en: Connect the micro:bit to your computer using a USB cable.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用USB电缆将micro:bit连接到计算机。
- en: Start the Mu text editor application.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Mu文本编辑器应用程序。
- en: 'Click on the Mode button in the far-left corner of the application to bring
    up the following dialog:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击应用程序最左侧的Mode按钮，以打开以下对话框：
- en: '![](assets/9feb119a-12eb-4f33-a864-3e3b2b95f9a5.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9feb119a-12eb-4f33-a864-3e3b2b95f9a5.png)'
- en: Select the BBC micro:bit option and press OK.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择BBC micro:bit选项，然后按OK。
- en: 'Put the following block of code in the main text editor window:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码块放入主文本编辑器窗口：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Press the Flash button on the toolbar to have the code flashed to the board.
    The following screenshot has the Flash button highlighted for reference:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按工具栏上的闪存按钮，将代码闪存到板子上。以下屏幕截图中已突出显示了闪存按钮以供参考：
- en: '![](assets/81316c08-09e2-4b52-a12a-0aad1c6e484c.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/81316c08-09e2-4b52-a12a-0aad1c6e484c.png)'
- en: If you look at the LED grid on the board, it should now display the `x` character.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您查看板子上的LED网格，现在应该显示`x`字符。
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The micro:bit takes a different approach to loading your code on the board compared
    to Circuit Playground Express. The board requires that you use certain software
    that understands how to take your Python scripts and flash them onto these types
    of boards. The Mu text editor fully supports this MicroPython board. The initial
    steps were needed to configure Mu so that it is expected to interact with a connected
    micro:bit board. The script that was created is a simple script that imports the
    display object from the micro:bit Python library and uses it to display the `x`
    character on the LED display.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与Circuit Playground Express相比，micro:bit采用了不同的加载代码到板上的方法。该板需要您使用特定的软件来理解如何将您的Python脚本闪存到这些类型的板上。Mu文本编辑器完全支持这个MicroPython板。最初的步骤是需要配置Mu，以便它预期与连接的micro:bit板进行交互。创建的脚本是一个简单的脚本，它从micro:bit
    Python库中导入显示对象，并使用它在LED显示器上显示`x`字符。
- en: There's more...
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The easiest program to get started with when flashing code onto the micro:bit
    is the Mu text editor. There are other options available, though, such as a command-line
    program called uFlash. The value of using the command-line approach is that it
    gives you the flexibility of using the text editor of your choice so that you
    can edit code and then flash it when you are ready to use the uFlash utility.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在将代码闪存到micro:bit上时，最简单的程序是Mu文本编辑器。还有其他选项可用，比如一个名为uFlash的命令行程序。使用命令行方法的价值在于它可以让您灵活地使用您选择的文本编辑器，以便在准备使用uFlash实用程序时编辑代码并将其闪存。
- en: See also
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Here are a few references regarding this recipe:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是有关此配方的一些参考资料：
- en: Documentation on the uFlash command can be found at [https://uflash.readthedocs.io/en/latest/](https://uflash.readthedocs.io/en/latest/).
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关uFlash命令的文档可以在[https://uflash.readthedocs.io/en/latest/](https://uflash.readthedocs.io/en/latest/)找到。
- en: Details on the HEX file format that is used when flashing code onto the board
    can be found at [https://tech.microbit.org/software/hex-format/](https://tech.microbit.org/software/hex-format/).
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关在将代码闪存到板上时使用的HEX文件格式的详细信息可以在[https://tech.microbit.org/software/hex-format/](https://tech.microbit.org/software/hex-format/)找到。
- en: Using Mu to get a REPL on the micro:bit
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Mu在micro:bit上获取REPL
- en: This recipe will build on the approach we covered in the previous recipe. Just
    as loading your scripts onto the board is essential, so is the REPL when it comes
    to debugging your scripts. The REPL will give you a much richer interface when
    you are trying to experiment with the board or trying to figure out what's wrong
    with your code. In the REPL, you can get tracebacks and see the output of print
    statements.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将建立在我们在上一个配方中介绍的方法之上。就像加载脚本到板上一样重要，当调试脚本时，REPL也是必不可少的。REPL将为您提供一个更丰富的界面，当您尝试使用板或尝试弄清楚代码有什么问题时。在REPL中，您可以获取回溯信息并查看打印语句的输出。
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have the Mu text editor installed and configured, as well as
    your micro:bit board connected to your computer.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装和配置Mu文本编辑器，并将您的micro:bit板连接到计算机上。
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to learn how to use mu to get a REPL on the micro:bit:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何使用mu在micro:bit上获取REPL：
- en: Start the Mu text editor application.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Mu文本编辑器应用程序。
- en: 'Click on the REPL button in the toolbar, which is highlighted in the following
    screenshot:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击工具栏中突出显示的REPL按钮，如下截图所示：
- en: '![](assets/ddea152f-5611-479c-b581-ac9a53ff6324.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ddea152f-5611-479c-b581-ac9a53ff6324.png)'
- en: 'The REPL interface should now appear in the lower half of the screen, as shown
    in the following screenshot:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: REPL界面现在应该出现在屏幕的下半部分，如下截图所示：
- en: '![](assets/57f8e521-8bd4-450e-a57e-9cc6f0786d80.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/57f8e521-8bd4-450e-a57e-9cc6f0786d80.png)'
- en: 'Run the following lines of code in the REPL:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the following block of code:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码块：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `microbit` library has now been imported.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`microbit`库现在已被导入。'
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The Mu text editor has built-in REPL support for a number of boards, including
    the micro:bit. When you click the REPL button, the editor attempts to open a serial
    connection to the board. If successful, it starts a REPL session on the board.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Mu文本编辑器为许多板提供了内置的REPL支持，包括micro:bit。当您单击REPL按钮时，编辑器会尝试打开与板的串行连接。如果成功，它将在板上启动一个REPL会话。
- en: The initial text that's printed out in the REPL shows the version of the MicroPython
    interpreter in use on the board. At this point, any commands you type in the REPL
    prompt will be sent to the board over the serial connection that's evaluated on
    the board. Then, their output will be returned to the computer to be displayed
    in the REPL screen.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在REPL中打印出的初始文本显示了板上正在使用的MicroPython解释器的版本。此时，您在REPL提示符中键入的任何命令都将通过串行连接发送到板上进行评估。然后，它们的输出将返回到计算机上显示在REPL屏幕上。
- en: There's more...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The MicroPython REPL comes with a number of useful functions to help you explore
    the different Python modules and objects that are available on the board. You
    can call the `help` function on different modules and objects to get details on
    what they do. When you're exploring a particular object and want to know the attributes
    and methods that are available on that object, you can use the `dir` function
    to list them in the REPL session.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: MicroPython REPL带有许多有用的函数，帮助您探索板上可用的不同Python模块和对象。您可以在不同的模块和对象上调用`help`函数以获取有关它们的详细信息。当您探索特定对象并想要了解该对象上可用的属性和方法时，您可以使用`dir`函数在REPL会话中列出它们。
- en: See also
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Here are a few references regarding this recipe:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是有关此配方的一些参考资料：
- en: Documentation on the `help` function can be found at [https://docs.python.org/3/library/functions.html#help](https://docs.python.org/3/library/functions.html#help).
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`help`函数的文档可以在[https://docs.python.org/3/library/functions.html#help](https://docs.python.org/3/library/functions.html#help)找到。'
- en: Documentation on the `dir` function can be found at [https://docs.python.org/3/library/functions.html#dir](https://docs.python.org/3/library/functions.html#dir).
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dir`函数的文档可以在[https://docs.python.org/3/library/functions.html#dir](https://docs.python.org/3/library/functions.html#dir)找到。'
- en: Displaying a single character on the LED display
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在LED显示器上显示单个字符
- en: This recipe will show you how we can use the 5 x 5 array of LEDs that comes
    with the board to display characters and numbers. The display object has a `show`
    method that will do the mapping from characters and numbers to the bitmap image
    that needs to be displayed on the LEDs. These LEDs are one of the main forms of
    output on this board, so this recipe will provide you with a valuable means to
    interact with the scripts you put on the board.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将向您展示如何使用板上的5 x 5 LED阵列来显示字符和数字。显示对象有一个`show`方法，可以将字符和数字映射到需要显示在LED上的位图图像。这些LED是该板上的主要输出形式之一，因此这个食谱将为您提供一个有价值的交互手段，以与您放在板上的脚本进行交互。
- en: Getting ready
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: You will need to have the Mu text editor installed and configured, as well as
    your Micro Bit board connected to your computer.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装和配置Mu文本编辑器，以及将您的Micro Bit板连接到计算机。
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to learn how to display a single character on the LED display:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何在LED显示器上显示单个字符：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The display should show the letter `a` now. Run the following block of code
    to display the number `1`:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示现在应该显示字母`a`。运行以下代码块以显示数字`1`：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following block of code will display the number `2` after it''s run:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码块后，将显示数字`2`：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the following block of code to turn off the display:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码块以关闭显示：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following code should be put into the main text editor window and flashed
    to the board:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码应放入主文本编辑器窗口并刷新到板上：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once executed, this code will display the numbers 0, 1, and 2, with a 1-second
    delay between each change.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，此代码将显示数字0、1和2，每次更改之间间隔1秒。
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The display object that is part of the micro:bit Python library has a show method
    on it that can be used to display numbers and characters on the display. The initial
    two examples called the method with an argument whose data type was string.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 'micro:bit Python库中的显示对象具有一个`show`方法，可以用来在显示器上显示数字和字符。最初的两个示例调用了带有字符串数据类型的参数的方法。 '
- en: When the number `2` was shown, the value was given as an integer. This is possible
    as `show` accepts either strings or integers when it receives its input. The main
    script that is flashed in the recipe first imports the necessary libraries and
    then starts a `for` loop, which loops three times. In each loop, it displays the
    current number of the iteration starting from `0` and then sleeps for one second
    before looping again.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当显示数字`2`时，该值被给定为整数。当`show`接收其输入时，它可以接受字符串或整数。在食谱中首先导入必要的库，然后启动一个`for`循环，循环三次。在每次循环中，它显示从`0`开始的当前迭代次数，然后在再次循环之前休眠一秒。
- en: There's more...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It can be challenging dealing with such a limited display resolution of a 5
    x 5 grid of LEDs. Thankfully, the Python module that comes with the micro:bit
    has done all the work of finding a way to display all the letters and characters
    on the display in a legible fashion. In this recipe, we have seen how we can provide
    strings and integers as data to display. In the next recipe, we will see that
    the same method can also receive other objects, such as image objects.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 处理5 x 5 LED网格的有限显示分辨率可能具有挑战性。幸运的是，micro:bit附带的Python模块已经完成了在显示器上以可读方式显示所有字母和字符的工作。在这个食谱中，我们已经看到了如何提供字符串和整数作为数据来显示。在下一个食谱中，我们将看到相同的方法也可以接收其他对象，比如图像对象。
- en: See also
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references regarding this recipe:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个食谱的一些参考资料：
- en: Documentation on the `show` method can be found at [https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.show](https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.show).
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show`方法的文档可以在[https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.show](https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.show)找到。'
- en: Documentation on the `clear` method can be found at [https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.clear](https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.clear).
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clear`方法的文档可以在[https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.clear](https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.clear)找到。'
- en: Displaying a built-in image
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示内置图像
- en: This recipe will show you how we can use the 5 x 5 array of LEDs to display
    one of the built-in images that's available with the micro:bit library. There
    are many images available, ranging from facial expressions to animal symbols.
    They are very much like emojis.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将向您展示如何使用5 x 5 LED阵列来显示micro:bit库中提供的内置图像之一。有许多可用的图像，从面部表情到动物符号不等。它们非常像表情符号。
- en: In this recipe, we will see how we can display the heart and the smiley icon
    on the display. When creating projects on the micro:bit, it can be useful to display
    symbols beyond text and numbers, as shown in this recipe. If you've made a game
    on the micro:bit, you might want to show a happy or sad face when the player loses
    or wins the game.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将看到如何在显示器上显示心形和笑脸图标。在micro:bit上创建项目时，显示超出文本和数字的符号可能是有用的，就像在这个食谱中所示的那样。如果您在micro:bit上制作了游戏，您可能希望在玩家输赢游戏时显示快乐或悲伤的表情。
- en: Getting ready
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: You will need to have the Mu text editor installed and configured, as well as
    your micro:bit board connected to your computer.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装和配置Mu文本编辑器，以及将您的micro:bit板连接到计算机。
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to learn how to display a built-in image:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何显示内置图像：
- en: 'Execute the following block of code in the REPL:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中执行以下代码块：
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The display should show a happy face. Run the following block of code to show
    a heart icon:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示应该显示一个笑脸。运行以下代码块以显示一个心形图标：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following block of code will display a clock face pointing at 1 o''clock:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码块将显示一个指向1点钟的时钟表盘：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the following block of code to display a clock face animation that moves
    the clock face from 1 o''clock to 12 o''clock:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码块以显示一个时钟表盘动画，将时钟表盘从1点钟移动到12点钟：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following code should be put into the main text editor window and flashed
    to the board:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码应该放入主文本编辑器窗口并刷入到板上：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Once executed, this code will continually move the clock face from 1 o'clock
    to 12 o'clock, with a delay of `0.1` seconds between each change.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行，此代码将不断地将时钟表盘从1点钟移动到12点钟，每次更改之间的延迟为`0.1`秒。
- en: How it works...
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Image` object that is a part of the `microbit` Python library has a collection
    of built-in images that can be accessed by referring to their attribute name.
    The show method accepts these image objects and will display them on the grid
    once they're called. The initial examples in the REPL show a happy face, heart,
    and a clock face, just by referring to the names of these images.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`Image`对象是`microbit` Python库的一部分，其中包含一系列内置图像，可以通过引用其属性名称来访问。show方法接受这些图像对象，并在调用它们后在网格上显示它们。在REPL中的初始示例中，通过引用这些图像的名称，显示了一个笑脸、心形和时钟表盘。'
- en: A list is then created that points to each of the 12 clock face images in the
    correct order from 1 to 12\. This list can then be used to create a clock face
    animation. First, an infinite loop is started. During each iteration of the infinite
    loop, a `for` loop is started that will iterate through each of the 12 clock face
    images, displaying them and then pausing for 0.1 seconds before starting the next
    iteration. In this way, an animation is created of a clock face moving through
    the 12 positions on the clock.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建一个列表，指向正确顺序的12个时钟表盘图像中的每一个。然后可以使用此列表创建一个时钟表盘动画。首先，启动一个无限循环。在无限循环的每次迭代期间，将启动一个`for`循环，该循环将遍历12个时钟表盘图像中的每一个，显示它们，然后在开始下一次迭代之前暂停0.1秒。通过这种方式，创建了一个时钟表盘动画，时钟表盘在时钟的12个位置之间移动。
- en: There's more...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are many more symbols and images than just the ones that were shown in
    this recipe. You can explore them in the REPL by either referring to the documentation
    or listing their names in the REPL using the built-in `dir` function.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多符号和图像，不仅仅是这个配方中显示的。您可以在REPL中通过引用文档或使用内置的`dir`函数列出它们的名称来探索它们。
- en: The library also supports a mechanism that you can use to define your own custom
    images, which you can save in your code and reuse across projects. In this recipe,
    we showed you one way of creating image animations, but there is also built-in
    support for animations in the `show` method of the `display` object that can also
    be used.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 该库还支持一种机制，您可以使用它来定义自己的自定义图像，然后可以将其保存在代码中，并在项目中重复使用。在这个配方中，我们向您展示了创建图像动画的一种方法，但`display`对象的`show`方法中也内置了对动画的支持，也可以使用。
- en: See also
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references regarding this recipe:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是有关此配方的一些参考资料：
- en: Documentation on creating your own images can be found at [https://microbit-micropython.readthedocs.io/en/latest/tutorials/images.html#diy-images](https://microbit-micropython.readthedocs.io/en/latest/tutorials/images.html#diy-images).
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关创建自己的图像的文档，请访问[https://microbit-micropython.readthedocs.io/en/latest/tutorials/images.html#diy-images](https://microbit-micropython.readthedocs.io/en/latest/tutorials/images.html#diy-images)。
- en: Documentation on using the built-in support for creating animations can be found
    at [https://microbit-micropython.readthedocs.io/en/latest/tutorials/images.html#animation](https://microbit-micropython.readthedocs.io/en/latest/tutorials/images.html#animation).
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关使用内置支持创建动画的文档，请访问[https://microbit-micropython.readthedocs.io/en/latest/tutorials/images.html#animation](https://microbit-micropython.readthedocs.io/en/latest/tutorials/images.html#animation)。
- en: Displaying scrolling text
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示滚动文本
- en: This recipe will show you a technique that you can use to display text to the
    user using the scrolling text feature that is available with the `microbit` library.
    The LED grid is limited to showing one character at a time. By using the scrolling
    feature, you can show a message as a sequence of characters that scroll across
    the display.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将向您展示一种技术，您可以使用滚动文本功能来向用户显示文本，该功能在`microbit`库中可用。LED网格仅能一次显示一个字符。通过使用滚动功能，您可以将消息显示为一系列在显示器上滚动的字符。
- en: In this way, you can create projects that display short messages to the user,
    even with the limited physical display that is available on the board. This recipe
    will also show you how to control the speed of this animation and how to have
    the text loop endlessly on the display.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，您可以创建项目，向用户显示简短的消息，即使在板上可用的物理显示有限。这个配方还将向您展示如何控制动画的速度，以及如何使文本在显示器上无限循环。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have the Mu text editor installed and configured, as well as
    your micro:bit board connected to your computer.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装和配置Mu文本编辑器，以及将您的micro:bit板连接到计算机。
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to learn how to display scrolling text:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何显示滚动文本：
- en: 'Use the REPL to run the following lines of code:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用REPL运行以下代码行：
- en: '[PRE13]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The display should show the text `''hello''` scrolling across the display.
    The default delay is 150 milliseconds. The following block of code will scroll
    the text at double the normal speed:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示应该显示文本`'hello'`在显示器上滚动。默认延迟为150毫秒。以下代码块将以正常速度的两倍滚动文本：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following block of code will display the same text at half the default
    speed:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码块将以默认速度的一半显示相同的文本：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the following block of code to display the text in an endless loop:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码块以显示无限循环中的文本：
- en: '[PRE16]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Terminate the endless loop by pressing *Ctrl* + *C*. You should see the following
    message:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按下*Ctrl* + *C*来终止无限循环。您应该会看到以下消息：
- en: '[PRE17]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following code should be put into the main text editor window and flashed
    to the board:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码应放入主文本编辑器窗口并刷入板：
- en: '[PRE18]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Once executed, this code will scroll the text slow, normal, and fast, at three
    increasing speeds.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行，此代码将以三种不同的速度（慢速、正常速度和快速）滚动文本。
- en: How it works...
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `scroll` method is a part of the `display` object and provides all the functionality
    we need to scroll text on the display. There is only one argument required, which
    is the text to display. Once you call this method, it will start the animation
    and display each character in the provided text and scroll the characters across
    the screen until the whole text is displayed.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`scroll` 方法是 `display` 对象的一部分，并提供了我们在显示器上滚动文本所需的所有功能。只需要一个参数，即要显示的文本。一旦调用此方法，它将启动动画，并显示所提供文本中的每个字符，并将字符滚动到屏幕上，直到整个文本都显示出来。'
- en: The optional `delay` argument can be provided to control the speed at which
    the scroll animation is displayed. A lower value for the delay will create a faster
    animation, while a higher value will slow down the animation. The main script
    defines a list with three messages each, with a different setting for the the
    scroll delay. A `for` loop is then executed that will loop through each value
    and call the `scroll` method to display the specified text and apply a custom
    scroll `delay` for each message.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 可提供可选的 `delay` 参数以控制滚动动画的显示速度。延迟的较低值将创建更快的动画，而较高的值将减慢动画速度。主脚本定义了一个包含三条消息的列表，每条消息都有不同的滚动延迟设置。然后执行一个
    `for` 循环，循环遍历每个值，并调用 `scroll` 方法来显示指定的文本，并为每条消息应用自定义滚动 `delay`。
- en: There's more...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are other options provided by the `scroll` method that can come in handy.
    This method has the ability to run the `scroll` animation in the background. This
    can be useful when you want to let the message appear while your program performs
    some other action. You should be mindful of using the loop option that was presented
    in this recipe. Essentially, calling the `show` method in this way will have the
    call never return as it will start an infinite loop in the `show` method.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`scroll` 方法提供了其他选项，这些选项可能会派上用场。此方法具有在后台运行 `scroll` 动画的能力。当您希望让消息出现而程序执行其他操作时，这可能很有用。您应该注意使用此食谱中介绍的循环选项。基本上，以这种方式调用
    `show` 方法将使调用永远不会返回，因为它将在 `show` 方法中启动一个无限循环。'
- en: See also
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references regarding this recipe:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是有关此食谱的一些参考资料：
- en: Some simple examples of calling the `scroll` method can be found at [https://microbit-micropython.readthedocs.io/en/latest/tutorials/hello.html](https://microbit-micropython.readthedocs.io/en/latest/tutorials/hello.html).
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://microbit-micropython.readthedocs.io/en/latest/tutorials/hello.html](https://microbit-micropython.readthedocs.io/en/latest/tutorials/hello.html)找到一些调用
    `scroll` 方法的简单示例。
- en: Documentation on the `scroll` method can be found at [https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.scroll](https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.scroll).
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 `scroll` 方法的文档可以在[https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.scroll](https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.scroll)找到。
- en: Showing which button has been pressed
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示哪个按钮被按下
- en: This recipe will show you how to respond to either of the two push buttons on
    the board by displaying the button being pressed on the display each time the
    button is pressed. This will be the first recipe in this chapter where we will
    see how we can create an interactive project that responds to user input by displaying
    visual output through the onboard LED grid.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱将向您展示如何通过在按下按钮时在显示器上显示被按下的按钮来响应板上的两个按钮之一。这将是本章中的第一个食谱，我们将看到如何创建一个可以通过显示内置
    LED 网格的视觉输出来响应用户输入的交互式项目。
- en: When you're creating your own projects, having access to two push buttons opens
    up a lot of possibilities in terms of creating interactive applications and games
    that respond to these inputs in different ways. This recipe will provide you with
    the basic building blocks so that you can start building these sorts of projects.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建自己的项目时，拥有两个按钮可以打开许多可能性，可以创建响应这些输入的交互式应用程序和游戏。此食谱将为您提供基本构建模块，以便您可以开始构建这些类型的项目。
- en: Getting ready
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have the Mu text editor installed and configured, as well as
    your micro:bit board connected to your computer.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装和配置 Mu 文本编辑器，以及将 micro:bit 板连接到计算机。
- en: How to do it...
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Follow these steps to learn how to show which button has been:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何显示哪个按钮已被按下：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 REPL 中运行以下代码行：
- en: '[PRE19]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Since button A is not being pressed, the value that''s returned should be `False`.
    Hold down button A while you execute the following block of code:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于按钮 A 没有被按下，返回的值应为 `False`。在执行以下代码块时按住按钮 A：
- en: '[PRE20]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Hold down button B while executing the following block of code:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行以下代码块时按住按钮 B：
- en: '[PRE21]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following code should be put into the main text editor window and flashed
    to the board:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码应放入主文本编辑器窗口并刷入板：
- en: '[PRE22]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Once executed, this code will display the character `a` or `b` if either button
    A or B was pressed.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行，此代码将显示字符 `a` 或 `b`，如果按下按钮 A 或 B。
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: After the initial imports, the main script enters an infinite loop. During each
    iteration, each of the two buttons will be polled to see whether it is currently
    being pressed. If either button A or B is pressed, then the character of the pressed
    button will be displayed on the screen. The final part of the loop is to check
    if neither button is pressed and then clear the contents of the screen.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始导入之后，主脚本进入无限循环。在每次迭代期间，将轮询两个按钮，以查看它们当前是否被按下。如果按下按钮 A 或 B 中的任何一个，则屏幕上将显示按下按钮的字符。循环的最后一部分是检查是否两个按钮都没有被按下，然后清除屏幕的内容。
- en: There's more...
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe shows the basic structure of an event loop that continuously loops
    and check for events on the input sensors and takes actions in response to these
    events as they occur. You can take this basic recipe and expand it in many ways.
    For example, you could create a script that helps the user navigate and select
    between a list of menu options.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例显示了一个事件循环的基本结构，该循环不断循环并检查输入传感器上的事件，并根据发生的事件采取行动。您可以采用这个基本示例，并以许多方式进行扩展。例如，您可以创建一个脚本，帮助用户在菜单选项列表之间导航和选择。
- en: Each press of button A could display the next menu item. When button B is pressed,
    that menu item could then be selected. The overall structure of the program would
    remain the same in terms of an event loop and the checking of the state of each
    button during each loop iteration.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 按下按钮A可以显示下一个菜单项。按下按钮B后，然后可以选择该菜单项。程序的整体结构在事件循环和在每次循环迭代期间检查每个按钮的状态方面将保持不变。
- en: See also
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references regarding this recipe:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是有关此示例的一些参考资料：
- en: An example of interacting with the push buttons can be found at [https://microbit-micropython.readthedocs.io/en/latest/tutorials/buttons.html](https://microbit-micropython.readthedocs.io/en/latest/tutorials/buttons.html).
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关与按键交互的示例，请访问[https://microbit-micropython.readthedocs.io/en/latest/tutorials/buttons.html](https://microbit-micropython.readthedocs.io/en/latest/tutorials/buttons.html)。
- en: Documentation on the `Button` class and its methods can be found at [https://microbit-micropython.readthedocs.io/en/latest/button.html](https://microbit-micropython.readthedocs.io/en/latest/button.html).
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://microbit-micropython.readthedocs.io/en/latest/button.html](https://microbit-micropython.readthedocs.io/en/latest/button.html)找到有关`Button`类及其方法的文档。
- en: Creating a countdown timer
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个倒计时器
- en: This recipe will show you how to create a countdown timer using the micro:bit
    board. The countdown timer is started each time someone presses the button A.
    It displays how many seconds are left before the countdown is complete. It will
    start at the number 9 and count down until the timer is complete, at which stage
    it will clear the screen. Consulting a recipe like this can be useful whenever
    you are thinking of creating a project that requires the incorporation of elapsed
    time into your script.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例将向您展示如何使用micro:bit板创建一个倒计时器。每次有人按下按钮A时，倒计时器就会启动。它会显示倒计时完成前剩余多少秒。它将从数字9开始倒数，直到计时器完成，然后清除屏幕。在考虑创建需要将经过的时间纳入脚本的项目时，查阅此类示例可能会很有用。
- en: Getting ready
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: You will need to have the Mu text editor installed and configured, as well as
    your micro:bit board connected to your computer.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装和配置Mu文本编辑器，以及将您的micro:bit板连接到计算机。
- en: How to do it...
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to learn how to create a countdown timer:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何创建倒计时器：
- en: 'Execute the following block of code in the REPL:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中执行以下代码块：
- en: '[PRE23]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The list of numbers that are used for the countdown will is stored in the `NUMBERS` variable.
    The following block of code will show their values:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于倒计时的数字列表将存储在`NUMBERS`变量中。以下代码块将显示它们的值：
- en: '[PRE24]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following block of code will define and call the `countdown` function.
    You should see the display show a countdown from 9 to 1, with a one-second delay
    between each change:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码块将定义并调用`countdown`函数。您应该看到显示屏显示从9到1的倒计时，每次更改之间有一秒的延迟：
- en: '[PRE25]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following code should be put into the main text editor window and flashed
    to the board:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码应放入主文本编辑窗口并刷新到板上：
- en: '[PRE26]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Once executed, this code will display a 9-second countdown each time the push
    button A is pressed.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，每次按下按钮A时，此代码将显示一个9秒的倒计时。
- en: How it works...
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After the initial imports, the main script enters into an infinite loop that
    keeps checking for a button press event on button A. If it detects button A being
    pressed, it will call the countdown function to start the countdown. The `countdown`
    function loops through the list of numbers from 9 to 1.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始导入之后，主脚本进入一个无限循环，不断检查按钮A上的按钮按下事件。如果检测到按下按钮A，则将调用倒计时函数开始倒计时。`countdown`函数循环遍历从9到1的数字列表。
- en: In each loop, it will display the number and pause for 1 second before continuing
    to the next iteration. Once all nine iterations have completed, it clears the
    screen to mark the end of the timer.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次循环中，它将显示数字并暂停1秒，然后继续到下一个迭代。完成所有九次迭代后，它将清除屏幕以标记计时器的结束。
- en: There's more...
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe could be extended so that when you press button B, a different timer
    is started. Maybe button B would start a timer to count up from 1 to 9\. You could
    also make button A start a stopwatch, and button B could stop the stopwatch and
    display the elapsed time.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 可以扩展此示例，以便按下按钮B时启动不同的计时器。也许按钮B会启动一个从1到9的计时器。您还可以使按钮A启动秒表，按钮B可以停止秒表并显示经过的时间。
- en: See also
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references regarding this recipe:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是有关此示例的一些参考资料：
- en: Documentation on the `running_time` function can be found at [https://microbit-micropython.readthedocs.io/en/latest/microbit.html#microbit.running_time](https://microbit-micropython.readthedocs.io/en/latest/microbit.html#microbit.running_time).
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://microbit-micropython.readthedocs.io/en/latest/microbit.html#microbit.running_time](https://microbit-micropython.readthedocs.io/en/latest/microbit.html#microbit.running_time)找到有关`running_time`函数的文档。
- en: Documentation on the `utime` module, which can be used on the micro:bit, can
    be found at [https://microbit-micropython.readthedocs.io/en/latest/utime.html](https://microbit-micropython.readthedocs.io/en/latest/utime.html).
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://microbit-micropython.readthedocs.io/en/latest/utime.html](https://microbit-micropython.readthedocs.io/en/latest/utime.html)找到有关`utime`模块的文档，该模块可用于micro:bit。
