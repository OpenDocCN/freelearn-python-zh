- en: Deploying a Lambda Function with SAM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SAM部署Lambda函数
- en: So far, we have learned about Lambda functions and how to build them. We have
    learned that a Lambda function has a definite set of triggers that would trigger
    the function to carry out a particular task. The task is written as a Python module
    and the script is what we call a function. We have also learned about the different
    settings of Lambda functions, which include its core settings and also other settings,
    such as security and network.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了Lambda函数以及如何构建它们。我们已经了解到Lambda函数具有一组明确定义的触发器，这些触发器将触发函数执行特定任务。该任务被编写为Python模块，脚本就是我们所谓的函数。我们还了解了Lambda函数的不同设置，包括其核心设置以及其他设置，例如安全性和网络。
- en: There is also another alternative to creating and deploying Lambda functions,
    which is the **AWS Serverless Application Model** (**AWS SAM**). This format is
    based on the concept of **infrastructure as code**. This concept is inspired by
    **AWS CloudFormation**, which is a form of infrastructure as code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种创建和部署Lambda函数的替代方法，即**AWS无服务器应用程序模型**（**AWS SAM**）。这种格式基于**基础设施即代码**的概念。这个概念受到了**AWS
    CloudFormation**的启发，它是一种基础设施即代码的形式。
- en: 'We will be learning about AWS CloudFormation and using that knowledge to understand
    and build AWS SAM models for creating Lambda functions. We will be covering the
    following concepts in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习关于AWS CloudFormation，并利用这些知识来理解和构建AWS SAM模型，以创建Lambda函数。在本章中，我们将涵盖以下概念：
- en: Deploying Lambda functions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署Lambda函数
- en: Using CloudFormation for serverless services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CloudFormation进行无服务器服务
- en: Deploying with SAM
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SAM进行部署
- en: Understanding security in SAM
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SAM中的安全性理解
- en: Introduction to SAM
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SAM简介
- en: 'In this section, we will learn about SAM, which will help us build and deploy
    serverless functions:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习有关SAM的知识，这将帮助我们构建和部署无服务器函数：
- en: 'As mentioned earlier, SAM is about writing infrastructure as code. So, this
    is what a Lambda function would be described as in SAM:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，SAM是关于编写基础设施即代码。因此，在SAM中，Lambda函数将被描述为：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this block of code, we enter the details—the name of the function, and the
    URI of the S3 bucket where our code package is hosted. In the same way that we
    named the index and the handler in our Lambda settings, we need to enter those
    details here, too. The `index.handler` is the file in which our function code
    is located. The `Handler` is the name of the function in which our Lambda logic
    is written. Also, the `Runtime` is user-defined. You can select from all the available
    languages that are supported by AWS Lambda. The scope of this book is limited
    to the Python language, so we will stick to either of the available Python versions:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这段代码中，我们输入了细节 - 函数的名称，以及我们的代码包托管在的S3存储桶的URI。就像我们在Lambda设置中命名索引和处理程序一样，我们也需要在这里输入这些细节。`index.handler`是我们的函数代码所在的文件。`Handler`是我们Lambda逻辑编写的函数的名称。此外，`Runtime`是用户定义的。您可以从AWS
    Lambda支持的所有可用语言中进行选择。本书的范围仅限于Python语言，因此我们将坚持使用其中的一个Python版本：
- en: '![](img/e5c44dfc-c294-4529-b260-6e13e760861a.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5c44dfc-c294-4529-b260-6e13e760861a.png)'
- en: 'We can also add environment variables, as shown here, in our Lambda function,
    too. These can be very easily edited and configured just as we add, update, and/or
    delete code, which is an added advantage of the infrastructure as code style of
    building infrastructures:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以在我们的Lambda函数中添加环境变量，就像这里显示的那样。这些可以非常容易地进行编辑和配置，就像我们添加、更新和/或删除代码一样，这是基础设施即代码风格构建基础设施的额外优势：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding SAM code invokes two Lambda functions that point to an AWS `DynamoDB`
    table. The entire SAM code is an application that consists of a couple of Lambda
    functions. You need to enter the necessary details for making this work. The `Runtime`
    needs to be updated with either of the available Python runtimes. The corresponding
    policy for dealing with the `DynamoDB` tables needs to be updated in the `Policies`
    section. The `CodeUri` section needs to be updated with the S3 URI of the code
    package.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的SAM代码调用了指向AWS `DynamoDB`表的两个Lambda函数。整个SAM代码是一个包含几个Lambda函数的应用程序。您需要输入必要的细节以使其工作。`Runtime`需要使用其中一个可用的Python运行时进行更新。处理`DynamoDB`表的相应策略需要在`Policies`部分进行更新。`CodeUri`部分需要使用代码包的S3
    URI进行更新。
- en: 'It is to be noted that the meta information should always be included for all
    SAM, which includes the `AWSTemplateFormatVersion` and `Transform`. This would
    tell `CloudFormation` that the code you have written is an AWS SAM code and a
    serverless application. The two lines are as follows:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要注意的是，对于所有SAM，始终应包括元信息，其中包括`AWSTemplateFormatVersion`和`Transform`。这将告诉`CloudFormation`您编写的代码是AWS
    SAM代码和无服务器应用程序。这两行代码如下：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If your serverless function needs to access a single table of `DynamoDB`, you
    can start by creating a `DynamoDB` table via your SAM function itself using the
    `SimpleTable` attribute. This can be done as follows:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的无服务器函数需要访问单个`DynamoDB`表，您可以通过SAM函数本身使用`SimpleTable`属性创建`DynamoDB`表。操作如下：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we will learn how to create a Lambda function with a trigger. As we are
    already using `DynamoDB` for the examples, we will use the same as a trigger in
    this step. The SAM code for this would look as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何创建带有触发器的Lambda函数。由于我们已经在示例中使用了`DynamoDB`，因此我们将在此步骤中将其用作触发器。此SAM代码如下所示：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: CloudFormation for serverless services
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器服务的CloudFormation
- en: 'In this section, we will learn how CloudFormation can be used to build and
    deploy Lambda functions. We will do the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用CloudFormation构建和部署Lambda函数。我们将执行以下操作：
- en: 'We will write a CloudFormation template for a Lambda function that periodically
    pings a website and gives an error if there is any failure in the process. The
    CloudFormation template for this is as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为定期ping网站并在过程中出现任何故障时提供错误的Lambda函数编写一个CloudFormation模板。此CloudFormation模板如下：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There is a lot of syntax in this CloudFormation snippet. We will now try to
    understand it in a bit more detail:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个CloudFormation片段中有很多语法。我们现在将尝试更详细地理解它：
- en: 'In the first three lines that contain the meta details of the Lambda function,
    we have the following line—`Transform: ''AWS::Serverless-2016-10-31''`. This line
    is used to define the resources that a user will be using/accessing, through a
    CloudFormation template. As we are using a Lambda function, we have specified
    it as `Serverless`.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在包含Lambda函数的元数据的前三行中，我们有以下一行—`Transform: ''AWS::Serverless-2016-10-31''`。这行用于定义用户将通过CloudFormation模板使用/访问的资源。由于我们使用了Lambda函数，我们将其指定为`Serverless`。'
- en: We have also defined the memory size that our function will be using. It is
    similar to how we learned to view and change the memory settings in the Lambda's
    console.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还定义了我们的函数将使用的内存大小。这类似于我们学习如何在Lambda的控制台中查看和更改内存设置。
- en: '`Timeout` is the amount of time the Lambda function can keep retrying before
    considering the attempt as a failure.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`超时`是Lambda函数在考虑尝试失败之前可以重试的时间量。'
- en: You can also see that we have added environment variables to our Lambda function
    that will be stored in the Lambda container and used when needed by the system.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以看到，我们已经向Lambda函数添加了环境变量，这些变量将存储在Lambda容器中，并在系统需要时使用。
- en: Deploying with SAM
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SAM进行部署
- en: 'In this section, we will learn how to deploy the SAM applications. We have
    already learned what SAM applications and code look like, so we will learn how
    to deploy them via AWS CloudFormation:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何部署SAM应用程序。我们已经了解了SAM应用程序和代码的外观，所以我们将学习如何通过AWS CloudFormation部署它们：
- en: 'Firstly, let''s set up our local environment for deployment purposes, and then
    start by installing `awscli` from `pip`:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们为部署目的设置本地环境，然后从`pip`安装`awscli`：
- en: '![](img/4b67d323-8d3f-49e0-9ce3-18ec5b70932f.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b67d323-8d3f-49e0-9ce3-18ec5b70932f.png)'
- en: 'Next, you will need to configure your AWS environment using your credentials:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要使用您的凭据配置您的AWS环境：
- en: '![](img/637bc3a8-4fed-43bb-8bda-53b235b4b91e.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/637bc3a8-4fed-43bb-8bda-53b235b4b91e.png)'
- en: 'You will need to enter the following details to make sure your AWS environment
    is successfully configured:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要输入以下详细信息，以确保您的AWS环境成功配置：
- en: Your AWS Access Key
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的AWS访问密钥
- en: Your AWS Secret Key
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的AWS秘钥
- en: The default region in which you want to operate
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您想要操作的默认区域
- en: The default output format in which you want your data
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您希望数据的默认输出格式
- en: Now, let's try to deploy a simple `Hello World` Lambda application via SAM.
    We will have two code files for this. One is the Python file and the other is
    the template `yaml` file.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试通过SAM部署一个简单的`Hello World` Lambda应用程序。我们将为此准备两个代码文件。一个是Python文件，另一个是模板`yaml`文件。
- en: 'We will use the default `Hello World` example for Python, as we are trying
    to understand how SAM deployments work instead of stressing too much about the
    code for now. The Python script will be as follows:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用Python的默认`Hello World`示例，因为我们现在试图理解SAM部署的工作原理，而不是过于关注代码。Python脚本将如下所示：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will use a basic template `yaml` file for the SAM function too, whose only
    job is to define its meta information and to run the Python script that is mentioned
    previously. The template `yaml` file will look like this:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也将为SAM函数使用一个基本的模板`yaml`文件，其唯一的作用是定义其元信息并运行先前提到的Python脚本。模板`yaml`文件将如下所示：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we will package the SAM template we just created, using the command line.
    The instructions for packaging the code are as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用命令行打包刚刚创建的SAM模板。打包代码的指令如下：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You get the following output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您会得到以下输出：
- en: '![](img/fcd53c6d-c90b-468e-9044-5d38eaa618fc.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fcd53c6d-c90b-468e-9044-5d38eaa618fc.png)'
- en: 'This will create an output `yaml` file that needs to be deployed, as mentioned
    in the preceding trace. The `output.yaml` file looks like this:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将创建一个需要部署的输出`yaml`文件，就像前面的跟踪中提到的那样。`output.yaml`文件如下所示：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, as we have packaged the SAM template, we will now deploy it. We will use
    the instructions shown in the trace when we did the packaging for the deployment
    process. The instructions for deployment are as follows:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经打包了SAM模板，我们将立即部署它。我们将使用在打包过程中显示的跟踪中的指令进行部署。部署的指令如下：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will give you the following output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出以下输出：
- en: '![](img/09093362-05ed-484f-a743-9a4fd649b5c3.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09093362-05ed-484f-a743-9a4fd649b5c3.png)'
- en: 'We can head over to the CloudFormation console to look at the template we just
    deployed. The deployed template will look something like this:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以转到CloudFormation控制台，查看我们刚刚部署的模板。部署的模板将看起来像这样：
- en: '![](img/64976600-cef8-40d9-a198-c103442f1e8d.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64976600-cef8-40d9-a198-c103442f1e8d.png)'
- en: 'In the Template tab shown here, we can see both the original template and the
    processed template. The original template can be seen by selecting the first radio
    button:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里显示的模板选项卡中，我们可以看到原始模板和处理后的模板。通过选择第一个单选按钮可以看到原始模板：
- en: '![](img/966b6d7b-130a-47fb-94b5-13b5d8d9a579.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/966b6d7b-130a-47fb-94b5-13b5d8d9a579.png)'
- en: 'The processed template can be seen by selecting the second radio button under
    the Template tab at the bottom:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在底部的模板选项卡下选择第二个单选按钮，可以看到处理后的模板：
- en: '![](img/9240398c-977a-4df1-8be0-d4243a8bb0cf.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9240398c-977a-4df1-8be0-d4243a8bb0cf.png)'
- en: 'If we head over to the Lambda console, we will see the newly created Lambda
    function via SAM with the corresponding name given:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们转到Lambda控制台，我们将看到通过SAM新创建的Lambda函数及其对应的名称：
- en: '![](img/1ceead11-6d47-4396-92fb-72ac2559a00b.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ceead11-6d47-4396-92fb-72ac2559a00b.png)'
- en: 'Clicking on the Functions will give us more information about it. It also mentions
    the SAM template and the CloudFormation template from which it was created:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“函数”将为我们提供更多有关它的信息。它还提到了SAM模板和创建它的CloudFormation模板：
- en: '![](img/9dd6e2a3-ffce-4908-9b99-0852f557a72c.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9dd6e2a3-ffce-4908-9b99-0852f557a72c.png)'
- en: 'Let''s create basic tests for the Lambda function. The test creation console
    can be opened by clicking on the Test button:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为Lambda函数创建基本测试。点击“测试”按钮即可打开测试创建控制台：
- en: '![](img/1b29cf18-4b82-448e-9eb6-4954f9acf933.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b29cf18-4b82-448e-9eb6-4954f9acf933.png)'
- en: 'Now, once the tests have been created, you can again click on the Test button.
    This will run the testing with the updated test cases. The logs from a successful
    run will look like this:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，一旦测试用例被创建，您可以再次点击“测试”按钮。这将使用更新的测试用例运行测试。成功运行的日志将如下所示：
- en: '![](img/1797719e-ca71-4599-84e2-7688090e3623.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1797719e-ca71-4599-84e2-7688090e3623.png)'
- en: 'Now, let''s go through each component of the Lambda function properly. The
    Configuration shows the triggers and the logging settings of our Lambda function.
    We are logging into the CloudWatch service of AWS:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们逐个逐个地了解Lambda函数的每个组件。配置显示了我们Lambda函数的触发器和日志记录设置。我们正在记录AWS的CloudWatch服务：
- en: '![](img/f4a0fbe7-f92c-4b29-a542-0431875b09ce.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4a0fbe7-f92c-4b29-a542-0431875b09ce.png)'
- en: 'We can also see the invocation metrics in the Monitoring option in the Lambda
    console. We can see exactly one Lambda invocation:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Lambda控制台的“监控”选项中，我们还可以看到调用指标。我们可以看到确切的一个Lambda调用：
- en: '![](img/a6f5218c-df89-4d30-8af3-6d232cb54679.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6f5218c-df89-4d30-8af3-6d232cb54679.png)'
- en: 'You can see the code files in the Function code section. You can see the folder
    structure in the left-hand corner of the interactive code editor that contains
    both the `template.yaml` file and the function code:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在“函数代码”部分看到代码文件。您可以在交互式代码编辑器的左下角看到包含`template.yaml`文件和函数代码的文件夹结构：
- en: '![](img/38614b15-0ddb-4f68-943c-6800adb930ac.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38614b15-0ddb-4f68-943c-6800adb930ac.png)'
- en: And further below, you can see the pre-existing environment variable named `lambda:createdBy`, and
    also the timeout setting we mentioned in our template.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并且在更下面，您可以看到名为`lambda:createdBy`的预先存在的环境变量，以及我们在模板中提到的超时设置。
- en: Understanding security in SAM
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解SAM中的安全性
- en: 'So far, we have learned how to write, build, package, and deploy Lambda functions
    using the SAM. We will now understand how security works inside them:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何使用SAM编写、构建、打包和部署Lambda函数。现在我们将了解它们内部的安全性是如何工作的：
- en: 'You can scroll to the bottom of the Lambda console to see the network and security
    settings, where the VPC and the subnet details are mentioned:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以滚动到Lambda控制台的底部，查看网络和安全设置，其中提到了VPC和子网的详细信息：
- en: '![](img/22126210-d869-47c4-a585-d7a2b6fef3d0.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22126210-d869-47c4-a585-d7a2b6fef3d0.png)'
- en: 'Now, we will add in the network settings, which include the security groups
    and the subnet IDs:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加网络设置，包括安全组和子网ID：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, package and deploy the newly updated SAM template like we did in the previous
    section:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，像在上一节中那样，打包并部署新更新的SAM模板：
- en: '![](img/458ee721-6aeb-49ed-8c80-28c9a66acf41.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/458ee721-6aeb-49ed-8c80-28c9a66acf41.png)'
- en: 'Now you will see the corresponding network and security settings, once you
    have packaged and deployed the CloudFormation template after the corresponding
    edits. The Network section looks as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，一旦您在对CloudFormation模板进行相应编辑后打包并部署了模板，您将看到相应的网络和安全设置。网络部分如下所示：
- en: '![](img/a7c165d6-9163-477b-996d-bb12e2f8a9ba.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7c165d6-9163-477b-996d-bb12e2f8a9ba.png)'
- en: 'You can also see the inbound rules of your corresponding security groups that
    are linked with the VPC in your Network settings:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以在“网络设置”中看到与VPC相关的相应安全组的入站规则：
- en: '![](img/5906e5fe-a674-4736-832d-2965d8cdda49.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5906e5fe-a674-4736-832d-2965d8cdda49.png)'
- en: 'You can also see the completed CloudFormation template in your console with
    the updated network and security settings, which means that deployment has been
    successful:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以在控制台中看到已完成的CloudFormation模板，其中包含更新的网络和安全设置，这意味着部署已成功：
- en: '![](img/b48301ca-6100-40fb-a102-742bfb935c3c.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b48301ca-6100-40fb-a102-742bfb935c3c.png)'
- en: 'You can also see the original template under the Templates option in the bottom
    corner of the console:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以在控制台底部的“模板”选项下查看原始模板：
- en: '![](img/9f8acd7b-4831-4bcc-a39e-dc1219c9764b.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f8acd7b-4831-4bcc-a39e-dc1219c9764b.png)'
- en: 'The processed template can be found by selecting the View processed template
    option beside the original template option at the bottom of the console:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在控制台底部选择“查看已处理的模板”选项，可以找到已处理的模板：
- en: '![](img/ec93f03d-badb-46e9-90ae-ff408f1a16ea.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec93f03d-badb-46e9-90ae-ff408f1a16ea.png)'
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to deploy Lambda functions as infrastructure
    as code via SAM, which is a new way of writing and deploying Lambda functions.
    This makes it easier to integrate with other IaaS services, such as CloudFormation.
    We also learned about the AWS CloudFormation service, which is the service that
    allows and facilitates infrastructure as code. We also learned how security works
    inside SAM code and how to configure VPC and subnet settings.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何通过SAM将Lambda函数部署为基础设施代码，这是一种编写和部署Lambda函数的新方法。这使得与其他IaaS服务（如CloudFormation）集成变得更容易。我们还了解了AWS
    CloudFormation服务，这是一种允许和促进基础设施代码的服务。我们还学习了SAM代码内部的安全性以及如何配置VPC和子网设置。
- en: In the next chapter, you will be introduced to Microsoft Azure functions, along
    with configuring and understanding the components of the tool.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解Microsoft Azure函数，以及配置和了解该工具的组件。
