- en: Appendix B – Packaging and distribution
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录B - 打包和分发
- en: Packaging and distributing your Python code can be a complex and sometimes confusing
    task, especially if your projects have lots of dependencies or involve components
    more exotic than straight Python code. However, for many cases it’s very straightforward
    to make your code accessible to others in a standard way, and we’ll see how to
    do that using the standard `distutils` module in this section. The main advantage
    of `distutils` is that it’s included in the Python Standard Library. For much
    beyond the simplest packaging requirements you’ll probably want to look at `setuptools`
    instead, which has capabilities beyond those of `distutils`, but which is correspondingly
    more confusing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 打包和分发你的Python代码可能是一个复杂的，有时令人困惑的任务，特别是如果你的项目有很多依赖项或涉及比纯Python代码更奇特的组件。然而，对于许多情况来说，以标准方式使你的代码对他人可访问是非常直接的，我们将在本节中看到如何使用标准的`distutils`模块来做到这一点。`distutils`的主要优势是它包含在Python标准库中。对于远非最简单的打包要求，你可能会想要使用`setuptools`，它具有超出`distutils`的功能，但相应地更加令人困惑。
- en: The `distutils` module allows you to write a simple Python script which knows
    how to install your Python modules into any Python installation, including one
    hosted in a virtual environment. By convention this script is called `setup.py`
    and it exists at the top level of your project structure. This script can then
    be executed to perform the actual installation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`distutils`模块允许你编写一个简单的Python脚本，它知道如何将你的Python模块安装到任何Python安装中，包括托管在虚拟环境中的安装。按照惯例，这个脚本被称为`setup.py`，并且存在于项目结构的顶层。然后可以执行此脚本来执行实际安装。'
- en: Configuring a package with `distutils`
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`distutils`配置包
- en: Let’s see a simple example of `distutils`. We’ll create a basic `setup.py` installation
    script for the `palindrome` module we wrote in the Chapter 11.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个`distutils`的简单例子。我们将为我们在第11章中编写的`palindrome`模块创建一个基本的`setup.py`安装脚本。
- en: 'The first thing we want to do is to create a directory to hold our project.
    Let’s call this `palindrome`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要做的第一件事是创建一个目录来保存我们的项目。让我们称之为`palindrome`：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s put a copy of our `palindrome.py` in this directory:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把我们的`palindrome.py`复制到这个目录中：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And finally let’s create the `setup.py` script:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最后让我们创建`setup.py`脚本：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first line in the file imports the functionality we need from the `distutils.core`
    module, namely the `setup()` function. This function does all of the work of installing
    our code, so we need to tell it about the code we’re installing. We do this, of
    course, with the arguments we pass to the function.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中的第一行从`distutils.core`模块导入我们需要的功能，即`setup()`函数。这个函数完成了安装我们代码的所有工作，所以我们需要告诉它我们正在安装的代码。当然，我们通过传递给函数的参数来做到这一点。
- en: The first thing we tell `setup()` is the name of this project. We’ve chosen
    `palindrome` in this case, but you can choose any name you like. In general, though,
    it’s simplest to just keep the name the same as your project name.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们告诉`setup()`的第一件事是这个项目的名称。在这种情况下，我们选择了`palindrome`，但你可以选择任何你喜欢的名称。不过，一般来说，最简单的方法是将名称与项目名称保持一致。
- en: The next argument we pass to `setup()` is the version. Again, this can be any
    string you want. Python doesn’t rely on the version to follow any rules.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传递给`setup()`的下一个参数是版本。同样，这可以是任何你想要的字符串。Python不依赖于版本遵循任何规则。
- en: The next argument, `py_modules`, is probably the most interesting. We use this
    to specify the Python modules we want to install. Each entry in this list is the
    name of the module without the `.py` extension. `setup()` will look for a matching
    `.py` file and install it. So, in our example, we’ve asked `setup()` to install
    `palindrome.py` which, of course, is a file in our project.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个参数`py_modules`可能是最有趣的。我们使用它来指定我们想要安装的Python模块。列表中的每个条目都是模块的名称，不包括`.py`扩展名。`setup()`将查找匹配的`.py`文件并安装它。所以，在我们的例子中，我们要求`setup()`安装`palindrome.py`，当然，这是我们项目中的一个文件。
- en: The rest of the arguments we’re using here are fairly self-explanatory and are
    there mostly to help people to use your module correctly and to know who to contact
    if they have problems.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用的其余参数都相当不言自明，主要是为了帮助人们正确使用你的模块，并知道如果他们遇到问题应该联系谁。
- en: 'Before we start using our `setup.py`, we first need to create a virtual environment
    into which we’ll install our module. In your `palindrome` directory, create a
    virtual environment called `palindrome_env`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用我们的`setup.py`之前，我们首先需要创建一个虚拟环境，我们将在其中安装我们的模块。在你的`palindrome`目录中，创建一个名为`palindrome_env`的虚拟环境：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When this completes, activate the new environment. On Linux or macOS, source
    the activate script:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当这完成后，激活新的环境。在Linux或macOS上，执行激活脚本：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'or on Windows call the script directly:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在Windows上直接调用脚本：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Installing with `distutils`
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`distutils`安装
- en: 'Now that we’ve got our `setup.py`, we can use it to do a number of interesting
    things. The first, and perhaps most obvious, thing we can do is install our module
    into our virtual environment! We do this by passing the `install` argument to
    `setup.py`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了`setup.py`，我们可以用它来做一些有趣的事情。我们可以做的第一件事，也许是最明显的，就是将我们的模块安装到我们的虚拟环境中！我们通过向`setup.py`传递`install`参数来实现这一点：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When invoked `setup()` prints out a few lines to tell you about its progress.
    The most important line for us is where is actually copies `palindrome.py` into
    the installation folder:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`setup()`时，它会打印出几行来告诉你它的进度。对我们来说最重要的一行是它实际将`palindrome.py`复制到安装文件夹的地方：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `site-packages` directory of a Python installation is where third-party
    packages such as ours are normally installed. So it looks like the installation
    worked properly.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Python安装的`site-packages`目录是第三方包通常安装的地方，就像我们的包看起来安装成功了一样。
- en: 'Let’s verify this by running Python and seeing that our module can be imported.
    Note that we want to change directories before we do this, otherwise when we import
    `palindrome` Python will load the source file in our current directory:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过运行Python来验证这一点，并看到我们的模块可以被导入。请注意，在我们这样做之前，我们要改变目录，否则当我们导入`palindrome`时，Python会加载我们当前目录中的源文件：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here we use the `__file__` attribute on the module to see where it was imported
    from, and we see that we’re importing it from our virtual environment’s `site-packages`,
    which is exactly what we wanted.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用模块的`__file__`属性来查看它是从哪里导入的，我们看到我们是从我们的虚拟环境的`site-packages`中导入的，这正是我们想要的。
- en: 'Don’t forget to switch back to your source directory after exiting the Python
    REPL:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 退出Python REPL后，不要忘记切换回你的源目录：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Packaging with `distutils`
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`distutils`进行打包
- en: 'Another useful feature of `setup()` is that it can create various types of
    “distribution” formats. It will take all of the modules you’ve specified and bundle
    them up into packages that are easy to distribute to others. You can do this with
    the `sdist` command (which is shorthand for ‘source distribution’):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup()`的另一个有用的特性是它可以创建各种类型的“分发”格式。它将把你指定的所有模块打包成易于分发给他人的包。你可以使用`sdist`命令来实现这一点（这是“源分发”的缩写）：'
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we look, we’ll see that this command created a new directory, `dist`, which
    contains the newly generated distribution file:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看，我们会发现这个命令创建了一个新的目录`dist`，其中包含了新生成的分发文件：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'and if we unzip that file we’ll see that it contains our project’s source code,
    including the `setup.py`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们解压缩该文件，我们会看到它包含了我们项目的源代码，包括`setup.py`：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: So now you can send this zip file to anyone who wants to use your code, and
    they can use the `setup.py` to install it into their system. Very convenient!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以把这个zip文件发送给任何想要使用你的代码的人，他们可以使用`setup.py`将其安装到他们的系统中。非常方便！
- en: 'Note that the `sdist` command can produce distributions of various types. To
    see the available options, you can use the `--help-formats` option:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`sdist`命令可以生成各种类型的分发。要查看可用的选项，可以使用`--help-formats`选项：
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This section really just touches on the very basics of `distutils`. You can
    find out more about how to use `distutils` by passing `--help` to `setup.py`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分只是简单地介绍了`distutils`的基础知识。你可以通过向`setup.py`传递`--help`来了解更多关于如何使用`distutils`的信息：
- en: '[PRE14]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: For many simple projects you’ll find that what we’ve just covered is almost
    all you need to know.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多简单的项目，你会发现我们刚刚介绍的几乎就是你需要了解的全部内容。
