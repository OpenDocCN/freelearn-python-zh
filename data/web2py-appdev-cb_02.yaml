- en: Chapter 2. Building Your First Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. 构建你的第一个应用程序
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Improving the scaffolding application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进脚手架应用程序
- en: Building a simple contacts application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个简单的联系人应用程序
- en: Building a Reddit clone
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Reddit克隆
- en: Building a Facebook clone
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Facebook克隆
- en: Using `crud.archive`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`crud.archive`
- en: Converting an existing static site into a web2py application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将现有静态网站转换为web2py应用程序
- en: Creating semi-static pages (flatpages)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建半静态页面（flatpages）
- en: Adding your custom logo
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加你的自定义标志
- en: Creating menus and submenus
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建菜单和子菜单
- en: Customizing menus with icons
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图标自定义菜单
- en: Creating a navigation bar
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建导航栏
- en: Using cookies to set the language
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用cookies设置语言
- en: Designing modular applications
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计模块化应用程序
- en: Speeding up downloads
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加快下载速度
- en: Introduction
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Now that you have web2py installed and running, you are ready to start building
    your first application. The recipes in this chapter will provide examples of complete
    applications, comprising models, views, and controllers. They range from simple
    **contacts** applications to a more complex **Facebook** clone. Other recipes
    in this chapter will show you how to solve some recurrent problems that new users
    typically encounter, from adding a logo to creating a navigation bar.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装并运行了web2py，你就可以开始构建你的第一个应用程序了。本章中的食谱将提供完整应用程序的示例，包括模型、视图和控制器。它们从简单的**联系人**应用程序到更复杂的**Facebook**克隆不等。本章中的其他食谱将向你展示如何解决新用户通常遇到的一些常见问题，从添加标志到创建导航栏。
- en: Improving the scaffolding application
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进脚手架应用程序
- en: In this recipe, we discuss how to create your own scaffolding application and
    add your own configuration file. The **scaffolding application** is the collection
    of files that come with any new web2py application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们讨论如何创建自己的脚手架应用程序并添加自己的配置文件。**脚手架应用程序**是任何新web2py应用程序附带文件的集合。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做这件事...
- en: 'The scaffolding app includes several files. One of them is `models/db.py`,
    which imports four classes from `gluon.tools` (Mail, `Auth, Crud`, and `Service)`,
    and defines the following global objects: `db, mail, auth, crud`, and `service`.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 脚手架应用程序包括几个文件。其中之一是`models/db.py`，它从`gluon.tools`（Mail、`Auth`、`Crud`和`Service`）导入四个类，并定义了以下全局对象：`db`、`mail`、`auth`、`crud`和`service`。
- en: The scaffolding application also defines tables required by the `auth` object,
    such as `db.auth_user`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 脚手架应用程序还定义了`auth`对象所需的表，例如`db.auth_user`。
- en: The default scaffolding application is designed to minimize the number of files,
    not to be modular. In particular, the model file, `db.py`, contains the configuration,
    which in a production environment, is best kept in separate files.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 默认脚手架应用程序旨在最小化文件数量，而不是模块化。特别是，模型文件`db.py`包含配置，在生产环境中，最好将其保存在单独的文件中。
- en: 'Here, we suggest creating a configuration file, `models/0.py`, that contains
    something like the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们建议创建一个配置文件`models/0.py`，其中包含以下内容：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We also modify `models/db.py`, so that it uses the information from the configuration
    file, and it defines the `auth_user` table explicitly (this makes it easier to
    add custom fields):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还修改了`models/db.py`，使其使用配置文件中的信息，并显式定义`auth_user`表（这使得添加自定义字段更容易）：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Normally, after a web2py installation or upgrade, the welcome application is
    tar-gzipped into `welcome.w2p`, and is used as the scaffolding application. You
    can create your own scaffolding application from an existing application using
    the following commands from a `bash` shell:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在web2py安装或升级后，欢迎应用程序会被tar-gzipped成`welcome.w2p`，并用作脚手架应用程序。你可以使用以下命令从现有应用程序创建自己的脚手架应用程序，这些命令来自`bash`
    shell：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There's more...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The web2py wizard uses a similar approach, and creates a similar `0.py` configuration
    file. You can add more settings to the `0.py` file as needed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: web2py向导使用类似的方法，并创建类似的`0.py`配置文件。根据需要，你可以向`0.py`文件添加更多设置。
- en: The `0.py` file may contain sensitive information, such as the `security_key`
    used to encrypt passwords, the `email_login` containing the password of your smtp
    account, and the `login_config` with your Janrain password ([http://www.janrain.com/](http://www.janrain.com/)).
    You may want to write this sensitive information in a read-only file outside the
    web2py tree, and read them from your `0.py` instead of hardcoding them. In this
    way, if you choose to commit your application to a version-control system, you
    will not be committing the sensitive information.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`0.py`文件可能包含敏感信息，例如用于加密密码的`security_key`、包含smtp账户密码的`email_login`以及包含Janrain密码的`login_config`（[http://www.janrain.com/](http://www.janrain.com/)）。你可能希望将这些敏感信息写入web2py树之外的只读文件中，并从你的`0.py`中读取它们，而不是硬编码。这样，如果你选择将应用程序提交到版本控制系统，你将不会提交敏感信息。'
- en: The scaffolding application includes other files that you may want to customize,
    including `views/layout.html` and `views/default/users.html`. Some of them are
    the subject of upcoming recipes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 框架应用程序包括其他你可能想要定制的文件，包括`views/layout.html`和`views/default/users.html`。其中一些是即将到来的菜谱的主题。
- en: Building a simple contacts application
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个简单的联系人应用程序
- en: 'When you start designing a new web2py application, you go through three phases
    that are characterized by looking for the answer to the following three questions:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始设计一个新的web2py应用程序时，你会经历三个阶段，这些阶段的特点是寻找以下三个问题的答案：
- en: What data should the application store?
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序应该存储哪些数据？
- en: Which pages should be presented to the visitors?
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该向访客展示哪些页面？
- en: How should the page content, for each page, be presented?
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个页面，页面内容应该如何呈现？
- en: The answer to these three questions is implemented in the **models**, the **controllers**,
    and the **views** respectively.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个问题的答案分别体现在**模型**、**控制器**和**视图**中。
- en: It is important for a good application design to try answering those questions
    exactly in this order, and as accurately as possible. Such answers can later be
    revised, and more tables, more pages, and more bells and whistles can be added
    in an iterative fashion. A good web2py application is designed in such a way that
    you can change the table definitions (add and remove fields), add pages, and change
    page views, without breaking the application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于良好的应用程序设计来说，按照这个顺序，尽可能准确地回答这些问题是很重要的。这些答案可以稍后进行修改，并以迭代的方式添加更多表格、更多页面和更多功能。一个优秀的web2py应用程序就是这样设计的，你可以更改表定义（添加和删除字段）、添加页面和更改页面视图，而不会破坏应用程序。
- en: A distinctive feature of web2py is that everything has a default. This means
    you can work on the first of those three steps without the need to write code
    for the second and third step. Similarly, you can work on the second step without
    the need to code for the third. At each step, you will be able to immediately
    see the result of your work; thanks to `appadmin` (the default database administrative
    interface) and generic views (every action has a view by default, until you write
    a custom one).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: web2py的一个显著特点是所有东西都有一个默认值。这意味着你可以工作在第一步，而无需编写第二步和第三步的代码。同样，你也可以工作在第二步，而无需编写第三步的代码。在每一步，你将能够立即看到你工作的结果；这要归功于`appadmin`（默认数据库管理界面）和通用视图（每个动作都有一个默认视图，直到你编写一个自定义视图）。
- en: Here we consider, as a first example, an application to manage our business
    contacts, a CRM. We will call it `Contacts`. The application needs to maintain
    a list of companies, and a list of people who work at those companies.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们考虑的第一个示例是一个用于管理我们的商业联系人的应用程序，一个CRM。我们将称之为`Contacts`。该应用程序需要维护公司列表以及在这些公司工作的个人列表。
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: First of all we create the model.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建模型。
- en: 'In this step we identify which tables are needed and their fields. For each
    field, we determine whether they:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一步中，我们确定需要哪些表以及它们的字段。对于每个字段，我们确定它们：
- en: Must contain unique values (`unique=True`)
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须包含唯一值（`unique=True`）
- en: Contain empty values (`notnull=True`)
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含空值（`notnull=True`）
- en: Are references (contain a list of a record in another table)
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否是引用（包含另一个表中记录的列表）
- en: Are used to represent a record (format attribute)
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于表示记录（格式属性）
- en: From now on, we will assume we are working with a copy of the default scaffolding
    application, and we only describe the code that needs to be added or replaced.
    In particular, we will assume the default `views/layout.html and models/db.py.`
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从现在开始，我们将假设我们正在使用默认框架应用程序的副本，我们只描述需要添加或替换的代码。特别是，我们将假设默认的`views/layout.html`和`models/db.py`。
- en: Here is a possible model representing the data we need to store in `models/db_contacts.py:`
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个可能的模型，表示我们需要在`models/db_contacts.py`中存储的数据：
- en: '[PRE3]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Of course, a more complex data representation is possible. You may want to allow,
    for example, multiple users for the system, allow the same person to work for
    multiple companies, and keep track of changes in time. Here, we will keep it simple.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当然，更复杂的数据表示是可能的。您可能希望允许，例如，多个用户使用系统，允许同一个人为多个公司工作，并跟踪时间的变化。在这里，我们将保持简单。
- en: The name of this file is important. In particular, models are executed in alphabetical
    order, and this one must follow db.py.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个文件名很重要。特别是，模型按字母顺序执行，并且这个必须跟在`db.py`之后。
- en: 'After this file has been created, you can try it by visiting the following
    url: [http://127.0.0.1:8000/contacts/appadmin](http://127.0.0.1:8000/contacts/appadmin),
    to access the web2py database administrative interface, `appadmin`. Without any
    controller or view, it provides a way to insert, select, update, and delete records.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建此文件后，您可以通过访问以下URL进行测试：[http://127.0.0.1:8000/contacts/appadmin](http://127.0.0.1:8000/contacts/appadmin)，以访问web2py数据库管理界面`appadmin`。在没有控制器或视图的情况下，它提供了一种插入、选择、更新和删除记录的方法。
- en: 'Now we are ready to build the controller. We need to identify which pages are
    required by the application. This depends on the required workflow. At a minimum
    we need the following pages:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备构建控制器。我们需要确定应用程序需要哪些页面。这取决于所需的流程。至少我们需要以下页面：
- en: An index page (the home page)
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个索引页面（主页）
- en: A page to list all companies
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个列出所有公司的页面
- en: A page that lists all contacts for one selected company
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个列出所选公司所有联系人的页面
- en: A page to create a company
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个创建公司的页面
- en: A page to edit/delete a company
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个编辑/删除公司的页面
- en: A page to create a contact
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个创建联系人的页面
- en: A page to edit/delete a contact
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个编辑/删除联系人的页面
- en: A page that allows to read the information about one contact and the communication
    logs, as well as add a new communication log
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个页面，可以阅读一个联系人的信息和通信日志，以及添加新的通信日志
- en: 'Such pages can be implemented as follows:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些页面可以按以下方式实现：
- en: '[PRE4]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Make sure that you do not delete the existing `user, download`, and `service`
    functions in the scaffolding `default.py`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您不要删除scaffolding中的现有`user`、`download`和`service`函数。
- en: 'Notice how all pages are built using the same ingredients: **select queries**
    and **crud forms**. You rarely need anything else.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意所有页面都是使用相同的成分构建的：**选择查询**和**CRUD表单**。您很少需要其他任何东西。
- en: 'Also notice the following:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还请注意以下内容：
- en: Some pages require a `request.args(0)` argument (a company ID for contacts and
    `company_edit`, a contact ID for `contact_edit`, and `contact_logs)`.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些页面需要`request.args(0)`参数（联系人及`company_edit`的联系人ID，`contact_edit`的联系人ID，以及`contact_logs`）。
- en: All selects have an `orderby` argument.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有选择都有`orderby`参数。
- en: All crud forms have a next argument that determines the redirection after form
    submission.
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有CRUD表单都有一个next参数，用于确定表单提交后的重定向。
- en: All actions return `locals()`, which is a Python dictionary containing the local
    variables defined in the function. This is a shortcut. It is of course possible
    to return a dictionary with any subset of `locals()`.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有操作都返回`locals()`，这是一个包含在函数中定义的局部变量的Python字典。这是一个快捷方式。当然，也可以返回包含`locals()`任何子集的字典。
- en: '`contact_create` sets a default value for the new contact company to the value
    passed as `args(0)`.'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contact_create`为新的联系人公司设置默认值，该值作为`args(0)`传递。'
- en: The `contacts_logs` retrieves past logs after processing `crud.create` for a
    new log entry. This avoid unnecessarily reloading of the page, when a new log
    is inserted.
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contacts_logs`在为新日志条目处理`crud.create`后检索过去的日志。这避免了在插入新日志时无必要地重新加载页面。'
- en: 'At this point our application is fully functional, although the look-and-feel
    and navigation can be improved.:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，我们的应用程序已经完全功能化，尽管外观和导航可以改进：
- en: 'You can create a new company at: `http://127.0.0.1:8000/contacts/default/company_create`'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在以下位置创建一个新的公司：`http://127.0.0.1:8000/contacts/default/company_create`
- en: 'You can list all companies at: `http://127.0.0.1:8000/contacts/default/companies`'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在以下位置列出所有公司：`http://127.0.0.1:8000/contacts/default/companies`
- en: 'You can edit company `#1` at: `http://127.0.0.1:8000/contacts/default/company_edit/1`'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在以下位置编辑公司`#1`：`http://127.0.0.1:8000/contacts/default/company_edit/1`
- en: 'You can create a new contact at: `http://127.0.0.1:8000/contacts/default/contact_create`'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在以下位置创建一个新的联系人：`http://127.0.0.1:8000/contacts/default/contact_create`
- en: 'You can list all contacts for company `#1` at: `http://127.0.0.1:8000/contacts/default/contacts/1`'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在以下位置列出公司`#1`的所有联系人：`http://127.0.0.1:8000/contacts/default/contacts/1`
- en: 'You can edit contact `#1` at: `http://127.0.0.1:8000/contacts/default/contact_edit/1`'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在以下位置编辑联系人 `#1`：`http://127.0.0.1:8000/contacts/default/contact_edit/1`
- en: 'And you can access the communication log for contact `#1` at: `http://127.0.0.1:8000/contacts/default/contact_logs/1`'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过以下链接访问联系人 `#1` 的通信日志：`http://127.0.0.1:8000/contacts/default/contact_logs/1`
- en: 'You should also edit the `models/menu.py` file, and replace the content with
    the following:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还应该编辑 `models/menu.py` 文件，并将其内容替换为以下内容：
- en: '[PRE5]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The application now works, but we can improve it by designing a better look
    and feel for the actions. That's done in the views.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用程序现在可以正常工作，但我们可以通过为操作设计更好的外观和感觉来改进它。这是在视图中完成的。
- en: Create and edit file `views/default/companies.html:`
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并编辑文件 `views/default/companies.html:`
- en: '[PRE6]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is how this page looks:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是这个页面的样子：
- en: '![How to do it...](img/5467OS_02_16.jpg)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/5467OS_02_16.jpg)'
- en: Create and edit file `views/default/contacts.html:`
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并编辑文件 `views/default/contacts.html:`
- en: '[PRE7]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is how this page looks:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是这个页面的样子：
- en: '![How to do it...](img/5467OS_02_17.jpg)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/5467OS_02_17.jpg)'
- en: Create and edit file `views/default/company_create.html:`
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并编辑文件 `views/default/company_create.html:`
- en: '[PRE8]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Create and edit file `views/default/contact_create.html:`
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并编辑文件 `views/default/contact_create.html:`
- en: '[PRE9]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create and edit file: `views/default/company_edit.html:`'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并编辑文件：`views/default/company_edit.html:`
- en: '[PRE10]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Create and edit file `views/default/contact_edit.html:`
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并编辑文件 `views/default/contact_edit.html:`
- en: '[PRE11]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Create and edit file `views/default/contact_logs.html:`
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并编辑文件 `views/default/contact_logs.html:`
- en: '[PRE12]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is how this page looks:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是这个页面的样子：
- en: '![How to do it...](img/5467OS_02_18.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5467OS_02_18.jpg)'
- en: 'Notice that in the last view, we used the function `MARKMIN` to render the
    content of the `db.log.body`, using the `MARKMIN` markup. This allows embedding
    links, images, anchors, font formatting information, and tables in the logs. For
    details about the `MARKMIN` syntax we refer to: [http://web2py.com/examples/static/markmin.html](http://web2py.com/examples/static/markmin.html).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在最后一个视图中，我们使用了 `MARKMIN` 函数来渲染 `db.log.body` 的内容，使用的是 `MARKMIN` 标记。这允许在日志中嵌入链接、图片、锚点、字体格式化信息以及表格。有关
    `MARKMIN` 语法的详细信息，请参阅：[http://web2py.com/examples/static/markmin.html](http://web2py.com/examples/static/markmin.html)。
- en: Building a Reddit clone
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Reddit克隆
- en: Here we show how to build an application to post and rank links to online news
    items, similar to the [http://www.reddit.com/](http://www.reddit.com/) website.
    The links are organized into categories, and users can post, vote, and comment
    on them. As in the previous recipe, the code only shows additions or changes to
    the default scaffolding application. We will call our application `reddit`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们展示如何构建一个发布和排名在线新闻链接的应用程序，类似于[http://www.reddit.com/](http://www.reddit.com/)网站。链接被组织到类别中，用户可以发布、投票和评论它们。与先前的菜谱一样，代码只显示了默认脚手架应用程序的添加或更改。我们将我们的应用程序称为
    `reddit`。
- en: In this recipe, we will not support threaded comments (as in the actual [http://www.reddit.com/](http://www.reddit.com/)
    website), because it would be an unnecessary complication. We will discuss threaded
    comments in a subsequent recipe.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们不会支持带线程的评论（如实际[http://www.reddit.com/](http://www.reddit.com/)网站上的那样），因为这会是一个不必要的复杂性。我们将在后续的菜谱中讨论带线程的评论。
- en: We will follow the same steps discussed in the previous recipe.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循先前的菜谱中讨论的相同步骤。
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: This application is very similar to the `contacts` of the previous recipe. In
    fact, the data model is almost identical, provided that we map table `company`
    into a table `category`, and table `contact` into a table `news`. The main differences
    are that news items do not have a `name`, but they have a `title` and a `link`
    instead. Moreover, `news` items must be sorted by user votes, and not alphabetically.
    We also need to add a mechanism to allow users to vote, record votes, and prevent
    double counting. We need an extra table for this. We will also not deal with pagination,
    since this is discussed in a separate recipe.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序与先前的 `contacts` 菜谱非常相似。事实上，数据模型几乎是相同的，前提是我们将表 `company` 映射到表 `category`，将表
    `contact` 映射到表 `news`。主要区别在于新闻条目没有 `name`，但它们有 `title` 和 `link`。此外，新闻条目必须按用户投票排序，而不是按字母顺序。我们还需要添加一个机制来允许用户投票、记录投票并防止重复计数。为此我们需要一个额外的表。我们也不会处理分页，因为这在单独的菜谱中讨论过。
- en: 'Here is the complete model:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的模型：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As discussed previously, many of the needed actions are equivalent to the `contacts`
    application of the previous recipe. In particular, we need actions to list categories,
    to list news for a given category, to create and edit categories, to create and
    edit news, to list comments, and vote for `news` items.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，许多所需操作与之前菜谱中的 `contacts` 应用程序等效。特别是，我们需要列出类别、列出给定类别的新闻、创建和编辑类别、创建和编辑新闻、列出评论以及为
    `news` 项目投票的操作。
- en: '[PRE14]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Most of these actions are very standard, and composed of the usual `select`
    and `crud` forms.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大多数这些操作都非常标准，由常用的 `select` 和 `crud` 表单组成。
- en: 'We used two types of decorators to make sure that only logged-in users can
    edit content, and only managers can create and edit categories. You can use `appadmin`
    to create a `manager` group and give membership to users:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用了两种类型的装饰器来确保只有登录用户可以编辑内容，只有管理员可以创建和编辑类别。您可以使用 `appadmin` 创建一个 `manager`
    组并将用户添加为成员：
- en: '![How to do it...](img/5467OS_02_19.jpg)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/5467OS_02_19.jpg)'
- en: 'The only special action is the last `vote`. The vote action is designed to
    be an Ajax callback. To avoid indirect reference attacks, the first line makes
    sure the action is called with a `POST` request. Then we parse the request args:
    it expects a news ID as `args(0)`, and plus or minus as `args(0)`, depending on
    whether we want to vote the news item up or down. If we vote up (`plus`), it creates
    a new db.vote entry with value equal to `+1`. If we vote down (`minus`), it creates
    a new `db.vote` entry with value equal to `-1`. The action also checks whether
    we voted already. We are allowed to change our vote, but not to vote twice.'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 唯一的特殊操作是最后的 `vote`。投票操作被设计为Ajax回调。为了避免间接引用攻击，第一行确保操作通过 `POST` 请求调用。然后我们解析请求参数：它期望一个新闻ID作为
    `args(0)`，以及正负号作为 `args(0)`，取决于我们是要对新闻项进行点赞还是踩。如果我们点赞（`plus`），它将创建一个值为 `+1` 的新
    `db.vote` 条目。如果我们踩（`minus`），它将创建一个值为 `-1` 的新 `db.vote` 条目。操作还检查我们是否已经投票。我们允许更改我们的投票，但不能重复投票。
- en: This action returns a JavaScript string that updates the votes HTML element
    with the latest vote count, and flashes a new message. The last line of the action
    is tightly coupled with the view that will perform the Ajax call (views/default/news_comments.html).
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此操作返回一个JavaScript字符串，用于更新投票HTML元素的最新投票数，并显示一条新消息。操作的最后一行与将要执行Ajax调用的视图紧密耦合（views/default/news_comments.html）。
- en: 'We also want to list all possible categories in the menu:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还希望在菜单中列出所有可能的类别：
- en: '[PRE15]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we need to create the following views:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要创建以下视图：
- en: '`views/default/categories.html:`'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/default/categories.html:`'
- en: '[PRE16]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`views/default/news.html:`'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/default/news.html:`'
- en: '[PRE17]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here is how this page looks:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是这个页面的样子：
- en: '![How to do it...](img/5467OS_02_20.jpg)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/5467OS_02_20.jpg)'
- en: '`views/default/category_create.html:`'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/default/category_create.html:`'
- en: '[PRE18]'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`views/default/news_create.html:`'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/default/news_create.html:`'
- en: '[PRE19]'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`views/default/category_edit.html:`'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/default/category_edit.html:`'
- en: '[PRE20]'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`views/default/categories.html:`'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/default/categories.html:`'
- en: '[PRE21]'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`views/default/news_comments.html:`'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/default/news_comments.html:`'
- en: '[PRE22]'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Notice the code:'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意代码：
- en: '[PRE23]'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'On clicking, it performs an Ajax request that records our vote. The return
    value of the Ajax request is evaluated (`:eval`). The URL(`vote`) returns a JavaScript
    code that will be evaluated:'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击时，它执行一个Ajax请求来记录我们的投票。Ajax请求的返回值将被评估（`:eval`）。URL（`vote`）返回将被评估的JavaScript代码：
- en: '[PRE24]'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In particular, it will alter the content of the following code, and flash a
    new message (slidedown):'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 特别是，它将更改以下代码的内容，并显示一条新消息（滑动下降）：
- en: '[PRE25]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here is how this page looks:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是这个页面的样子：
- en: '![How to do it...](img/5467OS_02_21.jpg)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/5467OS_02_21.jpg)'
- en: Building a Facebook clone
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Facebook克隆
- en: At its fundamental level, Facebook handles friendship relations between users,
    and allows friends to see each other's posts. Users can register, log in, search
    for other users, request friendship, and accept friendship. When a user posts
    a message, the post will be visible on the wall (web page) of all his/her friends.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在其基本层面，Facebook处理用户之间的友谊关系，并允许朋友看到彼此的帖子。用户可以注册、登录、搜索其他用户、请求友谊和接受友谊。当用户发布一条消息时，该消息将显示在所有朋友的朋友墙上（网页）。
- en: Of course, the real Facebook application is quite complex, and our version is
    greatly simplified, but it captures the most important features. In particular,
    we will omit the ability to attach comments after posts, and we will omit e-mail
    notification features. We will also omit the code to handle photos, videos, and
    chat. We are only interested in the friendship relations and display wall posts,
    based on friendship. We will call our application `friends`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，真正的Facebook应用程序相当复杂，而我们版本大大简化了，但它捕捉了最重要的功能。特别是，我们将省略在帖子后附加评论的能力，以及省略电子邮件通知功能。我们还将省略处理照片、视频和聊天的代码。我们只对基于好友关系的友谊关系和显示墙帖子感兴趣。我们将我们的应用程序称为
    `friends`。
- en: How to do it...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The core of our design is a table to link two people: a `source` and a `target`
    of a friendship relation. The friendship relation is requested by a `source`,
    and must be approved by a `target`. When approved, the `source` user can see the
    posts and profile info of the `target`. While the real Facebook friendship relations
    are bi-directional (although friends can be hidden/blocked), in our case we assume
    unidirectional friendship (two users must give friendship to each other to see
    each other''s posts).'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设计的核心是一个连接两个人的表：友谊关系的 `source` 和 `target`。友谊关系由 `source` 请求，必须由 `target` 批准。批准后，`source`
    用户可以看到 `target` 的帖子和个人资料信息。虽然真实的Facebook友谊关系是双向的（尽管朋友可以被隐藏/阻止），但在我们的情况下，我们假设单向友谊（两个用户必须互相给予友谊才能看到对方的帖子）。
- en: 'The model is therefore quite simple, and we only need two tables:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，模型非常简单，我们只需要两个表：
- en: '[PRE26]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The last five lines define various shortcuts that will make our controllers
    and views more compact. For example, they allow the user to use User instead of
    `db.user`, and `orderby=alphabetical` instead of the more verbose equivalent.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后五行定义了各种快捷方式，这将使我们的控制器和视图更加紧凑。例如，它们允许用户使用 `User` 而不是 `db.user`，以及使用 `orderby=alphabetical`
    而不是更冗长的等效选项。
- en: myfriends is the set of people that have accepted our friendship, which means
    we can see their posts.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`myfriends` 是接受我们友谊的人的集合，这意味着我们可以看到他们的帖子。'
- en: 'The following list line allows us to print the first name followed by last
    name of a user, given a user object or a user reference:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面的列表行允许我们打印用户对象或用户引用的姓名和姓氏：
- en: '[PRE27]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We are going to need the following pages:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将需要以下页面：
- en: An **index** page that, if we are logged in, redirects to our home page
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**索引**页面，如果登录，则重定向到我们的主页
- en: A **private** home page that shows our messages, the posts of our friends, and
    allows us to post a new post
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**私人**主页，显示我们的消息、朋友的帖子，并允许我们发布新的帖子
- en: A page to search for new friends by name
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个页面用于按名称搜索新朋友
- en: A page to check who our current friends are, check pending friend requests,
    and approve or deny friendship
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个页面用于查看我们的当前好友，检查待处理的好友请求，并批准或拒绝好友关系
- en: A wall page to see the status of one particular friend (or our own)
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个墙页面用于查看特定朋友的状况（或我们自己的）
- en: We also need a callback action to implement to allow users to **request** friendship,
    to **accept** friendship, to **deny** a friendship request, and to **cancel**
    a previous request for friendship. We implement these through a single Ajax callback
    in a function called `friendship:`
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要实现一个回调操作，允许用户**请求**好友关系，**接受**好友关系，**拒绝**好友请求，以及**取消**之前的好友请求。我们通过一个名为
    `friendship:` 的单个Ajax回调函数来实现这些功能。
- en: '[PRE28]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We also include the **home, wall, friends**, and **search** pages in the menu:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还在菜单中包括了**主页、墙、好友**和**搜索**页面：
- en: '[PRE29]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Most of the views are straightforward.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大多数视图都很直接。
- en: Here is `views/default/home.html:`
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '这里是 `views/default/home.html`: '
- en: '[PRE30]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Notice the jQuery script that resizes the input message box, and the use of
    MARKMIN for rendering message markup.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意到调整输入消息框大小的jQuery脚本，以及使用MARKMIN进行消息标记渲染。
- en: Here is `views/default/wall.html`, which is very similar to the previous view
    (the difference is that there is no form, and the posts are relative to a single
    user, specified by `request.args(0)):`
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里是 `views/default/wall.html`，它与前面的视图非常相似（区别在于没有表单，帖子与单个用户相关，由 `request.args(0)`
    指定）：
- en: '[PRE31]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here is what this page looks like:'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个页面的样子如下：
- en: '![How to do it...](img/5467OS_02_22.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5467OS_02_22.jpg)'
- en: Here is `views/default/search.html:`
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '这里是 `views/default/search.html`: '
- en: '[PRE32]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Here is what this page looks like:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里是这个页面的样子：
- en: '![How to do it...](img/5467OS_02_23.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5467OS_02_23.jpg)'
- en: Notice how the buttons perform Ajax calls to `request` friendship to `user.id`.
    Upon click, the button is replaced by a message that says pending.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意按钮是如何执行Ajax调用到`request`以`user.id`为对象的友谊的。点击后，按钮会被一个显示“待处理”的消息所替换。
- en: 'Below is `views/default/friends.html`. It lists current friends and pending
    friendship requests:'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下面是`views/default/friends.html`。它列出了当前的朋友和待处理的友谊请求：
- en: '[PRE33]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Here is what this page looks like:'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下面是这个页面的样子：
- en: '![How to do it...](img/5467OS_02_24.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5467OS_02_24.jpg)'
- en: 'This view displays two tables: a list of friendships **offered** to us (by
    accepting, we give them the permission to see our profile and posts), and friendship
    **requests** that we sent (people we want to see profile and posts of). For each
    user in the first table, there are two buttons. A button that performs an Ajax
    call to **accept** a pending friendship request, and a button to **deny** friendship.
    For each user in the second table, there is a column that informs us of whether
    our request was accepted, and a column with a button to cancel the friendship
    relation (whether pending or established).'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个视图显示了两个表：一个是向我们**提供**的友谊列表（通过接受，我们赋予他们查看我们个人资料和帖子的权限），以及我们发送的友谊**请求**（我们希望查看其个人资料和帖子的人）。在第一个表中的每个用户都有一个按钮。一个按钮执行Ajax调用以**接受**待处理的友谊请求，另一个按钮用于**拒绝**友谊。在第二个表中的每个用户都有一个列，告诉我们我们的请求是否被接受，以及一个带有按钮的列，用于取消友谊关系（无论是否待处理或已建立）。
- en: Notice how `{{=name_of(user)}}` and `{{=name_of(message.posted_by)}}` require
    a database lookup. Our application can be sped up by caching the output of this
    function.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意`{{=name_of(user)}}`和`{{=name_of(message.posted_by)}}`需要数据库查找。我们的应用程序可以通过缓存此函数的输出来加速。
- en: Using crud.archive
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`crud.archive`
- en: In this recipe, we discuss how to create full versioning for records in any
    application.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们讨论了如何在任何应用程序中为记录创建完整的版本控制。
- en: How to do it...
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'If you have any table, for example, `db.mytable`, that needs versioning, and
    you use `crud.update`, you can store a full revision history for your records,
    by passing `onaccept=crud.archive` to `crud.update`. Here is an example:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个需要版本控制的表，例如`db.mytable`，并且你使用`crud.update`，你可以通过将`onaccept=crud.archive`传递给`crud.update`来为你的记录存储完整的修订历史。下面是一个例子：
- en: '[PRE34]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`crud.archive` will create a hidden table `db.mytable_archive`, and store the
    old record, before update, in the newly created table, including a reference to
    the current record.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`crud.archive`将创建一个隐藏的表`db.mytable_archive`，并在更新之前将旧记录存储在新创建的表中，包括对当前记录的引用。'
- en: 'Normally, this new table is hidden and only visible to web2py internals, but
    you can have access to it by defining it explicitly in the model. If the original
    table was called `db.mytable`, the archive table must be called `db.mytable_archive`
    (postfix the original one with `_archive)`, and it must extend the original table
    with a reference field called `current_record`. Here is a concrete example:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这个新表是隐藏的，并且只对web2py内部可见，但你可以通过在模型中明确定义它来访问它。如果原始表被命名为`db.mytable`，归档表必须命名为`db.mytable_archive`（在原始表名后加上`_archive`），并且它必须通过一个名为`current_record`的引用字段扩展原始表。下面是一个具体的例子：
- en: '[PRE35]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: For a different table, just replace `mytable` with the actual table name. Everything
    else stays the same.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不同的表，只需将`mytable`替换为实际的表名。其他所有内容保持不变。
- en: Notice such table includes all fields of `db.mytable` plus one `current_record`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这样的表包含了`db.mytable`的所有字段加上一个`current_record`。
- en: There's more...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Let's take a look at other features of `crud.archive`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`crud.archive`的其他功能。
- en: Timestamping the stored record
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存储记录的时间戳
- en: '`crud.archive` does not timestamp the stored record, unless your original table
    has a timestamp and signature. For example:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`crud.archive`不会为存储的记录添加时间戳，除非你的原始表有时间和签名。例如：'
- en: '[PRE36]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'By adding `auth.signature` to the table, we are adding the following fields:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向表中添加`auth.signature`，我们添加了以下字段：
- en: '[PRE37]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: You can also do this manually (without `auth.signature)`, and give any name
    to the signature and timestamp fields. `crud.archive` handles them transparently.
    They are filled by the `SQLFORM.accepts` function.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以手动进行（不使用`auth.signature`），并为签名和时间戳字段命名。`crud.archive`会透明地处理它们。它们由`SQLFORM.accepts`函数填充。
- en: Storing the history of each record
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存储每个记录的历史
- en: The main idea behind `crud.archive` is that of storing the history of each record
    that is edited, and storing previous revisions in a separate table. This allows
    you to edit the record without breaking references to it. Moreover, if you alter
    (migrate) the original table, the archive table will migrate as well. The only
    catch is that deleting a record in the original table will cause a cascade delete
    in the archive table, and the entire previous history for the record is deleted.
    Hence, probably, you do not want to ever delete records, but just make them **disabled**,
    by unchecking the `is_active` field.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`crud.archive` 的主要思想是存储每个被编辑的记录的历史，并将以前的版本存储在单独的表中。这允许你在不破坏对它的引用的情况下编辑记录。此外，如果你修改（迁移）原始表，存档表也会迁移。唯一的缺点是，在原始表中删除记录将在存档表中引起级联删除，并且整个记录的先前历史都将被删除。因此，你可能永远不想删除记录，而是通过取消选中
    `is_active` 字段来将它们设置为**禁用**。'
- en: 'You will also have to change the query in some `select` statements to hide
    records that are disabled, by filtering records with the following:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 你还必须在某些 `select` 语句中更改查询，以隐藏已禁用的记录，通过以下方式过滤记录：
- en: '[PRE38]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Converting an existing static site into a web2py application
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将现有静态网站转换为 web2py 应用程序
- en: 'We will assume that you have a collection of static HTML files, CSS files,
    JavaScript files, and images in one folder, and that you wish to turn them into
    a web2py application. There are two ways to do it: a naive way, in which existing
    HTML files continue to be treated as static, and a more complex way, in which
    HTML files are associated to controller actions, so that one can add some dynamic
    content later on.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将假设你有一个静态 HTML 文件、CSS 文件、JavaScript 文件和图像的集合在一个文件夹中，并且你希望将它们转换为一个 web2py 应用程序。有两种方法可以实现：一种简单的方法，其中现有的
    HTML 文件继续被视为静态，另一种更复杂的方法，其中 HTML 文件与控制器操作相关联，以便以后可以添加一些动态内容。
- en: How to do it...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: A naive way consists simply of creating a new web2py application (or using an
    existing one), and using a static folder. For example, create a new application
    called `app`, and copy the entire directory structure of your existing site under
    `applications/app/static/`.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种简单的方法是创建一个新的 web2py 应用程序（或使用现有的一个），并使用一个静态文件夹。例如，创建一个名为 `app` 的新应用程序，并将现有站点的整个目录结构复制到
    `applications/app/static/` 之下。
- en: 'In this way, a static file, `applications/app/static/example.html` can be accessed
    at the URL: `http://127.0.0.1:8000/app/static/example.html.`'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这样，一个静态文件，`applications/app/static/example.html`，可以通过以下 URL 访问：`http://127.0.0.1:8000/app/static/example.html。`
- en: 'While this process does not break relative URLs (URLs that do not start with
    a forward slash), such as: `<a href="../path/to/example2.html">click me</a>`,
    it may break absolute URLs (which start with a forward slash) such as: `<a href="/path/to/example2.html">click
    me</a>.`'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然这个过程不会破坏相对 URL（不以正斜杠开头的 URL），例如：`<a href="../path/to/example2.html">点击我</a>`，但它可能会破坏绝对
    URL（以正斜杠开头），例如：`<a href="/path/to/example2.html">点击我</a>。`
- en: This is not a web2py-specific problem, but rather an indication of poor design
    of those HTML files, since the absolute links break every time the folder structure
    is moved into another folder.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这不是一个 web2py 特定的问题，而是一个表明那些 HTML 文件设计不佳的迹象，因为绝对链接会在文件夹结构移动到另一个文件夹时被破坏。
- en: The proper way to solve this problem, in case it occurs, consists of replacing
    all absolute URLS with relative ones. Here is an example.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果出现这种情况，解决这个问题的正确方法是将所有绝对 URL 替换为相对 URL。这里有一个例子。
- en: If a file, `static/path1/example1.html`, contains a link like `<a href="/path/to/example2.html">click
    me</a>`, and the file `example2.html`, appears under `static/path2/example2.html`,
    then the link should be replaced by `<a href="../path2/example2.html">click me</a>.`
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果一个文件，`static/path1/example1.html`，包含一个像 `<a href="/path/to/example2.html">点击我</a>`
    这样的链接，并且文件 `example2.html` 出现在 `static/path2/example2.html` 之下，那么链接应该替换为 `<a href="../path2/example2.html">点击我</a>。`
- en: Here the ../ moves out of the `static/path`1 folder into the static folder,
    and the rest of the path (`path2/example2.html`) correctly identifies the desired
    file.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`../` 从 `static/path`1 文件夹移动到静态文件夹，其余路径（`path2/example2.html`）正确地标识了所需的文件。
- en: A simple search for `href, src`, and `url` should allow you to locate all the
    URLS in the HTML, CSS, and JavaScript files. All the URLS starting with a `/`
    need to be fixed.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过简单搜索 `href, src` 和 `url`，你应该可以定位到 HTML、CSS 和 JavaScript 文件中的所有 URL。所有以 `/`
    开头的 URL 都需要修复。
- en: A more sophisticated approach consists of moving all images, movies, CSS, and
    JavaScript files into the static folder, and converting HTML files into views.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种更复杂的方法是将所有图像、电影、CSS和JavaScript文件移动到静态文件夹中，并将HTML文件转换为视图。
- en: 'We proceed in five steps:'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们按照以下五个步骤进行：
- en: We move all static files (except those ending in `html)` to the application
    `static/` folder.
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将所有静态文件（除了以`html`结尾的文件）移动到应用程序的`static/`文件夹。
- en: We create a new controller (for example, one called `controllers/legacy.py)`,
    and a new `views` folder (for example `views/legacy)`.
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建一个新的控制器（例如，名为`controllers/legacy.py`），以及一个新的`views`文件夹（例如`views/legacy`）。
- en: We move all the HTML files (for example, `page.html)` under the new views folder.
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将所有HTML文件（例如，`page.html`）移动到新的视图文件夹下。
- en: For each `view` file, we create a controller action with the same name returning
    `dict()`.
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个`view`文件，我们创建一个同名的控制器动作，返回`dict()`。
- en: We replace all internal links and references with `URL(...)`.
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将所有内部链接和引用替换为`URL(...)`。
- en: 'Let''s consider a concrete example consisting of the following files:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们考虑一个具体的例子，它包括以下文件：
- en: '[PRE39]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Here, page.html contains <img src="img/image.png" />. We end up with the following
    file structure in our web2py application folder:'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，page.html包含<img src="img/image.png" />。在我们的web2py应用程序文件夹中，我们最终得到以下文件结构：
- en: '[PRE40]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Here, legacy.py contains
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，legacy.py包含
- en: '[PRE41]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: and <img src="img/image.png"/> in page.html is replaced by
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并且在page.html中的<img src="img/image.png"/>被替换为
- en: '[PRE42]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The page is now accessible at the following URL:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 页面现在可以通过以下URL访问：
- en: '`http://127.0.0.1:8000/app/legacy/page.html`.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://127.0.0.1:8000/app/legacy/page.html`。'
- en: Creating semi-static pages (flatpages)
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建半静态页面（平面页面）
- en: Any web application contains pages that are static, and whose content does not
    change very often. They are called **flatpages**. They can be handled by embedding
    a CMS into the application (for example `plugin_wiki)` or using the explicit mechanism
    described in this recipe.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 任何网络应用程序都包含静态页面，其内容不经常更改。它们被称为**平面页面**。可以通过将CMS嵌入到应用程序中（例如`plugin_wiki`）或使用本菜谱中描述的显式机制来处理它们。
- en: 'Examples of flatpages are:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 平面页面的例子包括：
- en: Basic home and indexes
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本主页和索引
- en: About us
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于我们
- en: License and disclaimer
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许可证和免责声明
- en: 'With web2py, for these pages, we could set up simple controllers such as:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 使用web2py，对于这些页面，我们可以设置简单的控制器，例如：
- en: '[PRE43]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: And you can then code the page in the view directly, or store the page content
    in the database. This second approach is better, because it would allow easy in-place
    user editing, multiple-language internationalization support, log change history
    for audits, and much more.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以直接在视图中编写页面代码，或者将页面内容存储在数据库中。第二种方法更好，因为它将允许用户轻松就地编辑，支持多语言国际化，记录更改历史以供审计，等等。
- en: The idea of this recipe is to store the flatpages in the database, and display
    them according the user request (controller, function, args, preferred language,
    and so on.)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的思路是将平面页面存储在数据库中，并根据用户请求（控制器、函数、参数、首选语言等）显示它们。
- en: How to do it...
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'First, define a flatpage table to store the page contents, create a file in
    models called `flatpages.py`, and add the following definition:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，定义一个平面页面表以存储页面内容，在模型中创建一个名为`flatpages.py`的文件，并添加以下定义：
- en: '[PRE44]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The fields are:'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字段包括：
- en: '`title:` This is the main title'
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title:` 这是主标题'
- en: '`subtitle:` This is the optional subtitle'
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subtitle:` 这是可选的副标题'
- en: '`c:` This is the controller for who this page belongs to (see URL helper)'
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c:` 这是属于此页面的控制器（参见URL辅助工具）'
- en: '`f:` This is the function for who this page belongs to (see URL helper)'
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f:` 这是属于此页面的函数（参见URL辅助工具）'
- en: '`args:` This is the string argument to add several pages to a function (see
    URL helper)'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args:` 这是添加多个页面到函数的字符串参数（参见URL辅助工具）'
- en: '`lang:` This is the language to match user preferences'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lang:` 这是匹配用户偏好的语言'
- en: '`body:` This is the the page HTML body'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`body:` 这是页面的HTML主体'
- en: Notice that the `FLATPAGES_ADMIN` will be used to limit the edit access to the
    flatpages. This variable contains the e-mail of the user that will be allowed
    to edit.
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，`FLATPAGES_ADMIN`将用于限制对平面页面的编辑访问。此变量包含允许编辑的用户电子邮件。
- en: 'At this point, you should be able to populate this table using the `appadmin`
    administrative interface, or you can do it programmatically, that is, creating
    a `setup_flatpage` function in a controller, such as the following:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，您应该能够使用`appadmin`管理界面填充此表，或者您可以编程实现，即在控制器中创建一个`setup_flatpage`函数，如下所示：
- en: '[PRE45]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This example page will look as follows:'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此示例页面将如下所示：
- en: '[PRE46]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'To be able to render a page, add to the previously created file `models/flatpage.py`
    the following function flatpage:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了能够渲染一个页面，将以下函数`flatpage`添加到之前创建的文件`models/flatpage.py`中：
- en: '[PRE47]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'This function:'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个功能：
- en: Checks user language preferences (or session setting)
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查用户语言偏好（或会话设置）
- en: Checks action URL (according to request controller, function, and args)
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查操作URL（根据请求控制器、函数和参数）
- en: Fetches stored flatpage
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取存储的扁平页面
- en: Renders the page HTML
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染页面HTML
- en: 'If the user `FLATPAGES_ADMIN` is logged in, the function flatpage:'
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果用户`FLATPAGES_ADMIN`已登录，函数`flatpage()`：
- en: Prepares/processes an `SQLFORM` if editing the page
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编辑页面时准备/处理`SQLFORM`
- en: Or shows an **EDIT** button to edit the page
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者显示一个**编辑**按钮来编辑页面
- en: 'Finally, you should create a `flatpage.html` view, so that web2py can render
    the page, for example:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你应该创建一个`flatpage.html`视图，以便web2py可以渲染页面，例如：
- en: '[PRE48]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The placeholders are:'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 占位符是：
- en: '`form:` This is the edit `FORM` (or the link to edit)'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form:` 这是编辑`FORM`（或编辑链接）'
- en: '`body:` These are the actual page contents (stored in the database as HTML)'
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`body:` 这些是实际的页面内容（作为HTML存储在数据库中）'
- en: 'To tell web2py to show a flatpage in the desired controller (that is, `index`
    in `default.py)`, write the following:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要告诉web2py在期望的控制器（即在`default.py`中的`index`）中显示扁平页面，请编写以下内容：
- en: '[PRE49]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This will render the flatpage for the home page.
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将渲染主页的扁平页面。
- en: '`company.py` sample controller will look as follows:'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`company.py`示例控制器将如下所示：'
- en: '[PRE50]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: When you go to `default/index.php` or `company/about_us`, you should get a flatpage
    with an `EDIT` button, if you are logged in.
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你访问`default/index.php`或`company/about_us`时，如果你已经登录，你应该会看到一个带有`EDIT`按钮的扁平页面。
- en: Remember that, for performance reasons, flatpages are cached. So, changes may
    not be seen immediately (you can change this by clearing the cache or removing
    the cache parameter at the database query).
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，出于性能原因，扁平页面是缓存的。因此，更改可能不会立即显示（你可以通过清除缓存或从数据库查询中删除缓存参数来更改这一点）。
- en: How it works...
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: With web2py, you can completely choose what content will be displayed, what
    view will be used, and so on.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 使用web2py，你可以完全选择要显示的内容、要使用的视图等。
- en: In this case, when web2py executes your controller, the function `flatpage()`
    will try to fetch the stored page in the database according the request variables.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，当web2py执行你的控制器时，函数`flatpage()`将尝试根据请求变量从数据库中获取存储的页面。
- en: An `SQLFORM` will be rendered if the **Edit** button is pressed, to allow page
    editing by normal authenticated users. Page updates are inserted, so you'll get
    a history of page changes. It shows the latest record of the page, trying to match
    the preferred language (for example, use `session.lang = 'es'` to change the language).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 如果按下**编辑**按钮，将渲染一个`SQLFORM`，允许普通认证用户编辑页面。页面更新将被插入，因此你会得到页面更改的历史记录。它显示页面的最新记录，尝试匹配首选语言（例如，使用`session.lang
    = 'es'`来更改语言）。
- en: You can add a `view` field to flatpage table, so you could have multiple views
    to show this kind of content. You can even add a `format` field, so that you can
    render the page body in other markup languages other than HTML (wiki, ReST, and
    so on).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以向扁平页面表添加一个`view`字段，这样你就可以有多个视图来显示这种内容。你甚至可以添加一个`format`字段，这样你可以在HTML之外的其他标记语言中渲染页面主体（wiki、ReST等）。
- en: Adding your custom logo
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加您的自定义标志
- en: We are going to change the default logo that came with web2py, and add our logo
    instead. We need an image editor; use your preferred one, or use the ones that
    come with the operating system. Paint, GIMP, or Photoshop are appropriate.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更改随web2py一起提供的默认标志，并添加我们的标志。我们需要一个图像编辑器；使用你喜欢的，或者使用操作系统提供的，如Paint、GIMP或Photoshop都是合适的。
- en: '![Adding your custom logo](img/5467OS_02_25.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![添加您的自定义标志](img/5467OS_02_25.jpg)'
- en: 'This is the look of the default application:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认应用程序的外观：
- en: '![Adding your custom logo](img/5467OS_02_26.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![添加您的自定义标志](img/5467OS_02_26.jpg)'
- en: This is the result of customizing the logo.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 这是自定义标志的结果。
- en: How to do it...
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: First, we need to create a new application. You can do that through the `admin`
    application. Choose **Create a new application**, and name it. The name of my
    application is `changelogo`. By default, the new application is a copy of the
    `welcome` scaffolding application. Now, if you run your application, you will
    see at the top of the application the title of your application followed by the
    word `App`, in my case `changelogoApp`.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个新的应用程序。您可以通过`admin`应用程序来完成此操作。选择**创建一个新的应用程序**，并为其命名。我的应用程序名称是`changelogo`。默认情况下，新应用程序是`welcome`脚手架应用程序的副本。现在，如果您运行应用程序，您将在应用程序顶部看到您的应用程序标题后跟单词`App`，在我的情况下是`changelogoApp`。
- en: Fire up your image editor, and make your logo, if you are going to start a new
    one. Choose a pixel dimension, according to the layout you are using. I chose
    a dimension of `300x90` pixels for my new logo. When you finish editing it, save
    it in PNG or JPEG format. Name it (for example, `mylogoapp.png)`, and copy to
    the `static/images` directory inside your application.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的图像编辑器，如果您要开始一个新的标志。根据您使用的布局选择像素尺寸。我选择了`300x90`像素的新标志尺寸。编辑完成后，将其保存为PNG或JPEG格式。将其命名为（例如，`mylogoapp.png`），并将其复制到您应用程序内部的`static/images`目录中。
- en: 'The next step is to edit `views/layout.html` of your application. You can use
    the admin or your own editor. Scroll down to the header section looking for the
    following:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是编辑您应用程序的`views/layout.html`。您可以使用管理员或您自己的编辑器。向下滚动到标题部分，寻找以下内容：
- en: '[PRE51]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Let me explain the code a bit.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我稍微解释一下这段代码。
- en: 'The following code prints the user actions, such as login, register, and lost-password:'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下代码打印用户操作，例如登录、注册和找回密码：
- en: '[PRE52]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The following code prints the application name followed by `App:`
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下代码打印应用程序名称后跟`App:`。
- en: '[PRE53]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We need to change this to show the new logo. We will replace the <h1>... </h1>
    with the following:'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要将其更改为显示新的标志。我们将用以下内容替换 `<h1>...</h1>`：
- en: '[PRE54]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: This will print the logo image instead of the title.
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将打印标志图像而不是标题。
- en: 'The header section now looks as follows:'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标题部分现在看起来如下：
- en: '[PRE55]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Finally, it's a good practice that the logo links to the main page, so we will
    make a link to `default/index:`
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将标志链接到主页是一种良好的做法，因此我们将创建一个链接到`default/index:`。
- en: '[PRE56]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Creating menus and submenus
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建菜单和子菜单
- en: 'web2py handles menus in a transparent way, as follows:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: web2py以透明的方式处理菜单，如下所示：
- en: A list of menu items is stored, by convention, in `response.menu`
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按惯例，菜单项列表存储在`response.menu`中。
- en: The menu is embedded in a view with `{{=MENU(response.menu)}}`
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 菜单嵌入在带有`{{=MENU(response.menu)}}`的视图中。
- en: 'You can have more than one menu in different places of the same view, or in
    different views. The value of `response.menu` is a list of menu items. Normally,
    each menu item is a list of tuple containing the following elements: **title,
    status, link**, and **submenu**.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在同一视图的不同位置或不同视图中拥有多个菜单。`response.menu`的值是菜单项的列表。通常，每个菜单项都是一个包含以下元素的元组的列表：**标题，状态，链接**，和**子菜单**。
- en: Where title is the title of the menu, status is a Boolean that can be used to
    determine whether the menu link is the current page, link is the link to be redirected
    to when selecting the menu item, and submenu is a list of menu items.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 其中标题是菜单的标题，状态是一个布尔值，可以用来确定菜单链接是否是当前页面，链接是在选择菜单项时要重定向到的链接，子菜单是菜单项的列表。
- en: Here is an example of code that one would normally put in the file `models/menu.py:`
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个通常放在文件`models/menu.py`中的代码示例：
- en: '[PRE57]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The condition we used as the second argument checks whether the current page
    `URL()` is the page linked.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用作第二个参数的条件检查当前页面的`URL()`是否是链接的页面。
- en: How to do it...
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Submenus can easily be built explicitly, as follows:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 子菜单可以很容易地显式构建，如下所示：
- en: '[PRE58]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The parent of a submenu may or may not have a link. In this example, we moved
    the link from `Search` to its `Local` submenu item. It is good practice to internationalize
    the menu titles.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 子菜单的父菜单可能包含或不包含链接。在这个例子中，我们将链接从`搜索`移动到其`本地`子菜单项。将菜单标题国际化是一种良好的做法。
- en: '[PRE59]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: It is also important to specify the controller name (`default` in the example)
    for each link; otherwise, menus break when there are multiple controllers (and
    that is almost always the case; think of `appadmin)`.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个链接指定控制器名称（例如示例中的`default`）也很重要；否则，当有多个控制器时（这几乎是必然的情况；想想`appadmin`），菜单会出错。
- en: Customizing menus with icons
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用图标自定义菜单
- en: Sometimes, you want to customize a menu item more than the usual syntax seems
    to allow, for example, by adding icons to your menu items. This recipe shows you
    how.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能想要比通常的语法允许的更多自定义菜单项，例如，通过向菜单项添加图标。这个菜谱展示了如何做到这一点。
- en: How to do it...
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The first thing to realize is that the following:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先要意识到的是以下内容：
- en: '[PRE60]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Is equivalent to the following:'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 等价于以下内容：
- en: '[PRE61]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Here, A is the anchor (link) helper. You can use the latter syntax, and you
    can replace the A helper with any other combination of helpers. For example:'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，A是锚点（链接）助手。你可以使用后面的语法，并且你可以用任何其他组合的助手替换A助手。例如：
- en: '[PRE62]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Or:'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE63]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'You can create functions that build your menu items:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以创建构建你的菜单项的函数：
- en: '[PRE64]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Creating a navigation bar
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建导航栏
- en: web2py includes built-in support for menus, rendering using basic Python structures.
    In most cases, this is enough, but for more complex menus, it is difficult to
    maintain them using Python code exclusively. This recipe shows how to make a more
    dynamic menu, storing the menu entries in the database, and building the menu
    tree automatically.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: web2py包括对菜单的内置支持，使用基本的Python结构进行渲染。在大多数情况下，这已经足够了，但对于更复杂的菜单，仅使用Python代码来维护它们是困难的。这个菜谱展示了如何创建一个更动态的菜单，将菜单条目存储在数据库中，并自动构建菜单树。
- en: How to do it...
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'First, let''s define a navigation bar table to store the menu entries. Create
    a file in `models` called `navbar.py`, and add the following definition:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们定义一个导航栏表来存储菜单条目。在`models`中创建一个名为`navbar.py`的文件，并添加以下定义：
- en: '[PRE65]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The fields are:'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字段包括：
- en: '`title:` This is the text shown to the user'
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title:` 这是在用户界面中显示的文本'
- en: '`url:` This is the optional URL to link to'
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url:` 这是可选的链接URL'
- en: '`c:` This is the controller to build a link (see URL helper)'
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c:` 这是构建链接的控制器（参见URL助手）'
- en: '`f:` This is the function to build a link (see URL helper)'
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f:` 这是构建链接的函数（参见URL助手）'
- en: '`args:` This is the string argument to build a link (see URL helper)'
  id: totrans-354
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args:` 这是构建链接的字符串参数'
- en: '`sortable:` This is a numeric value to sort the entries'
  id: totrans-355
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sortable:` 这是一个用于排序条目的数值'
- en: '`parent_id:` This is the reference (`navbar.id`) of the higher-level menu ancestor
    (whose item is a submenu)'
  id: totrans-356
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parent_id:` 这是高级别菜单祖先（其条目是子菜单）的引用（`navbar.id`）'
- en: 'At this point, you should be able to populate this table using the `appadmin`
    administrative interface, or you can do it programmatically by creating a `setup_navbar`
    function in a controller, such as the following:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，你应该能够使用`appadmin`管理界面填充此表，或者你可以通过在控制器中创建一个名为`setup_navbar`的函数来程序化地完成它，如下所示：
- en: '[PRE66]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'This example menu looks like the following:'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个示例菜单看起来如下所示：
- en: '[PRE67]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Each top-level menu links to a specific controller, second-level submenus link
    to functions on that controller, and third-level entries supply arguments to those
    functions (note that you can use the same defaults for URL parameters c and f,
    which will be used hierarchically, using the inherited value).
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个顶级菜单链接到一个特定的控制器，二级子菜单链接到该控制器上的函数，三级条目为这些函数提供参数（注意，你可以为URL参数c和f使用相同的默认值，这些值将按层次结构使用继承的值）。
- en: Now, to show the menu, add to the previously created file `navbar.py` in `models`
    the following functions of `get_sub_menus:`
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了显示菜单，将以下`get_sub_menus`函数添加到之前创建的`models`中的`navbar.py`文件：
- en: '[PRE68]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'This function recursively builds the Python structure needed to render the
    menu in the HTML page, and does the following:'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数递归地构建在HTML页面上渲染菜单所需的Python结构，并执行以下操作：
- en: Fetches the `navbar` menu entries for the solicited level
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取请求级别的`navbar`菜单条目
- en: Checks action destination or uses defaults (for `URL` helper)
  id: totrans-366
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查操作目标或使用默认值（对于`URL`助手）
- en: Calculates if this entry is the current selected one
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算此条目是否为当前选中的条目
- en: Makes and gives back the item to be used with the `MENU` helper
  id: totrans-368
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并返回用于`MENU`助手的条目
- en: 'To tell web2py to build the menu, use the following in the same `navbar` model:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要告诉web2py构建菜单，请在相同的`navbar`模型中使用以下内容：
- en: '[PRE69]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: This will build the menu each time a page is viewed.
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将在每次查看页面时构建菜单。
- en: 'If you have a complex menu that doesn''t change often, you can reuse it several
    times, using a cache to keep it in memory:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你有一个不经常改变的复杂菜单，你可以多次重用它，使用缓存将其保存在内存中：
- en: '[PRE70]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: The menu is usually rendered in a page with the `MENU` helper that interprets
    this structure (see `views, layout.html):`
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单通常在包含`MENU`助手的页面上渲染，该助手解释这个结构（参见`views, layout.html`）：
- en: '[PRE71]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Using cookies to set the language
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用cookies设置语言
- en: By default, web2py determines the preferred user language from the **HTTP Accept-
    Language header**.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，web2py从**HTTP Accept-Language头**中确定首选用户语言。
- en: 'Here is an example of the normal workflow:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个正常工作流程的示例：
- en: A user sets the browser preferences to `en` (English), `en-us` (English spoken
    in US), and `fr-fr` (French spoken in France)
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户将浏览器首选项设置为`en`（英语）、`en-us`（美国英语）和`fr-fr`（法国法语）
- en: When visiting our website, the browser sends the list of accepted languages
    in the HTTP header `Accept-Language`
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问我们的网站时，浏览器在HTTP头`Accept-Language`中发送接受的语言列表。
- en: web2py parses the HTTP headers, validates the `Accept-Language` list, and loops
    over its languages
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: web2py解析HTTP头，验证`Accept-Language`列表，并遍历其语言。
- en: web2py stops looping when a language appears in `T.current_languages`, or when
    a corresponding language file (for example `fr-fr.py)` is found in the language
    subfolder of the request application (`applications/app/languages`)
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个语言出现在`T.current_languages`中，或者当在请求应用程序的语言子文件夹中找到相应的语言文件（例如`fr-fr.py`）时，web2py停止循环。
- en: If web2py stops looping because a language, for example `en-en`, appears in
    `T.current_languages`, it means that the language does not need translation. If,
    instead, web2py stops looping because a language file if found, that language
    file will be used for translation. If neither of the two conditions are met for
    all of the languages in `Accept-Language`, there is no translation.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 如果web2py因为一个语言，例如`en-en`，出现在`T.current_languages`中而停止循环，这意味着该语言不需要翻译。如果相反，web2py因为找到一个语言文件而停止循环，那么将使用该语言文件进行翻译。如果对于`Accept-Language`中的所有语言都没有满足这两个条件，则没有翻译。
- en: Normally, this selection is performed by web2py before calling the application
    code.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这个选择是在调用应用程序代码之前由web2py执行的。
- en: 'Within the application code (for example, in a model), you can override default
    settings. You can change the list of current languages:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序代码中（例如，在模型中），你可以覆盖默认设置。你可以更改当前语言列表：
- en: '[PRE72]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'You can also force web2py to pick a language from a different list than the
    one provided in the HTTP header:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以强制web2py从一个不同于HTTP头中提供的列表中选择语言：
- en: '[PRE73]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Often, you do not want the web application to rely on the browser to determine
    the language preference, but you want to ask the visitor explicitly through buttons,
    links, or a drop-down box. When this happens, the application needs to remember
    the selection as the user browses through the application pages.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，你不想让网络应用程序依赖于浏览器来确定语言偏好，而是希望通过按钮、链接或下拉框明确询问访客。当这种情况发生时，应用程序需要记住用户在浏览应用程序页面时的选择。
- en: If the application requires a login, this preference can be stored in the user
    profile, for example, in a custom field of the `auth_user` table.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序需要登录，这个偏好可以存储在用户配置文件中，例如，在`auth_user`表的自定义字段中。
- en: But not all applications require a login, and often, the language preference
    is expressed before registration. A convenient and transparent way to set and
    remember the language that does not require a database, is to store the preference
    in a cookie. This can be achieved in the following way.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 但并非所有应用程序都需要登录，而且通常语言偏好是在注册之前表达的。一种方便且透明地设置和记住语言的方法是不需要数据库，而是在cookie中存储偏好设置。这可以通过以下方式实现。
- en: How to do it...
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a `model` file, for example `0_select_language.py`, that contains the
    following code:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`model`文件，例如`0_select_language.py`，其中包含以下代码：
- en: '[PRE74]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Insert the following somewhere in `views/layout.html:`
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/layout.html`中的某个位置插入以下内容：
- en: '[PRE75]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The previous code produces a select-language drop-down box, listing all languages
    for which web2py can find a translation file. When the value of the drop-down
    box changes, it forces a reload of the page. Upon reload, the code sets a cookie
    called `all_lang` that contains the selected language. When another page is loaded,
    if the code above finds the cookie, it uses the information in the cookie to choose
    and force the language selection.
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码生成一个选择语言的下拉框，列出web2py可以找到翻译文件的所有语言。当下拉框的值改变时，它会强制页面重新加载。在重新加载后，代码设置一个名为`all_lang`的cookie，其中包含所选语言。当加载另一个页面时，如果上述代码找到cookie，它将使用cookie中的信息来选择并强制语言选择。
- en: 'The same can be achieved more explicitly using links instead of a drop-down
    box:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用链接而不是下拉框可以更明确地实现相同的效果：
- en: '[PRE76]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: This solution works even if the application does not use sessions.
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使应用程序不使用会话，这种解决方案也是有效的。
- en: Notice that the name of the language is itself translated, that is `{{=T(language)}}`,
    because it should be listed in the current selected language.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，语言名称本身也需要翻译，即`{{=T(language)}}`，因为它应该列在当前选定的语言中。
- en: 'Also notice the following string is inside the cookie, which makes sure the
    preference applies only to the current application. This line is interpreted by
    the client-side, and may need to be changed, if custom URLs are enabled through
    routes:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 也要注意以下字符串位于cookie中，确保偏好设置仅适用于当前应用程序。此行由客户端解释，如果通过路由启用了自定义URL，可能需要更改：
- en: '[PRE77]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'In this case, a simple solution is to replace it with the following, and the
    preference will apply to all the applications under the same web2py installation,
    regardless of the URL:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，一个简单的解决方案是将它替换为以下内容，并且偏好设置将适用于同一web2py安装下的所有应用程序，无论URL如何：
- en: '[PRE78]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Designing modular applications
  id: totrans-406
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计模块化应用程序
- en: In this recipe, we will show you how to create a modular application using web2py
    components.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将向您展示如何使用web2py组件创建一个模块化应用程序。
- en: In particular, we will consider, as an example, an application that will allow
    you to create items, list items, and have the list updated dynamically when new
    items are created/updated.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，我们将考虑一个示例应用程序，该应用程序将允许您创建项目、列出项目，并在创建/更新新项目时动态更新列表。
- en: Getting ready
  id: totrans-409
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We will consider the scaffolding application with the following additional model
    `models/db_items.py:`
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将考虑以下附加模型`scaffolding application`的`models/db_items.py`：
- en: '[PRE79]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Notice that there is nothing specific about this table or its field structure,
    but we will use the `db.mytable` in the following example.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此表及其字段结构没有特定之处，但以下示例中我们将使用`db.mytable`。
- en: How to do it...
  id: totrans-413
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In `controllers/default.py`, create a base action to load the components in
    the view and the controllers, to actually list and edit items:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`controllers/default.py`中，创建一个基本动作来加载视图和控制器中的组件，以实际列出和编辑项目：
- en: '[PRE80]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'In the view `views/default/index.html`, just load the component to list the
    items and link the edit function (using a placeholder that will be used to insert
    the form to create or edit items):'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在视图`views/default/index.html`中，只需加载组件以列出项目并链接编辑功能（使用占位符，该占位符将用于插入创建或编辑项目的表单）：
- en: '[PRE81]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: In the view `views/default/list_items.html`, each item on the item list will
    load the specified URL into the `div` with the ID `placeholder`.
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在视图`views/default/list_items.html`中，项目列表中的每个项目都会将指定的URL加载到ID为`placeholder`的`div`中。
- en: '[PRE82]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: A view for the action `edit_item` is not necessary, since it returns a helper,
    not a dict.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`edit_item`动作的视图不是必需的，因为它返回一个辅助器，而不是字典。
- en: How it works...
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The view index loads a list of items through Ajax into `div#showitems`. It also
    displays a link and a `div#placeholder`. Clicking on the link causes an Ajax request
    to `edit_item`, without `args` to return a `create form` that is rendered inside
    `div#placeholder`. The list also contains a link to `edit_item`, which also displays
    an `update form` into the `div#placeholder`. The form is not just displayed tharough
    Ajax. The component is always loaded by clicking an `A(...,component=URL(...),target="placeholder")`.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 索引视图通过Ajax将项目列表加载到`div#showitems`中。它还显示一个链接和一个`div#placeholder`。点击链接会导致对`edit_item`的Ajax请求，没有`args`返回一个在`div#placeholder`内渲染的`create
    form`。列表还包含一个到`edit_item`的链接，该链接也会在`div#placeholder`中显示一个`update form`。表单不仅通过Ajax显示。组件始终通过点击`A(...,component=URL(...),target="placeholder")`来加载。
- en: This ensures that the component is loaded through Ajax, and the forms in the
    component will be submitted through Ajax, thus refreshing the component only.
    Any form submission will return a `response.ajax`, which refreshes the other component
    `div@list_items`.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保了组件通过Ajax加载，组件中的表单将通过Ajax提交，从而仅刷新组件。任何表单提交都将返回一个`response.ajax`，该响应刷新其他组件`div@list_items`。
- en: Notice that all the logic is generated at the server-side, translated under
    the hood in the JS code that is embedded in the page, and executed at the client-side.
    Clicking on a link causes a form to be displayed. Submitting a form causes a form
    to be processed, and, if accepted, the list of items is refreshed.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 注意所有逻辑都在服务器端生成，在嵌入页面的JS代码中幕后翻译，并在客户端执行。点击链接会显示一个表单。提交表单会导致处理表单，如果被接受，项目列表将被刷新。
- en: Speeding up downloads
  id: totrans-425
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加快下载速度
- en: 'By default, the download function in the scaffolding controller sets the following
    HTTP response headers, preventing client-side caching:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，scaffolding控制器中的下载函数设置以下HTTP响应头，防止客户端缓存：
- en: '[PRE83]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: This may be good for some dynamic content, but, for example, a client browsing
    a site with several non static images, will see how each image loads every time
    the page is shown, slowing down navigation.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能对某些动态内容有益，但例如，一个客户端在浏览包含多个非静态图像的网站时，会看到每次页面显示时每个图像的加载情况，这会减慢导航速度。
- en: Caching download with the `@cache` decorator does not help, because caching
    would be done at server-side, while we want client-side caching.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@cache` 装饰器缓存下载没有帮助，因为缓存将在服务器端完成，而我们希望客户端缓存。
- en: Moreover, the download function also performs some authorization checks, which,
    in some cases, are not necessary, and therefore cause an unwanted slow-down.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，下载函数还执行一些授权检查，在某些情况下，这些检查是不必要的，因此会导致不必要的延迟。
- en: A better approach consists of using a custom download function, which allows
    client-side caching, and skips authorization.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更好的方法是使用自定义的下载函数，它允许客户端缓存，并跳过授权。
- en: How to do it...
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We need to write a custom download function. We could edit the scaffolding one,
    but it's preferable to simply add another one that is call `fast_download`, so
    we will have the choice to use one or the other in different parts of our application.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编写一个自定义的下载函数。我们可以编辑现有的脚手架，但最好是简单地添加另一个名为 `fast_download` 的函数，这样我们就可以在不同的应用部分选择使用其中一个。
- en: 'First of all, we want our application to return the following HTTP header:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们希望我们的应用程序返回以下 HTTP 头部信息：
- en: '[PRE84]'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'But omit these ones:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但省略这些：
- en: '[PRE85]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'This can be done by explicitly removing the unwanted headers before streaming
    back the file:'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这可以通过在流回文件之前显式删除不需要的头部信息来完成：
- en: '[PRE86]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Notice that `response.stream` will handle `Range requests` and `If-Modified-Since`
    for you. Also notice that such an action could be used to download more files
    than it is intended to, so we insert a check, as follows:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，`response.stream` 会为你处理 `Range 请求` 和 `If-Modified-Since`。同时请注意，这样的操作可能会下载比预期更多的文件，因此我们插入了一个检查，如下所示：
- en: '[PRE87]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: We leave this for you to implement.
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们把这个留给你来实现。
- en: It will check if this function can be used, or the normal download function
    should be used.
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它将检查这个函数是否可以使用，或者应该使用正常的下载函数。
- en: 'In your view, remember to make URLs using `fast_download` instead of download:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的视图中，记得使用 `fast_download` 而不是下载来构造 URL：
- en: '[PRE88]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: There's more...
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If the filename you want to make sure `fast-download` is stored in an **upload**
    type field, for example, `mytable.myfield`, then you can configure your web server
    to serve it directly, and by-pass web2py completely. For example, if you are using
    Apache:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要确保 `fast-download` 保存的文件名在一个 **上传** 类型的字段中，例如，`mytable.myfield`，那么你可以配置你的
    web 服务器直接提供它，并绕过 web2py。例如，如果你正在使用 Apache：
- en: '[PRE89]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: This works, because all filenames stored in `mytable.myfield` are renamed by
    web2py upon upload, and their names start with `mytable.myfield`.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 这之所以有效，是因为存储在 `mytable.myfield` 中的所有文件名在上传时都会被 web2py 重命名，并且它们的名称以 `mytable.myfield`
    开头。
