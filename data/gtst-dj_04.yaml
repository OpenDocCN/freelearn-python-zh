- en: Chapter 4. Working with Templates
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。使用模板
- en: As we saw in the first chapter, where we explained the MVC and MVT models, templates
    are files that will allow us to generate the HTML code returned to the client.
    In our views, the HTML code is not mixed with the Python code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在第一章中所看到的，我们解释了MVC和MVT模型，模板是允许我们生成返回给客户端的HTML代码的文件。在我们的视图中，HTML代码不与Python代码混合。
- en: Django comes with its own template system. However, as Django is modular, it
    is possible to use a different template system. This system is composed of a language
    that will be used to make our dynamic templates.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Django自带其自己的模板系统。然而，由于Django是模块化的，可以使用不同的模板系统。这个系统由一个语言组成，将用于制作我们的动态模板。
- en: 'In this chapter, we will learn how to do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何做以下事情：
- en: Send data to a template
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据发送到模板
- en: Display data in a template
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模板中显示数据
- en: Display object lists in a template
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模板中显示对象列表
- en: Handle chains with filters in Django
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Django中使用过滤器处理链
- en: Use URLs effectively
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效使用URL
- en: Create base templates in order to extend other templates
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基础模板以扩展其他模板
- en: Insert static files in our templates
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的模板中插入静态文件
- en: Displaying Hello world! in a template
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模板中显示Hello world！
- en: 'We will create the first template of our application. To do so, we must first
    edit the `settings.py` file to define the folder that will contain our templates.
    We will first define the project folder as `PROJECT_ROOT` to simplify the migration
    to another system:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建我们应用程序的第一个模板。为此，我们必须首先编辑`settings.py`文件，以定义将包含我们模板的文件夹。我们将首先将项目文件夹定义为`PROJECT_ROOT`，以简化迁移到另一个系统：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now that Django knows where to look for the templates, we will create the first
    template of the application. To do this, use a file browser and add the `index.html`
    file in the `TasksManager/templates/en/public/` folder. We do not need to create
    the `__init__.py` file, because these files do not contain any Python files.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Django知道在哪里查找模板，我们将创建应用程序的第一个模板。为此，请使用文件浏览器，并在`TasksManager/templates/en/public/`文件夹中添加`index.html`文件。我们不需要创建`__init__.py`文件，因为这些文件不包含任何Python文件。
- en: 'The following is the content of the `index.html` file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`index.html`文件的内容：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Although the template is correct, we need to change the view to indicate its
    use. We will modify the `index.py` file with the following content:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管模板是正确的，但我们需要更改视图以指示其使用。我们将使用以下内容修改`index.py`文件：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If we test this page, we will notice that the template has been taken into account
    by the view.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们测试这个页面，我们会注意到模板已经被视图考虑进去了。
- en: Injecting the data from the view to the template
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从视图向模板注入数据
- en: Before improving our template, we must send variables to the templates. The
    injection of the data is based on these variables, as the template will perform
    certain actions. Indeed, as we have seen in the explanation of the MVC pattern,
    the controller must send variables to the template in order to display them.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在改进我们的模板之前，我们必须将变量发送到模板。数据的注入是基于这些变量，因为模板将执行某些操作。事实上，正如我们在MVC模式的解释中所看到的，控制器必须将变量发送到模板以便显示它们。
- en: There are several functions to send variables to the template. The two main
    functions are `render()` and `render_to_response()`. The `render()` function is
    very similar to `render_to_response ()`. The main difference is that if we use
    `render`, we do not need to specify `context_instance = RequestContext(request)`
    in order to send the current context. This is the context that will allow us to
    use the CSRF middleware later in the book.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个函数可以将变量发送到模板。两个主要函数是`render()`和`render_to_response()`。`render()`函数与`render_to_response()`非常相似。主要区别在于，如果我们使用`render`，我们不需要指定`context_instance
    = RequestContext(request)`以发送当前上下文。这是稍后在本书中使用CSRF中间件的上下文。
- en: 'We will change our view to inject variables in our template. These variables
    will be useful to work with the template language. The following is our modified
    view:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将改变我们的视图，以在我们的模板中注入变量。这些变量将对使用模板语言非常有用。以下是我们修改后的视图：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating dynamic templates
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建动态模板
- en: Django comes with a full-template language. This means that we will use template
    tags that will allow us to have more flexibility in our templates and display
    variables, perform loops, and set up filters.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Django自带完整的模板语言。这意味着我们将使用模板标签，这将允许我们在模板中具有更多的灵活性，并显示变量，执行循环，并设置过滤器。
- en: The HTML and template languages are mixed in the templates; however, the template
    language is very simplistic, and there is a minority when compared to the HTML
    code. A web designer will easily modify the template files.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: HTML和模板语言在模板中混合在一起；然而，模板语言非常简单，与HTML代码相比只是少数。网页设计师可以轻松修改模板文件。
- en: Integrating variables in templates
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模板中集成变量
- en: 'In our controller, we send a variable named `my_var`. We can display it in
    a `<span>` tag in the following way. Add the following lines in the `<article>`
    tag of our template tag:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的控制器中，我们发送了一个名为`my_var`的变量。我们可以以以下方式在`<span>`标签中显示它。在我们的模板标签的`<article>`标签中添加以下行：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this way, because our variable contains `string = "Hello World!"`, the HTML
    code that will be generated is as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，因为我们的变量包含`string = "Hello World!"`，将生成以下HTML代码：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will learn how to create conditions for variables or functions in order to
    filter the data in the variables in the following examples.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何为变量或函数创建条件，以便在以下示例中过滤变量中的数据。
- en: Conditional statements
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件语句
- en: Language templates also allow conditional structures. Note that for a display
    variable, double brackets `{{}}` are used, but once we have an action to be made
    as a condition or loop, we will use `{%%}`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 语言模板还允许条件结构。请注意，对于显示变量，使用双大括号`{{}}`，但一旦我们有一个作为条件或循环的操作，我们将使用`{%%}`。
- en: 'Our controller sends a `years` variable that can define age. An example of
    a conditional structure is when you can change the value of the variable in the
    controller to observe the changes. Add the following code in our `<article>` tag:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的控制器发送一个可以定义年龄的`years`变量。条件结构的一个示例是，当您可以更改控制器中变量的值以观察更改时。在我们的`<article>`标签中添加以下代码：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In our case, when we send the value `15` to the generated template, the code
    that is used is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，当我们将值`15`发送到生成的模板时，使用的代码如下：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Looping in a template
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在模板中循环
- en: 'Looping allows you to read through the elements of a table or data dictionary.
    In our controller, we sent a data table called `array_city` in which we have the
    names of cities. To see all these names of cities in the form of a list, we can
    write the following in our template:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 循环允许您阅读表或数据字典的元素。在我们的控制器中，我们发送了一个名为`array_city`的数据表，其中包含城市的名称。要以列表形式查看所有这些城市的名称，我们可以在模板中编写以下内容：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This looping will go through the `array_city` table, and place each element
    in the `city` variable that we display in the `<li>` tag. With our sample data,
    this code will produce the following HTML code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此循环将遍历`array_city`表，并将每个元素放入我们在`<li>`标签中显示的`city`变量中。使用我们的示例数据，此代码将生成以下HTML代码：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using filters
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用过滤器
- en: Filters are an effective way to modify the data before sending it to the template.
    We will look at some examples of filters in the following sections to understand
    them better.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器是在将数据发送到模板之前修改数据的有效方法。我们将在以下部分中查看一些过滤器的示例，以更好地理解它们。
- en: The upper and lower filters
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大写和小写过滤器
- en: The lower filter converts into lowercase letters, and the upper filter converts
    into uppercase letters. The example given in the subsequent sections contains
    the `my_hello` variable, which equals `Hello World!`
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 小写过滤器将转换为小写字母，而大写过滤器将转换为大写字母。在接下来的部分中给出的示例中包含`my_hello`变量，其值为`Hello World!`
- en: The lower filter
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小写过滤器
- en: 'The code for the lower filter is as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 小写过滤器的代码如下：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This code generates the following HTML code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码生成以下HTML代码：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The upper filter
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大写过滤器
- en: 'The code for the upper filter is as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 大写过滤器的代码如下：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This code generates the following HTML code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码生成以下HTML代码：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The capfirst filter
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: capfirst过滤器
- en: 'The capfirst filter transforms the first letter to uppercase. The example with
    the `myvar = "hello"` variable is as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: capfirst过滤器将第一个字母转换为大写。具有`myvar = "hello"`变量的示例如下：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This code generates the following HTML code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码生成以下HTML代码：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The pluralize filter
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复数过滤器
- en: 'The pluralize filter can easily handle plurals. Often, developers choose a
    simple solution for lack of time. The solution is to display channels: *You have
    2 products in your cart*.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 复数过滤器可以轻松处理复数形式。通常，开发人员由于时间不足而选择简单的解决方案。解决方案是显示频道：*您的购物车中有2个产品*。
- en: 'Django simplifies this kind of string. The pluralize filter will add a suffix
    to the end of a word if the variable represents a plural value, shown as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Django简化了这种类型的字符串。如果变量表示复数值，复数过滤器将在单词末尾添加后缀，如下所示：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This channel will show the following three channels if `nb_products` is `1`
    and `2`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`nb_products`为`1`和`2`，则此频道将显示以下三个频道：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The previous code will show the following two chains if `nb_diaries` is `1`
    and `2`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`nb_diaries`为`1`和`2`，则上述代码将显示以下两个链：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the previous example, we used a filter that takes arguments for the first
    time. To set parameters to a filter, you must use the following syntax:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们首次使用了带参数的过滤器。要为过滤器设置参数，必须使用以下语法：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This filter helps to increase the quality of your site. A website looks much
    more professional when it displays correct sentences.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此过滤器有助于提高您网站的质量。当网站显示正确的句子时，它看起来更专业。
- en: The escape and safe to avoid XSS filters
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转义和安全以避免XSS过滤器
- en: 'The XSS filter is used to escape HTML characters. This filter helps prevent
    from XSS attacks. These attacks are based on injecting client-side scripting by
    a hacker. The following is a step-by-step description of an XSS attack:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: XSS过滤器用于转义HTML字符。此过滤器有助于防止XSS攻击。这些攻击是基于黑客注入客户端脚本的。以下是XSS攻击的逐步描述：
- en: The attacker finds a form so that the content will be displayed on another page,
    for example, a comment field of a commercial site.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击者找到一个表单，以便内容将显示在另一个页面上，例如商业网站的评论字段。
- en: The hacker writes JavaScript code to hack using the tag in this form. Once the
    form is submitted, the JavaScript code is stored in the database.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黑客编写JavaScript代码以使用此表单中的标记进行黑客攻击。提交表单后，JavaScript代码将存储在数据库中。
- en: The victim views the page comments and JavaScript runs.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受害者查看页面评论，JavaScript运行。
- en: The risk is more important than a simple `alert()` method to display a message.
    With this type of vulnerability, the hacker can steal session IDs, redirect the
    user to a spoofed site, edit the page, and so on.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 风险比简单的`alert()`方法更重要，以显示消息。使用这种类型的漏洞，黑客可以窃取会话ID，将用户重定向到伪造的网站，编辑页面等。
- en: 'More concretely, the filter changes the following characters:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，过滤器更改以下字符：
- en: '`<` is converted to `&lt;`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<` 被转换为 `&lt;`'
- en: '`>` is converted to `&gt;`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>` 被转换为 `&gt;`'
- en: '`''` is converted to `''`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''` 被转换为 `''`'
- en: '`"` is converted to `&quot;`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"` 被转换为 `&quot;`'
- en: '`&` is converted to `&amp;`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`&` 被转换为 `&amp;`'
- en: We can automatically escape the contents of a block with the `{% autoescape
    %} tag`, which takes the on or off parameter. By default, autoescape is enabled,
    but note that with older versions of Django, autoescape is not enabled.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`{% autoescape %} tag`自动转义块的内容，该标签带有on或off参数。默认情况下，autoescape是启用的，但请注意，在较旧版本的Django中，autoescape未启用。
- en: 'When autoescape is enabled, if we want to define a variable as a variable of
    trust, we can filter it with the safe filter. The following example shows the
    different possible scenarios:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用autoescape时，如果我们想将一个变量定义为可信任的变量，我们可以使用safe过滤器对其进行过滤。以下示例显示了不同的可能场景：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In this example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中：
- en: '`variable1` is escaped by `autoescape`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`variable1`被`autoescape`转义'
- en: '`variable2` is not escaped as it was filtered with safe'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`variable2`没有被转义，因为它被过滤为安全的'
- en: '`variable3` is not escaped because `autoescape` is defined as `off`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`variable3`没有被转义，因为`autoescape`被定义为关闭'
- en: '`variable4` is escaped because it has been filtered with the escape filter'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`variable4`被转义，因为它已经使用转义过滤器进行了过滤'
- en: '`variable5` is escaped because `autoescape` is `off`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`variable5`被转义，因为`autoescape`是关闭的'
- en: The linebreaks filter
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: linebreaks过滤器
- en: 'The linebreaks filter allows you to convert line breaks into an HTML tag. A
    single new line is transformed into the `<br />` tag. A new line followed by a
    blank will become a paragraph break ,`</p>`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: linebreaks过滤器允许您将换行符转换为HTML标记。一个单独的换行符被转换为`<br />`标记。一个换行符后跟一个空格将变成一个段落分隔，`</p>`：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The truncatechars filter
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: truncatechars过滤器
- en: The truncatechars filter allows you to truncate a string from a certain length.
    If this number is exceeded, the string is truncated and Django adds the string
    " `...`".
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: truncatechars过滤器允许您从一定长度截断字符串。如果超过这个数字，字符串将被截断，Django会添加字符串“`...`”。
- en: 'The example of the variable that contains "Welcome in Django " is as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 包含“欢迎来到Django”的变量的示例如下：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This code outputs the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码输出如下：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Creating DRY URLs
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建DRY URL
- en: 'Before learning what a DRY link is, we will first remind you of what an HTML
    link is. Every day, when we go on the Internet, we change a page or website by
    clicking on links. These links are redirected to URLs. The following is an example
    link to [google.com](http://google.com):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习什么是DRY链接之前，我们首先会提醒您HTML链接是什么。每天，当我们上网时，我们通过点击链接来改变页面或网站。这些链接被重定向到URL。以下是一个指向[google.com](http://google.com)的示例链接：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We will create a second page in our application to create the first valid link.
    Add the following line to the `urls.py` file:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的应用程序中创建第二个页面，以创建第一个有效的链接。在`urls.py`文件中添加以下行：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, create a view corresponding to the preceding URL:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个对应于前面URL的视图：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We will create a second template for the new view. Let's duplicate the first
    template and call the copy, `connection.html`, as well as modify `Hello world`
    in `Connection`. We can note that this template does not respect the DRY philosophy.
    This is normal; we will learn how to share code between different templates in
    the next section.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为新视图创建第二个模板。让我们复制第一个模板，并将副本命名为`connection.html`，并修改`Connection`中的`Hello world`。我们可以注意到这个模板不符合DRY哲学。这是正常的；我们将在下一节学习如何在不同模板之间共享代码。
- en: 'We will create an HTML link in our first `index.html` template. This link will
    direct the user to our second view. Our `<article>` tag becomes:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的第一个`index.html`模板中创建一个HTML链接。这个链接将引导用户到我们的第二个视图。我们的`<article>`标签变成了：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now, let's test our site with the development server, and open our browser to
    the URL of our site. By testing the site, we can check whether the link works
    properly. This is a good thing, because now you are able to make a static website
    with Django, and this framework includes a handy tool to manage URLs.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们用开发服务器测试我们的网站，并打开浏览器到我们网站的URL。通过测试网站，我们可以检查链接是否正常工作。这是一个好事，因为现在你能够用Django制作一个静态网站，而且这个框架包含一个方便的工具来管理URL。
- en: Django can never write a link in the `href` property. Indeed, by properly filing
    our `urls.py` file, we can refer to the name of a URL and name address.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Django永远不会在`href`属性中写入链接。事实上，通过正确地填写我们的`urls.py`文件，我们可以引用URL的名称和地址。
- en: 'To do this, we need to change our `urls.py` file that contains the following
    URLs:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要改变包含以下URL的`urls.py`文件：
- en: '[PRE28]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Adding the name property to each of our URLs allows us to use the name of the
    URL to create links. Change your `index.html` template to create a DRY link:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 给我们的每个URL添加name属性可以让我们使用URL的名称来创建链接。修改您的`index.html`模板以创建DRY链接：
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Test the new site again; note that the link still works. But for now, this
    feature is useless to us. If Google decides to improve the indexing of the URLs
    whose addresses end with the name of the website, you will have to change all
    the URLs. To do this with Django, all you will need to do is change the second
    URL as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 再次测试新网站；请注意，链接仍然有效。但是目前，这个功能对我们来说是没有用的。如果Google决定改进以网站名称结尾的URL的索引，您将不得不更改所有的URL。要在Django中做到这一点，您只需要更改第二个URL如下：
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If we test our site again, we can see that the change has been done properly
    and that the change in the `urls.py` file is effective on all the pages of the
    site. When you need to use parameterized URLs, you must use the following syntax
    to integrate the parameters to the URL:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次测试我们的网站，我们可以看到更改已经正确完成，并且`urls.py`文件中的更改对网站的所有页面都有效。当您需要使用参数化URL时，您必须使用以下语法将参数集成到URL中：
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Extending the templates
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展模板
- en: The legacy of templates allows you to define a super template and a subtemplate
    that inherits from the super template. In the super template, it is possible to
    define blocks that subtemplates can fill. This method allows us to respect the
    DRY philosophy by applying the common code to several templates in a super template.
    We will use an example where the `index.html` template will extend the `base.html`
    template.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 模板的传承允许您定义一个超级模板和一个从超级模板继承的子模板。在超级模板中，可以定义子模板可以填充的块。这种方法允许我们通过在超级模板中应用通用代码到多个模板来遵循DRY哲学。我们将使用一个例子，`index.html`模板将扩展`base.html`模板。
- en: 'The following is the `base.html` template code, which we must create in the
    `template` folder:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们必须在`template`文件夹中创建的`base.html`模板代码：
- en: '[PRE32]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the previous code, we defined three areas that the child templates can override:
    `title_html`, `h1`, and `article_content`. The following is the `index.html` template
    code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们定义了子模板可以覆盖的三个区域：`title_html`、`h1`和`article_content`。以下是`index.html`模板代码：
- en: '[PRE33]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In this template, we first use the extends tag, which extends the `base.html`
    template. Then, the block and endblock tags allow us to redefine what is present
    in the `base.html` template. We may change our `connection.html` template in the
    same way so that a change in `base.html` can be made on both templates.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模板中，我们首先使用了extends标签，它扩展了`base.html`模板。然后，block和endblock标签允许我们重新定义`base.html`模板中的内容。我们可以以相同的方式更改我们的`connection.html`模板，这样`base.html`的更改就可以在两个模板上进行。
- en: It is possible to define as many blocks as necessary. We can also create super
    templates that extend themselves to create more complex architectures.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 可以定义尽可能多的块。我们还可以创建超级模板，以创建更复杂的架构。
- en: Using static files in templates
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模板中使用静态文件
- en: Static files such as JavaScript files, CSS, or images are essential to obtain
    an ergonomic website. These files are often stored in a folder, but they can be
    useful to modify this folder under development or in production.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如JavaScript文件、CSS或图像之类的静态文件对于获得人体工程学网站至关重要。这些文件通常存储在一个文件夹中，但在开发或生产中修改此文件夹可能会很有用。
- en: According to the URLs, Django allows us to define a folder containing the static
    files and to easily modify its location when required.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 根据URL，Django允许我们定义一个包含静态文件的文件夹，并在需要时轻松修改其位置。
- en: 'To set the path where Django will look for static files, we have to change
    our `settings.py` file by adding or changing the following line:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置Django查找静态文件的路径，我们必须通过添加或更改以下行来更改我们的`settings.py`文件：
- en: '[PRE34]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We will define a proper architecture for our future static files. It is important
    to choose an early consistent architecture, as it makes the application support
    as well as include another developer easier. Our statics files'' architecture
    is as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们未来的静态文件定义一个合适的架构。选择早期一致的架构非常重要，因为它使应用程序支持以及包括其他开发人员变得更容易。我们的静态文件架构如下：
- en: '[PRE35]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We create a folder for each type of static file and define a `lib` folder for
    JavaScript libraries as jQuery, which we will use later in the book. For example,
    we change our `base.html` file. We will add a CSS file to manage the styles of
    our pages. To do this, we must add the following line between `</ title>` and
    `< / head>`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为每种静态文件创建一个文件夹，并为JavaScript库定义一个`lib`文件夹，如jQuery，我们将在本书中使用。例如，我们更改了我们的`base.html`文件。我们将添加一个CSS文件来管理我们页面的样式。为了做到这一点，我们必须在`</title>`和`</head>`之间添加以下行：
- en: '[PRE36]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To use the tag in our static template, we must also load the system by putting
    the following line before using the static tag:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的静态模板中使用标签，我们还必须通过在使用静态标签之前放置以下行来加载系统：
- en: '[PRE37]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We will create the `style.css` file in the `/static/css` folder. This way, the
    browser won't generate an error later in the development.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`/static/css`文件夹中创建`style.css`文件。这样，浏览器在开发过程中不会生成错误。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to create a template and send data to the templates,
    and how to use the conditions, loops, and filters in the templates. We also discussed
    how to create DRY URLs for a flexible URL structure, expand the templates to meet
    the DRY philosophy, and how to use the static files.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建模板并将数据发送到模板，以及如何在模板中使用条件、循环和过滤器。我们还讨论了如何为灵活的URL结构创建DRY URLs，扩展模板以满足DRY哲学，以及如何使用静态文件。
- en: In the next chapter, we will learn how to structure our data to save it in a
    database.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何结构化我们的数据以保存在数据库中。
