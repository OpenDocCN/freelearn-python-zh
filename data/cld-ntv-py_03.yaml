- en: Building a Web Application in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Python中构建Web应用程序
- en: In the previous chapter, we focused on building our microservices, which is,
    basically, backend RESTful APIs, and testing it to make sure the response will
    be as expected. So far, we have been testing these RESTful APIs using curl, or
    maybe, using a testing framework, that is, nose, unittest2, and so on. In this
    chapter, we will create some HTML pages and write a JavaScript REST client, which
    will interact with microservices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们专注于构建我们的微服务，即基本上是后端RESTful API，并对其进行测试，以确保响应符合预期。到目前为止，我们一直在使用curl测试这些RESTful
    API，或者使用测试框架，如nose、unittest2等。在本章中，我们将创建一些HTML页面，并编写一个JavaScript REST客户端，该客户端将与微服务进行交互。
- en: 'The topics that we will cover in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们将涵盖的主题如下：
- en: Building HTML pages and data binding
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建HTML页面和数据绑定
- en: JavaScript REST client using knockout.js
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用knockout.js的JavaScript REST客户端
- en: In this chapter, we will create a client application which will need to create
    dynamic content that is gathered from an HTML web page and, based on the actions
    of the user, will update the content as a response on the backend service.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个客户端应用程序，该应用程序需要创建从HTML网页收集的动态内容，并根据用户的操作，将其作为对后端服务的响应进行更新。
- en: As a developer, you must have come across many application frameworks that adopt
    the MVC pattern. It is a large category, which is a combination of **MVC** (**Model
    View Controller**), **MVP** (**Model View Presenter)**, and **MVVM** (**Model
    View ViewModel**).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，你一定遇到过许多采用MVC模式的应用程序框架。它是一个大类别，是**MVC**（**Model View Controller**）、**MVP**（**Model
    View Presenter**）和**MVVM**（**Model View ViewModel**）的组合。
- en: In our case, we will use **knockout.js**, which is a library in JavaScript based
    on the MVVM pattern that helps developers build rich and responsive websites.
    It can work as a standalone or used along with other JavaScript libraries, such
    as jQuery. Knockout.js binds the UI with the underlying JavaScript model. The
    models are updated based on the changes in the UI and vice versa, which is basically
    two-way data binding.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们将使用**knockout.js**，这是一个基于MVVM模式的JavaScript库，它帮助开发人员构建丰富和响应式的网站。它可以作为独立使用，也可以与其他JavaScript库一起使用，如jQuery。Knockout.js将UI与底层JavaScript模型绑定在一起。模型根据UI的更改而更新，反之亦然，这基本上是双向数据绑定。
- en: 'In knockout.js, we will be dealing with two important concepts: Binding and
    Observables.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在knockout.js中，我们将处理两个重要的概念：绑定和Observables。
- en: Knockout.js is a JavaScript library that is generally used to develop desktop-like
    web applications. It is useful, as it provides a responsive mechanism that syncs
    with your data sources. It provides a two-way binding mechanism between your data
    model and user interface. Read more about knockout.js at [http://knockoutjs.com/documentation/introduction.html](http://knockoutjs.com/documentation/introduction.html).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Knockout.js是一个通常用于开发类似桌面的Web应用程序的JavaScript库。它非常有用，因为它提供了一种与数据源同步的响应机制。它在数据模型和用户界面之间提供了双向绑定机制。在[http://knockoutjs.com/documentation/introduction.html](http://knockoutjs.com/documentation/introduction.html)上阅读更多关于knockout.js的信息。
- en: In this chapter, we will create web applications to add a user and tweets to
    the database, and validate them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建Web应用程序，以向数据库添加用户和推文，并对其进行验证。
- en: Getting started with applications
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用应用程序
- en: Let's get started with creating a basic HTML template. Create a directory named
    `template` in your app root location; we will create all our future templates
    inside this directory.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建一个基本的HTML模板。在应用程序根目录中创建一个名为`template`的目录；我们将在此目录中创建所有未来的模板。
- en: 'Now, let''s create the basic skeleton for the `adduser.html` file as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们按照以下方式为`adduser.html`文件创建基本骨架：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see in the preceding code, we have specified a couple of `.js` scripts
    that are needed to make our HTML responsive. This is similar to twitter-bootstrap,
    which has a `<meta name="viewport">` attribute to help scale the page based on
    the browser dimensions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在前面的代码中，我们指定了一些`.js`脚本，这些脚本是需要的，以使我们的HTML具有响应性。这类似于twitter-bootstrap，它有一个`<meta
    name="viewport">`属性，可以根据浏览器尺寸来缩放页面。
- en: Creating application users
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序用户
- en: 'Before we start writing our web page, we need to create a route to create a
    user, as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写网页之前，我们需要创建一个用于创建用户的路由，如下所示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that we have created the route, let''s create a form in `adduser.html`,
    which will ask for the required information related to the user and help them
    submit the information:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了路由，让我们在`adduser.html`中创建一个表单，该表单将要求用户提供与用户相关的必要信息，并帮助他们提交信息：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Currently, the preceding HTML page shows only empty fields, and if you try to
    submit it with data, it won't work, since no data binding is done with the backend
    service as yet.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，前面的HTML页面只显示空字段，如果尝试提交带有数据的表单，它将无法工作，因为尚未与后端服务进行数据绑定。
- en: Now we are ready to create JavaScript, which will make a REST call to the backend
    service, and add the user content provided from the HTML page.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备创建JavaScript，它将向后端服务发出REST调用，并添加来自HTML页面提供的用户内容。
- en: Working with Observables and AJAX
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Observables和AJAX
- en: In order to get the data from the RESTful API, we will use AJAX. Observables
    keep a track of the changes made on the data and reflect them, automatically,
    on all the locations where it is used and defined by `ViewModel`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从RESTful API获取数据，我们将使用AJAX。Observables跟踪数据的更改，并自动在所有使用和由`ViewModel`定义的位置上反映这些更改。
- en: By using Observables, it becomes very easy to make the UI and `ViewModel` communicate
    dynamically.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Observables，使UI和`ViewModel`动态通信变得非常容易。
- en: 'Let''s create a file named `app.js`, which has Observables declared, inside
    the static directory with the following code--if the directory does not exist,
    create it:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`app.js`的文件，在静态目录中声明了Observables，代码如下——如果目录不存在，请创建它：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: I understand it's a lot of code; let's understand the usage of each part of
    the preceding code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这是很多代码；让我们了解前面代码的每个部分的用法。
- en: 'When you submit your content on the HTML page, a request will be received at
    `app.js`, and the following code will handle the request:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在HTML页面上提交内容时，请求将在`app.js`接收，并且以下代码将处理请求：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It creates the model and sends the content to the following function:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 它创建模型并将内容发送到以下函数：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding `addUser` function calls the `self.save` function with a passing
    data object. The `save` function makes an AJAX RESTful call to the backend services
    and performs the `POST` operation with the data gathered from the HTML pages.
    It then clears the content of the HTML pages as well.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`addUser`函数调用`self.save`函数，并传递数据对象。`save`函数通过AJAX RESTful调用后端服务，并执行从HTML页面收集的数据的`POST`操作。然后清除HTML页面的内容。
- en: Our work is not yet done. As we mentioned earlier, it is two-way data binding,
    so we need to send the data from the HTML side as well, so that it can be processed
    further in the database.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的工作还没有完成。正如我们之前提到的，这是双向数据绑定，因此我们需要从HTML端发送数据，以便在数据库中进一步处理。
- en: 'In the script section, add the following line, which will identify the `.js`
    file path:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本部分中，添加以下行，它将识别`.js`文件路径：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Binding data for the adduser template
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为adduser模板绑定数据
- en: Data binding is useful to bind your data with the UI. The property from the
    UI will be processed only for the first time if we do not use Observables. In
    this case, it cannot update automatically based on the underlying data update.
    To achieve this, bindings must be referred to the Observable properties.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 数据绑定对将数据与UI绑定很有用。如果我们不使用Observables，UI中的属性只会在第一次处理时被处理。在这种情况下，它无法根据底层数据更新自动更新。为了实现这一点，绑定必须引用Observable属性。
- en: 'Now we need to bind our data with the form and its field, as shown in the following
    code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要将我们的数据与表单及其字段绑定，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now we are ready to add our users through the template. However, how will we
    validate whether the user is added successfully to our database or not? One way
    would be to manually log in to the database. However, since we are working on
    a web application, let's show our data (present in the database) on the web page
    itself--even the newly added entries.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备通过模板添加我们的用户。但是，我们如何验证用户是否成功添加到我们的数据库呢？一种方法是手动登录到数据库。但是，由于我们正在开发Web应用程序，让我们在网页上显示我们的数据（存在于数据库中）--甚至是新添加的条目。
- en: 'In order to read the database and get the user list, add the following code
    to `app.js`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了读取数据库并获取用户列表，将以下代码添加到`app.js`中：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we need to make changes in `adduser.html` to show our user list. For that,
    let''s add the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在`adduser.html`中进行更改，以显示我们的用户列表。为此，让我们添加以下代码：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Awesome! We are done with adding the web page which will create new users for
    our application. It will look something like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们已经完成了添加网页，它将为我们的应用程序创建新用户。它看起来会像这样：
- en: '![](img/00043.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00043.jpeg)'
- en: Creating tweets from users
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从用户创建推文
- en: 'Before we start writing our web page, we need to create a route to create tweets.
    This can be done as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写网页之前，我们需要创建一个用于创建推文的路由。可以按以下方式完成：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now that, we have created the route, let''s create another form in `addtweets.html`,
    which will ask the user for the required information related to tweets, and help
    them submit the information:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经创建了路由，让我们在`addtweets.html`中创建另一个表单，该表单将要求用户提供与推文相关的必需信息，并帮助他们提交信息：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that currently, this form doesn't have data binding to communicate with
    the RESTful services.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当前此表单没有数据绑定以与RESTful服务通信。
- en: Working on Observables with AJAX for the addtweet template
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AJAX处理addtweet模板的Observables
- en: Let's develop a JavaScript that will make a REST call to the backend service
    and add the tweet content provided from the HTML page.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开发一个JavaScript，它将对后端服务进行REST调用，并添加来自HTML页面的推文内容。
- en: 'Let''s create a file with the name `tweet.js` inside the static directory that
    we created earlier with the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在之前创建的静态目录中创建一个名为`tweet.js`的文件，并使用以下代码：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Let's understand the usage of each part of this last code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解最后一段代码的每个部分的用法。
- en: 'When you submit your content on the HTML page, a request will come to `tweet.js`,
    and the following part of the code will handle the request:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在HTML页面上提交内容时，请求将发送到`tweet.js`，代码的以下部分将处理请求：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding code snippet creates the model and sends the content to the following
    function:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段创建模型并将内容发送到以下函数：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding `addTweet` function calls the `self.save` function with a passing
    data object. The save function makes an AJAX RESTful call to the backend services,
    and performs the `POST` operation with the data gathered from the HTML pages.
    It then clears the content of the HTML pages as well.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`addTweet`函数调用`self.save`函数，并传递数据对象。保存函数通过AJAX RESTful调用后端服务，并执行从HTML页面收集的数据的`POST`操作。然后清除HTML页面的内容。
- en: 'In order to show data on the web page, and to keep the data on it in sync with
    the data in the backend service, the following code is needed:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在网页上显示数据，并使其与后端服务中的数据保持同步，需要以下代码：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Our work is not yet done. As we mentioned earlier, it is two-way data binding,
    so, we will need to send the data from the HTML side as well, so that it can be
    processed further in the database.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的工作还没有完成。正如我们之前提到的，这是双向数据绑定，因此我们还需要从HTML端发送数据，以便在数据库中进一步处理。
- en: 'In the script section, add the following line, which will identify the `.js`
    file with the path:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本部分中，添加以下行，它将使用路径标识`.js`文件：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Data binding for the addtweet template
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为addtweet模板绑定数据
- en: 'Once this is done, we need to now bind our data with the form and its field,
    as shown in the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们现在需要将我们的数据与表单及其字段绑定，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now we are ready to add our tweet through the template. We perform validation
    for tweets just as we performed validation for users.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备通过模板添加我们的推文。我们对推文进行验证，就像我们对用户进行验证一样。
- en: 'In order to read the database and get the tweet list, add the following code
    to `tweet.js`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了读取数据库并获取推文列表，请将以下代码添加到`tweet.js`中：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, we need to make changes in `addtweets.html` to show our tweet list. For
    that, let''s add the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在`addtweets.html`中进行更改，以显示我们的推文列表。为此，让我们添加以下代码：
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Awesome! Let''s test it out. It will look something like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！让我们来测试一下。它看起来会像这样：
- en: '![](img/00044.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00044.jpeg)'
- en: In a similar fashion, you can extend this use case by deleting users from the
    web page application, or can update user information in the backend services.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，您可以通过从网页应用程序中删除用户或在后端服务中更新用户信息来扩展此用例。
- en: Also, to know more about the knockout.js library, go through the live examples
    at [http://knockoutjs.com/examples/helloWorld.html](http://knockoutjs.com/examples/helloWorld.html),
    which will help you gain a better understanding, and help you with implementing
    it in your application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，要了解更多关于knockout.js库的信息，请查看[http://knockoutjs.com/examples/helloWorld.html](http://knockoutjs.com/examples/helloWorld.html)上的实时示例，这将帮助您更好地理解，并帮助您在应用程序中实施它。
- en: We created these web pages to make sure our microservices work and to give you
    an understanding about how a web application is developed generally; and, as developers,
    we can create these web applications based on our own use case as well.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了这些网页，以确保我们的微服务工作，并让您了解通常如何开发Web应用程序；作为开发人员，我们也可以根据自己的用例创建这些Web应用程序。
- en: CORS - Cross-Origin Resource Sharing
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CORS - 跨源资源共享
- en: CORS helps maintain data integrity between the API server and the client for
    the API request.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: CORS有助于在API请求的API服务器和客户端之间维护数据完整性。
- en: The idea behind using CORS is that the server and client should have enough
    information about each other so that they can authenticate each other, and transfer
    data over a secure channel using the HTTP header.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CORS的想法是，服务器和客户端应该彼此具有足够的信息，以便它们可以相互验证，并使用HTTP标头在安全通道上传输数据。
- en: When a client makes an API call, it is either a GET or POST request, where the
    body is usually text/plain with headers called **Origin**--this includes protocol,
    domain name, and port with respect to the requesting page. When the server acknowledges
    the request, and sends the response along with the `Access-Control-Allow-Origin`
    header to the same Origin, it makes sure the response is received at the correct
    Origin.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端发出API调用时，它要么是GET请求，要么是POST请求，其中body通常是text/plain，带有名为**Origin**的标头--这包括与请求页面相关的协议、域名和端口。当服务器确认请求并发送响应以及`Access-Control-Allow-Origin`标头到相同的Origin时，它确保响应被正确接收到相应的Origin。
- en: In this way, resource sharing happens between Origins.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，在不同来源之间进行资源共享。
- en: Almost all browsers now support CORS, which includes IE 8+, Firefox 3.5+, and
    Chrome.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有浏览器现在都支持CORS，包括IE 8+、Firefox 3.5+和Chrome。
- en: Now, since we have the web application ready, but it is not CORS-enabled yet,
    let's enable it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然我们已经准备好了Web应用程序，但它还没有启用CORS，让我们启用它。
- en: 'Firstly, you need to install the module for CORS in Flask using the following
    command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要使用以下命令在Flask中安装CORS模块：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The preceding package exposes a Flask extension which, by default, enables
    CORS support on all the routes for all Origins and methods. Once the package is
    installed, let''s include it in `app.py` as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的包公开了一个Flask扩展，该扩展默认情况下在所有路由上为所有来源和方法启用CORS支持。安装了该包后，让我们在`app.py`中包含它，如下所示：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To enable CORS, you need to add the following line:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用CORS，您需要添加以下行：
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: That's it. Now this CORS is enabled for all the resources in your Flask application.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在，您的Flask应用程序中的所有资源都已启用CORS。
- en: 'In case you want to enable CORS on specific resources, then add the following
    code with your specific resource:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在特定资源上启用CORS，则添加以下代码与您的特定资源：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Currently, we don''t have a domain setup, but we are working at the localhost
    level. You can test CORS by adding a custom domain in the domain name server as
    follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们还没有设置域，但我们正在本地主机级别工作。您可以通过在域名服务器中添加自定义域来测试CORS，如下所示：
- en: '[PRE24]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, if you try to access this `<your-domain-name>`, it should be able to work
    properly with this domain name, and you will be able to access the resource.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您尝试访问此`<your-domain-name>`，它应该能够正常使用此域名，并且您将能够访问资源。
- en: Session management
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话管理
- en: Sessions are a sequence of request and response transactions associated with
    a single user. The sessions are usually maintained on the server level by authenticating
    the user and keeping track of his/her activity over the web page.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 会话是与单个用户关联的一系列请求和响应事务。会话通常是通过对用户进行身份验证并跟踪他/她在网页上的活动来在服务器级别上维护的。
- en: Session with each client is assigned a session ID. Sessions are generally stored
    on top of cookies and the server signs them cryptographically--they are decrypted
    by the Flask application using the secret key for a temporary duration.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 每个客户端的会话都分配了一个会话ID。会话通常存储在cookie之上，并且服务器使用秘钥对它们进行加密--Flask应用程序使用临时持续时间的秘钥对其进行解密。
- en: Currently, we haven't set up authentication--we will be defining it in [Chapter
    8](part0145.html#4A91I0-4022ecb0f8ea4b719ffb742bf2a6a072), *Securing the Web Application*.
    So, at this point in time, we will create the session by asking about the username
    accessing the web page and making sure that the user is identified using the sessions.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们还没有设置身份验证--我们将在[第8章](part0145.html#4A91I0-4022ecb0f8ea4b719ffb742bf2a6a072)中定义它，*保护Web应用程序*。因此，在这个时间点上，我们将通过询问访问网页的用户名并确保用户使用会话标识来创建会话。
- en: 'Now let''s create a web page, say, `main.html`, which will have a URL to create
    the session if it is needed to be set up, and routes to perform operations on
    the backend services. You could clear the session if it already exists. See the
    following code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个名为`main.html`的网页，其中将包含一个URL来创建会话（如果需要设置），以及用于在后端服务上执行操作的路由。如果会话已经存在，您可以清除会话。请参阅以下代码：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Currently in this web page, a few URLs, such as `clearsession` and `addname`
    won't work, since we haven't set up the web page and route for them.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当前在这个网页中，一些URL，如`clearsession`和`addname`不会工作，因为我们还没有为它们设置网页和路由。
- en: 'Also, we haven''t set up the route for the `main.html` web page; let''s first
    add it in `app.py`, as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们还没有为`main.html`网页设置路由；让我们首先在`app.py`中添加它，如下所示：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Since we have added the route for `main.html`, let''s add the route for `addname`
    in `app.py`, as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经为`main.html`设置了路由，让我们在`app.py`中为`addname`添加路由，如下所示：
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'As you can see in the preceding route, it calls `addname.html`, which we haven''t
    created yet. Let''s create the `addname` template with the following code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的路由中所看到的，它调用了`addname.html`，而我们还没有创建它。让我们使用以下代码创建`addname`模板：
- en: '[PRE28]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Great! Now we can set the session using the preceding code; you will see a
    web page that looks something like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们可以使用前面的代码设置会话；您将看到一个类似于这样的网页：
- en: '![](img/00045.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00045.jpeg)'
- en: 'Now, what if we need to clear sessions? Since we are already calling the `clearsession`
    function from the main web page, we need to create a route in `app.py`, which
    further calls the session''s `Clear` inbuilt function as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们需要清除会话怎么办？由于我们已经从主网页调用了`clearsession`函数，我们需要在`app.py`中创建一个路由，进一步调用会话的`Clear`内置函数，如下所示：
- en: '[PRE29]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This is how we can set the session, maintain it for users, and clear the session,
    as per the requirement.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们如何设置会话，为用户保持会话，并根据需要清除会话。
- en: Cookies
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cookies
- en: Cookies are similar to sessions, other than the fact that they are maintained
    on the client computer in the form of a text file; whereas, sessions are maintained
    on the server side.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Cookies类似于会话，除了它们以文本文件的形式保存在客户端计算机上；而会话则保存在服务器端。
- en: Their main purpose is to keep track of the client's usage and, based on their
    activity, improve the experience by understanding the cookies.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的主要目的是跟踪客户端的使用情况，并根据他们的活动通过了解cookies来改善体验。
- en: The cookies attribute is stored in the response object, which is a collection
    of key-value pairs that have cookies, variables, and their respective values.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: cookies属性存储在响应对象中，它是一个键值对的集合，其中包含cookies、变量及其相应的值。
- en: 'We can set the cookies using the `set_cookie()` function of the response object
    to store a cookie as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用响应对象的`set_cookie()`函数设置cookies，以存储cookie，如下所示：
- en: '[PRE30]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Similarly, reading cookies is pretty easy; the `get()` function will help you
    get the cookies if it is already set, as shown here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，读取cookies非常容易；`get()`函数将帮助您获取cookies，如下所示：
- en: '[PRE31]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: If the cookie exists, it will get assigned to the cookie, and if not, then the
    cookie will return `None`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果cookie存在，它将被分配给cookie，如果不存在，则cookie将返回`None`。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to integrate your microservices with the web
    application using a JavaScript library such as knockout.js. You learned about
    the MVVM pattern, and how these can be helpful to create fully developed web applications.
    You also learned user management concepts, such as cookies and sessions, and how
    to make use of them.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用JavaScript库（如knockout.js）将您的微服务与Web应用程序集成。您了解了MVVM模式，以及如何利用它们来创建完全开发的Web应用程序。您还学习了用户管理概念，如cookies和会话，以及如何利用它们。
- en: In the next chapter, we will try to make our database side stronger and secure
    by moving it from SQLite to other NoSQL database services, such as MongoDB.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将尝试通过将数据库从SQLite移动到其他NoSQL数据库服务（如MongoDB）来加强和保护我们的数据库端。
