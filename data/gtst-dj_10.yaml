- en: Chapter 10. The Authentication Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。认证模块
- en: 'The authentication module saves a lot of time in creating space for users.
    The following are the main advantages of this module:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 认证模块在为用户创建空间时节省了大量时间。以下是该模块的主要优势：
- en: The main actions related to users are simplified (connection, account activation,
    and so on)
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与用户相关的主要操作得到了简化（连接、帐户激活等）
- en: Using this system ensures a certain level of security
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用该系统可以确保一定级别的安全性
- en: Access restrictions to pages can be done very easily
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面的访问限制可以很容易地完成
- en: It's such a useful module that we have already used it without noticing. Indeed,
    access to the administration module is performed by the authentication module.
    The user we created during the generation of our database was the first user of
    the site.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常有用的模块，我们甚至在不知不觉中已经使用了它。事实上，对管理模块的访问是通过认证模块执行的。我们在生成数据库时创建的用户是站点的第一个用户。
- en: 'This chapter greatly alters the application we wrote earlier. At the end of
    this chapter, we will have:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章大大改变了我们之前编写的应用程序。在本章结束时，我们将有：
- en: Modified our UserProfile model to make it compatible with the module
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改我们的UserProfile模型，使其与模块兼容
- en: Created a login page
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个登录页面
- en: Modified the addition of developer and supervisor pages
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改了添加开发人员和监督员页面
- en: Added the restriction of access to connected users
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加对连接用户的访问限制
- en: How to use the authentication module
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用认证模块
- en: In this section, we will learn how to use the authentication module by making
    our application compatible with the module.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何通过使我们的应用程序与模块兼容来使用认证模块。
- en: Configuring the Django application
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Django应用程序
- en: There is normally nothing special to do for the administration module to work
    in our `TasksManager` application. Indeed, by default, the module is enabled and
    allows us to use the administration module. However, it is possible to work on
    a site where the web Django authentication module has been disabled. We will check
    whether the module is enabled.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我们不需要为管理模块在我们的`TasksManager`应用程序中工作做任何特殊的操作。事实上，默认情况下，该模块已启用，并允许我们使用管理模块。但是，可能会在禁用了Web
    Django认证模块的站点上工作。我们将检查模块是否已启用。
- en: 'In the `INSTALLED_APPS` section of the `settings.py` file, we have to check
    the following line:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在`settings.py`文件的`INSTALLED_APPS`部分中，我们必须检查以下行：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Editing the UserProfile model
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑UserProfile模型
- en: The authentication module has its own User model. This is also the reason why
    we have created a `UserProfile` model and not just User. It is a model that already
    contains some fields, such as nickname and password. To use the administration
    module, you have to use the User model on the `Python33/Lib/site-package/django/contrib/auth/models.py`
    file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 认证模块有自己的用户模型。这也是我们创建`UserProfile`模型而不仅仅是用户的原因。它是一个已经包含一些字段的模型，比如昵称和密码。要使用管理模块，必须在`Python33/Lib/site-package/django/contrib/auth/models.py`文件中使用用户模型。
- en: 'We will modify the `UserProfile` model in the `models.py` file that will become
    the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改`models.py`文件中的`UserProfile`模型，将其变为以下内容：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We must also add the following line in `models.py`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须在`models.py`中添加以下行：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this new model, we have:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个新模型中，我们有：
- en: Created a `OneToOneField` relationship with the user model we imported
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了与导入的用户模型的`OneToOneField`关系
- en: Deleted the fields that didn't exist in the user model
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除了用户模型中不存在的字段
- en: The `OneToOne` relation means that for each recorded `UserProfile` model, there
    will be a record of the User model. In doing all this, we deeply modify the database.
    Given these changes and because the password is stored as a hash, we will not
    perform the migration with South.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`OneToOne`关系意味着对于每个记录的`UserProfile`模型，都会有一个用户模型的记录。在做所有这些的过程中，我们深度修改了数据库。鉴于这些变化，并且因为密码以哈希形式存储，我们将不使用South进行迁移。'
- en: 'It is possible to keep all the data and do a migration with South, but we should
    develop a specific code to save the information of the `UserProfile` model to
    the User model. The code should also generate a hash for the password, but it
    would be long and it is not the subject of the book. To reset South, we must do
    the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 可以保留所有数据并使用South进行迁移，但是我们应该开发一个特定的代码来将`UserProfile`模型的信息保存到用户模型中。该代码还应该为密码生成哈希，但这将是很长的过程，而且不是本书的主题。要重置South，我们必须执行以下操作：
- en: Delete the `TasksManager/migrations` folder and all the files contained in this
    folder
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除`TasksManager/migrations`文件夹以及该文件夹中包含的所有文件
- en: Delete the `database.db` file
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除`database.db`文件
- en: 'To use the migration system, we have to use the following commands already
    used in the chapter about models:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用迁移系统，我们必须使用关于模型的章节中已经使用过的以下命令：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After the deletion of the database, we must remove the initial data in `create_developer.py`.
    We must also delete the URL `developer_detail` and the following line in `index.html`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 删除数据库后，我们必须删除`create_developer.py`中的初始数据。我们还必须删除`developer_detail`的URL和`index.html`中的以下行：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Adding a user
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加用户
- en: 'The pages that allow you to add a developer and supervisor no longer work because
    they are not compatible with our recent changes. We will change these pages to
    integrate our style changes. The view contained in the `create_supervisor.py`
    file will contain the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 允许您添加开发人员和监督员的页面不再起作用，因为它们与我们最近的更改不兼容。我们将更改这些页面以整合我们的样式更改。`create_supervisor.py`文件中包含的视图将包含以下代码：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `create_supervisor.html` template remains the same, as we are using a Django
    form.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`create_supervisor.html`模板保持不变，因为我们正在使用Django表单。'
- en: 'You can change the `page()` method in the `create_developer.py` file to make
    it compatible with the authentication module (you can refer to downloadable Packt
    code files for further help):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以更改`create_developer.py`文件中的`page()`方法，使其与认证模块兼容（您可以参考可下载的Packt代码文件以获得进一步的帮助）：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can also modify `developer_list.html` with the following content:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以修改`developer_list.html`，内容如下：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Login and logout pages
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录和注销页面
- en: 'Now that you can create users, you must create a login page to allow the user
    to authenticate. We must add the following URL in the `urls.py` file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以创建用户，必须创建一个登录页面，以允许用户进行身份验证。我们必须在`urls.py`文件中添加以下URL：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You must then create the `connection.py` view with the following code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您必须创建`connection.py`视图，并使用以下代码：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You must then create the `connection.html` template with the following code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您必须创建`connection.html`模板，并使用以下代码：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When the user logs in, Django will save his/her data connection in session variables.
    This example has allowed us to verify that the audit login and password was transparent
    to the user. Indeed, the `authenticate()` and `login()` methods allow the developer
    to save a lot of time. Django also provides convenient shortcuts for the developer
    such as the `user.is_authenticated` attribute that checks if the user is logged
    in. Users prefer when a logout link is present on the website, especially when
    connecting from a public computer. We will now create the logout page.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户登录时，Django将在会话变量中保存他/她的数据连接。此示例已经允许我们验证登录和密码对用户是透明的。确实，`authenticate()`和`login()`方法允许开发人员节省大量时间。Django还为开发人员提供了方便的快捷方式，例如`user.is_authenticated`属性，用于检查用户是否已登录。用户更喜欢网站上有注销链接，特别是在从公共计算机连接时。我们现在将创建注销页面。
- en: 'First, we need to create the `logout.py` file with the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建带有以下代码的`logout.py`文件：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the previous code, we imported the `logout()` function of the authentication
    module and used it with the request object. This function will remove the user
    identifier of the request object, and delete flushes their session data.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的代码中，我们导入了身份验证模块的`logout()`函数，并将其与请求对象一起使用。此函数将删除请求对象的用户标识符，并删除其会话数据。
- en: 'When the user logs out, he/she needs to know that the site was actually disconnected.
    Let''s create the following template in the `logout.html` file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户注销时，他/她需要知道网站实际上已断开连接。让我们在`logout.html`文件中创建以下模板：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Restricting access to the connected members
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制对已连接成员的访问
- en: When developers implement an authentication system, it's usually to limit access
    to anonymous users. In this section, we'll see two ways to control access to our
    web pages.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发人员实现身份验证系统时，通常是为了限制匿名用户的访问。在本节中，我们将看到控制对我们网页访问的两种方式。
- en: Restricting access to views
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制对视图的访问
- en: The authentication module provides simple ways to prevent anonymous users from
    accessing some pages. Indeed, there is a very convenient decorator to restrict
    access to a view. This decorator is called `login_required`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证模块提供了简单的方法来防止匿名用户访问某些页面。确实，有一个非常方便的装饰器来限制对视图的访问。这个装饰器称为`login_required`。
- en: 'In the example that follows, we will use the designer to limit access to the
    `page()` view from the `create_developer` module in the following manner:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '在接下来的示例中，我们将使用设计师以以下方式限制对`create_developer`模块中的`page()`视图的访问： '
- en: 'First, we must import the decorator with the following line:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须使用以下行导入装饰器：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, we will add the decorator just before the declaration of the view:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将在视图声明之前添加装饰器：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With the addition of these two lines, the page that lets you add a developer
    is only available to the logged-in users. If you try to access the page without
    being connected, you will realize that it is not very practical because the obtained
    page is a 404 error. To improve this, simply tell Django what the connection URL
    is by adding the following line in the `settings.py` file:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加这两行，只有已登录用户才能访问添加开发人员的页面。如果尝试在未连接的情况下访问页面，您将意识到这并不是很实用，因为获得的页面是404错误。要改进此问题，只需告诉Django连接URL是什么，通过在`settings.py`文件中添加以下行：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With this line, if the user tries to access a protected page, he/she will be
    redirected to the login page. You may have noticed that if you're not logged in
    and you click the **Create a developer** link, the URL contains a parameter named
    next. The following is the screen capture of the URL:![Restricting access to views](img/00027.jpeg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过这一行，如果用户尝试访问受保护的页面，他/她将被重定向到登录页面。您可能已经注意到，如果您未登录并单击**创建开发人员**链接，则URL包含一个名为next的参数。以下是URL的屏幕截图：![限制对视图的访问](img/00027.jpeg)
- en: 'This parameter contains the URL that the user tried to consult. The authentication
    module redirects the user to the page when he/she connects. To do this, we will
    modify the `connection.py` file we created. We add the line that imports the `render()`
    function to import the `redirect()` function:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此参数包含用户尝试查看的URL。身份验证模块在用户连接时将用户重定向到该页面。为此，我们将修改我们创建的`connection.py`文件。我们添加导入`render()`函数以导入`redirect()`函数的行：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To redirect the user after they log in, we must add two lines after the line
    that contains the code login (request, user). There are two lines to be added:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在用户登录后重定向用户，我们必须在包含代码login(request, user)的行之后添加两行。需要添加两行：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This system is very useful when the user session has expired and he/she wants
    to see a specific page.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户会话已过期并且希望查看特定页面时，此系统非常有用。
- en: Restricting access to URLs
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制对URL的访问
- en: The system that we have seen does not simply limit access to pages generated
    by CBVs. For this, we will use the same decorator, but this time in the `urls.py`
    file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所见的系统不仅仅限制对CBV生成的页面的访问。为此，我们将使用相同的装饰器，但这次是在`urls.py`文件中。
- en: 'We will add the following line to import the decorator:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加以下行以导入装饰器：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We need to change the line that corresponds to the URL named `create_project`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更改对应于名为`create_project`的URL的行：
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The use of the `login_required` decorator is very simple and allows the developer
    to not waste too much time.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`login_required`装饰器非常简单，可以让开发人员不浪费太多时间。
- en: Summary
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we modified our application to make it compatible with the
    authentication module. We created pages that allow the user to log in and log
    out. We then learned how to restrict access to some pages for the logged in users.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们修改了我们的应用程序，使其与认证模块兼容。我们创建了允许用户登录和注销的页面。然后，我们学习了如何限制已登录用户对某些页面的访问。
- en: In the next chapter, we will improve the usability of the application with the
    addition of AJAX requests. We will learn the basics of jQuery and then learn how
    to use it to make an asynchronous request to the server. Also, we will learn how
    to handle the response from the server.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过添加AJAX请求来提高应用程序的可用性。我们将学习jQuery的基础知识，然后学习如何使用它来向服务器发出异步请求。此外，我们还将学习如何处理来自服务器的响应。
