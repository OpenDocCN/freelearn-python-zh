- en: Maintenance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维护
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating and restoring MySQL database backups
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和恢复MySQL数据库备份
- en: Creating and restoring PostgreSQL database backups
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和恢复PostgreSQL数据库备份
- en: Setting up cron jobs for regular tasks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为常规任务设置cron作业
- en: Logging events for further introspection
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录事件以进行进一步审查
- en: Getting detailed error reporting via email
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过电子邮件获取详细的错误报告
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: At this point, you should have one or more Django projects developed and published.
    For the final steps of the development cycle, we will take a look at how to maintain
    your projects and monitor them for optimization. Stay tuned for the final bits
    and pieces!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您应该已经开发和发布了一个或多个Django项目。在开发周期的最后阶段，我们将看看如何维护您的项目并监视它们以进行优化。敬请关注最后的细节和片段！
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To work with the code of this chapter, you will need the latest stable version
    of Python, MySQL, or PostgreSQL database and a Django project with a virtual environment.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用本章的代码，您需要最新稳定版本的Python、MySQL或PostgreSQL数据库以及一个带有虚拟环境的Django项目。
- en: You can find all of the code for this chapter in the `ch13` directory of the
    GitHub repository: [https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub存储库的`ch13`目录中找到本章的所有代码：[https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition)。
- en: Creating and restoring MySQL database backups
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和恢复MySQL数据库备份
- en: For website stability, it is very important to be able to recover from hardware
    failures and hacker attacks. Therefore, you should always make backups and make
    sure that they work. Your code and static files will usually reside in version
    control from which it can be recovered, but database and media files should be
    backed up regularly.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了网站的稳定性，能够从硬件故障和黑客攻击中恢复是非常重要的。因此，您应该始终进行备份并确保它们有效。您的代码和静态文件通常会驻留在版本控制中，可以从中恢复，但数据库和媒体文件应定期备份。
- en: In this recipe, we will show you how to create backups for MySQL databases.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将向您展示如何为MySQL数据库创建备份。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have a working Django project running with a MySQL database. Deploy
    that project to a remote production (or staging) server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的Django项目正在运行一个MySQL数据库。将该项目部署到远程生产（或暂存）服务器。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'To back up and restore your MySQL database, perform these steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要备份和恢复您的MySQL数据库，请执行以下步骤：
- en: 'Under the `commands` directory in your project''s home directory, create a
    bash script: `backup_mysql_db.sh`. Start the script with variable and function
    definitions, as follows:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的主目录下的`commands`目录中，创建一个bash脚本：`backup_mysql_db.sh`。按照以下方式开始脚本，包括变量和函数定义：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, add commands to create a dump of the database structure and data:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加命令来创建数据库结构和数据的转储：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add commands to compress the database dump and to create a symbolic link, `latest.sql.gz`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加命令来压缩数据库转储并创建一个符号链接`latest.sql.gz`：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finalize the script by logging the time taken to execute the previous commands:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过记录执行前面命令所花费的时间来完成脚本：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the same directory, create a bash script, `restore_mysql_db.sh`, with the
    following content:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一目录中，创建一个名为`restore_mysql_db.sh`的bash脚本，内容如下：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Make both scripts executable:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使这两个脚本都可执行：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the database backup script:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行数据库备份脚本：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the database restoration script (with caution if in production):'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行数据库恢复脚本（如果在生产中请谨慎）：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The backup script will create backup files under `/home/myproject/db_backups/` and
    will save the log at `/home/myproject/logs/backup_mysql_db.log`, similar to this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 备份脚本将在`/home/myproject/db_backups/`目录下创建备份文件，并将日志保存在`/home/myproject/logs/backup_mysql_db.log`，类似于这样：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If the operation is successful, the script will return exit code `0`; otherwise,
    the exit code will be the number of errors while executing the script. And the
    log file will show the error messages.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作成功，脚本将返回退出代码`0`；否则，退出代码将是执行脚本时的错误数量。日志文件将显示错误消息。
- en: In the `db_backups` directory, there will be one compressed SQL backup with
    the day of the week, such as `0-Sunday.sql.gz`, `1-Monday.sql.gz`, and so on, and
    another file, a symbolic link actually, called `latest.sql.gz`. The weekday-based
    backup allows you to have recent backups of the last 7 days when set properly
    under cron jobs, and the symbolic link allows you to quickly or automatically
    transfer the latest backup to another computer via SSH.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在`db_backups`目录中，将有一个带有星期几的压缩SQL备份，例如`0-Sunday.sql.gz`，`1-Monday.sql.gz`等，以及另一个文件，实际上是一个符号链接，名为`latest.sql.gz`。基于工作日的备份允许您在正确设置cron作业时拥有最近7天的备份，并且符号链接允许您快速或自动将最新备份传输到另一台计算机上通过SSH。
- en: Note that we take the database credentials from the Django settings and then
    use them in the bash script.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们从Django设置中获取数据库凭据，然后在bash脚本中使用它们。
- en: We are dumping all data except the sessions table because the sessions are temporary
    anyway and very memory-consuming.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在转储除了会话表之外的所有数据，因为会话本来就是临时的，而且占用内存很多。
- en: 'When we run the `restore_mysql_db.sh` script, we get output like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`restore_mysql_db.sh`脚本时，我们会得到如下输出：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: See also
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*部署*中的*在Apache上使用mod_wsgi部署生产环境*配方'
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)**, Deployment**
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)**部署**中的*在Nginx和Gunicorn上部署生产环境*配方'
- en: The *Creating and restoring PostgreSQL database backups* recipe
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建和恢复PostgreSQL数据库备份*配方'
- en: The *Setting up cron jobs for regular tasks* recipe
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为常规任务设置cron作业*配方'
- en: Creating and restoring PostgreSQL database backups
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和恢复PostgreSQL数据库备份
- en: In this recipe, you will learn how to back up PostgreSQL databases and recover
    them in the event of hardware failure or hacker attacks.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您将学习如何备份PostgreSQL数据库，并在硬件故障或黑客攻击发生时恢复它们。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure to have a working Django project running with a PostgreSQL database.
    Deploy that project to a remote staging or production server.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 确保已经运行了一个带有PostgreSQL数据库的Django项目。将该项目部署到远程暂存或生产服务器。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作方法
- en: 'To back up and restore your MySQL database, perform these steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要备份和恢复MySQL数据库，请执行以下步骤：
- en: 'Under the `commands` directory in your project''s home directory, create a
    bash script, `backup_postgresql_db.sh`. Start the script with variable and function
    definitions, as follows:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的主目录下的`commands`目录中，创建一个名为`backup_postgresql_db.sh`的bash脚本。开始脚本时，定义变量和函数，如下所示：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, add a command to create a database dump:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加一个命令以创建数据库转储：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add commands to compress the database dump and create a symbolic link, `latest.backup.gz`,
    to it:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加命令以压缩数据库转储并创建一个名为`latest.backup.gz`的符号链接：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finalize the script by logging the time taken to execute the previous commands:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过记录执行前一个命令所花费的时间来完成脚本：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the same directory, create a bash script, `restore_postgresql_db.sh`, with
    the following content:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一目录中，创建一个名为`restore_postgresql_db.sh`的bash脚本，内容如下：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Make both scripts executable:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使这两个脚本都可执行：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the database backup script:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行数据库备份脚本：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the database restoration script (with caution if in production):'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行数据库恢复脚本（如果在生产中，请谨慎）：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'The backup script will create backup files under `/home/myproject/db_backups/` and
    will save the log at `/home/myproject/logs/backup_postgresql_db.log`, similar
    to this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 备份脚本将在`/home/myproject/db_backups/`下创建备份文件，并将日志保存在`/home/myproject/logs/backup_postgresql_db.log`中，类似于这样：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If the operation is successful, the script will return exit code `0`; otherwise,
    the exit code will be the number of errors while executing the script. And the
    log file will show the error messages.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作成功，脚本将返回退出代码`0`；否则，退出代码将是执行脚本时出现的错误数量。日志文件将显示错误消息。
- en: In the `db_backups` directory, there will be one compressed SQL backup file
    with the day of the week, such as `0-Sunday.backup.gz`, `1-Monday.backup.gz`,
    and so on, and another file, a symbolic link actually, called `latest.backup.gz`.
    The weekday-based backup allows you to have recent backups of the last 7 days
    when set properly under cron jobs, and the symbolic link allows you to quickly
    or automatically transfer the latest backup to another computer via SSH.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在`db_backups`目录中，将有一个带有星期几的压缩SQL备份文件，例如`0-Sunday.backup.gz`，`1-Monday.backup.gz`等等，还有另一个文件，实际上是一个符号链接，名为`latest.backup.gz`。基于工作日的备份允许您在正确设置cron作业时拥有最近7天的备份，符号链接允许您通过SSH快速或自动将最新备份传输到另一台计算机。
- en: Note that we take the database credentials from the Django settings and then
    use them in the bash script.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们从Django设置中获取数据库凭据，然后在bash脚本中使用它们。
- en: 'When we run the `restore_postgresql_db.sh` script, we get output like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`restore_postgresql_db.sh`脚本时，我们会得到如下输出：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: See also
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*部署*中的*在Apache上使用mod_wsgi部署生产环境*食谱'
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*部署*中的*在Nginx和Gunicorn上部署生产环境*食谱'
- en: The *Creating and restoring PostgreSQL database backups* recipe
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建和恢复PostgreSQL数据库备份*食谱'
- en: The *Setting up cron jobs for regular tasks* recipe
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为常规任务设置cron作业*食谱'
- en: Setting up cron jobs for regular tasks
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为常规任务设置cron作业
- en: 'Usually, websites have some management tasks to perform in the background on
    a regular interval, such as once a week, once a day, or every hour. This can be
    achieved by using scheduled tasks, commonly known as cron jobs. These are scripts
    that run on the server after the specified period of time. In this recipe, we
    will create two cron jobs: one to clear sessions from the database and another
    to back up the database data. Both will be run every night.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，网站有一些后台管理任务需要定期执行，例如每周一次、每天一次或每小时一次。这可以通过使用定时任务（通常称为cron作业）来实现。这些是在服务器上在指定时间段后运行的脚本。在本食谱中，我们将创建两个cron作业：一个用于从数据库中清除会话，另一个用于备份数据库数据。两者都将在每晚运行。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To start, deploy your Django project to a remote server. Then, connect to the
    server by SSH. These steps are written with the assumption that you are using
    a virtual environment, but a similar cron job can be created for a Docker project,
    and it can even run directly within the app container. Code files are provided
    with the alternate syntax, and the steps are otherwise largely the same.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将Django项目部署到远程服务器。然后，通过SSH连接到服务器。这些步骤假定您正在使用虚拟环境，但是可以为Docker项目创建类似的cron作业，并且甚至可以直接在应用程序容器中运行。提供了备用语法的代码文件，步骤基本相同。
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作方法
- en: 'Let''s create the two scripts and make them run regularly, via the following
    steps:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建这两个脚本，并通过以下步骤定期运行它们：
- en: On the production or staging server, navigate to the project user's home directory
    where your `env` and `src` directories are located.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生产或暂存服务器上，导航到项目用户的主目录，其中包含`env`和`src`目录。
- en: 'If these don''t exist yet, create the `commands`, `db_backups`, and `logs` folders
    alongside the `env` directory, as follows:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚不存在，请按以下方式创建`commands`、`db_backups`和`logs`文件夹，如下所示：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the `commands` directory, create a `clear_sessions.sh` file. You can edit
    it with a terminal editor, such as vim or nano, adding the following content:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`commands`目录中，创建一个`clear_sessions.sh`文件。您可以使用终端编辑器（如vim或nano）编辑它，添加以下内容：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Make the `clear_sessions.sh` file executable, as follows:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使`clear_sessions.sh`文件可执行，如下所示：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Let's assume that you are using PostgreSQL as the database for your project.
    Then, in the same directory, create a backup script following the instructions
    from the previous recipe, *Creating and restoring PostgreSQL database backups*.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您正在使用PostgreSQL作为项目的数据库。然后，在相同的目录中，按照上一个配方*创建和恢复PostgreSQL数据库备份*的说明创建一个备份脚本。
- en: 'Test the scripts to see whether they are executed correctly, by running them
    and then checking the `*.log` files in the logs directory, as follows:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试脚本以查看它们是否正确执行，方法是运行它们，然后检查日志目录中的`*.log`文件，如下所示：
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In your project''s home directory on the remote server, create a `crontab.txt` file,
    with the following content:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在远程服务器上的项目主目录中，创建一个`crontab.txt`文件，内容如下：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Install the `crontab` tasks as the `myproject` user, as follows:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式将`crontab`任务安装为`myproject`用户：
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: With the current setup, every night, `clear_sessions.sh` will be executed at
    1:00 A.M., and `backup_postgresql_db.sh` will be executed at 2:00 A.M. The execution
    logs will be saved in `~/logs/clear_sessions.sh` and `~/logs/backup_postgresql_db.log`.
    If you get any errors, you should check these files for the traceback.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用当前设置，每天晚上`clear_sessions.sh`将在凌晨1:00执行，`backup_postgresql_db.sh`将在凌晨2:00执行。执行日志将保存在`~/logs/clear_sessions.sh`和`~/logs/backup_postgresql_db.log`中。如果出现任何错误，您应该检查这些文件以获取回溯信息。
- en: Every day, `clear_sessions.sh` will execute the `clearsessions` management command,
    which, as its name alludes to, clears expired sessions from the database, using
    the default database settings.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 每天，`clear_sessions.sh`将执行`clearsessions`管理命令，正如其名称所暗示的那样，它将使用默认数据库设置从数据库中清除过期会话。
- en: The database backup script is a little more complex. Every day of the week,
    it creates a backup file for that day, using a naming scheme of `0-Sunday.backup.gz`, `1-Monday.backup.gz`,
    and so on. Therefore, you will be able to restore data that was backed up 7 days
    ago or later.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库备份脚本稍微复杂一些。每周的每一天，它都会创建一个备份文件，使用命名方案`0-Sunday.backup.gz`，`1-Monday.backup.gz`等等。因此，您将能够恢复7天前或更晚备份的数据。
- en: 'The crontab file follows a specific syntax. Each line contains a specific time
    of day, indicated by a series of numbers, and then a task to run at that given
    moment. The time is defined in five parts, separated by spaces, as shown in the
    following list:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: crontab文件遵循特定的语法。每行包含特定的一天时间，由一系列数字表示，然后是在给定时刻运行的任务。时间分为五部分，用空格分隔，如下列表所示：
- en: Minutes, from 0 to 59
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分钟，从0到59
- en: Hours, from 0 to 23
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小时，从0到23
- en: Days of the month, from 1 to 31
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每月的日期，从1到31
- en: Months, from 1 to 12
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 月份，从1到12
- en: Days of the week, from 0 to 7, where 0 is Sunday, 1 is Monday, and so on—7 is
    Sunday again
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每周的日期，从0到7，其中0是星期日，1是星期一，依此类推，7又是星期日
- en: 'An asterisk (`*`) means that every time frame will be used. Therefore, the
    following task defines that `clear_sessions.sh` is to be executed at 1:00 A.M.
    every day of each month, every month, and every day of the week:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 星号（`*`）表示将使用每个时间段。因此，以下任务定义了`clear_sessions.sh`将在每个月的每一天，每个月和每周的每一天的1:00执行：
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You can learn more about the specifics of the crontab at [https://en.wikipedia.org/wiki/Cron](https://en.wikipedia.org/wiki/Cron).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://en.wikipedia.org/wiki/Cron](https://en.wikipedia.org/wiki/Cron)了解有关crontab的具体信息。
- en: There's more...
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We defined commands that will be executed at regular intervals, and the logging
    of results is also activated, but we can't yet tell whether a cron job was executed
    successfully or whether it failed unless we log into the server and check the
    logs every day manually. To solve the problem of monotonic manual labor, you can
    monitor the cron jobs automatically using the **Healthchecks** service ([https://healthchecks.io/](https://healthchecks.io/)).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了将定期执行的命令，并且还激活了结果的记录，但是我们还不能确定cron作业是否成功执行，除非我们每天手动登录服务器并检查日志。为了解决单调的手动劳动问题，您可以使用**Healthchecks**服务（[https://healthchecks.io/](https://healthchecks.io/)）自动监视cron作业。
- en: With Healthchecks, you would modify the crontab so that it pings a specific
    URL after each successful job is executed. If the script fails and exits with
    a non-zero code, Healthchecks will know that it was not executed successfully.
    Every day, you will get an overview of cron jobs and their execution statuses
    by email.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Healthchecks，您可以修改crontab，以便在每次成功执行作业后ping特定URL。如果脚本失败并以非零代码退出，Healthchecks将知道它未成功执行。每天，您将通过电子邮件获取cron作业及其执行状态的概述。
- en: See also
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Apache上使用mod_wsgi部署生产环境*配方在[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*，部署*'
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Nginx和Gunicorn上部署生产环境*配方在[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*，部署*'
- en: The *Creating and restoring MySQL database backups* recipe
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建和恢复MySQL数据库备份*配方'
- en: The *Creating and restoring PostgreSQL database backups* recipe
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建和恢复PostgreSQL数据库备份*配方'
- en: Logging events for further introspection
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录事件以进行进一步审查
- en: In the previous recipes, you could see how logging works for bash scripts. But
    you can also log events happening on your Django website, such as user registration,
    adding a product to a cart, buying tickets, bank transactions, sending SMS messages,
    server errors, and similar.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的配方中，您可以看到如何记录bash脚本的工作。但是您也可以记录发生在Django网站上的事件，例如用户注册、将产品添加到购物车、购买门票、银行交易、发送短信、服务器错误等。
- en: You should never log sensitive information such as user passwords or credit
    card details.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您永远不应记录敏感信息，例如用户密码或信用卡详细信息。
- en: Also, use an analytics tool instead of Python logging for tracking overall website
    usage.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用分析工具而不是Python记录来跟踪整体网站使用情况。
- en: In this recipe, we will guide you through how to log structured information
    about your website into log files.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将指导您如何将有关您的网站的结构化信息记录到日志文件中。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `likes` apps from the *Implementing the Like widget* recipe
    in [Chapter 4](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*, Templates and JavaScript*.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从[第4章](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*，模板和JavaScript*中的*实现喜欢小部件*食谱开始。
- en: 'In the virtual environment of a Django project, install `django-structlog`,
    as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django项目的虚拟环境中，安装`django-structlog`，如下所示：
- en: '[PRE27]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To set up structured logging in your Django website, follow these steps:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Django网站中设置结构化日志记录，请按照以下步骤进行：
- en: 'Add `RequestMiddleware` in your project''s settings:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的设置中添加`RequestMiddleware`：
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Also in the same file, add Django logging configuration:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样在同一文件中，添加Django日志配置：
- en: '[PRE29]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Also, set `structlog` configuration there:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要在那里设置`structlog`配置：
- en: '[PRE30]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In `views.py` of the `likes` app, let''s log the object that will be liked
    or unliked:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`likes`应用程序的`views.py`中，让我们记录将被喜欢或取消喜欢的对象：
- en: '[PRE31]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When visitors browse your website, the specific events will be logged in the `tmp/json.log` and `tmp/flat_line.log` files.
    `django_structlog.middlewares.RequestMiddleware` logs the start and end of the
    HTTP request processing. In addition, we are logging when a `Like` instance is
    created or deleted.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问者浏览您的网站时，特定事件将记录在`tmp/json.log`和`tmp/flat_line.log`文件中。`django_structlog.middlewares.RequestMiddleware`记录HTTP请求处理的开始和结束。此外，我们还记录了在我们的Django项目中创建或删除`Like`实例时的情况。
- en: 'The `json.log` file contains logs in JSON format. That means that you can programmatically
    parse, inspect, and analyze them:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`json.log`文件包含以JSON格式记录的日志。这意味着您可以以编程方式解析、检查和分析它们：'
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `flat_line.log` file contains the logs in a shorter format, which might
    be easier to read manually:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`flat_line.log`文件以更短的格式包含日志，这可能更容易手动阅读：'
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: See also
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating and restoring MySQL database backups* recipe
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建和恢复MySQL数据库备份*食谱'
- en: The *Creating and restoring PostgreSQL database backups* recipe
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建和恢复PostgreSQL数据库备份*食谱'
- en: The *Setting up cron jobs for regular tasks* recipe
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为定期任务设置cron作业*食谱'
- en: Getting detailed error reporting via email
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过电子邮件获取详细的错误报告
- en: To perform system logging, Django uses Python's built-in logging module or the
    `structlog` module mentioned in the previous recipe. The default Django configuration
    seems to be quite complex. In this recipe, you will learn how to tweak it to send
    error emails with complete HTML, similar to what is provided by Django in the
    DEBUG mode when an error happens.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为执行系统日志记录，Django使用Python的内置日志记录模块或前一食谱中提到的`structlog`模块。默认的Django配置似乎相当复杂。在本食谱中，您将学习如何对其进行微调，以便在发生错误时以与Django在DEBUG模式下提供的完整HTML类似的方式发送错误电子邮件。
- en: Getting ready
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Locate the Django project in your virtual environment.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 定位虚拟环境中的Django项目。
- en: How to do it...
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following procedure will send detailed emails about errors to you:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下过程将向您发送有关错误的详细电子邮件：
- en: If you do not already have `LOGGING` settings set up for your project, set those
    up first. Find the Django logging utilities file, available at `env/lib/python3.7/site-packages/django/utils/log.py`.
    Copy the `DEFAULT_LOGGING` dictionary to your project's settings as the `LOGGING` dictionary.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的项目尚未设置`LOGGING`设置，请先设置。找到Django日志实用程序文件，位于`env/lib/python3.7/site-packages/django/utils/log.py`。将`DEFAULT_LOGGING`字典复制到项目的设置中作为`LOGGING`字典。
- en: 'Add the `include_html` setting to the `mail_admins` handler. The result of
    the first two steps should be something like the following:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`include_html`设置添加到`mail_admins`处理程序。前两个步骤的结果应该类似于以下内容：
- en: '[PRE34]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works...
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The logging configuration consists of four parts: loggers, handlers, filters,
    and formatters. The following list describes them:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 日志配置由四个部分组成：记录器、处理程序、过滤器和格式化程序。以下列表对它们进行了描述：
- en: '**Loggers** are entry points into the logging system. Each logger can have
    a log level: `DEBUG`, `INFO`, `WARNING`, `ERROR`, or `CRITICAL`. When a message
    is written to the logger, the log level of the message is compared with the logger''s
    level. If it meets or exceeds the log level of the logger, it will be further
    processed by a handler. Otherwise, the message will be ignored.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记录器**是日志系统的入口点。每个记录器都可以有一个日志级别：`DEBUG`、`INFO`、`WARNING`、`ERROR`或`CRITICAL`。当消息被写入记录器时，消息的日志级别将与记录器的级别进行比较。如果满足或超过记录器的日志级别，则将由处理程序进一步处理。否则，消息将被忽略。'
- en: '**Handlers** are engines that define what happens to each message in the logger.
    They can be written to a console, sent by email to the administrator, saved to
    a log file, sent to the Sentry error-logging service, and so on. In our case,
    we set the `include_html` parameter for the `mail_admins` handler, as we want
    the full HTML with traceback and local variables for the error messages that happen
    in our Django project.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理程序**是定义记录器中每条消息发生的情况的引擎。它们可以被写入控制台，通过电子邮件发送给管理员，保存到日志文件，发送到Sentry错误记录服务等等。在我们的情况下，我们为`mail_admins`处理程序设置了`include_html`参数，因为我们希望在我们的Django项目中发生错误时获得包含回溯和本地变量的完整HTML的错误消息。'
- en: '**Filters** provide additional control over the messages that are passed from
    the loggers to handlers. For example, in our case, the emails will only be sent
    when the DEBUG mode is set to false.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过滤器**提供对从记录器传递到处理程序的消息的额外控制。例如，在我们的情况下，仅当DEBUG模式设置为false时才会发送电子邮件。'
- en: '**Formatters** are used to define how to render a log message as a string.
    They are not used in this example; however, for more information about logging,
    you can refer to the official documentation at [https://docs.djangoproject.com/en/3.0/topics/logging/](https://docs.djangoproject.com/en/3.0/topics/logging/).'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**格式化程序**用于定义如何将日志消息呈现为字符串。在本示例中未使用它们；但是，有关日志记录的更多信息，您可以参考官方文档[https://docs.djangoproject.com/en/3.0/topics/logging/](https://docs.djangoproject.com/en/3.0/topics/logging/)。'
- en: There's more...
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The configuration we have just defined will send emails about each server error
    that happens on your website. If you have high traffic and, let's say, the database
    crashes, you will get tons of emails that will flood your inbox or even hang your
    email server.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚定义的配置将发送有关发生在您的网站上的每个服务器错误的电子邮件。如果您的网站流量很大，比如数据库崩溃，您将收到大量电子邮件，这些邮件将淹没您的收件箱，甚至可能挂起您的电子邮件服务器。
- en: To avoid such problems, you can use Sentry ([https://sentry.io/for/python/](https://sentry.io/for/python/)).
    It tracks all server errors at their server and sends only one notification email
    to you for each error type.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这样的问题，您可以使用Sentry ([https://sentry.io/for/python/](https://sentry.io/for/python/))。它会在服务器上跟踪所有服务器错误，并针对每种错误类型仅发送一封通知电子邮件给您。
- en: See also
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*部署*中的*在Apache上使用mod_wsgi进行生产环境部署*食谱'
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*部署*中的*在Nginx和Gunicorn上进行生产环境部署*食谱'
- en: The *Logging events for further introspection* recipe
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*用于进一步审查的日志事件*食谱'
