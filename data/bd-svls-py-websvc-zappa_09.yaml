- en: Asynchronous Task Execution on AWS Lambda
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Lambda 上的异步任务执行
- en: In this chapter, we are going to cover asynchronous task execution on AWS Lambda.
    AWS Lambda makes autoscaling and asynchronous execution very easy to achieve.
    Zappa can help us to configure tasks so that they are executed in an asynchronous
    manner on AWS Lambda. Zappa implements features to manage responses for asynchronous
    tasks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 AWS Lambda 上的异步任务执行。AWS Lambda 使自动缩放和异步执行变得非常容易实现。Zappa 可以帮助我们配置任务，以便它们在
    AWS Lambda 上以异步方式执行。Zappa 实现了管理异步任务响应的功能。
- en: 'The topics we will cover in this chapter include the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Asynchronous execution
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步执行
- en: AWS Lambda asynchronous invocation using Zappa
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Zappa 进行 AWS Lambda 异步调用
- en: Configuring the Quote API application with asynchronous features
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用异步功能配置 Quote API 应用程序
- en: Deploying and executing the Quote API using Zappa
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Zappa 部署和执行 Quote API
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before starting this chapter, make sure you fulfill the prerequisites for working
    with the application. Here are the  technical requirements you need to meet:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本章之前，请确保满足应用程序的先决条件。以下是您需要满足的技术要求：
- en: Ubuntu 16.04/Windows/macOS
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu 16.04/Windows/macOS
- en: Python3.6
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python3.6
- en: Pipenv tool
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pipenv 工具
- en: Falcon framework
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 猎鹰框架
- en: Zappa
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zappa
- en: Registered domain
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册域名
- en: AWS account
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 账户
- en: This chapter enhances the application developed in [Chapter 8](part0203.html#61J260-8241a43bed654018b51365a570bcef1d), *Custom
    Domain with SSL*. Hence, some of the requirements can be used from previously
    configured prerequisites. Let's move ahead to learn more about asynchronous execution
    in AWS Lambda.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章增强了[第 8 章](part0203.html#61J260-8241a43bed654018b51365a570bcef1d)中开发的应用程序，*带
    SSL 的自定义域*。因此，一些要求可以从先前配置的先决条件中使用。让我们继续学习 AWS Lambda 中的异步执行。
- en: Asynchronous execution
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步执行
- en: Asynchronous execution plays an essential role in developing high-performance
    and optimized applications. AWS Lambda supports asynchronous execution. There
    are different approaches to executing AWS Lambda functions in asynchronous mode.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 异步执行在开发高性能和优化的应用程序中起着重要作用。AWS Lambda 支持异步执行。有不同的方法来以异步模式执行 AWS Lambda 函数。
- en: Understanding asynchronous execution
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解异步执行
- en: '**Asynchronous execution** is the process of executing specific blocks of code
    without blocking user intervention. To understand it better, consider the jQuery
    Ajax mechanism for sending asynchronous requests to the server, which does so
    without blocking the user and capturing the success response or error response
    in a callback method. Have a look at the following diagram to get a better understanding:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**异步执行** 是在不阻塞用户干预的情况下执行特定代码块的过程。为了更好地理解它，考虑 jQuery Ajax 机制发送异步请求到服务器，而不会阻塞用户，并在回调方法中捕获成功响应或错误响应。看一下以下图表，以更好地理解：'
- en: '![](img/00091.gif)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00091.gif)'
- en: Now, as you can see, once the server gets an asynchronous request from the client,
    the server returns an acknowledged response immediately. Once the request processing
    is done, either a success or failure response will be returned; otherwise, nothing
    will be returned.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以看到，一旦服务器从客户端获得异步请求，服务器立即返回确认的响应。一旦请求处理完成，将返回成功或失败的响应；否则，将不返回任何内容。
- en: Whether a response is returned from the asynchronous method depends on the requirements.
    We may or may not need to have a response returned. If we do wish to return a
    response, then there should be a mechanism to handle or capture the response at
    the client side.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 异步方法是否返回响应取决于要求。我们可能需要或不需要返回响应。如果我们希望返回响应，那么应该有一种机制来处理或捕获客户端端的响应。
- en: In a similar fashion, AWS Lambda functions can be executed in an asynchronous
    manner, where we would not be blocking user intervention to wait for the return
    response. There are some use cases where we are required to capture the response
    of an AWS Lambda function executed asynchronously. We will discuss capturing responses
    in the coming sections.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，AWS Lambda 函数可以以异步方式执行，这样我们就不会阻塞用户干预等待返回响应。有一些用例需要捕获以异步方式执行的 AWS Lambda
    函数的响应。我们将在接下来的部分讨论捕获响应。
- en: Let's see how AWS Lambda executes asynchronously.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 AWS Lambda 如何异步执行。
- en: Asynchronous AWS Lambda execution using Boto3
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Boto3 进行 AWS Lambda 异步执行
- en: An AWS Lambda function is nothing but a function (a block of code) in the cloud.
    A function can be invoked synchronously or asynchronously. To achieve asynchronous
    execution in any programming language, we execute functions in a separate thread
    or process. In Python, for instance, there are various libraries available for
    achieving asynchronous execution. Similarly, AWS Lambda supports asynchronous
    execution very well.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda 函数实际上就是云中的一个函数（一段代码）。函数可以同步或异步调用。为了在任何编程语言中实现异步执行，我们可以在单独的线程或进程中执行函数。例如，在
    Python 中，有各种库可用于实现异步执行。同样，AWS Lambda 很好地支持异步执行。
- en: 'Let''s take a look at the following code snippet:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下代码片段：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can invoke the AWS Lambda function using the Boto3 library. The preceding
    code is the syntax of the `invoke` method of the Lambda client. You can read more
    about the `invoke` method's mechanism at Boto3's official documentation here: [http://boto3.readthedocs.io/en/latest/reference/services/lambda.html#Lambda.Client.invoke](http://boto3.readthedocs.io/en/latest/reference/services/lambda.html#Lambda.Client.invoke).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Boto3 库调用 AWS Lambda 函数。上面的代码是 Lambda 客户端 `invoke` 方法的语法。您可以在 Boto3 的官方文档中了解更多关于
    `invoke` 方法机制的信息：[http://boto3.readthedocs.io/en/latest/reference/services/lambda.html#Lambda.Client.invoke](http://boto3.readthedocs.io/en/latest/reference/services/lambda.html#Lambda.Client.invoke)。
- en: Boto3 is a well-organized and well-maintained AWS SDK for Python. It helps developers
    to interact with AWS services using Python. Zappa also uses Boto3 in order to
    interact with AWS services.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Boto3 是一个组织良好、维护良好的 Python AWS SDK。它帮助开发人员使用 Python 与 AWS 服务进行交互。Zappa 也使用 Boto3
    与 AWS 服务进行交互。
- en: Let's briefly elaborate on `InvocationType`, which is used to decide whether
    to execute the function in either synchronous mode or asynchronous mode. If you
    want to invoke an existing AWS Lambda function in synchronous mode, then you can
    choose `InvocationType` as `RequestResponse`, and for asynchronous mode, you can
    choose `InvocationType` as `Event`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要解释一下`InvocationType`，它用于决定是以同步模式还是异步模式执行函数。如果您想以同步模式调用现有的AWS Lambda函数，那么可以选择`InvocationType`为`RequestResponse`，对于异步模式，可以选择`InvocationType`为`Event`。
- en: 'The following code is an example of asynchronous execution of a Lambda function:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是Lambda函数的异步执行示例：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: That's it. This would invoke the Lambda function in asynchronous mode. With
    the help of Boto3, you can perform execution of AWS Lambda functions asynchronously.
    Now let's see how we can perform asynchronous execution using Zappa.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。这将以异步模式调用Lambda函数。借助Boto3，您可以异步执行AWS Lambda函数。现在让我们看看如何使用Zappa执行异步执行。
- en: AWS Lambda asynchronous invocation using Zappa
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Lambda使用Zappa进行异步调用
- en: An AWS Lambda function is nothing but a function deployed at an AWS Lambda container.
    Hence, executing it is just a matter of invoking a function. There are various
    methods of invocation provided by AWS. How you go about integrating and configuring
    the invocation to achieve asynchronous execution is entirely up to you. We have
    seen in the previous section how to go about asynchronous execution using the
    Boto3 SDK. Now, we are going to explore the various ways of invocation that are
    provided by Zappa.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda函数只是部署在AWS Lambda容器中的函数。因此，执行它只是调用一个函数。AWS提供了各种调用方法。如何集成和配置调用以实现异步执行完全取决于您。我们已经在上一节中看到了如何使用Boto3
    SDK进行异步执行。现在，我们将探索Zappa提供的各种调用方式。
- en: Asynchronous AWS Lambda invocation using the task decorator
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用任务装饰器进行异步AWS Lambda调用
- en: 'Zappa provides a super-easy way to configure your Lambda execution in asynchronous
    mode. Zappa has an implementation of asynchronous execution using a decorator
    method called `zappa.async.task`. This decorator can be used with any function
    we want to execute in asynchronous mode. The following is an example from Zappa''s
    official GitHub page ([https://github.com/Miserlou/Zappa#asynchronous-task-execution](https://github.com/Miserlou/Zappa#asynchronous-task-execution)):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa提供了一种超级简单的方式来配置Lambda执行为异步模式。Zappa使用名为`zappa.async.task`的装饰器方法实现了异步执行。这个装饰器可以用于我们想要以异步模式执行的任何函数。以下是来自Zappa官方GitHub页面的示例（[https://github.com/Miserlou/Zappa#asynchronous-task-execution](https://github.com/Miserlou/Zappa#asynchronous-task-execution)）：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, we used the `task` decorator on the `make_pie` method. Now,
    when you call the API, it will return the response immediately and execute the
    `make_pie` method in asynchronous mode. Executing `make_pie` asynchronously is
    nothing more than instantiating the AWS Lambda instance with the context of the
    `make_pie` method execution. This is how you can execute a function asynchronously.
    Now, another challenge is collecting the response from an asynchronously executed
    function. We will discuss this in an upcoming section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们在`make_pie`方法上使用了`task`装饰器。现在，当您调用API时，它将立即返回响应，并以异步模式执行`make_pie`方法。以异步方式执行`make_pie`只是实例化具有`make_pie`方法执行上下文的AWS
    Lambda实例。这就是您可以异步执行函数的方式。现在，另一个挑战是收集异步执行函数的响应。我们将在接下来的部分讨论这个问题。
- en: Amazon SNS as the task source
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon SNS作为任务来源
- en: '**Amazon Simple Notification Service** (**SNS**) is a managed pub/sub messaging
    service. It supports various protocols, such as HTTP, HTTPS, email, email-JSON,
    Amazon SQS, applications, AWS Lambda, and SMS. We can create topics and subscribes
    via any of these protocols, though we can use AWS SNS and perform a pub/sub operation
    through its web console.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Amazon Simple Notification Service**（**SNS**）是一种托管的发布/订阅消息服务。它支持各种协议，如HTTP、HTTPS、电子邮件、电子邮件-JSON、Amazon
    SQS、应用程序、AWS Lambda和短信。我们可以通过任何这些协议创建主题和订阅，尽管我们可以使用AWS SNS通过其Web控制台执行发布/订阅操作。'
- en: We have already invoked AWS Lambda via API Gateway, which is how all our implemented
    APIs are working. In a similar fashion, we can subscribe our AWS Lambda with Amazon
    SNS with a specific topic. Now, whenever any message is published on that topic,
    it will invoke the subscribed AWS Lambda as well.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过API Gateway调用了AWS Lambda，这是我们所有实现的API都在工作的方式。同样，我们可以订阅我们的AWS Lambda与Amazon
    SNS的特定主题。现在，每当在该主题上发布任何消息时，它也会调用订阅的AWS Lambda。
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You also need to update the following settings in the `zappa_settings.json`
    file:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要在`zappa_settings.json`文件中更新以下设置：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When you call the `zappa schedule` command, it will automatically create and
    subscribe to SNS. Any message publication over an SNS topic creates a unique message
    ID as well. Hence, you can track the message response in CloudWatch Logs using
    the generated message ID.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调用`zappa schedule`命令时，它将自动创建并订阅SNS。通过SNS主题发布的任何消息都会创建一个唯一的消息ID。因此，您可以使用生成的消息ID在CloudWatch日志中跟踪消息响应。
- en: This feature enables you to use the Lambda invocation to perform an operation
    based on the SNS event. You may use it to develop a **One-Time Password **(**OTP**) generation
    application, for instance, where you wouldn't be required to persist the OTP data.
    Instead, it would be published to a specific topic, and subscribers would get
    that information. Finally, AWS Lambda and mobile numbers can be subscriptions
    of an AWS SNS topic. This would invoke the AWS Lambda method and with the published
    message context over an SNS topic.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能使您能够使用Lambda调用来执行基于SNS事件的操作。例如，您可以使用它来开发一个**一次性密码**（**OTP**）生成应用程序，其中您不需要持久化OTP数据。相反，它将被发布到特定主题，订阅者将获得该信息。最后，AWS
    Lambda和手机号码可以订阅AWS SNS主题。这将调用AWS Lambda方法，并使用SNS主题上发布的消息上下文。
- en: Let's look at the direct invocation method in the next section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中看一下直接调用方法。
- en: Direct invocation
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接调用
- en: Zappa provides another mechanism for performing the direct invocation of a Lambda
    function. Previously, we have been using the `task` and `task_sns` decorators,
    but now we are going to use the `zappa.async.run` method to perform the direct
    invocation.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa提供了另一种执行Lambda函数的直接调用的机制。以前，我们一直在使用`task`和`task_sns`装饰器，但现在我们将使用`zappa.async.run`方法来执行直接调用。
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This feature would help you to configure the `async` invocation dynamically
    based on your requirements. Decorator task methods are fixed from compilation,
    but this method statement can be called, conditionally, at runtime.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能将帮助您根据您的要求动态配置`async`调用。装饰器任务方法从编译中固定，但此方法语句可以在运行时有条件地调用。
- en: Remote invocation
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程调用
- en: 'By default, Zappa performs the direct invocation of a method at the current
    Lambda instance. But, if you wish to perform the Lambda invocation as a separate
    Lambda function on a different region, then you can update your task decorator,
    as shown in the following code snippet:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Zappa执行当前Lambda实例的直接调用方法。但是，如果您希望在不同区域上将Lambda调用作为单独的Lambda函数执行，则可以更新您的任务装饰器，如下面的代码片段所示：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We are using the `task` decorator, but with additional arguments, such as **`remote_aws_lambda_function_name`**
    and **`remote_aws_region`**. These arguments state to execute the particular Lambda
    function in a specific region. This is how you can perform a **remote invocation**.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用`task`装饰器，但带有额外的参数，例如**`remote_aws_lambda_function_name`**和**`remote_aws_region`**。这些参数说明在特定区域执行特定Lambda函数。这就是您可以执行**远程调用**的方式。
- en: Let's enhance the Quote API application with these different types of invocation
    to achieve asynchronous execution.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过这些不同类型的调用来增强Quote API应用程序，以实现异步执行。
- en: Configuring the Quote API application with async features
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置带有异步功能的Quote API应用程序
- en: In the last chapter, we created a Quote API and configured a custom domain.
    Now we are going to enhance and optimize the existing application. There will
    be some new features that we are going to add to the application in order to demonstrate
    the different types of invocations.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们创建了一个Quote API并配置了自定义域。现在我们将增强和优化现有的应用程序。我们将添加一些新功能到应用程序中，以演示不同类型的调用。
- en: We are going to use the existing code base as a different project, so it would
    be good to copy the existing code base in a new directory; in our case, we will
    copy the `Chapter08` code base as `Chapter09`; however, you will be required to
    update the `zappa_settings.json` file. In the upcoming section, we will be covering
    the Zappa settings changes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用现有的代码库作为一个不同的项目，因此最好将现有的代码库复制到一个新目录中；在我们的情况下，我们将`Chapter08`代码库复制为`Chapter09`；但是，您需要更新`zappa_settings.json`文件。在即将到来的部分中，我们将介绍Zappa设置更改。
- en: SMS subscription with Amazon SNS for the daily quote
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Amazon SNS进行每日报价的短信订阅
- en: We are going to add the new feature of the SMS subscription for receiving quotes
    on a daily basis. This would require us to configure Amazon SNS using the Boto3
    library. Boto3 is a complete Python SDK library that enables us to interact with
    AWS services programmatically. Let's move on and configure Amazon SNS in the next
    section.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加每日接收报价的短信订阅的新功能。这将要求我们使用Boto3库配置Amazon SNS。Boto3是一个完整的Python SDK库，使我们能够以编程方式与AWS服务进行交互。让我们继续并在下一节中配置Amazon
    SNS。
- en: Configuring Amazon SNS using Boto3
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Boto3配置Amazon SNS
- en: You need to have met the prerequisites and followed the installation instructions
    detailed in the previous chapter, where we configured the environment with Boto3
    and other required libraries. Assuming that you have configured the environment,
    I will now move ahead to explore the configuration.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要满足先决条件并遵循上一章中详细说明的安装说明，其中我们使用Boto3和其他所需的库配置了环境。假设您已经配置了环境，我现在将继续探索配置。
- en: 'Let''s have a look at the following code snippet:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下以下代码片段：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, we are creating a client object of Amazon SNS using Boto3\.
    We need to have access key credentials in order to get access programmatically.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们正在使用Boto3创建Amazon SNS的客户端对象。我们需要访问密钥凭据以便以编程方式获取访问权限。
- en: This is an essential step when connecting with Amazon SNS. Once you have successfully
    created the `client` object, you can perform various actions, such as creating
    a topic, subscribing a service with a protocol, and publishing the message on
    the topic.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与Amazon SNS连接时的重要步骤。一旦成功创建了`client`对象，您可以执行各种操作，例如创建主题，使用协议订阅服务以及在主题上发布消息。
- en: Let's move toward the actual implementation of the SMS subscription using Amazon
    SNS.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们朝着使用Amazon SNS实现短信订阅的实际实现迈进。
- en: Implementing the SMS subscription functionality
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现短信订阅功能
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'File—`sns.py`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 文件-`sns.py`：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This class has a method for performing the subscription functionality for a
    mobile number. In order to demonstrate asynchronous executions, we are going to
    write some functions explicitly, which will be using `QuoteSubscription` features.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类有一个用于执行移动号码订阅功能的方法。为了演示异步执行，我们将明确编写一些函数，这些函数将使用`QuoteSubscription`功能。
- en: 'Let''s create a file called `async.py` with the following code snippet:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`async.py`的文件，其中包含以下代码片段：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, we defined these methods and added the `@task` decorator. On
    the local environment, it would execute in normal methods, but on an AWS Lambda
    context, it would execute in asynchronous mode.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们定义了这些方法并添加了`@task`装饰器。在本地环境中，它将以正常方法执行，但在AWS Lambda上下文中，它将以异步模式执行。
- en: Let's move to the resources API implementation. We are going to modify the existing
    resources a little bit. There will be some new APIs related to SMS subscription.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们移动到资源API实现。我们将稍微修改现有资源。将会有一些与短信订阅相关的新API。
- en: 'File—`resources.py`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 文件-`resources.py`：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here we created some API using the resources classes as mentioned in the preceding
    code snippet. Each resource class represents a single API endpoint. So we have
    created three API endpoints and each have its own workflow execution and usage.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了资源类创建了一些API，如前面的代码片段中所述。每个资源类代表一个单独的API端点。因此，我们创建了三个API端点，每个端点都有自己的工作流执行和用法。
- en: 'Let''s explore usages of each API endpoints as following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式探索每个API端点的用法：
- en: '`/daily`: This API endpoint is intended to return the daily quote data.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/daily`：此API端点旨在返回每日报价数据。'
- en: '`/subscribe`: This API endpoint is designed to subscribe any mobile number
    for daily quote SMS. It implements a OTP verification before subscribing any mobile
    number. Hence it follows a URL pattern for performing the subscription operation.
    It requires two steps for subscribing such as generating the OTP for subscription
    and then verifying the OTP to confirm the subscription. For generating the OTP
    for subscription, you need to use the API with the `mobile` query parameter such
    as `http://localhost:8000/subscribe?mobile=919028XXXX` and for subscription confirmation
    you need to use this API with `mobile` and `otp` parameters such as `http://localhost:8000/subscribe?mobile=919028790411&otp=XXXX`.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/subscribe`：此API端点旨在订阅任何手机号以获取每日报价短信。在订阅任何手机号之前，它实现了一种OTP验证。因此，它遵循执行订阅操作的URL模式。订阅需要两个步骤，例如生成订阅的OTP，然后验证OTP以确认订阅。要生成订阅的OTP，您需要使用带有“mobile”查询参数的API，例如`http://localhost:8000/subscribe?mobile=919028XXXX`，要进行订阅确认，您需要使用带有“mobile”和“otp”参数的API，例如`http://localhost:8000/subscribe?mobile=919028790411&otp=XXXX`。'
- en: '`/unsubscribe`: This API endpoint is designed to unsubscribe the existing subscribed
    mobile number.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/unsubscribe`：此API端点旨在取消现有订阅的手机号。'
- en: API query parameters has defined pattern, Hence you need to use these pattern
    for a valid parameter. For mobile parameter, you should send the mobile mobile
    number in this format `<country_code><mobile_number>`. For `opt` parameter, you
    should send 4 digits integer numbers.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: API查询参数已定义模式，因此您需要使用这些模式进行有效参数。对于mobile参数，您应该以`<country_code><mobile_number>`的格式发送手机号码。对于`opt`参数，您应该发送4位整数。
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now let's move ahead to deploy the application, and then we will go through
    its execution.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续部署应用程序，然后我们将了解其执行过程。
- en: Deploying and executing the Quote API using Zappa
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zappa部署和执行Quote API
- en: Deployment is an essential part of any web application. We are blessed with
    Zappa and AWS Lambda, which provide us with the essence of being serverless. As
    we are enhancing the Quote API application created in the previous chapter, there
    will some modifications as per our current requirements.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 部署是任何Web应用程序的重要部分。我们有幸拥有Zappa和AWS Lambda，它们为我们提供了无服务器的本质。由于我们正在增强上一章中创建的Quote
    API应用程序，因此根据我们当前的需求，将进行一些修改。
- en: In the coming sections, we will be discussing some changes in Zappa settings.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将讨论Zappa设置的一些更改。
- en: Setting up the virtual environment
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置虚拟环境
- en: 'As discussed before, we are using the `Chapter08` code base. There is some
    modification required in the `zappa_settings.json` file, such as the `project_name`
    needing to be changed to `Chapter09`, as shown in the following snippet:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们正在使用`Chapter08`代码库。在`zappa_settings.json`文件中需要进行一些修改，例如将`project_name`更改为`Chapter09`，如下面的代码片段所示：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Once you've changed `project_name`, you need to configure the virtual environment
    with `pipenv`, by using the `pipenv install` command. This will create a new virtual
    environment with a changed `project_name`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您更改了“project_name”，您需要使用“pipenv install”命令来配置虚拟环境。这将创建一个带有更改的“project_name”的新虚拟环境。
- en: We are using the Boto3 library to interact with Amazon SNS. Hence, we will need
    to install Boto3 as well, by using the `pipenv install boto3` command.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用Boto3库与Amazon SNS进行交互。因此，我们还需要使用`pipenv install boto3`命令安装Boto3。
- en: Setting up environment variables
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境变量
- en: Apart from the virtual environment, we need to configure some environment variables.
    We are using the Mashape API (a third-party API marketplace) and the Boto3 library.
    Hence, we are going to configure the environment variables with the Mashape API
    key and our AWS access credentials.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 除了虚拟环境之外，我们还需要配置一些环境变量。我们正在使用Mashape API（第三方API市场）和Boto3库。因此，我们将使用Mashape API密钥和我们的AWS访问凭据配置环境变量。
- en: Zappa provides several mechanisms for the configuration of environment variables.
    We are going to use `"remote_env"`. This approach requires the uploading of a
    JSON file on an S3 bucket.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa提供了几种配置环境变量的机制。我们将使用“remote_env”。这种方法需要在S3存储桶上上传一个JSON文件。
- en: 'The following is the code snippet of the configured JSON file:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是配置的JSON文件的代码片段：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once you''ve uploaded this file to the S3 bucket, you can then use the S3 path
    of this file as a value to `"remote_env"`, as shown in the following code snippet:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将此文件上传到S3存储桶，您可以将此文件的S3路径用作“remote_env”的值，如下面的代码片段所示：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Zappa will automatically set environment variables based on this JSON file.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa将根据此JSON文件自动设置环境变量。
- en: AWS and other API credentials are confidential and sensitive data; hence, you
    must avoid committing that data in public Git repositories. With the help of `remove_env`,
    you can set the credentials as environment variables on AWS Lambda and keep it
    all secure on S3.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: AWS和其他API凭据是机密和敏感数据；因此，您必须避免在公共Git存储库中提交这些数据。借助`remove_env`，您可以将凭据设置为AWS Lambda上的环境变量，并将其全部安全地保存在S3上。
- en: Adding a custom domain with SSL
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加具有SSL的自定义域
- en: It's time to configure a specific domain for the enhanced version of the Quote
    API application. Zappa provides a keyword named `domain` to be set with your domain
    name in a file setting.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候为Quote API应用程序的增强版本配置特定的域了。Zappa提供了一个名为`domain`的关键字，用于在文件设置中设置您的域名。
- en: 'The following is the code snippet for configuring the domain:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是配置域的代码片段：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once you configure the domain, you need to certify it with an SSL certificate.
    We already generated the wildcard SSL certificate using the **Amazon Certificate
    Manager** (**ACM**). Hence, we will be using that same ACM ARN, as shown in the
    following code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您配置了域名，就需要使用SSL证书对其进行认证。我们已经使用**Amazon Certificate Manager** (**ACM**)生成了通配符SSL证书。因此，我们将使用相同的ACM
    ARN，如下面的代码所示：
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now you need to run the `zappa certify` command in order to create the subdomain
    and configure the certificate. Have a look at following log snippet:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您需要运行`zappa certify`命令，以创建子域并配置证书。看一下以下日志片段：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As shown in the preceding log snippet, it can take up to 40 minutes for this
    domain to be created and propagated through AWS, but it requires no further work
    on your part.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的日志片段所示，这个域名可能需要40分钟才能在AWS中创建和传播，但您无需再做任何工作。
- en: Let's move to the next section, where we will be configuring an event for publishing
    a quote SMS to all mobile subscribers.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到下一部分，在那里我们将为所有手机订阅者配置一个发布报价短信的事件。
- en: Scheduling an event to publish an SMS
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安排事件发布短信
- en: We are going to send a quote SMS on a daily basis to all SMS subscribers. SMS
    subscription features have been implemented using Amazon SNS with the `QuoteSubscription`
    class. We will give a detailed explanation about the subscription workflow in
    the upcoming section. But before we perform the subscription execution, we should
    have a configured and scheduled event that will publish a quote on the SNS topic.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将每天向所有短信订阅者发送报价短信。短信订阅功能已经使用Amazon SNS和`QuoteSubscription`类实现。我们将在接下来的部分详细解释订阅工作流程。但在执行订阅之前，我们应该有一个配置和计划的事件，将在SNS主题上发布报价。
- en: We have already created the SNS topic in the `QuoteSubscription` constructor.
    Also, we have written an `async` method, `async_publish`, in the `async.py` file.
    Now we are going to use this method for sending a quote message asynchronously.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在`QuoteSubscription`构造函数中创建了SNS主题。此外，我们在`async.py`文件中编写了一个`async`方法`async_publish`。现在我们将使用这个方法异步发送报价消息。
- en: In order to keep a modularized code base, we have created a `schedulers.py`
    file to keep all scheduling methods in one place.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持模块化的代码库，我们创建了一个`schedulers.py`文件，将所有调度方法放在一个地方。
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As we've already created a schedule method, `set_quote_of_the_day`, in the last
    chapter, we now have to create a method called `publish_quote_of_the_day`, which
    is responsible for publishing the quote message on the Amazon SNS topic.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中已经创建了一个调度方法`set_quote_of_the_day`，现在我们需要创建一个名为`publish_quote_of_the_day`的方法，负责在Amazon
    SNS主题上发布报价消息。
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We configured the scheduling method to be invoked using the `cron` expression
    for every day at 2: 00 AM **UTC** time (**Coordinated Universal Time**), which
    will be 7:30 AM **IST** (**Indian Standard Time**). Hence, all subscribers in
    India will receive the SMS in the morning. You can schedule the `cron` expression
    as per your requirements.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们配置了调度方法，使用`cron`表达式每天在UTC时间的凌晨2:00执行（**协调世界时**），这将是IST时间的上午7:30（**印度标准时间**）。因此，印度的所有订阅者将在早晨收到短信。您可以根据自己的需求安排`cron`表达式。
- en: 'When we create the instance of the `QuoteSubscription` class, it creates an
    SNS topic, as shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建`QuoteSubscription`类的实例时，它会创建一个SNS主题，如下面的截图所示：
- en: '![](img/00092.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00092.jpeg)'
- en: '**Do not Disturb** (**DND**) may be enabled on your mobile. DND works on promotional
    SMS. So, in that case, you can change the default message type in the Text messaging
    preferences section, as shown in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您的手机上可能已启用**免打扰**（**DND**）。DND适用于促销短信。因此，在这种情况下，您可以更改文本消息首选项部分中的默认消息类型，如下面的截图所示：
- en: '![](img/00093.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00093.jpeg)'
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: That's it, we are done with configuring the domain with the Quote API application!
    Now we are going to use the configured domain to access the API.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，我们已经完成了配置域名与Quote API应用程序！现在我们将使用配置的域名来访问API。
- en: Deployment
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署
- en: Zappa deployment requires the `zappa_settings.json` file, which generates the `zappa
    init` command. But we already have the `zappa_setttings.json` file, so we don't
    need to run this command again.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa部署需要`zappa_settings.json`文件，该文件生成`zappa init`命令。但我们已经有了`zappa_setttings.json`文件，所以不需要再次运行此命令。
- en: If you are deploying the application for the first time, you would need to use `zappa
    deploy <stage_name>`, and if the application is already deployed, then you would
    need to use `zappa update <stage_name>`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是第一次部署应用程序，您需要使用`zappa deploy <stage_name>`，如果应用程序已经部署，则需要使用`zappa update
    <stage_name>`。
- en: '[PRE28]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Wow! We deployed the Quote API application successfully! Now you see that the
    configured domain is up and runing with the Quote API application.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们成功部署了Quote API应用程序！现在您可以看到配置的域名已经与Quote API应用程序一起运行。
- en: Let's move to the next section, where we will see the execution of the Quote
    API application.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到下一部分，在那里我们将看到Quote API应用程序的执行情况。
- en: Quote API execution
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报价API执行
- en: We are going to use the `curl` command-line tool ([https://curl.haxx.se/](https://curl.haxx.se/)).
    It makes interaction with any HTTP/HTTPS links from the command line very easy
    indeed. (Developers tend to use it more while writing Shell scripts, though.)
    Let's see the execution of each API.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`curl`命令行工具（[https://curl.haxx.se/](https://curl.haxx.se/)）。它使得从命令行与任何HTTP/HTTPS链接进行交互变得非常容易。（尽管开发人员更倾向于在编写Shell脚本时更多地使用它。）让我们看看每个API的执行情况。
- en: The daily quote API
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每日报价API
- en: '[PRE30]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Daily quote SMS subscription
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每日报价短信订阅
- en: We have integrated Amazon SNS to implement the SMS subscription feature. We
    designed the API `/subscribe?mobile=<mobile_number>&otp=<otp_code>` to create
    a subscription for getting daily quote messages on registered mobiles.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经集成了Amazon SNS来实现短信订阅功能。我们设计了API `/subscribe?mobile=<mobile_number>&otp=<otp_code>`
    用于在注册的手机上获取每日报价消息的订阅。
- en: 'The following is a log snippet showing the execution of the subscription API:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是日志片段，显示了订阅API的执行情况：
- en: '[PRE32]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'That''s it! We''ve already scheduled an event to publish the daily quote message
    to the relevant SNS topic, which will broadcast to all subscriptions. As a result,
    subscribers will now receive a quote SMS on a daily basis. Once you hit this API,
    it creates an SNS subscription. The following is a screenshot of the Amazon SNS
    web console:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们已经安排了一个事件来发布每日报价消息到相关的SNS主题，这将广播到所有订阅。因此，订阅者现在将每天收到一条报价短信。一旦你调用这个API，它就会创建一个SNS订阅。以下是亚马逊SNS网络控制台的屏幕截图：
- en: '![](img/00094.jpeg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00094.jpeg)'
- en: You can see one subscription record has been created. Now on every message that
    is publish, this subscription will receive the published message.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到已经创建了一个订阅记录。现在在每条发布的消息上，这个订阅将接收到已发布的消息。
- en: Daily quote SMS unsubscription
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每日报价短信取消订阅
- en: The unsubscription API will be responsible for removing any subscribed mobile
    numbers. This API has a similar workflow to the `/subscribe` API, using something
    very close to `/subscribe?mobile=<mobile_number>`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 取消订阅API将负责移除任何已订阅的手机号码。这个API的工作流程类似于`/subscribe` API，使用了非常接近`/subscribe?mobile=<mobile_number>`的东西。
- en: '[PRE33]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This removes the related subscription from Amazon SNS subscriptions. The following
    is a screenshot of the Amazon SNS web console following execution of the unsubscription
    API:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从亚马逊SNS订阅中移除相关的订阅。以下是取消订阅API执行后亚马逊SNS网络控制台的屏幕截图：
- en: '![](img/00095.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00095.jpeg)'
- en: You can see that the subscription that was there has now been removed, and so
    we've achieve the SMS subscription/unsubscription alongside an asynchronous execution
    mechanism.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到原来的订阅已经被移除了，所以我们已经实现了短信订阅/取消订阅以及异步执行机制。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the asynchronous workflow and its usage. We
    also explored in detail the asynchronous invocation of AWS Lambda functions using
    Zappa. In order to demonstrate asynchronous Lambda funtion execution, we implemented
    the Quote API application along with an SMS subscription feature. I hope you enjoyed
    this chapter and that it was really beneficial to you!
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于异步工作流及其用法。我们还详细探讨了使用Zappa异步调用AWS Lambda函数。为了演示异步Lambda函数的执行，我们实现了报价API应用程序以及短信订阅功能。希望你喜欢本章，并且对你有所帮助！
- en: Now we are going to see some advanced Zappa configurations in order to utilize
    the power of Zappa's automation process for maintaining application deployment.
    Let's get ready for the next chapter and move your journey toward a new adventure.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到一些高级的Zappa配置，以便利用Zappa的自动化流程来维护应用程序部署的能力。让我们为下一章做好准备，开始你的新冒险之旅。
- en: Questions
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is AWS SNS?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是AWS SNS？
- en: How does AWS Lambda invoke an SNS topic?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda如何调用SNS主题？
