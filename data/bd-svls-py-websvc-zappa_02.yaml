- en: Getting Started with Zappa
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zappa入门
- en: Previously, we learned about creating a serverless application using the AWS
    Web Console and AWS CLI. Now, we are going to learn about Zappa and automating
    operations for creating a serverless application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们学习了如何使用AWS Web控制台和AWS CLI创建无服务器应用程序。现在，我们将学习Zappa和自动化操作，以创建无服务器应用程序。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is Zappa?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Zappa？
- en: Installing and configuring Zappa
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置Zappa
- en: Building, testing, and deploying a Python web service using Zappa
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Zappa构建、测试和部署Python Web服务
- en: Zappa's uses
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zappa的用途
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Before moving ahead, let's ensure we fulfill the technical requirements. The
    following subsections will go over the hardware and software requirements for
    this chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们确保满足技术要求。接下来的小节将介绍本章的硬件和软件要求。
- en: Hardware
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件
- en: 'For demonstration purposes, we used a basic configured machine with the following
    specification:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示目的，我们使用了一个基本配置的机器，具体规格如下：
- en: Memory—16GB
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存—16GB
- en: Processor—Intel Core i5
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理器—Intel Core i5
- en: CPU—2.30GHz x 4
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU—2.30GHz x 4
- en: Graphics—Intel HD Graphics 520
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形—Intel HD Graphics 520
- en: Software
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件
- en: 'The following are the software specifications:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是软件规格：
- en: OS—Ubuntu 16.04 LTS
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OS—Ubuntu 16.04 LTS
- en: OS-Type—64 bit
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OS类型—64位
- en: Python 3.6
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6
- en: Python development packages: `build-essential`, `python-dev`, and `python-virtualenv`
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python开发包：`build-essential`、`python-dev`和`python-virtualenv`
- en: AWS credentials and AWS CLI
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS凭据和AWS CLI
- en: Zappa
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zappa
- en: We will go over a detailed description for setting up the environment in the
    upcoming sections. In the meantime, you can configure essential packages such
    as `python3.6` and `awscli`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中详细描述设置环境的过程。与此同时，你可以配置诸如`python3.6`和`awscli`等必要的软件包。
- en: What is Zappa?
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Zappa？
- en: Zappa is an open source tool that was developed and designed by Rich Jones,
    founder/CTO of Gun.io ([https://www.gun.io/](https://www.gun.io/)). Zappa was
    mainly designed to build and deploy serverless Python applications on AWS Lambda
    and API Gateway.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa是一个开源工具，由Gun.io的创始人/CTO Rich Jones开发和设计（[https://www.gun.io/](https://www.gun.io/)）。Zappa主要设计用于在AWS
    Lambda和API Gateway上构建和部署无服务器Python应用程序。
- en: Zappa is great for deploying serverless Python microservices with frameworks
    such as Flask and Bottle for hosting large web applications and CMSes with Django.
    You can also deploy any Python WSGI application as well.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa非常适合使用Flask和Bottle等框架部署无服务器Python微服务，用于托管大型Web应用程序和CMSes的Django。你也可以部署任何Python
    WSGI应用程序。
- en: In the previous chapter, we implemented the basic hello world microservice,
    using AWS Lambda and API Gateway. Zappa automates all these manual processes and
    gives us a handy tool to build and deploy Python applications.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用AWS Lambda和API Gateway实现了基本的hello world微服务。Zappa自动化了所有这些手动流程，并为我们提供了一个方便的工具来构建和部署Python应用程序。
- en: 'It''s as easy as this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 就像这样简单：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As we described earlier, the tradition of web hosting is where the server needs
    to be always online, listening to HTTP requests and processing the requests one
    by one. If the queue of incoming HTTP requests grows, then a timeout error will
    occur as the server will have failed to serve that many requests per second.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所描述的，传统的Web托管是指服务器需要始终在线，监听HTTP请求并逐个处理请求。如果传入的HTTP请求队列增长，那么服务器将无法每秒处理那么多请求，就会出现超时错误。
- en: API Gateway serves each request with a virtual HTTP server with auto scalability.
    That's the reason it can serve a single request to millions of requests without
    fail. Hence, we get the infinite scaling with zero downtime infraction of your
    current deployment cost.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: API Gateway使用虚拟HTTP服务器为每个请求提供自动扩展。这就是它可以在不失败的情况下为数百万个请求提供服务的原因。因此，我们可以在当前部署成本的零停机侵害下获得无限扩展。
- en: Now, we are going to go through an app demonstration, but, before we do that,
    let's configure Zappa on your machine, which we will go through in the upcoming
    section.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将进行一个应用程序演示，但在此之前，让我们在你的机器上配置Zappa，我们将在接下来的章节中介绍。
- en: Installing and configuring Zappa
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Zappa
- en: 'Installing Zappa is a straightforward task, but before we move ahead, we need
    to configure the prerequisites. Make sure you have Python 2.7 or Python 3.6 and
    have a valid AWS account. Now, you need to configure the AWS credentials on your
    machine with `help awscli`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Zappa是一项简单的任务，但在继续之前，我们需要配置先决条件。确保你有Python 2.7或Python 3.6，并且有一个有效的AWS账户。现在，你需要在你的机器上使用`help
    awscli`配置AWS凭据：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Configure the AWS credentials using the `aws configure` command, as shown in
    the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`aws configure`命令配置AWS凭据，如下截图所示：
- en: '![](img/00027.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00027.jpeg)'
- en: The configuration for AWS credentials requires that you have an AWS Access Key
    ID, AWS Secret Access Key, Default region name, and a Default output format.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 配置AWS凭据要求你有AWS访问密钥ID、AWS秘密访问密钥、默认区域名称和默认输出格式。
- en: 'You can get AWS credential information from your My Security Credentials page,
    as shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从“我的安全凭据”页面获取AWS凭据信息，如下截图所示：
- en: '![](img/00028.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00028.jpeg)'
- en: Once you've configured your AWS credentials, we can move ahead with Zappa's
    installation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你配置了AWS凭据，我们就可以继续安装Zappa了。
- en: 'Zappa must be installed in a virtual environment. It''s strongly recommended
    that you create a virtual environment and activate it before installing Zappa.
    I prefer to use the `virtualenv` tool. There are other tools available to manage
    your virtual environments:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa必须安装在虚拟环境中。强烈建议在安装Zappa之前创建一个虚拟环境并激活它。我倾向于使用`virtualenv`工具。还有其他可用于管理虚拟环境的工具：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, we are creating a virtual environment named `env` and using `python3.6`,
    where `-p` indicates the Python version. Now, activate the virtual environment
    as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个名为`env`的虚拟环境，并使用`python3.6`，其中`-p`表示Python版本。现在，按照以下步骤激活虚拟环境：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We are set to go now, so let''s install Zappa using `pip`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了，让我们使用`pip`安装Zappa：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, we are ready to launch Zappa. In the following sections, we will be creating
    a small program to demonstrate how we can make Zappa's deployment serverless.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备启动Zappa。在接下来的章节中，我们将创建一个小程序，演示如何使Zappa的部署变成无服务器。
- en: Building, testing, and deploying a Python web service using Zappa
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zappa构建、测试和部署Python Web服务
- en: 'We are going to create a simple hello world program as a microservice using
    Python''s Bottle framework. Let''s follow some basic steps to configure a small
    project using the Bottle framework:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Python的Bottle框架创建一个简单的hello world程序作为微服务。让我们按照一些基本步骤来配置一个使用Bottle框架的小项目：
- en: 'First, we will create a new project directory named `lambda_bottle_poc`:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个名为`lambda_bottle_poc`的新项目目录：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s create a virtual environment inside the `lambda_bottle_poc` directory:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`lambda_bottle_poc`目录中创建一个虚拟环境：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is the basic hello world program using the Bottle framework:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是使用Bottle框架的基本hello world程序：
- en: '![](img/00029.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00029.jpeg)'
- en: Now it's time to deploy the program as serverless on AWS Lambda and expose the
    `/hello` API via API Gateway. In the previous chapter, we described the manual
    process to deploy the Python application, using AWS console and AWS CLI, which
    was a really big challenge.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将程序部署为AWS Lambda上的无服务器，并通过API Gateway公开`/hello` API。在上一章中，我们描述了使用AWS控制台和AWS
    CLI手动部署Python应用程序的过程，这是一个非常大的挑战。
- en: But with the help of Zappa, all manual processes of the AWS console and AWS
    CLI are automated and provides a rapid process to deploy and maintain your application
    in a serverless environment.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 但借助Zappa，所有AWS控制台和AWS CLI的手动流程都被自动化，并提供了一种快速的方式来在无服务器环境中部署和维护您的应用程序。
- en: Building the deployment package
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建部署包
- en: Let's initialize Zappa using the `zappa init` command. This command helps you
    to create and deploy Python applications. This command runs in a user interactive
    mode with some basic questions required so that we can set up the deployment process.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`zappa init`命令初始化Zappa。这个命令可以帮助您创建和部署Python应用程序。这个命令以用户交互模式运行，并提出一些基本问题，以便我们可以设置部署过程。
- en: By the end of the questionnaire, Zappa creates a JSON file named `zappa_settings.json.`
    This file is nothing but the backbone of Zappa as it maintains the mapping information
    that's used by Zappa internally.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 问卷结束时，Zappa创建了一个名为`zappa_settings.json`的JSON文件。这个文件实际上就是Zappa的支撑，因为它维护了Zappa内部使用的映射信息。
- en: 'We will discuss the Zappa `init` command process in detail in a few moments.
    Before that, just have a look at following screenshot, which describes the flow
    of the `zappa init` command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的几分钟内详细讨论Zappa的`init`命令过程。在那之前，先看一下以下截图，描述了`zappa init`命令的流程：
- en: '![](img/00030.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00030.jpeg)'
- en: As you can see, `zappa init` starts up user interactive mode with some questions.
    Let's look at some information about each question.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`zappa init`启动了用户交互模式，并提出了一些问题。让我们看看每个问题的一些信息。
- en: What do you call this environment? (default dev)
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您想如何称呼这个环境？（默认开发）
- en: Amazon API Gateway provides a mechanism to maintain different environment stages
    of your hosted API. For example, you can create environment stages for development,
    staging, and production.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon API Gateway提供了一种机制来维护托管API的不同环境阶段。例如，您可以为开发、暂存和生产创建环境阶段。
- en: With the help of Zappa, you can manage environment stages in a very easy way.
    In answer to the preceding question, you can define your own environment stage
    name or leave it empty to consider the default stage name as `dev`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 借助Zappa，您可以非常轻松地管理环境阶段。对于前面的问题，您可以定义自己的环境阶段名称，或者将其留空以考虑默认的阶段名称为`dev`。
- en: What do you want to call your bucket? (default zappa-2o2zd8dg4)
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你想给你的存储桶起什么名字？（默认zappa-2o2zd8dg4）
- en: Zappa deployments will need to be uploaded to a private Amazon S3 bucket. AWS
    Lambda requires two types of code entry, such as inline code and uploading the
    ZIP. If the ZIP file size exceeds 10 MB, then consider uploading the ZIP onto
    Amazon S3\. This is why Zappa, by default, creates a bucket which will be used
    to upload the deployment ZIP file and refer to AWS Lambda.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa部署将需要上传到私有的Amazon S3存储桶。AWS Lambda需要两种类型的代码输入，即内联代码和上传ZIP文件。如果ZIP文件大小超过10MB，则考虑将ZIP文件上传到Amazon
    S3。这就是为什么Zappa默认创建一个存储桶，用于上传部署ZIP文件并引用AWS Lambda。
- en: You can provide your own existing bucket name or choose the default, as suggested
    by Zappa. If the bucket doesn't exist, then Zappa will automatically create one
    for you.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以提供自己现有的存储桶名称，或者选择由Zappa建议的默认名称。如果存储桶不存在，Zappa将自动为您创建一个。
- en: What's your modular path to your app function? (default dev)
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的应用功能的模块化路径是什么？（默认开发）
- en: The AWS Lambda function requires an attribute, such as `lambda_handler`, which
    points to a function as an entry point for Lambda execution. Hence, we need to
    provide information about the function name with a modular path such as `<filename>.<function_name/app_name>` to
    Zappa.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda函数需要一个属性，比如`lambda_handler`，它指向一个函数作为Lambda执行的入口点。因此，我们需要提供有关函数名称的信息，以模块化路径的形式，例如`<filename>.<function_name/app_name>`给Zappa。
- en: In our case, we have a file named `hello.py` and an app object that was created
    using the `Bottle` class of Python's Bottle framework. Hence, the answer to this
    question is `hello.app`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们有一个名为`hello.py`的文件，以及使用Python Bottle框架的`Bottle`类创建的应用对象。因此，对于这个问题的答案是`hello.app`。
- en: Would you like to deploy the application globally? (default n)
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您想全球部署应用程序吗？（默认否）
- en: AWS provides a feature to extend the Lambda services to all available regions.
    That’s what you should do if you want to make your service available globally
    with much less latency. Zappa supports this feature, which will enable you to
    extend the Lambda service in all regions without any manual effort.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: AWS提供了一个功能，可以将Lambda服务扩展到所有可用的区域。如果您希望使您的服务全球可用，并且延迟更少，那就是您应该做的。Zappa支持这个功能，它将使您能够在所有区域扩展Lambda服务，而无需任何手动操作。
- en: Finally, you would get a `zappa_settings.json` file, which will have all configurations
    related to your deployments. Let's have a look at the `zappa_settings.json` file
    in the next section.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将得到一个`zappa_settings.json`文件，其中包含了与您的部署相关的所有配置。让我们在下一节中查看`zappa_settings.json`文件。
- en: The zappa_settings.json file
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: zappa_settings.json文件
- en: Once you've finished the questionnaire session, Zappa creates a basic `zappa_settings.json`
    file based on your input. `zappa_settings.json` plays an important role in configuring
    Zappa with your project. If you initialize Zappa in your existing project (`Django/Flask/Pyramid/Bottle`),
    then Zappa automatically detects the type of project and creates the `zappa_settings.json` file
    accordingly.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 完成问卷调查后，Zappa会根据您的输入创建一个基本的`zappa_settings.json`文件。`zappa_settings.json`在配置Zappa与您的项目时起着重要作用。如果您在现有项目（`Django/Flask/Pyramid/Bottle`）中初始化Zappa，那么Zappa会自动检测项目类型，并相应地创建`zappa_settings.json`文件。
- en: 'The following is the content of our newly created `zappa_settings.json` file
    for the hello world program:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们新创建的`zappa_settings.json`文件的内容，用于hello world程序：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For a Django project, it uses `django_settings` instead of `app_function`.
    `django_settings` needs to be initialized with the path to your Django settings:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Django项目，它使用`django_settings`而不是`app_function`。`django_settings`需要用您的Django设置的路径进行初始化：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding configuration is enough to deploy a basic Python web application.
    Let's move on and deploy hello world as a serverless application.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置足以部署一个基本的Python Web应用程序。让我们继续部署hello world作为无服务器应用程序。
- en: Deploying and testing hello world
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署和测试hello world
- en: 'Zappa deployment is super easy, as you only need to run a single command in
    order start the deployment:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa部署非常简单，因为您只需要运行一个命令来开始部署：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'That''s it! We are done with deployment. Now, let''s deploy the hello world
    program. The following screenshot describes the deployment process:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们已经完成了部署。现在，让我们部署hello world程序。以下截图描述了部署过程：
- en: '![](img/00031.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00031.jpeg)'
- en: 'Once the deployment completes, we get the API URL endpoint. Let''s test the
    hello world application by hitting the API URL with the `/hello` endpoint:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 部署完成后，我们会得到API URL端点。让我们通过访问`/hello`端点的API URL来测试hello world应用程序：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After running the preceding command, you will see the following output:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令后，您将看到以下输出：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It's really amazing to be able to configure the service and deploy it in a few
    seconds. Now, we will see its basic uses related to the `zappa_settings.json` file
    in detail.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 能够在几秒钟内配置服务并部署真是太神奇了。现在，我们将详细了解与`zappa_settings.json`文件相关的基本用法。
- en: Basic uses
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本用法
- en: Zappa covers each and every deployment process. Let's have a detailed discussion
    regarding the deployment flow with Zappa.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa涵盖了每一个部署过程。让我们详细讨论一下Zappa的部署流程。
- en: Initial deployments
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始部署
- en: 'Once you are done with initializing Zappa, then you can deploy the application
    on to the `production` stage in a single command, as shown in the following code
    snippet:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您初始化了Zappa，您就可以通过单个命令将应用程序部署到`production`阶段，如下面的代码片段所示：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When you call the `$ zappa deploy` command, Zappa performs some tasks to complete
    the deployment. The following is the internal flow and process of Zappa regarding
    deployment:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调用`$ zappa deploy`命令时，Zappa会执行一些任务来完成部署。以下是Zappa关于部署的内部流程和过程：
- en: Compress the application code in your local environment into a ZIP archive by
    replacing any dependencies with versions in a precompiled Lambda package.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将本地环境中的应用程序代码压缩成ZIP存档文件，并用预编译的Lambda包中的版本替换任何依赖项。
- en: Set up the Lambda `handler` function with the required WSGI middleware based
    on your application's type.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用所需的WSGI中间件设置Lambda `handler`函数。
- en: Upload the generated archive from the preceding two steps into the Amazon S3
    bucket.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前两个步骤生成的存档上传到Amazon S3存储桶。
- en: Create and manage the necessary AWS IAM policies and roles.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建和管理必要的AWS IAM策略和角色。
- en: Creates the AWS Lambda function with reference to the uploaded ZIP archive file
    on the AWS S3 bucket.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用上传到AWS S3存储桶的ZIP存档文件创建AWS Lambda函数。
- en: Create the AWS API Gateway resources along with the different stages as per
    Zappa configuration.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据Zappa配置创建AWS API Gateway资源以及不同的阶段。
- en: Create the WSGI compatible routes for the API Gateway resources.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为API Gateway资源创建WSGI兼容路由。
- en: Link the API Gateway routes to the AWS Lambda functions.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将API Gateway路由链接到AWS Lambda函数。
- en: Finally, remove the ZIP file from AWS S3.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，从AWS S3中删除ZIP文件。
- en: 'Note: `lambda-packages` ([https://github.com/Miserlou/lambda-packages](https://github.com/Miserlou/lambda-packages))
    is an open source repository that''s maintained by the Zappa community. This repository
    contains the most essential Python libraries as precompiled binaries, which will
    be compatible with AWS Lambda.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：`lambda-packages`（[https://github.com/Miserlou/lambda-packages](https://github.com/Miserlou/lambda-packages)）是由Zappa社区维护的开源存储库。该存储库包含了最基本的Python库作为预编译的二进制文件，这些文件将与AWS
    Lambda兼容。
- en: This is how Zappa deals with the deployment process—It completes all of these
    tasks on its own and gives you the honor of deploying your application with a
    single command.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Zappa处理部署过程的方式——它会自行完成所有这些任务，并让您通过一个命令来部署您的应用程序。
- en: Update
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新
- en: 'If you have already deployed your application, then you are required to update
    your latest application code on AWS Lambda by simply using the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经部署了应用程序，那么您只需使用以下命令简单地在AWS Lambda上更新最新的应用程序代码：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can compare this to using `zappa deploy`, which only updates a few tasks.
    They are mentioned here:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其与仅更新一些任务的`zappa deploy`进行比较。它们在这里提到：
- en: It creates an archive ZIP with the latest application code; the local environment
    is a precompiled Lambda package
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用最新的应用程序代码创建一个存档ZIP；本地环境是一个预编译的Lambda包
- en: It uploads the archived ZIP on to AWS S3
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将存档的ZIP上传到AWS S3
- en: It updates the AWS Lambda
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新AWS Lambda
- en: That's it! We're done with updating the existing deployment, and it only took
    a couple of seconds.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们已经完成了更新现有的部署，而且只花了几秒钟。
- en: Status
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态
- en: 'You can simply check the status of your application deployment by running the
    following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令简单地检查应用程序部署的状态：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will print detailed information about the AWS Lambda function, schedule
    events, and the API Gateway.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印有关AWS Lambda函数、计划事件和API Gateway的详细信息。
- en: Tailing logs
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尾随日志
- en: 'Zappa provides a facility for watching the logs related to your deployment.
    You can simply use the following command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa提供了一个查看与部署相关日志的功能。你可以简单地使用以下命令：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will print all logs related to HTTP requests and AWS events. If you want
    to print logs related to HTTP requests, you can simply pass the `--http` argument:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印与HTTP请求和AWS事件相关的所有日志。如果你想打印与HTTP请求相关的日志，你可以简单地传递“--http”参数：
- en: '[PRE16]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can reverse the preceding command with non-HTTP events and log messages
    by simply using the following code::'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过简单地使用以下代码来撤销前面的命令，从而反转非HTTP事件和日志消息：
- en: '[PRE17]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can also limit the log with respect to time using the `--since` argument:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用“--since”参数限制日志的时间：
- en: '[PRE18]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can also filter the logs with the `--filter` argument, for example:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用“--filter”参数过滤日志，例如：
- en: '[PRE19]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will show only HTTP `POST` requests for the last hour. This uses the AWS
    CloudWatch log-filter pattern ([http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html](http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html)).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这将仅显示最近一小时的HTTP“POST”请求。这使用AWS CloudWatch日志过滤器模式（[http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html](http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html)）。
- en: Rollback
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回滚
- en: 'AWS Lambda maintains the revision of your deployments. You can rollback to
    the previously deployed version by providing a revision number, as shown here:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda维护你的部署的修订版。你可以通过提供一个修订号来回滚到先前部署的版本，如下所示：
- en: '[PRE20]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will simply revert the Lambda code with the previously uploaded archived
    ZIP.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这将简单地将Lambda代码恢复到先前上传的归档ZIP。
- en: Undeploy
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消部署
- en: 'If you wanted to remove your deployed application completely, then you simply
    use the following command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想完全删除你部署的应用程序，那么你只需使用以下命令：
- en: '[PRE21]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This will remove the published AWS Lambda and API Gateway. If you want the
    logs related to your application from AWS CloudWatch, then you simply pass the
    argument along with the preceding command, as shown here:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这将删除发布的AWS Lambda和API Gateway。如果你想要与你的应用程序相关的AWS CloudWatch日志，那么你只需在前面的命令中传递参数，如下所示：
- en: '[PRE22]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This will purge the logs from AWS CloudWatch.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这将清除AWS CloudWatch中的日志。
- en: Package
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包
- en: 'Zappa provides a command to generate a build package archive locally without
    deploying the application:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa提供了一个命令，在不部署应用程序的情况下在本地生成一个构建包归档：
- en: '[PRE23]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When you run this command, Zappa automatically packages your active virtual
    environment into an AWS Lambda compatible package.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个命令时，Zappa会自动将你的活动虚拟环境打包成AWS Lambda兼容的包。
- en: 'Internally, it replaces any local dependencies with AWS Lambda compatible,
    precompiled versions. These dependencies are included in the following order:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，它用AWS Lambda兼容的、预编译版本替换任何本地依赖。这些依赖按以下顺序包括：
- en: Lambda compatible many Linux wheels from the local cache
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda兼容许多来自本地缓存的Linux wheels
- en: Lambda compatible many Linux wheels from PyPi
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda兼容许多来自PyPi的Linux wheels
- en: Lambda-specific versions from Lambda packages ([https://github.com/Miserlou/lambda-packages](https://github.com/Miserlou/lambda-packages))
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda包中的Lambda特定版本（[https://github.com/Miserlou/lambda-packages](https://github.com/Miserlou/lambda-packages)）
- en: Archive the active virtual environment
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 归档活动虚拟环境
- en: Archive the project directory
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 归档项目目录
- en: While processing, packaging, and packing, Zappa ignores some unnecessary files
    such as `.pyc` files. If they are available, then `.py` will get ignored. Zappa
    also sets the correct execution permissions, configures package settings, and
    creates a unique, auditable package manifest file.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理、打包和打包时，Zappa会忽略一些不必要的文件，比如“.pyc”文件。如果它们可用，那么“.py”将被忽略。Zappa还设置正确的执行权限，配置包设置，并创建一个唯一的、可审计的包清单文件。
- en: 'The generated package archive will be Lambda compatible. You can set a callback
    function that will be invoked once the archive is created:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的包归档将与Lambda兼容。你可以设置一个回调函数，一旦创建了归档，它将被调用：
- en: '[PRE24]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, production is your stage name and under callback, you can set the callback
    method by mapping to `"zip"`. This can help you write your own custom deployment
    automation.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，production是你的舞台名称，在回调中，你可以通过映射到“zip”来设置回调方法。这可以帮助你编写自己的自定义部署自动化。
- en: We have seen the basic uses of Zappa. Now it's time to do some practical work.
    We are going to build some Python application developments with Zappa, so stay
    tuned!
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了Zappa的基本用法。现在是时候做一些实际的工作了。我们将使用Zappa构建一些Python应用程序开发，敬请关注！
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Zappa provides flexible features so that you can perform the deployment process.
    We covered the basic uses of Zappa and gained an understanding of the packaging
    and deployment process. Zappa makes it very simple and easy for developers to
    configure and perform the deployment of an application to a serverless environment.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa提供了灵活的功能，让你可以执行部署过程。我们介绍了Zappa的基本用法，并了解了打包和部署过程。Zappa让开发人员可以非常简单和容易地配置和执行应用程序到无服务器环境的部署。
- en: Questions
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is Zappa?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zappa是什么？
- en: How can we secure the application in AWS?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在AWS中保护应用程序？
