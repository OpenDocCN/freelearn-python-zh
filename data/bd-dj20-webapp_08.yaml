- en: Testing Answerly
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Answerly
- en: In the preceding chapter, we added search to Answerly, our question and answer
    site. However, as our site's functionality grows, we need to avoid breaking the
    existing functionality. To make sure that our code keeps working, we will take
    a closer look at testing our Django project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们为我们的问题和答案网站Answerly添加了搜索功能。然而，随着我们网站功能的增长，我们需要避免破坏现有的功能。为了确保我们的代码保持正常运行，我们将更仔细地测试我们的Django项目。
- en: 'In this chapter, we will do the following things:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将做以下事情：
- en: Install Coverage.py to measure code coverage
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Coverage.py以测量代码覆盖率
- en: Measure code coverage for our Django project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量我们的Django项目的代码覆盖率
- en: Write a unit test for our model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的模型编写单元测试
- en: Write a unit test for a view
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为视图编写单元测试
- en: Write a Django integration tests for a view
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为视图编写Django集成测试
- en: Write a Selenium integration test for a view
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为视图编写Selenium集成测试
- en: Let's start by installing Coverage.py.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从安装Coverage.py开始。
- en: Installing Coverage.py
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Coverage.py
- en: '**Coverage.py** is the most popular Python code coverage tool at the time of
    writing. It’s very easy to install as it’s available from PyPI. Let''s add it
    to our `requirements.txt` file:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**Coverage.py**是目前最流行的Python代码覆盖工具。它非常容易安装，因为可以从PyPI获取。让我们将其添加到我们的`requirements.txt`文件中：'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then we can install Coverage.py using pip:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用pip安装Coverage.py：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now that we have Coverage.py installed, we can start measuring our code coverage.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Coverage.py，我们可以开始测量我们的代码覆盖率。
- en: Creating a unit test for Question.save()
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Question.save()创建一个单元测试
- en: Django helps you write unit tests to test individual units of code. If our code
    relies on an external service, then we can use the standard `unittest.mock` library
    to mock that API, preventing requests to outside systems.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Django帮助您编写单元测试来测试代码的各个单元。如果我们的代码依赖于外部服务，那么我们可以使用标准的`unittest.mock`库来模拟该API，防止对外部系统的请求。
- en: 'Let''s write a test for the `Question.save()` method to verify that when we
    save a `Question` it will be upserted into Elasticsearch. We''ll write the test
    in `django/qanda/tests.py`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为`Question.save()`方法编写一个测试，以验证当我们保存一个`Question`时，它将被插入到Elasticsearch中。我们将在`django/qanda/tests.py`中编写这个测试：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code sample, we created a `TestCase` with a single test method.
    The method creates a user, saves a new `Question`, and then asserts that the mock
    has behaved correctly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码示例中，我们创建了一个带有单个测试方法的`TestCase`。该方法创建一个用户，保存一个新的`Question`，然后断言模拟行为是否正确。
- en: Like most `TestCase` s, `QuestionSaveTestCase` uses both Django's testing API
    and code from Python's `unittest` library (for example, `unittest.mock.patch()`).
    Let's look more closely at how Django's testing API makes testing easier.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 像大多数`TestCase`一样，`QuestionSaveTestCase`既使用了Django的测试API，也使用了Python的`unittest`库中的代码（例如，`unittest.mock.patch()`）。让我们更仔细地看看Django的测试API如何使测试更容易。
- en: '`QuestionSaveTestCase` extends `django.test.TestCase` instead of `unittest.TestCase`
    because Django''s `TestCase` offers lots of useful features, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`QuestionSaveTestCase`扩展了`django.test.TestCase`而不是`unittest.TestCase`，因为Django的`TestCase`提供了许多有用的功能，如下所示：'
- en: The entire test case and each test are atomic database operations
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个测试用例和每个测试都是原子数据库操作
- en: Django takes care of clearing the database before and after each test
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django在每次测试前后都会清除数据库
- en: '`TestCase` offers convenient `assert*()` methods such as `self.assertInHTML()`
    (discussed more in the *Creating a unit test for a view* section)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TestCase`提供了方便的`assert*()`方法，比如`self.assertInHTML()`（在*为视图创建单元测试*部分中更多讨论）'
- en: A fake HTTP client to create integration tests (discussed more in the *Creating
    an integration test for a view* section)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个虚假的HTTP客户端来创建集成测试（在*为视图创建集成测试*部分中更多讨论）
- en: Since Django's `TestCase` extends `unittest.TestCase`, it still understands
    and performs correctly when it hits a regular `AssertionError`. So, if `mock_client.update.assert_called_once_with()`
    raises an `AssertionError` exception, Django's test runner knows how to handle
    it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Django的`TestCase`扩展了`unittest.TestCase`，因此当它遇到常规的`AssertionError`时，它仍然能够理解并正确执行。因此，如果`mock_client.update.assert_called_once_with()`引发`AssertionError`异常，Django的测试运行器知道如何处理它。
- en: 'Let''s run our tests with `manage.py`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用`manage.py`运行我们的测试：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we know how to test a model, we can move on to testing views. As we're
    testing our views, though, we will need to create model instances. Using model's
    default managers to create model instances will become too verbose. Next, let's
    make it easier to create the models necessary for testing with Factory Boy.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何测试模型，我们可以继续测试视图。然而，在测试视图时，我们需要创建模型实例。使用模型的默认管理器来创建模型实例会变得太啰嗦。接下来，让我们使用Factory
    Boy更容易地创建测试所需的模型。
- en: Creating models for tests with Factory Boy
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Factory Boy创建测试模型
- en: In our preceding test, we made a `User` model using `User.models.create_user`.
    However, that required us to provide a username and password, neither of which
    we really cared about. We just need a user, not a particular user. For many of
    our tests, the same principle will hold true for `Question` s and `Answer` s.
    The Factory Boy library will help us concisely create models in tests.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的测试中，我们使用`User.models.create_user`创建了一个`User`模型。然而，这要求我们提供用户名和密码，而我们并不真正关心。我们只需要一个用户，而不是特定的用户。对于我们的许多测试来说，`Question`和`Answer`也是如此。Factory
    Boy库将帮助我们在测试中简洁地创建模型。
- en: Factory Boy is particularly useful for Django developers because it knows how
    to create models based from Django `Model` classes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Factory Boy对Django开发人员特别有用，因为它知道如何基于Django的`Model`类创建模型。
- en: 'Let''s install Factory Boy:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装Factory Boy：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this section, we'll use Factory Boy to create a `UserFactory` class and a
    `QuestionFactory` class. Since a `Question` model must have a user in its `user`
    field, the `QuestionFactory` will show us how `Factory` classes can reference
    each other.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用Factory Boy创建一个`UserFactory`类和一个`QuestionFactory`类。由于`Question`模型必须在其`user`字段中有一个用户，`QuestionFactory`将向我们展示`Factory`类如何相互引用。
- en: Let's start with the `UserFactory`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`UserFactory`开始。
- en: Creating a UserFactory
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个UserFactory
- en: Both `Question` s and `Answer` s are related to users. This means that we'll
    need to create users in almost all our tests. Generating all the related models
    for each test using model managers is very verbose and distracting from point
    of our tests. Django offers an out-of-the-box support for fixtures of our tests.
    However, Django's fixtures are separate JSON/YAML files that need to be manually
    maintained or they will grow out of sync and cause problems. Factory Boy will
    help us by letting use code, a `UserFactory` that can concisely create users model
    instances at runtime based on the state of the current User model.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`Question`和`Answer`都与用户相关联。这意味着我们几乎在所有测试中都需要创建用户。使用模型管理器为每个测试生成所有相关模型非常冗长，并且分散了我们测试的重点。Django为我们的测试提供了开箱即用的支持。但是，Django的fixtures是单独的JSON/YAML文件，需要手动维护，否则它们将变得不同步并引起问题。Factory
    Boy将通过让我们使用代码来帮助我们，即`UserFactory`，可以根据当前用户模型的状态在运行时简洁地创建用户模型实例。'
- en: Our `UserFactory` will be derived from Factory Boy's `DjangoModelFactory` class,
    which knows how to deal with Django models. We'll use an inner `Meta` class to
    tell `UserFactory` which model it's creating (note how this is similar to the
    `Form` API). We'll also add class attributes to tell Factory Boy how to set values
    of the model's fields. Finally, we'll override the `_create` method to make `UserFactory`
    use the manager's `create_user()` method instead of the default `create()` method.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`UserFactory`将派生自Factory Boy的`DjangoModelFactory`类，该类知道如何处理Django模型。我们将使用内部`Meta`类告诉`UserFactory`它正在创建哪个模型（请注意，这与`Form`API类似）。我们还将添加类属性以告诉Factory
    Boy如何设置模型字段的值。最后，我们将重写`_create`方法，使`UserFactory`使用管理器的`create_user()`方法而不是默认的`create()`方法。
- en: 'Let''s create our `UserFactory` in `django/users/factories.py`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`django/users/factories.py`中创建我们的`UserFactory`：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `UserFactory` subclasses the `DjangoModelFactory`. The `DjangoModelFactory`
    will look at our class's `Meta` inner class (which follows the same pattern as
    `Form`  classes).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserFactory`是`DjangoModelFactory`的子类。`DjangoModelFactory`将查看我们类的`Meta`内部类（遵循与`Form`类相同的模式）。'
- en: 'Let''s take a closer look at attributes of `UserFactory`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下`UserFactory`的属性：
- en: '`password = ''unittest''`: This sets the password for each user to be of the
    same value.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password = ''unittest''`：这将为每个用户设置相同的密码。'
- en: '`username = factory.Sequence(lambda n: ''user %d'' % n)`: `Sequence` sets a
    different value for a field each time the factory creates a model. `Sequence()`
    takes callable, passes it however many times the factory has been used, and use
    the callable''s return value as the new instance''s field value. In our case,
    our users will have usernames such as `user 0` and `user 1`.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username = factory.Sequence(lambda n: ''user %d'' % n)`: `Sequence`为每次工厂创建模型时的字段设置不同的值。`Sequence()`接受可调用对象，将其传递给工厂使用的次数，并使用可调用对象的返回值作为新实例的字段值。在我们的情况下，我们的用户将具有用户名，例如`user
    0`和`user 1`。'
- en: Finally, we overrode the `_create()` method because the `django.contrib.auth.models.User`
    model has an unusual manager. The default `_create` method of `DjangoModelFactory`
    will use the model's manager's `create()` method. This is fine for most models,
    but won't work well for the `User` model. To create a user, we should really use
    the `create_user` method so that we can pass a password in plain text and have
    it hashed for storage. This will let us authenticate as that `User`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们重写了`_create()`方法，因为`django.contrib.auth.models.User`模型具有异常的管理器。`DjangoModelFactory`的默认`_create`方法将使用模型的管理器的`create()`方法。对于大多数模型来说，这很好，但对于`User`模型来说效果不佳。要创建用户，我们应该真正使用`create_user`方法，以便我们可以传递明文密码并对其进行哈希处理以进行存储。这将让我们作为该用户进行身份验证。
- en: 'Let''s try out our factory using the Django shell:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Django shell中尝试一下我们的工厂：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this Django shell session, we will note how we can use `UserFactory`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个Django shell会话中，我们将注意到如何使用`UserFactory`：
- en: We can create new models using a single no-argument call, `UserFactory()`
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用单个无参数调用创建新模型，`UserFactory()`
- en: Each call leads to a unique username, `assert user.username != user2.username`
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次调用都会导致唯一的用户名，`assert user.username != user2.username`
- en: We can change values the factory used by providing them as arguments, `UserFactory(username='custom')`
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过提供参数来更改工厂使用的值，`UserFactory(username='custom')`
- en: Next, let's create a `QuestionFactory`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个`QuestionFactory`。
- en: Creating the QuestionFactory
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建QuestionFactory
- en: Lots of our tests will require multiple `Question` instances. However, each
    `Question` must have a user. This can lead to lots of brittle and verbose code.
    Creating a `QuestionFactory` will solve this problem.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的许多测试将需要多个`Question`实例。但是，每个`Question`必须有一个用户。这可能会导致大量脆弱和冗长的代码。创建`QuestionFactory`将解决这个问题。
- en: In the preceding example, we saw how we can use `factory.Sequence` to give each
    new model's attribute a distinct value. Factory Boy also offers `factory.SubFactory`,
    in which we can indicate that a field's value is the result of another factory.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们看到了如何使用`factory.Sequence`为每个新模型的属性赋予不同的值。Factory Boy还提供了`factory.SubFactory`，其中我们可以指示字段的值是另一个工厂的结果。
- en: 'Let''s add `QuestionFactory` to `django/qanda/factories.py`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`QuestionFactory`添加到`django/qanda/factories.py`中：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Our `QuestionFactory` is very similar to our `UserFactory`. They have the following
    things in common:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`QuestionFactory`与`UserFactory`非常相似。它们有以下共同点：
- en: Derived from the `factory.DjangoModelFactory`
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 派生自`factory.DjangoModelFactory`
- en: Have a `Meta` class
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个`Meta`类
- en: Use `factory.Sequence` to give a field a custom value
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`factory.Sequence`为字段提供自定义值
- en: Have a hardcoded value
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个硬编码的值
- en: 'There are two important differences:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个重要的区别：
- en: The `user` field of `QuestionFactory` uses `SubFactory` to give each `Question`
    a new user created with the `UserFactory`.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QuestionFactory`的`user`字段使用`SubFactory`，为每个`Question`创建一个新的用户，该用户是使用`UserFactory`创建的。'
- en: The `_create` method of `QuestionFactory` mocks the Elasticsearch service so
    that when the model is created, it doesn't try to connect to that service. Otherwise,
    it calls the default `_create()` method.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QuestionFactory`的`_create`方法模拟了Elasticsearch服务，以便在创建模型时不会尝试连接到该服务。否则，它调用默认的`_create()`方法。'
- en: To see our `QuestionFactory` in practice, let's write a unit test for our `DailyQuestionList`
    view.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到我们的`QuestionFactory`的实际应用，让我们为我们的`DailyQuestionList`视图编写一个单元测试。
- en: Creating a unit test for a view
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个视图的单元测试
- en: In this section, we'll write a view unit test for our `DailyQuestionList` view.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将为我们的`DailyQuestionList`视图编写一个视图单元测试。
- en: Unit testing a view means directly passing the view a request and asserting
    that the response matches our expectations. Since we're passing the request directly
    to the view, we also need to directly pass any arguments the view would ordinarily
    receive parsed out of the request's URL. Parsing values out of URL paths is the
    responsibility of the request routing, which we don't use in a view unit test.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对视图进行单元测试意味着直接向视图传递一个请求，并断言响应是否符合我们的期望。由于我们直接将请求传递给视图，我们还需要直接传递视图通常会接收的任何参数，这些参数从请求的URL中解析出来。从URL路径中解析值是请求路由的责任，在视图单元测试中我们不使用它。
- en: 'Let''s take a look at our `DailyQuestionListTestCase` class in `django/qanda/tests.py`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`django/qanda/tests.py`中的`DailyQuestionListTestCase`类：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s take a closer look at the new APIs we''ve seen:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下我们见过的新API：
- en: '`RequestFactory().get(path=...)`: `RequestFactory` is a utility for creating
    HTTP requests for testing views. Note that our request''s `path` is arbitrary
    here, as it won''t be used for routing.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RequestFactory().get(path=...)`: `RequestFactory`是一个用于创建测试视图的HTTP请求的实用工具。注意这里我们请求的`path`是任意的，因为它不会被用于路由。'
- en: '`DailyQuestionList.as_view()(...)`: We''ve discussed that each class-based
    view has an `as_view()` method that returns a callable, but we haven''t used it
    before. Here, we pass in the request, year, month, and day to execute the view.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DailyQuestionList.as_view()(...)`: 我们已经讨论过每个基于类的视图都有一个`as_view()`方法，它返回一个可调用对象，但我们以前没有使用过。在这里，我们传递请求、年、月和日来执行视图。'
- en: '`response.context_data[''object_list''].count()`: The response returned by
    our view still has its context. We can use this context to assert whether the
    view worked correctly more easily than if we had to evaluate the HTML.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`response.context_data[''object_list''].count()`:我们的视图返回的响应仍然保留了它的上下文。我们可以使用这个上下文来断言视图是否工作正确，比起评估HTML更容易。'
- en: '`response.rendered_content`: The `rendered_content` property lets us access
    the rendered template of the response.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`response.rendered_content`: `rendered_content`属性让我们可以访问响应的渲染模板。'
- en: '`self.assertInHTML(needle, rendered_content)`: `TestCase.assertInHTML()` lets
    us assert whether one HTML fragment is inside another. `assertInHTML()` knows
    how to parse HTML and doesn''t care about attribute order or whitespace. In testing
    views, we frequently have to check whether a particular bit of HTML is present
    in a response.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.assertInHTML(needle, rendered_content)`: `TestCase.assertInHTML()`让我们可以断言一个HTML片段是否在另一个HTML片段中。`assertInHTML()`知道如何解析HTML，不关心属性顺序或空白。在测试视图时，我们经常需要检查响应中是否存在特定的HTML片段。'
- en: Now that we've created a unit test for a view, let's look at creating an integration
    test for a view by creating an integration test for `QuestionDetailView`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为一个视图创建了一个单元测试，让我们看看通过为`QuestionDetailView`创建一个集成测试来创建一个视图的集成测试。
- en: Creating a view integration test
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个视图集成测试
- en: View integration tests use the same `django.test.TestCase` class that a unit
    test does. An integration test will tell us if our project can route the request
    to the view and return the correct response. An integration test request will
    have to go through all the middleware and URL routing that a project is configured
    with. To help us write integration tests, Django provides `TestCase.client`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 视图集成测试使用与单元测试相同的`django.test.TestCase`类。集成测试将告诉我们我们的项目是否能够将请求路由到视图并返回正确的响应。集成测试请求将不得不通过项目配置的所有中间件和URL路由。为了帮助我们编写集成测试，Django提供了`TestCase.client`。
- en: '`TestCase.client` is a utility offered by `TestCase` to let us send HTTP requests
    to our project (it can''t send external HTTP requests). Django processes these
    requests normally. `client` also offers us convenience methods such as `client.login()`,
    a way of starting an authenticated session. A `TestCase` class also resets its
    `client` between each test.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestCase.client`是`TestCase`提供的一个实用工具，让我们可以向我们的项目发送HTTP请求（它不能发送外部HTTP请求）。Django会正常处理这些请求。`client`还为我们提供了方便的方法，比如`client.login()`，一种开始认证会话的方法。一个`TestCase`类也会在每个测试之间重置它的`client`。'
- en: 'Let''s write an integration test for `QuestionDetailView` in `django/qanda/tests.py`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`django/qanda/tests.py`中为`QuestionDetailView`编写一个集成测试：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this sample, we log in and then request a detail view of `Question`. We make
    multiple assertions about the result to confirm that it is correct (including
    checking the name of the templates used).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们登录然后请求`Question`的详细视图。我们对结果进行多次断言以确认它是正确的（包括检查使用的模板的名称）。
- en: 'Let''s examine some of this code in greater detail:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地检查一些代码：
- en: '`self.client.login(...)`: This begins an authenticated session. All future
    requests will be authenticated as that user until we call `client.logout()`.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.client.login(...)`: 这开始了一个认证会话。所有未来的请求都将作为该用户进行认证，直到我们调用`client.logout()`。'
- en: '`self.client.get(''/q/{}''.format(question.id))`: This makes an HTTP `GET`
    request using our client. Unlike when we used `RequestFactory`, the path we provide
    is to route our request to a view (note that we never reference the view directly
    in the test). This returns the response created by our view.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.client.get(''/q/{}''.format(question.id))`: 这使用我们的客户端发出一个HTTP `GET`请求。不同于我们使用`RequestFactory`时，我们提供的路径是为了将我们的请求路由到一个视图（注意我们在测试中从未直接引用视图）。这返回了我们的视图创建的响应。'
- en: '`[t.name for t in response.templates]`: When one of the client''s responses
    renders, the client updates the response with a list of templates used. In the
    case of the detail view, we used multiple templates. In order to check whether
    we''re showing the UI for posting an answer, we will check whether the `qanda/common/post_answer.html` file
    is one of the templates used.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[t.name for t in response.templates]`: 当客户端的响应渲染时，客户端会更新响应的使用的模板列表。在详细视图的情况下，我们使用了多个模板。为了检查我们是否显示了发布答案的UI，我们将检查`qanda/common/post_answer.html`文件是否是使用的模板之一。'
- en: With this kind of test, we can gain a lot of confidence that our view works
    when a user makes a request. However, it does couple the test to the project's
    configuration. Integration tests make sense even for views coming from third-party
    apps to confirm that they're being used correctly. If you're making an app that
    is a library, you may find it better to use a unit test.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种类型的测试，我们可以非常有信心地确认我们的视图在用户发出请求时是否有效。然而，这确实将测试与项目的配置耦合在一起。即使是来自第三方应用的视图，集成测试也是有意义的，以确认它们是否被正确使用。如果你正在开发一个库应用，你可能会发现最好使用单元测试。
- en: Next, let's look at testing that our Django and frontend code are both working
    correctly by testing and creating a live server test case using Selenium.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们通过使用Selenium来测试我们的Django和前端代码是否都正确工作，创建一个实时服务器测试用例。
- en: Creating a live server integration test
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个实时服务器集成测试
- en: The final type of test we'll write is a live server integration test. In this
    test, we'll start up a test Django server and make requests to it using Google
    Chrome controlled by Selenium.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写的最后一种类型的测试是实时服务器集成测试。在这个测试中，我们将启动一个测试Django服务器，并使用Selenium控制Google Chrome向其发出请求。
- en: Selenium is a tool with bindings for many languages (including Python) that
    lets you control a web browser. This lets you test exactly how a real browser
    behaves when it's using your project, because you are testing your project with
    a real browser.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium是一个工具，它具有许多语言的绑定（包括Python），可以让你控制一个网页浏览器。这样你就可以测试真实浏览器在使用你的项目时的行为，因为你是用真实浏览器测试你的项目。
- en: 'There are some limitations imposed by this kind of test:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的测试有一些限制：
- en: Live tests often have to run in sequence
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时测试通常需要按顺序运行
- en: It's easy to leak state across tests
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很容易在测试之间泄漏状态。
- en: Using a browser is much slower than `TestCase.client()` (the browser makes real
    HTTP requests)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用浏览器比`TestCase.client()`慢得多（浏览器会发出真正的HTTP请求）
- en: Despite all these downsides, live server tests can be an invaluable tool at
    a time when the client side of a web app is so powerful.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在所有这些缺点，实时服务器测试在当前客户端网页应用如此强大的时代是一个非常宝贵的工具。
- en: Let's start by setting up Selenium.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先设置Selenium。
- en: Setting up Selenium
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Selenium
- en: 'Let''s add Selenium to our project by installing with `pip`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用`pip`来将Selenium添加到我们的项目中进行安装：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we will need the particular webdriver that tells Selenium how to talk
    to Chrome. Google provides a **chromedriver** at [https://sites.google.com/a/chromium.org/chromedriver/](https://sites.google.com/a/chromium.org/chromedriver/).
    In our case, let''s save it at the root of our project directory. Then, let''s
    add the path to that driver in `django/conf/settings.py`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要特定的webdriver，告诉Selenium如何与Chrome通信。Google在[https://sites.google.com/a/chromium.org/chromedriver/](https://sites.google.com/a/chromium.org/chromedriver/)提供了一个**chromedriver**。在我们的情况下，让我们把它保存在项目目录的根目录下。然后，让我们在`django/conf/settings.py`中添加该驱动程序的路径：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Finally, make sure that you have Google Chrome installed on your computer. If
    not, you can download it at [https://www.google.com/chrome/index.html](https://www.google.com/chrome/index.html).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请确保你的计算机上安装了Google Chrome。如果没有，你可以在[https://www.google.com/chrome/index.html](https://www.google.com/chrome/index.html)下载它。
- en: All major browsers claim to have some level of support for Selenium. If you
    don't like Google Chrome, you can try one of the others. Refer to Selenium's docs
    ([http://www.seleniumhq.org/about/platforms.jsp](http://www.seleniumhq.org/about/platforms.jsp))
    for details.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 所有主要的浏览器都声称对Selenium有一定程度的支持。如果你不喜欢Google Chrome，你可以尝试其他浏览器。有关详细信息，请参阅Selenium的文档（[http://www.seleniumhq.org/about/platforms.jsp](http://www.seleniumhq.org/about/platforms.jsp)）。
- en: Testing with a live Django server and Selenium
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Django服务器和Selenium进行测试
- en: Now that we have Selenium set up, we can create our live server test. A live
    server test is particularly useful when our project has a lot of JavaScript. Answerly,
    though, doesn't have any JavaScript. However, Django's forms do take advantage
    of HTML5 form attributes that most browsers (including Google Chrome) support.
    We can still test whether that functionality is being correctly used by our code.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了Selenium，我们可以创建我们的实时服务器测试。当我们的项目有很多JavaScript时，实时服务器测试特别有用。然而，Answerly并没有任何JavaScript。然而，Django的表单确实利用了大多数浏览器（包括Google
    Chrome）支持的HTML5表单属性。我们仍然可以测试我们的代码是否正确地使用了这些功能。
- en: In this test, we will check whether a user can submit an empty question. The
    `title` and `question` fields should each be marked `required` so that a browser
    won't submit the form if those fields are empty.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，我们将检查用户是否可以提交一个空的问题。`title`和`question`字段应该被标记为`required`，这样如果这些字段为空，浏览器就不会提交表单。
- en: 'Let''s add a new test to `django/qanda/tests.py`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`django/qanda/tests.py`中添加一个新的测试：
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s take a look at some of the new Django features introduced in this test.
    Then, we''ll review our Selenium code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个测试中引入的一些新的Django特性。然后，我们将审查我们的Selenium代码：
- en: '`class AskQuestionTestCase(StaticLiveServerTestCase)`: `StaticLiveServerTestCase`
    starts a Django server and also ensures that static files are served correctly.
    You don''t have to run `python manage.py collectstatic`. The files will be routed
    correctly just like if you''re running `python manage.py runserver`.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class AskQuestionTestCase(StaticLiveServerTestCase)`: `StaticLiveServerTestCase`启动了一个Django服务器，并确保静态文件被正确地提供。你不必运行`python
    manage.py collectstatic`。文件将被正确地路由，就像你运行`python manage.py runserver`一样。'
- en: '`def setUpClass(cls)`: All the Django test cases support the `setUpClass()`,
    `setup()`, `teardown()`, and `teardownClass()` methods as usual. `setUpClass` and `tearDownClass()`
    are run only once per `TestCase` (before and after, respectively). This makes
    them ideal for expensive operations, such as connecting to Google Chrome with
    Selenium.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`def setUpClass(cls)`: 所有的Django测试用例都支持`setUpClass()`、`setup()`、`teardown()`和`teardownClass()`方法，就像往常一样。`setUpClass`和`tearDownClass()`每个`TestCase`只运行一次（分别在之前和之后）。这使它们非常适合昂贵的操作，比如用Selenium连接到Google
    Chrome。'
- en: '`self.live_server_url`: This is the URL to the live server.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.live_server_url`：这是实时服务器的URL。'
- en: 'Selenium lets us interact with a browser using an API. This book is not focused
    on Selenium, but let''s cover some key methods of the `WebDriver` class:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium允许我们使用API与浏览器进行交互。本书不侧重于Selenium，但让我们来介绍一些`WebDriver`类的关键方法：
- en: '`cls.selenium = WebDriver(executable_path=settings.CHROMEDRIVER)`: This instantiates
    a WebDriver instance with the path to the `ChromeDriver` executable (that we downloaded
    in the preceding *Setting Up Selenium* section). We stored the path to the `ChromeDriver`
    executable in our settings to let us easily reference it here.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cls.selenium = WebDriver(executable_path=settings.CHROMEDRIVER)`: 这实例化了一个WebDriver实例，其中包含到`ChromeDriver`可执行文件的路径（我们在前面的*设置Selenium*部分中下载了）。我们将`ChromeDriver`可执行文件的路径存储在设置中，以便在这里轻松引用它。'
- en: '`selenium.find_element_by_name(...)`: This returns an HTML element whose `name`
    attribute matches the provided argument. `name`s attributes are used by all `<input>`
    elements whose value is processed by a form, so this is particularly useful for
    data entry.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selenium.find_element_by_name(...)`: 这返回一个其`name`属性与提供的参数匹配的HTML元素。`name`属性被所有值由表单处理的`<input>`元素使用，因此对于数据输入特别有用。'
- en: '`self.selenium.find_element_by_id(...)`: This is like the preceding step, except
    find the matching element by its `id` attribute.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.selenium.find_element_by_id(...)`: 这与前面的步骤类似，只是通过其`id`属性查找匹配的元素。'
- en: '`self.selenium.current_url`: This is the browser''s current URL. This is useful
    for confirming that we''re on the page we expect.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.selenium.current_url`: 这是浏览器的当前URL。这对于确认我们是否在预期的页面上很有用。'
- en: '`username_input.send_keys(...)`: The `send_keys()` method lets us type the
    passed string into the an HTML element. This is particularly useful for `<input
    type=''text''>`and `<input type=''password''>` elements.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username_input.send_keys(...)`: `send_keys()`方法允许我们将传递的字符串输入到HTML元素中。这对于`<input
    type=''text''>`和`<input type=''password''>`元素特别有用。'
- en: '`submit_btn.click()`: This triggers a click on the element.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`submit_btn.click()`: 这会触发对元素的点击。'
- en: This test logs in as a user, tries to submit a form, and asserts that it is
    still on the same page. Unfortunately, while a form with an empty required `input`
    elements won't submit itself, there is no API to confirm that directly. Instead,
    we confirm that we haven't submitted because the browser is still at the same
    URL (according to `self.selenium.current_url`) as before we hit submit.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试以用户身份登录，尝试提交表单，并断言仍然在同一个页面上。不幸的是，虽然带有空的必填`input`元素的表单不会自行提交，但没有API直接确认这一点。相反，我们确认我们没有提交，因为浏览器仍然在与之前点击提交之前相同的URL上（根据`self.selenium.current_url`）。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to measure code coverage in Django projects
    and how to write four different types of tests—unit tests for testing any function
    or class, including models and forms; and view unit tests for testing views using
    `RequestFactory`. We covered how to view integration tests for testing that request
    route to a view and return correct responses and Live server integration tests
    for testing that your client and server-side code work together correctly.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在Django项目中测量代码覆盖率，以及如何编写四种不同类型的测试——用于测试任何函数或类的单元测试，包括模型和表单；以及用于使用`RequestFactory`测试视图的视图单元测试。我们介绍了如何查看集成测试，用于测试请求路由到视图并返回正确响应，以及用于测试客户端和服务器端代码是否正确配合工作的实时服务器集成测试。
- en: Now that we have some tests, let's deploy Answerly into a production environment.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一些测试，让我们将Answerly部署到生产环境中。
