- en: Chapter 6. Generators and Coroutines – Infinity, One Step at a Time
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。生成器和协程-无限，一步一步
- en: 'A generator is a specific type of iterator that generates values through a
    function. While traditional methods build and return a `list` of items, a generator
    will simply `yield` every value separately at the moment when they are requested
    by the caller. This method has several benefits:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器是一种通过函数生成值的特定类型的迭代器。传统方法构建并返回项目的`list`，而生成器只会在调用者请求时单独`yield`每个值。这种方法有几个好处：
- en: Generators pause execution completely until the next value is yielded, which
    makes them completely lazy. If you fetch five items from a generator, only five
    items will be generated, so no other computation is needed.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器完全暂停执行，直到下一个值被产生，这使得它们完全是惰性的。如果从生成器中获取五个项目，只会生成五个项目，因此不需要其他计算。
- en: Generators have no need to save values. Whereas a traditional function would
    require creating a `list` and storing all results until they are returned, a generator
    only needs to store a single value.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器不需要保存值。而传统函数需要创建一个`list`并存储所有结果，直到它们被返回，生成器只需要存储一个单一的值。
- en: Generators can have infinite size. There is no requirement to stop at a certain
    point.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器可以具有无限的大小。没有必要在某一点停止。
- en: 'These benefits come at a price, however. The immediate results of these benefits
    are a few disadvantages:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些好处是有代价的。这些好处的直接结果是一些缺点：
- en: Until you are done processing, you never know how many values are left; it could
    even be infinite. This makes usage dangerous in some cases; executing `list(some_infinite_generator)`
    will run out of memory.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理完成之前，您永远不知道还有多少值；甚至可能是无限的。这在某些情况下使用是危险的；执行`list(some_infinite_generator)`将耗尽内存。
- en: You cannot slice generators.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您无法切片生成器。
- en: You cannot get specific items without yielding all values before that index.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您无法在产生指定的项目之前获取所有值。
- en: You cannot restart a generator. All values are yielded exactly once.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您无法重新启动生成器。所有值只产生一次。
- en: In addition to generators, there is a variation to the generator's syntax that
    creates coroutines. Coroutines are functions that allow for multitasking without
    requiring multiple threads or processes. Whereas generators can only yield values
    to the caller, coroutines actually receive values from the caller while it is
    still running. While this technique has a few limitations, if it suits your purpose,
    it can result in great performance at a very little cost.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 除了生成器之外，还有一种变体的生成器语法，可以创建协程。协程是允许进行多任务处理而不需要多个线程或进程的函数。生成器只能向调用者产生值，而协程实际上可以在运行时从调用者那里接收值。虽然这种技术有一些限制，但如果符合您的目的，它可以以非常低的成本实现出色的性能。
- en: 'In short, the topics covered in this chapter are:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，本章涵盖的主题有：
- en: The characteristics and uses of generators
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器的特点和用途
- en: Generator comprehensions
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器推导
- en: Generator functions
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器函数
- en: Generator classes
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器类
- en: Bundled generators
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捆绑生成器
- en: Coroutines
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协程
- en: What are generators?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成器是什么？
- en: A generator, in its simplest form, is a function that returns elements one at
    a time instead of returning a collection of items. The most important advantage
    of this is that it requires very little memory and that it doesn't need to have
    a predefined size. Creating an endless generator (such as the `itertools.count`
    iterator discussed in [Chapter 4](ch04.html "Chapter 4. Functional Programming
    – Readability Versus Brevity"), *Functional Programming – Readability Versus Brevity*)
    is actually quite easy, but it does come with a cost, of course. Not having the
    size of an object available makes certain patterns difficult to achieve.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器，最简单的形式是一个函数，它一次返回一个元素，而不是返回一组项目。这样做的最重要的优点是它需要非常少的内存，而且不需要预先定义的大小。创建一个无限的生成器（比如在[第4章](ch04.html
    "第4章。功能编程-可读性与简洁性")中讨论的`itertools.count`迭代器，*功能编程-可读性与简洁性*）实际上是相当容易的，但当然也是有代价的。没有对象的大小可用，使得某些模式难以实现。
- en: 'The basic trick in writing generators (as functions) is using the `yield` statement.
    Let''s use the `itertools.count` generator as an example and extend it with a
    `stop` variable:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 编写生成器（作为函数）的基本技巧是使用`yield`语句。让我们以`itertools.count`生成器为例，并用一个`stop`变量扩展它：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Due to the potentially infinite nature of generators, caution is required. Without
    the `stop` variable, simply doing `list(count())` would result in an out-of-memory
    situation quite fast.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于生成器可能是无限的，因此需要谨慎。如果没有`stop`变量，简单地执行`list(count())`将很快导致内存不足的情况。
- en: 'So how does this work? It''s just a normal `for` loop, but the big difference
    between this and the regular method of returning a list of items is that the `yield`
    statement returns the items one at a time. An important thing to note here is
    that the `return` statement results in a `StopIteration` and passing something
    along to `return` will be the argument to the `StopIteration`. It should be noted
    that this behavior changed in Python 3.3; in Python 3.2 and earlier versions,
    it was simply not possible to return anything other than `None`. Here is an example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这是如何工作的呢？这只是一个普通的`for`循环，但这与返回项目列表的常规方法之间的重要区别在于`yield`语句一次返回一个项目。这里需要注意的一点是，`return`语句会导致`StopIteration`，并且将某些东西传递给`return`将成为`StopIteration`的参数。应该注意的是，这种行为在Python
    3.3中发生了变化；在Python 3.2和更早的版本中，除了`None`之外，根本不可能返回任何东西。这里有一个例子：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Of course, as always, there are multiple ways of creating generators with Python.
    Other than functions, there are also generator comprehensions and classes that
    can do the same thing. Generator comprehensions are pretty much identical to list
    comprehensions but use parentheses instead of brackets, like this for example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，与以往一样，有多种使用Python创建生成器的方法。除了函数之外，还有生成器推导和类可以做同样的事情。生成器推导与列表推导几乎完全相同，但使用括号而不是方括号，例如：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For completeness, the class version of the `count` function is as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，`count`函数的类版本如下：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The biggest difference between the class and the function-based approach is
    that you are required to raise a `StopIteration` explicitly instead of just returning
    it. Beyond that, they are quite similar, although the class-based version obviously
    adds some verbosity.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 类和基于函数的方法之间最大的区别是你需要显式地引发`StopIteration`而不是简单地返回它。除此之外，它们非常相似，尽管基于类的版本显然增加了一些冗余。
- en: Advantages and disadvantages of generators
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成器的优缺点
- en: You have seen a few examples of generators and know the basics of what you can
    do with them. However, it is important to keep their advantages and disadvantages
    in mind.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了一些生成器的例子，并了解了你可以用它们做什么的基础知识。然而，重要的是要记住它们的优缺点。
- en: 'The following are most important pros:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最重要的优点：
- en: Memory usage. Items can be processed one at a time, so there is generally no
    need to keep the entire list in memory.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存使用。项目可以一次处理一个，因此通常不需要将整个列表保存在内存中。
- en: The results can depend on outside factors, instead of having a static list.
    Think of processing a queue/stack for example.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果可能取决于外部因素，而不是具有静态列表。例如，考虑处理队列/堆栈。
- en: Generators are lazy. This means that if you're using only the first five results
    of a generator, the rest won't even be calculated.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器是懒惰的。这意味着如果你只使用生成器的前五个结果，剩下的甚至不会被计算。
- en: Generally, it is simpler to write than list generating functions.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般来说，编写生成函数比编写列表生成函数更简单。
- en: 'The most important cons:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的缺点：
- en: The results are available only once. After processing the results of a generator,
    it cannot be used again.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果只能使用一次。处理生成器的结果后，不能再次使用。
- en: The size is unknown until you are done processing, which can be detrimental
    to certain algorithms.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理完成之前，大小是未知的，这可能对某些算法有害。
- en: Generators are not indexable, which means that `some_generator[5]` will not
    work.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器是不可索引的，这意味着`some_generator[5]`是行不通的。
- en: Considering all the advantages and disadvantages, my general advice would be
    to use generators if possible and only return a `list` or `tuple` when you actually
    need to. Converting a generator to a `list` is as simple as `list(some_generator)`,
    so that shouldn't stop you since generator functions tend to be simpler than the
    equivalents that produce `list`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到所有的优缺点，我的一般建议是尽可能使用生成器，只有在实际需要时才返回`list`或`tuple`。将生成器转换为`list`就像`list(some_generator)`一样简单，所以这不应该阻止你，因为生成函数往往比生成`list`的等效函数更简单。
- en: 'The memory usage advantage is understandable; one item requires less memory
    than many items. The lazy part, however, needs some additional explanation as
    it has a small snag:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 内存使用的优势是可以理解的；一个项目需要的内存比许多项目少。然而，懒惰部分需要一些额外的解释，因为它有一个小问题：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, the generator effectively freezes right after the `yield` statement,
    so even the `After 2` won't print until `3` is yielded.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，生成器在`yield`语句后有效地冻结，所以即使`After 2`在`3`被产生之前也不会打印。
- en: This has important advantages, but it's definitely something you need to take
    into consideration. You can't have your cleanup right after the `yield` as it
    won't be executed until the next `yield`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这有重要的优势，但这绝对是你需要考虑的事情。你不能在`yield`后立即清理，因为它直到下一个`yield`才会执行。
- en: Pipelines – an effective use of generators
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道-生成器的有效使用
- en: 'The theoretical possibilities of generators are infinite (no pun intended),
    but their practical uses can be difficult to find. If you are familiar with the
    Unix/Linux shell, you must have probably used pipes before, something like `ps
    aux | grep python''` for example to list all Python processes. There are many
    ways to do this, of course, but let''s emulate something similar in Python to
    see a practical example. To create an easy and consistent output, we will create
    a file called `lines.txt` with the following lines:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器的理论可能性是无限的（无意冒犯），但它们的实际用途可能很难找到。如果你熟悉Unix/Linux shell，你可能以前使用过管道，比如`ps aux
    | grep python'`，例如列出所有Python进程。当然，有很多方法可以做到这一点，但让我们在Python中模拟类似的东西，以便看到一个实际的例子。为了创建一个简单和一致的输出，我们将创建一个名为`lines.txt`的文件，其中包含以下行：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let''s take the following Linux/Unix/Mac shell command to read the file
    with some modifications:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看下面的Linux/Unix/Mac shell命令，以读取带有一些修改的文件：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This reads the file using `cat`, outputs all lines that contain `spam` using
    `grep`, and replaces `spam` with `bacon` using the `sed` command. Now let''s see
    how we can recreate this with the use of Python generators:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用`cat`读取文件，使用`grep`输出包含`spam`的所有行，并使用`sed`命令将`spam`替换为`bacon`。现在让我们看看如何可以利用Python生成器来重新创建这个过程：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That's the big advantage of generators. You can wrap a list or sequence multiple
    times with very little performance impact. Not a single one of the functions involved
    executes anything until a value is requested.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是生成器的最大优势。你可以用很少的性能影响多次包装一个列表或序列。在请求值之前，涉及的任何函数都不会执行任何操作。
- en: tee – using an output multiple times
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: tee-多次使用输出
- en: As mentioned before, one of the biggest disadvantages of generators is that
    the results are usable only once. Luckily, Python has a function that allows you
    to copy the output to several generators. The name `tee` might be familiar to
    you if you are used to working in a command-line shell. The `tee` program allows
    you to write outputs to both the screen and a file, so you can store an output
    while still maintaining a live view of it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，生成器最大的缺点之一是结果只能使用一次。幸运的是，Python有一个函数允许你将输出复制到多个生成器。如果你习惯在命令行shell中工作，`tee`这个名字可能对你来说很熟悉。`tee`程序允许你将输出同时写到屏幕和文件，这样你就可以在保持实时查看的同时存储输出。
- en: The Python version, `itertools.tee`, does a similar thing except that it returns
    several iterators, allowing you to process the results separately.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Python版本的`itertools.tee`也做了类似的事情，只是它返回了几个迭代器，允许你分别处理结果。
- en: 'By default, `tee` will split your generator into a tuple containing two different
    generators, which is why tuple unpacking works nicely here. By passing along the
    `n` parameter, this can easily be changed to support more than 2 generators. Here
    is an example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`tee`会将您的生成器分成一个包含两个不同生成器的元组，这就是为什么元组解包在这里能很好地工作。通过传递`n`参数，这可以很容易地改变以支持超过2个生成器。这是一个例子：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After seeing this code, you might be wondering about the memory usage of `tee`.
    Does it need to store the entire list for you? Luckily, no. The `tee` function
    is pretty smart in handling this. Assume you have a generator that contains 1,000
    items, and you read the first 100 items from `a` and the first `75` items from
    `b` simultaneously. Then `tee` will only keep the difference (`100 - 75 = 25`
    items) in the memory and drop the rest while you are iterating the results.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 看到这段代码后，您可能会对`tee`的内存使用情况感到好奇。它是否需要为您存储整个列表？幸运的是，不需要。`tee`函数在处理这个问题时非常聪明。假设您有一个包含1,000个项的生成器，并且同时从`a`中读取前100个项和从`b`中读取前75个项。那么`tee`将只在内存中保留差异（`100-75=25`个项），并在您迭代结果时丢弃其余的部分。
- en: Whether `tee` is the best solution in your case or not depends, of course. If
    instance `a` is read from the beginning to (nearly) the end before instance `b`
    is read, then it would not be a great idea to use `tee`. Simply converting the
    generator to a `list` would be faster since it involves much fewer operations.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`tee`是否是您的最佳解决方案取决于情况。如果实例`a`在实例`b`之前从头到（几乎）末尾被读取，那么使用`tee`就不是一个好主意。将生成器简单地转换为`list`会更快，因为它涉及的操作要少得多。
- en: Generating from generators
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从生成器生成
- en: 'As we have seen before, we can use generators to filter, modify, add, and remove
    items. In many cases, however, you''ll notice that when writing generators, you''ll
    be returning from sub-generators and/or sequences. An example of this is when
    creating a `powerset` using the `itertools` library:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，我们可以使用生成器来过滤、修改、添加和删除项。然而，在许多情况下，您会注意到在编写生成器时，您将从子生成器和/或序列中返回。一个例子是使用`itertools`库创建`powerset`时：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This pattern was so common that the yield syntax was actually enhanced to make
    this even easier. Instead of manually looping over the results, Python 3.3 introduced
    the `yield from` syntax, which makes this common pattern even simpler:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式是如此常见，以至于`yield`语法实际上得到了增强，使得这更加容易。Python 3.3引入了`yield from`语法，使这种常见模式变得更加简单：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And that's how you create a powerset in only three lines of code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你只用三行代码创建一个幂集的方法。
- en: 'Perhaps, a more useful example of this is flattening a sequence recursively:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 也许，这种情况下更有用的例子是递归地扁平化一个序列。
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that this code uses `TypeError` to detect non-iterable objects. The result
    is that if the sequence (which could be a generator) returns a `TypeError`, it
    will silently hide it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此代码使用`TypeError`来检测非可迭代对象。结果是，如果序列（可能是一个生成器）返回`TypeError`，它将默默地隐藏它。
- en: Also note that this is a very basic flattening function that has no type checking
    whatsoever. An iterable containing an `str` for example will be flattened recursively
    until the maximum recursion depth is reached, since every item in an `str` also
    returns an `str`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，这是一个非常基本的扁平化函数，没有任何类型检查。例如，包含`str`的可迭代对象将被递归地扁平化，直到达到最大递归深度，因为`str`中的每个项也会返回一个`str`。
- en: Context managers
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上下文管理器
- en: As with most of the techniques described in this book, Python also comes bundled
    with a few useful generators. Some of these (`itertools` and `contextlib.contextmanager`
    for example) have already been discussed in [Chapter 4](ch04.html "Chapter 4. Functional
    Programming – Readability Versus Brevity"), *Functional Programming – Readability
    Versus Brevity* and [Chapter 5](ch05.html "Chapter 5. Decorators – Enabling Code
    Reuse by Decorating"), *Decorators – Enabling Code Reuse by Decorating* but we
    can use some extra examples to demonstrate how simple and powerful they can be.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中描述的大多数技术一样，Python也捆绑了一些有用的生成器。其中一些（例如`itertools`和`contextlib.contextmanager`）已经在[第4章](ch04.html
    "第4章。功能编程-可读性与简洁性")和[第5章](ch05.html "第5章。装饰器-通过装饰实现代码重用")中讨论过，但我们可以使用一些额外的例子来演示它们可以多么简单和强大。
- en: 'The Python context managers do not appear to be directly related to generators,
    but that''s a large part of what they use internally:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Python上下文管理器似乎与生成器没有直接关联，但这是它们内部使用的一个很大的部分：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: While all this works just fine, the three levels of context managers tend to
    get a bit unreadable. Generally, decorators can solve this. In this case, however,
    we need the output from one context manager as the input for the next.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然所有这些都可以正常工作，但是三层上下文管理器往往会变得有点难以阅读。通常，装饰器可以解决这个问题。然而，在这种情况下，我们需要一个上下文管理器的输出作为下一个上下文管理器的输入。
- en: 'That''s where `ExitStack` comes in. It allows easy combining of multiple context
    managers:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`ExitStack`的用武之地。它允许轻松地组合多个上下文管理器：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Looks at least a bit simpler, doesn''t it? While the necessity is limited in
    this case, the convenience of `ExitStack` becomes quickly apparent when you need
    to do specific teardowns. In addition to the automatic handling as seen before,
    it''s also possible to transfer the contexts to a new `ExitStack` and manually
    handle the closing:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来至少简单了一点，不是吗？虽然在这种情况下必要性有限，但当您需要进行特定的拆卸时，`ExitStack`的便利性很快就会显现出来。除了之前看到的自动处理外，还可以将上下文传递给一个新的`ExitStack`并手动处理关闭：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Most of the `contextlib` functions have extensive documentation available in
    the Python manual. `ExitStack` in particular is documented using many examples
    at [https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack](https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack).
    I recommend keeping an eye on the `contextlib` documentation as it is improving
    greatly with every Python version.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数`contextlib`函数在Python手册中都有详尽的文档。特别是`ExitStack`，可以在[https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack](https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack)上找到许多示例。我建议密切关注`contextlib`文档，因为它在每个Python版本中都有很大的改进。
- en: Coroutines
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协程
- en: Coroutines are subroutines that offer non-pre-emptive multitasking through multiple
    entry points. The basic premise is that coroutines allow two functions to communicate
    with each other while running. Normally, this type of communication is reserved
    only for multitasking solutions, but coroutines offer a relatively simple way
    of achieving this at almost no added performance cost.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 协程是通过多个入口点提供非抢占式多任务处理的子例程。基本前提是，协程允许两个函数在运行时相互通信。通常，这种类型的通信仅保留给多任务处理解决方案，但协程以几乎没有额外性能成本的相对简单方式提供了这种实现。
- en: Since generators are lazy by default, the working of coroutines is fairly obvious.
    Until a result is consumed, the generator sleeps; but while consuming a result,
    the generator becomes active. The difference between regular generators and coroutines
    is that coroutines don't simply return values to the calling function but can
    receive values as well.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于生成器默认是惰性的，协程的工作方式是非常明显的。直到结果被消耗，生成器都会休眠；但在消耗结果时，生成器会变得活跃。普通生成器和协程之间的区别在于，协程不仅仅将值返回给调用函数，还可以接收值。
- en: A basic example
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个基本的例子
- en: 'In the previous paragraphs, we saw how regular generators can yield values.
    But that''s not all that generators can do. They can actually receive values as
    well. The basic usage is fairly simple:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的段落中，我们看到了普通生成器如何产出值。但生成器能做的不仅仅是这些。它们也可以接收值。基本用法非常简单：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: And that's all there is to it. The function is frozen until the `send` method
    is called, at which point it will process up to the next `yield` statement.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。在调用`send`方法之前，函数会被冻结，此时它将处理到下一个`yield`语句。
- en: Priming
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动
- en: 'Since generators are lazy, you can''t just send a value to a brand new generator.
    Before a value can be sent to the generator, either a result must be fetched using
    `next()` or a `send(None)` has to be issued so that the code is actually reached.
    The need for this is understandable but a bit tedious at times. Let''s create
    a simple decorator to omit the need for this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于生成器是惰性的，你不能直接向全新的生成器发送一个值。在值被发送到生成器之前，要么必须使用`next()`获取结果，要么必须发出`send(None)`，以便实际到达代码。这种需求是可以理解的，但有时有点乏味。让我们创建一个简单的装饰器来省略这个需求：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you've probably noticed, even though the generator is still lazy, it now
    automatically executes all of the code until it reaches the `yield` statement
    again. At that point, it will stay dormant until new values are sent.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，即使生成器仍然是惰性的，它现在会自动执行所有代码，直到再次到达`yield`语句。在那时，它将保持休眠状态，直到发送新值。
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the `coroutine` decorator will be used throughout this chapter from
    this point onwards. For brevity, we will omit it from the following examples.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，从现在开始，`coroutine`装饰器将在本章中使用。为简洁起见，我们将在以下示例中省略它。
- en: Closing and throwing exceptions
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关闭和抛出异常
- en: 'Unlike regular generators, which simply exit as soon as the input sequence
    is exhausted, coroutines generally employ infinite `while` loops, which means
    that they won''t be torn down the normal way. That''s why coroutines also support
    both `close` and `throw` methods, which will exit the function. The important
    thing here is not the closing but the possibility of adding a teardown method.
    Essentially, it is very comparable to how context wrappers function with an `__enter__`
    and `__exit__` method, but with coroutines in this case:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与普通生成器不同，一旦输入序列耗尽，协程通常采用无限的`while`循环，这意味着它们不会以正常方式被关闭。这就是为什么协程也支持`close`和`throw`方法，它们将退出函数。这里重要的不是关闭，而是添加拆卸方法的可能性。从本质上讲，这与上下文包装器如何使用`__enter__`和`__exit__`方法的方式非常相似，但在这种情况下是协程：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This generates the following output, which should be as expected—no strange
    behavior but simply two methods of exiting a coroutine:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下输出，应该是预期的——没有奇怪的行为，只是退出协程的两种方法：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Bidirectional pipelines
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 双向管道
- en: 'In the previous paragraphs, we saw pipelines; they process the output sequentially
    and one-way. However, there are cases where this is simply not enough—times where
    you need a pipe that not only sends values to the next pipe but also receives
    information back from the sub-pipe. Instead of always having a single list that
    is processed, we can maintain the state of the generator between executions this
    way. So, let''s start by converting the earlier pipelines to coroutines. First,
    the `lines.txt` file again:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的段落中，我们看到了管道；它们按顺序处理输出并且是单向的。然而，有些情况下这还不够——有时你需要一个不仅将值发送到下一个管道，而且还能从子管道接收信息的管道。我们可以通过这种方式在执行之间保持生成器的状态，而不是始终只有一个单一的列表被处理。因此，让我们首先将之前的管道转换为协程。首先，再次使用`lines.txt`文件：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, the coroutine pipeline. The functions are the same as before but using
    coroutines instead:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，协程管道。这些函数与以前的相同，但使用协程而不是生成器：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Given this example, you might be wondering why we are now printing the value
    instead of yielding it. Well! We can, but remember that generators freeze until
    a value is yielded. Let''s see what would happen if we simply `yield` the value
    instead of calling `print`. By default, you might be tempted to do this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这个例子，你可能会想知道为什么我们现在打印值而不是产出它。嗯！我们可以，但要记住生成器会冻结，直到产出一个值。让我们看看如果我们只是`yield`值而不是调用`print`会发生什么。默认情况下，你可能会想这样做：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Half of the values have disappeared now, so the question is, "Where did they
    go?" Notice that the second `yield` isn''t storing the results. That''s where
    the values are disappearing. We need to store those as well:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一半的值已经消失了，所以问题是，“它们去哪了？”注意第二个`yield`没有存储结果。这就是值消失的地方。我们需要将它们也存储起来：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'But even this is far from optimal. We are essentially using coroutines to mimic
    the behavior of generators right now. Although it works, it''s just a tad silly
    and not all that clear. Let''s make a real pipeline this time where the coroutines
    send the data to the next coroutine (or coroutines) and actually show the power
    of coroutines by sending the results to multiple coroutines:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 但即使这样还远非最佳。我们现在基本上是在使用协程来模仿生成器的行为。虽然它能工作，但有点傻而且不是很清晰。这次让我们真正建立一个管道，让协程将数据发送到下一个协程（或多个协程），并通过将结果发送到多个协程来展示协程的力量：
- en: '[PRE23]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This makes the code much simpler and more readable, but more importantly, it
    shows how a single source can be split into multiple destinations. While this
    might not look too exciting, it most certainly is. If you look closely, you will
    see that the `tee` method splits the input into two different outputs, but both
    of those outputs write back to the same `print_` instance. This means that it's
    possible to route your data along whichever way is convenient for you while still
    having it end up at the same endpoint with no effort whatsoever.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得代码更简单、更易读，但更重要的是，它展示了如何将单一源拆分为多个目的地。虽然这看起来可能不那么令人兴奋，但它肯定是。如果你仔细观察，你会发现`tee`方法将输入分成两个不同的输出，但这两个输出都写回到同一个`print_`实例。这意味着你可以将数据沿着任何方便的方式路由，而无需任何努力就可以将其最终发送到同一个终点。
- en: Regardless, the example is still not that useful, as these functions still don't
    use all of the coroutine's power. The most important feature, a consistent state,
    is not really used in this case.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，这个例子仍然不是那么有用，因为这些函数仍然没有充分利用协程的全部功能。最重要的特性，即一致的状态，在这种情况下并没有真正被使用。
- en: The most important lesson to learn from these lines is that mixing generators
    and coroutines is not a good idea in most cases since it can have very strange
    side effects if used incorrectly. Even though both use the `yield` statement,
    they are significantly different creatures with different behavior. The next paragraph
    will show one of the few cases where mixing coroutines and generators can be useful.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些行中学到的最重要的一课是，在大多数情况下混合使用生成器和协程并不是一个好主意，因为如果使用不正确，它可能会产生非常奇怪的副作用。尽管两者都使用`yield`语句，但它们是具有不同行为的显著不同的实体。下一段将展示混合协程和生成器可以有用的为数不多的情况之一。
- en: Using the state
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用状态
- en: 'Now that we know how to write basic coroutines and which pitfalls we have to
    take care of, how about writing a function where remembering the state is required?
    That is, a function that always gives you the average value of all sent values.
    This is one of the few cases where it is still relatively safe and useful to combine
    the coroutine and generator syntax:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道如何编写基本的协程以及需要注意的陷阱，那么如何编写一个需要记住状态的函数呢？也就是说，一个始终给出所有发送值的平均值的函数。这是为数不多的情况之一，仍然相对安全和有用地结合协程和生成器语法：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'It still requires some extra logic to work properly though. To make sure we
    don''t divide by zero, we initialize the `count` to `1`. After that, we fetch
    our first item using `yield`, but we don''t send any data at that point because
    the first `yield` is the primer and is executed before we get the value. Once
    that''s all set up, we can easily yield the average value while summing. Not all
    that bad, but the pure coroutine version is slightly simpler to understand since
    we don''t have to worry about priming:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这仍然需要一些额外的逻辑才能正常工作。为了确保我们不会除以零，我们将`count`初始化为`1`。之后，我们使用`yield`获取我们的第一个项目，但在那时我们不发送任何数据，因为第一个`yield`是启动器，并且在我们获得值之前执行。一旦设置好了，我们就可以轻松地在求和的同时产生平均值。并不是太糟糕，但纯协程版本稍微更容易理解，因为我们不必担心启动：
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As simple as it should be, just keeping the count and the total value and simply
    send the new average for every new value.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 就像应该的那样，只需保持计数和总值，然后简单地为每个新值发送新的平均值。
- en: 'Another nice example is `itertools.groupby`, also quite simple to do with coroutines.
    For comparison, we will once again show both the generator coroutine and the pure
    coroutine version:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个很好的例子是`itertools.groupby`，也很容易用协程实现。为了比较，我们将再次展示生成器协程和纯协程版本：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As you can see, this function uses a few tricks. We store the previous `key`
    and `value` so that we can detect when the group (`key`) changes. And that is
    the second issue; we obviously cannot recognize a group until the group has changed,
    so only after the group has changed will the results be returned. This means that
    the last group will be sent only if a different group is sent after it, hence
    the `(None, None)`. And now, here is the pure coroutine version:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个函数使用了一些技巧。我们存储了前一个`key`和`value`，以便我们可以检测到组（`key`）何时发生变化。这就是第二个问题；显然我们只有在组发生变化后才能识别出一个组，因此只有在组发生变化后才会返回结果。这意味着最后一组只有在它之后发送了不同的组之后才会发送，因此是`(None,
    None)`。现在，这是纯协程版本：
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: While the functions are fairly similar, the pure coroutine version is, once
    again, quite a bit simpler. This is because we don't have to think about priming
    and values that might get lost.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些函数非常相似，但纯协程版本再次要简单得多。这是因为我们不必考虑启动和可能丢失的值。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter showed us how to create generators and both the strengths and weaknesses
    that they possess. Additionally, it should now be clear how to work around their
    limitations and the implications of doing so.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向我们展示了如何创建生成器以及它们的优势和劣势。此外，现在应该清楚如何解决它们的限制以及这样做的影响。
- en: While the paragraphs about coroutines should have provided some insights into
    what they are and how they can be used, not everything has been shown yet. We
    saw the constructs of both pure coroutines and coroutines that are generators
    at the same time, but they are still all synchronous. The coroutines allow sending
    the results to many other coroutines, therefore effectively executing many functions
    at once, but they can still freeze Python completely if an operation turns out
    to be blocking. That's where our next chapter will help.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然关于协程的段落应该已经提供了一些关于它们是什么以及如何使用它们的见解，但并非一切都已经展示出来。我们看到了纯协程和同时是生成器的协程的构造，但它们仍然是同步的。协程允许将结果发送给许多其他协程，因此可以有效地同时执行许多函数，但如果某个操作被阻塞，它们仍然可以完全冻结Python。这就是我们下一章将会帮助解决的问题。
- en: Python 3.5 introduced a few useful features, such as the `async` and `await`
    statements. These make it possible to make coroutines fully asynchronous and non-blocking,
    whereas this chapter uses the basic coroutine features that have been available
    since Python 2.5.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.5引入了一些有用的功能，比如`async`和`await`语句。这使得协程可以完全异步和非阻塞，而本章节使用的是自Python 2.5以来可用的基本协程功能。
- en: The next chapter will expand on the newer features, including the `asyncio`
    module. This module makes it almost simple to use coroutines for asynchronous
    I/O to endpoints such as TCP, UDP, files, and processes.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将扩展新功能，包括`asyncio`模块。这个模块使得使用协程进行异步I/O到诸如TCP、UDP、文件和进程等端点变得几乎简单。
