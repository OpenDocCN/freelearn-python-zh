- en: Smart Contract Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能合约基础知识
- en: In this chapter, we will explore the basics of smart contracts. While in Bitcoin we
    store value, in Ethereum we store code. The code that we store in Ethereum is
    called a **smart contract**. A smart contract is a trustless code, meaning the
    integrity of the code is guarded by algorithms and cryptography. We can store,
    the code which is censorship-resistant and is able to avoid third-party interference
    even from the developer of the smart contract. This opens possibilities of creating
    many types of application, such as transparent digital tokens, trustless crowdsale,
    secure voting systems, and autonomous organization.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨智能合约的基础知识。在比特币中，我们存储价值，在以太坊中，我们存储代码。我们在以太坊中存储的代码称为**智能合约**。智能合约是一种无需信任的代码，这意味着代码的完整性由算法和密码学保护。我们可以存储无需审查的代码，并且能够避免第三方干预，甚至是智能合约的开发者。这为创建许多类型的应用程序打开了可能性，例如透明的数字代币、无需信任的众售、安全的投票系统和自治组织。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Installing an Ethereum development environment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装以太坊开发环境
- en: Writing a smart contract
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写智能合约
- en: Deploying a smart contract to Ethereum blockchain
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将智能合约部署到以太坊区块链
- en: Interacting with smart contracts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与智能合约交互
- en: Why smart contracts?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要使用智能合约？
- en: Installing an Ethereum development environment
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装以太坊开发环境
- en: It's time to create a smart contract. If you are familiar with Solidity, Truffle,
    Ganache, and the smart contract fundamentals, you can skip ahead to [Chapter 3](9505075a-72c4-4fbe-ad17-564e599c3193.xhtml),
    *Implementing Smart Contracts Using Vyper*. Here, we will focus on the content
    of a smart contract created with Solidity. Throughout the remainder of the book,
    we will use the Vyper programming language to develop a smart contract. However,
    we will still use the same development environment (such as Ganache) in the rest
    of the book.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建一个智能合约了。如果您熟悉Solidity、Truffle、Ganache和智能合约基础知识，可以直接跳转到[第3章](9505075a-72c4-4fbe-ad17-564e599c3193.xhtml)，*使用Vyper实现智能合约*。在这里，我们将专注于使用Solidity创建的智能合约的内容。在本书的其余部分，我们将使用Vyper编程语言来开发智能合约。但是，在本书的其余部分，我们仍将使用相同的开发环境（如Ganache）。
- en: Installing Node.js
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Node.js
- en: 'Node.js is a popular framework for developing web applications, mobile applications,
    and decentralized applications. Head to [https://nodejs.org](https://nodejs.org) and
    download the latest version (which is version 10 at the time of writing). Here
    is how to install Node.js on the Ubuntu Linux platform:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是一个用于开发Web应用程序、移动应用程序和去中心化应用程序的流行框架。前往[https://nodejs.org](https://nodejs.org)并下载最新版本（目前是版本10）。以下是如何在Ubuntu
    Linux平台上安装Node.js：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Installing Truffle and Solidity
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Truffle和Solidity
- en: Truffle is a development framework for developing a smart contract with Solidity.
    You can create one without Truffle, but Truffle makes it easier. Without Truffle,
    you can still write a smart contract, but to compile it, you have to launch the
    Solidity compiler with certain flags. Then, in order to deploy this smart contract
    to the blockchain, you have to create a script to send the bytecode to the blockchain.
    With Truffle, in order to compile, you call the, `truffle compile` command, and
    to deploy a smart contract to the blockchain, you call the `truffle migrate` command after
    writing a simple migration script. Truffle also provides you with a tool for interacting
    with the smart contract in the blockchain network. It has everything you need
    to develop a smart contract. As stated previously, however, we will not be using
    this framework in the next chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Truffle是一个用于使用Solidity开发智能合约的开发框架。您可以在没有Truffle的情况下创建智能合约，但Truffle会让这一过程变得更加简单。没有Truffle，您仍然可以编写智能合约，但是要编译它，您必须使用特定标志启动Solidity编译器。然后，为了将这个智能合约部署到区块链上，您必须创建一个脚本将字节码发送到区块链。有了Truffle，为了编译，您可以调用`truffle
    compile`命令，为了将智能合约部署到区块链上，您可以在编写一个简单的迁移脚本后调用`truffle migrate`命令。Truffle还为您提供了一个与区块链网络中的智能合约进行交互的工具。它拥有您开发智能合约所需的一切。然而，正如之前所述，我们在下一章中将不使用这个框架。
- en: We are going to start by installing Truffle using the Node.js package manager.
    In Ubuntu Linux, in order to install Truffle globally, we have to use `sudo`.
    As described in the previous paragraph, Truffle is a smart contract development
    framework containing many tools, including a console application to interact with
    the blockchain network and the development blockchain software. On top of that,
    with Truffle, you get the Solidity compiler as well.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从使用Node.js包管理器安装Truffle开始。在Ubuntu Linux中，为了全局安装Truffle，我们必须使用`sudo`。正如前面所述，Truffle是一个智能合约开发框架，包含许多工具，包括与区块链网络和开发区块链软件进行交互的控制台应用程序。除此之外，使用Truffle，您还会得到Solidity编译器。
- en: 'But first, you need to make sure `npm` installs software globally in your home
    directory:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，您需要确保`npm`在您的主目录中全局安装软件：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then append this line to the `~/.` profile file:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将这行添加到`~/.`配置文件中：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, open a new Terminal so that the new profile file takes effect or, alternatively,
    do the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开一个新的终端，以便新的配置文件生效，或者，可以按照以下步骤操作：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, we can install Truffle as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以按照以下步骤安装Truffle：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Installing Ganache
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Ganache
- en: For developing a smart contract, people usually use Ganache. Ganache is a private,
    developmental Ethereum network that you can only use in the Ethereum development
    phase. The Truffle framework already includes the Ethereum blockchain network,
    which has the same purpose as Ganache. The difference between the two is that
    Ganache has a frontend GUI and a more user-friendly interface.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 开发智能合约时，人们通常使用Ganache。Ganache是一个私有的、开发中的以太坊网络，您只能在以太坊的开发阶段使用它。Truffle框架已经包含了与Ganache相同目的的以太坊区块链网络。两者之间的区别在于Ganache有一个前端GUI和更加用户友好的界面。
- en: When you launch Ganache, you are equipped with 10 accounts, each filled with
    100 ethers, which is the currency in Ethereum blockchain. As you will see later
    in this chapter, the concept of money (such as holding, sending, and receiving
    money, and tracking the balance) in Ethereum programming is important. You need
    to spend money in order to launch a smart contract in Ethereum blockchain. You
    can send money from an account to a smart contract, and a smart contract can,
    in turn, send money to other smart contracts or other accounts.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Ganache时，您将配备10个帐户，每个帐户都有100个以太币，这是以太坊区块链中的货币。正如您将在本章后面看到的，以太坊编程中的货币概念（如持有、发送和接收货币以及跟踪余额）是重要的。您需要花钱才能在以太坊区块链上启动智能合约。您可以从一个帐户向智能合约发送资金，智能合约反过来可以向其他智能合约或其他帐户发送资金。
- en: 'To download the software, go to the Ganache website: [https://www.truffleframework.com/ganache](https://www.truffleframework.com/ganache).
    For the Linux platform, the software is called `ganache-1.2.3-x86_64.AppImage`.
    After downloading this, you must set the correct permission before executing it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载软件，请访问Ganache网站：[https://www.truffleframework.com/ganache](https://www.truffleframework.com/ganache)。对于Linux平台，该软件称为`ganache-1.2.3-x86_64.AppImage`。下载后，您必须在执行之前设置正确的权限：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Writing a smart contract
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写智能合约
- en: 'Once all the requisite software is installed, we can start writing a smart
    contract. First, we will create a new directory, and then initialize it with the
    Truffle development tool:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 安装所有必需的软件后，我们可以开始编写智能合约。首先，我们将创建一个新目录，然后使用Truffle开发工具对其进行初始化：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output of the `truffle init` command is as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`truffle init`命令的输出如下：'
- en: '![](assets/202a3701-b8b7-47b3-a95b-fab264f8184b.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/202a3701-b8b7-47b3-a95b-fab264f8184b.png)'
- en: 'This will command Truffle to initialize your directory to be a smart contract
    development project. A couple of directories are  available to you when developing
    a smart contract in this project directory:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这将命令Truffle初始化您的目录以成为智能合约开发项目。在该项目目录中开发智能合约时，有几个目录可供您使用：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You usually incorporate a smart contract''s source code in the `contracts`
    folder. The `migrations` folder holds the files that are used in the deployment
    of smart contracts, and the `test` folder holds the `test` files. You can configure
    the smart contract deployment settings in the `truffle-config.js` file. We will
    create the first smart contract and name it `donation.sol` using the following
    code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您会将智能合约的源代码合并到`contracts`文件夹中。`migrations`文件夹包含用于部署智能合约的文件，`test`文件夹包含`test`文件。您可以在`truffle-config.js`文件中配置智能合约部署设置。我们将使用以下代码创建第一个智能合约并将其命名为`donation.sol`：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you are new to smart contracts, there may be some unfamiliar keywords in
    the preceding example. In this chapter, we are not going to discuss everything
    to do with Solidity. Instead, we will only look into the features of Solidity that
    are necessary for building a smart contract and learning the concept of a smart
    contract.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是智能合约的新手，前面的示例中可能会有一些陌生的关键字。在本章中，我们不打算讨论与Solidity有关的所有内容。相反，我们只会研究构建智能合约和学习智能合约概念所必需的Solidity功能。
- en: 'But first, let''s compile this smart contract written in Solidity to Ethereum
    bytecode and an **application binary interface** (**abi**). To do this, we will
    run the following command in the Truffle project directory:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们将这个用Solidity编写的智能合约编译成以太坊字节码和**应用程序二进制接口**（**abi**）。为此，我们将在Truffle项目目录中运行以下命令：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The result of the compilation can be seen in the `build/contracts` folder,
    named `Donation.json`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 编译的结果可以在`build/contracts`文件夹中看到，名为`Donation.json`：
- en: '![](assets/aed6a174-e62d-4c2d-a347-0508e66beca9.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aed6a174-e62d-4c2d-a347-0508e66beca9.png)'
- en: 'If you open the file, you can see a number of interesting things. This `.json`
    file is 1,530 lines long. The `json` object in this file has 14 keys. You only
    need to think about two keys for now. The first one is the interface (called **abi**),
    and the second one is the binary that can be executed on the Ethereum Virtual
    Machine (called `bytecode`). Refer to the code file in the following GitLab link
    for the code in this section: [https://gitlab.com/arjunaskykok/hands-on-blockchain-for-python-developers/blob/master/chapter_02/my_first_smart_contract/build/contracts/Donation.json](https://gitlab.com/arjunaskykok/hands-on-blockchain-for-python-developers/blob/master/chapter_02/my_first_smart_contract/build/contracts/Donation.json).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开该文件，您会看到许多有趣的东西。这个`.json`文件有1530行长。此文件中的`json`对象有14个键。您现在只需要考虑两个键。第一个是接口（称为**abi**），第二个是可以在以太坊虚拟机上执行的二进制文件（称为`bytecode`）。有关本节中代码的代码文件，请参考以下GitLab链接：[https://gitlab.com/arjunaskykok/hands-on-blockchain-for-python-developers/blob/master/chapter_02/my_first_smart_contract/build/contracts/Donation.json](https://gitlab.com/arjunaskykok/hands-on-blockchain-for-python-developers/blob/master/chapter_02/my_first_smart_contract/build/contracts/Donation.json)。
- en: We cannot run this binary file in the same way as when we compile the C code
    and execute the binary directly. We need to put this binary into the Ethereum
    virtual machine. The interface itself is needed for us to interact with the smart
    contract later when we develop a decentralized application. When you deploy a
    smart contract to Ethereum blockchain, you need the bytecode. When you want to
    interact with a smart contract already deployed in Ethereum blockchain, you need
    the `abi` interface.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法像编译C代码并直接执行二进制文件时那样运行此二进制文件。我们需要将此二进制文件放入以太坊虚拟机中。接口本身是我们在开发去中心化应用程序时以后与智能合约进行交互所需的。当您将智能合约部署到以太坊区块链时，您需要字节码。当您想要与已在以太坊区块链上部署的智能合约进行交互时，您需要`abi`接口。
- en: Deploying a smart contract to Ethereum blockchain
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将智能合约部署到以太坊区块链
- en: 'These are the steps for deploying a smart contract to Ethereum blockchain with
    Truffle:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用Truffle将智能合约部署到以太坊区块链的步骤：
- en: '**Write a migration script**: To deploy your smart contract, you need to write
    a migration file. Create a new file named `migrations/2_deploy_donation.js`. Then,
    we fill this file with the following script:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写迁移脚本：要部署您的智能合约，您需要编写一个迁移文件。创建一个名为`migrations/2_deploy_donation.js`的新文件。然后，我们用以下脚本填充这个文件：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As for the `migrations/1_initial_migration.js` and `contracts/Migrations.sol`
    files, we leave these as they are for now. Truffle needs these files in order
    to deploy a smart contract.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 至于`migrations/1_initial_migration.js`和`contracts/Migrations.sol`文件，我们暂时保持它们不变。Truffle需要这些文件才能部署智能合约。
- en: '**Launch Ganache (the blockchain for Ethereum development)**: Now you need
    to launch Ganache. Assuming you have been given proper permission, run the following
    command line to execute the file:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Ganache（以太坊开发的区块链）：现在您需要启动Ganache。假设您已经获得了适当的权限，运行以下命令行来执行文件：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As you can see in the following screenshot, you have numerous accounts, each
    with a balance of 100 ethers:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，您有多个帐户，每个帐户的余额为100以太币：
- en: '![](assets/9129b722-9460-43c9-93ad-bbfa9c292c2f.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9129b722-9460-43c9-93ad-bbfa9c292c2f.png)'
- en: One thing you will notice from the Ganache screen is the **RPC SERVER**, which
    is located in `http://127.0.0.1:7545`. This is where your Ethereum blockchain
    is located in the `Truffle` project directory.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从Ganache屏幕上您会注意到的一件事是**RPC SERVER**，它位于`http://127.0.0.1:7545`。这是您的以太坊区块链位于`Truffle`项目目录中的地方。
- en: '**Edit the Truffle configuration file**: If you open `truffle-config.js`, the
    code will look like this after removing the comment lines:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑Truffle配置文件：如果您打开`truffle-config.js`文件，在删除注释行后，代码将如下所示：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Wipe it out and add the following lines of code to the `truffle-config.js`
    file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 清除它，并将以下代码添加到`truffle-config.js`文件中：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `host` and `port` is taken from the RPC server in the Ganache screen, and `network_id`
    is taken from Network ID in the Ganache screen.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`host`和`port`是从Ganache屏幕上的RPC服务器中获取的，`network_id`是从Ganache屏幕上的Network ID中获取的。'
- en: '**Execute migration scripts**: To deploy your smart contract, you can execute
    it as follows:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行迁移脚本：要部署您的智能合约，您可以按照以下方式执行它：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The Truffle framework will take your bytecode defined in the `Donation.json`
    file and send it to Ethereum blockchain or Ganache. This will provide you with the
    following output:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Truffle框架将获取您在`Donation.json`文件中定义的字节码，并将其发送到以太坊区块链或Ganache。这将为您提供以下输出：
- en: '![](assets/a8023d5f-9bd7-4b2e-8de1-993ba598f9d2.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a8023d5f-9bd7-4b2e-8de1-993ba598f9d2.png)'
- en: In the `2_deploy_donation.js` section, take note of the hexadecimal number after
    the word `contract address:`, which is `0x3e9417399786347b6ab38f59d3f00829d6bba7b8`.
    This is the smart contract's address, which is similar to the URL of a web application.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在`2_deploy_donation.js`部分，注意单词`contract address:`后面的十六进制数字，即`0x3e9417399786347b6ab38f59d3f00829d6bba7b8`。这是智能合约的地址，类似于Web应用程序的URL。
- en: 'If `Network is up to date.` was output when you tried to deploy your smart
    contract, you can delete the files inside the `build/contracts` directory and
    run this version using the `truffle migrate` command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试部署智能合约时输出了`Network is up to date.`，您可以删除`build/contracts`目录中的文件，并使用`truffle
    migrate`命令运行这个版本：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we will take a look at the changes on the Ganache screen:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看Ganache屏幕上的变化：
- en: '![](assets/facfd816-d857-4d72-bb6a-7a2b869cfaa9.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/facfd816-d857-4d72-bb6a-7a2b869cfaa9.png)'
- en: The most important thing to note is that the first account, `0xb105F01Ce341Ef9282dc2201BDfdA2c26903da77`,
    has lost money. The balance is no longer 100 ETH; it is `**99.98 ETH**`. So where
    did the 0.02 ETH go? Miners need to be incentivized in order to write your smart
    contract into the Ethereum blockchain. Note that, the CURRENT BLOCK is no longer
    0, but 4. So, 0.02 ETH will be the fee for the miner who successfully puts the
    block containing your smart contract into the blockchain. But, of course, in this
    case, there is no miner because we use Ganache, the Ethereum development blockchain.
    Ganache just simulates the transaction fee by incorporating a smart contract into
    the blockchain.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的一点是，第一个帐户`0xb105F01Ce341Ef9282dc2201BDfdA2c26903da77`失去了钱。余额不再是100 ETH，而是`**99.98
    ETH**`。那么0.02 ETH去哪了？矿工需要有动力才能将您的智能合约写入以太坊区块链。请注意，当前区块不再是0，而是4。因此，0.02 ETH将是成功将包含您的智能合约的区块放入区块链的矿工的费用。但是，在这种情况下，当然没有矿工，因为我们使用的是以太坊开发区块链Ganache。Ganache只是通过将智能合约纳入区块链来模拟交易费用。
- en: 'If you click the TRANSACTIONS tab, you will see something like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击“TRANSACTIONS”选项卡，您将看到类似于这样的内容：
- en: '![](assets/c7859d31-c0b3-470b-991e-62c54f907791.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c7859d31-c0b3-470b-991e-62c54f907791.png)'
- en: You have now created two contracts (Donation and Migrations). Once a smart contract
    is deployed, unless you apply a method to shut it down, it will be in the blockchain
    forever. If there is a bug in your smart contract, you cannot patch it. You have
    to deploy a fixed smart contract in a different address.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经创建了两个合约（Donation和Migrations）。一旦部署了智能合约，除非您应用了关闭它的方法，否则它将永远存在于区块链中。如果您的智能合约中有错误，您无法修补它。您必须在不同的地址部署一个修复后的智能合约。
- en: Interacting with smart contracts
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与智能合约交互
- en: 'To interact with your smart contract that resides in Ethereum blockchain, execute
    this command inside your `Truffle` project directory:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要与驻留在以太坊区块链中的智能合约进行交互，在您的`Truffle`项目目录中执行以下命令：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, in the `truffle` console prompt, execute the following command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`truffle`控制台提示符中，执行以下命令：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you are confused about `then`, the Truffle console uses the concept of callback,
    on which accessing the smart contract object is executed asynchronously. This
    statement in the Truffle console returns immediately before the callback is being
    executed. In the callback function, you will accept the smart contract instance
    as an `instance` parameter. Then, we can access our `useless_variable` variable
    from this `instance` parameter. Then, to retrieve the value, we have to execute
    the `call` method on that variable.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对`then`感到困惑，Truffle控制台使用回调的概念，通过它执行访问智能合约对象是异步执行的。在Truffle控制台中，此语句在回调被执行之前立即返回。在回调函数中，您将接受智能合约实例作为`instance`参数。然后，我们可以从这个`instance`参数中访问我们的`useless_variable`变量。然后，要检索值，我们必须在该变量上执行`call`方法。
- en: The Truffle framework would use the **abi** defined in the `Donation.json` file
    to understand what interfaces are available in your smart contract. Recall that
    you define the `useless_variable` in your smart contract and set it to `Donation
    string` in the constructor (or initialization) function. It is free to read a
    public variable in this way; it does not cost any ether because it is stored in
    blockchain.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Truffle框架将使用`Donation.json`文件中定义的**abi**来了解您的智能合约中有哪些接口可用。请记住，在您的智能合约中定义了`useless_variable`并将其设置为构造函数（或初始化）函数中的`Donation
    string`。以这种方式读取公共变量是免费的；因为它存储在区块链中，所以不需要任何以太币。
- en: Let me remind you what it means if the variable is stored in blockchain. If
    you incorporate this smart contract in the Ethereum production blockchain, the
    `useless_variable` variable will be stored in every Ethereum node. At the time
    of writing, there are around 10,000 nodes. This number keeps changing, as can
    be seen here: [https://www.ethernodes.org](https://www.ethernodes.org). A node
    can be in one computer, and a computer can hold a couple of nodes. However, it
    is most likely that one computer holds only one node because the requirement to
    become the host of a node is pretty high. You need a node if you want to interact
    with the blockchain (there are also other options for this, such as using API
    to interact with someone else's node). For this reason, it is free to read the `useless_variable` variable because
    you just read it from your computer.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我提醒您，如果变量存储在区块链中意味着什么。如果您将此智能合约纳入以太坊生产区块链，`useless_variable`变量将存储在每个以太坊节点中。在撰写本文时，大约有10,000个节点。这个数字会不断变化，可以在这里看到：[https://www.ethernodes.org](https://www.ethernodes.org)。一个节点可以在一台计算机上，一台计算机可以容纳几个节点。但是，一台计算机很可能只持有一个节点，因为成为节点主机的要求非常高。如果您想与区块链交互，就需要一个节点（也有其他选项，例如使用API与他人的节点进行交互）。因此，免费读取`useless_variable`变量，因为您只是从自己的计算机上读取它。
- en: 'If you are confused by this free concept, let''s make it clearer by changing
    the `useless_variable` variable into something else:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对这个免费概念感到困惑，让我们通过将`useless_variable`变量更改为其他内容来使其更清晰：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You would get the following output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得以下输出：
- en: '![](assets/0a5802f8-3250-4dd9-9968-83361f3674a0.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0a5802f8-3250-4dd9-9968-83361f3674a0.png)'
- en: There is another cryptic hexadecimal number after the word `from`, which is
    `0xb105F01Ce341Ef9282dc2201BDfdA2c26903da77`. This is the public address of the
    first account in Ganache. You can confirm it by looking at the Ganache screen.
    Here, there is a difference in the way you read the `useless_variable` variable and
    set it with different content. Changing the content of the variable requires different
    syntax and, more importantly, an account to use. An account is required because
    you need to spend some money when changing the variable in blockchain. When you
    change the value of this `useless_variable` variable in the smart contract in
    the blockchain, you are basically broadcasting to all Ethereum nodes in the Ethereum
    production blockchain, which has around 10,000 nodes available to update the content
    of `useless_variable`. We are using Ganache, which is an Ethereum development
    blockchain, but in a production setting, you need to sign your transaction to
    change the content of the variable with a private key. A private key's purpose
    is similar to a password on an account, but a private key cannot be changed, while
    you can update your password as many times as you like. If you forget your password,
    you could reset it and click the link in your confirmation email to update it.
    In blockchain, this is not an option.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在单词`from`后面还有另一个神秘的十六进制数字，即`0xb105F01Ce341Ef9282dc2201BDfdA2c26903da77`。这是Ganache中第一个账户的公共地址。您可以通过查看Ganache屏幕来确认。在这里，您读取`useless_variable`变量的方式有所不同，并且使用不同的内容进行设置。更改变量的内容需要不同的语法，更重要的是需要一个要使用的账户。需要账户是因为在区块链中更改变量时需要花一些钱。当您在以太坊生产区块链中的智能合约中更改`useless_variable`变量的值时，基本上是向以太坊生产区块链中的所有以太坊节点广播，该区块链中有大约10,000个可用于更新`useless_variable`内容的节点。我们正在使用Ganache，这是以太坊开发区块链，但在生产环境中，您需要使用私钥签署交易以更改变量的内容。私钥的作用类似于账户上的密码，但私钥无法更改，而您可以随意更新密码。如果您忘记密码，可以重置密码并单击确认电子邮件中的链接进行更新。在区块链中，这是不可能的。
- en: 'If you check Ganache now, your balance stays the same; only the block number
    increases from 4 to 5:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在检查Ganache，您的余额保持不变；只有区块编号从4增加到5：
- en: '![](assets/9a3a377f-187e-4367-9528-5f01a2fab109.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9a3a377f-187e-4367-9528-5f01a2fab109.png)'
- en: This happens because the amount of money required is so small. You can look
    at the output of the command to change the value of `useless_variable` after you
    execute the last command. Look at the gas used field; this is what you spent when
    executing a function in a smart contract. The amount of gas used is 33684, but
    this is in gwei, not in ether. 1 ether is equal to 1,000,000,000 gwei, so it is
    around 0.00003 ether. In this case, the gas is calculated automatically but, later,
    you can set how much gas you want to allocate when executing any function in Ethereum
    blockchain. If you do not contribute much ether, and the amount of gas allocated
    is small, there is a big chance your execution will be accorded lower priority.
    It will take longer for the transaction to be confirmed (meaning the value of
    the variable has been changed). It could get rejected by miners if the network
    is experiencing heavy traffic.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为所需的金额非常小。您可以在执行最后一个命令后查看更改`useless_variable`值的输出。查看使用的燃气字段；这是在智能合约中执行函数时所花费的。使用的燃气量为33684，但这是以gwei计算的，而不是以以太计算的。1以太等于1,000,000,000
    gwei，因此大约为0.00003以太。在这种情况下，燃气是自动计算的，但以后，您可以设置在以太坊区块链中执行任何函数时要分配多少燃气。如果您没有贡献太多以太，并且分配的燃气量很小，那么您的执行很有可能会被赋予较低的优先级。交易确认所需的时间会更长（意味着变量的值已经被更改）。如果网络遇到大量交通，它可能会被矿工拒绝。
- en: This concept of spending money to change the state of the program is new. Reading
    everything from blockchain is free because all the data is in your computer (if
    you have Ethereum node), but to change or add something in blockchain requires
    money. This occurs because you change the data in all Ethereum nodes across the
    globe, which is expensive! As well as changing the state of the smart contract,
    computation that runs in memory also requires money.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 花钱改变程序状态的概念是新的。从区块链中读取所有内容是免费的，因为所有数据都在您的计算机上（如果您有以太坊节点），但是要更改或添加区块链中的内容需要花钱。这是因为您更改了全球各地的所有以太坊节点中的数据，这是昂贵的！除了更改智能合约的状态外，内存中运行的计算也需要花钱。
- en: Sending ether to smart contracts
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向智能合约发送以太币
- en: 'Now, let''s send some ether to the smart contract. Let''s use the second account
    for this. The second account wants to donate 5 ether using a smart contract as
    follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们向智能合约发送一些以太币。让我们使用第二个帐户。第二个帐户希望使用智能合约捐赠5个以太币，如下所示：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You would get the following output:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得以下输出：
- en: '![](assets/03e4020c-2b26-49aa-9941-9a3c98ea3560.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/03e4020c-2b26-49aa-9941-9a3c98ea3560.png)'
- en: 'As well as the `from` field, you need to add a `value` field. In this `value`
    field, you input how much money you want to send to the smart contract. You may
    wonder why this number has so many zeros. When you transfer money in Ethereum
    blockchain, you must use the lowest currency unit (similarly to converting from
    dollars to cents), which is called **wei**. 1 ether is 1,000,000,000,000,000,000
    wei (18 zeros). You want to send 5 ether, making it 5,000,000,000,000,000,000\.
    Now, if you look at your Ganache screen, you will notice that the balance drops
    to 95 ether. So 5 ether is now held in the smart contract, as demonstrated in
    the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`from`字段外，您还需要添加一个`value`字段。在这个`value`字段中，您输入要发送到智能合约的金额。您可能会想知道为什么这个数字有这么多个零。在以太坊区块链中转移资金时，您必须使用最低的货币单位（类似于从美元转换为美分），这称为**wei**。1以太是1,000,000,000,000,000,000
    wei（18个零）。您想发送5个以太，使其为5,000,000,000,000,000,000。现在，如果您查看Ganache屏幕，您会注意到余额下降到95个以太。因此，5个以太现在存储在智能合约中，如下截图所示：
- en: '![](assets/9c1a0285-8d53-4522-8195-738bab39d794.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9c1a0285-8d53-4522-8195-738bab39d794.png)'
- en: 'Let''s withdraw this using the first account:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用第一个帐户提取这笔款项：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You will get the following output:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得以下输出：
- en: '![](assets/be564c8f-f969-4437-8088-fa8daea2f341.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/be564c8f-f969-4437-8088-fa8daea2f341.png)'
- en: 'This execution has the same syntax as before, minus the `value` field. Now
    take a look at the Ganache screen. The first account has between 104 and 105 ether
    (such as 104.8 or 104.9 ether). It is not 105 ether because we already outlaid
    some money launching the smart contract using the first account, and for paying
    the transaction fee when executing some functions in the smart contract:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个执行与以前的语法相同，减去了`value`字段。现在看一下Ganache屏幕。第一个帐户有104到105个以太币（例如104.8或104.9个以太币）。不是105个以太币，因为我们已经在使用第一个帐户启动智能合约时支出了一些钱，并且在执行智能合约中的一些功能时支付了交易费用：
- en: '![](assets/3583e93d-eaa1-4a9a-ad0c-b78642425f6b.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3583e93d-eaa1-4a9a-ad0c-b78642425f6b.png)'
- en: Why smart contracts?
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么智能合约？
- en: You have now seen a smart contract in action. So what is all the fuss about?
    What can smart contracts do that traditional programs (normal web applications)
    can't? When it comes to changing the value of a variable in a program that lives
    on the network, we can use remote procedure call. More commonly, we can store
    a variable in a database and people can change the value in the database from
    a web application. When sending money, we can integrate our web application with
    Stripe or PayPal, giving us the means to send money. Alternatively, you could
    create a table in a database for storing digital money. Ether in Ethereum is basically
    digital money. In fact, a normal web application can do everything a smart contract
    can do, but faster and cheaper. The key difference is that blockchain solutions
    can be trustless. This means that you can put trust in the program itself, but
    not the operator.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经看到了智能合约的运行。那么这一切是怎么回事？智能合约能做什么传统程序（普通Web应用程序）做不到的？当涉及到更改网络上的程序变量的值时，我们可以使用远程过程调用。更常见的是，我们可以将变量存储在数据库中，人们可以从Web应用程序中更改数据库中的值。在发送资金时，我们可以将我们的Web应用程序与Stripe或PayPal集成，从而使我们能够发送资金。或者，您可以创建一个用于存储数字货币的数据库表。以太坊中的以太币基本上是数字货币。实际上，普通的Web应用程序可以做任何智能合约可以做的事情，但速度更快，成本更低。区块链解决方案的关键区别在于可以无需信任。这意味着您可以信任程序本身，而不是操作员。
- en: In a normal web application, we rely on trusting the operators (developers or
    system administrators) of the web application. We hope that they develop and deploy
    the web application honestly. There is no way for us, as a user of the web application,
    to make sure the web application does what it tells everyone it is trying to do.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常的Web应用程序中，我们依靠对Web应用程序的运营者（开发者或系统管理员）的信任。我们希望他们诚实地开发和部署Web应用程序。作为Web应用程序的用户，我们无法确保Web应用程序是否真的做到了它告诉大家它正在尝试做的事情。
- en: Let's say we have a web application that hosts videos (such as YouTube or Vimeo).
    The web application can increase the number of likes on a video if a user clicks
    the Like button. The rule is that a user can only like a video once. Consequently,
    you would expect a video that contains 400 likes to have 400 users who have liked
    that video. What if I tell you that behind the scenes, a system administrator
    can increase the number of likes artificially? This means that among 400 likes,
    it could be that only 300 likes come from genuine users. The other 100 likes are
    inflated by the system administrator. It does not have to be as raw as updating
    a table in a database directly, for example, through `UPDATE video_likes SET likes_amount
    = 400 WHERE video_id = 5;`. The way to inflate the number of likes could be embedded
    inside the system.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个托管视频的Web应用程序（例如YouTube或Vimeo）。如果用户点击“喜欢”按钮，Web应用程序可以增加视频的喜欢数。规则是用户只能给视频点赞一次。因此，你期望包含400个喜欢的视频有400个点赞的用户。如果我告诉你，在幕后，系统管理员可以人为地增加喜欢数呢？这意味着在400个喜欢中，可能只有300个来自真实用户，另外100个是系统管理员人为增加的。这并不一定是直接更新数据库中的表，例如通过`UPDATE
    video_likes SET likes_amount = 400 WHERE video_id = 5;`。增加喜欢数的方式可能被嵌入在系统内部。
- en: Normal users would not notice this. The company behind the web application could
    publish the source code on GitHub. But how do you make sure the web application
    is indeed built from the source code hosted on GitHub? What if, after deploying
    the web application, the system administrator or the developer patches the system?
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 普通用户可能不会注意到这一点。Web应用程序的公司可以在GitHub上发布源代码。但是，如何确保Web应用程序确实是从GitHub托管的源代码构建的呢？如果在部署Web应用程序后，系统管理员或开发者对系统进行了修补怎么办？
- en: There are a number of ways to prevent this digital cheating. First of all, we
    can introduce an IT auditor. These could be from governmental or non-governmental
    organizations. They will audit the source code of the system and, more importantly,
    check what the code does in the production system. In this situation, you move
    your trust from the developers or system administrators to third-party auditors.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以防止这种数字作弊。首先，我们可以引入IT审计员。他们可以来自政府或非政府组织。他们将审计系统的源代码，更重要的是，检查代码在生产系统中的运行情况。在这种情况下，你将把你的信任从开发者或系统管理员转移到第三方审计员。
- en: As an IT consultant, I make a livelihood by building web applications and mobile
    applications. I once encountered a prospective client who wanted to make a digital
    newspaper (along the lines of the Guardian or the New York Times). This client
    asked me whether there is a way to move any article into the most viewed articles
    section as desired. The motive here was to promote specific articles, even if
    it meant that the system would be lying to users about what the most frequently
    viewed articles are.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名IT顾问，我通过构建Web应用程序和移动应用程序谋生。我曾遇到一个潜在客户，他想要制作一份数字报纸（类似于《卫报》或《纽约时报》）。这位客户问我是否有办法将任何文章移动到最受欢迎的文章部分。这样做的动机是为了推广特定文章，即使这意味着系统会向用户撒谎关于最常被浏览的文章是什么。
- en: 'The CEO of Reddit recently issued a public apology for being caught modifying
    comments made about him on the website. More information on this is provided at
    the following link: [https://techcrunch.com/2016/11/23/reddit-huffman-trump/](https://techcrunch.com/2016/11/23/reddit-huffman-trump/)[.](https://techcrunch.com/2016/11/23/reddit-huffman-trump/)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Reddit的CEO最近因在网站上修改关于他的评论而发表了公开道歉。更多信息请参阅以下链接：[https://techcrunch.com/2016/11/23/reddit-huffman-trump/](https://techcrunch.com/2016/11/23/reddit-huffman-trump/)。
- en: 'Even well-known websites play with digital cheating. For instance, some cryptocurrency
    exchanges fake trading volumes. More information is provided on this at the following
    link: [https://medium.com/@sylvainartplayribes/chasing-fake-volume-a-crypto-plague-ea1a3c1e0b5e](https://medium.com/@sylvainartplayribes/chasing-fake-volume-a-crypto-plague-ea1a3c1e0b5e).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是知名的网站也会玩数字作弊。例如，一些加密货币交易所伪造交易量。更多信息请参阅以下链接：[https://medium.com/@sylvainartplayribes/chasing-fake-volume-a-crypto-plague-ea1a3c1e0b5e](https://medium.com/@sylvainartplayribes/chasing-fake-volume-a-crypto-plague-ea1a3c1e0b5e)。
- en: Smart contracts are another means of preventing digital cheating. A developer
    of a smart contract could publish the source code and deploy the smart contract
    into Ethereum blockchain. People can verify whether the source code being published
    and the smart contract being deployed are one and the same. A developer could
    create a method to cheat inside the smart contract, but this will be caught by
    users because they could reconstruct the source code of the smart contract from
    the smart contract's bytecode in the blockchain. A developer could not patch the
    smart contract that is already being deployed.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 智能合约是防止数字作弊的另一种方式。智能合约的开发者可以发布源代码并将智能合约部署到以太坊区块链中。人们可以验证发布的源代码和部署的智能合约是否一致。开发者可以在智能合约中创建欺骗的方法，但用户可以从区块链中智能合约的字节码重构智能合约的源代码，从而发现这种行为。开发者无法修补已经部署的智能合约。
- en: There are other smart contract properties, such as autonomy and censorship resistance.
    However, none of these properties beat its transparency. Alternatively, you must
    have greater power than all 10,000 nodes working together to protect the credibility
    of the Ethereum system. To make the math simple, you need to buy more than 5,000
    computers with high-end GPUs. Let's say you have that amount of resources in order
    to cheat. Honest miners will be alarmed when you cheat in the Ethereum system,
    and they will make a noise on the internet. So if you have the means to cheat
    in Ethereum, you cannot do it sneakily. Furthermore, if you have the means to
    obtain 5,000 computers with high-end GPUs, you could become a miner in the Ethereum
    platform and generate a nice income. Consequently, it is very hard to cheat in
    the Ethereum platform.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他智能合约属性，比如自治和抗审查。然而，没有任何属性能比得上它的透明性。或者说，你必须拥有比所有10,000个节点一起工作更强大的力量来保护以太坊系统的可信度。简单来说，你需要购买超过5,000台配备高端GPU的计算机。假设你有这么多资源来作弊。当你在以太坊系统中作弊时，诚实的矿工会在互联网上发出警报。因此，如果你有作弊的手段，你无法偷偷摸摸地做。此外，如果你有手段获得5,000台配备高端GPU的计算机，你可以成为以太坊平台上的矿工并获得丰厚的收入。因此，在以太坊平台上作弊是非常困难的。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we explored how to install Solidity development tools: Node.js,
    Truffle, or Ganache. We then learned how to write a smart contract and compile
    it. After that, we looked at the concept of deploying a smart contract to Ethereum
    blockchain, followed by interacting with a smart contract being deployed with
    the Truffle console tool. We gained an understanding of the concept of sending
    ether to a smart contract and gas usage when executing a function in a smart contract.
    In the last step, we familiarized ourselves with why the smart concept works so
    well, with the potential to create a program that is censorship-resistant and
    transparent, and that cannot be circumvented.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们探讨了如何安装Solidity开发工具：Node.js，Truffle或Ganache。然后我们学习了如何编写智能合约并对其进行编译。之后，我们看了一下将智能合约部署到以太坊区块链的概念，然后使用Truffle控制台工具与已部署的智能合约进行交互。我们对向智能合约发送以太币以及在执行智能合约中的功能时的燃气使用概念有了了解。在最后一步，我们熟悉了为什么智能概念如此成功，具有创建一个无法绕过的、透明的程序的潜力。
- en: In the next chapter, we will learn how to implement smart contracts using Vyper.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Vyper实现智能合约。
- en: Further reading
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Ethereum yellow paper: [https://ethereum.github.io/yellowpaper/paper.pdf](https://ethereum.github.io/yellowpaper/paper.pdf)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊黄皮书：[https://ethereum.github.io/yellowpaper/paper.pdf](https://ethereum.github.io/yellowpaper/paper.pdf)
- en: 'Ethereum white paper: [https://github.com/ethereum/wiki/wiki/White-Paper](https://github.com/ethereum/wiki/wiki/White-Paper)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以太坊白皮书：[https://github.com/ethereum/wiki/wiki/White-Paper](https://github.com/ethereum/wiki/wiki/White-Paper)
