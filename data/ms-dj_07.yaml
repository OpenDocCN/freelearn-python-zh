- en: Chapter 7. Advanced Views and URLconfs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。高级视图和URLconfs
- en: In [Chapter 2](ch02.xhtml "Chapter 2. Views and URLconfs"), *Views and URLconfs*,
    we explained the basics of Django's view functions and URLconfs. This chapter
    goes into more detail about advanced functionality in those two pieces of the
    framework.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.xhtml "第2章。视图和URLconfs")*视图和URLconfs*中，我们解释了Django的视图函数和URLconfs的基础知识。本章将更详细地介绍框架中这两个部分的高级功能。
- en: URLconf Tips and Tricks
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: URLconf提示和技巧
- en: There's nothing special about URLconfs-like anything else in Django, they're
    just Python code. You can take advantage of this in several ways, as described
    in the sections that follow.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: URLconfs没有什么特别的-就像Django中的其他任何东西一样，它们只是Python代码。您可以以几种方式利用这一点，如下面的部分所述。
- en: Streamlining function imports
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简化函数导入
- en: 'Consider this URLconf, which builds on the example in [Chapter 2](ch02.xhtml
    "Chapter 2. Views and URLconfs"), *Views and URLconfs*:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个URLconf，它基于[第2章](ch02.xhtml "第2章。视图和URLconfs")*视图和URLconfs*中的示例构建：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As explained in [Chapter 2](ch02.xhtml "Chapter 2. Views and URLconfs"), *Views
    and URLconfs*, each entry in the URLconf includes its associated view function,
    passed directly as a function object. This means it's necessary to import the
    view functions at the top of the module.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第2章](ch02.xhtml "第2章。视图和URLconfs")*视图和URLconfs*中所述，URLconf中的每个条目都包括其关联的视图函数，直接作为函数对象传递。这意味着需要在模块顶部导入视图函数。
- en: But as a Django application grows in complexity, its URLconf grows, too, and
    keeping those imports can be tedious to manage. (For each new view function, you
    have to remember to import it, and the import statement tends to get overly long
    if you use this approach.)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但是随着Django应用程序的复杂性增加，其URLconf也会增加，并且保持这些导入可能很繁琐。 （对于每个新的视图函数，您必须记住导入它，并且如果使用这种方法，导入语句往往会变得过长。）
- en: 'It''s possible to avoid that tedium by importing the `views` module itself.
    This example URLconf is equivalent to the previous one:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过导入`views`模块本身来避免这种单调。这个示例URLconf等同于前一个：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Special-Casing URLs in debug mode
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在调试模式下特殊处理URL
- en: 'Speaking of constructing `urlpatterns` dynamically, you might want to take
    advantage of this technique to alter your URLconf''s behavior while in Django''s
    debug mode. To do this, just check the value of the `DEBUG` setting at runtime,
    like so:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 说到动态构建`urlpatterns`，您可能希望利用这种技术来在Django的调试模式下更改URLconf的行为。为此，只需在运行时检查`DEBUG`设置的值，如下所示：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, the URL `/debuginfo/` will only be available if your `DEBUG`
    setting is set to `True`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，只有当您的`DEBUG`设置为`True`时，URL`/debuginfo/`才可用。
- en: Named groupsPreview
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名组预览
- en: The above example used simple, non-named regular-expression groups (via parenthesis)
    to capture bits of the URL and pass them as positional arguments to a view.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例使用简单的非命名正则表达式组（通过括号）来捕获URL的部分并将它们作为位置参数传递给视图。
- en: In more advanced usage, it's possible to use named regular-expression groups
    to capture URL bits and pass them as keyword arguments to a view.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在更高级的用法中，可以使用命名的正则表达式组来捕获URL部分并将它们作为关键字参数传递给视图。
- en: In Python regular expressions, the syntax for named regular-expression groups
    is `(?P<name>pattern)`, where `name` is the name of the group and `pattern` is
    some pattern to match.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python正则表达式中，命名正则表达式组的语法是`(?P<name>pattern)`，其中`name`是组的名称，`pattern`是要匹配的某个模式。
- en: For example, say we have a list of book reviews on our books site, and we want
    to retrieve reviews for certain dates, or date ranges.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们在我们的书籍网站上有一系列书评，并且我们想要检索特定日期或日期范围的书评。
- en: 'Here''s a sample URLconf:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例URLconf：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Notes:**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: To capture a value from the URL, just put parenthesis around it. There's no
    need to add a leading slash, because every URL has that. For example, it's `^reviews`,
    not `^/reviews`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要从URL中捕获一个值，只需在其周围加括号。不需要添加一个前导斜杠，因为每个URL都有。例如，它是`^reviews`，而不是`^/reviews`。
- en: The `'r'` in front of each regular expression string is optional but recommended.
    It tells Python that a string is raw-that nothing in the string should be escaped.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每个正则表达式字符串前面的`'r'`是可选的，但建议使用。它告诉Python字符串是原始的，字符串中的任何内容都不应该被转义。
- en: '**Example requests:**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例请求：**'
- en: A request to `/reviews/2005/03/` would match the third entry in the list. Django
    would call the function `views.month_archive(request,``'2005',``'03')`.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对`/reviews/2005/03/`的请求将匹配列表中的第三个条目。Django将调用函数`views.month_archive(request,``'2005',``'03')`。
- en: '`/reviews/2005/3/` would not match any URL patterns, because the third entry
    in the list requires two digits for the month.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/reviews/2005/3/`不会匹配任何URL模式，因为列表中的第三个条目要求月份需要两位数字。'
- en: '`/reviews/2003/` would match the first pattern in the list, not the second
    one, because the patterns are tested in order, and the first one is the first
    test to pass. Feel free to exploit the ordering to insert special cases like this.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/reviews/2003/`将匹配列表中的第一个模式，而不是第二个模式，因为模式是按顺序测试的，第一个模式是第一个通过的测试。可以随意利用排序来插入这样的特殊情况。'
- en: '`/reviews/2003` would not match any of these patterns, because each pattern
    requires that the URL end with a slash.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/reviews/2003`不会匹配这些模式中的任何一个，因为每个模式都要求URL以斜杠结尾。'
- en: '`/reviews/2003/03/03/` would match the final pattern. Django would call the
    function `views.review_detail(request,``''2003'',``''03'',``''03'')`.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/reviews/2003/03/03/`将匹配最终模式。Django将调用函数`views.review_detail(request,``''2003'',``''03'',``''03'')`。'
- en: 'Here''s the above example URLconf, rewritten to use named groups:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上面的示例URLconf，重写以使用命名组：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This accomplishes exactly the same thing as the previous example, with one
    subtle difference: The captured values are passed to view functions as keyword
    arguments rather than positional arguments. For example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这与前面的示例完全相同，只有一个细微的区别：捕获的值作为关键字参数传递给视图函数，而不是作为位置参数。例如：
- en: A request to `/reviews/2005/03/` would call the function `views.month_archive(request,``year='2005',``month='03')`,
    instead of `views.month_archive(request,``'2005',``'03')`.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对`/reviews/2005/03/`的请求将调用函数`views.month_archive(request,``year='2005',``month='03')`，而不是`views.month_archive(request,``'2005',``'03')`。
- en: A request to `/reviews/2003/03/03/` would call the function `views.review_detail(request,``year='2003',``month='03',``day='03')`.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对`/reviews/2003/03/03/`的请求将调用函数`views.review_detail(request,``year='2003',``month='03',``day='03')`。
- en: In practice, this means your URLconfs are slightly more explicit and less prone
    to argument-order bugs-and you can reorder the arguments in your view's function
    definitions. Of course, these benefits come at the cost of brevity; some developers
    find the named-group syntax ugly and too verbose.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这意味着您的URLconf更加明确，不太容易出现参数顺序错误-您可以重新排列视图函数定义中的参数。当然，这些好处是以简洁为代价的；一些开发人员认为命名组语法难看且过于冗长。
- en: The matching/grouping algorithm
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 匹配/分组算法
- en: 'Here''s the algorithm the URLconf parser follows, with respect to named groups
    vs. non-named groups in a regular expression:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是URLconf解析器遵循的算法，关于正则表达式中的命名组与非命名组：
- en: If there are any named arguments, it will use those, ignoring non-named arguments.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有任何命名参数，它将使用这些参数，忽略非命名参数。
- en: Otherwise, it will pass all non-named arguments as positional arguments.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，它将把所有非命名参数作为位置参数传递。
- en: In both cases, any extra keyword arguments that have been given will also be
    passed to the view.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，任何给定的额外关键字参数也将传递给视图。
- en: What the URLconf searches against
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: URLconf搜索的内容
- en: The URLconf searches against the requested URL, as a normal Python string. This
    does not include `GET` or `POST` parameters, or the domain name. For example,
    in a request to `http://www.example.com/myapp/`, the URLconf will look for `myapp/`.
    In a request to `http://www.example.com/myapp/?page=3`, the URLconf will look
    for `myapp/`. The URLconf doesn't look at the request method. In other words,
    all request methods-`POST`, `GET`, `HEAD`, and so on-will be routed to the same
    function for the same URL.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: URLconf会针对请求的URL进行搜索，作为普通的Python字符串。这不包括`GET`或`POST`参数，也不包括域名。例如，在对`http://www.example.com/myapp/`的请求中，URLconf将查找`myapp/`。在对`http://www.example.com/myapp/?page=3`的请求中，URLconf将查找`myapp/`。URLconf不会查看请求方法。换句话说，所有请求方法-`POST`、`GET`、`HEAD`等等-都将被路由到相同的函数以处理相同的URL。
- en: Captured arguments are always strings
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 捕获的参数始终是字符串
- en: 'Each captured argument is sent to the view as a plain Python string, regardless
    of what sort of match the regular expression makes. For example, in this URLconf
    line:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 每个捕获的参数都作为普通的Python字符串发送到视图中，无论正则表达式的匹配类型如何。例如，在这个URLconf行中：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '...the `year` argument to `views.year_archive()` will be a string, not an integer,
    even though the `[0-9]{4}` will only match integer strings.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '...`views.year_archive()`的`year`参数将是一个字符串，而不是一个整数，即使`[0-9]{4}`只匹配整数字符串。'
- en: Specifying defaults for view arguments
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定视图参数的默认值
- en: 'A convenient trick is to specify default parameters for your view''s arguments.
    Here''s an example URLconf:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方便的技巧是为视图的参数指定默认参数。以下是一个示例URLconf：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the above example, both URL patterns point to the same view-`views.page`-but
    the first pattern doesn't capture anything from the URL. If the first pattern
    matches, the `page()` function will use its default argument for `num`, `"1"`.
    If the second pattern matches, `page()` will use whatever `num` value was captured
    by the regex.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，两个URL模式都指向相同的视图-`views.page`-但第一个模式不会从URL中捕获任何内容。如果第一个模式匹配，`page()`函数将使用其默认参数`num`，即`"1"`。如果第二个模式匹配，`page()`将使用正则表达式捕获的`num`值。
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Keyword Arguments vs. Positional Arguments**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**关键字参数 vs. 位置参数**'
- en: 'A Python function can be called using keyword arguments or positional arguments-and,
    in some cases, both at the same time. In a keyword argument call, you specify
    the names of the arguments along with the values you''re passing. In a positional
    argument call, you simply pass the arguments without explicitly specifying which
    argument matches which value; the association is implicit in the arguments'' order.
    For example, consider this simple function:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Python函数可以使用关键字参数或位置参数调用-在某些情况下，两者同时使用。在关键字参数调用中，您指定要传递的参数的名称以及值。在位置参数调用中，您只需传递参数，而不明确指定哪个参数匹配哪个值；关联是在参数的顺序中隐含的。例如，考虑这个简单的函数：
- en: '`def sell(item, price, quantity): print "Selling %s unit(s) of %s at %s" %
    (quantity, item, price)`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`def sell(item, price, quantity): print "以%s的价格出售%s个单位的%s" % (quantity, item,
    price)`'
- en: To call it with positional arguments, you specify the arguments in the order
    in which they're listed in the function definition:`sell('Socks', '$2.50', 6)`
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用位置参数调用它，您需要按照函数定义中列出的顺序指定参数：`sell('Socks', '$2.50', 6)`
- en: To call it with keyword arguments, you specify the names of the arguments along
    with the values. The following statements are equivalent:`sell(item='Socks', price='$2.50',
    quantity=6)` `sell(item='Socks', quantity=6, price='$2.50')` `sell(price='$2.50',
    item='Socks', quantity=6)` `sell(price='$2.50', quantity=6, item='Socks')` `sell(quantity=6,
    item='Socks', price='$2.50')` `sell(quantity=6, price='$2.50', item='Socks')`
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用关键字参数调用它，您需要指定参数的名称以及值。以下语句是等效的：`sell(item='Socks', price='$2.50', quantity=6)`
    `sell(item='Socks', quantity=6, price='$2.50')` `sell(price='$2.50', item='Socks',
    quantity=6)` `sell(price='$2.50', quantity=6, item='Socks')` `sell(quantity=6,
    item='Socks', price='$2.50')` `sell(quantity=6, price='$2.50', item='Socks')`
- en: 'Finally, you can mix keyword and positional arguments, as long as all positional
    arguments are listed before keyword arguments. The following statements are equivalent
    to the previous examples: `sell(''Socks'', ''$2.50'', quantity=6)` `sell(''Socks'',
    price=''$2.50'', quantity=6)` `sell(''Socks'', quantity=6, price=''$2.50'')`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以混合使用关键字和位置参数，只要所有位置参数在关键字参数之前列出。以下语句与前面的示例等效：`sell('Socks', '$2.50', quantity=6)`
    `sell('Socks', price='$2.50', quantity=6)` `sell('Socks', quantity=6, price='$2.50')`
- en: Performance
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能
- en: Each regular expression in a `urlpatterns` is compiled the first time it's accessed.
    This makes the system blazingly fast.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`urlpatterns`中的每个正则表达式在第一次访问时都会被编译。这使得系统运行非常快。'
- en: Error handling
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理
- en: 'When Django can''t find a regex matching the requested URL, or when an exception
    is raised, Django will invoke an error-handling view. The views to use for these
    cases are specified by four variables. The variables are:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Django 找不到与请求的 URL 匹配的正则表达式，或者当引发异常时，Django 将调用一个错误处理视图。用于这些情况的视图由四个变量指定。这些变量是：
- en: '`handler404`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handler404`'
- en: '`handler500`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handler500`'
- en: '`handler403`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handler403`'
- en: '`handler400`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handler400`'
- en: Their default values should suffice for most projects, but further customization
    is possible by assigning values to them. Such values can be set in your root URLconf.
    Setting these variables in any other URLconf will have no effect. Values must
    be callables, or strings representing the full Python import path to the view
    that should be called to handle the error condition at hand.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的默认值对于大多数项目应该足够了，但可以通过为它们分配值来进一步定制。这些值可以在您的根 URLconf 中设置。在任何其他 URLconf 中设置这些变量都不会产生效果。值必须是可调用的，或者是表示应该被调用以处理当前错误条件的视图的完整
    Python 导入路径的字符串。
- en: Including other URLconfs
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包含其他 URLconfs
- en: 'At any point, your `urlpatterns` can include other URLconf modules. This essentially
    roots a set of URLs below other ones. For example, here''s an excerpt of the URLconf
    for the Django website itself. It includes a number of other URLconfs:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时候，您的 `urlpatterns` 可以包括其他 URLconf 模块。这实质上将一组 URL 根据其他 URL 的下方。例如，这是 Django
    网站本身的 URLconf 的摘录。它包括许多其他 URLconfs：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Note that the regular expressions in this example don''t have a `$` (end-of-string
    match character) but do include a trailing slash. Whenever Django encounters `include()`,
    it chops off whatever part of the URL matched up to that point and sends the remaining
    string to the included URLconf for further processing. Another possibility is
    to include additional URL patterns by using a list of `url()` instances. For example,
    consider this URLconf:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此示例中的正则表达式没有 `$`（字符串结束匹配字符），但包括一个尾随斜杠。每当 Django 遇到 `include()` 时，它会截掉到目前为止匹配的
    URL 的任何部分，并将剩余的字符串发送到包含的 URLconf 进行进一步处理。另一个可能性是通过使用 `url()` 实例的列表来包含其他 URL 模式。例如，考虑这个
    URLconf：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this example, the `/credit/reports/` URL will be handled by the `credit.views.report()`
    Django view. This can be used to remove redundancy from URLconfs where a single
    pattern prefix is used repeatedly. For example, consider this URLconf:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`/credit/reports/` URL 将由 `credit.views.report()` Django 视图处理。这可以用来消除
    URLconfs 中重复使用单个模式前缀的冗余。例如，考虑这个 URLconf：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can improve this by stating the common path prefix only once and grouping
    the suffixes that differ:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过仅声明共同的路径前缀一次并分组不同的后缀来改进这一点：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Captured parameters
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 捕获的参数
- en: 'An included URLconf receives any captured parameters from parent URLconfs,
    so the following example is valid:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的 URLconf 会接收来自父 URLconfs 的任何捕获的参数，因此以下示例是有效的：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the above example, the captured `"username"` variable is passed to the included
    URLconf, as expected.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，捕获的 `"username"` 变量如预期地传递给了包含的 URLconf。
- en: Passing extra options to view functions
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向视图函数传递额外选项
- en: 'URLconfs have a hook that lets you pass extra arguments to your view functions,
    as a Python dictionary. The `django.conf.urls.url()` function can take an optional
    third argument which should be a dictionary of extra keyword arguments to pass
    to the view function. For example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: URLconfs 具有一个钩子，可以让您将额外的参数作为 Python 字典传递给视图函数。`django.conf.urls.url()` 函数可以接受一个可选的第三个参数，应该是一个额外关键字参数的字典，用于传递给视图函数。例如：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this example, for a request to `/reviews/2005/`, Django will call `views.year_archive(request,`
    `year='2005',` `foo='bar')`. This technique is used in the syndication framework
    to pass metadata and options to views (see [Chapter 14](ch14.xhtml "Chapter 14. Generating
    Non-HTML Content"), *Generating Non-HTML Content*).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，对于对 `/reviews/2005/` 的请求，Django 将调用 `views.year_archive(request,` `year='2005',`
    `foo='bar')`。这种技术在辅助框架中用于向视图传递元数据和选项（参见[第14章](ch14.xhtml "第14章。生成非 HTML 内容")，“生成非
    HTML 内容”）。
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Dealing with conflicts**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**处理冲突**'
- en: It's possible to have a URL pattern which captures named keyword arguments,
    and also passes arguments with the same names in its dictionary of extra arguments.
    When this happens, the arguments in the dictionary will be used instead of the
    arguments captured in the URL.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有一个 URL 模式，它捕获了命名的关键字参数，并且还在其额外参数的字典中传递了相同名称的参数。当这种情况发生时，字典中的参数将被用于替代 URL
    中捕获的参数。
- en: Passing extra options to include()
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向 include() 传递额外的选项
- en: 'Similarly, you can pass extra options to `include()`. When you pass extra options
    to `include()`, each line in the included URLconf will be passed the extra options.
    For example, these two URLconf sets are functionally identical: Set one:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以向 `include()` 传递额外的选项。当您向 `include()` 传递额外的选项时，包含的 URLconf 中的每一行都将传递额外的选项。例如，这两个
    URLconf 集是功能上相同的：集合一：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Set two:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 集合二：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that extra options will always be passed to every line in the included
    URLconf, regardless of whether the line's view actually accepts those options
    as valid. For this reason, this technique is only useful if you're certain that
    every view in the included URLconf accepts the extra options you're passing.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，无论包含的 URLconf 中的视图是否实际接受这些选项作为有效选项，额外的选项都将始终传递给包含的 URLconf 中的每一行。因此，只有在您确定包含的
    URLconf 中的每个视图都接受您传递的额外选项时，这种技术才有用。
- en: Reverse resolution of URLs
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: URL 的反向解析
- en: A common need when working on a Django project is the possibility to obtain
    URLs in their final forms either for embedding in generated content (views and
    assets URLs, URLs shown to the user, and so on) or for handling of the navigation
    flow on the server side (redirections, and so on)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发 Django 项目时通常需要的是获取 URL 的最终形式，无论是用于嵌入生成的内容（视图和资源 URL，向用户显示的 URL 等）还是用于服务器端的导航流程处理（重定向等）
- en: It is strongly desirable to avoid hard-coding these URLs (a laborious, non-scalable
    and error-prone strategy) or having to devise ad-hoc mechanisms for generating
    URLs that are parallel to the design described by the URLconf and as such in danger
    of producing stale URLs at some point. In other words, what's needed is a DRY
    mechanism.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议避免硬编码这些URL（一种费力、不可扩展和容易出错的策略）或者不得不设计专门的机制来生成与URLconf描述的设计并行的URL，因此有可能在某个时刻产生过时的URL。换句话说，需要的是一种DRY机制。
- en: Among other advantages it would allow evolution of the URL design without having
    to go all over the project source code to search and replace outdated URLs. The
    piece of information we have available as a starting point to get a URL is an
    identification (for example the name) of the view in charge of handling it, other
    pieces of information that necessarily must participate in the lookup of the right
    URL are the types (positional, keyword) and values of the view arguments.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 除了其他优点，它还允许URL设计的演变，而无需在整个项目源代码中搜索和替换过时的URL。我们可以作为获取URL的起点的信息是处理它的视图的标识（例如名称），必须参与查找正确URL的其他信息是视图参数的类型（位置，关键字）和值。
- en: 'Django provides a solution such that the URL mapper is the only repository
    of the URL design. You feed it with your URLconf and then it can be used in both
    directions:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 'Django提供了一种解决方案，即URL映射器是URL设计的唯一存储库。您可以用URLconf提供给它，然后可以在两个方向上使用它： '
- en: Starting with a URL requested by the user/browser, it calls the right Django
    view providing any arguments it might need with their values as extracted from
    the URL.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从用户/浏览器请求的URL开始，它调用正确的Django视图，并提供可能需要的任何参数及其值，这些值是从URL中提取的。
- en: Starting with the identification of the corresponding Django view plus the values
    of arguments that would be passed to it, obtain the associated URL.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从对应的Django视图的标识开始，以及将传递给它的参数的值，获取相关联的URL。
- en: The first one is the usage we've been discussing in the previous sections. The
    second one is what is known **as reverse resolution of URLs**, **reverse URL matching**,
    **reverse URL lookup**, or simply **URL reversing**.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是我们在前几节中讨论的用法。第二个是所谓的**URL的反向解析**，**反向URL匹配**，**反向URL查找**或简称**URL反转**。
- en: 'Django provides tools for performing URL reversing that match the different
    layers where URLs are needed:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了执行URL反转的工具，这些工具与需要URL的不同层次匹配：
- en: 'In templates: Using the `url` template tag.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模板中：使用`url`模板标签。
- en: 'In Python code: Using the `django.core.urlresolvers.reverse()` function.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Python代码中：使用`django.core.urlresolvers.reverse()`函数。
- en: 'In higher level code related to handling of URLs of Django model instances:
    The `get_absolute_url()` method.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Django模型实例的URL处理相关的高级代码：`get_absolute_url()`方法。
- en: Examples
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: 'Consider again this URLconf entry:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 再次考虑这个URLconf条目：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'According to this design, the URL for the archive corresponding to year **nnnn**
    is `/reviews/nnnn/`. You can obtain these in template code by using:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个设计，对应于年份**nnnn**的存档的URL是`/reviews/nnnn/`。您可以通过在模板代码中使用以下方式来获取这些：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Or in Python code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在Python代码中：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If, for some reason, it was decided that the URLs where content for yearly review
    archives are published at should be changed then you would only need to change
    the entry in the URLconf. In some scenarios where views are of a generic nature,
    a many-to-one relationship might exist between URLs and views. For these cases
    the view name isn't a good enough identifier for it when comes the time of reversing
    URLs. Read the next section to know about the solution Django provides for this.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于某种原因，决定更改发布年度审查存档内容的URL，则只需要更改URLconf中的条目。在某些情况下，如果视图具有通用性质，则URL和视图之间可能存在多对一的关系。对于这些情况，当需要反转URL时，视图名称并不是足够好的标识符。阅读下一节以了解Django为此提供的解决方案。
- en: Naming URL patterns
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名URL模式
- en: In order to perform URL reversing, you'll need to use named URL patterns as
    done in the examples above. The string used for the URL name can contain any characters
    you like. You are not restricted to valid Python names. When you name your URL
    patterns, make sure you use names that are unlikely to clash with any other application's
    choice of names. If you call your URL pattern `comment`, and another application
    does the same thing, there's no guarantee which URL will be inserted into your
    template when you use this name. Putting a prefix on your URL names, perhaps derived
    from the application name, will decrease the chances of collision. We recommend
    something like `myapp-comment` instead of `comment`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行URL反转，您需要使用上面示例中所做的命名URL模式。用于URL名称的字符串可以包含任何您喜欢的字符。您不受限于有效的Python名称。当您命名您的URL模式时，请确保使用不太可能与任何其他应用程序选择的名称冲突的名称。如果您称呼您的URL模式为`comment`，另一个应用程序也这样做，那么当您使用这个名称时，无法保证将插入哪个URL到您的模板中。在您的URL名称上加上前缀，可能来自应用程序名称，将减少冲突的机会。我们建议使用`myapp-comment`而不是`comment`之类的东西。
- en: URL namespaces
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: URL命名空间
- en: URL namespaces allow you to uniquely reverse named URL patterns even if different
    applications use the same URL names. It's a good practice for third-party apps
    to always use namespaced URLs. Similarly, it also allows you to reverse URLs if
    multiple instances of an application are deployed. In other words, since multiple
    instances of a single application will share named URLs, namespaces provide a
    way to tell these named URLs apart.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: URL命名空间允许您唯一地反转命名的URL模式，即使不同的应用程序使用相同的URL名称。对于第三方应用程序来说，始终使用命名空间URL是一个好习惯。同样，它还允许您在部署多个应用程序实例时反转URL。换句话说，由于单个应用程序的多个实例将共享命名的URL，命名空间提供了一种区分这些命名的URL的方法。
- en: 'Django applications that make proper use of URL namespacing can be deployed
    more than once for a particular site. For example, `django.contrib.admin` has
    an `AdminSite` class which allows you to easily deploy more than once instance
    of the admin. A URL namespace comes in two parts, both of which are strings:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 正确使用URL命名空间的Django应用程序可以针对特定站点部署多次。例如，`django.contrib.admin`有一个`AdminSite`类，允许您轻松部署多个管理员实例。URL命名空间由两部分组成，两者都是字符串：
- en: '**Application namespace**: This describes the name of the application that
    is being deployed. Every instance of a single application will have the same application
    namespace. For example, Django''s admin application has the somewhat predictable
    application namespace of `admin`.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**应用程序命名空间**：描述正在部署的应用程序的名称。单个应用程序的每个实例都将具有相同的应用程序命名空间。例如，Django的管理员应用程序具有相对可预测的应用程序命名空间`admin`。'
- en: '**Instance namespace**: This identifies a specific instance of an application.
    Instance namespaces should be unique across your entire project. However, an instance
    namespace can be the same as the application namespace. This is used to specify
    a default instance of an application. For example, the default Django admin instance
    has an instance namespace of `admin`.'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实例命名空间**：标识应用程序的特定实例。实例命名空间应该在整个项目中是唯一的。但是，实例命名空间可以与应用程序命名空间相同。这用于指定应用程序的默认实例。例如，默认的Django管理员实例具有`admin`的实例命名空间。'
- en: Namespaced URLs are specified using the `:` operator. For example, the main
    index page of the admin application is referenced using "`admin:index`". This
    indicates a namespace of "`admin`", and a named URL of "`index`".
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`:`运算符指定命名空间URL。例如，管理员应用程序的主索引页面使用"`admin:index`"引用。这表示命名空间为"`admin`"，命名为"`index`"。
- en: Namespaces can also be nested. The named URL `members:reviews:index` would look
    for a pattern named "`index`" in the namespace "`reviews`" that is itself defined
    within the top-level namespace "`members`".
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间也可以是嵌套的。命名为`members:reviews:index`的URL将在顶级命名空间`members`中查找名为"`index`"的模式。
- en: Reversing namespaced URLs
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反转命名空间URL
- en: 'When given a namespaced URL (for example "`reviews:index`") to resolve, Django
    splits the fully qualified name into parts and then tries the following lookup:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定要解析的命名空间URL（例如"`reviews:index`"）时，Django将完全限定的名称分成部分，然后尝试以下查找：
- en: First, Django looks for a matching application namespace (in this example, "`reviews`").
    This will yield a list of instances of that application.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，Django会查找匹配的应用程序命名空间（在本例中为`reviews`）。这将产生该应用程序的实例列表。
- en: If there is a current application defined, Django finds and returns the URL
    resolver for that instance. The current application can be specified as an attribute
    on the request. Applications that expect to have multiple deployments should set
    the `current_app` attribute on the request being processed.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果定义了当前应用程序，Django会查找并返回该实例的URL解析器。当前应用程序可以作为请求的属性指定。期望有多个部署的应用程序应该在正在处理的请求上设置`current_app`属性。
- en: The current application can also be specified manually as an argument to the
    `reverse()` function.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前应用程序也可以作为`reverse()`函数的参数手动指定。
- en: If there is no current application. Django looks for a default application instance.
    The default application instance is the instance that has an instance namespace
    matching the application namespace (in this example, an instance of reviews called
    "`reviews`").
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有当前应用程序。 Django将寻找默认的应用程序实例。默认的应用程序实例是具有与应用程序命名空间匹配的实例命名空间的实例（在本例中，称为"`reviews`"的reviews的实例）。
- en: If there is no default application instance, Django will pick the last deployed
    instance of the application, whatever its instance name may be.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有默认的应用程序实例，Django将选择应用程序的最后部署实例，无论其实例名称是什么。
- en: If the provided namespace doesn't match an application namespace in step 1,
    Django will attempt a direct lookup of the namespace as an instance namespace.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提供的命名空间与第1步中的应用程序命名空间不匹配，Django将尝试直接查找该命名空间作为实例命名空间。
- en: If there are nested namespaces, these steps are repeated for each part of the
    namespace until only the view name is unresolved. The view name will then be resolved
    into a URL in the namespace that has been found.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有嵌套的命名空间，这些步骤将针对命名空间的每个部分重复，直到只剩下视图名称未解析。然后，视图名称将被解析为在找到的命名空间中的URL。
- en: URL namespaces and included URLconfs
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: URL命名空间和包含的URLconfs
- en: 'URL namespaces of included URLconfs can be specified in two ways. Firstly,
    you can provide the application and instance namespaces as arguments to `include()`
    when you construct your URL patterns. For example:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的URLconfs的URL命名空间可以通过两种方式指定。首先，当构建URL模式时，您可以将应用程序和实例命名空间作为参数提供给`include()`。例如：
- en: '[PRE18]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will include the URLs defined in `reviews.urls` into the application namespace
    `''reviews''`, with the instance namespace `''author-reviews''`. Secondly, you
    can include an object that contains embedded namespace data. If you `include()`
    a list of `url()` instances, the URLs contained in that object will be added to
    the global namespace. However, you can also `include()` a 3-tuple containing:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这将包括在应用程序命名空间'reviews'中定义的URL，实例命名空间为'author-reviews'。其次，您可以包含包含嵌入式命名空间数据的对象。如果您包含一个`url()`实例列表，那么该对象中包含的URL将被添加到全局命名空间中。但是，您也可以包含一个包含3个元素的元组：
- en: '[PRE19]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'For example:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE20]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will include the nominated URL patterns into the given application and
    instance namespace. For example, the Django admin is deployed as instances of
    `AdminSite`. `AdminSite` objects have a `urls` attribute: A 3-tuple that contains
    all the patterns in the corresponding admin site, plus the application namespace
    "`admin`", and the name of the admin instance. It is this `urls` attribute that
    you `include()` into your projects `urlpatterns` when you deploy an admin instance.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把提名的URL模式包含到给定的应用程序和实例命名空间中。例如，Django管理界面被部署为`AdminSite`的实例。`AdminSite`对象有一个`urls`属性：一个包含相应管理站点中所有模式的3元组，加上应用程序命名空间"`admin`"和管理实例的名称。当你部署一个管理实例时，就是这个`urls`属性被`include()`到你的项目`urlpatterns`中。
- en: 'Be sure to pass a tuple to `include()`. If you simply pass three arguments:
    `include(reviews_patterns`,`''reviews''`,`''author-reviews'')`, Django won''t
    throw an error but due to the signature of `include()`, `''reviews''` will be
    the instance namespace and `''author-reviews''` will be the application namespace
    instead of vice versa.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要向`include()`传递一个元组。如果你只是简单地传递三个参数：`include(reviews_patterns`,`'reviews'`,`'author-reviews')`，Django不会报错，但由于`include()`的签名，`'reviews'`将成为实例命名空间，`'author-reviews'`将成为应用程序命名空间，而不是相反。
- en: What's next?
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来呢？
- en: This chapter has provided many advanced tips and tricks for views and URLconfs.
    Next, in [Chapter 8](ch08.xhtml "Chapter 8. Advanced Templates"), *Advanced Templates*,
    we'll give this advanced treatment to Django's template system.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了许多关于视图和URLconfs的高级技巧。接下来，在[第8章](ch08.xhtml "第8章.高级模板")*高级模板*中，我们将对Django的模板系统进行高级处理。
