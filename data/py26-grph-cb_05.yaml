- en: Chapter 5. The Magic of Color
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。颜色的魔法
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: A limited palette of named colors
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组有限的命名颜色
- en: Nine ways of specifying color
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 九种指定颜色的方法
- en: A ball of varying shades of red
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变化阴影的红球
- en: A red color wedge of graded hue
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 红色渐变色调楔形
- en: The artist's color wheel (Newton's Color Wheel)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 艺术家的色轮（牛顿色轮）
- en: The numerical color mixing-matching palette
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值颜色混合匹配色板
- en: The animated graded color wheel
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画分级色轮
- en: Tkinter's own color mixer-picker
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tkinter 自带的颜色混合选择器
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'Tkinter allows you to use more than 16 million colors. That is 256 levels each
    of red, green, and blue added together. There are two main ways of specifying
    colors: by name, or as a hexadecimal value packed together as a string. A competent
    color expert can create any color possible by mixing red, green, and blue in varying
    amounts. There are accepted rules and conventions for what constitutes pleasing
    and tasteful color combinations. Sometimes you want to make shaded blends of colors
    and at other times you just want to use a limited number of colors with the minimum
    amount of both. We deal with these issues in this chapter.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Tkinter 允许您使用超过1600万种颜色。这是红色、绿色和蓝色256个级别的总和。有两种主要的方式来指定颜色：通过名称，或作为字符串打包的十六进制值。一个合格的颜色专家可以通过以不同比例混合红色、绿色和蓝色来创建任何可能的颜色。对于构成令人愉悦和有品位的颜色组合，有接受的标准规则和惯例。有时你想要制作阴影混合的颜色，而在其他时候，你只想使用尽可能少的颜色，并且两者的数量都尽可能少。我们将在本章中处理这些问题。
- en: A limited palette of named colors
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一组有限的命名颜色
- en: There is a vast list of romantically named colors like cornflower blue, misty
    rose, or papaya whip. There are about 340 of these named colors that are usable
    in Python.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多浪漫命名的颜色，如矢车菊蓝、雾色玫瑰或木瓜冰淇淋。大约有340种这些命名颜色可以在Python中使用。
- en: Colors get names because people remember them most easily in association with
    a place and an emotional mood. It is easy to remember evocative names and therefore
    easier to use them. In this example, we reduce the long list down to 140 by using
    systematic names and eliminating colors that are very similar.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色获得名称是因为人们最容易通过与一个地方和一个情感情绪的关联来记住它们。记住富有启发性的名称更容易，因此也更容易使用。在这个例子中，我们通过使用系统名称和消除非常相似的颜色，将长长的列表缩减到140个。
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Execute the program shown in exactly the same way as all the examples in previous
    chapters. What you should see on your screen is a logically laid out chart of
    rectangular color swatches. Each will have its callable name on it. These are
    names you can use in Python/Tkinter programs and they will be correctly displayed.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 按照与前面章节中所有示例完全相同的方式执行程序。你应该在屏幕上看到的是一个逻辑排列的矩形色卡图表。每个色卡上都会有其可调用的名称。这些是在Python/Tkinter程序中可以使用的名称，并且它们将被正确显示。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This program uses techniques developed in [Chapter 2](ch02.html "Chapter 2. Drawing
    Fundamental Shapes"), *Drawing Fundamental Shapes*. There are eight lists of named
    colors grouped in color families with each family arranged in a logical sequence.
    The main technique was to use a general purpose function that would use a pre-defined
    rectangle and using a `for` loop, work through the list of color names in sequence.
    With each iteration of the loop, a rectangle is filled with that color and the
    color name is printed across it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序使用了在[第2章](ch02.html "第2章。绘制基本形状")中开发的技巧，*绘制基本形状*。有八个颜色家族的命名颜色列表，每个家族按照逻辑顺序排列。主要技术是使用一个通用函数，该函数将使用预定义的矩形，并通过`for`循环按顺序遍历颜色名称列表。在循环的每次迭代中，一个矩形被填充为该颜色，并在其上打印颜色名称。
- en: There's more...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: These colors were chosen by trial and error to provide a reasonably wide palette
    suitable for most purposes. In the numbered sequences of colors like red where
    red1, red2, red3, and red4 represent increasingly darker shades, colors that are
    very similar to other colors in their neighborhood have been left out. It was
    also discovered that many colors were fake in that they are painted onto the canvas
    as grey.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '这些颜色是通过试错选择的，以提供适合大多数目的的合理广泛的调色板。在编号的颜色序列中，如红色，其中red1、red2、red3和red4代表越来越深的阴影，与周围其他颜色非常相似的颜色已被省略。还发现许多颜色是假的，因为它们被涂在画布上作为灰色。 '
- en: The complete set of color names that Tkinter recognizes are found at [http://wiki.tcl.tk/16166](http://wiki.tcl.tk/16166)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Tkinter 识别的所有颜色名称的完整集合可以在[http://wiki.tcl.tk/16166](http://wiki.tcl.tk/16166)找到
- en: To get fine shadings of the primary colors
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要获得原色的细腻阴影
- en: To achieve the subtle shadings and graduations of color combination, you need
    to mix the primary colors used on computer screens in controlled amounts. We begin
    this process in the next recipe.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现颜色组合的微妙阴影和渐变，你需要以受控的量混合计算机屏幕上使用的原色。我们将在下一个配方中开始这个过程。
- en: A more compact color list
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个更紧凑的颜色列表
- en: 'An even shorter sub-set of useful named colors are in the following color lists:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下颜色列表中，还有一些有用的命名颜色更短的子集：
- en: white_Colors = "white", "lemon chiffon", "honeydew","aliceblue","thistle", "misty
    rose"
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: white_Colors = "白色", "柠檬绸", "蜜桃冰沙","矢车菊蓝","风信子", "薄雾玫瑰"
- en: blue_Colors = "blue","blue4","SlateBlue1","dodger blue","steelblue","sky blue"
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: blue_Colors = "蓝色","蓝色4","板岩蓝色1","闪蓝色","钢蓝色","天蓝色"
- en: grey_Colors ="SlateGray3", "SlateGray4", "LightGrey", "DarkGray", "DimGray",
    "LightSlateGray"
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: grey_Colors ="板岩灰色3", "板岩灰色4", "浅灰色", "深灰色", "暗灰色", "浅板岩灰色"
- en: cyan_Colors = "CadetBlue1", "cyan", "cyan4", "LightSeaGreen", "aquamarine",
    "aquamarine3"
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: cyan_Colors = "军蓝1", "青色", "青色4", "浅海绿色", "碧绿", "碧绿3"
- en: red_Colors = "light pink","IndianRed1","red","red2","red3","red4"
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: red_Colors = "浅粉色","印度红1","红色","红色2","红色3","红色4"
- en: pink_Colors = "light pink","deeppink","hot pink","HotPink3","LightPink","LightPink2"
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pink_Colors = "浅粉色","深粉色","热粉色","HotPink3","浅粉色","浅粉色2"
- en: magenta_Colors = "PaleVioletRed1", "maroon", "maroon1", "magenta","magenta4",
    "orchid1"
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: magenta_Colors = "淡紫罗兰红1", "栗色", "栗色1", "洋红色","洋红色4", "兰花1"
- en: purple_Colors = "purple", "purple4", "MediumPurple1", "plum2", "MediumOrchid",
    "DarkOrchid"
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: purple_Colors = "紫色", "紫色4", "中紫色1", "李子2", "中兰花", "深兰花"
- en: brown_Colors = "orange", "DarkOrange1", "DarkOrange2", "DarkOrange3", "DarkOrange4",
    "saddle brown"
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: brown_Colors = "橙色", "深橙色1", "深橙色2", "深橙色3", "深橙色4", "马鞍棕色"
- en: green_Colors = "green", "green3", "green4"," chartreuse"," green yellow", "SpringGreen2"
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: green_Colors = "绿色", "绿色3", "绿色4","黄绿色","绿黄色", "春绿色2"
- en: yellow_Colors= "light yellow", "yellow", "yellow3","gold", "goldenrod1", "Khaki"
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: yellow_Colors= "浅黄色", "黄色", "黄色3","金色", "金罗盘1", "卡其色"
- en: If you cut and paste these lists to replace the previous ones in `systematic_colorNames_1.py`,
    you will have a smaller, easier to manage, palette of 55 colors that you may find
    simpler to use.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将这些列表剪切并粘贴到`systematic_colorNames_1.py`中替换之前的列表，你将拥有一个更小、更容易管理的55色调板，你可能发现它更容易使用。
- en: Nine ways of specifying color
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定颜色的九种方式
- en: With this recipe we see an example of all the valid types of color specification.
    Basically there are two methods of specifying color that Tkinter recognizes, but
    there are a total of nine ways of expressing these. Thanks to the Python designers,
    the system is flexible and accepts all without complaint.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个配方，我们可以看到Tkinter识别的所有有效颜色指定的示例。基本上，Tkinter有两种指定颜色的方法，但总共有九种表达这些颜色的方式。感谢Python的设计者，系统非常灵活，可以接受所有这些而不抱怨。
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Execute the program shown in exactly the same way as all the examples in [Chapter
    2](ch02.html "Chapter 2. Drawing Fundamental Shapes"), *Drawing Fundamental Shapes*
    and you will see three disks filled with red and four with blue. Each is specified
    differently.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以与[第2章](ch02.html "第2章。绘制基本形状")中所有示例完全相同的方式执行程序，*绘制基本形状*，你将看到三个填充红色的圆盘和四个填充蓝色的圆盘。每个圆盘的指定方式都不同。
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Tkinter has the different name strings defined in a dictionary somewhere inside
    the Tkinter module library.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Tkinter在Tkinter模块库的某个地方定义了不同的名称字符串。
- en: Converting color tuples to Tkinter Hex compatible specifiers
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将颜色元组转换为Tkinter兼容的十六进制指定符
- en: 'Some other languages specify colors as a numerical mixture of red, green and
    blue with each band ranging from 0 to 255 as a tuple. For example, pure red would
    be (255,0,0), pure green would be (0,255,0) and blue would be (0,0,255). A mixture
    of lots of red with a medium amount of green and just a touch of blue could be
    (230, 122, 20). These tuples are not recognized by Tkinter but the following line
    of Python code will convert any color_tuple into a color hex number that Tkinter
    will recognize and use as a color:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一些其他语言将颜色指定为红色、绿色和蓝色的数值混合，每个波段的范围从0到255，作为一个元组。例如，纯红色将是(255,0,0)，纯绿色将是(0,255,0)，蓝色将是(0,0,255)。大量红色与中等绿色和一点蓝色混合可以是(230,
    122, 20)。这些元组Tkinter不识别，但以下Python代码行将任何color_tuple转换为Tkinter可识别并用作颜色的十六进制数：
- en: '`Tkinter_hex_color = ''#%02x%02x%02x'' % color_tuple`,'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tkinter_hex_color = ''#%02x%02x%02x'' % color_tuple`,'
- en: where `color_tuple = (230, 122, 20)` or whatever numbers we choose to have in
    the tuple.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `color_tuple = (230, 122, 20)` 或我们选择的任何数字组合。
- en: A red beachball of varying hue
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个色调各异的红色沙滩球
- en: We use the hexadecimal color specification scheme to make a series of color
    shades arranged in a pattern determined by predefined lists of numerical constants.
    The underlying idea is to establish a method of accessing these constants in a
    way that can be reused for quite different picture designs.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用十六进制颜色规范方案，根据预定义的数值常量列表排列一系列颜色深浅。其基本思想是建立一种方法，以便以可重用的方式访问这些常数，用于相当不同的图片设计。
- en: How to do it...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Execute the program shown in exactly the usual way, and you will see a sequence
    of colored disks laid on top of each other going from dark to light shades. The
    size and location of each disk is determined by the lists `hFac` and `wFac. hfacisa`
    mnemonic for " Height factor" `andwFac` for "Width factor". The following screenshot
    shows the Graded Color Ball.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 按照通常的方式执行显示的程序，你会看到一系列从深到浅的彩色圆盘叠加在一起。每个圆盘的大小和位置由列表 `hFac` 和 `wFac` 决定。`hFac`
    是 "高度因子" 的缩写，`wFac` 是 "宽度因子"。以下截图显示了分级色彩球。
- en: '![How to do it...](img/3845_05_01.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/3845_05_01.jpg)'
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The series of images of varying shades of red disks is laid down in a specific
    sequence by a for loop. The matching shades of red are held in the sequenced list
    of hex colors. `Hex` is the short form for hexadecimal.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个循环，将不同深浅的红盘图像按特定顺序排列。匹配的红色深浅保存在按顺序排列的十六进制颜色列表中。`Hex` 是十六进制的简称。
- en: The variables used to specify the reference origin as well as all the other
    positional parameters have been set up so they can be reused in other patterns
    later. The important principle here is that with careful planning of our programming
    we only need to solve a problem once in a universal, designed-for-reuse way. Of
    course in practice this planned design takes more time and includes lot more experimentation
    than the simpler once-off way of writing code. Either way the whole experimental
    process starts off with writing messy, rough and ready code that 'kind-of' works.
    This initial rough work is a very necessary part of the creative process as it
    allows vaguely formed ideas to grow and evolve into effective software programs.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 用于指定参考原点以及所有其他位置参数的变量已经设置好，以便以后在其他模式中重用。这里的重要原则是，通过我们编程的精心规划，我们只需要以通用、专为重用设计的方案解决一个问题。当然，在实践中，这种计划设计需要更多时间，包括大量的实验，比简单的单次编写代码的方式要复杂得多。无论如何，整个实验过程都是从编写混乱、粗糙且能勉强工作的代码开始的。这种初步的粗糙工作是创造性过程中的一个非常重要的部分，因为它允许模糊形成的思想成长和演变成为有效的软件程序。
- en: There's more...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Having ironed out a scheme for drawing shaded disks in chosen geometric arrangements,
    we can now try different arrangements and end up with richer and more useful ideas.
    The next two recipes evolve this idea into a version of the artist's color wheel
    that illustrates how to achieve any color by controlled mixing of primary colors.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定了在选择的几何排列中绘制阴影圆盘的方案后，我们现在可以尝试不同的排列，并最终得到更丰富、更有用的想法。接下来的两个配方将这一想法发展成艺术家色彩轮的一个版本，展示了如何通过控制混合原色来达到任何颜色。
- en: A red color wedge of graded hue
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个按色调分级的红色色楔
- en: We create a wedge-shaped segment to form a logical pattern that can be incorporated
    into a wheel arrangement intended to show the relationships between different
    colors.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个楔形段来形成一个逻辑模式，该模式可以融入一个轮状排列，用以展示不同颜色之间的关系。
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: The code structure used in the previous recipe is re-used here. When you execute
    the following code you will see a neat row of colored disks laid onto a dark shaded
    triangular wedge going from dark to light shades of red. The following screenshot
    shows the Graded Color Wedge.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的配方中使用的代码结构在此处被重用。当你执行以下代码时，你会看到一排整齐的彩色圆盘被叠加在一个深色阴影的三角形楔形上，从深红色到浅红色。以下截图显示了分级色彩楔形。
- en: '![How to do it...](img/3845_05_02.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/3845_05_02.jpg)'
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By adjusting the numerical values in the lists `hFac` and `wFac`, we arrange
    the colored disks to fit inside a background wedge that happens to be the correct
    shape to form a one-twelfth pie slice of a circle.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调整列表 `hFac` 和 `wFac` 中的数值，我们将彩色圆盘排列在背景楔形区域内，这个楔形区域恰好是形成圆形十二分之一切片的正确形状。
- en: There's more...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The way we have named and re-renamed the color list **kula** seems redundant
    and therefore perhaps confusing. However, the method in this apparent madness
    is that if we had many other lists of colors to use at the same time, it then
    becomes much simpler to reuse existing methods.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对颜色列表的命名和重新命名方式**kula**似乎有些冗余，因此可能有些令人困惑。然而，这种看似疯狂的方法是，如果我们同时使用许多其他颜色列表，那么重用现有方法就会变得简单得多。
- en: Newton's grand wheel of color mixing
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 牛顿的色彩混合大轮
- en: We make a version of the artist's color wheel which shows how any known color
    and shade of color can be obtained by judicious mixing of the three primary colors
    of red, green and blue.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们制作了一个艺术家色彩轮的版本，展示了如何通过巧妙地混合红色、绿色和蓝色三种原色，获得任何已知颜色和色调。
- en: How to do it...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We have made a set of twelve color lists. Each list represents the color that
    results when you mix colors on either side of it, except for the primary colors
    of red, green, and blue. The other critical addition to the code is the function
    `rotate(xya, xyb, theta_deg_incr)` that is used to rotate the color wedge pattern
    to a new chosen position around a central point. As some trigonometry is used
    to do the rotation, the math module needs to be imported at the top of the code.
    Each segment forms part of the complete circle of color variations. The following
    screenshot shows a version of Isaac Newton's Color Wheel.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们制作了一套十二种颜色的列表。每个列表代表当你混合它两侧的颜色时产生的颜色，除了红色、绿色和蓝色这三种原色。代码中的另一个关键添加是函数 `rotate(xya,
    xyb, theta_deg_incr)`，它用于将颜色楔形图案旋转到新的选择位置，围绕中心点。由于使用了三角函数进行旋转，因此需要在代码顶部导入数学模块。每个部分都构成了完整颜色变化圆的一部分。以下截图显示了艾萨克·牛顿的色彩轮版本。
- en: '![How to do it...](img/3845_05_03.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3845_05_03.jpg)'
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: For each color segment of the wheel a list of shaded hex color values was included
    in the list. The exact amounts of red, green, and blue to add together for colors
    that require portions of all three primary colors is not a simple matter. In general,
    to lighten a color we need to add extra amounts of the color that doesn't even
    belong to the target color. For example, if we want a pale yellow we need equal
    amounts of red and green together. But to make the yellow paler we need to add
    some blue. To darken the yellow we make sure there is no blue at all and we combine
    smaller but equal proportions of red and blue.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于轮盘上的每个颜色部分，列表中都包含了一系列的阴影十六进制颜色值。要混合出需要所有三种原色部分的颜色，所需的红色、绿色和蓝色的确切比例并不是一件简单的事情。一般来说，为了使颜色变亮，我们需要添加一些不属于目标颜色的额外颜色。例如，如果我们想要浅黄色，我们需要等量的红色和绿色。但要使黄色更浅，我们需要添加一些蓝色。为了使黄色变暗，我们确保没有蓝色，并组合较小但相等的红色和蓝色比例。
- en: There's more...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Mixing colors is an art as much as a science. Astute color mixing demands practice
    and experimentation. Mixing colors numerically does not come naturally to the
    human brain. We need some visual-numerical-computational tools to help us mix
    colors. But the math must be invisible. It must not hamper the artist. We want
    the equivalent of tubes of primary colors and a palette to mix them on. Our palette
    must automatically display the numerical values that represent the colors we have
    mixed so that we can record and incorporate them into Python code. It would be
    cool if our palette could be placed on top of or next to portions of existing
    pictures so that we could match existing colors in the picture. Would that be
    a nice thing to have? Well, the next recipe tries to grant that wish.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 混合颜色既是艺术也是科学。精明的颜色混合需要实践和实验。对人类大脑来说，数值上混合颜色并不自然。我们需要一些视觉-数值-计算工具来帮助我们混合颜色。但数学必须是隐形的。它不能阻碍艺术家。我们希望有原色管和调色板来混合它们。我们的调色板必须自动显示代表我们混合颜色的数值，这样我们就可以记录并将它们纳入Python代码中。如果我们的调色板可以放在现有图片的顶部或旁边，以便我们可以匹配图片中的现有颜色，那会是一件好事吗？嗯，下一个菜谱试图实现这个愿望。
- en: The numerical color mixing matching palette
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数值颜色混合匹配调色板
- en: We make a widget that allows us to easily mix any proportion of the three primary
    colors of red, green, and blue. The resulting mixture is displayed on a large
    swatch of resultant color that can be dragged around the display screen. The swatch
    is at the edge of the widget with the minimum of intervening colors. We can place
    the swatch next to any color in a picture that we wish to match and adjust the
    combined color using handy slider controls that are intuitive to use.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们制作了一个小部件，可以轻松混合红色、绿色和蓝色三种基色的任何比例。混合后的颜色会显示在一个大色卡上，可以拖动到显示屏幕的任何位置。色卡位于小部件的边缘，中间颜色最少。我们可以将色卡放置在我们想要匹配的图片中的任何颜色旁边，并使用直观的滑动控件调整混合颜色。
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: To produce this mixing tool we have made use of Tkinter slider controls two
    chapters before they are formally introduced. At this stage you should just copy
    and use the code without knowing the details of how they work knowing that they
    will be explained in [Chapter 7](ch07.html "Chapter 7. Combining Raster and Vector
    Pictures"),
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了制作这个混合工具，我们在正式介绍它们之前的两章中使用了Tkinter滑动控件。在这个阶段，您只需复制并使用代码，无需了解它们的工作细节，知道它们将在[第7章](ch07.html
    "第7章。结合光栅和矢量图片")中解释。
- en: The following screenshot shows a color mixing palette.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个颜色混合调色板。
- en: '![How to do it...](img/3845_05_04(a).jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3845_05_04(a).jpg)'
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Red, green, and blue color values ranging from zero (no color at all) to 255
    (full saturated primary color) are set by the position of a slider widget that
    is self explanatory to use. Every time a slider is moved, the values from all
    three sliders are combined and displayed graphically on a color swatch as well
    as numerically. There is no better way of explaining the relationships between
    primary color components expressed as 0 to 255 integer values, hexadecimal values,
    and pure or combined colors.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 红色、绿色和蓝色颜色值从零（完全没有颜色）到255（完全饱和的基色）通过一个滑动控件的位置来设置，这个控件的使用非常直观。每次移动滑动条时，三个滑动条的所有值都会组合并图形化地显示在色卡上，同时以数值形式显示。没有比用0到255的整数值、十六进制值和纯色或混合色表示的基色成分之间的关系更好的解释方式了。
- en: There's more...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: This widget has the swatch placed at the edge of the bottom-left corner to let
    you drag it close to an area of a picture underneath in order to be able to match
    the color visually and read off its hex value. There is also a separate window
    filled with color that can be moved freely around the screen. If you wanted to
    match a color to some portion of an image in a photo, you could place this swatch
    right next to the patch of interest in the image and move the sliders until you
    achieve a decent match and then note the hex value.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此小部件将色卡放置在底部的左上角边缘，以便您可以将其拖动到屏幕下方的图片区域的附近，以便能够直观地匹配颜色并读取其十六进制值。还有一个单独的窗口，里面充满了颜色，可以在屏幕上自由移动。如果您想要匹配图像中某个部分的颜色，可以将此色卡放置在图像中感兴趣的区域旁边，并移动滑动条，直到达到满意的匹配，然后记录下十六进制值。
- en: There are other tools to select colors
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有其他工具可以用来选择颜色
- en: The last example in this chapter demonstrates color mixers built in Python modules.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一个示例演示了在Python模块中构建的颜色混合器。
- en: Is there a way to make neater slide controllers?
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有没有办法制作更整洁的滑动控制器？
- en: The use of slider widgets as a graphical method of entering numbers which need
    to share screen real estate with our canvas is sometimes inconvenient. Why can't
    we make our number controllers just another kind of drawn object inside our canvas?
    Can we make the slide controllers smaller, neater, and less obtrusive? The answer
    is yes and we explore this idea in [Chapter 7](ch07.html "Chapter 7. Combining
    Raster and Vector Pictures"),
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用滑动控件作为输入数字的图形方法，有时会不方便。为什么我们不能让我们的数字控制器成为画布内的一种绘制对象呢？我们能否使滑动控制器更小、更整洁、不那么显眼？答案是肯定的，我们在[第7章](ch07.html
    "第7章。结合光栅和矢量图片")中探讨了这一想法，
- en: The animated graded color wheel
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态分级色轮
- en: We draw a smoothly-graded version of the artists color mixing wheel and animate
    it to allow the viewer to watch how the `rgb` hex color value changes as the blended
    color spectrum is being drawn.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们绘制了一个艺术家颜色混合轮的平滑分级版本，并对其进行了动画处理，以便观众可以观察当绘制混合颜色光谱时`rgb`十六进制颜色值的变化。
- en: How to do it...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Copy, save, and run this example as you have done with previous ones and watch
    the spectrum unfold numerically and colorfully. The following screenshot shows
    a graded color wheel.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 按照您之前的方式复制、保存并运行此示例，并观察光谱如何以数字和色彩的方式展开。以下截图显示了一个分级色轮。
- en: '![How to do it...](img/3845_05_05.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3845_05_05.jpg)'
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The coding ideas used here are relatively simple. In essence, we have the executing
    code work through the process of drawing a colored arc from zero to 358 degrees.
    At each thin slice of the wedge red, green, and blue components are added according
    to calculations of linearly increasing or decreasing ramp values `redFL, greenfly`,
    and `blueFL` in counts-per-degree. By ramp, we mean a gradually increasing value
    from zero to 100%. The ramp values are controlled by transition points (A_ANG,
    `B_ANG`, and so on) evenly spaced at 60 degree intervals around the periphery
    of the colored disk.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的编码思想相对简单。本质上，我们让执行代码通过绘制从0到358度的彩色弧的过程来完成。在扇形的每一小块中，根据线性增加或减少的斜坡值`redFL`、`greenfly`和`blueFL`（以每度计数）的计算，添加红色、绿色和蓝色成分。斜坡意味着从0逐渐增加到100%的值。斜坡值由过渡点（A_ANG、`B_ANG`等）控制，这些过渡点在彩色圆盘边缘以60度间隔均匀分布。
- en: The `rgb2hex(red, green, blue)` function converts the red, green, and blue floating
    point values into the form of a hexadecimal number that Tkinter will interpret
    as a color. For the viewer's edification, this number is displayed at the top
    of the canvas.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`rgb2hex(red, green, blue)`函数将红色、绿色和蓝色的浮点值转换为Tkinter解释为颜色的十六进制数形式。为了方便观众理解，这个数字显示在画布的顶部。'
- en: Tkinter's own color picker-mixer
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tkinter自带的颜色选择器-混合器
- en: Tkinter has its own color chooser tool that is remarkably simple to use.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Tkinter有一个自己非常简单易用的颜色选择工具。
- en: Four lines of code gets you a tool of elegance and usefulness.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 四行代码就能得到一个既优雅又实用的工具。
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Copy, save, and run this example as you have done with previous programs. The
    following screenshot shows the Tkinter's color picker (MS windows XP).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 按照您之前处理程序的方式复制、保存并运行此示例。以下截图显示了Tkinter的颜色选择器（MS Windows XP）。
- en: '![How to do it...](img/3845_05_06.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3845_05_06.jpg)'
- en: The following screenshot shows the Tkinter's color picker (Linux Ubuntu 9.10).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Tkinter的颜色选择器（Linux Ubuntu 9.10）。
- en: '![How to do it...](img/3845_05_07.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3845_05_07.jpg)'
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This tool is so remarkably easy to use you will ask why we have bothered with
    the more cumbersome versions shown in the numerical color mixing-matching palette
    example. There are two reasons. Firstly we can see how to manipulate color inside
    python code. And secondly, the independent swatch window that you can move around
    on top of pictures can be useful.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具非常简单易用，您可能会问为什么我们还要在数值颜色混合匹配调色板示例中展示更繁琐的版本。有两个原因。首先，我们可以看到如何在Python代码中操作颜色。其次，您可以移动到图片上方的独立样本窗口可能很有用。
- en: There's more...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The subject of color mixing, nomenclature and tasteful color combinations is
    vast and interesting. The web provides some excellent sites explaining this art
    and science very elegantly.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色混合、命名法和有品位的颜色组合的主题非常广泛且有趣。网络提供了一些非常优雅地解释这种艺术和科学的优秀网站。
- en: Here is a selection of some of the best webpages that explain the ideas well.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些解释这些想法非常好的网页精选。
- en: '[http://www.1728.com/colors.htm:](http://www.1728.com/colors.htm) A display
    of over 400 html-recognizable named color swatches with their hex equivalents,
    arranged in alphabetic order. The color swatches displayed are large so you can
    see the subtle differences between similar colors.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.1728.com/colors.htm:](http://www.1728.com/colors.htm) 显示了超过400种可由html识别的命名颜色样本及其十六进制等效值，按字母顺序排列。显示的颜色样本较大，以便您可以看到相似颜色之间的细微差别。'
- en: '[http://aggie-horticulture.tamu.edu/floriculture/container-garden/lesson/colorwheel.html:](http://aggie-horticulture.tamu.edu/floriculture/container-garden/lesson/colorwheel.html)
    A flower color wheel using names of colors that florists use.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://aggie-horticulture.tamu.edu/floriculture/container-garden/lesson/colorwheel.html:](http://aggie-horticulture.tamu.edu/floriculture/container-garden/lesson/colorwheel.html)
    使用花店使用的颜色名称的花色轮。'
- en: '[http://realcolorwheel.com/tubecolors.htm:](http://realcolorwheel.com/tubecolors.htm)
    An artist''s color wheel, where the colors are matched up to the names of tube
    pigments that an artist would purchase from an art supply shop.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://realcolorwheel.com/tubecolors.htm:](http://realcolorwheel.com/tubecolors.htm)
    艺术家的色轮，其中颜色与艺术家从艺术用品店购买的管状颜料名称相匹配。'
- en: '[http://www.colormatters.com/colortheory.html:](http://www.colormatters.com/colortheory.html)
    Elegantly simplified color combination practice, with rich sources of backup and
    complimentary information. This has loads of illustrations and examples.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.colormatters.com/colortheory.html:](http://www.colormatters.com/colortheory.html)
    精美简化的色彩搭配实践，拥有丰富的参考资料和补充信息。这里包含大量的插图和示例。'
- en: '[http://en.wikipedia.org/wiki/Web_colors](http://en.wikipedia.org/wiki/Web_colors)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Web_colors](http://en.wikipedia.org/wiki/Web_colors)'
- en: The article titled "web colors" in Wikipedia, the free encyclopedia.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科中关于“网络颜色”的文章。
- en: '[http://colorschemedesigner.com/:](http://colorschemedesigner.com/) This website
    is a most magnificent and complete treatise on the art and science of color. It
    has everything. Play with the tools here for 15 minutes and you will learn just
    about everything you will ever need regarding the mixing of colors and how colors
    can be combined tastefully.This site is the best of the best.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://colorschemedesigner.com/:](http://colorschemedesigner.com/) 这个网站是关于色彩艺术和科学的最为宏伟和完整的论文。它应有尽有。在这里使用工具玩上15分钟，你将学会关于色彩混合以及如何优雅地搭配色彩所需了解的几乎所有内容。这个网站是最佳中的最佳。'
