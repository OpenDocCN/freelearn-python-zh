- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Building an API
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 API
- en: In the previous chapter, you built a system for student registration and enrollment
    in courses. You created views to display course contents and learned how to use
    Django’s cache framework.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您构建了一个学生课程注册和报名的系统。您创建了用于显示课程内容的视图，并学习了如何使用 Django 的缓存框架。
- en: In this chapter, you will create a RESTful API for your e-learning platform.
    An API is a common programmable interface that can be used on multiple platforms
    like websites, mobile applications, plugins, and so on. For example, you can create
    an API to be consumed by a mobile application for your e-learning platform. If
    you provide an API to third parties, they will be able to consume information
    and operate with your application programmatically. An API allows developers to
    automate actions on your platform and integrate your service with other applications
    or online services. You will build a fully featured API for your e-learning platform.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将为您的在线学习平台创建一个 RESTful API。API 是一种常见的可编程接口，可以在多个平台如网站、移动应用程序、插件等上使用。例如，您可以为您的在线学习平台创建一个
    API，使其被移动应用程序消费。如果您向第三方提供 API，他们就能够以编程方式消费信息和操作您的应用程序。API 允许开发者自动化平台上的操作，并将您的服务与其他应用程序或在线服务集成。您将为您的在线学习平台构建一个功能齐全的
    API。
- en: 'In this chapter, you will:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将：
- en: Install Django REST framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Django REST 框架
- en: Create serializers for your models
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的模型创建序列化器
- en: Build a RESTful API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 RESTful API
- en: Implement serializer method fields
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现序列化方法字段
- en: Create nested serializers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建嵌套序列化器
- en: Implement ViewSet views and routers
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现视图集视图和路由器
- en: Build custom API views
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 API 视图
- en: Handle API authentication
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 API 认证
- en: Add permissions to API views
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将权限添加到 API 视图
- en: Create custom permissions
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义权限
- en: Use the Requests library to consume the API
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Requests 库消费 API
- en: Functional overview
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能概述
- en: '*Figure 15.1* shows a representation of the views and API endpoints that will
    be built in this chapter:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 15.1* 展示了本章将要构建的视图和 API 端点的表示：'
- en: '![](img/B21088_15_01.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_15_01.png)'
- en: 'Figure 15.1: Diagram of API views and endpoints to be built in Chapter 15'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1：第 15 章中要构建的 API 视图和端点的示意图
- en: In this chapter, you will create two different sets of API views, `SubjectViewSet`
    and `CourseViewSet`. The former will include the list and detail views for subjects.
    The latter will include the list and detail views for courses. You will also implement
    the `enroll` action in `CourseViewSet` to enroll students in courses. This action
    will be only available to authenticated users, by using the `IsAuthenticated`
    permission. You will create the `contents` action in `CourseViewSet` to access
    a course’s content. To access course contents, users have to be authenticated
    and enrolled in the given course. You will implement the custom `IsEnrolled` permission
    to limit access to contents to the users enrolled in the course.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将创建两组不同的 API 视图，`SubjectViewSet` 和 `CourseViewSet`。前者将包括主题的列表和详情视图。后者将包括课程的列表和详情视图。您还将实现
    `CourseViewSet` 中的 `enroll` 动作，以便将学生报名到课程中。此动作仅对经过身份验证的用户可用，使用 `IsAuthenticated`
    权限。您将在 `CourseViewSet` 中创建 `contents` 动作以访问课程内容。要访问课程内容，用户必须经过身份验证并已报名参加指定的课程。您将实现自定义的
    `IsEnrolled` 权限，以限制对内容的访问仅限于已报名课程的用户。
- en: If you are not familiar with API endpoints, you just need to know that they
    are the specific locations within an API that accept and respond to requests.
    Each endpoint corresponds to a URL that may accept one or more HTTP methods, like
    `GET`, `POST`, `PUT`, or `DELETE`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉 API 端点，您只需知道它们是 API 中接受并响应请求的特定位置。每个端点对应一个可能接受一个或多个 HTTP 方法（如 `GET`、`POST`、`PUT`
    或 `DELETE`）的 URL。
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter15](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter15).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在 [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter15](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter15)
    找到。
- en: All Python modules used in this chapter are included in the `requirements.txt`
    file in the source code that accompanies this chapter. You can follow the instructions
    to install each Python module below, or you can install all requirements at once
    with the command `python -m pip install -r requirements.txt`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有 Python 模块都包含在本章源代码的 `requirements.txt` 文件中。您可以根据以下说明安装每个 Python 模块，或者您可以使用命令
    `python -m pip install -r requirements.txt` 一次性安装所有依赖。
- en: Building a RESTful API
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 RESTful API
- en: When building an API, there are several ways you can structure its endpoints
    and actions, but following REST principles is encouraged.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建 API 时，您有多种方式可以构建其端点和操作，但遵循 REST 原则是被鼓励的。
- en: The **REST** architecture comes from **Representational State Transfer**. RESTful
    APIs are resource-based; your models represent resources, and HTTP methods such
    as `GET`, `POST`, `PUT`, or `DELETE` are used to retrieve, create, update, or
    delete objects. HTTP response codes are also used in this context. Different HTTP
    response codes are returned to indicate the result of the HTTP request, for example,
    `2XX` response codes for success, `4XX` for errors, and so on.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**REST** 架构来自 **表征状态转移**。RESTful API 是基于资源的；您的模型代表资源，HTTP 方法如 `GET`、`POST`、`PUT`
    或 `DELETE` 用于检索、创建、更新或删除对象。HTTP 响应代码也用于此上下文中。不同的 HTTP 响应代码被返回以指示 HTTP 请求的结果，例如，`2XX`
    响应代码表示成功，`4XX` 表示错误，等等。'
- en: 'The most common formats to exchange data in RESTful APIs are JSON and XML.
    You will build a RESTful API with JSON serialization for your project. Your API
    will provide the following functionalities:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 RESTful API 中交换数据的常见格式是 JSON 和 XML。您将为您的项目构建一个使用 JSON 序列化的 RESTful API。您的
    API 将提供以下功能：
- en: Retrieving subjects
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取科目
- en: Retrieving available courses
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取可用课程
- en: Retrieving course contents
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取课程内容
- en: Enrolling in a course
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册课程
- en: You can build an API from scratch with Django by creating custom views. However,
    there are several third-party modules that simplify creating an API for your project;
    the most popular among them is **Django REST framework** (**DRF**).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 Django 通过创建自定义视图从头开始构建 API。然而，有几个第三方模块可以简化为您的项目创建 API；其中最受欢迎的是 **Django
    REST 框架**（**DRF**）。
- en: 'DRF provides a comprehensive set of tools to build RESTful APIs for your projects.
    The following are some of the most relevant components that we will use to build
    our API:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: DRF 为您的项目构建 RESTful API 提供了一套全面的工具。以下是我们将用于构建我们的 API 的最相关组件之一：
- en: '**Serializers**: To transform data into a standardized format that other programs
    can understand, or to *deserialize* data, by converting data into a format that
    your program can process.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**序列化器**：将数据转换为其他程序可以理解的标准格式，或者通过将数据转换为程序可以处理的格式来 *反序列化* 数据。'
- en: '**Parsers and renderers**: To render (or format) serialized data appropriately
    before it is returned in an HTTP response. Similarly, to parse incoming data to
    ensure that it’s in the correct form.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解析器和渲染器**：在将序列化数据返回为 HTTP 响应之前，适当地渲染（或格式化）数据。同样，解析传入的数据以确保其处于正确的形式。'
- en: '**API views**: To implement the application logic.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API 视图**：用于实现应用程序逻辑。'
- en: '**URLs**: To define the API endpoints that will be available.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URLs**：用于定义可用的 API 端点。'
- en: '**Authentication and permissions**: To define authentication methods for the
    API and the permissions required for each view.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证和权限**：用于定义 API 的身份验证方法和每个视图所需的权限。'
- en: We will start by installing DRF and, after that, we will learn more about these
    components to build our first API.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先安装 DRF，然后我们将学习更多关于这些组件以构建我们的第一个 API。
- en: Installing Django REST framework
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Django REST framework
- en: You can find all the information about **DRF** at [https://www.django-rest-framework.org/](https://www.django-rest-framework.org/).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://www.django-rest-framework.org/](https://www.django-rest-framework.org/)
    找到有关 **DRF** 的所有信息。
- en: 'Open the shell and install the framework with the following command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并使用以下命令安装框架：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Edit the `settings.py` file of the `educa` project and add `rest_framework`
    to the `INSTALLED_APPS` setting to activate the application, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `educa` 项目的 `settings.py` 文件，并将 `rest_framework` 添加到 `INSTALLED_APPS` 设置中，以激活应用程序，如下所示：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, add the following code to the `settings.py` file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将以下代码添加到 `settings.py` 文件中：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can provide a specific configuration for your API using the `REST_FRAMEWORK`
    setting. DRF offers a wide range of settings to configure default behaviors. The
    `DEFAULT_PERMISSION_CLASSES` setting specifies the default permissions to read,
    create, update, or delete objects. You set `DjangoModelPermissionsOrAnonReadOnly`
    as the only default permission class. This class relies on Django’s permissions
    system to allow users to create, update, or delete objects while providing read-only
    access for anonymous users. You will learn more about permissions later, in the
    *Adding permissions to views* section.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `REST_FRAMEWORK` 设置为您的 API 提供特定的配置。DRF 提供了广泛的设置来配置默认行为。`DEFAULT_PERMISSION_CLASSES`
    设置指定了读取、创建、更新或删除对象的默认权限。您将 `DjangoModelPermissionsOrAnonReadOnly` 设置为唯一的默认权限类。此类依赖于
    Django 的权限系统，允许用户创建、更新或删除对象，同时为匿名用户提供只读访问。您将在 *添加权限到视图* 部分中了解更多关于权限的内容。
- en: For a complete list of available settings for DRF, you can visit [https://www.django-rest-framework.org/api-guide/settings/](https://www.django-rest-framework.org/api-guide/settings/).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取 DRF 的完整设置列表，您可以访问 [https://www.django-rest-framework.org/api-guide/settings/](https://www.django-rest-framework.org/api-guide/settings/)。
- en: Defining serializers
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义序列化器
- en: 'After setting up DRF, you need to specify how your data will be serialized.
    Output data has to be serialized in a specific format, and input data will be
    deserialized for processing. The framework provides the following classes to build
    serializers for single objects:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置 DRF 后，您需要指定数据序列化的方式。输出数据必须以特定格式序列化，输入数据在处理之前将进行反序列化。该框架提供了以下类来为单个对象构建序列化器：
- en: '`Serializer`: Provides serialization for normal Python class instances'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Serializer`：为常规 Python 类实例提供序列化'
- en: '`ModelSerializer`: Provides serialization for model instances'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ModelSerializer`：为模型实例提供序列化'
- en: '`HyperlinkedModelSerializer`: The same as `ModelSerializer`, but it represents
    object relationships with links rather than primary keys'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HyperlinkedModelSerializer`：与 `ModelSerializer` 相同，但它使用链接而不是主键来表示对象关系'
- en: 'Let’s build our first serializer. Create the following file structure inside
    the `courses` application directory:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建我们的第一个序列化器。在 `courses` 应用程序目录内创建以下文件结构：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will build all the API functionality inside the `api` directory to keep
    everything well organized. Edit the `api/serializers.py` file and add the following
    code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在 `api` 目录内构建所有 API 功能，以保持一切井井有条。编辑 `api/serializers.py` 文件并添加以下代码：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is the serializer for the `Subject` model. Serializers are defined in a
    similar fashion to Django’s `Form` and `ModelForm` classes. The `Meta` class allows
    you to specify the model to serialize and the fields to be included for serialization.
    All model fields will be included if you don’t set a `fields` attribute.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `Subject` 模型的序列化器。序列化器定义的方式与 Django 的 `Form` 和 `ModelForm` 类类似。`Meta` 类允许您指定要序列化的模型以及要包含在序列化中的字段。如果不设置
    `fields` 属性，则所有模型字段都将被包含。
- en: 'Let’s try the serializer. Open the command line and start the Django shell
    with the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试序列化器。打开命令行，使用以下命令启动 Django 命令行：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the following code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下代码：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, you get a `Subject` object, create an instance of `SubjectSerializer`,
    and access the serialized data. You can see that the model data is translated
    into Python native data types.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，您获取一个 `Subject` 对象，创建 `SubjectSerializer` 的实例，并访问序列化数据。您可以看到模型数据被转换为 Python
    原生数据类型。
- en: You can read more about serializers at [https://www.django-rest-framework.org/api-guide/serializers/](https://www.django-rest-framework.org/api-guide/serializers/).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://www.django-rest-framework.org/api-guide/serializers/](https://www.django-rest-framework.org/api-guide/serializers/)
    上了解更多关于序列化器的信息。
- en: Understanding parsers and renderers
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解解析器和渲染器
- en: The serialized data has to be rendered in a specific format before you return
    it in an HTTP response. Likewise, when you get an HTTP request, you have to parse
    the incoming data and deserialize it before you can operate with it. DRF includes
    renderers and parsers to handle that.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在将序列化数据返回为 HTTP 响应之前，必须以特定格式渲染序列化数据。同样，在接收到 HTTP 请求时，您必须解析传入的数据并在操作之前对其进行反序列化。DRF
    包括渲染器和解析器来处理这些操作。
- en: 'Let’s see how to parse incoming data. Execute the following code in the Python
    shell:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何解析传入的数据。在 Python 命令行中执行以下代码：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Given a JSON string input, you can use the `JSONParser` class provided by DRF
    to convert it to a Python object.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 JSON 字符串输入，您可以使用 DRF 提供的 `JSONParser` 类将其转换为 Python 对象。
- en: DRF also includes `Renderer` classes that allow you to format API responses.
    The framework determines which renderer to use through content negotiation by
    inspecting the request’s `Accept` header to determine the expected content type
    for the response. Optionally, the renderer is determined by the format suffix
    of the URL. For example, the URL `http://127.0.0.1:8000/api/data.json` might be
    an endpoint that triggers the `JSONRenderer` in order to return a JSON response.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: DRF还包括允许您格式化API响应的`Renderer`类。框架通过检查请求的`Accept`头，确定响应的预期内容类型，通过内容协商来决定使用哪个渲染器。可选地，渲染器也可以由URL的格式后缀确定。例如，URL
    `http://127.0.0.1:8000/api/data.json`可能是一个触发`JSONRenderer`以返回JSON响应的端点。
- en: 'Go back to the shell and execute the following code to render the `serializer`
    object from the previous serializer example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到shell并执行以下代码以从上一个序列化器示例中渲染`serializer`对象：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You will see the following output:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You use the `JSONRenderer` to render the serialized data into JSON. By default,
    DRF uses two different renderers: `JSONRenderer` and `BrowsableAPIRenderer`. The
    latter provides a web interface to easily browse your API. You can change the
    default renderer classes with the `DEFAULT_RENDERER_CLASSES` option of the `REST_FRAMEWORK`
    setting.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您使用`JSONRenderer`将序列化数据渲染成JSON。默认情况下，DRF使用两个不同的渲染器：`JSONRenderer`和`BrowsableAPIRenderer`。后者提供了一个网页界面，可以轻松浏览您的API。您可以使用`REST_FRAMEWORK`设置的`DEFAULT_RENDERER_CLASSES`选项更改默认的渲染器类。
- en: You can find more information about renderers and parsers at [https://www.django-rest-framework.org/api-guide/renderers/](https://www.django-rest-framework.org/api-guide/renderers/)
    and [https://www.django-rest-framework.org/api-guide/parsers/](https://www.django-rest-framework.org/api-guide/parsers/),
    respectively.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.django-rest-framework.org/api-guide/renderers/](https://www.django-rest-framework.org/api-guide/renderers/)和[https://www.django-rest-framework.org/api-guide/parsers/](https://www.django-rest-framework.org/api-guide/parsers/)找到有关渲染器和解析器的更多信息。
- en: Next, you are going to learn how to build API views and use serializers in views.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将学习如何构建API视图并使用序列化器在视图中。
- en: Building list and detail views
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建列表和详细视图
- en: DRF comes with a set of generic views and mixins that you can use to build your
    API views. You have been using generic views throughout this book since *Chapter
    2*, *Enhancing Your Blog and Adding Social Features*,and you learned about mixins
    in *Chapter 13*, *Creating a Content Management System*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: DRF附带了一系列通用的视图和混入，您可以使用它们来构建您的API视图。自第2章“增强您的博客和添加社交功能”以来，您一直在使用通用视图，并在第13章“创建内容管理系统”中学习了混入。
- en: The base views and mixins provide the functionality to retrieve, create, update,
    or delete model objects. You can see all the generic mixins and views provided
    by DRF at [https://www.django-rest-framework.org/api-guide/generic-views/](https://www.django-rest-framework.org/api-guide/generic-views/).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 基础视图和混入提供了检索、创建、更新或删除模型对象的功能。您可以在[https://www.django-rest-framework.org/api-guide/generic-views/](https://www.django-rest-framework.org/api-guide/generic-views/)查看DRF提供的所有通用混入和视图。
- en: 'Let’s create list and detail views to retrieve `Subject` objects. Create a
    new file inside the `courses/api/` directory and name it `views.py`. Add the following
    code to it:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建列表和详细视图来检索`Subject`对象。在`courses/api/`目录内创建一个新文件，命名为`views.py`。向其中添加以下代码：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In this code, you use the generic `ListAPIView` and `RetrieveAPIView` views
    of DRF. Both views have the following attributes:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，您使用了DRF的通用`ListAPIView`和`RetrieveAPIView`视图。这两个视图都有以下属性：
- en: '`queryset`: The base QuerySet to use to retrieve objects'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`queryset`：用于检索对象的基QuerySet'
- en: '`serializer_class`: The class to serialize objects'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serializer_class`：用于序列化对象的类'
- en: 'Let’s add URL patterns for your views. Create a new file inside the `courses/api/`
    directory, name it `urls.py`, and make it look as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为您的视图添加URL模式。在`courses/api/`目录内创建一个新文件，命名为`urls.py`，并使其看起来如下：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the URL pattern for the `SubjectDetailView` view, you include a `pk` URL
    parameter to retrieve the object with the given primary key of the `Subject` model,
    which is the `id` field. Edit the main `urls.py` file of the `educa` project and
    include the API patterns, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在`SubjectDetailView`视图的URL模式中，您包括一个`pk` URL参数，用于检索具有给定`Subject`模型主键的对象，即`id`字段。编辑`educa`项目的主体`urls.py`文件，并包含API模式，如下所示：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You use the `api` namespace for your API URLs. Our initial API endpoints are
    ready to be used.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您使用`api`命名空间为您的API URL。我们的初始API端点已准备好使用。
- en: Consuming the API
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消费API
- en: 'By making our views available via URLs, we have created our first API endpoints.
    Let’s now try our own API. Ensure that your server is running with the following
    command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过通过URL提供我们的视图，我们已经创建了我们的第一个API端点。现在让我们尝试自己的API。确保您的服务器正在以下命令下运行：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We are going to use `curl` to consume the API. `curl` is a command-line tool
    that allows you to transfer data to and from a server. If you are using Linux,
    macOS, or Windows 10/11, `curl` is very likely included in your system. However,
    you can download `curl` from [https://curl.se/download.html](https://curl.se/download.html).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`curl`来消费API。`curl`是一个命令行工具，允许您在服务器之间传输数据。如果您使用Linux、macOS或Windows 10/11，`curl`很可能已经包含在您的系统中。但是，您可以从[https://curl.se/download.html](https://curl.se/download.html)下载`curl`。
- en: 'Open the shell and retrieve the URL `http://127.0.0.1:8000/api/subjects/` with
    `curl`, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 打开shell，使用`curl`检索URL `http://127.0.0.1:8000/api/subjects/`，如下所示：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You will get a response similar to the following one:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得以下类似的响应：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To obtain a more readable, well-indented JSON response, you can use `curl`
    with the `json_pp` utility, as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得更易读、缩进良好的JSON响应，您可以使用带有`json_pp`工具的`curl`，如下所示：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The HTTP response contains a list of `Subject` objects in the JSON format.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP响应包含JSON格式的`Subject`对象列表。
- en: Instead of `curl`, you can also use any other tool to send custom HTTP requests,
    including a browser extension such as Postman, which you can get at [https://www.getpostman.com/](https://www.getpostman.com/).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`curl`之外，您还可以使用任何其他工具发送自定义HTTP请求，包括Postman浏览器扩展，您可以在[https://www.getpostman.com/](https://www.getpostman.com/)获取。
- en: 'Open `http://127.0.0.1:8000/api/subjects/` in your browser. You will see DRF’s
    browsable API, as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开`http://127.0.0.1:8000/api/subjects/`。您将看到DRF的可浏览API，如下所示：
- en: '![Graphical user interface, text  Description automatically generated](img/B21088_15_02.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，自动生成的描述](img/B21088_15_02.png)'
- en: 'Figure 15.2: The Subject List page in the REST framework browsable API'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2：REST框架可浏览API中的主题列表页面
- en: This HTML interface is provided by the `BrowsableAPIRenderer` renderer. It displays
    the result headers and content, and it allows you to perform requests. You can
    also access the API detail view for a `Subject` object by including its ID in
    the URL.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个HTML界面是由`BrowsableAPIRenderer`渲染器提供的。它显示结果标题和内容，并允许您执行请求。您还可以通过在URL中包含其ID来访问`Subject`对象的API详情视图。
- en: Open `http://127.0.0.1:8000/api/subjects/1/` in your browser. You will see a
    single `Subject` object rendered in the JSON format.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开`http://127.0.0.1:8000/api/subjects/1/`。您将看到一个单独的主题对象以JSON格式呈现。
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_15_03.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件，自动生成的描述](img/B21088_15_03.png)'
- en: 'Figure 15.3: The Subject Detail page in the REST framework browsable API'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3：REST框架可浏览API中的主题详情页面
- en: This is the response for the `SubjectDetailView`. Let’s learn how to enrich
    the content returned for each subject. In the next section, we are going to dive
    into extending serializers with additional fields and methods.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`SubjectDetailView`的响应。让我们学习如何丰富每个主题返回的内容。在下一节中，我们将深入探讨如何通过添加额外的字段和方法来扩展序列化器。
- en: Extending serializers
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展序列化器
- en: You have learned how to serialize your model objects; however, often, you may
    want to enrich the response with additional relevant data or calculated fields.
    Let’s take a look at some of the options to extend serializers.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学习了如何序列化您的模型对象；然而，通常，您可能希望通过添加额外的相关数据或计算字段来丰富响应。让我们看看扩展序列化器的一些选项。
- en: Adding additional fields to serializers
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向序列化器中添加额外的字段
- en: Let’s edit the subject views to include the number of courses available for
    each subject. You will use the Django aggregation functions to annotate the count
    of related courses for each subject.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编辑主题视图，包括每个主题可用的课程数量。您将使用Django聚合函数来注释每个主题的相关课程数量。
- en: 'Edit the `api/views.py` file of the `courses` application and add the following
    code highlighted in bold:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses`应用的`api/views.py`文件，并添加以下加粗显示的代码：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You are now using a QuerySet for the `SubjectListView` and `SubjectDetailView`
    that uses the `Count` aggregation function to annotate the related course count.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在正在使用`SubjectListView`和`SubjectDetailView`的QuerySet，它使用`Count`聚合函数来注释相关课程的数量。
- en: 'Edit the `api/serializers.py` file of the `courses` application and add the
    following code highlighted in bold:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses`应用的`api/serializers.py`文件，并添加以下加粗显示的代码：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You have added the `total_courses` field to the `SubjectSerializer` class. This
    field is an `IntegerField` to represent integers. This field will automatically
    get its value from the `total_courses` attribute of the object being serialized.
    By using `annotate()`, we added the `total_courses` attribute to the resulting
    objects of the `QuerySet`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您已将 `total_courses` 字段添加到 `SubjectSerializer` 类中。该字段是一个 `IntegerField`，用于表示整数。该字段将自动从正在序列化的对象的
    `total_courses` 属性获取其值。通过使用 `annotate()`，我们将 `total_courses` 属性添加到 `QuerySet`
    的结果对象中。
- en: 'Open `http://127.0.0.1:8000/api/subjects/1/` in your browser. The serialized
    JSON object now includes the `total_courses` attribute, as shown in *Figure 15.4*:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开 `http://127.0.0.1:8000/api/subjects/1/`。现在序列化的 JSON 对象包括 `total_courses`
    属性，如图 *15.4* 所示：
- en: '![](img/B21088_15_04.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_15_04.png)'
- en: 'Figure 15.4: The Subject Detail page, including the total_courses attribute'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.4：主题详细页面，包括 total_courses 属性
- en: You have successfully added the `total_courses` attribute to the subject list
    and detail views. Now, let’s look into adding additional attributes using custom
    serializer methods.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功将 `total_courses` 属性添加到主题列表和详细视图中。现在，让我们看看如何使用自定义序列化方法添加其他属性。
- en: Implementing serializer method fields
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现序列化方法字段
- en: DRF provides `SerializerMethodField`, which allows you to implement read-only
    fields that get their value by calling a method of the serializer class. This
    can be particularly useful when you want to include some custom formatted data
    in your serialized object or perform complex calculations that are not directly
    a part of your model instances.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: DRF 提供 `SerializerMethodField`，允许您实现通过调用序列化类的方法来获取值的只读字段。当您想在序列化对象中包含一些自定义格式化的数据或执行不是模型实例直接部分的复杂计算时，这特别有用。
- en: 'We will create a method that serializes the top 3 popular courses for a subject.
    We will rank courses by the number of students enrolled in them. Edit the `api/serializers.py`
    file of the `courses` application and add the following code highlighted in bold:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个方法，用于序列化一个主题的前 3 个热门课程。我们将根据注册学生的数量对课程进行排名。编辑 `courses` 应用程序的 `api/serializers.py`
    文件，并添加以下加粗代码：
- en: '[PRE19]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the new code, you add the new `popular_courses` serializer method field to
    `SubjectSerializer`. The field gets its value from the `get_popular_courses()`
    method. You can provide the name of the serializer method to call with the `method_field`
    argument of `SerializerMethodField`. If not included, this defaults to `get_<field_name>`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在新代码中，您将新的 `popular_courses` 序列化方法字段添加到 `SubjectSerializer`。该字段从 `get_popular_courses()`
    方法获取其值。您可以使用 `method_field` 参数提供要调用的序列化方法名称。如果不包含，则默认为 `get_<field_name>`。
- en: 'Open `http://127.0.0.1:8000/api/subjects/1/` in your browser. The serialized
    JSON object now includes the `total_courses` attribute, as shown in *Figure 15.5*:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开 `http://127.0.0.1:8000/api/subjects/1/`。现在序列化的 JSON 对象包括 `total_courses`
    属性，如图 *15.5* 所示：
- en: '![](img/B21088_15_05.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_15_05.png)'
- en: 'Figure 15.5: The subject detail page, including the popular_courses attribute'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.5：主题详细页面，包括热门课程属性
- en: You have successfully implemented a `SerializerMethodField`. Note that, now,
    an additional SQL query is generated for each of the results returned by `SubjectListView`.
    Next, you are going to learn how to control the number of results returned by
    adding pagination to `SubjectListView`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功实现了一个 `SerializerMethodField`。请注意，现在，为 `SubjectListView` 返回的每个结果都会生成一个额外的
    SQL 查询。接下来，您将学习如何通过向 `SubjectListView` 添加分页来控制返回的结果数量。
- en: Adding pagination to views
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向视图中添加分页
- en: DRF includes built-in pagination capabilities to control how many objects are
    sent over in your API responses. When the content of your site starts to grow,
    you might end up with a large number of subjects and courses. Pagination can be
    particularly useful to improve performance and the user experience when dealing
    with large datasets.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: DRF 包含内置的分页功能，用于控制 API 响应中发送的对象数量。当您网站的内容开始增长时，您可能会拥有大量的主题和课程。分页在处理大量数据集时可以特别有用，以改善性能和用户体验。
- en: Let’s update the `SubjectListView` view to include pagination. First, we will
    define a pagination class.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新 `SubjectListView` 视图以包括分页。首先，我们将定义一个分页类。
- en: 'Create a new file inside the `courses/api/` directory and name it `pagination.py`.
    Add the following code to it:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `courses/api/` 目录中创建一个新文件，并将其命名为 `pagination.py`。向其中添加以下代码：
- en: '[PRE20]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In this class, we inherit from `PageNumberPagination`. This class provides
    support for pagination based on page numbers. We set the following attributes:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，我们继承自`PageNumberPagination`。这个类提供了基于页码的分页支持。我们设置了以下属性：
- en: '`page_size`: Determines the default page size (the number of items returned
    per page) when no page size is provided in the request'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`page_size`：确定当请求中没有提供页面大小时，默认页面大小（每页返回的项目数）'
- en: '`page_size_query_params`: Defines the name for the query parameter to use for
    the page size'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`page_size_query_params`：定义用于页面大小的查询参数的名称'
- en: '`max_page_size`: Indicates the maximum requested page size allowed'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_page_size`：指示允许的最大请求页面大小'
- en: 'Now, edit the `api/views.py` file of the `courses` application and add the
    following lines highlighted in bold:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，编辑`courses`应用的`api/views.py`文件，并添加以下加粗的行：
- en: '[PRE21]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can now paginate the objects returned by `SubjectListView`. Open `http://127.0.0.1:8000/api/subjects/`
    in your browser. You can see that the JSON structure returned by the view is now
    different due to the pagination. You will see the following structure:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以分页`SubjectListView`返回的对象。在浏览器中打开`http://127.0.0.1:8000/api/subjects/`。您会看到由于分页，视图返回的JSON结构现在不同。您将看到以下结构：
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following items are now part of the JSON returned:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下项现在包含在返回的JSON中：
- en: '`count`: The total number of results.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count`：结果总数。'
- en: '`next`: The URL to retrieve the next page. The value is `null` when there are
    no following pages.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`next`：获取下一页的URL。当没有下一页时，值为`null`。'
- en: '`previous`: The URL to retrieve the previous page. The value is `null` when
    there are no previous pages.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`previous`：获取上一页的URL。当没有上一页时，值为`null`。'
- en: '`results`: A list with the serialized objects returned on this page.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`results`：本页返回的序列化对象列表。'
- en: 'Open `http://127.0.0.1:8000/api/subjects/?page_size=2&page=1` in your browser.
    This will paginate results by two items per page and retrieve the first page of
    results, as shown in *Figure 15.6*:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://127.0.0.1:8000/api/subjects/?page_size=2&page=1`。这将按每页两个项目分页结果并检索第一页的结果，如*图15.6*所示：
- en: '![](img/B21088_15_06.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_15_06.png)'
- en: 'Figure 15.6: First page of results for the subject list pagination, with a
    page size of 2'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6：主题列表分页的第一页结果，页面大小为2
- en: We have implemented pagination based on the page number, but DRF also provides
    a class to implement limit/offset and cursor-based pagination. You can read more
    about pagination at [https://www.django-rest-framework.org/api-guide/pagination/](https://www.django-rest-framework.org/api-guide/pagination/).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经根据页码实现了分页，但DRF还提供了一个类来实现基于limit/offset和游标的分页。您可以在[https://www.django-rest-framework.org/api-guide/pagination/](https://www.django-rest-framework.org/api-guide/pagination/)上了解更多关于分页的信息。
- en: You have created the API endpoints for the subject views. Next, you will add
    course endpoints to your API.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您已为主题视图创建了API端点。接下来，您将向API中添加课程端点。
- en: Building the course serializer
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建课程序列化器
- en: 'We are going to create a serializer for the `Course` model. Edit the `api/serializers.py`
    file of the `courses` application and add the following code highlighted in bold:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建`Course`模型的序列化器。编辑`courses`应用的`api/serializers.py`文件，并添加以下加粗的代码：
- en: '[PRE23]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let’s take a look at how a `Course` object is serialized. Open the shell and
    execute the following command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`Course`对象是如何序列化的。打开shell并执行以下命令：
- en: '[PRE24]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Run the following code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下代码：
- en: '[PRE25]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You will get a JSON object with the fields that you included in `CourseSerializer`.
    You can see that the related objects of the `modules` manager are serialized as
    a list of primary keys, as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得一个包含您在`CourseSerializer`中包含的字段的JSON对象。您可以看到，`modules`管理器的相关对象被序列化为一个主键列表，如下所示：
- en: '[PRE26]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: These are the IDs of the related `Module` objects. Next, you are going to learn
    different methods to serialize related objects.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是相关`Module`对象的ID。接下来，您将学习不同的方法来序列化相关对象。
- en: Serializing relations
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 序列化关系
- en: DRF comes with different types of related fields to represent model relationships.
    This works for `ForeignKey`, `ManyToManyField`, and `OneToOneField` relationships,
    as well as generic model relations.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: DRF提供了不同类型的关联字段来表示模型关系。这适用于`ForeignKey`、`ManyToManyField`和`OneToOneField`关系，以及通用模型关系。
- en: We are going to use `StringRelatedField` to change how related `Module` objects
    are serialized. `StringRelatedField` represents the related object using its `__str__()`
    method.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`StringRelatedField`来更改相关`Module`对象的序列化方式。`StringRelatedField`使用其`__str__()`方法表示相关对象。
- en: 'Edit the `api/serializers.py` file of the `courses` application and add the
    following code highlighted in bold:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses`应用的`api/serializers.py`文件，并添加以下加粗代码：
- en: '[PRE27]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the new code, you define the `modules` field that provides serialization
    for the related `Module` objects. You use `many=True` to indicate that you are
    serializing multiple related objects. The `read_only` parameter indicates that
    this field is read-only and should not be included in any input to create or update
    objects.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在新代码中，你定义了`modules`字段，该字段为相关的`Module`对象提供序列化。你使用`many=True`来表示你正在序列化多个相关对象。`read_only`参数表示该字段为只读，不应包含在任何创建或更新对象的输入中。
- en: 'Open the shell and create an instance of `CourseSerializer` again. Render the
    serializer’s `data` attribute with `JSONRenderer`. This time, the listed modules
    are serialized using their `__str__()` method, as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 打开shell并再次创建`CourseSerializer`的实例。使用`JSONRenderer`渲染序列化器的`data`属性。这次，列出的模块使用它们的`__str__()`方法进行序列化，如下所示：
- en: '[PRE28]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note that DRF does not optimize QuerySets. When serializing a list of courses,
    a SQL query will be generated for each course result to retrieve the related `Module`
    objects. You can reduce the number of additional SQL requests by using `prefetch_related()`
    in your QuerySet, like `Course.objects.prefetch_related('modules')`. We will cover
    this later in the section *Creating ViewSets and routers*.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，DRF不优化查询集。当序列化课程列表时，将为每个课程结果生成一个SQL查询来检索相关的`Module`对象。你可以通过在查询集中使用`prefetch_related()`来减少额外的SQL请求的数量，例如`Course.objects.prefetch_related('modules')`。我们将在*创建视图集和路由器*部分中稍后介绍这一点。
- en: You can read more about serializer relations at [https://www.django-rest-framework.org/api-guide/relations/](https://www.django-rest-framework.org/api-guide/relations/).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://www.django-rest-framework.org/api-guide/relations/](https://www.django-rest-framework.org/api-guide/relations/)了解更多关于序列化关系的信息。
- en: Let’s advance further and define the serialization of related objects with a
    nested serializer.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步前进，并定义使用嵌套序列化器的相关对象的序列化。
- en: Creating nested serializers
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建嵌套序列化器
- en: 'If we want to include more information about each module, we need to serialize
    `Module` objects and nest them. Modify the previous code of the `api/serializers.py`
    file of the `courses` application to make it look as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要包含关于每个模块的更多信息，我们需要序列化`Module`对象并将它们嵌套。修改`courses`应用的`api/serializers.py`文件的先前代码，使其看起来如下所示：
- en: '[PRE29]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the new code, you define `ModuleSerializer` to provide serialization for
    the `Module` model. Then, you modify the `modules` attribute of `CourseSerializer`
    to nest the `ModuleSerializer` serializer. You keep `many=True` to indicate that
    you are serializing multiple objects and `read_only=True` to keep this field read-only.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在新代码中，你定义了`ModuleSerializer`来为`Module`模型提供序列化。然后，你修改了`CourseSerializer`的`modules`属性以嵌套`ModuleSerializer`序列化器。你保持`many=True`以表示你正在序列化多个对象，并保持`read_only=True`以保持该字段为只读。
- en: 'Open the shell and create an instance of `CourseSerializer` again. Render the
    serializer’s `data` attribute with `JSONRenderer`. This time, the listed modules
    are serialized with the nested `ModuleSerializer` serializer, as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 打开shell并再次创建`CourseSerializer`的实例。使用`JSONRenderer`渲染序列化器的`data`属性。这次，列出的模块使用嵌套的`ModuleSerializer`序列化器进行序列化，如下所示：
- en: '[PRE30]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Creating ViewSets and routers
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图集和路由器
- en: 'ViewSets allow you to define the interactions of your API and let DRF build
    URLs dynamically with a `Router` object. By using ViewSets, you can avoid repeating
    logic for multiple views. ViewSets include actions for the following standard
    operations:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 视图集允许你定义你的API交互，并让DRF使用`Router`对象动态构建URL。通过使用视图集，你可以避免为多个视图重复逻辑。视图集包括以下标准操作的动作：
- en: 'Create operation: `create()`'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建操作：`create()`
- en: 'Retrieve operation: `list()` and `retrieve()`'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询操作：`list()`和`retrieve()`
- en: 'Update operation: `update()` and `partial_update()`'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新操作：`update()`和`partial_update()`
- en: 'Delete operation: `destroy()`'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除操作：`destroy()`
- en: 'Let’s create a ViewSet for the `Course` model. Edit the `api/views.py` file
    and add the following code highlighted in bold:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为`Course`模型创建一个视图集。编辑`api/views.py`文件，并添加以下加粗代码：
- en: '[PRE31]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The new `CourseViewSet` class inherits from `ReadOnlyModelViewSet`, which provides
    the read-only actions `list()` and `retrieve()` to list objects or retrieve a
    single object, respectively. You specify the base QuerySet to retrieve objects.
    You use `prefetch_related('modules')` to fetch the related `Module` objects in
    an efficient manner. This will avoid additional SQL queries when serializing nested
    modules for each course. In this class, you also define the serializer and pagination
    classes to use for the ViewSet.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `CourseViewSet` 类继承自 `ReadOnlyModelViewSet`，它提供了只读操作 `list()` 和 `retrieve()`，分别用于列出对象或检索单个对象。您指定用于检索对象的基查询集。您使用
    `prefetch_related('modules')` 以高效方式获取相关的 `Module` 对象。这将避免在序列化每个课程的嵌套模块时进行额外的SQL查询。在此类中，您还定义了用于ViewSet的序列化和分页类。
- en: 'Edit the `api/urls.py` file and create a router for your ViewSet, as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `api/urls.py` 文件，并为您的ViewSet创建一个路由器，如下所示：
- en: '[PRE32]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You create a `DefaultRouter` object and register `CourseViewSet` with the `courses`
    prefix. The router takes charge of generating URLs automatically for your `ViewSet`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 您创建一个 `DefaultRouter` 对象，并使用 `courses` 前缀注册 `CourseViewSet`。路由器负责为您的 `ViewSet`
    自动生成URL。
- en: 'Open `http://127.0.0.1:8000/api/` in your browser. You will see that the router
    lists the `courses` ViewSet in its base URL, as shown in *Figure 15.7*:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开 `http://127.0.0.1:8000/api/`。您将看到路由器在其基本URL中列出了 `courses` ViewSet，如图
    *图15.7* 所示：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_15_07.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_15_07.png)'
- en: 'Figure 15.7: The API Root page of the REST framework browsable API'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.7：REST框架可浏览API的API根页面
- en: 'You can access `http://127.0.0.1:8000/api/courses/` to retrieve the list of
    courses, as shown in *Figure 15.8*:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问 `http://127.0.0.1:8000/api/courses/` 来获取课程列表，如图 *图15.8* 所示：
- en: '![](img/B21088_15_08.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![img/B21088_15_08.png]'
- en: 'Figure 15.8: The Course List page in the REST framework browsable API'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.8：REST框架可浏览API中的课程列表页面
- en: 'Let’s convert the `SubjectListView` and `SubjectDetailView` views into a single
    ViewSet. Edit the `api/views.py` file, and remove or comment out the `SubjectListView`
    and `SubjectDetailView` classes. Then, add the following code highlighted in bold:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将 `SubjectListView` 和 `SubjectDetailView` 视图转换为单个ViewSet。编辑 `api/views.py`
    文件，并删除或注释掉 `SubjectListView` 和 `SubjectDetailView` 类。然后，添加以下加粗的代码：
- en: '[PRE33]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Edit the `api/urls.py` file and remove or comment out the following URLs, since
    you don’t need them anymore:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `api/urls.py` 文件，并删除或注释掉以下URL，因为您不再需要它们：
- en: '[PRE34]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the same file, add the following code highlighted in bold:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一文件中，添加以下加粗的代码：
- en: '[PRE35]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Open `http://127.0.0.1:8000/api/` in your browser. You will see that the router
    now includes URLs for both the `courses` and `subjects` ViewSets, as shown in
    *Figure 15.9*:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开 `http://127.0.0.1:8000/api/`。您将看到路由器现在包括了 `courses` 和 `subjects` ViewSets
    的URL，如图 *图15.9* 所示：
- en: '![](img/B21088_15_09.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![img/B21088_15_09.png]'
- en: 'Figure 15.9: The API Root page of the REST framework browsable API'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.9：REST框架可浏览API的API根页面
- en: You can learn more about ViewSets at [https://www.django-rest-framework.org/api-guide/viewsets/](https://www.django-rest-framework.org/api-guide/viewsets/).
    You can also find more information about routers at [https://www.django-rest-framework.org/api-guide/routers/](https://www.django-rest-framework.org/api-guide/routers/).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://www.django-rest-framework.org/api-guide/viewsets/](https://www.django-rest-framework.org/api-guide/viewsets/)
    上了解更多关于ViewSets的信息。您还可以在 [https://www.django-rest-framework.org/api-guide/routers/](https://www.django-rest-framework.org/api-guide/routers/)
    上找到有关路由器的更多信息。
- en: Generic API views and ViewSets are very useful to build REST APIs based on your
    models and serializers. However, you might also need to implement your own views
    with custom logic. Let’s learn how to create a custom API view.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 通用API视图和ViewSets对于基于您的模型和序列化器构建REST API非常有用。然而，您可能还需要实现自己的视图并添加自定义逻辑。让我们学习如何创建一个自定义API视图。
- en: Building custom API views
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自定义API视图
- en: DRF provides an `APIView` class that builds API functionality on top of Django’s
    `View` class. The `APIView` class differs from `View` by using DRF’s custom `Request`
    and `Response` objects and handling `APIException` exceptions to return the appropriate
    HTTP responses. It also has a built-in authentication and authorization system
    to manage access to views.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: DRF提供了一个 `APIView` 类，它基于Django的 `View` 类构建API功能。`APIView` 类与 `View` 不同，因为它使用DRF的自定义
    `Request` 和 `Response` 对象，并处理 `APIException` 异常以返回适当的HTTP响应。它还内置了身份验证和授权系统来管理对视图的访问。
- en: 'You are going to create a view for users to enroll in courses. Edit the `api/views.py`
    file of the `courses` application and add the following code highlighted in bold:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 您将创建一个用户注册课程的视图。编辑`courses`应用的`api/views.py`文件，并添加以下加粗代码：
- en: '[PRE36]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `CourseEnrollView` view handles user enrollment in courses. The preceding
    code is as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`CourseEnrollView`视图处理用户在课程中的注册。前面的代码如下：'
- en: You create a custom view that subclasses `APIView`.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您创建一个自定义视图，该视图继承自`APIView`。
- en: You define a `post()` method for `POST` actions. No other HTTP method will be
    allowed for this view.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您为`POST`操作定义一个`post()`方法。此视图不允许其他HTTP方法。
- en: You expect a `pk` URL parameter containing the ID of a course. You retrieve
    the course by the given `pk` parameter and raise a `404` exception if it’s not
    found.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您期望一个包含课程ID的`pk` URL参数。您通过给定的`pk`参数检索课程，如果未找到则引发`404`异常。
- en: You add the current user to the `students` many-to-many relationship of the
    `Course` object and return a successful response.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将当前用户添加到`Course`对象的`students`多对多关系，并返回一个成功的响应。
- en: 'Edit the `api/urls.py` file and add the following URL pattern to the `CourseEnrollView`
    view:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`api/urls.py`文件，并将以下URL模式添加到`CourseEnrollView`视图：
- en: '[PRE37]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Theoretically, you could now perform a `POST` request to enroll the current
    user in a course. However, you need to be able to identify the user and prevent
    unauthenticated users from accessing this view. Let’s see how API authentication
    and permissions work.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，您现在可以执行一个`POST`请求来注册当前用户到课程中。然而，您需要能够识别用户并防止未经认证的用户访问此视图。让我们看看API认证和权限是如何工作的。
- en: Handling authentication
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理认证
- en: DRF provides authentication classes to identify the user performing the request.
    If authentication is successful, the framework sets the authenticated `User` object
    in `request.user`. If no user is authenticated, an instance of Django’s `AnonymousUser`
    is set instead.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: DRF提供了认证类来识别执行请求的用户。如果认证成功，框架将在`request.user`中设置认证的`User`对象。如果没有用户认证，则设置Django的`AnonymousUser`实例。
- en: 'DRF provides the following authentication backends:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: DRF提供了以下认证后端：
- en: '`BasicAuthentication`: This is HTTP basic authentication. The user and password
    are sent by the client in the `Authorization` HTTP header, encoded with Base64\.
    You can learn more about it at [https://en.wikipedia.org/wiki/Basic_access_authentication](https://en.wikipedia.org/wiki/Basic_access_authentication).'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BasicAuthentication`：这是HTTP基本认证。用户名和密码由客户端通过`Authorization` HTTP头发送，并使用Base64编码。您可以在[https://en.wikipedia.org/wiki/Basic_access_authentication](https://en.wikipedia.org/wiki/Basic_access_authentication)了解更多信息。'
- en: '`TokenAuthentication`: This is token-based authentication. A `Token` model
    is used to store user tokens. Users include the token in the `Authorization` HTTP
    header for authentication.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TokenAuthentication`：这是基于令牌的认证。使用`Token`模型来存储用户令牌。用户将令牌包含在`Authorization`
    HTTP头中进行认证。'
- en: '`SessionAuthentication`: This uses Django’s session backend for authentication.
    This backend is useful for performing authenticated AJAX requests to the API from
    your website’s frontend.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SessionAuthentication`：这使用Django的会话后端进行认证。此后端对于从您的网站前端向API执行认证的AJAX请求很有用。'
- en: '`RemoteUserAuthentication`: This allows you to delegate authentication to your
    web server, which sets a `REMOTE_USER` environment variable.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RemoteUserAuthentication`：这允许您将认证委托给您的Web服务器，该服务器设置一个`REMOTE_USER`环境变量。'
- en: You can build a custom authentication backend by subclassing the `BaseAuthentication`
    class provided by DRF and overriding the `authenticate()` method.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过继承DRF提供的`BaseAuthentication`类并重写`authenticate()`方法来构建自定义认证后端。
- en: Implementing basic authentication
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现基本认证
- en: You can set authentication on a per-view basis or set it globally with the `DEFAULT_AUTHENTICATION_CLASSES`
    setting.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按视图设置认证，或使用`DEFAULT_AUTHENTICATION_CLASSES`设置全局设置认证。
- en: Authentication only identifies the user performing the request. It won’t allow
    or deny access to views. You have to use permissions to restrict access to views.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 认证仅识别执行请求的用户。它不会允许或拒绝对视图的访问。您必须使用权限来限制对视图的访问。
- en: You can find all the information about authentication at [https://www.django-rest-framework.org/api-guide/authentication/](https://www.django-rest-framework.org/api-guide/authentication/).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.django-rest-framework.org/api-guide/authentication/](https://www.django-rest-framework.org/api-guide/authentication/)找到有关认证的所有信息。
- en: 'Let’s add `BasicAuthentication` to your view. Edit the `api/views.py` file
    of the `courses` application and add an `authentication_classes` attribute to
    `CourseEnrollView`, as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在视图中添加`BasicAuthentication`。编辑`courses`应用的`api/views.py`文件，并将`authentication_classes`属性添加到`CourseEnrollView`中，如下所示：
- en: '[PRE38]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Users will be identified by the credentials set in the `Authorization` header
    of the HTTP request.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将通过HTTP请求的`Authorization`头中设置的凭证来识别。
- en: Adding permissions to views
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向视图中添加权限
- en: 'DRF includes a permission system to restrict access to views. Some of the built-in
    permissions of DRF are:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: DRF包含一个权限系统来限制对视图的访问。DRF的一些内置权限包括：
- en: '`AllowAny`: Unrestricted access, regardless of whether a user is authenticated
    or not.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AllowAny`: 无限制访问，无论用户是否已认证。'
- en: '`IsAuthenticated`: Allows access to authenticated users only.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IsAuthenticated`: 仅允许认证用户访问。'
- en: '`IsAuthenticatedOrReadOnly`: Complete access to authenticated users. Anonymous
    users are only allowed to execute read methods such as `GET`, `HEAD`, or `OPTIONS`.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IsAuthenticatedOrReadOnly`: 完全访问认证用户。匿名用户仅允许执行读取方法，如`GET`、`HEAD`或`OPTIONS`。'
- en: '`DjangoModelPermissions`: Permissions tied to `django.contrib.auth`. The view
    requires a `queryset` attribute. Only authenticated users with model permissions
    assigned are granted permission.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DjangoModelPermissions`: 与`django.contrib.auth`相关的权限。视图需要一个`queryset`属性。只有被分配了模型权限的认证用户才被授予权限。'
- en: '`DjangoObjectPermissions`: Django permissions on a per-object basis.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DjangoObjectPermissions`: 基于对象的Django权限。'
- en: 'If users are denied permission, they will usually get one of the following
    HTTP error codes:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户被拒绝权限，他们通常会收到以下HTTP错误代码之一：
- en: '`HTTP 401`: Unauthorized'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTTP 401`: 未授权'
- en: '`HTTP 403`: Permission denied'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTTP 403`: 权限被拒绝'
- en: You can read more information about permissions at [https://www.django-rest-framework.org/api-guide/permissions/](https://www.django-rest-framework.org/api-guide/permissions/).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.django-rest-framework.org/api-guide/permissions/](https://www.django-rest-framework.org/api-guide/permissions/)上阅读有关权限的更多信息。
- en: 'Edit the `api/views.py` file of the `courses` application and add a `permission_classes`
    attribute to `CourseEnrollView`, as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses`应用的`api/views.py`文件，并将`permission_classes`属性添加到`CourseEnrollView`中，如下所示：
- en: '[PRE39]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: You include the `IsAuthenticated` permission. This will prevent anonymous users
    from accessing the view. Now, you can perform a `POST` request to your new API
    method.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 您包含了`IsAuthenticated`权限。这将阻止匿名用户访问视图。现在，您可以向新的API方法发送一个`POST`请求。
- en: 'Make sure the development server is running. Open the shell and run the following
    command:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 确保开发服务器正在运行。打开shell并运行以下命令：
- en: '[PRE40]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You will get the following response:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到以下响应：
- en: '[PRE41]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You got a `401` HTTP code as expected, since you are not authenticated. Let’s
    use basic authentication with one of your users. Run the following command, replacing
    `student:password` with the credentials of an existing user:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期，您得到了`401` HTTP代码，因为您尚未认证。让我们使用基本认证，使用您的其中一个用户。运行以下命令，将`student:password`替换为现有用户的凭证：
- en: '[PRE42]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You will get the following response:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到以下响应：
- en: '[PRE43]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: You can access the administration site and check that the user is now enrolled
    in the course.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以访问管理站点并检查用户是否已注册课程。
- en: Adding additional actions to ViewSets
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向ViewSets添加额外操作
- en: 'You can add extra actions to `ViewSets`. Let’s change the `CourseEnrollView`
    view into a custom `ViewSet` action. Edit the `api/views.py` file and modify the
    `CourseViewSet` class to look as follows:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向`ViewSets`添加额外的操作。让我们将`CourseEnrollView`视图改为自定义`ViewSet`操作。编辑`api/views.py`文件，并将`CourseViewSet`类修改如下：
- en: '[PRE44]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In the preceding code, you add a custom `enroll()` method that represents an
    additional action for this `ViewSet`. The preceding code is as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，您添加了一个自定义的`enroll()`方法，代表此`ViewSet`的附加操作。前面的代码如下：
- en: You use the `action` decorator of the framework with the parameter `detail=True`
    to specify that this is an action to be performed on a single object.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您使用框架的`action`装饰器，并设置参数`detail=True`来指定这是一个针对单个对象执行的操作。
- en: The decorator allows you to add custom attributes for the action. You specify
    that only the `post()` method is allowed for this view and set the authentication
    and permission classes.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该装饰器允许您为操作添加自定义属性。您指定仅允许此视图的`post()`方法，并设置认证和权限类。
- en: You use `self.get_object()` to retrieve the `Course` object.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您使用`self.get_object()`来检索`Course`对象。
- en: You add the current user to the `students` many-to-many relationship and return
    a custom success response.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将当前用户添加到`students`多对多关系，并返回一个自定义成功响应。
- en: 'Edit the `api/urls.py` file and remove or comment out the following URL, since
    you don’t need it anymore:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`api/urls.py`文件，删除或注释掉以下URL，因为您不再需要它：
- en: '[PRE45]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Then, edit the `api/views.py` file and remove or comment out the `CourseEnrollView`
    class.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，编辑`api/views.py`文件，删除或注释掉`CourseEnrollView`类。
- en: The URL to enroll on courses is now automatically generated by the router. The
    URL remains the same, since it’s built dynamically using the action name `enroll`.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 注册课程的URL现在由路由器自动生成。URL保持不变，因为它是通过使用动作名称`enroll`动态构建的。
- en: After students are enrolled in a course, they need to access the course’s content.
    Next, you are going to learn how to ensure only students who have enrolled can
    access the course.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 学生注册课程后，需要访问课程内容。接下来，您将学习如何确保只有注册的学生才能访问课程。
- en: Creating custom permissions
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义权限
- en: 'You want students to be able to access the contents of the courses they are
    enrolled on. Only students enrolled on a course should be able to access its contents.
    The best way to do this is with a custom permission class. DRF provides a `BasePermission`
    class that allows you to define the following methods:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望学生能够访问他们注册的课程内容。只有注册了课程的学生才能访问其内容。最佳方式是使用自定义权限类。DRF提供了一个`BasePermission`类，允许您定义以下方法：
- en: '`has_permission()`: A view-level permission check'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_permission()`：视图级别的权限检查'
- en: '`has_object_permission()`: An instance-level permission check'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_object_permission()`：实例级别的权限检查'
- en: These methods should return `True` to grant access, or `False` otherwise.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法应返回`True`以授予访问权限，否则返回`False`。
- en: 'Create a new file inside the `courses/api/` directory and name it `permissions.py`.
    Add the following code to it:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在`courses/api/`目录内创建一个新文件，并将其命名为`permissions.py`。向其中添加以下代码：
- en: '[PRE46]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: You subclass the `BasePermission` class and override the `has_object_permission()`.
    You check that the user performing the request is present in the `students` relationship
    of the `Course` object. You are going to use the `IsEnrolled` permission next.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 您通过继承`BasePermission`类并重写`has_object_permission()`方法来创建子类。您检查执行请求的用户是否存在于`Course`对象的`students`关系中。您将使用`IsEnrolled`权限。
- en: Serializing course contents
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列化课程内容
- en: You need to serialize course contents. The `Content` model includes a generic
    foreign key that allows you to associate objects of different content models.
    Yet, you added a common `render()` method for all content models in the previous
    chapter. You can use this method to provide rendered content to your API.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要序列化课程内容。`Content`模型包含一个通用的外键，允许您关联不同内容模型的对象。然而，在前一章中，您为所有内容模型添加了一个通用的`render()`方法。您可以使用此方法向API提供渲染后的内容。
- en: 'Edit the `api/serializers.py` file of the `courses` application and add the
    following code to it:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses`应用的`api/serializers.py`文件，并向其中添加以下代码：
- en: '[PRE47]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: In this code, you define a custom field by subclassing the `RelatedField` serializer
    field provided by DRF and overriding the `to_representation()` method. You define
    the `ContentSerializer` serializer for the `Content` model and use the custom
    field for the `item` generic foreign key.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，您通过继承DRF提供的`RelatedField`序列化器字段并重写`to_representation()`方法来定义一个自定义字段。您为`Content`模型定义了`ContentSerializer`序列化器，并使用自定义字段为`item`通用外键。
- en: 'You need an alternative serializer for the `Module` model that includes its
    contents, as well as an extended `Course` serializer. Edit the `api/serializers.py`
    file and add the following code to it:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个替代序列化器，用于`Module`模型及其内容，以及扩展的`Course`序列化器。编辑`api/serializers.py`文件，并向其中添加以下代码：
- en: '[PRE48]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Let’s create a view that mimics the behavior of the `retrieve()` action but
    includes the course contents. Edit the `api/views.py` file and add the following
    method to the `CourseViewSet` class:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个视图，模拟`retrieve()`操作的行为，但包括课程内容。编辑`api/views.py`文件，并向`CourseViewSet`类中添加以下方法：
- en: '[PRE49]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The description of this method is as follows:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的描述如下：
- en: You use the `action` decorator with the parameter `detail=True` to specify an
    action that is performed on a single object.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您使用带有参数`detail=True`的`action`装饰器来指定对单个对象执行的操作。
- en: You specify that only the `GET` method is allowed for this action.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您指定仅允许对此操作使用`GET`方法。
- en: You use the new `CourseWithContentsSerializer` serializer class that includes
    rendered course contents.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您使用包含渲染后的课程内容的新的`CourseWithContentsSerializer`序列化器类。
- en: You use both `IsAuthenticated` and your custom `IsEnrolled` permissions. By
    doing so, you make sure that only users enrolled in the course are able to access
    its contents.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你使用`IsAuthenticated`和你的自定义`IsEnrolled`权限。通过这样做，你确保只有注册了课程的用户才能访问其内容。
- en: You use the existing `retrieve()` action to return the `Course` object.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你使用现有的`retrieve()`操作来返回`Course`对象。
- en: 'Open `http://127.0.0.1:8000/api/courses/1/contents/` in your browser. If you
    access the view with the right credentials, you will see that each module of the
    course includes the rendered HTML for course contents, as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开`http://127.0.0.1:8000/api/courses/1/contents/`。如果你使用正确的凭据访问视图，你会看到每个课程模块都包括课程内容的渲染HTML，如下所示：
- en: '[PRE50]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: You have built a simple API that allows other services to access the course
    application programmatically. DRF also allows you to handle creating and editing
    objects with the `ModelViewSet` class. We have covered the main aspects of DRF,
    but you will find further information about its features in its extensive documentation
    at [https://www.django-rest-framework.org/](https://www.django-rest-framework.org/).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经构建了一个简单的API，允许其他服务以编程方式访问课程应用程序。DRF还允许你使用`ModelViewSet`类处理创建和编辑对象。我们已经涵盖了DRF的主要方面，但你将在其广泛的文档中找到有关其功能的更多信息，文档位于[https://www.django-rest-framework.org/](https://www.django-rest-framework.org/)。
- en: Consuming the RESTful API
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消费RESTful API
- en: Now that you have implemented an API, you can consume it in a programmatic manner
    from other applications. You can interact with the API using the JavaScript Fetch
    API in the frontend of your application, in a similar fashion to the functionalities
    you built in *Chapter 6*, *Sharing Content on Your Website*. You can also consume
    the API from applications built with Python or any other programming language.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经实现了API，你可以从其他应用程序以编程方式消费它。你可以使用应用程序的前端JavaScript Fetch API与API交互，类似于你在*第6章*中构建的功能，*在您的网站上共享内容*。你也可以从用Python或任何其他编程语言构建的应用程序中消费API。
- en: You are going to create a simple Python application that uses the RESTful API
    to retrieve all available courses and then enroll a student in all of them. You
    will learn how to authenticate against the API using HTTP basic authentication
    and perform `GET` and `POST` requests.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建一个简单的Python应用程序，该程序使用RESTful API检索所有可用的课程，然后为学生注册所有这些课程。你将学习如何使用HTTP基本认证对API进行身份验证，并执行`GET`和`POST`请求。
- en: We will use the Python Requests library to consume the API. We used Requests
    in *Chapter 6*, *Sharing Content on Your Website*, to retrieve images by their
    URL. Requests abstracts the complexity of dealing with HTTP requests and provides
    a very simple interface to consume HTTP services. You can find the documentation
    for the Requests library at [https://requests.readthedocs.io/en/master/](https://requests.readthedocs.io/en/master/).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Python Requests库来消费API。我们在*第6章*，*在您的网站上共享内容*中使用了Requests来通过URL检索图像。Requests抽象了处理HTTP请求的复杂性，并提供了一个非常简单的接口来消费HTTP服务。你可以在[https://requests.readthedocs.io/en/master/](https://requests.readthedocs.io/en/master/)找到Requests库的文档。
- en: 'Open the shell and install the Requests library with the following command:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 打开shell，使用以下命令安装Requests库：
- en: '[PRE51]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Create a new directory next to the `educa` project directory and name it `api_examples`.
    Create a new file inside the `api_examples/` directory and name it `enroll_all.py`.
    The file structure should now look like this:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在`educa`项目目录旁边创建一个新的目录，并将其命名为`api_examples`。在`api_examples/`目录中创建一个新的文件，并将其命名为`enroll_all.py`。现在的文件结构应该如下所示：
- en: '[PRE52]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Edit the `enroll_all.py` file and add the following code to it:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`enroll_all.py`文件，并向其中添加以下代码：
- en: '[PRE53]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'In this code, you perform the following actions:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，你执行以下操作：
- en: You import the Requests library and define the base URL for the API and the
    URL for the course list API endpoint.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你导入Requests库并定义API的基础URL和课程列表API端点的URL。
- en: You define the `available_courses` empty list.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你定义了一个空的`available_courses`列表。
- en: You use a `while` statement to paginate over all result pages.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你使用`while`语句遍历所有结果页面。
- en: You use `requests.get()` to retrieve data from the API by sending a `GET` request
    to the URL `http://127.0.0.1:8000/api/courses/`. This API endpoint is publicly
    accessible, so it does not require any authentication.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你使用`requests.get()`通过向URL `http://127.0.0.1:8000/api/courses/` 发送`GET`请求来从API检索数据。此API端点是公开可访问的，因此不需要任何身份验证。
- en: You use the `json()` method of the response object to decode the JSON data returned
    by the API.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你使用响应对象的`json()`方法来解码API返回的JSON数据。
- en: You store the `next` attribute in the `url` variable to retrieve the next page
    of results in the `while` statement.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将`next`属性存储在`url`变量中，以便在`while`语句中检索下一页的结果。
- en: You add the `title` attribute of each course to the `available_courses` list.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将每个课程的`title`属性添加到`available_courses`列表中。
- en: When the `url` variable is `None`, you go to the latest page of results and
    you don’t retrieve any additional pages.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`url`变量为`None`时，你将转到结果列表的最新页面，并且不会检索任何额外的页面。
- en: You print the list of available courses.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你打印可用的课程列表。
- en: 'Start the development server from the `educa` project directory with the following
    command:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令从`educa`项目目录启动开发服务器：
- en: '[PRE54]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In another shell, run the following command from the `api_examples/` directory:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个shell中，从`api_examples/`目录运行以下命令：
- en: '[PRE55]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'You will see output with a list of all course titles, like this:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到如下列有所有课程标题的输出：
- en: '[PRE56]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: This is the first automated call to your API.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 这是向你的API发出的第一个自动化调用。
- en: 'Edit the `enroll_all.py` file and add the following lines highlighted in bold:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`enroll_all.py`文件，并添加以下加粗的行：
- en: '[PRE57]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Replace the values for the `username` and `password` variables with the credentials
    of an existing user, or load the values from environment variables. You can use
    `python-decouple`, as we did in the *Working with environment variables* section
    in *Chapter 2*, *Enhancing Your Blog and Adding Social Features*, to load credentials
    from environment variables.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 将`username`和`password`变量的值替换为现有用户的凭据，或者从环境变量中加载这些值。你可以使用我们在第2章“增强博客和添加社交功能”中的*使用环境变量*部分所用的`python-decouple`，从环境变量中加载凭据。
- en: 'With the new code, you perform the following actions:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新代码，你将执行以下操作：
- en: You define the username and password of the student you want to enroll in courses.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你定义你想要注册到课程的学生的用户名和密码。
- en: You iterate over the available courses retrieved from the API.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你遍历从API检索到的可用课程。
- en: You store the course ID attribute in the `course_id` variable and the `title`
    attribute in the `course_title` variable.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将课程ID属性存储在`course_id`变量中，将`title`属性存储在`course_title`变量中。
- en: You use `requests.post()` to send a `POST` request to the URL `http://127.0.0.1:8000/api/courses/[id]/enroll/`
    for each course. This URL corresponds to the `CourseEnrollView` API view, which
    allows you to enroll a user in a course. You build the URL for each course using
    the `course_id` variable. The `CourseEnrollView` view requires authentication.
    It uses the `IsAuthenticated` permission and the `BasicAuthentication` authentication
    class. The Requests library supports HTTP basic authentication out of the box.
    You use the `auth` parameter to pass a tuple with the username and password to
    authenticate the user, using HTTP basic authentication.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你使用`requests.post()`向URL `http://127.0.0.1:8000/api/courses/[id]/enroll/`发送每个课程的`POST`请求。这个URL对应于`CourseEnrollView`
    API视图，它允许你将用户注册到课程中。你使用`course_id`变量为每个课程构建URL。`CourseEnrollView`视图需要身份验证。它使用`IsAuthenticated`权限和`BasicAuthentication`身份验证类。Requests库支持开箱即用的HTTP基本身份验证。你使用`auth`参数传递一个包含用户名和密码的元组以使用HTTP基本身份验证来验证用户。
- en: If the status code of the response is `200 OK`, you print a message to indicate
    that the user has been successfully enrolled in the course.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果响应的状态码是`200 OK`，你将打印一条消息，表明用户已成功注册到课程中。
- en: You can use different kinds of authentication with Requests. You can find more
    information on authentication with Requests at [https://requests.readthedocs.io/en/master/user/authentication/](https://requests.readthedocs.io/en/master/user/authentication/).
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用不同的身份验证方式与Requests一起使用。你可以在[https://requests.readthedocs.io/en/master/user/authentication/](https://requests.readthedocs.io/en/master/user/authentication/)找到关于使用Requests进行身份验证的更多信息。
- en: 'Run the following command from the `api_examples/` directory:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 从`api_examples/`目录运行以下命令：
- en: '[PRE58]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'You will now see output like this:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将看到如下输出：
- en: '[PRE59]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Great! You have successfully enrolled the user in all available courses using
    the API. You will see a `Successfully enrolled` message for each course on the
    platform. As you can see, it’s very easy to consume the API from any other application.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！你已经使用API成功地将用户注册到所有可用的课程中。你将在平台上看到每个课程的`Successfully enrolled`消息。正如你所看到的，从任何其他应用程序中消费API非常简单。
- en: Summary
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to use DRF to build a RESTful API for your
    project. You created serializers and views for models, and you built custom API
    views. You also added authentication to your API and restricted access to API
    views using permissions. Next, you discovered how to create custom permissions,
    and you implemented `ViewSets` and routers. Finally, you used the Requests library
    to consume the API from an external Python script.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用 DRF 为你的项目构建 RESTful API。你为模型创建了序列化和视图，并构建了自定义 API 视图。你还为 API 添加了身份验证，并使用权限限制了
    API 视图的访问。接下来，你发现了如何创建自定义权限，并实现了 `ViewSets` 和路由器。最后，你使用 Requests 库从外部 Python 脚本中消费
    API。
- en: The next chapter will teach you how to build a chat server using Django Channels.
    You will implement asynchronous communication using WebSockets, and you will use
    Redis to set up a channel layer.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将教你如何使用 Django Channels 构建聊天服务器。你将使用 WebSockets 实现异步通信，并使用 Redis 设置通道层。
- en: Additional resources
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他资源
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源提供了与本章涵盖主题相关的附加信息：
- en: 'Source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter15](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter15)'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的源代码：[https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter15](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter15)
- en: 'REST framework website: [https://www.django-rest-framework.org/](https://www.django-rest-framework.org/)'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST 框架网站：[https://www.django-rest-framework.org/](https://www.django-rest-framework.org/)
- en: 'REST framework settings: [https://www.django-rest-framework.org/api-guide/settings/](https://www.django-rest-framework.org/api-guide/settings/)'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST 框架设置：[https://www.django-rest-framework.org/api-guide/settings/](https://www.django-rest-framework.org/api-guide/settings/)
- en: 'REST framework serializers: [https://www.django-rest-framework.org/api-guide/serializers/](https://www.django-rest-framework.org/api-guide/serializers/)'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST 框架序列化器：[https://www.django-rest-framework.org/api-guide/serializers/](https://www.django-rest-framework.org/api-guide/serializers/)
- en: 'REST framework renderers: [https://www.django-rest-framework.org/api-guide/renderers/](https://www.django-rest-framework.org/api-guide/renderers/)'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST 框架渲染器：[https://www.django-rest-framework.org/api-guide/renderers/](https://www.django-rest-framework.org/api-guide/renderers/)
- en: 'REST framework parsers: [https://www.django-rest-framework.org/api-guide/parsers/](https://www.django-rest-framework.org/api-guide/parsers/)'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST 框架解析器：[https://www.django-rest-framework.org/api-guide/parsers/](https://www.django-rest-framework.org/api-guide/parsers/)
- en: REST framework generic mixins and views – [https://www.django-rest-framework.org/api-guide/generic-views/](https://www.django-rest-framework.org/api-guide/generic-views/
    )
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST 框架通用混入和视图 - [https://www.django-rest-framework.org/api-guide/generic-views/](https://www.django-rest-framework.org/api-guide/generic-views/)
- en: 'Download `curl`: [https://curl.se/download.html](https://curl.se/download.html)'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载 `curl`：[https://curl.se/download.html](https://curl.se/download.html)
- en: 'Postman API platform: [https://www.getpostman.com/](https://www.getpostman.com/)'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Postman API 平台：[https://www.getpostman.com/](https://www.getpostman.com/)
- en: 'REST framework pagination: [https://www.django-rest-framework.org/api-guide/pagination/](https://www.django-rest-framework.org/api-guide/pagination/
    )'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST 框架分页：[https://www.django-rest-framework.org/api-guide/pagination/](https://www.django-rest-framework.org/api-guide/pagination/)
- en: 'REST framework serializer relations: [https://www.django-rest-framework.org/api-guide/relations/](https://www.django-rest-framework.org/api-guide/relations/)'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST 框架序列化器关系：[https://www.django-rest-framework.org/api-guide/relations/](https://www.django-rest-framework.org/api-guide/relations/)
- en: 'HTTP basic authentication: [https://en.wikipedia.org/wiki/Basic_access_authentication](https://en.wikipedia.org/wiki/Basic_access_authentication)'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP 基本身份验证：[https://en.wikipedia.org/wiki/Basic_access_authentication](https://en.wikipedia.org/wiki/Basic_access_authentication)
- en: 'REST framework authentication: [https://www.django-rest-framework.org/api-guide/authentication/](https://www.django-rest-framework.org/api-guide/authentication/)'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST 框架身份验证：[https://www.django-rest-framework.org/api-guide/authentication/](https://www.django-rest-framework.org/api-guide/authentication/)
- en: 'REST framework permissions: [https://www.django-rest-framework.org/api-guide/permissions/](https://www.django-rest-framework.org/api-guide/permissions/)'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST 框架权限：[https://www.django-rest-framework.org/api-guide/permissions/](https://www.django-rest-framework.org/api-guide/permissions/)
- en: 'REST framework `ViewSets`: [https://www.django-rest-framework.org/api-guide/viewsets/](https://www.django-rest-framework.org/api-guide/viewsets/)'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST 框架 `ViewSets`：[https://www.django-rest-framework.org/api-guide/viewsets/](https://www.django-rest-framework.org/api-guide/viewsets/)
- en: 'REST framework routers: [https://www.django-rest-framework.org/api-guide/routers/](https://www.django-rest-framework.org/api-guide/routers/)'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST 框架路由器：[https://www.django-rest-framework.org/api-guide/routers/](https://www.django-rest-framework.org/api-guide/routers/)
- en: 'Python Requests library documentation: [https://requests.readthedocs.io/en/master/](https://requests.readthedocs.io/en/master/)'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python Requests 库文档：[https://requests.readthedocs.io/en/master/](https://requests.readthedocs.io/en/master/)
- en: 'Authentication with the Requests library: [https://requests.readthedocs.io/en/master/user/authentication/](https://requests.readthedocs.io/en/master/user/authentication/)'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Requests 库进行身份验证：[https://requests.readthedocs.io/en/master/user/authentication/](https://requests.readthedocs.io/en/master/user/authentication/)
