- en: Chapter 11. User Authentication in Django
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。Django中的用户身份验证
- en: A significant percentage of modern, interactive websites allow some form of
    user interaction-from allowing simple comments on a blog, to full editorial control
    of articles on a news site. If a site offers any sort of ecommerce, authentication,
    and authorization of paying customers is essential.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现代互动网站的重要百分比允许某种形式的用户交互-从在博客上允许简单评论，到在新闻网站上完全控制文章的编辑。如果网站提供任何形式的电子商务，对付费客户进行身份验证和授权是必不可少的。
- en: Just managing users-lost usernames, forgotten passwords, and keeping information
    up to date-can be a real pain. As a programmer, writing an authentication system
    can be even worse.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅管理用户-忘记用户名、忘记密码和保持信息更新可能会是一个真正的痛苦。作为程序员，编写身份验证系统甚至可能更糟。
- en: Lucky for us, Django provides a default implementation for managing user accounts,
    groups, permissions, and cookie-based user sessions out of the box.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Django提供了默认实现来管理用户帐户、组、权限和基于cookie的用户会话。
- en: Like most things in Django, the default implementation is fully extendible and
    customizable to suit your project's needs. So let's jump right in.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 与Django中的大多数内容一样，默认实现是完全可扩展和可定制的，以满足项目的需求。所以让我们开始吧。
- en: Overview
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: The Django authentication system handles both authentication and authorization.
    Briefly, authentication verifies a user is who they claim to be, and authorization
    determines what an authenticated user is allowed to do. Here the term authentication
    is used to refer to both tasks.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Django身份验证系统处理身份验证和授权。简而言之，身份验证验证用户是否是他们声称的人，授权确定经过身份验证的用户被允许做什么。这里使用身份验证一词来指代这两个任务。
- en: 'The authentication system consists of:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证系统包括：
- en: Users
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户
- en: 'Permissions: Binary (yes/no) flags designating whether a user may perform a
    certain task'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限：二进制（是/否）标志，指示用户是否可以执行某项任务
- en: 'Groups: A generic way of applying labels and permissions to more than one user'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组：一种将标签和权限应用于多个用户的通用方法
- en: A configurable password hashing system
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可配置的密码哈希系统
- en: Forms for managing user authentication and authorization.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于管理用户身份验证和授权的表单。
- en: View tools for logging in users, or restricting content
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于登录用户或限制内容的视图工具
- en: A pluggable backend system
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可插拔的后端系统
- en: 'The authentication system in Django aims to be very generic and doesn''t provide
    some features commonly found in web authentication systems. Solutions for some
    of these common problems have been implemented in third-party packages:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Django中的身份验证系统旨在非常通用，并且不提供一些常见的Web身份验证系统中常见的功能。这些常见问题的解决方案已经在第三方软件包中实现：
- en: Password strength checking
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码强度检查
- en: Throttling of login attempts
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录尝试的限制
- en: Authentication against third-parties (OAuth, for example)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对第三方的身份验证（例如OAuth）
- en: Using the Django authentication system
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Django身份验证系统
- en: Django's authentication system in its default configuration has evolved to serve
    the most common project needs, handling a reasonably wide range of tasks, and
    has a careful implementation of passwords and permissions. For projects where
    authentication needs differ from the default, Django also supports extensive extension
    and customization of authentication.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Django的身份验证系统在其默认配置中已经发展到满足最常见的项目需求，处理了相当广泛的任务，并且对密码和权限进行了谨慎的实现。对于身份验证需求与默认设置不同的项目，Django还支持对身份验证进行广泛的扩展和定制。
- en: User objects
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户对象
- en: '`User` objects are the core of the authentication system. They typically represent
    the people interacting with your site and are used to enable things like restricting
    access, registering user profiles, associating content with creators and so on.
    Only one class of user exists in Django''s authentication framework, that is,
    `superusers` or admin `staff` users are just user objects with special attributes
    set, not different classes of user objects. The primary attributes of the default
    user are:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`User`对象是身份验证系统的核心。它们通常代表与您的站点交互的人，并用于启用诸如限制访问、注册用户配置文件、将内容与创建者关联等功能。在Django的身份验证框架中只存在一类用户，即`superusers`或管理员`staff`用户只是具有特殊属性设置的用户对象，而不是不同类别的用户对象。默认用户的主要属性是：'
- en: '`username`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “用户名”
- en: '`password`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “密码”
- en: '`email`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “电子邮件”
- en: '`first_name`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “名”
- en: '`last_name`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “姓”
- en: Creating superusers
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建超级用户
- en: 'Create superusers using the `createsuperuser` command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`createsuperuser`命令创建超级用户：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You will be prompted for a password. After you enter one, the user will be created
    immediately. If you leave off the `-username` or the `-email` options, it will
    prompt you for those values.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 系统将提示您输入密码。输入密码后，用户将立即创建。如果省略`-username`或`-email`选项，系统将提示您输入这些值。
- en: Creating users
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用户
- en: The simplest, and least error prone way to create and manage users is through
    the Django admin. Django also provides built in views and forms to allow users
    to log in and out and change their own password. We will be looking at user management
    via the admin and generic user forms a bit later in this chapter, but first, let's
    look at how we would handle user authentication directly.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和管理用户的最简单、最不容易出错的方法是通过Django管理员。Django还提供了内置的视图和表单，允许用户登录、退出和更改自己的密码。我们稍后将在本章中查看通过管理员和通用用户表单进行用户管理，但首先，让我们看看如何直接处理用户身份验证。
- en: 'The most direct way to create users is to use the included `create_user()`
    helper function:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用户的最直接方法是使用包含的`create_user()`辅助函数：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Changing passwords
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改密码
- en: 'Django does not store raw (clear text) passwords on the user model, but only
    a hash. Because of this, do not attempt to manipulate the password attribute of
    the user directly. This is why a helper function is used when creating a user.
    To change a user''s password, you have two options:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Django不会在用户模型上存储原始（明文）密码，而只会存储哈希值。因此，不要尝试直接操作用户的密码属性。这就是为什么在创建用户时使用辅助函数的原因。要更改用户的密码，您有两个选项：
- en: '`manage.py changepassword username` offers a method of changing a User''s password
    from the command line. It prompts you to change the password of a given user which
    you must enter twice. If they both match, the new password will be changed immediately.
    If you do not supply a user, the command will attempt to change the password of
    the user whose username matches the current system user.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manage.py changepassword username`提供了一种从命令行更改用户密码的方法。它会提示您更改给定用户的密码，您必须输入两次。如果两者匹配，新密码将立即更改。如果您没有提供用户，命令将尝试更改与当前系统用户匹配的用户的密码。'
- en: 'You can also change a password programmatically, using `set_password()`:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以使用`set_password()`以编程方式更改密码：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Changing a user's password will log out all their sessions if the `SessionAuthenticationMiddleware`
    is enabled.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更改用户的密码将注销其所有会话，如果启用了`SessionAuthenticationMiddleware`。
- en: Permissions and authorization
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限和授权
- en: 'Django comes with a simple permissions system. It provides a way to assign
    permissions to specific users and groups of users. It''s used by the Django admin
    site, but you''re welcome to use it in your own code. The Django admin site uses
    permissions as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Django带有一个简单的权限系统。它提供了一种将权限分配给特定用户和用户组的方法。它被Django管理站点使用，但欢迎您在自己的代码中使用它。Django管理站点使用权限如下：
- en: Access to view the *add* form and add an object is limited to users with the
    *add* permission for that type of object.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看*add*表单和添加对象的访问权限仅限于具有该类型对象的*add*权限的用户。
- en: Access to view the change list, view the *change* form and change an object
    is limited to users with the *change* permission for that type of object.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看更改列表，查看*change*表单和更改对象的访问权限仅限于具有该类型对象的*change*权限的用户。
- en: Access to delete an object is limited to users with the *delete* permission
    for that type of object.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除对象的访问权限仅限于具有该类型对象的*delete*权限的用户。
- en: 'Permissions can be set not only per type of object, but also per specific object
    instance. By using the `has_add_permission()`, `has_change_permission()` and `has_delete_permission()`
    methods provided by the `ModelAdmin` class, it''s possible to customize permissions
    for different object instances of the same type. `User` objects have two many-to-many
    fields: `groups` and `user_permissions`. `User` objects can access their related
    objects in the same way as any other Django model.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 权限不仅可以针对对象类型设置，还可以针对特定对象实例设置。通过使用`ModelAdmin`类提供的`has_add_permission()`、`has_change_permission()`和`has_delete_permission()`方法，可以为同一类型的不同对象实例自定义权限。`User`对象有两个多对多字段：`groups`和`user_permissions`。`User`对象可以像任何其他Django模型一样访问其相关对象。
- en: Default permissions
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认权限
- en: When `Django.contrib.auth` is listed in your `INSTALLED_APPS` setting, it will
    ensure that three default permissions-add, change, and delete-are created for
    each Django model defined in one of your installed applications. These permissions
    will be created for all new models each time you run `manage.py migrate`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当在您的`INSTALLED_APPS`设置中列出`Django.contrib.auth`时，它将确保为您安装的应用程序中定义的每个Django模型创建三个默认权限-添加、更改和删除。每次运行`manage.py
    migrate`时，这些权限将为所有新模型创建。
- en: Groups
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户组
- en: '`Django.contrib.auth.models.Group` models are a generic way of categorizing
    users so you can apply permissions, or some other label, to those users. A user
    can belong to any number of groups. A user in a group automatically has the permissions
    granted to that group. For example, if the group `Site editors` has the permission
    `can_edit_home_page`, any user in that group will have that permission.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`Django.contrib.auth.models.Group`模型是一种通用的方式，可以对用户进行分类，以便为这些用户应用权限或其他标签。用户可以属于任意数量的组。组中的用户将自动获得该组授予的权限。例如，如果组`站点编辑`具有权限`can_edit_home_page`，则该组中的任何用户都将具有该权限。'
- en: Beyond permissions, groups are a convenient way to categorize users to give
    them some label, or extended functionality. For example, you could create a group
    `Special users`, and you could write code that could, say, give them access to
    a members-only portion of your site, or send them members-only email messages.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 除了权限之外，用户组是一种方便的方式，可以对用户进行分类，给他们一些标签或扩展功能。例如，您可以创建一个名为`特殊用户`的用户组，并编写代码，例如，让他们访问站点的仅限会员部分，或者发送他们仅限会员的电子邮件。
- en: Programmatically creating permissions
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以编程方式创建权限
- en: 'While custom permissions can be defined within a model''s `Meta` class, you
    can also create permissions directly. For example, you can create the `can_publish`
    permission for a `BookReview` model in `books`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以在模型的`Meta`类中定义自定义权限，但也可以直接创建权限。例如，您可以在`books`中的`BookReview`模型中创建`can_publish`权限：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The permission can then be assigned to a `User` via its `user_permissions` attribute
    or to a `Group` via its `permissions` attribute.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以通过其`user_permissions`属性将权限分配给`User`，或者通过其`permissions`属性将权限分配给`Group`。
- en: Permission caching
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权限缓存
- en: The `ModelBackend` caches permissions on the `User` object after the first time
    they need to be fetched for a permissions check. This is typically fine for the
    request-response cycle since permissions are not typically checked immediately
    after they are added (in the admin, for example).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`ModelBackend`在首次需要获取权限进行权限检查后，会在`User`对象上缓存权限。这通常对于请求-响应周期来说是可以的，因为权限通常不会在添加后立即进行检查（例如在管理站点中）。'
- en: 'If you are adding permissions and checking them immediately afterward, in a
    test or view for example, the easiest solution is to re-fetch the `User` from
    the database. For example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在添加权限并立即进行检查，例如在测试或视图中，最简单的解决方案是重新从数据库中获取`User`。例如：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Authentication in web requests
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web请求中的身份验证
- en: 'Django uses sessions and middleware to hook the authentication system into
    `request` objects. These provide a `request.user` attribute on every request which
    represents the current user. If the current user has not logged in, this attribute
    will be set to an instance of `AnonymousUser`, otherwise it will be an instance
    of `User`. You can tell them apart with `is_authenticated()`, like so:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Django使用会话和中间件将认证系统连接到`request`对象。这些为每个请求提供了一个`request.user`属性，表示当前用户。如果当前用户没有登录，这个属性将被设置为`AnonymousUser`的一个实例，否则它将是`User`的一个实例。你可以用`is_authenticated()`来区分它们，就像这样：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How to log a user in
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何登录用户
- en: 'To log a user in, from a view, use `login()`. It takes an `HttpRequest` object
    and a `User` object. `login()` saves the user''s ID in the session, using Django''s
    session framework. Note that any data set during the anonymous session is retained
    in the session after a user logs in. This example shows how you might use both
    `authenticate()` and `login()`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要登录用户，从视图中使用`login()`。它接受一个`HttpRequest`对象和一个`User`对象。`login()`使用Django的会话框架在会话中保存用户的ID。请注意，匿名会话期间设置的任何数据在用户登录后仍保留在会话中。这个例子展示了你可能如何同时使用`authenticate()`和`login()`：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Calling** `authenticate()` **first**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**首先调用**`authenticate()` '
- en: When you're manually logging a user in, you must call `authenticate()` before
    you call `login()`. `authenticate()` sets an attribute on the `User` noting which
    authentication backend successfully authenticated that user, and this information
    is needed later during the login process. An error will be raised if you try to
    login a user object retrieved from the database directly.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当你手动登录用户时，你必须在调用`login()`之前调用`authenticate()`。`authenticate()`设置了一个属性，指示哪个认证后端成功地认证了该用户，这些信息在登录过程中稍后是需要的。如果你尝试直接从数据库中检索用户对象登录，将会引发错误。
- en: How to log a user out
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何注销用户
- en: 'To log out a user who has been logged in via `login()`, use `logout()` within
    your view. It takes an `HttpRequest` object and has no return value. Example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要注销通过`login()`登录的用户，使用`logout()`在你的视图中。它接受一个`HttpRequest`对象，没有返回值。例如：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that `logout()` doesn't throw any errors if the user wasn't logged in.
    When you call `logout()`, the session data for the current request is completely
    cleaned out. All existing data is removed. This is to prevent another person from
    using the same web browser to log in and have access to the previous user's session
    data.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果用户未登录，`logout()`不会抛出任何错误。当你调用`logout()`时，当前请求的会话数据将被完全清除。所有现有的数据都将被删除。这是为了防止另一个人使用相同的网络浏览器登录并访问先前用户的会话数据。
- en: If you want to put anything into the session that will be available to the user
    immediately after logging out, do that after calling `logout()`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想把任何东西放到会话中，用户在注销后立即可用，那就在调用`logout()`后这样做。
- en: Limiting access to logged-in users
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制已登录用户的访问
- en: The raw way
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原始方法
- en: 'The simple, raw way to limit access to pages is to check `request.user.is_authenticated()`
    and either redirect to a login page:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 限制访问页面的简单、原始方法是检查`request.user.is_authenticated()`，并重定向到登录页面：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '... or display an error message:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '...或显示错误消息：'
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The login_required decorator
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: login_required装饰器
- en: 'As a shortcut, you can use the convenient `login_required()` decorator:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 作为快捷方式，你可以使用方便的`login_required()`装饰器：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`login_required()` does the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`login_required()`做了以下事情：'
- en: 'If the user isn''t logged in, redirect to `LOGIN_URL`, passing the current
    absolute path in the query string. Example: `/accounts/login/?next=/reviews/3/`.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户未登录，重定向到`LOGIN_URL`，在查询字符串中传递当前的绝对路径。例如：`/accounts/login/?next=/reviews/3/`。
- en: If the user is logged in, execute the view normally. The view code is free to
    assume the user is logged in.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户已登录，正常执行视图。视图代码可以自由假设用户已登录。
- en: 'By default, the path that the user should be redirected to upon successful
    authentication is stored in a query string parameter called `next`. If you would
    prefer to use a different name for this parameter, `login_required()` takes an
    optional `redirect_field_name` parameter:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，用户在成功验证后应重定向到的路径存储在一个名为`next`的查询字符串参数中。如果你想使用不同的名称来使用这个参数，`login_required()`接受一个可选的`redirect_field_name`参数：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note that if you provide a value to `redirect_field_name`, you will most likely
    need to customize your login template as well, since the template context variable
    which stores the redirect path will use the value of `redirect_field_name` as
    its key rather than `next` (the default). `login_required()` also takes an optional
    `login_url` parameter. Example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你为`redirect_field_name`提供一个值，你很可能需要自定义你的登录模板，因为模板上下文变量存储重定向路径将使用`redirect_field_name`的值作为其键，而不是`next`（默认值）。`login_required()`还接受一个可选的`login_url`参数。例如：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Note that if you don''t specify the `login_url` parameter, you''ll need to
    ensure that the `LOGIN_URL` and your login view are properly associated. For example,
    using the defaults, add the following lines to your URLconf:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你没有指定`login_url`参数，你需要确保`LOGIN_URL`和你的登录视图正确关联。例如，使用默认值，将以下行添加到你的URLconf中：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `LOGIN_URL` also accepts view function names and named URL patterns. This
    allows you to freely remap your login view within your URLconf without having
    to update the setting.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`LOGIN_URL`也接受视图函数名称和命名的URL模式。这允许你在URLconf中自由重新映射你的登录视图，而不必更新设置。'
- en: '**Note:** The `login_required` decorator does NOT check the `is_active flag`
    on a user.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**`login_required`装饰器不会检查用户的`is_active`标志。'
- en: Limiting access to logged-in users that pass a test
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 限制已登录用户的访问，通过测试
- en: 'To limit access based on certain permissions or some other test, you''d do
    essentially the same thing as described in the previous section. The simple way
    is to run your test on `request.user` in the view directly. For example, this
    view checks to make sure the user has an email in the desired domain:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 基于某些权限或其他测试来限制访问，你需要做的基本上与前一节描述的一样。简单的方法是直接在视图中对`request.user`运行你的测试。例如，这个视图检查用户是否在所需的域中有电子邮件：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As a shortcut, you can use the convenient `user_passes_test` decorator:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 作为快捷方式，你可以使用方便的`user_passes_test`装饰器：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`user_passes_test()` takes a required argument: a callable that takes a `User`
    object and returns `True` if the user is allowed to view the page. Note that `user_passes_test()`
    does not automatically check that the `User` is not anonymous. `user_passes_test()`
    takes two optional arguments:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`user_passes_test()`需要一个必需的参数：一个接受`User`对象并在用户被允许查看页面时返回`True`的可调用对象。请注意，`user_passes_test()`不会自动检查`User`是否匿名。`user_passes_test()`接受两个可选参数：'
- en: '`login_url`. Lets you specify the URL that users who don''t pass the test will
    be redirected to. It may be a login page and defaults to `LOGIN_URL` if you don''t
    specify one.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`login_url`。允许您指定未通过测试的用户将被重定向到的URL。如果您不指定，则可能是登录页面，默认为`LOGIN_URL`。'
- en: '`redirect_field_name`. Same as for `login_required()`. Setting it to `None`
    removes it from the URL, which you may want to do if you are redirecting users
    that don''t pass the test to a non-login page where there''s no *next page*.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`redirect_field_name`。与`login_required()`相同。将其设置为`None`会将其从URL中删除，如果您将未通过测试的用户重定向到没有*下一页*的非登录页面，则可能需要这样做。'
- en: 'For example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The permission_required() decorator
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`permission_required()`装饰器'
- en: 'It''s a relatively common task to check whether a user has a particular permission.
    For that reason, Django provides a shortcut for that case-the `permission_required()`
    decorator:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 检查用户是否具有特定权限是一个相对常见的任务。因此，Django为这种情况提供了一个快捷方式-`permission_required()`装饰器：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Just like the `has_perm()` method, permission names take the form `<app label>.<permission
    codename>` (that is `reviews.can_vote` for a permission on a model in the `reviews`
    application). The decorator may also take a list of permissions. Note that `permission_required()`
    also takes an optional `login_url` parameter. Example:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`has_perm()`方法一样，权限名称采用`<app label>.<permission codename>`的形式（例如，`reviews.can_vote`表示`reviews`应用程序中模型的权限）。装饰器也可以接受一系列权限。请注意，`permission_required()`还接受一个可选的`login_url`参数。例如：
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As in the `login_required()` decorator, `login_url` defaults to `LOGIN_URL.`
    If the `raise_exception` parameter is given,the decorator will raise `PermissionDenied`,
    prompting the 403 (HTTP Forbidden) view instead of redirecting to the login page.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 与`login_required()`装饰器一样，`login_url`默认为`LOGIN_URL`。如果给出了`raise_exception`参数，装饰器将引发`PermissionDenied`，提示403（HTTP禁止）视图，而不是重定向到登录页面。
- en: Session invalidation on password change
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 密码更改时会话失效
- en: If your `AUTH_USER_MODEL` inherits from `AbstractBaseUser`, or implements its
    own `get_session_auth_hash()` method, authenticated sessions will include the
    hash returned by this function. In the `AbstractBaseUser` case, this is a **Hash
    Message Authentication Code** (**HMAC**) of the password field.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的`AUTH_USER_MODEL`继承自`AbstractBaseUser`，或者实现了自己的`get_session_auth_hash()`方法，经过身份验证的会话将包括此函数返回的哈希值。在`AbstractBaseUser`的情况下，这是密码字段的**哈希消息认证码**（**HMAC**）。
- en: If the `SessionAuthenticationMiddleware` is enabled, Django verifies that the
    hash sent along with each request matches the one that's computed server-side.
    This allows a user to log out of all of their sessions by changing their password.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了`SessionAuthenticationMiddleware`，Django会验证每个请求中发送的哈希值是否与服务器端计算的哈希值匹配。这允许用户通过更改密码注销所有会话。
- en: 'The default password change views included with Django, `Django.contrib.auth.views.password_change()`
    and the `user_change_password` view in the `Django.contrib.auth` admin, update
    the session with the new password hash so that a user changing their own password
    won''t log themselves out. If you have a custom password change view and wish
    to have similar behavior, use this function:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Django默认包含的密码更改视图，`Django.contrib.auth.views.password_change()`和`Django.contrib.auth`管理中的`user_change_password`视图，会使用新密码哈希更新会话，以便用户更改自己的密码时不会注销自己。如果您有自定义的密码更改视图，并希望具有类似的行为，请使用此函数：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This function takes the current request and the updated user object from which
    the new session hash will be derived and updates the session hash appropriately.
    Example usage:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数接受当前请求和更新的用户对象，从中派生新会话哈希，并适当更新会话哈希。例如用法：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Since `get_session_auth_hash()` is based on `SECRET_KEY`, updating your site
    to use a new secret will invalidate all existing sessions.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`get_session_auth_hash()`基于`SECRET_KEY`，更新站点以使用新的密钥将使所有现有会话无效。
- en: Authentication views
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证视图
- en: Django provides several views that you can use for handling login, logout, and
    password management. These make use of the built-in auth forms but you can pass
    in your own forms as well. Django provides no default template for the authentication
    views-however, the following template context is documented for each view.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了几个视图，您可以用来处理登录、注销和密码管理。这些视图使用内置的认证表单，但您也可以传入自己的表单。Django没有为认证视图提供默认模板-但是，每个视图的文档化模板上下文如下。
- en: 'There are different methods to implement these views in your project, however, the
    easiest and most common way is to include the provided URLconf in `Django.contrib.auth.urls`
    in your own URLconf, for example:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目中实现这些视图的方法有很多种，但是，最简单和最常见的方法是在您自己的URLconf中包含`Django.contrib.auth.urls`中提供的URLconf，例如：
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This will make each of the views available at a default URL (detailed in next
    section).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使每个视图都可以在默认URL上使用（在下一节中详细说明）。
- en: The built-in views all return a `TemplateResponse` instance, which allows you
    to easily customize the response data before rendering. Most built-in authentication
    views provide a URL name for easier reference.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 所有内置视图都返回一个`TemplateResponse`实例，这使您可以在渲染之前轻松自定义响应数据。大多数内置认证视图都提供了URL名称，以便更容易地引用。
- en: Login
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录
- en: Logs a user in.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 登录用户。
- en: '**Default URL: ** `/login/`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**默认URL：** `/login/`'
- en: '**Optional arguments:**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选参数：**'
- en: '`template_name`: The name of a template to display for the view used to log
    the user in. Defaults to `registration/login.html`.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template_name`：用于显示用户登录视图的模板的名称。默认为`registration/login.html`。'
- en: '`redirect_field_name`: The name of a `GET` field containing the URL to redirect
    to after login. Defaults to `next`.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`redirect_field_name`：包含登录后要重定向到的URL的`GET`字段的名称。默认为`next`。'
- en: '`authentication_form`: A callable (typically just a form class) to use for
    authentication. Defaults to `AuthenticationForm`.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`authentication_form`：用于身份验证的可调用对象（通常只是一个表单类）。默认为`AuthenticationForm`。'
- en: '`current_app`: A hint indicating which application contains the current view.
    See the namespaced URL resolution strategy for more information.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`current_app`：指示包含当前视图的应用程序的提示。有关更多信息，请参见命名空间URL解析策略。'
- en: '`extra_context`: A dictionary of context data that will be added to the default
    context data passed to the template.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_context`：一个上下文数据的字典，将被添加到传递给模板的默认上下文数据中。'
- en: 'Here''s what `login` does:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`login`的功能：
- en: If called via `GET`, it displays a login form that POSTs to the same URL. More
    on this in a bit.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果通过`GET`调用，它将显示一个登录表单，该表单提交到相同的URL。稍后会详细介绍。
- en: If called via `POST` with user submitted credentials, it tries to log the user
    in. If login is successful, the view redirects to the URL specified in `next`.
    If `next` isn't provided, it redirects to `LOGIN_REDIRECT_URL` (which defaults
    to `/accounts/profile/`). If login isn't successful, it redisplays the login form.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果通过用户提交的凭据调用`POST`，它尝试登录用户。如果登录成功，视图将重定向到`next`参数指定的URL。如果未提供`next`，它将重定向到`LOGIN_REDIRECT_URL`（默认为`/accounts/profile/`）。如果登录不成功，它重新显示登录表单。
- en: It's your responsibility to provide the HTML for the login template, called
    `registration/login.html` by default.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的责任为登录模板提供HTML，默认情况下称为`registration/login.html`。
- en: '**Template Context**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**模板上下文**'
- en: '`form`: A `Form` object representing the `AuthenticationForm`.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form`：代表`AuthenticationForm`的`Form`对象。'
- en: '`next`: The URL to redirect to after successful login. This may contain a query
    string, too.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`next`：成功登录后要重定向到的URL。这也可能包含查询字符串。'
- en: '`site`: The current `Site`, according to the `SITE_ID` setting. If you don''t
    have the site framework installed, this will be set to an instance of `RequestSite`,
    which derives the site name and domain from the current `HttpRequest`.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site`：根据`SITE_ID`设置，当前的`Site`。如果您没有安装站点框架，这将被设置为`RequestSite`的一个实例，它从当前的`HttpRequest`中派生站点名称和域。'
- en: '`site_name`: An alias for `site.name`. If you don''t have the site framework
    installed, this will be set to the value of `request.META[''SERVER_NAME'']`.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site_name`：`site.name`的别名。如果您没有安装站点框架，这将被设置为`request.META[''SERVER_NAME'']`的值。'
- en: If you'd prefer not to call the template `registration/login.html`, you can
    pass the `template_name` parameter via the extra arguments to the view in your
    URLconf.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不希望将模板称为`registration/login.html`，可以通过URLconf中视图的额外参数传递`template_name`参数。
- en: Logout
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注销
- en: Logs a user out.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 注销用户。
- en: '**Default URL: ** `/logout/`'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**默认URL：** `/logout/`'
- en: '**Optional arguments:**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选参数：**'
- en: '`next_page`: The URL to redirect to after logout.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`next_page`：注销后重定向的URL。'
- en: '`template_name`: The full name of a template to display after logging the user
    out. Defaults to `registration/logged_out.html` if no argument is supplied.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template_name`：在用户注销后显示的模板的完整名称。如果未提供参数，则默认为`registration/logged_out.html`。'
- en: '`redirect_field_name`: The name of a `GET` field containing the URL to redirect
    to after log out. Defaults to `next`. Overrides the `next_page` URL if the given
    `GET` parameter is passed.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`redirect_field_name`：包含注销后要重定向到的URL的`GET`字段的名称。默认为`next`。如果传递了给定的`GET`参数，则覆盖`next_page`
    URL。'
- en: '`current_app`: A hint indicating which application contains the current view.
    See the namespaced URL resolution strategy for more information.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`current_app`：指示包含当前视图的应用程序的提示。有关更多信息，请参见命名空间URL解析策略。'
- en: '`extra_context`: A dictionary of context data that will be added to the default
    context data passed to the template.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_context`：一个上下文数据的字典，将被添加到传递给模板的默认上下文数据中。'
- en: '**Template context:**'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**模板上下文：**'
- en: '`title`: The string *Logged out*, localized.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`：字符串*已注销*，已本地化。'
- en: '`site`: The current `Site`, according to the `SITE_ID` setting. If you don''t
    have the site framework installed, this will be set to an instance of `RequestSite`,
    which derives the site name and domain from the current `HttpRequest`.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site`：根据`SITE_ID`设置，当前的`Site`。如果您没有安装站点框架，这将被设置为`RequestSite`的一个实例，它从当前的`HttpRequest`中派生站点名称和域。'
- en: '`site_name`: An alias for `site.name`. If you don''t have the site framework
    installed, this will be set to the value of `request.META[''SERVER_NAME'']`.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site_name`：`site.name`的别名。如果您没有安装站点框架，这将被设置为`request.META[''SERVER_NAME'']`的值。'
- en: '`current_app`: A hint indicating which application contains the current view.
    See the namespaced URL resolution strategy for more information.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`current_app`：指示包含当前视图的应用程序的提示。有关更多信息，请参见命名空间URL解析策略。'
- en: '`extra_context`: A dictionary of context data that will be added to the default
    context data passed to the template.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_context`：一个上下文数据的字典，将被添加到传递给模板的默认上下文数据中。'
- en: Logout_then_login
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注销然后登录
- en: Logs a user out, then redirects to the login page.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 注销用户，然后重定向到登录页面。
- en: '**Default URL:** None provided.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 默认URL：未提供。
- en: '**Optional arguments:**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选参数：**'
- en: '`login_url`: The URL of the login page to redirect to. Defaults to `LOGIN_URL`
    if not supplied.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`login_url`：要重定向到的登录页面的URL。如果未提供，则默认为`LOGIN_URL`。'
- en: '`current_app`: A hint indicating which application contains the current view.
    See the namespaced URL resolution strategy for more information.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`current_app`：指示包含当前视图的应用程序的提示。有关更多信息，请参见命名空间URL解析策略。'
- en: '`extra_context`: A dictionary of context data that will be added to the default
    context data passed to the template.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_context`：一个上下文数据的字典，将被添加到传递给模板的默认上下文数据中。'
- en: Password_change
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改密码
- en: Allows a user to change their password.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 允许用户更改他们的密码。
- en: '**Default URL: ** `/password_change/`'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**默认URL：** `/password_change/`'
- en: '**Optional arguments:**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选参数：**'
- en: '`template_name`: The full name of a template to use for displaying the password
    change form. Defaults to `registration/password_change_form.html` if not supplied.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template_name`：用于显示更改密码表单的模板的完整名称。如果未提供，则默认为`registration/password_change_form.html`。'
- en: '`post_change_redirect`: The URL to redirect to after a successful password
    change.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post_change_redirect`：成功更改密码后要重定向到的URL。'
- en: '`password_change_form`: A custom *change password* form which must accept a
    `user` keyword argument. The form is responsible for actually changing the user''s
    password. Defaults to `PasswordChangeForm`.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password_change_form`：必须接受`user`关键字参数的自定义*更改密码*表单。该表单负责实际更改用户的密码。默认为`PasswordChangeForm`。'
- en: '`current_app`: A hint indicating which application contains the current view.
    See the namespaced URL resolution strategy for more information.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`current_app`：指示包含当前视图的应用程序的提示。有关更多信息，请参阅命名空间URL解析策略。'
- en: '`extra_context`: A dictionary of context data that will be added to the default
    context data passed to the template.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_context`：要添加到传递给模板的默认上下文数据的上下文数据字典。'
- en: '**Template context:**'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**模板上下文：**'
- en: '`form`: The password change form (see `password_change_form` from the preceding
    list).'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form`：密码更改表单（请参阅上面列表中的`password_change_form`）。'
- en: Password_change_done
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Password_change_done
- en: The page shown after a user has changed their password.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 用户更改密码后显示的页面。
- en: '**Default URL: ** `/password_change_done/`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**默认URL：** `/password_change_done/`'
- en: '**Optional arguments:**'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选参数：**'
- en: '`template_name`: The full name of a template to use. Defaults to `registration/password_change_done.html`
    if not supplied.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template_name`：要使用的模板的完整名称。如果未提供，默认为`registration/password_change_done.html`。'
- en: '`current_app`: A hint indicating which application contains the current view.
    See the namespaced URL resolution strategy for more information.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`current_app`：指示包含当前视图的应用程序的提示。有关更多信息，请参阅命名空间URL解析策略。'
- en: '`extra_context`: A dictionary of context data that will be added to the default
    context data passed to the template.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_context`：要添加到传递给模板的默认上下文数据的上下文数据字典。'
- en: Password_reset
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Password_reset
- en: Allows a user to reset their password by generating a one-time use link that
    can be used to reset the password, and sending that link to the user's registered
    email address.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 允许用户通过生成一次性使用链接来重置其密码，并将该链接发送到用户注册的电子邮件地址。
- en: If the email address provided does not exist in the system, this view won't
    send an email, but the user won't receive any error message either. This prevents
    information leaking to potential attackers. If you want to provide an error message
    in this case, you can subclass `PasswordResetForm` and use the `password_reset_form`
    argument.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供的电子邮件地址在系统中不存在，此视图不会发送电子邮件，但用户也不会收到任何错误消息。这可以防止信息泄霏给潜在的攻击者。如果您想在这种情况下提供错误消息，可以对`PasswordResetForm`进行子类化并使用`password_reset_form`参数。
- en: Users flagged with an unusable password aren't allowed to request a password
    reset to prevent misuse when using an external authentication source like LDAP.
    Note that they won't receive any error message since this would expose their account's
    existence but no mail will be sent either.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 标记为不可用密码的用户不允许请求密码重置，以防止在使用外部身份验证源（如LDAP）时被滥用。请注意，他们不会收到任何错误消息，因为这会暴露其帐户的存在，但也不会发送任何邮件。
- en: '**Default URL: ** `/password_reset/`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 默认URL：`/password_reset/`
- en: '**Optional arguments:**'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选参数：**'
- en: '`template_name`: The full name of a template to use for displaying the password
    reset form. Defaults to `registration/password_reset_form.html` if not supplied.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template_name`：用于显示密码重置表单的模板的完整名称。如果未提供，默认为`registration/password_reset_form.html`。'
- en: '`email_template_name`: The full name of a template to use for generating the
    email with the reset password link. Defaults to `registration/password_reset_email.html`
    if not supplied.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email_template_name`：用于生成带有重置密码链接的电子邮件的模板的完整名称。如果未提供，默认为`registration/password_reset_email.html`。'
- en: '`subject_template_name`: The full name of a template to use for the subject
    of the email with the reset password link. Defaults to `registration/password_reset_subject.txt`
    if not supplied.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subject_template_name`：用于重置密码链接电子邮件主题的模板的完整名称。如果未提供，默认为`registration/password_reset_subject.txt`。'
- en: '`password_reset_form`: Form that will be used to get the email of the user
    to reset the password for. Defaults to `PasswordResetForm`.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password_reset_form`：将用于获取要重置密码的用户的电子邮件的表单。默认为`PasswordResetForm`。'
- en: '`token_generator`: Instance of the class to check the one-time link. This will
    default to `default_token_generator`, it''s an instance of `Django.contrib.auth.tokens.PasswordResetTokenGenerator`.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`token_generator`：用于检查一次性链接的类的实例。默认为`default_token_generator`，它是`Django.contrib.auth.tokens.PasswordResetTokenGenerator`的实例。'
- en: '`post_reset_redirect`: The URL to redirect to after a successful password reset
    request.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post_reset_redirect`：成功重置密码请求后要重定向到的URL。'
- en: '`from_email`: A valid email address. By default, Django uses the `DEFAULT_FROM_EMAIL`.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from_email`：有效的电子邮件地址。默认情况下，Django使用`DEFAULT_FROM_EMAIL`。'
- en: '`current_app`: A hint indicating which application contains the current view.
    See the namespaced URL resolution strategy for more information.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`current_app`：指示包含当前视图的应用程序的提示。有关更多信息，请参阅命名空间URL解析策略。'
- en: '`extra_context`: A dictionary of context data that will be added to the default
    context data passed to the template.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_context`：要添加到传递给模板的默认上下文数据的上下文数据字典。'
- en: '`html_email_template_name`: The full name of a template to use for generating
    a `text/html` multipart email with the password reset link. By default, HTML email
    is not sent.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`html_email_template_name`：用于生成带有重置密码链接的`text/html`多部分电子邮件的模板的完整名称。默认情况下，不发送HTML电子邮件。'
- en: '**Template context:**'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**模板上下文：**'
- en: '`form`: The form (see `password_reset_form`) for resetting the user''s password.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form`：用于重置用户密码的表单（请参阅`password_reset_form`）。'
- en: '**Email template context:**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**电子邮件模板上下文：**'
- en: '`email`: An alias for `user.email`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`：`user.email`的别名'
- en: '`user`: The current `User`, according to the `email` form field. Only active
    users are able to reset their passwords (`User.is_active is True`).'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user`：根据`email`表单字段，当前的`User`。只有活动用户才能重置他们的密码（`User.is_active is True`）。'
- en: '`site_name`: An alias for `site.name`. If you don''t have the site framework
    installed, this will be set to the value of `request.META[''SERVER_NAME'']`.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site_name`：`site.name`的别名。如果没有安装站点框架，这将设置为`request.META[''SERVER_NAME'']`的值。'
- en: '`domain`: An alias for `site.domain`. If you don''t have the site framework
    installed, this will be set to the value of `request.get_host()`.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domain`：`site.domain`的别名。如果未安装站点框架，则将设置为`request.get_host()`的值。'
- en: '`protocol`: http or https'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`protocol`：http或https'
- en: '`uid`: The user''s primary key encoded in base 64.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uid`：用户的base 64编码的主键。'
- en: '`token`: Token to check that the reset link is valid.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`token`：用于检查重置链接是否有效的令牌。'
- en: 'Sample `registration/password_reset_email.html` (email body template):'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 示例`registration/password_reset_email.html`（电子邮件正文模板）：
- en: '[PRE22]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The same template context is used for subject template. Subject must be single
    line plain text string.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 主题模板使用相同的模板上下文。主题必须是单行纯文本字符串。
- en: Password_reset_done
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Password_reset_done
- en: The page shown after a user has been emailed a link to reset their password.
    This view is called by default if the `password_reset()` view doesn't have an
    explicit `post_reset_redirect` URL set. **Default URL: ** `/password_reset_done/`
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 用户收到重置密码链接的电子邮件后显示的页面。如果`password_reset()`视图没有显式设置`post_reset_redirect` URL，则默认调用此视图。**默认URL：**
    `/password_reset_done/`
- en: Note
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the email address provided does not exist in the system, the user is inactive,
    or has an unusable password, the user will still be redirected to this view but
    no email will be sent.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供的电子邮件地址在系统中不存在，用户处于非活动状态，或者密码无法使用，则用户仍将被重定向到此视图，但不会发送电子邮件。
- en: '**Optional arguments:**'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选参数：**'
- en: '`template_name`: The full name of a template to use. Defaults to `registration/password_reset_done.html`
    if not supplied.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template_name`：要使用的模板的完整名称。如果未提供，则默认为`registration/password_reset_done.html`。'
- en: '`current_app`: A hint indicating which application contains the current view.
    See the namespaced URL resolution strategy for more information.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`current_app`：提示当前视图所在的应用程序。有关更多信息，请参阅命名空间URL解析策略。'
- en: '`extra_context`: A dictionary of context data that will be added to the default
    context data passed to the template.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_context`：要添加到模板传递的默认上下文数据的上下文数据字典。'
- en: Password_reset_confirm
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Password_reset_confirm
- en: Presents a form for entering a new password.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个输入新密码的表单。
- en: '**Default URL: ** `/password_reset_confirm/`'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '**默认URL：** `/password_reset_confirm/`'
- en: '**Optional arguments:**'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选参数：**'
- en: '`uidb64`: The user''s id encoded in base 64\. Defaults to `None`.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uidb64`：用户ID以base 64编码。默认为`None`。'
- en: '`token`: Token to check that the password is valid. Defaults to `None`.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`token`：用于检查密码是否有效的令牌。默认为`None`。'
- en: '`template_name`: The full name of a template to display the confirm password
    view. Default value is `registration/password_reset_confirm.html`.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template_name`：要显示确认密码视图的模板的完整名称。默认值为`registration/password_reset_confirm.html`。'
- en: '`token_generator`: Instance of the class to check the password. This will default
    to `default_token_generator`, it''s an instance of `Django.contrib.auth.tokens.PasswordResetTokenGenerator`.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`token_generator`：用于检查密码的类的实例。这将默认为`default_token_generator`，它是`Django.contrib.auth.tokens.PasswordResetTokenGenerator`的实例。'
- en: '`set_password_form`: Form that will be used to set the password. Defaults to
    `SetPasswordForm`'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set_password_form`：将用于设置密码的表单。默认为`SetPasswordForm`'
- en: '`post_reset_redirect`: URL to redirect after the password reset done. Defaults
    to `None`.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post_reset_redirect`：密码重置完成后要重定向的URL。默认为`None`。'
- en: '`current_app`: A hint indicating which application contains the current view.
    See the namespaced URL resolution strategy for more information.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`current_app`：提示当前视图所在的应用程序。有关更多信息，请参阅命名空间URL解析策略。'
- en: '`extra_context`: A dictionary of context data that will be added to the default
    context data passed to the template.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_context`：要添加到模板传递的默认上下文数据的上下文数据字典。'
- en: '**Template context:**'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '**模板上下文：**'
- en: '`form`: The form (see `set_password_form` ) for setting the new user''s password.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form`：用于设置新用户密码的表单（参见`set_password_form`）。'
- en: '`validlink`: Boolean, True if the link (combination of `uidb64` and `token`)
    is valid or unused yet.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validlink`：布尔值，如果链接（`uidb64`和`token`的组合）有效或尚未使用，则为True。'
- en: Password_reset_complete
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Password_reset_complete
- en: Presents a view which informs the user that the password has been successfully
    changed.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 显示一个视图，通知用户密码已成功更改。
- en: '**Default URL: ** `/password_reset_complete/`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '**默认URL：** `/password_reset_complete/`'
- en: '**Optional arguments:**'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选参数：**'
- en: '`template_name`: The full name of a template to display the view. Defaults
    to `registration/password_reset_complete.html`.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template_name`：要显示视图的模板的完整名称。默认为`registration/password_reset_complete.html`。'
- en: '`current_app`: A hint indicating which application contains the current view.
    See the namespaced URL resolution strategy for more information.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`current_app`：提示当前视图所在的应用程序。有关更多信息，请参阅命名空间URL解析策略。'
- en: '`extra_context`: A dictionary of context data that will be added to the default
    context data passed to the template.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_context`：要添加到模板传递的默认上下文数据的上下文数据字典。'
- en: The redirect_to_login helper function
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`redirect_to_login`辅助函数'
- en: Django provides a convenient function, `redirect_to_login` that can be used
    in a view for implementing custom access control. It redirects to the login page,
    and then back to another URL after a successful login.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了一个方便的函数`redirect_to_login`，可用于在视图中实现自定义访问控制。它重定向到登录页面，然后在成功登录后返回到另一个URL。
- en: '**Required arguments:**'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**必需参数：**'
- en: '`next`: The URL to redirect to after a successful login.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`next`：成功登录后要重定向到的URL。'
- en: '**Optional arguments:**'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选参数：**'
- en: '`login_url`: The URL of the login page to redirect to. Defaults to `LOGIN_URL`
    if not supplied.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`login_url`：要重定向到的登录页面的URL。如果未提供，则默认为`LOGIN_URL`。'
- en: '`redirect_field_name`: The name of a `GET` field containing the URL to redirect
    to after log out. Overrides `next` if the given `GET` parameter is passed.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`redirect_field_name`：包含注销后要重定向到的URL的`GET`字段的名称。如果传递了给定的`GET`参数，则覆盖`next`。'
- en: Built-in forms
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内置表单
- en: If you don't want to use the built-in views, but want the convenience of not
    having to write forms for this functionality, the authentication system provides
    several built-in forms located in `Django.contrib.auth.forms` (*Table 11-1*).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用内置视图，但希望方便地不必为此功能编写表单，认证系统提供了位于`Django.contrib.auth.forms`中的几个内置表单（*表11-1*）。
- en: The built-in authentication forms make certain assumptions about the user model
    that they are working with. If you're using a custom User model, it may be necessary
    to define your own forms for the authentication system.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '内置的身份验证表单对其正在使用的用户模型做出了某些假设。如果您使用自定义用户模型，则可能需要为身份验证系统定义自己的表单。 '
- en: '| Form Name | Description |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| 表单名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `AdminPasswordChangeForm` | A form used in the admin interface to change
    a user''s password. Takes the `user` as the first positional argument. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `AdminPasswordChangeForm` | 用于在管理员界面更改用户密码的表单。以`user`作为第一个位置参数。 |'
- en: '| `AuthenticationForm` | A form for logging a user in. Takes `request` as its
    first positional argument, which is stored on the form instance for use by subclasses.
    |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `AuthenticationForm` | 用于登录用户的表单。以`request`作为其第一个位置参数，存储在子类中供使用。'
- en: '| `PasswordChangeForm` | A form for allowing a user to change their password.
    |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| `PasswordChangeForm` | 允许用户更改密码的表单。 |'
- en: '| `PasswordResetForm` | A form for generating and emailing a one-time use link
    to reset a user''s password. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| `PasswordResetForm` | 用于生成和发送一次性使用链接以重置用户密码的表单。 |'
- en: '| `SetPasswordForm` | A form that lets a user change their password without
    entering the old password. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| `SetPasswordForm` | 允许用户在不输入旧密码的情况下更改密码的表单。 |'
- en: '| `UserChangeForm` | A form used in the admin interface to change a user''s
    information and permissions. |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| `UserChangeForm` | 用于在管理员界面更改用户信息和权限的表单。 |'
- en: '| `UserCreationForm` | A form for creating a new user. |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| `UserCreationForm` | 用于创建新用户的表单。 |'
- en: 'Table 11.1: Django''s built-in authentication forms'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 表11.1：Django内置的身份验证表单
- en: Authenticating data in templates
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模板中验证数据
- en: The currently logged-in user and their permissions are made available in the
    template context when you use `RequestContext`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用`RequestContext`时，当前登录的用户及其权限将在模板上下文中提供。
- en: Users
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户
- en: When rendering a template `RequestContext`, the currently logged-in user, either
    a `User` instance or an `AnonymousUser` instance, is stored in the template variable
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在渲染模板`RequestContext`时，当前登录的用户，即`User`实例或`AnonymousUser`实例，存储在模板变量中
- en: '`{{ user }}`:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`{{ user }}`：'
- en: '[PRE23]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This template context variable is not available if a `RequestContext` is not
    being used.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未使用`RequestContext`，则此模板上下文变量不可用。
- en: Permissions
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权限
- en: The currently logged-in user's permissions are stored in the template variable
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当前登录用户的权限存储在模板变量中
- en: '`{{ perms }}`. This is an instance of `Django.contrib.auth.context_processors.PermWrapper`,
    which is a template-friendly proxy of permissions. In the `{{ perms }}` object,
    single-attribute lookup is a proxy to `User.has_module_perms`. This example would
    display `True` if the logged-in user had any permissions in the `foo` app:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`{{ perms }}`。这是`Django.contrib.auth.context_processors.PermWrapper`的实例，它是权限的模板友好代理。在`{{
    perms }}`对象中，单属性查找是`User.has_module_perms`的代理。如果已登录用户在`foo`应用程序中具有任何权限，则此示例将显示`True`：'
- en: '[PRE24]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Two-level-attribute lookup is a proxy to `User.has_perm`. This example would
    display `True` if the logged-in user had the permission `foo.can_vote`:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 两级属性查找是`User.has_perm`的代理。如果已登录用户具有权限`foo.can_vote`，则此示例将显示`True`：
- en: '[PRE25]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Thus, you can check permissions in template `{% if %}` statements:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以在模板中使用`{% if %}`语句检查权限：
- en: '[PRE26]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'It is possible to also look permissions up by `{% if in %}` statements. For
    example:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过`{% if in %}`语句查找权限。例如：
- en: '[PRE27]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Managing users in the admin
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在管理员中管理用户
- en: When you have both `Django.contrib.admin` and `Django.contrib.auth` installed,
    the admin provides a convenient way to view and manage users, groups, and permissions.
    Users can be created and deleted like any Django model. Groups can be created,
    and permissions can be assigned to users or groups. A log of user edits to models
    made within the admin is also stored and displayed.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 当您安装了`Django.contrib.admin`和`Django.contrib.auth`时，管理员提供了一种方便的方式来查看和管理用户、组和权限。用户可以像任何Django模型一样创建和删除。可以创建组，并且可以将权限分配给用户或组。还会存储和显示在管理员中对模型的用户编辑的日志。
- en: Creating users
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用户
- en: You should see a link to *Users* in the *Auth* section of the main admin index
    page. If you click this link, you should see the user management screen (*Figure
    11.1*).
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在主管理员索引页面的*Auth*部分中看到*Users*的链接。如果单击此链接，您应该看到用户管理屏幕（*图11.1*）。
- en: '![Creating users](img/image_11_001.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![创建用户](img/image_11_001.jpg)'
- en: 'Figure 11.1: Django admin user management screen'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1：Django管理员用户管理屏幕
- en: The *Add user* admin page is different than standard admin pages in that it
    requires you to choose a username and password before allowing you to edit the
    rest of the user's fields (*Figure 11.2*).
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '*添加用户*管理员页面与标准管理员页面不同，它要求您在允许编辑用户其余字段之前选择用户名和密码（*图11.2*）。'
- en: Note
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want a user account to be able to create users using the Django admin
    site, you'll need to give them permission to add users and change users (that
    is, the *Add user* and *Change user* permissions). If an account has permission
    to add users but not to change them, that account won't be able to add users.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要求用户帐户能够使用Django管理员网站创建用户，则需要给他们添加用户和更改用户的权限（即*添加用户*和*更改用户*权限）。如果帐户有添加用户的权限但没有更改用户的权限，则该帐户将无法添加用户。
- en: Why? Because if you have permission to add users, you have the power to create
    superusers, which can then, in turn, change other users. So Django requires add
    and change permissions as a slight security measure.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？因为如果您有添加用户的权限，您就有创建超级用户的权限，然后可以改变其他用户。因此，Django要求添加和更改权限作为一种轻微的安全措施。
- en: '![Creating users](img/image_11_002.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![创建用户](img/image_11_002.jpg)'
- en: 'Figure 11.2: Django admin add user screen'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2：Django管理员添加用户屏幕
- en: Changing passwords
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改密码
- en: User passwords are not displayed in the admin (nor stored in the database),
    but the password storage details are displayed. Included in the display of this
    information is a link to a password change form that allows admins to change user
    passwords (*Figure 11.3*).
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 用户密码不会在管理员界面中显示（也不会存储在数据库中），但密码存储细节会显示出来。在这些信息的显示中包括一个链接到一个密码更改表单，允许管理员更改用户密码（*图11.3*）。
- en: '![Changing passwords](img/image_11_003.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![更改密码](img/image_11_003.jpg)'
- en: 'Figure 11.3: Link to change password (circled)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3：更改密码的链接（已圈出）
- en: Once you click the link, you will be taken to the change password form (*Figure
    11.4*).
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 点击链接后，您将进入更改密码表单（*图11.4*）。
- en: '![Changing passwords](img/image_11_004.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![更改密码](img/image_11_004.jpg)'
- en: 'Figure 11.4: Django admin change password form'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4：Django管理员更改密码表单
- en: Password management in Django
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django中的密码管理
- en: Password management is something that should generally not be reinvented unnecessarily,
    and Django endeavors to provide a secure and flexible set of tools for managing
    user passwords. This document describes how Django stores passwords, how the storage
    hashing can be configured, and some utilities to work with hashed passwords.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 密码管理通常不应该被不必要地重新发明，Django致力于为管理用户密码提供安全和灵活的工具集。本文档描述了Django如何存储密码，如何配置存储哈希，以及一些用于处理哈希密码的实用工具。
- en: How Django stores passwords
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django如何存储密码
- en: 'Django provides a flexible password storage system and uses **PBKDF2** (for
    more information visit [http://en.wikipedia.org/wiki/PBKDF2](http://en.wikipedia.org/wiki/PBKDF2))
    by default. The `password` attribute of a `User` object is a string in this format:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了灵活的密码存储系统，并默认使用**PBKDF2**（更多信息请访问[http://en.wikipedia.org/wiki/PBKDF2](http://en.wikipedia.org/wiki/PBKDF2)）。`User`对象的`password`属性是以这种格式的字符串：
- en: '[PRE28]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Those are the components used for storing a User''s password, separated by
    the dollar-sign character and consist of: the hashing algorithm, the number of
    algorithm iterations (work factor), the random salt, and the resulting password
    hash.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是用于存储用户密码的组件，由美元符号分隔，并包括：哈希算法、算法迭代次数（工作因子）、随机盐和生成的密码哈希。
- en: 'The algorithm is one of a number of one-way hashing or password storage algorithms
    Django can use (see the following code). Iterations describe the number of times
    the algorithm is run over the hash. Salt is the random seed used and the hash
    is the result of the one-way function. By default, Django uses the PBKDF2 algorithm
    with a SHA256 hash, a password stretching mechanism recommended by NIST(for more
    information visit [http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf](http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf)).
    This should be sufficient for most users: it''s quite secure, requiring massive
    amounts of computing time to break. However, depending on your requirements, you
    may choose a different algorithm, or even use a custom algorithm to match your
    specific security situation. Again, most users shouldn''t need to do this-if you''re
    not sure, you probably don''t.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法是Django可以使用的一系列单向哈希或密码存储算法之一（请参阅以下代码）。迭代描述了算法在哈希上运行的次数。盐是使用的随机种子，哈希是单向函数的结果。默认情况下，Django使用带有SHA256哈希的PBKDF2算法，这是NIST推荐的密码拉伸机制（更多信息请访问[http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf](http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf)）。这对大多数用户来说应该足够了：它非常安全，需要大量的计算时间才能破解。但是，根据您的要求，您可以选择不同的算法，甚至使用自定义算法来匹配您特定的安全情况。再次强调，大多数用户不应该需要这样做-如果您不确定，您可能不需要。
- en: 'If you do, please read on: Django chooses the algorithm to use by consulting
    the `PASSWORD_HASHERS` setting. This is a list of hashing algorithm classes that
    this Django installation supports. The first entry in this list (that is, `settings.PASSWORD_HASHERS[0]`)
    will be used to store passwords, and all the other entries are valid hashers that
    can be used to check existing passwords.'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您这样做，请继续阅读：Django通过查询`PASSWORD_HASHERS`设置来选择要使用的算法。这是一个哈希算法类的列表，该Django安装支持。此列表中的第一个条目（即`settings.PASSWORD_HASHERS[0]`）将用于存储密码，而所有其他条目都是可以用于检查现有密码的有效哈希算法。
- en: 'This means that if you want to use a different algorithm, you''ll need to modify
    `PASSWORD_HASHERS` to list your preferred algorithm first in the list. The default
    for `PASSWORD_HASHERS` is:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果您想使用不同的算法，您需要修改`PASSWORD_HASHERS`，将您首选的算法列在列表的第一位。`PASSWORD_HASHERS`的默认值是：
- en: '[PRE29]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This means that Django will use PBKDF2 to store all passwords, but will support
    checking passwords stored with PBKDF2SHA1, Bcrypt, SHA1, and so on. The next few
    sections describe a couple of common ways advanced users may want to modify this
    setting.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着Django将使用PBKDF2来存储所有密码，但将支持检查使用PBKDF2SHA1、Bcrypt、SHA1等存储的密码。接下来的几节描述了高级用户可能希望修改此设置的一些常见方法。
- en: Using Bcrypt with Django
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Django的Bcrypt
- en: Bcrypt (for more information visit [http://en.wikipedia.org/wiki/Bcrypt](http://en.wikipedia.org/wiki/Bcrypt))
    is a popular password storage algorithm that's specifically designed for long-term
    password storage. It's not the default used by Django since it requires the use
    of third-party libraries, but since many people may want to use it, Django supports
    Bcrypt with minimal effort.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: Bcrypt（更多信息请访问[http://en.wikipedia.org/wiki/Bcrypt](http://en.wikipedia.org/wiki/Bcrypt)）是一种流行的密码存储算法，专门设计用于长期密码存储。它不是Django的默认算法，因为它需要使用第三方库，但由于许多人可能想要使用它，Django支持Bcrypt，而且只需很少的努力。
- en: 'To use Bcrypt as your default storage algorithm, do the following:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Bcrypt作为默认存储算法，请执行以下操作：
- en: Install the `bcrypt` library. This can be done by running `pip install Django[bcrypt]`,
    or by downloading the library and installing it with `python setup.py install`.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`bcrypt`库。可以通过运行`pip install Django[bcrypt]`来完成，或者通过下载该库并使用`python setup.py
    install`进行安装。
- en: 'Modify `PASSWORD_HASHERS` to list `BCryptSHA256PasswordHasher` first. That
    is, in your settings file, you''d put:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`PASSWORD_HASHERS`，将`BCryptSHA256PasswordHasher`列在第一位。也就是说，在您的设置文件中，您需要添加：
- en: '[PRE30]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: (You need to keep the other entries in this list, or else Django won't be able
    to upgrade passwords; see the following section).
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: （您需要保留此列表中的其他条目，否则Django将无法升级密码；请参阅以下部分）。
- en: That's it-now your Django install will use Bcrypt as the default storage algorithm.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样-现在您的Django安装将使用Bcrypt作为默认存储算法。
- en: Password truncation with BCryptPasswordHasher
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: BCryptPasswordHasher的密码截断
- en: The designers of Bcrypt truncate all passwords at 72 characters which means
    that `bcrypt(password_with_100_chars) == bcrypt(password_with_100_chars[:72])`.
    The original `BCryptPasswordHasher` does not have any special handling and thus
    is also subject to this hidden password length limit. `BCryptSHA256PasswordHasher`
    fixes this by first hashing the password using sha256\. This prevents the password
    truncation and so should be preferred over the `BCryptPasswordHasher`.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: Bcrypt的设计者将所有密码截断为72个字符，这意味着`bcrypt（具有100个字符的密码）== bcrypt（具有100个字符的密码[:72]）`。
    原始的`BCryptPasswordHasher`没有任何特殊处理，因此也受到此隐藏密码长度限制的影响。 `BCryptSHA256PasswordHasher`通过首先使用sha256对密码进行哈希来修复此问题。
    这可以防止密码截断，因此应优先于`BCryptPasswordHasher`。
- en: The practical ramification of this truncation is pretty marginal as the average
    user does not have a password greater than 72 characters in length and even being
    truncated at 72, the compute powered required to brute force Bcrypt in any useful
    amount of time is still astronomical. Nonetheless, we recommend you use `BCryptSHA256PasswordHasher`
    anyway on the principle of *better safe than sorry*.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 这种截断的实际影响非常小，因为普通用户的密码长度不超过72个字符，即使在72个字符处被截断，以任何有用的时间内暴力破解Bcrypt所需的计算能力仍然是天文数字。
    尽管如此，我们仍建议您出于*宁愿安全也不要抱歉*的原则使用`BCryptSHA256PasswordHasher`。
- en: Other Bcrypt implementations
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他Bcrypt实现
- en: There are several other implementations that allow Bcrypt to be used with Django.
    Django's Bcrypt support is NOT directly compatible with these. To upgrade, you
    will need to modify the hashes in your database to be in the form `bcrypt$(raw
    bcrypt output)`.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种其他实现允许Bcrypt与Django一起使用。 Django的Bcrypt支持与这些实现不兼容。 要升级，您需要修改数据库中的哈希值，使其形式为`bcrypt$（原始bcrypt输出）`。
- en: Increasing the work factor
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增加工作因素
- en: The PBKDF2 and Bcrypt algorithms use a number of iterations or rounds of hashing.
    This deliberately slows down attackers, making attacks against hashed passwords
    harder. However, as computing power increases, the number of iterations needs
    to be increased.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: PBKDF2和Bcrypt算法使用多个迭代或哈希轮。 这故意减慢攻击者的速度，使攻击哈希密码变得更加困难。 但是，随着计算能力的增加，迭代次数需要增加。
- en: The Django development team have chosen a reasonable default (and will increase
    it with each release of Django), but you may wish to tune it up or down, depending
    on your security needs and available processing power. To do so, you'll subclass
    the appropriate algorithm and override the `iterations` parameters.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: Django开发团队选择了一个合理的默认值（并将在每个Django版本发布时增加），但您可能希望根据安全需求和可用处理能力进行调整。 要这样做，您将对适当的算法进行子类化，并覆盖`iterations`参数。
- en: 'For example, to increase the number of iterations used by the default PBKDF2
    algorithm:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要增加默认PBKDF2算法使用的迭代次数：
- en: 'Create a subclass of `Django.contrib.auth.hashers.PBKDF2PasswordHasher`:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Django.contrib.auth.hashers.PBKDF2PasswordHasher`的子类：
- en: '[PRE31]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Save this somewhere in your project. For example, you might put this in a file
    like `myproject/hashers.py`.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此保存在项目的某个位置。 例如，您可以将其放在类似`myproject/hashers.py`的文件中。
- en: 'Add your new hasher as the first entry in `PASSWORD_HASHERS`:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的哈希器添加为`PASSWORD_HASHERS`中的第一个条目：
- en: '[PRE32]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: That's it-now your Django install will use more iterations when it stores passwords
    using PBKDF2.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样-现在您的Django安装将在使用PBKDF2存储密码时使用更多迭代。
- en: Password upgrading
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码升级
- en: When users log in, if their passwords are stored with anything other than the
    preferred algorithm, Django will automatically upgrade the algorithm to the preferred
    one. This means that old installs of Django will get automatically more secure
    as users log in, and it also means that you can switch to new (and better) storage
    algorithms as they get invented.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户登录时，如果他们的密码存储使用的算法与首选算法不同，Django将自动升级算法为首选算法。 这意味着旧版Django将随着用户登录自动变得更安全，也意味着您可以在发明新的（更好的）存储算法时切换到新的存储算法。
- en: However, Django can only upgrade passwords that use algorithms mentioned in
    `PASSWORD_HASHERS`, so as you upgrade to new systems you should make sure never
    to *remove* entries from this list. If you do, users using unmentioned algorithms
    won't be able to upgrade. Passwords will be upgraded when changing the PBKDF2
    iteration count.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，Django只能升级使用`PASSWORD_HASHERS`中提到的算法的密码，因此在升级到新系统时，您应确保永远不要*删除*此列表中的条目。 如果这样做，使用未提及算法的用户将无法升级。
    更改PBKDF2迭代计数时将升级密码。
- en: Manually managing a user's password
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动管理用户的密码
- en: The `Django.contrib.auth.hashers` module provides a set of functions to create
    and validate hashed password. You can use them independently from the `User` model.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`Django.contrib.auth.hashers`模块提供了一组函数来创建和验证哈希密码。 您可以独立于`User`模型使用它们。'
- en: 'If you''d like to manually authenticate a user by comparing a plain-text password
    to the hashed password in the database, use the function `check_password()`. It
    takes two arguments: the plain-text password to check, and the full value of a
    user''s `password` field in the database to check against, and returns `True`
    if they match, `False` otherwise.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要通过比较数据库中的哈希密码和明文密码手动验证用户，请使用`check_password()`函数。 它接受两个参数：要检查的明文密码和要检查的数据库中用户`password`字段的完整值，并在它们匹配时返回`True`，否则返回`False`。
- en: '`make_password()` creates a hashed password in the format used by this application.
    It takes one mandatory argument: the password in plain-text.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`make_password()`创建了一个使用此应用程序的格式的哈希密码。 它接受一个必需参数：明文密码。'
- en: 'Optionally, you can provide a salt and a hashing algorithm to use, if you don''t
    want to use the defaults (first entry of `PASSWORD_HASHERS` setting). Currently
    supported algorithms are: `''pbkdf2_sha256''`, `''pbkdf2_sha1''`, `''bcrypt_sha256''`,
    `''bcrypt''`, `''sha1''`, `''md5''`, `''unsalted_md5''` (only for backward compatibility)
    and `''crypt''` if you have the `crypt` library installed.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用默认值（`PASSWORD_HASHERS`设置的第一个条目），可以选择提供盐和哈希算法来使用。当前支持的算法有：`'pbkdf2_sha256'`、`'pbkdf2_sha1'`、`'bcrypt_sha256'`、`'bcrypt'`、`'sha1'`、`'md5'`、`'unsalted_md5'`（仅用于向后兼容）和`'crypt'`（如果已安装`crypt`库）。
- en: If the password argument is `None`, an unusable password is returned (one that
    will be never accepted by `check_password()`).
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 如果密码参数为`None`，则返回一个不可用的密码（永远不会被`check_password()`接受的密码）。
- en: '`is_password_usable()` checks if the given string is a hashed password that
    has a chance of being verified against `check_password()`.'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`is_password_usable()`检查给定的字符串是否是一个经过哈希处理的密码，有可能通过`check_password()`进行验证。'
- en: Customizing authentication in Django
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Django中自定义身份验证
- en: The authentication that comes with Django is good enough for most common cases,
    but you may have needs not met by the out-of-the-box defaults. To customize authentication
    to your projects needs involves understanding what points of the provided system
    are extensible or replaceable.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: Django自带的身份验证对于大多数常见情况已经足够好，但您可能有一些默认设置无法满足的需求。要根据项目的需求自定义身份验证，需要了解所提供系统的哪些部分是可扩展或可替换的。
- en: Authentication backends provide an extensible system for when a username and
    password stored with the User model need to be authenticated against a different
    service than Django's default. You can give your models custom permissions that
    can be checked through Django's authorization system. You can extend the default
    User model, or substitute a completely customized model.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证后端提供了一个可扩展的系统，用于当需要对与用户模型中存储的用户名和密码进行身份验证的服务进行不同于Django默认的身份验证时。您可以为您的模型提供自定义权限，可以通过Django的授权系统进行检查。您可以扩展默认的用户模型，或者替换完全自定义的模型。
- en: Other authentication sources
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他身份验证源
- en: There may be times you have the need to hook into another authentication source-that
    is, another source of usernames and passwords or authentication methods.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能需要连接到另一个身份验证源，即另一个用户名和密码或身份验证方法的源。
- en: For example, your company may already have an LDAP setup that stores a username
    and password for every employee. It'd be a hassle for both the network administrator
    and the users themselves if users had separate accounts in LDAP and the Django-based
    applications.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您的公司可能已经设置了一个LDAP，用于存储每个员工的用户名和密码。如果用户在LDAP和基于Django的应用程序中有单独的帐户，这对网络管理员和用户本身都是一种麻烦。
- en: So, to handle situations like this, the Django authentication system lets you
    plug in other authentication sources. You can override Django's default database-based
    scheme, or you can use the default system in tandem with other systems.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了处理这样的情况，Django身份验证系统允许您插入其他身份验证源。您可以覆盖Django的默认基于数据库的方案，或者您可以与其他系统一起使用默认系统。
- en: Specifying authentication backends
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定身份验证后端
- en: Behind the scenes, Django maintains a list of authentication backends that it
    checks for authentication. When somebody calls `authenticate()`-as described in
    the previous section on logging a user in-Django tries authenticating across all
    of its authentication backends. If the first authentication method fails, Django
    tries the second one, and so on, until all backends have been attempted.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，Django维护一个身份验证后端列表，用于进行身份验证检查。当有人调用`authenticate()`时（如前一节中描述的登录用户），Django尝试在所有身份验证后端上进行身份验证。如果第一种身份验证方法失败，Django尝试第二种方法，依此类推，直到尝试了所有后端。
- en: 'The list of authentication backends to use is specified in the `AUTHENTICATION_BACKENDS`
    setting. This should be a list of Python path names that point to Python classes
    that know how to authenticate. These classes can be anywhere on your Python path.
    By default, `AUTHENTICATION_BACKENDS` is set to:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用的身份验证后端列表在`AUTHENTICATION_BACKENDS`设置中指定。这应该是一个指向知道如何进行身份验证的Python类的Python路径名称列表。这些类可以位于Python路径的任何位置。默认情况下，`AUTHENTICATION_BACKENDS`设置为：
- en: '[PRE33]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: That's the basic authentication backend that checks the Django users database
    and queries the built-in permissions. It does not provide protection against brute
    force attacks via any rate limiting mechanism. You may either implement your own
    rate limiting mechanism in a custom authorization backend, or use the mechanisms
    provided by most web servers. The order of `AUTHENTICATION_BACKENDS` matters,
    so if the same username and password is valid in multiple backends, Django will
    stop processing at the first positive match. If a backend raises a `PermissionDenied`
    exception, authentication will immediately fail. Django won't check the backends
    that follow.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 这是基本的身份验证后端，它检查Django用户数据库并查询内置权限。它不提供通过任何速率限制机制防止暴力攻击。您可以在自定义授权后端中实现自己的速率限制机制，或者使用大多数Web服务器提供的机制。`AUTHENTICATION_BACKENDS`的顺序很重要，因此如果相同的用户名和密码在多个后端中有效，Django将在第一个正面匹配时停止处理。如果后端引发`PermissionDenied`异常，身份验证将立即失败。Django不会检查后续的后端。
- en: Once a user has authenticated, Django stores which backend was used to authenticate
    the user in the user's session, and re-uses the same backend for the duration
    of that session whenever access to the currently authenticated user is needed.
    This effectively means that authentication sources are cached on a per-session
    basis, so if you change `AUTHENTICATION_BACKENDS`, you'll need to clear out session
    data if you need to force users to re-authenticate using different methods. A
    simple way to do that is simply to execute `Session.objects.all().delete()`.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 用户经过身份验证后，Django会在用户的会话中存储用于对用户进行身份验证的后端，并在需要访问当前经过身份验证的用户时重复使用相同的后端。这实际上意味着身份验证源是基于每个会话进行缓存的，因此如果您更改了`AUTHENTICATION_BACKENDS`，则需要清除会话数据，以便强制用户使用不同的方法重新进行身份验证。一个简单的方法就是执行`Session.objects.all().delete()`。
- en: Writing an authentication backend
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写认证后端
- en: 'An authentication backend is a class that implements two required methods:
    `get_user(user_id)` and `authenticate(**credentials)`, as well as a set of optional
    permission related authorization methods. The `get_user` method takes a `user_id`-which
    could be a username, database ID or whatever, but has to be the primary key of
    your `User` object-and returns a `User` object. The `authenticate` method takes
    credentials as keyword arguments. Most of the time, it''ll just look like this:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 认证后端是实现两个必需方法的类：`get_user(user_id)`和`authenticate(**credentials)`，以及一组可选的与权限相关的授权方法。`get_user`方法接受一个`user_id`（可以是用户名、数据库ID或其他任何内容，但必须是`User`对象的主键）并返回一个`User`对象。`authenticate`方法以关键字参数的形式接受凭据。大多数情况下，它看起来会像这样：
- en: '[PRE34]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'But it could also authenticate a token, like so:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 但它也可以验证令牌，如下所示：
- en: '[PRE35]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Either way, `authenticate` should check the credentials it gets, and it should
    return a `User` object that matches those credentials, if the credentials are
    valid. If they're not valid, it should return `None`. The Django admin system
    is tightly coupled to the Django `User` object described at the beginning of this
    chapter.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式，`authenticate`都应该检查它收到的凭据，并且如果凭据有效，它应该返回与这些凭据匹配的`User`对象。如果它们无效，它应该返回`None`。Django管理系统与本章开头描述的Django
    `User`对象紧密耦合。
- en: For now, the best way to deal with this is to create a Django `User` object
    for each user that exists for your backend (for example, in your LDAP directory,
    your external SQL database, and so on.) You can either write a script to do this
    in advance, or your `authenticate` method can do it the first time a user logs
    in.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，处理这个问题的最佳方法是为后端中存在的每个用户创建一个Django `User`对象（例如，在LDAP目录中，外部SQL数据库中等）。您可以提前编写一个脚本来执行此操作，或者您的`authenticate`方法可以在用户首次登录时执行此操作。
- en: 'Here''s an example backend that authenticates against a username and password
    variable defined in your `settings.py` file and creates a Django `User` object
    the first time a user authenticates:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例后端，它根据`settings.py`文件中定义的用户名和密码变量进行身份验证，并在用户首次进行身份验证时创建一个Django `User`对象：
- en: '[PRE36]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Handling authorization in custom backends
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理自定义后端中的授权
- en: Custom authorization backends can provide their own permissions. The user model
    will delegate permission lookup functions (`get_group_permissions()`, `get_all_permissions()`,
    `has_perm()`, and `has_module_perms()`) to any authentication backend that implements
    these functions. The permissions given to the user will be the superset of all
    permissions returned by all backends. That is, Django grants a permission to a
    user that any one backend grants.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义授权后端可以提供自己的权限。用户模型将权限查找功能（`get_group_permissions()`，`get_all_permissions()`，`has_perm()`和`has_module_perms()`）委托给实现这些功能的任何认证后端。用户获得的权限将是所有后端返回的权限的超集。换句话说，Django授予用户任何一个后端授予的权限。
- en: 'If a backend raises a `PermissionDenied` exception in `has_perm()` or `has_module_perms()`,
    the authorization will immediately fail and Django won''t check the backends that
    follow. The simple backend mentioned before could implement permissions for the
    admin fairly simply:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 如果后端在`has_perm()`或`has_module_perms()`中引发`PermissionDenied`异常，授权将立即失败，Django将不会检查后续的后端。前面提到的简单后端可以相当简单地为管理员实现权限：
- en: '[PRE37]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This gives full permissions to the user granted access in the preceding example.
    Notice that in addition to the same arguments given to the associated `User` functions,
    the backend authorization functions all take the user object, which may be an
    anonymous user, as an argument.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 这为在前面的示例中获得访问权限的用户提供了完全的权限。请注意，除了与相关的`User`函数给出的相同参数之外，后端授权函数都将匿名用户作为参数。
- en: A full authorization implementation can be found in the `ModelBackend` class
    in `Django/contrib/auth/backends.py`, which is the default backend and it queries
    the `auth_permission` table most of the time. If you wish to provide custom behavior
    for only part of the backend API, you can take advantage of Python inheritance
    and subclass `ModelBackend` instead of implementing the complete API in a custom
    backend.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的授权实现可以在`Django/contrib/auth/backends.py`中的`ModelBackend`类中找到，这是默认的后端，大部分时间查询`auth_permission`表。如果您希望仅为后端API的部分提供自定义行为，可以利用Python继承并子类化`ModelBackend`，而不是在自定义后端中实现完整的API。
- en: Authorization for anonymous users
  id: totrans-371
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匿名用户的授权
- en: An anonymous user is one that is not authenticated that is they have provided
    no valid authentication details. However, that does not necessarily mean they
    are not authorized to do anything. At the most basic level, most websites authorize
    anonymous users to browse most of the site, and many allow anonymous posting of
    comments and so on.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名用户是未经认证的用户，也就是说他们没有提供有效的认证详细信息。但是，这并不一定意味着他们没有获得任何授权。在最基本的级别上，大多数网站允许匿名用户浏览大部分网站，并且许多网站允许匿名发布评论等。
- en: Django's permission framework does not have a place to store permissions for
    anonymous users. However, the user object passed to an authentication backend
    may be an `Django.contrib.auth.models.AnonymousUser` object, allowing the backend
    to specify custom authorization behavior for anonymous users.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: Django的权限框架没有存储匿名用户的权限的地方。但是，传递给认证后端的用户对象可能是`Django.contrib.auth.models.AnonymousUser`对象，允许后端为匿名用户指定自定义授权行为。
- en: This is especially useful for the authors of re-usable apps, who can delegate
    all questions of authorization to the auth backend, rather than needing settings,
    for example, to control anonymous access.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于可重用应用程序的作者特别有用，他们可以将所有授权问题委托给认证后端，而不需要设置来控制匿名访问。
- en: Authorization for inactive users
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未激活用户的授权
- en: An inactive user is a one that is authenticated but has its attribute `is_active`
    set to `False`. However, this does not mean they are not authorized to do anything.
    For example, they are allowed to activate their account.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 未激活用户是已经认证但其属性`is_active`设置为`False`的用户。但是，这并不意味着他们没有获得任何授权。例如，他们被允许激活他们的帐户。
- en: The support for anonymous users in the permission system allows for a scenario
    where anonymous users have permissions to do something while inactive authenticated
    users do not. Do not forget to test for the `is_active` attribute of the user
    in your own backend permission methods.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 权限系统中对匿名用户的支持允许匿名用户执行某些操作，而未激活的经过身份验证的用户则不行。不要忘记在自己的后端权限方法中测试用户的`is_active`属性。
- en: Handling object permissions
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理对象权限
- en: Django's permission framework has a foundation for object permissions, though
    there is no implementation for it in the core. That means that checking for object
    permissions will always return `False` or an empty list (depending on the check
    performed). An authentication backend will receive the keyword parameters `obj`
    and `user_obj` for each object related authorization method and can return the
    object level permission as appropriate.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: Django的权限框架为对象权限奠定了基础，尽管核心中没有对其进行实现。这意味着检查对象权限将始终返回`False`或空列表（取决于所执行的检查）。身份验证后端将为每个对象相关的授权方法接收关键字参数`obj`和`user_obj`，并根据需要返回对象级别的权限。
- en: Custom permissions
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义权限
- en: 'To create custom permissions for a given model object, use the `permissions`
    model Meta attribute. This example Task model creates three custom permissions,
    that is, actions users can or cannot do with Task instances, specific to your
    application:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 要为给定模型对象创建自定义权限，请使用`permissions`模型Meta属性。这个示例任务模型创建了三个自定义权限，即用户可以或不可以对任务实例执行的操作，特定于您的应用程序：
- en: '[PRE38]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The only thing this does is create those extra permissions when you run `manage.py
    migrate`. Your code is in charge of checking the value of these permissions when
    a user is trying to access the functionality provided by the application (viewing
    tasks, changing the status of tasks, closing tasks.) Continuing the preceding
    example, the following checks if a user may view tasks:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的唯一作用是在运行`manage.py migrate`时创建这些额外的权限。当用户尝试访问应用程序提供的功能（查看任务，更改任务状态，关闭任务）时，您的代码负责检查这些权限的值。继续上面的示例，以下检查用户是否可以查看任务：
- en: '[PRE39]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Extending the existing user model
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展现有的用户模型
- en: There are two ways to extend the default `User` model without substituting your
    own model. If the changes you need are purely behavioral, and don't require any
    change to what is stored in the database, you can create a proxy model based on
    `User`. This allows for any of the features offered by proxy models including
    default ordering, custom managers, or custom model methods.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以扩展默认的`User`模型，而不替换自己的模型。如果您需要的更改纯粹是行为上的，并且不需要对数据库中存储的内容进行任何更改，可以创建一个基于`User`的代理模型。这允许使用代理模型提供的任何功能，包括默认排序、自定义管理器或自定义模型方法。
- en: 'If you wish to store information related to `User`, you can use a one-to-one
    relationship to a model containing the fields for additional information. This
    one-to-one model is often called a profile model, as it might store non-auth related
    information about a site user. For example, you might create an Employee model:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望存储与“用户”相关的信息，可以使用一个一对一的关系到一个包含额外信息字段的模型。这个一对一模型通常被称为配置文件模型，因为它可能存储有关站点用户的非认证相关信息。例如，您可以创建一个员工模型：
- en: '[PRE40]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Assuming an existing Employee Fred Smith who has both a User and Employee model,
    you can access the related information using Django''s standard related model
    conventions:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已经存在一个名为Fred Smith的员工，他既有一个用户模型又有一个员工模型，您可以使用Django的标准相关模型约定访问相关信息：
- en: '[PRE41]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'To add a profile model''s fields to the user page in the admin, define an `InlineModelAdmin`
    (for this example, we''ll use a `StackedInline`) in your app''s `admin.py` and
    add it to a `UserAdmin` class which is registered with the `User` class:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 要将配置文件模型的字段添加到管理员中的用户页面中，可以在应用程序的`admin.py`中定义一个`InlineModelAdmin`（在本例中，我们将使用`StackedInline`），并将其添加到注册了`User`类的`UserAdmin`类中：
- en: '[PRE42]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: These profile models are not special in any way-they are just Django models
    that happen to have a one-to-one link with a User model. As such, they do not
    get auto created when a user is created, but a `Django.db.models.signals.post_save`
    could be used to create or update related models as appropriate.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配置文件模型在任何方面都不特殊-它们只是恰好与用户模型有一对一的链接的Django模型。因此，它们在创建用户时不会自动创建，但可以使用`Django.db.models.signals.post_save`来创建或更新相关模型。
- en: Note that using related models results in additional queries or joins to retrieve
    the related data, and depending on your needs substituting the User model and
    adding the related fields may be your better option. However existing links to
    the default User model within your project's apps may justify the extra database
    load.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用相关模型会导致额外的查询或连接以检索相关数据，并且根据您的需求，替换用户模型并添加相关字段可能是更好的选择。但是，项目应用程序中对默认用户模型的现有链接可能会证明额外的数据库负载是合理的。
- en: Substituting a custom user model
  id: totrans-395
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替换自定义用户模型
- en: 'Some kinds of projects may have authentication requirements for which Django''s
    built-in `User` model is not always appropriate. For instance, on some sites it
    makes more sense to use an email address as your identification token instead
    of a username. Django allows you to override the default User model by providing
    a value for the `AUTH_USER_MODEL` setting that references a custom model:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 某些类型的项目可能对Django内置的`User`模型的身份验证要求不太合适。例如，在某些站点上，使用电子邮件地址作为您的标识令牌可能更有意义，而不是使用用户名。Django允许您通过为`AUTH_USER_MODEL`设置提供引用自定义模型的值来覆盖默认的用户模型：
- en: '[PRE43]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This dotted pair describes the name of the Django app (which must be in your
    `INSTALLED_APPS`), and the name of the Django model that you wish to use as your
    User model.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 这个点对描述了Django应用的名称（必须在`INSTALLED_APPS`中），以及您希望用作用户模型的Django模型的名称。
- en: Note
  id: totrans-399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Changing `AUTH_USER_MODEL` has a big effect on your Django project, particularly
    your database structure. For example, if you change your `AUTH_USER_MODEL` after
    you have run migrations, you will have to manually update your database because
    it affects the construction of many database table relationships. Unless there
    is a very good reason to do so, you should not change your `AUTH_USER_MODEL.`
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 更改`AUTH_USER_MODEL`对您的Django项目有很大影响，特别是对数据库结构。例如，如果在运行迁移后更改了`AUTH_USER_MODEL`，您将不得不手动更新数据库，因为它会影响许多数据库表关系的构建。除非有非常充分的理由这样做，否则不应更改您的`AUTH_USER_MODEL`。
- en: Notwithstanding the preceding warning, Django does fully support custom user
    models, however a full explanation is beyond the scope of this book. A full example
    of an admin-compliant custom user app, as well as comprehensive documentation
    on custom user models can be found on the Django Project website ([https://docs.Djangoproject.com/en/1.8/topics/auth/customizing/](https://docs.Djangoproject.com/en/1.8/topics/auth/customizing/)).
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面的警告，Django确实完全支持自定义用户模型，但是完整的解释超出了本书的范围。关于符合管理员标准的自定义用户应用的完整示例，以及关于自定义用户模型的全面文档可以在Django项目网站上找到（[https://docs.Djangoproject.com/en/1.8/topics/auth/customizing/](https://docs.Djangoproject.com/en/1.8/topics/auth/customizing/)）。
- en: What's next?
  id: totrans-402
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来呢？
- en: In this chapter, we have learned about user authentication in Django, the built-in
    authentication tools, as well as the wide range of customizations available. In
    the next chapter, we will be covering arguably the most important tool for creating
    and maintaining robust applications-automated testing.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了Django中的用户认证，内置的认证工具，以及可用的广泛定制。在下一章中，我们将涵盖创建和维护健壮应用程序的可能是最重要的工具-自动化测试。
