- en: Throttling, Filtering, Testing, and Deploying an API with Django 2.1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Django 2.1节流、过滤、测试和部署API
- en: 'In this chapter, we will use additional features included in Django 2.1 and
    Django REST Framework to improve our RESTful API. We will also write, execute,
    and improve unit tests and learn a few things related to deployment. We will look
    at the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Django 2.1和Django REST Framework中包含的附加功能来改进我们的RESTful API。我们还将编写、执行和改进单元测试，并学习一些与部署相关的内容。我们将查看以下内容：
- en: Install packages with the `requirements.txt` file to work with filters, throttling,
    and tests
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`requirements.txt`文件安装包以与过滤器、节流和测试一起工作
- en: Understand filtering, searching, and ordering classes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解过滤、搜索和排序类
- en: Configure filtering, searching, and ordering for views
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为视图配置过滤、搜索和排序
- en: Execute HTTP requests to test filtering, searching, and ordering features
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行HTTP请求以测试过滤、搜索和排序功能
- en: Filter, search, and order in the Browsable API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可浏览API中进行过滤、搜索和排序
- en: Understand throttling classes and goals
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解节流类和目标
- en: Configure throttling policies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置节流策略
- en: Execute HTTP requests to test throttle policies
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行HTTP请求以测试节流策略
- en: Setting up unit tests with `pytest`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`pytest`设置单元测试
- en: Write the first round of unit tests
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写第一轮单元测试
- en: Run unit tests with `pytest`
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`pytest`运行单元测试
- en: Improve testing coverage
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高测试覆盖率
- en: Run Django RESTful APIs on the cloud
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云上运行Django RESTful API
- en: Installing packages with the requirements.txt file to work with filters, throttling,
    and tests
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`requirements.txt`文件安装包以与过滤器、节流和测试一起工作
- en: Make sure you quit Django development server. You just need to press *Ctrl*
    + *C* in the Terminal or Command Prompt window in which it is running.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您退出Django开发服务器。您只需在运行它的终端或命令提示符窗口中按*Ctrl* + *C*即可。
- en: Now, we will install many additional packages to work with filtering capabilities
    and to be able to easily run tests and measure their code coverage. Make sure
    you have activated the virtual environment we have created in the previous chapter,
    named `Django01`. After you activate the virtual environment, it is time to run
    many commands that will be the same for macOS, Linux, and Windows.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将安装许多附加包以使用过滤功能，并能够轻松运行测试以及测量它们的代码覆盖率。确保您已激活我们在上一章中创建的虚拟环境，命名为`Django01`。在激活虚拟环境后，是时候运行许多命令了，这些命令对macOS、Linux和Windows都是相同的。
- en: Now, we will edit the existing `requirements.txt` file to specify the additional
    packages that our application requires to ...
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编辑现有的`requirements.txt`文件，以指定我们的应用程序所需的附加包...
- en: Understanding filtering, searching, and ordering classes
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解过滤、搜索和排序类
- en: In the previous chapter, we took advantage of the pagination features available
    in Django REST Framework to specify how we wanted large results sets to be split
    into individual pages of data. However, we have always been working with the entire
    `queryset` as the result set; that is, we didn't apply any filter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们利用Django REST Framework中可用的分页功能来指定我们希望将大型结果集分割成单独的数据页面的方式。然而，我们始终以整个`queryset`作为结果集进行工作；也就是说，我们没有应用任何过滤。
- en: Django REST Framework makes it easy to customize filtering, searching, and sorting
    capabilities for the views we have already coded.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Django REST Framework使得为已编码的视图自定义过滤、搜索和排序功能变得容易。
- en: 'Open the `settings.py` file in the `games_service/games_service` folder. Add
    the following highlighted lines after the first line that declares the dictionary
    named `REST_FRAMEWORK` to add the new `''DEFAULT_FILTER_BACKENDS''` setting key.
    Don''t remove the lines that will appear after the new highlighted lines. We don''t
    show them to avoid repeating code. The code file for the sample is included in
    the `restful_python_2_08_01` folder, in the `Django01/games-service/games_service/settings.py`
    file:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在`games_service/games_service`文件夹中打开`settings.py`文件。在声明名为`REST_FRAMEWORK`的字典的第一行之后添加以下突出显示的行，以添加新的`'DEFAULT_FILTER_BACKENDS'`设置键。不要删除新突出显示行之后的行。我们不显示它们以避免重复代码。示例的代码文件包含在`restful_python_2_08_01`文件夹中，位于`Django01/games-service/games_service/settings.py`文件中：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The value for the `''DEFAULT_FILTER_BACKENDS''` settings key specifies a global
    setting with a tuple of string whose values indicate the default classes that
    we want to use for filter backends. We will use the following three classes:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`''DEFAULT_FILTER_BACKENDS''`设置键的值指定了一个全局设置，它是一个字符串值的元组，表示我们想要用于过滤后端的默认类。我们将使用以下三个类：'
- en: '| Module | Class name | Owner |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 模块 | 类名 | 所有者 |'
- en: '| `django_filters.rest_framework` | `DjangoFilterBackend` | Django filter |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `django_filters.rest_framework` | `DjangoFilterBackend` | Django 过滤器 |'
- en: '| `rest_framework.filters` | `SearchFilter` | Django REST Framework |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `rest_framework.filters` | `SearchFilter` | Django REST 框架 |'
- en: '| `rest_framework.filters` | `OrderingFilter` | Django REST Framework |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `rest_framework.filters` | `OrderingFilter` | Django REST 框架 |'
- en: The `DjangoFilterBackend` class provides field-filtering capabilities through
    the recently installed `django-filer` package. We can specify the set of fields
    we want to be able to filter against or create a `django_filters.rest_framework.FilterSet`
    class with more customized settings and associate it with the desired view.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`DjangoFilterBackend` 类通过最近安装的 `django-filer` 包提供字段过滤功能。我们可以指定我们想要能够过滤的字段集合，或者创建一个具有更多自定义设置的
    `django_filters.rest_framework.FilterSet` 类并将其与所需的视图关联。'
- en: The `SearchFilter` class provides single query parameter-based searching capabilities
    and is based on the Django admin's search function. We can specify the set of
    fields we want to include for the search, and the client will be able to filter
    items by making queries that search on these fields with a single query. This
    is useful when we want to make it possible for a request to search on multiple
    fields with a single query.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`SearchFilter` 类提供基于单个查询参数的搜索功能，基于 Django 管理员的搜索功能。我们可以指定我们想要包含在搜索中的字段集合，客户端将能够通过在这些字段上执行单个查询来过滤项目。当我们想要使请求能够通过单个查询在多个字段上搜索时，这很有用。'
- en: The `OrderingFilter` class allows the client that composes the request to control
    how the results are ordered with a single query parameter. We can specify which
    fields may be ordered against.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderingFilter` 类允许请求的客户端通过单个查询参数控制结果的排序方式。我们可以指定哪些字段可以进行排序。'
- en: Note that we can also configure the filter backends by including any of the
    previously enumerated classes in a tuple and assigning it to the `filter_backends`
    class attribute for the desired generic view. However, in this case, we will use
    the default configuration for all our class-based views.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们还可以通过将之前列出的任何类包含在一个元组中并将其分配给所需通用视图的 `filter_backends` 类属性来配置过滤后端。然而，在这种情况下，我们将使用所有基于类的视图的默认配置。
- en: Whenever we design a RESTful API, we have to make sure we provide the required
    features with a properly optimized usage of the available resources. Hence, we
    have to be careful to make the fields we configure available in the filtering,
    searching, and ordering features. The configurations we make in these features
    will have an impact on the queries that Django's integrated ORM will generate
    and execute on the database. We must definitely make sure that we have the appropriate
    database optimizations that take into account the queries that will be executed.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们设计 RESTful API 时，我们必须确保我们以合理优化的方式提供所需的功能，并使用可用的资源。因此，我们必须小心确保我们配置的字段在过滤、搜索和排序功能中可用。我们在这些功能中做出的配置将对
    Django 集成 ORM 在数据库上生成和执行的查询产生影响。我们必须确保我们有适当的数据库优化，考虑到将要执行的查询。
- en: Stay in the `settings.py` file in the `games_service/games_service` folder.
    Add the following highlighted lines after the first line that declares the dictionary,
    named `INSTALLED_APPS`, to add `'django_filters'` as a newly installed application
    for the Django project.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请保持在 `games_service/games_service` 文件夹中的 `settings.py` 文件。在声明字典 `INSTALLED_APPS`
    的第一行之后添加以下突出显示的行，以将 `'django_filters'` 添加为新安装的应用程序到 Django 项目中。
- en: 'Don''t remove the lines that will appear after the new highlighted lines. We
    don''t show them to avoid repeating code. The code file for the sample is included
    in the `restful_python_2_08_01` folder, in the `Django01/games-service/games_service/settings.py`
    file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不要删除新突出显示行之后出现的行。我们不显示它们以避免重复代码。示例代码文件包含在 `restful_python_2_08_01` 文件夹中的 `Django01/games-service/games_service/settings.py`
    文件：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Configuring filtering, searching, and ordering for views
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置视图的过滤、搜索和排序
- en: 'Open the `views.py` file in the `games_service/games` folder. Add the following
    code after the last line that declares the imports, before the declaration of
    the `UserList` class. The code file for the sample is included in the `restful_python_2_08_01`
    folder, in the `Django01/games-service/games/views.py` file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `games_service/games` 文件夹中的 `views.py` 文件。在声明 `UserList` 类之前，在声明导入的最后一行之后添加以下代码。示例代码文件包含在
    `restful_python_2_08_01` 文件夹中的 `Django01/games-service/games/views.py` 文件：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Stay editing the `views.py` file in the `games_service/games` folder. Add the
    following highlighted lines to the `EsrbRatingList` class declared in the `views.py`
    file. Don't remove the existing lines for this class that isn't shown to ...
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 继续编辑 `games_service/games` 文件夹中的 `views.py` 文件。将以下高亮行添加到 `views.py` 文件中声明的 `EsrbRatingList`
    类。不要删除此类中未显示的现有行 ...
- en: Executing HTTP requests to test filtering, searching, and ordering
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行 HTTP 请求以测试过滤、搜索和排序
- en: 'Now, we can launch Django''s development server to compose and send HTTP requests.
    Execute any of the following two commands, based on your needs to access the API
    in other devices or computers connected to your LAN:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以启动 Django 的开发服务器来组合并发送 HTTP 请求。根据您的需求，执行以下两个命令之一以访问连接到您的局域网的其他设备或计算机上的
    API：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After we run any of the previous commands, the development server will start
    listening at port `8000`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行之前的任何命令之后，开发服务器将在端口 `8000` 上开始监听。
- en: 'Now, we will write a command to compose and send an HTTP `GET` request to retrieve
    all the ESRB ratings whose description matches `T (Teen)`. The code file for the
    sample is included in the `restful_python_2_08_01` folder, in the `Django01/cmd/cmd801.txt`
    file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个命令来组合并发送一个 HTTP `GET` 请求，以检索所有描述匹配 `T (Teen)` 的 ESRB 评级。示例代码文件包含在
    `restful_python_2_08_01` 文件夹中，位于 `Django01/cmd/cmd801.txt` 文件中：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_08_01` folder, in the `Django01/cmd/cmd802.txt`
    file:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 `curl` 命令。示例代码文件包含在 `restful_python_2_08_01` 文件夹中，位于 `Django01/cmd/cmd802.txt`
    文件中：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following lines show a sample response with the single ESRB rating whose
    description matches the specified description in the filter. The following lines
    only show the JSON body without the headers:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了一个与过滤中指定的描述匹配的单个 ESRB 评级的示例响应。以下行仅显示 JSON 主体，不包含头部信息：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, we will write a command to compose and send an HTTP `GET` request to retrieve
    all the games whose related ESRB rating is `1` and the value for the `played_times`
    field is equal to `10`. We want to sort the results by `release_date` in descending
    order, and therefore, we specify `-release_date` in the value for `ordering`.
    The hyphen (`-`) before the field name specifies the ordering feature to use descending
    order, instead of the default ascending order. Make sure you replace `1` with
    the `id` value of the ESRB rating whose description is `AO (Adults Only)`. The
    code file for the sample is included in the `restful_python_2_08_01` folder, in
    the `Django01/cmd/cmd803.txt` file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个命令来组合并发送一个 HTTP `GET` 请求，以检索所有相关 ESRB 评级为 `1` 且 `played_times` 字段值等于
    `10` 的游戏。我们希望按 `release_date` 降序排序结果，因此我们在 `ordering` 的值中指定 `-release_date`。字段名前的连字符（`-`）指定使用降序排序功能，而不是默认的升序排序。请确保将
    `1` 替换为描述为 `AO (Adults Only)` 的 ESRB 评级的 `id` 值。示例代码文件包含在 `restful_python_2_08_01`
    文件夹中，位于 `Django01/cmd/cmd803.txt` 文件中：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_08_01` folder, in the `Django01/cmd/cmd804.txt`
    file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 `curl` 命令。示例代码文件包含在 `restful_python_2_08_01` 文件夹中，位于 `Django01/cmd/cmd804.txt`
    文件中：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following lines show a sample response with the single game that matches
    the specified criteria in the filter. The following lines only show the JSON body
    without the headers:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了一个与过滤中指定的标准匹配的单个游戏的示例响应。以下行仅显示 JSON 主体，不包含头部信息：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the `GameList` class, we specified `'esrb_rating'` as one of the strings
    in the `filterset_fields` tuple of string. Thus, we had to use the ESRB rating
    `id` in the filter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `GameList` 类中，我们将 `'esrb_rating'` 指定为 `filterset_fields` 字符串元组中的一个字符串。因此，我们必须在过滤中使用
    ESRB 评级的 `id`。
- en: 'Now, we will run a command that will compose and send an HTTP `GET` request
    that uses a filter on the game''s name related to a registered score. The `PlayerScoreFilter`
    class provides us a filter to the name of the related game in `game_name`. We
    will combine the filter with another filter on the player''s name related to a
    registered score. The `PlayerScoreFilter` class provides us a way to filter to
    the name of the related player in `player_name`. Both conditions specified in
    the criteria must be met, and therefore, the filters are combined with the `AND`
    operator. The code file for the sample is included in the `restful_python_2_08_01`
    folder, in the `Django01/cmd/cmd805.txt` file:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将运行一个命令，该命令将编写并发送一个使用与注册得分相关的游戏名称的过滤器来组合和发送HTTP `GET` 请求。`PlayerScoreFilter`
    类为我们提供了在 `game_name` 中的相关游戏名称的过滤器。我们将该过滤器与另一个与注册得分相关的玩家名称的过滤器结合起来。`PlayerScoreFilter`
    类为我们提供了一种在 `player_name` 中过滤相关玩家名称的方法。必须满足准则中指定的两个条件，因此，过滤器使用 `AND` 运算符组合。示例的代码文件包含在
    `restful_python_2_08_01` 文件夹中，位于 `Django01/cmd/cmd805.txt` 文件：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_08_01` folder, in the `Django01/cmd/cmd806.txt`
    file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 `curl` 命令。示例的代码文件包含在 `restful_python_2_08_01` 文件夹中，位于 `Django01/cmd/cmd806.txt`
    文件：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following lines show a sample response with the score that matches the
    specified criteria in the filters. The following lines only show the JSON body
    without the headers:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了与过滤器中指定的条件匹配的得分的示例响应。以下行仅显示没有标题的JSON正文：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We will compose and send an HTTP `GET` request to retrieve all the scores that
    match the following criteria, sorted by `score` in descending order:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写并发送一个HTTP `GET` 请求来检索所有符合以下条件的得分，按 `score` 降序排序：
- en: The `score` value is between 17,000 and 45,000
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`score` 值介于17,000和45,000之间'
- en: The `score_date` value is between 2019-01-01 and 2019-01-31
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`score_date` 值介于2019-01-01和2019-01-31之间'
- en: 'The following command composes and sends the previously explained HTTP `GET`
    request. The code file for the sample is included in the `restful_python_2_08_01`
    folder, in the `Django01/cmd/cmd807.txt` file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将编写并发送之前解释的HTTP `GET` 请求。示例的代码文件包含在 `restful_python_2_08_01` 文件夹中，位于 `Django01/cmd/cmd807.txt`
    文件：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_08_01` folder, in the `Django01/cmd/cmd808.txt`
    file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 `curl` 命令。示例的代码文件包含在 `restful_python_2_08_01` 文件夹中，位于 `Django01/cmd/cmd808.txt`
    文件：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following lines show a sample response with the three games that match
    the specified criteria in the filters. The following lines only show the JSON
    body without the headers:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了与过滤器中指定的条件匹配的三款游戏的示例响应。以下行仅显示没有标题的JSON正文：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the previous requests, none of the responses had more than one page. If the
    response requires more than one page, the values for the `previous` and `next`
    keys will display the URLs that include the combination of the filters, search,
    ordering, and pagination. Django combines all the features to build the appropriate
    URLs.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的请求中，没有响应包含超过一页的内容。如果响应需要超过一页，`previous` 和 `next` 键的值将显示包含过滤器、搜索、排序和分页组合的URL。Django将所有功能组合起来构建适当的URL。
- en: 'We will compose and send an HTTP request to retrieve all the games whose `name`
    starts with `''S''`. We will use the search feature that we configured to restrict
    the search behavior to a starts-with match on the `name` field. The code file
    for the sample is included in the `restful_python_2_08_01` folder, in the `Django01/cmd/cmd809.txt`
    file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写并发送一个HTTP请求来检索所有名称以 `'S'` 开头的游戏。我们将使用我们配置的搜索功能，将搜索行为限制在 `name` 字段的以 `'S'`
    开头匹配上。示例的代码文件包含在 `restful_python_2_08_01` 文件夹中，位于 `Django01/cmd/cmd809.txt` 文件：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_08_01` folder, in the `Django01/cmd/cmd810.txt`
    file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 `curl` 命令。示例的代码文件包含在 `restful_python_2_08_01` 文件夹中，位于 `Django01/cmd/cmd810.txt`
    文件：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following lines show a sample response with the two games that match the
    specified search criteria; that is, those games whose names start with `''H''`.
    The following lines only show the JSON body without the headers:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了与指定搜索条件匹配的两个游戏的示例响应；即，那些名称以 `'H'` 开头的游戏。以下行仅显示没有标题的JSON正文：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'So far, we have been using the default search and ordering query parameters:
    `''search''` and `''ordering''`. We just need to specify the desired names as
    strings in the `SEARCH_PARAM` and the `ORDERING_PARAM` settings in the `settings.py`
    file in the `games_service/games_service` folder.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用默认的搜索和排序查询参数：`'search'`和`'ordering'`。我们只需在`games_service/games_service`文件夹中的`settings.py`文件中的`SEARCH_PARAM`和`ORDERING_PARAM`设置中指定所需的名称作为字符串。
- en: Filtering, searching and ordering in the Browsable API
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在可浏览API中进行过滤、搜索和排序
- en: We can take advantage of the Browsable API to easily test filtering, searching,
    and ordering features through a web browser. Open a web browser and enter `http://localhost:8000/player-scores/`.
    Replace `localhost` with the IP of the computer that is running the Django development
    server if you use another computer or device to run the browser.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用可浏览API通过网页浏览器轻松测试过滤、搜索和排序功能。打开网页浏览器并输入`http://localhost:8000/player-scores/`。如果您使用另一台计算机或设备运行浏览器，请将`localhost`替换为运行Django开发服务器的计算机的IP地址。
- en: The Browsable API will compose and send an HTTP `GET` request to `/player-scores/`
    and will display the results of its execution; that is, the headers and the JSON
    player scores list. You will notice there is a new Filters button located at the
    left-hand side of the OPTIONS button.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可浏览API将组合并发送一个HTTP `GET`请求到`/player-scores/`，并将显示其执行结果；即，头部信息和JSON玩家得分列表。您会注意到在OPTIONS按钮的左侧有一个新的“过滤器”按钮。
- en: Click on Filters and the Browsable API will display the Filters dialog box,
    ...
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“过滤器”，可浏览API将显示“过滤器”对话框，...
- en: Understanding throttling classes and goals
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解节流类和目标
- en: So far, we haven't established any limits on the usage of our API, and therefore,
    both authenticated and unauthenticated users can compose and send as many requests
    as they want to. We only took advantage of the pagination features available in
    Django REST Framework to specify how we wanted large result sets to be split into
    individual pages of data. However, any user can compose and send thousands of
    requests to be processed without any kind of limitation.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有对我们的API使用设置任何限制，因此，认证用户和未认证用户都可以随意组合和发送他们想要的请求。我们只是利用了Django REST
    Framework中可用的分页功能来指定我们希望如何将大型结果集拆分为单个数据页。然而，任何用户都可以无限制地组合和发送数千个请求进行处理。
- en: Obviously, it is not a good idea to deploy such an API encapsulated in a microservice
    in a cloud platform. A wrong usage of the API by any user could cause the microservice
    to consume a huge amount of resources, and the cloud platform bills would reflect
    this situation.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，在云平台上部署封装在微服务中的此类API不是一个好主意。任何用户对API的错误使用都可能导致微服务消耗大量资源，并且云平台的账单将反映这种情况。
- en: 'We will use the throttling capabilities available in Django REST Framework
    to configure the following global limitations to the usage of our API, based on
    whether the requests come from unauthenticated or authenticated users. We will
    define the following configuration:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Django REST Framework中可用的节流功能来配置以下基于未认证或认证用户请求的API使用全局限制。我们将定义以下配置：
- en: '**Unauthenticated users**: They will be able to run a maximum of `5` requests
    per hour'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未认证用户**：他们每小时最多可以运行`5`次请求'
- en: '**Authenticated users**: They will be able to run a maximum of `20` requests
    per hour'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证用户**：他们每小时最多可以运行`20`次请求'
- en: In addition, we want to configure a maximum of 25 requests per hour to the ESRB
    ratings-related views, no matter whether the user is authenticated or not.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们希望将每小时对ESRB评分相关视图的请求限制为最多25次，无论用户是否已认证。
- en: 'Django REST Framework provides three throttling classes (as listed in the following
    table), in the `rest_framework.throttling` module. All of them are subclasses
    of the `SimpleRateThrottle` superclass, which is a subclass of the `BaseThrottle`
    superclass. The classes allow us to set the maximum number of requests per period
    that will be computed based on different mechanisms to determine the previous
    request information to specify the scope. The previous request information for
    throttling is stored in the cache and the classes override the `get_cache_key`
    method that determines the scope:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Django REST Framework 提供了三个节流类（如下表所示），位于 `rest_framework.throttling` 模块中。所有这些类都是
    `SimpleRateThrottle` 超类的子类，而 `SimpleRateThrottle` 是 `BaseThrottle` 超类的子类。这些类允许我们设置每个周期内允许的最大请求数量，该数量将基于不同的机制来确定先前请求信息以指定范围。节流前的请求信息存储在缓存中，并且这些类覆盖了
    `get_cache_key` 方法，该方法确定范围：
- en: '| Throttling class name | Description |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 节流类名称 | 描述 |'
- en: '| `AnonRateThrottle` | This class limits the rate of requests that an anonymous
    user can make. The IP address of the request is the unique cache key. Hence, bear
    in mind that all the requests coming from the same IP address will accumulate
    the total number of requests. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `AnonRateThrottle` | 这个类限制了匿名用户可以发起的请求速率。请求的 IP 地址是唯一的缓存键。因此，请注意，来自同一 IP
    地址的所有请求将累积总请求数量。|'
- en: '| `UserRateThrottle` | This class limits the rate of requests that a specific
    user can make. For authenticated users, the authenticated user `id` is the unique
    cache key. For anonymous users, the IP address of the request is the unique cache
    key. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `UserRateThrottle` | 这个类限制了特定用户可以发起的请求速率。对于认证用户，认证用户的 `id` 是唯一的缓存键。对于匿名用户，请求的
    IP 地址是唯一的缓存键。|'
- en: '| `ScopedRateThrottle` | This class limits the rate of requests for specific
    parts of the API identified with the value assigned to the `throttle_scope` property.
    The class is useful when we want to restrict access to specific parts of the API
    with different rates. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `ScopedRateThrottle` | 这个类限制了使用 `throttle_scope` 属性指定的值标识的 API 特定部分的请求速率。当我们需要以不同的速率限制对
    API 特定部分的访问时，此类非常有用。|'
- en: Configuring throttling policies
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置节流策略
- en: We will use a combination of the three throttling classes to achieve our previously
    explained goals. Make sure you quit the Django development server. Remember that
    you just need to press *Ctrl* + *C* in the Terminal or Command Prompt window in
    which it is running.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用三种节流类的组合来实现我们之前解释的目标。确保您已退出 Django 开发服务器。请记住，您只需在运行 Django 开发服务器的终端或命令提示符窗口中按
    *Ctrl* + *C* 即可。
- en: Open the `settings.py` file in the `games_service/games_service` folder. Add
    the following highlighted lines after the first line that declares the dictionary
    named `REST_FRAMEWORK` to add the new `'DEFAULT_THROTTLE_CLASSES'` and `'DEFAULT_THROTTLE_RATES'`
    setting keys. Don't remove the lines that will appear after the new highlighted
    lines. We don't show them to avoid repeating code. The code file for the sample
    is included in the `restful_python_2_08_02` folder, ...
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `games_service/games_service` 文件夹中打开 `settings.py` 文件。在声明名为 `REST_FRAMEWORK`
    的字典的第一行之后添加以下突出显示的行，以添加新的 `'DEFAULT_THROTTLE_CLASSES'` 和 `'DEFAULT_THROTTLE_RATES'`
    设置键。不要删除新突出显示行之后出现的行。我们不显示它们以避免重复代码。示例代码文件包含在 `restful_python_2_08_02` 文件夹中，...
- en: Improving testing coverage
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高测试覆盖率
- en: 'Now, we will write additional test functions to improve the testing coverage.
    Specifically, we will write unit tests related to the player class-based views:
    `PlayerList` and `PlayerDetail`. Stay in the `tests.py` file in the `games_service/games`
    folder. Add the following code after the last line to declare a new function and
    new test functions. The code file for the sample is included in the `restful_python_2_08_03`
    folder, in the `Django01/games-service/games/tests.py` file:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写额外的测试函数以提高测试覆盖率。具体来说，我们将编写与基于玩家类的视图相关的单元测试：`PlayerList` 和 `PlayerDetail`。保持
    `games_service/games` 文件夹中的 `tests.py` 文件。在声明新函数和新测试函数的最后一行之后添加以下代码。示例代码文件包含在
    `restful_python_2_08_03` 文件夹中，在 `Django01/games-service/games/tests.py` 文件中：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The code declares the `create_player` function that receives the desired `name`
    and `gender` for the new player as arguments. The method builds the URL and the
    data dictionary to compose and send an HTTP `POST` method to the view associated
    with the `player-list` view name, and returns the response generated by this request.
    The code uses the received `client` to access the `APIClient` instance that allows
    us to easily compose and send HTTP requests for testing. Many test functions will
    call the `create_player` function to create a player, and then compose and send
    other HTTP requests to the API.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 代码声明了`create_player`函数，该函数接收新玩家所需的`name`和`gender`作为参数。该方法构建URL和数据字典，以向与`player-list`视图名称关联的视图发送HTTP
    `POST`方法，并返回此请求生成的响应。代码使用接收到的`client`来访问允许我们轻松组合和发送HTTP请求进行测试的`APIClient`实例。许多测试函数将调用`create_player`函数来创建玩家，然后向API发送其他HTTP请求。
- en: 'The `test_create_and_retrieve_player` test function tests whether we can create
    a new `Player` object and then retrieve it. The method calls the previously explained
    `create_player` function and then uses `assert` to check for the following expected
    results:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`test_create_and_retrieve_player`测试函数测试我们是否可以创建一个新的`Player`对象然后检索它。该方法调用之前解释的`create_player`函数，然后使用`assert`检查以下预期结果：'
- en: The `status_code` for the response is HTTP `201 Created` (`status.HTTP_201_CREATED`)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应的`status_code`是HTTP `201 Created`（`status.HTTP_201_CREATED`）
- en: The total number of `Player` objects retrieved from the database is `1`
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中检索到的`Player`对象总数是`1`
- en: The `name` attribute of the `Player` object retrieved from the database matches
    the description specified when we created the object
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中检索到的`Player`对象的`name`属性与我们创建对象时指定的描述相匹配
- en: The `gender` attribute of the `Player` object retrieved from the database matches
    the description specified when we created the object
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中检索到的`Player`对象的`gender`属性与我们创建对象时指定的描述相匹配
- en: 'Stay in the `tests.py` file in the `games_service/games` folder. Add the following
    code after the last line to declare new test functions. The code file for the
    sample is included in the `restful_python_2_08_03` folder, in the `Django01/games-service/games/tests.py`
    file:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 保持位于`games_service/games`文件夹中的`tests.py`文件。在最后一行之后添加以下代码以声明新的测试函数。示例代码文件包含在`restful_python_2_08_03`文件夹中，在`Django01/games-service/games/tests.py`文件中：
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The code declares the following test functions whose names start with the `test_`
    prefix:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 代码声明了以下以`test_`前缀开始的测试函数：
- en: '`test_create_duplicated_player`: This test function tests whether the unique
    constraints make it possible for us to create two players with the same name.
    The second time we compose and send an HTTP `POST` request with a duplicate player
    name, we should receive an HTTP `400 Bad Request` status code (`status.HTTP_400_BAD_REQUEST`).'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test_create_duplicated_player`：这个测试函数测试了唯一约束是否使我们能够创建两个具有相同名称的玩家。当我们第二次使用重复的玩家名称组合并发送HTTP
    `POST`请求时，我们应该收到HTTP `400 Bad Request`状态码（`status.HTTP_400_BAD_REQUEST`）。'
- en: '`test_retrieve_player_list`: This test function tests whether we can retrieve
    a specific player by its `id` with an HTTP `GET` request.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test_retrieve_player_list`：这个测试函数测试我们是否可以通过HTTP `GET`请求通过`id`检索特定的玩家。'
- en: We just coded a few tests related to players to improve test coverage. However,
    we should definitely write more tests to cover all the features included in our
    API.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚编写了一些与玩家相关的测试来提高测试覆盖率。然而，我们绝对应该编写更多的测试来覆盖我们API中包含的所有功能。
- en: 'Now, we will use the `pytest` command to run the tests again. Make sure you
    run the following command in the Terminal or Command Prompt window in which you
    have activated the virtual environment, and that you are located within the `games_service`
    folder that has the `manage.py` file:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`pytest`命令再次运行测试。确保你在激活了虚拟环境的终端或命令提示符窗口中运行以下命令，并且你位于包含`manage.py`文件的`games_service`文件夹中：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following lines show the sample output:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了示例输出：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The output provided details indicating that `pytest` executed `8` tests and
    all of them passed. It is possible to work with `pytest` fixtures to reduce boilerplate
    code in the previously coded functions. However, we are focused on making the
    functions easy to understand. Then, you can use the code as a baseline and improve
    it by taking full advantage of additional features provided by Pytest fixtures
    and `pytest-django`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的输出详细说明了`pytest`执行了`8`个测试，并且所有测试都通过了。可以使用`pytest`的固定功能来减少之前编写的函数中的样板代码。然而，我们的重点是使函数易于理解。然后，你可以将代码作为基准，通过充分利用Pytest固定功能和`pytest-django`提供的附加功能来改进它。
- en: We just created a few unit tests to understand how we can code them. However,
    of course, it would be necessary to write more tests to provide appropriate coverage
    of all the featured and execution scenarios included in the API.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了一些单元测试来了解我们如何编写它们。然而，当然，编写更多的测试来提供对API中包含的所有功能和执行场景的适当覆盖是必要的。
- en: Executing HTTP requests to test throttling policies
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行HTTP请求以测试限流策略
- en: 'Launch Django''s development server to compose and send HTTP requests. Execute
    either of the following two commands based on your needs:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Django的开发服务器以组合和发送HTTP请求。根据您的需求执行以下两个命令之一：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, we will write commands to compose and send HTTP requests many times. In
    order to do so, we will learn how to achieve this goal with any of the following
    options combined with `http` and `curl` commands. Select the most appropriate
    one based on your needs. Don''t forget that you will need to have the virtual
    environment activated in any of the options you select to run the commands when
    you use the `http` command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写多次组合和发送HTTP请求的命令。为了做到这一点，我们将学习如何通过以下任何一种选项与`http`和`curl`命令结合来实现这一目标。根据您的需求选择最合适的一个。不要忘记，您将需要在您选择的任何选项中激活虚拟环境，以便在您使用`http`命令时运行命令：
- en: 'macOS: Terminal with a Bash shell.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS：带有Bash shell的终端。
- en: 'Linux: Terminal with a Bash shell.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux：带有Bash shell的终端。
- en: 'Windows: ...'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows：...
- en: Setting up unit tests with pytest
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pytest设置单元测试
- en: 'Create a new `pytest.ini` file within the `games_service` folder (the same
    folder that has the `manage.py` file). The following lines show the code that
    specifies the desired configuration for Pytest. The code file for the sample is
    included in the `restful_python_2_08_02` folder, in the `Django01/game_service/manage.py`
    file:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在`games_service`文件夹内创建一个新的`pytest.ini`文件（与包含`manage.py`文件的同一文件夹）。以下行显示了指定Pytest所需配置的代码。示例的代码文件包含在`restful_python_2_08_02`文件夹中，在`Django01/game_service/manage.py`文件中：
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `DJANGO_SETTINGS_MODULE` configuration variable specifies that we want to
    use the `settings.py` file located in the `games_service/games_service` folder
    as the settings module for Django when tests are executed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 配置变量`DJANGO_SETTINGS_MODULE`指定了在执行测试时，我们希望使用位于`games_service/games_service`文件夹中的`settings.py`文件作为Django的设置模块。
- en: The `python_files` configuration variable indicates the filters that `pytest`
    will use to find modules with test functions.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 配置变量`python_files`指示`pytest`将使用哪些过滤器来查找具有测试函数的模块。
- en: Writing the first round of unit tests
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写第一轮单元测试
- en: 'Now, we will write the first round of unit tests. Specifically, we will write
    unit tests related to the ESRB rating class-based views: `EsrbRatingList` and
    `EsrbRatingDetail`.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写第一轮单元测试。具体来说，我们将编写与ESRB评级类视图相关的单元测试：`EsrbRatingList`和`EsrbRatingDetail`。
- en: 'Open the `tests.py` file in the `games_service/games` folder. Replace the existing
    code with the following lines that declare many `import` statements and two functions.
    The code file for the sample is included in the `restful_python_2_08_02` folder,
    in the `Django01/games-service/games/tests.py` file:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 打开位于`games_service/games`文件夹中的`tests.py`文件。用以下行替换现有的代码，这些行声明了许多`import`语句和两个函数。示例的代码文件包含在`restful_python_2_08_02`文件夹中，在`Django01/games-service/games/tests.py`文件中：
- en: '[PRE25]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Running unit tests with pytest
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pytest运行单元测试
- en: 'Now, run the following command to create a test database, run all the migrations,
    and use `pytest`, in combination with the `pytest-django` plugin, to discover
    and execute all the tests we created. The test runner will execute all the methods
    that start with the `test_` prefix in the `tests.py` file and will display the
    results. Make sure you run the command in the Terminal or Command Prompt window
    in which you have activated the virtual environment, and that you are located
    within the `games_service` folder that has the `manage.py` file:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行以下命令以创建测试数据库，运行所有迁移，并使用 `pytest`，结合 `pytest-django` 插件，发现并执行我们创建的所有测试。测试运行器将执行
    `tests.py` 文件中以 `test_` 前缀开始的全部方法，并将显示结果。确保你在激活了虚拟环境的终端或命令提示符窗口中运行此命令，并且你位于包含
    `manage.py` 文件的 `games_service` 文件夹内：
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The tests won't make changes to the database we have been using when running
    request on the API through `pytest`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过 `pytest` 在 API 上运行请求时，测试不会更改我们一直在使用的数据库。
- en: The test runner will execute all the functions defined in the `tests.py` that
    start with the `test_` prefix and will display the results. We use the `-v` option
    to instruct `pytest` to print the test function names and statuses in the verbose
    mode.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 测试运行器将执行 `tests.py` 中定义的所有以 `test_` 前缀开始的函数，并将显示结果。我们使用 `-v` 选项指示 `pytest` 以详细模式打印测试函数名称和状态。
- en: 'The following lines show the sample output:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了示例输出：
- en: '[PRE27]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The output provides details indicating that the test runner executed `5` tests,
    and all of them passed.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 输出提供了详细信息，表明测试运行器执行了 `5` 个测试，并且所有测试都通过了。
- en: Running Django RESTful APIs on the cloud
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在云端运行 Django RESTful API
- en: One of the biggest drawbacks related to Django and Django REST Framework is
    that each HTTP request is blocking. Thus, whenever the Django server receives
    an HTTP request, it doesn't start working on any other HTTP requests in the incoming
    queue until the server sends the response for the first HTTP request is received.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '与 Django 和 Django REST 框架相关的一个最大的缺点是每个 HTTP 请求都是阻塞的。因此，每当 Django 服务器收到一个 HTTP
    请求时，它不会开始处理传入队列中的任何其他 HTTP 请求，直到服务器收到第一个 HTTP 请求的响应。 '
- en: However, one of the great advantages of RESTful Web Services is that they are
    stateless; that is, they shouldn't keep a client state on any server. Our API
    is a good example of a stateless RESTful Web Service. Thus, we can make the API
    run on as many servers as necessary to achieve our scalability goals. Obviously,
    we must take into account that we can easily transform the database server ...
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，RESTful Web 服务的一个巨大优势是它们是无状态的；也就是说，它们不应该在任何服务器上保持客户端状态。我们的 API 是一个无状态 RESTful
    Web 服务的良好示例。因此，我们可以让 API 在尽可能多的服务器上运行，以实现我们的可扩展性目标。显然，我们必须考虑到我们可以轻松地转换数据库服务器 ...
- en: Test your knowledge
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: 'Let''s see whether you can answer the following questions correctly:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看你是否能正确回答以下问题：
- en: Which of the following fixtures provided by the `pytest-django` plugin allow
    us to access the `APIClient` instance that makes it easy for us to compose and
    send HTTP requests for testing?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个由 `pytest-django` 插件提供的 fixture 允许我们访问 `APIClient` 实例，这使得我们能够轻松地编写和发送 HTTP
    请求进行测试？
- en: '`client`'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`client`'
- en: '`api_client`'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`api_client`'
- en: '`http`'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`http`'
- en: Which of the following decorators declared in `pytest-django` indicate that
    a test function needs to work with the test database?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个在 `pytest-django` 中声明的装饰器表示测试函数需要与测试数据库一起工作？
- en: '`@pytest.django.db`'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@pytest.django.db`'
- en: '`@pytest.mark.django_db`'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@pytest.mark.django_db`'
- en: '`@pytest.mark.db`'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@pytest.mark.db`'
- en: 'The `ScopedRateThrottle` class:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ScopedRateThrottle` 类：'
- en: Limits the rate of requests that a specific user can make
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 限制特定用户可以发起的请求数量
- en: Limits the rate of requests for specific parts of the API identified with the
    value assigned to the `throttle_scope` property
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 限制与 `throttle_scope` 属性分配的值标识的 API 特定部分的请求数量
- en: Limits the rate of requests that an anonymous user can make
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 限制匿名用户可以发起的请求数量
- en: 'The `UserRateThrottle` class:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`UserRateThrottle` 类：'
- en: Limits the rate of requests that a specific user can make
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 限制特定用户可以发起的请求数量
- en: Limits the rate of requests for specific parts of the API identified with the
    value assigned to the `throttle_scope` property
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 限制与 `throttle_scope` 属性分配的值标识的 API 特定部分的请求数量
- en: Limits the rate of requests that an anonymous user can make
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 限制匿名用户可以发起的请求数量
- en: 'The `DjangoFilterBackend` class:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DjangoFilterBackend` 类：'
- en: Provides single query parameter-based searching capabilities and is based on
    the Django admin's search function
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供基于单个查询参数的搜索功能，并基于Django管理员的搜索功能
- en: Allows the client to control how the results are ordered with a single query
    parameter
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许客户端通过单个查询参数控制结果的排序
- en: Provides field filtering capabilities
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供字段过滤功能
- en: 'The `SearchFilter` class:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'The `SearchFilter` class:'
- en: Provides single query parameter-based searching capabilities and is based on
    the Django admin's search function
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供基于单个查询参数的搜索功能，并基于Django管理员的搜索功能
- en: Allows the client to control how the results are ordered with a single query
    parameter
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许客户端通过单个查询参数控制结果的排序
- en: Provides field filtering capabilities
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供字段过滤功能
- en: Which of the following class attributes specifies the `FilterSet` subclass that
    we want to use for a class-based view?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个类属性指定了我们想要用于基于类的视图的`FilterSet`子类？
- en: '`filters_class`'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`filters_class`'
- en: '`filtering_class`'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`filtering_class`'
- en: '`filterset_class`'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`filterset_class`'
- en: Summary
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took advantage of many features included in Django REST
    Framework to define throttling policies. We used the filtering, searching, and
    ordering of classes to make it easy to configure filters, search queries, and
    the desired order for the results in HTTP requests. We used the Browsable API
    feature to test these new features included in our API.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们利用了Django REST Framework中包含的许多功能来定义节流策略。我们使用了类的过滤、搜索和排序，使得在HTTP请求中配置过滤器、搜索查询和期望的结果排序变得容易。我们使用了可浏览的API功能来测试我们API中包含的新特性。
- en: We wrote the first round of unit tests and set the necessary configuration to
    use the popular and modern `pytest` Python unit test framework with Django REST
    Framework. Then, we wrote additional unit tests to improve test coverage. Finally,
    we understood many considerations for deployment and scalability in the cloud.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了第一轮单元测试，并设置了必要的配置以使用流行的现代`pytest` Python单元测试框架与Django REST Framework。然后，我们编写了额外的单元测试以改进测试覆盖率。最后，我们理解了许多关于云部署和可扩展性的考虑因素。
- en: Now that we have built a complex API with Django REST Framework ...
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经使用Django REST Framework构建了一个复杂的API ...
