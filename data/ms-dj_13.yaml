- en: Chapter 13. Deploying Django
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章 部署Django
- en: 'This chapter covers the last essential step of building a Django application:
    deploying it to a production server.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了构建Django应用程序的最后一个基本步骤：将其部署到生产服务器。
- en: If you've been following along with our ongoing examples, you've likely been
    using the `runserver`, which makes things very easy-with `runserver`, you don't
    have to worry about web server setup. But `runserver` is intended only for development
    on your local machine, not for exposure on the public web.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您一直在跟着我们的示例，您可能一直在使用 `runserver`，这使得事情变得非常容易-使用 `runserver`，您不必担心web服务器的设置。但是
    `runserver` 仅适用于在本地机器上进行开发，而不适用于在公共网络上暴露。
- en: To deploy your Django application, you'll need to hook it into an industrial-strength
    web server such as Apache. In this chapter, we'll show you how to do that-but,
    first, we'll give you a checklist of things to do in your codebase before you
    go live.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署您的Django应用程序，您需要将其连接到像Apache这样的工业级Web服务器。在本章中，我们将向您展示如何做到这一点-但首先，我们将为您提供一个在您上线之前在您的代码库中要做的事情的清单。
- en: Preparing your codebase for production
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为生产准备您的代码库
- en: Deployment checklist
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署清单
- en: The Internet is a hostile environment. Before deploying your Django project,
    you should take some time to review your settings, with security, performance,
    and operations in mind.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网是一个敌对的环境。在部署Django项目之前，您应该花些时间审查您的设置，考虑安全性、性能和操作。
- en: Django includes many security features. Some are built-in and always enabled.
    Others are optional because they aren't always appropriate, or because they're
    inconvenient for development. For example, forcing HTTPS may not be suitable for
    all websites, and it's impractical for local development.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Django包含许多安全功能。有些是内置的并且始终启用。其他是可选的，因为它们并不总是合适的，或者因为它们对开发来说不方便。例如，强制使用HTTPS可能不适用于所有网站，并且对于本地开发来说是不切实际的。
- en: 'Performance optimizations are another category of trade-offs with convenience.
    For instance, caching is useful in production, less so for local development.
    Error reporting needs are also widely different. The following checklist includes
    settings that:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 性能优化是另一类便利性的权衡。例如，在生产中缓存很有用，但在本地开发中不那么有用。错误报告的需求也是非常不同的。以下清单包括以下设置：
- en: Must be set properly for Django to provide the expected level of security,
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须正确设置才能让Django提供预期的安全级别，
- en: Are expected to be different in each environment,
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每个环境中都有所不同，
- en: Enable optional security features,
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用可选的安全功能，
- en: Enable performance optimizations; and,
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用性能优化；和，
- en: Provide error reporting.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供错误报告。
- en: Many of these settings are sensitive and should be treated as confidential.
    If you're releasing the source code for your project, a common practice is to
    publish suitable settings for development, and to use a private settings module
    for production. Following checks described can be automated using the
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多这些设置是敏感的，应该被视为机密。如果您发布项目的源代码，一个常见的做法是发布适合开发的设置，并为生产使用私有设置模块。可以使用所描述的检查来自动化以下检查
- en: '`-deploy` option of the `check` command. Be sure to run it against your production
    settings file as described in the option''s documentation.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`-deploy` 选项的 `check` 命令。务必根据选项的文档描述运行它针对您的生产设置文件。'
- en: Critical settings
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键设置
- en: SECRET_KEY
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SECRET_KEY
- en: '**The secret key must be a large random value and it must be kept secret.**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**秘钥必须是一个大的随机值，并且必须保密。**'
- en: 'Make sure that the key used in production isn''t used anywhere else and avoid
    committing it to source control. This reduces the number of vectors from which
    an attacker may acquire the key. Instead of hardcoding the secret key in your
    settings module, consider loading it from an environment variable:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在生产中使用的密钥没有在其他任何地方使用，并且避免将其提交到源代码控制。这减少了攻击者可能获取密钥的向量数量。考虑从环境变量中加载秘密密钥，而不是在设置模块中将秘密密钥硬编码：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'or from a file:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 或者从一个文件：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: DEBUG
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试
- en: '**You must never enable debug in production.**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**您绝对不能在生产中启用调试。**'
- en: When we created a project in [Chapter 1](ch01.xhtml "Chapter 1. Introduction
    to Django and Getting Started"), *Introduction to Django* *and Getting Started*,
    the command `django-admin startproject` created a `settings.py` file with `DEBUG`
    set to `True`. Many internal parts of Django check this setting and change their
    behavior if `DEBUG` mode is on.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在[第1章](ch01.xhtml "第1章 Django简介和入门") *Django简介* *和入门*中创建项目时，`django-admin
    startproject` 命令创建了一个带有 `DEBUG` 设置为 `True` 的 `settings.py` 文件。Django的许多内部部分都会检查此设置，并在
    `DEBUG` 模式开启时改变它们的行为。
- en: 'For example, if `DEBUG` is set to `True`, then:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果 `DEBUG` 设置为 `True`，那么：
- en: All database queries will be saved in memory as the object `django.db.connection.queries`.
    As you can imagine, this eats up memory!
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有数据库查询将被保存在内存中作为对象 `django.db.connection.queries`。你可以想象，这会消耗内存！
- en: Any 404 error will be rendered by Django's special 404 error page (covered in
    C[hapter 3](ch03.xhtml "Chapter 3. Templates"), *Templates*) rather than returning
    a proper 404 response. This page contains potentially sensitive information and
    should not be exposed to the public Internet.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何404错误都将由Django的特殊404错误页面（在第3章中介绍，*模板*）呈现，而不是返回正确的404响应。这个页面包含潜在的敏感信息，不应该暴露在公共互联网上。
- en: Any uncaught exception in your Django application-from basic Python syntax errors
    to database errors to template syntax errors-will be rendered by the Django pretty
    error page that you've likely come to know and love. This page contains even more
    sensitive information than the 404 page and should never be exposed to the public.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的Django应用程序中的任何未捕获异常-从基本的Python语法错误到数据库错误和模板语法错误-都将由您可能已经了解和喜爱的Django漂亮错误页面呈现。这个页面包含的敏感信息甚至比404页面还要多，绝不能暴露给公众。
- en: In short, setting `DEBUG` to `True` tells Django to assume only trusted developers
    are using your site. The Internet is full of untrustworthy hooligans, and the
    first thing you should do when you're preparing your application for deployment
    is set `DEBUG` to `False`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，将`DEBUG`设置为`True`告诉Django假设只有可信任的开发人员在使用您的网站。互联网上充满了不可信任的流氓，当您准备部署应用程序时，第一件事就是将`DEBUG`设置为`False`。
- en: Environment-specific settings
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特定于环境的设置
- en: ALLOWED_HOSTS
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ALLOWED_HOSTS
- en: When `DEBUG = False`, Django doesn't work at all without a suitable value for
    `ALLOWED_HOSTS`. This setting is required to protect your site against some CSRF
    attacks. If you use a wildcard, you must perform your own validation of the `Host`
    HTTP header, or otherwise ensure that you aren't vulnerable to this category of
    attack.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当`DEBUG = False`时，Django在没有适当的`ALLOWED_HOSTS`值的情况下根本无法工作。这个设置是必需的，以保护您的网站免受一些CSRF攻击。如果您使用通配符，您必须执行自己的`Host`
    HTTP头的验证，或者确保您不容易受到这类攻击的影响。
- en: CACHES
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存
- en: If you're using a cache, connection parameters may be different in development
    and in production. Cache servers often have weak authentication. Make sure they
    only accept connections from your application servers. If you're using **Memcached**,
    consider using cached sessions to improve performance.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用缓存，连接参数在开发和生产中可能不同。缓存服务器通常具有弱身份验证。确保它们只接受来自应用服务器的连接。如果您使用**Memcached**，考虑使用缓存会话以提高性能。
- en: DATABASES
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库
- en: Database connection parameters are probably different in development and in
    production. Database passwords are very sensitive. You should protect them exactly
    like `SECRET_KEY`. For maximum security, make sure database servers only accept
    connections from your application servers. If you haven't set up backups for your
    database, do it right now!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 开发和生产中的数据库连接参数可能不同。数据库密码非常敏感。您应该像保护`SECRET_KEY`一样保护它们。为了最大的安全性，请确保数据库服务器只接受来自应用服务器的连接。如果您还没有为数据库设置备份，请立即进行设置！
- en: EMAIL_BACKEND and Related Settings
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EMAIL_BACKEND和相关设置
- en: If your site sends emails, these values need to be set correctly.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的网站发送电子邮件，这些值需要正确设置。
- en: STATIC_ROOT and STATIC_URL
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: STATIC_ROOT和STATIC_URL
- en: Static files are automatically served by the development server. In production,
    you must define a `STATIC_ROOT` directory where `collectstatic` will copy them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 静态文件由开发服务器自动提供。在生产中，您必须定义一个`STATIC_ROOT`目录，`collectstatic`将在其中复制它们。
- en: MEDIA_ROOT and MEDIA_URL
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MEDIA_ROOT和MEDIA_URL
- en: Media files are uploaded by your users. They're untrusted! Make sure your web
    server never attempts to interpret them. For instance, if a user uploads a `.php`
    file, the web server shouldn't execute it. Now is a good time to check your backup
    strategy for these files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体文件是由您的用户上传的。它们是不受信任的！确保您的Web服务器永远不会尝试解释它们。例如，如果用户上传了一个`.php`文件，Web服务器不应该执行它。现在是检查这些文件的备份策略的好时机。
- en: HTTPS
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTPS
- en: Any website which allows users to log in should enforce site-wide HTTPS to avoid
    transmitting access tokens in clear. In Django, access tokens include the login/password,
    the session cookie, and password reset tokens. (You can't do much to protect password
    reset tokens if you're sending them by email.)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 任何允许用户登录的网站都应强制执行全站HTTPS，以避免在明文中传输访问令牌。在Django中，访问令牌包括登录/密码、会话cookie和密码重置令牌。（如果通过电子邮件发送它们，你无法保护密码重置令牌。）
- en: Protecting sensitive areas such as the user account or the admin isn't sufficient,
    because the same session cookie is used for HTTP and HTTPS. Your web server must
    redirect all HTTP traffic to HTTPS, and only transmit HTTPS requests to Django.
    Once you've set up HTTPS, enable the following settings.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 保护敏感区域，如用户帐户或管理员是不够的，因为相同的会话cookie用于HTTP和HTTPS。您的Web服务器必须将所有HTTP流量重定向到HTTPS，并且只将HTTPS请求传输到Django。设置HTTPS后，启用以下设置。
- en: CSRF_COOKIE_SECURE
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSRF_COOKIE_SECURE
- en: Set this to `True` to avoid transmitting the CSRF cookie over HTTP accidentally.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将其设置为`True`，以避免意外通过HTTP传输CSRF cookie。
- en: SESSION_COOKIE_SECURE
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SESSION_COOKIE_SECURE
- en: Set this to `True` to avoid transmitting the session cookie over HTTP accidentally.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将其设置为`True`，以避免意外通过HTTP传输会话cookie。
- en: Performance optimizations
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能优化
- en: Setting `DEBUG = False` disables several features that are only useful in development.
    In addition, you can tune the following settings.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将`DEBUG = False`设置为禁用一些仅在开发中有用的功能。此外，您可以调整以下设置。
- en: CONN_MAX_AGE
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CONN_MAX_AGE
- en: Enabling persistent database connections can result in a nice speed-up when
    connecting to the database accounts for a significant part of the request processing
    time. This helps a lot on virtualized hosts with limited network performance.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 启用持久数据库连接可以在连接到数据库占请求处理时间的重要部分时获得良好的加速。这在网络性能有限的虚拟化主机上非常有帮助。
- en: TEMPLATES
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板
- en: Enabling the cached template loader often improves performance drastically,
    as it avoids compiling each template every time it needs to be rendered. See the
    template loaders docs for more information.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 启用缓存模板加载器通常会大大提高性能，因为它避免了每次需要呈现模板时都要编译模板。有关更多信息，请参阅模板加载器文档。
- en: Error reporting
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误报告
- en: By the time you push your code to production, it's hopefully robust, but you
    can't rule out unexpected errors. Thankfully, Django can capture errors and notify
    you accordingly.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将代码推送到生产环境时，希望它是健壮的，但您不能排除意外错误。幸运的是，Django可以捕获错误并相应地通知您。
- en: LOGGING
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志记录
- en: Review your logging configuration before putting your website in production,
    and check that it works as expected as soon as you have received some traffic.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在将网站投入生产之前，请检查您的日志配置，并在收到一些流量后立即检查它是否按预期工作。
- en: ADMINS and MANAGERS
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ADMINS和MANAGERS
- en: '`ADMINS` will be notified of 500 errors by email. `MANAGERS` will be notified
    of 404 errors. `IGNORABLE_404_URLS` can help filter out spurious reports.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`ADMINS`将通过电子邮件收到500错误的通知。`MANAGERS`将收到404错误的通知。`IGNORABLE_404_URLS`可以帮助过滤掉虚假报告。'
- en: Error reporting by email doesn't scale very well. Consider using an error monitoring
    system such as Sentry (for more information visit [http://sentry.readthedocs.org/en/latest/](http://sentry.readthedocs.org/en/latest/))
    before your inbox is flooded by reports. Sentry can also aggregate logs.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过电子邮件进行错误报告并不是很有效。在您的收件箱被报告淹没之前，考虑使用 Sentry 等错误监控系统（有关更多信息，请访问 [http://sentry.readthedocs.org/en/latest/](http://sentry.readthedocs.org/en/latest/)）。Sentry
    还可以聚合日志。
- en: Customize the default error views
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义默认错误视图
- en: 'Django includes default views and templates for several HTTP error codes. You
    may want to override the default templates by creating the following templates
    in your root template directory: `404.html`, `500.html`, `403.html`, and `400.html`.
    The default views should suffice for 99% of web applications, but if you desire
    to customize them, see these ([https://docs.djangoproject.com/en/1.8/topics/http/views/#customizing-error-views](https://docs.djangoproject.com/en/1.8/topics/http/views/#customizing-error-views))
    instructions which also contain details about the default templates:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Django 包括了几个 HTTP 错误代码的默认视图和模板。您可能希望通过在根模板目录中创建以下模板来覆盖默认模板：`404.html`、`500.html`、`403.html`
    和 `400.html`。默认视图应该适用于 99% 的 Web 应用程序，但如果您希望自定义它们，请参阅这些指令（[https://docs.djangoproject.com/en/1.8/topics/http/views/#customizing-error-views](https://docs.djangoproject.com/en/1.8/topics/http/views/#customizing-error-views)），其中还包含有关默认模板的详细信息：
- en: '`http_not_found_view`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http_not_found_view`'
- en: '`http_internal_server_error_view`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http_internal_server_error_view`'
- en: '`http_forbidden_view`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http_forbidden_view`'
- en: '`http_bad_request_view`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http_bad_request_view`'
- en: Using a virtualenv
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用虚拟环境
- en: 'If you install your project''s Python dependencies inside a virtualenv(for
    more information visit [http://www.virtualenv.org/](http://www.virtualenv.org/)),
    you''ll need to add the path to this virtualenv''s `site-packages` directory to
    your Python path as well. To do this, add an additional path to your `WSGIPythonPath`
    directive, with multiple paths separated by a colon (`:`) if using a UNIX-like
    system, or a semicolon (`;`) if using Windows. If any part of a directory path
    contains a space character, the complete argument string to `WSGIPythonPath` must
    be quoted:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在虚拟环境中安装了项目的 Python 依赖项（有关更多信息，请访问 [http://www.virtualenv.org/](http://www.virtualenv.org/)），您还需要将此虚拟环境的
    `site-packages` 目录的路径添加到您的 Python 路径中。为此，添加一个额外的路径到您的 `WSGIPythonPath` 指令，如果使用类
    UNIX 系统，则使用冒号（`:`）分隔多个路径，如果使用 Windows，则使用分号（`;`）分隔。如果目录路径的任何部分包含空格字符，则必须引用完整的参数字符串：
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Make sure you give the correct path to your virtualenv, and replace `python3.X`
    with the correct Python version (for example `python3.4`).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您提供正确的虚拟环境路径，并用正确的 Python 版本（例如 `python3.4`）替换 `python3.X`。
- en: Using different settings for production
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在生产中使用不同的设置
- en: 'So far in this book, we''ve dealt with only a single settings file: the `settings.py`
    generated by `django-admin startproject`. But as you get ready to deploy, you''ll
    likely find yourself needing multiple settings files to keep your development
    environment isolated from your production environment. (For example, you probably
    won''t want to change `DEBUG` from `False` to `True` whenever you want to test
    code changes on your local machine.) Django makes this very easy by allowing you
    to use multiple settings files. If you''d like to organize your settings files
    into production and development settings, you can accomplish this in one of three
    ways:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们只处理了一个设置文件：由 `django-admin startproject` 生成的 `settings.py`。但是当您准备部署时，您可能会发现自己需要多个设置文件，以保持开发环境与生产环境隔离。（例如，您可能不希望在本地机器上测试代码更改时将
    `DEBUG` 从 `False` 更改为 `True`。）Django 通过允许您使用多个设置文件来使这一切变得非常容易。如果您希望将设置文件组织成生产和开发设置，您可以通过以下三种方式之一来实现：
- en: Set up two full-blown, independent settings files.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置两个完全独立的设置文件。
- en: Set up a base settings file (say, for development) and a second (say, production)
    settings file that merely imports from the first one and defines whatever overrides
    it needs to define.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置一个基本设置文件（比如开发），以及一个第二个（比如生产）设置文件，它只是从第一个文件中导入，并定义任何需要定义的覆盖。
- en: Use only a single settings file that has Python logic to change the settings
    based on context.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只使用一个具有 Python 逻辑的设置文件来根据上下文更改设置。
- en: 'We''ll take these one at a time. First, the most basic approach is to define
    two separate settings files. If you''re following along, you''ve already got `settings.py`.
    Now, just make a copy of it called `settings_production.py`. (We made this name
    up; you can call it whatever you want.) In this new file, change `DEBUG`, and
    so on. The second approach is similar but cuts down on redundancy. Instead of
    having two settings files whose contents are mostly similar, you can treat one
    as the base file and create another file that imports from it. For example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐个来看这些。首先，最基本的方法是定义两个单独的设置文件。如果您在跟着做，您已经有了 `settings.py`。现在，只需复制它，命名为 `settings_production.py`。（我们随便取的名字；您可以随意命名。）在这个新文件中，更改
    `DEBUG` 等。第二种方法类似，但减少了冗余。不是拥有两个内容大部分相似的设置文件，您可以将一个作为基本文件，并创建另一个文件从中导入。例如：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, `settings_production.py` imports everything from `settings.py` and just
    redefines the settings that are particular to production. In this case, `DEBUG`
    is set to `False`, but we''ve also set different database access parameters for
    the production setting. (The latter goes to show that you can redefine any setting,
    not just the basic ones like `DEBUG`.) Finally, the most concise way of accomplishing
    two settings environments is to use a single settings file that branches based
    on the environment. One way to do this is to check the current hostname. For example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`settings_production.py` 从 `settings.py` 导入所有内容，并重新定义了特定于生产的设置。在这种情况下，`DEBUG`
    设置为 `False`，但我们还为生产设置了不同的数据库访问参数。（后者表明您可以重新定义任何设置，而不仅仅是基本的设置，比如 `DEBUG`。）最后，实现两个设置环境最简洁的方法是使用一个设置文件，根据环境进行分支。其中一种方法是检查当前的主机名。例如：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we import the `socket` module from Python's standard library and use it
    to check the current system's hostname. We can check the hostname to determine
    whether the code is being run on the production server. A core lesson here is
    that settings files are just *Python code*. They can import from other files,
    they can execute arbitrary logic, and so on. Just make sure that, if you go down
    this road, the Python code in your settings files is bulletproof. If it raises
    any exceptions, Django will likely crash badly.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从Python的标准库中导入`socket`模块，并使用它来检查当前系统的主机名。我们可以检查主机名来确定代码是否在生产服务器上运行。这里的一个核心教训是，设置文件只是*Python代码*。它们可以从其他文件导入，可以执行任意逻辑，等等。只要确保，如果您选择这条路，设置文件中的Python代码是无懈可击的。如果它引发任何异常，Django可能会严重崩溃。
- en: Feel free to rename your `settings.py` to `settings_dev.py` or `settings/dev.py`
    or `foobar.py`-Django doesn't care, as long as you tell it what settings file
    you're using.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 随意将您的`settings.py`重命名为`settings_dev.py`或`settings/dev.py`或`foobar.py`-Django不在乎，只要告诉它您正在使用哪个设置文件即可。
- en: But if you do rename the `settings.py` file that is generated by `django-admin
    startproject`, you'll find that `manage.py` will give you an error message saying
    that it can't find the settings. That's because it tries to import a module called
    `settings`. You can fix this either by editing `manage.py` to change `settings`
    to the name of your module, or by using `django-admin` instead of `manage.py`.
    In the latter case, you'll need to set the `DJANGO_SETTINGS_MODULE` environment
    variable to the Python path to your settings file (for example, `'mysite.settings'`).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您重命名了`django-admin startproject`生成的`settings.py`文件，您会发现`manage.py`会给出一个错误消息，说它找不到设置。这是因为它尝试导入一个名为`settings`的模块。您可以通过编辑`manage.py`将`settings`更改为您的模块的名称来解决此问题，或者使用`django-admin`而不是`manage.py`。在后一种情况下，您需要将`DJANGO_SETTINGS_MODULE`环境变量设置为您的设置文件的Python路径（例如，`'mysite.settings'`）。
- en: Deploying Django to a production server
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Django部署到生产服务器
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Headache free deployment**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 无需头痛的部署
- en: If you are serious about deploying a live website, there is really only one
    sensible option-find a host that explicitly supports Django.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您真的想要部署一个实时网站，真的只有一个明智的选择-找到一个明确支持Django的主机。
- en: Not only will you get a separate media server out of the box (usually Nginx),
    but they will also take care of the little things like setting up Apache correctly
    and setting a cron job that restarts the Python process periodically (to prevent
    your site hanging up). With the better hosts, you are also likely to get some
    form of *one-click* deployment.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅会得到一个独立的媒体服务器（通常是Nginx），而且他们还会照顾一些小事情，比如正确设置Apache并设置一个定期重启Python进程的cron作业（以防止您的网站挂起）。对于更好的主机，您还可能会得到某种形式的一键部署。
- en: Save yourself the headache and pay the few bucks a month for a host who knows
    Django.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 省点心，花几块钱每月找一个懂Django的主机。
- en: Deploying Django with Apache and mod_wsgi
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Apache和mod_wsgi部署Django
- en: Deploying Django with Apache ([http://httpd.apache.org/](http://httpd.apache.org/))
    and `mod_wsgi`([http://code.google.com/p/modwsgi](http://code.google.com/p/modwsgi))
    is a tried and tested way to get Django into production. `mod_wsgi` is an Apache
    module which can host any Python WSGI application, including Django. Django will
    work with any version of Apache which supports `mod_wsgi`. The official `mod_wsgi`
    documentation is fantastic; it's your source for all the details about how to
    use `mod_wsgi`. You'll probably want to start with the installation and configuration
    documentation.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Apache（[http://httpd.apache.org/](http://httpd.apache.org/)）和`mod_wsgi`（[http://code.google.com/p/modwsgi](http://code.google.com/p/modwsgi)）部署Django是一个经过验证的将Django投入生产的方法。`mod_wsgi`是一个可以托管任何Python
    WSGI应用程序（包括Django）的Apache模块。Django将与支持`mod_wsgi`的任何版本的Apache一起工作。官方的`mod_wsgi`文档非常棒；这是您获取有关如何使用`mod_wsgi`的所有细节的来源。您可能希望从安装和配置文档开始。
- en: Basic configuration
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本配置
- en: Once you've got `mod_wsgi` installed and activated, edit your Apache server's
    `httpd.conf` file and add the following. Note, if you are using a version of Apache
    older than 2.4, replace `Require all granted` with `Allow from all` and also add
    the line `Order deny,allow` preceding to it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装并激活了`mod_wsgi`，编辑Apache服务器的`httpd.conf`文件并添加以下内容。请注意，如果您使用的是早于2.4版本的Apache，将`Require
    all granted`替换为`Allow from all`，并在其前面添加`Order deny,allow`行。
- en: '[PRE5]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first bit in the `WSGIScriptAlias` line is the base URL path you want to
    serve your application at (`/` indicates the root URL), and the second is the
    location of a WSGI file-see the following file-on your system, usually inside
    of your project package (`mysite` in this example). This tells Apache to serve
    any request following the given URL using the WSGI application defined in that
    file.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`WSGIScriptAlias`行中的第一部分是您希望在其上提供应用程序的基本URL路径（`/`表示根URL），第二部分是系统上WSGI文件的位置，通常在您的项目包内（例如此示例中的`mysite`）。这告诉Apache使用在该文件中定义的WSGI应用程序来提供任何遵循给定URL的请求。'
- en: The `WSGIPythonPath` line ensures that your project package is available for
    import on the Python path; in other words, that `import mysite` works. The `<Directory>`
    piece just ensures that Apache can access your `wsgi.py` file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`WSGIPythonPath`行确保您的项目包可以在Python路径上导入；换句话说，`import mysite`有效。`<Directory>`部分只是确保Apache可以访问您的`wsgi.py`文件。'
- en: Next we'll need to ensure this `wsgi.py` with a WSGI application object exists.
    As of Django version 1.4, `startproject` will have created one for you; otherwise,
    you'll need to create it.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要确保存在带有WSGI应用程序对象的`wsgi.py`。从Django版本1.4开始，`startproject`会为您创建一个；否则，您需要自己创建。
- en: See the WSGI overview for the default contents you should put in this file,
    and what else you can add to it.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 查看WSGI概述，了解您应该在此文件中放置的默认内容，以及您可以添加的其他内容。
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If multiple Django sites are run in a single `mod_wsgi` process, all of them
    will use the settings of whichever one happens to run first. This can be solved
    by changing: `os.environ.setdefault("DJANGO_SETTINGS_MODULE",                
          "{{ project_name }}.settings")` in `wsgi.py`, to: `os.environ["DJANGO_SETTINGS_MODULE"]
    =` `"{{ project_name }}.settings"` or by using `mod_wsgi` daemon mode and ensuring
    that each site runs in its own daemon process.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在单个`mod_wsgi`进程中运行多个Django站点，则所有这些站点都将使用首先运行的站点的设置。这可以通过更改`wsgi.py`中的`os.environ.setdefault("DJANGO_SETTINGS_MODULE",
    "{{ project_name }}.settings")`来解决，例如：`os.environ["DJANGO_SETTINGS_MODULE"] =
    "{{ project_name }}.settings"`或者使用`mod_wsgi`守护程序模式，并确保每个站点在其自己的守护进程中运行。
- en: Using mod_wsgi daemon Mode
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用mod_wsgi守护程序模式
- en: Daemon mode is the recommended mode for running `mod_wsgi` (on non-Windows platforms).
    To create the required daemon process group and delegate the Django instance to
    run in it, you will need to add appropriate `WSGIDaemonProcess` and `WSGIProcessGroup`
    directives.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 守护程序模式是在非Windows平台上运行`mod_wsgi`的推荐模式。要创建所需的守护进程组并委托Django实例在其中运行，您需要添加适当的`WSGIDaemonProcess`和`WSGIProcessGroup`指令。
- en: 'A further change required to the preceding configuration if you use daemon
    mode is that you can''t use `WSGIPythonPath`; instead you should use the `python-path`
    option to `WSGIDaemonProcess`, for example:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用守护程序模式，则对上述配置需要进一步更改，即不能使用`WSGIPythonPath`；相反，您应该使用`WSGIDaemonProcess`的`python-path`选项，例如：
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: See the official `mod_wsgi` documentation for details on setting up daemon mode.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有关设置守护程序模式的详细信息，请参阅官方`mod_wsgi`文档。
- en: Serving files
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供文件
- en: 'Django doesn''t serve files itself; it leaves that job to whichever web server
    you choose. We recommend using a separate web server-that is, one that''s not
    also running Django-for serving media. Here are some good choices:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Django本身不提供文件服务；它将这项工作留给您选择的任何Web服务器。我们建议使用单独的Web服务器（即不运行Django的服务器）来提供媒体。以下是一些不错的选择：
- en: Nginx (for more information visit [http://code.google.com/p/modwsgi](http://code.google.com/p/modwsgi))
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nginx（有关更多信息，请访问[http://code.google.com/p/modwsgi](http://code.google.com/p/modwsgi)）
- en: A stripped-down version of Apache
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache的精简版本
- en: If, however, you have no option but to serve media files on the same Apache
    `VirtualHost` as Django, you can set up Apache to serve some URLs as static media,
    and others using the `mod_wsgi` interface to Django.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您别无选择，只能在与Django相同的Apache `VirtualHost`上提供媒体文件，您可以设置Apache以将某些URL作为静态媒体提供，然后使用`mod_wsgi`接口将其他URL用于Django。
- en: 'This example sets up Django at the site root, but explicitly serves `robots.txt`,
    `favicon.ico`, any CSS file, and anything in the `/static/` and `/media/` URL
    space as a static file. All other URLs will be served using `mod_wsgi`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例在站点根目录设置Django，但显式提供`robots.txt`，`favicon.ico`，任何CSS文件以及`/static/`和`/media/`
    URL空间中的任何内容作为静态文件。所有其他URL将使用`mod_wsgi`进行提供：
- en: '[PRE7]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you are using a version of Apache older than 2.4, replace `Require all granted`
    with `Allow from all` and also add the line `Order deny,allow` preceding to it.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是早于2.4的Apache版本，请用`Allow from all`替换`Require all granted`，并在其前面添加`Order
    deny,allow`行。
- en: Serving the admin files
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供管理文件
- en: When `django.contrib.staticfiles` is in `INSTALLED_APPS`, the Django development
    server automatically serves the static files of the admin app (and any other installed
    apps). This is however not the case when you use any other server arrangement.
    You're responsible for setting up Apache, or whichever web server you're using,
    to serve the admin files.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当`django.contrib.staticfiles`在`INSTALLED_APPS`中时，Django开发服务器会自动提供管理应用程序（以及任何其他已安装的应用程序）的静态文件。但是，当您使用其他服务器安排时，情况并非如此。您需要负责设置Apache或您正在使用的任何其他Web服务器以提供管理文件。
- en: 'The admin files live in (`django/contrib/admin/static/admin`) of the Django
    distribution. We recommend using `django.contrib.staticfiles` to handle the admin
    files (along strongly with a web server as outlined in the previous section; this
    means using the `collectstatic` management command to collect the static files
    in `STATIC_ROOT`, and then configuring your web server to serve `STATIC_ROOT`
    at `STATIC_URL`), but here are three other approaches:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 管理文件位于Django分发的(`django/contrib/admin/static/admin`)中。我们建议使用`django.contrib.staticfiles`来处理管理文件（以及在前一节中概述的Web服务器一起使用；这意味着使用`collectstatic`管理命令在`STATIC_ROOT`中收集静态文件，然后配置您的Web服务器以在`STATIC_URL`处提供`STATIC_ROOT`），但这里有其他三种方法：
- en: Create a symbolic link to the admin static files from within your document root
    (this may require `+FollowSymLinks` in your Apache configuration).
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的文档根目录创建到管理静态文件的符号链接（这可能需要在Apache配置中使用`+FollowSymLinks`）。
- en: Use an `Alias` directive, as demonstrated in the preceding paragraph, to alias
    the appropriate URL (probably `STATIC_URL` + `admin/`) to the actual location
    of the admin files.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Alias`指令，如前一段所示，将适当的URL（可能是`STATIC_URL` + `admin/`）别名为管理文件的实际位置。
- en: Copy the admin static files so that they live within your Apache document root.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制管理静态文件，使其位于Apache文档根目录中。
- en: If you get a UnicodEncodError
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果遇到UnicodeEncodeError
- en: If you're taking advantage of the internationalization features of Django and
    you intend to allow users to upload files, you must ensure that the environment
    used to start Apache is configured to accept non-ASCII file names. If your environment
    is not correctly configured, you will trigger `UnicodeEncodeError` exceptions
    when calling functions like the ones in `os.path` on filenames that contain non-ASCII
    characters.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在利用Django的国际化功能，并且打算允许用户上传文件，您必须确保用于启动Apache的环境已配置为接受非ASCII文件名。如果您的环境配置不正确，当调用`os.path`中包含非ASCII字符的文件名时，将触发`UnicodeEncodeError`异常。
- en: 'To avoid these problems, the environment used to start Apache should contain
    settings analogous to the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这些问题，用于启动Apache的环境应包含类似以下设置的环境：
- en: '[PRE8]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Consult the documentation for your operating system for the appropriate syntax
    and location to put these configuration items; `/etc/apache2/envvars` is a common
    location on Unix platforms. Once you have added these statements to your environment,
    restart Apache.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 请查阅操作系统的文档，了解适当的语法和放置这些配置项的位置；在Unix平台上，`/etc/apache2/envvars`是一个常见的位置。添加了这些语句到您的环境后，重新启动Apache。
- en: Serving static files in production
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在生产环境中提供静态文件
- en: 'The basic outline of putting static files into production is simple: run the
    `collectstatic` command when static files change, then arrange for the collected
    static files directory (`STATIC_ROOT`) to be moved to the static file server and
    served.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 将静态文件放入生产环境的基本概述很简单：当静态文件更改时运行`collectstatic`命令，然后安排将收集的静态文件目录（`STATIC_ROOT`）移动到静态文件服务器并提供服务。
- en: Depending on `STATICFILES_STORAGE`, files may need to be moved to a new location
    manually or the `post_process` method of the `Storage` class might take care of
    that.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`STATICFILES_STORAGE`，文件可能需要手动移动到新位置，或者`Storage`类的`post_process`方法可能会处理这个问题。
- en: Of course, as with all deployment tasks, the devil's in the details. Every production
    setup will be a bit different, so you'll need to adapt the basic outline to fit
    your needs.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，与所有部署任务一样，魔鬼在细节中。每个生产设置都会有所不同，因此您需要根据自己的需求调整基本概述。
- en: Following are a few common patterns that might help.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可能有所帮助的常见模式。
- en: Serving the site and your static files from the same server
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从同一服务器提供站点和静态文件
- en: 'If you want to serve your static files from the same server that''s already
    serving your site, the process may look something like:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望从已经提供站点的同一服务器提供静态文件，则该过程可能看起来像这样：
- en: Push your code up to the deployment server.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的代码推送到部署服务器。
- en: On the server, run `collectstatic` to copy all the static files into `STATIC_ROOT`.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务器上，运行`collectstatic`将所有静态文件复制到`STATIC_ROOT`中。
- en: Configure your web server to serve the files in `STATIC_ROOT` under the URL
    `STATIC_URL`.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置您的Web服务器，以便在`STATIC_ROOT`下的URL`STATIC_URL`中提供文件。
- en: You'll probably want to automate this process, especially if you've got multiple
    web servers. There's any number of ways to do this automation, but one option
    that many Django developers enjoy is Fabric([http://fabfile.org/](http://fabfile.org/)).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望自动化这个过程，特别是如果您有多个Web服务器。有许多种方法可以进行这种自动化，但许多Django开发人员喜欢的一个选择是Fabric（[http://fabfile.org/](http://fabfile.org/)）。
- en: 'Following, and in the following sections, we''ll show off a few example **fabfiles**
    (that is Fabric scripts) that automate these file deployment options. The syntax
    of a fabfile is fairly straightforward but won''t be covered here; consult Fabric''s
    documentation, for a complete explanation of the syntax. So, a fabfile to deploy
    static files to a couple of web servers might look something like:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在接下来的几节中，我们将展示一些示例**fabfiles**（即Fabric脚本），这些脚本可以自动化这些文件部署选项。fabfile的语法相当简单，但这里不会涉及到;
    请参阅Fabric的文档，了解语法的完整解释。因此，一个用于将静态文件部署到一对Web服务器的fabfile可能看起来像这样：
- en: '[PRE9]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Serving static files from a dedicated server
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从专用服务器提供静态文件
- en: 'Most larger Django sites use a separate web server-that is one that''s not
    also running Django-for serving static files. This server often runs a different
    type of web server-faster but less full-featured. Some common choices are:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数较大的Django站点使用单独的Web服务器-即不运行Django的服务器-用于提供静态文件。这个服务器通常运行不同类型的Web服务器-速度更快但功能不那么全面。一些常见的选择是：
- en: Nginx
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nginx
- en: A stripped-down version of Apache
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache的简化版本
- en: 'Configuring these servers is out of scope of this document; check each server''s
    respective documentation for instructions. Since your static file server won''t
    be running Django, you''ll need to modify the deployment strategy to look something
    like:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 配置这些服务器不在本文档的范围之内; 请查看每个服务器的相应文档以获取说明。由于您的静态文件服务器不会运行Django，因此您需要修改部署策略，看起来像这样：
- en: When your static files change, run `collectstatic` locally.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您的静态文件更改时，在本地运行`collectstatic`。
- en: Push your local `STATIC_ROOT` up to the static file server into the directory
    that's being served. `rsync` ([https://rsync.samba.org/](https://rsync.samba.org/))
    is a common choice for this step since it only needs to transfer the bits of static
    files that have changed.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将本地的`STATIC_ROOT`推送到静态文件服务器中正在提供服务的目录。`rsync`（[https://rsync.samba.org/](https://rsync.samba.org/)）是这一步的常见选择，因为它只需要传输已更改的静态文件位。
- en: 'Here''s how this might look in a fabfile:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是fabfile中的示例：
- en: '[PRE10]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Serving static files from a cloud service or CDN
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从云服务或CDN提供静态文件
- en: Another common tactic is to serve static files from a cloud storage provider
    like Amazon's S3 and/or a CDN (content delivery network). This lets you ignore
    the problems of serving static files and can often make for faster-loading webpages
    (especially when using a CDN).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常见的策略是从云存储提供商（如Amazon的S3）和/或CDN（内容传送网络）提供静态文件。这样可以忽略提供静态文件的问题，并且通常可以使网页加载更快（特别是在使用CDN时）。
- en: When using these services, the basic workflow would look a bit like the preceding
    paragraph, except that instead of using `rsync` to transfer your static files
    to the server you'd need to transfer the static files to the storage provider
    or CDN. There's any number of ways you might do this, but if the provider has
    an API a custom file storage backend will make the process incredibly simple.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用这些服务时，基本工作流程看起来可能与前面的段落有些不同，只是不是使用`rsync`将静态文件传输到服务器，而是需要将静态文件传输到存储提供商或CDN。您可能有许多种方法可以做到这一点，但如果提供商有API，自定义文件存储后端将使这个过程变得非常简单。
- en: 'If you''ve written or are using a 3rd party custom storage backend, you can
    tell `collectstatic` to use it by setting `STATICFILES_STORAGE` to the storage
    engine. For example, if you''ve written an S3 storage backend in `myproject.storage.S3Storage`
    you could use it with:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经编写或正在使用第三方自定义存储后端，可以通过将`STATICFILES_STORAGE`设置为存储引擎来告诉`collectstatic`使用它。例如，如果您在`myproject.storage.S3Storage`中编写了一个S3存储后端，您可以使用它：
- en: '[PRE11]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Once that's done, all you have to do is run `collectstatic` and your static
    files would be pushed through your storage package up to S3\. If you later needed
    to switch to a different storage provider, it could be as simple as changing your
    `STATICFILES_STORAGE` setting. There are 3rd party apps available that provide
    storage backends for many common file storage APIs. A good starting point is the
    overview at `djangopackages.com.`
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您只需运行`collectstatic`，您的静态文件将通过存储包推送到S3。如果以后需要切换到不同的存储提供程序，只需更改`STATICFILES_STORAGE`设置即可。有第三方应用程序可提供许多常见文件存储API的存储后端。一个很好的起点是`djangopackages.com`上的概述。
- en: Scaling
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展
- en: Now that you know how to get Django running on a single server, let's look at
    how you can scale out a Django installation. This section walks through how a
    site might scale from a single server to a large-scale cluster that could serve
    millions of hits an hour. It's important to note, however, that nearly every large
    site is large in different ways, so scaling is anything but a one-size-fits-all
    operation.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道如何在单个服务器上运行Django，让我们看看如何扩展Django安装。本节将介绍网站如何从单个服务器扩展到一个可以每小时服务数百万次点击的大规模集群。然而，需要注意的是，几乎每个大型网站在不同方面都很大，因此扩展绝非一刀切的操作。
- en: The following coverage should suffice to show the general principle, and whenever
    possible we'll try to point out where different choices could be made. First off,
    we'll make a pretty big assumption and exclusively talk about scaling under Apache
    and `mod_python`. Though we know of a number of successful medium-to large-scale
    FastCGI deployments, we're much more familiar with Apache.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下覆盖应该足以展示一般原则，并且在可能的情况下，我们将尝试指出可以做出不同选择的地方。首先，我们将做出一个相当大的假设，并且专门讨论Apache和`mod_python`下的扩展。虽然我们知道有许多成功的中到大型规模的FastCGI部署，但我们对Apache更为熟悉。
- en: Running on a single server
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在单个服务器上运行
- en: Most sites start out running on a single server, with an architecture that looks
    something like *Figure 13.1*. However, as traffic increases you'll quickly run
    into *resource contention* between the different pieces of software.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网站最初在单个服务器上运行，其架构看起来有点像*图13.1*。然而，随着流量的增加，您很快会发现不同软件之间存在*资源争用*的问题。
- en: Database servers and web servers love to have the entire server to themselves,
    so when run on the same server they often end up fighting over the same resources
    (RAM and CPU) that they'd prefer to monopolize. This is solved easily by moving
    the database server to a second machine.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库服务器和Web服务器喜欢拥有整个服务器，因此当它们在同一台服务器上运行时，它们经常会争夺它们更愿意垄断的相同资源（RAM和CPU）。将数据库服务器移至第二台机器很容易解决这个问题。
- en: '![Running on a single server](img/image_13_001.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![在单个服务器上运行](img/image_13_001.jpg)'
- en: 'Figure 13.1: a single server Django setup.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1：单服务器Django设置。
- en: Separating out the database server
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分离数据库服务器
- en: 'As far as Django is concerned, the process of separating out the database server
    is extremely easy: you''ll simply need to change the `DATABASE_HOST` setting to
    the IP or DNS name of your database server. It''s probably a good idea to use
    the IP if at all possible, as relying on DNS for the connection between your web
    server and database server isn''t recommended. With a separate database server,
    our architecture now looks like *Figure 13.2*.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 就Django而言，分离数据库服务器的过程非常简单：您只需要将`DATABASE_HOST`设置更改为数据库服务器的IP或DNS名称。如果可能的话，最好使用IP，因为不建议依赖DNS来连接您的Web服务器和数据库服务器。有了单独的数据库服务器，我们的架构现在看起来像*图13.2*。
- en: Here we're starting to move into what's usually called **n-tier** architecture.
    Don't be scared by the buzzword-it just refers to the fact that different tiers
    of the web stack get separated out onto different physical machines.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们开始进入通常称为**n层**架构的领域。不要被这个流行词吓到-它只是指Web堆栈的不同层被分离到不同的物理机器上。
- en: At this point, if you anticipate ever needing to grow beyond a single database
    server, it's probably a good idea to start thinking about connection pooling and/or
    database replication. Unfortunately, there's not nearly enough space to do those
    topics justice in this book, so you'll need to consult your database's documentation
    and/or community for more information.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，如果您预计将来需要超出单个数据库服务器，最好开始考虑连接池和/或数据库复制。不幸的是，在本书中没有足够的空间来充分讨论这些主题，因此您需要咨询数据库的文档和/或社区以获取更多信息。
- en: '![Separating out the database server](img/image_13_002.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![分离数据库服务器](img/image_13_002.jpg)'
- en: 'Figure 13.2: Moving the database onto a dedicated server.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2：将数据库移至专用服务器。
- en: Running a separate media server
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行单独的媒体服务器
- en: 'We still have a big problem left over from the single-server setup: the serving
    of media from the same box that handles dynamic content. Those two activities
    perform best under different circumstances, and by smashing them together on the
    same box you end up with neither performing particularly well.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然有一个大问题留在单服务器设置中：从处理动态内容的同一台机器上提供媒体。这两个活动在不同情况下表现最佳，将它们合并在同一台机器上会导致它们都表现不佳。
- en: So the next step is to separate out the media-that is, anything not generated
    by a Django view-onto a dedicated server (see *Figure 13.3*).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，下一步是将媒体-即任何不是由Django视图生成的东西-分离到专用服务器上（见*图13.3*）。
- en: Ideally, this media server should run a stripped-down web server optimized for
    static media delivery. Nginx is the preferred option here, although **lighttpd**
    is another option, or a heavily stripped down Apache could work too. For sites
    heavy in static content (photos, videos, and so on), moving to a separate media
    server is doubly important and should likely be the first step in scaling up.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，这个媒体服务器应该运行一个针对静态媒体传递进行优化的精简Web服务器。Nginx是首选选项，尽管**lighttpd**是另一个选项，或者一个经过大幅简化的Apache也可以工作。对于静态内容丰富的网站（照片、视频等），将其移至单独的媒体服务器至关重要，很可能是扩展的第一步。
- en: This step can be slightly tricky, however. If your application involves file
    uploads, Django needs to be able to write uploaded media to the media server.
    If media lives on another server, you'll need to arrange a way for that write
    to happen across the network.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这一步可能有点棘手。如果您的应用涉及文件上传，Django需要能够将上传的媒体写入媒体服务器。如果媒体存储在另一台服务器上，您需要安排一种方式让该写入通过网络进行。
- en: '![Running a separate media server](img/image_13_003.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![运行一个独立的媒体服务器](img/image_13_003.jpg)'
- en: 'Figure 13.3: Separating out the media server.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3：分离媒体服务器。
- en: Implementing load balancing and redundancy
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现负载平衡和冗余
- en: At this point, we've broken things down as much as possible. This three-server
    setup should handle a very large amount of traffic-we served around 10 million
    hits a day from an architecture of this sort-so if you grow further, you'll need
    to start adding redundancy.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经尽可能地将事情分解了。这种三台服务器的设置应该可以处理非常大量的流量-我们从这种结构中每天提供了大约1000万次点击-因此，如果您进一步增长，您将需要开始添加冗余。
- en: This is a good thing, actually. One glance at *Figure 13.3* shows you that if
    even a single one of your three servers fails, you'll bring down your entire site.
    So as you add redundant servers, not only do you increase capacity, but you also
    increase reliability. For the sake of this example, let's assume that the web
    server hits capacity first.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这是一件好事。仅看一眼*图13.3*就会告诉你，即使你的三台服务器中的一台失败，你也会使整个站点崩溃。因此，随着添加冗余服务器，不仅可以增加容量，还可以增加可靠性。为了这个例子，让我们假设Web服务器首先达到容量。
- en: 'It''s relatively easy to get multiple copies of a Django site running on different
    hardware-just copy all the code onto multiple machines, and start Apache on all
    of them. However, you''ll need another piece of software to distribute traffic
    over your multiple servers: a *load balancer*.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的硬件上运行多个Django站点的副本相对容易-只需将所有代码复制到多台机器上，并在所有机器上启动Apache。然而，您需要另一种软件来在多台服务器上分发流量：*负载均衡器*。
- en: You can buy expensive and proprietary hardware load balancers, but there are
    a few high-quality open source software load balancers out there. Apache's `mod_proxy`
    is one option, but we've found Perlbal ([http://www.djangoproject.com/r/perlbal/](http://www.djangoproject.com/r/perlbal/))
    to be fantastic. It's a load balancer and reverse proxy written by the same folks
    who wrote `memcached` (see [Chapter 16](ch16.xhtml "Chapter 16. Djangos Cache
    Framework"), *Django's Cache Framework*).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以购买昂贵的专有硬件负载均衡器，但也有一些高质量的开源软件负载均衡器。Apache的`mod_proxy`是一个选择，但我们发现Perlbal（[http://www.djangoproject.com/r/perlbal/](http://www.djangoproject.com/r/perlbal/)）非常棒。它是一个由编写`memcached`的同一批人编写的负载均衡器和反向代理（参见[第16章](ch16.xhtml
    "第16章。Django的缓存框架")，“Django的缓存框架”）。
- en: With the web servers now clustered, our evolving architecture starts to look
    more complex, as shown in *Figure 13.4*.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，随着Web服务器的集群化，我们不断发展的架构开始变得更加复杂，如*图13.4*所示。
- en: '![Implementing load balancing and redundancy](img/image_13_004.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![实现负载均衡和冗余](img/image_13_004.jpg)'
- en: 'Figure 13.4: A load-balanced, redundant server setup.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4：一个负载平衡、冗余的服务器设置。
- en: Notice that in the diagram the web servers are referred to as a cluster to indicate
    that the number of servers is basically variable. Once you have a load balancer
    out front, you can easily add and remove back-end web servers without a second
    of downtime.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在图中，Web服务器被称为集群，表示服务器的数量基本上是可变的。一旦您在前面放置了负载均衡器，您就可以轻松地添加和删除后端Web服务器，而不会有一秒钟的停机时间。
- en: Going big
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩大规模
- en: 'At this point, the next few steps are pretty much derivatives of the last one:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，接下来的几个步骤基本上是上一个步骤的衍生：
- en: As you need more database performance, you might want to add replicated database
    servers. MySQL includes built-in replication; PostgreSQL users should look into
    Slony ([http://www.djangoproject.com/r/slony/](http://www.djangoproject.com/r/slony/))
    and pgpool ([http://www.djangoproject.com/r/pgpool/](http://www.djangoproject.com/r/pgpool/))
    for replication and connection pooling, respectively.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您需要更多的数据库性能时，您可能希望添加复制的数据库服务器。MySQL包含内置的复制功能；PostgreSQL用户应该研究Slony（[http://www.djangoproject.com/r/slony/](http://www.djangoproject.com/r/slony/)）和pgpool（[http://www.djangoproject.com/r/pgpool/](http://www.djangoproject.com/r/pgpool/)）用于复制和连接池。
- en: If the single load balancer isn't enough, you can add more load balancer machines
    out front and distribute among them using round-robin DNS.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果单个负载均衡器不够，您可以在前面添加更多负载均衡器机器，并使用轮询DNS进行分发。
- en: If a single media server doesn't suffice, you can add more media servers and
    distribute the load with your load-balancing cluster.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果单个媒体服务器不够，您可以添加更多媒体服务器，并使用负载平衡集群分发负载。
- en: If you need more cache storage, you can add dedicated cache servers.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您需要更多的缓存存储，您可以添加专用的缓存服务器。
- en: At any stage, if a cluster isn't performing well, you can add more servers to
    the cluster.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任何阶段，如果集群性能不佳，您可以向集群添加更多服务器。
- en: After a few of these iterations, a large-scale architecture may look like *Figure
    13.5*.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 经过几次迭代后，一个大规模的架构可能看起来像*图13.5*。
- en: '![Going big](img/image_13_005.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![扩大规模](img/image_13_005.jpg)'
- en: 'Figure 13.5: An example large-scale Django setup.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5：一个大规模Django设置的示例。
- en: Though we've shown only two or three servers at each level, there's no fundamental
    limit to how many you can add.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在每个级别只显示了两到三台服务器，但你可以添加的服务器数量并没有根本限制。
- en: Performance tuning
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能调优
- en: If you have huge amount of money, you can just keep throwing hardware at scaling
    problems. For the rest of us, though, performance tuning is a must.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有大量的资金，你可以不断地投入硬件来解决扩展问题。然而，对于我们其他人来说，性能调优是必不可少的。
- en: Note
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Incidentally, if anyone with monstrous gobs of cash is actually reading this
    book, please consider a substantial donation to the Django Foundation. They accept
    uncut diamonds and gold ingots, too.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，如果有人拥有大量资金正在阅读这本书，请考虑向Django基金会进行大额捐赠。他们也接受未加工的钻石和金锭。
- en: Unfortunately, performance tuning is much more of an art than a science, and
    it is even more difficult to write about than scaling. If you're serious about
    deploying a large-scale Django application, you should spend a great deal of time
    learning how to tune each piece of your stack.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，性能调优更多地是一门艺术而不是一门科学，而且比扩展更难写。如果你真的想部署一个大规模的Django应用程序，你应该花大量时间学习如何调优你的每个部分。
- en: The following sections, though, present a few Django-specific tuning tips we've
    discovered over the years.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的章节介绍了多年来我们发现的一些Django特定的调优技巧。
- en: There's no such thing as Too Much RAM
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 没有太多的RAM这种事
- en: Even the really expensive RAM is relatively affordable these days. Buy as much
    RAM as you can possibly afford, and then buy a little bit more. Faster processors
    won't improve performance all that much; most web servers spend up to 90% of their
    time waiting on disk I/O. As soon as you start swapping, performance will just
    die. Faster disks might help slightly, but they're much more expensive than RAM,
    such that it doesn't really matter.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是非常昂贵的RAM在今天也相对实惠。尽可能多地购买RAM，然后再多买一点。更快的处理器不会显著提高性能；大多数Web服务器花费高达90%的时间在等待磁盘I/O。一旦开始交换，性能就会急剧下降。更快的磁盘可能会稍微有所帮助，但它们比RAM要贵得多，以至于并不重要。
- en: If you have multiple servers, the first place to put your RAM is in the database
    server. If you can afford it, get enough RAM to fit your entire database into
    memory. This shouldn't be too hard; we've developed a site with more than half
    a million newspaper articles, and it took under 2GB of space.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多台服务器，将RAM放在数据库服务器是首选。如果你有能力，获得足够的RAM来容纳整个数据库到内存中。这并不难；我们开发了一个拥有超过50万篇报纸文章的网站，只需要不到2GB的空间。
- en: Next, max out the RAM on your web server. The ideal situation is one where neither
    server swaps-ever. If you get to that point, you should be able to withstand most
    normal traffic.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，充分利用Web服务器上的RAM。理想情况是服务器从不交换。如果你达到了这一点，你应该能够承受大部分正常的流量。
- en: Turn off Keep-Alive
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关闭保持活动状态
- en: '`Keep-Alive` is a feature of HTTP that allows multiple HTTP requests to be
    served over a single TCP connection, avoiding the TCP setup/teardown overhead.
    This looks good at first glance, but it can kill the performance of a Django site.
    If you''re properly serving media from a separate server, each user browsing your
    site will only request a page from your Django server every ten seconds or so.
    This leaves HTTP servers waiting around for the next keep-alive request, and an
    idle HTTP server just consumes RAM that an active one should be using.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 保持活动状态是HTTP的一个特性，允许多个HTTP请求通过单个TCP连接提供，避免了TCP建立/拆除的开销。乍一看，这看起来不错，但它可能会影响Django网站的性能。如果你从一个单独的服务器正确地提供媒体，每个浏览你网站的用户大约每十秒钟只会从你的Django服务器请求一个页面。这会让HTTP服务器等待下一个保持活动状态的请求，而空闲的HTTP服务器只会消耗应该被活跃服务器使用的内存。
- en: Use Memcached
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Memcached
- en: Although Django supports a number of different cache back-ends, none of them
    even come close to being as fast as Memcached. If you have a high-traffic site,
    don't even bother with the other backends-go straight to Memcached.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Django支持许多不同的缓存后端，但没有一个能够像Memcached一样快。如果你有一个高流量的网站，甚至不要考虑其他后端，直接使用Memcached。
- en: Use Memcached often
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 经常使用Memcached
- en: 'Of course, selecting Memcached does you no good if you don''t actually use
    it. [Chapter 16](ch16.xhtml "Chapter 16. Djangos Cache Framework"), *Django''s
    Cache Framework*, is your best friend here: learn how to use Django''s cache framework,
    and use it everywhere possible. Aggressive, pre-emptive caching is usually the
    only thing that will keep a site up under major traffic.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你实际上不使用Memcached，选择Memcached对你没有好处。[第16章](ch16.xhtml "第16章。Django的缓存框架")，*Django的缓存框架*，是你的好朋友：学习如何使用Django的缓存框架，并在可能的地方使用它。积极的、预防性的缓存通常是唯一能够在大流量下保持网站稳定的方法。
- en: Join the conversation
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加入讨论
- en: Each piece of the Django stack-from Linux to Apache to PostgreSQL or MySQL-has
    an awesome community behind it. If you really want to get that last 1% out of
    your servers, join the open source communities behind your software and ask for
    help. Most free-software community members will be happy to help. And also be
    sure to join the Django community-an incredibly active, growing group of Django
    developers. Our community has a huge amount of collective experience to offer.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Django的每个部分-从Linux到Apache再到PostgreSQL或MySQL-都有一个强大的社区支持。如果你真的想从你的服务器中获得最后1%，加入你软件背后的开源社区并寻求帮助。大多数自由软件社区成员都会乐意帮助。还要确保加入Django社区-一个活跃、不断增长的Django开发者群体。我们的社区有大量的集体经验可以提供。
- en: What's next?
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: The remaining chapters focus on other Django features that you may or may not
    need, depending on your application. Feel free to read them in any order you choose.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的章节关注其他Django功能，这取决于你的应用是否需要。随意按照你选择的任何顺序阅读它们。
