- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Understanding the Raspberry Pi
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Raspberry Pi
- en: Welcome to the wonderful world of **Internet of Things** (**IoT**) projects
    and the Raspberry Pi in this, the second edition of *Internet of Things* *Programming
    Projects*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到物联网项目以及Raspberry Pi的奇妙世界，这是《物联网编程项目》的第二版。
- en: In this book, we will take a journey into IoT projects using the Raspberry Pi.
    In the first part of this book, we’ll explore IoT projects on the Raspberry Pi,
    initially transforming it into a weather station with the Sense HAT to capture
    real-time data. Later, we’ll use motors and **general-purpose input/output** (**GPIO**)
    pins to repurpose the Pi as an analog metering device.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将通过Raspberry Pi探索物联网项目。本书的第一部分，我们将探讨Raspberry Pi上的物联网项目，最初将其转变为带有Sense
    HAT的气象站以捕获实时数据。随后，我们将使用电机和**通用输入/输出**（**GPIO**）引脚将Pi重新用作模拟计量设备。
- en: 'We will then create an IoT home security system, using the Raspberry Pi as
    the central hub for an alarm system. We’ll also develop a LoRa-enabled IoT monitoring
    station for remote sensing. The book culminates with our most ambitious project:
    building an IoT robot car powered by the Raspberry Pi.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个物联网家庭安全系统，使用Raspberry Pi作为警报系统的中心枢纽。我们还将开发一个具有LoRa功能的物联网远程监测站。本书的结尾是我们最雄心勃勃的项目：构建一个由Raspberry
    Pi驱动的物联网机器人汽车。
- en: We will start this chapter by exploring the various Raspberry Pi models and
    their significance, observing the evolution and advancements in processing power,
    memory, and capabilities over time.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从此章节开始，探讨各种Raspberry Pi型号及其重要性，观察它们在处理能力、内存和功能方面的演变和进步。
- en: We will also look at alternatives to the Raspberry Pi available in the IoT landscape,
    enabling us to make informed decisions based on our project requirements. We compare
    these alternatives with the Raspberry Pi, highlighting their unique specifications
    and capabilities.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将探讨物联网（IoT）领域中可用的Raspberry Pi替代品，使我们能够根据项目需求做出明智的决定。我们将这些替代品与Raspberry Pi进行比较，突出它们的独特规格和能力。
- en: Furthermore, we dive into Raspberry Pi’s **Hardware Attached on Top** (**HAT**),
    which expands the Raspberry Pi’s capabilities through add-on boards. Specifically,
    we explore the Pibrella HAT and the Raspberry Pi Sense HAT, highlighting their
    ability to enhance the Raspberry Pi with additional features and functionalities.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将深入了解Raspberry Pi的**硬件附加在顶部**（**HAT**），它通过附加板扩展了Raspberry Pi的功能。具体来说，我们将探索Pibrella
    HAT和Raspberry Pi Sense HAT，突出它们通过增加额外功能和功能来增强Raspberry Pi的能力。
- en: Our Sense HAT projects will make use of an optional custom Raspberry Pi case
    we see in *Figure 1**.1*. This case allows us to display our Raspberry Pi in a
    vertical format and make use of the dot matrix display on the Sense HAT. The build
    files for the Raspberry Pi 4B and Raspberry Pi 5 versions’ case are available
    in the GitHub repository for the book.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Sense HAT项目将利用*图1**.1*中看到的可选定制Raspberry Pi外壳。此外壳允许我们将Raspberry Pi以垂直格式展示，并利用Sense
    HAT上的点阵显示屏。本书的GitHub仓库中提供了Raspberry Pi 4B和Raspberry Pi 5版本外壳的构建文件。
- en: '![Figure 1.1 – Raspberry Pi 4B and Sense HAT in a custom case](img/B21282_01_1.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – 定制外壳中的Raspberry Pi 4B和Sense HAT](img/B21282_01_1.jpg)'
- en: Figure 1.1 – Raspberry Pi 4B and Sense HAT in a custom case
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 定制外壳中的Raspberry Pi 4B和Sense HAT
- en: We will also discuss a range of operating systems compatible with the Raspberry
    Pi beyond the official Raspberry Pi OS. These options cater to various applications,
    including networked audio systems, aviation-related projects, retro gaming, and
    3D printing.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将讨论一系列与Raspberry Pi兼容的操作系统，这些操作系统超出了官方的Raspberry Pi OS。这些选项满足各种应用需求，包括网络音频系统、航空相关项目、复古游戏和3D打印。
- en: In the context of IoT applications, we will highlight the Raspberry Pi’s versatility
    and power as it serves as an optimal platform for processing real-time data and
    controlling physical devices, pivotal in the development and deployment of versatile
    IoT projects.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在物联网应用背景下，我们将强调Raspberry Pi的多功能和强大，因为它作为处理实时数据和控制物理设备的最佳平台，对于开发和应用多样化的物联网项目至关重要。
- en: Finally, we will explore the Raspberry Pi as a robust development platform,
    equipped with pre-installed tools for software development. We conclude the chapter
    with a series of programming projects using the Raspberry Pi with the Sense HAT
    to extract sensory information as we build a scrolling environmental data display.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将探索树莓派作为一个强大的开发平台，它配备了预安装的软件开发工具。我们将通过一系列使用树莓派和Sense HAT提取感官信息的项目来结束本章，这些项目用于构建滚动环境数据显示屏。
- en: Our hands-on dive into programming in this chapter will fine-tune our programming
    abilities and ready us for exciting IoT project development throughout this book.
    Although there is a lot of information that is covered in this chapter, we should
    not worry if we feel overwhelmed or if we can’t digest all the information from
    the first chapter right away. As we progress through the book, we will gain more
    experience and understanding, making it easier to grasp the concepts introduced
    early on.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过实际编程来提高我们的编程能力，并为我们在这本书中开发令人兴奋的物联网项目做好准备。尽管本章涵盖了大量的信息，但如果感到不知所措或无法立即消化第一章的所有信息，我们也不必担心。随着我们继续阅读本书，我们将获得更多的经验和理解，这将使早期介绍的概念更容易掌握。
- en: 'We will cover the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下内容：
- en: Exploring Raspberry Pi models
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索树莓派型号
- en: Exploring alternatives to the Raspberry Pi
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索树莓派的替代方案
- en: Looking at the power of HATs
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看HAT的强大功能
- en: Investigating operating systems for the Raspberry Pi
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查树莓派的操作系统
- en: Using the Raspberry Pi for IoT
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用树莓派进行物联网
- en: Getting started with Raspberry Pi development
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始树莓派开发
- en: Technical requirements
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are required to complete this chapter:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是要完成本章所需的：
- en: Late-model Raspberry Pi, such as the Raspberry Pi 5 4/8 GB model or Raspberry
    Pi 4B 4/8 GB model
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 晚期型号的树莓派，如树莓派5 4/8 GB型号或树莓派4B 4/8 GB型号
- en: Keyboard, mouse, and monitor
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键盘、鼠标和显示器
- en: Raspberry Pi Sense HAT is optional but encouraged; we will be making use of
    the Sense HAT software emulator
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派Sense HAT是可选的，但推荐使用；我们将使用Sense HAT软件模拟器
- en: The GitHub repository for the chapter is located at [https://github.com/PacktPublishing/-Internet-of-Things-Programming-Projects-2nd-Edition/tree/main/Chapter1](https://github.com/PacktPublishing/-Internet-of-Things-Programming-Projects-2nd-Edition/tree/main/Chapter1).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该章节的GitHub仓库位于[https://github.com/PacktPublishing/-Internet-of-Things-Programming-Projects-2nd-Edition/tree/main/Chapter1](https://github.com/PacktPublishing/-Internet-of-Things-Programming-Projects-2nd-Edition/tree/main/Chapter1)。
- en: For those that have access to a 3D printer or 3D printing service, there are
    `.stl` files available in the `Build Files` directory of this chapter’s GitHub
    repository for the construction of the optional custom case. Files are available
    for the Raspberry Pi 5 and Raspberry Pi 4B versions of the case.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些可以使用3D打印机或3D打印服务的人来说，本章GitHub仓库的“构建文件”目录中提供了`.stl`文件，用于构建可选的定制外壳。外壳的文件适用于树莓派5和树莓派4B版本。
- en: A general knowledge of programming is also required. We will be using the Python
    programming language in this book. We will start with basic code and work our
    way toward more advanced coding as we go through the projects in the book.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要具备一定的编程知识。本书中将使用Python编程语言。我们将从基本的代码开始，随着我们在书中完成项目，我们将逐步过渡到更高级的编码。
- en: Exploring Raspberry Pi models
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索树莓派型号
- en: Every Raspberry Pi model, from the initial Raspberry Pi 1 to the current Raspberry
    Pi 5 and the compact Pi Zero, possesses distinct characteristics and functionalities
    that make it an exciting choice for IoT developers. Each model excels in different
    areas, such as processing power, size, and energy efficiency.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每款树莓派型号，从最初的树莓派1到当前的树莓派5以及紧凑型Pi Zero，都具有独特的特性和功能，使其成为物联网开发者的一个令人兴奋的选择。每个型号在不同的领域表现出色，例如处理能力、尺寸和能效。
- en: The Raspberry Pi models have evolved significantly over time, with each iteration
    bringing notable advancements in processing power, memory, and capabilities.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派型号随着时间的推移发生了显著的变化，每一代都带来了在处理能力、内存和功能方面的显著进步。
- en: 'In the following list, we compare the various models of the Raspberry Pi, starting
    with the first one:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下列表中，我们比较了各种树莓派型号，从第一个开始：
- en: '**Raspberry Pi 1**: Launched in February 2012, the Raspberry Pi 1 changed the
    world of computing with its affordability and accessibility. Equipped with a 700
    MHz processor, 512 MB RAM, and a $35 price point, the first model of the Raspberry
    Pi spurred digital innovation and highlighted the potential of single-board computers.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**树莓派 1**：于 2012 年 2 月推出，树莓派 1 以其性价比和易用性改变了计算世界。配备 700 MHz 处理器、512 MB RAM 和
    35 美元的价格点，树莓派的第一款产品激发了数字创新，并突出了单板计算机的潜力。'
- en: '**Raspberry Pi 2**: Released in February 2015, the Raspberry Pi 2 improved
    on the first model with a 900 MHz quad-core processor and doubled RAM at 1 GB.
    The Raspberry Pi 2 also expanded the GPIO from 26 to 40 pins, allowing for a new
    wave of 40-pin HATs. These advancements allowed the Raspberry Pi 2 to become a
    hub for complex projects, from robotics to IoT applications.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**树莓派 2**：于 2015 年 2 月发布，树莓派 2 在第一代模型的基础上进行了改进，配备了 900 MHz 四核处理器，并将 RAM 增加到
    1 GB。树莓派 2 还将 GPIO 从 26 引脚扩展到 40 引脚，允许出现新一代的 40 引脚 HAT。这些进步使得树莓派 2 成为复杂项目的中心，从机器人技术到物联网应用。'
- en: '**Raspberry Pi 3**: Released in February 2016, the Raspberry Pi 3 sported a
    1.2 GHz quad-core processor. This improved performance by 50-60% and enabled more
    resource-intensive applications. Like the Raspberry Pi 2, it maintained 1 GB RAM.
    Wi-Fi and Bluetooth 4.1 were integrated, simplifying connectivity and freeing
    USB ports (a USB Wi-Fi dongle was required on the Raspberry Pi 2). A new dual-core
    VideoCore IV GPU enhanced multimedia projects with improved video capabilities.
    *Figure 1**.2* provides a layout of a Raspberry Pi 3, highlighting several of
    its key components:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**树莓派 3**：于 2016 年 2 月发布，树莓派 3 配备了 1.2 GHz 四核处理器。这提高了性能 50-60%，并支持更资源密集的应用程序。与树莓派
    2 类似，它保持了 1 GB RAM。集成了 Wi-Fi 和蓝牙 4.1，简化了连接性并释放了 USB 端口（树莓派 2 需要一个 USB Wi-Fi 拨片）。新的双核
    VideoCore IV GPU 通过改进的视频功能增强了多媒体项目。*图 1**.2* 提供了树莓派 3 的布局，突出了其几个关键组件：'
- en: '![Figure 1.2 – Raspberry Pi 3B](img/B21282_01_2.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 树莓派 3B](img/B21282_01_2.jpg)'
- en: Figure 1.2 – Raspberry Pi 3B
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 树莓派 3B
- en: '**Raspberry Pi 4**: Unveiled in June 2019, the Raspberry Pi 4 marked a significant
    evolution in the series, pushing the boundaries of single-board computers closer
    to conventional desktop PCs in terms of capabilities, all while preserving its
    compact size and affordability. What set the Pi 4 apart was the variety of memory
    options it offered, 2 GB, 4 GB, and 8 GB LPDDR4-3200 SDRAM, a substantial improvement
    over the previous 1 GB LPDDR2 RAM, enabling smoother multitasking and handling
    of data-intensive tasks. Improved connectivity featured Gigabit Ethernet, dual-band
    802.11ac Wi-Fi, and Bluetooth 5.0\. Its multimedia capabilities saw a boost with
    two micro-HDMI ports supporting 4K resolution, allowing the operation of two monitors
    at once. The Raspberry Pi 4 introduced two USB 3.0 ports for quicker data transfer
    and replaced the micro-USB power connector with a USB-C, supporting its enhanced
    features. In *Figure 1**.3*, we see a layout of a Raspberry Pi 4 with several
    of its key components highlighted:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**树莓派 4**：于 2019 年 6 月发布，树莓派 4 标志着该系列的重大演变，在保持紧凑尺寸和性价比的同时，将单板计算机的能力推向了接近传统台式电脑的界限。Pi
    4 的独特之处在于它提供的多种内存选项，包括 2 GB、4 GB 和 8 GB LPDDR4-3200 SDRAM，这比之前的 1 GB LPDDR2 RAM
    有显著提升，使得多任务处理和数据密集型任务的处理更加流畅。改进的连接性包括千兆以太网、双频段 802.11ac Wi-Fi 和蓝牙 5.0。其多媒体能力通过两个支持
    4K 分辨率的微型 HDMI 端口得到提升，允许同时操作两个显示器。树莓派 4 引入了两个 USB 3.0 端口以实现更快速的数据传输，并替换了微型 USB
    电源连接器，采用了 USB-C，支持其增强功能。在 *图 1**.3* 中，我们可以看到树莓派 4 的布局，其中突出了其几个关键组件：'
- en: '![Figure 1.3 – Raspberry 4B](img/B21282_01_3.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 树莓派 4B](img/B21282_01_3.jpg)'
- en: Figure 1.3 – Raspberry 4B
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 树莓派 4B
- en: The Raspberry Pi 4 includes two micro-HDMI ports (for dual displays), four USB
    ports (two 3.0, two 2.0), a Gigabit Ethernet port, a USB-C power port, a micro-SD
    slot, a camera port, and a 3.5mm audio-composite video jack.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派 4 包括两个微型 HDMI 端口（用于双显示器）、四个 USB 端口（两个 3.0，两个 2.0）、一个千兆以太网端口、一个 USB-C 电源端口、一个微型
    SD 插槽、一个摄像头端口和一个 3.5mm 音频复合视频插孔。
- en: '**Raspberry Pi 5**: The Raspberry Pi 5, released in October 2023, marks a significant
    advancement in the series, enhancing computational and multimedia capabilities
    for educational and DIY applications with its upgraded CPU and GPU.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**树莓派 5**：树莓派 5 于 2023 年 10 月发布，标志着该系列的重大进步，通过升级的 CPU 和 GPU，增强了教育和个人 DIY 应用的计算和多媒体能力。'
- en: Priced at $60 for 4 GB and $80 for 8 GB, the Raspberry Pi 5 features a 2.4GHz
    quad-core Arm Cortex-A76 CPU, VideoCore VII GPU, dual 4Kp60 HDMI outputs, and
    various connectivity options including Wi-Fi and Bluetooth. It also introduces
    a power button, enhanced memory, and I/O capabilities, including two four-lane
    Mobile Industry Processor Interface (MIPI) camera/display transceivers. These
    transceivers offer the flexibility to connect any combination of two cameras or
    displays, making them ideal for advanced multimedia projects.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 价格为 4 GB 60 美元和 8 GB 80 美元，Raspberry Pi 5 配备了 2.4GHz 四核 Arm Cortex-A76 CPU、VideoCore
    VII GPU、双 4Kp60 HDMI 输出，以及包括 Wi-Fi 和蓝牙在内的各种连接选项。它还引入了电源按钮、增强的内存和 I/O 功能，包括两个四通道移动行业处理器接口（MIPI）摄像头/显示屏收发器。这些收发器提供了连接任意组合的两个摄像头或显示屏的灵活性，使其非常适合高级多媒体项目。
- en: The Raspberry Pi 5 also features a PCIe 2.0 x1 interface, allowing the connection
    of fast peripherals to expand its capabilities for advanced applications, such
    as high-speed networking or storage solutions.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Raspberry Pi 5 还配备了 PCIe 2.0 x1 接口，允许连接快速外设，以扩展其在高级应用中的功能，例如高速网络或存储解决方案。
- en: 'The accompanying Raspberry Pi Active Cooler, with its efficient heatsink and
    fan design, reduces CPU temperatures by approximately 20 degrees Celsius, vital
    for intensive tasks. It offers easy installation and up to 8000 RPM fan speed,
    enhancing performance and longevity. In *Figure 1**.4*, the Raspberry Pi 5 is
    displayed alongside its Active Cooler, with key components such as the PCIe 2.0
    Interface, GPIO Header, USB Ports, Ethernet Port, dual micro-HDMI Ports, and the
    two MIPI Transceivers labeled:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 伴随的 Raspberry Pi Active Cooler，凭借其高效的散热器和风扇设计，可将 CPU 温度降低约 20 摄氏度，这对于密集型任务至关重要。它提供易于安装，风扇速度高达
    8000 RPM，增强性能和耐用性。在 *图 1**.4* 中，Raspberry Pi 5 与其 Active Cooler 并排展示，关键组件如 PCIe
    2.0 接口、GPIO 头、USB 端口、以太网端口、双微 HDMI 端口和两个 MIPI 收发器被标注如下：
- en: '![Figure 1.4 – Raspberry Pi 5 (right) and Raspberry Pi Active Cooler (left)](img/B21282_01_4.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – Raspberry Pi 5（右侧）和 Raspberry Pi Active Cooler（左侧）](img/B21282_01_4.jpg)'
- en: Figure 1.4 – Raspberry Pi 5 (right) and Raspberry Pi Active Cooler (left)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – Raspberry Pi 5（右侧）和 Raspberry Pi Active Cooler（左侧）
- en: We will feature the Raspberry Pi 5 for our projects that involve a single-board
    computer, although the late-model Raspberry Pi 4B should suffice too.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管新款 Raspberry Pi 4B 也足够使用，但我们将为涉及单板计算机的项目使用 Raspberry Pi 5。
- en: '**Raspberry Pi Zero and Zero W**: Launched in November 2015, the Raspberry
    Pi Zero shrank the Raspberry Pi to a size of just 65mm by 30mm. It packed a 1
    GHz single-core CPU and 512 MB of RAM at an affordable price. It came with a mini-HDMI
    Port, a micro-USB OTG Port, a micro-USB Power Port, and a HAT-compatible 40-pin
    header, making it ideal for compact applications such as IoT projects, wearables,
    as well as embedded systems. The Raspberry Pi Zero 2W was built on the same form
    factor and was introduced in 2021\. It brought an enhanced 1 GHz quad-core ARM
    Cortex-A53 CPU, boosting performance and handling more demanding tasks. Its wireless
    capabilities with onboard Wi-Fi and Bluetooth further expanded its versatility,
    making it an excellent choice for compact projects. *Figure 1**.5* provides a
    layout of a Raspberry Pi Zero 2W:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Raspberry Pi Zero 和 Zero W**：2015 年 11 月推出，Raspberry Pi Zero 将其尺寸缩小到仅为 65mm
    x 30mm。它以可承受的价格配备了 1 GHz 单核 CPU 和 512 MB 的 RAM，并配备了 mini-HDMI 端口、micro-USB OTG
    端口、micro-USB 电源端口和 HAT 兼容的 40 引脚头，使其非常适合紧凑型应用，如物联网项目、可穿戴设备和嵌入式系统。Raspberry Pi
    Zero 2W 采用相同的形态设计，并于 2021 年推出。它配备了增强的 1 GHz 四核 ARM Cortex-A53 CPU，提高了性能并能够处理更复杂的工作。其内置
    Wi-Fi 和蓝牙的无线功能进一步扩展了其多功能性，使其成为紧凑型项目的绝佳选择。*图 1**.5* 展示了 Raspberry Pi Zero 2W 的布局：'
- en: '![Figure 1.5 – Raspberry Pi Zero 2W](img/B21282_01_5.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – Raspberry Pi Zero 2W](img/B21282_01_5.jpg)'
- en: Figure 1.5 – Raspberry Pi Zero 2W
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – Raspberry Pi Zero 2W
- en: '**Raspberry Pi Pico and Pico W**: Introduced in January 2021, the Raspberry
    Pi Pico is a compact microcontroller board designed for embedded projects and
    low-level programming. It’s only 51mm x 21mm in size, but highly flexible. It
    supports **Serial Peripheral Interface** (**SPI**) for high-speed data exchange,
    **Inter-Integrated Circuit** (**I2C**) for communication between peripherals,
    and **Universal Asynchronous Receiver/Transmitter** (**UART**) for serial communication.
    The Raspberry Pi Pico W, launched in February 2022, extended this flexibility
    with onboard Wi-Fi and Bluetooth. Unlike the traditional Raspberry Pi boards,
    both Pico models offer a unique set of **General Purpose** (**GP**) pins. Importantly,
    the Pico series, as microcontrollers rather than single-board computers, do not
    have an operating system. This enables bare metal programming, an approach where
    code runs directly on the hardware, resulting in faster, more efficient code execution
    and precise control. This makes devices such as the Raspberry Pi Pico ideal for
    applications requiring immediate reactions and close interactions with hardware,
    making it perfect for time-sensitive tasks. In *Figure 1**.6*, we see a Raspberry
    Pi Pico W and a mapping of its GP pins:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Raspberry Pi Pico和Pico W**：2021年1月推出，Raspberry Pi Pico是一款紧凑型微控制器板，专为嵌入式项目和底层编程设计。其尺寸仅为51mm
    x 21mm，但非常灵活。它支持**串行外设接口**（**SPI**）进行高速数据交换，**集成电路间接口**（**I2C**）用于外设之间的通信，以及**通用异步收发传输器**（**UART**）进行串行通信。Raspberry
    Pi Pico W于2022年2月推出，通过板载Wi-Fi和蓝牙扩展了这种灵活性。与传统Raspberry Pi板不同，这两种Pico型号提供了一套独特的**通用**（**GP**）引脚。重要的是，Pico系列作为微控制器而不是单板计算机，没有操作系统。这使裸机编程成为可能，在这种方法中，代码直接在硬件上运行，从而实现更快、更高效的代码执行和精确控制。这使得Raspberry
    Pi Pico等设备非常适合需要即时反应和与硬件紧密交互的应用，使其非常适合对时间敏感的任务。在*图1*.*6*中，我们看到一个Raspberry Pi Pico
    W及其GP引脚的映射：'
- en: '![Figure 1.6 – Raspberry Pi Pico W](img/B21282_01_6.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图1.6 – Raspberry Pi Pico W](img/B21282_01_6.jpg)'
- en: Figure 1.6 – Raspberry Pi Pico W
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 – Raspberry Pi Pico W
- en: We will be using the variations of the Raspberry Pi Pico for projects where
    microcontrollers are more suitable than single-board computers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在微控制器比单板计算机更适合的项目中使用Raspberry Pi Pico的变体。
- en: 'The following is a table outlining some of the differences between Raspberry
    Pi models:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个表格，概述了Raspberry Pi型号之间的一些差异：
- en: '![Figure 1.7 – Table of Raspberry Pi models](img/B21282_01_7.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图1.7 – Raspberry Pi型号表](img/B21282_01_7.jpg)'
- en: Figure 1.7 – Table of Raspberry Pi models
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – Raspberry Pi型号表
- en: Now that we have a better understanding of the ecosystem of Raspberry Pi devices,
    let’s look at some alternatives.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对Raspberry Pi设备的生态系统有了更好的了解，让我们来看看一些替代方案。
- en: Exploring alternatives to the Raspberry Pi
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Raspberry Pi的替代方案
- en: 'The IoT landscape is filled with a variety of single-board computers and microcontrollers,
    each offering unique specifications that cater to specific project needs. By comparing
    these alternatives with the Raspberry Pi, we can make informed decisions about
    the ideal platform for our unique requirements. The following is a breakdown of
    some of the alternatives to the Raspberry Pi that we may consider for our IoT
    projects. We will only focus on the Raspberry Pi and not the Raspberry Pi Pico
    as we will be using the former for this chapter’s programming projects:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网（IoT）领域充满了各种单板计算机和微控制器，每种都提供独特的规格，以满足特定项目的需求。通过将这些替代方案与Raspberry Pi进行比较，我们可以就适合我们独特需求的理想平台做出明智的决定。以下是我们可能考虑用于我们的物联网项目的Raspberry
    Pi替代方案的概述。我们将只关注Raspberry Pi，而不是Raspberry Pi Pico，因为我们将在本章的编程项目中使用前者：
- en: '**BeagleBone Black**: The BeagleBone Black features a 1GHz ARM Cortex-A8 processor,
    512MB DDR3 RAM, 4 GB flash storage, and many connectivity options. Its distinct
    feature, the **Programmable Real-Time Units** (**PRUs**), allow for precise real-time
    processing, ideal for applications such as robotics or industrial automation.
    Despite this, the Raspberry Pi remains popular due to its faster 1.5GHz 64-bit
    quad-core processor, beneficial for resource-intensive applications. The Raspberry
    Pi’s main advantage, however, is its large community software ecosystem, which
    greatly helps in easing development.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BeagleBone Black**：BeagleBone Black配备了1GHz ARM Cortex-A8处理器、512MB DDR3 RAM、4
    GB闪存和许多连接选项。其独特的特性是**可编程实时单元**（**PRUs**），允许进行精确的实时处理，非常适合机器人或工业自动化等应用。尽管如此，Raspberry
    Pi因其更快的1.5GHz 64位四核处理器而仍然受欢迎，这对于资源密集型应用来说是有益的。然而，Raspberry Pi的主要优势是其庞大的社区软件生态系统，这极大地帮助简化了开发。'
- en: '**Arduino Uno**: Like the Raspberry Pi Pico, the Arduino Uno is a microcontroller
    rather than a single-board computer. It uses the ATmega328P microcontroller, operates
    at 16 MHz, and has 2 KB of RAM. The Arduino Uno shines with its easy-to-use shields
    for functionality expansion, including Wi-Fi, Bluetooth, and sensor capabilities,
    making it ideal for simpler IoT projects. It benefits from an extensive ecosystem
    and easy-to-use **Integrated Development Environment** (**IDE**). However, for
    projects requiring heavy computations, multitasking, or extensive data processing,
    the more powerful Raspberry Pi is a preferable option.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arduino Uno**：与Raspberry Pi Pico一样，Arduino Uno是一款微控制器而不是单板计算机。它使用ATmega328P微控制器，运行在16
    MHz，并具有2 KB的RAM。Arduino Uno以其易于使用的功能扩展盾而闪耀，包括Wi-Fi、蓝牙和传感器功能，使其非常适合简单的物联网项目。它受益于广泛的生态系统和易于使用的**集成开发环境**（**IDE**）。然而，对于需要大量计算、多任务处理或大量数据处理的项目，更强大的Raspberry
    Pi是更好的选择。'
- en: '**ESP32**: The ESP32 by Espressif Systems is a microcontroller like the Arduino
    Uno but with distinctive features. Its dual-core Xtensa LX6 microprocessor and
    520 KB of SRAM, combined with in-built Wi-Fi and Bluetooth, enable robust wireless
    connectivity for IoT applications. Certain ESP32 models further expand their potential
    with additional sensors and communication protocols, such as LoRa for long-range,
    low-power communications. Although it doesn’t match the Raspberry Pi’s processing
    and RAM capabilities, it shines in areas prioritizing wireless connectivity and
    low power use. Its compactness and cost-effectiveness make it suitable for diverse
    IoT projects, from remote monitoring to home automation and wearables. In *Figure
    1**.8*, we see an ESP32 with built-in LoRa communication and **Organic Light-Emitting
    Diode** (**OLED**) screen (the LoRa board is covered by the screen):'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ESP32**：Espressif Systems的ESP32是一款类似于Arduino Uno的微控制器，但具有独特的特性。其双核Xtensa
    LX6微处理器和520 KB的SRAM，结合内置的Wi-Fi和蓝牙，为物联网应用提供了强大的无线连接。某些ESP32型号通过额外的传感器和通信协议进一步扩展了其潜力，例如用于长距离、低功耗通信的LoRa。尽管它不匹配Raspberry
    Pi的处理能力和RAM，但在优先考虑无线连接和低功耗使用的领域表现出色。其紧凑性和成本效益使其适用于从远程监控到家庭自动化和可穿戴设备的各种物联网项目。在*图1*.8中，我们看到一个集成了LoRa通信和**有机发光二极管**（**OLED**）屏幕的ESP32（LoRa板被屏幕覆盖）：'
- en: '![Figure 1.8 – ESP32 with the OLED screen and LoRa](img/B21282_01_8.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图1.8 – 带有OLED屏幕和LoRa的ESP32](img/B21282_01_8.jpg)'
- en: Figure 1.8 – ESP32 with the OLED screen and LoRa
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8 – 带有OLED屏幕和LoRa的ESP32
- en: '**Arduino Nano RP2040 Connect**: The Arduino Nano RP2040 Connect was developed
    to integrate Raspberry Pi’s RP2040 microcontroller into a compact, feature-rich
    Arduino board, offering a unique blend of performance and connectivity for IoT
    projects and embedded AI solutions. It combines the dual-core processing power
    of the RP2040 with onboard Wi-Fi and Bluetooth, a six-axis IMU, microphone, and
    RGB LED, targeting a seamless IoT development experience. Its compatibility with
    the Arduino Cloud platform simplifies project management with capabilities such
    as over-the-air updates.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arduino Nano RP2040 Connect**：Arduino Nano RP2040 Connect的开发是为了将Raspberry
    Pi的RP2040微控制器集成到一个紧凑、功能丰富的Arduino板上，为物联网项目和嵌入式人工智能解决方案提供独特的性能和连接性结合。它结合了RP2040的双核处理能力、板载Wi-Fi和蓝牙、六轴IMU、麦克风和RGB
    LED，旨在提供无缝的物联网开发体验。它与Arduino Cloud平台的兼容性简化了项目管理，包括空中更新等功能。'
- en: Now that we have explored some of the alternatives to the Raspberry Pi, we will
    now turn our focus to expanding the functionality of the Raspberry Pi using HATs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探索了一些Raspberry Pi的替代方案，接下来我们将关注如何使用HATs来扩展Raspberry Pi的功能。
- en: Looking at the power of HATs
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索HAT的强大功能
- en: 'Raspberry Pi HATs are add-on boards that extend the capabilities of the Raspberry
    Pi, offering a wide range of functionality for various applications. These HATs
    provide an easy and convenient way to enhance the Raspberry Pi’s capabilities
    by adding features such as sensors, actuators, displays, communication interfaces,
    and more. In this section, we will explore two notable HATs: the Pibrella HAT
    and the Raspberry Pi Sense HAT.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi HAT是扩展Raspberry Pi功能的附加板，为各种应用提供广泛的功能。这些HAT通过添加传感器、执行器、显示屏、通信接口等功能，为增强Raspberry
    Pi的功能提供了一种简单方便的方式。在本节中，我们将探讨两个值得注意的HAT：Pibrella HAT和Raspberry Pi Sense HAT。
- en: Pibrella HAT
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pibrella HAT
- en: The Pibrella HAT is an excellent beginner-friendly board designed to introduce
    electronics and programming concepts to users of all ages. It features buttons,
    LEDs, and a buzzer, providing a hands-on experience for physical computing projects
    with the Raspberry Pi. With its intuitive interface and Python library, the Pibrella
    HAT offers a great starting point for learning and prototyping.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Pibrella HAT是一款优秀的入门级板，旨在向所有年龄段的用户介绍电子和编程概念。它具有按钮、LED灯和蜂鸣器，为使用Raspberry Pi的物理计算项目提供实际操作体验。凭借其直观的界面和Python库，Pibrella
    HAT为学习和原型设计提供了一个很好的起点。
- en: 'Despite being designed for the first version of the Raspberry Pi and thus having
    only a 26-pin GPIO connection, the Pibrella HAT can still be used with the current
    40-pin versions of the Raspberry Pi. We can see the Pibrella HAT being attached
    to a Raspberry Pi 3B in *Figure 1**.9*:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Pibrella HAT是为Raspberry Pi的第一版设计的，因此只有26针GPIO连接，但它仍然可以与当前40针版本的Raspberry Pi一起使用。我们可以在*图1.9*中看到Pibrella
    HAT被连接到Raspberry Pi 3B：
- en: '![Figure 1.9 – Attaching the Pibrella to a Raspberry Pi 3B](img/B21282_01_9.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图1.9 – 将Pibrella连接到Raspberry Pi 3B](img/B21282_01_9.jpg)'
- en: Figure 1.9 – Attaching the Pibrella to a Raspberry Pi 3B
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9 – 将Pibrella连接到Raspberry Pi 3B
- en: With the Pibrella HAT, users can explore the fundamentals of physical computing,
    learn about input and output interactions, and gain hands-on experience in programming
    with the Raspberry Pi.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Pibrella HAT，用户可以探索物理计算的基础，了解输入和输出交互，并通过使用Raspberry Pi获得编程的实际经验。
- en: The Raspberry Pi Sense HAT
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Raspberry Pi Sense HAT
- en: 'The Raspberry Pi Sense HAT (as shown in *Figure 1**.10*) is an impressive add-on
    board designed to enhance the capabilities of the Raspberry Pi for sensing and
    environmental monitoring applications. Equipped with a variety of sensors, including
    temperature, humidity, pressure, gyroscope, accelerometer, and magnetometer, the
    Sense HAT allows users to gather data from the surrounding environment with ease.
    Its LED matrix display offers a visual output, enabling users to display real-time
    information, including animations:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi Sense HAT（如图*图1.10*所示）是一款令人印象深刻的附加板，旨在增强Raspberry Pi在感应和环境监测应用方面的功能。配备了包括温度、湿度、压力、陀螺仪、加速度计和磁力计在内的各种传感器，Sense
    HAT允许用户轻松地从周围环境中收集数据。其LED矩阵显示屏提供视觉输出，使用户能够显示实时信息，包括动画：
- en: '![Figure 1.10 – Raspberry Pi Sense HAT](img/B21282_01_10.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图1.10 – Raspberry Pi Sense HAT](img/B21282_01_10.jpg)'
- en: Figure 1.10 – Raspberry Pi Sense HAT
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10 – Raspberry Pi Sense HAT
- en: In addition to its wide range of applications, the Sense HAT also plays a vital
    role in the AstroPi program, which enables students to run their own experiments
    on the International Space Station. With its sensors and compact form factor,
    the Sense HAT is an ideal choice for collecting valuable data in a space station.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 除了其广泛的应用范围，Sense HAT还在AstroPi项目中发挥着至关重要的作用，该项目使学生能够在国际空间站上运行自己的实验。凭借其传感器和紧凑的形态，Sense
    HAT是收集空间站中宝贵数据的理想选择。
- en: In this chapter, we begin writing code using a Raspberry Pi 5 and Sense HAT.
    We will write code to fetch the current temperature from Sense HAT’s built-in
    temperature sensor and display it as a scrolling message on the Sense HAT’s dot
    matrix display.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始使用Raspberry Pi 5和Sense HAT编写代码。我们将编写代码以从Sense HAT的内置温度传感器获取当前温度，并将其作为滚动信息显示在Sense
    HAT的点阵显示屏上。
- en: Before we do this, however, we will continue our exploration of the Raspberry
    Pi by looking at the various operating systems available for the Raspberry Pi.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们这样做之前，我们将继续探索Raspberry Pi，通过查看适用于Raspberry Pi的各种操作系统。
- en: Investigating operating systems for the Raspberry Pi
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调查Raspberry Pi的操作系统
- en: 'While the official Raspberry Pi OS (formerly Raspbian) is the most widely used
    operating system for the Raspberry Pi, there is also support for various other
    operating systems. These options range from specialized systems tailored for specific
    applications, such as audio players including Volumio, and more general-purpose
    systems, such as Ubuntu and Raspberry Pi OS itself. In this section, we explore
    a selection of these operating systems and their unique features. They are as
    follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然官方的树莓派操作系统（以前称为Raspbian）是树莓派最广泛使用的操作系统，但也支持各种其他操作系统。这些选项从为特定应用量身定制的专业系统，如包括Volumio在内的音频播放器，到更通用的系统，如Ubuntu和树莓派操作系统本身。在本节中，我们将探讨这些操作系统的选择及其独特功能。具体如下：
- en: '**Volumio**: For those of us aiming to build a networked audio system accessible
    via a computer or smartphone, Volumio is a fitting choice. It transforms the Raspberry
    Pi into a headless audio player, rendering a keyboard or mouse unnecessary. This
    system connects to our audio files via a USB or network, with the option to enhance
    the audio output quality through an add-on HAT. Notably, Volumio includes a Spotify
    plugin, letting us stream music over a sound system.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Volumio**：对于我们这些希望构建可通过计算机或智能手机访问的网络音频系统的人来说，Volumio是一个合适的选择。它将树莓派转换成一个无头音频播放器，使得键盘或鼠标变得不再必要。该系统通过USB或网络连接到我们的音频文件，并提供通过附加HAT增强音频输出质量的选择。值得注意的是，Volumio包括Spotify插件，让我们可以通过音响系统流音乐。'
- en: '**PiFM radio transmitter**: This system image turns the Raspberry Pi into an
    FM transmitter, broadcasting audio files to any standard FM radio receiver. We
    simply need to attach a wire to one of the GPIO pins to function as an antenna,
    creating a surprisingly robust FM signal.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PiFM无线电发射器**：这个系统图像将树莓派转换成一个FM发射器，向任何标准FM收音机广播音频文件。我们只需将一根线连接到GPIO引脚之一，就可以作为天线使用，从而产生一个令人惊讶的强大FM信号。'
- en: '**Stratux**: Stratux is open-source aviation software that can transform a
    Raspberry Pi into a powerful **Automatic Dependent Surveillance-Broadcast** (**ADS-B**)
    receiver. ADS-B is a modern aviation standard that allows aircraft to share their
    position, velocity, and other flight data with air traffic control and other aircraft.
    By installing Stratux on a Raspberry Pi and pairing it with additional hardware,
    we can create our own ADS-B ground station. This enables us to receive real-time
    data from aircraft in our vicinity, including flight trajectories, altitude, and
    speed.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stratux**: Stratux是一款开源航空软件，可以将树莓派转换成一个强大的**自动相关监视广播**（**ADS-B**）接收器。ADS-B是一种现代航空标准，允许飞机与空中交通管制和其他飞机共享其位置、速度和其他飞行数据。通过在树莓派上安装Stratux并与额外的硬件配对，我们可以创建自己的ADS-B地面站。这使得我们能够接收附近飞机的实时数据，包括飞行轨迹、高度和速度。'
- en: '**RetroPie**: For gaming buffs, RetroPie converts our Raspberry Pi into a retro
    gaming console. It effectively emulates several vintage gaming consoles and computers
    such as Amiga, Apple II, Atari 2600, and the Nintendo Entertainment System from
    the early 1980s.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RetroPie**：对于我们这些游戏爱好者来说，RetroPie将我们的树莓派转换成一个复古游戏机。它有效地模拟了包括Amiga、Apple II、Atari
    2600和20世纪80年代初的任天堂娱乐系统在内的多个经典游戏机和计算机。'
- en: '**OctoPi**: For those of us involved in 3D printing, OctoPi transforms a Raspberry
    Pi into a server for a 3D printer, offering control and monitoring remotely through
    a network connection.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OctoPi**：对于我们这些参与3D打印的人来说，OctoPi将树莓派转换成一个3D打印服务器的服务器，通过网络连接远程提供控制和监控。 '
- en: '![Figure 1.11 – OctoDash main screen](img/B21282_01_11.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图1.11 – OctoDash主屏幕](img/B21282_01_11.jpg)'
- en: Figure 1.11 – OctoDash main screen
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11 – OctoDash主屏幕
- en: A companion to OctoPi is **OctoDash** (as shown in *Figure 1**.11*), a touchscreen
    interface that provides an easy-to-use, visually appealing control panel for managing
    and monitoring 3D printing tasks. Using OctoPi with OctoDash can make the interaction
    with a 3D printer more flexible and efficient.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: OctoPi的伴侣是**OctoDash**（如图1.11所示），一个触摸屏界面，提供了一个易于使用、视觉上吸引人的控制面板，用于管理和监控3D打印任务。使用OctoPi与OctoDash可以使与3D打印机的交互更加灵活和高效。
- en: '**Ubuntu for Raspberry Pi**: Ubuntu, a leading open-source Linux distribution
    company, offers a platform for Raspberry Pi. Among Ubuntu’s key strengths is its
    compatibility with the **Robot Operating System** (**ROS**), an adaptable framework
    for writing robot software. With ROS on Ubuntu installed on a Raspberry Pi, we
    can engage in robotics projects, from simple hobbyist endeavors to sophisticated
    industrial automation systems. We will begin our exploration of ROS in [*Chapter
    11*](B21282_11.xhtml#_idTextAnchor173).'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Raspberry Pi的Ubuntu操作系统**：Ubuntu是一家领先的开放源代码Linux发行版公司，为Raspberry Pi提供了一个平台。Ubuntu的关键优势之一是其与**机器人操作系统**（**ROS**）的兼容性，ROS是一个适用于编写机器人软件的灵活框架。在Raspberry
    Pi上安装了Ubuntu的ROS后，我们可以参与从简单的爱好者项目到复杂的工业自动化系统在内的机器人项目。我们将从[*第11章*](B21282_11.xhtml#_idTextAnchor173)开始探索ROS。'
- en: '**Raspberry Pi OS**: Formerly known as Raspbian, Raspberry Pi OS is the most
    widely used operating system for Raspberry Pi due to its direct compatibility,
    lightweight design, and ease of use. Tailored specifically for Raspberry Pi, this
    operating system is abundant in educational software and programming tools, thereby
    aligning with Raspberry Pi’s mission of promoting learning in computer science
    and related fields. Installing Raspberry Pi OS is straightforward with the Raspberry
    Pi Imager, a tool that simplifies the process of burning the system image to a
    microSD card. Once installed, Raspberry Pi OS provides a graphical user interface
    along with a comprehensive suite of programming, internet, and multimedia apps,
    thereby making it a versatile choice for a wide range of Raspberry Pi projects.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Raspberry Pi操作系统**：以前称为Raspbian，Raspberry Pi操作系统是Raspberry Pi上最广泛使用的操作系统，因为它具有直接的兼容性、轻量级设计和易于使用。专为Raspberry
    Pi量身定制，这个操作系统拥有丰富的教育软件和编程工具，因此与Raspberry Pi促进计算机科学和相关领域学习的使命相一致。使用Raspberry Pi
    Imager安装Raspberry Pi操作系统非常简单，这是一个简化将系统镜像烧录到microSD卡过程的工具。安装后，Raspberry Pi操作系统提供图形用户界面以及一套全面的编程、互联网和多媒体应用程序，使其成为各种Raspberry
    Pi项目的多功能选择。'
- en: Now that we have a general understanding of the operating systems available
    for the Raspberry Pi, let’s explore using the Raspberry Pi in the field that this
    book is based on – IoT.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对Raspberry Pi可用的操作系统有了大致的了解，让我们探索在本书所基于的领域——物联网中使用Raspberry Pi。
- en: Using the Raspberry Pi for IoT
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Raspberry Pi进行物联网
- en: IoT has revolutionized the way we interact with technology, giving everyday
    objects the ability to communicate, automate tasks, and generate invaluable data
    for use over the internet. The Raspberry Pi is central to many of these systems.
    Its versatility and robust processing capabilities enable this powerful single-board
    computer to function both as a data processor and a controller for physical devices.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网革命性地改变了我们与技术互动的方式，使日常物品能够进行通信、自动化任务，并在互联网上生成有价值的用于数据。Raspberry Pi是许多这些系统的核心。其多功能性和强大的处理能力使这款强大的单板计算机既能作为数据处理器，也能作为物理设备的控制器。
- en: Uniquely equipped with features such as GPIO pins, USB ports, and Wi-Fi capabilities,
    the Raspberry Pi is a cost-effective and instrumental tool in implementing IoT
    solutions. The Raspberry Pi is especially valuable for processing real-time data
    and managing hardware. The following is a look at examples of Raspberry Pi-based
    IoT systems.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi独特地配备了GPIO引脚、USB端口和Wi-Fi功能，它是实现物联网解决方案的经济高效且功能强大的工具。Raspberry Pi在处理实时数据和硬件管理方面特别有价值。以下是一些基于Raspberry
    Pi的物联网系统示例。
- en: Utilizing web services for IoT applications
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用网络服务进行物联网应用
- en: One of the distinct advantages of using the Raspberry Pi in IoT applications
    is its capacity to process real-time data and control other hardware elements
    based on this data. This capability becomes particularly useful when the data
    is sourced from the internet. The applications for such a setup are vast, from
    environmental monitoring to health tracking, traffic management, and more.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在物联网应用中使用Raspberry Pi的一个独特优势是其处理实时数据并根据这些数据控制其他硬件元素的能力。当数据来自互联网时，这种能力尤其有用。这种设置的用途非常广泛，从环境监测到健康跟踪、交通管理等等。
- en: 'The following example introduces a specific instance of such an application
    – a Raspberry Pi-driven IoT system that suggests appropriate clothing based on
    the current weather conditions (*Figure 1**.12*):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例介绍了一种此类应用的特定实例——一个基于Raspberry Pi的物联网系统，该系统根据当前的天气条件建议合适的服装（*图1**.12*）：
- en: '![Figure 1.12 – Analog dashboard for weather information](img/B21282_01_12.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.12 – 天气信息模拟仪表盘](img/B21282_01_12.jpg)'
- en: Figure 1.12 – Analog dashboard for weather information
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12 – 天气信息模拟仪表盘
- en: Built in the first edition of *Internet of Things Programming Projects*, this
    application utilizes an intuitive analog dashboard to suggest appropriate clothing
    based on the weather conditions. It includes an LED, which indicates if an umbrella
    will be necessary.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在《物联网编程项目》的第一版中构建的应用程序，利用直观的模拟仪表盘根据天气条件建议适当的服装。它包括一个 LED，指示是否需要雨伞。
- en: In addition to being a weather-based application, we can modify this Raspberry
    Pi-powered IoT solution for various applications that involve collecting real-time
    data from a web service and representing it as analog data and an LED.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 除了作为一个基于天气的应用程序之外，我们还可以修改这个由 Raspberry Pi 驱动的物联网解决方案，以适应各种需要从网络服务收集实时数据并将其表示为模拟数据和
    LED 的应用。
- en: 'Here are a few examples:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些例子：
- en: '**Traffic density monitor**: Leveraging similar concepts as described in *Figure
    1**.12*, this application would gather real-time traffic data from a city’s traffic
    monitoring API. The analog meter would show the current traffic density, and the
    LED could flash to indicate heavy traffic or congestion on a specific route. This
    allows commuters to choose the best routes and times to travel.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交通密度监测器**：利用图 1.12 中描述的类似概念，此应用程序将收集来自城市交通监控 API 的实时交通数据。模拟仪表将显示当前的交通密度，LED
    会闪烁以指示特定路线上的交通拥堵或拥堵。这允许通勤者选择最佳路线和时间出行。'
- en: '**Health monitoring system**: With data sourced from a health API or smart
    health devices, the analog meter could display heart rate, blood pressure, or
    any other vital statistic. The LED would act as an immediate visual alert for
    abnormal values, prompting immediate medical attention if necessary.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健康监控系统**：通过来自健康 API 或智能健康设备的数据，模拟仪表可以显示心率、血压或其他任何生命体征。LED 将作为异常值的即时视觉警报，如果需要，将提示立即进行医疗关注。'
- en: '**Water quality monitor**: The IoT device could connect to a web service that
    receives data from water quality sensors in a river, lake, or ocean. The analog
    meter could display metrics such as pH level and the LED could flash when the
    readings indicate potentially hazardous conditions.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水质监测器**：物联网设备可以连接到一个网络服务，该服务接收来自河流、湖泊或海洋中的水质传感器的数据。模拟仪表可以显示如 pH 值等指标，当读数表明可能存在危险条件时，LED
    会闪烁。'
- en: '**Agricultural monitor**: Connected to a web service that pulls data from sensors
    in a farm field (such as soil moisture, temperature, etc.), the analog meter could
    display current conditions, while the LED could indicate when conditions are ripe
    for irrigation or if there’s a risk of frost.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**农业监测器**：连接到一个网络服务，该服务从农田中的传感器（如土壤湿度、温度等）中提取数据，模拟仪表可以显示当前条件，而 LED 可以指示灌溉条件成熟或存在霜冻风险。'
- en: Moving beyond metered dashboards, the powerful features of Raspberry Pi are
    particularly effective in robotics. The Raspberry Pi acts as the *brain* for these
    systems, managing tasks such as sensor data analysis, decision-making, and motor
    control. The integration of IoT and robotics has resulted in major advancements
    in various fields including security, automation, and surveillance. An example
    of this is **T.A.R.A.S.** (short for **This Amazing Raspberry-Pi Automated Security
    agent**), an automated security agent powered by Raspberry Pi and IoT principles,
    as presented in the first edition of *Internet of Things* *Programming Projects*.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 超越仪表盘，Raspberry Pi 的强大功能在机器人领域特别有效。Raspberry Pi 作为这些系统的“大脑”，管理着诸如传感器数据分析、决策和电机控制等任务。物联网和机器人的集成在包括安全、自动化和监控在内的各个领域取得了重大进步。一个例子是
    **T.A.R.A.S.**（代表 **This Amazing Raspberry-Pi Automated Security agent**），这是一个由
    Raspberry Pi 和物联网原理驱动的自动化安全代理，如《物联网编程项目》第一版中所述。
- en: Re-introducing T.A.R.A.S. – an IoT-based robotics project
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新介绍 T.A.R.A.S. – 一个基于物联网的机器人项目
- en: T.A.R.A.S., a backronym named in honor of one of the author’s business mentors,
    Taras, serves as an automated security guard.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: T.A.R.A.S.，一个以作者的一位商业导师 Taras 命名的缩写词，作为自动化安全警卫。
- en: 'This application of IoT in robotics exhibits how a Raspberry Pi can manage
    sensory and motor functions. It uses **Message Queuing Telemetry Transport** (**MQTT**)
    messages, a lightweight, publish–subscribe network protocol, enabling seamless
    communication between devices. We can see a graphic of T.A.R.A.S. in *Figure 1**.13*:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这种物联网在机器人领域的应用展示了树莓派如何管理感知和运动功能。它使用 **消息队列遥测传输** (**MQTT**) 消息，一种轻量级的发布-订阅网络协议，使得设备之间能够实现无缝通信。我们可以在
    *图 1**.13* 中看到 T.A.R.A.S. 的图形：
- en: '![Figure 1.13 – T.A.R.A.S. communicates over the internet by sending and receiving
    MQTT messages](img/B21282_01_13.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.13 – T.A.R.A.S. 通过发送和接收 MQTT 消息在互联网上进行通信](img/B21282_01_13.jpg)'
- en: Figure 1.13 – T.A.R.A.S. communicates over the internet by sending and receiving
    MQTT messages
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13 – T.A.R.A.S. 通过发送和接收 MQTT 消息在互联网上进行通信
- en: Alongside sensory inputs, LED, and buzzer outputs, T.A.R.A.S. encapsulates the
    dynamic range of possibilities within IoT. In the previous edition, we built a
    web-based controller for T.A.R.A.S., integrating a host of skills acquired throughout
    the book.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 除了感知输入、LED 和蜂鸣器输出外，T.A.R.A.S. 将物联网中的可能性动态范围封装起来。在上一版中，我们为 T.A.R.A.S. 建立了一个基于网页的控制器，整合了本书中学习到的众多技能。
- en: In this edition of *Internet of Things Programming Projects*, we say goodbye
    to T.A.R.A.S. as he has taken a package and retired from the security field. We
    will say hello to **A.R.E.S.**, or **Advanced Robotic Eyes for Security**. Named
    after the author’s beloved late dog, A.R.E.S. will take security and mobility
    to a new level by incorporating vision recognition and ROS.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本版 *物联网编程项目* 中，我们将与 T.A.R.A.S. 说再见，因为他已经退休并离开了安全领域。我们将迎来 **A.R.E.S.**，或 **高级机器人安全眼**。这个名字是为了纪念作者心爱的已故爱犬。A.R.E.S.
    通过结合视觉识别和 ROS，将把安全和移动性提升到一个新的水平。
- en: Getting started with Raspberry Pi development
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用树莓派进行开发
- en: Our Raspberry Pi can serve as a robust development platform ideal for various
    programming environments. The default Linux-based Raspberry Pi OS is equipped
    with Python, Scratch, and many other tools that cater to both beginners and seasoned
    programmers. It’s particularly effective for IoT projects and edge computing,
    thanks to its small form factor. As developers, we can use it for software development,
    web hosting, home automation projects, and prototyping, making it a versatile
    and accessible tool for innovation.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的树莓派可以作为强大的开发平台，非常适合各种编程环境。默认基于 Linux 的树莓派操作系统配备了 Python、Scratch 和许多其他工具，这些工具既适合初学者也适合经验丰富的程序员。由于其小型化设计，它在物联网项目和边缘计算中特别有效。作为开发者，我们可以用它进行软件开发、网站托管、家庭自动化项目和原型设计，使其成为创新的多功能和易于获取的工具。
- en: In this book, we will develop IoT projects using the Raspberry Pi, specifically
    utilizing the Raspberry Pi 5 with 8 GB of RAM for optimal performance. While other
    versions of the Raspberry Pi may be sufficient, the Raspberry Pi 5 with 8 GB of
    RAM is currently the most powerful model available. Our projects will encompass
    an array of exciting applications, including an analog metered weather dashboard,
    an internet-connected home security system, an IoT remote monitoring station,
    and A.R.E.S. our advanced IoT-enabled robot car. In the remainder of this chapter,
    we will familiarize ourselves with reading sensory data from a Raspberry Pi Sense
    HAT.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用树莓派开发物联网项目，特别是使用配备 8 GB RAM 的树莓派 5 以获得最佳性能。虽然其他版本的树莓派可能足够用，但配备 8 GB
    RAM 的树莓派 5 目前是最强大的型号。我们的项目将包括一系列令人兴奋的应用，包括模拟仪表的天气仪表盘、互联网连接的家庭安全系统、物联网远程监控站和我们的高级物联网机器人汽车
    A.R.E.S.。在本章的剩余部分，我们将熟悉从树莓派 Sense HAT 读取感知数据。
- en: Before diving into development though, it’s crucial to familiarize ourselves
    with the development tools that are available for the Raspberry Pi.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入开发之前，熟悉可用于树莓派的开发工具至关重要。
- en: Raspberry Pi development tools
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 树莓派开发工具
- en: 'The following is a range of development tools available for our Raspberry Pi
    projects. It’s important to note that not all these programs come pre-installed
    with Raspberry Pi OS and may require manual installation:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们树莓派项目中可用的开发工具范围。需要注意的是，并非所有这些程序都预装在树莓派操作系统上，可能需要手动安装：
- en: '**Python**: Python is a high-level interpreted programming language for general-purpose
    programming. Its simple syntax and readability make it excellent for beginners,
    and its powerful libraries and versatility also suit advanced users for complex
    projects. Python comes pre-installed on Raspberry Pi OS.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python**: Python 是一种高级解释型通用编程语言。其简洁的语法和可读性使其非常适合初学者，同时其强大的库和多功能性也适合高级用户进行复杂项目。Python
    预装在 Raspberry Pi OS 中。'
- en: '**Thonny**: Thonny is an IDE for Python that comes pre-installed with Raspberry
    Pi OS. It’s easy to use for beginners and includes features such as **step-by-step
    debugging** and **error highlighting**. It’s also robust enough for advanced users,
    offering comprehensive tools for more complex coding. We will utilize Thonny for
    our projects in this book.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Thonny**: Thonny 是一个预装在 Raspberry Pi OS 中的 Python IDE。它对初学者来说易于使用，包括 **逐步调试**
    和 **错误突出显示** 等功能。它也足够强大，适合高级用户，提供用于更复杂编码的综合工具。我们将在这本书的项目中使用 Thonny。'
- en: '**Scratch**: Scratch is a block-based visual programming language aimed at
    children. With Scratch, children can create animation and games all while learning
    the basics of programming.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Scratch**: Scratch 是一种面向儿童的基于块的视觉编程语言。使用 Scratch，孩子们可以在学习编程基础知识的同时创建动画和游戏。'
- en: '**Greenfoot and BlueJ**: These are two IDEs for Java. They are primarily used
    in education and are designed to help beginners get a grip on object-oriented
    programming.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Greenfoot 和 BlueJ**: 这两种都是 Java 的 IDE。它们主要用于教育，旨在帮助初学者掌握面向对象编程。'
- en: '**Mu** – This is a Python editor for beginner programmers. It’s designed to
    be simple and easy to understand.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mu** – 这是一个面向初学者的 Python 编辑器。它设计得简单易懂。'
- en: '**Geany**: It is a lightweight and highly customizable IDE that supports a
    wide range of programming languages including C, Java, PHP, HTML, Python, Perl,
    Pascal.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Geany**: 它是一个轻量级且高度可定制的集成开发环境（IDE），支持包括 C、Java、PHP、HTML、Python、Perl 和 Pascal
    在内的多种编程语言。'
- en: '**Wolfram Mathematica and Wolfram Language**: Wolfram provides a high-level
    language and interactive environment for programming, mathematical visualization,
    and general computation.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wolfram Mathematica 和 Wolfram 语言**: Wolfram 提供了一种高级编程语言和交互式环境，用于编程、数学可视化和通用计算。'
- en: '**Node-RED**: This is a flow-based open source tool used for visual programming.
    Node-RED allows access to APIs and online services.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node-RED**: 这是一个基于流程的开源可视化编程工具。Node-RED 允许访问 API 和在线服务。'
- en: '**GCC and GDB**: The **GNU Compiler Collection** (**GCC**) (including gcc and
    g++) and the **GNU Debugger** (**GDB**) allow us to compile and debug code written
    in languages such as C and C++.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GCC 和 GDB**: **GNU 编译器集合**（**GCC**）（包括 gcc 和 g++）和 **GNU 调试器**（**GDB**）允许我们编译和调试用
    C 和 C++ 等语言编写的代码。'
- en: Apart from these, we can install other software development tools from the Raspberry
    Pi OS repositories using the apt package manager or download and install them
    manually. For example, we might want to install Git for version control, Docker
    for containerization, or Visual Studio Code for a more advanced development environment.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些，我们还可以使用 apt 软件包管理器从 Raspberry Pi OS 存储库安装其他软件开发工具，或者手动下载并安装它们。例如，我们可能想安装
    Git 用于版本控制，Docker 用于容器化，或者 Visual Studio Code 用于更高级的开发环境。
- en: The Raspberry Pi supports a wide array of development tools, catering to various
    programming needs. By looking at these tools, we’ve underscored the Raspberry
    Pi’s adaptability and capacity for innovative projects.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 支持广泛的开发工具，满足各种编程需求。通过查看这些工具，我们强调了 Raspberry Pi 的适应性和创新项目的潜力。
- en: Raspberry Pi and Sense HAT development
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Raspberry Pi 和 Sense HAT 开发
- en: It is a great idea to start our journey into IoT development by learning how
    to write simple code for the Raspberry Pi Sense HAT. The Sense HAT serves as an
    excellent IoT device, equipped with a range of sensors and an LED matrix display
    that can be harnessed to create innovative applications.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通过学习如何为 Raspberry Pi Sense HAT 编写简单的代码，开始我们的物联网（IoT）开发之旅是一个很好的主意。Sense HAT 是一个出色的
    IoT 设备，配备了各种传感器和 LED 矩阵显示屏，可以用来创建创新的应用程序。
- en: 'For our coding examples, we will securely mount our Raspberry Pi 5 into a case
    specifically designed for this book. In *Figure 1**.14*, we can see a CAD render
    of the case that we will be using. The case features a front cover that exposes
    the dot matrix LED screen of the Sense HAT. It also includes a circular vent to
    ensure proper heat dissipation inside the case. On the back part of the case,
    we have incorporated a GoPro-style hook, providing us with the flexibility to
    mount the Raspberry Pi and Sense HAT using any GoPro stand. Files to build the
    case are available from the book’s GitHub repository. Using a standard FDM 3D
    printer to make the case should be sufficient; however, better quality and durability
    are obtained using a liquid resin printer and engineering resins such as Siraya
    Tech Blu. *Figure 1**.14* shows what the assembled case will look like with the
    printed stem and base plate in place of a GoPro stand:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的编码示例，我们将将树莓派5安全地安装在为本书特别设计的壳中。在图1.14中，我们可以看到我们将使用的壳的CAD渲染图。该外壳具有一个前盖，暴露了Sense
    HAT的点阵LED屏幕。它还包括一个圆形通风口，以确保壳内的热量适当散发。在壳的背面，我们集成了GoPro风格的钩子，这为我们提供了使用任何GoPro支架安装树莓派和Sense
    HAT的灵活性。构建外壳的文件可以从书籍的GitHub仓库中获取。使用标准FDM 3D打印机制作外壳应该是足够的；然而，使用液体树脂打印机和如Siraya
    Tech Blu等工程树脂可以获得更好的质量和耐用性。图1.14显示了组装好的外壳，其中打印的茎和底板取代了GoPro支架：
- en: '![Figure 1.14 – Custom-designed Sense HAT case for Raspberry Pi 5](img/B21282_01_14.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图1.14 – 定制的Raspberry Pi 5 Sense HAT外壳](img/B21282_01_14.jpg)'
- en: Figure 1.14 – Custom-designed Sense HAT case for Raspberry Pi 5
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.14 – 定制的Raspberry Pi 5 Sense HAT外壳
- en: We can find all the necessary files for 3D printing (`.stl` files) in the `Build
    Files` folder within the book’s GitHub repository. It is worth noting that most
    Raspberry Pi cases do not account for the accommodation of HATs, making our Raspberry
    Pi/Sense HAT case an excellent accessory for this book. However, it is important
    to mention that the case is not mandatory to complete the exercises in this book.
    Furthermore, if we decide not to purchase a Sense HAT, we can still run the examples
    by utilizing the Sense HAT simulator available for the Raspberry Pi OS.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在书籍GitHub仓库中的“构建文件”文件夹内找到所有必要的3D打印文件（`.stl`文件）。值得注意的是，大多数树莓派外壳没有考虑到HAT的容纳空间，这使得我们的树莓派/Sense
    HAT外壳成为本书的优秀配件。然而，重要的是要提到，外壳不是完成本书练习的必需品。此外，如果我们决定不购买Sense HAT，我们仍然可以通过使用为Raspberry
    Pi OS提供的Sense HAT模拟器来运行示例。
- en: Before we start writing code, we’ll set up the development environment on our
    Raspberry Pi. Once our environment is ready, we’ll dive right into coding.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写代码之前，我们将在我们的树莓派上设置开发环境。一旦我们的环境准备就绪，我们就会直接进入编码阶段。
- en: Let’s get started!
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Setting up our development environment
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置我们的开发环境
- en: In this section, we will go through the process of setting up Thonny for development
    with the Raspberry Pi and Sense HAT. Thonny is a beginner-friendly IDE that offers
    a user-friendly interface. With Thonny, we can easily write, test, and debug our
    code, allowing us to focus on the development process without unnecessary complexity.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍为使用树莓派和Sense HAT进行开发而设置Thonny的过程。Thonny是一个面向初学者的IDE，它提供了一个用户友好的界面。使用Thonny，我们可以轻松地编写、测试和调试我们的代码，从而让我们能够专注于开发过程，而不必处理不必要的复杂性。
- en: 'We will use a Python virtual environment for our development. As there are
    libraries that only work with the root installation of Python, we will use system
    packages in our Python virtual environment. To do so, we do the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的开发中使用Python虚拟环境。由于有一些库只能与Python的根安装一起工作，我们将在Python虚拟环境中使用系统包。为此，我们执行以下操作：
- en: 'On our Raspberry Pi 5, we open a Terminal application by clicking on the fourth
    icon on the top-left menu (*Figure 1**.15*):'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的树莓派5上，我们通过点击左上角菜单中的第四个图标来打开终端应用程序（如图1.15所示）：
- en: '![Figure 1.15 – Opening the Terminal application (indicated by the red arrow)](img/B21282_01_15.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图1.15 – 打开终端应用程序（由红色箭头指示）](img/B21282_01_15.jpg)'
- en: Figure 1.15 – Opening the Terminal application (indicated by the red arrow)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.15 – 打开终端应用程序（由红色箭头指示）
- en: 'To store our project files, we create a new directory with the following:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了存储我们的项目文件，我们使用以下命令创建一个新的目录：
- en: '[PRE0]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We then navigate to the new directory with the following:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们使用以下命令导航到新目录：
- en: '[PRE1]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We create a new Python virtual environment for our project with the following:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下命令为我们的项目创建一个新的Python虚拟环境：
- en: '[PRE2]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With our new Python virtual environment created, we source into it with the
    following command:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们创建新的 Python 虚拟环境后，我们使用以下命令将其源代码导入：
- en: '[PRE3]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Figure 1.16 – Terminal using ch1-env environment](img/B21282_01_16.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16 – 使用 ch1-env 环境的终端](img/B21282_01_16.jpg)'
- en: Figure 1.16 – Terminal using ch1-env environment
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16 – 使用 ch1-env 环境的终端
- en: 'For our project, we need the Sense HAT and the Sense HAT emulator libraries.
    The Sense HAT library is pre-installed in our Python virtual environment; however,
    the Sense HAT emulator requires manual installation via a Terminal command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于我们的项目，我们需要 Sense HAT 和 Sense HAT 模拟器库。Sense HAT 库已预安装在我们的 Python 虚拟环境中；然而，Sense
    HAT 模拟器需要通过终端命令手动安装：
- en: '[PRE4]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Installing the Sense HAT emulator library lets us run code with either the
    actual Sense HAT or the Sense HAT emulator. We can close the Terminal with a specific
    command:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Sense HAT 模拟器库让我们可以使用实际的 Sense HAT 或 Sense HAT 模拟器运行代码。我们可以使用特定命令关闭终端：
- en: '[PRE5]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We are now ready to load up Thonny. We do so by clicking on the **Menu** icon
    in the Raspberry Pi taskbar, navigating to the **Programming** category, and selecting
    **Thonny** (*Figure 1**.17*):'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好加载 Thonny。我们通过点击 Raspberry Pi 任务栏中的 **菜单** 图标，导航到 **编程** 类别，并选择 **Thonny**（*图
    1.17*）来完成此操作：
- en: '![Figure 1.17 – Thonny IDE interface](img/B21282_01_17.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.17 – Thonny IDE 界面](img/B21282_01_17.jpg)'
- en: Figure 1.17 – Thonny IDE interface
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17 – Thonny IDE 界面
- en: By default, Thonny uses the Raspberry Pi’s built-in version of Python (red arrow
    in *Figure 1**.17*). For our project, we will use the Python virtual environment
    we just created. To start, we need to view the project files by clicking on **View**
    and selecting **Files** if it is not already selected (we may have to switch to
    regular mode first by clicking on the **Switch to regular mode** tab at the top-right
    side of the screen).
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，Thonny 使用 Raspberry Pi 内置的 Python 版本（*图 1.17* 中的红色箭头）。对于我们的项目，我们将使用我们刚刚创建的
    Python 虚拟环境。首先，我们需要通过点击 **查看** 并选择 **文件**（如果尚未选择）来查看项目文件（我们可能需要先通过点击屏幕右上角的 **切换到常规模式**
    标签来切换到常规模式）。
- en: In the `ch1-env` directory.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ch1-env` 目录中。
- en: 'We then right-click on the folder and select the **Activate virtual** **environment**
    option:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们右键单击文件夹并选择 **激活虚拟环境** 选项：
- en: '![Figure 1.18 – Activating ch1-env virtual environment in Thonny](img/B21282_01_18.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.18 – 在 Thonny 中激活 ch1-env 虚拟环境](img/B21282_01_18.jpg)'
- en: Figure 1.18 – Activating ch1-env virtual environment in Thonny
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.18 – 在 Thonny 中激活 ch1-env 虚拟环境
- en: With our project folder created, our Python virtual environment set up and activated,
    and the Sense HAT emulator package installed, we may now start writing code.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建项目文件夹、设置并激活 Python 虚拟环境以及安装 Sense HAT 模拟器包后，我们现在可以开始编写代码。
- en: Sense HAT development – reading sensor data
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sense HAT 开发 – 读取传感器数据
- en: The goal for our first project is to create a program that reads sensor information
    from the Sense HAT and displays it in the Thonny Shell. Before we can read sensory
    information, however, we must ensure that we have the Sense HAT properly connected
    to our Raspberry Pi.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们第一个项目的目标是创建一个程序，从 Sense HAT 读取传感器信息并在 Thonny Shell 中显示它。然而，在我们能够读取感官信息之前，我们必须确保
    Sense HAT 已经正确连接到我们的 Raspberry Pi。
- en: 'To start, follow these steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下步骤操作：
- en: If not already running, we launch Thonny by clicking on the `ch1-env` virtual
    environment if not already activated.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未运行，我们通过点击 `ch1-env` 虚拟环境（如果尚未激活）来启动 Thonny。
- en: 'We then create a new tab by selecting **File** and then **New** or by hitting
    *Ctrl*+*N* on the keyboard:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们通过选择 **文件** 然后选择 **新建** 或通过按键盘上的 *Ctrl*+*N* 来创建一个新的标签页：
- en: '![Figure 1.19 – Creating a new file in Thonny](img/B21282_01_19.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.19 – 在 Thonny 中创建新文件](img/B21282_01_19.jpg)'
- en: Figure 1.19 – Creating a new file in Thonny
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.19 – 在 Thonny 中创建新文件
- en: 'Inside the new tab, we enter the following code:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新标签页中，我们输入以下代码：
- en: '[PRE6]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For those of us using the Sense HAT simulator, we simply need to change the
    first line of code to the following:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于使用 Sense HAT 模拟器的我们来说，只需将代码的第一行更改为以下内容：
- en: '[PRE7]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We save the code with a descriptive name such as `sensor-test.py`. Before we
    run the code, let’s break it down to understand it:'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将代码保存为具有描述性的名称，例如 `sensor-test.py`。在我们运行代码之前，让我们将其分解以了解它：
- en: Our code starts by importing the `SenseHat` class from the `sense_hat` library.
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先从 `sense_hat` 库中导入 `SenseHat` 类。
- en: An instance of the `SenseHat` class is created and assigned to the variable
    `sense_hat`.
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建了一个 `SenseHat` 类的实例，并将其分配给变量 `sense_hat`。
- en: The `get_temperature()` method is called on the `sense_hat` object to retrieve
    the temperature data and assigned to the `temp` variable.
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `sense_hat` 对象上调用 `get_temperature()` 方法以检索温度数据，并将其分配给 `temp` 变量。
- en: The `get_humidity()` method is called on the `sense_hat` object to retrieve
    the humidity data and assigned to the `humidity` variable.
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `sense_hat` 对象上调用 `get_humidity()` 方法以检索湿度数据，并将其分配给 `humidity` 变量。
- en: The `get_pressure()` method is called on the `sense_hat` object to retrieve
    the air pressure data and assigned to the `press` variable.
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `sense_hat` 对象上调用 `get_pressure()` 方法以检索空气压力数据，并将其分配给 `press` 变量。
- en: The `get_accelerometer_raw()` method is called on the `sense_hat` object to
    retrieve the raw accelerometer data, which includes values for the *x*, *y*, and
    *z* axes. The data is assigned to the `accel` variable.
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `sense_hat` 对象上调用 `get_accelerometer_raw()` 方法以检索原始加速度计数据，这包括 *x*、*y* 和 *z*
    轴的值。数据被分配给 `accel` 变量。
- en: The `get_gyroscope_raw()` method is called on the `sense_hat` object to retrieve
    the raw gyroscope data, which also includes values for the *x*, *y*, and *z* axes.
    The data is assigned to the `gyroscope` variable.
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `sense_hat` 对象上调用 `get_gyroscope_raw()` 方法以检索原始陀螺仪数据，这同样包括 *x*、*y* 和 *z* 轴的值。数据被分配给
    `gyroscope` 变量。
- en: The obtained data is then printed out with appropriate formatting using the
    `print()` function and formatted string placeholders ``(`{:.2f}`)`` to display
    the values with two decimal places.
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使用 `print()` 函数和格式化字符串占位符 `{:.2f}` 以适当的格式打印出获得的数据，以显示两位小数的值。
- en: 'We run the code by either clicking on the green **Run** button, hitting *F5*
    on the keyboard, or clicking on the **Run** menu option at the top and then **Run**
    **current script**:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过点击绿色的 **运行** 按钮、按键盘上的 *F5* 或者在顶部菜单中选择 **运行** 然后选择 **运行当前脚本** 来运行代码。
- en: '![Figure 1.20 – Running a program in Thonny](img/B21282_01_20.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.20 – 在 Thonny 中运行程序](img/B21282_01_20.jpg)'
- en: Figure 1.20 – Running a program in Thonny
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.20 – 在 Thonny 中运行程序
- en: 'After running the code, we should observe a message like the following in the
    Shell:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码后，我们应该在 Shell 中观察到如下信息：
- en: '![Figure 1.21 – Results after running sensor-test.py](img/B21282_01_21.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.21 – 运行 sensor-test.py 后的结果](img/B21282_01_21.jpg)'
- en: Figure 1.21 – Results after running sensor-test.py
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.21 – 运行 sensor-test.py 后的结果
- en: For those of us using the Sense HAT emulator, the values displayed will be determined
    by the slider values set in the emulator.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用 Sense HAT 模拟器的我们来说，显示的值将由模拟器中设置的滑块值决定。
- en: Important notes
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: We can disregard the warning since the Sense HAT does not include a TCS34725
    color sensor. It is likely that the warning is caused by an internal issue in
    the Sense HAT Python library. Our code is not affected by this warning and can
    continue to run as intended.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以忽略警告，因为 Sense HAT 不包括 TCS34725 颜色传感器。警告很可能是 Sense HAT Python 库内部问题引起的。我们的代码不受此警告的影响，可以继续按预期运行。
- en: It’s important to note that the temperature readings are influenced by the heat
    generated by the Raspberry Pi, resulting in higher values compared to the actual
    room temperature. The humidity readings are also affected. However, the accelerometer
    and gyroscope values accurately reflect the position and orientation of the Sense
    HAT and can be observed to change when the case is swiveled in different directions.
    To see updated values from the accelerometer and gyroscope, the code must be run
    again after swiveling the case.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，温度读数受到 Raspberry Pi 产生的热量影响，因此比实际室温要高。湿度读数也受到影响。然而，加速度计和陀螺仪的值准确地反映了
    Sense HAT 的位置和方向，当外壳向不同方向旋转时可以观察到它们的变化。要查看加速度计和陀螺仪的更新值，必须在旋转外壳后再次运行代码。
- en: Now that we have learned how to read sensory data from Sense HAT, let’s shift
    our focus to the dot matrix screen. In the next section, we will explore creating
    a simple animation using the dot matrix display.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何从 Sense HAT 读取感官数据，让我们将注意力转向点阵显示屏。在下一节中，我们将探讨如何使用点阵显示屏创建一个简单的动画。
- en: Sense HAT development – creating animations
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sense HAT 开发 – 创建动画
- en: In this section, we will create an explosion animation using Sense HAT and the
    Raspberry Pi. We will use Thonny as our development environment to write and execute
    the code.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Sense HAT 和 Raspberry Pi 创建一个爆炸动画。我们将使用 Thonny 作为我们的开发环境来编写和执行代码。
- en: 'To start, follow these steps:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下步骤操作：
- en: If not already running, we launch Thonny by clicking on the `ch1-env` virtual
    environment if not already activated.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未运行，我们通过点击 `ch1-env` 虚拟环境（如果尚未激活）来启动 Thonny。
- en: We then create a new tab by selecting **File** and then **New** or by hitting
    *Ctrl* + *N* on the keyboard.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们通过选择 **文件** 然后选择 **新建** 或按键盘上的 *Ctrl* + *N* 创建一个新的标签页。
- en: 'We start our code by entering our imports:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过输入我们的导入语句开始我们的代码：
- en: '[PRE8]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We import the `SenseHat` module from the `sense_hat` library, allowing us to
    interact with the Sense HAT board.
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从 `sense_hat` 库中导入 `SenseHat` 模块，使我们能够与 Sense HAT 板交互。
- en: We also import the `time` module, which will be used for adding delays in our
    program.
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还导入了 `time` 模块，该模块将在我们的程序中用于添加延迟。
- en: 'We then set our variable declarations:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们设置我们的变量声明：
- en: '[PRE9]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We create an instance of the SenseHAT class called `sense_hat`, enabling us
    to access the Sense HAT’s functionality.
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个名为 `sense_hat` 的 SenseHAT 类实例，使我们能够访问 Sense HAT 的功能。
- en: We define color values for red, orange, yellow, and black, which will be used
    to create our animation.
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为红色、橙色、黄色和黑色定义了颜色值，这些颜色值将用于创建我们的动画。
- en: We create `frame1` as a list of color values, representing the desired image
    on the LED matrix.
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个名为 `frame1` 的颜色值列表，代表 LED 矩阵上期望的图像。
- en: We define `frame2` and `frame3` as additional frames.
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了 `frame2` 和 `frame3` 作为额外的帧。
- en: We create a list called `frames`, which holds the defined frames in a specific
    order.
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个名为 `frames` 的列表，按照特定顺序保存定义的帧。
- en: 'To have our animation run continuously, we set up an infinite loop:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使我们的动画持续运行，我们设置了一个无限循环：
- en: '[PRE10]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Within the loop, we iterate through each frame in the `frames` list.
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在循环中，我们遍历 `frames` 列表中的每一帧。
- en: We set the pixels of the LED matrix to the current frame using `sense_hat.set_pixels(frame)`,
    displaying the corresponding image.
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用 `sense_hat.set_pixels(frame)` 将 LED 矩阵的像素设置为当前帧，显示相应的图像。
- en: We introduce a brief pause of 0.5 seconds using `time.sleep(0.5)` to control
    the animation speed.
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用 `time.sleep(0.5)` 添加了一个短暂的0.5秒暂停，以控制动画速度。
- en: After displaying all frames, we clear the LED matrix using `sense_hat.clear()`,
    preparing for the next iteration.
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在显示所有帧后，我们使用 `sense_hat.clear()` 清除 LED 矩阵，为下一次迭代做准备。
- en: We add a slight delay of 0.2 seconds using `time.sleep(0.2)` before starting
    the animation loop again, creating the explosion pattern.
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在再次启动动画循环之前，我们使用 `time.sleep(0.2)` 添加了0.2秒的轻微延迟，从而创建了爆炸图案。
- en: 'For those of us using the Sense HAT simulator we simply need to change the
    first line of code to the following and open the Sense HAT simulator on our Raspberry
    Pi:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于使用 Sense HAT 模拟器的我们，只需将第一行代码更改为以下内容，并在我们的 Raspberry Pi 上打开 Sense HAT 模拟器：
- en: '[PRE11]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We save the code with a descriptive name such as `animation-test.py`.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将代码保存为具有描述性名称的文件，例如 `animation-test.py`。
- en: 'We run the code by clicking on the green **Run** button, hitting *F5* on the
    keyboard, or clicking on the **Run** menu option at the top and then **Run current
    script**. We should observe an explosion animation on our Sense HAT or in the
    Sense HAT emulator:'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们通过点击绿色 **运行** 按钮、按键盘上的 *F5* 或点击顶部的 **运行** 菜单选项然后选择 **运行当前脚本** 来运行代码。我们应该在我们的
    Sense HAT 或 Sense HAT 模拟器上观察到爆炸动画：
- en: '![Figure 1.22 – Frame from explosion animation on the Sense HAT emulator](img/B21282_01_22.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图1.22 – Sense HAT 模拟器上的爆炸动画帧](img/B21282_01_22.jpg)'
- en: Figure 1.22 – Frame from explosion animation on the Sense HAT emulator
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.22 – Sense HAT 模拟器上的爆炸动画帧
- en: In this section, we explored creating animations with Sense HAT and Raspberry
    Pi. We learned how to write code that displays a sequence of frames on the LED
    matrix, resulting in an explosion animation. For our final programming project
    in this chapter, we will create a scrolling message on the Sense HAT’s dot matrix
    screen. This message will dynamically show temperature, humidity, and air pressure
    data, providing us with valuable environmental insights in a visually appealing
    way.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了使用 Sense HAT 和 Raspberry Pi 创建动画。我们学习了如何编写代码在 LED 矩阵上显示一系列帧，从而实现爆炸动画。在本章的最后一个编程项目中，我们将创建
    Sense HAT 点矩阵屏幕上的滚动消息。这条消息将动态显示温度、湿度和空气压力数据，以视觉吸引力的方式为我们提供有价值的环保见解。
- en: Sense HAT development – creating a scrolling environmental data display
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sense HAT 开发 – 创建滚动环境数据显示
- en: Building upon our previous projects, where we gained experience in reading sensory
    data from Sense HAT and creating animations on its LED matrix, we will now dive
    into the creation of a scrolling text application using the Sense HAT’s dot matrix
    display.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的项目基础上，我们在 Sense HAT 上读取传感数据并创建 LED 矩阵动画方面积累了经验，现在我们将深入创建一个使用 Sense HAT
    的点阵显示屏的滚动文本应用程序。
- en: 'To start, follow these steps:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下步骤操作：
- en: If not already running, we launch Thonny by clicking on the `ch1-env` virtual
    environment if not already activated.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未运行，我们通过点击 `ch1-env` 虚拟环境（如果尚未激活）来启动 Thonny。
- en: We create a new tab by selecting **File** and then **New** or by hitting *Ctrl*
    + *N* on the keyboard.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择 **文件** 然后选择 **新建** 或者在键盘上按 *Ctrl* + *N* 来创建一个新的标签页。
- en: 'We start our code by importing the libraries we need:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先导入我们需要的库：
- en: '[PRE12]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We import the `SenseHat` module from the `sense_hat` library, allowing us to
    interact with the Sense HAT board. For those of us using the Sense HAT emulator,
    we would use the `sense_emu` library instead.
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从 `sense_hat` 库中导入 `SenseHat` 模块，使我们能够与 Sense HAT 板进行交互。对于使用 Sense HAT 模拟器的我们，我们会使用
    `sense_emu` 库。
- en: We also import the `time` module, which will be used for adding delays in our
    program.
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还导入了 `time` 模块，它将在我们的程序中用于添加延迟。
- en: 'We then set our variable declarations in our code:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们在代码中设置变量声明：
- en: '[PRE13]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We create an instance of the `SenseHAT` class we call `sense_hat`.
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个名为 `sense_hat` 的 `SenseHAT` 类的实例。
- en: We set the scrolling speed of the messages on the LED matrix using the variable
    `speed`.
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用变量 `speed` 设置 LED 矩阵上消息的滚动速度。
- en: The line `sense_hat.set_rotation(270)` adjusts the orientation of the Sense
    HAT’s LED matrix so that it matches the orientation of the Raspberry Pi in the
    custom case.
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 行 `sense_hat.set_rotation(270)` 调整 Sense HAT 的 LED 矩阵的方向，使其与定制外壳中的 Raspberry
    Pi 的方向相匹配。
- en: We define two color variables, `red` and `green`, for the text color.
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了两个颜色变量，`red` 和 `green`，用于文本颜色。
- en: 'To have our scrolling message continuously play, we create an infinite loop:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使滚动消息持续播放，我们创建了一个无限循环：
- en: '[PRE14]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the infinite loop, we do the following:'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在无限循环中，我们执行以下操作：
- en: We display the temperature reading on the LED matrix, formatted with one decimal
    place.
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在 LED 矩阵上显示温度读数，格式化为一位小数。
- en: We display the humidity reading on the LED matrix, formatted with one decimal
    place.
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在 LED 矩阵上显示湿度读数，格式化为一位小数。
- en: We display the pressure reading on the LED matrix, formatted with one decimal
    place.
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在 LED 矩阵上显示压力读数，格式化为一位小数。
- en: We pause for one second before the next iteration of the loop.
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在循环的下一迭代之前，我们暂停一秒钟。
- en: We save the code with a descriptive name such as `sensor-scroll.py`.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用描述性的名称，如 `sensor-scroll.py` 来保存代码。
- en: We run the code by clicking on the green **Run** button, hitting *F5* on the
    keyboard, or clicking on the **Run** menu option at the top and then **Run** **current
    script**.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击绿色 **运行** 按钮，按键盘上的 *F5*，或者在顶部菜单中选择 **运行** 然后选择 **运行当前脚本** 来运行代码。
- en: We should observe a scrolling message of sensory data displayed on the dot matrix
    screen of our Sense HAT (or Sense HAT emulator).
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们应该观察到在 Sense HAT 的点阵屏幕（或 Sense HAT 模拟器）上显示的滚动消息。
- en: In this exercise, we created a scrolling text application on the Sense HAT,
    displaying real-time environmental data. This project enhanced our skills in data
    acquisition from sensors and visual presentation, using the Sense HAT’s LED matrix
    for effective data visualization. Completing this final chapter project, we’re
    now equipped to tackle more advanced IoT applications with the Sense HAT and Raspberry
    Pi.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们在 Sense HAT 上创建了一个滚动文本应用程序，显示实时环境数据。这个项目增强了我们在传感器数据采集和视觉展示方面的技能，使用
    Sense HAT 的 LED 矩阵进行有效的数据可视化。完成这个最终章节项目后，我们现在可以应对使用 Sense HAT 和 Raspberry Pi 的更高级的物联网应用了。
- en: Summary
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we began our journey into the world of IoT projects with the
    Raspberry Pi. We explored the various Raspberry Pi models, their distinct characteristics,
    and their significance in IoT development. We took a brief look at the alternatives
    to the Raspberry Pi for IoT applications and explored Raspberry Pi HATs, such
    as the Pibrella HAT and the Raspberry Pi Sense HAT.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始了我们的物联网项目之旅，使用 Raspberry Pi。我们探讨了各种 Raspberry Pi 型号、它们的独特特性和在物联网开发中的重要性。我们简要地看了看
    Raspberry Pi 在物联网应用中的替代品，并探讨了 Raspberry Pi HAT，如 Pibrella HAT 和 Raspberry Pi Sense
    HAT。
- en: Additionally, we looked at operating systems compatible with the Raspberry Pi,
    outside of the official Raspberry Pi OS. We highlighted the versatility and power
    of the Raspberry Pi in IoT applications, emphasizing its ability to process real-time
    data and control physical devices. The chapter also introduced the Raspberry Pi
    as a robust development platform, equipped with pre-installed tools for software
    development.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还研究了与官方树莓派操作系统兼容的操作系统，包括树莓派操作系统。我们强调了树莓派在物联网应用中的多功能性和强大功能，强调其处理实时数据和控制物理设备的能力。本章还介绍了树莓派作为一个强大的开发平台，配备了预安装的软件开发工具。
- en: At the end of the chapter, we engaged in practical programming projects that
    utilized Sense HAT and explored its potential in IoT applications. These projects
    included a scrolling environmental data display, providing hands-on experience
    in extracting sensory information, and creating dynamic visual displays.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们进行了实际编程项目，利用Sense HAT并探索其在物联网应用中的潜力。这些项目包括一个滚动环境数据显示，提供了提取感官信息的动手经验，并创建动态视觉显示。
- en: This chapter equipped us with the knowledge we may use to make informed choices
    when developing IoT projects. Understanding the strengths of different Raspberry
    Pi models and alternatives prepares us to choose the right device for specific
    applications. Familiarity with Raspberry Pi HATs and various operating systems
    expands our toolkit. In this chapter, we unlocked the potential of the Raspberry
    Pi by understanding its data and control capabilities. Our Sense HAT practice
    prepared us for more complex projects in the future.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为我们提供了在开发物联网项目时可能使用的知识，以便做出明智的选择。了解不同树莓派型号和替代方案的优势，使我们能够为特定应用选择正确的设备。熟悉树莓派HAT和各种操作系统扩展了我们的工具箱。在本章中，我们通过了解其数据和控制能力，释放了树莓派的潜力。我们的Sense
    HAT实践为我们未来更复杂的项目做好了准备。
- en: Looking ahead, in the next chapter, we will harness the power of web services
    as we continue to build more sophisticated IoT applications.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 展望未来，在下一章中，我们将利用网络服务的力量，继续构建更复杂的物联网应用。
