- en: Chapter 14. Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 14 章。部署
- en: So far, we have been working in a development environment, and running our application
    on the console in 'foreground' mode, so that we can see the output for debugging
    and confirmation purposes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在开发环境中工作，以“前台”模式在控制台运行我们的应用程序，以便我们可以看到输出以进行调试和确认。
- en: Now that we have a more or less complete application, we may want to deploy
    it. Even for limited audience testing, we want the deployed application to run
    in the background. Later on, we probably want to use a full-fledged web server,
    such as Apache, for serving our application, and maybe others. Finally, for an
    application that expects lots of traffic and numerous visitors, we might want
    to balance the load over multiple instances of our application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个或多或少完整的应用程序，我们可能希望部署它。即使是为了有限的受众测试，我们也希望部署的应用程序在后台运行。稍后，我们可能希望使用完整的网络服务器，如
    Apache，来为我们提供应用程序服务，也许还有其他应用程序。最后，对于预期会有大量流量和众多访客的应用程序，我们可能希望在我们的应用程序的多个实例之间平衡负载。
- en: This chapter will discuss how to deploy our application by using the standard
    paster server. Then we'll find out how to run the application behind Apache, first
    by using a simple proxy configuration, and then under `mod_wsgi`. Finally, we'll
    explore how ZEO provides horizontal scalability for our application, and will
    briefly discuss how to make a site support high traffic loads by adding caching
    and load balancing into the mix.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论如何使用标准 paster 服务器部署我们的应用程序。然后我们将了解如何在 Apache 服务器后面运行应用程序，首先是通过使用简单的代理配置，然后是使用`mod_wsgi`。最后，我们将探讨
    ZEO 如何为我们提供应用程序的水平扩展性，并简要讨论如何通过添加缓存和负载均衡来使网站支持高流量负载。
- en: 'Some specific topics that we will cover include:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖的一些特定主题包括：
- en: Simple deployment with paster
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 paster 进行简单部署
- en: Running behind Apache with proxy pass
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用代理传递在 Apache 服务器后面运行
- en: Running behind Apache with `mod_wsgi`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `mod_wsgi` 在 Apache 服务器后面运行
- en: Setting up a ZEO cluster
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 ZEO 集群
- en: Caching and load balancing
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存和负载均衡
- en: Moving an application to production mode
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序迁移到生产模式
- en: Before thinking about which web server we will use for our deployment, there
    is one step that we need to take for every production application. Grok offers
    a 'developer mode' for the application server, which enables some functionality
    intended to help developers debug and test their applications more easily.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑我们将为部署使用哪个网络服务器之前，我们需要为每个生产应用程序执行一个步骤。Grok 为应用程序服务器提供了一个“开发者模式”，该模式启用了一些旨在帮助开发者更容易地调试和测试其应用程序的功能。
- en: The most noticeable effect of developer mode is that any changes made to templates
    are automatically taken into account by the server, without needing to restart.
    This imposes a penalty on application performance because the server has to poll
    files to find out if there were any changes made to a template.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者模式最明显的影响是，对模板所做的任何更改都会自动由服务器考虑，无需重启。这会对应用程序性能造成惩罚，因为服务器必须轮询文件以确定是否对模板进行了更改。
- en: It is recommended that you turn this functionality off when preparing an application
    for release. Further changes to templates will require a restart, but in web development,
    any performance gain must be welcomed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在准备发布应用程序时关闭此功能。对模板的进一步更改将需要重启，但在网络开发中，任何性能提升都应受到欢迎。
- en: 'To turn developer mode off, edit the `etc/zope.conf.in` file that was included
    in the package that was generated by `grokproject`. Find the line that says `devmode
    on`, and modify it to look like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭开发者模式，编辑由`grokproject`生成的包中包含的`etc/zope.conf.in`文件。找到显示`devmode on`的行，并将其修改为如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By commenting out the line shown in bold, the default will apply, which is for
    development mode to be off. However, note that this is not the actual configuration
    file, but a template used to generate it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过注释掉粗体显示的行，将应用默认设置，即开发模式关闭。然而，请注意，这并不是实际的配置文件，而是一个用于生成它的模板。
- en: To make the change take effect, rerun the buildout, so that the actual configuration
    file at `parts/etc/zope.conf` is rewritten. When you next start the application,
    it will run in production mode.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要使更改生效，请重新运行 buildout，以便实际配置文件`parts/etc/zope.conf`被重写。当你下次启动应用程序时，它将在生产模式下运行。
- en: Running the paster server in the background
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在后台运行 paster 服务器
- en: 'By far the easiest way of deploying our application is to use the same paster
    server that we have been using for development throughout the book. The only thing
    that we need to do is to launch the server in ''daemon'' mode, so that our application
    runs in the background:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，部署我们的应用程序最简单的方法是使用我们在整本书的开发过程中一直使用的相同的paster服务器。我们唯一需要做的是以“守护进程”模式启动服务器，这样我们的应用程序就可以在后台运行：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The process will then start in the background. The PID for that process will
    be stored in the file `paster.pid`, which can be used to get status information
    for the running server. The `paster.if` filename is assumed by default, by other
    `paster serve` commands, so for example, to get the process status, you can type:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后进程将在后台启动。该进程的PID将存储在`paster.pid`文件中，可以用来获取运行中服务器的状态信息。默认情况下，其他`paster serve`命令假定`paster.if`文件名，因此例如，要获取进程状态，您可以输入：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When we need to stop the server, we use the `stop-daemon` option, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要停止服务器时，我们使用`stop-daemon`选项，如下所示：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There are a couple of other options that can be useful. We might want the server
    to be restarted automatically in case, the server dies for whatever reason; that''s
    what the `monitor-restart` option does:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他一些选项可能很有用。我们可能希望服务器在出现任何原因导致服务器死亡的情况下自动重启；这正是`monitor-restart`选项的作用：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, we may prefer to run the server continuously in the background and
    have it restart automatically when we change some files. This can be accomplished
    with the `reload` option:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可能更喜欢在后台持续运行服务器，并在我们更改某些文件时自动重启。这可以通过`reload`选项实现：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This setup could be considered as the minimum Grok deployment architecture,
    and its parts are shown in the following figure:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设置可以被认为是Grok部署架构的最小版本，其部分如下所示：
- en: '![Running the paster server in the background](img/7481_14_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![在后台运行paster服务器](img/7481_14_01.jpg)'
- en: Running Grok behind the Apache web server
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Apache网络服务器后面运行Grok
- en: The problem with using the default paster configuration for production is that
    the URL for our site must include the application name. This might be acceptable
    in some cases, but almost always it's not good enough. The easiest way to overcome
    this problem is to put the application behind a web server, such as Apache, and
    use the powerful URL-rewriting tools available in most web servers to serve our
    application from any URL that we require.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认paster配置进行生产的问题在于，我们网站的网络地址必须包含应用程序名称。在某些情况下这可能可以接受，但几乎总是不够好。克服这个问题的最简单方法是将应用程序放在一个网络服务器后面，比如Apache，并使用大多数网络服务器中可用的强大URL重写工具从所需的任何URL提供我们的应用程序。
- en: Also, if our site will be running any other applications besides the one that
    we have developed, it is usually a good idea to let Apache or some other web server
    take care of centralizing the requests for multiple applications on the site.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们的网站将运行除我们开发的以外的其他应用程序，通常让Apache或其他网络服务器负责集中处理网站上的多个应用程序的请求是个好主意。
- en: Using mod_rewrite to serve our application from Apache
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用mod_rewrite从Apache服务器提供我们的应用程序
- en: To set up this configuration, you will need to install the Apache web server,
    which is available for all platforms. Most Linux distributions will allow you
    to install it by using their package management tools.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置此配置，您需要安装Apache网络服务器，它适用于所有平台。大多数Linux发行版都允许您通过使用它们的包管理工具来安装它。
- en: 'For example, in Ubuntu or Debian, you can simply type:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在Ubuntu或Debian上，您可以简单地输入：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once you have Apache ready, the next step is to configure it to use the `mod_rewrite`
    module. Usually, the way to do this is to edit the `httpd.conf` file, which should
    be available somewhere inside the `/etc` directory of your server, under either
    the `apache2` or `httpd` subdirectory.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Apache准备就绪，下一步就是配置它以使用`mod_rewrite`模块。通常，这样做的方法是编辑`httpd.conf`文件，该文件应位于服务器`/etc`目录中的`apache2`或`httpd`子目录中。
- en: 'To load the required modules to make `mod_rewrite` work, the following general
    configuration is required:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载所需的模块以使`mod_rewrite`工作，需要以下一般配置：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first three lines load the required modules, and the `ProxyRequests` line
    makes sure that the server can't be used as an involuntary proxy by third parties.
    Do not leave this line out.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 前三条加载所需的模块，而`ProxyRequests`行确保服务器不能被第三方用作非自愿的代理。不要省略此行。
- en: 'Now that the "rewrite" functionality is enabled, we need to create a virtual
    host that will serve our application''s requests. This virtual host will include
    the "rewrite" rule that will allow our application to be served by Apache. A sample
    virtual host definition looks like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经启用了“重写”功能，我们需要创建一个虚拟主机来为我们应用程序的请求提供服务。这个虚拟主机将包括“重写”规则，允许我们的应用程序由 Apache
    提供。一个示例虚拟主机定义如下：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this simple example, we just set the server name, turn on the rewrite engine,
    and set up a rewrite rule. Before doing anything else, make sure that the server
    name is correct.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的示例中，我们只设置了服务器名称，开启了重写引擎，并设置了一个重写规则。在执行任何其他操作之前，请确保服务器名称是正确的。
- en: The rewrite rule is the important part of the configuration. Apache's `mod_rewrite`
    uses regular expression syntax for matching the part of a URL that will trigger
    the rule. In the configuration above, the first part of the rule tells the engine
    to match any URL that begins with a slash, which of course, will match any URL
    that will be served by this virtual host.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 重写规则是配置中的重要部分。Apache 的 `mod_rewrite` 使用正则表达式语法来匹配将触发规则的 URL 部分。在上面的配置中，规则的第一部分告诉引擎匹配以斜杠开头的任何
    URL，这当然会匹配由这个虚拟主机提供的任何 URL。
- en: In regular expressions, when you enclose a subexpression in parentheses, it
    means that anything that matches the text inside them has to be saved in a variable.
    The first expression in parentheses that matches this text is stored in the variable
    `$1`, the second in `$2`, and so on. In this case, anything after the slash, which
    is the full path of the request, will be stored in `$1`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在正则表达式中，当你用括号括起一个子表达式时，这意味着与括号内文本匹配的任何内容都必须保存到一个变量中。匹配此文本的第一个括号内的表达式存储在变量 `$1`
    中，第二个在 `$2` 中，依此类推。在这种情况下，斜杠之后的所有内容，即请求的完整路径，将被存储在 `$1` 中。
- en: The second part of the rule is dependent on Grok's virtual hosting tools. This
    will be the URL that will be looked up by the rule in order to get the actual
    content to be served at the matching location. For virtual hosting, Grok expects
    the full URL to the application that we are publishing (http://localhost:8080/todo),
    followed by the special virtual hosting syntax that will include the protocol,
    server name, and port, which will be used by Grok to translate all of the URLs
    present in the response, so that every link in it points to the correct host.
    Notice how, after the Grok `++vh++` rule, the full path for the request is appended
    to the end, by using the `$1` variable explained before.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 规则的第二部分依赖于 Grok 的虚拟主机工具。这将是由规则查询以获取实际内容的 URL，以便在匹配的位置提供服务。对于虚拟主机，Grok 期望我们发布的应用的完整
    URL（http://localhost:8080/todo），后面跟着特殊的虚拟主机语法，这将包括协议、服务器名称和端口号，Grok 将使用这些信息来转换响应中存在的所有
    URL，以便其中的每个链接都指向正确的宿主。注意，在 Grok `++vh++` 规则之后，通过使用之前解释的 `$1` 变量，将请求的完整路径附加到末尾。
- en: The third and final part of the rule indicates to Apache that this is a proxy
    request (P) and that this rule should be the last rule applied, when it matches
    (L).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 规则的第三和最后一部分指示 Apache 这是一个代理请求（P），并且当匹配时（L），这个规则应该是最后一个应用的规则。
- en: 'This is all that is needed to set up our application with `mod_rewrite`. To
    test this, first make sure that the paster process is running and that Apache
    is using the configuration that we added. Usually, the server is started automatically
    when it''s installed, so you might need to tell it to reload the configuration.
    In Ubuntu or Debian, the way to do this is:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要设置我们的应用程序与 `mod_rewrite` 一起使用的所有内容。为了测试这一点，首先确保 paster 进程正在运行，并且 Apache
    正在使用我们添加的配置。通常，服务器在安装时会自动启动，所以你可能需要告诉它重新加载配置。在 Ubuntu 或 Debian 中，这样做的方式是：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now you can go to the URL that you defined in the configuration (http://grok.example.com,
    in our example) and see your application work from behind Apache.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以访问配置中定义的 URL（在我们的示例中是 http://grok.example.com），并查看您的应用程序在 Apache 后面运行。
- en: Installing and setting up Grok under mod_wsgi
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 mod_wsgi 下安装和设置 Grok
- en: Another great option for serving Grok applications behind Apache is `mod_wsgi`,
    which is an Apache module that serves applications under the WSGI protocol. In
    this section, we'll learn what WSGI is, and how to set up Apache to serve our
    application by using the `mod_wsgi` module.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Apache 后面提供 Grok 应用程序的另一个优秀选项是 `mod_wsgi`，这是一个在 WSGI 协议下提供应用程序的 Apache 模块。在本节中，我们将学习
    WSGI 是什么，以及如何使用 `mod_wsgi` 模块设置 Apache 以提供我们的应用程序。
- en: 'WSGI: The Python Web Server Gateway Interface'
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WSGI：Python 网络服务器网关接口
- en: WSGI is a Python standard for specifying how web applications can communicate
    with web servers and application servers. Its objective is to provide a simple
    interface that can support most interactions between a web server and a web framework
    (such as Grok).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: WSGI 是一个 Python 标准，用于指定网络应用程序如何与网络服务器和应用程序服务器通信。其目标是提供一个简单的接口，以支持网络服务器和 Web
    框架（如 Grok）之间的大多数交互。
- en: WSGI also supports "middleware" components that can be used to preprocess or
    post-process a request. This means that it is used to create Python WSGI tools
    that "plug" into our applications and perform services such as profiling, error
    handling, and more.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: WSGI 还支持“中间件”组件，这些组件可以用于预处理或后处理请求。这意味着它被用来创建“插入”到我们的应用程序中的 Python WSGI 工具，并执行诸如性能分析、错误处理等功能。
- en: Grok can run behind any WSGI server. We'll now look at how to install Grok behind
    the Apache web server and `mod_wsgi` on a brand new Linux virtual server.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Grok 可以在任意 WSGI 服务器后面运行。现在我们将探讨如何在全新的 Linux 虚拟服务器上安装 Grok，以及 `mod_wsgi`。
- en: Grok and WSGI
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Grok 和 WSGI
- en: For Python web developers, WSGI holds the key to the Python web development
    future. As there are a number of important web development frameworks, and the
    power of Python makes it really easy to create new ones quickly, interacting with
    the best of breed applications developed in multiple frameworks could soon be
    the best way to create a new Python website.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Python 网络开发者来说，WSGI 是 Python 网络开发未来的关键。由于存在许多重要的网络开发框架，Python 的强大功能使得快速创建新框架变得非常容易，因此与多个框架中开发的最佳应用程序交互可能会很快成为创建新
    Python 网站的最佳方式。
- en: Until relatively recently, Zope 3 and some of its derived applications, such
    as Grok, ran the risk of missing the WSGI party, but not anymore. Grok 1.0 is
    WSGI compatible and can therefore be integrated with the wide range of WSGI-based
    technologies available in the Python world today.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 直到相对较近的时期，Zope 3 及其一些衍生应用程序，如 Grok，还有可能错过 WSGI 的聚会，但现在已经不是这样了。Grok 1.0 与 WSGI
    兼容，因此可以与当今 Python 世界中广泛可用的各种基于 WSGI 的技术集成。
- en: Why use Apache and mod_wsgi for Grok?
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么使用 Apache 和 mod_wsgi 为 Grok？
- en: There are a number of WSGI servers available, but this chapter will focus on
    using `mod_wsgi`, which is a WSGI adapter module for Apache. There are a number
    of reasons for this.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的 WSGI 服务器有很多，但本章将重点介绍使用 `mod_wsgi`，这是一个 Apache 的 WSGI 适配器模块。这样做有几个原因。
- en: First, Apache is the most popular web hosting platform, so there are many web
    developers and site administrators who are already familiar with it. Grok, for
    example, has been installed behind Apache for production servers by using `mod_rewrite`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Apache 是最受欢迎的网页托管平台，因此许多网络开发人员和网站管理员已经熟悉它。例如，Grok 就是使用 `mod_rewrite` 在 Apache
    后面安装用于生产服务器的。
- en: Second, there are also lots of Python applications that already run under Apache
    by using `mod_python`. There are a few WSGI adapters for this module as well,
    but `mod_wsgi` is written in C code, and has lower memory overhead and better
    performance than those adapters.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，还有许多 Python 应用程序已经在 Apache 下通过使用 `mod_python` 运行。为此模块也有几个 WSGI 适配器，但 `mod_wsgi`
    是用 C 语言编写的，与这些适配器相比，内存开销更低，性能更好。
- en: Also, one of the goals of `mod_wsgi` is to break into the low-cost commodity
    web hosting market, which would be good for Python, and ultimately for Grok and
    Zope.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`mod_wsgi` 的一个目标就是打入低成本的商品化网络托管市场，这对 Python、Grok 和 Zope 都是有益的。
- en: Setting up a clean Linux server
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置干净的 Linux 服务器
- en: In the discussion that follows, we'll use Linux as the operating system because,
    it's the most popular way to deploy web applications, by far. Ubuntu is the distribution
    that we'll cover, but these steps apply equally well to any Debian-based distribution.
    Other distributions use different package managers, and probably other system
    paths, but you should be able to easily figure out what you need in any case.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的讨论中，我们将使用 Linux 作为操作系统，因为它是迄今为止部署网络应用程序最受欢迎的方式。我们将介绍 Ubuntu 发行版，但这些步骤同样适用于任何基于
    Debian 的发行版。其他发行版使用不同的软件包管理器，可能还有不同的系统路径，但无论如何，你应该能够轻松地找出你需要的东西。
- en: We can start with a clean install of a recent version of Ubuntu GNU/Linux. The
    first step is to install the necessary packages for both the correct Python version
    (Grok currently requires Python 2.5) and the Apache server.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从安装最新版本的 Ubuntu GNU/Linux 的干净安装开始。第一步是安装必要的软件包，以支持正确的 Python 版本（Grok 目前需要
    Python 2.5）和 Apache 服务器。
- en: Before that, it is necessary to install the required packages for being able
    to compile and build software using Ubuntu (other distributions usually don't
    need this). Be aware that both package installation and Apache module additions
    usually require root access. In the commands block, the prompt with `$` is a user
    prompt, and the one with `#` is a root prompt that you can have with the command
    `sudo -s`. In this part, you'll use a root terminal so that you do not have to
    prefix each command with `sudo`. In the other parts, you'll use a user terminal
    where you add `sudo` before a command, if you need to execute something as root.
    You can have one terminal opened as root and another terminal as user.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前，需要安装编译和构建软件所需的软件包，以便使用Ubuntu（其他发行版通常不需要此步骤）。请注意，软件包安装和Apache模块添加通常需要root权限。在命令块中，带有`$`的提示符是用户提示符，带有`#`的提示符是root提示符，您可以通过执行`sudo
    -s`命令获得。在本部分中，您将使用root终端，这样就不需要在每个命令前加上`sudo`。在其他部分中，您将使用用户终端，如果需要以root身份执行某些操作，请在命令前加上`sudo`。您可以将一个终端作为root打开，另一个终端作为用户打开。
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, install the packages for Python and Apache. As with most packaged Linux
    distributions, Ubuntu requires a separate install for the development libraries
    of each piece of software:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，安装Python和Apache的软件包。与大多数打包的Linux发行版一样，Ubuntu需要为每个软件组件的开发库进行单独安装：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `apache2` package usually installs `apache2-mpm-worker`, but you may have
    the other version, `apache2-mpm-prefork`, installed. To check which one is installed,
    you can execute:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`apache2`软件包通常安装`apache2-mpm-worker`，但您可能已安装了另一个版本，即`apache2-mpm-prefork`。要检查已安装哪个版本，您可以执行以下命令：'
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, install the corresponding development package, `apache2-threaded-dev`
    if `apache2-mpm-worker` is installed, or `apache2-prefork-dev` if `apache2-mpm-prefork`
    is installed:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，安装相应的开发包，如果已安装`apache2-mpm-worker`，则安装`apache2-threaded-dev`；如果已安装`apache2-mpm-prefork`，则安装`apache2-prefork-dev`：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Grok uses Python''s `setuptools`, so that package is needed as well:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Grok使用Python的`setuptools`，因此也需要这个包：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'It''s possible that the version provided by the Ubuntu package is not the latest.
    If you want to have more control of the installed version of `setuptools` and
    want to update it yourself when a new version is available, you can use the following
    method instead. Download `setuptools-0.6c9-py2.5.egg` manually (or latest version,
    choose py2.5) and execute the command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能Ubuntu软件包提供的版本不是最新的。如果您想对安装的`setuptools`版本有更多控制，并在新版本可用时自行更新它，可以使用以下方法。手动下载`setuptools-0.6c9-py2.5.egg`（或最新版本，选择py2.5）并执行以下命令：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can later update it with:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以稍后使用以下命令进行更新：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Installing and configuring mod_wsgi
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装和配置mod_wsgi
- en: 'Now, the server is ready to install `mod_wsgi`. There is a package `libapache2-mod-wsgi`
    in Ubuntu, but it''s recommended that you build the latest version, in part because
    `mod_wsgi` has to be compiled with the same Python used by Grok. Please remove
    the `libapache2-mod-wsgi` package if you have installed it previously. We need
    to get the source directly from the download site, and then build it:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，服务器已准备好安装`mod_wsgi`。在Ubuntu中有一个名为`libapache2-mod-wsgi`的软件包，但建议您构建最新版本，部分原因是因为`mod_wsgi`必须使用与Grok相同的Python编译。如果您之前已安装该软件包，请将其删除。我们需要直接从下载站点获取源代码，然后进行构建：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Again, note that it is necessary to compile `mod_wsgi` using the same Python
    that you will use to run your website. As Grok requires 2.5, the `--with-python`
    option was used to point to the version of Python that we need.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，必须使用您将用于运行网站的相同Python编译`mod_wsgi`。由于Grok需要2.5版本，因此使用了`--with-python`选项来指向我们需要的Python版本。
- en: Once `mod_wsgi` is installed, the Apache server needs to be told about it. On
    Apache 2, this is done by adding the load declaration and any configuration directives
    to the `/etc/apache2/mods-available/` directory.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了`mod_wsgi`，Apache服务器就需要知道这一点。在Apache 2中，这是通过将加载声明和任何配置指令添加到`/etc/apache2/mods-available/`目录来完成的。
- en: 'The load declaration for the module needs to go in a file named `wsgi.load`
    (in the `/etc/apache2/mods-available/` directory), which contains only the following
    line of code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的加载声明需要放在一个名为`wsgi.load`的文件中（位于`/etc/apache2/mods-available/`目录），该文件只包含以下一行代码：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The configuration directives reside in the file named `wsgi.conf` next to `wsgi.load`
    file. We don't create it now, but it can be useful later to add directives to
    it, if you have more than one WSGI application to serve.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 配置指令位于名为`wsgi.conf`的文件中，该文件位于`wsgi.load`文件旁边。我们现在不创建它，但如果您有多个WSGI应用程序需要服务，它可能会很有用。
- en: 'Then, you have to activate the `wsgi` module with:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你必须使用以下命令激活`wsgi`模块：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Note that `a2enmod` stands for "apache2 enable mod" an executable that creates
    the symlink for you. Actually, `a2enmod wsgi` is equivalent to:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`a2enmod`代表“apache2 enable mod”，这是一个为你创建符号链接的可执行文件。实际上，`a2enmod wsgi`等同于：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: For Apache 1.3, or Apache 2 with an old directory layout, you may need to place
    the `LoadModule` line and the configuration directives (which you will see later)
    inside the `httpd.conf` file in your Apache's `/etc` directory. The soft links
    above will not be necessary in this case.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Apache 1.3或使用旧目录布局的Apache 2，你可能需要在Apache的`/etc`目录中的`httpd.conf`文件内放置`LoadModule`行和配置指令（你将在后面看到），在这种情况下，上述软链接将不再必要。
- en: Configuring a Grok site under mod_wsgi
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在mod_wsgi下配置Grok站点
- en: Grok can be installed with `setuptools`, and a Grok site can be easily created
    by using the included `grokproject` tool. As mentioned before, Grok can run behind
    any WSGI server, not just the paster server that is used by default. Now that
    we have a working `mod_wsgi`, we will look at how to run Grok behind it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Grok可以使用`setuptools`安装，并且可以使用包含的`grokproject`工具轻松创建Grok站点。如前所述，Grok可以在任何WSGI服务器后面运行，而不仅仅是默认使用的paster服务器。现在我们有了工作的`mod_wsgi`，我们将看看如何在它后面运行Grok。
- en: Getting the to-do application ready for mod_wsgi
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备待办事项应用程序以供mod_wsgi使用
- en: 'WSGI applications use entry points to let the WSGI server know how to run the
    program. The **entry point** is usually a simple Python script that provides a
    function for calling the application and passing the appropriate initialization
    file to the server. Some servers, such as the paster server, need only the path
    to the `.ini` file, which is what we normally use to start up a Grok application.
    This doesn''t mean that there''s no entry point script for paster. In fact, the
    entry point is defined in the `setup.py` file, which is created by `grokproject`
    when a new project is initialized. Take a look at the last few lines of the file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: WSGI应用程序使用入口点来让WSGI服务器知道如何运行程序。**入口点**通常是一个简单的Python脚本，它提供了一个用于调用应用程序并传递适当的初始化文件给服务器的函数。一些服务器，例如paster服务器，只需要`.ini`文件的路径，这是我们通常用来启动Grok应用程序的方式。这并不意味着paster没有入口点脚本。实际上，入口点是在`setup.py`文件中定义的，这是在初始化新项目时由`grokproject`创建的。看看文件的最后几行：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The heading `paste.app_factory` tells the server where to find the factory functions
    for each section of the `.ini` file. In Grok, a general application factory function
    is defined in the `grokcore.startup` package, which is what paster uses to start
    applications.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 标题`paste.app_factory`告诉服务器在哪里找到`.ini`文件每个部分的工厂函数。在Grok中，一个通用应用程序工厂函数定义在`grokcore.startup`包中，这是paster用来启动应用程序的。
- en: However, `mod_wsgi` requires a path to the factory, which would be cumbersome
    to include in our configuration, because this would mean that it would need to
    point to a file inside the `grokcore.startup` egg. As eggs include the version
    number, a simple update could crash our site if the old egg is removed. It would
    be better to have our own factory defined inside the application package.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`mod_wsgi`需要一个指向工厂的路径，这在我们配置中可能会很麻烦，因为这意味着它需要指向`grokcore.startup` egg内的一个文件。由于egg包含版本号，简单的更新可能会导致如果删除旧egg，我们的站点崩溃。最好在我们的应用程序包内部定义自己的工厂。
- en: Given that the factory code can be almost identical for different projects,
    it would be better to have it included automatically when we create the project,
    to avoid having to re-create the same script every time. Fortunately for us, Grok's
    use of buildout turns out to be very helpful in this case, as there is a buildout
    recipe available that creates the WSGI application factory for us.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由于工厂代码对于不同的项目几乎可以完全相同，因此在我们创建项目时自动包含它会更好，以避免每次都需要重新创建相同的脚本。幸运的是，对于Grok使用buildout的情况，这非常有帮助，因为有一个buildout配方可以为我们创建WSGI应用程序工厂。
- en: 'The recipe is called `collective.recipe.modwsgi`. To use it, simply add a part
    to the buildout having a name such as `wsgi_app`. The recipe requires two parameters
    the first being the eggs that have to be made available to the Python process
    that will run the app under WSGI, and the second being the path to the configuration
    file that will be used for the site. This last parameter `value` is the usual
    `parts/etc/deploy.ini` path that we have been using for running the application
    under paster. That''s it. Edit the `buildout.cfg` file''s `parts` list as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 该食谱名为 `collective.recipe.modwsgi`。要使用它，只需在 buildout 中添加一个名为 `wsgi_app` 的部分。该食谱需要两个参数，第一个是必须提供给运行
    WSGI 应用程序的 Python 进程的 eggs，第二个是用于站点的配置文件路径。最后一个参数 `value` 是我们一直在使用的 `parts/etc/deploy.ini`
    路径，用于在 paster 下运行应用程序。就是这样。按照以下方式编辑 `buildout.cfg` 文件的 `parts` 列表：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, add the following section anywhere in the file:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在文件的任何位置添加以下部分：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note that the `eggs` parameter simply points back to the main egg section defined
    at the start of the buildout, to avoid repetition.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`eggs` 参数只是简单地指向在 buildout 开始处定义的主要 egg 部分，以避免重复。
- en: When the buildout is run again, we'll find a `parts/wsgi_app` directory (or
    whichever name we used for the buildout part). Inside that directory, there will
    be a `wsgi` file that can be used as is by `mod_wsgi` to run the application.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当再次运行 buildout 时，我们会找到一个 `parts/wsgi_app` 目录（或我们为 buildout 部分使用的任何名称）。在该目录内，将有一个
    `wsgi` 文件，可以直接由 `mod_wsgi` 使用来运行应用程序。
- en: Configuring an Apache site to use mod_wsgi
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Apache 站点以使用 mod_wsgi
- en: The last step is to add a site to the Apache server that uses `mod_wsgi` to
    serve our application. This is standard `mod_wsgi` configuration; we'll just add
    the path to the application factory that we created in the previous section.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将站点添加到使用 `mod_wsgi` 服务的 Apache 服务器。这是标准的 `mod_wsgi` 配置；我们只需添加我们之前创建的应用程序工厂的路径。
- en: To set up the virtual host, create a file in the `/etc/apache2/sites-available`
    directory and call it, for example, "grok". Add the following code to it, assuming
    your to-do application is at `/home/cguardia/grok/todo:`
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置虚拟主机，在 `/etc/apache2/sites-available` 目录中创建一个文件，例如命名为 "grok"。向其中添加以下代码，假设你的待办事项应用位于
    `/home/cguardia/grok/todo:`。
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This will run `mod_wsgi` in 'daemon' mode, which means that it will launch a
    number of processes in order to run the configured WSGI application instead of
    using the Apache process. If you are using virtualenv, the `site-packages` directory
    of the virtual Python, which is used to run it, needs to be passed in the `WSGIPythonHome`
    variable. To tell `mod_wsgi` which WSGI application to run, we use the `WSGIScriptAlias`
    directive, and pass to it the path to the application factory that we created
    earlier.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使 `mod_wsgi` 以 'daemon' 模式运行，这意味着它将启动多个进程以运行配置的 WSGI 应用程序，而不是使用 Apache 进程。如果你使用
    virtualenv，运行它的虚拟 Python 的 `site-packages` 目录需要传递给 `WSGIPythonHome` 变量。为了告诉 `mod_wsgi`
    要运行哪个 WSGI 应用程序，我们使用 `WSGIScriptAlias` 指令，并传递我们之前创建的应用程序工厂的路径。
- en: Note that we assign a user and group to run the process. It is required that
    this user has access to the application directory.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们分配了一个用户和组来运行进程。必须要求此用户有权访问应用程序目录。
- en: The PYTHON_EGG_CACHE directory
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PYTHON_EGG_CACHE 目录
- en: 'Note that when the application is started, all of the eggs will be automatically
    extracted in the `PYTHON_EGG_CACHE` directory, normally `~/.python-eggs`. This
    directory depends on the `HOME` environment variable. The `HOME` apache user `www-data`
    is `/var/www`. You may get the error, **[Errno 13] Permission denied: ''/var/www/.python-eggs''**
    in your `error.log` apache file if you don''t configure the user or the `python-eggs`
    variable in the `WSGIDaemonProcess` directive. You can also add a `python-eggs`
    parameter to tell `mod_wsgi` to use an alternative directory for the egg cache:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '注意，当应用程序启动时，所有 eggs 将会自动提取到 `PYTHON_EGG_CACHE` 目录中，通常是 `~/.python-eggs`。此目录依赖于
    `HOME` 环境变量。`HOME` apache 用户 `www-data` 是 `/var/www`。如果你没有在 `WSGIDaemonProcess`
    指令中配置用户或 `python-eggs` 变量，你可能会在 `error.log` apache 文件中遇到错误 **[Errno 13] Permission
    denied: ''/var/www/.python-eggs''**。你也可以添加一个 `python-eggs` 参数来告诉 `mod_wsgi` 使用一个替代目录作为
    egg 缓存：'
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this example, the process belongs to `www-data`. The `www-data` and `python-eggs`
    cache directory will be `/tmp/python-eggs`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，该进程属于 `www-data`。`www-data` 和 `python-eggs` 缓存目录将是 `/tmp/python-eggs`。
- en: Running the application
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'Once the configuration is ready, we need to enable the site in Apache, because
    we just created it. This is necessary only for the first time we run it:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置就绪，我们需要在Apache中启用站点，因为我们刚刚创建了它。这仅在第一次运行时是必要的：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This command will create a link from the Apache `sites-enabled` directory to
    the "grok" site that we just configured, which is enough to make it active. Then,
    we can start serving our application from Apache by simply reloading the configuration
    for the server:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在Apache的`sites-enabled`目录中创建一个指向我们刚刚配置的“grok”站点的链接，这足以使其生效。然后，我们可以通过简单地重新加载服务器的配置来从Apache开始服务我们的应用程序：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When you visit the site in a browser ([http://wsgi.example.com/todo](http://wsgi.example.com/todo)),
    you should see the Grok admin UI. You should be able to log in by using the admin
    login name and password.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在浏览器中访问网站([http://wsgi.example.com/todo](http://wsgi.example.com/todo))时，你应该看到Grok管理UI。你应该能够使用管理员登录名和密码登录。
- en: Adding a ZEO server
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加ZEO服务器
- en: By default, `mod_wsgi` will use a single process to run the application. As
    this configuration is intended for production use, it may be desirable to have
    a higher number of processes available to serve the application. The ZODB that
    Grok uses comes with a server named **Zope Enterprise Object** (ZEO), which allows
    us to add as many processes to our configuration as our system permits, providing
    unlimited horizontal scalability. Typically, the recommended number of processes
    is one for each core in the system's processors. Let's set up a ZEO server and
    configure the Grok process to connect to it.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`mod_wsgi`将使用单个进程来运行应用程序。由于此配置旨在用于生产环境，可能希望有更多的进程可供应用程序服务。Grok使用的ZODB附带一个名为**Zope企业对象**（ZEO）的服务器，它允许我们将尽可能多的进程添加到我们的配置中，提供无限的水平扩展性。通常，建议的进程数是系统处理器的每个核心一个。让我们设置一个ZEO服务器并配置Grok进程连接到它。
- en: Buildout recipe for the ZEO configuration
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ZEO配置的Buildout配方
- en: 'Once again, the easiest way to get ZEO running is to use an existing buildout
    recipe. This time we''ll use the one named `zc:zodbrecipes`. Add a `zeo_server`
    part to your `buildout.cfg` file, as shown below:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，让ZEO运行的最简单方法就是使用现有的buildout配方。这次我们将使用名为`zc:zodbrecipes`的配方。将`zeo_server`部分添加到您的`buildout.cfg`文件中，如下所示：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, add a `zeo_server` section as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加一个`zeo_server`部分，如下所示：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This will add the ZEO server, and configure it to listen on port 8100\. The
    rest of the configuration is pretty much boilerplate, so just copy it to new projects
    when you need ZEO there. The `blobstorage` section sets up a file storage with
    blob handling enabled; the `logfile` sections tells the server where to store
    the log file.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加ZEO服务器，并将其配置为监听端口8100。其余的配置基本上是样板，所以只需在需要ZEO的新项目中复制它。`blobstorage`部分设置了一个启用blob处理的文件存储；`logfile`部分告诉服务器在哪里存储日志文件。
- en: 'Next, we need the buildout to add scripts for starting and stopping ZEO. This
    is easily accomplished by adding the `ZODB3` egg to our app section:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要buildout添加启动和停止ZEO的脚本。这可以通过将`ZODB3` egg添加到我们的应用程序部分轻松实现：
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Configuring the ZEO client
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置ZEO客户端
- en: 'Currently, the Grok application that we are using is working with the regular
    Zope server. To use ZEO, we need to change the configuration to connect to the
    server at port 8100\. Fortunately, the required changes already come inside the
    regular `zope.conf` file that is created inside the Grok project, so we only need
    to uncomment those lines. Uncomment the following lines inside the `zope.conf.in`
    file in the `etc` directory of your Grok project:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们使用的Grok应用程序正在与常规的Zope服务器一起工作。要使用ZEO，我们需要更改配置以连接到端口8100的服务器。幸运的是，所需更改已经包含在Grok项目内部创建的常规`zope.conf`文件中，所以我们只需要取消注释那些行。在Grok项目的`etc`目录中的`zope.conf.in`文件内取消注释以下行：
- en: '[PRE31]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The important line here is the one with the ZEO server address. In this case,
    we are using the same host as the Grok application, and the port that we defined
    in our ZEO configuration in the previous section.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这里重要的一行是带有ZEO服务器地址的行。在这种情况下，我们使用与Grok应用程序相同的宿主，以及我们在上一节中定义的ZEO配置中的端口。
- en: Launching the ZEO server
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动ZEO服务器
- en: 'After running the buildout again, we''ll be ready to start the ZEO server in
    the background. To do this, we have to run only the server script that was automatically
    created for us. The name of the script is the same as the name of the part in
    the buildout where we configured the server:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行 buildout 后，我们将准备好在后台启动 ZEO 服务器。为此，我们只需要运行为我们自动创建的服务器脚本。该脚本的名称与 buildout
    中配置服务器的部分名称相同：
- en: '[PRE32]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Our Grok application is now running! To stop it, you can use the following
    command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的可视化应用现在正在运行！要停止它，你可以使用以下命令：
- en: '[PRE33]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Augmenting the number of processes
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增加进程数量
- en: 'Recall that we mentioned earlier that `mod_wsgi` runs the application in a
    single process by default. To really take advantage of ZEO, we want to have more
    processes available. We need to make a small addition to our `mod_wsgi` Apache
    virtual host configuration for that. Change the `WSGIDaemonProcess` line, near
    the top, to look like the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，我们之前提到 `mod_wsgi` 默认情况下在一个进程中运行应用程序。为了真正利用 ZEO，我们希望有更多的进程可用。我们需要对我们的 `mod_wsgi`
    Apache 虚拟主机配置进行一些小的修改。将 `WSGIDaemonProcess` 行，靠近顶部，修改如下代码：
- en: '[PRE34]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Remember to reload the Apache configuration to be able to see the new setup
    in action. In this example, we'll have two processes running, with four threads
    each. By using ZEO and `mod_wsgi`, we now have a scalable site.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 记得重新加载 Apache 配置，以便能够看到新设置的效果。在这个例子中，我们将有两个进程运行，每个进程有四个线程。通过使用 ZEO 和 `mod_wsgi`，我们现在有一个可扩展的网站。
- en: 'More scalability: Adding caching and load balancing'
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更高的可扩展性：添加缓存和负载均衡
- en: The configurations that we just discussed will be enough for most kinds of sites.
    However, there are times when a site is required to handle high traffic loads,
    and measures need to be taken to ensure that it will not go down under pressure.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚才讨论的配置对于大多数类型的网站来说已经足够了。然而，有时一个网站需要处理高流量负载，并且需要采取措施确保它在压力下不会崩溃。
- en: Caching proxies
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存代理
- en: One very effective thing that can be done is to add a caching proxy in front
    of the Apache server. A **caching proxy** reduces bandwidth and improves response
    times by saving a copy of the most frequently used pages of a site and serving
    that copy directly on further requests, rather than connecting to the server again.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 可以做的一件非常有效的事情是在 Apache 服务器前添加一个缓存代理。一个**缓存代理**通过保存网站最常使用的页面的副本并在后续请求中直接提供该副本，从而减少带宽并提高响应时间，而不是再次连接到服务器。
- en: Two very popular caching proxies are Squid ([http://www.squid-cache.org](http://www.squid-cache.org))
    and Varnish ([http://www.varnish-cache.org](http://www.varnish-cache.org)). A
    detailed discussion of how to set these up is beyond the objectives of this chapter,
    but, interestingly, there are buildout recipes available for setting them up automatically.
    Take a look at the Python Package Index and see how these recipes help to build
    and configure a caching proxy. For Squid, there's `plone.recipe.squid` ([http://pypi.python.org/pypi/plone.recipe.squid/](http://pypi.python.org/pypi/plone.recipe.squid/)),
    and for Varnish, the corresponding `plone.recipe.varnish` ([http://pypi.python.org/pypi/plone.recipe.varnish](http://pypi.python.org/pypi/plone.recipe.varnish)).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 两个非常流行的缓存代理是 Squid ([http://www.squid-cache.org](http://www.squid-cache.org))
    和 Varnish ([http://www.varnish-cache.org](http://www.varnish-cache.org))。如何设置这些代理的详细讨论超出了本章的目标，但有趣的是，有自动设置它们的
    buildout 脚本可用。查看 Python 包索引，看看这些脚本如何帮助构建和配置缓存代理。对于 Squid，有 `plone.recipe.squid`
    ([http://pypi.python.org/pypi/plone.recipe.squid/](http://pypi.python.org/pypi/plone.recipe.squid/))，而对于
    Varnish，相应的 `plone.recipe.varnish` ([http://pypi.python.org/pypi/plone.recipe.varnish](http://pypi.python.org/pypi/plone.recipe.varnish))。
- en: Load balancers
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 负载均衡器
- en: A **load balancer** sits in front of two or more instances of an application
    and distributes the incoming requests evenly between them. This is a very powerful
    solution when you can have several machines serving the application.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**负载均衡器**位于应用程序的两个或多个实例之前，并将传入的请求均匀地分配给它们。当你有多个机器提供服务时，这是一个非常强大的解决方案。'
- en: There are several load balancers available as open source; for example, Apache
    itself has a load-balancing module. However, one of the most popular load balancers
    to use with Zope Toolkit-based applications is "Pound" ([http://www.apsis.ch/pound/](http://www.apsis.ch/pound/)).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个开源的负载均衡器可用；例如，Apache 本身就有一个负载均衡模块。然而，与基于 Zope Toolkit 的应用程序一起使用最流行的负载均衡器之一是
    "Pound" ([http://www.apsis.ch/pound/](http://www.apsis.ch/pound/))。
- en: Pound does a lot more than just distributing the load. It can keep session information
    and send a request from the same origin browser to the same destination server
    used on the first request. Pound can also distribute requests among servers according
    to its URL. Finally, it can act as a failover server, because it's smart enough
    to notice when a backend server fails and will stop sending requests to it until
    the server recovers.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Pound 不仅仅只是分配负载。它可以保持会话信息，并将来自同一来源浏览器的请求发送到第一次请求时使用的同一目标服务器。Pound 还可以根据其 URL
    在服务器之间分配请求。最后，它可以作为一个故障转移服务器，因为它足够智能，能够注意到后端服务器何时失败，并且会在服务器恢复之前停止向其发送请求。
- en: There is, of course, a buildout recipe available for setting up Pound, appropriately
    named `plone.recipe.pound` ([http://pypi.python.org/pypi/plone.recipe.pound](http://pypi.python.org/pypi/plone.recipe.pound)).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有一个 buildout 脚本可用于设置 Pound，其名称恰当地命名为 `plone.recipe.pound` ([http://pypi.python.org/pypi/plone.recipe.pound](http://pypi.python.org/pypi/plone.recipe.pound))。
- en: A high-traffic architecture for Grok
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Grok 的高流量架构
- en: Now that we know about some mechanisms for improving our application's performance,
    it can be helpful to visualize how the different parts relate to each other. In
    our case, a good way of organizing a system to support high traffic loads would
    be to put a caching proxy such as Varnish at the front and configure it to pass
    requests to the Pound load balancer.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了一些提高我们应用程序性能的机制，可视化不同部分之间的关系可能会有所帮助。在我们的案例中，组织一个支持高流量负载的系统的好方法是在前端放置一个缓存代理，例如
    Varnish，并将其配置为将请求传递给 Pound 负载均衡器。
- en: Pound would be configured to distribute the load among a number of separate
    servers, each one of them running Apache configured with `mod_wsgi`, and running
    several processes that would talk to a number of ZEO clients running our Grok
    application. Using this architecture, depicted in the following figure, we could
    scale our application to deal with very high traffic.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Pound 将被配置为在多个单独的服务器之间分配负载，每个服务器都运行配置了 `mod_wsgi` 的 Apache，并运行多个进程，这些进程将与运行我们的
    Grok 应用程序的多个 ZEO 客户端进行通信。使用以下图中所示的这种架构，我们可以扩展我们的应用程序以处理非常高的流量。
- en: '![A high-traffic architecture for Grok](img/7481_14_02.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![Grok 的高流量架构](img/7481_14_02.jpg)'
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter discussed how to approach application deployment, and explored
    various possibilities for deploying our sample application, from a simple setup
    to a scalable configuration with ZEO.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了如何处理应用程序部署，并探讨了部署我们的示例应用程序的各种可能性，从简单的设置到具有 ZEO 的可扩展配置。
- en: We have reached the end of our journey with Grok. Hopefully, you'll find that
    Grok is a good addition to your web arsenal, and will think about how its strengths
    could help you reach your goals whenever you need to develop a web application.
    In this Internet age, it's very easy to reach out and communicate with people
    who can help us with many kinds of technologies. Grok developers and users are
    no exception, so please do not hesitate to ask for advice, by using Grok's mailing
    lists or IRC channel. We'll be glad to help you, and will be happy that you took
    Grok out for a spin.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们与 Grok 的旅程已经结束。希望你会觉得 Grok 是你网络工具箱中一个很好的补充，并且会考虑其优势如何帮助你实现目标，无论何时你需要开发一个网络应用程序。在这个互联网时代，联系并与人沟通以获得各种技术的帮助非常容易。Grok
    的开发者和用户也不例外，所以请不要犹豫，通过使用 Grok 的邮件列表或 IRC 频道寻求建议。我们将很高兴帮助你，并且会为你在 Grok 上尝试而感到高兴。
