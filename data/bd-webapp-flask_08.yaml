- en: Chapter 8. Tips and Tricks or Flask Wizardry 101
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。Flask的技巧或巫术101
- en: Can you wait any longer before trying more advanced topics on Flask? I certainly
    can't! In this chapter, we'll study techniques and modules essential to work better
    and more efficiently with Flask.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试更高级的Flask主题之前，你还能等多久？我肯定不能！在本章中，我们将学习技术和模块，这些对于更好更高效地使用Flask至关重要。
- en: What good is high-quality software that takes forever to code or low-quality
    software delivered in a jiffy? Real Web development, the one you get paid for
    at the end of the month, requires maintainability, productivity, and quality to
    be feasible.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 高质量的软件需要花费很长时间编码，或者低质量的软件可以很快交付？真正的Web开发，也就是你在月底拿到薪水的那种，需要可维护性，生产力和质量才能成为可能。
- en: As we discussed earlier, software quality is closely related to testing. One
    way to measure software quality is verifying how close its features are to what
    is expected of it. This kind of measuring does not take into account the subjective
    side of quality evaluation. A client, per example, may believe the design of his
    latest project is ugly and consider a well tested, feature-adherent Web project
    *crappy*. The most you can do in these cases is charge a few extra bucks for a
    design refactory.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，软件质量与测试密切相关。衡量软件质量的一种方法是验证其功能与预期功能的接近程度。这种衡量并不考虑质量评估的主观方面。例如，客户可能认为他最新项目的设计很丑，认为一个经过良好测试的，符合功能的Web项目是*糟糕的*。在这些情况下，你所能做的就是为设计重构收取一些额外的费用。
- en: Tip
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Bring your client closer to the development process in order to avoid this kind
    of situation, if it ever happens to you. Try searching for "scrum" in Google or
    DuckDuckGo.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到这种情况，可以让你的客户更接近开发过程，以避免这种情况。尝试在Google或DuckDuckGo中搜索“scrum”。
- en: When talking about **productivity** and **maintainability**, the approaches
    are many! You may purchase a nice Integrated Development Environment (IDE) such
    as PyCharm or WingIDE to improve your productivity or hire third-party services
    to help you test your code or control your development schedule, but these can
    do just so much. Good architecture and task automation will be your best friend
    in most projects. Before discussing suggestions on how to organize you code and
    which modules will help you save some typing here and there, let's discuss premature
    optimization and overengineering, two terrible symptoms of an anxious developer/analyst/nosy
    manager.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论**生产力**和**可维护性**时，方法有很多！你可以购买一个像PyCharm或WingIDE这样的好的集成开发环境（IDE）来提高你的生产力，或者雇佣第三方服务来帮助你测试你的代码或控制你的开发进度，但这些只能做到这么多。良好的架构和任务自动化将是大多数项目中的最好朋友。在讨论如何组织你的代码以及哪些模块将帮助你节省一些打字之前，让我们讨论一下过早优化和过度设计，这是焦虑的开发人员/分析师/好奇的经理的两个可怕的症状。
- en: Overengineering
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过度设计
- en: Making software is like making a condo, in a few ways. You'll plan ahead what
    you want to create before starting so that waste is kept to a minimum. Contrary
    to a condo, where it's advisable to plan the whole project before you start, you
    do not have to plan out your software because it will most likely change during
    development, and a lot of the planning may just go to waste.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 制作软件有点像制作公寓，有一些相似之处。在开始之前，你会提前计划你想要创造的东西，以便将浪费降到最低。与公寓相反，你不必计划你的软件，因为它在开发过程中很可能会发生变化，而且很多计划可能只是浪费。
- en: The problem with this "plan just enough" approach is that you don't know what
    to expect in the future, which may transform the little bit of paranoia we all
    have inside into something big. One may end up coding against total system failure
    or complex software requirement scenarios that may never happen. You don't need
    a multilayer architecture, with cache, database integration, signaling system,
    and so on, to create a hello world, nor do you need less than this to create a
    Facebook clone.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这种“计划刚刚好”的方法的问题在于你不知道未来会发生什么，这可能会将我们内心的一点点偏执变成一些大问题。一个人可能最终会编写针对完全系统故障或复杂软件需求场景的代码，而这些可能永远不会发生。你不需要多层架构，缓存，数据库集成，信号系统等等，来创建一个hello
    world，也不需要少于这些来创建一个Facebook克隆。
- en: 'The message here is: do not make your product more robust or complex than you
    know it needs to be and do not waste time planning for what may, most likely,
    never happen.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的信息是：不要使你的产品比你知道它需要的更健壮或更复杂，也不要浪费时间计划可能永远不会发生的事情。
- en: Tip
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Always plan for reasonable levels of safety, complexity, and performance.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 始终计划合理的安全性，复杂性和性能水平。
- en: Premature optimization
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过早优化
- en: Is your software fast enough? Don't know? Then why are you optimizing that code,
    my friend? When you spend time optimizing software that you're not sure needs
    optimization, if no one complained about it being slow or you do not notice it
    to be slow in daily use, you're probably wasting time with premature optimization.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你的软件足够快吗？不知道？那么为什么要优化代码，我的朋友？当你花时间优化你不确定是否需要优化的软件时，如果没有人抱怨它运行缓慢，或者你在日常使用中没有注意到它运行缓慢，你可能正在浪费时间进行过早优化。
- en: And so, on to Flask.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，开始Flask吧。
- en: Blueprints 101
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蓝图 101
- en: 'So far, our applications have all been flat: beautiful, single-file Web applications
    (templates and static resources not considered). In some cases, that''s a nice
    approach; a reduced need for imports, easy to maintain with simple editors and
    all but…'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的应用程序都是平面的：美丽的，单文件的Web应用程序（不考虑模板和静态资源）。在某些情况下，这是一个不错的方法；减少了对导入的需求，易于使用简单的编辑器进行维护，但是...
- en: As our applications grow, we identify the need to contextually arrange our code.
    Flask Blueprints allow you to modularize your project, sharding your views in
    "app-like" objects called **blueprints** that can be later loaded and exposed
    by your Flask application. Large applications benefit deeply from the use of blueprints,
    as the code gets more organized.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的应用程序的增长，我们发现需要上下文地安排我们的代码。Flask蓝图允许你将项目模块化，将你的视图分片成“类似应用程序”的对象，称为**蓝图**，这些蓝图可以稍后由你的Flask应用程序加载和公开。大型应用程序受益于使用蓝图，因为代码变得更有组织性。
- en: Feature-wise, it also helps you configure the registered view access and resource
    lookup in a more monolithic way. Tests, models, templates and static resources
    can be sorted by blueprint, making your code so much more maintainable. If you're
    familiar with **Django**, think of blueprints as Django apps. This way, a registered
    blueprint has access to the application config and may be registered with different
    routes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在功能上，它还可以帮助您以更集中的方式配置已注册的视图访问和资源查找。测试、模型、模板和静态资源可以按蓝图进行排序，使您的代码更易于维护。如果您熟悉**Django**，可以将蓝图视为Django应用程序。这样，注册的蓝图可以访问应用程序配置，并可以使用不同的路由进行注册。
- en: Unlike Django apps, blueprints do not enforce a specific structure, just like
    the Flask application itself. You may have a blueprint structured as a module,
    for example, which is kind of convenient, once in a while.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与Django应用程序不同，蓝图不强制执行特定的结构，就像Flask应用程序本身一样。例如，您可以将蓝图结构化为模块，这在某种程度上是方便的。
- en: 'An example always helps, right? Let''s see a good example of blueprints. First,
    we installed the required library for the example in our virtual environment:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例子总是有帮助的，对吧？让我们看一个蓝图的好例子。首先，在我们的虚拟环境中安装了示例所需的库：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And then we defined our tests (because we love TDD!):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义了我们的测试（因为我们喜欢TDD！）：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, we test a single view, `blog.posts_view`, that has two
    routes, one for post detail and another for post listing. If our view receives
    a `slug` parameter, it should return only the first `Post` that has the attribute
    value of slug; if not, it returns up to 10 results.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们测试了一个单个视图`blog.posts_view`，它有两个路由，一个用于帖子详细信息，另一个用于帖子列表。如果我们的视图接收到一个`slug`参数，它应该只返回具有slug属性值的第一个`Post`；如果没有，它将返回最多10个结果。
- en: 'We may now create a view, using blueprints that satisfy our tests:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个视图，使用满足我们测试的蓝图：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Creating a blueprint is pretty simple: we provide the blueprint name, which
    is also used as an endpoint prefix to all the blueprint views, the import name
    (usually `__name__`), and any extra arguments we see fit. In the example, we pass
    `template_folder` as the argument because we want to make use of templates. If
    you were coding a service, you could skip this parameter. Another very useful
    parameter is `url_prefix`, which allows us to define a default URL prefix for
    all our paths.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 创建蓝图非常简单：我们提供蓝图名称，该名称也用作所有蓝图视图的端点前缀，导入名称（通常为`__name__`），以及我们认为合适的任何额外参数。在示例中，我们传递了`template_folder`作为参数，因为我们想使用模板。如果您正在编写服务，可以跳过此参数。另一个非常有用的参数是`url_prefix`，它允许我们为所有路径定义默认的URL前缀。
- en: Tip
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If our blueprint name is `blog` and we register a method `index_view`, our endpoint
    to that view will be `blog.index_view`. An endpoint is a "name reference" to your
    view you may translate into its URL path.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的蓝图名称是`blog`，并且我们注册了一个方法`index_view`，我们对该视图的端点将是`blog.index_view`。端点是对视图的“名称引用”，您可以将其转换为其URL路径。
- en: The next step is to register our blueprint to our Flask application in order
    to make the views we wrote accessible. A `database.py` module is also created
    to hold our db instance.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在我们的Flask应用程序中注册我们的蓝图，以便使我们编写的视图可访问。还创建了一个`database.py`模块来保存我们的db实例。
- en: Be warned that our Post model will be recognized by `db.create_all` because
    it was defined in `blog.py`; thus it becomes visible when the module is imported.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的Post模型将被`db.create_all`识别，因为它是在`blog.py`中定义的；因此，当模块被导入时，它变得可见。
- en: Tip
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you have a model class defined in a module that is not imported anywhere,
    its tables may not be created because SQLAlchemy will not know of it. One way
    to avoid this situation is to have all your models imported by the module where
    the blueprint is defined.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在任何地方导入了一个模块中定义的模型类，那么它的表可能不会被创建，因为SQLAlchemy将不知道它。避免这种情况的一种方法是让所有模型都由定义蓝图的模块导入。
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What have we here? An `app_factory` that creates our Flask application sets
    the default database in `/tmp/`, a common Linux folder for temporary files; initiates
    our database manager, defined in `database.py`; and registers our blueprint using
    `register_blueprint`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里有什么？一个`app_factory`，它创建我们的Flask应用程序，在`/tmp/`中设置默认数据库，这是一个常见的Linux临时文件夹；初始化我们的数据库管理器，在`database.py`中定义；并使用`register_blueprint`注册我们的蓝图。
- en: We set a routine to verify if we're running or importing the given module (useful
    for `runtests.py` as it imports from `main.py`); if we're running it, we create
    an app, set it to debug mode (because we're developing), create the database inside
    a temporary test context (`create_all` will not run outside a context), and run
    the app.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了一个例行程序来验证我们是在运行还是导入给定的模块（对于`runtests.py`很有用，因为它从`main.py`导入）；如果我们正在运行它，我们创建一个应用程序，将其设置为调试模式（因为我们正在开发），在临时测试上下文中创建数据库（`create_all`不会在上下文之外运行），并运行应用程序。
- en: The templates (`post.html` and `posts.html`) still need to be written. Can you
    write them in order to make the tests pass? I leave it as a job for you!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 模板（`post.html`和`posts.html`）仍然需要编写。您能写出来使测试通过吗？我把它留给你来做！
- en: 'Our current example project structure should look like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的示例项目结构应该如下所示：
- en: '![Blueprints 101](img/3863_08_01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![蓝图 101](img/3863_08_01.jpg)'
- en: 'Well, our project is still flat; all modules on the same level, contextually
    arranged, but flat. Let''s try moving our blog blueprint into its own module!
    We probably want something like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我们的项目仍然是平的；所有模块都在同一级别上，上下文排列，但是平的。让我们尝试将我们的博客蓝图移动到自己的模块中！我们可能想要这样的东西：
- en: '![Blueprints 101](img/3863_08_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![蓝图 101](img/3863_08_02.jpg)'
- en: Blog templates inside a templates folder inside the blog package, our models
    inside `models.py`, and our views inside `views.py` (much like a Django app, right?).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 博客模板位于博客包中的模板文件夹中，我们的模型位于`models.py`中，我们的视图位于`views.py`中（就像Django应用程序一样，对吧？）。
- en: 'It''s possible to make that change without much effort. Mostly, create a `blog`
    folder and put an `__init__.py` file with the following content inside:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 可以轻松进行这种更改。主要是创建一个`blog`文件夹，并在其中放置一个带有以下内容的`__init__.py`文件：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Move the `Post` class definition and db import into `models.py` and move blog-specific
    templates, `post.html` and `posts.html`, into a `templates` folder inside the
    package. As `template_folder` is relative to the current module directory, there
    is no need to change our blueprint instantiation. Now, run your tests. They should
    work without modification.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Post`类定义和db导入移到`models.py`中，并将特定于博客的模板`post.html`和`posts.html`移到包内的`templates`文件夹中。由于`template_folder`是相对于当前模块目录的，因此无需更改我们的蓝图实例化。现在，运行您的测试。它们应该可以正常工作，无需修改。
- en: 'Take a sip, put on your war helmet, and let''s move on to the next topic: logging!'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 喝一口水，戴上你的战斗头盔，让我们继续下一个话题：记录！
- en: Oh God, please tell me you have the logs…
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哦，天啊，请告诉我你有日志…
- en: You never know how much logging is important until you face a mysterious problem
    you can't quite figure out. Understanding why something wrong happened is the
    first, and probably main, reason why people add logging to their projects. But,
    hey, what's logging?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在面对一个你无法完全理解的神秘问题之前，你永远不会知道记录有多么重要。了解为什么会出现问题是人们将记录添加到他们的项目中的第一个，也可能是主要的原因。但是，嘿，什么是记录？
- en: Logging is the act of storing records about events for further later analysis.
    An important concept about logging is related to the logging level, which allows
    you to categorize the information type and relevance.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 记录是存储有关事件的记录以供以后进一步分析的行为。关于记录的一个重要概念与记录级别有关，它允许您对信息类型和相关性进行分类。
- en: The Python standard library comes bundled with a logging library that is actually
    pretty powerful and allows you, through handlers and messages, to log to streams,
    files, e-mail, or any other solution you believe will fit. Let's try a few useful
    logging examples, shall we?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Python标准库捆绑了一个记录库，实际上非常强大，通过处理程序和消息，可以记录到流、文件、电子邮件或您认为合适的任何其他解决方案。让我们尝试一些有用的记录示例，好吗？
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In our example, we create two common logging setups: logging to a file and
    logging to mail. Both are very useful in their own way. In `configure_file_logger`
    we define a function that registers a `RotatingFileHandler` to hold all log messages
    with the given level or above. Here, we do not use a regular `FileHandler` class
    because we want to keep our log files manageable (also known as: small). `RotatingFileHandler`
    allows us to define a max size for our log files and, when the log file size is
    close to the `maxBytes` limit, the handler "rotates" to a brand new log file (or
    overwrites an old one).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们创建了两个常见的记录设置：记录到文件和记录到邮件。它们各自的方式非常有用。在`configure_file_logger`中，我们定义了一个函数，将一个`RotatingFileHandler`注册到其中，以保存所有具有给定级别或以上的日志消息。在这里，我们不使用常规的`FileHandler`类，因为我们希望保持我们的日志文件可管理（也就是：小）。`RotatingFileHandler`允许我们为我们的日志文件定义一个最大大小，当日志文件大小接近`maxBytes`限制时，处理程序会“旋转”到一个全新的日志文件（或覆盖旧文件）。
- en: Logging to file is pretty straightforward and is used mostly to follow execution
    flows in applications (INFO, DEBUG, and WARN logs, mostly). Basically, file logging
    should be used whenever you have messages that should be recorded but should not
    be immediately read or even read at all (you might want to read a DEBUG log if
    something unexpected happens, but not otherwise). That way, in the case of a problem,
    you just dig out your log files and see what went wrong. Mail logging has another
    goal ...
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 记录到文件中非常简单，主要用于跟踪应用程序中的执行流程（主要是INFO、DEBUG和WARN日志）。基本上，文件记录应该在您有应该记录但不应立即阅读甚至根本不阅读的消息时使用（如果发生意外情况，您可能希望阅读DEBUG日志，但其他情况则不需要）。这样，在出现问题时，您只需查看日志文件，看看出了什么问题。邮件记录有另一个目标…
- en: To configure our mail logger, we define a function called `configure_mail_logger`.
    It creates and registers a `SMTPHandler` to our logger at the given log level;
    that way, whenever a message with that log level or higher is logged, an e-mail
    message is sent to the registered ADMINS.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置我们的邮件记录器，我们定义一个名为`configure_mail_logger`的函数。它创建并注册一个`SMTPHandler`到我们的记录器在给定的记录级别；这样，每当记录一个具有该记录级别或更高级别的消息时，就会向注册的管理员发送一封电子邮件。
- en: 'Mail logging has one main purpose: to notify someone (or a lot of people) ASAP
    that something important has happened, such as an error that may compromise the
    application. You probably don''t want a logging level below ERROR set for this
    kind of handler, as there would be just too many mails to keep up with.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 邮件记录有一个主要目的：尽快通知某人（或很多人）发生了重要事件，比如可能危及应用程序的错误。您可能不希望为此类处理程序设置低于ERROR的记录级别，因为会有太多的邮件需要跟踪。
- en: As a last piece of advice on logging, sane projects have good logging. It's
    usual to trace back a user issue report or even a mailed error message. Define
    good logging policies and follow them, build tools to analyze your logs, and set
    logging rotation parameters appropriate to the project needs. Projects that produce
    a lot of logging may need larger files while projects that do not have much logging
    could live well with a high value of `backupCount`. Always give it some thought.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 关于记录的最后一条建议是，理智的项目都有良好的记录。追溯用户问题报告甚至邮件错误消息是很常见的。定义良好的记录策略并遵循它们，构建工具来分析您的日志，并设置适合项目需求的记录轮换参数。产生大量记录的项目可能需要更大的文件，而没有太多记录的项目可能可以使用较高值的`backupCount`。一定要仔细考虑一下。
- en: Debugging, DebugToolbar, and happiness
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试、DebugToolbar和幸福
- en: 'When running your Flask project in debug mode (`app.debug = True`), whenever
    Flask detects that your code has changed it will restart your application. If
    the given change breaks your application, Flask will display an error message
    in the console that is actually very simple to analyze. You start reading from
    the bottom up until you find the first line that mentions a file you wrote; that''s
    where the error was generated. Now, read from the top down until you find a line
    telling you exactly what the error was. If this approach is not sufficient and
    if you need to read a variable value—for example, to better understand what is
    going on—you may use `pdb`, the standard Python debugging library, like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试模式下运行Flask项目（`app.debug = True`）时，每当Flask检测到您的代码已更改，它将重新启动您的应用程序。如果给定的更改破坏了您的应用程序，Flask将在控制台中显示一个非常简单的错误消息，可以很容易地分析。您可以从下往上阅读，直到找到第一行提到您编写的文件的行；这就是错误生成的地方。现在，从上往下阅读，直到找到一行告诉您确切的错误是什么。如果这种方法不够用，如果您需要读取变量值，例如更好地理解发生了什么，您可以使用`pdb`，标准的Python调试库，就像这样：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Whenever `pdb.set_trace` is called, a `pdb` console, which is much like a Python
    console, will be opened. Thus you may consult the value of any values you need
    or even make code evaluations.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每当调用`pdb.set_trace`时，将打开一个`pdb`控制台，它非常像Python控制台。因此，您可以查询任何您需要的值，甚至进行代码评估。
- en: Using `pdb` is nice but, if you just want to keep up with what is happening
    with your requests—for example, the template used, CPU time (this can catch you
    out!), logged messages, and so on—Flask-DebugToolbar may be a very handy extension
    at your disposal.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pdb`很好，但是，如果您只想了解您的请求发生了什么，例如使用的模板，CPU时间（这可能会让您困惑！），已记录的消息等，Flask-DebugToolbar可能是一个非常方便的扩展。
- en: Flask-DebugToolbar
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flask-DebugToolbar
- en: 'Imagine you could see the CPU time of your requests directly in your rendered
    template, and may be verify which template was used to render that page or even
    edit it on-the-fly. Would that be nice? Would you like to see it come true? Then
    try the following example:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您可以直接在渲染的模板中看到您的请求的CPU时间，并且可以验证使用哪个模板来渲染该页面，甚至可以实时编辑它。那会很好吗？您想看到它成真吗？那么请尝试以下示例：
- en: 'First, make sure the extension is installed:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保已安装扩展：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And on to some fine code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是一些精彩的代码：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Using Flask-DebugToolbar has no mysteries. Set `debug` to `True`, add a `secret_key`,
    and initialize the extension. When you open `http://127.0.0.1:5000/` in your browser,
    you should see something like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Flask-DebugToolbar没有什么神秘的。将`debug`设置为`True`，添加`secret_key`，并初始化扩展。当您在浏览器中打开`http://127.0.0.1:5000/`时，您应该看到类似这样的东西：
- en: '![Flask-DebugToolbar](img/3863_08_03.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![Flask-DebugToolbar](img/3863_08_03.jpg)'
- en: The collapsible panel on the right is a bit of HTML the debug toolbar inserts
    in each HTML response that allows you to introspect your response without the
    need to use a debugger such as `pdb`. In the example, we set `DEBUG_TB_TEMPLATE_EDITOR_ENABLED`
    to `True`; this option tells DebugToolbar we wish to edit the rendered template
    right from the browser. Just navigate to **Templates** | **Edit Templates** to
    try it out.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的可折叠面板是调试工具栏在每个HTML响应中插入的一小部分HTML，它允许您检查响应，而无需使用`pdb`等调试器。在示例中，我们将`DEBUG_TB_TEMPLATE_EDITOR_ENABLED`设置为`True`；此选项告诉DebugToolbar我们希望直接从浏览器中编辑渲染的模板。只需转到**模板**
    | **编辑模板**来尝试。
- en: Sessions or storing user data between requests
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话或在请求之间存储用户数据
- en: Sometimes you'll have a scenario in your application where data has to be kept
    between requests, but there is no need to persist it in the database, like an
    authentication token that identifies a logged user or which items a user added
    to his shopping cart. At those times of peril, use Flask sessions.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在应用程序中会出现这样的情况，需要在请求之间保留数据，但无需将其持久化在数据库中，比如用于标识已登录用户的身份验证令牌，或者用户添加到购物车中的商品。在这些危险时刻，请使用Flask会话。
- en: Flask sessions are a solution for transient storage between requests implemented
    using browser cookies and cryptography. Flask uses the secret key value to encrypt
    any values you set in the session before setting it in the cookies; this way,
    even if a malicious person has access to the victim's browser, it won't be possible
    to read the cookie's content.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Flask会话是使用浏览器cookie和加密实现的请求之间的瞬时存储解决方案。Flask使用秘钥值来加密您在会话中设置的任何值，然后将其设置在cookie中；这样，即使恶意人士可以访问受害者的浏览器，也无法读取cookie的内容。
- en: Tip
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Because the secret key is used to encrypt the session data, it is important
    to have a strong value for your secret key. `os.urandom(24)` will likely create
    a strong secret key for the deploy environment.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于秘钥用于加密会话数据，因此为您的秘钥设置一个强大的值非常重要。`os.urandom(24)`可能会为部署环境创建一个强大的秘钥。
- en: The data stored in the session is transient because there is no guarantee it
    will be there at any time, as the user may clean the browser cookies or the cookie
    might just expire, but it will most likely be there if you set it. Always take
    that piece of information into account while developing.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 会话中存储的数据是瞬时的，因为不能保证它在任何时候都会存在，因为用户可能会清除浏览器的cookie，或者cookie可能会过期，但如果您设置了它，它很可能会存在。在开发时，始终考虑这一点。
- en: 'One big advantage of a Flask session is its simplicity; you use it as if it
    was a regular dictionary, like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Flask会话的一个重大优势是其简单性；您可以像使用常规字典一样使用它，就像这样：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the example, we define a very simple Product model, with ID, name, a sku
    (a special field used to identify a product in a store), and a view that adds
    the requested product to a cart in the user session. As you can see, we make no
    assumption that there is any data in the session, always playing it safe. We also
    do not need to "save" the session after changing it, because Flask is smart enough
    to notice your session was changed and saves it auto-magically… Actually, there
    is a catch here. Flask sessions can only detect the session was modified if you
    modify its first level values. Example:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，我们定义了一个非常简单的产品模型，带有ID、名称、sku（用于在商店中识别产品的特殊字段），以及一个视图，将请求的产品添加到用户会话中的购物车中。正如您所看到的，我们并不假设会话中有任何数据，始终保持谨慎。我们也不需要在更改后“保存”会话，因为Flask足够聪明，会自动注意到您的会话已经更改并保存它……实际上，这里有一个小技巧。Flask会话只能检测到会话是否被修改，如果您修改了它的第一级值。例如：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now run your project and open the URL `http://localhost:5000/cart/add/010` in
    your browser. See how the counter goes up each time you reload? Well, that's the
    session working!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行您的项目，并在浏览器中打开URL `http://localhost:5000/cart/add/010`。看到每次重新加载时计数器是如何增加的吗？嗯，那就是会话在工作！
- en: Exercise
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: How about putting our knowledge to work? Try making a shop web application,
    such as an online pet shop. It should have pet services, for example bathing and
    vet consultations, and also a small store with pet accessories. It should be easy
    enough (lots of work! but easy).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把知识付诸实践吧？尝试制作一个商店网站应用，比如一个在线宠物商店。它应该有宠物服务，例如洗澡和兽医咨询，还有一个小商店，出售宠物配饰。这应该足够简单（很多工作！但是简单）。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This was a dense chapter. We overviewed important concepts—such as performance
    and maintainability, productivity, and quality—had a quick discussion about premature
    optimization and overengineering, and focused our efforts on learning how to write
    better code with Flask.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个密集的章节。我们概述了重要的概念——如性能和可维护性、生产力和质量——快速讨论了过早优化和过度工程化，并将我们的努力集中在学习如何用Flask编写更好的代码上。
- en: Blueprints, which allow you to create robust large projects with Flask, were
    discussed with a full-range example; we learned about logging to file and mail
    and the importance of each, had a lovely time with Flask-DebugToolbar (so handy!)
    and took the default session setup and usage to heart.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝图允许您使用Flask创建强大的大型项目，并通过一个完整的示例进行了讨论；我们学习了如何记录到文件和邮件以及每个的重要性，与Flask-DebugToolbar度过了愉快的时光（非常方便！），并且将默认的会话设置和使用牢记在心。
- en: You're now a capable Flask developer. I'm so proud!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在是一个有能力的Flask开发者。我感到非常自豱！
- en: As one first learns to drive before trying out drifting, we will begin our Flask
    drifting next chapter. Our focus will be on using the wide extension ecosystem
    available to Flask in order to create amazing projects. It will be lots of fun!
    See you there!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 就像一个人在尝试漂移之前先学会开车一样，我们将在下一章开始我们的Flask漂移。我们的重点将是利用Flask提供的广泛扩展生态系统来创建令人惊叹的项目。这将非常有趣！到时见！
