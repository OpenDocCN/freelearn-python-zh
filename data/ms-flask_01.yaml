- en: Chapter 1. Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。入门
- en: '**Python** is a flexible language that gives programmers the freedom to structure
    their programming environment. However, a dangerous consequence of this freedom
    is the ability to not set up a new Python project right from the beginning in
    order to avoid problems down the road.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python**是一种灵活的语言，给程序员自由构建他们的编程环境。然而，这种自由的危险后果是从一开始就不设置一个新的Python项目，以避免未来出现问题。'
- en: For example, you could be halfway through your project and realize that you
    deleted a file or piece of code five days ago that you need to use now. Consider
    another example where two of the packages that you wish to use require different
    versions of the same underlying package. Other than the tools introduced in this
    chapter, there will be a lot of extra work fixing problems that already have solutions.
    A little extra work in the beginning can save days of work in the future.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能已经进行了一半的项目，意识到你五天前删除了一个你现在需要使用的文件或代码。再举一个例子，你希望使用的两个包需要同一个基础包的不同版本。除了本章介绍的工具之外，修复已经有解决方案的问题将需要大量额外的工作。在开始时多做一点额外的工作可以节省未来数天的工作。
- en: 'To this end, we will need to install three programs: **Git**, **pip**, and
    **virtualenv**.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要安装三个程序：**Git**、**pip**和**virtualenv**。
- en: Version control with Git
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Git进行版本控制
- en: To protect our project against human error, we will use a version control system
    called Git. **Version control** is a tool that records changes in files over time.
    This allows a programmer to see how the code has changed from previous revisions
    and even revert the code to the previous state. Version control systems also make
    collaboration easier than ever, as changes can be shared between many different
    programmers and merged into the current version of the project automatically,
    without copying and pasting hundreds of lines of code.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止人为错误，我们将使用一个名为Git的版本控制系统。**版本控制**是一种记录文件随时间变化的工具。这使得程序员可以看到代码如何从以前的修订版变化，并甚至将代码恢复到以前的状态。版本控制系统还使得合作比以往更容易，因为更改可以在许多不同的程序员之间共享，并自动合并到项目的当前版本中，而无需复制和粘贴数百行代码。
- en: Simply put, version control is like backups for your code, only more powerful.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，版本控制就像是你的代码的备份，只是更强大。
- en: Installing Git
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Git
- en: Installing Git is very simple. Simply go to [http://www.git-scm.com/downloads](http://www.git-scm.com/downloads)
    and click on the **Operating System** (**OS**) that is being run. A program will
    begin to download that will walk you through the basic installation process.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Git非常简单。只需转到[http://www.git-scm.com/downloads](http://www.git-scm.com/downloads)，然后点击正在运行的**操作系统**（**OS**）。一个程序将开始下载，它将引导您完成基本的安装过程。
- en: Git on Windows
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows上的Git
- en: Git was originally developed solely for Unix OSes (for example, Linux, Mac OS
    X). Consequently, using Git on Windows is not seamless. During the installation,
    the installer will ask whether you want to install Git alongside the normal Windows
    Command Prompt. Do not pick this option. Choose the default option that will install
    a new type of command line on your system named **Bash**, which is the same command
    line the Unix systems use. Bash is much more powerful than the default Windows
    command line, and this will be used in all the examples in this book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Git最初仅为Unix操作系统（例如Linux、Mac OS X）开发。因此，在Windows上使用Git并不是无缝的。在安装过程中，安装程序会询问您是否要在普通的Windows命令提示符旁边安装Git。不要选择此选项。选择默认选项，将在系统上安装一个名为**Bash**的新类型的命令行，这是Unix系统使用的相同命令行。Bash比默认的Windows命令行更强大，本书中的所有示例都将使用它。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A good introduction to Bash for beginners is located at [http://linuxcommand.org/learning_the_shell.php#contents](http://linuxcommand.org/learning_the_shell.php#contents).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 初学者的Bash入门教程位于[http://linuxcommand.org/learning_the_shell.php#contents](http://linuxcommand.org/learning_the_shell.php#contents)。
- en: Git basics
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git基础知识
- en: Git is a very complex tool; only the basics that are needed for this book will
    be covered here.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一个非常复杂的工具；这里只会涵盖本书所需的基础知识。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more, refer to the Git documentation at [http://www.git-scm.com/doc](http://www.git-scm.com/doc).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多，请参阅Git文档[http://www.git-scm.com/doc](http://www.git-scm.com/doc)。
- en: 'Git does not track your changes automatically. In order for Git to run properly,
    we have to give it the following information:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Git不会自动跟踪你的更改。为了让Git正常运行，我们必须提供以下信息：
- en: Which folders to track
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要跟踪哪些文件夹
- en: When to save the state of the code
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时保存代码的状态
- en: What to track and what not to
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要跟踪什么，不要跟踪什么
- en: 'Before we can do anything, we tell Git to create a `git` instance in our directory.
    In your project directory, run the following in your terminal:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们做任何事情之前，我们告诉Git在我们的目录中创建一个`git`实例。在你的项目目录中，在终端中运行以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Git will now start to track changes in our project. As `git` tracks our files,
    we can see the status of our tracked files, and any files that are not tracked,
    by typing the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Git现在将开始跟踪我们项目中的更改。当`git`跟踪我们的文件时，我们可以通过输入以下命令来查看我们跟踪文件的状态，以及任何未跟踪的文件：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we can save our first **commit**, which is a snapshot of your code at the
    time that you run the `commit` command.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以保存我们的第一个**提交**，这是在运行`commit`命令时代码的快照。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'At any point in the future, we can return to this point in our project. Adding
    files to be committed is called **staging** files in Git. Remember to add stage
    files only if you are ready to commit them. Once the files are staged, any further
    changes will not be staged as well. For an example of more advanced Git usage,
    add any text to your `main.py` file with your text editor and then run the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在将来的任何时候，我们都可以返回到项目的这一点。将要提交的文件称为Git中的**暂存**文件。记住只有在准备好提交它们时才添加暂存文件。一旦文件被暂存，任何进一步的更改也不会被暂存。对于更高级的Git使用示例，请向你的`main.py`文件添加任何文本，然后运行以下命令：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Your terminal should look something like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你的终端应该看起来像这样：
- en: '![Git basics](img/B03929_01_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![Git基础知识](img/B03929_01_01.jpg)'
- en: The Git system's `checkout` command is rather advanced for this simple introduction,
    but it is used to change the current status of the Git system's `HEAD` pointer—that
    is, the current location of our code in the history of our project. This will
    be shown in the next example.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Git 系统的 `checkout` 命令对于这个简单的介绍来说相当高级，但它用于改变 Git 系统的 `HEAD` 指针的当前状态，也就是我们代码在项目历史中的当前位置。这将在下一个示例中展示。
- en: 'Now, to see the code in a previous commit, first run this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要查看以前提交的代码，请先运行此命令：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The string of characters next to our commit message, `f01d1e2`, is called the
    **hash** of our commit. It is the unique identifier of that commit that we can
    use to return to the saved state. Now, to take the project back to that state,
    run this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 紧挨着我们提交消息的字符串 `f01d1e2`，被称为我们提交的 **哈希**。它是该提交的唯一标识符，我们可以使用它返回到保存的状态。现在，要将项目恢复到该状态，请运行此命令：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Your Git project is now in a special state where any changes or commits will
    neither be saved nor affect any commits that were made after the one you checked
    out. This state is just for viewing old code. To return to the normal mode of
    Git, run this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 Git 项目现在处于一种特殊状态，任何更改或提交都不会被保存，也不会影响您检出后进行的任何提交。这种状态只用于查看旧代码。要返回到 Git 的正常模式，请运行此命令：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Python package management with pip
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 pip 进行 Python 包管理
- en: In Python, programmers can download libraries from other programmers that extend
    the functionality of the standard Python library. As you already know from using
    Flask, a lot of Python's power comes from its large amount of community-created
    libraries.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，程序员可以从其他程序员那里下载库，以扩展标准 Python 库的功能。就像您从 Flask 中了解到的那样，Python 的很多功能来自于其大量的社区创建的库。
- en: However, installing third-party libraries can be a huge pain to do correctly.
    Say there is a package X that you wish to install. Simple enough, download the
    Zip file and run `setup.py`, right? Not quite. Package X relies on package Y,
    which in turn relies on Z and Q. None of this information was listed on package
    X's website, but they are required to be installed for X to work at all. You then
    have to find all of the packages one by one and install them, in the hope that
    the packages you are installing don't require any extra packages themselves.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，安装第三方库可能会非常麻烦。假设有一个名为 X 的包需要安装。很简单，下载 Zip 文件并运行 `setup.py`，对吗？并不完全是这样。包 X
    依赖于包 Y，而包 Y 又依赖于 Z 和 Q。这些信息都没有在包 X 的网站上列出，但它们需要被安装才能让 X 正常工作。然后，您必须逐个找到所有的包并安装它们，希望您安装的包不需要额外的包。
- en: In order to automate this process, we use **pip**, the Python package manager.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动化这个过程，我们使用 **pip**，即 Python 包管理器。
- en: Installing the pip Python package manager on Windows
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 pip Python 包管理器
- en: If you are on Windows, and your installed Python the current version, you already
    have pip! If your Python installation is not the most recent, the easiest thing
    to do is to simply reinstall it. Download the Python Windows installer at [https://www.python.org/downloads/](https://www.python.org/downloads/).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 Windows，并且已安装了当前版本的 Python，那么您已经有了 pip！如果您的 Python 安装不是最新的，最简单的方法就是重新安装它。在
    [https://www.python.org/downloads/](https://www.python.org/downloads/) 下载 Python
    Windows 安装程序。
- en: In Windows, the variable that controls which programs are accessible from the
    command line is **path**. To modify your path to include Python and pip, we have
    to add `C:\Python27` and `C:\Python27\Tools`. Edit the Windows path by opening
    the Windows menu, right-clicking on **Computer** and clicking on **Properties**.
    Under **Advanced system settings**, click **Environment Variables...**. Scroll
    down until you find **Path**, double-click it, and add `;C:\Python27;C:\Python27\Tools`
    to the end.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，控制从命令行访问哪些程序的变量是 **path**。要修改您的路径以包括 Python 和 pip，我们必须添加 `C:\Python27`
    和 `C:\Python27\Tools`。通过打开 Windows 菜单，右键单击 **计算机**，然后单击 **属性** 来编辑 Windows 路径。在
    **高级系统设置** 下，单击 **环境变量...**。向下滚动直到找到 **Path**，双击它，并在末尾添加 `;C:\Python27;C:\Python27\Tools`。
- en: 'To make sure you have modified your path correctly, close and reopen your terminal
    and type the following into the command line:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已正确修改了路径，请关闭并重新打开终端，并在命令行中输入以下内容：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 [http://www.packtpub.com](http://www.packtpub.com) 的帐户中下载您购买的所有 Packt Publishing
    图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册，以便直接通过电子邮件接收文件。
- en: '`pip` should have printed its usage message as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip` 应该已经打印出其使用消息，如下面的屏幕截图所示：'
- en: '![Installing the pip Python package manager on Windows](img/B03929_01_02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![在 Windows 上安装 pip Python 包管理器](img/B03929_01_02.jpg)'
- en: Installing the pip Python package manager on Mac OS X and Linux
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Mac OS X 和 Linux 上安装 pip Python 包管理器
- en: Some Python installations of Linux do not come with pip, and Mac OS X installations
    don't come with pip by default. To install it, download the `get-pip.py` file
    from [https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py](https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Linux 上的 Python 安装不带有 pip，Mac OS X 上的安装默认也不带有 pip。要安装它，请从 [https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py](https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py)
    下载 `get-pip.py` 文件。
- en: 'Once you have downloaded it, run it with elevated privileges using the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下载后，使用以下命令以提升的权限运行它：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then pip will be installed automatically.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 pip 将被自动安装。
- en: pip basics
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pip 基础知识
- en: 'To install a package with `pip`, follow this simple step:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `pip` 安装一个包，请按照以下简单步骤进行：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'On Mac and Linux, because you are installing programs outside the user-owned
    folders, you might have to prepend `sudo` to the install commands. To install
    Flask, simply run this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac和Linux上，因为你在用户拥有的文件夹之外安装程序，你可能需要在安装命令前加上`sudo`。要安装Flask，只需运行这个命令：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Then, all requirements of Flask will be installed for you.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Flask的所有要求将被安装。
- en: 'If you want to remove a package that you are no longer using, run this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要移除一个不再使用的包，运行这个命令：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you wish to explore or find a package but don''t know its exact name, you
    may use the search command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想探索或找到一个包，但不知道它的确切名称，你可以使用搜索命令：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now that we have a couple of packages installed, it is common courtesy in the
    Python community to create a list of packages that are required to run the project,
    so others can quickly install every thing required. This also has the added benefit
    that any new member of your project will be able to run your code quickly.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们安装了一些包，在Python社区中，通常习惯创建一个运行项目所需的包的列表，这样其他人可以快速安装所有所需的东西。这也有一个额外的好处，即你项目的任何新成员都能够快速运行你的代码。
- en: 'This list can be created with pip by running this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表可以通过pip运行这个命令来创建：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'What exactly did this command do? `pip freeze` run by itself prints out a list
    of the installed packages and their versions as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令到底做了什么？`pip freeze`单独运行会打印出安装的包及其版本的列表，如下所示：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `>` operator tells Bash to take everything printed by the last command and
    write it to this file. If you look into your project directory, you will see the
    new file named `requirements.txt` that contains the output of `pip freeze`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`>`操作符告诉Bash获取上一个命令打印的所有内容并将其写入这个文件。如果你查看你的项目目录，你会看到一个名为`requirements.txt`的新文件，其中包含了`pip
    freeze`的输出。'
- en: 'To install all the packages from this file, a new project maintainer will have
    to run this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装这个文件中的所有包，新的项目维护者将不得不运行这个命令：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This tells `pip` to read all the packages listed in `requirements.txt` and install
    them.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉`pip`读取`requirements.txt`中列出的所有包并安装它们。
- en: Dependency sandboxing with virtualenv
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用virtualenv进行依赖隔离
- en: So you have installed all the packages you want for your new project. Great!
    But, what happens when we develop the second project some time later that will
    use newer versions of the same packages? What happens when a library that you
    wish to use depends on a library you installed for the first project, but it uses
    an older version? When newer versions of packages contain breaking changes, upgrading
    them will require extra development work on an older project that you may not
    be able to afford.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你已经安装了你的新项目所需的所有包。太好了！但是，当我们在以后开发第二个项目时，会使用这些包的更新版本会发生什么？当你希望使用的库依赖于你为第一个项目安装的库的旧版本时会发生什么？当更新的包包含破坏性更改时，升级它们将需要在旧项目上进行额外的开发工作，这可能是你无法承受的。
- en: Thankfully, there is virtualenv, a tool that sandboxes your Python projects.
    The secret to virtualenv is tricking your computer into looking for and installing
    packages in the project directory rather than in the main Python directory, which
    allows you to keep them completely separate.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一个名为virtualenv的工具，它可以为你的Python项目提供隔离。virtualenv的秘密在于欺骗你的计算机，让它在项目目录中查找并安装包，而不是在主Python目录中，这样你可以完全隔离它们。
- en: 'Now that we have pip, to install virtualenv just run this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了pip，要安装virtualenv只需运行这个命令：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: virtualenv basics
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: virtualenv基础
- en: 'Let''s initialize virtualenv for our project as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式为我们的项目初始化virtualenv：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The extra `env` tells `virtualenv` to store all the packages into a folder
    named `env`. virtualenv requires you to start it before it will sandbox your project:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的`env`告诉`virtualenv`将所有的包存储到一个名为`env`的文件夹中。virtualenv要求你在对项目进行隔离之前启动它：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `source` command tells Bash to run the script `env/bin/activate` in the
    context of the current directory. Let''s reinstall Flask in our new sandbox as
    follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`source`命令告诉Bash在当前目录的上下文中运行脚本`env/bin/activate`。让我们在我们的新隔离环境中重新安装Flask：'
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: However, it goes against the best practices in Git to track what you don't own,
    so we should avoid tracking the changes in third-party packages. To ignore specific
    files in our project, the `gitignore` file is needed.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，跟踪你不拥有的东西违反了Git的最佳实践，所以我们应该避免跟踪第三方包的更改。要忽略项目中的特定文件，需要`gitignore`文件。
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`touch` is the Bash command to create files, and the dot at the start of a
    file tells Bash to not list its existence unless specifically told to show hidden
    files. We will create the simple `gitignore` file for now:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`touch`是Bash创建文件的命令，文件名开头的点告诉Bash不要列出它的存在，除非特别告诉它显示隐藏文件。我们现在将创建一个简单的`gitignore`文件：'
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This tells Git to ignore the entire `env` directory and ignore all the files
    that end with `.pyc` (a *compiled* Python file). When used in this way, the `*`
    character is called a **wildcard**.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉Git忽略整个`env`目录和所有以`.pyc`结尾的文件（一个*编译*的Python文件）。在这种用法中，`*`字符被称为**通配符**。
- en: The beginning of our project
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们项目的开始
- en: Finally, we can get to our first Flask project. In order to have a complex project
    at the end of the book, we will need a simple Flask project to start us off.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以开始我们的第一个Flask项目了。为了在本书结束时拥有一个复杂的项目，我们需要一个简单的Flask项目来开始。
- en: 'In the file named `config.py`, add the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为`config.py`的文件中，添加以下内容：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, in another file named `main.py`, add the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在另一个名为`main.py`的文件中，添加以下内容：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: For anyone who is familiar with the base Flask API, this program is very basic.
    It will just show `Hello World!` on the browser if we navigate to `http://127.0.0.1:5000/`.
    One point that may be unfamiliar to Flask users is `config.from_object`, rather
    than `app.config['DEBUG']`. We use `from_object` because in future, multiple configurations
    will be used, and manually changing every variable when we need to switch between
    configurations is tedious.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于熟悉基本Flask API的人来说，这个程序非常基础。如果我们导航到`http://127.0.0.1:5000/`，它只会在浏览器上显示`Hello
    World!`。对于Flask用户可能不熟悉的一点是`config.from_object`，而不是`app.config['DEBUG']`。我们使用`from_object`是因为将来会使用多个配置，并且在需要在配置之间切换时手动更改每个变量是很繁琐的。
- en: 'Remember to commit these changes in Git:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在Git中提交这些更改：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Reminders will no longer be given on when to commit your changes to Git. It
    is up to readers to develop the habit of committing whenever you reach a stopping
    point. It is also assumed that you will be operating inside the virtual environment,
    so all command line prompts will not be prefixed with `(env)`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 不再提醒何时将更改提交到Git。读者需要养成在达到一个停顿点时提交的习惯。还假定您将在虚拟环境中操作，因此所有命令行提示都不会以`(env)`为前缀。
- en: Using Flask Script
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Flask Script
- en: 'In order to make next chapters easier for the reader, we will use the first
    of many **Flask extensions** (packages that extend the functionality of Flask)
    named **Flask Script**. Flask Script allows programmers to create commands that
    act within the **Application Context** of Flask—that is, the state in Flask that
    allows modification of the `Flask` object. Flask Script comes with some default
    commands to run the server and a python shell in the Application Context. To install
    Flask Script with `pip`, run this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使读者更容易理解接下来的章节，我们将使用第一个**Flask扩展**（扩展Flask功能的软件包）之一，名为**Flask Script**。Flask
    Script允许程序员创建在Flask的**应用上下文**中操作的命令，即Flask中允许修改`Flask`对象的状态。Flask Script带有一些默认命令来在应用上下文中运行服务器和Python
    shell。要使用`pip`安装Flask Script，请运行以下命令：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We will cover more advanced usage of Flask Script in [Chapter 10](ch10.html
    "Chapter 10. Useful Flask Extensions"), *Useful Flask Extensions*; for now, let''s
    start with a simple script named `manage.py`. First import Flask Script''s objects
    and your app as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第10章](ch10.html "第10章 有用的Flask扩展")中涵盖Flask Script的更高级用法；现在，让我们从一个名为`manage.py`的简单脚本开始。首先按照以下方式导入Flask
    Script的对象和你的应用程序：
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, pass your app to the `Manager` object, which will initialize Flask Script:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将您的应用程序传递给`Manager`对象，它将初始化Flask Script：
- en: '[PRE27]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now we add our commands. The server is the same as the normal development server
    run through `main.py`. The `make_shell_context` function will create a Python
    shell that can be run within the app context. The returned dictionary will tell
    Flask Script what to import by default:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们添加我们的命令。服务器与通过`main.py`运行的普通开发服务器相同。`make_shell_context`函数将创建一个可以在应用上下文中运行的Python
    shell。返回的字典将告诉Flask Script默认要导入什么：
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Running the shell through `manage.py` will become necessary later on when the
    Flask extensions will only initialize when a Flask app is created. Running the
    default Python shell will cause these extensions to return errors.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`manage.py`运行shell将在稍后变得必要，因为当Flask扩展只有在创建Flask应用程序时才会初始化时。运行默认的Python shell会导致这些扩展返回错误。
- en: 'Then, end the file with the Python standard way of running only if the user
    ran this file:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，以Python标准的方式结束文件，只有当用户运行了这个文件时才会运行：
- en: '[PRE29]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You will now be able to run the development server with:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以使用以下命令运行开发服务器：
- en: '[PRE30]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Use the shell with:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行shell：
- en: '[PRE31]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now that we have set up our development environment, we can move on to implementing
    advanced application features in Flask. Before we can do anything visual, we need
    something to display. In the next chapter, you will be introduced to, and then
    master working with, databases in Flask.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了开发环境，我们可以继续在Flask中实现高级应用程序功能。在我们可以做任何可视化之前，我们需要有东西来显示。在下一章中，您将被介绍并掌握在Flask中使用数据库。
