- en: Zappa with Docker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker的Zappa
- en: In this chapter, we are going to learn about developing a serverless application
    with an AWS Lambda environment or operating system context, instead of your local
    development environment. We will be focusing on the problems that arise in different
    environmental contexts and looking at efficient solutions to these problems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在AWS Lambda环境或操作系统上下文中开发无服务器应用，而不是在本地开发环境中。我们将专注于不同环境上出现的问题，并寻找这些问题的有效解决方案。
- en: 'The topics that we will cover in this chapter include the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Understanding Docker
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Docker
- en: Problem statement
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题陈述
- en: API development with a custom tool dependency
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有自定义工具依赖的API开发
- en: Building, testing, and deploying with Docker
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker构建、测试和部署
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before moving ahead, let''s configure some prerequisites, such as the tools
    and packages that we will require, in order to get the development environment
    set up. Here is a list of the software and packages that you will need:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们配置一些先决条件，例如我们将需要的工具和软件包，以便设置开发环境。以下是您将需要的软件和软件包的列表：
- en: Ubuntu 16.04/macOS/Windows
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu 16.04/macOS/Windows
- en: Docker
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: Python 3.6
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6
- en: Pipenv tool
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pipenv工具
- en: Falcon
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Falcon
- en: Falcon-multipart
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Falcon-multipart
- en: Gunicorn
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gunicorn
- en: catdoc
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: catdoc
- en: Zappa
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zappa
- en: Here, we've mentioned the operating system along with other required tools and
    packages. Choose any of these operating systems and install Docker as per the
    instructions detailed on its official site ([https://docs.docker.com/](https://docs.docker.com/)).
    We will see detailed information about installing Python-specific packages in
    the upcoming API development section. Let's move to the next section, where we
    will understand the concept of Docker.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们提到了操作系统以及其他所需的工具和软件包。选择其中任何一个操作系统，并根据其官方网站上详细的说明安装Docker（[https://docs.docker.com/](https://docs.docker.com/)）。我们将在即将到来的API开发部分看到有关安装特定于Python的软件包的详细信息。让我们转到下一节，我们将了解Docker的概念。
- en: Understanding Docker
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Docker
- en: '**Docker** is a platform for developing and deploying applications with containers. Docker
    creates these containers based on Docker images, and a Docker image includes the
    basic and required components similar to Linux. A Docker container is nothing
    more than an instance of a Docker image.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker**是一个用于开发和部署应用程序的容器平台。Docker基于Docker镜像创建这些容器，Docker镜像包括类似于Linux的基本和必需组件。Docker容器只不过是Docker镜像的一个实例。'
- en: A Docker container has many features for supporting and running any application.
    A Docker container is lightweight, flexible, portable, scalable, and stackable.
    You can create a container for any service, such as Python or MySQL. Docker enables
    you to share data by networking with the host machine. With the help of Docker
    containers, you can create an isolated environment for your application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器具有许多功能，支持和运行任何应用程序。Docker容器轻巧、灵活、便携、可扩展和可堆叠。您可以为任何服务创建一个容器，例如Python或MySQL。Docker使您能够通过与主机机器进行网络连接来共享数据。借助Docker容器，您可以为应用程序创建一个隔离的环境。
- en: You can create your own Docker image with stacked services and configurations.
    For example, you might use an Ubuntu image-based container and then install the
    MySQL service before configuring the container accordingly. Then we can build
    a new image along with the configured service. Finally, we can push the image
    on a Docker hub repository ([https://hub.docker.com/](https://hub.docker.com/)),
    and it depends on our repository privileges as to whether we keep it private or
    make it public.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建自己的Docker镜像，其中包含堆叠的服务和配置。例如，您可以使用基于Ubuntu的镜像容器，然后安装MySQL服务，然后相应地配置容器。然后，我们可以构建一个包含配置服务的新镜像。最后，我们可以将镜像推送到Docker
    hub存储库（[https://hub.docker.com/](https://hub.docker.com/)），这取决于我们的存储库权限，我们可以将其保持私有或公开。
- en: You can read more in detail and understand the concept of Docker technology
    at its official site, [https://docs.docker.com/get-started/#docker-concepts](https://docs.docker.com/get-started/#docker-concepts).
    We are going to focus on developing an application with an environment-dependent
    package and deploying over AWS Lambda. Let's move to the next section, where we
    are going to discuss a real situation for maintaining the AWS Lambda environment
    at the development level.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在其官方网站[https://docs.docker.com/get-started/#docker-concepts](https://docs.docker.com/get-started/#docker-concepts)上详细阅读并了解Docker技术的概念。我们将专注于使用环境相关软件包开发应用程序，并在AWS
    Lambda上部署。让我们转到下一节，我们将讨论在开发级别上维护AWS Lambda环境的真实情况。
- en: Problem statement
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题陈述
- en: Though Zappa takes care of your installed Python packages and deploys them on
    your Lambda using precompiled Lambda packages ([https://github.com/Miserlou/lambda-packages](https://github.com/Miserlou/lambda-packages)) and
    wheels from your virtual environment, these packages may differ based on the operating
    system environment. So, there might be a situation where you may require an operating
    system-specific tool or a custom package for implementing a solution. This kind
    of package context may vary based on the operating system environment. Hence,
    it may not work on an AWS Lambda environment.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Zappa会处理您安装的Python软件包，并使用预编译的Lambda软件包（[https://github.com/Miserlou/lambda-packages](https://github.com/Miserlou/lambda-packages)）和来自虚拟环境的wheels在Lambda上部署它们，但这些软件包可能会因操作系统环境而异。因此，可能会出现需要特定于操作系统的工具或自定义软件包来实现解决方案的情况。这种软件包上下文可能会根据操作系统环境而异。因此，在AWS
    Lambda环境中可能无法工作。
- en: To overcome the different environmental context issues and maintain installed
    packages based on the AWS Lambda environment, we need to have a similar environment
    context for development. Hence, we need a Docker image that has a similar context
    and environment to AWS Lambda. Finally, **LambCI** ([https://github.com/lambci](https://github.com/lambci)) developed
    a **Docker-Lambda** ([https://github.com/lambci/docker-lambda](https://github.com/lambci/docker-lambda))
    image, which has an identical context to that of AWS Lambda, including system
    libraries, file structure, users and permissions, environment variables, and other
    contextual information.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服不同的环境上下文问题，并根据AWS Lambda环境维护安装的软件包，我们需要一个类似的开发环境上下文。因此，我们需要一个Docker镜像，它具有与AWS
    Lambda相似的上下文和环境。最后，**LambCI** ([https://github.com/lambci](https://github.com/lambci)) 开发了一个**Docker-Lambda**
    ([https://github.com/lambci/docker-lambda](https://github.com/lambci/docker-lambda))
    镜像，它具有与AWS Lambda相同的上下文，包括系统库、文件结构、用户和权限、环境变量和其他上下文信息。
- en: Proposed solution
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建议的解决方案
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, this `catdoc` command is installed at the OS level. But in our API, we
    are going execute this command programmatically to parse and fetch the printed
    text data from `stdout`. Our API can be used as a parser service, to fetch the
    text data from the Microsoft Office 2003 format file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个`catdoc`命令已经在操作系统级别安装了。但在我们的API中，我们将以编程方式执行这个命令，以解析和获取来自`stdout`的打印文本数据。我们的API可以作为一个解析器服务，从Microsoft
    Office 2003格式文件中获取文本数据。
- en: Case study for this solution
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这个解决方案的案例研究
- en: I chose this problem because there are few Python libraries available for parsing
    files of the Doc format. I was developing an application in my organization where
    I needed to parse all types of text files, such as `.pdf`, `.txt`, `.docx`, and
    `.doc`. So, I was met with this situation where I had to use an OS-dependent command-line
    tool to fetch the text data programmatically. I developed a solution, and it was
    working perfectly on my local Ubuntu machine; but when I then tried to deploy
    the application, `catdoc` was not there in the Lambda environment, and it was
    a huge problem for me.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择这个问题是因为目前很少有Python库可以解析Doc格式的文件。我在组织中开发了一个应用程序，需要解析所有类型的文本文件，如`.pdf`、`.txt`、`.docx`和`.doc`。因此，我遇到了这样的情况，我必须使用一个依赖于操作系统的命令行工具来以编程方式获取文本数据。我开发了一个解决方案，在我的本地Ubuntu机器上完美运行；但当我尝试部署应用程序时，`catdoc`在Lambda环境中不存在，这对我来说是一个巨大的问题。
- en: I spent days and nights trying to resolve this issue, as I was in the situation
    of either having to implement it as per the requirements or give up the serverless
    implementation with Zappa. Giving up on Zappa was not possible for me, as I had
    fallen in love with Zappa and developed many projects using it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我花了数天数夜来解决这个问题，因为我处于要么按照要求实现它，要么放弃使用Zappa进行无服务器实现的情况。放弃Zappa对我来说是不可能的，因为我已经爱上了Zappa，并且使用它开发了许多项目。
- en: Fortunately, I was not alone in the Zappa world. I am in touch with the Zappa
    community and met with Mr João Neves—a true gentleman—who helped me to resolve
    the issue, and finally, I resolved it in a very efficient way. It was a big victory
    for Zappa in my organization. I would like a standing ovation to be given for
    the Zappa community, and especially Mr João Neves.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我并不是在Zappa世界中孤独的。我与Zappa社区保持联系，并与João Neves先生——一个真正的绅士——会面，他帮助我解决了问题，最终我以非常高效的方式解决了问题。这对我的组织来说是Zappa的一次重大胜利。我希望Zappa社区，特别是João
    Neves先生，能得到热烈的掌声。
- en: Let's reveal the actual implementation of the API in the next section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中揭示API的实际实现。
- en: API development with a custom tool dependency
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义工具依赖进行API开发
- en: Our first aim is to develop an API that supports file upload. This API can simply
    support only a single file upload, with a validation check of the file extension.
    We are going to perform the operation on an MS Office document file with `.doc` only.
    Hence, this API will only allow `.doc` extension files.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个目标是开发一个支持文件上传的API。这个API只能支持单个文件上传，并且需要对文件扩展名进行验证检查。我们将在一个只有`.doc`扩展名的MS
    Office文档文件上执行操作。因此，这个API只允许`.doc`扩展名的文件。
- en: Prerequisites
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'As mentioned in the *Technical requirements* section for this chapter, we need
    to configure `pipenv` with Python version 3.6\. We use the following command to
    initialize the `pipenv` environment with Python 3.6:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的*技术要求*部分提到，我们需要使用Python版本3.6来配置`pipenv`。我们使用以下命令来初始化带有Python 3.6的`pipenv`环境：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, install the following packages using the `pipenv install` command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用`pipenv install`命令安装以下软件包：
- en: '`falcon`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`falcon`'
- en: '`flacon-multipart`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flacon-multipart`'
- en: '`gunicorn`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gunicorn`'
- en: '`zappa`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zappa`'
- en: 'Once we''ve installed these packages, `pipenv` will create a `Pipfile`, as
    follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了这些软件包后，`pipenv`将创建一个`Pipfile`，如下所示：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That's it, we are done with the installation! Now we can either enter into the
    shell of the virtual environment using the `pipenv shell` command, or we can run
    any command inside the virtual environment using the `pipenv run `command. Let's
    move ahead to implement the API.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样，我们的安装工作完成了！现在我们可以使用`pipenv shell`命令进入虚拟环境的shell，或者使用`pipenv run`命令在虚拟环境中运行任何命令。让我们继续实现API。
- en: Implementing the /doc-parser API
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现/doc-parser API
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here we created an API resource with only the HTTP `POST` request. This API
    will accept a file attribute as a multipart data. Once the file is uploaded, we
    validate the file type and extension. If the file is `application/msword` and
    the file extension is `".doc"`, then we can proceed; otherwise, we return an error.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个只有HTTP `POST`请求的API资源。这个API将接受一个文件属性作为多部分数据。一旦文件上传完成，我们将验证文件类型和扩展名。如果文件是`application/msword`，并且文件扩展名是`".doc"`，那么我们可以继续；否则，我们将返回一个错误。
- en: If the uploaded file is valid, then we will proceed to parse the text data from
    the file and return the data in JSON format as a response. To parse the file,
    we have written the `doc_to_text` method in `parser.py`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上传的文件有效，我们将继续从文件中解析文本数据，并以JSON格式返回数据。为了解析文件，我们在`parser.py`中编写了`doc_to_text`方法。
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see here, we are performing two different tasks. Firstly, we are
    storing the uploaded file in `/tmp directory`, and secondly, we are parsing the
    text by running the `catdoc` command programmatically using the `os.popen` command.
    With the help of the `os.popen` command, we read the `stdout of catdoc` command.
    There are many options available with the `catdoc` command. I'm using `catdoc
    -a <doc-file>` to read ASCII characters only. You can explore `catdoc` with the
    help of the `man catdoc` command.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在这里看到的，我们正在执行两个不同的任务。首先，我们将上传的文件存储在`/tmp目录`中，其次，我们通过使用`os.popen`命令来运行`catdoc`命令来解析文本。借助`os.popen`命令，我们读取`catdoc`命令的`stdout`。`catdoc`命令有许多选项可用。我正在使用`catdoc
    -a <doc-file>`仅读取ASCII字符。您可以使用`man catdoc`命令来探索`catdoc`。
- en: Let's move on to the next section, where we are going to execute this API.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续下一节，我们将执行此API。
- en: Executing in the local environment
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地环境中执行
- en: 'API execution requires a file upload process. So, I would recommend using a
    REST API client. In our case, I am using the Advanced REST client. The following
    screenshot is of the API upload process:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: API执行需要一个文件上传过程。所以，我建议使用REST API客户端。在我们的案例中，我正在使用高级REST客户端。以下截图是API上传过程：
- en: '![](img/00110.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00110.jpeg)'
- en: That's it. Our API is working as expected. We now have the text data in JSON
    format, along with the filename. Now let's move to the next section, where we
    are going to explore the build process on AWS Lambda using Zappa. We will also
    explore how the dependency tool raises exceptions, and how the Docker mechanism
    helps to resolve the issue.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我们的API按预期工作。现在我们有了JSON格式的文本数据，以及文件名。现在让我们继续下一节，我们将探讨在AWS Lambda上使用Zappa进行构建过程。我们还将探讨依赖工具如何引发异常，以及Docker机制如何帮助解决问题。
- en: Building, testing, and deploying with Docker
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker构建，测试和部署
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's move ahead to make a build using Zappa without considering the Docker
    environment.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续进行Zappa构建，而不考虑Docker环境。
- en: Building without Docker
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无Docker构建
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Now that we''ve deployed the application, let''s test the API execution.
    The following is a screenshot of the API execution using the Advanced REST client:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**现在我们已经部署了应用程序，让我们测试API执行。以下是使用高级REST客户端执行API的截图：'
- en: '![](img/00111.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00111.jpeg)'
- en: Here we tried to upload the same file but didn't get the content. Even the return
    response is OK. Let's figure this out. What is the cause of this problem? You
    can tail the Zappa logs using `zappa logs <stage_name>`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们尝试上传相同的文件，但没有得到内容。甚至返回响应是OK。让我们找出原因。这个问题的原因是什么？你可以使用`zappa logs <stage_name>`来查看Zappa日志。
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here you can see we got an error, which states that the `catdoc` command cannot
    be found. That's true and as expected, because `catdoc` is not available in the
    AWS Lambda environment, and there is no way to install this dependency on AWS
    Lambda. But why did we not get an exception for it? Well, it's a system-level
    error, as we used the `os.popen` method to execute the `catdoc` command. Hence,
    Python does not catch these errors. That's the reason we didn't get an exception.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你可以看到我们得到了一个错误，指出`catdoc`命令找不到。这是真的，也是预期的，因为`catdoc`在AWS Lambda环境中不可用，并且没有办法在AWS
    Lambda上安装这个依赖项。但为什么我们没有得到异常？嗯，这是一个系统级错误，因为我们使用`os.popen`方法来执行`catdoc`命令。因此，Python不会捕获这些错误。这就是我们没有得到异常的原因。
- en: Well, what about the problem? We are hopeless, as we can't do anything on AWS
    Lambda, and we cannot change the AWS Lambda environment!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 那么问题呢？我们是无助的，因为我们在AWS Lambda上无能为力，也无法改变AWS Lambda环境！
- en: Wait! There is someone who blessed you with a solution—LambCI. LambCI has released
    a Docker image ([https://github.com/lambci/docker-lambda](https://github.com/lambci/docker-lambda))
    that is a mirror image of the AWS Lambda environment. Now you can use this to
    solve the problem. Let's move to the next section, where we are going to configure
    the Docker environment along with the required dependencies.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 等等！有人给你带来了一个解决方案—LambCI。LambCI发布了一个Docker镜像（[https://github.com/lambci/docker-lambda](https://github.com/lambci/docker-lambda)），它是AWS
    Lambda环境的镜像。现在你可以用它来解决问题。让我们继续下一节，我们将配置Docker环境以及所需的依赖项。
- en: Configuring Docker with Zappa
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zappa配置Docker
- en: With the help of the LambCI Docker image, we will get an AWS Lambda-compatible
    environment. But, still, we are required to have build dependencies related to
    the `catdoc` utility. Now, we can use this Docker image with the `build-python3.6`
    tag to create a Docker container.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 借助LambCI Docker镜像，我们将获得与AWS Lambda兼容的环境。但是，我们仍然需要与`catdoc`实用程序相关的构建依赖项。现在，我们可以使用带有`build-python3.6`标签的Docker镜像来创建一个Docker容器。
- en: 'The following is a code snippet showing the creation of a Docker container:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个显示创建Docker容器的代码片段：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`run`:This command is used to create and start the container based on the given
    image tag. In our case, we are using `"lambci/lambda:build-python3.6"`.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run`：此命令用于基于给定的图像标签创建和启动容器。在我们的案例中，我们使用`"lambci/lambda:build-python3.6"`。'
- en: '`--name`: This option is used to create the Docker container''s name.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--name`：此选项用于创建Docker容器的名称。'
- en: '**`-v`**: This option is used to mount the directory from the host machine
    to the Docker container. For multiple directories, we need to repeat this option,
    as we are mounting the current directory as well the AWS CLI directory for AWS
    access credentials.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`-v`**：此选项用于将目录从主机机器挂载到Docker容器。对于多个目录，我们需要重复此选项，因为我们正在挂载当前目录以及AWS CLI目录以获取AWS访问凭据。'
- en: '**`-e`**: This option is used to set the environment variable into the Docker
    container. For multiple environment variables, you need to repeat this option.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`-e`**：此选项用于将环境变量设置到Docker容器中。对于多个环境变量，您需要重复此选项。'
- en: '**`-p`**: This option is used to expose and map the Docker container port with
    the host machine. We are mapping to port `8000 `so that we can test the application
    on the local environment.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`-p`**：此选项用于将Docker容器端口暴露和映射到主机。我们映射到端口`8000`，这样我们可以在本地环境中测试应用程序。'
- en: '`**-it**`:  This option is used to start the Docker container in interactive
    mode, where we can interact with the Docker container.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**-it**`：此选项用于以交互模式启动Docker容器，我们可以与Docker容器进行交互。'
- en: There is also the `bash` command to be executed. This command will land us on
    the Docker container's Terminal Bash screen. Once you run the command, it will
    start the Docker container and attach the controller with the Bash screen.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 还有要执行的`bash`命令。此命令将使我们进入Docker容器的终端Bash屏幕。运行该命令后，它将启动Docker容器并将控制器附加到Bash屏幕。
- en: 'Have a look at the following log snippet of the options just mentioned, and
    check the mounted files:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下刚才提到的选项的日志片段，并检查挂载的文件：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see, all files from our current directory have been mounted as per
    the volume mapping. Now this container has a context similar to that of AWS Lambda.
    Hence, we can configure any source code of any library or tool.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们当前目录中的所有文件都已根据卷映射挂载。现在，该容器的上下文与AWS Lambda的上下文类似。因此，我们可以配置任何库或工具的任何源代码。
- en: We are now going to look at the `catdoc` configuration. As mentioned on the
    catdoc website ([http://www.wagner.pp.ru/~vitus/software/catdoc/](http://www.wagner.pp.ru/~vitus/software/catdoc/)),
    you can download the source code and compile it through your system. We are going
    to download the `catdoc` source code inside the container by using the `wget`
    tool.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将看一下`catdoc`的配置。如catdoc网站（[http://www.wagner.pp.ru/~vitus/software/catdoc/](http://www.wagner.pp.ru/~vitus/software/catdoc/)）所述，您可以通过系统下载源代码并进行编译。我们将使用`wget`工具在容器内下载`catdoc`源代码。
- en: 'Before that, we need to install the `wget` tool in our container, as shown
    in the following code snippet:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之前，我们需要在容器中安装`wget`工具，如下代码片段所示：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once you''ve installed the `wget` tool, download the `catdoc` source code inside
    a folder. In our case, we are going to download it inside a `lib` folder. You
    can create the `lib` and `usr` directories as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了`wget`工具后，下载`catdoc`源代码到一个文件夹中。在我们的情况下，我们将其下载到`lib`文件夹中。您可以按照以下方式创建`lib`和`usr`目录：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `lib` and `usr` directories are used by the compiled source code of any
    library,  hence these directories are required to maintain the binaries of compiled
    source code for execution.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`lib`和`usr`目录用于任何库的编译源代码，因此这些目录需要维护编译源代码的二进制文件以供执行。'
- en: 'Now it''s time to install the `catdoc` library from its source code. You need
    to follow these steps in order to configure the library:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候从源代码安装`catdoc`库了。您需要按照以下步骤配置库：
- en: 'Download the `catdoc` source code, as shown in the following code:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载`catdoc`源代码，如下代码所示：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now extract the compressed file using the `tar` command-line utility:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用`tar`命令行实用程序解压缩文件：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, go into the `catdoc` source directory and configure it with a prefix
    to keep the binary at the application level, as shown in the following snippet:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，进入`catdoc`源目录，并配置它的前缀，以保持二进制文件在应用程序级别，如下代码片段所示：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now run the `make` and `make install` commands, as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行`make`和`make install`命令，如下所示：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now you will find that the `catdoc` binary is available at the `/var/task/usr/`
    directory, as shown in the following code:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您会发现`catdoc`二进制文件可在`/var/task/usr/`目录中找到，如下代码所示：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Change the following line in the `parser.py`, where we are just changing the
    command path:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`parser.py`中的以下行，我们只是更改了命令路径：
- en: '[PRE23]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: That's it! We've now added the `catdoc` dependency in our application. This
    dependency has been configured in the Docker container, whereas our Docker container
    and the AWS Lambda environment have the same OS context. Hence, the configured
    dependency is going to work on AWS Lambda as well.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们现在已经在我们的应用程序中添加了`catdoc`依赖项。这个依赖项已经在Docker容器中配置，而我们的Docker容器和AWS Lambda环境具有相同的操作系统上下文。因此，配置的依赖项也将在AWS
    Lambda上运行。
- en: 'Let''s move ahead to deploy the application from the container itself. Before
    initializing the deployment, we need to install all required Python packages using
    `pipenv`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续从容器本身部署应用程序。在初始化部署之前，我们需要使用`pipenv`安装所有必需的Python包：
- en: 'The following log snippet shows the `pipenv install` command:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下日志片段显示了`pipenv install`命令：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, activate the virtual environment using the `pipenv shell` command, as
    follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`pipenv shell`命令激活虚拟环境，如下所示：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Oops! We got an error while activating the virtual environment! Let''s fix
    it and then activate the virtual environment once again:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！在激活虚拟环境时出现了错误！让我们修复它，然后再次激活虚拟环境：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We set the `SHELL` environment variable and then re-run the Zappa `shell` command.
    Therefore, a virtual environment has been activated. Now, let's continue.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了`SHELL`环境变量，然后重新运行Zappa `shell`命令。因此，虚拟环境已被激活。现在，让我们继续。
- en: Zappa requires an enabled virtual environment, as it builds the deployment package
    based on the installed packages in the virtual environment.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa需要启用虚拟环境，因为它基于虚拟环境中安装的包构建部署包。
- en: 'Perform the deployment using either the `zappa deploy` command or the `zappa
    update` command. We''ve already deployed the application, which is why we are
    going to go with `zappa update`:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`zappa deploy`命令或`zappa update`命令执行部署。我们已经部署了应用程序，所以我们将使用`zappa update`：
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now we are done with deployment. Let's move to the next section and explore
    the API execution.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经完成了部署。让我们继续前进到下一部分并探索API的执行。
- en: Executing the API on AWS Lambda
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS Lambda上执行API
- en: 'You can use any REST client to debug and execute the API. We are going to use
    the Advanced REST client. The following screenshot demonstrates the API execution:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用任何REST客户端来调试和执行API。我们将使用高级REST客户端。以下截图演示了API的执行：
- en: '![](img/00112.jpeg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00112.jpeg)'
- en: As you can see here, we've uploaded the MS Office document file and received
    the response in JSON format with all the text data present in the uploaded file.
    Mission accomplished.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在这里所看到的，我们已上传了MS Office文档文件，并以JSON格式收到了包含上传文件中所有文本数据的响应。任务完成。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Finally, we have implemented the solution for developing an application with
    a custom dependency. With the help of Docker containerization, we have built the
    binary of the required `catdoc` library, which is configured against the Docker
    container, and the results are similar to those we would expect with AWS Lambda,
    thanks to LambCI's Docker image and the `build-Python3.6` tag. This is how we
    resolve the custom dependency problem with AWS Lambda.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已经实现了使用自定义依赖项开发应用程序的解决方案。借助Docker容器化，我们已经构建了所需的`catdoc`库的二进制文件，该库针对Docker容器进行了配置，结果与我们预期的AWS
    Lambda类似，这要归功于LambCI的Docker镜像和`build-Python3.6`标签。这就是我们如何通过AWS Lambda解决自定义依赖问题的方法。
- en: Questions
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How does a Docker container work?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker容器是如何工作的？
- en: What is the difference between a Docker image and Docker container?**
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker镜像和Docker容器之间有什么区别？
