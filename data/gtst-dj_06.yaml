- en: Chapter 6. Getting a Model's Data with Querysets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。使用 Querysets 获取模型的数据
- en: '**Querysets** are used for data retrieval rather than for constructing SQL
    queries directly. They are part of the ORM used by Django. An ORM is used to link
    the view and controller by a layer of abstraction. In this way, the developer
    uses object model types without the need to write a SQL query. We will use querysets
    to retrieve the data we have stored in the database through models. These four
    operations are often summarized by **CRUD** (**Create**, **Read**, **Update**,
    **and Delete**).'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Querysets** 用于数据检索，而不是直接构建 SQL 查询。它们是 Django 使用的 ORM 的一部分。ORM 用于通过抽象层将视图和控制器连接起来。开发人员可以使用对象模型类型，而无需编写
    SQL 查询。我们将使用 querysets 来检索我们通过模型存储在数据库中的数据。这四个操作通常被 **CRUD** (**创建**，**读取**，**更新**
    和 **删除**) 所总结。'
- en: The discussed examples in this chapter are intended to show you how the querysets
    work. The next chapter will show you how to use forms, and thus, how to save data
    sent from a client in the models.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中讨论的示例旨在向您展示查询集的工作原理。下一章将向您展示如何使用表单，以及如何将来自客户端的数据保存在模型中。
- en: 'By the end of this chapter, we will know how to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将知道如何：
- en: Save data in the database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据库中保存数据
- en: Retrieve data from the database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中检索数据
- en: Update data from the database
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新数据库中的数据
- en: The persisting model's data on the database
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在数据库上持久化模型的数据
- en: Data storage is simple with Django. We just need to fill the data in the models,
    and use methods to store them in a database. Django handles all the SQL queries;
    the developer does not need to write any.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Django 进行数据存储很简单。我们只需要在模型中填充数据，并使用方法将它们存储在数据库中。Django 处理所有的 SQL 查询；开发人员不需要编写任何查询。
- en: Filling a model and saving it in the database
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填充模型并将其保存在数据库中
- en: Before you can save data from a model instance to the database, we need to define
    all the values of the model's required fields. We can show the examples in our
    view index.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在将模型实例的数据保存到数据库之前，我们需要定义模型所需字段的所有值。我们可以在我们的视图索引中显示示例。
- en: 'The following example shows how to save a model:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了如何保存模型：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will explain the new lines of our view:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将解释我们视图的新行：
- en: We import our `models.py` file; it's the model that we will use in the view
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们导入我们的 `models.py` 文件；这是我们将在视图中使用的模型
- en: We then create an instance of our `Project` model and fill it with data
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们创建我们的 `Project` 模型的一个实例，并用数据填充它
- en: Finally, we execute the `save()` method that saves the present data in the instance
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们执行 `save()` 方法，将当前数据保存在实例中
- en: We will test this code by starting the development server (or runserver) and
    then go to our URL. In the `render()` method, the value that we defined in the
    `action` variable is displayed. To check if the query is executed, we can use
    the administration module. There is also the software for managing databases.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过启动开发服务器（或 runserver）来测试此代码，然后转到我们的 URL。在 `render()` 方法中，我们定义的 `action`
    变量的值将被显示。要检查查询是否执行，我们可以使用管理模块。还有用于管理数据库的软件。
- en: We need to add more records by changing the values randomly in `line 2`. To
    find out how to do this, we'll need to read this chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过更改 `line 2` 中的值来添加更多记录。要了解如何做到这一点，我们需要阅读本章。
- en: Getting data from the database
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库中获取数据
- en: Before using Django to retrieve data from a database, we were using SQL queries
    to retrieve an object containing the result. With Django, there are two ways to
    retrieve records from the database depending on whether we want to get back one
    or several records.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Django 从数据库中检索数据之前，我们使用 SQL 查询来检索包含结果的对象。使用 Django，根据我们是要获取一个记录还是多个记录，有两种检索记录的方式。
- en: Getting multiple records
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取多条记录
- en: To retrieve records from a model, we must first import the model into the view
    as we have done before to save the data in a model.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要从模型中检索记录，我们必须首先将模型导入视图，就像我们之前保存数据到模型中一样。
- en: 'We can retrieve and display all the records in the `Project` model as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按以下方式检索和显示 `Project` 模型中的所有记录：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The code template that displays the projects becomes:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 显示项目的代码模板如下：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `all()` method can be linked to a SQL `SELECT * FROM` query. Now, we will
    use the `filter()` method to filter our results and make the equivalent of a `SELECT
    * FROM Project WHERE field = value` query.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`all()` 方法可以链接到 SQL `SELECT * FROM` 查询。现在，我们将使用 `filter()` 方法来过滤我们的结果，并进行等效于
    `SELECT * FROM Project WHERE field = value` 查询。'
- en: 'The following is the code to filter model records:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是筛选模型记录的代码：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We used a new syntax to send the variables to the template. The `locals()` function
    sends all the local variables to the template, which simplifies the render line.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一种新的语法将变量发送到模板。`locals()` 函数将所有本地变量发送到模板，这简化了渲染行。
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Best practices recommend that you pass the variables one by one and only send
    the necessary variables.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践建议您逐个传递变量，并且只发送必要的变量。
- en: 'Each argument from the `filter()` method defines a filter for the query. Indeed,
    if we wanted to make two filters, we would have written the following line of
    code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter()` 方法中的每个参数都定义了查询的过滤器。实际上，如果我们想要进行两个过滤，我们将编写以下代码行：'
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This line is equivalent to the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码等同于以下内容：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first line can be broken into two, because the querysets are chainable.
    Chainable methods are methods that return a queryset such that other queryset
    methods can be used.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行可以分成两行，因为 querysets 是可链接的。可链接方法是返回查询集的方法，因此可以使用其他查询集方法。
- en: The response obtained with the `all()` and `filter()` methods is of the queryset
    type. A queryset is a collection of model instances that can be iterated over.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `all()` 和 `filter()` 方法获得的响应是查询集类型。查询集是可以迭代的模型实例集合。
- en: Getting only one record
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅获取一条记录
- en: The methods that we will see in this chapter return objects of the `Model` type,
    which will be used to record relationships or to modify the instance of the model
    recovered.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中看到的方法返回 `Model` 类型的对象，这些对象将用于记录关系或修改恢复的模型实例。
- en: 'To retrieve a single record with a queryset, we should use the `get()` method
    as in the following line:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用查询集检索单个记录，我们应该像下面这行代码一样使用`get()`方法：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `get()` method when used as the `filter()` method accepts filter arguments.
    However, you should be careful with setting the filters that retrieve a single
    record.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`get()`方法在作为`filter()`方法使用时接受过滤参数。但是，设置检索单个记录的过滤器时要小心。'
- en: If the argument to `get()` is `client_name = "Me"`, it would generate an error
    if we had more than two records corresponding to `client_name`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`get()`的参数是`client_name = "Me"`，如果我们有超过两条记录与`client_name`对应，它将生成错误。
- en: Getting a model instance from the queryset instance
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从查询集实例中获取模型实例
- en: We said that only the `get()` method makes it possible to retrieve an instance
    of a model. This is true, but sometimes it can be useful to retrieve an instance
    of a model from a queryset.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们说过只有`get()`方法才能检索模型的实例。这是正确的，但有时从查询集中检索模型的实例也是有用的。
- en: 'For example, if we want to get the first record of the customer `Me`, we will
    write:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想要获取客户`Me`的第一条记录，我们将写：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'These methods are chainable, so we can write the following line instead of
    the previous three lines:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法是可链接的，所以我们可以写下面的一行代码，而不是前面的三行代码：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using the get parameter
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用get参数
- en: 'Now that we have learned how to retrieve a record and we know how to use a
    URL, we will create a page that will allow us to display the record of a project.
    To do this, we will see a new URL syntax:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何检索记录，也知道如何使用URL，我们将创建一个页面，用于显示项目的记录。为此，我们将看到一个新的URL语法：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This URL contains a new string, `(?P<pk>\d+)`. It allows the URL with a decimal
    parameter to be valid because it ends with `\d`. The `+` character at the end
    means that the parameter is not optional. The `<pk>` string means that the parameter's
    name is `pk`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个URL包含一个新的字符串，`(?P<pk>\d+)`。它允许具有十进制参数的URL是有效的，因为它以`\d`结尾。结尾处的`+`字符表示参数不是可选的。`<pk>`字符串表示参数的名称是`pk`。
- en: 'The system routing Django will directly send this parameter to our view. To
    use it, simply add it to the parameters of our `page()` function. Our view changes
    to the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Django的系统路由将直接将此参数发送到我们的视图。要使用它，只需将其添加到我们的`page()`函数的参数中。我们的视图变成了以下内容：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will then create our `en/public/project_detail.html` template extended from
    `base.html` with the following code in the `article_content` block:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建我们的`en/public/project_detail.html`模板，从`base.html`扩展，并在`article_content`块中添加以下代码：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We have just written our first URL containing a parameter. We will use this
    later, especially in the chapter about the class-based views.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚编写了我们的第一个包含参数的URL。我们以后会用到这个，特别是在关于基于类的视图的章节中。
- en: Saving the foreign key
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存外键
- en: 'We have already recorded data from a model, but so far, we have never recorded
    it in the relationship database. The following is an example of recording a relationship
    that we will explain later in the chapter:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经从模型中记录了数据，但到目前为止，我们从未在关系数据库中记录过。以下是一个我们将在本章后面解释的关系记录的例子：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this example, we have loaded four models. These four models are used to create
    our first task. Indeed, a spot is related to a project and developer. A developer
    is attached to a supervisor.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们加载了四个模型。这四个模型用于创建我们的第一个任务。实际上，一个职位与一个项目和开发人员相关联。开发人员附属于监督者。
- en: 'Following this architecture, we must first create a supervisor to add a developer.
    The following list explains this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这种架构，我们必须首先创建一个监督者来添加一个开发人员。以下列表解释了这一点：
- en: We create a new supervisor. Note that the extending model requires no additional
    step for recording. In the `Supervisor` model, we define the fields of the `App_user`
    model without any difficulties. Here, we use `timezone` to record the current
    day's date.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了一个新的监督者。请注意，扩展模型无需额外的步骤来记录。在`Supervisor`模型中，我们定义了`App_user`模型的字段，没有任何困难。在这里，我们使用`timezone`来记录当天的日期。
- en: We look for the first recorded project. The result of this line will record
    a legacy of the `Model` class instance in the `project_to_link` variable. Only
    the `get()` method gives the instance of a model. Therefore, we must not use the
    `filter()` method.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们寻找第一个记录的项目。这行代码的结果将在`project_to_link`变量中记录`Model`类实例的遗留。只有`get()`方法才能给出模型的实例。因此，我们不应该使用`filter()`方法。
- en: We create a new task, and attribute the project created in the beginning of
    the code and the developer that we just recorded.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了一个新的任务，并将其分配给代码开头创建的项目和刚刚记录的开发人员。
- en: This example is very comprehensive, and it combines many elements that we have
    studied from the beginning. We must understand it in order to continue programming
    in Django.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子非常全面，结合了我们从一开始学习的许多元素。我们必须理解它，才能继续在Django中编程。
- en: Updating records in the database
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新数据库中的记录
- en: There are two mechanisms to update data in Django. Indeed, there is a mechanism
    to update one record and another mechanism to update multiple records.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Django中有两种机制可以更新数据。实际上，有一种机制可以更新一条记录，另一种机制可以更新多条记录。
- en: Updating a model instance
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新模型实例
- en: 'Updating the existing data is very simple. We have already seen what it takes
    to be able to do so. The following is an example where it modifies the first task:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 更新现有数据非常简单。我们已经看到了如何做到这一点。以下是一个修改第一个任务的例子：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example, we created a new project and saved it. We searched our task
    for `id = 1`. We changed the description and project to the task it is attached
    to. Finally, we saved this task.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个新项目并保存了它。我们搜索了我们的任务，找到了`id = 1`。我们修改了描述和项目，使其与任务相关联。最后，我们保存了这个任务。
- en: Updating multiple records
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新多条记录
- en: 'To edit multiple records in one shot, you must use the `update()` method with
    a queryset object type. For example, our `People` customer is bought by a company
    named `Nobody`, so we need to change all the projects where the `client_name`
    property is equal to `People`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要一次编辑多条记录，必须使用带有查询集对象类型的`update()`方法。例如，我们的`People`客户被名为`Nobody`的公司购买，因此我们需要更改所有`client_name`属性等于`People`的项目：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `update()` method of a queryset can change all the records related to this
    queryset. This method cannot be used on an instance of a model.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 查询集的`update()`方法可以更改与该查询集相关的所有记录。这个方法不能用于模型的实例。
- en: Deleting a record
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除记录
- en: 'To delete a record in the database, we must use the `delete()` method. Removing
    items is easier than changing items, because the method is the same for a queryset
    as for the instances of models. An example of this is as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除数据库中的记录，我们必须使用`delete()`方法。删除项目比更改项目更容易，因为该方法对查询集和模型实例都是相同的。一个例子如下：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this example, `line 1` removes the stain with `id = 1`. Then, `line 2` removes
    all the present tasks in the database.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`第1行`删除了`id = 1`的污渍。然后，`第2行`删除了数据库中所有现有的任务。
- en: Be careful because even if we use a web framework, we keep hold of the data.
    No confirmation will be required in this example, and no backup has been made.
    By default, the rule for model deletion with `ForeignKey` is the `CASCADE` value.
    This rule means that if we remove a template instance, the records with a foreign
    key to this model will also be deleted.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要小心，因为即使我们使用了一个Web框架，我们仍然掌握着数据。在这个例子中不需要确认，也没有进行备份。默认情况下，具有`ForeignKey`的模型删除规则是`CASCADE`值。这个规则意味着如果我们删除一个模板实例，那么对这个模型有外键的记录也将被删除。
- en: Getting linked records
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取关联记录
- en: We now know how to create, read, update, and delete the present records in the
    database, but we haven't recovered the related objects. In our `TasksManager`
    application, it would be interesting to retrieve all the tasks in a project. For
    example, as we have just deleted all the present tasks in the database, we need
    to create others. We especially have to create tasks in the project database for
    the rest of this chapter.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道如何在数据库中创建、读取、更新和删除当前记录，但我们还没有恢复相关的对象。在我们的`TasksManager`应用程序中，检索项目中的所有任务将是有趣的。例如，由于我们刚刚删除了数据库中所有现有的任务，我们需要创建其他任务。我们特别需要在本章的其余部分为项目数据库创建任务。
- en: 'With Python and its comprehensive implementation of the object-oriented model,
    accessing the related models is intuitive. For example, we will retrieve all the
    project tasks when `login = 1`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python及其面向对象模型的全面实现，访问相关模型是直观的。例如，当`login = 1`时，我们将检索所有项目任务：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We will now look for the project task when `id = 1`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将查找`id = 1`时的项目任务：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We will now use the relationship to access the project task.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用关系来访问项目任务。
- en: Advanced usage of the queryset
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询集的高级用法
- en: We studied the basics of querysets that allow you to interact with the data.
    In specific cases, it is necessary to perform more complex actions on the data.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了允许您与数据交互的查询集的基础知识。在特定情况下，需要对数据执行更复杂的操作。
- en: Using an OR operator in a queryset
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在查询集中使用OR运算符
- en: In queryset filters, we use a comma to separate filters. This point implicitly
    means a logical operator `AND`. When applying an `OR` operator, we are forced
    to use the `Q` object.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询集过滤器中，我们使用逗号来分隔过滤器。这一点隐含地意味着逻辑运算符`AND`。当应用`OR`运算符时，我们被迫使用`Q`对象。
- en: 'This `Q` object allows you to set complex queries on models. For example, to
    select the projects of the customers `Me` and `Nobody`, we must add the following
    lines in our view:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Q`对象允许您在模型上设置复杂的查询。例如，要选择客户`Me`和`Nobody`的项目，我们必须在视图中添加以下行：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Using the lower and greater than lookups
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用小于和大于的查找
- en: With the Django queryset, we cannot use the `< and >` operators to check whether
    a parameter is greater than or less than another.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Django查询集，我们不能使用`<`和`>`运算符来检查一个参数是否大于或小于另一个参数。
- en: 'You must use the following field lookups:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须使用以下字段查找：
- en: '`__gte`: This is equivalent to SQL''s greater than or equal to operator, `>=`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__gte`：这相当于SQL的大于或等于运算符，`>=`'
- en: '`__gt`: This is equivalent to SQL''s greater than operator, `>`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__gt`：这相当于SQL的大于运算符，`>`'
- en: '`__lt`: This is equivalent to SQL''s lower than operator, `<`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__lt`：这相当于SQL的小于运算符，`<`'
- en: '`__lte`: This is equivalent to SQL''s lower than or equal to operator, `<=`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__lte`：这相当于SQL的小于或等于运算符，`<=`'
- en: 'For example, we will write the queryset that can return all the tasks with
    a duration of greater than or equal to four hours:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将编写一个查询集，可以返回持续时间大于或等于四小时的所有任务：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Performing an exclude query
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行排除查询
- en: 'The exclude queries can be useful in the context of a website. For example,
    we want to get the list of projects that do not last for more than four hours:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在网站的上下文中，排除查询可能很有用。例如，我们想要获取持续时间不超过四小时的项目列表：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Making a raw SQL query
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进行原始SQL查询
- en: 'Sometimes, developers may need to perform raw SQL queries. For this, we can
    use the `raw()` method, defining the SQL query as an argument. The following is
    an example that retrieves the first task:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，开发人员可能需要执行原始的SQL查询。为此，我们可以使用`raw()`方法，将SQL查询定义为参数。以下是一个检索第一个任务的示例：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To access the name of the first task, just use the following syntax:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问第一个任务的名称，只需使用以下语法：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to handle the database, thanks to the Django
    ORM. Indeed, thanks to the ORM, the developer does not need to write SQL queries.
    In the next chapter, we will learn how to create forms using Django.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何通过Django ORM处理数据库。确实，借助ORM，开发人员不需要编写SQL查询。在下一章中，我们将学习如何使用Django创建表单。
