- en: Methodologies, Paradigms, and Practices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法论、范式和实践
- en: It could be argued that software engineering, at least as it's usually thought
    of now, really came into being with the first formally identified software development
    methodology. That methodology (which was eventually dubbed Waterfall in 1976)
    made people start thinking about not just how the software worked, or how to write
    the code, but what the processes around writing the code needed to look like in
    order to make it more effective. Since then, roughly a dozen other methodologies
    have come into being, and in at least one case, the collection of various Agile
    methodologies, there are nearly a dozen distinct sub-variants, though Scrum is
    almost certainly the most widely known, and Kanban may be a close second.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，软件工程，至少是现在通常所认为的，真正开始存在于第一个正式确定的软件开发方法论。这种方法论（最终在1976年被称为瀑布）使人们开始思考的不仅仅是软件的工作原理，或者如何编写代码，而是围绕编写代码的过程需要看起来像什么，以使其更有效。从那时起，大约有十几种其他方法论出现了，至少有一种情况下，各种敏捷方法论的集合，有近十几种不同的子变体，尽管Scrum几乎可以肯定是最为人熟知的，而Kanban可能是第二熟知的。
- en: While those methodologies were growing and maturing, the increase in computing
    power also led, eventually, to newer, more useful, or more efficient development
    paradigms. **Object-Oriented Programming** (**OOP**) and **Functional Programming**
    (**FP**) are probably the most well-known advances on the original procedural
    programming paradigm that dominated the scene for decades. Automation of code
    integration and promotion practices (Continuous Integration and Delivery, respectively)
    have also become popular in recent years.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些方法论不断成长和成熟时，计算能力的增加最终也导致了更新、更有用或更高效的开发范式。面向对象编程（OOP）和函数式编程（FP）可能是最为人熟知的对原始过程式编程范式的进步，而过去几十年一直占主导地位。自动化代码集成和推广实践（分别是持续集成和交付）近年来也变得流行起来。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Process methodologies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过程方法论
- en: Waterfall
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瀑布
- en: 'Agile:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷：
- en: Scrum
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scrum
- en: Kanban
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看板
- en: 'Development paradigms:'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发范式：
- en: Object-Oriented Programming (OOP)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）
- en: Functional Programming (FP)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数式编程（FP）
- en: 'Development practices:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发实践：
- en: Continuous Integration
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous Delivery
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续交付
- en: Process methodologies
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过程方法论
- en: 'At some level, all development process methodologies are variations on the
    theme of managing development within the boundaries of some common realities:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种程度上，所有开发过程方法论都是在一些共同现实的边界内管理开发的变体：
- en: There are only so many useful working hours per person per day that can be devoted
    to a project
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个人每天可以投入到项目中的有用工作时间是有限的
- en: There is a limit to the available resources, whether in terms of people, equipment,
    or money, available to a project
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目可用资源的限制，无论是人员、设备还是资金
- en: There is a minimum acceptable quality standard for the project when it's complete
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目完成时有一个最低可接受的质量标准
- en: 'This is sometimes expressed as the **I****ron Triangle** of project management:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这有时被表达为项目管理的铁三角：
- en: '![](assets/e2bbcfd4-bb81-4ff6-85b1-67f7a81c3742.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e2bbcfd4-bb81-4ff6-85b1-67f7a81c3742.png)'
- en: The primary concern with respect to the **Speed** point is time—the most common
    focus is probably on a project needing to be complete by a specific deadline,
    or there is some other time constraint that may only be surmountable by adding
    developers to the team (an increase in **Cost**), or by cutting corners (a decrease
    in **Quality**).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关于**速度**点的主要关注是时间——最常见的焦点可能是项目需要在特定截止日期前完成，或者有一些其他时间约束，可能只能通过增加团队的开发人员（增加**成本**）或者采取捷径（降低**质量**）来克服。
- en: Budget variations are a common theme for the **Cost** point—anything that costs
    money, whether in the form of additional developers, newer/faster/better tools,
    and so on.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 成本点的变化是**成本**点的一个常见主题——任何花钱的事情，无论是额外的开发人员、更新/更快/更好的工具等等。
- en: Reducing the available resources/staff decreases the **Speed** of project completion
    and/or the final **Quality**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 减少可用资源/人员会降低项目完成的速度和/或最终的质量。
- en: The **Quality** point is, obviously, concerned with quality measures—which might
    include specific internal or external standards—but could easily include less
    obvious items such as longer-term maintainability and support for new features
    and functionality. Prioritizing **Quality**, at a minimum, requires more developer
    hours, decreasing **Speed**, and increasing **Cost**.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 质量点显然关注质量措施，这可能包括特定的内部或外部标准，但也可能包括不那么明显的项目，比如长期可维护性和对新功能和功能的支持。至少需要更多的开发人员时间来优先考虑质量，这会降低速度，增加成本。
- en: 'Often, significant priority (whatever value for significant might apply) can
    only be given to two out of the three points of the triangle at most, yielding
    three priority possibilities:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，对三角形的三个点最多只能给予两个点的重要性（无论“重要性”可能适用于哪个值），从而产生三种优先级可能性：
- en: Fast, inexpensive development, at the cost of quality
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速、廉价的开发，但以牺牲质量为代价
- en: Fast, high-quality development, but at greater cost
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速、高质量的开发，但成本更高
- en: High-quality, inexpensive development that takes a longer time to complete
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高质量、廉价的开发，需要更长时间来完成
- en: The **Lean Startup Method** (or just Lean) is sometimes cited as an alternative
    process methodology that can overcome the constraints of the Iron Triangle, but
    is beyond the scope of this book. A reasonable introduction to its concepts can
    be found at [https://www.castsoftware.com/glossary/lean-development](https://www.castsoftware.com/glossary/lean-development).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 精益创业方法（或简称精益）有时被认为是可以克服铁三角约束的替代过程方法论，但超出了本书的范围。可以在[https://www.castsoftware.com/glossary/lean-development](https://www.castsoftware.com/glossary/lean-development)找到其概念的合理介绍。
- en: There are three specific development process methodologies that are worth an
    in-depth examination in the context of this book. The first, Waterfall, will be
    examined in order to provide a frame of reference for two Agile methodologies,
    Scrum and Kanban, and a few others will be looked at as well, at least briefly.
    A full discussion of any of them is well beyond the scope of this book, but the
    intention is to provide enough detail on each of them to illustrate what their
    focuses and priorities are, as well as their advantages and drawbacks. At a minimum,
    this should provide a baseline of what to expect while working in any of them,
    tying the phases of each methodology back to the phases of the model SDLC from
    [Chapter 3](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=27&action=edit), *System
    Modeling,* to show what happens, when, and how.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种特定的开发流程方法论值得在本书的背景下进行深入研究。首先，我们将研究瀑布模型，以便为两种敏捷方法论——Scrum和Kanban提供一个参照框架，同时还会简要地介绍其他一些方法。本书的范围远远无法对它们进行全面讨论，但意图是为每种方法提供足够的细节，以说明它们的重点、优势和劣势。至少，这应该提供一个基准，让人们知道在任何一种方法中工作时可以期待什么，将每种方法的阶段与[第3章](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=27&action=edit)的SDLC模型的阶段联系起来，展示发生了什么、何时发生以及如何发生。
- en: Waterfall
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 瀑布
- en: Waterfall's ancestry can probably be traced back to manufacturing and/or construction
    planning. In many respects, it's a very simple approach to planning and implementing
    a development effort, and is essentially broken down into defining and designing
    what to build, building it, testing it, and deploying it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布的渊源可能可以追溯到制造和/或建筑规划。在许多方面，这是一种非常简单的规划和实施开发工作的方法，基本上可以分解为定义和设计要构建的内容，构建它，测试它，部署它。
- en: 'More formally, it''s six separate phases, intended to be executed in this order:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 更正式地说，这是六个单独的阶段，按照这个顺序执行：
- en: Requirements
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求
- en: Analysis
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析
- en: Design
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计
- en: Implementation
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施
- en: Testing
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: 'Installation and Operation:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和操作：
- en: '![](assets/99fc898a-d74e-4f49-9dc5-d7f925081471.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/99fc898a-d74e-4f49-9dc5-d7f925081471.png)'
- en: These phases correspond fairly neatly with the sequence of phases in the SDLC.
    They are very similar, whether by accident or design, and are intended to accomplish
    many of the same goals. Their focus is probably best summarized as an effort to
    design, document, and define everything that's needed for development to succeed,
    before handing that design off to development for implementation. In an ideal
    execution, the design and requirement information will give developers everything
    they need, and the project manager may be completely hands-off once implementation
    starts.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些阶段与SDLC的阶段顺序相当吻合。无论是偶然还是有意为之，它们的目标都是为了实现许多相同的目标。它们的重点可能最好总结为努力在交付设计给开发之前设计、记录和定义开发所需的一切。在理想的执行中，设计和需求信息将为开发人员提供一切所需，一旦实施开始，项目经理可能完全不需要干预。
- en: Conceptually, there is some merit to the approach—if everything is thoroughly
    and accurately documented, then developers will have everything that they need,
    and they can focus entirely on writing code to accomplish the requirements. Documentation,
    as part of the initial project specifications, is already created, so once the
    software is deployed, anyone managing the resulting system will have access to
    that, and some of that documentation may even be user-oriented and available to
    them.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，这种方法是有一定价值的——如果一切都得到了彻底和准确的记录，那么开发人员将拥有他们所需要的一切，他们可以完全专注于编写代码来实现需求。文档作为初始项目规格的一部分已经创建，因此一旦软件部署，管理生成系统的任何人都将可以访问它，其中一些文档甚至可能是面向用户的，并且对他们可用。
- en: 'If done well, it almost certainly captures and allows for dependencies during
    implementation, and it provides an easily followed sequence of events. Overall,
    the methodology is very easily understood. It''s almost a reflexive approach to
    building something: decide what to do, plan how to do it, do it, check that what
    was done is what was wanted, and then it''s done.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果做得好，它几乎肯定会捕捉并允许在实施过程中的依赖关系，并提供一个易于遵循的事件顺序。总的来说，这种方法论非常容易理解。这几乎是一种反射性的建设方法：决定要做什么，计划如何做，做，检查所做的是否符合要求，然后就完成了。
- en: In practice, though, a good Waterfall plan and execution is not an easy thing
    to accomplish unless the people executing the **Requirements**, **Analysis**,
    and **Design** phases are really good, or sufficient time is taken (maybe a lot
    of time) to arrive at and review those details. This assumes that the requirements
    are all identifiable to begin with, which is frequently not the case, and that
    they don't change mid-stream, which happens more often than might be obvious.
    Since its focus is on documentation first, it also tends to slow down over long-term
    application to large or complex systems—the ongoing updating of a growing collection
    of documentation takes time, after all—and additional (and growing) expenditure
    of time is almost always required to keep unmanageable bloat from creeping in
    to other support structures around the system.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在实践中，要实现一个良好的瀑布计划和执行并不容易，除非执行**需求**、**分析**和**设计**阶段的人员非常优秀，或者需要花费足够的时间（也许是很长时间）来达到并审查这些细节。这假设需求一开始就是可以确定的，而这经常不是事实，并且它们在中途不会发生变化，而这种情况比人们想象的更常见。由于它的重点是首先进行文档记录，因此长期应用于大型或复杂系统时往往会变得缓慢——不断更新不断增长的文档集需要时间，而几乎总是需要额外的（并且不断增加的）时间来防止不可控制的膨胀影响系统周围的其他支持结构。
- en: 'The first three phases of a Waterfall process (**Requirements**, **Analysis**,
    and **Design**) encompass the first five phases of the SDLC model:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布流程的前三个阶段（**需求**、**分析**和**设计**）包括SDLC模型的前五个阶段：
- en: Initial concept/vision
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始概念/愿景
- en: Concept development
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概念开发
- en: Project management planning
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目管理规划
- en: Requirements analysis and definition
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求分析和定义
- en: System architecture and design
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统架构和设计
- en: These would ideally include any of the documentation/artifacts from those phases,
    as well as any *System Modeling* items ([Chapter 3](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=27&action=edit), *System
    Modeling*), all packaged up for developers to use and refer to. Typically, these
    processes will involve a dedicated Project planner, who is responsible for talking
    to and coordinating with the various stakeholders, architects, and so on, in order
    to assemble the whole thing.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，这些将包括这些阶段的任何文档/成果，以及任何*系统建模*项目（[第3章](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=27&action=edit)，*系统建模*），所有这些都打包好供开发人员使用和参考。通常，这些过程将涉及一个专门的项目规划者，负责与各种利益相关者、架构师等进行交流和协调，以便组装整个项目。
- en: 'In a well-defined and managed Waterfall process, the artifact that comes out
    of these three phases and gets handed off to development and quality assurance
    is a document or collection of documents that make up a Project plan. Such a plan
    can be very long, since it should ideally capture all of the output from all of
    the pre-development efforts that''s of use in and after development:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个定义明确且管理良好的瀑布过程中，这三个阶段产生的成果并交给开发和质量保证的成果是一个文档或一组文档，构成了一个项目计划。这样的计划可能会非常长，因为它理想情况下应该捕捉到所有在开发前和开发后有用的产出：
- en: Objectives and goals (probably at a high level)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标和目标（可能是在高层次）
- en: 'What''s included, and expected of the finished efforts:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括在完成工作中的内容和预期的内容：
- en: Complete requirement breakdowns
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的需求分解
- en: Any risks, issues, or dependencies that need to be mitigated, or at least watched
    for
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要减轻或至少注意的任何风险、问题或依赖关系
- en: 'Architecture, design, and system model considerations (new structures or changes
    to existing structures):'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构、设计和系统模型考虑因素（新结构或对现有结构的更改）：
- en: Logical and/or physical architecture items
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑和/或物理架构项目
- en: Use cases
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用案例
- en: Data structure and flow
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据结构和流程
- en: Interprocess communication
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程间通信
- en: Development plan(s)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发计划
- en: Quality assurance/testing plan(s)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质量保证/测试计划(s)
- en: Change management plans
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更管理计划
- en: Installation/Distribution plans
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装/分发计划
- en: Decommissioning plans
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 退役计划
- en: 'The **Implementation** and **Testing** phases of a Waterfall process, apart
    from having the Project plan as a starting point reference, are probably going
    to follow a simple and very typical process:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布过程的**实施**和**测试**阶段，除了以项目计划作为起点参考外，很可能会遵循一个简单而非常典型的过程：
- en: Developer writes code
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员编写代码
- en: Developer tests code (writing and executing unit tests), fixing any functional
    issues and retesting until it's complete
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员测试代码（编写和执行单元测试），修复任何功能问题并重新测试直到完成
- en: Developer hands finished code off to quality assurance for further testing
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员将完成的代码交给质量保证进行进一步测试
- en: Quality assurance tests code, handing it back to the developer if issues are
    found
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质量保证测试代码，如果发现问题，则将其交还给开发人员
- en: Tested/approved code is promoted to the live system
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经过测试/批准的代码被推广到实际系统
- en: This process is common enough across all development efforts and methodologies
    that it will not be mentioned again later unless there is a significant deviation
    from it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程在所有开发工作和方法论中都很常见，除非有重大偏差，否则以后不会再提到它。
- en: Waterfall's **Installation and Operation** phase incorporates the **Installation/Distribution**
    and **Operations/Use and Maintenance** phases from the SDLC model. It may also
    incorporate the **Decommissioning** phase as well, since that may be considered
    as a special **Operation** situation. Like the **Implementation** and **Testing**
    phases, chances are that these will progress in an easily anticipated manner—again,
    apart from the presence of whatever relevant information might exist in the Project
    plan documentation, there's not really anything to dictate any deviation from
    a simple, common-sense approach to those, for whatever value of common-sense applies
    in the context of the system.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布的**安装和操作**阶段包括SDLC模型中的**安装/分发**和**操作/使用和维护**阶段。它也可能包括**退役**阶段，因为这可能被视为特殊的**操作**情况。与**实施**和**测试**阶段一样，这些阶段很可能会以一种易于预期的方式进行——除了项目计划文档中可能存在的任何相关信息外，实际上没有什么可以指导任何偏离简单、常识方法的东西，无论在系统的上下文中常识的价值是什么。
- en: 'While Waterfall is generally dismissed as an outdated methodology, one that
    tends to be implemented in a too-rigid fashion, and that more or less requires
    rock-star personnel to work well on a long-term basis, it can still work, provided
    that one or more conditions exist:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然瀑布通常被认为是一种过时的方法，往往以过于死板的方式实施，并且在长期基础上更多或更少需要超级人员才能发挥作用，但只要存在一个或多个条件，它仍然可以发挥作用：
- en: Requirements and scope are accurately analyzed, and completely accounted for
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求和范围被准确分析，并完全考虑到
- en: Requirements and scope will not change significantly during execution
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行过程中，需求和范围不会发生重大变化
- en: The system is not too large or too complex for the methodology to manage
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统对方法论来说不会太大或太复杂
- en: Changes to a system are not too large or too complex for the methodology to
    manage
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统的变化对方法论来说不会太大或太复杂
- en: Of these, the first is usually not something that can be relied upon without
    policy and procedure support that is usually well outside the control of a development
    team. The latter two will, almost inevitably, be insurmountable given a long enough
    period of time, if only because it's rare for systems to become smaller or less
    complex over time, and changes to larger and more complex systems tend to become
    larger and more complex themselves.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，第一个通常是没有政策和程序支持的情况下不能依赖的事情，而这通常远远超出了开发团队的控制范围。后两者几乎不可避免地会在足够长的时间内变得不可逾越，因为系统很少会随着时间的推移变得更小或更简单，对更大更复杂系统的更改往往会变得更大更复杂。
- en: Agile (in general)
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷（一般）
- en: By the early 1990s, a sea change was under way in how development processes
    were viewed. The Waterfall process, despite widespread adoption, even in government
    contractor policies in the US, started to show more and more of the flaws inherent
    to its application to large and complex systems. Other, non-Waterfall methodologies
    that were in use were also starting to show signs of wear from being too heavy,
    too prone to counter-productive micro-management, and a variety of other complaints
    and concerns.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到了20世纪90年代初，开发过程的观念发生了翻天覆地的变化。瀑布模型虽然被广泛采用，甚至在美国政府承包商政策中也得到了应用，但开始显示出在应用于大型和复杂系统时固有的缺陷。其他非瀑布方法学的使用也开始显示出过于繁重、过于易于产生逆生产的微观管理以及各种其他抱怨和担忧的迹象。
- en: 'As a result, a lot of thought around development processes started focusing
    on lightweight, iterative, and less management-intensive approaches, that eventually
    coalesced around the Agile Manifesto and the twelve principles that underlie it:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对开发过程的大量思考开始集中在轻量级、迭代和较少管理密集型的方法上，最终形成了敏捷宣言和支撑其的十二个原则：
- en: 'We are uncovering better ways of developing software by doing it and helping
    others do it. Through this work, we have come to value:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在通过实践和帮助他人实践，发现开发软件的更好方法。通过这项工作，我们已经开始重视：
- en: Individuals and interactions over processes and tools
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人和互动胜过流程和工具
- en: Working software over comprehensive documentation
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可工作的软件胜过全面的文档
- en: Customer collaboration over contract negotiation
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与合同谈判相比，更重视与客户的合作
- en: Responding to change over following a plan
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应变化胜过遵循计划
- en: 'That is, while there is value in the items on the right, we value the items
    on the left more. We follow these principles:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，虽然右侧的项目有价值，但我们更重视左侧的项目。我们遵循这些原则：
- en: Our highest priority is to satisfy the customer through early and continuous
    delivery of valuable software.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的最高优先级是通过及早和持续交付有价值的软件来满足客户。
- en: Welcome changing requirements, even late in development. Agile processes harness
    change for the customer's competitive advantage.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欢迎变化的需求，即使在开发的后期。敏捷过程利用变化为客户的竞争优势。
- en: Deliver working software frequently, from a couple of weeks to a couple of months,
    with a preference for the shorter timescale.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频繁交付可工作的软件，从几周到几个月，更偏好较短的时间跨度。
- en: Business people and developers must work together daily throughout the project.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务人员和开发人员必须在整个项目期间每天一起工作。
- en: Build projects around motivated individuals. Give them the environment and support
    they need, and trust them to get the job done.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 围绕着积极主动的个人建立项目。给予他们所需的环境和支持，并相信他们能够完成工作。
- en: The most efficient and effective method of conveying information to and within
    a development team is face-to-face conversation.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向开发团队传达信息的最有效方法是面对面的交谈。
- en: Working software is the primary measure of progress.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可工作的软件是进展的主要衡量标准。
- en: Agile processes promote sustainable development. Sponsors, developers, and users
    should be able to maintain a constant pace indefinitely.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷过程促进可持续发展。赞助商、开发人员和用户应该能够持续保持稳定的步伐。
- en: Continuous attention to technical excellence and good design enhances agility.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续关注技术卓越和良好设计可以增强敏捷性。
- en: Simplicity—the art of maximizing the amount of work not done—is essential.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单性——最大程度地减少未完成的工作量——是必不可少的。
- en: The best architectures, requirements, and designs emerge from self-organizing
    teams.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳的架构、需求和设计来自于自组织团队。
- en: At regular intervals, the team reflects on how to become more effective, then
    tunes and adjusts its behavior accordingly.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期团队反思如何变得更有效，然后调整和调整其行为。
- en: You may refer to The Agile Manifesto at [http://Agilemanifesto.org/](http://agilemanifesto.org/)
    for more details.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考敏捷宣言网站[http://Agilemanifesto.org/](http://agilemanifesto.org/)获取更多详细信息。
- en: 'In an application, these principles lead to a few common characteristics across
    different methodologies. There may be exceptions in other methodologies that are
    still considered Agile, but for our purposes, and with respect to the specific
    methodologies discussed here, those common traits are as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中，这些原则导致了不同方法论之间的一些共同特征。其他敏捷方法可能存在例外情况，但对于我们的目的，以及对本文讨论的具体方法论，这些共同特征如下：
- en: Development happens in a sequence of iterations, each of which has one to many
    goals
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发按照一系列迭代进行，每个迭代都有一个或多个目标
- en: Each goal is a subset of the final system
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个目标都是最终系统的一个子集
- en: At the conclusion of each iteration, the system is deployable and operational
    (perhaps only for a given value of operational)
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每个迭代结束时，系统是可部署和可操作的（也许只适用于特定的操作价值）
- en: Requirements are defined in detail in small chunks, and may not be defined at
    all until just before the iteration that they're going to be worked on
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求以小块详细定义，并且可能直到它们要被处理的迭代之前才被定义
- en: Scrum is claimed to be the most popular, or at least most widely used, Agile
    development methodology (the *12^(th) Annual State* of *Agile Report* puts it
    at 56% of Agile methods in use), and as such is probably worth some more detailed
    attention. Kanban is another Agile methodology that bears some examination, if
    only because it's closer to how the main system project in this book is going
    to be presented.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum被称为最受欢迎的，或者至少是最广泛使用的敏捷开发方法（《敏捷报告》的第12届年度报告将其列为56%的敏捷方法正在使用），因此可能值得更加详细地关注。Kanban是另一种敏捷方法，也值得一些研究，即使只是因为它更接近本书中主要系统项目的呈现方式。
- en: There are a few other Agile methodologies that also bear at least a quick look-over
    for some of the specific focus they can bring to a development effort, either
    on their own, or as a hybrid or mix-in with other methodologies.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他敏捷方法论，至少也值得快速查看，因为它们可以为开发工作带来一些特定的关注点，无论是独立使用，还是与其他方法论混合使用。
- en: Businesses are also exploring additions and modifications to textbook Agile
    processes to improve them and address needs that weren't encompassed by the original
    concept. One such process is the **Scaled Agile Framework**, which is used to
    improve the use of Agile processes at larger scales.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 企业也在探索对**敏捷**流程进行补充和修改，以改进它们并解决原始概念未包含的需求。其中一个这样的流程是**规模化敏捷框架**，用于改进更大规模的敏捷流程的使用。
- en: Scrum
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scrum
- en: 'Scrum has the following moving parts, broadly:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum大致包括以下几个部分：
- en: 'The Scrum methodology centers around time-limited iterations called Sprints:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scrum方法论围绕着称为冲刺的有限时间迭代。
- en: A Sprint is defined as taking some fixed length of time that the development
    team (and sometimes stakeholders) can agree upon
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 冲刺被定义为开发团队（有时还包括利益相关者）可以达成一致的一段固定时间。
- en: Sprint durations are usually the same duration each time, but that duration
    can be changed, either temporarily or permanently (until the next time it's changed)
    if there is reason to do so
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 冲刺持续时间通常是相同的，但如果有理由这样做，那么这个持续时间可以被改变，无论是暂时的还是永久的（直到下一次改变）。
- en: Each Sprint has a set of features/functionality associated with it that the
    development team has committed to completing by the end of the Sprint.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个冲刺都有一组与之相关的功能/特性，开发团队已经承诺在冲刺结束时完成。
- en: Each feature/functionality item is described by a **user story.**
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个功能/特性项目都由一个**用户故事**描述。
- en: The team determines what user stories they can commit to completing, given the
    duration of the Sprint.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队确定他们可以承诺在冲刺期间完成哪些用户故事，考虑到冲刺的持续时间。
- en: The priority of user stories is determined by a stakeholder (usually a Product
    Owner), but can be negotiated.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户故事的优先级由利益相关者（通常是产品负责人）确定，但可以进行协商。
- en: 'The team gathers periodically to groom the backlog, which can include:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队定期聚集来整理待办事项列表，这可能包括：
- en: Estimating the size of stories that don't have one
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 估计没有大小的故事
- en: Adding task-level detail to user stories
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为用户故事添加任务级别的细节
- en: Subdividing stories into smaller, more manageable chunks if there are functional
    dependencies or size-related execution concerns, and getting those approved by
    the relevant stakeholder(s)
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果存在功能依赖或与大小相关的执行问题，将故事细分为更小、更易管理的块，并获得相关利益相关者的批准
- en: The team reviews the Sprint at the end, looking for things that went well, or
    for ways to improve on things that went less-than-well.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队在最后审查冲刺，寻找做得好的事情，或者寻找改进做得不太好的事情的方法。
- en: The team meets periodically to plan the next Sprint.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队定期会议计划下一个冲刺。
- en: 'The team has a short, daily meeting (a stand-up), the purpose of which is to
    reveal what status has changed since the last update. The best-known format, though
    not the only one for these meetings, is a quick statement from each participant
    on:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队每天有一个简短的会议（站立会议），其目的是揭示自上次更新以来发生了什么变化的状态。这些会议最为人熟知的格式，虽然不是唯一的格式，是每个参与者快速发表一句话：
- en: What they have worked on since the last stand-up, complete or otherwise.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们自上次站立会议以来所做的工作，无论是完整还是其他。
- en: What they are planning on working on until the next stand-up.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们计划在下一个站立会议之前要处理的工作。
- en: What roadblocks they are dealing with, that someone else in the team might be
    able to assist with.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们正在处理的障碍，其他团队成员可能能够提供帮助。
- en: Story sizing should not be based around any sort of time estimate. Doing so
    tends to discount any assessments of complexity and risk that might be critically
    important, and implies an expectation that all developers will be able to complete
    the same story in the same length of time, which is probably not going to be the
    case. Use story points or t-shirt sizes (extra small, small, medium, large, extra
    large and extra-extra large) instead!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 故事的大小估计不应该基于任何时间估计。这样做往往会忽略对复杂性和风险的评估，这可能是非常重要的，并且意味着期望所有开发人员能够在相同的时间内完成相同的故事，这可能不会是情况。而应该使用故事点或者T恤尺码（额外小，小，中，大，额外大和额外额外大）！
- en: 'From beginning to end, a typical Sprint will unfold something like this, assuming
    all goes well:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从开始到结束，一个典型的冲刺会按照以下方式展开，假设一切顺利：
- en: '**Day 1 Sprint start-up activities**:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**第1天冲刺启动活动**：'
- en: Stories and tasks are set up on the task board, whether it's real or virtual,
    all in a **Not Started** status, in priority order.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 故事和任务被设置在任务板上，无论是真实的还是虚拟的，都处于**未开始**状态，按优先级排序。
- en: Team members claim a story to work on, starting with the highest priority item.
    If more than one person is working on a single story, they each claim one of the
    tasks associated with it. Claimed stories are moved to an **In Progress** status
    on the task board.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 团队成员认领要处理的故事，从优先级最高的项目开始。如果有多个人在处理一个故事，他们会各自认领与之相关的任务。认领的故事会被移动到任务板上的**进行中**状态。
- en: '**Day 1 –day before end of Sprint**: Development and QA.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**第1天-冲刺结束前的一天**：开发和质量保证。'
- en: '**Daily stand – up meeting** (probably skipped on the first day).'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**每日站立会议**（可能在第一天被跳过）。'
- en: '**Development**:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**开发**：'
- en: As tasks are completed, their status is updated on the task board to indicate
    as much.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当任务完成时，它们的状态会在任务板上更新以表示完成。
- en: As stories are completed, they are moved to the next status on the task board
    after development. This column might be **Dev-Complete**, **QA-Ready**, or whatever
    other status description makes sense given the team's structure.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当故事完成后，它们会在开发后移动到任务板上的下一个状态。这一列可能是**开发完成**，**准备质量保证**，或者根据团队结构合理的其他状态描述。
- en: If roadblocks are encountered, they are notified to the **Scrum Master**, who
    is responsible for facilitating resolving the blocking issue. If it cannot be
    resolved immediately, the status of the blocked story or task should be updated
    on the task board, and the developer moves on to the next task or story that they
    can tackle.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果遇到障碍，他们会通知**Scrum Master**，负责促进解决阻塞问题。如果不能立即解决，被阻塞的故事或任务的状态应该在任务板上更新，并且开发人员继续处理他们能够处理的下一个任务或故事。
- en: As roadblocks get resolved, the items they were blocking reenter development
    status, and progress as normal from that point on. There is nothing to say that
    the developer who encountered the block initially has to be the one to continue
    work on the item after the block is resolved.
  id: totrans-142
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随着路障的解决，它们所阻碍的项目重新进入开发状态，并从那时起正常进展。没有什么可以说开发人员在解决了路障后必须继续处理该项目。
- en: '**Quality Assurance activities**:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**质量保证活动**：'
- en: If QA staff are embedded into the development team, their processes are often
    similar to development activities, except that they'll start by claiming a story
    to test from whichever column indicates **Dev-Complete** items
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果质量保证人员嵌入到开发团队中，他们的流程通常类似于开发活动，只是他们会从显示**开发完成**项目的任何列中开始测试一个故事。
- en: Testing a story should include, at a minimum, the **acceptance criteria **of
    that story
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试一个故事应该至少包括该故事的**验收标准**。
- en: Testing may well (and probably should) include functional tests that are not
    part of the acceptance criteria
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试可能会包括不属于验收标准的功能测试。
- en: '**Story Acceptance**: If there are any stories completed that haven''t been
    accepted, they can be demonstrated and accepted or declined by the relevant stakeholder(s).
    Declined items will probably go back to the **In Development** or **Not Started**
    status, depending on why they were declined, and what can be done to resolve the
    reason for being declined.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故事验收**：如果有任何已完成但尚未被接受的故事，它们可以被相关利益相关者演示和接受或拒绝。被拒绝的项目可能会回到**开发中**或**未开始**状态，这取决于为什么被拒绝以及可以做什么来解决被拒绝的原因。'
- en: '**Sprint-Close Day**:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sprint结束日**：'
- en: Demonstration and acceptance of any remaining stories.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演示和接受任何剩余的故事。
- en: 'If time has not been available to do so before, preparation for the next Sprint
    should take place:'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果之前没有时间进行，应该进行下一个Sprint的准备：
- en: '**Sprint Planning**, to prepare the user stories for the next Sprint'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sprint规划**，为下一个Sprint准备用户故事。'
- en: '**Backlog Grooming**, to prepare and define details and tasks for any user
    stories that need those details'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**待办事项梳理**，为需要这些细节的用户故事准备和定义细节和任务。'
- en: Acceptance of remaining stories.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受剩余的故事。
- en: '**Retrospective meeting**—the team gathers to identify the following:'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回顾会议**——团队聚集在一起，确定以下内容：'
- en: What worked well in the Sprint, in order to try and leverage what made it work
    well
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sprint中表现良好的地方，以便尝试利用使其表现良好的因素。
- en: What worked poorly, or not at all, in order to avoid similar scenarios in the
    future
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sprint中表现不佳或根本不起作用的地方，以避免将来出现类似情况。
- en: 'All of the daily activities orbit around a task board, which provides a quick
    mechanism for easily seeing what''s in progress, and what the status of each item
    is:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的日常活动都围绕着一个任务板展开，它提供了一个快速的机制，方便地看到正在进行的工作以及每个项目的状态：
- en: '![](assets/168e2a52-b270-4df2-a38a-d6629d9b41b9.png)An example task board,
    showing stories and tasks in different stages of developmentThe task board shown
    has more detailed status columns than are technically required—the bare-minimum
    column set would be **Stories**, where the top-level stories'' details live until
    they are done, **Not Started**, and **In Progress** for tasks that are part of
    the Sprint, and **Done**, where tasks (and possibly stories) land when they are
    complete, tested, and ready for acceptance.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例任务板，显示了不同开发阶段的故事和任务。所示的任务板比技术上所需的更详细的状态列——最基本的列集将是**故事**，顶层故事的细节存放在那里，直到完成，**未开始**和**进行中**，用于Sprint中的任务，以及**完成**，任务（可能还有故事）完成、测试并准备接受时所在的位置。
- en: Scrum's priorities are its focus on transparency, inspection, and self-correction,
    and its adaptability to changing needs and requirements. The task board is a significant
    part of the transparency aspect of the methodology, allowing anyone with any interest
    to see at a glance what the current status of development efforts is. But it doesn't
    end there—there is a role known as the **Product Owner**, who acts as the central
    communications point between the development team and all of the stakeholders
    of the system. They attend the daily stand-ups, in order to have near-real-time
    visibility into progress, roadblocks, and so on, and are expected to speak for
    and make decisions on behalf of the entire collection of stakeholders. They are
    also responsible for connecting team members with external stakeholders in the
    event that questions or concerns arise that the Product Owner cannot address themselves.
    Their role is critical in assuring a good balance between providing transparency
    into ongoing development efforts to the stakeholders and and not burdening the
    development team with ongoing status reporting from them.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum的优先事项是其专注于透明度、检查和自我纠正，以及对不断变化的需求和要求的适应性。任务板是方法论透明度方面的重要组成部分，允许任何感兴趣的人一目了然地看到开发工作的当前状态。但事情并不止于此——还有一个称为**产品负责人**的角色，他充当开发团队和系统的所有利益相关者之间的中心沟通点。他们参加每日站立会议，以便近乎实时地了解进展、路障等，并且有望代表整个利益相关者集合发言和做出决策。他们还负责在出现问题或关注点时将团队成员与外部利益相关者联系起来，如果产品负责人自己无法解决问题。他们的角色对于确保向利益相关者提供有关进行中的开发工作的透明度和不让开发团队受到他们的持续状态报告的负担之间保持良好平衡至关重要。
- en: Scrum expects a fair amount of self-inspection in the process itself, and encourages
    a similar inspection of the results of the process—the software being created,
    and the practices and disciplines used in creating it—by prioritizing team openness
    and member intercommunication, providing a mechanism for raising visibility into
    risks and blocking conditions, and even, to some degree, by encouraging user stories
    that entail the smallest amount of effort to achieve a given functional goal.
    When concerns or issues arise, the emphasis on immediate communication and the
    ready availability of someone who can provide direction and make decisions resolve
    those issues quickly, and with a minimal degree of interference with the ongoing
    development process.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum期望在过程本身中进行相当多的自我检查，并鼓励对过程结果——所创建的软件以及用于创建它的实践和纪律——进行类似的检查，通过优先考虑团队的开放性和成员之间的交流，提供一种提高风险和阻碍条件可见性的机制，甚至在一定程度上通过鼓励涉及最小工作量以实现给定功能目标的用户故事。当出现问题或问题时，强调立即沟通和随时有人可以提供指导和做出决策，以便快速解决这些问题，并最小程度地干扰正在进行的开发过程。
- en: Scrum is, perhaps, one of the better methodologies from an adaptability-to-change
    perspective. Imagine a situation where a development team has been working on
    parts of a project for the first week of a two-week (or longer) Sprint. At that
    point, someone at the stakeholder level suddenly decides that a change needs to
    be made to one of the stories. There are several possible reasons—good, bad, or
    indifferent—for that sort of change to be necessary.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum或许是从适应变化的角度来看最好的方法之一。想象一下，一个开发团队在两周（或更长时间）的迭代的第一周一直在项目的各个部分上工作。在那时，利益相关者层面上的某人突然决定需要对其中一个故事进行更改。这种变化需要的原因可能有好的、坏的或中立的几种可能。
- en: Perhaps the functionality that underlies the story is deemed obsolete, and no
    longer needed at all—if the story hasn't been completed, then it can simply be
    removed from the Sprint, and another story from the backlog pulled in to be worked
    on, if one is available that is no larger than the one being removed. If there's
    already code written against the story, it will probably need to be removed, but
    that's about it in terms of impact on the code base. If the story is complete,
    then the related code also gets removed, but no new work (additional stories)
    gets pulled in.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 也许故事背后的功能被认为已经过时，根本不再需要——如果故事尚未完成，那么它可以简单地从迭代中移除，并从待办事项中拉取另一个故事进行处理，如果有的话，它的规模不大于被移除的故事。如果已经编写了针对该故事的代码，那么它可能需要被移除，但就对代码库的影响而言，就是这样了。如果故事已经完成，那么相关的代码也会被移除，但不会拉取新的工作（额外的故事）。
- en: If the story is changed—the functionality behind it is being altered to better
    fit user needs or expectations, for example—the story gets withdrawn from the
    current Sprint in the same fashion as if it were being removed, at the very least.
    If there is time available to re-scope the story and re-insert it into the Sprint,
    that can be undertaken, otherwise it will be added to the backlog, probably at
    or near the top of the list from a priority perspective.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果故事发生了变化——例如，其背后的功能被改变以更好地适应用户需求或期望——那么这个故事就会以与被移除相同的方式从当前迭代中撤回，至少是这样。如果有时间重新调整故事并将其重新插入迭代，那么可以这样做，否则它将被添加到待办事项列表中，可能是按优先级透视在列表的顶部或附近。
- en: On occasion, it's possible for a Sprint to derail, but the methodology has expectations
    around how that gets handled as well. If a Sprint cannot complete successfully
    for any reason, it's supposed to stop, and a new Sprint is planned to pick up
    from where that one ended.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，迭代可能会出现偏离预期的情况，但该方法也对如何处理这种情况有期望。如果由于任何原因迭代无法成功完成，它应该停止，并计划一个新的迭代从上一个迭代结束的地方开始。
- en: 'Some advantageous aspects of Scrum include:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum的一些有利方面包括：
- en: Scrum is well-suited to work that can be broken down into small, quick efforts.
    Even in large-scale systems, if additions to or alterations of the large code
    base can be described in short, low-effort stories, Scrum is a good process to
    apply.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scrum非常适合可以分解为小而快速努力的工作。即使在大型系统中，如果对大型代码库的添加或更改可以用简短、低工作量的故事来描述，那么Scrum是一个很好的应用过程。
- en: Scrum works well for teams that have reasonably consistent skillsets within
    their domains. That is, if all developers on a team can, for example, write code
    in the main language of the project without significant assistance, that's a better
    team dynamic than if only one out of six team members can.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scrum非常适合在其领域内具有相对一致技能的团队。也就是说，如果团队中的所有开发人员都可以在项目的主要语言中编写代码而无需太多帮助，那么这种团队动态比只有六名团队成员中的一名能够做到这一点要好。
- en: 'At the same time, because of the structure involved in a Scrum process, there
    are some caveats:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，由于Scrum过程中涉及的结构，有一些注意事项：
- en: Since a Sprint represents a commitment to complete a set of stories and functionality,
    changing an in-process Sprint, even with a really good reason, is troublesome,
    time-consuming, and disruptive. That implies, then, that whoever is in the position
    of making decisions that could require in-process Sprint changes needs to be aware
    of the potential impacts of those decisions—ideally, perhaps, they would avoid
    Sprint-disruptive changes without really, really good reasons.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于迭代代表了完成一组故事和功能的承诺，即使有很好的理由，改变正在进行的迭代也是麻烦的、耗时的和具有破坏性的。这意味着，无论是谁在做出可能需要改变正在进行的迭代的决定的位置上，都需要意识到这些决定可能带来的潜在影响——理想情况下，也许他们会避免在没有真正非常好的理由的情况下对迭代进行破坏性的改变。
- en: Scrum may not lend itself well to meeting project- or system-level deadlines
    until or unless the team has a fair amount of expertise across the entire domain
    of the system and its code base. Iteration deadlines are at less risk, though
    they may require altered or reduced scope in order to deliver working software
    on an iteration-by-iteration basis.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scrum可能不太适合满足项目或系统级的截止日期，除非团队在系统和代码库的整个领域具有相当多的专业知识。迭代截止日期风险较小，尽管它们可能需要改变或减少范围，以便按迭代交付可工作的软件。
- en: Development efforts and outputs become less predictable if the team members
    change—every new team member, especially if they join the team at different times,
    will have some impact on the team's ability to be predictable until the new team
    roster has had time to settle in. Scrum can be particularly sensitive to these
    changes, since new team members may not have all the necessary tribal knowledge
    to meet an iteration's commitments for a while.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果团队成员发生变化，开发工作和产出就会变得不太可预测——每个新团队成员，特别是如果他们在不同时间加入团队，都会对团队的可预测性产生一定影响，直到新团队名单有时间稳定下来。Scrum对这些变化特别敏感，因为新团队成员可能没有满足迭代承诺所需的所有必要部落知识。
- en: Scrum may not work well—perhaps not at all—if the members of a team aren't all
    in the same physical area. With modern teleconferencing, holding the daily stand-up
    is still possible, as are the other varied meetings, but Scrum is intended to
    be collaborative, so easier direct access to other team members tends to become
    important pretty quickly as soon as questions or issues arise.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果团队成员不都在同一物理区域，Scrum可能效果不佳，甚至根本行不通。使用现代远程会议，进行每日站立会议仍然是可能的，其他各种会议也是如此，但Scrum旨在是协作的，因此更容易直接接触其他团队成员很快就变得重要，一旦出现问题或疑问。
- en: Unless it's pretty carefully managed not to, Scrum tends to reinforce skill-set
    silos in a team—if only one developer knows, for example, how to write code in
    a secondary language that the system needs, that person will be tapped more frequently
    or by default for any tasks or stories that need that knowledge in order to meet
    the iteration's commitments. Making a conscious effort to turn silo-reinforcing
    stories or tasks into a team or paired development effort can go a long way toward
    reducing these effects, but if no efforts are made, or if there isn't support
    for reducing these silos, they will persist.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非经过精心管理，Scrum往往会加强团队中技能集的隔离——如果只有一个开发人员知道系统需要的第二语言编写代码的方法，那个人将更频繁或默认地被选中执行任何需要这种知识的任务或故事，以满足迭代的承诺。有意识地将加强隔离的故事或任务转变为团队或成对开发工作可以在很大程度上减少这些影响，但如果没有努力，或者没有支持减少这些隔离，它们将持续存在。
- en: Scrum may be challenging if the system has a lot of external dependencies (work
    from other teams, for example), or a lot of quality control effort that developers
    have to contend with. This last item can be particularly problematic if those
    quality control requirements have legal or regulatory requirements associated
    with them. Assuring that external dependencies are themselves more predictable
    can go a long way to mitigate these kinds of challenges, but that may be out of
    the team's control.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果系统有很多外部依赖（例如来自其他团队的工作），或者开发人员必须应对大量的质量控制工作，Scrum可能会具有挑战性。如果这些质量控制要求与法律或监管要求相关联，这可能会特别棘手。确保外部依赖本身更可预测可以在很大程度上缓解这些挑战，但这可能超出团队的控制范围。
- en: Scrum and the phases of the SDLC model
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scrum和SDLC模型的阶段
- en: 'The phases of our SDLC model that are important to the development effort happening
    during specific parts of a Scrum process are as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的SDLC模型中对开发工作至关重要的阶段发生在Scrum过程的特定部分：
- en: 'Before development starts:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发开始之前：
- en: '**Requirement** analysis and definition happens during the story creation and
    grooming portions of the process, often with some follow-up during Sprint planning.
    The goal is for each story''s requirements to be known and available before the
    story is included in a Sprint.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求分析和定义发生在故事创建和修饰过程的部分，通常在冲刺规划期间进行一些后续工作。目标是在故事被包含在冲刺之前，每个故事的需求都是已知和可用的。
- en: System architecture and design items follow much the same pattern, though it's
    possible for a story in an iteration to have architecture and/or design tasks
    too.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统架构和设计项目遵循相同的模式，尽管一个迭代中的故事也可能有架构和/或设计任务。
- en: 'The development process itself:'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发过程本身：
- en: '**Development**, obviously, happens during the Sprint.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显然，开发发生在冲刺期间。
- en: '**Quality** assurance activities generally also happen as part of the Sprint,
    being applied to each story as it''s deemed complete by the developers. If testing
    activities reveal issues, the story would go back to an **In-Development** status,
    or perhaps an earlier status, on the task board, and would be picked up and corrected
    as soon as possible.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质量保证活动通常也作为冲刺的一部分进行，应用于开发人员认为每个故事完成时。如果测试活动揭示问题，故事将回到“开发中”状态，或者可能是任务板上的较早状态，并将尽快进行修正。
- en: System integration and testing will probably happen during the Sprint as well,
    assuming that an environment is available to execute these activities with the
    new code.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统集成和测试也可能在冲刺期间进行，假设有环境可用于执行这些活动并使用新代码。
- en: '**Acceptance **can happen on a story-by-story basis as each story makes its
    way through all the QA and System Integration and Testing activities, or it can
    happen all at once at an end-of-Sprint demo-and-acceptance meeting.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验收可以在每个故事通过所有QA和系统集成和测试活动的基础上逐个故事进行，也可以在冲刺结束的演示和验收会议上一次性进行。
- en: It's not hard to see why Scrum is popular—from a developer's perspective, with
    disciplined planning and devoting care and attention to making sure that the developers'
    time is respected and realistically allocated, their day-to-day concerns reduce
    down to whatever they're working on at the moment. Given a mature team, who have
    a reasonably consistent skill set and a good working knowledge of the system and
    its code base, Scrum will be reasonably predictable from a business perspective.
    Finally, Scrum, if managed with care and discipline, is self-correcting—as issues
    or concerns arise, with the process, *or* with the system and code base to some
    extent, the *process* will provide mechanisms for addressing and correcting those
    items.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易理解为什么Scrum如此受欢迎——从开发者的角度来看，通过纪律性的规划和投入精心关注以确保开发人员的时间得到尊重和合理分配，他们的日常关注点减少到了他们当下正在处理的工作。在一个成熟的团队中，具有相对一致的技能和对系统及其代码库的良好工作知识，从业务角度来看，Scrum将是相当可预测的。最后，Scrum如果得到谨慎和纪律的管理，是自我纠正的——随着问题或关注点的出现，无论是与流程相关，还是在某种程度上与系统和代码库相关，流程都会提供解决和纠正这些问题的机制。
- en: Kanban
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kanban
- en: 'Kanban, as a process, has a lot of similarities to Scrum:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个流程，Kanban与Scrum有很多相似之处：
- en: The main unit of effort is a user story.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要工作单位是用户故事。
- en: Stories have the same sort of story-level process status, to the point where
    the same sort of task board, real or virtual, is used to track and provide visibility
    into work in progress.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故事具有相同类型的故事级别的流程状态，以至于相同类型的任务板，无论是真实的还是虚拟的，都用于跟踪和提供工作进行中的可见性。
- en: Stories should have all of their requirements and other relevant information
    ready and waiting before work on them commences. That implies that there is some
    sort of story grooming process, though it may not be as formally structured as
    the equivalent in Scrum.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开始工作之前，故事应该准备好所有的要求和其他相关信息。这意味着存在某种故事整理过程，尽管它可能没有Scrum中等效的形式化结构。
- en: 'Kanban, unlike Scrum:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 看板，与Scrum不同：
- en: Is not time-boxed—there is no Sprint.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有时间限制——没有冲刺。
- en: Does not expect or require the daily status/stand-up meeting, though it's a
    useful enough tool and is thus commonly adopted. Other variants and approaches,
    perhaps focusing first on blocked items, then concerns on in-progress items, then
    anything else, are also viable.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要求或期望每日状态/站立会议，尽管这是一个足够有用的工具，因此通常被采用。其他变体和方法，也许首先关注被阻止的项目，然后关注进行中的项目的问题，然后其他任何问题，也是可行的。
- en: Does not expect or require that stories be sized, though again it's a useful
    enough tool and is not uncommon, especially if it is a useful criterion for prioritizing
    stories for development.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要求或期望故事被规模化，尽管这是一个足够有用的工具，尤其是如果它是优先为开发故事进行规模化的标准。
- en: Kanban's primary focus might be described as an effort to minimize context changes,
    which plays out as working on single stories until they are complete before moving
    on to the next. This frequently results in prioritization of functionality by
    need, which lends itself well to situations where there are functional dependencies
    between stories.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Kanban的主要重点可以描述为努力减少上下文变化，这表现为在完成单个故事之前，不断地工作，然后再转移到下一个故事。这经常导致根据需求对功能进行优先排序，这在存在故事之间功能依赖关系的情况下非常适用。
- en: That working-until-complete focus is probably going to occur in a Scrum process
    as well, but it's not actually expected, since the goal in Scrum is to complete
    all stories in a Sprint, and assistance from others on the team to complete a
    story may well be necessary at any point to accomplish that goal.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scrum流程中，可能也会出现工作直到完成的重点，但实际上并不是期望的，因为Scrum的目标是在一个冲刺中完成所有故事，并且可能需要团队中其他人的帮助来在任何时候完成一个故事。
- en: 'Kanban''s entire process is very simple:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Kanban的整个流程非常简单：
- en: Stories (and their tasks) are made ready, and prioritized for work
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故事（及其任务）准备就绪，并为工作进行优先排序
- en: One or more developers selects a story, and works on it until it's complete,
    then repeats the process with another story, and another, and so on
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个或多个开发人员选择一个故事，并一直工作直到完成，然后再选择另一个故事，依此类推
- en: While development and work against current stories is underway, new stories
    are made ready and added to the stack of available work as details become available,
    and prioritized accordingly
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在进行开发和处理当前故事的工作时，新故事会随着细节的逐渐明确而准备就绪，并相应地进行优先排序
- en: 'Kanban, with different policies and procedures than Scrum, offers different
    advantages:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Kanban与Scrum有不同的政策和程序，提供了不同的优势：
- en: Kanban is fairly well-suited to efforts where there are significant silos of
    knowledge or expertise, since it's focused on completion of functionality, no
    matter how long it might take
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kanban非常适用于存在重要知识或专业技能孤立的工作，因为它专注于完成功能，无论需要多长时间。
- en: Kanban handles stories and functionality that are both large and not easily
    divisible into smaller logical or functional chunk, without having to go through
    the process of subdividing them into Sprint-sized chunks (but see the next section
    for the drawbacks of this)
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kanban处理的故事和功能既大又不容易分割成更小的逻辑或功能块，而无需经过将它们细分为冲刺大小块的过程（但请参见下一节对此的缺点）。
- en: Kanban limits Work In Progress directly, which reduces the likelihood of overworking
    developers, provided that the flow of the work is planned correctly and well
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kanban直接限制了进行中的工作，这减少了开发人员过度工作的可能性，前提是工作流程得到正确和良好的规划。
- en: Kanban allows the addition of new work by stakeholders at any point in time,
    and with any priority, though interruption of in-progress work is still best avoided
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kanban允许利益相关者随时添加新的工作，并具有任何优先级，尽管最好避免中断进行中的工作
- en: Provided that each story is independent and deliverable, each completed story
    is ready for installation or implementation as soon as it's been accepted
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只要每个故事都是独立的且可交付的，每个完成的故事在被接受后就可以立即安装或实施
- en: 'It also has its own set of caveats:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 它也有自己的一套注意事项：
- en: Kanban can be more prone to bottlenecks in development, particularly if there
    are large-scale or long-duration dependencies for subsequent stories—an example
    might be a data storage system that takes three weeks to complete—that is, there
    is a dependency for a number of small class structures that need it, which could
    be implemented in a few days if the data storage system were complete.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看板在开发中更容易出现瓶颈，特别是如果后续故事存在大规模或长期的依赖关系——例如，可能需要三周才能完成的数据存储系统，即对需要它的许多小类结构存在依赖，如果数据存储系统完成，这些结构可能在几天内就能实现。
- en: Since it doesn't really provide any concrete milestones at a higher level than
    individual stories, Kanban requires more direct and conscious effort to establish
    those milestones if they are needed for external business reasons.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于看板在高于个别故事的更高层次上并没有提供任何具体的里程碑，因此如果出于外部业务原因需要这些里程碑，就需要更直接和有意识的努力来建立这些里程碑。
- en: More conscious thought and effort are typically needed for functionality that
    is being developed in phases in a Kanban process for it to be efficient—any functionality
    that has **must-have**, **should-have**, and **nice-to-have** capabilities that
    are all going to be implemented, for example, needs to provide some awareness
    of, and guidance future phase goals from the beginning to remain efficient.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在看板流程中，通常需要更多的有意识的思考和努力来开发分阶段的功能，以使其更有效——例如，任何具有“必须具有”、“应该具有”和“可以具有”功能的功能都需要从一开始就提供对未来阶段目标的一些认识和指导，以保持高效。
- en: Kanban doesn't require that the team as a whole be aware of the design underlying
    the work, which can lead to misunderstandings, or even development efforts at
    cross-purposes. Making a conscious effort to **de-silo** design, and raise overall
    awareness of the larger-scale requirements may be needed, and it may not be apparent
    that it is needed at first.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看板不要求整个团队都了解工作的设计基础，这可能导致误解，甚至导致开发工作目标不一致。有意识地**打破**设计，并提高对更大规模需求的整体认识可能是必要的，而一开始可能并不明显。
- en: Kanban and the phases of the SDLC model
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 看板和SDLC模型的阶段
- en: 'Many Agile processes, especially those that use stories as a basic unit of
    effort or work, have a lot of similarities. Since most story-related items have
    been described in some detail in discussing Scrum, any later methodologies that
    use stories will only note variations on the themes:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 许多敏捷流程，特别是那些以故事作为基本工作单位的流程，有很多相似之处。由于在讨论Scrum时已经对大多数与故事相关的内容进行了详细描述，因此后续使用故事的其他方法只会注意到主题的变化：
- en: '**Before development starts:** Requirement analysis and definition, and system
    architecture and design, work in much the same way as they do in Scrum, and for
    many of the same reasons. The primary difference is that there is a less formal
    structure expected in Kanban to accomplish the attachment of requirements-and-architecture
    details to stories. It generally happens when there''s time and/or a perceived
    need, such as the development team being close to running out of workable stories.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发开始之前：**需求分析和定义，系统架构和设计的工作方式与Scrum中的工作方式基本相同，出于许多相同的原因。主要区别在于，看板中期望的结构较少正式，以实现将需求和架构细节附加到故事中。通常情况下，这种情况发生在有时间和/或认为有需要的情况下，例如开发团队接近可用故事的情况。'
- en: '**The development process itself:** Development and Quality Assurance processes
    are part of the flow of a given story as it''s being worked to completion. So,
    too is system integration and testing, and acceptance pretty much has to happen
    during a story''s life cycle, since there isn''t an end-of-Sprint meeting to demonstrate
    development results and acquire acceptance.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发过程本身：**开发和质量保证流程是故事完成过程中的一部分。系统集成和测试也是如此，接受基本上必须在故事的生命周期中发生，因为没有一个结束冲刺的会议来展示开发结果并获得接受。'
- en: With a less formal structure, fewer process rituals, and a readily-understandable
    just-in-time approach to its process, Kanban is easily understood, and reasonably
    easily managed. Some additional care at key points, and the ability to identify
    those key points, helps considerably in keeping things moving smoothly and well,
    but as long as the ability to recognize and address those key points improves
    over time, so too will the process.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 由于看板的结构较少正式，流程仪式较少，以及其流程的及时性易于理解，因此看板易于理解，且相对容易管理。在关键点上需要一些额外的关注，并且有能力识别这些关键点，有助于保持事情的顺利进行，但只要识别和解决这些关键点的能力随着时间的推移而提高，流程也会随之改善。
- en: Other Agile methodologies
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他敏捷方法
- en: Scrum and Kanban aren't the only two Agile methodologies, or even the only two
    worthy of consideration. Some others that are worth noting include Extreme Programming,
    as a free-standing methodology, and Feature and Test-Driven Development, either
    as standalone methodologies or, perhaps as mix-ins to some other methodology.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum和看板并不是唯一的两种敏捷方法，甚至也不是唯一值得考虑的两种方法。其他一些值得注意的方法包括极限编程作为一个独立的方法，以及特性驱动开发和测试驱动开发，可以作为独立的方法，也可以作为其他方法的混合物。
- en: Extreme programming
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 极限编程
- en: The most noticeable aspect of **Extreme Programming** (**XP**) is probably the
    **paired programming** approach, which can be an integral part of its implementation.
    The intention/expectation behind it is that two developers, using one computer,
    work on the code, which, ideally improves their focus, their ability to collaborate,
    solve any challenges more quickly, and allows for faster, better, and more reliable
    detection of potential risks that are inherent to the code being produced. In
    a paired scenario, the two developers alternate with some frequency between being
    the person writing the code and the person reviewing it as it's being written.
    Not all XP implementations use the paired approach, but when it's not in play,
    other processes, such as extensive and frequent code reviews and unit testing,
    are necessary to maintain at least some of the benefits that are lost by not using
    that option.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**极限编程**（**XP**）最显著的特点可能是**成对编程**方法，这可能是其实施的一个组成部分。其背后的意图/期望是，两名开发人员共用一台计算机编写代码，这理想情况下可以提高他们的专注力、合作能力，更快地解决任何挑战，并能更快、更好、更可靠地检测到潜在的风险，这些风险是固有于所生成的代码中的。在成对编程的情况下，两名开发人员在编写代码和审查代码的过程中会频繁交替。并非所有的XP实施都使用成对编程方法，但当它不适用时，其他流程，如广泛和频繁的代码审查和单元测试，是必要的，以至少保持部分因不使用该选项而丢失的好处。'
- en: XP as a methodology may not be able to handle highly complex code bases or highly
    complex changes to code bases without sacrificing some of its development velocity.
    It also tends to require more intensive planning and requirements than the more
    just-in-time approaches such as Scrum and Kanban, since the paired developers
    should, ideally, be able to work on code in as autonomous a fashion as they can
    manage. The more information the pair team has up-front, the less time they will
    have to spend trying to track down information they need, and the less disruption
    will occur to their efforts. XP doesn't really have any method for tracking progress,
    or keeping efforts and roadblocks visible, but adopting or bolting on something
    from some other methodology is certainly possible.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种方法论，XP可能无法处理高度复杂的代码库或对代码库的高度复杂更改，而不牺牲其开发速度的一部分。它也倾向于需要比Scrum和Kanban等更及时的方法更多的密集规划和需求，因为成对开发人员应该理想情况下能够尽可能自主地工作在代码上。成对团队拥有的信息越多，他们需要花费的时间就越少，而且对他们的努力造成的干扰也就越少。XP实际上没有任何跟踪进度或保持努力和障碍可见的方法，但可以采用或从其他方法中添加一些东西是完全可能的。
- en: Feature-driven development
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特征驱动开发
- en: The primary unit of work in a **Feature-Driven Development** (**FDD**) process
    is a feature. Those features are the end result of a detailed System Modeling
    effort, focusing on creating one-to-many domain models in significant detail,
    mapping out where features live in the system's domain, how (or if) they are expected
    to interact with each other—the sort of information that should come out of **use
    cases**, **data structures**, **flow** models, and **Interprocess Communication**
    models. Once the overall model is established, a feature list is constructed and
    prioritized, with a specific view to at least trying to keep the implementation
    time frame of each feature in the list at a reasonable maximum—two weeks seems
    to be the typical limit. If an individual feature is expected to take more than
    the longest acceptable time, it is subdivided until it can be accomplished and
    delivered in that time period.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '**特征驱动开发**（**FDD**）过程中的主要工作单元是一个特征。这些特征是详细系统建模工作的最终结果，重点是在显著细节上创建一对多的领域模型，绘制出特征在系统领域中的位置，它们如何（或是否）预期相互交互——这些信息应该来自**用例**、**数据结构**、**流**模型和**进程间通信**模型。一旦整体模型建立，就会构建并优先考虑特征列表，以至少尝试将列表中每个特征的实施时间框架保持在合理的最大限度内——两周似乎是典型的限制。如果一个单独的特征预计需要超过最长可接受的时间，就会将其细分，直到可以在该时间段内完成和交付。'
- en: Once the complete feature list is ready for implementation, iterations around
    completing those features are planned around a fixed time period. In each iteration,
    features or sets of features are assigned to developers, singly or in groups.
    Those developers work out a final implementation design, and review and refine
    it if needed. Once the design is deemed solid, development and testing of code
    to implement the design take place, and the resulting new code is promoted to
    the build- or distribution-ready code base for deployment.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完整的功能列表准备好进行实施，就会计划围绕固定时间周期完成这些功能的迭代。在每个迭代中，将功能或功能集分配给开发人员，单独或成组。这些开发人员制定最终的实施设计，并在需要时进行审查和完善。一旦设计被认为是稳固的，就会进行代码的开发和测试以实施设计，并将产生的新代码推广到构建或分发准备就绪的代码库进行部署。
- en: FDD goes hand-in-hand with several development best practices—automated testing,
    configuration management, and regular builds so that, if they aren't a full, formal
    **Continuous Integration** process, they are very close to being one. The feature
    teams are generally small, dynamically formed, and intended to have at least two
    individuals, at a minimum, on them, with the intention of promoting collaboration
    and early feedback, especially on a features' designs and implementation quality.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: FDD与几种开发最佳实践相辅相成——自动化测试、配置管理和定期构建，以便，即使它们不是完整的、正式的**持续集成**过程，它们也非常接近。特征团队通常很小，动态形成，并且至少应该有两个人员，以促进协作和早期反馈，特别是在特征的设计和实施质量上。
- en: FDD may be a good option for large and complex systems—by breaking work down
    into small, manageable features, even development in the context of very large,
    very complex systems is going to be maintainable with a good success rate. The
    processes around getting any individual feature up and running are simple and
    easily understood. Barring occasional check-ins to make sure that development
    isn't stalling for some reason, FDD is very lightweight and non-intrusive. Feature
    teams will usually have a lead developer associated with them, who has some responsibility
    for coordinating the development efforts and refining implementation details when
    and if needed. That does mean, however, that the lead developer is less likely
    to contribute to the actual code, particularly if they are spending much of their
    time executing coordination or design-refinement efforts, or mentoring other members
    of the team.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: FDD可能是大型和复杂系统的一个很好的选择——通过将工作分解为小的可管理的功能，即使在非常大型、非常复杂的系统的情况下，开发也将是可维护的，并且成功率很高。围绕让任何个体功能运行起来的过程是简单且易于理解的。除了偶尔的签入以确保开发不会因某种原因而停滞外，FDD非常轻量级且不会干扰。功能团队通常会有一个与之相关的首席开发人员，负责协调开发工作并在必要时完善实施细节。然而，这意味着首席开发人员不太可能为实际代码做出贡献，特别是如果他们大部分时间都在执行协调或设计完善工作，或者指导团队的其他成员。
- en: Test-driven design
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动设计
- en: '**Test-Driven Design** (**TDD**), as might be expected from its name, is focused
    first and foremost on using automated tests of a code base to direct development
    efforts. The overall process breaks down into the following steps:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试驱动设计**（**TDD**），顾名思义，首先专注于使用代码库的自动化测试来指导开发工作。整个过程分解为以下步骤：'
- en: 'For each functionality goal (new or enhanced feature) being implemented:'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于正在实现的每个功能目标（新功能或增强功能）：
- en: Write a new test or set of tests that will fail until the code being tested
    meets whatever contract and expectations are being tested.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个新的测试或一组测试，直到被测试的代码满足被测试的任何合同和期望为止。
- en: Assure that the new test(s) fail, as expected, for the reasons expected, and
    don't raise any other failures.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保新的测试按预期失败，不会因其他原因失败。
- en: Write code that passes the new test(s). It may be horribly **kludgy** and inelegant
    initially, but this doesn't matter as long as it meets the requirements embedded
    in the test(s).
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写通过新测试的代码。最初可能非常笨拙和不优雅，但只要满足测试中嵌入的要求，这并不重要。
- en: Refine and/or re-factor the new code as needed, retesting to assure that the
    tests still pass, moving it to an appropriate location in the code base if necessary,
    and generally making sure that it meets whatever other standards and expectations
    are present for the code base as a whole.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据需要对新代码进行改进和/或重构，重新测试以确保测试仍然通过，将其移动到代码库中的适当位置（如果需要），并确保它满足代码库作为整体的其他标准和期望。
- en: Run all tests to prove that the new code still passes the new tests, and that
    no other tests fail as a result of the new code.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行所有测试，以证明新代码仍然通过新测试，并且没有其他测试因新代码而失败。
- en: 'TDD offers some obvious benefits as a process:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: TDD作为一个过程提供了一些明显的好处：
- en: All code in a system will be tested, and have a full suite of regression tests,
    at a minimum
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统中的所有代码都将进行测试，并至少具有完整的回归测试套件
- en: Since the primary goal of writing the code is just to pass the tests created
    for it, code will frequently be just enough to achieve that, which usually results
    in smaller, and easier-to-manage code bases
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于编写代码的主要目标只是通过为其创建的测试，因此代码通常只能足够实现这一目标，这通常会导致更小、更易管理的代码库
- en: Similarly, TDD code tends to be more modular, which is almost always a good
    thing, and in turn that generally lends itself to better architecture, which also
    contributes to more manageable code
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样，TDD代码往往更加模块化，这几乎总是一件好事，而且通常会导致更好的架构，这也有助于更易管理的代码
- en: 'The main trade-off, also obviously, is that the test suites have to be created
    and maintained. They will grow as the system grows, and will take longer and longer
    periods of time to execute, though significant increases will (hopefully) take
    a while before they manifest. Creation and maintenance of test suites take time,
    and is a discipline all to itself—some argue that writing good tests is an art
    form, even, and there''s a fair amount of truth to that. On top of that, there''s
    a tendency to look for the wrong sort of metrics to show how well tests perform:
    metrics such as code coverage, or even just the number of individual test cases,
    which indicate nothing about the quality of the tests.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的权衡，显然也是，测试套件必须被创建和维护。随着系统的增长，它们将变得越来越庞大，并且执行起来需要更长的时间，尽管显著的增加（希望）需要一段时间才能显现。创建和维护测试套件需要时间，这本身就是一种纪律——有人认为编写良好的测试是一种艺术形式，甚至有相当多的真理。除此之外，人们倾向于寻找错误的度量标准来显示测试的表现如何：例如代码覆盖率，甚至只是单个测试用例的数量，这些指标并不表示测试的质量。
- en: Development paradigms
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发范式
- en: Programming, when it first appeared, was often limited by hardware capabilities
    and the higher-level languages that were available at the time for simple procedural
    code. A program, in that paradigm, was a sequence of steps, executed from beginning
    to end. Some languages supported subroutines and perhaps even simple function-definition
    capabilities, and there were ways to, for example, loop through sections of the
    code so that a program could continue execution until some termination condition
    was reached, but it was, by and large, a collection of very brute-force, start-to-finish
    processes.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 编程在最初出现时，通常受到硬件能力和当时可用的简单过程代码的高级语言的限制。在那种范式中，程序是一系列步骤，从头到尾执行。一些语言支持子程序，甚至可能支持简单的函数定义功能，还有一些方法，例如循环遍历代码的部分，以便程序可以继续执行，直到达到某种终止条件，但总的来说，这是一系列非常蛮力的，从头到尾的过程的集合。
- en: As the capabilities of the underlying hardware improved over time, more sophisticated
    capabilities started to become more readily available—formal functions as they
    are generally thought of now, are more powerful , or at least have a flexible
    loop and other flow control options, and so on. However, outside a few languages
    that were generally accessible only inside the halls and walls of Academia, there
    weren't many significant changes to that procedural approach in mainstream efforts
    until the 1990s, when Object-Oriented Programming first started to emerge as a
    significant, or even dominant paradigm.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 随着基础硬件能力随着时间的推移不断改进，更复杂的功能开始变得更容易获得——正式的函数现在通常被认为更强大，或者至少具有灵活的循环和其他流程控制选项等。然而，除了一些通常只在学术界的大厅和墙壁内才能获得的语言外，在主流努力中，直到20世纪90年代，当面向对象编程首次开始成为重要甚至主导范式时，程序化方法并没有发生太多重大变化。
- en: 'The following is an example of a fairly simple procedural program that asks
    for a website URL, reads the data from it, and writes that data to a file:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个相当简单的程序化程序的示例，它要求输入一个网站的URL，读取其数据，并将该数据写入文件：
- en: '[PRE0]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Object-oriented programming
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程
- en: The distinctive feature of Object-Oriented Programming is (no great surprise)
    that it represents data and provides functionality through instances of objects.
    Objects are structures of data, or collections of attributes or properties, that
    have related functionality (methods) attached to them as well. Objects are constructed
    as needed from a class, through a definition of the properties and methods that,
    between them, define what an object is, or has, and what an object can do. An
    OO approach allows programming challenges to be handled in a significantly different,
    and usually more useful, manner than the equivalents in a procedural approach,
    because those object instances keep track of their own data.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程的独特特点是（毫不奇怪）它通过对象的实例来表示数据并提供功能。对象是数据结构或属性的集合，它们具有相关的功能（方法）附加到它们上。对象根据需要从类构造，通过定义属性和方法，它们共同定义了对象是什么，或者拥有什么，以及对象能做什么。面向对象的方法允许以一种显著不同且通常更有用的方式处理编程挑战，因为这些对象实例会跟踪自己的数据。
- en: 'The following is the same functionality as the simple procedural example shown
    previously, but written using an Object-Oriented approach:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与之前显示的简单程序化示例相同的功能，但使用面向对象的方法编写：
- en: '[PRE1]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Although this performs the exact same task, and in the exact same fashion as
    far as the user is concerned, underneath it all is an instance of the `PageReader`
    class that does all the actual work. In the process, it stores various data, which
    could be accessed as a member of that instance. That is, the `page_reader.url`,
    `page_reader.local_file`, and `page_reader.page_data` properties all exist and
    could be retrieved and used if there were a need to retrieve that data, and the
    `page_reader.get_page_data` method could be called again to fetch a fresh copy
    of the data on the page. It''s important to note that the properties are attached
    to the instance, so it''d be possible to have multiple instances of `PageReader`,
    each with it''s own data, that can all do the same things with their own data.
    That is, if the following code were executed:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这执行的是与用户所关心的完全相同的任务，以完全相同的方式，但在其背后的是一个执行所有实际工作的`PageReader`类的实例。在此过程中，它存储各种数据，可以作为该实例的成员进行访问。也就是说，`page_reader.url`、`page_reader.local_file`和`page_reader.page_data`属性都存在，如果需要检索这些数据，可以检索并使用`page_reader.get_page_data`方法再次调用以获取页面上的新数据。重要的是要注意这些属性附加到实例上，因此可以拥有多个`PageReader`实例，每个实例都有自己的数据，可以使用自己的数据执行相同的操作。也就是说，如果执行以下代码：
- en: '[PRE2]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It would yield the following output:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 将产生以下输出：
- en: '![](assets/bbdc41ff-19c3-4bdd-9c75-fc09be9e6ff2.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bbdc41ff-19c3-4bdd-9c75-fc09be9e6ff2.png)'
- en: 'Object-Oriented design and implementation make the development of a complex
    system, with the attendant complex interactions, considerably easier a fair portion
    of the time, though it may not be a panacea for all development challenges and
    efforts. If the basic principles of good OO designs are adhered to, however, they
    will usually make code easier to write, easier to maintain, and less prone to
    breakage. A full discussion of OO design principles is well beyond the scope of
    this book, but some of the more fundamental ones that can cause a lot of difficulty
    if they aren''t adhered to are as follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象的设计和实现使得开发复杂系统以及相关复杂交互的工作在很大程度上变得更容易，尽管它可能并非所有开发挑战和努力的灵丹妙药。然而，如果遵循良好的面向对象设计原则，通常会使代码更易编写、更易维护，且更不容易出错。面向对象设计原则的全面讨论远远超出了本书的范围，但如果不遵循一些更基本的原则，可能会导致许多困难，其中一些原则如下：
- en: Objects should have a **Single Responsibility**—each should do (or represent)
    one thing, and do so well
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象应该具有**单一责任**——每个对象应该只做（或代表）一件事，并且做得很好
- en: Objects should be **open** for extension but **closed** for modification—changes
    to what an instance actually does, unless it's a new functionality that flat-out
    doesn't exist, should not require modification to the actual code
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象应该对扩展**开放**，但对修改**关闭**——除非是全新的功能，否则对实例的更改不应该需要修改实际代码
- en: Objects should **encapsulate** what varies—it shouldn't require the use of an
    object to know anything about how it does and what it does, just that it can do
    it
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象应该**封装**变化的部分——不应该需要使用对象来了解它是如何做和做什么的，只需要知道它可以做到
- en: Use of objects should be exercises in programming to an interface, not to an
    implementation—this is a complex topic that's worth some detailed discussion,
    with some substance and context, so it'll be looked at in some detail in [Chapter
    9](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=375&action=edit),
    *Testing the Business-Objects*, while working out the architecture of the `hms_sys`
    project
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象的使用应该是对接口的编程练习，而不是对实现的编程练习——这是一个复杂的主题，值得进行一些详细讨论，并提供一些实质和背景，因此在[第9章](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=375&action=edit)中会进行详细讨论，*测试业务对象*，同时制定`hms_sys`项目的架构
- en: Functional programming
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式编程
- en: '**Functional Programming** (**FP**) is a development approach centered around
    the concept of passing control through a series of pure functions, and avoiding
    shared state and mutable data structures. That is, the majority of any real functionality
    in FP is wrapped in functions that will always return the same output for any
    given input, and don''t modify any external variables. Technically, a pure function
    should not write data to anywhere—neither logging to a console or file, nor writing
    to a file—and how the need for that sort of output is accommodated is a discussion
    well outside the scope of this book.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数式编程**（**FP**）是一种围绕通过一系列纯函数传递控制的开发方法，避免共享状态和可变数据结构的概念。也就是说，在FP中，大部分真正的功能都包装在函数中，对于任何给定的输入，它们总是返回相同的输出，并且不修改任何外部变量。从技术上讲，纯函数不应该向任何地方写入数据——无论是记录到控制台或文件，还是写入文件——如何满足这种输出需求是一个远超出本书范围的讨论。'
- en: 'The following is the same functionality that was in the previous two examples,
    but written using a Functional Programming approach (if only barely, since the
    task it''s performing isn''t all that complex):'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前两个示例中的相同功能，但是使用了函数式编程方法进行编写（即使只是勉强，因为它执行的任务并不是那么复杂）：
- en: '[PRE3]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Again, this code performs the exact same function, and it does so with the same
    discrete steps/processes as the previous two examples. It does so, however, without
    having to actually store any of the various data it's using—there are no mutable
    data elements in the process itself, only in the initial input to the `process_page`
    function, and even then, it's not usefully mutable for very long. The main function,
    `process_page`, also doesn't use any mutable values, just the results of other
    function calls. All of the component functions return something, even if it's
    only a `None` value.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这段代码执行的是完全相同的功能，并且它与前两个示例一样以相同的离散步骤/过程执行。然而，它这样做，而不必实际存储它正在使用的各种数据——在过程本身中没有可变数据元素，只有在`process_page`函数的初始输入中，即使如此，它也不会长时间保持可变状态。主函数`process_page`也不使用任何可变值，只是其他函数调用的结果。所有的组件函数都会返回一些东西，即使只是`None`值。
- en: Functional Programming is not a new paradigm, but it hasn't become widely accepted
    until relatively recently. It has the potential to be as fundamentally disruptive
    as Object-Oriented Programming was. It's also different, in many respects, so
    that making a transition to it might well be difficult—it relies, after all, on
    substantially different approaches, and on a stateless basis that is very atypical
    in or of other modern development paradigms. That stateless nature, though, and
    the fact that it enforces a rigid sequence of events during execution, have the
    potential to make FP-based code and processes much more stable than their OO or
    procedural counterparts.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程并不是一种新的范式，但直到相对最近才被广泛接受。它有可能像面向对象编程一样具有根本性的颠覆性。它也不同，从许多方面来看，因此转向它可能会很困难——毕竟，它依赖于完全不同的方法，并且在现代其他开发范式中或者说是基于一个非常不典型的无状态基础。然而，这种无状态的特性，以及它在执行过程中强制执行严格的事件顺序，有可能使基于FP的代码和过程比它们的面向对象或过程化的对应物更加稳定。
- en: Development practices
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发实践
- en: 'At least two post-development process automation practices have arisen, either
    as a result of some incremental development methodologies, or merely at the same
    time: Continuous Integration and Continuous Delivery (or Deployment).'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 至少有两种后开发过程自动化实践已经出现，要么是作为一些增量开发方法的结果，要么仅仅是同时出现的：持续集成和持续交付（或部署）。
- en: Continuous integration
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成
- en: '**Continuous Integration **(**CI**), in its simplest description, is a repeatable,
    automated process for merging new or altered code into a common, shared environment,
    either on some sort of timed basis, or as a result of some event such as committing
    changes to a source control system. Its primary goal is to try and detect potential
    integration problems as early in the code promotion or deployment process as possible,
    so that any issues that arise can be resolved before they are deployed to a live,
    production branch. In order to implement a CI process, regardless of any tools
    that might be used to control or manage it, there are a few prerequisites:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**），简单来说，是将新的或修改的代码合并到一个共享环境中的可重复自动化过程，无论是在某种定时基础上，还是作为一些事件的结果，比如提交更改到源代码控制系统。其主要目标是尽早在代码推广或部署过程中检测潜在的集成问题，以便在部署到实时生产分支之前解决任何出现的问题。为了实施CI过程，无论使用何种工具来控制或管理它，都有一些先决条件：'
- en: Code needs to be maintained in a version control system of some sort, and there
    should be, ideally, one and only one branch that a CI process will execute against.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码需要在某种版本控制系统中进行维护，并且理想情况下，应该有一个且仅有一个CI进程将执行的分支。
- en: The build process should be automated, whether it fires off on a predetermined
    schedule, or as a result of a commit to the version control system.
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建过程应该是自动化的，无论是按照预定的时间表触发，还是作为对版本控制系统的提交的结果。
- en: 'As part of that build process, all automated tests (unit tests in particular,
    but any integration or system tests that can be usefully executed should at least
    be considered for inclusion) should execute. When those test fire off may be worth
    discussing, since there may be two or more windows of opportunity, and they both
    have their advantages:'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为构建过程的一部分，所有自动化测试（特别是单元测试，但任何可以有用地执行的集成或系统测试至少应该被考虑包含）都应该执行。关于何时执行这些测试可能值得讨论，因为可能有两个或更多的机会窗口，它们都有各自的优势：
- en: Tests executed before the commit and build is complete, if the tools and processes
    can either prevent the commit or build, or roll a commit back to its last good
    state on a test failure, will prevent code that fails its tests from being committed.
    The trade-off in this scenario is that it's possible that conflicting changes
    from two or more code change sources might be significantly tangled and need correspondingly
    significant attention to remedy. Additionally, if the offending code cannot be
    committed, that may make it difficult to hand off the offending code to a different
    developer who might well be able to solve the issue quickly.
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果工具和流程可以防止提交或构建，或者在测试失败时将提交回滚到其上一个良好状态，那么在提交和构建完成之前执行测试将防止未通过测试的代码被提交。在这种情况下的权衡是可能会导致两个或更多代码更改源的冲突变化显著混乱，并且需要相应重要的注意力来解决。此外，如果有问题的代码无法提交，那可能会使将有问题的代码移交给可能能够快速解决问题的不同开发人员变得困难。
- en: Tests that execute after a build will allow code that's failed one or more tests
    to be committed to the collective code base, but with known issues at a minimum.
    Depending on the shape and scope of those issues, it might well break the build—and
    that can be disruptive to the whole team's productivity.
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建后执行的测试将允许已经失败了一个或多个测试的代码被提交到集体代码库，但至少已知存在问题。根据这些问题的形状和范围，它可能会破坏构建——这可能会对整个团队的生产力造成破坏。
- en: Some sort of notification process needs to be in place to alert developers that
    there is an issue—particularly if the issue resulted in a broken build.
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要建立某种通知流程，以提醒开发人员存在问题——特别是如果问题导致构建失败。
- en: The process needs to assure that every commit is tested and successfully buildable.
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该过程需要确保每个提交都经过测试并成功构建。
- en: The results of a successful build need to be made available in some fashion—whether
    through some sort of scripted or automated deployment to a specific testing environment,
    making an installer for the new build available for download, or whatever other
    mechanism best suits the product's, team's, or stakeholders' needs.
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成功构建的结果需要以某种方式提供——无论是通过某种脚本化或自动化部署到特定的测试环境，使新构建的安装程序可供下载，还是任何其他最适合产品、团队或利益相关者需求的机制。
- en: 'With these in place, the rest of the process is just a case of working out
    some of the process rules and expectations, and implementing, monitoring, and
    adjusting them when/if needed:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，流程的其余部分只是解决一些流程规则和期望，并在需要时实施、监控和调整它们：
- en: When should commits happen? Daily? At the end of development of a story, feature,
    or whatever unit of work might apply?
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交应该何时发生？每天？在故事、功能或任何适用的工作单元的开发结束时？
- en: How quickly does the commit-test-build process need to run? What steps can be
    taken, if any, to keep it quick enough to be useful?
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交-测试-构建过程需要多快才能运行？如果有的话，可以采取哪些步骤使其足够快以便有用？
- en: Continuous delivery or deployment
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付或部署
- en: '**Continuous Delivery or Deployment** (**CD**) is a natural extension or offshoot
    of the CI process, taking each successful build, collecting all of the components
    involved, and either deploying it directly (typically for web and cloud-resident
    applications and systems), or taking whatever steps would be necessary to make
    the new build available for deployment—creating a final, end user or production-ready
    installation package, for example—but not actually deploying it.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续交付或部署**（**CD**）是CI过程的自然延伸或衍生，它将每个成功的构建收集所有涉及的组件，并直接部署它（通常用于Web和云驻留应用程序和系统），或者采取必要的步骤使新构建可用于部署——例如创建最终的、面向最终用户或生产就绪的安装包，但实际上不部署它。'
- en: A complete CD process will allow for the creation, update, or recreation of
    a production system based solely on information in a source control system. It
    also likely involves some **Configuration Management **and **Release Management **tools
    at the system administration side, and those may well impose specific requirements,
    functionally or architecturally, or both, on a system's design and implementation.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的CD过程将允许仅基于源代码控制系统中的信息创建、更新或重新创建生产系统。它还可能涉及一些**配置管理**和**发布管理**工具在系统管理方面，并且这些工具可能会对系统的设计和实施施加特定的要求，无论是在功能上还是在架构上，或者两者兼而有之。
- en: Summary
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: These last several chapters have hopefully given you at least a glimpse into
    all of the moving parts (outside the actual writing of code) in development efforts
    that are useful to be aware of in software engineering. The odds are good that
    any given team or company will have selected which methodology, and what pre-
    and post-development processes are going to be in play. Even so, knowing what
    to expect from them, or what might be causes for concern while working within
    their various combined contexts, is useful information, and often one of the expectations
    that divide programmers from software engineers.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这几章至少让你对在软件工程中有用的开发工作中的所有流动部分（除了实际编写代码之外）有所了解。很可能任何一个团队或公司都会选择哪种方法论，以及在开发前和开发后的过程中会发挥什么作用。即便如此，了解它们会带来什么期望，或者在其各种组合背景下工作时可能引起关注的原因，都是有用的信息，通常是程序员和软件工程师之间的期望之一。
- en: With all of that said and out of the way, it's time to start looking in more
    depth and detail at the meat of any combination of these—the development processes
    themselves. To do that, we need a system—a project to work on.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 说了这么多，现在是时候更深入地看待这些组合的核心内容了——开发过程本身。为了做到这一点，我们需要一个系统——一个要处理的项目。
