- en: Giving Voice to Jarvis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 给Jarvis赋予声音
- en: Ever wondered whether using robots to get our work done is possible? Well yes!
    Certainly in some high-tech fiction or Marvel movies or even comic books. So,
    get your seat belt tight and get ready for this amazing chapter where you will
    actually be implementing what I just mentioned.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否想过使用机器人来完成我们的工作是否可能？嗯，是的！当然在一些高科技小说、漫威电影甚至漫画书中是可能的。所以，系好你的安全带，准备好进入这个令人惊叹的章节，你将实际实施我刚才提到的事情。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Basic installation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本安装
- en: Automatic delivery answering machine
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动应答机
- en: Making an interactive door answering robot
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作一个交互式门应答机器人
- en: Making Jarvis understand our voice
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让Jarvis理解我们的声音
- en: Basic installation
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本安装
- en: There are various ways and methods through which we can control our smart home
    Jarvis, some of which we have explored earlier such as controlling it through. So,
    to start with, we need to prepare our system to be able to do speech synthesis;
    to do that, let's perform the following process.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法和途径可以控制我们的智能家居Jarvis，其中一些我们在之前已经探索过，例如通过控制它。因此，为了开始，我们需要准备我们的系统以便能够进行语音合成；为了做到这一点，让我们执行以下过程。
- en: 'First, go to the terminal and enter the following command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，转到终端并输入以下命令：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What this will do is install the dependency `alsa-utils`. The `alsa-utils` package
    contains various utilities that are useful for controlling your sound drivers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装依赖项`alsa-utils`。`alsa-utils`包包含各种有用的工具，可用于控制你的声音驱动程序。
- en: 'Once this is done, you need to edit the file. To do it, we need to open the
    file. Use the following command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，你需要编辑文件。为了做到这一点，我们需要打开文件。使用以下命令：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once that is done, a file will open; at the bottom of that file, you need to
    add the following line:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，一个文件将打开；在该文件的底部，你需要添加以下行：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You don't need to get too much into why we are doing it. It's just there to
    set things up. I can give you an explanation; however, I do not wish to bore you
    at this exciting moment.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要太深入地了解我们为什么要做这件事。它只是用来设置一些基础。我可以给你一个解释；然而，我不希望在这么激动人心的时刻让你感到无聊。
- en: Also, if you are lucky, then sometimes, you might find the line to be already
    present. If that is the case, then let it be there and don't touch it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你很幸运的话，有时你可能会发现这一行已经存在。如果是这样，那就让它在那里，不要去动它。
- en: Now, to play the sounds that we need the Jarvis to say, we need an audio player.
    No, not the one that you have at your home. We are talking about the software
    that would play it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了播放Jarvis需要说的声音，我们需要一个音频播放器。不，不是你家里有的那个。我们说的是能够播放它的软件。
- en: 'To install the player, we need to run the following commands:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装播放器，我们需要运行以下命令：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'All right, we are done with audio player; let''s see what we have next. Now,
    again, we need to edit the file of the media player. We will use the same steps
    to open the file and edit it:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经完成了音频播放器的设置；让我们看看接下来是什么。现在，再次，我们需要编辑媒体播放器的文件。我们将使用相同的步骤来打开和编辑文件：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will open the file. As before, simply add the following line:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开文件。和之前一样，只需添加以下行：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, we need to give it some voice, so run the following command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要给它一些声音，所以运行以下命令：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will install a 16 kHz, British, male, voice to Jarvis. We love British
    accents, don't we?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为Jarvis安装一个16 kHz、英国男性声音。我们喜欢英国口音，不是吗？
- en: 'Perfect. Once we have done all of the steps mentioned previously, we would
    be good to go. To test the voice, simply connect a USB speaker to the Raspberry
    Pi and run the following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 完美。一旦我们完成了之前提到的所有步骤，我们就可以开始了。为了测试声音，只需将USB扬声器连接到树莓派，并运行以下代码：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'All right then, let''s see what we have actually done:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，让我们看看我们实际上已经做了什么：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you might have figured out, we are importing the library named `os`. This
    library provides a way of using operating-system-dependent functionality:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所想，我们正在导入名为`os`的库。这个库提供了一种使用操作系统依赖功能的方法：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, we are using a method called `system()`; what this does is that it executes
    a shell command. You might be wondering what this is. A shell command is a command
    used by the user to access the functionality of a system to interact with it.
    So now that we want to convert our text to voice, we would be providing two arguments
    to this function. First, what is the text? In our case, it is `Hello from the
    other side`; the second argument that we have here is `festival --tts`. Now `festival`
    is a library, and `tts` stands for text to speech conversion. So when we pass
    it on to the argument, the system will know that the text passed on to the argument
    has to be converted from text to speech.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了一个名为 `system()` 的方法；这个方法的作用是执行一个shell命令。你可能想知道这是什么。shell命令是用户用来访问系统功能并与系统交互的命令。所以现在，我们想要将我们的文本转换为语音，我们将向这个函数提供两个参数。首先，文本是什么？在我们的例子中，它是
    `Hello from the other side`；这里的第二个参数是 `festival --tts`。现在 `festival` 是一个库，而 `tts`
    代表文本到语音转换。所以当我们传递给参数时，系统将知道传递给参数的文本需要从文本转换为语音。
- en: And that's it! Yes, that's it. That's all we have to do to make your Raspberry
    speak.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！是的，就是这样。这就是我们让树莓派说话所需要做的全部。
- en: Automatic delivery answering machine
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动投递应答机
- en: 'These days, we all order things online. Yet no matter how automated the process
    of Amazon is, when talking about 2018, we still have humans delivering the packages
    to our doorsteps. Sometimes, you want them to know a few things about where to
    leave the parcel. Now that we are becoming more and more automated, gone are the
    days when you might leave a note outside your gate. It''s time to make something
    really interesting with our technology. To do that, we hardly need to do anything
    serious. All we need to do is to wire up the components as shown in the following
    diagram:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些天，我们都在网上订购东西。然而，无论亚马逊的过程多么自动化，当我们谈到2018年时，我们仍然有人将包裹送到我们的家门口。有时，你希望他们知道一些关于在哪里留下包裹的事情。现在我们变得越来越自动化，那些可能在你门口留下便条的日子已经过去了。是时候用我们的技术做一些真正有趣的事情了。为了做到这一点，我们几乎不需要做什么严肃的事情。我们只需要按照以下图示连接组件：
- en: '![](img/8c510d45-0f99-45ac-a675-5a2769835770.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8c510d45-0f99-45ac-a675-5a2769835770.png)'
- en: The PIR sensor must be placed so that it gives a logic high whenever there is
    movement around the gate.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: PIR传感器必须放置在门周围有移动时给出逻辑高电平的位置。
- en: 'Once that is done, go ahead and upload the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，请上传以下代码：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now what we have done is very simple. As soon as the PIR sensor gives a logic
    high, a certain instruction is spoken. There is no need of an explanation. You
    can refer to the previous code if you need any clarification.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们所做的是非常简单的。一旦PIR传感器给出逻辑高电平，就会发出一定的指令。这里不需要解释。如果你需要任何澄清，可以参考之前的代码。
- en: Making an interactive door – answering robot
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作一个交互式门应答机器人
- en: In the previous chapter we have used a PIR sensor to sense any human activity,
    however the problem with the sensor is, that no matter who comes or leaves it
    would deliver the same message. That basically means that even when you come home
    after a long day, it would end up asking the same question. Pretty dumb huh?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用PIR传感器来感应任何人类活动，然而，这个传感器的问题在于，无论谁来或离开，它都会传达相同的信息。这基本上意味着，即使你在漫长的一天后回到家，它也会提出同样的问题。不是很愚蠢吗？
- en: So in this chapter we would use the previous repository and integrate the vision
    and the voice together to make an amazing duo. In this, the camera would identify
    who is on the gate and would recognize if it is a human and a stranger, if so
    then, it would deliver the message you intend to give. On the other hand if its
    you then it would simply let you pass with a simple greeting. However if the face
    is detected but not recognized then it would give a set of instructions to the
    person standing in-front of the camera.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将使用之前的仓库，将视觉和语音集成在一起，以创造一个惊人的组合。在这里，摄像头将识别门上是谁，并识别是否是人或陌生人，如果是的话，它将传达你想要传达的信息。另一方面，如果你是那个人，它将简单地用一个简单的问候让你通过。然而，如果检测到人脸但没有识别出来，它将向站在摄像头前的人给出一系列指令。
- en: 'To implement it all you need to do is to set up a camera on the gate of your
    door along with the PIR. The PIR is basically to activate the camera. In other
    words the camera would not get activated till the time no movement is detected.
    This set up is very straight forward and does not need any GPIO to be used. Simply
    fix the camera and PIR and upload the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一切，你只需要在门上设置一个带有PIR（被动红外探测器）的摄像头。PIR基本上是用来激活摄像头的。换句话说，只有在检测到没有运动时，摄像头才会被激活。这个设置非常简单，不需要使用任何GPIO。只需固定摄像头和PIR，然后上传以下代码：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding code, we are creating a cascade classifier using the method
    `CascadeClassifier` so that faces can be detected by the camera.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在使用`CascadeClassifier`方法创建一个级联分类器，以便摄像头可以检测到人脸。
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code, we are reading the frames from the camera using `VideoCapture(0)`
    method of `cv2`. Also, the face recognizer is being created to recognize a particular
    face.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在使用`cv2`的`VideoCapture(0)`方法从摄像头读取帧。同时，正在创建人脸识别器以识别特定的人脸。
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now read the data from the camera using `cam.read()` as done in the previous
    code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用`cam.read()`从摄像头读取数据，就像在之前的代码中所做的那样。
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The images are converted into gray color. Then, `faceDetect.detectMultiScale()`
    will be using the gray color-converted images.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图像被转换为灰色。然后，`faceDetect.detectMultiScale()`将使用灰度转换后的图像。
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As the face is detected, the part of the image containing the face will be
    converted into gray and passed to a predict function. This method will tell if
    the face is known or not, it also returns the ID if the face is identified. Suppose
    the person is `BEN`, then Jarvis would say `Hello, welcome to my house BEN`. Now
    `BEN` can tell the Jarvis to turn on the lights, and the Jarvis would respond
    as the wake word Jarvis gets activated. And if the person is not recognized, then
    maybe it was a delivery boy. Then, the following commands get executed:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当检测到人脸时，包含人脸的图像部分将被转换为灰色并传递给预测函数。这种方法将告诉人脸是否为人所知，如果人脸被识别，它还会返回ID。假设这个人是`BEN`，那么Jarvis会说“你好，欢迎来到我的家，BEN”。现在`BEN`可以告诉Jarvis打开灯光，当唤醒词Jarvis被激活时，Jarvis会做出响应。如果人脸没有被识别，那么可能是一个快递员。然后，以下命令将被执行：
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Making Jarvis understand our voice
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让Jarvis理解我们的声音
- en: Voice is an essence of communication. It helps us transfer huge amounts of data
    in a very short period of time. It is certainly faster and easier than typing.
    Hence, more and more companies are working toward making systems that understands
    human voice and language and work according to them. It is certainly not easy
    because of the huge variations that are present in the language; however, we have
    come a considerable distance. So without much time, let's make our system get
    ready to recognize our voice.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 声音是沟通的精髓。它帮助我们非常快速地在短时间内传输大量数据。它当然比打字快且容易。因此，越来越多的公司正在努力开发能够理解人类声音和语言并据此工作的系统。这当然不容易，因为语言中存在巨大的变化；然而，我们已经取得了相当大的进步。所以，让我们在不浪费太多时间的情况下，让我们的系统准备好识别我们的声音。
- en: So here, we would be using an API from Google Voice. As you may know, Google
    is really good at understanding what you say. Like, very literally. So it makes
    sense to use their API. Now, the way it works is very simple. We capture the voice,
    and we convert it into the text. Then, we compare if the text is similar to something
    we have defined in the configuration file. If it matches with anything, the bash
    command associated with it will be executed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这里我们将使用Google Voice的API。正如你可能知道的，谷歌在理解你说的话方面真的很擅长。比如，非常字面地。所以使用他们的API是有意义的。现在，它的工作方式非常简单。我们捕捉声音，并将其转换为文本。然后，我们比较文本是否与我们配置文件中定义的内容相似。如果匹配，则执行与之关联的bash命令。
- en: 'First, we need to check whether the microphone is connected. To do that, run
    the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要检查麦克风是否已连接。为此，运行以下命令：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This command will show you a list of devices connected on USB. If you see yours
    on the list, then thumbs up, you are on the right track. Otherwise, try finding
    it with the connection or maybe try another hardware.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将显示连接到USB的设备列表。如果你在列表中看到了你的设备，那么恭喜你，你走对了路。否则，尝试通过连接找到它，或者也许尝试使用其他硬件。
- en: 'We also need to set the recording volume to high. To do this, go ahead and
    type the following command on the serial:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将录音音量设置为高。为此，请在串行上输入以下命令：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now once the GUI pops on to the screen, toggle the volume using the arrow keys.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦GUI出现在屏幕上，就可以使用箭头键切换音量。
- en: 'It''s best to hear the sound recorded by yourself rather than directly giving
    it down to the Raspberry. To do that first, we need to record our voice, so we
    need to run the following command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最好是亲自听一下录制的声音，而不是直接将其传给树莓派。为此，我们首先需要录制我们的声音，所以我们需要运行以下命令：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will check whether the webcam is on the list. Then, write the following
    command to record:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这将检查摄像头是否在列表中。然后，输入以下命令进行录制：
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The sound will be recorded with the following name, `First.wav`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 声音将以以下名称记录，`First.wav`。
- en: 'Now we would also like to listen to what we just recorded. The simple way to
    do that is by typing the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们还想听听我们刚才录制的声音。最简单的方法是输入以下命令：
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Check whether the voice is correct. If not, then you are free to make any adjustments
    to the system.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 检查声音是否正确。如果不正确，那么你可以自由地对系统进行任何调整。
- en: 'Once we are done with checking the sound and the microphone, it''s time to
    install the real software for the job. There are simple ways with which you can
    do it. The following is a list of commands that you need to run:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们检查完声音和麦克风，就是时候安装实际的工作软件了。有一些简单的方法可以做到这一点。以下是你需要运行的命令列表：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now when you run this, very interesting things will start to happen. It will
    start to ask you various questions. Some of them will be straightforward. You
    can use your right mind to give the answers to it in the form of yes or no. Others
    could be very technical. As these questions might change over time, there seems
    to be no need to explicitly mention the answers that you need to fill, but as
    a general rule of thumb—Give it a yes unless it's something you really want to
    say no to.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当你运行这个程序时，一些非常有趣的事情将会开始发生。它将开始问你各种问题。其中一些将是直接的。你可以用你的理智以是或否的形式回答它。其他问题可能非常技术性。由于这些问题可能会随时间而变化，似乎没有必要明确指出需要填写的答案，但作为一个一般性的规则——除非你真的想说不，否则就给它一个肯定回答。
- en: 'Perfect then, we have installed the software. Now before you go any further
    in that software, let''s go ahead and write the following programs:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 完美，我们已经安装了软件。现在在你进一步使用该软件之前，让我们先写下以下程序：
- en: '[PRE23]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Whenever this program runs, the light that is connected on PIN number `2` will
    be turned on. Also, it will read out `LIGHTS TURNED ON`. Save this file with the
    name `lighton.py`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 无论何时运行此程序，连接在PIN编号`2`上的灯将会点亮。同时，它将读出`LIGHTS TURNED ON`。将此文件保存为`lighton.py`：
- en: '[PRE24]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Similarly, in this program, the light would be turned off and it would read
    out `LIGHTS TURNED OFF`. Save it by the name `lightoff.py`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在这个程序中，灯将会关闭，并且它会读出`LIGHTS TURNED OFF`。将其保存为`lightoff.py`：
- en: '[PRE25]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now we are doing the same thing for the fan as well. In this one, the fan will
    be switched on; save it with the name `fanon.py`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们也对风扇做了同样的事情。在这个程序中，风扇将会打开；将其保存为`fanon.py`：
- en: '[PRE26]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: I don't need to explain the same thing for this do I? As you will have guessed,
    save it with the name `fanoff.py`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我不需要解释同样的事情，对吧？正如你所猜想的，保存为`fanoff.py`。
- en: 'All right! When all of this is done, then type the following command to check
    whether the software is installed properly:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 好的！当这一切都完成之后，然后输入以下命令来检查软件是否正确安装：
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Raspberry Pi responds to the wake word `pi`; let''s change it to `jarvis`.
    All these changes can be made after opening the configuration file using the following
    command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派对唤醒词`pi`做出响应；让我们将其更改为`jarvis`。所有这些更改都可以在通过以下命令打开配置文件后进行：
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In that file, enter the commands of your own. Here, let''s add the following
    code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个文件中，输入你自己的命令。这里，让我们添加以下代码：
- en: '[PRE29]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now for each command, define the action. The action would be to run the Python
    file that contains the code for switching the lights and fan on or off. The code
    is basic and simple to understand. Add the following to the file:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在对于每个命令，定义动作。动作将是运行包含切换灯和风扇开关代码的Python文件。代码是基本且易于理解的。将以下内容添加到文件中：
- en: '[PRE30]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now, let's see what we have done. Whenever you say <q>Jarvis, light on</q>, it
    will convert your speed to text, compare it with the program that it has to run
    corresponding to it and will do whatever is there in the program. Hence, in this
    program, whenever we say <q>Light on,</q> the lights will be turned on and similarly
    for the rest of the commands as well. Remember to make it listen to what you are
    saying. You would have to say the word, <q>Jarvis,</q> which will make it attentive
    to the commands and ready to listen.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们完成了什么。每当你说 `<q>Jarvis，开灯</q>`，它就会将你的速度转换为文本，将其与它必须运行的相应程序进行比较，并执行程序中的任何操作。因此，在这个程序中，每当我说
    `<q>开灯</q>`，灯光就会打开，其余的命令也是如此。记得让它倾听你说的话。你将不得不说出单词 `<q>Jarvis</q>`，这将让它对命令保持警觉并准备好倾听。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we understood how to interact and make the Jarvis work according
    to our needs. If this chapter was about verbal communication, then the next chapter
    is about gesture recognition where, using advanced capacitive techniques, you
    will be able to control your automation system just by waving at it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了如何交互并让Jarvis根据我们的需求工作。如果本章是关于口头交流，那么下一章就是关于手势识别，在那里，通过使用先进的电容技术，你只需挥动手臂就能控制你的自动化系统。
