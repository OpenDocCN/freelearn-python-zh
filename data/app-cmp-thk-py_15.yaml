- en: '*Chapter 12*: Using Python in Experimental and Data Analysis Problems'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第12章*：在实验和数据分析问题中使用Python'
- en: 'In this chapter, we will take a look at how Python can help us understand and
    analyze data using algorithms and libraries created specifically for data analysis
    and data science. We will first go through experimental data and then move on
    to algorithms that use two main libraries: **NumPy** and **pandas**.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看Python如何帮助我们使用专门用于数据分析和数据科学的算法和库来理解和分析数据。我们将首先介绍实验数据，然后转向使用两个主要库**NumPy**和**pandas**的算法。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Defining experimental data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义实验数据
- en: Using data libraries in Python
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Python中使用数据库
- en: Understanding data analysis with Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python进行数据分析
- en: Using additional libraries for plotting and analysis
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用额外的库进行绘图和分析
- en: By the end of this chapter, you will be able to define types of experiments,
    data gathering, and how computational thinking helps when designing models and
    solutions. You will also learn how to use data libraries, particularly, **NumPy**,
    **pandas**, and **Matplotlib**, to help in analyzing and displaying data. Finally,
    you'll be able to design algorithms that help with data analysis in order to learn
    from existing data.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够定义实验类型、数据收集以及计算思维在设计模型和解决方案时的帮助。您还将学习如何使用数据库，特别是**NumPy**、**pandas**和**Matplotlib**，来帮助分析和显示数据。最后，您将能够设计算法，以帮助数据分析，以便从现有数据中学习。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will need to install the latest version of Python for running the code in
    this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装最新版本的Python来运行本章中的代码。
- en: You will also need to have a few libraries installed, including **NumPy**, **pandas**,
    **Matplotlib**, and **Seaborn**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要安装一些库，包括**NumPy**、**pandas**、**Matplotlib**和**Seaborn**。
- en: You may choose to use an integrated environment to run Python, such as **Anaconda**,
    which can simplify the library dependencies and is helpful in organizing your
    algorithm in notebooks.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择使用集成环境来运行Python，例如**Anaconda**，它可以简化库依赖关系，并有助于在笔记本中组织您的算法。
- en: 'The source code used in this chapter can be found in the GitHub repository
    here: [https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter12](https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter12)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的源代码可以在GitHub存储库中找到：[https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter12](https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python/tree/master/Chapter12)
- en: Defining experimental data
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义实验数据
- en: '*We''re finally at the data chapter of this book*. *We all have our biases
    and areas where we just love to live in. This is one of mine*. There are many
    reasons why data is so important, but let''s start with the fact that data, how
    we collect it, how we analyze it, and how we present it has a massive impact on
    our daily lives.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们终于到了本书的数据章节*。*我们都有自己的偏见和喜欢生活的领域。这是我的其中之一*。数据如此重要的原因有很多，但让我们从这样一个事实开始，即数据、我们如何收集它、如何分析它以及如何呈现它对我们的日常生活有巨大影响。'
- en: When writing algorithms to display information, we have a responsibility to
    share that data in the least biased way possible, making sure that our data is
    inclusive and representative of our communities and our people. I wanted to make
    sure I said that before we talk about the topic in as much depth as a chapter
    will allow me to. For me, this is how I fell in love with code and Python.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写算法以显示信息时，我们有责任以尽可能少的偏见方式分享数据，确保我们的数据包容和代表我们的社区和人民。在我们深入讨论这个话题之前，我想确保我说过这些话。对我来说，这就是我如何爱上代码和Python的方式。
- en: In this section, we're going to go over experimental data, defining what it
    is as well as key terms used when working with experimental data.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论实验数据，定义它是什么，以及在处理实验数据时使用的关键术语。
- en: Now, let's get started. **Experimental data** is a term that gets its use from
    science and engineering. However, we also use experimental data in other areas,
    such as education, civics, and much more. Experimental data includes the methodology,
    how we measure data, the design of the experiments we are conducting, and how
    we present the data we gather and analyze from those designs. For the purposes
    of this chapter, we're not designing the experiments. We're going to be focusing
    on how we use Python to analyze existing data. But it is important to note that,
    if we have a say in the experiment, we need to make sure we are designing it fairly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始吧。**实验数据**是一个从科学和工程中得到应用的术语。然而，我们也在其他领域使用实验数据，比如教育、公民事务等。实验数据包括方法论，我们如何测量数据，我们正在进行的实验的设计，以及我们如何呈现我们从这些设计中收集和分析的数据。在本章中，我们不是在设计实验。我们将专注于如何使用Python来分析现有数据。但是重要的是要注意，如果我们对实验有发言权，我们需要确保公平地设计它。
- en: If the experimental design and the data collection methods are sound, then the
    data we use and analyze will be much more helpful than if we begin with a biased
    experiment. While we can never eliminate bias completely, as researchers and developers,
    it is our responsibility to present data with the least amount of bias possible.
    *Why is this important?* Think of all the policy changes that happen based on
    data, graphs, and information presented from experiments. If the experiments are
    biased to begin with, the results will lead to policies that may not adequately
    encompass the needs of a community, for example.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实验设计和数据收集方法是合理的，那么我们使用和分析的数据将比如果我们从一个有偏见的实验开始要更有帮助。虽然我们永远无法完全消除偏见，但作为研究人员和开发人员，我们有责任以尽可能少的偏见方式呈现数据。*为什么这很重要？*想想所有基于数据、图表和实验呈现的信息而发生的政策变化。如果实验从一开始就有偏见，结果将导致可能无法充分包容社区需求的政策，例如。
- en: When working with data, we are always using computational thinking elements.
    As we tackle problems, we have to define what the problems are, what we want to
    study, how we want to measure it, how we'll be able to create and generalize the
    patterns, and what algorithm we'll need to use to produce the best representations
    of our data. Everything we do in data analysis benefits from us using computational
    thinking elements.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理数据时，我们总是在使用计算思维元素。在解决问题时，我们必须定义问题是什么，我们想要研究什么，我们想要如何衡量它，我们将如何能够创建和推广模式，以及我们需要使用什么算法来产生数据的最佳表示。我们在数据分析中所做的一切都受益于我们使用计算思维元素。
- en: Data science is a growing field in **STEM**. In 2017, it was named the fastest-growing
    field in the US. The US Bureau of Labor Statistics stated that there is an estimated
    11.5 million new jobs expected in data science and statistics by 2026\. Currently,
    there are more jobs available than qualified candidates.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学是**STEM**领域中不断增长的领域。2017年，它被称为美国增长最快的领域。美国劳工统计局表示，预计到2026年，数据科学和统计领域将新增1150万个新工作岗位。目前，可用的工作岗位比合格的候选人更多。
- en: Now, let's look at how Python lets us tackle data.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看Python如何让我们处理数据。
- en: 'In experimental data, we want to gather information using independent, dependent,
    and control variables:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在实验数据中，我们希望使用自变量、因变量和控制变量收集信息：
- en: '**Independent variables** are variables that are changed or controlled by the
    researcher.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自变量**是由研究人员改变或控制的变量。'
- en: '**Dependent variables** are variables that are being measured or tested by
    the researcher; dependent variables *depend* on independent variables.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**因变量**是由研究人员测量或测试的变量；因变量*依赖于*自变量。'
- en: '**Control variables** are variables or factors in the experiment that must
    remain the same.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制变量**是实验中必须保持不变的变量或因素。'
- en: Let's look at a simple example of these variables in an experiment. A common
    example involves the study of plant growth. The independent variables can be one
    or multiple variables. For our example, our independent variable will be the amount
    of fertilizer we add to the plants. The plant growth will be a dependent variable.
    The **control** will not get any fertilizer, just water. So, in our experiment,
    let's say we have five plants that we will be measuring. One plant will only get
    water. That's our **control**. The other four will have varying levels of fertilizer
    added to them. Those are our **experimental** plants. The growth is **dependent**
    on the amount of fertilizer.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个实验中这些变量的简单例子。一个常见的例子涉及植物生长的研究。自变量可以是一个或多个变量。对于我们的例子，我们的自变量将是我们添加到植物中的肥料量。植物生长将是一个因变量。**对照组**将不会得到任何肥料，只有水。因此，在我们的实验中，假设我们有五棵植物要测量。一棵植物只会得到水。那就是我们的**对照组**。其他四棵将添加不同水平的肥料。那些是我们的**实验**植物。生长是依赖于肥料的数量的。
- en: 'When we design experiments, there are three things we want to be true: that
    they are reliable, valid, and can be generalized. Here''s what each of these things
    means:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 设计实验时，我们希望有三个条件成立：可靠性、有效性和可推广性。以下是这些条件的含义：
- en: '**Reliable** relates to the consistency of the measurements. This means that
    if we mimic the conditions, our results should be reliably similar.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性**与测量的一致性有关。这意味着如果我们模仿条件，我们的结果应该是可靠地相似的。'
- en: '**Valid** relates to whether or not the experiment measured what it intended
    to measure.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有效性**与实验是否测量了其意图测量的内容有关。'
- en: '**Generalizable** relates to the results being something that can be generalized
    and applied to other settings.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可推广性**与结果是否能够推广并应用到其他环境有关。'
- en: There is a lot more detail and depth we could go into about experiments, but
    we are only looking at what happens once we have the data for this chapter. It
    is important to understand these basic terms for when we are involved in the design
    of the experiments. As developers, depending on our roles, that may be the case.
    For example, in a start-up, everyone may be involved in all aspects of product
    development. So, in those instances, we could be working on the experiment and
    also the subsequent analysis algorithms.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 关于实验，我们还可以深入了解更多细节和深度，但在本章中，我们只关注在获得数据后会发生什么。了解这些基本术语对于我们参与实验设计是很重要的。作为开发人员，根据我们的角色，可能会出现这种情况。例如，在初创公司中，每个人可能都参与产品开发的各个方面。因此，在这些情况下，我们可能会参与实验以及随后的分析算法。
- en: For now, let's move on to what we can do with data analysis and how Python libraries
    can help us achieve what we need when analyzing the experiment results.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续讨论数据分析可以做什么，以及Python库如何帮助我们实现分析实验结果所需的内容。
- en: Using data libraries in Python
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python中的数据库
- en: In this section, we're going to take a look at some libraries and packages that
    we can use with the Python programming language. We refer to *packages* and *libraries*,
    using both terms interchangeably sometimes, but for clarity, a package contains
    modules, while a library is a collection of packages.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看一些可以与Python编程语言一起使用的库和包。我们有时使用*包*和*库*这两个术语来交替使用，但为了清晰起见，一个包包含模块，而一个库是包的集合。
- en: We use Python libraries much like we use modules that are built-in, such as
    the `math` module we first used in [*Chapter 4*](B15413_04_Final_SK_ePub.xhtml#_idTextAnchor071),
    *Understanding Logical Reasoning*. In our source code, we imported the `math`
    module by using `import math` before creating the algorithm. In the example under
    the *Applying inductive reasoning* section of [*Chapter 4*](B15413_04_Final_SK_ePub.xhtml#_idTextAnchor071),
    *Understanding Logical Reasoning*, we used the `math.floor()` function of the
    module, which allowed us to round a number down, regardless of what the decimal
    value was. When we import modules or libraries in Python, we are tapping into
    additional functions and capabilities that allow us to take the programming language
    much further.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Python库就像使用内置的模块一样，比如我们在[*第4章*](B15413_04_Final_SK_ePub.xhtml#_idTextAnchor071)中首次使用的`math`模块，*理解逻辑推理*。在我们的源代码中，我们在创建算法之前使用`import
    math`导入了`math`模块。在[*第4章*](B15413_04_Final_SK_ePub.xhtml#_idTextAnchor071)的*应用归纳推理*部分的示例中，我们使用了该模块的`math.floor()`函数，这使我们能够将一个数字向下舍入，而不管其小数值是多少。当我们在Python中导入模块或库时，我们正在利用额外的功能和能力，使我们能够更深入地使用编程语言。
- en: '*So, what is a library?* In Python, a **library** refers to chunks of code
    that can be reused. Libraries contain a collection of modules. There are many
    libraries available for Python, and like Python itself, a large number of the
    libraries are **open source**, which means they can be downloaded and used by
    anyone. Because we''re going to be working with data in this chapter, we''re going
    to stick with pandas, NumPy, and Matplotlib for now. However, there are many other
    libraries and many types of libraries. For example, there are **Graphical User
    Interface** (**GUI**) frameworks, such as **Kivy**, **tkinter**, **PyQt**, **PySimpleGUI**,
    and others. For gaming, there are other libraries, such as **Pygame** and **Pyglet**.
    In machine learning, the **TensorFlow** library is a popular tool developed by
    **Google** in collaboration with the **Brain** team. But these are only some examples
    of the libraries available and the areas that use them.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是库？在Python中，**库**指的是可以重复使用的代码块。库包含一系列模块。Python有许多可用的库，就像Python本身一样，许多库都是**开源**的，这意味着任何人都可以下载和使用它们。因为我们将在本章中处理数据，所以现在我们将继续使用pandas、NumPy和Matplotlib。然而，还有许多其他库和许多类型的库。例如，有**图形用户界面**（**GUI**）框架，如**Kivy**、**tkinter**、**PyQt**、**PySimpleGUI**等。对于游戏，还有其他库，如**Pygame**和**Pyglet**。在机器学习中，**TensorFlow**库是由**Google**与**Brain**团队合作开发的一种流行工具。但这只是一些可用库和使用它们的领域的例子。
- en: Installing libraries
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装库
- en: Although the `math` module is built into the Python language, libraries need
    to be installed. In **Python 3.9**, the program we use to install libraries is
    the **pip** **installer**. This is a command built into Python and run from the
    **Command Prompt** window. One caveat I will mention here is that permissions
    and where we install Python matter, so if your computer belongs to your employer,
    make sure that the Python program paths are adapted as needed so that you can
    access all modules and install libraries. The permissions may vary.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`math`模块是内置在Python语言中的，但库需要安装。在**Python 3.9**中，我们用来安装库的程序是**pip** **安装程序**。这是一个内置在Python中并从**命令提示符**窗口运行的命令。我在这里要提到的一个警告是，权限和我们安装Python的位置很重要，所以如果你的计算机属于你的雇主，请确保Python程序路径已根据需要进行调整，以便你可以访问所有模块并安装库。权限可能会有所不同。
- en: In my case, while my main computer does not belong to me, I have administrator
    access to it, so I can run my Command Prompt as an administrator and run `pip`
    from there.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，虽然我的主要计算机不属于我，但我有管理员权限，所以我可以以管理员身份运行我的命令提示符，并从那里运行`pip`。
- en: 'The following screenshot shows an installation of the `sympy` Python library.
    As you can see, using the `pip install sympy` command installs the library onto
    our system. For the record, `sympy` is a symbolic math library available for Python.
    Since I have the other libraries we''ll be using already installed, I had to show
    the installation for a package I hadn''t yet installed on my machine:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了安装`sympy` Python库。如你所见，使用`pip install sympy`命令将库安装到我们的系统上。值得一提的是，`sympy`是Python可用的符号数学库。由于我已经安装了我们将要使用的其他库，我必须展示一个我还没有在我的计算机上安装的包的安装：
- en: '![Figure 12.1 – Installing a Python library'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.1 – 安装Python库'
- en: '](image/Figure_12.01_B15413.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_12.01_B15413.jpg)'
- en: Figure 12.1 – Installing a Python library
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – 安装Python库
- en: 'If you''re trying to install a library that you''ve already installed—for example,
    if I tried to install pandas again—you''ll get a **Requirement already satisfied**
    message, such as the one shown in the following screenshot. Notice that the user
    information will be filled in with your user, not blacked out as shown in the
    screenshot, and this also shows the location where the library package can be
    found on your system:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你试图安装一个你已经安装过的库，例如如果我再次尝试安装pandas，你会收到一个**已满足要求**的消息，就像下面截图中显示的那样。请注意，用户信息将被填入你的用户，而不是像截图中显示的那样被涂黑，这也显示了库包在你的系统上的位置：
- en: '![Figure 12.2 – Requirement already satisfied message'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.2 – 已满足要求的消息'
- en: '](image/Figure_12.02_B15413.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_12.02_B15413.jpg)'
- en: Figure 12.2 – Requirement already satisfied message
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 已满足要求的消息
- en: You may also wish to use Anaconda, which is an open source distribution of the
    Python and R programming languages. When Anaconda is installed, you can use the
    `CMD.exe` prompt window to install your libraries using `conda install` or `pip
    install`. The Jupyter notebook included in the Anaconda navigator can run and
    save your Python programs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还希望使用Anaconda，这是Python和R编程语言的开源发行版。安装了Anaconda后，你可以使用`CMD.exe`提示窗口使用`conda
    install`或`pip install`来安装你的库。Anaconda导航器中包含的Jupyter笔记本可以运行和保存你的Python程序。
- en: There are more programs and packages included in the Anaconda distribution program
    and they can simplify how we interact with the Python programming language. It's
    a great resource if you are doing extensive coding.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda发行版程序中包含了更多的程序和包，它们可以简化我们与Python编程语言的交互方式。如果你进行大量编码，这是一个很好的资源。
- en: If you haven't done so already, this would be a good time to install the NumPy,
    pandas, and Matplotlib libraries before we start using them in analyzing and displaying
    data and creating models.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，现在是一个安装NumPy、pandas和Matplotlib库的好时机，在我们开始使用它们来分析和显示数据以及创建模型之前。
- en: Using NumPy and pandas
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用NumPy和pandas
- en: '**NumPy**, like so many of the libraries in Python and the Python programming
    language itself, is an open source library. NumPy is used for multi-dimensional
    arrays and matrix data structures. Python itself doesn''t have arrays; it has
    lists. So, libraries can be used to provide that capability for our algorithms.
    When we have multiple elements of the same type, we can use a data structure to
    save them – that is, an **array**.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**NumPy**，就像Python中的许多库和Python编程语言本身一样，是一个开源库。NumPy用于多维数组和矩阵数据结构。Python本身没有数组；它有列表。因此，库可以用来为我们的算法提供这种能力。当我们有多个相同类型的元素时，我们可以使用数据结构来保存它们
    - 也就是**数组**。'
- en: The `pandas` library is used to analyze data and is built on the `numpy` package.
    The pandas and NumPy libraries are often used together. When we need graphical
    models, we add a third library, Matplotlib, or another similar library. In this
    chapter, we're going to stick with Matplotlib.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: pandas库用于分析数据，构建在numpy包的基础上。pandas和NumPy库经常一起使用。当我们需要图形模型时，我们会添加第三个库，Matplotlib，或者其他类似的库。在本章中，我们将继续使用Matplotlib。
- en: 'When we import libraries, we can import them as the whole name, `numpy` in
    this case, or we can shorten them for ease of use. If we want to import the library,
    we can use `import numpy`. Let''s say we wanted to create an array of the numbers
    from `0` to `11`. We can use `numpy` to organize that by combining the `arange`
    and `reshape` functions. Let''s take a look at the code snippet:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们导入库时，我们可以将它们作为整个名称导入，比如在这种情况下是`numpy`，或者我们可以缩短它们以方便使用。如果我们想要导入库，我们可以使用`import
    numpy`。假设我们想要创建一个从`0`到`11`的数字数组。我们可以使用`numpy`通过组合`arange`和`reshape`函数来组织它。让我们看一下代码片段：
- en: ch12_abbreviate.py
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: ch12_abbreviate.py
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice that we imported `numpy as np` instead of just `numpy`. That means that
    I can now call the NumPy functions using `np` instead of having to type `numpy`
    each time.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们导入的是`numpy as np`，而不是只有`numpy`。这意味着我现在可以使用`np`来调用NumPy函数，而不必每次都输入`numpy`。
- en: 'Tip:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：
- en: Please note that `np` is a standard abbreviation of NumPy, so you may see it
    often. You can import NumPy as anything, any name, but `np` is the standard convention.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`np`是NumPy的标准缩写，所以你可能经常看到它。你可以将NumPy导入为任何名称，但`np`是标准约定。
- en: 'In the preceding snippet, we are asking the algorithm to split the list of
    numbers from `0` to `11` into `2` rows of `6` elements each. Then, we print the
    array to see our result. Take a look at the output:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码片段中，我们要求算法将从`0`到`11`的数字列表分成`2`行，每行`6`个元素。然后，我们打印数组以查看我们的结果。看一下输出：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see, we start at `0`, which is our lower bound in the range `0`
    to `12`. We have two rows now, with six numbers in each of the two rows. *We do
    not include 12*. If we had tried to do `0` to `13`, we wouldn''t be able to reshape
    our array because we cannot evenly split 13 numbers. We would have gotten the
    following traceback error (most recent call last):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们从`0`开始，这是我们在范围`0`到`12`中的下限。现在我们有两行，每行有六个数字。*我们不包括12*。如果我们尝试做`0`到`13`，我们将无法重塑我们的数组，因为我们无法均匀地分割13个数字。我们将得到以下回溯错误（最近的调用最后）：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Recall that your information will be different where you see the ellipses (`…`).
    It will have your file location, or path, based on how your Python is set up.
    For example, your file location may be something like `C:/Users/JohnSmith/Documents/ch12_abbreviate.py`.
    This should replace the file location in the preceding code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当你看到省略号（`…`）时，你的信息将会不同。它将根据你的Python设置有你的文件位置或路径。例如，你的文件位置可能类似于`C:/Users/JohnSmith/Documents/ch12_abbreviate.py`。这应该替换前面代码中的文件位置。
- en: As you can see from the `ValueError` message, we cannot reshape an array into
    the `(2, 6)` shape because we'd have one number left over.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如`ValueError`消息所示，我们无法将数组重塑为`(2, 6)`形状，因为我们会有一个多余的数字。
- en: 'Now, let''s take a look at a pandas `DataFrame`. We use `DataFrames` so that
    we can manipulate our data in rows and columns. Let''s take a look at an example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一个pandas的`DataFrame`。我们使用`DataFrame`来以行和列的方式操作我们的数据。让我们看一个例子：
- en: ch12_pdDataFrame.py
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ch12_pdDataFrame.py
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Notice that we created a dictionary with value pairs for the names and numbers
    of our contacts. After doing so, we saved our address book as `DataFrame`, which
    will organize our information in tabular form. Finally, we printed our address
    book. Take a look at the output:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们创建了一个带有联系人姓名和号码值对的字典。这样做之后，我们将我们的通讯录保存为`DataFrame`，它将以表格形式组织我们的信息。最后，我们打印了我们的通讯录。看一下输出：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that pandas used the information from the dictionary to create the labels
    for our columns. We did not give it information for labeling our rows, so the
    numbers `0` to `4` were automatically used by Python and pandas. The algorithm
    resulted in a table that provides the names and numbers in our address book.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，pandas使用字典中的信息来为我们的列创建标签。我们没有为行标签提供信息，所以Python和pandas自动使用了`0`到`4`的数字。该算法生成了一个表格，提供了我们通讯录中的姓名和号码。
- en: As you can see, pandas and NumPy simply add more capabilities to Python. Before
    we move on to Matplotlib, notice that we haven't really seen actual data analysis
    yet. We'll get to that soon. Right now, we know how to use our libraries and that
    we can use them to organize and analyze data. Let's talk quickly about Matplotlib
    and then move on to an example where we can use a data file to do some analysis.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，pandas和NumPy只是为Python增加了更多的功能。在我们转向Matplotlib之前，请注意我们还没有真正看到实际的数据分析。我们很快就会看到。现在，我们知道如何使用我们的库，以及我们可以使用它们来组织和分析数据。让我们简要地谈一下Matplotlib，然后转向一个例子，我们可以使用一个数据文件来进行一些分析。
- en: Using Matplotlib
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Matplotlib
- en: 'As we mentioned in the previous section, pandas and NumPy do not provide a
    visual representation or visual model for our data. In order to create graphs
    from our data, we can use the Matplotlib library in Python. Much like we imported
    the pandas and NumPy libraries as `pd` and `np`, respectively, we can also shorten
    Matplotlib. The full library contains multiple modules. We''ll use the `pyplot`
    module a lot. The most commonly used abbreviation for `Matplotlib.pyplot` is `plt`.
    If we''re calling Matplotlib, we usually abbreviate that as `mlt`. Let''s take
    a look at a quick sample:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一节中提到的，pandas和NumPy并不提供我们数据的可视表示或可视模型。为了从我们的数据创建图表，我们可以使用Python中的Matplotlib库。就像我们将pandas和NumPy库分别导入为`pd`和`np`一样，我们也可以缩短Matplotlib。完整的库包含多个模块。我们将经常使用`pyplot`模块。`Matplotlib.pyplot`的最常用的缩写是`plt`。如果我们在调用Matplotlib，我们通常将其缩写为`mlt`。让我们快速看一个示例：
- en: ch12_matplotlib.py
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ch12_matplotlib.py
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice that this particular library has an even longer name than `matplotlib`.
    To import the library, we have to import it using `matplotlib.pyplot`. Imagine
    having to write all that every time we need it in an algorithm. *No thanks!* Instead,
    we import it as `plt`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个特定的库的名字甚至比`matplotlib`还要长。要导入这个库，我们必须使用`matplotlib.pyplot`来导入它。想象一下，每次在算法中需要它时都要写这么长的名字。*不，谢谢！*
    相反，我们将它导入为`plt`。
- en: 'Now, let''s take a look at the second line in the code snippet. We''re creating
    a plot that matches each of the numbers in the first list to the numbers in the
    second list. So, we have three coordinate pairs: `(0, 4)`, `(3, 5)`, and `(6,
    6)`. The output when using this code isn''t just a line of output; it''s a plot.
    Now, the algorithm creates that plot in the second line of the preceding code
    snippet.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下代码片段中的第二行。我们正在创建一个图表，将第一个列表中的每个数字与第二个列表中的数字匹配。因此，我们有三个坐标对：`(0, 4)`，`(3,
    5)`和`(6, 6)`。使用这段代码时的输出不仅仅是一行输出；它是一个图表。现在，算法在前面代码片段的第二行创建了该图表。
- en: 'But it won''t show it to you unless you tell it that''s what you want. Think
    of the `show()` function as our `print()` function in Python. Unless we tell the
    algorithm that we want to see something, the algorithm will perform the task in
    the background but won''t show it to us. The following graph shows the output
    for this algorithm:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 但除非你告诉它你想要的，否则它不会向你显示。把`show()`函数想象成Python中的`print()`函数。除非我们告诉算法我们想要看到什么，否则算法会在后台执行任务但不会向我们显示。以下图表显示了这个算法的输出：
- en: '![Figure 12.3 – Matplotlib sample graph'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.3 – Matplotlib示例图'
- en: '](image/Figure_12.03_B15413.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_12.03_B15413.jpg)'
- en: Figure 12.3 – Matplotlib sample graph
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – Matplotlib示例图
- en: 'Now, as you can see, the graph itself is already helpful. We can see that this
    is a linear relationship defined by those points. But notice that the bottom of
    the screen gives you some options. The home icon at the bottom left will reset
    your graph at any time to its original window. The **Zoom** function, shown in
    the following screenshot, allows us to select a piece of the graph that we want
    to look at more closely:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，正如你所看到的，图表本身已经很有帮助。我们可以看到这是由这些点定义的线性关系。但请注意屏幕底部给出了一些选项。左下角的主页图标可以在任何时候将您的图表重置为其原始窗口。**缩放**功能，如下面的截图所示，允许我们选择我们想要更仔细查看的图表部分：
- en: '![Figure 12.4 – Zoom feature of Matplotlib'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.4 – Matplotlib的缩放功能'
- en: '](image/Figure_12.4_B15413.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_12.4_B15413.jpg)'
- en: Figure 12.4 – Zoom feature of Matplotlib
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – Matplotlib的缩放功能
- en: Notice that the left graph shows our selection for the piece of the graph we
    wanted to take a closer look at. Then, the graph on the right is only showing
    us the values we selected. Matplotlib also allows us to configure subplots and
    navigate with the arrows back and forth between multiple representations. For
    example, if I were to click on the left arrow on the graph after zooming, it would
    take me back to the previous representation. Clicking the **Home** button takes
    me back to the original graph.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，左侧的图表显示了我们选择的我们想要仔细观察的图表部分。然后，右侧的图表只显示了我们选择的值。Matplotlib还允许我们配置子图，并在多个表示之间使用箭头来导航。例如，如果我在放大后点击图表上的左箭头，它会将我带回到先前的表示。点击**Home**按钮会将我带回到原始图表。
- en: Of course, this is not the only type of graph or representation Matplotlib allows.
    This is just a tiny glimpse into visual representations.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这并不是Matplotlib允许的唯一类型的图表或表示。这只是对可视化表示的一个小小的窥视。
- en: 'Tip:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：
- en: 'An additional resource for the types of plots available is available here:
    [https://matplotlib.org/3.3.2/tutorials/introductory/sample_plots.html](https://matplotlib.org/3.3.2/tutorials/introductory/sample_plots.html).'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有关可用图表类型的其他资源可以在这里找到：[https://matplotlib.org/3.3.2/tutorials/introductory/sample_plots.html](https://matplotlib.org/3.3.2/tutorials/introductory/sample_plots.html)。
- en: In this section, we learned about the Matplotlib library. We learned how to
    create a simple plot and how we can zoom into sections of our graphs from the
    outputs when we create our graphics.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了Matplotlib库。我们学习了如何创建一个简单的图表，以及在创建图形时如何从输出中放大我们图表的部分。
- en: Now that we know how to access our libraries and what each can do for us, let's
    take a look at how we use them to analyze data.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何访问我们的库以及每个库可以为我们做什么，让我们看看如何使用它们来分析数据。
- en: Understanding data analysis with Python
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Python数据分析
- en: In the previous section, we introduced some of the libraries that we can use
    to analyze data in Python. In this section, we will be looking at one example
    and multiple code snippets to build a bar graph using real data and Matplotlib,
    but before we do so, let's review why Python is so important with regard to data
    analysis.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们介绍了一些可以用来分析Python数据的库。在本节中，我们将看一个例子和多个代码片段，使用真实数据和Matplotlib构建条形图，但在此之前，让我们回顾一下为什么Python在数据分析方面如此重要。
- en: As Python is object-oriented, it allows us to streamline really complex and/or
    large datasets. This allows great readability of the data and using the libraries
    can produce data representations such as tables and visual models that allow us
    to predict where our data is going, create regression analyses, and much more.
    As mentioned in the introduction of this chapter, data analysis is also critical
    for decision-making. A well-designed experiment produces data that we can rely
    on and that is generalizable. Data analysis can be a tool for more equality and
    equity in our society.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Python是面向对象的，它允许我们简化非常复杂和/或大型的数据集。这使得数据的可读性很高，并且使用库可以产生数据表示，如表格和可视模型，使我们能够预测数据的走向，创建回归分析等。正如本章介绍中提到的，数据分析对于决策也是至关重要的。一个设计良好的实验产生的数据是可靠的，并且是可推广的。数据分析可以成为我们社会更加平等和公平的工具。
- en: All that being said, we are going to look more at the mechanical aspects of
    what we can do with Python rather than how we interpret it so that we can understand
    how Python does data analysis and presents results using our libraries. That said,
    we'll use more examples in [*Chapter 15*](B15413_15_Final_SK_ePub.xhtml#_idTextAnchor199),
    *Applied Computational Thinking Problems*, and [*Chapter 16*](B15413_16_Final_SK_ePub.xhtml#_idTextAnchor219),
    *Advanced Applied Computational Thinking Problems*, in various areas that will
    not only use some of these tools but will also provide us with an opportunity
    to explore what data analysis means in the context of those samples.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 说了这么多，我们将更多地关注我们可以用Python做什么的机械方面，而不是我们如何解释它，以便我们可以了解Python如何进行数据分析，并使用我们的库呈现结果。话虽如此，我们将在[*第15章*](B15413_15_Final_SK_ePub.xhtml#_idTextAnchor199)中使用更多的例子，*应用计算思维问题*，以及[*第16章*](B15413_16_Final_SK_ePub.xhtml#_idTextAnchor219)中，*高级应用计算思维问题*，在各个领域使用一些这些工具，这不仅将提供我们使用这些工具的机会，还将提供我们探索数据分析在这些样本背景下的意义。
- en: It's time to take a look at an example that can help us further understand the
    capabilities of these tools and how we can write algorithms that solve some of
    the presented problems.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看一个例子，这个例子可以帮助我们进一步了解这些工具的能力，以及我们如何编写算法来解决一些提出的问题。
- en: 'Before we begin, we''ll be using a data file, `ch12_data.csv`, which can be
    found in the GitHub repository. This file contains graduation rates for degree-seeking
    students from 1996 through 2012 by race/ethnicity, time to completion, sex, control
    of institution, and the percentage of applications accepted. The data was downloaded
    from the **National Center for Education Statistics** here: [https://nces.ed.gov/programs/digest/d19/tables/dt19_326.10.asp](https://nces.ed.gov/programs/digest/d19/tables/dt19_326.10.asp).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们将使用一个数据文件`ch12_data.csv`，它可以在GitHub存储库中找到。该文件包含了1996年至2012年按种族/族裔、完成时间、性别、机构控制和接受申请百分比对求学学生的毕业率。这些数据是从**国家教育统计中心**下载的：[https://nces.ed.gov/programs/digest/d19/tables/dt19_326.10.asp](https://nces.ed.gov/programs/digest/d19/tables/dt19_326.10.asp)。
- en: The data file in our repository only contains the data for all four-year institutions
    rather than the entire file. Some of the headings are also simplified.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们存储库中的数据文件只包含所有四年制机构的数据，而不是整个文件。一些标题也被简化了。
- en: 'When we want to work with a data file, it is important that we tell Python
    where it can locate it so that it knows what to use when running the algorithm.
    To do so, we use the `os` module, which allows our algorithm to interact with
    our **operating system** (**OS**). Notice that our snippet already includes the
    other libraries as well (we''ll use them later):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要使用数据文件时，重要的是告诉Python它可以在哪里找到它，以便在运行算法时知道要使用什么。为此，我们使用`os`模块，它允许我们的算法与我们的操作系统进行交互。请注意，我们的代码片段已经包括了其他库（我们稍后会使用它们）：
- en: ch12_csvAnalysis.py
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: ch12_csvAnalysis.py
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we've done previously, make sure you replace the ellipses in the user information
    with your own location. In the algorithm provided in the repository, you'll also
    need to adjust that location in order to run this algorithm, as the location for
    that algorithm would be for my own path.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，请确保用您自己的位置替换用户信息中的省略号。在存储库中提供的算法中，您还需要调整该位置，以便运行此算法，因为该算法的位置将是我的路径。
- en: 'Now that we''ve told Python where to find the file, we can use it in the algorithm.
    If we run this algorithm, we''ll see that the output should match the path we
    noted in the line that starts with `os.chdir`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经告诉Python在哪里找到文件，我们可以在算法中使用它。如果我们运行这个算法，我们会看到输出应该与我们在以`os.chdir`开头的行中注意到的路径匹配：
- en: '[PRE7]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice again that our paths will not match. That will all depend on where you
    have your files saved.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意，我们的路径不会匹配。这将取决于您保存文件的位置。
- en: 'The following figure shows the same data and file as our `.csv` file in `.xls`
    format, as it is easier to point out what we need from it. Note that we will use
    the `.csv` file for the analysis:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了与我们的`.csv`文件相同的数据和文件，以.xls格式，因为这样更容易指出我们需要的内容。请注意，我们将使用`.csv`文件进行分析：
- en: '![Figure 12.5 – Data to be used in Python formatted as an .xls file'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.5 - 以.xls文件格式化为Python使用的数据'
- en: '](image/Figure_12.05_B15413.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_12.05_B15413.jpg)'
- en: Figure 12.5 – Data to be used in Python formatted as an .xls file
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5 - 以.xls文件格式化为Python使用的数据
- en: 'If we only want to pull the rows shown, we can use the following code snippet
    to get that information from our `.csv` file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只想提取所示的行，我们可以使用以下代码片段从我们的`.csv`文件中获取该信息：
- en: ch12_csvAnalysis_2.py
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: ch12_csvAnalysis_2.py
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Notice that our algorithm imported the pandas library. The `read_csv()` function
    tells Python that we''ll be using the filename and the index of the column we
    want to start working with. That index gives us the values we''ll use as row headers.
    If the index wasn''t in the first column, we could change that to a different
    value. Then, we print the rows we want to see. Because our data is wide, our output
    is shown as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的算法导入了pandas库。`read_csv()`函数告诉Python我们将使用文件名和我们想要开始处理的列的索引。该索引给我们提供了我们将用作行标题的值。如果索引不在第一列，我们可以将其更改为不同的值。然后，我们打印我们想要看到的行。因为我们的数据很宽，我们的输出如下所示：
- en: '![Figure 12.6 – Output of ch12_csvAnalysis.py algorithm'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.6 - ch12_csvAnalysis.py算法的输出'
- en: '](image/Figure_12.06_B15413.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: （图12.06_B15413.jpg）
- en: Figure 12.6 – Output of ch12_csvAnalysis.py algorithm
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6 - ch12_csvAnalysis.py算法的输出
- en: Notice that we are only seeing the first two columns, then we have ellipses.
    That shows us that there are more columns between the second column and the third
    shown. That doesn't mean that Python didn't read the rest of the information,
    it's just not visible to us. The last output line, `[13 rows x 10 columns]`, actually
    tells us how many rows and columns are in the data we pulled.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们只看到了前两列，然后有省略号。这向我们表明第二列和第三列之间还有更多的列。这并不意味着Python没有读取其余的信息，只是对我们不可见。最后的输出行`[13
    rows x 10 columns]`实际上告诉我们我们提取的数据中有多少行和列。
- en: 'Let''s say I wanted to see data for one group, say `Hispanic`, as a comparison
    using a bar chart for the years between 1996 and 2012\. Then, I can use the **bar
    chart plot** from the Matplotlib library. Let''s take a look at the adjustments
    made to the following algorithm:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我想要看到一个组的数据，比如`Hispanic`，并使用1996年至2012年之间的条形图进行比较。然后，我可以使用Matplotlib库中的**条形图绘制**。让我们看看对以下算法所做的调整：
- en: ch12_csvAnalysis_3.py
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: ch12_csvAnalysis_3.py
- en: '[PRE9]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There are some things we should look at closely from our preceding code. The
    first thing we did was add the `fig, ax = plt.subplots()` line. This line allows
    us to create the plot, but also allows us to create multiple plots in a figure
    if we wanted to. If we were adding four plots, we'd use `fig, ax = plt.subplots(2,
    2)`, which would tell the algorithm that we're creating four plots in two rows
    and two columns. If we leave the parentheses empty, as we did in the preceding
    code, we have just one subplot.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该仔细查看我们前面的代码中的一些事情。我们做的第一件事是添加`fig, ax = plt.subplots()`行。这行允许我们创建图表，还允许我们在一个图中创建多个图表。如果我们要添加四个图表，我们会使用`fig,
    ax = plt.subplots(2, 2)`，这会告诉算法我们要在两行两列中创建四个图表。如果我们像前面的代码中那样将括号留空，我们就只有一个子图。
- en: Next, we are identifying the figure we'll create, which is a bar graph. We want
    to just compare the numbers for the Hispanic population over the years, so we
    identify that in our `ax.bar(graduates.index, graduates['Hispanic'])` line.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们要确定我们将创建的图形，这是一个条形图。我们只想比较西班牙裔人口的数字，所以我们在`ax.bar(graduates.index, graduates['Hispanic'])`行中确定了这一点。
- en: I should note here that many developers use `dataframe` as their variable. I
    prefer to name my `DataFrame` descriptively instead, so instead of calling my
    `DataFrame` `df`, I've called it `graduates` in the algorithm. Whatever your preference
    is, this is the `DataFrame` that we are currently working with to create a readable
    plot.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里应该指出，许多开发人员使用`dataframe`作为他们的变量。我更喜欢用描述性的方式命名我的`DataFrame`，所以我没有将我的`DataFrame`称为`df`，而是在算法中将其称为`graduates`。无论你的偏好是什么，这就是我们目前正在使用的`DataFrame`，用来创建可读的图表。
- en: 'Notice the ticks and tick labels in the code; we first identify where we''ll
    get the data from for the ticks and what the labels will be. Then, we can add
    more formatting to our plot by adding rotation (if we want to tilt our labels),
    alignment, and so on. We could also change the font size here. Finally, we set
    the *y* -axis title and the bar graph title before we show the plot. The following
    screenshot shows the plot for this algorithm:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意代码中的刻度和刻度标签；我们首先确定我们将从哪里获取刻度的数据以及标签将是什么。然后，我们可以通过添加旋转（如果我们想要倾斜标签）、对齐等来为我们的图表添加更多格式。我们还可以在这里更改字体大小。最后，在显示图表之前，我们设置*y*轴标题和条形图标题。以下截图显示了这个算法的图表：
- en: '![Figure 12.7 – Plot of Hispanic graduates for ch12_csvAnalysis_3.py'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.7 - ch12_csvAnalysis_3.py的西班牙裔毕业生情况'
- en: '](image/Figure_12.07_B15413.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: （图12.07_B15413.jpg）
- en: Figure 12.7 – Plot of Hispanic graduates for ch12_csvAnalysis_3.py
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7 - ch12_csvAnalysis_3.py的西班牙裔毕业生情况
- en: Notice that our graph has labels and shows the data clearly, and we were able
    to modify our formatting so that it was legible. As we analyze the information,
    we also notice the gap between the first year and the year **2000**, and between
    **2000** and **2002**. The data for those years is not included in the data file.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的图表有标签，清晰显示了数据，我们能够修改格式，使其可读。在分析信息时，我们还注意到了第一年和2000年之间，以及2000年和2002年之间的间隔。这些年份的数据没有包含在数据文件中。
- en: This is only one of the plots possible using Matplotlib. We'll have a chance
    to explore a few more in [*Chapter 15*](B15413_15_Final_SK_ePub.xhtml#_idTextAnchor199),
    *Applied Computational Thinking Problems*, and [*Chapter 16*](B15413_16_Final_SK_ePub.xhtml#_idTextAnchor219),
    *Advanced Applied Computational Thinking Problems*, which are solely dedicated
    to samples in multiple areas using everything we've discussed throughout earlier
    chapters of this book. For now, let's move on to some other applications of data
    and Python libraries.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是使用Matplotlib可能的图表之一。我们将有机会在[*第15章*](B15413_15_Final_SK_ePub.xhtml#_idTextAnchor199)中探索更多内容，*应用计算思维问题*，以及[*第16章*](B15413_16_Final_SK_ePub.xhtml#_idTextAnchor219)，*高级应用计算思维问题*，这两章专门讨论了在本书前几章中讨论的各种领域的样本。现在，让我们继续探讨数据和Python库的其他应用。
- en: Using additional libraries for plotting and analysis
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用额外的库进行绘图和分析
- en: 'Before we end this chapter on experimental data, the use of libraries, and
    plotting and analyzing data, let''s look at three more libraries that are helpful
    in data analysis and plotting. These are not the only libraries for analysis and
    plotting, nor will they be the only ones we explore throughout the rest of this
    book:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束本章关于实验数据、库的使用以及绘图和分析数据之前，让我们看看另外三个在数据分析和绘图中有帮助的库。这些不是唯一用于分析和绘图的库，也不会是我们在本书的其余部分中探索的唯一库：
- en: '**Seaborn** is a library used for data visualization; built on top of Matplotlib.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Seaborn**是用于数据可视化的库；建立在Matplotlib之上。'
- en: '**SciPy** is a library used for linear algebra, optimization, statistics, and
    more; built on top of NumPy.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SciPy**是用于线性代数、优化、统计等的库；建立在NumPy之上。'
- en: '**Scikit-Learn** is a library used in machine learning; part of the SciPy stack.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Scikit-Learn**是用于机器学习的库；是SciPy堆栈的一部分。'
- en: In the following chapters, we'll go deeper into the use of some of these libraries
    as we tackle some of the application problems that require their use. For now,
    let's take a quick look at what each of these libraries can help us with when
    looking at datasets.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，当我们解决一些需要使用这些库的应用问题时，我们将更深入地使用其中一些库。现在，让我们快速看一下这些库在查看数据集时可以帮助我们解决什么问题。
- en: Using the Seaborn library
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Seaborn库
- en: 'The Seaborn library provides us with more features on top of the Matplotlib
    visualization features. There are many things we can do with the Seaborn library,
    which we usually import as `sns` for simplification of the code. Here are some
    of the common uses of the library:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Seaborn库为我们提供了更多的功能，除了Matplotlib的可视化功能。我们可以用Seaborn库做很多事情，通常我们将其简化为`sns`进行导入。以下是该库的一些常见用途：
- en: Correlations
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相关性
- en: Aggregate statistics (observation of categorical values)
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合统计（对分类值的观察）
- en: Linear regression plots for dependent variables
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖变量的线性回归图
- en: Creating abstractions and grids with multiple plots
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建具有多个图表的抽象和网格
- en: One of the greatest things about Seaborn is that it also works well with pandas.
    Creating statistical representations of data and visualizations is easy when combining
    with pandas DataFrames.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Seaborn最棒的一点是它也能很好地与pandas一起使用。当与pandas的数据框结合时，创建数据的统计表示和可视化变得很容易。
- en: 'Seaborn has some sample datasets that can be accessed – that is, they are built-in
    – if we know the name of the dataset. We can then call the built-in dataset with
    a simple line of code. Let''s take a look at the following snippet of code and
    resulting graphics:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Seaborn有一些可以访问的示例数据集 - 也就是说，它们是内置的 - 只要我们知道数据集的名称，就可以调用内置数据集。然后我们可以用一行简单的代码调用内置数据集。让我们看看以下代码片段和生成的图形：
- en: ch12_seabornSample.py
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: ch12_seabornSample.py
- en: '[PRE10]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'From the preceding code, you can see that we''ve set a style for our plots.
    We are adding a `''darkgrid''` style to our plots and called it after importing
    the library. Seaborn has a few built-in styles: `white`, `whitegrid`, `dark`,
    `darkgrid`, and `ticks`. The following screenshot shows the resulting plot from
    Seaborn:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的代码中，您可以看到我们为图表设置了样式。我们在导入库后为我们的图表添加了`'darkgrid'`样式。Seaborn有一些内置样式：`white`、`whitegrid`、`dark`、`darkgrid`和`ticks`。以下截图显示了Seaborn的结果图：
- en: '![Figure 12.8 – Graph of exercise sample dataset with darkgrid style'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.8 - 使用darkgrid样式的练习样本数据集的图表'
- en: '](image/Figure_12.08_B15413.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_12.08_B15413.jpg)'
- en: Figure 12.8 – Graph of exercise sample dataset with darkgrid style
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8 - 使用darkgrid样式的练习样本数据集的图表
- en: As you can see from the graphs, we would be able to analyze whether or not there
    are correlations between pulse and time or any other variables.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 从图表中可以看出，我们可以分析脉搏和时间或其他变量之间是否存在相关性。
- en: 'We can also use pair plotting to show whether there are correlations between
    the variables. Let''s use another built-in dataset, flights, to see what the pair
    plotting does:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用成对绘图来显示变量之间是否存在相关性。让我们使用另一个内置数据集flights来看看成对绘图的效果：
- en: ch12_pairplotSNS.py
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: ch12_pairplotSNS.py
- en: '[PRE11]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding snippet of code is very similar to the previous one for the exercise
    data. The difference is that we call the `pairplot()` function in this case. The
    following screenshot shows our resulting grid of plots:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段与之前的练习数据非常相似。不同之处在于，在这种情况下我们调用了`pairplot()`函数。以下截图显示了我们得到的图表网格：
- en: '![Figure 12.9 – Pair plotting using Seaborn'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.9 - 使用Seaborn进行成对绘图'
- en: '](image/Figure_12.09_B15413.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_12.09_B15413.jpg)'
- en: Figure 12.9 – Pair plotting using Seaborn
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9 - 使用Seaborn进行成对绘图
- en: Notice that the number of passengers and the years seem to be positively correlated.
    That is, there are more passengers in later years than in the early years of flight.
    When analyzing this dataset, we would probably want to make a prediction, such
    as stating that more passengers would be flying in modern times.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，乘客数量和年份似乎呈正相关。也就是说，后来的年份比飞行初期的年份有更多的乘客。在分析这些数据集时，我们可能想要进行预测，比如说现代时代会有更多的乘客飞行。
- en: We could use the graphs to help us make predictions. That said, this data is
    fairly old, so we'd need more updated data to make accurate predictions. The more
    data we have, the better. For massively large amounts of data, we can also use
    machine learning, which we will briefly explore in [*Chapter 13*](B15413_13_Final_SK_ePub.xhtml#_idTextAnchor174),
    *Using Classification and Clusters*, and [*Chapter 14*](B15413_14_Final_SK_ePub.xhtml#_idTextAnchor184),
    *Computational Thinking and Python in Statistical Analysis*, so that we can learn
    how to manipulate and learn from the data.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用图表来帮助我们进行预测。也就是说，这些数据相当古老，所以我们需要更多更新的数据来进行准确的预测。数据越多，越好。对于大量数据，我们还可以使用机器学习，我们将在[*第13章*]（B15413_13_Final_SK_ePub.xhtml#_idTextAnchor174）*使用分类和聚类*以及[*第14章*]（B15413_14_Final_SK_ePub.xhtml#_idTextAnchor184）*计算思维和Python在统计分析中*中简要探讨，以便我们学习如何操作和学习数据。
- en: Before we move on to another library, one more thing about the pair plots—if
    there are 10 columns of data, the pair plot will compare each column with itself,
    then every other column available, creating a pretty large display with all the
    compared variables. We will look at some more pair plotting in [*Chapter 14*](B15413_14_Final_SK_ePub.xhtml#_idTextAnchor184),
    *Computational Thinking and Python in Statistical Analysis*. There are also problems
    in [*Chapter 15*](B15413_15_Final_SK_ePub.xhtml#_idTextAnchor199), *Applied Computational
    Thinking Problems*, and [*Chapter 16*](B15413_16_Final_SK_ePub.xhtml#_idTextAnchor219),
    *Advanced Applied Computational Thinking Problems*, that will allow us to practice
    more with those graphs and what we can get from them.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们转向另一个库之前，关于成对图的另一件事——如果有10列数据，成对图将比较每一列与自身，然后与其他可用的每一列，创建一个相当大的显示，显示所有比较的变量。我们将在[*第14章*](B15413_14_Final_SK_ePub.xhtml#_idTextAnchor184)，*计算思维和Python在统计分析中*中再看一些成对绘图。还有[*第15章*](B15413_15_Final_SK_ePub.xhtml#_idTextAnchor199)，*应用计算思维问题*，以及[*第16章*](B15413_16_Final_SK_ePub.xhtml#_idTextAnchor219)，*高级应用计算思维问题*中的问题，将让我们更多地练习这些图表以及我们可以从中得到的东西。
- en: The Seaborn library is helpful to visualize statistical data, much like Matplotlib.
    The ease of some of the built-in functions in Seaborn makes it a great tool for
    visualization and analysis.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Seaborn库有助于可视化统计数据，类似于Matplotlib。Seaborn内置函数的易用性使其成为可视化和分析的强大工具。
- en: Now, let's look at the SciPy library.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看SciPy库。
- en: Using the SciPy library
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用SciPy库
- en: 'The SciPy library is mostly used to solve scientific and mathematical problems.
    Some of the helpful sub-packages and their uses are as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy库主要用于解决科学和数学问题。以下是一些有用的子包及其用途：
- en: '`cluster` is used for clustering algorithms.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cluster` 用于聚类算法。'
- en: '`constants` contains physical and mathematical constants and units, such as
    `golden` (the golden ratio) and `mu_0` (the magnetic constant).'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constants` 包含物理和数学常数和单位，如`golden`（黄金比例）和`mu_0`（磁常数）。'
- en: '`fftpack` utilizes fast Fourier transform routines.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fftpack` 利用快速傅里叶变换例程。'
- en: '`integrate` is used for differential equation solvers.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`integrate` 用于微分方程求解器。'
- en: '`interpolate` contains interpolation and smoothing splines.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`interpolate` 包含插值和平滑样条。'
- en: '`io` relates to input and output.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`io` 与输入和输出有关。'
- en: '`linalg` is associated with linear algebra.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linalg` 与线性代数相关。'
- en: '`ndimage` is used for processing *N*-dimensional images.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ndimage` 用于处理*N*维图像。'
- en: '`odr` is used for orthogonal distance regression.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`odr` 用于正交距离回归。'
- en: '`optimize` is used for optimization and root-finding routines.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`optimize` 用于优化和寻根例程。'
- en: '`signal` is used for signal processing.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`signal` 用于信号处理。'
- en: '`sparse` is used for sparse matrices and associated routines.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sparse` 用于稀疏矩阵和相关例程。'
- en: '`spatial` is used for spatial data structures and algorithms.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spatial` 用于空间数据结构和算法。'
- en: '`special` is used for special functions (such as elliptic functions and integrals).'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`special` 用于特殊函数（如椭圆函数和积分）。'
- en: '`stats` is used for statistical distributions and functions.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stats` 用于统计分布和函数。'
- en: Within each of the sub-packages, SciPy contains many functions to aid in the
    visualization and optimization of scientific data. Because it was created specifically
    with that purpose, it is a common tool used in the scientific area. That said,
    the statistical packages are also robust, so the library is helpful to use even
    in non-scientific statistical analyses.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个子包中，SciPy包含许多函数，以帮助可视化和优化科学数据。因为它是专门为此目的而创建的，所以它是科学领域常用的工具。也就是说，统计包也很强大，因此即使在非科学统计分析中，该库也很有帮助。
- en: Let's now look at the Scikit-Learn library, which we'll use in the following
    chapters of this book.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在来看看Scikit-Learn库，这将在本书的后续章节中使用。
- en: Using the Scikit-Learn library
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Scikit-Learn库
- en: 'Scikit-Learn is probably the most important library for machine learning available
    in Python. We will explore this library in samples in the following chapters as
    we explore some of the problems that would be suitable for machine learning, so
    we won''t go too deep into the functionalities here. That said, here are some
    of the functionalities that Scikit-Learn gives us:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Scikit-Learn可能是Python中最重要的机器学习库。在接下来的章节中，我们将在样本中探索这个库，探讨一些适合机器学习的问题，因此我们不会在这里深入探讨功能。也就是说，以下是Scikit-Learn给我们的一些功能：
- en: '**Clustering** helps with grouping data that is unlabeled.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚类**有助于对未标记的数据进行分组。'
- en: '**Regression** measures the relationship between the variable (the mean of
    the variable) and the values of the other variables.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回归**衡量变量（变量的平均值）与其他变量的值之间的关系。'
- en: '**Classification** has multiple classifiers within Scikit-Learn, similar to
    regression. Some of the classifiers are **linear discrimination analysis**, **bagging
    classifiers**, **K-nearest neighbors classifiers**, and more.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分类**在Scikit-Learn中有多个分类器，类似于回归。一些分类器是**线性判别分析**、**装袋分类器**、**K最近邻分类器**等。'
- en: '**Model selection** has tools for creating training and testing models in machine
    learning.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型选择**具有用于在机器学习中创建训练和测试模型的工具。'
- en: '**Preprocessing** contains tools to standardize the dataset (more details on
    data preprocessing can be found in [*Chapter 14*](B15413_14_Final_SK_ePub.xhtml#_idTextAnchor184),
    *Computational Thinking and Python in Statistical Analysis)*.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预处理**包含用于标准化数据集的工具（有关数据预处理的更多细节可以在[*第14章*](B15413_14_Final_SK_ePub.xhtml#_idTextAnchor184)，*计算思维和Python在统计分析中*中找到）。'
- en: The Scikit-Learn library is something we will become fairly familiar with in
    the upcoming examples in [*Chapter 14*](B15413_14_Final_SK_ePub.xhtml#_idTextAnchor184),
    *Computational Thinking and Python in Statistical Analysis*, [*Chapter 15*](B15413_15_Final_SK_ePub.xhtml#_idTextAnchor199),
    *Applied Computational Thinking Problems*, and [*Chapter 16*](B15413_16_Final_SK_ePub.xhtml#_idTextAnchor219),
    *Advanced Applied Computational Thinking Problems*, so we'll leave some of that
    discussion for those chapters.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Scikit-Learn库是我们在接下来的例子中会比较熟悉的内容，所以我们将一些讨论留到[*第14章*]（B15413_14_Final_SK_ePub.xhtml#_idTextAnchor184），*计算思维和Python在统计分析中*，[*第15章*]（B15413_15_Final_SK_ePub.xhtml#_idTextAnchor199），*应用计算思维问题*，以及[*第16章*]（B15413_16_Final_SK_ePub.xhtml#_idTextAnchor219），*高级应用计算思维问题*，所以我们将一些讨论留到那些章节。
- en: The libraries and packages that we have available in Python allow us to perform
    detailed analysis for our dataset and create a wide array of useful plots that
    aid in data analysis.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Python中拥有的库和包使我们能够对数据集进行详细分析，并创建各种有用的图表，这有助于数据分析。
- en: Summary
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we went over the definitions of experimental data and validity,
    reliability, and generalizability in the context of experiments. We also discussed
    how to install and use the pandas, NumPy, and Matplotlib libraries so that we
    could use them to organize and display data. Some of the skills you learned include
    defining an experiment, data gathering, and how computational thinking helps us
    define problems and design what we'd use to display our results.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了实验数据和有效性、可靠性以及在实验环境中的普适性的定义。我们还讨论了如何安装和使用pandas、NumPy和Matplotlib库，以便我们可以使用它们来组织和显示数据。您学到的一些技能包括定义实验、数据收集，以及计算思维如何帮助我们定义问题并设计用于显示结果的工具。
- en: In addition, we learned about data analysis and data science and its growth
    and importance in our current world. We were able to use the libraries to produce
    a plot that represented a subset of a data file using a Matplotlib bar chart.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还了解了数据分析和数据科学在当前世界中的增长和重要性。我们能够使用库来生成代表数据文件子集的Matplotlib条形图。
- en: In the next chapter, we'll be learning more about data and other applications
    of data science and data analysis.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习更多关于数据以及数据科学和数据分析的应用。
