- en: Building a Flask-Based REST API with Zappa
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zappa构建基于Flask的REST API
- en: So far, we have seen how we can develop a Flask-based application and deploy
    it over a serverless infrastructure, we have created a complete web application
    along with a HTML rendering process, and we have used various Flask extensions
    to build the application in a very efficient way.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何开发基于Flask的应用程序，并在无服务器基础架构上部署它，我们已经创建了一个完整的Web应用程序以及HTML渲染过程，并且我们已经使用了各种Flask扩展以非常高效的方式构建了应用程序。
- en: In this chapter, we are going to develop a Flask-based RESTful API. This will
    cover the REST API implementation using Flask and deploying it using Zappa. In
    [Chapter 1](part0021.html#K0RQ0-8241a43bed654018b51365a570bcef1d), *Amazon Web
    Services for Serverless,* we saw the manual process of integrating the AWS Lambda
    and API Gateway, so now we will be deploying the REST API in an automated way
    using Zappa. Zappa will take care of the Flask REST API integration with API Gateway
    by configuring the proxy settings to pass the request to invoke Lambda functions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开发基于Flask的RESTful API。这将涵盖使用Flask实现REST API并使用Zappa部署的REST API。在[第1章](part0021.html#K0RQ0-8241a43bed654018b51365a570bcef1d)中，*无服务器的亚马逊网络服务*，我们看到了集成AWS
    Lambda和API Gateway的手动过程，所以现在我们将使用Zappa以自动化方式部署REST API。Zappa将通过配置代理设置来处理Flask
    REST API与API Gateway的集成，以传递请求以调用Lambda函数。
- en: Let's move on in our journey and develop a REST API over a serverless architecture.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续我们的旅程，开发基于无服务器架构的REST API。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing and configuring Flask
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置Flask
- en: Designing a REST API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计REST API
- en: Integrating Zappa
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成Zappa
- en: Building, testing, and deploying the REST API using Zappa
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Zappa构建、测试和部署REST API
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'We are going to create a Flask-based REST API, and therefore we have some prerequisites before
    starting the practical implementation:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始实际实现之前，我们需要一些先决条件来创建基于Flask的REST API：
- en: Ubuntu 16.04 LTS
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu 16.04 LTS
- en: Python 3.6
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6
- en: Virtual environment
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟环境
- en: Flask 0.12.2
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask 0.12.2
- en: Flask-JWT 0.3.2
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask-JWT 0.3.2
- en: Flask-SQLAlchemy 2.3.2
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask-SQLAlchemy 2.3.2
- en: Flask-Migrate 2.1.1
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask-Migrate 2.1.1
- en: Flask-RESTful 0.3.6
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask-RESTful 0.3.6
- en: Zappa 0.45.1
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zappa 0.45.1
- en: Flask
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask
- en: Flask extensions
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask扩展
- en: Installing and configuring Flask
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Flask
- en: We are going to develop a Flask-based REST API that will be deployed as serverless
    on AWS Lambda. So, here, installing and configuring Flask would be in a virtual
    environment.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开发一个基于Flask的REST API，将其部署为AWS Lambda上的无服务器。因此，在这里，安装和配置Flask将在虚拟环境中进行。
- en: 'We are going to be creating a virtual environment and enabling it to install
    all the required packages. This can be done using the following command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个虚拟环境，并使其能够安装所有必需的软件包。可以使用以下命令完成：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we are going to list all of the required packages in the `requirements.txt`file
    and we will install all of the packages at once. The following describes the content
    of the `requirements.txt` file:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将列出`requirements.txt`文件中的所有必需软件包，并一次性安装所有软件包。以下描述了`requirements.txt`文件的内容：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we can install all of these packages using the following command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下命令安装所有这些软件包：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That's all of packages that will be installed in the virtual environment. Now,
    let's have a detailed explanation of these packages in the next section.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将在虚拟环境中安装的所有软件包。现在，让我们在下一节详细解释这些软件包。
- en: Flask extensions
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask扩展
- en: Flask has a variety of extensions available that enhance the ability specific
    to any required feature. In our application, we are going to use multiple extensions,
    as mentioned in the previous section. These extensions follow a common pattern
    so that we can integrate them with Flask application objects.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Flask有许多可用的扩展，可以增强任何所需功能的能力。在我们的应用程序中，我们将使用多个扩展，如前一节中所述。这些扩展遵循一个通用模式，以便我们可以将它们与Flask应用程序对象集成。
- en: We are going to design a Flask-based REST API application that will have a basic
    authentication, authorization, and CRUD operation on the Todo model by following
    the REST API communication standard and validation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设计一个基于Flask的REST API应用程序，该应用程序将通过遵循REST API通信标准和验证，在Todo模型上具有基本的身份验证、授权和CRUD操作。
- en: Let's have a look at the usages of these extensions in the upcoming sections.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的章节中看看这些扩展的用法。
- en: Flask-JWT
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask-JWT
- en: The Flask-JWT extension enables the feature of **JWT** (**JSON Web Token**)
    functionality in the Flask environment. While designing the REST API, the JWT
    token plays an important role to authenticate and authorize the API access. We'll
    look at a detailed description about JWT in the next section.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-JWT扩展在Flask环境中启用了**JWT**（**JSON Web Token**）功能。在设计REST API时，JWT令牌对于验证和授权API访问起着重要作用。我们将在下一节中详细描述JWT。
- en: Learning about JWT
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习JWT
- en: '**JWT** stands for **JSON Web Token**. It''s a standard pattern in order to
    implement security and authenticity access for REST API interfaces. The JWT token
    is an encoded form of data issued by the server application and is used to authenticate
    the client access. The client is required to add the JWT token in a HTTP request as
    an authorization header.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**JWT**代表**JSON Web Token**。这是一种标准模式，用于实现REST API接口的安全性和真实性访问。JWT令牌是服务器应用程序发出的数据的编码形式，用于验证客户端访问。客户端需要在HTTP请求中添加JWT令牌作为授权标头。'
- en: We will be using the JWT token to authenticate the REST API's access. In case
    you need to understand the JWT mechanism in detail, I recommend reading the JWT
    documentation at: [https://jwt.io/introduction/](https://jwt.io/introduction/).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用JWT令牌来验证REST API的访问。如果您需要详细了解JWT机制，我建议阅读[https://jwt.io/introduction/](https://jwt.io/introduction/)上的JWT文档。
- en: Flask-RESTful
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask-RESTful
- en: The Flask-RESTful extension is designed to implement the REST API with the Flask
    framework. This extension follows the standard REST API implementation pattern
    and provides an easy way of REST API implementation. Before implementing the REST
    API, you must have a basic understanding of REST API standards, so let's have
    a look at the REST API basics.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-RESTful扩展旨在使用Flask框架实现REST API。该扩展遵循标准的REST API实现模式，并提供了一种实现REST API的简单方法。在实现REST
    API之前，您必须对REST API标准有基本的了解，因此让我们来看看REST API的基础知识。
- en: Begining with REST
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始REST
- en: '**REST** stands for **REpresentational State Transfer.** It is a well-defined
    standard that''s used to implement server-client communication in order to persist data.
    REST follows the **JSON** (**JavaScript Object Notation**) data representation
    format to exchange the data.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**REST**代表**REpresentational State Transfer.**它是一个明确定义的标准，用于实现服务器-客户端通信以持久化数据。REST遵循**JSON**（**JavaScript对象表示**）数据表示格式来交换数据。'
- en: 'REST defines some verbs on the HTTP method to perform CRUD operations, such
    as:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: REST在HTTP方法上定义了一些动词，用于执行CRUD操作，例如：
- en: '`GET`: To retrieve the list of records and specific records with postfix ID
    parameters in the root URL, which also return a response with a 200 status code'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`：检索记录列表和根URL中带有后缀ID参数的特定记录，还返回带有200状态代码的响应'
- en: '`POST`: To create the record on the server and return a response with a 201
    status code'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`：在服务器上创建记录，并返回带有201状态代码的响应'
- en: '`PUT`: To update all record fields on the server and returns a response with
    a 200 status code'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT`：更新服务器上的所有记录字段，并返回带有200状态代码的响应'
- en: '`PATCH`: To update a specific field in the record set on the server and return
    a response with a 200 status code'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PATCH`：更新服务器上记录集中的特定字段，并返回带有200状态代码的响应'
- en: '`DELETE`: To delete the entire record set with the help of a record-specific
    ID in the URL, and return a response with a 204 status code'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`：通过URL中的记录特定ID的帮助删除整个记录集，并返回带有204状态代码的响应'
- en: Now, it's time to see some practical work. Let's move on to the next section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看一些实际工作了。让我们继续下一节。
- en: Designing the REST API
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计REST API
- en: We are going to design a REST API for performing CRUD operations on our todos
    model. Our application will have a basic authentication and authorization workflow
    in order to secure the REST API endpoints.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设计一个REST API，用于对我们的todos模型执行CRUD操作。我们的应用程序将具有基本的身份验证和授权工作流，以保护REST API端点。
- en: 'The following is the scaffolding for our application:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们应用程序的脚手架：
- en: '![](img/00047.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00047.jpeg)'
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'File—`app`/`__init__.py`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '文件—`app`/`__init__.py`:'
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We configured the Flask extensions such as Flask-SQLAlchemy and Flask-Migration,
    which are straightforward. Flask-JWT integration requires a little bit more work
    as we need to define the `authenticate`and `identity`methods and use them as parameters
    while initializing the JWT object. These methods are responsible for authenticating
    the user and identifying the user.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们配置了Flask扩展，如Flask-SQLAlchemy和Flask-Migration，这些都很简单。Flask-JWT集成需要更多的工作，因为我们需要定义`authenticate`和`identity`方法，并在初始化JWT对象时将它们用作参数。这些方法负责对用户进行身份验证和识别用户。
- en: Apart from extension integration, we are going to create auth and todoapps as
    Flask blueprint objects and register them with the Flask application object using
    the `register_blueprint`method.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 除了扩展集成，我们将创建`auth`和`todoapps`作为Flask蓝图对象，并使用`register_blueprint`方法将它们注册到Flask应用程序对象中。
- en: Let's have a detailed description of each package and it's uses.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细描述每个包及其用途。
- en: Configuring the application settings
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置应用程序设置
- en: In the `config`package, we defined the application level configuration, which
    would be isolated as per the defined environment. The following is the content
    of the `config.py` file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在`config`包中，我们定义了应用程序级别的配置，根据定义的环境进行隔离。以下是`config.py`文件的内容。
- en: 'File—`config/config.py`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '文件—`config/config.py`:'
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `config` file exposes the `config` object, which contains different configuration
    objects as per your environment. In a similar fashion, you can add more environment
    as per your requirements.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`config`文件公开了`config`对象，其中包含根据您的环境不同的配置对象。类似地，您可以根据需要添加更多环境。'
- en: The `get_sqlite_uri`method is defined to set the `db` file in the `tmp` directory
    because AWS Lambda requires the SQLite `.db` file in memory at the time of execution.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_sqlite_uri`方法被定义为将`db`文件设置在`tmp`目录中，因为AWS Lambda要求在执行时将SQLite`.db`文件保存在内存中。'
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'File—`config/models.py`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '文件—`config/models.py`:'
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we combined the `db` session operations in order to perform specific transactions
    such as save, update, and delete. This will help us extend the features of a model
    class.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`db`会话操作组合在一起，以执行特定的事务，如保存、更新和删除。这将帮助我们扩展模型类的功能。
- en: Implementing authentication
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施认证
- en: Authentication is an essential feature to secure the REST API from unauthorized
    access. So, in order to implement the authentication layer, we are going to use
    the JWT mechanism. Here, we are going to design two REST APIs for registering
    a user and for login access.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 认证是保护REST API免受未经授权访问的重要功能。因此，为了实现认证层，我们将使用JWT机制。在这里，我们将设计两个REST API，用于注册用户和登录访问。
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'File—`auth/models.py`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '文件—`auth/models.py`:'
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is a basic `User` model with only two fields, which are `email` and `password`.
    Now, we are going to design a signup API and a login API. The signup API will
    only accept two parameters, email and password, and will create a user record
    in the database. The login API will be used to authenticate the user's credentials
    and will return a JWT token which will be used with other APIs as an authorization
    header.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本的`User`模型，只有两个字段，即`email`和`password`。现在，我们将设计一个注册API和一个登录API。注册API将只接受两个参数，电子邮件和密码，并将在数据库中创建一个用户记录。登录API将用于验证用户的凭据，并返回一个JWT令牌，该令牌将与其他API一起作为授权标头使用。
- en: Let's create the signup and login APIs. The following is the code snippet of
    the resource file that includes the contents of the API implementation logic.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建注册和登录API。以下是资源文件的代码片段，其中包括API实现逻辑的内容。
- en: 'File—`auth/resources.py`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 - `auth/resources.py`：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Flask-RESTful provides a `Resource` class, which is used to define the API resource.
    It follows the REST standard and provides an easy way to create an API. As we
    are going to use the signup API on the HTTP most `request` method, we created
    a `post` method. Similarly, we designed the login API, where we are authenticating
    the user's credentials and returning a token.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-RESTful提供了一个`Resource`类，用于定义API资源。它遵循REST标准，并提供了一个简单的方法来创建API。由于我们将在HTTP的大多数`request`方法上使用注册API，我们创建了一个`post`方法。同样，我们设计了登录API，我们在那里验证用户的凭据并返回一个令牌。
- en: We have to return the custom method to generate the token since, at the time
    of writing, the Flask-JWT `PyPI` repository doesn't have an updated release, even
    though this feature has been added to the GitHub repository.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须返回自定义方法来生成令牌，因为在撰写本文时，Flask-JWT `PyPI`仓库尚未发布更新版本，尽管这个功能已经添加到GitHub仓库中。
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'File—`auth/__init__.py`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 - `auth/__init__.py`：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we have created the `Blueprint` object and configured it. Flask-RESTful
    provides an `API` class, and, using this class, we have registered our signup
    and login resources.  That's it. Now, we can hit the signup and login URL with
    JSON data to perform the operation. We will have a complete demonstration of these
    REST APIs after the deployment process.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了`Blueprint`对象并对其进行了配置。Flask-RESTful提供了一个`API`类，使用这个类，我们注册了我们的注册和登录资源。就是这样。现在，我们可以用JSON数据访问注册和登录URL来执行操作。在部署过程之后，我们将对这些REST
    API进行完整演示。
- en: Implementing the todo API
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现todo API
- en: Let's start the todo API implementation. We need to have a todo REST API endpoint
    to perform the CRUD operations. As per the REST standard, there would be only
    one endpoint URL, such as `/todos/<todo_id>/`. This endpoint will be used to persist
    the todo data into the database. We will need to have a Todo model to persist
    the data. The following is the code snippet of the Todo model.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始todo API的实现。我们需要一个todo REST API端点来执行CRUD操作。根据REST标准，只会有一个端点URL，比如`/todos/<todo_id>/`。这个端点将用于将todo数据持久化到数据库中。我们需要有一个Todo模型来持久化数据。以下是Todo模型的代码片段。
- en: 'File—`todo/models.py`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 - `todo/models.py`：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'File—`todo/resources.py`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 - `todo/resources.py`：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, we defined the `TodoResource` class, which will handle `GET`, `POST`,
    `PUT`, and `DELETE` HTTP requests. Based on the request type, we are performing
    the CRUD operation. We also used `reqparse`to defined the validation on the required
    data from the HTTP requests.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了`TodoResource`类，它将处理`GET`、`POST`、`PUT`和`DELETE`的HTTP请求。根据请求类型，我们执行CRUD操作。我们还使用`reqparse`来定义从HTTP请求中所需数据的验证。
- en: In order to secure `TodoResource`, we have added the `jwt_required` methods
    in the list of decorators of the `TodoResource` class, which will apply to all
    associated methods. Now, the `TodoResource` API will only be available with a
    valid authorization header, otherwise it will respond with the unauthorized access
    error.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护`TodoResource`，我们在`TodoResource`类的装饰器列表中添加了`jwt_required`方法，这将应用于所有相关方法。现在，`TodoResource`
    API只能在有效的授权头部下使用，否则将会响应未经授权的访问错误。
- en: We will see the complete working of this in an upcoming section.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中看到这个完整的工作过程。
- en: Building, testing, and deploying the REST API using Zappa
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zappa构建、测试和部署REST API
- en: We are done with development, and now it's time to deploy the app as serverless
    in AWS Lambda. We already described the prerequisites to configure Zappa and its
    associated configuration in the preceding chapter, so here I assume that you have
    a configured Zappa along with an AWS configuration.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了开发，现在是时候将应用程序作为无服务器部署在AWS Lambda上了。我们已经在前一章中描述了配置Zappa及其相关配置的先决条件，所以这里我假设你已经配置了Zappa以及AWS配置。
- en: Configuring Zappa
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Zappa
- en: Once you have configured Zappa, you can initialize Zappa for your project. You
    need to run the `zappa init` command and follow the CLI questionnaire to configure
    your project with Zappa. I followed the default configuration settings suggested
    by Zappa. The `zappa init` command will generate the `zappa_settings.json` file,
    and we are free to modify this file as per our needs.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你配置了Zappa，你可以为你的项目初始化Zappa。你需要运行`zappa init`命令，并按照CLI问卷的指引来配置你的项目与Zappa。我按照Zappa建议的默认配置设置进行了配置。`zappa
    init`命令将生成`zappa_settings.json`文件，我们可以根据需要自由修改这个文件。
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'File—`zappa_settings.json`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 - `zappa_settings.json`：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Zappa maintains this JSON file in order to perform the deployment process. Now,
    we will move on to deploying the application.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa维护这个JSON文件以执行部署过程。现在，我们将继续部署应用程序。
- en: Initiating deployment using Zappa
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zappa启动部署
- en: Once you are done with Zappa initialization, it's time to deploy the application. Zappa
    provides a `zappa deploy` command to deploy the application. This command will
    perform the deployment process, where it will create the deployment package as
    a ZIP file, push it onto AWS S3, and configure the AWS Lambda with the API Gateway.
    We described the complete deployment process in detail in the first chapter.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了Zappa的初始化，就该部署应用程序了。Zappa提供了一个`zappa deploy`命令来部署应用程序。这个命令将执行部署过程，它将创建部署包作为ZIP文件，将其推送到AWS
    S3，并配置AWS Lambda与API Gateway。我们在第一章中详细描述了完整的部署过程。
- en: Once we run this with the `zappa deploy dev`command, our application will be
    hosted as a serverless application on AWS Lambda. If you wanted to redeploy the
    same application, then you would need to run the `zappa update dev` command, which
    will update the existing application.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们用`zappa deploy dev`命令运行这个，我们的应用程序将作为无服务器应用程序托管在AWS Lambda上。如果你想重新部署相同的应用程序，那么你需要运行`zappa
    update dev`命令，这将更新现有的应用程序。
- en: Let's have a look at demonstrating the deployed application in the next section.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中看一下部署的应用程序演示。
- en: Demonstrating the deployed application
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 演示部署的应用程序
- en: Zappa generates a random URL for the deployed application, and, on every new
    deployment, it will generate the URL. However, if you are just updating the deployment,
    then it won't change the URL. This is the URL we got from the Zappa deployment
    process: [https://jrzlw1zpdi.execute-api.ap-south-1.amazonaws.com/dev/](https://jrzlw1zpdi.execute-api.ap-south-1.amazonaws.com/dev/).
    We have written the auth and todo APIs with some endpoints, so you won't see anything
    on the base URL. We will be using our API endpoints as defined in the resources.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 'Zappa为部署的应用程序生成一个随机URL，并且在每次新部署时都会生成URL。但是，如果您只是更新部署，则不会更改URL。这是我们从Zappa部署过程中获得的URL：[https://jrzlw1zpdi.execute-api.ap-south-1.amazonaws.com/dev/](https://jrzlw1zpdi.execute-api.ap-south-1.amazonaws.com/dev/)。我们已经使用一些端点编写了auth和todo
    API，因此您在基本URL上看不到任何内容。我们将使用在资源中定义的API端点。 '
- en: Sign up API
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册API
- en: We designed the signup API with the endpoint as `/auth/signup`,which expects
    two parameters—`email` and `password`. This endpoint is responsible for creating
    the user record in the database. Once we get the successful response, we can use
    the same user credentials to perform the login and access other APIs.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设计了带有端点`/auth/signup`的注册API，它期望两个参数—`email`和`password`。此端点负责在数据库中创建用户记录。一旦我们获得成功的响应，我们可以使用相同的用户凭据执行登录并访问其他API。
- en: 'The following is a screenshot of the signup API:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是注册API的截图：
- en: '![](img/00048.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00048.jpeg)'
- en: Here, we use the Advanced REST Client application to test the API. As you can
    see, we are creating the user record with the signup API. The signup API responds
    with a 200 status.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用高级REST客户端应用程序测试API。如您所见，我们正在使用注册API创建用户记录。注册API以状态码200进行响应。
- en: Login API
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录API
- en: 'Now, we have a user record available in the database and we can use it to perform
    a login operation. The login API is responsible for validating the user''s credentials
    and returning a JWT token. This JWT token will be used to authorize the todos
    API. The following is a screenshot of the login API being used through the REST
    client:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在数据库中有一个用户记录，我们可以使用它来执行登录操作。登录API负责验证用户的凭据并返回JWT令牌。此JWT令牌将用于授权todos API。以下是通过REST客户端使用的登录API的截图：
- en: '![](img/00049.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00049.jpeg)'
- en: Here, you can see the login API execution, as we got the JWT token that will
    be used to authorize access to the todo API.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到登录API的执行，因为我们获得了将用于授权访问待办事项API的JWT令牌。
- en: Todo API
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 待办事项API
- en: Now that we have the JWT token through the login API, let's execute the Todo
    API. However, here, we will be looking at different scenarios on the Todo API.
    Our Todo API has an endpoint called `todos/<todo_id>`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过登录API获得了JWT令牌，让我们执行待办事项API。然而，在这里，我们将看到待办事项API的不同场景。我们的待办事项API有一个名为`todos/<todo_id>`的端点。
- en: Todo API without authorization
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有授权的待办事项API
- en: 'Let''s try the todo API without providing the authorization header:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试在不提供授权标头的情况下使用待办事项API：
- en: '![](img/00050.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00050.jpeg)'
- en: As you can see, we got an unauthorized error from our application. Now, we are
    going to provide the authorization header with a JWT token.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们从应用程序得到了未经授权的错误。现在，我们将提供带有JWT令牌的授权标头。
- en: Todo API with the authorization header
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有授权标头的待办事项API
- en: We will use the JWT token returned by the login API and set the authorization
    header. The value of the authorization header will be `JWT <token>`.Now, let's
    execute the API with CRUD operations.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用登录API返回的JWT令牌，并设置授权标头。授权标头的值将是`JWT <token>`。现在，让我们执行带有CRUD操作的API。
- en: 'The `GET` request looks as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET`请求如下所示：'
- en: '![](img/00051.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00051.jpeg)'
- en: Here, we got the list of all todo records available in the database. We gained
    access as we set the authorization header.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们得到了数据库中所有待办事项记录的列表。由于我们设置了授权标头，我们获得了访问权限。
- en: 'The `POST` request looks as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST`请求如下所示：'
- en: '![](img/00052.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00052.jpeg)'
- en: Here, we created a new todo record and got the response with a status code of `201`.
    Now, with the base URL, we can execute the `GET` and `POST` requests, but, to
    perform the `GET`, `PUT`, and `DELETE` functions on specific records, we are required
    to mention the `todo_id` in the URL.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个新的待办事项记录，并获得了状态码为`201`的响应。现在，使用基本URL，我们可以执行`GET`和`POST`请求，但是，要执行对特定记录的`GET`、`PUT`和`DELETE`功能，我们需要在URL中提到`todo_id`。
- en: 'The `POST` request without payload data looks as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 没有有效负载数据的`POST`请求如下所示：
- en: '![](img/00053.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00053.jpeg)'
- en: Here, we got the validation error as we haven't provided any payload. We managed
    this validation with the help of the `reqparse`module of the `flask_restful` library.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，由于我们没有提供任何有效负载，我们得到了验证错误。我们使用`flask_restful`库的`reqparse`模块来处理此验证。
- en: 'The `GET` request with the todo ID looks as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 带有待办事项ID的`GET`请求如下所示：
- en: '![](img/00054.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00054.jpeg)'
- en: You can see that we have used the todo ID in the URL to view a specific record
    set.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们在URL中使用了待办事项ID来查看特定记录集。
- en: 'The `PATCH` request looks as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`PATCH`请求如下所示：'
- en: '![](img/00055.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00055.jpeg)'
- en: Here, we updated the todo status and marked the todo records as finished.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们更新了待办事项的状态，并将待办事项记录标记为已完成。
- en: 'The `PATCH` request with invalid data looks as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 带有无效数据的`PATCH`请求如下所示：
- en: '![](img/00056.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00056.jpeg)'
- en: 'Here, we got the validation error as we defined the required choices using
    the `reqparse`module, as mentioned here:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，由于我们使用`reqparse`模块定义了必需的选项，我们得到了验证错误，如下所示：
- en: '[PRE17]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `DELETE` request looks as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`DELETE`请求如下所示：'
- en: '![](img/00057.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00057.jpeg)'
- en: Finally, we deleted the record with the HTTP `DELETE` request. That's it! We
    are done with the REST API implementation.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用HTTP `DELETE`请求删除了记录。就是这样！我们已经完成了REST API的实现。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to create a Flask-based REST API and configured
    it with some extensions. With the help of the Flask-JWT extension, we implemented
    security. The Flask-RESTful extension provides an easy interface to design the
    REST API. Finally, we configured Zappa to deploy the application in a serverless
    environment.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建基于Flask的REST API，并使用一些扩展进行配置。在Flask-JWT扩展的帮助下，我们实现了安全性。Flask-RESTful扩展提供了一个简单的接口来设计REST
    API。最后，我们配置了Zappa来在无服务器环境中部署应用程序。
- en: In the next chapter, we are going to see the Django application development
    as a serverless application on AWS Lambda. Stay tuned for it.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到Django应用程序开发作为AWS Lambda上的无服务器应用程序。敬请关注。
- en: Questions
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why do we need JWT implementation?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为什么需要JWT实现？
- en: What is the `function_name` parameter in the Zappa settings file?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zappa设置文件中的`function_name`参数是什么？
