- en: Chapter 7. Testing on Mobile
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。移动测试
- en: With the ever increasing number of mobile users all over the world, the adoption
    of smartphones and tablets has increased quite significantly. Mobile apps have
    penetrated consumer and enterprise markets replacing desktops and laptops with
    smart devices. Small businesses and large-scale enterprises have a great potential
    to use mobile as a channel to connect with users. There is a lot of effort being
    taken to build mobile-friendly websites and native applications to serve customers
    and employees. Testing these apps on various mobile platforms available in the
    market has become crucial. This chapter will teach you more on how to test mobile
    apps using Selenium WebDriver and more specifically using **Appium**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着全球移动用户数量的不断增长，智能手机和平板电脑的采用率显著提高。移动应用程序已经渗透到消费和企业市场，用智能设备取代了台式机和笔记本电脑。小型企业和大型企业有很大的潜力利用移动作为与用户连接的渠道。为了服务客户和员工，正在投入大量努力构建对移动友好的网站和原生应用程序。在市场上可用的各种移动平台上测试这些应用程序变得至关重要。本章将教你如何使用
    Selenium WebDriver 以及更具体地使用 **Appium** 来测试移动应用程序。
- en: 'In this chapter, you will learn about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解以下内容：
- en: Testing mobile apps with Appium
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Appium 测试移动应用程序
- en: Installing and setting up Appium
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和设置 Appium
- en: Creating and running tests for iOS on iPhone simulator
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 iPhone 模拟器上创建和运行 iOS 测试
- en: Creating and running tests for Android on a real device
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在真实设备上创建和运行 Android 测试
- en: Introducing Appium
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Appium
- en: Appium is an open source test automation framework for testing native and hybrid
    mobile apps on iOS, Android, and Firefox OS platforms using the JSON wire protocol
    used by the Selenium WebDriver tests to communicate with the Selenium Server.
    Appium will replace the `iPhoneDriver` and `AndroidDriver` APIs in Selenium 2
    used for testing mobile web applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Appium 是一个开源的测试自动化框架，用于使用 Selenium WebDriver 测试在 iOS、Android 和 Firefox OS 平台上运行的本地和混合移动应用程序，该框架使用与
    Selenium WebDriver 测试通信的 JSON 线协议。Appium 将取代 Selenium 2 中用于测试移动网页应用程序的 `iPhoneDriver`
    和 `AndroidDriver` API。
- en: 'Appium allows us to use and extend the existing Selenium WebDriver framework
    to build mobile tests. As it uses Selenium WebDriver to drive the tests, we can
    use any language to create tests for which the Selenium client library exists.
    Here is the Appium coverage map with support for different platforms and application
    types:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Appium 允许我们使用和扩展现有的 Selenium WebDriver 框架来构建移动测试。由于它使用 Selenium WebDriver 来驱动测试，我们可以使用任何存在
    Selenium 客户端库的语言来创建测试。以下是 Appium 的覆盖图，展示了对不同平台和应用类型的支持：
- en: '![Introducing Appium](img/3506OS_07_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![介绍 Appium](img/3506OS_07_01.jpg)'
- en: 'Appium supports testing of the following types of apps:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Appium 支持以下类型的应用程序测试：
- en: '**Native apps**: Native apps are platform-specific apps built using the platform-supported
    languages and frameworks. For example, apps for iPhone and iPad are developed
    using Objective-C with iOS SDK; similarly, Android apps are developed using Java
    with Android SDK. In terms of performance, native apps are fast and more reliable.
    They use the native framework for the user interface.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原生应用程序**：原生应用程序是特定于平台的、使用平台支持的语言和框架构建的应用程序。例如，iPhone 和 iPad 的应用程序使用 Objective-C
    和 iOS SDK 开发；同样，Android 应用程序使用 Java 和 Android SDK 开发。在性能方面，原生应用程序运行速度快且更可靠。它们使用原生框架进行用户界面。'
- en: '**Mobile web apps**: Mobile web apps are server-side apps, built with any server-side
    technology such as PHP, Java, or ASP.NET, and use frameworks such as jQuery Mobile,
    Sencha Touch, and so on to render a user interface that mimics the native UI.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动网页应用程序**：移动网页应用程序是服务器端应用程序，使用任何服务器端技术（如 PHP、Java 或 ASP.NET）构建，并使用 jQuery
    Mobile、Sencha Touch 等框架来渲染一个模仿原生用户界面的用户界面。'
- en: '**Hybrid apps**: Similar to the native apps, hybrid apps run on the device
    and are written with web technologies (HTML5, CSS, and JavaScript). Hybrid apps
    use the device''s browser engine to render the HTML and process the JavaScript
    locally inside a native container using WebView. This enables the app to access
    device capabilities that are not accessible in mobile web apps, such as the camera,
    accelerometer, sensors, and local storage.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合应用程序**：与原生应用程序类似，混合应用程序在设备上运行，并使用 Web 技术（HTML5、CSS 和 JavaScript）编写。混合应用程序使用设备的浏览器引擎来渲染
    HTML 并在本地使用 WebView 在原生容器中处理 JavaScript，这使应用程序能够访问在移动网页应用程序中不可访问的设备功能，例如相机、加速度计、传感器和本地存储。'
- en: Prerequisites for Appium
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Appium 的先决条件
- en: Before you get started with learning more about Appium, you will need some tools
    for iOS and Android platforms.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始学习更多关于 Appium 之前，你需要一些 iOS 和 Android 平台的工具。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Appium is built on Node.js and comes as a Node.js package as well as standalone
    GUI on Mac OS X and Windows. We will use Appium standalone GUI which comes with
    built-in Node.js on Mac OS X.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Appium 基于 Node.js 构建，同时提供 Node.js 包以及 Mac OS X 和 Windows 上的独立 GUI。我们将使用带有内置
    Node.js 的 Mac OS X 上的 Appium 独立 GUI。
- en: Setting up Xcode for iOS
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 iOS 的 Xcode
- en: We need Xcode 4.6.3 or higher, installed on Mac OS X, for testing apps for the
    iOS platform. While writing this book, Xcode 5.1 was used. You can get Xcode from
    the App Store or developer portal at [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装 Xcode 4.6.3 或更高版本，在 Mac OS X 上进行 iOS 平台应用的测试。在编写本书时，使用了 Xcode 5.1。您可以从
    App Store 或开发者门户 [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)
    获取 Xcode。
- en: 'After installing Xcode, launch it from the **Applications** menu and navigate
    to **Preferences** | **Downloads**, and install **Command Line Tools** and additional
    iOS SDKs for testing applications on different versions of the iOS platform, as
    shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Xcode 后，从 **应用程序** 菜单启动它，然后导航到 **首选项** | **下载**，并安装 **命令行工具** 以及用于在不同版本的
    iOS 平台上测试应用的附加 iOS SDK，如图所示：
- en: '![Setting up Xcode for iOS](img/3506OS_07_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![设置 iOS 的 Xcode](img/3506OS_07_02.jpg)'
- en: For running tests on a real device, you need a provision profile installed on
    the device and USB debugging enabled on it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实设备上运行测试时，您需要在设备上安装配置文件，并启用设备的 USB 调试功能。
- en: 'Try to launch the iPhone simulator and verify that it works. You can launch
    the simulator by navigating to **Xcode** | **Open Developer Tool** | **iOS Simulator**.
    Launch Safari in the simulator and open the mobile web app version of the sample
    application [http://demo.magentocommerce.com](http://demo.magentocommerce.com)
    in Safari as shown in the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试启动 iPhone 模拟器并验证其是否正常工作。您可以通过导航到 **Xcode** | **打开开发者工具** | **iOS 模拟器** 来启动模拟器。在模拟器中启动
    Safari 并打开示例应用的移动网页版本 [http://demo.magentocommerce.com](http://demo.magentocommerce.com)，如图所示：
- en: '![Setting up Xcode for iOS](img/3506OS_07_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![设置 iOS 的 Xcode](img/3506OS_07_03.jpg)'
- en: Setting up Android SDK
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 Android SDK
- en: We will need the Android SDK installed for testing Android apps. Android SDK
    is available for download at [http://developer.android.com/sdk/](http://developer.android.com/sdk/).
    This will get us the latest version of the SDK. After the installation, please
    make sure `ANDROID_HOME` is added to the path. Complete installation steps are
    available at [http://developer.android.com/sdk/installing/index.html?pkg=tools](http://developer.android.com/sdk/installing/index.html?pkg=tools).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装 Android SDK 以测试 Android 应用。Android SDK 可在 [http://developer.android.com/sdk/](http://developer.android.com/sdk/)
    下载。这将为我们提供 SDK 的最新版本。安装后，请确保已将 `ANDROID_HOME` 添加到路径中。完整的安装步骤可在 [http://developer.android.com/sdk/installing/index.html?pkg=tools](http://developer.android.com/sdk/installing/index.html?pkg=tools)
    查找。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For detailed and latest installation requirements visit [http://appium.io/getting-started.html#requirements](http://appium.io/getting-started.html#requirements).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 详细和最新的安装要求请访问 [http://appium.io/getting-started.html#requirements](http://appium.io/getting-started.html#requirements)。
- en: Setting up the Appium Python client package
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 Appium Python 客户端包
- en: 'The Appium Python client was fully compliant with the Selenium 3.0 specification
    draft at the time of writing this book. It offers some helpers to make mobile
    testing in Python easier with Appium. This can be installed using the following
    command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本书时，Appium Python 客户端完全符合 Selenium 3.0 规范草案。它提供了一些辅助工具，使使用 Appium 进行 Python
    移动测试更加容易。您可以使用以下命令进行安装：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information on the Appium Python client package is available at [https://pypi.python.org/pypi/Appium-Python-Client](https://pypi.python.org/pypi/Appium-Python-Client).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Appium Python 客户端包的更多信息可在 [https://pypi.python.org/pypi/Appium-Python-Client](https://pypi.python.org/pypi/Appium-Python-Client)
    找到。
- en: Installing Appium
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Appium
- en: 'Before we start testing mobile apps with Appium, we need to download and install
    Appium. We will use the Appium GUI version. If you wish to run tests for iOS on
    iPhone or iPad, then you need to set up Appium on a Mac OS X machine. For testing
    Android applications, you can set up the environment on a Windows or Linux machine.
    Setting up Appium is fairly easy with the new Appium app for Mac OS X. You can
    download the latest Appium binaries from [http://appium.io/](http://appium.io/).
    Follow the given steps to install Appium:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用Appium测试移动应用程序之前，我们需要下载和安装Appium。我们将使用Appium GUI版本。如果您希望在iPhone或iPad上为iOS运行测试，那么您需要在Mac
    OS X机器上设置Appium。对于测试Android应用程序，您可以在Windows或Linux机器上设置环境。使用Mac OS X的新Appium应用程序设置Appium相当简单。您可以从[http://appium.io/](http://appium.io/)下载最新的Appium二进制文件。按照以下步骤安装Appium：
- en: Click on the **Download Appium** button on the front page and you will be directed
    to the download page.![Installing Appium](img/3506OS_07_04.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击首页上的**下载Appium**按钮，您将被引导到下载页面。![安装Appium](img/3506OS_07_04.jpg)
- en: Select the version specific to the operating system you are using from the list
    as shown in the following screenshot:![Installing Appium](img/3506OS_07_05.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下屏幕截图所示的列表中选择适用于您所使用操作系统的特定版本：![安装Appium](img/3506OS_07_05.jpg)
- en: Note
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the following examples, we will be using Appium on Mac OS X.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将使用Mac OS X上的Appium。
- en: You can install Appium on Mac by launching the installer and copying Appium
    to the `Applications` folder.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过启动安装程序并将Appium复制到“应用程序”文件夹中来在Mac上安装Appium。
- en: When you launch Appium from the `Applications` menu for the first time, it will
    ask for authorization to run the iOS simulators.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您第一次从“应用程序”菜单启动Appium时，它将请求授权运行iOS模拟器。
- en: Tip
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: By default, Appium starts at `http://127.0.0.1:4723` or localhost. This is the
    URL to which your test should direct the test commands. We will be testing the
    mobile version of the sample application that we used in the book on iPhone Safari
    browser.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，Appium在`http://127.0.0.1:4723`或本地主机上启动。这是您的测试应将测试命令指向的URL。我们将测试我们在书中使用的示例应用程序的iPhone
    Safari浏览器上的移动版本。
- en: On the main window of Appium, click on the Apple icon to open iOS settings:![Installing
    Appium](img/3506OS_07_06.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Appium的主窗口中，点击苹果图标以打开iOS设置：![安装Appium](img/3506OS_07_06.jpg)
- en: On the **iOS Settings** dialog, select the **Force Device** checkbox and specify
    **iPhone 4s** in the iOS section. Also, select the **Use Mobile Safari** checkbox
    as shown in the following screenshot:![Installing Appium](img/3506OS_07_07.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**iOS设置**对话框中，选择**强制设备**复选框，并在iOS部分指定**iPhone 4s**。同时，选择**使用移动Safari**复选框，如以下屏幕截图所示：![安装Appium](img/3506OS_07_07.jpg)
- en: Click on the **Launch** button in the Appium window to start the Appium server.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Appium窗口中点击**启动**按钮以启动Appium服务器。
- en: Appium Inspector
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Appium Inspector
- en: Appium also comes with a spy tool called **Appium Inspector**. We can launch
    the Appium Inspector by clicking on the magnifying glass icon on Appium's main
    window.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Appium还附带一个名为**Appium Inspector**的间谍工具。我们可以通过点击Appium主窗口上的放大镜图标来启动Appium Inspector。
- en: The Inspector provides a lot of options to analyze the app under test. One of
    the main features it offers is how the UI elements are used in the app, the structure
    or hierarchy of the elements, and the properties of these elements, which we can
    use in defining the locator strings.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 检查器提供了许多选项来分析测试中的应用程序。它提供的主要功能之一是应用程序中UI元素的使用方式，元素的架构或层次结构，以及这些元素的属性，我们可以使用这些属性来定义定位字符串。
- en: You can also simulate various gestures on the app and see their effect on the
    simulator. It also offers an ability to record the steps you perform on the app.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在应用程序上模拟各种手势并查看它们在模拟器上的效果。它还提供了一种记录您在应用程序上执行的操作的能力。
- en: Testing on iOS
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS测试
- en: Appium drives automation using various native automation frameworks and provides
    an API based on Selenium's WebDriver JSON wire protocol. For automating iOS applications,
    it uses the UI Automation feature offered as part of Apple Instruments.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Appium通过使用各种原生自动化框架来驱动自动化，并提供基于Selenium WebDriver JSON线协议的API。对于自动化iOS应用程序，它使用Apple
    Instruments提供的UI Automation功能。
- en: 'Appium works as an HTTP server and receives the commands from test scripts
    over the JSON wire protocol. Appium sends these commands to Apple Instruments
    so that the commands can be executed on the app launched in a simulator or real
    device. While doing so, Appium translates the JSON commands into UI Automation
    JavaScript commands that are understood by the Instruments. The Instruments take
    care of launching and closing the app in the simulator or device. This process
    is shown in the following diagram:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Appium作为一个HTTP服务器，通过JSON线协议接收来自测试脚本的命令。Appium将这些命令发送到Apple Instruments，以便在模拟器或真实设备上运行的app可以执行这些命令。在这个过程中，Appium将JSON命令转换为Instruments理解的UI
    Automation JavaScript命令。Instruments负责在模拟器或设备上启动和关闭app。这个过程在下面的图中展示：
- en: '![Testing on iOS](img/3506OS_07_08.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![在iOS上测试](img/3506OS_07_08.jpg)'
- en: When a command is executed against the app on the simulator or device, the target
    app sends the response back to the Instruments, which then sends it back to Appium
    in the JavaScript response format. Appium translates the UI Automation JavaScript
    responses into Selenium WebDriver JSON wire protocol responses and sends them
    back to the test script.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当在模拟器或设备上的app执行命令时，目标app会将响应发送回Instruments，然后Instruments将其以JavaScript响应格式发送回Appium。Appium将UI
    Automation JavaScript响应转换为Selenium WebDriver JSON线协议响应，并将它们发送回测试脚本。
- en: Writing a test for iOS
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写iOS测试
- en: 'Now, we have the Appium running; let''s create a test that will check the search
    functionality in the iPhone Safari browser. Create a new test, `SearchProductsOnIPhone`,
    with the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经启动了Appium；让我们创建一个测试来检查iPhone Safari浏览器中的搜索功能。创建一个新的测试，`SearchProductsOnIPhone`，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We need `RemoteWebDriver` to run the tests with Appium. However, for Appium
    to use the desired platform, we need to pass a set of desired capabilities as
    shown in the following code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`RemoteWebDriver`来运行Appium的测试。然而，为了Appium能够使用所需的平台，我们需要传递一组所需的配置能力，如下面的代码所示：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `desired_caps['device']` capability is used by Appium to decide on which
    the platform the test script should get executed. In this example, we used `iPhone
    Simulator`. For running tests on iPad, we can specify the iPad Simulator.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`desired_caps[''device'']`配置能力被Appium用来决定测试脚本应该在哪个平台上执行。在这个例子中，我们使用了`iPhone
    Simulator`。对于在iPad上运行测试，我们可以指定iPad模拟器。'
- en: When running tests on a real device, we need to specify the value `iPhone` or
    `iPad` for device capability. Appium will pick the device that is connected to
    the Mac via USB.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当在真实设备上运行测试时，我们需要指定设备能力值为`iPhone`或`iPad`。Appium将选择通过USB连接到Mac的设备。
- en: The `desired_caps['version']` capability is the version of iPhone/iPad simulator
    that we want to use. In this example, iOS 7.1 simulator is used, which was the
    latest the version of iOS at the time of writing this book.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`desired_caps[''version'']`配置能力是我们想要使用的iPhone/iPad模拟器的版本。在这个例子中，使用了iOS 7.1模拟器，这是在撰写本书时的最新iOS版本。'
- en: The last desired capability we used is `desired_caps['app']`, which is used
    by Appium to launch the target app. In this case, it will launch the Safari browser.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后使用的最后一个所需能力是`desired_caps['app']`，它被Appium用来启动目标app。在这种情况下，它将启动Safari浏览器。
- en: 'Finally, we need to connect to the Appium server using `RemoteWebDriver` and
    the desired capabilities that we need. This is done by creating an instance of
    `Remote` as shown in following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要使用`RemoteWebDriver`和所需的配置能力连接到Appium服务器。这通过创建一个`Remote`实例来完成，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The rest of the test uses the Selenium API to interact with the mobile web version
    of the application. Run the test normally. You will see that Appium establishes
    a session with test scripts and launches the iPhone Simulator with the Safari
    app. Appium will execute all the test steps by running commands on the Safari
    app in the simulator window.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的其余部分使用Selenium API与移动网络版应用程序交互。正常运行测试。你会看到Appium与测试脚本建立会话，并使用Safari应用启动iPhone模拟器。Appium将通过在模拟器窗口中的Safari应用上运行命令来执行所有测试步骤。
- en: Testing on Android
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Android上测试
- en: Appium drives the automation of Android applications using the UI Automator
    bundled with Android SDK. The process is quite similar to testing on iOS.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Appium使用Android SDK捆绑的UI Automator来驱动Android应用程序的自动化。这个过程与iOS上的测试非常相似。
- en: 'Appium works as an HTTP server and receives the commands from test scripts
    over JSON wire protocol. Appium sends these commands to the UI Automator so that
    they can be executed on the app launched in an emulator or real device. While
    doing so, Appium translates the JSON commands into the UI Automator Java commands
    that are understood by Android SDK. This process is shown in the following diagram:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Appium作为一个HTTP服务器，通过JSON线协议接收来自测试脚本的命令。Appium将这些命令发送到UI Automator，以便它们可以在模拟器或真实设备上启动的应用程序中执行。在此过程中，Appium将JSON命令转换为Android
    SDK能理解的UI Automator Java命令。这个过程在以下图中展示：
- en: '![Testing on Android](img/3506OS_07_09.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![Android上的测试](img/3506OS_07_09.jpg)'
- en: When a command is executed against the app on the emulator or device, the target
    app sends the response back to the UI Automator, which sends it back to Appium.
    It translates the UI Automator responses into Selenium WebDriver JSON wire protocol
    responses and sends them back to the test script.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当命令在模拟器或设备上的应用程序上执行时，目标应用程序将响应发送回UI Automator，UI Automator再将它发送回Appium。它将UI
    Automator的响应转换为Selenium WebDriver JSON线协议响应，并将它们发送回测试脚本。
- en: Writing a test for Android
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Android编写测试
- en: Testing apps on Android is pretty much similar to what we did for iOS. For Android,
    we will use a real device instead of an emulator (a simulator is called an emulator
    in the Android community). We will use the same application for testing in Chrome
    for Android.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android上测试应用与我们在iOS上所做的大致相同。对于Android，我们将使用真实设备而不是模拟器（在Android社区中，模拟器被称为模拟器）。我们将使用相同的应用程序在Android的Chrome上进行测试。
- en: For this example, I am using Samsung Galaxy S III handset. We need to install
    the Chrome browser on the device. You can get Google Chrome on the Play Store.
    Next, we need to connect the device to the machine where the Appium server is
    running.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我使用的是三星Galaxy S III手机。我们需要在设备上安装Chrome浏览器。你可以在Play Store上获取Google Chrome。接下来，我们需要将设备连接到运行Appium服务器的机器。
- en: 'Now, we will work on Android. Here, we will try to execute our test scripts
    on the Android real device. We need to make sure we have installed Chrome on our
    Android device and connect our device to our machine. Let''s run the following
    command to get a list of emulators or devices connected to the machine:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将专注于Android。在这里，我们将尝试在我们的Android真实设备上执行测试脚本。我们需要确保我们在Android设备上安装了Chrome，并将我们的设备连接到运行Appium服务器的机器。让我们运行以下命令以获取连接到机器的模拟器或设备列表：
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Android Debug** **Bridge** (**adb**) is a command-line tool available in
    Android SDK that lets you communicate with an emulator instance or the connected
    real device.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**Android调试桥接器**（**adb**）是Android SDK中可用的一种命令行工具，它允许你与模拟器实例或连接的真实设备进行通信。'
- en: 'The previous command will display a list of all the Android devices that are
    connected to the host. In this example, we have connected to a real device that
    is listed as shown in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将显示连接到主机的所有Android设备的列表。在这个例子中，我们已经连接到一个真实设备，如下面的截图所示：
- en: '![Writing a test for Android](img/3506OS_07_10.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![为Android编写测试](img/3506OS_07_10.jpg)'
- en: 'Let''s use the test that we created for iOS and modify it for Android. We will
    create a new test, `SearchProductsOnAndroid`. Copy the following code to the newly
    created test:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用为iOS创建的测试，并将其修改为适用于Android。我们将创建一个新的测试，`SearchProductsOnAndroid`。将以下代码复制到新创建的测试中：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, we assigned the `desired_caps['device']` capability value to
    Android, which will be used by the Appium to run tests on Android.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将`desired_caps['device']`能力值分配给了Android，这将由Appium用于在Android上运行测试。
- en: Next, we mentioned the Android Version 4.3 (Jelly Bean) in the `desired_caps['version']`
    capability. As we want to run tests in Chrome for Android, we mentioned Chrome
    in the `desired_caps['app']` capability.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在`desired_caps['version']`能力中提到了Android版本4.3（Jelly Bean）。因为我们想在Android的Chrome上运行测试，所以我们提到了Chrome在`desired_caps['app']`能力中。
- en: 'Appium will use the first device from the list of devices that adb returns.
    It will use the desired capabilities that we mentioned, launch the Chrome browser
    on the device, and start executing the test script commands, as shown in the following
    screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Appium将使用adb返回的设备列表中的第一个设备。它将使用我们提到的期望能力，在设备上启动Chrome浏览器，并开始执行测试脚本命令，如下面的截图所示：
- en: '![Writing a test for Android](img/3506OS_07_11.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![为Android编写测试](img/3506OS_07_11.jpg)'
- en: 'Here is the screenshot of the test running on a real device:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是测试在真实设备上运行的截图：
- en: '![Writing a test for Android](img/3506OS_07_12.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![为Android编写测试](img/3506OS_07_12.jpg)'
- en: Using Sauce Labs
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sauce Labs
- en: 'We looked at Sauce Labs for cross-browser testing in [Chapter 6](ch06.html
    "Chapter 6. Cross-browser Testing"), *Cross-browser Testing*. Sauce also provides
    support for testing mobile applications using Appium. In fact, the Appium project
    is developed and supported by Sauce Labs. With minimal changes to the desired
    capabilities, we can run mobile tests in Sauce Labs with the following code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [第 6 章](ch06.html "第 6 章。跨浏览器测试") 中探讨了 Sauce Labs 进行跨浏览器测试，*跨浏览器测试*。Sauce
    还提供了使用 Appium 测试移动应用程序的支持。实际上，Appium 项目是由 Sauce Labs 开发和支持的。通过最小化对所需能力的修改，我们可以在
    Sauce Labs 上使用以下代码运行移动测试：
- en: '[PRE6]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After running the mobile tests, we can see the results and video recording in
    the Sauce Labs dashboard. This saves a lot of effort and time in setting up Appium
    in the local environment with Sauce offering various combinations of SDKs and
    settings.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行移动测试后，我们可以在 Sauce Labs 控制台中查看结果和视频录制。这大大节省了在本地环境中设置 Appium 的时间和精力，因为 Sauce
    提供了各种 SDK 和设置的组合。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we recognized the need for testing apps on mobile devices.
    We looked at Appium, which is becoming a core feature of Selenium for testing
    mobile apps. We installed and set up Appium for testing a mobile version of the
    sample app.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们认识到在移动设备上测试应用程序的需求。我们探讨了 Appium，它正成为 Selenium 测试移动应用程序的核心功能。我们安装并设置了
    Appium 以测试示例应用程序的移动版本。
- en: We tested the mobile web application on the iPhone simulator and on the Android
    device. Using Appium, we can test various types of mobile applications and use
    any programming language that has a `WebDriver` client library.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 iPhone 模拟器和 Android 设备上测试了移动网络应用程序。使用 Appium，我们可以测试各种类型的移动应用程序，并使用任何具有 `WebDriver`
    客户端库的编程语言。
- en: In the next chapter, you will learn some good practices such as using `PageObjects`
    and data-driven tests with Selenium WebDriver.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习一些良好的实践，例如使用 `PageObjects` 和数据驱动的测试与 Selenium WebDriver 结合。
