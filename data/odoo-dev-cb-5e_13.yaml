- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Web Server Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络服务器开发
- en: We’ll introduce the basics of the web server part of Odoo in this chapter. Note
    that this will cover the fundamental aspects; for high-level functionality, you
    should refer to [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734), *CMS* *Website
    Development*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 Odoo 网络服务器部分的基础知识。请注意，这将涵盖基本方面；对于高级功能，您应参考 [*第 14 章*](B20997_14.xhtml#_idTextAnchor734)，*CMS*
    *网站开发*。
- en: The Odoo web server is a crucial component of the Odoo framework, responsible
    for handling web requests and serving the web interface to users.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 网络服务器是 Odoo 框架的一个关键组件，负责处理网络请求并向用户提供服务网络界面。
- en: 'Here are key aspects of the Odoo web server:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Odoo 网络服务器的关键方面：
- en: '**The web interface and modules**: The web server provides a user-friendly
    web interface to access and interact with Odoo applications. Users can navigate
    through different modules, access data, and perform various business operations
    using this interface.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络界面和模块**: 网络服务器提供了一个用户友好的网络界面，用于访问和交互 Odoo 应用程序。用户可以通过此界面浏览不同的模块，访问数据，并执行各种业务操作。'
- en: '**An HTTP server**: Odoo uses an HTTP server to handle web requests. It can
    be configured to work with popular web servers such as Nginx or Apache or can
    run its own built-in HTTP server.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTTP 服务器**: Odoo 使用 HTTP 服务器来处理网络请求。它可以配置为与流行的网络服务器（如 Nginx 或 Apache）一起工作，或者可以运行其内置的
    HTTP 服务器。'
- en: '**Werkzeug**: Werkzeug is a **WSGI** (**Web Server Gateway Interface**) library
    for Python, and Odoo uses it to handle HTTP requests and responses. Werkzeug helps
    in routing requests, handling sessions, and managing other web-related tasks.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Werkzeug**: Werkzeug 是一个 Python 的 **WSGI**（**Web Server Gateway Interface**）库，Odoo
    使用它来处理 HTTP 请求和响应。Werkzeug 帮助路由请求、处理会话以及管理其他与网络相关的任务。'
- en: '**Controllers and routing**: Odoo uses controllers to handle different web
    requests and routes them to the appropriate controllers and methods. The routing
    mechanism ensures that requests are directed to the correct modules and functionalities.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器和路由**: Odoo 使用控制器来处理不同的网络请求，并将它们路由到适当的控制器和方法。路由机制确保请求被导向正确的模块和功能。'
- en: '**Views and templates**: Odoo uses views and templates to define how data should
    be presented in the web interface. Views determine the structure of pages, and
    templates provide the HTML and presentation logic to render data.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图和模板**: Odoo 使用视图和模板来定义数据在网页界面中的呈现方式。视图确定页面的结构，模板提供 HTML 和呈现逻辑以渲染数据。'
- en: '**Business logic**: The web server is tightly integrated with the business
    logic of Odoo. It communicates with the backend to fetch and update data, ensuring
    that the web interface reflects the most current state of the business applications.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务逻辑**: 网络服务器与 Odoo 的业务逻辑紧密集成。它与后端通信以获取和更新数据，确保网络界面反映了业务应用程序的最新状态。'
- en: '**Security**: Security is a critical aspect of the Odoo web server. It includes
    features such as authentication, authorization, and session management to ensure
    that users have appropriate access levels and that their interactions with the
    system are secure.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**: 安全性是 Odoo 网络服务器的一个关键方面。它包括认证、授权和会话管理等功能，以确保用户具有适当的访问级别，并且他们的系统交互是安全的。'
- en: '**JavaScript and CSS**: The Odoo web interface relies on JavaScript and CSS
    to enhance user experience and provide dynamic and responsive features. This includes
    form validation, interactive elements, and real-time updates.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaScript 和 CSS**: Odoo 网络界面依赖于 JavaScript 和 CSS 来增强用户体验并提供动态和响应式功能。这包括表单验证、交互式元素和实时更新。'
- en: '**A RESTful API**: The web server also provides a RESTful API, allowing external
    applications to interact with Odoo programmatically. This enables integration
    with third-party systems and the development of custom applications.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RESTful API**: 网络服务器还提供了一个 RESTful API，允许外部应用程序以编程方式与 Odoo 交互。这可以实现与第三方系统的集成以及自定义应用程序的开发。'
- en: '**Customization and extensions**: Developers can extend and customize the Odoo
    web server to meet specific business requirements. This includes creating custom
    modules, views, and controllers.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定制和扩展**: 开发者可以扩展和定制 Odoo 网络服务器以满足特定的业务需求。这包括创建自定义模块、视图和控制器。'
- en: Understanding the Odoo web server is essential for developers and administrators
    working with Odoo to deploy, configure, and customize the system based on the
    unique needs of a business.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 Odoo 网络服务器对于与 Odoo 一起工作的开发者和管理员来说至关重要，他们需要根据业务独特的需求部署、配置和定制系统。
- en: 'Werkzeug ([https://werkzeug.palletsprojects.com/en/2.3.x](https://werkzeug.palletsprojects.com/en/2.3.x))
    is a WSGI library for Python and is used by Odoo to handle HTTP requests and responses.
    WSGI is a specification for how web servers and web applications communicate in
    Python. Werkzeug provides a set of utilities and classes that make it easier to
    work with WSGI applications. Here are some details about how Werkzeug is used
    in the context of Odoo:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Werkzeug ([https://werkzeug.palletsprojects.com/en/2.3.x](https://werkzeug.palletsprojects.com/en/2.3.x))
    是一个用于 Python 的 WSGI 库，Odoo 使用它来处理 HTTP 请求和响应。WSGI 是一个规范，用于描述 Python 中 Web 服务器和
    Web 应用程序之间的通信。Werkzeug 提供了一套实用工具和类，使得与 WSGI 应用程序一起工作变得更加容易。以下是 Werkzeug 在 Odoo
    上下文中使用的一些详细信息：
- en: '`Request` object that represents an incoming HTTP request. In Odoo, this object
    is used to extract information from the incoming HTTP request, such as form data,
    query parameters, and headers.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代表传入 HTTP 请求的 `Request` 对象。在 Odoo 中，此对象用于从传入的 HTTP 请求中提取信息，例如表单数据、查询参数和头部信息。
- en: '`Response` object in Werkzeug is used to create HTTP responses. Odoo utilizes
    this to construct and send responses back to the client, including rendering web
    pages or providing data in response to AJAX requests.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Werkzeug 中的 `Response` 对象用于创建 HTTP 响应。Odoo 利用此功能构建并发送响应回客户端，包括渲染网页或响应 AJAX 请求提供数据。
- en: '**Routing**: Werkzeug enables easy URL routing. In Odoo, the routing mechanism
    is used to map incoming requests to the appropriate controller methods or views.
    This helps in directing requests to the correct functionality within the Odoo
    application.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由**：Werkzeug 实现了简单的 URL 路由。在 Odoo 中，路由机制用于将传入的请求映射到适当的控制器方法或视图。这有助于将请求定向到
    Odoo 应用程序中的正确功能。'
- en: '**Middleware**: Middleware components can be added to the Odoo application
    using Werkzeug. Middleware sits between the web server and the Odoo application
    and can perform tasks such as authentication, logging, or modifying requests and
    responses.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中间件**：可以使用 Werkzeug 将中间件组件添加到 Odoo 应用程序中。中间件位于 Web 服务器和 Odoo 应用程序之间，可以执行诸如身份验证、日志记录或修改请求和响应等任务。'
- en: '**URL building**: Werkzeug provides a URL building facility that helps to generate
    URLs for different routes within the Odoo application. This is essential for creating
    links and redirects dynamically in the web interface.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL 构建**：Werkzeug 提供了一个 URL 构建功能，有助于在 Odoo 应用程序的不同路由中生成 URL。这对于在 Web 界面中动态创建链接和重定向至关重要。'
- en: '**Session management**: Werkzeug supports session management, which Odoo utilizes
    to handle user sessions. This is important for maintaining user state across multiple
    requests and ensuring security features such as user authentication.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话管理**：Werkzeug 支持会话管理，Odoo 利用它来处理用户会话。这对于在多个请求之间维护用户状态以及确保用户身份验证等安全功能非常重要。'
- en: '**Utilities for common tasks**: Werkzeug includes various utilities that simplify
    common web development tasks. Odoo leverages these utilities for tasks such as
    parsing form data, handling file uploads, and managing cookies.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常用任务的实用工具**：Werkzeug 包含各种实用工具，简化了常见的 Web 开发任务。Odoo 利用这些实用工具执行诸如解析表单数据、处理文件上传和管理
    Cookie 等任务。'
- en: '**Error handling**: Werkzeug provides mechanisms to handle errors, including
    HTTP error responses. Odoo uses this to ensure that appropriate error messages
    are returned to the client when needed.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理**：Werkzeug 提供了处理错误（包括 HTTP 错误响应）的机制。Odoo 使用此机制确保在需要时向客户端返回适当的错误消息。'
- en: To work with Werkzeug in the context of Odoo, developers often interact with
    these features through the controllers and views defined in Odoo modules. Understanding
    Werkzeug is beneficial for developers who want to extend or customize Odoo, as
    it provides insights into the underlying mechanisms to handle HTTP requests and
    responses within the application. However, in day-to-day Odoo development, developers
    often work at a higher level using the Odoo framework itself, without directly
    interacting with Werkzeug.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Odoo 的上下文中使用 Werkzeug，开发者通常通过 Odoo 模块中定义的控制器和视图与这些功能交互。了解 Werkzeug 对希望扩展或自定义
    Odoo 的开发者有益，因为它提供了处理应用程序内 HTTP 请求和响应的底层机制的见解。然而，在日常的 Odoo 开发中，开发者通常在更高的层次上使用 Odoo
    框架本身，而不直接与 Werkzeug 交互。
- en: 'In this chapter, we’ll cover the following topics:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Making a path accessible from a network
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从网络中访问路径
- en: Restricting access to web-accessible paths
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制对可网络访问路径的访问
- en: Consuming parameters passed to your handlers
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消费传递给您的处理器的参数
- en: Modifying an existing handler
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改现有的处理器
- en: Serving static
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供静态内容
- en: Technical requirements
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The technical requirements for this chapter include the online Odoo platform.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求包括在线Odoo平台。
- en: All the code used in this chapter can be downloaded from the GitHub repository
    at [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter13](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter13).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有代码都可以从GitHub仓库[https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter13](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter13)下载。
- en: Making a path accessible from a network
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使一个路径可通过网络访问
- en: Making a path accessible from a network means defining the entry points or URLs
    through which users can access the application. This is fundamental to any web
    development project, as it determines how users will interact with the system.
    In this recipe, we’ll look at how to make a URL of the [http://yourserver/path1/path2](http://yourserver/path1/path2)
    form accessible to users. This can be either a web page or a path returning arbitrary
    data to be consumed by other programs. In the latter case, you would usually use
    the JSON format to consume parameters and offer your data.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使一个路径可通过网络访问意味着定义入口点或URL，用户可以通过这些URL访问应用程序。这对于任何Web开发项目都是基本的，因为它决定了用户如何与系统交互。在这个菜谱中，我们将探讨如何使类似[http://yourserver/path1/path2](http://yourserver/path1/path2)的URL对用户可访问。这可以是网页或返回任意数据以供其他程序消费的路径。在后一种情况下，你通常会使用JSON格式来消费参数并提供你的数据。
- en: Getting ready
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We’ll make use of the `hostel.student` model, which we looked at in [*Chapter
    4*](B20997_04.xhtml#_idTextAnchor118), *Application Models*; therefore, if you
    haven’t done so yet, grab the initial module from [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter13/00_initial_module](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter13/00_initial_module)
    so that you will be able to follow the examples.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`hostel.student`模型，这是我们之前在[*第4章*](B20997_04.xhtml#_idTextAnchor118)“应用模型”中讨论过的；因此，如果你还没有这样做，请从[https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter13/00_initial_module](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter13/00_initial_module)获取初始模块，这样你才能跟随示例。
- en: We want to allow any user to query the full list of students in the hostel.
    Furthermore, we want to provide the same information to programs through a JSON
    request. Let’s check out how to do it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望允许任何用户查询宿舍中所有学生的完整列表。此外，我们还想通过JSON请求向程序提供相同的信息。让我们看看如何实现它。
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We’ll need to add controllers, which go into a folder called `controllers`
    by convention:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加控制器，这些控制器按照惯例放入一个名为`controllers`的文件夹中：
- en: 'Add a `controllers/main.py` file with the HTML version of our page, as follows:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`controllers/main.py`文件，其中包含我们页面的HTML版本，如下所示：
- en: '[PRE0]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add a function to serve the same information in the JSON format, as shown in
    the following example:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个函数以JSON格式提供相同的信息，如下例所示：
- en: '[PRE1]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the `controllers/__init__.py` file, as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`controllers/__init__.py`文件，如下所示：
- en: '[PRE2]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Import `controllers` into your `my_hostel/__init__.py` file, as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`controllers`导入到你的`my_hostel/__init__.py`文件中，如下所示：
- en: '[PRE3]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After restarting your server, you can visit `/my_hostel/students` in your browser,
    and you’ll be presented with a flat list of the student names.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动你的服务器后，你可以在浏览器中访问`/my_hostel/students`，你将看到一个学生姓名的平面列表。
- en: '![Figure 13.1 – A list of students](img/B20997_13_1.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图13.1 – 学生列表](img/B20997_13_1.jpg)'
- en: Figure 13.1 – A list of students
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1 – 学生列表
- en: 'To test the JSON-RPC part, you’ll have to craft a JSON request. A simple way
    to do that is by using the following command to receive the output on the command
    line:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试JSON-RPC部分，你必须构建一个JSON请求。一个简单的方法是使用以下命令在命令行接收输出：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you get `404` errors at this point, you probably have more than one database
    available on your instance. If so, it’s impossible for Odoo to determine which
    database is meant to serve the request.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你此时遇到`404`错误，可能是因为你的实例上有多个数据库可用。如果是这样，Odoo无法确定哪个数据库是用来处理请求的。
- en: Use the `--db-filter='^yourdatabasename$'` parameter to force Odoo to use the
    exact database you installed the module in. The path should now be accessible.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`--db-filter='^yourdatabasename$'`参数强制Odoo使用你安装模块的确切数据库。路径现在应该是可访问的。
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The two crucial parts here are that our controller is derived from `odoo.http.Controller`,
    and the methods we use to serve content are decorated with `odoo.http.route`.
    Inheriting from `odoo.http.Controller` registers the controller with Odoo’s routing
    system in a similar way to how the models are registered – by inheriting from
    `odoo.models.Model`. Also, `Controller` has a metaclass that takes care of this.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个关键点：我们的控制器是从 `odoo.http.Controller` 派生的，而我们用来服务内容的函数被 `odoo.http.route`
    装饰。以与模型注册类似的方式，通过从 `odoo.models.Model` 继承来注册控制器。此外，`Controller` 有一个元类来处理这个问题。
- en: '![Figure 13.2 – A diagram of controllers](img/B20997_13_2.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.2 – 控制器图](img/B20997_13_2.jpg)'
- en: Figure 13.2 – A diagram of controllers
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2 – 控制器图
- en: In general, paths handled by your add-on should start with your add-on’s name,
    to avoid name clashes. Of course, if you extend some of the add-on’s functionality,
    you’ll use this add-on’s name.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您附加的路径应该以您的附加组件的名称开头，以避免名称冲突。当然，如果您扩展了附加组件的一些功能，您将使用这个附加组件的名称。
- en: odoo.http.route
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: odoo.http.route
- en: The `route` decorator allows us to tell Odoo that a method should be web-accessible
    in the first place, and the first parameter determines on which path it is accessible.
    Instead of a string, you can also pass a list of strings, if you use the same
    function to serve multiple paths.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`route` 装饰器允许我们告诉 Odoo，一个方法首先应该是网络可访问的，第一个参数决定了它在哪个路径上是可访问的。如果您使用同一个函数来服务多个路径，您也可以传递一个字符串列表，而不是单个字符串。'
- en: The `type` argument defaults to `http` and determines what type of request will
    be served. While, strictly speaking, JSON is HTTP, declaring the second function
    as `type='json'` makes life a lot easier because Odoo then handles type conversions
    for us.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`type` 参数默认为 `http`，它决定了将服务哪种类型的请求。虽然严格来说 JSON 是 HTTP，但将第二个函数声明为 `type=''json''`
    会让事情变得容易得多，因为 Odoo 会为我们处理类型转换。'
- en: Don’t worry about the `auth` parameter for now; it will be addressed in the
    *Restricting access to web-accessible paths* recipe in this chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不必担心 `auth` 参数；它将在本章的 *限制对网络可访问路径的访问* 菜单中讨论。
- en: Return values
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: 'Odoo’s treatment of the functions’ return values is determined by the `type`
    argument of the `route` decorator. For `type=''http''`, we usually want to deliver
    some HTML, so the first function simply returns a string containing it. An alternative
    is to use `request.make_response()`, which gives you control over the headers
    to send in the response. So, to indicate when our page was last updated, we might
    change the last line in `students()` to the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 对函数返回值的处理由 `route` 装饰器的 `type` 参数决定。对于 `type='http'`，我们通常希望提供一些 HTML，所以第一个函数简单地返回一个包含它的字符串。另一种选择是使用
    `request.make_response()`，这让您可以控制发送到响应中的头部。因此，为了指示我们的页面最后一次更新时间，我们可能将 `students()`
    中的最后一行代码更改为以下代码：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code sends a `Last-modified` header along with the HTML we generated, telling
    the browser when the list was modified for the last time. We can extract this
    information from the `write_date` field of the `hostel.student` model.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码在生成的 HTML 中发送一个 `Last-modified` 头部，告诉浏览器列表最后一次修改的时间。我们可以从 `hostel.student`
    模型的 `write_date` 字段中提取这个信息。
- en: 'In order for the preceding snippet to work, you’ll have to add some imports
    at the top of the file, as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使前面的代码片段正常工作，您需要在文件顶部添加一些导入，如下所示：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can also create a `Response` object of `werkzeug` manually and return that,
    but there’s little to gain for the effort.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以手动创建一个 `werkzeug` 的 `Response` 对象并返回它，但这样做所获得的收益很小。
- en: Important information
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: Generating HTML manually is nice for demonstration purposes, but you should
    never do this in production code. Always use templates, as demonstrated in the
    *Creating or modifying templates – QWeb* recipe in [*Chapter 15*](B20997_15.xhtml#_idTextAnchor861),
    *Web Client Development*, and return them by calling `request.render()`. This
    will give you localization for free and will make your code better by separating
    business logic from the presentation layer. Also, templates provide you with functions
    to escape data before outputting HTML. The preceding code is vulnerable to cross-site
    scripting attacks (if a user manages to slip a `script` tag into the book name,
    for example).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 生成HTML手动对于演示目的来说很棒，但在生产代码中你永远不应该这样做。始终使用模板，如在第15章中演示的*创建或修改模板 – QWeb*食谱所示，*Web客户端开发*，并通过调用`request.render()`返回它们。这将免费提供本地化，并通过将业务逻辑与表示层分离来使你的代码更好。此外，模板为你提供了在输出HTML之前转义数据的函数。前面的代码容易受到跨站脚本攻击（如果用户设法将`script`标签滑入书名，例如）。
- en: For a JSON request, simply return the data structure you want to hand over to
    the client; Odoo takes care of serialization. For this to work, you should restrict
    yourself to data types that are JSON-serializable, which generally means dictionaries,
    lists, strings, floats, and integers.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于JSON请求，只需返回你想要传递给客户端的数据结构；Odoo会负责序列化。为了使其工作，你应该限制自己使用JSON可序列化的数据类型，这通常意味着字典、列表、字符串、浮点数和整数。
- en: odoo.http.request
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: odoo.http.request
- en: The `request` object is a static object referring to the currently handled request,
    which contains everything you need in order to take action. The most important
    aspect here is the `request.env` property, which contains an `Environment` object
    that is just the same as `self.env` for models. This environment is bound to the
    current user, which is not in the preceding example, because we used `auth='none'`.
    The lack of a user is also why we have to `sudo()` all our calls to model methods
    in the example code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`request`对象是一个静态对象，它引用当前处理的请求，其中包含你执行操作所需的一切。这里最重要的方面是`request.env`属性，它包含一个`Environment`对象，这与模型的`self.env`完全相同。此环境绑定到当前用户，在先前的示例中不是这样，因为我们使用了`auth=''none''`。没有用户也是为什么在示例代码中我们必须使用`sudo()`来调用模型方法的原因。'
- en: 'If you’re used to web development, you’ll expect session handling, which is
    perfectly correct. Use `request.session` for an `OpenERPSession` object (which
    is quite a thin wrapper around the `Session` object of `werkzeug`) and `request.session.sid`
    to access the session ID. To store session values, just treat `request.session`
    as a dictionary, as shown in the following example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你习惯了Web开发，你会期望会话处理，这是完全正确的。使用`request.session`来获取`OpenERPSession`对象（这是对`werkzeug`的`Session`对象的薄包装）和`request.session.sid`来访问会话ID。要存储会话值，只需将`request.session`当作一个字典来处理，如下面的示例所示：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Important note
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: Note that storing data in the session is no different from using global variables.
    Only do so if you must. This is usually the case for multi-request actions, such
    as a checkout in the `website_sale` module.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在会话中存储数据与使用全局变量没有区别。只有在必须的情况下才这样做。这通常适用于多请求操作，例如在`website_sale`模块中的结账操作。
- en: There’s more...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `route` decorator can have some extra parameters in order to customize its
    behavior further. By default, all HTTP methods are allowed, and Odoo intermingles
    the parameters passed. Using the `methods` parameter, you can pass a list of methods
    to accept, which would usually be one of either `['GET']` or `['POST']`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`route`装饰器可以有一些额外的参数，以便进一步自定义其行为。默认情况下，所有HTTP方法都是允许的，Odoo会混合传递的参数。使用`methods`参数，你可以传递一个要接受的方法列表，这通常会是`[''GET'']`或`[''POST'']`之一。'
- en: To allow cross-origin requests (browsers block AJAX and some other types of
    requests to domains other than where the script was loaded from, for security
    and privacy reasons), set the `cors` parameter to `*` to allow requests from all
    origins, or a URI to restrict requests to ones originating from that URI. If this
    parameter is unset, which is the default, the `Access-Control-Allow-Origin` header
    is not set, leaving you with the browser’s standard behavior. In our example,
    we might want to set it on
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要允许跨源请求（出于安全和隐私原因，浏览器会阻止来自加载脚本以外的域的AJAX和其他类型的请求），将`cors`参数设置为`*`以允许来自所有源的请求，或者设置为URI以限制请求只能来自该URI。如果此参数未设置，默认情况下，`Access-Control-Allow-Origin`头不会设置，这将使你保持浏览器的标准行为。在我们的示例中，我们可能想要在
- en: '`/my_module/students/json` in order to allow scripts pulled from other websites
    to access the list of students.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`/my_module/students/json`以允许从其他网站拉取的脚本访问学生列表。'
- en: By default, Odoo protects certain types of requests from an attack known as
    cross-site request forgery, by passing a token along on every request. If you
    want to turn that off, set the `csrf` parameter to `False`, but note that this
    is a bad idea, in general.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Odoo通过在每个请求中传递一个令牌来保护某些类型的请求免受跨站请求伪造攻击。如果你想关闭这个功能，将`csrf`参数设置为`False`，但请注意，这通常不是一个好主意。
- en: See also
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Refer to the following points to learn more about the HTTP routes:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下要点了解有关HTTP路由的更多信息：
- en: If you host multiple Odoo databases on the same instance, then different databases
    might be running on different domains. If so, you can use the `--db-filter` options,
    or you can use the `dbfilter_from_header` module from [https://github.com/OCA/server-tools](https://github.com/OCA/server-tools),
    which helps you filter databases based on the domain.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在一个实例上托管多个Odoo数据库，那么不同的数据库可能运行在不同的域上。如果是这样，你可以使用`--db-filter`选项，或者你可以使用来自[https://github.com/OCA/server-tools](https://github.com/OCA/server-tools)的`dbfilter_from_header`模块，该模块可以帮助你根据域过滤数据库。
- en: To see how using templates makes modularity possible, check out the *Modifying
    an existing handler* recipe later in the chapter.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解使用模板如何使模块化成为可能，请查看本章后面的*修改现有处理器*食谱。
- en: Restricting access to web-accessible paths
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制对网络访问路径的访问
- en: As an Odoo developer, one of your primary concerns is ensuring the security
    of the application. Restricting access to web-accessible paths is a crucial aspect
    of access control. It involves determining who can or cannot access specific routes
    or functionalities within the Odoo application. Odoo provides different authentication
    mechanisms to control user access. Understanding and implementing these mechanisms
    is essential for ensuring that only authorized users can interact with sensitive
    or protected parts of the application. For instance, you might want to restrict
    certain routes to authenticated users only.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Odoo开发者，你主要关心的问题之一是确保应用程序的安全性。限制对可网络访问路径的访问是访问控制的一个关键方面。这涉及到确定谁可以或不能访问Odoo应用程序中的特定路由或功能。Odoo提供了不同的认证机制来控制用户访问。理解和实施这些机制对于确保只有授权用户可以与应用程序的敏感或受保护部分交互至关重要。例如，你可能只想限制某些路由对已认证用户开放。
- en: We’ll explore the three authentication mechanisms Odoo provides for routes in
    this recipe. We’ll define routes with different authentication mechanisms in order
    to show their differences.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探讨Odoo提供的三种认证机制。我们将使用不同的认证机制定义路由，以展示它们之间的差异。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As we extend the code from the previous recipe, we’ll also depend on the `hostel.student`
    model of [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118), *Application Models*,
    so you should retrieve its code in order to proceed.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在扩展前一个食谱中的代码时，我们还将依赖于[*第4章*](B20997_04.xhtml#_idTextAnchor118)，*应用程序模型*中的`hostel.student`模型，因此你应该检索其代码以便继续。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Define the handlers in `controllers/main.py`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在`controllers/main.py`中定义处理器：
- en: 'Add a path that shows all the students, as shown in the following example:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个路径，显示所有学生，如下所示：
- en: '[PRE8]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add a path that shows all the students and indicates which ones belong to the
    current user, if any. This is shown in the following example:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个路径，显示所有学生，并指明哪些属于当前用户（如果有）。这如下面的示例所示：
- en: '[PRE9]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add a path that shows the current user’s students, as follows:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个路径，显示当前用户的学生，如下所示：
- en: '[PRE10]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With this code, the `/my_hostel/all-students` and `/my_hostel/all-students/mark-mine`
    paths look the same for unauthenticated users, while a logged-in user sees their
    students in a bold font on the latter path.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此代码，`/my_hostel/all-students`和`/my_hostel/all-students/mark-mine`路径对于未认证用户看起来相同，而登录用户在后者路径上会看到他们的学生以粗体显示。
- en: '![Figure 13.3 – Mark as mine students – with login](img/B20997_13_3.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图13.3 – 标记为我的学生 – 已登录](img/B20997_13_3.jpg)'
- en: Figure 13.3 – Mark as mine students – with login
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3 – 标记为我的学生 – 已登录
- en: 'The following screenshot shows the results without login:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了未登录时的结果：
- en: '![Figure 13.4 – Mark as mine students – without login](img/B20997_13_4.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图13.4 – 标记为我的学生 – 未登录](img/B20997_13_4.jpg)'
- en: Figure 13.4 – Mark as mine students – without login
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4 – 标记为我的学生 – 未登录
- en: The `/my_hostel/all-students/mine` path is not accessible at all for unauthenticated
    users. If you try to access it without being authenticated, you’ll be redirected
    to the login screen in order to do so.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`/my_hostel/all-students/mine`路径对未经身份验证的用户完全不可访问。如果您未经身份验证尝试访问它，您将被重定向到登录屏幕。'
- en: '![Figure 13.5 – Access via unauthenticated users](img/B20997_13_5.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.5 – 通过未经身份验证的用户访问](img/B20997_13_5.jpg)'
- en: Figure 13.5 – Access via unauthenticated users
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.5 – 通过未经身份验证的用户访问
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The difference between authentication methods is basically what you can expect
    from the content of `request.env.user`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证方法之间的区别基本上就是您可以从`request.env.user`的内容中期待什么。
- en: For `auth='none'`, the user record is always empty, even if an authenticated
    user accesses the path. Use this if you want to serve content that has no dependencies
    on users, or if you want to provide database-agnostic functionality in a server-wide
    module.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`auth='none'`，用户记录始终为空，即使经过身份验证的用户访问该路径也是如此。如果您想提供不依赖于用户的资源，或者想在服务器范围内的模块中提供数据库无关的功能，请使用此选项。
- en: The `auth='public'` value sets the user record as a special user with an XML
    ID of `base.public_user` for unauthenticated users, and to the user’s record for
    authenticated ones. This is the right choice if you want to offer functionality
    to both unauthenticated and authenticated users, while the authenticated ones
    get some extras, as demonstrated in the preceding code.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`auth=''public''`值将用户记录设置为具有XML ID `base.public_user`的特殊用户，对于未经身份验证的用户，以及对于经过身份验证的用户。如果您想同时向未经身份验证的和经过身份验证的用户提供功能，而经过身份验证的用户还能获得一些额外功能，如前述代码所示，这是一个正确的选择。'
- en: Use `auth='user'` to ensure that only authenticated users have access to what
    you’ve got to offer. With this method, you can be sure that `request.env.user`
    points to an existing user.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`auth='user'`确保只有经过身份验证的用户才能访问您提供的内容。使用这种方法，您可以确保`request.env.user`指向一个现有用户。
- en: There’s more...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The magic of authentication methods happens in the `ir.http` model from the
    base add-on. For whatever value you pass to the `auth` parameter in your route,
    Odoo searches for a function called `_auth_method_<yourvalue>` on this model,
    so you can easily customize it by inheriting it and declaring a method that takes
    care of your authentication method of choice.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证方法的魔力发生在基础附加组件的`ir.http`模型中。无论您在路由中传递给`auth`参数的值是什么，Odoo都会在这个模型上搜索一个名为`_auth_method_<yourvalue>`的函数，这样您就可以通过继承它并声明一个处理您选择的身份验证方法的方法来轻松地自定义它。
- en: 'As an example, we will provide an authentication method called `base_group_user`,
    which will only authorize the user if the currently logged-in user is part of
    the `base.group_user` group, as shown in the following example:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将提供一个名为`base_group_user`的认证方法，它将仅在当前登录用户是`base.group_user`组的一部分时授权用户，如下例所示：
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, you can say `auth='base_group_user'` in your decorator and be sure that
    users running this route’s handler are members of the group. With a little trickery,
    you can extend this to `auth='groups(xmlid1,...)'`; its implementation is left
    as an exercise for you but is included in the GitHub repository example code at
    `Chapter13/02_paths_auth/my_hostel/models/sample_auth_http.py`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以在装饰器中使用`auth='base_group_user'`，并确信运行此路由处理器的用户是该组的成员。通过一点技巧，您可以将其扩展到`auth='groups(xmlid1,...)'`；其实现留作练习，但包含在GitHub仓库示例代码的`Chapter13/02_paths_auth/my_hostel/models/sample_auth_http.py`中。
- en: Consuming parameters passed to your handlers
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消费传递给处理器的参数
- en: It’s nice to be able to show content, but it’s better to show content as a result
    of user input. This recipe will demonstrate the different ways to receive this
    input and react to it. As in the previous recipes, we’ll make use of the `hostel.student`
    model.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 能够展示内容是件好事，但将内容作为用户输入的结果展示会更好。本食谱将演示接收这种输入并对其做出反应的不同方式。与先前的食谱一样，我们将利用`hostel.student`模型。
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'First, we’ll add a route that expects a traditional parameter with a student’s
    ID to show some details about them. Then, we’ll do the same again, but we’ll incorporate
    our parameter into the path itself:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将添加一个期望传统参数（学生ID）以显示一些详细信息的路由。然后，我们将再次这样做，但我们将参数纳入路径本身：
- en: 'Add a path that expects a student’s ID as a parameter, as shown in the following
    example:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个期望学生ID作为参数的路径，如下例所示：
- en: '[PRE12]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add a path where we can pass the student’s ID in the path, as follows:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个可以在路径中传递学生ID的路径，如下所示：
- en: '[PRE13]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you point your browser to `/my_hostel/student_details?student_id=1`, you
    should see a detailed page of the student with ID 1.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将浏览器指向`/my_hostel/student_details?student_id=1`，您应该看到ID为1的学生的详细页面。
- en: '![Figure 13.6 – The student details web page](img/B20997_13_6.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图13.6 – 学生详情网页](img/B20997_13_6.jpg)'
- en: Figure 13.6 – The student details web page
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.6 – 学生详情网页
- en: If this doesn’t exist, you’ll receive an error page.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个文件不存在，您将收到一个错误页面。
- en: '![Figure 13.7 – The student not found:Error page](img/B20997_13_7.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图13.7 – 学生未找到：错误页面](img/B20997_13_7.jpg)'
- en: Figure 13.7 – The student not found:Error page
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.7 – 学生未找到：错误页面
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By default, Odoo (actually, `werkzeug`) intermingles the `GET` and `POST` parameters
    and passes them as keyword arguments to your handler. So, by simply declaring
    your function as expecting a parameter called `student_id`, you introduce this
    parameter as either `GET` (the parameter in the URL) or `POST` (usually passed
    by the `<form>` element with your handler as the `action` attribute). Given that
    we didn’t add a default value for this parameter, the runtime will raise an error
    if you try to access this path without setting the parameter.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Odoo（实际上，`werkzeug`）将`GET`和`POST`参数混合在一起，并将它们作为关键字参数传递给您的处理程序。因此，通过简单地将您的函数声明为期望一个名为`student_id`的参数，您就引入了这个参数，无论是作为`GET`（URL中的参数）还是`POST`（通常通过具有您的处理程序作为`action`属性的`<form>`元素传递）。鉴于我们没有为这个参数添加默认值，如果在未设置参数的情况下尝试访问这个路径，运行时将引发错误。
- en: The second example makes use of the fact that, in a `werkzeug` environment,
    most paths are virtual anyway. So, we can simply define our path as containing
    some input. In this case, we say that we expect the ID of a `hostel.student` instance
    as the last component of the path. The name after the colon is the name of a keyword
    argument. Our function will be called, with this parameter passed as a keyword
    argument. Here, Odoo takes care of looking up this ID and delivering a browse
    record, which, of course, only works if the user accessing this path has appropriate
    permissions. Given that `student` is a browse record, we can simply recycle the
    first example’s function by passing `student.id` as a `student_id` parameter,
    outputing the same content.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个示例利用了在`werkzeug`环境中，大多数路径实际上都是虚拟的这一事实。因此，我们可以简单地定义我们的路径为包含一些输入。在这种情况下，我们说我们期望`hostel.student`实例的ID作为路径的最后一个组成部分。冒号后面的名称是关键字参数的名称。我们的函数将被调用，并将此参数作为关键字参数传递。在这里，Odoo负责查找此ID并传递一个浏览记录，当然，这只有在访问此路径的用户具有适当的权限时才有效。鉴于`student`是一个浏览记录，我们可以通过传递`student.id`作为`student_id`参数来简单地重用第一个示例中的函数，输出相同的内容。
- en: There’s more...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Defining parameters within a path is a functionality delivered by `werkzeug`,
    called `converters`. The `model` converter is added by Odoo, which also defines
    the converter models that accept a comma-separated list of IDs and pass a recordset
    containing those IDs to your handler.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在路径内定义参数是`werkzeug`提供的一项功能，称为`converters`。`model`转换器是由Odoo添加的，它还定义了接受以逗号分隔的ID列表的转换器模型，并将包含这些ID的记录集传递给您的处理程序。
- en: The beauty of converters is that the runtime coerces parameters to the expected
    type, whereas you’re on your own with normal keyword parameters. These are delivered
    as strings, and you have to take care of the necessary type conversions yourself,
    as seen in the first example.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 转换器的美妙之处在于，运行时会将参数强制转换为期望的类型，而您在使用常规关键字参数时则要自己处理。这些参数作为字符串提供，您必须自己处理必要的类型转换，如第一个示例所示。
- en: Built-in `werkzeug` converters include not only `int`, `float`, and `string`
    but also more intricate ones, such as `path`, `any`, and `uuid`. You can look
    up their semantics at [https://werkzeug.palletsprojects.com/en/2.3.x/](https://werkzeug.palletsprojects.com/en/2.3.x/).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的`werkzeug`转换器不仅包括`int`、`float`和`string`，还包括更复杂的类型，如`path`、`any`和`uuid`。您可以在[https://werkzeug.palletsprojects.com/en/2.3.x/](https://werkzeug.palletsprojects.com/en/2.3.x/)中查找它们的语义。
- en: See also
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'If you want to learn more about the HTTP routes, refer to the following points:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于HTTP路由的信息，请参考以下要点：
- en: Odoo’s custom converters are defined in `ir_http.py` in the base module and
    registered in the `_get_converters` class method of `ir.http`
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Odoo的自定义转换器在基础模块中的`ir_http.py`中定义，并在`ir.http`的`_get_converters`类方法中注册
- en: If you want to learn more about the form submission on the route, refer to the
    *Getting input from users* recipe from [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734),
    *CMS* *Website Development*
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于路由上表单提交的信息，请参考[*第14章*](B20997_14.xhtml#_idTextAnchor734)中的*从用户获取输入*配方，*CMS*
    *网站开发*
- en: Modifying an existing handler
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改现有的处理器
- en: When you install the website module, the `/website/info` path displays some
    information about your Odoo instance. In this recipe, we will override this in
    order to change this information page’s layout, as well as to change what is displayed.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当你安装网站模块时，`/website/info` 路径会显示有关你的 Odoo 实例的一些信息。在这个食谱中，我们将覆盖它以更改这个信息页面的布局，以及更改显示的内容。
- en: Getting ready
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Install the `website` module and inspect the /`website/info` path. In this recipe,
    we will update the `/website/info` route to provide more information.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 `website` 模块并检查 `/website/info` 路径。在这个食谱中，我们将更新 `/website/info` 路由以提供更多信息。
- en: How to do it...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We’ll have to adapt the existing template and override the existing handler.
    We can do this as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不得不调整现有的模板并覆盖现有的处理器。我们可以这样做：
- en: 'Override the `qweb` template in a file called `views/templates.xml`, as follows:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为 `views/templates.xml` 的文件中覆盖 `qweb` 模板，如下所示：
- en: '[PRE14]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Override the handler in a file called `controllers/main.py`, as shown in the
    following example:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为 `controllers/main.py` 的文件中覆盖处理器，如下例所示：
- en: '[PRE15]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, when visiting the info page, we’ll only see a filtered list of installed
    applications in a table, as opposed to the original definition list.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当访问信息页面时，我们只会看到一个表格中过滤后的已安装应用程序列表，而不是原始的定义列表。
- en: '![Figure 13.8 – The website info page (original)](img/B20997_13_8.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.8 – 网站信息页面（原始）](img/B20997_13_8.jpg)'
- en: Figure 13.8 – The website info page (original)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.8 – 网站信息页面（原始）
- en: 'The following screenshot shows the customized page:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了自定义页面：
- en: '![Figure 13.9 – The website info page (customized)](img/B20997_13_9.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.9 – 网站信息页面（自定义）](img/B20997_13_9.jpg)'
- en: Figure 13.9 – The website info page (customized)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.9 – 网站信息页面（自定义）
- en: How it works…
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'In the first step, we overrode an existing QWeb template. In order to find
    out which one it is, you’ll have to consult the code of the original handler.
    Usually, this will give you something similar to the following line, which tells
    you that you need to override `template.name`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们覆盖了一个现有的 QWeb 模板。为了找出它是哪一个，你将不得不查阅原始处理器的代码。通常，这会给你类似以下这样的行，告诉你需要覆盖 `template.name`：
- en: '[PRE16]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In our case, the handler used a template called `website_info`, but this one
    was immediately extended by another template called `website.show_website_info`,
    so it’s more convenient to override this one. Here, we replaced the definition
    list showing installed apps with a table. For details on how QWeb inheritance
    works, consult [*Chapter 15*](B20997_15.xhtml#_idTextAnchor861), *Web* *Client
    Development*.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，使用的处理器是一个名为 `website_info` 的模板，但这个模板立即被另一个名为 `website.show_website_info`
    的模板扩展，所以覆盖这个模板更方便。在这里，我们用表格替换了显示已安装应用程序的定义列表。有关 QWeb 继承如何工作的详细信息，请参阅[*第 15 章*](B20997_15.xhtml#_idTextAnchor861)，*Web
    客户端开发*。
- en: In order to override the handler method, we must identify the class that defines
    the handler, which is `odoo.addons.website.controllers.main.Website` in this case.
    We need to import the class to be able to inherit from it. Now, we can override
    the method and change the data passed to the response. Note that what the overridden
    handler returns here is a `Response` object and not a string of HTML, as the previous
    recipes did, for the sake of brevity. This object contains a reference to the
    template to be used and the values accessible to the template, but it is only
    evaluated at the very end of the request.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了覆盖处理器方法，我们必须识别定义处理器的类，在这个例子中是 `odoo.addons.website.controllers.main.Website`。我们需要导入这个类以便能够从它继承。现在，我们可以覆盖这个方法并更改传递给响应的数据。请注意，这里覆盖的处理器返回的是一个
    `Response` 对象，而不是像之前的食谱那样返回一个 HTML 字符串，为了简洁起见。这个对象包含要使用的模板的引用以及模板可访问的值，但它仅在请求的末尾进行评估。
- en: 'In general, there are three ways to change an existing handler:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，有三种方法可以更改现有的处理器：
- en: If it uses a QWeb template, the simplest way to change it is to override the
    template. This is the right choice for layout changes and small logic changes.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果它使用 QWeb 模板，最简单的方法是覆盖模板。这对于布局更改和小的逻辑更改是正确的选择。
- en: QWeb templates get a context passed, which is available in the response as the
    `qcontext` member. This is usually a dictionary where you can add or remove values
    to suit your needs. In the preceding example, we filtered the list of apps to
    the website only.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QWeb 模板接收一个上下文传递，这个上下文在响应中作为 `qcontext` 成员可用。这通常是一个字典，你可以添加或删除值以满足你的需求。在先前的例子中，我们过滤了应用程序列表，只显示网站上的应用程序。
- en: If the handler receives parameters, you can also preprocess those in order to
    make the overridden handler behave in the way you want.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果处理程序接收参数，你还可以预处理这些参数，以便覆盖的处理程序按你想要的方式行为。
- en: There’s more...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: As seen in the preceding section, inheritance with controllers works slightly
    differently than model inheritance; you actually need a reference to the base
    class and to use Python inheritance on it.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，与控制器一起使用的继承与模型继承略有不同；实际上你需要对基类有一个引用，并对其使用Python继承。
- en: Don’t forget to decorate your new handler with the `@http.route` decorator;
    Odoo uses it as a marker, for which methods are exposed to the network layer.
    If you omit the decorator, you actually make the handler’s path inaccessible.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记用`@http.route`装饰器装饰你的新处理程序；Odoo将其用作标记，用于确定哪些方法暴露给网络层。如果你省略了装饰器，实际上会使处理程序的路径不可访问。
- en: The `@http.route` decorator itself behaves similarly to field declarations –
    every value you don’t set will be derived from the decorator of the function you’re
    overriding, so we don’t have to repeat values we don’t want to change.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`@http.route`装饰器本身的行为类似于字段声明 – 你没有设置的每个值都将从你正在覆盖的函数的装饰器中继承，所以我们不需要重复我们不想更改的值。'
- en: 'After receiving a `response` object from the function you override, you can
    do a lot more than just change the QWeb context:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在从你覆盖的函数接收`response`对象后，你可以做很多不仅仅是改变QWeb上下文的事情：
- en: You can add or remove HTTP headers by manipulating `response.headers`.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过操作`response.headers`来添加或删除HTTP头。
- en: If you want to render an entirely different template, you can overwrite `response.template`.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想要渲染一个完全不同的模板，你可以覆盖`response.template`。
- en: To detect whether a response is based on QWeb in the first place, query `response.is_qweb`.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要检测响应是否最初基于QWeb，请查询`response.is_qweb`。
- en: The resulting HTML code is available by calling `response.render()`.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过调用`response.render()`可以获得生成的HTML代码。
- en: See also
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: Details on QWeb templates will be given in [*Chapter 15*](B20997_15.xhtml#_idTextAnchor861),
    *Web* *Client Development*.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于QWeb模板的详细信息将在[*第15章*](B20997_15.xhtml#_idTextAnchor861)，*Web客户端开发*中给出。
- en: Serving static resources
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供静态资源
- en: Web pages contain several types of static resources, such as images, videos,
    CSS, and so on. In this recipe, we will see how you can manage such static resources
    for your module.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 网页包含多种类型的静态资源，例如图片、视频、CSS等。在本食谱中，我们将了解如何管理模块中的此类静态资源。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will display an image on the page. Grab the `my_hostel`
    module from the previous recipe. Select any image from your system and put that
    image inside the `/``my_hostel/static/src/img` directory.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们将在页面上显示一个图片。从上一个食谱中获取`my_hostel`模块。从你的系统中选择任何图片，并将该图片放入`/my_hostel/static/src/img`目录中。
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to show an image on the web page:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在网页上显示图片：
- en: Add your image to the `/``my_hostel/static/src/img` directory.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的图片添加到`/my_hostel/static/src/img`目录中。
- en: 'Define the new route in `controller`. In the code, replace the image URL with
    the URL of your image:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`controller`中定义新的路由。在代码中，将图片URL替换为你的图片URL：
- en: '[PRE17]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Restart the server and update the module to apply the changes. Now, visit `/demo_page`
    to see the image on the page.![Figure 13.10 – The static image on the web page](img/B20997_13_10.jpg)
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动服务器并更新模块以应用更改。现在，访问`/demo_page`以查看页面上的图片。![图13.10 – 网页上的静态图片](img/B20997_13_10.jpg)
- en: Figure 13.10 – The static image on the web page
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.10 – 网页上的静态图片
- en: How it works…
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'All the files placed under the `/static` folder are considered static resources
    and are publicly accessible. In our example, we have put our image in the `/static/src/img`
    directory. You can place the static resource anywhere under the `static` directory,
    but there is a recommended directory structure based on the type of file:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 所有放置在`/static`文件夹下的文件都被视为静态资源，并且是公开可访问的。在我们的例子中，我们将图片放在了`/static/src/img`目录中。你可以在`static`目录下的任何位置放置静态资源，但基于文件类型，有一个推荐的目录结构：
- en: '`/static/src/img` is the directory used for images'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/static/src/img`是用于图片的目录'
- en: '`/static/src/css` is the directory used for CSS files'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/static/src/css`是用于CSS文件的目录'
- en: '`/static/src/scss` is the directory used for SCSS files'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/static/src/scss`是用于SCSS文件的目录'
- en: '`/static/src/fonts` is the directory used for font files'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/static/src/fonts`是用于字体文件的目录'
- en: '`/static/src/js` is the directory used for JavaScript files'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/static/src/js`是用于JavaScript文件的目录'
- en: '`/static/src/xml` is the directory used for XML files for client-side QWeb
    templates'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/static/src/xml`是用于客户端QWeb模板的XML文件的目录'
- en: '`/static/lib` is the directory used for files of external libraries'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/static/lib` 是用于外部库文件的目录'
- en: In our example, we displayed an image on the page. You can also access the image
    directly from `/my_hostel/static/src/image/odoo.png`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们在页面上展示了一张图片。您也可以直接从 `/my_hostel/static/src/image/odoo.png` 访问该图片。
- en: In this recipe, we displayed a static resource (an image) on the web page, and
    we saw the recommended directories for different static resources. There are more
    simple ways to present page content and static resources, which we will see in
    the next chapter.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们在网页上展示了一个静态资源（一张图片），并看到了不同静态资源推荐使用的目录。接下来章节中，我们将看到更多简单的方式来展示页面内容和静态资源。
