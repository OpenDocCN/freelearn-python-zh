- en: <st c="0">10</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">10</st>
- en: <st c="3">Implementing a Shopping Cart System</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="3">实现购物车系统</st>
- en: <st c="39">In this chapter, we’ll learn all about how to make a shopping cart
    for websites.</st> <st c="121">To implement this feature, we will need to learn</st>
    <st c="169">how</st> **<st c="174">web sessions</st>** <st c="186">work and how
    to use</st> **<st c="207">Django sessions</st>**<st c="222">. Django sessions</st>
    <st c="239">will be used to store user-specific information as they navigate through</st>
    <st c="313">the site.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39">在本章中，我们将学习如何为网站创建购物车。</st> <st c="121">为了实现这一功能，我们需要了解</st> <st c="169">如何</st>
    **<st c="174">使用网络会话</st>** <st c="186">以及如何使用</st> **<st c="207">Django会话</st>**<st
    c="222">。Django会话</st> <st c="239">将用于在用户浏览网站时存储特定于用户的信息。</st>
- en: <st c="322">In this chapter, we will be covering the</st> <st c="364">following
    topics:</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="322">在本章中，我们将涵盖以下主题：</st> <st c="364">包括：</st>
- en: <st c="381">Introducing</st> <st c="394">web sessions</st>
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="381">介绍</st> <st c="394">网络会话</st>
- en: <st c="406">Creating a</st> <st c="418">cart app</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="406">创建一个</st> <st c="418">购物车应用程序</st>
- en: <st c="426">Adding movies to</st> <st c="444">the cart</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="426">将电影添加到购物车</st> <st c="444">。</st>
- en: <st c="452">Listing movies added to</st> <st c="477">the cart</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="452">列出添加到购物车的电影</st> <st c="477">。</st>
- en: <st c="485">Removing movies from</st> <st c="507">the cart</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="485">从购物车中删除电影</st> <st c="507">。</st>
- en: <st c="515">By the end of the chapter, you will have the knowledge to work with
    web sessions, implement shopping cart systems, and track and maintain user information
    between requests from the</st> <st c="697">same user.</st>
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="515">到本章结束时，你将具备使用网络会话、实现购物车系统以及跟踪和维护同一用户之间请求的用户信息所需的知识。</st> <st c="697">。</st>
- en: <st c="707">Technical requirements</st>
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="707">技术要求</st>
- en: <st c="730">In this chapter, we will be using</st> **<st c="765">Python 3.10+</st>**<st
    c="777">. Additionally, we will be using the</st> **<st c="814">VS Code</st>**
    <st c="821">editor in this book, which you can download</st> <st c="866">from</st>
    [<st c="871">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="901">.</st>
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="730">在本章中，我们将使用</st> **<st c="765">Python 3.10+</st>**<st c="777">。此外，我们将在本书中使用</st>
    **<st c="814">Visual Studio Code</st>** <st c="821">编辑器，您可以从</st> <st c="866">以下位置</st>
    [<st c="871">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="901">下载。</st>
- en: <st c="902">The code for this chapter is located</st> <st c="940">at</st> [<st
    c="943">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter10/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter10/moviesstore)<st
    c="1051">.</st>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="902">本章的代码位于</st> <st c="940">以下位置</st> [<st c="943">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter10/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter10/moviesstore)<st
    c="1051">。</st>
- en: <st c="1052">The CiA video for this chapter can be found</st> <st c="1097">at</st>
    [<st c="1100">https://packt.link/mEcH8</st>](https://packt.link/mEcH8)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1052">本章的CiA视频可以在</st> <st c="1097">以下位置找到</st> [<st c="1100">https://packt.link/mEcH8</st>](https://packt.link/mEcH8)
- en: <st c="1124">Introducing web sessions</st>
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1124">介绍网络会话</st>
- en: <st c="1149">Do you understand how the login system functions?</st> <st c="1200">How
    does the application recognize my connection status?</st> <st c="1257">How does
    it distinguish between displaying a logout button for a logged-in user and a login
    button for a friend who is not connected?</st> <st c="1391">How long does the
    application retain my</st> <st c="1431">connection status?</st>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1149">你理解登录系统是如何工作的吗？</st> <st c="1200">应用程序是如何识别我的连接状态的？</st> <st c="1257">它是如何区分为已登录用户显示注销按钮和为未连接的朋友显示登录按钮的？</st>
    <st c="1391">应用程序会保留我的</st> <st c="1431">连接状态多长时间？</st>
- en: <st c="1449">In this chapter, we’ll address these questions and explore the
    significance of web sessions in the development of web applications.</st> <st
    c="1582">We will explore these elements in the</st> <st c="1620">following order:</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1449">在本章中，我们将解答这些问题，并探讨网络会话在Web应用程序开发中的重要性。</st> <st c="1582">我们将按照以下顺序探讨这些元素：</st>
- en: <st c="1636">HTTP</st> <st c="1642">protocol limitations</st>
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="1636">HTTP</st> <st c="1642">协议限制</st>
- en: <st c="1662">Web sessions</st>
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="1662">网络会话</st>
- en: <st c="1675">Django</st> <st c="1683">login scenario</st>
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="1675">Django</st> <st c="1683">登录场景</st>
- en: <st c="1697">Django sessions</st>
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="1697">Django会话</st>
- en: <st c="1713">HTTP protocol limitations</st>
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="1713">HTTP协议限制</st>
- en: <st c="1739">Currently, our</st> <st c="1754">interaction with the Movies Store
    website relies on the HTTP protocol.</st> <st c="1826">For instance, to access
    movie information, we utilize</st> `<st c="1880">http://localhost:8000/movies</st>`<st
    c="1908">, and for logging in, we use</st> `<st c="1937">http://localhost:8000/login</st>`<st
    c="1964">. Each request we make utilizes the HTTP protocol as its</st> <st c="2021">communication
    medium.</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1739">目前，我们与电影商店网站的交互依赖于HTTP协议。</st> <st c="1826">例如，要访问电影信息，我们使用</st>
    `<st c="1880">http://localhost:8000/movies</st>`<st c="1908">，而登录时使用</st> `<st
    c="1937">http://localhost:8000/login</st>`<st c="1964">。我们发出的每个请求都使用HTTP协议作为其</st>
    <st c="2021">通信媒介。</st>
- en: <st c="2042">Nevertheless, the HTTP protocol has its limitations.</st> <st c="2096">It
    operates in a</st> **<st c="2113">stateless</st>** <st c="2122">manner, implying
    that the server doesn’t retain any information (state) between successive requests.</st>
    <st c="2224">With each new request, a fresh connection is established, removing
    any knowledge about previous interactions.</st> <st c="2334">Essentially, it lacks
    memory of</st> <st c="2366">past actions.</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2042">尽管如此，HTTP协议有其局限性。</st> <st c="2096">它以</st> **<st c="2113">无状态</st>**
    <st c="2122">方式运行，这意味着服务器在连续请求之间不保留任何信息（状态）。</st> <st c="2224">每次新的请求都会建立一个新的连接，消除对先前交互的任何了解。</st>
    <st c="2334">本质上，它缺乏对</st> <st c="2366">过去行为的记忆。</st>
- en: <st c="2379">However, when logged into the application, subsequent requests
    display a logout button, indicating the application’s ability to identify users
    and maintain state data.</st> <st c="2548">This functionality is achieved through
    Django sessions, which augment the capabilities of the</st> <st c="2642">HTTP
    protocol.</st>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2379">然而，当登录到应用程序后，后续请求会显示一个注销按钮，这表明应用程序能够识别用户并维护状态数据。</st> <st c="2548">此功能是通过Django会话实现的，它增强了HTTP协议的功能。</st>
- en: <st c="2656">Web sessions</st>
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="2656">Web会话</st>
- en: <st c="2669">A</st> **<st c="2672">web session</st>** <st c="2683">comprises</st>
    <st c="2693">a sequence of continuous actions performed by a visitor on a website
    within a specified period.</st> <st c="2790">Each framework offers its own method
    for implementing sessions to monitor visitors’ activities.</st> *<st c="2886">Figure
    10</st>**<st c="2895">.1</st>* <st c="2897">illustrates the functioning of</st>
    <st c="2929">Django sessions.</st>
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2669">一个</st> **<st c="2672">Web会话</st>** <st c="2683">由</st> <st c="2693">在指定时间内访问者在网站上执行的一系列连续操作组成。</st>
    <st c="2790">每个框架都提供自己的方法来实现会话，以监控访问者的活动。</st> *<st c="2886">图10</st>**<st c="2895">.1</st>*
    <st c="2897">说明了Django会话的工作原理。</st>
- en: '![Figure 10.1 – An example of a Django session operation](img/B22457_10_1.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – Django会话操作的示例](img/B22457_10_1.jpg)'
- en: <st c="3299">Figure 10.1 – An example of a Django session operation</st>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3299">图10.1 – Django会话操作的示例</st>
- en: <st c="3353">Let’s analyze the</st> <st c="3372">previous scenario:</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3353">让我们分析</st> <st c="3372">之前的场景：</st>
- en: <st c="3390">The user navigates to the login page</st> <st c="3428">at</st>
    `<st c="3431">http://localhost:8000/login</st>`<st c="3458">.</st>
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3390">用户导航到登录页面</st> <st c="3428">在</st> `<st c="3431">http://localhost:8000/login</st>`<st
    c="3458">。</st>
- en: <st c="3459">Django then sends an HTTP response to the user, containing the</st>
    <st c="3523">login form.</st>
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3459">然后Django向用户发送一个包含</st> <st c="3523">登录表单</st>的HTTP响应。</st>
- en: <st c="3534">The user fills out the login form and presses the</st> **<st c="3585">Login</st>**
    <st c="3590">button.</st> <st c="3599">Django validates the user data, and if
    it’s accurate, creates session data for the user, and assigns them an ID or</st>
    <st c="3713">a</st> **<st c="3716">session key</st>**<st c="3727">. By default,
    the session data is stored in the database (we will see it in action in the</st>
    <st c="3817">next section).</st>
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3534">用户填写登录表单并点击</st> **<st c="3585">登录</st>** <st c="3590">按钮。</st>
    <st c="3599">Django验证用户数据，如果准确无误，则为用户创建会话数据，并分配一个ID或</st> <st c="3713">一个</st>
    **<st c="3716">会话密钥</st>**<st c="3727">。默认情况下，会话数据存储在数据库中（我们将在下一节中看到其操作）。</st>
- en: <st c="3831">Django sends a cookie to the user’s browser.</st> <st c="3877">This
    cookie contains a session ID, which is used to retrieve the user’s session data
    on subsequent requests.</st> <st c="3986">After successful login, Django redirects
    the user to the</st> <st c="4043">home page.</st>
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3831">Django向用户的浏览器发送一个cookie。</st> <st c="3877">这个cookie包含一个会话ID，用于在后续请求中检索用户的会话数据。</st>
    <st c="3986">登录成功后，Django将用户重定向到</st> <st c="4043">主页。</st>
- en: <st c="4053">Each subsequent request will render the navigation menu with the</st>
    **<st c="4119">Logout</st>** <st c="4125">button, as the session ID is included
    in the user’s requests.</st> <st c="4188">This process continues until the user
    clicks on the</st> **<st c="4240">Logout</st>** <st c="4246">button (which removes
    the session data</st> <st c="4285">and the cookie), or until the session expires,
    which defaults to</st> <st c="4351">two weeks.</st>
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="4053">每个后续请求都会渲染带有</st> **<st c="4119">注销</st>** <st c="4125">按钮的导航菜单，因为会话ID包含在用户的请求中。</st>
    <st c="4188">这个过程会一直持续到用户点击</st> **<st c="4240">注销</st>** <st c="4246">按钮（这将删除会话数据和cookie），或者直到会话过期，默认为</st>
    <st c="4351">两周。</st>
- en: <st c="4361">Now that we have learned how Django sessions work, let’s replicate
    it with our Movies</st> <st c="4448">Store project.</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4361">现在我们已经学习了Django会话的工作原理，让我们用我们的电影</st> <st c="4448">商店项目来复制它。</st>
- en: <st c="4462">Django login scenario</st>
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="4462">Django登录场景</st>
- en: <st c="4484">Let’s follow the next steps</st> <st c="4513">to see Django sessions</st>
    <st c="4536">in action:</st>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4484">让我们按照以下步骤</st> <st c="4513">来查看Django会话的实际操作：</st>
- en: <st c="4546">Run the application in incognito mode, go to</st> `<st c="4592">http://localhost:8000/login</st>`<st
    c="4619">, and use the credentials of an already registered user to</st> <st c="4678">log
    in.</st>
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="4546">在隐身模式下运行应用程序，转到</st> `<st c="4592">http://localhost:8000/login</st>`<st
    c="4619">，并使用已注册用户的凭据进行</st> <st c="4678">登录。</st>
- en: <st c="4685">Go to</st> [<st c="4692">https://inloop.github.io/sqlite-viewer/</st>](https://inloop.github.io/sqlite-viewer/)<st
    c="4731">, drag and drop your</st> `<st c="4752">db.sqlite3</st>` <st c="4762">file
    onto the page, and then select the</st> `<st c="4803">django_session</st>` <st
    c="4817">table.</st> <st c="4825">You will see a new</st> `<st c="4844">session_key</st>`<st
    c="4855">,</st> `<st c="4857">session_data</st>`<st c="4869">, and</st> `<st c="4875">expire_date</st>`
    <st c="4886">corresponding to the user who just logged in (</st>*<st c="4933">Figure
    10</st>**<st c="4943">.2</st>*<st c="4945">).</st>
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="4685">转到</st> [<st c="4692">https://inloop.github.io/sqlite-viewer/</st>](https://inloop.github.io/sqlite-viewer/)<st
    c="4731">，将您的</st> `<st c="4752">db.sqlite3</st>` <st c="4762">文件拖放到页面上，然后选择</st>
    `<st c="4803">django_session</st>` <st c="4817">表。</st> <st c="4825">您将看到与刚刚登录的用户对应的新的</st>
    `<st c="4844">session_key</st>`<st c="4855">，</st> `<st c="4857">session_data</st>`<st
    c="4869">，和</st> `<st c="4875">expire_date</st>` <st c="4886">（</st>*<st c="4933">图10</st>**<st
    c="4943">.2</st>*<st c="4945">）。</st>
- en: '![Figure 10.2 – The django_session table](img/B22457_10_2.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – django_session表](img/B22457_10_2.jpg)'
- en: <st c="5833">Figure 10.2 – The django_session table</st>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5833">图10.2 – django_session表</st>
- en: <st c="5871">The previous</st> <st c="5885">Django session data comes with a
    cookie.</st> <st c="5926">Go to your browser, verify that you’re located on the</st>
    **<st c="5980">Movies Store</st>** <st c="5992">home page, and open the developer
    console.</st> <st c="6036">For Google Chrome, you can open the developer console
    with</st> *<st c="6095">Shift</st>* <st c="6100">+</st> *<st c="6103">Ctrl</st>*
    <st c="6107">+</st> *<st c="6110">J</st>* <st c="6111">(on Windows/Linux), or</st>
    *<st c="6135">option</st>* <st c="6141">+</st> *<st c="6144">⌘</st>* <st c="6145">+</st>
    *<st c="6148">J</st>* <st c="6149">(</st><st c="6151">on macOS).</st>
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="5871">之前的</st> <st c="5885">Django会话数据包含一个cookie。</st> <st c="5926">打开您的浏览器，确认您位于</st>
    **<st c="5980">电影商店</st>** <st c="5992">主页上，并打开开发者控制台。</st> <st c="6036">对于Google
    Chrome，您可以通过</st> *<st c="6095">Shift</st>* <st c="6100">+</st> *<st c="6103">Ctrl</st>*
    <st c="6107">+</st> *<st c="6110">J</st>* <st c="6111">(在Windows/Linux上)，或者</st>
    *<st c="6135">option</st>* <st c="6141">+</st> *<st c="6144">⌘</st>* <st c="6145">+</st>
    *<st c="6148">J</st>* <st c="6149">(在macOS上)来打开开发者控制台。</st>
- en: <st c="6161">Then, navigate to the</st> `<st c="6221">http://127.0.0.1:8000</st>`
    <st c="6242">option, and you will see the stored cookie data, which includes a</st>
    `<st c="6309">sessionid</st>` <st c="6318">that matches with the</st> `<st c="6341">session_key</st>`
    <st c="6352">stored in the database (</st>*<st c="6377">Figure 10</st>**<st c="6387">.3</st>*<st
    c="6389">).</st>
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="6161">然后，导航到</st> `<st c="6221">http://127.0.0.1:8000</st>` <st c="6242">选项，您将看到存储的cookie数据，其中包括一个</st>
    `<st c="6309">sessionid</st>` <st c="6318">与数据库中存储的</st> `<st c="6341">session_key</st>`
    <st c="6352">相匹配（</st>*<st c="6377">图10</st>**<st c="6387">.3</st>*<st c="6389">）。</st>
- en: '![Figure 10.3 – The Movies Store cookie data](img/B22457_10_3.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3 – 电影商店cookie数据](img/B22457_10_3.jpg)'
- en: <st c="6786">Figure 10.3 – The Movies Store cookie data</st>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6786">图10.3 – 电影商店cookie数据</st>
- en: <st c="6828">That’s how Django tracks our website interactions; if you click
    the</st> **<st c="6897">Logout</st>** <st c="6903">button, all this data</st>
    <st c="6926">will disappear.</st>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6828">这就是Django跟踪我们的网站交互的方式；如果你点击</st> **<st c="6897">注销</st>** <st c="6903">按钮，所有这些数据</st>
    <st c="6926">都将消失。</st>
- en: <st c="6941">Note</st>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6941">注意</st>
- en: <st c="6946">Session</st> <st c="6955">data is not only created during the login
    scenario or exclusively for logged-in users.</st> <st c="7042">If your application
    utilizes Django’s session functionalities at any point, it will also generate
    the corresponding session and cookie data.</st> <st c="7183">We will see this
    in action later when we implement the shopping cart system.</st> <st c="7260">You
    can find more information about</st> <st c="7296">Django sessions</st> <st c="7312">here:</st>
    [<st c="7318">https://docs.djangoproject.com/en/5.0/topics/http/sessions/</st>](https://docs.djangoproject.com/en/5.0/topics/http/sessions/)<st
    c="7377">.</st>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6946">会话数据不仅在登录场景中创建，也不只是为登录用户创建。</st> <st c="7042">如果你的应用程序在任何时候利用Django的会话功能，它也会生成相应的会话和cookie数据。</st>
    <st c="7183">我们将在实现购物车系统时看到这一点。</st> <st c="7260">有关</st> <st c="7296">Django会话</st>的更多信息，请参阅：</st>
    [<st c="7318">https://docs.djangoproject.com/en/5.0/topics/http/sessions/</st>](https://docs.djangoproject.com/en/5.0/topics/http/sessions/)<st
    c="7377">。</st>
- en: <st c="7378">Django sessions</st>
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="7378">Django会话</st>
- en: '**<st c="7394">Django sessions</st>** <st c="7410">are a</st> <st c="7417">mechanism
    for persisting data across HTTP requests in a web application.</st> <st c="7490">They
    allow Django to store and retrieve arbitrary data for a specific user across multiple
    requests.</st> <st c="7591">Here are some key points about</st> <st c="7622">Django
    sessions:</st>'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="7394">Django会话</st>** <st c="7410">是在Web应用程序中跨HTTP请求持久化数据的一种机制。</st>
    <st c="7490">它们允许Django在多个请求中为特定用户存储和检索任意数据。</st> <st c="7591">以下是关于</st> <st
    c="7622">Django会话</st>的一些关键点：'
- en: '**<st c="7638">Client-side cookies</st>**<st c="7658">: By default, Django
    sessions are implemented using client-side cookies.</st> <st c="7732">Django</st>
    <st c="7739">commonly sets a unique session ID in the user’s browser as</st> <st
    c="7798">a cookie.</st>'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7638">客户端cookies</st>**<st c="7658">：默认情况下，Django会话是通过客户端cookies实现的。</st>
    <st c="7732">Django</st> <st c="7739">通常会在用户的浏览器中设置一个唯一的会话ID，作为</st> <st c="7798">cookie。</st>'
- en: '**<st c="7807">Server-side storage</st>**<st c="7827">: While the</st> <st
    c="7840">session ID is stored in the client’s browser, the actual session data
    is stored server-side.</st> <st c="7933">By default, the session data is stored
    in</st> <st c="7975">the database.</st>'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7807">服务器端存储</st>**<st c="7827">：虽然会话ID存储在客户端的浏览器中，但实际的会话数据存储在服务器端。</st>
    <st c="7933">默认情况下，会话数据存储在</st> <st c="7975">数据库中。</st>'
- en: '**<st c="7988">Configuration options</st>**<st c="8010">: Django offers various
    configuration options for sessions, including</st> <st c="8081">the session engine
    (e.g., database-backed, cached, file-based), session expiry time, and encryption
    of</st> <st c="8184">session data.</st>'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7988">配置选项</st>**<st c="8010">：Django为会话提供了各种配置选项，包括</st> <st c="8081">会话引擎（例如，数据库支持、缓存、基于文件），会话过期时间和会话数据的加密。</st>'
- en: '**<st c="8197">Integration with authentication</st>**<st c="8229">: Django
    sessions often work with Django’s authentication</st> <st c="8288">system.</st>
    <st c="8296">For example, when a user logs in, their authentication status is
    typically stored in the session, allowing Django to keep the user logged in across
    multiple requests until they explicitly log out or the</st> <st c="8499">session
    expires.</st>'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="8197">与认证集成</st>**<st c="8229">：Django会话通常与Django的认证</st> <st c="8288">系统一起工作。</st>
    <st c="8296">例如，当用户登录时，他们的认证状态通常会存储在会话中，使得Django能够在多个请求之间保持用户登录状态，直到他们明确退出或</st>
    <st c="8499">会话过期。</st>'
- en: '`<st c="8602">request.session</st>` <st c="8617">attribute.</st> <st c="8629">This
    allows them to read, modify, and delete session data as needed during</st> <st
    c="8704">request processing.</st>'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="8602">request.session</st>` <st c="8617">属性。</st> <st c="8629">这允许它们在请求处理过程中根据需要读取、修改和删除会话数据。</st>'
- en: <st c="8723">Now that we´ve learned the fundamentals of web sessions and Django
    sessions, let´s start creating the</st> <st c="8826">cart app.</st>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8723">现在我们已经学习了Web会话和Django会话的基础知识，让我们开始创建</st> <st c="8826">购物车应用</st>。
- en: <st c="8835">Creating a cart app</st>
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="8835">创建购物车应用</st>
- en: <st c="8855">All the shopping cart</st> <st c="8878">functionalities will be
    managed in their own application.</st> <st c="8936">So, let’s create a cart app.</st>
    <st c="8965">Navigate to the top</st> `<st c="8985">moviesstore</st>` <st c="8996">folder
    (the one which contains the</st> `<st c="9032">manage.py</st>` <st c="9041">file)
    and run the following in</st> <st c="9073">the Terminal:</st>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8855">所有购物车</st> <st c="8878">功能将由它们自己的应用管理。</st> <st c="8936">因此，让我们创建一个购物车应用。</st>
    <st c="8965">导航到最顶部的</st> `<st c="8985">moviesstore</st>` <st c="8996">文件夹（包含</st>
    `<st c="9032">manage.py</st>` <st c="9041">文件的文件夹）并在终端中运行以下命令：</st>
- en: <st c="9086">For macOS, run the</st> <st c="9106">following command:</st>
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="9086">对于macOS，运行以下命令：</st> <st c="9106">以下命令：</st>
- en: '[PRE0]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="9156">For Windows, run the</st> <st c="9178">following command:</st>
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="9156">对于Windows，运行以下命令：</st>
- en: '[PRE1]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*<st c="9227">Figure 10</st>**<st c="9237">.4</st>* <st c="9239">shows the</st>
    <st c="9250">new project structure.</st> <st c="9273">Verify it matches your current</st>
    <st c="9304">folder structure.</st>'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="9227">图10</st>**<st c="9237">.4</st>* <st c="9239">显示了新的项目结构。</st>
    <st c="9273">请确认它与您当前的文件夹结构相匹配。</st>'
- en: '![Figure 10.4 – The MOVIESSTORE project structure containing the cart app](img/B22457_10_4.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4 – 包含购物车应用的MOVIESSTORE项目结构](img/B22457_10_4.jpg)'
- en: <st c="9492">Figure 10.4 – The MOVIESSTORE project structure containing the
    cart app</st>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9492">图10.4 – 包含购物车应用的MOVIESSTORE项目结构</st>
- en: <st c="9563">Adding cart app in settings</st>
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="9563">在设置中添加购物车应用</st>
- en: <st c="9591">Remember</st> <st c="9600">that for each newly created app, we
    must register it in the</st> `<st c="9661">settings.py</st>` <st c="9672">file.</st>
    <st c="9679">In</st> `<st c="9682">/moviesstore/settings.py</st>`<st c="9706">,
    under</st> `<st c="9714">INSTALLED_APPS</st>`<st c="9728">, add the following
    lines</st> <st c="9754">in bold:</st>
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9591">记住</st> <st c="9600">对于每个新创建的应用，我们必须在</st> `<st c="9661">settings.py</st>`
    <st c="9672">文件中注册它。</st> <st c="9679">在</st> `<st c="9682">/moviesstore/settings.py</st>`<st
    c="9706">中，在</st> `<st c="9714">INSTALLED_APPS</st>`<st c="9728">下，添加以下加粗行：</st>
    <st c="9754">以下内容：</st>
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="9818">Including the cart URL file in the project-level URL file</st>
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="9178">包括购物车URL文件到项目级别的URL文件中</st>
- en: <st c="9876">In</st> `<st c="9880">/moviesstore/urls.py</st>`<st c="9900">,
    add</st> <st c="9905">the following lines</st> <st c="9926">in</st> <st c="9928">bold:</st>
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9876">在</st> `<st c="9880">/moviesstore/urls.py</st>`<st c="9900">中，添加以下加粗行：</st>
    <st c="9905">以下内容：</st>
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="10143">All the URLs that are defined in the</st> `<st c="10181">cart.urls</st>`
    <st c="10190">file will contain a</st> `<st c="10211">cart/</st>` <st c="10216">prefix
    (as defined in the previous path).</st> <st c="10259">We will create the</st>
    `<st c="10278">cart.urls</st>` <st c="10287">file later.</st>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10143">在</st> `<st c="10181">cart.urls</st>` <st c="10190">文件中定义的所有URL都将包含一个</st>
    `<st c="10211">cart/</st>` <st c="10216">前缀（如前一个路径中定义的）。</st> <st c="10259">我们将在稍后创建</st>
    `<st c="10278">cart.urls</st>` <st c="10287">文件。</st>
- en: <st c="10299">Now that we have created the cart app, let’s allow the addition
    of movies to</st> <st c="10377">the cart.</st>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10299">现在我们已经创建了购物车应用，让我们允许将电影添加到</st> <st c="10377">购物车。</st>
- en: <st c="10386">Adding movies to the cart</st>
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="10386">将电影添加到购物车</st>
- en: <st c="10412">To allow the addition</st> <st c="10435">of movies to the cart,
    we will follow the</st> <st c="10477">next steps:</st>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10412">为了允许将电影添加到购物车，我们将遵循以下步骤：</st> <st c="10435">以下步骤：</st>
- en: <st c="10488">Configure the</st> `<st c="10503">add_to_cart</st>` <st c="10514">URL.</st>
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="10488">配置</st> `<st c="10503">add_to_cart</st>` <st c="10514">URL。</st>
- en: <st c="10519">Define the</st> `<st c="10531">add_to_cart</st>` <st c="10542">function.</st>
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="10519">定义</st> `<st c="10531">add_to_cart</st>` <st c="10542">函数。</st>
- en: <st c="10552">Update</st> <st c="10559">the</st> `<st c="10564">movies.show</st>`
    <st c="10575">template.</st>
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="10552">更新</st> `<st c="10559">movies.show</st>` <st c="10564">模板。</st>
- en: <st c="10585">Configuring the add_to_cart URL</st>
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="10585">配置add_to_cart URL</st>
- en: <st c="10617">In</st> `<st c="10621">/cart/</st>`<st c="10627">, create a new</st>
    <st c="10641">file called</st> `<st c="10654">urls.py</st>`<st c="10661">. This
    file will contain the path regarding the URLs of the cart app.</st> <st c="10731">For
    now, fill it in with</st> <st c="10756">the following:</st>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10617">在</st> `<st c="10621">/cart/</st>`<st c="10627">中，创建一个名为</st>
    `<st c="10641">urls.py</st>`<st c="10661">的新文件。此文件将包含关于购物车应用URL的路径。</st> <st c="10731">目前，请用以下内容填充它：</st>
    <st c="10756">以下内容：</st>
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="10888">We added a new path called</st> `<st c="10916">cart/<int:id>/add</st>`
    <st c="10933">(remember that the project-level URLs file defined a</st> `<st c="10987">/cart</st>`
    <st c="10992">prefix for this file).</st> <st c="11016">The</st> `<st c="11020"><int:id></st>`
    <st c="11028">part indicates that this path expects an integer value to be passed
    from the URL and that the integer value will be associated with a variable named</st>
    `<st c="11178">id</st>`<st c="11180">. The</st> `<st c="11186">id</st>` <st c="11188">variable
    will be used to identify which movie we want to add to the cart.</st> <st c="11263">For
    example, the</st> `<st c="11280">cart/1/add</st>` <st c="11290">path indicates
    that we want to add the movie with</st> `<st c="11341">id=1</st>` <st c="11345">to</st>
    <st c="11349">the cart.</st>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10888">我们添加了一个名为</st> `<st c="10916">cart/<int:id>/add</st>` <st c="10933">的新路径（记住项目级别的
    URL 文件为该文件定义了一个</st> `<st c="10987">/cart</st>` <st c="10992">前缀）。</st> <st c="11016">其中</st>
    `<st c="11020"><int:id></st>` <st c="11028">部分表示该路径期望从 URL 传递一个整数值，并且该整数值将与名为</st>
    `<st c="11178">id</st>`<st c="11180">的变量相关联。</st> <st c="11186">id</st> <st c="11188">变量将用于识别我们想要添加到购物车中的电影。</st>
    <st c="11263">例如，</st> `<st c="11280">cart/1/add</st>` <st c="11290">路径表示我们想要将</st>
    `<st c="11341">id=1</st>` <st c="11345">的电影添加到</st> `<st c="11349">购物车中。</st>
- en: <st c="11358">Defining add_to_cart function</st>
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="11358">定义 add_to_cart 函数</st>
- en: <st c="11388">In</st> `<st c="11392">/cart/views.py</st>`<st c="11406">, add
    the following</st> <st c="11425">lines</st> <st c="11432">in bold:</st>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11388">在</st> `<st c="11392">/cart/views.py</st>`<st c="11406">中，添加以下</st>
    <st c="11425">行</st> <st c="11432">（加粗）：</st>
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="11755">Let’s explain the</st> <st c="11773">previous code:</st>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11755">让我们解释一下</st> <st c="11773">之前的代码：</st>
- en: <st c="11788">We import the</st> `<st c="11803">redirect</st>` <st c="11811">and</st>
    `<st c="11816">get_object_or_404</st>` <st c="11833">functions.</st> <st c="11845">We
    also import the</st> `<st c="11864">Movie</st>` <st c="11869">model from the “</st><st
    c="11886">movies” app.</st>
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11788">我们导入</st> `<st c="11803">redirect</st>` <st c="11811">和</st> `<st
    c="11816">get_object_or_404</st>` <st c="11833">函数。</st> <st c="11845">我们还从“</st><st
    c="11864">movies</st>" 应用程序中导入 `<st c="11869">Movie</st>` <st c="11869">模型。</st>
- en: '<st c="11899">We define the</st> `<st c="11914">add</st>` <st c="11917">function,
    which takes two parameters: the request and the</st> <st c="11976">movie ID.</st>'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11899">我们定义了一个</st> `<st c="11914">add</st>` <st c="11917">函数，它接受两个参数：请求和</st>
    <st c="11976">电影 ID。</st>
- en: <st c="11985">We fetch the</st> `<st c="11999">Movie</st>` <st c="12004">object
    with the given</st> `<st c="12027">id</st>` <st c="12029">from the database (by
    using the</st> `<st c="12062">get_object_or_404</st>` <st c="12079">function).</st>
    <st c="12091">If no such object is found, a 404 (Not Found) error</st> <st c="12143">is
    raised.</st>
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11985">我们从数据库中获取</st> `<st c="11999">Movie</st>` <st c="12004">对象，使用给定的</st>
    `<st c="12027">id</st>` <st c="12029">（通过使用</st> `<st c="12062">get_object_or_404</st>`
    <st c="12079">函数）。</st> <st c="12091">如果没有找到此类对象，将引发一个 404（未找到）错误。</st>
- en: <st c="12153">We check the session storage for a key called</st> `<st c="12200">'cart'</st>`<st
    c="12206">. If the key does not exist, a</st> `<st c="12237">{}</st>` <st c="12239">empty
    dictionary is assigned to the</st> `<st c="12276">cart</st>` <st c="12280">variable.</st>
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="12153">我们检查会话存储中是否存在一个名为</st> `<st c="12200">'cart'</st>`<st c="12206">的键。如果该键不存在，则将一个</st>
    `<st c="12237">{}</st>` <st c="12239">空字典分配给</st> `<st c="12276">cart</st>` <st
    c="12280">变量。</st>
- en: <st c="12290">We modify the</st> `<st c="12305">cart</st>` <st c="12309">variable.</st>
    <st c="12320">We add a new key to the</st> `<st c="12344">cart</st>` <st c="12348">dictionary
    based on the movie ID, and the corresponding value based on the movie quantity
    the user wants to add to the cart (we will collect</st> `<st c="12490">quantity</st>`
    <st c="12498">through an HTML form later).</st> <st c="12528">For example, if
    the user wants to add</st> `<st c="12566">2</st>` <st c="12567">movies with</st>
    `<st c="12580">id=1</st>`<st c="12584">, a new key/value such as this</st> `<st
    c="12615">cart["1"] = "2"</st>` <st c="12630">will be added to</st> <st c="12648">the
    dictionary.</st>
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="12290">我们修改了</st> `<st c="12305">cart</st>` <st c="12309">变量。</st> <st
    c="12320">我们根据电影 ID 在</st> `<st c="12344">cart</st>` <st c="12348">字典中添加一个新的键，并根据用户想要添加到购物车中的电影数量设置相应的值（我们将在稍后通过
    HTML 表单收集</st> `<st c="12490">quantity</st>` <st c="12498">）。</st> <st c="12528">例如，如果用户想要添加</st>
    `<st c="12566">2</st>` <st c="12567">部</st> `<st c="12580">id=1</st>`<st c="12584">的电影，将添加一个新键/值，例如</st>
    `<st c="12615">cart["1"] = "2"</st>` <st c="12630">到</st> `<st c="12648">字典中。</st>
- en: <st c="12663">The updated</st> `<st c="12676">cart</st>` <st c="12680">dictionary
    is then saved back to the session using</st> `<st c="12732">request.session['cart']
    =</st>` `<st c="12758">cart</st>`<st c="12762">.</st>
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="12663">更新后的</st> `<st c="12676">购物车</st>` <st c="12680">字典随后使用</st> `<st
    c="12732">request.session['cart'] =</st>` `<st c="12758">cart</st>`<st c="12762">.</st>
- en: <st c="12763">After</st> <st c="12770">updating the cart, we redirect the user
    to the home</st> <st c="12822">page (</st>`<st c="12828">home.index</st>`<st c="12839">).</st>
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="12763">在</st> `<st c="12770">更新购物车后</st>，我们将用户重定向到主页（</st>`<st c="12828">home.index</st>`<st
    c="12839">）。</st>
- en: <st c="12842">Now, let’s update the</st> `<st c="12865">movies.show</st>` <st
    c="12876">template to include a form to add movies to</st> <st c="12921">the cart.</st>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12842">现在，让我们更新</st> `<st c="12865">movies.show</st>` <st c="12876">模板，以包含一个用于将电影添加到</st>
    `<st c="12921">购物车</st>` <st c="12921">的表单。</st>
- en: <st c="12930">Updating the movies.show template</st>
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="12930">更新movies.show模板</st>
- en: <st c="12964">In the</st> `<st c="12972">/movies/templates/movies/show.html</st>`
    <st c="13006">file, add</st> <st c="13017">the following lines</st> <st c="13037">in
    bold:</st>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12964">在</st> `<st c="12972">/movies/templates/movies/show.html</st>`
    <st c="13006">文件中，添加以下以粗体显示的</st> `<st c="13017">行：</st>`
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '****<st c="13645">We</st> <st c="13648">added a new form to allow users to
    add movies to the cart.</st> <st c="13707">This form also includes an input field
    to specify the quantity of the movie the user wishes to add to the cart.</st>
    <st c="13819">The form is linked to the</st> `<st c="13845">''cart.add''</st>`
    <st c="13855">path and passes the movie</st> `<st c="13882">id</st>` <st c="13884">as
    part of the</st> <st c="13900">form action.</st>'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '****<st c="13645">我们</st> `<st c="13648">添加了一个新的表单，允许用户将电影添加到购物车。</st> `<st
    c="13707">此表单还包括一个输入字段，用于指定用户希望添加到购物车的电影数量。</st> `<st c="13819">该表单链接到</st> `<st
    c="13845">''cart.add''</st>` `<st c="13855">路径，并将电影</st> `<st c="13882">id</st>`
    `<st c="13884">作为表单操作的</st> `<st c="13900">一部分。</st>`'
- en: <st c="13912">Now, save those files, run the server, go to</st> `<st c="13958">http://localhost:8000/movies</st>`<st
    c="13986">, click on a specific movie, and you will see the</st> **<st c="14036">Add
    to cart</st>** <st c="14047">functionality available (</st>*<st c="14073">Figure
    10</st>**<st c="14083">.5</st>*<st c="14085">).</st>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13912">现在，保存这些文件，运行服务器，访问</st> `<st c="13958">http://localhost:8000/movies</st>`<st
    c="13986">，点击一个特定的电影，你将看到可用的</st> **<st c="14036">添加到购物车</st>** <st c="14047">功能（</st>*<st
    c="14073">图10</st>**<st c="14083">.5</st>*<st c="14085">）。</st>
- en: '![Figure 10.5 – Movie page with the Add to cart functionality](img/B22457_10_5.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图10.5 – 带有“添加到购物车”功能的电影页面](img/B22457_10_5.jpg)'
- en: <st c="14265">Figure 10.5 – Movie page with the Add to cart functionality</st>
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14265">图10.5 – 带有“添加到购物车”功能的电影页面</st>
- en: <st c="14324">We successfully added a button to add movies to the cart.</st>
    <st c="14383">Now, let’s move on to listing the movies added to</st> <st c="14433">the
    cart.</st>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14324">我们成功添加了一个按钮来添加电影到购物车。</st> `<st c="14383">现在，让我们继续列出添加到</st> `<st
    c="14433">购物车</st>` <st c="14433">的电影。</st>
- en: <st c="14442">Listing movies added to the cart</st>
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="14442">列出添加到购物车的电影</st>
- en: <st c="14475">To</st> <st c="14478">allow us to list movies added to the cart,
    we will follow the</st> <st c="14541">next steps:</st>
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14475">为了</st> <st c="14478">让我们能够列出添加到购物车的电影，我们将遵循以下</st> `<st c="14541">步骤：</st>`
- en: <st c="14552">Configure the cart</st> <st c="14572">index URL.</st>
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="14552">配置购物车</st> `<st c="14572">索引URL。</st>`
- en: <st c="14582">Define a</st> `<st c="14592">utils</st>` <st c="14597">file.</st>
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="14582">定义一个</st> `<st c="14592">utils</st>` <st c="14597">文件。</st>
- en: <st c="14603">Define</st> <st c="14611">a filter.</st>
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="14603">定义一个</st> `<st c="14611">过滤器。</st>`
- en: <st c="14620">Define an</st> `<st c="14631">index</st>` <st c="14636">function.</st>
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="14620">定义一个</st> `<st c="14631">索引</st>` <st c="14636">函数。</st>
- en: <st c="14646">Creating the</st> `<st c="14660">cart.index</st>` <st c="14670">template.</st>
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="14646">创建</st> `<st c="14660">cart.index</st>` <st c="14670">模板。</st>
- en: <st c="14680">Updating the</st> `<st c="14694">add_to_cart</st>` <st c="14705">function.</st>
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="14680">更新</st> `<st c="14694">add_to_cart</st>` `<st c="14705">函数。</st>
- en: <st c="14715">Adding a link in the</st> <st c="14737">base template.</st>
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="14715">在</st> `<st c="14737">基本模板</st>` <st c="14737">中添加链接。</st>
- en: <st c="14751">Configuring cart index URL</st>
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="14751">配置购物车索引URL</st>
- en: <st c="14778">In</st> `<st c="14782">/cart/urls.py</st>`<st c="14795">, add
    the</st> <st c="14805">next path by adding the lines</st> <st c="14835">in bold:</st>
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14778">在</st> `<st c="14782">/cart/urls.py</st>`<st c="14795">中，通过添加以下以粗体显示的</st>
    `<st c="14805">行来添加下一个路径：</st>`
- en: '[PRE7]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <st c="15003">We defined a</st> `<st c="15017">''</st>` <st c="15019">path but
    remember that the project-level URL file defined a</st> `<st c="15080">/cart</st>`
    <st c="15085">prefix for this file.</st> <st c="15108">So, if a URL matches the</st>
    `<st c="15133">/cart</st>` <st c="15138">path, it will execute the</st> `<st c="15165">index</st>`
    <st c="15170">function defined in</st> <st c="15190">the</st> `<st c="15195">views</st>`
    <st c="15200">file.</st> <st c="15207">We will implement the</st> `<st c="15229">index</st>`
    <st c="15234">function later.</st>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15003">我们定义了一个</st> `<st c="15017">''</st>` <st c="15019">路径，但请记住，项目级别的
    URL 文件为该文件定义了一个</st> `<st c="15080">/cart</st>` <st c="15085">前缀。</st> <st c="15108">因此，如果一个
    URL 与</st> `<st c="15133">/cart</st>` <st c="15138">路径匹配，它将执行</st> `<st c="15165">index</st>`
    <st c="15170">函数，该函数定义在</st> `<st c="15190">views</st>` <st c="15195">文件中。</st>
    <st c="15207">我们将在稍后实现</st> `<st c="15229">index</st>` <st c="15234">函数。</st>
- en: <st c="15250">Defining a utils file</st>
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="15250">定义一个 utils 文件</st>
- en: <st c="15272">Commonly, cart pages display the</st> <st c="15305">total amount
    to be paid.</st> <st c="15331">This is calculated by summing the prices of the
    movies based on their corresponding quantities.</st> <st c="15427">We will define
    a</st> `<st c="15444">calculate_cart_total</st>` <st c="15464">function to perform
    this process.</st> <st c="15499">However, it is not recommended to place this
    kind of function in either the</st> `<st c="15575">views</st>` <st c="15580">file
    or the</st> `<st c="15593">models</st>` <st c="15599">file.</st> <st c="15606">Therefore,
    we will create a utilities (</st>`<st c="15645">utils</st>`<st c="15651">) file
    in which we will place this function to be</st> <st c="15702">easily reused.</st>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15272">通常，购物车页面会显示</st> <st c="15305">需要支付的总金额。</st> <st c="15331">这是通过将电影的价格根据其对应数量相加来计算的。</st>
    <st c="15427">我们将定义一个</st> `<st c="15444">calculate_cart_total</st>` <st c="15464">函数来完成这个过程。</st>
    <st c="15499">然而，不建议将此类函数放置在</st> `<st c="15575">views</st>` <st c="15580">文件或</st>
    `<st c="15593">models</st>` <st c="15599">文件中。</st> <st c="15606">因此，我们将创建一个名为
    utilities (</st>`<st c="15645">utils</st>`<st c="15651">) 的文件，并将此函数放置在其中以便</st>
    <st c="15702">易于重用。</st>
- en: <st c="15716">In</st> `<st c="15720">/cart/</st>`<st c="15726">, create a new
    file called</st> `<st c="15753">utils.py</st>`<st c="15761">. For now, fill it
    in with</st> <st c="15788">the following:</st>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15716">在</st> `<st c="15720">/cart/</st>`<st c="15726">目录下，创建一个名为</st>
    `<st c="15753">utils.py</st>`<st c="15761">的新文件。目前，可以将其填充为以下内容：</st>
- en: '[PRE8]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <st c="15970">Let’s explain the</st> <st c="15989">previous code:</st>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15970">让我们解释一下</st> <st c="15989">之前的代码：</st>
- en: <st c="16003">We define the</st> `<st c="16018">calculate_cart_total</st>` <st
    c="16038">function, which takes two parameters:</st> `<st c="16077">cart</st>`
    <st c="16081">and</st> `<st c="16086">movies_in_cart</st>`<st c="16100">. The</st>
    `<st c="16106">cart</st>` <st c="16110">parameter is a dictionary that represents
    the user’s shopping cart.</st> <st c="16179">Remember that the keys are strings
    representing movie IDs, and the values are strings representing the quantities
    of each movie in the cart.</st> <st c="16320">The</st> `<st c="16324">movies_in_cart</st>`
    <st c="16338">parameter is a list of</st> `<st c="16362">Movie</st>` <st c="16367">objects
    representing the movies in</st> <st c="16403">the cart.</st>
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16003">我们定义了一个</st> `<st c="16018">calculate_cart_total</st>` <st c="16038">函数，它接受两个参数：</st>
    `<st c="16077">cart</st>` <st c="16081">和</st> `<st c="16086">movies_in_cart</st>`<st
    c="16100">。`<st c="16106">cart</st>` <st c="16110">参数是一个字典，表示用户的购物车。</st> <st
    c="16179">请记住，键是表示电影 ID 的字符串，值是表示购物车中每部电影数量的字符串。</st> <st c="16320">`<st c="16324">movies_in_cart</st>`
    <st c="16338">参数是一个表示购物车中电影的</st> `<st c="16362">Movie</st>` <st c="16367">对象的列表。</st>
- en: <st c="16412">We initialize a</st> `<st c="16429">total</st>` <st c="16434">variable</st>
    <st c="16444">by</st> `<st c="16447">0</st>`<st c="16448">.</st>
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16412">我们通过</st> `<st c="16429">total</st>` <st c="16434">变量</st> <st
    c="16444">初始化</st> `<st c="16447">0</st>`<st c="16448">。</st>
- en: <st c="16449">We iterate through the list of movies in the cart.</st> <st c="16501">For
    each movie, we extract the corresponding quantity added to the cart and multiply
    it by the movie’s price.</st> <st c="16611">Then, we add the total cost for the
    movie to the</st> `<st c="16660">total</st>` <st c="16665">variable.</st>
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16449">我们遍历购物车中的电影列表。</st> <st c="16501">对于每部电影，我们提取添加到购物车中的对应数量，并将其乘以电影的价格。</st>
    <st c="16611">然后，我们将该电影的总成本添加到</st> `<st c="16660">total</st>` <st c="16665">变量中。</st>
- en: <st c="16675">Finally, we return the</st> <st c="16699">total variable.</st>
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16675">最后，我们返回</st> <st c="16699">total</st> 变量。</st>
- en: <st c="16714">In summary,</st> `<st c="16727">calculate_cart_total</st>` <st
    c="16747">calculates the total cost of the movies in the user’s cart by iterating
    over each movie in the cart, multiplying the movie’s price by its quantity, and</st>
    <st c="16900">summing up the total costs.</st> <st c="16928">This function will
    be used later in the</st> `<st c="16968">views</st>` <st c="16973">file.</st>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在总结中，`<st c="16714">calculate_cart_total</st>` `<st c="16747">通过遍历购物车中的每部电影，将电影的价格乘以其数量，并</st>`
    `<st c="16900">计算总成本来计算用户购物车中电影的总额。</st>` `<st c="16928">这个函数将在后面的</st>` `<st
    c="16968">views</st>` `<st c="16973">文件中使用。</st>`
- en: <st c="16979">Defining a filter</st>
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义一个过滤器
- en: '`<st c="17153">|</st>`<st c="17155">) character and are a powerful tool for
    customizing the presentation of data in</st> <st c="17235">a template.</st>'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="17153">|</st>` `<st c="17155">)`字符是自定义模板数据展示的强大工具。'
- en: <st c="17246">We want to list the movies added to the cart and display the quantity
    of each movie.</st> <st c="17332">This requires accessing the cart session data
    and using each movie’s ID as a key to get the</st> `<st c="17424">quantity</st>`
    <st c="17432">value.</st> <st c="17440">While this may not sound very complicated,
    Django templates are designed to be simple and primarily focused on rendering
    data provided by views.</st> <st c="17585">Sometimes, Django templates don’t allow
    access to data that depends on other variables or complex data structures.</st>
    <st c="17700">In such cases, you will need to create a custom filter or tag.</st>
    <st c="17763">We will create a custom filter to access the</st> `<st c="17808">quantity</st>`
    <st c="17816">data for the movies in</st> <st c="17840">the cart.</st>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要列出添加到购物车中的电影，并显示每部电影的数量。<st c="17332">这需要访问购物车会话数据，并使用每部电影的ID作为键来获取</st>`
    `<st c="17424">数量</st>` `<st c="17432">值。</st>` `<st c="17440">虽然这可能听起来并不复杂，但Django模板被设计得简单，主要关注渲染视图提供的数据。</st>`
    `<st c="17585">有时，Django模板不允许访问依赖于其他变量或复杂数据结构的数据。</st>` `<st c="17700">在这种情况下，您需要创建一个自定义过滤器或标签。</st>`
    `<st c="17763">我们将创建一个自定义过滤器来访问购物车中电影的</st>` `<st c="17808">数量</st>` `<st c="17816">数据。</st>`
- en: <st c="17849">In</st> `<st c="17853">/cart/</st>`<st c="17859">, create a</st>
    `<st c="17870">templatetags</st>` <st c="17882">folder.</st> <st c="17891">Then,
    in</st> `<st c="17900">/cart/templatetags/</st>` <st c="17919">create a new file
    called</st> `<st c="17945">cart_filters.py</st>`<st c="17960">. For now, fill
    it in with</st> <st c="17987">the following:</st>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<st c="17849">/cart/</st>` `<st c="17853">`中创建一个`<st c="17870">templatetags</st>`
    `<st c="17882">文件夹。</st>` `<st c="17891">然后，在</st>` `<st c="17900">/cart/templatetags/</st>`
    `<st c="17919">创建一个名为</st>` `<st c="17945">cart_filters.py</st>` `<st c="17960">的新文件。</st>`
    `<st c="17987">目前，请用以下内容填充它：</st>` `<st c="17987">`
- en: '[PRE9]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <st c="18163">Let’s explain the</st> <st c="18182">previous code:</st>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释一下之前的代码：</st>
- en: <st c="18196">We import the</st> `<st c="18211">template</st>` <st c="18219">module,
    which provides utilities for working with</st> <st c="18270">Django templates.</st>
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们导入`<st c="18196">template</st>` `<st c="18211">模块，它提供了用于处理</st>` `<st c="18219">Django模板</st>`
    `<st c="18270">的实用工具。</st>`
- en: <st c="18287">We use the</st> `<st c="18299">register = template.Library()</st>`
    <st c="18328">code to create an instance of</st> `<st c="18359">template.Library</st>`<st
    c="18375">, which is used to register custom template tags</st> <st c="18424">and
    filters.</st>
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`<st c="18287">register = template.Library()</st>` `<st c="18328">代码来创建一个`<st
    c="18359">template.Library</st>` `<st c="18375">`的实例，它用于注册自定义模板标签和过滤器。</st>
- en: <st c="18436">We use the</st> `<st c="18448">@register.filter(name='get_quantity')</st>`
    <st c="18485">decorator to register the</st> `<st c="18512">get_cart_quantity</st>`
    <st c="18529">function as a custom template filter named</st> `<st c="18573">get_quantity</st>`<st
    c="18585">. The</st> `<st c="18591">name='get_quantity'</st>` <st c="18610">argument
    specifies the name of the filter as it will be used</st> <st c="18672">in templates.</st>
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`<st c="18436">@register.filter(name='get_quantity')</st>` `<st c="18485">装饰器来注册</st>
    `<st c="18512">get_cart_quantity</st>` `<st c="18529">函数作为一个名为</st> `<st c="18573">get_quantity</st>`
    `<st c="18585">的自定义模板过滤器</st>`。`<st c="18591">name='get_quantity'</st>` `<st c="18610">参数指定了过滤器在模板中使用时的名称。</st>`
    `<st c="18672">`
- en: '<st c="18685">We define the</st> `<st c="18700">get_cart_quantity</st>` <st
    c="18717">function, which takes two arguments: the</st> `<st c="18759">cart</st>`
    <st c="18763">session dictionary, and the ID of the movie for which the quantity</st>
    <st c="18831">is needed.</st>'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="18685">我们定义了</st> `<st c="18700">get_cart_quantity</st>` <st c="18717">函数，它接受两个参数：</st>
    `<st c="18759">cart</st>` <st c="18763">会话字典，以及所需数量的电影的ID。</st>
- en: <st c="18841">We access the</st> `<st c="18856">quantity</st>` <st c="18864">value
    by using the</st> `<st c="18884">cart</st>` <st c="18888">dictionary and</st>
    `<st c="18904">movie_id</st>` <st c="18912">as the key.</st> <st c="18925">We
    convert</st> `<st c="18936">movie_id</st>` <st c="18944">to a string to ensure
    compatibility with the</st> <st c="18990">cart keys.</st>
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="18841">我们通过使用</st> `<st c="18856">quantity</st>` <st c="18864">值，通过</st>
    `<st c="18884">cart</st>` <st c="18888">字典和</st> `<st c="18904">movie_id</st>`
    <st c="18912">作为键来访问。</st> <st c="18925">我们将</st> `<st c="18936">movie_id</st>`
    <st c="18944">转换为字符串以确保与</st> `<st c="18990">购物车键</st>` <st c="18990">的兼容性。</st>
- en: <st c="19000">Finally, we</st> <st c="19013">return the corresponding</st> `<st
    c="19038">quantity</st>` <st c="19046">value.</st>
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="19000">最后，我们</st> <st c="19013">返回相应的</st> `<st c="19038">quantity</st>`
    <st c="19046">值。</st>
- en: <st c="19053">Note</st>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19053">注意</st>
- en: <st c="19058">Once the custom filter is defined and registered, you can use
    it in a Django template such as this:</st> `<st c="19159">{{</st>` `<st c="19162">request.session.cart|get_quantity:movie.id
    }}</st>`
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19058">一旦自定义过滤器被定义并注册，你就可以在Django模板中使用它，如下所示：</st> `<st c="19159">{{</st>`
    `<st c="19162">request.session.cart|get_quantity:movie.id }}</st>`
- en: <st c="19207">In the preceding example, the</st> `<st c="19238">get_quantity</st>`
    <st c="19250">filter is applied to</st> `<st c="19272">request.session.cart</st>`
    <st c="19292">with the</st> `<st c="19302">movie.id</st>` <st c="19310">argument
    to obtain the quantity of the specific movie in</st> <st c="19368">the cart.</st>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19207">在先前的例子中，</st> `<st c="19238">get_quantity</st>` <st c="19250">过滤器被应用于</st>
    `<st c="19272">request.session.cart</st>` <st c="19292">，使用</st> `<st c="19302">movie.id</st>`
    <st c="19310">参数来获取购物车中特定电影的数量。</st>
- en: <st c="19377">You can find more information about custom filters and tags</st>
    <st c="19437">here:</st> [<st c="19444">https://docs.djangoproject.com/en/5.0/howto/custom-template-tags/</st>](https://docs.djangoproject.com/en/5.0/howto/custom-template-tags/)<st
    c="19509">.</st>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19377">你可以在</st> [<st c="19444">https://docs.djangoproject.com/en/5.0/howto/custom-template-tags/</st>](https://docs.djangoproject.com/en/5.0/howto/custom-template-tags/)<st
    c="19509">中找到有关自定义过滤器和标签的更多信息。</st>
- en: <st c="19510">We have designed all the elements we need to implement the cart</st>
    <st c="19575">index function.</st>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19510">我们已经设计了我们需要的所有元素来实现购物车</st> <st c="19575">索引功能。</st>
- en: <st c="19590">Defining an index function</st>
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="19590">定义一个索引函数</st>
- en: <st c="19617">In</st> `<st c="19621">/cart/views.py</st>`<st c="19635">, add
    the following</st> <st c="19654">in bold:</st>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19617">在</st> `<st c="19621">/cart/views.py</st>`<st c="19635">中，添加以下</st>
    <st c="19654">粗体内容：</st>
- en: '[PRE10]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <st c="20327">Let’s explain the</st> <st c="20345">previous code:</st>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20327">让我们解释一下</st> <st c="20345">之前的代码：</st>
- en: <st c="20360">We import the</st> `<st c="20375">calculate_cart_total</st>` <st
    c="20395">function from the</st> `<st c="20414">utils</st>` <st c="20419">file.</st>
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="20360">我们从</st> `<st c="20375">utils</st>` <st c="20395">文件中导入</st> `<st
    c="20414">calculate_cart_total</st>` <st c="20419">函数。</st>
- en: <st c="20425">We define the</st> `<st c="20440">index</st>` <st c="20445">function.</st>
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="20425">我们定义了</st> `<st c="20440">index</st>` <st c="20445">函数。</st>
- en: <st c="20455">We initialize the</st> `<st c="20474">cart_total</st>` <st c="20484">to</st>
    `<st c="20488">0</st>`<st c="20489">, and</st> `<st c="20495">movies_in_cart</st>`
    <st c="20509">as an</st> <st c="20516">empty list.</st>
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="20455">我们将</st> `<st c="20474">cart_total</st>` <st c="20484">初始化为</st>
    `<st c="20488">0</st>`<st c="20489">，并将</st> `<st c="20495">movies_in_cart</st>`
    <st c="20509">初始化为一个空列表。</st>
- en: <st c="20527">We retrieve the cart information from the session using</st> `<st
    c="20584">request.session.get('cart', {})</st>`<st c="20615">.</st>
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="20527">我们使用</st> `<st c="20584">request.session.get('cart', {})</st>`<st
    c="20615">从会话中检索购物车信息。</st>
- en: <st c="20616">We extract the movie IDs that were added to the cart based on
    the</st> <st c="20683">cart keys.</st>
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="20616">根据</st> `<st c="20683">购物车键</st>` <st c="20683">，我们提取添加到购物车中的电影ID。</st>
- en: <st c="20693">If there are any movie IDs in the cart, the function queries the
    database for movies with those IDs using</st> `<st c="20800">Movie.objects.filter(id__in=movie_ids)</st>`<st
    c="20838">. Additionally, we calculate the total cost of the movies in the cart
    using the</st> `<st c="20918">calculate_cart_total</st>` <st c="20938">function,
    which updates the</st> `<st c="20967">cart_total</st>` <st c="20977">variable.</st>
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果购物车中有任何电影ID，该函数将使用 `<st c="20800">Movie.objects.filter(id__in=movie_ids)</st>`
    `<st c="20838">查询数据库以获取具有这些ID的电影。此外，我们使用` `<st c="20918">calculate_cart_total</st>`
    `<st c="20938">函数</st>` 计算购物车中电影的总额，该函数更新了` `<st c="20967">cart_total</st>` `<st
    c="20977">变量。</st>`
- en: <st c="20987">Finally, we prepare the</st> `<st c="21012">template_data</st>`
    <st c="21025">dictionary and render the</st> `<st c="21052">cart/index.html</st>`
    <st c="21067">template.</st>
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们准备 `<st c="21012">template_data</st>` `<st c="21025">字典并渲染` `<st c="21052">cart/index.html</st>`
    `<st c="21067">模板。</st>`
- en: <st c="21077">In summary, the</st> `<st c="21094">index</st>` <st c="21099">function</st>
    <st c="21108">is designed to render the cart page, showing the movies in the cart
    and the total cost of</st> <st c="21199">those movies.</st>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，`<st c="21094">index</st>` `<st c="21099">函数</st>` `<st c="21108">旨在渲染购物车页面，显示购物车中的电影以及这些电影的总额。</st>
- en: <st c="21212">Creating the cart.index template</st>
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 `cart.index` 模板
- en: <st c="21245">In</st> `<st c="21249">/cart/</st>`<st c="21255">, create</st>
    <st c="21264">a</st> `<st c="21266">templates</st>` <st c="21275">folder.</st>
    <st c="21284">Then, in</st> `<st c="21293">/cart/templates/</st>`<st c="21309">,
    create a</st> `<st c="21320">cart</st>` <st c="21324">folder.</st>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<st c="21249">/cart/</st>` `<st c="21255">，创建一个` `<st c="21264">templates</st>`
    `<st c="21275">文件夹。</st>` 然后，在 `<st c="21293">/cart/templates/</st>` `<st c="21309">，创建一个`
    `<st c="21320">cart</st>` `<st c="21324">文件夹。</st>`
- en: <st c="21332">Now, in</st> `<st c="21341">/cart/templates/cart/</st>`<st c="21362">,
    create a</st> <st c="21373">new file,</st> `<st c="21383">index.html</st>`<st
    c="21393">. For now, fill it in with</st> <st c="21420">the following:</st>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `<st c="21341">/cart/templates/cart/</st>`<st c="21362">，创建一个</st> `<st
    c="21373">新文件</st>`，`<st c="21383">index.html</st>`<st c="21393">。目前，用以下内容填充它：</st>
    `<st c="21420">以下内容：</st>`
- en: '[PRE11]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: <st c="22315">Let’s explain the</st> <st c="22333">previous code:</st>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释一下之前的代码：
- en: <st c="22348">We use the</st> `<st c="22360">{% load cart_filters %}</st>` <st
    c="22383">tag, which loads custom template filters defined in the</st> `<st c="22440">cart_filters</st>`
    <st c="22452">file.</st> <st c="22459">In our case, it includes the filter</st>
    <st c="22495">named</st> `<st c="22501">get_quantity</st>`<st c="22513">.</st>
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 `<st c="22360">{% load cart_filters %}</st>` `<st c="22383">标签</st>`，它加载在
    `<st c="22440">cart_filters</st>` `<st c="22452">文件</st>` 中定义的自定义模板过滤器。在我们的例子中，它包括名为
    `<st c="22501">get_quantity</st>` `<st c="22513">的过滤器。</st>`
- en: <st c="22514">We create an</st> <st c="22528">HTML table.</st>
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建一个 `<st c="22528">HTML表格。</st>`
- en: <st c="22539">We iterate through the movies in the cart.</st> <st c="22583">For
    each movie, we display its</st> `<st c="22614">id</st>`<st c="22616">,</st> `<st
    c="22618">name</st>`<st c="22622">,</st> `<st c="22624">price</st>`<st c="22629">,
    and</st> `<st c="22635">quantity</st>` <st c="22643">value in the cart.</st> <st
    c="22663">To display the quantity in the cart, we use the</st> `<st c="22711">get_quantity</st>`
    <st c="22723">filter.</st>
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们遍历购物车中的电影。对于每部电影，我们显示其 `<st c="22614">id</st>`<st c="22616">、</st>` `<st c="22618">name</st>`<st
    c="22622">、</st>` `<st c="22624">price</st>`<st c="22629">、</st>` 和 `<st c="22635">quantity</st>`
    `<st c="22643">在购物车中的数量。</st>` 为了显示购物车中的数量，我们使用 `<st c="22711">get_quantity</st>`
    `<st c="22723">过滤器。</st>`
- en: <st c="22731">Finally, we</st> <st c="22744">display the</st> `<st c="22756">cart_total</st>`
    <st c="22766">value.</st>
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们 `<st c="22744">显示</st>` `<st c="22756">购物车总额</st>` `<st c="22766">的值。</st>
- en: <st c="22773">Updating the add_to_cart function</st>
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新 `add_to_cart` 函数
- en: <st c="22807">In</st> `<st c="22811">/cart/views.py</st>`<st c="22825">, add
    the</st> <st c="22835">following lines</st> <st c="22851">in bold:</st>
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<st c="22811">/cart/views.py</st>` `<st c="22825">，添加以下加粗的行：</st>
- en: '[PRE12]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: <st c="23059">If a user adds a movie to the cart, they will now be redirected
    to the</st> <st c="23131">cart page.</st>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户将电影添加到购物车，他们现在将被重定向到 `<st c="23131">购物车页面。</st>`
- en: <st c="23141">Adding a link in the base template</st>
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在基础模板中添加链接
- en: <st c="23176">Finally, let’s</st> <st c="23192">add the cart link in the base
    template.</st> <st c="23232">In</st> `<st c="23235">/moviesstore/templates/base.html</st>`<st
    c="23267">, in the header section, add the following lines</st> <st c="23316">in
    bold:</st>
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23176">最后，让我们</st> <st c="23192">在基本模板中添加购物车链接。</st> <st c="23232">在
    `<st c="23235">/moviesstore/templates/base.html</st>`<st c="23267">中，在标题部分，添加以下</st>
    <st c="23316">行（粗体）：</st>
- en: '[PRE13]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: <st c="23508">Now, save those</st> <st c="23524">files, run the server, go to</st>
    `<st c="23553">http://localhost:8000/movies</st>`<st c="23581">, click on a couple
    of movies, and add them to the cart.</st> <st c="23638">Then, go to the</st> **<st
    c="23654">Cart</st>** <st c="23658">section and you will see a</st> **<st c="23686">Cart</st>**
    <st c="23690">page with its corresponding information (</st>*<st c="23732">Figure
    10</st>**<st c="23742">.6</st>*<st c="23744">).</st>
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23508">现在，保存这些</st> <st c="23524">文件，运行服务器，转到</st> `<st c="23553">http://localhost:8000/movies</st>`<st
    c="23581">，点击几部电影，并将它们添加到购物车。</st> <st c="23638">然后，转到</st> **<st c="23654">购物车</st>**
    <st c="23658">部分，您将看到一个</st> **<st c="23686">购物车</st>** <st c="23690">页面及其对应的信息（</st>*<st
    c="23732">图 10</st>**<st c="23742">.6</st>*<st c="23744">）。</st>
- en: '![Figure 10.6 – The Cart page](img/B22457_10_6.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.6 – 购物车页面](img/B22457_10_6.jpg)'
- en: <st c="23934">Figure 10.6 – The Cart page</st>
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23934">图 10.6 – 购物车页面</st>
- en: <st c="23961">Now that we have learned how to implement a cart system, let’s
    finish this chapter by including the functionality to remove movies from</st>
    <st c="24098">the cart.</st>
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23961">现在我们已经学会了如何实现购物车系统，让我们通过包括从购物车中删除电影的功能来完成本章。</st> <st c="24098">从</st>
    <st c="24098">购物车中删除电影。</st>
- en: <st c="24107">Removing movies from the cart</st>
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="24107">从购物车中删除电影</st>
- en: <st c="24137">To</st> <st c="24140">remove movies from the cart, we will follow
    the</st> <st c="24189">next steps:</st>
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24137">要</st> <st c="24140">从购物车中删除电影，我们将遵循以下</st> <st c="24189">步骤：</st>
- en: <st c="24200">Configure a</st> `<st c="24213">clear</st>` <st c="24218">URL.</st>
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="24200">配置一个</st> `<st c="24213">清晰的</st>` <st c="24218">URL。</st>
- en: <st c="24223">Defining a</st> `<st c="24235">clear</st>` <st c="24240">function.</st>
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="24223">定义一个</st> `<st c="24235">清晰的</st>` <st c="24240">函数。</st>
- en: <st c="24250">Updating the</st> `<st c="24264">cart.index</st>` <st c="24274">template.</st>
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="24250">更新</st> `<st c="24264">cart.index</st>` <st c="24274">模板。</st>
- en: <st c="24284">Configuring clear URL</st>
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="24284">配置清晰的 URL</st>
- en: <st c="24306">In</st> `<st c="24310">/cart/urls.py</st>`<st c="24323">, add
    the</st> <st c="24333">next path by adding the following lines</st> <st c="24373">in
    bold:</st>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24306">在 `<st c="24310">/cart/urls.py</st>`<st c="24323">中，通过添加以下</st>
    <st c="24333">行来添加下一个路径</st> <st c="24373">（粗体）：</st>
- en: '[PRE14]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: <st c="24589">We define a</st> `<st c="24601">cart/clear/</st>` <st c="24612">path
    that will execute the</st> `<st c="24640">clear</st>` <st c="24645">function defined
    in the</st> `<st c="24670">views</st>` <st c="24675">file.</st> <st c="24682">We
    will implement the</st> `<st c="24704">clear</st>` <st c="24709">function later.</st>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24589">我们定义了一个</st> `<st c="24601">cart/clear/</st>` <st c="24612">路径，该路径将执行在</st>
    `<st c="24640">views</st>` <st c="24675">文件中定义的</st> `<st c="24645">clear</st>`
    <st c="24670">函数。</st> <st c="24682">我们将在稍后实现</st> `<st c="24704">clear</st>`
    <st c="24709">函数。</st>
- en: <st c="24725">Defining clear function</st>
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="24725">定义清晰的函数</st>
- en: <st c="24749">In</st> `<st c="24753">/cart/views.py</st>`<st c="24767">, add
    the</st> <st c="24776">following lines in bold at the end of</st> <st c="24815">the
    file:</st>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24749">在 `<st c="24753">/cart/views.py</st>`<st c="24767">中，在文件末尾添加以下</st>
    <st c="24776">行（粗体）：</st>
- en: '[PRE15]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: <st c="24904">We just update the user’s cart session to an empty dictionary.</st>
    <st c="24968">This removes all previous movies added to the cart, and we redirect
    the user to the</st> <st c="25052">cart page.</st>
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24904">我们只需将用户的购物车会话更新为空字典。</st> <st c="24968">这将删除购物车中添加的所有先前电影，并将用户重定向到</st>
    <st c="25052">购物车页面。</st>
- en: <st c="25062">Updating the cart.index template</st>
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="25062">更新 cart.index 模板</st>
- en: <st c="25095">In the</st> `<st c="25103">/cart/templates/cart/index.html</st>`
    <st c="25134">file, add</st> <st c="25144">the following lines</st> <st c="25165">in
    bold:</st>
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25095">在 `<st c="25103">/cart/templates/cart/index.html</st>` <st c="25134">文件中，添加以下</st>
    <st c="25144">行（粗体）：</st>
- en: '[PRE16]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: <st c="25504">We added an</st> `<st c="25517">if</st>` <st c="25519">section
    to check whether there are any movies in the cart.</st> <st c="25579">If there
    are, we display a button that allows the user to clear</st> <st c="25643">the
    cart.</st>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25504">我们添加了一个</st> `<st c="25517">if</st>` <st c="25519">部分来检查购物车中是否有任何电影。</st>
    <st c="25579">如果有，我们显示一个按钮，允许用户清除</st> <st c="25643">购物车。</st>
- en: <st c="25652">Now, save those files, run the server, go to</st> `<st c="25698">http://localhost:8000/movies</st>`<st
    c="25726">, click on a couple of movies, and add them to the cart.</st> <st c="25783">Then,
    go to the</st> **<st c="25799">Cart</st>** <st c="25803">section and click</st>
    **<st c="25822">Remove all movies from Cart</st>** <st c="25849">(</st>*<st c="25851">Figure
    10</st>**<st c="25860">.7</st>*<st c="25862">).</st> <st c="25866">You will see
    an</st> <st c="25882">empty cart.</st>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25652">现在，保存这些文件，运行服务器，访问</st> `<st c="25698">http://localhost:8000/movies</st>`<st
    c="25726">，点击几部电影，并将它们添加到购物车。</st> <st c="25783">然后，转到</st> **<st c="25799">购物车</st>**
    <st c="25803">部分并点击</st> **<st c="25822">从购物车中移除所有电影</st>** <st c="25849">(</st>*<st
    c="25851">图10</st>**<st c="25860">.7</st>*<st c="25862">).</st> <st c="25866">您将看到一个</st>
    <st c="25882">空购物车。</st>
- en: '![Figure 10.7 – The Cart page](img/B22457_10_7.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图10.7 – 购物车页面](img/B22457_10_7.jpg)'
- en: <st c="25984">Figure 10.7 – The Cart page</st>
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25984">图10.7 – 购物车页面</st>
- en: <st c="26011">Summary</st>
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="26011">总结</st>
- en: <st c="26019">In this chapter, we learned how web sessions and Django sessions
    work.</st> <st c="26091">We created a cart app that allows us to add movies to
    the cart, list the movies added to the cart, and remove the movies from the cart.</st>
    <st c="26227">We also learned that the</st> `<st c="26252">utils</st>` <st c="26257">file
    is useful for storing functions that can be reused across our app.</st> <st c="26330">Additionally,
    we learned that filters allow us to modify or format the data displayed in the
    templates, and we learned how to utilize some Django session functionalities.</st>
    <st c="26501">In the next chapter, we will create the order and item models to
    enable users to</st> <st c="26582">purchase movies.</st>****
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26019">在本章中，我们学习了Web会话和Django会话的工作原理。</st> <st c="26091">我们创建了一个购物车应用程序，允许我们添加电影到购物车，列出已添加到购物车的电影，以及从购物车中移除电影。</st>
    <st c="26227">我们还了解到，</st> `<st c="26252">utils</st>` <st c="26257">文件用于存储可以在我们的应用程序中重复使用的函数。</st>
    <st c="26330">此外，我们还了解到过滤器允许我们修改或格式化在模板中显示的数据，并且我们学习了如何利用一些Django会话功能。</st> <st
    c="26501">在下一章中，我们将创建订单和项目模型，以便用户可以</st> <st c="26582">购买电影。</st>****
