- en: Chapter 12. Sebastian Raschka
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。塞巴斯蒂安·拉斯奇卡
- en: '![Sebastian Raschka](img/B08180_20_01.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![塞巴斯蒂安·拉斯奇卡](img/B08180_20_01.jpg)'
- en: Sebastian Raschka received his doctorate in Quantitative Biology and Biochemistry
    and Molecular Biology in 2017, from Michigan State University. His research activities
    included the development of new deep learning architectures to solve problems
    in the field of biometrics. Sebastian is the bestselling author of *Python Machine
    Learning*, which received the ACM Best of Computing award in 2016\. He contributes
    to many open source projects including scikit-learn. Methods that Sebastian implemented
    are being used in real-world machine learning applications such as Kaggle. He
    is passionate about helping people to develop data-driven solutions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 塞巴斯蒂安·拉斯奇卡于2017年从密歇根州立大学获得了定量生物学和生物化学以及分子生物学博士学位。他的研究活动包括开发新的深度学习架构来解决生物识别领域的问题。塞巴斯蒂安是畅销书*Python机器学习*的作者，这本书在2016年获得了ACM最佳计算奖。他为包括scikit-learn在内的许多开源项目做出贡献。塞巴斯蒂安实现的方法正在现实世界的机器学习应用中发挥作用，如Kaggle。他热衷于帮助人们开发数据驱动的解决方案。
- en: '**Discussion themes: Python for AI/machine learning, v2.7/v3.x.**'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**讨论主题：人工智能/机器学习中的Python，v2.7/v3.x。**'
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Catch up with Sebastian Raschka here: @rasbt**'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**与塞巴斯蒂安·拉斯奇卡保持联系：@rasbt**'
- en: '**Mike Driscoll**: Could you give a little background information about yourself?'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mike Driscoll**：你能提供一些关于你自己的背景信息吗？'
- en: '**Sebastian Raschka**: Of course! My name probably already gives it away, but
    I was born and raised in Germany, where I lived for more than two decades, until
    I had the urge to go on an adventure and study in the US.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**塞巴斯蒂安·拉斯奇卡**：当然！我的名字可能已经暗示了这一点，但我出生并成长在德国，在那里我住了二十多年，直到我有冒险去美国的冲动。'
- en: I received my undergraduate degree from Heinrich-Heine University in Düsseldorf.
    I remember one day walking to the cafeteria and stumbling upon a flyer regarding
    a study abroad program with Michigan State University (MSU). I was super intrigued
    and thought that this might be a worthwhile experience. So not long after that,
    I studied for two years at MSU and received a Bachelor Plus/International degree.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我在杜塞尔多夫的海因里希·海涅大学获得了我的本科学位。我记得有一天我去食堂的路上，偶然发现了一张关于密歇根州立大学（MSU）海外学习项目的传单。我非常感兴趣，并认为这可能是一次值得的经历。所以不久之后，我在MSU学习了两年，并获得了本硕连读/国际学位。
- en: During those two semesters, I made many friends at MSU and thought that the
    scientific environment would provide an excellent opportunity for me to grow as
    a scientist, which is why I applied for grad school at MSU. I should say that
    this chapter of my life came with a happy ending, as I obtained my Ph.D. in December
    2017\. So that's my academic career.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在那两个学期里，我在MSU结识了许多朋友，并认为科学环境会为我作为一个科学家的成长提供极好的机会，这就是我为什么申请在MSU读研究生院的原因。我应该说我人生中的这一章节有一个美好的结局，因为我于2017年12月获得了我的博士学位。这就是我的学术生涯。
- en: '**Sebastian Raschka: ''During my time as a graduate student, I got heavily
    involved in open source in the context of data science and machine learning.''**'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**塞巴斯蒂安·拉斯奇卡**：“在我的研究生期间，我深度参与了数据科学和机器学习背景下的开源项目。”'
- en: During my time as a graduate student, I got heavily involved in open source
    in the context of data science and machine learning. Also, I am a passionate blogger
    and writer. Some people may have stumbled upon my book, *Python Machine Learning*,
    which was very well-received by both people from academia and the industry.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的研究生期间，我深度参与了数据科学和机器学习背景下的开源项目。此外，我也是一个热情的博客作者和作家。有些人可能偶然发现了我的书*Python机器学习*，这本书在学术界和业界都受到了好评。
- en: With my book, I tried to bridge the gap between purely practical (that is, coding)
    books and purely theoretical (i.e., math-heavy) works. Based on all of the feedback
    that I received, *Python Machine Learning* turned out to be super useful to a
    broad audience. The book was translated into seven languages and is currently
    used as a textbook at the Loyola University Chicago, the University of Oxford,
    and many others.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的书中，我试图弥合纯粹实用（即，编码）书籍和纯粹理论（即，数学密集型）作品之间的差距。基于我收到的所有反馈，*Python机器学习*对广大受众来说非常有用。这本书被翻译成了七种语言，目前被芝加哥洛约拉大学、牛津大学等多所大学用作教科书。
- en: '**Driscoll**: Do you contribute to any open source projects?'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：你为任何开源项目做出贡献吗？'
- en: '**Raschka**: Yes, besides my writings, I am contributing to open source projects
    such as scikit-learn, TensorFlow and PyTorch. I also have my own little open source
    projects that I work on in my free time, including mlxtend and BioPandas.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Raschka：''是的，除了我的写作之外，我还为scikit-learn、TensorFlow和PyTorch等开源项目做出贡献。我还在业余时间工作于自己的小型开源项目，包括mlxtend和BioPandas。'''
- en: mlxtend is a Python library with useful tools for the day-to-day data science
    tasks. It aims to fill the gap in the Python data science system, by providing
    tools that are not yet available in other packages. For example, the stacking
    classifiers and regressors, as well as the sequential feature selection algorithms,
    are very popular in the Kaggle community.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: mlxtend是一个Python库，提供了日常数据科学任务的有用工具。它旨在通过提供其他包中尚未提供的工具来填补Python数据科学系统的空白。例如，堆叠分类器和回归器，以及序列特征选择算法，在Kaggle社区中非常受欢迎。
- en: In addition, the frequent pattern mining algorithms, including Apriori and algorithms
    for deriving association rules, are super handy. Most recently, I added a lot
    of non-parametric functions, for evaluating machine learning classifiers from
    bootstrapping, to McNemar's tests.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，频繁模式挖掘算法，包括Apriori和推导关联规则的算法，非常实用。最近，我添加了许多非参数函数，用于从自助法评估机器学习分类器，到McNemar测试。
- en: '**Sebastian Raschka: ''To stay most productive, I didn''t want to learn a whole
    new API for each little side project.''**'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Sebastian Raschka：''为了保持最高效，我不想为每个小项目学习全新的API。''**'
- en: The BioPandas project arose from the need to work with molecular structures
    from different file formats more conveniently. During my Ph.D., many projects
    involved working with protein structures, or structures of small (drug-like) molecules.
    There are many tools out there for that, but each has its own little sublanguage.
    To stay most productive, I didn't want to learn a whole new API for each little
    side project.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: BioPandas项目源于方便地处理不同文件格式的分子结构的需求。在我的博士期间，许多项目涉及处理蛋白质结构，或小（类似药物）分子的结构。为此有许多工具，但每个都有自己的小语言。为了保持最高效，我不想为每个小项目学习全新的API。
- en: The idea behind BioPandas is to parse structural files into pandas DataFrames,
    a library and format that most data scientists are already familiar with. Once
    the structures are in a DataFrame format, we can use all of the power of pandas
    that is at our disposal, including its super flexible selection syntax.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: BioPandas背后的想法是将结构文件解析成pandas DataFrame，这是一个大多数数据科学家已经熟悉的库和格式。一旦结构以DataFrame格式存在，我们就可以使用pandas的所有功能，包括其超级灵活的选择语法。
- en: A virtual screening tool that I recently developed, screenlamp, makes heavy
    use of BioPandas as its core engine. I could screen databases with more than 12
    million molecules efficiently, which led to the successful discovery of potent
    G protein-coupled receptor signaling inhibitors, with applications to aquatic
    invasive species control, in collaboration with experimental biologists at MSU.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近开发的一个虚拟筛选工具，screenlamp，大量使用了BioPandas作为其核心引擎。我能够高效地筛选超过1200万个分子的数据库，这导致了强大的G蛋白偶联受体信号抑制剂的成功发现，这些抑制剂在控制水生入侵物种方面有应用，并与密歇根州立大学的实验生物学家合作。
- en: '**Sebastian Raschka: ''Semi-adversarial networks are a deep learning architecture
    that I developed with my collaborators in the iPRoBe Lab at MSU.''**'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Sebastian Raschka：''半对抗网络是我与密歇根州立大学iPRoBe实验室的同事们共同开发的一种深度学习架构。''**'
- en: Besides all of my involvement in computational biology, one of my other passion
    projects involves semi-adversarial networks. Semi-adversarial networks are a deep
    learning architecture that I developed with my collaborators in the iPRoBe Lab
    at MSU, which we successfully applied in the context of privacy concerns in the
    field of biometrics.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我在计算生物学领域的所有参与之外，我另一个热衷的项目涉及半对抗网络。半对抗网络是一种深度学习架构，是我与密歇根州立大学iPRoBe实验室的同事们共同开发的，我们成功地将它应用于生物识别领域隐私关注的问题中。
- en: In particular, we applied this architecture to perturb face images in such a
    way that they looked almost identical to the original input images, while soft
    biometric attributes, such as gender, were inaccessible by gender predictors.
    The overall goal is to prevent nasty things like profiling, based on soft biometric
    attributes, without a user's consent.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，我们将这种架构应用于扰动人脸图像，使其看起来几乎与原始输入图像相同，而性别等软生物特征属性，如性别预测器无法访问。总体目标是防止未经用户同意的基于软生物特征属性的恶意行为，如用户画像。
- en: '**Driscoll**: So why did you become a programmer?'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔：**那么你为什么成为程序员？'
- en: '**Raschka**: I would say that the primary driving factor for becoming a programmer
    was to be able to implement my ''crazy'' research ideas.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**拉斯奇卡：**我认为成为程序员的最初动力是能够实现我的“疯狂”研究想法。'
- en: In computational biology, we already have many tools at our disposal that we
    can use without the need to program ourselves. However, using existing tools (depending
    on the research task) can also be a bit limiting. If we want to try something
    new, especially if we want to develop new methods, then there is no way around
    learning how to program.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算生物学领域，我们已经有许多现成的工具可以使用，而无需我们自己编程。然而，使用现有工具（取决于研究任务）也可能有些限制。如果我们想尝试新事物，特别是如果我们想开发新方法，那么学习如何编程是不可避免的。
- en: Like most people, I started with simple Bash scripting in a Linux shell. At
    some point, I realized that this wasn't quite enough, or not efficient enough.
    During my undergraduate studies in Germany, I took a bioinformatics class in Perl.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 和大多数人一样，我最初从Linux shell中的简单Bash脚本开始。在德国的本科学习期间，我选修了一门Perl生物信息学课程。
- en: When I saw what was possible with Perl, this was quite an eye-opening experience.
    Later, when I was conducting statistical analyses and preparing data visualizations
    based on the data that I collected, I also got into R. Not long after that, I
    got into Python.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当我看到Perl能做什么时，这是一次相当震撼的经历。后来，当我进行统计分析并基于收集的数据准备数据可视化时，我也开始使用R。不久之后，我开始使用Python。
- en: '**Driscoll**: Why Python?'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔：**为什么选择Python？'
- en: '**Raschka**: Well, I mentioned that I started with Perl and R. However, one
    thing that most programmers have in common is that we consult the internet on
    a regular basis to look for useful pointers, and other tips and tricks for achieving
    certain subtasks.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**拉斯奇卡：**我提到了我最初从Perl和R开始。然而，大多数程序员共有的一个特点是，我们经常上网查找有用的提示，以及其他实现某些子任务的技巧和窍门。'
- en: '**Sebastian Raschka: ''I stumbled upon many different resources that were written
    in Python and I thought that it would be worthwhile learning this language.''**'
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**塞巴斯蒂安·拉斯奇卡：**“我偶然发现了许多用Python编写的资源，我认为学习这门语言是值得的。”'
- en: 'Suffice it to say, I stumbled upon many different resources that were written
    in Python and I thought that it would be worthwhile learning this language. At
    some point, I moved away from Perl entirely and did all of my coding in Python:
    custom scripts for data collection, parsing and analysis.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我偶然发现了许多用Python编写的资源，我认为学习这门语言是值得的。在某个时候，我完全放弃了Perl，所有的编码工作都在Python中进行：用于数据收集、解析和分析的自定义脚本。
- en: I also have to mention that I did all of the statistical analyses and plotting
    in R. Actually, not too long ago, when I was revisiting an old project, I stumbled
    upon my old Frankenstein-esque scripts (Bash scripts and makefiles), which were
    running Python and R in tandem.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我还必须提到，我所有的统计分析绘图都是在R中完成的。实际上，不久前，当我回顾一个旧项目时，我偶然发现了我的老式弗兰肯斯坦脚本（Bash脚本和makefiles），这些脚本同时运行Python和R。
- en: Now, back in 2012, when the scientific computing stack was growing quickly,
    I stumbled upon NumPy, SciPy, matplotlib and scikit-learn. I realized that everything
    that I did in R, I could also do in Python. I could avoid switching back and forth
    between languages in my projects.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到2012年，当科学计算堆栈快速发展的时期，我偶然发现了NumPy、SciPy、matplotlib和scikit-learn。我意识到，我在R中做的所有事情，我也可以在Python中做。我可以在我的项目中避免在语言之间来回切换。
- en: '**Sebastian Raschka: ''I really enjoy being part of and interacting with the
    vivid Python community.''**'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**塞巴斯蒂安·拉斯奇卡：**“我真的很享受成为充满活力的Python社区的一员，并与这个社区互动。”'
- en: Looking back, picking up Python was probably one of the best decisions that
    I made. Without Python, it wouldn't have been possible for me to be so productive.
    But besides research and work, I really enjoy being part of and interacting with
    the vivid Python community. Whether I am interacting with people via Twitter,
    or meeting people at conferences like PyData and SciPy, it's always a fun experience.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾过去，学习Python可能是我做出的最好的决定之一。没有Python，我无法如此高效。但除了研究和工作之外，我真的很享受成为充满活力的Python社区的一员，并与这个社区互动。无论是通过Twitter与人们互动，还是在PyData和SciPy等会议上与人见面，这总是令人愉快的体验。
- en: '**Driscoll**: Python is one of the languages that is being used in AI and machine
    learning right now. Could you explain what makes it so popular?'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔：**Python是目前在人工智能和机器学习中使用的语言之一。你能解释是什么让它如此受欢迎吗？'
- en: '**Raschka**: I think there are two main reasons, which are very related. The
    first reason is that Python is super easy to read and learn.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**Raschka**：我认为有两个主要原因，这两个原因非常相关。第一个原因是Python非常易于阅读和学习。'
- en: I would argue that most people working in machine learning and AI want to focus
    on trying out their ideas in the most convenient way possible. The focus is on
    research and applications, and programming is just a tool to get you there. The
    more comfortable a programming language is to learn, the lower the entry barrier
    is for more math and stats-oriented people.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为大多数在机器学习和人工智能领域工作的人都希望以尽可能方便的方式尝试他们的想法。重点是研究和应用，编程只是达到目的的工具。编程语言越容易学习，对于更多数学和统计学背景的人来说，入门门槛就越低。
- en: '**Sebastian Raschka: ''I would argue that most people working in machine learning
    and AI want to focus on trying out their ideas in the most convenient way possible.''**'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Sebastian Raschka**：“我认为大多数在机器学习和人工智能领域工作的人都希望以尽可能方便的方式尝试他们的想法。”'
- en: Python is also super readable, which helps with keeping up-to-date with the
    status quo in machine learning and AI, for example, when reading through code
    implementations of algorithms and ideas. Trying new ideas in AI and machine learning
    often requires implementing relatively sophisticated algorithms and the more transparent
    the language, the easier it is to debug.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Python的可读性也非常好，这有助于跟上机器学习和人工智能的现状，例如，在阅读算法和想法的代码实现时。在人工智能和机器学习领域尝试新想法通常需要实现相对复杂的算法，而语言越透明，调试就越容易。
- en: The second main reason is that while Python is a very accessible language itself,
    we have a lot of great libraries on top of it that make our work easier. Nobody
    would like to spend their time on reimplementing basic algorithms from scratch
    (except in the context of studying machine learning and AI). The large number
    of Python libraries which exist help us to focus on more exciting things than
    reinventing the wheel.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个主要原因是，虽然Python本身是一种非常易于访问的语言，但我们有大量的优秀库在上面，使我们的工作变得更简单。没有人愿意花时间从头开始重新实现基本算法（除非是在研究机器学习和人工智能的背景下）。现有的大量Python库帮助我们专注于比重新发明轮子更有趣的事情。
- en: '**Sebastian Raschka: ''The large number of Python libraries which exist, help
    us to focus on more exciting things than reinventing the wheel.''**'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Sebastian Raschka**：“现有的大量Python库帮助我们专注于比重新发明轮子更有趣的事情。”'
- en: By the way, Python is also an excellent wrapper language for working with more
    efficient C/C++ implementations of algorithms and CUDA/cuDNN, which is why existing
    machine learning and deep learning libraries run efficiently in Python. This is
    also super important for working in the fields of machine learning and AI.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，Python也是一个出色的包装语言，可以用来与更高效的C/C++算法实现和CUDA/cuDNN一起工作，这也是为什么现有的机器学习和深度学习库在Python中运行得如此高效。这对于在机器学习和人工智能领域工作来说也非常重要。
- en: To summarize, I would say that Python is a great language that lets researchers
    and practitioners focus on machine learning and AI and provides less of a distraction
    than other languages.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我会说Python是一种很好的语言，它让研究人员和实践者能够专注于机器学习和人工智能，并且相比其他语言提供了更少的干扰。
- en: '**Driscoll**: Were there any moments where things may have gone another way,
    but surreptitiously ended up the way that they did?'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：有没有什么时刻事情可能走向另一个方向，但最终却不知不觉地以它们的方式结束？'
- en: '**Raschka**: That''s a good question. Maybe the fact that Python was popular
    among the Linux community, but worked very well on Windows as well. This was likely
    a big contributor to Python becoming so popular today.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**Raschka**：这是一个很好的问题。也许Python在Linux社区中很受欢迎，同时在Windows上也能很好地工作。这可能是Python今天如此受欢迎的一个重要原因。'
- en: There are relatively similar languages out there like Ruby. The Ruby on Rails
    project was (and still is) super popular. If projects like Django hadn't started,
    Python might have become less popular as an all-rounder, which may have led to
    fewer resources and open source contributions being devoted to developing Python.
    In turn, Python may have been less popular as a language for machine learning
    and AI.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里有一些相对类似的语言，比如Ruby。Ruby on Rails项目曾经（并且现在仍然是）非常受欢迎。如果像Django这样的项目没有开始，Python可能就不会作为一个全能型语言那么受欢迎，这可能会导致投入到Python开发中的资源和开源贡献减少。反过来，Python作为机器学习和人工智能的语言可能也会不那么受欢迎。
- en: '**Sebastian Raschka: ''If Travis Oliphant hadn''t started the NumPy project...I
    think fewer scientists would have picked up Python as a scientific programming
    language.''**'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Sebastian Raschka: ''如果Travis Oliphant没有开始NumPy项目...我认为 fewer scientists
    would have picked up Python as a scientific programming language.''**'
- en: If Travis Oliphant hadn't started the NumPy project (it was called Numeric back
    then in 1995), I think fewer scientists would have picked up Python as a scientific
    programming language early in their careers. We would all still be using MATLAB.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Travis Oliphant没有开始NumPy项目（当时在1995年被称为Numeric），我认为在早期职业生涯中， fewer scientists
    would have picked up Python as a scientific programming language。我们可能还在使用MATLAB。
- en: '**Driscoll**: So is Python just the right tool at the right time, or is there
    another reason that it''s become so important in AI and machine learning?'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 那么Python只是恰逢其时的正确工具，还是它成为人工智能和机器学习如此重要的另一个原因呢？'
- en: '**Raschka**: I think that''s a bit of a chicken or the egg problem.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**Raschka**: 我认为这是一个鸡生蛋还是蛋生鸡的问题。'
- en: To untangle it, I would say that Python is convenient to use, which led to its
    wide adoption. The community has developed many useful packages in the context
    of scientific computing. Many machine learning and AI developers prefer Python
    as a general programming language for scientific computing, and they have developed
    libraries on top of it, like Theano, MXNet, TensorFlow and PyTorch.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解开这个谜团，我会说Python使用方便，这导致了它的广泛应用。社区在科学计算背景下开发了众多有用的软件包。许多机器学习和AI开发者更喜欢Python作为科学计算的通用编程语言，并在其基础上开发了库，如Theano、MXNet、TensorFlow和PyTorch。
- en: 'On an interesting side note, having been active in the machine learning and
    deep learning communities, there was one thing that I heard very often: "The Torch
    library is awesome, but it is written in Lua, and I don''t want to spend my time
    learning yet another language." Note that we have PyTorch now.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个有趣的侧面，作为机器学习和深度学习社区活跃的一员，我经常听到的一句话是：“Torch库很棒，但它是用Lua编写的，我不想再花时间学习另一种语言。”请注意，我们现在有了PyTorch。
- en: '**Mike Driscoll: Do you think this opens the door for any Python programmer
    to start experimenting with AI?**'
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Mike Driscoll: 你认为这为任何Python程序员开始尝试AI打开了大门吗？**'
- en: '**Raschka**: I do think so! It depends on how we interpret AI, but regarding
    deep learning and reinforcement learning, there are many convenient packages with
    Python wrappers out there.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**Raschka**: 我确实这么认为！这取决于我们如何解读人工智能，但关于深度学习和强化学习，有许多方便的带有Python包装器的软件包。'
- en: Probably the most popular example at the moment would be TensorFlow. Personally,
    I use both TensorFlow and PyTorch in my current research projects. I have been
    using TensorFlow since it was released in 2015 and like it overall. However, it
    is a bit less flexible when trying out unusual research ideas, which is why I
    recently got more into PyTorch. PyTorch itself is more flexible and its syntax
    is closer to Python; in fact, PyTorch describes itself as "a deep learning framework
    that puts Python first."
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 目前最流行的例子可能是TensorFlow。就我个人而言，我在当前的研究项目中同时使用TensorFlow和PyTorch。我从2015年TensorFlow发布以来一直在使用它，总体来说我很喜欢它。然而，当尝试不寻常的研究想法时，它稍微有点不够灵活，这也是我最近更多地转向PyTorch的原因。PyTorch本身更加灵活，其语法更接近Python；事实上，PyTorch将自己描述为“一个将Python放在首位的深度学习框架。”
- en: '**Driscoll**: What could be done to make Python a better language for AI and
    machine learning?'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 为了使Python成为更好的AI和机器学习语言，我们可以做些什么？'
- en: '**Raschka**: While Python is a language that is very convenient to use and
    nicely interfaces with C/C++ code, we have to keep in mind that it is not the
    most efficient language.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**Raschka**: 虽然Python是一种非常方便使用的语言，并且与C/C++代码有很好的接口，但我们必须记住，它并不是最有效的语言。'
- en: Computational efficiency is why C/C++ is still the programming language of choice
    for several machine learning and AI developers. Also, Python is not supported
    on most mobile and embedded devices. Here we have to distinguish between research,
    development and production.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 计算效率是为什么C/C++仍然是几个机器学习和AI开发者的首选编程语言。此外，Python不支持大多数移动和嵌入式设备。在这里，我们必须区分研究、开发和生产。
- en: '**Sebastian Raschka: ''The convenience of Python comes at a price, which is
    performance.''**'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Sebastian Raschka: ''Python的便利性是有代价的，那就是性能。''**'
- en: The convenience of Python comes at a price, which is performance. On the other
    hand, speed and computational efficiency comes with a trade-off in terms of productivity.
    In practice, I think that it's usually best to split tasks when working in a team,
    for instance, having people who specialize in research and trying new ideas, and
    people who specialize in taking prototypes to production.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Python的便利性是有代价的，那就是性能。另一方面，速度和计算效率在生产力方面有所妥协。在实践中，我认为在团队工作时通常最好将任务分开，例如，有专门从事研究和尝试新想法的人，以及专门将原型推向生产的人。
- en: I am mainly a researcher and haven't run into this problem yet, but I have also
    heard that Python is not good for production. I think this is mainly due to existing
    infrastructure, however, and the tools that are supported by the servers, so it's
    not really Python's fault per se.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我主要是一个研究人员，还没有遇到过这个问题，但我也听说Python不适合生产环境。我认为这主要是因为现有的基础设施，以及服务器支持的工具，所以这并不是Python本身的错。
- en: '**Sebastian Raschka: ''Python doesn''t scale as well as other languages such
    as Java or C++.''**'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Sebastian Raschka: ''Python的扩展性不如Java或C++等其他语言。''**'
- en: In general, due to its nature as a high-level and general-purpose programming
    language, Python doesn't scale as well as other languages such as Java or C++,
    although they are more tedious to use. For instance, spending too much time in
    the Python runtime, when working with TensorFlow, can be a real performance killer.
    Improving the general efficiency of Python (I don't think this is really possible
    though while keeping Python as convenient as it is) would be beneficial to AI
    and machine learning.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，由于Python作为高级和通用编程语言的本性，它的扩展性不如Java或C++等其他语言，尽管它们使用起来可能更繁琐。例如，当使用TensorFlow时，在Python运行时花费太多时间可能会真正影响性能。提高Python的通用效率（我认为在保持Python的便利性的同时这实际上是不可能的）将对人工智能和机器学习有益。
- en: '**Sebastian Raschka: ''Improving the general efficiency of Python...would be
    beneficial to AI and machine learning.''**'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Sebastian Raschka: ''提高Python的通用效率...对人工智能和机器学习将是有益的。''**'
- en: While Python provides a great environment for rapid prototyping, it is sometimes
    a little bit too forgiving and dynamic types allow you to make mistakes more easily.
    I think the recent introduction of type hints may help to improve this issue to
    some extent. Also, keeping type hints optional is a great idea, because while
    it helps with larger code bases, it can also be an annoyance for smaller coding
    projects.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Python提供了一个快速原型设计的优秀环境，但它有时过于宽容，动态类型允许你更容易地犯错。我认为最近引入的类型提示可以在一定程度上帮助解决这个问题。此外，保持类型提示可选是一个很好的主意，因为它有助于大型代码库，但对于较小的编码项目来说，它也可能是一个烦恼。
- en: '**Driscoll**: What are you most excited about in Python today?'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 你现在对Python最兴奋的是什么？'
- en: '**Raschka**: I am super excited that I can do anything that I need in Python.
    I can spend my time efficiently on research and problem solving, without the need
    to spend most of my days learning new tools and programming languages.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**Raschka**: 我非常兴奋，我可以在Python中做任何我需要的事情。我可以高效地花时间在研究和问题解决上，而不需要花大部分时间学习新的工具和编程语言。'
- en: '**Sebastian Raschka: ''I am super happy with the status quo of Python. I am
    excited about the continued development of the fundamental data science libraries
    like NumPy.''**'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Sebastian Raschka: ''我对Python的现状非常满意。我对基础数据科学库如NumPy的持续发展感到兴奋。''**'
- en: Sure, sometimes it's good to look beyond the Python ecosystem, to see what's
    out there and what could potentially be useful. However, overall, I am super happy
    with the status quo of Python. I am excited about the continued development of
    the fundamental data science libraries like NumPy, which received a large grant
    from the Moore Foundation to focus on improving the library even further.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有时候看看Python生态系统之外的东西，看看那里有什么，以及什么可能是有用的，是好的。然而，总的来说，我对Python的现状非常满意。我对基础数据科学库如NumPy的持续发展感到兴奋，这些库得到了摩尔基金会的巨额资助，以进一步改进库。
- en: Also, I recently saw a conference talk on the redesign of pandas, pandas 2,
    which will make this already great library even more efficient, without changing
    the user interface.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我最近看到了一个关于pandas重设计的会议演讲，pandas 2将使这个已经非常出色的库变得更加高效，而不会改变用户界面。
- en: The one thing I am probably most excited about, though, is the great community
    around Python. It's great to feel part of the Python community and to be in the
    same boat regarding advancing the landscape of tools and science. I can share
    knowledge, learn from others and share my excitement with likeminded people.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我可能最兴奋的一件事是围绕Python的伟大社区。感觉自己是Python社区的一部分，并且与大家一样致力于推动工具和科学领域的发展，真是太好了。我可以分享知识，从他人那里学习，并与志同道合的人分享我的热情。
- en: '**Sebastian Raschka: ''It''s great to feel part of the Python community and
    to be in the same boat regarding advancing the landscape of tools and science.''**'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Sebastian Raschka: ''感觉自己是Python社区的一部分，并且与大家一样致力于推动工具和科学领域的发展，真是太好了。''**'
- en: '**Driscoll**: What do you think about the long life of Python 2.7? Should people
    move over?'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 你对Python 2.7的长寿命有何看法？人们应该迁移吗？'
- en: '**Raschka**: That''s a good question. Personally, I always recommend using
    the latest version of Python. However, I also realize that this is not always
    possible for everyone.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**Raschka**: 这是一个好问题。我个人总是推荐使用Python的最新版本。然而，我也意识到这并不是每个人都可能做到的。'
- en: If your project involves working on or with an older Python 2.7 code base, then
    it may not be feasible to make the switch in terms of resources. Regarding the
    long life of Python 2.7, we all know that Python 2.7 will not be officially maintained
    after 2020\. One thing that might happen is that a subcommunity will take over
    the maintenance of Python 2.7.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的项目涉及在或与较旧的Python 2.7代码库上工作，那么在资源方面可能无法实现迁移。关于Python 2.7的长寿命，我们都知道Python
    2.7将在2020年之后不再官方维护。可能发生的一件事是，一个子社区将接管Python 2.7的维护工作。
- en: '**Sebastian Raschka: ''One thing that might happen is that a subcommunity will
    take over the maintenance of Python 2.7.''**'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Sebastian Raschka: ''可能发生的一件事是，一个子社区将接管Python 2.7的维护工作。''**'
- en: I also wonder whether it would be worthwhile to spend the energy and resources
    maintaining Python 2.7 after 2020 as a side project, versus taking the time to
    port Python 2.7 code bases over to Python 3.x. The long-term maintenance of Python
    2.7 will always remain uncertain.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我还想知道，在2020年之后，是否值得花费精力和资源维护Python 2.7作为一项副项目，与将Python 2.7代码库迁移到Python 3.x相比。Python
    2.7的长期维护始终是不确定的。
- en: Personally, I always install the latest version of Python when it comes out
    and do all of my coding in Python 3\. However, most of my projects also support
    Python 2.7\. The reason is that there are still many people using Python 2.7 who
    cannot switch, and I don't want to exclude anyone. So if it does not require any
    major hassle or clunky workarounds, then I write my code in a way that is compatible
    with both Python 2.7 and 3.x.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 个人来说，每当Python新版本发布时，我都会安装最新版本，并且所有代码都使用Python 3编写。然而，我的大多数项目也支持Python 2.7。原因是仍然有许多人使用Python
    2.7且无法切换，我不想排除任何人。所以如果不需要任何重大麻烦或笨拙的解决方案，我会以兼容Python 2.7和3.x的方式编写代码。
- en: '**Sebastian Raschka: ''There are still many people using Python 2.7 who cannot
    switch and I don''t want to exclude anyone.''**'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Sebastian Raschka: ''仍然有许多人使用Python 2.7且无法切换，我不想排除任何人。''**'
- en: '**Driscoll**: What changes would you like to see in future Python releases?'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 你希望未来的Python版本有哪些变化？'
- en: '**Raschka**: My apologies, but my answer is a rather boring one: I am quite
    happy with Python''s current set of features and don''t have anything significant
    on my wish list.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**Raschka**: 很抱歉，我的回答可能有些无聊：我对Python当前的功能组合非常满意，我的愿望清单上没有什么重要的事情。'
- en: One thing that I and multiple other people are sometimes complaining about is
    Python's Global Interpreter Lock (GIL). However, for my needs, it's typically
    not an issue. For instance, I like control over when to do multithreading or multiprocessing.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候我和其他人有时会抱怨Python的全局解释器锁（GIL）。然而，对于我的需求来说，这通常不是问题。例如，我喜欢控制何时进行多线程或多进程。
- en: I wrote my little multiprocessing wrappers (in the mputil package) to evaluate
    Python generators lazily, which was an issue concerning memory consumption when
    I was working with vanilla *Pool* classes from Python's multiprocessing standard
    library. Besides, there are great libraries out there, like joblib, which make
    multiprocessing and threading super convenient.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我编写了小型的多进程包装器（在mputil包中），用于懒加载Python生成器，这是我使用Python标准库中的vanilla *Pool*类时遇到的一个关于内存消耗的问题。此外，还有一些非常棒的库，如joblib，使得多进程和线程变得非常方便。
- en: On top of that, most libraries that I use for the heavy lifting when it comes
    to doing computations in parallel (Dask, TensorFlow, and PyTorch) already support
    multiprocessing and use Python more as a glue language as I mentioned earlier,
    so that computational efficiency is never really an issue.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我在进行并行计算时使用的多数库（如Dask、TensorFlow和PyTorch）已经支持多进程，并且正如我之前提到的，Python更多地被用作粘合语言，因此计算效率从来不是真正的问题。
- en: '**Driscoll**: Thank you, Sebastian Raschka.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里科尔**：谢谢，塞巴斯蒂安·拉斯克卡。'
