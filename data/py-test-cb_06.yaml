- en: Integrating Automated Tests with Continuous Integration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将自动化测试与持续集成集成
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖：
- en: Generating a continuous integration report for Jenkins with NoseXUnit
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用NoseXUnit为Jenkins生成持续集成报告
- en: Configuring Jenkins to run Python tests upon commit
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Jenkins在提交时运行Python测试
- en: Configuring Jenkins to run Python tests when scheduled
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Jenkins在计划时运行Python测试
- en: Generating a continuous integration report for TeamCity using teamcity-nose
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用teamcity-nose为TeamCity生成持续集成报告
- en: Configuring TeamCity to run Python tests upon commit
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置TeamCity在提交时运行Python测试
- en: Configuring TeamCity to run Python tests when scheduled
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置TeamCity在计划时运行Python测试
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'The classic software development process known as the waterfall model involves
    the following stages:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知的经典软件开发过程瀑布模型包括以下阶段：
- en: Requirements are collected and defined
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集和定义需求
- en: Designs are drafted to satisfy the requirements
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 起草设计以满足需求
- en: An implementation strategy is written to meet the design
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写实施策略以满足设计
- en: Coding is done
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编码完成
- en: The coded implementation is tested
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对编码实施进行测试
- en: The system is integrated with other systems as well as future versions of that
    system
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统与其他系统以及该系统的未来版本集成
- en: 'In the waterfall model, these steps are often spread across several months
    of work. What this means is that the final step of integration with external systems
    is done after several months and often takes a lot of effort. **Continuous integration
    (CI)** remedies the deficiencies of the waterfall model by introducing the concept
    of writing tests that exercise these points of integration and has them run automatically
    whenever the code is checked into the system. Teams that adopt CI often adopt
    a corresponding policy of immediately fixing the baseline if the test suite fails.
    This forces the team to keep their code working and integrated continuously, thus
    making this final step relatively cost-free. Teams that adopt a more agile approach
    work in much shorter cycles. Teams may work in coding sprints that may vary anywhere
    from the weekly to the monthly. Again, by having integrating test suites run with
    every check-in, the baseline is always kept functional; thus, it is ready for
    delivery at any time. This prevents the system from being in a nonworking state
    that is only brought into working state at the end of a sprint or at the end of
    a waterfall cycle. It opens the door to more code demonstrations for either the
    customer or management, in which feedback can be garnered and fed more proactively
    into development. This chapter is more focused on integrating automated tests
    with CI systems than with writing the tests. For that reason, we will reuse the
    following Shopping Cart application. Create a new file called `cart.py` and enter
    the following code into it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在瀑布模型中，这些步骤通常分布在几个月的工作中。这意味着与外部系统集成的最后一步是在几个月后完成的，并且通常需要大量的工作。**持续集成（CI）**通过引入编写测试来解决瀑布模型的不足，这些测试可以测试这些集成点，并且在代码检入系统时自动运行。采用CI的团队通常会立即修复基线，如果测试套件失败。这迫使团队不断地保持他们的代码工作和集成，因此使得这一最终步骤相对成本低廉。采用更敏捷的方法的团队工作周期更短。团队可能会在编码冲刺中工作，这些冲刺的周期可能从每周到每月不等。同样，通过每次检入时运行集成测试套件，基线始终保持功能正常；因此，它随时可以交付。这可以防止系统处于非工作状态，只有在冲刺结束或瀑布周期结束时才能使其工作。这为客户或管理层提供了更多的代码演示机会，可以更主动地获取反馈并更积极地投入开发。这一章更侧重于将自动化测试与CI系统集成，而不是编写测试。因此，我们将重复使用以下购物车应用程序。创建一个名为`cart.py`的新文件，并将以下代码输入其中：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To exercise this simple application, the following simple set of unit tests
    will be used by various recipes in this chapter to demonstrate CI. Create another
    file called `tests.py` and enter the following test code into it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示CI，本章中的各种配方将使用以下简单应用程序的一组简单的单元测试。创建另一个名为`tests.py`的文件，并将以下测试代码输入其中：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This simple set of tests doesn''t look very impressive, does it? In fact, it
    isn''t really integration testing like we were talking about earlier, but instead
    it appears to be basic unit testing, right? Absolutely! This chapter isn''t focusing
    on writing test code. So, if this book is about code recipes, why are we focusing
    on tools? Because there is more to making automated testing work with your team
    than writing tests. It''s important to become aware of the tools that take the
    concepts of automating tests and leverage them into our development cycles. CI
    products are a valuable tool, and we need to see how to link them with our test
    code, in turn allowing the whole team to come on board and make testing a first-class
    citizen of our development process. This chapter explores two powerful CI products:
    Jenkins and TeamCity.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这一简单的测试集看起来并不令人印象深刻，是吗？实际上，它并不像我们之前谈到的集成测试，而是基本的单元测试，对吧？完全正确！这一章并不侧重于编写测试代码。那么，如果这本书是关于代码配方，为什么我们要关注工具呢？因为使自动化测试与团队合作比编写测试更重要。了解将自动化测试概念并将其整合到我们的开发周期中的工具是很重要的。CI产品是一个有价值的工具，我们需要了解如何将它们与我们的测试代码联系起来，从而使整个团队都能参与并使测试成为我们开发过程中的一等公民。这一章探讨了两种强大的CI产品：Jenkins和TeamCity。
- en: '**Jenkins** ([http://jenkins-ci.org/](http://jenkins-ci.org/)) is an open source
    product whose creation was led by a developer originally from Sun Microsystems,
    who left after Sun''s acquisition by Oracle. It has a strong developer community
    with many people providing patches, plugins, and improvements. It was originally
    called **Hudson**, but the development community voted to rename it to avoid legal
    entanglements. There is more history to the entire Hudson/Jenkins naming that
    can be read online, but it''s not relevant to the recipes in this book. **TeamCity**
    ([http://www.jetbrains.com/teamcity/](http://www.jetbrains.com/teamcity/)) is
    a product created by JetBrains, the same company that produces commercial products
    such as IntelliJ IDE, ReSharper, and the PyCharm IDE. The Professional Edition
    is a free version that will be used in this chapter to show another CI system.
    It has an enterprise version, a commercial upgrade, which you can evaluate for
    yourself.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jenkins** ([http://jenkins-ci.org/](http://jenkins-ci.org/)) 是一个开源产品，最初由Sun
    Microsystems的一名开发人员领导创建，后来在Sun被Oracle收购后离开。它有一个强大的开发者社区，许多人提供补丁、插件和改进。它最初被称为**Hudson**，但开发社区投票决定改名以避免法律纠纷。整个Hudson/Jenkins命名的历史可以在网上阅读，但与本书中的示例无关。**TeamCity**
    ([http://www.jetbrains.com/teamcity/](http://www.jetbrains.com/teamcity/)) 是由JetBrains创建的产品，该公司还生产商业产品，如IntelliJ
    IDE、ReSharper和PyCharm IDE。专业版是一个免费版本，在本章中将用于展示另一个CI系统。它还有企业版、商业升级版，您可以自行评估。'
- en: Generating a CI report for Jenkins using NoseXUnit
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NoseXUnit为Jenkins生成CI报告
- en: '**JUnit** ([http://junit.org](http://junit.org)) is a software industry leader
    in automated testing. It provides the ability to generate XML report files that
    are consumable by many tools. This extends to continuous tools like Jenkins. **NoseXUnit**
    ([http://nosexunit.sourceforge.net/](http://nosexunit.sourceforge.net/)) is a
    `nose` plugin that generates XML reports with Python test results in the same
    format. It works like JUnit with XML reporting but for PyUnit. Even though we
    aren''t building Java code, there is no requirement that states our CI server
    can''t be a Java-based system. As long as we can generate the right reports, those
    tools are candidates for usage. Considering that one of the most popular and well-supported
    CI systems is Jenkins, this type of plugin is very useful. With this recipe, we
    will explore generating consumable reports from simple Python testing.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**JUnit** ([http://junit.org](http://junit.org)) 是自动化测试中的软件行业领导者。它提供了生成XML报告文件的能力，这些文件可以被许多工具使用。这也适用于像Jenkins这样的持续集成工具。**NoseXUnit**
    ([http://nosexunit.sourceforge.net/](http://nosexunit.sourceforge.net/)) 是一个`nose`插件，以相同的格式生成Python测试结果的XML报告。它像JUnit一样使用XML报告，但适用于PyUnit。即使我们不是在构建Java代码，也没有要求我们的CI服务器不能是基于Java的系统。只要我们能生成正确的报告，这些工具就可以使用。考虑到最受欢迎和得到良好支持的CI系统之一是Jenkins，这种类型的插件非常有用。通过这个示例，我们将探讨如何从简单的Python测试生成可用的报告。'
- en: Getting ready
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following steps are needed to have all the components installed for this
    chapter:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 需要以下步骤来安装本章的所有组件：
- en: Install `nose`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`nose`。
- en: Install NoseXUnit ([http://nosexunit.sourceforge.net/](http://nosexunit.sourceforge.net/))
    by typing `pip install nosexunit`
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`pip install nosexunit`来安装NoseXUnit ([http://nosexunit.sourceforge.net/](http://nosexunit.sourceforge.net/))
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'The following steps will show how to use the NoseXUnit plugin to generate an
    XML report in a Jenkins-compatible format:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将展示如何使用NoseXUnit插件生成与Jenkins兼容格式的XML报告：
- en: 'Test the shopping cart application using `nosetests` and the NoseXUnit plugin
    by typing `nosetests tests.py --with-nosexunit`:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`nosetests`和NoseXUnit插件来测试购物车应用程序，输入`nosetests tests.py --with-nosexunit`：
- en: '![](../images/00105.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00105.jpeg)'
- en: 'Open the report found in `target/NoseXUnit/core/TEST-tests.xml` using an XML
    or text editor. The following screenshot shows the report displayed in Spring
    Tool Suite ([http://www.springsource.com/developer/sts](http://www.springsource.com/developer/sts)),
    an Eclipse derivative (this is by no means a recommendation). Many modern IDEs
    have built-in XML support as do other editors like Emacs, TextPad, and so on:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用XML或文本编辑器打开`target/NoseXUnit/core/TEST-tests.xml`中的报告。以下截图显示了在Spring Tool
    Suite ([http://www.springsource.com/developer/sts](http://www.springsource.com/developer/sts))中显示的报告，这是Eclipse的一个衍生产品（这绝不是一种推荐）。许多现代IDE都内置了XML支持，其他编辑器如Emacs、TextPad等也有：
- en: '![](../images/00106.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00106.jpeg)'
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'NoseXUnit collects the outcome of each test and generates an XML report that
    has the same format as JUnit. The XML file isn''t designed to be human-consumable,
    but it''s not too hard to discern the results. When we ran `nosetests` earlier,
    how many test cases passed? What were the test method names? In this XML file,
    we can see the names of the four test cases. In fact, if this file is opened inside
    certain tools such as STS, it displays itself as a test outcome:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: NoseXUnit收集每个测试的结果，并生成一个与JUnit相同格式的XML报告。XML文件并不是为人类消费设计的，但很容易辨别结果。当我们之前运行`nosetests`时，有多少个测试用例通过了？测试方法的名称是什么？在这个XML文件中，我们可以看到四个测试用例的名称。实际上，如果这个文件在某些工具中打开，比如STS，它会显示为一个测试结果：
- en: '![](../images/00107.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00107.jpeg)'
- en: 'We don''t have to use STS to do any of this. In fact, STS is a bit heavyweight
    for this simple task. Your favorite XML or text editor is fine to inspect the
    report. I just wanted to demonstrate how the output of this plugin works neatly
    with existing tools. By typing `nosetests help`, we can see all the options that
    `nose` has from all the installed plugins. This includes:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不必使用STS来完成任何操作。实际上，STS对于这个简单的任务来说有点过于庞大。您喜欢的XML或文本编辑器可以用来检查报告。我只是想演示这个插件的输出如何与现有工具很好地配合。通过输入`nosetests
    help`，我们可以看到`nose`从所有已安装的插件中具有的所有选项。这包括：
- en: '`--core-target=CORE_TARGET`: Output folder for test reports (defaults to target/NoseXUnit/core)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--core-target=CORE_TARGET`: 测试报告的输出文件夹（默认为target/NoseXUnit/core）'
- en: '`--with-nosexunit`: Runs it through the plugin'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--with-nosexunit`: 通过插件运行'
- en: Configuring Jenkins to run Python tests upon commit
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Jenkins在提交时运行Python测试
- en: Jenkins can be configured to invoke our test suite upon commit. This is very
    useful, because we can gear it to track our changes. Teams that use CI systems
    usually adopt an attitude of addressing CI failures immediately in order to keep
    the baseline functional. Jenkins offers an almost unlimited number of features,
    such as retrieving the latest source from version control, packaging a release,
    running tests, and even analyzing source code. This recipe shows how to configure
    Jenkins to run our test suite against our Shopping Cart application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins可以配置为在提交时调用我们的测试套件。这非常有用，因为我们可以使其跟踪我们的更改。使用CI系统的团队通常会立即解决CI失败，以保持基线功能。Jenkins提供了几乎无限的功能，例如从版本控制中检索最新源代码，打包发布，运行测试，甚至分析源代码。这个配方展示了如何配置Jenkins来运行我们的测试套件针对我们的购物车应用程序。
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Download Jenkins from [http://mirrors.jenkins-ci.org/war/latest/jenkins.war](http://mirrors.jenkins-ci.org/war/latest/jenkins.war):'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://mirrors.jenkins-ci.org/war/latest/jenkins.war](http://mirrors.jenkins-ci.org/war/latest/jenkins.war)下载Jenkins：
- en: '![](../images/00108.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00108.jpeg)'
- en: 'Start it up by running `java -jar jenkins.war`. It''s important that no other
    applications are listening on port `8080`:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`java -jar jenkins.war`来启动它。重要的是没有其他应用程序在端口`8080`上监听：
- en: '![](../images/00109.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00109.jpeg)'
- en: 'Open the console to confirm Jenkins is working:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台确认Jenkins正在工作：
- en: '![](../images/00110.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00110.jpeg)'
- en: Click on Manage Jenkins.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击管理Jenkins。
- en: Click on Manage Plugins.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击管理插件。
- en: Click on the Available tab.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击可用选项卡。
- en: Find the Git Plugin and click the checkbox next to it.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到Git插件并点击旁边的复选框。
- en: At the bottom of the page, click on the Install button. Verify that the plugin
    has successfully installed.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面底部，点击安装按钮。验证插件是否成功安装。
- en: Navigate back to the dashboard screen.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回仪表板屏幕。
- en: Shut down Jenkins and start it back up again.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Jenkins，然后重新启动。
- en: Install Git source code control on your machine. You can visit [http://git-scm.com/](http://git-scm.com/)
    to find downloadable packages. It is also possible that your system may include
    package installation options like MacPorts or Homebrew for Macs, `yum` for Red
    Hat-based Linux distributions, and `apt-get` for Debian/Ubuntu systems.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的计算机上安装Git源代码控制。您可以访问[http://git-scm.com/](http://git-scm.com/)找到可下载的软件包。您的系统也可能包括MacPorts或Homebrew（适用于Mac）、Red
    Hat Linux发行版的yum和Debian/Ubuntu系统的apt-get等软件包安装选项。
- en: 'Create an empty folder for this recipe:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个配方创建一个空文件夹：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Initialize the folder for source code maintenance:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化用于源代码维护的文件夹：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Copy the Shopping Cart application into the folder, add it, and commit the
    changes:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将购物车应用程序复制到文件夹中，添加并提交更改：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps will show how to put our code under control and then run
    the test suite when we make any changes and commit them:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将展示如何将我们的代码置于控制之下，然后在进行任何更改并提交时运行测试套件：
- en: Open the Jenkins console.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Jenkins控制台。
- en: Click on New Job.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新作业。
- en: Enter `recipe46` as the Job name and pick build a free-style software project.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`recipe46`输入作业名称并选择构建自由样式软件项目。
- en: Click on a.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击a。 '
- en: In the Source Code Management section, pick Git. For the URL, enter `/tmp/recipe46/`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在源代码管理部分，选择Git。对于URL，输入`/tmp/recipe46/`。
- en: In the Build Triggers section, pick Poll SCM and enter `* * * * *` into the
    schedule box, to trigger a poll once per minute.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建触发器部分，选择轮询SCM并在计划框中输入`* * * * *`，以便每分钟触发一次轮询。
- en: 'In the Build section, select Execute shell and enter the following ad hoc script,
    which loads the virtualenv and runs the test suite:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建部分，选择执行shell并输入以下临时脚本，加载虚拟环境并运行测试套件：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You need to substitute the command to activate your own virtualenv, whether
    this is on Windows, Linux, or macOS, and then follow it with the command used
    to run the tests just like we did earlier in this chapter.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要替换激活您自己的虚拟环境的命令，无论是在Windows、Linux还是macOS上，然后跟随我们在本章早些时候所做的运行测试的命令。
- en: In the Post-build Actions section, pick Publish JUnit test result report and
    enter `target/NoseXUnit/core/*.xml`, so that the test results are collected by
    Jenkins.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在后构建操作部分，选择发布JUnit测试结果报告并输入`target/NoseXUnit/core/*.xml`，以便Jenkins收集测试结果。
- en: Click on Save to store all the job settings.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存以存储所有作业设置。
- en: 'Click on Enable Auto Refresh. We should expect the first run to fail, because
    we haven''t added any tests yet:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击启用自动刷新。我们应该期望第一次运行失败，因为我们还没有添加任何测试：
- en: '![](../images/00111.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00111.jpeg)'
- en: 'Copy the test suite into the controlled source folder, add it, and commit it:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将测试套件复制到受控源文件夹中，添加并提交：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Watch to verify whether Jenkins launches a successful test run:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以验证Jenkins是否启动了成功的测试运行：
- en: '![](../images/00112.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00112.jpeg)'
- en: Navigate to the test results page, where we can see that four of our tests were
    run.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到测试结果页面，我们可以看到其中有四个测试被运行。
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Jenkins provides a powerful, flexible way to configure CI jobs. In this recipe,
    we configured it to poll our software confirmation management system once a minute.
    When it detects a change, it pulls a fresh copy of the software and runs our test
    script. By using the NoseXUnit plugin, we generated an artifact that was easy
    to harvest with Jenkins. With a handful of steps, we were able to configure a
    web page that monitors our source code.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins提供了一种强大灵活的配置CI作业的方式。在这个配方中，我们配置它每分钟轮询我们的软件确认管理系统。当它检测到变化时，它会拉取软件的新副本并运行我们的测试脚本。通过使用NoseXUnit插件，我们生成了一个易于在Jenkins中收集的工件。通过少数步骤，我们能够配置一个监视我们源代码的网页。
- en: There's more...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Jenkins has lots of options. If you examine the web interface, you can drill
    into output logs to see what actually happened. It also collects trends showing
    how long we have had success, when the last build failed, and more.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins有很多选项。如果您检查Web界面，您可以深入到输出日志中查看实际发生了什么。它还收集趋势，显示我们成功运行了多长时间，上次构建失败了多长时间等。
- en: Do I have to use git for source code management?
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我必须使用git进行源代码管理吗？
- en: The answer is no. We used it in this recipe to show quickly how to install a
    Jenkins plugin from inside the web interface. To apply the plugin, we had to restart
    Jenkins. Subversion and CVS are supported out of the box. Jenkins also has plugins
    that support every major source code control system out there, so it should be
    easy to meet your needs. In fact, there is support for social coding sites like
    GitHub and BitKeeper. Instead of using the Git plugin, we could configure our
    Jenkins installation to watch a certain GitHub account for updates.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是否定的。我们在这个配方中使用它，只是为了快速展示如何从Web界面内安装Jenkins插件。要应用插件，我们必须重新启动Jenkins。Subversion和CVS是开箱即用的。Jenkins还有支持每个主要源代码控制系统的插件，因此满足您的需求应该很容易。事实上，还支持GitHub和BitKeeper等社交编码网站的插件。我们可以配置Jenkins安装以监视某个GitHub帐户的更新，而不是使用Git插件。
- en: What is the format of polling?
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轮询的格式是什么？
- en: 'We configured the polling with `* * * * *`, which means once a minute. This
    is based on the format used to configure crontab files. The columns from left
    to right are:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`* * * * *`配置了轮询，这意味着每分钟运行一次。这是基于配置crontab文件所使用的格式。从左到右的列是：
- en: '**MINUTE**: Minutes within the hour (0-59)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MINUTE**: 小时内的分钟（0-59）'
- en: '**HOUR**: The hour of the day (0-23)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HOUR**: 一天中的小时（0-23）'
- en: '**DOM**: The day of the month (1-31)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DOM**: 月份的第几天（1-31）'
- en: '**MONTH**: The month (1-12)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MONTH**: 月份（1-12）'
- en: '**DOW:** The day of the week (0-7) where 0 and 7 are Sunday'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DOW:** 一周的第几天（0-7），其中0和7代表星期日'
- en: See also
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Generating a CI report for Jenkins using NoseXUnit
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用NoseXUnit为Jenkins生成CI报告
- en: Configuring Jenkins to run Python tests when scheduled
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Jenkins在预定时间运行Python测试
- en: We just explored how to configure Jenkins to run our test suite when we commit
    the code changes. Jenkins can also be configured to invoke our test suite at scheduled
    intervals. This is very useful, because we can gear it to make scheduled releases.
    Daily or weekly releases can provide potential customers with a nice release cadence.
    CI releases are usually understood to not necessarily be final, but instead provide
    bleeding-edge support in case new features need to be investigated early and integrated
    by the customer.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚探讨了如何配置Jenkins在提交代码更改时运行我们的测试套件。Jenkins也可以配置为在预定的时间间隔内调用我们的测试套件。这非常有用，因为我们可以将其调整为进行定期发布。每天或每周发布可以为潜在客户提供一个不错的发布节奏。CI发布通常被理解为不一定是最终版本，而是提供最新支持，以便客户可以尽早调查和集成新功能。
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following steps are used to set up Jenkins as well as a copy of our tests,
    so we can poll it at a scheduled interval:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤用于设置Jenkins以及我们测试的副本，以便我们可以在预定的时间间隔内轮询它：
- en: Set up Jenkins as shown in the earlier recipe, *Configuring Jenkins to run Python
    tests upon commit*. This should include having set up the Git plugin.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照之前的配方*配置Jenkins在提交时运行Python测试*来设置Jenkins。这应该包括已设置Git插件。
- en: 'Create an empty folder for this recipe:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个配方创建一个空文件夹：
- en: '[PRE7]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Initialize the folder for source code maintenance:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化源代码维护的文件夹：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Copy the Shopping Cart application into the folder, add it, and commit the
    changes:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将购物车应用程序复制到文件夹中，添加并提交更改：
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps will let us explore creating a Jenkins job to run our automated
    test suite periodically:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将让我们探索创建一个Jenkins作业，定期运行我们的自动化测试套件：
- en: Open the Jenkins console.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Jenkins控制台。
- en: Click on New Job.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“新建作业”。
- en: Enter `recipe47` as the Job name and pick Build a free-style software project.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将“recipe47”作为作业名称，并选择“构建自由风格的软件项目”。
- en: Click on Ok.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: In the Source Code Management section, pick Git. For the URL, enter `/tmp/recipe47/`.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“源代码管理”部分，选择Git。对于URL，输入`/tmp/recipe47/`。
- en: In the Build Triggers section, pick Build periodically and enter some time in
    the future. While writing this recipe for the book, the job was created around
    6:10 P.M., so entering `15 18 * * *` into the schedule box schedules the job five
    minutes into the future at 6:15 P.M.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“构建触发器”部分，选择“定期构建”并输入未来的某个时间。在为本书编写这个配方时，作业是在下午6:10左右创建的，因此在计划框中输入`15 18 *
    * *`会在下午6:15将作业安排到未来的五分钟内。
- en: 'In the Build section, select Execute shell and enter the following ad hoc script,
    which loads the virtualenv and runs the test suite:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“构建”部分，选择“执行 shell”并输入以下临时脚本，加载虚拟环境并运行测试套件：
- en: '[PRE10]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You need to replace this with the command used to activate your virtualenv,
    followed by the step to run the tests.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要用激活虚拟环境的命令替换这个，然后是运行测试的步骤。
- en: In the Post-build Actions section, pick Publish JUnit test result report and
    enter `target/NoseXUnit/core/*.xml`, so that test results are collected by Jenkins.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“后构建操作”部分，选择“发布JUnit测试结果报告”并输入`target/NoseXUnit/core/*.xml`，以便Jenkins收集测试结果。
- en: Click on Save to store all the job settings.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“保存”以存储所有作业设置。
- en: Click on Enable Auto Refresh.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“启用自动刷新”。
- en: 'Copy the test suite into the controlled source folder, add it, and commit it:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将测试套件复制到受控源文件夹中，添加并提交：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Watch to verify whether Jenkins launches a successful test run:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以验证Jenkins是否启动了成功的测试运行：
- en: '![](../images/00113.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00113.jpeg)'
- en: Navigate to the test results, and we can see that four of our tests were run.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到测试结果，我们可以看到我们的四个测试都已运行。
- en: How it works...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This is very similar to the previous recipe, only this time we configured a
    polling interval for running our test suite instead of polling the version control
    system. It is useful to run a build once a day to make sure things are stable
    and working.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这与上一个配方非常相似，只是这次我们配置了一个轮询间隔来运行我们的测试套件，而不是轮询版本控制系统。这很有用，因为我们可以每天运行一次构建，以确保事情稳定并正常工作。
- en: There's more...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Jenkins has lots of options. If you examine the web interface, you can drill
    into output logs to see what actually happened. It also collects trends showing
    how long we have had success, when the last build failed, and more. To be honest,
    Jenkins has so many plugins and options that an entire book could be devoted to
    exploring its features. This half of the chapter is merely an introduction to
    using it with some common jobs that are test-oriented.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins有很多选项。如果您查看Web界面，可以深入到输出日志中，看看实际发生了什么。它还收集趋势，显示我们成功运行了多长时间，上次构建失败是什么时候，等等。老实说，Jenkins有很多插件和选项，可以专门探索其功能。本章的后半部分只是一个简单介绍，介绍了一些以测试为导向的常见作业。
- en: Jenkins versus TeamCity
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins与TeamCity
- en: So far, we have explored using Jenkins. Later in this chapter, we will visit
    TeamCity. What are the differences? Why should we pick one or the other? Feature-wise,
    they both offer powerful choices. That is why they are both covered in this book.
    The key thing both provide is setting up jobs to run tests, as well as other things
    like packaging. A key difference is that Jenkins is an open source product and
    TeamCity is commercial. You or your company may prefer to have a paid company
    associated with the product ([http://www.jetbrains.com/](http://www.jetbrains.com/)),
    which is what TeamCity offers. This doesn't make the decision crystal clear because
    the principal developer of Jenkins currently works for CloudBees ([http://www.cloudbees.com/](http://www.cloudbees.com/)),
    which invests effort in Jenkins as well as products surrounding it. If commercial
    support isn't imperative, you may find the pace of development of Jenkins is faster
    and the number of plugins more diverse. The bottom line is that choosing the product
    that meets your CI needs requires a detailed analysis and simply can't be answered
    here.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探索了使用Jenkins。在本章的后面，我们将访问TeamCity。它们有什么区别？为什么我们应该选择其中一个？在功能上，它们都提供了强大的选择。这就是为什么它们都包含在这本书中的原因。它们都提供的关键功能是设置运行测试的作业，以及其他一些功能，比如打包。一个关键区别是Jenkins是一个开源产品，而TeamCity是商业产品。您或您的公司可能更喜欢与产品相关联的付费公司（[http://www.jetbrains.com/](http://www.jetbrains.com/)），这就是TeamCity提供的。这并不能让决定变得非常清晰，因为Jenkins的主要开发人员目前为CloudBees工作（[http://www.cloudbees.com/](http://www.cloudbees.com/)），他们也在Jenkins以及周围产品上投入了努力。如果商业支持并不迫切，您可能会发现Jenkins的开发速度更快，插件数量更多样化。最重要的是，选择满足您CI需求的产品需要进行详细的分析，这里无法简单回答。
- en: See also
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Generating a CI report for Jenkins using NoseXUnit
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 使用NoseXUnit为Jenkins生成CI报告
- en: Generating a CI report for TeamCity using teamcity-nose
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用teamcity-nose为TeamCity生成CI报告
- en: There is a `nose` plugin that automatically detects when tests are being run
    from inside TeamCity. This conveniently captures test results and communicates
    them with TeamCity. With this recipe, we will explore how to setup a CI job inside
    TeamCity that runs our tests and then manually invokes that job.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个`nose`插件，可以自动检测在TeamCity内运行测试时。这方便地捕获测试结果并将其与TeamCity通信。通过这个配方，我们将探索如何在TeamCity内设置一个CI作业，运行我们的测试，然后手动调用该作业。
- en: Getting ready
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: 'The following steps are needed to get us prepared to run a TeamCity CI job:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 需要以下步骤来准备运行TeamCity CI作业：
- en: Install `nosetests`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`nosetests`。
- en: Install `teamcity-nose` by typing `pip install teamcity-nose`.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`pip install teamcity-nose`来安装`teamcity-nose`。
- en: Download TeamCity using Wget ([http://download.jetbrains.com/teamcity/TeamCity-6.0.tar.gz](http://download.jetbrains.com/teamcity/TeamCity-6.0.tar.gz)).
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Wget下载TeamCity（[http://download.jetbrains.com/teamcity/TeamCity-6.0.tar.gz](http://download.jetbrains.com/teamcity/TeamCity-6.0.tar.gz)）。
- en: Unpack the download.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压下载文件。
- en: Switch to the `TeamCity/bin` directory.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`TeamCity/bin`目录。
- en: 'Start it up: `./runAll.sh start`.'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动它：`./runAll.sh start`。
- en: Open a browser to `http://localhost:8111`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，输入`http://localhost:8111`。
- en: If this is the first time you are starting TeamCity, accept the license agreement.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果这是您第一次启动TeamCity，请接受许可协议。
- en: Create an administrator account by picking a username and password.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择用户名和密码创建管理员帐户。
- en: Install Git source code control on your machine.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的计算机上安装Git源代码控制。
- en: 'Create an empty folder for this recipe:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个配方创建一个空文件夹：
- en: '[PRE12]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Initialize the folder for source code maintenance:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化源代码维护的文件夹：
- en: '[PRE13]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Copy the shopping cart application and tests into the folder, add it, and commit
    the changes:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将购物车应用程序和测试复制到文件夹中，添加并提交更改：
- en: '[PRE14]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How to do it...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps show how to configure a CI job in TeamCity:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤显示了如何在TeamCity中配置CI作业：
- en: Log in to the TeamCity console.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录TeamCity控制台。
- en: Underneath the Projects tab, click Create project.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目选项卡下，点击创建项目。
- en: Type in `recipe48`, and then click Create.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`recipe48`，然后点击创建。
- en: Click Add a build configuration for this project.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此项目添加一个构建配置。
- en: Enter `nose testing` for the name and then click VCS settings.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`nose testing`作为名称，然后点击VCS设置。
- en: Click on Create and attach new VCS root.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建并附加新的VCS根。
- en: Enter `recipe48` in VCS root name.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VCS根名称中输入`recipe48`。
- en: Select Git as the Type of VCS.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Git作为VCS的类型。
- en: Enter `/tmp/recipe48` as the Fetch URL.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`/tmp/recipe48`输入为获取URL。
- en: Click on Test Connection to confirm the settings and then click Save.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击测试连接以确认设置，然后点击保存。
- en: Click on Add Build Step.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加构建步骤。
- en: Select Command Line for Runner type.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择命令行作为运行器类型。
- en: 'Select Custom script for Run type and enter the following script:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择自定义脚本作为运行类型，并输入以下脚本：
- en: '[PRE15]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You need to customize this with the command needed to activate your virtualenv.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使用激活您的虚拟环境所需的命令来自定义此设置。
- en: Click on Save.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存。
- en: 'Go back to the project, and run it manually:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到项目，手动运行它：
- en: '![](../images/00114.jpeg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00114.jpeg)'
- en: How it works...
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This plugin is designed not to be used in the classic style of being invoked
    by a command-line argument. Instead, it is manually run automatically whenever
    `nosetests` is executed, and it checks if there is a TeamCity-specific environment
    variable set. If so, it kicks in by printing out viewable results as well as sending
    back useful information to TeamCity:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件设计成不是以经典方式通过命令行参数调用。相反，它在每次执行`nosetests`时自动运行，并检查是否设置了TeamCity特定的环境变量。如果是，它会通过打印可查看的结果以及发送有用信息回TeamCity来启动：
- en: '![](../images/00115.jpeg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00115.jpeg)'
- en: 'Otherwise, the plugin lets itself be bypassed and does nothing. If the plugin
    was NOT installed, the following screenshot would be the output:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，插件会被绕过并且什么也不做。如果插件没有安装，以下截图将是输出：
- en: '![](../images/00116.jpeg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00116.jpeg)'
- en: 'In turn, drilling into the details shows the following output with little detail.
    There are four periods, one for each test method, but we don''t know much more
    than that:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 依次深入细节，显示以下输出，但细节很少。有四个周期，每个测试方法一个，但我们不知道更多：
- en: '![](../images/00117.jpeg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00117.jpeg)'
- en: This means no extra arguments are needed to use the TeamCity plugin, but running
    it from the command line, outside of TeamCity, causes no changes.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着不需要额外的参数来使用TeamCity插件，但是从命令行外部运行它，会导致没有变化。
- en: Configuring TeamCity to run Python tests upon commit
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置TeamCity在提交时运行Python测试
- en: TeamCity can be configured to invoke your test suite upon commit.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: TeamCity可以配置为在提交时调用您的测试套件。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The following steps will help us prep TeamCity to run our test suite when the
    code changes are committed:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们准备TeamCity在代码更改提交时运行我们的测试套件：
- en: Set up TeamCity like in the previous recipe, and have it started up. You also
    need to have `git` installed, as mentioned earlier in this chapter.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像上一个配方一样设置TeamCity，并启动它。如前面的章节中提到的，您还需要安装`git`。
- en: 'Create an empty folder for this recipe:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个配方创建一个空文件夹：
- en: '[PRE16]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Initialize the folder for source code maintenance:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化源代码维护的文件夹：
- en: '[PRE17]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Copy the Shopping Cart application into the folder, add it, and commit the
    changes:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将购物车应用程序复制到文件夹中，添加并提交更改：
- en: '[PRE18]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How to do it...
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps will show us how to create a TeamCity job that polls version control
    to detect a change and then run a test suite:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤将向我们展示如何创建一个TeamCity作业，该作业轮询版本控制以检测更改，然后运行测试套件：
- en: Log in to the TeamCity console.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到TeamCity控制台。
- en: Underneath the Projects tab, click Create project.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目选项卡下，点击创建项目。
- en: Type in `recipe49`, and then click Create.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`recipe49`，然后点击创建。
- en: Click Add a build configuration for this project.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击为此项目添加构建配置。
- en: Enter `nose testing` for the name and then click VCS settings.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`nose testing`作为名称，然后点击VCS设置。
- en: Click on Create and attach new VCS root.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建并附加新的VCS根。
- en: Enter `recipe49` in VCS root name.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VCS根名称中输入`recipe49`。
- en: Select Git as the Type of VCS.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Git作为VCS的类型。
- en: Enter `**/**tmp/recipe49` as the Fetch URL.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`**/**tmp/recipe49`输入为获取URL。
- en: Click on Test Connection to confirm settings and then click Save.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击测试连接以确认设置，然后点击保存。
- en: Click on Add Build Step.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加构建步骤。
- en: Select Command Line for Runner type.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择命令行作为运行器类型。
- en: 'Select Custom script for Run type and enter the following script:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择自定义脚本作为运行类型，并输入以下脚本：
- en: '[PRE19]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You must replace this with the command to activate your own virtualenv and invoke
    `nosetests`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须用激活您自己的虚拟环境并调用`nosetests`的命令替换它。
- en: Click on Save.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存。
- en: Click on Build Triggering.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击构建触发。
- en: Click on Add new Trigger.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加新的触发器。
- en: Pick VCS Trigger from Trigger Type.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从触发类型中选择VCS触发器。
- en: At the top, it should display VCS Trigger will add build to the queue if VCS
    check-in is detected. Click Save.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部，应该显示VCS触发器将在检测到VCS签入时将构建添加到队列中。点击保存。
- en: Navigate back to Projects. There should be no jobs scheduled or results displayed.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航回到项目。不应该有任何已安排的工作或显示的结果。
- en: 'Click on Run. It should fail, because we haven''t added the tests to the repository:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击运行。它应该失败，因为我们还没有将测试添加到存储库中：
- en: '![](../images/00118.jpeg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00118.jpeg)'
- en: 'From the command line, copy the test file into the repository. Then add it
    and commit it:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从命令行中，将测试文件复制到存储库中。然后添加并提交：
- en: '[PRE20]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Go back to the browser. It may take a minute for TeamCity to detect the change
    in the code and start another build job. It should automatically update the screen:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回浏览器。TeamCity可能需要一分钟来检测代码的更改并启动另一个构建作业。它应该自动更新屏幕：
- en: '![](../images/00119.jpeg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00119.jpeg)'
- en: How it works...
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we configured TeamCity to do a job for us tied to a specific
    trigger. The trigger is activated whenever a check-in is done to the software
    baseline. We had to take several steps to configure this, but it demonstrates
    the flexible power TeamCity offers. We also installed the `teamcity-nose` plugin,
    which gave us more details about the results.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们配置了TeamCity来执行一个与特定触发器相关的工作。当软件基线进行检入时，触发器会被激活。我们必须采取几个步骤来配置这个，但这展示了TeamCity提供的灵活功能。我们还安装了`teamcity-nose`插件，它为我们提供了更多关于结果的细节。
- en: There's more...
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: TeamCity calls our `nose testing` job a build job. That is because running tests
    isn't the only thing TeamCity is used for. Instead, it's geared to build packages,
    deploy to sites, and any other action we may want it to do anytime a commit happens.
    This is why CI servers are sometimes called **build servers**. But if we start
    with simple jobs like testing the baseline, we are well on our way to discovering
    the other useful features TeamCity has to offer.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: TeamCity将我们的`nose testing`作业称为构建作业。这是因为运行测试并不是TeamCity唯一用途。相反，它旨在构建软件包，部署到站点，以及我们可能希望它在提交时执行的任何其他操作。这就是为什么CI服务器有时被称为**构建服务器**。但是，如果我们从测试基线开始，我们就可以发现TeamCity提供的其他有用功能。
- en: What did teamcity-nose give us?
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: teamcity-nose给了我们什么？
- en: This is a `nose` plugin that provided us with a more detailed output. We didn't
    go into much detail in this recipe.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个`nose`插件，为我们提供了更详细的输出。在这个配方中我们没有详细介绍。
- en: See also
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Generating a CI report for TeamCity using `teamcity-nose`
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`teamcity-nose`为TeamCity生成CI报告
- en: Configuring Jenkins to run Python tests upon commit
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Jenkins在提交时运行Python测试
- en: Configuring TeamCity to run Python tests when scheduled
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置TeamCity在计划时运行Python测试
- en: TeamCity can be configured to invoke our test suite and collect results at a
    scheduled interval.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: TeamCity可以配置为在计划的时间间隔内调用我们的测试套件并收集结果。
- en: Getting ready
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'These steps will prepare us for this recipe by starting up TeamCity and having
    some code ready for testing:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤将通过启动TeamCity并准备一些代码进行测试来为我们准备这个食谱：
- en: Set up TeamCity like we did earlier in this chapter and have it up and running.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像本章前面所做的那样设置TeamCity，并让其运行起来。
- en: 'Create an empty folder for this recipe:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此食谱创建一个空文件夹：
- en: '[PRE21]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Initialize the folder for source code maintenance:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化源代码维护的文件夹：
- en: '[PRE22]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Copy the shopping cart application into the folder, add it, and commit the
    changes:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将购物车应用程序复制到文件夹中，添加并提交更改：
- en: '[PRE23]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How to do it...
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps show the details for configuring TeamCity to run our test suite
    on a scheduled basis:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤显示了配置TeamCity定期运行我们的测试套件的详细信息：
- en: Log in to the TeamCity console.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录TeamCity控制台。
- en: Underneath the Projects tab, click Create project.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“项目”选项卡下，单击“创建项目”。
- en: Type in `recipe50`, and then click Create.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`recipe50`，然后单击“创建”。
- en: Click Add a build configuration for this project.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此项目添加构建配置。
- en: Enter `nose testing` for the name and then click VCS settings.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`nose testing`作为名称，然后单击VCS设置。
- en: Click on Create and attach new VCS root.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“创建”并附加新的VCS根。
- en: Enter `recipe50` in VCS root name.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VCS根名称中输入`recipe50`。
- en: Select Git as the Type of VCS.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Git作为VCS的类型。
- en: Enter `/tmp/recipe50` as the Fetch URL.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`/tmp/recipe50`输入为获取URL。
- en: Click on Test Connection to confirm settings and then click Save.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“测试连接”以确认设置，然后单击“保存”。
- en: Click on Add Build Step.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“添加构建步骤”。
- en: Select Command Line for Runner type.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择命令行作为运行器类型。
- en: 'Select Custom script for Run type and enter the following script:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择自定义脚本作为运行类型，并输入以下脚本：
- en: '[PRE24]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Replace this with your own steps to activate your virtualenv and then run the
    tests using `nosetests`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 用您自己的步骤替换此步骤，以激活您的虚拟环境，然后使用`nosetests`运行测试。
- en: Click on Save.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“保存”。
- en: Click on Build Triggering.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“构建触发”。
- en: Click on Add new Trigger.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“添加新触发器”。
- en: Select Schedule Trigger from Trigger Type.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从触发类型中选择计划触发器。
- en: Pick daily for frequency, and pick a time of about five minutes into the future.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择每日频率，并选择大约未来五分钟的时间。
- en: Deselect the option to Trigger build only if there are pending changes.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选择仅在有待处理更改时触发构建的选项。
- en: Click Save.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“保存”。
- en: Navigate back to Projects. There should be no jobs scheduled or results displayed.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到项目。不应该有计划的工作或显示的结果。
- en: 'Wait for the scheduled time to occur. The following screenshot shows the job
    when it is activated:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待计划时间到来。以下屏幕截图显示了工作何时被激活：
- en: '![](../images/00120.jpeg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: ！[](../images/00120.jpeg)
- en: 'The following screenshot shows the results summarized with our tests having
    passed:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了我们测试的结果总结为已通过：
- en: '![](../images/00121.jpeg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: ！[](../images/00121.jpeg)
- en: How it works...
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Doesn't this look suspiciously similar to the previous recipe? Of course! We
    varied it a bit by creating a time-based trigger instead of a source-based trigger.
    The time trigger we picked is a daily, scheduled build at a set time. The point
    is to show a commonly used trigger rule. By seeing what is the same and what's
    different, we can start to see how to bend TeamCity to serve our needs. TeamCity
    has other triggers that are very useful, like triggering one job when another
    one completes. This lets us build lots of small, simple jobs, and chaining them
    together. We also installed the `teamcity-nose` plugin, which gave us more details
    in the results.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来难道不是与上一个食谱非常相似吗？当然！我们稍微变化了一下，通过创建基于时间的触发器而不是基于源的触发器。我们选择的时间触发器是每天在固定时间进行计划构建。重点是展示一个常用的触发规则。通过看到相同之处和不同之处，我们可以开始看到如何调整TeamCity以满足我们的需求。TeamCity还有其他非常有用的触发器，比如当另一个作业完成时触发一个作业。这让我们可以构建许多小型、简单的作业，并将它们链接在一起。我们还安装了`teamcity-nose`插件，这让我们在结果中获得了更多细节。
- en: See also
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Generating a CI report for TeamCity using `teamcity-nose`
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`teamcity-nose`为TeamCity生成CI报告
- en: Configuring Jenkins to run Python tests when scheduled
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Jenkins在计划时运行Python测试
