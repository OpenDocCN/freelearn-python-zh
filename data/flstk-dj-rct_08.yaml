- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Social Media Posts
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 社交媒体帖子
- en: Social media already has authentication added on the frontend side. We can now
    authenticate the user through registration or login, fetch the user data, and
    show it. Now that we can store JWT tokens, we can make requests to the API for
    any protected resources, and we will start with the `post` resource.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 社交媒体已经在前端添加了认证。我们现在可以通过注册或登录来认证用户，获取用户数据，并显示它们。现在我们可以存储JWT令牌，我们可以向API发送请求以获取任何受保护的资源，我们将从`post`资源开始。
- en: In this chapter, we’ll focus on **CRUD** operations on posts. We’ll implement
    listing, creating, updating, and deleting post features. You will learn how to
    create and manage a Modal in React, how to handle a form from validation to submission,
    and how to design and integrate components into a React page.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将关注对帖子的**CRUD**操作。我们将实现列出、创建、更新和删除帖子功能。您将学习如何在React中创建和管理模态框，如何处理从验证到提交的表单，以及如何设计和集成组件到React页面中。
- en: 'This chapter will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Listing posts in a feed
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Feed中列出帖子
- en: Creating a post using a form
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用表单创建帖子
- en: Editing and deleting a post
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑和删除帖子
- en: Liking a post
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点赞帖子
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Make sure to have VS Code and an updated browser installed and configured on
    your machine. You can find the code of this chapter at [https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap8](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap8).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的机器上已安装并配置了VS Code和更新的浏览器。您可以在[https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap8](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap8)找到本章的代码。
- en: Creating the UI
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建UI
- en: The REST API is ready to accept requests and list the API. For the next steps,
    ensure that the Django server is running on the machine at port `localhost:8000`.
    The first step is implementing a post feed with a ready design and UI. Before
    coding the components for reading, creating, updating, and deleting a component,
    we need to analyze the UI and also make sure we have the right configurations
    and components to ease the development with React. We will mostly build the navigation
    bar and the layout.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: REST API已准备好接受请求并列出API。对于下一步，请确保Django服务器在机器上的`localhost:8000`端口运行。第一步是实现一个带有现成设计和UI的帖子流。在编写读取、创建、更新和删除组件的代码之前，我们需要分析UI，并确保我们有正确的配置和组件来简化使用React的开发。我们将主要构建导航栏和布局。
- en: 'Here’s the feed UI of the home page:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是主页的Feed UI：
- en: '![Figure 8.1 – Feed UI wireframe](img/Figure_8.01_B18221.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1 – Feed UI线框图](img/Figure_8.01_B18221.jpg)'
- en: Figure 8.1 – Feed UI wireframe
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – Feed UI线框图
- en: 'In the following figure, we have another illustration representing the UI and
    the page’s structure. We are using flex columns, and we’ll use Bootstrap flex
    components to design the page:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中，我们有一个表示UI和页面结构的另一个插图。我们使用flex列，我们将使用Bootstrap flex组件来设计页面：
- en: '![Figure 8.2 – Wireframe](img/Figure_8.02_B18221.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2 – 线框图](img/Figure_8.02_B18221.jpg)'
- en: Figure 8.2 – Wireframe
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 线框图
- en: The navigation bar will be available on other pages of the React application,
    and by making the navigation bar a component, it’ll be reused. We can make the
    integration of the navigation bar easier by having a `Layout` component that will
    be used when building the pages. Let’s start by adding the navigation bar component.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 导航栏将在React应用的其它页面上可用，通过将导航栏做成组件，它可以被复用。我们可以通过拥有一个`Layout`组件来简化导航栏的集成，这个组件在构建页面时将被使用。让我们先添加导航栏组件。
- en: Adding the NavBar component
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加NavBar组件
- en: 'The `NavBar` component, or the navigation bar component, should help to quickly
    navigate the UI. Here’s an screenshot of the `NavBar` component:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`NavBar`组件，或导航栏组件，应该有助于快速导航UI。以下是`NavBar`组件的截图：'
- en: '![Figure 8.3 – Navbar](img/Figure_8.03_B18221.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3 – Navbar](img/Figure_8.03_B18221.jpg)'
- en: Figure 8.3 – Navbar
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – Navbar
- en: 'The `NavBar` will have three links:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`NavBar`将包含三个链接：'
- en: A link to redirect to the feed page (**1**)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个重定向到Feed页面的链接（**1**）
- en: A link to redirect to the profile page (**2**)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个重定向到个人资料页面的链接（**2**）
- en: A link to log out (**3**)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个注销链接（**3**）
- en: Here’s a simple wireframe to better illustrate where the links will go.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的线框图，以更好地说明链接将放置的位置。
- en: '![Figure 8.4 – Wireframe of the navbar](img/Figure_8.04_B18221.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 – Navbar线框图](img/Figure_8.04_B18221.jpg)'
- en: Figure 8.4 – Wireframe of the navbar
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – Navbar线框图
- en: 'Let’s add the component. Follow these steps to do so:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加这个组件。按照以下步骤操作：
- en: 'Inside the `src/components/` directory, add a new file called `Navbar.jsx`.
    This file will contain the code for the `NavBar` component. Bootstrap already
    provides a `NavBar` component we can use. Let’s start with the component definition
    and the necessary imports:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components/`目录内，添加一个名为`Navbar.jsx`的新文件。此文件将包含`NavBar`组件的代码。Bootstrap已经提供了一个我们可以使用的`NavBar`组件。让我们从组件定义和必要的导入开始：
- en: src/components/Navbar.jsx
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/Navbar.jsx
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With the already written function, we can add the `NavBar` component and style
    it. `react-bootstrap` provides components that we can use to make the coding of
    our components faster. The props that the components require make the customization
    of these components easier:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用已经编写的函数，我们可以添加`NavBar`组件并对其进行样式化。`react-bootstrap`提供了我们可以使用的组件，可以使我们组件的编码更快。组件所需的props使得这些组件的定制更加容易：
- en: src/components/Navbar.jsx
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/Navbar.jsx
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let’s add the function that handles the logout:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加处理登出的函数：
- en: src/components/Navbar.jsx
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/Navbar.jsx
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I will use a website that generates random avatars for the avatar. In the next
    chapter, we’ll do a little exercise to add an upload profile picture feature,
    but the image generator will do the work for the moment.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用一个生成随机头像的网站。在下一章中，我们将进行一个小练习来添加上传个人头像的功能，但此刻图像生成器将完成这项工作。
- en: 'In the `src` directory, add a new file called `utils.js`. This file will contain
    functions that we’ll reuse in the React application:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`目录下，添加一个名为`utils.js`的新文件。此文件将包含我们在React应用程序中会重用的函数：
- en: src/utils.js
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: src/utils.js
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `pravatar` service supports parameters in the URL and has over 60 images.
    We are using the Math library to generate a random number representing the image’s
    ID. We can now write the `Layout` component.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`pravatar`服务支持URL中的参数，并且有超过60个图像。我们正在使用Math库生成一个代表图像ID的随机数。现在我们可以编写`Layout`组件。'
- en: Adding the Layout component
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加Layout组件
- en: A good React project has visual consistency but should also come with less repetition
    of code. For example, the navigation bar on this React project will be present
    on the home page but also on the profile page. When developing in HTML and CSS
    directly, we would have repeated the same piece of code for the navigation bar,
    but we can avoid the repetition using React by creating a `Layout` component.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的React项目应该具有视觉一致性，但也应该减少代码的重复。例如，这个React项目的导航栏将出现在主页上，也会出现在个人资料页上。如果我们直接在HTML和CSS中开发，我们会重复相同的代码来创建导航栏，但我们可以通过创建`Layout`组件来避免重复。
- en: 'In the `src/components` directory, add a file called `Layout.jsx`. This file
    will contain the code for the `Layout` component:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/components`目录下，添加一个名为`Layout.jsx`的文件。此文件将包含`Layout`组件的代码：
- en: src/components/Layout.jsx
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/Layout.jsx
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We have a new syntax here: `children`. In React, `children` is used for displaying
    whatever you include between the opening and closing tags when invoking a component.
    Here’s a simple example with an image component:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们有一个新的语法：`children`。在React中，`children`用于显示在调用组件时在打开和关闭标签之间包含的内容。以下是一个使用图像组件的简单示例：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The component can then be used, and we can add content or other components:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件可以被使用，并且我们可以添加内容或其他组件：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Whenever the `Picture` component is invoked, `props.children` will also be displayed,
    which is just a reference to the component’s opening and closing tags. In our
    context, `props.children` will contain mostly the content of the pages of the
    React application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每当调用`Picture`组件时，`props.children`也会显示，这只是一个对组件打开和关闭标签的引用。在我们的上下文中，`props.children`将包含React应用程序页面的大部分内容。
- en: For example, on the home page, we have posts and profiles listed; these elements
    will be children of the `Layout` component. Without further ado, let’s use the
    `Layout` component.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在主页上，我们有帖子和个人资料列表；这些元素将是`Layout`组件的子元素。现在就让我们使用`Layout`组件。
- en: Using the Layout component on the home page
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在主页上使用Layout组件
- en: 'Inside `Home.jsx`, we’ll rewrite the code to use the `Layout` component. Here’s
    the new code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Home.jsx`内部，我们将重写代码以使用`Layout`组件。以下是新代码：
- en: src/pages/Home.jsx
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/Home.jsx
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Great. Let’s start by adding the input to create a new post, as shown in *Figure
    8**.2*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了。让我们首先添加输入以创建一个新的帖子，如图*图8**.2*所示。
- en: Creating a post
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建帖子
- en: 'To create and add posts, follow these steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建和添加帖子，请按照以下步骤操作：
- en: In `src/components`, add a new directory called `posts`. This directory will
    contain all components used for the post feature. We’ll have components to create
    a post, display a post, and update a post.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/components` 中添加一个名为 `posts` 的新目录。此目录将包含用于帖子功能的所有组件。我们将有创建帖子、显示帖子和更新帖子的组件。
- en: Inside the newly created directory, add a file called `CreatePost.jsx`. This
    file will contain the code for the logic and the UI to make a post.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的目录中，添加一个名为 `CreatePost.jsx` 的文件。此文件将包含创建帖子所需逻辑和UI的代码。
- en: 'What we have here is a UI component called `Modal`. `react-bootstrap` provides
    a modal-ready element that we can easily customize for our needs. Let’s start
    by adding the needed imports and defining the component function:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们这里有一个名为 `Modal` 的UI组件。`react-bootstrap` 提供了一个为模态准备的元素，我们可以轻松地根据我们的需求进行定制。让我们首先添加所需的导入并定义组件函数：
- en: src/components/post/CreatePost.jsx
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/CreatePost.jsx
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The input for the post creation will be within the `Modal` component. As we
    did earlier, we will also add methods and state management for the form. But first,
    let’s write the modal and the clickable input:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 帖子创建的输入将在 `Modal` 组件内。正如我们之前所做的那样，我们还将添加方法和状态管理以处理表单。但首先，让我们编写模态和可点击的输入：
- en: src/components/post/CreatePost.jsx
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/CreatePost.jsx
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We are first adding the input that will trigger the Modal to be displayed.
    A click on the modal will set the `show` state to `True`, the state that is used
    for opening the modal. Let’s add the code for the modal:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先添加将触发模态显示的输入。点击模态将 `show` 状态设置为 `True`，这是用于打开模态的状态。让我们添加模态的代码：
- en: src/components/post/CreatePost.jsx
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/CreatePost.jsx
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The UI for the modal is created. We need now to add the `handleSubmit` function
    and the other logic for the form handling:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模态的UI已创建。我们现在需要添加 `handleSubmit` 函数和其他表单处理逻辑：
- en: src/components/post/CreatePost.jsx
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/CreatePost.jsx
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Figure 8.5 – Create Post component](img/Figure_8.05_B18221.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5 – 创建帖子组件](img/Figure_8.05_B18221.jpg)'
- en: Figure 8.5 – Create Post component
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – 创建帖子组件
- en: 'We are nearly done, but we need an essential feature for every action, such
    as form handling. We need to send feedback to the user to tell them whether their
    request has passed. In our context, when a user creates a post, we’ll show a success
    toast or an error toast:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了，但我们需要每个动作的一个基本功能，例如表单处理。我们需要向用户发送反馈，告诉他们他们的请求是否成功。在我们的上下文中，当用户创建帖子时，我们将显示成功吐司或错误吐司：
- en: '![Figure 8.6 – A successful toast](img/Figure_8.06_B18221.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6 – 成功的吐司](img/Figure_8.06_B18221.jpg)'
- en: Figure 8.6 – A successful toast
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – 成功的吐司
- en: The toast will be reused for post deletion and also updating. It will also be
    used for comment creation, modification, and deletion, as well as the profile
    modification that we will add later. We will add the `Toast` component in the
    next section.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 吐司将被用于帖子删除和更新。它还将用于评论创建、修改和删除，以及我们稍后将要添加的配置文件修改。我们将在下一节中添加 `Toast` 组件。
- en: Adding the Toast component
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加吐司组件
- en: Let’s quickly create a component called `Toaster` that we will use show toast
    in the React application.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速创建一个名为 `Toaster` 的组件，我们将在React应用程序中使用它来显示吐司。
- en: 'In `src/components`, create a new file called `Toaster.jsx`. This file will
    contain the code for the `Toaster` component:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `src/components` 中创建一个名为 `Toaster.jsx` 的新文件。此文件将包含 `Toaster` 组件的代码：
- en: src/components/Toaster.jsx
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/Toaster.jsx
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `Toaster` component takes some props:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`Toaster` 组件接受一些属性：'
- en: '`showToast`: The Boolean that is used to show the toast or not. Ideally, depending
    on the output we receive from a request on the server, we’ll set the state to
    `true`, which will show the toast.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showToast`: 用于显示吐司或隐藏的布尔值。理想情况下，根据我们从服务器请求中收到的输出，我们将状态设置为 `true`，这将显示吐司。'
- en: '`title`: This represents the title of the toast.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`: 这表示吐司的标题。'
- en: '`message`: This conveys the message we’ll be showing in the toast.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`message`: 这传达了我们将要在吐司中显示的消息。'
- en: '`onClose`: The function that handles the closing of the toast. This function
    is essential; otherwise, the toast will never disappear.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onClose`: 处理吐司关闭功能的函数。此函数是必需的；否则，吐司将永远不会消失。'
- en: '`type`: This represents the type of toast to show. In our context, we’ll either
    use `success` or `danger`.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`: 这表示要显示的吐司类型。在我们的上下文中，我们将使用 `success` 或 `danger`。'
- en: Let’s import this component in `CreatePost.jsx` and use it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `CreatePost.jsx` 中导入此组件并使用它。
- en: Adding toaster to post creation
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在创建帖子时添加吐司
- en: 'In the `CreatePost.jsx` file, we will add new states that we will pass as props
    to the `Toaster` component:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CreatePost.jsx`文件中，我们将添加新的状态，并将这些状态作为props传递给`Toaster`组件：
- en: src/components/post/CreatePost.jsx
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/CreatePost.jsx
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can import the `Toaster` component and pass the newly added states as props:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以导入`Toaster`组件，并将新添加的状态作为props传递：
- en: src/components/post/CreatePost.jsx
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/CreatePost.jsx
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: And we are done writing the `CreatePost` component. For the next step, we need
    to integrate it into the home page.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了`CreatePost`组件的编写。对于下一步，我们需要将其集成到主页上。
- en: Adding the CreatePost component to the home page
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将CreatePost组件添加到主页
- en: The `CreatePost` component is ready now, and we can use it. First, import it
    into the `Home.jsx` file and modify the UI.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`CreatePost`组件现在已准备好，我们可以使用它。首先，将其导入到`Home.jsx`文件中，并修改UI。'
- en: 'The home page will have two parts:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 主页将分为两部分：
- en: The first part will contain the list of posts (**1** in *Figure 8**.7*)
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一部分将包含帖子列表（**1**见*图8**.7*）
- en: The second part will include a list of five profiles (**2** in *Figure 8**.7*)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二部分将包括五个配置文件列表（**2**见*图8**.7*）
- en: '![Figure 8.7 – Structure of the home page](img/Figure_8.07_B18221.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图8.7 – 主页结构](img/Figure_8.07_B18221.jpg)'
- en: Figure 8.7 – Structure of the home page
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 – 主页结构
- en: 'We can achieve the result quickly by using rows and columns components provided
    by `react-bootstrap`. We won’t focus on the second part (listing the profiles)
    for the moment. Let’s ensure we have all **CRUD** operations for the post feature:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`react-bootstrap`提供的行和列组件快速实现结果。目前我们不会关注第二部分（列出配置文件）。让我们确保我们为帖子功能有所有**CRUD**操作：
- en: 'Inside the `Home.jsx` file, add the following content. We’ll start by importing
    and adding the rows:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Home.jsx`文件内部，添加以下内容。我们将首先导入并添加行：
- en: src/pages/Home.jsx
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/Home.jsx
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Great! Make sure to save the changes, start the server, and go to the home
    page. You’ll have something similar to this:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太好了！确保保存更改，启动服务器，然后转到主页。你将看到类似以下内容：
- en: '![Figure 8.8 – Create Post UI](img/Figure_8.08_B18221.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图8.8 – 创建帖子UI](img/Figure_8.08_B18221.jpg)'
- en: Figure 8.8 – Create Post UI
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8 – 创建帖子UI
- en: 'Click on the input, and a modal will show up. Type anything you want in the
    input and submit it. The modal will close, and you’ll have a toast appearing at
    the top center of the page:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击输入框，将弹出一个模态框。在输入框中输入任何内容并提交。模态框将关闭，你将在页面顶部中央看到一个提示：
- en: '![Figure 8.9 – Toast after successful post creation](img/Figure_8.09_B18221.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图8.9 – 成功创建帖子后的提示](img/Figure_8.09_B18221.jpg)'
- en: Figure 8.9 – Toast after successful post creation
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9 – 成功创建帖子后的提示
- en: Great! We can now create posts using our React application. To make it possible,
    we have created a `Modal` component and a form with React Bootstrap to handle
    data validation and submission. And because feedback is an important aspect of
    user experience, we have added a toaster with React Bootstrap and integrated it
    with the `useContext` Hook to notify the user of the result of the requests.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们现在可以使用我们的React应用程序创建帖子。为了使其成为可能，我们创建了一个`Modal`组件和一个带有React Bootstrap的表单来处理数据验证和提交。并且因为反馈是用户体验的重要方面，我们添加了一个使用React
    Bootstrap的toaster，并将其与`useContext`钩子集成，以通知用户请求的结果。
- en: The next step is to list all the posts and add actions such as deletion and
    modification.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是列出所有帖子并添加如删除和修改等操作。
- en: Listing posts on the home page
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在主页上列出帖子
- en: Now that users can create posts, we need to list the posts on the home page
    but also allow the user to access them. This will require the creation of a component
    to display information about a post. As shown in *Figure 8**.1*, under the **Write
    a post** input, we have a list of posts. The home page structure is already added,
    so we need to add a component that will handle the logic behind showing information
    about a post.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户可以创建帖子，我们需要在主页上列出帖子，同时也允许用户访问它们。这需要创建一个组件来显示帖子的信息。如图*图8**.1*所示，在**写帖子**输入框下方，我们有一个帖子列表。主页结构已经添加，因此我们需要添加一个组件来处理显示帖子信息背后的逻辑。
- en: 'Here’s the flow to list the posts on the home page:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是列出主页上帖子的流程：
- en: We use the `swr` library to fetch a list of posts
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`swr`库获取帖子列表
- en: We loop through the list of posts and then pass a post as props to a component
    called `Post`, which will show data about a post
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们遍历帖子列表，然后将帖子作为props传递给一个名为`Post`的组件，该组件将显示帖子的数据
- en: Before starting to fetch data, let’s create the `Post` component.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始获取数据之前，让我们创建`Post`组件。
- en: Writing the Post component
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写帖子组件
- en: 'To create a `Post` component, follow these steps:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个`Post`组件，请按照以下步骤操作：
- en: 'Inside the `src/components/post/` directory, create a new file called `Post.jsx`.
    This file will contain the logic to show post data and logic such as like or remove
    like, deletion, and modification. Here’s a wireframe of the `Post` component:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components/post/`目录内，创建一个名为`Post.jsx`的新文件。这个文件将包含显示帖子数据和如点赞或取消点赞、删除和修改等逻辑。以下是`Post`组件的线框图：
- en: '![Figure 8.10 – Post component](img/Figure_8.10_B18221.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图8.10 – 帖子组件](img/Figure_8.10_B18221.jpg)'
- en: Figure 8.10 – Post component
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10 – 帖子组件
- en: 'To make things faster, we will work with the `Card` component provided by `react-bootstrap`.
    The `Card` component comes with a structure containing a title, body, and footer:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使事情更快，我们将使用`react-bootstrap`提供的`Card`组件。`Card`组件包含一个包含标题、正文和页脚的结构：
- en: src/components/post/Post.jsx
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/Post.jsx
- en: '[PRE16]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `Post` component accepts two props:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`Post`组件接受两个属性：'
- en: The `post` object containing data about a post.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含帖子数据的`post`对象。
- en: The `refresh` function. This function will come from the SWR `posts` object,
    and SWR returns an object with a `mutate` method that can be used to trigger the
    fetching of data.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refresh`函数。这个函数将来自SWR的`posts`对象，SWR返回一个包含`mutate`方法的对象，可以用来触发数据的获取。'
- en: 'We also profited from adding the `handleLikeClick` function. Two actions can
    be passed to the function: either `like` or `remove_like`. If the request succeeds,
    we can refresh the posts. Great! Let’s start by adding the `Card` body. It’ll
    contain the avatar of the author of the post, the name, and the time elapsed since
    the creation of the post:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还从添加`handleLikeClick`函数中受益。可以将两个操作传递给该函数：要么是`like`，要么是`remove_like`。如果请求成功，我们可以刷新帖子。太好了！让我们先添加`Card`的正文。它将包含帖子的作者头像、姓名和帖子创建以来的时间：
- en: src/components/post/Post.jsx
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/Post.jsx
- en: '[PRE17]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Go ahead and add the body of the post and the likes count:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续添加帖子的正文和点赞数：
- en: src/components/post/Post.jsx
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/Post.jsx
- en: '[PRE18]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can now move to the `Card` footer containing the like and comment UI. Let’s
    start by adding the **Like** icon followed by text:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以移动到包含点赞和评论UI的`Card`页脚。让我们先添加**点赞**图标，然后是文本：
- en: src/components/post/Post.jsx
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/Post.jsx
- en: '[PRE19]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now go ahead and add the **Comment** icon followed by the text:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在继续添加**评论**图标，然后是文本：
- en: src/components/post/Post.jsx
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/Post.jsx
- en: '[PRE20]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `Post` component is entirely written; we can use it on the home page now.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`Post`组件已经完全编写完成；我们现在可以在主页上使用它了。'
- en: Adding the Post component to the home page
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将`Post`组件添加到主页
- en: Let’s now add our `Post` component to the home page.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将把我们的`Post`组件添加到主页上。
- en: 'In the `Home.jsx` file, import the `Post` component:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Home.jsx`文件中，导入`Post`组件：
- en: src/pages/Home.jsx
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/Home.jsx
- en: '[PRE21]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can now use the components in the code by first fetching posts from the
    server:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过首先从服务器获取帖子来在代码中使用这些组件：
- en: src/pages/Home.jsx
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/Home.jsx
- en: '[PRE22]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `useSWR` Hook can accept some parameters, such as `refreshInterval`. Here,
    the returned data is refreshed every 10 seconds. We can now use these objects
    in the UI:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`useSWR`钩子可以接受一些参数，例如`refreshInterval`。在这里，返回的数据每10秒刷新一次。我们现在可以在UI中使用这些对象：'
- en: src/pages/Home.jsx
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/Home.jsx
- en: '[PRE23]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Great! After adding the `Post` component to the home page, you should have
    a similar result to this:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！在主页上添加了`Post`组件后，你应该会有类似这样的结果：
- en: '![Figure 8.11 – List of posts](img/Figure_8.11_B18221.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图8.11 – 帖子列表](img/Figure_8.11_B18221.jpg)'
- en: Figure 8.11 – List of posts
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11 – 帖子列表
- en: 'You can click on the `Post` component has a **More** dropdown in the top-right
    corner:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以点击右上角的`Post`组件的**更多**下拉菜单：
- en: '![Figure 8.12 – Adding the more dropdown](img/Figure_8.12_B18221.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图8.12 – 添加更多下拉菜单](img/Figure_8.12_B18221.jpg)'
- en: Figure 8.12 – Adding the more dropdown
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12 – 添加更多下拉菜单
- en: '`react-bootstrap` provides a `Dropdown` component we can use to achieve the
    same result. In the `Post.jsx` file, import the `Dropdown` component from `react-bootstrap`.
    As we will add the logic for post deletion, let’s also import the `Toaster` component:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-bootstrap`提供了一个我们可以使用的`Dropdown`组件，我们可以用它达到相同的效果。在`Post.jsx`文件中，从`react-bootstrap`导入`Dropdown`组件。由于我们将添加帖子删除的逻辑，让我们也导入`Toaster`组件：'
- en: src/components/post/Post.jsx
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/Post.jsx
- en: '[PRE24]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We then have to write the component we will pass to the `Dropdown` component
    as the title:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们必须编写我们将传递给`Dropdown`组件作为标题的组件：
- en: src/components/post/Post.jsx
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/Post.jsx
- en: '[PRE25]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can now add the `Dropdown` component to the UI. We need to make it conditional
    so that only the author of the post can access these options. We will just retrieve
    the user from `localStorage` and compare `user.id` to `author.id`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以将`Dropdown`组件添加到UI中。我们需要使其有条件，以便只有帖子的作者可以访问这些选项。我们只需从`localStorage`检索用户，并将`user.id`与`author.id`进行比较：
- en: src/components/post/Post.jsx
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/Post.jsx
- en: '[PRE26]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let’s add the component UI and the `Toaster` component:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加组件UI和`Toaster`组件：
- en: src/components/post/Post.jsx
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/Post.jsx
- en: '[PRE27]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `Dropdown` component is also added to the toaster. Each time a post is
    deleted, a red toaster will pop up at the top center of the page:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dropdown`组件也被添加到提示器中。每次删除帖子时，页面上方中央都会弹出一个红色的提示器：'
- en: '![Figure 8.13 – Deleting a post](img/Figure_8.13_B18221.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图8.13 – 删除帖子](img/Figure_8.13_B18221.jpg)'
- en: Figure 8.13 – Deleting a post
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.13 – 删除帖子
- en: The user can now delete their own post and the functionality is accessible directly
    from the `Post` component. We have explored how to use the `UseContex` Hook again
    and also how to create a dropdown using `react-bootstrap`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 用户现在可以删除自己的帖子，并且这个功能可以直接从`Post`组件中访问。我们已经探讨了如何再次使用`UseContex`钩子，以及如何使用`react-bootstrap`创建下拉菜单。
- en: The **CRUD** operations on the post feature are nearly done and only the update
    feature remains. It’s easy, and you will implement it as a small exercise, but
    I’ll add the necessary code and instructions to follow.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 帖子功能的**CRUD**操作几乎完成，只剩下更新功能。这很简单，你将作为一个小练习来实现它，但我将添加必要的代码和说明。
- en: Updating a post
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新帖子
- en: 'As mentioned earlier, the implementation of this feature is a simple exercise.
    Here’s the flow the user will typically follow when modifying a post:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这个功能的实现是一个简单的练习。以下是用户在修改帖子时通常会遵循的流程：
- en: Click on the **More** dropdown menu.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**更多**下拉菜单。
- en: Select the **Modify** option.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**修改**选项。
- en: A modal is shown with the body of the post, and the user can modify it.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将显示一个包含帖子内容的模态框，用户可以对其进行修改。
- en: Once it’s done, the user saves, and the modal is closed.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，用户保存，模态框关闭。
- en: A toast will pop up with the content **Post** **updated** **🚀**.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将弹出一个包含**帖子** **更新** **🚀**内容的提示框。
- en: 'The feature is similar to `CreatePost.jsx`; the difference is that the `UpdatePost`
    component will receive a `post` object as props. Here’s the skeleton of the code:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能与`CreatePost.jsx`类似；区别在于`UpdatePost`组件将接收一个`post`对象作为属性。以下是代码的框架：
- en: src/components/post/UpdatePost.jsx
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/UpdatePost.jsx
- en: '[PRE28]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The component is called in the `Post.jsx` file and used like this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件在`Post.jsx`文件中被调用，并像这样使用：
- en: src/components/post/Post.jsx
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/post/Post.jsx
- en: '[PRE29]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Good luck with the exercise. You can find the solution at [https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/main/social-media-react/src/components/posts/UpdatePost.jsx](https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/main/social-media-react/src/components/posts/UpdatePost.jsx).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你练习顺利。你可以在[https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/main/social-media-react/src/components/posts/UpdatePost.jsx](https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/main/social-media-react/src/components/posts/UpdatePost.jsx)找到解决方案。
- en: Minor refactoring
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小型重构
- en: 'Firstly, there is no refresh made when a new post is created. As we did for
    the `UpdatePost.jsx` component, we can also pass some props to the `CreatePost`
    component:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建新帖子时不会进行刷新。正如我们在`UpdatePost.jsx`组件中所做的那样，我们也可以向`CreatePost`组件传递一些属性：
- en: src/pages/Home.jsx
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/Home.jsx
- en: '[PRE30]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: And, we can call the `refresh` method when a post is successfully created:.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当帖子成功创建时，我们可以调用`refresh`方法：
- en: src/components/posts/CreatePost.jsx
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/posts/CreatePost.jsx
- en: '[PRE31]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now, every time a user adds a post, he will see the newly created post on the
    Home page without the need of reloading the page.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次用户添加帖子时，他都会在主页上看到新创建的帖子，而无需重新加载页面。
- en: Secondly, the `Toaster` component is created but we need to think about how
    to call the component in the project. Let’s not forget that this component is
    created to return feedback to the user about a successful or failed request, thus
    the component should be reusable in the whole project, which is what we've actually
    done, right?
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，`Toaster`组件已创建，但我们需要考虑如何在项目中调用该组件。让我们不要忘记，这个组件是为了向用户返回关于成功或失败的请求的反馈而创建的，因此该组件应该在整个项目中可重用，这正是我们实际所做的事情，对吧？
- en: Well, no, and this is not desirable as it will violate the `Toaster` component
    higher in the component hierarchy and then be able to call or show the toaster
    from any child component?
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，不是的，这并不理想，因为它将违反组件层次结构中更高的`Toaster`组件，然后能够从任何子组件中调用或显示吐司？
- en: '![Figure 8.14 – Parent and child components](img/Figure_8.14_B18221.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图8.14 – 父组件和子组件](img/Figure_8.14_B18221.jpg)'
- en: Figure 8.14 – Parent and child components
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14 – 父组件和子组件
- en: 'In the preceding figure, we will be able to trigger the display of a toaster
    in the project directly in a parent component from a child component (`CreatePost`).
    React provides an interesting way to manage state across parents and child components
    and this is called context. `Layout.jsx` file, create a new context using the
    `createContext` method:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们将能够从子组件（`CreatePost`）直接在父组件中触发项目中吐司的显示。React提供了一种有趣的方式来管理父组件和子组件之间的状态，这被称为上下文。在`Layout.jsx`文件中，使用`createContext`方法创建一个新的上下文：
- en: src/components/Layout.jsx
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/Layout.jsx
- en: '[PRE32]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then in the `Layout` component scope, let’s define the state containing the
    data that the toaster will use to display information. We will also wrap the component
    JSX content inside the `Context` component and add a method to modify the state
    from any child components of the `Layout` component:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在`Layout`组件的作用域内，让我们定义包含吐司将用于显示信息的数据的状态。我们还将将组件JSX内容包裹在`Context`组件内部，并添加一个方法来从`Layout`组件的任何子组件中修改状态：
- en: src/components/Layout.jsx
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: src/components/Layout.jsx
- en: '[PRE33]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the preceding code, we have introduced a new function Hook called `useMemo`,
    which helps to memorize the context value (caching the value of the context) and
    avoid the creation of new objects every time there is a re-rendering of the `Layout`
    component.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们介绍了一个新的函数Hook，称为`useMemo`，它有助于记住上下文值（缓存上下文的值）并避免每次`Layout`组件重新渲染时创建新对象。
- en: 'We will then be able to access the `toaster` state and call the `setToaster`
    function from any child component:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将能够访问`toaster`状态并从任何子组件中调用`setToaster`函数：
- en: '[PRE34]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we’ve gone deeper into React programming by creating the components
    needed for the CRUD operations used in the post feature. We have covered concepts
    such as props passing, parent-children component creation, UI component customization,
    and modal creation. That led to the partial completion of the home page of the
    `Postagram` project. We also learned more about the `useState` and `useContext`
    Hooks and how they affect state in React. We have also learned how to create a
    `Dropdown` component, how to create a custom toaster, and the importance of layout
    in a React project.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过创建用于帖子功能的CRUD操作所需的组件，更深入地了解了React编程。我们涵盖了诸如属性传递、父-子组件创建、UI组件定制和模态框创建等概念。这导致了`Postagram`项目主页的部分完成。我们还学习了更多关于`useState`和`useContext`Hooks以及它们如何影响React中的状态的知识。我们还学习了如何创建`Dropdown`组件，如何创建自定义吐司，以及在React项目中布局的重要性。
- en: In the next chapter, we’ll focus on the CRUD operations of the comment feature.
    This will lead us to add a **Profile** page and a **Post** page to display comments.
    We’ll also make simple and quick assessments to add Like features to the comments
    too.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于评论功能的CRUD操作。这将导致我们添加一个**个人资料**页面和一个**帖子**页面来显示评论。我们还将进行简单快速的评估，以添加到评论中的点赞功能。
- en: Questions
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is a modal?
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是模态框？
- en: What is a prop?
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是属性？
- en: What is a children element in React?
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React中的子元素是什么？
- en: What is a wireframe?
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是线框图？
- en: What is the map method used in JSX?
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSX中使用的`map`方法是什么？
- en: What is the usage of the `mutate` method on SWR objects?
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SWR对象上`mutate`方法的用法是什么？
