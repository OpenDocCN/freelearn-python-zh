- en: Chapter 4. Advanced Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章. 高级表单
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Adding a cancel button to forms
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表单中添加取消按钮
- en: Adding confirmation on form submit
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表单提交时添加确认
- en: Searching data dynamically
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态搜索数据
- en: Embedding multiple forms in one page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一页中嵌入多个表单
- en: Detecting and blocking concurrent updates
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测和阻止并发更新
- en: Creating a form wizard
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建表单向导
- en: De-normalizing data temporarily
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 临时去规范化数据
- en: Removing form labels
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除表单标签
- en: Using `fileuploader.js`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `fileuploader.js`
- en: Uploading files using a `LOADed` component
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `LOADed` 组件上传文件
- en: Making image thumbnails from uploaded images
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从上传的图像创建图像缩略图
- en: Monitoring upload progress
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控上传进度
- en: Auto tooltip in forms
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单中的自动提示
- en: Color picker widget
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色选择器小部件
- en: Shortening text fields
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩短文本字段
- en: Creating multi-table forms
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建多表单
- en: Creating a multi-table form with references
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建具有引用的多表单
- en: Creating a multi-table update form
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建多表更新表单
- en: Star rating widget
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 星级评分小部件
- en: Introduction
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Web2py comes with powerful functions for form generation. In this chapter, we
    provide examples of customization of forms from adding buttons to creating custom
    form widgets. We also provide examples of complex forms, such as wizards and multi-table
    forms.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Web2py 提供了强大的表单生成功能。在本章中，我们提供了从添加按钮到创建自定义表单小部件的表单定制的示例。我们还提供了复杂表单的示例，例如向导和多表单。
- en: Adding a cancel button to forms
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在表单中添加取消按钮
- en: This recipe explains a method to add cancel buttons to forms, that is, a button
    that does not submit the forms, ignores any changes, and goes back to the previous
    page (or moves on to the next, depending on settings). The cancel button is really
    just a special case of a more general mechanism described herein to add buttons
    to your form.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方解释了一种向表单添加取消按钮的方法，即不提交表单、忽略任何更改并返回到上一页（或根据设置继续到下一页）的按钮。取消按钮实际上是此处描述的更一般机制的特殊情况，用于向你的表单添加按钮。
- en: Getting ready
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Our recipe assumes a generic model.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的配方假设了一个通用模型。
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The controller builds the form and button with the following statements:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制器使用以下语句构建表单和按钮：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can add a button using the following statement:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用以下语句添加按钮：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The last line shows how adding a `Cancel` button to a form is as simple as appending
    to the form. The index of the `SQLFORM`, where you choose append (or insert) your
    cancel button, determines where your button will appear on your page.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后一行显示了如何将“取消”按钮添加到表单中，这就像将按钮附加到表单一样简单。`SQLFORM` 的索引，你在其中选择附加（或插入）你的取消按钮，决定了你的按钮将在你的页面上出现的位置。
- en: Here form`[0]` is the TABLE inside the form. `form[0]`[-1] is the last TR. form`[0][-1][1]`
    is column number one (the second TD in the last TR). The `_onclick` argument takes
    the user to the URL specified in the right-hand-side of the `window.location=
    statement.`
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，表单`[0]`是表单内的 TABLE。`form[0]`[-1]是最后一个 TR。`form[0][-1][1]`是第一列（最后一个 TR 中的第二个
    TD）。`_onclick` 参数将用户带到 `window.location=` 语句右侧指定的 URL。
- en: 'An equivalent notation to put the `Cancel` button after the `Submit` button
    would be:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将“取消”按钮放在“提交”按钮之后的等效表示法将是：
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the element method partially accepts CSS3 syntax.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，元素方法部分接受 CSS3 语法。
- en: In general, buttons of any type can be added into a form using this same mechanism.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，可以使用相同的机制将任何类型的按钮添加到表单中。
- en: 'If you prefer more control and transparency over the creation of your `Cancel`
    button, or other buttons, then a custom view might be in order. However, you may
    not mix this method with a form that has been appended to. This example shows
    a custom form, where the form was created by the following:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你更喜欢对创建你的“取消”按钮或其他按钮有更多控制和透明度，那么自定义视图可能是有序的。然而，你不得将此方法与已附加到表单中混合使用。以下示例显示了一个自定义表单，表单是通过以下方式创建的：
- en: '[PRE3]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The example assumes a generic table with fields numbered `1` to `N`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 示例假设了一个具有编号为 `1` 到 `N` 的字段的通用表。
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, cannot `field1...field3` must be actual field names. Once more, the `_onclick`
    action can be of any kind and flavor you like.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`field1...field3` 必须是实际的字段名称。再次强调，`_onclick` 动作可以是任何类型和风味。
- en: Adding confirmation on form submit
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在表单提交时添加确认
- en: Often, you want to double-check that the user is not accidentally submitting
    an incorrect form. You can do this by prompting the user for confirmation when
    he/she presses the submit button. This can be done in two ways.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 经常，你需要再次确认用户不是意外提交了错误表单。你可以通过在用户点击提交按钮时提示用户确认来实现这一点。这可以通过两种方式完成。
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'One way is by using `jQuery` to only edit the view that renders the form. In
    the view add the following code:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种方法是通过使用`jQuery`仅编辑渲染表单的视图。在视图中添加以下代码：
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, `confirm` is a JavaScript function that instructs the browser to create
    a confirmation dialog-box. If you press [**yes**] the `onclick` function returns
    true, and the form is submitted. If you press [**no**], the `onclick` function
    returns false, and the form is not submitted.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`confirm`是一个JavaScript函数，它指示浏览器创建一个确认对话框。如果你按下[**是**]，`onclick`函数返回true，表单将被提交。如果你按下[**否**]，`onclick`函数返回false，表单将不会被提交。
- en: The same can be achieved by adding the string to the `onclick` attribute of
    the button when the form is created.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，你可以在创建表单时将字符串添加到按钮的`onclick`属性中来实现这一点。
- en: '[PRE6]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In web2py, there is an easy way to do it:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在web2py中，有一个简单的方法来做这件事：
- en: '[PRE7]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice how we grab the `form.element(...)` using the `jQuery` syntax on the
    server-side (before the form is actually rendered in HTML), and we modify its
    `onclick` attribute (using the web2py notation with the preceding underscore).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何在服务器端（在表单实际在HTML中渲染之前）使用`jQuery`语法获取`form.element(...)`，并修改其`onclick`属性（使用带有前导下划线的web2py表示法）。
- en: Searching data dynamically
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态搜索数据
- en: 'Web2py comes with a `crud.search` mechanism that allows you to do the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Web2py自带了一个`crud.search`机制，允许你执行以下操作：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, `form` is a search form and `records` are the result of the search. To
    understand how this works, we present in this recipe a simplified implementation
    of this function that you can further customize depending on your needs. Here,
    `db.things` is a table containing our things. The actual name of the table or
    its structure are not relevant here.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`form`是一个搜索表单，`records`是搜索的结果。为了理解它是如何工作的，我们在这个菜谱中提供了一个简化版的函数实现，你可以根据你的需求进一步自定义。在这里，`db.things`是一个包含我们的东西的表。实际的表名或其结构在这里并不重要。
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'First of all crate a new model, for example `dynamic_search.py`, and add the
    following code to it:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个新的模型，例如`dynamic_search.py`，并将以下代码添加到其中：
- en: '[PRE9]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, you can use `dynamic_search` as a replacement for `crud.search`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以使用`dynamic_search`作为`crud.search`的替代品。
- en: '[PRE10]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can render this with the following view:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以用以下视图来渲染它：
- en: '[PRE11]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is how it looks like:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它看起来是这样的：
- en: '![How to do it...](img/5467OS_04_27.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/5467OS_04_27.jpg)'
- en: Embedding multiple forms in one page
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在一个页面上嵌入多个表单
- en: This recipe explains how to embed more than one form in a page. Doing so can
    increase user productivity by reducing HTTP calls, but carries a risk of cluttering
    the page layout.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱解释了如何在页面上嵌入多个表单。这样做可以通过减少HTTP调用来提高用户的生产力，但可能会增加页面布局的杂乱。
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To illustrate a page with multiple forms, we create a stripped-down system for
    storing a person's educational **Curriculum Vitae (CV)** . We begin by defining
    tables for schools, students, and the degrees they received.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了说明具有多个表单的页面，我们创建了一个用于存储个人教育**简历（CV）**的简化系统。我们首先定义了学校、学生和他们所获得的学位的表。
- en: '[PRE12]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `index()` controller creates a form for each of the tables:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index()`控制器为每个表创建一个表单：'
- en: '[PRE13]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In a typical web2py controller, you would see only one `form=SQLFORM(...)` statement,
    and one `if form.accepts(...)` clause. Since we have three forms to render and
    process, we need three `SQLFORM(...)` statements, and three `if specific_form.accepts(...)`
    statements. Each form must be given a unique name, so that when one of the forms
    is POSTed, its respective `form.accepts` clause will be triggered.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在典型的web2py控制器中，你只会看到一个`form=SQLFORM(...)`语句和一个`if form.accepts(...)`子句。由于我们需要渲染和处理三个表单，我们需要三个`SQLFORM(...)`语句和三个`if
    specific_form.accepts(...)`子句。每个表单都必须有一个唯一的名称，以便当一个表单被POST时，其相应的`form.accepts`子句将被触发。
- en: Note that forms about tables that contain references to other tables must be
    defined and processed in the order of the dependences. So if a new `school` or
    a new `student` is added, it shows the `education` form drop-down menu.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，关于包含其他表引用的表格的表单必须按照依赖关系的顺序定义和处理。因此，如果添加了新的`school`或新的`student`，它将显示`education`表单的下拉菜单。
- en: 'The simplest view to display all three forms on a single page is something
    like this:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在单个页面上显示所有三个表单的最简单视图如下所示：
- en: '[PRE14]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If two or more forms are relative to the same table, the accepts must be passed
    a `formname` argument, and it must be different for the two forms.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个或多个表单与同一表相关，必须将`formname`参数传递给`accepts`，并且对于两个表单必须不同。
- en: There's more...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'Another option consists of implementing the different forms and components
    loaded in the main (index) page using the `LOAD` command. Also notice that a submission
    of the `education` form does not affect the other two, while the other two affect
    the drop-down in the `education` form. This allows us to create different actions
    for each of the forms:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是使用 `LOAD` 命令实现主（索引）页面中加载的不同表单和组件。请注意，提交 `education` 表单不会影响其他两个，而其他两个会影响
    `education` 表单中的下拉列表。这允许我们为每个表单创建不同的操作：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'A view `views/default/index.html` embeds the three forms and traps the `education`
    form, so that when this form is submitted, the other two are not processed and
    reloaded:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 视图 `views/default/index.html` 包含了三个表单，并捕获了 `education` 表单，因此当提交此表单时，其他两个表单不会被处理和重新加载：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Multiple-form pages can also be created using the `FORM, SQLFORM.factory`, and
    `crud` statements, or a combination of all form-generating statements. Customized
    forms can be mixed with automatically-generated forms. There is no limit to the
    flexibility available to generating beautiful form-entry pages with web2py.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `FORM`、`SQLFORM.factory` 和 `crud` 语句，或者所有表单生成语句的组合来创建多表单页面。可以将自定义表单与自动生成的表单混合使用。使用
    web2py 生成美观的表单输入页面具有无限的灵活性。
- en: Detecting and blocking concurrent updates
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测和阻止并发更新
- en: Consider for example a wiki page. You open the page, edit it, and save it. It
    is possible that while you edit your page, somebody accesses the same page, and
    saves a new version of the page before you do. Your save action will result in
    the previous edits being lost.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个维基页面。你打开页面，编辑它，并保存它。在你编辑页面的同时，可能有人访问了同一页面，并在你之前保存了页面的新版本。你的保存操作将导致之前的编辑丢失。
- en: Of course, you can prevent concurrent edits by implementing a locking mechanism,
    but it is difficult to properly implement such a mechanism. What if a user opens
    a page for editing, leaves the browser open, and forgets about it? Everybody else
    would be prevented to edit the same page. Implementing a timeout re-introduces
    the original problem.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以通过实现锁定机制来防止并发编辑，但正确实现这样的机制是困难的。如果用户打开一个页面进行编辑，然后关闭浏览器并忘记它，会发生什么？其他人将无法编辑同一页面。实现超时机制会重新引入原始问题。
- en: There is a simple solution. Every time you save a page (or any record for that
    matters) ask web2py to check whether the original record has been modified on
    the server since the moment when the record was originally retrieved.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个简单的解决方案。每次你保存一个页面（或任何相关的记录）时，请让 web2py 检查自记录最初检索以来，原始记录是否在服务器上被修改。
- en: This is easy in web2py, as we will explain in the this recipe.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 web2py 中，这很容易，我们将在本菜谱中解释。
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will consider, as an example, an application with following model:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以以下模型为例来考虑一个应用：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And the following edit form:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以及以下编辑表单：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'All you have to do is pass an extra attribute to `form.accepts, detect_record_change`,
    and check whether the record has changed:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要做的只是向 `form.accepts` 传递一个额外的属性 `detect_record_change`，并检查记录是否已更改：
- en: '[PRE19]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: On `record-changed`, you can the write your own logic to deal with the conflict.
    The data on the server is always in the page (`page.title` and `page.body)`; the
    submitted values are in `request.vars.title` and `request.vars.body`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `record-changed` 事件中，你可以编写自己的逻辑来处理冲突。服务器上的数据始终在页面中（`page.title` 和 `page.body`）；提交的值在
    `request.vars.title` 和 `request.vars.body` 中。
- en: There's more...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'What about `crud` forms? It turns out that `crud.create` and `crud.update`
    forms have `detect_record_change=True`, by default (while it is `False` by default
    for normal SQLFORMs). Therefore, if a record is modified on the server, the newly
    submitted values are not saved. Yet crud forms do not provide any logic to deal
    with this situation, and leave it to the developer. For example, you can rewrite
    the previous example using `crud` as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 那么 `crud` 表单怎么办？实际上，`crud.create` 和 `crud.update` 表单默认具有 `detect_record_change=True`（而正常的
    SQLFORMs 默认为 `False`）。因此，如果服务器上的记录被修改，新提交的值不会被保存。然而，crud 表单不提供任何处理这种情况的逻辑，而是将其留给开发者。例如，你可以使用
    `crud` 重写前面的示例，如下所示：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Notice that when a submission is rejected because the record changed on the
    server, a second submission will succeed.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当提交被拒绝，因为服务器上的记录已更改时，第二次提交将成功。
- en: Creating a form wizard
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建表单向导
- en: We often need to gather information from a user (for example, to populate a
    database or perform some other operation), yet we do not want to overwhelm the
    user with a very large form. A better approach consists of breaking the form into
    multiple pages that the user can navigate with a `[next]` button. Such an approach
    is a called a **wizard**.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常需要从用户那里收集信息（例如，为了填充数据库或执行某些其他操作），但我们不希望用一个非常大的表单让用户感到不知所措。一个更好的方法是把表单分成多个页面，用户可以通过一个
    `[下一步]` 按钮来导航。这种做法被称为 **向导**。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Here we assume we want to use a wizard to populate multiple fields in a table
    called `mytable:`
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们假设我们想要使用向导来填充 `mytable:` 表中的多个字段
- en: '[PRE21]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: It does not matter how many fields you have.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你有多少字段并不重要。
- en: 'We can handle the wizard with a single action. The action needs to know how
    many steps, which fields to query at each step, and where to go after the last
    step. Here is a possible implementation:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以用一个单独的操作来处理向导。这个操作需要知道有多少步骤，每个步骤要查询哪些字段，以及最后一步之后要去哪里。以下是一个可能的实现：
- en: '[PRE22]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can render the wizard with the following:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以用以下方式渲染向导：
- en: '[PRE23]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: It is pretty simple, actually. The wizard action gets its page number from `request.args(0)`,
    and looks up in `STEPS` which fields to display. It uses `SQLFORM.factory` to
    build the partial form. Completed data from `form.vars` are stored in `session.wizard`.
    The last page instead of a tuple for the list of fields, contains a `URL('done')`,
    which is a string. When the wizard encounters this condition, it knows that it
    is time to insert the `session.wizard` variables in a new table and redirect them
    to the said URL. Notice that validation is done at each step for the fields that
    are displayed.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这很简单。向导操作从 `request.args(0)` 获取其页面编号，并在 `STEPS` 中查找要显示的字段。它使用 `SQLFORM.factory`
    来构建部分表单。完成的数据存储在 `session.wizard` 中。最后一页不是字段列表的元组，而是一个 `URL('done')` 字符串。当向导遇到这个条件时，它知道是时候在新的表中插入
    `session.wizard` 变量并将它们重定向到该 URL。注意，每个步骤都会对显示的字段进行验证。
- en: De-normalizing data temporarily
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 临时去规范化数据
- en: In this recipe, we consider the model described in the recipe *Efficient search
    by tag*, and we want to create insert, update forms, or a table `data` that allows
    the user to type in tags in a single input type text-box within the same form.
    In other words, we want to create a form that is automatically populated from
    the `data`, and all `tag` records referring to this `data` record. On submission,
    the form should update both the `data` and the `tag` tables.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们考虑菜谱中描述的模型 *通过标签高效搜索*，我们想要创建插入、更新表单，或者一个允许用户在同一个表单中输入标签的 `data` 表格。换句话说，我们想要创建一个表单，它可以自动从
    `data` 中填充，并且所有引用此 `data` 记录的 `tag` 记录。提交时，表单应更新 `data` 和 `tag` 表。
- en: Getting ready
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We assume our usual application, and the following model:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设我们的常规应用程序，以及以下模型：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We will also assume the following function in `controllers/default.py:`
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将假设在 `controllers/default.py` 中的以下函数：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How to do it...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We need to do this in two steps, each represented by a function. One function
    will assume we have new tags, delete old tags, and store the new tags. Another
    function will modify the crud form and add an input field containing the current
    tags. These two functions can then be used to modify our original form.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要分两步来做这件事，每一步都由一个函数表示。一个函数将假设我们有新的标签，删除旧的标签，并存储新的标签。另一个函数将修改 crud 表单并添加一个包含当前标签的输入字段。这两个函数然后可以用来修改我们的原始表单。
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `make_taggable` function takes a form object (forms are always derivatives
    of the `FORM` class), and injects into the form table a new row containing a label
    (`Tags:`), and an `INPUT` element. The `INPUT` value defaults to a string containing
    the current tags for the record.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`make_taggable` 函数接受一个表单对象（表单总是 `FORM` 类的派生），并向表单表注入一个包含标签（`Tags:`）和 `INPUT`
    元素的新行。`INPUT` 的值默认为包含当前标签的字符串。'
- en: When the form is submitted and accepted, `crud.update` ignores the `request.vars.tags`
    because it is not a field of the `db.data` table. If the form is accepted, the
    `onaccept` function is called, which points to `update_tags`. This function deletes
    the current tags and updates them.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单提交并被接受时，`crud.update` 会忽略 `request.vars.tags`，因为它不是 `db.data` 表的字段。如果表单被接受，会调用
    `onaccept` 函数，该函数指向 `update_tags`。这个函数会删除当前的标签并更新它们。
- en: Notice that this mechanism is very general, and there is nothing specific to
    the table `db.data`. In fact, the two functions `update_tags` and `make_taggable`
    can be used with any table, as long as it is referenced by a `db.tags` table,
    and both by `crud.update` and `crud.create` forms.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个机制非常通用，并没有针对`db.data`表的具体内容。实际上，`update_tags`和`make_taggable`这两个函数可以与任何表一起使用，只要它通过一个`db.tags`表引用，并且通过`crud.update`和`crud.create`表单。
- en: There's more...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We will need a minor tweak if the tags field needs validation. We will assume
    that each tag name needs validation and the validator is given by:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要验证标签字段，我们需要进行一些小的调整。我们将假设每个标签名称都需要验证，验证器如下所示：
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: That is, each tag must contain at least two characters. The first one must be
    alphanumeric (`\w`), while the subsequent ones can be alphanumeric (`\w`), or
    dash (`\-`), or dot (`\.`), or forward slash (`/`).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 即，每个标签至少包含两个字符。第一个必须是字母数字（`\w`），而后续的可以是字母数字（`\w`）、破折号（`\-`）、点（`\.`）或正斜杠（`/`）。
- en: 'In order to perform the validation, we need a smart validation function:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行验证，我们需要一个智能验证函数：
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then we need to force its call on validation:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要在验证时强制调用它：
- en: '[PRE29]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If all the other fields are validated, the `onvalidation` function is called.
    This function loops over all the tags, and validates them using the `db.tag.name`
    validator. If one of them does not pass, the error is stored in `form.errors`,
    which is a `Storage` object. The presence of form errors prevents the form from
    being accepted. When the form is rendered, the `INPUT(...,_name='tags')` object
    will pick up the error from the form, and display it appropriately.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有其他字段都已验证，则调用`onvalidation`函数。此函数遍历所有标签，并使用`db.tag.name`验证器进行验证。如果其中之一未通过，错误将存储在`form.errors`中，它是一个`Storage`对象。表单错误的存在阻止了表单的接受。当表单渲染时，`INPUT(...,_name='tags')`对象将从表单中获取错误，并适当地显示它。
- en: Removing form labels
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除表单标签
- en: 'When you use `SQLFORM` or crud, the generated form has labels. You can use
    the `formstyle` attribute of the form to decide how the labels should display:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`SQLFORM`或crud时，生成的表单有标签。你可以使用表单的`formstyle`属性来决定标签应该如何显示：
- en: '`table3cols` (on the left of the input widgets)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table3cols`（位于输入小部件的左侧）'
- en: '`table2cols` (on the top of the input widgets)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table2cols`（位于输入小部件的顶部）'
- en: '`divs` (on separate `divs` without a table, so you can position them by coordinates)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`divs`（在单独的`divs`中，没有表格，这样你可以通过坐标定位它们）'
- en: '`ul` (on the left of the input widgets but using unordered lists instead of
    a table)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ul`（位于输入小部件的左侧，但使用无序列表而不是表格）'
- en: Yet sometimes you just want to hide labels.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你只是想隐藏标签。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'There are two ways to do this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以做到这一点：
- en: 'One way consists of generating the form and removing them from the form:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种方法包括生成表单并从表单中移除它们：
- en: '[PRE30]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Another method consists of using a custom form in the view:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一种方法是在视图中使用自定义表单：
- en: '[PRE31]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The net effect is the same.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最终效果是相同的。
- en: Using fileuploader.js
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用fileuploader.js
- en: In this recipe, we will assume you have a database table to store uploaded files
    and you want to create an interface that allows users to upload multiple files
    using Ajax. `fileuploader.js` is a jQuery plugin that uses XHR for uploading multiple
    files, and displays a progress-bar. It works in Firefox 3.6+, Safari 4+, and Chrome,
    and falls back to the hidden iframe-based upload in other browsers.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将假设你有一个数据库表来存储上传的文件，并且你想要创建一个允许用户使用Ajax上传多个文件的接口。`fileuploader.js`是一个jQuery插件，它使用XHR上传多个文件，并显示进度条。它在Firefox
    3.6+、Safari 4+和Chrome中工作，在其他浏览器中回退到基于隐藏iframe的上传。
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First you need to download the plugin from [https://github.com/valums/file-uploader](http://https://github.com/valums/file-uploader),
    and place the file `fileuploader.js` into the application `static/js/`. Also,
    place the `fileuploader.css` into the application `static/css`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要从[https://github.com/valums/file-uploader](http://https://github.com/valums/file-uploader)下载插件，并将文件`fileuploader.js`放入应用的`static/js/`目录中。同时，将`fileuploader.css`放入应用的`static/css`目录中。
- en: 'Second, we will assume you have a model, such as the following where you would
    store uploaded files:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是假设你有一个模型，例如以下示例，你将在这里存储上传的文件：
- en: '[PRE32]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How to do it...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We need to create the following upload action in `controllers/default.py:`
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`controllers/default.py:`中创建以下上传操作：
- en: '[PRE33]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `upload_callback` action will receive a file in the `request.body` with
    a name in `request.vars.qqfile`. It will rename it, store it, insert the new name
    in the database, and return success. The `upload` action, instead, does nothing
    but its view will display the jQuery plugin:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`upload_callback` 动作将在 `request.body` 中接收一个文件，其名称在 `request.vars.qqfile` 中。它将重命名该文件，存储它，将新名称插入数据库，并返回成功。而
    `upload` 动作则不做任何事情，但其视图将显示 jQuery 插件：'
- en: '[PRE34]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This plugin is very powerful, and it has many configuration options. To learn
    more about it we refer to its website: [http://valums.com/ajax-upload/](http://valums.com/ajax-upload/).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件功能非常强大，并且具有许多配置选项。要了解更多信息，请参考其网站：[http://valums.com/ajax-upload/](http://valums.com/ajax-upload/)。
- en: 'A screenshot of the result can be seen here:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的截图可以在这里看到：
- en: '![How to do it...](img/5467OS_04_28.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现...](img/5467OS_04_28.jpg)'
- en: Uploading files using a LOADed component
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用加载的组件上传文件
- en: web2py allows you to design pages in a modular way and LOAD components in the
    page using Ajax. A component is a subset of the page served by its own action.
    The component may, for example, render a form. The component traps form submission,
    and only refreshes itself upon submission. This magic is possible, thanks to the
    `static/js/web2py_ajax.js` utilities, and the LOAD helper. The problem is that
    this mechanism breaks for multi-part forms, and it does not work when the form
    in a LOADed component includes a file `upload` field.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: web2py 允许您以模块化方式设计页面，并使用 Ajax 在页面中加载组件。组件是其自身动作所服务的页面的一部分。例如，组件可以渲染一个表单。组件会捕获表单提交，并在提交时才刷新自身。这种魔法之所以可能，归功于
    `static/js/web2py_ajax.js` 工具和 LOAD 辅助函数。问题是，这种机制在多部分表单中会失效，并且当加载的组件中的表单包含文件 `upload`
    字段时，它将不起作用。
- en: To fix the problem, we need a jQuery plugin called `jquery.form.js`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们需要一个名为 `jquery.form.js` 的 jQuery 插件。
- en: Getting ready
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To start, you need to download the required jQuery plugin from [http://github.com/malsup/form/raw/master/jquery.form.js?v2.43](http://github.com/malsup/form/raw/master/jquery.form.js?v2.43),
    and place it into the `static/js` folder as `jquery.form.js`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要从 [http://github.com/malsup/form/raw/master/jquery.form.js?v2.43](http://github.com/malsup/form/raw/master/jquery.form.js?v2.43)
    下载所需的 jQuery 插件，并将其放置在 `static/js` 文件夹中，命名为 `jquery.form.js`。
- en: 'We will also assume the following models (same as previous recipe), but we
    will ignore authentication:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将假设以下模型（与前面的食谱相同），但我们将忽略身份验证：
- en: '[PRE35]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The following controller:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 以下控制器：
- en: '[PRE36]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: And `views/default/index.html:`
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '并且 `views/default/index.html:` '
- en: '[PRE37]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: For any form but the one we created, this would work fine. It would not work
    with our form, because it contains an `upload` field. Notice that, in this recipe,
    we have used `user_signature=True` and `auth.requires_signature()` decorator.
    This will make sure that all URLs are signed, and any authentication/authorization
    that we apply to the parent page `index` will propagate to the components.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 对于除我们创建的表单之外的所有表单，这将正常工作。它不会与我们的表单一起工作，因为它包含一个 `upload` 字段。注意，在这个食谱中，我们使用了 `user_signature=True`
    和 `auth.requires_signature()` 装饰器。这将确保所有 URL 都被签名，并且我们应用于父页面 `index` 的任何身份验证/授权都将传播到组件。
- en: How to do it...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: To fix the problem, we need two steps. First we need to include the plugins
    by adding this line in `views/web2py_ajax.html:`
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们需要两个步骤。首先，我们需要通过在 `views/web2py_ajax.html` 中添加以下行来包含插件：
- en: '[PRE38]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then we need to modify `static/js/web2py_ajax.js`, by adding the logic to capture
    the form and handle the uploads using the `ajaxForm` function, defined in `jqeury.form.js`.
    To achieve this, edit `web2py_ajax.js` and replace the function `web2py_trap_form`
    with the following:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要修改 `static/js/web2py_ajax.js`，通过添加捕获表单并使用 `ajaxForm` 函数处理上传的逻辑，该函数在 `jqeury.form.js`
    中定义。为了实现这一点，编辑 `web2py_ajax.js` 并将函数 `web2py_trap_form` 替换为以下内容：
- en: '[PRE39]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: It will handle the form upload using ajaxForm, only if the form contains an
    input element of the upload class.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它将处理表单上传，仅当表单包含一个上传类输入元素时使用 ajaxForm。
- en: 'Then we need to create a view for the action `component_form` called `views/default/component_form.load`
    that contains the following:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要为名为 `component_form` 的动作创建一个视图，称为 `views/default/component_form.load`，它包含以下内容：
- en: '[PRE40]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The script should not be necessary, but the `ajaxForm` function does not properly
    pass the headers back-and-forth to the server. Therefore, we need to explicitly
    include in the view, the logic to show `response.flash`, and execute `response.js`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本可能不是必需的，但 `ajaxForm` 函数没有正确地在服务器之间传递头信息。因此，我们需要在视图中显式包含显示 `response.flash`
    的逻辑，并执行 `response.js`。
- en: Making image thumbnails from uploaded images
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从上传的图片制作图像缩略图
- en: The title says it all. We want to upload images, and dynamically make thumbnails
    images from them. We will store the thumbnail references in the same records as
    the uploaded images.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 标题已经说明了一切。我们想要上传图片，并从它们中动态创建缩略图。我们将把缩略图的引用存储在相同的记录中，与上传的图片一样。
- en: Getting ready
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To use the recipe, you must install the **Python Imaging Library** (PIL). You
    can find it at the following link:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个食谱，你必须安装**Python Imaging Library** (PIL)。你可以在以下链接找到它：
- en: '[http://www.pythonware.com/products/pil/](http://www.pythonware.com/products/pil/)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.pythonware.com/products/pil/](http://www.pythonware.com/products/pil/)'
- en: That requires running web2py from source. As usual with Python, you can use
    `easy_install:`
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要从源代码运行web2py。像Python一样，你可以使用`easy_install:`。
- en: '[PRE41]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Or from a Debian compatible distribution with the following:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 或者从与Debian兼容的发行版中，以下为：
- en: '[PRE42]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How to do it...
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: For this purpose, we will modify the model used in the two previous recipes
    by adding a field called `thumbnail`, and we will ignore authentication, since
    it is an orthogonal issue.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个目的，我们将修改在两个先前食谱中使用的模型，添加一个名为`thumbnail`的字段，并且我们将忽略身份验证，因为它是一个正交问题。
- en: '[PRE43]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Here is the controller:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是控制器：
- en: '[PRE44]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Monitoring upload progress
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控上传进度
- en: In this recipe, we will show how to create a JavaScript widget that displays
    a progress bar, and displays the upload progress. Our solution is server-based
    and more reliable than pure JavaScript solutions. Be aware that no browser can
    handle a file over 2GB.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将展示如何创建一个显示进度条并显示上传进度的JavaScript小部件。我们的解决方案是基于服务器的，比纯JavaScript解决方案更可靠。请注意，没有浏览器可以处理超过2GB的文件。
- en: 'This recipe is based on the following recipes adapted to web2py:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱基于以下食谱，经过修改以适应web2py：
- en: '[http://www.motobit.com/help/scptutl/pa98.htm](http://www.motobit.com/help/scptutl/pa98.htm)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.motobit.com/help/scptutl/pa98.htm](http://www.motobit.com/help/scptutl/pa98.htm)'
- en: '[http://www.djangosnippets.org/snippets/679/](http://www.djangosnippets.org/snippets/679/)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.djangosnippets.org/snippets/679/](http://www.djangosnippets.org/snippets/679/)'
- en: How to do it...
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: The main idea consists of using `cache.ram` to store the progress server-side,
    and expose an action to query for the value of this variable.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主要思想是使用`cache.ram`在服务器端存储进度，并公开一个查询此变量值的操作。
- en: 'This is accomplished in two steps. In the first step, we choose an X-Progress-ID
    key, so that we can later retrieve the cache value:'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是通过两个步骤完成的。在第一步中，我们选择一个X-Progress-ID键，这样我们就可以稍后检索缓存值：
- en: '[PRE45]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Then we retrieve the upload total length from `cache.ram:`
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们从`cache.ram:`检索上传的总长度：
- en: '[PRE46]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'And the current uploaded length:'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以及当前上传的长度：
- en: '[PRE47]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Here `myuuid` has to be replaced everywhere with a server generated UUID.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`myuuid`必须被服务器生成的UUID替换到所有地方。
- en: Let's do it now in more detail with a concrete example. Consider this controller
    action in `controllers/default.py:`
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们用一个具体的例子更详细地来做。考虑以下控制器操作在`controllers/default.py:`中：
- en: '[PRE48]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Note that this action servers two purposes:'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，这个操作有两个目的：
- en: It creates and processes the form
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它创建并处理表单
- en: If called with `.json`, and passed an `X-Progress-ID`, it returns the length
    and uploaded variables in json
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用`.json`调用，并传递一个`X-Progress-ID`，它将返回json中的长度和上传变量。
- en: Now we need to customize the form in `views/default/post.html:`
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要在`views/default/post.html:`中自定义表单：
- en: '[PRE49]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: How it works...
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The important part in this is the following:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键部分如下：
- en: '[PRE50]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: It passes the `uuid` variable as a `GET` variable. The rest of the magic is
    done automatically by web2py, which reads this variables, computes the upload
    programs, and stores it in `cache.ram`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 它将`uuid`变量作为`GET`变量传递。其余的魔法由web2py自动完成，它读取这些变量，计算上传程序，并将其存储在`cache.ram`中。
- en: 'These lines is also important:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行也很重要：
- en: '[PRE51]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: They tell web2py to use the same URL, but with the `.json` extension to get
    the length and uploaded values necessary to update the progress bar.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 它们告诉web2py使用相同的URL，但带有`.json`扩展名来获取更新进度条所需的长度和上传值。
- en: Auto tooltips in forms
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单中的自动提示
- en: This recipe shows you how to display tooltips in forms created through Crud
    or SQLFORM, using the field's `comment` attribute.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱展示了如何通过使用字段的`comment`属性在通过Crud或SQLFORM创建的表单中显示提示。
- en: Getting ready
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'First of all, you have to fill the `comment` attribute in the `field` definition
    where you want the tooltip to appear. For example:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你必须填写你想要提示出现的`field`定义中的`comment`属性。例如：
- en: '[PRE52]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: If you do only this, the tip will appear on the right side of the field when
    the form is generated through Crud or SQLFORM.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只做这些，提示将在通过Crud或SQLFORM生成的表单字段右侧出现。
- en: 'Remember that you can put HTML code in a comment using helpers:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，您可以使用辅助工具在评论中放置HTML代码：
- en: '[PRE53]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: How to do it...
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'You will need a jQuery plugin to show the tip, so you may Google it and pick
    one. Or you can use this link: [http://jquery.bassistance.de/tooltip/jquery.tooltip.zip](http://jquery.bassistance.de/tooltip/jquery.tooltip.zip).
    See what it looks like here: [http://jquery.bassistance.de/tooltip/demo/](http://jquery.bassistance.de/tooltip/demo/).'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使用jQuery插件来显示提示，因此您可以Google搜索并选择一个。或者您可以使用此链接：[http://jquery.bassistance.de/tooltip/jquery.tooltip.zip](http://jquery.bassistance.de/tooltip/jquery.tooltip.zip)。在此处查看其外观：[http://jquery.bassistance.de/tooltip/demo/](http://jquery.bassistance.de/tooltip/demo/).
- en: Extract `jquery.tooltip.min.js` in `static/js`, and `jquery.tooltip.css` to
    `static/css` respectively.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`static/js`中提取`jquery.tooltip.min.js`，并将`jquery.tooltip.css`放到`static/css`中分别。
- en: 'Edit your layout file, and in the head, before `{{include ''web2py_ajax.html''}}`
    add the following:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑您的布局文件，并在`{{include 'web2py_ajax.html'}}`之前在head中添加以下内容：
- en: '[PRE54]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now you have this script on every page you want tooltips:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以在您想要工具提示的每个页面上使用此脚本：
- en: '[PRE55]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Your comment column will be converted into nice tooltips.
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的评论列将被转换为漂亮的工具提示。
- en: You can also include this script in `web2py_ajax.html` or `layout.html`, to
    reuse the code. Or you may put this code in another file, and include it when
    needed; maybe this is a better way.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以将此脚本包含在`web2py_ajax.html`或`layout.html`中，以重用代码。或者您可以将此代码放在另一个文件中，并在需要时包含它；也许这是一种更好的方法。
- en: Color picker widget
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 颜色选择器小部件
- en: 'If you have a table field that is supposed to contain a color (red, green,
    #ff24dc, and so on.) you may want to a widget to represent the feild that allows
    you to change/select the color by picking it from a color canvas. Here we show
    you how to build a widget to do just that.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个应该包含颜色（红色、绿色、#ff24dc等）的表字段，您可能希望有一个小部件来表示该字段，允许您通过从颜色画布中选择颜色来更改/选择颜色。这里我们向您展示如何构建这样一个小部件。
- en: Getting ready
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to download `mColorPicker` from [http://www.bertera.it/software/web2py/mColorPicker-w2p.tgz](http://www.bertera.it/software/web2py/mColorPicker-w2p.tgz),
    and uncompress it in the `static/` folder of your application.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要从[http://www.bertera.it/software/web2py/mColorPicker-w2p.tgz](http://www.bertera.it/software/web2py/mColorPicker-w2p.tgz)下载`mColorPicker`，并在您应用程序的`static/`文件夹中解压缩。
- en: How to do it...
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Define the widget in the file `models/plugin_colorpicker.py:`
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件`models/plugin_colorpicker.py`中定义小部件：
- en: '[PRE56]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'To test it, create a table, and set the widget to our new `colorpicker` widget:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试它，创建一个表，并将小部件设置为我们的新`colorpicker`小部件：
- en: '[PRE57]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Finally, create the form in your controller:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在您的控制器中创建表单：
- en: '[PRE58]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Shortening text fields
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩短文本字段
- en: In this recipe, we assume we have a table like the following, and we want to
    display a list of selected post bodies, but shortened.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们假设我们有一个如下所示的表，我们想要显示所选帖子正文列表，但缩短。
- en: '[PRE59]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: How to do it...
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: How to do this depends on whether the post contains HTML or wiki syntax.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如何做这取决于帖子是否包含HTML或wiki语法。
- en: We'll consider HTML first.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先考虑HTML。
- en: 'This is done in three steps. In the controller we select the rows:'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这分为三个步骤。在控制器中我们选择行：
- en: '[PRE60]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Then we shorten by serializing and truncating the HTML:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后通过序列化和截断HTML来缩短：
- en: '[PRE61]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Then we display in the associated view:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在相关的视图中显示：
- en: '[PRE62]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Notice that TAG(`post.body`) parses the HTML, and then `flatten()` serializes
    the parsed HTML into text, omitting tags. We then extract the first 100 characters
    and add '...'.
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，TAG(`post.body`)解析HTML，然后`flatten()`将解析的HTML序列化为文本，省略标签。然后我们提取前100个字符并添加'...'.
- en: 'If the body contained wiki syntax instead of HTML, then things are simpler,
    because we do not need to parse, and we could render the shortened text. Here
    we assume `MARKMIN` wiki syntax:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果正文包含wiki语法而不是HTML，那么事情会更简单，因为我们不需要解析，可以直接渲染缩短后的文本。这里我们假设使用`MARKMIN` wiki语法：
- en: '[PRE63]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'And in the view:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在视图中：
- en: '[PRE64]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: There's more...
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多内容...
- en: In the latter case, if you are using a relational database, the truncation can
    be done in the database server, thus reducing the amount of data transferred from
    `db` server to `db` client.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在后一种情况下，如果您使用的是关系型数据库，截断可以在数据库服务器上完成，从而减少从`db`服务器到`db`客户端传输的数据量。
- en: '[PRE65]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: An even better approach is to store the shortened text in a different database
    field instead of shortening every time it is needed. This will result in a faster
    application.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的方法是存储缩短后的文本在不同的数据库字段中，而不是每次需要时都缩短。这将导致应用程序运行更快。
- en: Creating multi-table forms
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建多表单
- en: Let us consider the example case of a database table called bottles with fields
    representing guests bringing a bottle of wine to a tasting party. Each bottle
    can have one or two tasters. Rest assured, there is also a one-to-many relation
    for the tasting, but here we assume only two testers. Our goal is to create a
    custom form that allows inserting a description of the bottle, and fill in the
    names of the two tasters, even if the one-to-may relation is implemented through
    a separate table.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个数据库表`bottles`的例子，其中字段表示携带一瓶酒参加品酒会的客人。每个瓶子可以有一个或两个品酒者。请放心，品尝也存在一对一的关系，但这里我们假设只有两个品酒者。我们的目标是创建一个自定义表单，允许插入瓶子的描述，并填写两个品酒者的名字，即使一对一的关系是通过一个单独的表实现的。
- en: Getting ready
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'We will assume the following minimalist model, where the latter table implements
    the one-to-many relation:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将假设以下最小化模型，其中后一个表实现了一对一关系：
- en: '[PRE66]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: How to do it...
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we ask the `factory` to make us a form that contains a description of
    the bottle and a list field for the tasters:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们要求`工厂`为我们制作一个包含瓶子描述和品酒者列表字段的表单：
- en: '[PRE67]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Now, we can handle the `accept` in the following two steps:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以按照以下两个步骤来处理`accept`：
- en: We insert the `bottle` into the `db.bottle` table
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`bottle`插入到`db.bottle`表中
- en: We insert each of the `tasters` into the `db.taster` table
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将每个`tasters`插入到`db.taster`表中
- en: '[PRE68]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Notice that we have to filter fields from `form.vars`, before we can perform
    a `db.bottle.insert`, because the form contains fields that do not belong to the
    table.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在我们执行`db.bottle.insert`之前，我们必须从`form.vars`中过滤字段，因为表单包含不属于该表的字段。
- en: Creating a multi-table form with references
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建带有引用的多表表单
- en: Now we want to modify the previous example, so that tasters must be registered
    users in the system, and we want to select them using drop-boxes. One easy way
    to do this is by setting a maximum number of tasters (here we choose `10)`.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要修改前面的例子，使得品酒者必须是系统中的注册用户，并且我们想要使用下拉框来选择他们。一种简单的方法是设置品酒者的最大数量（这里我们选择`10`）。
- en: How to do it...
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First we need to modify the model, so that tasters is now a many-to-many link
    table (a bottle can have many tasters, and a taster can taste multiple bottles):'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要修改模型，使得品酒者现在是一个多对多链接表（一个瓶子可以有多个品酒者，一个品酒者可以品尝多个瓶子）：
- en: '[PRE69]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Now we change the action accordingly:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们相应地更改操作：
- en: '[PRE70]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: There's more...
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'A naive way to render this form is the following:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染此表单的一种天真方法是以下：
- en: '[PRE71]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'But, it is possible to make it smarter using JavaScript. The idea consists
    of hiding all rows of the form related to tasters, but showing only the first
    one and then letting the following rows appear as needed. jQuery is a fantastic
    tool for this kind of manipulation:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，使用JavaScript可以使它更智能。这个想法是隐藏与品酒者相关的表单的所有行，只显示第一行，然后根据需要显示后续行。jQuery是进行此类操作的优秀工具：
- en: '[PRE72]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: How it works...
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First of all, we hide all rows, but `taster0`. Then we register `js` actions
    to events. When a field value changes, for example, `taster2`, we make the next
    one, `taster3`, appear `(i+1)`. Notice that if `taster3` is a field name, then
    `#no_table_taster3` is the ID of the `input/select` tag, and `#no_table_taster3__row`
    is the ID of the row in the table. This is a web2py convention. `no_table` comes
    from the fact that the form is generated by a `SQLFORM.factory`, and is not uniquely
    associated to a database table.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们隐藏所有行，除了`taster0`。然后我们注册`js`操作到事件。例如，当字段值改变时，比如`taster2`，我们使下一个字段`taster3`出现`(i+1)`。注意，如果`taster3`是一个字段名，那么`#no_table_taster3`是`input/select`标签的ID，而`#no_table_taster3__row`是表格中行的ID。这是一个web2py约定。"no_table"来自事实，即表单是由`SQLFORM.factory`生成的，并且不唯一地与数据库表相关联。
- en: Creating a multi-table update form
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建多表更新表单
- en: What we now want is to update a record of the `db.bottle` table and its associated
    `db.tasters` in one single form. This can be done using a mechanism similar to
    the one explained in the previous recipe. We need to do a little more work.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在想要在一个单独的表单中更新`db.bottle`表及其关联的`db.tasters`记录。这可以通过与之前食谱中解释的类似机制来完成。我们需要做更多的工作。
- en: How to do it...
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we will retain the same model structure as in the previous example,
    but we change the controller action:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将保留与前面例子相同的模型结构，但我们更改控制器操作：
- en: '[PRE73]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: How it works...
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Very much like the previous form, but the bottle fields are passed explicitly
    to the `SQLFORM.factory`, so that they can be pre-populated. The `tasters%i` fields
    are also pre-populated with existing tasters. When the form is submitted, the
    corresponding bottle record is updated, the past tasters are deleted, and new
    relations between the bottle and new tasters are inserted.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的形式非常相似，但瓶体字段被显式传递给`SQLFORM.factory`，以便它们可以预先填充。`tasters%i`字段也预先填充了现有的品酒师。当表单提交时，相应的瓶体记录将被更新，过去的品酒师将被删除，并且插入新的瓶体和新的品酒师之间的关系。
- en: There's more...
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There is always more. The problem is that the JS code that hides empty rows,
    is now more complex. This is because, when editing the custom form, we do not
    want to hide rows that have a selected value. Here is a possible solution:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 总是还有更多。问题是现在隐藏空行的JS代码变得更加复杂。这是因为，在编辑自定义表单时，我们不希望隐藏有选中值的行。以下是一个可能的解决方案：
- en: '[PRE74]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Can you figure out what it does?
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 你能弄清楚它是做什么的吗？
- en: Star rating widget
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 星级评分小部件
- en: In this recipe, we show you how to use the `jquery` star rating plugin, and
    integrate it with web2py.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们向您展示如何使用`jquery`星级评分插件，并将其与web2py集成。
- en: Getting ready
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You need to download the jQuery star rating widget from the following link:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要从以下链接下载jQuery星级评分小部件：
- en: '[http://orkans-tmp.22web.net/star_rating/index.html](http://orkans-tmp.22web.net/star_rating/index.html)'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://orkans-tmp.22web.net/star_rating/index.html](http://orkans-tmp.22web.net/star_rating/index.html)'
- en: Extract the files under a new `static/stars` folder, so that `stars/ui.stars.js,
    stars/ui.stars.css`, and the necessary images provided by the plugin are in it.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件提取到新的`static/stars`文件夹下，以便`stars/ui.stars.js`、`stars/ui.stars.css`以及插件提供的必要图像都包含在内。
- en: How to do it...
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Create a model file called `models/plugin_rating.py`, and in the file write
    the following:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`models/plugin_rating.py`的模型文件，并在文件中编写以下内容：
- en: '[PRE75]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Then, create a model. For example:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个模型。例如：
- en: '[PRE76]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Set the widget to the `rating_widget`, as follows:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将小部件设置为`rating_widget`，如下所示：
- en: '[PRE77]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The plugin model must be executed before the above two lines or the `rating_widget`
    function will be undefined.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上述两行或`rating_widget`函数未定义之前，必须执行插件模型。
- en: It is important here that the field represented by the star rating be an integer
    with `IS_IN_SET(range(0,6))`.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里重要的是，由星级评分表示的字段是一个具有`IS_IN_SET(range(0,6))`的整数。
- en: Notice how the `rating_plugin` uses a `UUID` to define the `id` attribute of
    the `DIV` that renders the widget. In this way, you can have more than one field
    using the `rating` plugin
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`rating_plugin`如何使用`UUID`来定义渲染小部件的`DIV`的`id`属性。这样，您可以使用`rating`插件拥有多个字段
