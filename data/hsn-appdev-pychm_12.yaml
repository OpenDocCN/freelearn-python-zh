- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Turning On Scientific Mode
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开启科学模式
- en: Welcome to the third section of the book. One of my favorite video game franchises
    is Sid Meier’s *Civilization*. It takes many days to complete a single game, which
    starts you off as the head of a civilization at the dawn of history. You progress
    through prehistoric eras, through medieval, renaissance, and industrial areas.
    With each new age comes unique challenges as players vie for various facets of
    global domination. The game truly speeds up once the players reach the information
    age. I can just hear my editor saying, *“Put down the video game, and type faster!”*
    OK, I will. Talking about the book, I feel like we’ve reached a similar milestone
    with this chapter. We’ve come a long way since our *hello world* message in `main.py`
    back in the first few chapters of this book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到本书的第三部分。我最喜欢的视频游戏系列之一是 Sid Meier 的 *文明*。完成一场游戏需要很多天，游戏开始时你作为历史黎明时期一个文明的首领。你将穿越史前时代，经过中世纪、文艺复兴和工业时代。随着每个新时代的到来，玩家们为了争夺全球统治的各个方面而竞争。一旦玩家们达到信息时代，游戏速度实际上会加快。我都能听到我的编辑在说，“放下你的视频游戏，打字快点！”好吧，我会的。谈到这本书，我觉得我们通过本章已经达到了一个类似的里程碑。自从这本书的前几章中在
    `main.py` 中的“hello world”消息以来，我们已经走了很长的路。
- en: 'PyCharm is aimed at Python developers, but PyCharm Professional really targets
    two groups: web developers and data scientists. The latter group seems like it
    is a little harder to nail down given JetBrains has multiple products for data
    science. Besides PyCharm Professional, JetBrains also makes a separate IDE called
    **DataSpell** which is billed as *The IDE for Professional Data Scientists*. What
    gives?'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm 面向 Python 开发者，但 PyCharm Professional 实际上针对的是两组人群：Web 开发者和数据科学家。后者似乎更难以界定，因为
    JetBrains 为数据科学提供了多个产品。除了 PyCharm Professional，JetBrains 还制作了一个名为 **DataSpell**
    的独立 IDE，它被誉为 *专业数据科学家的 IDE*。这是怎么回事？
- en: I wondered the same thing. According to the company’s FAQ for DataSpell, PyCharm
    is supposed to support software developers who engage in data-sciency activities
    as part of their job as software developers. DataSpell is for professionals who
    are not developers, but who simply do analytics. There is some cross-over in terms
    of features, but unlike what we’ve seen with WebStorm and DataGrip which are fully
    embedded in PyCharm, DataSpell has features PyCharm doesn’t, and there are no
    plans to change that. They are targeting two different sets of professionals.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我也有同样的疑问。根据公司针对 DataSpell 的常见问题解答，PyCharm 应该支持那些将数据科学活动作为软件开发工作一部分的软件开发者。DataSpell
    是面向那些不是开发者，但仅仅进行数据分析的专业人士。在功能方面有一些重叠，但与完全嵌入 PyCharm 的 WebStorm 和 DataGrip 不同，DataSpell
    拥有一些 PyCharm 没有的功能，而且没有计划改变这一点。他们针对的是两组不同的专业人士。
- en: 'Support for scientific and analytical workflows entails turning on scientific
    mode in PyCharm. This opens up new UI layouts and tool panels you wouldn’t normally
    with scientific mode turned off. In this chapter, we’ll be covering the following
    topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 支持科学和数据分析工作流程意味着在 PyCharm 中开启科学模式。这会打开你通常在科学模式关闭时不会看到的新的 UI 布局和工具面板。在本章中，我们将涵盖以下主题：
- en: Starting a scientific project in PyCharm
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PyCharm 中启动科学项目
- en: Advanced features of PyCharm’s scientific projects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyCharm 科学项目的高级功能
- en: By the end of this chapter, you will understand how these features can improve
    productivity in scientific computing projects. This chapter will serve as a general,
    high-level discussion on the various tools PyCharm offers and will help you understand
    scientific computing and how these tools are integrated and work with each other.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解这些功能如何提高科学计算项目中的生产力。本章将作为一个通用的、高级的讨论，涉及 PyCharm 提供的各种工具，并帮助你理解科学计算以及这些工具是如何集成和相互协作的。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In order to proceed through this chapter, and indeed the rest of the book,
    you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续本章，以及本书的其余部分，你需要以下内容：
- en: Since we’re switching to the topic of data science, I’ll be switching my preferred
    Python distribution to Anaconda, which is a Python distribution tailored to data
    science workloads. You can find it, along with installation instructions for your
    operating system at [https://anaconda.com](https://anaconda.com).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们将转向数据科学的话题，我将把我的首选 Python 发行版切换到 Anaconda，这是一个针对数据科学工作负载定制的 Python 发行版。你可以在
    [https://anaconda.com](https://anaconda.com) 找到它，以及针对你操作系统的安装说明。
- en: Likewise, instead of the usual `pip`, I’ll be leveraging `conda`, which is Anaconda’s
    package manager. It is installed alongside Anaconda.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样，我将使用 `conda` 而不是通常的 `pip`，因为 `conda` 是 Anaconda 的包管理器。它与 Anaconda 一起安装。
- en: An installed and working copy of PyCharm. Installation was covered in [*Chapter
    2*](B19644_02.xhtml#_idTextAnchor028)*, Installation and Configuration*, in case
    you are jumping into the middle of the book.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并运行良好的 PyCharm 版本。安装过程在 [*第 2 章*](B19644_02.xhtml#_idTextAnchor028)*，安装和配置*
    中有介绍，如果你是在书中间开始阅读的话。
- en: This book’s sample source code from GitHub. We covered cloning the code in [*Chapter
    2*](B19644_02.xhtml#_idTextAnchor028)*, Installation and Configuration*. You’ll
    find this chapter’s relevant code at [https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-12.](https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-12
    )
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本书从 GitHub 上的示例源代码。我们在 [*第 2 章*](B19644_02.xhtml#_idTextAnchor028)*，安装和配置* 中介绍了代码克隆。你可以在
    [https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-12](https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-12)
    找到本章的相关代码。
- en: Creating a scientific project in PyCharm
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 PyCharm 中创建科学项目
- en: 'By now, you’re intimately familiar with the New Project dialog in PyCharm.
    Let’s create a science project! Click **File** | **New Project**, and you’ll find
    a template called **Scientific**, as shown in *Figure 12**.1*:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你对 PyCharm 中的新建项目对话框已经很熟悉了。让我们创建一个科学项目！点击 **文件** | **新建项目**，你将找到一个名为 **科学**
    的模板，如图 *图 12.1* 所示：
- en: '![Figure 12.1: Stand back! We’re about to do SCIENCE!](img/B19644_12_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.1：退后！我们即将开始做科学实验！](img/B19644_12_01.jpg)'
- en: 'Figure 12.1: Stand back! We’re about to do SCIENCE!'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1：退后！我们即将开始做科学实验！
- en: 'I mentioned earlier, I will be using Anaconda for this section of the book
    because this is what most data science pros use. The only interesting setting
    beyond the change in interpreter is the **Data folder** setting under **More Settings**.
    It is setting a folder in our soon-to-be-created project that will hold, you guessed
    it: data. More on this after we create the project. Go ahead and click **Create**.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前提到，我将使用 Anaconda 来编写这本书的这一部分，因为这是大多数数据科学专业人士所使用的。除了更改解释器之外，唯一有趣的设置是在 **更多设置**
    下的 **数据文件夹** 设置。它是在我们即将创建的项目中设置一个文件夹，该文件夹将包含，你猜对了：数据。在创建项目之后我们会详细讨论这一点。请点击 **创建**。
- en: 'Once the creation process is complete, you’ll find a setup like mine in *Figure
    12**.2*:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建过程完成，你会在 *图 12.2* 中找到类似我这样的设置：
- en: '![Figure 12.2: Behold! We have created a science project in PyCharm!](img/B19644_12_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.2：看哪！我们在 PyCharm 中创建了一个科学项目！](img/B19644_12_02.jpg)'
- en: 'Figure 12.2: Behold! We have created a science project in PyCharm!'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2：看哪！我们在 PyCharm 中创建了一个科学项目！
- en: Let’s talk about what just happened. We generated a project, per usual. We got
    a folder called data, which must be special because it is a different color than
    the rest. We got more empty folders for notebooks and models. We got a `main.py`
    file, a `requirements.txt` file, and a Markdown file called `README.md`, all of
    which are empty. We usually get some boilerplate code but not this time.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈刚刚发生的事情。我们像往常一样创建了一个项目。我们得到了一个名为 data 的文件夹，它之所以特别，是因为它的颜色与其它文件夹不同。我们还得到了更多用于笔记本和模型的空文件夹。我们得到了一个
    `main.py` 文件，一个 `requirements.txt` 文件，以及一个名为 `README.md` 的 Markdown 文件，它们都是空的。我们通常会有一些样板代码，但这次没有。
- en: Each file and folder serves a purpose. As I mentioned, the data folder must
    be special because it is a different color. Mine is highlighted in yellow. This
    folder is important because it is meant to contain data files for your scientific
    analysis. Since it isn’t code, and since your data files might be very large,
    PyCharm marks this folder as special to the project. You might have noticed the
    template folder in Flask and Django apps were also colored differently than the
    rest. There are special folders in many project types.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每个文件和文件夹都有其用途。正如我提到的，数据文件夹之所以特别，是因为它的颜色不同。我的文件夹被高亮显示为黄色。这个文件夹很重要，因为它旨在包含用于你科学分析的数据文件。由于它不是代码，而且你的数据文件可能非常大，PyCharm
    将这个文件夹标记为项目的特殊文件夹。你可能已经注意到 Flask 和 Django 应用中的模板文件夹也与其他文件夹颜色不同。许多项目类型都有特殊文件夹。
- en: 'We can gain some clues about this in the project’s properties. I have the project
    properties window up in *Figure 12**.3*:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在项目的属性中找到一些线索。我在 *图 12.3* 中打开了项目属性窗口：
- en: '![Figure 12.3: You can set several types of special folders in many of the
    project types in PyCharm including scientific projects](img/B19644_12_03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3：在PyCharm的许多项目类型中，包括科学项目，您可以设置几种特殊文件夹](img/B19644_12_03.jpg)'
- en: 'Figure 12.3: You can set several types of special folders in many of the project
    types in PyCharm including scientific projects'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3：在PyCharm的许多项目类型中，包括科学项目，您可以设置几种特殊文件夹
- en: In this case, the data folder is excluded from the rest of the project. PyCharm
    will not index or scan this folder in any way. We need this for the data folder
    because it is fairly normal for your data files to be very large. There is no
    code in this folder, so really, there is no reason to scan it for the purposes
    of providing the usual help and insights you’ve come to expect from code files.
    You might even consider having your revision control system disregard this folder
    as well, since it might not be appropriate to check your data into a repository
    for a number of reasons ranging from privacy issues, depending on the nature of
    the data, as well as file size. Git has limitations on the size of files it can
    handle, and GitHub will limit the size of your repository. The data folder is
    an obvious bloat that probably doesn’t need to be in the repo.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，数据文件夹被排除在项目之外。PyCharm将不会以任何方式索引或扫描此文件夹。我们需要这个数据文件夹，因为您的数据文件非常大是很正常的。这个文件夹中没有代码，所以实际上，没有必要扫描它以提供您从代码文件中期望的通常的帮助和见解。您甚至可以考虑让您的版本控制系统忽略这个文件夹，因为出于许多原因，包括数据性质导致的隐私问题，以及文件大小，将数据检查到存储库中可能并不合适。Git对它可以处理的文件大小有限制，GitHub也会限制您存储库的大小。数据文件夹是一个明显的冗余，可能不需要在存储库中。
- en: With that mystery solved, let’s look at the `requirements.txt` file. We have
    seen this before. This file is used by the Python project, regardless of which
    IDE you use, to track the library requirements for the project. Anytime you use
    a third-party library from PyPi, you need to include it in `requirements.txt`.
    This file should be checked into your repository so other developers can replicate
    your virtual environment. The file is empty, and we saw the tooling around `requirements.txt`
    in [*Chapter 3*](B19644_03.xhtml#_idTextAnchor052).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 解开这个谜团后，让我们看看`requirements.txt`文件。我们之前见过这个文件。无论您使用哪个IDE，Python项目都会使用这个文件来跟踪项目的库需求。每次您从PyPi使用第三方库时，都需要将其包含在`requirements.txt`中。这个文件应该被检查到您的存储库中，以便其他开发者可以复制您的虚拟环境。这个文件是空的，我们在[*第3章*](B19644_03.xhtml#_idTextAnchor052)中看到了围绕`requirements.txt`的工具。
- en: 'There is something here we have not seen before: the `README.md` file. The
    `.md` extension indicates this is a Markdown file. Markdown is an alternative
    to HTML, which is a markup language. See what they did there? Markdown allows
    you to create a formatted text file without all the overhead of HTML. While you
    get rid of the overhead, you also lose a lot of capability. Markdown is just used
    to create documentation files. If you’ve ever browsed a repository on GitHub,
    and the project has a snazzy landing page, you’re really looking at the `README.md`
    file rendered to HTML by GitHub and your browser. There’s an example of a nice
    `README.md` page for one of my repos in *Figure 12**.4*:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些我们之前没有见过的东西：`README.md` 文件。`.md` 扩展名表示这是一个Markdown文件。Markdown是HTML的替代品，而HTML是一种标记语言。他们在这里做了什么？Markdown允许您创建一个格式化的文本文件，而不需要HTML的所有开销。虽然您去掉了开销，但也失去了很多功能。Markdown仅用于创建文档文件。如果您曾经浏览过GitHub上的存储库，并且项目有一个漂亮的着陆页，那么您实际上看到的是GitHub和您的浏览器将`README.md`文件渲染为HTML的结果。*图12.4*展示了我的一个存储库中一个很好的`README.md`页面的例子：
- en: '![Figure 12.4: The README.md file gets rendered as the landing page on GitHub
    and is used to document the contents of the repository](img/B19644_12_04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4：README.md文件在GitHub上被渲染为着陆页，并用于记录存储库的内容](img/B19644_12_04.jpg)'
- en: 'Figure 12.4: The README.md file gets rendered as the landing page on GitHub
    and is used to document the contents of the repository'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4：README.md文件在GitHub上被渲染为着陆页，并用于记录存储库的内容
- en: For this project, PyCharm has generated an empty `README.md` file. The `main.py`
    file is just a plain old Python file. Really, this is a very minimal project template.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，PyCharm已经生成了一个空的`README.md`文件。`main.py` 文件只是一个普通的Python文件。实际上，这是一个非常简单的项目模板。
- en: Additional configuration for science projects in PyCharm
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyCharm中科学项目的附加配置
- en: PyCharm’s out-of-the-box configuration is normally very complete. For scientific
    projects, though, there are some plugins you might want to add. We have a whole
    chapter on some amazing plugins later in the book, but you need them right now,
    so let’s take a look.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm的默认配置通常非常完整。然而，对于科学项目来说，您可能还想添加一些插件。本书后面将有一整章介绍一些惊人的插件，但您现在就需要它们，所以让我们来看看。
- en: 'Plugins are installed using the PyCharm Marketplace. You can get to the Marketplace
    using the gear icon you normally use to get to settings. You’ll recognize it in
    *Figure 12**.5*:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是通过PyCharm市场安装的。您可以通过通常用于访问设置的齿轮图标进入市场。您可以在图12.5中认出它：
- en: '![Figure 12.5: The plugins menu option will take you to the plugins window
    which includes the PyCharm Marketplace](img/B19644_12_05.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图12.5：插件菜单选项将带您进入包含PyCharm市场的插件窗口](img/B19644_12_05.jpg)'
- en: 'Figure 12.5: The plugins menu option will take you to the plugins window which
    includes the PyCharm Marketplace'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5：插件菜单选项将带您进入包含PyCharm市场的插件窗口
- en: 'Open the **Plugins** window. You can see mine in *Figure 12**.6*:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**插件**窗口。您可以在图12.6中看到我的：
- en: '![Figure 12.6: The Marketplace allows you to find all kinds of plugins for
    PyCharm and other JetBrains IDEs](img/B19644_12_06.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图12.6：市场允许您找到PyCharm和其他JetBrains IDE的所有类型的插件](img/B19644_12_06.jpg)'
- en: 'Figure 12.6: The Marketplace allows you to find all kinds of plugins for PyCharm
    and other JetBrains IDEs'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6：市场允许您找到PyCharm和其他JetBrains IDE的所有类型的插件
- en: Note it takes you straight to the **Marketplace** tab. This reminds me of the
    inevitable gift shop at the end of every museum tour I’ve ever taken. There’s
    a tab to the right that lets you see what is already installed. That’s boring
    though, right? It is more enticing to browse what we don’t yet have. Many of the
    plugins here are free, and some are not. Likewise, many of the plugins here are
    well documented and supported by developers who carefully craft their Marketplace
    offering. Some are just short descriptions with a title. Let’s go shopping!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意它会直接带您进入**市场**标签页。这让我想起了我参加过的每一次博物馆之旅结束时的不可避免的小商店。右侧有一个标签页，让您可以看到已经安装的内容。但这不是很无聊吗？浏览我们还没有的东西更有吸引力。这里的大多数插件都是免费的，有些则不是。同样，这里的大多数插件都有良好的文档，并由精心制作市场提供的开发者支持。有些只是简短的描述和标题。让我们去购物吧！
- en: Markdown plugins
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Markdown插件
- en: Your first stop is to find a good Markdown plugin. Markdown isn’t exactly rocket
    science, even though we find it in a science project. However, a good Markdown
    plugin will render your Markdown so you can see what it will look like when the
    Markdown code is converted to formatted text.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您的第一步是找到一个好的Markdown插件。尽管我们在科学项目中发现了Markdown，但它并不完全是火箭科学。然而，一个好的Markdown插件会渲染您的Markdown，这样您就可以看到Markdown代码转换为格式化文本后的样子。
- en: 'To find a Markdown plugin you need to search using the **Search** box indicated
    in *Figure 12**.7*:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到Markdown插件，您需要使用图12.7中指示的**搜索**框进行搜索：
- en: '![Figure 12.7: Search here for plugins and avoid the temptation of the search
    box that helps you find settings](img/B19644_12_07.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图12.7：在此处搜索插件，避免被帮助您找到设置的搜索框所诱惑](img/B19644_12_07.jpg)'
- en: 'Figure 12.7: Search here for plugins and avoid the temptation of the search
    box that helps you find settings'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7：在此处搜索插件，避免被帮助您找到设置的搜索框所诱惑
- en: As it happens, JetBrains now bundles a Markdown plugin in the default installation.
    They haven’t always done that. You can see there are alternatives to explore.
    I’m just going to use the bundled one. If you have an older version of PyCharm,
    you might need to install this. In this case, there will be an **Install** button
    as you can see with the others.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，JetBrains现在在默认安装中捆绑了一个Markdown插件。他们并不总是这样做。您可以看到有其他选择可以探索。我只会使用捆绑的插件。如果您有较旧的PyCharm版本，您可能需要安装此插件。在这种情况下，将会有一个**安装**按钮，就像您看到的其他插件一样。
- en: 'Let’s try it out. Exit the settings window and open the `README.md` file. Add
    the following code to your `README.md` file:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试。退出设置窗口，打开`README.md`文件。将以下代码添加到您的`README.md`文件中：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should see your Markdown code on the left, and the rendered preview on
    the right, as shown in *Figure 12**.8*:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到左侧的Markdown代码，以及右侧的渲染预览，如图12.8所示：
- en: '![Figure 12.8: Markdown code is on the left; the rendered result is on the
    right](img/B19644_12_08.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图12.8：Markdown代码位于左侧；渲染结果位于右侧](img/B19644_12_08.jpg)'
- en: 'Figure 12.8: Markdown code is on the left; the rendered result is on the right'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8：Markdown代码位于左侧；渲染结果位于右侧
- en: 'You can change the layout of the preview, or hide it altogether using the buttons
    on the top right of the Markdown editor as shown in *Figure 12**.9*:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Markdown编辑器右上角的按钮更改预览布局，或者完全隐藏它，如图*图12.9*所示：
- en: '![Figure 12.9: You can adjust the layout of the preview window](img/B19644_12_09.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图12.9：你可以调整预览窗口的布局](img/B19644_12_09.jpg)'
- en: 'Figure 12.9: You can adjust the layout of the preview window'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9：你可以调整预览窗口的布局
- en: Clicking the left button hides the preview. Pushing the right one hides the
    code. You can click the button in the middle once to toggle the preview alongside
    the code. Click it again, and you’ll get code and preview stacked on top of one
    another.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 点击左键隐藏预览。按右键隐藏代码。你可以点击中间的按钮一次来切换预览和代码。再点击一次，你将得到堆叠在一起的代码和预览。
- en: Adding images
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加图片
- en: 'A needed characteristic of a good Markdown editor is the ability to easily
    add images. In PyCharm, if you need images in your Markdown, start by making a
    folder in your project called assets. Copy your image files to this folder. Then,
    just drag the image and drop it in the editor. In *Figure 12**.10*, I’m dragging
    an image from my assets folder and then dropping it in my Markdown editor:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的Markdown编辑器所需的一个特性是能够轻松添加图片。在PyCharm中，如果你需要在Markdown中添加图片，首先在你的项目中创建一个名为assets的文件夹。将你的图片文件复制到这个文件夹中。然后，只需拖动图片并将其拖放到编辑器中。在*图12.10*中，我正在从我的assets文件夹中拖动一个图片并将其拖放到我的Markdown编辑器中：
- en: '![Figure 12.10: Drag images from outside PyCharm and drop them into the code
    to include them in your Markdown](img/B19644_12_10.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图12.10：从PyCharm外部拖动图片并将其拖放到代码中以将其包含在Markdown中](img/B19644_12_10.jpg)'
- en: 'Figure 12.10: Drag images from outside PyCharm and drop them into the code
    to include them in your Markdown'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10：从PyCharm外部拖动图片并将其拖放到代码中以将其包含在Markdown中
- en: 'The result can be seen in *Figure 12**.11*:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 结果可以在*图12.11*中看到：
- en: '![Figure 12.11: The dragged image appears in your code and in the preview](img/B19644_12_11.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图12.11：拖动的图片出现在你的代码和预览中](img/B19644_12_11.jpg)'
- en: 'Figure 12.11: The dragged image appears in your code and in the preview'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.11：拖动的图片出现在你的代码和预览中
- en: All in all, the default plugin is pretty good. Some of the others have more
    advanced features, but really the only one I’d want is one that converts the Markdown
    to other formats. If you need that, a few of the plugins in the marketplace can
    do that.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，默认插件相当不错。其他一些插件有更高级的功能，但真正我想要的只是一个可以将Markdown转换为其他格式的插件。如果你需要这个功能，市场上的一些插件可以做到这一点。
- en: Installing the CSV plugin
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装CSV插件
- en: 'A common format for data storage is the **comma-separated values** (**CSV**)
    format. This is a format that is supported by every spreadsheet program ever devised.
    The marketplace has a CSV function that allows you to open CSVs and similar files
    such as **tab-separated values** (**TSV**) in a spreadsheet-like interface. You
    can see the Marketplace page for it in *Figure 12**.12*:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 数据存储的常见格式是**逗号分隔值**（**CSV**）格式。这是一个被所有电子表格程序支持的格式。市场上有一个CSV功能，允许你在类似电子表格的界面中打开CSV和类似文件，如**制表符分隔值**（**TSV**）。你可以在*图12.12*中看到它的市场页面：
- en: '![Figure 12.12: You’ll probably be using CSV files at some point. Luckily,
    there’s a plugin for that](img/B19644_12_12.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图12.12：你可能会在某些时候使用CSV文件。幸运的是，有一个插件可以处理这个](img/B19644_12_12.jpg)'
- en: 'Figure 12.12: You’ll probably be using CSV files at some point. Luckily, there’s
    a plugin for that'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.12：你可能会在某些时候使用CSV文件。幸运的是，有一个插件可以处理这个
- en: 'After you click the install button for the CSV Editor plugin, you’ll be prompted
    to restart the IDE. This is very common. After you restart, you can try it out
    with any of your own CSV files, or you can use my sample of FDA study data in
    the sample code’s data folder. The CSV plugin renders my data in full color as
    seen in *Figure 12**.13*:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在你点击CSV编辑器插件的安装按钮后，你将被提示重新启动IDE。这是非常常见的。重启后，你可以用你自己的CSV文件尝试它，或者你可以使用示例代码数据文件夹中的FDA研究数据样本。CSV插件以全彩色的形式渲染我的数据，如图*图12.13*所示：
- en: '![Figure 12.13: The CSV Editor plugin renders data in columns in different
    colors. It’s like having a pretty spreadsheet embedded in your IDE](img/B19644_12_13.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图12.13：CSV编辑器插件以不同颜色渲染列中的数据。这就像在你的IDE中嵌入了一个漂亮的电子表格](img/B19644_12_13.jpg)'
- en: 'Figure 12.13: The CSV Editor plugin renders data in columns in different colors.
    It’s like having a pretty spreadsheet embedded in your IDE'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.13：CSV编辑器插件以不同颜色渲染列中的数据。这就像在你的IDE中嵌入了一个漂亮的电子表格
- en: Naturally, you can edit the data, but this isn’t a spreadsheet. Don’t expect
    to be able to add formulas and expressions to your cells. At the bottom you’ll
    see you can switch between the **Table Editor** view the **Text view**.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，你可以编辑数据，但这不是一个电子表格。不要期望你能在单元格中添加公式和表达式。在底部，你会看到你可以切换到**表格编辑器**视图或**文本视图**。
- en: There’s one more you’re going to want for sure and that’s the cell mode plugin.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你肯定还想安装的一个是单元格模式插件。
- en: Installing the cell mode plugin
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装单元格模式插件
- en: 'I’m not going into great depth on what the cell mode plugin does just yet.
    Just trust me when I say it is extremely handy when you are working with PyCharm
    code cells, which we’ll be covering shortly. Since we’re already in the Marketplace,
    let’s grab it now. *Figure 12**.14* shows the Marketplace page for the cell mode
    plugin:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在不会深入探讨单元格模式插件的功能。当你说它在处理 PyCharm 代码单元格时非常方便时，请相信我。我们将在稍后讨论这个问题。既然我们已经进入了
    Marketplace，让我们现在就把它抓取出来。图 *12.14* 显示了单元格模式插件的 Marketplace 页面：
- en: '![Figure 12.14: The cell mode plugin will make working with code cells easy
    a little later in this chapter](img/B19644_12_14.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.14：单元格模式插件将在本章稍后使与代码单元格一起工作变得容易](img/B19644_12_14.jpg)'
- en: 'Figure 12.14: The cell mode plugin will make working with code cells easy a
    little later in this chapter'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.14：单元格模式插件将在本章稍后使与代码单元格一起工作变得容易
- en: Install it by clicking the **Install** button. At this point, you have PyCharm
    fairly kitted out for data work.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**安装**按钮来安装它。此时，你已经将 PyCharm 准备得相当适合数据工作了。
- en: Installing packages
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装包
- en: We are getting ready to do some science, but first, we need to set some requirements
    for our project. We’ve covered this in earlier chapters, but we’ll quickly review
    it here.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备做一些科学工作，但首先，我们需要为我们的项目设置一些要求。我们已经在前面的章节中讨论过这个问题，但我们将在这里快速回顾。
- en: 'The newest way to add packages to any Python project is to use the **Python
    Packages** panel shown in *Figure 12**.15*:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 向任何 Python 项目添加包的最新方法是使用图 *12.15* 中显示的**Python 包**面板：
- en: '![Figure 12.15: Use the Python Packages panel to manage Python packages. If
    it isn’t on the right-hand toolbar, you can add it](img/B19644_12_15.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.15：使用 Python 包面板管理 Python 包。如果它不在右侧工具栏上，你可以添加它](img/B19644_12_15.jpg)'
- en: 'Figure 12.15: Use the Python Packages panel to manage Python packages. If it
    isn’t on the right-hand toolbar, you can add it'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.15：使用 Python 包面板管理 Python 包。如果它不在右侧工具栏上，你可以添加它
- en: 'If you’ve used the panel before, it will be on the right-hand toolbar. If you
    haven’t used it before, you can add it by clicking the three dots, and then picking
    the **Python Packages** option. Once you’ve located the button to open the panel,
    you’ll find the **Search** box shown in *Figure 12**.16*:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前使用过该面板，它将在右侧工具栏上。如果你之前没有使用过，你可以通过点击三个点，然后选择**Python 包**选项来添加它。一旦你找到了打开面板的按钮，你将找到图
    *12.16* 中显示的**搜索**框：
- en: '![Figure 12.16: You can search packages from PyPI easily from this panel and
    add them using conda](img/B19644_12_16.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.16：你可以从这个面板中轻松搜索 PyPI 的包，并使用 conda 添加它们](img/B19644_12_16.jpg)'
- en: 'Figure 12.16: You can search packages from PyPI easily from this panel and
    add them using conda'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.16：你可以从这个面板中轻松搜索 PyPI 的包，并使用 conda 添加它们
- en: We’re going to add `numpy` and `matplotlib` to our project. Type each into the
    **Search** box indicated in *Figure 12**.17*, then install the package using the
    **Install with conda** button. If you’ve opted to stick with vanilla Python, the
    button will say **Install** **with pip**.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向我们的项目中添加 `numpy` 和 `matplotlib`。将每个输入到图 *12.17* 中指示的**搜索**框中，然后使用**使用 conda
    安装**按钮安装包。如果你选择坚持使用纯 Python，按钮将显示**使用 pip 安装**。
- en: Backfill your requirements.txt file
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回填 requirements.txt 文件
- en: Now that you have the two packages installed, open the `requirements.txt` file.
    PyCharm will let you know that the requirements installed in the conda environment
    don’t match the empty file. *Figure 12**.17* shows you the option to add the packages
    we just installed to the `requirements.txt` file automatically.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了这两个包，打开 `requirements.txt` 文件。PyCharm 会告诉你，在 conda 环境中安装的要求与空文件不匹配。图
    *12.17* 显示了将我们刚刚安装的包自动添加到 `requirements.txt` 文件的选项。
- en: '![Figure 12.17: PyCharm helps you keep your requirements.txt file up to date](img/B19644_12_17.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.17：PyCharm 帮助你保持 requirements.txt 文件更新](img/B19644_12_17.jpg)'
- en: 'Figure 12.17: PyCharm helps you keep your requirements.txt file up to date'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.17：PyCharm 帮助你保持 requirements.txt 文件更新
- en: Click the link button to update your requirements file.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 点击链接按钮来更新你的 requirements 文件。
- en: Adding some sciency code
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一些科学代码
- en: My editor keeps saying “sciency” isn’t a word. A wise man once said, “Science
    isn’t about why. It’s about why not!?” I’m going to keep using it and if you’re
    actually reading this, it means I got away with it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我的编辑器一直说“sciency”不是一个词。一位智者曾经说过：“科学不是关于为什么，而是关于为什么不！？”我会继续使用它，如果你真的在读这篇文章，这意味着我侥幸逃脱了。
- en: 'We’ve set up the IDE, and installed our required packages. Let’s open up `main.py`
    and add some code so we can see PyCharm strut its stuff! In `main.py`, add this
    code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置了IDE，并安装了所需的包。让我们打开`main.py`并添加一些代码，这样我们就可以看到PyCharm展示其功能！在`main.py`中添加以下代码：
- en: '[PRE1]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'These first two imports just bring in `numpy` and `matplotlib` with aliases.
    It turns out scientists hate typing more than normal developers:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个初始导入只是引入了`numpy`和`matplotlib`，并使用了别名。结果发现，科学家比普通开发者更讨厌打字：
- en: '[PRE2]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Using NumPy, we are simply creating two sample 100-element datasets from normal
    distributions. The values of `x` are created from a distribution with a mean of
    0 and a standard deviation of 1, while `y` is from a distribution with a mean
    of 2 and a standard deviation of 3\. Then, we draw their corresponding histograms
    using Matplotlib. Run the program per usual and note the results in *Figure 12**.18*:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用NumPy，我们只是从正态分布中创建了两个100个元素的样本数据集。`x`的值来自均值为0、标准差为1的分布，而`y`来自均值为2、标准差为3的分布。然后，我们使用Matplotlib绘制它们相应的直方图。按照惯例运行程序，并在*图12*.18中注意结果：
- en: '![Figure 12.18: Click the run button (1) and the matplotlib graphical plot
    is displayed in SciView](img/B19644_12_18.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图12.18：点击运行按钮（1）和matplotlib图形图表在SciView中显示](img/B19644_12_18.jpg)'
- en: 'Figure 12.18: Click the run button (1) and the matplotlib graphical plot is
    displayed in SciView'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.18：点击运行按钮（1），matplotlib图形图表在SciView中显示
- en: Our Python script ran, but doing so triggered SciView to turn on. SciView is
    the centerpiece of PyCharm’s data analytics feature set. It allows you to view
    plots alongside the complex API documentation common to libraries such as NumPy,
    pandas, and PyTorch.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Python脚本运行了，但这样做触发了SciView的开启。SciView是PyCharm数据分析功能集的核心。它允许你在NumPy、pandas和PyTorch等库的复杂API文档旁边查看图表。
- en: I highlighted the run button at **(1)** in *Figure 12**.18* in case you’re joining
    us late, and you skipped the earlier chapters on running your code in the IDE.
    The icon at **(2)** indicates SciView is turned on. You can toggle it on or off
    just like any other panel. When SciView is turned on, you get a panel for visualizations
    **(3)** and a panel for documentation **(4)**. We’ll be working with these tools
    more over the next few chapters.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我在*图12*.18中突出了运行按钮**（1**），以防你来得晚，错过了之前关于在IDE中运行代码的章节。**（2**）处的图标表示SciView已开启。你可以像切换任何其他面板一样切换它开或关。当SciView开启时，你会得到一个用于可视化的面板**（3**）和一个用于文档的面板**（4**）。我们将在接下来的几章中更多地使用这些工具。
- en: Toggling scientific mode
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切换科学模式
- en: I have mentioned the term *scientific mode* a couple of times before; now, we
    will see the significance of this mode in PyCharm projects.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前提到过几次*科学模式*；现在，我们将看到这个模式在PyCharm项目中的重要性。
- en: '**Scientific mode** consists of multiple components that we will be exploring
    in this and the upcoming chapters, the most notable being the **SciView** and
    **Documentation** panels. It is important to note that this special mode in PyCharm
    is not equivalent to having a scientific project. Moreover, it is more of a configuration
    setting where various PyCharm features that support scientific computing are easier
    to access and use.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**科学模式**由多个组件组成，我们将在本章和即将到来的章节中探讨，最显著的是**SciView**和**文档**面板。重要的是要注意，PyCharm中的这种特殊模式并不等同于拥有科学项目。此外，它更像是一种配置设置，其中各种支持科学计算的PyCharm功能更容易访问和使用。'
- en: 'There are a great many programs that have different UI configurations depending
    on how you intend to use the software. Adobe Photoshop has different view sets
    for photographers versus web designers. Many browsers have chromeless options
    or modes optimized for distraction-free reading. PyCharm itself has a *Zen mode,*
    which removes all of the UI except for the editor. You can see it in *Figure 12**.19*:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多程序根据你打算如何使用软件而具有不同的用户界面配置。Adobe Photoshop为摄影师和网页设计师提供了不同的视图集。许多浏览器都有无铬选项或模式，优化了无干扰阅读。PyCharm本身有一个*禅模式*，它移除了除了编辑器之外的所有用户界面。你可以在*图12*中看到它。19*：
- en: '![Figure 12.19: In Zen mode’s embrace. PyCharm’s code dances with peace. Clarity
    in lines](img/B19644_12_19.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图12.19：在禅模式的怀抱中。PyCharm的代码与和平共舞。线条清晰](img/B19644_12_19.jpg)'
- en: 'Figure 12.19: In Zen mode’s embrace. PyCharm’s code dances with peace. Clarity
    in lines'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.19：在禅模式拥抱下。PyCharm的代码在和平中起舞。线条清晰
- en: 'If you’re interested in Zen mode, you’ll find it by clicking **View** | **Appearance**
    | **Enter Zen** mode from the main menu. That’s nice and all, but we’re here for
    scientific mode and the point I was making is that this mode is more of a configuration
    of the appearance of PyCharm rather than being dedicated tool panels unique to
    the scientific project. You can enable scientific mode in any project type. To
    turn it in, click **View** | **Scientific Mode**, as shown in *Figure 12**.20*:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对禅模式感兴趣，您可以通过点击主菜单中的**查看** | **外观** | **进入禅模式**来找到它。这很好，但我们在这里是为了科学模式，我想要说明的是，这种模式更多的是PyCharm外观的配置，而不是针对科学项目的独特工具面板。您可以在任何项目类型中启用科学模式。要打开它，请点击**查看**
    | **科学模式**，如图*图12.20*所示：
- en: "![Figure 12.20: You can toggle Scientific Mode on the view menu. When \uFEFF\
    scientific mode is on, you can toggle the two panels using the buttons on the\
    \ toolbar to the right edge of the screen](img/B19644_12_20.jpg)"
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图12.20：您可以在视图菜单中切换科学模式。当科学模式开启时，您可以使用屏幕右侧工具栏上的按钮切换两个面板](img/B19644_12_20.jpg)'
- en: 'Figure 12.20: You can toggle Scientific Mode on the view menu. When scientific
    mode is on, you can toggle the two panels using the buttons on the toolbar to
    the right edge of the screen'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.20：您可以在视图菜单中切换科学模式。当科学模式开启时，您可以使用屏幕右侧工具栏上的按钮切换两个面板
- en: 'PyCharm is also a little bit nosy. If it sees you are using NumPy, it prompts
    you to turn scientific mode on with a little toast in the bottom-right corner
    of the IDE. See *Figure 12**.21*:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm也有点爱管闲事。如果您在使用NumPy，它会在IDE的右下角弹出一个提示，建议您开启科学模式。见图*图12.21*：
- en: '![Figure 12.21: Your Pythonic big brother is watching you, but at least it’s
    trying to be helpful](img/B19644_12_21.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图12.21：您的Python大兄弟在看着您，但至少它在尽力帮忙](img/B19644_12_21.jpg)'
- en: 'Figure 12.21: Your Pythonic big brother is watching you, but at least it’s
    trying to be helpful'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.21：您的Python大兄弟在看着您，但至少它在尽力帮忙
- en: Overall, scientific mode offers an intuitive interface that can improve your
    productivity in scientific computing projects. In the next section, we will examine
    other advanced features within a scientific project in more detail, namely the
    **Documentation** panel and PyCharm’s code cells.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，科学模式提供了一个直观的界面，可以提高您在科学计算项目中的生产力。在下一节中，我们将更详细地检查科学项目中的其他高级功能，特别是**文档**面板和PyCharm的代码单元格。
- en: Understanding the advanced features of PyCharm’s scientific projects
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解PyCharm科学项目的高级功能
- en: Equipped with the features we discussed in the previous section, you can navigate
    and work with PyCharm’s scientific projects efficiently and productively. However,
    there are still other subtle features that PyCharm offers that can prove to be
    useful in this context. First, we will consider the **Documentation** panel and
    its usage.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 配备了我们之前章节中讨论的功能，您可以高效且富有成效地导航和使用PyCharm的科学项目。然而，PyCharm还提供了其他一些微妙的功能，这些功能在此背景下可能非常有用。首先，我们将考虑**文档**面板及其用法。
- en: The documentation viewer
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档查看器
- en: Documentation is an essential part of programming and software development,
    and PyCharm offers the most powerful and straightforward features to support the
    task of working with documentation in Python. We saw it in action first in [*Chapter
    4*](B19644_04.xhtml#_idTextAnchor077), *Editing and Formatting with Ease* *in
    PyCharm*.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 文档是编程和软件开发的重要组成部分，PyCharm提供了最强大且最直观的功能来支持在Python中处理文档的任务。我们首次在[*第4章*](B19644_04.xhtml#_idTextAnchor077)中看到了它的实际应用，*在PyCharm中轻松编辑和格式化*。
- en: In a scientific project, the **Documentation** panel, as we have seen, is pinned
    as one of the main panels of the project window. This documentation viewer displays
    real-time documentation data in a dynamic way. Specifically, as you move your
    caret to a particular method or function call in the editor, the **Documentation**
    panel will show the official documentation corresponding to that method or function.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在科学项目中，正如我们所见，**文档**面板被固定为项目窗口的主要面板之一。这个文档查看器以动态的方式显示实时文档数据。具体来说，当您将光标移至编辑器中的特定方法或函数调用时，**文档**面板将显示与该方法或函数对应的官方文档。
- en: 'Go back into the code we wrote earlier, and place your cursor on line 10\.
    Place your cursor in the word legend and the **Documentation** window will instantly
    display the documentation for that method, which is part of the Matplotlib library.
    You can see this in *Figure 12**.22*:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们之前编写的代码，并将光标放在第10行。将光标放在单词legend上，**文档**窗口将立即显示该方法的文档，该方法属于Matplotlib库。你可以在*图12.22*中看到这一点：
- en: '![Figure 12.22: Click on pretty much anything, and the Documentation panel
    will show documentation on any property or method](img/B19644_12_22.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图12.22：点击几乎任何内容，文档面板将显示任何属性或方法的文档](img/B19644_12_22.jpg)'
- en: 'Figure 12.22: Click on pretty much anything, and the Documentation panel will
    show documentation on any property or method'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.22：点击几乎任何内容，文档面板将显示任何属性或方法的文档
- en: The thing with these scientific libraries that are popular with data science
    is they can have complicated data structures being used as arguments and return
    types. Having instance reference material is extremely useful. I’d recommend a
    larger screen to truly take advantage of it. My screenshot in *Figure 12**.22*
    is a little crowded only because it’s on a smaller screen with the fonts dialed
    up to make them clear for the printed book.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这些在数据科学中流行的科学库的问题在于，它们可以使用复杂的数据结构作为参数和返回类型。拥有实例参考资料非常有用。我建议使用更大的屏幕才能真正利用它。我的截图*图12.22*略显拥挤，仅仅是因为它是在一个较小的屏幕上，字体被调整到清晰以便于打印书籍。
- en: 'Besides showing you documentation for wherever you click, the **Documentation**
    panel will update as you type your code. Not only do you get the usual auto-completion,
    but you see the full documentation at the same time. The **Document** panel has
    a few configuration options reached by clicking the three vertical dots at the
    top of the panel, shown in *Figure 12**.23*:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 除了显示你点击处的文档外，**文档**面板还会在你输入代码时更新。你不仅得到通常的自动完成，还能同时看到完整的文档。**文档**面板有一些配置选项，通过点击面板顶部的三个垂直点来访问，如*图12.23*所示：
- en: '![Figure 12.23: There are a few configuration options for the Documentation
    panel found beneath the menu at the top of the panel](img/B19644_12_23.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图12.23：在面板顶部的菜单下方可以找到一些文档面板的配置选项](img/B19644_12_23.jpg)'
- en: 'Figure 12.23: There are a few configuration options for the Documentation panel
    found beneath the menu at the top of the panel'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.23：在面板顶部的菜单下方可以找到一些文档面板的配置选项
- en: Next, we will examine a unique feature in PyCharm when it comes to executing
    Python code, that is, implementing code cells.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨PyCharm在执行Python代码时的一个独特功能，即实现代码单元格。
- en: Using code cells in PyCharm
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在PyCharm中使用代码单元格
- en: PyCharm’s code cells are a way to separate and execute different portions of
    a large Python program sequentially. You’ll recognize this feature if you have
    ever used the **Jupyter Notebook**. Code cells in PyCharm are basically a trimmed-down
    version of that tool. PyCharm also has direct support for Jupyter notebooks, but
    I’m saving that for the next chapter.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm的代码单元格是一种将大型Python程序的不同部分按顺序分离和执行的方法。如果你曾经使用过**Jupyter Notebook**，你会认出这个功能。PyCharm中的代码单元格基本上是这个工具的简化版。PyCharm还直接支持Jupyter笔记本，但我将这部分内容留到下一章。
- en: The needs of data science are different from the needs of a general software
    developer. A data scientist isn’t worried about writing shipable code with the
    same architectural and scaling constraints as a software developer. They also
    don’t deal with your typical variables that are mostly primitives, or smallish
    objects with a handful of properties and methods. They deal in volume, and the
    programs they write are algorithmic. Don’t get overly wrapped up around the word
    **algorithm**. An *algorithm* is simply a set of steps that make up a process.
    Sure, the algorithm that powers Google’s search business, PageRank, is an amazing
    feat of proprietary engineering. It’s an algorithm, but so is the recipe for a
    good old peanut butter and jelly sandwich. Complexity isn’t a requirement, in
    fact the best algorithms are usually simple.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学的需求与一般软件开发者的需求不同。数据科学家不会担心编写具有相同架构和扩展约束的可用代码。他们也不处理你典型的变量，这些变量大多是原始类型，或者是一些具有少量属性和方法的小对象。他们处理的是大量数据，他们编写的程序是算法性的。不要过分关注“算法”这个词。*算法*只是一系列构成过程的步骤。当然，推动谷歌搜索业务、PageRank的算法是一项惊人的专有工程壮举。它是一个算法，但一个美味的花生酱果酱三明治的食谱也是一个算法。复杂性不是必需的，事实上，最好的算法通常是简单的。
- en: Data scientists study problems by collecting, filtering, and processing large
    amounts of data using a series of aggregate steps. Each step is very discrete
    with an input and an output. Code cells make it easy to construct and work with
    these discrete steps rather than having to deal with complicated code structures
    the way a regular software developer would.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家通过收集、过滤和处理大量数据，使用一系列聚合步骤来研究问题。每个步骤都非常离散，有输入和输出。代码单元格使得构建和使用这些离散步骤变得容易，而不是像常规软件开发人员那样处理复杂的代码结构。
- en: Using PyCharm code cells
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用PyCharm代码单元格
- en: 'Code cells in PyCharm are defined by lines of code that start with the following
    characters: `#%%`. These lines are treated as standard comments in the low-level
    execution of Python, but PyCharm will recognize them as code cell separators in
    its editor. Let’s see this feature in action.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm中的代码单元格由以下字符开始的代码行定义：`#%%`。这些行在Python的低级执行中被视为标准注释，但PyCharm会在其编辑器中识别它们作为代码单元格分隔符。让我们看看这个功能是如何工作的。
- en: 'Let’s go back to our demo code from earlier and make some small changes:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到之前演示的代码，做一些小的修改：
- en: '[PRE3]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note the addition of the two lines beginning with `#%%`. Those lines define
    our code cells. Moreover, they also serve as regular comments that explain what
    the code block is doing. Now look at how the PyCharm UI has changed. You should
    now see some run buttons appear in the gutter, as shown in *Figure 12**.24*:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到添加了以`#%%`开始的两个行。这些行定义了我们的代码单元格。此外，它们还作为常规注释，解释代码块正在做什么。现在看看PyCharm UI的变化。您现在应该看到一些运行按钮出现在页边空白处，如图*图12.24*所示：
- en: '![Figure 12.24: Run buttons appear in the gutter in response to the special
    comment format](img/B19644_12_24.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图12.24：响应特殊注释格式的运行按钮出现在页边空白处](img/B19644_12_24.jpg)'
- en: 'Figure 12.24: Run buttons appear in the gutter in response to the special comment
    format'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.24：响应特殊注释格式的运行按钮出现在页边空白处
- en: 'Now, we can run each cell and review the result before running the next. If
    we need to make an adjustment in the middle cell, we can re-run that cell and
    those that are subsequent. When you click the run buttons, the code is being executed
    in the PyCharm console. If your console isn’t visible, you can get to it by clicking
    **View** | **Tool Windows** | **Python Console**. With the **Python Console**
    panel open you can inspect the code as it runs, as shown in *Figure 12**.25*:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以运行每个单元格，并在运行下一个单元格之前查看结果。如果我们需要在中间单元格中进行调整，我们可以重新运行该单元格及其后续单元格。当您点击运行按钮时，代码将在PyCharm控制台中执行。如果您的控制台不可见，您可以通过点击**视图**
    | **工具窗口** | **Python控制台**来访问它。在**Python控制台**面板打开的情况下，您可以在代码运行时检查它，如图*图12.25*所示：
- en: '![Figure 12.25: You can see the code is being run in the console. There is
    an inspection panel allowing you to see what happened after the cell executed](img/B19644_12_25.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图12.25：您可以看到代码正在控制台中运行。有一个检查面板，允许您查看单元格执行后的情况](img/B19644_12_25.jpg)'
- en: 'Figure 12.25: You can see the code is being run in the console. There is an
    inspection panel allowing you to see what happened after the cell executed'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.25：您可以看到代码正在控制台中运行。有一个检查面板，允许您查看单元格执行后的情况
- en: As each step runs, you can see the code execute in the console window. Remember,
    the console is accessing Python REPL, it isn’t a terminal window. We discussed
    this in [*Chapter 3*](B19644_03.xhtml#_idTextAnchor052). The **Python Console**
    window has an inspection panel allowing you to inspect state much as you would
    if you were debugging.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 每当每个步骤运行时，您都可以在控制台窗口中看到代码的执行情况。记住，控制台正在访问Python REPL，它不是一个终端窗口。我们已经在[*第3章*](B19644_03.xhtml#_idTextAnchor052)中讨论过这一点。**Python控制台**窗口有一个检查面板，允许您检查状态，就像您在调试时一样。
- en: Since it is a PyCharm console that is executing your code, if you need to start
    over, you can just kill the console and run your steps again. This will spawn
    a fresh console.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 由于是PyCharm控制台在执行您的代码，如果您需要从头开始，只需终止控制台并再次运行步骤即可。这将启动一个新的控制台。
- en: The cell mode plugin
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元格模式插件
- en: Earlier, when we were discussing some cool plugins you can use for data science
    work, we installed a plugin called cell mode. The cell mode plugin extends the
    features of code cells.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前讨论的一些可用于数据科学工作的酷插件时，我们安装了一个名为单元格模式的插件。单元格模式插件扩展了代码单元格的功能。
- en: 'For starters, with the cell mode plugin, you need to use double pound/hashtag
    signs (`##`) instead of the usual `#%%`. When you do this, the plugin takes over
    and gives you some extra run options. Take a look at *Figure 12**.26*:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用单元格模式插件时，你需要使用双井号/哈希符号（`##`）而不是通常的 `#%%`。当你这样做时，插件就会接管并提供一些额外的运行选项。看看 *图
    12.26*：
- en: '![Figure 12.26: This time when you click you get some additional options](img/B19644_12_26.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.26：这次当你点击时，你会得到一些额外的选项](img/B19644_12_26.jpg)'
- en: 'Figure 12.26: This time when you click you get some additional options'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.26：这次当你点击时，你会得到一些额外的选项
- en: 'Your run buttons now allow you to run the cell and immediately jump to the
    next, rather than simply stopping at the bottom of the cell you just ran. *Figure
    12**.27* shows you have some additional control at the menu level:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你的运行按钮现在允许你运行单元格并立即跳转到下一个，而不仅仅是停止在你刚刚运行的单元格底部。*图 12.27* 显示你在菜单级别有一些额外的控制：
- en: '![Figure 12.27: The cell mode plugin adds additional menu items to the Code
    menu](img/B19644_12_27.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.27：单元格模式插件向代码菜单添加了额外的菜单项](img/B19644_12_27.jpg)'
- en: 'Figure 12.27: The cell mode plugin adds additional menu items to the Code menu'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.27：单元格模式插件向代码菜单添加了额外的菜单项
- en: When you click **Code** | **Cell Mode** you get even more granular run options
    for your code cells. Overall, we can see that this plugin offers all the advantages
    of using Jupyter notebooks without having to actually switch to Jupyter applications.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击 **代码** | **单元格模式** 时，你会得到针对你的代码单元格的更多粒度的运行选项。总的来说，我们可以看到这个插件提供了使用 Jupyter
    笔记本的所有优点，而无需实际切换到 Jupyter 应用程序。
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: A scientific project in PyCharm is created with a general structure that is
    common among projects in real life, including good practices such as a data folder
    that is excluded from version control, the `README.md` file, and the `requirements.txt`
    file. As you can imagine, having to manually create this setup for every project
    can prove to be difficult and time-consuming. This feature helps PyCharm users
    get right down to the development process after the project has been created so
    that they don’t have to worry about taking care of miscellaneous details. This
    will allow us to be faster and more productive in our development workflow.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PyCharm 中创建的科学项目具有与现实生活中项目常见的通用结构，包括诸如从版本控制中排除的数据文件夹、`README.md` 文件和 `requirements.txt`
    文件等良好实践。正如你可以想象的那样，必须为每个项目手动创建这种设置可能会变得困难且耗时。此功能帮助 PyCharm 用户在项目创建后立即进入开发过程，这样他们就不必担心处理杂项细节。这将使我们能够更快、更高效地完成开发工作流程。
- en: Additionally, PyCharm’s Scientific mode includes various features that support
    the development process of scientific computing or data science projects, namely
    the Documentation and SciView panels. In combination with this mode, you can also
    take advantage of other powerful features, such as code cells and the CSV plugin,
    to streamline various tasks and effectively improve your productivity in data
    science projects.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，PyCharm 的科学模式包括各种支持科学计算或数据科学项目开发过程的功能，例如文档和 SciView 面板。结合此模式，你还可以利用其他强大的功能，如代码单元格和
    CSV 插件，以简化各种任务并有效提高你在数据科学项目中的生产力。
- en: However, these features only mark the beginning of what PyCharm has to offer
    when assisting us in data-related projects. Building on these topics, in the next
    chapter, we will look into the usage of the SciView panel and Jupyter notebooks,
    which are a big part of the Python data science ecosystem within PyCharm.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些功能只是 PyCharm 在帮助我们进行数据相关项目时所能提供的开始。在此基础上，在下一章中，我们将探讨 SciView 面板和 Jupyter
    笔记本的使用，它们是 PyCharm 中 Python 数据科学生态系统中重要的一部分。
- en: Be sure to check out the companion website for the book at [https://www.pycharm-book.com](https://www.pycharm-book.com).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要查看本书的配套网站 [https://www.pycharm-book.com](https://www.pycharm-book.com)。
- en: Questions
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the Markdown language? What purpose does a `README.md` file in a GitHub
    repository serve?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Markdown 语言是什么？GitHub 仓库中的 `README.md` 文件有什么作用？
- en: Why is the data folder in a scientific project in PyCharm excluded from version
    control?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么 PyCharm 中科学项目的数据文件夹被排除在版本控制之外？
- en: How can you turn scientific mode on and off in PyCharm? What effect will this
    have on a given project window?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何在 PyCharm 中打开和关闭科学模式？这将对特定项目窗口产生什么影响？
- en: What features are available within PyCharm’s **Documentation** panel?
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyCharm 的 **文档** 面板中可用的功能有哪些？
- en: What are code cells in PyCharm and how can you implement them?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyCharm 中的代码单元格是什么？你如何实现它们？
- en: What features are available within the CSV plugin in PyCharm?
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyCharm中CSV插件有哪些可用功能？
