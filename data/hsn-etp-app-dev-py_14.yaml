- en: Deploying to the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到云端
- en: A lot of our focus until now has been spent working on the development of the
    applications, be it in the form of a big monolithic application or in the form
    of a microservices-based application where a lot of services are present. For
    these applications to be made available to the users, the applications need to
    be deployed somewhere where general users can interact with the application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的重点大部分都花在了应用程序的开发上，不管是以大型单体应用程序的形式还是以基于微服务的应用程序形式，其中存在许多服务。为了让这些应用程序对用户可用，应用程序需要部署到一定的地方，以便一般用户可以与应用程序进行交互。
- en: In the modern world of DevOps, the deployment strategies and where the deployment
    of the application is going to happen play an important role in defining how the
    application is going to work and be made accessible to the user. The decisions
    taken about the deployment of the applications can influence a lot of things inside
    the infrastructure, such as the complexity of infrastructure that will be required
    to run a particular application or how the new features inside the application
    will be rolled out.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps的现代世界中，部署策略以及应用程序的部署地点在定义应用程序如何工作和向用户提供访问权限方面起着重要作用。关于应用程序部署的决策可以影响基础设施中的许多事情，例如运行特定应用程序所需的基础设施的复杂性，以及应用程序内的新功能将如何推出。
- en: Over the course of this chapter, we will take a look at how to create deployments
    for the monolithic applications as well as microservices-based applications, and
    how we can work on implementing the deployment strategies that prioritize the
    stability of the application when it has been deployed over the infrastructure.
    We will also take a look at differentiating the modern ways of deploying an application
    using the containers and making a choice between the private, public, and hybrid
    cloud deployments.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的过程中，我们将看看如何为单体应用程序和基于微服务的应用程序创建部署，以及如何实施部署策略，优先考虑应用程序在基础设施上部署后的稳定性。我们还将研究使用容器部署应用程序的现代方法，并在私有、公共和混合云部署之间做出选择。
- en: 'As a reader of this chapter, you will get to learn about the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本章的读者，您将学习以下内容：
- en: The need for deployment strategies
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署策略的需求
- en: Containerizing applications for deployment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序容器化以进行部署
- en: Integrating testing as a part of the deployment strategy
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将测试集成为部署策略的一部分
- en: Deployment on a private cloud
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在私有云上部署
- en: Deployment on a public cloud
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在公共云上部署
- en: The shift toward the hybrid cloud
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向混合云的转变
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For understanding this chapter, a fair knowledge of containerization using Docker
    and knowledge about how to use the CLI from at least one of the cloud providers
    will be of use.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解本章，对使用Docker进行容器化和至少一个云提供商的CLI的知识将会有所帮助。
- en: Deploying enterprise applications
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署企业应用程序
- en: Over the course of this book, we have seen how to develop an enterprise application
    using different principles, be it a monolithic way of application development
    or through the use of small microservices for developing the application. But
    these things converge at a common point. For our applications to be made available
    for general use, they need to be deployed at some place outside the development
    environment that is accessible to the general users.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的过程中，我们已经看到了如何使用不同的原则开发企业应用程序，无论是通过单体应用程序开发的方式还是通过使用小型微服务来开发应用程序。但这些事情都汇聚在一个共同点。为了让我们的应用程序对一般用户可用，它们需要部署到开发环境之外的某个地方，以便一般用户可以访问。
- en: 'This infrastructure and the type of deployment chosen for a particular application
    need to offer a certain set of features for the deployment to be successful:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功部署，特定应用程序的基础设施和所选择的部署类型需要提供一定的功能：
- en: '**High uptime:** Any infrastructure where an application is deployed needs
    to provide high uptime so as to provide a near interruption free service of the
    application to its users. If the infrastructure is vulnerable to frequent downtimes,
    then it might cause severe downtimes in the availability of the application, and
    can cause the processes that are dependent upon the application to come to a halt
    until the infrastructure on which the application is running comes back online.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用性：** 应用程序部署的任何基础设施都需要提供高可用性，以便为用户提供几乎无中断的应用程序服务。如果基础设施容易频繁宕机，那么可能会导致应用程序的可用性严重中断，并且可能会导致依赖于应用程序的流程停滞，直到应用程序运行的基础设施恢复在线。'
- en: '**Low latency:** The latency of the infrastructure serving the application
    should be low so as to enable adequate response times to the users. If the infrastructure
    latency is high, the users may keep waiting to interact with the application,
    or the response to be generated by the application may severely impact their productivity.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低延迟：** 为应用程序提供服务的基础设施的延迟应该低，以便为用户提供足够的响应时间。如果基础设施的延迟很高，用户可能需要等待与应用程序进行交互，或者应用程序生成的响应可能严重影响他们的生产力。'
- en: '**Fault tolerance:** The deployment infrastructure should be fault tolerant
    and should be able to recover from an occasional failure of a few nodes. In case
    of the absence of fault tolerance, even a single issue inside the infrastructure
    will be enough to bring the whole application down, causing severe reliability
    issues for the users of the application.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容错性：** 部署基础设施应具有容错性，并且应能够从偶尔的几个节点故障中恢复。如果缺乏容错性，即使基础设施内出现单个问题，也足以使整个应用程序崩溃，给应用程序的用户造成严重的可靠性问题。'
- en: These are just a basic set of requirements that need to be present for an infrastructure
    to be considered for the deployment of the application. There could be additional
    requirements that might get imposed as a result of the choice of a particular
    deployment strategy for the infrastructure, but the discussion of those requirements
    is beyond the scope of this book.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是需要满足的基本基础设施要求，才能考虑将应用程序部署到该基础设施上。可能会有其他要求，这些要求可能是由于选择特定的基础设施部署策略而施加的，但讨论这些要求超出了本书的范围。
- en: Untill now, we have heard the words *Deployment strategies* a lot, but what
    exactly do we mean when we say we need to choose an appropriate deployment strategy
    for the application? Let's spend some time exploring this.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们经常听到*部署策略*这个词，但当我们说我们需要为应用程序选择适当的部署策略时，我们到底是什么意思呢？让我们花点时间来探讨一下。
- en: Making a choice about the deployment strategy
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择部署策略
- en: Once we have figured out that we are now ready for taking our application into
    production, we are now tasked with the work of figuring out the application deployment
    strategy that we are going to use.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确定我们现在准备将应用程序投入生产，我们现在的任务是找出我们将要使用的应用程序部署策略。
- en: The deployment strategy for the application will usually lay out the rules for
    how the application will be rolled out, depending upon the kind of application
    we have. These deployment strategies cover the information about the kind of steps
    that are required to have the application available in production, and may also
    cover some other important areas about how the new features are rolled out in
    the application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的部署策略通常会规定应用程序的推出方式，取决于我们所拥有的应用程序的类型。这些部署策略涵盖了有关在生产中使应用程序可用所需的步骤的信息，并且可能还涵盖有关如何在应用程序中推出新功能的其他重要领域。
- en: So, let's spend some time discussing the different kinds of deployment strategies
    available ...
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们花点时间讨论可用的不同部署策略...
- en: The different deployment strategies
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同的部署策略
- en: Inside the software development world, there is no one solution fits all, and
    this is true even when making a choice for the type of deployment strategy that
    we are going to follow for the deployment of our application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发世界中，没有一种解决方案适用于所有情况，即使在选择我们将要遵循的部署策略类型时也是如此。
- en: 'Every deployment strategy we choose will have certain advantages and disadvantages
    associated with it. Some of the deployment strategies do not provide a lot of
    flexibility but are simple to implement, whereas the other deployment strategies
    are very flexible but can become a pain while implementing it in the process.
    As developers, the choices depend upon how we want to approach the deployment
    of the application. Majorly, there are six deployment strategies that we are going
    to cover over the course of this chapter, namely:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择的每种部署策略都会有与之相关的优缺点。一些部署策略提供的灵活性不大，但实施起来简单，而其他部署策略非常灵活，但在实施过程中可能会变得麻烦。作为开发人员，选择取决于我们如何处理应用程序的部署。主要地，我们将在本章的过程中涵盖六种部署策略，即：
- en: Recreated deployments
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新创建部署
- en: Rolling deployments
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动部署
- en: Blue/green deployments
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝绿部署
- en: Canary deployments
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金丝雀部署
- en: A/B deployments
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: A/B部署
- en: Shadow deployments
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 影子部署
- en: So, let's spend some time getting familiar with each of them.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们花点时间来熟悉每种部署策略。
- en: Recreated deployments
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新创建部署
- en: 'This is the most traditional approach to the deployment of the applications.
    In this strategy of deployment, we simply destroy the old version of the application
    and introduce a new version of the application, and, route all the user requests
    to the new version of the application. The following diagram shows a representation
    of the Recreate deployment strategy:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用程序部署的最传统方法。在这种部署策略中，我们简单地销毁旧版本的应用程序，并引入新版本的应用程序，并将所有用户请求路由到新版本的应用程序。以下图表显示了重新创建部署策略的表示：
- en: '![](Images/53fd297d-1f07-4082-83dc-cf68c4f2a3c7.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/53fd297d-1f07-4082-83dc-cf68c4f2a3c7.png)'
- en: This kind of strategy is really useful for the deployment of an application
    that follows the monolithic development approach, because for every new feature
    or upgrade, the whole application needs to be redeployed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略对于遵循单体开发方法的应用程序的部署非常有用，因为对于每个新功能或升级，整个应用程序都需要重新部署。
- en: The advantages of going with the recreate deployment ...
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用重新创建部署的优势...
- en: Rolling deployments
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滚动部署
- en: In the rolling deployments model of deploying an application, we do not abruptly
    take down all the instances of the older version of the application to replace
    them with the newer version. Instead, we take a gradual approach of rolling out
    the new application version across the infrastructure.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署应用程序的滚动部署模型中，我们不会突然关闭所有旧版本应用程序的实例，以替换它们为新版本。相反，我们采取逐步推出新应用程序版本的方法，覆盖整个基础设施。
- en: 'In this process, we first launch a new instance of the upgraded application
    behind the **Load Balancer**, and once it is ready to accept the traffic, we remove
    the equivalent instance of the older version of the application. This process
    continues until all the older instances of the application have been replaced
    with the newer instances. The following diagram shows a representation of the
    Rolling deployments strategy:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，我们首先启动升级后的应用程序的新实例，放在**负载均衡器**后面，一旦它准备好接受流量，我们就移除旧版本应用程序的等效实例。这个过程会持续进行，直到所有旧版本应用程序的实例都被新版本实例替换。以下图表显示了滚动部署策略的表示：
- en: '![](Images/c60520ce-7582-416e-8eb5-543c232c06c8.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c60520ce-7582-416e-8eb5-543c232c06c8.png)'
- en: This kind of deployment strategy is also a good choice for monolithic applications
    in case we want to achieve low downtimes with the application upgrades, because
    the application is rolled out gradually inside the infrastructure.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种部署策略对于单片应用程序也是一个不错的选择，如果我们希望通过应用程序的逐步推出来实现低停机时间，因为应用程序在基础设施内逐渐推出。
- en: 'The rolling deployments provide several benefits, such as the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动部署提供了几个好处，例如：
- en: '**Easy to revert faulty upgrades:** In case an upgraded version of the application
    introduces some bug or fault, we can easily roll back the upgrade in the mid phase.
    This is possible because the new version is rolled out gradually inside the infrastructure.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于恢复故障升级：如果应用程序的升级版本引入了一些错误或故障，我们可以在中间阶段轻松回滚升级。这是因为新版本在基础设施内逐渐推出。
- en: '**Easy to set up:** With the knowledge of the infrastructure on which the application
    is running, this deployment strategy is easy to set up and automate, where the
    different parts of the infrastructure are updated one by one.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于设置：具有应用程序运行基础设施知识的情况下，这种部署策略易于设置和自动化，基础设施的不同部分逐一更新。
- en: Blue/green deployments
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蓝/绿部署
- en: The blue/green deployment strategy is an interesting strategy. This strategy
    implements a mix of techniques there are used for testing the application and
    launching it in production.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝/绿部署策略是一种有趣的策略。该策略实现了一系列用于测试应用程序并在生产环境中启动的技术的混合。
- en: Inside the blue/green approach to deployments, the updated application is introduced
    inside the infrastructure with the equivalent number of instances as that of the
    older version of the application. Once this is done, the new version of the application
    is tested inside the infrastructure. Once the version is found to be stable, the
    traffic is then switched from the older version to the newer version of the application
    and the older version of the application is decommissioned. The following diagram
    shows a representation of the Blue/Green ...
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在蓝/绿部署方法中，更新的应用程序被引入基础设施，其实例数量与旧版本的应用程序相同。完成后，在基础设施内测试新版本的应用程序。一旦发现版本稳定，流量就会从旧版本切换到新版本的应用程序，然后旧版本的应用程序被废弃。以下图表显示了蓝/绿...
- en: Canary deployments
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金丝雀部署
- en: In this approach of deployment, we follow the same strategy as in the blue/green
    deployments but with a minor change. Inside the blue/green deployments, the testing
    was carried out internally, and once the new version of the application was marked
    stable, all of the requests were used to switch to the new version in one go.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种部署方法中，我们遵循与蓝/绿部署相同的策略，但有一个小改变。在蓝/绿部署中，测试是在内部进行的，一旦应用程序的新版本被标记为稳定，所有请求都将立即切换到新版本。
- en: Inside the canary deployment approach, the testing happens based on the actual
    user requests. The **Load Balancer** is configured to redirect a certain percentage
    of the requests to the canary version that has been deployed in the infrastructure
    to see how the new version performs in the presence of the actual requests.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在金丝雀部署方法中，测试是基于实际用户请求进行的。负载均衡器被配置为将一定百分比的请求重定向到已部署在基础设施中的金丝雀版本，以查看新版本在实际请求存在的情况下的性能。
- en: 'The following diagram shows a representation of the Canary deployments strategy:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了金丝雀部署策略的表示：
- en: '![](Images/8ae7255b-7930-4943-bc9e-e0185f4c2b31.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8ae7255b-7930-4943-bc9e-e0185f4c2b31.png)'
- en: This kind of deployment approach is usually used for microservices-based applications
    when the internal testing of the application is deemed not to be enough, and there
    is a doubt about the stability of the infrastructure on which the application
    is running.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序的内部测试被认为不足以满足要求，并且对应用程序运行的基础设施的稳定性存在疑虑时，通常会使用这种部署方法。
- en: This testing approach provides the advantage of testing the application in the
    production use case, while allowing for easy rollback in case the application
    does not meet the expected results.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这种测试方法提供了在生产用例中测试应用程序的优势，同时允许在应用程序未达到预期结果时轻松回滚。
- en: The drawback to using this kind of approach for deployment is the added complexity
    inside the infrastructure, which now needs to be intelligent to route a part of
    the incoming requests to the canary versions of the applications.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种部署方法的缺点是基础设施内部的复杂性增加，现在需要智能地将部分传入请求路由到应用程序的金丝雀版本。
- en: A/B deployments
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A/B部署
- en: The A/B deployment approach shares a lot of similarities with the canary deployment
    approach, where a new version of the application is introduced into the production
    infrastructure and a certain number of incoming requests are redirected toward
    the canary version.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: A/B部署方法与金丝雀部署方法有很多相似之处，其中新版本的应用程序被引入生产基础设施，并且一定数量的传入请求被重定向到金丝雀版本。
- en: In the A/B deployments, the upgraded version of the application (version B)
    is introduced into the production infrastructure, and the load balancer is then
    configured to redirect a certain set of requests to the upgraded version based
    on some predefined criteria.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在A/B部署中，应用程序的升级版本（版本B）被引入生产基础设施，然后负载均衡器被配置为根据一些预定义的标准将一定数量的请求重定向到升级版本。
- en: This kind of deployment approach is required when we are not sure how an upgraded
    version will affect a certain subset of users. For example, how will the users
    using a smartphone be affected by an upgraded ...
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们不确定升级版本将如何影响某个用户子集时，就需要这种部署方法。例如，使用智能手机的用户将如何受到升级版本的影响...
- en: Shadow deployments
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阴影部署
- en: In the shadow deployment approach, we introduce a new approach. In comparison
    with canary deployments or A/B deployments, where a certain number of requests
    are handled by the old version and a certain number of requests are handled by
    the new version of the application, we have two versions of the applications inside
    the production infrastructure. These are the old version and the new version,
    which contain the latest updates.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在阴影部署方法中，我们引入了一种新方法。与金丝雀部署或A/B部署相比，在这些方法中，一定数量的请求由旧版本处理，一定数量的请求由新版本处理，我们在生产基础设施中有两个应用程序版本。这些是旧版本和包含最新更新的新版本。
- en: 'Inside the shadow deployments, the updated version of the application sees
    the exact same requests that are being sent to the old stable version of the application,
    with the catch that any processing done by the new version of the application
    instances does not affect the response for the request that is handled only by
    the stable instances inside production. The following diagram shows a representation
    of the shadow deployments strategy:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在阴影部署中，应用程序的更新版本看到与旧稳定版本应用程序发送的完全相同的请求，但新版本应用程序实例的任何处理都不会影响仅由生产中的稳定实例处理的请求的响应。以下图表显示了阴影部署策略的表示：
- en: '![](Images/f40c94ef-25c4-43e7-ad46-7d3b2ab0c542.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f40c94ef-25c4-43e7-ad46-7d3b2ab0c542.png)'
- en: This kind of deployment approach is usually preferred for microservices-based
    applications, and is used when developers want to test the application for its
    behavior when the load on the application varies.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这种部署方式通常适用于基于微服务的应用程序，并且在开发人员希望测试应用程序在负载变化时的行为时使用。
- en: This kind of deployment is also employed to check if the application behaves
    correctly in real-world use cases, which cannot be tested in internal environments.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这种部署方式也被用来检查应用程序在真实使用情况下是否表现正常，这是在内部环境无法测试的。
- en: The only con to taking this kind of approach is the fact that the infrastructure
    costs are increased for these kinds of deployments because we need to run both
    the older version and the newer version at full scale.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这种方式的唯一缺点是这种部署方式会增加基础设施成本，因为我们需要同时以全面规模运行旧版本和新版本。
- en: Now, with this, we are accustomed to the different kind of deployment strategies
    that are present to help us decide how we want to deploy our application in production.
    While some of these deployment strategies focus on the simplicity of the process,
    others focus on making sure that the newer versions being deployed are stable
    enough and provide the best possible results.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过这个，我们已经习惯了不同类型的部署策略，这些策略可以帮助我们决定如何在生产环境中部署应用程序。虽然其中一些部署策略侧重于流程的简单性，但其他部署策略侧重于确保部署的新版本足够稳定并提供最佳结果。
- en: Which deployment strategy to choose for the deployment of your application is
    greatly dependent upon several factors, which include the cost of infrastructure
    you can take up, the amount of time that can be spent in the maintenance of the
    infrastructure, and the type of application that you plan to deploy. Another important
    factor that limits the choice of the deployment strategy that can be utilized
    is the fact of having the APIs between the applications changed. Usually, these
    kinds of changes are governed by the use of SLAs, and if they take place, the
    deployment strategy might need to be updated to accommodate for the changes made.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 选择应用程序部署的部署策略在很大程度上取决于几个因素，包括您可以承担的基础设施成本、可以花费在基础设施维护上的时间以及您计划部署的应用程序类型。另一个限制可以使用的部署策略的重要因素是应用程序之间的API是否发生了变化。通常，这些变化受SLA的约束，如果发生了变化，可能需要更新部署策略以适应所做的更改。
- en: At the time of writing this book, a lot of organizations are moving to the cloud
    as their preferred choice of infrastructure to deploy their applications in production.
    So, let's spend some time understanding the various kinds of cloud infrastructures
    that are present, and how can we decide upon which one to use for our deployments.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，许多组织正在将云作为他们首选的基础设施选择，用于在生产环境中部署他们的应用程序。因此，让我们花一些时间了解目前存在的各种云基础设施，以及我们如何决定使用哪种基础设施进行部署。
- en: Making a choice of infrastructure
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择基础设施
- en: An application needs an infrastructure over which it can run. Depending on the
    type of application that is there, the infrastructure that's required may be changed.
    The choice of which infrastructure to choose for the deployment of the application
    is greatly influenced by the type of the application that is being deployed, the
    complexity of the application, and the kind of use cases the application is going
    to support.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序需要一个可以运行的基础设施。根据存在的应用程序类型，所需的基础设施可能会发生变化。选择哪种基础设施用于部署应用程序的选择受到正在部署的应用程序类型、应用程序的复杂性以及应用程序将支持的用例类型的极大影响。
- en: Another important factor while choosing the infrastructure for the deployment
    of the application is the concern for the scalability of the application, which
    includes the complexity with which we can scale the application up and the type
    of scaling we can employ.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择应用程序部署的基础设施时，另一个重要因素是对应用程序可扩展性的关注，包括我们可以如何扩展应用程序以及可以采用的扩展类型的复杂性。
- en: First let's take a look at ...
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们来看一下...
- en: The traditional infrastructure
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统基础设施
- en: In the past, when the applications used large monoliths to perform a number
    of business processes, the developers and the organizations used to resort to
    an infrastructure that was composed of large mainframes or virtual machines running
    over beefy servers to provide the adequate amount of resources required to run
    the applications.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，当应用程序使用大型单块来执行多个业务流程时，开发人员和组织通常会采用由大型主机或虚拟机组成的基础设施，以提供运行应用程序所需的充足资源。
- en: These bare metal machines or virtual machines were provisioned with all the
    requirements that are essential for running the application, and then the application
    was deployed on these machines and made available to users for general use.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些裸机或虚拟机都配备了运行应用程序所需的所有要求，然后将应用程序部署在这些机器上，并提供给用户供一般使用。
- en: This kind of infrastructure choice worked well and even allowed multiple applications
    to exist on the same beefy bare metal server, isolated through the use of virtual
    machines, abstracting away the hardware of the server.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这种基础设施选择运行良好，甚至允许多个应用程序存在于同一台强大的裸机服务器上，通过使用虚拟机进行隔离，将服务器的硬件抽象化。
- en: 'However,  this approach was plagued by a number of issues, such as the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法存在许多问题，例如：
- en: '**High cost of infrastructure**: For deployments that utilized bare metal systems
    or virtual machines, the cost of infrastructure was high. The organizations either
    needed to purchase those beefy servers that were capable of running these applications,
    or had to resort to dedicated hosting providers, which used to cost a lot.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施成本高**：对于使用裸机系统或虚拟机的部署，基础设施成本很高。组织要么需要购买能够运行这些应用程序的强大服务器，要么必须求助于专门的托管提供商，这通常成本很高。'
- en: '**Increased overhead**: For any application that was running inside a virtual
    machine, the overhead incurred by running a full-fledged virtualized operating
    system that supported the application was very high, greatly reducing the number
    of applications that could coexist on the same hardware.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开销增加**：对于任何运行在虚拟机内的应用程序，运行支持应用程序的完整虚拟化操作系统所产生的开销非常高，大大减少了可以共存在同一硬件上的应用程序数量。'
- en: '**High start up times**: As the load increased, new instances of the application
    needed to be spawned up to handle the increased number of incoming requests. However,
    starting the complete virtual machines with the application instances running
    inside them was a slow procedure due to the whole process that needed to be carried
    out for a virtual machine to boot up.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动时间长**：随着负载的增加，需要生成应用程序的新实例来处理增加的请求数量。然而，由于需要为虚拟机启动完成整个过程，启动完整的虚拟机及其中运行的应用程序实例是一个缓慢的过程。'
- en: '**Difficulty in scaling**: In the traditional infrastructure, the amount of
    horizontal scaling that could be done was very limited, and usually the only choice
    left for scaling the applications up was through the use of vertical scaling,
    where the resources dedicated to the application were increased based on the needs.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展困难**：在传统基础设施中，可以进行的水平扩展量非常有限，通常唯一的选择是通过使用垂直扩展来扩展应用程序，即根据需求增加应用程序所需的资源。'
- en: These drawbacks made the developers think about the alternatives to the traditional
    way of deploying applications.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这些缺点使开发人员开始考虑替代传统的应用程序部署方式。
- en: Another major reason that fueled this move away from using the traditional infrastructure
    was the move toward the containerized approach to application packaging. Let's
    take a look at what this is.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 推动远离传统基础设施的另一个主要原因是转向容器化的应用程序打包方式。让我们来看看这是什么。
- en: Containerized approach toward application packaging
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器化的应用程序打包方式
- en: With the advent of modern hardware and progress in software engineering, some
    operating systems introduced a light-weight alternative to heavy virtual machines.
    This alternative came in the form of containers, which promised not only a lower
    overhead approach to application segregation but also the fact that they were
    also fast enough to spawn up due to the fact that they did not abstract the underlying
    hardware at all.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 随着现代硬件的出现和软件工程的进步，一些操作系统推出了一种轻量级的替代方案，用以取代笨重的虚拟机。这种替代方案以容器的形式出现，承诺不仅可以更轻量地进行应用程序隔离，而且由于它们根本不会对底层硬件进行抽象，因此也可以快速启动。
- en: As the development of the applications moved toward the use of microservices
    architecture, the containerized approach to application packaging became more
    and more mainstream. In this approach, every microservice used to be packaged
    as a separate container that could be deployed ...
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用程序开发向微服务架构的转变，容器化的应用程序打包方式变得越来越主流。在这种方法中，每个微服务都被打包为一个单独的容器，可以部署...
- en: The move toward the cloud
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向云端转移
- en: In the last decade, a number of cloud providers have come into existence to
    help provide support in regards application deployment. Each of these cloud providers
    offers a distinguished set of features to make their service stand out from the
    competition when it comes to luring the organizations and developers to use their
    platform for the deployment of their applications.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的十年里，许多云服务提供商已经出现，以帮助支持应用程序部署。每个云服务提供商都提供一套独特的功能，以使他们的服务在吸引组织和开发人员使用其平台进行应用程序部署时脱颖而出。
- en: 'The shift toward the cloud deployment model provides various kinds of advantages
    for the developers/organizations that are responsible for the development of the
    applications, including the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 云部署模型的转变为负责应用程序开发的开发人员/组织提供了各种优势，包括以下内容：
- en: '**Reduced cost of infrastructure maintenance**: As the application deployments
    move to the cloud, the costs of maintaining the infrastructure are reducing. This
    is happening due to the fact that the cloud providers are now responsible for
    maintaining the hardware on which the applications are running, and the individual
    developers and organizations do not need to purchase this hardware and handle
    any kind of issues that may happen with it.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低基础设施维护成本**：随着应用程序部署转移到云端，维护基础设施的成本正在降低。这是因为云服务提供商现在负责维护应用程序运行的硬件，个人开发人员和组织不需要购买这些硬件或处理可能发生的任何问题。'
- en: '**High uptimes**: Most of the cloud providers guarantee a high uptime for their
    infrastructure, which is made possible due to the high amount of infrastructure
    replication done on their end. The end beneficiaries of this are the developers
    who are maintaining a particular application in the cloud, because now they can
    provide a high uptime to their application users without worrying about the productivity
    losses that may happen if the infrastructure goes down.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高运行时间**：大多数云提供商保证其基础设施的高运行时间，这是由于他们在端上进行的大量基础设施复制。受益者是在云中维护特定应用程序的开发人员，因为现在他们可以为应用程序用户提供高运行时间，而不必担心基础设施崩溃可能导致的生产损失。'
- en: '**Low latency**: Inside the cloud deployment approach, the developers can aim
    to provide low latency to the application for the users. This is made possible
    by replicating the application instances across the different geographical data
    centers of the cloud service provider. Once the application is replicated, the
    cloud service provider then re-routes the requests to the application servers,
    which are in close proximity of the client so as to facilitate low latency responses.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低延迟**：在云部署方法中，开发人员可以为用户提供低延迟的应用程序。这是通过在云服务提供商的不同地理数据中心之间复制应用程序实例来实现的。一旦应用程序被复制，云服务提供商就会将请求重新路由到靠近客户端的应用程序服务器，以便实现低延迟响应。'
- en: '**Easy scaling**: As the load on the application increases, new application
    instances might need to be spawned up to handle the increased load. The cloud
    service providers usually provide the facility of dynamically scaling up the application
    as the load on it increases and scaling down of the instances as the load subsides.
    This provides a high throughput, low cost solution to handle the peak loads without
    worrying about the manual intervention that is usually required in the traditional
    infrastructure. Also, the response times associated with this scaling are usually
    low in comparison with what is present in the case of traditional infrastructures.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易扩展**：随着应用程序的负载增加，可能需要生成新的应用程序实例来处理增加的负载。云服务提供商通常提供动态扩展应用程序的功能，随着负载的增加而扩展应用程序，并随着负载的减少而缩减实例。这提供了一种高吞吐量、低成本的解决方案，可以处理高峰负载，而不必担心传统基础设施通常需要的手动干预。此外，与传统基础设施相比，这种扩展的响应时间通常较低。'
- en: All of the preceding points make a compelling argument for the shift to cloud-based
    deployments for the applications. But based on the needs of an organization, they
    may or may not want their application to be deployed on a third-party server where
    the organization barely has any control. To handle such scenarios, the organizations
    may decide to move toward their own private clouds that run on their infrastructure
    and handle the deployments of all the applications inside the organization. So,
    let's spend some time understanding the various models of cloud deployments that
    are out there.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所有前述观点都为应用程序转向基于云的部署提供了有力的论据。但根据组织的需求，他们可能希望或不希望将其应用程序部署在组织几乎无法控制的第三方服务器上。为了处理这种情况，组织可能决定转向在其基础设施上运行并处理组织内所有应用程序部署的私有云。因此，让我们花一些时间了解当前存在的各种云部署模型。
- en: The different types of cloud deployments
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同类型的云部署
- en: 'When it comes to enterprises, they are highly sensitive about where their applications
    are running. This happens because of the fact that the enterprises deal with a
    wide variety of data that may contain a lot of sensitive information, and any
    kind of breach may threaten their business. As a developer who is building an
    enterprise application, it is our responsibility to suggest and decide which kind
    of cloud deployment should be used for the deployment of the application. Mainly,
    the type of clouds that exist currently are categorized into two main categories:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于企业来说，他们非常关注他们的应用程序在哪里运行。这是因为企业处理各种可能包含大量敏感信息的数据，任何一种违规行为都可能威胁到他们的业务。作为构建企业应用程序的开发人员，我们有责任建议和决定应该使用哪种云部署来部署应用程序。目前存在的云类型主要分为两大类：
- en: Public clouds
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共云
- en: Private clouds
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有云
- en: Recently, a third kind of category is also on the rise, known as hybrid cloud.
    So, let's take a look at what ...
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，还出现了第三种类别，称为混合云。因此，让我们来看看...
- en: Private clouds
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 私有云
- en: A private cloud is a set of computing resources that are tightly governed by
    an enterprise. These clouds run inside the corporate intranet and are usually
    located either in the data centers owned by the organization or are maintained
    by the third parties.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 私有云是由企业严格管理的一组计算资源。这些云运行在企业的企业内网中，通常位于组织拥有的数据中心或由第三方维护。
- en: These clouds implement a very strict security policy that defines how the applications
    running on them can be accessed and who can access them.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这些云实施了非常严格的安全策略，定义了在其上运行的应用程序如何被访问以及谁可以访问它们。
- en: 'Usually, an enterprise chooses a private cloud due to the following points:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，企业选择私有云是因为以下几点：
- en: The enterprise already has a data center of its own and it doesn't want to reinvest
    in a third-party cloud
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业已经拥有自己的数据中心，不想再投资于第三方云
- en: The kind of application that is being run by the enterprise is highly security
    sensitive and the security policies implemented by a public cloud provider cannot
    be trusted or are not enough for the required use case
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业运行的应用程序非常重视安全性，并且公共云提供商实施的安全策略不能被信任或不足以满足所需的用例。
- en: 'The private clouds offer a certain set of advantages:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 私有云提供了一定的优势：
- en: '**More flexibility:** Since the organization is in control of deciding what
    compute resources will be present inside the private cloud, the organization maintains
    the flexibility to take decisions that will be in their best interests'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更灵活：**由于组织控制决定私有云中将存在哪些计算资源，组织保持了灵活性，可以做出符合其最佳利益的决定'
- en: '**Improved security:** The organization is free to run their cloud infrastructure
    behind a corporate firewall or an internal network with tightened security policies
    that may not be possible when using a public cloud'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高安全性：**组织可以自由地在企业防火墙或内部网络后运行其云基础设施，并实施严格的安全策略，这在使用公共云时可能是不可能的'
- en: For any enterprise that is dealing with security sensitive data and does not
    have the barriers of cost, a private cloud makes a good choice for deploying and
    running applications.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于处理安全敏感数据并且没有成本障碍的企业来说，私有云是部署和运行应用程序的不错选择。
- en: Public clouds
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公共云
- en: In a public cloud, the compute resources are owned and managed by a third-party
    cloud service provider. As an enterprise, the application deployed by you shares
    the same hardware resources with a number of other applications, which may be
    developed by you or some other organization.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在公共云中，计算资源由第三方云服务提供商拥有和管理。作为企业，您部署的应用与其他应用共享相同的硬件资源，这些应用可能是您开发的，也可能是其他组织开发的。
- en: The organization usually resorts to a public cloud when their applications are
    not dealing with some kind of security conscious data that may require strict
    security policies to prevent any kind of incidents, or to run the applications
    that are of common use, such as their email servers.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当组织的应用程序不涉及可能需要严格的安全策略来防止任何事件发生的安全敏感数据，或者运行常用的应用程序，例如他们的电子邮件服务器时，通常会使用公共云。
- en: 'The advantages offered by a public cloud could are vast. Some of them are as
    follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 公共云提供的优势是巨大的。其中一些如下：
- en: '**Lower costs:** Since the infrastructure provided by a public cloud provider
    ...'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低成本：**由于公共云提供商提供的基础设施...'
- en: Hybrid clouds
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合云
- en: The hybrid cloud deployment model provides the best of both worlds of the private
    cloud and public cloud approach. Here, the compute resources from the private
    cloud and the public cloud are pooled, and the applications can move from the
    private cloud to the public cloud as and when required.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 混合云部署模型提供了私有云和公共云方法的最佳结合。在这里，来自私有云和公共云的计算资源被汇集，应用程序可以根据需要从私有云转移到公共云。
- en: The enterprises usually employ this kind of deployment model to run some of
    their less security sensitive applications on the public cloud while running the
    security sensitive applications inside the private cloud.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 企业通常采用这种部署模型，在公共云上运行一些不太安全敏感的应用程序，同时在私有云中运行安全敏感的应用程序。
- en: Another approach that is usually taken is to deploy the application in the private
    cloud first and then when the number of requests increase, the resources from
    the public cloud are pooled in to scale the application up by launching more processes
    inside the public cloud.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通常采取的另一种方法是首先在私有云中部署应用程序，然后当请求数量增加时，从公共云中汇集资源，通过在公共云中启动更多进程来扩展应用程序。
- en: 'The benefits associated with the hybrid cloud approach are as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 混合云方法的好处如下：
- en: '**Control**: The organization can take control over running the security sensitive
    applications inside their private clouds while running the less security sensitive
    application on the public cloud'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制：**组织可以控制在私有云中运行安全敏感的应用程序，同时在公共云上运行不太安全敏感的应用程序'
- en: '**Flexibility**: As and when the need arises, the organizations can pool in
    the resources from the public cloud to handle higher loads'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性：**在需要时，组织可以从公共云中汇集资源来处理更高的负载'
- en: '**Cost effectiveness**: Since the resources from the public cloud are only
    pooled when the demand for the application is high, the organization can save
    upon the costs of the public cloud by using the public cloud resources only when
    required'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本效益：**由于只有在应用程序需求高时才从公共云中汇集资源，组织可以通过仅在需要时使用公共云资源来节省公共云的成本'
- en: For applications that can easily transition from one place to another, or any
    that may require the facility of dynamic scaling up while also keeping security
    in check, the hybrid cloud deployment approach provides a good choice for infrastructure.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可以轻松从一个地方过渡到另一个地方的应用，或者可能需要动态扩展同时保持安全性的基础设施的应用，混合云部署方法为一个不错的选择。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: During our journey through this chapter, we took a look at how we can make decisions
    related to the deployment of enterprise applications. We explored the different
    deployment strategies that are there and how they can affect the way our application
    runs inside the production. Moving on, we learned about six different deployment
    strategies that can be used for the deployment of monolithic and microservices-based
    applications, and saw what advantages and disadvantages they offer.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们对这一章的探索中，我们看了如何做出与企业应用程序部署相关的决策。我们探讨了不同的部署策略以及它们如何影响我们的应用程序在生产环境中的运行方式。接下来，我们了解了可用于部署单片和基于微服务的应用程序的六种不同部署策略，以及它们提供的优缺点。
- en: Once accustomed to the deployment strategies, we took a deep dive into the infrastructure
    choices on which the applications are deployed and got to know about how the move
    to a microservices-based development approach has fueled a transition from traditional
    ...
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦熟悉了部署策略，我们深入研究了应用程序部署的基础设施选择，并了解了从传统...过渡到基于微服务的开发方法如何推动了转变。
- en: Questions
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the benefits of having a blue/green deployment approach?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 采用蓝/绿部署方法有哪些好处？
- en: How does a canary deployment help in testing the applications before the application
    goes into production?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序投入生产之前，金丝雀部署如何帮助测试应用程序？
- en: What are the issues that we may face if we run microservices-based applications
    using the approach of virtual machines?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们使用虚拟机的方法来运行基于微服务的应用程序，可能会面临哪些问题？
- en: How can we handle deployments in the hybrid cloud model?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在混合云模型中处理部署？
