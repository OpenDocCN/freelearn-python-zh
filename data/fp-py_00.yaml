- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Programming languages sometimes fit neatly into tidy categories like imperative
    and functional. Imperative languages might further subdivide into those that are
    procedural and those that include features for object-oriented programming. The
    Python language, however, contains aspects of all of these three language categories.
    Though Python is not a purely functional programming language, we can do a great
    deal of functional programming in Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言有时可以很好地适应整洁的范畴，比如命令式和函数式。命令式语言可能进一步分为过程式和包含面向对象编程特性的语言。然而，Python语言包含了所有这三种语言范畴的特点。虽然Python不是纯粹的函数式编程语言，但我们可以在Python中进行大量的函数式编程。
- en: Most importantly, we can leverage many design patterns and techniques from other
    functional languages and apply them to Python programming. These borrowed concepts
    can lead us to create succinct and elegant programs. Python's generator expressions,
    in particular, avoid the need to create large in-memory data structures, leading
    to programs which may execute more quickly because they use fewer resources.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，我们可以利用许多来自其他函数式语言的设计模式和技术，并将它们应用于Python编程。这些借鉴的概念可以帮助我们创建简洁而优雅的程序。特别是Python的生成器表达式，避免了创建大型内存数据结构的需要，从而导致程序可能更快地执行，因为它们使用更少的资源。
- en: We can't easily create purely functional programs in Python. Python lacks a
    number of features that would be required for this. For example, we don't have
    unlimited recursion, lazy evaluation of all expressions, and an optimizing compiler.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法在Python中轻松创建纯函数式程序。Python缺少许多必要的功能。例如，我们没有无限递归，所有表达式的惰性求值和优化编译器。
- en: Generally, Python emphasizes strict evaluation rules. This means that statements
    are executed in order and expressions are evaluated from left to right. While
    this deviates from functional purity, it allows us to perform manual optimizations
    when writing in Python. We'll take a hybrid approach to functional programming
    using Python's functional features when they can add clarity or simplify the code
    and use ordinary imperative features for optimization.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，Python强调严格的求值规则。这意味着语句按顺序执行，表达式从左到右求值。虽然这偏离了函数式纯度，但它允许我们在编写Python时执行手动优化。我们将采用混合方法来使用Python的函数式特性，当它们可以增加清晰度或简化代码时使用，以及使用普通的命令式特性进行优化。
- en: 'There are several key features of functional programming languages that are
    available in Python. One of the most important is the idea that functions are
    first-class objects. In some languages, functions exist only as a source code
    construct: they don''t exist as proper data structures at runtime. In Python,
    functions can use functions as arguments and return functions as results.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程语言中有几个关键特性在Python中也可以使用。其中最重要的一个是函数作为一等对象的概念。在一些语言中，函数只存在于源代码结构中：它们在运行时并不作为合适的数据结构存在。在Python中，函数可以将函数作为参数使用，并将函数作为结果返回。
- en: Python offers a number of higher-order functions. Functions like `map()`, `filter()`,
    and `functools.reduce()` are widely used in this role. Less obvious functions
    like `sorted()`, `min()`, and `max()` are also higher-order functions; they have
    a default function and, consequently, different syntax from the more common examples.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了许多高阶函数。像`map()`、`filter()`和`functools.reduce()`这样的函数在这方面被广泛使用。像`sorted()`、`min()`和`max()`这样不太明显的函数也是高阶函数；它们有一个默认函数，因此与更常见的例子有不同的语法。
- en: Functional programs often exploit immutable data structures. The emphasis on
    stateless objects permits flexible optimization. Python offers tuples and namedtuples
    as complex but immutable objects. We can leverage these structures to adapt some
    design practices from other functional programming languages.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式程序经常利用不可变数据结构。对无状态对象的强调允许灵活的优化。Python提供了元组和命名元组作为复杂但不可变的对象。我们可以利用这些结构来借鉴其他函数式编程语言的一些设计实践。
- en: Many functional languages emphasize recursion but exploit Tail-Call Optimization
    (TCO). Python tends to limit recursion to a relatively small number of stack frames.
    In many cases, we can think of a recursion as a generator function. We can then
    simply rewrite it to use a `yield from` statement, doing the tail-call optimization
    ourselves.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 许多函数式语言强调递归，但利用尾调用优化（TCO）。Python倾向于将递归限制在相对较小的堆栈帧中。在许多情况下，我们可以将递归视为生成器函数。然后我们可以简单地重写它以使用`yield
    from`语句，自己进行尾调用优化。
- en: We'll look at the core features of functional programming from a Python point
    of view. Our objective is to borrow good ideas from functional programming languages,
    and use these ideas to create expressive and succinct applications in Python.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从Python的角度来看函数式编程的核心特性。我们的目标是借鉴函数式编程语言的好思想，并将这些思想用于在Python中创建富有表现力和简洁的应用程序。
- en: What this book covers
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖的内容
- en: '[Chapter 1](ch01.html "Chapter 1. Introducing Functional Programming"), *Introducing
    Functional Programming*, introduces some of the techniques that characterize functional
    programming. We''ll identify some of the ways to map these features to Python,
    and finally, we''ll also address some ways that the benefits of functional programming
    accrue when we use these design patterns to build Python applications.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。介绍函数式编程") *介绍函数式编程*，介绍了一些特征函数式编程的技术。我们将确定一些将这些特性映射到Python的方法，最后，我们还将讨论一些使用这些设计模式构建Python应用程序时函数式编程的好处。'
- en: '[Chapter 2](ch02.html "Chapter 2. Introducing Some Functional Features"), *Introducing
    Some Functional Features*, will delve into six central features of the functional
    programming paradigm. We''ll look at each in some detail to see how they''re implemented
    in Python. We''ll also point out some features of functional languages that don''t
    apply well to Python. In particular, many functional languages have complex type-matching
    rules required to support compilation and optimization.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第2章，“引入一些函数式特性”，将深入探讨函数式编程范式的六个核心特性。我们将详细研究每个特性在Python中的实现。我们还将指出一些不适用于Python的函数式语言特性。特别是，许多函数式语言具有复杂的类型匹配规则，需要支持编译和优化。
- en: '[Chapter 3](ch03.html "Chapter 3. Functions, Iterators, and Generators"), *Functions,
    Iterators, and Generators*, will show how to leverage immutable Python objects
    and generator expressions, and adapt functional programming concepts to the Python
    language. We''ll look at some of the built-in Python collection and how we can
    leverage them without departing too far from functional programming concepts.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第3章，“函数，迭代器和生成器”，将展示如何利用不可变的Python对象和生成器表达式，并将函数式编程概念应用到Python语言中。我们将研究一些内置的Python集合以及如何在不远离函数式编程概念的情况下利用它们。
- en: '[Chapter 4](ch04.html "Chapter 4. Working with Collections"), *Working with
    Collections*, shows how we can use a number of built-in Python functions to operate
    on collections of data. This section will focus on a number of relatively simple
    functions such as `any()` and `all()`, which will reduce a collection of values
    to a single result.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章，“使用集合”，展示了如何使用许多内置的Python函数来操作数据集合。本节将重点介绍一些相对简单的函数，如`any()`和`all()`，它们将一组值减少为单个结果。
- en: '[Chapter 5](ch05.html "Chapter 5. Higher-order Functions"), *Higher-order Functions*,
    examines the commonly used higher order functions such as `map()` and `filter()`.
    The chapter also includes a number of other functions that are also higher-order
    functions, as well as how we can create our own higher-order functions.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章，“高阶函数”，探讨了常用的高阶函数，如`map()`和`filter()`。本章还包括许多其他高阶函数，以及如何创建我们自己的高阶函数。
- en: '[Chapter 6](ch06.html "Chapter 6. Recursions and Reductions"), *Recursions
    and Reductions*, shows how we can design an algorithm using recursion and then
    optimize it into a high performance `for` loop. We''ll also look at some other
    reductions that are widely used, including the `collections.Counter()` function.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第6章，“递归和归约”，展示了如何使用递归设计算法，然后将其优化为高性能的`for`循环。我们还将研究一些其他广泛使用的归约，包括`collections.Counter()`函数。
- en: '[Chapter 7](ch07.html "Chapter 7. Additional Tuple Techniques"), *Additional
    Tuple Techniques*, shows a number of ways in which we can use immutable tuples
    and namedtuples instead of stateful objects. Immutable objects have a much simpler
    interface: we never have to worry about abusing an attribute and setting an object
    into some inconsistent or invalid state.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第7章，“附加元组技术”，展示了我们可以使用不可变元组和命名元组而不是有状态对象的许多方法。不可变对象有一个更简单的接口：我们永远不必担心滥用属性并将对象设置为一些不一致或无效的状态。
- en: '[Chapter 8](ch08.html "Chapter 8. The Itertools Module"), *The Itertools Module*,
    examines a number of functions in the standard library module. This collection
    of functions simplifies writing programs that deal with collections or generator
    functions.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第8章，“Itertools模块”，研究了标准库模块中的一些函数。这些函数集简化了处理集合或生成器函数的程序编写。
- en: '[Chapter 9](ch09.html "Chapter 9. More Itertools Techniques"), *More Itertools
    Techniques*, covers the combinatoric functions in the itertools module. These
    functions are somewhat less useful. This chapter includes some examples that illustrate
    ill-considered uses of these functions and the consequences of combinatoric explosion.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章，“更多Itertools技术”，涵盖了itertools模块中的组合函数。这些函数的用处相对较少。本章包括一些例子，说明了对这些函数的不慎使用以及组合爆炸的后果。
- en: '[Chapter 10](ch10.html "Chapter 10. The Functools Module"), *The Functools
    Module*, will show how to use some of the functions in this module for functional
    programming. A few of the functions in this module are more appropriate for building
    decorators, and are left for the next chapter. The other functions, however, provide
    several more ways to design and implement function programs.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章，“Functools模块”，将展示如何使用该模块中的一些函数进行函数式编程。该模块中的一些函数更适合构建装饰器，并留待下一章。然而，其他函数提供了设计和实现函数程序的几种更多方式。
- en: '[Chapter 11](ch11.html "Chapter 11. Decorator Design Techniques"), *Decorator
    Design Techniques*, shows how we can look at a decorator as a way to build a composite
    function. While there is considerable flexibility here, there are also some conceptual
    limitations: we''ll look at ways in which overly complex decorators can become
    confusing rather than helpful.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章，“装饰器设计技巧”，展示了如何将装饰器视为构建复合函数的一种方式。虽然这里有相当大的灵活性，但也有一些概念上的限制：我们将探讨过于复杂的装饰器可能变得令人困惑而不是有帮助的方式。
- en: '[Chapter 12](ch12.html "Chapter 12. The Multiprocessing and Threading Modules"),
    *The Multiprocessing and Threading Modules*, points out an important consequence
    of good functional design: we can distribute the processing workload. Using immutable
    objects means that we can''t corrupt an object because of poorly synchronized
    write operations.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第12章，“多进程和线程模块”，指出了良好的函数式设计的一个重要结果：我们可以分配处理工作负载。使用不可变对象意味着我们不能因为同步不良的写操作而破坏对象。
- en: '[Chapter 13](ch13.html "Chapter 13. Conditional Expressions and the Operator
    Module"), *Conditional Expressions and the Operator Module*, will show some ways
    in which we can break out of Python''s strict order of evaluation. There are limitations
    to what we can achieve here. We''ll also look at the operator module and how the
    operator module can lead to some slight clarification of some simple kinds of
    processing.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第13章，“条件表达式和操作员模块”，将展示一些我们可以打破Python严格的求值顺序的方法。在这里我们所能实现的有限制。我们还将看看操作员模块以及操作员模块如何对一些简单的处理进行轻微澄清。
- en: '[Chapter 14](ch14.html "Chapter 14. The PyMonad Library"), *The PyMonad Library*,
    examines some of the features of the PyMonad library. This provides some additional
    functional programming features. This also provides a way to learn more about
    monads. In some functional languages, monads are an important way to force a particular
    order for operations that might get optimized into an undesirable order. Since
    Python already has strict ordering of expressions and statements, the monad feature
    is more instructive than practical.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第14章，“PyMonad库”，审查了PyMonad库的一些特性。这提供了一些额外的函数式编程特性。这也提供了学习更多关于单子的方法。在一些函数式语言中，单子是强制执行特定顺序的重要方式，以防止被优化为不希望的顺序。由于Python已经对表达式和语句有严格的顺序，单子特性更多是具有教学意义而非实际意义。
- en: '[Chapter 15](ch15.html "Chapter 15. A Functional Approach to Web Services"),
    *A Functional Approach to Web Services*, shows how we can think of web services
    as a nested collection of functions that transform a request into a reply. We''ll
    see ways in which we can leverage functional programming concepts for building
    responsive, dynamic web content.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第15章，“Web服务的功能方法”，展示了我们如何将Web服务视为一个嵌套的函数集合，将请求转换为回复。我们将看到如何利用函数式编程概念来构建响应迅速、动态的网络内容。
- en: '[Chapter 16](ch16.html "Chapter 16. Optimizations and Improvements"), *Optimizations
    and Improvements*, includes some additional tips on performance and optimization.
    We''ll emphasize techniques like memoization because they''re easy to implement
    and can—in the right context—yield dramatic performance improvements.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第16章，“优化和改进”，包括一些有关性能和优化的额外提示。我们将强调诸如记忆化之类的技术，因为它们易于实现，并且在正确的情况下可以产生显著的性能改进。
- en: What you need for this book
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您需要为这本书做些什么
- en: This book presumes some familiarity with Python 3 and general concepts of application
    development. We won't look deeply at subtle or complex features of Python; we'll
    avoid much consideration of the internals of the language.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书假设您对Python 3和应用程序开发的一般概念有一定了解。我们不会深入研究Python的微妙或复杂特性；我们将避免对语言内部的考虑。
- en: We'll presume some familiarity with functional programming. Since Python is
    not a functional programming language, we can't dig deeply into functional concepts.
    We'll pick and choose the aspects of functional programming that fit well with
    Python and leverage just those that seem useful.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将假设您对函数式编程有一定了解。由于Python不是一种函数式编程语言，我们无法深入探讨函数式概念。我们将挑选适合Python的函数式编程方面，并仅利用那些看似有用的方面。
- en: Some of the examples use Exploratory Data Analysis (EDA) as a problem domain
    to show the value of functional programming. Some familiarity with basic probability
    and statistics will help with this. There are only a few examples that move into
    more serious data science.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一些示例使用探索性数据分析（EDA）作为问题领域，以展示函数式编程的价值。对基本概率和统计学的一些了解将有助于理解。只有少数示例会涉及更严肃的数据科学。
- en: You'll need to have Python 3.3 or 3.4 installed and running. For more information
    on Python, visit [http://www.python.org/](http://www.python.org/).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装并运行Python 3.3或3.4。有关Python的更多信息，请访问[http://www.python.org/](http://www.python.org/)。
- en: In [Chapter 14](ch14.html "Chapter 14. The PyMonad Library"), *The PyMonad Library*,
    we'll look at installing this additional library. If you have Python 3.4 ,which
    includes pip and Easy Install, this will be very easy. If you have Python 3.3,
    you might have already installed pip or Easy Install or both. Once you have an
    installer, you can add PyMonad. Visit [https://pypi.python.org/pypi/PyMonad/](https://pypi.python.org/pypi/PyMonad/)
    for more details.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在第14章，“PyMonad库”，我们将看看如何安装这个额外的库。如果您有Python 3.4，其中包括pip和Easy Install，这将非常容易。如果您有Python
    3.3，您可能已经安装了pip或Easy Install，或者两者都有。一旦您有了安装程序，您就可以添加PyMonad。访问[https://pypi.python.org/pypi/PyMonad/](https://pypi.python.org/pypi/PyMonad/)了解更多详情。
- en: Who this book is for
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书是为谁准备的
- en: This book is for programmers who want to create succinct, expressive Python
    programs by borrowing techniques and design patterns from functional programming
    languages. Some algorithms can be expressed elegantly in a functional style; we
    can—and should—adapt this to make Python programs more readable and maintainable.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书适用于希望通过借鉴函数式编程语言的技术和设计模式来创建简洁、表达力强的Python程序的程序员。一些算法可以用函数式风格优雅地表达；我们可以—而且应该—调整这一点，使Python程序更易读和易维护。
- en: In some cases, a functional approach to a problem will also lead to extremely
    high performance algorithms. Python makes it too easy to create large intermediate
    data structures, tying up memory and processor time. With functional programming
    design patterns, we can often replace large lists with generator expressions that
    are equally expressive, but take up much less memory and run much more quickly.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，对问题的功能方法也会导致极高性能的算法。Python使得创建大型中间数据结构变得太容易，占用内存和处理器时间。通过函数式编程设计模式，我们经常可以用生成器表达式替换大型列表，这些表达式同样具有表现力，但占用的内存更少，运行速度更快。
- en: Conventions
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，您将找到一些区分不同信息类型的文本样式。以下是一些这些样式的示例，以及它们的含义解释。
- en: 'Code words in text are shown as follows: "We can create a `Pool` object of
    concurrent worker processes, assign tasks to them, and expect the tasks to be
    executed concurrently."'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码单词显示如下：“我们可以创建一个`Pool`对象，将任务分配给并发工作进程，并期望任务并发执行。”
- en: 'A block of code is set as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都是这样写的：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear in a box like this.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要说明会出现在这样的框中。
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Tips and tricks appear like this.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 提示和技巧会出现在这样。
