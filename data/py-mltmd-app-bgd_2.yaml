- en: Chapter 2. Working with Images
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。处理图像
- en: In this chapter, we will learn basic image conversion and manipulation techniques
    using the Python Imaging Library. The chapter ends with an exciting project where
    we create an image processing application.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习使用Python图像处理库的基本图像转换和操作技术。本章以一个令人兴奋的项目结束，我们将创建一个图像处理应用程序。
- en: 'In this chapter, we shall:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Learn various image I/O operations for reading and writing images using the
    **Python Imaging Library** (PIL)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习使用**Python图像处理库**（PIL）进行各种图像I/O操作以读取和写入图像
- en: With the help of several examples and code snippets, perform some basic manipulations
    on the image, such as resizing, rotating/ flipping, cropping, pasting, and so
    on.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过几个示例和代码片段的帮助，对图像进行一些基本操作，如调整大小、旋转/翻转、裁剪、粘贴等。
- en: Write an image-processing application by making use of PIL
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用PIL编写图像处理应用程序
- en: Use the QT library as a frontend (GUI) for this application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用QT库作为此应用程序的前端（GUI）
- en: So let's get on with it!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始吧！
- en: Installation prerequisites
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装前提条件
- en: Before we jump in to the main chapter, it is necessary to install the following
    packages.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们跳入主要内容之前，安装以下包是必要的。
- en: Python
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python
- en: 'In this book we will use Python Version 2.6, or to be more specific, Version
    2.6.4\. It can be downloaded from the following location: [http://python.org/download/releases/](http://python.org/download/releases/)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用Python版本2.6，或者更具体地说，版本2.6.4。它可以从以下位置下载：[http://python.org/download/releases/](http://python.org/download/releases/)
- en: Windows platform
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows平台
- en: For Windows, just download and install the platform-specific binary distribution
    of Python 2.6.4.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows用户，只需下载并安装Python 2.6.4的平台特定二进制发行版。
- en: Other platforms
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他平台
- en: 'For other platforms, such as Linux, Python is probably already installed on
    your machine. If the installed version is not 2.6, build and install it from the
    source distribution. If you are using a package manager on a Linux system, search
    for Python 2.6\. It is likely that you will find the Python distribution there.
    Then, for instance, Ubuntu users can install Python from the command prompt as:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他平台，例如Linux，Python可能已经安装在了您的机器上。如果安装的版本不是2.6，请从源代码发行版构建和安装它。如果您在Linux系统上使用包管理器，请搜索Python
    2.6。您很可能在那里找到Python发行版。然后，例如，Ubuntu用户可以从命令提示符安装Python，如下所示：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that for this, you must have administrative permission on the machine on
    which you are installing Python.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为此，您必须在安装Python的机器上拥有管理员权限。
- en: Python Imaging Library (PIL)
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python图像处理库（PIL）
- en: We will learn image-processing techniques by making extensive use of the Python
    Imaging Library (PIL) throughout this chapter. As mentioned in [Chapter 1](ch01.html
    "Chapter 1. Python and Multimedia"), PIL is an open source library. You can download
    it from [http://www.pythonware.com/products/pil/](http://www.pythonware.com/products/pil/).
    Install the PIL Version 1.1.6 or later.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过广泛使用Python图像处理库（PIL）来学习图像处理技术。正如[第1章](ch01.html "第1章。Python和多媒体")中提到的，PIL是一个开源库。您可以从[http://www.pythonware.com/products/pil/](http://www.pythonware.com/products/pil/)下载它。请安装PIL版本1.1.6或更高版本。
- en: Windows platform
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows平台
- en: For Windows users, installation is straightforward use the binary distribution
    PIL 1.1.6 for Python 2.6.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows用户，安装很简单，使用Python 2.6的二进制发行版PIL 1.1.6。
- en: Other platforms
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他平台
- en: For other platforms, install PIL 1.1.6 from the source. Carefully review the
    README file in the source distribution for the platform-specific instructions.
    Libraries listed in the following table are required to be installed before installing
    PIL from the source. For some platforms like Linux, the libraries provided in
    the OS should work fine. However, if those do not work, install a pre-built "libraryName-devel"
    version of the library. For example, for JPEG support, the name will contain "jpeg-devel-",
    and something similar for the others. This is generally applicable to rpm-based
    distributions. For Linux flavors like Ubuntu, you can use the following command
    in a shell window.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他平台，从源代码安装PIL 1.1.6。仔细阅读源代码发行版中的README文件，以获取特定平台的说明。以下表格中列出的库在安装PIL之前必须安装。对于某些平台，如Linux，操作系统提供的库应该可以正常工作。但是，如果这些库不起作用，请安装预构建的"libraryName-devel"版本的库。例如，对于JPEG支持，名称将包含"jpeg-devel-"，其他类似。这通常适用于基于rpm的发行版。对于像Ubuntu这样的Linux版本，您可以在shell窗口中使用以下命令。
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: However, you should make sure that this installs Version 1.1.6 or later. Check
    PIL documentation for further platform-specific instructions. For Mac OSX, see
    if you can use `fink` to install these libraries. See [http://www.finkproject.org/](http://www.finkproject.org/)
    for more details. You can also check the website [http://pythonmac.org](http://pythonmac.org)
    or Darwin ports website [http://darwinports.com/](http://darwinports.com/) to
    see if a binary package installer is available. If such a pre-built version is
    not available for any library, install it from the source.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您应该确保安装的版本为 1.1.6 或更高版本。检查 PIL 文档以获取更多特定平台的安装说明。对于 Mac OSX，查看是否可以使用 `fink`
    安装这些库。有关更多详细信息，请参阅 [http://www.finkproject.org/](http://www.finkproject.org/)。您还可以检查网站
    [http://pythonmac.org](http://pythonmac.org) 或 Darwin ports 网站 [http://darwinports.com/](http://darwinports.com/)，以查看是否提供二进制包安装程序。如果任何库都没有提供预编译版本，则从源代码安装。
- en: 'The PIL prerequisites for installing PIL from source are listed in the following
    table:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从源代码安装 PIL 的 PIL 预先条件列在下面的表格中：
- en: '| Library | URL | Version | Installation options(a) or (b) |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 库 | URL | 版本 | 安装选项(a) 或 (b) |'
- en: '| --- | --- | --- | --- |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `libjpeg`(JPEG support) | [http://www.ijg.org/files](http://www.ijg.org/files)
    | 7 or 6a or 6b | (a) Pre-built version. For example:`jpeg-devel-7`Check if you
    can do:`sudo apt-install libjpeg` (works on some flavors of Linux)(b) Source tarball.
    For example: `jpegsrc.v7.tar.gz` |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `libjpeg`(JPEG 支持) | [http://www.ijg.org/files](http://www.ijg.org/files)
    | 7 或 6a 或 6b | (a) 预编译版本。例如：`jpeg-devel-7` 检查是否可以执行：`sudo apt-install libjpeg`（在某些
    Linux 发行版上有效）(b) 源代码包。例如：`jpegsrc.v7.tar.gz` |'
- en: '| `zib`(PNG support) | [http://www.gzip.org/zlib/](http://www.gzip.org/zlib/)
    | 1.2.3 or later | (a) Pre-built version. For example:`zlib-devel-1.2.3.`.(b)
    Install from the source. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `zlib`(PNG 支持) | [http://www.gzip.org/zlib/](http://www.gzip.org/zlib/) |
    1.2.3 或更高版本 | (a) 预编译版本。例如：`zlib-devel-1.2.3`。(b) 从源代码安装。 |'
- en: '| `freetype2`(OpenType /TrueType support) | [http://www.freetype.org](http://www.freetype.org)
    | 2.1.3 or later | (a) Pre-built version. For example:`freetype2-devel-2.1.3.`.(b)
    Install from the source. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `freetype2`(OpenType/TrueType 支持) | [http://www.freetype.org](http://www.freetype.org)
    | 2.1.3 或更高版本 | (a) 预编译版本。例如：`freetype2-devel-2.1.3`。(b) 从源代码安装。 |'
- en: PyQt4
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PyQt4
- en: 'This package provides Python bindings for Qt libraries. We will use PyQt4 to
    generate GUI for the image-processing application that we will develop later in
    this chapter. The GPL version is available at: [http://www.riverbankcomputing.co.uk/software/pyqt/download](http://www.riverbankcomputing.co.uk/software/pyqt/download).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此包为 Qt 库提供 Python 绑定。我们将使用 PyQt4 为本章后面将要开发的图像处理应用程序生成 GUI。GPL 版本可在：[http://www.riverbankcomputing.co.uk/software/pyqt/download](http://www.riverbankcomputing.co.uk/software/pyqt/download)
    获取。
- en: Windows platform
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows 平台
- en: Download and install the binary distribution pertaining to Python 2.6\. For
    example, the executable file's name could be 'PyQt-Py2.6-gpl-4.6.2-2.exe'. Other
    than Python, it includes everything needed for GUI development using PyQt.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并安装与 Python 2.6 相关的二进制发行版。例如，可执行文件的名称可能是 'PyQt-Py2.6-gpl-4.6.2-2.exe'。除了 Python
    之外，它还包括使用 PyQt 进行 GUI 开发所需的所有内容。
- en: Other platforms
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他平台
- en: 'Before building PyQt, you must install SIP Python binding generator. For further
    details, refer to the SIP homepage: [http://www.riverbankcomputing.com/software/sip/](http://www.riverbankcomputing.com/software/sip/).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建 PyQt 之前，您必须安装 SIP Python 绑定生成器。有关更多详细信息，请参阅 SIP 主页：[http://www.riverbankcomputing.com/software/sip/](http://www.riverbankcomputing.com/software/sip/)。
- en: After installing SIP, download and install PyQt 4.6.2 or later, from the source
    tarball. For Linux/Unix source, the filename will start with `PyQt-x11-gpl-.`.
    and for Mac OS X, `PyQt-mac-gpl-..`. Linux users should also check if PyQt4 distribution
    is already available through the package manager.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 SIP 后，从源代码包下载并安装 PyQt 4.6.2 或更高版本。对于 Linux/Unix 源代码，文件名将以 `PyQt-x11-gpl-`
    开头，而对于 Mac OS X，则以 `PyQt-mac-gpl-..` 开头。Linux 用户还应检查 PyQt4 是否已通过包管理器提供。
- en: Summary of installation prerequisites
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装先决条件摘要
- en: '| Package | Download location | Version | Windows platform | Linux/Unix/OS
    X platforms |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 包 | 下载位置 | 版本 | Windows 平台 | Linux/Unix/OS X 平台 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Python | [http://python.org/download/releases/](http://python.org/download/releases/)
    | 2.6.4 (or any 2.6.x) | Install using binary distribution | (a) Install from
    binary; Also install additional developer packages (For example, with `python-devel`
    in the package name in the rpm systems) OR(b) Build and install from the source
    tarball.(c) MAC users can also check websites such as [http://darwinports.com/](http://darwinports.com/)
    or [http://pythonmac.org/](http://pythonmac.org/). |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| Python | [http://python.org/download/releases/](http://python.org/download/releases/)
    | 2.6.4（或任何2.6.x版本） | 使用二进制发行版安装 | (a) 从二进制安装；还安装额外的开发包（例如，在rpm系统中，包名中包含`python-devel`）或者(b)
    从源tarball构建和安装。(c) MAC用户也可以检查类似[http://darwinports.com/](http://darwinports.com/)或[http://pythonmac.org/](http://pythonmac.org/)的网站。|'
- en: '| PIL | [www.pythonware.com/products/pil/](http://www.pythonware.com/products/pil/)
    | 1.1.6 or later | Install PIL 1.1.6 (binary) for Python 2.6 | (a) Install prerequisites
    if needed. Refer to Table #1 and the README file in PIL source distribution.(b)
    Install PIL from source.(c) MAC users can also check websites like [http://darwinports.com/](http://darwinports.com/)
    or [http://pythonmac.org/](http://pythonmac.org/). |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| PIL | [www.pythonware.com/products/pil/](http://www.pythonware.com/products/pil/)
    | 1.1.6或更高版本 | 为Python 2.6安装PIL 1.1.6（二进制版） | (a) 如有必要，安装先决条件。参考表#1和PIL源代码包中的README文件。(b)
    从源代码安装PIL。(c) MAC用户也可以检查类似[http://darwinports.com/](http://darwinports.com/)或[http://pythonmac.org/](http://pythonmac.org/)的网站。|'
- en: '| PyQt4 | [http://www.riverbankcomputing.co.uk/software/pyqt/download](http://www.riverbankcomputing.co.uk/software/pyqt/download)
    | 4.6.2 or later | Install using binary pertaining to Python 2.6 | (a) First install
    SIP 4.9 or later.(b) Then install PyQt4. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| PyQt4 | [http://www.riverbankcomputing.co.uk/software/pyqt/download](http://www.riverbankcomputing.co.uk/software/pyqt/download)
    | 4.6.2或更高版本 | 使用针对Python 2.6的二进制安装 | (a) 首先安装SIP 4.9或更高版本。(b) 然后安装PyQt4。|'
- en: Reading and writing images
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取和写入图像
- en: To manipulate an existing image, we must open it first for editing and we also
    require the ability to save the image in a suitable file format after making changes.
    The `Image` module in PIL provides methods to read and write images in the specified
    image file format. It supports a wide range of file formats.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要操作现有图片，我们必须首先打开它进行编辑，并在更改后需要能够以合适的文件格式保存图片。PIL中的`Image`模块提供了在指定图像文件格式中读取和写入图像的方法。它支持广泛的文件格式。
- en: To open an image, use `Image.open` method. Start the Python interpreter and
    write the following code. You should specify an appropriate path on your system
    as an argument to the `Image.open` method.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开图像，请使用`Image.open`方法。启动Python解释器并编写以下代码。您应该在系统上指定一个适当的路径作为`Image.open`方法的参数。
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will open an image file by the name `image1.jpg`. If the file can't be
    opened, an `IOError` will be raised, otherwise, it returns an instance of class
    `Image`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开名为`image1.jpg`的图像文件。如果文件无法打开，将引发`IOError`，否则，它将返回`Image`类的一个实例。
- en: For saving image, use the `save` method of the `Image` class. Make sure you
    replace the following string with an appropriate `/path/to/your/image/file`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存图片，请使用`Image`类的`save`方法。确保您将以下字符串替换为适当的`/path/to/your/image/file`。
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can view the image just saved, using the `show` method of `Image` class.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`Image`类的`show`方法查看刚刚保存的图片。
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, it is essentially the same image as the input image, because we did not
    make any changes to the output image.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，它与输入图片基本相同，因为我们没有对输出图片进行任何更改。
- en: Time for action - image file converter
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践时间 - 图像文件转换器
- en: With this basic information, let's build a simple image file converter. This
    utility will batch-process image files and save them in a user-specified file
    format.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在获得这些基本信息后，让我们构建一个简单的图像文件转换器。此实用程序将批量处理图像文件，并以用户指定的文件格式保存它们。
- en: 'To get started, download the file `ImageFileConverter.py` from the Packt website,
    [www.packtpub.com](http://www.packtpub.com). This file can be run from the command
    line as:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，请从Packt网站下载文件`ImageFileConverter.py`，[www.packtpub.com](http://www.packtpub.com)。此文件可以从命令行运行，如下所示：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, `[arguments]` are:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`[arguments]`包括：
- en: '`--input_dir:` The directory path where the image files are located.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--input_dir:` 存放图像文件的目录路径。'
- en: '`--input_format:` The format of the image files to be converted. For example,
    `jpg`.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--input_format:` 要转换的图像文件格式。例如，`jpg`。'
- en: '`--output_dir:` The location where you want to save the converted images.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--output_dir:` 您希望保存转换后图片的位置。'
- en: '`--output_format:` The output image format. For example, `jpg, png, bmp`, and
    so on.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--output_format:` 输出图片格式。例如，`jpg, png, bmp`等。'
- en: The following screenshot shows the image conversion utility in action on Windows
    XP, that is, running image converter from the command line.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在 Windows XP 上运行的图像转换实用工具的效果，即从命令行运行图像转换器。
- en: Here, it will batch-process all the `.jpg` images within `C:\PythonTest\images`
    and save them in `png` format in the directory `C:\PythonTest\images\OUTPUT_IMAGES`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，它将批量处理 `C:\PythonTest\images` 目录下所有的 `.jpg` 图像，并将它们以 `png` 格式保存在 `C:\PythonTest\images\OUTPUT_IMAGES`
    目录中。
- en: '![Time for action - image file converter](img/0165_2_1.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![执行动作 - 图像文件转换器](img/0165_2_1.jpg)'
- en: The file defines `class ImageConverter` . We will discuss the most important
    methods in this class.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件定义了 `class ImageConverter`。我们将讨论这个类中最重要的方法。
- en: '`def processArgs:` This method processes all the command-line arguments listed
    earlier. It makes use of Python''s built-in module `getopts` to process these
    arguments. Readers are advised to review the code in the file `ImageConverter.py`
    in the code bundle of this book for further details on how these arguments are
    processed.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`def processArgs:` 这个方法处理前面列出的所有命令行参数。它使用 Python 的内置模块 `getopts` 来处理这些参数。建议读者查看本书代码包中
    `ImageConverter.py` 文件中的代码，以获取有关如何处理这些参数的更多详细信息。'
- en: '`def convertImage:` This is the workhorse method of the image-conversion utility.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`def convertImage:` 这是图像转换实用工具的工作马方法。'
- en: '[PRE6]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now let's review the preceding code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来回顾一下前面的代码。
- en: Our first task is to get a list of all the image files to be saved in a different
    format. This is achieved by using `glob` module in Python. Line 4 in the code
    snippet finds all the file path names that match the pattern specified by the
    local variable `fileType`. On line 5, we check whether the image file in `fileList`
    exists. This operation can be efficiently performed over the whole list using
    the built-in `filter` functionality in Python.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的首要任务是获取所有要保存为不同格式的图像文件的列表。这是通过使用 Python 的 `glob` 模块来实现的。代码片段中的第 4 行找到所有与局部变量
    `fileType` 指定的模式匹配的文件路径名称。在第 5 行，我们检查 `fileList` 中的图像文件是否存在。这个操作可以使用 Python 内置的
    `filter` 功能在整个列表上高效地执行。
- en: The code block between lines 7 to 14 ensures that one or more images exist.
    If so, it will record the time before beginning the image conversion.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第 7 行到 14 行之间的代码块确保存在一个或多个图像。如果存在，它将记录开始图像转换之前的时间。
- en: The next code block (lines 17-23) carries out the image file conversion. On
    line 18, we use `Image.open` to open the image file. Line 18 creates an `Image`
    object. Then the appropriate output path is derived and finally the output image
    is saved using the `save` method of the `Image` module.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个代码块（第 17-23 行）执行图像文件转换。在第 18 行，我们使用 `Image.open` 打开图像文件。第 18 行创建了一个 `Image`
    对象。然后推导出适当的输出路径，最后使用 `Image` 模块的 `save` 方法保存输出图像。
- en: What just happened?
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: In this simple example, we learned how to open and save image files in a specified
    image format. We accomplished this by writing an image file converter that batch-processes
    a specified image file. We used PIL's `Image.open` and `Image.save` functionality
    along with Python's built-in modules such as `glob` and `filter`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的例子中，我们学习了如何以指定的图像格式打开和保存图像文件。我们通过编写一个图像文件转换器来实现这一点，该转换器批量处理指定的图像文件。我们使用了
    PIL 的 `Image.open` 和 `Image.save` 功能以及 Python 的内置模块，如 `glob` 和 `filter`。
- en: Now we will discuss other key aspects related to the image reading and writing.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将讨论与图像读取和写入相关的其他关键方面。
- en: Creating an image from scratch
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从头创建图像
- en: 'So far we have seen how to open an existing image. What if we want to create
    our own image? As an example, it you want to create fancy text as an image, the
    functionality that we are going to discuss now comes in handy. Later in this book,
    we will learn how to use such an image containing some text to embed into another
    image. The basic syntax for creating a new image is:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何打开现有的图像。如果我们想创建自己的图像怎么办？例如，如果你想创建作为图像的精美文本，我们现在要讨论的功能就派上用场了。在本书的后面部分，我们将学习如何使用包含一些文本的此类图像嵌入到另一个图像中。创建新图像的基本语法是：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Where, `new` is the built-in method of class `Image. Image.new` takes three
    arguments, namely, `mode, size`, and `color`. The `mode` argument is a string
    that gives information about the number and names of image bands. Following are
    the most common values for mode argument: `L` (gray scale) and `RGB` (true color).
    The `size` is a `tuple` specifying dimensions of the image in pixels, whereas,
    `color` is an optional argument. It can be assigned an RGB value (a `3-tuple)`
    if it''s a multi-band image. If it is not specified, the image is filled with
    black color.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`new`是`Image`类的一个内置方法。`Image.new`接受三个参数，即`mode, size`和`color`。`mode`参数是一个字符串，它提供了有关图像波段数量和名称的信息。以下是最常见的`mode`参数值：`L`（灰度）和`RGB`（真彩色）。`size`是一个指定图像像素尺寸的`tuple`，而`color`是一个可选参数。如果它是一个多波段图像，可以分配一个RGB值（一个`3-tuple`）。如果没有指定，图像将填充为黑色。
- en: Time for action - creating a new image containing some text
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 创建包含一些文本的新图像
- en: As already stated, it is often useful to generate an image containing only some
    text or a common shape. Such an image can then be pasted onto another image at
    a desired angle and location. We will now create an image with text that reads,
    "Not really a fancy text!"
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，生成只包含一些文本或常见形状的图像通常很有用。这样的图像可以粘贴到另一个图像上，并定位在所需的角度和位置。现在我们将创建一个包含以下文本的图像：“这并不是一个花哨的文本！”
- en: 'Write the following code in a Python source file:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个Python源文件中编写以下代码：
- en: '[PRE8]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let's analyze the code line by line. The first two lines import the necessary
    modules from PIL. The variable `txt` is the text we want to include in the image.
    On line 7, the new image is created using `Image.new`. Here we specify the `mode`
    and `size` arguments. The optional `color` argument is specified as a `tuple`
    with RGB values pertaining to the "dark green" color.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们逐行分析代码。前两行从PIL中导入必要的模块。变量`txt`是我们想要包含在图像中的文本。在第7行，使用`Image.new`创建新的图像。这里我们指定了`mode`和`size`参数。可选的`color`参数指定为一个包含RGB值的`tuple`，与“深绿色”颜色相关。
- en: The `ImageDraw` module in PIL provides graphics support for an `Image` object.
    The function `ImageDraw.Draw` takes an image object as an argument to create a
    `Draw` instance. In output code, it is called `imgDrawer`, as used on line 7\.
    This `Draw` instance enables drawing various things in the given image.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PIL中的`ImageDraw`模块为`Image`对象提供图形支持。函数`ImageDraw.Draw`接受一个图像对象作为参数以创建一个`Draw`实例。在输出代码中，它被称为`imgDrawer`，如第7行所示。这个`Draw`实例允许在给定的图像中绘制各种东西。
- en: On line 8, we call the text method of the Draw instance and supply position
    (a `tuple)` and the text (stored in the string `txt)` as arguments.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第8行，我们调用Draw实例的文本方法，并提供了位置（一个`tuple`）和文本（存储在字符串`txt`中）作为参数。
- en: Finally, the image can be viewed using `img.show()` call. You can optionally
    save the image using `Image.save` method. The following screenshot shows the resultant
    image.![Time for action - creating a new image containing some text](img/0165_2_2.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，可以使用`img.show()`调用查看图像。你可以选择使用`Image.save`方法保存图像。以下截图显示了结果图像。![行动时间 - 创建包含一些文本的新图像](img/0165_2_2.jpg)
- en: What just happened?
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We just learned how to create an image from scratch. An empty image was created
    using the `Image.new` method. Then, we used the `ImageDraw` module in PIL to add
    text to this image.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚学习了如何从头创建图像。使用`Image.new`方法创建了一个空图像。然后，我们使用PIL中的`ImageDraw`模块向该图像添加文本。
- en: Reading images from archive
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从归档中读取图像
- en: If the image is part of an archived container, for example, a TAR archive, we
    can use the `TarIO` module in PIL to open it and then call `Image.open` to pass
    this `TarIO` instance as an argument.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果图像是归档容器的一部分，例如，一个TAR归档，我们可以使用PIL中的`TarIO`模块来打开它，然后调用`Image.open`将这个`TarIO`实例作为参数传递。
- en: Time for action - reading images from archives
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 从归档中读取图像
- en: Suppose there is an archive file `images.tar` containing image file `image1.jpg`.
    The following code snippet shows how to read `image1.jpg` from the tarball.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个包含图像文件`image1.jpg`的归档文件`images.tar`。以下代码片段显示了如何从归档中读取`image1.jpg`。
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: What just happened?
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We learned how to read an image located in an archived container.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何从归档容器中读取图像。
- en: Have a go hero add new features to the image file converter
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄尝试者向图像文件转换器添加新功能
- en: 'Modify the image conversion code so that it supports the following new functionality,
    which:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 修改图像转换代码，使其支持以下新功能，即：
- en: Takes a ZIP file containing images as input
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以包含图像的ZIP文件作为输入
- en: Creates a TAR archive of the converted images
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建转换图像的TAR归档
- en: Basic image manipulations
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本图像操作
- en: Now that we know how to open and save images, let's learn some basic techniques
    to manipulate images. PIL supports a variety of geometric manipulation operations,
    such as resizing an image, rotating it by an angle, flipping it top to bottom
    or left to right, and so on. It also facilitates operations such as cropping,
    cutting and pasting pieces of images, and so on.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何打开和保存图像，让我们学习一些基本的图像操作技术。PIL 支持各种几何操作，例如调整图像大小、旋转角度、上下翻转或左右翻转，等等。它还便于执行裁剪、剪切和粘贴图像片段等操作。
- en: Resizing
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整大小
- en: Changing the dimensions of an image is one of the most frequently used image
    manipulation operations. The image resizing is accomplished using `Image.resize`
    in PIL. The following line of code explains how it is achieved.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 改变图像的尺寸是使用最频繁的图像操作之一。使用 PIL 中的 `Image.resize` 实现图像调整大小。以下代码行解释了它是如何实现的。
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, `img` is an image (an instance of class `Image)` and the result of resizing
    operation is stored in `foo` (another instance of class `Image)`. The `size` argument
    is a `tuple` (width, `height)`. Note that the `size` is specified in pixels. Thus,
    resizing the image means modifying the number of pixels in the image. This is
    also known as **image re-sampling.** The `Image.resize` method also takes `filter`
    as an optional argument. A `filter` is an interpolation algorithm used while re-sampling
    the given image. It handles deletion or addition of pixels during re-sampling,
    when the resize operation is intended to make image smaller or larger in size
    respectively. There are four filters available. The resize filters in the increasing
    order of quality are `NEAREST, BILINEAR, BICUBIC`, and `ANTIALIAS`. The default
    filter option is `NEAREST`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`img` 是一个图像（`Image` 类的实例）和调整大小操作的结果存储在 `foo`（另一个 `Image` 类的实例）中。`size` 参数是一个
    `tuple`（宽度，高度）。请注意，`size` 是以像素为单位的。因此，调整图像大小意味着修改图像中的像素数量。这也被称为 **图像重采样**。`Image.resize`
    方法还接受 `filter` 作为可选参数。`filter` 是在重采样给定图像时使用的插值算法。它处理重采样过程中像素的删除或添加，当调整大小操作旨在使图像变大或变小时分别处理。有四种滤波器可用。按质量递增的顺序，调整大小滤波器是
    `NEAREST, BILINEAR, BICUBIC` 和 `ANTIALIAS`。默认滤波器选项是 `NEAREST`。
- en: Time for action - resizing
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 调整大小
- en: Let's now resize images by modifying their pixel dimensions and applying various
    filters for re-sampling.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过修改像素尺寸并应用各种滤波器进行重采样来调整图像大小。
- en: Download the file `ImageResizeExample.bmp` from the Packt website. We will use
    this as the reference file to create scaled images. The original dimensions of
    `ImageResizeExample.bmp` are `200 x 212` pixels.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Packt 网站下载文件 `ImageResizeExample.bmp`。我们将使用此作为参考文件来创建缩放图像。`ImageResizeExample.bmp`
    的原始尺寸是 `200 x 212` 像素。
- en: Write the following code in a file or in Python interpreter. Replace the `inPath`
    and `outPath` strings with the appropriate image path on your machine.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码写入文件或 Python 解释器中。将 `inPath` 和 `outPath` 字符串替换为机器上适当的图像路径。
- en: '[PRE11]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The image specified by the `inPath` will be resized and saved as the image specified
    by the `outPath`. Line 6 in the code snippet does the resizing job and finally
    we save the new image on line 9\. You can see how the resized image looks by calling
    `foo.show()`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由 `inPath` 指定的图像将被调整大小并保存为 `outPath` 指定的图像。代码片段中的第 6 行执行调整大小任务，并在第 9 行最终保存新图像。你可以通过调用
    `foo.show()` 来查看调整大小后的图像外观。
- en: Let's now specify the `filter` argument. In the following code, on line 14,
    the `filterOpt` argument is specified in the `resize` method. The valid `filter`
    options are specified as values in the dictionary `filterDict`. The keys of `filterDict`
    are used as the filenames of the output images. The four images thus obtained
    are compared in the next illustration. You can clearly notice the difference between
    the `ANTIALIAS` image and the others (particularly, look at the flower petals
    in these images). When the processing time is not an issue, choose the `ANTIALIAS`
    filter option as it gives the best quality image.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们指定 `filter` 参数。在以下代码的第 14 行，`filterOpt` 参数在 `resize` 方法中指定。有效的 `filter`
    选项作为字典 `filterDict` 中的值指定。`filterDict` 的键用作输出图像的文件名。下一幅插图将比较这四个图像。你可以清楚地注意到 `ANTIALIAS`
    图像与其他图像之间的区别（尤其是，看看这些图像中的花瓣）。当处理时间不是问题时，选择 `ANTIALIAS` 滤波器选项，因为它可以提供最佳质量的图像。
- en: '[PRE12]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The resized images with different filter options appear as follows. Clockwise
    from left, Image.NEAREST, Image.BILENEAR, Image.BICUBIC, and Image.ANTIALIAS:![Time
    for action - resizing](img/0165_2_3.jpg)![Time for action - resizing](img/0165_2_4.jpg)![Time
    for action - resizing](img/0165_2_5.jpg)![Time for action - resizing](img/0165_2_6.jpg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不同过滤器选项调整大小的图像如下所示。从左到右顺时针，Image.NEAREST、Image.BILINEAR、Image.BICUBIC 和 Image.ANTIALIAS:![执行动作
    - 调整大小](img/0165_2_3.jpg)![执行动作 - 调整大小](img/0165_2_4.jpg)![执行动作 - 调整大小](img/0165_2_5.jpg)![执行动作
    - 调整大小](img/0165_2_6.jpg)
- en: The `resize` functionality illustrated here, however, doesn't preserve the aspect
    ratio of the resulting image. The image will appear distorted if one dimension
    is stretched more or stretched less in comparison with the other dimension. PIL's
    `Image` module provides another built-in method to fix this. It will override
    the larger of the two dimensions, such that the aspect ratio of the image is maintained.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，这里展示的 `resize` 功能不能保持结果图像的宽高比。如果与另一个维度相比，一个维度被拉伸更多或更少，图像将出现扭曲。PIL 的 `Image`
    模块提供了一个内置的另一种方法来解决这个问题。它将覆盖两个维度中较大的一个，这样就可以保持图像的宽高比。
- en: '[PRE13]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This code will override the maximum pixel dimension value (width in this case)
    specified by the programmer and replace it with a value that maintains the aspect
    ratio of the image. In this case, we have an image with pixel dimensions (47,
    50). The resultant images are compared in the following illustration.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此代码将覆盖程序员指定的最大像素维度值（在本例中为宽度）并替换为保持图像宽高比的价值。在这种情况下，我们有一个像素维度为（47，50）的图像。以下插图显示了结果图像的比较。
- en: It shows the comparison of output images for methods Image.thumbnail and Image.resize.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这显示了使用 Image.thumbnail 和 Image.resize 方法输出图像的比较。
- en: '![Time for action - resizing](img/0165_2_7.jpg)![Time for action - resizing](img/0165_2_8.jpg)'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![执行动作 - 调整大小](img/0165_2_7.jpg)![执行动作 - 调整大小](img/0165_2_8.jpg)'
- en: What just happened?
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We just learned how image resizing is done using PIL's `Image` module, by writing
    a few lines of code. We also learned different types of filters used in image
    resizing (re-sampling). And finally, we also saw how to resize an image while
    still keeping the aspect ratio intact (that is, without distortion), using the
    `Image.thumbnail` method.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚学习了如何使用 PIL 的 `Image` 模块通过编写几行代码来实现图像缩放。我们还学习了在图像缩放（重采样）中使用的不同类型的过滤器。最后，我们还看到了如何使用
    `Image.thumbnail` 方法在不扭曲的情况下调整图像大小（即，保持宽高比不变）。
- en: Rotating
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旋转
- en: 'Like image resizing, rotating an image about its center is another commonly
    performed transformation. For example, in a composite image, one may need to rotate
    the text by certain degrees before embedding it in another image. For such needs,
    there are methods such as `rotate` and `transpose` available in PIL''s `Image`
    module. The basic syntax to rotate an image using `Image.rotate` is as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 与图像缩放类似，围绕图像中心旋转图像是另一种常见的变换。例如，在一个合成图像中，在将其嵌入到另一个图像之前，可能需要将文本旋转一定角度。对于这种需求，PIL
    的 `Image` 模块中提供了 `rotate` 和 `transpose` 等方法。使用 `Image.rotate` 旋转图像的基本语法如下：
- en: '[PRE14]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Where, the `angle` is provided in degrees and `filter`, the optional argument,
    is the image-re-sampling filter. The valid `filter` value can be `NEAREST, BILINEAR`,
    or `BICUBIC`. You can rotate the image using `Image.transpose` only for 90-, 180-,
    and 270-degree rotation angles.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`angle` 以度为单位提供，`filter` 是可选参数，是图像重采样过滤器。有效的 `filter` 值可以是 `NEAREST`、`BILINEAR`
    或 `BICUBIC`。您可以使用 `Image.transpose` 仅在 90 度、180 度和 270 度旋转角度下旋转图像。
- en: Time for action - rotating
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行动作 - 旋转
- en: Download the file `Rotate.png` from the Packt website. Alternatively, you can
    use any supported image file of your choice.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Packt 网站下载文件 `Rotate.png`。或者，您可以使用任何您选择的受支持图像文件。
- en: Write the following code in Python interpreter or in a Python file. As always,
    specify the appropriate path strings for `inPath` and `outPath` variables.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Python 解释器或 Python 文件中编写以下代码。像往常一样，为 `inPath` 和 `outPath` 变量指定适当的路径字符串。
- en: '[PRE15]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Upon running this code, the output image, rotated by 45 degrees, is saved to
    the `outPath`. The filter option `Image.BICUBIC` ensures highest quality. The
    next illustration shows the original and the images rotated by 45 and 180 degrees
    respectively the original and rotated images.![Time for action - rotating](img/0165_2_9.jpg)![Time
    for action - rotating](img/0165_2_10.jpg)![Time for action - rotating](img/0165_2_11.jpg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此代码后，旋转45度的输出图像被保存到`outPath`。过滤器选项`Image.BICUBIC`确保了最高的质量。下一张插图显示了原始图像以及旋转45度和180度的图像。![执行动作
    - 旋转](img/0165_2_9.jpg)![执行动作 - 旋转](img/0165_2_10.jpg)![执行动作 - 旋转](img/0165_2_11.jpg)
- en: There is another way to accomplish rotation for certain angles by using the
    `Image.transpose` functionality. The following code achieves a 270-degree rotation.
    Other valid options for rotation are `Image.ROTATE_90` and `Image.ROTATE_180`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Image.transpose`功能还可以通过另一种方式实现特定角度的旋转。以下代码实现了270度的旋转。其他有效的旋转选项还有`Image.ROTATE_90`和`Image.ROTATE_180`。
- en: '[PRE16]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: What just happened?
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: In the previous section, we used `Image.rotate` to accomplish rotating an image
    by the desired angle. The image filter `Image.BICUBIC` was used to obtain better
    quality output image after rotation. We also saw how `Image.transpose` can be
    used for rotating the image by certain angles.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们使用了`Image.rotate`来实现按所需角度旋转图像。图像过滤器`Image.BICUBIC`用于在旋转后获得更好的输出图像质量。我们还看到了如何使用`Image.transpose`按特定角度旋转图像。
- en: Flipping
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 翻转
- en: There are multiple ways in PIL to flip an image horizontally or vertically.
    One way to achieve this is using the `Image.transpose` method. Another option
    is to use the functionality from the `ImageOps` module . This module makes the
    image-processing job even easier with some ready-made methods. However, note that
    the PIL documentation for Version 1.1.6 states that `ImageOps` is still an experimental
    module.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在PIL中，有多种方法可以水平或垂直翻转图像。一种实现方式是使用`Image.transpose`方法。另一种选择是使用`ImageOps`模块的功能。这个模块通过一些现成的方法使图像处理工作变得更加容易。然而，请注意，PIL版本1.1.6的文档中提到`ImageOps`仍然是一个实验性模块。
- en: Time for action - flipping
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行动作 - 翻转
- en: Imagine that you are building a symmetric image using a bunch of basic shapes.
    To create such an image, an operation that can flip (or mirror) the image would
    come in handy. So let's see how image flipping can be accomplished.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你正在使用一些基本形状构建一个对称的图像。为了创建这样的图像，一个可以翻转（或镜像）图像的操作将非常有用。那么，让我们看看图像翻转是如何实现的。
- en: Write the following code in a Python source file.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Python源文件中编写以下代码。
- en: '[PRE17]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In this code, the image is flipped horizontally by calling the `transpose`
    method. To flip the image vertically, replace line 5 in the code with the following:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此代码中，通过调用`transpose`方法水平翻转图像。要垂直翻转图像，将代码中的第5行替换为以下内容：
- en: '[PRE18]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The following illustration shows the output of the preceding code when the image
    is flipped horizontally and vertically.![Time for action - flipping](img/0165_2_12.jpg)![Time
    for action - flipping](img/0165_2_13.jpg)![Time for action - flipping](img/0165_2_14.jpg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下插图显示了当图像水平翻转和垂直翻转时，前面代码的输出。![执行动作 - 翻转](img/0165_2_12.jpg)![执行动作 - 翻转](img/0165_2_13.jpg)![执行动作
    - 翻转](img/0165_2_14.jpg)
- en: The same effect can be achieved using the `ImageOps` module. To flip the image
    horizontally, use `ImageOps.mirror`, and to flip the image vertically, use `ImageOps.flip`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ImageOps`模块也可以达到相同的效果。要水平翻转图像，使用`ImageOps.mirror`，要垂直翻转图像，使用`ImageOps.flip`。
- en: '[PRE19]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: What just happened?
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: With the help of example, we learned how to flip an image horizontally or vertically
    using `Image.transpose` and also by using methods in class `ImageOps`. This operation
    will be applied later in this book for further image processing such as preparing
    composite images.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通过示例，我们学习了如何使用`Image.transpose`和`ImageOps`类中的方法水平或垂直翻转图像。此操作将在本书的后续部分用于进一步的图像处理，如准备合成图像。
- en: Capturing screenshots
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 截图
- en: How do you capture the desktop screen or a part of it using Python? There is
    `ImageGrab` module in PIL. This simple line of code will capture the whole screen.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何使用Python捕获桌面屏幕或其一部分？PIL中有`ImageGrab`模块。这一行简单的代码就可以捕获整个屏幕。
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Where, `img` is an instance of class `Image`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`img`是`Image`类的一个实例。
- en: However, note that in PIL Version 1.1.6, the `ImageGrab` module supports screen
    grabbing only for Windows platform.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意，在PIL版本1.1.6中，`ImageGrab`模块仅支持Windows平台的屏幕截图。
- en: Time for action - capture screenshots at intervals
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行动作 - 定时截图
- en: Imagine that you are developing an application, where, after certain time interval,
    the program needs to automatically capture the whole screen or a part of the screen.
    Let's develop code that achieves this.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 想象你正在开发一个应用程序，在某个时间间隔后，程序需要自动捕获整个屏幕或屏幕的一部分。让我们编写实现这一点的代码。
- en: Write the following code in a Python source file. When the code is executed,
    it will capture part of the screen after every two seconds. The code will run
    for about three seconds.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Python源文件中编写以下代码。当代码执行时，它将在每两秒后捕获屏幕的一部分。代码将运行大约三秒。
- en: '[PRE21]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We will now review the important aspects of this code. First, import the necessary
    modules. The `time.clock()` keeps track of the time spent. On line 11, a bounding
    box is defined. It is a `4-tuple` that defines the boundaries of a rectangular
    region. The elements in this `tuple` are specified in pixels. In PIL, the origin
    (0, 0) is defined in the top-left corner of an image. The next illustration is
    a representation of a bounding box for image cropping; see how left, upper and
    right, lower are specified as the ends of a diagonal of rectangle.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将回顾此代码的重要方面。首先，导入必要的模块。`time.clock()`跟踪花费的时间。在第11行，定义了一个边界框。它是一个`4-tuple`，定义了一个矩形区域的边界。此`tuple`中的元素以像素为单位指定。在PIL中，原点（0,
    0）被定义为图像的左上角。下一图示是图像裁剪的边界框表示；看看如何指定左、上、右和下为矩形的对角线端点。
- en: Example of a bounding box used for image cropping.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于图像裁剪的边界框示例。
- en: '![Time for action - capture screenshots at intervals](img/0165_02_15.jpg)'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![执行动作 - 以间隔捕获屏幕截图](img/0165_02_15.jpg)'
- en: The `while` loop runs till the `time.clock()` reaches three seconds. Inside
    the loop, the part of the screen bounded within `bbox` is captured (see line 16)
    and then the image is saved on line 18\. The image name corresponds to the time
    at which it is taken.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`while`循环运行直到`time.clock()`达到三秒。在循环内部，屏幕上`bbox`内的部分被捕获（见第16行），然后图像在第18行被保存。图像名称对应于它被捕获的时间。'
- en: The `time.sleep(2)` call suspends the execution of the application for two seconds.
    This ensures that it grabs the screen every two seconds. The loop repeats until
    the given time is reached.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`time.sleep(2)`调用暂停应用程序的执行两秒。这确保了它每两秒捕获一次屏幕。循环重复直到达到给定的时间。'
- en: In this example, it will capture two screenshots, one when it enters the loop
    for the first time and the next after a two-second time interval. In the following
    illustration, the two images grabbed by the code are shown. Notice the time and
    console prints in these images.![Time for action - capture screenshots at intervals](img/0165_2_16.jpg)
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个例子中，它将捕获两个屏幕截图，一个是在它第一次进入循环时，另一个是在两秒的时间间隔后。在下图所示中，展示了代码捕获的两个图像。注意这些图像中的时间和控制台打印。
- en: The preceding screenshot is taken at time 00:02:15 as shown dialog. The next
    screenshot is taken after 2 seconds, at wall clock time, 00:02:17.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的截图是在00:02:15时拍摄的，如对话框所示。下一个截图是在2秒后，即墙上的时间00:02:17。
- en: '![Time for action - capture screenshots at intervals](img/0165_2_17.jpg)'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![执行动作 - 以间隔捕获屏幕截图](img/0165_2_17.jpg)'
- en: What just happened?
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: In the preceding example, we wrote a simple application that captures the screen
    at regular time intervals. This helped us to learn how to grab a screen region
    using `ImageGrab`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们编写了一个简单的应用程序，它以固定的时间间隔捕获屏幕。这帮助我们学习了如何使用`ImageGrab`捕获屏幕区域。
- en: Cropping
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 裁剪
- en: In previous section, we learned how to grab a part of the screen with `ImageGrab`.
    Cropping is a very similar operation performed on an image. It allows you to modify
    a region within an image.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们学习了如何使用`ImageGrab`捕获屏幕的一部分。裁剪是对图像执行的一个非常类似的操作。它允许你修改图像内的一个区域。
- en: Time for action - cropping an image
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行动作 - 裁剪图像
- en: This simple code snippet crops an image and applies some changes on the cropped
    portion.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的代码片段裁剪了一个图像并对裁剪的部分进行了某些更改。
- en: Download the file `Crop.png` from Packt website. The size of this image is `400
    x 400` pixels. You can also use your own image file.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Packt网站下载文件`Crop.png`。此图像的大小为`400 x 400`像素。你也可以使用你自己的图像文件。
- en: Write the following code in a Python source file. Modify the path of the image
    file to an appropriate path.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Python源文件中编写以下代码。将图像文件的路径修改为适当的路径。
- en: '[PRE22]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This will crop a region of the image bounded by `bbox`. The specification of
    the bounding box is identical to what we have seen in the *Capturing screenshots*
    section. The output of this example is shown in the following illustration.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将裁剪出由`bbox`定义的图像区域。边界框的指定与我们之前在*捕获屏幕截图*部分看到的是相同的。此示例的输出如下所示。
- en: Original image (left) and its cropped region (right).
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 原始图像（左）及其裁剪区域（右）。
- en: '![Time for action - cropping an image](img/0165_2_18.jpg)![Time for action
    - cropping an image](img/0165_2_19.jpg)'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 - 裁剪图像](img/0165_2_18.jpg)![行动时间 - 裁剪图像](img/0165_2_19.jpg)'
- en: What just happened?
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: In the previous section, we used `Image.crop` functionality to crop a region
    within an image and save the resultant image. In the next section, we will apply
    this while pasting a region of an image onto another.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们使用了`Image.crop`功能来裁剪图像中的某个区域并保存结果图像。在下一节中，我们将应用这一功能将图像的一个区域粘贴到另一个图像上。
- en: Pasting
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 粘贴
- en: Pasting a copied or cut image onto another one is a commonly performed operation
    while processing images. Following is the simplest syntax to paste one image on
    another.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理图像时，将复制的或剪切的图像粘贴到另一个图像上是一个常见的操作。以下是将一个图像粘贴到另一个图像上的最简单语法。
- en: '[PRE23]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here `image` is an instance of class `Image` and `box` is a rectangular bounding
    box that defines the region of `img`, where the `image` will be pasted. The `box`
    argument can be a `4-tupleError: Reference source not found` or a `2-tuple`. If
    a `4-tuple` box is specified, the size of the image to be pasted must be same
    as the size of the region. Otherwise, PIL will throw an error with a message `ValueError:
    images do not match`. The `2-tuple` on the other hand, provides pixel coordinates
    of the upper-left corner of the region to be pasted.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '在这里，`image`是`Image`类的一个实例，而`box`是一个矩形边界框，它定义了`img`的区域，其中`image`将被粘贴。`box`参数可以是`4-tuple`或`2-tuple`。如果指定了`4-tuple`边界框，粘贴的图像大小必须与区域大小相同。否则，PIL将抛出一个错误，错误信息为`ValueError:
    images do not match`。另一方面，`2-tuple`提供了要粘贴的区域左上角的像素坐标。'
- en: Now look at the following line of code. It is a copy operation on an image.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看以下代码行。这是一次对图像的复制操作。
- en: '[PRE24]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The copy operation can be viewed as pasting the whole image onto a new image.
    This operation is useful when, for instance, you want to keep the original image
    unaltered and make alterations to the copy of the image.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 复制操作可以看作是将整个图像粘贴到新图像上。当例如你想保持原始图像不变而只对图像的副本进行修改时，这个操作非常有用。
- en: 'Time for action - pasting: mirror the smiley face!'
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 粘贴：镜像笑脸！
- en: Consider the example in earlier section where we cropped a region of an image.
    The cropped region contained a smiley face. Let's modify the original image so
    that it has a 'reflection' of the smiley face.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到之前章节中我们裁剪图像的例子。裁剪区域包含了一个笑脸。让我们修改原始图像，使其有一个笑脸的“反射”。
- en: If not already, download the file `Crop.png` from the Packt website.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果还没有的话，请从Packt网站下载文件`Crop.png`。
- en: Write this code by replacing the file path with appropriate file path on your
    system.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将文件路径替换为您系统上的适当路径来编写此代码。
- en: '[PRE25]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'First we open an image and crop it to extract a region containing the smiley
    face. This was already done in section `Error: Reference source not found''Cropping''`.
    The only minor difference you will notice is the value of the tuple element `upper`.
    It is intentionally kept as 25 pixels from the top to make sure that the crop
    image has a size that can fit in the blank portion below the original smiley face.'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '首先，我们打开一个图像并将其裁剪以提取包含笑脸的区域。这已经在`Error: Reference source not found''Cropping''`部分完成了。您唯一会注意到的细微差别是元组元素`upper`的值。它故意保持为顶部25像素，以确保裁剪图像的大小可以适应原始笑脸下方的空白区域。'
- en: The cropped image is then flipped horizontally with code on line 13.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使用代码在第13行水平翻转裁剪后的图像。
- en: Now we define a box, `bbox_2`, for pasting the cropped smiley face back on to
    the original image. Where should it be pasted? We intend to make a 'reflection'
    of the original smiley face. So the coordinate of the top-right corner of the
    pasted image should be greater than or equal to the bottom y coordinate of the
    cropped region, indicated by 'lower' variable (see line 8) . The bounding box
    is defined on line 15, as a `2-tuple` representing the upper-left coordinates
    of the smiley.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们定义一个矩形框，`bbox_2`，用于将裁剪的笑脸重新粘贴到原始图像上。应该粘贴在哪里？我们的意图是制作原始笑脸的“反射”。因此，粘贴图像右上角的坐标应该大于或等于裁剪区域的底部y坐标，由“lower”变量（见第8行）指示。边界框在第15行定义，作为一个表示笑脸左上坐标的`2-tuple`。
- en: Finally, on line 17, the paste operation is performed to paste the smiley on
    the original image. The resulting image is then saved with a different name.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在第17行，执行粘贴操作，将笑脸粘贴到原始图像上。然后以不同的名称保存生成的图像。
- en: 'The original image and the output image after the paste operation is shown
    in the next illustration.![Time for action - pasting: mirror the smiley face!](img/0165_2_20.jpg)![Time
    for action - pasting: mirror the smiley face!](img/0165_2_21.jpg)'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个图例显示了粘贴操作后的原始图像和输出图像。![行动时间 - 粘贴：镜像笑脸！](img/0165_2_20.jpg)![行动时间 - 粘贴：镜像笑脸！](img/0165_2_21.jpg)
- en: The illustration shows the comparison of original and resulting images after
    the paste operation.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图例显示了粘贴操作后原始图像和结果图像的比较。
- en: What just happened?
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: Using a combination of `Image.crop` and `Image.paste`, we accomplished cropping
    a region, making some modifications, and then pasting the region back on the image.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合使用`Image.crop`和`Image.paste`，我们完成了裁剪一个区域、进行一些修改，然后将该区域粘贴回图像。
- en: 'Project: Thumbnail Maker'
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目：缩略图制作器
- en: Let's take up a project now. We will apply some of the operations we learned
    in this chapter to create a simple Thumbnail Maker utility. This application will
    accept an image as an input and will create a resized image of that image. Although
    we are calling it a thumbnail maker, it is a multi-purpose utility that implements
    some basic image-processing functionality.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们开始一个项目。我们将应用本章学到的某些操作来创建一个简单的缩略图制作工具。这个应用程序将接受一个图像作为输入，并将创建该图像的缩放版本。虽然我们称之为缩略图制作器，但它是一个多功能的工具，实现了某些基本的图像处理功能。
- en: Before proceeding further, make sure that you have installed all the packages
    discussed at the beginning of this chapter. The screenshot of the Thumbnail Maker
    dialog is show in the following illustration.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保你已经安装了本章开头讨论的所有包。缩略图制作器对话框的截图如下所示。
- en: '![Project: Thumbnail Maker](img/0165_2_22.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![项目：缩略图制作器](img/0165_2_22.jpg)'
- en: 'The Thumbnail Maker GUI has two components:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 缩略图制作器GUI有两个组件：
- en: The left panel is a 'control area', where you can specify certain image parameters
    along with options for input and output paths.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 左侧面板是一个“控制区域”，你可以在这里指定某些图像参数，以及输入和输出路径的选项。
- en: A graphics area on the right-hand side where you can view the generated image.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右侧有一个图形区域，你可以在这里查看生成的图像。
- en: 'In short, this is how it works:'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简而言之，这是它的工作原理：
- en: The application takes an image file as an input.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序接受一个图像文件作为输入。
- en: It accepts user input for image parameters such as dimensions in pixel, filter
    for re-sampling and rotation angle in degrees.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它接受用户输入的图像参数，如像素尺寸、重采样滤波器和旋转角度（以度为单位）。
- en: When the user clicks the **OK** button in the dialog, the image is processed
    and saved at a location indicated by the user in the specified output image format.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户在对话框中点击**确定**按钮时，图像将被处理并保存到用户指定的输出图像格式位置。
- en: Time for action - play with Thumbnail Maker application
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 玩转缩略图制作器应用程序
- en: First, we will run the Thumbnail Maker application as an end user. This warm-up
    exercise intends to give us a good understanding of how the application works.
    This, in turn, will help us develop/learn the involved code quickly. So get ready
    for action!
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将以最终用户身份运行缩略图制作器应用程序。这个预热练习旨在让我们更好地理解应用程序的工作原理。这将反过来帮助我们快速开发/学习相关的代码。所以，准备行动吧！
- en: Download the files `ThumbnailMaker.py, ThumbnailMakeDialog.py`, and `Ui_ThumbnailMakerDialog.py`
    from Packt website. Place these files in some directory.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Packt网站下载文件`ThumbnailMaker.py, ThumbnailMakeDialog.py`和`Ui_ThumbnailMakerDialog.py`。将这些文件放置在某个目录中。
- en: 'From the command prompt, change to this directory location and type the following
    command:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从命令提示符中，切换到这个目录位置，并输入以下命令：
- en: '[PRE26]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The Thumbnail Maker dialog that pops up was shown in the earlier screenshot.
    Next, we will specify the input-output paths and various image parameters. You
    can open any image file of your choice. Here, the flower image shown in some previous
    sections will be used as an input image. To specify an input image, click on the
    small button with three dots …. It will open a file dialog. The following illustration
    shows the dialog with all the parameters specified.![Time for action - play with
    Thumbnail Maker application](img/0165_2_23.jpg)
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹出的Thumbnail Maker对话框在之前的截图中已经显示。接下来，我们将指定输入输出路径和各种图像参数。你可以打开任何你选择的图像文件。在这里，将使用之前某些部分中显示的花朵图像作为输入图像。要指定输入图像，点击带有三个点的按钮……它将打开一个文件对话框。以下插图显示了已指定所有参数的对话框。![操作时间
    - 玩转Thumbnail Maker应用程序](img/0165_2_23.jpg)
- en: If **Maintain Aspect Ratio** checkbox is checked, internally it will scale the
    image dimension so that the aspect ratio of the output image remains the same.
    When the **OK** button is clicked, the resultant image is saved at the location
    specified by the **Output Location** field and the saved image is displayed in
    the right-hand panel of the dialog. The following screenshot shows the dialog
    after clicking **OK** button.![Time for action - play with Thumbnail Maker application](img/0165_2_24.jpg)
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果勾选了**保持纵横比**复选框，它将内部调整图像尺寸，以确保输出图像的纵横比保持不变。当点击**确定**按钮时，结果图像将保存在**输出位置**字段指定的位置，并且保存的图像将在对话框的右侧面板中显示。以下截图显示了点击**确定**按钮后的对话框。![操作时间
    - 玩转Thumbnail Maker应用程序](img/0165_2_24.jpg)
- en: You can now try modifying different parameters such as output image format or
    rotation angle and save the resulting image.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以尝试修改不同的参数，例如输出图像格式或旋转角度，并保存结果图像。
- en: See what happens when the **Maintain Aspect Ratio** checkbox is unchecked. The
    aspect ratio of the resulting image will not be preserved and the image may appear
    distorted if the width and height dimensions are not properly specified.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看看当**保持纵横比**复选框未勾选时会发生什么。结果图像的纵横比将不会保留，如果宽度和高度尺寸没有正确指定，图像可能会出现变形。
- en: Experiment with different re-sampling filters; you can notice the difference
    between the quality of the resultant image and the earlier image.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试不同的重采样过滤器；你可以注意到结果图像和早期图像之间的质量差异。
- en: There are certain limitations to this basic utility. It is required to specify
    reasonable values for all the parameters fields in the dialog. The program will
    print an error if any of the parameters is not specified.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个基本实用程序有一定的局限性。需要在对话框中为所有参数字段指定合理的值。如果任何参数未指定，程序将打印错误。
- en: What just happened?
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We got ourselves familiar with the user interface of the thumbnail maker dialog
    and saw how it works for processing an image with different dimensions and quality.
    This knowledge will make it easier to understand the Thumbnail Maker code.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们熟悉了Thumbnail Maker对话框的用户界面，并看到了它是如何处理不同尺寸和质量的图像的。这些知识将使理解Thumbnail Maker代码更容易。
- en: Generating the UI code
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成UI代码
- en: The Thumbnail Maker GUI is written using PyQt4 (Python bindings for Qt4 GUI
    framework). Detailed discussion on how the GUI is generated and how the GUI elements
    are connected to the main functions is beyond the scope of this book. However,
    we will cover certain main aspects of this GUI to get you going. The GUI-related
    code in this application can simply be used 'as-is' and if this is something that
    interests you, go ahead and experiment with it further! In this section, we will
    briefly discuss how the UI code is generated using PyQt4.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Thumbnail Maker GUI是用PyQt4编写的（Qt4 GUI框架的Python绑定）。关于如何生成GUI以及GUI元素如何连接到主功能的详细讨论超出了本书的范围。然而，我们将介绍这个GUI的某些主要方面，以便你开始使用。这个应用程序中的GUI相关代码可以“直接使用”，如果你对此感兴趣，可以继续实验！在本节中，我们将简要讨论如何使用PyQt4生成UI代码。
- en: Time for action - generating the UI code
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 - 生成UI代码
- en: PyQt4 comes with an application called QT Designer. It is a GUI designer for
    QT-based applications and provides a quick way to develop a graphical user interface
    containing some basic widgets. With this, let's see how the Thumbnail Maker dialog
    looks in QT Designer and then run a command to generate Python source code from
    the `.ui` file.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: PyQt4自带一个名为QT Designer的应用程序。它是一个基于QT的应用程序GUI设计器，提供了一种快速开发包含一些基本小部件的图形用户界面的方法。现在，让我们看看在QT
    Designer中Thumbnail Maker对话框的样式，然后运行一个命令从`.ui`文件生成Python源代码。
- en: Download the `thumbnailMaker.ui` file from the Packt website.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Packt 网站下载 `thumbnailMaker.ui` 文件。
- en: Start the QT Designer application that comes with PyQt4 installation.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 PyQt4 安装中附带 QT 设计器应用程序。
- en: Open the file `thumbnailMaker.ui` in QT Designer. Notice the red-colored borders
    around the UI elements in the dialog. These borders indicate a 'layout' in which
    the widgets are arranged. Without a layout in place, the UI elements may appear
    distorted when you run the application and, for instance, resize the dialog. Three
    types of `QLayouts` are used, namely `Horizontal, Vertical`, and `Grid layout`.![Time
    for action - generating the UI code](img/0165_2_25.jpg)
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 QT 设计器中打开 `thumbnailMaker.ui` 文件。注意对话框中 UI 元素周围的红色边框。这些边框表示一个布局，其中小部件被排列。如果没有布局，当您运行应用程序时，UI
    元素可能会变形，例如调整对话框的大小。使用了三种类型的 `QLayouts`，即 `Horizontal`、`Vertical` 和 `Grid` 布局。![执行时间
    - 生成 UI 代码](img/0165_2_25.jpg)
- en: You can add new UI elements, such as a `QCheckbox` or a `QLabel`, by dragging
    and dropping it from the 'Widget Box' of QT Designer. It is located in the left
    panel by default.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过从 QT 设计器的“小部件框”拖放来添加新的 UI 元素，例如 `QCheckbox` 或 `QLabel`。它默认位于左侧面板中。
- en: Click on the field next to the label "Input file". In the right-hand panel of
    QT Designer, there is a Property Editor that displays the properties of the selected
    widget (in this case it's a `QLineEdit)`. This is shown in the following illustration.
    The Property Editor allows us to assign values to various attributes such as the
    `objectName, width`, and `height` of the widget, and so on.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“输入文件”旁边的字段。在 QT 设计器的右侧面板中，有一个属性编辑器，它显示所选小部件（在这种情况下是 `QLineEdit`）的属性。这在上面的插图中有展示。属性编辑器允许我们为小部件的各种属性分配值，例如
    `objectName`、`width` 和 `height` 等。
- en: Qt Designer shows the details of the selected widget in Property Editor.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Qt 设计器在属性编辑器中显示所选小部件的详细信息。
- en: '![Time for action - generating the UI code](img/0165_2_26.jpg)'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![执行时间 - 生成 UI 代码](img/0165_2_26.jpg)'
- en: 'QT designer saves the file with extension `.ui`. To convert this into Python
    source code, PyQt4 provides a conversion utility called `pyuic4`. On Windows XP,
    for standard Python installation, it is present at the following location `C:\Python26\Lib\site-packages\PyQt4\pyuic4.bat`.
    Add this path to your environment variable. Alternatively specify the whole path
    each time you want to convert `ui` file to Python source file. The conversion
    utility can be run from the command prompt as:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: QT 设计器以 `.ui` 扩展名保存文件。要将此转换为 Python 源代码，PyQt4 提供了一个名为 `pyuic4` 的转换工具。在 Windows
    XP 上，对于标准的 Python 安装，它位于以下位置 `C:\Python26\Lib\site-packages\PyQt4\pyuic4.bat`。将此路径添加到您的环境变量中。或者，每次您想要将
    `ui` 文件转换为 Python 源文件时，指定整个路径。转换工具可以从命令提示符中运行，如下所示：
- en: This script will generate `Ui_ThumbnailMakerDialog.py` with all the GUI elements
    defined. You can further review this file to understand how the UI elements are
    defined.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此脚本将生成包含所有 GUI 元素的 `Ui_ThumbnailMakerDialog.py` 文件。您可以进一步审查此文件以了解 UI 元素是如何定义的。
- en: '[PRE27]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: What just happened?
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We learned how to autogenerate the Python source code defining UI elements of
    Thumbnail Maker Dialog from a Qt designer file.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何从 Qt 设计器文件自动生成定义 Thumbnail Maker 对话框 UI 元素的 Python 源代码。
- en: Have a go hero tweak UI of Thumbnail Maker dialog
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄尝试调整 Thumbnail Maker 对话框的 UI
- en: Modify the `thumbnailMaker.ui` file in QT Designer and implement the following
    list of things in the Thumbnail Maker dialog.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在 QT 设计器中修改 `thumbnailMaker.ui` 文件，并在 Thumbnail Maker 对话框中实现以下列表中的内容。
- en: Change the color of all the line edits in the left panel to pale yellow.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将左侧面板中所有行编辑的颜色更改为浅黄色。
- en: Tweak the default file extension displayed in the **Output file Format** combobox
    such that the first option is `.png` instead of `.jpeg`
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整默认文件扩展名在 **输出文件格式** 组合框中显示，使第一个选项为 `.png` 而不是 `.jpeg`
- en: Tip
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Double click on this combobox to edit it.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 双击此组合框以编辑它。
- en: Add new option `.tiff` to the output format combobox.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的选项 `.tiff` 添加到输出格式组合框中。
- en: Align the **OK** and **Cancel** buttons to the right corner.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **OK** 和 **Cancel** 按钮对齐到右下角。
- en: Set the range of rotation angle 0 to 360 degrees instead of the current -180
    to +180 degrees.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将旋转角度的范围设置为 0 到 360 度，而不是当前的 -180 到 +180 度。
- en: Tip
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You will need to break layouts, move the spacer around, and recreate the layouts.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您需要断开布局，移动空格，并重新创建布局。
- en: After this, create `Ui_ThumbnailMakerDialog.py` by running the `pyuic4` script
    and then run the Thumbnail Maker application.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，通过运行 `pyuic4` 脚本创建 `Ui_ThumbnailMakerDialog.py`，然后运行 Thumbnail Maker 应用程序。
- en: Connecting the widgets
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接小部件
- en: In the earlier section, the Python source code representing UI was automatically
    generated using the `pyuic4` script. This, however, only has the widgets defined
    and placed in a nice layout. We need to teach these widgets what they should do
    when a certain event occurs. To do this, QT's slots and signals will be used.
    A signal is emitted when a particular GUI event occurs. For example, when the
    user clicks on the **OK** button, internally, a `clicked()` signal is emitted.
    A slot is a function that is called when a particular signal is emitted. Thus,
    in this example, it will call a specified method, whenever the **OK** button is
    clicked. See PyQt4 documentation for a complete list of available signals for
    various widgets.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分，表示UI的Python源代码是使用`pyuic4`脚本自动生成的。然而，这仅仅定义了小部件并将它们放置在一个漂亮的布局中。我们需要教这些小部件在发生特定事件时应该做什么。为此，我们将使用QT的槽和信号。当特定的GUI事件发生时，会发出一个信号。例如，当用户点击**OK**按钮时，内部会发出一个`clicked()`信号。槽是一个在特定信号发出时被调用的函数。因此，在这个例子中，它将在**OK**按钮被点击时调用一个指定的方法。请参阅PyQt4文档以获取各种小部件可用的完整信号列表。
- en: Time for action - connecting the widgets
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 连接小部件
- en: You will notice several different widgets in the dialog. For example, the field
    which accepts the input image path or the output directory path is a `QLineEdit`.
    The widget where image format is specified is a `QCombobox`. On similar lines,
    the **OK** and **Cancel** buttons are `QPushButton`. As an exercise, you can open
    up the `thumbnailMaker.ui` file and click on each element to see the associated
    QT class from the Property Editor.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在对话框中注意到几个不同的小部件。例如，接受输入图像路径或输出目录路径的字段是`QLineEdit`。指定图像格式的控件是`QCombobox`。按照类似的逻辑，**OK**和**Cancel**按钮是`QPushButton`。作为一个练习，你可以打开`thumbnailMaker.ui`文件并点击每个元素，以查看属性编辑器中关联的QT类。
- en: With this, let's learn how the widgets are connected.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习小部件是如何连接的。
- en: Open the file `ThumbnailMakerDialog.py`. The `_connect` method of class `ThumbnailMakerDialog`
    is copied. The method is called in the constructor of this class.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件`ThumbnailMakerDialog.py`。类`ThumbnailMakerDialog`的`_connect`方法被复制。该方法在这个类的构造函数中被调用。
- en: '[PRE28]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`self._dialog` is an instance of class `Ui_ThumbnailMakerDialog. self.connect`
    is the inherited method of Qt class `QDialog`. Here, it takes the following arguments
    (QObject, `signal, callable)`, where `QObject` is any widget type (all inherit
    `QObject), signal` is the QT `SIGNAL` that tells us about what event occurred
    and `callable` is any method handling this event.'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`self._dialog`是类`Ui_ThumbnailMakerDialog`的一个实例。`self.connect`是Qt类`QDialog`继承的方法。在这里，它接受以下参数（QObject，`signal，callable`），其中`QObject`是任何小部件类型（所有都继承自`QObject`），`signal`是QT的`SIGNAL`，它告诉我们发生了什么事件，而`callable`是处理此事件的任何方法。'
- en: For example, consider the highlighted lines of the code snippet. They connect
    the **OK** button to a method that handles image processing. The first argument
    , `self._dialog.okPushButton` refers to the button widget defined in class `Ui_ThumbnailMakerDialog`.
    Referring to `QPushButton` documentation, you will find there is a "clicked()"
    signal that it can emit. The second argument `SIGNAL("clicked()")` tells Qt that
    we want to know when that button is clicked by the user. The third argument is
    the method `self._processImage` that gets called when this signal is emitted.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，考虑代码片段中高亮显示的行。它们将**OK**按钮连接到处理图像的方法。第一个参数`self._dialog.okPushButton`指的是在类`Ui_ThumbnailMakerDialog`中定义的按钮小部件。参考`QPushButton`文档，你会发现它有一个可以发出的“clicked()”信号。第二个参数`SIGNAL("clicked()")`告诉Qt我们希望在用户点击该按钮时知道。第三个参数是当这个信号发出时被调用的方法`self._processImage`。
- en: Similarly, you can review the other connections in this method. Each of these
    connects a widget to a method of the class `ThumbnailMakerDialog`.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，你可以回顾这个方法中的其他连接。这些连接中的每一个都将一个小部件连接到类`ThumbnailMakerDialog`的方法。
- en: What just happened?
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We reviewed `ThumbnailMakerDialog._connect()` method to understand how the UI
    elements are connected to various internal methods. The previous two sections
    helped us learn some preliminary concepts of GUI programming using QT.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们回顾了`ThumbnailMakerDialog._connect()`方法，以了解UI元素是如何连接到各种内部方法的。前两个部分帮助我们学习了使用QT进行GUI编程的一些初步概念。
- en: Developing the image processing code
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发图像处理代码
- en: The previous sections were intended to get ourselves familiar with the application
    as an end user and to understand some basic aspects of the GUI elements in the
    application. With all necessary pieces together, let's focus our attention on
    the class that does all the main image processing in the application.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 前几节旨在让我们作为最终用户熟悉应用程序，并了解应用程序中GUI元素的一些基本方面。所有必要的部分都准备好了，让我们将注意力集中在执行应用程序中所有主要图像处理的类上。
- en: The class `ThumbnailMaker` handles the pure image processing code. It defines
    various methods to achieve this. For example, the class methods such as `_rotateImage,
    _makeThumbnail`, and `_resizeImage` manipulate the given image to accomplish rotation,
    thumbnail generation, and resizing respectively. This class accepts input from
    `ThumbnailMakerDialog`. Thus, no QT related UI code is required here. If you want
    to use some other GUI framework to process input, you can do that easily. Just
    make sure to implement the public API methods defined in class `ThumbnailMakerDialog`,
    as those are used by the `ThumbnailMaker` class.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`ThumbnailMaker`类处理纯图像处理代码。它定义了各种方法来实现这一点。例如，类方法如`_rotateImage`、`_makeThumbnail`和`_resizeImage`分别用于旋转、生成缩略图和调整大小。该类接受来自`ThumbnailMakerDialog`的输入。因此，这里不需要QT相关的UI代码。如果您想使用其他GUI框架来处理输入，可以轻松做到。只需确保实现`ThumbnailMakerDialog`中定义的公共API方法，因为`ThumbnailMaker`类使用这些方法。'
- en: Time for action - developing image processing code
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 开发图像处理代码
- en: Thus, with `ThumbnailMakerDialog` at your disposal, you can develop your own
    code in scratch, in class `ThumbnailMaker`. Just make sure to implement the method
    `processImage` as this is the only method called by `ThumbnailMakerDialog`.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，有了`ThumbnailMakerDialog`，您可以在`ThumbnailMaker`类中从头开始编写自己的代码。只需确保实现`processImage`方法，因为这是`ThumbnailMakerDialog`调用的唯一方法。
- en: Let's develop some important methods of class `ThumbnailMaker`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开发一些`ThumbnailMaker`类的重要方法。
- en: Write the constructor for class `ThumbnailMaker`. It takes `dialog` as an argument.
    In the constructor, we only initialize `self._dialog`, which is an instance of
    class `ThumbnailMakerDialog`. Here is the code.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写`ThumbnailMaker`类的构造函数。它以`dialog`作为参数。在构造函数中，我们只初始化`self._dialog`，它是`ThumbnailMakerDialog`类的一个实例。以下是代码。
- en: '[PRE29]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, write the `processImage` method in class `ThumbnailMaker`. The code is
    as follows:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`ThumbnailMaker`类中编写`processImage`方法。代码如下：
- en: Tip
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Note: You can download the file `ThumbnailMaker.py` from Packt website. The
    code written is from this file. The only difference is that some code comments
    are removed here.'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意：您可以从Packt网站下载`ThumbnailMaker.py`文件。编写的代码来自此文件。唯一的区别是这里删除了一些代码注释。
- en: '[PRE31]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: On line 2, it gets the full path of the input image file. Note that it relies
    on `self._dialog` to provide this information.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第2行，它获取输入图像文件的完整路径。请注意，它依赖于`self._dialog`提供此信息。
- en: Then the image file is opened the usual way. On line 4, it checks a flag that
    decides whether or not to process the image by maintaining the aspect ratio. Accordingly,
    `_makeThumbnail` or `_resizeImage` methods are called.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后按照常规方式打开图像文件。在第4行，它检查一个标志以决定是否通过保持宽高比来处理图像。相应地，调用`_makeThumbnail`或`_resizeImage`方法。
- en: On line 10, it rotates the image resized earlier, using the `_rotateImage` method.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第10行，它使用`_rotateImage`方法旋转之前调整大小的图像。
- en: Finally, on line 15, the processed image is saved at a path obtained from the
    `getOutImagePath` method of class `ThumbnailMakerDialog`.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在第15行，处理后的图像被保存在`ThumbnailMakerDialog`类的`getOutImagePath`方法获得的路径上。
- en: We will now write the `_makeThumbnail` method.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将编写`_makeThumbnail`方法。
- en: '[PRE32]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: First a copy of the original image is made. We will manipulate this copy and
    the method will return it for further processing.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建原始图像的一个副本。我们将操作这个副本，并将方法返回以进行进一步处理。
- en: Then the necessary parameters such as the image dimension and filter for re-sampling
    are obtained from `self._dialog` and `_getImageFilter` respectively.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后从`self._dialog`和`_getImageFilter`分别获取必要的参数，例如图像尺寸和用于重采样的过滤器。
- en: Finally the thumbnail is created on line 5 and then method returns this image
    instance.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在第5行创建缩略图，然后方法返回此图像实例。
- en: We have already discussed how to resize and rotate image. The related code is
    straightforward to write and the readers are suggested to write it as an exercise.
    You will need to review the code from file `ThumbnailMakerDialog.py` for getting
    appropriate parameters. Write remaining routines namely, `_resizeImage, _rotateImage`
    and `_getImageFilter`.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经讨论了如何调整和旋转图像。相关的代码编写简单，建议读者将其作为练习来编写。您需要从文件`ThumbnailMakerDialog.py`中审查代码以获取适当的参数。编写剩余的例程，即`_resizeImage,
    _rotateImage`和`_getImageFilter`。
- en: 'Once all methods are in place, run the code from the command line as:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦所有方法都到位，就可以从命令行运行代码：
- en: It should show our application dialog. Play around with it to make sure everything
    works!
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应显示我们的应用程序对话框。玩一玩，确保一切正常！
- en: '[PRE33]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: What just happened?
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: In the previous section, we completed an exciting project. Several things learned
    in this chapter, such as image I/O, resizing, and so on, were applied in the project.
    We developed a GUI application where some basic image manipulation features, such
    as creating thumbnails, were implemented. This project also helped us gain some
    insight into various aspects of GUI programming using QT.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们完成了一个令人兴奋的项目。本章中学到的许多内容，如图像I/O、调整大小等，都应用于该项目。我们开发了一个GUI应用程序，其中实现了一些基本的图像处理功能，例如创建缩略图。这个项目还帮助我们了解了使用QT进行GUI编程的各个方面。
- en: Have a go hero enhance the ThumbnailMaker application
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试增强ThumbnailMaker应用程序
- en: Want to do something more with the Thumbnail Maker. Here you go! As you will
    add more features to this application, the first thing you would need to do is
    to change its name at least from the caption of the dialog that pops up! Edit
    the `thumbnailMaker.ui` file in QT designer, change the name to something like
    "Image Processor", and recreate the corresponding `.py` file. Next, add the following
    features to this application.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 想要在缩略图制作器上做更多的事情吗？这里就是！随着您向此应用程序添加更多功能，您首先需要做的是至少更改弹出对话框的标题！在QT设计师中编辑`thumbnailMaker.ui`文件，将其名称更改为类似“图像处理器”的内容，并重新创建相应的`.py`文件。接下来，向此应用程序添加以下功能。
- en: Tip
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you don't want to deal with any UI code, that is fine too! You can write
    a class similar to `ThumbnailMakerDialog`. Do the input argument processing in
    your own way. All that class `ThumbnailMaker` requires is implementation of certain
    public methods in this new class, to get various input parameters.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想处理任何UI代码，那也行！您可以编写一个类似于`ThumbnailMakerDialog`的类。以您自己的方式处理输入参数。这个`ThumbnailMaker`类只需要在这个新类中实现某些公共方法，以获取各种输入参数。
- en: Accept output filename from the user. Currently, it gives the same name as the
    input file.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受用户输入的输出文件名。目前，它给出与输入文件相同的名称。
- en: Edit the .ui file. You would need to break the layouts before adding a QLineEdit
    and its QLabel and then recreate the layouts.
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编辑`.ui`文件。您需要在添加`QLineEdit`及其`QLabel`之前打破布局，然后重新创建布局。
- en: If there is a previously created output image file in the output directory,
    clicking **OK** would simply overwrite that file. Add a checkbox reading, "Overwrite
    existing file (if any)". If the checkbox in deselected, it should pop up a warning
    dialog and exit.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果输出目录中存在先前创建的输出图像文件，则单击**确定**将简单地覆盖该文件。添加一个复选框，内容为“覆盖现有文件（如果有）”。如果复选框未选中，则应弹出警告对话框并退出。
- en: For the latter part, there is a commented out code block in ThumbnailMakerDialog._processImage.
    Just enable the code.
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于后面部分，在`ThumbnailMakerDialog._processImage`中有一个被注释掉的代码块。只需启用该代码即可。
- en: Add a feature that can add specified text in the lower-left corner of the output
    image.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个功能，可以在输出图像的左下角添加指定的文本。
- en: Create an image with this text, and use the combination of crop and paste to
    achieve desired results. For user input, you will need to add a new `QLineEdit`
    for accepting text input and then connect signals with a callable method in `ThumbnailMakerDialog._connect`.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用此文本创建一个图像，并通过组合裁剪和粘贴来达到所需的效果。对于用户输入，您需要在`ThumbnailMakerDialog._connect`中添加一个新的`QLineEdit`以接受文本输入，然后连接信号与可调用的方法。
- en: Summary
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We learned a lot in this chapter about basic image manipulation.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了大量的基本图像处理技巧。
- en: Specifically, we covered image input-output operations that enable reading and
    writing of images, and creation of images from scratch.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们涵盖了图像输入输出操作，这些操作可以读取和写入图像，以及从头创建图像。
- en: 'With the help of numerous examples and code snippets, we learned several image
    manipulation operations. Some of them are:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在众多示例和代码片段的帮助下，我们学习了几个图像处理操作。其中一些是：
- en: How to resize an image with or without maintaining aspect ratio
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何调整图像大小，是否保持纵横比
- en: Rotating or flipping an image
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旋转或翻转图像
- en: Cropping an image, manipulating it using techniques learned earlier in the chapter,
    and then pasting it on the original image
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 裁剪图像，使用本章早期学到的技术对其进行操作，然后将其粘贴到原始图像上
- en: Creating an image with a text
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建带有文本的图像
- en: We developed a small application that captures a region of your screen at regular
    time intervals
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们开发了一个小应用程序，它会在固定的时间间隔内捕获您的屏幕区域
- en: We created an interesting project implementing some image processing functionality
    learned in this chapter
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了一个有趣的项目，实现了本章学到的某些图像处理功能
- en: With this basic image manipulation knowledge, we are ready to learn how to add
    some cool effects to an image. In the next chapter, we will see how to enhance
    an image.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握了基本的图像处理知识后，我们就可以学习如何给图像添加一些酷炫的效果了。在下一章中，我们将看到如何增强图像。
