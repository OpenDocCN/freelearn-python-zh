- en: Getting started with MicroPython
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用MicroPython
- en: It's an exciting time to work with technologies such as MicroPython. They make
    tiny and inexpensive hardware devices more accessible, as you can use a high-level
    language such as Python to code on them. Tasks such as retrieving data from web
    services can easily be done in a few lines of code, compared to other microcontroller
    languages that would require many more steps, because they operate at such a low
    level compared to Python. This is very empowering, as you will get results faster
    and be able to iterate through different designs and prototypes in a shorter amount
    of time.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是使用MicroPython等技术的激动人心的时刻。它们使得微小和廉价的硬件设备更容易访问，因为你可以使用高级语言如Python来编程。与其他微控制器语言相比，比如从Web服务中检索数据可以轻松地用几行代码完成，因为它们与Python相比操作的层级更低，需要更多的步骤。这非常有力量，因为你将能够更快地获得结果，并在更短的时间内迭代不同的设计和原型。
- en: In this chapter, we will provide you with the essential skills to get started
    and be productive with the software and hardware needed to run MicroPython. You'll
    learn how to update the firmware and libraries on the device. Recipes to load
    your first program on the board and use advanced features, such as auto-reloading
    your code, will also be covered. Finally, a number of recipes will cover the usage
    of the REPL that is a powerful way to quickly interact and experiment with the
    available components on MicroPython devices.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为您提供运行MicroPython所需的软件和硬件的基本技能。您将学习如何更新设备上的固件和库。还将介绍一些加载第一个程序并使用高级功能（如自动重新加载代码）的方法。最后，将介绍一些使用REPL的方法，这是一种快速与MicroPython设备上的可用组件进行交互和实验的强大方式。
- en: 'In this chapter, we will be covering the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Flashing the microcontroller firmware
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 刷新微控制器固件
- en: Executing your first program
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行你的第一个程序
- en: Using screen to access the REPL
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用屏幕访问REPL
- en: Using Mu to access the REPL
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mu访问REPL
- en: Executing commands in the REPL
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在REPL中执行命令
- en: Using the auto-reload feature
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自动重新加载功能
- en: Updating the CircuitPython Library
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新CircuitPython库
- en: What is MicroPython?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是MicroPython？
- en: MicroPython is the creation of the Australian programmer and physicist Damien
    George, who launched a Kickstarter campaign in 2013 to support the development
    of the language and the initial microcontroller hardware that it would run on.
    After the success of the project, more and more devices (which have a variety
    of chipsets from different manufactures) have become supported by MicroPython,
    creating a wide range of devices from which to choose when you make a project
    using MicroPython.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: MicroPython是澳大利亚程序员和物理学家Damien George的创造，他在2013年发起了一个Kickstarter活动，以支持该语言的开发和最初的微控制器硬件。在项目成功之后，越来越多的设备（具有不同制造商的各种芯片组）得到了MicroPython的支持，为使用MicroPython制作项目时提供了多种选择。
- en: MicroPython is a lean implementation of the Python 3 programming language that
    is capable of running on hardware with very limited resources, such as microcontrollers.
    MicroPython has implemented the majority of features in the Python programming
    language, such as functions, classes, lists, dictionaries, strings, reading and
    writing files, list comprehensions, and exception handling.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: MicroPython是Python 3编程语言的精简实现，能够在硬件资源非常有限的设备上运行，比如微控制器。MicroPython已经实现了Python编程语言的大部分功能，比如函数、类、列表、字典、字符串、读写文件、列表推导和异常处理。
- en: The REPL is also implemented and can be interacted with using a serial connection.
    A selection of the core Python libraries is provided, which allows a range of
    applications to be implemented. The JSON and `socket` libraries allow web client
    and server implementations, making Python-based **Internet of Things** (**IoT**)
    projects on microcontrollers a reality.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: REPL也已经实现，并且可以通过串行连接进行交互。提供了一系列核心Python库，可以实现各种应用。JSON和`socket`库允许Web客户端和服务器的实现，使得基于Python的物联网（IoT）项目在微控制器上成为现实。
- en: By bringing one of the most popular and easy to use programming languages to
    the exciting world of embedded computing, MicroPython opens up new doors for makers
    and entrepreneurs to bring their creations to life. This book will explore the
    different ways to leverage the MicroPython language with a variety of unique microcontroller
    devices that each bring a different set of capabilities to the table.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将最受欢迎和易于使用的编程语言之一引入到嵌入式计算的激动人心的世界中，MicroPython为创客和企业家打开了新的大门，让他们的创意得以实现。本书将探索不同的方法来利用MicroPython语言与各种独特的微控制器设备，每种设备都带来了不同的功能。
- en: One of the unique and fascinating aspects of running MicroPython on microcontrollers
    is that it does not run on an **operating system** (**OS**), but instead runs
    directly on bare metal. These unique characteristics manifest themselves in many
    ways, such as the ability to run your Python code at the instant the hardware
    is powered on, as there is no OS that needs to boot up.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在微控制器上运行MicroPython的独特和迷人之处之一是它不在操作系统（OS）上运行，而是直接在裸金属上运行。这些独特的特性以多种方式表现出来，比如在硬件上电的瞬间就能运行你的Python代码，因为不需要启动操作系统。
- en: The other aspect of this is that the Python code has direct access to control
    and interact with the hardware, creating hardware possibilities that would not
    be possible with a typical Python application running on an OS.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个方面是Python代码直接访问硬件并与之交互，创造了一些在典型Python应用程序上不可能实现的硬件可能性。
- en: As we know now that MicroPython runs on a microcontroller, let's see what microcontrollers
    are all about.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道MicroPython可以在微控制器上运行，让我们看看微控制器到底是什么。
- en: What is a microcontroller?
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是微控制器？
- en: Microcontrollers are small computers on a single chip. They usually include
    a CPU, memory, and input/output peripherals. They will have more limited computing
    resources than what might be found on a modern PC.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 微控制器是单芯片上的小型计算机。它们通常包括CPU、内存和输入/输出外设。它们的计算资源比现代PC上可能找到的要有限。
- en: Compared to a PC, however, they can be made to a much smaller dimension, allowing
    them to be embedded in all sorts of electronic and mechanical devices. Their power
    consumption is often far less in orders of magnitude, thus providing battery life
    for days. They have a much lower cost per unit, which opens up possibilities of
    having hundreds of such devices to collect sensor data across a broad geographical
    area and still be financially feasible.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与PC相比，它们可以制作成更小的尺寸，可以嵌入各种电子和机械设备中。它们的功耗通常要小得多，因此可以提供数天的电池寿命。它们的单位成本要低得多，这就打开了在广泛地理区域收集传感器数据的数百个这样的设备的可能性，而且仍然是经济可行的。
- en: Traditionally, it was a difficult process to create applications on microcontrollers
    because you would have to write very low-level code that took time and was difficult
    to debug. MicroPython brings the ease of use of Python to microcontroller. It's
    able to provide this easier interaction with the hardware, and yet still work
    in such a resource constrained environment and provide a wide range of functionality
    with a strong level of responsiveness.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，在微控制器上创建应用程序是一个困难的过程，因为你必须编写非常低级的代码，这需要时间，而且很难调试。MicroPython将Python的易用性带到了微控制器上。它能够提供与硬件的更轻松交互，同时在资源受限的环境中工作，并提供广泛的功能和高度的响应性。
- en: What is CircuitPython?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是CircuitPython？
- en: CircuitPython is a branch of MicroPython created by Adafruit Industries that
    makes working with microcontrollers simpler. It has excellent support for many
    of the sensors and components that come with Adafruit devices through its Python
    libraries. It also allows code to be easily loaded and run without having to install
    any additional software applications by exposing the microcontroller's storage
    as a disk drive.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: CircuitPython是Adafruit Industries创建的MicroPython分支，使得与微控制器的工作更简单。它通过Python库对许多传感器和Adafruit设备的组件提供了出色的支持。它还允许代码轻松加载和运行，而无需安装任何额外的软件应用程序，通过将微控制器的存储公开为磁盘驱动器。
- en: Generally, the differences between MicroPython and CircuitPython are minor,
    and, in many instances, code will run the same on both implementations.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，MicroPython和CircuitPython之间的差异很小，在许多情况下，代码在两种实现上都会运行相同。
- en: What is the Circuit Playground Express?
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Circuit Playground Express？
- en: 'The Adafruit Circuit Playground Express is an inexpensive, yet versatile microcontroller
    with a rich set of input and output devices that comes built-in with the device.
    The following are some of the main hardware features present in this device:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Adafruit Circuit Playground Express是一款价格便宜但功能丰富的微控制器，具有丰富的输入和输出设备，这些设备已经内置在设备中。以下是该设备中的一些主要硬件特性：
- en: 10 mini NeoPixels, each with the ability to display a full range of colors
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10个迷你NeoPixels，每个都能显示全色彩范围
- en: As motion sensor (triple-axis accelerometer with tap detection and free-fall
    detection)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为运动传感器（带有敲击检测和自由落体检测的三轴加速度计）
- en: A temperature sensor
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个温度传感器
- en: A light sensor
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个光传感器
- en: A sound sensor
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个声音传感器
- en: A mini speaker
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个迷你扬声器
- en: Two push buttons, which are labeled A and B
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个带有标签A和B的按钮
- en: A slide switch
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个滑动开关
- en: An infrared receiver and transmitter
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个红外线接收器和发射器
- en: Eight alligator-clip friendly input/output pins
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 八个鳄鱼夹友好的输入/输出引脚
- en: Supports I2C and PWM output
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持I2C和PWM输出
- en: Seven capacitive touch inputs
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 七个电容触摸输入
- en: A red LED
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个红色LED
- en: A reset button
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个复位按钮
- en: An ATSAMD21 ARM Cortex M0 processor, running at 3.3 V and 48 MHz
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个运行在3.3V和48MHz的ATSAMD21 ARM Cortex M0处理器
- en: 2 MB of flash storage
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2MB的闪存存储
- en: A micro USB port for connecting to a PC
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于连接PC的微型USB端口
- en: These will be the only required devices for eight chapters. Later chapters will
    introduce a different set of devices.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将是八章中唯一需要的设备。后面的章节将介绍一组不同的设备。
- en: Please refer to [https://learn.adafruit.com/welcome-to-circuitpython?view=all](https://learn.adafruit.com/welcome-to-circuitpython?view=all)
    for more information.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[https://learn.adafruit.com/welcome-to-circuitpython?view=all](https://learn.adafruit.com/welcome-to-circuitpython?view=all)获取更多信息。
- en: Where to buy
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在哪里购买
- en: The Adafruit Circuit Playground Express can be purchased directly from Adafruit
    ([https://www.adafruit.com/product/3333](https://www.adafruit.com/product/3333)).
    It can also be purchased from online retailers, such as Amazon and Pimoroni.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Adafruit Circuit Playground Express可以直接从Adafruit（[https://www.adafruit.com/product/3333](https://www.adafruit.com/product/3333)）购买。它也可以从在线零售商购买，如亚马逊和Pimoroni。
- en: For the purpose of this book, we recommend buying the Circuit Playground Express
    – Base Kit ([https://www.adafruit.com/product/3517](https://www.adafruit.com/product/3517))
    and also includes a USB cable and battery pack so that projects can easily be
    made portable.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书的目的，我们建议购买Circuit Playground Express - 基础套件（[https://www.adafruit.com/product/3517](https://www.adafruit.com/product/3517)），还包括USB电缆和电池包，以便项目可以轻松地制作成便携式。
- en: References
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考
- en: 'Here are a few references:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考：
- en: The MicroPython web page at [http://micropython.org](http://micropython.org)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://micropython.org](http://micropython.org)上的MicroPython网页'
- en: The MicroPython project on Kickstarter at [https://www.kickstarter.com/projects/214379695/micro-python-python-for-microcontrollers](https://www.kickstarter.com/projects/214379695/micro-python-python-for-microcontrollers)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.kickstarter.com/projects/214379695/micro-python-python-for-microcontrollers](https://www.kickstarter.com/projects/214379695/micro-python-python-for-microcontrollers)上的Kickstarter上的MicroPython项目'
- en: An article in microcontrollers on PC Mag at [https://www.pcmag.com/encyclopedia/term/46924/microcontroller](https://www.pcmag.com/encyclopedia/term/46924/microcontroller)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.pcmag.com/encyclopedia/term/46924/microcontroller](https://www.pcmag.com/encyclopedia/term/46924/microcontroller)上的PC
    Mag上的微控制器文章'
- en: The Adafruit learning guide on CircuitPython at [https://learn.adafruit.com/welcome-to-circuitpython/what-is-circuitpython](https://learn.adafruit.com/welcome-to-circuitpython/what-is-circuitpython)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CircuitPython的Adafruit学习指南位于[https://learn.adafruit.com/welcome-to-circuitpython/what-is-circuitpython](https://learn.adafruit.com/welcome-to-circuitpython/what-is-circuitpython)
- en: The CircuitPython official documentation at [https://circuitpython.readthedocs.io](https://circuitpython.readthedocs.io)
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CircuitPython官方文档位于[https://circuitpython.readthedocs.io](https://circuitpython.readthedocs.io)
- en: Flashing the microcontroller firmware
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 刷新微控制器固件
- en: In this recipe, we will show how to flash the firmware on the Circuit Playground
    Express with the latest CircuitPython firmware. There are two reasons to this
    before you start working with this device. First, the device also supports the
    Microsoft MakeCode programming environment and flashing the device with the CircuitPython
    firmware prepares it for use with the Python language.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将展示如何使用最新的CircuitPython固件在Circuit Playground Express上刷新固件。在开始使用该设备之前，有两个原因需要这样做。首先，该设备还支持Microsoft
    MakeCode编程环境，并且使用CircuitPython固件刷新设备可以准备好使用Python语言。
- en: Second, the CircuitPython language is under constant development, with a release
    every few months, so it is a good idea to update the firmware from time to time
    to load the latest release of the language onto the board.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，CircuitPython语言正在不断发展，每隔几个月发布一次版本，因此定期更新固件以加载最新版本的语言到板上是个好主意。
- en: Getting ready
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This chapter's introduction gives us directions on how to buy the Circuit Playground
    Express, which will be required for all the recipes in this chapter. A USB micro
    B cable and a computer running macOS, Windows, or Linux will also be required.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的介绍为我们提供了购买Circuit Playground Express的指导，这对本章中的所有教程都是必需的。还需要一个USB micro B电缆和运行macOS、Windows或Linux的计算机。
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s look at the following steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下步骤：
- en: Download the latest CircuitPython Circuit Playground Express UF2 file ([https://github.com/adafruit/circuitpython/releases/latest](https://github.com/adafruit/circuitpython/releases/latest)).
    The name of the UF2 file for version 3.1.2 of CircuitPython is `adafruit-circuitpython-circuitplayground_express-3.1.2.uf2`.
    For each release of CircuitPython, there are many different `uf2` files for different
    supported microcontrollers. Make sure that you download the file for the Circuit
    Playground Express device.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载最新的CircuitPython Circuit Playground Express UF2文件([https://github.com/adafruit/circuitpython/releases/latest](https://github.com/adafruit/circuitpython/releases/latest))。CircuitPython
    3.1.2版本的UF2文件名为`adafruit-circuitpython-circuitplayground_express-3.1.2.uf2`。对于每个CircuitPython版本，都有许多不同的支持的微控制器的`uf2`文件。确保下载适用于Circuit
    Playground Express设备的文件。
- en: We will use the latest stable version of CircuitPython in this recipe, which
    is currently 3.1.2.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用最新的稳定版本的CircuitPython，目前是3.1.2。
- en: Connect the USB cable to the Circuit Playground Express and the computer.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将USB电缆连接到Circuit Playground Express和计算机。
- en: Double-click the reset button located at the center of the board. If all goes
    well, you will see all the LEDs turn green; otherwise, there is most likely an
    issue with the USB cable being used. In some instances, if a double-click doesn't
    work, try a single click of the reset button.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击位于板中心的复位按钮。如果一切顺利，您将看到所有LED变为绿色；否则，很可能是使用的USB电缆出现了问题。在某些情况下，如果双击不起作用，请尝试单击复位按钮。
- en: 'You will see a new disk appear called CPLAYBOOT:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一个名为CPLAYBOOT的新磁盘出现：
- en: '![](assets/8c4d1da7-3789-459e-a278-debe217f8335.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8c4d1da7-3789-459e-a278-debe217f8335.png)'
- en: Copy the UF2 file into this drive.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将UF2文件复制到此驱动器中。
- en: 'Once the UF2 file has been fully written to the device, the firmware will be
    updated and a new drive will appear, called CIRCUITPY:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦UF2文件完全写入设备，固件将被更新，一个新的驱动器将出现，名为CIRCUITPY：
- en: '![](assets/2ad4585f-ecc2-47fd-91db-8d7dce9cf589.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2ad4585f-ecc2-47fd-91db-8d7dce9cf589.png)'
- en: Now, our Circuit Playground Express can be used.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的Circuit Playground Express可以使用了。
- en: How it works...
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Traditionally, special software has had to be installed and used to handle the
    delicate process of flashing a microcontroller. Microsoft developed the UF2 method,
    which greatly simplifies the process by not requiring any special software or
    command-line execution to flash the microcontroller.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，需要安装和使用特殊软件来处理微控制器的刷新过程。微软开发了UF2方法，大大简化了该过程，不需要任何特殊软件或命令行执行来刷新微控制器。
- en: Once the board is placed into the bootloader mode, it will then expect a UF2
    file to be saved to it. When the UF2 is copied to the drive, the microcontroller
    will detect that the file copy has been completed and then automatically proceed
    to flash the microcontroller and restart the device, at which point the device
    is reattached and ready to be used.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦板子进入引导程序模式，它将期望保存一个UF2文件。当UF2文件复制到驱动器时，微控制器将检测到文件复制已完成，然后自动进行微控制器刷新并重新启动设备，此时设备将重新连接并准备好使用。
- en: The UF2 file format can be found at[https://github.com/Microsoft/uf2](https://github.com/Microsoft/uf2).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: UF2文件格式可以在[https://github.com/Microsoft/uf2](https://github.com/Microsoft/uf2)找到。
- en: There's more...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The UF2 approach to flashing microcontroller firmware makes the process easier
    and faster compared to previous approaches. Not all MicroPython boards support
    the UF2 method and so require the more involved approach of installing special
    software to do the firmware flashing. The exact process and software required
    varies between different boards and manufactures.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前的方法相比，UF2方法使刷新微控制器固件的过程更加简单和快速。并非所有MicroPython板都支持UF2方法，因此需要更复杂的方法来安装特殊软件来进行固件刷新。不同的板和制造商之间所需的确切过程和软件各不相同。
- en: When you use this flashing software, it will frequently require that you know
    the exact name of the serial device that the device appears as on your computer.
    The naming of these devices varies between Windows, Linux, and macOS. This type
    of software is usually required to be run in the Terminal, so you'll have to have
    some command-line knowledge to inter with it. For all these reasons, the use of
    UF2 with supported devices such as the Circuit Playground Express is the preferred
    way of starting your experimentation with MicroPython.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用这个闪存软件时，通常需要知道设备在计算机上显示为的串行设备的确切名称。这些设备的命名在Windows、Linux和macOS之间有所不同。这种类型的软件通常需要在终端中运行，因此您需要一些命令行知识来与之交互。出于所有这些原因，使用支持的设备（如Circuit
    Playground Express）与UF2是开始使用MicroPython进行实验的首选方式。
- en: See also
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'There are a number of resources, both on the Adafruit and Microsoft websites,
    relating to the process described in this recipe. Here are a few references:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本文描述的过程，Adafruit和Microsoft网站上有许多资源。以下是一些参考资料：
- en: Documentation of updating CircuitPython can be found at [https://learn.adafruit.com/adafruit-circuit-playground-express/circuitpython-quickstart](https://learn.adafruit.com/adafruit-circuit-playground-express/circuitpython-quickstart).
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关更新CircuitPython的文档可以在[https://learn.adafruit.com/adafruit-circuit-playground-express/circuitpython-quickstart](https://learn.adafruit.com/adafruit-circuit-playground-express/circuitpython-quickstart)找到。
- en: The UF2 process is explained in more detail at [https://makecode.com/blog/one-chip-to-flash-them-all](https://makecode.com/blog/one-chip-to-flash-them-all).
    [](https://makecode.com/blog/one-chip-to-flash-them-all)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关UF2过程的详细说明，请参阅[https://makecode.com/blog/one-chip-to-flash-them-all](https://makecode.com/blog/one-chip-to-flash-them-all)。[](https://makecode.com/blog/one-chip-to-flash-them-all)
- en: Executing your first program
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行您的第一个程序
- en: In this recipe, we will show you how to load your first program on the Circuit
    Playground Express and how to modify the program and reload it. The program will
    then light one of the ten NeoPixels that come available on the board.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将向您展示如何在Circuit Playground Express上加载您的第一个程序，以及如何修改程序并重新加载它。然后，程序将点亮板上可用的十个NeoPixel中的一个。
- en: Getting ready
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Once the Circuit Playground Express has had the CircuitPython firmware flashed,
    you may load Python scripts onto the board and run them.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Circuit Playground Express刷入了CircuitPython固件，您可以将Python脚本加载到板子上并运行它们。
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Let''s have a look at how to do this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何做到这一点：
- en: Make sure that the board is connected to your computer with a USB cable and
    that the `CIRCUITPY` drive appears.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保板子通过USB电缆连接到计算机，并且`CIRCUITPY`驱动器出现。
- en: 'Save a text file on the drive with the following contents and name it `main.py`:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在驱动器上保存一个文本文件，内容如下，并将其命名为`main.py`：
- en: '[PRE0]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once the file has been saved, eject the drive, and remove and reconnect the
    USB cable from the computer.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件后，弹出驱动器，然后从计算机上断开并重新连接USB电缆。
- en: The first NeoPixel on the drive should light up with a red color.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 驱动器上的第一个NeoPixel应该点亮为红色。
- en: Open the `main.py` file in your text editor of choice and change the `cpx.pixels[0]`
    line to `cpx.pixels[1]`. Save the file. This change will make the second NeoPixel
    light up instead of the first.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您选择的文本编辑器中打开`main.py`文件，并将`cpx.pixels[0]`行更改为`cpx.pixels[1]`。保存文件。这个更改将使第二个NeoPixel点亮，而不是第一个。
- en: Eject the drive, remove, and then reconnect the USB cable to see the change
    take effect.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弹出驱动器，然后断开，重新连接USB电缆以使更改生效。
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the device is turned on it looks for certain files, such as `code.py` or
    `main.py`, that, if found, will be executed as part of the startup process. In
    this way, you can specify the code you want run when the device is powered on.
    The script first imports the `adafruit_circuitplayground.express` library so that
    it can control the NeoPixels. The first NeoPixel is set to the color red by giving
    it a set of appropriate RGB values.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当设备打开时，它会寻找某些文件，例如`code.py`或`main.py`，如果找到，将作为启动过程的一部分执行。通过这种方式，您可以指定在设备上电时要运行的代码。脚本首先导入`adafruit_circuitplayground.express`库，以便它可以控制NeoPixels。通过给它一组适当的RGB值，将第一个NeoPixel设置为红色。
- en: Finally, the script will sleep for 60 seconds so that the LED remains lit for
    one minute before the script ends execution.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，脚本将休眠60秒，以便LED在脚本结束执行前保持点亮一分钟。
- en: There's more...
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Now that the board has been loaded with a Python script, it can be disconnected
    from the computer and have the battery pack attached to it. Once the battery pack
    is powered on by the script, it should run and light up the selected NeoPixel.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，板子已经加载了一个Python脚本，可以从计算机断开连接，并连接电池组。一旦电池组由脚本供电，它应该运行并点亮所选的NeoPixel。
- en: This is a simple way to create portable and inexpensive projects that can have
    a code running directly from the board with no need for a connected PC and can
    be powered simply by three AAA batteries.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建便携且廉价的项目的简单方法，可以直接从板上运行代码，无需连接PC，并且可以通过三节AAA电池简单供电。
- en: See also
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: There are a number of files that CircuitPython looks for when it boots up, which
    are described at [https://learn.adafruit.com/welcome-to-circuitpython?view=all#naming-your-program-file-7-30](https://learn.adafruit.com/welcome-to-circuitpython?view=all#naming-your-program-file-7-30).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: CircuitPython在启动时寻找的一些文件的描述在[https://learn.adafruit.com/welcome-to-circuitpython?view=all#naming-your-program-file-7-30](https://learn.adafruit.com/welcome-to-circuitpython?view=all#naming-your-program-file-7-30)中有描述。
- en: Using screen to access the REPL
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用屏幕访问REPL
- en: Linux and macOS have powerful Terminal emulators, such as `screen`, that can
    be used to directly connect to the device's **Read-Eval-Print Loop** (**REPL**)
    over a serial (USB) connection. This recipe will show how to connect to the REPL
    and start running a Python code interactively.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Linux和macOS有强大的终端仿真器，如`screen`，可以用于通过串行（USB）连接直接连接到设备的**读取-求值-打印循环**（**REPL**）。本文将展示如何连接到REPL并开始交互式地运行Python代码。
- en: Getting ready
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Either macOS or a Linux computer may be used for this recipe and may require
    the `screen` command to be available. On macOS, the Screen application is built-in
    and so requires no installation. On Ubuntu, the Linux Screen can be installed
    with the `apt install screen` command.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方可以在macOS或Linux计算机上使用，并可能需要`screen`命令可用。在macOS上，Screen应用程序是内置的，因此无需安装。在Ubuntu上，可以使用`apt
    install screen`命令安装Linux Screen。
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s have a look at how to connect the REPL and run the code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何连接REPL并运行代码：
- en: Open the computer's Terminal application.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开计算机的终端应用程序。
- en: List device names before plugging in device by running `ls /dev/ttyACM*` on
    Linux or `ls /dev/tty.*` on macOS.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Linux上运行`ls /dev/ttyACM*`或在macOS上运行`ls /dev/tty.*`来列出插入设备之前的设备名称。
- en: Connect the board to your computer with a USB cable.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用USB电缆将板连接到计算机。
- en: List the device names again with the same command to discover the device name
    of the board.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的命令再次列出设备名称，以发现板的设备名称。
- en: If the device name is `/dev/ttyACM0`, then the `screen` command would be `screen
    /dev/ttyACM0 115200`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果设备名称为`/dev/ttyACM0`，则`screen`命令将是`screen /dev/ttyACM0 115200`。
- en: Enter the command in the Terminal and start the Screen application.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中输入命令并启动Screen应用程序。
- en: 'If Screen is able to connect successfully, the Python REPL should appear on
    the Terminal with output similar to the following text:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Screen能够成功连接，Python REPL应该会出现在终端上，并显示类似以下文本的输出：
- en: '[PRE1]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If the prompt doesn''t appear, you can try pressing *Ctrl* + *C* and then press
    *Enter*, which will stop the currently running Python script and run the REPL
    with the following message:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提示未出现，可以尝试按下*Ctrl* + *C*，然后按*Enter*，这将停止当前正在运行的Python脚本，并使用以下消息运行REPL：
- en: '[PRE2]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once the REPL prompt appears, we will have to test if the prompt is working
    by evaluating the `1+1` expression. It should produce the following output:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦REPL提示出现，我们将必须通过评估`1+1`表达式来测试提示是否正常工作。它应该产生以下输出：
- en: '[PRE3]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Circuit Playground Express exposes a serial device over the USB connection,
    which can be accessed by a number of different Terminal emulator programs. Besides
    `screen`, there are other programs, such as `picocom` and `minicom`, that may
    also be used.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Circuit Playground Express通过USB连接公开了串行设备，可以通过多种不同的终端仿真程序访问。除了`screen`之外，还有其他程序，如`picocom`和`minicom`，也可以使用。
- en: The last parameter that was set as 115,200 in the command sets the baud rate
    of the connection, which should be set at that speed. Once the connection is successfully
    established, an interactive session is commenced that allows expressions to be
    directly evaluated on the device and the output is directly displayed on the Terminal.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令中设置的最后一个参数为115,200，设置了连接的波特率，应该以该速度设置。一旦成功建立连接，就会开始一个交互式会话，允许直接在设备上评估表达式，并且输出直接显示在终端上。
- en: There's more...
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Many of the recipes in the book will introduce the different parts of a script
    using the REPL. This will give you a chance to get immediate feedback as you run
    each snippet of code. Once you've entered the different snippets in the REPL you
    can also use REPL features to assist in your experimentation with the code. You
    can use the *up* and *down* arrow keys to move through the history of commands
    that have been entered in the REPL. For example, if you had just executed a line
    of code in the REPL that turned on a specific pixel on the board, you could press
    the *up* key and change which pixel is lit up by editing the line and pressing
    *Enter* again.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 书中的许多配方将介绍使用REPL的脚本的不同部分。这将使您有机会在运行每个代码片段时获得即时反馈。一旦您在REPL中输入了不同的片段，您还可以使用REPL功能来辅助您对代码进行实验。您可以使用*上*和*下*箭头键来浏览已在REPL中输入的命令历史记录。例如，如果您刚刚在REPL中执行了一行代码，打开了板上的特定像素，您可以按*上*键，通过编辑该行并再次按*Enter*来更改点亮的像素。
- en: See also
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: The use of the REPL on CircuitPython boards is discussed in detail at [https://learn.adafruit.com/welcome-to-circuitpython/the-repl](https://learn.adafruit.com/welcome-to-circuitpython/the-repl).
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关在CircuitPython板上使用REPL的详细信息，请参阅[https://learn.adafruit.com/welcome-to-circuitpython/the-repl](https://learn.adafruit.com/welcome-to-circuitpython/the-repl)。
- en: Details on using the REPL to access MicroPython can be found at [https://learn.adafruit.com/micropython-basics-how-to-load-micropython-on-a-board/serial-terminal](https://learn.adafruit.com/micropython-basics-how-to-load-micropython-on-a-board/serial-terminal).
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关使用REPL访问MicroPython的详细信息，请访问[https://learn.adafruit.com/micropython-basics-how-to-load-micropython-on-a-board/serial-terminal](https://learn.adafruit.com/micropython-basics-how-to-load-micropython-on-a-board/serial-terminal)。
- en: Using Mu to access the REPL
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Mu访问REPL
- en: Mu is an easy-to-use graphical code editor written in Python that runs on Windows,
    macOS, Linux, and the Raspberry Pi. In this recipe, we will learn how to install
    Mu and use it to access the REPL on the Circuit Playground Express.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Mu是一个易于使用的图形代码编辑器，用Python编写，可在Windows、macOS、Linux和树莓派上运行。在这个配方中，我们将学习如何安装Mu并使用它来访问Circuit
    Playground Express上的REPL。
- en: Getting ready
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires Python and `pip` to be installed on the computer. The Mu
    editor will be installed using the `pip` command, so this recipe can optionally
    be run within `virtualenv`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方要求计算机上安装Python和`pip`。Mu编辑器将使用`pip`命令安装，因此可以选择在`virtualenv`中运行此配方。
- en: How to do it...
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s have a look at how to do this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何做到这一点：
- en: Execute the following `pip3 install mu-editor` command to install the Mu editor.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下`pip3 install mu-editor`命令以安装Mu编辑器。
- en: Run the `mu-editor` command to start the editor.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`mu-editor`命令启动编辑器。
- en: 'The first time you run the editor, it will ask which mode it should run in.
    On the following screenshot, select the Adafruit CircuitPython mode:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次运行编辑器时，它将询问应以哪种模式运行。在下面的屏幕截图中，选择Adafruit CircuitPython模式：
- en: '![](assets/7c502520-9416-4efa-93be-c1d8a5e59d3d.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7c502520-9416-4efa-93be-c1d8a5e59d3d.png)'
- en: Click the Serial button on the toolbar to open a REPL session with the device.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击工具栏上的串行按钮以与设备打开REPL会话。
- en: On Linux systems, if a Cannot connect to device error appears, then exit the
    editor and start it again with the `sudo /full/path/to/mu-editor` command, where
    the absolute path to the editor is given.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Linux系统上，如果出现“无法连接到设备”错误，则退出编辑器，并使用`sudo /full/path/to/mu-editor`命令重新启动编辑器，其中给出编辑器的绝对路径。
- en: 'Once a connection is successfully made to the device, you can test the REPL
    by evaluating the `1+1` expression, which should produce output like the following
    screenshot:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦成功连接到设备，您可以通过评估`1+1`表达式来测试REPL，这应该会产生如下屏幕截图所示的输出：
- en: '![](assets/ce5e2439-ca20-4f8b-8c5e-3f29f4bf7ab1.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ce5e2439-ca20-4f8b-8c5e-3f29f4bf7ab1.png)'
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you click on the Serial button in the Mu editor, it will attempt to open
    a serial connection to the board. If successful, it captures your input, sends
    it the device, and displays the output just as a typical Terminal emulator would.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在Mu编辑器中点击串行按钮时，它将尝试打开与板的串行连接。如果成功，它会捕获您的输入，将其发送到设备，并显示输出，就像典型的终端仿真器一样。
- en: The beauty of this application is that it works on all the major desktop OSes
    and automatically finds the correct device address without the need to manually
    specify it, as is required by your typical Terminal emulators. It also has a very
    simple and approachable layout, making it easy to use for first-time users to
    connect to microcontrollers.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序的美妙之处在于它适用于所有主要的桌面操作系统，并且可以自动找到正确的设备地址，无需手动指定，这是Typical Terminal emulators所必需的。它还具有非常简单和易于接近的布局，使得首次用户连接到微控制器变得容易使用。
- en: There's more...
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The Mu editor is a great graphical application to begin with when you first
    start working with MicroPython. Its simple and intuitive design makes it easy
    to get productive fast and makes it fun to explore its different features. Beyond
    its REPL features, it also has the main part of the Screen, which can be used
    to edit and save Python scripts. It has code-editing features such as code completion
    and will show helpful popups with details on a function's accepted arguments and
    documentation on what the function does.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Mu编辑器是一个很棒的图形应用程序，当你第一次开始使用MicroPython时，它是一个很好的开始。它简单直观的设计使得你可以快速提高生产力，并且很有趣地探索其不同的功能。除了REPL功能之外，它还有主要部分的屏幕，可以用来编辑和保存Python脚本。它具有代码编辑功能，如代码完成，并将显示有关函数接受参数和函数功能的详细弹出窗口。
- en: See also
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: The GitHub repository for the project can be found at [https://github.com/mu-editor/mu](https://github.com/mu-editor/mu).
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该项目的GitHub存储库位于[https://github.com/mu-editor/mu](https://github.com/mu-editor/mu)。
- en: The projects homepage can be found at[https://codewith.mu/](https://codewith.mu/)[.](https://github.com/mu-editor/mu)
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目主页位于[https://codewith.mu/](https://codewith.mu/)[.](https://github.com/mu-editor/mu)
- en: Executing commands in the REPL
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在REPL中执行命令
- en: The following recipe shows different ways that the REPL can be used.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配方展示了REPL的不同用法。
- en: Getting ready
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Any one method can be used from the preceding two recipes here to obtain a REPL.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从前面的两个配方中使用任一种方法来获取REPL。
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the REPL through your preferred application.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过您喜欢的应用程序打开REPL。
- en: 'Many of the same capabilities provided by the REPL in CPython also work in
    the MicroPython implementation. The last returned value can be accessed with `_`:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与CPython中的REPL提供的许多相同功能在MicroPython实现中也可以使用。最后一个返回的值可以通过`_`访问：
- en: '[PRE4]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Continuation lines are also supported, making it possible to define functions
    or `for` loops through the REPL, as shown in the following output:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还支持连续行，这样可以通过REPL定义函数或`for`循环，如下面的输出所示：
- en: '[PRE5]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Arbitrary precision integers are also supported, even on constrained microcontroller
    hardware. The following code shows arithmetic with integers beyond the limit of
    a 64-bit integer value:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 即使在受限的微控制器硬件上，也支持任意精度整数。以下代码显示了超出64位整数值限制的整数的算术运算：
- en: '[PRE6]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The REPL implementation has most of the features that we've come to know and
    love in the CPython implementation. The MicroPython implementation has to deal
    with tough hardware constraints so that it can run on a microcontroller. But,
    even with these constraints, the end user experience of the REPL in both implementations
    is almost identical, making it an easy transition for Python developers.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: REPL实现具有我们在CPython实现中所熟悉和喜爱的大多数功能。MicroPython实现必须处理严格的硬件约束，以便在微控制器上运行。但是，即使在这些约束下，两种实现中REPL的最终用户体验几乎是相同的，这使得对Python开发人员来说很容易过渡。
- en: There's more...
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The REPL can be an invaluable tool when you want to experiment with certain
    MicroPython libraries or certain features on a device. It lets you easily import
    different Python modules and call functions provided by those libraries in a more
    direct fashion to discover how they will actually interact with the hardware.
    Many components on these microcontrollers can be fine-tuned for different project
    needs. The REPL frequently ends up being an ideal place to do this fine-tuning.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要尝试某些MicroPython库或设备上的某些功能时，REPL可以成为一个宝贵的工具。它让您可以轻松地导入不同的Python模块，并以更直接的方式调用这些库提供的函数，以发现它们实际上如何与硬件交互。这些微控制器上的许多组件可以根据不同的项目需求进行微调。REPL经常成为进行这种微调的理想场所。
- en: See also
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: The MicroPython Interactive Interpreter Mode (REPL) is documented at [http://docs.micropython.org/en/latest/reference/repl.html](http://docs.micropython.org/en/latest/reference/repl.html).
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MicroPython交互式解释器模式（REPL）的文档位于[http://docs.micropython.org/en/latest/reference/repl.html](http://docs.micropython.org/en/latest/reference/repl.html)。
- en: Documentation on the MicroPython built-in types can be found at [http://docs.micropython.org/en/latest/genrst/builtin_types.html](http://docs.micropython.org/en/latest/genrst/builtin_types.html).
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[http://docs.micropython.org/en/latest/genrst/builtin_types.html](http://docs.micropython.org/en/latest/genrst/builtin_types.html)找到MicroPython内置类型的文档。
- en: Using the auto-reload feature
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自动重新加载功能
- en: The following recipe shows how to use auto-reload so that the cycle of editing
    and running code can become much faster and more fun.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配方显示了如何使用自动重载，以便编辑和运行代码的循环可以变得更快更有趣。
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Any of the methods used in the previous recipes can be used here to obtain a
    REPL.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前使用的任何方法都可以用于获取REPL。
- en: How to do it...
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Let''s have a look at how to do this:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何做到这一点：
- en: Open the `main.py` file and save the `print('hi there')` statement in the file.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`main.py`文件，并保存文件中的`print('hi there')`语句。
- en: 'Open the REPL through your preferred application. With the REPL open, press
    *Ctrl* + *D*. The following output should appear:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过您喜欢的应用程序打开REPL。打开REPL后，按下*Ctrl* + *D*。应出现以下输出：
- en: '[PRE7]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Edit the `main.py` file and change the contents to `print(''hi there again'')`.
    The following output should be automatically displayed:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`main.py`文件，并将内容更改为`print('hi there again')`。应自动显示以下输出：
- en: '[PRE8]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By pressing *Ctrl* + *D*, the board will enter into auto-reload mode. In this
    mode, you can open the `main.py` file in your text editor of choice, and, the
    moment you save the file, the board detects that a change has happened and performs
    a soft reboot.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按下*Ctrl* + *D*，板子将进入自动重载模式。在这种模式下，您可以在您选择的文本编辑器中打开`main.py`文件，并且在保存文件的瞬间，板子会检测到发生了变化，并执行软重启。
- en: The soft reboot can be seen in the Screen output and then the new version of
    the code is executed with its output displayed immediately.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 软重启可以在屏幕输出中看到，然后执行新版本的代码，并立即显示其输出。
- en: There's more...
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It is quite common to start a script with a few basic lines of code to get the
    initial part of a script functioning. Once you have your first basic version running,
    you will go through many iterations to tweak and enhance it so that it behaves
    just the way you want it to. Beyond these tweaks, the inevitable bugs will appear
    in your code as you wrangle it into submission. The auto-reload feature will become
    your best friend during these intensive coding sessions as it will let you get
    results much faster and in an intuitive way.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中开始使用一些基本的代码行来使脚本的初始部分运行是非常常见的。一旦您的第一个基本版本运行起来，您将经历许多迭代来微调和增强它，使其表现出您想要的方式。除了这些调整之外，不可避免的错误将出现在您的代码中，因为您在调试它时会出现。在这些密集的编码会话中，自动重载功能将成为您的好朋友，因为它将让您更快地获得结果，并以直观的方式。
- en: See also
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: The soft reset features of MicroPython are described at [http://docs.micropython.org/en/v1.8.6/wipy/wipy/tutorial/reset.html](http://docs.micropython.org/en/v1.8.6/wipy/wipy/tutorial/reset.html).
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MicroPython的软重置功能在[http://docs.micropython.org/en/v1.8.6/wipy/wipy/tutorial/reset.html](http://docs.micropython.org/en/v1.8.6/wipy/wipy/tutorial/reset.html)中有描述。
- en: Documentation on leaving the REPL can be found at [https://learn.adafruit.com/welcome-to-circuitpython?view=all#returning-to-the-serial-console-10-24](https://learn.adafruit.com/welcome-to-circuitpython?view=all#returning-to-the-serial-console-10-24).
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关离开REPL的文档可以在[https://learn.adafruit.com/welcome-to-circuitpython?view=all#returning-to-the-serial-console-10-24](https://learn.adafruit.com/welcome-to-circuitpython?view=all#returning-to-the-serial-console-10-24)中找到。
- en: Updating the CircuitPython Library
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新CircuitPython库
- en: In addition to updating the firmware, there is also a rich set of Python libraries
    called the CircuitPython Library that can also be updated with the latest supported
    features.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 除了更新固件外，还有一组名为CircuitPython Library的Python库，其中包含了最新支持的功能。
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Any of themethods used in the previous recipes can be used hereto obtain a REPL.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前使用的任何方法都可以用于获取REPL。
- en: How to do it...
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Let''s have a look at how to do this:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何做到这一点：
- en: Open the REPL through your preferred application.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过您喜欢的应用程序打开REPL。
- en: Download the latest CircuitPython Library Bundle release ([https://github.com/adafruit/Adafruit_CircuitPython_Bundle/releases/latest](https://github.com/adafruit/Adafruit_CircuitPython_Bundle/releases/latest)).
    The name of the bundle file is `adafruit-circuitpython-bundle-3.x-mpy-20190212.zip`.
    Since our firmware is using the 3.x release, we must select the bundle that is
    also for the 3.x release. Always use the `mpy` version, as this is optimized to
    use less disk space and has reduced memory usage.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载最新的CircuitPython Library Bundle发布版([https://github.com/adafruit/Adafruit_CircuitPython_Bundle/releases/latest](https://github.com/adafruit/Adafruit_CircuitPython_Bundle/releases/latest))。捆绑文件的名称是`adafruit-circuitpython-bundle-3.x-mpy-20190212.zip`。由于我们的固件使用的是3.x版本，因此必须选择也适用于3.x版本的捆绑包。始终使用`mpy`版本，因为这样可以优化使用更少的磁盘空间，并减少内存使用。
- en: We are using the latest auto-release version of the CircuitPython Library Bundle
    in this recipe, which is version 20190212 of the 3.x series.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们使用的是CircuitPython Library Bundle的最新自动发布版本，即3.x系列的20190212版本。
- en: Extract the `.zip` file to a location on your computer.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`.zip`文件提取到计算机上的一个位置。
- en: If the `CIRCUITPY` drive does not contain a `lib` folder, then create one now.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`CIRCUITPY`驱动器中不包含`lib`文件夹，则现在创建一个。
- en: Copy the contents of the extracted `lib` folder into the `lib` folder on the
    device.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将提取的`lib`文件夹的内容复制到设备上的`lib`文件夹中。
- en: Perform a soft reboot in the REPL by pressing *Ctrl* + *D*.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按下*Ctrl* + *D*在REPL中执行软重启。
- en: Run `import simpleio` in the REPL.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行`import simpleio`。
- en: If it has executed successfully, then the libraries have been successfully loaded,
    as the `simpleio` module is not part of the firmware and was imported from the
    library folder.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果成功执行，则库已成功加载，因为`simpleio`模块不是固件的一部分，而是从库文件夹导入的。
- en: How it works...
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `lib` path that was created is one of the standard paths the CircuitPython
    will look in when importing Python packages. By adding Python packages to this
    folder, this makes it available for import by any scripts running on the device.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的`lib`路径是CircuitPython在导入Python包时查找的标准路径之一。通过将Python包添加到此文件夹，可以使其可以被设备上运行的任何脚本导入。
- en: The `mpy` files are built from the original source `py` files and bundled all
    together in one package to make it easier to install.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`mpy`文件是从原始源`py`文件构建的，并且全部打包在一起，以便更容易安装。'
- en: There's more...
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The CircuitPython Library is under constant development, so it's important to
    know how to update the library on the board so that you can get the latest features.
    As you experiment with code from projects you find on the internet, you might
    occasionally find examples that don't work on your board because you are running
    an outdated version of the CircuitPython Library. Keep your board to the latest
    version, as this can help prevent this from happening.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: CircuitPython库正在不断开发，因此重要的是要知道如何在板上更新库，以便获得最新的功能。当您尝试从互联网上找到的项目代码时，您可能偶尔会发现一些示例在您的板上无法运行，因为您正在运行过时的CircuitPython库版本。保持板子更新到最新版本，可以帮助防止这种情况发生。
- en: See also
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: For more details on how the `mpy` files are created, check out the `mpy-cross`
    command at [https://learn.adafruit.com/building-circuitpython/build-circuitpython](https://learn.adafruit.com/building-circuitpython/build-circuitpython).
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关如何创建`mpy`文件的更多详细信息，请查看[https://learn.adafruit.com/building-circuitpython/build-circuitpython](https://learn.adafruit.com/building-circuitpython/build-circuitpython)中的`mpy-cross`命令。
- en: Information on installing the CircuitPython Library Bundle is available at [https://learn.adafruit.com/adafruit-circuit-playground-express?view=all#installing-the-circuitpython-library-bundle-12-5](https://learn.adafruit.com/adafruit-circuit-playground-express?view=all#installing-the-circuitpython-library-bundle-12-5).
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关安装CircuitPython库包的信息，请访问[https://learn.adafruit.com/adafruit-circuit-playground-express?view=all#installing-the-circuitpython-library-bundle-12-5](https://learn.adafruit.com/adafruit-circuit-playground-express?view=all#installing-the-circuitpython-library-bundle-12-5)。
