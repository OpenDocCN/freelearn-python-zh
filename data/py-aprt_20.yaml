- en: Appendix C – Installing third-party packages
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录C - 安装第三方软件包
- en: Packaging in Python has had a troubled and confusing history. Thankfully, the
    situation has settled down and a tool called `pip` has emerged as the clear front-runner
    among package installation tools for general purpose Python use. For more specialist
    uses such as numerical or scientific computing which rely on the *Numpy* or *Scipy*
    packages you should consider *Anaconda* as a strong alternative to `pip`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python的打包历史曾经饱受困扰和混乱。幸运的是，情况已经稳定下来，一个名为`pip`的工具已经成为通用Python使用中包安装工具的明确领先者。对于依赖*Numpy*或*Scipy*软件包的数值或科学计算等更专业的用途，您应该考虑*Anaconda*作为`pip`的一个强大替代品。
- en: Introducing `pip`
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍`pip`
- en: In this appendix we’ll focus on `pip`, as it is officially blessed by the core
    Python developers and comes with support out of the box. The `pip` tool is included
    and installed with Python since Python 3.4\. For older versions of Python 3, you’ll
    need to look up specific instructions on how to install `pip` for your platform,
    as you may need to use your operating system’s package manager, depending on how
    you originally installed Python. The best place to start is the [Python Packaging
    User Guide](https://packaging.python.org/tutorials/installing-packages/#install-pip-setuptools-and-wheel).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将专注于`pip`，因为它是由核心Python开发人员正式认可的，并且具有开箱即用的支持。`pip`工具已包含在Python 3.4及以上版本中。对于较旧版本的Python
    3，您需要查找有关如何为您的平台安装`pip`的具体说明，因为您可能需要使用操作系统的软件包管理器，这取决于您最初安装Python的方式。开始的最佳地方是[Python包装用户指南](https://packaging.python.org/tutorials/installing-packages/#install-pip-setuptools-and-wheel)。
- en: The `venv` module will also ensure that `pip` is installed into newly created
    environments.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`venv`模块还将确保`pip`安装到新创建的环境中。'
- en: 'The `pip` tool is developed independently of the rest of the standard library,
    so there are often more recent versions available than the version that came packaged
    with your Python distribution. You can use `pip` to upgrade itself with:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip`工具是独立于标准库的其余部分开发的，因此通常有比随附Python分发的版本更近的版本可用。您可以使用`pip`来升级自身：'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is useful to do, to avoid repeated warning from `pip` about not being up-to-date.
    Bear in mind though, that this will only take effect in your current Python environment,
    which may be a virtual-environment.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是有用的，可以避免`pip`重复警告您不是最新版本。但请记住，这只会在当前Python环境中生效，这可能是一个虚拟环境。
- en: The Python Package Index
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python包索引
- en: The `pip` tool can search for packages in a central repository — the *Python
    Package Index*, or *PyPI*, also known by the nickname “Cheeseshop” — and then
    download and install them along with their dependencies. You can browse the PyPI
    at [https://pypi.python.org/pypi](https://pypi.python.org/pypi). This is an extremely
    convenient way to install Python software, so it’s good to understand how to use
    it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip`工具可以在中央存储库（*Python包索引*或*PyPI*，也被昵称为“奶酪店”）中搜索软件包，然后下载和安装它们以及它们的依赖项。您可以在[https://pypi.python.org/pypi](https://pypi.python.org/pypi)上浏览PyPI。这是一种非常方便的安装Python软件的方式，因此了解如何使用它是很好的。'
- en: Installing with `pip`
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用`pip`安装
- en: We’ll demonstrate how to use `pip` by installing the `nose` testing tool. `nose`
    is a sort of power-tool for running `unittest` based tests such as those we developed
    in Chapter 10\. One really useful thing it can do is *discover* all of your tests
    and run them. This means that you don’t need to add `unittest.main()` into your
    code; you can just use nose to find and run your tests.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演示如何使用`pip`来安装`nose`测试工具。`nose`是一种用于运行基于`unittest`的测试的强大工具，例如我们在第10章中开发的测试。它可以做的一个非常有用的事情是*发现*所有的测试并运行它们。这意味着您不需要将`unittest.main()`添加到您的代码中；您可以使用nose来查找和运行您的测试。
- en: 'First though, we need to do some groundwork. Let’s create a virtual environment
    (see Appendix B) so we don’t inadvertently install into our system Python installation.
    Create a virtual environment using `pyenv`, and activate it:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，首先我们需要做一些准备工作。让我们创建一个虚拟环境（参见附录B），这样我们就不会意外地安装到系统Python安装中。使用`pyenv`创建一个虚拟环境，并激活它：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As `pip` is updated much more frequently than Python itself, it’s good practice
    to upgrade `pip` in any new virtual environment, so let’s do that. Fortunately,
    `pip` is capable of updating itself:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`pip`的更新频率远远超过Python本身，因此在任何新的虚拟环境中升级`pip`是一个良好的做法，所以让我们这样做。幸运的是，`pip`能够更新自身：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you don’t upgrade `pip` it will give you warnings every time you use it,
    if a new version has become available since you last upgraded.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不升级`pip`，每次使用它时都会收到警告，如果自上次升级以来已有新版本可用。
- en: 'Now let’s use `pip` to install `nose`. `pip` uses subcommands to decide what
    to do, and to install modules you use `pip install package-name`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用`pip`来安装`nose`。`pip`使用子命令来决定要执行的操作，并且要安装模块，您可以使用`pip install package-name`：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If this succeeds, `nose` is ready to use in our virtual environment. Let’s
    check that it’s available by trying to import it at the REPL and instrospecting
    the path at which it is installed:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，`nose`已准备好在我们的虚拟环境中使用。让我们通过尝试在REPL中导入它并检查安装路径来确认它是否可用：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As well as installing a module, `nose` installs the `nosetests` program in
    the `bin` directory of the virtual environment. To really put the icing on the
    cake, let’s use `nosetests` to run the tests from `palindrome.py` from Chapter
    11:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 除了安装模块外，`nose`还会在虚拟环境的`bin`目录中安装`nosetests`程序。为了真正锦上添花，让我们使用`nosetests`来运行第11章中的`palindrome.py`中的测试：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Installing local packages with `pip`
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`pip`安装本地软件包
- en: 'You can also use `pip` to install from local packages in files rather than
    from the Python Package Index. To do this, pass the filename of the packaged distribution
    to `pip install`. For example, in Appendix B we showed how to build a so called
    source distribution using `distutils`. To install this using `pip`, do:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`pip`从文件中安装本地软件包，而不是从Python包索引中安装。要做到这一点，请将打包分发的文件名传递给`pip install`。例如，在附录B中，我们展示了如何使用`distutils`构建所谓的源分发。要使用`pip`安装这个，做：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Uninstalling packages
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 卸载软件包
- en: 'A key advantage to installing packages with `pip` rather than directly invoking
    `setup.py` of the source distribution is that `pip` knows how to uninstall packages.
    To do so, use the `uninstall` subcommand:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pip`安装软件包而不是直接调用源分发的`setup.py`的一个关键优势是，`pip`知道如何卸载软件包。要这样做，使用`uninstall`子命令：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
