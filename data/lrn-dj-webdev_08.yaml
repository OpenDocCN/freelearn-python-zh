- en: Chapter 8. Creating an Administration Interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。创建管理界面
- en: 'In this chapter, we will learn the features of the administrator interface
    using Django''s inbuilt features. We will also cover how to show tweets in a customized
    way, with sidebar or pagination enabled. We will deal with the following topics
    in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习使用Django的内置功能的管理员界面的特性。我们还将介绍如何以自定义方式显示推文，包括侧边栏或启用分页。本章将涉及以下主题：
- en: Customizing the administration interface
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义管理界面
- en: Customizing listing pages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义列表页面
- en: Overriding administration templates
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖管理模板
- en: Users, groups, and permissions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户、组和权限
- en: User permissions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户权限
- en: Group permissions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组权限
- en: Using permissions in views
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图中使用权限
- en: Organizing content into pages (pagination)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将内容组织成页面（分页）
- en: Customizing the administration interface
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义管理界面
- en: The administration interface provided by Django is very powerful and flexible,
    and from the version 1.6, it comes activated by default. This will give you a
    fully featured administration kit for your site. Although the administration application
    should be sufficient for most needs, Django offers several ways to customize and
    enhance it. In addition to specifying which models are available in the administration
    interface, you can also specify how listing pages are presented and even override
    the templates used to render the administration pages. So, let's learn about these
    features.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供的管理界面非常强大和灵活，从1.6版本开始，默认情况下就已激活。这将为您的站点提供一个功能齐全的管理工具包。尽管管理应用程序对大多数需求应该足够了，但Django提供了几种自定义和增强它的方法。除了指定哪些模型可用于管理界面外，您还可以指定如何呈现列表页面，甚至覆盖用于呈现管理页面的模板。因此，让我们了解这些功能。
- en: Customizing listing pages
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义列表页面
- en: 'As we saw in the previous chapter, we registered our model classes to the administration
    interface using the following methods:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中看到的，我们使用以下方法将我们的模型类注册到管理界面：
- en: '`admin.site.register` (`Tweet`)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin.site.register` (`Tweet`)'
- en: '`admin.site.register` (`Hashtag`)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin.site.register` (`Hashtag`)'
- en: '`admin.site.register` (`UserFollower`)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin.site.register` (`UserFollower`)'
- en: 'We can also customize several aspects of the administration pages. Let''s learn
    about this by example. The tweet listing page displays the string representation
    of each tweet, as we can see in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以自定义管理页面的几个方面。让我们通过示例来了解这一点。推文列表页面显示每条推文的字符串表示，如下面的屏幕截图所示：
- en: '![Customizing listing pages](img/image00306.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![自定义列表页面](img/image00306.jpeg)'
- en: Wouldn't this page be more useful if it were to display the name of the user
    who has posted the tweet, as well as the time of posting, in separate columns?
    It turns out that implementing this functionality only requires adding a few lines
    of code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此页面能够显示发布推文的用户的名称以及发布时间，那不是更有用吗？事实证明，实现这个功能只需要添加几行代码。
- en: 'Edit the tweet model in `tweet/admin.py` file as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`tweet/admin.py`文件中的推文模型如下：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add new lines of code above `#Register your models here` and the updated code
    will look like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在“＃在此注册您的模型”上方添加新的代码行，更新后的代码将如下所示：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This code adds the extra column in the administrator view for the `TweetAdmin()`
    class:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码为`TweetAdmin()`类的管理员视图添加了额外的列：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Moreover, we have passed an extra parameter to register calls for the administrator
    tweet; that is, `admin.site.register(Tweet)` becomes `admin.site.register(Tweet,
    TweetAdmin)` now. Refresh the same page and note the changes, as shown in the
    following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们为管理员推文传递了一个额外的参数；即`admin.site.register(Tweet)`现在变成了`admin.site.register(Tweet,
    TweetAdmin)`。刷新同一页面，注意变化，如下面的屏幕截图所示：
- en: '![Customizing listing pages](img/image00307.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![自定义列表页面](img/image00307.jpeg)'
- en: The table is now better organized! We simply defined a tuple attribute called
    `list_display` in the `TweetAdmin()` class of the `Tweet` model. This tuple contains
    the names of the fields to be used in the listing page.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 表现得更有条理了！我们只需在`Tweet`模型的`TweetAdmin()`类中定义一个名为`list_display`的元组属性。该元组包含要在列表页面中使用的字段的名称。
- en: There are other attributes that we can define in the Admin class; each one should
    be defined as a tuple of one or more field names.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在Admin类中还有其他属性可以定义；每个属性应该定义为一个或多个字段名称的元组。
- en: '`list_filter`: If defined, this creates a sidebar with links that can be used
    to filter objects according to one or more fields in the model.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list_filter`：如果定义了，这将创建一个侧边栏，其中包含可以根据模型中一个或多个字段来过滤对象的链接。'
- en: '`ordering`: The fields that are used to order objects in the listing page.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ordering`：用于在列表页面中对对象进行排序的字段。'
- en: '`search_fields`: If defined, it creates a search field that can be used to
    search. The field name is preceded by a minus sign, and descending order is used
    instead of ascending order for the available objects in the data model according
    to one or more fields.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`search_fields`：如果定义了，它将创建一个可用于搜索的搜索字段。字段名称前面加上减号，并且根据一个或多个字段的数据模型中的可用对象，使用降序而不是升序。'
- en: 'Let''s utilize each of the preceding attributes in the tweet listing page.
    Again, edit the Tweet model in the `tweet/admin.py` file and append the following
    highlighted lines:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在推文列表页面中利用前述每个属性。再次编辑`tweet/admin.py`文件中的推文模型，并追加以下突出显示的行：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is how it looks after using these attributes:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些属性后的效果如下：
- en: '![Customizing listing pages](img/image00308.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![自定义列表页面](img/image00308.jpeg)'
- en: As you can see, we were able to customize and enhance the tweet listing page
    with only a few lines of code. Next, we will learn about customizing the templates
    used to render administration pages, which will give us even greater control over
    the administration interface.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们能够只用几行代码来自定义和增强推文列表页面。接下来，我们将学习如何自定义用于呈现管理页面的模板，这将使我们对管理界面有更大的控制权。
- en: Overriding administration templates
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 覆盖管理模板
- en: 'There are times when you want to change the look and feel of the administration
    interface or to move the elements on the various administration pages and rearrange
    them. Fortunately, the administration interface is flexible enough to do all of
    this and more by allowing us to override its templates. The process of customizing
    an administration template is simple. First, you copy the template from the administration
    application folder to your project''s templates folder, and then you edit this
    template and customize it to your liking. The location of the administration templates
    depends on where Django is installed. Here is a list of the default installation
    paths of Django under the major operating systems:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您想要更改管理界面的外观或移动各种管理页面上的元素并重新排列它们。幸运的是，管理界面足够灵活，可以通过允许我们覆盖其模板来执行所有这些操作及更多操作。自定义管理模板的过程很简单。首先，您将模板从管理应用程序文件夹复制到项目的模板文件夹中，然后编辑此模板并根据您的喜好进行自定义。管理模板的位置取决于Django的安装位置。以下是Django在主要操作系统下的默认安装路径列表：
- en: '**Windows**: `C:\PythonXX\Lib\site-packages\django`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows：`C:\PythonXX\Lib\site-packages\django`
- en: '**UNIX and Linux**: `/usr/lib/pythonX.X/site-packages/django`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UNIX和Linux：`/usr/lib/pythonX.X/site-packages/django`
- en: '**Mac OS X**: `/Library/Python/X.X/site-packages/django`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac OS X：`/Library/Python/X.X/site-packages/django`
- en: (Here, **X.X** is the version of Python on your system. The `site-packages`
    folder can also be found as `dist-packages`.)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: （这里，**X.X**是您系统上Python的版本。`site-packages`文件夹也可以被称为`dist-packages`。）
- en: If you cannot find Django in the default installation path for your operating
    system, perform a file system search for `django-admin.py`. You will get multiple
    hits, but the one that you want will be under the Django installation path, inside
    a folder called `bin`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在操作系统的默认安装路径中找不到Django，请执行文件系统搜索`django-admin.py`。您会得到多个结果，但您想要的结果将在Django安装路径下，位于名为`bin`的文件夹内。
- en: After locating the Django installation path, open `django/contrib/admin/templates/`
    and you will find the templates used by the administration application.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 找到Django安装路径后，打开`django/contrib/admin/templates/`，您将找到管理应用程序使用的模板。
- en: 'There are many files in this directory, but the most important ones are these:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此目录中有许多文件，但最重要的文件是这些：
- en: '`admin/base_site.html`: This is the base template for the administration. This
    template generates the interface. All pages inherit from this template in the
    following model.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin/base_site.html`：这是管理的基本模板。此模板生成界面。所有页面都继承自以下模板。'
- en: '`admin/change_list.html`: This template generates a list of available objects.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin/change_list.html`：此模板生成可用对象的列表。'
- en: '`admin/change_form.html`: This template generates a form for adding or editing
    an object.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin/change_form.html`：此模板生成用于添加或编辑对象的表单。'
- en: '`admin/delete_confirmation.html`: This template generates the confirmation
    page when an object is deleted.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin/delete_confirmation.html`：此模板在删除对象时生成确认页面。'
- en: 'Let''s try to customize one of these templates. Suppose that we want to change
    the string **Django administration** located at the top of all admin pages. To
    do so, create a folder called `admin` inside the `templates` folder of our project,
    and copy the `admin/base_site.html` file to it. After that, edit the file to change
    all instances of `Django` to `Django Tweet`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试自定义其中一个模板。假设我们想要更改所有管理页面顶部的字符串**Django administration**。为此，在我们项目的`templates`文件夹内创建一个名为`admin`的文件夹，并将`admin/base_site.html`文件复制到其中。然后，编辑文件以将所有`Django`的实例更改为`Django
    Tweet`：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result will look like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下所示：
- en: '![Overriding administration templates](img/image00309.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![覆盖管理模板](img/image00309.jpeg)'
- en: Because of the modular design of the admin templates, it is usually neither
    necessary nor advisable to replace an entire template. It is almost always better
    to override only the section of the template that you need to change.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于管理模板的模块化设计，通常不需要也不建议替换整个模板。通常最好只覆盖您需要更改的模板部分。
- en: The process was pretty simple, wasn't it? Feel free to experiment with other
    templates. For example, you may want to add a help message to a listing or edit
    pages.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程非常简单，不是吗？随意尝试其他模板。例如，您可能想要向列表或编辑页面添加帮助消息。
- en: The administration templates make use of many advanced features of the Django
    template system, so if you see a template tag that you are not familiar with,
    you can refer to the Django documentation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 管理模板利用了Django模板系统的许多高级功能，因此如果您看到一个您不熟悉的模板标签，可以参考Django文档。
- en: Users, groups, and permissions
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户、组和权限
- en: So far, we have been logged in to the administration interface using the superuser
    account that we created with the `manage.py syncdb` command. In reality, however,
    you may have other trusted users who need access to the administration page. In
    this section, we will see how to allow other users to use the administration interface,
    and we will learn more about the Django permissions system in the process.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直使用`manage.py syncdb`命令创建的超级用户帐户登录到管理界面。但实际上，您可能有其他受信任的用户需要访问管理页面。在本节中，我们将看到如何允许其他用户使用管理界面，并在此过程中了解更多关于Django权限系统的信息。
- en: 'However, before we continue, I want to emphasize this: only trusted users should
    be given access to the administration pages. The administration interface is a
    very powerful tool, so only those whom you know well should be granted access
    to it.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们继续之前，我想强调一点：只有受信任的用户应该被授予对管理页面的访问权限。管理界面是一个非常强大的工具，所以只有你熟悉的人才应该被授予访问权限。
- en: User permissions
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户权限
- en: If you don't have users in the database other than the superuser, create a new
    user account using the registration form that we built in [Chapter 7](part0056.xhtml#aid-1LCVG2
    "Chapter 7. Following and Commenting"), *Following and Commenting*. Alternatively,
    you could use the administration interface itself by clicking on **Users** and
    then **Add User**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库中除了超级用户之外没有其他用户，请使用我们在[第7章](part0056.xhtml#aid-1LCVG2 "第7章。关注和评论")中构建的注册表单创建一个新用户帐户，*关注和评论*。或者，您可以通过单击**用户**，然后单击**添加用户**来使用管理界面本身。
- en: Next, return to the users list and click on the name of the newly created user.
    You will get a form that can be used to edit various aspects of the user account,
    such as name and e-mail information. Under the **Permissions** section of the
    edit form, you will find a checkbox labelled **Staff status**. Enabling this checkbox
    will let the new user enter the administration interface. However, they won't
    be able to do much after they log in because this checkbox only grants access
    to the administration area; it does not give the ability to see or change data.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，返回用户列表，然后单击新创建的用户的名称。您将获得一个表单，可用于编辑用户帐户的各个方面，例如姓名和电子邮件信息。在编辑表单的**权限**部分下，您将找到一个名为**员工状态**的复选框。启用此复选框将允许新用户进入管理界面。但是，他们登录后将无法做太多事情，因为此复选框仅授予对管理区域的访问权限；它不会赋予查看或更改数据的能力。
- en: To give the new user enough permissions to change data models, you can enable
    the **Superuser status** checkbox, which will grant the new user full permission
    to perform any function that they want. This option makes the account as powerful
    as the superuser account created by the `manage.py syncdb` command.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给新用户足够的权限来更改数据模型，您可以启用**超级用户状态**复选框，这将授予新用户执行任何所需功能的完全权限。此选项使帐户与`manage.py
    syncdb`命令创建的超级用户帐户一样强大。
- en: 'On the whole, however, it''s not desirable to grant a user full access to everything.
    Therefore, Django gives you the ability to have fine control over what users can
    do through the permissions system. Below the **Superuser status** checkbox, you
    will find a list of permissions that you can grant to the user. If you examine
    this list, you will find that each data model has three types of permissions:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，总的来说，不希望将用户对所有内容都授予完全访问权限。因此，Django允许您通过权限系统对用户的操作进行精细控制。在**超级用户状态**复选框下方，您将找到可以授予用户的权限列表。如果您查看此列表，您将发现每个数据模型都有三种类型的权限：
- en: Adding an object to the data model
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向数据模型添加对象
- en: Changing an object in the data model
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改数据模型中的对象
- en: Deleting an object from the data model
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据模型中删除对象
- en: These permissions are automatically generated by Django for data models that
    contain an Admin class. Use the arrow button to grant some permissions to the
    account that we are editing. For example, give the account the ability to add,
    edit, and delete tweets and hashtags. Next, log out and then log in to the administration
    interface again using the new account. You will notice that you will only be able
    to manage the tweets and hashtags data models.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些权限是由Django自动生成的，用于包含Admin类的数据模型。使用箭头按钮向我们正在编辑的帐户授予一些权限。例如，给予帐户添加、编辑和删除推文和主题标签的能力。接下来，注销然后使用新帐户再次登录到管理界面。您会注意到您只能管理推文和主题标签数据模型。
- en: The permissions section of the user edit page also contains a checkbox called
    **Active**. This checkbox can be used as a global switch to enable and disable
    the account. When unchecked, the user won't be able to log in to the main site
    or the administration area.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 用户编辑页面的权限部分还包含一个名为**活跃**的复选框。此复选框可用作全局开关，用于启用或禁用帐户。取消选中时，用户将无法登录到主站点或管理区域。
- en: Group permissions
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组权限
- en: 'If you have a considerable number of users who share the same permissions,
    it would be a tedious and error-prone task to edit each user''s account and assign
    the same permissions to them. Therefore, Django provides another user management
    facility: groups. To put it simply, groups are a way of categorizing users who
    share the same permissions. You can create a group and assign permissions to it.
    When you add a user to the group, this user is granted all of the group''s permissions.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有大量共享相同权限的用户，编辑每个用户帐户并为他们分配相同权限将是一项繁琐且容易出错的任务。因此，Django提供了另一个用户管理设施：组。简单来说，组是对共享相同权限的用户进行分类的一种方式。您可以创建一个组并为其分配权限。当您将用户添加到组时，该用户将被授予组的所有权限。
- en: Creating a group is not very different from other data models. Click on **Groups**
    on the main page of the administration interface, and then click on **Add Group**.
    Next, enter a group name and assign some permissions to the group; finally, click
    on **Save**.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 创建组与创建其他数据模型并没有太大的不同。在管理界面的主页上点击**组**，然后点击**添加组**。接下来，输入组名并为组分配一些权限；最后，点击**保存**。
- en: To add a user to a group, edit the user account, scroll to the **Groups** section
    in the edit form, and select whichever group you want to add the user to.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要将用户添加到组中，请编辑用户帐户，滚动到编辑表单中的**组**部分，然后选择要将用户添加到的任何组。
- en: Using permissions in views
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在视图中使用权限
- en: Although we have only used permissions in the administration interface so far,
    Django also lets us utilize the permission system while writing views. It is possible
    to use permissions while programming a view to grant a group of users access to
    a particular feature or page, such as private content. We will learn about the
    methods that can be used to do so in this section. We won't actually make changes
    to the code of our application, but feel free to do so if you want to experiment
    with the methods explained.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管到目前为止我们只在管理界面中使用了权限，但Django还允许我们在编写视图时利用权限系统。在编写视图时，可以使用权限来授予一组用户对特定功能或页面的访问权限，例如私人内容。我们将在本节中了解可以用来实现此目的的方法。我们不会实际更改应用程序的代码，但如果您想尝试解释的方法，请随意这样做。
- en: 'If you wanted to check whether a user has a particular permission, you could
    use the `has_perm()` method on the `User` object. This method takes a string that
    represents the permission in the following format:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要检查用户是否具有特定权限，可以在`User`对象上使用`has_perm()`方法。该方法采用表示权限的字符串，格式如下：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `app` parameter specifies the name of the application where the model is
    located; the `operation` parameter could be `add`, `change` or `delete`; the `model`
    parameter specifies the name of the model.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`app`参数指定了模型所在的应用程序的名称；`operation`参数可以是`add`、`change`或`delete`；`model`参数指定了模型的名称。'
- en: 'For example, to check whether the user can add tweets, use this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要检查用户是否可以添加推文，使用以下代码：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To check if the user can change tweets, use this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查用户是否可以更改推文，使用以下代码：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Furthermore, Django provides a function named `decorator` that can be used to
    restrict a view to users who have a particular permission. The decorator is called
    `permission_required`, and it is located in the `django.contrib.auth.decorators`
    package.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Django提供了一个名为`decorator`的函数，可以用来限制只有特定权限的用户才能访问视图。这个装饰器叫做`permission_required`，位于`django.contrib.auth.decorators`包中。
- en: 'Using this decorator is similar to how we used the `login_required` function.
    The decorator function is to restrict pages to logged in users. Let''s say we
    want to restrict the `tweet_save_page` view (in the `tweets/views.py` file) to
    users who have the `tweet.add_tweet` permission. To do so, we can use the following
    code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个装饰器类似于我们使用`login_required`函数的方式。这个装饰器函数是为了限制页面只对已登录用户开放。假设我们想要将`tweet_save_page`视图（在`tweets/views.py`文件中）限制为具有`tweet.add_tweet`权限的用户。为此，我们可以使用以下代码：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This decorator takes two parameters: the permission to check for and where
    to redirect the user if they don''t have the required permission.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个装饰器接受两个参数：要检查的权限以及如果用户没有所需权限时要重定向用户的位置。
- en: The question of whether to use the `has_perm` method or the `permission_required`
    decorator depends on the level of control that you want. If you need to control
    access to a view as a whole, use the `permission_required` decorator. However,
    if you need finer control over permissions inside a view, use the `has_perm` method.
    These two approaches should be sufficient for any permission-related needs.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`has_perm`方法还是`permission_required`装饰器取决于您想要的控制级别。如果您需要控制对整个视图的访问权限，请使用`permission_required`装饰器。但是，如果您需要对视图内的权限进行更精细的控制，请使用`has_perm`方法。这两种方法应该足够满足任何权限相关的需求。
- en: Organizing content into pages – pagination
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将内容组织成页面 - 分页
- en: In previous chapters, we have covered things such as listing down the tweets
    of users and listing down most followed users, but consider a use case when these
    small numbers scale up and we start getting a large number of results for each
    type of query. To cover such a situation, we should manipulate our code so as
    to make it support pagination.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们已经涵盖了列出用户的推文和列出最多关注的用户等内容，但是考虑到当这些小数字扩大并且我们开始获得大量结果时的使用情况。为了应对这种情况，我们应该调整我们的代码以支持分页。
- en: 'The page would increase in size, and finding an item within the page would
    become difficult. Fortunately, there is a simple and intuitive solution to this:
    pagination. **Pagination** is the process of breaking content into pages. And,
    as always, Django already has a component that implements this functionality,
    ready for us to use!'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 页面的大小会增加，而在页面中找到项目将变得困难。幸运的是，这有一个简单直观的解决方案：分页。**分页**是将内容分成页面的过程。而且，正如以往一样，Django已经有一个实现这个功能的组件，可以供我们使用！
- en: If we have a large set of tweets, we split the set into pages with ten (or so)
    items on each page, present the first page to the user, and provide links to browse
    other pages.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一大堆推文，我们将这些推文分成每页十个（左右）项目的页面，并向用户呈现第一页，并提供链接以浏览其他页面。
- en: 'The Django pagination functionality is encapsulated in a class called `Paginator`,
    which is located in the `django.core.paginator` package. Let''s learn the interface
    of this class using the interactive console:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Django分页功能封装在一个名为`Paginator`的类中，该类位于`django.core.paginator`包中。让我们使用交互式控制台来学习这个类的接口：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Open the Django shell with the `python manage.py shell` command.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`python manage.py shell`命令打开Django shell。
- en: Here we import some classes, build a query set containing all bookmarks, and
    instantiate an object called `Paginator`. The constructor of this class takes
    the query set to be paginated, and the number of items on each page is set.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们导入一些类，构建一个包含所有书签的查询集，并实例化一个名为`Paginator`的对象。这个类的构造函数接受要分页的查询集，以及每页的项目数。
- en: 'Let''s see how to retrieve information from the `Paginator` object (of course,
    the results will vary depending on the amount of bookmarks that you have):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何从`Paginator`对象中检索信息（当然，结果会根据您拥有的书签数量而有所不同）：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, `Paginator` does the heavy lifting for us. It takes a query
    set, breaks it into pages, and enables us to render the query set into multiple
    pages.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`Paginator`为我们做了大部分的工作。它接受一个查询集，将其分成页面，并使我们能够将查询集呈现为多个页面。
- en: 'Let''s implement pagination into one of our views, the tweet page for example.
    Open `tweet/views.py` and modify the `user_page` view as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将分页功能实现到我们的一个视图中，例如推文页面。打开`tweet/views.py`并修改`user_page`视图如下：
- en: 'We have our user profile page listing with the following class:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有我们的用户个人资料页面列表，其中包含以下类：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We need to modify the preceding code to use pagination:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改前面的代码以使用分页：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following code snippet mainly works the pagination magic in the preceding
    code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段主要在前面的代码中实现了分页的魔法：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To make this code work, add the `TWEET_PER_PAGE = 5` parameter in the `settings.py`
    file, and, in the preceding code, just add the `import settings.py` statement
    at the top of the code.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这段代码工作，需要在`settings.py`文件中添加`TWEET_PER_PAGE = 5`参数，并在前面的代码中，只需在代码顶部添加`import
    settings.py`语句。
- en: We read a `get` variable called `page` from the request, which tells Django
    which page has been requested. We also set the `TWEET_PER_PAGE` parameter in the
    `settings.py` file to show the number of tweets on a single page. For this specific
    case, we choose it to be `5`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从请求中读取了一个名为`page`的`get`变量，告诉Django请求了哪个页面。我们还在`settings.py`文件中设置了`TWEET_PER_PAGE`参数，以显示单个页面上的推文数量。对于这种特定情况，我们选择了`5`。
- en: The `paginator = Paginator(tweets, TWEET_PER_PA` `GE)` method creates a pagination
    object that holds all the information about the query.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`paginator = Paginator(tweets, TWEET_PER_PAGE)`方法创建一个分页对象，其中包含有关查询的所有信息。'
- en: Now, just with a URL `user/<username>/?page=<page_numer>`, the page will look
    as shown in the following screenshot. The first image shows the user's tweet with
    the page number in the URL.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只需使用URL `user/<username>/?page=<page_numer>`，页面将如下截图所示。第一张图片显示了带有URL中页面编号的用户推文。
- en: '![Organizing content into pages – pagination](img/image00310.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![将内容组织成页面-分页](img/image00310.jpeg)'
- en: 'The following screenshot shows the tweet list of a user on their homepage:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了用户主页上的推文列表：
- en: '![Organizing content into pages – pagination](img/image00311.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![将内容组织成页面-分页](img/image00311.jpeg)'
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Although this chapter is relatively short, we learned how to implement a lot
    of things. This emphasizes the fact that Django lets you do a lot with only a
    few lines of code. You learned how to utilize Django's powerful administration
    interface, how to customize it, and how to take advantage of the comprehensive
    permission system offered by Django.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本章相对较短，但我们学会了如何实现许多事情。这强调了Django让您只需几行代码就能做很多事情的事实。您学会了如何利用Django强大的管理界面，如何自定义它，以及如何利用Django提供的全面权限系统。
- en: In the next chapter, you will learn about several exciting features found in
    almost every Web 2.0 application nowadays.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解到几乎每个Web 2.0应用程序中都有的一些令人兴奋的功能。
