- en: Implementing Buttons
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现按钮
- en: In this chapter, we will describe the main control elements of a GUI application—**buttons**.
    Buttons are the most commonly used graphical components of any GUI application. The
    different types of buttons provide the user with the option to operate an application
    according to its defined functionality. The user can click on a button to start
    a process and choose the option available, or open the file dialog window. All
    of these actions require an element that will realize these operations. The Qt
    framework, and the corresponding Python bindings (PySide2 and PyQt5), have extensive
    classes for creating buttons for a variety of tasks. These elements are very customizable
    and allow software developers to realize these components in a modern style.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将描述 GUI 应用程序的主要控制元素——**按钮**。按钮是任何 GUI 应用程序中最常用的图形组件。不同的按钮类型为用户提供根据其定义的功能操作应用程序的选项。用户可以点击按钮来启动一个过程并选择可用的选项，或者打开文件对话框窗口。所有这些操作都需要一个实现这些操作的元素。Qt
    框架以及相应的 Python 绑定（PySide2 和 PyQt5）提供了用于创建各种任务按钮的广泛类。这些元素非常可定制，允许软件开发者以现代风格实现这些组件。
- en: 'The elements that will be covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下元素：
- en: Buttons
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮
- en: Checkbox
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复选框
- en: Additional components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他组件
- en: QAbstractButton
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QAbstractButton
- en: This is an abstract base class that's used with button widgets and provides
    functionality related to buttons in the Qt framework. The buttons described in
    this chapter will inherit this class.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于按钮小部件的抽象基类，它提供了与 Qt 框架中按钮相关的功能。本章中描述的按钮将继承这个类。
- en: QAbstractButton functions
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QAbstractButton 函数
- en: '`QAbstractButton` inherits the `QWidget` and improves functionality by means
    of the following functions.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`QAbstractButton` 继承自 `QWidget` 并通过以下函数增强了功能。'
- en: set
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions related to the setting of the parameters/properties in
    relation to the button, including the setting of text, alignment, or functionality:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与按钮参数/属性设置相关的函数，包括设置文本、对齐或功能：
- en: '`setAutoExclusive(bool)`: If the parameter is `True`, this enables the autoexclusivity
    of the button. This means that this button is a part of the exclusive button group
    with the same parent group. In the exclusive button group, only a single button
    can be checked at one time and, if a button was checked previously, it automatically
    gets unchecked.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`setAutoExclusive(bool)`: 如果参数为 `True`，则启用按钮的自动排他性。这意味着该按钮是具有相同父组的排他按钮组的一部分。在排他按钮组中，一次只能选中一个按钮，如果之前选中了某个按钮，它将自动取消选中。'
- en: '`setAutoRepeat(bool)`: If the parameter is `True`, this enables autorepetition
    for the button when pushed. This is related to buttons that move the sliders,
    and so on.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`setAutoRepeat(bool)`: 如果参数为 `True`，则在按钮被按下时启用自动重复。这与移动滑块等按钮相关。'
- en: '`setAutoRepeatDelay(int)`: This sets the delay for the autorepetition of the
    button, or when the repetition will begin after the number of milliseconds specified
    in the parameter.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`setAutoRepeatDelay(int)`: 这设置了按钮自动重复的延迟，或者当重复开始后经过参数中指定的毫秒数。'
- en: '`setAutoRepeatInterval(int)`: This sets the interval that will be used for
    the autorepetition of this button, or the interval in milliseconds, as specified
    in the parameter, at which repetition will occur.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`setAutoRepeatInterval(int)`: 这设置了按钮自动重复的间隔，或者重复发生的间隔，以参数中指定的毫秒数表示。'
- en: '`setChecked(bool)`: If the parameter is `True`, this sets the button in the
    checked state. This button needs to be capable of being checked.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`setChecked(bool)`: 如果参数为 `True`，则将按钮设置为选中状态。此按钮需要能够被选中。'
- en: '`setDown(bool)`: If the parameter is `True`, this sets the button to a pushed
    down state.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`setDown(bool)`: 如果参数为 `True`，则将按钮设置为按下状态。'
- en: '`setIcon(QtGui.QIcon)`: This specifies the icon for the button that will be
    used.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`setIcon(QtGui.QIcon)`: 这指定了按钮将使用的图标。'
- en: '`setIconSize(QtCore.QSize)`: This sets the size of the icon for the button.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`setIconSize(QtCore.QSize)`: 这设置了按钮图标的尺寸。'
- en: '`setShortcut(QtGui.QKeySequence)`: This sets the mnemonic that will be associated
    with this button, or the keys that will be used together to perform an action
    as keyboard shortcuts.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`setShortcut(QtGui.QKeySequence)`: 这设置了将与该按钮关联的助记符，或用于执行动作的键盘快捷键。'
- en: '`setText("Okay")`: This sets the text for the button.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`setText("Okay")`: 这设置了按钮的文本。'
- en: is
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是
- en: 'These are functions that return a Boolean value (`bool`) related to the button
    states:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回与按钮状态相关的布尔值（`bool`）的函数：
- en: '`isCheckable()`: This returns `True` if the button is checkable.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`isCheckable()`: 此函数返回`True`，如果按钮可选中。'
- en: '`isChecked()`: This returns `True` if the button was checked and is checkable.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`isChecked()`: 此函数返回`True`，如果按钮被选中且可选中。'
- en: '`isDown()`: This returns `True` if the button is in a pushed down state.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`isDown()`: 此函数返回`True`，如果按钮处于按下状态。'
- en: functional
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the current values of the button, changes
    in functionality, and so on:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与按钮当前值、功能变化等相关联的函数：
- en: '`animateClick(int)`: This performs the animated click for the button.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`animateClick(int)`: 此函数执行按钮的动画点击。'
- en: '`autoExclusive()`: This returns `True` if auto-exclusivity is enabled for this
    button.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`autoExclusive()`: 此函数返回`True`，如果此按钮启用了自动排他性。'
- en: '`autoRepeat()`: This returns `True` if auto-repetition is enabled for this
    button.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`autoRepeat()`: 此函数返回`True`，如果此按钮启用了自动重复功能。'
- en: '`autoRepeatDelay()`: This returns a delay in regard to the auto-repetition
    function of this button.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`autoRepeatDelay()`: 此函数返回与按钮自动重复功能相关的延迟。'
- en: '`autoRepeatInterval()`: This returns an interval in regard to the auto-repetition
    function of this button.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`autoRepeatInterval()`: 此函数返回与按钮自动重复功能相关的间隔。'
- en: '`click()`: This performs the clicking of the button. All the signals associated
    with a click on this button are emitted.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`click()`: 此函数执行按钮的点击操作。与此按钮点击相关的所有信号都会被发射。'
- en: '`group()`: This returns the group that the button belongs to.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`group()`: 此函数返回按钮所属的组。'
- en: '`hitButton(QtCore.QPoint)`: This returns `True` if the position specified in
    the parameter is inside the button rectangle; otherwise, it returns `False`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`hitButton(QtCore.QPoint)`: 如果参数指定的位置在按钮矩形内，则此函数返回`True`；否则返回`False`。'
- en: '`icon()`: This returns the icon that this button contains, and is of the `QtGui.QIcon`
    type.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon()`: 此函数返回此按钮包含的图标，类型为`QtGui.QIcon`。'
- en: '`iconSize()`: This returns the size of the icon that this button contains,
    and is of the `QtCore.QSize` type.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`iconSize()`: 此函数返回此按钮包含的图标大小，类型为`QtCore.QSize`。'
- en: '`shortcut()`: This returns the keyboard shortcut that is used with this button.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`shortcut()`: 此函数返回与此按钮一起使用的键盘快捷键。'
- en: '`text()`: This returns the text that''s displayed on this button.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`text()`: 此函数返回此按钮上显示的文本。'
- en: events
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: events
- en: 'These are functions that are related to the events, such as event handlers:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与事件相关的函数，例如事件处理程序：
- en: '`changeEvent(QtCore.QEvent)`: This handles state changes associated with the
    button.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`changeEvent(QtCore.QEvent)`: 此函数处理与按钮相关的状态变化。'
- en: '`checkStateSet()`: This is the virtual handler that''s called when `QAbstractButton.setChecked()`
    is used.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`checkStateSet()`: 当使用`QAbstractButton.setChecked()`时，此为虚拟处理程序被调用。'
- en: '`event(QtCore.QEvent)`: This is the `QtCore.QObject` function that receives
    events to the object, and should return `True` if the event is recognized and
    processed.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`event(QtCore.QEvent)`: 这是`QtCore.QObject`函数，用于接收对象的事件，如果事件被识别并处理，则应返回`True`。'
- en: '`focusOutEvent(QtGui.QFocusEvent)`: This is an event handler that''s designed to receive
    the keyboard focus events for the buttons that are passed with focus event parameters
    when the focus is lost.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`focusOutEvent(QtGui.QFocusEvent)`: 这是一个事件处理程序，旨在接收当失去焦点时，带有焦点事件参数的按钮的键盘焦点事件。'
- en: '`focusInEvent(QtGui.QFocusEvent)`: This is an event handler that''s designed to receive
    the keyboard focus events for the buttons that are passed with focus event parameters
    when the focus is received.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`focusInEvent(QtGui.QFocusEvent)`: 这是一个事件处理程序，旨在接收当接收到焦点时，带有焦点事件参数的按钮的键盘焦点事件。'
- en: '`keyPressEvent(QtGui.QKeyEvent)`: This is an event handler that''s designed to receive
    key press events for the button, along with the key event passed in the parameter.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`keyPressEvent(QtGui.QKeyEvent)`: 这是一个事件处理程序，旨在接收按钮的按键事件，以及通过参数传递的按键事件。'
- en: '`keyReleaseEvent(QtGui.QKeyEvent)`: This is an event handler that''s designed to receive
    key release events for the button, along with the key event passed in the parameter.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`keyReleaseEvent(QtGui.QKeyEvent)`: 这是一个事件处理程序，旨在接收按钮的按键释放事件，以及通过参数传递的按键事件。'
- en: '`mousePressEvent(QtGui.QMouseEvent)`: This is an event handler that''s designed to receive
    mouse press events for this button, along with mouse events passed in the parameter.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`mousePressEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，旨在接收此按钮的鼠标按下事件，以及通过参数传递的鼠标事件。'
- en: '`mouseReleaseEvent(QtGui.QMouseEvent)`: This is an event handler that''s designed to receive
    mouse release events for the button, along with mouse events passed in the parameter.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`mouseReleaseEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，用于接收按钮的鼠标释放事件，以及通过参数传入的鼠标事件。'
- en: '`nextCheckState()`: This is the virtual handler that''s called when the button
    is clicked.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`nextCheckState()`: 当按钮被点击时，会调用此虚拟处理程序。'
- en: '`paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s designed to receive
    paint events for this button, along with paint events passed in the parameter.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`paintEvent(QtGui.QPaintEvent)`: 这是一个事件处理程序，用于接收此按钮的绘制事件，以及通过参数传入的绘制事件。'
- en: '`timerEvent(QtCore.QTimerEvent)`: This is an event handler that''s designed to receive
    timer events for the button, along with timer events passed in the parameter.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`timerEvent(QtCore.QTimerEvent)`: 这是一个事件处理程序，用于接收按钮的计时器事件，以及通过参数传入的计时器事件。'
- en: signals
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signals for the `QAbstractButton` class are as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`QAbstractButton` 类可用的信号如下：'
- en: '`clicked(bool)`: This signal is emitted once the button is activated, when
    the shortcut key is typed, or when we call the `click()` or `animateClick()` function.
    The parameter is `True` when checked and `False` if unchecked, if the button is
    checkable.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`clicked(bool)`: 当按钮被激活、按下快捷键或调用 `click()` 或 `animateClick()` 函数时，会发出此信号。如果按钮可勾选，参数为
    `True` 表示已勾选，为 `False` 表示未勾选。'
- en: '`pressed()`: This signal is emitted when the button is pushed down.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`pressed()`: 当按钮被按下时，会发出此信号。'
- en: '`released()`: This signal is emitted when the button is released.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`released()`: 当按钮被释放时，会发出此信号。'
- en: '`toggled(bool)`: This signal is emitted when the button changes state. The
    parameter is `True` when checked, and `False` if unchecked, if this button is
    checkable.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`toggled(bool)`: 当按钮状态改变时，会发出此信号。如果按钮可勾选，参数为 `True` 表示已勾选，为 `False` 表示未勾选。'
- en: QPushButton
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QPushButton
- en: 'The most commonly used graphical component in the application is the push button.
    The user can click on the button to perform an action or achieve an effect as
    a result of using their favorite app. The Qt framework provides the `QPushButton`
    class for implementing the standard push button in the application and can be
    used with the PySide and PyQt Python bindings. A wide variety of customization
    options give this element a modern style that can be used anywhere in a variety
    of forms. The declaration syntax of the push button in the application is as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中最常用的图形组件是按钮。用户可以点击按钮执行操作或通过使用他们喜欢的应用程序达到某种效果。Qt 框架提供了 `QPushButton` 类来实现应用程序中的标准按钮，并且可以与
    PySide 和 PyQt Python 绑定一起使用。丰富的自定义选项使此元素具有现代风格，可以在各种形式中用于任何地方。应用程序中按钮的声明语法如下：
- en: '[PRE0]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: QPushButton functions
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QPushButton 函数
- en: '`QPushButton` inherits from the `QAbstractButton` class and improves functionality
    with the following functions.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`QPushButton` 继承自 `QAbstractButton` 类，并通过以下函数增强了功能。'
- en: set
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions related to the setting of the parameters/properties in
    relation to the push button:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与按钮相关的参数/属性设置相关的函数：
- en: '`push_button.setAutoDefault(bool)`: If the parameter is `True`, this establishes
    this push button as the auto default button.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.setAutoDefault(bool)`: 如果参数为 `True`，则将此按钮设置为自动默认按钮。'
- en: '`push_button.setDefault(bool)`: If the parameter is `True`, this establishes this
    push button as the default button.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.setDefault(bool)`: 如果参数为 `True`，则将此按钮设置为默认按钮。'
- en: '`push_button.setFlat(bool)`: If the parameter is `True`, this establishes this
    push button as flat.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.setFlat(bool)`: 如果参数为 `True`，则将此按钮设置为平面。'
- en: '`push_button.setMenu(QtWidgets.QMenu)`: This sets the popup menu specified
    in the parameter in relation to the push button.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.setMenu(QtWidgets.QMenu)`: 这将设置与按钮相关的参数指定的弹出菜单。'
- en: is
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是
- en: 'These are functions that return a Boolean value (`bool`) related to the current
    states of the push button:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前按钮状态的布尔值 (`bool`) 相关的函数：
- en: '`push_button.isDefault()`: This returns `True` if this push button is the default
    button.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.isDefault()`: 如果此按钮是默认按钮，则返回 `True`。'
- en: '`push_button.isFlat()`: This returns `True` if this push button is flat.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.isFlat()`: 如果此按钮是平面的，则返回 `True`。'
- en: functional
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that are related to the returns of the current values of
    the push button, changes in functionality, and so on:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前按钮的当前值、功能变化等相关的函数：
- en: '`push_button.autoDefault()`: This returns `True` if the push button is the
    auto default button.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.autoDefault()`: 如果该按钮是自动默认按钮，则返回 `True`。'
- en: '`push_button.menu()`: This returns the popup menu of the `QtWidgets.QMenu`
    type associated with this push button.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.menu()`: 这返回与该按钮关联的 `QtWidgets.QMenu` 类型的弹出菜单。'
- en: '`push_button.showMenu()`: This shows the popup menu associated with this push
    button.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.showMenu()`: 这显示与该按钮关联的弹出菜单。'
- en: events
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'These are functions that are related to the events, such as event handlers:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与事件相关的函数，例如事件处理程序：
- en: '`push_button.changeEvent(QtCore.QEvent)`: This handles state changes within
    the push button.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.changeEvent(QtCore.QEvent)`: 这处理按钮内的状态变化。'
- en: '`push_button.enterEvent(QtCore.QEvent)`: This is an event handler that''s designed to receive
    the enter events of the push button that is passed with an event parameter, and
    is sent when the mouse cursor enters the push button.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.enterEvent(QtCore.QEvent)`: 这是一个事件处理程序，旨在接收传递带有事件参数的按钮进入事件，并在鼠标光标进入按钮时发送。'
- en: '`push_button.event(QtCore.QEvent)`: This receives events to the object and
    should return `True` if the event is recognized and processed.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.event(QtCore.QEvent)`: 这接收对象的事件，如果事件被识别并处理，则应返回 `True`。'
- en: '`push_button.focusOutEvent(QtGui.QFocusEvent)`: This is an event handler that''s
    designed to receive the keyboard focus events for this push button and are passed
    with event parameters when the focus is lost.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.focusOutEvent(QtGui.QFocusEvent)`: 这是一个事件处理程序，旨在接收此按钮的键盘焦点事件，并在失去焦点时通过事件参数传递。'
- en: '`push_button.focusInEvent(QtGui.QFocusEvent)`: This is an event handler that''s
    designed to receive the keyboard focus events for this push button and are passed
    with event parameters when the focus is received.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.focusInEvent(QtGui.QFocusEvent)`: 这是一个事件处理程序，旨在接收此按钮的键盘焦点事件，并在获得焦点时通过事件参数传递。'
- en: '`push_button.keyPressEvent(QtGui.QKeyEvent)`: This is an event handler that''s
    designed to receive key press events for this push button, with events passed
    in the parameter.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.keyPressEvent(QtGui.QKeyEvent)`: 这是一个事件处理程序，旨在接收此按钮的按键事件，事件通过参数传递。'
- en: '`push_button.keyReleaseEvent(QtGui.QKeyEvent)`: This is an event handler that''s
    designed to receive key release events for this push button, with events passed
    in the parameter.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.keyReleaseEvent(QtGui.QKeyEvent)`: 这是一个事件处理程序，旨在接收此按钮的按键释放事件，事件通过参数传递。'
- en: '`push_button.leaveEvent(QEvent)`: This is an event handler that''s designed to
    receive leave events for this push button, with events passed in the parameter.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.leaveEvent(QEvent)`: 这是一个事件处理程序，旨在接收此按钮的离开事件，事件通过参数传递。'
- en: '`push_button.mousePressEvent(QtGui.QMouseEvent)`: This is an event handler
    that''s designed to receive mouse press events for this push button, with events
    passed in the parameter.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.mousePressEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，旨在接收此按钮的鼠标按下事件，事件通过参数传递。'
- en: '`push_button.mouseReleaseEvent(QtGui.QMouseEvent)`: This is an event handler
    that''s designed to receive mouse release events for this push button, with events
    passed in the parameter.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.mouseReleaseEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，旨在接收此按钮的鼠标释放事件，事件通过参数传递。'
- en: '`push_button.paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s
    designed to receive paint events for this push button, with events passed in the
    parameter.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.paintEvent(QtGui.QPaintEvent)`: 这是一个事件处理程序，旨在接收此按钮的绘制事件，事件通过参数传递。'
- en: '`push_button.timerEvent(QtCore.QTimerEvent)`: This is an event handler that''s
    designed to receive timer events for this push button, with events passed in the
    parameter.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_button.timerEvent(QtCore.QTimerEvent)`: 这是一个事件处理程序，旨在接收此按钮的定时事件，事件通过参数传递。'
- en: QToolButton
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QToolButton
- en: 'The `QToolButton` class constructs the quick-access tool button in the application,
    which is used for the commands or options that are usually defined with the toolbar.
    The declaration syntax for this kind of button is as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`QToolButton` 类构建应用程序中的快速访问工具按钮，用于通常在工具栏中定义的命令或选项。此类按钮的声明语法如下：'
- en: '[PRE1]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: QToolButton functions
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QToolButton 函数
- en: '`QToolButton` inherits from the `QAbstractButton` class and improves functionality
    by means of the following functions.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`QToolButton` 类从 `QAbstractButton` 类继承，并通过以下函数改进了功能。'
- en: set
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions that are related to setting the parameters/properties in
    relation to the tool button:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置工具按钮相关参数/属性的函数：
- en: '`tool_button.setArrowType(QtCore.Qt.ArrowType)`: This sets the arrow type for
    this tool button, with the arrow displayed instead of the normal icon.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.setArrowType(QtCore.Qt.ArrowType)`: 这将为该工具按钮设置箭头类型，箭头将显示而不是正常图标。'
- en: '`tool_button.setAutoRaise(bool)`: If the parameter is `True`, this sets auto-raising
    to be enabled for this tool button.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.setAutoRaise(bool)`: 如果参数为 `True`，则为此工具按钮启用自动提升功能。'
- en: '`tool_button.setDefaultAction(QtWidgets.QAction)`: This sets the default action
    specified in the parameter for this tool button.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.setDefaultAction(QtWidgets.QAction)`: 这将为该工具按钮设置参数中指定的默认操作。'
- en: '`tool_button.setMenu(QtWidgets.QMenu)`: This associates the menu specified
    in the parameter in relation to this tool button. The menu will be displayed according
    to the popup mode.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.setMenu(QtWidgets.QMenu)`: 这将指定与该工具按钮关联的菜单。菜单将根据弹出模式显示。'
- en: '`tool_button.setPopupMode(QtWidgets.QToolButton.ToolButtonPopupMode)`: This
    sets the popup mode for this tool button. The popup modes that are available are
    as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.setPopupMode(QtWidgets.QToolButton.ToolButtonPopupMode)`: 这将为此工具按钮设置弹出模式。可用的弹出模式如下：'
- en: '`QtWidgets.QToolButton.DelayedPopup`—`0`: The menu will be displayed with some
    delay'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QToolButton.DelayedPopup`—`0`: 菜单将延迟显示'
- en: '`QtWidgets.QToolButton.MenuButtonPopup`—`1`: The menu will be displayed with
    a special arrow'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QToolButton.MenuButtonPopup`—`1`: 菜单将带有特殊箭头显示'
- en: '`QtWidgets.QToolButton.InstantPopup`—`2`: The menu will be displayed without
    delay, and an action is not triggered'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QToolButton.InstantPopup`—`2`: 菜单将无延迟显示，且不会触发操作'
- en: '`tool_button.setToolButtonStyle(QtCore.Qt.ToolButtonStyle)`: This sets the
    style specified in the parameter for this tool button.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.setToolButtonStyle(QtCore.Qt.ToolButtonStyle)`: 这将为该工具按钮设置参数中指定的样式。'
- en: functional
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that are related to the returns of the current values of
    the tool button, changes in functionality, and so on:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与工具按钮当前值返回、功能变化等相关联的函数：
- en: '`tool_button.arrowType()`: This returns the arrow of the `QtCore.Qt.ArrowType`
    type that is used with this tool button.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.arrowType()`: 这将返回与该工具按钮一起使用的 `QtCore.Qt.ArrowType` 类型的箭头。'
- en: '`tool_button.autoRaise()`: This returns `True` if the auto-raising function
    is enabled for this tool button.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.autoRaise()`: 如果为该工具按钮启用了自动提升功能，则返回 `True`。'
- en: '`tool_button.defaultAction()`: This returns the default action of the `QtWidgets.QAction`
    type that''s used with this tool button.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.defaultAction()`: 这将返回与该工具按钮一起使用的 `QtWidgets.QAction` 类型的默认操作。'
- en: '`tool_button.menu()`: This returns the menu associated with this tool button.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.menu()`: 这将返回与该工具按钮关联的菜单。'
- en: '`tool_button.popupMode()`: This returns the mode of the `QtWidgets.QToolButton.ToolButtonPopupMode` type
    that is used with the popup menu of this tool button.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.popupMode()`: 这将返回与该工具按钮弹出菜单一起使用的 `QtWidgets.QToolButton.ToolButtonPopupMode`
    类型的模式。'
- en: '`tool_button.showMenu()`: This shows the popup menu associated with this tool
    button.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.showMenu()`: 这将显示与该工具按钮关联的弹出菜单。'
- en: '`tool_button.toolButtonStyle()`: This returns the style of the `QtCore.Qt.ToolButtonStyle`
    type that is used with this tool button.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.toolButtonStyle()`: 这将返回与该工具按钮一起使用的 `QtCore.Qt.ToolButtonStyle`
    类型的样式。'
- en: events
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'These are functions that are related to events, such as event handlers:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与事件相关的函数，例如事件处理器：
- en: '`tool_button.actionEvent(QtGui.QActionEvent)`: This event handler is called
    when actions are changed in relation to this tool button, with events passed in
    the parameter.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.actionEvent(QtGui.QActionEvent)`: 当与该工具按钮相关的操作发生变化时，将调用此事件处理器，事件通过参数传递。'
- en: '`tool_button.changeEvent(QtCore.QEvent)`: This handles state changes associated
    with this tool button.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.changeEvent(QtCore.QEvent)`: 这处理与该工具按钮相关的状态变化。'
- en: '`tool_button.enterEvent(QtCore.QEvent)`: This is an event handler that''s designed to
    receive the enter events of this tool button, which are passed with event parameters,
    and are sent when the mouse cursor enters the tool button.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.enterEvent(QtCore.QEvent)`: 这是一个事件处理器，旨在接收该工具按钮的进入事件，这些事件通过事件参数传递，并在鼠标光标进入工具按钮时发送。'
- en: '`tool_button.event(QtCore.QEvent)`: This receives events to the object and
    should return `True` if the event is recognized and processed.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.event(QtCore.QEvent)`: 这将接收对象的事件，如果事件被识别并处理，则应返回 `True`。'
- en: '`tool_button.leaveEvent(QEvent)`: This is an event handler that''s designed to
    receive leave events for this tool button, with events passed in the parameter.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.leaveEvent(QEvent)`: 这是一个事件处理程序，旨在接收此工具按钮的离开事件，事件通过参数传递。'
- en: '`tool_button.mousePressEvent(QtGui.QMouseEvent)`: This is an event handler
    that''s designed to receive mouse press events for this tool button, with mouse
    events passed in the parameter.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.mousePressEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，旨在接收此工具按钮的鼠标按下事件，鼠标事件通过参数传递。'
- en: '`tool_button.mouseReleaseEvent(QtGui.QMouseEvent)`: This is an event handler
    that''s designed to receive mouse release events for this tool button, with mouse
    events passed in the parameter.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.mouseReleaseEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，旨在接收此工具按钮的鼠标释放事件，鼠标事件通过参数传递。'
- en: '`tool_button.nextCheckState()`: The virtual handler is called in the event
    that the tool button is clicked.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.nextCheckState()`: 当工具按钮被点击时，会调用虚拟处理程序。'
- en: '`tool_button.paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s
    designed to receive paint events for this tool button, with paint events passed
    in the parameter.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.paintEvent(QtGui.QPaintEvent)`: 这是一个事件处理程序，旨在接收此工具按钮的绘制事件，绘制事件通过参数传递。'
- en: '`tool_button.timerEvent(QtCore.QTimerEvent)`: This is an event handler that''s
    designed to receive timer events for this tool button, with timer events passed
    in the parameter.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.timerEvent(QtCore.QTimerEvent)`: 这是一个事件处理程序，旨在接收此工具按钮的计时器事件，计时器事件通过参数传递。'
- en: signals
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signal for the `QToolButton` class is as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`QToolButton` 类的可用信号如下：'
- en: '`tool_button.triggered(QtWidgets.QAction)`: This signal is emitted when the
    action that''s passed to the parameter is triggered.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`tool_button.triggered(QtWidgets.QAction)`: 当传递给参数的动作被触发时，会发出此信号。'
- en: QRadioButton
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QRadioButton
- en: 'Another kind of button can be implemented within the application, and is known
    as a radio button. This component is an option button, as the user can make a
    choice between different options. Only one radio button of the group that contains
    the radio buttons can be checked at one time. If the radio button is selected
    by the user, other radio buttons within this group will be deselected. The `QRadioButton` class
    inherits from the `QAbstractButton` class and provides functions, signals, and
    events that are represented there. The radio button can also display text and
    icons. The declaration syntax for the radio button in the application is as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中可以实现另一种类型的按钮，称为无线电按钮。此组件是选项按钮，因为用户可以在不同选项之间进行选择。一次只能检查包含无线电按钮的组中的单个无线电按钮。如果用户选择了无线电按钮，则此组内的其他无线电按钮将被取消选中。`QRadioButton`
    类从 `QAbstractButton` 类继承，并提供了那里表示的功能、信号和事件。无线电按钮还可以显示文本和图标。在应用程序中无线电按钮的声明语法如下：
- en: '[PRE2]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The icon for this button can be used like so:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此按钮的图标可以使用如下方式使用：
- en: '[PRE3]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the case of text, we have the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本的情况下，我们有以下内容：
- en: '[PRE4]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The radio button can be styled in the same way as every widget that uses the `setStyleSheet()`
    function.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 无线电按钮可以像使用 `setStyleSheet()` 函数的每个小部件一样进行样式化。
- en: QButtonGroup
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QButtonGroup
- en: 'This class implements the container for groups of buttons. Containers with
    buttons are useful for creating a set of radio buttons with several options or
    check boxes to convey the complexity of the information. This class provides an
    abstract container and does not provide a visual representation. The button group
    manages the states of each button in the group. The declaration syntax for the
    button group in the application is as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此类实现了按钮组的容器。带有按钮的容器对于创建具有多个选项的无线电按钮或复选框以传达信息的复杂性非常有用。此类提供了一个抽象容器，不提供视觉表示。按钮组管理组中每个按钮的状态。在应用程序中按钮组的声明语法如下：
- en: '[PRE5]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: QButtonGroup functions
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QButtonGroup 函数
- en: '`QButtonGroup` inherits from the `QObject` class and improves functionality
    by means of the following functions.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`QButtonGroup` 类从 `QObject` 类继承，并通过以下函数改进了功能。'
- en: add
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加
- en: 'The following function is related to the addition of elements to the button
    group:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数与向按钮组添加元素相关：
- en: '`button_group.addButton(QtWidgets.QAbstractButton, int)`: This adds the button
    specified in the first parameter to this button group with the ID specified in
    the second parameter. If the ID is `1` (the default), the ID will be assigned
    to the button that''s added.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.addButton(QtWidgets.QAbstractButton, int)`: 此函数将第一个参数指定的按钮添加到此按钮组，并使用第二个参数指定的
    ID。如果 ID 是 `1`（默认值），则 ID 将分配给添加的按钮。'
- en: set
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions that are related to setting the parameters/properties in
    relation to the button group:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置按钮组相关参数/属性的函数：
- en: '`button_group.setExclusive(bool)`: If the parameter is `True`, this sets this
    button group as exclusive. In this case, only one button in this group can be
    checked at any one time.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.setExclusive(bool)`: 如果参数为 `True`，则将此按钮组设置为排他性。在这种情况下，这个组中任何时候只能选中一个按钮。'
- en: '`button_group.setId(QtWidgets.QAbstractButton, int)`: This sets the ID specified
    in the second parameter to the button specified in the first parameter of this
    button group.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.setId(QtWidgets.QAbstractButton, int)`: 将第二个参数指定的 ID 设置为第一个参数中指定的按钮。'
- en: functional
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能
- en: 'These are functions that are related to the returns of the current values of
    the button group, changes in functionality, and so on:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与按钮组当前值返回、功能变化等相关的函数：
- en: '`button_group.button(int)`: This returns the button with the ID specified in
    the parameter.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.button(int)`: 返回参数中指定 ID 的按钮。'
- en: '`button_group.buttons()`: This returns the list of buttons in this button group.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.buttons()`: 返回此按钮组中的按钮列表。'
- en: '`button_group.checkedButton()`: This returns the checked buttons within this
    button group, or `0` if the group does not contain the checked buttons.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.checkedButton()`: 返回此按钮组中选中的按钮，如果没有选中按钮则返回 `0`。'
- en: '`button_group.checkedId()`: This returns the IDs of the checked buttons within
    this button group, or `-1` if the group does not contain the checked buttons.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.checkedId()`: 返回此按钮组中选中按钮的 ID，如果没有选中按钮则返回 `-1`。'
- en: '`button_group.exclusive()`: This returns `True` if the button group is exclusive.
    This means that only one button in this group can be checked at any one time.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.exclusive()`: 如果按钮组是排他的，则返回 `True`。这意味着在这个组中任何时候只能选中一个按钮。'
- en: '`button_group.id(QtWidgets.QAbstractButton)`: This returns the ID of the button
    specified in the parameter.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.id(QtWidgets.QAbstractButton)`: 返回参数中指定按钮的 ID。'
- en: '`button_group.removeButton(QtWidgets.QAbstractButton)`: This removes the button
    specified in the parameter from this button group.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.removeButton(QtWidgets.QAbstractButton)`: 从此按钮组中移除参数中指定的按钮。'
- en: signals
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signals for the `QButtonGroup` class are as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`QButtonGroup` 类可用的信号如下：'
- en: '`button_group.buttonClicked(QtWidgets.QAbstractButton)`: This signal is emitted
    when the button specified in the parameter is clicked.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.buttonClicked(QtWidgets.QAbstractButton)`: 当参数中指定的按钮被点击时，会发出此信号。'
- en: '`button_group.buttonClicked(int)`: This signal is emitted when the button with
    the ID specified in the parameter is clicked.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.buttonClicked(int)`: 当参数中指定的按钮被点击时，会发出此信号。'
- en: '`button_group.buttonPressed(QtWidgets.QAbstractButton)`: This signal is emitted
    when the button specified in the parameter is pushed down.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.buttonPressed(QtWidgets.QAbstractButton)`: 当参数中指定的按钮被按下时，会发出此信号。'
- en: '`button_group.buttonPressed(int)`: This signal is emitted when the button with
    the ID specified in the parameter is pushed down.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.buttonPressed(int)`: 当参数中指定的按钮被按下时，会发出此信号。'
- en: '`button_group.buttonReleased(QtWidgets.QAbstractButton)`: This signal is emitted
    when the button specified in the parameter is released.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.buttonReleased(QtWidgets.QAbstractButton)`: 当参数中指定的按钮被释放时，会发出此信号。'
- en: '`button_group.buttonReleased(int)`: This signal is emitted when the button
    with the ID specified in the parameter is released.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.buttonReleased(int)`: 当参数中指定的按钮被释放时，会发出此信号。'
- en: '`button_group.buttonToggled(QtWidgets.QAbstractButton, bool)`: This signal
    is emitted when the button specified in the first parameter is toggled. The second
    parameter is `True` if the button is checked, or `False` if unchecked.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.buttonToggled(QtWidgets.QAbstractButton, bool)`: 当第一个参数指定的按钮被切换时，会发出此信号。如果按钮被选中，第二个参数为
    `True`，如果没有选中，则为 `False`。'
- en: '`button_group.buttonToggled(int, bool)`: This signal is emitted when the button
    with the ID specified in the first parameter is toggled. The second parameter
    is `True` if the button is checked, or `False` if unchecked.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_group.buttonToggled(int, bool)`: 当第一个参数指定的按钮被切换时，会发出此信号。如果按钮被选中，第二个参数为
    `True`，如果没有选中，则为 `False`。'
- en: Buttons example
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按钮示例
- en: 'Now, let''s try and create a push button that will be used with the application.
    Other types of buttons, in addition to the ones described here, will be implemented,
    as required, later in this book. By way of an example, let''s create the push
    button:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试创建一个用于应用程序的按钮。本书后面将根据需要实现其他类型的按钮。作为一个例子，让我们创建一个按钮：
- en: 'First of all, construct the `UBut1` class in both `u_style.py` files:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在两个`u_style.py`文件中构建`UBut1`类：
- en: '[PRE6]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We have added various parameters to the `__init__()` function of the `UBut1`
    class. The maximum width and height can be adjusted with respect to the appearance
    of the button in the GUI.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经向`UBut1`类的`__init__()`函数添加了各种参数。最大宽度和高度可以根据GUI中按钮的外观进行调整。
- en: 'Add the `but_style()` function, which will be used for styling this button, to
    the `UBut1`class:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用于样式化此按钮的`but_style()`函数添加到`UBut1`类中：
- en: '[PRE7]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This function will be used to avoid repetition in the code and will style this
    button if events occur. Add the functions that will be used with events that occur; in
    the first instance, we will add the function that handles button resize events,
    or when the button is resized, depending on the window size, and changes the font
    of the text of this button.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将用于避免代码重复，并在事件发生时样式化此按钮。添加将用于事件发生的函数；在第一个实例中，我们将添加处理按钮调整大小事件的函数，或者当按钮根据窗口大小调整大小时，更改此按钮文本的字体。
- en: 'Here is the function that handles resize events:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里是处理调整大小事件的函数：
- en: '[PRE8]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This function handles the resize event with the `event` passed in the parameter.
    It changes the font of the button, depending on the button's size.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数处理通过参数传递的`event`参数的调整大小事件。它根据按钮的大小更改按钮的字体。
- en: 'Add the `enterEvent` function, which handles the enter event of the button
    when the mouse enters the button area. The `enterEvent` function is added as follows:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`enterEvent`函数，该函数处理鼠标进入按钮区域时的按钮进入事件。`enterEvent`函数添加如下：
- en: '[PRE9]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This function handles the enter events of this button and changes the style
    accordingly.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数处理此按钮的进入事件并相应地更改样式。
- en: 'Add the `leaveEvent` function for this button''s leave events when the mouse
    pointer leaves this button:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此按钮的离开事件添加`leaveEvent`函数：
- en: '[PRE10]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This function handles the leave events of this button and changes the style
    accordingly. This is an example of an attempt to create a class that provides
    the push button for a variety of uses. Or, in other words, it gives the user the
    opportunity to style the button component, depending on the application tasks
    and functionality. All of these styling parameters can be changed within this
    class, as well as outside, for example, when used in the main application or elsewhere.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数处理按钮的离开事件并相应地更改样式。这是一个尝试创建一个提供各种用途的按钮类的例子。或者换句话说，它给用户提供了根据应用程序任务和功能来样式化按钮组件的机会。所有这些样式参数都可以在这个类中更改，也可以在外部更改，例如在主应用程序或其他地方使用时。
- en: 'Now, we need to add the `UBut1` class to the main application class in the `u_app.py` files with
    some customized parameters. Follow these steps to do so:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在`u_app.py`文件中将`UBut1`类添加到主应用程序类中，并使用一些自定义参数。按照以下步骤进行操作：
- en: 'Add the following line to the `import` section of the `u_app.py` file:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`u_app.py`文件的`import`部分添加以下行：
- en: '[PRE11]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, we need to add this button to the `UApp` class, as follows:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要将此按钮添加到`UApp`类中，如下所示：
- en: '[PRE12]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We have added the button instance and created the layout that will contain this
    button.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了按钮实例并创建了一个将包含此按钮的布局。
- en: 'Then, add the layout that was created with this button to the layout of the
    second frame:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将使用此按钮创建的布局添加到第二个框架的布局中：
- en: '[PRE13]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We will see the following result:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到以下结果：
- en: '![](img/2ee6e5e9-3a6a-426f-8181-f77682cc109f.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ee6e5e9-3a6a-426f-8181-f77682cc109f.png)'
- en: In the right-bottom corner, we can see the `Ok` button. This will provide a
    hover effect of being a lighter green color if the mouse pointer rolls over the
    button.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在右下角，我们可以看到“确定”按钮。当鼠标指针悬停在按钮上时，它将提供一个更浅绿色的悬停效果。
- en: QCheckBox
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QCheckBox
- en: 'Just like the radio button, the checkbox is an option button that allows the
    user to make a choice. These buttons are usually implemented in combination with
    the features that will be used with a particular action. These options can be
    switched on or off as per the user''s preference. The checkbox can display the
    text of the option, as well as the icon. The declaration syntax for this kind
    of button is as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 就像单选按钮一样，复选框是一个选项按钮，允许用户做出选择。这些按钮通常与特定动作将使用的功能结合使用。这些选项可以根据用户的偏好开启或关闭。复选框可以显示选项的文本，以及图标。此类按钮的声明语法如下：
- en: '[PRE14]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: QCheckBox functions
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QCheckBox 函数
- en: '`QCheckBox` inherits from the `QAbstractButton` class and improves functionality
    by means of the following functions.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`QCheckBox` 从 `QAbstractButton` 类继承，并通过以下函数改进了功能。'
- en: set
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions that are related to setting the parameters/properties in
    relation to the checkbox:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置复选框相关参数/属性的函数：
- en: '`check_box.setCheckState(QtCore.Qt.CheckState)`: This sets the check state
    for this checkbox.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`check_box.setCheckState(QtCore.Qt.CheckState)`: 这将设置复选框的检查状态。'
- en: '`check_box.setTristate(bool)`: This sets the three-state availability that
    will be used with this checkbox. The states that can be used are as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`check_box.setTristate(bool)`: 这将设置与复选框一起使用的三态可用性。可以使用的状态如下：'
- en: '`QtCore.Qt.Unchecked`: The checkbox is unchecked.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.Unchecked`: 复选框未被选中。'
- en: '`QtCore.Qt.PartiallyChecked`: The checkbox is partially checked.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.PartiallyChecked`: 复选框部分选中。'
- en: '`QtCore.Qt.Checked`: The checkbox is checked.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.Checked`: 复选框被选中。'
- en: is
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is
- en: 'This function returns a Boolean value (`bool`) related to the checkbox states:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回与复选框状态相关的布尔值 (`bool`)：
- en: '`check_box.isTristate()`: This returns `True` if this checkbox has three states.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`check_box.isTristate()`: 如果这个复选框有三个状态，则返回 `True`。'
- en: functional
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'This function is related to the returns of the current values of the checkbox:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数与复选框当前值的返回相关：
- en: '`check_box.checkState()`: This returns the check state of the `QtCore.Qt.CheckState`
    type for this checkbox.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`check_box.checkState()`: 这返回复选框的 `QtCore.Qt.CheckState` 类型的检查状态。'
- en: events
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'These are functions that are related to events, such as event handlers:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与事件相关的函数，例如事件处理程序：
- en: '`check_box.event(QtCore.QEvent)`: This is the `QtCore.QObject` function that
    receives events to the object and should return `True` if the event is recognized
    and processed.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`check_box.event(QtCore.QEvent)`: 这是 `QtCore.QObject` 函数，接收对象的事件，如果事件被识别并处理，则应返回
    `True`。'
- en: '`check_box.mouseMoveEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse move events for the checkbox, with events passed in
    the parameter.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`check_box.mouseMoveEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，旨在接收复选框的鼠标移动事件，事件通过参数传递。'
- en: '`check_box.paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s
    designed to receive paint events for the checkbox, with events passed in the parameter.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`check_box.paintEvent(QtGui.QPaintEvent)`: 这是一个事件处理程序，旨在接收复选框的绘制事件，事件通过参数传递。'
- en: signals
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signal for the `QCheckBox` class is as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`QCheckBox` 类可用的信号如下：'
- en: '`check_box.stateChanged(int)`: This signal is emitted when the state of this
    checkbox is changed, with states passed in the parameter.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`check_box.stateChanged(int)`: 当复选框的状态改变时，会发出此信号，状态通过参数传递。'
- en: Additional components
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外组件
- en: Alongside what we've covered in this chapter, let's consider sliders and other
    useful components that can be used with GUI applications. The different types
    of sliders make it possible to provide the functionality with some additional
    special actions, such as scrolling windows and sliding values.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 除了本章所涵盖的内容外，让我们考虑滑块和其他可用于 GUI 应用程序的有用组件。不同类型的滑块使得提供一些附加的特殊动作成为可能，例如滚动窗口和滑动值。
- en: QAbstractSlider
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QAbstractSlider
- en: This class is a super class for components, including the scrollbar, slider,
    and dial. `QAbstractSlider` inherits from the `QWidget` class and improves functionality
    by means of the following functions.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 此类是包括滚动条、滑块和旋钮在内的组件的父类。`QAbstractSlider` 从 `QWidget` 类继承，并通过以下函数改进了功能。
- en: set
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions that are related to setting the parameters/properties,
    including size, range, and functionality:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置参数/属性相关的函数，包括大小、范围和功能：
- en: '`setInvertedAppearance(bool)`: If the parameter is `True`, the inherited component
    will show its values inverted.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`setInvertedAppearance(bool)`: 如果参数为 `True`，则继承的组件将显示其值反转。'
- en: '`setInvertedControls(bool)`: If the parameter is `True`, this sets the wheel
    and key events as inverted for the component that''s used.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`setInvertedControls(bool)`: 如果参数为 `True`，则将组件使用的轮和按键事件设置为反转。'
- en: '`setMaximum(int)`: This sets the maximum value specified in the parameter for
    the component that''s used. In the case of the slider, this will be the maximum
    value in the range.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`setMaximum(int)`: 这将用于组件的参数中指定的最大值设置为。在滑块的情况下，这将是在范围内的最大值。'
- en: '`setMinimum(int)`: This sets the minimum value specified in the parameter for
    the component that''s used. In the case of the slider, this will be the minimum
    value in the range.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`setMinimum(int)`: 这将用于组件的参数中指定的最小值设置为。在滑块的情况下，这将是在范围内的最小值。'
- en: '`setOrientation(QtCore.Qt.Orientation)`: This sets the orientation for the
    used component as `QtCore.Qt.Horizontal` or `QtCore.Qt.Vertical` (the default).'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`setOrientation(QtCore.Qt.Orientation)`: 这将用于组件的朝向设置为 `QtCore.Qt.Horizontal`
    或 `QtCore.Qt.Vertical`（默认）。'
- en: '`setPageStep(int)`: This sets the page step specified in the parameter that
    will be used with this component.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`setPageStep(int)`: 这将设置与组件一起使用的参数中指定的页面步进。'
- en: '`setRange(int, int)`: This sets the range values for the component used, from
    minimum (the first parameter) to maximum (the second parameter).'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`setRange(int, int)`: 这将设置用于组件的范围值，从最小值（第一个参数）到最大值（第二个参数）。'
- en: '`setRepeatAction(QtWidgets.QAbstractSlider.SliderAction, int, int)`: This sets
    the action (the first parameter) that will be triggered at intervals (the third
    parameter), or with a delay (the second parameter).'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`setRepeatAction(QtWidgets.QAbstractSlider.SliderAction, int, int)`: 这设置在间隔（第三个参数）或延迟（第二个参数）时将触发的作用（第一个参数）。'
- en: '`setSingleStep(int)`: This sets the single step for the component used, typically
    by responding to pushing an arrow key of one of the components.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`setSingleStep(int)`: 这将设置用于组件的单步，通常通过响应组件之一的方向键的按下。'
- en: '`setSliderDown(bool)`: If the parameter is `True`, the slider will be pulled down.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`setSliderDown(bool)`: 如果参数为 `True`，则滑块将被拉下。'
- en: '`setSliderPosition(int)`: This sets the current position specified in the parameter
    for the slider component.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`setSliderPosition(int)`: 这将设置滑块组件的当前位置指定的参数。'
- en: '`setTracking(bool)`: If the parameter is `True`, this sets the tracking as
    enabled. If this property is enabled, the component emits the `valueChanged()`
    signal when dragged. In another instance, this signal will only be emitted when
    released.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`setTracking(bool)`: 如果参数为 `True`，则将跟踪设置为启用。如果此属性启用，组件在拖动时会发出 `valueChanged()`
    信号。在另一种情况下，此信号仅在释放时发出。'
- en: '`setValue(int)`: This sets the current value specified in the parameter of
    the component in the range. For example, the slider''s handle will move to this
    value.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`setValue(int)`: 这将设置组件范围内的当前值指定的参数。例如，滑块的把手将移动到这个值。'
- en: is
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is
- en: 'These function returns a Boolean value (`bool`) related to states:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回与状态相关的布尔值 (`bool`)：
- en: '`isSliderDown()`: This returns `True` if the component is pressed down'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`isSliderDown()`: 如果组件被按下，则返回 `True`。'
- en: functional
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values,
    changes in functionality, and so on:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前值返回、功能变化等相关联的函数：
- en: '`invertedAppearance()`: This returns `True` if the inherited component shows
    its values inverted.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`invertedAppearance()`: 如果继承的组件显示其值被反转，则返回 `True`。'
- en: '`invertedControls()`: This returns `True` if the wheel and key events are inverted
    for the component being used.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`invertedControls()`: 如果组件使用的轮和按键事件被反转，则返回 `True`。'
- en: '`maximum()`: This returns the maximum value of the integer type for the component
    being used. In the case of the slider, this will be the maximum value in the range.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`maximum()`: 这返回正在使用的组件的整型最大值。在滑块的情况下，这将是在范围内的最大值。'
- en: '`minimum()`: This returns the minimum value of the integer type for the component
    being used. In the case of the slider, this will be the minimum value in the range.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`minimum()`: 这返回正在使用的组件的整型最小值。在滑块的情况下，这将是在范围内的最小值。'
- en: '`orientation()`: This returns the orientation of the `QtCore.Qt.Orientation`
    type for the component being used.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`orientation()`: 这返回正在使用的组件的 `QtCore.Qt.Orientation` 类型的朝向。'
- en: '`pageStep()`: This returns the page step, as an integer value, of the component
    being used.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`pageStep()`: 这返回正在使用的组件的页面步进，以整数值表示。'
- en: '`repeatAction()`: This returns the repeat action of the `QtWidgets.QAbstractSlider.SliderAction`
    type for the component being used.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`repeatAction()`: 这返回正在使用的组件的 `QtWidgets.QAbstractSlider.SliderAction` 类型的重复操作。'
- en: '`singleStep()`: This returns the single step of the component being used.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`singleStep()`: 这个函数返回正在使用的组件的单步值。'
- en: '`sliderChange(QtWidgets.QAbstractSlider.SliderChange)`: This tracks slider
    changes with the available parameters, such as the following:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`sliderChange(QtWidgets.QAbstractSlider.SliderChange)`: 这个函数跟踪滑动条的变化，使用可用的参数，如下所示：'
- en: '`QtWidgets.QAbstractSlider.SliderRangeChange`—`0`: Range changes.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractSlider.SliderRangeChange`—`0`: 范围变化。'
- en: '`QtWidgets.QAbstractSlider.SliderOrientationChange`—`1`: Orientation changes.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractSlider.SliderOrientationChange`—`1`: 方向变化。'
- en: '`QtWidgets.QAbstractSlider.SliderStepsChange`—`2`: Step changes.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractSlider.SliderStepsChange`—`2`: 步长变化。'
- en: '`QtWidgets.QAbstractSlider.SliderValueChange`—`3`: Value changes.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractSlider.SliderValueChange`—`3`: 值变化。'
- en: '`sliderPosition()`: This returns the current position of the slider component
    in the range.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`sliderPosition()`: 这个函数返回滑动条组件在范围内的当前位置。'
- en: '`triggerAction(QtWidgets.QAbstractSlider.SliderAction)`: This triggers the
    slider action specified in the parameter.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`triggerAction(QtWidgets.QAbstractSlider.SliderAction)`: 这个函数触发参数中指定的滑动条动作。'
- en: '`value()`: This returns the current value of the slider component.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`value()`: 这个函数返回滑动条组件的当前值。'
- en: events
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'These are functions that are related to events such as event handlers, and
    so on:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与事件处理程序等事件相关的函数：
- en: '`changeEvent(QtCore.QEvent)`: This handles state changes.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`changeEvent(QtCore.QEvent)`: 这个函数处理状态变化。'
- en: '`event(QtCore.QEvent)`: This is the `QtCore.QObject` function, which receives
    events to the object and should return `True` if the event is recognized and processed.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`event(QtCore.QEvent)`: 这是`QtCore.QObject`函数，它接收对象的事件，如果事件被识别并处理，则应返回`True`。'
- en: '`keyPressEvent(QtGui.QKeyEvent)`: This is an event handler that''s designed to receive
    key press events for the component being used, with a key event passed in the
    parameter.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`keyPressEvent(QtGui.QKeyEvent)`: 这是一个事件处理程序，用于接收用于组件的关键事件，其中事件通过参数传递。'
- en: '`timerEvent(QtCore.QTimerEvent)`: This is an event handler that''s designed to
    receive timer events for the component being used, with a timer event passed in
    the parameter.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`timerEvent(QtCore.QTimerEvent)`: 这是一个事件处理程序，用于接收用于组件的计时器事件，其中计时器事件通过参数传递。'
- en: '`wheelEvent(QtGui.QWheelEvent)`: This is an event handler that''s designed to
    receive mouse wheel events for the component being used, with a wheel event passed
    in the parameter.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`wheelEvent(QtGui.QWheelEvent)`: 这是一个事件处理程序，用于接收用于组件的鼠标滚轮事件，其中滚轮事件通过参数传递。'
- en: signals
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signals for the `QAbstractSlider` class are as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`QAbstractSlider`类可用的信号如下：'
- en: '`actionTriggered(int)`: This signal is emitted when the slider is triggered
    by an action that''s passed in the parameter.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`actionTriggered(int)`: 当滑动条被传递参数的动作触发时，会发出此信号。'
- en: '`rangeChanged(int, int)`: This signal is emitted when the slider''s range has
    been modified with new minimum and maximum range parameters.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`rangeChanged(int, int)`: 当滑动条的取值范围被修改为新的最小和最大范围参数时，会发出此信号。'
- en: '`sliderMoved(int)`: This signal is emitted when the slider moves and `sliderDown()`
    is `True`, with a new slider position passed in the parameter.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`sliderMoved(int)`: 当滑动条移动且`sliderDown()`为`True`时，会发出此信号，其中新的滑动条位置通过参数传递。'
- en: '`sliderPressed()`: This signal is emitted when the slider is pressed, also
    programmatically with `setSliderDown(True)`.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`sliderPressed()`: 当滑动条被按下时，会发出此信号，也可以通过`setSliderDown(True)`程序化地触发。'
- en: '`sliderReleased()`: This signal is emitted when the slider is released, also
    programmatically with `setSliderDown(True)`.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`sliderReleased()`: 当滑动条被释放时，会发出此信号，也可以通过`setSliderDown(True)`程序化地触发。'
- en: '`valueChanged(int)`: This signal is emitted when the slider value is revised,
    with new values passed in the parameter.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`valueChanged(int)`: 当滑动条值被修订时，会发出此信号，其中新值通过参数传递。'
- en: QSlider
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QSlider
- en: 'This class provides a vertical or horizontal slider in the GUI application
    that can be used to move a slider handle along a groove and translates the position
    of the handle into an integer value. `QSlider` inherits from the `QAbstractSlider`
    class. The declaration syntax for the slider is as follows:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 此类在GUI应用程序中提供了一个垂直或水平滑动条，可以用来移动滑动条手柄沿凹槽，并将手柄的位置转换为整数值。`QSlider`类继承自`QAbstractSlider`类。滑动条的声明语法如下：
- en: '[PRE15]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `QSlider` class improves functionality by means of the following functions.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`QSlider`类通过以下函数改进了功能。'
- en: set
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions that are related to setting the parameters/properties in
    relation to the slider:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与滑动条相关的参数/属性的函数：
- en: '`slider.setTickInterval(int)`: This sets the interval between the tick marks
    of this slider.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`slider.setTickInterval(int)`: 这将设置此滑块的刻度线间隔。'
- en: '`slider.setTickPosition(QtWidgets.QSlider.TickPosition)`: This sets the tick
    mark position of this slider. The available parameters are as follows:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`slider.setTickPosition(QtWidgets.QSlider.TickPosition)`: 这将设置此滑块的刻度线位置。可用参数如下：'
- en: '`QtWidgets.QSlider.NoTicks`—`0`: No tick marks.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSlider.NoTicks`—`0`: 没有刻度线。'
- en: '`QtWidgets.QSlider.TicksBothSides`—`3`: Tick marks on both sides.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSlider.TicksBothSides`—`3`: 两边都有刻度线。'
- en: '`QtWidgets.QSlider.TicksAbove`—`1`: Tick marks above (horizontal).'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSlider.TicksAbove`—`1`: 刻度线在上方（水平）。'
- en: '`QtWidgets.QSlider.TicksBelow`—`2`: Tick marks below (horizontal).'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSlider.TicksBelow`—`2`: 刻度线在下方（水平）。'
- en: '`QtWidgets.QSlider.TicksLeft`—`TicksAbove`: Tick marks left (vertical).'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSlider.TicksLeft`—`TicksAbove`: 刻度线在左侧（垂直）。'
- en: '`QtWidgets.QSlider.TicksRight`—`TicksBelow`: Tick marks right (vertical).'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSlider.TicksRight`—`TicksBelow`: 刻度线在右侧（垂直）。'
- en: functional
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that return the current values:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回当前值的函数：
- en: '`slider.tickInterval()`: This returns the interval between the tick marks of
    the slider.'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`slider.tickInterval()`: 这返回滑块刻度线之间的间隔。'
- en: '`slider.tickPosition()`: This returns the tick mark position of the `QtWidgets.QSlider.TickPosition`
    type.'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`slider.tickPosition()`: 这返回`QtWidgets.QSlider.TickPosition`类型的刻度线位置。'
- en: events
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'These are functions that are related to events, such as event handlers:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与事件相关的函数，例如事件处理程序：
- en: '`slider.event(QtCore.QEvent)`: This is the `QtCore.QObject` function, which
    receives events to the object and should return `True` if the event is recognized
    and processed.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`slider.event(QtCore.QEvent)`: 这是`QtCore.QObject`函数，它接收对象的事件，如果事件被识别并处理，则应返回`True`。'
- en: '`slider.mouseMoveEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse move events for the slider, with a mouse event passed
    in the parameter.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`slider.mouseMoveEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，用于接收滑块的鼠标移动事件，并通过参数传递鼠标事件。'
- en: '`slider.mousePressEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse press events for the slider, with a mouse event passed
    in the parameter.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`slider.mousePressEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，用于接收滑块的鼠标按下事件，并通过参数传递鼠标事件。'
- en: '`slider.mouseReleaseEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse release events for the slider, with a mouse event passed
    in the parameter.'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`slider.mouseReleaseEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，用于接收滑块的鼠标释放事件，并通过参数传递鼠标事件。'
- en: '`slider.paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s designed to
    receive paint events for the slider, with a paint event passed in the parameter.'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`slider.paintEvent(QtGui.QPaintEvent)`: 这是一个事件处理程序，用于接收滑块的绘制事件，并通过参数传递绘制事件。'
- en: QDial
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QDial
- en: 'This class provides a rounded range component that can be wrapped around in
    a range of `0` to `359` degrees. `QDial` inherits from the `QAbstractSlider` class.
    The declaration syntax for the dial is as follows:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 此类提供了一个可以环绕在`0`到`359`度范围内的圆形范围组件。`QDial`类从`QAbstractSlider`类继承。旋钮的声明语法如下：
- en: '[PRE16]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `QDial`  class improves functionality by means of the following functions.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`QDial`类通过以下函数增强了功能。'
- en: set
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions that are related to setting parameters/properties in relation
    to the dial:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与旋钮相关的参数/属性相关的函数：
- en: '`dial.setNotchesVisible(bool)`: If the parameter is `True`, this sets the notches
    of this dial as being visible.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`dial.setNotchesVisible(bool)`: 如果参数为`True`，则将此旋钮的凹槽设置为可见。'
- en: '`dial.setNotchTarget(float)`: This sets the target number in the pixels specified
    in the parameter between each notch of this dial.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`dial.setNotchTarget(float)`: 这将设置此旋钮每个凹槽之间的像素参数指定的目标数值。'
- en: '`dial.setWrapping(bool)`: If the parameter is `True`, this sets wrapping as
    enabled for this dial.'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`dial.setWrapping(bool)`: 如果参数为`True`，则为此旋钮启用环绕。'
- en: functional
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that are related to the returns of the current values:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前值返回相关的函数：
- en: '`dial.notchesVisible()`: This returns `True` if the notches are visible on
    this dial.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`dial.notchesVisible()`: 如果此旋钮上的凹槽可见，则返回`True`。'
- en: '`dial.notchSize()`: This returns the current size of the dial''s notches.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`dial.notchSize()`: 这返回旋钮凹槽的当前大小。'
- en: '`dial.notchTarget()`: This returns the target number of pixels as float values,
    and are used between the notches of this dial.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`dial.notchTarget()`: 这返回目标像素数作为浮点值，并用于此旋钮的凹槽之间。'
- en: '`dial.wrapping()`: This returns `True` if the wrapping is enabled for this
    dial.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`dial.wrapping()`: 如果此旋钮启用了包装，则返回 `True`。'
- en: events
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'These are functions that are related to events such as event handlers, and
    so on:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与事件处理程序等事件相关的函数：
- en: '`dial.event(QtCore.QEvent)`: This receives events to the object and should
    return `True` if the event is recognized and processed.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`dial.event(QtCore.QEvent)`: 这接收对象的事件，如果事件被识别并处理，则应返回 `True`。'
- en: '`dial.mouseMoveEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse move events for this dial, with a mouse event passed
    in the parameter.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`dial.mouseMoveEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，旨在接收此旋钮的鼠标移动事件，并通过参数传递鼠标事件。'
- en: '`dial.mousePressEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse press events for this dial, with a mouse event passed
    in the parameter.'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`dial.mousePressEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，旨在接收此旋钮的鼠标按下事件，并通过参数传递鼠标事件。'
- en: '`dial.mouseReleaseEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse release events for this dial, with a mouse event passed
    in the parameter.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`dial.mouseReleaseEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，旨在接收此旋钮的鼠标释放事件，并通过参数传递鼠标事件。'
- en: '`dial.paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s designed to
    receive paint events for this dial, with a paint event passed in the parameter.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`dial.paintEvent(QtGui.QPaintEvent)`: 这是一个事件处理程序，旨在接收此旋钮的绘制事件，并通过参数传递绘制事件。'
- en: '`dial.resizeEvent(QtGui.QResizeEvent)`: This is an event handler that''s designed to
    receive widget resize events for this dial, with a resize event passed in the
    parameter.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`dial.resizeEvent(QtGui.QResizeEvent)`: 这是一个事件处理程序，旨在接收此旋钮的部件大小调整事件，并通过参数传递大小调整事件。'
- en: QProgressBar
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QProgressBar
- en: 'The progress bar provides a horizontal or vertical component to indicate the
    operation''s progress. This can be implemented in the application. The declaration
    syntax for the application as is as follows:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 进度条提供了一个水平或垂直组件来指示操作的进度。这可以在应用程序中实现。应用程序的声明语法如下：
- en: '[PRE17]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`QProgressBar` inherits from the `QWidget` class and improves functionality
    by means of the following functions.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`QProgressBar` 从 `QWidget` 类继承，并通过以下函数改进了功能。'
- en: set
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions that are related to the setting of the parameters/properties
    in relation to the progress bar:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与进度条参数/属性设置相关的函数：
- en: '`progress.setAlignment(QtCore.Qt.Alignment)`: This sets the alignment that
    will be used with the progress bar.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.setAlignment(QtCore.Qt.Alignment)`: 这将设置与进度条一起使用的对齐方式。'
- en: '`progress.setFormat("%p%")`: This sets the format for the text that will be
    used with progression. The available formats are as follows:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.setFormat("%p%")`: 这将设置用于进度的文本格式。可用的格式如下：'
- en: '`"%p%"`: The values will be replaced by the percentage (the default)'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"%p%"`: 这些值将被替换为百分比（默认）'
- en: '`"%v%"`: The values will be replaced by the current value'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"%v%"`: 这些值将被当前值替换'
- en: '`"%m%"`: The values will be replaced by the total number of completed steps'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"%m%"`: 这些值将被替换为已完成的步骤总数'
- en: '`progress.setInvertedAppearance(bool)`: If the parameter is `True`, the bar
    will display its progress as inverted.'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.setInvertedAppearance(bool)`: 如果参数为 `True`，则条形将显示其逆序进度。'
- en: '`progress.setMaximum(int)`: This sets the maximum value for this progress bar.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.setMaximum(int)`: 这将设置此进度条的最大值。'
- en: '`progress.setMinimum(int)`: This sets the minimum value for this progress bar.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.setMinimum(int)`: 这将设置此进度条的最低值。'
- en: '`progress.setOrientation(QtCore.Qt.Orientation)`: This sets the orientation
    of this progress bar. In the parameter, the `QtCore.Qt.Vertical` or `QtCore.Qt.Horizontal`
    (the default) orientations can be used.'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.setOrientation(QtCore.Qt.Orientation)`: 这将设置此进度条的朝向。在参数中，可以使用 `QtCore.Qt.Vertical`
    或 `QtCore.Qt.Horizontal`（默认）朝向。'
- en: '`progress.setRange(int, int)`: This sets the range for the values of the progress
    bar, with the minimum (the first parameter) and maximum (the second parameter)
    specified. By using `setRange(0, 0)`, the progress bar will be set to an indeterminate
    state.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.setRange(int, int)`: 这将设置进度条值的范围，指定最小值（第一个参数）和最大值（第二个参数）。通过使用 `setRange(0,
    0)`，进度条将被设置为不确定状态。'
- en: '`progress.setTextDirection(QtWidgets.QProgressBar.Direction)`: This sets the
    direction specified in the parameter for the text displayed with this progress
    bar. The available directions for the vertical progress bar are as follows:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.setTextDirection(QtWidgets.QProgressBar.Direction)`: 这设置参数中指定的文本显示方向。垂直进度条的可选方向如下：'
- en: '`QtWidgets.QProgressBar.TopToBottom`—`0`: The text will be rotated by `90`
    degrees clockwise'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QProgressBar.TopToBottom`—`0`: 文本将顺时针旋转 `90` 度'
- en: '`QtWidgets.QProgressBar.BottomToTop`—`1`: The text will be rotated by `90`
    degrees counter-clockwise'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QProgressBar.BottomToTop`—`1`: 文本将逆时针旋转 `90` 度'
- en: '`progress.setTextVisible(bool)`: If the parameter is `True`, the current completed
    percentage will be displayed through this progress bar.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.setTextVisible(bool)`: 如果参数为 `True`，则将通过此进度条显示当前完成百分比。'
- en: '`progress.setValue(int)`: This sets the current value specified in the parameter
    for this progress bar.'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.setValue(int)`: 这设置此进度条指定的当前值。'
- en: is
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是
- en: 'This function returns a Boolean value (`bool`) related to states:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回与状态相关的布尔值 (`bool`)：
- en: '`progress.isTextVisible()`: This returns `True` if the current completed percentage
    is displayed.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.isTextVisible()`: 如果当前完成百分比被显示，则返回 `True`。'
- en: functional
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These functions are related to the returns of the current values, changes in
    functionality, and so on:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与当前值的返回、功能变化等相关：
- en: '`progress.alignment()`: This returns the alignment of the `QtCore.Qt.Alignment`
    type that will be used with this progress bar.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.alignment()`: 这返回将与该进度条一起使用的 `QtCore.Qt.Alignment` 类型的对齐方式。'
- en: '`progress.format()`: This returns the string with the format that will be used
    to generate the text displayed in the progress bar.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.format()`: 这返回用于生成进度条中显示的文本的格式字符串。'
- en: '`progress.maximum()`: This returns the maximum value of the progress bar.'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.maximum()`: 这返回进度条的最大值。'
- en: '`progress.minimum()`: This returns the minimum value of the progress bar.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.minimum()`: 这返回进度条的最小值。'
- en: '`progress.orientation()`: This returns the orientation of the `QtCore.Qt.Orientation`
    type for the progress bar.'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.orientation()`: 这返回进度条的 `QtCore.Qt.Orientation` 类型的方向。'
- en: '`progress.reset()`: This will reset the progress bar. The progress bar does
    not progress and rewinds.'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.reset()`: 这将重置进度条。进度条不会前进，而是回退。'
- en: '`progress.resetFormat()`: This will reset the format of the text used with
    the progress bar.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.resetFormat()`: 这将重置与进度条一起使用的文本格式。'
- en: '`progress.text()`: This returns the text displayed with this progress bar.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.text()`: 这返回与该进度条一起显示的文本。'
- en: '`progress.value()`: This returns the current value of this progress bar.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.value()`: 这返回此进度条当前值。'
- en: events
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'These functions are related to events such as event handlers, and so on:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与事件处理程序等事件相关：
- en: '`progress.event(QtCore.QEvent)`: This receives events to the object and should
    return `True` if the event is recognized and processed.'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.event(QtCore.QEvent)`: 这接收对象的事件，如果事件被识别并处理，则应返回 `True`。'
- en: '`progress.mouseMoveEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse move events for the progress bar, with a mouse event
    passed in the parameter.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.mouseMoveEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，旨在接收进度条的鼠标移动事件，并通过参数传递鼠标事件。'
- en: '`progress.mousePressEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse press events for the progress bar, with a mouse event
    passed in the parameter.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.mousePressEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，旨在接收进度条的鼠标按下事件，并通过参数传递鼠标事件。'
- en: '`progress.mouseReleaseEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse release events for the progress bar, with a mouse event
    passed in the parameter.'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.mouseReleaseEvent(QtGui.QMouseEvent)`: 这是一个事件处理程序，旨在接收进度条的鼠标释放事件，并通过参数传递鼠标事件。'
- en: '`progress.paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s
    designed to receive paint events for this progress bar, with a paint event passed
    in the parameter.'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress.paintEvent(QtGui.QPaintEvent)`: 这是一个事件处理程序，旨在接收此进度条的绘制事件，并通过参数传递绘制事件。'
- en: signals
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signal for the `QProgressBar` class is as follows:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`QProgressBar` 类可用的信号如下：'
- en: '`valueChanged(int)`: This signal is emitted when the progress bar value has
    changed, with the new value passed in the parameter.'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`valueChanged(int)`: 当进度条值发生变化时，会发出此信号，并通过参数传递新值。'
- en: QProgressBar example
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QProgressBar 示例
- en: 'Now, we can create the progress bar for the application. This will indicate
    the progress of certain operations that will be run. To do this, create a class
    named `UProgress` in the `u_style.py` files:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以为应用程序创建进度条。这将指示将要运行的操作的进度。为此，在`u_style.py`文件中创建一个名为`UProgress`的类：
- en: 'Add the `UProgress` class for the progress bar:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为进度条添加`UProgress`类：
- en: '[PRE18]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We have successfully added the styling properties for the progress bar. These
    can be reimplemented in the application.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功添加了进度条的风格属性。这些可以在应用程序中重新实现。
- en: 'Then, add the `pgrs_style()` function  to this class. This will be used to
    style the progress bar:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将`pgrs_style()`函数添加到这个类中。这将用于设置进度条的风格：
- en: '[PRE19]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This function will restyle the progress bar and is dependent on certain events.
    The handlers of these events can be added later. Now, we need to realize this
    progress bar in the GUI by adding some classes to the `u_app.py` files.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将重新设置进度条的风格，并依赖于某些事件。这些事件的处理器可以稍后添加。现在，我们需要通过向`u_app.py`文件添加一些类来实现这个进度条在GUI中的显示。
- en: 'Add the `UProgress` class to the import section:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`UProgress`类添加到导入部分：
- en: '[PRE20]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, add the progress bar to the `UApp` class:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将进度条添加到`UApp`类中：
- en: '[PRE21]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We are using the `setRange()` method of the bar to set the progress in indeterminate
    mode. When we run the `u_app.py` file, we will see the following result (the progress
    bar slides indefinitely in indeterminate mode):'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用条的`setRange()`方法来设置不确定模式的进度。当我们运行`u_app.py`文件时，我们将看到以下结果（进度条在不确定模式下无限滑动）：
- en: '![](img/5b3516fc-f18d-427e-a051-d8792f855b20.png)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5b3516fc-f18d-427e-a051-d8792f855b20.png)'
- en: We added the progress bar below the button. At the moment, it is in an indeterminate
    state.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在按钮下方添加了进度条。目前，它处于不确定状态。
- en: Summary
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter demonstrated the basic features and properties of the most popular
    components that can be used in the GUI application. These elements are buttons,
    as well as some controls and indication bars. Not all of them were covered in
    our examples, but they can be used and added later, as required, in the implementation
    of the functionality to the app.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了在GUI应用程序中可以使用的最流行组件的基本特性和属性。这些元素包括按钮，以及一些控件和指示条。并非所有这些都在我们的示例中涵盖，但它们可以在需要时添加到应用程序功能实现中。
- en: This chapter draws a line under the description of the main components of the
    GUI application. In the next chapter, we will dive into the basics of graphics
    in our GUI application.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 本章在GUI应用程序主要组件的描述下划了一条线。在下一章中，我们将深入探讨GUI应用程序中图形的基础知识。
