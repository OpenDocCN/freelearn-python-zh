- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Integrating the React Frontend with the Flask Backend
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成React前端与Flask后端
- en: This chapter represents a critical point in our quest to build a full stack
    web application. In this chapter, you will be introduced to a set of instructions
    on how to connect a Flask web server to a React frontend. You will learn how to
    pass form entries from the React frontend to the Flask backend. And after this
    integration, you can be officially called a **full stack** **web developer**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章代表了我们构建全栈Web应用程序过程中的一个关键点。在本章中，你将了解到如何将Flask Web服务器连接到React前端的一系列指令。你将学习如何将React前端表单输入传递到Flask后端。在此集成之后，你就可以正式被称为**全栈**
    **Web开发者**。
- en: React web applications usually have a sleek look and feel and are regarded as
    the Rolls-Royce of modern frontend web application applications. React has an
    intuitive user-interface-focused library, capable of powering production-grade
    web and mobile applications with ease.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: React Web应用程序通常具有简洁的外观和感觉，被认为是现代前端Web应用程序的劳斯莱斯。React拥有一个直观的用户界面库，能够轻松地驱动生产级的Web和移动应用程序。
- en: The robust React ecosystem coupled with React’s tools and libraries facilitates
    end-to-end web development. When you combine React’s incredible component-based
    design pattern with a minimalist lightweight Flask framework, you get a rich web
    application that can withstand the test of time and scale at large.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 强大的React生态系统与React的工具和库相结合，促进了端到端的Web开发。当你将React令人难以置信的基于组件的设计模式与一个简约轻量级的Flask框架相结合时，你将得到一个能够经受时间考验并大规模扩展的丰富Web应用程序。
- en: This chapter will help you understand the dynamics of integrating React, a frontend
    library, and Flask, a backend framework, in developing valuable software products.
    You will also learn how React handles forms with the Flask backend in this chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助你理解在开发有价值的软件产品时，将React（一个前端库）和Flask（一个后端框架）集成的动态。你还将学习在本章中React如何处理与Flask后端相关的表单。
- en: Ever since the advent of the web, there has been a need for more dynamic and
    responsive forms in web applications. We will explore server-side handling of
    form elements, validation, and security concerns.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 自从Web的出现以来，在Web应用程序中就需要更多动态和响应式的表单形式。我们将探讨服务器端表单元素的处理、验证和安全问题。
- en: 'In this chapter, we’ll cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The *Bizza* application structure
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Bizza*应用程序结构'
- en: Configuring the React frontend
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置React前端
- en: Making the Flask backend ready
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备Flask后端
- en: Handling forms in React and Flask
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在React和Flask中处理表单
- en: Troubleshooting tips for the React frontend and the Flask backend
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React前端和Flask后端的故障排除技巧
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The complete code for this chapter is available on GitHub at: [https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter10](https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter10).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整代码可在GitHub上找到：[https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter10](https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter10)。
- en: The Bizza application structure
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*Bizza*应用程序结构'
- en: In this section, we will go deeper into the structure of the application we
    will build in this book. As stated previously, we will name the fictitious web
    app *Bizza*, a conference event web application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨本书中将要构建的应用程序的结构。正如之前所述，我们将把这个虚构的Web应用程序命名为*Bizza*，一个会议活动Web应用程序。
- en: This *Bizza* web app will serve as the digital hub for a conference event for
    speakers from the information technology industry, providing a myriad of features
    and functionalities that enhance the speakers’ and attendees’ overall experience.
    Let’s delve into the *Bizza* application structure.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个*Bizza* Web应用程序将作为信息技术行业演讲者的会议活动的数字中心，提供众多功能和特性，以增强演讲者和与会者的整体体验。让我们深入了解*Bizza*应用程序结构。
- en: Application overview
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序概述
- en: '*Bizza* is a fictitious data-driven event application that allows subject experts
    in the information technology industry to share their insights and experiences,
    providing valuable knowledge to enhance event attendees’ skills.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bizza*是一个虚构的数据驱动事件应用程序，允许信息技术行业的主题专家分享他们的见解和经验，为活动参与者提供有价值的知识，以提升他们的技能。'
- en: '*Bizza* lets you see a list of speakers and workshop schedules with details.
    This site lets users register and browse for a workshop. Essentially, the application
    will have the following functionalities:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bizza*让你可以看到演讲者和研讨会日程的列表，并查看详细信息。这个网站允许用户注册并浏览研讨会。本质上，该应用程序将具有以下功能：'
- en: A home page that displays event speakers and available event schedules with
    locations and subjects
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示活动演讲者和可用活动日程（包括地点和主题）的主页
- en: A registration form for event attendees
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件参加者注册表单
- en: A registration form for speakers with a subject of interest
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有感兴趣主题的演讲者注册表单
- en: A page for users to log in to the application
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户登录应用程序的页面
- en: A page containing the names and details of speakers
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含演讲者姓名和详细信息的页面
- en: Next, we will delve into the *Bizza* app and break it down into its frontend
    and backend components. By doing so, we will gain a comprehensive understanding
    of the distinct roles and functionalities that each component serves within the
    app.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将深入探讨 *Bizza* 应用程序，并将其分解为其前端和后端组件。通过这样做，我们将全面了解每个组件在应用程序中扮演的独特角色和功能。
- en: Breaking down the code structure into frontend and backend
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将代码结构分解为前端和后端
- en: In the world of software development, frontend and backend are like the yin
    and yang – opposites but complementing each other to provide a harmonious digital
    experience. *Yin and yang* is a Chinese philosophical concept that describes opposite
    but interconnected forces.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发的世界里，前端和后端就像阴阳一样——相反但相辅相成，共同提供和谐的数字体验。“阴阳”是中国哲学中的一个概念，描述了相反但相互关联的力量。
- en: In a nutshell, breaking down an application into its frontend and backend components
    provides a clear separation of concerns, promotes code reusability and portability,
    enables scalability and performance optimization, and fosters collaboration and
    parallel development. This approach ultimately contributes to the overall success
    of the web application development process.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，将应用程序分解为其前端和后端组件提供了关注点的清晰分离，促进了代码的重用性和可移植性，实现了可扩展性和性能优化，并促进了协作和并行开发。这种方法最终有助于网络应用程序开发过程的总体成功。
- en: The practice of separating frontend and backend components in software development
    started to gain prominence in the late 1990s and early 2000s, with the rise of
    web-based applications. During this time, web technologies were evolving in the
    blink of an eye, and the need for scalable and modular applications became apparent.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪90年代末和21世纪初，随着基于Web的应用程序的兴起，软件开发中开始重视将前端和后端组件分离。在此期间，Web技术瞬息万变，对可扩展和模块化应用程序的需求变得明显。
- en: The introduction of JavaScript frameworks such as jQuery in the early 2000s
    enabled more dynamic and interactive user interfaces in the frontend. This led
    to a clearer distinction between the presentation layer (frontend) and the data
    processing layer (backend) of web applications.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 早在2000年代初期，JavaScript框架如jQuery的引入使得前端用户界面更加动态和交互。这导致了网络应用程序的表现层（前端）和数据处理层（后端）之间更加清晰的区分。
- en: With the emergence of **single-page applications** (**SPAs**) and the proliferation
    of JavaScript frameworks and libraries such as AngularJS, React, and Vue.js, the
    separation between the frontend and the backend became more standardized and widely
    adopted. SPAs shifted the responsibility of rendering and managing the UI to the
    client side, while the backend APIs handled data retrieval and manipulation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 **单页应用程序**（**SPAs**）的出现以及AngularJS、React和Vue.js等JavaScript框架和库的普及，前端和后端之间的分离变得更加标准化和广泛采用。SPAs将渲染和管理UI的责任转移到了客户端，而后端API处理数据检索和操作。
- en: Now that we have discussed the key reasons for breaking down the code structure,
    let’s examine the frontend and backend components of the *Bizza* web application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了分解代码结构的关键原因，让我们来检查 *Bizza* 网络应用程序的前端和后端组件。
- en: 'The following code structure represents the high-end level code split between
    the frontend and the backend. This allows us to separate concerns and improve
    code reusability:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码结构代表了前端和后端之间的高端级别代码拆分。这使我们能够分离关注点并提高代码的可重用性：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Frontend structure
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 前端结构
- en: 'First, let’s provide an overview of the detailed `frontend` structure:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们提供一个详细的 `frontend` 结构概述：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding frontend code structure comprises majorly of `node_modules`, `package.json`,
    `public`, `src`, `.gitignore`, `.prettierrc`, `package-lock.json`, and `README.md`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 前端代码结构主要包括 `node_modules`、`package.json`、`public`、`src`、`.gitignore`、`.prettierrc`、`package-lock.json`
    和 `README.md`。
- en: 'Let’s quickly break down the major directories and files:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速分析主要的目录和文件：
- en: '`node_modules`: This directory contains all the packages (libraries and frameworks)
    that your application depends on. These packages are listed in the `dependencies`
    and `devDependencies` sections of the `package.json` file.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node_modules`: 此目录包含你的应用程序所依赖的所有包（库和框架）。这些包列在 `package.json` 文件的 `dependencies`
    和 `devDependencies` 部分中。'
- en: '`package.json`: This file contains metadata about your application, including
    its name, version, and dependencies. It also includes scripts you can use to build,
    test, and run your application.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`: 此文件包含有关你的应用程序的元数据，包括其名称、版本和依赖项。它还包括你可以用来构建、测试和运行应用程序的脚本。'
- en: '`public`: This directory contains static assets that your application will
    use, such as the favicon and the main HTML file (`index.html`).'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public`: 此目录包含你的应用程序将使用的静态资源，例如favicon和主HTML文件（`index.html`）。'
- en: '`src`: This directory contains the source code for your application. It is
    organized into subdirectories for components, pages, hooks, and assets. The `src`
    directories are critical to the design pattern adopted for the React frontend.
    The `components` folders contain all the components we intend to use in the *Bizza*
    app, `pages` contains the presentational component of the app, `hook` contains
    custom hooks, and finally, the `assets` folder contains all the assets, such as
    `images`, `logos`, and `svg`, that are used in the application.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`: 此目录包含你的应用程序的源代码。它组织成组件、页面、钩子和资产的子目录。`src` 目录对于采用的 React 前端设计模式至关重要。`components`
    文件夹包含我们打算在 *Bizza* 应用程序中使用的所有组件，`pages` 包含应用程序的展示组件，`hooks` 包含自定义钩子，最后，`assets`
    文件夹包含应用程序中使用的所有资产，例如 `images`、`logos` 和 `svg`。'
- en: '`.gitignore`: This file tells Git which files and directories to ignore when
    you commit your code to a repository.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.gitignore`: 此文件告诉 Git 在你将代码提交到仓库时应忽略哪些文件和目录。'
- en: '`.prettierrc`: This file specifies the configuration options for the Prettier
    code formatter. Prettier is a popular code formatting tool that enforces a consistent
    style across your code base. It is typically placed in the `root` directory of
    a JavaScript project and contains JSON syntax to define the formatting rules.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.prettierrc`: 此文件指定了 Prettier 代码格式化工具的配置选项。Prettier 是一款流行的代码格式化工具，它确保你的代码库风格一致。它通常放置在
    JavaScript 项目的 `root` 目录中，并包含用于定义格式化规则的 JSON 语法。'
- en: '`package-lock.json`: This file records the exact versions of all the packages
    that your application depends on, as well as any packages those packages depend
    on. It ensures that your application uses the same versions of its dependencies
    every time it is installed.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package-lock.json`: 此文件记录了应用程序所依赖的所有包的确切版本，以及这些包所依赖的任何包。它确保每次安装应用程序时，它都使用其依赖项的相同版本。'
- en: '`README.md`: This file contains documentation for your application, such as
    instructions to install and run it.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`: 此文件包含你的应用程序的文档，例如安装和运行它的说明。'
- en: Backend structure
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 后端结构
- en: 'Next, we will examine how the backend will be structured:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将检查后端的结构：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding represents the files and directories structure for the Flask backend
    application.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容代表了 Flask 后端应用程序的文件和目录结构。
- en: 'Let’s break down the directories and files:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解目录和文件：
- en: '`app.py`: This file contains the main code for your backend application, including
    routes and logic to handle HTTP requests.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.py`: 此文件包含你的后端应用程序的主要代码，包括处理HTTP请求的路由和逻辑。'
- en: '`models`: This directory contains modules of each of the model definitions
    for database models.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models`: 此目录包含数据库模型定义的每个模型的模块。'
- en: '`config`: This directory contains a configuration options file for the application,
    such as database connection strings or secret keys.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`: 此目录包含应用程序的配置选项文件，例如数据库连接字符串或密钥。'
- en: '`.flaskenv`: This file contains environment variables that are specific to
    the Flask application.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.flaskenv`: 此文件包含特定于 Flask 应用的环境变量。'
- en: '`requirements.txt`: This file lists the packages that the application depends
    on, including any third-party libraries. You can use this file to install the
    necessary dependencies by running `pip install -``r requirements.txt`.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requirements.txt`: 此文件列出了应用程序所依赖的包，包括任何第三方库。你可以通过运行 `pip install -r requirements.txt`
    来使用此文件安装必要的依赖项。'
- en: Next, we will see how to configure the React frontend and prepare it to consume
    the backend API services.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将了解如何配置 React 前端并准备它以消费后端 API 服务。
- en: Configuring the React frontend for API consumption
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 API 消费配置 React 前端
- en: In this section, you will configure the frontend React app to communicate with
    the backend Flask server by setting up a proxy in React to consume the API from
    the Flask server.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将配置前端React应用通过在React中设置代理与后端Flask服务器进行通信，以从Flask服务器消费API。
- en: In order to configure the React proxy for API consumption, you will need to
    update the `proxy` field in the `package.json` file of the frontend React app.
    The `proxy` field allows you to specify a URL that will be used as the base for
    all API requests made from the React app.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置React代理以用于API消费，您需要更新前端React应用的`package.json`文件中的`proxy`字段。`proxy`字段允许您指定一个URL，该URL将用作从React应用发出的所有API请求的基础。
- en: 'Let’s update the `package.json` file:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新`package.json`文件：
- en: 'Open the `package.json` file in the `project` directory using a text editor,
    and then add a `proxy` field to the `package.json` file and set it to the URL
    of your Flask server:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器在`project`目录中打开`package.json`文件，然后向`package.json`文件中添加一个`proxy`字段，并将其设置为Flask服务器的URL：
- en: '[PRE3]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, you will need to make HTTP requests to the Flask server from the React
    frontend. We will use the `Fetch()` method is an alternative to Axios.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要从React前端向Flask服务器发送HTTP请求。我们将使用`Fetch()`方法作为Axios的替代方案。
- en: Axios is a JavaScript library that allows you to make HTTP requests from the
    browser. It is a promise-based library that uses modern techniques to make it
    easy to work with asynchronous requests. With Axios, you can make HTTP requests
    to retrieve data from a server, submit form data, or send data to a server.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Axios是一个允许您从浏览器中发送HTTP请求的JavaScript库。它是一个基于promise的库，使用现代技术使异步请求变得容易处理。使用Axios，您可以发送HTTP请求从服务器检索数据，提交表单数据，或将数据发送到服务器。
- en: Axios supports a number of different request methods, such as `GET`, `POST`,
    `PUT`, `DELETE`, and `PATCH`, and it can handle both JSON and XML data formats.
    Axios is popular among developers because it has a simple and straightforward
    API, making it easy to use for both beginners and experienced developers.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Axios支持多种不同的请求方法，如`GET`、`POST`、`PUT`、`DELETE`和`PATCH`，并且它可以处理JSON和XML数据格式。Axios在开发者中很受欢迎，因为它有一个简单直接的API，使得初学者和经验丰富的开发者都很容易使用。
- en: Axios also has a number of features that make it flexible and powerful, such
    as the automatic transformation of data, support for interceptors (which allow
    you to modify requests or responses before they are sent or received), and the
    ability to cancel requests.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Axios还具有许多使它灵活强大的功能，例如自动转换数据、支持拦截器（允许您在发送或接收之前修改请求或响应），以及取消请求的能力。
- en: 'You can install Axios by running the following command in your terminal:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过在终端中运行以下命令来安装Axios：
- en: '[PRE4]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once Axios is installed, you can use it to make HTTP requests to the Flask server
    from the React frontend.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦安装了Axios，您就可以使用它从React前端向Flask服务器发送HTTP请求。
- en: Make sure that both the frontend React app and the backend Flask server run
    on separate ports. By default, the React development server runs on port `3000`,
    while the Flask development server runs on port `5000`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保前端React应用和后端Flask服务器在不同的端口上运行。默认情况下，React开发服务器在端口`3000`上运行，而Flask开发服务器在端口`5000`上运行。
- en: Next, you will need to define routes and functions in the Flask backend to handle
    HTTP requests coming from the React frontend.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要在Flask后端定义路由和函数来处理来自React前端发出的HTTP请求。
- en: Making Flask backend-ready
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使Flask后端准备就绪
- en: 'In the *Setting up the development environment with Flask* section of [*Chapter
    1*](B18554_01.xhtml#_idTextAnchor014), *Getting Full Stack Ready with React and
    Flask*, we set up the development environment for the Flask server. Ensure your
    virtual environment is activated. You can do so by running the following commands:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第一章*](B18554_01.xhtml#_idTextAnchor014)的*使用React和Flask准备全栈开发环境*部分，我们为Flask服务器设置了开发环境。请确保您的虚拟环境已激活。您可以通过运行以下命令来实现：
- en: '**For Mac/Linux**:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于Mac/Linux**：'
- en: '[PRE5]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**For Windows**:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于Windows**：'
- en: '[PRE6]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Your virtual environment should now be activated, and your terminal prompt should
    be prefixed with the name of the virtual environment (for example, `(``venv) $`).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您的虚拟环境现在应该已激活，并且您的终端提示符应该以虚拟环境名称为前缀（例如，`(``venv) $`）。
- en: Next, let’s dive straight into defining an event registration route, with its
    function as part of the requirements for Bizza application model.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们直接进入定义事件注册路由，该路由作为Bizza应用程序模型要求的一部分。
- en: Let’s add a model to handle registrations for event attendees. You will later
    use it to accept requests from the React frontend in the next section, where we
    will handle form inputs in React and Flask.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个模型来处理活动参加者的注册。你将在下一节中使用它来接受来自React前端的要求，在那里我们将处理React和Flask中的表单输入。
- en: 'The `app.py` file in the root directory of your application is still the main
    entry point for the Flask application. Update `app.py` with the following code
    snippet to define the model and endpoint to handle the event registration:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序根目录中的`app.py`文件仍然是Flask应用程序的主要入口点。更新`app.py`以以下代码片段定义模型和端点以处理活动注册：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding snippet, the `EventRegistration` class represents a model for
    event registration in a database.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`EventRegistration`类代表数据库中活动注册的模型。
- en: The `__tablename__` attribute specifies the name of the table in the database
    that this model is stored in. The `db.Model` class is a base class for all models
    in `Flask-SQLAlchemy`, and the `db.Column` objects define the fields of the model,
    each with a type and some additional options.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`__tablename__`属性指定了数据库中存储此模型的表的名称。`db.Model`类是`Flask-SQLAlchemy`中所有模型的基类，`db.Column`对象定义了模型字段，每个字段都有一个类型和一些附加选项。'
- en: The `format` method returns a dictionary representation of the model instance,
    with keys corresponding to the field names and values corresponding to the field
    values.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`format`方法返回模型实例的字典表示形式，键对应字段名称，值对应字段值。'
- en: 'Now, let’s define the route or endpoint, `/api/v1/events-registration`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们定义路由或端点，`/api/v1/events-registration`：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `/api/v1/events-registration` endpoint function handles an HTTP `POST` request
    to the `/api/v1/events-registration` route. This endpoint allows users to register
    for events by providing their name, email address, phone number, and subject.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`/api/v1/events-registration`端点函数处理对`/api/v1/events-registration`路由的HTTP `POST`请求。此端点允许用户通过提供他们的姓名、电子邮件地址、电话号码和主题来注册活动。'
- en: The endpoint function first checks that the request method is indeed `POST`,
    and then extracts the name, email, phone, and subject values from the request
    body, which is expected to be in JSON format.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 端点函数首先检查请求方法是否确实是`POST`，然后从请求体中提取名称、电子邮件、电话和主题值，预期请求体为JSON格式。
- en: Next, the function checks that all of the required input values (`first_name`,
    `last_name,` `email`, `phone`, and `subject`) are present. If they are, it checks
    whether there is already an attendee with the same email address in the database.
    If there is, it returns a JSON response, with a message indicating that the email
    address is already in use, and an HTTP `409` status code (conflict).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，该函数检查所有必需的输入值（`first_name`、`last_name`、`email`、`phone`和`subject`）是否都已存在。如果存在，它将检查数据库中是否已存在具有相同电子邮件地址的参与者。如果存在，它将返回一个JSON响应，其中包含一条消息指出电子邮件地址已被使用，以及HTTP
    `409`状态码（冲突）。
- en: If the email address is not in use, the function creates a new `EventRegistration`
    object with the input values, adds it to the database session, and commits the
    changes to the database. It then returns a JSON response with a success message
    and the details of the new attendee, along with an HTTP `201` status code (created).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果电子邮件地址未被使用，该函数将使用输入值创建一个新的`EventRegistration`对象，将其添加到数据库会话中，并将更改提交到数据库。然后，它将返回一个包含成功消息和新的参与者详情的JSON响应，以及HTTP
    `201`状态码（已创建）。
- en: If any of the required input values is missing, the function returns a JSON
    response with an error message and an HTTP `400` status code (bad request). Now,
    let’s update the database and add an `eventregistration` table to it. The `eventregistration`
    table will accept all the entries for the event registrations.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何必需的输入值缺失，该函数将返回一个包含错误消息和HTTP `400`状态码（错误请求）的JSON响应。现在，让我们更新数据库并添加一个`eventregistration`表格。`eventregistration`表格将接受所有活动注册的条目。
- en: 'The following steps create the `eventregistration` table in the database. In
    the terminal of the `project` directory, enter the following commands:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤在数据库中创建`eventregistration`表格。在`project`目录的终端中，输入以下命令：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Alternatively, you can continue to use migration tools:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以继续使用迁移工具：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With any of these options, the backend will contain the new table.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些选项中的任何一个，后端都将包含新的表格。
- en: Execute `flask run` in the terminal to start the Flask development server on
    `localhost` using the default port (`5000`).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中执行`flask run`以在`localhost`上使用默认端口（`5000`）启动Flask开发服务器。
- en: That’s it! The backend is now ready to receive form entries from the React frontend.
    Let’s design the form component in React and submit the form entries to the Flask
    backend.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！后端现在已准备好接收来自 React 前端的表单条目。让我们在 React 中设计表单组件并将表单条目提交到 Flask 后端。
- en: Handling forms in React and Flask
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理 React 和 Flask 中的表单
- en: Handling forms in a React frontend and a Flask backend is a common pattern in
    web development. In this pattern, the React frontend sends HTTP requests to the
    Flask backend to submit or retrieve form data.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Web 开发中，处理 React 前端和 Flask 后端的表单是一种常见模式。在这个模式中，React 前端向 Flask 后端发送 HTTP 请求以提交或检索表单数据。
- en: On the React frontend side, you can use a form component to render a form and
    handle form submissions. You can use controlled components, such as `input`, `textarea`,
    and `select`, to control the form values and update the component state as a user
    inputs data.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 前端方面，你可以使用表单组件来渲染表单并处理表单提交。你可以使用受控组件，如 `input`、`textarea` 和 `select`，来控制表单值并在用户输入数据时更新组件状态。
- en: When the user submits the form, you can use an event handler to prevent the
    default form submission behavior and send an HTTP request to the Flask backend
    using a library such as Axios. In this section, we will work with the Axios library.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提交表单时，你可以使用事件处理器来阻止默认的表单提交行为，并使用类似 Axios 的库向 Flask 后端发送 HTTP 请求。在本节中，我们将使用
    Axios 库。
- en: On the Flask backend side, you can define a route to handle the HTTP request
    and retrieve the form data from the request object. You can then process the form
    data and return a response to the frontend.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Flask 后端方面，你可以定义一个路由来处理 HTTP 请求并从请求对象中检索表单数据。然后你可以处理表单数据并向前端返回响应。
- en: The `EventRegistration` component provides a simple form for non-authenticated
    users to register for an event in the frontend of the *Bizza* app. The form includes
    fields for the user’s name, email address, phone number, and subject – the topic
    or title of the event they register for.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`EventRegistration` 组件为未认证用户提供了一个简单的表单，用于在 *Bizza* 应用程序的前端注册活动。该表单包括用户姓名、电子邮件地址、电话号码和主题字段——即他们注册的活动主题或标题。'
- en: 'Let’s dive into the React form implementation that will work with the Flask
    backend:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解与 Flask 后端协同工作的 React 表单实现：
- en: In the project directory and inside the `components` folder, create `EventRegistration/EventRegistration.jsx`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录中，在 `components` 文件夹内创建 `EventRegistration/EventRegistration.jsx`。
- en: 'Add the following code snippet to the `EventRegistration.jsx` file:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码片段添加到 `EventRegistration.jsx` 文件中：
- en: '[PRE11]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `EventRegistration` component also includes a `validate` function that checks
    the form values for errors, and an `onChangeHandler` function that updates the
    form values as the user types.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`EventRegistration` 组件还包括一个 `validate` 函数，用于检查表单值中的错误，以及一个 `onChangeHandler`
    函数，用于在用户输入表单字段时更新表单值。'
- en: 'Let’s discuss the component state variables used in the preceding code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论前面代码中使用的组件状态变量：
- en: '`formValues`: This is an object that stores the current values of the form
    fields (name, email, phone, and subject)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`表单值`: 这是一个对象，用于存储表单字段的当前值（姓名、电子邮件、电话和主题）'
- en: '`formErrors`: This is an object that stores any errors found in the form values'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`表单错误`: 这是一个对象，用于存储在表单值中发现的任何错误'
- en: '`response`: This is an object that stores the response from the server after
    the form is submitted'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`response`: 这是一个对象，用于存储表单提交后从服务器返回的响应'
- en: '`feedback`: This is a string that stores a feedback message to display to the
    user (for example, **Registration successful!**)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`反馈`: 这是一个字符串，用于存储要显示给用户的反馈消息（例如，**注册成功！**）'
- en: '`status`: This is a string that stores the status of the form submission (for
    example, **success** or **error**)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`状态`: 这是一个字符串，用于存储表单提交的状态（例如，**成功**或**错误**）'
- en: 'We then define the following functions:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们然后定义以下函数：
- en: '`validate`: This is a function that accepts the form values and returns an
    object with any errors found in the values.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate`: 这是一个函数，接受表单值并返回一个包含在值中发现的任何错误的对象。'
- en: '`onChangeHandler`: This is a function that updates the `formValues` state variable
    as the `user` types in the form fields.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onChangeHandler`: 这是一个函数，用于在用户在表单字段中输入时更新 `表单值` 状态变量。'
- en: '`handleSubmit`: This is a function that is called when the form is submitted.
    It prevents the default form submission behavior, calls the `validate` function
    to check for errors, and then sends the form data to the server using the `sendEventData`
    function. It also updates the feedback and status state variables based on the
    response from the server.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handleSubmit`：这是一个在表单提交时被调用的函数。它阻止默认的表单提交行为，调用 `validate` 函数来检查错误，然后使用 `sendEventData`
    函数将表单数据发送到服务器。它还会根据服务器的响应更新反馈和状态状态变量。'
- en: '`sendEventData`: This is an `async` function that sends an HTTP `POST` request
    to the `/api/v1/events-registration` route with the form data and updates the
    response state variable with the response from the server.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sendEventData`：这是一个 `async` 函数，它向 `/api/v1/events-registration` 路由发送带有表单数据的
    HTTP `POST` 请求，并使用服务器的响应更新响应状态变量。'
- en: The `EventRegistration` component also has a `useEffect` hook that calls the
    `sendEventData` function when the `formValues` state variable changes. Finally,
    the `EventRegistration` component renders a form element with the form fields
    and displays the feedback message and status to the user.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`EventRegistration` 组件同样包含一个 `useEffect` 钩子，当 `formValues` 状态变量发生变化时，会调用 `sendEventData`
    函数。最后，`EventRegistration` 组件渲染一个包含表单字段的表单元素，并向用户显示反馈信息和状态。'
- en: Now, start the React frontend with `npm start` and submit your form entries.
    Make sure the Flask server is running as well. With any development process, issues
    and bugs are bound to arise. We will explore some valuable troubleshooting tips
    to help you debug and fix issues during the integration of the React frontend
    and the Flask backend.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用 `npm start` 启动 React 前端并提交您的表单条目。确保 Flask 服务器也在运行。在任何一个开发过程中，问题和错误都是不可避免的。我们将探讨一些有价值的故障排除技巧，帮助您在
    React 前端和 Flask 后端集成过程中调试和修复问题。
- en: Troubleshooting tips for the React frontend and the Flask backend
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React 前端和 Flask 后端的故障排除技巧
- en: Integrating a React frontend with a Flask backend can be a powerful combination
    to build dynamic and scalable web applications. However, like any integration,
    it can come with its own set of unavoidable challenges. Troubleshooting issues
    that arise during the React-Flask integration process requires a systematic approach
    to identify and resolve problems effectively.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 将 React 前端与 Flask 后端集成可以是一个强大的组合，用于构建动态和可扩展的 Web 应用程序。然而，像任何集成一样，它可能带来自己的一套不可避免的问题。在
    React-Flask 集成过程中出现问题时，需要系统的方法来识别和有效地解决问题。
- en: This section will discuss how you can resolve some of the issues that you may
    encounter while integrating the frontend with the backend. By following these
    tips, you will be able to diagnose and resolve common problems that may arise
    during the development and deployment of your application.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将讨论您在将前端与后端集成时可能遇到的某些问题的解决方法。通过遵循这些技巧，您将能够诊断并解决在应用程序的开发和部署过程中可能出现的常见问题。
- en: 'Let’s dive into the troubleshooting tips for the React frontend and the Flask
    backend integration:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解 React 前端和 Flask 后端集成的故障排除技巧：
- en: '**Verifying the** **Flask setup**:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证** **Flask 设置**：'
- en: Ensure that Flask is properly configured and running on the server
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保 Flask 已正确配置并在服务器上运行。
- en: Check the Flask server console for any error messages or exceptions that may
    indicate misconfigurations
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查 Flask 服务器控制台中的任何错误消息或异常，这些可能表明配置错误。
- en: Confirm that the necessary Flask packages and dependencies are installed
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认已安装必要的 Flask 包和依赖。
- en: Verify that the Flask server is accessible and responding to requests by testing
    basic endpoints
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过测试基本端点来验证 Flask 服务器是否可访问并响应请求。
- en: '**Checking the** **React configuration**:'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查** **React 配置**：'
- en: Ensure that the React application is correctly configured and running
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保 React 应用程序已正确配置并运行。
- en: Confirm that the necessary dependencies and packages are installed in the React
    project
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认 React 项目中已安装必要的依赖和包。
- en: Inspect the console logs in the browser’s developer tools for any JavaScript
    errors or warnings that may indicate issues with the frontend setup
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器开发者工具的控制台中检查任何可能表明前端设置问题的 JavaScript 错误或警告。
- en: Ensure that the proxy attribute is added to `package.json` and points to the
    Flask server address – for example, `http://127.0.0.1:5000`
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保在 `package.json` 中添加了代理属性，并指向 Flask 服务器地址 - 例如，`http://127.0.0.1:5000`。
- en: '**Investigate** **network requests**:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调查** **网络请求**：'
- en: Use the browser's developer tools to inspect network requests made by the React
    application
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用浏览器的开发者工具来检查React应用程序发出的网络请求
- en: Verify that the requests are sent to the correct Flask endpoints
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认请求是否发送到正确的Flask端点
- en: Check the network response status codes to identify any server-side errors
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查网络响应状态码以识别任何服务器端错误
- en: Inspect the response payloads to ensure that data is transmitted correctly
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查响应负载以确保数据正确传输
- en: Pay attention to **Cross-Origin Resource Sharing** (**CORS**) issues if the
    React frontend and the Flask backend are hosted on different domains or ports
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果React前端和Flask后端托管在不同的域名或端口上，请注意**跨源资源共享**（**CORS**）问题
- en: By following these troubleshooting tips, you will be equipped with the necessary
    knowledge to efficiently diagnose and resolve issues in the React-Flask integration.
    This will ensure a smooth and robust integration for your web application.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些故障排除技巧，您将具备诊断和解决React-Flask集成问题的必要知识。这将确保您的Web应用程序集成平稳且健壮。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed extensively the application code structure and
    a few key steps required to integrate a React frontend with a Flask backend. First,
    you will need to set up the frontend to communicate with the backend, using an
    HTTP client library, and handle forms and user input.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们广泛讨论了应用程序代码结构以及集成React前端与Flask后端所需的一些关键步骤。首先，您需要设置前端以与后端通信，使用HTTP客户端库，并处理表单和用户输入。
- en: Then, you will need to set up the Flask backend with the necessary routes and
    functions to handle the requests from the frontend and process the form data.
    Finally, you will need to test the entire application to ensure that it works
    correctly and as expected.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要设置Flask后端，包括必要的路由和函数来处理前端发出的请求并处理表单数据。最后，您需要测试整个应用程序以确保其正确且按预期工作。
- en: With these steps, you can successfully integrate a React frontend with a Flask
    backend for your web application. In the next chapter, we will scale up the React-Flask
    interactions by creating more tables. These tables will have relationships, and
    we will be able to fetch and display data.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些步骤，您可以成功地将React前端与Flask后端集成到您的Web应用程序中。在下一章中，我们将通过创建更多表格来扩展React-Flask交互。这些表格将具有关系，我们将能够获取并显示数据。
