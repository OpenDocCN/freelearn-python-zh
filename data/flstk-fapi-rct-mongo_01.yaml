- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Web Development and the FARM Stack
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web开发与FARM栈
- en: Websites are built using a set of technology that is often called a **stack**.
    Every component of the stack is responsible for one layer of the application.
    While in theory, you could combine any type of frontend technology with any type
    of backend technology and, thus, end up with a custom stack, some have proven
    their worth in terms of agility and reduced development time. If you are a web
    developer or an analyst who must put some data online from time to time, or you
    just want to broaden your developer horizons, this chapter should give you some
    perspective on this set of tools, and how they compare to alternative technologies.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 网站是使用一组被称为**栈**的技术构建的。栈的每个组件都负责应用的一层。虽然在理论上，你可以将任何类型的 frontend 技术与任何类型的 backend
    技术结合，从而最终得到一个自定义栈，但一些栈在敏捷性和减少开发时间方面已经证明了自己的价值。如果你是一位需要不时将一些数据上线到网上的Web开发者或分析师，或者你只是想拓宽你的开发者视野，那么这一章应该会给你一些关于这组工具的视角，以及它们与替代技术的比较。
- en: This chapter provides an overview of today’s web development landscape in terms
    of the available technologies and demands, and at the end of this chapter, we
    will make a case for using the **FARM** stack—a combination of **FastAPI** for
    the REST API layer, **React** for the frontend, and **MongoDB** as the database.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章从可用技术和需求的角度概述了当今的Web开发格局，并在本章末尾，我们将论证使用**FARM**栈的必要性——这是一个结合了**FastAPI**用于REST
    API层、**React**用于前端和**MongoDB**作为数据库的栈。
- en: This book focuses on the high-level concepts of the technologies that constitute
    the FARM stack. By learning these concepts, you will be able to develop your next
    web development project at a fast pace and with modern capabilities. For now,
    we will not go into details or concrete examples, but rather compare the selected
    stack components (MongoDB, FastAPI, and React) with their possible counterparts.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书专注于构成FARM栈的技术的高层次概念。通过学习这些概念，你将能够以快速的速度和现代的能力开发你的下一个Web开发项目。目前，我们不会深入细节或具体示例，而是将选定的栈组件（MongoDB、FastAPI和React）与它们的可能对应物进行比较。
- en: By the end of this chapter, you will have a good understanding of the benefits
    that individual FARM stack components bring to a development project, how they
    relate to each other, and why this particular set of technologies is a great fit
    for web apps that have fluid specifications—both in terms of the data handled
    and desired functionalities.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将很好地理解FARM栈各个组件为开发项目带来的好处，它们之间的关系，以及为什么这一套技术非常适合具有灵活规格的Web应用——无论是从处理的数据还是期望的功能性来看。
- en: 'This chapter will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What is the FARM stack and how do the components fit together?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FARM栈是什么以及组件是如何相互配合的？
- en: Why use MongoDB for data storage?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么使用MongoDB进行数据存储？
- en: What is FastAPI?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是FastAPI？
- en: The frontend—React
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端——React
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this book, you’ll need a few things to aid you in your journey. The following
    are recommendations:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，你需要一些东西来帮助你完成你的旅程。以下是一些建议：
- en: The latest version of Python
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python的最新版本
- en: FastAPI ([https://pypi.org/project/fastapi/](https://pypi.org/project/fastapi/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FastAPI ([https://pypi.org/project/fastapi/](https://pypi.org/project/fastapi/))
- en: A local development environment on your laptop/desktop for your application
    server
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的笔记本电脑/台式机上为你的应用服务器创建一个本地开发环境
- en: A MongoDB Atlas cloud account to host your database ([https://www.mongodb.com/cloud/atlas/register](https://www.mongodb.com/cloud/atlas/register))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个MongoDB Atlas云账户来托管你的数据库([https://www.mongodb.com/cloud/atlas/register](https://www.mongodb.com/cloud/atlas/register))
- en: Visual Studio Code or the IDE of your choice
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code或你选择的IDE
- en: Let’s begin with a very basic understanding of what the FARM stack is.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从对FARM栈的基本理解开始。
- en: What is the FARM stack?
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FARM栈是什么？
- en: Stacks are sets of technologies that cover different parts of a modern web app,
    blended and well integrated. The right stack will enable you to satisfy certain
    criteria while building a web application, with considerably less effort and in
    less time than building it from scratch.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 栈是一组覆盖现代Web应用不同部分的技术，混合并良好集成。正确的栈将使你在构建Web应用时能够满足某些标准，而所需的工作量和时间将比从头开始构建要少得多。
- en: 'First, let’s see what you need to build a functional web application:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看你需要构建一个功能性的Web应用需要什么：
- en: '**An operating system**: Usually, this is Unix/Linux-based.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统**：通常，这是基于Unix/Linux的。'
- en: '**A storage layer**: A SQL or NoSQL database. In this book, we’ll use MongoDB.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储层**：一个SQL或NoSQL数据库。在这本书中，我们将使用MongoDB。'
- en: '**A web server**: Apache and NGINX are quite popular, but we will talk about
    Python solutions for FastAPI, such as Uvicorn or Hypercorn.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web服务器**：Apache和NGINX相当受欢迎，但我们将讨论FastAPI的Python解决方案，如Uvicorn或Hypercorn。'
- en: '**A development environment**: Node.js/JavaScript, .NET, Java, or Python.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发环境**：Node.js/JavaScript、.NET、Java或Python。'
- en: Optionally, and often, you could also add a frontend library or framework (such
    as Vue.js, Angular, React, or Svelte) since the vast majority of web development
    companies benefit from adopting one in terms of consistency, development speed,
    and compliance with standards. In addition, user expectations have shifted over
    time. There are unsaid standards for what logins, buttons, menus, and other website
    elements should look like, and how they function. Using a framework will make
    your application more consistent with the modern web and go a long way toward
    user satisfaction.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的，并且通常是，你还可以添加一个前端库或框架（例如Vue.js、Angular、React或Svelte），因为绝大多数的Web开发公司从采用一个框架中受益匪浅，无论是在一致性、开发速度还是符合标准方面。此外，用户期望随着时间的推移而改变。对于登录、按钮、菜单和其他网站元素应该是什么样子，以及它们应该如何工作，存在一些未言明的标准。使用框架将使你的应用程序与现代Web更加一致，并且对用户满意度大有裨益。
- en: 'The most famous stacks are as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最著名的堆栈如下：
- en: '**MERN**: **MongoDB + Express.js + React + Node.js** (**MERN)** is probably
    one of the most popular stacks today. Developers can be comfortable and never
    leave JavaScript, except when they need to write some style sheets. With the addition
    of React Native for mobile apps and something such as Electron.js for desktop
    apps, a product can encompass virtually every platform while relying solely on
    JavaScript.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MERN**：**MongoDB + Express.js + React + Node.js**（**MERN**）可能是当今最受欢迎的堆栈之一。开发者可以舒适地使用JavaScript，除非他们需要编写一些样式表。随着React
    Native用于移动应用和Electron.js用于桌面应用，一个产品几乎可以涵盖每一个平台，同时仅依赖于JavaScript。'
- en: '**MEAN**: **MongoDB + Express.js + Angular.js + Node.js** (**MEAN**) is similar
    to the previously mentioned MERN, with Angular.js managing the frontend in a more
    structured **Model–View–Controller** (**MVC**) way.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MEAN**：**MongoDB + Express.js + Angular.js + Node.js**（**MEAN**）与之前提到的MERN类似，Angular.js以前端以更结构化的**模型-视图-控制器**（**MVC**）方式管理。'
- en: '**LAMP**: **Linux + Apache + MySQL + PHP** (**LAMP**) is probably the first
    stack acronym to gain popularity and one of the most widely used in the past 20
    years. It is still quite popular today.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LAMP**：**Linux + Apache + MySQL + PHP**（**LAMP**）可能是第一个流行起来的堆栈缩写，也是过去20年中使用最广泛的之一。它至今仍然非常受欢迎。'
- en: The first two stacks run on the Node.js platform (a server-run JavaScript V8
    engine) and have a web framework in common. Although Express.js is the most popular,
    there are excellent alternatives in the Node.js universe, such as Koa.js, Fastify.js,
    or some more structured ones such as Nest.js.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个堆栈运行在Node.js平台上（一个服务器端运行的JavaScript V8引擎），并且有一个共同的Web框架。尽管Express.js是最受欢迎的，但在Node.js宇宙中还有许多优秀的替代品，例如Koa.js、Fastify.js，或者一些更结构化的，如Nest.js。
- en: Since this is a Python book, we will also go through some important Python frameworks.
    The top three most popular frameworks for Python developers are **Django**, **Flask**,
    and **FastAPI**. Using the Django web framework and the excellent **Django REST
    Framework** (**DRF**) for building REST APIs in a modern and logical way is very
    popular. Django itself is very mature and well known among Python developers.
    It also has an admin site, the possibility of customizing and serializing REST
    responses, the option to choose between functional and class-based views, and
    more.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一本Python书，我们还将介绍一些重要的Python框架。对于Python开发者来说，最受欢迎的前三个框架是**Django**、**Flask**和**FastAPI**。使用Django
    Web框架和优秀的**Django REST Framework**（**DRF**）以现代和逻辑的方式构建REST API非常流行。Django本身在Python开发者中非常成熟且广为人知。它还包含一个管理站点，可以自定义和序列化REST响应，可以选择功能性和基于类的视图，等等。
- en: FastAPI, on the other hand, is a relative newcomer. First released in December
    2018, this alternative, lightweight framework was fast to gain advocates. Almost
    immediately, these advocates had created a new acronym for FastAPI within the
    tech stack—**FARM**.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，FastAPI是一个相对较新的框架。首次发布于2018年12月，这个替代的轻量级框架迅速获得了支持者。几乎立即，这些支持者就在技术堆栈中为FastAPI创造了一个新的缩写——**FARM**。
- en: 'Let’s understand what FARM stands for:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解FARM代表什么：
- en: '**FA** stands for FastAPI—in technology years, a brand-new Python web framework'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FA**代表FastAPI——在技术年数中，一个全新的Python Web框架'
- en: '**R** stands for React, the most popular UI library'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**R** 代表 React，这是最受欢迎的 UI 库'
- en: '**M** denotes the data layer—MongoDB, which is the most popular NoSQL database
    available today'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**M** 代表数据层——MongoDB，这是目前最流行的 NoSQL 数据库'
- en: '*Figure 1**.1* provides a high-level overview of the integrations between the
    constituent parts involved in the FARM stack:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1.1* 提供了 FARM 栈中各个组成部分之间集成的高级概述：'
- en: '![Figure 1.1 – A Diagram of the FARM stack with its components ](img/B22406_01_01.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – FARM 栈及其组件的示意图](img/B22406_01_01.png)'
- en: 'Figure 1.1: FARM stack with its components'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：FARM 栈及其组件
- en: 'As you can see in the preceding diagram, the FARM stack is composed of three
    layers:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，FARM 栈由三层组成：
- en: The user performs an action using the client, which, in our case, will be based
    on React—this ultimately creates a bundle of HTML, Cascading Style Sheets (CSS),
    and JavaScript.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户通过客户端执行操作，在我们的案例中，这将是基于 React 的——这最终创建了一个包含 HTML、层叠样式表（CSS）和 JavaScript 的包。
- en: This user action (a mouse click, a form submit, or some other event) then triggers
    an HTTP request (such as `GET`, `POST`, `PUT`, or another HTTP verb with a payload).
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此用户操作（如鼠标点击、表单提交或其他事件）随后触发一个 HTTP 请求（如 `GET`、`POST`、`PUT` 或带有有效负载的其他 HTTP 动词）。
- en: Finally, this request gets processed by the REST API service (FastAPI).
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，此请求由 REST API 服务（FastAPI）处理。
- en: The Python part is centered around FastAPI and optional dependencies and is
    served by `findOne`, `find`, `create`, `update`, and more) and using the MongoDB
    aggregation framework. The results obtained from the database are interpreted
    by FastAPI through the Python driver of choice (Motor), converted from BSON into
    appropriate Python data structures, and finally, output from the REST API server
    in the form of plain JSON. If you use **Motor**, which is an asynchronous Python
    driver for MongoDB, these calls will be handled asynchronously.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Python 部分以 FastAPI 和可选依赖为中心，并由 `findOne`、`find`、`create`、`update` 等操作以及 MongoDB
    聚合框架提供服务。从数据库中获得的结果通过 FastAPI 的 Python 驱动（Motor）进行解释，从 BSON 转换为适当的 Python 数据结构，并最终以纯
    JSON 的形式从 REST API 服务器输出。如果你使用 **Motor**，这是一个 MongoDB 的异步 Python 驱动程序，这些调用将以异步方式处理。
- en: Finally, returning to the diagram in *Figure 1**.1* and the arrow labeled **JSON**,
    the data is fed to the UI where it is handled by React and used to update the
    interface, render the necessary components, and synchronize the UI with React’s
    virtual DOM tree.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，回到 *图 1.1* 中的图和标有 **JSON** 的箭头，数据被输入到 UI 中，由 React 处理，并用于更新界面、渲染必要的组件以及将
    UI 与 React 的虚拟 DOM 树同步。
- en: The next few sections will talk about the motivations behind the birth of the
    FARM stack. Why these technologies and, more importantly, why these technologies
    together? You will get a detailed introduction to each component and the features
    that make it a good fit in more detail. After a brief introduction to the benefits
    of the stack as a whole, the sections will provide a high-level overview of each
    choice and underline the benefits that it can provide to a modern web development
    workflow.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几节将讨论 FARM 栈诞生的动机。为什么选择这些技术，更重要的是，为什么选择这些技术组合？你将详细了解每个组件及其使其成为现代 Web 开发工作流程良好匹配的功能。在简要介绍整个栈的好处之后，这些章节将提供每个选择的概述，并强调它可以为现代
    Web 开发工作流程提供的优势。
- en: Why the FARM stack?
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 FARM 栈？
- en: The flexibility and simplicity of the stack, along with its components, give
    a real boost in terms of development speed, extensibility, and maintainability
    while allowing scalability (due to the distributed nature of MongoDB on the one
    hand and the async nature of FastAPI on the other hand) down the road. This might
    be crucial if your product needs to evolve and become bigger than it was initially
    supposed to be. The ideal scenario would probably be a small-to-medium-scale web
    app that you can experiment with.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 栈的灵活性和简单性，以及其组件，在开发速度、可扩展性和可维护性方面提供了真正的提升，同时允许未来的可扩展性（由于 MongoDB 的分布式特性以及 FastAPI
    的异步特性），如果您的产品需要发展并变得比最初预期的更大，这可能至关重要。理想的情况可能是一个可以实验的小到中型规模的 Web 应用程序。
- en: Developers and analysts alike could greatly benefit from Python’s ecosystem
    and extensibility through a rich ecosystem of modules that encompasses virtually
    every human activity that includes some type of computing.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员和分析师都可以从 Python 的生态系统和扩展性中受益，这个生态系统包含几乎涵盖所有包含某种类型计算的人类活动的丰富模块。
- en: Why use MongoDB?
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用 MongoDB？
- en: MongoDB is a free, fast, and scalable database with a JSON format and simple
    syntax. It enables flexible schemas and, thus, iterative and rapid development.
    MongoDB is able to accommodate data structures of varying complexities. Additionally,
    its querying and aggregation methods make it an excellent choice for a flexible
    REST API framework such as FastAPI, coupled with an official Python driver such
    as Motor. It has a high level of adoption and maturity and is one of the pillars
    of the NoSQL data storage movement that took the web development world by storm
    a decade ago.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB 是一个免费、快速且可扩展的数据库，具有 JSON 格式和简单语法。它支持灵活的模式，从而实现迭代和快速开发。MongoDB 能够适应各种复杂性的数据结构。此外，其查询和聚合方法使其成为像
    FastAPI 这样的灵活 REST API 框架的绝佳选择，结合官方 Python 驱动程序如 Motor。它具有高度的采用率和成熟度，并且是十年前席卷
    Web 开发世界的 NoSQL 数据存储运动支柱之一。
- en: 'The following are some other features that will be detailed for use in this
    book:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些将在本书中详细说明的其他功能：
- en: '**Complex nested structures**: MongoDB documents allow other documents and
    arrays of documents to be embedded, which naturally translates into the data flow
    of a modern data web app (for example, you can embed all comments into the blog
    post they respond to). Denormalization is encouraged.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂的嵌套结构**：MongoDB 文档允许嵌入其他文档和文档数组，这自然地转化为现代数据网络应用程序的数据流（例如，可以将所有评论嵌入到它们所响应的博客文章中）。鼓励去规范化。'
- en: '**Simple, intuitive syntax**: The methods for performing basic **create**,
    **read**, **update**, **delete** (**CRUD**) operations, coupled with powerful
    aggregation frameworks and projections, allow you to achieve almost all data reads
    quite easily through the use of drivers. The commands should be intuitive for
    anyone with a bit of SQL experience.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单直观的语法**：执行基本 **创建**、**读取**、**更新**、**删除**（**CRUD**）操作的方法，结合强大的聚合框架和投影，通过使用驱动程序，几乎可以轻松实现所有数据读取。对于有
    SQL 经验的人来说，这些命令应该是直观的。'
- en: '**Community and documentation**: MongoDB is backed by a mature company and
    a strong community, and it offers various tools to facilitate the development
    and prototyping process. For instance, **Compass** is a desktop application that
    enables users to manage and administer databases. The framework of the serverless
    functions is constantly being updated and upgraded, and there are excellent drivers
    for virtually every programming language.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区和文档**：MongoDB 由一家成熟的公司和一个强大的社区支持，并提供各种工具以促进开发和原型设计过程。例如，**Compass** 是一个桌面应用程序，它允许用户管理和维护数据库。无服务器函数的框架正在不断更新和升级，并且几乎为每种编程语言都提供了优秀的驱动程序。'
- en: Of course, MongoDB is not a silver bullet, and some challenges are worth noticing
    upfront. On the one hand, the schema-less design and the ability to insert any
    type of data into your database might be a bit panic-inducing but translates to
    the need for stronger data integrity validation on the backend side. You will
    see how **Pydantic**—an excellent Python validation and type-enforcement library—can
    help you with stronger data integrity. The absence of complex joins, which are
    present in the SQL world, might be a dealbreaker for some types of applications.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，MongoDB 不是一个万能的解决方案，一些挑战在开始时就值得注意。一方面，无模式设计和将任何类型的数据插入数据库的能力可能会引起一些恐慌，但这转化为后端需要更强的数据完整性验证。你将看到
    **Pydantic**——一个优秀的 Python 验证和类型强制库——如何帮助你实现更强的数据完整性。在 SQL 世界中存在的复杂连接的缺失，可能是一些应用程序的致命缺陷。
- en: Now that you understand what MongoDB brings to the table in terms of scalability
    and flexibility, with its schema-less approach, take a look at the REST API framework
    of choice, FastAPI, and learn how it can help you implement that schema-less approach
    and simplify your interactions with the data.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了 MongoDB 在可扩展性和灵活性方面的优势，以及其无模式的方法，那么请看看你选择的 REST API 框架 FastAPI，并学习它是如何帮助你实现无模式方法并简化与数据的交互的。
- en: Why use FastAPI?
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用 FastAPI？
- en: FastAPI is a modern and performant web framework for building APIs. Built by
    Sebastian Ramirez, it uses the newest features of the Python programming language,
    such as type hinting and annotations, the *async – await* syntax, Pydantic models,
    web socket support, and more.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 是一个现代且性能卓越的 Web 框架，用于构建 API。由 Sebastian Ramirez 构建，它使用了 Python 编程语言的新特性，如类型提示和注解、*async
    – await* 语法、Pydantic 模型、WebSocket 支持，等等。
- en: If you are not familiar with APIs, let’s get into it in more depth by understanding
    what an API is. An **application programming interface** (**API**) is used to
    enable some kind of interaction between different pieces of software, and they
    communicate using **Hypertext Transfer Protocol** (**HTTP**) through a cycle of
    requests and responses. Therefore, an API is, as its name suggests, an interface.
    Via this interface, humans or machines interact with an application or a service.
    Every API provider should have an interface that is well suited for the type of
    data that they provide; for instance, a weather forecasting station provides an
    API that lists the temperatures and humidity levels for a certain location. Sports
    sites provide statistical data about the games that are being played. A pizza
    delivery API will provide you with the selected ingredients, the price, and the
    estimated time of arrival.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉 API，让我们深入了解，通过了解 API 是什么来开始。**应用程序编程接口**（**API**）用于实现不同软件组件之间的某种交互，它们通过请求和响应的周期使用**超文本传输协议**（**HTTP**）进行通信。因此，API
    如其名所示，是一个接口。通过这个接口，人类或机器与应用程序或服务进行交互。每个 API 提供商都应该有一个适合他们提供的数据类型的接口；例如，一个天气预报站提供的
    API 会列出某个地点的温度和湿度水平。体育网站提供正在进行的比赛的统计数据。一个比萨饼配送 API 会提供所选配料、价格和预计送达时间。
- en: APIs touch every aspect of your life, for example, transmitting medical data,
    enabling fast communications between applications, and even used in tractors in
    fields. APIs are what make today’s web run and, put simply, are the best form
    of information exchange.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: API 涉及到你生活的方方面面，例如，传输医疗数据、实现应用程序之间的快速通信，甚至在田野中的拖拉机上使用。API 是使今天的网络运行的原因，简单来说，是信息交换的最佳形式。
- en: 'This chapter will not go over the rigorous definitions of REST APIs, but just
    list some of their most important features:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本章不会详细讲解 REST API 的严格定义，而是列出它们的一些最重要的特性：
- en: '**Statelessness**: REST APIs are said to be stateless, which means that neither
    the client nor the server stores any states in between. All the requests and responses
    are handled by the API server in isolation and without information about the session
    itself.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态**：据说 REST API 是无状态的，这意味着客户端和服务器之间不存储任何状态。所有请求和响应都由 API 服务器独立处理，且不涉及会话本身的信息。'
- en: '**Layered structure**: To keep the API scalable and understandable, a RESTful
    architecture implies a layered structure. The different layers form a hierarchy
    and communicate with each other but not with every component, thus improving overall
    security.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分层结构**：为了保持 API 可扩展性和可理解性，RESTful 架构意味着一个分层结构。不同的层形成一个层次结构，相互通信但不与每个组件通信，从而提高了整体安全性。'
- en: '**Client-server architecture**: APIs should be able to connect different systems/pieces
    of software without limiting their own functionalities—the server and the client
    have to stay separate and independent from each other.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端-服务器架构**：API 应该能够连接不同的系统/软件组件，而不限制它们自身的功能——服务器和客户端必须保持相互独立。'
- en: 'There are numerous reasons why MongoDB chose FastAPI for their REST API layer,
    even though it’s new compared to other Python frameworks. Here are some of the
    reasons:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然与其他 Python 框架相比较新，但 MongoDB 选择 FastAPI 作为他们的 REST API 层有许多原因。以下是其中的一些原因：
- en: '**High performance**: FastAPI can achieve very high performance, especially
    compared to other Python-based solutions. By using Starlette under the hood, FastAPI’s
    performance reaches levels that are usually reserved for Node.js and Go.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高性能**：FastAPI 可以实现非常高的性能，尤其是与其他基于 Python 的解决方案相比。通过底层使用 Starlette，FastAPI
    的性能达到了通常只属于 Node.js 和 Go 的水平。'
- en: '**Data validation and simplicity**: Being heavily based on Python types and
    Pydantic brings numerous benefits. Since Pydantic structures are just instances
    of classes the developers define, you can use complex data validations, deeply
    nested JSON objects, and hierarchical models (using Python lists and dictionaries),
    and this relates very well with the nature of MongoDB.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据验证和简洁性**：由于 Pydantic 极度依赖 Python 类型，这带来了许多好处。由于 Pydantic 结构只是开发者定义的类的实例，你可以使用复杂的数据验证、深度嵌套的
    JSON 对象和分层模型（使用 Python 列表和字典），这与 MongoDB 的本质非常契合。'
- en: '**Faster development**: Development becomes more intuitive, with strong **integrated
    development environment** (**IDE**) support, which leads to faster development
    time and fewer bugs.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速开发**：有了强大的**集成开发环境**（**IDE**）支持，开发变得更加直观，这导致开发时间更短，错误更少。'
- en: '**Standards compliance**: FastAPI is standard-based and fully compatible with
    open standards for building APIs—such as OpenAPI and JSON schema.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准兼容性**：FastAPI基于标准，完全兼容用于构建API的开放标准——如OpenAPI和JSON模式。'
- en: '**Logical structuring of apps**: The framework allows the structuring of APIs
    and apps into multiple routers and allows granular request and response customization,
    and easy access to every part of the HTTP cycle.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用逻辑结构化**：该框架允许将API和应用程序结构化为多个路由器，允许对请求和响应进行细粒度定制，并轻松访问HTTP周期的每个部分。'
- en: '`asyncio` module into Python.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`asyncio`模块集成到Python中。
- en: '**Dependency injection**: The dependency injection system in FastAPI is one
    of its biggest selling points. It enables the creation of complex functionalities
    that are easily reusable across your API. This is a pretty big deal and probably
    the feature that makes FastAPI ideal for hybrid web apps—it gives developers the
    opportunity to easily attach different functionalities to the REST endpoints.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖注入**：FastAPI中的依赖注入系统是其最大的卖点之一。它使得创建复杂的功能变得容易重用，这些功能可以在你的API中轻松使用。这是一件大事，可能是使FastAPI成为混合Web应用理想的特性——它为开发者提供了将不同功能轻松附加到REST端点的机会。'
- en: '**Great documentation**: The documentation of the framework itself is excellent
    and second to none. It is both easy to follow and extensive.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优秀的文档**：该框架本身的文档非常出色，无与伦比。它既易于遵循，又内容丰富。'
- en: '**Automatic documentation**: Being based on OpenAPI, FastAPI enables automatic
    documentation creation, which essentially means that you get your API documented
    for free with Swagger.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动文档生成**：基于OpenAPI，FastAPI能够实现自动文档的创建，这本质上意味着你可以免费使用Swagger来获取你的API文档。'
- en: 'Also, getting started is relatively simple:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，入门相对简单：
- en: '[PRE0]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In order to get at least a basic idea of what coding with FastAPI looks like,
    let’s take a look at a minimal API:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了至少对使用FastAPI进行编码有一个基本的概念，让我们看看一个最小化的API：
- en: '[PRE1]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding few lines of code define a minimal API with a single endpoint
    (`/`) that responds to a `GET` request with the message `Hello world`. You can
    instantiate a FastAPI class and use decorators to tell the server which HTTP methods
    should trigger which function for a response.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 前几行代码定义了一个具有单个端点（`/`）的最小API，该端点对`GET`请求返回消息`Hello world`。你可以实例化一个FastAPI类，并使用装饰器告诉服务器哪些HTTP方法应该触发哪个函数以进行响应。
- en: Python and REST APIs
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python和REST API
- en: Python has been used to build REST APIs for a very long time. While there are
    many options and solutions, **DRF** and **Flask** seem to be the most popular
    ones, at least until recently. If you are feeling adventurous, you can Google
    less popular or older frameworks such as **bottle.py** and **CherryPy**.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Python已经用于构建REST API很长时间了。尽管有许多选项和解决方案，**DRF**和**Flask**似乎是最受欢迎的，至少直到最近。如果你喜欢冒险，你可以通过Google搜索不那么流行或较旧的框架，例如**bottle.py**和**CherryPy**。
- en: DRF is a plugin system for the Django web framework and enables a Django system
    to create highly customized REST API responses and generate endpoints based on
    the defined models. DRF is a very mature and battle-tested system. It is regularly
    updated, and its documentation is very detailed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: DRF是Django Web框架的插件系统，它使Django系统能够创建高度定制的REST API响应，并基于定义的模型生成端点。DRF是一个非常成熟且经过实战检验的系统。它定期更新，其文档非常详细。
- en: Flask, Python’s lightweight microframework, is a real gem among the web-building
    Python tools and can create REST APIs in a lot of different ways. You can use
    pure Flask and just output the appropriate format (i.e., JSON instead of HTML)
    or use some of the extensions developed to make the creation of REST APIs as straightforward
    as possible. Both of these solutions are fundamentally synchronous, although there
    seems to be active development in the direction of enabling async support.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Flask，Python的轻量级微框架，是网络构建Python工具中的瑰宝，并且可以用多种方式创建REST API。你可以使用纯Flask并输出适当的格式（即，JSON而不是HTML），或者使用一些开发出来的扩展，使创建REST
    API尽可能简单。这两种解决方案在本质上都是同步的，尽管似乎有积极的发展方向，旨在启用异步支持。
- en: There are also some very robust and mature tools, such as Tornado, which is
    an asynchronous networking library (and a server) that is able to scale to tens
    of thousands of open connections. Finally, in the last couple of years, several
    new Python-based solutions have been created.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一些非常强大和成熟的工具，例如Tornado，它是一个异步网络库（和服务器），能够扩展到数万个开放连接。最后，在过去的几年里，已经创建了几个基于Python的新解决方案。
- en: One of these solutions, and arguably the fastest, is Starlette. Dubbed as a
    lightweight ASGI framework/toolkit, it is ideal for building high-performance
    async services.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这些解决方案中的一种，并且可以说是最快的，是Starlette。被称为轻量级的ASGI框架/工具包，它非常适合构建高性能的异步服务。
- en: Sebastian Ramirez built FastAPI on top of Starlette and Pydantic, while also
    adding numerous features and goodies by using the latest Python features, such
    as type hinting and async support. According to some recent developer surveys[1](B22406_01.xhtml#footnote-001),
    FastAPI is quickly becoming one of the most popular and most loved web frameworks.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 塞巴斯蒂安·拉米雷斯（Sebastian Ramirez）在Starlette和Pydantic的基础上构建了FastAPI，同时通过使用最新的Python特性（如类型提示和异步支持）添加了众多功能和优点。根据一些最近的开发者调查[1](B22406_01.xhtml#footnote-001)，FastAPI正迅速成为最受欢迎和最受欢迎的Web框架之一。
- en: '[1](B22406_01.xhtml#footnote-001-backlink) [https://www.jetbrains.com/lp/devecosystem-2023/python/#python_web_libs_two_years](https://www.jetbrains.com/lp/devecosystem-2023/python/#python_web_libs_two_years)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[1](B22406_01.xhtml#footnote-001-backlink) [https://www.jetbrains.com/lp/devecosystem-2023/python/#python_web_libs_two_years](https://www.jetbrains.com/lp/devecosystem-2023/python/#python_web_libs_two_years)'
- en: In later chapters of this book, you’ll go over the most important features of
    FastAPI, but at this point, we’ll stress the significance of having a truly async
    Python framework as the glue for the most diverse components of a system. In fact,
    besides doing the usual web framework stuff, such as communicating with a database,
    spitting out data to a frontend, and managing authentication and authorization,
    this Python pipeline enables you to quickly integrate and easily carry out frequently
    required tasks such as background jobs, header and body manipulation, response
    and request validation, and more through the dependency injection system.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后续章节中，您将了解FastAPI最重要的功能，但在此阶段，我们将强调拥有一个真正异步的Python框架作为系统最多样化组件的粘合剂的重要性。实际上，除了执行通常的Web框架任务，如与数据库通信、向前端输出数据、管理身份验证和授权之外，这个Python管道还使您能够通过依赖注入系统快速集成并轻松执行频繁需要的任务，如后台作业、头部和正文操作、响应和请求验证等。
- en: The book will try to cover the absolute minimum necessary for you to be able
    to build a simple FastAPI system, but along the way it will consider various web
    server solutions and deployment options (such as Deta, Heroku, and DigitalOcean)
    for your FastAPI Python-based backend, while trying to opt for free solutions.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将尝试涵盖您构建简单FastAPI系统所需的绝对最小必要条件，但在过程中，它将考虑各种网络服务器解决方案和部署选项（如Deta、Heroku和DigitalOcean）为您基于FastAPI的Python后端，同时尝试选择免费解决方案。
- en: So, to cut a long story short, you should consider choosing FastAPI because
    you ideally want the ability and speed to handle requests asynchronously as if
    you were using a Node.js server while having access to the Python ecosystem. Additionally,
    you want the simplicity and development speed of a framework that automatically
    generates documentation for you.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，简而言之，您应该考虑选择FastAPI，因为您理想上希望拥有异步处理请求的能力和速度，就像使用Node.js服务器一样，同时又能访问Python生态系统。此外，您还希望拥有一个框架的简单性和开发速度，该框架可以自动为您生成文档。
- en: After reviewing the backend components, it is time to finalize your stack and
    work on the frontend. The next section gives you a brief introduction to React
    and discusses what distinguishes it from other (also valid) solutions.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查了后端组件之后，现在是时候确定你的技术栈并着手前端工作了。下一节将为您简要介绍React，并讨论它与其他（同样有效）解决方案的区别。
- en: The frontend – React
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前端——React
- en: The changes in the world of the web are most visible when talking about the
    frontend—the part of the website that is facing the users. Tim Berners-Lee made
    the first HTML specification public in 1991, and it consisted of text and under
    20 tags. In 1994, CSS was introduced and the web started looking a little nicer.
    Legend has it that the new browser scripting language called Mocha was created
    in just 10 days—that was in 1995\. Later, this language went through numerous
    changes and became what we know today as JavaScript—a powerful and fast language
    that, with the advent of Node.js, was able to conquer the servers, too.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到前端——即面向用户的网站部分时，网络世界的变化最为明显。蒂姆·伯纳斯-李（Tim Berners-Lee）于1991年首次公开了第一个HTML规范，它由文本和不到20个标签组成。1994年，CSS被引入，网络开始看起来更加美观。传说中，名为Mocha的新浏览器脚本语言在短短10天内被创造出来——那是在1995年。后来，这种语言经历了多次变化，成为了我们今天所熟知的JavaScript——一种强大且快速的编程语言，随着Node.js的出现，它也能够征服服务器。
- en: In May 2013, React was presented in the US and the web development world was
    able to witness virtual DOM, one-way data flow, the Flux pattern, and more.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 2013 年 5 月，React 在美国推出，整个 Web 开发界得以见证虚拟 DOM、单向数据流、Flux 模式等。
- en: This is a bit of history to just try and provide some context and continuity
    because web development, like any other creative human activity, rarely moves
    in quantum leaps. Usually, it moves in steps that enable users to resolve the
    issues that they are facing. It would be unfair not to mention Vue.js, which is
    an excellent choice for building frontends that also sports an entire ecosystem
    of libraries, and Svelte.js, which offers a radical shift in building UIs in the
    sense that the UI is compiled, and the bundled size is significantly smaller.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一点历史，旨在尝试提供一些背景和连贯性，因为 Web 开发，就像任何其他创造性的人类活动一样，很少会跳跃式发展。通常，它是通过一系列步骤发展的，使用户能够解决他们面临的问题。不提
    Vue.js 就是不公平的，它是一个构建前端的好选择，同时也拥有一个完整的库生态系统，而 Svelte.js 则在构建 UI 方面提供了一个根本性的转变，即
    UI 是编译的，捆绑的大小显著减小。
- en: Why use React?
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么使用 React？
- en: Interactive, attractive, fast, and intuitive UIs are a necessity for any public-facing
    web application. It is possible, though very difficult, to achieve most or every
    functionality that even a simple web application is expected to provide using
    just plain JavaScript. FastAPI is more than capable of serving HTML (and static
    files, such as JavaScript or CSS) using any compatible templating engine (the
    most widely used in the Python world is probably Jinja2), but we and the users
    want more.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何面向公众的 Web 应用程序来说，交互式、吸引人、快速且直观的 UI 是必需的。虽然非常困难，但仅使用纯 JavaScript 就可以实现大多数甚至所有简单
    Web 应用程序预期提供的功能。FastAPI 能够使用任何兼容的模板引擎（在 Python 世界中，最广泛使用的大概是 Jinja2）来服务 HTML（以及静态文件，如
    JavaScript 或 CSS），但我们和用户想要的更多。
- en: Compared to other frameworks, React is small. It isn’t even considered a framework,
    but a library— actually, a couple of libraries. Still, it is a mature product
    with over 10 years of development behind it, created for the needs of Facebook
    and utilized by the biggest companies such as Uber, X (formally known as Twitter),
    and Airbnb.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他框架相比，React 较小。它甚至不被视为框架，而是一个库——实际上，是几个库。尽管如此，它是一个经过超过 10 年开发、为 Facebook 的需求而创建、并由像
    Uber、X（前身为 Twitter）和 Airbnb 这样的最大公司使用的成熟产品。
- en: This book does not explore React in depth because we want to focus on how all
    the different parts of the FARM stack connect and fit within the bigger picture.
    Additionally, 81% of developers already use React[2](B22406_01.xhtml#footnote-000)
    and are familiar with its features, so we assume our readers have a level of familiarity
    with this framework already.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本书没有深入探讨 React，因为我们想专注于 FARM 栈的所有不同部分是如何连接并融入更大图景中的。此外，81% 的开发者已经使用 React[2](B22406_01.xhtml#footnote-000)
    并且熟悉其功能，因此我们假设我们的读者已经对这一框架有一定程度的了解。
- en: '[2](B22406_01.xhtml#footnote-000-backlink) [https://2022.stateofjs.com/en-US/libraries/front-end-frameworks/](https://2022.stateofjs.com/en-US/libraries/front-end-frameworks/)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[2](B22406_01.xhtml#footnote-000-backlink) [https://2022.stateofjs.com/en-US/libraries/front-end-frameworks/](https://2022.stateofjs.com/en-US/libraries/front-end-frameworks/)'
- en: Most developers want a streamlined and structured way of building UIs. React
    enables developers to create dynamic applications in a much easier way by relying
    on JSX—a mix of JavaScript and XML that has an intuitive tag-based syntax and
    provides developers with a way to think of the application in terms of components
    that go on to form other, more complex, components, thus breaking the process
    of crafting complex UI and interactions into smaller, more manageable steps.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发者希望有一个简化和结构化的方式来构建 UI。React 通过依赖 JSX——JavaScript 和 XML 的混合体，具有直观的基于标签的语法，并为开发者提供了一种将应用程序视为组件的方式，这些组件进而形成其他更复杂的组件，从而将构建复杂
    UI 和交互的过程分解为更小、更易于管理的步骤，使开发者能够以更简单的方式创建动态应用程序。
- en: 'The main benefits of using React as a frontend solution can be summarized as
    follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 React 作为前端解决方案的主要好处可以总结如下：
- en: '**Performance**: By using the React virtual DOM, which operates in memory,
    React apps provide smooth and fast performance.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：通过使用在内存中运行的 React 虚拟 DOM，React 应用提供了平滑且快速的性能。'
- en: '**Reusability**: Since the app is built by using components that have their
    own properties and logic, you can write out components once and then reuse them
    as many times as needed, cutting down development time and complexity.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可复用性**：由于该应用是通过使用具有自身属性和逻辑的组件构建的，因此您可以一次性编写组件，然后根据需要多次复用它们，从而减少开发时间和复杂性。'
- en: '**Ease of use**: This is always a bit subjective but React is easy to get started.
    Advanced concepts and patterns require some level of proficiency, but even novice
    developers can reap immediate benefits just from the possibility of splitting
    the application frontend into components and then using them like LEGO bricks.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易用性**：这始终有点主观，但React入门很容易。高级概念和模式需要一定程度的熟练度，但即使是新手开发者也能从将应用程序前端拆分为组件并像乐高积木一样使用它们的可能性中立即获得好处。'
- en: React and frameworks based on React empower you, as a developer, to create single-page
    applications that have a desktop-like look and feel, but also server-side rendering
    that is beneficial for search engine optimization. Knowing your way around React
    enables you to benefit from some of today’s most powerful frontend web frameworks
    such as Next.js, static site generators (such as Gatsby.js), or exciting and promising
    newcomers (such as React Remix).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: React和基于React的框架使你作为开发者能够创建具有桌面级外观和感觉的单页应用程序，同时还有对搜索引擎优化有益的服务器端渲染。了解React的使用方法使你能够从今天最强大的前端Web框架中受益，例如Next.js、静态站点生成器（如Gatsby.js）或令人兴奋且充满希望的新来者（如React
    Remix）。
- en: In *version 16.8*, the React library introduced **Hooks**, which enable developers
    to use and manipulate the state of the components, along with some other features
    of React, without the need to use classes. This is a big change that successfully
    tackles different issues—it enables the reusability of stateful logic between
    components and simplifies the understanding and management of complex components.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在*版本16.8*中，React库引入了**钩子**，使开发者能够在不使用类的情况下使用和操作组件的状态，以及一些React的其他功能。这是一个重大的变化，成功地解决了不同的问题——它使得在组件之间重用状态逻辑成为可能，并简化了复杂组件的理解和管理。
- en: The simplest React Hook is probably the `useState` Hook. This Hook enables you
    to have and maintain a stateful value (such as an object, array, or variable)
    throughout the life cycle of the component, without having to resort to old-school
    class-based components.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的React钩子可能是`useState`钩子。这个钩子使你能够在组件的生命周期内拥有并维护一个状态值（如对象、数组或变量），而无需求助于老式的基于类的组件。
- en: For instance, a very simple component that could be used to filter search results
    when a user is trying to find the right car might contain the desired brand, model,
    and a production year range. This functionality would be a great candidate for
    a separate component—a search component that would need to maintain the state
    of different input controls, probably implemented as a series of dropdowns. Let’s
    just see the simplest possible version of this implementation.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个可能用于用户尝试找到合适的汽车时过滤搜索结果的非常简单的组件可能包含所需的品牌、型号和生产年份范围。这种功能非常适合作为单独的组件——一个需要维护不同输入控件状态（可能实现为一系列下拉菜单）的搜索组件。让我们看看这种实现的
    simplest 可能版本。
- en: 'The following block of code creates a simple functional component with a single
    stateful string value—an HTML `select` element that will update the stateful variable
    named `brand`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块创建了一个简单的函数组件，它具有单个状态字符串值——一个HTML `select`元素，它将更新名为`brand`的状态变量：
- en: '[PRE2]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The bold line is where the Hook magic happens, and it must be within the body
    of a function. The statement simply creates a new state variable, called `brand`,
    and provides you with a setter function that can be used inside the component
    to set the desired value.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 粗体行是钩子魔法发生的地方，它必须位于函数体内部。该语句仅仅创建了一个新的状态变量，称为`brand`，并为你提供了一个setter函数，可以在组件内部使用它来设置所需的值。
- en: 'There are many Hooks that solve different problems, and this book will go over
    the following fundamental ones:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多钩子可以解决不同的问题，本书将介绍以下基本钩子：
- en: '**Declarative views**: In React, you do not have to worry about transitions
    or mutations of the DOM. React handles everything, and the only thing you have
    to do is declare how the view looks and reacts.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声明式视图**：在React中，你不必担心DOM的过渡或突变。React处理一切，你唯一需要做的就是声明视图的外观和反应。'
- en: '**No templating language**: React practically uses JavaScript as a templating
    language (through JSX), so all you have to know in order to be able to use it
    effectively is some JavaScript, such as array manipulation and iteration.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无模板语言**：React实际上使用JavaScript作为模板语言（通过JSX），因此为了能够有效地使用它，你只需要了解一些JavaScript，例如数组操作和迭代。'
- en: '**Rich ecosystem**: There are numerous excellent libraries that complement
    React’s basic functionality—from routers to custom Hooks, external library integrations,
    CSS framework adaptations, and more.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**丰富的生态系统**：有众多优秀的库可以补充React的基本功能——从路由器到自定义钩子、外部库集成、CSS框架适配等等。'
- en: Ultimately, Hooks provide React with a new way of adding and sharing stateful
    logic across components and can even replace (in simpler cases) the need for Redux
    or other external state management libraries. Most of the examples shown in this
    book make use of the Context API—a React feature that enables passing objects
    and functions down the component tree without the need to pass props through components
    that do not need it. Coupled with a Hook—the `useContext` Hook—it provides a straightforward
    way of passing and maintaining stateful values in every part of the app.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，钩子为React提供了一种新的方式，在组件之间添加和共享状态逻辑，甚至可以在简单情况下取代Redux或其他外部状态管理库的需求。本书中展示的大部分示例都使用了上下文API——这是一个React特性，它允许在不通过不需要它的组件传递props的情况下将对象和函数传递到组件树中。结合钩子——`useContext`钩子——它提供了一种简单直接的方式，在应用的每个部分传递和维护状态值。
- en: React uses (although it is not imperative) the newest features of functional
    JavaScript, ES6, and ES7, particularly when it comes to arrays. Working with React
    improves understanding of JavaScript, and a similar thing could be said of FastAPI
    and modern Python.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: React使用（尽管不是强制性的）功能JavaScript的最新特性，ES6和ES7，尤其是在数组方面。使用React可以提高对JavaScript的理解，类似的情况也可以说关于FastAPI和现代Python。
- en: The final piece of the puzzle will be the choice of a CSS library or framework.
    Currently, in 2024, there are dozens of CSS libraries that play nice with React,
    including Bootstrap, Material UI, Bulma, and more. Many of these libraries merge
    with React to become meaningful frameworks of prebuilt customizable and parameterized
    components. We will use Tailwind CSS as it is simple to set up—and it is intuitive
    once you get the hang of it.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一部分将是选择CSS库或框架。截至2024年，有数十个CSS库与React兼容，包括Bootstrap、Material UI、Bulma等等。许多这些库与React合并，成为预构建的自定义和参数化组件的有意义框架。我们将使用Tailwind
    CSS，因为它易于设置——并且一旦你掌握了它，它就非常直观。
- en: Keeping the React part to a bare minimum should allow you to focus more on the
    true protagonists of the story—FastAPI and MongoDB. You can easily replace React,
    should you wish to do so, be it Svelte.js, Vue.js, or vanilla handcrafted ECMAScript.
    However, by learning the basics of React (and Hooks), you are embarking on a wonderful
    web development adventure that will enable you to use and understand many tools
    and frameworks built on top of React.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将React部分保持到最基本，应该能让你更多地关注故事中的真正主角——FastAPI和MongoDB。如果你愿意，可以轻松地替换React，无论是Svelte.js、Vue.js还是纯手工打造的ECMAScript。然而，通过学习React（及其钩子）的基础知识，你将踏上一次美妙的网络开发之旅，这将使你能够使用和理解建立在React之上的许多工具和框架。
- en: Arguably, Next.js is the feature-richest server-side rendering React framework
    that enables fast development, filesystem-based routing, and more.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 争议性地，Next.js是功能最丰富的服务器端渲染React框架，它支持快速开发、基于文件系统的路由等等。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter laid the background for the FARM stack, from describing the role
    of each component to their strengths. Now, you will be confident in choosing the
    FARM stack and you know how to implement it within the context of a flexible and
    fluid web development project. Since you’re reading this, I’ll assume that my
    case was compelling—that you’re still interested and ready to explore the FARM
    stack.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为FARM堆栈奠定了基础，从描述每个组件的角色到它们的优点。现在，你将自信地选择FARM堆栈，并且知道如何在灵活和流动的网络开发项目中实现它。既然你在阅读，我会假设我的案例是有说服力的——你对它仍然感兴趣，并准备好探索FARM堆栈。
- en: The next chapter will provide a fast-paced, concise, and actionable overview
    of MongoDB, and then set up your data storage layer for your FARM application.
    As you go along, we are confident that you will find the combination of FastAPI,
    React, and MongoDB to be the best choice for your next web application.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将提供一个快速、简洁、可操作的MongoDB概述，然后为你的FARM应用程序设置数据存储层。随着你的进展，我们相信你会发现FastAPI、React和MongoDB的组合是你下一个网络应用程序的最佳选择。
