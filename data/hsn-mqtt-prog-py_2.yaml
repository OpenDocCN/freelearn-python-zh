- en: Using Command-Line and GUI Tools to Learn How MQTT Works
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行和GUI工具学习MQTT的工作原理
- en: 'In this chapter, we will work with command-line and GUI tools to learn how
    MQTT 3.1.1 works in detail. We will learn MQTT basics, the specific vocabulary
    for MQTT, and its working modes. We will use different utilities and diagrams
    to understand the most important concepts related to MQTT. We will understand
    everything we need to know before writing Python code to work with the MQTT protocol.
    We will work with the different Quality of Service (QoS) levels and we will analyze
    and compare their overheads. We will gain an understanding of the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用命令行和GUI工具详细了解MQTT 3.1.1的工作原理。我们将学习MQTT的基础知识，MQTT的特定词汇以及其工作模式。我们将使用不同的实用程序和图表来了解与MQTT相关的最重要的概念。在编写Python代码与MQTT协议一起工作之前，我们将了解我们需要知道的一切。我们将使用不同的服务质量（QoS）级别，并分析和比较它们的开销。我们将了解以下内容：
- en: Subscribing to topics with a command-line tool
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行工具订阅主题
- en: Subscribing to topics with a GUI tool
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GUI工具订阅主题
- en: Publishing messages with a command-line tool
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行工具发布消息
- en: Publishing messages with a GUI tool
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GUI工具发布消息
- en: Unsubscribing from topics with a GUI tool
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GUI工具取消订阅主题
- en: Learning best practices for topics
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习主题的最佳实践
- en: Understanding MQTT wildcards
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解MQTT通配符
- en: Learning about the different quality of service levels
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解不同的服务质量级别
- en: Working with at least once delivery (QoS level 1)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用至少一次传递（QoS级别1）工作
- en: Working with exactly once delivery (QoS level 2)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用恰好一次传递（QoS级别2）工作
- en: Understanding overheads in the different quality of service levels
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解不同服务质量级别的开销
- en: Subscribing to topics with a command-line tool
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行工具订阅主题
- en: 'A drone is an IoT device that interacts with many sensors and actuators, including
    digital electronic speed controllers linked to engines, propellers, and servomotors.
    A drone is also known as an **unmanned aerial vehicle** (**UAV**), but we will
    definitely refer to it as a drone. Let''s imagine that we have to monitor many
    drones. Specifically, we have to display their altitude and the speed for each
    of their servomotors. Not all of the drones have the same number of engines, propellers,
    and servomotors. We have to monitor the following types of drone:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 无人机是一种与许多传感器和执行器进行交互的物联网设备，包括与发动机、螺旋桨和伺服电机连接的数字电子调速器。无人机也被称为**无人驾驶飞行器**（**UAV**），但我们肯定会称其为无人机。假设我们必须监视许多无人机。具体来说，我们必须显示它们的高度和每个伺服电机的速度。并非所有无人机都具有相同数量的发动机、螺旋桨和伺服电机。我们必须监视以下类型的无人机：
- en: '| **Name** | **Number of propellers** |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **螺旋桨数量** |'
- en: '| Quadcopter | `4` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 四旋翼 | `4` |'
- en: '| Hexacopter | `6` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 六旋翼 | `6` |'
- en: '| Octocopter | `8` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 八旋翼 | `8` |'
- en: 'Each drone will publish its altitude every 2 seconds to the following topic:
    `sensors/dronename/altitude`, where `dronename` must be replaced by the name assigned
    to each drone. For example, the drone named `octocopter01` will publish its altitude
    values to the `sensors/octocopter01/altitude` topic and the drone named `quadcopter20`
    will use the `sensors/quadcopter20/altitude` topic.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每架飞行器将每2秒发布一次其高度到以下主题：`sensors/dronename/altitude`，其中`dronename`必须替换为分配给每架飞行器的名称。例如，名为`octocopter01`的飞行器将其高度值发布到`sensors/octocopter01/altitude`主题，名为`quadcopter20`的飞行器将使用`sensors/quadcopter20/altitude`主题。
- en: 'In addition, each drone will publish the speed for each of its rotors every
    2 seconds to the following topic: `sensors/dronename/speed/rotor/rotornumber`,
    where `dronename` must be replaced by the name assigned to each drone and `rotornumber`
    must be replaced by the rotor number for which the speed is going to be published.
    For example, the drone named `octocopter01` will publish its speed values for
    its rotor number `1` to the `sensors/octocopter01/speed/rotor/1` topic.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每架飞行器将每2秒发布一次其每个转子的速度到以下主题：`sensors/dronename/speed/rotor/rotornumber`，其中`dronename`必须替换为分配给每架飞行器的名称，`rotornumber`必须替换为将要发布速度的转子编号。例如，名为`octocopter01`的飞行器将其转子编号`1`的速度值发布到`sensors/octocopter01/speed/rotor/1`主题。
- en: 'We will use the `mosquitto_sub` command-line utility included in Mosquitto
    to generate a simple MQTT client that subscribes to a topic and prints all the
    messages it receives. Open a Terminal in macOS or Linux, or a Command Prompt in
    Windows, go to the directory in which Mosquitto is installed, and run the following
    command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Mosquitto中包含的`mosquitto_sub`命令行实用程序生成一个简单的MQTT客户端，该客户端订阅主题并打印接收到的所有消息。在macOS或Linux中打开终端，或在Windows中打开命令提示符，转到Mosquitto安装的目录，并运行以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you want to work with Windows PowerShell instead of the Command Prompt, you
    will have to add `.\` as a prefix to `mosquitto_sub`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用Windows PowerShell而不是命令提示符，您将不得不在`mosquitto_sub`之前添加`.\`作为前缀。
- en: 'The previous command will create an MQTT client that will establish a connection
    with the local MQTT server and then will make the client subscribe to the topic
    specified after the `-t` option: `sensors/octocopter01/altitude`. We specify the
    version of the MQTT protocol that we want to use when the client establishes the
    connection with `-V mqttv311`. This way, we indicate to the MQTT server that we
    want to use MQTT version 3.11\. We specify the `-d` option to enable debug messages
    that will allow us to understand what happens under the hood. We will analyze
    additional options for connection and subscription later.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建一个MQTT客户端，该客户端将与本地MQTT服务器建立连接，然后将使客户端订阅在`-t`选项之后指定的主题：`sensors/octocopter01/altitude`。当客户端建立连接时，我们指定要使用的MQTT协议的版本为`-V
    mqttv311`。这样，我们告诉MQTT服务器我们要使用MQTT版本3.11。我们指定`-d`选项以启用调试消息，这将使我们能够了解底层发生了什么。稍后我们将分析连接和订阅的其他选项。
- en: 'The Terminal or Command Prompt window will display debug messages similar to
    the following lines. Take into account that the generated `ClientId` will be different
    from the one shown after `Client mosqsub|17040-LAPTOP-5D`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 终端或命令提示符窗口将显示类似以下行的调试消息。请注意，生成的`ClientId`将与`Client mosqsub|17040-LAPTOP-5D`之后显示的不同：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The Terminal or Command Prompt window will display messages published to the
    topic to which we subscribed as they arrive from the MQTT server to the MQTT client.
    Keep the window open. You will see that that the client sends `PINGREQ` packets
    to the MQTT server and receives `PINQRESP` packets from the MQTT server. The following
    lines show examples of the messages displayed for these packets:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 终端或命令提示符窗口将显示从MQTT服务器到MQTT客户端的到达的消息。保持窗口打开。您将看到客户端向MQTT服务器发送`PINGREQ`数据包，并从MQTT服务器接收`PINQRESP`数据包。以下行显示了这些数据包的消息示例：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Subscribing to topics with a GUI tool
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GUI工具订阅主题
- en: 'MQTT.fx is a GUI utility implemented with JavaFX that is available for Windows,
    Linux, and macOS. This tool allows us to connect with an MQTT server, subscribe
    to topic filters, see received messages, and publish messages to topics. You can
    download the appropriate version for your operating system from the downloads
    section of the main web page for this utility: [http://www.mqttfx.org](http://www.mqttfx.org).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: MQTT.fx是使用JavaFX实现的GUI实用程序，适用于Windows、Linux和macOS。该工具允许我们连接到MQTT服务器，订阅主题过滤器，查看接收到的消息，并向主题发布消息。您可以从此实用程序的主网页的下载部分下载适合您操作系统的版本：[http://www.mqttfx.org](http://www.mqttfx.org)。
- en: 'Now, we will use the MQTT.fx GUI utility to generate another MQTT client that
    subscribes to the same topic, `sensors/octocopter01/altitude`, and displays all
    the messages it receives. We will work with MQTT.fx version 1.6.0\. Follow these
    steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用MQTT.fx GUI实用程序生成另一个订阅相同主题`sensors/octocopter01/altitude`并显示所有接收到的消息的MQTT客户端。我们将使用MQTT.fx版本1.6.0。按照以下步骤：
- en: Launch MQTT.fx, select local mosquitto in the dropdown located at the upper-left
    corner, and click on the configuration icon at the right-hand side of this dropdown
    and at the left-hand side of the Connect button. MQTT.fx will display the Edit
    Connection Profiles dialog box with different options for the connection profile
    named local mosquitto. We analyzed many of these options when we learned about
    the data that the MQTT client sends to the MQTT server to establish a connection.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动MQTT.fx，在位于左上角的下拉菜单中选择本地mosquitto，并单击该下拉菜单右侧和连接按钮左侧的配置图标。MQTT.fx将显示带有名为本地mosquitto的连接配置文件的不同选项的编辑连接配置文件对话框。当我们学习MQTT客户端发送到MQTT服务器以建立连接的数据时，我们分析了许多这些选项。
- en: 'Make sure the General button is pressed and make sure the MQTT Version Use
    Default checkbox is deactivated. Make sure 3.1.1 is selected in the dropdown below
    MQTT Version. This way, we tell the MQTT server that we want to use MQTT version
    3.11\. Notice that the Client ID textbox specifies MQTT_FX_Client. This is the
    `ClientId` value that MQTT.fx will send to the MQTT server (Mosquitto) in the
    `CONNECT` control packet. The following screenshot shows a dialog box with the
    selected options:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保按下“General”按钮，并确保取消激活“MQTT版本使用默认”复选框。确保在“MQTT版本”下拉菜单中选择3.1.1。这样，我们告诉MQTT服务器我们要使用MQTT版本3.11。注意，客户端ID文本框指定了MQTT_FX_Client。这是MQTT.fx将发送到MQTT服务器（Mosquitto）的`CONNECT`控制数据包中的`ClientId`值。以下屏幕截图显示了所选选项的对话框：
- en: '![](assets/a4b11c12-4981-4425-9cb3-08a384726ce2.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a4b11c12-4981-4425-9cb3-08a384726ce2.png)'
- en: Click OK and then click on the Connect button. MQTT.fx will establish a connection
    with the local Mosquitto server. Notice that the Connect button is disabled and
    the Disconnect button is enabled because the client is connected to the MQTT server.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“确定”，然后单击“连接”按钮。MQTT.fx将与本地Mosquitto服务器建立连接。请注意，连接按钮已禁用，断开连接按钮已启用，因为客户端已连接到MQTT服务器。
- en: 'Click Subscribe and enter `sensors/octocopter01/altitude` in the dropdown at
    the left-hand side of the Subscribe button. Then, click the Subscribe button.
    MQTT.fx will display a new panel at the left-hand side with the topic to which
    we have subscribed, as shown in the following screenshot:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“订阅”，并在“订阅”按钮左侧的下拉菜单中输入`sensors/octocopter01/altitude`。然后，单击“订阅”按钮。MQTT.fx将在左侧显示一个新面板，显示我们已订阅的主题，如下图所示：
- en: '![](assets/21f54e53-245a-4d99-abf6-d0bcd2f5d256.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/21f54e53-245a-4d99-abf6-d0bcd2f5d256.png)'
- en: 'If you don''t want to work with the MQTT.fx utility, you can run another `mosquitto_sub`
    command to generate another MQTT client that subscribes to the topic and print
    all the messages it receives. You just need to open another Terminal in macOS
    or Linux, or another Command Prompt in Windows, go to the directory in which Mosquitto
    is installed, and run the following command again. In this case, it isn''t necessary
    to specify the `-d` option as given here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用MQTT.fx实用程序，可以运行另一个`mosquitto_sub`命令，生成另一个订阅主题并打印接收到的所有消息的MQTT客户端。您只需要在macOS或Linux中打开另一个终端，或者在Windows中打开另一个命令提示符，转到安装Mosquitto的目录，并再次运行以下命令。在这种情况下，不需要指定此处给出的`-d`选项：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we have two MQTT clients subscribed to the same topic: `sensors/octocopter01/altitude`.
    Now, we will understand what happens under the hood when a client subscribes to
    a topic.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有两个订阅相同主题`sensors/octocopter01/altitude`的MQTT客户端。现在，我们将了解客户端订阅主题时发生的情况。
- en: The MQTT client sends a `SUBSCRIBE` packet to the MQTT server with a packet
    identifier (`PacketId`) in the header and one or more topic filters with their
    desired quality of service level in the payload.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: MQTT客户端向MQTT服务器发送一个带有标识符（`PacketId`）的`SUBSCRIBE`数据包，并在有效载荷中包含一个或多个主题过滤器及其所需的服务质量级别。
- en: '**Quality of service** is known as **QoS**.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务质量**被称为**QoS**。'
- en: Hence, a single `SUBSCRIBE` packet can ask the MQTT server to subscribe a client
    to many topics. The `SUBSCRIBE` packet must include at least one topic filter
    and a QoS pair to comply with the protocol.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，单个`SUBSCRIBE`数据包可以要求MQTT服务器订阅客户端到多个主题。`SUBSCRIBE`数据包必须至少包括一个主题过滤器和一个QoS对，以符合协议。
- en: In the two cases in which we requested a subscription, we used a specific topic
    name as the value for the topic filter, and therefore we request the MQTT server
    to subscribe to a single topic. We will learn about the use of wildcards in topic
    filters later.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们请求订阅的两种情况下，我们使用特定的主题名称作为主题过滤器的值，因此我们要求MQTT服务器订阅单个主题。稍后我们将学习主题过滤器中通配符的使用。
- en: We used the default options, and therefore the quality of service requested
    is the default level of 0\. We will dive deep into QoS levels later. Now, we will
    stay focused on the simplest subscription cases. If the QoS level is equal to
    0, the value for the `PacketId` field will be 0\. If the QoS level is equal to
    1 or 2, the packet identifier will have a number value to identify the packet
    and make it possible to identify the responses related to this packet.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了默认选项，因此请求的服务质量是默认级别0。我们稍后将深入研究QoS级别。现在，我们将专注于最简单的订阅情况。如果QoS级别等于0，则“PacketId”字段的值将为0。如果QoS级别等于1或2，则数据包标识符将具有一个数字值，以标识数据包并使其能够识别与此数据包相关的响应。
- en: 'The MQTT server will process a valid `SUBSCRIBE` packet and it will respond
    with a `SUBACK` packet that indicates the subscribe acknowledgment and confirms
    the receipt and processing of the `SUBSCRIBE` packet. The `SUBACK` packet will
    include the same packet identifier (`PacketId`) in the header that was received
    in the `SUBSCRIBE` packet. The `SUBACK` packet will include one return code for
    each pair of a topic filter and the desired QoS level received in the `SUBSCRIBE`
    packet. The number of return codes will match the number of topic filters included
    in the `SUBSCRIBE` packet. The following table shows the possible values for these
    return codes. The first three return codes indicate a successful subscription
    and each value specifies the maximum QoS that can be delivered based on the requested
    QoS and the possibilities that the MQTT server has to grant the requested QoS:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: MQTT服务器将处理有效的“SUBSCRIBE”数据包，并将用“SUBACK”数据包做出响应，该数据包指示订阅确认并确认了“SUBSCRIBE”数据包的接收和处理。
    “SUBACK”数据包将在标头中包括与在“SUBSCRIBE”数据包中收到的“PacketId”相同的数据包标识符（“PacketId”）。 “SUBACK”数据包将包括每对主题过滤器和在“SUBSCRIBE”数据包中收到的所需QoS级别的返回代码。返回代码的数量将与“SUBSCRIBE”数据包中包含的主题过滤器的数量相匹配。以下表显示了这些返回代码的可能值。前三个返回代码表示成功订阅，每个值都指定了根据请求的QoS和MQTT服务器授予请求的QoS的可能性来交付的最大QoS：
- en: '| **ReturnCode value** | **Description** |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| **ReturnCode value** | **Description** |'
- en: '| `0` | Successfully subscribed with a maximum QoS of 0 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `0` | 成功订阅，最大QoS为0 |'
- en: '| `1` | Successfully subscribed with a maximum QoS of 1 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `1` | 成功订阅，最大QoS为1 |'
- en: '| `2` | Successfully subscribed with a maximum QoS of 2 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `2` | 成功订阅，最大QoS为2 |'
- en: '| `128` | Failed to subscribe |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `128` | 订阅失败 |'
- en: If the subscription was successful, the MQTT server will start sending every
    published message that matches the topic filters specified in the subscription
    to the MQTT client with the QoS specified in the return code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果订阅成功，MQTT服务器将开始将与订阅中指定的主题过滤器匹配的每条发布的消息以指定的QoS发送到MQTT客户端。
- en: 'The following diagram shows the interaction between an MQTT client and an MQTT
    server to subscribe to one or many topic filters:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了MQTT客户端与MQTT服务器之间订阅一个或多个主题过滤器的交互：
- en: '![](assets/62ac841c-d673-4f39-9f9e-1e5b93dd0866.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/62ac841c-d673-4f39-9f9e-1e5b93dd0866.png)'
- en: Publishing messages with a command-line tool
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行工具发布消息
- en: 'We will use the `mosquitto_pub` command-line utility included in Mosquitto
    to generate a simple MQTT client that publishes a message to a topic. Open a Terminal
    in macOS or Linux, or a Command Prompt in Windows, go to the directory in which
    Mosquitto is installed, and run the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Mosquitto中包含的“mosquitto_pub”命令行实用程序生成一个简单的MQTT客户端，该客户端将向主题发布一条消息。在macOS或Linux中打开终端，或在Windows中打开命令提示符，转到安装Mosquitto的目录，并运行以下命令：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The previous command will create an MQTT client that will establish a connection
    with the local MQTT server and then will make the client publish a message to
    the topic specified after the `-t` option: `sensors/octocopter01/altitude`. We
    specify the payload for the message after the `-m` option: `"25 f"`. We specify
    the version of the MQTT protocol that we want to use when the client establishes
    the connection with `-V mqttv311`. This way, we indicate to the MQTT server that
    we want to use MQTT version 3.11\. We specify the `-d` option to enable debug
    messages that will allow us to understand what happens under the hood. We will
    analyze additional options for connection and publication later.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建一个MQTT客户端，该客户端将与本地MQTT服务器建立连接，然后使客户端发布一条消息到“-t”选项后指定的主题：“sensors/octocopter01/altitude”。我们在“-m”选项后指定消息的有效载荷：“"25
    f"”。当客户端建立连接时，我们指定要使用的MQTT协议的版本为“-V mqttv311”。这样，我们告诉MQTT服务器我们要使用MQTT版本3.11。我们指定“-d”选项以启用调试消息，这将使我们能够了解底层发生了什么。稍后我们将分析连接和发布的其他选项。
- en: 'The Terminal or Command Prompt window will display debug messages similar to
    the following lines. Take into account that the generated `ClientId` will be different
    from the one shown after `Client mosqpub|17912-LAPTOP-5D`. After publishing the
    message, the client disconnects:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 终端或命令提示符窗口将显示类似以下行的调试消息。请注意，生成的“ClientId”将与“Client mosqpub|17912-LAPTOP-5D”后显示的不同。发布消息后，客户端将断开连接：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Publishing messages with a GUI tool
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GUI工具发布消息
- en: 'Now, we will use the MQTT.fx GUI utility to generate another MQTT client that
    publishes another message to the same topic, sensors/octocopter01/altitude. Follow
    these steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用MQTT.fx GUI实用程序生成另一个MQTT客户端，该客户端将发布另一条消息到相同的主题“sensors/octocopter01/altitude”。按照以下步骤进行：
- en: Go to the MQTT.fx window in which you established a connection and subscribed
    to a topic.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到您建立连接并订阅主题的MQTT.fx窗口。
- en: Click Publish and enter `sensors/octocopter01/altitude` in the dropdown at the
    left-hand side of the Publish button.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“Publish”，并在发布按钮左侧的下拉菜单中输入“sensors/octocopter01/altitude”。
- en: 'Enter the following text in the textbox below the Publish button: `32 f`, as
    shown in the following screenshot:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发布按钮下的文本框中输入以下文本：`32 f`，如下图所示：
- en: '![](assets/755c6b63-1d41-4e44-baf3-f76cd78e484f.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/755c6b63-1d41-4e44-baf3-f76cd78e484f.png)'
- en: Then, click the Publish button. MQTT.fx will publish the entered text to the
    specified topic.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，单击发布按钮。 MQTT.fx将发布输入的文本到指定的主题。
- en: 'If you don''t want to work with the MQTT.fx utility, you can run another `mosquitto_pub`
    command to generate another MQTT client that publishes a message to the topic.
    You just need to open another Terminal in macOS or Linux, or another Command Prompt
    in Windows, go to the directory in which Mosquitto is installed, and run the following
    command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用MQTT.fx实用程序，可以运行另一个`mosquitto_pub`命令，以生成另一个发布消息到主题的MQTT客户端。您只需在macOS或Linux中打开另一个终端，或在Windows中打开另一个命令提示符，转到Mosquitto安装的目录，并运行以下命令：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, go back to the Terminal or Command Prompt window in which you executed
    the `mosquitto_sub` command and subscribed to the `sensors/octocopter01/atitude`
    topic. You will see lines similar to the following ones:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，返回到您执行`mosquitto_sub`命令并订阅`sensors/octocopter01/atitude`主题的终端或命令提示符窗口。您将看到类似以下内容的行：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we clean up debug messages that start with the Client prefix, we will see
    just the next two lines. These lines show the payloads for the two messages that
    we received as a result of our subscription to the `sensors/octocopter01/altitude`
    topic:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们清除以Client前缀开头的调试消息，我们将只看到接下来的两行。这些行显示了我们订阅`sensors/octocopter01/altitude`主题后收到的两条消息的有效负载：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Go to the MQTT.fx window and click Subscribe. You will see 2 at the right-hand
    side of the title for the topic filter used to subscribe in the panel located
    at the left-hand side of the window. MQTT.fx is telling you that you have received
    two messages in the `sensors/octocopter01/altitude` topic. Click on this panel
    and MQTT.fx will display all the received messages on the right-hand side of the
    panel. MQTT.fx will display a number at the right-hand side of each message to
    specify the message number since we started the subscription to the topic filter.
    Click on each message and MQTT.fx will display the QoS level for the message (0),
    the date and time it was received, and the payload for the message in the default
    plain string format. The following screenshot shows the payload for the second
    message that has been received by the subscriber generated by MQTT.fx:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 转到MQTT.fx窗口，单击订阅。您将在窗口左侧的面板中看到用于订阅的主题过滤器标题右侧的2。MQTT.fx告诉您，您已在`sensors/octocopter01/altitude`主题中收到两条消息。单击此面板，MQTT.fx将在面板右侧显示所有收到的消息。
    MQTT.fx将在每条消息的右侧显示一个数字，以指定自订阅主题过滤器以来的消息编号。单击每条消息，MQTT.fx将显示消息的QoS级别（0），接收日期和时间，以及消息的默认纯文本格式的有效负载。以下屏幕截图显示了订阅者由MQTT.fx生成的已收到的第二条消息的有效负载：
- en: '![](assets/041085e3-85c0-4701-9743-929abf57a7f8.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/041085e3-85c0-4701-9743-929abf57a7f8.png)'
- en: 'We created two publishers and each of them published a message to the same
    topic: `sensors/octocopter01/altitude`. The two subscribers for this topic received
    both messages. Now, we will understand what happens under the hood when a client
    publishes a message to a topic.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了两个发布者，每个发布者都向相同的主题`sensors/octocopter01/altitude`发布了一条消息。此主题的两个订阅者都收到了这两条消息。现在，我们将了解当客户端向主题发布消息时发生了什么。
- en: 'The MQTT client that has already established a connection sends a `PUBLISH`
    packet to the MQTT server with a header that includes the following fields and
    flags. We need to understand the meaning of these fields and flags because we
    will be able to specify some of their values when we work with MQTT tools and
    MQTT client libraries in Python:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 已经建立连接的MQTT客户端向MQTT服务器发送一个包含以下字段和标志的`PUBLISH`数据包的标头。我们需要理解这些字段和标志的含义，因为当我们使用MQTT工具和Python中的MQTT客户端库时，我们将能够指定其中一些值：
- en: '`PacketId`: If the QoS level is equal to 0, the value for this field will be
    0 or it won''t be present. If the QoS level is equal to 1 or 2, the packet identifier
    will have a number value to identify the packet and make it possible to identify
    the responses related to this packet.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PacketId`：如果QoS级别等于0，则此字段的值将为0或不存在。如果QoS级别等于1或2，则数据包标识符将具有一个数字值，用于标识数据包并使其能够识别与此数据包相关的响应。'
- en: '`Dup`: If the QoS level is equal to 0, the value for this field will be 0\.
    If the QoS level is equal to 1 or 2, the MQTT client library or the MQTT server
    can resend a message that was previously published by the client when the subscribers
    haven''t acknowledged the first message. Whenever there is an attempt to resend
    a message that has already been published, the value for the Dup flag must be
    1 or `True`.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dup`：如果QoS级别等于0，则此字段的值将为0。如果QoS级别等于1或2，则MQTT客户端库或MQTT服务器可以在订阅者未确认第一条消息时重新发送先前由客户端发布的消息。每当尝试重新发送已经发布的消息时，Dup标志的值必须为1或`True`。'
- en: '`QoS`: Specifies the QoS level for the message. We will dive deep into the
    quality of service level for messages, and their relationship with many other
    flags, later. So far, we have been working with QoS level 0.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QoS`：指定消息的QoS级别。我们将深入研究消息的服务质量级别，以及它们与许多其他标志的关系。到目前为止，我们一直在使用QoS级别0。'
- en: '`Retain`: If the value for this flag is set to `1` or `True`, the MQTT server
    will store the message with its specified QoS level. Whenever new MQTT clients
    subscribe to a topic filter that matches the topic for the stored or retained
    message, the last stored message for this topic will be sent to the new subscriber.
    If the value for this flag is set to `0` or `False`, the MQTT server won''t store
    the message and won''t replace a retained message with the same topic if there
    is one message retained for this topic.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Retain`：如果此标志的值设置为`1`或`True`，MQTT服务器将使用指定的QoS级别存储消息。每当新的MQTT客户端订阅与存储或保留消息的主题匹配的主题过滤器时，将向新订阅者发送此主题的最后存储的消息。如果此标志的值设置为`0`或`False`，MQTT服务器将不会存储消息，并且不会替换具有相同主题的保留消息。'
- en: '`TopicName`: A string with the topic name to which the message must be published.
    Topic names have a hierarchy structure where slashes (`/`) are used as delimiters.
    In our examples, the value for `TopicName` was `"sensors/octocopter01/altitude"`.
    We will analyze best practices for topic names later.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TopicName`：要发布消息的主题名称的字符串。主题名称具有层次结构，斜杠(`/`)用作分隔符。在我们的示例中，“TopicName”的值是`"sensors/octocopter01/altitude"`。我们稍后将分析主题名称的最佳实践。'
- en: The payload contains the actual message that the MQTT client wants the MQTT
    server to publish. MQTT is data-agnostic, and therefore we can send any binary
    data and we don't have restrictions such as those imposed by JSON or XML. Of course,
    we can use these or others to organize payloads if we wish. In our examples, we
    sent a string that included a number that represented the altitude, followed by
    a space, and an `"f"` that indicates the unit of measurement is `feet`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有效载荷包含MQTT客户端希望MQTT服务器发布的实际消息。MQTT是数据无关的，因此我们可以发送任何二进制数据，我们不受JSON或XML等所施加的限制。当然，如果愿意，我们可以使用这些或其他方式来组织有效载荷。在我们的示例中，我们发送了一个包含表示海拔的数字，后跟一个空格和一个表示单位为`feet`的`"f"`的字符串。
- en: The MQTT server will read a valid `PUBLISH` packet and it will respond with
    a packet only for QoS levels greater than 0\. If the QoS level is 0, the MQTT
    server will not respond. The MQTT server will identify all subscribers whose subscribed
    topic matches the topic name specified for the message and the server will publish
    the message to these clients.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: MQTT服务器将读取有效的`PUBLISH`数据包，并且只会对大于0的QoS级别做出响应。如果QoS级别为0，则MQTT服务器不会做出响应。MQTT服务器将识别所有订阅主题与消息指定的主题名称匹配的订阅者，并将消息发布给这些客户端。
- en: 'The following diagram shows the interaction between an MQTT client and an MQTT
    server to publish a message with a QoS level of 0:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了MQTT客户端与MQTT服务器之间以QoS级别0发布消息的交互：
- en: '![](assets/a27b8136-4eda-4a7e-8a36-375ac322adaf.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a27b8136-4eda-4a7e-8a36-375ac322adaf.png)'
- en: The other QoS levels have a different flow with an additional interaction between
    the publisher and the MQTT server, and increased overheads that we will analyze
    later.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 其他QoS级别具有不同的流程，发布者和MQTT服务器之间有额外的交互，并增加了我们稍后将分析的开销。
- en: Unsubscribing from topics with a GUI tool
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GUI工具取消订阅主题
- en: 'Whenever we don''t want a subscriber to receive more messages whose destination
    topic name matches one or more topic filters, the subscriber can send a request
    to unsubscribe to a list of topic filters to the MQTT server. Obviously, unsubscribing
    from topic filters is the opposite of subscribing to topic filters. We will use
    the MQTT.fx GUI utility to unsubscribe the MQTT client from the `sensors/octocopter01/altitude`
    topic. Follow these steps:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们不希望订阅者接收更多与一个或多个主题过滤器匹配的目标主题名称的消息时，订阅者可以向MQTT服务器发送取消订阅到主题过滤器列表的请求。显然，取消订阅主题过滤器与订阅主题过滤器相反。我们将使用MQTT.fx
    GUI实用程序从`sensors/octocopter01/altitude`主题中取消订阅MQTT客户端。按照以下步骤：
- en: Go to the MQTT.fx window in which you established a connection and subscribed
    to a topic.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到您建立连接并订阅主题的MQTT.fx窗口。
- en: Click Subscribe.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“订阅”。
- en: 'Click on the panel that displays the `sensors/octocopter01/altitude` topic
    name on the left-hand side of the window. Then, click on the Unsubscribe button
    located in this panel. The following screenshot shows this button:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击窗口左侧显示`sensors/octocopter01/altitude`主题名称的面板。然后，单击此面板中的“取消订阅”按钮。以下屏幕截图显示了此按钮：
- en: '![](assets/53c9f43c-2184-4463-9e55-7f9182472def.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/53c9f43c-2184-4463-9e55-7f9182472def.png)'
- en: MQTT.fx will unsubscribe the client from the `sensors/octocopter01/altitude`
    topic, and therefore the client won't receive any new messages published to the
    `sensors/octocopter01/altitude` topic.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MQTT.fx将取消订阅客户端的`sensors/octocopter01/altitude`主题，因此客户端将不会接收发布到`sensors/octocopter01/altitude`主题的任何新消息。
- en: 'Now, we will use the MQTT.fx GUI utility to make the MQTT client publish another
    message to the `sensors/octocopter01/altitude`. Follow these steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用MQTT.fx GUI实用程序使MQTT客户端向`sensors/octocopter01/altitude`发布另一条消息。按照以下步骤：
- en: Go to the MQTT.fx window in which you established a connection and subscribed
    to a topic.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到您建立连接并订阅主题的MQTT.fx窗口。
- en: Click Publish and enter `sensors/octocopter01/altitude` in the dropdown at the
    left-hand side of the Publish button.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“发布”并在“发布”按钮左侧的下拉菜单中输入`sensors/octocopter01/altitude`。
- en: Then, click the Publish button. MQTT.fx will publish the entered text to the
    specified topic.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，单击“发布”按钮。MQTT.fx将向指定的主题发布输入的文本。
- en: 'Enter the following text in the textbox below the Publish button: `37 f`, as
    shown in the following screenshot:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发布按钮下方的文本框中输入以下文本：`37 f`，如下面的屏幕截图所示：
- en: '![](assets/dd889680-10a8-4ad5-a871-1632586b5db3.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dd889680-10a8-4ad5-a871-1632586b5db3.png)'
- en: 'If you don''t want to work with the MQTT.fx utility, you can run a `mosquitto_pub`
    command to generate another MQTT client that publishes a message to the topic.
    You just need to open another Terminal in macOS or Linux, or another Command Prompt
    in Windows, go to the directory in which Mosquitto is installed, and run the following
    command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用 MQTT.fx 实用程序，您可以运行`mosquitto_pub`命令生成另一个 MQTT 客户端，以向主题发布消息。您只需要在 macOS
    或 Linux 中打开另一个终端，或者在 Windows 中打开另一个命令提示符，转到 Mosquitto 安装的目录，并运行以下命令：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, go back to the MQTT.fx window and click Subscribe to check the messages
    that have been received. The client has unsubscribed from the `sensors/octocopter01/altitude`
    topic before we published a new message to this topic, and therefore the recently
    published message with a payload of  `"37 f"` isn't displayed.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，返回到 MQTT.fx 窗口，点击订阅以检查已接收的消息。在我们发布新消息到`sensors/octocopter01/altitude`主题之前，客户端已经取消订阅了该主题，因此最近发布的带有负载`"37
    f"`的消息没有显示出来。
- en: 'Go back to the Terminal or Command Prompt window in which you executed the
    `mosquitto_sub` command and subscribed to the `sensors/octocopter01/atitude` topic.
    You will see lines similar to the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到您执行`mosquitto_sub`命令并订阅`sensors/octocopter01/atitude`主题的终端或命令提示符窗口。您将看到类似以下的行：
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This client is still subscribed to the `sensors/octocopter01/altitude` topic,
    and therefore it received the message with the payload of `"37 f"`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该客户端仍然订阅`sensors/octocopter01/altitude`主题，因此它接收到了负载为`"37 f"`的消息。
- en: The MQTT client sends an `UNSUBSCRIBE` packet to the MQTT server with a packet
    identifier (`PacketId`) in the header and one or more topic filters in the payload.
    The main difference with a `SUBSCRIBE` packet is that it isn't necessary to include
    the QoS level for each topic filter because the MQTT client just wants to unsubscribe.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: MQTT 客户端向 MQTT 服务器发送一个带有头部中的数据包标识符（`PacketId`）和负载中的一个或多个主题过滤器的`UNSUBSCRIBE`数据包。与`SUBSCRIBE`数据包的主要区别在于，对于每个主题过滤器并不需要包括
    QoS 等级，因为 MQTT 客户端只是想要取消订阅。
- en: After an MQTT client unsubscribes from one or more topic filters, the MQTT server
    still keeps the connection open; the subscriptions to topic filters that don't
    match the topic filters specified in the `UNSUBSCRIBE` packet payload will continue
    working.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当 MQTT 客户端取消订阅一个或多个主题过滤器后，MQTT 服务器仍然保持连接打开；与`UNSUBSCRIBE`数据包中指定的主题过滤器不匹配的主题过滤器的订阅将继续工作。
- en: Hence, a single `UNSUBSCRIBE` packet can ask the MQTT server to unsubscribe
    a client from many topics. The `UNSUBSCRIBE` packet must include at least one
    topic filter in the payload to comply with the protocol.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一个`UNSUBSCRIBE`数据包可以要求 MQTT 服务器取消订阅客户端的多个主题。`UNSUBSCRIBE`数据包必须至少包括一个主题过滤器的负载，以符合协议。
- en: In the previous example, in which we asked the MQTT server to unsubscribe, we
    used a specific topic name as the value for the topic filter, and therefore we
    requested the MQTT server to unsubscribe from a single topic. As previously mentioned,
    we will learn about the use of wildcards in topic filters later.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们要求 MQTT 服务器取消订阅时，我们使用了特定的主题名称作为主题过滤器的值，因此我们请求 MQTT 服务器取消订阅单个主题。如前所述，我们将在后面学习主题过滤器中通配符的使用。
- en: The packet identifier will have a number value to identify the packet and make
    it possible to identify the response related to this `UNSUBSCRIBE` packet. The
    MQTT server will process a valid `UNSUBSCRIBE` packet and it will respond with
    an `UNSUBACK`  packet, which indicates the unsubscribe acknowledgment and confirms
    the receipt and processing of the `UNSUBSCRIBE` packet. The `UNSUBACK` packet
    will include the same packet identifier (`PacketId`) in the header that was received
    in the `UNSUBSCRIBE` packet.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 数据包标识符将具有一个数字值，用于标识数据包并使其能够识别与此`UNSUBSCRIBE`数据包相关的响应。MQTT 服务器将处理有效的`UNSUBSCRIBE`数据包，并将以`UNSUBACK`数据包作出响应，该数据包表示取消订阅的确认，并确认了`UNSUBSCRIBE`数据包的接收和处理。`UNSUBACK`数据包将在头部中包含与`UNSUBSCRIBE`数据包中接收到的相同的数据包标识符（`PacketId`）。
- en: The MQTT server will remove any topic filter that exactly matches any of the
    specified topic filters in the `UNSUBSCRIBE` packet's payload for the specific
    client that sent the packet. The topic filter match must be exact to be deleted.
    After the MQTT server deletes a topic filter from the subscription list for the
    client, the server stops adding new messages to be published to the client. Only
    messages that have already started delivery to the client with QoS levels of 1
    or 2 will be published to the client. In addition, the server might publish existing
    messages that have been buffered for their distribution to the subscriber.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: MQTT 服务器将删除`UNSUBSCRIBE`数据包的负载中指定的特定客户端的订阅列表中完全匹配的任何主题过滤器。主题过滤器匹配必须是精确的才能被删除。在
    MQTT 服务器从客户端的订阅列表中删除主题过滤器后，服务器将停止向客户端添加要发布的新消息。只有已经以 QoS 等级为 1 或 2 开始传递到客户端的消息将被发布到客户端。此外，服务器可能会发布已经缓冲以分发给订阅者的现有消息。
- en: 'The following diagram shows the interaction between an MQTT client and an MQTT
    server in unsubscribing from one or many topic filters:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了 MQTT 客户端与 MQTT 服务器在取消订阅一个或多个主题过滤器时的交互：
- en: '![](assets/5dedc49e-0158-46ca-b64f-07262736f3ce.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5dedc49e-0158-46ca-b64f-07262736f3ce.png)'
- en: Learning best practices for topics
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习主题的最佳实践
- en: We already know that MQTT allows us to publish messages on topics. A publisher
    always has to specify the topic name to which a message will be published. The
    easiest way to understand topic names in MQTT is to think about them as paths
    in a file system.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道 MQTT 允许我们在主题上发布消息。发布者必须始终指定要发布消息的主题名称。理解 MQTT 中主题名称的最简单方法是将它们视为文件系统中的路径。
- en: If we have to save dozens of files that have information about different types
    of sensor for a diverse number of drones, we can create a hierarchy of directories
    or folders to organize all the files that we will save. We can create a directory
    named `sensors`, then one sub-directory for each drone, such as `octocopter01`,
    and finally a sub-directory with the sensor name, such as `altitude`. The path
    in macOS or Linux will be `sensors/octocopter01/altitude` because these operating
    systems use a forward slash (`/`) as a delimiter. In Windows, the path will be
    `sensors\drone\altitude` because this operating system uses a backslash (`\`)
    as a delimiter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要保存数十个文件，这些文件包含有关不同类型传感器的信息，用于各种无人机，我们可以创建一个目录层次结构来组织我们将保存的所有文件。我们可以创建一个名为`sensors`的目录，然后为每个无人机创建一个子目录，比如`octocopter01`，最后再创建一个传感器名称的子目录，比如`altitude`。在
    macOS 或 Linux 中的路径将是`sensors/octocopter01/altitude`，因为这些操作系统使用正斜杠(`/`)作为分隔符。在
    Windows 中，路径将是`sensors\drone\altitude`，因为这个操作系统使用反斜杠(`\`)作为分隔符。
- en: Then, we will save the files that have information about the altitude sensor
    for the drone named `octocopter01` in the created path. Instead of saving files
    in a path, we can think about publishing a message to a path and using the same
    mechanism we use to organize files in paths to arrange messages in topics.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将保存有关名为`octocopter01`的无人机的高度传感器信息的文件在创建的路径中。我们可以考虑发布消息到一个路径，使用与我们用于组织文件路径的相同机制来安排主题中的消息。
- en: Instead of directories or folders, a topic has topic levels, specifically a
    hierarchy of topic levels, and slashes (`/`) are used as delimiters, that is,
    topic-level separators. If we use `sensors/octocopter01/altitude` as the topic
    name, `sensors` is the first topic level, `octocopter01` is the second topic level,
    and `altitude` is the third topic level.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 与目录或文件夹不同，主题具有主题级别，具体是主题级别的层次结构，并且斜杠(`/`)被用作分隔符，即主题级别分隔符。如果我们将`sensors/octocopter01/altitude`用作主题名称，`sensors`是第一个主题级别，`octocopter01`是第二个主题级别，`altitude`是第三个主题级别。
- en: Topic names are case-sensitive, and therefore `sensors/octocopter01/altitude`
    is different from `sensors/Octocopter01/altitude`, `Sensors/octocopter01/altitude`,
    and `Sensors/Octocopter01/Altitude`. In fact, the four strings will be considered
    as four individual topic names. We must make sure we select a case scheme for
    the topic names and we use it for all topic names and topic filters.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 主题名称区分大小写，因此`sensors/octocopter01/altitude`与`sensors/Octocopter01/altitude`、`Sensors/octocopter01/altitude`和`Sensors/Octocopter01/Altitude`是不同的。实际上，这四个字符串将被视为四个单独的主题名称。我们必须确保为主题名称选择一个大小写方案，并将其用于所有主题名称和主题过滤器。
- en: 'We can use any UTF-8 character in topic names, with the exception of the two
    wildcard characters that we will analyze later: the plus sign (`+`) and hash (`#`).
    Hence, we must avoid `+` and `#` in the topic names. However, it is a good practice
    to restrict the character set to avoid unexpected problems with client libraries.
    For example, we can avoid accents and characters that are not common in English,
    as we do whenever we build URLs. It is possible to use these characters but you
    can definitely  face issues when using them.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在主题名称中使用任何 UTF-8 字符，除了我们稍后将分析的两个通配符字符：加号(`+`)和井号(`#`)。因此，我们必须避免在主题名称中使用`+`和`#`。然而，限制字符集以避免客户端库出现意外问题是一个好的做法。例如，我们可以避免使用重音符号和在英语中不常见的字符，就像我们在构建
    URL 时所做的那样。虽然可以使用这些字符，但在使用它们时可能会遇到问题。
- en: We should avoid creating topics starting with the dollar sign (`$`) because
    many MQTT servers publish statistics data related to servers in topics that start
    with `$`. Specifically, the first topic level is `$SYS`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该避免创建以美元符号(`$`)开头的主题，因为许多 MQTT 服务器会在以`$`开头的主题中发布与服务器相关的统计数据。具体来说，第一个主题级别是`$SYS`。
- en: We must maintain consistency when sending messages to different topic names
    as we do when we save files in different paths. For example, if we want to publish
    the altitude for a drone named `hexacopter20`, we will use `sensors/hexacopter20/altitude`.
    We must use the same topic levels that we used for the same goal for `octocopter01`
    and just change the drone name from `octocopter01` to `hexacopter20`. It would
    be a really bad practice to use a topic with a different structure or an inconsistent
    case, such as `altitude/sensors/hexacopter20` or `Sensors/Hexacopter20/Altitude`.
    We have to take into account that we can subscribe to multiple topics by using
    topic filters, and therefore it is very important to create topic names accordingly.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在发送消息到不同主题名称时，我们必须保持一致性，就像我们在不同路径中保存文件时一样。例如，如果我们想要发布名为`hexacopter20`的无人机的高度，我们将使用`sensors/hexacopter20/altitude`。我们必须使用与为`octocopter01`相同目标使用的相同主题级别，只需将无人机名称从`octocopter01`更改为`hexacopter20`。使用不同结构或不一致大小写的主题将是一个非常糟糕的做法，比如`altitude/sensors/hexacopter20`或`Sensors/Hexacopter20/Altitude`。我们必须考虑到我们可以通过使用主题过滤器订阅多个主题，因此创建主题名称非常重要。
- en: Understanding MQTT wildcards
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 MQTT 通配符
- en: 'When we analyzed the subscription operation, we learned that an MQTT client
    can subscribe to one or more topic filters. If we specify a topic name as a topic
    filter, we will only subscribe to a single topic. We can take advantage of the
    following two wildcards to create topic filters that subscribe to all the topics
    that match the filter:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们分析订阅操作时，我们了解到 MQTT 客户端可以订阅一个或多个主题过滤器。如果我们将主题名称指定为主题过滤器，我们将只订阅一个单一主题。我们可以利用以下两个通配符来创建订阅与过滤器匹配的所有主题的主题过滤器：
- en: '**Plus sign** (`+`): This is a single-level wildcard that matches any name
    for a specific topic level. We can use this wildcard instead of specifying a name
    for any topic level in the topic filter.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加号**(`+`)：这是一个单级通配符，匹配特定主题级别的任何名称。我们可以在主题过滤器中使用这个通配符，代替指定主题级别的名称。'
- en: '**Hash** (`#`): This is a multilevel wildcard that we can use only at the end
    of a topic filter, as the last level, and it matches any topic whose first levels
    are the same as the topic levels specified at the left-hand side of the `#` symbol.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**井号** (`#`)：这是一个多级通配符，我们只能在主题过滤器的末尾使用它，作为最后一级，并且它匹配任何主题，其第一级与`#`符号左侧指定的主题级别相同。'
- en: 'For example, if we want to receive all the messages related to altitude for
    all the drones, we can use the `+` single-level wildcard instead of a specific
    drone name. We can use the following topic filter: `sensors/+/altitude`.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想接收所有无人机海拔相关的消息，我们可以使用`+`单级通配符，而不是特定的无人机名称。我们可以使用以下主题过滤器：`sensors/+/altitude`。
- en: 'If we publish messages to the following topics, the subscriber that used the
    `sensors/+/altitude` topic filter will receive all of them:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们发布消息到以下主题，使用`sensors/+/altitude`主题过滤器的订阅者将会收到所有这些消息：
- en: '`sensors/octocopter01/altitude`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/octocopter01/altitude`'
- en: '`sensors/hexacopter20/altitude`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/hexacopter20/altitude`'
- en: '`sensors/superdrone01/altitude`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/superdrone01/altitude`'
- en: '`sensors/thegreatestdrone/altitude`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/thegreatestdrone/altitude`'
- en: 'The subscriber to the `sensors/+/altitude` topic filter won''t receive messages
    sent to any of the following topics because they won''t match the topic filter:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sensors/+/altitude`主题过滤器的订阅者将不会收到发送到以下任何主题的消息，因为它们不匹配主题过滤器：
- en: '`sensors/octocopter01/speed/rotor/1`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/octocopter01/speed/rotor/1`'
- en: '`sensors/superdrone01/speed/rotor/2`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/superdrone01/speed/rotor/2`'
- en: '`sensors/superdrone01/remainingbattery`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/superdrone01/remainingbattery`'
- en: 'If we want to receive all the messages related to all the sensors for the drone
    named `octocopter01`, we can use the `#` multilevel wildcard after the drone name
    and the slash (`/`). We can use the following topic filter: `sensors/octocopter01/#`.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想接收所有名为`octocopter01`的无人机所有传感器相关的消息，我们可以在无人机名称后使用`#`多级通配符和斜杠(`/`)。我们可以使用以下主题过滤器：`sensors/octocopter01/#`。
- en: 'If we publish messages to the following topics, the subscriber that used the
    `sensors/octocopter01/#` topic filter will receive all of them:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们发布消息到以下主题，使用`sensors/octocopter01/#`主题过滤器的订阅者将会收到所有这些消息：
- en: '`sensors/octocopter01/altitude`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/octocopter01/altitude`'
- en: '`sensors/octocopter01/speed/rotor/1`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/octocopter01/speed/rotor/1`'
- en: '`sensors/octocopter01/speed/rotor/2`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/octocopter01/speed/rotor/2`'
- en: '`sensors/octocopter01/speed/rotor/3`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/octocopter01/speed/rotor/3`'
- en: '`sensors/octocopter01/speed/rotor/4`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/octocopter01/speed/rotor/4`'
- en: '`sensors/octocopter01/remainingbattery`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/octocopter01/remainingbattery`'
- en: We used a multilevel wildcard, and therefore, irrespective of the additional
    topic levels after `sensors/octocopter01/`, we will receive all of them.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了多级通配符，因此，无论`sensors/octocopter01/`后面有多少额外的主题级别，我们都会收到所有这些消息。
- en: 'The subscriber to the `sensors/octocopter01/#` topic filter won''t receive
    messages sent to any of the following topics because they won''t match the topic
    filter. None of the following has `sensors/octocopter01/` as a prefix, and therefore
    they don''t match the topic filter:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sensors/octocopter01/#`主题过滤器的订阅者将不会收到发送到以下任何主题的消息，因为它们不匹配主题过滤器。以下任何主题都没有`sensors/octocopter01/`作为前缀，因此它们不匹配主题过滤器：
- en: '`sensors/hexacopter02/altitude`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/hexacopter02/altitude`'
- en: '`sensors/superdrone01/altitude`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/superdrone01/altitude`'
- en: '`sensors/thegreatestdrone/altitude`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/thegreatestdrone/altitude`'
- en: '`sensors/drone02/speed/rotor/1`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/drone02/speed/rotor/1`'
- en: '`sensors/superdrone02/speed/rotor/2`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/superdrone02/speed/rotor/2`'
- en: '`sensors/superdrone02/remainingbattery`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensors/superdrone02/remainingbattery`'
- en: Obviously, we must be careful when we use any wildcard because we might be subscribing
    to a huge number of topics with a single topic filter. We have to avoid subscribing
    to topics that aren't of interest for the client to avoid wasting unnecessary
    bandwidth and server resources.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，当我们使用通配符时，必须小心，因为我们可能会使用单个主题过滤器订阅大量主题。我们必须避免订阅对客户端不感兴趣的主题，以避免浪费不必要的带宽和服务器资源。
- en: We will use these wildcards in subscriptions later to analyze how different
    QoS levels work with MQTT.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后我们将在订阅中使用这些通配符，以分析不同的QoS级别如何与MQTT一起工作。
- en: Learning about the different QoS levels
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习不同的QoS级别
- en: Now that we understand how connection, subscription, and publication work in
    combination with topic names and topic filters with wildcards, we can dive deep
    into the QoS levels. So far, we have analyzed how both subscription and publication
    work with a QoS level equal to 0\. Now, we will understand what this number means
    and how things work when we use the other available QoS levels for publication
    and subscription.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了连接、订阅和发布如何与主题名称和带通配符的主题过滤器结合使用，我们可以深入了解QoS级别。到目前为止，我们已经分析了订阅和发布如何使用QoS级别等于0。现在，我们将了解这个数字的含义，以及当我们使用其他可用的发布和订阅QoS级别时，事情是如何工作的。
- en: Remember that publication involves publishing from the MQTT client to the MQTT
    server and then from the server to the subscribed client. It is very important
    to understand that we can publish with a QoS level and subscribe with another
    QoS level. Hence, there is a QoS level for the publish process between the publisher
    and the MQTT server and another QoS level for the publish process between the
    MQTT server and the subscriber. We will use sender and receiver to identify the
    parties involved in message delivery for the different QoS levels. In the publish
    process between the publisher and the MQTT server, the publisher will be the sender
    and the MQTT server the receiver. In the publish process between the MQTT server
    and the subscriber, the sender will be the MQTT server and the receiver will be
    the subscriber.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，发布涉及从MQTT客户端到MQTT服务器的发布，然后从服务器到订阅的客户端。非常重要的是要理解，我们可以使用一个QoS级别进行发布，使用另一个QoS级别进行订阅。因此，发布过程中有一个QoS级别，用于发布者和MQTT服务器之间的过程，另一个QoS级别用于MQTT服务器和订阅者之间的发布过程。我们将使用发送者和接收者来识别参与不同QoS级别消息传递的各方。在发布者和MQTT服务器之间的发布过程中，发布者将是发送者，MQTT服务器将是接收者。在MQTT服务器和订阅者之间的发布过程中，发送者将是MQTT服务器，接收者将是订阅者。
- en: 'Based on the QoS level, we have differences in the meaning of a successfully
    delivered message in the MQTT protocol between the involved parties. The QoS level
    is the agreement between a sender and a receiver of a message about the guarantees
    of actually delivering the message. These warranties might include the number
    of times that a message might arrive and the possibility (or not) of duplicates.
    MQTT supports the following three possible QoS levels:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 根据QoS级别，在MQTT协议中，发送方和接收方之间关于实际传递消息的保证的含义有所不同。QoS级别是关于发送方和接收方之间消息保证的协议。这些保证可能包括消息到达的次数以及重复的可能性（或不可能性）。MQTT支持以下三种可能的QoS级别：
- en: '**0, At most once delivery**: This QoS level offers the same warranty as the
    underlying TCP protocol. The message is not acknowledged by the receiver or destination.
    The sender just sends the message to the destination and nothing else happens.
    The sender neither stores nor schedules new deliveries for any messages that might
    fail to reach the destination. The key advantage of this QoS level is that it
    has the lowest possible overhead, compared to the other QoS levels.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**0，至多一次交付**：此QoS级别提供与基础TCP协议相同的保证。消息不会被接收方或目的地确认。发送方只是将消息发送到目的地，然后什么都不会发生。发送方既不存储也不安排任何可能未能到达目的地的消息的新交付。这个QoS级别的主要优势是与其他QoS级别相比，它具有最低的开销。'
- en: '**1, At least once delivery**: This QoS level adds a confirmation requirement
    to the destination that has to receive the message. This way, QoS level 1 provides
    a warranty that the message will be delivered at least once to the subscriber.
    One of the key disadvantages of this QoS level is that it might generate duplicates,
    that is, the same message might be sent more than once to the same destination.
    The sender stores the message until it receives an acknowledgment from the subscriber.
    If the sender doesn''t receive the acknowledgment within a specific time, the
    sender will publish the message again to the receiver. The final receiver must
    have the necessary logic to detect duplicates if they shouldn''t be processed
    twice.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**1，至少一次交付**：此QoS级别向目的地添加了一个必须接收消息的确认要求。因此，QoS级别1提供了消息至少一次传递给订阅者的保证。这个QoS级别的一个关键缺点是它可能会产生重复，也就是说，同一条消息可能会被发送多次到同一个目的地。发送方将消息存储，直到它收到订阅者的确认。如果发送方在特定时间内没有收到确认，它将再次向接收方发布消息。最终的接收方必须具有必要的逻辑来检测重复，如果它们不应该被处理两次的话。'
- en: '**2, Exactly once delivery**: This QoS level provides a warranty that the message
    is delivered only once to the destination. QoS level 2 has the highest overhead,
    compared to the other QoS levels. This QoS level requires two flows between the
    sender and the receiver. A message published with QoS level 2 is considered successfully
    delivered after the sender is sure that it has been successfully received once
    by the destination.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2，仅一次交付**：此QoS级别提供了消息仅一次传递到目的地的保证。与其他QoS级别相比，QoS级别2具有最高的开销。此QoS级别需要发送方和接收方之间的两个流。使用QoS级别2发布的消息在发送方确信它已被目的地成功接收一次后被视为成功传递。'
- en: Sometimes, we just want messages to be delivered with the least possible bandwidth
    usage, we have a very reliable network, and it doesn't matter if for some reason
    a few messages are lost. In these cases, QoS level 0 is the appropriate choice.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们只希望以最少的带宽使用交付消息，我们有一个非常可靠的网络，如果由于某种原因丢失了一些消息，也无所谓。在这种情况下，QoS级别0是合适的选择。
- en: In other cases, the messages are extremely important because they represent
    commands to control an IoT device, the network is unreliable, and we must make
    sure that the message reaches the destination. In addition, a duplicate command
    might generate a big problem because we don't want the IoT device to process a
    specific command twice. In these cases, QoS level 2 is going to be the appropriate
    choice.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他情况下，消息非常重要，因为它们代表了控制物联网设备的命令，网络不可靠，我们必须确保消息到达目的地。此外，重复的命令可能会产生大问题，因为我们不希望物联网设备处理特定命令两次。在这种情况下，QoS级别2将是合适的选择。
- en: If a publisher works with a QoS level higher than the QoS level specified by
    the subscriber, the MQTT server will have to downgrade the QoS level to the lowest
    level that the specific subscriber is using when it publishes the message from
    the MQTT server to this subscriber. For example, if we use QoS level 2 to publish
    a message from the publisher to the MQTT server, but one subscriber has requested
    QoS level 1 when making the subscription, the publication from the MQTT server
    to this subscriber will use QoS level 1.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发布者使用比订阅者指定的QoS级别更高的QoS级别，MQTT服务器将不得不将QoS级别降级到特定订阅者使用的最低级别，当它从MQTT服务器向该订阅者发布消息时。例如，如果我们使用QoS级别2从发布者向MQTT服务器发布消息，但一个订阅者在订阅时请求了QoS级别1，那么从MQTT服务器到该订阅者的发布将使用QoS级别1。
- en: Working with at least once delivery (QoS level 1)
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用至少一次交付（QoS级别1）
- en: First, we will use wildcards to subscribe to a topic filter with QoS level 1,
    and then we will publish one message to a topic name that will match the topic
    filter with QoS level 1\. This way, we will analyze how both publishing and subscription
    work with QoS level 1.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用通配符订阅具有QoS级别1的主题过滤器，然后我们将向与QoS级别1匹配的主题名称发布一条消息。这样，我们将分析发布和订阅如何使用QoS级别1。
- en: 'We will use the `mosquitto_sub` command-line utility included in Mosquitto
    to generate a simple MQTT client that subscribes to a topic filter with QoS level
    1 and prints all the messages it receives. Open a Terminal in macOS or Linux,
    or a Command Prompt in Windows, go to the directory in which Mosquitto is installed,
    and run the following command:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Mosquitto中包含的`mosquitto_sub`命令行实用程序生成一个简单的MQTT客户端，该客户端订阅具有QoS级别1的主题过滤器，并打印它接收到的所有消息。在macOS或Linux中打开终端，或在Windows中打开命令提示符，转到安装Mosquitto的目录，并运行以下命令：
- en: '[PRE11]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The previous command will create an MQTT client that will establish a connection
    with the local MQTT server and then will make the client subscribe to the topic
    filter specified after the `-t` option: `sensors/+/altitude`. We specify that
    we want to use QoS level 1 to subscribe to the topic filter with the `-q 1` option.
    We specify the `-d` option to enable debug messages that will allow us to understand
    what happens under the hood and the differences when compared with publishing
    a message with QoS level 0.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建一个MQTT客户端，该客户端将与本地MQTT服务器建立连接，然后将使客户端订阅在`-t`选项之后指定的主题过滤器：`sensors/+/altitude`。我们指定要使用QoS级别1来订阅`-q
    1`选项指定的主题过滤器。我们指定`-d`选项以启用调试消息，这将使我们能够了解底层发生的事情以及与使用QoS级别0发布消息时的差异。
- en: 'The Terminal or Command Prompt window will display debug messages similar to
    the following lines. Take into account that the generated `ClientId` will be different
    from the one shown after `Client mosqsub|16736-LAPTOP-5D`. Notice that `QoS: 1`
    indicates that the subscription is done with QoS level 1:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '终端或命令提示窗口将显示类似以下行的调试消息。请注意，生成的`ClientId`将与`Client mosqsub|16736-LAPTOP-5D`之后显示的不同。请注意，`QoS:
    1`表示使用QoS级别1进行订阅：'
- en: '[PRE12]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We will use the `mosquitto_pub` command-line utility included in Mosquitto
    to generate a simple MQTT client that publishes a message to a topic with QoS
    level 1 instead of the QoS level 0 that we used when we published messages before.
    Open a Terminal in macOS or Linux, or a Command Prompt in Windows, go to the directory
    in which Mosquitto is installed, and run the following command:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Mosquitto中包含的`mosquitto_pub`命令行实用程序生成一个简单的MQTT客户端，该客户端将以QoS级别1发布消息到主题，而不是我们之前发布消息时使用的QoS级别0。在macOS或Linux中打开终端，或在Windows中打开命令提示符，转到安装Mosquitto的目录，并运行以下命令：
- en: '[PRE13]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The previous command will create an MQTT client that will establish a connection
    with the local MQTT server and then will make the client publish a message to
    the topic specified after the `-t` option: `sensors/hexacopter02/altitude`. We
    specify the payload for the message after the `-m` option: `"75 f"`. We specify
    that we want to use QoS level 1 to publish the message with the `-q 1` option.
    We specify the X option to enable debug messages that will allow us to understand
    what happens under the hood and the differences when compared with publishing
    a message with QoS level 0.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建一个MQTT客户端，该客户端将与本地MQTT服务器建立连接，然后将使客户端发布一条消息到`-t`选项之后指定的主题：`sensors/hexacopter02/altitude`。我们在`-m`选项之后指定消息的有效载荷：`"75
    f"`。我们指定要使用QoS级别1来发布消息，使用`-q 1`选项。我们指定X选项以启用调试消息，这将使我们能够了解底层发生的事情以及与使用QoS级别0发布消息时的差异。
- en: 'The Terminal or Command Prompt window will display debug messages similar to
    the following lines. Take into account that the generated `ClientId` will be different
    from the one shown after `Client mosqpub|19544-LAPTOP-5D`. After publishing the
    message, the client disconnects:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 终端或命令提示窗口将显示类似以下行的调试消息。请注意，生成的`ClientId`将与`Client mosqpub|19544-LAPTOP-5D`之后显示的不同。发布消息后，客户端将断开连接：
- en: '[PRE14]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The previous lines show that the generated MQTT client sends a `PUBLISH` packet
    to the MQTT server and then receives a `PUBACK` package from the server.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 上述行显示，生成的MQTT客户端向MQTT服务器发送`PUBLISH`数据包，然后从服务器接收`PUBACK`数据包。
- en: 'Now, go back to the Terminal or Command Prompt window in which you executed
    the `mosquitto_sub` command and subscribed to the `sensors/+/atitude` topic filter.
    You will see lines similar to the following ones:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到您执行`mosquitto_sub`命令并订阅`sensors/+/atitude`主题过滤器的终端或命令提示窗口。您将看到类似以下行的内容：
- en: '[PRE15]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The previous lines show that the generated MQTT client, that is, the subscriber,
    received a `PUBLISH` packet from the MQTT server and then sent a `PUBACK` package
    to the server to acknowledge the message. If we clean up the debug messages that
    start with the `Client` prefix, we will see just the last line that shows the
    payloads for the message that we received as a result of our subscription to the
    `sensors/+/altitude` topic filter: `75 f`.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 上述行显示，生成的MQTT客户端，即订阅者，从MQTT服务器接收了`PUBLISH`数据包，然后向服务器发送了`PUBACK`数据包以确认消息。如果我们清除以`Client`前缀开头的调试消息，我们将只看到最后一行，显示我们订阅`sensors/+/altitude`主题过滤器后收到的消息的有效载荷：`75
    f`。
- en: The MQTT client that has already established a connection, that is, the publisher,
    sends a `PUBLISH` packet to the MQTT server with the header we have already described,
    QoS set to 1, and including a `PacketId` numeric value that will be unique for
    this client. At this time, the publisher will consider the `PUBLISH` packet identified
    with the `PacketId` as an unacknowledged `PUBLISH` packet.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 已经建立连接的MQTT客户端，即发布者，向MQTT服务器发送了一个`PUBLISH`数据包，其中包含我们已经描述的标头，QoS设置为1，并包括一个`PacketId`数值，该数值对于此客户端是唯一的。此时，发布者将`PacketId`标识的`PUBLISH`数据包视为未确认的`PUBLISH`数据包。
- en: The MQTT server reads a valid `PUBLISH` packet and it responds to the publisher
    with a `PUBACK` packet with the same `PacketId` value that has been used for the
    `PUBLISH` packet. Once the publisher receives the `PUBACK` packet, it discards
    the message and the MQTT server is responsible for publishing it to the appropriate
    subscribers.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: MQTT服务器读取有效的`PUBLISH`数据包，并使用与`PUBLISH`数据包相同的`PacketId`值向发布者发送`PUBACK`数据包。一旦发布者收到`PUBACK`数据包，它将丢弃消息，MQTT服务器负责将其发布给适当的订阅者。
- en: 'The following diagram shows the interaction between a publisher and an MQTT
    server to publish a message with a QoS level of 1:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了发布者与MQTT服务器之间以QoS级别1发布消息的交互：
- en: '![](assets/6851968e-ccf4-41d2-bfde-a17bcfce7fbb.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6851968e-ccf4-41d2-bfde-a17bcfce7fbb.png)'
- en: The MQTT server can start publishing messages to the appropriate subscribers
    before it sends the `PUBACK` packet to the publisher. Hence, when the publisher
    receives the `PUBACK` packet from the MQTT server, it doesn't mean that all the
    subscribers have received the message. It is very important to understand the
    meaning of this `PUBACK` packet.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: MQTT服务器可以在向发布者发送`PUBACK`数据包之前开始向适当的订阅者发布消息。因此，当发布者从MQTT服务器接收到`PUBACK`数据包时，并不意味着所有订阅者都已收到消息。理解这个`PUBACK`数据包的含义非常重要。
- en: 'For each subscriber to which the message has to be published, the MQTT server
    will send a `PUBLISH` packet and the subscriber must acknowledge receipt of the
    message by sending a `PUBACK` packet to the MQTT server. The following diagram
    shows the interaction between an MQTT server and the subscribers when a message
    is published with a QoS level of 1:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个需要发布消息的订阅者，MQTT服务器将发送一个`PUBLISH`数据包，订阅者必须通过向MQTT服务器发送一个`PUBACK`数据包来确认收到消息。下图显示了当使用QoS级别为1发布消息时，MQTT服务器与订阅者之间的交互：
- en: '![](assets/d3cef734-2f01-424f-a46a-2d978f06f1b6.png)If the application is able
    to tolerate duplicates and we have to make sure that messages reach the subscribers
    at least once, QoS level 1 is an excellent choice. If there is no way to handle
    duplicates, we have to use QoS level 2.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序能够容忍重复，并且我们必须确保消息至少到达订阅者一次，QoS级别1是一个很好的选择。如果没有办法处理重复，我们必须使用QoS级别2。
- en: Working with exactly once delivery (QoS level 2)
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用仅一次传递（QoS级别2）
- en: First, we will use wildcards to subscribe to a topic filter with QoS level 2,
    and then we will publish one message to a topic that will match the topic filter
    with QoS level 2\. This way, we will analyze how both publishing and subscription
    work with QoS level 2.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用通配符订阅一个带有QoS级别2的主题过滤器，然后我们将向与QoS级别2匹配的主题发布一条消息。这样，我们将分析发布和订阅在QoS级别2下的工作方式。
- en: 'We will use the `mosquitto_sub` command-line utility included in Mosquitto
    to generate a simple MQTT client that subscribes to a topic filter with QoS level
    1 and prints all the messages it receives. Open a Terminal in macOS or Linux,
    or a Command Prompt in Windows, go to the directory in which Mosquitto is installed,
    and run the following command:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Mosquitto中包含的`mosquitto_sub`命令行实用程序生成一个简单的MQTT客户端，该客户端订阅带有QoS级别1的主题过滤器，并打印接收到的所有消息。在macOS或Linux中打开终端，或在Windows中打开命令提示符，转到安装Mosquitto的目录，并运行以下命令：
- en: '[PRE16]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The previous command will create an MQTT client that will establish a connection
    with the local MQTT server and then will make the client subscribe to the topic
    filter specified after the `-t` option: `sensors/quadcopter30/#`. We specify that
    we want to use QoS level 2 to subscribe to the topic filter with the `-q 2` option.
    We specify the `-d` option to enable debug messages that will allow us to understand
    what happens under the hood and the differences when compared with publishing
    a message with QoS levels 0 and 1.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建一个MQTT客户端，该客户端将与本地MQTT服务器建立连接，然后将客户端订阅到`-t`选项后指定的主题过滤器：`sensors/quadcopter30/#`。我们指定要使用`-q
    2`选项订阅带有QoS级别2的主题过滤器。我们指定`-d`选项以启用调试消息，以便我们了解底层发生了什么以及与使用QoS级别0和1发布消息时的区别。
- en: 'The Terminal or Command Prompt window will display debug messages similar to
    the following lines. Take into account that the generated `ClientId` will be different
    from the one shown after `Client mosqsub|8876-LAPTOP-5DO`. Notice that `QoS: 2`
    indicates that the subscription is done with QoS level 2:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '终端或命令提示符窗口将显示类似以下行的调试消息。请注意，生成的`ClientId`将与`Client mosqsub|8876-LAPTOP-5DO`后显示的不同。请注意，`QoS:
    2`表示使用QoS级别2进行订阅：![](assets/d3cef734-2f01-424f-a46a-2d978f06f1b6.png)'
- en: '[PRE17]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will use the `mosquitto_pub` command-line utility included in Mosquitto
    to generate a simple MQTT client that publishes a message to a topic with QoS
    level 2 instead of QoS levels 0 and 1 we used when we published messages before.
    Open a Terminal in macOS or Linux, or a Command Prompt in Windows, go to the directory
    in which Mosquitto is installed, and run the following command:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Mosquitto中包含的`mosquitto_pub`命令行实用程序生成一个简单的MQTT客户端，该客户端将向具有QoS级别2的主题发布消息，而不是我们之前发布消息时使用的QoS级别0和1。在macOS或Linux中打开终端，或在Windows中打开命令提示符，转到安装Mosquitto的目录，并运行以下命令：
- en: '[PRE18]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The previous command will create an MQTT client that will establish a connection
    with the local MQTT server and then will make the client publish a message to
    the topic specified after the `-t` option: `sensors/quadcopter30/speed/rotor/1`.
    We specify the payload for the message after the `-m` option: `"123 f"`. We specify
    that we want to use QoS level 2 to publish the message with the `-q 2` option.
    We specify the `-d` option to enable debug messages that will allow us to understand
    what happens under the hood and the differences when compared with publishing
    a message with QoS levels 0 and 1.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建一个MQTT客户端，该客户端将与本地MQTT服务器建立连接，然后将客户端发布一条消息到`-t`选项后指定的主题：`sensors/quadcopter30/speed/rotor/1`。我们在`-m`选项后指定消息的有效载荷：`"123
    f"`。我们指定要使用`-q 2`选项发布消息的QoS级别2。我们指定`-d`选项以启用调试消息，以便我们了解底层发生了什么以及与使用QoS级别0和1发布消息时的区别。
- en: 'The Terminal or Command Prompt window will display debug messages similar to
    the following lines. Take into account that the generated `ClientId` will be different
    from the one shown after `Client mosqpub|14652-LAPTOP-5D`. After publishing the
    message, the client disconnects:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 终端或命令提示符窗口将显示类似以下行的调试消息。请注意，生成的`ClientId`将与`Client mosqpub|14652-LAPTOP-5D`后显示的不同。发布消息后，客户端将断开连接：
- en: '[PRE19]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The previous lines show that the generated MQTT client, that is, the publisher,
    had the following packet exchanges with the MQTT server:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 上述行显示生成的MQTT客户端（即发布者）与MQTT服务器的数据包交换如下：
- en: The publisher sent a `PUBLISH` packet to the MQTT server
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布者向MQTT服务器发送一个`PUBLISH`数据包
- en: The publisher received a `PUBREC` packet from the MQTT server
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布者从MQTT服务器接收到一个`PUBREC`数据包
- en: The publisher sent a `PUBREL` packet to the MQTT server
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布者向MQTT服务器发送了`PUBREL`数据包
- en: The publisher received a `PUBCOMP` packet from the MQTT server
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布者从MQTT服务器接收了`PUBCOMP`数据包
- en: 'Now, go back to the Terminal or Command Prompt window in which you executed
    the `mosquitto_sub` command and subscribed to the `sensors/quadcopter30/#` topic
    filter. You will see lines similar to the following ones:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到您执行`mosquitto_sub`命令并订阅`sensors/quadcopter30/#`主题过滤器的终端或命令提示符窗口。您将看到类似以下行的行：
- en: '[PRE20]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The previous lines show that the generated MQTT client, that is, the subscriber,
    had the following packet exchanges with the MQTT server:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的行显示了生成的MQTT客户端，即订阅者，与MQTT服务器进行的数据包交换：
- en: The subscriber received a `PUBLISH` packet from the MQTT server
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订阅者从MQTT服务器接收了`PUBLISH`数据包
- en: The subscriber sent a `PUBREC` packet to the MQTT server
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订阅者向MQTT服务器发送了`PUBREC`数据包
- en: The subscriber received a `PUBREL` packet from the MQTT server
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订阅者从MQTT服务器接收了`PUBREL`数据包
- en: The subscriber sent a `PUBCOMP` packet to the MQTT server after it successfully
    received the message with the payload
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订阅者在成功接收有效载荷为消息的消息后向MQTT服务器发送了`PUBCOMP`数据包
- en: 'If we clean up debug messages that start with the `Client` prefix, we will
    see just the last line, which shows the payloads for the message which we received
    as a result of our subscription to the `sensors/quadcopter30/#` topic filter:
    `123 f`.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们清除以`Client`前缀开头的调试消息，我们将只看到最后一行，它显示了我们订阅`sensors/quadcopter30/#`主题过滤器收到的消息的有效载荷：`123
    f`。
- en: The MQTT client that has already established a connection, that is, the publisher
    sends a `PUBLISH` packet to the MQTT server with the header we have already described,
    QoS set to 2, and including a `PacketId` numeric value that will be unique for
    this client. At this time, the publisher will consider the `PUBLISH` packet identified
    with the `PacketId` as an unacknowledged `PUBLISH` packet.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 已经建立连接的MQTT客户端，即发布者，发送了带有我们已经描述的标头的`PUBLISH`数据包到MQTT服务器，QoS设置为2，并包括一个对于此客户端将是唯一的`PacketId`数值。此时，发布者将把带有`PacketId`的`PUBLISH`数据包视为未被确认的`PUBLISH`数据包。
- en: The MQTT server reads a valid `PUBLISH` packet and it will respond to the publisher
    with a `PUBREC` packet with the same `PacketId` value that has been used for the
    `PUBLISH` packet. The `PUBREC` packet indicates that the MQTT server accepted
    the ownership of the message. Once the publisher receives the `PUBREC` packet,
    it discards the message and it stores the `PacketId` related to the message and
    the `PUBREC` packet.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: MQTT服务器读取有效的`PUBLISH`数据包，并将用相同的`PacketId`值向发布者发送`PUBREC`数据包作为响应`PUBLISH`数据包。`PUBREC`数据包表示MQTT服务器接受了消息的所有权。一旦发布者收到`PUBREC`数据包，它会丢弃消息，并存储与消息相关的`PacketId`和`PUBREC`数据包。
- en: The publisher sends a `PUBREL` packet to the MQTT server as a response to the
    received `PUBREC` packet. This `PUBREL` packet will be considered unacknowledged
    until it receives the `PUBCOMP` packet related to the `PacketId` from the MQTT
    server. Finally, the MQTT server sends a `PUBCOMP` packet with the `PacketId`
    to the publisher and, at this point, both the publisher and the MQTT server are
    sure that the message has been successfully delivered.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 出版商将`PUBREL`数据包发送到MQTT服务器，作为对收到的`PUBREC`数据包的响应。直到它收到与MQTT服务器相关的`PacketId`的`PUBCOMP`数据包，这个`PUBREL`数据包将被视为未被确认。最后，MQTT服务器向发布者发送带有`PacketId`的`PUBCOMP`数据包，此时，发布者和MQTT服务器都确信消息已成功传递。
- en: 'The following diagram shows the interaction between a publisher and an MQTT
    server to publish a message with a QoS level of 2:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了发布者和MQTT服务器之间以QoS级别2发布消息的交互：
- en: '![](assets/ff3b4070-f57c-41b0-b046-625e2c94725b.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ff3b4070-f57c-41b0-b046-625e2c94725b.png)'
- en: 'For each subscriber with QoS level 2 to which the message has to be published,
    the MQTT server will send a `PUBLISH` packet, and the same packet exchange that
    we have analyzed between the publisher and the MQTT server will happen between
    the MQTT server and the subscriber. However, in this case, the MQTT server is
    the one that acts as a publisher and starts the flow. The following diagram shows
    the interaction between an MQTT server and the subscribers when a message is published
    with a QoS level of 2:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个具有QoS级别2的订阅者，消息必须被发布到MQTT服务器，MQTT服务器将发送一个`PUBLISH`数据包，并且我们已经分析过的与发布者和MQTT服务器之间的相同数据包交换将在MQTT服务器和订阅者之间发生。但是，在这种情况下，MQTT服务器将作为发布者并启动流程。以下图表显示了在使用QoS级别2发布消息时MQTT服务器和订阅者之间的交互：
- en: '![](assets/0c238fff-d56d-4284-8ace-46b6a5931f12.png)If the application isn''t
    able to tolerate duplicates and we have to make sure that messages reach the subscribers
    only once, QoS level 2 is the appropriate choice. However, magic comes with a
    price: we must take into account that QoS level 2 has the highest overhead compared
    to the other QoS levels.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/0c238fff-d56d-4284-8ace-46b6a5931f12.png)如果应用程序无法容忍重复，并且我们必须确保消息只到达订阅者一次，那么QoS级别2是合适的选择。然而，魔法是有代价的：我们必须考虑到QoS级别2与其他QoS级别相比具有最高的开销。'
- en: Understanding overhead in the different Quality of Service levels
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解不同服务质量级别的开销
- en: 'The following diagram summarizes the different packages that are exchanged
    between an MQTT client and an MQTT server to publish a message with QoS levels
    0, 1, and 2\. This way, we can easily recognize the increased overhead as we increase
    the QoS level:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表总结了MQTT客户端和MQTT服务器之间交换的不同数据包，以发布具有QoS级别0、1和2的消息。通过这种方式，我们可以轻松识别随着QoS级别的增加而增加的开销：
- en: '![](assets/23bb3359-59a3-41e5-87ef-5521855c37f1.png)It is very important to
    take into account the additional overhead required by QoS level 2 and to use it
    only when it is really necessary.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/23bb3359-59a3-41e5-87ef-5521855c37f1.png)非常重要的是要考虑QoS级别2所需的额外开销，并且只在真正必要时使用它。'
- en: Test your knowledge
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: 'Let''s see whether you can answer the following questions correctly:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看你是否能正确回答以下问题：
- en: 'QoS level 0 for MQTT means:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MQTT的QoS级别0表示：
- en: Exactly once delivery
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确切一次传递
- en: At most once delivery
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至多一次传递
- en: At least once delivery
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至少一次交付
- en: 'QoS level 1 for MQTT means:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MQTT的QoS级别1意味着：
- en: Exactly once delivery
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恰好一次交付
- en: At most once delivery
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至多一次交付
- en: At least once delivery
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至少一次交付
- en: 'QoS level 2 for MQTT means:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MQTT的QoS级别2意味着：
- en: Exactly once delivery
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恰好一次交付
- en: At most once delivery
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至多一次交付
- en: At least once delivery
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至少一次交付
- en: 'If the application isn''t able to tolerate duplicates and we have to make sure
    that the messages reach the subscribers only once, the appropriate choice is:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果应用程序无法容忍重复，并且我们必须确保消息仅一次到达订阅者，那么适当的选择是：
- en: QoS level 0
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: QoS级别0
- en: QoS level 1
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: QoS级别1
- en: QoS level 2
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: QoS级别2
- en: 'Which QoS level has the highest overhead:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个QoS级别的开销最高：
- en: QoS level 0
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: QoS级别0
- en: QoS level 1
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: QoS级别1
- en: QoS level 2
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: QoS级别2
- en: The rights answers are included in the [Appendix](d9cf708f-f027-4bfa-a2d2-9fd3653165d9.xhtml), *Solutions*.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 正确答案包含在[附录]（d9cf708f-f027-4bfa-a2d2-9fd3653165d9.xhtml）中，*解决方案*。
- en: Summary
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we worked with different tools to interact with the Mosquitto
    MQTT 3.1.1 server we installed in [Chapter 1](d20ae00b-2bb7-4d81-b3eb-5c47215bce1f.xhtml),
    *Installing an MQTT 3.1.1 Mosquitto Server*. We worked with an unsecured MQTT
    server to easily understand the interaction between the MQTT clients and the MQTT
    server.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用不同的工具与我们在[第1章]（d20ae00b-2bb7-4d81-b3eb-5c47215bce1f.xhtml）中安装的Mosquitto
    MQTT 3.1.1服务器进行交互，*安装MQTT 3.1.1 Mosquitto服务器*。我们使用了一个未经保护的MQTT服务器，以便轻松理解MQTT客户端与MQTT服务器之间的交互。
- en: We subscribed to topics via the command-line and GUI tools. Then, we published
    messages with QoS level 0 and we unsubscribed from topics. We learned best practices
    related to topics; and single-level, and multilevel wildcards. We studied in detail
    the different Quality of Service levels supported by MQTT and when it is appropriate
    to use each of them. We analyzed their advantages and disadvantages.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过命令行和GUI工具订阅了主题。然后，我们以QoS级别0发布消息，并从主题中取消订阅。我们学习了与主题相关的最佳实践；以及单级和多级通配符。我们详细研究了MQTT支持的不同服务质量级别，以及在何时使用每个级别是适当的。我们分析了它们的优点和缺点。
- en: Now that we understood how the MQTT 3.1.1 basics work, we will learn how to
    secure an MQTT server and to follow best practices related to security, which
    are the topics that we are going to discuss in [Chapter 3](89bdce8f-72bc-4fda-82a0-5cab33fa4bd8.xhtml),
    *Securing an MQTT 3.1.1 Mosquitto Server*.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了MQTT 3.1.1基础知识的工作原理，我们将学习如何保护MQTT服务器并遵循与安全相关的最佳实践，这些是我们将在[第3章]（89bdce8f-72bc-4fda-82a0-5cab33fa4bd8.xhtml）中讨论的主题，*保护MQTT
    3.1.1 Mosquitto服务器*。
