- en: Chapter 9. Advanced Models
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。高级模型
- en: In [Chapter 4](ch04.xhtml "Chapter 4. Models"), *Models*, we presented an introduction
    to Django's database layer-how to define models and how to use the database API
    to create, retrieve, update and delete records. In this chapter, we'll introduce
    you to some more advanced features of this part of Django.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.xhtml“第4章。模型”）中，“模型”，我们介绍了Django的数据库层-如何定义模型以及如何使用数据库API来创建、检索、更新和删除记录。在本章中，我们将向您介绍Django这一部分的一些更高级功能。
- en: Related objects
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关对象
- en: 'Recall our book models from [Chapter 4](ch04.xhtml "Chapter 4. Models"), *Models*:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下我们在[第4章](ch04.xhtml“第4章。模型”）中的图书模型，“模型”：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As we explained in [Chapter 4](ch04.xhtml "Chapter 4. Models"), *Models*, accessing
    the value for a particular field on a database object is as straightforward as
    using an attribute. For example, to determine the title of the book with ID 50,
    we''d do the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第4章](ch04.xhtml“第4章。模型”）中所解释的那样，“模型”，访问数据库对象上特定字段的值就像使用属性一样简单。例如，要确定ID为50的书的标题，我们将执行以下操作：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But one thing we didn't mention previously is that related objects-fields expressed
    as either a `ForeignKey` or `ManyToManyField`-act slightly differently.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们之前没有提到的一件事是，相关对象-表达为“ForeignKey”或“ManyToManyField”的字段-的行为略有不同。
- en: Accessing ForeignKey values
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问ForeignKey值
- en: 'When you access a field that''s a `ForeignKey`, you''ll get the related model
    object. For example:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问一个“ForeignKey”字段时，您将获得相关的模型对象。例如：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With `ForeignKey` fields, it works the other way, too, but it''s slightly different
    due to the non-symmetrical nature of the relationship. To get a list of books
    for a given publisher, use `publisher.book_set.all()`, like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“ForeignKey”字段，它也可以反向工作，但由于关系的非对称性，它略有不同。要获取给定出版商的书籍列表，请使用“publisher.book_set.all（）”，如下所示：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Behind the scenes, `book_set` is just a `QuerySet` (as covered in [Chapter
    4](ch04.xhtml "Chapter 4. Models"), *Models*), and it can be filtered and sliced
    like any other `QuerySet`. For example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，“book_set”只是一个“QuerySet”（如[第4章](ch04.xhtml“第4章。模型”）中所述，“模型”），它可以像任何其他“QuerySet”一样进行过滤和切片。例如：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The attribute name `book_set` is generated by appending the lower case model
    name to `_set`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 属性名称“book_set”是通过将小写模型名称附加到“_set”而生成的。
- en: Accessing many-to-many values
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问多对多值
- en: 'Many-to-many values work like foreign-key values, except we deal with `QuerySet`
    values instead of model instances. For example, here''s how to view the authors
    for a book:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 多对多值的工作方式与外键值相似，只是我们处理的是“QuerySet”值而不是模型实例。例如，以下是如何查看书籍的作者：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It works in reverse, too. To view all of the books for an author, use `author.book_set`,
    like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以反向工作。要查看作者的所有书籍，请使用“author.book_set”，如下所示：
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, as with `ForeignKey` fields, the attribute name `book_set` is generated
    by appending the lower case model name to `_set`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，与“ForeignKey”字段一样，“book_set”属性名称是通过将小写模型名称附加到“_set”而生成的。
- en: Managers
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理器
- en: In the statement `Book.objects.all()`, `objects` is a special attribute through
    which you query your database. In [Chapter 4](ch04.xhtml "Chapter 4. Models"),
    *Models*, we briefly identified this as the model's manager. Now it's time to
    dive a bit deeper into what managers are and how you can use them.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在语句“Book.objects.all（）”中，“objects”是一个特殊的属性，通过它您可以查询您的数据库。在[第4章](ch04.xhtml“第4章。模型”）中，“模型”，我们简要地将其标识为模型的管理器。现在是时候深入了解管理器是什么以及如何使用它们了。
- en: 'In short, a model''s manager is an object through which Django models perform
    database queries. Each Django model has at least one manager, and you can create
    custom managers in order to customize database access. There are two reasons you
    might want to create a custom manager: to add extra manager methods, and/or to
    modify the initial `QuerySet` the manager returns.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，模型的管理器是Django模型执行数据库查询的对象。每个Django模型至少有一个管理器，并且您可以创建自定义管理器以自定义数据库访问。您可能想创建自定义管理器有两个原因：添加额外的管理器方法和/或修改管理器返回的初始“QuerySet”。
- en: Adding extra manager methods
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加额外的管理器方法
- en: Adding extra manager methods is the preferred way to add table-level functionality
    to your models. (For row-level functionality-that is, functions that act on a
    single instance of a model object-use model methods, which are explained later
    in this chapter.)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 添加额外的管理器方法是向模型添加表级功能的首选方法。（对于行级功能-即对模型对象的单个实例进行操作的函数-使用模型方法，这将在本章后面进行解释。）
- en: For example, let's give our `Book` model a manager method `title_count()` that
    takes a keyword and returns the number of books that have a title containing that
    keyword. (This example is slightly contrived, but it demonstrates how managers
    work.)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们给我们的“Book”模型一个管理器方法“title_count（）”，它接受一个关键字并返回包含该关键字的标题的书籍数量。（这个例子有点牵强，但它演示了管理器的工作原理。）
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here are some notes about the code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是有关代码的一些说明：
- en: We've created a `BookManager` class that extends `django.db.models.Manager`.
    This has a single method, `title_count()`, which does the calculation. Note that
    the method uses `self.filter()`, where `self` refers to the manager itself.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了一个扩展了“django.db.models.Manager”的“BookManager”类。这有一个名为“title_count（）”的方法，用于进行计算。请注意，该方法使用“self.filter（）”，其中“self”是指管理器本身。
- en: We've assigned `BookManager()` to the `objects` attribute on the model. This
    has the effect of replacing the default manager for the model, which is called
    `objects` and is automatically created if you don't specify a custom manager.
    We call it `objects` rather than something else, so as to be consistent with automatically
    created managers.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将“BookManager（）”分配给模型上的“objects”属性。这会替换模型的默认管理器，称为“objects”，如果您没有指定自定义管理器，则会自动创建。我们将其称为“objects”而不是其他名称，以便与自动创建的管理器保持一致。
- en: 'With this manager in place, we can now do this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个管理器，我们现在可以这样做：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Obviously, this is just an example-if you typed this in at your interactive
    prompt, you will likely get different return values.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这只是一个例子-如果您在交互式提示符中键入此内容，您可能会得到不同的返回值。
- en: Why would we want to add a method such as `title_count()`? To encapsulate commonly
    executed queries so that we don't have to duplicate code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们想要添加一个像 `title_count()` 这样的方法？为了封装常用的执行查询，这样我们就不必重复代码。
- en: Modifying initial manager QuerySets
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改初始管理器查询集
- en: A manager's base `QuerySet` returns all objects in the system. For example,
    `Book.objects.all()` returns all books in the book database. You can override
    a manager's base `QuerySet` by overriding the `Manager.get_queryset()` method.
    `get_queryset()` should return a `QuerySet` with the properties you require.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 管理器的基本 `QuerySet` 返回系统中的所有对象。例如，`Book.objects.all()` 返回书数据库中的所有书籍。你可以通过覆盖 `Manager.get_queryset()`
    方法来覆盖管理器的基本 `QuerySet`。`get_queryset()` 应该返回一个具有你需要的属性的 `QuerySet`。
- en: For example, the following model has two managers-one that returns all objects,
    and one that returns only the books by Roald Dahl.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下模型有两个管理器-一个返回所有对象，一个只返回罗尔德·达尔的书。
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With this sample model, `Book.objects.all()` will return all books in the database,
    but `Book.dahl_objects.all()` will only return the ones written by Roald Dahl.
    Note that we explicitly set `objects` to a vanilla `Manager` instance, because
    if we hadn''t, the only available manager would be `dahl_objects`. Of course,
    because `get_queryset()` returns a `QuerySet` object, you can use `filter()`,
    `exclude()` and all the other `QuerySet` methods on it. So these statements are
    all legal:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个示例模型，`Book.objects.all()` 将返回数据库中的所有书籍，但 `Book.dahl_objects.all()` 只会返回罗尔德·达尔写的书。请注意，我们明确将
    `objects` 设置为一个普通的 `Manager` 实例，因为如果我们没有这样做，唯一可用的管理器将是 `dahl_objects`。当然，因为 `get_queryset()`
    返回一个 `QuerySet` 对象，你可以在其上使用 `filter()`、`exclude()` 和所有其他 `QuerySet` 方法。因此，这些语句都是合法的：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This example also pointed out another interesting technique: using multiple
    managers on the same model. You can attach as many `Manager()` instances to a
    model as you''d like. This is an easy way to define common filters for your models.
    For example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子还指出了另一个有趣的技术：在同一个模型上使用多个管理器。你可以将多个 `Manager()` 实例附加到一个模型上。这是定义模型的常见过滤器的简单方法。例如：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This example allows you to request `Person.men.all()`, `Person.women.all()`,
    and `Person.people.all()`, yielding predictable results. If you use custom `Manager`
    objects, take note that the first `Manager` Django encounters (in the order in
    which they're defined in the model) has a special status. Django interprets this
    first `Manager` defined in a class as the default `Manager`, and several parts
    of Django (though not the admin application) will use that `Manager` exclusively
    for that model.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子允许你请求 `Person.men.all()`, `Person.women.all()`, 和 `Person.people.all()`,
    产生可预测的结果。如果你使用自定义的 `Manager` 对象，请注意Django遇到的第一个 `Manager`（按照模型中定义的顺序）具有特殊状态。Django将在类中定义的第一个
    `Manager` 解释为默认的 `Manager`，并且Django的几个部分（尽管不包括管理应用程序）将专门使用该 `Manager` 来管理该模型。
- en: As a result, it's often a good idea to be careful in your choice of default
    manager, in order to avoid a situation where overriding of `get_queryset()` results
    in an inability to retrieve objects you'd like to work with.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在选择默认管理器时要小心，以避免覆盖 `get_queryset()` 导致无法检索到你想要处理的对象的情况。
- en: Model methods
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型方法
- en: Define custom methods on a model to add custom row-level functionality to your
    objects. Whereas managers are intended to do table-wide things, model methods
    should act on a particular model instance. This is a valuable technique for keeping
    business logic in one place-the model.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型上定义自定义方法，为对象添加自定义的行级功能。而管理器旨在对整个表执行操作，模型方法应该作用于特定的模型实例。这是将业务逻辑集中在一个地方-模型中的一个有价值的技术。
- en: 'An example is the easiest way to explain this. Here''s a model with a few custom
    methods:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 举例是最容易解释这个问题的方法。下面是一个带有一些自定义方法的模型：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The model instance reference in [Appendix A](apa.xhtml "Appendix A. Model Definition
    Reference"), *Model Definition Reference*, has a complete list of methods automatically
    given to each model. You can override most of these (see below) but there are
    a couple that you''ll almost always want to define:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[附录A](apa.xhtml "附录 A. 模型定义参考") 中的模型实例引用，*模型定义参考*，列出了自动赋予每个模型的完整方法列表。你可以覆盖大部分方法（见下文），但有一些你几乎总是想要定义的：'
- en: '`__str__()`: A Python *magic method* that returns a Unicode representation
    of any object. This is what Python and Django will use whenever a model instance
    needs to be coerced and displayed as a plain string. Most notably, this happens
    when you display an object in an interactive console or in the admin.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__str__()`: 一个Python *魔术方法*，返回任何对象的Unicode表示。这是Python和Django在需要将模型实例强制转换并显示为普通字符串时使用的方法。特别是，当你在交互式控制台或管理界面中显示对象时，就会发生这种情况。'
- en: You'll always want to define this method; the default isn't very helpful at
    all.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你总是希望定义这个方法；默认情况下并不是很有用。
- en: '`get_absolute_url()`: This tells Django how to calculate the URL for an object.
    Django uses this in its admin interface, and any time it needs to figure out a
    URL for an object.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_absolute_url()`: 这告诉Django如何计算对象的URL。Django在其管理界面中使用这个方法，以及任何时候它需要为对象计算URL。'
- en: Any object that has a URL that uniquely identifies it should define this method.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 任何具有唯一标识URL的对象都应该定义这个方法。
- en: Overriding predefined model methods
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖预定义的模型方法
- en: 'There''s another set of model methods that encapsulate a bunch of database
    behavior that you''ll want to customize. In particular, you''ll often want to
    change the way `save()` and `delete()` work. You''re free to override these methods
    (and any other model method) to alter behavior. A classic use-case for overriding
    the built-in methods is if you want something to happen whenever you save an object.
    For example, (see `save()` for documentation of the parameters it accepts):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一组模型方法，封装了一堆你想要自定义的数据库行为。特别是，你经常会想要改变 `save()` 和 `delete()` 的工作方式。你可以自由地覆盖这些方法（以及任何其他模型方法）来改变行为。覆盖内置方法的一个经典用例是，如果你想要在保存对象时发生某些事情。例如，（参见
    `save()` 以获取它接受的参数的文档）：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can also prevent saving:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以阻止保存：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: It's important to remember to call the superclass method-that's that `super(Blog,
    self).save(*args, **kwargs)` business-to ensure that the object still gets saved
    into the database. If you forget to call the superclass method, the default behavior
    won't happen and the database won't get touched.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住调用超类方法-也就是`super(Blog, self).save(*args, **kwargs)`，以确保对象仍然被保存到数据库中。如果忘记调用超类方法，就不会发生默认行为，数据库也不会被触及。
- en: It's also important that you pass through the arguments that can be passed to
    the model method-that's what the `*args, **kwargs` bit does. Django will, from
    time to time, extend the capabilities of built-in model methods, adding new arguments.
    If you use `*args, **kwargs` in your method definitions, you are guaranteed that
    your code will automatically support those arguments when they are added.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 还要确保通过可以传递给模型方法的参数-这就是`*args, **kwargs`的作用。Django会不时地扩展内置模型方法的功能，添加新的参数。如果在方法定义中使用`*args,
    **kwargs`，则可以确保在添加这些参数时，您的代码将自动支持这些参数。
- en: Executing raw SQL queries
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行原始SQL查询
- en: 'When the model query APIs don''t go far enough, you can fall back to writing
    raw SQL. Django gives you two ways of performing raw SQL queries: you can use
    `Manager.raw()` to perform raw queries and return model instances, or you can
    avoid the model layer entirely and execute custom SQL directly.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当模型查询API不够用时，可以退而使用原始SQL。Django提供了两种执行原始SQL查询的方法：您可以使用`Manager.raw()`执行原始查询并返回模型实例，或者完全避开模型层并直接执行自定义SQL。
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should be very careful whenever you write raw SQL. Every time you use it,
    you should properly escape any parameters that the user can control by using `params`
    in order to protect against SQL injection attacks.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 每次使用原始SQL时，都应该非常小心。您应该使用`params`正确转义用户可以控制的任何参数，以防止SQL注入攻击。
- en: Performing raw queries
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行原始SQL查询
- en: 'The `raw()` manager method can be used to perform raw SQL queries that return
    model instances:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`raw()`管理器方法可用于执行返回模型实例的原始SQL查询：'
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This method takes a raw SQL query, executes it, and returns a `django.db.models.query.RawQuerySet`
    instance. This `RawQuerySet` instance can be iterated over just like a normal
    `QuerySet` to provide object instances. This is best illustrated with an example.
    Suppose you have the following model:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受原始SQL查询，执行它，并返回一个`django.db.models.query.RawQuerySet`实例。这个`RawQuerySet`实例可以像普通的`QuerySet`一样进行迭代，以提供对象实例。这最好用一个例子来说明。假设您有以下模型：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You could then execute custom SQL like so:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以执行自定义的SQL，就像这样：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Of course, this example isn't very exciting-it's exactly the same as running
    `Person.objects.all()`. However, `raw()` has a bunch of other options that make
    it very powerful.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个例子并不是很令人兴奋-它与运行`Person.objects.all()`完全相同。但是，`raw()`有很多其他选项，使其非常强大。
- en: Model table names
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型表名称
- en: Where'd the name of the `Person` table come from in the preceding example? By
    default, Django figures out a database table name by joining the model's app label-the
    name you used in `manage.py startapp`-to the model's class name, with an underscore
    between them. In the example we've assumed that the `Person` model lives in an
    app named `myapp`, so its table would be `myapp_person`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，`Person`表的名称是从哪里来的？默认情况下，Django通过将模型的应用程序标签（您在`manage.py startapp`中使用的名称）与模型的类名结合起来，它们之间用下划线连接来确定数据库表名称。在我们的例子中，假设`Person`模型位于名为`myapp`的应用程序中，因此其表将是`myapp_person`。
- en: For more details, check out the documentation for the `db_table` option, which
    also lets you manually set the database table name.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`db_table`选项的更多详细信息，请查看文档，该选项还允许您手动设置数据库表名称。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: No checking is done on the SQL statement that is passed in to `raw()`. Django
    expects that the statement will return a set of rows from the database, but does
    nothing to enforce that. If the query does not return rows, a (possibly cryptic)
    error will result.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对传递给`raw()`的SQL语句不进行检查。Django期望该语句将从数据库返回一组行，但不执行任何强制性操作。如果查询不返回行，将导致（可能是晦涩的）错误。
- en: Mapping query fields to model fields
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将查询字段映射到模型字段
- en: '`raw()` automatically maps fields in the query to fields on the model. The
    order of fields in your query doesn''t matter. In other words, both of the following
    queries work identically:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`raw()`会自动将查询中的字段映射到模型中的字段。查询中字段的顺序并不重要。换句话说，以下两个查询的工作方式是相同的：'
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Matching is done by name. This means that you can use SQL''s `AS` clauses to
    map fields in the query to model fields. So if you had some other table that had
    `Person` data in it, you could easily map it into `Person` instances:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配是通过名称完成的。这意味着您可以使用SQL的`AS`子句将查询中的字段映射到模型字段。因此，如果您有其他表中有`Person`数据，您可以轻松地将其映射到`Person`实例中：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As long as the names match, the model instances will be created correctly.
    Alternatively, you can map fields in the query to model fields using the `translations`
    argument to `raw()`. This is a dictionary mapping names of fields in the query
    to names of fields on the model. For example, the preceding query could also be
    written:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 只要名称匹配，模型实例就会被正确创建。或者，您可以使用`raw()`的`translations`参数将查询中的字段映射到模型字段。这是一个将查询中的字段名称映射到模型字段名称的字典。例如，前面的查询也可以这样写：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Index lookups
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引查找
- en: '`raw()` supports indexing, so if you need only the first result you can write:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`raw()`支持索引，因此如果只需要第一个结果，可以这样写：'
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'However, the indexing and slicing are not performed at the database level.
    If you have a large number of `Person` objects in your database, it is more efficient
    to limit the query at the SQL level:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，索引和切片不是在数据库级别执行的。如果数据库中有大量的`Person`对象，限制SQL级别的查询效率更高：
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Deferring model fields
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 延迟加载模型字段
- en: 'Fields may also be left out:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 字段也可以被省略：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `Person` objects returned by this query will be deferred model instances
    (see `defer()`). This means that the fields that are omitted from the query will
    be loaded on demand. For example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询返回的`Person`对象将是延迟加载的模型实例（参见`defer()`）。这意味着从查询中省略的字段将按需加载。例如：
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: From outward appearances, this looks like the query has retrieved both the first
    name and last name. However, this example actually issued 3 queries. Only the
    first names were retrieved by the raw() query-the last names were both retrieved
    on demand when they were printed.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从外观上看，这似乎是查询已检索了名字和姓氏。但是，这个例子实际上发出了3个查询。只有第一个名字是由`raw()`查询检索到的-当打印它们时，姓氏是按需检索的。
- en: There is only one field that you can't leave out-the primary key field. Django
    uses the primary key to identify model instances, so it must always be included
    in a raw query. An `InvalidQuery` exception will be raised if you forget to include
    the primary key.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一个字段是不能省略的-主键字段。Django使用主键来标识模型实例，因此它必须始终包含在原始查询中。如果您忘记包括主键，将会引发`InvalidQuery`异常。
- en: Adding annotations
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加注释
- en: 'You can also execute queries containing fields that aren''t defined on the
    model. For example, we could use PostgreSQL''s `age()` function to get a list
    of people with their ages calculated by the database:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以执行包含模型上未定义的字段的查询。例如，我们可以使用PostgreSQL的`age()`函数来获取一个人的年龄列表，其年龄由数据库计算得出：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Passing parameters into raw()
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将参数传递给原始查询
- en: 'If you need to perform parameterized queries, you can pass the `params` argument
    to `raw()`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要执行参数化查询，可以将`params`参数传递给`raw()`：
- en: '[PRE26]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`params` is a list or dictionary of parameters. You''ll use `%s` placeholders
    in the query string for a list, or `%(key)s` placeholders for a dictionary (where
    `key` is replaced by a dictionary key, of course), regardless of your database
    engine. Such placeholders will be replaced with parameters from the `params` argument.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`params`是参数的列表或字典。您将在查询字符串中使用`%s`占位符来表示列表，或者使用`%(key)s`占位符来表示字典（其中`key`当然会被字典键替换），而不管您的数据库引擎如何。这些占位符将被`params`参数中的参数替换。'
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Do not use string formatting on raw queries!**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要在原始查询上使用字符串格式化！**'
- en: 'It''s tempting to write the preceding query as:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易将前面的查询写成：
- en: '`>>> query = ''SELECT * FROM myapp_person WHERE last_name = %s'' % lname` `Person.objects.raw(query)`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`>>> query = ''SELECT * FROM myapp_person WHERE last_name = %s'' % lname` `Person.objects.raw(query)`'
- en: '**Don''t.**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要这样做。**'
- en: Using the `params` argument completely protects you from SQL injection attacks,
    a common exploit where attackers inject arbitrary SQL into your database. If you
    use string interpolation, sooner or later you'll fall victim to SQL injection.
    As long as you remember to always use the `params` argument you'll be protected.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`params`参数完全保护您免受SQL注入攻击，这是一种常见的攻击方式，攻击者会将任意SQL注入到您的数据库中。如果您使用字符串插值，迟早会成为SQL注入的受害者。只要记住始终使用`params`参数，您就会得到保护。
- en: Executing custom SQL directly
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接执行自定义SQL
- en: 'Sometimes even `Manager.raw()` isn''t quite enough: you might need to perform
    queries that don''t map cleanly to models, or directly execute `UPDATE`, `INSERT`,
    or `DELETE` queries. In these cases, you can always access the database directly,
    routing around the model layer entirely. The object `django.db.connection` represents
    the default database connection. To use the database connection, call `connection.cursor()`
    to get a cursor object. Then, call `cursor.execute(sql, [params])` to execute
    the SQL and `cursor.fetchone()` or `cursor.fetchall()` to return the resulting
    rows. For example:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有时甚至`Manager.raw()`还不够：您可能需要执行与模型不太匹配的查询，或者直接执行`UPDATE`、`INSERT`或`DELETE`查询。在这些情况下，您可以始终直接访问数据库，完全绕过模型层。对象`django.db.connection`表示默认数据库连接。要使用数据库连接，调用`connection.cursor()`以获取游标对象。然后，调用`cursor.execute(sql,
    [params])`来执行SQL，`cursor.fetchone()`或`cursor.fetchall()`来返回结果行。例如：
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Note that if you want to include literal percent signs in the query, you have
    to double them in the case you are passing parameters:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您想在查询中包含百分号，您必须在传递参数的情况下将其加倍：
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If you are using more than one database, you can use `django.db.connections`
    to obtain the connection (and cursor) for a specific database. `django.db.connections`
    is a dictionary-like object that allows you to retrieve a specific connection
    using its alias:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用多个数据库，可以使用`django.db.connections`来获取特定数据库的连接（和游标）。`django.db.connections`是一个类似字典的对象，允许您使用其别名检索特定连接：
- en: '[PRE29]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'By default, the Python DB API will return results without their field names,
    which means you end up with a `list` of values, rather than a `dict`. At a small
    performance cost, you can return results as a `dict` by using something like this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Python DB API将返回结果而不带有它们的字段名称，这意味着您最终会得到一个值的`list`，而不是一个`dict`。以较小的性能成本，您可以通过类似以下的方式返回结果作为`dict`：
- en: '[PRE30]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here is an example of the difference between the two:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是两者之间差异的示例：
- en: '[PRE31]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Connections and cursors
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接和游标
- en: '`connection` and `cursor` mostly implement the standard Python DB-API described
    in PEP 249 (for more information visit, [https://www.python.org/dev/peps/pep-0249](https://www.python.org/dev/peps/pep-0249)),
    except when it comes to transaction handling. If you''re not familiar with the
    Python DB-API, note that the SQL statement in `cursor.execute()` uses placeholders,
    "`%s`", rather than adding parameters directly within the SQL.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`connection`和`cursor`大多实现了PEP 249中描述的标准Python DB-API（有关更多信息，请访问[https://www.python.org/dev/peps/pep-0249](https://www.python.org/dev/peps/pep-0249)），除了在处理事务时。如果您不熟悉Python
    DB-API，请注意`cursor.execute()`中的SQL语句使用占位符"`%s`"，而不是直接在SQL中添加参数。'
- en: 'If you use this technique, the underlying database library will automatically
    escape your parameters as necessary. Also note that Django expects the "`%s`"
    placeholder, not the `?` placeholder, which is used by the SQLite Python bindings.
    This is for the sake of consistency and sanity. Using a cursor as a context manager:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用这种技术，底层数据库库将根据需要自动转义参数。还要注意，Django期望"`%s`"占位符，而不是SQLite Python绑定使用的`?`占位符。这是为了一致性和健全性。使用游标作为上下文管理器：
- en: '[PRE32]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'is equivalent to:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE33]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Adding extra Manager methods
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加额外的Manager方法
- en: Adding extra `Manager` methods is the preferred way to add table-level functionality
    to your models. (For row-level functionality-that is, functions that act on a
    single instance of a model object-use Model methods, not custom `Manager` methods.)
    A custom `Manager` method can return anything you want. It doesn't have to return
    a `QuerySet`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 添加额外的`Manager`方法是向模型添加表级功能的首选方式。（对于行级功能，即对模型对象的单个实例进行操作的函数，请使用模型方法，而不是自定义的`Manager`方法。）自定义的`Manager`方法可以返回任何你想要的东西。它不一定要返回一个`QuerySet`。
- en: 'For example, this custom `Manager` offers a method `with_counts()`, which returns
    a list of all `OpinionPoll` objects, each with an extra `num_responses` attribute
    that is the result of an aggregate query:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这个自定义的`Manager`提供了一个名为`with_counts()`的方法，它返回所有`OpinionPoll`对象的列表，每个对象都有一个额外的`num_responses`属性，这是聚合查询的结果。
- en: '[PRE34]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: With this example, you'd use `OpinionPoll.objects.with_counts()` to return that
    list of `OpinionPoll` objects with `num_responses` attributes. Another thing to
    note about this example is that `Manager` methods can access `self.model` to get
    the model class to which they're attached.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个例子，您可以使用`OpinionPoll.objects.with_counts()`来返回带有`num_responses`属性的`OpinionPoll`对象列表。关于这个例子的另一点要注意的是，`Manager`方法可以访问`self.model`来获取它们所附加的模型类。
- en: What's next?
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来呢？
- en: In the next chapter, we'll show you Django's generic views framework, which
    lets you save time in building websites that follow common pattern
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将向您展示Django的通用视图框架，它可以帮助您节省时间，构建遵循常见模式的网站。
