- en: Appendix A. Python 2 versus Python 3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. Python 2与Python 3
- en: All the code samples in this book have been written for Python 3.4\. Except
    for very minor changes, they would work in Python 2.7 as well. The author believes
    that Python 3 has crossed the tipping point for being the preferred choice for
    new Django projects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书中的所有代码示例都是为Python 3.4编写的。除了非常小的更改，它们也可以在Python 2.7中运行。作者认为Python 3已经成为新的Django项目的首选选择。
- en: Python 2.7 development was supposed to end in 2015 but was extended for five
    more years through 2020\. There will not be a Python 2.8\. Soon all major Linux
    distributions would have completely switched to using Python 3 as a default. Many
    PaaS providers such as Heroku already support Python 3.4.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python 2.7的开发原计划在2015年结束，但通过2020年延长了五年。不会有Python 2.8。很快，所有主要的Linux发行版都将完全转换为使用Python
    3作为默认版本。许多PaaS提供商，如Heroku，已经支持Python 3.4。
- en: Most of the packages listed in the Python Wall of Superpowers have turned green
    (indicating that they have support for Python 3). Almost all the red ones have
    an actively developed Python 3 port.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Python Wall of Superpowers中列出的大多数软件包已经变成了绿色（表示它们支持Python 3）。几乎所有红色的软件包都有一个正在积极开发的Python
    3版本。
- en: Django has been supporting Python 3 since Version 1.5\. In fact, the strategy
    was to rewrite the code in Python 3 and deal with Python 2 as a backward compatibility
    requirement. This is primarily implemented using utility functions from Six, a
    Python 2 and 3 compatibility library.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Django从1.5版本开始支持Python 3。事实上，策略是用Python 3重写代码，并将Python 2作为向后兼容的要求。这主要是使用Six这个Python
    2和3兼容性库的实用函数实现的。
- en: As you will soon see, Python 3 is a superior language in many ways due to numerous
    improvements primarily towards consistency. Yet, if you are building web applications
    with Django, the number of differences you might encounter while moving to Python
    3 are quite trivial.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你很快会看到的，Python 3在许多方面都是一种更优越的语言，因为它有许多改进，主要是为了一致性。然而，如果你正在用Django构建Web应用程序，那么在转向Python
    3时可能会遇到的差异是相当微不足道的。
- en: But I still use Python 2.7!
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 但我仍在使用Python 2.7！
- en: If you are stuck with a Python 2.7 environment, then the sample project can
    be easily backported. There is a custom script named `backport3to2.py` at the
    project root that can perform a one-way conversion to Python 2.x. Note that it
    is not general enough for using in other projects.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你被困在Python 2.7的环境中，那么示例项目可以很容易地回溯。项目根目录下有一个名为`backport3to2.py`的自定义脚本，可以执行一次性转换为Python
    2.x。请注意，它不适用于其他项目。
- en: However, if you are interested in knowing why Python 3 is better, then read
    on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你想知道为什么Python 3更好，那就继续阅读。
- en: Python 3
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 3
- en: Python 3 was born out of necessity. One of Python 2's major annoyances was its
    inconsistent handling of non-English characters (commonly manifested as the infamous
    `UnicodeDecodeError` exception). Guido initiated the Python 3 project to clean
    up a number of such language issues while breaking backward compatibility.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3的诞生是出于必要性。Python 2的一个主要问题是其对非英语字符的处理不一致（通常表现为臭名昭著的`UnicodeDecodeError`异常）。Guido启动了Python
    3项目，清理了许多这样的语言问题，同时打破了向后兼容性。
- en: The first alpha release of Python 3.0 was made in August 2007\. Since then,
    Python 2 and Python 3 have been in parallel development by the core development
    team for a number of years. Ultimately, Python 3 is expected to be the future
    of the language.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.0的第一个alpha版本是在2007年8月发布的。从那时起，Python 2和Python 3一直在并行开发，由核心开发团队开发了多年。最终，Python
    3有望成为该语言的未来。
- en: Python 3 for Djangonauts
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 3 for Djangonauts
- en: This section covers the most important changes in Python 3 from a Django developer's
    perspective. For the full list of changes, please refer to the recommended reading
    section at the end of this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涵盖了从Django开发者的角度看Python 3的最重要的变化。有关所有变化的完整列表，请参考本章末尾的推荐阅读部分。
- en: The examples are given in both Python 3 and Python 2\. Depending on your installation,
    all Python 3 commands might need to be changed from `python` to `python3` or `python3.4`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 示例分别以Python 3和Python 2给出。根据你的安装，所有Python 3命令可能需要从`python`更改为`python3`或`python3.4`。
- en: Change all the __unicode__ methods into __str__
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将所有的__unicode__方法更改为__str__
- en: 'In Python 3, the `__str__()` method is called for string representation of
    your models rather than the awkward sounding `__unicode__()` method. This is one
    of the most evident ways to identify Python 3 ported code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3中，用于模型的字符串表示调用`__str__()`方法，而不是尴尬的`__unicode__()`方法。这是识别Python 3移植代码最明显的方法之一：
- en: '| Python 2 | Python 3 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| Python 2 | Python 3 |'
- en: '| --- | --- |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The preceding table reflects the difference in the way Python 3 treats strings.
    In Python 2, the human-readable representation of a class can be returned by `__str__()`
    (bytes) or `__unicode__()` (text). However, in Python 3 the readable representation
    is simply returned by `__str__()` (text).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的表反映了Python 3处理字符串的方式的不同。在Python 2中，类的可读表示可以通过`__str__()`（字节）或`__unicode__()`（文本）返回。然而，在Python
    3中，可读表示只是通过`__str__()`（文本）返回。
- en: All classes inherit from the object class
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 所有的类都继承自object类
- en: 'Python 2 has two kinds of classes: old-style (classic) and new-style. New-style
    classes are classes that directly or indirectly inherit from `object`. Only the
    new-style classes can use Python''s advanced features, such as slots, descriptors,
    and properties. Many of these are used by Django. However, classes were still
    old-style by default for compatibility reasons.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Python 2有两种类：旧式（经典）和新式。新式类是直接或间接继承自`object`的类。只有新式类才能使用Python的高级特性，如slots、描述符和属性。其中许多被Django使用。然而，出于兼容性原因，类仍然默认为旧式。
- en: In Python 3, the old-style classes don't exist anymore. As seen in the following
    table, even if you don't explicitly mention any parent classes, the `object` class
    will be present as a base. So, all the classes are new-style.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3中，旧式类不再存在。如下表所示，即使你没有明确地提到任何父类，`object`类也会作为基类存在。因此，所有的类都是新式的。
- en: '| Python 2 | Python 3 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: Python 2 | Python 3
- en: '| --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Calling super() is easier
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用super()更容易
- en: The simpler call to `super()`, without any arguments, will save you some typing
    in Python 3.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3中，更简单的调用`super()`，不带任何参数，将为你节省一些输入。
- en: '| Python 2 | Python 3 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| Python 2 | Python 3 |'
- en: '| --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Specifying the class name and instance is optional, thereby making your code
    DRY and less prone to errors while refactoring.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 指定类名和实例是可选的，从而使你的代码更加干燥，减少了重构时出错的可能性。
- en: Relative imports must be explicit
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相对导入必须是显式的
- en: 'Imagine the following directory structure for a package named `app1`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个名为`app1`的包的以下目录结构：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, in Python 3, let''s run the following code in the parent directory of
    `app1`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在Python 3中，让我们在`app1`的父目录中运行以下代码：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Within a package, you should use explicit relative imports while referring to
    a sibling module. You can omit `__init__.py` in Python 3, though it is commonly
    used to identify a package.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个包内，当引用一个兄弟模块时，你应该使用显式相对导入。在Python 3中，你可以省略`__init__.py`，尽管它通常用于标识一个包。
- en: In Python 2, you can use `import models` to successfully import the `models.py`
    module. However, it is ambiguous and can accidentally import any other `models.py`
    in your Python path. Hence, this is forbidden in Python 3 and discouraged in Python
    2 as well.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 2中，你可以使用`import models`成功导入`models.py`模块。然而，这是模棱两可的，可能会意外地导入Python路径中的任何其他`models.py`。因此，在Python
    3中是被禁止的，在Python 2中也是不鼓励的。
- en: HttpRequest and HttpResponse have str and bytes types
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HttpRequest和HttpResponse有str和bytes类型
- en: In Python 3, according to PEP 3333 (amendments to the WSGI standard), we are
    careful not to mix data coming from or leaving via HTTP, which will be in bytes,
    as opposed to the text within the framework, which will be native (Unicode) strings.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3中，根据PEP 3333（WSGI标准的修正），我们要小心不要混合通过HTTP进入或离开的数据，这些数据将是字节，而不是框架内的文本，这些文本将是本地（Unicode）字符串。
- en: 'Essentially, for the `HttpRequest` and `HttpResponse` objects:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，对于`HttpRequest`和`HttpResponse`对象：
- en: Headers will always be the `str` objects
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标头将始终是`str`对象
- en: Input and output streams will always be the `byte` objects
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入和输出流将始终是`byte`对象
- en: Unlike Python 2, the strings and bytes are not implicitly converted while performing
    comparisons or concatenations with each other. Strings mean Unicode strings only.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与Python 2不同，字符串和字节在执行彼此的比较或连接时不会被隐式转换。字符串只意味着Unicode字符串。
- en: Exception syntax changes and improvements
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常语法的变化和改进
- en: Exception-handling syntax and functionality has been significantly improved
    in Python 3.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3中，异常处理的语法和功能得到了显著改进。
- en: 'In Python 3, you cannot use the comma-separated syntax for the `except` clause.
    Use the `as` keyword instead:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3中，你不能使用逗号分隔的语法来处理`except`子句。而是使用`as`关键字：
- en: '| Python 2 | Python 3 and 2 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| Python 2 | Python 3 and 2 |'
- en: '| --- | --- |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '|'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The new syntax is recommended for Python 2 as well.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 新的语法也建议在Python 2中使用。
- en: In Python 3, all the exceptions must be derived (directly or indirectly) from
    `BaseException`. In practice, you would create your custom exceptions by deriving
    from the `Exception` class.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3中，所有的异常都必须派生（直接或间接）自`BaseException`。在实践中，你会通过从`Exception`类派生来创建你自己的自定义异常。
- en: 'As a major improvement in error reporting, if an exception occurs while handling
    an exception, then the entire chain of exceptions are reported:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 作为错误报告的一个重大改进，如果在处理异常时发生了异常，那么整个异常链都会被报告：
- en: '| Python 2 | Python 3 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| Python 2 | Python 3 |'
- en: '| --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'During the handling of the preceding exception, another exception occurred:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理前面的异常时，发生了另一个异常：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Once you get used to this feature, you will definitely miss it in Python 2.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你习惯了这个特性，你肯定会在Python 2中想念它。
- en: Standard library reorganized
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准库重新组织
- en: 'The core developers have cleaned up and organized the Python standard library.
    For instance, `SimpleHTTPServer` now lives in the `http.server` module:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 核心开发人员已经清理和组织了Python标准库。例如，`SimpleHTTPServer`现在位于`http.server`模块中：
- en: '| Python 2 | Python 3 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| Python 2 | Python 3 |'
- en: '| --- | --- |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '|'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: New goodies
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新的好东西
- en: Python 3 is not just about language fixes. It is also where bleeding-edge Python
    development happens. This means improvements to the language in terms of syntax,
    performance, and built-in functionality.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3不仅仅是关于语言修复。这也是Python最前沿的开发发生的地方。这意味着语言在语法、性能和内置功能方面的改进。
- en: 'Some of the notable new modules added to Python 3 are as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一些值得注意的新模块添加到Python 3中如下：
- en: '`asyncio`: This contains asynchronous I/O, event loop, coroutines, and tasks'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asyncio`：这包含异步I/O、事件循环、协程和任务'
- en: '`unittest.mock`: This contains the mock object library for testing'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unittest.mock`：这包含用于测试的模拟对象库'
- en: '`pathlib`: This contains object-oriented file system paths'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pathlib`：这包含面向对象的文件系统路径'
- en: '`statistics`: This contains mathematical statistics functions'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statistics`：这包含数学统计函数'
- en: Even if some of these modules have backports to Python 2, it is more appealing
    to migrate to Python 3 and leverage them as built-in modules.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 即使其中一些模块已经回溯到Python 2，迁移到Python 3并利用它们作为内置模块更具吸引力。
- en: Using Pyvenv and Pip
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Pyvenv和Pip
- en: Most serious Python developers prefer to use virtual environments. `virtualenv`
    is quite popular for isolating your project setup from the system-wide Python
    installation. Thankfully, Python 3.3 is integrated with a similar functionality
    using the `venv` module.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数严肃的Python开发者更喜欢使用虚拟环境。`virtualenv`非常流行，可以将项目设置与系统范围的Python安装隔离开来。值得庆幸的是，Python
    3.3集成了类似的功能，使用`venv`模块。
- en: 'Since Python 3.4, a fresh virtual environment will be pre-installed with pip,
    a popular installer:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 自Python 3.4开始，一个新的虚拟环境将预先安装pip，一个流行的安装程序：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice that the command prompt changes to indicate that your virtual environment
    has been activated.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，命令提示符会更改以指示你的虚拟环境已被激活。
- en: Other changes
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他变化
- en: 'We cannot possibly fit all the Python 3 changes and improvements in this appendix.
    However, the other commonly cited changes are as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不可能在这个附录中涵盖所有Python 3的变化和改进。然而，其他常见的变化如下：
- en: '`print()` **is now a function**: Previously, it was a statement, that is, arguments
    were not in parenthesis.'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`print()` **现在是一个函数**：以前它是一个语句，也就是说，参数不需要括号。'
- en: '**Integers don''t overflow**: `sys.maxint` is outdated, integers will have
    unlimited precision.'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**整数不会溢出**：`sys.maxint`已经过时，整数将具有无限精度。'
- en: '**Inequality operator** `<>` **is removed**: Use `!=` instead.'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**不等运算符** `<>` **已被移除**：请使用`!=`代替。'
- en: '**True integer division**: In Python 2, `3 / 2` would evaluate to `1`. It will
    be correctly evaluated to `1.5` in Python 3.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**真正的整数除法**：在Python 2中，`3 / 2`会计算为`1`。在Python 3中将正确计算为`1.5`。'
- en: '**Use** `range` **instead of** `xrange(): range()` will now return iterators
    as `xrange()` used to work before.'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用** `range` **而不是** `xrange()`：`range()`现在将返回迭代器，就像`xrange()`以前的工作方式一样。'
- en: '**Dictionary keys are views**: `dict` and `dict`-like classes (such as `QueryDict`)
    will return iterators instead of lists for the `keys()`, `items()`, and `values()`
    method calls.'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**字典键是视图**：`dict`和`dict`-like类（如`QueryDict`）将返回迭代器而不是`keys()`、`items()`和`values()`方法调用的列表。'
- en: Further information
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: Read *What's New In Python 3.0* by Guido at [https://docs.python.org/3/whatsnew/3.0.html](https://docs.python.org/3/whatsnew/3.0.html)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读Guido的*Python 3.0的新功能*，网址为[https://docs.python.org/3/whatsnew/3.0.html](https://docs.python.org/3/whatsnew/3.0.html)
- en: To find what is new in each release of Python, read *What's New in Python* at
    [https://docs.python.org/3/whatsnew/](https://docs.python.org/3/whatsnew/)
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查找Python每个版本的新功能，请阅读[https://docs.python.org/3/whatsnew/](https://docs.python.org/3/whatsnew/)上的*Python的新功能*。
- en: For richly detailed answers about Python 3 read *Python 3 Q & A* by Nick Coghlan
    at [http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html](http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Python 3的详细答案，请阅读Nick Coghlan的*Python 3问答*，网址为[http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html](http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html)
