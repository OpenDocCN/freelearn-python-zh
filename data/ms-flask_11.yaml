- en: Chapter 11. Building Your Own Extension
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。创建自己的扩展
- en: From the first chapter of this book, we have been adding Flask extensions to
    our app in order to add new features and save us from spending lots of time to
    reinvent the wheel. Up to this point, it was unknown how these Flask extensions
    worked. In this chapter, we will create two simple Flask extensions in order to
    better understand Flask's internals and allow you to extend Flask with your own
    functionality.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从本书的第一章开始，我们一直在向我们的应用程序中添加Flask扩展，以添加新功能并节省我们花费大量时间重新发明轮子。到目前为止，这些Flask扩展是如何工作的还是未知的。在本章中，我们将创建两个简单的Flask扩展，以更好地理解Flask的内部工作，并允许您使用自己的功能扩展Flask。
- en: Creating a YouTube Flask extension
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建YouTube Flask扩展
- en: 'To begin, the first extension we are going to create is a simple extension
    that allows embedding YouTube videos in Jinja templates with the following tag:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要创建的第一个扩展是一个简单的扩展，允许在Jinja模板中嵌入YouTube视频，标签如下：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `video_id` object is the code after the `v` in any YouTube URL. For example,
    in the URL [https://www.youtube.com/watch?v=_OBlgSz8sSM](https://www.youtube.com/watch?v=_OBlgSz8sSM),
    the `video_id` object would be `_OBlgSz8sSM`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_id`对象是任何YouTube URL中`v`后面的代码。例如，在URL [https://www.youtube.com/watch?v=_OBlgSz8sSM](https://www.youtube.com/watch?v=_OBlgSz8sSM)
    中，`video_id`对象将是`_OBlgSz8sSM`。'
- en: For now, the code for this extension will reside in `extensions.py`. However,
    this is only for development and debugging purposes. When the code is ready to
    be shared, it will be moved into its own project directory.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，这个扩展的代码将驻留在`extensions.py`中。但是，这只是为了开发和调试目的。当代码准备分享时，它将被移动到自己的项目目录中。
- en: 'The first thing that any Flask extension needs is the object that will be initialized
    on the app. This object will handle adding its `Blueprint` object to the app and
    registering the `youtube` function on Jinja:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 任何Flask扩展需要的第一件事是将在应用程序上初始化的对象。这个对象将处理将其`Blueprint`对象添加到应用程序并在Jinja上注册`youtube`函数：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So far, the only thing this code does is initialize an empty blueprint on the
    `app` object. The next piece of code needed is a representation of a video. The
    following will be a class that will handle the parameters from the Jinja function
    and render HTML to display in the template:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这段代码唯一做的事情就是在`app`对象上初始化一个空的蓝图。下一段所需的代码是视频的表示。接下来将是一个处理Jinja函数参数并渲染HTML以在模板中显示的类：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This object will be created from the `youtube` function in the template, and
    any arguments passed in the template will be given to this object to render HTML.
    There is also a new object in this code, `Markup`, which we never used before.
    The `Markup` class is Flask's way of automatically escaping HTML or marking it
    as safe to include in the template. If we just returned HTML, Jinja would autoescape
    it because it does not know whether it is safe or not. This is Flask's way of
    protecting your site from **cross-site scripting attacks**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个对象将从模板中的`youtube`函数创建，并且模板中传递的任何参数都将传递给这个对象以渲染HTML。在这段代码中还有一个新对象，`Markup`，我们以前从未使用过。`Markup`类是Flask自动转义HTML或将其标记为安全包含在模板中的方式。如果我们只返回HTML，Jinja会自动转义它，因为它不知道它是否安全。这是Flask保护您的网站免受**跨站脚本攻击**的方式。
- en: 'The next step is to create the function that will be registered in Jinja:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建将在Jinja中注册的函数：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `YouTube` class, we have to register the function to Jinja in the `init_app`
    method:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在`YouTube`类中，我们必须在`init_app`方法中向Jinja注册函数：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, we have to create HTML that will add the video to the page. In a new
    folder named `youtube` in the `templates` directory, create a new HTML file named
    `video.html` and add the following code to it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须创建HTML，将视频添加到页面中。在`templates`目录中的一个名为`youtube`的新文件夹中，创建一个名为`video.html`的新HTML文件，并将以下代码添加到其中：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is all the code that''s needed to embed YouTube videos in your templates.
    Let''s test this out now. In `extensions.py`, initialize the `Youtube` class below
    the `Youtube` class definition:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在模板中嵌入YouTube视频所需的所有代码。现在让我们来测试一下。在`extensions.py`中，在`Youtube`类定义下方初始化`Youtube`类：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In `__init__.py`, import the `youtube_ext` variable and use the `init_app`
    method we created to register it on the app:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在`__init__.py`中，导入`youtube_ext`变量，并使用我们创建的`init_app`方法将其注册到应用程序上：
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, as a simple example, add the `youtube` function to the top of the blog
    home page:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，作为一个简单的例子，在博客主页的顶部添加`youtube`函数：
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will have the following result:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下结果：
- en: '![Creating a YouTube Flask extension](img/B03929_11_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![创建YouTube Flask扩展](img/B03929_11_01.jpg)'
- en: Creating a Python package
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Python包
- en: 'In order to make our new Flask extension available to others, we have to create
    an installable Python package from the code we have written so far. To begin,
    we need a new project directory outside our current application directory. We
    will need two things: a `setup.py` file, which we will fill in later, and a folder
    named `flask_youtube`. In the `flask_youtube` directory, we will have an `__init__.py`
    file, which will contain all the code that we wrote for our extension.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的新Flask扩展可供他人使用，我们必须从到目前为止编写的代码中创建一个可安装的Python包。首先，我们需要一个新的项目目录，位于当前应用程序目录之外。我们需要两样东西：一个`setup.py`文件，稍后我们将填写它，和一个名为`flask_youtube`的文件夹。在`flask_youtube`目录中，我们将有一个`__init__.py`文件，其中将包含我们为扩展编写的所有代码。
- en: 'Here is the final version of that code contained in the `__init__.py` file:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是包含在`__init__.py`文件中的该代码的最终版本：
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Also inside the `flask_youtube` directory, we will need a `templates` directory,
    which will hold the `youtube` directory that we put in our app's `templates` directory.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 还在`flask_youtube`目录中，我们将需要一个`templates`目录，其中将包含我们放在应用程序`templates`目录中的`youtube`目录。
- en: In order to turn this code into a Python package, we will use the library named
    `setuptools`. `setuptools` is a Python package that allows developers to easily
    create installable packages for their code. `setuptools` will bundle code so that
    `pip` and `easy_install` can automatically install them, and will even upload
    your package to the **Python Package Index** (**PyPI**).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将这段代码转换成Python包，我们将使用名为`setuptools`的库。`setuptools`是一个Python包，允许开发人员轻松创建可安装的包。`setuptools`将捆绑代码，以便`pip`和`easy_install`可以自动安装它们，并且甚至可以将你的包上传到**Python
    Package Index**（**PyPI**）。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All the packages that we have been installing from `pip` have come from PyPI.
    To see all the available packages, go to [https://pypi.python.org/pypi](https://pypi.python.org/pypi).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直从PyPI安装的所有包都来自`pip`。要查看所有可用的包，请转到[https://pypi.python.org/pypi](https://pypi.python.org/pypi)。
- en: 'All that is needed to get this functionality is to fill out the `setup.py`
    file:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得这个功能，只需要填写`setup.py`文件即可。
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This code uses the `setup` function from `setuptools` to find your source code
    and make sure that the machine that is installing your code has the required packages.
    Most of the attributes are rather self-explanatory, except the package attribute,
    which uses the `find_packages` function from `setuptools`. What the `package`
    attribute does is it finds which parts of our source code are part of the package
    to be released. We use the `find_packages` method to automatically find which
    parts of the code to include. This is based on some sane defaults, such as looking
    for directories with `__init__.py` files and excluding common file extensions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用`setuptools`中的`setup`函数来查找你的源代码，并确保安装你的代码的机器具有所需的包。大多数属性都相当容易理解，除了`package`属性，它使用`setuptools`中的`find_packages`函数。`package`属性的作用是找到我们源代码中要发布的部分。我们使用`find_packages`方法自动找到要包含的代码部分。这基于一些合理的默认值，比如查找带有`__init__.py`文件的目录并排除常见的文件扩展名。
- en: Although it is not mandatory, this setup also contains metadata about the author
    and the license, which would be included on the PyPI page if we were to upload
    this there. There is a lot more customization available in the `setup` function,
    so I encourage you to read the documentation at [http://pythonhosted.org/setuptools/](http://pythonhosted.org/setuptools/).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不是强制性的，但这个设置也包含了关于作者和许可的元数据，如果我们要在PyPI页面上上传这个设置，这些信息也会被包含在其中。`setup`函数中还有更多的自定义选项，所以我鼓励你阅读[http://pythonhosted.org/setuptools/](http://pythonhosted.org/setuptools/)上的文档。
- en: 'You can now install this package on your machine by running the following commands:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过运行以下命令在你的机器上安装这个包：
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will install your code into your Python `packages` directory, or if you''re
    using `virtualenv`, it will install it to the local `packages` directory. Then,
    you can import your place on package via:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把你的代码安装到Python的`packages`目录中，或者如果你使用`virtualenv`，它将安装到本地的`packages`目录中。然后，你可以通过以下方式导入你的包：
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Modifying the response with Flask extensions
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Flask扩展修改响应
- en: So, we have created an extension that adds new functionality to our templates.
    But how would we create an extension which modifies the behavior of our app at
    the request level? To demonstrate this, let's create an extension that modifies
    all the responses from Flask by compressing the contents of the response. This
    is a common practice in web development in order to speed up page load times,
    as compressing objects with a method like **gzip** is very fast and relatively
    cheap CPU-wise. Normally, this would be handled at the server level. So, unless
    you wish to host your app with only Python code, which is possible and will be
    covered in [Chapter 13](ch13.html "Chapter 13. Deploying Flask Apps"), *Deploying
    Flask Apps*, this extension really doesn't have much use in the real world.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们创建了一个扩展，为我们的模板添加了新的功能。但是，我们如何创建一个修改应用程序在请求级别行为的扩展呢？为了演示这一点，让我们创建一个扩展，它通过压缩响应的内容来修改Flask的所有响应。这是Web开发中的常见做法，以加快页面加载时间，因为使用像**gzip**这样的方法压缩对象非常快速，而且在CPU方面相对便宜。通常，这将在服务器级别处理。因此，除非你希望仅使用Python代码托管你的应用程序，这在现实世界中并没有太多用处。
- en: To achieve this, we will use the `gzip` module in the Python standard library
    to compress the contents after each request is processed. We will also have to
    add special HTTP headers into the response in order for the browser to know that
    the content is compressed. We will also need to check in the HTTP request headers
    whether the browser can accept gzipped contents.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将使用Python标准库中的`gzip`模块来在每个请求处理后压缩内容。我们还需要在响应中添加特殊的HTTP头，以便浏览器知道内容已经被压缩。我们还需要在HTTP请求头中检查浏览器是否能接受gzip压缩的内容。
- en: 'Just as before, our content will initially reside in the `extensions.py` file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 就像以前一样，我们的内容最初将驻留在`extensions.py`文件中：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Just as with the previous extension, our initializer for the compress object
    accommodates both the normal Flask setup and the application factory setup. In
    the `after_request` method, instead of registering a blueprint, we register a
    new function on the after-request event so that our extension can compress the
    results.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 就像以前的扩展一样，我们的压缩对象的初始化器适应了普通的Flask设置和应用工厂设置。在`after_request`方法中，我们注册一个新的函数来在请求后事件上注册一个新函数，以便我们的扩展可以压缩结果。
- en: The `after_request` method is where the real logic of the extension comes into
    play. First, it checks whether the browser accepts gzip encoding by looking at
    the `Accept-Encoding` value in the request header. If the browser does not accept
    gzip, or did not return a successful response, the function just returns the contents
    and makes no modifications to it. However, if the browser does accept our content
    and the response was successful, then we will compress the content. We use another
    standard library class named `BytesIO`, which allows file streams to be written
    and stored in memory, and not in an intermediate file. This is necessary because
    the `GzipFile` object expects to write to a file object.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`after_request`方法是扩展的真正逻辑所在。首先，它通过查看请求头中的`Accept-Encoding`值来检查浏览器是否接受gzip编码。如果浏览器不接受gzip，或者没有返回成功的响应，函数将只返回内容并不对其进行任何修改。但是，如果浏览器接受我们的内容并且响应成功，那么我们将压缩内容。我们使用另一个名为`BytesIO`的标准库类，它允许文件流被写入和存储在内存中，而不是在中间文件中。这是必要的，因为`GzipFile`对象期望写入文件对象。'
- en: After the data is compressed, we set the response objects' data to the results
    of the compression and set the necessary HTTP header values in the response as
    well. Finally, the gzip contents are returned to the browser, and the browser
    then decompresses the contents, significantly speeding up the page load times.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 数据压缩后，我们将响应对象的数据设置为压缩的结果，并在响应中设置必要的HTTP头值。最后，gzip内容被返回到浏览器，然后浏览器解压内容，大大加快了页面加载时间。
- en: In order to test the functionality in your browser, you have to disable **Flask
    Debug Toolbar**, because at the time of writing there is a bug in its code where
    it expects all responses to be encoded in UTF-8.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试浏览器中的功能，您必须禁用**Flask Debug Toolbar**，因为在撰写本文时，其代码中存在一个bug，它期望所有响应都以UTF-8编码。
- en: If you reload the page nothing should look different. However, if you use the
    developer tools in the browser of your choice and inspect the responses, you will
    see that they are compressed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果重新加载页面，什么都不应该看起来不同。但是，如果您使用所选浏览器的开发人员工具并检查响应，您将看到它们已经被压缩。
- en: Summary
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now that we went through two different examples of different types of Flask
    extensions, you should have a very clear understanding of how most of the Flask
    extensions that we used work. Using the knowledge that you have now, you should
    be able to add any extra functionality to Flask that you need for your specific
    application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经通过了两个不同类型的Flask扩展的示例，您应该非常清楚我们使用的大多数Flask扩展是如何工作的。利用您现在拥有的知识，您应该能够为您的特定应用程序添加任何额外的Flask功能。
- en: In the next chapter, we are going to look at how to add testing to our application
    to take out the guesswork of whether changes we made to the code have broken any
    of the functionality of our application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看如何向我们的应用程序添加测试，以消除我们对代码更改是否破坏了应用程序功能的猜测。
