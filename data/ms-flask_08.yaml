- en: Chapter 8. Building RESTful APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。构建RESTful API
- en: Representational State Transfer, or **REST**, is a method of transferring information
    between a client and a server. On the Web, REST is used on top of HTTP and allows
    browsers and servers to easily communicate by leveraging basic HTTP commands.
    By using HTTP commands, REST is platform and programming language agnostic, and
    decouples the client and the server for easier development. This is typically
    used in JavaScript applications that need to pull or update user information on
    the server. REST is also used to provide outside developers with a common interface
    to user data. For example, Facebook and Twitter use REST in their application
    program interface (**API**), to allow developers to get information without having
    to parse the website's HTML.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 表述状态转移，或者**REST**，是在客户端和服务器之间传输信息的一种方法。在Web上，REST是建立在HTTP之上的，并允许浏览器和服务器通过利用基本的HTTP命令轻松通信。通过使用HTTP命令，REST是平台和编程语言无关的，并且解耦了客户端和服务器，使开发更加容易。这通常用于需要在服务器上拉取或更新用户信息的JavaScript应用程序。REST还用于为外部开发人员提供用户数据的通用接口。例如，Facebook和Twitter在其应用程序编程接口（**API**）中使用REST，允许开发人员获取信息而无需解析网站的HTML。
- en: What is REST
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST是什么
- en: 'Before getting into the details of REST, let''s look at an example. With a
    client, in this case, a web browser, and a server, the client sends a request
    to the server over HTTP for some models as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解REST的细节之前，让我们看一个例子。使用一个客户端，这里是一个Web浏览器，和一个服务器，客户端通过HTTP向服务器发送请求以获取一些模型，如下所示：
- en: '![What is REST](img/B03929_08_01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![REST是什么](img/B03929_08_01.jpg)'
- en: The server will then respond with a document containing all the models.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然后服务器将回应包含所有模型的文档。
- en: '![What is REST](img/B03929_08_02.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![REST是什么](img/B03929_08_02.jpg)'
- en: 'The client can then modify the data on the server through a `PUT` HTTP request:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然后客户端可以通过`PUT` HTTP请求修改服务器上的数据：
- en: '![What is REST](img/B03929_08_03.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![REST是什么](img/B03929_08_03.jpg)'
- en: Then the server will respond that it has modified the data. This is a very simplified
    example, but it will serve as a backdrop to how REST is defined.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后服务器将回应已经修改了数据。这只是一个非常简化的例子，但它将作为REST定义的背景。
- en: Rather than a strict standard, REST lays out a set of constraints on communications
    to define a methodology that can be implemented in many ways. These constraints
    are born out of years of trial and error with other communication protocols, such
    as **Remote Procedure Call** (**RPC**) or **Simple Object Access Protocol** (**SOAP**).
    These protocols fell by the wayside due to their strictness, verboseness, and
    the difficulty in creating APIs with them. The issues with these systems were
    identified, and REST's constraints were created to keep these issues from happening
    again.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: REST不是严格的标准，而是对通信的一组约束，以定义一种可以以多种方式实现的方法。这些约束是通过多年与其他通信协议（如**远程过程调用**（**RPC**）或**简单对象访问协议**（**SOAP**））的试验和错误产生的。这些协议由于其严格性、冗长性和使用它们创建API的困难而被淘汰。这些系统的问题被识别出来，REST的约束被创建出来，以防止这些问题再次发生。
- en: The first constraint requires that the client and the server must have a separation
    of concerns. The client cannot handle permanent data storage, and the server cannot
    handle anything with the user interface.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个约束要求客户端和服务器必须有关注点的分离。客户端不能处理永久数据存储，服务器不能处理任何与用户界面有关的事务。
- en: The second constraint is that the server must be stateless. What this means
    is that any information that is necessary to handle requests is stored in the
    request itself or by the client. An example of the server being stateless is the
    session object in Flask. The session object does not store its information on
    the server, but stores it on the client in a cookie. The cookie is sent along
    with every request for the server to parse and determine if the necessary data
    for the requested resource is stored inside it rather than the server storing
    session information for every user.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个约束是服务器必须是无状态的。这意味着处理请求所需的任何信息都存储在请求本身或由客户端存储。服务器无状态的一个例子是Flask中的会话对象。会话对象不会将其信息存储在服务器上，而是将其存储在客户端的cookie中。每次请求都会发送cookie给服务器解析，并确定所请求资源的必要数据是否存储在其中，而不是服务器为每个用户存储会话信息。
- en: 'The third constraint is that all resources provided must have a uniform interface.
    There are many different parts to this constraint, which are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个约束是提供的所有资源必须具有统一的接口。这个约束有许多不同的部分，如下所示：
- en: The interface is based around resources, which are models in our case.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口是围绕资源构建的，在我们的案例中是模型。
- en: Data sent by the server is not the actual data in the server, but a representation.
    For example, the actual database is not sent with each request, but a JSON abstraction
    of the data.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器发送的数据不是服务器中的实际数据，而是一个表示。例如，实际数据库不会随每个请求发送，而是发送数据的JSON抽象。
- en: The data sent by the server is enough to allow the client to modify the data
    on the server. In the preceding example, the IDs passed to the client filled this
    role.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器发送的数据足以让客户端修改服务器上的数据。在前面的例子中，传递给客户端的ID起到了这个作用。
- en: Every resource provided by the API must be represented and accessed in the same
    manner. For example, one resource cannot be represented in XML and one in JSON,
    one over raw TCP and one over HTTP.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API提供的每个资源必须以相同的方式表示和访问。例如，一个资源不能以XML表示，另一个以JSON表示，一个通过原始TCP，一个通过HTTP。
- en: The final constraint is that the system must allow for layers. Load balancers,
    proxies, caches, and other servers and services can act between the client and
    the server as long as the final result is the same as if they were not there.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个约束是系统必须允许层。负载均衡器、代理、缓存和其他服务器和服务可以在客户端和服务器之间起作用，只要最终结果与它们不在那里时相同。
- en: 'When a system adheres to all these constraints, it is considered to be a RESTful
    system. The most common forms of RESTful systems are built of HTTP and JSON. Each
    resource is located on its own URL path and modified with different HTTP request
    types. Generally, it takes the following form:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统遵循所有这些约束时，被认为是一个RESTful系统。最常见的RESTful系统形式是由HTTP和JSON构建的。每个资源位于自己的URL路径上，并使用不同的HTTP请求类型进行修改。通常采用以下形式：
- en: '| HTTP method | URL | Action |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| HTTP方法 | URL | 操作 |'
- en: '| --- | --- | --- |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `GET` | `http://host/resource` | Get all the resource representations |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `http://host/resource` | 获取所有资源表示 |'
- en: '| `GET` | `http://host/resource/1` | Get the resource with an ID of one |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `http://host/resource/1` | 获取ID为1的资源 |'
- en: '| `POST` | `http://host/resource` | Create a new resource from the form data
    in the `POST` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `POST` | `http://host/resource` | 从`POST`中的表单数据创建新资源 |'
- en: '| `PUT` | `http://host/resource/1` | Modify the existing data of the resource
    with the ID of one |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `PUT` | `http://host/resource/1` | 修改ID为1的资源的现有数据 |'
- en: '| `DELETE` | `http://host/resource/1` | Delete the resource with the ID of
    one |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE` | `http://host/resource/1` | 删除ID为1的资源 |'
- en: 'As an example, a response to the second `GET` request would look like the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对第二个`GET`请求的响应将如下所示：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In REST APIs, it is also very important to return the correct HTTP status code
    with the response data, to notify the clients of what actually happened on the
    server without the client resorting to parsing the returned message. Here is the
    list of the main HTTP codes used in REST APIs and their meaning.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在REST API中，返回正确的HTTP状态代码与响应数据同样非常重要，以便通知客户端服务器上实际发生了什么，而无需客户端解析返回的消息。以下是REST
    API中使用的主要HTTP代码及其含义的列表。
- en: '| HTTP code | Name | Meaning |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| HTTP代码 | 名称 | 含义 |'
- en: '| --- | --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 200 | OK | The default code of HTTP. The request was successful, and the
    data was returned. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 200 | OK | HTTP的默认代码。请求成功，并返回了数据。 |'
- en: '| 201 | Created | The request was successful, and a new resource was created
    on the server. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 201 | 创建成功 | 请求成功，并在服务器上创建了一个新资源。 |'
- en: '| 204 | No content | The request was successful, but the response returned
    no content. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 204 | 无内容 | 请求成功，但响应未返回任何内容。 |'
- en: '| 400 | Bad request | The request was denied because of some perceived client
    error—either a malformed request or missing required data. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 400 | 错误请求 | 请求被拒绝，因为存在某种感知的客户端错误，要么是格式错误的请求，要么是缺少必需的数据。 |'
- en: '| 401 | Unauthorized | The request was denied because the client is not authenticated
    and should authenticate before requesting this resource again. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 401 | 未经授权 | 请求被拒绝，因为客户端未经身份验证，应在再次请求此资源之前进行身份验证。 |'
- en: '| 403 | Forbidden | The request was denied because the client does not have
    permission to access this resource. This is in contrast to the 401 code, which
    assumes that the user is not authenticated. The 403 code says the resource is
    not accessible regardless of authentication. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 403 | 禁止 | 请求被拒绝，因为客户端没有权限访问此资源。这与401代码相反，后者假定用户未经身份验证。403代码表示无论身份验证如何，资源都是不可访问的。
    |'
- en: '| 404 | Not found | The requested resource does not exist. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 404 | 未找到 | 请求的资源不存在。 |'
- en: '| 405 | Method not allowed | The request was denied because the HTTP method
    is not available for the URL. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 405 | 方法不允许 | 请求被拒绝，因为URL不可用的HTTP方法。 |'
- en: Setting up a RESTful Flask API
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置RESTful Flask API
- en: In our app, we will create a RESTful interface to the blog post data in our
    database. The representations of the data will be sent as JSON. The data will
    be retrieved and modified using the general form in the preceding table, but the
    URI will be `/api/posts`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们将在数据库中创建一个博客文章数据的RESTful接口。数据的表示将以JSON格式发送。数据将使用前面表格中的一般形式进行检索和修改，但URI将是`/api/posts`。
- en: We could just use the standard Flask views to create the API, but the Flask
    extension **Flask Restful** makes the task much easier.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用标准的Flask视图来创建API，但Flask扩展**Flask Restful**使任务变得更加容易。
- en: 'To install Flask Restful:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Flask Restful：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the `extensions.py` file, initialize the `Api` object that will handle all
    the routes:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在`extensions.py`文件中，初始化将处理所有路由的`Api`对象：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The control logic and views for our Post API should be stored in a new folder
    named `rest` in the `controllers` folder. In this folder, we will need an empty
    `__init__.py` and a file named `post.py`. Inside `post.py`, let''s create a simple*Hello
    World* example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '我们的Post API的控制逻辑和视图应存储在`controllers`文件夹中的新文件夹`rest`中。在此文件夹中，我们需要一个空的`__init__.py`和一个名为`post.py`的文件。在`post.py`中，让我们创建一个简单的*Hello
    World*示例： '
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In Flask Restful, every REST resource is defined as a class that inherits from
    the `Resource` object. Much like the `MethodView` object shown in [Chapter 4](ch04.html
    "Chapter 4. Creating Controllers with Blueprints"), *Creating Controllers with
    Blueprints*, any class that inherits from the `Resource` object defines its logic
    with methods named after the HTTP methods. For example, when the `GET` HTTP method
    hits the `PostApi` class, the `get` method will be executed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在Flask Restful中，每个REST资源都被定义为从`Resource`对象继承的类。就像[第4章](ch04.html "第4章。使用蓝图创建控制器")中显示的`MethodView`对象一样，从`Resource`对象继承的任何类都使用命名为HTTP方法的方法定义其逻辑。例如，当`GET`
    HTTP方法命中`PostApi`类时，将执行`get`方法。
- en: 'Just like the other Flask extensions we used, the `Api` object will need to
    be initialized on the app object in the `__init__.py` file, which holds the `create_app`
    function. The `PostApi` class will also have its route defined with the `add_resource()`
    method of the `Api` object:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们使用的其他Flask扩展一样，在`__init__.py`文件中的应用程序对象上需要初始化`Api`对象，该文件包含`create_app`函数。`PostApi`类还将使用`Api`对象的`add_resource()`方法定义其路由：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, if you open the `/api/post` URI in the browser, the *Hello World* JSON
    will be displayed.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您在浏览器中打开`/api/post` URI，将显示*Hello World* JSON。
- en: GET requests
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GET请求
- en: 'For some of our `GET`, `PUT`, and `DELETE` requests, our API will need the
    ID of the Post to modify. The `add_resource` method can take multiple routes,
    so let''s add the second route that captures the passed ID:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的一些`GET`，`PUT`和`DELETE`请求，我们的API将需要修改帖子的ID。`add_resource`方法可以接受多个路由，因此让我们添加捕获传递的ID的第二个路由：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now the `get` method will need to accept `post_id` as a keyword argument:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`get`方法将需要接受`post_id`作为关键字参数：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The data to be sent to the client must be a representation of the Post objects
    in JSON, so how will our Post objects be translated? Flask Restful provides a
    way of translating any object to JSON through the `fields` object and the `marshal_with`
    function decorator.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要发送到客户端的数据必须是JSON中的Post对象的表示，那么我们的Post对象将如何转换？Flask Restful通过`fields`对象和`marshal_with`函数装饰器提供了将任何对象转换为JSON的方法。
- en: Output formatting
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出格式
- en: 'The output format is defined by creating a dictionary of `field` objects that
    represent basic types. The key of the field defines what attribute the field will
    try to translate. By passing the dictionary to the `marshal_with` decorator, any
    object the `get` method attempts to return will be first translated with the dictionary.
    This also works for lists of objects:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输出格式是通过创建代表基本类型的`field`对象的字典来定义的。字段的键定义了字段将尝试转换的属性。通过将字典传递给`marshal_with`装饰器，`get`方法尝试返回的任何对象都将首先使用字典进行转换。这也适用于对象列表：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'While reloading the API in the browser, every Post object will be shown in
    JSON format. However, the problem is that the API should not return the HTML from
    the WYSIWYG editor in the post creation form. As stated earlier, the server should
    not be concerned with UI, and HTML is purely for output specification. To solve
    this, we will need a custom field object that strips HTML from strings. In a new
    file in the `rest` folder named `fields.py`, add the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中重新加载API时，每个Post对象将以JSON格式显示。但是，问题在于API不应返回帖子创建表单中所见的WYSIWYG编辑器中的HTML。如前所述，服务器不应关心UI，而HTML纯粹是用于输出规范。为了解决这个问题，我们需要一个自定义字段对象，它可以从字符串中去除HTML。在名为`fields.py`的`rest`文件夹中添加以下内容：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, our `post_fields` dictionary should be updated to work with the new field:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`post_fields`字典应该更新以适应新字段：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using the standard library `HTMLParser` module, we now have a `strip_tags` function
    that will return any string cleaned of HTML tags. A new field type `HTMLfield`
    is defined by inheriting from the `fields.Raw` class and sending values through
    the `strip_tags` function. If the page is reloaded once again, all the HTML is
    gone and just the text remains.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标准库`HTMLParser`模块，我们现在有一个`strip_tags`函数，它将返回任何已清除HTML标记的字符串。通过从`fields.Raw`类继承并通过`strip_tags`函数发送值，定义了一个新的字段类型`HTMLfield`。如果页面再次重新加载，所有HTML都将消失，只剩下文本。
- en: 'Flask Restful provides many default fields:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Flask Restful提供了许多默认字段：
- en: '`fields.String`: This converts the value using `str()`.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.String`：这将使用`str()`转换值。'
- en: '`fields.FormattedString`: This passes formatted string in Python with the variable
    name in brackets.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.FormattedString`：这在Python中传递格式化的字符串，变量名在括号中。'
- en: '`fields.Url`: This provides the same functionality as the Flask `url_for` function.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.Url`：这提供了与Flask `url_for`函数相同的功能。'
- en: '`fields.DateTime`: This converts a Python `date` or `datetime` object to a
    string. The format keyword argument specifies if the string should be an `ISO8601`
    date or an `RFC822` date.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.DateTime`：这将Python `date`或`datetime`对象转换为字符串。格式关键字参数指定字符串应该是`ISO8601`日期还是`RFC822`日期。'
- en: '`fields.Float`: This converts the value to a string representation of a float.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.Float`：这将将值转换为浮点数的字符串表示。'
- en: '`fields.Integer`: This converts the value to a string representation of an
    integer.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.Integer`：这将将值转换为整数的字符串表示。'
- en: '`fields.Nested`: This allows nested objects to be represented by another dictionary
    of field objects.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.Nested`：这允许通过另一个字段对象的字典来表示嵌套对象。'
- en: '`fields.List`: Much like the MongoEngine API, this field takes another field
    type as an argument and tries to convert a list of values into a JSON list of
    the field types.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.List`：与MongoEngine API类似，此字段将另一个字段类型作为参数，并尝试将值列表转换为字段类型的JSON列表。'
- en: '`fields.Boolean`: This converts the value to a string representation of a boolean
    argument.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.Boolean`：这将将值转换为布尔参数的字符串表示。'
- en: 'There are two more fields that should be added to the returned data: the author
    and the tags. The comments will be left out because they should be contained under
    their own resource.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 还有两个字段应该添加到返回的数据中：作者和标签。评论将被省略，因为它们应该包含在自己的资源下。
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `author` field uses the attribute keyword argument of the `field` class.
    This allows any attribute of the object to be represented rather than just base-level
    properties. Because the many-to-many relationship of the tags returns a list of
    objects, the same solution cannot be used with the tags. Using the `NestedField`
    type inside a `ListField` and another dictionary of fields, a list of tag dictionaries
    can now be returned. This has the added benefit for the end users of the API of
    giving them a tag ID to easily query as if there was a tag API.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`author`字段使用`field`类的属性关键字参数。这允许表示对象的任何属性，而不仅仅是基本级别的属性。因为标签的多对多关系返回对象列表，所以不能使用相同的解决方案。使用`ListField`中的`NestedField`类型和另一个字段字典，现在可以返回标签字典的列表。这对API的最终用户有额外的好处，因为它们可以轻松查询标签ID，就像有一个标签API一样。'
- en: Request arguments
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请求参数
- en: While sending a `GET` request to the base of the resource, our API currently
    sends all the Post objects in the database. This is acceptable if the number of
    objects is low or the number of people using the API is low. However, if either
    increases, the API will put a large amount of stress on the database. Much like
    the Web interface, the API should be paginated as well.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在向资源的基础发送`GET`请求时，我们的API当前发送数据库中的所有Post对象。如果对象的数量较少或使用API的人数较少，则这是可以接受的。但是，如果任一方增加，API将对数据库施加大量压力。与Web界面类似，API也应该进行分页。
- en: 'In order to achieve this, our API will need to accept a `GET` query string
    parameter `page` that specifies which page to load. Flask Restful provides a method
    to grab request data and parse it. If the required arguments aren''t there, or
    the types don''t match, Flask Restful will autocreate a JSON error message. In
    a new file in the `rest` folder named `parsers.py`, add the following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们的API将需要接受一个`GET`查询字符串参数`page`，指定要加载的页面。Flask Restful提供了一种方法来获取请求数据并解析它。如果必需的参数不存在，或者类型不匹配，Flask
    Restful将自动创建一个JSON错误消息。在名为`parsers.py`的`rest`文件夹中的新文件中，添加以下代码：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now the `PostApi` class will need to be updated to work with our parser:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`PostApi`类将需要更新以与我们的解析器一起使用：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding example, the `RequestParser` looks for the `page` variable
    in either the query string or the request header and returns the page of Post
    objects from that page.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，`RequestParser`在查询字符串或请求标头中查找`page`变量，并从该页面返回Post对象的页面。
- en: 'After a parser object is created with `RequestParser`, arguments can be added
    using the `add_argument` method. The first argument of `add_argument` is the key
    of the argument to parse, but `add_argument` also takes a lot of keyword arguments:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`RequestParser`创建解析器对象后，可以使用`add_argument`方法添加参数。`add_argument`的第一个参数是要解析的参数的键，但`add_argument`还接受许多关键字参数：
- en: '`action`: This is what the parser does with the value after it has been successfully
    parsed. The two available options are `store` and `append`. `store` adds the parsed
    value to the returned dictionary. `append` adds the parsed value to the end of
    a list in the dictionary.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`action`：这是解析器在成功解析后对值执行的操作。两个可用选项是`store`和`append`。`store`将解析的值添加到返回的字典中。`append`将解析的值添加到字典中列表的末尾。'
- en: '`case_sensitive`: This is a `boolean` argument to allow or disallow the keys
    to be case insensitive.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`case_sensitive`：这是一个`boolean`参数，用于允许或不允许键区分大小写。'
- en: '`choices`: This is like MongoEngine, a list of the allowed values for the argument.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`choices`：这类似于MongoEngine，是参数允许的值列表。'
- en: '`default`: This is the value produced if the argument is absent from the request.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default`：如果请求中缺少参数，则生成的值。'
- en: '`dest`: This is the key to add the parsed value in the return data.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dest`：这是将解析值添加到返回数据中的键。'
- en: '`help`: This is a message to return to the user if validation fails.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`help`：这是一个消息，如果验证失败，将返回给用户。'
- en: '`ignore`: This is a `boolean` argument to allow or disallow failures of the
    type conversion.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ignore`：这是一个`boolean`参数，允许或不允许类型转换失败。'
- en: '`location`: this indicates where to look for the data. The locations available
    are:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`location`：这表示要查找数据的位置。可用的位置是：'
- en: '`args` to look in the `GET` query string'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args`以查找`GET`查询字符串'
- en: '`headers` to look in the HTTP request headers'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`headers`以查找HTTP请求标头'
- en: '`form` to look in the HTTP `POST` data'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form`以查找HTTP `POST`数据'
- en: '`cookies` to look in the HTTP cookies'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cookies`以查找HTTP cookies'
- en: '`json` to look in any sent JSON'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json`以查找任何发送的JSON'
- en: '`files` to look in the `POST` file data'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`files`以查找`POST`文件数据'
- en: 'required: this is a `boolean` argument to determine if the argument is optional.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: required：这是一个`boolean`参数，用于确定参数是否是可选的。
- en: 'store_missing: this is a `boolean` argument to determine if the default value
    should be stored if the argument is not in the request.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: store_missing：这是一个`boolean`参数，用于确定是否应存储默认值，如果参数不在请求中。
- en: 'type: this is the Python type to convert the passed value.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型：这是Python类型，用于转换传递的值。
- en: 'Using the Flask Restful parser, it is very easy to add new parameters to the
    API. For example, let''s add a user argument that allows us to search for all
    posts by a user. First, in the `parsers.py` file, add the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Flask Restful解析器，很容易向API添加新参数。例如，让我们添加一个用户参数，允许我们搜索用户发布的所有帖子。首先，在`parsers.py`文件中，添加以下内容：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, in `post.py`, add the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`post.py`中添加以下内容：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When the Flask `abort` function is called from a `Resource`, Flask Restful will
    automatically create an error message to be returned with the status code.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当从`Resource`调用Flask的`abort`函数时，Flask Restful将自动创建一个错误消息，以与状态代码一起返回。
- en: POST requests
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POST请求
- en: 'Using our new knowledge of the Flask Restful parser, the `POST` endpoint can
    be added. First, we will need a parser that will take a title, the body text,
    and a list of tags. In the `parser.py` file, add the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们对Flask Restful解析器的新知识，可以添加`POST`端点。首先，我们需要一个解析器，它将获取标题、正文文本和标签列表。在`parser.py`文件中，添加以下内容：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, the `PostApi` class will need a `post` method to handle incoming requests.
    The `post` method will use the given values for the title and body text. Also,
    if the tags key exists, then add the tags to the post, which creates new tags
    if the passed ones do not exist:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`PostApi`类将需要一个`post`方法来处理传入的请求。`post`方法将使用给定的标题和正文文本。此外，如果存在标签键，则将标签添加到帖子中，如果传递的标签不存在，则创建新标签：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: At the `return` statement, if a tuple is returned, the second argument is treated
    as the status code. There is also a third value that acts as extra header values
    by passing a dictionary.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在`return`语句处，如果返回一个元组，则第二个参数将被视为状态代码。还有一个作为额外标头值的第三个值，通过传递一个字典。
- en: 'In order to test this code, a different tool than the web browser has to be
    used, as creating custom POST requests without a browser plugin is very difficult
    in a browser. A tool named curl will be used instead. **Curl** is a command-line
    tool included in Bash that allows for creation and manipulation of HTTP requests.
    To perform a `GET` request with curl, just pass the URL:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这段代码，必须使用与Web浏览器不同的工具，因为在浏览器中很难创建自定义的POST请求而不使用浏览器插件。而是使用名为curl的工具。**Curl**是Bash中包含的命令行工具，允许创建和操作HTTP请求。要使用curl执行`GET`请求，只需传递URL：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To pass `POST` variables, the `d` flag is used:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要传递`POST`变量，使用`d`标志：
- en: '[PRE18]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The id of the newly created post should be returned. However, if you now load
    the post you created in the browser, an error should appear. This is because our
    `Post` object had no user associated with it. In order to have Post objects assigned
    to users and for only authenticated users of the website to have permission to
    `POST` posts, we need to create an authentication system.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建的帖子的id应该被返回。但是，如果你现在在浏览器中加载你创建的帖子，会出现错误。这是因为我们的`Post`对象没有与之关联的用户。为了让帖子对象分配给用户，并且只有网站的经过身份验证的用户才有权限`POST`帖子，我们需要创建一个身份验证系统。
- en: Authentication
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份验证
- en: To solve our authentication problems, Flask-Login could be used and the cookie
    data from the login could be checked. However, this would require developers who
    wish to use our API to have their program login through the web interface. We
    could also have developers send their login data with every request, but it's
    a good design practice to only send sensitive information when absolutely necessary.
    Instead, our API will provide an `auth` endpoint that allows them to send login
    credentials and get an access token back.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决我们的身份验证问题，可以使用Flask-Login，并检查登录的cookie数据。然而，这将要求希望使用我们的API的开发人员通过Web界面登录他们的程序。我们也可以让开发人员在每个请求中发送他们的登录数据，但是只在绝对必要时发送敏感信息是一个很好的设计实践。相反，我们的API将提供一个`auth`端点，允许他们发送登录凭据并获得一个访问令牌。
- en: 'This `access` token will be created by the Python library *it''s dangerous*,
    which Flask uses to encode the session data on a cookie, so it should already
    be installed. The token will be a Python dictionary cryptographically signed by
    the app''s secret key containing the id of the user. This token has an expiration
    date encoded inside it that will not allow it to be used after it expires. This
    means that even if the token is stolen by a malicious user, it will only be useful
    for a limited amount of time before the client has to reauthenticate. First, a
    new parser is needed to handle parsing the username and password data:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`access`令牌将由Flask使用的Python库*it's dangerous*创建，用于对cookie上的会话数据进行编码，因此它应该已经安装。令牌将是一个由应用程序的秘钥加密签名的Python字典，其中包含用户的id。这个令牌中编码了一个过期日期，在过期后将不允许使用。这意味着即使令牌被恶意用户窃取，它在客户端必须重新进行身份验证之前只能在有限的时间内使用。首先，需要一个新的解析器来处理解析用户名和密码数据：
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In a new file named `auth.py` inside the `rest` folder, add the following code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在`rest`文件夹内新建一个名为`auth.py`的文件，添加以下代码：
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Do not allow users to send their login credentials across an unsecured connection!
    HTTPS is required if you wish to protect your user's data. The best solution would
    be to require HTTPS for your entire app to avoid the possibility.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 不要允许用户通过不安全的连接发送他们的登录凭据！如果你希望保护用户的数据，需要使用HTTPS。最好的解决方案是要求整个应用程序都使用HTTPS，以避免可能性。
- en: 'Users of our API will have to pass the token received from this resource to
    any method that requires user credentials. However, first we need a function that
    verifies the token. In the `models.py` file, the `verify_auth_token` will be a
    `staticmethod` on the `User` object:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的API的用户必须将从这个资源接收到的令牌传递给任何需要用户凭据的方法。但是，首先我们需要一个验证令牌的函数。在`models.py`文件中，`verify_auth_token`将是`User`对象上的`staticmethod`：
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Our `POST` parser needs a token argument to accept the `auth` token:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`POST`解析器需要一个令牌参数来接受`auth`令牌：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, our `post` method can properly add new posts as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`post`方法可以正确地添加新的帖子，如下所示：
- en: '[PRE23]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Using curl, our `auth` and `post` APIs can now be tested. For the sake of brevity,
    the token is omitted here as it is very long:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 使用curl，我们现在可以测试我们的`auth`和`post`API。为了简洁起见，这里省略了令牌，因为它非常长：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: PUT requests
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PUT请求
- en: 'As listed in the table at the beginning of this chapter, `PUT` requests are
    for changing the values of existing resources. Like the `post` method, the first
    thing to be done is to create a new parser in `parsers.py`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章开头的表格所列，`PUT`请求用于更改现有资源的值。与`post`方法一样，首先要做的是在`parsers.py`中创建一个新的解析器：
- en: '[PRE25]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The logic for the `put` method is very similar to the `post` method. The main
    difference is that each change is optional and any request that does not provide
    a `post_id` is denied:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`put`方法的逻辑与`post`方法非常相似。主要区别在于每个更改都是可选的，任何没有提供`post_id`的请求都将被拒绝：'
- en: '[PRE26]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To test this method, curl can also create `PUT` requests with the `-X` flag:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这个方法，curl也可以使用`-X`标志创建`PUT`请求：
- en: '[PRE27]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: DELETE requests
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DELETE请求
- en: 'Finally, we have the `DELETE` request, which is the simplest of the four supported
    methods. The main difference with the `delete` method is that it returns no content,
    which is the accepted standard with `DELETE` requests:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有`DELETE`请求，这是四种支持方法中最简单的。`delete`方法的主要区别在于它不返回任何内容，这是`DELETE`请求的接受标准：
- en: '[PRE28]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Again, we can test with:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以测试：
- en: '[PRE29]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If everything is successfully deleted, you should receive a 204 status code
    and nothing should show up.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利删除，你应该收到一个204状态码，什么都不应该显示出来。
- en: Before we move on from REST completely, there is one final challenge to the
    reader to test your understanding of Flask Restful. Try to create a comments API
    that is not only modifiable from `http://localhost:5000/api/comments`, but also
    allow developers to modify only those comments on a specific post by using the
    URL `http://localhost:5000/api/post/<int:post_id>/comments`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完全迁移出REST之前，读者还有一个最后的挑战，来测试你对Flask Restful的理解。尝试创建一个评论API，不仅可以从`http://localhost:5000/api/comments`进行修改，还允许开发人员通过URL`http://localhost:5000/api/post/<int:post_id>/comments`来修改特定帖子上的评论。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Our Post API is now a complete feature. If a developer wants, they can create
    a desktop or mobile application using this API, all without using HTML scraping,
    which is a very tedious and long process. Giving the developers who wish to use
    your website as a platform the ability to do so will increase your site's popularity,
    as they will essentially give you free advertising with their app or website.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Post API现在是一个完整的功能。如果开发者希望，他们可以使用这个API创建桌面或移动应用程序，而无需使用HTML抓取，这是一个非常繁琐和漫长的过程。给予希望将您的网站作为平台使用的开发者这样做的能力将增加您网站的受欢迎程度，因为他们实质上会通过他们的应用程序或网站为您提供免费广告。
- en: In the next chapter, we will use the popular program Celery to run programs
    and tasks asynchronously with our application.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用流行的程序Celery来异步运行程序和任务与我们的应用程序。
