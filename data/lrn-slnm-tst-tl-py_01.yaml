- en: Chapter 1. Getting Started with Selenium WebDriver and Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：Selenium WebDriver 和 Python 入门
- en: Selenium automates browsers. It automates the interaction we do in a browser
    window such as navigating to a website, clicking on links, filling out forms,
    submitting forms, navigating through pages, and so on. It works on every major
    browser available out there.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium 自动化浏览器。它自动化我们在浏览器窗口中进行的交互，例如导航到网站、点击链接、填写表单、提交表单、浏览页面等。它适用于所有主要浏览器。
- en: In order to use Selenium WebDriver, we need a programing language to write automation
    scripts. The language that we select should also have a Selenium client library
    available.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Selenium WebDriver，我们需要一种编程语言来编写自动化脚本。我们选择的编程语言也应该有可用的 Selenium 客户端库。
- en: In this book, we will use Python along with the Selenium WebDriver client library
    to create automated scripts. Python is a widely used general-purpose, high-level
    programming language. It's easy and its syntax allows us to express concepts in
    fewer lines of code. It emphasizes code readability and provides constructs that
    enable us to write programs on both the small and large scale. It also provides
    a number of in-built and user-written libraries to achieve complex tasks quite
    easily.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用 Python 和 Selenium WebDriver 客户端库来创建自动化脚本。Python 是一种广泛使用的通用、高级编程语言。它易于使用，其语法允许我们在更少的代码行中表达概念。它强调代码可读性，并提供使我们能够在小型和大型规模上编写程序的构造。它还提供了一系列内置和用户编写的库，使我们能够轻松地完成复杂任务。
- en: The Selenium WebDriver client library for Python provides access to all the
    Selenium WebDriver features and Selenium standalone server for remote and distributed
    testing of browser-based applications. Selenium Python language bindings are developed
    and maintained by David Burns, Adam Goucher, Maik Röder, Jason Huggins, Luke Semerau,
    Miki Tebeka, and Eric Allenin.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver Python 客户端库提供了对所有 Selenium WebDriver 功能和 Selenium 独立服务器的访问，用于基于浏览器的应用程序的远程和分布式测试。Selenium
    Python 语言绑定由 David Burns、Adam Goucher、Maik Röder、Jason Huggins、Luke Semerau、Miki
    Tebeka 和 Eric Allenin 开发和维护。
- en: The Selenium WebDriver client library is supported on Python Version 2.6, 2.7,
    3.2, and 3.3.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 客户端库支持 Python 版本 2.6、2.7、3.2 和 3.3。
- en: This chapter will introduce you to the Selenium WebDriver client library for
    Python by demonstrating its installation, basic features, and overall structure.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将通过演示其安装、基本功能和整体结构，向您介绍 Selenium WebDriver Python 客户端库。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Installing Python and Selenium package
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Python 和 Selenium 包
- en: Selecting and setting up a Python editor
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择和设置 Python 编辑器
- en: Implementing a sample script using the Selenium WebDriver Python client library
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Selenium WebDriver Python 客户端库实现示例脚本
- en: Implementing cross-browser support with Internet Explorer and Google Chrome
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Internet Explorer 和 Google Chrome 实现跨浏览器支持
- en: Preparing your machine
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备您的机器
- en: As a first step of using Selenium with Python, we'll need to install it on our
    computer with the minimum requirements possible. Let's set up the basic environment
    with the steps explained in the following sections.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 与 Selenium 的第一步，我们需要以尽可能少的最低要求在我们的计算机上安装它。让我们按照以下章节中解释的步骤设置基本环境。
- en: Installing Python
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Python
- en: You will find Python installed by default on most Linux distributions, Mac OS
    X, and other Unix machines. On Windows, you will need to install it separately.
    Installers for different platforms can be found at [http://python.org/download/](http://python.org/download/).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现大多数 Linux 发行版、Mac OS X 和其他 Unix 系统默认已安装 Python。在 Windows 上，你需要单独安装它。不同平台的安装程序可在
    [http://python.org/download/](http://python.org/download/) 找到。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All the examples in this book are written and tested on Python 2.7 and Python
    3.0 on Windows 8 operating systems.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有示例都是在 Windows 8 操作系统上的 Python 2.7 和 Python 3.0 上编写和测试的。
- en: Installing the Selenium package
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Selenium 包
- en: The Selenium WebDriver Python client library is available in the Selenium package.
    To install the Selenium package in a simple way, use the `pip` installer tool
    available at [https://pip.pypa.io/en/latest/](https://pip.pypa.io/en/latest/).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver Python 客户端库包含在 Selenium 包中。要简单安装 Selenium 包，请使用可在 [https://pip.pypa.io/en/latest/](https://pip.pypa.io/en/latest/)
    找到的 `pip` 安装程序工具。
- en: 'With `pip`, you can simply install or upgrade the Selenium package using the
    following command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `pip`，您可以使用以下命令简单地安装或升级 Selenium 包：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is a fairly simple process. This command will set up the Selenium WebDriver
    client library on your machine with all modules and classes that we will need
    to create automated scripts using Python. The `pip` tool will download the latest
    version of the Selenium package and install it on your machine. The optional `–U`
    flag will upgrade the existing version of the installed package to the latest
    version.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当简单的过程。此命令将在您的机器上设置Selenium WebDriver客户端库，包括我们将需要用于创建自动化脚本的Python模块和类。`pip`工具将下载Selenium包的最新版本并在您的机器上安装它。可选的`–U`标志将升级已安装包的现有版本到最新版本。
- en: 'You can also download the latest version of the Selenium package source from
    [https://pypi.python.org/pypi/selenium](https://pypi.python.org/pypi/selenium).
    Just click on the **Download** button on the upper-right-hand side of the page,
    unarchive the downloaded file, and install it with following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从[https://pypi.python.org/pypi/selenium](https://pypi.python.org/pypi/selenium)下载Selenium包的最新版本源代码。只需点击页面右上角的**下载**按钮，解压下载的文件，然后使用以下命令安装：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Browsing the Selenium WebDriver Python documentation
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览Selenium WebDriver Python文档
- en: 'The Selenium WebDriver Python client library documentation is available at
    [http://selenium.googlecode.com/git/docs/api/py/api.html](http://selenium.googlecode.com/git/docs/api/py/api.html)
    as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，Selenium WebDriver Python客户端库文档可在[http://selenium.googlecode.com/git/docs/api/py/api.html](http://selenium.googlecode.com/git/docs/api/py/api.html)找到：
- en: '![Browsing the Selenium WebDriver Python documentation](img/3506OS_01_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![浏览Selenium WebDriver Python文档](img/3506OS_01_01.jpg)'
- en: 'It offers detailed information on all core classes and functions of Selenium
    WebDriver. Also note the following links for Selenium documentation:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了关于Selenium WebDriver所有核心类和函数的详细信息。同时请注意以下Selenium文档链接：
- en: The official documentation at [http://docs.seleniumhq.org/docs/](http://docs.seleniumhq.org/docs/)
    offers documentation for all the Selenium components with examples in supported
    languages
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[http://docs.seleniumhq.org/docs/](http://docs.seleniumhq.org/docs/)的官方文档提供了所有Selenium组件的文档，并附有支持语言的示例
- en: Selenium Wiki at [https://code.google.com/p/selenium/w/list](https://code.google.com/p/selenium/w/list)
    lists some useful topics that we will explore later in this book
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Selenium Wiki在[https://code.google.com/p/selenium/w/list](https://code.google.com/p/selenium/w/list)列出了我们将在本书后面探索的一些有用主题
- en: Selecting an IDE
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择IDE
- en: 'Now that we have Python and Selenium WebDriver set up, we will need an editor
    or an **Integrated Development Environment** (**IDE**) to write automation scripts.
    A good editor or IDE increases the productivity and helps in doing a lot of other
    things that make the coding experience simple and easy. While we can write Python
    code in simple editors such as Emacs, Vim, or Notepad, using an IDE will make
    life a lot easier. There are many IDEs to choose from. Generally, an IDE provides
    the following features to accelerate your development and coding time:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了Python和Selenium WebDriver，我们需要一个编辑器或**集成开发环境**（**IDE**）来编写自动化脚本。一个好的编辑器或IDE可以提高生产力，并帮助完成许多使编码体验简单易行的事情。虽然我们可以在Emacs、Vim或记事本等简单编辑器中编写Python代码，但使用IDE会让生活变得更加容易。有许多IDE可供选择。通常，IDE提供以下功能以加速您的开发和编码时间：
- en: A graphical code editor with code completion and IntelliSense
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有代码完成和IntelliSense的图形代码编辑器
- en: A code explorer for functions and classes
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数和类的代码探索器
- en: Syntax highlighting
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法高亮
- en: Project management
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目管理
- en: Code templates
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码模板
- en: Tools for unit testing and debugging
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试和调试工具
- en: Source control support
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码控制支持
- en: If you're new to Python, or you're a tester working for the first time in Python,
    your development team will help you to set up the right IDE.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是Python的新手，或者您是第一次在Python中工作的测试人员，您的开发团队将帮助您设置正确的IDE。
- en: However, if you're starting with Python for the first time and don't know which
    IDE to select, here are a few choices that you might want to consider.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您是第一次使用Python并且不知道要选择哪个IDE，这里有一些您可能想要考虑的选择。
- en: PyCharm
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyCharm
- en: PyCharm is developed by JetBrains, a leading vendor of professional development
    tools and IDEs such as IntelliJ IDEA, RubyMine, PhpStorm, and TeamCity.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm由JetBrains开发，是一家领先的提供专业开发工具和IDE（如IntelliJ IDEA、RubyMine、PhpStorm和TeamCity）的供应商。
- en: PyCharm is a polished, powerful, and versatile IDE that works pretty well. It
    brings best of the JetBrains experience in building powerful IDEs with lots of
    other features for a highly productive experience.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm是一个精致、强大且多功能的IDE，工作表现相当出色。它将JetBrains在构建功能强大的IDE方面的最佳经验与许多其他功能相结合，以提供高度高效的使用体验。
- en: PyCharm is supported on Windows, Linux, and Mac. To know more about PyCharm
    and its features visit [http://www.jetbrains.com/pycharm/](http://www.jetbrains.com/pycharm/).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm支持Windows、Linux和Mac。要了解更多关于PyCharm及其功能，请访问[http://www.jetbrains.com/pycharm/](http://www.jetbrains.com/pycharm/)。
- en: 'PyCharm comes in two versions—a community edition and a professional edition.
    The community edition is free, whereas you have to pay for the professional edition.
    Here is the PyCharm community edition running a sample Selenium script in the
    following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm有两种版本——社区版和专业版。社区版是免费的，而专业版则需要付费。以下截图展示了正在运行示例Selenium脚本的PyCharm社区版：
- en: '![PyCharm](img/3506OS_01_02.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![PyCharm](img/3506OS_01_02.jpg)'
- en: The community edition is great for building and running Selenium scripts with
    its fantastic debugging support. We will use PyCharm in the rest of this book.
    Later in this chapter, we will set up PyCharm and create our first Selenium script.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 社区版非常适合使用其出色的调试支持构建和运行Selenium脚本。本书的其余部分我们将使用PyCharm。在本章的后面部分，我们将设置PyCharm并创建我们的第一个Selenium脚本。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All the examples in this book are built using PyCharm; however, you can easily
    use these examples in your choice of editor or IDE.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有示例都是使用PyCharm构建的；然而，你可以轻松地将这些示例用于你选择的编辑器或IDE。
- en: The PyDev Eclipse plugin
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyDev Eclipse插件
- en: The PyDev Eclipse plugin is another widely used editor among Python developers.
    Eclipse is a famous open source IDE primarily built for Java; however, it also
    offers support to various other programming languages and tools through its powerful
    plugin architecture.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: PyDev Eclipse插件是Python开发者中广泛使用的另一个编辑器。Eclipse是一个著名的开源IDE，主要用于Java开发；然而，它也通过其强大的插件架构支持各种其他编程语言和工具。
- en: Eclipse is a cross-platform IDE supported on Windows, Linux, and Mac. You can
    get the latest edition of Eclipse at [http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse是一个跨平台IDE，支持Windows、Linux和Mac。你可以在[http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/)获取Eclipse的最新版本。
- en: You need to install the PyDev plugin separately after setting up Eclipse. Use
    the tutorial from *Lars Vogel* to install PyDev at [http://www.vogella.com/tutorials/Python/article.html](http://www.vogella.com/tutorials/Python/article.html)
    to install PyDev. Installation instructions are also available at [http://pydev.org/](http://pydev.org/).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置Eclipse之后，你需要单独安装PyDev插件。使用*Lars Vogel*的教程在[http://www.vogella.com/tutorials/Python/article.html](http://www.vogella.com/tutorials/Python/article.html)安装PyDev。安装说明也可在[http://pydev.org/](http://pydev.org/)找到。
- en: 'Here''s the Eclipse PyDev plugin running a sample Selenium script as shown
    in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Eclipse PyDev插件运行示例Selenium脚本的截图，如下所示：
- en: '![The PyDev Eclipse plugin](img/3506OS_01_03.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![The PyDev Eclipse plugin](img/3506OS_01_03.jpg)'
- en: PyScripter
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyScripter
- en: For the Windows users, PyScripter can also be a great choice. It is open source,
    lightweight, and provides all the features that modern IDEs offer such as IntelliSense
    and code completion, testing, and debugging support. You can find more about PyScripter
    along with its download information at [https://code.google.com/p/pyscripter/](https://code.google.com/p/pyscripter/).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows用户，PyScripter也可以是一个很好的选择。它是开源的、轻量级的，并提供现代IDE所提供的所有功能，如IntelliSense和代码补全、测试和调试支持。你可以在[https://code.google.com/p/pyscripter/](https://code.google.com/p/pyscripter/)找到更多关于PyScripter及其下载信息。
- en: 'Here''s PyScripter running a sample Selenium script as shown in the following
    screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是PyScripter运行示例Selenium脚本的截图，如下所示：
- en: '![PyScripter](img/3506OS_01_04.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![PyScripter](img/3506OS_01_04.jpg)'
- en: Setting up PyCharm
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置PyCharm
- en: 'Now that we have seen IDE choices, let''s set up PyCharm. All examples in this
    book are created with PyCharm. However, you can set up any other IDE of your choice
    and use examples as they are. We will set up PyCharm with following steps to get
    started with Selenium Python:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看到了IDE的选择，让我们来设置PyCharm。本书中的所有示例都是使用PyCharm创建的。然而，你可以设置任何你选择的IDE，并直接使用示例。我们将按照以下步骤设置PyCharm，以开始使用Selenium
    Python：
- en: Download and install the PyCharm Community Edition from JetBrains site [http://www.jetbrains.com/pycharm/download/index.html](http://www.jetbrains.com/pycharm/download/index.html).
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 JetBrains 网站[http://www.jetbrains.com/pycharm/download/index.html](http://www.jetbrains.com/pycharm/download/index.html)下载并安装
    PyCharm Community Edition。
- en: Launch the PyCharm Community Edition. Click on the **Create New Project** option
    on the **PyCharm Community Edition** dialog box as shown in the following screenshot:![Setting
    up PyCharm](img/3506OS_01_05.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 PyCharm Community Edition。在如图所示的 **PyCharm Community Edition** 对话框中点击 **创建新项目**
    选项：![设置 PyCharm](img/3506OS_01_05.jpg)
- en: On the **Create New Project** dialog box, as shown in next screenshot, specify
    the name of your project in the **Project name** field. In this example, `setests`
    is used as the project name. We need to configure the interpreter for the first
    time. Click on the ![Setting up PyCharm](img/3506OS_01_14.jpg) button to set up
    the interpreter, as shown in the following screenshot:![Setting up PyCharm](img/3506OS_01_06.jpg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在如图所示的 **创建新项目** 对话框中，在 **项目名称** 字段中指定您的项目名称。在此示例中，使用 `setests` 作为项目名称。我们需要首次配置解释器。点击
    ![设置 PyCharm](img/3506OS_01_14.jpg) 按钮来设置解释器，如图所示：![设置 PyCharm](img/3506OS_01_06.jpg)
- en: On the **Python Interpreter** dialog box, click on the plus icon. PyCharm will
    suggest the installed interpreter similar to the following screenshot. Select
    the interpreter from **Select Interpreter Path**.![Setting up PyCharm](img/3506OS_01_07.jpg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Python 解释器** 对话框中，点击加号图标。PyCharm 将建议类似以下截图所示的已安装解释器。从 **选择解释器路径** 中选择解释器。![设置
    PyCharm](img/3506OS_01_07.jpg)
- en: PyCharm will configure the selected interpreter as shown in the following screenshot.
    It will show a list of packages that are installed along with Python. Click on
    the **Apply** button and then on the **OK** button:![Setting up PyCharm](img/3506OS_01_08.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyCharm 将配置所选解释器，如图所示。它将显示与 Python 一起安装的包列表。点击 **应用** 按钮，然后点击 **确定** 按钮：![设置
    PyCharm](img/3506OS_01_08.jpg)
- en: On the **Create** **New Project** dialog box, click on the **OK** button to
    create the project:![Setting up PyCharm](img/3506OS_01_09.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **创建新项目** 对话框中，点击 **确定** 按钮以创建项目：![设置 PyCharm](img/3506OS_01_09.jpg)
- en: Taking your first steps with Selenium and Python
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Selenium 和 Python 的第一步
- en: We are now ready to start with creating and running automated scripts in Python.
    Let's begin with Selenium WebDriver and create a Python script that uses Selenium
    WebDriver classes and functions to automate browser interaction.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好开始使用 Python 创建和运行自动化脚本。让我们从 Selenium WebDriver 开始，创建一个使用 Selenium WebDriver
    类和函数来自动化浏览器交互的 Python 脚本。
- en: We will use a sample web application for most of the examples in this book.
    This sample application is built on a famous e-commerce framework—**Magento**.
    You can find the application at [http://demo.magentocommerce.com/](http://demo.magentocommerce.com/).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的大部分示例中，我们将使用一个示例 Web 应用程序。此示例应用程序建立在著名的电子商务框架——**Magento** 上。您可以在[http://demo.magentocommerce.com/](http://demo.magentocommerce.com/)找到该应用程序。
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)下载您购买的所有 Packt 出版物的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: The example code is also hosted at [https://github.com/upgundecha/learnsewithpython](https://github.com/upgundecha/learnsewithpython).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码也托管在[https://github.com/upgundecha/learnsewithpython](https://github.com/upgundecha/learnsewithpython)。
- en: 'In this sample script, we will navigate to the demo version of the application,
    search for products, and list the names of products from the search result page
    with the following steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例脚本中，我们将导航到应用程序的演示版本，搜索产品，并按照以下步骤列出搜索结果页面上的产品名称：
- en: Let's use the project that we created earlier while setting up PyCharm. Create
    a simple Python script that will use the Selenium WebDriver client library. In
    Project Explorer, right-click on `setests` and navigate to **New** | **Python
    File** from the pop-up menu:![Taking your first steps with Selenium and Python](img/3506OS_01_10.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用在设置PyCharm时创建的项目。创建一个简单的Python脚本，该脚本将使用Selenium WebDriver客户端库。在项目资源管理器中，右键单击`setests`，然后从弹出菜单中选择**新建**
    | **Python文件**：![使用Selenium和Python迈出第一步](img/3506OS_01_10.jpg)
- en: On the **New Python file** dialog box, enter `searchproducts` in the **Name**
    field and click on the **OK** button:![Taking your first steps with Selenium and
    Python](img/3506OS_01_11.jpg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**新建Python文件**对话框中，在**名称**字段中输入`searchproducts`，然后单击**确定**按钮：![使用Selenium和Python迈出第一步](img/3506OS_01_11.jpg)
- en: 'PyCharm will add a new tab **searchproducts.py** in the code editor area. Copy
    the following code in the **searchproduct.py** tab:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyCharm将在代码编辑区域添加一个新的标签**searchproducts.py**。在**searchproduct.py**标签中复制以下代码：
- en: '[PRE2]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you're using any other IDE or editor of your choice, create a new file, copy
    the code to the new file, and save the file as `searchproducts.py`.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你使用的是任何其他IDE或你选择的编辑器，创建一个新文件，将代码复制到新文件中，并将文件保存为`searchproducts.py`。
- en: To run the script, press the *Ctrl* + *Shift* + *F10* combination in the PyCharm
    code window or select **Run 'searchproducts'** from the **Run** menu. This will
    start the execution and you will see a new Firefox window navigating to the demo
    site and the Selenium commands getting executed in the Firefox window. If all
    goes well, at the end, the script will close the Firefox window. The script will
    print the list of products in the PyCharm console as shown in the following screenshot:![Taking
    your first steps with Selenium and Python](img/3506OS_01_12.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行脚本，请在PyCharm代码窗口中按*Ctrl* + *Shift* + *F10*组合键，或者从**运行**菜单中选择**运行 'searchproducts'**。这将启动执行，你将看到一个新窗口的Firefox导航到演示网站，并在Firefox窗口中执行Selenium命令。如果一切顺利，脚本将在最后关闭Firefox窗口。脚本将在PyCharm控制台打印出产品列表，如下面的截图所示：![使用Selenium和Python迈出第一步](img/3506OS_01_12.jpg)
- en: Note
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'We can also run this script through the command line with the following command.
    Open the command line, then open the `setests` directory, and run following command:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们也可以使用以下命令通过命令行运行此脚本。打开命令行，然后打开`setests`目录，并运行以下命令：
- en: '[PRE3]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We will use command line as the preferred method in the rest of the book to
    execute the tests.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将使用命令行作为首选方法来执行测试。
- en: We'll spend some time looking into the script that we created just now. We will
    go through each statement and understand Selenium WebDriver in brief. There is
    a lot to go through in the rest of the book.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将花一些时间查看我们刚才创建的脚本。我们将逐句分析，简要了解Selenium WebDriver。本书的其余部分还有很多内容要介绍。
- en: The `selenium.webdriver` module implements the browser driver classes that are
    supported by Selenium, including Firefox, Chrome, Internet Explorer, Safari, and
    various other browsers, and `RemoteWebDriver` to test on browsers that are hosted
    on remote machines.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`selenium.webdriver`模块实现了Selenium支持的浏览器驱动类，包括Firefox、Chrome、Internet Explorer、Safari以及各种其他浏览器，以及`RemoteWebDriver`，用于在远程机器上托管的浏览器上进行测试。'
- en: 'We need to import `webdriver` from the Selenium package to use the Selenium
    WebDriver methods:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从Selenium包中导入`webdriver`以使用Selenium WebDriver方法：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we need an instance of a browser that we want to use. This will provide
    a programmatic interface to interact with the browser using the Selenium commands.
    In this example, we are using Firefox. We can create an instance of Firefox as
    shown in following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个我们想要使用的浏览器实例。这将提供一个程序接口，使用Selenium命令与浏览器交互。在这个例子中，我们使用Firefox。我们可以创建一个Firefox实例，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'During the run, this will launch a new Firefox window. We also set a few options
    on the driver:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行过程中，这将启动一个新的Firefox窗口。我们还在驱动程序上设置了一些选项：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We configured a timeout for Selenium to execute steps using an implicit wait
    of 30 seconds for the driver and maximized the Firefox window through the Selenium
    API. We will learn more about implicit wait in [Chapter 5](ch05.html "Chapter 5. Synchronizing
    Tests"), *Synchronizing Tests*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为Selenium设置了一个超时，使用30秒的隐式等待来执行驱动程序步骤，并通过Selenium API最大化Firefox窗口。我们将在第5章*同步测试*中学习更多关于隐式等待的内容。
- en: Next, we will navigate to the demo version of the application using its URL
    by calling the `driver.get()` method. After the `get()` method is called, WebDriver
    waits until the page is fully loaded in the Firefox window and returns the control
    to the script.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过调用 `driver.get()` 方法使用其 URL 导航到应用程序的演示版本。在调用 `get()` 方法后，WebDriver
    等待页面在 Firefox 窗口中完全加载，并将控制权返回给脚本。
- en: After loading the page, Selenium will interact with various elements on the
    page, like a human user. For example, on the Home page of the application, we
    need to enter a search term in a textbox and click on the **Search** button. These
    elements are implemented as HTML input elements and Selenium needs to find these
    elements to simulate the user action. Selenium WebDriver provides a number of
    methods to find these elements and interact with them to perform operations such
    as sending values, clicking buttons, selecting items in dropdowns, and so on.
    We will see more about this in [Chapter 3](ch03.html "Chapter 3. Finding Elements"),
    *Finding Elements*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面加载完成后，Selenium 将像人类用户一样与页面上的各种元素进行交互。例如，在应用程序的首页，我们需要在一个文本框中输入一个搜索词并点击**搜索**按钮。这些元素被实现为HTML输入元素，Selenium
    需要找到这些元素来模拟用户操作。Selenium WebDriver 提供了多种方法来查找这些元素并与它们交互，以执行发送值、点击按钮、在下拉列表中选择项目等操作。我们将在[第3章](ch03.html
    "第3章。查找元素")*查找元素*中了解更多关于这方面的内容。
- en: 'In this example, we are finding the **Search** textbox using the `find_element_by_name`
    method. This will return the first element matching the name attribute specified
    in the `find` method. The HTML elements are defined with tag and attributes. We
    can use this information to find an element, by following the given steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用 `find_element_by_name` 方法查找**搜索**文本框。这将返回与 `find` 方法中指定的名称属性匹配的第一个元素。HTML
    元素由标签和属性定义。我们可以使用这些信息通过以下步骤找到元素：
- en: 'In this example, the **Search** textbox has the name attribute defined as `q`
    and we can use this attribute as shown in the following code example:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个例子中，**搜索**文本框的名称属性定义为 `q`，我们可以像以下代码示例中那样使用这个属性：
- en: '[PRE7]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once the **Search** textbox is found, we will interact with this element by
    clearing the previous value (if entered) using the `clear()` method and enter
    the specified new value using the `send_keys()` method. Next, we will submit the
    search request by calling the `submit()` method:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦找到**搜索**文本框，我们将通过使用 `clear()` 方法清除之前输入的值（如果有的话）以及使用 `send_keys()` 方法输入指定的新值来与这个元素进行交互。接下来，我们将通过调用
    `submit()` 方法提交搜索请求：
- en: '[PRE8]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After submission of the search request, Firefox will load the result page returned
    by the application. The result page has a list of products that match the search
    term, which is `phones`. We can read the list of results and specifically the
    names of all the products that are rendered in the anchor `<a>` element using
    the `find_elements_by_xpath()` method. This will return more than one matching
    element as a list:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提交搜索请求后，Firefox 将加载应用程序返回的结果页面。结果页面包含与搜索词匹配的产品列表，即 `phones`。我们可以读取结果列表，特别是使用
    `find_elements_by_xpath()` 方法读取渲染在锚 `<a>` 元素中的所有产品的名称。这将返回一个包含多个匹配元素的列表：
- en: '[PRE9]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we will print the number of products (that is the number of anchor `<a>`
    elements) that are found on the page and the names of the products using the `.text`
    property of all the anchor `<a>` elements:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用所有锚 `<a>` 元素的 `.text` 属性打印出页面上找到的产品数量（即锚 `<a>` 元素的数目）和产品名称：
- en: '[PRE10]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'At end of the script, we will close the Firefox browser using the `driver.quit()`
    method:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本末尾，我们将使用 `driver.quit()` 方法关闭 Firefox 浏览器：
- en: '[PRE11]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This example script gives us a concise example of using Selenium WebDriver and
    Python together to create a simple automation script. We are not testing anything
    in this script yet. Later in the book, we will extend this simple script into
    a set of tests and use various other libraries and features of Python.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例脚本为我们提供了一个简洁的示例，说明如何将 Selenium WebDriver 和 Python 结合起来创建一个简单的自动化脚本。在这个脚本中，我们还没有进行任何测试。在本书的后面部分，我们将扩展这个简单的脚本成为一个测试集，并使用
    Python 的各种其他库和功能。
- en: Cross-browser support
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨浏览器支持
- en: So far we have built and run our script with Firefox. Selenium has extensive
    support for cross-browser testing where you can automate on all the major browsers
    including Internet Explorer, Google Chrome, Safari, Opera, and headless browsers
    such as PhantomJS. In this section, we will set up and run the script that we
    created in the previous section with Internet Explorer and Google Chrome to see
    the cross-browser capabilities of Selenium WebDriver.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用Firefox构建并运行了我们的脚本。Selenium广泛支持跨浏览器测试，您可以在包括Internet Explorer、Google
    Chrome、Safari、Opera以及无头浏览器（如PhantomJS）在内的所有主要浏览器上自动化。在本节中，我们将设置并运行上一节中创建的脚本，以使用Internet
    Explorer和Google Chrome查看Selenium WebDriver的跨浏览器功能。
- en: Setting up Internet Explorer
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Internet Explorer
- en: 'There is a little more to run scripts on Internet Explorer. To run tests on
    Internet Explorer, we need to download and set up the `InternetExplorerDriver`
    server. The `InternetExplorerDriver` server is a standalone server executable
    that implements WebDriver''s wire protocol to work as glue between the test script
    and Internet Explorer. It supports major IE versions on Windows XP, Vista, Windows
    7, and Windows 8 operating systems. Let''s set up the `InternetExplorerDriver`
    server with the following steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Internet Explorer上运行脚本还有一些其他注意事项。要在Internet Explorer上运行测试，我们需要下载并设置`InternetExplorerDriver`服务器。`InternetExplorerDriver`服务器是一个独立的可执行服务器，它实现了WebDriver的线协议，作为测试脚本和Internet
    Explorer之间的粘合剂。它支持Windows XP、Vista、Windows 7和Windows 8操作系统上的主要IE版本。让我们按照以下步骤设置`InternetExplorerDriver`服务器：
- en: Download the `InternetExplorerDriver` server from [http://www.seleniumhq.org/download/](http://www.seleniumhq.org/download/).
    You can download 32- or 64-bit versions based on the system configuration that
    you are using.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://www.seleniumhq.org/download/](http://www.seleniumhq.org/download/)下载`InternetExplorerDriver`服务器。您可以根据所使用的系统配置下载32位或64位版本。
- en: After downloading the `InternetExplorerDriver` server, unzip and copy the file
    to the same directory where scripts are stored.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载`InternetExplorerDriver`服务器后，解压缩并将文件复制到存储脚本的同一目录中。
- en: 'On IE 7 or higher, the **Protected Mode** settings for each zone must have
    the same value. **Protected Mode** can either be on or off, as long as it is for
    all the zones. To set the **Protected Mode** settings:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IE 7或更高版本中，每个区域的**保护模式**设置必须具有相同的值。**保护模式**可以是开启或关闭，只要对所有区域都一样。要设置**保护模式**设置：
- en: Choose **Internet Options** from the **Tools** menu.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**工具**菜单中选择**Internet选项**。
- en: On the **Internet Options** dialog box, click on the **Security** tab.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Internet选项**对话框中，单击**安全**选项卡。
- en: 'Select each zone listed in **Select a zone to view or change security settings**
    and make sure **Enable Protected Mode (requires restarting Internet Explorer)**
    is either checked or unchecked for all the zones. All the zones should have the
    same settings as shown in the following screenshot:'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择一个区域以查看或更改安全设置**中，选择列出的每个区域，并确保所有区域都勾选或取消勾选**启用保护模式（需要重新启动Internet Explorer）**。所有区域应与以下屏幕截图所示的设置相同：
- en: '![Setting up Internet Explorer](img/3506OS_01_13.jpg)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![设置Internet Explorer](img/3506OS_01_13.jpg)'
- en: Note
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While using the `InternetExplorerDriver` server, it is also important to keep
    the browser zoom level set to 100 percent so that the native mouse events can
    be set to the correct coordinates.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用`InternetExplorerDriver`服务器时，保持浏览器缩放级别设置为100%也很重要，这样可以将原生鼠标事件设置为正确的坐标。
- en: 'Finally, modify the script to use Internet Explorer. Instead of creating an
    instance of the Firefox class, we will use the `IE` class in the following way:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，修改脚本以使用Internet Explorer。我们不会创建Firefox类的实例，而是以下方式使用`IE`类：
- en: '[PRE12]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this script, we passed the path of the `InternetExplorerDriver` server while
    creating the instance of an `IE` browser class.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此脚本中，我们在创建`IE`浏览器类实例时传递了`InternetExplorerDriver`服务器的路径。
- en: Run the script and Selenium will first launch the `InternetExplorerDriver` server,
    which launches the browser, and execute the steps.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本，Selenium将首先启动`InternetExplorerDriver`服务器，该服务器启动浏览器并执行步骤。
- en: The `InternetExplorerDriver` server acts as an intermediary between the Selenium
    script and the browser. Execution of the actual steps is very similar to what
    we observed with Firefox.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`InternetExplorerDriver`服务器在Selenium脚本和浏览器之间充当中间件。实际步骤的执行与我们观察到的Firefox非常相似。'
- en: Tip
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Read more about the important configuration options for Internet Explorer at
    [https://code.google.com/p/selenium/wiki/InternetExplorerDriver](https://code.google.com/p/selenium/wiki/InternetExplorerDriver)
    and the *DesiredCapabilities* article at [https://code.google.com/p/selenium/wiki/DesiredCapabilities](https://code.google.com/p/selenium/wiki/DesiredCapabilities).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [https://code.google.com/p/selenium/wiki/InternetExplorerDriver](https://code.google.com/p/selenium/wiki/InternetExplorerDriver)
    了解有关 Internet Explorer 的重要配置选项，以及在 [https://code.google.com/p/selenium/wiki/DesiredCapabilities](https://code.google.com/p/selenium/wiki/DesiredCapabilities)
    了解 *DesiredCapabilities* 文章的更多信息。
- en: Setting up Google Chrome
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Google Chrome
- en: 'Setting up and running Selenium scripts on Google Chrome is similar to Internet
    Explorer. We need to download the `ChromeDriver` server similar to `InternetExplorerDriver`.
    The `ChromeDriver` server is a standalone server developed and maintained by the
    Chromium team. It implements WebDriver''s wire protocol for automating Google
    Chrome. It is supported on Windows, Linux, and Mac operating systems. Set up the
    `ChromeDriver` server using the following steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Google Chrome 上设置和运行 Selenium 脚本与 Internet Explorer 类似。我们需要下载与 `InternetExplorerDriver`
    类似的 `ChromeDriver` 服务器。`ChromeDriver` 服务器是由 Chromium 团队开发和维护的独立服务器。它实现了 WebDriver
    的线协议以自动化 Google Chrome。它支持 Windows、Linux 和 Mac 操作系统。按照以下步骤设置 `ChromeDriver` 服务器：
- en: Download the `ChromeDriver` server from [http://chromedriver.storage.googleapis.com/index.html](http://chromedriver.storage.googleapis.com/index.html).
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://chromedriver.storage.googleapis.com/index.html](http://chromedriver.storage.googleapis.com/index.html)
    下载 `ChromeDriver` 服务器。
- en: After downloading the `ChromeDriver` server, unzip and copy the file to the
    same directory where the scripts are stored.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 `ChromeDriver` 服务器后，解压并将文件复制到存储脚本的同一目录中。
- en: 'Finally, modify the sample script to use Chrome. Instead of creating an instance
    of the Firefox class, we will use the `Chrome` class in the following way:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，修改示例脚本以使用 Chrome。我们不会创建 Firefox 类的实例，而是以下方式使用 `Chrome` 类：
- en: '[PRE13]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this script, we passed the path of the `ChromeDriver` server while creating
    an instance of the Chrome browser class.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此脚本中，我们在创建 Chrome 浏览器类实例时传递了 `ChromeDriver` 服务器的路径。
- en: Run the script. Selenium will first launch the `Chromedriver` server, which
    launches the Chrome browser, and execute the steps. Execution of the actual steps
    is very similar to what we observed with Firefox.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本。Selenium 首先启动 `Chromedriver` 服务器，该服务器启动 Chrome 浏览器并执行步骤。实际步骤的执行与我们观察到的
    Firefox 非常相似。
- en: Tip
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Read more about ChromeDriver at [https://code.google.com/p/selenium/wiki/ChromeDriver](https://code.google.com/p/selenium/wiki/ChromeDriver)
    and [https://sites.google.com/a/chromium.org/chromedriver/home](https://sites.google.com/a/chromium.org/chromedriver/home).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [https://code.google.com/p/selenium/wiki/ChromeDriver](https://code.google.com/p/selenium/wiki/ChromeDriver)
    和 [https://sites.google.com/a/chromium.org/chromedriver/home](https://sites.google.com/a/chromium.org/chromedriver/home)
    了解有关 ChromeDriver 的更多信息。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced you to Selenium and its components. We installed
    the `selenium` package using the `pip` tool. Then we looked at various Editors
    and IDEs to ease our coding experience with Selenium and Python and set up PyCharm.
    Then we built a simple script on a sample application covering some of the high-level
    concepts of Selenium WebDriver Python client library using Firefox. We ran the
    script and analyzed the outcome. Finally, we explored the cross-browser testing
    support of Selenium WebDriver by configuring and running the script with Internet
    Explorer and Google Chrome.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们向您介绍了 Selenium 及其组件。我们使用 `pip` 工具安装了 `selenium` 包。然后我们查看各种编辑器和 IDE 以简化我们的
    Selenium 和 Python 编码体验，并设置了 PyCharm。然后我们在示例应用程序上构建了一个简单的脚本，涵盖了 Selenium WebDriver
    Python 客户端库的一些高级概念。我们运行了脚本并分析了结果。最后，我们通过配置和运行脚本使用 Internet Explorer 和 Google Chrome
    探索了 Selenium WebDriver 的跨浏览器测试支持。
- en: In next chapter, we will learn how to use the `unittest` library to create automated
    tests using Selenium WebDriver. We will also learn how to create a suite of tests
    and run tests in groups.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用 `unittest` 库通过 Selenium WebDriver 创建自动化测试。我们还将学习如何创建测试套件并在组内运行测试。
