- en: Posters, Headshots, and Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 海报、头像和安全性
- en: Movies are a visual medium, so a database of movies should, at the very least,
    have images. Letting users upload files can have big security implications; so,
    in this chapter, we'll discuss both topics together.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 电影是一种视觉媒体，所以电影数据库至少应该有图片。让用户上传文件可能会带来很大的安全隐患；因此，在本章中，我们将一起讨论这两个主题。
- en: 'In this chapter, we will do the following things:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将做以下事情：
- en: Add a file upload functionality that lets users upload images for each movie
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每部电影添加一个允许用户上传图像的文件上传功能
- en: Examine the **Open Web Application Security Project** (**OWASP**) top 10 list
    of risks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查**开放式Web应用安全项目**（**OWASP**）风险前10名清单
- en: We'll examine the security implications of the file upload as we go. Also, we'll
    take a look at where Django can help us and where we have to make careful design
    decisions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在进行文件上传时检查安全性的影响。此外，我们将看看Django在哪些方面可以帮助我们，在哪些方面我们必须做出谨慎的设计决策。
- en: Let's start by adding file upload to MyMDB.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从向MyMDB添加文件上传开始。
- en: Uploading files to our app
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将文件上传到我们的应用程序
- en: In this section, we will create a model that will represent and manage the files
    that our users upload to our site; then, we'll build a form and view to validate
    and process those uploads.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个模型，用于表示和管理用户上传到我们网站的文件；然后，我们将构建一个表单和视图来验证和处理这些上传。
- en: Configuring file upload settings
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置文件上传设置
- en: Before we begin implementing file upload, we will need to understand that file
    upload depends on a number of settings that must be different in production and
    development. These settings affect how files are stored and served.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始实现文件上传之前，我们需要了解文件上传取决于一些必须在生产和开发中不同的设置。这些设置会影响文件的存储和提供方式。
- en: 'Django has two sets of settings for files: `STATIC_*` and `MEDIA_*`. **Static
    files** are files that are part of our project, developed by us (for example,
    CSS and JavaScript). **Media files** are files that users upload to our system.
    Media files should not be trusted and certainly *never* executed.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Django有两组文件设置：`STATIC_*`和`MEDIA_*`。**静态文件**是我们项目的一部分，由我们开发的文件（例如CSS和JavaScript）。**媒体文件**是用户上传到我们系统的文件。媒体文件不应该受信任，绝对*不*应该被执行。
- en: 'We will need to set two new settings in our `django/conf/settings.py`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在我们的`django/conf/settings.py`中设置两个新的设置：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`MEDIA_URL` is the URL that will serve the uploaded files. In development,
    the value doesn''t matter very much, as long as it doesn''t conflict with the
    URL of one of our views. In production, uploaded files should be served from a
    different domain (not a subdomain) than the one that serves our app. A user''s
    browser that gets tricked into executing a file it requested from the same domain
    (or a subdomain) as our app will trust that file with the cookies (including the
    session ID) for our user. This default policy of all browsers is called the **Same
    Origin Policy**. We''ll discuss this again in [Chapter 5](b8fb8fcb-d4d7-439f-abba-f49882ee7598.xhtml),
    *Deploying with Docker*.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEDIA_URL`是将提供上传文件的URL。在开发中，这个值并不太重要，只要它不与我们的视图之一的URL冲突即可。在生产中，上传的文件应该从与提供我们应用程序的域名（而不是子域名）不同的域名提供。一个用户的浏览器如果被欺骗执行了来自与我们应用程序相同的域名（或子域名）的文件，那么它将信任该文件的cookie（包括用户的会话ID）。所有浏览器的默认策略称为**同源策略**。我们将在[第5章](b8fb8fcb-d4d7-439f-abba-f49882ee7598.xhtml)
    *使用Docker部署*中再次讨论这个问题。'
- en: '`MEDIA_ROOT` is the path to the directory where Django should save the code.
    We want to make sure that this directory is not under our code directory so that
    it won''t be accidentally checked in to version control or accidentally granted
    any generous permissions (for example, execution permission) that we grant our
    code base.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEDIA_ROOT`是Django应该保存代码的目录路径。我们希望确保这个目录不在我们的代码目录下，这样它就不会意外地被检入版本控制，也不会意外地被授予任何慷慨的权限（例如执行权限），我们授予我们的代码库。'
- en: There are other settings we will want to configure in production, such as limiting
    the request body, but those will be done as part of deployment in [Chapter 5](b8fb8fcb-d4d7-439f-abba-f49882ee7598.xhtml),
    *Deploying with Docker*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产中，我们还有其他设置需要配置，比如限制请求体的大小，但这些将作为[第5章](b8fb8fcb-d4d7-439f-abba-f49882ee7598.xhtml)
    *使用Docker部署*的一部分来完成。
- en: 'Next, let''s create that `media_root` directory:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建`media_root`目录：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Great! Next, let's create our `MovieImage` model.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！接下来，让我们创建我们的`MovieImage`模型。
- en: Creating the MovieImage model
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建MovieImage模型
- en: 'Our `MovieImage` model will use a new field called `ImageField` to save the
    file and to *attempt* to validate that a file is an image. Although `ImageField`
    does try to validate the field, it is not enough to stop a malicious user who
    crafts an intentionally malicious file (but will help a user who accidentally
    clicked on a `.zip` instead of a `.png`). Django uses the `Pillow` library to
    do this validation; so, let''s add `Pillow` to our requirements file `requirements.dev.txt`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`MovieImage`模型将使用一个名为`ImageField`的新字段来保存文件，并*尝试*验证文件是否为图像。尽管`ImageField`确实尝试验证字段，但这并不足以阻止一个恶意用户制作一个故意恶意的文件（但会帮助一个意外点击了`.zip`而不是`.png`的用户）。Django使用`Pillow`库来进行此验证；因此，让我们将`Pillow`添加到我们的要求文件`requirements.dev.txt`中：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, install our dependencies with `pip`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`pip`安装我们的依赖项：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we can create our model:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建我们的模型：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`ImageField` is a specialized version of `FileField` that uses `Pillow` to
    confirm that a file is an image. `ImageField` and `FileField` work with Django''s
    file storage API, which provides a way to store and retrieve files, as well as
    read and write them. By default, Django ships with `FileSystemStorage`, which
    implements the storage API to store data on the local filesystem. This is sufficient
    for development, but we''ll look at alternatives in [Chapter 5](b8fb8fcb-d4d7-439f-abba-f49882ee7598.xhtml),
    *Deploying with Docker*.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`ImageField`是`FileField`的一个专门版本，它使用`Pillow`来确认文件是否为图像。`ImageField`和`FileField`与Django的文件存储API一起工作，该API提供了一种存储和检索文件以及读写文件的方式。默认情况下，Django使用`FileSystemStorage`，它实现了存储API以在本地文件系统上存储数据。这对于开发来说已经足够了，但我们将在[第5章](b8fb8fcb-d4d7-439f-abba-f49882ee7598.xhtml)中探讨替代方案，*使用Docker部署*。'
- en: We used the `upload_to` parameter of `ImageField` to specify a function to generate
    the uploaded file's name. We don't want users to be able to specify the name of
    files in our system, as they may choose names that abuse our users' trust and
    make us look bad. We use a function that will store all the images for a given
    movie in the same directory and use `uuid4` to generate a universally unique name
    for each file (this also avoids name collisions and dealing with files overwriting
    each other).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`ImageField`的`upload_to`参数来指定一个函数来生成上传文件的名称。我们不希望用户能够指定系统中文件的名称，因为他们可能会选择滥用我们用户的信任并让我们看起来很糟糕的名称。我们使用一个函数来将给定电影的所有图片存储在同一个目录中，并使用`uuid4`为每个文件生成一个通用唯一名称（这也避免了名称冲突和处理文件互相覆盖）。
- en: We also record who uploaded the file so that if we find a bad file, we have
    a clue for how to find other bad files.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还记录了谁上传了文件，这样如果我们发现了一个坏文件，我们就有线索可以找到其他坏文件。
- en: 'Let''s now make a migration and apply it:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们进行迁移并应用它：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, let's build a form for our `MovieImage` model and use it in our `MovieDetail`
    view.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们为我们的`MovieImage`模型构建一个表单，并在我们的`MovieDetail`视图中使用它。
- en: Creating and using the MovieImageForm
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和使用MovieImageForm
- en: 'Our form will be much like our `VoteForm` in that it will hide and disable
    the `movie` and `user` fields that are necessary for our model but dangerous to
    trust from the client. Let''s add it to `django/core/forms.py`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的表单将与我们的`VoteForm`非常相似，它将隐藏和禁用`movie`和`user`字段，这些字段对于我们的模型是必要的，但是从客户端信任是危险的。让我们将它添加到`django/core/forms.py`中：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We don't override the `image` field with a custom field or widget because the
    `ModelForm` class will automatically provide the correct `<input type="file">`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会用自定义字段或小部件覆盖`image`字段，因为`ModelForm`类将自动提供正确的`<input type="file">`。
- en: 'Now, we can use it in the `MovieDetail` view:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`MovieDetail`视图中使用它：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This time, our code is simpler because users can *only* upload new images, no
    other operations are supported, letting us always provide an empty form. However,
    with this approach, we still don't show error messages. Losing error messages
    should not be viewed as best practice.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们的代码更简单，因为用户*只能*上传新图片，不支持其他操作，这样我们可以始终提供一个空表单。然而，使用这种方法，我们仍然不显示错误消息。丢失错误消息不应被视为最佳实践。
- en: Next, we'll update our template to use our new form and uploaded images.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更新我们的模板以使用我们的新表单和上传的图片。
- en: Updating movie_detail.html to show and upload images
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新`movie_detail.html`以显示和上传图片
- en: We’ll have to make two updates to our `movie_detail.html` template. First, we
    will need to update our `main` template `block` to have a list of images. Second,
    we'll have to update our `sidebar` template `block` to contain our upload form.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要对`movie_detail.html`模板进行两次更新。首先，我们需要更新我们的`main`模板块，以显示图片列表。其次，我们需要更新我们的`sidebar`模板块，以包含我们的上传表单。
- en: 'Let''s update our `main` block first:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们更新我们的`main`块：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We used the `image` field's `url` property in the preceding code, which returns
    the `MEDIA_URL` setting joined with the calculated filename so that our `img`
    tag correctly displays the image.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的代码中使用了`image`字段的`url`属性，它返回了`MEDIA_URL`设置与计算出的文件名连接在一起，这样我们的`img`标签就可以正确显示图片。
- en: 'In the `sidebar` `block`, we''ll add our form to upload a new image:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在`sidebar`块中，我们将添加一个上传新图片的表单：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is very similar to our preceding form. However, we *must* remember to include
    the `enctype` property in our `form` tag for the uploaded file to be attached
    to the request properly.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们之前的表单非常相似。但是，我们*必须*记得在我们的`form`标签中包含`enctype`属性，以便上传的文件能够正确附加到请求中。
- en: Now that we're done with our template, we can create our `MovieImageUpload`
    view to save our uploaded files.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们完成了我们的模板，我们可以创建我们的`MovieImageUpload`视图来保存我们上传的文件。
- en: Writing the MovieImageUpload view
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写MovieImageUpload视图
- en: 'Our penultimate step will be to add a view to process the uploaded file to
    `django/core/views.py`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们倒数第二步将是在`django/core/views.py`中添加一个视图来处理上传的文件：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Our view once again delegates all the work of validating and saving the model
    to `CreateView` and our form. We retrieve the `user.id` attribute from the request's
    `user` property (certain that the user is logged in because of the `LoginRequiredMixin`
    class) and the movie ID from the URL, then pass them to the form as initial arguments
    since the `user` and `movie` fields of `MovieImageForm` are disabled (so they
    ignore the values from the request body). The work of saving and renaming the
    file is all done by Django's `ImageField`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的视图再次将所有验证和保存模型的工作委托给`CreateView`和我们的表单。我们从请求的`user`属性中检索`user.id`属性（因为`LoginRequiredMixin`类的存在，我们可以确定用户已登录），并从URL中获取电影ID，然后将它们作为初始参数传递给表单，因为`MovieImageForm`的`user`和`movie`字段是禁用的（因此它们会忽略请求体中的值）。保存和重命名文件的工作都由Django的`ImageField`完成。
- en: Finally, we can update our project to route requests to our `MovieImageUpload`
    view and serve our uploaded files.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以更新我们的项目，将请求路由到我们的`MovieImageUpload`视图并提供我们上传的文件。
- en: Routing requests to views and files
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将请求路由到视图和文件
- en: In this section, we'll update `URLConf` of `core` to route requests to our new
    `MovieImageUpload` view and look at how we can serve our uploaded images in development.
    We'll take a look at how to serve the uploaded images in production [Chapter 5](b8fb8fcb-d4d7-439f-abba-f49882ee7598.xhtml),
    *Deploying with Docker*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将更新`core`的`URLConf`，将请求路由到我们的新`MovieImageUpload`视图，并看看我们如何在开发中提供我们上传的图片。我们将看看如何在生产中提供上传的图片[第5章](b8fb8fcb-d4d7-439f-abba-f49882ee7598.xhtml)，*使用Docker部署*。
- en: 'To route requests to our `MovieImageUpload` view, we''ll update `django/core/urls.py`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将请求路由到我们的`MovieImageUpload`视图，我们将更新`django/core/urls.py`：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We add our `path()` function as usual, and ensure that we remember that it expects
    a parameter called `movie_id`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们像往常一样添加我们的`path()`函数，并确保我们记得它需要一个名为`movie_id`的参数。
- en: Now, Django will know how to route to our view, but it doesn't know how to serve
    the uploaded files.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Django将知道如何路由到我们的视图，但它不知道如何提供上传的文件。
- en: 'To serve the uploaded files in development, we''ll update `django/config/urls.py`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发中为了提供上传的文件，我们将更新`django/config/urls.py`：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Django offers the `static()` function, which will return a list with a single
    `path` object that will route any request beginning with the string `MEDIA_URL`
    to a file inside `document_root`. It will give us a way of serving our uploaded
    image files in development. This feature is not appropriate for production, and
    `static()` will return an empty list if `settings.DEBUG` is `False`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了`static()`函数，它将返回一个包含单个`path`对象的列表，该对象将路由以`MEDIA_URL`开头的任何请求到`document_root`内的文件。这将为我们在开发中提供一种服务上传的图像文件的方法。这个功能不适合生产环境，如果`settings.DEBUG`为`False`，`static()`将返回一个空列表。
- en: Now that we've seen much of Django core functionality, let's discuss how it
    relates to the **Open Web Application Security Project** (**OWASP**) list of the
    top 10 most critical security risks (OWASP Top 10).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了Django核心功能的大部分，让我们讨论它如何与**开放Web应用程序安全项目**（**OWASP**）的十大最关键安全风险（OWASP
    Top 10）列表相关。
- en: OWASP Top 10
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OWASP Top 10
- en: The OWASP is a not for profit charitable organization focused on making *security
    visible* by providing impartial practical security advice for web applications.
    All of OWASP's materials are free and open source. Since 2010, OWASP solicits
    data from information security professionals and uses it to develop a list of
    the top 10 most critical security risks in web application security (the OWASP
    Top 10). Although this list does not claim to enumerate all problems (it's just
    the top 10), it is based on what security professionals are seeing out in the
    wild while doing penetration tests and code audits on real code either in production
    or development at companies around the world.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP是一个专注于通过为Web应用程序提供公正的实用安全建议来使*安全可见*的非营利慈善组织。OWASP的所有材料都是免费和开源的。自2010年以来，OWASP征求信息安全专业人员的数据，并用它来开发Web应用程序安全中最关键的十大安全风险的列表（OWASP
    Top 10）。尽管这个列表并不声称列举所有问题（它只是前十名），但它是基于安全专业人员在野外进行渗透测试和对全球公司的生产或开发中的真实代码进行代码审计时所看到的情况。
- en: Django is developed to minimize and avoid these risks as much as possible and,
    where possible, to give developers the tools to minimize the risks themselves.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Django被开发为尽可能地减少和避免这些风险，并在可能的情况下，为开发人员提供工具来最小化风险。
- en: Let's enumerate the OWASP Top 10 from 2013 (the latest version at the time of
    writing, the 2017 RC1 having been rejected) and take a look at how Django helps
    us mitigate each risk.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列举2013年的OWASP Top 10（撰写时的最新版本，2017 RC1已被拒绝），并看看Django如何帮助我们减轻每个风险。
- en: A1 injection
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A1注入
- en: This has been the number one issue since the creation of the OWASP Top 10\.
    **Injection** means users being able to inject code that is executed by our system
    or a system we use. For example, SQL Injection vulnerabilities let an exploiter
    execute arbitrary SQL code in our database, which can lead to them circumventing
    almost all the controls and security measures we have (for example, letting them
    authenticate as an administrative user; SQL Injection exploits may lead to shell
    access). The best solution for this, particularly for SQL Injection, is to use
    parametrized queries.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 自OWASP Top 10创建以来，这一直是头号问题。**注入**意味着用户能够注入由我们的系统或我们使用的系统执行的代码。例如，SQL注入漏洞让攻击者在我们的数据库中执行任意SQL代码，这可能导致他们绕过我们几乎所有的控制和安全措施（例如，让他们作为管理员用户进行身份验证；SQL注入漏洞可能导致shell访问）。对于这个问题，特别是对于SQL注入，最好的解决方案是使用参数化查询。
- en: Django protects us from SQL Injection by providing us with the `QuerySet` class.
    `QuerySet` ensures that all queries it sends are parameterized so that the database
    is able to distinguish between our SQL code and the values in the queries. Using
    parametrized queries will prevent SQL Injection.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Django通过提供`QuerySet`类来保护我们免受SQL注入的侵害。`QuerySet`确保它发送的所有查询都是参数化的，以便数据库能够区分我们的SQL代码和查询中的值。使用参数化查询将防止SQL注入。
- en: However, Django does permit raw SQL queries using `QuerySet.raw()` and `QuerySet.extra()`.
    Both these methods support parameterized queries, but it is up to the developer
    to ensure that they **never** put values from a user into a SQL query using string
    formatting (for example, `str.format`) but **always** use parameters.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Django允许使用`QuerySet.raw()`和`QuerySet.extra()`进行原始SQL查询。这两种方法都支持参数化查询，但开发人员必须确保他们**永远不要**使用来自用户的值通过字符串格式化（例如`str.format`）放入SQL查询，而是**始终**使用参数。
- en: A2 Broken Authentication and Session Management
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A2破坏身份验证和会话管理
- en: '**Broken Authentication** and **Session Management** refer to the risk of an
    attacker being able to either authenticate as another user or take over another
    user''s session.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**破坏身份验证**和**会话管理**指的是攻击者能够身份验证为另一个用户或接管另一个用户的会话的风险。'
- en: 'Django protects us here in a few ways, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Django在这里以几种方式保护我们，如下：
- en: Django's `auth` app always hashes and salts passwords so that even if the database
    is compromised, user passwords cannot be reasonably cracked.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django的`auth`应用程序始终对密码进行哈希和盐处理，因此即使数据库被破坏，用户密码也无法被合理地破解。
- en: Django supports multiple *slow* hashing algorithms (for example, Argon2 and
    Bcrypt), which make brute-force attacks impractical. These algorithms are not
    provided out of the box (Django uses `PBDKDF2` by default) because they rely on
    third-party libraries but can be configured using the `PASSWORD_HASHERS` setting.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django支持多种*慢速*哈希算法（例如Argon2和Bcrypt），这使得暴力攻击变得不切实际。这些算法并不是默认提供的（Django默认使用`PBDKDF2`），因为它们依赖于第三方库，但可以使用`PASSWORD_HASHERS`设置进行配置。
- en: The Django session ID is never made available in the URL by default, and the
    session ID changes after login.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django会话ID默认情况下不会在URL中公开，并且登录后会更改会话ID。
- en: However, Django's cryptographic functionality is always seeded with the `settings.SECRET_KEY` string.
    Checking production value of `SECRET_KEY` into version control should be considered
    a security problem. The value should never be shared in plain text, as we’ll discuss
    [Chapter 5](b8fb8fcb-d4d7-439f-abba-f49882ee7598.xhtml), *Deploying with Docker*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Django的加密功能始终以`settings.SECRET_KEY`字符串为种子。将`SECRET_KEY`的生产值检入版本控制应被视为安全问题。该值不应以明文形式共享，我们将在[第5章](b8fb8fcb-d4d7-439f-abba-f49882ee7598.xhtml)
    *使用Docker部署*中讨论。
- en: A3 Cross Site Scripting
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A3 跨站脚本攻击
- en: '**Cross Site Scripting** (**XSS**) is when an attacker is able to get a web
    app to display HTML or JavaScript created by the attacker rather than the one
    created by the developer(s). This attack is very powerful because if the attacker
    can execute arbitrary JavaScript, then they can send requests, which look indistinguishable
    from genuine requests from the user.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站脚本攻击**（**XSS**）是指攻击者能够让Web应用显示攻击者创建的HTML或JavaScript，而不是开发者创建的HTML或JavaScript。这种攻击非常强大，因为如果攻击者可以执行任意JavaScript，那么他们可以发送请求，这些请求看起来与用户的真实请求无法区分。'
- en: Django protects all variables in templates with HTML encoding by default.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Django默认情况下会对模板中的所有变量进行HTML编码保护。
- en: However, Django does provide utilities to mark text as safe, which will result
    in values not being encoded. These should be used sparingly and with a full appreciation
    for the dire security consequences if they are abused.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Django确实提供了将文本标记为安全的实用程序，这将导致值不被编码。这些应该谨慎使用，并充分了解如果滥用会造成严重安全后果。
- en: A4 insecure direct object references
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A4 不安全的直接对象引用
- en: '**Insecure direct object references** are when we insecurely expose implementation
    details in our resource references without protecting the resources from illicit
    access/exploitation. For example, the paths in the `src` attribute of our movie
    detail page''s `<img>` tag map directly to files in the filesystem. If a user
    manipulates a URL, they could access images to which they should not have access
    to, thus exploiting a vulnerability. Or, using auto incrementing primary keys
    that are exposed to the user in a URL can let malicious users iterate through
    all the items in the database. The impact of this risk is highly dependent on
    the resources exposed.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**不安全的直接对象引用**是指我们在资源引用中不安全地暴露实现细节，而没有保护资源免受非法访问/利用。例如，我们电影详细页面的`<img>`标签的`src`属性中的路径直接映射到文件系统中的文件。如果用户操纵URL，他们可能访问他们本不应访问的图片，从而利用漏洞。或者，使用在URL中向用户公开的自动递增主键可以让恶意用户遍历数据库中的所有项目。这种风险的影响高度取决于暴露的资源。'
- en: Django helps us by not coupling routing paths to views. We can do model lookups
    based on primary keys, but we are not required to do so and may add extra fields
    to our models (for example, `UUIDField`) to decouple table primary keys from IDs
    used in URLs. In our Mail Ape project in Part 3, we'll see how we can use the
    `UUIDField` class as the primary key of a model.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Django通过不将路由路径与视图耦合来帮助我们。我们可以根据主键进行模型查找，但并不是必须这样做，我们可以向我们的模型添加额外的字段（例如`UUIDField`）来将表的主键与URL中使用的ID解耦。在第3部分的Mail
    Ape项目中，我们将看到如何使用`UUIDField`类作为模型的主键。
- en: A5 Security misconfiguration
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A5 安全配置错误
- en: '**Security misconfiguration** refers to the risk incurred when the proper security
    mechanisms are deployed inappropriately. This risk is at the border of development
    and operations and requires the two teams to cooperate. For example, if we run
    our Django app in production with the `DEBUG` setting set to `True`, we would
    risk exposing far too much information to the public without having any errors
    in our code base.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全配置错误**指的是当适当的安全机制被不当部署时所产生的风险。这种风险处于开发和运营的边界，并需要两个团队合作。例如，如果我们在生产环境中以`DEBUG`设置为`True`运行我们的Django应用，我们将面临在没有任何错误的情况下向公众暴露过多信息的风险。'
- en: Django helps us with sane defaults and technical and topic guides on the Django
    project website. The Django community is also helpful—they post on mailing lists
    and online blogs, though online blog posts should be treated skeptically until
    you validate their claims.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Django通过合理的默认设置以及Django项目网站上的技术和主题指南来帮助我们。Django社区也很有帮助——他们在邮件列表和在线博客上发布信息，尽管在线博客文章应该持怀疑态度，直到你验证了它们的声明。
- en: A6 Sensitive data exposure
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A6 敏感数据暴露
- en: '**Sensitive data exposure** is the risk that sensitive data may be accessed
    without the proper authorization. This risk is broader than just an attacker highjacking
    a user''s session, as it includes questions of how backups are stored, how encryption
    keys are rotated, and, most importantly, which data is actually considered *sensitive*.
    The answers to these questions are project/business specific.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**敏感数据暴露**是指敏感数据可能在没有适当授权的情况下被访问的风险。这种风险不仅仅是攻击者劫持用户会话，还包括备份存储方式、加密密钥轮换方式，以及最重要的是哪些数据实际上被视为*敏感*。这些问题的答案是项目/业务特定的。'
- en: Django can help reduce risks of inadvertent exposure from attackers using network
    sniffing by being configured to serve pages only over HTTPS.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Django可以通过配置为仅通过HTTPS提供页面来帮助减少来自攻击者使用网络嗅探的意外暴露风险。
- en: However, Django doesn't provide encryption directly nor does it manage key rotation,
    logs, backups, and the database itself. There are many factors that affect this
    risk, which are outside of Django's scope.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Django并不直接提供加密，也不管理密钥轮换、日志、备份和数据库本身。有许多因素会影响这种风险，这些因素超出了Django的范围。
- en: A7 Missing function level access control
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A7 缺少功能级别的访问控制
- en: While A6 referred to data being exposed, missing function level access control
    refers to functionality being inadequately protected. Consider our `UpdateVote`
    view—if we had forgotten the `LoginRequiredMixin` class, then anyone could send
    an HTTP request and change our users' votes.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然A6指的是数据被暴露，但缺少功能级别的访问控制是指功能受到不充分保护的风险。考虑我们的`UpdateVote`视图——如果我们忘记了`LoginRequiredMixin`类，那么任何人都可以发送HTTP请求并更改我们用户的投票。
- en: Django's `auth` app provides a lot of useful features to mitigate these issues,
    including a permission system that is outside the scope of this project and mixins
    and utilities to make using these permissions simple (for example, `LoginRequiredMixin` and `PermissionRequiredMixin`).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Django 的`auth`应用程序提供了许多有用的功能来减轻这些问题，包括超出本项目范围的权限系统，以及混合和实用程序，使使用这些权限变得简单（例如，`LoginRequiredMixin`和`PermissionRequiredMixin`）。
- en: However, it is up to us to use Django's tools appropriately to the job at hand.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们需要适当地使用 Django 的工具来完成手头的工作。
- en: A8 Cross Site Request Forgery (CSRF)
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A8 跨站点请求伪造（CSRF）
- en: '**CSRF** (pronounced *see surf*) is the most technically complex risk in the
    OWASP Top 10\. CSRF relies on the fact that it will automatically send all the
    cookies associated with the domain whenever a browser requests any resource from
    a server. A malicious attacker may trick one of our logged in users to view a
    page on a third-party site (for example, `malicious.example.org`) with, for example,
    an `img` tag with a `src` attribute that points to a URL from our site (for example,
    `mymdb.example.com`). When the user''s browser sees that `src`, it will make a
    `GET` request to that URL and send all the cookies (including session ID) associated
    with our site.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSRF**（发音为*see surf*）是 OWASP 十大中技术上最复杂的风险。CSRF 依赖于一个事实，即每当浏览器从服务器请求任何资源时，它都会自动发送与该域关联的所有
    cookie。恶意攻击者可能会欺骗我们已登录的用户之一，让其查看第三方网站上的页面（例如`malicious.example.org`），例如，带有指向我们网站的
    URL 的`img`标签的`src`属性（例如，`mymdb.example.com`）。当用户的浏览器看到`src`时，它将向该 URL 发出`GET`请求，并发送与我们网站相关的所有
    cookie（包括会话 ID）。'
- en: The risk is that if our web app receives a `GET` request, it will make a modification
    that the user didn't intend. The mitigation for this risk is to make sure that
    any operation that makes a modification (for example, `UpdateVote`) has a unique
    and unpredictable value (a CSRF token) that only our system knows, which confirms
    that the user is intentionally using our app to perform this operation.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 风险在于，如果我们的 Web 应用程序收到`GET`请求，它将进行用户未打算的修改。减轻此风险的方法是确保进行任何进行修改的操作（例如，`UpdateVote`）都具有唯一且不可预测的值（CSRF
    令牌），只有我们的系统知道，这确认了用户有意使用我们的应用程序执行此操作。
- en: Django helps us a lot to mitigate this risk. Django provides the `csrf_token`
    tag to make it easy to add a CSRF token to a form. Django takes care of adding
    a matching cookie (to validate against the token) and that any request with a
    verb that is not a `GET`, `HEAD`, `OPTIONS`, or `TRACE` has a valid CSRF token
    to be processed. Django further helps us do the right thing by having all its
    generic editing views ( `EditView`, `CreateView`, `DeleteView`, and `FormView`)
    perform only a modification operation on `POST` and never on `GET`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Django 在很大程度上帮助我们减轻这种风险。Django 提供了`csrf_token`标签，使向表单添加 CSRF 令牌变得容易。Django 负责添加匹配的
    cookie（用于验证令牌），并确保任何使用的动词不是`GET`、`HEAD`、`OPTIONS`或`TRACE`的请求都有有效的 CSRF 令牌进行处理。Django
    进一步通过使其所有的通用编辑视图（`EditView`、`CreateView`、`DeleteView`和`FormView`）仅在`POST`上执行修改操作，而不是在`GET`上，来帮助我们做正确的事情。
- en: However, Django can't save us from ourselves. If we decide to disable this functionality
    or write views that have side effects on `GET`, Django can't help us.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Django 不能拯救我们免受自身的伤害。如果我们决定禁用此功能或编写具有`GET`副作用的视图，Django 无法帮助我们。
- en: A9 Using components with known vulnerabilities
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A9 使用已知漏洞的组件
- en: A chain is only as strong as its weakest link, and, sometimes, projects can
    have vulnerabilities in the frameworks and libraries they rely on.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一条链只有其最薄弱的一环那么强，有时，项目可能在其依赖的框架和库中存在漏洞。
- en: The Django project has a security team that accepts confidential reports of
    security issues and has a security disclosure policy to keep the community aware
    of issues affecting their projects. Generally, a Django release receives support
    (including security updates) for 16 months from its first release, but **Long-Term
    Support** (**LTS**) releases receive support for 3 years (the next LTS release
    will be Django 2.2).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Django 项目有一个安全团队，接受安全问题的机密报告，并有安全披露政策，以使社区了解影响其项目的问题。一般来说，Django 发布后会在首次发布后的
    16 个月内获得支持（包括安全更新），但**长期支持**（**LTS**）发布将获得 3 年的支持（下一个 LTS 发布将是 Django 2.2）。
- en: However, Django doesn't automatically update itself and doesn't force us to
    run the latest version. Each deployment must manage this for themselves.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Django 不会自动更新自身，也不会强制我们运行最新版本。每个部署都必须自行管理这一点。
- en: A10 Unvalidated redirects and forwards
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A10 未经验证的重定向和转发
- en: If our site can be used to redirect/forward a user to a third-party site automatically,
    then our site is at risk of having its reputation used to trick users into being
    forwarded to malicious sites.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的网站可以自动将用户重定向/转发到第三方网站，那么我们的网站就有可能被用来欺骗用户被转发到恶意网站。
- en: Django protects us by making sure that the `next` parameter of `LoginView` will
    only forward user's URLs that are part of our project.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Django 通过确保`LoginView`的`next`参数只会转发用户的URL，这些URL是我们项目的一部分，来保护我们。
- en: However, Django can't protect us from ourselves. We have to make sure that we
    never use use-provided and unvalidated data as the basis of an HTTP redirect or
    forward.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Django 不能保护我们免受自身的伤害。我们必须确保我们从不使用用户提供的未经验证的数据作为HTTP重定向或转发的基础。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this section, we've updated our app to let users upload images related to
    movies and reviewed the OWASP Top 10\. We covered how Django protects us and also
    where we need to protect ourselves.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已更新我们的应用程序，以便用户上传与电影相关的图像，并审查了 OWASP 十大。我们介绍了 Django 如何保护我们，以及我们需要保护自己的地方。
- en: Next, we'll build a list of the top 10 movies and take a look at how to use
    caching to avoid scanning our entire database each time.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将构建一个前十名电影列表，并看看如何使用缓存来避免每次扫描整个数据库。
