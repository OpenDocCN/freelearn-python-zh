- en: '[*Chapter 6*](B16119_06_Final_PD_ePub.xhtml#_idTextAnchor164): Models – Structuring
    the Application Data'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第6章*](B16119_06_Final_PD_ePub.xhtml#_idTextAnchor164)：模型 – 结构化应用程序数据'
- en: In this chapter, we will learn more about the model layer and how to use models
    to design the data structures that support applications. We will explore the available
    model types, when each should be used, and how to define constraints that enforce
    data validations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更多地了解模型层以及如何使用模型来设计支持应用程序的数据结构。我们将探讨可用的模型类型，何时应该使用它们，以及如何定义强制数据验证的约束。
- en: Models are composed of data fields that support several data types, and some
    field types support defining relationships between models. More advanced usage
    of fields involves having values automatically computed using specific business
    logic.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 模型由支持多种数据类型的数据字段组成，某些字段类型支持定义模型之间的关系。字段的高级使用涉及使用特定的业务逻辑自动计算值。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Learning project – improving the Library app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习项目 – 改进图书馆应用
- en: Creating models
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模型
- en: Creating fields
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建字段
- en: Relationships between models
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型之间的关系
- en: Computed fields
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算字段
- en: Model constraints
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型约束
- en: Overview of the Odoo base models
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Odoo基础模型的概述
- en: Throughout these topics, you will learn how to create non-trivial data structures
    for your Odoo projects. By the end of this chapter, you should have a clear overview
    of all the relevant features needed to structure data models.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些主题中，您将学习如何为您的Odoo项目创建非平凡的数据结构。到本章结束时，您应该对所有相关功能有一个清晰的概述，这些功能对于结构化数据模型是必需的。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter is based on the code we created in [*Chapter 3*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072),
    *Your First Odoo Application*. This code can be found in the `ch06/` directory
    of this book's GitHub repository at [https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章基于我们在[*第3章*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072)，“您的第一个Odoo应用程序”中创建的代码。此代码可在本书GitHub存储库的`ch06/`目录中找到，网址为[https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials)。
- en: You should have it in your add-ons path. Make sure that you install the `library_app`
    module.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 应将其放在您的附加组件路径中。请确保您已安装`library_app`模块。
- en: Learning project – improving the Library app
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习项目 – 改进图书馆应用
- en: In [*Chapter 3*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072), *Your First
    Odoo Application*, we created the `library_app` add-on module and implemented
    the simple `library.book` model to represent a book catalog. In this chapter,
    we will revisit that module to enrich the data that we can store for each book.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072)，“您的第一个Odoo应用程序”中，我们创建了`library_app`附加模块并实现了简单的`library.book`模型来表示图书目录。在本章中，我们将回顾该模块以丰富我们为每本书可以存储的数据。
- en: 'We will add a category hierarchy to use for book categorization with the following
    structure:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个类别层次结构，用于使用以下结构进行图书分类：
- en: '**Name**: The category title'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：类别标题'
- en: '**Parent**: The parent category that it belongs to'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**父类别**：它所属的父类别'
- en: '**Subcategories**: The categories that have this one as the parent'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子类别**：作为父类的这些类别'
- en: '**Featured book or author**: A selected book or author that represents this
    category'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特色图书或作者**：代表此类别的选定图书或作者'
- en: 'A few more fields will be added to showcase the different data types available
    for Odoo fields. We will also use model constraints to implement a few validations
    on the Books model:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将添加更多字段以展示Odoo字段可用的不同数据类型。我们还将使用模型约束在图书模型上实施一些验证：
- en: The title and publication date should be unique.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题和出版日期应该是唯一的。
- en: ISBNs entered should be valid.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入的ISBN号应该是有效的。
- en: We will start by revisiting Odoo models, now in more depth, to learn about all
    the options that are available for us.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先回顾Odoo模型，现在将更加深入，以了解我们可用的所有选项。
- en: Creating models
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: Models are at the heart of the Odoo framework. They describe the application
    data structures and are the bridge between the application server and the database
    storage. Business logic can be implemented around models to provide application
    features, and user interfaces are created on top of them to provide the user experience.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 模型是Odoo框架的核心。它们描述了应用程序数据结构，是应用程序服务器和数据库存储之间的桥梁。可以在模型周围实现业务逻辑以提供应用程序功能，并在其之上创建用户界面以提供用户体验。
- en: In the following subsections, we will learn about the model's generic attributes,
    which are used to influence their behavior, and the several types we have available
    – **regular models**, **transient models**, and **abstract models**.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下小节中，我们将了解模型的通用属性，这些属性用于影响其行为，以及我们可用的几种类型——**常规模型**、**临时模型**和**抽象模型**。
- en: Model attributes
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型属性
- en: 'Model classes can use additional attributes to control some behaviors. These
    are the most commonly used attributes:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 模型类可以使用额外的属性来控制某些行为。这些是最常用的属性：
- en: '`_name`: This is the internal identifier for the Odoo model we are creating.
    This is mandatory when creating a new model.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_name`：这是我们创建的 Odoo 模型的内部标识符。在创建新模型时这是必需的。'
- en: '`_description`: This is a user-friendly title that can be used to refer to
    a single `Model` record, such as `Book`. This is optional but recommended. If
    this is not set, a server log warning will be displayed during the loading sequence.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_description`：这是一个用户友好的标题，可以用来引用单个 `Model` 记录，例如 `Book`。这是可选的但推荐使用。如果没有设置，则在加载序列期间将显示服务器日志警告。'
- en: '`_order`: This sets the default order to use when the model''s records are
    browsed, or shown in a list view. It is a text string to be used as the SQL order
    by clause, so it can be anything you could use there, although it has smart behavior
    and supports translatable and many-to-one field names.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_order`：这设置了在浏览模型记录或以列表视图显示时使用的默认排序。它是一个用作 SQL 排序子句的文本字符串，因此可以是那里可以使用的任何内容，尽管它具有智能行为并支持可翻译的和多对一字段名称。'
- en: 'Our `Book` model is already using the `_name` and `_description` attributes.
    The following code adds the `_order` attribute to have the default order by book
    title, and then by reverse order of publication date (from newest to oldest):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `Book` 模型已经使用了 `_name` 和 `_description` 属性。以下代码添加了 `_order` 属性，以便默认按书名排序，然后按出版日期的逆序（从最新到最旧）排序：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are a few more advanced attributes available that can be helpful in advanced
    cases:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些更高级的属性在复杂情况下可能很有帮助：
- en: '`_rec_name`: This sets the field to use for the record''s display name. By
    default, it is the `name` field, which is why we usually choose this particular
    field name for the records title field.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_rec_name`：这设置了用于记录显示名称的字段。默认情况下，它是 `name` 字段，这就是为什么我们通常选择这个特定的字段名称作为记录标题字段的原因。'
- en: '`_table`: This is the name of the database table supporting the model. Usually,
    it is left to be automatically set by the ORM, which will use the model name after
    replacing the dots with underscores. However, we are free to choose a specific
    database table name to be used.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_table`：这是支持模型的数据库表名称。通常，它由 ORM 自动设置，ORM 将使用模型名称，并将点替换为下划线。然而，我们可以自由选择要使用的特定数据库表名称。'
- en: '`_log_access=False`: This can be used to prevent audit tracking fields from
    being automatically created; that is, `create_uid`, `create_date`, `write_uid`,
    and `write_date`.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_log_access=False`：这可以用来防止自动创建审计跟踪字段；即 `create_uid`、`create_date`、`write_uid`
    和 `write_date`。'
- en: '`_auto=False`: This prevents the underlying database table from being automatically
    created. In this case, we should use the `init()` method to provide our specific
    logic for creating the supporting database object, a table, or a view. This is
    usually used for views that support read-only reports.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_auto=False`：这防止了底层数据库表被自动创建。在这种情况下，我们应该使用 `init()` 方法来提供我们创建支持数据库对象（表或视图）的特定逻辑。这通常用于支持只读报告的视图。'
- en: 'As an example, the following code sets the default values on the `library.book`
    model:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码在 `library.book` 模型上设置了默认值：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are also the `_inherit` and `_inherits` attributes, which are used for
    module extension. These were explained in detail in [*Chapter 4*](B16119_04_Final_PD_ePub.xhtml#_idTextAnchor119),
    *Extending Modules*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有 `_inherit` 和 `_inherits` 属性，它们用于模块扩展。这些在 [*第4章*](B16119_04_Final_PD_ePub.xhtml#_idTextAnchor119)，*扩展模块*
    中有详细解释。
- en: When using `_auto = False`, we are overriding the process of creating the database
    object, so we should provide the logic for that. A frequent application of this
    is models to use for reports, based on a database view that gathers all the data
    needed for the report.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `_auto = False` 时，我们正在覆盖创建数据库对象的过程，因此我们应该提供相应的逻辑。这种应用的常见例子是基于数据库视图的模型，该视图收集了报告所需的所有数据。
- en: 'Here is an example taken from the `sale` core module, in the `sale/report/sale_report.py`
    file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个从 `sale` 核心模块中提取的示例，位于 `sale/report/sale_report.py` 文件中：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code uses a `tools` Python module, which needs to be imported
    using `odoo import tools`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码使用了`tools` Python模块，需要使用`odoo import tools`来导入。
- en: Models and Python classes
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型和Python类
- en: Odoo models use Python classes. In the preceding code, we can see a Python class,
    `Book`, based on the `models.Model` class, being used to define an Odoo model
    named `library.book`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo模型使用Python类。在前面的代码中，我们可以看到一个基于`models.Model`类的Python类`Book`，它被用来定义一个名为`library.book`的Odoo模型。
- en: Odoo models are kept in a *central registry*, available through the *environment
    object*, which is usually accessed using `self.env`. The central registry keeps
    references to all the models available, and they can be accessed with a dictionary-like
    syntax.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo模型存储在一个*中央注册表*中，通过*环境对象*可访问，通常使用`self.env`来访问。中央注册表保存了对所有可用模型的引用，并且可以使用类似字典的语法来访问它们。
- en: For example, to get a reference to the library book model inside a method, we
    could use `self.env["library.book"]` or `self.env.get(["library.book"])`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要在方法内部获取图书馆书籍模型的引用，我们可以使用`self.env["library.book"]`或`self.env.get(["library.book"])`。
- en: As you can see, model names are important and are the key to accessing the model
    registry.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，模型名称很重要，是访问模型注册表的关键。
- en: Model names must be globally unique. Because of this, it is a good practice
    to use the first word of the application the module belongs to as the first word
    in the model's name. In the case of the `Library` app, all model names should
    have `library` as a prefix. Other examples from the core modules are `project`,
    `crm`, or `sale`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 模型名称必须是全局唯一的。因此，一个好的做法是将模块所属的应用程序的第一词作为模型名称的第一词。例如，对于`Library`应用程序，所有模型名称都应该以`library`为前缀。核心模块的其他示例包括`project`、`crm`或`sale`。
- en: Tip
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Model names should use the singular form, `library.book`, rather than `library.books`.
    The convention is to use a list of lowercase words joined with dots. The first
    word should identify the main app the model belongs to, such as `library.book`
    or `library.book.category`. Other examples that have been taken from official
    add-ons include `project.project`, `project.task`, and `project.task.type`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 模型名称应使用单数形式，如`library.book`，而不是`library.books`。约定是使用由点连接的单词列表。第一个单词应标识模型所属的主要应用程序，例如`library.book`或`library.book.category`。其他从官方插件中提取的示例包括`project.project`、`project.task`和`project.task.type`。
- en: On the other hand, Python class identifiers are local to the Python file where
    they are declared and are not relevant to the Odoo framework. The identifier that's
    used for them is only significant for the code in that file and is rarely relevant.
    The Python convention for class identifiers is to use *CamelCase*, following the
    standards defined by the PEP8 coding conventions.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Python类的标识符仅限于它们声明的Python文件中，并且与Odoo框架无关。用于它们的标识符仅对该文件中的代码有意义，并且很少相关。Python类标识符的约定是使用*驼峰式命名法*，遵循PEP8编码约定定义的标准。
- en: There are several types of models available. The most frequently used one is
    the `models.Model` class, for persistent database stored models. Next, we will
    learn about the other available model types.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种类型的模型可供使用。最常用的一种是`models.Model`类，用于持久数据库存储模型。接下来，我们将了解其他可用的模型类型。
- en: Transient and abstract models
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 临时模型和抽象模型
- en: For most Odoo models, the Python class is based on `models.Model`. This type
    of model has permanent database persistence, which means that database tables
    are created for them and their records are stored until they're explicitly deleted.
    And most of the time, this is what you need.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数Odoo模型，Python类基于`models.Model`。这种类型的模型具有永久数据库持久性，这意味着为它们创建了数据库表，并且它们的记录存储在它们被显式删除之前。大多数时候，这正是你所需要的。
- en: 'But in some cases, we don''t need permanent database persistence, and hence
    these two other model types can be useful:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 但在某些情况下，我们不需要永久数据库持久性，因此这两种其他模型类型可能很有用：
- en: '`models.TransientModel`, are used for wizard-style user interaction. Their
    data is still stored in the database, but it is expected to be temporary. A vacuum
    job periodically clears old data from these tables. For example, the **Settings**
    | **Translations** | **Import Translation** menu option opens a dialog window
    that uses a transient model to store the user selections and implement the wizard
    logic. An example of using a transient model will be discussed in [*Chapter 8*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227),
    *Business Logic – Supporting Business Processes*.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models.TransientModel` 用于向导风格的用户交互。它们的数据仍然存储在数据库中，但预期是临时的。定期清理这些表中的旧数据。例如，**设置**
    | **翻译** | **导入翻译** 菜单选项打开一个对话框窗口，该窗口使用临时模型来存储用户选择并实现向导逻辑。将在 [*第8章*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227)，*业务逻辑
    – 支持业务流程* 中讨论使用临时模型的示例。'
- en: '`models.AbstractModel` class and have no data storage attached to them. They
    can be used as reusable feature sets, to be mixed in with other models using Odoo''s
    inheritance capabilities. For example, `mail.thread` is an abstract model provided
    by the `mail.thread` example mentioned previously were discussed in [*Chapter
    4*](B16119_04_Final_PD_ePub.xhtml#_idTextAnchor119), *Extending Modules*.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models.AbstractModel` 类没有附加数据存储。它们可以用作可重用的特征集，与其他模型一起使用Odoo的继承功能。例如，`mail.thread`
    是之前提到的 `mail.thread` 示例中提供的抽象模型，在 [*第4章*](B16119_04_Final_PD_ePub.xhtml#_idTextAnchor119)，*扩展模块*
    中进行了讨论。'
- en: Inspecting existing models
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查现有模型
- en: The models and fields that are created by Python classes can be inspected through
    the user interface. With **Developer Mode** enabled, via the **Settings** top
    menu, navigate to the **Technical** | **Database Structure** | **Models** menu
    item. Here, you will find a list of all the models available in the database.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过用户界面可以检查由Python类创建的模型和字段。启用 **开发者模式**，通过 **设置** 顶部菜单，导航到 **技术** | **数据库结构**
    | **模型** 菜单项。在这里，您将找到数据库中所有可用的模型列表。
- en: 'Clicking on a model in the list will open a form showing its details, as shown
    in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表中单击模型将打开一个表单，显示其详细信息，如下面的截图所示：
- en: '![Figure 6.1 – Inspecting the Book model from the Technical menu'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1 – 从技术菜单检查书籍模型'
- en: '](img/Figure_6.1_B16119.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.1_B16119.jpg)'
- en: Figure 6.1 – Inspecting the Book model from the Technical menu
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – 从技术菜单检查书籍模型
- en: This is a good tool for inspecting a model since it shows the results of all
    the modifications made by different modules. At the top right of the form, in
    the `library.book` is affected by the `library_app` and `library_member` modules.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个检查模型的好工具，因为它显示了不同模块所做的所有修改的结果。在表单的右上角，`library.book` 受 `library_app` 和 `library_member`
    模块的影响。
- en: Tip
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: As seen in [*Chapter 1*](B16119_01_Final_PD_ePub.xhtml#_idTextAnchor015), *Quick
    Start Using Developer Mode*, the **Models** form is editable! It is possible to
    create and modify models, fields, and views from here. You can use this to build
    prototypes that will be implemented as add-on modules later.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [*第1章*](B16119_01_Final_PD_ePub.xhtml#_idTextAnchor015)，*使用开发者模式快速入门* 所见，**模型**
    表单是可编辑的！可以从这里创建和修改模型、字段和视图。您可以使用此功能构建原型，这些原型将作为附加模块稍后实现。
- en: 'In the lower area, we have some tabs with additional information available:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下方区域，我们有一些带有附加信息的标签页：
- en: '**Fields** lists the model fields.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字段** 列出了模型字段。'
- en: '**Access Rights** lists the access control rules granted to security groups.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问权限** 列出了授予安全组的访问控制规则。'
- en: '**Record Rules** lists the record rules applying filters to records.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记录规则** 列出了应用于记录的记录规则。'
- en: '**Notes** is the model definition docstring.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**说明** 是模型定义的docstring。'
- en: '**Views** lists the views available for the model.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图** 列出了模型的可用视图。'
- en: To find the model's external identifier or XML ID, we can use the `model_`.
    As an example, the identifier that's generated for the `library.book` model, as
    created by the `library_app` module, is `library_app.model_library_book`. These
    XML IDs are usually needed for the CSV files defining the security ACLs.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到模型的外部标识符或XML ID，我们可以使用 `model_`。例如，由 `library_app` 模块创建的 `library.book` 模型生成的标识符是
    `library_app.model_library_book`。这些XML ID通常用于定义安全ACLs的CSV文件。
- en: We are now familiar with the options we have for defining the model. The next
    step is to understand the several field types, as well as the options available
    to configure them.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在熟悉了定义模型的可选方案。下一步是了解几个字段类型以及配置它们的选项。
- en: Creating fields
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建字段
- en: Having created a new model, the next step is to add fields to it. Odoo supports
    all the basic data types that are expected, such as text strings, integers, floating-point
    numbers, Booleans, dates and time, and image or binary data.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了新的模型后，下一步是向其中添加字段。Odoo 支持所有预期的基本数据类型，例如文本字符串、整数、浮点数、布尔值、日期和时间，以及图像或二进制数据。
- en: Let's explore the several types of fields available in Odoo.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索 Odoo 中可用的几种字段类型。
- en: Basic field types
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本字段类型
- en: We will go back to the book model to present the several available field types.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将回到书籍模型，以展示可用的几种字段类型。
- en: 'In the `library_app/models/library_book.py` file, edit the `Book` class, replacing
    the current field definitions with this one:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `library_app/models/library_book.py` 文件中，编辑 `Book` 类，将当前的字段定义替换为以下内容：
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These are examples of the non-relational field types that are available in Odoo
    with the positional arguments expected by each one. Next, we will explain all
    these field types and options.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 Odoo 中可用的非关系型字段类型示例，以及每个字段预期的定位参数。接下来，我们将解释所有这些字段类型和选项。
- en: Tip
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Python functions can have two types of arguments: positional and keyword.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Python 函数可以有两种类型的参数：定位参数和关键字参数。
- en: '`fn(x, y)` should be something such as `f(1, 2)`.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`fn(x, y)` 应该是类似于 `f(1, 2)` 的形式。'
- en: '`f(x=1, y=2)`, or even mix both styles, with something such as `f(1, y=2)`.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`f(x=1, y=2)`，或者甚至可以混合两种风格，例如 `f(1, y=2)`。'
- en: However, note that positional arguments must come before keyword arguments,
    so `f(x=1, 2)` is not allowed. More information on keyword arguments can be found
    in the Python official documentation at [https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments](https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意，定位参数必须在关键字参数之前，因此不允许 `f(x=1, 2)`。有关关键字参数的更多信息，请参阅 Python 官方文档 [https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments](https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments)。
- en: As a general rule, the first positional argument is the field title, which corresponds
    to the `string` keyword argument. The exception to this rule is the **Selection**
    fields and all the relational fields.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一般规则，第一个定位参数是字段标题，它对应于 `string` 关键字参数。此规则的例外是 **Selection** 字段和所有关系型字段。
- en: The `string` attribute is used as the default text for the user interface labels.
    If the `string` attribute is not provided, it will be automatically generated
    from the field name, replacing underscores with spaces and capitalizing the first
    letter in each word. For example, the `date_published` default label is **Date
    Published**.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`string` 属性用作用户界面标签的默认文本。如果没有提供 `string` 属性，它将自动从字段名称生成，将下划线替换为空格，并将每个单词的首字母大写。例如，`date_published`
    的默认标签是 **Date Published**。'
- en: 'For reference, this is the list of all the non-relational field types that
    are available, along with the positional arguments expected by each:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参考，这是所有可用的非关系型字段类型列表，以及每个字段预期的定位参数：
- en: '`Char(string)` is a simple text field. The only positional argument that''s
    expected is the field label.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Char(string)` 是一个简单的文本字段。预期的唯一定位参数是字段标签。'
- en: '`Text(string)` is a multiline text field. The only positional argument is also
    the field label.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Text(string)` 是一个多行文本字段。唯一的定位参数也是字段标签。'
- en: '`Selection(selection, string)` is a drop-down selection list. The selection
    positional arguments is a `[("value", "Description"),]` list of tuples. For each
    pair, the first element is the value stored in the database, and the second element
    is the description presented in the user interface. Extension modules can add
    options to this list using the `selection_add` keyword argument.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Selection(selection, string)` 是一个下拉选择列表。选择定位参数是一个 `[("value", "Description"),]`
    的元组列表。对于每一对，第一个元素是存储在数据库中的值，第二个元素是在用户界面中展示的描述。扩展模块可以使用 `selection_add` 关键字参数向此列表添加选项。'
- en: '`Html(string)` is stored as a text field but has specific handling for the
    user interface for HTML content presentation. For security reasons, it is sanitized
    by default, but this behavior can be overridden using the `sanitize=False` attribute.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Html(string)` 被存储为文本字段，但具有针对 HTML 内容展示的用户界面特定处理。出于安全考虑，它默认被清理，但可以通过使用 `sanitize=False`
    属性来覆盖此行为。'
- en: '`Integer(string)` is for integer numbers and expects a string argument for
    the field label.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Integer(string)` 用于整数数字，并期望一个字符串参数作为字段标签。'
- en: '`Float(string, digits)` stores floating-point numbers and has a second optional
    argument for the precision to use. This is an `(n, d)` tuple, where `n` is the
    total number of digits, and `d` is the number of those digits used for decimals.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Float(string, digits)` 存储浮点数，并有一个用于精度的第二个可选参数。这是一个 `(n, d)` 元组，其中 `n` 是总位数，`d`
    是用于小数的位数。'
- en: '`Monetary(string, currency_field)` is similar to a `float` field but has specific
    handling for currency values. The `currency_field` second argument is for the
    name of the currency field. By default, it is set to `currency_field="currency_id"`.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Monetary(string, currency_field)` 与 `float` 字段类似，但具有对货币值的特定处理。`currency_field`
    第二个参数是货币字段名称。默认情况下，它设置为 `currency_field="currency_id"`。'
- en: The `Date(string)` and `Datetime(string)` fields are for dates and date-time
    values. They only expect the label text as a positional argument.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Date(string)` 和 `Datetime(string)` 字段用于日期和日期时间值。它们只期望标签文本作为位置参数。'
- en: '`Boolean(string)` stores True or False values and has one positional argument
    for the label text.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Boolean(string)` 存储真或假值，并为标签文本提供一个位置参数。'
- en: '`Binary(string)` stores binary data, including images, and expects the string
    label positional argument.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Binary(string)` 存储二进制数据，包括图像，并期望字符串标签位置参数。'
- en: These field definitions provide the basic parameters that are usually used.
    Note that there are no required arguments, and Odoo will use reasonable defaults
    for the missing ones.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字段定义提供了通常使用的参数。请注意，没有必需的参数，Odoo 将为缺失的参数使用合理的默认值。
- en: Changes in Odoo 12
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 12 的变化
- en: The `Date` and `Datetime` fields are now handled in the ORM as Python date objects.
    In previous versions, they were handled as text representations. Because of this,
    when manipulated, an explicit conversion into a Python date object was needed,
    which would have to be converted back into a text string after.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`Date` 和 `Datetime` 字段现在在 ORM 中作为 Python 日期对象处理。在之前的版本中，它们被作为文本表示处理。因此，在操作时，需要显式转换为
    Python 日期对象，之后还需要将其转换回文本字符串。'
- en: 'Text-based fields, including `Char`, `Text`, and `Html`, have a few specific
    attributes:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 基于文本的字段，包括 `Char`、`Text` 和 `Html`，有几个特定的属性：
- en: '`size` (only for `Char` fields) sets the maximum allowed size. It is recommended
    to not use it unless there is a good reason for it; for example, a social security
    number with a maximum length allowed.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size`（仅适用于 `Char` 字段）设置最大允许大小。除非有很好的理由，否则建议不要使用它；例如，一个允许的最大长度为的社会安全号码。'
- en: '`translate=True` makes the field contents translatable, holding different values
    for different languages.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`translate=True` 使字段内容可翻译，为不同语言持有不同的值。'
- en: '`trim` is set to `True` by default and automatically trims the surrounding
    white space, which is performed by the web client. This can be explicitly disabled
    by setting `trim=False`.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trim` 默认设置为 `True` 并自动修剪周围的空白符，这是由网络客户端执行的。这可以通过将 `trim=False` 显式禁用。'
- en: Changes in Odoo 12
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Odoo 12 的变化
- en: The `trim` field attribute was introduced in Odoo 12\. In previous versions,
    text fields were saved along with the white space.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`trim` 字段属性是在 Odoo 12 中引入的。在之前的版本中，文本字段会连同空白符一起保存。'
- en: Additionally, we also have relational field types available. These will be explained
    later in this chapter, in the *Relationships between models* section.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还有可用的关系字段类型。这些将在本章的 *模型之间的关系* 部分中稍后解释。
- en: Before we get to that, however, there is still more to know about the attributes
    of the basic field types, as explained in the next section.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们到达那里之前，还有更多关于基本字段类型属性的知识需要了解，如下一节所述。
- en: Common field attributes
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见字段属性
- en: So far, we have looked at the basic positional arguments available for several
    basic field types. However, there are more attributes available to us.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经查看了几种基本字段类型的基本位置参数。然而，还有更多属性可供我们使用。
- en: 'The following keyword argument attributes are generally available to all field
    types:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下关键字参数属性通常对所有字段类型都可用：
- en: '`string` is the field''s default label, to be used in the user interface. Except
    for `Selection` and relational fields, it is available as the first positional
    argument, so most of the time, it is not used as a keyword argument. If it''s
    not provided, it is automatically generated from the field name.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string` 是字段的默认标签，用于用户界面。除了 `Selection` 和关系字段外，它作为第一个位置参数可用，因此大多数情况下不作为关键字参数使用。如果没有提供，它将自动从字段名称生成。'
- en: '`default` sets a default value for the field. It can be a fixed value (such
    as `default=True` in the `active` field), or a callable reference, either the
    named function reference or a `lambda` anonymous function.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` 为字段设置默认值。它可以是固定值（例如，`active` 字段中的 `default=True`），或可调用的引用，无论是命名的函数引用还是
    `lambda` 匿名函数。'
- en: '`help` provides the text for tooltips that are displayed to users when hovering
    the mouse over the field in the UI.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`help` 提供了当用户将鼠标悬停在 UI 字段上时显示的工具提示文本。'
- en: '`readonly=True` makes the field not editable in the user interface by default.
    This is not enforced at the API level: code in model methods will still be capable
    of writing to it, and a view definition can override this. It is only a user interface
    setting.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`readonly=True` 使字段在用户界面中默认不可编辑。这不在 API 层面上强制执行：模型方法中的代码仍然可以写入它，视图定义可以覆盖此设置。这仅是一个用户界面设置。'
- en: '`required=True` makes the field mandatory in the user interface by default.
    This is enforced at the database level by adding a `NOT NULL` constraint to the
    database column.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`required=True` 使字段在用户界面中默认为必填项。这在数据库级别通过向数据库列添加 `NOT NULL` 约束来强制执行。'
- en: '`index=True` adds a database index to the field, for faster search operations
    at the expense of disk space usage and slower write operations.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index=True` 在字段上添加数据库索引，以加快搜索操作，但会牺牲磁盘空间使用和较慢的写入操作。'
- en: '`copy=False` has the field ignored when duplicating a record via the `copy()`
    ORM method. Field values are copied by default, except for to-many relational
    fields, which are not copied by default.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`copy=False` 在通过 `copy()` ORM 方法复制记录时忽略字段。字段值默认会复制，除了多对多关系字段，它们默认不会复制。'
- en: '`deprecated=True` marks the field as deprecated. It will still work as usual,
    but any access to it will write a warning message to the server log.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deprecated=True` 将字段标记为已弃用。它仍然会按常规工作，但任何对其的访问都会将警告消息写入服务器日志。'
- en: '`groups` allows you to limit the field''s access and visibility to only some
    groups. It expects a comma-separated list of XML IDs for security groups; for
    example, `groups="base.group_user,base.group_system"`.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groups` 允许您限制字段的访问和可见性，仅限于某些组。它期望一个以逗号分隔的安全组 XML ID 列表；例如，`groups="base.group_user,base.group_system"`。'
- en: '`states` expects dictionary mapping values for UI attributes, depending on
    the values of the `state` field. The attributes that can be used are `readonly`,
    `required`, and `invisible`; for example, `states={''done'':[(''readonly'',True)]}`.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`states` 预期 UI 属性的字典映射值，这取决于 `state` 字段的值。可以使用的属性有 `readonly`、`required` 和
    `invisible`；例如，`states={''done'':[(''readonly'',True)]}`。'
- en: Tip
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Note that the `states` field attribute is equivalent to the `attrs` attribute
    in views. Also, views support a `states` attribute that has a different use: it
    is a comma-separated list of states in which the view element should be visible.'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，`states` 字段属性在视图中等同于 `attrs` 属性。此外，视图支持一个具有不同用途的 `states` 属性：它是一个逗号分隔的状态列表，其中视图元素应该是可见的。
- en: 'Here is an example of the `name` field with all the available keyword arguments
    spelled out:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个包含所有可用关键字参数的 `name` 字段示例：
- en: '[PRE4]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Previous Odoo versions supported the `oldname="field"` attribute, which is used
    when a field is renamed in a newer version. It enabled the data in the old field
    to be automatically copied into the new field during the module upgrade process.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的 Odoo 版本支持 `oldname="field"` 属性，当字段在新版本中重命名时使用。它使得在模块升级过程中，旧字段中的数据可以自动复制到新字段中。
- en: Changes in Odoo 13
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 13 的变化
- en: The `oldname` field attribute was removed and is no longer available. The alternative
    is to use migration scripts.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`oldname` 字段属性已被移除，不再可用。替代方案是使用迁移脚本。'
- en: The preceding field attributes are generic and apply to all field types. Next,
    we will learn how to set default values on fields.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 上述字段属性是通用的，适用于所有字段类型。接下来，我们将学习如何在字段上设置默认值。
- en: Setting default values
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置默认值
- en: As we mentioned previously, the `default` attribute can have a fixed value or
    a reference to a function to dynamically compute the default value.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，`default` 属性可以有一个固定值或对函数的引用，以动态计算默认值。
- en: 'For trivial computations, we can use a `lambda` function to avoid the overhead
    of creating a named method function. Here is a common example of computing a default
    value with the current date and time:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单的计算，我们可以使用 `lambda` 函数来避免创建命名方法函数的开销。以下是一个使用当前日期和时间计算默认值的常见示例：
- en: '[PRE5]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `default` value can also be a function reference. This can be a name reference
    or a string with the function name.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`default` 值也可以是一个函数引用。这可以是一个名称引用或一个包含函数名称的字符串。'
- en: 'The following example uses a name reference to the `_default_last_borrow_date`
    function method:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用名称引用 `_default_last_borrow_date` 函数方法：
- en: '[PRE6]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And this example does the same, but uses a string with the function name:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例执行相同的操作，但使用包含函数名称的字符串：
- en: '[PRE7]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this latter method, the function name resolution is delayed at runtime,
    rather than Python file loading time. So, in the second example, we can reference
    a function declared later in the code, while in the first example, the function
    must be declared before the function declaration.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此方法，函数名称解析是在运行时延迟的，而不是在 Python 文件加载时。因此，在第二个示例中，我们可以引用代码中稍后声明的函数，而在第一个示例中，函数必须在函数声明之前声明。
- en: Still, the general code convention here is to have the default value function
    defined before the field's definitions. Another argument for preferring the first
    approach, using the function name reference, is that code editors can detect typing
    errors if they support static code analysis.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这里的通用代码约定是在字段定义之前定义默认值函数。支持静态代码分析的代码编辑器可以检测到输入错误，这也是首选第一种方法，即使用函数名称引用的另一个论据。
- en: Automatic field names
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动字段名称
- en: Some field names are special, either because they are reserved by the ORM for
    special purposes, or because some built-in features make use of some default field
    names.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一些字段名称是特殊的，要么是因为 ORM 为特殊目的保留了它们，要么是因为一些内置功能使用了某些默认字段名称。
- en: The `id` field is reserved to be used as an automatic number, uniquely identifying
    each record, and is used as the database's primary key. It is automatically added
    to every model.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`id` 字段被保留用于作为自动编号，唯一标识每条记录，并用作数据库的主键。它将自动添加到每个模型中。'
- en: 'The following fields are automatically created on new models unless the `_log_access=False`
    model attribute is set:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 除非设置了 `_log_access=False` 模型属性，否则以下字段将在新模型上自动创建：
- en: '`create_uid` is for the user who created the record.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_uid` 是创建记录的用户。'
- en: '`create_date` is for the date and time when the record is created.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_date` 是记录创建的日期和时间。'
- en: '`write_uid` is for the last user to modify the record.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`write_uid` 是用于记录最后修改用户。'
- en: '`write_date` is for the last date and time when the record was modified.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`write_date` 是记录最后修改的日期和时间。'
- en: The information in these fields is available in the web client when in a form
    view if you go to the **Developer Mode** menu and then click the **View Metadata**
    option.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当在表单视图中查看时，这些字段的信息在 **开发者模式** 菜单中，然后点击 **查看元数据** 选项时在 Web 客户端可用。
- en: The preceding field names have a special meaning for the Odoo framework. Other
    than these, there are a few more field names that are used as defaults for some
    Odoo features. The next section describes them.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 前述字段名称对 Odoo 框架具有特殊意义。除此之外，还有一些字段名称被用作 Odoo 特性的默认值。下一节将描述它们。
- en: Reserved field names
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保留字段名称
- en: Some built-in API features expect specific field names by default. These are
    considered reserved field names, and we should avoid using them for purposes other
    than the expected ones.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一些内置 API 功能默认期望特定的字段名称。这些被认为是保留字段名称，我们应该避免将它们用于预期之外的目的。
- en: 'These are the reserved fields:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是保留字段：
- en: '`name` or `x_name` of the `Char` type: These are used by default as the display
    name for the record. But a different field can be used for the display name by
    setting the `_rec_name` model attribute. Non-character field types are also known
    to work for this, and a number to text conversion will be forced for this.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Char` 类型的 `name` 或 `x_name`：这些默认用作记录的显示名称。但可以通过设置 `_rec_name` 模型属性来使用不同的字段作为显示名称。非字符字段类型也已知适用于此，并且将强制进行数字到文本的转换。'
- en: '`active` or `x_active` of the `Boolean` type: These allow you to deactivate
    records, making them invisible. Records with `active=False` are automatically
    excluded from queries unless the `{''active_test'': False}` key is added to the
    environmental context. It can be used as a record *archive* or *soft delete* feature.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active` 或 `x_active` 的 `Boolean` 类型：这些允许您停用记录，使它们不可见。除非将 `{''active_test'':
    False}` 键添加到环境上下文中，否则 `active=False` 的记录将自动排除在查询之外。它可以用作记录的 *存档* 或 *软删除* 功能。'
- en: '`state` of the `Selection` type: This represents basic states for the record
    life cycle. It enables the usage of the `states` field attribute to dynamically
    set the `readonly`, `required`, or `invisible` attributes; for example, `states={''draft'':
    [(''readonly'', False)]}`.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Selection` 类型的 `state`：这代表记录生命周期的基本状态。它允许使用 `states` 字段属性动态设置 `readonly`、`required`
    或 `invisible` 属性；例如，`states={''draft'': [(''readonly'', False)]}`。'
- en: '`parent_id` of the `Many2one` type: This is used to define tree-like hierarchical
    structures, and enables the usage of the `child_of` and `parent_of` operators
    in domain expressions. The field to use as `parent_id` can be set to a different
    one using the `_parent_name` model attribute.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Many2one` 类型的 `parent_id`：这个字段用于定义树状层次结构，并允许在域表达式中使用 `child_of` 和 `parent_of`
    操作符。用作 `parent_id` 的字段可以通过 `_parent_name` 模型属性设置为不同的字段。'
- en: '`parent_path` of the `Char` type: This can be used to optimize the usage of
    the `child_of` and `parent_of` operators in domain expressions. For proper operation,
    use `add index=True` to use a database index. We will discuss hierarchical relations
    later in this chapter, in the *Hierarchical relationships* section.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Char` 类型的 `parent_path`：这可以用于优化域表达式中 `child_of` 和 `parent_of` 操作符的使用。为了正确操作，使用
    `add index=True` 以使用数据库索引。我们将在本章的 *层次关系* 部分讨论层次关系。'
- en: '`company_id` of the `Many2one` type: This is used to identify the company that
    the record belongs to. An empty value means that the record is shared between
    companies. It is used by internal checks on company data consistency via the `_check_company`
    function.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Many2one` 类型的 `company_id`：这个字段用于标识记录所属的公司。空值表示该记录在公司之间共享。它通过 `_check_company`
    函数用于公司数据一致性的内部检查。'
- en: Changes in Odoo 14
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Odoo 14 的变化
- en: '`x_active` is now recognized as an equivalent to the `active` field and can
    be used for the same effect. This was introduced for better support for customizations
    using **Developer Mode** or the **Odoo Studio** app.'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x_active` 现在被视为与 `active` 字段等效，可以用于相同的效果。这是为了更好地支持使用**开发者模式**或**Odoo Studio**应用程序进行定制而引入的。'
- en: So far, we have discussed non-relational fields. But a good part of an application
    data structure is about describing the relationships between entities. Let's look
    at that now.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论了非关系型字段。但应用程序数据结构的大部分内容是关于描述实体之间的关系。现在让我们看看这一点。
- en: Relationships between models
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型之间的关系
- en: Non-trivial business applications need to use relationships between the different
    entities involved. To do this, we need to use relational fields.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 非平凡的商务应用程序需要使用涉及的不同实体之间的关系。为此，我们需要使用关系型字段。
- en: 'Looking at the `Library` app, the `Book` model has the following relationships:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下 `Library` 应用程序，`Book` 模型有以下关系：
- en: Each book can have one publisher, and each publisher can have many books. From
    the book's point of view, this is a *many-to-one relationship*. It is implemented
    in the database as an integer field, holding the ID of the related publisher record,
    and a database foreign key in it, enforcing referential integrity.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每本书可以有一个出版者，每个出版者也可以有许多本书。从书籍的角度来看，这是一个*多对一关系*。它在数据库中通过一个整数字段实现，持有相关出版者记录的 ID，以及一个数据库外键，强制引用完整性。
- en: The reverse of this, from the publisher's point of view, is a **one-to-many
    relation**, meaning that each publisher can have many books. While this is also
    a field type in Odoo, its database representation relies on the many-to-one relationship.
    We know the books related to a publisher running a query on books, filtered by
    the publisher ID.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从出版者的角度来看，这是**一对多关系**，意味着每个出版者可以有许多本书。虽然这也在 Odoo 中是一个字段类型，但其数据库表示依赖于多对一关系。我们可以通过在书籍上运行查询并按出版者
    ID 过滤来知道与出版者相关的书籍。
- en: Each book can have many authors, and each author can have many books. This is
    a **many-to-many** relationship. The inverse relationship is also a many-to-many
    relationship. In relational databases, many-to-many relationships are represented
    through a helper database table. Odoo will automatically take care of this, although
    we can have some control over the technical details if we want.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每本书可以有多个作者，每个作者也可以有多个书。这是一个**多对多关系**。反向关系也是一个多对多关系。在关系型数据库中，多对多关系通过辅助数据库表来表示。Odoo
    将自动处理这一点，尽管如果我们想的话，我们可以对技术细节进行一些控制。
- en: We will explore each of these relationships in the following sections.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中探讨这些关系的每一个。
- en: A particular case is hierarchical relations, where records in a model are related
    to other records in the same model. We will introduce a book category model to
    explain this.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊情况是层次关系，其中模型中的记录与同一模型中的其他记录相关联。我们将通过介绍一个图书分类模型来解释这一点。
- en: Finally, the Odoo framework also supports flexible relationships, where the
    same field is capable of representing relationships with several different models.
    These are called `Reference` fields.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Odoo框架还支持灵活的关系，其中同一字段能够表示与几个不同模型的关系。这些被称为`Reference`字段。
- en: Many-to-one relationships
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多对一关系
- en: A `publisher_id` field represents a reference to the book publisher – a record
    in the **Partner** model.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`publisher_id`字段代表对图书出版商的引用——**合作伙伴**模型中的一个记录。
- en: 'As a reminder, this is the publisher field definition using positional arguments
    only:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，这是仅使用位置参数的出版字段定义：
- en: '[PRE8]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding `Many2one` field definition uses positional arguments:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的`Many2one`字段定义使用了位置参数：
- en: The first positional argument is the related model, corresponding to the `comodel`
    keyword argument, which is `res.partner` in this case.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个位置参数是相关模型，对应于`comodel`关键字参数，在这种情况下是`res.partner`。
- en: The second positional argument is the field label, corresponding to the `string`
    keyword argument. This is not the case for the other relational fields, so the
    preferred option is to always use `string` as a keyword argument.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个位置参数是字段标签，对应于`string`关键字参数。对于其他关系字段来说并非如此，因此首选选项是始终使用`string`作为关键字参数。
- en: A many-to-one model field creates a column in the database table, with a foreign
    key to the related table, and holds the database ID of the related record.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 多对一模型字段在数据库表中创建一个列，有一个外键指向相关表，并持有相关记录的数据库ID。
- en: 'Keyword arguments can be used instead of, or to complement, the positional
    argument. These are the keyword arguments that are supported by many-to-one fields:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用关键字参数代替或补充位置参数。这些是多对一字段支持的关键字参数：
- en: '`ondelete`: This defines what happens when the related record is deleted. The
    possible behaviors are as follows:'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ondelete`: 这定义了当相关记录被删除时会发生什么。可能的行为如下：'
- en: '`set null` (the default): An empty value is set when the related record is
    deleted.'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`set null`（默认值）：当相关记录被删除时设置一个空值。'
- en: '`restricted`: This raises an error, preventing the deletion.'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`restricted`: 这将引发错误，防止删除。'
- en: '`cascade`: This will also delete this record when the related record is deleted.'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`cascade`: 当相关记录被删除时，这也会删除此记录。'
- en: '`context`: This is a dictionary of data that''s meaningful for the web client
    views to carry information when navigating through the relationship, such as to
    set default values. This will be explained in more detail in [*Chapter 8*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227),
    *Business Logic – Supporting Business Processes*.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context`: 这是一个字典，包含对网络客户端视图有意义的用于在导航关系时携带信息的数据，例如设置默认值。这将在[*第8章*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227)中更详细地解释，*业务逻辑
    – 支持业务流程*。'
- en: '`domain`: This is a domain expression – a list of tuples used to filter the
    records made available for selection on the relationship field. See [*Chapter
    8*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227), *Business Logic – Supporting
    Business Processes*, for more details.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domain`: 这是一个域表达式——用于过滤在关系字段上可供选择的记录的元组列表。有关更多详细信息，请参阅[*第8章*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227)，*业务逻辑
    – 支持业务流程*。'
- en: '`auto_join=True`: This allows the ORM to use SQL joins when doing searches
    using this relationship. If used, the access security rules will be bypassed,
    and the user could have access to related records that the security rules would
    not allow, but the SQL queries will run faster.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto_join=True`: 这允许ORM在搜索使用此关系时使用SQL连接。如果使用，将绕过访问安全规则，用户可能能够访问安全规则不允许的相关记录，但SQL查询将运行得更快。'
- en: '`delegate=True`: This creates a delegation inheritance with the related model.
    When used, the `required=True` and `ondelete="cascade"` attributes must also be
    set. See [*Chapter 4*](B16119_04_Final_PD_ePub.xhtml#_idTextAnchor119), *Extending
    Modules*, for more information on delegation inheritance.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delegate=True`: 这将创建与相关模型相关的委托继承。当使用时，必须设置`required=True`和`ondelete="cascade"`属性。有关委托继承的更多信息，请参阅[*第4章*](B16119_04_Final_PD_ePub.xhtml#_idTextAnchor119)，*扩展模块*。'
- en: One-to-many inverse relationships
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一对多反向关系
- en: A **one-to-many relationship** is the inverse of the many-to-one relationship.
    It lists the records that have a relationship with this record.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**一对多关系**是多对一关系的逆关系。它列出与该记录有关系的记录。'
- en: For example, in the library book model, the `publisher_id` field has a many-to-one
    relationship with the partner model. This means that the partner model can have
    a one-to-many inverse relationship with the book model, listing the books published
    by each partner.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在图书馆书籍模型中，`publisher_id`字段与合作伙伴模型之间存在多对一关系。这意味着合作伙伴模型可以与书籍模型存在一对多反向关系，列出每个合作伙伴出版的书籍。
- en: 'Before a one-to-many relationship field can be created, the inverse many-to-one
    field should be added to the related model. For this, create the `library_app/models/res_partner.py`
    file with the following code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建一对一关系字段之前，应将反向多对一字段添加到相关模型中。为此，创建`library_app/models/res_partner.py`文件，并包含以下代码：
- en: '[PRE9]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Since this is a new code file for the module, it must also be added to the
    `library_app/models/__init__.py` file:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个模块的新代码文件，它也必须添加到`library_app/models/__init__.py`文件中：
- en: '[PRE10]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `One2many` fields expect three positional arguments:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`One2many`字段期望三个位置参数：'
- en: The related model, which corresponds to the `comodel_name` keyword argument
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相关模型，对应于`comodel_name`关键字参数
- en: The related model field that's used to refer to this record, which corresponds
    to the `inverse_name` keyword argument
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于引用此记录的相关模型字段，对应于`inverse_name`关键字参数
- en: The field label, which corresponds to the `string` keyword argument
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段标签，对应于`string`关键字参数
- en: 'The additional keyword arguments that are available are the same as those for
    the many-to-one fields: `context`, `domain`, `auto_join`, and `ondelete` (here,
    these act on the **many** sides of the relationship).'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的附加关键字参数与多对一字段的相同：`context`、`domain`、`auto_join`和`ondelete`（在这里，这些作用于关系的**多**方）。
- en: Many-to-many relationships
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多对多关系
- en: 'A **many-to-many relationship** is used when both entities have a to-many relationship
    between them. Using the library books example, there is a many-to-many relationship
    between books and authors: each book can have many authors, and each author can
    have many books.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当两个实体之间都存在多对多关系时，使用**多对多关系**。以图书馆书籍为例，书籍和作者之间存在多对多关系：每本书可以有多个作者，每个作者也可以有多个书籍。
- en: 'On the book''s side – that is, the `library.book` model – we have the following:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在书籍的一侧——即`library.book`模型——我们有以下内容：
- en: '[PRE11]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'On the author''s side, we can have the `res.partner` model inverse relationship:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在作者的一侧，我们可以有`res.partner`模型的反向关系：
- en: '[PRE12]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `Many2many` minimal signature expects one positional argument for the related
    model – the `comodel_name` keyword argument – and it is recommended to also provide
    the `string` argument with the field label.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`Many2many`最小签名期望一个位置参数用于相关模型——`comodel_name`关键字参数——并且建议也提供带有字段标签的`string`参数。'
- en: At the database level, many-to-many relationships don't add any columns to the
    existing tables. Instead, a special relationship table is automatically created
    to store the relationships between records. This special table has only two ID
    fields, with foreign keys for each of the two related tables.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库级别，多对多关系不会向现有表添加任何列。相反，自动创建一个特殊的关系表来存储记录之间的关系。这个特殊表只有两个ID字段，每个相关表都有一个外键。
- en: By default, the relationship table's name is the two table names joined with
    an underscore and `_rel` appended at the end. In the case of our books or authors
    relationship, it should be named `library_book_res_partner_rel`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，关系表的名字是两个表名通过下划线连接，并在末尾附加`_rel`。在我们的书籍或作者关系的情况下，它应该命名为`library_book_res_partner_rel`。
- en: On some occasions, we may need to override these automatic defaults. One such
    case is when the related models have long names, and the name for the automatically
    generated relationship table is too long, exceeding the 63-character PostgreSQL
    limit. In these cases, we need to manually choose a name for the relationship
    table to conform to the table name size limit.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们可能需要覆盖这些自动默认值。这种情况之一是当相关模型具有长名称时，自动生成的关联表名称过长，超过了63个字符的PostgreSQL限制。在这些情况下，我们需要手动选择关系表名称以符合表名大小限制。
- en: Another case is when we need a second many-to-many relationship between the
    same models. In these cases, a relationship table name must be manually provided
    so that it doesn't collide with the table name already being used for the first
    relationship.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个情况是我们需要在同一模型之间建立第二个多对多关系。在这些情况下，必须手动提供关系表名称，以避免与第一个关系已使用的表名称冲突。
- en: 'There are two alternatives to manually override these values: either use positional
    arguments or keyword arguments.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以手动覆盖这些值：要么使用位置参数，要么使用关键字参数。
- en: 'When using positional arguments for the field definition, the field definition
    looks like this:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用位置参数进行字段定义时，字段定义看起来是这样的：
- en: '[PRE13]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Keyword arguments can be used instead, which may be preferred for readability:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用关键字参数代替，这可能会更易于阅读：
- en: '[PRE14]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following arguments were used here:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用了以下参数：
- en: '`comodel_name` is the name of the related model.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comodel_name`是相关模型的名称。'
- en: '`relation` is the database table name supporting the relationship data.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`relation`是支持关系数据的数据库表名称。'
- en: '`column1` is the column name referring to the model records.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column1`是引用模型记录的列名。'
- en: '`column2` is the column name referring to the related model records.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column2`是引用相关模型记录的列名。'
- en: '`string` is the field label in the user interface.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string`是用户界面中的字段标签。'
- en: Similar to one-to-many relational fields, many-to-many fields can also use the
    `context`, `domain`, and `auto_join` keyword arguments.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 与一对一关系字段类似，多对多字段也可以使用`context`、`domain`和`auto_join`关键字参数。
- en: Tip
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: On abstract models, don't use the many-to-many field `column1` and `column2`
    attributes. There is a limitation in the ORM design regarding abstract models,
    and when you force the names of the relationship columns, they cannot be cleanly
    inherited anymore.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在抽象模型上，不要使用多对多字段`column1`和`column2`属性。在ORM设计方面，抽象模型存在限制，当你强制设置关系列的名称时，它们将无法再干净地继承。
- en: Parent-child relationships are a particular case that is worth looking into
    in more detail. We will do this in the next section.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 父子关系是一个值得详细研究的特殊情况。我们将在下一节中这样做。
- en: Hierarchical relationships
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 层次关系
- en: Parent-child tree relationships are represented using a many-to-one relationship
    with the same model, where each record holds a reference to its parent. The inverse
    one-to-many relationship represents the record's direct children.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 父子树关系使用与同一模型的多对一关系表示，其中每个记录都包含对其父记录的引用。反向的一对多关系表示记录的直接子项。
- en: Odoo provides improved support for these hierarchical data structures, making
    the `child_of` and `parent_of` operators available in domain expressions. These
    operators are available so long as the model has a `parent_id` field (or the model
    has a `_parent_name` valid definition, setting an alternative field name to use
    for this purpose).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo提供了对这些层次数据结构的改进支持，使得`child_of`和`parent_of`运算符在域表达式中可用。只要模型有一个`parent_id`字段（或者模型有一个有效的`_parent_name`定义，设置一个用于此目的的替代字段名称），这些运算符都是可用的。
- en: Optimized hierarchy tree searching can be enabled by setting the `_parent_store=True`
    model attribute and adding the `parent_path` helper field. This helper field stores
    additional information about the hierarchy tree structure, which is used to run
    faster queries.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置`_parent_store=True`模型属性并添加`parent_path`辅助字段，可以启用优化的层次树搜索。这个辅助字段存储有关层次树结构的额外信息，用于运行更快的查询。
- en: Changes in Odoo 12
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 12中的更改
- en: The `parent_path` hierarchy helper field was introduced in Odoo 12\. Previous
    versions used the `parent_left` and `parent_right` integer fields for the same
    purpose, but these were deprecated as of Odoo 12.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`parent_path`层次辅助字段是在Odoo 12中引入的。之前的版本使用了`parent_left`和`parent_right`整数字段来达到相同的目的，但自Odoo
    12起，这些字段已被弃用。'
- en: As an example of a hierarchical structure, we will add a category tree to the
    **Library** app to be used to categorize books.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 作为层次结构的示例，我们将在**图书馆**应用中添加一个分类树，用于对书籍进行分类。
- en: 'Let''s add the `library_app/models/library_book_category.py` file, along with
    the following code:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加`library_app/models/library_book_category.py`文件，以及以下代码：
- en: '[PRE15]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, we have a basic model with a `parent_id` field to reference the parent
    record.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有一个基本的模型，包含一个`parent_id`字段来引用父记录。
- en: To enable a faster tree search, we added the `_parent_store=True` model attribute.
    When doing so, the `parent_path` field must also be added, and it must be indexed.
    The field that's used to refer to the parent is expected to be named `parent_id`,
    but any other field name can be used, so long as we declare that in the `_parent_name`
    optional model attribute.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现更快的树搜索，我们添加了 `_parent_store=True` 模型属性。这样做时，必须也添加 `parent_path` 字段，并且它必须被索引。用于引用父记录的字段预期命名为
    `parent_id`，但可以使用任何其他字段名，只要我们在 `_parent_name` 可选模型属性中声明即可。
- en: It is often convenient to add a field to list the direct children. This is the
    one-to-many inverse relationship shown in the previous code.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个字段以列出直接子项通常很方便。这是前述代码中显示的一对多反向关系。
- en: 'For the previous code to be used by our module, remember to add a reference
    to its file in `library_app/models/__init__.py`:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们的模块使用之前的代码，请记住在 `library_app/models/__init__.py` 中添加对其文件的引用：
- en: '[PRE16]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Be aware that these additional operations come with storage and execution time
    penalties, so they are best used when you expect to read more frequently than
    write, such as in the case of category trees. This is only necessary when optimizing
    deep hierarchies with many nodes; this can be misused for small or shallow hierarchies.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些额外的操作会带来存储和执行时间上的惩罚，因此最好在您预期读取频率高于写入频率的情况下使用，例如在分类树的情况下。这仅在优化具有许多节点的深层层次结构时才是必要的；这可能会被用于小型或浅层层次结构。
- en: Flexible relationships using Reference fields
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用引用字段实现灵活的关系
- en: Regular relational fields can only reference one fixed co-model. The `Reference`
    field type does not have this limitation and supports flexible relationships,
    and the same field can reference records from different destination models.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 正规的关系字段只能引用一个固定的共同模型。`Reference` 字段类型没有这种限制，并支持灵活的关系，相同的字段可以引用来自不同目标模型的记录。
- en: 'As an example, we will add a `Reference` field to the book category model,
    to indicate a highlighted book or author. This field can link to either a book
    or a partner record:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将向图书分类模型添加一个 `Reference` 字段，以指示突出显示的图书或作者。此字段可以链接到图书或合作伙伴记录：
- en: '[PRE17]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The field definition is similar to a `Selection` field, but here, the selection
    list holds the models that can be used on the field. In the user interface, the
    user will pick a model from the available list, and then pick a specific record
    from that model.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 字段定义类似于 `Selection` 字段，但在这里，选择列表包含可用于字段的模型。在用户界面中，用户将从可用列表中选择一个模型，然后从该模型中选择一个特定记录。
- en: Reference fields are stored in the database as a character field, containing
    a `<model>,<id>` string.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 引用字段以字符字段的形式存储在数据库中，包含一个 `<model>,<id>` 字符串。
- en: Changes in Odoo 12
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 12 的变化
- en: Previous Odoo versions featured a referenceable model configuration that could
    be used to pick the models used in `Reference` fields from the `Reference` field,
    by adding the `odoo.addons.res.res_request.referenceable_models` function in place
    of the model selection list. This feature was removed in Odoo 12.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的 Odoo 版本具有可引用的模型配置，可用于从 `Reference` 字段选择在 `Reference` 字段中使用的模型，通过在模型选择列表中添加
    `odoo.addons.res.res_request.referenceable_models` 函数来实现。此功能已在 Odoo 12 中删除。
- en: With that, we've seen the field types that are supported by Odoo. Not only can
    fields store user-provided data, but they are also capable of presenting computed
    values. The next section introduces this feature.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些，我们已经看到了 Odoo 支持的字段类型。字段不仅可以存储用户提供的数据，还可以呈现计算值。下一节将介绍这一功能。
- en: Computed fields
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算字段
- en: Fields can have their values automatically calculated by a function, instead
    of simply reading a database stored value. A computed field is declared just like
    a regular field but has the additional `compute` argument to define the function
    that's used for the computation.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 字段可以由一个函数自动计算其值，而不是简单地读取数据库存储的值。计算字段就像常规字段一样声明，但具有额外的 `compute` 参数来定义用于计算的函数。
- en: Computed fields involve writing some business logic. So, to take full advantage
    of this feature, we should be comfortable with the topics that will be explained
    in [*Chapter 8*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227), *Business Logic
    – Supporting Business Processes*. Computed fields will still be explained here,
    but we will keep the business logic as simple as possible.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 计算字段涉及编写一些业务逻辑。因此，为了充分利用这一功能，我们应该熟悉将在 [*第8章*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227)
    中解释的主题，即 *业务逻辑 – 支持业务流程*。计算字段仍将在此处解释，但我们将尽可能保持业务逻辑简单。
- en: As an example, we will add a computed field to the `Books` model, displaying
    the publisher's country. This will allow the country to be displayed in the form
    view.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将向 `Books` 模型添加一个计算字段，显示出版商的国家。这将允许在表单视图中显示国家。
- en: 'The code that''s needed to find the value is simple: if `book` represents a
    book record, we can use object dot notation to get the publisher''s country using
    `book.publisher_id.country_id`.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 找到所需值的代码很简单：如果 `book` 代表一本书的记录，我们可以使用对象点符号通过 `book.publisher_id.country_id`
    获取出版商的国家。
- en: 'Edit the book model in the `library_app/models/library_book.py` file by adding
    the following code:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 `library_app/models/library_book.py` 文件中添加以下代码来编辑书籍模型：
- en: '[PRE18]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: First, this code adds the `publisher_country_id` field and sets the compute
    attribute with the name of the method function to use for its computation, `_compute_publisher_country`.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，此代码添加了 `publisher_country_id` 字段，并使用用于其计算的方法函数名称设置计算属性，即 `_compute_publisher_country`。
- en: The function name was passed to the field as a string argument, but it may also
    be passed as a callable reference (the function identifier, without the surrounding
    quotes). In this case, we need to make sure the function is defined in the Python
    file before the field is.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 函数名称作为字符串参数传递给了字段，但它也可以作为可调用的引用（函数标识符，不带引号）传递。在这种情况下，我们需要确保在字段之前在 Python 文件中定义了该函数。
- en: The coding convention for computation method names is to append the `_compute_`
    prefix to the computed field name.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 计算方法名称的编码约定是在计算字段名称后附加 `_compute_` 前缀。
- en: The `_compute_publisher_country` method receives a `self` record set to operate
    on and is expected to set the computed field values for all of those records.
    The code should iterate on the `self` recordset, to act on each record.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`_compute_publisher_country` 方法接收一个 `self` 记录集，用于操作，并预期为这些记录设置计算字段值。代码应该在 `self`
    记录集上迭代，以对每条记录进行操作。'
- en: 'The computed value is set using the usual assignment (write) operation. In
    our case, the computation is quite simple: we assign it to the current book''s
    `publisher_id.country_id` value.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 计算值使用常规的赋值（写入）操作设置。在我们的例子中，计算相当简单：我们将其分配给当前书籍的 `publisher_id.country_id` 值。
- en: Tip
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: The same computation method can be used to compute two or more fields. In this
    case, the method should be used on the `compute` attribute of the computed fields,
    and the computation method should assign values to all of them.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的计算方法可以用来计算两个或更多字段。在这种情况下，应该在计算字段的 `compute` 属性上使用该方法，计算方法应该为所有这些字段分配值。
- en: The computation function must always assign a value to the field, or fields,
    to compute. If your computation method has `if` conditions, make sure that all
    the run paths assign values to the computed fields. Computation methods will error
    if it misses assigning a value to some computed field(s).
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 计算函数必须始终为要计算的字段或字段分配一个值。如果你的计算方法有 `if` 条件，请确保所有运行路径都为计算字段分配值。如果遗漏了为某些计算字段分配值，计算方法将报错。
- en: Changes in Odoo 13
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 13 的变化
- en: Odoo 13 introduced **computed writeable** fields, intended to replace the **onchange**
    mechanism in the future. Computed writeable fields have a computation logic, triggered
    by changes on the dependencies, and also allow for the value to be directly set
    by users. This mechanism will be discussed alongside **onchange** in [*Chapter
    8*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227), *Business Logic – Supporting
    Business Processes*.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 13 引入了 **可计算的写入字段**，旨在未来替代 **onchange** 机制。可计算的写入字段具有计算逻辑，由依赖关系的变化触发，并允许用户直接设置值。这个机制将与
    **onchange** 一起在 [*第8章*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227) 中讨论，*业务逻辑
    – 支持业务流程*。
- en: The `@api.depends` decorator is needed to specify the fields the computation
    depends on. It is used by the ORM to know when the computation needs to be triggered
    to update stored or cached values. One or more field names are accepted as arguments
    and dot-notation can be used to follow field relationships. In this example, the
    `publisher_country_id` field should be recomputed when `publisher_id.country_id`
    changes.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`@api.depends` 装饰器用于指定计算所依赖的字段。ORM 使用它来知道何时触发计算以更新存储或缓存的值。接受一个或多个字段名作为参数，并可以使用点符号来跟踪字段关系。在这个例子中，当
    `publisher_id.country_id` 发生变化时，应该重新计算 `publisher_country_id` 字段。'
- en: Warning
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Forgetting to add the `@api.depends` decorator to a computation method, or adding
    it but failing to add all the dependency fields used for the computation, will
    prevent the computed field from being recalculated when it is supposed to. This
    can lead to hard-to-identify bugs.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 忘记添加`@api.depends`装饰器到计算方法中，或者添加了但未能添加所有用于计算的依赖字段，将阻止计算字段在应该重新计算时进行计算。这可能导致难以识别的错误。
- en: We can see the result of our work by adding the `publisher_country_id` field
    to the book form view, in the `library_app/views/library_book.xml` file. Make
    sure that the selected publishers have the country set on them when trying this
    with a web client.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将`publisher_country_id`字段添加到书籍表单视图（在`library_app/views/library_book.xml`文件中）来查看我们工作的结果。确保在尝试使用Web客户端时，所选的出版商已设置国家。
- en: Searching and writing on computed fields
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在计算字段上进行搜索和写入
- en: The computed field we created can be read, but it cannot be searched or written
    to. By default, computed field values are computed immediately when read, and
    their values are not stored in the database. That's why they can't be searched
    like regular stored fields can.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的计算字段可以读取，但不能搜索或写入。默认情况下，计算字段值在读取时立即计算，其值不存储在数据库中。这就是为什么它们不能像常规存储字段那样进行搜索。
- en: One way to work around this limitation is to have the computed values stored
    in the database by adding the `store = True` attribute. They will be recomputed
    when any of their dependencies change. Since the values are now stored, they can
    be searched just like regular fields, and a search function is not needed.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 一种绕过此限制的方法是将计算值存储在数据库中，通过添加`store = True`属性。当任何依赖项更改时，它们将重新计算。由于值现在已存储，它们可以像常规字段一样进行搜索，因此不需要搜索函数。
- en: 'Computed fields also support search and write operations without being stored
    in the database. This can be enabled by implementing specialized functions for
    these operations, alongside the `compute` function:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 计算字段也支持搜索和写入操作，而无需存储在数据库中。这可以通过实现这些操作的专用函数以及`compute`函数来实现：
- en: A `search` function to implement the search logic
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现搜索逻辑的`search`函数
- en: An `inverse` function to implement the write logic
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现写入逻辑的`inverse`函数
- en: 'Using these, our computed field declaration will look as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些，我们的计算字段声明将如下所示：
- en: '[PRE19]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To write on a computed field, we must implement the *inverse* logic of the value
    computation. This is why the function in charge of handling the write operation
    is called `inverse`.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 要在计算字段上写入，我们必须实现值计算的*逆*逻辑。这就是为什么负责处理写入操作的功能被称为`inverse`。
- en: In this example, setting a value on `publisher_country_id` is expected to change
    the publisher's country.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，设置`publisher_country_id`的值预计会更改出版商的国家。
- en: Note that this will also change the value that's seen in all the books with
    this publisher. Regular access controls apply to these write operations, so this
    action will only be successful if the current user also has to write access to
    the partner model.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这也会更改所有此出版商的书籍中看到的值。常规访问控制适用于这些写入操作，因此此操作只有在当前用户还需要对合作伙伴模型进行写入访问时才会成功。
- en: 'This inverse function implementation uses the values set on the computed field
    to perform the actual write operations needed to make this change persistent:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 此逆函数实现使用设置在计算字段上的值来执行实际写入操作，以使此更改持久化：
- en: '[PRE20]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The original value computation copies the `book.publisher_id.country_id` value
    to the `book.publisher_country_id` field. The inverse implementation, shown previously,
    does the opposite. It reads the value set on `book.publisher_country_id` and writes
    it to the `book.publisher_id.country_id` field.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 原始值计算将`book.publisher_id.country_id`值复制到`book.publisher_country_id`字段。之前显示的逆实现执行相反的操作。它读取`book.publisher_country_id`上设置的值并将其写入`book.publisher_id.country_id`字段。
- en: To enable search operations on a computed field, its `search` function must
    be implemented. The `search` function intercepts domain expressions operating
    on the computed field, and then replaces them with an alternative domain expression,
    using only regular stored fields.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用计算字段的搜索操作，必须实现其`search`函数。`search`函数拦截在计算字段上操作的域表达式，然后使用仅包含常规存储字段的替代域表达式来替换它们。
- en: 'In the `publisher_country_id` example, the actual search should be done on
    the `country_id` field of the linked `publisher_id` partner record. Here is the
    function implementation for this translation:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在`publisher_country_id`示例中，实际搜索应该在链接的`publisher_id`合作伙伴记录的`country_id`字段上执行。以下是此转换的函数实现：
- en: '[PRE21]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: When we perform a search on a model, a domain expression tuple is used as an
    argument, giving the details of the operator and the value that was used in the
    domain expression.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在模型上执行搜索时，会使用一个域表达式元组作为参数，给出操作符和域表达式中使用的值的详细信息。
- en: The `search` function is triggered whenever this computed field is found in
    conditions of a domain expression. It receives `operator` and `value` for the
    search and is expected to translate the original search element into an alternative
    domain search expression. The `country_id` field is stored in the related partner
    model, so our search implementation just alters the original search expression
    to use the `publisher_id.country_id` field instead.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个计算字段在域表达式条件中找到时，会触发 `search` 函数。它接收搜索的 `operator` 和 `value`，并期望将原始搜索元素转换为替代域搜索表达式。`country_id`
    字段存储在相关合作伙伴模型中，因此我们的搜索实现只是修改了原始搜索表达式，使用 `publisher_id.country_id` 字段代替。
- en: For reference, domain expressions will be explained in more detail in [*Chapter
    8*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227), *Business Logic – Supporting
    Business Processes*.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 为了参考，域表达式将在[*第 8 章*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227)中更详细地解释，*业务逻辑
    – 支持业务流程*。
- en: Related fields
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关字段
- en: 'The computed field we implemented in the previous section simply copies a value
    from a related record to a field of the model. This is a common use case and is
    needed when we want to present a field in a form from a related record. The Odoo
    framework provides a shortcut for this: the **related field** feature.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中我们实现的计算字段只是简单地将一个值从一个相关记录复制到模型的一个字段。这是一个常见的用例，当我们想要从一个相关记录中展示一个字段时就需要它。Odoo
    框架为此提供了一个快捷方式：**相关字段**功能。
- en: Related fields make fields that belong to a related model available in a model
    and are accessible using a *dot notation chain*. This makes them available in
    cases where dot notation can't be used, such as UI form views.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 相关字段使属于相关模型的字段在模型中可用，并且可以通过点符号链访问。这使得它们在点符号无法使用的情况下也变得可用，例如 UI 表单视图。
- en: To create a related field, a field of the required type must be declared, and
    the `related` attribute must be used, with the dot notation field chain needed
    to reach the target-related field.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个相关字段，必须声明一个所需类型的字段，并使用 `related` 属性，需要点符号字段链来达到目标相关字段。
- en: A `related` field can be used to get the same effect as in the previous `publisher_country_id`
    computed field example.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `related` 字段来达到与之前 `publisher_country_id` 计算字段示例相同的效果。
- en: 'Here is the alternative implementation, now using a `related` field:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一种实现方式，现在使用 `related` 字段：
- en: '[PRE22]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Behind the scenes, related fields are just computed fields, and they also conveniently
    implement `search` and `inverse` methods. So, they can be searched and written
    on.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，相关字段只是计算字段，它们还方便地实现了 `search` 和 `inverse` 方法。因此，它们可以被搜索和写入。
- en: By default, related fields are read-only, so the inverse write operation won't
    be available. To enable it, set the `readonly=False` field attribute.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，相关字段是只读的，因此反向写操作将不可用。要启用它，设置 `readonly=False` 字段属性。
- en: Changes in Odoo 12
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 12 的变化
- en: 'In previous Odoo versions, related fields were writable by default, but it
    was proven to be a dangerous default since it could allow changes to setup or
    master data in cases where that was not expected to be allowed. Because of this,
    starting with Odoo 12, the `related` fields are now read-only by default: `readonly=True`.'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的 Odoo 版本中，相关字段默认是可写的，但已被证明这是一个危险的默认设置，因为它可能允许在不期望允许的情况下更改设置或主数据。因此，从 Odoo
    12 开始，`related` 字段现在是默认只读的：`readonly=True`。
- en: It's also worth noting that `related` fields can also be stored in a database
    using `store=True`, just like any other computed field.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，`related` 字段也可以使用 `store=True` 在数据库中存储，就像任何其他计算字段一样。
- en: With that, we've learned about the features supported by Odoo fields, including
    computed fields. Another important element regarding data structures is constraints
    that enforce data quality and integrity. This is what the next section will discuss.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们已经了解了 Odoo 字段支持的功能，包括计算字段。关于数据结构的一个重要元素是强制数据质量和完整性的约束。这就是下一节将要讨论的内容。
- en: Model constraints
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型约束
- en: Often, applications need to ensure data integrity and enforce validations to
    ensure that the data is complete and correct.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，应用程序需要确保数据完整性并执行验证以确保数据完整和正确。
- en: The PostgreSQL database manager supports many useful validations, such as avoiding
    duplicates or checking that values meet certain simple conditions. Odoo models
    can use the PostgreSQL constraints capabilities for this.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 数据库管理器支持许多有用的验证，例如避免重复或检查值是否满足某些简单条件。Odoo 模型可以使用 PostgreSQL 约束功能来实现这一点。
- en: Some checks require more sophisticated logic and are better implemented as Python
    code. For these cases, we can use specific model methods that implement that Python
    constraint logic.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 一些检查需要更复杂的逻辑，并且最好用 Python 代码实现。对于这些情况，我们可以使用特定的模型方法来实现该 Python 约束逻辑。
- en: Let's learn more about these two possibilities.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解这两种可能性。
- en: SQL model constraints
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL 模型约束
- en: SQL constraints are added to the database table definition and are enforced
    directly by PostgreSQL. They are declared using the `_sql_constraints` class attribute.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 约束添加到数据库表定义中，并由 PostgreSQL 直接执行。它们使用 `_sql_constraints` 类属性声明。
- en: 'It is a list of tuples, and each tuple has a format of `(name, sql, message)`:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个元组列表，每个元组的格式为 `(name, sql, message)`：
- en: '`name` is the constraint identifier name.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` 是约束标识符名称。'
- en: '`sql` is the PostgreSQL syntax for the constraint.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sql` 是 PostgreSQL 约束的语法。'
- en: '`message` is the error message to present to users when the constraint is not
    verified.'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`message` 是当约束未验证时向用户展示的错误信息。'
- en: The most used SQL constraints are `UNIQUE` constraints, which are used to prevent
    data duplication, and `CHECK` constraints, which are used to test a SQL expression
    on the data.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的 SQL 约束是 `UNIQUE` 约束，用于防止数据重复，以及 `CHECK` 约束，用于在数据上测试 SQL 表达式。
- en: 'As an example, we will add two constraints to the `Book` model:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将向 `Book` 模型添加两个约束：
- en: Ensure that there are repeated books with the same title and publication date.
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保存在具有相同标题和出版日期的重复书籍。
- en: Ensure that the publication date is not in the future.
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保出版日期不是未来的日期。
- en: 'Edit the `library_app/models/library_book.py` file by adding the following
    code, which implements these two constraints. Usually, this goes after a section
    of the code with the field declarations:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加以下代码来编辑 `library_app/models/library_book.py` 文件，这些代码实现了这两个约束。通常，这应该在字段声明部分的代码之后：
- en: '[PRE23]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: For more information on the PostgreSQL constraint syntax, see the official documentation
    at [https://www.postgresql.org/docs/current/ddl-constraints.html](https://www.postgresql.org/docs/current/ddl-constraints.html).
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 PostgreSQL 约束语法的更多信息，请参阅官方文档：[https://www.postgresql.org/docs/current/ddl-constraints.html](https://www.postgresql.org/docs/current/ddl-constraints.html)。
- en: Python model constraints
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 模型约束
- en: Python constraints can use arbitrary code to perform validations. The validation
    function should be decorated with `@api.constrains` and the list of fields involved
    in the check. The validation is triggered when any of those fields are modified
    and should raise an exception if the condition fails – usually, `ValidationError`.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: Python 约束可以使用任意代码来执行验证。验证函数应该用 `@api.constrains` 装饰，并包含在检查中涉及的字段列表。当这些字段中的任何一个被修改时，将触发验证，如果条件失败则应抛出异常——通常是
    `ValidationError`。
- en: In the case of the Library app, an obvious example is to prevent inserting incorrect
    ISBNs. We already have the logic to check that an ISBN is correct in the `_check_isbn()`
    method. We can use this in a model constraint to prevent saving incorrect data.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在图书馆应用的情况下，一个明显的例子是防止插入错误的 ISBN。我们已经在 `_check_isbn()` 方法中有了检查 ISBN 是否正确的逻辑。我们可以在模型约束中使用这个逻辑来防止保存错误的数据。
- en: 'Edit the `library_app/models/library_book.py` file by going to the top of the
    file and adding the following `import` statement:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前往文件顶部并添加以下 `import` 语句来编辑 `library_app/models/library_book.py` 文件：
- en: '[PRE24]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, in the same file, add the following code to the `Book` class:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在同一个文件中，向 `Book` 类添加以下代码：
- en: '[PRE25]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Python SQL constraints are usually added before the code section containing
    the field declaration.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: Python SQL 约束通常添加在包含字段声明的代码部分之前。
- en: Overview of the Odoo base models
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Odoo 基础模型概述
- en: In the previous chapters, we had the chance to create new models, such as the
    **Book** model, but we also made use of the already existing models, such as the
    **Partner** model, provided by the Odoo base module. In this section, we will
    provide a short introduction to these built-in models.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们有机会创建新的模型，例如 **Book** 模型，但我们还使用了 Odoo 基础模块提供的已存在的模型，例如 **Partner**
    模型。在本节中，我们将对这些内置模型进行简要介绍。
- en: The Odoo core framework includes the `base` add-on module. It provides the essential
    features needed for Odoo apps to work. It can be found in the Odoo repository,
    in the`./odoo/addons/base` subdirectory.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 核心框架包括 `base` 扩展模块。它提供了 Odoo 应用程序运行所需的基本功能。它可以在 Odoo 仓库中找到，位于 `./odoo/addons/base`
    子目录下。
- en: The standard add-on modules, which provide the official apps and features made
    available with Odoo, depend on and build on top of the `base` module. The standard
    add-ons can be found in the Odoo repository, in the `./addons` subdirectory.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 标准扩展模块，它们提供了 Odoo 官方应用程序和功能，依赖于并构建在 `base` 模块之上。标准扩展模块可以在 Odoo 仓库中找到，位于 `./addons`
    子目录下。
- en: 'The `base` module provides two kinds of models:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`base` 模块提供了两种类型的模型：'
- en: Information repository, `ir.*`, models
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息仓库，`ir.*`，模型
- en: Resources, `res.*`, models
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源，`res.*`，模型
- en: The **information repository** models are used to store basic data needed for
    the Odoo framework, such as Menus, Views, Models, and Actions. The data we find
    in the **Technical** menu is usually stored in information repository models.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '**信息仓库**模型用于存储 Odoo 框架所需的基本数据，如菜单、视图、模型和操作。我们在 **技术** 菜单中找到的数据通常存储在信息仓库模型中。'
- en: 'Some relevant examples are as follows:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些相关示例：
- en: '`ir.actions.act_window` for **Windows Actions**'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ir.actions.act_window` 用于 **窗口操作**'
- en: '`ir.config_parameter` for global configuration options'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ir.config_parameter` 用于全局配置选项'
- en: '`ir.ui.menu` for **Menu Items**'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ir.ui.menu` 用于 **菜单项**'
- en: '`ir.ui.view` for **Views**'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ir.ui.view` 用于 **视图**'
- en: '`ir.model` for **Models**'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ir.model` 用于 **模型**'
- en: '`ir.model.fields` for model **Fields**'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ir.model.fields` 用于模型 **字段**'
- en: '`ir.model.data` for **XML IDs**'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ir.model.data` 用于 **XML ID**'
- en: The **resources** models store basic master data that can be used by any module.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '**资源**模型存储了任何模块都可以使用的基本主数据。'
- en: 'These are the most important resource models:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是最重要的资源模型：
- en: '`res.partner` for business partners, such as customers and suppliers, and addresses'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res.partner` 用于商业伙伴，如客户和供应商，以及地址'
- en: '`res.company` for company data'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res.company` 用于公司数据'
- en: '`res.country` for countries'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res.country` 用于国家'
- en: '`res.country.state` for states or regions inside countries'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res.country.state` 用于国家内部的状态或地区'
- en: '`res.currency` for currencies'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res.currency` 用于货币'
- en: '`res.groups` for application security groups'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res.groups` 用于应用程序安全组'
- en: '`res.users` for application users'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res.users` 用于应用程序用户'
- en: This should provide useful context to help you understand the origin of these
    models.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该提供了有用的背景信息，以帮助您了解这些模型的起源。
- en: Summary
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the different model types, such as transient
    and abstract models, and why these are useful for user interface wizards and mixins,
    respectively. Other relevant model features include Python and SQL constraints,
    which can be used to prevent data entry errors.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了不同类型的模型，例如临时模型和抽象模型，以及为什么它们分别对用户界面向导和混入有用。其他相关的模型特性包括 Python 和 SQL
    约束，这些可以用来防止数据输入错误。
- en: We also learned about the available field types, as well as all the attributes
    they support, to be able to represent the business data in the most accurate way
    possible. We also learned about relationships fields, and how to use them to create
    relationships between the different entities that are used by our applications.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了可用的字段类型，以及它们支持的所有属性，以便尽可能准确地表示业务数据。我们还学习了关系字段，以及如何使用它们来创建应用程序中使用的不同实体之间的关系。
- en: After that, we saw that models are usually based on the `models.Model` class,
    but that we can also use `models.Abstract` for reusable mixin models and `models.Transient`
    for wizards or advanced user interaction dialogs. We saw the general model attributes
    that are available, such as `_order` for default sort order and `_rec_name` for
    the default field to use for record representation.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们了解到模型通常基于 `models.Model` 类，但我们也可以使用 `models.Abstract` 为可重用混入模型和 `models.Transient`
    为向导或高级用户交互对话框。我们看到了可用的通用模型属性，例如 `_order` 用于默认排序顺序和 `_rec_name` 用于记录表示的默认字段。
- en: The fields in a model define all the data they will store. We have also seen
    the non-relational field types that are available and the attributes they support.
    We also learned about the several types of relational fields – many-to-one, one-to-many,
    and many-to-many – and how they define relationships between models, including
    hierarchical parent/child relationships.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 模型中的字段定义了它们将存储的所有数据。我们还看到了可用的非关系字段类型及其支持的属性。我们还学习了多种关系字段类型——多对一、一对多和多对多——以及它们如何定义模型之间的关系，包括层次父子关系。
- en: Most fields store user input in databases, but fields can have values automatically
    computed by Python code. We saw how to implement computed fields and some advanced
    possibilities we have, such as making them writable and searchable.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数领域将用户输入存储在数据库中，但字段可以通过Python代码自动计算值。我们看到了如何实现计算字段以及我们拥有的某些高级可能性，例如使它们可写和可搜索。
- en: Also part of model definitions is constraints, enforcing data consistency, and
    validation. These can be implemented either using PostgreSQL or Python code.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 模型定义的一部分是约束，强制数据一致性，以及验证。这些可以使用PostgreSQL或Python代码实现。
- en: Now that we have created the data model, we should populate it with some default
    and demonstration data. In the next chapter, we will learn how to use data files
    to export, import, and load data using our system.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了数据模型，我们应该用一些默认和演示数据来填充它。在下一章中，我们将学习如何使用数据文件通过我们的系统导出、导入和加载数据。
- en: Further reading
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The official documentation for models can be found at [https://www.odoo.com/documentation/15.0/developer/reference/backend/orm.html.](https://www.odoo.com/documentation/15.0/developer/reference/backend/orm.html)
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 模型的官方文档可以在[https://www.odoo.com/documentation/15.0/developer/reference/backend/orm.html.](https://www.odoo.com/documentation/15.0/developer/reference/backend/orm.html)找到。
