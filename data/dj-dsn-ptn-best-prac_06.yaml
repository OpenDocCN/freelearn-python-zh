- en: Chapter 6. Admin Interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。管理员界面
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Customizing admin
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义管理员
- en: Enhancing models for the admin
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强管理员模型
- en: Admin best practices
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员最佳实践
- en: Feature flags
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能标志
- en: Django's much discussed admin interface makes it stand apart from the competition.
    It is a built-in app that automatically generates a user interface to add and
    modify a site's content. For many, the admin is Django's killer app, automating
    the boring task of creating admin interfaces for the models in your project.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Django备受瞩目的管理员界面使其脱颖而出。它是一个内置应用程序，可以自动生成用户界面以添加和修改站点的内容。对许多人来说，管理员是Django的杀手应用程序，自动化了为项目中的模型创建管理员界面这一乏味任务。
- en: Admin enables your team to add content and continue development at the same
    time. Once your models are ready and migrations have been applied, you just need
    to add a line or two to create its admin interface. Let's see how.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员使您的团队能够同时添加内容并继续开发。一旦您的模型准备好并应用了迁移，您只需要添加一两行代码来创建其管理员界面。让我们看看如何做到。
- en: Using the admin interface
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用管理员界面
- en: In Django 1.7, the admin interface is enabled by default. After creating your
    project, you will be able to see a login page when you navigate to `http://127.0.0.1:8000/admin/`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django 1.7中，默认情况下启用了管理员界面。创建项目后，当您导航到`http://127.0.0.1:8000/admin/`时，您将能够看到登录页面。
- en: 'If you enter the superuser credentials (or credentials of any staff user),
    you will be logged into the admin interface, as shown in the following screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您输入超级用户凭据（或任何员工用户的凭据），您将登录到管理员界面，如下面的屏幕截图所示：
- en: '![Using the admin interface](img/6644OS_06_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![使用管理员界面](img/6644OS_06_01.jpg)'
- en: 'However, your models will not be visible here, unless you define a corresponding
    `ModelAdmin` class. This is usually defined in your app''s `admin.py` as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，除非您定义相应的`ModelAdmin`类，否则您的模型在这里将不可见。这通常在您的应用程序的`admin.py`中定义如下：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, the second argument to register, a `ModelAdmin` class, has been omitted.
    Hence, we will get a default admin interface for the Post model. Let's see how
    to create and customize this `ModelAdmin` class.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，register的第二个参数，一个`ModelAdmin`类，已被省略。因此，我们将为Post模型获得一个默认的管理员界面。让我们看看如何创建和自定义这个`ModelAdmin`类。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**The Beacon**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**信标**'
- en: '"Having coffee?" asked a voice from the corner of the pantry. Sue almost spilled
    her coffee. A tall man wearing a tight red and blue colored costume stood smiling
    with hands on his hips. The logo emblazoned on his chest said in large type—Captain
    Obvious.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “在喝咖啡吗？”角落里传来一个声音。苏差点把咖啡洒出来。一个穿着紧身红蓝色服装的高个子男人双手叉腰微笑着站在那里。他胸前的标志大大地写着“显而易见船长”。
- en: '"Oh, my god," said Sue as she wiped the coffee stain with a napkin. "Sorry,
    I think I scared you," said Captain Obvious "What is the emergency?"'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，天哪，”苏在用餐巾擦咖啡渍时说道。“抱歉，我想我吓到你了，”显而易见船长说。“有什么紧急情况吗？”
- en: '"Isn''t it obvious that she doesn''t know?" said a calm feminine voice from
    above. Sue looked up to find a shadowy figure slowly descend from the open hall.
    Her face was partially obscured by her dark matted hair that had a few grey streaks.
    "Hi Hexa!" said the Captain "But then, what was the message on SuperBook about?"'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: “她不知道这是显而易见的吗？”一个平静的女声从上方传来。苏抬头看到一个阴影般的人物从开放的大厅缓缓降下。她的脸部被她那几缕灰色的头发部分遮挡住。“嗨，海克萨！”船长说。“但是，超级书上的消息是什么？”
- en: Soon, they were all at Steve's office staring at his screen. "See, I told you
    there is no beacon on the front page," said Evan. "We are still developing that
    feature." "Wait," said Steve. "Let me login through a non-staff account."
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 很快，他们都来到了史蒂夫的办公室，盯着他的屏幕。“看，我告诉过你，首页上没有信标，”埃文说。“我们还在开发这个功能。”“等等，”史蒂夫说。“让我用一个非员工账户登录。”
- en: 'In a few seconds, the page refreshed and an animated red beacon prominently
    appeared at the top. "That''s the beacon I was talking about!" exclaimed Captain
    Obvious. "Hang on a minute," said Steve. He pulled up the source files for the
    new features deployed earlier that day. A glance at the beacon feature branch
    code made it clear what went wrong:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，页面刷新了，一个动画的红色信标显眼地出现在顶部。“那就是我说的信标！”显而易见船长惊叫道。“等一下，”史蒂夫说。他打开了当天早些时候部署的新功能的源文件。一眼看到信标功能分支代码就清楚了出了什么问题：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '"Sorry everyone," said Steve. "There has been a logic error. Instead of turning
    this feature on only for staff, we inadvertently turned it on for everyone but
    staff. It is turned off now. Apologies for any confusion."'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: “对不起，各位，”史蒂夫说。“出现了逻辑错误。我们不是只为员工打开了这个功能，而是不小心为所有人打开了这个功能，除了员工。现在已经关闭了。对于任何混淆，我们深表歉意。”
- en: '"So, there was no emergency?" said Captain with a disappointed look. Hexa put
    an arm on his shoulder and said "I am afraid not, Captain." Suddenly, there was
    a loud crash and everyone ran to the hallway. A man had apparently landed in the
    office through one of the floor-to-ceiling glass walls. Shaking off shards of
    broken glass, he stood up. "Sorry, I came as fast as I could," he said, "Am I
    late to the party?" Hexa laughed. "No, Blitz. Been waiting for you to join," she
    said.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: “所以，没有紧急情况吗？”船长失望地说。海克萨把手搭在他肩上说：“恐怕没有，船长。”突然，传来一声巨响，所有人都跑到了走廊。一个人显然是从天花板到地板的玻璃墙中间降落在办公室里。他甩掉了碎玻璃，站了起来。“对不起，我尽快赶过来了，”他说，“我来晚了吗？”海克萨笑了。“不，闪电。一直在等你加入，”她说。
- en: Enhancing models for the admin
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强管理员模型
- en: The admin app is clever enough to figure out a lot of things from your model
    automatically. However, sometimes the inferred information can be improved. This
    usually involves adding an attribute or a method to the model itself (rather than
    at the `ModelAdmin` class).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员应用程序足够聪明，可以自动从您的模型中推断出很多东西。但是，有时推断出的信息可以得到改进。这通常涉及向模型本身添加属性或方法（而不是在`ModelAdmin`类中）。
- en: 'Let''s first take a look at an example that enhances the model for better presentation,
    including the admin interface:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一个增强模型以获得更好展示的示例，包括管理员界面：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s take a look at how admin uses all these non-field attributes:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看管理员如何使用所有这些非字段属性：
- en: '`__str__()`: Without this, the list of superhero entries would look extremely
    boring. Every entry would be plainly shown as `<SuperHero: SuperHero object>`.
    Try to include the object''s unique information in its `str` representation (or
    `unicode` representation, in the case of Python 2.x code), such as its name or
    version. Anything that helps the admin to recognize the object unambiguously would
    help.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__str__()`: 如果没有这个，超级英雄条目列表将看起来非常无聊。每个条目都会简单地显示为`<SuperHero: SuperHero object>`。尽量在其`str`表示中包含对象的唯一信息（或Python
    2.x代码中的`unicode`表示），比如它的名称或版本。任何有助于管理员明确识别对象的信息都会有所帮助。'
- en: '`get_absolute_url()`: This attribute is handy if you like to switch between
    the admin view and the object''s detail view on your website. If this method is
    defined, then a button labelled "**View on site**" will appear in the top right-hand
    side of the object''s edit page in its admin page.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_absolute_url()`: 如果您喜欢在网站上的管理视图和对象的详细视图之间切换，那么这个属性非常方便。如果定义了这个方法，那么在对象的编辑页面的右上方将出现一个标有“**在网站上查看**”的按钮。'
- en: '`ordering`: Without this meta option, your entries can appear in any order
    as returned from the database. As you can imagine, this is no fun for the admins
    if you have a large number of objects. Fresh entries are usually preferred to
    be seen first, so sorting by date in the reverse chronological order is common.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ordering`: 如果没有这个元选项，您的条目可以以从数据库返回的任何顺序出现。可以想象，如果您有大量对象，这对管理员来说并不有趣。通常希望首先看到新条目，因此按日期的逆向时间顺序排序是常见的。'
- en: '`verbose_name`: If you omit this attribute, your model''s name would be converted
    from CamelCase into camel case. In this case, "super hero" would look awkward,
    so it is better to be explicit about how you would like the user-readable name
    to appear in the admin interface.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verbose_name`: 如果省略了这个属性，您的模型名称将从驼峰式转换为小驼峰式。在这种情况下，“超级英雄”看起来很奇怪，因此最好明确指定用户可读名称在管理界面中的显示方式。'
- en: '`verbose_name_plural`: Again, omitting this option can leave you with funny
    results. Since Django simply prepends an ''s'' to the word, the plural of a superhero
    would be shown as "superheros" (on the admin front page, no less). So, it is better
    to define it correctly here.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verbose_name_plural`: 再次，省略此选项会导致有趣的结果。由于Django只是在单词前加上''s''，超级英雄的复数将显示为“superheros”（甚至在管理前页）。因此，在这里正确定义它会更好。'
- en: It is recommended that you define the previous `Meta` attributes and methods,
    not just for the admin interface, but also for better representation in the shell,
    log files, and so on.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您不仅为管理界面定义先前的`Meta`属性和方法，还为更好地在shell、日志文件等中表示。
- en: 'Of course, a further improved representation within the admin is possible by
    creating a `ModelAdmin` class as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，通过创建`ModelAdmin`类，可以进一步改进管理中的表示，如下所示：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s take a look at these options more closely:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看这些选项：
- en: '`list_display`: This option shows the model instances in a tabular form. Instead
    of using the model''s `__str__` representation, it shows each field mentioned
    as a separate sortable column. This is ideal if you like to see more than one
    attribute of your model.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list_display`: 此选项以表格形式显示模型实例。它不使用模型的`__str__`表示，而是将每个字段作为单独的可排序列显示。如果您希望查看模型的多个属性，这是理想的选择。'
- en: '`search_fields`: This option shows a search box above the list. Any search
    term entered would be searched against the mentioned fields. Hence, only text
    fields such as `CharField` or `TextField` can be mentioned here.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`search_fields`: 此选项在列表上方显示一个搜索框。输入的任何搜索词都将针对所述字段进行搜索。因此，只能在这里提到文本字段，如`CharField`或`TextField`。'
- en: '`ordering`: This option takes precedence over your model''s default ordering.
    It is useful if you prefer a different ordering in your admin screen.![Enhancing
    models for the admin](img/6644_06_02.jpg)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ordering`: 这个选项优先于模型的默认排序。如果您在管理屏幕中更喜欢不同的排序方式，这将非常有用。'
- en: Enhancing a model's admin page
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 增强模型的管理页面
- en: 'The preceding screenshot shows the following insets:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了以下插图：
- en: 'Inset 1: Without `str` or `Meta` attributes'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插图1：没有`str`或`Meta`属性
- en: 'Inset 2: With enhanced model `meta` attributes'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插图2：带有增强模型`meta`属性
- en: 'Inset 3: With customized `ModelAdmin`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插图3：带有自定义`ModelAdmin`
- en: Here, we have only mentioned a subset of commonly used admin options. Certain
    kinds of sites use the admin interface heavily. In such cases, it is highly recommended
    that you go through and understand the admin part of the Django documentation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只提到了一些常用的管理选项子集。某些类型的网站会大量使用管理界面。在这种情况下，强烈建议您阅读并了解Django文档中的管理部分。
- en: Not everyone should be an admin
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并非每个人都应该成为管理员
- en: Since admin interfaces are so easy to create, people tend to misuse them. Some
    give early users admin access by merely turning on their 'staff' flag. Soon such
    users begin making feature requests, mistaking the admin interface to be the actual
    application interface.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于管理界面很容易创建，人们往往滥用它们。一些人仅仅通过打开他们的“工作人员”标志就给予早期用户管理员访问权限。很快，这些用户开始提出功能请求，误以为管理界面是实际应用程序界面。
- en: Unfortunately, this is not what the admin interface is for. As the flag suggests,
    it is an internal tool for the staff to enter content. It is production-ready
    but not really intended for the end users of your website.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这并不是管理界面的用途。正如标志所示，它是一个内部工具，供工作人员输入内容使用。它已经准备好投入生产，但并不真正面向您网站的最终用户。
- en: It is best to use admin for simple data entry. For example, in a project I had
    reviewed, every teacher was made an admin for a Django application managing university
    courses. This was a poor decision since the admin interface confused the teachers.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最好将管理用于简单的数据输入。例如，在我审查过的一个项目中，每个老师都被设置为Django应用程序管理大学课程的管理员。这是一个糟糕的决定，因为管理界面让老师感到困惑。
- en: The workflow for scheduling a class involves checking the schedules of other
    teachers and students. Using the admin interface gives them a direct view of the
    database. There is very little control over how the data gets modified by the
    admin.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 安排课程的工作流程涉及检查其他教师和学生的日程安排。使用管理界面使他们直接查看数据库。对于管理员如何修改数据，几乎没有任何控制。
- en: So, keep the set of people with admin access as small as possible. Make changes
    via admin sparingly, unless it is simple data entry such as adding an article's
    content.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，尽量将具有管理访问权限的人数保持得尽可能少。除非是简单的数据输入，例如添加文章内容，否则请谨慎通过管理进行更改。
- en: Tip
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Best Practice**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**'
- en: Don't give admin access to end users.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将管理访问权限授予最终用户。
- en: Ensure that all your admins understand the data inconsistencies that can arise
    from making changes through the admin. If possible, record manually or use apps,
    such as `django-audit-loglog` that can keep a log of admin changes made for future
    reference.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的所有管理员都了解通过管理进行更改可能导致的数据不一致性。如果可能的话，手动记录或使用应用程序，例如`django-audit-loglog`，可以记录未来参考所做的管理更改。
- en: In the case of the university example, we created a separate interface for teachers,
    such as a course builder. These tools will be visible and accessible only if the
    user has a teacher profile.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在大学示例中，我们为教师创建了一个单独的界面，例如课程构建器。只有当用户具有教师配置文件时，这些工具才会可见和可访问。
- en: Essentially, rectifying most misuses of the admin interface involves creating
    more powerful tools for certain sets of users. However, don't take the easy (and
    wrong) path of granting them admin access.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，纠正大多数管理界面的误用涉及为某些用户组创建更强大的工具。但是，不要采取简单（错误的）路径，授予他们管理访问权限。
- en: Admin interface customizations
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理界面自定义
- en: The out-of-box admin interface is quite useful to get started. Unfortunately,
    most people assume that it is quite hard to change the Django admin and leave
    it as it is. In fact, the admin is extremely customizable and its appearance can
    be drastically changed with minimal effort.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 开箱即用的管理界面非常有用。不幸的是，大多数人认为很难更改Django管理界面，因此将其保持原样。实际上，管理界面是非常可定制的，只需付出最少的努力即可大幅改变其外观。
- en: Changing the heading
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改标题
- en: Many users of the admin interface might be stumped by the heading—*Django administration*.
    It might be more helpful to change this to something customized such as *MySite
    admin* or something cool such as *SuperBook Secret Area*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 许多管理界面的用户可能会被标题“Django administration”困惑。更改为一些自定义的内容，例如“MySite admin”或者“SuperBook
    Secret Area”可能更有帮助。
- en: 'It is quite easy to make this change. Simply add this line to your site''s
    `urls.py`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这种更改非常容易。只需将以下行添加到站点的`urls.py`中：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Changing the base and stylesheets
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改基础和样式表
- en: Almost every admin page is extended from a common base template named `admin/base_site.html`.
    This means that with a little knowledge of HTML and CSS, you can make all sorts
    of customizations to change the look and feel of the admin interface.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个管理页面都是从名为`admin/base_site.html`的通用基础模板扩展而来。这意味着只要稍微了解HTML和CSS，您就可以进行各种自定义，改变管理界面的外观和感觉。
- en: 'Simply create a directory called `admin` in any `templates` directory. Then,
    copy the `base_site.html` file from the Django source directory and alter it according
    to your needs. If you don''t know where the templates are located, just run the
    following commands within the Django shell:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在任何`templates`目录中创建一个名为`admin`的目录。然后，从Django源目录中复制`base_site.html`文件，并根据需要进行修改。如果您不知道模板的位置，请在Django
    shell中运行以下命令：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The last line is the location of all your admin templates. You can override
    or extend any of these templates. Please refer to the next section for an example
    of extending the template.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行是所有管理模板的位置。您可以覆盖或扩展这些模板中的任何一个。有关扩展模板的示例，请参考下一节。
- en: 'For an example of customizing the admin base template, you can change the font
    of the entire admin interface to "Special Elite" from Google Fonts, which is great
    for giving a mock-serious look. You will need to add an `admin/base_site.html`
    file in one of your template''s directories with the following contents:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 关于自定义管理基础模板的示例，您可以将整个管理界面的字体更改为来自Google Fonts的“Special Elite”，这对于赋予一种模拟严肃的外观非常有用。您需要在模板目录之一中添加一个`admin/base_site.html`文件，内容如下：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This adds an extra stylesheet for overriding the font-related styles and will
    be applied to every admin page.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加一个额外的样式表，用于覆盖与字体相关的样式，并将应用于每个管理页面。
- en: Adding a Rich Text Editor for WYSIWYG editing
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为所见即所得编辑添加富文本编辑器
- en: Sometimes, you will need to include JavaScript code in the admin interface.
    A common requirement is to use an HTML editor such as `CKEditor` for your `TextField`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要在管理界面中包含JavaScript代码。常见的要求是为您的`TextField`使用HTML编辑器，例如`CKEditor`。
- en: There are several ways to implement this in Django, for example, using a `Media`
    inner class on your `ModelAdmin` class. However, I find extending the admin `change_form`
    template to be the most convenient approach.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django中有几种实现这一点的方法，例如在`ModelAdmin`类上使用`Media`内部类。但是，我发现扩展管理`change_form`模板是最方便的方法。
- en: 'For example, if you have an app called `Posts`, then you will need to create
    a file called `change_form.html` within the `templates/admin/posts/` directory.
    If you need to show `CKEditor` (could be any JavaScript editor for that matter,
    but this one is the one I prefer) for the `message` field of any model in this
    app, then the contents of the file can be as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您有一个名为`Posts`的应用程序，则需要在`templates/admin/posts/`目录中创建一个名为`change_form.html`的文件。如果需要为该应用程序中任何模型的`message`字段显示`CKEditor`（也可以是任何JavaScript编辑器，但我更喜欢这个），则文件的内容可以如下所示：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The highlighted part is the automatically created `ID` for the form element
    we wish to enhance from a normal textbox to a Rich Text Editor. These scripts
    and styles have been added to the footer block so that the form elements would
    be created in the DOM before they are changed.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 突出显示的部分是我们希望从普通文本框改为富文本编辑器的表单元素自动生成的`ID`。这些脚本和样式已添加到页脚块，以便在更改之前在DOM中创建表单元素。
- en: Bootstrap-themed admin
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于Bootstrap的管理
- en: Overall, the admin interface is quite well designed. However, it was designed
    in 2006 and, for the most part, looks that way too. It doesn't have a mobile UI
    or other niceties that have become standard today.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，管理界面设计得相当不错。然而，它是在2006年设计的，大部分看起来也是这样。它没有移动UI或其他今天已经成为标准的美化功能。
- en: Unsurprisingly, the most common request for admin customization is whether it
    can be integrated with Bootstrap. There are several packages that can do this,
    such as `django-admin-bootstrapped` or `djangosuit`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，对管理自定义的最常见请求是是否可以与Bootstrap集成。有几个包可以做到这一点，比如 `django-admin-bootstrapped`
    或 `djangosuit`。
- en: Rather than overriding all the admin templates yourself, these packages provide
    ready-to-use Bootstrap-themed templates. They are easy to install and deploy.
    Being based on Bootstrap, they are responsive and come with a variety of widgets
    and components.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包提供了现成的基于Bootstrap主题的模板，易于安装和部署。基于Bootstrap，它们是响应式的，并带有各种小部件和组件。
- en: Complete overhauls
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完全改版
- en: There have been attempts made to completely reimagine the admin interface too.
    **Grappelli** is a very popular skin that extends the Django admin with new features,
    such as autocomplete lookups and collapsible inlines. With `django-admin-tools`,
    you get a customizable dashboard and menu bar.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 也有人尝试完全重新构想管理界面。**Grappelli** 是一个非常受欢迎的皮肤，它通过自动完成查找和可折叠的内联等新功能扩展了Django管理。使用
    `django-admin-tools`，您可以获得可定制的仪表板和菜单栏。
- en: There have been attempts made to completely rewrite the admin, such as `django-admin2`
    and `nexus`, which did not gain any significant adoption. There is even an official
    proposal called `AdminNext` to revamp the entire admin app. Considering the size,
    complexity, and popularity of the existing admin, any such effort is expected
    to take a significant amount of time.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有人尝试完全重写管理界面，比如 `django-admin2` 和 `nexus`，但没有获得任何重大的采用。甚至有一个名为 `AdminNext`
    的官方提案来改进整个管理应用。考虑到现有管理的规模、复杂性和受欢迎程度，任何这样的努力都预计需要大量的时间。
- en: Protecting the admin
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护管理
- en: The admin interface of your site gives access to almost every piece of data
    stored. So, don't leave the metaphorical gate lightly guarded. In fact, one of
    the only telltale signs that someone runs Django is that, when you navigate to
    `http://example.com/admin/`, you will be greeted by the blue login screen.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您网站的管理界面可以访问几乎所有存储的数据。因此，不要轻易留下象征性的门。事实上，当你导航到 `http://example.com/admin/` 时，你会看到蓝色的登录界面，这是运行Django的人的一个明显迹象。
- en: 'In production, it is recommended that you change this location to something
    less obvious. It is as simple as changing this line in your root `urls.py`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产中，建议将此位置更改为不太明显的位置。只需在根 `urls.py` 中更改这一行即可：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: A slightly more sophisticated approach is to use a dummy admin site at the default
    location or a honeypot (see the `django-admin-honeypot` package). However, the
    best option is to use HTTPS for your admin area since normal HTTP will send all
    the data in plaintext over the network.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一个稍微更复杂的方法是在默认位置使用一个虚拟的管理站点或者蜜罐（参见 `django-admin-honeypot` 包）。然而，最好的选择是在管理区域使用HTTPS，因为普通的HTTP会将所有数据以明文形式发送到网络上。
- en: Check your web server documentation on how to set up HTTPS for admin requests.
    On Nginx, it is quite easy to set this up and involves specifying the SSL certificate
    locations. Finally, redirect all HTTP requests for admin pages to HTTPS, and you
    can sleep more peacefully.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 查看您的Web服务器文档，了解如何为管理请求设置HTTPS。在Nginx上，设置这个很容易，涉及指定SSL证书的位置。最后，将所有管理页面的HTTP请求重定向到HTTPS，这样你就可以更加安心地睡觉了。
- en: The following pattern is not strictly limited to the admin interface but it
    is nonetheless included in this chapter, as it is often controlled in the admin.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式不仅限于管理界面，但仍然包括在本章中，因为它经常在管理中受到控制。
- en: Pattern – feature flags
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式 - 功能标志
- en: '**Problem**: Publishing of new features to users and deployment of the corresponding
    code in production should be independent.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：向用户发布新功能和在生产环境中部署相应的代码应该是独立的。'
- en: '**Solution**: Use feature flags to selectively enable or disable features after
    deployment.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：使用功能标志在部署后选择性地启用或禁用功能。'
- en: Problem details
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题细节
- en: Rolling out frequent bug fixes and new features to production is common today.
    Many of these changes are unnoticed by users. However, new features that have
    significant impact in terms of usability or performance ought to be rolled out
    in a phased manner. In other words, deployment should be decoupled from a release.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，频繁地将错误修复和新功能推向生产是很常见的。其中许多变化并不为用户所注意。然而，在可用性或性能方面有重大影响的新功能应该以分阶段的方式推出。换句话说，部署应该与发布分离。
- en: Simplistic release processes activate new features as soon as they are deployed.
    This can potentially have catastrophic results ranging from user issues (swamping
    your support resources) to performance issues (causing downtime).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 简化的发布流程在部署后立即激活新功能。这可能会导致从用户问题（淹没您的支持资源）到性能问题（导致停机时间）等灾难性的结果。
- en: Hence, in large sites it is important to decouple deployment of new features
    in production and activate them. Even if they are activated, they are sometimes
    seen only by a select group of users. This select group can be staff or a sample
    set of customers for trial purposes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在大型网站中，重要的是将新功能的部署与在生产环境中激活它们分开。即使它们被激活，有时也只能被一小部分用户看到。这个小组可以是员工或一小部分客户用于试用目的。
- en: Solution details
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案细节
- en: Many sites control the activation of new features using **Feature Flags**. A
    feature flag is a switch in your code that determines whether a feature should
    be made available to certain customers.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网站使用**功能标志**来控制新功能的激活。功能标志是代码中的开关，用于确定是否应向某些客户提供某项功能。
- en: Several Django packages provide feature flags such as `gargoyle` and `django-waffle`.
    These packages store feature flags of a site in the database. They can be activated
    or deactivated through the admin interface or through management commands. Hence,
    every environment (production, testing, development, and so on) can have its own
    set of activated features.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 几个Django包提供了功能标志，如`gargoyle`和`django-waffle`。这些包将站点的功能标志存储在数据库中。它们可以通过管理界面或管理命令激活或停用。因此，每个环境（生产、测试、开发等）都可以拥有自己激活的功能集。
- en: Feature flags were originally documented, as used in Flickr (See [http://code.flickr.net/2009/12/02/flipping-out/](http://code.flickr.net/2009/12/02/flipping-out/)).
    They managed a code repository without any branches, that is, everything was checked
    into the mainline. They also deployed this code into production several times
    a day. If they found out that a new feature broke anything in production or increased
    load on the database, then they simply disabled it by turning that feature flag
    off.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 功能标志最初是在Flickr中记录的（请参阅[http://code.flickr.net/2009/12/02/flipping-out/](http://code.flickr.net/2009/12/02/flipping-out/)）。他们管理了一个没有任何分支的代码库，也就是说，所有东西都被检入主线。他们还将这些代码部署到生产环境中多次。如果他们发现新功能在生产环境中出现故障或增加了数据库的负载，那么他们只需通过关闭该功能标志来禁用它。
- en: 'Feature flags can be used for various other situations (the following examples
    use `django-waffle`):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 功能标志可以用于各种其他情况（以下示例使用`django-waffle`）：
- en: '**Trials**: A feature flag can also be conditionally active for certain users.
    These can be your own staff or certain early adopters than you may be targeting
    as follows:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**试验**：功能标志也可以有条件地对某些用户进行激活。这些可以是您自己的员工或某些早期采用者，如下所示：'
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Sites can run several such trials in parallel, so different sets of users might
    actually have different user experiences. Metrics and feedback are collected from
    such controlled tests before wider deployment.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 网站可以同时运行几个这样的试验，因此不同的用户可能会有不同的用户体验。在更广泛的部署之前，会从这些受控测试中收集指标和反馈。
- en: '**A/B testing**: This is quite similar to trials except that users are selected
    randomly within a controlled experiment. This is quite common in web design to
    identify which changes can increase the conversion rates. This is how such a view
    can be written:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A/B测试**：这与试验非常相似，只是在受控实验中随机选择用户。这在网页设计中很常见，用于确定哪些更改可以提高转化率。以下是编写这样一个视图的方法：'
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Performance testing**: Sometimes, it is hard to measure the impact of a feature
    on server performance. In such cases, it is best to activate the flag only for
    a small percentage of users first. The percentage of activations can be gradually
    increased if the performance is within the expected limits.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能测试**：有时很难衡量某项功能对服务器性能的影响。在这种情况下，最好先仅为小部分用户激活该标志。如果性能在预期范围内，可以逐渐增加激活的百分比。'
- en: '**Limit externalities**: We can also use feature flags as a site-wide feature
    switch that reflects the availability of its services. For example, downtime in
    external services such as Amazon S3 can result in users facing error messages
    while they perform actions, such as uploading photos.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限制外部性**：我们还可以使用功能标志作为反映其服务可用性的站点范围功能开关。例如，外部服务（如Amazon S3）的停机可能导致用户在执行上传照片等操作时面临错误消息。'
- en: 'When the external service is down for extended periods, a feature flag can
    be deactivated that would disable the upload button and/or show a more helpful
    message about the downtime. This simple feature saves the user''s time and provides
    a better user experience:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当外部服务长时间停机时，可以停用功能标志，从而禁用上传按钮和/或显示有关停机的更有帮助的消息。这个简单的功能节省了用户的时间，并提供了更好的用户体验：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The main disadvantage of this approach is that the code gets littered with conditional
    checks. However, this can be controlled by periodic code cleanups that remove
    checks for fully accepted features and prune out permanently deactivated features.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的主要缺点是代码中充斥着条件检查。但是，可以通过定期的代码清理来控制这一点，以删除对已完全接受的功能的检查，并清除永久停用的功能。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored Django's built-in admin app. We found that it is
    not only quite useful out of the box, but that various customizations can also
    be done to improve its appearance and functionality.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Django内置的管理应用程序。我们发现它不仅可以直接使用，而且还可以进行各种自定义以改善其外观和功能。
- en: In the next chapter, we will take a look at how to use forms more effectively
    in Django by considering various patterns and common use cases.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何通过考虑各种模式和常见用例来更有效地使用Django中的表单。
