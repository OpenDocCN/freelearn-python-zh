- en: Chapter 3. Calculate This!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。计算这个！
- en: In the previous chapter, you learned about the uses of variables, different
    data types, and functions. You created your own function and learned how to get
    basic information from a user with the `raw_input()` function. Using these building
    blocks, you can begin to design basic programs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了变量的用途、不同的数据类型和函数。你创建了自己的函数，并学习了如何使用 `raw_input()` 函数从用户那里获取基本信息。使用这些构建块，你可以开始设计基本程序。
- en: The first program we make will be a five-function calculator that calculates
    two numbers as input. The calculator will help us learn to understand the mathematical
    functions that are a part of Python, which will be useful for our game at the
    end of the book. In addition to this, this calculator will form the foundation
    for a more complex calculator in [Chapter 5](ch05.html "Chapter 5. Loops and Logic"),
    *Loops and Logic*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们制作的第一个程序将是一个具有五个功能的计算器，它将计算两个输入数字。这个计算器将帮助我们学习理解Python中作为一部分的数学函数，这将在本书结尾的游戏中很有用。此外，这个计算器将为[第5章](ch05.html
    "第5章。循环和逻辑")中的更复杂计算器奠定基础，*循环和逻辑*。
- en: The calculator
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算器
- en: The first calculator was invented in 1966 at Texas Instruments ([http://www.ti.com/corp/docs/company/history/timeline/eps/1960/docs/67-handheld_calc_invented.htm](http://www.ti.com/corp/docs/company/history/timeline/eps/1960/docs/67-handheld_calc_invented.htm))
    and was able to do addition, subtraction, multiplication, and division. The calculator
    had eighteen keys and could display twelve numbers on the screen. While it doesn't
    seem like much at first, especially compared to the technology we now enjoy, there
    is quite a lot of code and decision making that go into the operations that a
    basic calculator performs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个计算器是在1966年由德州仪器公司发明的([http://www.ti.com/corp/docs/company/history/timeline/eps/1960/docs/67-handheld_calc_invented.htm](http://www.ti.com/corp/docs/company/history/timeline/eps/1960/docs/67-handheld_calc_invented.htm))，能够进行加法、减法、乘法和除法。计算器有十八个按键，可以在屏幕上显示十二个数字。虽然一开始看起来并不多，尤其是与我们现在所享受的技术相比，但一个基本计算器执行的操作中包含了大量的代码和决策。
- en: 'When we want to figure out how something works, we need to break it down into
    smaller parts. Let''s take a look at how the calculator adds numbers together:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要弄清楚某物是如何工作时，我们需要将其分解成更小的部分。让我们看看计算器是如何将数字相加的：
- en: First, the calculator needs power.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，计算器需要电源。
- en: The user enters the first number.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户输入第一个数字。
- en: The user presses an operation key (*+*, *-*, ***, or */*).
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户按下操作键（*+*，*-*，**，或 */*）。
- en: The user enters a second number.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户输入第二个数字。
- en: The user presses the *=* key.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户按下 *=* 键。
- en: Then, an answer is printed to the screen.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将答案打印到屏幕上。
- en: On a basic calculator, the computer does not keep all of the numbers on the
    screen. The computer must store the first number that the user entered in its
    memory.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在基本的计算器上，计算机不会在屏幕上保留所有数字。计算机必须将其用户输入的第一个数字存储在内存中。
- en: 'We will run our first calculator program inside of the terminal/command prompt,
    so there are other things we must consider in addition to how the numbers will
    be stored. For example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在终端/命令提示符中运行我们的第一个计算器程序，因此除了如何存储数字之外，我们还需要考虑其他事情。例如：
- en: How will we prompt the user to get the information that we need?
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将如何提示用户获取我们所需的信息？
- en: What happens if the user enters a text string instead of integers or floats?
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户输入的是文本字符串而不是整数或浮点数，会发生什么？
- en: What happens if the user enters numbers as a string instead of as integers or
    floats?
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户输入的是字符串而不是整数或浮点数，会发生什么？
- en: These are just some of the logical questions that need to be considered as we
    plan how to write our own calculator program. Can you think of any other problems
    that need to be solved?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是在我们计划编写自己的计算器程序时需要考虑的一些逻辑问题。你能想到其他需要解决的问题吗？
- en: Basic functions
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本功能
- en: 'We learned at the beginning of this chapter that the first electronic calculator
    had four basic functions: addition, subtraction, multiplication, and division.
    We will be working on programming each of these functions, and we will also learn
    a fifth mathematical function that we can program for our calculator called modulo.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章的开头了解到，第一台电子计算器有四个基本功能：加法、减法、乘法和除法。我们将致力于编写每个这些功能，我们还将学习一个可以为我们计算器编程的第五个数学函数，称为取模。
- en: Through the beginning of this chapter, we will use the `addition()` function
    as our example. Once we have created and tested an `addition()` function that
    does what we want it to, we will then build our other functions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章的开头，我们将使用`addition()`函数作为我们的例子。一旦我们创建并测试了一个能够完成我们想要的功能的`addition()`函数，我们就会构建我们的其他函数。
- en: 'Let''s return to our example of the addition function in [Chapter 2](ch02.html
    "Chapter 2. Variables, Functions, and Users"), *Variables, Functions, and Users*.
    Recall how we programmed this function:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到[第2章](ch02.html "第2章。变量、函数和用户")中关于加法函数的例子，*变量、函数和用户*。回忆一下我们是如何编写这个函数的：
- en: '![Basic functions](img/B04681_03_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![基本函数](img/B04681_03_01.jpg)'
- en: The addition function in the preceding screenshot does perform proper addition
    and prints the answer. However, there are problems with designing an `addition()`
    function this way. One problem is that the program can only add the same two numbers
    over and over again. Another problem is that, in this program, we are only using
    one mathematical operation (addition). This `addition()` function is too inflexible
    on its own; we need to design a function that is more user friendly.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图中的加法函数确实执行了正确的加法并打印了答案。然而，以这种方式设计`addition()`函数存在一些问题。一个问题是这个程序只能反复添加相同的两个数字。另一个问题是，在这个程序中，我们只使用了一种数学运算（加法）。这个`addition()`函数本身太不灵活了；我们需要设计一个更用户友好的函数。
- en: To design a better mathematical function, we need to solve the problem of user-inputs
    by letting the user change the numbers in the calculation. We also need to design
    a calculator where the user has mathematical functions other than addition that
    can be performed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设计一个更好的数学函数，我们需要通过让用户改变计算中的数字来解决用户输入的问题。我们还需要设计一个计算器，让用户能够执行除了加法以外的数学函数。
- en: Operations on two numbers
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对两个数字进行操作
- en: We are going to use the `raw_input()` function that we learned about in [Chapter
    2](ch02.html "Chapter 2. Variables, Functions, and Users"), *Variables, Functions,
    and Users*. Recall that from this chapter, we cannot perform addition on two strings.
    In fact, we cannot perform any kind of mathematical operations on strings.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在第2章中学习的`raw_input()`函数，*变量、函数和用户*。回想一下，从本章开始，我们无法对两个字符串进行加法运算。实际上，我们无法对字符串执行任何类型的数学运算。
- en: 'The following code asks for user input and stores the input in the computer
    as strings. Type the following code in your Python shell to take a look at the
    results:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码请求用户输入并将输入存储在计算机中作为字符串。在您的Python壳中输入以下代码以查看结果：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'What happens when you call the `addition()` function? If you call the `addition()`
    function, you will see that the addition has *NOT* happened. This program just
    prints the two numbers together, side by side, in the order that they were entered
    by the user:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用`addition()`函数时会发生什么？如果你调用`addition()`函数，你会看到加法并没有发生。这个程序只是按照用户输入的顺序将两个数字并排放在一起打印出来：
- en: '![Operations on two numbers](img/B04681_03_12_replace.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![对两个数字的操作](img/B04681_03_12_replace.jpg)'
- en: While putting information side by side is useful to combine words into a phrase
    or sentence, it is not very helpful in performing calculations with numbers, as
    we discovered in [Chapter 2](ch02.html "Chapter 2. Variables, Functions, and Users"),
    *Variables, Functions, and Users*. Instead, you will want to convert the user's
    answer to a number so that you can perform mathematical operations on the numbers.
    To convert the `input()` function to a number, you will use `int()` or the `float()`
    functions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然将信息并排放置对组合单词成短语或句子很有用，但正如我们在[第2章](ch02.html "第2章。变量、函数和用户")中发现的，它对进行数字计算并不很有帮助。相反，您可能希望将用户的答案转换为数字，以便可以对数字执行数学运算。要将`input()`函数转换为数字，您将使用`int()`或`float()`函数。
- en: Convert data into numbers – int() and float()
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将数据转换为数字 – `int()`和`float()`
- en: In order to change the user data entered in the `raw_input()` function from
    a string to a number, we need to use the whole-number-integer, `int()`, or floating-point-number,
    `float()`, functions to make the computer interpret the answer as a number.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将`raw_input()`函数中输入的用户数据从字符串转换为数字，我们需要使用整数函数`int()`或浮点数函数`float()`，以便让计算机将答案解释为数字。
- en: Floating point to whole number conversion
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浮点数转换为整数
- en: 'To try an example, type the following in your Python shell, and pay attention
    to the results:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要尝试一个例子，请在您的Python壳中输入以下内容，并注意结果：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding example, with `44.5`, you should notice that the `int()` function
    rounds up the number to `44`, while the `float()` function keeps the number at
    `44.5`. This is because `int()` likes whole numbers and rounds numbers down automatically.
    Take a look at this screenshot from the Python shell:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，使用`44.5`时，你应该注意到`int()`函数将数字向上舍入到`44`，而`float()`函数则保持数字为`44.5`。这是因为`int()`喜欢整数，并自动向下舍入数字。看看这个来自Python
    shell的截图：
- en: '![Floating point to whole number conversion](img/B04681_03_03.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![浮点数到整数转换](img/B04681_03_03.jpg)'
- en: Whole number to floating point conversion
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整数到浮点数转换
- en: 'Now, try the reverse. Convert a whole number into an integer and a float using
    this code in your Python shell:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试相反的操作。使用以下代码在Python shell中将整数转换为整数和浮点数：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding sample code, you see that the `int()` function keeps the number
    at `24`, while the `float()` function adds a decimal place to the number, making
    it print as `24.0`. This is because float is designed to deal with numbers and
    their decimal places. You can see the results in this screenshot of the Python
    shell:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例代码中，你可以看到`int()`函数保持数字为`24`，而`float()`函数在数字上添加一个小数位，使其打印为`24.0`。这是因为float被设计用来处理数字及其小数位。你可以在Python
    shell的此截图中看到结果：
- en: '![Whole number to floating point conversion](img/B04681_03_04.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![整数到浮点数转换](img/B04681_03_04.jpg)'
- en: Text strings fail in int() and float()
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本字符串在int()和float()中失败
- en: 'If you try to enter a text string into the `int()` or `float()` functions,
    you will get an error. In fact, you will only be able to type the first line of
    these two lines into your Python shell. This will immediately evaluate the `int(''hello'')`
    code as an error:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试将文本字符串输入到`int()`或`float()`函数中，你会得到一个错误。实际上，你只能将这两行中的第一行输入到你的Python shell中。这将立即将`int('hello')`代码评估为错误：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This happens because `int()` and `float()` apply specifically to numbers and
    do not deal with things that cannot be changed into numbers. In the following
    screenshot, notice that the Python shell returns something called a traceback
    with three lines of error code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为`int()`和`float()`专门应用于数字，并且不处理无法转换为数字的事物。在下面的截图，注意Python shell返回了一个称为traceback的错误代码，有三行错误信息：
- en: '![Text strings fail in int() and float()](img/B04681_03_05.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![文本字符串在int()和float()中失败](img/B04681_03_05.jpg)'
- en: 'We will switch between using `int()` and `float()` throughout the book so that
    you become used to using both functions:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们将交替使用`int()`和`float()`，这样你就能习惯使用这两个函数：
- en: '`int()`: This function converts data into a whole number'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int()`: 此函数将数据转换为整数'
- en: '`float()`: This function converts data into a number with decimal places'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`float()`: 此函数将数据转换为带小数的数字'
- en: 'Now that we know about converting strings into numbers, let''s rewrite our
    addition function, get input from the user, and convert the input into decimal
    numbers using the `float()` function. You can copy this code directly into your
    text editor:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了将字符串转换为数字的方法，让我们重新编写我们的加法函数，从用户那里获取输入，并使用`float()`函数将输入转换为十进制数字。你可以直接将此代码复制到你的文本编辑器中：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the following screenshot, you see the Python shell with the addition function
    defined. You also see that when the addition function is called, each `raw_input`
    line is printed and the user answers by typing in a number. The first and second
    input have been converted into integers, so when the answer is added together
    you will notice that the output is now correct according to the standard rules
    of addition:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图，你可以看到定义了加法函数的Python shell。你还可以看到，当调用加法函数时，每行`raw_input`都会打印出来，用户通过输入一个数字来回答。第一个和第二个输入已经转换为整数，所以当答案相加时，你会注意到输出现在根据标准的加法规则是正确的：
- en: '![Text strings fail in int() and float()](img/B04681_03_06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![文本字符串在int()和float()中失败](img/B04681_03_06.jpg)'
- en: Creating our first calculator file
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建我们的第一个计算器文件
- en: 'Let''s save your work before we continue. Open your text editor and make a
    file called `first_calc.py`, then type the addition function that you just made
    into that file. Make sure you save the file in your work folder that you made
    on your desktop back in [Chapter 1](ch01.html "Chapter 1. Welcome! Let''s Get
    Started"), *Welcome! Let''s Get Started*. It is important to keep your work organized
    so that you can run your code to test it and show it off:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，请保存你的工作。打开你的文本编辑器，创建一个名为 `first_calc.py` 的文件，然后将你刚刚创建的加法函数输入到该文件中。确保将文件保存在你之前在桌面上的[第1章](ch01.html
    "第1章。欢迎！让我们开始吧")，*欢迎！让我们开始吧*中创建的工作文件夹中。保持你的工作井然有序，这样你就可以运行你的代码来测试它并展示它：
- en: '![Creating our first calculator file](img/B04681_03_07.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的第一个计算器文件](img/B04681_03_07.jpg)'
- en: New functions – subtraction, multiplication, and division
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新函数 - 减法、乘法和除法
- en: Now that we have created an `addition()` function that accepts data from the
    user and converts it into numbers, we are ready to create functions for subtraction,
    multiplication, and division.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个 `addition()` 函数，该函数接受用户输入并将其转换为数字，我们准备创建减法、乘法和除法的函数。
- en: 'If you are coming back to this after a break, perform the following steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是在休息后回到这里的，请执行以下步骤：
- en: Open your Python shell so that you can test your code as you write.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的Python壳，以便你在编写代码时可以测试它。
- en: Next, open your text editor (jEdit in Mac/Linux and Notepad ++ in Windows).
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开你的文本编辑器（Mac/Linux上的jEdit和Windows上的Notepad ++）。
- en: Have both windows open on your desktop as you program.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你编程时，请确保在桌面上同时打开两个窗口。
- en: When you successfully write and test a line or a few lines of code in the Python
    shell, copy the lines into your text editor and then *Save Your Work* to the `first_calc.py`
    file that you created earlier in this chapter.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在Python壳中成功编写并测试了一行或几行代码后，将这行代码复制到你的文本编辑器中，然后*保存你的工作*到本章前面创建的 `first_calc.py`
    文件中。
- en: Tip
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Save your work early and as often as you can! Avoid being upset by accidentally
    erasing your code!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 尽早并尽可能频繁地保存你的工作！避免因为意外删除代码而感到沮丧！
- en: Subtraction
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 减法
- en: 'For the next part of our calculator, we will make our subtraction function.
    We will follow the same prompts as we used for the addition function to create
    a second function that performs subtraction. In your Python shell, try these steps
    to create the subtraction function:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们计算器的下一部分，我们将创建我们的减法函数。我们将遵循与加法函数相同的提示来创建一个执行减法的第二个函数。在你的Python壳中，尝试以下步骤来创建减法函数：
- en: Type `def` to start your function.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `def` 来开始你的函数。
- en: Name your function.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的函数命名。
- en: Add proper syntax, which is parenthesis `()` and `:`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加适当的语法，即括号 `()` 和冒号 `:`.
- en: Tab the remaining lines in four spaces each.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将剩余的行缩进四个空格。
- en: Request the first number from the user.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从用户那里请求第一个数字。
- en: Request the second number from the user.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从用户那里请求第二个数字。
- en: Print the output using the minus (`-`) symbol for subtraction.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用减号（`-`）来打印输出。
- en: 'Once you have tried creating this function in the Python shell, try calling
    the function using this line of code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在Python壳中尝试创建这个函数，尝试使用以下代码行来调用函数：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If the function call works, then you can type your code into your code file
    exactly as it appears in your Python shell. If your `subtraction()` function does
    not run, make sure you did not make any errors when typing your code in the shell.
    Double-check your code and rerun it until it is smooth. If you are stuck, you
    can copy the lines of the following code into your Python shell; they will perform
    subtraction on two integers:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数调用成功，那么你可以将你的代码直接输入到你的代码文件中，就像它在Python壳中显示的那样。如果你的 `subtraction()` 函数没有运行，确保你在壳中输入代码时没有犯任何错误。仔细检查你的代码并重新运行，直到它运行顺畅。如果你卡住了，你可以将以下代码行复制到你的Python壳中；它们将对两个整数执行减法：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once you have tested your code in the shell, you can then type it into your
    text editor. Remember to save your work in your `first_calc.py` file. Your `first_calc.py`
    file should now look something like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在壳中测试了你的代码，你就可以将其输入到你的文本编辑器中。记住，将你的工作保存在你的 `first_calc.py` 文件中。你的 `first_calc.py`
    文件现在应该看起来像这样：
- en: '![Subtraction](img/B04681_03_08_Revised.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![减法](img/B04681_03_08_Revised.jpg)'
- en: Multiplication
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 乘法
- en: By now, you might have observed a pattern in our functions. The multiplication
    function will follow the same format and logic rules as the addition and subtraction
    functions. You can continue to ask the user to enter each number, and then the
    computer will perform a proper calculation.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你可能已经观察到了我们函数中的模式。乘法函数将遵循与加法和减法函数相同的格式和逻辑规则。你可以继续要求用户输入每个数字，然后计算机将执行正确的计算。
- en: 'The following code is for the multiplication function. You can copy it directly,
    but it is a better idea to try to create the multiplication function on your own.
    If you try to create your function, you will know how well you have learned the
    way to create a function. When you are ready, you will see this code for the multiplication
    function:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是乘法函数的代码。你可以直接复制它，但最好是自己尝试创建乘法函数。如果你尝试创建函数，你将知道你学到了多少关于创建函数的方法。当你准备好时，你将看到乘法函数的以下代码：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once you have tested your code in your Python shell, remember to type the function
    in your text editor and save your work in your `first_calc.py` file:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在 Python 命令行中测试了你的代码，记得在文本编辑器中输入该函数，并将你的工作保存在 `first_calc.py` 文件中：
- en: '![Multiplication](img/B04681_03_09.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![乘法](img/B04681_03_09.jpg)'
- en: Division
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 除法
- en: 'Division is the final basic operation that we will program for our first calculator
    program. As with multiplication, you have already done most of the work for the
    division part of the calculator. See if you can recall how to create a division
    function from scratch. Once you have tested your code, compare it to the following
    code and see if it matches up:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 除法是我们将为我们的第一个计算器程序编写的最后一个基本操作。与乘法一样，你在计算器的除法部分已经做了大部分工作。看看你是否能回忆起如何从头创建一个除法函数。一旦你测试了你的代码，将其与以下代码进行比较，看看是否匹配：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once you have tested your code, remember to save your work in your `first_calc.py`
    file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你测试了你的代码，记得将你的工作保存在 `first_calc.py` 文件中：
- en: '![Division](img/B04681_03_10.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![除法](img/B04681_03_10.jpg)'
- en: Finding a remainder – modulo
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 找到余数 – 取模
- en: Modulo can seem like a strange concept. In fact, unless you are a programmer,
    it is likely that you have never heard of modulo. Modulo is a mathematical function
    that allows us to do a division problem but only return the remainder. Why is
    this even useful? Why is it a good idea, and why should we care?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 取模可能看起来像是一个奇怪的概念。实际上，除非你是程序员，否则你很可能从未听说过取模。取模是一个数学函数，它允许我们进行除法问题，但只返回余数。这有什么用呢？为什么这是一个好主意，我们应该关心吗？
- en: 'Usually, we want to know the entire answer to a division problem—the quotient
    and the remainder. There are times, though, when we will only want to know the
    remainder of the division problem. We will only care about what is leftover. Modulo
    is like a monster eating our dessert: we give the monster numbers to divide, and
    it just gives us leftovers.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们想知道除法问题的整个答案——商和余数。然而，有时我们可能只想知道除法问题的余数。我们只关心剩余的部分。取模就像一个怪物在吃我们的甜点：我们给怪物数字来除，它只给我们剩下的部分。
- en: While modulo is not especially useful in the world of school arithmetic, it
    can be very useful in moving objects in a game. So, it is good for us to build
    a modulo function and learn how modulo works.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然取模在学校的算术中不是特别有用，但它可以在游戏中移动对象时非常有用。因此，构建一个取模函数并学习取模的工作原理对我们来说很好。
- en: 'To build a modulo function, you will need to get user input, just like all
    of the other functions you made. Then, you will call the modulo function. The
    symbol for modulo is `%` You can place the modulo operator where you would normally
    place the division sign. Copy the following code in your Python shell as an example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个取模函数，你需要获取用户输入，就像你创建的所有其他函数一样。然后，你将调用取模函数。取模的符号是 `%`。你可以将取模运算符放在你通常放置除号的位置。以下是一个示例，将以下代码复制到你的
    Python 命令行中：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Finding a remainder – modulo](img/B04681_03_11.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![找到余数 – 取模](img/B04681_03_11.jpg)'
- en: In the preceding screenshot, you can see how we added the modulo function to
    the other functions. If you still find modulo confusing, don't worry right away.
    Just know that it might come up as you are designing games, and you can check
    back here, as well as do an Internet, search to better understand modulo.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，你可以看到我们如何将取模函数添加到其他函数中。如果你仍然觉得取模很困惑，不要急于担心。只需知道，当你设计游戏时，它可能会出现，你可以在这里查看，也可以进行网络搜索，以更好地理解取模。
- en: Running your program
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行你的程序
- en: 'To run your program, enter your command line or terminal window and type the
    following command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行你的程序，进入你的命令行或终端窗口，并输入以下命令：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Your program should run through addition, subtraction, multiplication, division,
    and modulo, and print answers to the user for each set of numbers that they enter.
    If there are errors when the program runs, the error messages from your computer
    will usually tell you that something is wrong. The error message will even tell
    you what line of code in your file has the problem so that it is easier to debug
    (find and fix errors in) your code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你的程序应该能够运行加法、减法、乘法、除法和取模运算，并且对于用户输入的每一组数字打印出答案。如果程序运行时出现错误，你的计算机的错误信息通常会告诉你哪里出了问题。错误信息甚至会告诉你文件中哪一行代码有问题，这样就可以更容易地调试（查找和修复）你的代码。
- en: A quick task for you
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个快速的任务给你
- en: Q1\. What kind of data does the `input()` function return?
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. `input()`函数返回什么类型的数据？
- en: Elements
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 元素
- en: Decimals
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 小数
- en: Strings
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字符串
- en: Integers
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整数
- en: Q2\. What does the `int()` function do?
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. `int()`函数的作用是什么？
- en: Changes data to whole numbers
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据转换为整数
- en: Changes data to a string
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据转换为字符串
- en: Does nothing
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不做任何事情
- en: Changes a function into a different function
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个函数转换为另一个不同的函数
- en: Q3\. How is the `float()` function different from the `int()` function?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Q3\. `float()`函数与`int()`函数有什么不同？
- en: They are not different, they do the same thing
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们没有区别，它们做的是同一件事
- en: The `float()` function deals with strings only
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`float()`函数仅处理字符串'
- en: The `float()` function converts data into floating point numbers only
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`float()`函数仅将数据转换为浮点数'
- en: '`float()` converts words into numbers'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`float()`函数将文字转换为数字'
- en: Q4\. If you make a function called `addition()` in your Python shell, how do
    you run that addition function to test it?
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Q4\. 如果你在你的Python shell中创建了一个名为`addition()`的函数，你该如何运行这个加法函数来测试它？
- en: Type addition in your Python shell
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的Python shell中输入`addition`
- en: Type def addition in your Python shell
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的Python shell中输入`type def addition`
- en: Type `addition()` in your Python shell
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的Python shell中输入`type addition()`
- en: Type `addition()` in your Python shell
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的Python shell中输入`type addition()`
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: Now that you have read this chapter, you hopefully have a calculator program
    that you can run! This program is more interactive and can do more things than
    your first program, so you should share this program with your family and friends
    to show them how you have improved your skills.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经阅读了这一章，你希望有一个可以运行的计算器程序！这个程序比你的第一个程序更具有交互性，可以做更多的事情，所以你应该把这个程序分享给你的家人和朋友，向他们展示你如何提高了你的技能。
- en: In the next chapter, we will learn about how decisions are made, and we will
    improve our calculator program by teaching it how to let a user choose which operation
    to perform as well as how many operands (numbers) to enter. We are going to get
    into things that are a bit more complicated, but we will go through them step
    by step so that you can understand each piece of what we are doing.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何做出决策，我们将通过教它如何让用户选择要执行的操作以及要输入多少个操作数（数字）来改进我们的计算器程序。我们将涉及一些更复杂的内容，但我们将会一步一步地进行，这样你就可以理解我们所做的每一部分。
