- en: Chapter 5. Advanced Application Structure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章。高级应用程序结构
- en: Our application has gone from a very simple example to an extendable foundation
    on which powerful features can easily be built. However, having our application
    entirely resided in one file needlessly clutters our code. To make the application
    code clearer and more comprehensible, we will transform the entire code into a
    Python module and split the code into multiple files.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序已经从一个非常简单的例子发展成一个可扩展的基础，可以很容易地构建强大的功能。然而，将整个应用程序代码都放在一个文件中会不必要地使我们的代码混乱。为了使应用程序代码更清晰、更易理解，我们将把整个代码转换为一个Python模块，并将代码分割成多个文件。
- en: The project as a module
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目作为一个模块
- en: 'Currently, your folder structure should look like this:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你的文件夹结构应该是这样的：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To convert our code to a module, our files will be converted to this folder
    structure:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的代码转换为一个模块，我们的文件将被转换为这个文件夹结构：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will create this folder structure step by step. The first change to make
    is to create a folder in your application that will hold the module. In this example,
    it will be called `webapp`, but can be called anything except a blog, because
    the controllers are called blogs. If there are two blog objects to import from,
    Python will not import objects correctly from the parent directory while importing
    inside the `blog.py` file.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐步创建这个文件夹结构。要做的第一个改变是在你的应用程序中创建一个包含模块的文件夹。在这个例子中，它将被称为`webapp`，但可以被称为除了博客以外的任何东西，因为控制器被称为博客。如果有两个要从中导入的博客对象，Python将无法正确地从父目录中导入`blog.py`文件中的对象。
- en: Next move `main.py` and `config.py`—the static and template folders, respectively—into
    your project folder and create a controllers folder as well. We will also need
    to create the files `forms.py` and `models.py` in the `project` folder, and a
    `blog.py` file in the controllers folder. Also, the `main.py` file will need to
    be renamed `__init__.py`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将`main.py`和`config.py`——静态和模板文件夹，分别移动到你的项目文件夹中，并创建一个控制器文件夹。我们还需要在`project`文件夹中创建`forms.py`和`models.py`文件，以及在控制器文件夹中创建一个`blog.py`文件。此外，`main.py`文件需要重命名为`__init__.py`。
- en: The filename `__init__.py` looks odd, but it has a specific function. In Python,
    a folder can be marked as a module by placing a file named `__init__.py` inside
    it. This allows programs to import objects and variables from the Python files
    in the folder.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 文件名`__init__.py`看起来很奇怪，但它有一个特定的功能。在Python中，通过在文件夹中放置一个名为`__init__.py`的文件，可以将文件夹标记为模块。这允许程序从文件夹中的Python文件中导入对象和变量。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about organizing Python code in a module, refer to the official
    documentation at [https://docs.python.org/2/tutorial/modules.html#packages](https://docs.python.org/2/tutorial/modules.html#packages).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于在模块中组织Python代码的信息，请参考官方文档[https://docs.python.org/2/tutorial/modules.html#packages](https://docs.python.org/2/tutorial/modules.html#packages)。
- en: Refactoring the code
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构代码
- en: Let's begin moving our SQLAlchemy code to the `models.py` file. Cut all the
    model declarations, the table of tags, and the database object from `__init__.py`
    and copy them to the `models.py` file along with the SQLAlchemy import. Also,
    our `db` object will no longer be initialized with the `app` object as a parameter
    because the `app` object is not present in the `models.py` file, and importing
    it would result in a cyclical import. Instead, we will have the app object added
    on to the `db` object after our models are initialized. This will be achieved
    later in our `__init__.py` file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始将我们的SQLAlchemy代码移动到`models.py`文件中。从`__init__.py`中剪切所有模型声明、标签表和数据库对象，并将它们与SQLAlchemy导入一起复制到`models.py`文件中。此外，我们的`db`对象将不再使用`app`对象作为参数进行初始化，因为`models.py`文件中没有`app`对象，导入它将导致循环导入。相反，我们将在初始化模型后将app对象添加到`db`对象中。这将在我们的`__init__.py`文件中实现。
- en: 'Your `models.py` file should now look like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你的`models.py`文件现在应该是这样的：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next, the `CommentForm` object, along with all the WTForms imports, should be
    moved to the `forms.py` file. The `forms.py` file will hold all the WTForms objects
    in their own file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`CommentForm`对象以及所有WTForms导入都应该移动到`forms.py`文件中。`forms.py`文件将保存所有WTForms对象在它们自己的文件中。
- en: 'The `forms.py` file should look like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`forms.py`文件应该是这样的：'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `blog_blueprint` data function, all its routes, and the `sidebar_data` data
    function need to be moved to the `blog.py` file in the controllers folder.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`blog_blueprint`数据函数、它的所有路由以及`sidebar_data`数据函数需要移动到控制器文件夹中的`blog.py`文件中。'
- en: 'The `blog.py` file should now look like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`blog.py`文件现在应该是这样的：'
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, whenever a new blueprint is made, a new file in the controllers folder
    can be made for it, breaking down the application code into logical groups. Also,
    we need an empty `__init__.py` file in the controllers folder in order to mark
    it as a module.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当创建一个新的蓝图时，可以在控制器文件夹中为其创建一个新的文件，将应用程序代码分解为逻辑组。此外，我们需要在控制器文件夹中创建一个空的`__init__.py`文件，以便将其标记为模块。
- en: 'Finally, we focus on our `__init__.py` file. All that should remain in the
    `__init__.py` file is the `app` object creation, the `index` route, and the `blog_blueprint`
    registration on the `app` object. However, there is one thing to add—the database
    initialization. With the `db.init_app()` function, we will add the `app` object
    to the `db` object after it''s imported:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们专注于我们的`__init__.py`文件。`__init__.py`文件中应该保留的内容只有`app`对象的创建、`index`路由和`blog_blueprint`在`app`对象上的注册。然而，还有一件事要添加——数据库初始化。通过`db.init_app()`函数，我们将在导入`app`对象后将`app`对象添加到`db`对象中：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There are two final things to fix before our new structure works if you are
    using SQLite—the SQLAlchemy database URL in `config.py` needs to be updated and
    the imports in `manage.py` need to be updated. Because the SQLAlchemy URL for
    a SQLite database is a relative file path, it has to be changed to:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的新结构生效之前，有两件最后需要修复的事情，如果你使用的是SQLite——`config.py`中的SQLAlchemy数据库URL需要更新，以及`manage.py`中的导入需要更新。因为SQLite数据库的SQLAlchemy
    URL是一个相对文件路径，所以它必须更改为：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To fix the `manage.py` imports, replace the imports from `main.py` with:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要修复`manage.py`的导入，用以下内容替换`main.py`中的导入：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now if you run `manage.py` file, your app will run with the new structure.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你运行`manage.py`文件，你的应用将以新的结构运行。
- en: Application factories
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用工厂
- en: Now that we are using blueprints in a modular manner, however, there is another
    improvement we can make to our abstraction, which creates a **factory** for our
    application. The concept of a factory comes from the **object-oriented programming**
    (**OOP**) world, and it simply means a function or an object that creates another
    object. Our application factory will take one of our `config` objects, which we
    created at the beginning of the book and returned a Flask application object.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们以模块化的方式使用蓝图，然而，我们可以对我们的抽象进行另一个改进，即为我们的应用创建一个**工厂**。工厂的概念来自**面向对象编程**（**OOP**）世界，它简单地意味着一个函数或对象创建另一个对象。我们的应用工厂将接受我们在书的开头创建的`config`对象之一，并返回一个Flask应用对象。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The object factory design was popularized by the now famous book, *Design Patterns:
    Elements of Reusable Object-Oriented Software*, by the Gang of Four. To learn
    more about these design patterns and how they can help simplify a project''s code,
    look at [https://en.wikipedia.org/wiki/Structural_pattern](https://en.wikipedia.org/wiki/Structural_pattern).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对象工厂设计是由现在著名的《设计模式：可复用面向对象软件的元素》一书所推广的。要了解更多关于这些设计模式以及它们如何帮助简化项目代码的信息，请查看[https://en.wikipedia.org/wiki/Structural_pattern](https://en.wikipedia.org/wiki/Structural_pattern)。
- en: Creating a factory function for our application object has several benefits.
    First, it allows the context of the environment to change the configuration of
    the application. When your server creates the application object to serve, it
    can take into account any changes in the server necessary and change the configuration
    object given to the app accordingly. Second, it makes testing much easier because
    it allows differently configured applications to be tested quickly. Third, multiple
    instances of the same application using the same configuration can be created
    very easily. This is useful for situations where web traffic is balanced across
    several different servers.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为我们的应用对象创建一个工厂函数有几个好处。首先，它允许环境的上下文改变应用的配置。当服务器创建应用对象进行服务时，它可以考虑服务器中任何必要的更改，并相应地改变提供给应用的配置对象。其次，它使测试变得更加容易，因为它允许快速测试不同配置的应用。第三，可以非常容易地创建使用相同配置的同一应用的多个实例。这对于需要在多个不同的服务器之间平衡网站流量的情况非常有用。
- en: 'Now that the benefits of application factories are clear, let''s modify our
    `__init__.py` file to implement it:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用工厂的好处已经清楚，让我们修改我们的`__init__.py`文件来实现它：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The change to the file is very simple; we contained our code in a function
    that takes a `config` object and returns an application object. We will need to
    modify our `manage.py` file in order to work with the `create_app` function as
    follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对文件的更改非常简单；我们将代码包含在一个函数中，该函数接受一个`config`对象并返回一个应用对象。我们需要修改我们的`manage.py`文件，以便与`create_app`函数一起工作，如下所示：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When we created our configuration objects it was mentioned that the environment
    that the application is running in could change the configuration of the application.
    This code has a very simple example of that functionality where an environment
    variable is loaded and determines which `config` object to give to the `create_app`
    function. Environment variables are **global variables** in Bash that can be accessed
    by many different programs. They can be set in Bash with the following syntax:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建配置对象时，提到了应用运行的环境可能会改变应用的配置。这段代码有一个非常简单的例子，展示了环境变量的功能，其中加载了一个环境变量，并确定要给`create_app`函数的`config`对象。环境变量是Bash中的**全局变量**，可以被许多不同的程序访问。它们可以用以下语法在Bash中设置：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To read a variable:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 读取变量时：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can also delete the variable easily as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以按以下方式轻松删除变量：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: On your production server, you would set `WEBAPP_ENV` to `prod`. The true power
    of this setup will become clearer once you deploy to production in [Chapter 13](ch13.html
    "Chapter 13. Deploying Flask Apps"), *Deploying Flask Apps*, and when we get to
    [Chapter 12](ch12.html "Chapter 12. Testing Flask Apps"), *Testing Flask Apps*,
    which covers testing our project.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产服务器上，您将把`WEBAPP_ENV`设置为`prod`。一旦在[第13章](ch13.html "第13章。部署Flask应用") *部署Flask应用*中部署到生产环境，并且当我们到达[第12章](ch12.html
    "第12章。测试Flask应用") *测试Flask应用*时，即可清楚地看到这种设置的真正威力，该章节涵盖了对项目进行测试。
- en: Summary
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have transformed our application into a much more manageable and scalable
    structure, which will save us a lot of headaches as we move further through the
    book and add more advanced features. In the next chapter, we will add a login
    and registration system to our application, and other features to make our site
    more secure.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将我们的应用转变为一个更加可管理和可扩展的结构，这将在我们继续阅读本书并添加更多高级功能时为我们节省许多麻烦。在下一章中，我们将为我们的应用添加登录和注册系统，以及其他功能，使我们的网站更加安全。
