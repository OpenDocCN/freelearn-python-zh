- en: What is Python?
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python是什么？
- en: It’s a programming language!
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是一种编程语言！
- en: So what is Python? Simply put, Python is a programming language. It was initially
    developed by Guido van Rossum in the late 1980’s in the Netherlands. Guido continues
    to be actively involved in guiding the development and evolution of the language,
    so much so that he’s been given the title “Benevolent Dictator for Life”, or,
    more commonly, *BDFL*. Python is developed as an open-source project and is free
    to download and use as you wish. The non-profit [Python Software Foundation](https://www.python.org/psf/)
    manages Python’s intellectual property, plays a strong role in promoting the language,
    and in some cases funds its development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 那么Python是什么？简单地说，Python是一种编程语言。它最初是由Guido van Rossum在20世纪80年代末在荷兰开发的。Guido继续积极参与指导语言的发展和演变，以至于他被赋予了“终身仁慈独裁者”的称号，或者更常见的*BDFL*。Python是作为一个开源项目开发的，可以自由下载和使用。非营利性的[Python软件基金会](https://www.python.org/psf/)管理Python的知识产权，在推广语言方面发挥着重要作用，并在某些情况下资助其发展。
- en: On a technical level, Python is a strongly typed language. This means that every
    object in the language has a definite type, and there’s generally no way to circumvent
    that type. At the same time, Python is dynamically typed, meaning that there’s
    no type-checking of your code prior to running it. This is in contrast to statically
    typed languages like C++ or Java where a compiler does a lot of type-checking
    for you, rejecting programs which misuse objects. Ultimately, the best description
    of the Python type system is that it uses *duck-typing* where an object’s suitability
    for a context is only determined at runtime. We’ll cover this in more detail in
    Chapter 8.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术层面上，Python是一种强类型语言。这意味着语言中的每个对象都有一个确定的类型，通常没有办法规避该类型。与此同时，Python是动态类型的，这意味着在运行代码之前没有对代码进行类型检查。这与C++或Java等静态类型语言形成对比，编译器会为您进行大量的类型检查，拒绝错误使用对象的程序。最终，对Python类型系统的最佳描述是它使用*鸭子类型*，其中对象在运行时才确定其适用于上下文。我们将在第8章中更详细地介绍这一点。
- en: Python is a general-purpose programming language. It’s not intended for use
    in any particular domain or environment, but instead can be fruitfully used for
    a wide variety of tasks. There are, of course, some areas where it’s less suitable
    than others – for example in extremely time-sensitive or memory-constrained environments
    – but for the most part Python is as flexible and adaptable as many modern programming
    language, and more so than most.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种通用编程语言。它并不是用于任何特定领域或环境，而是可以丰富地用于各种任务。当然，也有一些领域不太适合它 - 例如在极端时间敏感或内存受限的环境中
    - 但大多数情况下，Python像许多现代编程语言一样灵活和适应性强，比大多数编程语言更灵活。
- en: Python is an interpreted language. This is a bit of a misstatement, technically,
    because Python *is* normally compiled into a form of byte-code before it’s executed.
    However, this compilation happens invisibly, and the experience of using Python
    is normally one of immediately executing code without a noticeable compilation
    phase. This lack of an interruption between editing and running is one of the
    great joys of working with Python.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种解释型语言。从技术上讲，这有点错误，因为Python在执行之前通常会被编译成一种字节码形式。然而，这种编译是隐形的，使用Python的体验通常是立即执行代码，没有明显的编译阶段。编辑和运行之间的中断缺失是使用Python的一大乐趣之一。
- en: The syntax of Python is designed to be clear, readable, and expressive. Unlike
    many popular languages, Python uses white-space to delimit code blocks, and in
    the process does away with reams of unnecessary parentheses while enforcing a
    universal layout. This means that all Python code looks alike in important ways,
    and you can learn to read Python very quickly. At the same time, Python’s expressive
    syntax means that you can get a lot of meaning into a single line of code. This
    expressive, highly-readable code means that Python maintenance is relatively easy.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python的语法旨在清晰、可读和富有表现力。与许多流行的语言不同，Python使用空格来界定代码块，并在这个过程中摒弃了大量不必要的括号，同时强制执行统一的布局。这意味着所有Python代码在重要方面看起来都是相似的，你可以很快学会阅读Python。与此同时，Python富有表现力的语法意味着你可以在一行代码中表达很多含义。这种富有表现力、高度可读的代码意味着Python的维护相对容易。
- en: There are multiple implementations of the Python language. The original – and
    still by far the most common – implementation is written in C. This version is
    commonly referred to as *CPython*. When someone talks about “running Python”,
    it’s normally safe to assume that they are talking about CPython, and this is
    the implementation that we’ll be using for this book.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Python语言有多种实现。最初 - 也是迄今为止最常见的 - 实现是用C编写的。这个版本通常被称为*CPython*。当有人谈论“运行Python”时，通常可以安全地假设他们在谈论CPython，这也是我们在本书中将使用的实现。
- en: 'Other implementations of Python include:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python的其他实现包括：
- en: '[Jython](http://www.jython.org/), written to target the Java Virtual Machine'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Jython](http://www.jython.org/)，编写以针对Java虚拟机'
- en: '[IronPython](http://ironpython.net/), written to target the .NET platform'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[IronPython](http://ironpython.net/)，编写以针对.NET平台'
- en: '[PyPy](http://pypy.org/), written (somewhat circularly) in a language called
    RPython which is designed for developing dynamic languages like Python'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyPy](http://pypy.org/)，用一种称为RPython的语言编写（有点循环），该语言旨在开发像Python这样的动态语言'
- en: These implementations generally trail behind CPython, which is considered to
    be the “standard” for the language. Much of what you will learn in this book will
    apply to all of these implementations.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实现通常落后于CPython，后者被认为是该语言的“标准”。本书中学到的大部分内容都适用于所有这些实现。
- en: Versions of the Python language
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Python语言的版本
- en: 'There are two important versions of the Python language in common use right
    now: Python 2 and Python 3\. These two versions represent changes in some key
    elements of the language, and code written for one will not generally work for
    the other unless you take special precautions. Python 2 is older and more well-established
    than Python 3^([1](chap21.xhtml#fn-established)), but Python 3 addresses some
    known shortcomings in the older version. Python 3 is the definite future of Python,
    and you should use it if at all possible.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python语言目前有两个重要的常用版本：Python 2和Python 3。这两个版本代表了语言中一些关键元素的变化，除非你采取特殊预防措施，否则为其中一个版本编写的代码通常不会适用于另一个版本。Python
    2比Python 3更老，更为成熟，但Python 3解决了较老版本中的一些已知缺陷。Python 3是Python的明确未来，如果可能的话，你应该使用它。
- en: While there are some critical differences between Python 2 and 3, most of the
    fundamentals of the two version are the same. If you learn one, most of what you
    know transfers cleanly to the other. In this book we’ll be teaching Python 3,
    but we’ll point out important differences between the versions when necessary.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Python 2和3之间存在一些关键差异，但这两个版本的大部分基础知识是相同的。如果你学会了其中一个，大部分知识都可以顺利转移到另一个版本。在本书中，我们将教授Python
    3，但在必要时我们会指出版本之间的重要差异。
- en: It’s a standard library!
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这是一个标准库！
- en: Beyond being a programming language, Python comes with a powerful and broad
    standard library. Part of the Python philosophy is “batteries included”, meaning
    that you can use Python for many complex, real-world tasks out-of-the box, with
    no need to install third-party packages. This is not only extremely convenient,
    but it means that it’s easier to get started learning Python by using interesting,
    engaging examples – something we aim for in this book!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了作为一种编程语言外，Python还附带一个强大而广泛的标准库。Python哲学的一部分是“电池包含”，这意味着你可以直接使用Python来处理许多复杂的现实任务，无需安装第三方软件包。这不仅非常方便，而且意味着通过使用有趣、引人入胜的示例来学习Python更容易
    - 这也是我们在本书中的目标！
- en: Another great effect of the “batteries included” approach is that it means that
    many scripts – even non-trivial ones – can be run immediately on any Python installation.
    This removes a common, annoying barrier to installing software that you can face
    with other languages.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “电池包含”方法的另一个重要影响是，这意味着许多脚本 - 即使是非平凡的脚本 - 可以立即在任何Python安装上运行。这消除了在安装软件时可能面临的其他语言的常见烦人障碍。
- en: The standard library has a generally high level of good documentation. The APIs
    are well documented, and the modules often have good narrative descriptions with
    quick start guides, best practice information, and so forth. [The standard library
    documentation is always available online](https://docs.python.org/3/library/index.html),
    and you can also install it locally if you want to.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库有相当高水平的良好文档。API有很好的文档，模块通常有良好的叙述描述，包括快速入门指南、最佳实践信息等。[标准库文档始终可在线获取](https://docs.python.org/3/library/index.html)，如果需要，你也可以在本地安装它。
- en: Since the standard library is such an important part of Python, we’ll be covering
    parts of it throughout this book. Even so, we won’t be covering more than a small
    fraction of it, so you’re encouraged to explore it on your own.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于标准库是Python的重要组成部分，我们将在本书中涵盖其中的部分内容。即便如此，我们也不会涵盖其中的一小部分，因此鼓励你自行探索。
- en: It’s a philosophy
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这是一种哲学
- en: Finally, no description of Python would be complete with mentioning that, to
    many people, Python represents a philosophy for writing code. Principles of clarity
    and readability are part of what it means to write correct or *pythonic* code.
    It’s not always clear what *pythonic* means in all circumstances, and sometimes
    there may be no single correct way to write something. But the fact that the Python
    community is concerned about issues like simplicity, readability, and explicitness
    means that Python code tends to be more…well…beautiful!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，没有描述Python的内容是完整的，没有提到对许多人来说，Python代表了编写代码的一种哲学。清晰和可读性的原则是编写正确或*pythonic*代码的一部分。在所有情况下，*pythonic*的含义并不总是清晰，有时可能没有单一的正确写法。但Python社区关注简单、可读性和明确性的事项意味着Python代码往往更…嗯…美丽！
- en: Many of Python’s principles are embodied in the so-called [“Zen of Python”](https://www.python.org/dev/peps/pep-0020/).
    The “zen” isn’t a hard-and-fast set of rules, but rather a set of guidelines or
    touchstones to keep in mind when coding. When you find yourself trying to decide
    between several courses of action, these principles can often give you a nudge
    in the right direction. We’ll be highlighting elements from the “Zen of Python”
    throughout this book.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Python的许多原则体现在所谓的“Python之禅”中。这个“禅”不是一套严格的规则，而是一套在编码时牢记的指导原则或准则。当你试图在几种行动方案之间做出决定时，这些原则通常可以给你一个正确的方向。我们将在本书中突出显示“Python之禅”的元素。
