- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Building an E-Learning Platform
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建在线学习平台
- en: In the previous chapter, you learned the basics of the internationalization
    and localization of Django projects, adapting your project to meet the local formats
    and languages for your users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了Django项目的国际化本地化基础，使您的项目适应用户的本地格式和语言。
- en: In this chapter, you will start a new Django project that will consist of an
    e-learning platform with your own **content management system** (**CMS**). Online
    learning platforms are a great example of applications that require tools for
    advanced content handling. You will learn how to create flexible data models that
    accommodate diverse data types and discover how to implement custom model functionalities
    that you can apply to your future Django projects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将启动一个新的Django项目，该项目将包含一个带有您自己的**内容管理系统**（**CMS**）的在线学习平台。在线学习平台是需要高级内容处理工具的应用程序的绝佳例子。您将学习如何创建灵活的数据模型，以适应多种数据类型，并了解如何实现可应用于您未来Django项目的自定义模型功能。
- en: 'In this chapter, you will learn how to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何：
- en: Create models for the CMS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为CMS创建模型
- en: Create fixtures for your models and apply them
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的模型创建数据并应用它们
- en: Use model inheritance to create data models for polymorphic content
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模型继承创建多态内容的数据模型
- en: Create custom model fields
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义模型字段
- en: Order course contents and modules
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排序课程内容和模块
- en: Build authentication views for the CMS
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为CMS构建认证视图
- en: Functional overview
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能概述
- en: In previous chapters, diagrams at the start represented views, templates, and
    end-to-end functionalities. This chapter, however, shifts the focus to implementing
    model inheritance and creating custom model fields, topics not easily captured
    in our usual diagrams. Instead, you will see specific diagrams to illustrate these
    concepts throughout the chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，开头的图表代表了视图、模板和端到端功能。然而，在本章中，焦点转向了实现模型继承和创建自定义模型字段，这些内容不易在我们的常规图表中捕捉到。相反，您将在本章中看到具体的图表来阐述这些概念。
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter12](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter12).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在[https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter12](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter12)找到。
- en: All the Python modules used in this chapter are included in the `requirements.txt`
    file in the source code that comes with this chapter. You can follow the instructions
    to install each Python module below, or you can install all the requirements at
    once with the command `python` `-m` `pip` `install` `-r requirements.txt`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有Python模块都包含在本章源代码中的`requirements.txt`文件中。您可以按照以下说明安装每个Python模块，或者可以使用以下命令一次性安装所有需求：`python
    -m pip install -r requirements.txt`。
- en: Setting up the e-learning project
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置在线学习项目
- en: 'Your final practical project will be an e-learning platform. First, create
    a virtual environment for your new project within the `env/` directory with the
    following command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您的最终实践项目将是一个在线学习平台。首先，在`env/`目录下使用以下命令为您的新项目创建一个虚拟环境：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you are using Linux or macOS, run the following command to activate your
    virtual environment:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Linux或macOS，请运行以下命令以激活您的虚拟环境：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you are using Windows, use the following command instead:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Windows，请使用以下命令代替：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Install Django in your virtual environment with the following command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在您的虚拟环境中安装Django：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You are going to manage image uploads in your project, so you also need to
    install `Pillow` with the following command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在项目中管理图像上传，因此您还需要使用以下命令安装`Pillow`：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a new project using the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个新的项目：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Enter the new `educa` directory and create a new application using the following
    commands:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 进入新的`educa`目录，并使用以下命令创建一个新的应用程序：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Edit the `settings.py` file of the `educa` project and add `courses` to the
    `INSTALLED_APPS` setting, as follows. The new line is highlighted in bold:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`educa`项目的`settings.py`文件，并将`courses`添加到`INSTALLED_APPS`设置中，如下所示。新行以粗体突出显示：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `courses` application is now active for the project. Next, we are going
    to prepare our project to serve media files and we will define the models for
    the courses and course contents.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`courses`应用程序现在对项目是激活的。接下来，我们将准备我们的项目以提供媒体文件，并为课程和课程内容定义模型。'
- en: Serving media files
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端媒体文件
- en: Before creating the models for courses and course contents, we will prepare
    the project to serve media files. Course instructors will be able to upload media
    files to course content using the CMS that we will build. Therefore, we will configure
    the project to serve media files.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建课程和课程内容的模型之前，我们将准备项目以服务媒体文件。课程讲师将能够使用我们将构建的 CMS 将媒体文件上传到课程内容。因此，我们将配置项目以服务媒体文件。
- en: 'Edit the `settings.py` file of the project and add the following lines:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑项目的 `settings.py` 文件并添加以下行：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will enable Django to manage file uploads and serve media files. `MEDIA_URL`
    is the base URL used to serve the media files uploaded by users. `MEDIA_ROOT`
    is the local path where they reside. Paths and URLs for files are built dynamically
    by prepending the project path or the media URL to them for portability.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使 Django 能够管理文件上传并服务媒体文件。`MEDIA_URL` 是用于服务用户上传的媒体文件的基 URL。`MEDIA_ROOT` 是它们所在的本地路径。文件路径和
    URL 是通过在它们前面添加项目路径或媒体 URL 来动态构建的，以实现可移植性。
- en: 'Now, edit the main `urls.py` file of the `educa` project and modify the code,
    as follows. New lines are highlighted in bold:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，编辑 `educa` 项目的 `urls.py` 主文件并修改代码，如下。新行以粗体显示：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We have added the `static()` helper function to serve media files with the Django
    development server during development (that is, when the `DEBUG` setting is set
    to `True`).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将 `static()` 辅助函数添加到开发期间使用 Django 开发服务器服务媒体文件（即，当 `DEBUG` 设置为 `True` 时）。
- en: Remember that the `static()` helper function is suitable for development but
    not for production use. Django is inefficient at serving static files. Never serve
    your static files with the Django development server in a production environment.
    You will learn how to serve static files in a production environment in *Chapter
    17*, *Going Live*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`static()` 辅助函数适用于开发，但不适用于生产使用。Django 在服务静态文件方面效率低下。永远不要在生产环境中使用 Django 开发服务器来服务静态文件。你将在第
    17 章“上线”中学习如何在生产环境中服务静态文件。
- en: The project is now ready to serve media files. Let’s create the models for the
    courses and course contents.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 项目现在已准备好服务媒体文件。让我们为课程和课程内容创建模型。
- en: Building the course models
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建课程模型
- en: 'Your e-learning platform will offer courses on various subjects. Each course
    will be divided into a configurable number of modules, and each module will contain
    a configurable number of contents. The contents will be of various types: text,
    files, images, or videos. The following example shows what the data structure
    of your course catalog will look like:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你的在线学习平台将提供各种主题的课程。每个课程将被划分为可配置数量的模块，每个模块将包含可配置数量的内容。内容将包括各种类型：文本、文件、图片或视频。以下示例显示了你的课程目录的数据结构：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s build the course models. Edit the `models.py` file of the `courses` application
    and add the following code to it:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建课程模型。编辑 `courses` 应用的 `models.py` 文件并向其中添加以下代码：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'These are the initial `Subject`, `Course`, and `Module` models. The `Course`
    model fields are as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是初始的 `Subject`、`Course` 和 `Module` 模型。`Course` 模型的字段如下：
- en: '`owner`: The instructor who created this course.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`owner`：创建此课程的讲师。'
- en: '`subject`: The subject that this course belongs to. It is a `ForeignKey` field
    that points to the `Subject` model.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subject`：此课程所属的主题。它是一个指向 `Subject` 模型的 `ForeignKey` 字段。'
- en: '`title`: The title of the course.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`：课程的标题。'
- en: '`slug`: The slug of the course. This will be used in URLs later.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slug`：课程的缩略名。这将在稍后的 URL 中使用。'
- en: '`overview`: A `TextField` column to store an overview of the course.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`overview`：一个用于存储课程概述的 `TextField` 列。'
- en: '`created`: The date and time when the course was created. It will be automatically
    set by Django when creating new objects because of `auto_now_add=True`.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created`：课程创建的日期和时间。由于 `auto_now_add=True`，Django 将在创建新对象时自动设置它。'
- en: Each course is divided into several modules. Therefore, the `Module` model contains
    a `ForeignKey` field that points to the `Course` model.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每个课程被划分为几个模块。因此，`Module` 模型包含一个指向 `Course` 模型的 `ForeignKey` 字段。
- en: 'Open the shell and run the following command to create the initial migration
    for this application:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 shell 并运行以下命令以创建此应用的初始迁移：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You will see the following output:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, run the following command to apply all migrations to the database:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行以下命令将所有迁移应用到数据库中：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You should see output that includes all applied migrations, including those
    of Django. The output will contain the following line:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到包括 Django 在内的所有应用的迁移输出，输出将包含以下行：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The models of your `courses` application have been synced with the database.
    Next, we are going to add the course models to the administration site.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 `courses` 应用程序的模型已与数据库同步。接下来，我们将把课程模型添加到管理站点。
- en: Registering the models in the administration site
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在管理站点注册模型
- en: 'Let’s register the course models on the administration site so that we can
    manage the data easily. Edit the `admin.py` file inside the `courses` application
    directory and add the following code to it:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在管理站点注册课程模型，这样我们就可以轻松地管理数据。编辑 `courses` 应用程序目录内的 `admin.py` 文件，并向其中添加以下代码：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The models for the `courses` application are now registered on the administration
    site. Remember that you use the `@admin.register()` decorator to register models
    on the administration site.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`courses` 应用程序的模型现在已在管理站点注册。记住，你使用 `@admin.register()` 装饰器在管理站点注册模型。'
- en: In the next section, you will learn how to create initial data to populate your
    models.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习如何创建初始数据来填充你的模型。
- en: Using fixtures to provide initial data for models
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用固定值提供模型初始数据
- en: Sometimes, you might want to prepopulate your database with hardcoded data.
    This is useful for automatically including initial data in the project setup,
    instead of having to add it manually. Django comes with a simple way to load and
    dump data from the database into files that are called **fixtures**. Django supports
    fixtures in JSON, XML, or YAML formats. The structure of a fixture closely resembles
    the API representation of a model, making it straightforward to translate data
    between internal database formats and external applications. You are going to
    create a fixture to include several initial `Subject` objects for your project.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能希望预先用硬编码的数据填充你的数据库。这对于在项目设置中自动包含初始数据非常有用，而不是手动添加。Django 提供了一种简单的方法来从数据库中加载数据和转储数据到称为
    **固定值** 的文件。Django 支持固定值在 JSON、XML 或 YAML 格式。固定值的结构紧密类似于模型的 API 表示，这使得在内部数据库格式和外部应用程序之间转换数据变得简单。你将创建一个固定值来包含几个初始的
    `Subject` 对象。
- en: 'First, create a superuser using the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用以下命令创建一个超级用户：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, run the development server using the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令运行开发服务器：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Open `http://127.0.0.1:8000/admin/courses/subject/` in your browser. Create
    several subjects using the administration site. The change list page should look
    as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开 `http://127.0.0.1:8000/admin/courses/subject/`。使用管理站点创建几个主题。更改列表页面应如下所示：
- en: '![](img/B21088_12_01.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_12_01.png)'
- en: 'Figure 12.1: The subject change list view on the administration site'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1：管理站点上的主题更改列表视图
- en: 'Run the following command from the shell:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从 shell 中运行以下命令：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You will see an output similar to the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到类似以下输出：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `dumpdata` command dumps data from the database into the standard output,
    serialized in JSON format by default. The resulting data structure includes information
    about the model and its fields for Django to be able to load it into the database.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`dumpdata` 命令将数据从数据库转储到标准输出，默认情况下以 JSON 格式序列化。结果数据结构包括有关模型及其字段的信息，以便 Django
    能够将其加载到数据库中。'
- en: You can limit the output to the models of an application by providing the application
    names to the command or specifying single models for outputting data using the
    `app.Model` format.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过提供应用程序名称给命令或指定使用 `app.Model` 格式输出数据的单个模型来限制输出到应用程序的模型。
- en: You can also specify the format using the `--format` flag. By default, `dumpdata`
    outputs the serialized data to the standard output. However, you can indicate
    an output file using the `--output` flag, which allows you to store the output.
    The `--indent` flag allows you to specify indentations. For more information on
    `dumpdata` parameters, run `python manage.py dumpdata --help`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 `--format` 标志指定格式。默认情况下，`dumpdata` 将序列化数据输出到标准输出。但是，你可以使用 `--output`
    标志指示输出文件，这允许你存储输出。`--indent` 标志允许你指定缩进。有关 `dumpdata` 参数的更多信息，请运行 `python manage.py
    dumpdata --help`。
- en: 'Save this dump to a fixtures file in a new `fixtures/` directory in the `courses`
    application using the following commands:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令将此转储保存到 `courses` 应用程序中的新 `fixtures/` 目录的固定值文件中：
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Run the development server and use the administration site to remove the subjects
    you created, as shown in *Figure 12.2*:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 运行开发服务器并使用管理站点删除你创建的主题，如图 *12.2* 所示：
- en: '![](img/B21088_12_02.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_12_02.png)'
- en: 'Figure 12.2: Deleting all existing subjects'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2：删除所有现有主题
- en: 'After deleting all subjects, load the fixture into the database using the following
    command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 删除所有主题后，使用以下命令将固定数据加载到数据库中：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'All `Subject` objects included in the fixture are loaded into the database
    again:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 固定数据中包含的所有`Subject`对象再次被加载到数据库中：
- en: '![](img/B21088_12_03.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_12_03.png)'
- en: 'Figure 12.3: Subjects from the fixture are now loaded into the database'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3：固定数据中的主题现在已加载到数据库中
- en: By default, Django looks for files in the `fixtures/` directory of each application,
    but you can specify the complete path to the fixture file for the `loaddata` command.
    You can also use the `FIXTURE_DIRS` setting to tell Django about additional directories
    to look in for fixtures.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Django在每个应用程序的`fixtures/`目录中查找文件，但你可以为`loaddata`命令指定固定文件的完整路径。你还可以使用`FIXTURE_DIRS`设置告诉Django查找固定数据的附加目录。
- en: Fixtures are not only useful for setting up initial data but also for providing
    sample data for your application or data required for your tests. You can also
    use fixtures to populate necessary data for production environments.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 固定数据不仅对设置初始数据有用，还可以为你的应用程序提供样本数据或测试所需的数据。你还可以使用固定数据为生产环境填充必要的数据。
- en: You can read about how to use fixtures for testing at [https://docs.djangoproject.com/en/5.0/topics/testing/tools/#fixture-loading](https://docs.djangoproject.com/en/5.0/topics/testing/tools/#fixture-loading).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://docs.djangoproject.com/en/5.0/topics/testing/tools/#fixture-loading](https://docs.djangoproject.com/en/5.0/topics/testing/tools/#fixture-loading)了解如何使用固定数据（fixtures）进行测试。
- en: If you want to load fixtures in model migrations, look at Django’s documentation
    about data migrations. You can find the documentation for migrating data at [https://docs.djangoproject.com/en/5.0/topics/migrations/#data-migrations](https://docs.djangoproject.com/en/5.0/topics/migrations/#data-migrations).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在模型迁移中加载固定数据，请查看Django关于数据迁移的文档。你可以在[https://docs.djangoproject.com/en/5.0/topics/migrations/#data-migrations](https://docs.djangoproject.com/en/5.0/topics/migrations/#data-migrations)找到迁移数据的文档。
- en: You have created the models to manage course subjects, courses, and course modules.
    Next, you will create models to manage different types of module content.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经创建了用于管理课程主题、课程和课程模块的模型。接下来，你将创建用于管理不同类型模块内容的模型。
- en: Creating models for polymorphic content
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建多态内容模型
- en: You plan to add different types of content to the course modules, such as text,
    images, files, and videos. **Polymorphism** is the provision of a single interface
    to entities of different types. You need a versatile data model that allows you
    to store diverse content that is accessible through a single interface. In *Chapter
    7*, *Tracking User Actions*, you learned about the convenience of using generic
    relations to create foreign keys that can point to the objects of any model. You
    are going to create a `Content` model that represents the modules’ contents and
    define a generic relation to associate any object with the content object.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你计划向课程模块添加不同类型的内容，如文本、图片、文件和视频。**多态性**是提供单一接口以访问不同类型的实体。你需要一个灵活的数据模型，允许你通过单一接口存储各种内容。在*第7章*，*跟踪用户行为*中，你了解到使用通用关系创建可以指向任何模型对象的键外键（foreign
    keys）的便利性。你将创建一个`Content`模型来表示模块的内容，并定义一个通用关系以将任何对象与内容对象关联起来。
- en: 'Edit the `models.py` file of the `courses` application and add the following
    imports:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses`应用程序的`models.py`文件并添加以下导入：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, add the following code to the end of the file:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将以下代码添加到文件末尾：
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This is the `Content` model. A module contains multiple contents, so you define
    a `ForeignKey` field that points to the `Module` model. You can also set up a
    generic relation to associate objects from different models that represent different
    types of content. Remember that you need three different fields to set up a generic
    relation. In your `Content` model, these are:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`内容`模型。一个模块包含多个内容，因此你需要定义一个指向`Module`模型的`ForeignKey`字段。你也可以设置一个通用关系来关联不同模型中的对象，这些模型代表不同类型的内容。记住，你需要三个不同的字段来设置一个通用关系。在你的`Content`模型中，这些字段是：
- en: '`content_type`: A `ForeignKey` field to the `ContentType` model'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content_type`：一个指向`ContentType`模型的`ForeignKey`字段'
- en: '`object_id`: A `PositiveIntegerField` to store the primary key of the related
    object'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object_id`：一个用于存储相关对象主键的`PositiveIntegerField`'
- en: '`item`: A `GenericForeignKey` field to the related object combining the two
    previous fields'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`item`：一个结合前两个字段的`GenericForeignKey`字段，指向相关对象'
- en: Only the `content_type` and `object_id` fields have a corresponding column in
    the database table of this model. The `item` field allows you to retrieve or set
    the related object directly, and its functionality is built on top of the other
    two fields.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 只有`content_type`和`object_id`字段在这个模型的数据库表中对应有列。`item`字段允许你直接检索或设置相关对象，其功能建立在其他两个字段之上。
- en: You are going to use a distinct model for each type of content; text, image,
    video, and document. Your `Content` models will share some common fields but they
    will vary in the specific data that they store. For example, for text content,
    you will store the actual text, but for video content, you will store the video
    URL. To accomplish this, you will need to employ model inheritance. We will dive
    into the options that Django offers for model inheritance before building our
    `Content` models.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你将为每种内容类型使用一个不同的模型；文本、图片、视频和文档。你的`Content`模型将共享一些公共字段，但它们在存储的具体数据上会有所不同。例如，对于文本内容，你将存储实际的文本，但对于视频内容，你将存储视频URL。为了实现这一点，你需要使用模型继承。在我们构建`Content`模型之前，我们将深入了解Django为模型继承提供的选项。
- en: Using model inheritance
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模型继承
- en: Django supports model inheritance. It works in a similar way to standard class
    inheritance in Python. If you are not familiar with class inheritance, it involves
    defining a new class that inherits methods and properties from an existing class.
    This facilitates code reusability and can simplify the creation of related classes.
    You can read more about class inheritance at [https://docs.python.org/3/tutorial/classes.html#inheritance](https://docs.python.org/3/tutorial/classes.html#inheritance).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Django支持模型继承。它的工作方式与Python中的标准类继承类似。如果你不熟悉类继承，它涉及到定义一个新的类，该类从现有的类继承方法和属性。这有助于代码重用，并可以简化相关类的创建。你可以在[https://docs.python.org/3/tutorial/classes.html#inheritance](https://docs.python.org/3/tutorial/classes.html#inheritance)了解更多关于类继承的信息。
- en: 'Django offers the following three options to use model inheritance:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了以下三种选项来使用模型继承：
- en: '**Abstract models**: Useful when you want to put some common information into
    several models'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抽象模型**：当你想在几个模型中放入一些公共信息时很有用'
- en: '**Multi-table model inheritance**: Applicable when each model in the hierarchy
    is considered a complete model by itself'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多表模型继承**：适用于每个模型在继承层次中都被视为一个完整的模型'
- en: '**Proxy models**: Useful when you need to change the behavior of a model, for
    example, by including additional methods, changing the default manager, or using
    different meta options'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理模型**：当你需要更改模型的行为时很有用，例如，通过包含额外的方法、更改默认管理器或使用不同的元选项'
- en: Let’s take a closer look at each of them.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一深入了解每个选项。
- en: Abstract models
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 抽象模型
- en: An abstract model is a base class in which you define the fields you want to
    include in all child models. Django doesn’t create any database tables for abstract
    models. A database table is created for each child model, including the fields
    inherited from the abstract class and the ones defined in the child model.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象模型是一个基类，在其中你定义你想要包含在所有子模型中的字段。Django不会为抽象模型创建任何数据库表。为每个子模型创建数据库表，包括从抽象类继承的字段和在子模型中定义的字段。
- en: To mark a model as abstract, you need to include `abstract=True` in its `Meta`
    class. Django will recognize that it is an abstract model and will not create
    a database table for it. To create child models, you just need to subclass the
    abstract model.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要将模型标记为抽象，你需要在它的`Meta`类中包含`abstract=True`。Django将识别它是一个抽象模型，并且不会为它创建数据库表。要创建子模型，你只需将抽象模型子类化即可。
- en: 'The following example shows an abstract `BaseContent` model and a child `Text`
    model:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了一个抽象的`BaseContent`模型和一个子`Text`模型：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this case, Django would create a table for the `Text` model only, including
    the `title`, `created`, and `body` fields.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，Django只为`Text`模型创建一个表，包括`title`、`created`和`body`字段。
- en: '*Figure 12.4* shows the models and associated database tables for the code
    example provided:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12.4*展示了提供的代码示例中的模型和相关数据库表：'
- en: '![](img/B21088_12_04.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_12_04.png)'
- en: 'Figure 12.4: Sample models and database tables for inheritance using abstract
    models'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4：使用抽象模型进行继承的示例模型和数据库表
- en: Next, we are going to learn about a different model inheritance approach, where
    multiple database tables are created.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习关于不同模型继承方法的知识，其中将创建多个数据库表。
- en: Multi-table model inheritance
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多表模型继承
- en: 'In multi-table inheritance, each model corresponds to a database table. Django
    creates a `OneToOneField` field for the relationship between the child model and
    its parent model. To use multi-table inheritance, you have to subclass an existing
    model. Django will create a database table for both the original model and the
    sub-model. The following example shows multi-table inheritance:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在多表继承中，每个模型对应一个数据库表。Django为子模型与其父模型之间的关系创建一个`OneToOneField`字段。要使用多表继承，你必须继承一个现有的模型。Django将为原始模型和子模型都创建数据库表。以下示例显示了多表继承：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Django will include an automatically generated `OneToOneField` field in the
    `Text` model that points to the `BaseContent` model. The name for this field is
    `basecontent_ptr`, where `ptr` stands for *pointer*. A database table is created
    for each model.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Django将在`Text`模型中包含一个自动生成的`OneToOneField`字段，该字段指向`BaseContent`模型。这个字段的名称是`basecontent_ptr`，其中`ptr`代表*指针*。为每个模型创建一个数据库表。
- en: '*Figure 12.5* shows the models and associated database tables for the multi-table
    model inheritance code example provided:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12.5*显示了提供的多表模型继承代码示例中的模型及其相关的数据库表：'
- en: '![](img/B21088_12_05.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_12_05.png)'
- en: 'Figure 12.5: Sample models and database tables for multi-table model inheritance'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5：多表模型继承的示例模型和数据库表
- en: Next, we are going to learn about another model inheritance approach, where
    multiple models serve as a proxy to a single database table.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习另一种模型继承方法，其中多个模型作为单个数据库表的代理。
- en: Proxy models
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代理模型
- en: 'A proxy model changes the behavior of a model. Both models operate on the database
    table of the original model. This allows you to customize behavior for different
    models without creating a new database table, creating different versions of the
    same model that are tailored for different purposes. To create a proxy model,
    add `proxy=True` to the `Meta` class of the model. The following example illustrates
    how to create a proxy model:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 代理模型改变了模型的行为。这两个模型都在原始模型的数据库表上操作。这允许你为不同的模型定制行为，而无需创建新的数据库表，创建针对不同目的定制的同一模型的多个版本。要创建代理模型，请在模型的`Meta`类中添加`proxy=True`。以下示例说明了如何创建代理模型：
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here, you define an `OrderedContent` model that is a proxy model for the `Content`
    model. This model provides a default ordering for QuerySets and an additional
    `created_delta()` method. Both models, `Content` and `OrderedContent`, operate
    on the same database table, and objects are accessible via the ORM through either
    model.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你定义一个`OrderedContent`模型，它是`Content`模型的代理模型。此模型为QuerySets提供默认排序，并额外提供`created_delta()`方法。这两个模型，`Content`和`OrderedContent`，在同一个数据库表上操作，对象可以通过ORM通过任一模型访问。
- en: '*Figure 12.6* shows the models and associated database tables for the proxy
    model inheritance code example provided:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12.6*显示了提供的代理模型继承代码示例中的模型及其相关的数据库表：'
- en: '![](img/B21088_12_06.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_12_06.png)'
- en: 'Figure 12.6: Sample models and database tables for inheritance using proxy
    models'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6：使用代理模型进行继承的示例模型和数据库表
- en: You have now become familiar with the three types of model inheritance. For
    additional information on model inheritance, you can visit [https://docs.djangoproject.com/en/5.0/topics/db/models/#model-inheritance](https://docs.djangoproject.com/en/5.0/topics/db/models/#model-inheritance).
    Now, we will apply model inheritance in practice by using a base abstract model
    to develop models for various content types.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经熟悉了三种模型继承类型。有关模型继承的更多信息，你可以访问[https://docs.djangoproject.com/en/5.0/topics/db/models/#model-inheritance](https://docs.djangoproject.com/en/5.0/topics/db/models/#model-inheritance)。现在，我们将通过使用基抽象模型来开发各种内容类型的模型来实际应用模型继承。
- en: Creating the Content models
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建内容模型
- en: 'Let’s use model inheritance to implement polymorphic models. You will create
    a versatile data model that enables storing diverse content accessible through
    a unified interface. The ideal approach for this use case is to create an abstract
    base model that is then extended by models – each designed to store a particular
    type of data: text, image, video, and file. This flexible approach will equip
    you with the tools needed for scenarios where polymorphism is required.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用模型继承来实现多态模型。你将创建一个通用的数据模型，它能够通过统一的接口存储各种内容。对于这种情况，理想的方案是创建一个抽象基模型，然后由模型扩展——每个模型都设计用来存储特定类型的数据：文本、图像、视频和文件。这种灵活的方法将为你提供在需要多态性的场景中所需的工具。
- en: The `Content` model of your `courses` application contains a generic relation
    to associate different types of content with it. You will create a different model
    for each type of content. All `Content` models will have some fields in common
    and additional fields to store custom data. You are going to create an abstract
    model that provides the common fields for all `Content` models.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你的`courses`应用程序的`Content`模型包含一个通用关系，用于将其与不同类型的内容关联起来。你将为每种类型的内容创建不同的模型。所有`Content`模型都将有一些共同的字段，以及用于存储自定义数据的附加字段。你将创建一个抽象模型，为所有`Content`模型提供常用字段。
- en: 'Edit the `models.py` file of the `courses` application and add the following
    code to it:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses`应用程序的`models.py`文件，并向其中添加以下代码：
- en: '[PRE28]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In this code, you define an abstract model named `ItemBase`. Therefore, you
    set `abstract=True` in its `Meta` class.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，你定义了一个名为`ItemBase`的抽象模型。因此，你在其`Meta`类中设置`abstract=True`。
- en: In this model, you define the `owner`, `title`, `created`, and `updated` fields.
    These common fields will be used for all types of content.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模型中，你定义了`owner`、`title`、`created`和`updated`字段。这些常用字段将用于所有类型的内容。
- en: The `owner` field allows you to store which user created the content. Since
    this field is defined in an abstract class, you need a different `related_name`
    for each sub-model. Django allows you to specify a placeholder for the model class
    name in the `related_name` attribute as `%(class)s`. By doing so, the `related_name`
    for each child model will be generated automatically. Since you are using `'%(class)s_related'`
    as the `related_name`, the reverse relationship for child models will be `text_related`,
    `file_related`, `image_related`, and `video_related`, respectively.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`owner`字段允许你存储创建内容的用户。由于此字段定义在抽象类中，因此你需要为每个子模型指定不同的`related_name`。Django允许你在`related_name`属性中指定模型类名的占位符为`%(class)s`。通过这样做，每个子模型的`related_name`将自动生成。由于你使用`''%(class)s_related''`作为`related_name`，子模型的反向关系分别为`text_related`、`file_related`、`image_related`和`video_related`。'
- en: 'You have defined four different `Content` models that inherit from the `ItemBase`
    abstract model. They are as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经定义了四个不同的继承自`ItemBase`抽象模型的`Content`模型。它们如下所示：
- en: '`Text`: To store text content'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Text`：用于存储文本内容'
- en: '`File`: To store files, such as PDFs'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`File`：用于存储文件，例如PDF文件'
- en: '`Image`: To store image files'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Image`：用于存储图像文件'
- en: '`Video`: To store videos; you use a `URLField` field to provide a video URL
    in order to embed it'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Video`：用于存储视频；你使用`URLField`字段提供视频URL以便嵌入'
- en: Each child model contains the fields defined in the `ItemBase` class in addition
    to its own fields. A database table will be created for the `Text`, `File`, `Image`,
    and `Video` models, respectively. There will be no database table associated with
    the `ItemBase` model since it is an abstract model.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 每个子模型都包含在`ItemBase`类中定义的字段，以及它自己的字段。将分别为`Text`、`File`、`Image`和`Video`模型创建数据库表。由于`ItemBase`是一个抽象模型，因此不会与它关联任何数据库表。
- en: '*Figure 12.7* shows the `Content` models and the associated database tables:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12.7*显示了`Content`模型及其相关的数据库表：'
- en: '![](img/B21088_12_07.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_12_07.png)'
- en: 'Figure 12.7: Content models and associated database tables'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7：内容模型及其相关的数据库表
- en: 'Edit the `Content` model you created previously and modify its `content_type`
    field, as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑你之前创建的`Content`模型，并修改其`content_type`字段，如下所示：
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: You add a `limit_choices_to` argument to limit the `ContentType` objects that
    can be used for the generic relation. You use the `model__in` field lookup to
    filter the query to the `ContentType` objects with a `model` attribute that is
    `'text'`, `'video'`, `'image'`, or `'file'`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过添加`limit_choices_to`参数来限制可用于通用关系的`ContentType`对象。你使用`model__in`字段查找来过滤查询，使其仅针对具有`model`属性为`'text'`、`'video'`、`'image'`或`'file'`的`ContentType`对象。
- en: 'Let’s create a migration to include the new models you have added. Run the
    following command from the command line:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个迁移来包含你已添加的新模型。从命令行运行以下命令：
- en: '[PRE30]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You will see the following output:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '[PRE31]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, run the following command to apply the new migration:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行以下命令以应用新的迁移：
- en: '[PRE32]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output you see should end with the following line:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到的输出应以以下行结束：
- en: '[PRE33]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You have created models that are suitable for adding diverse content to the
    course modules. However, there is still something missing in your models: the
    course modules and contents should follow a particular order. You need a field
    that allows you to order them easily.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经创建了适合向课程模块添加各种内容的模型。然而，在你的模型中仍有一些不足：课程模块和内容应该遵循特定的顺序。你需要一个字段，以便你可以轻松地对它们进行排序。
- en: Creating custom model fields
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义模型字段
- en: Django comes with a complete collection of model fields that you can use to
    build your models. However, you can also create your own model fields to store
    custom data or alter the behavior of existing fields. Custom fields allow you
    to store unique data types, implement custom validations, encapsulate complex
    data logic related to the field, or define specific rendering forms using custom
    widgets.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Django附带了一套完整的模型字段集合，您可以使用它们来构建模型。然而，您也可以创建自己的模型字段来存储自定义数据或修改现有字段的操作。自定义字段允许您存储独特的数据类型，实现自定义验证，封装与字段相关的复杂数据逻辑，或使用自定义小部件定义特定的渲染表单。
- en: You need a field that allows you to define an order for the objects. An easy
    way to specify an order for objects using existing Django fields is by adding
    a `PositiveIntegerField` to your models. Using integers, you can easily specify
    the order of the objects. You can create a custom order field that inherits from
    `PositiveIntegerField` and provides additional behavior.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个允许您为对象定义排序的字段。使用现有的Django字段为对象指定排序的一个简单方法是向您的模型中添加一个`PositiveIntegerField`。使用整数，您可以轻松指定对象的排序。您可以创建一个自定义排序字段，它继承自`PositiveIntegerField`并提供额外的行为。
- en: 'There are two relevant functionalities that you will build into your order
    field:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在排序字段中构建两个相关功能：
- en: '**Automatically assign an order value when no specific order is provided**:
    When saving a new object with no specific order, your field should automatically
    assign the number that comes after the last existing ordered object. If there
    are two objects with orders `1` and `2` respectively, when saving a third object,
    you should automatically assign order `3` to it if no specific order has been
    provided.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在没有提供特定排序时自动分配排序值**：当保存没有特定排序的新对象时，您的字段应自动分配最后一个现有排序对象的下一个数字。如果有两个对象分别具有排序`1`和`2`，当保存第三个对象时，如果没有提供特定排序，应自动将其分配为排序`3`。'
- en: '**Order objects with respect to other fields**: Course modules will be ordered
    with respect to the course they belong to and module contents with respect to
    the module they belong to.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**根据其他字段排序对象**：课程模块将根据所属课程进行排序，模块内容将根据所属模块进行排序。'
- en: 'Create a new `fields.py` file inside the `courses` application directory and
    add the following code to it:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在`courses`应用程序目录内创建一个新的`fields.py`文件，并将以下代码添加到其中：
- en: '[PRE34]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This is the custom `OrderField`. It inherits from the `PositiveIntegerField`
    field provided by Django. Your `OrderField` field takes an optional `for_fields`
    parameter, which allows you to indicate the fields used to order the data.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这是自定义的`OrderField`。它继承自Django提供的`PositiveIntegerField`字段。您的`OrderField`字段接受一个可选的`for_fields`参数，允许您指示用于排序数据的字段。
- en: 'Your field overrides the `pre_save()` method of the `PositiveIntegerField`
    field, which is executed before saving the field to the database. In this method,
    you perform the following actions:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您的字段覆盖了`PositiveIntegerField`字段的`pre_save()`方法，该方法在将字段保存到数据库之前执行。在此方法中，您执行以下操作：
- en: 'You check whether a value already exists for this field in the model instance.
    You use `self.attname`, which is the attribute name given to the field in the
    model. If the attribute’s value is different from `None`, you calculate the order
    you should give it as follows:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您检查模型实例中此字段是否已存在值。您使用`self.attname`，这是在模型中赋予字段的属性名。如果该属性值不同于`None`，您将按照以下方式计算应赋予它的排序：
- en: You build a QuerySet to retrieve all objects for the field’s model. You retrieve
    the model class the field belongs to by accessing `self.model`.
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您构建一个QuerySet来检索该字段模型的所有对象。您通过访问`self.model`来检索该字段所属的模型类。
- en: If there are any field names in the `for_fields` attribute of the field, you
    filter the QuerySet by the current value of the model fields in `for_fields`.
    By doing so, you calculate the order with respect to the given fields.
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果字段在`for_fields`属性中有任何字段名，您将通过`for_fields`中模型字段的当前值来过滤QuerySet。通过这样做，您根据给定的字段计算排序。
- en: You retrieve the object with the highest order with `last_item = qs.latest(self.attname)`
    from the database. If no object is found, you assume this object is the first
    one and assign order `0` to it.
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您从数据库中检索具有最高排序的对象`last_item = qs.latest(self.attname)`。如果没有找到对象，您假设此对象是第一个，并将其分配为排序`0`。
- en: If an object is found, you add `1` to the highest order found.
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果找到对象，您将`1`添加到找到的最高排序。
- en: You assign the calculated order to the field’s value in the model instance using
    `setattr()` and return it.
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你使用`setattr()`将计算出的顺序分配给模型实例的字段值，并返回它。
- en: If the model instance has a value for the current field, you use it instead
    of calculating it.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果模型实例当前字段有值，则使用该值而不是计算它。
- en: When you create custom model fields, make them generic. Avoid hardcoding data
    that depends on a specific model or field. Your field should work in any model.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建自定义模型字段时，使它们通用。避免硬编码依赖于特定模型或字段的依赖数据。你的字段应该适用于任何模型。
- en: You can find more information about writing custom model fields at [https://docs.djangoproject.com/en/5.0/howto/custom-model-fields/](https://docs.djangoproject.com/en/5.0/howto/custom-model-fields/).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://docs.djangoproject.com/en/5.0/howto/custom-model-fields/](https://docs.djangoproject.com/en/5.0/howto/custom-model-fields/)找到有关编写自定义模型字段的更多信息。
- en: Next, we are going to use the custom field we have created.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用我们创建的自定义字段。
- en: Adding ordering to Module and Content objects
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为模块和内容对象添加排序
- en: 'Let’s add the new field to your models. Edit the `models.py` file of the `courses`
    application, and import the `OrderField` class and a field to the `Module` model,
    as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将新字段添加到你的模型中。编辑`courses`应用的`models.py`文件，并将`OrderField`类和一个字段导入到`Module`模型中，如下所示：
- en: '[PRE35]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You name the new field `order` and specify that the ordering is calculated with
    respect to the course by setting `for_fields=['course']`. This means that the
    order for a new module will be assigned by adding `1` to the last module of the
    same `Course` object.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 你将新字段命名为`order`，并通过设置`for_fields=['course']`指定排序是根据课程计算的。这意味着新模块的顺序将通过将`1`添加到相同`Course`对象的最后一个模块来分配。
- en: 'Now, you can edit the `__str__()` method of the `Module` model to include its
    order, as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以编辑`Module`模型的`__str__()`方法，以包含其顺序，如下所示：
- en: '[PRE36]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Module contents also need to follow a particular order. Add an `OrderField`
    field to the `Content` model, as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 模块内容也需要遵循特定的顺序。将`OrderField`字段添加到`Content`模型中，如下所示：
- en: '[PRE37]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This time, you specify that the order is calculated with respect to the `module`
    field.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，你指定顺序是根据`module`字段计算的。
- en: 'Finally, let’s add a default ordering for both models. Add the following `Meta`
    class to the `Module` and `Content` models:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们为两个模型添加默认排序。将以下`Meta`类添加到`Module`和`Content`模型中：
- en: '[PRE38]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The `Module` and `Content` models should now look as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`Module`和`Content`模型现在应该如下所示：'
- en: '[PRE39]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Let’s create a new model migration that reflects the new `order` fields. Open
    the shell and run the following command:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的模型迁移，以反映新的`order`字段。打开shell并运行以下命令：
- en: '[PRE40]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You will see the following output:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '[PRE41]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Django is telling you that you have to provide a default value for the new `order`
    field for existing rows in the database. If the field includes `null=True`, it
    accepts null values and Django creates the migration automatically instead of
    asking for a default value. You can specify a default value or cancel the migration
    and add a `default` attribute to the `order` field in the `models.py` file before
    creating the migration.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Django告诉你，你必须为数据库中现有行的新的`order`字段提供一个默认值。如果字段包含`null=True`，它接受空值，并且Django会自动创建迁移而不是请求默认值。你可以在创建迁移之前指定默认值或取消迁移，并在`models.py`文件中将`default`属性添加到`order`字段。
- en: 'Enter `1` and press *Enter* to provide a default value for existing records.
    You will see the following output:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`1`并按*Enter*为现有记录提供一个默认值。你将看到以下输出：
- en: '[PRE42]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Enter `0` so that this is the default value for existing records and press
    *Enter*. Django will ask you for a default value for the `Module` model, too.
    Choose the first option and enter `0` as the default value again. Finally, you
    will see an output similar to the following one:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`0`，以便这是现有记录的默认值，然后按*Enter*。Django也会要求你为`Module`模型提供一个默认值。选择第一个选项，再次输入`0`作为默认值。最后，你将看到以下类似的输出：
- en: '[PRE43]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then, apply the new migrations with the following command:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令应用新的迁移：
- en: '[PRE44]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The output of the command will inform you that the migration was successfully
    applied, as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出将通知你迁移已成功应用，如下所示：
- en: '[PRE45]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Let’s test your new field. Open the shell with the following command:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来测试你的新字段。使用以下命令打开shell：
- en: '[PRE46]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create a new course, as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的课程，如下所示：
- en: '[PRE47]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You have created a course in the database. Now, you will add modules to the
    course and see how their order is automatically calculated. You create an initial
    module and check its order:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 您已在数据库中创建了一个课程。现在，您将向课程中添加模块并查看它们的顺序是如何自动计算的。您创建一个初始模块并检查其顺序：
- en: '[PRE48]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '`OrderField` sets its value to `0` since this is the first `Module` object
    created for the given course. You can create a second module for the same course:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderField` 将其值设置为 `0`，因为这是为给定课程创建的第一个 `Module` 对象。您可以为同一课程创建第二个模块：'
- en: '[PRE49]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '`OrderField` calculates the next order value, adding `1` to the highest order
    for existing objects. Let’s create a third module, forcing a specific order:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderField` 计算下一个订单值，为现有对象的最高订单号加 `1`。让我们创建第三个模块，强制指定一个顺序：'
- en: '[PRE50]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: If you provide a custom order when creating or saving an object, `OrderField`
    will use that value instead of calculating the order.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在创建或保存对象时提供了自定义顺序，`OrderField` 将使用该值而不是计算顺序。
- en: 'Let’s add a fourth module:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加第四个模块：
- en: '[PRE51]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The order for this module has been automatically set. Your `OrderField` field
    does not guarantee that all order values are consecutive. However, it respects
    existing order values and always assigns the next order based on the highest existing
    order.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块的顺序已自动设置。您的 `OrderField` 字段不保证所有顺序值都是连续的。然而，它尊重现有的顺序值，并始终根据最高的现有顺序分配下一个顺序。
- en: 'Let’s create a second course and add a module to it:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建第二个课程并向其中添加一个模块：
- en: '[PRE52]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: To calculate the new module’s order, the field only takes into consideration
    existing modules that belong to the same course. Since this is the first module
    of the second course, the resulting order is `0`. This is because you specified
    `for_fields=['course']` in the `order` field of the `Module` model.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算新模块的顺序，该字段仅考虑属于同一课程的现有模块。由于这是第二个课程的第一个模块，因此生成的顺序是 `0`。这是因为您在 `Module` 模型的
    `order` 字段中指定了 `for_fields=['course']`。
- en: Congratulations! You have successfully created your first custom model field.
    Next, you are going to create an authentication system for the CMS.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功创建了第一个自定义模型字段。接下来，您将创建一个用于 CMS 的认证系统。
- en: Adding authentication views
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加认证视图
- en: Now that you have created a polymorphic data model, you are going to build a
    CMS to manage the courses and their contents. The first step is to add an authentication
    system for the CMS.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经创建了一个多态数据模型，您将构建一个 CMS 来管理课程及其内容。第一步是为 CMS 添加一个认证系统。
- en: Adding an authentication system
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加认证系统
- en: You are going to use Django’s authentication framework for users to authenticate
    to the e-learning platform. You learned how to use the Django authentication views
    in *Chapter 4, Building a Social Website*.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用 Django 的认证框架为用户创建对电子学习平台的认证。您在 *第 4 章，构建社交网站* 中学习了如何使用 Django 认证视图。
- en: Both instructors and students will be instances of Django’s `User` model, so
    they will be able to log in to the site using the authentication views of `django.contrib.auth`.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 教师和学生都将成为 Django 的 `User` 模型的实例，因此他们可以使用 `django.contrib.auth` 的认证视图登录到网站。
- en: 'Edit the main `urls.py` file of the `educa` project and include the `login`
    and `logout` views of Django’s authentication framework:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `educa` 项目的 `urls.py` 主文件，并包含 Django 认证框架的 `login` 和 `logout` 视图：
- en: '[PRE53]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Next, we are going to create the authentication templates for the Django authentication
    views.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为 Django 认证视图创建认证模板。
- en: Creating the authentication templates
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建认证模板
- en: 'Create the following file structure inside the `courses` application directory:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `courses` 应用程序目录内创建以下文件结构：
- en: '[PRE54]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Before building the authentication templates, you need to prepare the base
    template for your project. Edit the `base.html` template file and add the following
    content to it:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建认证模板之前，您需要为您的项目准备基础模板。编辑 `base.html` 模板文件并向其中添加以下内容：
- en: '[PRE55]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'This is the base template that will be extended by the rest of the templates.
    In this template, you define the following blocks:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将被其他模板扩展的基础模板。在这个模板中，您定义以下块：
- en: '`title`: The block for other templates to add a custom title for each page.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`：其他模板添加自定义标题的块。'
- en: '`content`: The main block for content. All templates that extend the base template
    should add content to this block.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content`：内容的主要块。所有扩展基础模板的模板都应该向此块添加内容。'
- en: '`domready`: Located inside the JavaScript event listener for the `DOMContentLoaded`
    event. This allows you to execute code when the **Document Object Model** (**DOM**)
    has finished loading.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domready`：位于`DOMContentLoaded`事件的JavaScript事件监听器内部。这允许你在**文档对象模型**（**DOM**）加载完成后执行代码。'
- en: The CSS styles used in this template are located in the `static/` directory
    of the `courses` application in the code that comes with this chapter. Copy the
    `static/` directory into the same directory of your project to use them. You can
    find the contents of the directory at [https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter12/educa/courses/static](https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter12/educa/courses/static).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板中使用的CSS样式位于本章附带代码中`courses`应用的`static/`目录中。将`static/`目录复制到你的项目相同目录下以使用它们。你可以在[https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter12/educa/courses/static](https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter12/educa/courses/static)找到目录内容。
- en: 'Edit the `registration/login.html` template and add the following code to it:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`registration/login.html`模板，并向其中添加以下代码：
- en: '[PRE56]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: This is a standard login template for Django’s `login` view.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个Django的`login`视图的标准登录模板。
- en: 'Edit the `registration/logged_out.html` template and add the following code
    to it:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`registration/logged_out.html`模板，并向其中添加以下代码：
- en: '[PRE57]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'This is the template that will be displayed to the user after logging out.
    Run the development server with the following command:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用户注销后显示的模板。使用以下命令运行开发服务器：
- en: '[PRE58]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Open `http://127.0.0.1:8000/accounts/login/` in your browser. You should see
    the login page:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开`http://127.0.0.1:8000/accounts/login/`。你应该能看到登录页面：
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_12_08.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B21088_12_08.png)'
- en: 'Figure 12.8: The account login page'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8：账户登录页面
- en: Log in with the superuser credentials. You will be redirected to the URL `http://127.0.0.1:8000/accounts/profile/`,
    which is the default redirect URL for the `auth` module. You will get an HTTP
    `404` response because the given URL doesn’t exist yet. The URL to redirect users
    after a successful login is defined in the setting `LOGIN_REDIRECT_URL`. You will
    define a custom redirect URL in *Chapter 14, Rendering and Caching Content*.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 使用超级用户凭据登录。你将被重定向到`http://127.0.0.1:8000/accounts/profile/`，这是`auth`模块的默认重定向URL。你将得到HTTP
    `404`响应，因为给定的URL尚不存在。成功登录后重定向用户的URL定义在设置`LOGIN_REDIRECT_URL`中。你将在第14章“渲染和缓存内容”中定义一个自定义重定向URL。
- en: 'Open `http://127.0.0.1:8000/accounts/login/` again in your browser. Now, you
    should see the **Sign out** button in the header of the page. Click on the **Sign
    out** button. You should see the **Logged out** page now, as shown in *Figure
    12.9*:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 再次在浏览器中打开`http://127.0.0.1:8000/accounts/login/`。现在，你应该在页面头部看到**注销**按钮。点击**注销**按钮。现在你应该看到**注销**页面，如图12.9所示：
- en: '![Text  Description automatically generated](img/B21088_12_09.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![文本描述自动生成](img/B21088_12_09.png)'
- en: 'Figure 12.9: The account Logged out page'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9：账户注销页面
- en: You have successfully created an authentication system for the CMS.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 你已成功为CMS创建了一个认证系统。
- en: Summary
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to use fixtures to provide initial data for
    models. By using model inheritance, you created a flexible system to manage different
    types of content for the course modules. You also implemented a custom model field
    on order objects and created an authentication system for the e-learning platform.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用数据固定为模型提供初始数据。通过使用模型继承，你创建了一个灵活的系统来管理课程模块的不同类型的内容。你还实现了订单对象的自定义模型字段，并为电子学习平台创建了一个认证系统。
- en: In the next chapter, you will implement the CMS functionality to manage course
    contents using class-based views. You will use the Django groups and permissions
    system to restrict access to views, and you will implement formsets to edit the
    content of courses. You will also create a drag-and-drop functionality to reorder
    course modules and their content using JavaScript and Django.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将使用基于类的视图实现CMS功能来管理课程内容。你将使用Django的组和权限系统来限制对视图的访问，并实现表单集来编辑课程内容。你还将创建一个拖放功能，使用JavaScript和Django重新排序课程模块及其内容。
- en: Additional resources
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他资源
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源提供了与本章涵盖的主题相关的额外信息：
- en: 'Source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter12](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter12)'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章源代码：[https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter12](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter12)
- en: 'Using Django fixtures for testing: [https://docs.djangoproject.com/en/5.0/topics/testing/tools/#fixture-loading](https://docs.djangoproject.com/en/5.0/topics/testing/tools/#fixture-loading)'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Django 固定文件进行测试：[https://docs.djangoproject.com/en/5.0/topics/testing/tools/#fixture-loading](https://docs.djangoproject.com/en/5.0/topics/testing/tools/#fixture-loading)
- en: 'Data migrations: [https://docs.djangoproject.com/en/5.0/topics/migrations/#data-migrations](https://docs.djangoproject.com/en/5.0/topics/migrations/#data-migrations)'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据迁移：[https://docs.djangoproject.com/en/5.0/topics/migrations/#data-migrations](https://docs.djangoproject.com/en/5.0/topics/migrations/#data-migrations)
- en: 'Class inheritance in Python: [https://docs.python.org/3/tutorial/classes.html#inheritance](https://docs.python.org/3/tutorial/classes.html#inheritance
    )'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 中的类继承：[https://docs.python.org/3/tutorial/classes.html#inheritance](https://docs.python.org/3/tutorial/classes.html#inheritance
    )
- en: 'Django model inheritance: [https://docs.djangoproject.com/en/5.0/topics/db/models/#model-inheritance](https://docs.djangoproject.com/en/5.0/topics/db/models/#model-inheritance)'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 模型继承：[https://docs.djangoproject.com/en/5.0/topics/db/models/#model-inheritance](https://docs.djangoproject.com/en/5.0/topics/db/models/#model-inheritance)
- en: 'Creating custom model fields: [https://docs.djangoproject.com/en/5.0/howto/custom-model-fields/](https://docs.djangoproject.com/en/5.0/howto/custom-model-fields/)'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义模型字段：[https://docs.djangoproject.com/en/5.0/howto/custom-model-fields/](https://docs.djangoproject.com/en/5.0/howto/custom-model-fields/)
- en: 'Static directory for the e-learning project: [https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter12/educa/courses/static](https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter12/educa/courses/static
    )'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: e-learning 项目的静态目录：[https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter12/educa/courses/static](https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter12/educa/courses/static
    )
- en: Join us on Discord!
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord！
- en: Read this book alongside other users, Django development experts, and the author
    himself. Ask questions, provide solutions to other readers, chat with the author
    via Ask Me Anything sessions, and much more.Scan the QR code or visit the link
    to join the community.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、Django 开发专家以及作者本人一起阅读本书。提问、为其他读者提供解决方案、通过 Ask Me Anything 会话与作者聊天，等等。扫描二维码或访问链接加入社区。
- en: '[https://packt.link/Django5ByExample](https://packt.link/Django5ByExample)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/Django5ByExample](https://packt.link/Django5ByExample)'
- en: '![](img/QR_Code287089408934129031.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code287089408934129031.png)'
