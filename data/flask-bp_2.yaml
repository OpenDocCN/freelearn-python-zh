- en: Chapter 2. Small to Big – Growing the Flask Application Structure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。从小到大-扩展Flask应用程序结构
- en: 'Flask is a wonderful framework for people who want to write a very quick single-file
    application in order to prototype an API or to build a drop-dead simple website.
    What isn''t immediately obvious, however, is just how flexible and adept Flask
    is at growing in larger, more modular application structures that are a necessity
    once the single-module layout becomes more burdensome than convenient. The major
    points that we will cover in this chapter are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Flask是一个很棒的框架，适合想要编写一个非常快速的单文件应用程序以原型化API或构建一个非常简单的网站的人。然而，不那么明显的是，Flask在更大、更模块化的应用程序结构中的灵活性和能力，这在单模块布局变得更加繁琐而不再方便时是必不可少的。本章我们将涵盖的主要要点如下：
- en: How to convert a module-based Flask application to a package-based layout
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将基于模块的Flask应用程序转换为基于包的布局
- en: How to implement Flask blueprints on top of a package-based application structure
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在基于包的应用程序结构上实现Flask蓝图
- en: How to ensure that our resulting application can be run with the built-in Werkzeug
    development server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何确保我们的结果应用程序可以使用内置的Werkzeug开发服务器运行
- en: Your first Flask application structure
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的第一个Flask应用程序结构
- en: 'The canonical Flask introductory application that is found on the official
    website is a paragon of simplicity, and is something you''ve most likely come
    across beforehand:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方网站上找到的典型的Flask入门应用程序是简单的典范，这是你很可能以前就遇到过的：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding application can be run by first installing the `Flask` package
    from `pip` (all in a virtual environment, of course) and then executing the script
    itself under the Python interpreter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先通过从`pip`安装`Flask`包（当然是在虚拟环境中），然后在Python解释器下执行脚本来运行前面的应用程序：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will start the Werkzeug development web server, which was installed when
    `Flask` was obtained via `pip`, and serve the application on `http://localhost:5000`
    by default.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动Werkzeug开发Web服务器，默认情况下会在`http://localhost:5000`上为`Flask`通过`pip`获取时安装的应用程序提供服务。
- en: 'The typical way in which people start a new `Flask` application is to add various
    endpoints to the incredibly simple module that we showed in the preceding section:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 人们启动新的`Flask`应用程序的典型方式是向我们在前一节中展示的非常简单的模块添加各种端点：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'While straightforward, the drawbacks of this approach become apparent once
    the complexity of the application increases:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然直观，但是一旦应用程序的复杂性增加，这种方法的缺点就变得明显起来：
- en: The number of function definitions in the module increases almost linearly with
    the number of URLs that we want to route to. Though this is not an intrinsic drawback,
    developers should prefer to split functionality into smaller packages that are
    easier to understand.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块中的函数定义数量几乎与我们想要路由到的URL数量成线性增长。虽然这不是一个固有的缺点，但开发人员应该更喜欢将功能拆分成更容易理解的小包。
- en: The templates and static files that are required by the routes accumulate in
    the same sub-folder location, thus making their organization more complex and
    error-prone.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由所需的模板和静态文件积累在同一子文件夹位置，因此使它们的组织更加复杂和容易出错。
- en: Certain operations (for example, logging) become simpler when they are configured
    on a per-package basis instead of in one monolithic module.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某些操作（例如日志记录）在按包配置而不是在一个庞大的模块中配置时会变得更简单。
- en: From module to package
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从模块到包
- en: The simplest structural change that can be applied to a module-based Flask application
    is to transform it into a typical Python package, with special accommodation for
    the static and templates folders.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可以对基于模块的Flask应用程序应用的最简单的结构变化是将其转换为典型的Python包，并特别考虑静态和模板文件夹。
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we created a top-level application package, moved the `app.py` module
    along with the `static` and `template` folders inside it, and renamed it `__init__.py`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个顶级应用程序包，将`app.py`模块以及`static`和`template`文件夹放入其中，并将其重命名为`__init__.py`。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `__init__.py` file is required for a folder to be considered a valid Python
    package.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`__init__.py`文件是一个文件夹被视为有效的Python包所必需的。'
- en: 'One detail that should be handled at this point is the code that is used to
    run the development server. If you recall, the single-module application contained
    the following conditional statement:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此时应该处理的一个细节是用于运行开发服务器的代码。如果你还记得，单模块应用程序包含以下条件语句：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This allows us to execute the module file with the Python interpreter directly,
    as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够直接用Python解释器执行模块文件，如下所示：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For a variety of reasons, this is no longer a viable option. However, we still
    wish to run the development server in a straightforward fashion. For this, we
    will create a `run.py` file as a sibling to the inner `application` package folder:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 出于各种原因，这不再是一个可行的选择。然而，我们仍然希望以简单的方式运行开发服务器。为此，我们将创建一个`run.py`文件，作为内部`application`包文件夹的同级：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the `run.py` file, we will add the following snippet:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在`run.py`文件中，我们将添加以下片段：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This allows us to invoke the following command via the CLI so as to run the
    development server in the usual way:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够通过CLI调用以下命令以通常的方式运行开发服务器：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Generally, it's considered as bad practice to include code that modifies a state
    (for example, the creation of the Flask app object) in a `__init__.py` package.
    We do this now only for illustrative purposes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，在`__init__.py`包中包含修改状态的代码（例如创建Flask应用程序对象）被认为是一种不好的做法。我们现在只是为了说明目的而这样做。
- en: 'The `run` method of our Flask application object can accept a few optional
    arguments. The following are the most useful ones:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Flask应用程序对象的`run`方法可以接受一些可选参数。以下是最有用的几个：
- en: '`host`: The host IP to bind to. Defaults to any port, which is denoted by `0.0.0.0`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host`：要绑定的主机IP。默认为任何端口，用`0.0.0.0`表示。'
- en: '`port`: The port the application will bind to. Defaults to `5000`.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`：应用程序将绑定到的端口。默认为`5000`。'
- en: '`debug`: If set to `True`, the Werkzeug development server will reload when
    it detects a code change and additionally provide an interactive debugger embedded
    in an HTML page when an unhandled exception occurs.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debug`：如果设置为`True`，Werkzeug开发服务器在检测到代码更改时将重新加载，并在发生未处理的异常时在HTML页面中提供一个交互式调试器。'
- en: 'With the new application structure that we''ve outlined in the preceding section,
    it''s relatively simple to see how functionality such as route handler definitions,
    can be split from `__init__.py` into something like a `views.py` module. Similarly,
    our data models can be factored into a `models.py` module, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们在前一节中概述的新应用程序结构中，很容易看到功能，比如路由处理程序定义，可以从`__init__.py`中拆分成类似`views.py`模块的东西。同样，我们的数据模型可以被分解成一个`models.py`模块，如下所示：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We simply need to import these modules in `__init__.py` in order to ensure
    that they are loaded when we run the application:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要在`__init__.py`中导入这些模块，以确保在运行应用程序时它们被加载：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we need to import the views after we instantiate the application object,
    otherwise a circular import will be created. Once we start developing applications
    with blueprints, we will generally try to avoid circular imports by ensuring that
    one blueprint does not import from another.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们需要在实例化应用程序对象后导入视图，否则将创建循环导入。一旦我们开始使用蓝图开发应用程序，我们通常会尽量避免循环导入，确保一个蓝图不从另一个蓝图中导入。
- en: 'Similarly, we must import the Flask application object to the `views.py` module
    so that we can use the `@app.route` decorator to define our route handlers:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们必须在`views.py`模块中导入Flask应用程序对象，以便我们可以使用`@app.route`装饰器来定义我们的路由处理程序：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As expected, the application can still be run using the built-in Werkzeug application
    server from the **command-line interface** (**CLI**) as before; the only thiwng
    that has changed is the organization of our files. The advantage that we gained
    (at the cost of additional files and the possibility of circular imports rearing
    their ugly heads) is that of functional separation and organization: our view
    handlers may be grouped together in single or multiple modules based on their
    domain of interest, and our data layer and utility functions may exist elsewhere
    in the application structure.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，应用程序仍然可以像以前一样使用内置的Werkzeug应用程序服务器从**命令行界面**（**CLI**）运行；唯一改变的是我们文件的组织。我们获得的优势（以额外文件的代价和可能出现循环导入的可能性）是功能分离和组织：我们的视图处理程序可以根据其感兴趣的领域在单个或多个模块中分组，我们的数据层和实用函数可以存在于应用程序结构的其他位置。
- en: From package to blueprint
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从包到蓝图
- en: The package-based application structure that we just explored may be suitable
    for a large number of applications. However, Flask offers us a level of abstraction
    **née Blueprints**, which formalizes and enforces a separation of concerns at
    the level of views.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚探讨的基于包的应用程序结构可能适用于大量的应用程序。然而，Flask为我们提供了一种抽象级别**即蓝图**，它在视图层面上规范和强制实施了关注点的分离。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Do not confuse the concept of a blueprint in Flask, which is an abstraction
    to factor an application into more discrete components, with that of the Packt
    book series by the same name!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将Flask中的蓝图概念与同名的Packt图书系列的概念混淆！
- en: 'A Flask application that has become too unwieldy can be factored into a set
    of discrete blueprints—each with their own mapping of URIs and view functions,
    static resources (for example, JavaScript and CSS files), Jinja templates, and
    even Flask extensions. In many respects, blueprints are very similar to the Flask
    applications themselves. However, a blueprint is not an independent Flask application
    and cannot be run independently as an application itself, as described in the
    official Flask documentation:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个变得过于笨重的Flask应用程序可以被分解成一组离散的蓝图——每个蓝图都有自己的URI映射和视图函数、静态资源（例如JavaScript和CSS文件）、Jinja模板，甚至Flask扩展。在许多方面，蓝图与Flask应用程序本身非常相似。但是，蓝图不是独立的Flask应用程序，不能作为独立的应用程序运行，如官方Flask文档中所述：
- en: '*A blueprint in Flask is not a pluggable app because it is not actually an
    application—it''s a set of operations which can be registered on an application,
    even multiple times.—Official Flask documentation, [http://flask.pocoo.org/docs/0.10/blueprints/](http://flask.pocoo.org/docs/0.10/blueprints/)*'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*在Flask中，蓝图不是可插拔应用程序，因为它实际上不是一个应用程序——它是一组可以在应用程序上注册的操作，甚至可以多次注册。—官方Flask文档，[http://flask.pocoo.org/docs/0.10/blueprints/](http://flask.pocoo.org/docs/0.10/blueprints/)*'
- en: As a result, all the blueprints in an application will share the same main application
    object and configuration, and they must be registered with the main Flask object
    before the URI dispatching can occur.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，应用程序中的所有蓝图将共享相同的主应用程序对象和配置，并且它们必须在URI分发之前向主Flask对象注册。
- en: Our first blueprint
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的第一个蓝图
- en: 'The previous package-based application layout can be extended to include a
    blueprint-based architecture by first adding a new package that will contain our
    blueprint, which we will simply call `users`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以前基于包的应用程序布局可以通过首先添加一个新的包来包含我们的蓝图来扩展为基于蓝图的架构，我们将简单地称之为`users`：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The contents of the `users` package consists of the requisite `__init__.py`
    and one other module, `views.py`. Our (simple, for now) view functions for the
    `users` blueprint will be placed in the `views.py` module:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`users`包的内容包括必需的`__init__.py`和另一个模块`views.py`。我们（现在只是简单的）`users`蓝图的视图函数将放在`views.py`模块中：'
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We could have placed this code in the `users/__init__.py` file instead of separating
    it out into its own `views.py` module; but in doing so, we would be placing a
    side effect-generating code (that is, the instantiation of the users Blueprint
    object) in package initialization, which is generally frowned upon. The minor
    additional complexity of separating it out into a different module will save you
    from headaches later on.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以将这段代码放在`users/__init__.py`文件中，而不是将其分离成自己的`views.py`模块；但这样做的话，我们将会在包初始化中放置一个产生副作用的代码（即，实例化用户蓝图对象），这通常是不被赞同的。将其分离成一个不同的模块会带来一些额外的复杂性，但将会在以后避免一些麻烦。
- en: In this new module, we imported the `Blueprint` class from Flask and used it
    to instantiate a `users` blueprint object. The `Blueprint` class has two required
    arguments, `name` and `import_name`, which we provide as `users` and the `__name__`
    global magic attribute available to all Python modules and scripts. The former
    may be any unique identifier among all the registered blueprints that we desire
    and the latter should be the name of the module where the blueprint object is
    instantiated.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个新模块中，我们从Flask中导入了`Blueprint`类，并用它来实例化了一个`users`蓝图对象。`Blueprint`类有两个必需的参数，`name`和`import_name`，我们提供的是`users`和`__name__`，这是所有Python模块和脚本都可以使用的全局魔术属性。前者可以是我们所需的所有注册蓝图中的任何唯一标识符，后者应该是实例化蓝图对象的模块的名称。
- en: 'Once we have this in place, we must amend our application initialization in
    `application/__init__.py` in order to bind the blueprint to the Flask application
    object:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成了这一步，我们必须修改我们在`application/__init__.py`中的应用程序初始化，以便将蓝图绑定到Flask应用程序对象：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: On registering the Blueprint object with the application instance, there are
    several optional arguments that can be specified. One of these arguments is `url_prefix`,
    which will automatically prefix all the routes defined in the blueprint in question
    with the given string. This makes it quite simple to encapsulate all the views
    and routes that are meant to process the requests for any endpoints that begin
    with the `/users/*` URI segment, and is a pattern we will use frequently throughout
    this book.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在将蓝图对象注册到应用程序实例时，可以指定几个可选参数。其中一个参数是`url_prefix`，它将自动为所讨论的蓝图中定义的所有路由添加给定字符串的前缀。这使得封装所有视图和路由变得非常简单，这些视图和路由用于处理以`/users/*`
    URI段开头的任何端点的请求，这是我们在本书中经常使用的一种模式。
- en: 'Once completed, we can run our application using the built-in Werkzeug application
    server in the usual way via our `run.py` script:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们可以通过我们的`run.py`脚本以通常的方式使用内置的Werkzeug应用程序服务器来运行我们的应用程序：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Opening up our browser of choice and navigating to `http://localhost:5000/users/me`
    yields the following rendered result:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 打开我们选择的浏览器并导航到`http://localhost:5000/users/me`会产生以下渲染结果：
- en: '![Our first blueprint](img/3965_02_01.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![我们的第一个蓝图](img/3965_02_01.jpg)'
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started out with the most common, simple Flask application
    architecture and explored a few of the ways in which we can extend it in order
    to allow for a more modular approach. We first went from a module-based layout
    to a package-based one and then graduated to the use of Flask blueprints, which
    paved the way for the basic application structure that we will use in the following
    chapters.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从最常见的简单Flask应用程序架构开始，并探讨了一些扩展它的方法，以实现更模块化的方法。我们首先从基于模块的布局转向基于包的布局，然后升级到使用Flask蓝图，为我们在接下来的章节中使用的基本应用程序结构铺平了道路。
- en: In the next chapter, we will use the knowledge that we gained here to create
    our first functional Flask application by utilizing the blueprint pattern and
    several well-known Flask extensions.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将利用在这里获得的知识，通过使用蓝图模式和几个众所周知的Flask扩展来创建我们的第一个功能性Flask应用程序。
