- en: Chapter 5. Templates
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。模板
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Features of Django's template language
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django模板语言的特性
- en: Organizing templates
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织模板
- en: Bootstrap
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap
- en: Template inheritance tree pattern
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板继承树模式
- en: Active link pattern
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动链接模式
- en: Understanding Django's template language features
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Django的模板语言特性
- en: It is time to talk about the third musketeer in the MTV trio—templates. Your
    team might have designers who take care of designing templates. Or you might be
    designing them yourself. Either way, you need to be very familiar with them. They
    are, after all, directly facing your users.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候谈谈MTV三人组中的第三个伙伴-模板了。您的团队可能有设计师负责设计模板。或者您可能自己设计它们。无论哪种方式，您都需要非常熟悉它们。毕竟，它们直接面向您的用户。
- en: Let's start with a quick primer of Django's template language features.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从快速介绍Django的模板语言特性开始。
- en: Variables
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: 'Each template gets a set of context variables. Similar to Python''s string
    `format()` method''s single curly brace `{variable}` syntax, Django uses the double
    curly brace `{{ variable }}` syntax. Let''s see how they compare:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模板都有一组上下文变量。与Python的字符串`format()`方法的单花括号`{variable}`语法类似，Django使用双花括号`{{ variable
    }}`语法。让我们看看它们的比较：
- en: 'In Pure Python the syntax is `<h1>{title}</h1>`. For example:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在纯Python中，语法是`<h1>{title}</h1>`。例如：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The syntax equivalent in a Django template is `<h1>{{ title }}</h1>`.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Django模板中的等效语法是`<h1>{{ title }}</h1>`。
- en: 'Rendering with the same context will produce the same output as follows:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用相同的上下文进行渲染将产生相同的输出，如下所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Attributes
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性
- en: Dot is a multipurpose operator in Django templates. There are three different
    kinds of operations—attribute lookup, dictionary lookup, or list-index lookup
    (in that order).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django模板中，点是一个多功能运算符。有三种不同的操作-属性查找、字典查找或列表索引查找（按顺序）。
- en: 'In Python, first, let''s define the context variables and classes:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，在Python中，让我们定义上下文变量和类：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s take a look at Python''s syntax for the three kinds of lookups:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看Python对三种查找的语法：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In Django''s template equivalent, it is as follows:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Django的模板等价物中，如下所示：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice how `speak`, a method that takes no arguments except `self`, is treated
    like an attribute here.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`speak`，一个除了`self`之外不带参数的方法，在这里被当作属性对待。
- en: Filters
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤器
- en: Sometimes, variables need to be modified. Essentially, you would like to call
    functions on these variables. Instead of chaining function calls, such as `var.method1().method2(arg)`,
    Django uses the pipe syntax `{{ var|method1|method2:"arg" }}`, which is similar
    to Unix filters. However, this syntax only works for built-in or custom-defined
    filters.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，变量需要被修改。基本上，您想要在这些变量上调用函数。Django使用管道语法`{{ var|method1|method2:"arg" }}`，而不是链接函数调用，例如`var.method1().method2(arg)`，这类似于Unix过滤器。但是，这种语法只适用于内置或自定义的过滤器。
- en: Another limitation is that filters cannot access the template context. It only
    works with the data passed into it and its arguments. Hence, it is primarily used
    to alter the variables in the template context.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个限制是过滤器无法访问模板上下文。它只能使用传递给它的数据及其参数。因此，它主要用于更改模板上下文中的变量。
- en: 'Run the following command in Python:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Python中运行以下命令：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Its Django template equivalent:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的Django模板等价物：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tags
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签
- en: Programming languages can do more than just display variables. Django's template
    language has many familiar syntactic forms, such as `if` and `for`. They should
    be written in the tag syntax such as `{% if %}`. Several template-specific forms,
    such as `include` and `block` are also written in the tag syntax.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言不仅可以显示变量。Django的模板语言具有许多熟悉的语法形式，如`if`和`for`。它们应该以标签语法编写，如`{% if %}`。几种特定于模板的形式，如`include`和`block`，也是以标签语法编写的。
- en: 'Run the following command in Python:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Python中运行以下命令：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Its corresponding Django template form:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它对应的Django模板形式：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Philosophy – don't invent a programming language
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哲学-不要发明一种编程语言
- en: 'A common question among beginners is how to perform numeric computations such
    as finding percentages in templates. As a design philosophy, the template system
    does not intentionally allow the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 初学者经常问的一个问题是如何在模板中执行数值计算，比如找到百分比。作为设计哲学，模板系统故意不允许以下操作：
- en: Assignment to variables
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量赋值
- en: Advanced logic
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级逻辑
- en: This decision was made to prevent you from adding business logic in templates.
    From our experience with PHP or ASP-like languages, mixing logic with presentation
    can be a maintenance nightmare. However, you can write custom template tags (which
    will be covered shortly) to perform any computation, especially if it is presentation-related.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个决定是为了防止您在模板中添加业务逻辑。根据我们对PHP或类似ASP语言的经验，混合逻辑和表现可能会成为维护的噩梦。但是，您可以编写自定义模板标签（很快会介绍），以执行任何计算，特别是与表现相关的计算。
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Best Practice**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**'
- en: Keep business logic out of your templates.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将业务逻辑从模板中剥离出来。
- en: Organizing templates
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织模板
- en: 'The default project layout created by the `startproject` command does not define
    a location for your templates. This is very easy to fix. Create a directory named
    `templates` in your project''s root directory. Add the `TEMPLATE_DIRS` variable
    in your `settings.py`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`startproject`命令创建的默认项目布局未定义模板的位置。这很容易解决。在项目的根目录中创建一个名为`templates`的目录。在您的`settings.py`中添加`TEMPLATE_DIRS`变量：'
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'That''s all. For example, you can add a template called `about.html` and refer
    to it in the `urls.py` file as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。例如，您可以添加一个名为`about.html`的模板，并在`urls.py`文件中引用它，如下所示：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Your templates can also reside within your apps. Creating a `templates` directory
    inside your `app` directory is ideal to store your app-specific templates.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您的模板也可以位于应用程序中。在您的`app`目录内创建一个`templates`目录是存储特定于应用程序的模板的理想选择。
- en: 'Here are some good practices to organize your templates:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些组织模板的良好实践：
- en: Keep all app-specific templates inside the `app`'s template directory within
    a separate directory, for example, `projroot/app/templates/app/template.html`—notice
    how `app` appears twice in the path
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有特定于应用程序的模板放在`app`的模板目录中的单独目录中，例如`projroot/app/templates/app/template.html`—注意路径中`app`出现了两次
- en: Use the `.html` extension for your templates
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的模板使用`.html`扩展名
- en: Prefix an underscore for templates, which are snippets to be included, for example,
    `_navbar.html`
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为要包含的模板添加下划线，例如`_navbar.html`
- en: Support for other template languages
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对其他模板语言的支持
- en: From Django 1.8 onward, multiple template engines will be supported. There will
    be built-in support for the Django template language (the standard template language
    discussed earlier) and Jinja2\. In many benchmarks, Jinja2 is quite faster than
    Django templates.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从Django 1.8开始，将支持多个模板引擎。将内置支持Django模板语言（前面讨论过的标准模板语言）和Jinja2。在许多基准测试中，Jinja2比Django模板要快得多。
- en: It is expected that there will be an additional `TEMPLATES` setting for specifying
    the template engine and all template-related settings. The `TEMPLATE_DIRS` setting
    will be soon deprecated.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 预计将有一个额外的`TEMPLATES`设置用于指定模板引擎和所有与模板相关的设置。`TEMPLATE_DIRS`设置将很快被弃用。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: '**Madame O**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**乐观夫人**'
- en: For the first time in weeks, Steve's office corner was bustling with frenetic
    activity. With more recruits, the now five-member team comprised of Brad, Evan,
    Jacob, Sue, and Steve. Like a superhero team, their abilities were deep and amazingly
    well-balanced.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 几个星期以来，史蒂夫的办公室角落第一次充满了疯狂的活动。随着更多的新成员加入，现在的五人团队包括布拉德、埃文、雅各布、苏和史蒂夫。就像一个超级英雄团队一样，他们的能力深厚而惊人地平衡。
- en: Brad and Evan were the coding gurus. While Evan was obsessed over details, Brad
    was the big-picture guy. Jacob's talent in finding corner cases made him perfect
    for testing. Sue was in charge of marketing and design.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 布拉德和埃文是编码大师。埃文着迷于细节，布拉德是大局观的人。雅各布在发现边缘情况方面的才能使他成为测试的完美人选。苏负责营销和设计。
- en: In fact, the entire design was supposed to be done by an avant-garde design
    agency. It took them a month to produce an abstract, vivid, color-splashed concept
    loved by the management. It took them another two weeks to produce an HTML-ready
    version from their Photoshop mockups. However, it was eventually discarded as
    it proved to be sluggish and awkward on mobile devices.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，整个设计本来应该由一家前卫的设计机构完成。他们花了一个月时间制作了一份抽象、生动、色彩斑斓的概念，受到了管理层的喜爱。他们又花了两个星期的时间从他们的Photoshop模型中制作出一个HTML版本。然而，由于在移动设备上表现迟缓和笨拙，最终被抛弃了。
- en: Disappointed by the failure of what was now widely dubbed as the "unicorn vomit"
    design, Steve felt stuck. Hart had phoned him quite concerned about the lack of
    any visible progress to show management. In a grim tone, he reminded Steve, "We
    have already eaten up the project's buffer time. We cannot afford any last-minute
    surprises."
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 史蒂夫对现在被广泛称为“独角兽呕吐物”设计的失败感到失望。哈特曾经打电话给他，非常担心没有任何可见的进展向管理层展示。他以严肃的口吻提醒史蒂夫：“我们已经耗尽了项目的缓冲时间。我们不能承受任何最后一刻的意外。”
- en: It was then that Sue, who had been unusually quiet since she joined, mentioned
    that she had been working on a mockup using Twitter's Bootstrap. Sue was the growth
    hacker in the team—a keen coder and a creative marketer.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 苏自加入以来一直异常安静，那时她提到她一直在使用Twitter的Bootstrap进行模拟设计。苏是团队中的增长黑客——一个热衷于编码和创意营销的人。
- en: She admitted having just rudimentary HTML skills. However, her mockup was surprisingly
    thorough and looked familiar to users of other contemporary social networks. Most
    importantly, it was responsive and worked perfectly on every device from tablets
    to mobiles.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 她承认自己只有基本的HTML技能。然而，她的模型设计非常全面，对其他当代社交网络的用户来说看起来很熟悉。最重要的是，它是响应式的，并且在从平板电脑到手机等各种设备上都能完美运行。
- en: The management unanimously agreed on Sue's design, except for someone named
    Madame O. One Friday afternoon, she stormed into Sue's cabin and began questioning
    everything from the background color to the size of the mouse cursor. Sue tried
    to explain to her with surprising poise and calm.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 管理层一致同意苏的设计，除了一个名叫乐观夫人的人。一个星期五的下午，她冲进苏的办公室，开始质疑从背景颜色到鼠标指针大小的一切。苏试图以令人惊讶的镇定和冷静向她解释。
- en: An hour later, when Steve decided to intervene, Madame O was arguing why the
    profile pictures must be in a circle rather than square. "But a site-wide change
    like that will never get over in time," he said. Madame O shifted her gaze to
    him and gave him a sly smile. Suddenly, Steve felt a wave of happiness and hope
    surge within him. It felt immensely reliving and stimulating. He heard himself
    happily agreeing to all she wanted.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个小时后，当史蒂夫决定介入时，乐观夫人正在争论为什么个人资料图片必须是圆形而不是方形。“但是这样的全站更改永远不会及时完成，”他说。乐观夫人转移了目光，对他微笑。突然间，史蒂夫感到一股幸福和希望的波涌上涌。这让他感到非常宽慰和振奋。他听到自己愉快地同意她想要的一切。
- en: Later, Steve learnt that Madame Optimism was a minor mentalist who could influence
    prone minds. His team loved to bring up the latter fact on the slightest occasion.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，史蒂夫得知乐观夫人是一位可以影响易受影响的心灵的次要心灵感应者。他的团队喜欢在最轻微的场合提到后一事实。
- en: Using Bootstrap
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Bootstrap
- en: Hardly anyone starts an entire website from scratch these days. CSS frameworks
    such as Twitter's Bootstrap or Zurb's Foundation are easy starting points with
    grid systems, great typography, and preset styles. Most of them use responsive
    web design, making your site mobile friendly.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如今几乎没有人从头开始建立整个网站。Twitter的Bootstrap或Zurb的Foundation等CSS框架是具有网格系统、出色的排版和预设样式的简单起点。它们大多使用响应式网页设计，使您的网站适合移动设备。
- en: '![Using Bootstrap](img/6644OS_05_02.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![使用Bootstrap](img/6644OS_05_02.jpg)'
- en: A website using vanilla Bootstrap Version 3.0.2 built using the Edge project
    skeleton
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Edge项目骨架构建的使用vanilla Bootstrap Version 3.0.2的网站
- en: 'We will be using Bootstrap, but the steps will be similar for other CSS frameworks.
    There are three ways to include Bootstrap in your website:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Bootstrap，但其他CSS框架的步骤也类似。有三种方法可以在您的网站中包含Bootstrap：
- en: '**Find a project skeleton**: If you have not yet started your project, then
    finding a project skeleton that already has Bootstrap is a great option. A project
    skeleton such as `edge` (created by yours truly) can be used as the initial structure
    while running `startproject` as follows:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**找到一个项目骨架**：如果您还没有开始项目，那么找到一个已经包含Bootstrap的项目骨架是一个很好的选择。例如，像`edge`（由我亲自创建）这样的项目骨架可以在运行`startproject`时用作初始结构，如下所示：'
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Alternatively, you can use one of the `cookiecutter` templates with support
    for Bootstrap.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用支持Bootstrap的`cookiecutter`模板之一。
- en: '**Use a package**: The easiest option if you have already started your project
    is to use a package, such as `django-frontend-skeleton` or `django-bootstrap-toolkit`.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用包**：如果您已经开始了项目，最简单的选择就是使用一个包，比如`django-frontend-skeleton`或`django-bootstrap-toolkit`。'
- en: '**Manually copy**: None of the preceding options guarantees that their version
    of Bootstrap is the latest one. Bootstrap releases are so frequent that package
    authors have a hard time keeping their files up to date. So, if you would like
    to work with the latest version of Bootstrap, the best option is to download it
    from [http://getbootstrap.com](http://getbootstrap.com) yourself. Be sure to read
    the release notes to check whether your templates need to be changed due to backward
    incompatibility.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动复制**：前面提到的选项都不能保证它们的Bootstrap版本是最新的。Bootstrap发布频率如此之高，以至于包作者很难及时更新他们的文件。因此，如果您想使用最新版本的Bootstrap，最好的选择是从[http://getbootstrap.com](http://getbootstrap.com)自己下载。一定要阅读发布说明，以检查您的模板是否需要由于向后不兼容性而进行更改。'
- en: 'Copy the `dist` directory that contains the `css`, `js`, and `fonts` directories
    into your project root under the `static` directory. Ensure that this path is
    set for `STATICFILES_DIRS` in your `settings.py`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 将包含`css`、`js`和`fonts`目录的`dist`目录复制到您的项目根目录下的`static`目录中。确保在您的`settings.py`中为`STATICFILES_DIRS`设置了这个路径：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now you can include the Bootstrap assets in your templates, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以在您的模板中包含Bootstrap资源，如下所示：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: But they all look the same!
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 但它们看起来都一样！
- en: Bootstrap might be a great way to get started quickly. However, sometimes, developers
    get lazy and do not bother to change the default look. This leaves a poor impression
    on your users who might find your site's appearance a little too familiar and
    uninteresting.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap可能是一个快速入门的好方法。然而，有时开发人员会变懒，不去改变默认外观。这会给您的用户留下不好的印象，他们可能会觉得您网站的外观有点太熟悉和无趣。
- en: 'Bootstrap comes with plenty of options to improve its visual appeal. There
    is a file called `variables.less` that contains several variables from the primary
    brand color to the default font, as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap带有大量选项来改善其视觉吸引力。有一个名为`variables.less`的文件，其中包含了从主品牌颜色到默认字体等几个变量，如下所示：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Bootstrap documentation explains how you can set up the build system (including
    the LESS compiler) to compile these files down to the style sheets. Or quite conveniently,
    you can visit the 'Customize' area of the Bootstrap site to generate your customized
    style sheet online.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap文档解释了如何设置构建系统（包括LESS编译器）来将这些文件编译成样式表。或者非常方便的是，您可以访问Bootstrap网站的“自定义”区域，在那里在线生成您定制的样式表。
- en: Thanks to the huge community around Bootstrap, there are also several sites,
    such as [bootswatch.com](http://bootswatch.com), which have themed style sheets,
    that are drop-in replacements for your `bootstrap.min.css`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Bootstrap周围有庞大的社区，还有一些网站，比如[bootswatch.com](http://bootswatch.com)，它们有主题样式表，可以直接替换您的`bootstrap.min.css`。
- en: Another approach is to override the Bootstrap styles. This is recommended if
    you find upgrading your customized Bootstrap style sheet between Bootstrap versions
    to be quite tedious. In this approach, you can add your site-wide styles in a
    separate CSS (or LESS) file and include it after the standard Bootstrap style
    sheet. Thus, you can simply upgrade the Bootstrap file with minimal changes to
    your site-wide style sheet.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是覆盖Bootstrap样式。如果您发现在不同的Bootstrap版本之间升级自定义的Bootstrap样式表非常乏味，那么这是一个推荐的方法。在这种方法中，您可以在一个单独的CSS（或LESS）文件中添加站点范围的样式，并在标准Bootstrap样式表之后包含它。因此，您可以只需对站点范围的样式表进行最小的更改，就可以简单地升级Bootstrap文件。
- en: 'Last but not the least, you can make your CSS classes more meaningful by replacing
    structural names, such as ''row'' or ''column-md-4'', with ''wrapper'' or ''sidebar''.
    You can do this with a few lines of LESS code, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，您可以通过用更有意义的名称替换结构名称（例如'row'或'column-md-4'替换为'wrapper'或'sidebar'）来使您的CSS类更有意义。您可以通过几行LESS代码来实现这一点，如下所示：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is possible due to a feature called mixins (sounds familiar?). With the
    Less source files, Bootstrap can be completely customized to your needs.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可能的，因为有一个叫做mixin的功能（听起来很熟悉吧？）。有了Less源文件，Bootstrap可以完全按照您的需求进行定制。
- en: Template patterns
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板模式
- en: Django's template language is quite simple. However, you can save a lot of time
    by following some elegant template design patterns. Let's take a look at some
    of them.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Django的模板语言非常简单。然而，通过遵循一些优雅的模板设计模式，您可以节省大量时间。让我们来看看其中一些。
- en: Pattern – template inheritance tree
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式 - 模板继承树
- en: '**Problem**: Templates have lots of repeated content in several pages.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：模板中有很多重复的内容在几个页面中。'
- en: '**Solution**: Use template inheritance wherever possible and include snippets
    elsewhere.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：在可能的地方使用模板继承，并在其他地方包含片段。'
- en: Problem details
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题细节
- en: Users expect pages of a website to follow a consistent structure. Certain interface
    elements, such as navigation menu, headers, and footers are seen in most web applications.
    However, it is cumbersome to repeat them in every template.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 用户期望网站的页面遵循一致的结构。某些界面元素，如导航菜单、标题和页脚，在大多数Web应用程序中都会出现。然而，在每个模板中重复它们是很麻烦的。
- en: Most templating languages have an include mechanism. The contents of another
    file, possibly a template, can be included at the position where it is invoked.
    This can get tedious in a large project.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数模板语言都有一个包含机制。另一个文件的内容，可能是一个模板，可以在调用它的位置包含进来。在一个大型项目中，这可能会变得乏味。
- en: The sequence of the snippets to be included in every template would be mostly
    the same. The ordering is important and hard to check for mistakes. Ideally, we
    should be able to create a 'base' structure. New pages ought to extend this base
    to specify only the changes or make extensions to the base content.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个模板中包含的片段的顺序大多是相同的。顺序很重要，很难检查错误。理想情况下，我们应该能够创建一个'基础'结构。新页面应该扩展此基础，以指定仅更改或扩展基础内容。
- en: Solution details
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案详情
- en: 'Django templates have a powerful extension mechanism. Similar to classes in
    programming, a template can be extended through inheritance. However, for that
    to work, the base itself must be structured into blocks as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Django模板具有强大的扩展机制。类似于编程中的类，模板可以通过继承进行扩展。但是，为了使其工作，基础本身必须按照以下块的结构进行组织：
- en: '![Solution details](img/6644OS_05_01.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![解决方案详情](img/6644OS_05_01.jpg)'
- en: 'The `base.html` template is, by convention, the base structure for the entire
    site. This template will usually be well-formed HTML (that is, with a preamble
    and matching closing tags) that has several placeholders marked with the `{% block
    tags %}` tag. For example, a minimal `base.html` file looks like the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`base.html`模板通常是整个站点的基本结构。该模板通常是格式良好的HTML（即，具有前言和匹配的闭合标签），其中有几个用`{% block tags
    %}`标记标记的占位符。例如，一个最小的`base.html`文件看起来像下面这样：'
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'There are two blocks here, `heading` and `content`, that can be overridden.
    You can extend the base to create specific pages that can override these blocks.
    For example, here is an `about` page:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个块，`heading`和`content`，可以被覆盖。您可以扩展基础以创建可以覆盖这些块的特定页面。例如，这是一个`about`页面：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Notice that we do not have to repeat the structure. We can also mention the
    blocks in any order. The rendered result will have the right blocks in the right
    places as defined in `base.html`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不必重复结构。我们也可以按任何顺序提及块。渲染的结果将在`base.html`中定义的正确位置具有正确的块。
- en: If the inheriting template does not override a block, then its parent's contents
    are used. In the preceding example, if the `about` template does not have a heading,
    then it will have the default heading of 'Untitled'.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果继承模板没有覆盖一个块，那么将使用其父级的内容。在前面的例子中，如果`about`模板没有标题，那么它将具有默认的标题'Untitled'。
- en: The inheriting template can be further inherited forming an inheritance chain.
    This pattern can be used to create a common derived base for pages with a certain
    layout, for example, single-column layout. A common base template can also be
    created for a section of the site, for example, blog pages.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 继承模板可以进一步继承形成继承链。这种模式可以用来创建具有特定布局的页面的共同派生基础，例如，单列布局。还可以为站点的某个部分创建一个共同的基础模板，例如，博客页面。
- en: Usually, all inheritance chains can be traced back to a common root, `base.html`;
    hence, the pattern's name—Template inheritance tree. Of course, this need not
    be strictly followed. The error pages `404.html` and `500.html` are usually not
    inherited and stripped bare of most tags to prevent further errors.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，所有的继承链都可以追溯到一个共同的根，`base.html`；因此，这种模式被称为模板继承树。当然，这并不一定要严格遵循。错误页面`404.html`和`500.html`通常不会被继承，并且会被剥离大部分标签，以防止进一步的错误。
- en: Pattern – the active link
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式-活动链接
- en: '**Problem**: The navigation bar is a common component in most pages. However,
    the active link needs to reflect the current page the user is on.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：导航栏是大多数页面中的常见组件。但是，活动链接需要反映用户当前所在的页面。'
- en: '**Solution**: Conditionally, change the active link markup by setting context
    variables or based on the request path.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：通过设置上下文变量或基于请求路径，有条件地更改活动链接标记。'
- en: Problem details
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题详情
- en: The naïve way to implement the active link in a navigation bar is to manually
    set it in every page. However, this is neither DRY nor foolproof.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航栏中实现活动链接的天真方式是在每个页面中手动设置它。然而，这既不符合DRY原则，也不是绝对可靠的。
- en: Solution details
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案详情
- en: There are several solutions to determine the active link. Excluding JavaScript-based
    approaches, they can be mainly grouped into template-only and custom tag-based
    solutions.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种解决方案可以确定活动链接。除了基于JavaScript的方法之外，它们主要可以分为仅模板和基于自定义标签的解决方案。
- en: A template-only solution
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 仅模板解决方案
- en: By mentioning an `active_link` variable while including the snippet of the navigation
    template, this solution is both simple and easy to implement.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在包含导航模板的同时提及`active_link`变量，这种解决方案既简单又易于实现。
- en: 'In every template, you will need to include the following line (or inherit
    it):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个模板中，您需要包含以下行（或继承它）：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `_navbar.html` file contains the navigation menu with a set of checks for
    the active link variable:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`_navbar.html`文件包含了带有一组检查活动链接变量的导航菜单：'
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Custom tags
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自定义标签
- en: Django templates offer a versatile set of built-in tags. It is quite easy to
    create your own custom tag. Since custom tags live inside an app, create a `templatetags`
    directory inside an app. This directory must be a package, so it should have an
    (empty) `__init__.py` file.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Django模板提供了一个多功能的内置标签集。创建自定义标签非常容易。由于自定义标签位于应用程序内部，因此在应用程序内创建一个`templatetags`目录。该目录必须是一个包，因此它应该有一个（空的）`__init__.py`文件。
- en: 'Next, write your custom template in an appropriately named Python file. For
    example, for this active link pattern, we can create a file called `nav.py` with
    the following contents:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在一个适当命名的Python文件中编写您的自定义模板。例如，对于这个活动链接模式，我们可以创建一个名为`nav.py`的文件，其中包含以下内容：
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This file defines a custom tag named `active_nav`. It retrieves the URL's path
    component from the request argument (say, `/about/`—see [Chapter 4](ch04.html
    "Chapter 4. Views and URLs"), *Views and URLs,* for a detailed explanation of
    the URL path). Then, the `resolve()` function is used to lookup the URL pattern's
    name (as defined in `urls.py`) from the path. Finally, it returns the string `"active"`
    only when the pattern's name matches the expected pattern name.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件定义了一个名为`active_nav`的自定义标签。它从请求参数中检索URL的路径组件（比如`/about/`—参见[第4章](ch04.html
    "第4章。视图和URL")，“视图和URL”中对URL路径的详细解释）。然后，使用`resolve()`函数来查找路径对应的URL模式名称（在`urls.py`中定义）。最后，只有当模式名称匹配预期的模式名称时，它才返回字符串`"active"`。
- en: The syntax for calling this custom tag in a template is `{% active_nav request
    'pattern_name' %}`. Notice that the request needs to be passed in every page this
    tag is used.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板中调用这个自定义标签的语法是`{% active_nav request 'pattern_name' %}`。注意，请求需要在每个使用该标签的页面中传递。
- en: 'Including a variable in several views can get cumbersome. Instead, we add a
    built-in context processor to `TEMPLATE_CONTEXT_PROCESSORS` in `settings.py` so
    that the request will be present in a `request` variable across the site, as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在多个视图中包含一个变量可能会变得繁琐。相反，我们可以在`settings.py`的`TEMPLATE_CONTEXT_PROCESSORS`中添加一个内置的上下文处理器，这样请求将在整个站点中以`request`变量的形式存在。
- en: '[PRE21]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, all that remains is to use this custom tag in your template to set the
    active attribute:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，唯一剩下的就是在模板中使用这个自定义标签来设置活动属性：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the features of Django's template language. Since
    it is easy to change the templating language in Django, many people might consider
    replacing it. However, it is important to learn the design philosophy of the built-in
    template language before we seek alternatives.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了Django模板语言的特性。由于在Django中很容易更改模板语言，许多人可能会考虑替换它。然而，在寻找替代方案之前，了解内置模板语言的设计哲学是很重要的。
- en: In the next chapter, we will look into one of the killer features of Django,
    that is, the admin interface, and how we can customize it.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Django的一个杀手功能，即管理界面，以及我们如何对其进行定制。
