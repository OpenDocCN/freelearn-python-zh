- en: Building Optimized Frontends
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建优化的前端
- en: 'We have come quite far in this book while trying to understand how to build
    applications for enterprises in Python. The chapters we''ve covered so far consisted
    of how to build a scalable and responsive backend for our enterprise application
    that can cater for a large number of concurrent users, so that our enterprise
    application is a success with its users. However, there is one topic we have been
    missing and which usually gets very little attention when building enterprise
    level applications: the application frontend.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们已经在尝试了解如何在Python中为企业构建应用程序时走得很远。到目前为止，我们已经涵盖了如何为我们的企业应用程序构建一个可扩展和响应迅速的后端，以满足大量并发用户，以便我们的企业应用程序能够成功地为其用户提供服务。然而，在构建企业级应用程序时，有一个我们一直忽视的话题，通常在构建企业级应用程序时很少受到关注：应用程序的前端。
- en: When a user interacts with our application, they are hardly concerned with what
    is going on in the backend. The experience of the user is directly connected with
    how the frontend of the application responds to their inputs. This makes the application
    frontend not only one of the most important aspects of the application, but also
    makes it one of the major deciding factors for the success of the application
    among its users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户与我们的应用程序交互时，他们很少关心后端发生了什么。用户的体验直接与应用程序的前端如何响应他们的输入相关。这使得应用程序的前端不仅是应用程序最重要的方面之一，也使其成为应用程序在用户中成功的主要决定因素之一。
- en: Throughout this chapter, we will take a look at how we can build application
    frontends that not only provide an easy to use experience, but also a fast response
    to their inputs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看如何构建应用程序前端，不仅提供易于使用的体验，还能快速响应他们的输入。
- en: 'While going through this chapter, we will learn about the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本章时，我们将学习以下主题：
- en: The need for optimizing the application frontends
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化应用前端的需求
- en: Optimizing the resources your frontend depends upon
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化前端所依赖的资源
- en: Leveraging the client-side caching to streamline the page loading
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用客户端缓存来简化页面加载
- en: Utilizing web storage for persisting user data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Web存储持久化用户数据
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code listings in this book can be found under bugzot applicationdirectory
    built in `chapter06` at [https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python](https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的代码清单可以在`chapter06`中的`bugzot`应用程序目录下找到[https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python](https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python)。
- en: 'The code samples can be cloned by running the following command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下命令克隆代码示例：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The execution of the code does not require any particular set of special tools
    or frameworks and is a pretty straightforward process. The `README.md` file points
    to how to run the code samples for this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的执行不需要任何特定的特殊工具或框架，这是一个非常简单的过程。`README.md`文件指向了如何运行本章的代码示例。
- en: The need for optimizing frontends
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化前端的需求
- en: The UI of the application is one of its most important user facing components.
    It decides how the user is going to perceive the application. A smooth and fluid
    frontend goes a long way in defining the user experience with the application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 应用的用户界面是最重要的用户界面组件之一。它决定了用户如何感知应用程序。一个流畅的前端在定义用户体验方面起着很大的作用。
- en: This requirement for a smooth user experience brings in the need for optimizing
    the application frontend, in that it provides an easy to use interface, fast response
    times, and fluidity in the operations. If we go ahead and look toward the web
    2.0 companies such as Google, Facebook, LinkedIn, and so on, they spend a huge
    amount of resources just on optimizing their frontends to shave off a few milliseconds
    of the rendering time. That is how important an optimized frontend is.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这种对流畅用户体验的需求带来了优化应用前端的需求，它提供了一个易于使用的界面，快速的响应时间和操作的流畅性。如果我们继续向Web 2.0公司（如Google、Facebook、LinkedIn等）看齐，他们会花费大量资源来优化他们的前端，以减少几毫秒的渲染时间。这就是优化前端的重要性。
- en: Components of an optimized frontend
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化前端的组件
- en: We are discussing optimizing the frontends. But what does an optimized frontend
    consist of? How can we decide whether a frontend is optimized or not? Let's take
    a look.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在讨论优化前端。但是优化的前端包括什么？我们如何决定一个前端是否被优化了？让我们来看一下。
- en: 'An optimized frontend has several components, where it is not compulsory that
    every component needs to be reflected from the frontend. These components are
    as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 优化的前端有几个组件，不是每个组件都需要从前端反映出来。这些组件如下：
- en: '**Quick rendering times**: One of the first focuses of frontend optimization
    is to reduce the rendering time of the page. Although there is no predefined set
    of rendering times that can be considered good or bad, you can think that a good
    rendering time will be the one where the user does not have to wait too long for
    the page to load on a decent internet connection. Also, a ...'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速渲染时间**：前端优化的首要重点之一是减少页面的渲染时间。虽然没有预定义的渲染时间可以被认为是好还是坏，但你可以认为一个好的渲染时间是用户在一个体面的互联网连接上不必等待太长时间页面加载的时间。另外，...'
- en: What causes frontend issues
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导致前端问题的原因
- en: 'Frontend issues are a category of issues that are easily perceived by the users
    because they affect the way the user interacts with an application. For the sake
    of clarity here, when we say frontend of an enterprise web application, we are
    not only talking about its UI, we are also talking about the code and the templates
    that are there to render the required UI. Now, let''s move on to understand what
    possible causes of frontend-specific issues are:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前端问题是一类问题，用户很容易察觉到，因为它们影响用户与应用程序的交互方式。在这里，为了清楚起见，当我们说企业Web应用的前端时，我们不仅谈论其用户界面，还谈论代码和模板，这些都是用来呈现所需用户界面的。现在，让我们继续了解前端特定问题的可能原因：
- en: '**Excessive amount of objects**: In most of the dynamically populated templates
    that are responsible for rendering the frontend, the first problem comes with
    the rendering of an excessive amount of objects. When a lot of objects are passed
    to a template that needs to be rendered, the page response times tend to increase,
    causing an imminent slowdown in the process.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过多的对象**：在大多数负责呈现前端的动态填充模板中，第一个问题出现在呈现过多对象时。当大量对象传递给需要呈现的模板时，页面响应时间往往会增加，导致过程明显减慢。'
- en: '**Excessive includes**: One of the major things that is focused on in software
    engineering is how to increase the modularity of the code base. The increase in
    modularity benefits in the increased reusability of the components. However, everything
    done in excess can be a signal of a major problem that might occur. When the frontend
    templates are modularized to an extent that goes beyond what is required, the
    rendering performance of the templates decreases. The reason for this is that
    for every include that is there, a new file needs to be loaded from the disk,
    which is an exceptionally slow operation. One of the counter points here could
    be that once the template is loaded with all it includes resolved, the rendering
    engine can cache the template and serve the later requests from the cache. However,
    most of the caching engines have a limit on how much level of included depth they
    can cache, beyond which the performance hit will be imminent.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过多的包含**：软件工程中关注的一个主要问题是如何增加代码库的模块化。模块化的增加有助于增加组件的可重用性。然而，过度的模块化可能是可能出现重大问题的信号。当前端模板被模块化到超出所需程度时，模板的呈现性能会降低。原因在于每个包含都需要从磁盘加载一个新文件，这是一个异常缓慢的操作。这里的一个反驳观点可能是，一旦模板加载了所有包含的内容，呈现引擎就可以缓存模板，并从缓存中提供后续请求。然而，大多数缓存引擎对它们可以缓存的包含深度有一个限制，超出这个限制，性能损失将是明显的。'
- en: '**Unnecessary set of resources**: Some of the frontends could have an unnecessarily
    large amount of resources being loaded that are not used anywhere on a particular
    page. This includes JavaScript files that contain functions that are executed
    only on a small set of pages. Every extra file that is being loaded not only adds
    to increased consumption of the bandwidth but also affects the loading performance
    of the frontend.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不必要的资源集**：一些前端可能加载了大量不在特定页面上使用的资源。这包括包含仅在少数页面上执行的函数的JavaScript文件。每个额外加载的文件不仅增加了带宽的消耗，还影响了前端的加载性能。'
- en: '**Forcing the code to be loaded serially**: Most modern browsers are now optimized
    to load a lot of resources in parallel to efficiently utilize the network bandwidth
    and to reduce the page loading times. However, at times, some of the tricks that
    we use to reduce the amount of code may force the page to get loaded sequentially
    instead of being loaded in parallel. One of the most common examples that may
    cause the page resources to be loaded in sequence is the use of CSS imports. Although
    CSS imports provide the flexibility of loading third-party CSS files directly
    inside another style sheet, it also reduces the ability of the browser to load
    the contents of the CSS file in parallel, hence increasing the time it takes to
    render a page.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强制串行加载代码**：现代大多数浏览器都经过优化，可以并行加载大量资源，以有效利用网络带宽并减少页面加载时间。然而，有时，我们用来减少代码量的一些技巧可能会强制页面按顺序加载，而不是并行加载。可能导致页面资源按顺序加载的最常见示例之一是使用CSS导入。尽管CSS导入提供了直接在另一个样式表中加载第三方CSS文件的灵活性，但它也减少了浏览器加载CSS文件内容的能力，因此增加了呈现页面所需的时间。'
- en: This set of causes forms a non-exhaustive list of issues that can cause a slowdown
    in the page rendering time and hence provide an unpleasant experience to the user.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这一系列原因构成了可能导致页面呈现时间减慢的问题的非穷尽列表，因此给用户带来不愉快的体验。
- en: Now, let's take a look at how we can optimize our frontends to be responsive
    in nature and provide the best possible user experience.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何优化我们的前端，使其具有响应性，并提供最佳的用户体验。
- en: Optimizing the frontend
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化前端
- en: Until now, we learned about the various issues that may hamper the performance
    of the frontend. Now, it's time to take a look at how we can reduce the performance
    impact on the frontends and make them fast and responsive in an enterprise grade
    environment.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们了解了可能影响前端性能的各种问题。现在，是时候看看我们如何减少前端的性能影响，并使它们在企业级环境中快速响应。
- en: Optimizing resources
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化资源
- en: 'The first and foremost optimization that we are going to take a look at is
    the optimization of resources that a particular page loads when it is requested.
    For this, consider the following code snippet from the user data display page
    in the admin panel, which is responsible for displaying a table of users in the
    database:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要看的优化是在请求特定页面时加载的资源。为此，请考虑管理面板中用户数据显示页面的以下代码片段，该页面负责显示数据库中的用户表：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So far, so good. As we can see, the code snippet just loops over a user''s
    object and renders the table based on how many records are stored in the user''s
    table. This is essentially good for most of the purposes where the user records
    are only in a small number (for example, 100 or so). But this code will start
    to become problematic as the number of users in the application grows. Imagine
    trying to load 1 million records from the application database and making them
    display on the UI. There are certain issues with this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利。正如我们所看到的，代码片段只是循环遍历用户对象，并根据用户表中存储的记录数量来渲染表格。这对于大多数情况下用户记录只有少量（例如100条左右）的情况来说是很好的。但随着应用程序中用户数量的增长，这段代码将开始出现问题。想象一下尝试从应用程序数据库中加载100万条记录并在UI上显示它们。这会带来一些问题：
- en: '**Slow database queries**: Trying to load up 1 million records from the database
    at the same time is going to be very slow and can take quite a significant time,
    hence blocking the view from rendering for a long time.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库查询缓慢：**尝试同时从数据库加载100万条记录将会非常缓慢，并且可能需要相当长的时间，因此会阻塞视图很长时间。'
- en: '**Decoding the objects in the frontend:** In the frontend, to render the page,
    the templating engine has to decode the data from all the objects so that it is
    able to display the data on the page. This kind of operation is not only CPU intensive,
    but also slow.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解码前端对象：**在前端，为了渲染页面，模板引擎必须解码所有对象的数据，以便能够在页面上显示数据。这种操作不仅消耗CPU，而且速度慢。'
- en: '**Large page size:** Imagine transferring over a page consisting of millions
    of records over the network from the server to client. This process is time-consuming
    and also makes the page unfavorable to load over slow connections.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面大小过大：**想象一下从服务器到客户端通过网络传输数百万条记录的页面。这个过程耗时且使页面不适合在慢速连接上加载。'
- en: 'So, what can we do here? The answer to this is pretty simple: let''s optimize
    the amount of resources that are going to be loaded. To achieve this, we are going
    to utilize a concept known as pagination.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们可以在这里做些什么呢？答案很简单：让我们优化将要加载的资源量。为了实现这一点，我们将利用一种称为分页的概念。
- en: 'To implement pagination, we need to make a few changes to the view that is
    responsible for rendering the frontend template, as well as the frontend template.
    The following code describes how the view will look if it had to support pagination:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现分页，我们需要对负责渲染前端模板的视图以及前端模板进行一些更改。以下代码描述了如果视图需要支持分页，它将会是什么样子：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We are now done with the modifications to the view—it now supports pagination.
    Implementing this pagination was quite an easy task with the facilities already
    provided by SQLAlchemy to paginate the results from the database table using the
    `paginate()` method. This `paginate()` method asks for three parameters, namely
    the page number, which should start from one, the number of records on each page,
    and `error_out`, which is responsible for setting the error reporting for the
    method. A `False` here disables the errors from being displayed on `stdout`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了对视图的修改，它现在支持分页。通过使用SQLAlchemy提供的设施，实现这种分页是一项相当容易的任务，使用`paginate()`方法从数据库表中分页结果。这个`paginate()`方法需要三个参数，即页面编号（应从1开始），每页记录数，以及`error_out`，它负责设置该方法的错误报告。在这里设置为`False`会禁用在`stdout`上显示错误。
- en: 'With the view developed to support the pagination, the next thing is to define
    the template so that it can take advantage of the pagination. The following code
    shows the modified template code that takes advantage of the pagination:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 开发支持分页的视图后，下一步是定义模板，以便它可以利用分页。以下代码显示了修改后的模板代码，以利用分页：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And with this, we have our view code ready. This view code is quite simple as
    we have just extended the previous template by adding a `href`, which loads the
    data for the next page.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个视图代码，我们的视图代码已经准备好了。这个视图代码非常简单，因为我们只是通过添加一个`href`来扩展之前的模板，该`href`加载下一页的数据。
- en: With our resources being sent to the page now optimized, the next thing we need
    to focus on is how we can make our frontend load more and more resources faster.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经优化了发送到页面的资源，接下来我们需要关注的是如何使我们的前端更快地加载更多资源。
- en: Fetching CSS in parallel by avoiding CSS imports
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过避免CSS导入并行获取CSS
- en: CSS is one of the major parts of any frontend that helps in providing the styling
    information to the browser for how it should style the page it has received from
    the server. Usually, a frontend may have a number of CSS files associated with
    it. One of the possible optimizations that we can achieve here is by making these
    CSS files get fetched in parallel.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: CSS是任何前端的重要组成部分，它帮助为浏览器提供样式信息，告诉浏览器如何对从服务器接收到的页面进行样式设置。通常，前端可能会有许多与之关联的CSS文件。我们可以通过使这些CSS文件并行获取来实现一些可能的优化。
- en: So, let's imagine we have the following set of CSS files, namely `main.css`,
    `reset.css`, `responsive.css`, and `grid.css`, which our frontend needs to load.
    The way we allow the browser to load all these files in parallel is by linking
    them into the frontend using the HTML link tag instead of CSS imports, which causes
    the CSS files to be loaded ...
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们想象一下我们有以下一组CSS文件，即`main.css`、`reset.css`、`responsive.css`和`grid.css`，我们的前端需要加载。我们允许浏览器并行加载所有这些文件的方式是通过使用HTML链接标签将它们链接到前端，而不是使用CSS导入，这会导致加载CSS文件...
- en: Bundling JavaScript
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包JavaScript
- en: In the current time and hopefully the future as well, we will constantly see
    increasing bandwidths for the networks, be it broadband networks or mobile networks
    that allow for faster downloading of resources in parallel. But for every resource
    that needs to be fetched from a remote server, there is still some network latency
    involved due to the fact that every separate resource demands a separate request
    to be made to the server. This latency can bite when there are a lot of resources
    that need to be loaded and when the user is on a high latency network.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前时间和希望的未来，我们将不断看到网络带宽的增加，无论是宽带网络还是移动网络，都可以实现资源的并行更快下载。但是对于每个需要从远程服务器获取的资源，由于每个单独的资源都需要向服务器发出单独的请求，仍然涉及一些网络延迟。当需要加载大量资源并且用户在高延迟网络上时，这种延迟可能会影响。
- en: Usually, most modern web applications heavily utilize JavaScript for a wide
    set of purposes, which may include input validation, dynamically generating content,
    and so on. All of this functionality is split into multiple files, which may include
    some libraries, customized code, and so on. Although having all of these split
    into different files can help in parallel loading, sometimes the JavaScript files
    contain code for generating dynamic content on the web page, which may block the
    rendering of the web page until all the necessary files required for successfully
    rendering the page are not loaded.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，大多数现代Web应用程序广泛利用JavaScript来实现各种目的，包括输入验证、动态生成内容等。所有这些功能都分成多个文件，其中可能包括一些库、自定义代码等。虽然将所有这些拆分成不同的文件可以帮助并行加载，但有时JavaScript文件包含用于在网页上生成动态内容的代码，这可能会阻止网页的呈现，直到成功加载网页呈现所需的所有必要文件。
- en: One of the possible ways through which we can reduce the amount of time a browser
    takes to load up these script resources is to bundle them all together into a
    single file. This allows all the scripts to be combined into a single large file
    that the browser can fetch in a single request. Although this may cause the user
    a bit of a slow experience when they first visit a website, once the resource
    has been fetched and cached, the subsequent loads of the web page will be significantly
    faster for the user.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以减少浏览器加载这些脚本资源所需的时间的一种可能的方法是将它们全部捆绑到一个单一文件中。这允许所有脚本组合成一个单一的大文件，浏览器可以在一个请求中获取。虽然这可能会导致用户在首次访问网站时体验有点慢，但一旦资源被获取和缓存，用户对网页的后续加载将会显著更快。
- en: 'Today, a lot of third-party libraries are available that allow us to bundle
    this JavaScript. Let''s take an example of a simple tool called Browserify, which
    allows us to bundle our JavaScript files. For example, if we had multiple JavaScript
    files, such as `jquery.js`, `image-loader.js`, `slideshow.js`, and `input-validator.js`,
    and we want to bundle these files together with Browserify, all we have to do
    is run the following command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，有很多第三方库可用，可以让我们捆绑这些JavaScript。让我们以一个名为Browserify的简单工具为例，它允许我们捆绑我们的JavaScript文件。例如，如果我们有多个JavaScript文件，如`jquery.js`、`image-loader.js`、`slideshow.js`和`input-validator.js`，并且我们想要使用Browserify将这些文件捆绑在一起，我们只需要运行以下命令：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This command will create a bundle of these JavaScript files into a common file
    known as `bundle.js`, which can now be included in our web application through
    the use of a simple script tag like the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将把这些JavaScript文件创建成一个称为`bundle.js`的公共文件包，现在可以通过简单的脚本标签包含在我们的Web应用程序中，如下所示：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With the JavaScript bundled to load up in one request, we may start seeing some
    improvements in terms of how quickly a page is fetched and displayed to the user
    in the browser with the subsequent page loads. Now, let's take a look at one other
    interesting topic that may be of a good use to really make a difference in how
    quickly our web application loads up for repeated visits to the website.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将JavaScript捆绑到一个请求中加载，我们可能会开始看到一些改进，以便页面在浏览器中快速获取和显示给用户。现在，让我们来看看另一个可能有用的有趣主题，它可能会在网站重复访问时对我们的Web应用程序加载速度产生真正的影响。
- en: The technique we discussed for bundling of JavaScript can also be a good optimization
    for the inclusion of CSS files.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论的JavaScript捆绑技术也可以用于包含CSS文件的优化。
- en: Utilizing client-side caching
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用客户端缓存
- en: Caching has long been used to speed up the loading of resources that are frequently
    used. For example, most of the modern operating systems utilize caching for providing
    faster access to the most frequently used applications. The web browsers also
    utilize caching to provide quicker access to resources when the user visits the
    same website again. This is done so as to avoid fetching the same files from the
    remote server again and again if they haven't changed and hence reducing the amount
    of data transfer that may be required, while also improving the rendering time
    for the page.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存长期以来一直被用来加快频繁使用的资源的加载速度。例如，大多数现代操作系统利用缓存来提供对最常用应用程序的更快访问。Web浏览器也利用缓存，在用户再次访问同一网站时，提供对资源的更快访问。这样做是为了避免如果文件没有更改就一遍又一遍地从远程服务器获取它们，从而减少可能需要的数据传输量，同时提高页面的呈现时间。
- en: Now, in the world of enterprise applications, something like client-side caching
    can prove to be really useful. This happens because ...
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在企业应用程序的世界中，像客户端缓存这样的东西可能会非常有用。这是因为...
- en: Setting application-wide cache control
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置应用程序范围的缓存控制
- en: 'Since our application is based upon Flask, we can leverage several simple mechanisms
    for setting up the cache control for our application. For example, adding the
    following code to the end of our `bugzot/application.py` file enables site-wide
    cache control, as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用程序基于Flask，我们可以利用几种简单的机制来为我们的应用程序设置缓存控制。例如，将以下代码添加到我们的`bugzot/application.py`文件的末尾可以启用站点范围的缓存控制，如下所示：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, we utilize the Flask's inbuilt `after_request` decorator hook
    to set up the HTTP response header once the request has arrived to the Flask application.
    The decorated function needs a single parameter that takes in an object of the
    response class and returns a modified response object.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们利用Flask内置的`after_request`装饰器钩子来设置HTTP响应头，一旦请求到达Flask应用程序，装饰的函数需要一个参数，该参数接收一个响应类的对象，并返回一个修改后的响应对象。
- en: For our use case, inside the code for the method for the `after_request` hook,
    we set the `cache_control.max_age` header, which specifies the upper boundary
    for the time for which the content will be served from the cache before it is
    fetched from the server again, and the `cache_control.public` header, which defines
    if the cached response can be shared with multiple requests or not.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的用例，在`after_request`钩子的方法代码中，我们设置了`cache_control.max_age`头，该头指定了内容在再次从服务器获取之前从缓存中提供的时间的上限，以及`cache_control.public`头，该头定义了缓存响应是否可以与多个请求共享。
- en: Now, there could be times when we want to set up the cache control differently
    for a particular kind of request. For example, we may not want `cache_control.public`
    to be set for the user profile page so as to avoid displaying the same profile
    data to the different users. Our application allows us to achieve these kinds
    of scenarios pretty quickly. Let's take a look.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可能会有时候我们想为特定类型的请求设置不同的缓存控制。例如，我们可能不希望为用户个人资料页面设置`cache_control.public`，以避免向不同的用户显示相同的个人资料数据。我们的应用程序允许我们相当快速地实现这些类型的场景。让我们来看一下。
- en: Setting request level cache control
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置请求级别的缓存控制
- en: 'In Flask, we can modify the response headers before we send the response back
    to the client. This can be done fairly easily. The following example shows a simple
    view implementing response-specific header control:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在Flask中，我们可以在将响应发送回客户端之前修改响应头。这可以相当容易地完成。以下示例显示了一个实现响应特定头控制的简单视图：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Utilizing web storage
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Web存储
- en: Any web application developer who has worked on any application that involves
    even a little user management will for sure have heard about web cookies, which
    in essence provide a mechanism for storing some of the information on the client
    side.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 任何曾经处理过即使是一点点用户管理的应用程序的Web应用程序开发人员肯定都听说过Web cookies，它本质上提供了一种在客户端存储一些信息的机制。
- en: 'Utilizing cookies provides an easy way through which we can maintain small
    amounts of user data on the client side and can read it multiple times until the
    cookies expire. But as easy as it is to deal with cookies, there are certain limitations
    that restrict the cookies being used for anything useful, other than maintaining
    a small amount of application state on the client side. Some of these limitations
    are as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 利用cookies提供了一种简单的方式，通过它我们可以在客户端维护小量用户数据，并且可以多次读取，直到cookies过期。但是，尽管处理cookies很容易，但有一些限制限制了cookies的实用性，除了在客户端维护少量应用程序状态之外。其中一些限制如下：
- en: Cookies are transferred with every request, hence adding to the data that is
    transferred with every request
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: cookies随每个请求传输，因此增加了每个请求传输的数据量
- en: Cookies allow for storing a little amount of data that is restricted to a maximum
    of 4 KB
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cookies允许存储少量数据，最大限制为4 KB
- en: Now, the question that comes is, what can we do if we want to store more data
    or we want to avoid fetching the same set of stored data again and again with
    every request?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，出现的问题是，如果我们想存储更多的数据，或者我们想避免在每个请求中一遍又一遍地获取相同的存储数据，我们该怎么办？
- en: 'For dealing with such scenarios, the latest version of HTML, HTML 5, provides
    various functionalities that allow for dealing with client-side web storage. This
    web storage provides a number of benefits over the cookies-based mechanism, such
    as the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这种情况，HTML的最新版本HTML 5提供了各种功能，允许处理客户端Web存储。这种Web存储相对于基于cookies的机制提供了许多优点，例如：
- en: Since the web storage is available directly on the client side, the information
    doesn't need to be sent by the server again and again to the client with every
    request
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于Web存储直接在客户端上可用，因此不需要服务器一遍又一遍地将信息发送到客户端
- en: The web storage API provides a maximum of 10 MB of storage, which is multiple
    times grater than what can be stored with the cookies
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web存储API提供了最多10 MB的存储空间，这是比使用cookies存储的多次更大的存储空间
- en: Web storage provides the flexibility of storing the data either in local storage,
    for example, the data will be accessible even after the user closes and opens
    a browser again, or on a per session basis, where the data stored in the web storage
    will be cleared off as soon as the session is invalidated, either when the user
    session is destroyed by your application handler responsible for handling the
    user log out, or the browser is closed
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web存储提供了在本地存储中存储数据的灵活性，例如，即使用户关闭并重新打开浏览器，数据也是可访问的，或者基于每个会话的基础上存储数据，其中存储在Web存储中的数据将在会话失效时被清除，无论是当用户会话被应用程序处理用户注销的处理程序销毁，还是浏览器关闭
- en: This makes web storage an attractive place to put in the data and avoid loading
    it again and again.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得Web存储成为一个吸引人的地方，可以存放数据，避免一遍又一遍地加载
- en: For our enterprise applications, this can provide a lot of flexibility by storing
    the results of the intermediate steps in the user browser only, and then submitting
    them back to the server only when all the required input fields have been filled
    up.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的企业应用程序，这可以通过仅在用户浏览器中存储中间步骤的结果，然后仅在填写完所有必需的输入字段时将它们提交回服务器，从而提供很大的灵活性。
- en: One other use case that may be more specific to Bugzot is that, we can store
    the bug report that a user is filing into the web storage and send it to the server
    when the bug report is completed. In this case, the user gets the flexibility
    to come back to working on their bug reports as and when they wish, without worrying
    about starting from scratch again.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能更适用于Bugzot的用例是，我们可以将用户提交的错误报告存储到Web存储中，并在完成错误报告时将其发送到服务器。在这种情况下，用户可以灵活地随时回到处理其错误报告，而不必担心再次从头开始。
- en: Now that we know about the benefits that web storage provides, let's take a
    look at how we can leverage the use of web storage.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了Web存储提供的好处，让我们看看如何利用Web存储的使用。
- en: Working with local web storage
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用本地Web存储
- en: 'The use of local web storage is easy with HTML 5, since it provides a number
    of APIs to interact with the web storage. So, without wasting much time, let''s
    take a look at a simple example of how we can use local web storage. For this,
    we will create a simple JavaScript file known as `localstore.js` with the following
    contents:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTML 5的本地Web存储非常容易，因为它提供了许多API来与Web存储交互。因此，让我们不浪费时间，看一下我们如何使用本地Web存储的一个简单例子。为此，我们将创建一个名为`localstore.js`的简单JavaScript文件，内容如下：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This was ...
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是...
- en: Working with session storage
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用会话存储
- en: 'As simple as it is to use the local storage, session storage also doesn''t
    add any kind of complexity. For example, let''s take a look at how easy it is
    to port our example of `localStorage` to `sessionStorage`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本地存储同样简单，会话存储也不会增加任何复杂性。例如，让我们看看将我们的`localStorage`示例轻松转换为`sessionStorage`有多容易：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: From this example, it is evident that moving away from local storage to session
    storage is very easy, with both the storage options providing a similar storage
    API, the only difference being how long the data in the storage is kept.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个例子可以明显看出，从本地存储转移到会话存储非常容易，因为这两种存储选项都提供了类似的存储API，唯一的区别在于存储中的数据保留时间有多长。
- en: With the knowledge of how we can optimize frontends to provide completely scalable
    and responsive enterprise web applications, now it's time for us to visit some
    aspects of the enterprise application development that ensure what we are building
    is secure and works as per expectations, and doesn't delivers random surprises.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过了解如何优化前端以提供完全可扩展和响应的企业Web应用程序，现在是时候我们访问一些确保我们构建的内容安全并符合预期的企业应用程序开发方面的内容，而不会带来意外惊喜。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Throughout the course of this chapter, we learned about why it is important
    to have an optimized frontend for our enterprise applications, and how a frontend
    may affect the use of our application inside the enterprise. We then moved on
    to understand what kind of issues usually plague the performance of web frontends,
    and what possible solutions we can take to improve the application frontend. This
    involves reducing the amount of resources that are loaded by the frontend, allowing
    the CSS to load in parallel, bundling JavaScript, and so on. We then moved on
    to understand how caching can prove to be useful considering the use case of an
    enterprise web application. Once we understood the concept of caching, we then
    moved into the territory ...
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的过程中，我们了解了为企业应用程序拥有优化的前端的重要性，以及前端如何影响我们在企业内部使用应用程序。然后，我们继续了解通常会影响Web前端性能的问题类型，以及我们可以采取哪些可能的解决方案来改进应用程序前端。这包括减少前端加载的资源量，允许CSS并行加载，捆绑JavaScript等。然后，我们继续了解缓存如何在考虑企业Web应用程序的使用情况下证明是有用的。一旦我们了解了缓存的概念，我们就进入了领域...
- en: Questions
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How can the use of CDN provide a boost to frontend performance?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CDN的使用如何提高前端性能？
- en: Can we do something to make the browser utilize existing connections to the
    server for loading resources?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们能做些什么让浏览器利用现有的连接从服务器加载资源吗？
- en: How can we remove a particular key from web storage or clear the contents of
    web storage?
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何从Web存储中删除特定键或清除Web存储的内容？
