- en: 7\. Working with Images
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7. 处理图像
- en: Learning Objectives
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够：
- en: Build a user avatar function
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建用户头像功能
- en: Develop an image uploading API using Flask-Uploads
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flask-Uploads开发图像上传API
- en: Resize images using an API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用API调整图像大小
- en: Compress images using Pillow to enhance API performance
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Pillow压缩图像以增强API性能
- en: In this chapter, we will learn how to perform image uploads so that we can let
    users post a profile picture and recipe cover image to our Smilecook application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何执行图像上传，以便我们能让用户在我们的Smilecook应用程序中发布个人资料图片和食谱封面图片。
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简介
- en: In the previous chapter, we completed the account opening workflow by activating
    the user accounts via email. In this chapter, we will develop a function so that
    we can upload pictures. These pictures are the user's profile picture and the
    recipe cover images. Aside from uploading images, we will also discuss image compression.
    Pillow is an image processing package that we are going to use to compress images
    up to 90%. This can greatly enhance the performance of our API without compromising
    on the image's quality.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们通过通过电子邮件激活用户账户来完成账户开通工作流程。在本章中，我们将开发一个功能，以便我们可以上传图片。这些图片是用户的个人资料图片和食谱封面图片。除了上传图像外，我们还将讨论图像压缩。Pillow是一个图像处理包，我们将使用它将图像压缩到90%。这可以在不牺牲图像质量的情况下大大提高我们API的性能。
- en: Technically speaking, we will introduce two Python packages, Flask-Uploads and
    Pillow, in this chapter. Flask-Uploads allows us to quickly develop image uploading
    functions. For image compression, we will be using Pillow. It can generate images
    in our specified format and compress them accordingly.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度讲，在本章中，我们将介绍两个Python包，Flask-Uploads和Pillow。Flask-Uploads允许我们快速开发图像上传功能。对于图像压缩，我们将使用Pillow。它可以生成我们指定的格式的图像，并相应地进行压缩。
- en: Building the User Avatar Function
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建用户头像功能
- en: In our Smilecook application, there are user profile pages that list user information.
    While this is useful enough, it would be much better if we could allow users to
    upload a profile picture (avatar) to their profile page. This would make the application
    more sociable.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Smilecook应用程序中，有列出用户信息的用户个人资料页面。虽然这已经足够有用，但如果我们可以允许用户将个人资料图片（头像）上传到他们的个人资料页面，那就更好了。这将使应用程序更具社交性。
- en: 'To store the user avatar, we will create a new attribute (`avatar_image`) in
    the user model. We are not going to store the image directly in this attribute.
    Instead, we are going to store the image on the server, and the new attribute
    will have the filename of the image. Later, when our API gets a client request
    asking for the image, we will find the filename in this attribute and generate
    the URL to point to the image location and then return it to the frontend client-side.
    The frontend client will then base on the image URL and fetch it from the server:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '为了存储用户头像，我们将在用户模型中创建一个新的属性（`avatar_image`）。我们不会直接在这个属性中存储图像。相反，我们将图像存储在服务器上，而新的属性将包含图像的文件名。稍后，当我们的API收到客户端请求请求图像时，我们将在这个属性中找到文件名，生成指向图像位置的URL，并将其返回给前端客户端。然后前端客户端将根据图像URL从服务器获取它：  '
- en: '![Figure 7.1: Building a user model avatar diagram'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.1：构建用户模型头像图]'
- en: '](img/C15309_07_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/C15309_07_01.jpg](img/C15309_07_01.jpg)'
- en: 'Figure 7.1: Building a user model avatar diagram'
  id: totrans-16
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.1：构建用户模型头像图
- en: We are going to create a new endpoint, `http://localhost:5000/users/avatar`,
    that will take `PUT` requests. The reason we have designed it to accept `PUT`
    requests is that there should be only one avatar picture for each user. So, every
    time there is a client request, it should be either replacing an empty image with
    the new image for the first time, or it will be replacing the old image with a
    new one. This is a replacement action. In this case, we should use the HTTP verb,
    PUT.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的端点，`http://localhost:5000/users/avatar`，它将接受`PUT`请求。我们之所以设计它来接受`PUT`请求，是因为每个用户应该只有一张头像图片。所以，每次有客户端请求时，它应该要么是第一次用新图像替换空图像，要么是替换旧图像为新的。这是一个替换操作。在这种情况下，我们应该使用HTTP动词，PUT。
- en: Now, let's add the `avatar_image` attribute in our model. We will have to use
    Flask-Migrate to update the underlying database table.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在我们的模型中添加`avatar_image`属性。我们将不得不使用Flask-Migrate来更新底层的数据库表。
- en: 'Exercise 45: Adding the avatar_image Attribute to the User Model'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习45：向用户模型添加avatar_image属性
- en: 'In this exercise, we will work on changing the user model. First, we will create
    an additional attribute (`avatar_image`) in the user model. Then, we will reflect
    it in the database schema and use the Flask-Migrate Python package to create the
    corresponding field in the database table. Finally, we will confirm the change
    is successful by using pgAdmin. Let''s get started:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将修改用户模型。首先，我们将在用户模型中创建一个额外的属性（`avatar_image`）。然后，我们将它在数据库模式中反映出来，并使用
    Flask-Migrate Python 包在数据库表中创建相应的字段。最后，我们将使用 pgAdmin 确认更改是否成功。让我们开始吧：
- en: 'Add the `avatar_image` attribute to the user model. The code file is `models/user
    .py`:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `avatar_image` 属性添加到用户模型。代码文件是 `models/user .py`：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `avatar_image` attribute is designed to store the filename of the uploaded
    image. Due to this, it is a string with a length of `100`. The default is `None`.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`avatar_image` 属性被设计用来存储上传图片的文件名。因此，它是一个长度为 `100` 的字符串。默认值为 `None`。'
- en: 'Run the following command to generate the database migration script:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以生成数据库迁移脚本：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will see that a new column called `user.avatar_image` has been detected:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到检测到一个名为 `user.avatar_image` 的新列：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Check the content in `/migrations/versions/7aafe51af016_.py`, which is the
    database migration script that we generated in the previous step:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `/migrations/versions/7aafe51af016_.py` 中的内容，这是我们之前步骤中生成的数据库迁移脚本：
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'From its content, we can see that two functions have been generated in the
    script: `upgrade` and `downgrade`. The `upgrade` function is used to add the new
    `avatar_image` column to the database table, while the `downgrade` function is
    used to remove the `avatar_image` column so that it can go back to its original
    state.'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从其内容中，我们可以看到脚本中生成了两个函数：`upgrade` 和 `downgrade`。`upgrade` 函数用于将新的 `avatar_image`
    列添加到数据库表中，而 `downgrade` 函数用于移除 `avatar_image` 列，以便它可以恢复到原始状态。
- en: 'Run the following `flask db upgrade` command to update the database schema:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下 `flask db upgrade` 命令以更新数据库模式：
- en: '[PRE4]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You will see the following output:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '[PRE5]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Check the schema `change` in pgAdmin. *Right-click* on the `user` table and
    choose `Properties`. A new window will appear. Then, click the `Columns` tab to
    check the columns:![Figure 7.2: Checking all the columns in the Columns tab'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 pgAdmin 中检查 `schema change`。在 `user` 表上右键点击并选择 `属性`。将出现一个新窗口。然后，点击 `Columns`
    选项卡以检查列：![图 7.2：在 Columns 选项卡中检查所有列
- en: '](img/C15309_07_02.jpg)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C15309_07_02.jpg)'
- en: 'Figure 7.2: Checking all the columns in the Columns tab'
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.2：在 Columns 选项卡中检查所有列
- en: Here, we can see the new `avatar_image` column being added to the `user` table.
    Now, our Smilecook application is ready to take in the image path of the user
    avatar.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到新的 `avatar_image` 列被添加到 `user` 表中。现在，我们的 Smilecook 应用程序已准备好接收用户头像的图像路径。
- en: Flask-Uploads
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flask-Uploads
- en: We will be using the Flask-Uploads package to complete our image upload function.
    This is a very powerful package that simplifies most of the tedious coding for
    us. By simply calling a few methods provided by the package, it allows us to efficiently
    and flexibly develop the file upload function. Flask-Uploads can handle various
    common file types out of the box. What we need to define is the Set that classifies
    the types of uploaded files, such as `IMAGES`, `DOCUMENT`, `AUDIO`, and so on.
    Then, we simply need to set the destination of the uploaded files.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Flask-Uploads 包来完成我们的图像上传功能。这是一个非常强大的包，为我们简化了大多数繁琐的编码工作。通过简单地调用包提供的几个方法，它允许我们高效灵活地开发文件上传功能。Flask-Uploads
    可以直接处理各种常见的文件类型。我们需要定义的是分类上传文件类型的 Set，例如 `IMAGES`、`DOCUMENT`、`AUDIO` 等。然后，我们只需设置上传文件的目的地。
- en: Let's look at a few basic concepts and functions in Flask-Uploads before we
    implement them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实现它们之前，让我们看看 Flask-Uploads 中的几个基本概念和函数。
- en: Upload Sets
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上传集
- en: 'Before we upload any files, we need to define the `UploadSet`. An upload set
    is a single collection of files. Take `images` as an example; we can define the
    image upload set as follows, where `''images''` is the name of the upload set:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们上传任何文件之前，我们需要定义 `UploadSet`。上传集是一组单独的文件。以 `images` 为例；我们可以定义图像上传集如下，其中 `'images'`
    是上传集的名称：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once you have the `image_set`, you can use the `save` method to save the uploaded
    image from the incoming HTTP request, like so:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了 `image_set`，你可以使用 `save` 方法来保存从传入的 HTTP 请求上传的图片，如下所示：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'An upload set''s configuration also needs to be stored on an app. We can use
    the `configure_uploads` function from Flask-Uploads to do that:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上传集的配置也需要存储在应用中。我们可以使用 Flask-Uploads 的 `configure_uploads` 函数来完成此操作：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In addition, you can also use `patch_request_class` to restrict the maximum
    upload size of the uploaded file. In the next exercise, we will work on the image
    upload function together. The image user is going to upload their avatar picture.
    We will define the destination as `static/images/avatars`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以使用 `patch_request_class` 来限制上传文件的最大上传大小。在下一个练习中，我们将一起工作，开发图像上传功能。图像用户将上传他们的头像图片。我们将定义目标为
    `static/images/avatars`。
- en: 'Exercise 46: Implementing the User Avatar Upload Function'
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 46：实现用户头像上传功能
- en: 'In this exercise, we will start by installing the Flask-Uploads package to
    our virtual environment. Then, we will do some simple configurations and get to
    work on the image upload function development. By completing this exercise, we
    will see an image URL being returned to the client. Let''s get started:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将首先将 Flask-Uploads 包安装到我们的虚拟环境中。然后，我们将进行一些简单的配置，并开始开发图像上传功能。通过完成这个练习，我们将看到客户端返回的图像
    URL。让我们开始吧：
- en: 'Add the following line in `requirements.txt`:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `requirements.txt` 中添加以下行：
- en: '[PRE9]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the following command to install the Flask-Uploads package in the PyCharm
    console:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PyCharm 控制台中运行以下命令来安装 Flask-Uploads 包：
- en: '[PRE10]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You will see the following installation result:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将看到以下安装结果：
- en: '[PRE11]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Import `UploadSet` and `IMAGES` into `extensions.py`:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `UploadSet` 和 `IMAGES` 导入到 `extensions.py` 中：
- en: '[PRE12]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the same `extensions.py` file, define a set called `''images''` and an extension
    called `IMAGES`. This will cover the common image file extensions (`.jpg`, `.jpeg`,
    `.png`, and so on):'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的 `extensions.py` 文件中，定义一个名为 `'images'` 的集合和一个名为 `IMAGES` 的扩展。这将涵盖常见的图像文件扩展名（`.jpg`、`.jpeg`、`.png`
    等）：
- en: '[PRE13]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Set the image destination in `Config.py`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Config.py` 中设置图像目标：
- en: '[PRE14]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The `UPLOADED_IMAGES_DEST` attribute name is decided by the name of the upload
    set. Since we set the upload set name to be `'images'`, the attribute name here
    must be `UPLOADED_IMAGES_DEST`.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UPLOADED_IMAGES_DEST` 属性名称由上传集的名称决定。由于我们将上传集名称设置为 `''images''`，因此这里的属性名称必须是
    `UPLOADED_IMAGES_DEST`。'
- en: 'Import `configure_uploads`, `patch_request_class`, and `image_set` into `app.py`:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `configure_uploads`、`patch_request_class` 和 `image_set` 导入到 `app.py` 中：
- en: '[PRE15]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Using the `configure_uploads` function that we have just imported, pass in
    the `image_set` that we want to upload:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们刚刚导入的 `configure_uploads` 函数，传入我们想要上传的 `image_set`：
- en: '[PRE16]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Set the maximum file size allowed for uploads as 10 MB using `patch_request_class`.
    This step is important because, by default, there is no upload size limit:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `patch_request_class` 将允许上传的最大文件大小设置为 10 MB。这一步很重要，因为默认情况下，没有上传大小限制：
- en: '[PRE17]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Import the `url_for` function in `schemas/user.py` and add the `avatar_url`
    attribute and `dump_avatar_url` method under the `UserSchema` class:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `schemas/user.py` 中导入 `url_for` 函数，并在 `UserSchema` 类下添加 `avatar_url` 属性和 `dump_avatar_url`
    方法：
- en: '[PRE18]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `url_for` function is used to help generate the URL of the image file. The
    `dump_avatar_url` method is used to return the URL of the user avatar after serialization.
    If no image is being uploaded, we will simply return the URL of the default avatar.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `url_for` 函数来帮助生成图像文件的 URL。使用 `dump_avatar_url` 方法来返回序列化后的用户头像的 URL。如果没有上传图像，我们将直接返回默认头像的
    URL。
- en: 'Create a folder called `assets` under `static/images` and place the `default-avatar.jpg`
    image inside it. This image is going to be our default user avatar:![Figure 7.3:
    Folder structure after adding the image'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `static/images` 下创建一个名为 `assets` 的文件夹，并将 `default-avatar.jpg` 图像放入其中。这张图像将成为我们的默认用户头像：![图
    7.3：添加图像后的文件夹结构
- en: '](img/C15309_07_03.jpg)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C15309_07_03.jpg)'
- en: 'Figure 7.3: Folder structure after adding the image'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.3：添加图像后的文件夹结构
- en: Note
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: You can put any image you like in here. We have also provided a default avatar
    image in our sample code folder.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在这里放置任何喜欢的图像。我们还在我们的示例代码文件夹中提供了一个默认头像图像。
- en: 'Import the `uuid` extension, and `image_set` into `utils.py`. You will see
    how these modules/methods are used next:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `uuid` 扩展和 `image_set` 导入到 `utils.py` 中。您将在下面看到这些模块/方法的使用：
- en: '[PRE19]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the `save_image` function to `utils.py`:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `save_image` 函数添加到 `utils.py` 中：
- en: '[PRE20]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the `save_image` method, we used the `uuid` function to generate the filename
    for the uploaded image. We got the file extension from the uploaded image using
    the extension function from Flask-Uploads. Then, we saved the image using the
    `image_set.save` function; the saving destination is `static/images`. If we pass
    in `folder='avatar'` as the parameter, the destination will be `static/images/avatar`.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `save_image` 方法中，我们使用了 `uuid` 函数来生成上传图片的文件名。我们使用 Flask-Uploads 的扩展函数从上传的图片中获取文件扩展名。然后，我们使用
    `image_set.save` 函数保存图片；保存目的地是 `static/images`。如果我们传递 `folder='avatar'` 作为参数，目的地将是
    `static/images/avatar`。
- en: 'Import the `image_set` and `save_image` functions from `utils` into `resources/user.py`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `utils` 中导入 `image_set` 和 `save_image` 函数到 `resources/user.py`：
- en: '[PRE21]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add `user_avatar_schema` to `resources/user.py`. This schema is just to show
    the `avatar_url`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `user_avatar_schema` 添加到 `resources/user.py`。此模式只是为了显示 `avatar_url`：
- en: '[PRE22]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create the `UserAvatarUploadResource` class, in `resources/user.py`, and define
    the `put` method inside it:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `resources/user.py` 中创建 `UserAvatarUploadResource` 类，并在其中定义 `put` 方法：
- en: '[PRE23]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `@jwt_required` decorator before the `put` method means that login is required
    before this method is triggered. In the `put` method, we got the avatar image
    file from `request.files`. Then, we validated whether the image file exists and
    whether the file extension is permitted. If everything is okay, we will get back
    the user object and check whether an avatar already exists. If so, that will be
    removed before we replace it with our uploaded image.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `put` 方法之前的 `@jwt_required` 装饰器意味着在触发此方法之前需要登录。在 `put` 方法中，我们从 `request.files`
    获取头像图片文件。然后，我们验证了图片文件是否存在以及文件扩展名是否允许。如果一切正常，我们将获取用户对象并检查是否已存在头像。如果存在，我们将将其替换为上传的图片之前将其删除。
- en: 'Then, we used `save_image` to save the uploaded image. Once the image is saved,
    we will get the filename of the image and save it to `user.avatar_image`. Then,
    we used `user.save()` to save the update to the database:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用 `save_image` 来保存上传的图片。一旦图片保存，我们将获取图片的文件名并将其保存到 `user.avatar_image`。然后，我们使用
    `user.save()` 将更新保存到数据库中：
- en: '[PRE24]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Use `user_avatar_schema.dump(user).data` to return the image URL and the HTTP
    status code, **200 OK**:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `user_avatar_schema.dump(user).data` 返回图片 URL 和 HTTP 状态码，**200 OK**：
- en: '[PRE25]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Import the `UserAvatarUploadResource` class into `app.py`:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `UserAvatarUploadResource` 类导入到 `app.py`：
- en: '[PRE26]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Link the resource to the route, that is `/users/avatar in app.py`:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将资源链接到路由，即在 `app.py` 中的 `/users/avatar`：
- en: '[PRE27]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We have successfully created the user avatar image upload function in our Smilecook
    application. Now, we can upload an image to the user profile page. In the next
    exercise, we will test that using Postman.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在 Smilecook 应用程序中成功创建了用户头像图片上传功能。现在，我们可以在用户个人资料页面上传图片。在下一个练习中，我们将使用 Postman
    进行测试。
- en: 'Exercise 47: Testing the User Avatar Upload Function Using Postman'
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 47：使用 Postman 测试用户头像上传功能
- en: 'In the previous exercise, we finished developing the avatar uploading function.
    To make sure things are working as expected, we need to test the function from
    the client-side. We will be using Postman to send the client request, which will
    have the user avatar image in it. Let''s get started:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习中，我们完成了头像上传功能的开发。为了确保一切按预期工作，我们需要从客户端测试该功能。我们将使用 Postman 发送包含用户头像图片的客户端请求。让我们开始吧：
- en: 'First, log in to a user account. Now, click on the **Collections** tab and
    select the **POST Token** request. Then, click the **Send** button. The result
    can be seen in the following screenshot:![Figure 7.4: Sending the POST Token request'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，登录到一个用户账户。现在，点击 **收藏夹** 选项卡并选择 **POST Token** 请求。然后，点击 **发送** 按钮。结果可以在下面的屏幕截图中看到：![图
    7.4：发送 POST Token 请求](img/C15309_07_04.jpg)
- en: '](img/C15309_07_04.jpg)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C15309_07_04.jpg)'
- en: 'Figure 7.4: Sending the POST Token request'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.4：发送 POST Token 请求
- en: 'Next, we are going to use the `PUT` method to upload an avatar. Send an HTTP
    `PUT` request to the following URL: `http://localhost:5000/users/avatar`. Click
    on the `User` folder, and then create a new request.'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 `PUT` 方法上传头像。向以下 URL 发送 HTTP `PUT` 请求：`http://localhost:5000/users/avatar`。点击
    `用户` 文件夹，然后创建一个新的请求。
- en: Set the `UserAvatarUpload` and save it in the **User** folder.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `UserAvatarUpload` 设置保存到 **用户** 文件夹中。
- en: Select `PUT` as the HTTP method and type in `http://locaohost:5000/users/avatar`
    as the request URL.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `PUT` 作为 HTTP 方法，并在请求 URL 中输入 `http://locaohost:5000/users/avatar`。
- en: Now, select the `Authorization` into the `Bearer {token}` into the **VALUE**
    field, where the token is the access token we got in the previous step.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将 `Authorization` 中的 `Bearer {token}` 选择到 **值** 字段中，其中 token 是我们在上一步中获得的访问令牌。
- en: Select the **Body** tab. Then, select the **form-data** radio button and put
    "avatar" as the **KEY**.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**主体**选项卡。然后，选择**表单数据**单选按钮，并将“头像”作为**键**。
- en: Select **File** in the drop-down menu next to **Key** and select the image file
    to upload.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**键**旁边的下拉菜单中选择**文件**，然后选择要上传的图像文件。
- en: Now, click the `avatar_url` in the response, meaning that our image upload request
    was successful.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击响应中的`avatar_url`，这意味着我们的图像上传请求已成功。
- en: 'Clicking on `avatar_url` should bring you to the uploaded image. Check the
    path, `static/images/avatars`, in PyCharm. You should see the uploaded image there:![Figure
    7.6: Checking the uploaded image'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`avatar_url`应该会带您到上传的图像。检查路径，`static/images/avatars`，在PyCharm中。您应该在那里看到上传的图像：![图7.6：检查上传的图像
- en: '](img/C15309_07_06.jpg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/C15309_07_06.jpg)'
- en: 'Figure 7.6: Checking the uploaded image'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.6：检查上传的图像
- en: Send a request to get a user back by their `username`. Click on the **Collections**
    tab and select the **GET User** request.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`username`获取用户请求。点击**集合**选项卡并选择**GET用户**请求。
- en: 'Type `http://localhost:5000/users/john` into the URL field. You can replace
    the username, that is, **John**, with any username that is appropriate and then
    click the **Send** button. The result can be seen in the following screenshot:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在URL字段中输入`http://localhost:5000/users/john`。您可以将用户名，即**John**，替换为任何合适的用户名，然后点击**发送**按钮。结果可以在以下屏幕截图中看到：
- en: '![Figure 7.7: Checking the user avatar URL'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.7：检查用户头像URL'
- en: '](img/C15309_07_07.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/C15309_07_07.jpg)'
- en: 'Figure 7.7: Checking the user avatar URL'
  id: totrans-120
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.7：检查用户头像URL
- en: Here, we can see the new avatar URL attribute in the user.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们可以看到用户中的新头像URL属性。
- en: This testing exercise proves that the image upload function is working as expected.
    We can also look up the user by placing the username in the endpoint URL.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试练习证明图像上传功能按预期工作。我们还可以通过在端点URL中放置用户名来查找用户。
- en: Note
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: You can test two more aspects of the `avatar image upload` functions. The first
    one is to upload an image that's greater than 10 MB in size. The second is to
    test whether the default avatar image (that is, `default-avatar.jpg`) will be
    used for a user account that has no uploaded avatar.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以测试`头像图像上传`功能的两个方面。第一个是上传大于10 MB大小的图像。第二个是测试是否将默认头像图像（即`default-avatar.jpg`）用于没有上传头像的用户账户。
- en: Image Resizing and Compression
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像调整大小和压缩
- en: The size of the image will affect the speed of the website. Imagine looking
    at a picture that's 10 MB in size. If there are 10 pictures on one page, this
    website will be 100 MB in size, and so it will take a lot of time to get a page.
    Due to this, a good practice to reduce the size of the image and compress it so
    that it's around 500 KB in size instead.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图像的大小会影响网站的速度。想象一下看一个10 MB大小的图片。如果一页上有10张图片，这个网站的大小将是100 MB，因此加载一个页面将花费很多时间。因此，减少图像大小并压缩它，使其大小约为500
    KB是一个好的做法。
- en: In addition, we will also convert the image into JPEG (it has the `.JPG` file
    extension). JPEG is an image compression technology that can remove unnoticeable,
    insignificant details in an image, thus achieving a smaller file size. Besides,
    it is often regarded as acceptable to have a lower image quality for web use.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将图像转换为JPEG格式（它具有`.JPG`文件扩展名）。JPEG是一种图像压缩技术，可以去除图像中不明显、不重要的细节，从而实现更小的文件大小。此外，对于网络使用，通常认为可以接受较低的图像质量。
- en: In our Smilecook application, we will convert all our uploaded images into JPG
    format and compress them. We will do this through the Pillow package.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Smilecook应用程序中，我们将把所有上传的图像转换为JPG格式并压缩它们。我们将通过Pillow包来完成这项工作。
- en: Note
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: We cannot have a transparent image in JPEG format. If we save an image with
    the background removed as a JPEG, the background will become white, instead of
    transparent. The other two commonly used image formats, PNG and GIF. These two
    image formats will support transparency in images.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: JPEG格式中不能有透明图像。如果我们保存一个去除背景的JPEG图像，背景将变成白色，而不是透明的。其他两种常用的图像格式，PNG和GIF。这两种图像格式将支持图像的透明度。
- en: In our Smilecook application, however, we won't be displaying a transparent
    image, so using JPG images will be good enough here.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们的Smilecook应用程序中，我们不会显示透明图像，因此使用JPG图像在这里就足够了。
- en: Introduction to Pillow
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pillow简介
- en: Pillow, previously known as the `Image`. We can use `Image.open` to create an
    object from an `image` file. We can then get the image dimension in pixels by
    using the attribute `size`. We can also find out the color mode of the image by
    using the attribute mode.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Pillow，之前被称为`Image`。我们可以使用`Image.open`从图像文件创建一个对象。然后，我们可以通过使用属性`size`来获取图像的像素尺寸。我们还可以通过使用属性`mode`来找出图像的颜色模式。
- en: 'Some common color modes you should expect to see include `L` for black and
    white, `RGB` for red-green-blue, and `CMYK` for cyan-magenta-yellow-black:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到一些常见的颜色模式，包括`L`代表黑白，`RGB`代表红绿蓝，以及`CMYK`代表青色-品红色-黄色-黑色：
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If we want to change the color mode of the picture to RGB, use the `convert`
    function. We usually change the color mode to ensure the color accuracy of our
    images. RGB is the most commonly used color mode for computer monitors:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要将图片的颜色模式更改为RGB，可以使用`convert`函数。我们通常更改颜色模式以确保图像的颜色准确性。RGB是计算机显示器上最常用的颜色模式：
- en: '[PRE29]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If we want to resize an image so that it has smaller dimensions, we should use
    the `thumbnail` method. This method can maintain the aspect ratio of the image,
    and at the same time make sure that each side of the image is less than our defined
    limit.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要调整图像大小以使其具有更小的尺寸，我们应该使用`thumbnail`方法。此方法可以保持图像的宽高比，同时确保图像的每一边都小于我们定义的限制。
- en: 'As an example, the resultant image''s sides will be less than `1600` px, while
    keeping the aspect ratio intact:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，结果图像的边长将小于`1600`像素，同时保持宽高比不变：
- en: '[PRE30]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'When we save our changes using the Pillow package, we can pass in a `quality`
    parameter. This is done to specify how much JPEG compression we want. The quality
    can range from 1 to 100, with 1 being the worst and 95 being the best. We should
    avoid putting in a value higher than 95 because that means almost no compression.
    The default quality value is 75:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用Pillow包保存更改时，我们可以传递一个`quality`参数。这样做是为了指定我们想要的JPEG压缩程度。质量值范围从1到100，1是最差的，95是最佳的。我们应该避免使用高于95的值，因为这几乎意味着没有压缩。默认质量值是75：
- en: '[PRE31]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Let's complete an exercise in order to implement image compression.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们完成一个练习来实现图像压缩。
- en: 'Exercise 48: Implementing Image Compression in Our Smilecook Application'
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习48：在我们的Smilecook应用程序中实现图像压缩
- en: 'Now that we''ve learned about the theory and the tools we can use to perform
    image compression, let''s apply that to our Smilecook application. We would like
    to compress the user''s avatar. We will be using the Pillow package to do this.
    Let''s get started:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了理论和我们可以使用的工具来执行图像压缩，让我们将其应用到我们的Smilecook应用程序中。我们希望压缩用户的头像。我们将使用Pillow包来完成这项工作。让我们开始吧：
- en: 'Add the `Pillow` package to `requirements.txt`:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Pillow`包添加到`requirements.txt`中：
- en: '[PRE32]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Install the `Pillow` package by running the `pip install` command, as follows:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`pip install`命令安装`Pillow`包，如下所示：
- en: '[PRE33]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You should see the following installation result after running the preceding
    command:'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行前面的命令后，你应该看到以下安装结果：
- en: '[PRE34]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Import the necessary package and module into `utils.py`:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将必要的包和模块导入到`utils.py`中：
- en: '[PRE35]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In `utils.py`, define the `compress_image` function, which takes the filename
    and `folder` as parameters.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`utils.py`中定义`compress_image`函数，该函数接受文件名和`folder`作为参数。
- en: 'First, we will use `image_set.path(filename=filename, folder=folder)` to get
    the actual image file''s location. Then, by using `Image.open(file_path)`, we
    will create the `image` object from the image file:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们将使用`image_set.path(filename=filename, folder=folder)`来获取实际图像文件的路径。然后，通过使用`Image.open(file_path)`，我们将从图像文件创建`image`对象：
- en: '[PRE36]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Change the color mode to `RGB` and resize it so that each side is no bigger
    than `1600` px:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将颜色模式更改为`RGB`，并调整大小以确保每一边都不超过`1600`像素：
- en: '[PRE37]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Generate the new filename and path for our compressed image:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的压缩图像生成新的文件名和路径：
- en: '[PRE38]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Save the compressed image with `quality = 85`:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`quality = 85`保存压缩后的图像：
- en: '[PRE39]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Use `os.stat(file_path)` to get the size in bytes. By doing this, we will have
    the original size for a before and after comparison in our testing:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`os.stat(file_path)`来获取字节数。通过这样做，我们将在测试中有一个原始大小和压缩后的比较：
- en: '[PRE40]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Note
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The `os.stat` method is a Python method that returns basic folder/file information
    (for example, owner ID, group owner ID, and file size).
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`os.stat`方法是一个Python方法，它返回基本文件夹/文件信息（例如，所有者ID，组所有者ID和文件大小）。'
- en: 'Remove the original image and then return the compressed image filename by
    using the following code:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除原始图像，然后使用以下代码返回压缩后的图像文件名：
- en: '[PRE41]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Finally, in the `save_image` function, under `utils.py`, call the `compress_image`
    function right after the image is saved:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 `utils.py` 中的 `save_image` 函数中，在图像保存后立即调用 `compress_image` 函数：
- en: '[PRE42]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Here, we have created our compress_image function. The function just needs to
    know where the image file is, and it will compress the image for us.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经创建了我们的 compress_image 函数。该函数只需要知道图像文件的位置，它就会为我们压缩图像。
- en: In the next exercise, we will test the image compression function.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将测试图像压缩功能。
- en: 'Exercise 49: Testing the Image Compression Function'
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 49：测试图像压缩功能
- en: 'So far, we have developed an image compression function that can compress the
    avatar that was uploaded by the user. In this exercise, we will test and see how
    the image compression function does. Let''s get started:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经开发了一个可以压缩用户上传的头像的图像压缩功能。在这个练习中，我们将测试并查看图像压缩功能的表现。让我们开始吧：
- en: First, we are going to use the `PUT` method to upload an avatar. We will send
    an HTTP `http://localhost:5000/users/avatar`. Click on **PUT UserAvatarUpload**
    and select the **Body** tab.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将使用 `PUT` 方法上传头像。我们将发送一个 HTTP 请求到 `http://localhost:5000/users/avatar`。点击
    **PUT UserAvatarUpload** 并选择 **Body** 选项卡。
- en: 'Select a large image file to upload and click the **Send** button. The result
    can be seen in the following screenshot:![Figure 7.8: Uploading an avatar using
    the PUT method'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个大的图片文件进行上传，然后点击 **Send** 按钮。结果可以在下面的屏幕截图中查看：![图 7.8：使用 PUT 方法上传头像
- en: '](img/C15309_07_08.jpg)'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 15309_07_08.jpg]'
- en: 'Figure 7.8: Uploading an avatar using the PUT method'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.8：使用 PUT 方法上传头像
- en: 'From the application log in PyCharm, we can see that the original size of the
    uploaded image was 7.6 MB; it is reduced to 618 KB after compression:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 PyCharm 的应用程序日志中，我们可以看到上传的图像原始大小为 7.6 MB；压缩后减少到 618 KB：
- en: '![Figure 7.9: Image size after compression'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.9：压缩后的图片大小'
- en: '](img/C15309_07_09.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 15309_07_09.jpg]'
- en: 'Figure 7.9: Image size after compression'
  id: totrans-182
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.9：压缩后的图片大小
- en: By doing this, we can see that the image compression function that we implemented
    previously works. Now, the image size has been significantly reduced. In the next
    activity, we will implement the recipe cover image upload function.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们可以看到我们之前实现的图像压缩功能是有效的。现在，图像大小已经显著减少。在下一个活动中，我们将实现食谱封面图像上传功能。
- en: 'Activity 11: Implementing the Recipe Cover Image Upload Function'
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动 11：实现食谱封面图像上传功能
- en: 'So far, we have learned how to develop the image upload and compression function.
    In this activity, we are going to work on the recipe cover image upload function
    for the Smilecook application. We want to make our recipe more attractive by providing
    a cover image for it. Similar to the user avatar, only one cover image is allowed
    per recipe. Follow these steps to complete this activity:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何开发图像上传和压缩功能。在这个活动中，我们将为 Smilecook 应用程序开发食谱封面图像上传功能。我们希望通过提供封面图像来使我们的食谱更具吸引力。与用户头像类似，每个食谱只允许有一个封面图像。按照以下步骤完成此活动：
- en: Add the `cover_image` attribute to the user model in `models/recipe.py`.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `models/recipe.py` 中将 `cover_image` 属性添加到用户模型中。
- en: Update the corresponding DB schema using the `flask db migrate` command.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `flask db migrate` 命令更新相应的 DB 架构。
- en: Create the `recipe_cover_schema` to show the `cover_url` in the HTTP response.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `recipe_cover_schema` 以在 HTTP 响应中显示 `cover_url`。
- en: Create the `RecipeCoverUploadResource` for the recipe cover image upload function.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为食谱封面图像上传功能创建 `RecipeCoverUploadResource`。
- en: Note
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to this activity can be found on page 323.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以在第 323 页找到。
- en: 'Activity 12: Testing the Image Upload Function'
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动 12：测试图像上传功能
- en: 'In this activity, we are going to test the recipe cover image uploading function.
    First, we will create a new recipe, upload a recipe cover image, and verify whether
    it has been uploaded by fetching the recipe back. Follow these steps to complete
    this activity:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们将测试食谱封面图像上传功能。首先，我们将创建一个新的食谱，上传一个食谱封面图像，并通过获取食谱来验证它是否已上传。按照以下步骤完成此活动：
- en: Log in to the Smilecook user account using Postman.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Postman 登录到 Smilecook 用户账户。
- en: Send a client request to our API to create a recipe.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向我们的 API 发送客户端请求以创建一个食谱。
- en: Upload the recipe images.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传食谱图像。
- en: Check whether the image is compressed in PyCharm.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PyCharm 中检查图像是否已压缩。
- en: Check the uploaded image in `static/images/recipes`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查上传的图像在 `static/images/recipes` 中。
- en: Get the recipe back and confirm that the `cover_url` attribute is populated.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恢复食谱并确认 `cover_url` 属性已填充。
- en: Note
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to this activity can be found on page 328.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本活动的解决方案可在第328页找到。
- en: Summary
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to use Flask-Uploads to upload images for
    our user avatar and recipe cover. Since our maximum uploaded image size is 10
    MB, this allows users to upload huge images, thereby slowing down the performance
    of the website. To address this performance issue, we introduced the concept of
    image resizing and compression. From here, we worked on developing the function
    using the Pillow package.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Flask-Uploads上传用户头像和食谱封面图像。由于我们的最大上传图像大小为10 MB，这使得用户可以上传大图像，从而降低网站的性能。为了解决这个性能问题，我们引入了图像缩放和压缩的概念。从这里，我们开始使用Pillow包开发该功能。
- en: Apart from learning about new techniques regarding image manipulation, we also
    revisited things we learned in the previous chapters, such as updating the database
    schema using Flask-Migrate and displaying the URL of the uploaded image during
    deserialization using marshmallow's schema.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 除了学习关于图像处理的新技术外，我们还回顾了之前章节中学到的内容，例如使用Flask-Migrate更新数据库模式，以及在反序列化过程中使用marshmallow的schema显示上传图像的URL。
- en: We have completed most of the key functionality of our Smilecook recipe sharing
    platform. In the next chapter, we will develop the recipe searching and pagination
    functions.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了Smilecook食谱分享平台的大部分关键功能。在下一章中，我们将开发食谱搜索和分页功能。
