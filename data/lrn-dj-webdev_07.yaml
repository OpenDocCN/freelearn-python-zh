- en: Chapter 7. Following and Commenting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。关注和评论
- en: The main idea behind our application is to provide a platform for users to share
    their thoughts via tweets. Just letting the user create a new tweet is only one
    part of it, and the application is said to be incomplete if users are not able
    to interact with the existing tweet. In this chapter, we will do the other part,
    which is enabling users to follow a particular user and comment on an existing
    tweet. You will also learn several new Django features while working through it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的主要思想是为用户提供一个通过推文分享他们的想法的平台。让用户创建新推文只是其中的一部分，如果用户无法与现有推文进行交互，则应用程序将被认为是不完整的。在本章中，我们将完成另一部分，即使用户能够关注特定用户并评论现有推文。在此过程中，您还将学习到几个新的Django功能。
- en: 'In this chapter, you will learn about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: Letting users follow another user
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让用户关注另一个用户
- en: Displaying the most followed user
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示最受关注的用户
- en: Letting users follow another user
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让用户关注另一个用户
- en: So far, our users are able to discover new tweets by browsing hashtags and user
    pages. Let's provide a method for users to follow another user so that they can
    see, on their individual homepages, the aggregated tweets from all users they
    are following. Let's also enable users to comment on a new tweet.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的用户可以通过浏览标签和用户页面发现新的推文。让我们为用户提供一种方法来关注另一个用户，这样他们就可以在他们各自的主页上看到来自他们关注的所有用户的聚合推文。让我们还使用户能够评论新的推文。
- en: We will also create a page where users can list popular users by the number
    of followers. This feature is important for our application because it will change
    the main page from a basic welcome page to a frequently updated list of users,
    where users will be able to find trending users and their interesting tweets.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建一个页面，用户可以按关注者数量列出受欢迎的用户。这个功能对我们的应用程序很重要，因为它将把主页从一个基本的欢迎页面变成一个经常更新的用户列表，用户可以在其中找到热门用户和他们有趣的推文。
- en: 'Our strategy for implementing this feature consists of the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现此功能的策略如下：
- en: Creating a data model to store a user and their followers. This model will keep
    track of various pieces of information related to the user.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个数据模型来存储用户及其关注者。这个模型将跟踪与用户相关的各种信息。
- en: Giving each user a follow button next to their title. We will also create a
    view that shows counts, such as the number of tweets a user has made and their
    follower count. This involves a considerable amount of work, but the results will
    be worth it and we will learn a lot of useful information during the process.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在他们的标题旁边给每个用户一个关注按钮。我们还将创建一个视图，显示计数，比如用户发表的推文数量和他们的关注者数量。这需要大量的工作，但结果将是值得的，我们将在这个过程中学到很多有用的信息。
- en: Let's get started!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: At first, what we are going to add is a retweet count to every tweet and to
    keep track of all the tweets voted up by the user. To implement this, we need
    to create a new `UserFollowers` data model.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要做的是为每个推文添加一个转发计数，并跟踪用户投票赞成的所有推文。为了实现这一点，我们需要创建一个新的`UserFollowers`数据模型。
- en: The UserFollowers data model
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UserFollowers数据模型
- en: 'When a user is followed by another user, we need to store the following information
    in the database:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个用户被另一个用户关注时，我们需要在数据库中存储以下信息：
- en: The date on which the user was followed. We need this in order to display the
    user who has the highest number of followers over a certain period of time.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户被关注的日期。我们需要这个信息来显示在一段时间内拥有最多关注者的用户。
- en: The number of followers a user has.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户拥有的关注者数量。
- en: The list of users who are following our user.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关注我们用户的用户列表。
- en: This is needed to prevent users from following the same user twice.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了防止用户两次关注同一个用户。
- en: 'For this purpose, we will create a new data model called `UserFollowers`. Open
    `user_profile/model.py` and add the following class to it:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将创建一个名为`UserFollowers`的新数据模型。打开`user_profile/model.py`并将以下类添加到其中：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This data model utilizes some important features, so we will go through its
    fields one by one. The user field is a foreign key that refers back to the user
    that is being followed. We want it to be unique so that the same user cannot be
    followed more than once.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据模型利用了一些重要的特性，所以我们将逐个介绍它的字段。用户字段是一个外键，指回被关注的用户。我们希望它是唯一的，这样同一个用户就不能被多次关注。
- en: The date field is of the type `models.DateTimeField`. As its name suggests,
    you can use this field to store a date/time value. The argument `auto_now_add`
    tells Django to automatically set this field to the current date/time when an
    object of this data model is first created.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 日期字段的类型是`models.DateTimeField`。顾名思义，您可以使用此字段存储日期/时间值。参数`auto_now_add`告诉Django在首次创建此数据模型的对象时自动将此字段设置为当前日期/时间。
- en: The count field is of the type `models.IntegerField`. This field holds an integer
    value. By using the `default=1` parameter with this field, we tell Django to set
    the field's value to 1 when an object of this data model is first created.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 计数字段的类型是`models.IntegerField`。该字段保存一个整数值。通过在该字段使用`default=1`参数，我们告诉Django在首次创建此数据模型的对象时将字段的值设置为1。
- en: The following `ManyToManyField` parameter contains the list of users who followed
    this user.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的`ManyToManyField`参数包含了关注此用户的用户列表。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Here, the `related_name='followers'` parameter must be given as the second parameter.
    Both user and follower point to the same class `user`, which if distinguished
    by related name, can give an error such as this, Accessor for field `user` clashes
    with related m2m field `User.userfollowers_set`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`related_name='followers'`参数必须作为第二个参数给出。用户和关注者都指向相同的类`user`，如果通过相关名称进行区分，可能会出现错误，例如，访问字段`user`的访问器与相关的m2m字段`User.userfollowers_set`冲突。
- en: 'After entering the data model code into `user_profile/models.py` file, run
    the following command to create its corresponding tables in the database:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据模型代码输入到`user_profile/models.py`文件后，运行以下命令在数据库中创建相应的表：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With this, we can store all the information that we need to maintain followers.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们就可以存储所有我们需要维护关注者的信息。
- en: Next, we are going to to create a view in which users can follow other users
    by clicking on the follow button next to their profile name.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个视图，用户可以通过单击其个人资料名称旁边的关注按钮来关注其他用户。
- en: Modify the user profile page accordingly if the visited user is not the same
    who has already followed you, then there should be a button to follow the user.
    If the user is already being followed, the same button should allow unfollowing.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果访问的用户不是已经关注你的用户，那么应该有一个按钮来关注该用户。如果用户已经被关注，同样的按钮应该允许取消关注。
- en: Let us edit the existing user profile, `profile.html`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编辑现有的用户个人资料，`profile.html`。
- en: Adding a user icon against the username, we can use the following Bootstrap
    glyphicons. This is the set of icons that is shipped with the default Bootstrap.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对用户名添加用户图标，我们可以使用以下Bootstrap图标。这是默认Bootstrap附带的图标集。
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will also design a new tweet post textbox on the profile page. The updated
    `user_profile.html` file is as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在个人资料页面上设计一个新的推文发布文本框。更新后的`user_profile.html`文件如下：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Update the `forms.py` file to render a new form:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`forms.py`文件以呈现一个新表单：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The updated UI for the form will look like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表单的更新UI将如下所示：
- en: '![The UserFollowers data model](img/image00305.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![用户关注者数据模型](img/image00305.jpeg)'
- en: To add the functionality to follow a user, we need to first create another user.
    We will follow the same method we used before, that is, via Django Administrator.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加关注用户的功能，我们首先需要创建另一个用户。我们将遵循之前使用的相同方法，即通过Django管理员。
- en: One very important thing we have been postponing is user login and registration.
    The follow functionality can't be used without it. We will implement Django login
    first, and then we will move to the follow functionality.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在推迟的一个非常重要的事情是用户登录和注册。没有它，关注功能无法使用。我们将首先实现Django登录，然后再转向关注功能。
- en: The user login model
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户登录模型
- en: 'To implement user login, we need to add default URLs for login and registration.
    We will add the following URL patterns in the `urls.py` file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现用户登录，我们需要为登录和注册添加默认URL。我们将在`urls.py`文件中添加以下URL模式：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, our `urls.py` file will look like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`urls.py`文件将如下所示：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Both the login and logout views have default template names, `registration/login.html`
    and `registration/logged_out.html` respectively. Because these views are specific
    to the user and not our reusable application, we''ll create a new template/registration
    directory inside the `mytweets` project using the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 登录和注销视图都有默认模板名称，分别为`registration/login.html`和`registration/logged_out.html`。因为这些视图是特定于用户而不是我们可重用的应用程序，我们将使用以下命令在`mytweets`项目内创建一个新的模板/registration目录：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, create a simple login and logout page. Use the following code snippet
    in the `login.html` file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个简单的登录和注销页面。在`login.html`文件中使用以下代码片段：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Use the following code snippet in the `logout.html` file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`logout.html`文件中使用以下代码片段：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We have just enabled Django's default authentication system. As this does basic
    authorization, it has its predefined URLs for certain redirections. For example,
    we already know that `/login` will take a user to the `/registration/login.html`
    page. Similarly, once the user is authenticated, they are redirected to the URL
    `accounts/profile`. In our project, we have a custom URL for each user. We will
    update these entries in the `settings.py` file
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚启用了Django的默认身份验证系统。由于这是基本授权，它具有特定重定向的预定义URL。例如，我们已经知道`/login`将把用户带到`/registration/login.html`页面。同样，一旦用户经过身份验证，他们将被重定向到URL`accounts/profile`。在我们的项目中，每个用户都有一个自定义的URL。我们将在`settings.py`文件中更新这些条目
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To keep things simple, we will just create a view, which will take an authenticated
    user to the profile, which will then redirect the user to their profile page.
    Basically, we will construct the parameter of the username after valid authentication;
    in other words, `/profile` | `/profile/<username>` will be generated in a separate
    class view. For this, we also need to create a URL entry as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持简单，我们将只创建一个视图，该视图将带着经过身份验证的用户到个人资料，然后将用户重定向到他们的个人资料页面。基本上，我们将在有效身份验证后构造用户名的参数；换句话说，将在单独的类视图中生成`/profile`
    | `/profile/<username>`。为此，我们还需要创建以下URL条目：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And `Profile` redirect class with a `get()` method as:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以及`Profile`重定向类和`get()`方法如下：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is it. Now every logged-in user will be redirected to his profile page.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在每个已登录用户都将被重定向到他的个人资料页面。
- en: Now, coming back to the original problem, when a user visits another user's
    profile, they will have the option to follow this user's profile; this means the
    follower will get updates about all the posted tweets on their home page.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到最初的问题，当用户访问另一个用户的个人资料时，他们将有选择关注该用户的个人资料；这意味着关注者将在他们的主页上获取所有发布的推文的更新。
- en: Once following a user, the follower will have the option to unfollow the user,
    and if the user visits their own profile, they should see nothing at all.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦关注了用户，关注者将有选项取消关注该用户，如果用户访问自己的个人资料，他们应该根本看不到任何东西。
- en: 'The updated code for the user profile is as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 用户个人资料的更新代码如下：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The following code checks whether the user is viewing their own profile; if
    so, they will not be shown the follow button. It also checks whether the user
    logged in is following the profile they've visited; if so, the unfollow button
    will be shown, and if not, the follow button will be shown.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码检查用户是否正在查看自己的个人资料；如果是，他们将不会看到关注按钮。它还检查已登录的用户是否正在关注他们访问的个人资料；如果是，将显示取消关注按钮，如果不是，将显示关注按钮。
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To render the updated view, `class Profile()` has also been updated as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了呈现更新后的视图，`class Profile()`也已更新如下：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following code checks whether the logged-in user is a follower of the user
    whose profile they are visiting:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码检查已登录用户是否是正在访问的用户的关注者：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Adding or removing the follower
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加或删除关注者
- en: 'Let''s create a `post()` method for the profile to add or remove followers
    based on parameters:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为个人资料创建一个`post()`方法，根据参数添加或删除关注者：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is a simple function that checks the parameters to add or remove users
    to or from the followers list.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的函数，用于检查参数以将用户添加到或从关注者列表中删除。
- en: 'The follow button part of the `profile.html` file should be updated with the
    class names so that we can trigger the JavaScript event functionalism, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`profile.html`文件中的关注按钮部分应更新为类名，以便我们可以触发JavaScript事件功能，如下所示：'
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, let us create the `profile.js` file which has the `post()` method
    whenever the follow/unfollow button is clicked:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们创建`profile.js`文件，其中包含`post()`方法，每当单击关注/取消关注按钮时都会调用该方法：
- en: 'Create a JavaScript file named as `profile.js` and add the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`profile.js`的JavaScript文件，并添加以下代码：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Don''t forget to add this JavaScript file in the `profile.html` file at the
    bottom of the page, as shown in the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在页面底部的`profile.html`文件中添加此JavaScript文件，如下面的代码所示：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Displaying the most followed user
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示最受关注的用户
- en: After we have implemented the feature for following users, we can move ahead
    with a new page design where we will list the most followed user. The logic of
    this page can be reused to design the page that has the highest number of comments.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实现了关注用户的功能之后，我们可以继续进行新页面设计，我们将在其中列出最受关注的用户。这个页面的逻辑可以被重用来设计具有最多评论数量的页面。
- en: 'The basic components for this page design are:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面设计的基本组件包括：
- en: '**View**: The `users.html` file'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：`users.html`文件'
- en: '**Controller**: The most followed user'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：最受关注的用户'
- en: URL mapping
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL映射
- en: 'Add the following content in the `view.html` file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在`view.html`文件中添加以下内容：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following class in the controller:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器中添加以下类：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This following line orders the followers in the order of who has the most followers:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下一行按照拥有最多关注者的顺序对关注者进行排序：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We need to update the URL mapping as well, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要更新URL映射，如下所示：
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'That''s all! We are done with a page where all the users are listed by follower
    count. If the count gets too high, you can also limit it using this basic Python
    list syntax:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了！我们已经完成了一个页面，其中所有用户都按关注者数量列出。如果数量太高，您还可以使用这种基本的Python列表语法进行限制：
- en: '[PRE25]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This will list only the top 10 users.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这将只列出前10名用户。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned to create login, logout, and registration page
    templates. We also learned how to allow the following of another user and displaying
    the most followed users.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建登录、注销和注册页面模板。我们还学会了如何允许关注另一个用户并显示最受关注的用户。
- en: The next chapter switches to new topics. Sooner or later, you will need an administration
    interface for your application to manage your data models. Fortunately, Django
    comes with a full-fledged administration interface ready to be used. We will learn
    how to enable and customize this interface in the next chapter, so keep reading!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将转到新的主题。迟早，您将需要一个管理界面来管理应用程序的数据模型。幸运的是，Django带有一个成熟的管理界面，可以立即使用。我们将在下一章中学习如何启用和自定义此界面，所以请继续阅读！
