- en: System Modeling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统建模
- en: The goal of any **system modeling** process is to define and document a conceptual
    model of some aspect of a system, usually focusing individually on one (or many)
    specific faces of that system. System models may be defined in a formal architecture
    description language, such as **Unified Modeling Language** (**UML**), and can,
    in those cases, get very detailed – down to the minimum required property and
    method members of classes. Details at that level are generally fluid – or at least
    not finalized – until the requirements analysis processes in Agile methodologies,
    and will be discussed in more detail in [Chapter 4](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=28&action=edit),
    *Methodologies, Paradigms, and Practices*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 任何**系统建模**过程的目标是定义和记录系统某个方面的概念模型，通常分别关注系统的一个（或多个）特定方面。系统模型可以用形式化的架构描述语言来定义，例如**统一建模语言**（**UML**），在这些情况下，可以非常详细
    - 直到类的最小所需属性和方法成员。在敏捷方法论的需求分析过程中，这个层面的细节通常是流动的 - 或者至少不是最终确定的，并且将在[第4章](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=28&action=edit)，*方法、范例和实践*中更详细地讨论。
- en: 'At a higher, less granular level, there are still several system-model views
    that are of particular interest going into the development process, particularly
    with respect to the bigger picture:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在更高、更少细粒度的层面上，有几个系统模型视图在开发过程中特别引人关注，特别是关于更大的整体情况：
- en: Architecture, both logical and physical
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构，逻辑和物理
- en: Business processes and rules
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务流程和规则
- en: Data structure and flow
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据结构和流动
- en: Interprocess communication
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程间通信
- en: System scope/scale
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统范围/规模
- en: Architecture, both logical and physical
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构，逻辑和物理
- en: The goal of both logical and physical architecture specifications is to define
    and document the logical and physical components of a system, respectively, in
    order to provide clarity around how those component elements relate to one another.
    The artifacts resulting from either effort could be text documentation, or diagrams,
    and both have their own advantages and drawbacks.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑和物理架构规范的目标是分别定义和记录系统的逻辑和物理组件，以便清楚地阐明这些组件元素之间的关系。任何一种努力产生的成果都可以是文本文档或图表，它们都有各自的优点和缺点。
- en: Text documentation is usually quicker to produce, but unless there is some sort
    of architectural documentation standard that can be applied, the formats can (and
    probably will) vary from one system team to another, at a minimum. That sort of
    variance can make it difficult for the resulting artifacts to be understandable
    outside the team that it originated with. If there is not a lot of movement of
    developers between teams, or a significant influx of new developers to teams,
    that may not be a significant concern. It can also be difficult to ensure that
    all of the moving parts or the connections between them are fully accounted for.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 文本文档通常更容易产生，但除非有一些可以应用的架构文档标准，否则格式可能会因系统团队而异。这种差异可能会使得最终产物难以在原始团队之外被理解。如果开发人员在团队之间没有太多流动，或者新开发人员大量涌入团队，这可能并不是一个重大问题。还很难确保所有移动部件或它们之间的连接都得到充分考虑。
- en: The primary advantage to diagrams is the relative ease with which they can be
    understood. If the diagram has obvious indicators, or symbols that unambiguously
    indicate, for example, that one component is a database service and another is
    an application, then the difference between them becomes obvious at a glance.
    Diagrams also have the advantage of being more easily understandable to non-technical
    audiences.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图表的主要优点是它们相对容易理解。如果图表具有明显的指示器或符号，可以明确指示，例如，一个组件是数据库服务，另一个是应用程序，那么它们之间的区别一目了然。图表也具有更容易为非技术观众理解的优势。
- en: In both cases, text-based or diagram-based documents are, obviously, most useful
    if they are well-constructed, and provide an accurate view or model of the system.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，基于文本或基于图表的文档显然是最有用的，如果它们构造良好，并提供了系统的准确视图或模型。
- en: Logical architecture
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逻辑架构
- en: 'Development is often going to be more concerned with the logical architecture
    of a system than with the physical. Provided that whatever mechanisms needed are
    in place for the actual code in a system to be deployed to, live on, connect to,
    and use the various physical components that relate to the logical components,
    and that any physical architecture constraints are accounted for, little more
    information is generally needed, so where any given component lives just isn''t
    as important from that perspective. That often means that a physical architecture
    breakdown is at best a nice-to-have item, or maybe a should-have at most. That
    also assumes that the structure in question isn''t something that''s so commonplace
    that a need for it to be documented surfaced. There are, for example, any number
    of systems in the wild that follow the same common three-tier structure, with
    a request-response cycle that progresses as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 开发通常更关注系统的逻辑架构而不是物理架构。只要系统中实际代码的部署、连接和使用各种与逻辑组件相关的物理组件的机制已经就位，并且考虑到了任何物理架构约束，通常不需要更多的信息，因此从这个角度来看，任何给定组件的位置并不那么重要。这通常意味着物理架构的详细分解最多只是一个好东西，或者最多只是一个应该有的东西。这也假设所讨论的结构不是某种如此常见以至于需要对其进行文档化的东西。例如，在野外有许多遵循相同常见的三层结构的系统，请求-响应循环如下进行：
- en: A user makes a request through the **Presentation Tier**
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户通过**表示层**发出请求
- en: That request is handed off to the **Application Tier**
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该请求被转交给**应用层**
- en: The application retrieves any data needed from the **Data Tier**, perhaps doing
    some manipulation or aggregation of it in the process
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序从**数据层**检索所需的任何数据，可能在此过程中进行一些操作或聚合
- en: The **Application Tier** generates a response and hands it back to the **Presentation
    Tier**
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**应用层** 生成响应并将其返回给**表示层**'
- en: The **Presentation Tier** returns that response to the user
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**表示层** 将该响应返回给用户'
- en: 'Diagrammed, that structure might look as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以图表形式，该结构可能如下所示：
- en: '![](assets/6bf5d867-714f-423b-86e6-86f3427d264d.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6bf5d867-714f-423b-86e6-86f3427d264d.png)'
- en: 'This three-tier architecture is particularly common in web applications, where:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这种三层架构在Web应用程序中特别常见，其中：
- en: The **Presentation Tier** is the web-server (with the web browser being no more
    than a remote output-rendering component)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表示层** 是Web服务器（Web浏览器只是远程输出渲染组件）'
- en: The **Application Tier** is code called by, and generating responses to, the
    web server, written in whatever language and/or framework
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用层** 是由Web服务器调用的代码，并生成对Web服务器的响应，使用任何语言和/或框架编写'
- en: The **Data Tier** is any of several back-end data-store variants that persist
    application data between requests
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据层** 是多种后端数据存储变体之一，用于在请求之间保留应用程序数据'
- en: 'Consider, as an example, the following logical architecture for the refueling-tracking
    system concept mentioned earlier. It serves as a good example of this three-tier
    architecture as it applies to a web application, with some specifically identified
    components:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑前面提到的加油跟踪系统概念的以下逻辑架构。它作为一个很好的例子，说明了这种三层架构在Web应用程序中的应用，其中一些特别标识的组件：
- en: '![](assets/03eb615f-6e25-4ae3-acbd-cb81fc883c2d.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/03eb615f-6e25-4ae3-acbd-cb81fc883c2d.png)'
- en: Physical architecture
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理架构
- en: 'The primary difference between logical and physical architecture documentation
    is that, while logical architecture''s concerns end with identifying functional
    elements of the system, physical architecture takes an additional step, specifying
    actual devices that those functional elements execute on. Individual items identified
    in logical architecture may reside on common devices, physically. Really, the
    only limitations are the performance and capabilities of the physical device.
    This means that these different physical architectures are all logically identical;
    they are all valid ways of implementing the same three-tier web application''s
    logical architecture:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑架构文档和物理架构文档之间的主要区别在于，逻辑架构的关注点在于识别系统的功能元素，而物理架构则需要额外的步骤，指定这些功能元素执行的实际设备。在逻辑架构中识别的个别项目可能在物理上驻留在共同的设备上。实际上，唯一的限制是物理设备的性能和能力。这意味着这些不同的物理架构在逻辑上都是相同的；它们都是实现相同三层Web应用程序逻辑架构的有效方式：
- en: '![](assets/8803dcbf-ff7d-4045-b717-1a54e1e56cc5.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8803dcbf-ff7d-4045-b717-1a54e1e56cc5.png)'
- en: With the current enthusiasm for virtualization, serverless, and cloud-based
    technologies in the industry, provided by public and private cloud technologies
    such as Amazon Web Services and VMware, whether a physical architecture specification
    really is a physical architecture often becomes something of a semantics quibble.
    While, in some cases, there may not be a single, identifiable physical computer
    the way there would be if there was a dedicated piece of server hardware, in many
    cases that distinction is irrelevant. If it acts like a distinct physical server,
    it can be treated as one for the purposes of defining a physical architecture.
    In that case, from a documentation standpoint, there is no knowledge value lost
    in treating a virtual server like a real one.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 随着行业对虚拟化、无服务器和基于云的技术的热情，由亚马逊网络服务和VMware等公共和私有云技术提供，物理架构规范是否真的是物理架构往往成为一种语义争论。在某些情况下，可能没有单一可识别的物理计算机，就像如果有一台专用的服务器硬件一样，但在许多情况下，这种区别是无关紧要的。如果它的行为像一个独立的物理服务器，那么在定义物理架构的目的上，它可以被视为一个物理服务器。在这种情况下，从文档的角度来看，将虚拟服务器视为真实服务器并不会丢失任何知识价值。
- en: 'When considering many serverless elements in a system, several can still be
    represented as a physical architecture element as well – so long as it acts like
    a real device from the perspective of how it interacts with the other elements,
    the representation is adequate. That is, given a hypothetical web application
    that lives completely in some public cloud, where:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑系统中的许多无服务器元素时，只要它在与其他元素交互的角度上表现得像一个真实设备，那么它仍然可以被表示为一个物理架构元素。也就是说，假设一个假设的Web应用程序完全存在于某个公共云中，其中：
- en: That cloud allows serverless functions to be defined
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该云允许定义无服务器函数
- en: 'Functions will be defined for processing the following, with back-end databases
    for each of those entities also living in the cloud:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将为处理以下内容定义函数，并为每个实体的后端数据库也存储在云中：
- en: Customers
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顾客
- en: Products
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品
- en: Orders
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单
- en: 'A corresponding physical architecture might look something as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的物理架构可能如下所示：
- en: '![](assets/051270e3-a92f-4765-a662-1d6319a1bce1.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/051270e3-a92f-4765-a662-1d6319a1bce1.png)'
- en: 'An example real-world implementation of this serverless architecture can be
    implemented in all three of the big-name public clouds: **Amazon Web Services**
    (**AWS**), Azure, and **Google Cloud Platform** (**GCP**). Each of these public
    cloud platforms provides virtual server-instances that could serve the website
    and maybe databases. The processor servers in this structure could use serverless
    functions (AWS Lambda, or Cloud Functions in Azure and GCP) to drive the interactions
    between the website and the databases as the website sends events to the functions
    in the processor elements.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种无服务器架构的实际实现示例可以在三个大型公共云中实现：亚马逊网络服务（AWS）、Azure和谷歌云平台（GCP）。这些公共云平台都提供了可以为网站提供服务的虚拟服务器实例，也许还可以提供数据库。该结构中的处理器服务器可以使用无服务器函数（AWS
    Lambda，或Azure和GCP中的Cloud Functions）来驱动网站和数据库之间的交互，因为网站向处理器元素中的函数发送事件。
- en: Collectively, logical and physical architecture specifications provide development
    with at least some of the information needed to be able to interact with non-application
    tiers. Even if specific credentials will be required but are not supplied in the
    documentation, knowing, for example, what kind of database drives the data tier
    of a system defines how that data tier will be accessed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，逻辑和物理架构规范至少提供了开发与非应用程序层进行交互所需的一些信息。即使文档中需要特定的凭据但未提供，例如，知道系统的数据层使用何种类型的数据库定义了数据层将如何被访问。
- en: Use cases (business processes and rules)
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例（业务流程和规则）
- en: In any system, the most important thing is whether it's doing what it's supposed
    to do for all of the use cases that it's supposed to support. Code has to be written
    for each of those use cases, and each use case corresponds to one or more business
    processes or rules, so it's only logical that each of those use cases needs to
    be defined and documented to whatever extent is appropriate for the development
    process. As with the logical and physical architecture, it's possible to execute
    those definitions as either text or some sort of diagram, and those approaches
    have the same advantages and drawbacks that were noted before.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何系统中，最重要的是它是否按照所有它应该支持的用例来执行。代码必须为每个用例编写，并且每个用例对应于一个或多个业务流程或规则，因此每个用例都需要根据开发过程的适当程度来定义和记录。与逻辑和物理架构一样，可以将这些定义执行为文本或某种图表，这些方法具有之前提到的相同优点和缺点。
- en: 'The Unified Modeling Language (UML) provides a high-level diagramming standard
    for use cases, useful mostly for capturing the relationship between specific types
    of users (actors, in UML''s terminology) and the processes that they are expected
    to interact with. That''s a good start, and may even be sufficient all by itself
    if the process itself is very simple, already extensively documented, or known
    across the development team. The use case diagram for the Refuel-Tracker application
    concept that was discussed earlier in *Use Cases* section is, so far, very simple,
    and harks back to the system goals that were established for it in the [Chapter
    2](dd61b582-20a9-4a97-b73e-6c66ee2c0a3b.xhtml), *The Software Development Life
    Cycle*. This time, though, we''ll attach some names to them for reference in the
    diagram:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 统一建模语言（UML）为用例提供了一个高级的图表标准，主要用于捕捉特定类型的用户（在UML的术语中称为操作者）与他们预期与之交互的流程之间的关系。这是一个很好的开始，如果流程本身非常简单，已经广泛记录，或者在开发团队中已知，那么它甚至可能足够。在*用例*部分中讨论的Refuel-Tracker应用程序概念的用例图目前非常简单，并且回溯到在[第2章](dd61b582-20a9-4a97-b73e-6c66ee2c0a3b.xhtml)中为其建立的系统目标。不过，这一次，我们将为它们附上一些名称以供图表参考：
- en: '**Refuel**: Various users can log refueling''s, providing the current odometer
    reading and the quantity of fuel involved:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加油**：各种用户可以记录加油，提供当前里程表读数和涉及的燃油数量：'
- en: Delivery drivers (at local fuel-stations)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 送货司机（在当地加油站）
- en: Fleet maintenance staff (at the main office, where there is a company fuel station)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 车队维护人员（在总部，那里有公司加油站）
- en: '**Maintenance Alert**: Fleet maintenance staff will be alerted when a truck''s
    calculated fuel efficiency drops to lower than 90% of its average, so that the
    truck can be scheduled for an examination.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护警报**：当卡车的计算燃油效率降低到其平均值的90％以下时，车队维护人员将收到警报，以便安排检查卡车。'
- en: '**Route Review Alert**: Office staff will also be alerted when a truck''s calculated
    fuel efficiency drops to lower than 90% of its average, so that the truck''s delivery
    rounds can be examined.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路线审查警报**：办公室工作人员也会在卡车的计算燃油效率降低到其平均值的90％以下时收到警报，以便检查卡车的送货路线。'
- en: 'Those three use cases are simple to diagram, if that''s the preferred documentation.
    The following list of processes is also a viable option. In some ways it''s actually
    better than a standard diagram, since it provides some business rules of the system
    that a standard use case diagram doesn''t capture:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个用例如果是首选文档，则很容易绘制图表。以下的流程列表也是一个可行的选择。在某些方面，它实际上比标准图表更好，因为它提供了一些标准用例图无法捕捉的系统业务规则：
- en: '![](assets/a95d85eb-a0fc-428b-9282-864d3936a381.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a95d85eb-a0fc-428b-9282-864d3936a381.png)'
- en: 'Even if the diagram were modified to include some of the missing information
    (what a refueling is, and what the rules around the two `«trigger»` items are),
    it still only tells part of the story: who is expected (or allowed) to use specific
    process functionality. The balances, the actual processes underneath the use cases,
    are still unknown, but need to be exposed so that code can be written around them
    to actually make them work. This also can be handled either as plain text of some
    sort, or through a diagram. Looking at the Refuel process that''s been identified,
    it breaks down to something as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 即使修改图表以包括一些缺失的信息（加油是什么，以及两个`«trigger»`项目周围的规则），它仍然只是讲述故事的一部分：谁预期（或允许）使用特定的流程功能。余额，用例下面的实际流程，仍然是未知的，但需要暴露出来，以便编写代码来使它们真正起作用。这也可以通过某种纯文本或图表来处理。查看已识别的加油流程，它可以分解为以下内容：
- en: 'A **Driver** or **Fleet Tech** logs a refuel of a truck, providing:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**司机**或**车队技术人员**记录卡车的加油，提供：'
- en: The current odometer reading
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前里程表读数
- en: The amount of fuel used to fill the truck
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于填充卡车的燃油量
- en: Those values are stored (probably in an application database, though that may
    not be part of the actual requirements) with an association to the truck (how
    that gets specified has yet to be determined).
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些值被存储（可能在应用程序数据库中，尽管这可能不是实际要求的一部分），并与卡车关联（如何指定尚未确定）。
- en: 'The application calculates the fuel efficiency for the refueling: (current
    odometer reading minus previous odometer reading) ÷ quantity of fuel.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该应用程序计算加油的燃油效率：（当前里程表读数减去上次里程表读数）÷燃油数量。
- en: If the efficiency is less than or equal to 90% of the most recent efficiency
    value for that truck, the **Route Review **alert is triggered .
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果效率小于或等于该卡车最近效率值的90％，则触发**路线审查**警报。
- en: If the efficiency is less than or equal to 90% of at least half of the previous
    four efficiency values for that truck, the **Maintenance** alert is triggered.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果效率小于或等于该卡车前四个效率值中至少一半的90％，则触发**维护**警报。
- en: 'Whether a diagram (such as the following flowchart) would add any value to
    the documentation will likely depend on the process being described, and on team
    or even personal preferences. These five steps, as a simple flowchart, are simple
    enough that going any further than a text description of them is probably not
    going to add any value, but more complex processes might benefit from a diagram:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 流程图（如下面的流程图）是否会为文档增加价值可能取决于所描述的流程，以及团队甚至个人的偏好。这五个步骤作为一个简单的流程图，简单到除了它们的文本描述之外可能不会增加任何价值，但更复杂的流程可能会受益于流程图：
- en: '![](assets/3dff51f3-a3b3-42a3-afa6-2ade0b581c8e.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3dff51f3-a3b3-42a3-afa6-2ade0b581c8e.png)'
- en: From a developer's perspective, use cases map out to one-to-many functions or
    methods that will have to be implemented, and if there are process flows documented,
    those explain how they will execute at runtime.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发人员的角度来看，用例映射到一个或多个必须实现的函数或方法，如果有流程流程记录，那些解释了它们将如何在运行时执行。
- en: Data structure and flow
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据结构和流程
- en: Between the two of them, basic use-case and business-process documentation may
    provide enough information to make the structure and flow of the data through
    the system obvious, or at least transparent enough that development won't need
    any additional information. The Refuel process we've been looking at probably
    falls into that category, but let's see what a data-flow diagram for it might
    look like anyway.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两者之间，基本的用例和业务流程文档可能提供足够的信息，以使数据在系统中的结构和流程变得明显，或者至少透明到开发不需要任何额外信息。我们一直在研究的加油流程可能属于这一类，但是让我们看看它的数据流图可能会是什么样子。
- en: 'The data that''s coming in (the **Refuel Data** in the flowchart) was defined
    earlier in *Use Cases* section, and at least some of the related data flow was
    also noted, but having some names to associate with those values, and knowing
    what types of value they are, will be helpful:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 流程图中的数据（流程图中的**加油数据**）在*用例*部分中已经定义，并且至少有一些相关数据流也已经记录，但是将一些名称与这些值相关联，并知道它们是什么类型的值将是有帮助的：
- en: '**`odometer`**: The current odometer reading (probably an `<int>` value)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`odometer`**：当前里程表读数（可能是一个`<int>`值）'
- en: '**`fuel_quantity`**: The amount of fuel used to fill the truck (probably a
    `<float>` value)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`fuel_quantity`**：用于加满卡车的燃料量（可能是一个`<float>`值）'
- en: '**`truck_id`**: The truck being refueled (a unique identifier for the record
    of the truck in the application''s database – to keep things simple, we''ll assume
    it''s also **`<int>`**)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`truck_id`**：正在加油的卡车（应用程序数据库中卡车记录的唯一标识符 - 为了简单起见，我们假设它也是`<int>`）'
- en: 'During the process, a refuel-efficiency value is also being created that might
    need to be passed along to the **Route Review** alert and/or **Maintenance** alert
    processes:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在过程中，还可能需要传递一个加油效率值给**路线审查**警报和/或**维护**警报流程：
- en: '`re`: The calculated refuel-efficiency value, a `<float>` value'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`re`：计算得到的加油效率值，一个`<float>`值'
- en: 'In this very simple case, data elements are simply being noted, by name and
    type. The diagram indicates where they start being available, or when they are
    explicitly passed to a process – otherwise they are assumed to be available all
    the way through. Then the data elements are just added to the previous flowchart
    diagram:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个非常简单的情况下，数据元素只是按名称和类型进行了记录。图表指示它们何时开始可用，或者何时它们被明确传递给一个流程 - 否则它们被假定为整个过程中都可用。然后数据元素只是添加到先前的流程图中：
- en: '![](assets/2446f7f8-69e0-4ace-8d31-93ab616c908b.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2446f7f8-69e0-4ace-8d31-93ab616c908b.png)'
- en: In a more complicated system, something that has more complex data structures,
    more data structures in general, more processes that use those, or any of several
    combinations of those factors, a source and destination oriented flow-diagram
    may be a better option – something that doesn't really pay attention to the inner
    workings of the processes, just to what data is needed, and where it comes from.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个更复杂的系统中，具有更复杂数据结构、更多数据结构、更多使用这些数据结构的流程，或者这些因素的几种组合之一，源和目的地导向的流程图可能是更好的选择
    - 一些不关注流程内部工作，只关注需要什么数据以及它来自哪里的东西。
- en: '![](assets/59b99061-b4a3-4385-ba94-dc97c25245ad.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/59b99061-b4a3-4385-ba94-dc97c25245ad.png)'
- en: Data-flow documentation/diagrams tell developers what data is expected, where
    it's originating from, and where/whether it's going to live after the processes
    are done with it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 数据流文档/图告诉开发人员期望的数据在哪里产生，以及在流程完成后它将在哪里/是否存储。
- en: Interprocess communication
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程间通信
- en: It's very common for different processes to communicate with each other. At
    the most basic level, that communication might take the form of something as simple
    as one function or method calling another from somewhere in the code they share.
    As processes scale outward, though, especially if they are distributed across
    separate physical or virtual devices, those communication chains will often get
    more complex themselves, sometimes even requiring dedicated communications protocols.
    Similar communication-process complexities can also surface, even in relatively
    uncomplicated systems, if there are interprocess dependencies that need to be
    accounted for.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的流程之间进行通信是非常常见的。在最基本的层面上，这种通信可能采取的形式可能只是一个函数或方法从它们共享的代码中的某个地方调用另一个。然而，随着流程的扩展，特别是如果它们分布在不同的物理或虚拟设备上，这些通信链通常会变得更加复杂，有时甚至需要专门的通信协议。类似的通信流程复杂性也可能出现在相对简单的系统中，如果存在需要考虑的进程间依赖关系。
- en: 'In pretty much any scenario where the communication mechanism between two processes
    is more complicated than something at the level of methods calling other methods,
    or perhaps a method or process writing data that another process will pick up
    and run with the next time it''s executed, it''s worth documenting how those communications
    will work. If the basic unit of communication between processes is thought of
    as a message, then, at a minimum, documenting the following will generally provide
    a solid starting point for writing the code that implements those interprocess
    communication mechanisms:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在几乎任何通信机制比方法调用其他方法更复杂的情况下，或者可能是一个方法或进程写入数据，另一个进程将在下次执行时接收并运行，值得记录这些通信将如何工作。如果将进程之间的基本通信单元视为消息，那么通常至少记录以下内容将为编写实现这些进程间通信机制的代码提供一个坚实的起点：
- en: '**What the message contains**: The specific data expected:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息包含的内容：期望的具体数据：
- en: What is required in the message
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息中需要的内容
- en: What additional/optional data might be present
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能存在的额外/可选数据
- en: '**How the message is formatted**: If the message is serialized in some fashion,
    converted to JSON, YAML, or XML, for example, that needs to be noted'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息的格式：如果消息以某种方式序列化，转换为JSON、YAML或XML，例如，需要注意
- en: '**How the message is transmitted and received**: It could be queued up on a
    database, transmitted directly over some network protocol, or use a dedicated
    message-queue system such as RabbitMQ, AWS SQS, or Google Cloud Platform''s Publish/Subscribe'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息如何传输和接收：它可以在数据库中排队，直接通过某些网络协议传输，或者使用专用的消息队列系统，如RabbitMQ、AWS SQS或Google Cloud
    Platform的发布/订阅
- en: '**What kinds of constraint apply to the message protocol**: For example, most
    message-queuing systems will guarantee the delivery of any given queued message
    once, but not more than once.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息协议适用的约束类型：例如，大多数消息队列系统将保证每个排队的消息传递一次，但不会超过一次。
- en: '**How messages are managed on the receiving end**: In some distributed message-queue
    systems – certain variants of AWS SQS, for example – the message has to be actively
    deleted from the queue, lest it be received more than once, and potentially acted
    upon more than once. Others, such as RabbitMQ, automatically delete messages as
    they are retrieved. In most other cases, the message only lives as long as it
    takes to reach its destination and be received.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息在接收端如何管理：在某些分布式消息队列系统中，例如AWS SQS的某些变体，消息必须从队列中主动删除，以免被接收多次，并且可能被多次执行。而其他系统，如RabbitMQ，在检索消息时会自动删除消息。在大多数其他情况下，消息只存在于到达目的地并被接收的时间。
- en: Interprocess-communication diagramming can usually build on the logical architecture
    and use-case diagrams. One provides the logical components that are the endpoints
    of the communication process, the other identifies what processes need to communicate
    with each other. Documented data flow may also contribute to the bigger picture,
    and would be worth looking at from the perspective of identifying any communication
    paths that might've been missed elsewhere.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 进程间通信图通常可以建立在逻辑架构和用例图的基础上。一个提供了通信过程的逻辑组件，另一个确定了需要相互通信的进程。记录的数据流也可能有助于整体情况，并且值得从识别可能在其他地方被忽略的任何通信路径的角度来看。
- en: 'The refuel tracker, for example:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，加油追踪器：
- en: Can access the database for the existing route-scheduling application, which
    provides a dashboard for the route schedulers.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以访问现有的路线调度应用程序的数据库，该应用程序为路线调度员提供了仪表板。
- en: The maintenance alert functionality can leverage a web service call belonging
    to an off-the-shelf fleet-maintenance system that was purchased, which has its
    own dashboard used by the fleet technicians.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护警报功能可以利用属于已购买的现成车队维护系统的网络服务调用，该系统有自己的仪表板，由车队技术人员使用。
- en: 'The relevant messaging involved for the route-review and maintenance-alert
    processes is very simple under these circumstances:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，路线审查和维护警报流程所涉及的相关消息非常简单：
- en: An update in the route-scheduling database, perhaps flagging the last route
    that the truck was scheduled for as an inefficient route, or maybe some sort of
    notification that'll pop up on the dashboard to alert a route scheduler to review
    the route
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路线调度数据库的更新，也许标记了卡车上次安排的路线为低效路线，或者可能是一些通知，会在仪表板上弹出，提醒路线调度员审查路线。
- en: A JSON-over-REST API call made to the maintenance-tracking system
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向维护跟踪系统发出的JSON-over-REST API调用
- en: 'That messaging would fit on a simple variant of the use case diagram already
    shown:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 该消息将适用于已显示的用例图的简单变体：
- en: '![](assets/0b9c039c-8ce0-4428-a96c-730bb0a21e5b.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0b9c039c-8ce0-4428-a96c-730bb0a21e5b.png)'
- en: 'The order-processing, fulfillment, and shipping system might use RabbitMQ messaging
    to deal with order-fulfillment, passing entire orders and simple inventory checks
    from the products datasource to determine whether an order can be fulfilled. It
    might also use any of several web service API calls to manage order shipment,
    pushing the shipping information back into the order over a similar web service
    call. That message flow (omitting the data structure for brevity) might then look
    as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 订单处理、履行和运输系统可能使用RabbitMQ消息传递来处理订单履行，从产品数据源传递整个订单和简单的库存检查，以确定订单是否可以履行。它可能还使用几个网络服务API调用来管理订单装运，通过类似的网络服务调用将装运信息推回订单。消息流（为简洁起见省略数据结构）可能如下所示：
- en: '![](assets/45f88b14-86a1-4d42-a450-de97abc15157.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/45f88b14-86a1-4d42-a450-de97abc15157.png)'
- en: The main takeaway from a development focus on Interprocess Communication is
    how the data identified earlier gets from one point in the system to another.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发重点在进程间通信的主要收获是，之前确定的数据如何从系统的一点传输到另一点。
- en: System scope and scale
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统范围和规模
- en: 'If all of these items are documented and/or diagrammed, if it''s done thoroughly
    and accurately, they will, collectively, provide a holistic view of the total
    scope of a system:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有这些项目都被记录和/或绘制出来，如果做得彻底和准确，它们将共同提供一个系统的整体范围的全面视图：
- en: Every system component role should be identified in the Logical Architecture
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个系统组件的角色应该在逻辑架构中被确定。
- en: Where each of those components actually resides should be identified in the
    Physical Architecture
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个组件实际所在的位置应该在物理架构中被确定。
- en: Every use case (and hopefully every business process) that the system is supposed
    to implement should be identified in the use-case documentation, and any of the
    underlying processes that aren't painfully obvious should have at least a rough
    happy-path breakdown
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统应该实现的每个用例（以及希望每个业务流程）都应该在用例文档中被确定，并且任何不那么明显的基础流程都应该至少有一个粗略的顺利路径分解。
- en: Every chunk of data that moves from one place or process to another should be
    identified in the Data Flow, with enough detail to collate a fairly complete picture
    of the structure of that data as well
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一个地方或过程移动到另一个地方的每个数据块都应该在数据流中被确定，具有足够的细节来整合出该数据结构的相当完整的图像。
- en: The formats and protocols that govern how that data move about, at least for
    any part of the system that involves more than just passing system objects from
    one function or method in the code-base to another, should be identified
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少对于系统中涉及更多的不仅仅是从代码库中的一个功能或方法传递系统对象的部分，应该确定管理数据移动的格式和协议。
- en: A fair idea of where and how those data are persisted should be discernible
    from the Logical, and maybe Physical, architectures
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些数据的存储位置和方式应该可以从逻辑和可能的物理架构中看出来。
- en: The only significant missing piece that hasn't been noted is the scale of the
    system. If the scope is how many types of object are being worked with or are
    moving around in the system, the scale would be how many of those objects exist,
    either at rest (stored in a database, for example) or actively at any given time.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一显著缺失的部分是系统的规模。如果范围是系统中正在使用或正在移动的对象类型的数量，那么规模将是这些对象的实际数量，无论是静止的（例如存储在数据库中）还是在任何给定时间内活跃的。
- en: 'Scale can be hard to anticipate with any accuracy, depending on the context
    of the system. Systems such as the hypothetical refueling tracker and order-processing/fulfillment/shipping
    system that have been used for illustration are generally going to be more predictable:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 规模可能很难准确预测，这取决于系统的上下文。例如，用于说明的假设加油跟踪器和订单处理/履行/发货系统通常会更可预测：
- en: '**The number of users is going to be reasonably predictable**: All employees
    and all customers pretty much covers the maximum user base for both of those'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户数量将是相当可预测的**：所有员工和所有客户基本上覆盖了这两者的最大用户群。'
- en: '**The number of objects being used is also going to be reasonably predictable**:
    The delivery company only has so many trucks, after all, and the company running
    the order system, though probably less predictable, will still have a fair idea
    of how many orders are in flight at most, and at typical levels'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用的对象数量也将是相当可预测的**：毕竟，运送公司只有那么多卡车，而订单系统的公司，虽然可能不太可预测，但仍然会对大多数订单的数量有一个大致的了解。'
- en: When a system or application enters a user space such as the web, though, there
    is potential for radical variation, even over very short periods of time. In either
    case, some sort of planning around expected and maximum/worst-case scale should
    be undertaken. That planning may have significant design and implementation effects –
    fetching and working with a dozen records at a time out of a few hundred or thousand
    total records doesn't require nearly the attention to efficiency that those same
    twelve records out of several million or billion would, just as a basic example – on
    how code might be written. If planning for even potential massive surges in use
    involves being able to scale out to multiple servers, or load-balance requests,
    that might also have an effect on the code, though probably at a higher, interprocess-communication
    level.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统或应用程序进入用户空间，比如网络时，甚至在很短的时间内也有潜在的巨大变化。在任何情况下，都应该进行一些关于预期和最大/最坏情况规模的规划。这种规划可能对设计和实施产生重大影响——例如，一次从几百或几千条记录中获取和处理十几条记录并不需要像从几百万或几十亿条记录中获取这些记录那样需要关注效率，这只是一个基本的例子——关于代码可能如何编写。如果为了应对潜在的大规模使用而进行规划，需要能够扩展到多个服务器，或者负载均衡请求，这可能也会对代码产生影响，尽管可能在更高的进程间通信层面。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: All of the components, data, and documentation from this chapter, as well as
    the previous two chapters, are potentially available in any software engineering
    effort. How much is actually is available probably depends in part on how much
    discipline is involved in the predevelopment processes, even if there isn't anything
    formal associated with it. That discipline might be present because of a singularly
    talented project manager.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有组件、数据和文档，以及前两章的内容，都可能在任何软件工程项目中使用。实际可用的数量可能部分取决于在前期开发过程中涉及多少纪律，即使没有任何正式的关联。这种纪律可能是因为有一个非常有才能的项目经理。
- en: Another contributor to when, how much, and what quality of data is available
    is often the development methodology in play through the life of a project, system,
    or team. Several of the more common methodologies manage these predevelopment
    efforts in significantly different manners, and their treatment can make a substantial
    difference.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对数据的可用性的时间、数量和质量的另一个影响因素通常是在项目、系统或团队的整个生命周期中采用的开发方法。一些更常见的方法在管理这些前期开发工作方面的方式有着显著不同，它们的处理可能会产生重大差异。
