- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: More Possibilities with Plugins
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件带来的更多可能性
- en: Any IDE worth its salt is extensible via a plugin architecture. The big names
    from Microsoft, Eclipse, and JetBrains support plugins as do the smaller, free,
    and open source IDE projects such as Geany and Ninja IDE. Even vim, which is as
    bare bones as it gets given it has no GUI, has a plethora of plugins available
    that allow you to customize your experience beyond the capabilities of the shipped
    product. In the case of JetBrains IDEs, the plugin architecture is at the heart
    of everything they build.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 任何值得拥有的 IDE 都可以通过插件架构进行扩展。来自 Microsoft、Eclipse 和 JetBrains 的大牌支持插件，同样，来自 Geany
    和 Ninja IDE 等较小、免费和开源的 IDE 项目也支持插件。即使是没有任何 GUI 的 vim，也有大量的插件可供选择，这些插件允许你超越随产品提供的功能来自定义你的体验。在
    JetBrains IDE 的案例中，插件架构是他们构建一切的核心。
- en: Consider that JetBrains started with IntelliJ and from that, built a dozen or
    so specialty IDEs. The reason this was possible is that their architecture is
    based on plugins. PyCharm Professional includes all the core functionality of
    two other IDEs, WebStorm and DataGrip, because those features are simply sets
    of plugins.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到 JetBrains 是从 IntelliJ 开始，并在此基础上构建了十几个左右的专业 IDE。之所以能够做到这一点，是因为它们的架构基于插件。PyCharm
    Professional 包含了其他两个 IDE（WebStorm 和 DataGrip）的所有核心功能，因为这些功能仅仅是插件集合。
- en: 'In this chapter, we’re going to discuss some important plugins both from JetBrains
    and from third-party developers. By the end of this chapter, you will know the
    following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论一些来自 JetBrains 和第三方开发者的重要插件。到本章结束时，你将了解以下内容：
- en: How to leverage JetBrains remote development features that allow you to work
    on your local laptop while leveraging a remote environment such as a virtual machine,
    workstation, or server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何利用 JetBrains 的远程开发功能，允许你在本地笔记本电脑上工作，同时利用远程环境，如虚拟机、工作站或服务器
- en: How to work collaboratively with JetBrains *Code* *With Me*
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 JetBrains *Code* *With Me* 进行协作工作
- en: How to work with Docker using the JetBrains Docker plugin
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 JetBrains Docker 插件与 Docker 一起工作
- en: How to leverage development infrastructure as code using HashiCorp Vagrant within
    PyCharm
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 PyCharm 中使用 HashiCorp Vagrant 利用代码化开发基础设施
- en: I’ll also cover some smaller, quality-of-life plugins including themes, specialized
    highlighters, additional languages, and of course, the Black code formatter
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我还将介绍一些较小的、提升生活质量的插件，包括主题、专业高亮显示、额外语言，当然还有 Black 代码格式化器。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In order to proceed through this chapter, and indeed the rest of the book,
    you will need the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续阅读本章，以及本书的其余部分，你需要以下内容：
- en: An installed and working copy of PyCharm. Installation was covered in [*Chapter
    2*](B19644_02.xhtml#_idTextAnchor028)*, Installation and Configuration*, if are
    jumping into the middle of the book.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并运行 PyCharm 的副本。安装过程在[*第二章*](B19644_02.xhtml#_idTextAnchor028)*，安装和配置*中已有介绍，如果你是在书的中间部分开始阅读。
- en: Many of the sections in this chapter require connecting to services on the internet.
    A high-speed connection or a lot of patience is required for some of the demonstrations.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的许多部分都需要连接到互联网上的服务。对于某些演示，需要高速连接或大量耐心。
- en: For the section on remote development, you’ll need a remote computer accessible
    via SSH and running a Linux operating system. This can be a physical machine or
    a virtual machine running via a cloud provider. I only cover connecting to a remote.
    I won’t go into a deep dive on setting up a Linux computer or virtual machine
    to serve as a remote.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于远程开发部分，你需要一台可以通过 SSH 访问并运行 Linux 操作系统的远程计算机。这可以是一台物理机器，也可以是通过云服务提供商运行的虚拟机。我只介绍如何连接到远程计算机。我不会深入介绍设置
    Linux 计算机或虚拟机作为远程服务器的过程。
- en: For the section on Docker, I’ll be using Docker Desktop. You can find the installation
    instructions for your computer’s operating system at [https://www.docker.com/products/docker-desktop/](https://www.docker.com/products/docker-desktop/).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Docker 部分，我将使用 Docker Desktop。你可以在[https://www.docker.com/products/docker-desktop/](https://www.docker.com/products/docker-desktop/)找到适用于你计算机操作系统的安装说明。
- en: This book’s example source code from GitHub. We covered cloning the code in
    [*Chapter 2*](B19644_02.xhtml#_idTextAnchor028)*, Installation and Configuration*.
    You’ll find this chapter’s relevant code at [https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-15](https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-15).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书从 GitHub 提供的示例源代码。我们在 [*第 2 章*](B19644_02.xhtml#_idTextAnchor028) *安装和配置*
    中介绍了代码克隆。你可以在 [https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-15](https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-15)
    找到本章的相关代码。
- en: Bundled plugins and JetBrains Marketplace
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包插件和 JetBrains 市场插件
- en: There have been several cases throughout the book where I pointed out useful
    plugins. I just couldn’t wait, and the plugins I showed you were either highly
    relevant to the particular chapter in play or just really cool and exciting. In
    the interest of being a responsible PyCharm mentor, I will collect myself, contain
    my enthusiasm (as much as I can), and pretend that you skipped immediately to
    this chapter, which might just be the best chapter in the book. Or not, you decide.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我已经指出了一些有用的插件。我实在等不及了，向你展示的插件要么与正在讨论的特定章节高度相关，要么真的很酷、很吸引人。为了成为一个负责任的 PyCharm
    指导者，我会控制自己的情绪（尽可能做到），假装你直接跳到了这个章节，这可能是本书中最好的章节。或者不是，由你决定。
- en: 'A great many features throughout JetBrains IDE products are built as plugins.
    You’re going to encounter two types of plugins: plugins made by JetBrains, and
    third-party plugins available in JetBrains Marketplace. Many plugins made by JetBrains
    are bundled in the various IDEs they make, but some have to be added or activated.
    Let’s start by exploring the **Plugins** panel available in the IDE’s settings.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JetBrains IDE 产品中，许多功能都是作为插件构建的。你将遇到两种类型的插件：由 JetBrains 制作的插件和可在 JetBrains
    市场中获取的第三方插件。许多由 JetBrains 制作的插件都包含在他们制作的各个 IDE 中，但有些需要添加或激活。让我们首先探索 IDE 设置中可用的
    **插件** 面板。
- en: The plugins window
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件窗口
- en: There are several ways to get to the **Plugins** window. Perhaps the simplest
    is to just close whatever project you might have open in PyCharm, which gives
    you the window we started with 15 chapters ago in *Figure 15**.1*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以进入 **插件** 窗口。可能最简单的方法就是关闭你在 PyCharm 中可能打开的任何项目，这会给你我们15章前在 *图 15.1* 中开始的窗口。1.
- en: '![Figure 15.1: The Plugins window contains all the tools you need to manage
    plugins in PyCharm](img/B19644_15_001.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.1：插件窗口包含你在 PyCharm 中管理插件所需的所有工具](img/B19644_15_001.jpg)'
- en: 'Figure 15.1: The Plugins window contains all the tools you need to manage plugins
    in PyCharm'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1：插件窗口包含你在 PyCharm 中管理插件所需的所有工具
- en: 'At the top of the **Plugins** window, you’ll find two important tabs: one shows
    you the plugins you have installed (**2**) and the other takes you to Marketplace
    where you can buy and install new plugins (**1**). Many of the plugins in Marketplace
    are free, but many of the better ones are not.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **插件** 窗口的顶部，你可以找到两个重要的标签页：一个显示你已安装的插件（**2**），另一个带你去市场，你可以在那里购买和安装新的插件（**1**）。市场中的许多插件是免费的，但许多更好的插件则不是。
- en: The gear icon (**3**) allows you to configure additional plugin repositories.
    I’ve never needed this, but it’s there if you do. You can also install a plugin
    from a local folder using the relevant menu found under the gear.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 螺丝刀图标（**3**）允许你配置额外的插件仓库。我从未需要过这个功能，但如果你需要，它就在那里。你还可以使用螺丝刀下找到的相关菜单从本地文件夹安装插件。
- en: The search box (**4**) allows you to find plugins in the list. When you select
    a plugin you’ll usually get some information about it on the right side (**5**).
    Plugins can be enabled and disabled (**6**), so if your IDE behaves erratically
    after installing a plugin, you can turn it off temporarily or uninstall it completely.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索框（**4**）允许你在列表中查找插件。当你选择一个插件时，你通常会在右侧（**5**）获得一些关于它的信息。插件可以被启用或禁用（**6**），所以如果你的
    IDE 在安装插件后表现不稳定，你可以暂时关闭它或完全卸载它。
- en: Bundled plugins
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打包插件
- en: If you study the list in *Figure 15**.2*, you’ll find that most of the plugins
    on this screen are bundled with PyCharm. These are plugins created by JetBrains
    and included in the normal PyCharm installation. It’s not a bad idea to examine
    this list and disable plugins you aren’t likely to use. For example, I use **Terraform**
    and **Ansible** for my DevOps and **Infrastructure as Code** (**IaC**). I am not
    likely to use Puppet, so I should disable that plugin.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您研究 *图15.2* 中的列表，您会发现此屏幕上的大多数插件都捆绑在 PyCharm 中。这些是由 JetBrains 创建并包含在正常 PyCharm
    安装中的插件。检查这个列表并禁用您不太可能使用的插件是个不错的主意。例如，我使用 **Terraform** 和 **Ansible** 进行 DevOps
    和 **基础设施即代码**（**IaC**）。我不太可能使用 Puppet，所以我应该禁用该插件。
- en: As you do this, you might find PyCharm warning you about dependent plugins.
    For example, there is a plugin for Less, which is a CSS meta-framework. I don’t
    use it, so it’s tempting to disable it. However, the JSX Styled Components plugin,
    which I do use in React projects, is dependent on Less. See *Figure 15**.2*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在您这样做的时候，您可能会发现 PyCharm 警告您有关依赖插件的警告。例如，有一个 Less 插件，它是一个 CSS 元框架。我不使用它，所以禁用它很有诱惑力。然而，我在
    React 项目中使用的 JSX 样式组件插件依赖于 Less。参见 *图15.2*。
- en: '![Figure 15.2: I am warned when I try to disable a plugin that is needed by
    another plugin](img/B19644_15_002.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图15.2：尝试禁用另一个插件所需的插件时，系统会发出警告](img/B19644_15_002.jpg)'
- en: 'Figure 15.2: I am warned when I try to disable a plugin that is needed by another
    plugin'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2：当我尝试禁用另一个插件所需的插件时，系统会发出警告
- en: In this case, I’d better leave **Less** enabled.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我最好保持 **Less** 启用。
- en: JetBrains Marketplace
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JetBrains 商场
- en: If you’re up for some retail IDE therapy, you can click the **Marketplace**
    tab and go shopping. Some plugins are free, some aren’t. You can search for and
    install plugins from Marketplace easily from this screen. If you buy one, you’ll
    likely be routed to the JetBrains Marketplace website so you can control your
    license.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要一些零售 IDE 治疗，您可以点击 **Marketplace** 选项卡并开始购物。一些插件是免费的，一些则不是。您可以从此屏幕轻松搜索和安装来自
    MarketPlace 的插件。如果您购买了一个插件，您可能会被引导到 JetBrains 商场网站，以便您控制您的许可证。
- en: Making your own plugins
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作您自己的插件
- en: Anyone can make an IDE plugin using the Java programming language and IntelliJ
    Community or Ultimate editions. I won’t cover how to make a plugin, I’ll at least
    show you how to get started. In *Figure 15**.3*, I have IntelliJ Community Edition
    open on the new project dialog. Given you have extensive experience with creating
    projects in PyCharm, I’ll tell you that all the IDEs are identical. IntelliJ is
    the original flagship IDE product from JetBrains.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 任何人都可以使用 Java 编程语言和 IntelliJ Community 或 Ultimate 版本制作 IDE 插件。我不会介绍如何制作插件，但至少我会展示如何开始。在
    *图15.3* 中，我打开了 IntelliJ Community Edition 的新项目对话框。鉴于您在 PyCharm 中创建项目有丰富的经验，我会告诉您所有
    IDE 都是相同的。IntelliJ 是 JetBrains 的原始旗舰 IDE 产品。
- en: '![Figure 15.3: IntelliJ Community Edition has a project template for creating
    your own IDE plugins](img/B19644_15_003.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图15.3：IntelliJ Community Edition 提供创建自定义 IDE 插件的项目模板](img/B19644_15_003.jpg)'
- en: 'Figure 15.3: IntelliJ Community Edition has a project template for creating
    your own IDE plugins'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3：IntelliJ Community Edition 提供创建自定义 IDE 插件的项目模板
- en: In addition to the project template, there is also a hyperlink to a tutorial
    on building your plugin project.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 除了项目模板外，还有一个链接到构建您的插件项目的教程。
- en: Requiring plugins for your projects
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为您的项目要求插件
- en: Just as we have a `requirements.txt` text file to list the names and versions
    of the packages necessary for a given Python project, we can specify particular
    plugins as requirements for a PyCharm project. This will ensure other developers
    have access to any plugin functionality you deem crucial to their success in collaborating
    on your project. *Figure 15**.4* shows you how to set the required plugins for
    your project.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们有一个 `requirements.txt` 文本文件来列出特定 Python 项目所需的包的名称和版本一样，我们也可以指定特定的插件作为 PyCharm
    项目的需求。这将确保其他开发者能够访问到您认为对他们在您的项目上协作成功至关重要的任何插件功能。*图15.4* 展示了如何为您的项目设置所需的插件。
- en: '![Figure 15.4: The steps for requiring plugins](img/B19644_15_004.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图15.4：要求插件的操作步骤](img/B19644_15_004.jpg)'
- en: 'Figure 15.4: The steps for requiring plugins'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4：要求插件的操作步骤
- en: First, having gone into your project’s settings and located **Build, Execution,
    Deployment**, find the **Required Plugins** menu item (**1**) and click it. Next,
    click the **+** icon (**2**) and select your required plugins from the dialog
    box that appears (**3**). Click **OK**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，进入你的项目设置，找到**构建、执行、部署**，找到**必需插件**菜单项（**1**）并点击它。然后，点击**+**图标（**2**），从出现的对话框中选择你的必需插件（**3**）。点击**确定**。
- en: Useful miscellaneous plugins
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有用的杂项插件
- en: 'I want to devote the bulk of this chapter to some very impactful plugins that
    are packed with complex features. Before I do that, though, let’s get the easy
    stuff out of the way. I’ll cover the small, interesting plugins you’re most likely
    going to think of when you search for IDE plugins. Some of these we have seen
    in other chapters:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我想在本章的大部分内容中介绍一些非常有影响力的插件，它们包含了许多复杂的功能。不过，在这样做之前，我们先解决一些简单的问题。我会介绍那些你在搜索IDE插件时最可能想到的小而有趣的插件。其中一些我们在其他章节中已经见过：
- en: The CSV plugin was covered in [*Chapter 13*](B19644_13.xhtml#_idTextAnchor318).
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSV插件在[*第13章*](B19644_13.xhtml#_idTextAnchor318)中有介绍。
- en: The Markdown plugin. This didn’t used to come bundled, but now it does and it
    definitely makes the cut.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Markdown插件。这个插件以前没有捆绑提供，但现在有了，而且它绝对值得拥有。
- en: The cell mode plugin, which we also covered in [*Chapter 13*](B19644_13.xhtml#_idTextAnchor318).
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元模式插件，我们也在*第13章*](B19644_13.xhtml#_idTextAnchor318)中介绍过。
- en: Let’s talk about a few more, which I’ll group based on what they do.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再谈谈几个，我将根据它们的功能将它们分组。
- en: Theme plugins
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主题插件
- en: 'You spend 8 to 16 hours a day staring at the IDE. You might as well spend some
    time making it look cool. There are lots of color themes available. *Figure 15**.5*
    shows my current favorite: the dark purple theme.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你每天花费8到16个小时盯着IDE。你不妨花点时间让它看起来很酷。有很多颜色主题可供选择。*图15*.5*显示了我当前最喜欢的：深紫色主题。
- en: '![Figure 15.5: The Dark Purple Theme is one of my favorites because it’s different
    than the standard VS Code dark theme](img/B19644_15_005.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图15.5：深紫色主题是我最喜欢的之一，因为它与标准的VS Code深色主题不同](img/B19644_15_005.jpg)'
- en: 'Figure 15.5: The Dark Purple Theme is one of my favorites because it’s different
    than the standard VS Code dark theme'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.5：深紫色主题是我最喜欢的之一，因为它与标准的VS Code深色主题不同
- en: When people walk by and see the IDE up, they’ll immediately know you aren’t
    one of those VS Code slaves with their ubiquitous out-of-the-box Microsoft dark
    theme. You could use the stock Darcula theme that comes with PyCharm, but for
    a University of Oklahoma grad like me, that theme has entirely too much orange
    in it. Pick something you don’t see every day and soon everyone at the cube farm
    will know you are the real deal!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们走过并看到IDE打开时，他们会立刻知道你不是那些拥有无处不在的微软深色主题的VS Code奴隶。你可以使用PyCharm附带的默认Darcula主题，但像我这样的俄克拉荷马大学毕业生，那个主题中橙色太多。选择一个你平时看不到的主题，很快，在格子间里的人都会知道你是真的。
- en: I also like the Material Theme UI in a nice solarized blue. This plugin comes
    in a lite (free) and a paid version. If you look around, you’ll find a color theme
    that suits you as there are many from which to choose. The easy way to find your
    new favorite is to type a tag into the search box shown in *Figure 15**.6*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我也喜欢那种漂亮的太阳色蓝色的Material Theme UI。这个插件有免费（轻量版）和付费版。如果你四处看看，你会找到一个适合你的颜色主题，因为可供选择的有许多。找到你新喜欢的主题的简单方法是，在*图15*.6*中显示的搜索框中输入一个标签。
- en: '![Figure 15.6: You can filter your plugin search using tags such as “Theme”](img/B19644_15_006.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图15.6：你可以使用“主题”等标签过滤插件搜索](img/B19644_15_006.jpg)'
- en: 'Figure 15.6: You can filter your plugin search using tags such as “Theme”'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6：你可以使用“主题”等标签过滤插件搜索
- en: I recommend you try this because for whatever reason, leaving the search box
    blank doesn’t yield a very long list of options.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你试试这个，因为无论什么原因，留空搜索框不会得到一个非常长的选项列表。
- en: File handler plugins
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件处理器插件
- en: This class of plugins provides colored highlighting for some of the non-code
    files we use every day.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这类插件为我们每天使用的某些非代码文件提供了彩色高亮显示。
- en: The .ignore plugin provides some nice formatting for any of the common ignore
    files such as `.gitignore` and `.dockerignore`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: .ignore插件为常见的忽略文件（如`.gitignore`和`.dockerignore`）提供了一些不错的格式化。
- en: Tools integration plugins
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具集成插件
- en: Paul Everitt, one of the developer advocates for PyCharm, often reminds us that
    the I in IDE stands for *Integrated*. You should never need to leave PyCharm for
    any reason. Besides writing code, developers need to interact with issue trackers,
    VCSs, continuous build environments, and potentially a plethora of infrastructure
    tooling. It is no surprise there are plugins to help with these types of integration.
    *Figure 15**.7* shows the tag used to find these plugins.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm的开发者倡导者之一保罗·埃弗雷特（Paul Everitt）经常提醒我们，IDE中的I代表的是*集成*。你永远不应该因为任何原因而离开PyCharm。除了编写代码，开发者还需要与问题跟踪器、版本控制系统（VCS）、持续构建环境以及可能的大量基础设施工具进行交互。因此，有插件来帮助这些类型的集成并不奇怪。*图15.7*展示了用于查找这些插件的标签。
- en: '![Figure 15.7: Use the Tools Integration tag to find integrations to your favorite
    infrastructure and DevOps tools](img/B19644_15_007.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图15.7：使用工具集成标签查找你最喜欢的基础设施和DevOps工具的集成](img/B19644_15_007.jpg)'
- en: 'Figure 15.7: Use the Tools Integration tag to find integrations to your favorite
    infrastructure and DevOps tools'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.7：使用工具集成标签查找你最喜欢的基础设施和DevOps工具的集成
- en: I used to be a heavy TeamCity user. If you use TeamCity, or any of the other
    JetBrains team tools, you’ll find plugins that allow you to monitor your builds,
    deal with issues, and more right from your IDE. For the record, Team City is still
    my favorite **continuous integration** (**CI**) server.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经是TeamCity的重度用户。如果你使用TeamCity，或者任何其他JetBrains团队工具，你将找到插件，允许你从IDE中监控你的构建、处理问题等。记录在案，TeamCity仍然是我最喜欢的**持续集成**（CI）服务器。
- en: Productivity plugins
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生产力插件
- en: Developer productivity is the main reason to use an IDE in the first place.
    There are many additional features and integrations you’ll find under this tag.
    *Figure 15**.8* shows this tag in action.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者生产力是首先使用集成开发环境（IDE）的主要原因。在这个标签下，你会发现许多额外的功能和集成。*图15.8*展示了这个标签的使用情况。
- en: '![Figure 15.8: Use the productivity tag to find tools to make you more productive](img/B19644_15_008.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图15.8：使用生产力标签查找提高生产力的工具](img/B19644_15_008.jpg)'
- en: 'Figure 15.8: Use the productivity tag to find tools to make you more productive'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.8：使用生产力标签查找提高生产力的工具
- en: My favorite DevOps plugin by far is GitToolbox. Take a look at one of my projects
    open in PyCharm with GitToolbox enabled.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我最喜欢的DevOps插件是GitToolbox。看看我在PyCharm中打开并启用了GitToolbox的一个项目。
- en: '![Figure 15.9: The GitToolbox plugin provides a lot of information about your
    project’s repository](img/B19644_15_009.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图15.9：GitToolbox插件提供了关于你的项目仓库的大量信息](img/B19644_15_009.jpg)'
- en: 'Figure 15.9: The GitToolbox plugin provides a lot of information about your
    project’s repository'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.9：GitToolbox插件提供了关于你的项目仓库的大量信息
- en: At a glance, I can see the branch I am currently using along with how many commits
    ahead or behind I am relative to my remote. The plugin will help you clean up
    old branches you haven’t used in a while, perform regular fetches at timed intervals,
    and validate your commit messages. My favorite feature might be that you see the
    `git blame` information for each line. I’m not the blaming type, but I find it
    very useful as a lead developer to see which of my colleagues has worked on a
    particular file. It definitely helps code reviews go a little bit faster.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一眼就能看到我当前正在使用的分支，以及相对于远程仓库我领先或落后的提交数量。插件将帮助你清理长时间未使用的旧分支，在定时间隔内执行常规获取，并验证你的提交信息。我最喜欢的功能可能是你可以看到每一行的`git
    blame`信息。我不是那种指责别人的人，但作为主开发人员，我发现它非常有用，可以知道我的同事在哪个特定文件上工作。这无疑有助于代码审查更快地进行。
- en: Completion plugins
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完成插件
- en: 'AI has become a game-changing integral part of software development. Using
    the `/tag: Completion` tag will list dozens of traditional and AI-powered code
    completion plugins, as seen in *Figure 15**.10*.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '人工智能（AI）已经成为软件开发中一个颠覆性的重要组成部分。使用`/tag: Completion`标签将列出数十个传统和AI驱动的代码完成插件，如*图15.10*所示。'
- en: '![Figure 15.10: Completion plugins including the most popular AI implementations](img/B19644_15_010.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图15.10：包括最流行的AI实现的完成插件](img/B19644_15_010.jpg)'
- en: 'Figure 15.10: Completion plugins including the most popular AI implementations'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.10：包括最流行的AI实现的完成插件
- en: At the moment, GitHub Copilot and any of the dozens of ChatGPT plugins are very
    popular autocompletion plugins. Before you pay money for them though, check out
    my discussion of JetBrains **AI Assistant** plugin in *Chapter 17*. It is currently
    in closed beta, so I can’t really include it here, but it is really good and more
    tightly integrated than any of these plugins.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，GitHub Copilot和数十个ChatGPT插件都是非常受欢迎的自动补全插件。但在您支付费用之前，请查看我在*第17章*中关于JetBrains
    **AI助手**插件的讨论。它目前处于封闭测试阶段，所以我无法在这里真正包括它，但它真的很好，并且比这些插件更紧密地集成。
- en: Code with me (and never be lonely again)
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与我一起编码（从此不再孤独）
- en: Pair programming is a popular practice introduced many years ago via the agile
    methodology known as **Extreme Programming** (**XP**). While not as well known
    as Scrum or Kanban, XP has many of the same practices and goals, but with pair
    programming as a mandatory component. In XP, two programmers sit in front of one
    computer and write code together. One person types while the other watches, coaches,
    looks things up, and generally contributes by helping out. At fixed intervals
    the programmers trade places. Adherents to the practice swear by it, claiming
    it eliminates the need for code reviews and generally leads to better code. Detractors,
    which include every non-technical manager alive, say it doesn’t make sense to
    have two expensive, specialized workers doing half as much work as they should.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 配对编程是一种多年前通过名为**极限编程**（**XP**）的敏捷方法引入的流行实践。虽然不如Scrum或Kanban知名，但XP有许多相同的实践和目标，但将配对编程作为一个强制性组件。在XP中，两名程序员坐在一台电脑前一起编写代码。一个人输入，另一个人观察、指导、查找信息，并通过帮助提供一般性贡献。在固定的时间间隔内，程序员交换位置。该实践的拥护者对其深信不疑，声称它消除了代码审查的需要，并且通常导致更好的代码。批评者，包括所有在世的非技术经理，认为让两个昂贵的、专业的工人只做一半的工作是没有意义的。
- en: Love it or hate it, you have to admit there is a great deal of utility in direct
    collaboration. The real issue is in a post-Covid world where a great many developers
    work remotely, the idea of two developers at one screen is no longer feasible,
    at least until now.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您喜欢还是讨厌，您都必须承认直接协作有很大的实用性。真正的问题是，在新冠后的世界里，许多开发者远程工作，两个开发者共用一个屏幕的想法不再可行，至少直到现在。
- en: JetBrains has an integrated tool called *Code With Me*. This tool allows multiple
    developers to join a shared session online, where everybody works on a project
    at the same time on one computer. This plugin comes bundled with all JetBrains
    IDEs including PyCharm. You can activate this by clicking the icon shown in *Figure
    15**.11*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: JetBrains有一个名为*与我一起编码*的集成工具。这个工具允许多个开发者加入一个在线共享会话，每个人都在一台电脑上同时为一个项目工作。这个插件包含在所有JetBrains
    IDE中，包括PyCharm。您可以通过点击*图15.11*中显示的图标来激活它。
- en: '![Figure 15.11: To start a Code With Me session, click the icon indicated with
    the arrow](img/B19644_15_011.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图15.11：要开始“与我一起编码”会话，点击箭头所示的图标](img/B19644_15_011.jpg)'
- en: 'Figure 15.11: To start a Code With Me session, click the icon indicated with
    the arrow'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.11：要开始“与我一起编码”会话，点击箭头所示的图标
- en: You can set permissions for your guests. Remember, you are granting access to
    your computer! You should engage in sessions only with people you trust, and likewise
    only send your session links to people you trust.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为您的访客设置权限。请记住，您正在授予对您电脑的访问权限！您应该只与您信任的人进行会话，同样，也只将您的会话链接发送给您信任的人。
- en: Once you click **Start Session**, PyCharm creates a hyperlink you can share
    as you see fit. You can email it, but I most often see it sent to other developers
    via Slack or similar private chat services. Anyone who has the link can click
    to join the session. In addition to sharing the IDE, you also have normal conferencing
    tools. Participants can see and hear each other like you’d expect on a product
    such as Zoom or WebEx. *Figure 15**.12* shows me conferencing with nobody, but
    it gives you an idea of what to expect.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击**开始会话**，PyCharm会创建一个您可以根据需要分享的超链接。您可以通过电子邮件发送它，但我最常见的是通过Slack或类似的私人聊天服务发送给其他开发者。任何拥有链接的人都可以点击加入会话。除了共享IDE之外，您还有正常的会议工具。参与者可以像在Zoom或WebEx这样的产品上一样看到和听到对方。*图15.12*显示了我在没有人与我进行会议的情况下的样子，但它能给您一个预期的概念。
- en: '![Figure 15.12: A Code With Me session in progress. Unfortunately, since I
    spend all my time writing books, I don’t have any friends to call, so it’s just
    me](img/B19644_15_012.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图15.12：正在进行中的“与我一起编码”会话。不幸的是，由于我花所有的时间写书，我没有朋友可以打电话，所以只有我一个人](img/B19644_15_012.jpg)'
- en: 'Figure 15.12: A Code With Me session in progress. Unfortunately, since I spend
    all my time writing books, I don’t have any friends to call, so it’s just me'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.12：正在进行中的“与我一起编码”会话。不幸的是，因为我把所有时间都花在写书上，我没有朋友可以打电话，所以只有我一个人。
- en: This feature is useful in a lot of scenarios beyond the obvious pair programming
    use case. You can use this for each class, or conduct a coding interview using
    something more realistic than a Google Doc.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能在许多场景中都很有用，而不仅仅是明显的结对编程用例。你可以为每一节课使用它，或者使用比Google Doc更真实的东西进行编码面试。
- en: If you intend to use this service often, you will need a subscription since
    there are limitations on session length and the number of participants you can
    invite. You can find out more at [https://www.jetbrains.com/code-with-me/buy/#commercial](https://www.jetbrains.com/code-with-me/buy/#commercial).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算经常使用这项服务，你需要订阅，因为会话长度和你可以邀请的参与人数都有限制。你可以在[https://www.jetbrains.com/code-with-me/buy/#commercial](https://www.jetbrains.com/code-with-me/buy/#commercial)了解更多信息。
- en: Remote development
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程开发
- en: At my office I have a large, powerful, 60 lb full-tower HP workstation with
    dual Intel Xeon processors (a total of 48 cores), 128 GB of memory, a professional-grade
    NVidia GPU, and 24 GB GPU accelerator! It even has a **serially attached small
    computer system interface** (**SAS**) for running enterprise-grade storage! You
    really can’t get this kind of power in a laptop and there are days when I push
    it to its limits.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的办公室里，我有一台大型、强大的60磅全塔式HP工作站，配备双核Intel Xeon处理器（总共48个核心），128 GB的内存，专业级的Nvidia
    GPU，以及24 GB的GPU加速器！它甚至还有一个**串行连接的小计算机系统接口**（**SAS**），用于运行企业级存储！你真的无法在笔记本电脑上获得这种性能，而且有时候我会把它用到极致。
- en: Our industry loves alphabet soup!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这个行业喜欢字母汤！
- en: I’m just going to clear this up for all you engineering types who are trying
    to figure out how the **three letter acronym** (**TLA**) *SAS* stands for no fewer
    than six words. It’s because the acronym *SAS* contains one letter that itself
    stands for another acronym. It’s **Serially Attached SCSI** (**SAS**). **SCSI**
    stands for *small computer system interface*. SAS drives are spinning disks that
    are capable of higher rotational speeds than your standard **serial advanced technology
    attachment** (**SATA**) drives, but they are still nowhere near as fast as a **solid-state
    drive** (**SSD)** or **non-volatile memory express** (**NVME**) drives that feature
    **NOT-AND** or **NAND** memory. SAS drives are, however, designed to be used in
    **redundant arrays of inexpensive disks** (**RAID**), which makes them useful
    for inexpensively storing very large files in a fault-tolerant way.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是想为所有那些试图弄清楚**三字母缩写**（**TLA**）*SAS*代表不少于六个单词的工程类型的人澄清一下。这是因为缩写*SAS*中包含的一个字母本身又代表另一个缩写。它是**串行连接的SCSI**（**SAS**）。**SCSI**代表*小型计算机系统接口*。SAS驱动器是旋转磁盘，其转速比标准的**串行高级技术附件**（**SATA**）驱动器要高，但它们仍然远远不如**固态驱动器**（**SSD**）或具有**NOT-AND**或**NAND**内存的**非易失性内存表达**（**NVME**）驱动器快。然而，SAS驱动器是设计用于**冗余磁盘阵列**（**RAID**）的，这使得它们在以容错方式低成本存储非常大的文件时很有用。
- en: All these acronyms and jargon are part of an industry-wide conspiracy designed
    to make your relatives, who have no idea what you do, both proud and uncomfortable
    at family gatherings and holidays.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些缩写和术语都是行业内部阴谋的一部分，旨在让你那些对你所从事的工作一无所知的亲戚在家庭聚会和节假日时既感到自豪又感到不舒服。
- en: But like probably every other developer out there, I’d also like to be able
    to work from home. Obviously, I’m not willing to lug my 60 lb workstation around
    with me. Even if I were, our security team isn’t going to like our source code
    leaving the building. True, I could use a remote technology such as VNC Viewer
    or Microsoft Remote Desktop, but those can be laggy and lack the creature comforts,
    such as support for four monitors, to which I have become accustomed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 但像其他许多开发者一样，我也希望能在家工作。显然，我不愿意带着60磅的工作站四处奔波。即使我能，我们的安全团队也不会喜欢我们的源代码离开大楼。确实，我可以使用VNC
    Viewer或Microsoft Remote Desktop这样的远程技术，但它们可能会出现延迟，而且缺乏我习惯的四显示器等舒适功能。
- en: I could also just work over SSH using **neovim**. But I think you and I, we’re
    past that, right? If you think that’s a good idea, skip back to [*Chapter 1*](B19644_01.xhtml#_idTextAnchor014)
    where I talked about it being a bad idea. So, what am I to do?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我也可以通过SSH使用**neovim**进行工作。但我想你和我，我们已经过了那个阶段，对吧？如果你认为这是个好主意，就回到[*第一章*](B19644_01.xhtml#_idTextAnchor014)，我在那里谈到了这是一个坏主意。那么，我该怎么办呢？
- en: Thankfully, JetBrains has me covered. Using its remote plugins, which are pre-installed
    on PyCharm Professional, I can run my IDE on my PC at home, but operate on my
    workstation in my office. This is done using **secure shell** (**SSH**), which
    is an encrypted communications protocol typically used to administer Linux and
    Unix-based servers.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，JetBrains 为我提供了支持。使用其预安装在 PyCharm Professional 上的远程插件，我可以在家里的电脑上运行我的 IDE，但在办公室的工作站上操作。这是通过
    **安全外壳**（**SSH**）实现的，它是一种加密通信协议，通常用于管理基于 Linux 和 Unix 的服务器。
- en: Simply put, you can configure PyCharm to use a virtual environment (`venv`)
    that is installed and configured on your remote PC, along with the code on the
    remote hard drive. Everything runs on the remote except for the IDE itself. Your
    run configurations will execute your code on the remote. When you debug, the debugger
    is running on the remote rather than your local machine. It is fairly seamless,
    but there are a couple of downsides.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，你可以配置 PyCharm 使用安装在远程 PC 上的虚拟环境（`venv`），以及远程硬盘上的代码。除了 IDE 本身之外，所有操作都在远程进行。你的运行配置将在远程执行你的代码。当你进行调试时，调试器是在远程而不是本地机器上运行的。这相当无缝，但也有一些缺点。
- en: Firstly, you have to be somewhat knowledgeable about networking to configure
    a project to do this. You need to have the IP address of the remote, and you need
    to have valid access credentials that allow you access to the remote computer.
    In my case, I also need a **virtual private network** (**VPN**) client running
    in order to access the network in my office, and this is external to PyCharm.
    While a VPN isn’t technically a requirement, in most scenarios, it should be.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你必须对网络有一定的了解，才能配置项目进行此操作。你需要远程的 IP 地址，并且需要有效的访问凭证，以便访问远程计算机。在我的情况下，我还需要一个
    **虚拟专用网络**（**VPN**）客户端才能访问办公室的网络，而这个客户端是 PyCharm 外部的。虽然 VPN 从技术上讲不是必需的，但在大多数情况下，它应该是。
- en: The second trade-off is performance. PyCharm isn’t exactly zippy on a good day.
    We have to wait for indexing to take place before we can use any of those amazing
    features we’ve been talking about throughout the book. It isn’t uncommon to get
    out-of-memory errors from PyCharm, which requires you to increase the amount of
    memory PyCharm is allowed to use. Updating or installing plugins requires you
    to restart the IDE, and even the initial loading screen hangs there longer than
    many of us would like. All in all, sometimes PyCharm can be a little clunky, but
    we put up with it because of the value it brings in easing our overall workflow.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个权衡是性能。PyCharm 在好日子里也不算特别快。在我们能够使用书中所讨论的任何那些令人惊叹的功能之前，我们必须等待索引完成。从 PyCharm
    获取内存不足错误并不罕见，这需要你增加 PyCharm 被允许使用的内存量。更新或安装插件需要你重新启动 IDE，甚至初始加载界面挂起的时间也比我们许多人希望的更长。总的来说，有时
    PyCharm 可能有点笨拙，但我们忍受它，因为它带来的价值有助于简化我们的整体工作流程。
- en: I tend to think of PyCharm like a diesel truck. Such a truck isn’t going to
    win a quarter-mile sprint race against a Porsche or a Tesla Model 3\. Being from
    rural Oklahoma, I can tell you nobody owns sports cars where I’m from because
    our diesel trucks are more than transportation, they are part of our livelihood.
    I can’t use a Tesla to tow a load of cows to auction, nor can I use a Porsche
    to haul hay to the back 40 to feed the horses. Likewise, we use heavy IDEs because
    we are willing to trade the “zippiness” of a minimal editor such as VS Code for
    some pretty extreme value presented by PyCharm’s indexing. The ability to find
    usages, jump directly to function definitions, and have such a tightly integrated
    set of tools covering everything from editing to database management is worth
    a little lag.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我倾向于将 PyCharm 比作柴油卡车。这样的卡车不可能在四分之一英里短跑比赛中战胜保时捷或特斯拉 Model 3。来自俄克拉荷马州的农村地区，我可以告诉你，在我所在的地方没有人拥有跑车，因为我们的柴油卡车不仅仅是交通工具，它们是我们生计的一部分。我无法用特斯拉拖运一车牛去拍卖，也无法用保时捷拉运干草到后40英亩去喂马。同样，我们使用重型
    IDE，因为我们愿意为了 PyCharm 的索引提供的某些极端价值而放弃最小编辑器（如 VS Code）的“速度”。能够找到用法、直接跳转到函数定义，以及拥有从编辑到数据库管理的一整套紧密集成的工具，这些都是值得一点延迟的。
- en: With that said, that lag can become more evident when you are working on a remote
    project. You can expect your indexing times to be longer because the indexing
    is happening remotely and is then transmitted back to you. Network latency and
    VPNs will always make things slower, and that isn’t PyCharm’s fault. We put up
    with it because you get to work from home in your pajamas, with your music turned
    up, close to your own kitchen and snacks, and you can limit your interaction with
    other humans, which normally just slows people like us down. It’s worth it. Now
    that your expectations have been set, let’s look at how to make this work.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，当你在一个远程项目中工作时，这种延迟可能会变得更加明显。你可以预期你的索引时间会更长，因为索引是在远程进行的，然后传输回你这里。网络延迟和VPN总是会使事情变慢，但这不是PyCharm的错。我们忍受它，因为你可以在穿着睡衣的情况下在家工作，音乐声调很高，靠近自己的厨房和零食，你可以限制与其他人的互动，这通常只会让我们这样的人变慢。这是值得的。现在你的期望已经设定，让我们看看如何让这一切工作。
- en: Configuring remote development in PyCharm
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图15.13：远程开发选项清楚地显示在欢迎窗口的右侧
- en: In all my books and courses, I pride myself on keeping everything as realistic
    as possible. For example in [*Chapter 7*](B19644_07.xhtml#_idTextAnchor172), I
    had trouble with the PyCharm feature that is supposed to download Node.js for
    me automatically. I didn’t hide it, because that legitimately happened to me,
    which means it might also happen to you. There is value in learning to work around
    these kinds of issues.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在我所有的书籍和课程中，我自豪地保持着尽可能真实的内容。例如，在[*第七章*](B19644_07.xhtml#_idTextAnchor172)中，我遇到了PyCharm的一个功能问题，这个功能本应自动为我下载Node.js。我没有隐藏它，因为这种情况确实发生在我身上，这意味着它也可能发生在你身上。学习如何绕过这类问题是有价值的。
- en: By now, you might have noticed this chapter’s screen captures look different
    that those in previous chapters. I am writing this chapter on a day when I am
    working at home, and I’m using a Windows 11 PC that has not been configured to
    work remotely before today. Since this is my home computer, the screenshots might
    look a little different than those from previous chapters, particularly with respect
    to dark mode. I turned dark mode off for most of the book because the light mode
    is easier to read in a printed book, and I’m saving my publisher money on ink.
    Not today though. Because I’m keeping it real.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你可能已经注意到这一章的屏幕截图与之前章节的不同。我是在一个我在家工作的日子里写这一章的，我正在使用一台今天之前从未配置过远程工作的Windows
    11 PC。由于这是我的家用电脑，截图可能看起来与之前章节的略有不同，尤其是在深色模式方面。我关闭了大多数书籍的深色模式，因为印刷书籍中的浅色模式更容易阅读，而且我在墨水上也节省了出版商的费用。但今天不是这样。因为我正在保持真实。
- en: The first thing I’ll do is install and open PyCharm. Obviously, we’ve covered
    that already in [*Chapter 2*](B19644_02.xhtml#_idTextAnchor028), so there’s no
    need to do that again. The welcome screen provides the option for opening a remote
    project, as shown in *Figure 15**.13*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我要做的第一件事是安装并打开PyCharm。显然，我们已经在[*第二章*](B19644_02.xhtml#_idTextAnchor028)中介绍了这一点，所以没有必要再次做这件事。欢迎屏幕提供了打开远程项目的选项，如图*15.13*所示。
- en: '![Figure 15.13: The remote development options are clearly available on the
    right side of the welcome window](img/B19644_15_013.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: 这里有几个选项，包括SSH，我将使用它。JetBrains Space是一个独立的产品，我不拥有它，所以我真的不能涵盖它。"WSL"，即"Windows
    Subsystem for Linux"，可能只会在你使用Windows时出现。WSL允许你在Windows中直接运行Linux虚拟机，而无需使用像VMware或Virtual
    Box这样的明显虚拟机管理程序。"明显"，是因为当然这里有一个虚拟机管理程序在起作用——它是微软的**HyperV**，它是Windows 11和Windows
    Server产品的专业版中内置的。Windows 11通过允许你通过Windows 11中新的Windows Terminal程序选择一个或多个Linux安装来使其无缝。
- en: 'Figure 15.13: The remote development options are clearly available on the right
    side of the welcome window'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.13：远程开发选项清楚地显示在欢迎窗口的右侧](img/B19644_15_013.jpg)'
- en: There are several options here including SSH, which is what I’ll be using. JetBrains
    Space is a separate product, and I don’t own it, so I can’t really cover it. **WSL**,
    or **Windows Subsystem for Linux**, is likely only going to show up if you’re
    using Windows. WSL allows you to run a Linux virtual machine directly in Windows
    without using an obvious hypervisor such as VMware or Virtual Box. I say *obvious*,
    because of course there is a hypervisor at play here – it is Microsoft’s **HyperV**,
    which is built in to the professional editions of Windows 11 and Windows Server
    products. Windows 11 makes it seamless by allowing you to select one or more Linux
    installations via the Windows Terminal program that is new in Windows 11.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 配置PyCharm中的远程开发
- en: Since WSL is technically a virtual machine, it counts as remote development
    even though it happens on your local computer. For now, I’m going to focus on
    real remote development by accessing my workstation, currently about 12 miles
    away, over SSH. To be clear, my local computer is running Windows 11, but my workstation
    is running **Pop_OS! 22**, which is a variant of Ubuntu Linux. You’ve seen it
    in the screenshots throughout the book. This adds to the magic! I can use a consumer-grade
    OS such as Windows or macOS to connect to a professional-grade Linux workhorse.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 由于WSL在技术上是一个虚拟机，尽管它发生在你的本地计算机上，但它仍然算作远程开发。目前，我将专注于通过SSH访问我的工作站进行真正的远程开发，我的工作站目前大约12英里远。为了清楚起见，我的本地计算机运行Windows
    11，但我的工作站运行**Pop_OS! 22**，这是Ubuntu Linux的一个变种。你可以在全书中的屏幕截图中看到它。这增加了神奇之处！我可以用Windows或macOS这样的消费级操作系统连接到专业的Linux工作站。
- en: Before you jump on Twitter (now called X) to flame me for disrespecting your
    favorite OS, realize that this is the only possible combination. You have to connect
    to a Linux remote as Windows and Macs are not yet supported. I’m not sure what
    the hold-up is on macOS since it comes with an SSH server preinstalled. This workflow
    would make sense for a use case where you have a Mac Pro at work and something
    else at home. The setup screens that follow do indicate this functionality is
    intended for future releases.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在你跳上Twitter（现在称为X）来对我侮辱你最喜欢的操作系统进行抨击之前，请意识到这是唯一可能的组合。你必须连接到Linux远程服务器，因为Windows和Mac目前还不支持。我不确定macOS的延迟是什么，因为它预装了SSH服务器。对于你在工作中有一台Mac
    Pro而家里有其他设备的情况，这种工作流程是有意义的。接下来的设置屏幕确实表明这项功能是为未来版本准备的。
- en: '*Figure 15**.14* starts us off by showing what happens when we click the SSH
    option shown in *Figure 15**.13*. We are given a screen that allows us to create
    a new project on our remote, but only after we first configure our connection.
    This is going to be like creating an SSH connection for publishing our web projects,
    which we covered in [*Chapter 7*](B19644_07.xhtml#_idTextAnchor172).'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*图15.14*首先展示了当我们点击*图15.13*中显示的SSH选项时会发生什么。我们得到了一个屏幕，允许我们在远程创建一个新的项目，但前提是我们首先配置我们的连接。这就像我们创建用于发布Web项目的SSH连接一样，我们在[*第7章*](B19644_07.xhtml#_idTextAnchor172)中讨论了这一点。'
- en: '![Figure 15.14: The remote configuration dialog could only be improved by stacking
    another configuration dialog on top of it](img/B19644_15_014.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图15.14：远程配置对话框只能通过在其上方堆叠另一个配置对话框来改进](img/B19644_15_014.jpg)'
- en: 'Figure 15.14: The remote configuration dialog could only be improved by stacking
    another configuration dialog on top of it'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.14：远程配置对话框只能通过在其上方堆叠另一个配置对话框来改进
- en: Before you can do anything, you need to configure an SSH connection by clicking
    the gear icon indicated by the arrow in *Figure 15**.14*. This brings us to yet
    another dialog, shown in *Figure 15**.5*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在你能够做任何事情之前，你需要通过点击*图15.14*中箭头所指的齿轮图标来配置SSH连接。这会带我们进入另一个对话框，如*图15.5*所示。
- en: "![Figure 15.15: Here\uFEFF, I am creating an SSH configuration to be used in\
    \ my remote setup](img/B19644_15_015.jpg)"
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图15.15：在这里，我正在创建一个用于远程设置的SSH配置](img/B19644_15_015.jpg)'
- en: 'Figure 15.15: Here, I am creating an SSH configuration to be used in my remote
    setup'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.15：在这里，我正在创建一个用于远程设置的SSH配置
- en: I’ve gone ahead and clicked the `22`, so I’ve left the default set (**6**).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经点击了`22`，所以我已经保留了默认设置（**6**）。
- en: If you go back to the first position (**1**), you can click that pencil icon
    and give it a different name if you don’t like the aesthetics of a username and
    an IP. I’m renaming mine in *Figure 15**.16* to something a little more appropriate
    given its hardware specifications.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回到第一个位置（**1**），你可以点击那个铅笔图标，如果你不喜欢用户名和IP地址的美观，可以给它一个不同的名字。我在*图15.16*中将我的名字重命名为更符合其硬件规格的名称。
- en: '![Figure 15.16: The Beast is the name for my remote workstation](img/B19644_15_016.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图15.16：The Beast是我远程工作站的名称](img/B19644_15_016.jpg)'
- en: 'Figure 15.16: The Beast is the name for my remote workstation'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.16：The Beast是我远程工作站的名称
- en: The rest of the options aren’t important to me because I don’t have to go through
    a proxy to get to my workstation. I went ahead and expanded all the closed options
    in *Figure 15**.15* so you can see any additional settings you might need.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的选项对我来说并不重要，因为我不需要通过代理才能到达我的工作站。我继续展开*图15.15*中所有关闭的选项，以便你可以看到你可能需要的任何附加设置。
- en: Click **OK**, which takes you back to the earlier dialog. You’ll need to select
    the connection you just created from the dropdown. For me, the re-naming didn’t
    stick so it’s back to the username and IP as shown in *Figure 15**.17*.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确定**，这将带您回到之前的对话框。您需要从下拉菜单中选择您刚刚创建的连接。对我来说，重命名没有保留，所以又回到了显示在*图15*.17中的用户名和IP。
- en: '![Figure 15.17: Having created a connection, you need to select it here and
    the username and host fields will be filled in for you](img/B19644_15_017.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图15.17：创建连接后，您需要在这里选择它，用户名和主机字段将为您自动填写](img/B19644_15_017.jpg)'
- en: 'Figure 15.17: Having created a connection, you need to select it here and the
    username and host fields will be filled in for you'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.17：创建连接后，您需要在这里选择它，用户名和主机字段将为您自动填写
- en: Note that you have the option here to go passwordless and use a private key.
    Using the SSH keys potentially limits the need for a password, but you can still
    be challenged to unlock the key. In either case, PyCharm can remember your password
    or your SSH key phrase for you if you’d like. If you work for a security-conscious
    company, you might check your guidelines to understand where it is considered
    appropriate for an application to store your passwords and key phrases.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，您在这里可以选择无密码登录并使用私钥。使用SSH密钥可能限制了密码的需求，但您仍然可能需要解锁密钥。在任何情况下，如果您愿意，PyCharm都可以为您记住密码或SSH密钥短语。如果您在一家注重安全的公司工作，您可能需要检查您的指南，以了解在哪些情况下，应用程序存储您的密码和密钥短语被认为是合适的。
- en: Click the button labeled **Check Connection and Continue**. Assuming you gain
    access, PyCharm copies some software and settings over to the host and then presents
    you with our original dialog box, as shown in *Figure 15**.18*.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 点击标有**检查连接并继续**的按钮。假设您获得了访问权限，PyCharm会将一些软件和设置复制到主机上，然后向您展示原始的对话框，如图*图15*.18所示。
- en: '![Figure 15.18: We now have a connected system with three options!](img/B19644_15_018.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图15.18：我们现在有一个连接的系统，有三个选项！](img/B19644_15_018.jpg)'
- en: 'Figure 15.18: We now have a connected system with three options!'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.18：我们现在有一个连接的系统，有三个选项！
- en: From here, we have three options. You can connect to the host with a terminal
    session by clicking it icon shown at (**1**). Clicking the **+** icon at (**2**)
    allows you to create or open a project on the remote. The gear (**2**) allows
    you to either remove the host or manage the backends on the host. This latter
    option is explained by my earlier remark. When we connected for the first time,
    I told you that PyCharm copied some software to the host. The software in question
    is a lot like our toolbox application. It’s going to help us manage the IDE backends
    we’ll upload as part of our project creation process. There are several other
    IDEs you can use in this way and you have the ability to manage these backends
    here. If you click it right now, there won’t be any, because we haven’t created
    any projects yet. Let’s rectify that.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们有三个选项。您可以通过点击显示在(**1**)位置的图标来使用终端会话连接到主机。点击(**2**)位置的**+**图标允许您在远程创建或打开项目。齿轮(**2**)允许您删除主机或管理主机上的后端。后一个选项是由我之前的评论解释的。当我们第一次连接时，我告诉您PyCharm将一些软件复制到了主机上。所涉及的软件很像我们的工具箱应用程序。它将帮助我们管理作为项目创建过程的一部分上传的IDE后端。您还可以使用其他几种IDE以这种方式使用，并且您有在这里管理这些后端的能力。如果您现在点击它，将不会有任何，因为我们还没有创建任何项目。让我们纠正这一点。
- en: Creating a remote project
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建远程项目
- en: Click the **+** button indicated at position (**2**) in *Figure 15**.18*. You’ll
    be rewarded with the screen shown in *Figure 15**.19*.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 点击*图15*.18中标记为(**2**)位置的**+**按钮。您将看到*图15*.19所示的屏幕。
- en: '![Figure 15.19: We’re about to create a new remote project, which requires
    downloading the IDE backend and selecting a project folder on the remote](img/B19644_15_019.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图15.19：我们即将创建一个新的远程项目，这需要下载IDE后端并在远程选择一个项目文件夹](img/B19644_15_019.jpg)'
- en: 'Figure 15.19: We’re about to create a new remote project, which requires downloading
    the IDE backend and selecting a project folder on the remote'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.19：我们即将创建一个新的远程项目，这需要下载IDE后端并在远程选择一个项目文件夹
- en: Remote project creation requires you to specify which IDE you want to use and
    where you’d like to store your code on the remote hard drive. Given we’re invoking
    PyCharm to create the project, it might seem odd that it is asking us to choose
    which IDE we need. Remember, though, this isn’t really PyCharm. It is a plugin
    that can be leveraged by many of the JetBrains IDEs. Right now, you are really
    interacting with a different piece of software that just happens to be hosted
    in PyCharm.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 远程项目创建需要你指定你想要使用的IDE以及你想要在远程硬盘上存储代码的位置。鉴于我们正在调用PyCharm来创建项目，它要求我们选择所需的IDE可能看起来有些奇怪。记住，这实际上并不是PyCharm。它是一个可以被许多JetBrains
    IDE利用的插件。现在，你实际上正在与另一款软件交互，它恰好托管在PyCharm中。
- en: We do get PyCharm as the default, so that’s something. Pay attention to the
    version. Mine is defaulting to the EAP version, which might not be what you want.
    Personally, I don’t use EAP unless I’m just testing them for backward project
    compatibility. I use the stable release in my day-to-day work. Pick the appropriate
    entry from the dropdown as shown in *Figure 15**.20*.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确实得到了PyCharm作为默认选项，所以这也是一件事情。请注意版本。我的默认设置为EAP版本，这可能不是你想要的。我个人只有在测试向后兼容性时才使用EAP。我在日常工作中使用稳定版。从下拉菜单中选择合适的条目，如图*图15.20*所示。
- en: '![Figure 15.20: Select the IDE you want to use on the remote](img/B19644_15_020.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图15.20：在远程选择你想要使用的IDE](img/B19644_15_020.jpg)'
- en: 'Figure 15.20: Select the IDE you want to use on the remote'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.20：在远程选择你想要使用的IDE
- en: The other, perhaps obvious consideration is you will need to have a license
    for whichever IDE you choose. Next, we need to pick a location. This can be confusing
    since the layout of a Linux filesystem is different than what you encounter in
    Windows. Linux doesn’t use drive letters, and it uses forward slashes to separate
    path elements while Windows uses backslashes. Thankfully, I can just browse by
    clicking the three dots next to the project directory setting. Check out *Figure
    15**.21*.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能明显的考虑因素是，你需要为所选的任何IDE拥有一个许可证。接下来，我们需要选择一个位置。这可能有点令人困惑，因为Linux文件系统的布局与你在Windows中遇到的不同。Linux不使用驱动器字母，它使用正斜杠来分隔路径元素，而Windows使用反斜杠。幸运的是，我可以通过点击项目目录设置旁边的三个点来浏览。查看*图15.21*。
- en: '![Figure 15.21: Click the three dots to browse the filesystem on the remote
    to pick your project directory](img/B19644_15_021.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图15.21：点击三个点以浏览远程文件系统以选择你的项目目录](img/B19644_15_021.jpg)'
- en: 'Figure 15.21: Click the three dots to browse the filesystem on the remote to
    pick your project directory'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.21：点击三个点以浏览远程文件系统以选择你的项目目录
- en: By default, the directory browser will display your home folder on the remote.
    You can browse to the folder of your choosing. Unfortunately at the moment, one
    big missing feature is an option to create a new folder for your project. I’m
    sure that’s coming, but right now it is absent. We’re going to have to work around
    this. Click **Cancel**, then **Back** to navigate back to the screen shown in
    *Figure 15**.5*. Click the terminal button to launch an SSH terminal session on
    the host, as shown in *Figure 15**.22*.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，目录浏览器将在远程显示你的主文件夹。你可以浏览到你选择的文件夹。不幸的是，目前，一个很大的缺失功能是创建新文件夹以供项目使用的选项。我相信这将会到来，但现在它还不存在。我们将不得不绕过这个问题。点击**取消**，然后点击**后退**返回到*图15.5*所示的屏幕。点击终端按钮以在主机上启动SSH终端会话，如图*图15.22*所示。
- en: '![Figure 15.22: Use a terminal session to create your folder](img/B19644_15_022.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图15.22：使用终端会话创建你的文件夹](img/B19644_15_022.jpg)'
- en: 'Figure 15.22: Use a terminal session to create your folder'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.22：使用终端会话创建你的文件夹
- en: Use the commands shown to create a new folder. I already had a `PyCharmProjects`
    folder on the remote in my home folder. This is because PyCharm is actually installed
    on the remote since it’s my daily-use computer. You can make any folder that suits
    you within your home folder on the remote. You can exit the terminal session by
    typing `exit`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用显示的命令创建一个新文件夹。我在远程主文件夹中已经有一个`PyCharmProjects`文件夹。这是因为PyCharm实际上安装在了远程上，因为它是我的日常使用电脑。你可以在远程主文件夹中的任何位置创建任何适合你的文件夹。你可以通过输入`exit`退出终端会话。
- en: Let’s try that again
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们再试一次
- en: Like before, click the **+** icon, pick your IDE from the dropdown, and browse
    to the folder you just created.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，点击**+**图标，从下拉菜单中选择你的IDE，并浏览到你刚刚创建的文件夹。
- en: Just think of this as being PyCharm without the UI. We’re connecting the frontend
    on our computer with the uploaded PyCharm backend on the remote.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 就把它想象成没有UI的PyCharm。我们正在将我们电脑上的前端与远程上传的PyCharm后端连接起来。
- en: Let’s bring our focus back to working on a project on the remote. Click the
    **Download IDE and Connect** button shown in *Figure 15**.23*.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把注意力重新集中在远程项目上。点击*图15.23*中显示的**下载IDE并连接**按钮。
- en: '![Figure 15.23: Click the button to create the project on the remote](img/B19644_15_023.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图15.23：点击按钮在远程创建项目](img/B19644_15_023.jpg)'
- en: 'Figure 15.23: Click the button to create the project on the remote'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.23：点击按钮在远程创建项目
- en: This next part takes a few minutes. After you click the **Download IDE and Connect**
    button, a delightful orchestration of commands runs on your remote. The result
    is a running IDE backend, as shown in *Figure 15**.24*.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的这部分需要几分钟时间。在您点击**下载IDE并连接**按钮后，一系列命令将在您的远程服务器上运行。结果是运行中的IDE后端，如图*图15.24*所示。
- en: '![Figure 15.24: You now have an IDE backend server running on the remote](img/B19644_15_024.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图15.24：现在您已经在远程运行了一个IDE后端服务器](img/B19644_15_024.jpg)'
- en: 'Figure 15.24: You now have an IDE backend server running on the remote'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.24：现在您已经在远程运行了一个IDE后端服务器
- en: Click the link shown back in *Figure 15**.11* to connect to your remote IDE.
    You will likely see password challenges, and maybe a note from Windows asking
    whether it’s OK to let the traffic through the firewall, but eventually, you’ll
    be live on the remote like I am in *Figure 15**.25*.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 点击*图15.11*中显示的链接来连接到您的远程IDE。您可能会看到密码挑战，也许会有Windows的提示，询问是否允许流量通过防火墙，但最终，您将像我在*图15.25*中一样在远程实时工作。
- en: '![Figure 15.25: Magical! It looks the same as working locally!](img/B19644_15_025.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图15.25：神奇！看起来和本地工作一样！](img/B19644_15_025.jpg)'
- en: 'Figure 15.25: Magical! It looks the same as working locally!'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.25：神奇！看起来和本地工作一样！
- en: 'From here, you mostly know what to do. Your IDE will function normally except
    for one step that was skipped: you were never prompted to create a virtual environment.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，您基本上知道该做什么。您的IDE将正常工作，除了一个被跳过的步骤：您从未被提示创建虚拟环境。
- en: Creating a virtual environment on the remote
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在远程创建虚拟环境
- en: We’ve done this before, in [*Chapter 3*](B19644_03.xhtml#_idTextAnchor052),
    so I won’t do another deep dive here, but there is one point that is confusing.
    Let’s look at it.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经做过这件事了，在[*第3章*](B19644_03.xhtml#_idTextAnchor052)，所以在这里我不会再次深入探讨，但有一个点可能会让人困惑。让我们来看看。
- en: To create a virtual environment you need to go to the project settings and locate
    the setting for the project’s interpreter. Mine is shown in *Figure 15**.26*.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个虚拟环境，您需要进入项目设置并找到项目解释器的设置。我的设置如*图15.26*所示。
- en: '![Figure 15.26: When you add the interpreter, remember that while it is remote,
    it is treated as local](img/B19644_15_026.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图15.26：当您添加解释器时，请记住，虽然它是远程的，但它被视为本地](img/B19644_15_026.jpg)'
- en: 'Figure 15.26: When you add the interpreter, remember that while it is remote,
    it is treated as local'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.26：当您添加解释器时，请记住，虽然它是远程的，但它被视为本地
- en: The interpreter has defaulted to `/usr/bin/python3.9`, which is the global instance
    and not what I want. When I click the **Add Interpreter** button it gets a little
    confusing. You might be tempted to use **On SSH** because, well, we’re using SSH
    to connect to the remote. However, we are connected to the remote already, so
    PyCharm is running on the remote, which makes it a local interpreter. When you
    click **Add Local Interpreter**, you’ll note like in *Figure 15**.14*, the path
    is Linux-like rather than a Windows path. This would be less obvious to macOS
    users since the pathing looks the same.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器默认为`/usr/bin/python3.9`，这是全局实例，不是我想要的。当我点击**添加解释器**按钮时，会有些困惑。您可能会倾向于使用**通过SSH**，因为，嗯，我们正在使用SSH连接到远程。然而，我们已经在远程连接上了，所以PyCharm在远程运行，这使得它成为一个本地解释器。当您点击**添加本地解释器**时，您会注意到，就像*图15.14*中显示的那样，路径是类似Linux的，而不是Windows路径。对于macOS用户来说，这可能会不太明显，因为路径看起来是一样的。
- en: Other considerations
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他注意事项
- en: Now that you have this setup, you are effectively running PyCharm on the remote
    computer. All your file paths will show as Linux paths. Git and other revision
    control clients work with the remote folder. If you use SSH keys to authenticate
    with GitHub or your revision control host, you will need to configure the keys
    from the remote rather than just using your local public keys. Essentially, forget
    about your local computer entirely. You are operating completely on the remote.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您有了这个设置，您实际上是在远程计算机上运行PyCharm。所有文件路径都将显示为Linux路径。Git和其他版本控制客户端与远程文件夹一起工作。如果您使用SSH密钥通过GitHub或您的版本控制主机进行身份验证，您需要从远程配置密钥，而不仅仅是使用您本地的公钥。本质上，完全忘记您的本地计算机。您完全在远程操作。
- en: '![Figure 15.27: Even though we picked the local option, everything happens
    on the remote](img/B19644_15_027.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图15.27：尽管我们选择了本地选项，但所有操作都在远程进行](img/B19644_15_027.jpg)'
- en: 'Figure 15.27: Even though we picked the local option, everything happens on
    the remote'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.27：尽管我们选择了本地选项，但所有操作都在远程进行
- en: Click `venv` has been created for the project. You are now ready to start working
    on your project!
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 点击`venv`已为项目创建。现在您可以开始工作在您的项目上了！
- en: Working with Docker
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker
- en: Container technology is one of the most important advances in DevOps technology
    since the virtual machine. **Docker** and similar container technologies have
    revolutionized the way software applications are developed, deployed, and managed.
    Imagine containers as lightweight, standalone units that encapsulate all the necessary
    components to run an application, including code, runtime, system libraries, and
    settings. This encapsulation ensures that the application runs consistently across
    different environments, from a developer’s laptop to production servers.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 容器技术是自虚拟机以来DevOps技术最重要的进步之一。**Docker**和类似的容器技术彻底改变了软件开发、部署和管理的方式。想象一下容器作为轻量级、独立的单元，封装了运行应用程序所需的所有必要组件，包括代码、运行时、系统库和设置。这种封装确保了应用程序在不同环境中的一致运行，从开发者的笔记本电脑到生产服务器。
- en: Docker, in particular, is a widely used platform for building, shipping, and
    running containers. It provides a standardized way to package applications and
    their dependencies, isolating them from the underlying host system. This isolation
    enables developers to avoid the notorious “*it works on my machine*” issue, as
    containers behave consistently across various environments.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Docker特别是一个广泛用于构建、运输和运行容器的平台。它提供了一种标准化的方式来打包应用程序及其依赖项，将它们与底层主机系统隔离开来。这种隔离使得开发者能够避免臭名昭著的“*在我的机器上它运行正常*”问题，因为容器在各种环境中表现一致。
- en: Another major advantage of containers is their portability. Developers can package
    an application and all its dependencies into a container image, which can then
    easily be shared with others. This makes collaboration more efficient and reduces
    the chances of compatibility issues. Furthermore, containers are highly scalable.
    They can be quickly replicated to handle increased workloads, offering an excellent
    solution for modern, dynamic, and resource-demanding applications.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的另一个主要优点是它们的可移植性。开发者可以将应用程序及其所有依赖项打包到容器镜像中，然后可以轻松与他人共享。这使得协作更加高效，并减少了兼容性问题的可能性。此外，容器具有高度的扩展性。它们可以快速复制以处理增加的工作负载，为现代、动态和资源密集型应用程序提供了一种出色的解决方案。
- en: Docker also brings about improved resource utilization. Since containers share
    the host operating system’s kernel, they are more lightweight than traditional
    virtual machines, which require separate operating systems. This translates to
    faster startup times, lower memory overhead, and a higher density of containerized
    applications on a single host.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Docker还带来了资源利用率的提高。由于容器共享主机操作系统的内核，它们比需要单独操作系统的传统虚拟机更轻量。这转化为更快的启动时间、更低的内存开销以及单个主机上容器化应用程序的更高密度。
- en: The bundled Docker plugin
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预装的Docker插件
- en: PyCharm Professional comes with the JetBrains Docker plugin already bundled
    and enabled. You don’t have to do anything further to use the Docker plugin. You
    do, however, need to install Docker. On my development computers, I usually run
    Docker Desktop because I find the product’s GUI useful. It will be useful today
    as I show you how much you can do in PyCharm with Docker.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm Professional已经预装并启用了JetBrains Docker插件。您无需进行任何其他操作即可使用Docker插件。然而，您确实需要安装Docker。在我的开发计算机上，我通常运行Docker
    Desktop，因为我发现产品的图形用户界面很有用。今天它将很有用，因为我将向您展示您可以在PyCharm中使用Docker完成多少工作。
- en: Let’s create a Flask project and run it in Docker.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个 Flask 项目并在 Docker 中运行它。
- en: Create the project
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目
- en: In PyCharm Professional, create a new Flask project. If you’re skipping around,
    I showed you how to do this in [*Chapter 8*](B19644_08.xhtml#_idTextAnchor203).
    You can see my project settings in *Figure 15**.28*.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PyCharm Professional 中创建一个新的 Flask 项目。如果你跳过了，我在 [*第 8 章*](B19644_08.xhtml#_idTextAnchor203)
    中展示了如何做。你可以在 *图 15.28* 中看到我的项目设置。
- en: '![Figure 15.28: Create a Flask project so we can run it in Docker](img/B19644_15_028.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.28：创建一个 Flask 项目以便我们在 Docker 中运行](img/B19644_15_028.jpg)'
- en: 'Figure 15.28: Create a Flask project so we can run it in Docker'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.28：创建一个 Flask 项目以便我们在 Docker 中运行
- en: We won’t be making any changes to the generated project except for adding a
    **Dockerfile**. *Figure 15**.29* shows me doing this.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会对生成的项目进行任何修改，除了添加一个 **Dockerfile**。*图 15.29* 展示了我这样做的过程。
- en: '![Figure 15.29: Right-click the project and click New | Dockerfile](img/B19644_15_029.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.29：右键单击项目并点击“新建”|“Dockerfile”](img/B19644_15_029.jpg)'
- en: 'Figure 15.29: Right-click the project and click New | Dockerfile'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.29：右键单击项目，然后点击“新建”|“Dockerfile”
- en: 'In the preceding figure, I’m right-clicking the project, hovering over **New**,
    and clicking the **Dockerfile** menu option. This generates a Dockerfile template
    for me with the following contents:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我正在右键单击项目，悬停在“新建”上，并点击“Dockerfile”菜单选项。这为我生成了一个包含以下内容的 Dockerfile 模板：
- en: '[PRE0]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first line indicates which Linux kernel will serve as the basis for our
    container image. I’m a pretty big fan of Ubuntu, but there are other possibilities.
    Alpine Linux is also very popular.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行指示哪个 Linux 内核将作为我们的容器镜像的基础。我非常喜爱 Ubuntu，但也有其他可能性。Alpine Linux 同样非常受欢迎。
- en: 'The second line is just what it says: a label for the image containing the
    author’s names. We don’t really need this, nor do we need the last line, at least
    in its current form. Let’s replace the generated template with something more
    useful. The corporation behind Docker maintains a large registry of pre-made containers
    you can use as a starting point for your work. Among them is a container with
    any given version of Python 3 already installed. I’m going to use Python 3.9,
    even though that isn’t the most current, because I happened to notice 3.9 is the
    version on my PC when I generated the sample project:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行正如其名：为包含作者名字的镜像添加标签。我们实际上并不需要这个，也不需要最后一行，至少在目前的格式下是这样。让我们用更有用的内容替换生成的模板。Docker
    背后的公司维护着一个庞大的预制作容器注册库，你可以将其作为工作的起点。其中就包括已经安装了任何给定版本的 Python 3 的容器。我将使用 Python
    3.9，尽管这并不是最新的版本，因为当我生成示例项目时，我恰好注意到我的电脑上安装的是这个版本：
- en: '[PRE1]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On the next line, I’ll set the working directory inside the container. The
    container has a minimal file system with limited space. This is where our app
    code will live:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行，我将设置容器内的工作目录。容器有一个最小化的文件系统，空间有限。我们的应用程序代码将存放在这里：
- en: '[PRE2]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, I need to instruct Docker to copy my requirements text file and use `pip`
    to install my project’s requirements:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我需要指示 Docker 复制我的 requirements 文本文件，并使用 `pip` 安装我的项目需求：
- en: '[PRE3]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, I’ll copy my code to the container:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我将把我的代码复制到容器中：
- en: '[PRE4]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `COPY` instruction will copy the entire contents of my project folder,
    which would include the `venv` folder. Since the `pip` command will install our
    requirements, we don’t need a `venv` folder. I’ll fix this in just a moment. My
    next step in this file is to expose port `5000` on the container’s firewall so
    I can access the app:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`COPY` 指令将复制我的项目文件夹的全部内容，包括 `venv` 文件夹。由于 `pip` 命令将安装我们的需求，我们不需要 `venv` 文件夹。我将在稍后解决这个问题。我在这份文件中的下一步是暴露容器防火墙上的端口
    `5000`，这样我就可以访问应用程序：'
- en: '[PRE5]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, I’ll define the command to run the Flask app when the container starts:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我将定义容器启动时运行的 Flask 应用程序的命令：
- en: '[PRE6]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To fix the copy problem, I’ll make a file in the project folder called `.dockerignore`.
    This works the same way a `.gitignore` works, except obviously it is used to set
    file exclusions for Docker. The contents of the `.dockerignore` file are simply
    this:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决复制问题，我将在项目文件夹中创建一个名为 `.dockerignore` 的文件。这和 `.gitignore` 的工作方式相同，但显然它是用来为
    Docker 设置文件排除的。`.dockerignore` 文件的内容很简单：
- en: '[PRE7]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Incidentally, you can find a plugin in Marketplace called `.ignore` that adds
    formatting to an array of ignore files.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，你可以在 Marketplace 中找到一个名为 `.ignore` 的插件，它为一系列忽略文件添加格式。
- en: Add a Docker run configuration
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 Docker 运行配置
- en: We covered creating and using run configurations in [*Chapter 3*](B19644_03.xhtml#_idTextAnchor052),
    so we won’t cover it again here. I’ll merely point out the option for creating
    a run configuration using Docker as seen in *Figure 15**.30*.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第3章*](B19644_03.xhtml#_idTextAnchor052)中介绍了创建和使用运行配置，所以这里不再赘述。我只会指出如何使用Docker创建运行配置，如图15.30所示。
- en: x
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: x
- en: '![Figure 15.30: Use the Dockerfile option to create a run configuration that
    uses Docker](img/B19644_15_030.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图15.30：使用Dockerfile选项创建使用Docker的运行配置](img/B19644_15_030.jpg)'
- en: 'Figure 15.30: Use the Dockerfile option to create a run configuration that
    uses Docker'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.30：使用Dockerfile选项创建使用Docker的运行配置
- en: Much of your run configuration will be filled in for you. PyCharm will see your
    Dockerfile and use that as the default. My settings are shown in *Figure 15**.31*.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您的许多运行配置将自动填写。PyCharm会看到您的Dockerfile并将其用作默认设置。我的设置如图15.31所示。
- en: '![Figure 15.31: My Docker configuration](img/B19644_15_031.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![图15.31：我的Docker配置](img/B19644_15_031.jpg)'
- en: 'Figure 15.31: My Docker configuration'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.31：我的Docker配置
- en: If we were to run this, Docker would pull the Python 3.9 image, make a container,
    and run the app. If we actually want to use the app, there’s one more thing we
    need to do. The arrow in *Figure 15**.31* points to a menu that allows you to
    tailor your `docker run` command. There are normally things you’ll want to do
    here depending on your app, such as mapping persistent storage volumes, or in
    our case mapping the port in the container to the port on our local computer.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这个，Docker将拉取Python 3.9镜像，创建一个容器并运行应用。如果我们实际上想使用应用，我们还需要做一件事。图15.31中的箭头指向一个菜单，允许您定制您的`docker
    run`命令。根据您的应用，这里通常有一些您想做的事情，例如映射持久存储卷，或者在我们的情况下，将容器中的端口映射到本地计算机的端口。
- en: Click **Modify** | **Bind** **ports**, as shown in *Figure 15**.32*.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如图15.32所示，点击**修改** | **绑定端口**。
- en: '![Figure 15.32: You have to add a bind port for the Docker container in order
    to see the application running from your browser](img/B19644_15_032.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图15.32：为了从浏览器中看到应用运行，您必须为Docker容器添加一个绑定端口](img/B19644_15_032.jpg)'
- en: 'Figure 15.32: You have to add a bind port for the Docker container in order
    to see the application running from your browser'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.32：为了从浏览器中看到应用运行，您必须为Docker容器添加一个绑定端口
- en: Once you click the **Bind ports** option, PyCharm adds a configuration parameter
    for **Bind ports**. Oddly, there is a folder icon indicated by the right arrow
    in *Figure 15**.33*.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击**绑定端口**选项，PyCharm会为**绑定端口**添加一个配置参数。奇怪的是，图15.33中由右箭头指示的文件夹图标。
- en: '![Figure 15.33: Click the folder to bring up the Port Bindings dialog and set
    the port mapping](img/B19644_15_033.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图15.33：点击文件夹以打开端口绑定对话框并设置端口映射](img/B19644_15_033.jpg)'
- en: 'Figure 15.33: Click the folder to bring up the Port Bindings dialog and set
    the port mapping'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.33：点击文件夹以打开端口绑定对话框并设置端口映射
- en: It’s odd because we won’t be browsing for a file or folder. When you click it,
    you get a `5000`, so all you need to do is specify a binding between `5000` on
    the container and `5000` on your computer. Click **OK** until you’re out of the
    run configuration. Run the run configuration. We explained run configurations
    way back in [*Chapter 3*](B19644_03.xhtml#_idTextAnchor052), so if you’re joining
    us late, go back and review.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这很奇怪，因为我们不会浏览文件或文件夹。当您点击它时，您得到一个`5000`，所以您只需要指定容器中的`5000`与您计算机上的`5000`之间的绑定。点击**确定**直到您离开运行配置。运行运行配置。我们早在[*第3章*](B19644_03.xhtml#_idTextAnchor052)中解释了运行配置，所以如果您是后来加入的，请返回并复习。
- en: You should be treated to a textual light-show as Docker downloads the chunks
    to the container image, builds the container, and finally runs the app. You can
    see mine running in *Figure 15**.34*.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 当Docker将数据块下载到容器镜像中，构建容器并最终运行应用时，您将看到一个文本光秀。您可以在图15.34中看到我的应用正在运行。
- en: '![Figure 15.34: My Flask app is running in a Docker container](img/B19644_15_034.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图15.34：我的Flask应用正在Docker容器中运行](img/B19644_15_034.jpg)'
- en: 'Figure 15.34: My Flask app is running in a Docker container'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.34：我的Flask应用正在Docker容器中运行
- en: If you care to compare the UI for Docker versus Docker Desktop, you’ll see many
    of the same features exist. A quick tour is shown in *Figure 15**.35*.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想比较Docker与Docker Desktop的用户界面，您会发现许多相同的功能。快速浏览如图15.35所示。
- en: '![Figure 15.35: PyCharm has many of the features you’d expect from a competent
    Docker UI](img/B19644_15_035.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图15.35：PyCharm拥有您从强大的Docker UI中期望的许多功能](img/B19644_15_035.jpg)'
- en: 'Figure 15.35: PyCharm has many of the features you’d expect from a competent
    Docker UI'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.35：PyCharm 拥有来自一个有能力的 Docker UI 的许多你期望的功能
- en: At position (**1**) we can see three tabs. **Build Log** allows us to examine
    the output generated when Docker built the container from our Dockerfile. We have
    some basic controls to stop and restart the container at (**2**). Naturally, when
    the container is stopped, the option to start it will appear here as well. Then
    perhaps most usefully, you can use the **Terminal** button (**3**) to start a
    terminal session inside the container.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在位置（**1**）我们可以看到三个标签页。**构建日志**允许我们检查当 Docker 从我们的 Dockerfile 构建容器时生成的输出。我们在（**2**）处有一些基本控制来停止和重新启动容器。当然，当容器停止时，启动它的选项也会出现在这里。然后可能是最有用的，你可以使用**终端**按钮（**3**）在容器内启动一个终端会话。
- en: On the left side (**4**) we see a full display showing all our running containers,
    downloaded images, networks, and mounted volumes.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧（**4**）我们可以看到一个全屏显示，显示了所有我们的运行容器、下载的镜像、网络和挂载的卷。
- en: In sum, you can really do almost anything in PyCharm that you can do in Docker
    Desktop. Once again, PyCharm’s mission to give you an integrated experience with
    one of the most important technologies in use today is fully realized!
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，你几乎可以在 PyCharm 中做任何你可以在 Docker Desktop 中做的事情。再次强调，PyCharm 的使命是为你提供一种与当今使用的重要技术之一集成的体验，这一使命已经完全实现！
- en: Summary
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: PyCharm plugins are customized add-ons that can further add to the list of features
    and functionalities one can take advantage of while using PyCharm. We have seen
    how to browse through, download, and manage different plugins in the PyCharm environment.
    By taking advantage of these plugins, we can further customize our workspace and
    improve our own productivity. Plugin management in PyCharm can be done in the
    **Plugins** tab in the settings.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm 插件是定制附加组件，可以在使用 PyCharm 时进一步添加可利用的功能和功能列表。我们已经看到了如何在 PyCharm 环境中浏览、下载和管理不同的插件。通过利用这些插件，我们可以进一步定制我们的工作空间并提高我们的生产力。在
    PyCharm 中的插件管理可以在设置中的**插件**标签页中完成。
- en: We looked at some simple plugins to enhance your quality of life while coding,
    such as theme plugins and some useful file handlers. We looked at one of my favorites,
    GitToolbox, which allows you to see a lot more details from your Git repository
    right in your IDE window.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看了一些简单的插件，以增强你在编码时的生活质量，例如主题插件和一些有用的文件处理器。我们查看了我最喜欢的一个，GitToolbox，它允许你在你的
    IDE 窗口中看到更多来自你的 Git 仓库的详细信息。
- en: We then branched out and looked at some very big-feature plugins that are fairly
    new to PyCharm 2023\. Remote development is very useful in a post-pandemic world
    where more and more of us find ourselves working remotely. Even if you’re not,
    chances are you’re finding yourself working increasingly with cloud servers and
    virtual machines rather than always using the hard drive on your local laptop.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后扩展了范围，查看了一些在 PyCharm 2023 中相对较新的具有很多功能的插件。在疫情之后的世界里，越来越多的人远程工作，远程开发非常有用。即使你不是远程工作，你也很可能发现自己越来越多地与云服务器和虚拟机一起工作，而不是总是使用本地笔记本电脑上的硬盘。
- en: Another big advance is PyCharm’s support for Docker. The bundled Docker plugin
    provides full integration, from giving you autocomplete and syntax highlighting
    in Dockerfiles and composer files to a full GUI for managing your containers.
    You’ll find yourself never needing to leave PyCharm to jump over to Docker Desktop
    to handle your Docker operations. Naturally, if you’d like to, you’ll find both
    environments fully synchronized, and you could also use the **Terminal** window
    in PyCharm to interact with your containers that way if that is your preference.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重大进步是 PyCharm 对 Docker 的支持。捆绑的 Docker 插件提供了完整的集成，从在 Dockerfile 和 composer
    文件中提供自动完成和语法高亮，到管理你的容器的完整 GUI。你会发现你永远不需要离开 PyCharm 跳转到 Docker Desktop 来处理你的 Docker
    操作。当然，如果你愿意，你将发现这两个环境完全同步，你也可以根据你的偏好，在 PyCharm 的**终端**窗口中与你的容器进行交互。
- en: Plugins are responsible for adding a lot of very cool and very useful features
    to our IDE. There are a few plugins that I didn’t cover because, to be honest,
    they’re not quite ready yet. I have some access to some closed beta features and
    some buried gems I want to cover in the next chapter. I can’t wait to show you
    some of the things that are coming up in future releases!
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 插件负责为我们 IDE 添加许多非常酷且非常有用的功能。有一些插件我没有涉及，因为坦白说，它们还没有完全准备好。我有一些访问一些封闭的测试功能和一些隐藏的宝石，我想要在下一章中介绍。我迫不及待地想向你展示一些即将在未来的版本中出现的功能！
