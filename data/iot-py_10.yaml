- en: Chapter 10. Analyzing Huge Amounts of Data with Cloud-based IoT Analytics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 使用基于云的物联网分析分析大量数据
- en: 'In this chapter, we will work with Intel IoT Analytics to analyze huge amounts
    of data with this powerful cloud-based service. We will:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用英特尔物联网分析，利用这个强大的基于云的服务来分析大量数据。我们将：
- en: Understand the relationship between Internet of Things and Big Data
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解物联网与大数据之间的关系
- en: Learn the Intel IoT Analytics structure
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习英特尔物联网分析的结构
- en: Set up devices in Intel IoT Analytics
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在英特尔物联网分析中设置设备
- en: Configure components in Intel IoT Analytics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在英特尔物联网分析中配置组件
- en: Collect sensor data with Intel IoT Analytics
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用英特尔物联网分析收集传感器数据
- en: Analyze sensor data with Intel IoT Analytics
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用英特尔物联网分析分析传感器数据
- en: Trigger alerts with rules in Intel IoT Analytics
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在英特尔物联网分析中使用规则触发警报
- en: Understanding the relationship between Internet of Things and Big Data
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解物联网与大数据之间的关系
- en: Big Data is watching us. We are generating valuable data each time we perform
    an action without even knowing that. Every time we tap, click, tweet, stop on
    a red light signal, hop on a bus, or perform an action caught by the millions
    of real-time sensors in any city around the world, we are generating valuable
    data. We interact with IoT devices that have sensors, collect data, and publish
    it to the Cloud. In order to analyze and process Big Data, managers, architects,
    developers, and system administrators require many skills that were not necessary
    for applications that worked with smaller data sets.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 大数据在监视我们。每次我们执行一个动作，即使我们不知道，我们都在生成有价值的数据。每次我们轻触、点击、发推文、在红灯信号前停下、乘坐公交车，或者在世界任何城市的数百万个实时传感器捕捉到的任何动作，我们都在生成有价值的数据。我们与具有传感器的物联网设备互动，收集数据并将其发布到云端。为了分析和处理大数据，管理者、架构师、开发人员和系统管理员需要许多在处理较小数据集的应用程序中并不必要的技能。
- en: We have been working with examples that collected data from the real world through
    sensors and published it to the Cloud. We also published messages that include
    data from sensors and commands that have to be processed by code running on an
    IoT device. Sometimes, we are retrieving data from the sensors every second. Thus,
    it is very easy to realize that we generate huge amounts of data, and therefore,
    it is very important to learn many things related to Big Data. Internet of Things
    comprises Big Data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在使用示例，通过传感器从现实世界收集数据并将其发布到云端。我们还发布了包含传感器数据和必须由物联网设备上运行的代码处理的命令的消息。有时，我们每秒从传感器中检索数据。因此，很容易意识到我们正在生成大量数据，因此，学习与大数据相关的大量知识非常重要。物联网包含大数据。
- en: 'Imagine we write Python code that runs on an Intel Galileo Gen 2 board and
    performs the following actions every second:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们编写了在英特尔Galileo Gen 2板上运行的Python代码，并且每秒执行以下操作：
- en: Read the measured ambient temperature from a temperature and humidity sensor
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从温度和湿度传感器中读取测量的环境温度
- en: Read the measured ambient humidity level from a temperature and humidity sensor
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从温度和湿度传感器中读取测量的环境湿度水平
- en: Read the measured volumetric water content in soil from ten soil moisture sensor
    that measure the values in different locations
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从测量值位于不同位置的十个土壤湿度传感器中读取测量的体积水含量
- en: Publish a message with the ambient temperature, ambient humidity, and the ten
    volumetric water contents
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布包含环境温度、环境湿度和十个体积水含量的消息
- en: The first things that might come to our mind are the number of sensors we have
    to connect to our board. Let's consider that all the sensors are digital sensors
    and we have to connect them to the I²C bus. We can connect the digital temperature
    and humidity sensor plus then ten soil-moisture sensors to the I²C bus as long
    as all the sensors have different I²C bus addresses. We just need to make sure
    that we can configure the I²C bus address for the soil moisture sensors and we
    can assign a different I²C address to each of these sensors.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可能首先出现在我们脑海中的是我们需要连接到板上的传感器数量。让我们假设所有的传感器都是数字传感器，并且我们必须将它们连接到I²C总线上。只要所有传感器都有不同的I²C总线地址，我们就可以将数字温度和湿度传感器以及十个土壤湿度传感器连接到I²C总线上。我们只需要确保我们可以配置土壤湿度传感器的I²C总线地址，并且我们可以为这些传感器中的每一个分配不同的I²C地址。
- en: 'Catnip Electronics designed a digital soil moisture sensor that provides an
    I²C interface and one of its features is that it allows an I²C address change.
    The default I²C address for this sensor is 0x20 (hexadecimal 20) but we can easily
    change it. We just need to connect each sensor to the I²C bus, write the new address
    to register one and the new address will take effect after we reset the sensor.
    We just need to write a 6 to the sensor''s I²C address to reset the sensor. We
    can follow the same procedure for all the sensors and assign different I²C addresses
    to them. You can read more about the digital soil moisture sensor in the following
    webpage: [http://www.tindie.com/products/miceuz/i2c-soil-moisture-sensor](http://www.tindie.com/products/miceuz/i2c-soil-moisture-sensor).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Catnip Electronics设计了一种数字土壤湿度传感器，它提供了一个I²C接口，其一个特性是它允许更改I²C地址。该传感器的默认I²C地址为0x20（十六进制20），但我们可以轻松地更改它。我们只需将每个传感器连接到I²C总线，将新地址写入寄存器，并在重置传感器后，新地址将生效。我们只需将6写入传感器的I²C地址即可重置传感器。我们可以对所有的传感器执行相同的程序，并为它们分配不同的I²C地址。您可以在以下网页上了解更多关于数字土壤湿度传感器的信息：[http://www.tindie.com/products/miceuz/i2c-soil-moisture-sensor](http://www.tindie.com/products/miceuz/i2c-soil-moisture-sensor)。
- en: 'We want to analyze hourly, daily, monthly, quarterly, and yearly data. However,
    we do need to measure every second and not every single day because it is very
    important to analyze how data changes per second. We are going to collect the
    following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望分析每小时、每天、每月、每季度和每年的数据。然而，我们确实需要每秒测量一次，而不是每天测量一次，因为分析数据每秒的变化非常重要。我们将收集以下数据：
- en: 60 measurements for all the variables per minute
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每分钟对所有变量进行60次测量
- en: 3,600 (60 * 60) measurements per hour
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每小时3,600（60 * 60）次测量
- en: 86,400 (3,600 x 24) measurements per day
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每天进行86,400（3,600 x 24）次测量
- en: 31,536,000 (86,400 * 365) measurements per year (considering that we aren't
    talking about a leap year)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每年31,536,000（86,400 * 365）次测量（考虑到我们不是在谈论闰年）
- en: 'We won''t have just one IoT device collecting data and publishing it. We will
    have 3,000 IoT devices running the same code and they will generate 94,608,000,000
    (31,356,300 * 3,000), that is, ninety-four billion six hundred eight million,
    measurements per year. In addition, we have other data sources that we have to
    analyze: all the tweets about weather related issues in the locations in which
    the sensors are capturing data. Thus, we have huge volumes of both structured
    and unstructured data that we want to analyze computationally, to reveal patterns
    and associations. We are definitely talking about Big Data practices.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会只有一个物联网设备收集数据并发布它。我们将有3,000个物联网设备运行相同的代码，并且它们每年将生成94,608,000,000（31,356,300
    * 3,000），即九百四十亿六千八百万次测量。此外，我们还有其他必须分析的数据来源：所有关于传感器捕获数据位置天气相关问题的推文。因此，我们拥有大量结构化和非结构化数据，我们希望对其进行计算分析，以揭示模式和关联。我们无疑是在谈论大数据实践。
- en: The sample numbers are useful to understand the relationship between Big Data
    and IoT. We won't deploy 3,000 boards for our next example and we won't cover
    all the topics related to IoT analytics and Big Data because it would be out of
    the scope of this book. However, we will work with the cloud-based analytics system
    that works with a component included in the Intel IoT Development Kit image that
    we have been using to boot the board with the Yocto Linux meta distribution in
    [Chapter 2](ch02.html "Chapter 2. Working with Python on Intel Galileo Gen 2"),
    *Working with Python on Intel Galileo Gen 2*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 样本数量有助于理解大数据和物联网之间的关系。在下一个示例中，我们不会部署3,000块板，也不会涵盖与物联网分析和大数据相关的所有主题，因为这超出了本书的范围。然而，我们将使用基于云的分析系统，该系统与我们在[第2章](ch02.html
    "第2章。在英特尔Galileo Gen 2上使用Python")中使用的英特尔物联网开发套件镜像中的组件一起工作，以使用Yocto Linux元分布启动板。
- en: Understanding the Intel IoT Analytics structure
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解英特尔物联网分析结构
- en: Imagine that we have to collect and analyze sensor data for 3,000 IoT devices,
    that is, 3,000 Intel Galileo Gen 2 boards running the Python code that interacts
    with sensors. We would need to invest in the storage and processing capacity to
    perform IoT analytics with such a huge amount of data. Whenever we have a similar
    requirement, we can take advantage of a cloud-based solution. Intel IoT Analytics
    is one of them and it works very well with the Intel Galileo Gen 2 board and Python.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要收集和分析 3,000 个物联网设备的数据，即 3,000 个运行与传感器交互的 Python 代码的 Intel Galileo Gen
    2 板。我们需要投资存储和处理能力来处理如此大量的物联网分析数据。每当我们有类似的需求时，我们可以利用基于云的解决方案。Intel IoT Analytics
    就是其中之一，它与 Intel Galileo Gen 2 板和 Python 非常兼容。
- en: 'Intel IoT Analytics requires us to sign up, create an account with a valid
    e-mail and a password, and click on the activation link of a confirmation e-mail
    before we can publish the sensor data using their free services. We aren''t required
    to enter any credit card or payment information. If you already have an account
    at Intel IoT Analytics, you can skip this step. You can also use your existing
    Facebook, Google+, or GitHub account to log in. The following is the main web
    page for the Intel IoT Analytics site: [https://dashboard.us.enableiot.com](https://dashboard.us.enableiot.com).
    Make sure to review the terms and conditions before you use this cloud-based service
    with sensitive data.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Intel IoT Analytics 要求我们注册，使用有效的电子邮件地址和密码创建账户，并在发布传感器数据之前点击确认电子邮件的激活链接。我们不需要输入任何信用卡或支付信息。如果您已经在
    Intel IoT Analytics 上有账户，您可以跳过此步骤。您也可以使用现有的 Facebook、Google+ 或 GitHub 账户登录。以下是
    Intel IoT Analytics 网站的主页：[https://dashboard.us.enableiot.com](https://dashboard.us.enableiot.com)。在使用此基于云的服务处理敏感数据之前，请务必查看条款和条件。
- en: 'Once you create your account and log in for the first time to Intel IoT Analytics,
    the site will display the **Create new Account** page. Enter the desired name
    to identity the account, that is, your analytics project in **Account Name**.
    Enter `Temperature and humidity` for our example and leave the default option
    for **Sensor health report**. Then, click **Create** and the site will display
    the **My Dashboard** page for the recently created account. Each account represents
    a separate workspace with its own set of sensors and related data. The site allows
    us to create more than one account and easily switch between them. The following
    screenshot shows the initial view for the **My Dashboard** page after we created
    a new account:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在 Intel IoT Analytics 上创建账户并首次登录，网站将显示**创建新账户**页面。输入您希望用于识别账户的名称，即您的分析项目在**账户名称**中。以我们的示例为例，输入`温度和湿度`，并保留**传感器健康报告**的默认选项。然后，点击**创建**，网站将显示为最近创建的账户的**我的仪表板**页面。每个账户代表一个独立的工作空间，拥有自己的传感器和相关数据集。网站允许我们创建多个账户，并轻松地在它们之间切换。以下截图显示了创建新账户后**我的仪表板**页面的初始视图：
- en: '![Understanding the Intel IoT Analytics structure](img/B05042_10_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![理解 Intel IoT Analytics 结构](img/B05042_10_01.jpg)'
- en: The **My Dashboard** page indicates that we still don't have registered devices,
    and therefore, we don't have either transmitting devices or observations. Each
    time we publish data from a registered device to Intel IoT Analytics, we create
    an observation for the device. Thus, the **My Dashboard** page provides the number
    of last observations in a specific period. By default, the page displays the sum
    of the last hour observations for all the registered devices. Keep the web site
    opened in your web browser because we will continue working with it later.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**我的仪表板**页面表明我们尚未注册任何设备，因此我们也没有传输设备或观测数据。每次我们从注册设备向 Intel IoT Analytics 发布数据时，我们都会为该设备创建一个观测数据。因此，**我的仪表板**页面提供了特定时间段内最后观测数据的数量。默认情况下，页面显示所有注册设备过去一小时的观测数据总和。请保持您的网页浏览器打开，因为我们稍后将继续使用它。'
- en: As a user, we can work with many accounts. Each account can contain many devices,
    has a name and an identifier known as `accountId`. Each device has a globally
    unique identifier known as `deviceId`. So, each Intel Galileo Gen 2 board that
    includes sensors will become one device for the account we have created. In our
    case, we will just work with a single Intel Galileo Gen 2 board. However, remember
    that our goal is to demonstrate how we can work with 3,000 IoT devices handled
    by a single account.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 作为用户，我们可以与许多账户一起工作。每个账户可以包含许多设备，有一个名称和一个称为`accountId`的标识符。每个设备都有一个称为`deviceId`的全局唯一标识符。因此，每个包含传感器的英特尔Galileo
    Gen 2板将为我们创建的账户成为一台设备。在我们的情况下，我们只需与一个英特尔Galileo Gen 2板一起工作。然而，请记住，我们的目标是展示我们如何与单个账户处理的3,000个物联网设备一起工作。
- en: 'We can think of each device as an endpoint that contains one or more components
    that can provide one of the following in Intel IoT Analytics:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将每个设备视为一个端点，该端点包含一个或多个组件，这些组件可以在英特尔物联网分析中提供以下之一：
- en: '**Actuator**: A setting that can be modified on a device. For example, rotate
    the angle of a servo''s shaft or turn on an LED.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行器**：可以在设备上修改的设置。例如，旋转伺服轴的角度或打开LED。'
- en: '**Time series**: A series of values captured from a sensor, that is, a collection
    of observations. For example, a collection of observations with ambient temperature
    values retrieved with a temperature and humidity sensor, expressed in degrees
    Fahrenheit and including timestamps.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间序列**：从传感器捕获的一系列值，即观测值的集合。例如，使用温度和湿度传感器检索的环境温度值集合，以华氏度表示，包括时间戳。'
- en: 'In our case, we need a device to use the following components that will retrieve
    the values from the digital temperature and humidity sensor connected to our board:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们需要一个设备来使用以下组件，这些组件将从连接到我们板上的数字温度和湿度传感器中检索值：
- en: A time series with ambient temperature observations expressed in degrees Fahrenheit
    (ºF)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个以华氏度（ºF）表示的环境温度观测的时间序列
- en: A time series with ambient temperature observations expressed in degrees Celsius
    (ºC)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个以摄氏度（ºC）表示的环境温度观测的时间序列
- en: A time series with ambient humidity level observations expressed in percentage
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个以百分比表示的环境湿度水平观测的时间序列
- en: First, we will work with the UI provided by the Intel IoT Analytics web site
    in combination with the `iotkit-admin` utility to set up the device, activate
    it and register the three components included in the previous list. This way,
    we will learn to work with the structure required by Intel IoT Analytics. Then,
    we will write Python code that uses the REST API to create observations for the
    defined components that belong to an activated device included in our recently
    created account.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将结合使用英特尔物联网分析网站提供的UI和`iotkit-admin`实用程序来设置设备、激活它并注册之前列表中包含的三个组件。这样，我们将学会与英特尔物联网分析所需的结构一起工作。然后，我们将编写Python代码，使用REST
    API为属于我们最近创建的账户中已激活设备的定义组件创建观测值。
- en: We can also the REST API to perform the previously explained setup tasks by
    writing a Python code. In case we have to work with more than a dozen devices,
    we won't want to perform the setup tasks by working with the UI provided by the
    Intel IoT Analytics web site, we would definitely want to write code that automates
    the setup tasks.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过编写Python代码来使用REST API执行之前解释的设置任务。如果我们必须与超过一打设备一起工作，我们不会想通过使用英特尔物联网分析网站提供的UI来执行设置任务，我们肯定会想编写自动化设置任务的代码。
- en: Setting up devices in Intel IoT Analytics
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在英特尔物联网分析中设置设备
- en: 'The image that we have been using to boot our Intel Galileo Gen 2 board includes
    a local agent for Intel IoT Analytics preinstalled. Unless we have made specific
    changes to the Yocto Linux meta distribution to disable specific components, we
    will have the agent running as a daemon on the device. The agent includes the
    `iotkit-admin` command-line utility that allows us to perform specific interactions
    with Intel IoT Analytics. We will use this command-line utility to perform the
    following tasks:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用来启动英特尔Galileo Gen 2板的映像中预装了英特尔物联网分析的本地代理。除非我们对Yocto Linux meta分布进行了特定更改以禁用特定组件，否则代理将以守护进程的形式在设备上运行。代理包括`iotkit-admin`命令行实用程序，允许我们与英特尔物联网分析进行特定交互。我们将使用此命令行实用程序执行以下任务：
- en: Test the proper communication with Intel IoT Analytics
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试与英特尔物联网分析的正确通信
- en: Obtain the device id
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取设备ID
- en: Activate a device
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激活设备
- en: Register three time series components for the device.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为设备注册三个时间序列组件。
- en: Send test observations
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送测试观测值
- en: 'First, we will check whether the `iotkit-admin` command-line utility can establish
    proper communication with Intel IoT Analytics. We just need to run the following
    command in the SSH terminal:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将检查`iotkit-admin`命令行工具是否能够与英特尔物联网分析服务建立适当的通信。我们只需在SSH终端中运行以下命令：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If the connection is successful, we will see lines similar to the following
    ones. The last line provides information about the build, that is, the version.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接成功，我们将看到类似以下的一些行。最后一行提供了有关构建的信息，即版本。
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, run the following command in the SSH terminal to obtain the device ID,
    also known as `deviceId`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在SSH终端中运行以下命令以获取设备ID，也称为`deviceId`：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The previous command will generate an output line such as the following one
    with the device ID. By default, the device ID is equal to the MAC address of the
    network interface card.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上一条命令将生成类似以下行的输出行，其中包含设备ID。默认情况下，设备ID等于网络接口卡的MAC地址。
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can use the following command to change the device ID to a different one:
    `iotkit-admin set-device-id new-device-id`. You just need to replace `new-device-id`
    with the new device id you want to set up for your device. However, bear in mind
    the new device ID must be a globally unique identifier.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令将设备ID更改为不同的一个：`iotkit-admin set-device-id new-device-id`。您只需将`new-device-id`替换为您为设备设置的新的设备ID。然而，请注意，新的设备ID必须是一个全局唯一标识符。
- en: In this case, we will use `kansas-temperature-humidity-01` as our device ID
    for all our samples. You must replace it in all the commands, then include this
    name with the device name you retrieved or the new device ID you assign to the
    device.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将使用`kansas-temperature-humidity-01`作为我们所有示例的设备ID。您必须在所有命令中替换它，然后包括您检索到的设备名称或分配给设备的新的设备ID。
- en: 'The following command in the SSH terminal will rename the device:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在SSH终端中运行的以下命令将重命名设备：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following lines show the output for the previous command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了上一条命令的输出：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Go to the web browser in which you are working with the Intel IoT Analytics
    dashboard, click on the menu icon (a button with three horizontal lines located
    at the upper-left corner). Select **Account** and the site will display the **My
    Account** page with detailed information about the account we previously created.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 前往您正在使用的英特尔物联网分析仪表板的网页浏览器，点击菜单图标（位于左上角的一个有三个横线的按钮）。选择**账户**，网站将显示我们之前创建的账户的**我的账户**页面，其中包含详细的账户信息。
- en: 'The initial view will display the **Details** tab. In case the **Activation
    Code** includes the **(Code Expired)** text, it means that the activation code
    is not valid anymore and it is necessary to click on the refresh icon located
    on the right-hand side of the **Activation Code** textbox (the second icon with
    the two arrows). We have to make sure that the activation code hasn''t expired
    in order to activate the device successfully. The following screenshot gives the
    initial view for the **My Account** page for the **Temperature and humidity**
    account with the activation code expired:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 初始视图将显示**详细信息**选项卡。如果**激活码**包含**（代码已过期）**文本，则意味着激活码已不再有效，并且有必要点击位于**激活码**文本框右侧的刷新图标（第二个带有两个箭头的图标）。我们必须确保激活码尚未过期，以便成功激活设备。以下截图显示了**我的账户**页面的初始视图，对于**温度和湿度**账户，激活码已过期：
- en: '![Setting up devices in Intel IoT Analytics](img/B05042_10_02.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![在英特尔物联网分析中设置设备](img/B05042_10_02.jpg)'
- en: Once you refresh the activation code by clicking on the refresh button, a countdown
    stopwatch will indicate the time left for the activation code until it expires.
    You will have one hour after you click on the refresh button. Click on the eye
    icon to view the hidden activation code and copy it. We will use `01aCti0e` as
    our sample activation code and you will have to replace it with your activation
    code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您通过点击刷新按钮刷新激活码，倒计时计时器将指示激活码到期前的剩余时间。您在点击刷新按钮后将有一个小时。点击眼睛图标以查看隐藏的激活码并复制它。我们将使用`01aCti0e`作为我们的示例激活码，您必须将其替换为您自己的激活码。
- en: Now, run the following command in the SSH terminal to activate the device with
    the previously generated activation code. Replace `01aCti0e` with your activation
    code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在SSH终端中运行以下命令以使用之前生成的激活码激活设备。将`01aCti0e`替换为您的激活码。
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The previous command will generate an output similar to the following lines:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上一条命令将生成类似以下行的输出：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Our Intel Galileo Gen 2 board, that is, the device, is now associated with the
    **Temperature and humidity** account that provided us with the activation code
    and the command generated the necessary security credentials, that is, the device
    token.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将英特尔Galileo Gen 2板，即设备，与提供激活代码并生成必要安全凭证（即设备令牌）的**温度和湿度**账户关联起来。
- en: 'Go to the web browser in which you are working with the Intel IoT Analytics
    dashboard, click on the menu icon (a button with three horizontal lines located
    at the upper-left corner). Select **Devices** and the site will display the **My
    Devices** page with the list of all the devices that we have activated for the
    current account. The previously activated `kansas-temperature-humidity-01` device
    will appear in the list with **Kansas-temperature-humidity-01-NAME** in its **Name**
    column and **active** in the **Status** column. The following screenshot shows
    the device listed in the **My Devices** page:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您正在使用英特尔物联网分析仪表板的浏览器，点击菜单图标（位于左上角的一个有三个水平线的按钮）。选择**设备**，网站将显示包含我们为当前账户激活的所有设备的**我的设备**页面。之前激活的
    `kansas-temperature-humidity-01` 设备将出现在列表中，其**名称**列为**Kansas-temperature-humidity-01-NAME**，**状态**列为**active**。以下截图显示了**我的设备**页面中的设备列表：
- en: '![Setting up devices in Intel IoT Analytics](img/B05042_10_03.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![在英特尔物联网分析中设置设备](img/B05042_10_03.jpg)'
- en: Click on the device **Id** in the previous list (**kansas-temperature-humidity-01**)
    to see and edit the device details. You can add tags and attributes to make it
    easier to filter the devices in the previous list. These possibilities are extremely
    useful when we have to work with more than a dozen devices as they make it easy
    for us to filter the devices in the list.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 点击前一个列表中的设备**ID**（**kansas-temperature-humidity-01**）以查看和编辑设备详细信息。您可以添加标签和属性，以便更容易过滤前一个列表中的设备。当我们需要处理超过一打设备时，这些功能非常有用，因为它们使我们能够轻松过滤列表中的设备。
- en: Setting up components in Intel IoT Analytics
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在英特尔物联网分析中设置组件
- en: 'Go to the web browser in which you are working with the Intel IoT Analytics
    dashboard, click on the menu icon, select **Account** and the site will display
    the **My Account** page. Then, click on the **Catalog** tab and the site will
    display the components registered in the catalog grouped in the following three
    categories:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您正在使用英特尔物联网分析仪表板的浏览器，点击菜单图标，选择**账户**，网站将显示**我的账户**页面。然后，点击**目录**选项卡，网站将显示按以下三个类别分组的目录中注册的组件：
- en: Humidity
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 湿度
- en: Powerswitch
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Powerswitch
- en: Temperature
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 温度
- en: 'Make sure that the **Humidity** components panel is expanded and click on **humidity.v1.0**.
    The site will display the **Component definition** dialog box for the **humidity.v1.0**
    component, that is, the component named **humidity** whose version is `1.0`. The
    following screenshot shows the values for the different fields in the component
    definition:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 确保已展开**湿度**组件面板，然后点击**humidity.v1.0**。网站将显示**humidity.v1.0**组件的**组件定义**对话框，即版本为
    `1.0` 的名为**humidity**的组件。以下截图显示了组件定义中不同字段的值：
- en: '![Setting up components in Intel IoT Analytics](img/B05042_10_04.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![在英特尔物联网分析中设置组件](img/B05042_10_04.jpg)'
- en: The `humidity` component version `1.0` represents a time series with ambient
    humidity level expressed in percentage. The **Data type** is **Number**, the **Unit
    of measure** is **Percent (%)**, the **Format** is **Float** and the **Display**
    is **Time Series**. We can use this component for our ambient humidity level observations.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 版本为 `1.0` 的 `humidity` 组件表示一个以百分比表示的环境湿度水平的时间序列。**数据类型**是**数字**，**计量单位**是**百分比
    (%)**，**格式**是**浮点数**，**显示**为**时间序列**。我们可以使用此组件来观察我们的环境湿度水平。
- en: 'Click on **Close**, make sure that the **Temperature** components panel is
    expanded and click on **temperature.v1.0**. The site will display the **Component
    definition** dialog box for the **temperature.v1.0** component, that is, the component
    named **temperature** whose version is `1.0`. The following screenshot shows the
    values for the different fields in the component definition:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**关闭**，确保**温度**组件面板已展开，然后点击**temperature.v1.0**。网站将显示**temperature.v1.0**组件的**组件定义**对话框，即版本为
    `1.0` 的名为**temperature**的组件。以下截图显示了组件定义中不同字段的值：
- en: '![Setting up components in Intel IoT Analytics](img/B05042_10_05.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![在英特尔物联网分析中设置组件](img/B05042_10_05.jpg)'
- en: The `temperature` component version **1.0** represents a time series with temperature
    expressed in degrees Celsius. The **Data type** is **Number**, the **Unit of measure**
    is **Degrees Celsius**, the **Format** is **Float** and the **Display** is **Time
    Series**. We can use this component for our ambient temperature observations expressed
    in degrees Celsius.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`temperature`组件版本**1.0**代表一个以摄氏度表示的温度的时间序列。**数据类型**是**数字**，**测量单位**是**摄氏度**，**格式**是**浮点数**，**显示**是**时间序列**。我们可以使用此组件来表示以摄氏度表示的环境温度观测。'
- en: Click on **Close** and make sure that the **Temperature** components panel is
    expanded. There is no other temperature component, and therefore, we will have
    to create a new component for our ambient temperature observations expressed in
    degrees Fahrenheit.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**关闭**并确保**温度**组件面板已展开。没有其他温度组件，因此，我们必须为以华氏度表示的环境温度观测创建一个新的组件。
- en: 'Click on **Add new Catalog Item** at the bottom of the page and the site will
    display the **Component definition** dialog box with all the fields empty except
    from the version that will have a fixed `1.0` value. We are creating the first
    version of a new catalog item. Enter and select the following values:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面底部点击**添加新目录项**，网站将显示包含所有字段为空的**组件定义**对话框，除了版本号将具有固定的`1.0`值。我们正在创建新目录项的第一个版本。输入并选择以下值：
- en: Enter **temperaturef** in **Component Name**
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**组件名称**中输入**temperaturef**
- en: Select **Sensor** in **Type**
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**类型**中选择**传感器**
- en: Select **Number** in **Data type**
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**数据类型**中选择**数量**
- en: Enter **Degrees Fahrenheit** in **Unit of measure**
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**测量单位**中输入**华氏度**
- en: Select **Float** in **Format**
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**格式**中选择**浮点数**
- en: Select **Time Series** in **Display**
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**显示**中选择**时间序列**
- en: Finally, click on **Save** and the site will add the new component definition
    at the bottom of the list with the `temperaturef.v.1.0` name.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，点击**保存**，网站将在列表底部添加名为`temperaturef.v.1.0`的新组件定义。
- en: 'Now that we are sure that we have all the required component definitions in
    the catalog, we have to register the components that our device will use to create
    observations. We must give a name or alias of each component we register, and
    we must specify the component type and version from the previous catalog. The
    following table summarizes the components that we will register for our device:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们确信目录中包含所有必需的组件定义，我们必须注册设备将用于创建观测的组件。我们必须为每个注册的组件提供一个名称或别名，并必须指定来自上一目录的组件类型和版本。以下表格总结了我们将为设备注册的组件：
- en: '| Component name or alias | Component type | Description |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 组件名称或别名 | 组件类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `temperaturec` | temperature.v1.0 | A time series with ambient temperature
    observations expressed in degrees Celsius (ºC) |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `temperaturec` | temperature.v1.0 | 一个以摄氏度（ºC）表示的环境温度观测的时间序列 |'
- en: '| `temperaturef` | temperaturef.v1.0 | A time series with ambient temperature
    observations expressed in degrees Fahrenheit (ºF) |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `temperaturef` | temperaturef.v1.0 | 一个以华氏度（ºF）表示的环境温度观测的时间序列 |'
- en: '| `humidity` | humidity.v1.0 | A time series with ambient humidity level observations
    expressed in percentage |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `humidity` | humidity.v1.0 | 一个以百分比表示的环境湿度水平观测的时间序列 |'
- en: 'We can use the following command to register each component: `iotkit-admin
    register component-name component-type`. We just need to replace `component-name`
    with the name that will identify the component and component-type with the name
    that identifies the component type in the catalog, including the version number.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令来注册每个组件：`iotkit-admin register component-name component-type`。我们只需要将`component-name`替换为将标识组件的名称，将`component-type`替换为标识组件类型（包括版本号）的名称。
- en: 'The following command in the SSH terminal will register the `temperaturec`
    component from the previous table:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在SSH终端中的以下命令将注册来自上一表的`temperaturec`组件：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The following lines show the output for the previous command.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了上一条命令的输出。
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The last line provides us with the component id, that is, the value after `cid=`
    and before the next comma (`,`). In the previous output, the component id is `c37cb57d-002c-4a66-866e-ce66bc3b2340`.
    We have to save each component id because we will need it later to write code
    that creates observations using the REST API.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行为我们提供了组件ID，即`cid=`之后和下一个逗号（`,`）之前的值。在上一个输出中，组件ID是`c37cb57d-002c-4a66-866e-ce66bc3b2340`。我们必须保存每个组件ID，因为我们稍后需要它来编写使用REST
    API创建观测的代码。
- en: 'The following command in the SSH terminal will register the `temperaturef`
    component from the previous table:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在SSH终端中，以下命令将注册来自上一张表的`temperaturef`组件：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following lines show the output for the previous command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几行显示了上一条命令的输出结果：
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As happened with the other command, the last line provides us with the component
    id, that is, the value after `cid=` and before the next comma (`,`). In the previous
    output, the component id is `0f3b3aae-ce40-4fb4-a939-e7c705915f0c`. We have to
    save this one for its later usage in our code.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他命令一样，最后一行为我们提供了组件ID，即`cid=`之后和下一个逗号（`,`）之前的值。在上一个输出中，组件ID是`0f3b3aae-ce40-4fb4-a939-e7c705915f0c`。我们必须保存这个ID，以便在代码中的后续使用。
- en: 'The following command in the SSH terminal will register the `humidity` component
    from the previous table:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在SSH终端中，以下命令将注册来自上一张表的`humidity`组件：
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The following lines show the output for the previous command and the last line
    includes the component id.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几行显示了上一条命令的输出结果，最后一行包括组件ID。
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The component ids will be different from the values indicated in the previous
    outputs and you will have to take note of each of the component ids that have
    been generated with the previous commands.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 组件ID将与之前输出中指示的值不同，您需要记录由之前命令生成的每个组件ID。
- en: 'Go to the web browser in which you are working with the Intel IoT Analytics
    dashboard, click on the menu icon. Select **Devices** and the site will display
    the **My Devices** page. Click on the device **Id** in the previous list (**kansas-temperature-humidity-01**)
    to see and edit the device details. Click on **+Components** to expand the components
    registered for the device and you will see a list with the following three components:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 访问您正在使用的Intel IoT Analytics仪表板的网页浏览器，点击菜单图标。选择**设备**，站点将显示**我的设备**页面。点击之前列表中的设备**ID**（**kansas-temperature-humidity-01**）以查看和编辑设备详细信息。点击**+组件**以展开为设备注册的组件，您将看到一个包含以下三个组件的列表：
- en: '**temperaturec**'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**temperaturec**'
- en: '**temperaturef**'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**temperaturef**'
- en: '**humidity**'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**humidity**'
- en: 'The following screenshot shows the three components registered for the selected
    device:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了为所选设备注册的三个组件：
- en: '![Setting up components in Intel IoT Analytics](img/B05042_10_06.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![在Intel IoT Analytics中设置组件](img/B05042_10_06.jpg)'
- en: We can click on any of the three components and check the details for the registered
    component. In case we lose the component id, we can retrieve it by clicking on
    the component and the **Component Definition** dialog box will display the component
    id just below the component type description. The following screenshot shows the
    component definition for the `temperaturef` component. The component id **0f3b3aae-ce40-4fb4-a939-e7c705915f0c**
    appears below the **Custom Component** label on the right-hand side.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以点击这三个组件中的任何一个，并检查注册组件的详细信息。如果我们丢失了组件ID，我们可以通过点击组件并显示**组件定义**对话框来检索它，组件ID将显示在组件类型描述下方。以下截图显示了`temperaturef`组件的组件定义。组件ID
    **0f3b3aae-ce40-4fb4-a939-e7c705915f0c**出现在右侧的**自定义组件**标签下方。
- en: '![Setting up components in Intel IoT Analytics](img/B05042_10_07.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![在Intel IoT Analytics中设置组件](img/B05042_10_07.jpg)'
- en: 'Unluckily, there is no way to retrieve the device token that was generated
    when we activated the device with the features included in the site. We need the
    device token to create observations for the registered components. The agent for
    Intel IoT Analytics saves the device token with other configuration values for
    the device in the `device.json` file and its default path is `/usr/lib/node_modules/iotkit-agent/data/device.json`.
    As the file name suggests, the file contains JSON code. We just need to run the
    following command in the SSH terminal to display the text content from the previous
    file and allow us to retrieve the device token:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们没有方法检索在激活设备时生成的设备令牌，该设备具有站点中包含的功能。我们需要设备令牌来为注册的组件创建观测值。Intel IoT Analytics代理将设备令牌与其他配置值一起保存在`device.json`文件中，其默认路径是`/usr/lib/node_modules/iotkit-agent/data/device.json`。正如文件名所暗示的，该文件包含JSON代码。我们只需在SSH终端中运行以下命令，即可显示上一个文件的文本内容，并允许我们检索设备令牌：
- en: '[PRE14]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The following lines show the output for the previous command that includes all
    the configurations we have made so far for our device. The line that defines the
    value for the device token is highlighted.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几行显示了上一条命令的输出结果，其中包括我们迄今为止为设备所做的所有配置。定义设备令牌值的行被突出显示。
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The previous lines also show the component id for each of the components that
    we have registered. Thus, we have all the necessary configuration values that
    we will have to use in our code in just one place. In this case, the device token
    is the following, that is, the string value for the `"device_token"` key. However,
    the value that you will retrieve will be different.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 前几行还显示了我们所注册的每个组件的组件ID。因此，我们只需在一个地方就可以找到所有必要的配置值，这些值将用于我们的代码中。在这种情况下，设备令牌如下，即`"device_token"`键的字符串值。然而，您将检索到的值将不同。
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Collecting sensor data with Intel IoT Analytics
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用英特尔物联网分析收集传感器数据
- en: We will take the code we wrote in [Chapter 8](ch08.html "Chapter 8. Displaying
    Information and Performing Actions"), *Displaying Information and Performing Actions*,
    when we read temperature and humidity values from the sensor, we printed the values
    in an OLED matrix and rotated a servo's shaft to display the measured temperature
    expressed in degrees Fahrenheit with the shaft. The code file for the sample was
    `iot_python_chapter_08_03.py`. We will use this code as a baseline to add new
    features that will allow us to create observations for the three components we
    registered for our activated device.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们在[第8章](ch08.html "第8章。显示信息和执行操作")中编写的代码，*显示信息和执行操作*，当我们从传感器读取温度和湿度值时，我们在OLED矩阵中打印了这些值，并旋转了伺服轴以显示以华氏度表示的测量温度。该示例的代码文件为`iot_python_chapter_08_03.py`。我们将使用此代码作为基准，添加新功能，使我们能够为我们激活的设备注册的三个组件创建观测值。
- en: In [Chapter 2](ch02.html "Chapter 2. Working with Python on Intel Galileo Gen
    2"), *Working with Python on Intel Galileo Gen 2*, we made sure that the `pip`
    installer was available to install additional Python 2.7.3 packages in the Yocto
    Linux that we are running on the board. Now, we will use `pip` installer to make
    sure that the `requests` package is installed. This package is a very popular
    HTTP library for Python that allows us to easily build and send HTTP requests
    with an extremely easy to understand syntax.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。在英特尔Galileo Gen 2上使用Python")，*在英特尔Galileo Gen 2上使用Python*中，我们确保了`pip`安装程序在板上运行的Yocto
    Linux中可用，以便安装额外的Python 2.7.3包。现在，我们将使用`pip`安装程序确保安装了`requests`包。这个包是一个非常流行的Python
    HTTP库，它允许我们使用极其容易理解的语法轻松构建和发送HTTP请求。
- en: If you have worked with examples from the previous chapter, you will have this
    package already installed. However, in case you just jumped into this chapter,
    it might be necessary to install it. We just need to run the following command
    in the SSH terminal to install the package. Notice that it can take a few minutes
    to complete the installation.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经处理了上一章的示例，您将已经安装了此包。然而，如果您刚刚跳到本章，可能需要安装它。我们只需在SSH终端中运行以下命令即可安装该包。请注意，安装可能需要几分钟时间。
- en: '[PRE17]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In case you see the following output, it means that the requests package was
    already installed and you can move on to the next step.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到以下输出，则表示`requests`包已经安装，您可以继续下一步。
- en: '[PRE18]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We will create an `IntelIotAnalytics` class to represent the interface to Intel
    IoT Analytics and make it easy for us to publish observations for the three components.
    However, before we code the class, we have to make sure that we can replace the
    content for many class attributes that define important values related to our
    account, the components, and the device. You will have to replace the strings
    specified for the following class attributes with the appropriate values:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个`IntelIotAnalytics`类来表示英特尔物联网分析接口，并使我们能够轻松地为三个组件发布观测值。然而，在我们编写类代码之前，我们必须确保我们可以替换与我们的账户、组件和设备相关的重要值的相关类属性的内容。您必须将以下类属性指定的字符串替换为适当的值：
- en: '`account_name`: The value of the **Account name** field in the **My Account**
    page. In our example, we used `"Temperature and humidity"` for our account name.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`account_name`: **账户名称**字段在**我的账户**页面中的值。在我们的例子中，我们为账户名称使用了`"Temperature and
    humidity"`。'
- en: '`account_id`: The value of the **Account ID** field in the **My Account** page.
    In our example, we use `"22612154-0f71-4f64-a68e-e116771115d5"` for our account
    id. We can also retrieve the account id value by reading the string value specified
    for the `"account_id"` key in the `device.json` file.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`account_id`: **账户ID**字段在**我的账户**页面中的值。在我们的例子中，我们为账户ID使用了`"22612154-0f71-4f64-a68e-e116771115d5"`。我们还可以通过读取`device.json`文件中指定的`"account_id"`键的字符串值来检索账户ID值。'
- en: '`device_id`: The value of the **ID** field in the **Add / Edit a Device** page
    that the site shows when we click on a device name in the list displayed in the
    **My Devices** page. In our example, we use `"kansas-temperature-humidity-01"`
    for our device id. We can also retrieve the device_id by running the following
    command in an SSH terminal: `iotkit-admin device-id` or by reading the string
    value specified for the `"device_id"` key in the `device.json` file.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`device_id`: 在我们点击**我的设备**页面中显示的列表中的设备名称时，**添加/编辑设备**页面中**ID**字段的值。在我们的例子中，我们使用`"kansas-temperature-humidity-01"`作为我们的设备ID。我们也可以通过在SSH终端中运行以下命令来检索`device_id`：`iotkit-admin
    device-id`，或者通过读取`device.json`文件中指定的`"device_id"`键的字符串值。'
- en: '`device_token`: The value of the device token that was generated when we activated
    the device. As previously explained, we can retrieve the device token by reading
    the string value specified for the `"device_token"` key in the `device.json` file.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`device_token`: 当我们激活设备时生成的设备令牌的值。如前所述，我们可以通过读取`device.json`文件中指定的`"device_token"`键的字符串值来检索设备令牌。'
- en: '`component_id_temperature_fahrenheit`: The value of the component id that was
    generated when we registered the `temperaturef` component. The component id is
    displayed below the component type in the **Component Definition** dialog box.
    In our example, we use `"0f3b3aae-ce40-4fb4-a939-e7c705915f0c"` for this value.
    We can also retrieve the component id value by reading the string value specified
    for the `"cid"` key in the same block that declares the `"name": "temperaturef"`
    key-value pair, in the `device.json` file.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`component_id_temperature_fahrenheit`: 当我们注册了`temperaturef`组件时生成的组件ID的值。组件ID显示在**组件定义**对话框中组件类型下方。在我们的例子中，我们使用`"0f3b3aae-ce40-4fb4-a939-e7c705915f0c"`作为这个值。我们也可以通过读取`device.json`文件中声明`"name":
    "temperaturef"`键值对同一块中指定的`"cid"`键的字符串值来检索组件ID值。'
- en: '`component_id_temperature_celsius`: The value of the component id that was
    generated when we registered the `temperaturec` component. In our example, we
    use `"c37cb57d-002c-4a66-866e-ce66bc3b2340"` for this value.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`component_id_temperature_celsius`: 当我们注册了`temperaturec`组件时生成的组件ID的值。在我们的例子中，我们使用`"c37cb57d-002c-4a66-866e-ce66bc3b2340"`作为这个值。'
- en: '`component_id_humidity_level_percentage`: The value of the component id that
    was generated when we registered the `humidity` component. In our example, we
    use `"71aba984-c485-4ced-bf19-c0f32649bcee"` for this value.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`component_id_humidity_level_percentage`: 当我们注册了`humidity`组件时生成的组件ID的值。在我们的例子中，我们使用`"71aba984-c485-4ced-bf19-c0f32649bcee"`作为这个值。'
- en: The code file for the sample is `iot_python_chapter_10_01.py`. Remember that
    we use the code file `iot_python_chapter_08_03.py` as a baseline, and therefore,
    we will add the `IntelIotAnalytics` class to the existing code in this file and
    we will create a new Python file. The following lines show the code for the `IntelIotAnalytics`
    class that allows us to publish observations for the `temperaturef`, `temperaturec`
    and `humidity` components through the REST API.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 样本的代码文件是`iot_python_chapter_10_01.py`。请记住，我们使用代码文件`iot_python_chapter_08_03.py`作为基线，因此，我们将把`IntelIotAnalytics`类添加到该文件中的现有代码中，并创建一个新的Python文件。以下代码展示了允许我们通过REST
    API发布`temperaturef`、`temperaturec`和`humidity`组件观察结果的`IntelIotAnalytics`类。
- en: '[PRE19]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `IntelIotAnalytics` class declares many class attributes that we explained
    before and that you need to replace with your own string values: `account_name`,
    `account_id`, `device_token`, `device_id`, `component_id_temperature_fahrenheit`,
    `component_id_temperature_celsius` and `component_id_humidity_level_percentage`.
    The `base_url` class attribute defines the base URL to access the REST API: `https://dashboard.us.enableiot.com/v1/api`.
    We will use this value in combination with a `data` path and the `device_id` class
    attribute to build the URL to which we will send the HTTP request to publish an
    observation.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`IntelIotAnalytics`类声明了许多我们之前解释过的类属性，您需要用您自己的字符串值替换它们：`account_name`、`account_id`、`device_token`、`device_id`、`component_id_temperature_fahrenheit`、`component_id_temperature_celsius`和`component_id_humidity_level_percentage`。`base_url`类属性定义了访问REST
    API的基本URL：`https://dashboard.us.enableiot.com/v1/api`。我们将使用这个值与`data`路径和`device_id`类属性结合来构建我们将发送HTTP请求以发布观察结果的URL。'
- en: The class declares the `publish_observation` method that receives the temperature
    expressed in degrees Fahrenheit, the temperature expressed in degrees Celsius
    and the humidity level percentage in the `temperature_fahrenheit`, `temperature_celsius`
    and `humidity_level` arguments. The method builds the URL to which we will send
    the HTTP request to create an observation for the device and the three components.
    The URL is composed of the `base_url` class attribute, `/data/` and the `device_id`
    class attribute. As happens with many REST APIs, the `base_url` class attribute
    specifies the version number for the API. This way, we make sure that we are always
    working with a specific version and that our requests are compatible with this
    version. The code saves the value for the build URL in the `url` local variable.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 类声明了`publish_observation`方法，该方法接收华氏度表示的温度、摄氏度表示的温度和湿度百分比，参数为`temperature_fahrenheit`、`temperature_celsius`和`humidity_level`。该方法构建我们将发送HTTP请求以创建设备及其三个组件观察值的URL。URL由`base_url`类属性、`/data/`和`device_id`类属性组成。正如许多REST
    API所发生的那样，`base_url`类属性指定了API的版本号。这样，我们确保我们始终在特定版本上工作，并且我们的请求与该版本兼容。代码将构建的URL的值保存到`url`局部变量中。
- en: 'Then, the code saves the board''s current time in seconds multiplied by 1000
    in the `now` local variable. The code creates a `body` dictionary that represents
    the request''s body with the following key-value pairs:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码将板当前时间（以秒为单位乘以1000）保存到`now`局部变量中。代码创建一个`body`字典，该字典代表请求的正文，并包含以下键值对：
- en: '`"on"`: The value stored in the `now` local variable, that is, the board''s
    current time. It is the time for the observations.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"on"`: 存储在`now`局部变量中的值，即板的当前时间。它是观察的时间。'
- en: '`"accountId"`: The value stored in the `accountId` class attribute, that is,
    the Intel IoT Analytics account to which we will publish the observation.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"accountId"`: 存储在`accountId`类属性中的值，即我们将发布观察值的Intel IoT Analytics账户。'
- en: '`"data"`: An empty array that we will fill later with one observation for each
    component.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"data"`: 一个空数组，我们将在稍后用每个组件的一个观察值填充。'
- en: 'Then, the code creates three dictionaries with the following key-value pairs
    that represent an observation for a specific component:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码创建三个字典，包含以下键值对，代表特定组件的观察值：
- en: '`"componentId"`: The value stored in the class attribute that specifies the
    component id to which we will publish the observation.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"componentId"`: 存储在指定要发布观察值的组件ID的类属性中的值。'
- en: '`"on"`: The value stored in the `now` local variable, that is, the board''s
    current time. It is the time for the observation. We use the same variable for
    all the observations, and therefore, they are registered with the same time.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"on"`: 存储在`now`局部变量中的值，即板的当前时间。它是观察的时间。我们使用相同的变量对所有观察值进行操作，因此它们以相同的时间注册。'
- en: '`"value"`: The string representation of the value received as an argument in
    the method.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"value"`: 方法中作为参数接收的值的字符串表示。'
- en: Then, the code calls the `append` method to add the three dictionaries to the
    `data` key in the `body` dictionary. This way, the `data` key will have an array
    with three dictionaries as its value. The code calls the `json.dumps` function
    to serialize the `body` dictionary to a JSON formatted string and saves it in
    the `data` local variable.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码调用`append`方法将三个字典添加到`body`字典中的`data`键。这样，`data`键将有一个包含三个字典的数组作为其值。代码调用`json.dumps`函数将`body`字典序列化为JSON格式的字符串，并将其保存到`data`局部变量中。
- en: 'The next line creates a `headers` dictionary with the following key-value pairs
    that represent the headers for the HTTP request:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行创建一个`headers`字典，包含以下键值对，代表HTTP请求的头部：
- en: '`"Authorization"`: The authorization string composed of the concatenation of
    `"Bearer"` and the device token saved in the `device_token` class attribute'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"Authorization"`: 由`"Bearer"`和保存在`device_token`类属性中的设备令牌连接而成的授权字符串'
- en: '`"content-type"`: Declares the content type as JSON: `"application/json"`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"content-type"`: 声明内容类型为JSON: `"application/json"`'
- en: At this point, the code has built the headers and the body for the HTTP request
    that will publish the observations to Intel IoT Analytics. The next line calls
    the `requests.post` function to send an HTTP POST request to the URL specified
    by the `url` local variable, with the `data` dictionary as the JSON body data
    and the `headers` dictionary as the headers.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，代码已经构建了用于发布观测数据到英特尔物联网分析服务的HTTP请求的头部和主体。下一行调用`requests.post`函数，向由`url`局部变量指定的URL发送一个HTTP
    POST请求，其中`data`字典作为JSON主体数据，`headers`字典作为头部。
- en: The `requests.post` method returns a response saved in the `response` local
    variable and the code evaluates whether the code attribute for response is not
    equal to 201\. In case the code is different than `201`, it means that the observations
    weren't successfully published, that is, something went wrong. In this case, the
    code prints the values for the `status_code` and `text` attributes for the response
    to the console output to allow us to understand what went wrong. In case we use
    a wrong device token or a wrong id for the account, the device or the components,
    we will receive errors.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`requests.post`方法返回一个保存在`response`局部变量的响应，代码评估响应的code属性是否不等于201。如果code与201不同，这意味着观测数据没有成功发布，即出了问题。在这种情况下，代码将响应的`status_code`和`text`属性的值打印到控制台输出，以便我们了解出了什么问题。如果我们使用错误的设备令牌或账户、设备或组件的id，我们将收到错误。'
- en: Now, we will use the previously coded `IntelIoTAnalytics` class to create a
    new version of the `__main__` method that publishes observations to Intel IoT
    Analytics every 5 seconds. The following lines show the new version of the `__main__`
    method. The code file for the sample is `iot_python_chapter_10_01.py`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用之前编写的`IntelIoTAnalytics`类来创建一个新的`__main__`方法版本，该方法每5秒向英特尔物联网分析服务发布一次观测数据。以下行显示了新的`__main__`方法。示例的代码文件为`iot_python_chapter_10_01.py`。
- en: '[PRE20]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The highlighted lines show the code that creates an instance of the previously
    created `IntelIoTAnalytics` class and saves its reference in the `intel_iot_analytics`
    local variable. Then, the code within the loop that runs every 5 seconds calls
    the `publish_observation` method with the temperature and humidity values retrieved
    from the temperature and humidity sensor as arguments.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 突出的行显示了创建之前创建的`IntelIoTAnalytics`类实例并将其引用保存到`intel_iot_analytics`局部变量的代码。然后，在每5秒运行一次的循环中的代码使用从温度和湿度传感器检索的温度和湿度值作为参数调用`publish_observation`方法。
- en: 'The following line will start the example:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行将启动示例：
- en: '[PRE21]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: After you run the example, turn on an air conditioner or a heating system, to
    generate a change in the ambient temperature and humidity. This way, we will notice
    changes in the data that is being published every 5 seconds. Keep the code running
    while we explore different features included in Intel IoT Analytics.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 运行示例后，打开空调或加热系统，以产生环境温度和湿度的变化。这样，我们将注意到每5秒发布的数据中的变化。在我们探索英特尔物联网分析服务中包含的不同功能时，请保持代码运行。
- en: 'Go to the web browser in which you are working with the Intel IoT Analytics
    dashboard, click on the menu icon and select **Dashboard**. The site will display
    the **My Dashboard** page that will indicate you have one active device and it
    will update the number of observations published in the last hour as it receives
    observations from the board. The following pictures show the dashboard with the
    active device and the counter that includes `945` observations published in the
    last hour:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 前往您正在使用的英特尔物联网分析仪表板的网页浏览器，点击菜单图标并选择**仪表板**。网站将显示**我的仪表板**页面，它将指示您有一个活动设备，并且当它从板子上接收观测数据时，它将更新过去一小时发布的观测数据数量。以下图片显示了包含活动设备和包含过去一小时发布`945`次观测数据的计数器的仪表板：
- en: '![Collecting sensor data with Intel IoT Analytics](img/B05042_10_08.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![使用英特尔物联网分析服务收集传感器数据](img/B05042_10_08.jpg)'
- en: Keep the browser open with the dashboard view and you will notice that observations
    value increases in the last hour, as the code continues running on the board.
    You can click on the configuration icon located at the upper-right corner of the
    panel that displays the number of observations and a context-menu will allow you
    to configure the observations period you want to see in this panel. For example,
    you can change from **Last hour** to **Last week** to display the number of observations
    the device has registered during the last week.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 保持浏览器打开并显示仪表板视图，您会注意到在过去一小时中观察值增加，因为代码在板上继续运行。您可以在显示观察数量和上下文菜单的面板右上角点击配置图标，上下文菜单允许您配置在此面板中查看的观察周期。例如，您可以将**上一小时**更改为**上一周**以显示设备在过去一周内注册的观察数量。
- en: Analyzing sensor data with Intel IoT Analytics
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用英特尔物联网分析工具分析传感器数据
- en: Intel IoT Analytics allows us to generate charts with the data generated for
    each component that has observations for a specific device. First, we have to
    select the device and then we have to choose one or more component to generate
    the chart with historic time series or the time series that are being generated
    with the code running on the board, that is, live data for the component.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔物联网分析工具允许我们为具有特定设备观察数据的每个组件生成图表。首先，我们必须选择设备，然后我们必须选择一个或多个组件以生成带有历史时间序列或由板上运行的代码生成的时间序列的图表，即组件的实时数据。
- en: Go to the web browser in which you are working with the Intel IoT Analytics
    dashboard, click on the menu icon and select **Charts**. The site will display
    the **My Charts** page that will allow you to search for devices using many search
    criteria, such as the device name, the associated tags, and its properties.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您正在使用英特尔物联网分析仪表板的浏览器，点击菜单图标并选择**图表**。网站将显示**我的图表**页面，允许您使用许多搜索条件搜索设备，例如设备名称、相关标签及其属性。
- en: In this case, we just have one activated device, and therefore, we can select
    the device from the list of devices that the site shows us below the **Select
    Device** section. This section displays the first characters for the device name
    at the right-hand side of a checkbox and the number of components that have been
    registered for this device at the right-hand side of the text. The following picture
    shows the **Select Device** section with **kansas-temp…** representing the `kansas-temperature-humidity-01`
    device. If you hover the mouse over the checkbox or tap on the text, the site
    will display a popup with the complete name for the device and the types of the
    registered components. The following screenshot show the popup with this information
    displayed for the **kansas-temp…** checkbox.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们只有一个激活的设备，因此我们可以从网站在**选择设备**部分下方显示的设备列表中选择设备。此部分在复选框的右侧显示设备名称的首个字符，并在文本的右侧显示已为此设备注册的组件数量。以下图片显示了**选择设备**部分，其中**kansas-temp…**代表`kansas-temperature-humidity-01`设备。如果您将鼠标悬停在复选框上或轻触文本，网站将显示一个弹出窗口，显示设备的完整名称和已注册组件的类型。以下截图显示了包含此信息的弹出窗口，显示在**kansas-temp…**复选框上。
- en: '![Analyzing sensor data with Intel IoT Analytics](img/B05042_10_09.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![使用英特尔物联网分析工具分析传感器数据](img/B05042_10_09.jpg)'
- en: Check the **kansas-temp…** checkbox and the site will display the three registered
    components for the selected device. In this case, the site displays the component
    names (`temperaturec`, `temperaturef`, and `humidity`) while in the previously
    explained popup the site showed the component types (`temperature.v1.0`, `temperaturef.v1.0`,
    and `humidity.v1.0`).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**kansas-temp…**复选框，网站将显示所选设备的三个注册组件。在这种情况下，网站显示组件名称（`temperaturec`、`temperaturef`和`humidity`），而在之前解释的弹出窗口中，网站显示了组件类型（`temperature.v1.0`、`temperaturef.v1.0`和`humidity.v1.0`）。
- en: Check the `temperaturef` checkbox and the site will display a chart with the
    ambient temperature measured in degrees Fahrenheit for the past hour. By default,
    the chart uses a line and generates a graph with the time series values registered
    in the past hour. By default, the refresh rate for the graph is set to 30 seconds,
    and therefore, the chart will be updated every 30 seconds and will display all
    the new observations that were published by the board through the REST API in
    this period.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`temperaturef`复选框，网站将显示过去一小时测量的环境温度图表，单位为华氏度。默认情况下，图表使用线条并生成过去一小时记录的时间序列值图表。默认情况下，图表的刷新率为30秒，因此图表将每30秒更新一次，并显示在此期间通过REST
    API由板发布的所有新观测值。
- en: '![Analyzing sensor data with Intel IoT Analytics](img/B05042_10_10.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![使用英特尔物联网分析分析传感器数据](img/B05042_10_10.jpg)'
- en: We can use the different buttons at the top of the chart to change the chart
    type and to select the time range we want to view displayed in the graph. We can
    also change the refresh rate to as low as five seconds or as high as 60 seconds.
    If we save the graph as favorite, the site will display it as part of the dashboard
    in **My Dashboard**.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用图表顶部的不同按钮来更改图表类型，并选择我们想要在图表中显示的时间范围。我们还可以将刷新率更改为低至5秒或高达60秒。如果我们将图表保存为收藏夹，网站将在**我的仪表板**中将其显示为仪表板的一部分。
- en: Click on the **Raw data** button (A bullets icon) located at the right-hand
    side of the **Chart** button (A picture icon with mountains). The site will display
    a list with the raw data that has been sent to build the time series, that is,
    all the observations received for the selected component. The following screenshot
    shows an example of the first page of the raw data view for the `temperaturef`
    component in the past hour.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 点击位于**图表**按钮（一个带有山脉的图片图标）右侧的**原始数据**按钮（一个子弹图标）。网站将显示一个列表，其中包含用于构建时间序列的原始数据，即所选组件接收到的所有观测值。以下截图显示了过去一小时`temperaturef`组件的原始数据视图的第一页。
- en: '![Analyzing sensor data with Intel IoT Analytics](img/B05042_10_11.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![使用英特尔物联网分析分析传感器数据](img/B05042_10_11.jpg)'
- en: 'In this example, it is extremely useful to generate a chart with the temperature
    and the humidity level. Go back to the Chart view by clicking on the **Chart**
    button (A picture icon with mountains) and check the checkbox for humidity. This
    way, the site will generate a graph that combines the temperature expressed in
    degrees Fahrenheit and the humidity level expressed in percentage. The following
    screenshot shows the generated chart when **temperaturef** and **humidity** are
    both checked:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，生成一个包含温度和湿度水平的图表非常有用。通过点击**图表**按钮（一个带有山脉的图片图标）返回图表视图，并勾选湿度复选框。这样，网站将生成一个图表，结合华氏度表示的温度和百分比表示的湿度水平。以下截图显示了当**temperaturef**和**humidity**都勾选时生成的图表：
- en: '![Analyzing sensor data with Intel IoT Analytics](img/B05042_10_12.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![使用英特尔物联网分析分析传感器数据](img/B05042_10_12.jpg)'
- en: Triggering alerts with rules in Intel IoT Analytics
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用英特尔物联网分析中的规则触发警报
- en: 'Intel IoT Analytics allows us to define the rules that can trigger any of the
    following notification types:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔物联网分析允许我们定义可以触发以下任何通知类型的规则：
- en: Email
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件
- en: HTTP Endpoint
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP端点
- en: Actuation
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动作
- en: Go to the web browser in which you are working with the Intel IoT Analytics
    dashboard, click on the menu icon and select **Rules**. The site will display
    the **My Rules** page that will allow you to define rules for the activated devices.
    In this case, we will define a rule that will send us an e-mail when the humidity
    level is lower than 10%.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你正在使用的英特尔物联网分析仪表板的网页浏览器，点击菜单图标并选择**规则**。网站将显示**我的规则**页面，允许你为激活的设备定义规则。在这种情况下，我们将定义一个规则，当湿度水平低于10%时，将发送电子邮件给我们。
- en: Click on **Add a rule** and the site will display us a form that will allow
    us to enter the details for the new rule. Enter `Very low humidity level` in **Rule
    Name**, select `Low` in **Priority** and `Email` in **Notifications type**. Select
    the e-mail address to which you want to receive the notifications in the dropdown
    in the **Notifications To** panel.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**添加规则**，网站将显示一个表单，允许我们输入新规则的详细信息。在**规则名称**中输入`非常低的湿度水平`，在**优先级**中选择`低`，在**通知类型**中选择`电子邮件`。在**通知对象**面板的下拉菜单中选择你想要接收通知的电子邮件地址。
- en: Click **Next** and the site will ask us to select the devices to which the new
    rule has to be applied. In this case, we just have one activated device, and therefore,
    we can select the device from the list of devices that the site shows us below
    the **Select Device** section. As seen in previous device selection pages, this
    section displays the first characters for the device name at the right-hand side
    of a checkbox and the number of components that have been registered for this
    device at the right-hand side of the text. Check the **kansas-temp…** checkbox
    and the name will appear in the **Selected Devices** list.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**，网站将要求我们选择要应用新规则的设备。在这种情况下，我们只有一个激活的设备，因此我们可以从网站在**选择设备**部分下方显示的设备列表中选择设备。如前述设备选择页面所示，此部分在复选框的右侧显示设备名称的第一个字符，在文本的右侧显示已为此设备注册的组件数量。勾选**kansas-temp…**复选框，名称将出现在**已选设备**列表中。
- en: Click **Next** and the site will ask us to specify the conditions for the new
    rule. Leave the **Enable Automatic Reset** checkbox unchecked because we want
    the rule to become inactive after every alert until it is acknowledged. This way,
    after we receive an alert, we will only receive additional alerts when we acknowledge
    the first alert that was generated.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**，网站将要求我们指定新规则的条件。不要勾选**启用自动重置**复选框，因为我们希望规则在每次警报后变为不活动状态，直到被确认。这样，在收到警报后，我们只有在确认了第一个生成的警报后才会收到额外的警报。
- en: 'Select `humidity (Number)` in **Monitored Measure** and `Basic Condition` in
    **Trigger When**. Then, select `<` in the additional dropdown that appears and
    enter `10` in the **Enter a value** textbox. This way, we are creating a rule
    that will trigger when the value in a humidity observation is lower than 10 (`humidity
    < 10`). The following screenshot shows the defined condition:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在**监控度量**中选择`湿度（数字）`，在**触发条件**中选择**基本条件**。然后，在出现的附加下拉菜单中选择`<`，并在**输入值**文本框中输入`10`。这样，我们正在创建一个当湿度观测值低于10（`湿度
    < 10`）时将触发的规则。以下截图显示了定义的条件：
- en: '![Triggering alerts with rules in Intel IoT Analytics](img/B05042_10_13.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![使用Intel IoT Analytics中的规则触发警报](img/B05042_10_13.jpg)'
- en: 'Click **Done** and the rule will be added to the list shown in **My Rules**.
    The following screenshot shows the rule definition included in this list after
    we define it:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**完成**，规则将被添加到**我的规则**中显示的列表中。以下截图显示了定义后包含在此列表中的规则定义：
- en: '![Triggering alerts with rules in Intel IoT Analytics](img/B05042_10_14.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![使用Intel IoT Analytics中的规则触发警报](img/B05042_10_14.jpg)'
- en: 'After the humidity level is lower than 10%, an alert will be triggered and
    we will see a number 1 in the alerts icon (the bell). After we click on the icon,
    the site will display all the unread alerts we have. The following screenshot
    shows the My Dashboard page with one unread alert:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 当湿度低于10%时，将触发警报，我们将在警报图标（铃铛）中看到一个数字1。点击图标后，网站将显示我们所有未读的警报。以下截图显示了包含一个未读警报的我的仪表盘页面：
- en: '![Triggering alerts with rules in Intel IoT Analytics](img/B05042_10_15.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![使用Intel IoT Analytics中的规则触发警报](img/B05042_10_15.jpg)'
- en: 'If we click on the alert, the site will display the details of the situation
    that triggered the alert. We can also go **Alerts** in the menu and see the list
    of the received alerts. The following screenshot show the alert included in the
    list of received alerts:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击警报，网站将显示触发警报的情况的详细信息。我们还可以在菜单中选择**警报**，查看接收到的警报列表。以下截图显示了包含在接收到的警报列表中的警报：
- en: '![Triggering alerts with rules in Intel IoT Analytics](img/B05042_10_16.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![使用Intel IoT Analytics中的规则触发警报](img/B05042_10_16.jpg)'
- en: 'If we click on the **Alert** number, the site will display the details for
    the alert including the condition defined in the rule that triggered the alert
    and the measured value. In this case, the measured value was `7.99`. It is possible
    to add comments to an alert. The following screenshot shows the details for the
    alert:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击**警报**编号，网站将显示警报的详细信息，包括触发警报的规则中定义的条件和测量的值。在这种情况下，测量的值是`7.99`。可以向警报添加注释。以下截图显示了警报的详细信息：
- en: '![Triggering alerts with rules in Intel IoT Analytics](img/B05042_10_17.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![使用Intel IoT Analytics中的规则触发警报](img/B05042_10_17.jpg)'
- en: 'In addition, we receive an e-mail that includes the following text:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还会收到一封包含以下文本的电子邮件：
- en: '[PRE22]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In this case, we defined a very simple condition in our rule. However, we can
    define a more complex condition that can include any of the following conditions:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们在规则中定义了一个非常简单的条件。然而，我们可以定义一个更复杂的条件，该条件可以包括以下任何条件：
- en: Time-based condition
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于时间的条件
- en: Statistics based condition
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于统计的条件
- en: Single-sensor change detection
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单传感器变化检测
- en: Multisensory change detection
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多感官变化检测
- en: We can play with the different options to trigger alerts for a large number
    of devices with multiple sensors and huge amounts of data. One of the most interesting
    features of Intel IoT Analytics is that we can easily work with huge amounts of
    data with the charts, the rules and the alerts.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以玩转不同的选项，为具有多个传感器和大量数据的众多设备触发警报。英特尔物联网分析最有趣的功能之一是我们可以用图表、规则和警报轻松地处理大量数据。
- en: Test your knowledge
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: 'The components for each device in Intel IoT Analytics can be either:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 英特尔物联网分析中每个设备的组件可以是：
- en: Actuator or time series.
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行器或时间序列。
- en: Account, actuator or time series.
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 账户、执行器或时间序列。
- en: Proxy, account, actuator or time series.
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代理、账户、执行器或时间序列。
- en: 'Each time we publish data from a registered device to Intel IoT Analytics,
    we create:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次我们将从注册设备发布数据到英特尔物联网分析时，我们都会创建：
- en: An actuator.
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行器。
- en: An account.
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 账户。
- en: An observation.
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察结果。
- en: 'A time series is:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 时间序列是：
- en: A series of actions performed by an actuator, that is, a collection of actions.
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行器执行的一系列动作，即动作的集合。
- en: A series of values captured from a sensor, that is, a collection of observations.
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从传感器捕获的一系列值，即观察的集合。
- en: A series of triggered alarms, that is, a collection of alarms.
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一系列触发的警报，即警报的集合。
- en: 'We can use the following command-line utility to activate our board as a device
    in an Intel IoT Analytics account:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令行工具激活我们的板作为英特尔物联网分析账户中的一个设备：
- en: iotkit-admin
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: iotkit-admin
- en: iotkit-configure
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: iotkit-configure
- en: iotkit-setup
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: iotkit-setup
- en: 'In order to send observations from a device with the REST API provided by Intel
    IoT Analytics, we need the following token:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用英特尔物联网分析提供的REST API从设备发送观察结果，我们需要以下令牌：
- en: The sensor token.
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传感器令牌。
- en: The observation token.
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察令牌。
- en: The device token.
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设备令牌。
- en: Summary
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we understood the close relationship between Internet of Things
    and Big Data. We worked with a cloud-based service that allowed us to organize
    huge amounts of data collected by multiple devices and their sensors. We took
    advantage of the `requests` package to write a few lines of Python code that could
    interact with the Intel IoT Analytics REST API.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了物联网与大数据之间的紧密关系。我们与一个基于云的服务合作，该服务允许我们组织由多个设备和其传感器收集的大量数据。我们利用`requests`包编写了几行Python代码，可以与英特尔物联网分析REST
    API交互。
- en: We used the Intel IoT Analytics web site to set up a device and its components.
    Then, we made changes to one of our examples to collect data from the sensors
    and publish observations to Intel IoT Analytics. Then, we learned about the different
    options that Intel IoT Analytics offers us to analyze huge amounts of data. Finally,
    we defined rules that triggered alerts. Now that we are able to take advantage
    of Intel IoT Analytics to analyze huge amounts of data, we are ready to deploy
    thousands of IoT devices that collect data from multiple sensors.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用英特尔物联网分析网站来设置设备和其组件。然后，我们对我们的一个示例进行了修改，以从传感器收集数据并将观察结果发布到英特尔物联网分析。然后，我们了解了英特尔物联网分析为我们提供的不同选项，以分析大量数据。最后，我们定义了触发警报的规则。现在，我们能够利用英特尔物联网分析来分析大量数据，我们准备部署成千上万的物联网设备，这些设备从多个传感器收集数据。
- en: We learned to use Python and the Intel Galileo Gen 2 board to create low cost
    devices that collect huge amounts of data, interact with each other and take advantage
    of cloud-services and cloud-based storage. We can develop IoT prototypes from
    the hardware selection to all the necessary stacks with Python 2.7.3, its libraries
    and tools. In case we need a smaller board or a different alternative, we can
    switch to any of the compatible Intel Edison boards, and therefore, we can switch
    to this board in case we need to.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学会了使用Python和英特尔Galileo Gen 2板来创建低成本设备，这些设备可以收集大量数据，相互交互，并利用云服务和基于云的存储。我们可以使用Python
    2.7.3及其库和工具从硬件选择到所有必要的堆栈开发物联网原型。如果我们需要更小的板或不同的替代品，我们可以切换到任何兼容的英特尔Edison板，因此，如果我们需要，我们可以切换到这块板。
- en: We are able to leverage our existing Python knowledge to capture data from the
    real world, interact with physical objects, develop APIs and use different IoT
    protocols. We learned to use specific libraries to work with low-level hardware,
    sensors, actuators, buses, and displays. We are ready to become makers and to
    be part of the exciting IoT world.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够利用现有的Python知识从现实世界中捕获数据，与物理对象交互，开发API并使用不同的物联网协议。我们学会了使用特定的库来处理底层硬件、传感器、执行器、总线和显示器。我们准备好成为创造者，并成为激动人心的物联网世界的一部分。
- en: We can start working on fascinating projects that can transform everyday objects
    into smart devices with sensors and actuators. We are ready to start building
    ecosystems composed of thousands of IoT devices, with Python as our main programming
    language.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以开始着手于将日常物体转变为带有传感器和执行器的智能设备的项目。我们准备好开始构建由数千个物联网设备组成的生态系统，Python作为我们的主要编程语言。
- en: Appendix A. Exercise Answers
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. 练习答案
- en: Chapter 1, Understanding and Setting up the Base IoT Hardware
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章，理解和设置基础物联网硬件
- en: '| Q1 | 2 |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| Q1 | 2 |'
- en: '| Q2 | 1 |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| Q2 | 1 |'
- en: '| Q3 | 2 |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| Q3 | 2 |'
- en: '| Q4 | 3 |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| Q4 | 3 |'
- en: '| Q5 | 1 |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| Q5 | 1 |'
- en: Chapter 2, Working with Python on Intel Galileo Gen 2
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章，在英特尔Galileo Gen 2上使用Python
- en: '| Q1 | 2 |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| Q1 | 2 |'
- en: '| Q2 | 1 |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| Q2 | 1 |'
- en: '| Q3 | 2 |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| Q3 | 2 |'
- en: '| Q4 | 3 |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| Q4 | 3 |'
- en: '| Q5 | 1 |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| Q5 | 1 |'
- en: Chapter 3, Interacting with Digital Outputs with Python
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章，使用Python与数字输出交互
- en: '| Q1 | 3 |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| Q1 | 3 |'
- en: '| Q2 | 1 |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| Q2 | 1 |'
- en: '| Q3 | 1 |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| Q3 | 1 |'
- en: '| Q4 | 2 |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| Q4 | 2 |'
- en: '| Q5 | 2 |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| Q5 | 2 |'
- en: Chapter 4, Working with a RESTful API and Pulse Width Modulation
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章，使用RESTful API和脉宽调制进行工作
- en: '| Q1 | 3 |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| Q1 | 3 |'
- en: '| Q2 | 3 |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| Q2 | 3 |'
- en: '| Q3 | 2 |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| Q3 | 2 |'
- en: '| Q4 | 1 |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| Q4 | 1 |'
- en: '| Q5 | 2 |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| Q5 | 2 |'
- en: Chapter 5, Working with Digital Inputs, Polling and Interrupts
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章，使用数字输入、轮询和中断
- en: '| Q1 | 1 |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| Q1 | 1 |'
- en: '| Q2 | 2 |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| Q2 | 2 |'
- en: '| Q3 | 1 |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| Q3 | 1 |'
- en: '| Q4 | 2 |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| Q4 | 2 |'
- en: '| Q5 | 3 |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| Q5 | 3 |'
- en: Chapter 6, Working with Analog Inputs and Local Storage
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章，使用模拟输入和本地存储
- en: '| Q1 | 3 |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| Q1 | 3 |'
- en: '| Q2 | 1 |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| Q2 | 1 |'
- en: '| Q3 | 2 |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| Q3 | 2 |'
- en: '| Q4 | 1 |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| Q4 | 1 |'
- en: '| Q5 | 3 |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| Q5 | 3 |'
- en: Chapter 7, Retrieving Data from the Real World with Sensors
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章，使用传感器从现实世界获取数据
- en: '| Q1 | 2 |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| Q1 | 2 |'
- en: '| Q2 | 1 |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| Q2 | 1 |'
- en: '| Q3 | 2 |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| Q3 | 2 |'
- en: '| Q4 | 3 |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| Q4 | 3 |'
- en: '| Q5 | 1 |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| Q5 | 1 |'
- en: Chapter 8, Displaying Information and Performing Actions
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章，显示信息和执行操作
- en: '| Q1 | 1 |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| Q1 | 1 |'
- en: '| Q2 | 1 |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| Q2 | 1 |'
- en: '| Q3 | 3 |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| Q3 | 3 |'
- en: '| Q4 | 3 |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| Q4 | 3 |'
- en: '| Q5 | 2 |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| Q5 | 2 |'
- en: Chapter 9, Working with the Cloud
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章，使用云服务
- en: '| Q1 | 2 |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| Q1 | 2 |'
- en: '| Q2 | 1 |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| Q2 | 1 |'
- en: '| Q3 | 3 |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| Q3 | 3 |'
- en: '| Q4 | 2 |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| Q4 | 2 |'
- en: '| Q5 | 1 |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| Q5 | 1 |'
- en: Chapter 10, Analyzing Huge Amounts of Data with Cloud-based IoT Analytics
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章，使用基于云的物联网分析分析大量数据
- en: '| Q1 | 1 |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| Q1 | 1 |'
- en: '| Q2 | 3 |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| Q2 | 3 |'
- en: '| Q3 | 2 |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| Q3 | 2 |'
- en: '| Q4 | 1 |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| Q4 | 1 |'
- en: '| Q5 | 3 |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| Q5 | 3 |'
