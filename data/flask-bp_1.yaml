- en: Chapter 1. Starting on the Right Foot – Using Virtualenv
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。正确开始——使用Virtualenv
- en: 'One of the great difficulties in modern software development is that of dependency
    management. Generally, a dependency of a software project consists of a library
    or component that is required for the project to function correctly. In the case
    of a Flask application (and more generally, that of a Python application), most
    dependencies are comprised of specially organized and annotated source files.
    Once created, these packages of source files may then be included in other projects
    and so forth. For some, this chain of dependencies can become an unmanageable
    mess, where the slightest alteration to any of the libraries in the chain can
    cause a cascade of incompatibilities that would bring further development to a
    screeching halt. In the Python world, as you may know already, the fundamental
    unit of a reusable set of source files is that of a Python module (a file that
    contains definitions and statements). Once you''ve created a module on your local
    filesystem and ensured that it is in your system''s PYTHONPATH, including it in
    a newly created project is as simple as specifying the import, which is as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现代软件开发中的一个巨大困难是依赖管理。一般来说，软件项目的依赖关系包括所需的库或组件，以使项目能够正确运行。对于Flask应用程序（更一般地说，对于Python应用程序），大多数依赖关系由特别组织和注释的源文件组成。创建后，这些源文件包可以包含在其他项目中，依此类推。对于一些人来说，这种依赖链可能变得难以管理，当链中的任何库发生细微变化时，可能会导致一系列不兼容性，从而使进一步的开发陷入停滞。在Python世界中，正如您可能已经知道的那样，可重用的源文件的基本单元是Python模块（包含定义和语句的文件）。一旦您在本地文件系统上创建了一个模块，并确保它在系统的PYTHONPATH中，将其包含在新创建的项目中就像指定导入一样简单，如下所示：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Where `the_custom_module.py` is a file that exists somewhere in `$PYTHONPATH`
    of the system executing the program.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`the_custom_module.py`是一个存在于执行程序系统的`$PYTHONPATH`中的文件。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意：
- en: The `$PYTHONPATH` can include paths to the compressed archives (`.zip` folders)
    in addition to the normal file paths.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`$PYTHONPATH`可以包括对压缩存档（`.zip`文件夹）的路径，除了正常的文件路径。'
- en: 'This is not where the story ends, of course. While modules littering your local
    filesystem might be convenient at first, what happens when you want to share some
    of the code that you''ve written for others? Usually, this would entail emailing/Dropboxing
    the files in question, however, this is obviously a very cumbersome and error-prone
    solution. Thankfully, this is a problem that has been considered and some progress
    has been made in alleviating the common issues. The most significant of these
    advances is the subject of this chapter, and how the following techniques for
    creating reusable, isolated packages of code can be leveraged to ease the development
    of a Flask application:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，故事并不会在这里结束。虽然最初在本地文件系统中散布模块可能很方便，但当您想要与他人共享一些您编写的代码时会发生什么？通常，这将涉及通过电子邮件/Dropbox发送相关文件，然而，这显然是一个非常繁琐且容易出错的解决方案。幸运的是，这是一个已经被考虑过并且已经在缓解常见问题方面取得了一些进展的问题。其中最重要的进展之一是本章的主题，以及如何利用以下创建可重用的、隔离的代码包的技术来简化Flask应用程序的开发：
- en: Python packaging with pip and setuptools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用pip和setuptools进行Python打包
- en: Encapsulation of virtual environments with virtualenv
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用virtualenv封装虚拟环境
- en: The solution presented by the various Python packaging paradigms/libraries is
    far from perfect; one sure way to start an argument with a passionate Python developer
    is to proclaim that the *packaging problem* has been solved! We still have a long
    way to go for that but headway is being made in incremental steps with improvements
    to setuptools and various other libraries used in building, maintaining, and distributing
    a reusable Python code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 各种Python打包范例/库提出的解决方案远非完美；与热情的Python开发者争论的一种肯定方式是宣称*打包问题*已经解决！我们在这方面还有很长的路要走，但通过改进setuptools和其他用于构建、维护和分发可重用Python代码的库，我们正在逐步取得进展。
- en: In this chapter, when we refer to a package, what we will actually be talking
    about would be succinctly described as a distribution—a bundle of software to
    be installed from a remote source—and not a collection of modules in a folder
    structure that utilizes `the__init__.py` convention in order to delineate the
    folders containing the modules that we want to be importable.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，当我们提到一个包时，我们实际上要谈论的是一个分发——一个从远程源安装的软件包——而不是一个使用`the__init__.py`约定来划分包含我们想要导入的模块的文件夹结构的集合。
- en: Setuptools and pip
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Setuptools和pip
- en: When a developer wants to make their code more widely available, one of the
    first steps will be to create a setuptools-compatible package.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发人员希望使他们的代码更广泛可用时，首要步骤之一将是创建一个与setuptools兼容的包。
- en: 'Most of the distributions of a modern Python version will come with setuptools
    already installed. If it is not present on your system of choice, then obtaining
    it is relatively simple, with additional instructions available on the official
    documentation:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现代Python版本的大多数发行版将已经安装了setuptools。如果您的系统上没有安装它，那么获取它相对简单，官方文档中还提供了额外的说明：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After setuptools is installed, the basic requirement to create a compatible
    package is the creation of a `setup.py` file at the root of your project. The
    primary content of this file should be the invocation of a `setup()` function
    with a few mandatory (and many optional) arguments, as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了setuptools之后，创建兼容包的基本要求是在项目的根目录创建一个`setup.py`文件。该文件的主要内容应该是调用`setup()`函数，并带有一些强制（和许多可选）参数，如下所示：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt Publishing图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接通过电子邮件接收文件。
- en: Once the package has been created, most developers will choose to upload their
    newly minted package to PyPI—the official source of nearly all Python packages—using
    the built-in tools that are provided by setuptools itself. While the use of this
    particular public PyPI repository is not a requirement (it's even possible to
    set up your own personal package index), most Python developers will expect to
    find their packages here.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦软件包被创建，大多数开发人员将选择使用setuptools本身提供的内置工具将他们新创建的软件包上传到PyPI——几乎所有Python软件包的官方来源。虽然使用特定的公共PyPI存储库并不是必需的（甚至可以设置自己的个人软件包索引），但大多数Python开发人员都希望在这里找到他们的软件包。
- en: 'This brings us to one more essential piece of the puzzle—the `pip` Python package
    installer. If you have Python 2.7.9 or greater installed, then `pip` will already
    be present. Some distributions might have it preinstalled for you or it might
    be present in a system-level package. For a Debian-like distribution of Linux,
    it may be installed via the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这将引出拼图中另一个至关重要的部分——`pip` Python软件包安装程序。如果您已安装Python 2.7.9或更高版本，则`pip`将已经存在。某些发行版可能已经为您预安装了它，或者它可能存在于系统级软件包中。对于类似Debian的Linux发行版，可以通过以下命令安装它：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Similarly, other Linux-based distributions will have their own recommended
    package managers. If you''d rather obtain the source and install it manually,
    it is a simple matter of fetching a file and running it using the Python interpreter:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，其他基于Linux的发行版将有他们自己推荐的软件包管理器。如果您更愿意获取源代码并手动安装，只需获取文件并使用Python解释器运行即可：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Pip is a tool for installing Python packages (and is itself a Python package).
    While it is not the only player in the game, `pip` is by far the most widely used.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Pip是一个用于安装Python软件包的工具（本身也是一个Python软件包）。虽然它不是唯一的选择，但`pip`是迄今为止使用最广泛的。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The predecessor to `pip` is `easy_install`, which has largely been replaced
    in the Python community by the former. The `easy_install` module suffered some
    relatively major problems, such as allowing partially completed installations,
    the inability to uninstall a package without requiring the user to manually delete
    the related `.egg` files, and console output that contained the useful success
    and error messages that allowed the developer to determine the best course of
    action in case something went wrong.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip`的前身是`easy_install`，在Python社区中已经大部分被后者取代。`easy_install`模块存在一些相当严重的问题，比如允许部分安装、无法卸载软件包而需要用户手动删除相关的`.egg`文件，以及包含有用的成功和错误消息的控制台输出，允许开发人员在出现问题时确定最佳操作方式。'
- en: 'One can invoke pip in the command line to install, say, a scientific computing
    package on the local filesystem:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在命令行中调用pip来在本地文件系统上安装科学计算软件包，比如说：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding command will query the default PyPI index for a package named
    `numpy` and download the latest version to a special place in your system, usually
    `/usr/local/lib/pythonX.Y/site-packages` (`X` and `Y` are the major/minor versions
    of the Python version that `pip` points to). This operation may require root privileges
    and would thus require `sudo` or similar actions to allow it to be completed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将查询默认的PyPI索引，寻找名为`numpy`的软件包，并将最新版本下载到系统的特定位置，通常是`/usr/local/lib/pythonX.Y/site-packages`（`X`和`Y`是`pip`指向的Python版本的主/次版本）。此操作可能需要root权限，因此需要`sudo`或类似的操作来完成。
- en: One of the many benefits of virtual environments, which we will explore shortly,
    is that they generally avoid the privilege escalation requirement that can plague
    system-level changes to installed packages.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境的许多好处之一是，它们通常避免了对已安装软件包进行系统级更改时可能出现的权限提升要求。
- en: 'Once this operation is completed successfully, you now have the ability to
    import the `numpy` package into new modules and use any and all of the functionalities
    that it exposes:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦此操作成功完成，您现在可以将`numpy`软件包导入新模块，并使用它提供的所有功能：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once we have this package (or any other, for that matter) installed, there''s
    nothing stopping us from fetching additional packages in the usual way. Moreover,
    we can install multiple packages at the same time by providing their names as
    additional arguments to the `install` command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装了这个软件包（或者其他任何软件包），就没有什么可以阻止我们以通常的方式获取其他软件包。此外，我们可以通过将它们的名称作为`install`命令的附加参数来一次安装多个软件包：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Avoiding dependency hell, the Python way
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免依赖地狱，Python的方式
- en: New developers might be tempted to install every interesting package that they
    come across. In doing so, they might realize that this quickly degrades into a
    Kafkaesque situation where previously installed packages may cease to function
    and newly installed packages may behave unpredictably, if they manage to get installed
    successfully at all. The problem with the preceding approach, as some of you may
    have guessed, is that of conflicting package dependencies. Say for example, we
    have package `A` installed; it depends on version 1 of package `Q` and version
    1 of package `R`. Package `B` depends on version 2 of package `R` (where versions
    1 and 2 are not API-compatible). Pip will happily install package `B` for you,
    which will upgrade package `R` to version 2\. This will, at best, make package
    `A` completely unusable or, at worst, make it behave in undocumented and unpredictable
    ways.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 新开发人员可能会想要安装他们遇到的每个有趣的软件包。这样做的话，他们可能会意识到这很快就会变成一个卡夫卡式的情况，先前安装的软件包可能会停止工作，新安装的软件包可能会表现得不可预测，如果它们成功安装的话。前述方法的问题，正如你们中的一些人可能已经猜到的那样，就是冲突的软件包依赖关系。例如，假设我们安装了软件包`A`；它依赖于软件包`Q`的版本1和软件包`R`的版本1。软件包`B`依赖于软件包`R`的版本2（其中版本1和2不兼容）。Pip将愉快地为您安装软件包`B`，这将升级软件包`R`到版本2。这将使软件包`A`在最好的情况下完全无法使用，或者在最坏的情况下，使其以未记录和不可预测的方式行为。
- en: The Python ecosystem has come up with a solution to the basic issues that arise
    from what is colloquially referred to as **dependency hell**. While far from perfect,
    it allows developers to sidestep many of the simplest package version dependency
    conflicts that can arise in web application development.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Python生态系统已经提出了一个解决从俗称为**依赖地狱**中产生的基本问题的解决方案。虽然远非完美，但它允许开发人员规避在Web应用程序开发中可能出现的许多最简单的软件包版本依赖冲突。
- en: 'The `virtualenv` tool, of which a similar implementation is now a default module
    in Python 3.3 and named `venv`, is essential to ensure that you minimize your
    chances of ending up in dependency hell. The following quote is from the introduction
    in the official documentation for `virtualenv`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`virtualenv`工具（Python 3.3中的默认模块`venv`）是必不可少的，以确保最大限度地减少陷入依赖地狱的机会。以下引用来自`virtualenv`官方文档的介绍部分：'
- en: '*It creates an environment that has its own installation directories, that
    doesn''t share libraries with other virtualenv environments (and optionally doesn''t
    access the globally installed libraries either).*'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*它创建一个具有自己安装目录的环境，不与其他virtualenv环境共享库（也可以选择不访问全局安装的库）。*'
- en: More concisely, `virtualenv` allows you to create isolated environments for
    each one of your Python applications (or any Python code).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更简洁地说，`virtualenv`允许您为每个Python应用程序（或任何Python代码）创建隔离的环境。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `virtualenv` tool does not, however, help you to manage the dependencies
    of the Python C-based extensions. For example, if you install the `lxml` package
    from `pip`, it will require that you have the correct `libxml2` and `libxslt`
    system libraries and headers (which it will link against). The `virtualenv` tool
    will not help you isolate these system-level libraries.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`virtualenv`工具不会帮助您管理Python基于C的扩展的依赖关系。例如，如果您从`pip`安装`lxml`软件包，它将需要您拥有正确的`libxml2`和`libxslt`系统库和头文件（它将链接到）。`virtualenv`工具将无法帮助您隔离这些系统级库。'
- en: Working with virtualenv
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用virtualenv
- en: 'First, we need to make sure that we have the `virtualenv` tool installed in
    our local system. This is a simple matter of fetching it from the PyPI repository:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要确保在本地系统中安装了`virtualenv`工具。这只是从PyPI存储库中获取它的简单事情：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For obvious reasons, this package should be installed outside any virtual environments
    that may already exist.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 出于明显的原因，应该在可能已经存在的任何虚拟环境之外安装这个软件包。
- en: Creating a new virtual environment
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新的虚拟环境
- en: 'Creating a new virtual environment is straightforward. The following command
    will create a new folder at the specified path that will contain the necessary
    structure and scripts, including a full copy of your default Python binary:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的虚拟环境很简单。以下命令将在指定路径创建一个新文件夹，其中包含必要的结构和脚本，包括默认Python二进制文件的完整副本：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we want to create an environment that lives at `~/envs/testing`, we will
    first ensure that the parent directory exists and then invoke the following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想创建一个位于`~/envs/testing`的环境，我们首先要确保父目录存在，然后调用以下命令：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In Python 3.3+, a mostly API-compatible version of the `virtualenv` tool was
    added to the default language packages. The name of the module is `venv`, however,
    the name of the script that allows you to create a virtual environment is `pyvenv`
    and can be invoked in a similar way as the previously discussed `virtualenv` tool,
    as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3.3+中，一个大部分与API兼容的`virtualenv`工具被添加到默认语言包中。模块的名称是`venv`，然而，允许您创建虚拟环境的脚本的名称是`pyvenv`，可以以与先前讨论的`virtualenv`工具类似的方式调用：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Activating and deactivating virtual environments
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激活和停用虚拟环境
- en: 'Creating a virtual environment does not automatically activate it. Once the
    environment is created, we need to activate it so that any modifications to the
    Python environment (for example, installing packages) will occur in the isolated
    environment instead of our system global one. By default, the activation of a
    virtual environment will alter the prompt string (`$PS1`) of the currently active
    user so that it displays the name of the sourced virtual environment:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 创建虚拟环境不会自动激活它。环境创建后，我们需要激活它，以便对Python环境进行任何修改（例如安装软件包）将发生在隔离的环境中，而不是我们系统的全局环境中。默认情况下，激活虚拟环境将更改当前活动用户的提示字符串（`$PS1`），以便显示所引用的虚拟环境的名称：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The command is the same for Python 3.3+:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.3+的命令是相同的：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When you run the above command, the following series of steps occurs:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行上述命令时，将发生以下一系列步骤：
- en: Deactivates any already activated environment.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停用任何已激活的环境。
- en: Prepends your `$PATH` variable with the location of the `virtualenv bin/` directory,
    for example, `~/envs/testing/bin:$PATH`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`virtualenv bin/`目录的位置在您的`$PATH`变量之前添加，例如`~/envs/testing/bin:$PATH`。
- en: Unsets `$PYTHONHOME` if it exists.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果存在，则取消设置`$PYTHONHOME`。
- en: Modifies your interactive shell prompt so that it includes the name of the currently
    active `virtualenv`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改您的交互式shell提示，以包括当前活动的`virtualenv`的名称。
- en: As a result of the `$PATH` environment variable manipulations, the Python and
    `pip` binaries (and whatever other binaries that were installed via `pip`), which
    have been invoked via the shell where the environment was activated, will be the
    ones contained in `~/envs/testing/bin`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`$PATH`环境变量的操作，通过激活环境的shell调用的Python和`pip`二进制文件（以及通过`pip`安装的其他二进制文件）将包含在`~/envs/testing/bin`中。
- en: Adding packages to an existing environment
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向现有环境添加包
- en: 'We can easily add packages to a virtual environment by simply activating it
    and then invoking `pip` in the following way:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过简单激活它，然后以以下方式调用`pip`来轻松向虚拟环境添加包：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will install the `numpy` package to the testing environment, and only the
    testing environment. Your global system packages will be unaffected, as well as
    any other existing environments.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把`numpy`包安装到测试环境中，只有测试环境。您的全局系统包不受影响，以及任何其他现有环境。
- en: Uninstalling packages from an existing environment
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从现有环境中卸载包
- en: 'Uninstalling a `pip` package is straightforward as well:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载`pip`包也很简单：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will remove the `numpy` package from the testing environment only.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将仅从测试环境中删除`numpy`包。
- en: 'Here is one relatively major place where the Python package management falls
    short: uninstalling a package does not uninstall its dependencies. For example,
    if you install package `A` and it installs dependent packages `B` and `C`, uninstalling
    package `A` at a later time will not uninstall `B` and `C`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Python软件包管理存在相对重要的一个地方：卸载一个包不会卸载它的依赖项。例如，如果安装包`A`并安装依赖包`B`和`C`，则以后卸载包`A`将不会卸载`B`和`C`。
- en: Simplifying common operations – using the virtualenvwrapper tool
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化常见操作-使用virtualenvwrapper工具
- en: 'A tool that I use frequently is `virtualenvwrapper`, which is a very small
    set of smart defaults and command aliases that makes working with virtual environments
    more intuitive. Let''s install this to our global system now:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常使用的一个工具是`virtualenvwrapper`，它是一组非常智能的默认值和命令别名，使得使用虚拟环境更直观。现在让我们将其安装到我们的全局系统中：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This will also install the `virtualenv` package as well in case it is not already
    present.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这也将安装`virtualenv`包，以防它尚未存在。
- en: 'Next, you''ll want to add the following lines to the end of your shell startup
    file. This is most likely `~/.bashrc`, but in case you''ve changed your default
    shell to something else such as `zsh`, then it could be different (for example,
    `~/.zshrc`):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要将以下行添加到您的shell启动文件的末尾。这很可能是`~/.bashrc`，但是如果您已将默认shell更改为其他内容，例如`zsh`，那么它可能会有所不同（例如`~/.zshrc`）：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The first line in the preceding code block indicates that new virtual environments
    that are created with `virtualenvwrapper` should be stored in `$HOME/.virtualenvs`.
    You can modify this as you see fit, but I generally leave this as a good default.
    I find that keeping all my virtual environments in the same hidden folder in my
    home directory reduces the amount of clutter in individual projects and makes
    it a bit more difficult to mistakenly add a whole virtual environment to version
    control.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码块的第一行指示使用`virtualenvwrapper`创建的新虚拟环境应存储在`$HOME/.virtualenvs`中。您可以根据需要修改此设置，但我通常将其保留为一个很好的默认值。我发现将所有虚拟环境放在我的主目录中的同一个隐藏文件夹中可以减少个别项目中的混乱，并使误将整个虚拟环境添加到版本控制变得更加困难。
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Adding an entire virtual environment to version control might seem like a good
    idea, but things are never as simple as they seem. The moment someone running
    a slightly (or completely) different operating system decides to download your
    project, which includes a full `virtualenv` folder that may contain packages with
    `C` modules that were compiled against your own architecture, they're going to
    have a hard time getting things to work.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将整个虚拟环境添加到版本控制可能看起来像一个好主意，但事情从来不像看起来那么简单。一旦运行稍微（或完全）不同的操作系统的人决定下载您的项目，其中包括可能包含针对您自己的架构编译的`C`模块的包的完整`virtualenv`文件夹，他们将很难使事情正常工作。
- en: 'Instead, a common pattern that is supported by pip and used by many developers
    is to freeze the current state of the installed packages in a virtual environment
    and save this to a `requirements.txt` file:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，pip支持并且许多开发人员使用的常见模式是在虚拟环境中冻结已安装包的当前状态，并将其保存到`requirements.txt`文件中：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This file may then be added to a **version control system** (**VCS**). As the
    intent of the file is to declare which dependencies are required for the application,
    and not provide them or indicate how they should be constructed, users of your
    project are then free to obtain the required packages in any way they so choose.
    Generally, they will install them via `pip`, which can handle a requirements file
    just fine:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，该文件可以添加到**版本控制系统**（**VCS**）中。由于该文件的目的是声明应用程序所需的依赖关系，而不是提供它们或指示如何构建它们，因此您的项目的用户可以自由选择以任何方式获取所需的包。通常，他们会通过`pip`安装它们，`pip`可以很好地处理要求文件：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The second line adds a few convenient aliases to your current shell environment
    in order to create, activate, switch, and remove environments:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行在当前shell环境中添加了一些方便的别名，以创建、激活、切换和删除环境：
- en: '`mkvirtualenv test`: This will create an environment named test and activate
    it automatically.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mkvirtualenv test`：这将创建一个名为test的环境并自动激活它。'
- en: '`mktmpenv test`: This will create a temporary environment named test and activate
    it automatically. This environment will be destroyed once you invoke the deactivate
    script.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mktmpenv test`：这将创建一个名为test的临时环境并自动激活它。一旦调用停用脚本，此环境将被销毁。'
- en: '`workon app`: This will switch you to the app environment (already created).'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workon app`：这将切换到app环境（已经创建）。'
- en: '`workon` (`alias lsvirtualenv`): When you don''t specify an environment, this
    will print all the existing environments that are available.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workon`（`alias lsvirtualenv`）：当您不指定环境时，这将打印所有可用的现有环境。'
- en: '`deactivate`: This will disable the currently active environment, if any.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deactivate`：如果有的话，这将禁用当前活动的环境。'
- en: '`rmvirtualenv app`: This will completely remove the app environment.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rmvirtualenv app`：这将完全删除app环境。'
- en: 'We''ll use the following command to create an environment to install our application
    packages:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下命令创建一个环境来安装我们的应用程序包：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will create a blank `app1` environment and activate it. You should see
    an (`app1`) tag in your shell prompt.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个空的`app1`环境并激活它。您应该在shell提示符中看到一个（`app1`）标签。
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using a shell other than Bash or ZSH, this environment tag may or
    may not appear. The way in which this works is that the script that is used to
    activate the virtual environment also modifies your current prompt string (the
    `PS1` environment variable) so that it indicates the currently active `virtualenv`.
    As a result, there is a chance that this may not work if you're using a very special
    or non-standard shell configuration.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Bash或ZSH之外的shell，此环境标签可能会出现也可能不会出现。这样的工作方式是，用于激活虚拟环境的脚本还会修改当前的提示字符串（`PS1`环境变量），以便指示当前活动的`virtualenv`。因此，如果您使用非常特殊或非标准的shell配置，则有可能无法正常工作。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we looked at one of the most fundamental problems that any
    non-trivial Python application faces: library dependency management. Thankfully,
    the Python ecosystem has developed the widely adopted `virtualenv` tool for solving
    the most common subset of dependency problems that developers may encounter.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了任何非平凡的Python应用程序都面临的最基本的问题之一：库依赖管理。值得庆幸的是，Python生态系统已经开发了被广泛采用的`virtualenv`工具，用于解决开发人员可能遇到的最常见的依赖问题子集。
- en: Additionally, we looked at a tool, `virtualenvwrapper`, that abstracted away
    some of the most common operations that one would perform with `virtualenv`. While
    we listed some of the functionalities that this package provided, the list of
    things that `virtualenvwrapper` can do is much more extensive. We only presented
    the very basics here, but more in-depth learning about what this tool can do is
    indispensable if you work with Python virtual environments all day long.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还介绍了一个工具`virtualenvwrapper`，它抽象了一些使用`virtualenv`执行的最常见操作。虽然我们列出了这个软件包提供的一些功能，但`virtualenvwrapper`可以做的事情更加广泛。我们只是在这里介绍了基础知识，但如果您整天都在使用Python虚拟环境，深入了解这个工具能做什么是不可或缺的。
