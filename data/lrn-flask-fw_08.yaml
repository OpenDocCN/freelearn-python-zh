- en: Chapter 8. Testing Flask Apps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。测试Flask应用
- en: In this chapter, we shall learn how to write unit tests covering all parts of
    the blogging app. We will utilize Flask's test client to simulate live requests,
    and we will see how the Mock library can simplify the testing of complex interactions,
    such as calling third-party services such as databases.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何编写覆盖博客应用程序所有部分的单元测试。我们将利用Flask的测试客户端来模拟实时请求，并了解Mock库如何简化测试复杂交互，比如调用数据库等第三方服务。
- en: 'In this chapter we shall learn the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Python's unit test module and general guidelines for test writing
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python的单元测试模块和测试编写的一般指导
- en: Test-friendly configuration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 友好的测试配置
- en: How to simulate requests and sessions using the Flask test client
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Flask测试客户端模拟请求和会话
- en: How to use the Mock library to test complex interactions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Mock库测试复杂交互
- en: Logging exceptions and error e-mails
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录异常和错误邮件
- en: Unit testing
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: Unit Testing is a process that allows us to have confidence in the code, confidence
    in bug fixes, and confidence in future features. The idea of unit testing is simple;
    you write code that complements your functional code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是一个让我们对代码、bug修复和未来功能有信心的过程。单元测试的理念很简单；你编写与你的功能代码相辅相成的代码。
- en: As an example, let's say we design a program that needs to calculate some math
    correctly; how do you know it's successful? Why not pull out a calculator, and
    you know what a computer is? A big calculator. Also, computers are really quite
    good at mundane repetitive tasks, so why not write a unit test that works out
    the answer for you? Repeat this pattern for all areas of your code, bundle those
    tests up into one wrapper, and you have complete confidence in the code that you
    have produced.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设我们设计了一个需要正确计算一些数学的程序；你怎么知道它成功了？为什么不拿出一个计算器，你知道计算机是什么吗？一个大计算器。此外，计算机在乏味的重复任务上确实非常擅长，那么为什么不编写一个单元测试来为你计算出答案呢？对代码的所有部分重复这种模式，将这些测试捆绑在一起，你就对自己编写的代码完全有信心了。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are some who say that tests are a sign of code "smell", that your code
    is so complex that it needs tests to prove that it works. This means that the
    code should be simpler. However, it really depends on your situation and it is
    up to you to make that judgment call. Unit tests are a good place to start before
    we start getting into making the code simpler.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有人说测试是代码“味道”的标志，你的代码如此复杂，以至于需要测试来证明它的工作。这意味着代码应该更简单。然而，这真的取决于你的情况，你需要自己做出判断。在我们开始简化代码之前，单元测试是一个很好的起点。
- en: What is clever about unit testing is that the tests complement the functional
    code. The methods prove that the tests work and the tests prove that the methods
    work. It reduces the likelihood of the code having major functional bugs, reducing
    the headache of having to rework the code in future, and allows you to concentrate
    on the minutiae of the new features that you want to work on.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试的巧妙之处在于测试与功能代码相辅相成。这些方法证明了测试的有效性，而测试证明了方法的有效性。它减少了代码出现重大功能错误的可能性，减少了将来重新编写代码的头痛，并允许你专注于你想要处理的新功能的细枝末节。
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The idea behind unit tests is to verify that small sections of code—or rather,
    simple bits of functionality—are tested. This will then build to the greater whole
    of your application. It is very easy to end up writing enormous tests that test
    the functionality of your code and not the code itself. If your test is looking
    pretty big, it's usually an indication that your main code should be broken down
    into smaller methods.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试的理念是验证代码的小部分，或者说是测试简单的功能部分。这将构建成应用程序的整体。很容易写出大量测试代码，测试的是代码的功能而不是代码本身。如果你的测试看起来很大，通常表明你的主要代码应该被分解成更小的方法。
- en: Python's unit test module
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python的单元测试模块
- en: 'Fortunately, as is almost always the case with Python, there is a built-in
    unit test module. Much like Flask, it''s very easy to get a simple unit test module
    in place. In your main blog app, create a new directory called `tests` and, within
    that directory, create a new file called `test.py`. Now, using your favorite text
    editor, enter in the following code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，几乎总是如此，Python有一个内置的单元测试模块。就像Flask一样，很容易放置一个简单的单元测试模块。在你的主要博客应用程序中，创建一个名为`tests`的新目录，并在该目录中创建一个名为`test.py`的新文件。现在，使用你喜欢的文本编辑器，输入以下代码：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding snippet demonstrates the basic framework for all the unit test
    modules that we will write. Simply making use of the built-in Python module `unittest`,
    it then creates a class that wraps a particular set of tests. The tests in this
    example, are the methods that start with the word `test`. The unit test module
    recognizes these as the methods that should be run each time `unittest.main` is
    called. Also, the `TestCase` class, which the `ExampleTest` class is inheriting
    from here, has some special methods that unit test will always attempt to use.
    One of them is `setUp`, a method that is run before each of the test methods that
    are run. This can be particularly useful when you want to run each test in isolation,
    but want, for example, to have a connection to a database in place.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的片段演示了我们将编写的所有单元测试模块的基本框架。它简单地利用内置的Python模块`unittest`，然后创建一个包装特定测试集的类。在这个例子中，测试是以单词`test`开头的方法。单元测试模块将这些方法识别为每次调用`unittest.main`时应该运行的方法。此外，`TestCase`类（`ExampleTest`类在这里继承自它）具有一些特殊方法，单元测试将始终尝试使用。其中之一是`setUp`，这是在运行每个测试方法之前运行的方法。当您想要在隔离环境中运行每个测试，但是，例如，要在数据库中建立连接时，这可能特别有用。
- en: The other special method is `tearDown`. This is run whenever a test method is
    run. Again, this is extremely useful for running each test in isolation when we
    want to maintain a database.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个特殊的方法是`tearDown`。每次运行测试方法时都会运行此方法。同样，当我们想要维护数据库时，这对于每个测试都在隔离环境中运行非常有用。
- en: Obviously, this code example will not do anything if run. To get it to a usable
    state, and by following the principles of **test-driven development** (**TDD**),
    we first need to write a test that verifies that the code we are going to write
    works correctly and then write the code that fulfills that test.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这个代码示例如果运行将不会做任何事情。要使其处于可用状态，并且遵循**测试驱动开发**（**TDD**）的原则，我们首先需要编写一个测试，验证我们即将编写的代码是否正确，然后编写满足该测试的代码。
- en: A simple math test
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个简单的数学测试
- en: 'For this example, we are going to write a test that verifies that a method
    will accept two numbers as arguments, subtract one from the second argument, then
    multiply them together. Take a look at the following example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将编写一个测试，验证一个方法将接受两个数字作为参数，从第二个参数中减去一个，然后将它们相乘。看一下以下示例：
- en: '| Argument 1 | Argument 2 | Answer |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 参数1 | 参数2 | 答案 |'
- en: '| --- | --- | --- |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `1` | `1` | `1 * (1-1) = 0` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `1` | `1 * (1-1) = 0` |'
- en: '| `1` | `2` | `1 * (2-1) = 1` |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `2` | `1 * (2-1) = 1` |'
- en: '| `2` | `3` | `2 * (3-1) = 4` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `2` | `3` | `2 * (3-1) = 4` |'
- en: 'In your `test.py` file, you can create a method within the `ExampleTest` class
    that represents the preceding table as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`test.py`文件中，你可以创建一个在`ExampleTest`类中表示前面表格的方法，如下所示：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code creates a new method that asserts, with Python's `unittest`
    module, the answers to the questions. The `assertEqual` function takes the returned
    response from the `my_multiplication` method on the first argument and compares
    that to the second argument. If it passes, it does nothing, waiting for the next
    assertion to be tested. But if it does not match, it will throw an error and your
    test method will stop executing to tell you there was an error.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码创建了一个新的方法，使用Python的`unittest`模块来断言问题的答案。`assertEqual`函数将`my_multiplication`方法返回的响应作为第一个参数，并将其与第二个参数进行比较。如果通过了，它将什么也不做，等待下一个断言进行测试。但如果不匹配，它将抛出一个错误，并且你的测试方法将停止执行，告诉你出现了错误。
- en: In the preceding code example, there is also an `assertNotEqual` method. This
    works much the same as `assertEqual` but, rather, checks whether the values do
    not match each other. It is also a good idea to check when your method is likely
    to fail. If you've only checked the situations in which your method will work,
    you have only done half the work, and will likely run into problems with edge
    cases. A wide variety of assertion methods come with Python's `unittest` module,
    and that would be useful to explore.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，还有一个`assertNotEqual`方法。它的工作方式与`assertEqual`类似，但是检查值是否不匹配。还有一个好主意是检查你的方法何时可能失败。如果你只检查了方法将起作用的情况，那么你只完成了一半的工作，并且可能会在边缘情况下遇到问题。Python的`unittest`模块提供了各种各样的断言方法，这将是有用的去探索。
- en: 'Now we can write the method that will give these results. For simplicity, we
    will write the method in the same file. Within the file, create the following
    method:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写将给出这些结果的方法。为简单起见，我们将在同一个文件中编写该方法。在文件中，创建以下方法：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Save the file and run it using the following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并使用以下命令运行它：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![A simple math test](img/1709_08_01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![一个简单的数学测试](img/1709_08_01.jpg)'
- en: 'Oops! It failed. Why? Well, reviewing the `my_multiplication` method reveals
    that we missed some brackets. Let''s go back and correct that:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！它失败了。为什么？嗯，回顾`my_multiplication`方法发现我们漏掉了一些括号。让我们回去纠正一下：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And now lets run it again:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再次运行它：
- en: '![A simple math test](img/1709_08_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![一个简单的数学测试](img/1709_08_02.jpg)'
- en: Success! We now have a method that is correct; in future, we will know if it
    has been changed, and how it will need to be changed at a later point. Now to
    use this new skill with Flask.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 成功了！现在我们有了一个正确的方法；将来，我们将知道它是否被更改过，以及在以后需要如何更改。现在来用这个新技能与Flask一起使用。
- en: Flask and unit testing
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask和单元测试
- en: 'You may be thinking: "Unit tests look great for small sections of code, but
    how do you test it for an entire Flask app?" Well one of the ways, as mentioned
    previously, is to make sure that all your methods are as discrete as possible—that
    is, to make sure your methods do the least possible work to complete their function,
    and to avoid repetition between methods. If your methods are not discrete, now
    is a good time to get them tidied up.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想：“单元测试对于代码的小部分看起来很棒，但是如何为整个Flask应用程序进行测试呢？”嗯，正如之前提到的一种方法是确保所有的方法尽可能离散——也就是说，确保你的方法尽可能少地完成它们的功能，并避免方法之间的重复。如果你的方法不是离散的，现在是整理它们的好时机。
- en: 'Another thing that will help is that Flask comes readymade for unit testing.
    There is a good chance that any existing application can have at least some unit
    tests applied to it. Especially, any areas of API such as in unable to verify
    will be extremely easy to test by making use of the methods that represent the
    HTTP requests already within Flask. Following is a simple example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件有用的事情是，Flask已经准备好进行单元测试。任何现有应用程序都有可能至少可以应用一些单元测试。特别是，任何API区域，例如无法验证的区域，都可以通过利用Flask中已有的代表HTTP请求的方法来进行极其容易的测试。以下是一个简单的示例：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This code should hopefully look very familiar. It simply re-writes the previous
    example to verify that the homepage is working. The `test_client` method that
    Flask exposes, allows simple access to the app via methods that represent the
    HTTP calls, as per the first line of the `test` method. The `test` method itself
    does not check the content of the page, but simply that the page loaded successfully.
    This may sound trivial, but it is useful to know that the homepage works. And
    the result? You can see it here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码应该看起来非常熟悉。它只是重新编写了前面的示例，以验证主页是否正常工作。Flask公开的`test_client`方法允许通过代表HTTP调用的方法简单访问应用程序，就像`test`方法的第一行所示。`test`方法本身并不检查页面的内容，而只是检查页面是否成功加载。这可能听起来微不足道，但知道主页是否正常工作是很有用的。结果呢？你可以在这里看到：
- en: '![Flask and unit testing](img/1709_08_03.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Flask和单元测试](img/1709_08_03.jpg)'
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: One thing to be aware of is that we won't need to test Flask itself and must
    avoid testing it so that we don't create too much work for ourselves.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一件事是，我们不需要测试Flask本身，必须避免测试它，以免为自己创造太多工作。
- en: Testing a page
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试一个页面
- en: 'One thing to notice about running the previous tests are that they are very
    simplistic. No actual browser behaves that way. Browsers do things such as storing
    cookies for logging in: requesting static files such as JavaScript, images, and
    CSS files: and requesting data in particular formats. Somehow, we are going to
    need to simulate this functionality and test whether the results were correct.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 关于运行先前的测试的一件事需要注意的是，它们非常简单。实际上没有浏览器会以这种方式行事。浏览器会执行诸如存储用于登录的cookie、请求JavaScript、图像和CSS文件等静态文件，以及请求特定格式的数据等操作。不知何故，我们需要模拟这种功能，并测试结果是否正确。
- en: Tip
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This is the part where unit testing starts becoming functional testing. While
    there is nothing intrinsically wrong with that, it is worth keeping in mind that
    smaller tests are better.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是单元测试开始变成功能测试的部分。虽然这本身并没有什么错，但值得注意的是，较小的测试更好。
- en: 'Fortunately, Flask does all this for you simply by using the `app.get` methods
    from earlier, but there are some tricks you can use to make things easier. For
    example, adding functions to the `TestCase` class for logging in and out will
    make things much simpler:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Flask通过使用先前的`app.get`方法来为您完成所有这些工作，但是您可以使用一些技巧来使事情变得更容易。例如，向`TestCase`类添加登录和退出功能将使事情变得简单得多：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code is a framework for future test cases. Any time we have a
    test case that requires logging in and out, add this `Mixin` to the inheritance
    list and it automatically becomes available:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码是未来测试用例的框架。每当我们有一个需要登录和退出的测试用例时，只需将此`Mixin`添加到继承列表中，它就会自动可用：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The test case that we''ve just explained uses `FlaskLoginMixin`, a set of methods
    that aid in checking whether logging in and out is working correctly. This is
    achieved by checking that the response page sends the correct message and has
    the correct warning in the content of the page. Our test can further be extended
    to check whether a user has access to a page which they shouldn''t. Flask takes
    care of the sessions and cookies for you, so it''s as simple as the following
    code snippet:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚解释的测试用例使用了`FlaskLoginMixin`，这是一组方法，可以帮助检查登录和退出是否正常工作。这是通过检查响应页面是否发送了正确的消息，并且页面内容中是否有正确的警告来实现的。我们的测试还可以进一步扩展，以检查用户是否可以访问他们不应该访问的页面。Flask会为您处理会话和cookie，所以只需使用以下代码片段即可：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What the preceding code snippet shows is how to test whether certain pages are
    correctly protected. A very useful test. It also verifies that, when an admin
    logs out, they can no longer access the pages they had access to while being logged
    in. The method names are self, explanatory such that if those tests fail, it is
    obvious to tell what was being tested.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段显示了如何测试某些页面是否受到正确保护。这是一个非常有用的测试。它还验证了，当管理员注销时，他们将无法再访问他们在登录时可以访问的页面。方法名称是自解释的，因此如果这些测试失败，很明显可以知道正在测试什么。
- en: Testing an API
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试API
- en: 'Testing APIs is even easier as it is a programmatic interference. Using the
    previous comment API set up in [Chapter 7](ch07.html "Chapter 7. AJAX and RESTful
    APIs"), *AJAX and RESTful APIs,* we can quite easily insert and retrieve some
    comments and verify that it worked correctly. To test this we will need to `import`
    the json library to work with our `JSON` based API:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 测试API甚至更容易，因为它是程序干预。使用[第7章](ch07.html "第7章。AJAX和RESTful API")中设置的先前评论API，*AJAX和RESTful
    API*，我们可以很容易地插入和检索一些评论，并验证它是否正常工作。为了测试这一点，我们需要`import` json库来处理我们的基于`JSON`的API：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding code example shows a comment dictionary object being created.
    This is used to verify that the values that went in were the same as the ones
    that came out. The methods therefore test posting the comment data to the `/api/comment`
    endpoint, verifying the data that sent back by the server has the right data in
    it. The `test_getting_comment` method checks again that a comment is posted to
    the server but is more concerned if the result that was requested by verifying
    the data that was sent in was the same as what came out.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码示例显示了创建一个评论字典对象。这用于验证输入的值与输出的值是否相同。因此，这些方法测试将评论数据发布到`/api/comment`端点，验证服务器返回的数据是否正确。`test_getting_comment`方法再次检查是否将评论发布到服务器，但更关心所请求的结果，通过验证发送的数据是否与输出的数据相同。
- en: Test-friendly configuration
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试友好的配置
- en: One of the first obstacles faced by writing tests in a team or with a production
    environment is, How do we make sure that the tests are run without interfering
    with the production or even the development database. You certainly don't want
    to be attempting to fix bugs, or trialing new features and then finding that the
    data it relies upon has changed. Sometimes, a quick test just needs to be run
    on a local copy of the database without interference from anyone else, with the
    Flask app knowing how to use that.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在团队中编写测试或在生产环境中编写测试时遇到的第一个障碍之一是，我们如何确保测试在不干扰生产甚至开发数据库的情况下运行。您肯定不希望尝试修复错误或试验新功能，然后发现它所依赖的数据已经发生了变化。有时，只需要在本地数据库的副本上运行一个快速测试，而不受任何其他人的干扰，Flask应用程序知道如何使用它。
- en: One of the features built into Flask is the ability to load a configuration
    file depending on the environment variables.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Flask内置的一个功能是根据环境变量加载配置文件。
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding method call informs your Flask app that the configuration should
    be loaded in the file specified in the environment variable `FLASK_APP_BLOG_CONFIG_FILE`.
    This has to be an absolute path to the file that you would like to load. Therefore,
    when you run your tests, a file specific to running your tests should be referred
    to here.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法调用通知您的Flask应用程序应该加载在环境变量`FLASK_APP_BLOG_CONFIG_FILE`中指定的文件中的配置。这必须是要加载的文件的绝对路径。因此，当您运行测试时，应该在这里引用一个特定于运行测试的文件。
- en: 'As we already have a configuration file set up for our environment and we are
    looking to create a testing configuration file, a useful trick is to make use
    of the existing configuration and override just the important bits. The first
    thing to do is to create yourself a config directory with an __init__.py file.
    Our testing.py configuration file can then be added to that directory and can
    override some aspects of your config.py configuration file. For example, your
    new testing configuration file might look as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经为我们的环境设置了一个配置文件，并且正在创建一个测试配置文件，一个有用的技巧是利用现有的配置并覆盖重要的部分。首先要做的是创建一个带有__init__.py文件的config目录。然后可以将我们的testing.py配置文件添加到该目录中，并覆盖config.py配置文件的一些方面。例如，你的新测试配置文件可能如下所示：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding code adds the TESTING attribute that can be used to determine
    if your app is currently being tested, and changes the DATABASE value to a database
    that is more suitable for testing, an in-memory SQLite database that doesn't have
    to be cleared down once your test finishes
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码添加了TESTING属性，可以用来确定你的应用程序当前是否正在进行测试，并将DATABASE值更改为更适合测试的数据库，一个内存中的SQLite数据库，不必在测试结束后清除。
- en: 'These values can then be used like any other configuration in Flask and, when
    running the tests, the environment variable can be specified to point to that
    file. If we want to automate the updating of the environment variable for our
    tests, we can update Python''s built-in OS environment variable object in our
    `test.py` file in the `test` folder:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后这些值可以像Flask中的任何其他配置一样使用，并且在运行测试时，可以指定环境变量指向该文件。如果我们想要自动更新测试的环境变量，我们可以在`test`文件夹中的`test.py`文件中更新Python的内置OS环境变量对象：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Mocking objects
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟对象
- en: Mocking is an exceptionally useful part of any tester's tool kit. Mocking allows
    for custom objects to be over written with an object that can be used to verify
    if a method is doing the correct thing to its arguments. Sometimes, this may need
    a bit of re-imagining and a refactoring of your app so as to work in a testable
    way, but otherwise the concept is simple. We create a mocking object, run it through
    the method, and then run the tests on that object. It lends itself particularly
    well to databases and ORM models such as from `SQLAlchemy`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟是测试人员工具箱中非常有用的一部分。模拟允许自定义对象被一个对象覆盖，该对象可以用来验证方法对其参数是否执行正确的操作。有时，这可能需要重新构想和重构你的应用程序，以便以可测试的方式工作，但是概念很简单。我们创建一个模拟对象，将其运行通过方法，然后对该对象运行测试。它特别适用于数据库和ORM模型，比如`SQLAlchemy`。
- en: 'There are lots of Mocking frameworks available but, for this book, we shall
    be using `Mockito`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多模拟框架可用，但是在本书中，我们将使用`Mockito`：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It is one of the simplest to use:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最简单的之一：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding code imports the functions from the `Mockito` library, creates
    a `mock` object that can be used for mocking, runs a method on it, and verifies
    that the method has been run. Obviously, if you want the method being tested to
    function properly without an error, you will need it to return a valid value when
    the method on the mocked object is being called.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码从`Mockito`库导入函数，创建一个可以用于模拟的`mock`对象，对其运行一个方法，并验证该方法已经运行。显然，如果你希望被测试的方法在没有错误的情况下正常运行，你需要在调用模拟对象上的方法时返回一个有效的值。
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding example, we are creating a mocked up `duck` object, giving
    it the ability to `quack,` and then proving that it can `quack`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们创建了一个模拟的`duck`对象，赋予它`quack`的能力，然后证明它可以`quack`。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In dynamically typed languages such as Python, where an object you have may
    not be the one you are expecting, it is common practice to use duck-typing. As
    the phrase says "if it walks like a duck and quacks like a duck, it must be a
    duck". This is really useful when creating mocking objects, as it is easy to use
    a fake Mock object without your methods noticing the switch.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python这样的动态类型语言中，当你拥有的对象可能不是你期望的对象时，使用鸭子类型是一种常见的做法。正如这句话所说“如果它走起来像鸭子，叫起来像鸭子，那它一定是鸭子”。这在创建模拟对象时非常有用，因为很容易使用一个假的模拟对象而不让你的方法注意到切换。
- en: The difficulty arises when Flask uses its decorators to run methods before your
    method is run and you need to override it to, for example, replace the database
    initiator. The technique that can be used here is to have the decorators run a
    method that is globally available to the module, such as a method that creates
    a connection to the database.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当Flask使用其装饰器在你的方法运行之前运行方法，并且你需要覆盖它，例如，替换数据库初始化程序时，就会出现困难。这里可以使用的技术是让装饰器运行一个对模块全局可用的方法，比如创建一个连接到数据库的方法。
- en: 'Say your `app.py` looks like the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的`app.py`看起来像下面这样：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding code sets up a very simple app that creates a fake database as
    a Python dictionary object. Now to override with our own database as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码设置了一个非常简单的应用程序，创建了一个Python字典对象作为一个虚假的数据库。现在要覆盖为我们自己的数据库如下：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding code uses the Mockito library to create a fake database object.
    It also creates a method that overrides the method in the app module that creates
    the connection to the database—in this case, a simple dictionary object. You will
    notice that you can also specify arguments for methods when using Mockito. Now
    when the test is run, it inserts a value into the database for the page to return;
    this is then tested.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码使用Mockito库创建一个虚假的数据库对象。它还创建了一个方法，覆盖了app模块中创建数据库连接的方法，这里是一个简单的字典对象。你会注意到，当使用Mockito时，你也可以指定方法的参数。现在当测试运行时，它会向数据库插入一个值，以便页面返回；然后进行测试。
- en: Logging and error reporting
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录和错误报告
- en: Logging and error reporting are intrinsic to a production-ready web app. Logging
    keeps a record of all problems even if your app has crashed, while error reporting
    can directly notify us of specific problems even though the site keeps running.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 记录和错误报告对于一个生产就绪的网络应用来说是内在的。即使你的应用程序崩溃，记录仍然会记录所有问题，而错误报告可以直接通知我们特定的问题，即使网站仍在运行。
- en: It can be very gratifying to discover errors before anyone has reported them.
    It also makes it possible to roll out fixes before your users start complaining
    to you. However, to do this, you need to know what those errors were, when they
    occurred, and what caused them.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何人报告错误之前发现错误可能是非常令人满意的。这也使得您能够在用户开始向您抱怨之前推出修复。然而，为了做到这一点，您需要知道这些错误是什么，它们是在什么时候发生的，以及是什么导致了它们。
- en: Fortunately, as must be quite familiar right now, Python and Flask already have
    this in hand.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，现在您应该非常熟悉，Python和Flask已经掌握了这一点。
- en: Logging
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志记录
- en: Flask comes with a built-in logger—an already defined instance of Python's built-in
    logger. You will hopefully be quite familiar with it by now. The logger messages
    are displayed, by default, each time a page is accessed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Flask自带一个内置的记录器——Python内置记录器的一个已定义实例。你现在应该对它非常熟悉了。默认情况下，每次访问页面时都会显示记录器消息。
- en: '![Logging](img/1709_08_04.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![日志记录](img/1709_08_04.jpg)'
- en: The preceding screenshot, obviously, shows the output to the terminal. We can
    see here that someone accessed the root page from `localhost` (`127.0.0.1`), on
    that particular date, with a `GET` request, as well as a few other directories.
    The server responded with one '`200` success' message, and two '`404` not found
    error' messages. While having this terminal output is useful when developing,
    it is not necessarily very useful if your app crashed while running in your production
    environment. We will need to see what happened from a file that was written to.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图显然显示了终端的输出。我们可以在这里看到有人在特定日期从`localhost`（`127.0.0.1`）访问了根页面，使用了`GET`请求，以及其他一些目录。服务器响应了一个“`200`成功”消息和两个“`404`未找到错误”消息。虽然在开发时拥有这个终端输出是有用的，但如果您的应用程序在生产环境中运行时崩溃，这并不一定很有用。我们需要从写入的文件中查看发生了什么。
- en: Logging to file
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录到文件
- en: 'There are various OS, dependent ways of writing logs like this to a file. However,
    as indicated previously, Python does have this built in, and Flask simply follows
    Python''s plan, which is quite simple. Add the following to the `app.py file`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种各样依赖于操作系统的将这样的日志写入文件的方法。然而，如前所述，Python已经内置了这个功能，Flask只是遵循Python的计划，这是非常简单的。将以下内容添加到`app.py`文件中：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: One thing to note here is that loggers make use of different handlers to complete
    their functionality. The handler we are using here is `RotatingFileHandler`. Not
    only does this handler write the files to disk (in this case to `blog.log)Courier`
    but also makes sure that our file doesn't get too big and fills up the disk with
    log messages, potentially taking the site down.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一点是，记录器使用不同的处理程序来完成其功能。我们在这里使用的处理程序是`RotatingFileHandler`。这个处理程序不仅会将文件写入磁盘（在这种情况下是`blog.log`），还会确保我们的文件不会变得太大并填满磁盘，潜在地导致网站崩溃。
- en: Custom log messages
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义日志消息
- en: 'One thing that can be really useful when trying to debug a difficult-to-trace
    issue is that we can add more logging to our blogging app. This can be done with
    the built-in logging object within Flask as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试调试难以追踪的问题时，一个非常有用的事情是我们可以向我们的博客应用程序添加更多的日志记录。这可以通过Flask内置的日志对象来实现，如下所示：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding example demonstrates how to create a custom logging message. However,
    a message such as this will actually slow down our application quite considerably
    as it will write that message to the file or to the console, each time the homepage
    is accessed. Fortunately, Flask also understands the concept of logging levels,
    whereby we can specify which messages should be logged in different environments.
    For example, it would not be useful to record a message such as an info message
    in a production environment whereas a user failing to log in would be worthy of
    recording.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例演示了如何创建自定义日志消息。然而，这样的消息实际上会相当大幅地减慢我们的应用程序，因为它会在每次访问主页时将该消息写入文件或控制台。幸运的是，Flask也理解日志级别的概念，我们可以指定在不同环境中应记录哪些消息。例如，在生产环境中记录信息消息是没有用的，而用户登录失败则值得记录。
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding command simply logs a warning that a user failed to log in successfully
    using Python's string format method. As long as the error logging is low enough
    in Python, this message will be displayed.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令只是记录了一个警告，即用户未能成功登录，使用了Python的字符串格式化方法。只要Python中的错误日志记录足够低，这条消息就会被显示。
- en: Levels
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 级别
- en: 'The principle of logging levels is: the higher the importance of the log, the
    higher the level, and the less likely it is to be logged, depending on your logging
    level. For example, to be able to log warnings (and above, such as `ERROR`), we
    need to adjust the logging level to `WARNING`. We can do this in our configuration
    file. Edit the `config.py` file in the `config` folder to add the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 日志级别的原则是：日志的重要性越高，级别越高，根据您的日志级别，记录的可能性就越小。例如，要能够记录警告（以及以上级别，如`ERROR`），我们需要将日志级别调整为`WARNING`。我们可以在配置文件中进行这样的调整。编辑`config`文件夹中的`config.py`文件，添加以下内容：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding code snippet just uses the built-in Python logger to tell Flask
    how to handle logs. Of course, you can set different logging levels depending
    on your environment. For example, in your `testing.py` file in the `config` folder,
    we should use the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段只是使用内置的Python记录器告诉Flask如何处理日志。当然，您可以根据您的环境设置不同的日志级别。例如，在`config`文件夹中的`testing.py`文件中，我们应该使用以下内容：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As for the purpose of testing, we don't need warnings. Similarly, we should
    do this for any production configuration file; for any development configuration
    files, use style.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 至于测试的目的，我们不需要警告。同样，我们应该为任何生产配置文件做同样的处理；对于任何开发配置文件，使用样式。
- en: Error reporting
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误报告
- en: It's all well and good having errors logged on the machine but it's even better
    if the errors come straight to your inbox where you can be immediately notified.
    Fortunately, as with all these things, Python has a built-in way of doing it that
    Flask can make use of. It is just another handler such as `RotatingFileHandler`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器上记录错误是很好的，但如果错误直接发送到您的收件箱，您可以立即收到通知，那就更好了。幸运的是，像所有这些东西一样，Python有一种内置的方法可以做到这一点，Flask可以利用它。这只是另一个处理程序，比如`RotatingFileHandler`。
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding code creates `SMTPHandler` with a configuration that identifies
    where your mail server is and what the send address is, takes a list of e-mail
    addresses to send to from the configuration file, and gives the e-mail a subject
    so that we can identify where the error came from.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码创建了一个`SMTPHandler`，其中配置了邮件服务器的位置和发送地址，从配置文件中获取要发送邮件的电子邮件地址列表，并为邮件设置了主题，以便我们可以确定错误的来源。
- en: Read more
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读更多
- en: 'Unit testing is a vast and complex area. Flask has some excellent documentation
    on other techniques for writing effective tests: [http://flask.pocoo.org/docs/0.10/testing/](http://flask.pocoo.org/docs/0.10/testing/).'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是一个广阔而复杂的领域。Flask在其他编写有效测试的技术方面有一些很好的文档：[http://flask.pocoo.org/docs/0.10/testing/](http://flask.pocoo.org/docs/0.10/testing/)。
- en: 'Python, of course, has its own documentation on unit testing: [https://docs.python.org/2/library/unittest.html](https://docs.python.org/2/library/unittest.html).'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Python有自己的单元测试文档：[https://docs.python.org/2/library/unittest.html](https://docs.python.org/2/library/unittest.html)。
- en: 'Flask uses the logging module from Python for its logging. This, in turn, follows
    the C library structure for its logging levels. More detail can be found at: [https://docs.python.org/2/library/logging.html](https://docs.python.org/2/library/logging.html).'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Flask使用Python的日志模块进行日志记录。这又遵循了C库结构的日志记录级别。更多细节可以在这里找到：[https://docs.python.org/2/library/logging.html](https://docs.python.org/2/library/logging.html)。
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learnt how to create some tests for our blogging app
    to verify that it is loading pages correctly, and that logging-in is taking place
    correctly. We have also set up logging to files and sent e-mails when errors occur.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经学会了如何为我们的博客应用创建一些测试，以验证它是否正确加载页面，以及登录是否正确进行。我们还设置了将日志记录到文件，并在发生错误时发送电子邮件。
- en: In the next chapter, we will learn how we can improve our blog with extensions
    that add extra features with minimal effort on our part.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何通过扩展来改进我们的博客，这些扩展可以在我们的部分付出最小的努力的情况下添加额外的功能。
