- en: Using Python for Enterprise
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python进行企业开发
- en: Python has been around in the world of programming for more than two decades
    now, and over the years, the language has seen a number of refinements, a growing
    community, and a lot of production-ready and well-supported libraries. But is
    Python ready to make a dent in the world of enterprise application development,
    which has been long dominated by the likes of C++, Java, and .NET, the so-called
    **enterprise-grade languages**?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python在编程世界中已经存在了二十多年，多年来，这种语言已经经历了许多改进，一个不断增长的社区，以及许多生产就绪和得到良好支持的库。但Python是否准备好在长期由C++、Java和.NET等所谓的**企业级语言**主导的企业应用程序开发领域取得突破？
- en: Over the course of this chapter, we will see how Python has evolved over the
    years and how it is ready to become a serious competitor in the world of enterprise
    application development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到Python如何在多年来发展，并且准备成为企业应用程序开发领域的严肃竞争者。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Recent developments in Python to enable its growth in enterprise application
    development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python的最新发展，以促进其在企业应用程序开发中的增长
- en: The special use cases where Python shines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python发光的特殊用例
- en: The differences between enterprise and general-purpose software
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业和通用软件之间的区别
- en: The requirements for developing an enterprise application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发企业应用程序的要求
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code listings in this book can be found under `chapter01` directory at [https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python.](https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的代码清单可以在[https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python](https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python)的`chapter01`目录下找到
- en: 'The code samples can be cloned by running the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下命令克隆代码示例：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The instructions to run the code can be found under the `README` file in the
    individual chapter directories.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码的说明可以在各个章节目录下的`README`文件中找到。
- en: The code has been tested to run on a system that is running Fedora 28 and Python
    version 3.6.5, but it should be able to run on any system running Python 3.6.5.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 代码已经测试在运行Fedora 28和Python版本3.6.5的系统上运行，但它应该能够在运行Python 3.6.5的任何系统上运行。
- en: Recent developments in Python
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python的最新发展
- en: Python is a dynamically typed, interpreted language that was initially well
    suited for scripting tasks that are boring and repetitive day-to-day tasks. But
    as the years progressed, the language gained a number of new features and the
    huge backing of its community, which propelled its development to make it a language
    that is now well suited to performing tasks that range from very simple applications,
    such as web scraping, to analyzing large amounts of data for training machine
    learning models that themselves are written in Python. Let's take a look at some
    of the major things that have changed over the years and see what the latest release
    of Python, Python 3, brings to the table.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种动态类型的解释型语言，最初非常适合于无聊和重复的日常脚本任务。但随着年龄的增长，语言获得了许多新功能和庞大的社区支持，推动了其发展，使其成为一种非常适合执行从简单的应用程序（如网络抓取）到分析大量数据以训练机器学习模型的任务的语言。这些模型本身是用Python编写的。让我们看看多年来发生了哪些重大变化，并了解Python的最新版本Python
    3带来了什么。
- en: Dropping backward compatibility
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 放弃向后兼容性
- en: Python as a language has evolved a lot over the years, but despite this fact,
    a program written in Python 1.0 will still be able to run in Python 2.7, which
    is a version that was released 19 years after Python 1.0.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Python作为一种语言在多年来发生了很大变化，但尽管这一事实，用Python 1.0编写的程序仍然能够在Python 2.7中运行，这是在Python
    1.0发布19年后发布的版本。
- en: Though a great benefit for the developers of Python applications, this backward
    compatibility of the language is also a major hurdle in the growth and development
    of major improvements in the language specification, since a great amount of the
    older code base will break if major changes are made to the language specification.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管对Python应用程序的开发人员来说是一个巨大的好处，但语言的这种向后兼容性也是语言规范的重大改进的增长和发展的主要障碍，因为如果对语言规范进行重大更改，大量旧代码库将会中断。
- en: With the release of Python 3, this chain of backward compatibility was broken.
    The language in version 3 dropped the support for programs that were written in
    earlier versions ...
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Python 3的发布，这种向后兼容性链被打破了。版本3的语言放弃了对早期版本编写的程序的支持...
- en: It's all Unicode
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这都是Unicode
- en: In the days of Python 2, the text data type `str` was used to support ASCII
    data, and for Unicode data, the language provided a `unicode` data type. When
    someone wanted to deal with a particular encoding, they took a string and encoded
    it into the required encoding scheme.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 2时代，文本数据类型`str`用于支持ASCII数据，对于Unicode数据，语言提供了`unicode`数据类型。当有人想要处理特定编码时，他们会取一个字符串并将其编码为所需的编码方案。
- en: 'Also, the language inherently supported an implicit conversion of the string
    type to the `unicode` type. This is shown in the following code snippet:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，该语言天生支持将字符串类型隐式转换为`unicode`类型。如下代码片段所示：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This used to work, because here, Python would implicitly decode the byte string
    `str1` into Unicode using the default encoding and then perform a concatenation.
    One thing to note here is that if this `str1` string contained any non-ASCII characters,
    then this concatenation would have failed in Python, raising a `UnicodeDecodeError`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这曾经有效，因为在这里，Python会隐式地使用默认编码将字节字符串`str1`解码为Unicode，然后执行连接。这里需要注意的一点是，如果`str1`字符串包含任何非ASCII字符，那么这种连接在Python中将失败，引发`UnicodeDecodeError`。
- en: 'With the arrival of Python 3, the data types that dealt with text changed.
    Now, the default data type `str` which was used to store text supports Unicode.
    With this, Python 3 also introduced a binary data type, called `bytes`, which
    can be used to store binary data. These two types, `str` and `bytes`, are incompatible
    and no implicit conversion between them will happen, and any attempt to do so
    will give rise to `TypeError`, as shown in the following code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Python 3的到来，处理文本的数据类型发生了变化。现在，默认数据类型`str`用于存储文本并支持Unicode。此外，Python 3还引入了一个名为`bytes`的二进制数据类型，用于存储二进制数据。这两种类型`str`和`bytes`是不兼容的，它们之间不会发生隐式转换，任何尝试这样做的行为都会引发`TypeError`，如下面的代码所示：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As we can see, an attempt to concatenate a `unicode` type string with a `byte`
    type string failed with `TypeError`. Although an implicit conversion of a `string`
    to a `byte` or a `byte` to a `string` is not possible, we do have methods that
    allow us to encode a `string` into a `bytes` type and decode a `bytes` type to
    a `string`. Look at the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，尝试将`unicode`类型字符串与`byte`类型字符串连接失败，出现了`TypeError`。虽然无法将`string`隐式转换为`byte`，或者将`byte`隐式转换为`string`，但我们有一些方法可以将`string`编码为`bytes`类型，将`bytes`类型解码为`string`。看看以下代码：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This clear distinction between a string type and binary type with restrictions
    on implicit conversion allows for more robust code and fewer errors. But these
    changes also mean that any code that used to deal with the handling of Unicode
    in Python 2 will need to be rewritten in Python 3 because of the backward incompatibility.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串类型和二进制类型之间的明显区别以及对隐式转换的限制可以实现更健壮的代码和更少的错误。但这些变化也意味着，任何在Python 2中处理Unicode的代码都需要在Python
    3中进行重写，因为存在向后不兼容性。
- en: Here, you should focus on the encoding and decoding format used to convert `string`
    to `bytes` and vice versa. Choosing a different formatting for encoding and decoding
    can result in the loss of important information, and can result in corrupt data.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你应该关注用于将`string`转换为`bytes`和反之的编码和解码格式。选择不同的格式进行编码和解码可能会导致重要信息的丢失，并可能导致数据损坏。
- en: Support for type hinting
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型提示的支持
- en: 'Python is a dynamically typed language, and hence the type of a variable is
    evaluated at runtime by the interpreter once a value has been assigned to the
    variable, as shown in the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种动态类型语言，因此变量的类型在赋值后由解释器在运行时评估，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Though dynamic interpretation of the type of a variable can be handy while
    writing small programs where the code base can be easily tracked, the feature
    of the language can also become a big problem when working with very large code
    bases, which spawn a lot of modules, and where keeping track of the type of a
    particular variable can become a challenge and silly mistakes related to the use
    of incompatible types can happen easily. Look at the following code: ...'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管动态解释变量类型的功能在编写小型程序时可能很方便，因为代码库可以很容易地被跟踪，但当处理非常庞大的代码库时，这种语言特性也可能成为一个大问题，因为会产生大量模块，跟踪特定变量类型可能会成为一个挑战，与不兼容类型相关的愚蠢错误也很容易发生。看看以下代码：...
- en: Where Python shines
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python的亮点
- en: Every language has been developed to solve a certain type of problem that developers
    face while trying to build software for a specific domain. Python, being a dynamically
    typed, interpreted language, also has a set of use cases where it excels.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 每种语言都是为了解决开发人员在构建特定领域软件时遇到的某种类型的问题而开发的。Python作为一种动态类型、解释型语言，也有一系列擅长的用例。
- en: These use cases involve the automation of repetitive and boring tasks, quick
    prototyping of applications, and small applications focusing on accomplishing
    a specific goal, such as the installation of software, the setting up of a development
    environment, performing cleanup, and so on.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些用例涉及自动化重复和乏味的任务，快速原型设计应用程序，以及专注于实现特定目标的小型应用程序，比如安装软件、设置开发环境、执行清理等。
- en: But is that all? Is Python good only for doing small tasks? The answer to this
    is no. Python as a language is much more powerful and can easily accomplish a
    large amount of increasingly complex tasks, such as running a website that scales
    to cope with millions of users using it in a very short span of time, processing
    large sets of incoming files, or training a machine learning model for an image-recognition
    system.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 但这就是全部吗？Python只适用于执行小任务吗？答案是否定的。作为一种语言，Python更加强大，可以轻松完成大量越来越复杂的任务，比如运行一个网站，能够在很短的时间内扩展以满足数百万用户的需求，处理大量的传入文件，或者为图像识别系统训练机器学习模型。
- en: We are talking about achieving increasingly complex tasks using Python, but
    isn't Python slow compared to our traditional compile-time languages, such as
    C++, Java, and .NET? Well, that completely depends upon the context in which a
    person wants to use Python. If your aim is to run a Python program on an embedded
    device with only a limited amount of processing power, then yes, Python might
    be inadequate because of the sheer extra load that its interpreter will have on
    the processing environment. But if you are planning to use Python to run a web
    application on decently configured modern hardware, you might never experience
    any slowdowns while using Python. Rather, you might well feel a bit more productive
    while using it because of the sheer simplicity of its syntax and the ease of performing
    operations without writing hundreds of lines to achieve simple tasks.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在讨论使用Python执行越来越复杂的任务，但与我们传统的编译时语言（如C++、Java和.NET）相比，Python是否慢？嗯，这完全取决于一个人想要使用Python的上下文。如果你的目标是在处理能力有限的嵌入式设备上运行Python程序，那么是的，Python可能不够，因为其解释器对处理环境的额外负载。但如果你计划在配置良好的现代硬件上运行Web应用程序，你可能永远不会在使用Python时遇到任何减速。相反，你可能会觉得在使用Python时更加高效，因为其语法非常简单，执行操作时无需编写数百行代码。
- en: So, let's see how Python fares in the enterprise environment.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看Python在企业环境中的表现。
- en: The requirements of enterprise IT
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 企业IT的需求
- en: 'Enterprise IT is complex, and an application that needs to be built for the
    enterprise will differ a lot from one that is built for a regular consumer. There
    are several factors that need to be kept in mind before developing an application
    for enterprise users. Let''s take a look at what makes enterprise IT applications
    different from regular consumer offerings, as shown in the following list:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 企业IT是复杂的，为企业构建的应用程序与为普通消费者构建的应用程序有很大的不同。在为企业用户开发应用程序之前，需要考虑几个因素。让我们看看企业IT应用程序与普通消费者产品有何不同，如下列表所示：
- en: '**Business oriented**: Unlike an application that is built to solve the problems
    of individual users, an enterprise application is built to meet the specific needs
    of an organization. This requires the application to conform to the business practices
    of the organization, their rules, and the workflow they use.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向业务**：与为解决个人用户问题而构建的应用程序不同，企业应用程序是为满足组织的特定需求而构建的。这要求应用程序符合组织的业务实践、规则和工作流程。'
- en: '**Robustness ...**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健壮性...**'
- en: Python in the enterprise ecosystem
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python在企业生态系统中
- en: 'Python has been present in the enterprise ecosystem in quite a few forms; be
    it the automation of boring and repetitive tasks, being used as a glue between
    two layers of a product, or being used for building quick and easy-to-use clients
    for big server backends, the language has seen an increasing amount of adoption
    for various use cases. But what makes Python ready for the development of large
    enterprise applications? Let''s take a look:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Python以多种形式存在于企业生态系统中；无论是自动化乏味和重复的任务，作为产品两层之间的粘合剂，还是用于构建快速易用的大型服务器后端客户端，该语言在各种用例中都看到了越来越多的采用。但是是什么让Python准备好开发大型企业应用程序呢？让我们来看一下：
- en: '**Ability to build quick prototypes**: The syntax of Python is very simple,
    and a lot of things can be achieved with very few lines of code. This allows developers
    to quickly develop and iterate over the prototypes of an application. In addition
    to this, these prototypes do not always need to be thrown away, and if the development
    is properly planned, they can act as a good base to build the final application
    upon.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**能够快速构建原型**：Python的语法非常简单，很多事情可以用很少的代码实现。这使开发人员能够快速开发和迭代应用程序的原型。除此之外，这些原型并不总是需要被丢弃，如果开发得当，它们可以作为构建最终应用程序的良好基础。'
- en: With the ability to quickly prototype an application, an enterprise software
    developer can see exactly how the requirements align in the application and how
    the application is performing. With this information, the stakeholders of the
    application can more accurately define the path for the application development,
    thereby avoiding midcycle architectural changes because something didn't work
    out the way it was expected to.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过快速原型化应用程序的能力，企业软件开发人员可以准确地看到需求如何在应用程序中对齐以及应用程序的性能如何。有了这些信息，应用程序的利益相关者可以更准确地定义应用程序开发的路径，从而避免因为某些事情没有按预期的方式进行而导致中期架构更改。
- en: '**A mature ecosystem**: The mature ecosystem is one of the features of Python
    that deserve a lot of attention. The number of external libraries in Python has
    been growing at a rapid pace. For most of the tasks that need to be achieved in
    an application, such as two-factor authentication, testing code, running production
    web servers, integrating with message buses, and so on, you can easily look for
    a library with quite decent support.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成熟的生态系统**：成熟的生态系统是Python值得关注的特性之一。Python的外部库数量正在迅速增长。对于大多数需要在应用程序中实现的任务，例如双因素身份验证、测试代码、运行生产Web服务器、与消息总线集成等，您可以轻松地寻找到一个具有相当不错支持的库。'
- en: This proves to be of great help, since it reduces the amount of code duplication
    and increases the reusability of the components. With the help of tools such as `pip`,
    it is very easy to get the required library added to your project, and with the
    support of tools such as `virtualenv`, you can easily segregate a lot of different
    projects on the same system without creating a dependency mess.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这证明了它非常有帮助，因为它减少了代码重复量，并增加了组件的可重用性。借助诸如`pip`之类的工具，很容易将所需的库添加到项目中，并借助诸如`virtualenv`之类的工具，您可以轻松地在同一系统上对许多不同的项目进行分隔，而不会创建依赖混乱。
- en: 'For example, if someone wants to build a simple web application, they can probably
    just use Flask, which is a microframework for developing web applications, and
    go ahead with the development of the web application without having to worry about
    the underlying complexities of dealing with the sockets, manipulating data on
    them. All they will require is a few lines of code to get a simple application
    up and running, as shown in the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果有人想要构建一个简单的Web应用程序，他们可能只需使用Flask，这是一个用于开发Web应用程序的微框架，并且可以继续开发Web应用程序，而无需担心处理套接字、操纵数据等底层复杂性。他们只需要几行代码就可以让一个简单的应用程序运行起来，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, as soon as someone calls the preceding script, they will have a `flask` HTTP
    application up and running. All that remains to be done here is to fire up a browser
    and navigate to `http://localhost:5000`. Then we will see Flask serving a web
    application without any sweat. All of this is made possible in under 10 lines
    of code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦有人调用前面的脚本，他们将拥有一个`flask` HTTP应用程序正在运行。这里剩下要做的就是启动浏览器并导航到`http://localhost:5000`。然后我们将看到Flask在不费吹灰之力地提供Web应用程序。所有这些都可以在不到10行代码的情况下实现。
- en: With a lot of external libraries providing support for a lot of tasks, an enterprise
    developer can easily enable support for new features in the application without
    having to write everything from scratch, thereby reducing the chance of possible
    bugs and non-standardized interfaces creeping into the application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多外部库为许多任务提供支持，企业开发人员可以轻松地在应用程序中启用对新功能的支持，而无需从头开始编写所有内容，从而减少可能出现的错误和非标准化接口进入应用程序的机会。
- en: '**Community Support:** The Python language is not owned by any particular corporate
    entity, and is completely supported by a huge community backing that decides the
    future of the standard. This ensures that the language will continue to see support
    for quite a long time, and won''t become obsolete any time soon. This is of great
    importance to organizations, since they want long-term support for the applications
    they run.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区支持**：Python语言不归任何特定的公司实体所有，完全由庞大的社区支持，决定标准的未来。这确保了语言将继续得到长时间的支持，并且不会很快过时。这对组织来说非常重要，因为他们希望他们运行的应用程序能够得到长期的支持。'
- en: Given all of the preceding benefits of Python, developer productivity will get
    a boost when using the language while also reducing the total cost of ownership
    for the software if decisions are made in a well-planned way. These decisions
    involve how the application architecture will be laid out and which external libraries
    to use or to develop in-house. So yes, Python is indeed now ready to be used in
    the mainstream world of enterprise application development.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到Python的所有优势，如果能够以经过精心规划的方式做出决策，那么使用该语言时开发人员的生产力将得到提升，同时还能够降低软件的总拥有成本。这些决策涉及应用程序架构的布局以及使用外部库或自行开发的决定。因此，是的，Python现在确实已经准备好在企业应用程序开发的主流世界中使用。
- en: Introducing BugZot – a RESTful bug tracker
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍BugZot - 一个RESTful错误跟踪器
- en: As we progress through the chapters in this book, we will need some way to implement
    what we have learned.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们在本书的章节中的进展，我们需要一种方法来实现我们所学到的知识。
- en: Imagine that you work for an organization known as **Omega Corporation**, which
    is a market leader for selling software products to companies and individuals.
    Omega Corporation needs a system through which it can track the bugs in its products.
    After a lot of brainstorming, they initiate a project codenamed BugZot, which
    will be their tool to track the bugs in their products.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你在一家名为**Omega Corporation**的组织工作，这是一家向公司和个人销售软件产品的市场领导者。Omega Corporation需要一个系统，通过该系统可以跟踪其产品中的错误。经过大量的头脑风暴，他们启动了一个名为BugZot的项目，这将是他们跟踪产品中错误的工具。
- en: 'Let''s take a look at what Omega Corporation wants to achieve with project
    BugZot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Omega Corporation希望通过BugZot项目实现什么：
- en: '**Ability for users to report bugs in products**: The users, be they internal
    or external, should be able to file bugs against a particular product ...'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户能够报告产品中的错误**：用户，无论是内部还是外部用户，都应该能够针对特定产品报告错误...'
- en: Gathering requirements before development
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在开发之前收集需求
- en: Gathering the software requirements before starting the development of an enterprise
    application can be a tedious task, and a failure to do so adequately can have
    severe consequences, such as increased costs due to delays that are caused by
    identifying requirements later in the development cycle of the application. Applications
    that lack the important features to improve the business process workflow will
    lead users to stop using the application in the worst case.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始开发企业应用程序之前收集软件需求可能是一项繁琐的任务，如果未能充分做到这一点，可能会导致严重后果，例如由于在应用程序开发周期后期识别需求而导致的延迟增加的成本。缺乏重要功能以改进业务流程工作流的应用程序将导致用户在最坏的情况下停止使用应用程序。
- en: The requirement-gathering process is complex and tedious, and can take months
    to complete in an organization. Covering all the steps involved in the process
    is beyond the scope of this book. This section tries to give a brief description
    about some of the important steps in the process of gathering software requirements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 需求收集过程复杂而繁琐，在组织中可能需要数月才能完成。本书的范围超出了涉及该过程的所有步骤。本节试图简要描述需求收集软件需求过程中的一些重要步骤。
- en: Asking for the user requirements
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 询问用户需求
- en: 'For an application inside an organization, there might be various users who
    are stakeholders, and can define the requirements of the application. These users
    can be broadly split into two categories:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于组织内部的应用程序，可能会有各种利益相关者和用户，可以定义应用程序的需求。这些用户可以大致分为两类：
- en: '**The workforce**: These are the users who usually use the application to achieve
    a certain set of tasks. They are not concerned with all the features provided
    by the application, but rather what they focus upon is how well the application
    fits into their individual workflows. These users can provide requirements specific
    to what they work on, but may not be able to provide ideas about what they might
    require in the future, or what the other teams may require.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**劳动力**：这些是通常使用应用程序来完成一定任务的用户。他们不关心应用程序提供的所有功能，而是关注应用程序如何适应他们的个人工作流程。这些用户可以提供特定于他们工作的需求，但可能无法提供关于他们将来可能需要什么或其他团队可能需要什么的想法。'
- en: '**The management**: The management consists of people ...'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理层**：管理层由人员组成...'
- en: Categorizing the requirements
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需求分类
- en: 'Once the users have been surveyed for what they would like to have in the application,
    the next step is to categorize these requirements. Broadly, the requirements can
    be categorized into two parts:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户被调查了他们希望在应用程序中拥有什么，下一步就是对这些需求进行分类。广义上说，需求可以分为两部分：
- en: '**Functional requirements**: These are the requirements that define the features
    and functionality of the application. For example, BugZot has the following functional
    requirements:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能需求**：这些是定义应用程序功能和功能的需求。例如，BugZot具有以下功能需求：'
- en: Providing functionality for filing bugs by internal and external users
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为内部和外部用户提供提交错误的功能
- en: Providing support for roles and permissions
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供角色和权限支持
- en: Providing functionality for dealing with file uploads
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供处理文件上传的功能
- en: Integrating with the email system to send emails when a bug changes its status,
    and much more
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与电子邮件系统集成，以便在错误更改状态时发送电子邮件，等等
- en: '**Nonfunctional requirements**: These are those sets of requirements that do
    not affect the functionality of the software, but rather are implicit or explicit
    characteristics based on the functional requirements. For example, in BugZot,
    the following may be defined as some of the nonfunctional requirements:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非功能需求**：这些是不影响软件功能的一组要求，而是基于功能需求的隐式或显式特征。例如，在BugZot中，以下可能被定义为一些非功能需求：'
- en: The application should provide security against common web attack vectors, such
    as XSS and CSRF
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序应提供针对常见Web攻击向量（如XSS和CSRF）的安全性
- en: The operational costs for the application should not exceed *N*% of the total
    budget
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的运营成本不应超过总预算的*N*%
- en: The application should be able to generate backups in case a recovery is needed
    after a crash
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序应能够在崩溃后需要恢复时生成备份
- en: Prioritizing the requirements
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优先考虑需求
- en: 'Once the requirements are identified and categorized into functional and nonfunctional
    requirements, they then need to be prioritized according to their importance in
    the application. If this prioritization is not performed, it will lead to increased
    costs of development, delayed deadlines, and reduced productivity in the organization.
    Broadly, we can classify the requirements under the following categories:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定并将需求分类为功能和非功能需求，就需要根据其在应用程序中的重要性对其进行优先考虑。如果不进行这种优先考虑，将导致开发成本增加、截止日期延迟，并降低组织的生产力。广义上，我们可以将需求分类为以下类别：
- en: '**Must have**: These are those requirements that are critical to the success
    of the application and that must be present in the application when it ships.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**必须有**：这些是对应用程序成功至关重要的要求，在应用程序发货时必须存在。'
- en: '**Should have**: These are those requirements that will enhance the functionality
    of the application but that need some further discussion about whether they ...'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应该有**：这些是那些将增强应用程序功能的要求，但需要进一步讨论是否...'
- en: Generating the software requirement specification document
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成软件需求规格说明文档
- en: Once the requirements have been identified, grouped, and prioritized, a document
    known as the software requirement specification is generated. This document describes
    the intended purpose, requirements, and nature of the software that needs to be
    developed.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定、分组和优先考虑了需求，就会生成一份名为软件需求规格说明的文档。该文档描述了需要开发的软件的预期目的、需求和性质。
- en: 'The **software requirement specification** (**SRS**) will describe the following
    information:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件需求规格说明**（**SRS**）将描述以下信息：'
- en: The intended purpose of the applications
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的预期目的
- en: The conventions that are used in the document that are specific to the business
    process of the organization
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档中使用的约定是特定于组织业务流程的
- en: The features of the application
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的特性
- en: The user classes who will be using the application
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将使用应用程序的用户类
- en: The environment in which the application will operate
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序将运行的环境
- en: The functional and nonfunctional requirements of the application
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的功能和非功能需求
- en: Once the SRS has been generated, it is sent for review and further negotiations.
    Once they are successfully completed, the application moves into the design phase,
    where an application mock-up is devised.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦SRS生成，就会进行审查和进一步的谈判。一旦成功完成，应用程序就会进入设计阶段，其中会设计应用程序的模拟。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we briefly covered the changing programming landscape and explored
    how the Python ecosystem has changed over the years. We looked at how Python,
    given the fact that it allows quick prototyping, and has a vast array of well-supported
    libraries and an open community, is quickly rising to become the main choice for
    the development of large-scale applications in enterprises that require long-term
    support and easy integration with existing systems.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了不断变化的编程环境，并探讨了多年来Python生态系统的变化。我们看到Python允许快速原型设计，并且拥有大量得到良好支持的库和一个开放的社区，因此迅速成为需要长期支持和与现有系统轻松集成的企业大型应用程序开发的主要选择。
- en: We then went on to introduce the demo application, BugZot, that we will be building
    throughout the course of this book, and defined the functionalities that will
    be required from the application.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们介绍了演示应用程序BugZot，这是我们将在本书的过程中构建的，并定义了应用程序所需的功能。
- en: The last section of the chapter covered the requirement-gathering process for
    ...
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一节涵盖了...
- en: Questions
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Is it possible to perform operations such as concatenation on a `str` type and
    a `byte` type in Python 3?
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Python 3中是否可以对`str`类型和`byte`类型执行连接等操作？
- en: Is the type hinting support introduced in Python 3 enforcing or not?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 3 中引入的类型提示支持是否是强制性的？
- en: Beyond functional and nonfunctional requirements, are there any other kinds
    of requirements that also might need to be documented into the software requirement
    specification?
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了功能和非功能需求之外，还有其他类型的需求可能需要记录到软件需求规格说明中吗？
- en: What are the major categories in which the prioritization of requirements can
    be done?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需求优先级可以在哪些主要类别中进行？
- en: What are the next steps to take once the software requirement specification
    document has been generated?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦生成了软件需求规格说明文档，接下来应该采取哪些步骤？
- en: Further reading
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you would like to go through the basics of Python programming once again
    before diving into the world of enterprise application development, Packt has
    a very good book that you can be refer to. You can get it at the following link:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在进入企业应用程序开发世界之前再次学习Python编程的基础知识，Packt有一本非常好的书可以供您参考。您可以在以下链接获取：
- en: '[https://www.packtpub.com/application-development/learn-python-programming-second-edition](https://www.packtpub.com/application-development/learn-python-programming-second-edition)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/learn-python-programming-second-edition](https://www.packtpub.com/application-development/learn-python-programming-second-edition)'
