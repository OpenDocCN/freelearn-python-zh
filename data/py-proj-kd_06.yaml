- en: Chapter 6. Working with Data – Lists and Dictionaries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章. 处理数据 – 列表和字典
- en: In the previous chapter, you learned how to write loops using detailed logic
    in order to help you help your program to make decisions. So far, though, you
    have not yet learned what to do with data. We have not created nor stored data.
    Yet, we know that video games store data! Video games sometimes store the names
    of players as well as the highest score that a player has achieved. How does one
    computer program remember all of this information? In this chapter, you will learn
    about some ways that Python can store and retrieve data, such as lists and dictionaries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何使用详细的逻辑编写循环，以帮助你的程序做出决策。到目前为止，你还没有学习如何处理数据。我们还没有创建或存储数据。然而，我们知道视频游戏会存储数据！视频游戏有时会存储玩家的名字以及玩家所达到的最高分数。一个计算机程序是如何记住所有这些信息的呢？在本章中，你将了解一些Python存储和检索数据的方法，例如列表和字典。
- en: For the exercises and code in this chapter, your Python shell will be the best
    tool to use so that you can type your lists and dictionaries and then check the
    outcome of your coding. Otherwise, once your prompt is available, you can type
    lists and dictionaries, your shell will remember the information that you enter,
    and then you can test how to retrieve, add, and remove information.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的练习和代码，你的Python shell将是最好的工具，这样你可以输入你的列表和字典，然后检查你的编码结果。否则，一旦你的提示符可用，你可以输入列表和字典，你的shell将记住你输入的信息，然后你可以测试如何检索、添加和删除信息。
- en: Note
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you shut down your Python shell at any time during this chapter, all of your
    work will be lost. The Python shell does not remember information between sessions,
    so lists and dictionaries will not be saved.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在本章的任何时间关闭Python shell，你所有的工作都将丢失。Python shell不会在会话之间记住信息，因此列表和字典不会被保存。
- en: Lists
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表
- en: Lists have many different uses when coding, and many different operations can
    be performed on lists, thanks to Python. In this chapter, you will only learn
    about some of the many uses of lists.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 列表在编码中有许多不同的用途，并且可以对列表执行许多不同的操作，这得益于Python。在本章中，你将只了解列表的许多用途中的一些。
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you wish to learn more about lists, the Python documentation is very detailed
    and can be found at [https://docs.python.org/3/tutorial/datastructures.html?highlight=lists#more-on-lists](https://docs.python.org/3/tutorial/datastructures.html?highlight=lists#more-on-lists).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要了解更多关于列表的信息，Python 文档非常详细，可以在[https://docs.python.org/3/tutorial/datastructures.html?highlight=lists#more-on-lists](https://docs.python.org/3/tutorial/datastructures.html?highlight=lists#more-on-lists)找到。
- en: 'First, some facts about Python lists: Python lists are *mutable*. This means
    that the data in a list can be changed around. Items can be added or removed using
    functions that act directly on the list. Also, the items in a list can be mixed
    together. Numbers, floats, and strings can all go together in the same list.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，一些关于Python列表的事实：Python列表是可变的。这意味着列表中的数据可以被更改。可以使用直接作用于列表的函数添加或删除项目。此外，列表中的项目可以混合在一起。数字、浮点数和字符串都可以在同一个列表中。
- en: Parts of a list
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表的组成部分
- en: 'Lists, like other kinds of data, are assigned to a variable. Then, the list
    items are placed in `[ ]`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 列表，像其他类型的数据一样，被分配给一个变量。然后，列表项被放置在`[ ]`中：
- en: '![Parts of a list](img/B04681_06_11.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![列表的组成部分](img/B04681_06_11.jpg)'
- en: 'In your Python shell, type the following three lists, one on each line:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Python shell中，输入以下三个列表，每个列表一行：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Parts of a list](img/B04681_06_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![列表的组成部分](img/B04681_06_01.jpg)'
- en: 'Each of the lists you have typed has a particular kind of data inside it. The
    `fruit` list contains strings, the `years` list contains integers, and the `students_in_class`
    list also contains integers. However, one feature of lists is that they can mix
    up datatypes within the same list. For example, I have made this list that combines
    strings and integers:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你输入的每个列表内部都包含特定类型的数据。`fruit` 列表包含字符串，`years` 列表包含整数，而 `students_in_class` 列表也包含整数。然而，列表的一个特点是它们可以在同一个列表中混合不同的数据类型。例如，我创建了一个包含字符串和整数的列表：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Working with a list
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用列表
- en: Now that we have made the lists, we can work with the contents of the list in
    many ways. In fact, once you create a list, the computer remembers the order of
    the list, and the order stays constant until it is changed purposefully. The easiest
    way for us to check whether the order of lists is maintained is to run tests on
    the `fruit`, `years`, `students_in_class`, and `computer_class` lists that we
    have already made.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了列表，我们可以以多种方式处理列表的内容。实际上，一旦你创建了一个列表，计算机就会记住列表的顺序，并且顺序会保持不变，直到有意地更改。我们检查列表顺序是否保持不变的最简单方法是运行我们已创建的`fruit`、`years`、`students_in_class`和`computer_class`列表的测试。
- en: 'The first item of a Python list is always counted as **0** (**zero**). So,
    for our first test, let''s check whether asking for item `0` actually gives us
    the first item we entered in the list. Using our `fruit` list, we will type the
    name of the list inside a `print` statement, and then add square brackets `[]`
    with the number `0`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Python列表的第一个项目始终被计为**0**（**零**）。因此，对于我们的第一个测试，让我们检查请求项目`0`是否确实给出了我们列表中输入的第一个项目。使用我们的`fruit`列表，我们将在`print`语句中输入列表名称，然后添加方括号`[]`和数字`0`：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Your output should be `apple` since apple is the first fruit in the list we
    created earlier:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你的输出应该是`apple`，因为苹果是我们之前创建的列表中的第一种水果：
- en: '![Working with a list](img/B04681_06_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![处理列表](img/B04681_06_02.jpg)'
- en: 'Now, we have evidence that counting in Python does start with `0` and also
    that our list is written correctly. Next, we can try to print the fourth item
    in the `fruit` list. You will notice that we are entering `3` in our `print` command.
    This is because the first item started at `0`. Type this code into your Python
    shell:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有证据表明Python中的计数确实从`0`开始，而且我们的列表编写正确。接下来，我们可以尝试打印`fruit`列表中的第四个项目。你会注意到我们在`print`命令中输入的是`3`。这是因为第一个项目从`0`开始。将此代码输入到你的Python壳中：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'What is your outcome? Did you expect `dragonfruit` to be the answer? If so,
    good, you are learning to count items in lists. If not, remember that the first
    item in a list is item `0`. With practice, you will become better at counting
    items in short Python lists:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你的结果是什么？你是否预期答案是`dragonfruit`？如果是这样，很好，你正在学习如何计算列表中的项目。如果不是，请记住列表中的第一个项目是项目`0`。通过练习，你将更好地学会在短Python列表中计数项目：
- en: '![Working with a list](img/B04681_06_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![处理列表](img/B04681_06_03.jpg)'
- en: 'For extra practice, work with the other lists that we made earlier, and try
    printing different items from these lists using this code sample:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了额外练习，使用我们之前创建的其他列表，并尝试使用此代码样本从这些列表中打印不同的项目：
- en: '![Working with a list](img/B04681_06_12.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![处理列表](img/B04681_06_12.jpg)'
- en: Where the code says `list_name`, write the name of the list you want to use.
    Where the code says `item_number`, write the number of the item you want to print.
    Remember that lists begin counting at `0`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中提到`list_name`的地方，写下你想要使用的列表名称。在代码中提到`item_number`的地方，写下你想要打印的项目编号。记住，列表从`0`开始计数。
- en: Changing the list – adding and removing information
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改列表 – 添加和删除信息
- en: Even though lists keep their order, they can be changed. Items can be added
    to a list, removed from them, or changed in them. Again, there are many ways to
    interact with lists. We will only discuss a few here, but you can always read
    the Python documentation for more information.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 即使列表保持其顺序，它们也可以被更改。可以向列表中添加项目，从列表中删除它们，或者更改它们。再次强调，与列表交互的方式有很多。我们在这里只会讨论其中的一些，但你总是可以阅读Python文档以获取更多信息。
- en: Adding items to the list
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向列表中添加项目
- en: 'To add an item to our `fruit` list, for example, we can use a method called
    `list.append()`. To use this method, type the name of the list, a dot, the method
    name `append`, and then parentheses with the item you would like to add inside.
    If the item is a string, remember to use single quotes. Type the following code
    to add `orange` to the list of fruits we have made:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要向我们的`fruit`列表中添加一个项目，我们可以使用一个名为`list.append()`的方法。要使用此方法，请输入列表名称，一个点，方法名称`append`，然后输入括号，并在其中放入你想要添加的项目。如果项目是字符串，请记住使用单引号。输入以下代码将`orange`添加到我们已创建的水果列表中：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, print the list of fruit to check whether `orange` has been added to the
    list:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打印水果列表以检查`orange`是否已添加到列表中：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Adding items to the list](img/B04681_06_04.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![向列表中添加项目](img/B04681_06_04.jpg)'
- en: Removing items from the list
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从列表中删除项目
- en: 'Now, let''s say that we no longer want `dragonfruit` to appear on our list.
    We will use a method called `list.remove()`. To do this, we will type the name
    of our list, a dot, the `remove` method name , and the name of the item that we
    wish to remove:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们不再希望`dragonfruit`出现在我们的列表中。我们将使用一个名为`list.remove()`的方法。为此，我们将输入我们列表的名称，一个点，`remove`方法名称，以及我们希望移除的项的名称：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, print the list, confirm that `dragonfruit` has been removed:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打印列表，确认`dragonfruit`已被移除：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Removing items from the list](img/B04681_06_05.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![从列表中移除项](img/B04681_06_05.jpg)'
- en: If you have more than one of the same item in the list, `list.remove()` will
    only remove the first instance of that item. The other items with the same name
    need to be removed separately.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你列表中有多个相同的项，`list.remove()`只会移除该项的第一个实例。具有相同名称的其他项需要单独移除。
- en: Lists and loops
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表和循环
- en: Lists and `for` loops work very well together. With lists, we can do something
    called an **iteration**. By itself, the word *iteration* means repeating a process.
    We know that `for` loops repeat things for a limited and specific number of times.
    So, we can use `for` loops to iterate over lists of items.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 列表和`for`循环配合得非常好。使用列表，我们可以做一种叫做**迭代**的事情。单独来说，这个词的意思是重复一个过程。我们知道`for`循环会有限制和特定次数地重复。因此，我们可以使用`for`循环来遍历项目列表。
- en: 'In this sample, we have three colors in our list. Make this list in your Python
    shell:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们的列表中有三种颜色。在你的Python壳中创建这个列表：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Using our list, we may decide that for each color in the list, we want to print
    the statement `I see` and add each color in our list. By using the `for` loop
    with the colors list, we can type the `print` statement once and three sentences
    will be returned. Type the following `for` loop in your Python shell:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的列表，我们可能会决定对于列表中的每种颜色，我们想要打印出`I see`这个语句并添加我们列表中的每种颜色。通过使用颜色列表的`for`循环，我们只需输入一次`print`语句，就会返回三个句子。在你的Python壳中输入以下`for`循环：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You will notice that, in the second line of code, we add the strings together
    using the plus sign operator (`+`). The first string, `I see`, starts each sentence.
    The second string, `color`, comes from the variable that we made when we wrote
    the `for` loop. The third string is a period (`.`) to end the sentence. Once you
    are done typing the print line and you press *Enter* twice, your `for` loop will
    start running, and you should see the following statements printed in your Python
    shell:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，在代码的第二行，我们使用加号运算符（`+`）将字符串相加。第一个字符串`I see`是每个句子的开头。第二个字符串`color`来自我们编写`for`循环时创建的变量。第三个字符串是一个句号（`.`）来结束句子。一旦你输入完打印行并按下两次*Enter*键，你的`for`循环就会开始运行，你应该会在你的Python壳中看到以下语句被打印出来：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Notice that the sentences print the colors in the order that they appear in
    the list. Order is preserved in lists:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，打印的句子按照它们在列表中出现的顺序打印颜色。顺序在列表中得到了保留：
- en: '![Lists and loops](img/B04681_06_06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![列表和循环](img/B04681_06_06.jpg)'
- en: As you can imagine, lists and `for` loops are very powerful when used together.
    Instead of having to type the line three times with three different pieces of
    code, we only had to type two lines of code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所想，列表和`for`循环结合使用时非常强大。我们不需要输入三行代码，每行代码都不同，我们只需输入两行代码。
- en: Our `for` loop, with only those two lines of code, would work if there were
    twenty colors or even two hundred colors in the list. We will explore the power
    of using lists more in the next chapter and mini-game.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`for`循环，仅用这两行代码，如果列表中有二十种颜色甚至两百种颜色也能正常工作。我们将在下一章和迷你游戏中进一步探索使用列表的强大功能。
- en: Dictionaries
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典
- en: '**Dictionaries** are a different way to organize data. At first glance, a dictionary
    may look just like a list. However, dictionaries have different jobs, rules, and
    different syntax than lists.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**字典**是组织数据的一种不同方式。乍一看，字典可能看起来就像一个列表。然而，字典与列表有不同的任务、规则和语法。'
- en: 'Parts of a dictionary like lists, dictionaries have different parts that need
    to be used to make them work—names, use curly braces to store information. For
    example, if we wanted to make a dictionary called `numbers`, we would put the
    dictionary entries inside curly braces. Here is a simple example to type into
    your Python shell:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 字典的组成部分，就像列表一样，字典也有不同的组成部分需要使用来使它们工作——名称，使用花括号来存储信息。例如，如果我们想创建一个名为`numbers`的字典，我们将把字典条目放在花括号内。以下是一个简单的示例，你可以将其输入到你的Python壳中：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Dictionaries](img/B04681_06_13.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![字典](img/B04681_06_13.jpg)'
- en: Key/value pairs in dictionaries
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典中的键/值对
- en: As you can see in the previous screenshot, the dictionary stores information
    with things called **keys** and **values**. In a dictionary of items, for example,
    we might have keys that tell us the names of each item and values that tell us
    how many of each item we have in our inventory. Once we store these items in our
    dictionary, we can add or remove new items (keys), add new amounts (values), or
    change the amounts of existing items. If you have ever used a contact list in
    your e-mail or a smartphone, you might recognize that it matches a key (the person's
    name) with a value (their e-mail ID or phone number). Keys and values do not always
    have to be in the form of strings and integers, but for our next example, we will
    use a dictionary to store all the items that a video game hero might have on a
    quest.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，字典使用称为**键**和**值**的事物来存储信息。例如，在一个物品字典中，我们可能有键告诉我们每个物品的名称，以及值告诉我们我们在库存中有多少个这样的物品。一旦我们将这些物品存储到我们的字典中，我们就可以添加或删除新物品（键），添加新的数量（值），或者更改现有物品的数量。如果您曾经使用过电子邮件或智能手机中的联系人列表，您可能会发现它与键（人的名字）与值（他们的电子邮件ID或电话号码）相匹配。键和值不一定要是字符串和整数的格式，但为了我们下一个示例，我们将使用字典来存储一个游戏英雄在任务中可能拥有的所有物品。
- en: 'The following is an example of a dictionary that can hold some information
    for a game. Let''s suppose that the hero in our game has some items that are needed
    to survive. Here is a dictionary of our hero''s items; type this dictionary of
    items into your Python shell:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个可以存储游戏信息的字典示例。假设我们游戏中的英雄有一些生存所需的物品。以下是我们的英雄物品的字典；将此物品字典输入到您的Python壳中：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now we have a dictionary that gives us information about the items that our
    hero has. Unlike a list, a dictionary does not keep items in the order that they
    were entered. You can see this by printing out a small dictionary a few times
    and noticing the results. To print a dictionary, we type `print`, and then we
    place the name of the dictionary in the print statement:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个提供关于我们的英雄拥有的物品信息的字典。与列表不同，字典不会按它们被输入的顺序保留项目。您可以通过多次打印一个小字典并注意结果来看到这一点。要打印字典，我们输入`print`，然后在打印语句中放置字典的名称：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You will notice that the output of the code results in the dictionary being
    printed in a different order from how you entered it. There is a possibility that
    it might print the same order, but it is more likely to print differently than
    how you entered it. Take a look at this screenshot for an example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到代码的输出结果与您输入的顺序不同。它可能会以相同的顺序打印，但更有可能以不同的顺序打印。请看下面的截图作为示例：
- en: '![Key/value pairs in dictionaries](img/B04681_06_14.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![字典中的键/值对](img/B04681_06_14.jpg)'
- en: 'So, our dictionary has keys such as `arrows`, `rocks`, `food`, and `lives`.
    Each of the numbers that is stored as a value tells us the number of items that
    our hero has. To find out the value of a key, we use a `print` statement that
    contains the `items` dictionary name with the `arrows` key . Notice that the `arrows`
    key is placed in square brackets. The syntax is important. Type the following
    code in your Python shell to return the value of `arrows`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的字典有诸如`arrows`、`rocks`、`food`和`lives`这样的键。存储为值的每个数字都告诉我们我们的英雄有多少个物品。要找出键的值，我们使用一个包含`items`字典名称和`arrows`键的`print`语句。注意，`arrows`键放在方括号中。语法很重要。在您的Python壳中输入以下代码以返回`arrows`的值：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The result of this `print` statement should output `200` as this is the number
    of arrows our hero has in their inventory:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`print`语句的结果应该输出`200`，因为这代表我们的英雄在库存中有200支箭：
- en: '![Key/value pairs in dictionaries](img/B04681_06_07.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![字典中的键/值对](img/B04681_06_07.jpg)'
- en: Changing the dictionary – adding and removing information
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改字典 – 添加和删除信息
- en: Python has several ways of interacting with dictionary data. There are many
    functions that we can use. For now, we will focus on those functions that allow
    us to add and remove things from our dictionaries.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Python有几种与字典数据交互的方式。有许多我们可以使用的函数。现在，我们将专注于那些允许我们从字典中添加和删除东西的函数。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn about all the dictionary methods, visit [http://www.tutorialspoint.com/python/python_dictionary.htm](http://www.tutorialspoint.com/python/python_dictionary.htm).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解所有字典方法，请访问[http://www.tutorialspoint.com/python/python_dictionary.htm](http://www.tutorialspoint.com/python/python_dictionary.htm)。
- en: Adding items to the dictionary
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向字典中添加物品
- en: Consider a situation where, in our game, we allow the player to discover and
    collect fireballs later in the game. To add an item to the dictionary, we will
    use what is called the **subscript** method to add a new key and new value to
    our dictionary.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一种情况，在我们的游戏中，我们允许玩家在游戏后期发现和收集火球。要向字典中添加一个项目，我们将使用所谓的**下标**方法向我们的字典添加一个新的键和新的值。
- en: 'To create a subscript, we will use the name of the dictionary. Then, in square
    brackets, we write the name of the item (key) that we wish to add. The item is
    a string type, so it needs to be in single quotes. Finally, we will set the value
    to how many of the item (key) that we want to put into our dictionary. To add
    fireballs to your dictionary, copy the following code in your Python shell:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个下标，我们将使用字典的名称。然后，在方括号中，我们写下我们希望添加的项目（键）的名称。项目是字符串类型，所以它需要用单引号括起来。最后，我们将值设置为我们要放入字典中的项目（键）的数量。要将火球添加到你的字典中，请在你的
    Python 命令行中复制以下代码：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we print the entire dictionary of items, you will see that the `fireball`
    has been added. Type this code in your Python shell:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打印了整个项目字典，你会看到`fireball`已经被添加。在你的 Python 命令行中输入以下代码：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Your outcome should include the `fireball` as one of the items. Remember, however,
    that your code may not be in the same order as the code in this book because dictionaries
    do not remember orders:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你的结果应该包括`fireball`作为其中一项。然而，请记住，你的代码可能不会和这本书中的代码顺序相同，因为字典不记得顺序：
- en: '![Adding items to the dictionary](img/B04681_06_08.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![向字典中添加项目](img/B04681_06_08.jpg)'
- en: Changing the value of an existing item
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改现有项目的值
- en: We can also change the value of the keys in our dictionary. Suppose, for example,
    that our hero is collecting rocks in the game and then loses the rocks because
    they use them to build a rock wall. How would our game keep track of each rock
    added to or removed from the game inventory?
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以更改字典中键的值。例如，假设我们的英雄在游戏中收集岩石，然后因为它们用来建造岩石墙而失去了岩石。我们的游戏将如何跟踪游戏中库存中添加或删除的每一块岩石？
- en: The `dict.update()` method allows us to alter the values of keys in the dictionary.
    For our dictionary, we will be changing the value of rocks as our hero collects
    or uses the rocks. To use `dict.update()`, we replace `dict` with the name of
    our dictionary, which is `items`. Then, in `()`, we use `{}` to type the name
    of the item whose value we wish to update.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`dict.update()`方法允许我们更改字典中键的值。对于我们的字典，我们将更改岩石的值，因为我们的英雄收集或使用岩石。要使用`dict.update()`，我们将`dict`替换为我们的字典名称，即`items`。然后，在括号`()`中，我们使用`{}`来输入我们希望更新其值的项目的名称。'
- en: 'We use a colon (`:`) and then write the new number of items that we want to
    see in the dictionary. Try this in your Python shell:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用冒号（`:`）然后写下我们希望在字典中看到的新项目数量。在你的 Python 命令行中试一试：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![Changing the value of an existing item](img/B04681_06_09.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![更改现有项目的值](img/B04681_06_09.jpg)'
- en: You will notice that if you have performed the `print(items)` function, you
    will now have `10` rocks instead of `25`. We have now successfully updated our
    number of items.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，如果你执行了`print(items)`函数，你现在将有`10`块岩石而不是`25`。我们现在已经成功更新了物品的数量。
- en: Removing items from the dictionary
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从字典中删除项目
- en: To remove something from a dictionary, you must reference the key or the name
    of the item, and then delete the item. By doing so, the value that goes with the
    item will also be removed since the key and value are paired.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要从字典中删除某个东西，你必须引用键或项目的名称，然后删除该项目。这样做，与项目相关的值也会被删除，因为键和值是配对的。
- en: In Python, the `del` statement can be used to remove a key/value pair from the
    dictionary. This means using `del` along with the name of the dictionary and the
    name of the item (key) that you wish to remove.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，`del`语句可以用来从字典中删除键/值对。这意味着使用`del`加上字典的名称和你要删除的项目（键）的名称。
- en: 'Let''s use the items dictionary as our example. We will use the `del` statement,
    the name of the `items` dictionary, and the name of the `lives` key that''s placed
    inside of the square brackets. Hence, we can use a `print` statement to test and
    check whether the `lives` key was removed along with the value of `lives`, which
    is `2`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以`items`字典为例。我们将使用`del`语句，`items`字典的名称，以及放在方括号内的`lives`键的名称。因此，我们可以使用`print`语句来测试和检查`lives`键是否与`lives`的值`2`一起被删除：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If your `del` statement worked, the `lives` key is no longer in the dictionary
    and neither is the number of `lives`, which was `2`. This is similar to taking
    a word out of a printed dictionary. If you removed the word, you would need to
    remove the definition as well. The items list will now look like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的`del`语句起作用了，`lives`键不再在字典中，`lives`的数量也不再是`2`。这就像从印刷的字典中删除一个单词一样。如果你删除了单词，你还需要删除定义。项目列表现在看起来是这样的：
- en: '![Removing items from the dictionary](img/B04681_06_10.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![从字典中删除项目](img/B04681_06_10.jpg)'
- en: With dictionaries, information is stored and retrieved differently than in lists,
    but we can still perform the same operations of adding and removing information
    as well as making changes to the information.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 与列表相比，字典在存储和检索信息方面有所不同，但我们仍然可以执行添加和删除信息以及更改信息的相同操作。
- en: List or dictionary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表或字典
- en: You have learned about two great Python data structures, lists and dictionaries.
    Now, we need to know when to use these tools. While both tools store information,
    they do so in very different ways. Let's compare these two structures so that
    we can better understand how each structure can be used.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学习了两个伟大的Python数据结构，列表和字典。现在，我们需要知道何时使用这些工具。虽然这两个工具都存储信息，但它们以非常不同的方式存储。让我们比较这两个结构，以便我们更好地理解每个结构如何被使用。
- en: Lists are good to use when we want to keep track of items and need to remember
    the order of those items. We use a lot of lists in everyday life that meet these
    criteria.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要跟踪项目并需要记住这些项目的顺序时，列表是很好的选择。我们在日常生活中使用了很多符合这些标准的列表。
- en: 'Some examples of lists are as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些列表的示例：
- en: A grocery list with different food items
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含不同食品项目的购物清单
- en: A list of song titles in an MP3 player
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MP3播放器中歌曲标题的列表
- en: A list of fiction book titles that are available in a library
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图书馆中可用的小说书名列表
- en: A list of items that are available for purchase on a website
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站上可供购买的项目列表
- en: Each of these things has an order as a desirable characteristic, and items can
    be added or removed from the lists. If we wanted to write a short program in Python
    to keep track of our fiction book titles or find songs in an MP3 playlist, a list
    might be a good place to start.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事物都有一定的顺序，这是一个理想的特性，列表中的项目可以添加或删除。如果我们想用Python编写一个简短的程序来跟踪我们的小说书名或查找MP3播放列表中的歌曲，列表可能是一个好的起点。
- en: Lists can be used with loops to do a lot of powerful things. Some of these include
    making lists that create themselves using loops (yes, really) or making lists
    from lots of user input. Lists are slower to search because they're automatically
    searched from the beginning.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 列表可以与循环一起使用来完成许多强大的功能。其中一些包括使用循环创建自己（是的，真的）的列表或从大量用户输入中创建列表。由于它们会自动从开始搜索，列表的搜索速度较慢。
- en: A dictionary is more useful when data does not need order but needs to be paired
    with something else. For example, perhaps you own fiction and nonfiction books,
    and you want to write a program that stores the title, author, and the genre.
    Using a dictionary would be better for this task so that you can quickly figure
    out the author of a book based on its title or for all the fiction books that
    you own. You can also interact with your dictionary to make changes. Also, dictionaries
    can be searched very quickly because they do not need to be searched from the
    beginning.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据不需要顺序但需要与其他事物配对时，字典更有用。例如，也许你拥有小说和非小说书籍，你想编写一个程序来存储标题、作者和类型。使用字典会更好，这样你可以快速根据书名找到作者，或者找到你拥有的所有小说书籍。你还可以与你的字典交互来做出更改。此外，由于它们不需要从头开始搜索，字典可以非常快速地进行搜索。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An example of a dictionary that is used in programming is a *Thesaurus*. This
    is a dictionary of lists.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 编程中使用的字典示例是*同义词词典*。这是一个列表的字典。
- en: A quick task for you
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个快速的任务
- en: Now that you are familiar with lists and dictionaries, here is a quick task
    for you to review your knowledge.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了列表和字典，这里有一个快速的任务来检验你的知识。
- en: Q1\. What is the proper syntax to use when creating a dictionary?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 创建字典时应该使用什么正确的语法？
- en: ( )
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ( )
- en: '{ }'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '{ }'
- en: '" "'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '" "'
- en: '[ ]'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[ ]'
- en: Q2\. What kinds of data can be included in one list?
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. 一个列表中可以包含哪些类型的数据？
- en: Strings only
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有字符串
- en: Floats only
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有浮点数
- en: Integers and floats
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整数和浮点数
- en: All datatypes can be included a list
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有数据类型都可以包含在列表中
- en: Q3\. What is the proper syntax to use when creating a list?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Q3. 创建列表时应该使用什么正确的语法？
- en: ( )
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ( )
- en: '{ }'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '{ }'
- en: '" "'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '" "'
- en: '[ ]'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[ ]'
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to create your own lists and dictionaries.
    You also tried to perform some basic operations with lists and dictionaries, including
    how to add and remove data. Finally, you learned the syntax differences between
    lists and dictionaries as well as the optimal uses of lists and dictionaries.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何创建自己的列表和字典。你还尝试了对列表和字典进行一些基本操作，包括如何添加和删除数据。最后，你学习了列表和字典之间的语法差异以及列表和字典的最佳使用方法。
- en: In the next chapter, we are going to move forward and make a game called *What's
    in my backpack?* This game will be a simple, two-player game that will ask both
    users to put some objects into a backpack and then allow each user to guess what
    is in the other user's backpack.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续前进，制作一个名为 *我的背包里有什么？* 的游戏。这个游戏将是一个简单的两人游戏，要求两个用户将一些物品放入背包中，然后允许每个用户猜测另一个用户背包里的内容。
- en: We will write code to add items to a list, keep track of usernames, items, and
    scores in a list and dictionary, and then use a `for` loop to keep track of the
    game. There are a lot of moving parts in our next game, and it will be a lot of
    fun to make something that has two players! Are you ready? Let's go!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写代码向列表中添加项目，跟踪用户名、物品和分数在列表和字典中，然后使用 `for` 循环来跟踪游戏。我们下一款游戏有很多组成部分，制作一个有两名玩家的游戏将会非常有趣！你准备好了吗？让我们开始吧！
