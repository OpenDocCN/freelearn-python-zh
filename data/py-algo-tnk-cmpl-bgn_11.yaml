- en: Chapter 5
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第五章
- en: Variables and Constants
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 变量和常量
- en: 5.1 What is a Variable?
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.1 什么是变量？
- en: In computer science, a variable is a location in the computer's main memory
    (RAM) where a program can store a value and change it as the program executes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中，变量是计算机主内存（RAM）中的一个位置，程序可以在此处存储一个值，并在程序执行过程中更改它。
- en: Picture a variable as a transparent box in which you can insert and hold one
    thing at a time. Because the box is transparent, you can also see what it contains.
    Also, if you have two or more boxes you can give each box a unique name. For example,
    you could have three boxes, each containing a different number, and you could
    name the boxes numberA, numberB, and numberC.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将变量想象成一个透明的盒子，你可以一次插入并保存一个东西。因为盒子是透明的，所以你还可以看到它里面有什么。此外，如果你有两个或更多的盒子，你可以给每个盒子一个独特的名字。例如，你可以有三个盒子，每个盒子包含不同的数字，你可以将这些盒子命名为numberA、numberB和numberC。
- en: '![Image](img/chapter05-01.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter05-01.png)'
- en: The boxes named numberA, numberB and numberC in the example contain the numbers
    13, 8, and 4, respectively. Of course, you can examine or even alter the contained
    value of each one of these boxes at any time.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中名为numberA、numberB和numberC的框分别包含数字13、8和4。当然，你可以在任何时候检查或甚至更改这些框中包含的值。
- en: 'Now, let''s say that someone asks you to find the sum of the values of the
    first two boxes and then store the result in the last box. The steps you must
    follow are:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设有人要求你找出前两个框中值的总和，然后将结果存储在最后一个框中。你必须遵循以下步骤：
- en: 1)Look at the first two boxes and examine the values they contain.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 1)查看前两个框，并检查它们包含的值。
- en: 2)Use your CPU (this is your brain) to calculate the sum (the result).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 2)使用你的CPU（这是你的大脑）来计算总和（结果）。
- en: 3)Insert the result (which is the value of 21) in the last box. However, since
    each box can contain only one single value at a time, the value 4 is actually
    replaced by the number 21.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 3)将结果（即21的值）插入最后一个框中。然而，由于每个框一次只能包含一个单一值，因此值4实际上被数字21所替换。
- en: The boxes now look like this.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在框看起来是这样的。
- en: '![Image](img/chapter05-02.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter05-02.png)'
- en: In a flowchart, the action of storing a value in a variable is represented by
    a left arrow
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在流程图中，将值存储在变量中的动作用左箭头表示
- en: .![Image](img/chapter05-03.png)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: .![图片](img/chapter05-03.png)
- en: This action is usually expressed as “Assign a value, or the result of an expression,
    to a variable”. The left arrow is called the value assignment operator.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个动作通常表示为“将值或表达式的结果赋给变量”。左箭头被称为值赋值运算符。
- en: '![](img/notice.jpg)Note that this arrow always points to the left. You are
    not allowed to use right arrows. Also, on the left side of the arrow only one
    single variable must exist.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)请注意，这个箭头始终指向左边。不允许使用右箭头。此外，箭头的左边只能存在一个单一变量。'
- en: In real computer science, the three boxes are actually three individual regions
    in main memory (RAM), named numberA, numberB and numberC.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际的计算机科学中，这三个盒子实际上是主内存（RAM）中的三个独立区域，分别命名为numberA、numberB和numberC。
- en: '![Image](img/chapter05-04.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter05-04.png)'
- en: When a program instructs the CPU to execute the following statement
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序指示CPU执行以下语句时
- en: numberC ← numberA + numberB
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: numberC ← numberA + numberB
- en: it follows the same three-step process as in the previous example.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它遵循与上一个示例相同的三个步骤过程。
- en: 1)The numbers 13 and 8 are transferred from the RAM's regions named numberA
    and numberB to the CPU.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 1)数字13和8从名为numberA和numberB的RAM区域转移到CPU。
- en: (This is the first step, in which you examined the values contained in the first
    two boxes).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: （这是第一步，你在其中检查了前两个框中的值）。
- en: 2)The CPU calculates the sum of 13 + 8.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 2)CPU计算13 + 8的和。
- en: (This is the second step, in which you used your brain to calculate the sum,
    or result).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: （这是第二步，你在其中使用你的大脑来计算总和或结果）。
- en: 3)The result, 21, is transferred from the CPU to the RAM's region named numberC,
    replacing the existing number 4.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 3)结果21从CPU转移到RAM的名为numberC的区域，替换了现有的数字4。
- en: (This is the third step, in which you inserted the result in the last box).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: （这是第三步，你在其中将结果插入最后一个框）。
- en: After execution, the RAM looks like this.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，RAM看起来是这样的。
- en: .![Image](img/chapter05-05.png)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: .![图片](img/chapter05-05.png)
- en: '![](img/remember.jpg)While a Python program is running, a variable can hold
    various values, but only one value at a time. When you assign a value to a variable,
    this value remains stored until you assign a new value replacing the old one.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)当Python程序运行时，一个变量可以持有各种值，但一次只能持有一个值。当你将一个值赋给一个变量时，这个值会一直存储，直到你分配一个新的值来替换旧的值。'
- en: '![](img/notice.jpg)The content of a variable can change to different values,
    but its name will always be the same because the name is just an identifier of
    a location in memory.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)变量的内容可以改变为不同的值，但它的名称将始终相同，因为名称只是内存中位置的标识符。'
- en: A variable is one of the most important elements in computer science because
    it helps you interact with data stored in the main memory (RAM). Soon, you will
    learn all about how to use variables in Python.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是计算机科学中最重要元素之一，因为它帮助你与存储在主内存（RAM）中的数据进行交互。很快，你将学习如何在Python中使用变量。
- en: 5.2 What is a Constant?
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.2 什么是常量？
- en: Sometimes, you may need to use a value that cannot change while the program
    is running. Such a value is called a constant. In simple terms, a constant can
    be thought of as a locked variable. This implies that when a program begins to
    run, a value is assigned to the constant, and thereafter, nothing can alter that
    value while the program is in progress. For example, in a financial program an
    interest rate can be declared as a constant.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你可能需要使用在程序运行期间不能改变的价值。这样的值被称为常量。简单来说，常量可以被视为一个锁定的变量。这意味着当程序开始运行时，一个值被分配给常量，之后，在程序运行过程中，没有任何东西可以改变这个值。例如，在一个金融程序中，利率可以被声明为一个常量。
- en: A descriptive name for a constant can also improve the readability of your program
    and help you avoid some errors. For example, let's say that you are using the
    value 3.14159265 (but not as a constant) at many points throughout your program.
    If you make a typographic error when typing the number, this will produce the
    wrong results. But, if this value is given a name, any typographical error in
    the name is detected by the compiler, and you are notified with an error message.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常量的描述性名称也可以提高你程序的可读性，并帮助你避免一些错误。例如，假设你在程序中的许多地方都使用了值3.14159265（但不是作为常量）。如果你在输入这个数字时犯了打字错误，这将产生错误的结果。但是，如果这个值被赋予一个名称，任何在名称上的打字错误都会被编译器检测到，并且你会收到一个错误信息。
- en: '![](img/notice.jpg)Unfortunately, Python does not support constants. You can
    use a variable in place of a constant, but take care not to accidentally change
    its initial value each time you use this variable in your program.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)不幸的是，Python不支持常量。你可以用一个变量来代替常量，但要注意不要在程序中使用这个变量时意外地改变它的初始值。'
- en: In a flowchart, you can represent the action of setting a constant equal to
    a value with the equals ( = ) sign.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在流程图中，你可以用等号（=）表示将常量设置为值的动作。
- en: .![Image](img/chapter05-06.png)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图像](img/chapter05-06.png)'
- en: '![](img/notice.jpg)This book uses uppercase character to distinguish a constant
    from a variable.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)这本书使用大写字母来区分常量和变量。'
- en: Consider an algorithm that lets the user enter the prices of three different
    products and then calculates and displays the 20% Value Added Tax (known as VAT)
    for each product. The flowchart in Figure 5–1 shows this process when no constant
    is used.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个算法，允许用户输入三个不同产品的价格，然后计算并显示每个产品的20%增值税（简称VAT）。图5-1展示了在没有使用常量的情况下这个过程。
- en: .![Image](img/chapter05-07.png)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图像](img/chapter05-07.png)'
- en: Figure 5–1 Calculating the 20% VAT for three products without the use of a constant
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-1 不使用常量计算三个产品的20%增值税
- en: Even though this algorithm is absolutely correct, the problem is that the author
    used the 20% VAT rate (20/100) three times. If this were an actual computer program,
    the CPU would be forced to calculate the result of the division (20/100) three
    individual times.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个算法绝对正确，但问题是作者使用了20%的增值税率（20/100）三次。如果这是一个实际的计算机程序，CPU将被迫三次单独计算除法的结果（20/100）。
- en: '![](img/notice.jpg)Generally speaking, division and multiplication are CPU-time
    consuming operations that must be avoided when possible.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)一般来说，除法和乘法是消耗CPU时间的操作，在可能的情况下应避免。'
- en: A much better solution would be to use a variable, as shown in Figure 5–2\.
    This reduces the number of division operations and also decreases the potential
    for typographical errors.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用变量是一个更好的解决方案，如图5-2所示。这减少了除法操作的次数，也减少了打字错误的潜在可能性。
- en: .![Image](img/chapter05-08.png)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![图像](img/chapter05-08.png)'
- en: Figure 5–2 Calculating the 20% VAT for three products using a variable, vat
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-2 使用变量vat计算三个产品的20%增值税
- en: This time the division (20/100) is calculated only once, and then its result
    is used to calculate the VAT of each product. But even now, the algorithm (which
    might later become a computer program) isn't perfect; vat is a variable and any
    programmer could accidentally change its value below in the program.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这次只计算一次除法（20/100），然后使用其结果来计算每个产品的增值税。但即使现在，算法（可能后来成为计算机程序）并不完美；vat是一个变量，任何程序员都可能不小心在程序中将其值更改到以下内容。
- en: The ideal solution would be to change the variable vat to a constant VAT, as
    shown in Figure 5–3.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 理想解决方案是将变量vat更改为常量VAT，如图5–3所示。
- en: .![Image](img/chapter05-09.png)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter05-09.png)
- en: Figure 5–3 Calculating the 20% VAT for three products using a constant, VAT
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图5–3 使用常量VAT计算三个产品的20%增值税
- en: '![](img/notice.jpg)Note that when a constant is declared in a flowchart, the
    equals ( = ) sign is used instead of the left arrow.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意，在流程图中声明常量时，使用等号（=）而不是左箭头。'
- en: This last solution is the best choice for many reasons.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最后的解决方案是许多原因的最佳选择。
- en: ►No one, including the programmer, can change the value of constant VAT just
    by accidentally writing a statement such as VAT ← 0.60 in any position of the
    program.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: ►没有人，包括程序员，可以通过在程序中的任何位置不小心编写VAT ← 0.60之类的语句来仅通过偶然的方式更改常量增值税的值。
- en: ►The potential for typographical errors is minimized.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: ►减少打印错误的可能性。
- en: ►The number of arithmetic operations is kept as low as possible.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ►将算术运算的数量保持在尽可能低。
- en: ►If one day the finance minister decides to increase the Value Added Tax rate
    from 20% to 22%, the programmer will need to change just one line of code!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: ►如果有一天财政部长决定将增值税率从20%提高到22%，程序员只需更改一行代码！
- en: 5.3 How Many Types of Variables and Constants Exist?
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.3 存在多少种变量和常量类型？
- en: Many different types of variables and constants exist in most computer languages.
    The reason for this diversity is the different types of data each variable or
    constant can hold. Most of the time, variables and constants hold the following
    types of data.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数计算机语言中存在许多不同类型的变量和常量。这种多样性的原因是每个变量或常量可以存储不同类型的数据。大多数情况下，变量和常量存储以下类型的数据。
- en: '►Integers: An integer value is a positive or negative number without any fractional
    part, such as 5, 100, 135, −25, and −5123.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: ►整数：整数值是一个没有小数部分的正数或负数，例如5、100、135、−25和−5123。
- en: '►Reals: A real value is a positive or negative number that includes a fractional
    part, such as 5.1, 7.23, 5.0, 3.14, and −23.78976\. Real values are also known
    as floats.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ►实数：实数是一个包含小数部分的正数或负数，例如5.1、7.23、5.0、3.14和−23.78976。实数也被称为浮点数。
- en: '►Booleans^([[7]](footnotes.html#Endnote_7)): A Boolean variable (or constant)
    can hold only one of two values: True or False.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: ►布尔值^([[7]](footnotes.html#Endnote_7))：布尔变量（或常量）只能存储两个值之一：True或False。
- en: '►Characters: A character is an alphanumeric value (a letter, a symbol, or a
    digit), and it is usually enclosed in single or double quotes, such as “a”, ''c'',
    or “@”. In computer science, a sequence of characters is known as a string!!!
    Probably the word “string” makes you visualize something wearable, but unfortunately
    it''s not. Please keep your dirty precious mind focused on computer science! Examples
    of strings are “Hello Zeus”, “I am 25 years old”, or “Peter Loves Jane For Ever”.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: ►字符：字符是一个字母数字值（一个字母、一个符号或一个数字），通常用单引号或双引号括起来，例如“a”，'c'或“@”。在计算机科学中，字符序列被称为字符串!!!
    可能“字符串”这个词会让你联想到可穿戴的东西，但不幸的是，它不是。请保持你的脏脏的宝贵思维专注于计算机科学！字符串的例子有“Hello Zeus”、“I am
    25 years old”或“Peter Loves Jane For Ever”。
- en: '![](img/notice.jpg)In Python, strings can be enclosed either in single or double
    quotes.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在Python中，字符串可以用单引号或双引号括起来。'
- en: 5.4 Rules and Conventions for Naming Variables and Constants in Python
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.4 Python中变量和常量的命名规则和约定
- en: Certain rules must be followed when you choose a name for your variable or constant.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 选择变量或常量的名称时必须遵循某些规则。
- en: ►The name of a variable or constant should only consist of Latin characters
    (English uppercase or lowercase characters), numbers, and the underscore character
    ( _ ). Especially for constants, even though lowercase letters are permitted,
    it is advisable to use only uppercase letters. This convention aids in visually
    distinguishing constants from variables. Examples of variable names are firstName,
    lastName1, and age while examples of constant names are VAT, and COMPUTER_NAME.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ►变量或常量名称应仅由拉丁字符（英语大写或小写字母）、数字和下划线字符（_）组成。特别是对于常量，尽管允许使用小写字母，但建议只使用大写字母。这种约定有助于在视觉上区分常量和变量。变量名称的例子有firstName、lastName1和age，而常量名称的例子有VAT和COMPUTER_NAME。
- en: ►Variable and constant names are case-sensitive, meaning there is a distinct
    difference between uppercase and lowercase characters. For example, myVAR, myvar,
    MYVAR, and MyVar are actually four different names.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ►变量和常量名称是区分大小写的，这意味着大写和小写字符之间有明显的区别。例如，myVAR、myvar、MYVAR和MyVar实际上是四个不同的名称。
- en: ►No space characters are allowed. If a variable or constant name consists of
    more than one word, you can use the underscore character ( _ ) between the words
    or start each word (except the first one) capitalized (Camel Case convention).
    For example, the variable name student first name is incorrect. Instead, you might
    use student_first_name, or even better, studentFirstName.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ►不允许有空格字符。如果变量或常量名称由多个单词组成，你可以在单词之间使用下划线字符（_）或在每个单词（除了第一个）的首字母大写（骆驼式命名约定）。例如，变量名称student
    first name是不正确的。相反，你可能使用student_first_name，或者更好的是studentFirstName。
- en: ►A valid variable or constant name can start with a letter, or an underscore.
    Numbers are allowed, but they cannot be used at the beginning of the name. For
    example, the variable name 1studentName is not properly written. Instead, you
    might use something like studentName1 or student1Name.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: ►有效的变量或常量名称可以以字母或下划线开头。数字是被允许的，但不能用于名称的开头。例如，变量名称1studentName的写法是不正确的。相反，你可能使用类似studentName1或student1Name的名称。
- en: ►A variable or constant name is usually chosen in a way that describes the meaning
    and the role of the data it contains. For example, a variable that holds a temperature
    value might be named temperature, temp, or even t.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ►变量或常量名称通常选择的方式可以描述它所包含数据的含义和作用。例如，一个存储温度值的变量可能被命名为temperature、temp或甚至t。
- en: ►Do not use any of the reserved words of Python as a variable or constant name.
    For example, the name While cannot be a valid variable or constant name since
    it is a reserved word in Python.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: ►不要使用Python的任何保留字作为变量或常量名称。例如，名称While不能作为有效的变量或常量名称，因为在Python中它是一个保留字。
- en: '![](img/remember.jpg)Unfortunately, Python does not support constants in the
    same way that some other computer languages do (such as C#, or C++). You can use
    a variable instead, but take care not to accidentally change its initial value
    each time you use this variable in your program.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)不幸的是，Python不支持常量，就像某些其他计算机语言（如C#或C++）所做的那样。你可以使用变量代替，但要注意不要在程序中使用这个变量时意外地改变其初始值。'
- en: '![](img/notice.jpg)The “Camel Case convention” is a style for naming identifiers
    (variables, subprograms, classes etc.) in computer programming. It is called "Camel
    Case" because the capital letters in the middle of the name resemble the humps
    of a camel. There are two main variations of Camel Case: a) Lower Camel Case (or
    Camel Case), where the first letter of the identifier starts with a lowercase
    letter, and the first letter of each subsequent word starts with an uppercase
    letter; and b) Upper Camel Case (or Pascal Case), which is similar to Lower Camel
    Case, but also, the first letter of the identifier starts with an uppercase letter.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)"骆驼式命名约定"是计算机编程中命名标识符（变量、子程序、类等）的一种风格。之所以称为"骆驼式"，是因为名称中间的大写字母类似于骆驼的驼峰。骆驼式命名主要有两种变体：a)
    小驼峰式（或骆驼式），其中标识符的第一个字母以小写字母开头，每个后续单词的第一个字母也以大写字母开头；b) 大驼峰式（或帕斯卡式），与大驼峰式类似，但标识符的第一个字母也以大写字母开头。'
- en: '![](img/notice.jpg)The Lower Camel Case convention is often used for naming
    variables and subprograms, while the Upper Camel Case is for naming classes. You
    will learn more about subprograms and classes in [Part VII](part07.html) and [Part
    VIII](part08.html) correspondingly.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)小驼峰式命名约定通常用于命名变量和子程序，而大驼峰式用于命名类。你将在相应的第七部分[Part VII](part07.html)和第八部分[Part
    VIII](part08.html)中了解更多关于子程序和类的内容。'
- en: 5.5 What Does the Phrase “Declare a Variable” Mean?
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.5 “声明变量”这个短语是什么意思？
- en: Declaration is the process of reserving a portion in main memory (RAM) for storing
    the content of a variable. In many high-level computer languages, the programmer
    must write a specific statement to reserve that portion in the RAM before the
    variable can be used. In most cases, they even need to specify the variable type
    so that the compiler or the interpreter knows exactly how much space to reserve.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 声明是为主存储器（RAM）中存储变量内容预留部分的过程。在许多高级计算机语言中，程序员必须在变量可以使用之前编写一个特定的语句来预留该部分在 RAM 中的空间。在大多数情况下，他们甚至需要指定变量类型，以便编译器或解释器知道需要预留多少空间。
- en: Here are some examples showing how to declare a variable in different high-level
    computer languages.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些示例，展示了如何在不同的高级计算机语言中声明一个变量。
- en: '| Declaration Statement | High‑level Computer Language |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 声明语句 | 高级计算机语言 |'
- en: '| Dim sum As Integer | Visual Basic |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| Dim sum As Integer | Visual Basic |'
- en: '| int sum; | C#, C, C++, Java, and many more |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| int sum; | C#, C, C++, Java, 以及更多 |'
- en: '| sum: Integer; | Pascal, Delphi |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| sum: Integer; | Pascal, Delphi |'
- en: '| var sum; | Javascript |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| var sum; | Javascript |'
- en: 5.6 How to Declare Variables in Python
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.6 如何在 Python 中声明变量
- en: In Python, there is no need to declare variables as you would in C# or C++.
    Variables are declared when first used.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，不需要像在 C# 或 C++ 中那样声明变量。变量是在首次使用时声明的。
- en: Below are examples presenting the declaration of some variables in Python. The
    names follow the Lower Camel Case  convention as well as all the rules for naming
    variables presented in [Section 5.4](#toc_4).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些示例，展示了在 Python 中声明一些变量（用作常量）。它们的名称遵循小驼峰命名法以及 [第 5.4 节](#toc_4) 中提到的所有变量命名规则。
- en: number1 = 0
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: number1 = 0
- en: found = False
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: found = False
- en: firstName = "Hera"
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: firstName = "Hera"
- en: '![](img/notice.jpg)In Python, assigning a value to a variable is accomplished
    using the equals ( = ) sign. This operation is equivalent to the left arrow in
    flowcharts.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在 Python 中，使用等号（=）给变量赋值。这个操作与流程图中的左箭头等效。'
- en: '![](img/notice.jpg)In Python you assign a value to a variable of type string
    using double quotes (" ").'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在 Python 中，使用双引号（" "）给字符串类型的变量赋值。'
- en: 5.7 How to Declare Constants in Python
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.7 如何在 Python 中声明常量
- en: You must accept it! You cannot declare constants in Python, there is no such
    option! However, you can still use variables (preferably in uppercase) instead
    and take care not to alter their initial values each time you use these variables
    in your program.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须接受它！在 Python 中无法声明常量，没有这样的选项！然而，你仍然可以使用变量（最好是使用大写字母）代替，并且在使用这些变量时要注意不要改变它们的初始值。
- en: The following examples declare some variables (used as constants) in Python.
    They follow all the rules and conventions for naming constants presented in [Section
    5.4](#toc_4).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例在 Python 中声明了一些变量（用作常量）。它们遵循 [第 5.4 节](#toc_4) 中提到的所有常量命名规则和约定。
- en: VAT = 0.22
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: VAT = 0.22
- en: NUMBER_OF_PLAYERS = 25
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: NUMBER_OF_PLAYERS = 25
- en: FAVORITE_SONG = "We are the world"
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: FAVORITE_SONG = "We are the world"
- en: FAVORITE_CHARACTER = "w"
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: FAVORITE_CHARACTER = "w"
- en: '![](img/remember.jpg)In computer programming, once a constant is defined, its
    value cannot be altered while the program is running. Unfortunately, this is not
    true for Python. Since you use a variable in place of a constant, you must be
    careful not to accidentally alter their initial values below in your programs.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)在计算机编程中，一旦定义了常量，在程序运行期间其值不能改变。不幸的是，Python 并不是这样。由于你使用变量代替常量，你必须小心不要在程序中意外地改变它们的初始值。'
- en: '5.8 Review Questions: True/False'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.8 复习问题：真/假
- en: Choose true or false for each of the following statements.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下每个陈述，选择真或假。
- en: 1)A variable is a location in the computer's secondary storage device.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 1)变量是计算机二级存储设备中的一个位置。
- en: 2)For a value assignment operator in a flowchart, you can use either a left
    or a right arrow.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 2)在流程图中，对于赋值操作符，你可以使用左箭头或右箭头。
- en: 3)The content of a variable can change while the program executes.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 3)在程序执行过程中，变量的内容可以改变。
- en: 4)In languages other than Python, the content of a constant can change while
    the program executes.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 4)在 Python 之外的语言中，常量的内容在程序执行过程中可以改变。
- en: 5)The value 10.0 is an integer.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 5)值 10.0 是一个整数。
- en: 6)A Boolean variable can hold only one of two values.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 6)布尔变量只能存储两个值中的一个。
- en: 7)The value “10.0” enclosed in double quotes is a real value.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 7)双引号括起来的值“10.0”是一个实数。
- en: 8)In computer science, a string is something that you can wear!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 8)在计算机科学中，字符串是你能佩戴的东西！
- en: 9)The name of a variable can contain numbers.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 9)变量的名称可以包含数字。
- en: 10)A variable can change its name while the program executes.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 10)变量可以在程序执行时更改其名称。
- en: 11)The name of a variable cannot be a number.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 11)变量的名称不能是数字。
- en: 12)The name of a constant must always be a descriptive one.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 12)常量的名称必须始终是描述性的。
- en: 13)The name student name is not a valid variable name.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 13)student name不是一个有效的变量名。
- en: 14)The name STUDENT_NAME is a valid constant name.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 14)STUDENT_NAME是一个有效的常量名。
- en: 15)In Python, the name of a variable can contain uppercase and lowercase letters.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 15)在Python中，变量的名称可以包含大写和小写字母。
- en: 16)In Python, there is no need to declare a variable.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 16)在Python中，不需要声明变量。
- en: 17)In a Python program, you must always use at least one variable.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 17)在Python程序中，你必须始终至少使用一个变量。
- en: '5.9 Review Questions: Multiple Choice'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.9 复习问题：多项选择题
- en: Select the correct answer for each of the following statements.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为以下每个陈述选择正确的答案。
- en: 1)A variable is a place in
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 1)变量是一个存储
- en: a)a hard disk.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: a)一个硬盘。
- en: b)a DVD disc.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: b)一个DVD光盘。
- en: c)a USB flash drive.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: c)一个U盘。
- en: d)all of the above
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: d)所有这些
- en: e)none of the above
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: e)以上都不是
- en: 2)A variable can hold
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 2)变量可以持有
- en: a)one value at a time.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: a)一次一个值。
- en: b)many values at a time.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: b)一次多个值。
- en: c)all of the above
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: c)所有这些
- en: d)none of the above
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 3)In general, using constants in a program
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 3)通常，在程序中使用常量
- en: a)helps programmers to completely avoid typographical errors.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: a)帮助程序员完全避免拼写错误。
- en: b)helps programmers to avoid using division and multiplication.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: b)帮助程序员避免使用除法和乘法。
- en: c)all of the above
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: c)所有这些
- en: d)none of the above
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 4)Which one of the following is an integer?
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 4)以下哪一个是整数？
- en: a)5.0
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: a)5.0
- en: b)−5
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: b)−5
- en: c)“5”
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: c)“5”
- en: d)none of the above is an integer.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是整数。
- en: 5)A Boolean variable can hold the value
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 5)布尔变量可以持有值
- en: a)one.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: a)一个。
- en: b)“True”.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: b)“True”。
- en: c)True.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: c)True。
- en: d)none of the above
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 6)In Python, strings can be
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 6)在Python中，字符串可以是
- en: a)enclosed in single quotes.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: a)用单引号括起来。
- en: b)enclosed in double quotes.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: b)用双引号括起来。
- en: c)both of the above
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: c)两者都是
- en: 7)Which of the following is not a valid Python variable?
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 7)以下哪项不是有效的Python变量？
- en: a)city_name
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: a)city_name
- en: b)cityName
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: b)cityName
- en: c)cityname
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: c)cityname
- en: d)city-name
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: d)city-name
- en: 5.10 Review Exercises
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.10 复习练习
- en: Complete the following exercises.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Match each element from the first column with one element from the second
    column.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 1)将第一列中的每个元素与第二列中的一个元素匹配。
- en: '| Value | Data Type |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 数据类型 |'
- en: '| 1\. “True” | a. Boolean |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| 1\. “True” | a. 布尔 |'
- en: '| 2\. 123 | b. Real |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 2\. 123 | b. 实数 |'
- en: '| 3\. False | c. String |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 3\. 假 | c. 字符串 |'
- en: '| 4\. 10.0 | d. Integer |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 4\. 10.0 | d. 整数 |'
- en: 2)Match each element from the first column with one element from the second
    column.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 2)将第一列中的每个元素与第二列中的一个元素匹配。
- en: '| Value | Data Type |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 数据类型 |'
- en: '| 1\. The name of a person | a. Boolean |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 1\. 人的名字 | a. 布尔 |'
- en: '| 2\. The age of a person | b. Real |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 2\. 人的年龄 | b. 实数 |'
- en: '| 3\. The result of the division 5.0/2.0 | c. Integer |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 3\. 5.0/2.0的除法结果 | c. 整数 |'
- en: '| 4\. Is it black or is it white? | d. String |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 4\. 是黑色还是白色？ | d. 字符串 |'
- en: 3)Complete the following table
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 3)完成以下表格
- en: '| Value | Data Type | Declaration and Initialization |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 数据类型 | 声明和初始化 |'
- en: '| The name of my friend | String | name = "Mark" |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 我朋友的名字 | 字符串 | name = "Mark" |'
- en: '| My address |   | address = "254 Lookout Rd. Wilson, NY 27893" |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 我的地址 |   | address = "254 Lookout Rd. Wilson, NY 27893" |'
- en: '| The average daily temperature |   |   |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 平均每日气温 |   |   |'
- en: '| A telephone number |   | phoneNumber = "1‑891‑764‑2410" |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| 一个电话号码 |   | phoneNumber = "1‑891‑764‑2410" |'
- en: '| My Social Security Number (SSN) |   |   |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 我的社保号码（SSN） |   |   |'
- en: '| The speed of a car |   |   |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 汽车的速度 |   |   |'
- en: '| The number of children in a family |   |   |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 家庭中的孩子数量 |   |   |'
