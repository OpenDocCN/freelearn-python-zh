- en: Chapter 2. Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。入门
- en: Python and Django are available for multiple platforms. In this chapter, we
    will see how to set up our development environment on UNIX/Linux, Windows, and
    Mac OS X. We will also see how to create our first project and connect it to a
    database.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python和Django适用于多个平台。在本章中，我们将看到如何在UNIX/Linux、Windows和Mac OS X上设置我们的开发环境。我们还将看到如何创建我们的第一个项目并将其连接到数据库。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing Python
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Python
- en: Installing Django
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Django
- en: Installing the database system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装数据库系统
- en: Creating your first project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的第一个项目
- en: Setting up the database
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置数据库
- en: Launching the development server
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动开发服务器
- en: Installing the required software
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装所需的软件
- en: Our development environment consists of Python, Django, and a database system.
    In the following sections, we will see how to install these software packages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的开发环境包括Python、Django和数据库系统。在接下来的章节中，我们将看到如何安装这些软件包。
- en: Installing Python
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Python
- en: Django is written in Python, so naturally, the first step in setting up our
    development environment is to install Python. Python is available for a variety
    of operating systems, and installing Python is no different from installing other
    software packages. The procedure, however, depends on your operating system.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Django是用Python编写的，因此在设置我们的开发环境的第一步自然是安装Python。Python适用于各种操作系统，安装Python与安装其他软件包没有什么不同。但是，具体的步骤取决于您的操作系统。
- en: For installation, you need to make sure that you get a recent version of Python.
    Django requires Python 2.7 or higher. The latest version of Python is 3.4.2 for
    3.x and 2.7.9 for 2.x versions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 安装时，您需要确保获得Python的最新版本。Django需要Python 2.7或更高版本。Python的最新版本是3.x的3.4.2和2.x版本的2.7.9。
- en: Please read the section relevant to your operating system for installation instructions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请阅读与您的操作系统相关的部分以获取安装说明。
- en: Installing Python on Windows
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Windows上安装Python
- en: Python has a standard installer for Windows users. Simply head to [https://www.python.org/download/](https://www.python.org/download/)
    and download the latest version. Next, double-click on the `.exe` or `.msi` file
    and follow the installation instructions step by step. The graphical installer
    will guide you through the installation process and create shortcuts to Python
    executables in the Start menu.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Python有一个标准的Windows用户安装程序。只需前往[https://www.python.org/download/](https://www.python.org/download/)并下载最新版本。接下来，双击`.exe`或`.msi`文件，按照安装说明逐步进行安装。图形安装程序将指导您完成安装过程，并在“开始”菜单中创建Python可执行文件的快捷方式。
- en: 'Once done with the installation, we need to add the Python directory to the
    system path so that we can access Python while using the Command Prompt. To do
    so, follow these steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们需要将Python目录添加到系统路径中，以便在使用命令提示符时可以访问Python。要做到这一点，请按照以下步骤操作：
- en: Open the Control Panel.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制面板。
- en: Double-click on the **System and Security** icon or text and then look for **System**
    (as seen in Windows 7), as shown in the following screenshot:![Installing Python
    on Windows](img/image00266.jpeg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击**系统和安全**图标或文本，然后查找**系统**（如在Windows 7中所示），如下截图所示：![在Windows上安装Python](img/image00266.jpeg)
- en: Click on **Advanced System Settings** and a pop-up window will appear.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**高级系统设置**，将弹出一个窗口。
- en: Click on the **Environment Variables** button and a new dialog box will open.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**环境变量**按钮，将打开一个新的对话框。
- en: Select the **Path** system variable and edit it.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Path**系统变量并编辑它。
- en: Append the path to where you installed Python as its value (the default path
    is usually `c:\PythonXX`, where `XX` is your Python version), as shown in the
    following screenshot:![Installing Python on Windows](img/image00267.jpeg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Python安装路径追加为其值（默认路径通常为`c:\PythonXX`，其中`XX`是您的Python版本），如下截图所示：![在Windows上安装Python](img/image00267.jpeg)
- en: If you want to test your installation, open the **Run** dialog box, type `python`,
    and hit the *Enter* button. The Python interactive shell should open.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要测试安装，请打开**运行**对话框，输入`python`，然后按*Enter*按钮。Python交互式shell应该会打开。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Don't forget to separate the new path from the one before it with a semicolon
    (`;`).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记使用分号(`;`)将新路径与之前的路径分隔开。
- en: Installing Python on Unix/Linux
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Unix/Linux上安装Python
- en: 'If you use Linux or another flavor of Unix, chances are that you already have
    Python installed. To check, open a terminal, type `python`, and hit the *Enter*
    button. If you see the Python interactive shell, you already have Python installed.
    You should get the following output after typing `python` in the terminal:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Linux或其他Unix版本，您可能已经安装了Python。要检查，请打开终端，输入`python`，然后按*Enter*按钮。如果您看到Python交互式shell，则已安装Python。在终端中输入`python`后，您应该会得到以下输出：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Installing Python on Unix/Linux](img/image00268.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![在Unix/Linux上安装Python](img/image00268.jpeg)'
- en: The first line of the output indicates the version installed on your system
    (2.7.6, here).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的第一行指示您系统上安装的版本（此处为2.7.6）。
- en: If you receive an error message instead of seeing the preceding output, or have
    an old version of Python, please read on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到错误消息而不是前面的输出，或者安装了旧版本的Python，请继续阅读。
- en: It is recommended that Unix/Linux users install and update Python through the
    system's package manager. Although the actual details vary from system to system,
    it won't be any different from installing any other package.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 建议Unix/Linux用户通过系统的软件包管理器安装和更新Python。尽管实际细节因系统而异，但与安装其他软件包没有什么不同。
- en: 'For APT-based Linux distributions, such as **Debian** and **Ubuntu**, open
    a terminal and type the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于APT的Linux发行版，如**Debian**和**Ubuntu**，打开终端并输入以下内容：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you have **Synaptic Package Manager**, simply search for Python, mark its
    package for installation, and click on the **Apply** button.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有**Synaptic Package Manager**，只需搜索Python，标记其安装包，并单击**应用**按钮。
- en: Users of other Linux distributions should check their system documentation for
    information on how to use the package manager to install packages.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其他Linux发行版的用户应查阅其系统文档，了解如何使用软件包管理器安装软件包。
- en: Installing Python on Mac OS X
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Mac OS X上安装Python
- en: Mac OS X comes with Python preinstalled. However, due to Apple's release cycle,
    it's often an old version. If you start the Python interactive shell and find
    a version older than 2.3, please visit [http://www.python.org/download/mac/](http://www.python.org/download/mac/)
    and download a newer installer for your version of Mac OS X.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Mac OS X预装了Python。但是，由于苹果的发布周期，通常是一个旧版本。如果您启动Python交互式shell并发现版本旧于2.3，请访问[http://www.python.org/download/mac/](http://www.python.org/download/mac/)并下载适用于您的Mac
    OS X版本的新安装程序。
- en: Now that Python is up and running, we are almost ready. Next, we will install
    **virtualenv**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Python已经准备就绪，我们几乎可以开始了。接下来，我们将安装**virtualenv**。
- en: Installing virtualenv
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装virtualenv
- en: With virtualenv you can create an isolated Python environment. It's not much
    of a need in the beginning, but it's a lifesaver for dependency management (for
    example, if one of your web applications requires one version of the library and
    another application, due to some legacy or compatibility issues, requires another
    version of the same library, or if changes made in one library or application
    break the rest of the applications).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用virtualenv可以创建一个隔离的Python环境。在开始阶段并不是很需要，但对于依赖管理来说是一个救命稻草（例如，如果您的一个Web应用程序需要库的一个版本，而另一个应用程序由于一些遗留或兼容性问题需要同一库的另一个版本，或者如果对一个库或应用程序所做的更改破坏了其他应用程序）。
- en: 'Virtualenv can be used to avoid such problematic situations. It will create
    its own environment so that it will not mess with your global settings. It usually
    creates its own directories and shared libraries to make virtualenv work without
    any external interference. If you have **pip 1.3** or greater, install it globally.
    You can use the following command to install virtualenv:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Virtualenv可以用来避免这种问题。它将创建自己的环境，这样就不会影响全局设置。它通常会创建自己的目录和共享库，以使virtualenv在没有任何外部干扰的情况下工作。如果你有**pip
    1.3**或更高版本，请在全局安装。您可以使用以下命令安装virtualenv：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Installing virtualenv](img/image00269.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![安装virtualenv](img/image00269.jpeg)'
- en: 'Once it has been downloaded fully, virtualenv will look like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完全下载，virtualenv将如下所示：
- en: '![Installing virtualenv](img/image00270.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![安装virtualenv](img/image00270.jpeg)'
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you have not installed pip yet, you can install it with `sudo apt-get install
    python-pip`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未安装pip，可以使用`sudo apt-get install python-pip`进行安装。
- en: 'That''s all! Now you can create your virtual environment by using the following
    command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了！现在您可以使用以下命令创建您的虚拟环境：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Installing virtualenv](img/image00271.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![安装virtualenv](img/image00271.jpeg)'
- en: 'Virtualenv has very detailed online documentation, which you must follow for
    any kind of issue faced while using virtualenv. The following lines are an excerpt
    from that online documentation:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Virtualenv有非常详细的在线文档，您在使用virtualenv时遇到任何问题都必须遵循。以下内容摘自在线文档：
- en: '*This creates `ENV/lib/pythonX.X/site-packages`, where any libraries you install
    will go. It also creates `ENV/bin/python`, which is a Python interpreter that
    uses this environment. Anytime you use that interpreter (including when a script
    has `#!/path/to/ENV/bin/python` in it) the libraries in that environment will
    be used.*'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*这将创建`ENV/lib/pythonX.X/site-packages`，您安装的任何库都将放在这里。它还会创建`ENV/bin/python`，这是一个使用此环境的Python解释器。每次使用该解释器（包括当脚本中有`#!/path/to/ENV/bin/python`时），都将使用该环境中的库。*'
- en: We can find the virtualenv online documentation at [https://pypi.python.org/pypi/virtualenv/1.8.2](https://pypi.python.org/pypi/virtualenv/1.8.2).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在[https://pypi.python.org/pypi/virtualenv/1.8.2](https://pypi.python.org/pypi/virtualenv/1.8.2)找到virtualenv在线文档。
- en: A new `virtualenv` folder also includes the pip installer, so you can use the
    `ENV/bin/pip` command to install additional packages into the environment.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`virtualenv`文件夹还包括pip安装程序，因此您可以使用`ENV/bin/pip`命令将其他软件包安装到环境中。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Activate script**: In a newly created virtual environment there will be a
    `bin/activate` shell script. For Windows systems, activate scripts are provided
    for **CMD** and **Powershell**.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**激活脚本**：在新创建的虚拟环境中将有一个`bin/activate` shell脚本。对于Windows系统，提供了**CMD**和**Powershell**的激活脚本。'
- en: 'You can read more at:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址阅读更多信息：
- en: '[http://virtualenv.readthedocs.org/en/latest/virtualenv.html](http://virtualenv.readthedocs.org/en/latest/virtualenv.html)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://virtualenv.readthedocs.org/en/latest/virtualenv.html](http://virtualenv.readthedocs.org/en/latest/virtualenv.html)'
- en: 'On Unix systems, we can use the following command to activate the `virtualenv`
    script:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix系统上，我们可以使用以下命令激活`virtualenv`脚本：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Installing virtualenv](img/image00272.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![安装virtualenv](img/image00272.jpeg)'
- en: 'On Windows, we can use the following command to activate the `virtualenv` script
    on the command prompt:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，我们可以使用以下命令在命令提示符上激活`virtualenv`脚本：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Type `deactivate` to undo the changes, as shown in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`deactivate`来撤消更改，如下图所示：
- en: '![Installing virtualenv](img/image00273.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![安装virtualenv](img/image00273.jpeg)'
- en: This changes your `$PATH` variable.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更改您的`$PATH`变量。
- en: 'To know more about activate scripts, such as which environment you are using
    or whether you need to activate the script, please visit the following link:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关激活脚本的更多信息，例如您正在使用哪个环境或是否需要激活脚本，请访问以下链接：
- en: '[http://virtualenv.readthedocs.org/en/latest/virtualenv.html](http://virtualenv.readthedocs.org/en/latest/virtualenv.html)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://virtualenv.readthedocs.org/en/latest/virtualenv.html](http://virtualenv.readthedocs.org/en/latest/virtualenv.html)'
- en: Installing Django
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Django
- en: Installing Django is very easy, but it depends slightly on your operating system.
    Since Python is a platform-independent language, Django has one package that works
    everywhere regardless of your operating system.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Django非常简单，但在某种程度上取决于您的操作系统。由于Python是一种平台无关的语言，Django有一个包可以在任何操作系统上使用。
- en: To download Django, head to [http://www.djangoproject.com/download/](http://www.djangoproject.com/download/)
    and grab the latest official version. The code in this book is developed on Django
    1.7 (the latest as of this writing), but most of the code should run on later
    official releases. Next, follow the instructions related to your platform.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载Django，请访问[http://www.djangoproject.com/download/](http://www.djangoproject.com/download/)并获取最新的官方版本。本书中的代码是在Django
    1.7（本文撰写时的最新版本）上开发的，但大部分代码应该可以在以后的官方版本上运行。接下来，按照与您的平台相关的说明进行操作。
- en: Django compatibility with operating systems – Windows versus Linux
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Django与操作系统的兼容性- Windows与Linux
- en: 'There are a few points you need to know for when you deal with operating systems.
    Many packages and settings need to be tweaked before running Django without any
    flaws. Let''s take a look at them:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理操作系统时，有一些要注意的地方。在运行Django之前，许多软件包和设置需要进行调整，以确保没有任何问题。让我们来看看它们：
- en: Some Python packages cannot be installed correctly, or at all in Windows; if
    they can, they will create a lot of hassle when you do
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些Python软件包在Windows上无法正确安装，或者根本无法安装；如果可以安装，当您运行Django时会带来很多麻烦
- en: If you need to deploy your Django application, it makes more sense to use a
    Unix-flavored system, simply because 99 percent of the time, your deployment environment
    is the same
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您需要部署Django应用程序，最好使用类Unix系统，因为99%的情况下，您的部署环境是相同的
- en: If your applications are complex, it's easier to get the required dependencies,
    be they extensions in Linux, libraries, and so on
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的应用程序很复杂，获取所需的依赖项会更容易，无论是Linux中的扩展，库等等
- en: Installing Django on Windows
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Windows上安装Django
- en: 'After you have downloaded the Django archive, extract it to the C drive and
    open the command prompt (from **Start** | **Accessories**). Now, change the current
    directory to where you extracted Django from by issuing the following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载了Django存档之后，将其解压到C驱动器，并打开命令提示符（从**开始** | **附件**）。现在，通过发出以下命令，将当前目录更改为您从中提取Django的位置：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, `x.xx` is your Django version.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`x.xx`是您的Django版本。
- en: 'Next, install Django by running the following command (you will need administrative
    privileges for this):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过运行以下命令来安装Django（您需要管理员权限）：
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you do not have a program to handle the `.tar.gz` files on your system, I
    recommend using **7-Zip**, which is free and available at [http://www.7-zip.org/](http://www.7-zip.org/).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的系统没有处理`.tar.gz`文件的程序，我建议使用**7-Zip**，它是免费的，可以在[http://www.7-zip.org/](http://www.7-zip.org/)上获得。
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If, for some reason, the preceding instructions didn't work, you can manually
    copy the `django` folder inside the archive to the `Lib\site-packages` folder
    located in the Python installation directory. This will do the job of running
    the `setup.py` installation command.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因前面的说明没有起作用，您可以手动将存档中的`django`文件夹复制到Python安装目录中的`Lib\site-packages`文件夹中。这将执行`setup.py`安装命令的工作。
- en: The last step is copying the `django-admin.py` file from `Django-x.xx\django\bin`
    to somewhere in your system path, such as `c:\windows` or the folder where you
    installed Python.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将`Django-x.xx\django\bin`中的`django-admin.py`文件复制到系统路径的某个位置，例如`c:\windows`或您安装Python的文件夹。
- en: Once done, you can safely remove the `c:\Django-x.xx` folder because it is no
    longer needed.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您可以安全地删除`c:\Django-x.xx`文件夹，因为它不再需要了。
- en: 'That''s it! To test your installation, open a command prompt and type the following
    command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！要测试您的安装，请打开命令提示符并输入以下命令：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you see the current version of Django printed on screen, then everything
    is set.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在屏幕上看到Django的当前版本，则一切都已设置好。
- en: Installing Django on Unix/Linux and Mac OS X
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Unix/Linux和Mac OS X上安装Django
- en: 'The installation instructions for all Unix and Linux systems are the same.
    You need to run the following commands in the directory where the `Django-x.xx.tar.gz`
    archive is located. These commands will extract the archive and install Django
    for you:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Unix和Linux系统的安装说明都是相同的。您需要在`Django-x.xx.tar.gz`存档所在的目录中运行以下命令。这些命令将为您提取存档并安装Django：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding instructions should work on any Unix/Linux system, as well as
    Mac OS X. However, it may be easier to install Django through your system''s package
    manager if it has a package for Django. Ubuntu has one; so to install Django on
    Ubuntu, simply look for a package called `python-django` in Synaptic, or run the
    following command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的说明应该适用于任何Unix/Linux系统，以及Mac OS X。但是，如果您的系统有Django的软件包，通过系统的软件包管理器安装Django可能会更容易。Ubuntu有一个；因此，要在Ubuntu上安装Django，只需在Synaptic中查找一个名为`python-django`的软件包，或者运行以下命令：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can test your installation by running the following command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来测试您的安装：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you see the current version of Django printed on screen, then everything
    is set.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在屏幕上看到Django的当前版本，则一切都已设置好。
- en: Installing a database system
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装数据库系统
- en: While Django does not require a database to function, the application we are
    going to develop does. So, in the final step of software installation, we are
    going to make sure that we have a database system for handling our data.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Django不需要数据库来运行，但我们将要开发的应用程序需要。因此，在软件安装的最后一步，我们将确保我们有一个数据库系统来处理我们的数据。
- en: 'It''s worth noting that Django supports several database engines: **MySQL**,
    **PostgreSQL**, **MS SQL Server**, **Oracle**, and **SQLite**. Interestingly,
    however, you only need to learn one API in order to use any of these database
    systems. This is possible because of Django''s database layer that abstracts access
    to the database system. We will learn about this later, but, for now, you only
    need to know that, regardless of what database system you choose, you will be
    able to run Django applications developed in this book (or elsewhere) without
    modification.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，Django支持多种数据库引擎：**MySQL**、**PostgreSQL**、**MS SQL Server**、**Oracle**和**SQLite**。然而，有趣的是，您只需要学习一个API就可以使用任何这些数据库系统。这是可能的，因为Django的数据库层抽象了对数据库系统的访问。我们稍后会学习这一点，但是现在，您只需要知道，无论您选择哪种数据库系统，您都可以运行本书（或其他地方）开发的Django应用程序而无需修改。
- en: If you have Python 2.7 or higher, you don't need to install anything. Python
    2.7 comes with the SQLite database management system contained in a module named
    `sqlite3`. Unlike client-server database systems, SQLite does not require a resident
    process in memory and it stores the database in a single file, which makes it
    ideal for our development environment.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Python 2.7或更高版本，则无需安装任何内容。Python 2.7带有名为`sqlite3`的SQLite数据库管理系统模块。与客户端-服务器数据库系统不同，SQLite不需要内存中的常驻进程，并且它将数据库存储在单个文件中，这使其非常适合我们的开发环境。
- en: If you don't have Python 2.7, you can install the Python module for SQLite manually
    by downloading it at [http://www.pysqlite.org/](http://www.pysqlite.org/) (Windows
    users) or through your package manager (Unix/Linux).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有Python 2.7，您可以通过在[http://www.pysqlite.org/](http://www.pysqlite.org/)（Windows用户）下载或通过您的软件包管理器（Unix/Linux）手动安装SQLite的Python模块。
- en: On the other hand, if you already have another Django-supported database server
    installed on your system, you can also use this. We will tell Django what database
    system to use by editing a configuration file, as we will see in later sections.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您的系统上已经安装了另一个受Django支持的数据库服务器，您也可以使用它。我们将在后面的部分中看到，通过编辑配置文件，我们可以告诉Django使用哪个数据库系统。
- en: Tip
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Don''t I need Apache or some other web server?**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**我不需要Apache或其他网络服务器吗？**'
- en: Django comes with its own web server, which we are going to use during the development
    phase because it is lightweight and comes pre-configured for Django. However,
    Django does support Apache and other popular web servers, such as light tpd, nginx,
    and so on. We will see how to configure Django for Apache when we prepare our
    application for deployment later in this book.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Django自带自己的网络服务器，在开发阶段我们将使用它，因为它轻量级且预先配置了Django。但是，Django也支持Apache和其他流行的网络服务器，如lighttpd、nginx等。我们将在本书后面的部分中看到，当我们准备部署应用程序时，如何配置Django以适用于Apache。
- en: The same applies to the database manager. During the development phase, we will
    use SQLite because it is easy to set up, but when we deploy the application, we
    will switch to a database server such as MySQL.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库管理器也是一样。在开发阶段，我们将使用SQLite，因为它易于设置，但是当我们部署应用程序时，我们将切换到诸如MySQL之类的数据库服务器。
- en: As I said earlier, regardless of what components we use, our code will stay
    the same; Django handles all the communication with the web and database servers
    for us.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前所说的，无论我们使用什么组件，我们的代码都将保持不变；Django会处理与网络和数据库服务器的所有通信。
- en: Creating your first project
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个项目
- en: Now with the software we need in place, the time has come for the fun part–creating
    our first Django project!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好了所需的软件，是时候进行有趣的部分了——创建我们的第一个Django项目了！
- en: 'If you recall from the Django installation section, we used a command called
    `django-admin.py` to test our installation. This utility is the heart of Django''s
    project management facilities, as it enables the user to do a range of project
    management tasks, including these:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还记得Django安装部分，我们使用了一个名为`django-admin.py`的命令来测试我们的安装。这个实用程序是Django项目管理设施的核心，因为它使用户能够执行一系列项目管理任务，包括以下内容：
- en: Creating a new project
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新项目
- en: Creating and managing the project's database
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和管理项目的数据库
- en: Validating the current project and testing for errors
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证当前项目并测试错误
- en: Starting the development web server
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动开发网络服务器
- en: We will see how to use some of these tasks in the rest of this chapter.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的其余部分看到如何使用这些任务。
- en: Creating an empty project
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个空项目
- en: To create your first Django project, open a terminal (or Command Prompt for
    Windows users; that is, **Start** | **Run** | **cmd**), and type the following
    command. Then, hit *Enter*.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建您的第一个Django项目，请打开终端（或Windows用户的命令提示符；即**开始** | **运行** | **cmd**），然后输入以下命令。然后，按*Enter*。
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This command will make a folder named `django_bookmarks` in the current directory
    and create the initial directory structure inside it. Let''s see what kind of
    files are created:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将在当前目录中创建一个名为`django_bookmarks`的文件夹，并在其中创建初始目录结构。让我们看看创建了哪些类型的文件：
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is a quick explanation of what these files are:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这些文件的快速解释：
- en: '`__init__.py`: Django projects are Python packages, and this file is required
    to tell Python that this folder is to be treated as a package.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__.py`：Django项目是Python包，这个文件是必需的，用于告诉Python这个文件夹应该被视为一个包。'
- en: A package in Python's terminology is a collection of modules, and they are used
    to group similar files together and prevent naming conflicts.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Python术语中的包是模块的集合，它们用于将类似的文件分组在一起，以防止命名冲突。
- en: '`manage.py`: This is another utility script used to manage our project. You
    can think of it as your project''s version of the `django-admin.py` file. Actually,
    both `django-admin.py` and `manage.py` share the same backend code.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manage.py`：这是另一个用于管理我们项目的实用脚本。您可以将其视为项目版本的`django-admin.py`文件。实际上，`django-admin.py`和`manage.py`共享相同的后端代码。'
- en: '`settings.py`: This is the main configuration file for your Django project.
    In it, you can specify a variety of options, including the database settings,
    site language(s), what Django features need to be enabled, and so on. Various
    sections of this file will be explained as we progress with building our application
    during the next chapters, but for this chapter, we will only see how to enter
    the database settings.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`settings.py`：这是您的Django项目的主要配置文件。在其中，您可以指定各种选项，包括数据库设置、站点语言、需要启用的Django功能等。在接下来的章节中，我们将解释此文件的各个部分，但在本章中，我们只会看到如何输入数据库设置。'
- en: '`url.py`: This is another configuration file. You can think of it as a mapping
    between the URLs and Python functions that handle them. This file is one of Django''s
    powerful features, and we will see how to utilize it in the next chapter.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url.py`：这是另一个配置文件。您可以将其视为URL和处理它们的Python函数之间的映射。这个文件是Django的强大功能之一，我们将在下一章中看到如何利用它。'
- en: When we start writing code for our application, we will create new files inside
    the project's folder; so the folder also serves as a container for our code.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始为应用程序编写代码时，我们将在项目文件夹内创建新文件；因此该文件夹也用作我们代码的容器。
- en: Now that you have a general idea of the structure of a Django project, let's
    configure our database system.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经对Django项目的结构有了一个大致的了解，让我们配置我们的数据库系统。
- en: Setting up the database
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置数据库
- en: In this section, we will start working with setting up the database with various
    options and configuration files.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开始使用各种选项和配置文件设置数据库。
- en: 'Okay, now that we have a source code editor ready, let''s open the `settings.py`
    file in the project folder and see what it contains:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们已经准备好了源代码编辑器，让我们打开项目文件夹中的`settings.py`文件并查看其内容：
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you may have already noticed, the file contains a number of variables that
    control various aspects of the application. Entering a new value for a variable
    is as simple as doing a Python assignment statement. In addition, the file is
    extensively commented, and comments explain what variables control in detail.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，该文件包含许多控制应用程序各个方面的变量。输入变量的新值就像执行Python赋值语句一样简单。此外，该文件有大量注释，注释详细解释了变量的控制内容。
- en: What concerns us now is configuring the database. As mentioned before, Django
    supports several database systems, so first of all, we have to specify what database
    system we are going to use. This is controlled by the `DATABASE_ENGINE` variable.
    If you have SQLite installed, set the variable to `'sqlite3'`. Otherwise, pick
    the value that matches your database engine from the comment next to the variable
    name.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们关注配置数据库。如前所述，Django支持多个数据库系统，因此首先，我们必须指定我们将要使用的数据库系统。这由`DATABASE_ENGINE`变量控制。如果您已安装SQLite，请将该变量设置为`'sqlite3'`。否则，请从变量名称旁边的注释中选择与您的数据库引擎匹配的值。
- en: 'Next is the database name. Keep the database name default, as it is. On the
    other hand, if you are using a database server, you need to do the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是数据库名称。保持数据库名称默认即可。另一方面，如果您正在使用数据库服务器，您需要执行以下操作：
- en: 'Enter the relevant information for the database: username, password, host,
    and port. (SQLite does not require any of these.)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入数据库的相关信息：用户名、密码、主机和端口。（SQLite不需要这些。）
- en: Create the actual database inside the database server, as Django won't do this
    by itself. In MySQL, for example, this is done through the `mysql` command line
    utility or phpMyAdmin.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据库服务器内创建实际数据库，因为Django不会自行执行此操作。例如，在MySQL中，可以通过`mysql`命令行实用程序或phpMyAdmin来执行此操作。
- en: 'Finally, we will tell Django to populate the configured database with tables.
    Although we haven''t created any tables for our data yet (and won''t do so until
    the next chapter), Django requires several tables in the database for some of
    its features to function properly. Creating these tables is as easy as issuing
    the following command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将告诉Django使用表填充已配置的数据库。虽然我们尚未为我们的数据创建任何表（并且在下一章之前也不会这样做），但Django需要数据库中的一些表才能正常运行一些功能。创建这些表就像发出以下命令一样简单：
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If everything is correct, status messages will scroll on the screen, indicating
    that tables are being created. When prompted for the superuser account, enter
    your preferred username, email, and password. If, on the other hand, the database
    is misconfigured, an error message will be printed to help you troubleshoot the
    issue.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正确，状态消息将在屏幕上滚动，指示正在创建表。在提示输入超级用户帐户时，请输入您首选的用户名、电子邮件和密码。另一方面，如果数据库配置错误，将打印错误消息以帮助您排除问题。
- en: With this done, we are ready to launch our application.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，我们就可以启动我们的应用程序了。
- en: Tip
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Using python manage.py**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用python manage.py**'
- en: When running a command that starts with `python manage.py`, make sure that you
    are currently in the project's directory where `manage.py` is located.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以`python manage.py`开头的命令时，请确保您当前位于项目的目录中，其中包含`manage.py`。
- en: Launching the development server
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动开发服务器
- en: As discussed before, Django comes with a lightweight web server for developing
    and testing applications. This server is pre-configured to work with Django, and,
    more importantly, it restarts whenever you modify the code.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Django带有一个轻量级的Web服务器，用于开发和测试应用程序。该服务器预先配置为与Django一起工作，并且更重要的是，每当您修改代码时，它都会重新启动。
- en: 'To start the server, run the following command:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动服务器，请运行以下命令：
- en: '[PRE16]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, open your browser and navigate to this URL: `http://localhost:8000/`.
    You should see a welcome message, as shown in the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开浏览器，导航至以下URL：`http://localhost:8000/`。您应该会看到欢迎消息，如下截图所示：
- en: '![Launching the development server](img/image00274.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![启动开发服务器](img/image00274.jpeg)'
- en: Congratulations! You have created and configured your first Django project.
    This project will be the base on top of which we will build our bookmarking application.
    During the next chapter, we will start developing our application, and the page
    displayed by the web server will be replaced by something we wrote ourselves!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经创建并配置了您的第一个Django项目。这个项目将是我们构建书签应用程序的基础。在下一章中，我们将开始开发我们的应用程序，网页服务器显示的页面将被我们自己编写的内容替换！
- en: Note
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'As you may have noticed, the web server runs on port 8000 by default. If you
    want to change the port, you can specify it on the command line by using the following
    command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，默认情况下，Web服务器在端口8000上运行。如果要更改端口，可以使用以下命令在命令行上指定：
- en: '[PRE17]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Also, the development server is only accessible from the local machine by default.
    If you want to access the development server from another machine on your network,
    use the following command-line arguments:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，默认情况下，开发服务器只能从本地机器访问。如果您想从网络上的另一台机器访问开发服务器，请使用以下命令行参数：
- en: '[PRE18]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接通过电子邮件接收文件。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have prepared our development environment, created our first
    project, and learned how to launch the Django development server. We learned how
    to install Django and virtualenv in Windows and Linux. We learned the basic mechanisms
    of how Django settings work and even learned how to install a database.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们已经准备好了我们的开发环境，创建了我们的第一个项目，并学会了如何启动Django开发服务器。我们学会了如何在Windows和Linux中安装Django和virtualenv。我们学习了Django设置的基本机制，甚至学会了如何安装数据库。
- en: We are now ready to start building our social bookmarking application! The next
    chapter takes you through a tour of the main Django components and develops a
    working prototype for our bookmark sharing application. It's going to be a fun
    chapter with many new things to learn, so keep reading!
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备开始构建我们的社交书签应用程序！下一章将带您了解主要的Django组件，并为我们的书签分享应用程序开发一个工作原型。这将是一个有趣的章节，有很多新东西要学习，所以请继续阅读！
