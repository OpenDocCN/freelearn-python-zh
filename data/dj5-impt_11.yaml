- en: <st c="0">11</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">11</st>
- en: <st c="3">Implementing Order and Item Models</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="3">实现订单和项目模型</st>
- en: <st c="38">In the previous chapter, we implemented the shopping cart system
    and allowed users to add movies to the cart.</st> <st c="149">To enable users
    to purchase movies, we need to store additional information in the database, specifically
    to store order and item information.</st> <st c="292">In this chapter, we will
    implement the order and item models and establish a connection</st> <st c="380">between
    them.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38">在前一章中，我们实现了购物车系统，并允许用户将电影添加到购物车中。</st> <st c="149">为了使用户能够购买电影，我们需要在数据库中存储额外的信息，特别是存储订单和项目信息。</st>
    <st c="292">在本章中，我们将实现订单和项目模型，并建立它们之间的连接。</st> <st c="380">。</st>
- en: <st c="393">In this chapter, we will be covering the</st> <st c="435">following
    topics:</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="393">在本章中，我们将涵盖以下主题：</st> <st c="435">。</st>
- en: <st c="452">Analyzing</st> <st c="463">store invoices</st>
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="452">分析</st> <st c="463">商店发票</st>
- en: <st c="477">Creating the</st> <st c="491">order model</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="477">创建</st> <st c="491">订单模型</st>
- en: <st c="502">Creating the</st> <st c="516">item model</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="502">创建</st> <st c="516">项目模型</st>
- en: <st c="526">Recapping the Movies Store</st> <st c="554">class diagram</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="526">回顾电影商店</st> <st c="554">类图</st>
- en: <st c="567">By the end of the chapter, we will have the complete structure for
    storing purchase information.</st> <st c="665">Additionally, we will recap the
    class diagram and examine the relationship between the Django models and the classes
    in the</st> <st c="789">class diagram.</st>
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="567">到本章结束时，我们将拥有存储购买信息的完整结构。</st> <st c="665">此外，我们将回顾类图，并检查Django模型与类图中的类之间的关系。</st>
    <st c="789">。</st>
- en: <st c="803">Technical requirements</st>
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="803">技术要求</st>
- en: <st c="826">In this chapter, we will be using</st> **<st c="861">Python 3.10+</st>**<st
    c="873">. Additionally, we will be using the</st> **<st c="910">VS Code</st>**
    <st c="917">editor in this book, which you can download</st> <st c="962">from</st>
    [<st c="967">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="997">.</st>
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="826">在本章中，我们将使用</st> **<st c="861">Python 3.10+</st>**<st c="873">。此外，我们将使用本书中的</st>
    **<st c="910">VS Code</st>** <st c="917">编辑器，您可以从</st> <st c="962">以下链接</st> [<st
    c="967">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="997">下载。</st>
- en: <st c="998">The code for this chapter is located</st> <st c="1036">at</st> [<st
    c="1039">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter11/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter11/moviesstore)<st
    c="1147">.</st>
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="998">本章的代码位于</st> <st c="1036">以下链接</st> [<st c="1039">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter11/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter11/moviesstore)<st
    c="1147">。</st>
- en: <st c="1148">The CiA video for this chapter can be found</st> <st c="1193">at</st>
    [<st c="1196">https://packt.link/eQzNG</st>](https://packt.link/eQzNG)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1148">本章的CiA视频可在以下链接找到</st> <st c="1193">以下链接</st> [<st c="1196">https://packt.link/eQzNG</st>](https://packt.link/eQzNG)
- en: <st c="1220">Analyzing store invoices</st>
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1220">分析商店发票</st>
- en: <st c="1245">If you purchase something in a</st> <st c="1277">modern store,
    it is almost certain that you will receive an invoice.</st> <st c="1346">Different
    stores manage invoices with varying information, but in most cases, you will find
    the same essential information.</st> *<st c="1470">Figure 11</st>**<st c="1479">.1</st>*
    <st c="1481">shows a simple invoice.</st> <st c="1506">We will use this as a blueprint
    to design and implement the Django models that we will use to store the</st> <st
    c="1610">purchase information.</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1245">如果你在现代商店购买东西，你几乎肯定会收到一张发票。</st> <st c="1277">不同的商店以不同的信息管理发票，但在大多数情况下，你都会找到相同的基本信息。</st>
    *<st c="1470">图11</st>**<st c="1479">.1</st>* <st c="1481">显示了一张简单的发票。</st> <st
    c="1506">我们将以此作为蓝图来设计和实现我们将用于存储购买信息的Django模型。</st> <st c="1610">。</st>
- en: '![Figure 11.1 – Example of a simple invoice](img/B22457_11_1.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图11.1 – 简单发票的示例](img/B22457_11_1.jpg)'
- en: <st c="1768">Figure 11.1 – Example of a simple invoice</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1768">图11.1 – 简单发票的示例</st>
- en: <st c="1809">Let’s analyze the invoice shown in</st> *<st c="1845">Figure 11</st>**<st
    c="1854">.1</st>* <st c="1856">to understand the kind of information we need to
    store for purchase (based on orders</st> <st c="1942">and items).</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1809">让我们分析图11*<st c="1845">.1</st>**<st c="1854">中显示的发票，以了解我们需要存储哪些购买信息（基于订单和项目）。</st>
- en: <st c="1953">We must store the following information for</st> <st c="1998">the
    order:</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1953">我们必须为订单存储以下信息：</st> <st c="1998">：</st>
- en: '**<st c="2008">ID</st>**<st c="2011">: To uniquely identify each order.</st>
    <st c="2047">In the previous figure, it is represented</st> <st c="2089">by</st>
    **<st c="2092">#1</st>**<st c="2094">.</st>'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="2008">ID</st>**<st c="2011">：用于唯一标识每个订单。</st> <st c="2047">在先前的图中，它表示为</st>
    **<st c="2092">#1</st>**<st c="2094">。</st>'
- en: '**<st c="2095">Date</st>**<st c="2100">: To identify the date on which the
    order was completed.</st> <st c="2158">In the previous figure, it is represented</st>
    <st c="2200">by</st> **<st c="2203">2024-04-22</st>**<st c="2213">.</st>'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="2095">日期</st>**<st c="2100">：标识订单完成的日期。</st> <st c="2158">在先前的图中，它表示为</st>
    **<st c="2203">2024-04-22</st>**<st c="2213">。</st>'
- en: '**<st c="2214">Total</st>**<st c="2220">: To identify the total amount of the
    order.</st> <st c="2266">In the previous figure, it is represented</st> <st c="2308">by</st>
    **<st c="2311">$50</st>**<st c="2314">.</st>'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="2214">总计</st>**<st c="2220">：标识订单的总金额。</st> <st c="2266">在先前的图中，它表示为</st>
    **<st c="2311">$50</st>**<st c="2314">。</st>'
- en: '**<st c="2315">User</st>**<st c="2320">: To identify the user who made the
    purchase.</st> <st c="2367">In the previous figure, it is represented by</st>
    **<st c="2412">1 -</st>** **<st c="2416">daniel</st>**<st c="2422">.</st>'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="2315">用户</st>**<st c="2320">：标识进行购买的用户。</st> <st c="2367">在先前的图中，它表示为</st>
    **<st c="2412">1 -</st>** **<st c="2416">daniel</st>**<st c="2422">。</st>'
- en: <st c="2423">An order is composed of items, represented as the internal table
    in</st> *<st c="2492">Figure 11</st>**<st c="2501">.1</st>*<st c="2503">. We must
    store the following information for</st> <st c="2549">each item:</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2423">一个订单由项目组成，表示为图11*<st c="2492">.1</st>**<st c="2501">.1</st>*<st
    c="2503">.我们必须为每个项目存储以下信息：</st> <st c="2549">：</st>
- en: '**<st c="2559">ID</st>**<st c="2562">: To uniquely identify each item.</st>
    <st c="2597">In the previous figure, the ID of the first item is represented</st>
    <st c="2661">by</st> **<st c="2664">1</st>**<st c="2665">.</st>'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="2559">ID</st>**<st c="2562">：用于唯一标识每个项目。</st> <st c="2597">在先前的图中，第一件商品的ID表示为</st>
    **<st c="2664">1</st>**<st c="2665">。</st>'
- en: '**<st c="2666">Quantity</st>**<st c="2675">: To specify the quantity of the
    movie the user wants to purchase.</st> <st c="2743">In the previous example, the
    quantity of the first item is represented</st> <st c="2814">by</st> **<st c="2817">2</st>**<st
    c="2818">.</st>'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="2666">数量</st>**<st c="2675">：指定用户想要购买的电影数量。</st> <st c="2743">在先前的示例中，第一件商品的数量表示为</st>
    <st c="2814">为</st> **<st c="2817">2</st>**<st c="2818">。</st>'
- en: '**<st c="2819">Price</st>**<st c="2825">: To specify the</st> <st c="2842">price
    of the movie at which the user purchased the item.</st> <st c="2900">In the previous
    example, the price of the first item is represented</st> <st c="2968">by</st>
    **<st c="2971">12</st>**<st c="2973">.</st>'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="2819">价格</st>**<st c="2825">：指定用户购买商品时的电影价格。</st> <st c="2900">在先前的示例中，第一件商品的价格表示为</st>
    <st c="2968">为</st> **<st c="2971">12</st>**<st c="2973">。</st>'
- en: '**<st c="2974">Movie</st>**<st c="2980">: To specify the movie to which the
    item is linked.</st> <st c="3033">In the previous example, the linked movie of
    the first item is represented by</st> **<st c="3111">1 -</st>** **<st c="3115">Inception</st>**<st
    c="3124">.</st>'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="2974">电影</st>**<st c="2980">：指定与项目链接的电影。</st> <st c="3033">在先前的示例中，第一件商品的链接电影表示为</st>
    **<st c="3111">1 -</st>** **<st c="3115">Inception</st>**<st c="3124">。</st>'
- en: '**<st c="3125">Order</st>**<st c="3131">: To specify the order to which the
    item is linked.</st> <st c="3184">In the previous example, the linked order of
    the first item is represented</st> <st c="3259">by</st> **<st c="3262">#1</st>**<st
    c="3264">.</st>'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="3125">订单</st>**<st c="3131">：指定与项目链接的订单。</st> <st c="3184">在先前的示例中，第一件商品的链接订单表示为</st>
    **<st c="3262">#1</st>**<st c="3264">。</st>'
- en: <st c="3265">Now that we have grasped the functioning of these simple invoices,
    let’s proceed to create the</st> <st c="3361">appropriate models.</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3265">现在我们已经掌握了这些简单发票的功能，让我们继续创建</st> <st c="3361">适当的模型。</st>
- en: <st c="3380">Creating the order model</st>
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="3380">创建订单模型</st>
- en: <st c="3405">To store the purchase information, we</st> <st c="3444">need to
    start by creating an Order Django model.</st> <st c="3493">The following are the
    three steps for storing the</st> <st c="3543">purchase information:</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3405">为了存储购买信息，我们</st> <st c="3444">需要首先创建一个Order Django模型。</st> <st
    c="3493">以下是为存储购买信息所需的三个步骤：</st>
- en: <st c="3564">Create the</st> <st c="3576">Order model.</st>
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3564">创建订单模型。</st>
- en: <st c="3588">Apply migrations.</st>
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3588">应用迁移。</st>
- en: <st c="3606">Add the order model to the</st> <st c="3634">admin panel.</st>
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3606">将订单模型添加到</st> `<st c="3634">管理面板。</st>`
- en: <st c="3646">Let’s go through them</st> <st c="3669">in detail.</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3646">让我们详细地</st> `<st c="3669">了解它们。</st>`
- en: <st c="3679">Creating the Order model</st>
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="3679">创建订单模型</st>
- en: <st c="3704">We will start creating the Order</st> <st c="3737">model.</st>
    <st c="3745">We will create this model inside the</st> <st c="3782">cart app.</st>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3704">我们将开始创建</st> `<st c="3737">Order</st>` <st c="3745">模型。</st> <st
    c="3745">我们将在这个</st> `<st c="3782">cart app</st>` <st c="3782">中创建这个模型。</st>
- en: <st c="3791">In</st> `<st c="3795">/cart/models.py</st>` <st c="3810">file,
    add the following</st> <st c="3835">in</st> *<st c="3838">bold</st>*<st c="3842">:</st>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3791">在</st> `<st c="3795">/cart/models.py</st>` <st c="3810">文件中，添加以下</st>
    `<st c="3835">在</st> **<st c="3838">粗体</st>**<st c="3842">：</st>`
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="4186">Let’s explain the</st> <st c="4205">previous code:</st>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4186">让我们解释一下</st> `<st c="4205">之前的代码：</st>`
- en: <st c="4219">We import the</st> `<st c="4234">User</st>` <st c="4238">model
    from Django’s</st> `<st c="4259">django.contrib.auth.models</st>` <st c="4285">module.</st>
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4219">我们从 Django 的</st> `<st c="4234">User</st>` <st c="4238">模型中导入</st>
    `<st c="4259">django.contrib.auth.models</st>` <st c="4285">模块。</st>
- en: <st c="4293">We define a Python class named</st> `<st c="4325">Order</st>`<st
    c="4330">, which inherits from</st> `<st c="4352">models.Model</st>`<st c="4364">.
    This means that</st> `<st c="4382">Order</st>` <st c="4387">is a Django</st> <st
    c="4400">model class.</st>
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4293">我们定义了一个名为</st> `<st c="4325">Order</st>`<st c="4330">的 Python 类，它继承自</st>
    `<st c="4352">models.Model</st>`<st c="4364">。这意味着</st> `<st c="4382">Order</st>`
    <st c="4387">是一个 Django</st> `<st c="4400">模型类。</st>`
- en: <st c="4412">Inside the</st> `<st c="4424">Order</st>` <st c="4429">class, we
    define</st> <st c="4447">several fields:</st>
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4412">在</st> `<st c="4424">Order</st>` <st c="4429">类中，我们定义了</st> `<st
    c="4447">几个字段：</st>`
- en: '`<st c="4462">id</st>`<st c="4465">: This is an</st> `<st c="4479">AutoField</st>`<st
    c="4488">, which automatically increments its value for each new record added
    to the database.</st> <st c="4574">The</st> `<st c="4578">primary_key=True</st>`
    <st c="4594">parameter specifies that this field is the primary key for the table,
    uniquely identifying</st> <st c="4686">each record.</st>'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="4462">id</st>`<st c="4465">：这是一个</st> `<st c="4479">AutoField</st>`<st
    c="4488">，它会自动为数据库中添加的每个新记录增加其值。</st> <st c="4574">`<st c="4578">primary_key=True</st>`
    <st c="4594">`参数指定这个字段是表的键，唯一标识</st> `<st c="4686">每个记录。</st>`'
- en: '`<st c="4698">total</st>`<st c="4704">: This is a</st> `<st c="4717">IntegerField</st>`<st
    c="4729">, which represents the total amount of the order.</st> <st c="4779">It
    stores</st> <st c="4789">integer values.</st>'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="4698">total</st>`<st c="4704">：这是一个</st> `<st c="4717">IntegerField</st>`<st
    c="4729">，它表示订单的总金额。</st> <st c="4779">它存储整数值。</st>'
- en: '`<st c="4804">date</st>`<st c="4809">: This is a</st> `<st c="4822">DateTimeField</st>`
    <st c="4835">, which represents the date and time when the order was created.</st>
    `<st c="4900">auto_now_add=True</st>` <st c="4917">ensures that the date and time
    are automatically set to the current date and time when the order</st> <st c="5015">is
    created.</st>'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="4804">date</st>`<st c="4809">：这是一个</st> `<st c="4822">DateTimeField</st>`
    <st c="4835">，它表示订单创建的日期和时间。</st> `<st c="4900">auto_now_add=True</st>` <st c="4917">确保在创建订单时自动将日期和时间设置为当前日期和时间。</st>'
- en: '`<st c="5026">user</st>`<st c="5031">: This is a foreign key relationship to
    the</st> `<st c="5076">User</st>` <st c="5080">model, which establishes a many-to-one
    relationship between orders and users.</st> <st c="5159">It means that each order
    is associated with a single user, and each user can have multiple orders.</st>
    `<st c="5258">on_delete=models.CASCADE</st>` <st c="5282">specifies that if the
    related user is deleted, the associated orders will also</st> <st c="5362">be
    deleted.</st>'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="5026">user</st>`<st c="5031">：这是一个与</st> `<st c="5076">User</st>` <st
    c="5080">模型的</st> `<st c="5080">外键关系，它建立了订单和用户之间的多对一关系。</st> <st c="5159">这意味着每个订单都与单个用户相关联，每个用户可以有多个订单。</st>
    `<st c="5258">on_delete=models.CASCADE</st>` <st c="5282">指定如果相关用户被删除，相关的订单也将</st>
    `<st c="5362">被删除。</st>`'
- en: '`<st c="5373">__str__</st>` <st c="5381">is a method that</st> <st c="5398">returns
    a string representation of the order.</st> <st c="5445">In this case, it returns
    a string composed of the order ID and the username of the user who placed</st>
    <st c="5544">the order.</st>'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="5373">__str__</st>` <st c="5381">是一个返回订单字符串表示的方法。</st> <st c="5445">在这种情况下，它返回一个由订单
    ID 和下订单用户的用户名组成的字符串。</st>'
- en: <st c="5554">Applying migrations</st>
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="5554">应用迁移</st>
- en: <st c="5574">Now that we have</st> <st c="5592">created the</st> `<st c="5604">Order</st>`
    <st c="5609">model, let’s update our database by running one of the following
    commands, depending on your</st> <st c="5703">operating system:</st>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5574">现在我们已经创建了</st> <st c="5592">订单</st> <st c="5609">模型，根据您的</st> <st
    c="5703">操作系统</st>，运行以下命令之一来更新数据库：</st>
- en: <st c="5720">For macOS,</st> <st c="5732">run this:</st>
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5720">对于 macOS 系统，</st> <st c="5732">运行以下命令：</st>
- en: '[PRE1]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="5800">For Windows,</st> <st c="5814">run this:</st>
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5800">对于 Windows 系统，</st> <st c="5814">运行以下命令：</st>
- en: '[PRE2]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="5880">Now, you should see something</st> <st c="5911">like this:</st>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5880">现在，您应该会看到以下内容：</st> <st c="5911">（如图 11.2 所示）</st>
- en: '![Figure 11.2 – Applying the order migration](img/B22457_11_2.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – 应用订单迁移](img/B22457_11_2.jpg)'
- en: <st c="6015">Figure 11.2 – Applying the order migration</st>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6015">图 11.2 – 应用订单迁移</st>
- en: <st c="6057">Adding the order model to the admin panel</st>
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="6057">将订单模型添加到管理面板</st>
- en: <st c="6099">To add the</st> `<st c="6111">Order</st>` <st c="6116">model to
    admin, go to</st> `<st c="6139">/cart/admin.py</st>` <st c="6153">and register
    it by adding</st> <st c="6179">the following</st> <st c="6194">in</st> *<st c="6197">bold</st>*<st
    c="6201">:</st>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6099">要将</st> `<st c="6111">订单</st>` <st c="6116">模型添加到管理界面，请前往</st>
    `<st c="6139">/cart/admin.py</st>` <st c="6153">并按以下步骤注册它，添加以下</st> <st c="6179">内容</st>
    <st c="6194">（以粗体显示）：</st>
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: from django.db import models
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从 django.db 导入 models
- en: 'from django.contrib.auth.models import User <st c="7329">from movies.models
    import Movie</st> class Order(models.Model):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '从 django.contrib.auth.models 导入 User <st c="7329">从 movies.models 导入 Movie</st>
    class Order(models.Model):'
- en: … <st c="7390">class Item(models.Model):</st>
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: … <st c="7390">class Item(models.Model):</st>
- en: '**<st c="7415">id = models.AutoField(primary_key=True)</st>**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="7415">id = models.AutoField(primary_key=True)</st>**'
- en: '**<st c="7455">price = models.IntegerField()</st>**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="7455">价格 = models.IntegerField()</st>**'
- en: '**<st c="7485">quantity = models.IntegerField()</st>**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="7485">数量 = models.IntegerField()</st>**'
- en: '**<st c="7518">order = models.ForeignKey(Order,</st>**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="7518">订单 = models.ForeignKey(Order,</st>**'
- en: '**<st c="7551">on_delete=models.CASCADE)</st>**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="7551">on_delete=models.CASCADE)</st>**'
- en: '**<st c="7577">movie = models.ForeignKey(Movie,</st>**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="7577">电影 = models.ForeignKey(Movie,</st>**'
- en: '**<st c="7610">on_delete=models.CASCADE)</st>**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="7610">on_delete=models.CASCADE)</st>**'
- en: '**<st c="7636">def __str__(self):</st>**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="7636">def __str__(self):</st>**'
- en: '**<st c="7655">return str(self.id) + '' - '' + self.movie.name</st>**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="7655">return str(self.id) + '' - '' + self.movie.name</st>**'
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="8981">python3 manage.py makemigrations</st>
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="8981">python3 manage.py makemigrations</st>
- en: <st c="9014">python3 manage.py migrate</st>
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="9014">python3 manage.py migrate</st>
- en: '[PRE5]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="9063">python manage.py makemigrations</st>
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="9063">python manage.py makemigrations</st>
- en: <st c="9095">python manage.py migrate</st>
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="9095">python manage.py migrate</st>
- en: '[PRE6]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: from django.contrib import admin
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从 django.contrib 导入 admin
- en: 'from .models import Order<st c="9527">, Item</st> admin.site.register(Order)
    <st c="9675">/admin</st>. The item model will now appear (as shown in *<st c="9727">Figure
    11</st>**<st c="9736">.5</st>*):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 从 .models 导入 Order<st c="9527">, Item</st> admin.site.register(Order) <st c="9675">/admin</st>.
    现在项目模型将显示出来（如图 *<st c="9727">图 11</st>**<st c="9736">.5</st>* 所示）：
- en: '![Figure 11.5 – Admin page with items available](img/B22457_11_5.jpg)'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 11.5 – 可用项目的管理页面](img/B22457_11_5.jpg)'
- en: <st c="10038">Figure 11.5 – Admin page with items available</st>
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="10038">图 11.5 – 可用项目的管理页面</st>
- en: <st c="10083">Now we have completed the data</st> <st c="10115">structure required
    to make purchases.</st> <st c="10153">But before proceeding with the purchase
    process, let’s recap how our models relate to the project’s</st> <st c="10253">class
    diagram.</st>
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经完成了进行购买所需的数据结构。</st> <st c="10115">在继续购买流程之前，让我们回顾一下我们的模型与项目</st> <st
    c="10153">类图之间的关系。</st>
- en: <st c="10267">Recapping the Movies Store class diagram</st>
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="10267">回顾电影商店类图</st>
- en: <st c="10308">The class diagram of the Movies Store that we designed in</st>
    [*<st c="10367">Chapter 1</st>*](B22457_01.xhtml#_idTextAnchor014) <st c="10376">served
    as a blueprint for designing the</st> <st c="10417">code of the Movies Store.</st>
    <st c="10443">We have already implemented all the models required to complete
    the project code.</st> <st c="10525">So, let’s quickly recap this relationship
    between models</st> <st c="10582">and classes.</st>
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="10308">我们在</st> [*<st c="10367">第 1 章</st>*](B22457_01.xhtml#_idTextAnchor014)
    <st c="10376">中设计的电影商店类图是设计电影商店代码的蓝图。</st> <st c="10417">我们已经实现了完成项目代码所需的所有模型。</st>
    <st c="10443">因此，让我们快速回顾一下模型与类之间的这种关系。</st> <st c="10525">和类。</st>
- en: '*<st c="10594">Figure 11</st>**<st c="10604">.6</st>* <st c="10606">shows the
    class diagram, highlighting the locations where we implemented the corresponding</st>
    <st c="10698">Django models:</st>'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*<st c="10594">图11</st>**<st c="10604">.6</st>* `<st c="10606">显示了类图，突出了我们实现相应</st>`
    `<st c="10698">Django模型</st>` 的位置：</st>'
- en: '![Figure 11.6 – Movies Store class diagram, highlighting model locations](img/B22457_11_6.jpg)'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图11.6 – 电影商店类图，突出模型位置](img/B22457_11_6.jpg)'
- en: <st c="11118">Figure 11.6 – Movies Store class diagram, highlighting model locations</st>
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="11118">图11.6 – 电影商店类图，突出模型位置</st>`'
- en: <st c="11188">Let’s analyze the</st> <st c="11207">previous figure:</st>
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="11188">让我们分析一下</st>` `<st c="11207">前面的图：</st>`'
- en: <st c="11223">The</st> `<st c="11228">Movie</st>` <st c="11233">and</st> `<st
    c="11238">Review</st>` <st c="11244">models were implemented inside the</st> `<st
    c="11280">movies</st>` <st c="11286">app.</st>
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="11223">《</st>` `<st c="11228">电影</st>` `<st c="11233">和</st>` `<st
    c="11238">评论</st>` `<st c="11244">模型在</st>` `<st c="11280">movies</st>` `<st c="11286">应用</st>`
    中实现。</st>'
- en: <st c="11291">The</st> `<st c="11296">Order</st>` <st c="11301">and</st> `<st
    c="11306">Item</st>` <st c="11310">models were implemented inside the</st> `<st
    c="11346">cart</st>` <st c="11350">app.</st>
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="11291">《</st>` `<st c="11296">订单</st>` `<st c="11301">和</st>` `<st
    c="11306">项目</st>` `<st c="11310">模型在</st>` `<st c="11346">购物车</st>` `<st c="11350">应用</st>`
    中实现。</st>'
- en: <st c="11355">The</st> `<st c="11360">User</st>` <st c="11364">model was not</st>
    <st c="11378">implemented.</st> <st c="11392">Instead, we took advantage of the
    provided Django built-in model located in the</st> `<st c="11472">admin.contrib.auth</st>`
    <st c="11490">app.</st>
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="11355">《</st>` `<st c="11360">用户</st>` `<st c="11364">模型尚未实现。</st>`
    `<st c="11378">相反，我们利用了位于</st>` `<st c="11472">admin.contrib.auth</st>` `<st c="11490">应用</st>`
    中的Django内置模型。</st>'
- en: <st c="11495">Finally, let’s review how a specific class relates to a model
    (</st>*<st c="11559">Figure 11</st>**<st c="11569">.7</st>*<st c="11571">):</st>
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="11495">最后，让我们回顾一下特定类与模型之间的关系（</st>`*<st c="11559">图11</st>**<st c="11569">.7</st>*<st
    c="11571">）：</st>`'
- en: '`<st c="11582">Review</st>` <st c="11588">class name became a</st> `<st c="11609">Review</st>`
    <st c="11615">Python class.</st> <st c="11630">We inherited from</st> `<st c="11648">models.Model</st>`
    <st c="11660">to define it as a Django</st> <st c="11686">model class.</st>'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="11582">评论</st>` `<st c="11588">类名变成了一个</st>` `<st c="11609">评论</st>`
    `<st c="11615">Python类。</st>` `<st c="11630">我们继承自</st>` `<st c="11648">models.Model</st>`
    `<st c="11660">来定义它为一个Django</st>` `<st c="11686">模型类。</st>`'
- en: '`<st c="11706">id</st>`<st c="11708">,</st> `<st c="11710">comment</st>`<st
    c="11717">, and</st> `<st c="11723">date</st>` <st c="11727">class attributes
    became Python class attributes.</st> <st c="11777">We utilized the</st> `<st c="11793">models</st>`
    <st c="11799">module to utilize available field types similar to those defined
    in the</st> <st c="11872">class diagram.</st>'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="11706">id</st>` `<st c="11708">,</st>` `<st c="11710">comment</st>`
    `<st c="11717">, 和</st>` `<st c="11723">date</st>` `<st c="11727">类属性变成了Python类属性。</st>`
    `<st c="11777">我们利用了</st>` `<st c="11793">models</st>` `<st c="11799">模块来利用类似于在类图中定义的字段类型。</st>`'
- en: '`<st c="11919">Review</st>` <st c="11925">and</st> `<st c="11930">Movie</st>`
    <st c="11935">classes became a Python class attribute.</st> <st c="11977">We utilized
    the</st> `<st c="11993">models.ForeignKey</st>` <st c="12010">method to define
    a foreign key relationship between the</st> <st c="12067">two models.</st>'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="11919">评论</st>` `<st c="11925">和</st>` `<st c="11930">电影</st>` `<st
    c="11935">类变成了Python类属性。</st>` `<st c="11977">我们利用了</st>` `<st c="11993">models.ForeignKey</st>`
    `<st c="12010">方法来定义两个模型之间的外键关系</st>` `<st c="12067">。</st>`'
- en: '`<st c="12111">Review</st>` <st c="12117">and</st> `<st c="12122">User</st>`
    <st c="12126">classes became a Python class attribute.</st> <st c="12168">We utilized
    the</st> `<st c="12184">models.ForeignKey</st>` <st c="12201">method to define
    a foreign key relationship</st> <st c="12246">between the</st> <st c="12258">two
    models.</st>'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="12111">评论</st>` `<st c="12117">和</st>` `<st c="12122">用户</st>` `<st
    c="12126">类变成了Python类属性。</st>` `<st c="12168">我们利用了</st>` `<st c="12184">models.ForeignKey</st>`
    `<st c="12201">方法来定义两个模型之间的外键关系</st>` `<st c="12246">。</st>`'
- en: '![Figure 11.7 – Relationship between a class and a model](img/B22457_11_7.jpg)'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图11.7 – 类与模型之间的关系](img/B22457_11_7.jpg)'
- en: <st c="12531">Figure 11.7 – Relationship between a class and a model</st>
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="12531">图11.7 – 类与模型之间的关系</st>`'
- en: <st c="12585">We have completed all the connections between the class diagram
    and the Django models.</st> <st c="12673">Now, we are ready to enable users to</st>
    <st c="12710">make purchases.</st>
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="12585">我们已经完成了类图和Django模型之间的所有连接。</st>` `<st c="12673">现在，我们准备启用用户进行购买。</st>`'
- en: <st c="12725">Summary</st>
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="12725">总结</st>`'
- en: <st c="12733">In this chapter, we learned how simple invoices work.</st> <st
    c="12788">We created a couple of models (</st>`<st c="12819">Order</st>` <st c="12825">and</st>
    `<st c="12830">Item</st>`<st c="12834">).</st> <st c="12838">These models will
    allow us to store information about the users’ purchases.</st> <st c="12914">We
    recapitulated the process of creating Django models and applying migrations.</st>
    <st c="12994">In the end, we reviewed how class diagrams served as a blueprint
    to create our project models.</st> <st c="13089">In the next chapter, we will
    implement purchase functionality and allow users to view</st> <st c="13175">their
    orders.</st>
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="12733">在本章中，我们学习了简单发票的工作原理。</st> <st c="12788">我们创建了一些模型（</st>`<st c="12819">订单</st>`
    <st c="12825">和</st> `<st c="12830">项目</st>`<st c="12834">）。</st> <st c="12838">这些模型将使我们能够存储有关用户购买信息。</st>
    <st c="12914">我们回顾了创建Django模型和应用迁移的过程。</st> <st c="12994">最后，我们回顾了类图如何作为创建项目模型的蓝图。</st>
    <st c="13089">在下一章中，我们将实现购买功能，并允许用户查看</st> <st c="13175">他们的订单。</st>
- en: '[PRE7]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
