- en: Using Kubernetes to Coordinate Microservices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kubernetes协调微服务
- en: In this chapter, we will talk about the basic concepts behind Kubernetes, a
    tool that allows you to manage multiple containers and coordinate them, thereby
    making the microservices that have been deployed on each container work in unison.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论Kubernetes背后的基本概念，这是一个允许您管理多个容器并协调它们的工具，从而使已部署在每个容器上的微服务协同工作。
- en: This chapter will cover what a container orchestrator is and specific Kubernetes
    nomenclature, such as the differences between a pod, a service, a deployment,
    and so on. We will also learn how to analyze a running cluster and perform other
    common operations so that you can apply them to our microservices example.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖容器编排器的概念以及特定的Kubernetes术语，例如pod、service、deployment等之间的区别。我们还将学习如何分析运行中的集群并执行其他常见操作，以便您可以将它们应用于我们的微服务示例。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Defining the Kubernetes orchestrator
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义Kubernetes编排器
- en: Understanding the different Kubernetes elements
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解不同的Kubernetes元素
- en: Performing basic operations with kubectl
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用kubectl执行基本操作
- en: Troubleshooting a running cluster
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除运行中的集群
- en: By the end of this chapter, you'll know about the basic elements of Kubernetes
    and will be able to perform basic operations. You'll also learn about basic troubleshooting
    skills so that you can detect possible issues.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将了解Kubernetes的基本元素，并能够执行基本操作。您还将学习基本的故障排除技能，以便您可以检测可能的问题。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'If you''re working with macOS or Windows, the default Docker desktop installation
    can start a local Kubernetes cluster. Just ensure that this is enabled in Kubernetes''
    preferences:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是macOS或Windows，默认的Docker桌面安装可以启动本地Kubernetes集群。只需确保在Kubernetes的首选项中启用了此功能：
- en: '![](img/4437849f-7f85-4020-a25b-34dba652aa6b.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4437849f-7f85-4020-a25b-34dba652aa6b.png)'
- en: For Linux, the easiest way to install Kubernetes locally is to use k3s ([https://k3s.io/](https://k3s.io/)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux，本地安装Kubernetes的最简单方法是使用k3s（[https://k3s.io/](https://k3s.io/)）。
- en: k3s is a nod to Kubernetes (that is, k8s) but is a simplified version of it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: k3s是对Kubernetes（即k8s）的一种致敬，但是它是其简化版本。
- en: k3s is a minimalistic installation of Kubernetes that you can use to run a cluster
    contained in a single binary. Check out the installation page ([https://github.com/rancher/k3s/blob/master/README.md](https://github.com/rancher/k3s/blob/master/README.md))
    if you wish to download and run it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: k3s是Kubernetes的一个简化安装，您可以使用它来运行包含在单个二进制文件中的集群。如果您希望下载并运行它，请查看安装页面（[https://github.com/rancher/k3s/blob/master/README.md](https://github.com/rancher/k3s/blob/master/README.md)）。
- en: 'To be able to use the Docker version that''s running inside the k3s cluster,
    we need to use the following code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够使用运行在k3s集群内的Docker版本，我们需要使用以下代码：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Ensure that you install `kubectl` (k3s installs a separate version of it by
    default). The steps to install `kubectl` can be found at [https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/).
    The `kubectl` command controls Kubernetes operations.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 确保安装`kubectl`（k3s默认安装了一个单独的版本）。安装`kubectl`的步骤可以在[https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)找到。`kubectl`命令控制Kubernetes操作。
- en: Check the instructions on the aforementioned page to add Bash completion, which
    will allow us to hit *Tab* to complete some commands.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 检查上述页面上的说明以添加Bash完成，这将允许我们按*Tab*键完成一些命令。
- en: 'If everything has been correctly installed, you should be able to check the
    running pods with the following commands:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切安装正确，您应该能够使用以下命令检查运行中的pod：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note the different namespaces. They are all default ones that were created by
    Kubernetes itself.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意不同的命名空间。它们都是Kubernetes自己创建的默认命名空间。
- en: 'Go to the following page to install the Ingress controller: [https://github.com/kubernetes/ingress-nginx/blob/master/docs/deploy/index.md](https://github.com/kubernetes/ingress-nginx/blob/master/docs/deploy/index.md).
    In Docker desktop, you''ll need to run these two commands:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 转到以下页面安装Ingress控制器：[https://github.com/kubernetes/ingress-nginx/blob/master/docs/deploy/index.md](https://github.com/kubernetes/ingress-nginx/blob/master/docs/deploy/index.md)。在Docker桌面上，您需要运行以下两个命令：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will create an `ingress-nginx` namespace with a controller pod. Kubernetes
    will use that pod to set up the Ingress configuration.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个带有控制器pod的`ingress-nginx`命名空间。Kubernetes将使用该pod来设置Ingress配置。
- en: Now, let's take a look at the advantages of using Kubernetes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看使用Kubernetes的优势。
- en: Defining the Kubernetes orchestrator
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义Kubernetes编排器
- en: Kubernetes is a popular container orchestration tool. It allows us to manage
    and deploy multiple containers that interact with each other in a coordinated
    way. Since each microservice lives in an individual container, as we mentioned
    in [Chapter 1](ddb0a00a-6c5b-4ffe-b403-0f5f9f7a7df2.xhtml), *Making the Move –
    Design, Plan, and Execute*, they can work in unison.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是一种流行的容器编排工具。它允许我们以协调的方式管理和部署多个相互交互的容器。由于每个微服务都存在于单独的容器中，正如我们在[第1章](ddb0a00a-6c5b-4ffe-b403-0f5f9f7a7df2.xhtml)中提到的那样，*进行迁移-设计、计划和执行*，它们可以协同工作。
- en: For a more in-depth introduction to Kubernetes, you can check out the following
    comic, which was released by Scott McCloud: [https://cloud.google.com/kubernetes-engine/kubernetes-comic/](https://cloud.google.com/kubernetes-engine/kubernetes-comic/).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Kubernetes的深入介绍，您可以查看由Scott McCloud发布的以下漫画：[https://cloud.google.com/kubernetes-engine/kubernetes-comic/](https://cloud.google.com/kubernetes-engine/kubernetes-comic/)。
- en: Kubernetes is aimed at production systems. It was designed to be able to control
    big deployments and to abstract most of the infrastructure's details. Every element
    in a Kubernetes cluster is configured programmatically, and Kubernetes itself
    manages where to deploy clusters based on the capacity that's available.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes旨在用于生产系统。它旨在能够控制大规模部署并抽象出大部分基础设施的细节。Kubernetes集群中的每个元素都是以编程方式配置的，Kubernetes本身根据可用的容量来管理集群的部署位置。
- en: Kubernetes can be configured completely using configuration files. This makes
    it possible to replicate clusters, for example, in the event of a full disaster
    that brings down all the physical servers. You can even do this with different
    hardware, where traditional deployments could be extremely difficult.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes可以完全使用配置文件进行配置。这使得在出现完全瘫痪导致所有物理服务器宕机的情况下，可以复制集群成为可能。甚至可以在不同的硬件上进行这样的操作，而传统的部署可能会非常困难。
- en: This example assumes that the data is stored and retrievable; for example, in
    a backup device. Obviously, this may be difficult—disaster recovery always is.
    However, it simplifies a lot of the steps that are required if you wish to replicate
    a cluster.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子假设数据被存储和检索；例如，在备份设备中。显然，这可能很困难——灾难恢复总是如此。然而，它简化了许多如果你希望复制一个集群所需的步骤。
- en: Given that Kubernetes works with containers and makes it very easy to install
    them, there's a big ecosystem of containers ready to add functionality to Kubernetes
    itself. The best example is probably the Kubernetes dashboard ([https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/)),
    a UI that displays an overview of Kubernetes' operations. It isn't installed by
    default, but it can be installed in the same way that you install your services.
    Other examples for such use cases include monitoring and logging. This makes Kubernetes
    very extendable.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于Kubernetes使用容器并且很容易安装它们，有一个庞大的容器生态系统可以为Kubernetes本身添加功能。最好的例子可能是Kubernetes仪表板（[https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/)），一个显示Kubernetes操作概述的用户界面。它不是默认安装的，但可以以与安装服务相同的方式安装。其他用例的例子包括监控和日志记录。这使得Kubernetes非常可扩展。
- en: Comparing Kubernetes with Docker Swarm
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Kubernetes与Docker Swarm进行比较
- en: Kubernetes is not the only orchestrator that's available. As we mentioned in [Chapter
    3](05dd2141-e113-43a2-8bd9-26fb97057913.xhtml), *Build, Run, and Test Your Service
    Using Docker*, there's `docker-compose`. Docker Compose can also orchestrate different
    containers and coordinate them but does so without dealing with multiple servers.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes并不是唯一可用的编排器。正如我们在[第3章](05dd2141-e113-43a2-8bd9-26fb97057913.xhtml)中提到的，还有`docker-compose`。Docker
    Compose也可以编排不同的容器并协调它们，但不涉及多台服务器。
- en: Docker has a native extension of `docker-compose` called Docker Swarm. This
    allows us to use a cluster of machines to run `docker-compose` while reusing the
    same YAML files, but with a few added details to describe how you want them to
    run.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Docker有一个名为Docker Swarm的本机扩展，它允许我们使用一组机器来运行`docker-compose`，同时重用相同的YAML文件，但增加了一些细节来描述你希望它们如何运行。
- en: You can learn more about Docker Swarm in the official documentation ([https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/)).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方文档中了解更多关于Docker Swarm的信息（[https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/)）。
- en: Docker Swarm is easier to set up than Kubernetes, assuming that you have to
    manage the servers. As you extend the functionality of Docker Compose, you'll
    find that it has a low learning curve.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与Kubernetes相比，Docker Swarm更容易设置，假设您必须管理服务器。随着您扩展Docker Compose的功能，您会发现它的学习曲线很低。
- en: On the other hand, Kubernetes is way more powerful and customizable. It has
    a bigger community and a higher pace of innovation. It's also better at handling
    issues. The biggest problem is setting up a cluster, but as we'll see in [Chapter
    7](92e63376-1c9e-4c63-9f7f-c34fa6848ef3.xhtml), *Configuring and Securing the
    Production System*, nowadays, there are easy commercial deployments we can use
    to create a cluster in a few minutes, which lowers the barrier of entry for Kubernetes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Kubernetes更强大和可定制。它有一个更大的社区和更快的创新步伐。它在处理问题方面也更好。最大的问题是设置一个集群，但正如我们将在[第7章](92e63376-1c9e-4c63-9f7f-c34fa6848ef3.xhtml)中看到的，*配置和保护生产系统*，现在有易于商业部署的方式，我们可以用几分钟的时间创建一个集群，这降低了Kubernetes的准入门槛。
- en: This makes Kubernetes (arguably) a better solution when you're dealing with
    migrating from the old system and when looking toward the future. For small deployments,
    or if you need to deploy and manage your own servers, Docker Swarm can be an interesting
    alternative.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得Kubernetes（可以说）在处理从旧系统迁移和展望未来时是更好的解决方案。对于小规模部署，或者如果您需要部署和管理自己的服务器，Docker
    Swarm可能是一个有趣的选择。
- en: To help you move on from using a `docker-compose.yaml` file to using the equivalent
    Kubernetes YAML files, you can use `kompose` ([https://github.com/kubernetes/kompose](https://github.com/kubernetes/kompose)). It
    may be useful to quickly start a Kubernetes cluster and translate the services
    described in the `docker-compose.yaml` file into their equivalent Kubernetes elements,
    but there are always differences between both systems that may need to be tweaked.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您从使用`docker-compose.yaml`文件转移到使用等效的Kubernetes YAML文件，您可以使用`kompose`（[https://github.com/kubernetes/kompose](https://github.com/kubernetes/kompose)）。它可能有助于快速启动一个Kubernetes集群，并将`docker-compose.yaml`文件中描述的服务转换为它们等效的Kubernetes元素，但两个系统之间总是存在差异，可能需要进行调整。
- en: Let's start by describing the specific elements and nomenclature of Kubernetes.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从描述Kubernetes的特定元素和命名方式开始。
- en: Understanding the different Kubernetes elements
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解不同的Kubernetes元素
- en: Kubernetes has its own nomenclature for different elements. We will be using
    the nomenclature often in this book, and the Kubernetes documentation uses them
    as well. Learning about the differences between them is important since some of
    them can be subtle.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes有自己的不同元素的命名方式。我们在本书中经常会使用这些命名方式，Kubernetes文档也在使用它们。了解它们之间的区别很重要，因为其中一些可能是微妙的。
- en: Nodes
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 节点
- en: The main infrastructure elements of Kubernetes are known as **nodes**. A Kubernetes
    cluster is composed of one or more nodes, which are the physical machines (or
    virtual machines) that support the abstraction of the rest of the elements.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes的主要基础设施元素称为**节点**。Kubernetes集群由一个或多个节点组成，这些节点是支持其他元素抽象化的物理机器（或虚拟机器）。
- en: Each node needs to be able to communicate with the others, and they all run
    in a *container runtime—*typically Docker—but they can use other systems, such
    as `rktlet` ([https://github.com/kubernetes-incubator/rktlet](https://github.com/kubernetes-incubator/rktlet)).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 每个节点需要能够与其他节点通信，并且它们都在一个容器运行时中运行 - 通常是Docker，但它们也可以使用其他系统，比如`rktlet`（[https://github.com/kubernetes-incubator/rktlet](https://github.com/kubernetes-incubator/rktlet)）。
- en: The nodes create a network between them that routes all the requests that have
    been addressed to the cluster so that any request that's sent to any node in the
    cluster will be answered adequately. Kubernetes will handle what deployable goes
    to what node, even recovering nodes if they go down or moving them around from
    one node to another if there are resources issues.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 节点之间创建了一个网络，将所有发送到集群的请求路由到适当的节点，因此发送到集群中任何节点的任何请求都将得到充分的回答。Kubernetes将处理哪个可部署元素应该部署到哪个节点，甚至在节点出现问题或资源问题时重新部署节点或将它们从一个节点移动到另一个节点。
- en: Nodes don't necessarily need to be identical, and some degree of control is
    needed when it comes to deploying specific elements in specific nodes, but for
    simplicity, they normally are identical.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 节点不一定需要完全相同，当部署特定元素到特定节点时需要一定程度的控制，但通常情况下它们是相同的。
- en: While nodes are the backbone that supports the cluster, Kubernetes helps in
    abstracting away from specific nodes by defining the desired outcome and letting
    Kubernetes do the heavy lifting of deciding what goes where and being sure that
    the internal network channels' requests are sent to the proper services.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然节点是支持集群的支柱，但Kubernetes通过定义期望的结果并让Kubernetes决定何处放置元素，并确保内部网络通道的请求被发送到适当的服务，帮助抽象化特定节点。
- en: Kubernetes Control Plane
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 控制平面
- en: The Kubernetes Control Plane is where all the processes that Kubernetes uses
    to properly configure a collection of servers as nodes in a Kubernetes cluster
    are kept. Servers allow nodes to connect to each other, allow us to monitor their
    current status, and allows us to make whatever changes are necessary in terms
    of deployment, scale, and so on.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 控制平面是Kubernetes用来正确配置作为Kubernetes集群中节点的一部分的一组服务器的所有过程的地方。服务器允许节点相互连接，允许我们监视它们的当前状态，并允许我们根据部署、规模等方面进行必要的更改。
- en: The node that's responsible for registering and making these changes is called
    the master node. There can be more than one master node.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 负责注册和进行这些更改的节点称为主节点。可以有多个主节点。
- en: All of this control normally runs smoothly behind the scenes. Its network is
    separated from the rest, meaning that a problem at this level won't affect the
    current operation of the cluster, other than us not being able to make changes.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些控制通常在幕后顺利运行。它的网络与其他部分分离，这意味着在这个级别出现问题不会影响集群的当前操作，除了我们无法进行更改。
- en: Kubernetes Objects
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes对象
- en: Kubernetes Objects are abstractions that represent the state of the service
    that's deployed in the cluster. Mainly, they deal with running containers and
    routings for those containers, as well as persistent storage.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes对象是表示部署在集群中的服务状态的抽象。主要涉及运行容器和这些容器的路由，以及持久存储。
- en: 'Let''s take a look at the different elements, from smallest to biggest. This
    list is not exhaustive; check out the Kubernetes documentation for more details:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最小到最大来看不同的元素。这个列表并不详尽；查看Kubernetes文档以获取更多细节：
- en: '**Container**: A single Docker container. These are the building blocks of 
    Kubernetes, but they''re never present on their own.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**：一个单独的Docker容器。这些是Kubernetes的构建块，但它们永远不会单独存在。'
- en: '**Pod: **A basic unit that can be deployed in Kubernetes. A pod is a collection
    of one or more containers that work as a unit, normally from different images.
    Normally, a pod has a single container, but sometimes it may be useful to have
    more. All of the containers in the same pod share the same IP address (the pod
    IP), meaning that a container that accesses a port in `localhost` may be accessing
    a different container instead. This is actually the recommended way of communicating
    with them.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pod：**在Kubernetes中可以部署的基本单元。Pod是一个或多个容器的集合，通常来自不同的镜像。通常，一个Pod只有一个容器，但有时可能有更多的容器是有用的。同一Pod中的所有容器共享相同的IP地址（Pod
    IP），这意味着访问`localhost`端口的容器可能实际上在访问另一个容器。这实际上是与它们通信的推荐方式。'
- en: This will all be a bit strange to you at first, but normally, multi-container
    pods will have a main container and something else that performs auxiliary tasks,
    such as exporting metrics.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这对你来说一开始可能有点奇怪，但通常，多容器Pod将有一个主要容器和执行辅助任务的其他内容，比如导出指标。
- en: '**ConfigMap**: This defines a set of key-value pairs that can be injected into
    pods, typically as environment variables or files. This allows us to share configurations
    between different defined pods, for example, to make all the containers log debug
    information. Note that pods can have their own configuration, but ConfigMaps are
    a convenient way to share the same values so that they are available to different
    pods.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ConfigMap**：这定义了一组可以注入到Pod中的键值对，通常作为环境变量或文件。这允许我们在不同定义的Pod之间共享配置，例如，使所有容器记录调试信息。请注意，Pod可以有自己的配置，但ConfigMaps是一种方便的方式来共享相同的值，以便它们可用于不同的Pod。'
- en: '**Volume**: The files that are inside a container are ephemeral and will be
    lost if the container stops its execution. A volume is a form of persistent storage
    that can be used to maintain data information between starts and to share information
    between containers in a pod.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卷**：容器内的文件是临时的，如果容器停止执行，这些文件将丢失。卷是一种持久存储形式，可用于在启动之间保持数据信息并在pod中的容器之间共享信息。'
- en: As a general principle, try to have as few volumes as possible. Most of your
    applications should be stateless anyway, and any variable data should be stored
    in a database. If containers in the same pod need to communicate, it is better
    to do so through HTTP requests. Remember that any immutable data, such as static
    files, can be stored inside the container image.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个一般原则，尽量减少卷的数量。大多数应用程序本来就应该是无状态的，任何可变数据都应该存储在数据库中。如果同一pod中的容器需要通信，最好通过HTTP请求进行。请记住，任何不可变数据，例如静态文件，都可以存储在容器镜像中。
- en: '**Deployment**: This is a grouping of one or more identical pods. The definition
    of the deployment will state the desired number and Kubernetes will work to get
    to this, according to whatever strategy is defined. The pods in a single deployment
    can be deployed to different nodes, and normally will be. If any of the pods are
    deleted, finished, or have any kind of problem, the deployment will start another
    until the defined number is reached.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：这是一个或多个相同pod的分组。部署的定义将说明所需的数量，Kubernetes将根据定义的策略努力实现这一点。单个部署中的pod可以部署到不同的节点，并且通常会这样做。如果任何pod被删除、完成或出现任何问题，部署将启动另一个，直到达到定义的数量。'
- en: '**Job**: A job creates one or more pods that are expected to finish. While
    a deployment will assume that any pod that''s finishing is a problem and will
    start another, jobs will retry until the proper number of successes is met. The
    finished pods are not deleted, which means we can check their logs. Jobs are one-off
    executions. There are also **Cron Jobs**, which will run at specific times.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**作业**：作业创建一个或多个预期完成的pod。虽然部署会假设任何完成的pod都是问题，并且会启动另一个，但作业会重试，直到满足适当数量的成功。完成的pod不会被删除，这意味着我们可以检查它们的日志。作业是一次性执行。还有**定时作业**，将在特定时间运行。'
- en: '**Service**. Since pods are created and recreated and have different IPs, to
    allow services to access them, a service needs to define the name that other elements
    can use to discover it. In other words, it routes requests to the proper pods.
    Normally, a service and a deployment will be related, with the service making
    the deployment accessible and round-robin between all the defined pods. A service
    can also be used to create an internal name for an external service.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**。由于pod被创建和重新创建，并且具有不同的IP，为了允许服务访问它们，服务需要定义其他元素可以使用的名称来发现它。换句话说，它将请求路由到适当的pod。通常，服务和部署将相关联，服务使部署可访问，并在所有定义的pod之间进行轮询。服务还可以用于为外部服务创建内部名称。'
- en: Services in Kubernetes solve an old problem in distributed systems, that is, *service
    discovery*. This problem occurs when nodes in a cluster need to know where a service
    lives, even if the nodes change; that is, when we add a node or remove it without
    changing the configuration settings of all the nodes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes中的服务解决了分布式系统中的一个旧问题，即*服务发现*。当集群中的节点需要知道服务的位置时，即使节点发生变化，也会出现这个问题；也就是说，当我们添加或删除节点时，不会改变所有节点的配置设置。
- en: Kubernetes will do this automatically if you create a service.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果创建一个服务，Kubernetes将自动执行此操作。
- en: '**Ingress**: While a service is internal, an Ingress is external. It routes
    any external requests to the appropriate service so that they can be served. You
    can define different Ingresses by host name, which ensures that the cluster is
    routed to different services by the target host of the request, or a single Ingress
    is hosted in terms of its path. Internally, an Ingress is implemented as a container
    that implements the Ingress controller, which is `nginx` by default.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**入口**: 虽然服务是内部的，但入口是外部的。它将任何外部请求路由到适当的服务，以便它们可以提供服务。您可以通过主机名定义不同的入口，这样可以确保集群通过请求的目标主机路由到不同的服务，或者根据其路径托管单个入口。在内部，入口被实现为实现入口控制器的容器，默认情况下是`nginx`。'
- en: Depending on your Kubernetes installation, you may need to install the default
    controller. To install the default controller, follow the instructions at [https://github.com/kubernetes/ingress-nginx/blob/master/docs/deploy/index.md](https://github.com/kubernetes/ingress-nginx/blob/master/docs/deploy/index.md).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的Kubernetes安装，您可能需要安装默认控制器。要安装默认控制器，请按照[https://github.com/kubernetes/ingress-nginx/blob/master/docs/deploy/index.md](https://github.com/kubernetes/ingress-nginx/blob/master/docs/deploy/index.md)上的说明操作。
- en: '**Namespace**: This is the definition of a virtual cluster. You can define
    more than one namespace in the same physical Kubernetes cluster. Every name that''s
    defined under a namespace needs to be unique, but another namespace could use
    the same definition. Objects in different namespaces can''t communicate with each
    other internally, but they can do so externally.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名空间**：这是虚拟集群的定义。您可以在同一个物理Kubernetes集群中定义多个命名空间。在命名空间下定义的每个名称都需要是唯一的，但另一个命名空间可以使用相同的定义。不同命名空间中的对象无法在内部进行通信，但可以在外部进行通信。'
- en: Generating different namespaces with very similar definitions can be useful
    if you wish to create different environments for purposes, such as testing, development,
    or demo concepts. The main advantage of Kubernetes is that you can replicate a
    whole system and take advantage of this to create similar environments with small
    changes in terms of details, such as a new version of an environment.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用非常相似的定义生成不同的命名空间可能是有用的，如果您希望为测试、开发或演示概念等目的创建不同的环境。 Kubernetes的主要优势在于您可以复制整个系统，并利用这一点创建具有细节上的小改变的类似环境，例如环境的新版本。
- en: Objects can be found in `.yaml` files, which can be loaded into the system.
    A single `.yaml` file can define multiple objects, for example, a deployment that
    defines pods that contain containers.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对象可以在`.yaml`文件中找到，这些文件可以加载到系统中。单个`.yaml`文件可以定义多个对象，例如，定义包含容器的pod的部署。
- en: 'The following diagram summarizes the different objects that are available:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表总结了可用的不同对象：
- en: '![](img/487eb397-f409-4b5b-9467-33572ff2452a.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/487eb397-f409-4b5b-9467-33572ff2452a.png)'
- en: 'Jobs and volumes are not present, but two services are available: one that
    points toward a deployment and another that points toward an external service.
    The external service is aimed at internal elements and isn''t exposed externally.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 作业和卷不存在，但有两个服务可用：一个指向部署，另一个指向外部服务。外部服务针对内部元素，并且不会向外部公开。
- en: Performing basic operations with kubectl
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用kubectl执行基本操作
- en: By using `kubectl`, we can perform operations against all the different elements.
    We've already had a sneak peek at `get` to get an idea of what elements are available.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`kubectl`，我们可以对所有不同的元素执行操作。我们已经偷偷看了一眼`get`，以了解可用的元素。
- en: For more information and a quick overview of the most common operations that
    are available within `kubectl`, check out the `kubectl` cheat sheet at [https://kubernetes.io/docs/reference/kubectl/cheatsheet/](https://kubernetes.io/docs/reference/kubectl/cheatsheet/).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息和`kubectl`中可用的最常见操作的快速概述，请查看[https://kubernetes.io/docs/reference/kubectl/cheatsheet/](https://kubernetes.io/docs/reference/kubectl/cheatsheet/)上的`kubectl`备忘单。
- en: 'We can use `kubectl` to `create` a new element. For example, to create and
    list namespaces, we can use the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`kubectl`来`create`一个新元素。例如，要创建和列出命名空间，我们可以使用以下代码：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can create various elements, some of which we'll look at throughout this
    book.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建各种元素，其中一些我们将在本书中介绍。
- en: Defining an element
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义元素
- en: 'A namespace is a special case as it doesn''t require any configuration. To
    create a new element, a YAML file needs to be created that describes that element.
    For example, we can create a new pod using the official NGINX image in Docker
    Hub:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间是一个特殊情况，因为它不需要任何配置。要创建新元素，需要创建一个描述该元素的YAML文件。例如，我们可以使用Docker Hub中的官方NGINX镜像创建一个新的pod：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As a minimum, an element should contain the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最低要求，元素应包含以下内容：
- en: The API version of the element.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素的API版本。
- en: The element's type.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素的类型。
- en: A name for the element, as well as a namespace for it.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素的名称，以及其命名空间。
- en: A `spec` section that includes configuration details. For a pod, we need to
    add the necessary containers.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括配置详细信息的`spec`部分。对于pod，我们需要添加必要的容器。
- en: YAML files can be a bit temperamental sometimes, especially when it comes to
    indentation and syntax. You can use a tool such as Kubeval ([https://kubeval.instrumenta.dev/](https://kubeval.instrumenta.dev/))
    to check that the file is correct and that you're following Kubernetes good practices
    before using a file.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: YAML文件有时可能有点反复无常，特别是涉及缩进和语法时。您可以使用诸如Kubeval（[https://kubeval.instrumenta.dev/](https://kubeval.instrumenta.dev/)）之类的工具来检查文件是否正确，并且在使用文件之前遵循Kubernetes良好实践。
- en: 'We will save this file as `example_pod.yml`. We''ll create it by using the
    `apply` command and monitor that it''s running with the following commands:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将此文件保存为`example_pod.yml`。我们将使用`apply`命令创建它，并使用以下命令监视其运行情况：
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note the usage of the `-n` parameter to determine the namespace.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用`-n`参数来确定命名空间。
- en: 'We can now `exec` into the container and run commands inside it. For example,
    to check that the NGINX server is running and serving files, we can use the following
    code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以`exec`进入容器并在其中运行命令。例如，要检查NGINX服务器是否正在运行并提供文件，我们可以使用以下代码：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The pod can be changed in two ways. The first way is to manually run `edit`,
    which opens your predefined Terminal editor so that you can edit the file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: pod可以以两种方式更改。第一种方法是手动运行`edit`，它会打开您预定义的终端编辑器，以便您可以编辑文件：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You''ll see the pod with all its default parameters. This way of changing a
    pod is useful for small tests, but in general, it''s better to change the original
    YAML file so that you can keep track of the changes that occur. For example, we
    can change NGINX so that we''re using a previous version of it:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到带有所有默认参数的pod。这种更改pod的方式对于小型测试很有用，但一般来说，最好更改原始的YAML文件，以便您可以跟踪发生的更改。例如，我们可以更改NGINX，以便我们使用其以前的版本：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, we can `apply` these changes once more, which will restart the pod:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以再次`apply`这些更改，这将重新启动pod：
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Getting more information
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取更多信息
- en: 'The `get` command accepts more configuration. You can retrieve more information
    by using the `wide` output option:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`get`命令接受更多配置。您可以使用`wide`输出选项检索更多信息：'
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you make a change and are interested in the changes that this produces,
    you can use the `-w` argument to watch any change. For example, the following
    code shows the restart results of a pod. This restart has been produced due to
    a change being made to the image of the container:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您进行更改并对此更改产生兴趣，可以使用`-w`参数来监视任何更改。例如，以下代码显示了pod的重启结果。此重启是由于对容器图像进行更改而产生的：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you need more information about a particular element, you can `describe`
    it:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要有关特定元素的更多信息，可以使用`describe`：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This returns a lot of information. The most useful information is normally about
    events, which will return information about the life cycle of the element.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回了大量信息。最有用的信息通常是关于事件的信息，它将返回有关元素的生命周期的信息。
- en: Removing an element
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除元素
- en: 'The `delete` command removes an element and everything under it:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete`命令删除一个元素及其下的所有内容：'
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Be aware that, sometimes, deleting an element will cause it to be recreated.
    This is quite common when pods are created through deployments since the deployment
    will work to get the number of pods to the configured number.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有时删除元素将导致其重新创建。这在通过部署创建pod时很常见，因为部署将努力使pod的数量达到配置的数量。
- en: Troubleshooting a running cluster
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行集群故障排除
- en: The main tools that we can use to troubleshoot issues in Kubernetes are the
    `get` and `describe` commands.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用`get`和`describe`命令来排查Kubernetes中的问题。
- en: 'In my experience, the most common problem with running Kubernetes is that,
    sometimes, certain pods don''t start. The steps for troubleshooting are as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，Kubernetes运行中最常见的问题是，有时某些Pod无法启动。排查步骤如下：
- en: Is the container image correct? A problem with downloading the image will show
    `ErrImagePull`. This could be caused if the image can't be downloaded from the
    registry due to an authentication problem.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器镜像是否正确？下载镜像出现问题将显示`ErrImagePull`。这可能是由于无法从注册表下载镜像导致的身份验证问题。
- en: 'A status of `CrashLoopBackOff` means that the process for the container has
    been interrupted. The pod will try to restart over and over. This is normally
    caused by an underlying issue with the container. Check that the configuration
    is correct. You can check the `stdout` logs of a container by using the following
    command:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CrashLoopBackOff`状态表示容器的进程已中断。Pod将尝试一遍又一遍地重新启动。这通常是由于容器的潜在问题引起的。检查配置是否正确。您可以使用以下命令检查容器的`stdout`日志：'
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Ensure that the container is runnable. Try to run it manually using the following
    command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 确保容器可运行。尝试使用以下命令手动运行它：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: A pod is not exposed externally. This is typically due to a problem in the service
    and/or Ingress that exposes them. You can detect whether a pod is responsive inside
    the cluster by using `exec` to get into another container and then try to access
    the service and the internal IP of the pod, normally using `curl`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pod通常不会被外部暴露。这通常是由于暴露它们的服务和/或Ingress存在问题。您可以通过使用`exec`进入另一个容器，然后尝试访问服务和Pod的内部IP，通常使用`curl`来检测Pod在集群内是否响应。
- en: As we saw previously, `curl` is not installed in containers by default because,
    normally, they only install a minimal set of tools. Don't worry—you can install
    it using whatever package manager your operating system uses, with the advantage
    that, once the container is recycled (which will happen soon enough in a normal
    Kubernetes operation), it won't be using up any space! For the same reason, you
    may need to install it each time you need to debug a problem.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，`curl`通常不会默认安装在容器中，因为它们通常只安装了一组最小的工具。不用担心，您可以使用操作系统的软件包管理器安装它，优点是，一旦容器被回收（在正常的Kubernetes操作中很快就会发生），它就不会占用任何空间！出于同样的原因，每次需要调试问题时可能都需要安装它。
- en: Remember the chain we discussed for Ingress, services, deployments, and pods
    and work from the inside out to find out where the misconfiguration is.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 记住我们讨论过的Ingress、服务、部署和Pod的链条，并从内部向外部查找配置错误的位置。
- en: 'While troubleshooting, remember that pods and containers can be accessed through
    `exec` commands, which will allow us to check running processes, files, and much
    more. This is similar to accessing the Terminal of a physical server. You can
    do this using the following code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在排查问题时，请记住，可以通过`exec`命令访问Pod和容器，这将允许我们检查运行中的进程、文件等。这类似于访问物理服务器的终端。您可以使用以下代码来执行此操作：
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Be careful as the nature of Kubernetes clusters may require you to check a specific
    container in a pod if there is more than one container running in the same pod.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要小心，因为Kubernetes集群的性质可能需要您检查一个Pod中是否有多个容器运行，如果是这样，您可能需要检查特定的容器。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the basic concepts of Kubernetes and how it's
    useful to manage and coordinate multiple containers that contain our microservices.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了Kubernetes的基本概念，以及如何管理和协调包含我们的微服务的多个容器。
- en: First, we introduced what Kubernetes is and some of its high-level advantages.
    Then, we described the different elements that define a cluster in the Kubernetes
    nomenclature. This included both the physical aspects, where the nodes are the
    main defining elements, as the abstract aspects, such as the pods, deployments,
    services, and Ingress, which are the building blocks we need in order to generate
    a working cluster.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们介绍了Kubernetes的概念以及一些高级优势。然后，我们描述了Kubernetes术语中定义集群的不同元素。这既包括物理方面，其中节点是主要的定义元素，也包括抽象方面，如Pod、部署、服务和Ingress，这些是我们生成工作集群所需的构建块。
- en: We described `kubectl` and the common operations we can use to define elements
    and retrieve information through YAML files. We also described some of the common
    problems that can arise when handling a Kubernetes cluster.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们描述了`kubectl`以及我们可以使用的常见操作来定义元素和通过YAML文件检索信息。我们还描述了在处理Kubernetes集群时可能出现的一些常见问题。
- en: In the next chapter, we will define the different options we can use in YAML
    files in order to generate clusters and learn how to generate a Kubernetes cluster
    for our microservices example.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将定义在YAML文件中可以使用的不同选项，以便生成集群，并学习如何为我们的微服务示例生成Kubernetes集群。
- en: Questions
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is a container orchestrator?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是容器编排器？
- en: In Kubernetes, what is a node?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Kubernetes中，什么是节点？
- en: What is the difference between a pod and a container?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pod和容器之间有什么区别？
- en: What is the difference between a job and a pod?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作和Pod之间有什么区别？
- en: When should we add an Ingress?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时应该添加Ingress？
- en: What is a namespace?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是命名空间？
- en: How can we define a Kubernetes element in a file?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在文件中定义一个Kubernetes元素？
- en: What is the difference between the `get` and `describe` commands of `kubectl`?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kubectl`的`get`和`describe`命令有什么区别？'
- en: What does a `CrashLoopBackOff` error indicate?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CrashLoopBackOff`错误表示什么？'
- en: Further reading
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: You can learn more about Kubernetes by reading *Getting Started with Kubernetes
    – Third Edition* ([https://www.packtpub.com/eu/virtualization-and-cloud/getting-started-kubernetes-third-edition](https://www.packtpub.com/eu/virtualization-and-cloud/getting-started-kubernetes-third-edition))
    and *The Complete Kubernetes Guide* ([https://www.packtpub.com/eu/virtualization-and-cloud/complete-kubernetes-guide](https://www.packtpub.com/eu/virtualization-and-cloud/complete-kubernetes-guide)).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过阅读《Kubernetes入门指南-第三版》（[https://www.packtpub.com/eu/virtualization-and-cloud/getting-started-kubernetes-third-edition](https://www.packtpub.com/eu/virtualization-and-cloud/getting-started-kubernetes-third-edition)）和《完整的Kubernetes指南》（[https://www.packtpub.com/eu/virtualization-and-cloud/complete-kubernetes-guide](https://www.packtpub.com/eu/virtualization-and-cloud/complete-kubernetes-guide)）来了解更多关于Kubernetes的信息。
