- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Rendering and Caching Content
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染和缓存内容
- en: In the previous chapter, you used model inheritance and generic relations to
    create flexible course content models. You implemented a custom model field and
    you built a course management system using class-based views. Finally, you created
    a JavaScript drag-and-drop functionality using asynchronous HTTP requests to order
    course modules and their contents.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你使用了模型继承和通用关系来创建灵活的课程内容模型。你实现了一个自定义模型字段，并使用基于类的视图构建了一个课程管理系统。最后，你使用异步HTTP请求创建了一个JavaScript拖放功能，以对课程模块及其内容进行排序。
- en: In this chapter, you will build the functionality to create a student registration
    system and manage student enrollment in courses. You will implement rendering
    of the different types of course content and learn how to cache data using the
    Django cache framework.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将构建创建学生注册系统和管理课程中学生注册的功能。你将实现不同类型课程内容的渲染，并学习如何使用Django缓存框架缓存数据。
- en: Rendering diverse content types is essential in e-learning platforms, where
    courses are typically structured with flexible modules that include a mix of text,
    images, videos, and documents. In this context, caching also becomes crucial.
    Since course content usually remains unchanged for extended periods – days, weeks,
    or even months – caching helps conserve computing power and reduces the need to
    query the database each time students access the same materials. By caching data,
    you not only save system resources but also improve performance when delivering
    content to a large number of students.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在电子学习平台上渲染多种内容类型至关重要，在这些平台上，课程通常由灵活的模块结构组成，这些模块包括文本、图片、视频和文档的混合。在这种情况下，缓存也变得至关重要。由于课程内容通常在较长时间内保持不变——几天、几周甚至几个月——缓存有助于节省计算资源，并减少每次学生访问相同材料时查询数据库的需要。通过缓存数据，你不仅可以节省系统资源，而且还能在向大量学生提供内容时提高性能。
- en: 'In this chapter, you will:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将：
- en: Create public views for displaying course information
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用于显示课程信息的公共视图
- en: Build a student registration system
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建学生注册系统
- en: Manage student enrollment in courses
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理课程中的学生注册
- en: Render diverse content for course modules
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染课程模块的多样化内容
- en: Install and configure Memcached
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置Memcached
- en: Cache content using the Django cache framework
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Django缓存框架缓存内容
- en: Use the Memcached and Redis cache backends
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Memcached和Redis缓存后端
- en: Monitor your Redis server in the Django administration site
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Django管理站点监控您的Redis服务器
- en: Functional overview
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能概述
- en: '*Figure 14.1* shows a representation of the views, templates, and functionalities
    that will be built in this chapter:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14.1* 展示了本章将构建的视图、模板和功能：'
- en: '![](img/B21088_14_01.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_14_01.png)'
- en: 'Figure 14.1: Diagram of functionalities built in Chapter 14'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1：第14章构建的功能图
- en: In this chapter, you will implement the `CourseListView` public view to list
    courses and `CourseDetailView` to show the details of a course. You will implement
    `StudentRegistrationView` to allow students to create user accounts and `StudentCourseListView`
    for students to enroll in courses. You will create the `StudentCourseListView`
    for students to see the list of courses they are enrolled in and the `StudentCourseDetailView`
    to access all the content of a course, organized in the different course modules.
    You will also add a cache to your views using the Django cache framework, first
    with the Memcached backend and then replacing it with the Redis cache backend.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将实现`CourseListView`公共视图以列出课程和`CourseDetailView`以显示课程的详细信息。你将实现`StudentRegistrationView`以允许学生创建用户账户，以及`StudentCourseListView`以让学生注册课程。你将为学生创建`StudentCourseListView`以查看他们已注册的课程列表，以及`StudentCourseDetailView`以访问课程的所有内容，这些内容按不同的课程模块组织。你还将使用Django缓存框架在你的视图中添加缓存，首先使用Memcached后端，然后替换为Redis缓存后端。
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter14](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter14).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在[https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter14](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter14)找到。
- en: All Python modules used in this chapter are included in the `requirements.txt`
    file in the source code that comes along with this chapter. You can follow the
    instructions to install each Python module below or you can install all requirements
    at once with the `python -m pip install -r requirements.txt` command.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有Python模块都包含在本章源代码附带的`requirements.txt`文件中。你可以按照以下说明安装每个Python模块，或者你可以使用`python
    -m pip install -r requirements.txt`命令一次性安装所有依赖。
- en: Displaying the catalog of courses
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示课程目录
- en: 'You might be eager to get to rendering and caching but there are a few items
    we must set up before we can do that. Let’s start with the course catalog. For
    your course catalog, you have to build the following functionalities:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能急于进行渲染和缓存，但在进行这些操作之前，我们还有一些事情需要设置。让我们从课程目录开始。对于你的课程目录，你必须构建以下功能：
- en: List all available courses, optionally filtered by subject
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出所有可用的课程，可选地按主题过滤。
- en: Display a single course overview
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示单个课程概要
- en: 'This will allow students to see all the courses available on the platform and
    enroll in those they are interested in. Edit the `views.py` file of the `courses`
    application and add the following code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许学生看到平台上所有可用的课程，并报名参加他们感兴趣的。编辑`courses`应用的`views.py`文件，并添加以下代码：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the `CourseListView` view. It inherits from `TemplateResponseMixin`
    and `View`. In this view, the following tasks are performed:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`CourseListView`视图。它继承自`TemplateResponseMixin`和`View`。在这个视图中，执行以下任务：
- en: Retrieve all subjects using the ORM’s `annotate()` method with the `Count()`
    aggregation function to include the total number of courses for each subject.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用ORM的`annotate()`方法和`Count()`聚合函数检索所有主题，包括每个主题的课程总数。
- en: Retrieve all available courses, including the total number of modules contained
    in each course.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检索所有可用的课程，包括每个课程包含的模块总数。
- en: If a subject slug URL parameter is given, retrieve the corresponding `subject`
    object and limit the query to the courses that belong to the given subject.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提供了主题slug URL参数，检索相应的`subject`对象，并将查询限制为属于给定主题的课程。
- en: Use the `render_to_response()` method provided by `TemplateResponseMixin` to
    render the objects to a template and return an HTTP response.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`TemplateResponseMixin`提供的`render_to_response()`方法将对象渲染到模板中，并返回一个HTTP响应。
- en: 'Let’s create a detail view for displaying a single course overview. Add the
    following code to the `views.py` file:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个用于显示单个课程概要的详细视图。将以下代码添加到`views.py`文件中：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This view inherits from the generic `DetailView` provided by Django. You specify
    the `model` and `template_name` attributes. Django’s `DetailView` expects a primary
    key (`pk`) or slug URL parameter to retrieve a single object for the given model.
    The view renders the template specified in `template_name`, including the `Course`
    object in the template context variable `object`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视图继承自Django提供的通用`DetailView`。你指定`model`和`template_name`属性。Django的`DetailView`期望一个主键(`pk`)或slug
    URL参数来检索给定模型的单个对象。视图渲染在`template_name`中指定的模板，包括模板上下文变量`object`中的`Course`对象。
- en: 'Edit the main `urls.py` file of the `educa` project and add the following URL
    pattern to it:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`educa`项目的主体`urls.py`文件，并向其中添加以下URL模式：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You add the `course_list` URL pattern to the main `urls.py` file of the project
    because you want to display the list of courses in the URL `http://127.0.0.1:8000/`,
    and all other URLs for the `courses` application have the `/course/` prefix.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你将`course_list` URL模式添加到项目的主体`urls.py`文件中，因为你想在URL `http://127.0.0.1:8000/`上显示课程列表，并且`courses`应用的其它所有URL都有`/course/`前缀。
- en: 'Edit the `urls.py` file of the `courses` application and add the following
    URL patterns:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses`应用的`urls.py`文件，并添加以下URL模式：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You define the following URL patterns:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你定义以下URL模式：
- en: '`course_list_subject`: For displaying all courses for a subject'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`course_list_subject`：用于显示某个主题的所有课程'
- en: '`course_detail`: For displaying a single course overview'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`course_detail`：用于显示单个课程概要'
- en: Let’s build templates for the `CourseListView` and `CourseDetailView` views.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为`CourseListView`和`CourseDetailView`视图构建模板。
- en: 'Create the following file structure inside the `templates/courses/` directory
    of the `courses` application:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在`courses`应用的`templates/courses/`目录内创建以下文件结构：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Edit the `courses/course/list.html` template of the `courses` application and
    write the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses/course/list.html`模板，并编写以下代码：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Make sure that no template tag is split into multiple lines.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 确保没有模板标签被拆分成多行。
- en: This is the template for listing the available courses. You create an HTML list
    to display all `Subject` objects and build a link to the `course_list_subject`
    URL for each of them. You also include the total number of courses for each subject
    and use the `pluralize` template filter to add a plural suffix to the word **course**
    when the number is different than `1`, to show *0 courses*, *1 course*, *2 courses*,
    etc. You add a `selected` HTML class to highlight the current subject if a subject
    is selected. You iterate over every `Course` object, displaying the total number
    of modules and the instructor’s name.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是列出可用课程的模板。你创建一个HTML列表来显示所有的`Subject`对象，并为每个对象构建一个指向`course_list_subject` URL的链接。你还包括每个科目的课程总数，并使用`pluralize`模板过滤器在数量不是`1`时给单词**course**添加复数后缀，以显示*0门课程*、*1门课程*、*2门课程*等。如果你选择了科目，你还会添加一个`selected`
    HTML类来突出显示当前科目。你遍历每个`Course`对象，显示模块总数和讲师姓名。
- en: 'Run the development server and open `http://127.0.0.1:8000/` in your browser.
    You should see a page similar to the following one:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 运行开发服务器，并在浏览器中打开`http://127.0.0.1:8000/`。你应该看到一个类似于以下页面的页面：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_14_02.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序 描述自动生成](img/B21088_14_02.png)'
- en: 'Figure 14.2: The course list page'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.2：课程列表页面
- en: The left sidebar contains all subjects, including the total number of courses
    for each of them. You can click any subject to filter the courses displayed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧边栏包含所有科目，包括每个科目的课程总数。你可以点击任何科目来过滤显示的课程。
- en: 'Edit the `courses/course/detail.html` template and add the following code to
    it:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses/course/detail.html`模板，并向其中添加以下代码：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This template displays the overview and details for a single course. Open `http://127.0.0.1:8000/`
    in your browser and click on one of the courses. You should see a page with the
    following structure:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板显示单个课程的概览和详细信息。在浏览器中打开`http://127.0.0.1:8000/`，并点击其中一个课程。你应该看到一个具有以下结构的页面：
- en: '![A picture containing text  Description automatically generated](img/B21088_14_03.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图片 描述自动生成](img/B21088_14_03.png)'
- en: 'Figure 14.3: The course overview page'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3：课程概览页面
- en: You have created a public area for displaying courses. Next, you need to allow
    users to register as students and enroll in courses.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经创建了一个用于显示课程的公共区域。接下来，你需要允许用户注册为学生并选课。
- en: Adding student registration
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加学生注册
- en: 'We need to implement student registration to enable enrollment in courses and
    access to content. Create a new application using the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要实现学生注册以允许选课和访问内容。使用以下命令创建一个新的应用程序：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Edit the `settings.py` file of the `educa` project and add the new application
    to the `INSTALLED_APPS` setting, as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`educa`项目的`settings.py`文件，并将新应用程序添加到`INSTALLED_APPS`设置中，如下所示：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating a student registration view
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建学生注册视图
- en: 'Edit the `views.py` file of the `students` application and write the following
    code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`students`应用程序的`views.py`文件，并写入以下代码：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is the view that allows students to register on your site. You use the
    generic `CreateView`, which provides the functionality for creating model objects.
    This view requires the following attributes:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是允许学生在你的网站上注册的视图。你使用通用的`CreateView`，它提供了创建模型对象的功能。此视图需要以下属性：
- en: '`template_name`: The path of the template to render this view.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template_name`：渲染此视图的模板路径。'
- en: '`form_class`: The form for creating objects, which has to be `ModelForm`. You
    use Django’s `UserCreationForm` as the registration form to create `User` objects.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form_class`：用于创建对象的表单，必须是`ModelForm`。你使用Django的`UserCreationForm`作为注册表单来创建`User`对象。'
- en: '`success_url`: The URL to redirect the user to when the form is successfully
    submitted. For this, you reverse the URL named `student_course_list`, which we
    will create in the *Accessing the course contents* section for listing the courses
    that students are enrolled in.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`success_url`：当表单成功提交时，将用户重定向到的URL。为此，你需要反转名为`student_course_list`的URL，我们将在*访问课程内容*部分创建它，用于列出学生已注册的课程。'
- en: The `form_valid()` method is executed when valid form data has been posted.
    It has to return an HTTP response. You override this method to log the user in
    after they have successfully signed up.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当有效的表单数据被提交时，会执行`form_valid()`方法。它必须返回一个HTTP响应。你需要覆盖这个方法，在用户成功注册后登录用户。
- en: 'Create a new file inside the `students` application directory and name it `urls.py`.
    Add the following code to it:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在`students`应用目录内创建一个新文件，命名为`urls.py`。将以下代码添加到该文件中：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, edit the main `urls.py` of the `educa` project and include the URLs for
    the `students` application by adding the following pattern to your URL configuration:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，编辑`educa`项目的主体`urls.py`文件，并通过添加以下模式到你的URL配置中，包含`students`应用的URL：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create the following file structure inside the `students` application directory:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在`students`应用目录内创建以下文件结构：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Edit the `students/student/registration.html` template and add the following
    code to it:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`students/student/registration.html`模板，并向其中添加以下代码：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run the development server and open `http://127.0.0.1:8000/students/register/`
    in your browser. You should see a registration form like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 运行开发服务器并在浏览器中打开`http://127.0.0.1:8000/students/register/`。你应该看到一个类似于以下注册表单的界面：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_14_04.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B21088_14_04.png)'
- en: 'Figure 14.4: The student registration form'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4：学生注册表单
- en: Note that the `student_course_list` URL specified in the `success_url` attribute
    of the `StudentRegistrationView` view doesn’t exist yet. If you submit the form,
    Django won’t find the URL to redirect you to after a successful registration.
    As mentioned, you will create this URL in the *Accessing the course contents*
    section.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在`StudentRegistrationView`视图的`success_url`属性中指定的`student_course_list` URL尚不存在。如果你提交表单，Django将找不到在成功注册后重定向你的URL。如前所述，你将在*访问课程内容*部分创建此URL。
- en: Enrolling in courses
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 报名参加课程
- en: After users create an account, they should be able to enroll in courses. To
    store enrollments, you need to create a many-to-many relationship between the
    `Course` and `User` models.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 用户创建账户后，应该能够报名参加课程。为了存储报名信息，您需要在`Course`和`User`模型之间创建一个多对多关系。
- en: 'Edit the `models.py` file of the `courses` application and add the following
    field to the `Course` model:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses`应用的`models.py`文件，并将以下字段添加到`Course`模型中：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'From the shell, execute the following command to create a migration for this
    change:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从shell中执行以下命令以创建此更改的迁移：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You will see output similar to this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到类似于以下的输出：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, execute the next command to apply pending migrations:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，执行以下命令以应用挂起的迁移：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You should see some output that ends with the following line:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一些输出，以以下行结束：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can now associate students with the courses in which they are enrolled.
    Let’s create the functionality for students to enroll in courses.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以将学生与他们报名的课程关联起来。让我们创建学生报名课程的函数。
- en: 'Create a new file inside the `students` application directory and name it `forms.py`.
    Add the following code to it:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在`students`应用目录内创建一个新文件，命名为`forms.py`。将以下代码添加到该文件中：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This form will be used to enroll students in courses. The `course` field is
    for the course in which the user will be enrolled; therefore, it’s `ModelChoiceField`.
    You use a `HiddenInput` widget because this field is not intended to be visible
    to the user. Initially, you define the QuerySet as `Course.objects.none()`. Using
    `none()` creates an empty QuerySet that does not return any objects and, importantly,
    does not query the database. This avoids unnecessary database load during form
    initialization. You populate the actual QuerySet in the `__init__()` method of
    the form. This dynamic setting allows you to adapt the form to different situations,
    such as filtering available courses based on specific criteria. Overall, this
    approach gives you greater flexibility in managing form data, ensuring that data
    is fetched based on the context in which the form is used. This method also aligns
    with best practices in Django for handling form QuerySets efficiently.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此表单将用于将学生报名到课程。`course`字段是用户将要报名的课程；因此，它是`ModelChoiceField`。你使用`HiddenInput`小部件，因为这个字段不打算对用户可见。最初，你将查询集定义为`Course.objects.none()`。使用`none()`创建一个空的查询集，它不会返回任何对象，并且重要的是，它不会查询数据库。这避免了在表单初始化期间不必要的数据库负载。你将在表单的`__init__()`方法中填充实际的查询集。这种动态设置允许你根据不同的情况调整表单，例如根据特定标准过滤可用的课程。总体而言，这种方法为你提供了更大的灵活性来管理表单数据，确保数据是根据表单使用的上下文来获取的。这种方法也与Django处理表单查询集的最佳实践相一致。
- en: 'You are going to use this form in the `CourseDetailView` view to display a
    button to enroll. Edit the `views.py` file of the `students` application and add
    the following code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在 `CourseDetailView` 视图中使用此表单来显示一个报名按钮。编辑 `students` 应用程序的 `views.py` 文件，并添加以下代码：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This is the `StudentEnrollCourseView` view. It handles the enrollment of students
    in courses. The view inherits from the `LoginRequiredMixin` mixin so that only
    logged-in users can access the view. It also inherits from Django’s `FormView`
    view, since it handles a form submission. You use the `CourseEnrollForm` form
    for the `form_class` attribute and also define a `course` attribute for storing
    the given `Course` object. When the form is valid, the current user is added to
    the students enrolled in the course.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `StudentEnrollCourseView` 视图。它处理学生的课程报名。视图从 `LoginRequiredMixin` 混合继承，因此只有登录用户可以访问该视图。它还从
    Django 的 `FormView` 视图继承，因为它处理表单提交。您使用 `CourseEnrollForm` 表单作为 `form_class` 属性，并为存储提供的
    `Course` 对象定义一个 `course` 属性。当表单有效时，当前用户将被添加到该课程的已报名学生中。
- en: The `get_success_url()` method returns the URL that the user will be redirected
    to if the form was successfully submitted. This method is equivalent to the `success_url`
    attribute. Then, you reverse the URL named `student_course_detail`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_success_url()` 方法返回用户在表单成功提交后将被重定向到的 URL。此方法等同于 `success_url` 属性。然后，你反转名为
    `student_course_detail` 的 URL。'
- en: 'Edit the `urls.py` file of the `students` application and add the following
    URL pattern to it:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `students` 应用程序的 `urls.py` 文件，并向其中添加以下 URL 模式：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let’s add the enroll button form to the course overview page. Edit the `views.py`
    file of the `courses` application and modify `CourseDetailView` to make it look
    as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在课程概览页面上添加报名按钮表单。编辑 `courses` 应用程序的 `views.py` 文件，并修改 `CourseDetailView`
    以使其看起来如下：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You use the `get_context_data()` method to include the enrollment form in the
    context for rendering the templates. You initialize the hidden `course` field
    of the form with the current `Course` object so that it can be submitted directly.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您使用 `get_context_data()` 方法将报名表单包含在渲染模板的上下文中。您初始化表单的隐藏 `course` 字段，使其使用当前的 `Course`
    对象，以便可以直接提交。
- en: 'Edit the `courses/course/detail.html` template and locate the following line:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `courses/course/detail.html` 模板，并找到以下行：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Replace it with the following code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 将其替换为以下代码：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This is the button for enrolling in courses. If the user is authenticated, the
    enrollment button is displayed, including the hidden form that points to the `student_enroll_course`
    URL. If the user is not authenticated, a link to register on the platform will
    be displayed instead.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是报名课程的按钮。如果用户已认证，将显示报名按钮，包括指向 `student_enroll_course` URL 的隐藏表单。如果用户未认证，将显示一个注册平台的链接。
- en: 'Make sure that the development server is running, open `http://127.0.0.1:8000/`
    in your browser, and click a course. If you are logged in, you should see an **ENROLL
    NOW** button placed below the course overview, as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 确保开发服务器正在运行，在您的浏览器中打开 `http://127.0.0.1:8000/`，并点击一个课程。如果您已登录，您应该在课程概览下方看到一个
    **立即报名** 按钮如下所示：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_14_05.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、电子邮件  自动生成的描述](img/B21088_14_05.png)'
- en: 'Figure 14.5: The course overview page, including an ENROLL NOW button'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.5：课程概览页面，包括一个 **立即报名** 按钮
- en: If you are not logged in, you will see a **REGISTER TO ENROLL** button instead.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您未登录，您将看到一个 **注册报名** 按钮。
- en: Rendering course contents
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染课程内容
- en: Once students are enrolled in courses, they need a central location to access
    all courses they are signed up for. We need to compile the list of courses the
    student is enrolled in and provide access to the contents of each course. Then,
    we need to implement a system to render various types of content, such as text,
    images, videos and documents, which make up the course modules. Let’s build the
    necessary views and templates for users to access course contents.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦学生报名参加了课程，他们需要一个中心位置来访问他们已报名的所有课程。我们需要编译学生已报名的课程列表，并提供访问每个课程内容的方式。然后，我们需要实现一个系统来渲染各种类型的内容，如文本、图片、视频和文档，这些内容构成了课程模块。让我们构建必要的视图和模板，以便用户访问课程内容。
- en: Accessing course contents
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问课程内容
- en: 'You need a view for displaying the courses that students are enrolled in and
    a view for accessing the actual course contents. Edit the `views.py` file of the
    `students` application and add the following code to it:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个用于显示学生所选修的课程视图和一个用于访问实际课程内容的视图。编辑`students`应用的`views.py`文件，并向其中添加以下代码：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This is the view to see courses that students are enrolled in. It inherits from
    `LoginRequiredMixin` to make sure that only logged-in users can access the view.
    It also inherits from the generic `ListView` for displaying a list of `Course`
    objects. You override the `get_queryset()` method to retrieve only the courses
    that a student is enrolled in; you filter the QuerySet by the student’s `ManyToManyField`
    field to do so.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于查看学生所选修课程的视图。它继承自`LoginRequiredMixin`以确保只有登录用户才能访问该视图。它还继承自通用`ListView`以显示`Course`对象的列表。你重写了`get_queryset()`方法以检索学生所选修的课程；通过过滤学生`ManyToManyField`字段来实现这一点。
- en: 'Then, add the following code to the `views.py` file of the `students` application:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将以下代码添加到`students`应用的`views.py`文件中：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This is the `StudentCourseDetailView` view. You override the `get_queryset()`
    method to limit the base QuerySet to courses in which the student is enrolled.
    You also override the `get_context_data()` method to set a course module in the
    context if the `module_id` URL parameter is given. Otherwise, you set the first
    module of the course. This way, enrolled students will be able to navigate through
    modules inside a course.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`StudentCourseDetailView`视图。你重写了`get_queryset()`方法以限制基本查询集只包含学生所选修的课程。你还重写了`get_context_data()`方法，如果提供了`module_id`
    URL参数，则在上下文中设置一个课程模块。否则，你设置课程的第一模块。这样，已注册的学生将能够在课程内导航模块。
- en: 'Edit the `urls.py` file of the `students` application and add the following
    URL patterns to it:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`students`应用的`urls.py`文件，并向其中添加以下URL模式：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create the following file structure inside the `templates/students/` directory
    of the `students` application:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在`students`应用的`templates/students/`目录内创建以下文件结构：
- en: '[PRE28]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Edit the `students/course/list.html` template and add the following code to
    it:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`students/course/list.html`模板，并向其中添加以下代码：
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This template displays the courses that the student is enrolled in. Remember
    that when a new student successfully registers with the platform, they will be
    redirected to the `student_course_list` URL. Let’s also redirect students to this
    URL when they log in to the platform.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板显示学生所选修的课程。记住，当新学生成功注册到平台时，他们将被重定向到`student_course_list` URL。让我们在学生登录平台时也将他们重定向到这个URL。
- en: 'Edit the `settings.py` file of the `educa` project and add the following code
    to it:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`educa`项目的`settings.py`文件，并向其中添加以下代码：
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This is the setting used by the `auth` module to redirect the student after
    a successful login if no `next` parameter is present in the request. After a successful
    login, a student will be redirected to the `student_course_list` URL to view the
    courses that they are enrolled in.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`auth`模块在请求中不存在`next`参数时，在登录成功后重定向学生的设置。登录成功后，学生将被重定向到`student_course_list`
    URL以查看他们所选修的课程。
- en: 'Edit the `students/course/detail.html` template and add the following code
    to it:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`students/course/detail.html`模板，并向其中添加以下代码：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Make sure no template tag is split across multiple lines. This is the template
    for enrolled students to access the contents of a course. First, you build an
    HTML list including all course modules and highlighting the current module. Then,
    you iterate over the current module contents and access each content item to display
    it using `{{ item.render }}`. You will add the `render()` method to the content
    models next. This method will take care of rendering the content properly.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 确保没有模板标签被拆分到多行。这是已注册学生访问课程内容的模板。首先，你构建一个包含所有课程模块并突出当前模块的HTML列表。然后，你遍历当前模块的内容，并使用`{{
    item.render }}`访问每个内容项以显示它。你将在下一个步骤中将`render()`方法添加到内容模型中。此方法将负责正确渲染内容。
- en: You can now access `http://127.0.0.1:8000/students/register/`, register a new
    student account, and enroll in any course.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以访问`http://127.0.0.1:8000/students/register/`，注册一个新的学生账户，并选修任何课程。
- en: Rendering different types of content
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染不同类型的内容
- en: 'To display the course contents, you need to render the different content types
    that you created: *text*, *image*, *video*, and *file*.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示课程内容，你需要渲染你创建的不同内容类型：*文本*、*图片*、*视频*和*文件*。
- en: 'Edit the `models.py` file of the `courses` application and add the following
    `render()` method to the `ItemBase` model:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses`应用程序的`models.py`文件，并将以下`render()`方法添加到`ItemBase`模型中：
- en: '[PRE32]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This method uses the `render_to_string()` function for rendering a template
    and returning the rendered content as a string. Each kind of content is rendered
    using a template named after the content model. `self._meta.model_name` is used
    to generate the appropriate template name for each content model dynamically.
    The `render()` method provides a common interface for rendering diverse content.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法使用`render_to_string()`函数来渲染模板并返回渲染后的内容作为字符串。每种内容都使用以内容模型命名的模板进行渲染。`self._meta.model_name`用于动态生成每个内容模型适当的模板名称。`render()`方法提供了一个渲染不同内容的通用接口。
- en: 'Create the following file structure inside the `templates/courses/` directory
    of the `courses` application:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在`courses`应用程序的`templates/courses/`目录内创建以下文件结构：
- en: '[PRE33]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Edit the `courses/content/text.html` template and write this code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses/content/text.html`模板并写入以下代码：
- en: '[PRE34]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This is the template to render text content. The `linebreaks` template filter
    replaces line breaks in plain text with HTML line breaks.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染文本内容的模板。`linebreaks`模板过滤器将纯文本中的换行符替换为HTML换行符。
- en: 'Edit the `courses/content/file.html` template and add the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses/content/file.html`模板并添加以下内容：
- en: '[PRE35]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This is the template to render files. It generates a link to download the file.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染文件的模板。它生成一个下载文件的链接。
- en: 'Edit the `courses/content/image.html` template and write:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses/content/image.html`模板并写入：
- en: '[PRE36]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This is the template to render images.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染图像的模板。
- en: You also have to create a template for rendering `Video` objects. You will use
    `django-embed-video` for embedding video content. `django-embed-video` is a third-party
    Django application that allows you to embed videos in your templates, from sources
    such as YouTube or Vimeo, by simply providing their public URL.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你还必须创建一个用于渲染`Video`对象的模板。你将使用`django-embed-video`来嵌入视频内容。`django-embed-video`是一个第三方Django应用程序，它允许你通过简单地提供它们的公共URL，在模板中嵌入来自YouTube或Vimeo等来源的视频。
- en: 'Install the package with the following command:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装该包：
- en: '[PRE37]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Edit the `settings.py` file of your project and add the application to the
    `INSTALLED_APPS` setting, as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑你的项目中的`settings.py`文件，并将应用程序添加到`INSTALLED_APPS`设置中，如下所示：
- en: '[PRE38]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: You can find the `django-embed-video` application’s documentation at [https://django-embed-video.readthedocs.io/en/latest/.](https://django-embed-video.readthedocs.io/en/latest/.
    )
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://django-embed-video.readthedocs.io/en/latest/](https://django-embed-video.readthedocs.io/en/latest/)找到`django-embed-video`应用程序的文档。
- en: 'Edit the `courses/content/video.html` template and write the following code:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses/content/video.html`模板并写入以下代码：
- en: '[PRE39]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This is the template to render videos.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染视频的模板。
- en: Now, run the development server and access `http://127.0.0.1:8000/course/mine/`
    in your browser. Access the site with a user that belongs to the `Instructors`
    group, and add multiple contents to a course. To include video content, you can
    just copy any YouTube URL, such as `https://www.youtube.com/watch?v=bgV39DlmZ2U`,
    and include it in the `url` field of the form.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行开发服务器，并在浏览器中访问`http://127.0.0.1:8000/course/mine/`。使用属于`Instructors`组的用户访问网站，并向课程添加多个内容。要包含视频内容，只需复制任何YouTube
    URL，例如`https://www.youtube.com/watch?v=bgV39DlmZ2U`，并将其包含在表单的`url`字段中。
- en: 'After adding contents to the course, open `http://127.0.0.1:8000/`, click the
    course, and click on the **ENROLL NOW** button. You should be enrolled in the
    course and redirected to the `student_course_detail` URL. *Figure 14.6* shows
    a sample course contents page:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在课程中添加内容后，打开`http://127.0.0.1:8000/`，点击课程，然后点击**立即报名**按钮。你应该已经报名并重定向到`student_course_detail`
    URL。*图14.6*显示了示例课程内容页面：
- en: '![Graphical user interface, application, website  Description automatically
    generated](img/B21088_14_06.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、应用程序、网站  自动生成的描述](img/B21088_14_06.png)'
- en: 'Figure 14.6: A course contents page'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6：课程内容页面
- en: Great! You have created a common interface for rendering courses with different
    types of content.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！你已经为具有不同类型内容的课程创建了一个通用渲染接口。
- en: Using the cache framework
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用缓存框架
- en: Processing HTTP requests to your web application usually entails database access,
    data manipulation, and template rendering. It is much more expensive in terms
    of processing than just serving a static website. The overhead in some requests
    can be significant when your site starts getting more and more traffic. This is
    where caching becomes essential. By caching queries, calculation results, or rendered
    content in an HTTP request, you will avoid expensive operations in the following
    requests that need to return the same data. This translates into shorter response
    times and less processing on the server side.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 处理对您的Web应用的HTTP请求通常涉及数据库访问、数据处理和模板渲染。与仅提供静态网站相比，这要昂贵得多。当您的网站开始获得越来越多的流量时，某些请求的开销可能会很大。这就是缓存变得至关重要的地方。通过在HTTP请求中缓存查询、计算结果或渲染内容，您将避免在后续需要返回相同数据的请求中进行昂贵的操作。这转化为更短的响应时间和服务器端更少的处理。
- en: Django includes a robust cache system that allows you to cache data with different
    levels of granularity. You can cache a single query, the output of a specific
    view, parts of rendered template content, or your entire site. Items are stored
    in the cache system for a default time, but you can specify the timeout when you
    cache data.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Django包含一个强大的缓存系统，允许您以不同粒度级别缓存数据。您可以缓存单个查询、特定视图的输出、渲染模板内容的一部分，或整个站点。项目默认存储在缓存系统中，但您可以在缓存数据时指定超时时间。
- en: 'This is how the cache framework is usually used when your application processes
    an HTTP request:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是当您的应用程序处理HTTP请求时通常如何使用缓存框架：
- en: Try to find the requested data in the cache.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在缓存中找到所需数据。
- en: If found, return the cached data.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果找到，则返回缓存数据。
- en: 'If not found, perform the following steps:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果未找到，请执行以下步骤：
- en: Perform the database query or processing required to generate the data.
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行生成数据所需的数据库查询或处理。
- en: Save the generated data in the cache.
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将生成的数据保存到缓存中。
- en: Return the data.
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回数据。
- en: You can read detailed information about Django’s cache system at [https://docs.djangoproject.com/en/5.0/topics/cache/](https://docs.djangoproject.com/en/5.0/topics/cache/).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.djangoproject.com/en/5.0/topics/cache/](https://docs.djangoproject.com/en/5.0/topics/cache/)上阅读有关Django缓存系统的详细信息。
- en: Available cache backends
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用的缓存后端
- en: 'Django comes with the following cache backends:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Django附带以下缓存后端：
- en: '`backends.memcached.PyMemcacheCache` or `backends.memcached.PyLibMCCache`:
    Memcached backends. Memcached is a fast and efficient memory-based cache server.
    The backend to use depends on the Memcached Python bindings you choose.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backends.memcached.PyMemcacheCache`或`backends.memcached.PyLibMCCache`：Memcached后端。Memcached是一个快速高效的基于内存的缓存服务器。要使用哪个后端取决于您选择的Memcached
    Python绑定。'
- en: '`backends.redis.RedisCache`: A Redis cache backend. This backend was added
    in Django 4.0.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backends.redis.RedisCache`：Redis缓存后端。此后端是在Django 4.0中添加的。'
- en: '`backends.db.DatabaseCache`: Uses the database as a cache system.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backends.db.DatabaseCache`：使用数据库作为缓存系统。'
- en: '`backends.filebased.FileBasedCache`: Uses the file storage system. This serializes
    and stores each cache value as a separate file.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backends.filebased.FileBasedCache`：使用文件存储系统。它将每个缓存值序列化并存储为单独的文件。'
- en: '`backends.locmem.LocMemCache`: A local memory cache backend. This is the default
    cache backend.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backends.locmem.LocMemCache`：本地内存缓存后端。这是默认的缓存后端。'
- en: '`backends.dummy.DummyCache`: A dummy cache backend intended only for development.
    It implements the cache interface without actually caching anything. This cache
    is per-process and thread-safe.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backends.dummy.DummyCache`：一个仅用于开发的虚拟缓存后端。它实现了缓存接口，但实际上并不缓存任何内容。此缓存是按进程和线程安全的。'
- en: For optimal performance, use a memory-based cache backend like Memcached or
    Redis, since accessing memory is faster than accessing data from databases of
    files.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得最佳性能，使用基于内存的缓存后端，如Memcached或Redis，因为访问内存比访问数据库或文件中的数据要快。
- en: Installing Memcached
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Memcached
- en: Memcached is a popular high-performance, memory-based cache server. We are going
    to use Memcached and the `PyMemcacheCache` Memcached backend.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Memcached是一个流行的、高性能的基于内存的缓存服务器。我们将使用Memcached和`PyMemcacheCache` Memcached后端。
- en: Installing the Memcached Docker image
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Memcached Docker镜像
- en: 'Run the following command from the shell to pull the Memcached Docker image:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 从shell运行以下命令以拉取Memcached Docker镜像：
- en: '[PRE40]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This will download the Memcached Docker image to your local machine. You can
    find more information about the official Memcached Docker image at [https://hub.docker.com/_/memcached](https://hub.docker.com/_/memcached).
    If you don’t want to use Docker, you can also download Memcached from [https://memcached.org/downloads](https://memcached.org/downloads).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载 Memcached Docker 镜像到您的本地机器。您可以在 [https://hub.docker.com/_/memcached](https://hub.docker.com/_/memcached)
    找到有关官方 Memcached Docker 镜像的更多信息。如果您不想使用 Docker，您也可以从 [https://memcached.org/downloads](https://memcached.org/downloads)
    下载 Memcached。
- en: 'Run the Memcached Docker container with the following command:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行 Memcached Docker 容器：
- en: '[PRE41]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Memcached runs on port `11211` by default. The `-p` option is used to publish
    the `11211` port to the same host interface port. The `-m` option is used to limit
    the memory for the container to `64` MB. Memcached runs in memory, and it is allotted
    a specified amount of RAM. When the allotted RAM is full, Memcached starts removing
    the oldest data to store new data. If you want to run the command in detached
    mode (in the background of your terminal), you can use the `-d` option.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Memcached 默认在端口 `11211` 上运行。`-p` 选项用于将 `11211` 端口发布到同一主机接口端口。`-m` 选项用于将容器的内存限制为
    `64` MB。Memcached 在内存中运行，并分配指定数量的 RAM。当分配的 RAM 满时，Memcached 开始删除最旧的数据以存储新数据。如果您想在分离模式下运行命令（在终端的背景中），可以使用
    `-d` 选项。
- en: You can find more information about Memcached at [https://memcached.org](https://memcached.org).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://memcached.org](https://memcached.org) 找到有关 Memcached 的更多信息。
- en: Installing the Memcached Python binding
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Memcached Python 绑定
- en: 'After installing Memcached, you have to install a Memcached Python binding.
    We will install `pymemcache`, which is a fast, pure-Python Memcached client. Run
    the following command in the shell:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Memcached 后，您必须安装一个 Memcached Python 绑定。我们将安装 `pymemcache`，这是一个快速、纯 Python
    的 Memcached 客户端。在 shell 中运行以下命令：
- en: '[PRE42]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: You can read more information about the `pymemcache` library at [https://github.com/pinterest/pymemcache](https://github.com/pinterest/pymemcache).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://github.com/pinterest/pymemcache](https://github.com/pinterest/pymemcache)
    上阅读有关 `pymemcache` 库的更多信息。
- en: Django cache settings
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django 缓存设置
- en: 'Django provides the following cache settings:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Django 提供以下缓存设置：
- en: '`CACHES`: A dictionary containing all available caches for the project.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CACHES`: 包含项目中所有可用缓存的字典。'
- en: '`CACHE_MIDDLEWARE_ALIAS`: The cache alias to use for storage.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CACHE_MIDDLEWARE_ALIAS`: 用于存储的缓存别名。'
- en: '`CACHE_MIDDLEWARE_KEY_PREFIX`: The prefix to use for cache keys. Set a prefix
    to avoid key collisions if you share the same cache between several sites.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CACHE_MIDDLEWARE_KEY_PREFIX`: 缓存键的前缀。如果您在多个站点之间共享相同的缓存，设置前缀以避免键冲突。'
- en: '`CACHE_MIDDLEWARE_SECONDS`: The default number of seconds to cache pages.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CACHE_MIDDLEWARE_SECONDS`: 缓存页面的默认秒数。'
- en: 'The caching system for the project can be configured using the `CACHES` settings.
    This setting allows you to specify the configuration for multiple caches. Each
    cache included in the `CACHES` dictionary can specify the following data:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `CACHES` 设置配置项目的缓存系统。此设置允许您指定多个缓存的配置。`CACHES` 字典中包含的每个缓存都可以指定以下数据：
- en: '`BACKEND`: The cache backend to use.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BACKEND`: 要使用的缓存后端。'
- en: '`KEY_FUNCTION`: A string containing a dotted path to a callable that takes
    a prefix, version, and key as arguments and returns a final cache key.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KEY_FUNCTION`: 包含一个点分隔路径的字符串，指向一个可调用的函数，该函数接受前缀、版本和键作为参数，并返回最终的缓存键。'
- en: '`KEY_PREFIX`: A string prefix for all cache keys, to avoid collisions.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KEY_PREFIX`: 所有缓存键的字符串前缀，以避免冲突。'
- en: '`LOCATION`: The location of the cache. Depending on the cache backend, this
    might be a directory, a host and port, or a name for the in-memory backend.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOCATION`: 缓存的位置。根据缓存后端，这可能是一个目录、一个主机和端口，或者内存后端的一个名称。'
- en: '`OPTIONS`: Any additional parameters to be passed to the cache backend.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPTIONS`: 传递给缓存后端的任何附加参数。'
- en: '`TIMEOUT`: The default timeout, in seconds, for storing the cache keys. It
    is 300 seconds by default, which is 5 minutes. If set to `None`, the cache keys
    will not expire.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIMEOUT`: 存储缓存键的默认超时时间，以秒为单位。默认为 300 秒，即 5 分钟。如果设置为 `None`，则缓存键不会过期。'
- en: '`VERSION`: The default version number for the cache keys. Useful for cache
    versioning.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VERSION`: 缓存键的默认版本号。对于缓存版本控制很有用。'
- en: You can find more information about the `CACHES` settings at [https://docs.djangoproject.com/en/5.0/ref/settings/#caches](https://docs.djangoproject.com/en/5.0/ref/settings/#caches).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://docs.djangoproject.com/en/5.0/ref/settings/#caches](https://docs.djangoproject.com/en/5.0/ref/settings/#caches)
    找到有关 `CACHES` 设置的更多信息。
- en: Adding Memcached to your project
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Memcached 添加到您的项目中
- en: 'Let’s configure the cache for your project. Edit the `settings.py` file of
    the `educa` project and add the following code to it:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为您的项目配置缓存。编辑`educa`项目的`settings.py`文件，并向其中添加以下代码：
- en: '[PRE43]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: You are using the `PyMemcacheCache` backend. You specify its location using
    the `address:port` notation. If you have multiple Memcached instances, you can
    use a list for `LOCATION`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 您正在使用`PyMemcacheCache`后端。您使用`address:port`表示法指定其位置。如果您有多个Memcached实例，您可以使用列表来指定`LOCATION`。
- en: You have set up Memcached for your project. Let’s start caching data!
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 您已为项目设置了Memcached。让我们开始缓存数据！
- en: Cache levels
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存级别
- en: 'Django provides the following levels of caching, listed here by ascending order
    of granularity:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了以下级别的缓存，按粒度升序排列：
- en: '**Low-level cache API**: Provides the highest granularity. Allows you to cache
    specific queries or calculations.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低级缓存API**：提供最高粒度。允许您缓存特定的查询或计算。'
- en: '**Template cache**: Allows you to cache template fragments.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板缓存**：允许您缓存模板片段。'
- en: '**Per-view cache**: Provides caching for individual views.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图级缓存**：为单个视图提供缓存。'
- en: '**Per-site cache**: The highest-level cache. It caches your entire site.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**站点级缓存**：最高级别的缓存。它缓存了您的整个站点。'
- en: Think about your cache strategy before implementing caching. Focus first on
    expensive queries or calculations that are not calculated on a per-user basis.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施缓存之前，先考虑您的缓存策略。首先关注那些不是按用户计算的昂贵查询或计算。
- en: In the upcoming sections, we will explore how to use each of these caching levels
    in our project.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨如何在我们的项目中使用这些缓存级别。
- en: Let’s start by learning how to use the low-level cache API in your Python code.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从学习如何在Python代码中使用低级缓存API开始。
- en: Using the low-level cache API
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用低级缓存API
- en: 'The low-level cache API allows you to store objects in the cache with any granularity.
    It is located at `django.core.cache`. You can import it like this:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 低级缓存API允许您以任何粒度将对象存储在缓存中。它位于`django.core.cache`。您可以像这样导入它：
- en: '[PRE44]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This uses the default cache. It’s equivalent to `caches[''default'']`. Accessing
    a specific cache is also possible via its alias:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用的是默认缓存。它与`caches['default']`等价。通过其别名也可以访问特定的缓存：
- en: '[PRE45]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Let’s take a look at how the cache API works. Open the Django shell with the
    following command:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看缓存API是如何工作的。使用以下命令打开Django shell：
- en: '[PRE46]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Execute the following code:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下代码：
- en: '[PRE47]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You access the default cache backend and use `set(key, value, timeout)` to
    store a key named `''musician''` with a value that is the string `''Django Reinhardt''`
    for 20 seconds. If you don’t specify a timeout, Django uses the default timeout
    specified for the cache backend in the `CACHES` settings. Now, execute the following
    code:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 您访问默认缓存后端，并使用`set(key, value, timeout)`将名为`'musician'`的键存储一个值为字符串`'Django Reinhardt'`的值，持续20秒。如果您没有指定超时，Django将使用在`CACHES`设置中指定的缓存后端的默认超时。现在，执行以下代码：
- en: '[PRE48]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'You retrieve the key from the cache. Wait for 20 seconds and execute the same
    code:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 您从缓存中检索键。等待20秒后，执行相同的代码：
- en: '[PRE49]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: No value is returned this time. The `'musician'` cache key has expired and the
    `get()` method returns `None` because the key is not in the cache anymore.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这次没有返回值。`'musician'`缓存键已过期，`get()`方法返回`None`，因为该键不再在缓存中。
- en: Always avoid storing a `None` value in a cache key because you won’t be able
    to distinguish between the actual value and a cache miss.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 总是避免在缓存键中存储`None`值，因为您将无法区分实际值和缓存未命中。
- en: 'Let’s cache a QuerySet with the following code:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下代码缓存一个查询集：
- en: '[PRE50]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'You perform a QuerySet on the `Subject` model and store the returned objects
    in the `''my_subjects''` key. Let’s retrieve the cached data:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 您对`Subject`模型执行查询集，并将返回的对象存储在`'my_subjects'`键中。让我们检索缓存的数据：
- en: '[PRE51]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You are going to cache some queries in your views. Edit the `views.py` file
    of the `courses` application and add the following import:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在视图中缓存一些查询。编辑`courses`应用的`views.py`文件，并添加以下导入：
- en: '[PRE52]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In the `get()` method of the `CourseListView`, find the following lines:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CourseListView`的`get()`方法中找到以下行：
- en: '[PRE53]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Replace the lines with the following ones:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下行替换为以下内容：
- en: '[PRE54]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: In this code, you try to get the `all_subjects` key from the cache using `cache.get()`.
    This returns `None` if the given key is not found. If no key is found (not cached
    yet or cached but timed out), the query is performed to retrieve all `Subject`
    objects and their number of courses, and the result is cached using `cache.set()`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，你尝试使用`cache.get()`从缓存中获取`all_subjects`键。如果给定的键未找到，则返回`None`。如果没有找到键（尚未缓存或已缓存但已超时），则执行查询以检索所有`Subject`对象及其课程数量，并使用`cache.set()`将结果缓存。
- en: Checking cache requests with Django Debug Toolbar
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Django Debug Toolbar检查缓存请求
- en: Let’s add Django Debug Toolbar to the project to check the cache queries. You
    learned how to use Django Debug Toolbar in *Chapter 7*, *Tracking User Actions*.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加Django Debug Toolbar到项目中以检查缓存查询。你已经在*第7章*，*跟踪用户行为*中学习了如何使用Django Debug
    Toolbar。
- en: 'First, install Django Debug Toolbar with the following command:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用以下命令安装Django Debug Toolbar：
- en: '[PRE55]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Edit the `settings.py` file of your project and add `debug_toolbar` to the
    `INSTALLED_APPS` setting, as follows. The new line is highlighted in bold:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑你项目的`settings.py`文件，并将`debug_toolbar`添加到`INSTALLED_APPS`设置中，如下所示。新行以粗体突出显示：
- en: '[PRE56]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In the same file, add the following line highlighted in bold to the `MIDDLEWARE`
    setting:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一文件中，将以下以粗体突出显示的行添加到`MIDDLEWARE`设置中：
- en: '[PRE57]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Remember that `DebugToolbarMiddleware` has to be placed before any other middleware,
    except for middleware that encodes the response’s content, such as `GZipMiddleware`,
    which, if present, should come first.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`DebugToolbarMiddleware`必须放在任何其他中间件之前，除了那些编码响应内容的中间件，例如`GZipMiddleware`，如果存在，则应该放在最前面。
- en: 'Add the following lines at the end of the `settings.py` file:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在`settings.py`文件的末尾添加以下行：
- en: '[PRE58]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Django Debug Toolbar will only display if your IP address matches an entry in
    the `INTERNAL_IPS` setting.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Django Debug Toolbar只有在你的IP地址与`INTERNAL_IPS`设置中的条目匹配时才会显示。
- en: 'Edit the main `urls.py` file of the project and add the following URL pattern
    to `urlpatterns`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑项目的主体`urls.py`文件，并将以下URL模式添加到`urlpatterns`中：
- en: '[PRE59]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Run the development server and open `http://127.0.0.1:8000/` in your browser.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 运行开发服务器，并在浏览器中打开`http://127.0.0.1:8000/`。
- en: 'You should now see Django Debug Toolbar on the right side of the page. Click
    on **Cache** in the sidebar menu. You will see the following panel:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该在页面的右侧看到Django Debug Toolbar。点击侧边栏菜单中的**Cache**。你会看到以下面板：
- en: '![](img/B21088_14_07.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_14_07.png)'
- en: 'Figure 14.7: The Cache panel of Django Debug Toolbar including cache requests
    for CourseListView on a cache miss'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.7：Django Debug Toolbar的缓存面板，包括在缓存未命中时对`CourseListView`的缓存请求
- en: Under **Total calls** you should see **2**. The first time the `CourseListView`
    view is executed, there are two cache requests. Under **Commands**, you will see
    that the `get` command has been executed once, and that the `set` command has
    been executed once as well. The `get` command corresponds to the call that retrieves
    the `all_subjects` cache key. This is the first call displayed under **Calls**.
    The first time the view is executed, a cache miss occurs because no data is cached
    yet. That’s why there is **1** under **Cache misses**. Then, the `set` command
    is used to store the results of the `subjects` QuerySet in the cache using the
    `all_subjects` cache key. This is the second call displayed under **Calls**.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在**总调用次数**下，你应该看到**2**。第一次执行`CourseListView`视图时，有两个缓存请求。在**命令**下，你会看到`get`命令执行了一次，同样`set`命令也执行了一次。`get`命令对应于检索`all_subjects`缓存键的调用。这是在**调用**下显示的第一个调用。第一次执行视图时，由于还没有缓存数据，因此发生缓存未命中。这就是为什么在**缓存未命中**下有**1**的原因。然后，使用`set`命令将`subjects`
    QuerySet的结果存储在缓存中，使用`all_subjects`缓存键。这是在**调用**下显示的第二个调用。
- en: 'In the **SQL** menu item of Django Debug Toolbar, you will see the total number
    of SQL queries executed in this request. This includes the query to retrieve all
    subjects that are then stored in the cache:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django Debug Toolbar的**SQL**菜单项中，你会看到在此请求中执行的SQL查询总数。这包括检索所有主题并随后存储在缓存中的查询：
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_14_08.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B21088_14_08.png)'
- en: 'Figure 14.8: SQL queries executed for CourseListView on a cache miss'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.8：在缓存未命中时对`CourseListView`执行的SQL查询
- en: 'Reload the page in the browser and click on **Cache** in the sidebar menu:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中重新加载页面，并点击侧边栏菜单中的**Cache**：
- en: '![](img/B21088_14_09.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_14_09.png)'
- en: 'Figure 14.9: The Cache panel of Django Debug Toolbar, including cache requests
    for the CourseListView view on a cache hit'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.9：Django Debug Toolbar的缓存面板，包括对`CourseListView`视图的缓存请求（缓存命中）
- en: Now, there is only a single cache request. Under **Total calls**, you should
    see **1**, and under **Commands**,you can see that the cache request corresponds
    to a `get` command. In this case, there is a cache hit (see **Cache hits**) instead
    of a cache miss because the data has been found in the cache. Under **Calls**,
    you can see the `get` request to retrieve the `all_subjects` cache key.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只有一个缓存请求。在**总调用次数**下，你应该看到**1**，在**命令**下，你可以看到缓存请求对应于一个`get`命令。在这种情况下，由于数据已在缓存中找到，因此这是一个缓存命中（见**缓存命中**）而不是缓存未命中。在**调用**下，你可以看到检索`all_subjects`缓存键的`get`请求。
- en: 'Check the **SQL** menu item of the debug toolbar. You should see that there
    is one less SQL query in this request. You are saving one SQL query because the
    view finds the data in the cache and doesn’t need to retrieve it from the database:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 检查调试工具栏的**SQL**菜单项。你应该看到这个请求中有一个SQL查询更少。你节省了一个SQL查询，因为视图在缓存中找到了数据，不需要从数据库中检索它：
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_14_10.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B21088_14_10.png)'
- en: 'Figure 14.10: SQL queries executed for CourseListView on a cache hit'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.10：在缓存命中时为CourseListView执行的SQL查询
- en: In this example, for a single request, it takes more time to retrieve the item
    from the cache than the time saved on the additional SQL query. However, when
    you have many users accessing your site, you will find that significant time reductions
    can be achieved by retrieving the data from the cache instead of hitting the database,
    and you will be able to serve the site to more concurrent users.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，对于单个请求，从缓存中检索项目所需的时间比额外SQL查询节省的时间要多。然而，当你有大量用户访问你的网站时，你会发现通过从缓存中检索数据而不是直接访问数据库，可以实现显著的时间节省，并且你将能够为更多并发用户提供服务。
- en: Successive requests to the same URL will retrieve the data from the cache. Since
    we didn’t specify a timeout when caching data with `cache.set('all_subjects',
    subjects)` in the `CourseListView` view, the default timeout will be used (300
    seconds by default, which is 5 minutes). When the timeout is reached, the next
    request to the URL will generate a cache miss, the QuerySet will be executed,
    and data will be cached for another 5 minutes. You can define a different default
    timeout in the `TIMEOUT` element of the `CACHES` setting.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 对同一URL的连续请求将从缓存中检索数据。由于我们在`CourseListView`视图中使用`cache.set('all_subjects', subjects)`缓存数据时没有指定超时，将使用默认超时（默认为300秒，即5分钟）。当超时到达时，下一个请求到URL将生成缓存未命中，查询集将被执行，数据将被缓存另外5分钟。你可以在`CACHES`设置的`TIMEOUT`元素中定义不同的默认超时。
- en: Low-level caching based on dynamic data
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于动态数据的低级缓存
- en: Often, you will want to cache something that is based on dynamic data. In these
    cases, you have to build dynamic keys that contain all the information required
    to uniquely identify the cached data.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你将想要缓存基于动态数据的内容。在这些情况下，你必须构建包含所有必要信息以唯一标识缓存数据的动态键。
- en: 'Edit the `views.py` file of the `courses` application and modify the `CourseListView`
    view to make it look like this:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses`应用的`views.py`文件，并修改`CourseListView`视图，使其看起来像这样：
- en: '[PRE60]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: In this case, you also cache both all courses and courses filtered by subject.
    You use the `all_courses` cache key for storing all courses if no subject is given.
    If there is a subject, you build the key dynamically with `f'subject_{subject.id}_courses'`.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你也缓存了所有课程和按主题筛选的课程。如果没有给出主题，你使用`all_courses`缓存键来存储所有课程。如果有主题，你使用`f'subject_{subject.id}_courses'`动态构建键。
- en: 'It’s important to note that you can’t use a cached QuerySet to build other
    QuerySets, since what you cached are actually the results of the QuerySet. So
    you can’t do the following:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，你不能使用缓存的查询集来构建其他查询集，因为你所缓存的是查询集的结果。所以你不能这样做：
- en: '[PRE61]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Instead, you have to create the base QuerySet `Course.objects.annotate(total_modules=Count('modules'))`,
    which is not going to be executed until it is forced, and use it to further restrict
    the QuerySet with `all_courses.filter(subject=subject)` for cases where the data
    was not found in the cache.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你必须创建基础查询集 `Course.objects.annotate(total_modules=Count('modules'))`，这个查询集在强制执行之前不会执行，并且使用它通过
    `all_courses.filter(subject=subject)` 进一步限制查询集，以处理数据未在缓存中找到的情况。
- en: Caching template fragments
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存模板片段
- en: 'Caching template fragments is a higher-level approach. You need to load the
    cache template tags in your template using `{% load cache %}`. Then, you will
    be able to use the `{% cache %}` template tag to cache specific template fragments.
    You usually use the template tag as follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存模板片段是一种高级方法。您需要在模板中使用 `{% load cache %}` 加载缓存模板标签。然后，您将能够使用 `{% cache %}`
    模板标签来缓存特定的模板片段。您通常按如下方式使用模板标签：
- en: '[PRE62]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The `{% cache %}` template tag has two required arguments: the timeout in seconds
    and a name for the fragment. If you need to cache content depending on dynamic
    data, you can do so by passing additional arguments to the `{% cache %}` template
    tag to uniquely identify the fragment.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`{% cache %}` 模板标签有两个必需的参数：以秒为单位的超时时间和片段的名称。如果您需要根据动态数据缓存内容，可以通过将额外的参数传递给 `{%
    cache %}` 模板标签来唯一地标识片段。'
- en: 'Edit the `/students/course/detail.html` file of the `students` application.
    Add the following code at the top of it, just after the `{% extends %}` tag:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `students` 应用的 `/students/course/detail.html` 文件。在 `{% extends %}` 标签之后添加以下代码：
- en: '[PRE63]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Then, find the following lines:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，找到以下行：
- en: '[PRE64]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Replace them with the following ones:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 将它们替换为以下内容：
- en: '[PRE65]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: You cache this template fragment using the name `module_contents` and pass the
    current `Module` object to it. Thus, you uniquely identify the fragment. This
    is important to avoid caching a module’s contents and serving the wrong content
    when a different module is requested.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 您使用名称 `module_contents` 缓存此模板片段，并将当前的 `Module` 对象传递给它。这样，您可以唯一地标识片段。这很重要，以避免缓存模块的内容，并在请求不同模块时提供错误的内容。
- en: If the `USE_I18N` setting is set to `True`, the per-site middleware cache will
    respect the active language. If you use the `{% cache %}` template tag, you have
    to use one of the translation-specific variables available in templates to achieve
    the same result, such as `{% cache 600 name request.LANGUAGE_CODE %}`.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `USE_I18N` 设置为 `True`，则按站点中间件缓存将尊重活动语言。如果您使用 `{% cache %}` 模板标签，您必须使用模板中可用的翻译特定变量之一来实现相同的结果，例如
    `{% cache 600 name request.LANGUAGE_CODE %}`。
- en: Caching views
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存视图
- en: You can cache the output of individual views using the `cache_page` decorator
    located at `django.views.decorators.cache`. The decorator requires a `timeout`
    argument (in seconds).
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用位于 `django.views.decorators.cache` 的 `cache_page` 装饰器来缓存单个视图的输出。该装饰器需要一个
    `timeout` 参数（以秒为单位）。
- en: 'Let’s use it in your views. Edit the `urls.py` file of the `students` application
    and add the following import:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在您的视图中使用它。编辑 `students` 应用的 `urls.py` 文件并添加以下导入：
- en: '[PRE66]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Then, apply the `cache_page` decorator to the `student_course_detail` and `student_course_detail_module`
    URL patterns, as follows:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将 `cache_page` 装饰器应用于 `student_course_detail` 和 `student_course_detail_module`
    URL 模式，如下所示：
- en: '[PRE67]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Now, the complete content returned by the `StudentCourseDetailView` is cached
    for 15 minutes.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`StudentCourseDetailView` 返回的完整内容被缓存了15分钟。
- en: The per-view cache uses the URL to build the cache key. Multiple URLs pointing
    to the same view will be cached separately.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 按视图缓存使用 URL 来构建缓存键。指向同一视图的多个 URL 将分别缓存。
- en: Using the per-site cache
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用按站点缓存
- en: 'This is the highest-level cache. It allows you to cache your entire site. To
    allow the per-site cache, edit the `settings.py` file of your project and add
    the `UpdateCacheMiddleware` and `FetchFromCacheMiddleware` classes to the `MIDDLEWARE`
    setting, as follows:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最高级别的缓存。它允许您缓存整个站点。要允许按站点缓存，编辑您项目的 `settings.py` 文件并将 `UpdateCacheMiddleware`
    和 `FetchFromCacheMiddleware` 类添加到 `MIDDLEWARE` 设置中，如下所示：
- en: '[PRE68]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Remember that middleware is executed in the given order during the request phase,
    and in reverse order during the response phase. `UpdateCacheMiddleware` is placed
    before `CommonMiddleware` because it runs during response time, when middleware
    is executed in reverse order. `FetchFromCacheMiddleware` is placed after `CommonMiddleware`
    intentionally because it needs to access the request data set by the latter.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，中间件在请求阶段按给定顺序执行，在响应阶段按相反顺序执行。`UpdateCacheMiddleware` 被放置在 `CommonMiddleware`
    之前，因为它在响应时间执行，此时中间件按相反顺序执行。`FetchFromCacheMiddleware` 故意放置在 `CommonMiddleware`
    之后，因为它需要访问后者设置的请求数据集。
- en: 'Next, add the following settings to the `settings.py` file:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将以下设置添加到 `settings.py` 文件中：
- en: '[PRE69]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: In these settings, you use the default cache for your cache middleware and set
    the global cache timeout to `15` minutes. You also specify a prefix for all cache
    keys to avoid collisions in case you use the same Memcached backend for multiple
    projects. Your site will now cache and return cached content for all `GET` requests.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些设置中，你使用缓存中间件的默认缓存，并将全局缓存超时设置为 `15` 分钟。你还指定了所有缓存键的前缀，以避免在为多个项目使用相同的 Memcached
    后端时发生冲突。现在，你的网站将为所有 `GET` 请求缓存和返回缓存内容。
- en: You can access the different pages and check the cache requests using Django
    Debug Toolbar. The per-site cache is not viable for many sites because it affects
    all views, even the ones that you might not want to cache, like management views
    where you want data to be returned from the database to reflect the latest changes.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Django Debug Toolbar 访问不同的页面并检查缓存请求。对于许多网站来说，按站点缓存不可行，因为它会影响所有视图，甚至是你可能不想缓存的视图，比如管理视图，你希望数据从数据库返回以反映最新的更改。
- en: In this project, the best approach is to cache the templates or views that are
    used to display course contents to students while keeping the content management
    views for instructors without any cache.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，最佳做法是缓存用于向学生显示课程内容的模板或视图，同时对于讲师的内容管理视图不进行任何缓存。
- en: 'Let’s deactivate the per-site cache. Edit the `settings.py` file of your project
    and comment out the `UpdateCacheMiddleware` and `FetchFromCacheMiddleware` classes
    in the `MIDDLEWARE` setting, as follows:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们停用按站点缓存。编辑你项目的 `settings.py` 文件，并在 `MIDDLEWARE` 设置中注释掉 `UpdateCacheMiddleware`
    和 `FetchFromCacheMiddleware` 类，如下所示：
- en: '[PRE70]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: You have seen an overview of the different methods provided by Django to cache
    data. You should always define your cache strategy wisely, taking into account
    expensive QuerySets or calculations, data that won’t change frequently, and data
    that will be accessed concurrently by many users.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了 Django 提供的不同缓存方法的概述。你应该始终明智地定义你的缓存策略，考虑到昂贵的 QuerySets 或计算，不会频繁更改的数据，以及将被许多用户并发访问的数据。
- en: Using the Redis cache backend
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Redis 缓存后端
- en: Django also provides a Redis cache backend. Let’s change the settings to use
    Redis instead of Memcached as the cache backend for the project. Remember that
    you already used Redis in *Chapter 7*, *Tracking User Actions*, and in *Chapter
    10*, *Extending Your Shop*.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: Django 还提供了 Redis 缓存后端。让我们更改设置，将 Redis 作为项目缓存后端而不是 Memcached。记住，你已经在 *第 7 章*，*跟踪用户行为*
    和 *第 10 章*，*扩展你的商店* 中使用了 Redis。
- en: 'Install `redis-py` in your environment using the following command:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在你的环境中安装 `redis-py`：
- en: '[PRE71]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Then, edit the `settings.py` file of the `educa` project and modify the `CACHES`
    setting, as follows:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，编辑 `educa` 项目的 `settings.py` 文件并修改 `CACHES` 设置，如下所示：
- en: '[PRE72]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The project will now use the `RedisCache` cache backend. The location is defined
    in the format `redis://[host]:[port]`. You use `127.0.0.1` to point to the localhost
    and `6379`, which is the default port for Redis.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 项目现在将使用 `RedisCache` 缓存后端。位置格式定义为 `redis://[host]:[port]`。你使用 `127.0.0.1` 指向本地主机，`6379`
    是 Redis 的默认端口。
- en: You can read more about the Redis cache backend at [https://docs.djangoproject.com/en/5.0/topics/cache/#redis](https://docs.djangoproject.com/en/5.0/topics/cache/#redis).
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://docs.djangoproject.com/en/5.0/topics/cache/#redis](https://docs.djangoproject.com/en/5.0/topics/cache/#redis)
    上阅读更多关于 Redis 缓存后端的信息。
- en: 'Initialize the Redis Docker container using the following command:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令初始化 Redis Docker 容器：
- en: '[PRE73]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: If you want to run the command in the background (in detached mode), you can
    use the `-d` option.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在后台（分离模式）运行命令，可以使用 `-d` 选项。
- en: Run the development server and open `http://127.0.0.1:8000/` in your browser.
    Check the cache requests in the **Cache** panel of Django Debug Toolbar. You are
    now using Redis as your project’s cache backend instead of Memcached.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 运行开发服务器并在浏览器中打开 `http://127.0.0.1:8000/`。检查 Django Debug Toolbar 的 **缓存** 面板中的缓存请求。你现在正在使用
    Redis 作为项目缓存后端而不是 Memcached。
- en: Monitoring Redis with Django Redisboard
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Django Redisboard 监控 Redis
- en: You can monitor your Redis server using Django Redisboard. Django Redisboard
    adds Redis statistics to the Django administration site. You can find more information
    about Django Redisboard at [https://github.com/ionelmc/django-redisboard](https://github.com/ionelmc/django-redisboard).
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Django Redisboard 监控你的 Redis 服务器。Django Redisboard 将 Redis 统计数据添加到 Django
    管理站点。你可以在 [https://github.com/ionelmc/django-redisboard](https://github.com/ionelmc/django-redisboard)
    上找到有关 Django Redisboard 的更多信息。
- en: 'Install `django-redisboard` in your environment using the following command:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在你的环境中安装 `django-redisboard`：
- en: '[PRE74]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Edit the `settings.py` file of your project and add the application to the
    `INSTALLED_APPS` setting, as follows:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑你的项目中的 `settings.py` 文件，并将应用程序添加到 `INSTALLED_APPS` 设置中，如下所示：
- en: '[PRE75]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Run the following command from your project’s directory to run the Django Redisboard
    migrations:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 从你的项目目录运行以下命令以运行 Django Redisboard 迁移：
- en: '[PRE76]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Run the development server and open `http://127.0.0.1:8000/admin/redisboard/redisserver/add/`
    in your browser to add a Redis server to monitor. For **Label**, enter `redis`,
    and for **URL**, enter `redis://localhost:6379/0`, as in *Figure 14.11*:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中运行开发服务器并打开 `http://127.0.0.1:8000/admin/redisboard/redisserver/add/` 以添加要监控的
    Redis 服务器。对于 **标签**，输入 `redis`，对于 **URL**，输入 `redis://localhost:6379/0`，如 *图 14.11*
    所示：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_14_11.png)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B21088_14_11.png)'
- en: 'Figure 14.11: The form to add a Redis server for Django Redisboard in the administration
    site'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.11：在管理网站上为 Django Redisboard 添加 Redis 服务器的表单
- en: 'We will monitor the Redis instance running on our localhost, which runs on
    port `6379` and uses the Redis database numbered `0`. Click on **SAVE**. The information
    will be saved to the database, and you will be able to see the Redis configuration
    and metrics on the Django administration site:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将监控运行在本地的 Redis 实例，该实例在端口 `6379` 上运行并使用编号为 `0` 的 Redis 数据库。点击 **保存**。信息将被保存到数据库中，你将能够在
    Django 管理网站上看到 Redis 配置和指标：
- en: '![](img/B21088_14_12.png)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_14_12.png)'
- en: 'Figure 14.12: The Redis monitoring of Django Redisboard on the administration
    site'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.12：Django Redisboard 在管理网站上的 Redis 监控
- en: Congratulations! You have successfully implemented caching for your project.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经成功实现了项目的缓存功能。
- en: Summary
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you implemented the public views for the course catalog. You
    built a system for students to register and enroll in courses. You also created
    the functionality to render different types of content for the course modules.
    Finally, you learned how to use the Django cache framework and you used the Memcached
    and Redis cache backends for your project.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你实现了课程目录的公共视图。你为学生们构建了一个注册和选修课程的系统。你还创建了为课程模块渲染不同类型内容的功能。最后，你学习了如何使用 Django
    缓存框架，并在你的项目中使用了 Memcached 和 Redis 缓存后端。
- en: In the next chapter, you will build a RESTful API for your project using Django
    REST framework and consume it using the Python Requests library.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将使用 Django REST 框架为你的项目构建一个 RESTful API，并使用 Python Requests 库来消费它。
- en: Additional resources
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他资源
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源提供了与本章所涵盖主题相关的额外信息：
- en: 'Source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter14](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter14
    )'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的源代码：[https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter14](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter14
    )
- en: '`django-embed-video` documentation: [https://django-embed-video.readthedocs.io/en/latest/](https://django-embed-video.readthedocs.io/en/latest/)'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django-embed-video` 文档：[https://django-embed-video.readthedocs.io/en/latest/](https://django-embed-video.readthedocs.io/en/latest/)'
- en: 'Django’s cache framework documentation: [https://docs.djangoproject.com/en/5.0/topics/cache/](https://docs.djangoproject.com/en/5.0/topics/cache/)'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 的缓存框架文档：[https://docs.djangoproject.com/en/5.0/topics/cache/](https://docs.djangoproject.com/en/5.0/topics/cache/)
- en: 'Memcached Docker image: [https://hub.docker.com/_/memcached](https://hub.docker.com/_/memcached)'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Memcached Docker 镜像：[https://hub.docker.com/_/memcached](https://hub.docker.com/_/memcached)
- en: 'Memcached downloads: [https://memcached.org/downloads](https://memcached.org/downloads)'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Memcached 下载：[https://memcached.org/downloads](https://memcached.org/downloads)
- en: 'Memcached official website: [https://memcached.org](https://memcached.org)'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Memcached 官方网站：[https://memcached.org](https://memcached.org)
- en: 'Django’s `CACHES` settings documentation: [https://docs.djangoproject.com/en/5.0/ref/settings/#caches](https://docs.djangoproject.com/en/5.0/ref/settings/#caches).'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 的 `CACHES` 设置文档：[https://docs.djangoproject.com/en/5.0/ref/settings/#caches](https://docs.djangoproject.com/en/5.0/ref/settings/#caches).
- en: '`pymemcache`''s source code: [https://github.com/pinterest/pymemcache](https://github.com/pinterest/pymemcache)'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pymemcache` 的源代码：[https://github.com/pinterest/pymemcache](https://github.com/pinterest/pymemcache)'
- en: 'Django Redis cache backend: [https://docs.djangoproject.com/en/5.0/topics/cache/#redis](https://docs.djangoproject.com/en/5.0/topics/cache/#redis)'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django Redis 缓存后端：[https://docs.djangoproject.com/en/5.0/topics/cache/#redis](https://docs.djangoproject.com/en/5.0/topics/cache/#redis)
- en: 'Official Redis Docker image: [https://hub.docker.com/_/redis](https://hub.docker.com/_/redis)'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方Redis Docker镜像：[https://hub.docker.com/_/redis](https://hub.docker.com/_/redis)
- en: 'Redis download options: [https://redis.io/download/](https://redis.io/download/)'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis下载选项：[https://redis.io/download/](https://redis.io/download/)
- en: 'Django Redisboard source code: [https://github.com/ionelmc/django-redisboard](https://github.com/ionelmc/django-redisboard)'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django Redisboard源代码：[https://github.com/ionelmc/django-redisboard](https://github.com/ionelmc/django-redisboard)
